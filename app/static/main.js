function activeBuy(e){0==e&&swal({title:"<h3 class='swal'>Режим работы доставки</h3><br>Понедельник 10:00 – 01:00<br>Вторник 10:00 – 01:00<br>Среда 10:00 – 01:00<br>Вторник 10:00 – 01:00<br>Четверг 10:00 – 01:00<br>Пятница 10:00 – 02:00<br>Суббота 11:00 – 02:00<br>Воскресенье 11:00 – 01:00<br>",confirmButtonColor:"#4CAF50",text:"",type:"info",html:!0,showConfirmButton:!0,confirmButtonText:"Хорошо, зайду позже!",closeOnConfirm:!1})}function activeCart(e){0==e&&swal({title:"<h3 class='swal'>Режим работы доставки</h3><br>Понедельник 10:00 – 01:00<br>Вторник 10:00 – 01:00<br>Среда 10:00 – 01:00<br>Вторник 10:00 – 01:00<br>Четверг 10:00 – 01:00<br>Пятница 10:00 – 02:00<br>Суббота 11:00 – 02:00<br>Воскресенье 11:00 – 01:00<br>",confirmButtonColor:"#4CAF50",text:"",type:"info",html:!0,showConfirmButton:!0,confirmButtonText:"Хорошо, зайду позже!",closeOnConfirm:!1})}function get_act(e,t){var n=new Date,i=n.getHours(),r=new Date;r.setDate(r.getDate()+1),r.setHours(t,0,0);var a=r.getHours();return i>=e&&a<=t?1:0}function uniqId(){return"uniqId"+Math.round((new Date).getTime()+1e3*Math.random())}function sous_select(e){var t=cache_for_datatable,n=uniqId();dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select id='"+n+"' class='basic' ><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number'  value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect().on("change.fs",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable()))}),thiss=$(this),$("#"+n+" :contains("+e+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"/static/img/check.png"}),$(".basic").trigger("update.fs")}function delivery_func(){"undefined"===delivery||null==delivery?$("#select_delivery").nifty("show"):$("input:radio[name=group2][value='"+sessionStorage.getItem("delivery")+"']").prop({checked:!0})}function loadList(e){if($(".addrList li").remove(),e.length>0)for(var t=0;t<e.length;t++)$("ul.addrList").append('<li class= "list-group-item" data-toggle="modal" data-target="#editModal">'+e[t]+'<span class="fa fa-close"></span></li>')}function storeToLocal(e,t){var n=JSON.stringify(t);localStorage[e]=n}function getFromLocal(e){return localStorage[e]?JSON.parse(localStorage[e]):[]}function initIfhaveSession(){var e=localStorage.getItem("cart");if(null!=e){var t=JSON.parse(e);"Корзина пуста"!=t[0].row[0]&&(t.forEach(function(e){if(null==e.row[1])dataTable.row.add([e.row[0],"","<input type='number' data-category='"+e.row[5]+"' value='"+e.row[2]+"' data-price='"+e.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm());else{var t=uniqId();dataTable.row.add([e.row[0],"<select id='"+t+"' class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input  type='number' data-category='"+e.row[5]+"' value='"+e.row[2]+"' data-price='"+e.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect().on("change.fs",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable()))}),$(".fancified").on("change",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable())),console.log("basic change ")}),$("#"+t+" :contains("+e.row[1]+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())}}),$(".basic").trigger("update.fs"))}}function dataFromTable(){var e=new Array;return $("#tableOrder tr").each(function(t,n){e[t]={row:[$(n).find("td:eq(0)").html(),$(n).find("td:eq(1)").find(".fancified option:selected").val(),$(n).find("td:eq(2)").find("input").val(),$(n).find("td:eq(3)").text(),$(n).find("td:eq(4)").find("a").attr("id"),$(n).find("td:eq(2)").find("input").attr("data-category")]}}),e.shift(),e}function fnGetSelected(e){return e.$("tr.selected")}function calculateSumm(){summ=0;var e=0;return $(".checkOut input[type=number]").each(function(){"Пицца"==$(this).data("category")?(e+=parseInt($(this).val()*$(this).attr("data-price")),console.log(e)):summ+=parseInt($(this).val()*$(this).attr("data-price"))}),summ+=e,summ=summ-summ*global_sale/100-summ*global_inTime/100,$(".userIsAuch .full_price").length&&$(".full_price").text(summ),$(".borderLeft .full_price").length&&$(".full_price").text(summ),$.cookie("cart",JSON.stringify(dataFromTable())),$.cookie("cart_price",summ),$("#hidden_table").val(JSON.stringify(dataFromTable())),$("#hidden_full_cost").val(summ),$("#hidden_allaboutorder").val($(".allaboutorder").html()),localStorage.setItem("cart",JSON.stringify(dataFromTable())),localStorage.setItem("cart_price",summ),summ}function unique(e){for(var t={},n=0;n<e.length;n++){var i=e[n];t[i]=!0}return Object.keys(t)}function removeA(e){for(var t,n,i=arguments,r=i.length;r>1&&e.length;)for(t=i[--r],$(".slider").anyslider();(n=e.indexOf(t))!==-1;)e.splice(n,1);return e}function onebuy(e){var t,n=new Date;switch(n.getDay()){case 0:t=get_act(11,1);break;case 1:t=get_act(10,1);break;case 2:t=get_act(10,1);break;case 3:t=get_act(10,1);break;case 4:t=get_act(10,1);break;case 5:t=get_act(10,2);break;case 6:t=get_act(11,2);break;default:t=0}if(0==t)activeCart(t);else{var i=e;1==i.sous?(cache_for_datatable=i,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+i.item_name+"</h3><small>"+i.item_component+"</small>"," ","<input data-category='"+i.item_category+"' type='number' value='1' data-price='"+i.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+i.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+i.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"})),cartItems.innerHTML=Number(cartItems.innerHTML)+1}}function closePopup(){null!=magnificPopup&&magnificPopup.close()}function warning(){$.cookie("localLinkClicked")?(console.log("window page"),$.removeCookie("localLinkClicked")):(console.log("window reload"),$.removeCookie("localLinkClicked"),$("#select_delivery").nifty("show"))}function getWeekDay(e){var t=["вс","пн","вт","ср","чт","пт","сб"];return t[e.getDay()]}function in_date(){var e=new Date,t=1,n=5,i=12,r=15;e.getDay()>=t&&e.getDay()<=n&&(console.log("in_date 1"),e.getHours()>=i&&e.getHours()<=r&&console.log("in_date 2"))}(function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),-1!==i&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o,s=this.getListenersAsObject(e);for(a in s)if(s.hasOwnProperty(a))for(n=s[a].slice(0),r=n.length;r--;)i=n[r],i.once===!0&&this.removeListener(e,i.listener),o=i.listener.apply(this,t||[]),o===this._getOnceReturnValue()&&this.removeListener(e,i.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}).call(this),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("wolfy87-eventemitter")):e.imagesLoaded=t(e,e.EventEmitter)}(window,function(e,t){function n(e,t){for(var n in t)e[n]=t[n];return e}function i(e){var t=[];if(Array.isArray(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function r(e,t,a){return this instanceof r?("string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=i(e),this.options=n({},this.options),"function"==typeof t?a=t:n(this.options,t),a&&this.on("always",a),this.getImages(),s&&(this.jqDeferred=new s.Deferred),void setTimeout(function(){this.check()}.bind(this))):new r(e,t,a)}function a(e){this.img=e}function o(e,t){this.url=e,this.element=t,this.img=new Image}var s=e.jQuery,l=e.console;r.prototype=Object.create(t.prototype),r.prototype.options={},r.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},r.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&d[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var a=e.querySelectorAll(this.options.background);for(i=0;i<a.length;i++){var o=a[i];this.addElementBackgroundImages(o)}}}};var d={1:!0,9:!0,11:!0};return r.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[2];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}},r.prototype.addImage=function(e){var t=new a(e);this.images.push(t)},r.prototype.addBackground=function(e,t){var n=new o(e,t);this.images.push(n)},r.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},r.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emit("progress",this,e,t),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&l&&l.log("progress: "+n,e,t)},r.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emit(e,this),this.emit("always",this),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},a.prototype=Object.create(t.prototype),a.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},a.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},a.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.img,t)},a.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},a.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},a.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},a.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},o.prototype=Object.create(a.prototype),o.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},o.prototype.unbindEvents=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this)},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.element,t)},r.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(s=t,s.fn.imagesLoaded=function(e,t){var n=new r(this,e,t);return n.jqDeferred.promise(s(this))})},r.makeJQueryPlugin(),r}),function(){"use strict";function e(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,i),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,t+=1}var t=0,n={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var i in n)t.push(n[i]);for(var r=0,a=t.length;r<a;r++)t[r][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.invokeAll("enable")},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){"use strict";function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=r.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,i[e.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,i={},r=window.Waypoint,a=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical);e&&t&&(this.adapter.off(".waypoints"),delete i[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,r.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){t.didScroll&&!r.isTouch||(t.didScroll=!0,r.requestAnimationFrame(e))})},t.prototype.handleResize=function(){r.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in t){var i=t[n],r=i.newScroll>i.oldScroll,a=r?i.forward:i.backward;for(var o in this.waypoints[n]){var s=this.waypoints[n][o],l=i.oldScroll<s.triggerPoint,d=i.newScroll>=s.triggerPoint,u=l&&d,c=!l&&!d;(u||c)&&(s.queueTrigger(a),e[s.group.id]=s.group)}}for(var h in e)e[h].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?r.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?r.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var n in this.waypoints[t])e.push(this.waypoints[t][n]);for(var i=0,r=e.length;i<r;i++)e[i].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,n=t?void 0:this.adapter.offset(),i={};this.handleScroll(),e={horizontal:{contextOffset:t?0:n.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:n.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var a in e){var o=e[a];for(var s in this.waypoints[a]){var l,d,u,c,h,p=this.waypoints[a][s],m=p.options.offset,f=p.triggerPoint,_=0,y=null==f;p.element!==p.element.window&&(_=p.adapter.offset()[o.offsetProp]),"function"==typeof m?m=m.apply(p):"string"==typeof m&&(m=parseFloat(m),p.options.offset.indexOf("%")>-1&&(m=Math.ceil(o.contextDimension*m/100))),l=o.contextScroll-o.contextOffset,p.triggerPoint=_+l-m,d=f<o.oldScroll,u=p.triggerPoint>=o.oldScroll,c=d&&u,h=!d&&!u,!y&&c?(p.queueTrigger(o.backward),i[p.group.id]=p.group):!y&&h?(p.queueTrigger(o.forward),i[p.group.id]=p.group):y&&o.oldScroll>=p.triggerPoint&&(p.queueTrigger(o.forward),i[p.group.id]=p.group)}}return r.requestAnimationFrame(function(){for(var e in i)i[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in i)i[e].refresh()},t.findByElement=function(e){return i[e.waypointContextKey]},window.onload=function(){a&&a(),t.refreshAll()},r.requestAnimationFrame=function(t){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e;n.call(window,t)},r.Context=t}(),function(){"use strict";function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function n(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}var i={vertical:{},horizontal:{}},r=window.Waypoint;n.prototype.add=function(e){this.waypoints.push(e)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],r="up"===n||"left"===n;i.sort(r?t:e);for(var a=0,o=i.length;a<o;a+=1){var s=i[a];(s.options.continuous||a===i.length-1)&&s.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints),i=n===this.waypoints.length-1;return i?null:this.waypoints[n+1]},n.prototype.previous=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},n.prototype.remove=function(e){var t=r.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(e){return i[e.axis][e.name]||new n(e)},r.Group=n}(),function(){"use strict";function e(e){return e===e.window}function t(t){return e(t)?t:t.defaultView}function n(e){this.element=e,this.handlers={}}var i=window.Waypoint;n.prototype.innerHeight=function(){var t=e(this.element);return t?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var t=e(this.element);return t?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(e,t){function n(e,t,n){for(var i=0,r=t.length-1;i<r;i++){var a=t[i];n&&n!==a||e.removeEventListener(a)}}var i=e.split("."),r=i[0],a=i[1],o=this.element;if(a&&this.handlers[a]&&r)n(o,this.handlers[a][r],t),this.handlers[a][r]=[];else if(r)for(var s in this.handlers)n(o,this.handlers[s][r]||[],t),this.handlers[s][r]=[];else if(a&&this.handlers[a]){for(var l in this.handlers[a])n(o,this.handlers[a][l],t);this.handlers[a]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var e=this.element.ownerDocument.documentElement,n=t(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}},n.prototype.on=function(e,t){var n=e.split("."),i=n[0],r=n[1]||"__default",a=this.handlers[r]=this.handlers[r]||{},o=a[i]=a[i]||[];o.push(t),this.element.addEventListener(i,t)},n.prototype.outerHeight=function(t){var n,i=this.innerHeight();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},n.prototype.outerWidth=function(t){var n,i=this.innerWidth();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},n.prototype.scrollLeft=function(){var e=t(this.element);return e?e.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var e=t(this.element);return e?e.pageYOffset:this.element.scrollTop},n.extend=function(){function e(e,t){if("object"==typeof e&&"object"==typeof t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}for(var t=Array.prototype.slice.call(arguments),n=1,i=t.length;n<i;n++)e(t[0],t[n]);return t[0]},n.inArray=function(e,t,n){return null==t?-1:t.indexOf(e,n)},n.isEmptyObject=function(e){for(var t in e)return!1;return!0},i.adapters.push({name:"noframework",Adapter:n}),i.Adapter=n}(),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){function t(e){return s.raw?e:encodeURIComponent(e)}function n(e){return s.raw?e:decodeURIComponent(e)}function i(e){return t(s.json?JSON.stringify(e):String(e))}function r(e){0===e.indexOf('"')&&(e=e.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return e=decodeURIComponent(e.replace(o," ")),s.json?JSON.parse(e):e}catch(t){}}function a(t,n){var i=s.raw?t:r(t);return e.isFunction(n)?n(i):i}var o=/\+/g,s=e.cookie=function(r,o,l){if(void 0!==o&&!e.isFunction(o)){if(l=e.extend({},s.defaults,l),"number"==typeof l.expires){var d=l.expires,u=l.expires=new Date;u.setTime(+u+864e5*d)}return document.cookie=[t(r),"=",i(o),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var c=r?void 0:{},h=document.cookie?document.cookie.split("; "):[],p=0,m=h.length;p<m;p++){var f=h[p].split("="),_=n(f.shift()),y=f.join("=");if(r&&r===_){c=a(y,o);break}r||void 0===(y=a(y))||(c[_]=y)}return c};s.defaults={},e.removeCookie=function(t,n){return void 0!==e.cookie(t)&&(e.cookie(t,"",e.extend({},n,{expires:-1})),!e.cookie(t))}}),function(e,t,n,i){"use strict";function r(e,t,n){return setTimeout(u(e,n),t)}function a(e,t,n){return!!Array.isArray(e)&&(o(e,n[t],n),!0)}function o(e,t,n){var r;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==i)for(r=0;r<e.length;)t.call(n,e[r],r,e),r++;else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e)}function s(e,t,n){for(var r=Object.keys(t),a=0;a<r.length;)(!n||n&&e[r[a]]===i)&&(e[r[a]]=t[r[a]]),a++;return e}function l(e,t){return s(e,t,!0)}function d(e,t,n){var i,r=t.prototype;i=e.prototype=Object.create(r),i.constructor=e,i._super=r,n&&s(i,n)}function u(e,t){return function(){return e.apply(t,arguments)}}function c(e,t){return typeof e==ue?e.apply(t?t[0]||i:i,t):e}function h(e,t){return e===i?t:e}function p(e,t,n){o(y(t),function(t){e.addEventListener(t,n,!1)})}function m(e,t,n){o(y(t),function(t){e.removeEventListener(t,n,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function _(e,t){return e.indexOf(t)>-1}function y(e){return e.trim().split(/\s+/g)}function g(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function v(e){return Array.prototype.slice.call(e,0)}function M(e,t,n){for(var i=[],r=[],a=0;a<e.length;){var o=t?e[a][t]:e[a];g(r,o)<0&&i.push(e[a]),r[a]=o,a++}return n&&(i=t?i.sort(function(e,n){return e[t]>n[t]}):i.sort()),i}function L(e,t){for(var n,r,a=t[0].toUpperCase()+t.slice(1),o=0;o<le.length;){if(n=le[o],r=n?n+a:t,r in e)return r;o++}return i}function b(){return me++}function w(e){var t=e.ownerDocument;return t.defaultView||t.parentWindow}function D(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){c(e.options.enable,[e])&&n.handler(t)},this.init()}function k(e){var t,n=e.options.inputClass;return new(t=n?n:ye?F:ge?$:_e?q:z)(e,T)}function T(e,t,n){var i=n.pointers.length,r=n.changedPointers.length,a=t&De&&i-r===0,o=t&(Te|Ye)&&i-r===0;n.isFirst=!!a,n.isFinal=!!o,a&&(e.session={}),n.eventType=t,Y(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function Y(e,t){var n=e.session,i=t.pointers,r=i.length;n.firstInput||(n.firstInput=C(t)),r>1&&!n.firstMultiple?n.firstMultiple=C(t):1===r&&(n.firstMultiple=!1);var a=n.firstInput,o=n.firstMultiple,s=o?o.center:a.center,l=t.center=E(i);t.timeStamp=pe(),t.deltaTime=t.timeStamp-a.timeStamp,t.angle=P(s,l),t.distance=j(s,l),S(n,t),t.offsetDirection=A(t.deltaX,t.deltaY),t.scale=o?O(o.pointers,i):1,t.rotation=o?I(o.pointers,i):0,x(n,t);var d=e.element;f(t.srcEvent.target,d)&&(d=t.srcEvent.target),t.target=d}function S(e,t){var n=t.center,i=e.offsetDelta||{},r=e.prevDelta||{},a=e.prevInput||{};t.eventType!==De&&a.eventType!==Te||(r=e.prevDelta={x:a.deltaX||0,y:a.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=r.x+(n.x-i.x),t.deltaY=r.y+(n.y-i.y)}function x(e,t){var n,r,a,o,s=e.lastInterval||t,l=t.timeStamp-s.timeStamp;if(t.eventType!=Ye&&(l>we||s.velocity===i)){var d=s.deltaX-t.deltaX,u=s.deltaY-t.deltaY,c=H(l,d,u);r=c.x,a=c.y,n=he(c.x)>he(c.y)?c.x:c.y,o=A(d,u),e.lastInterval=t}else n=s.velocity,r=s.velocityX,a=s.velocityY,o=s.direction;t.velocity=n,t.velocityX=r,t.velocityY=a,t.direction=o}function C(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:ce(e.pointers[n].clientX),clientY:ce(e.pointers[n].clientY)},n++;return{timeStamp:pe(),pointers:t,center:E(t),deltaX:e.deltaX,deltaY:e.deltaY}}function E(e){var t=e.length;if(1===t)return{x:ce(e[0].clientX),y:ce(e[0].clientY)};for(var n=0,i=0,r=0;r<t;)n+=e[r].clientX,i+=e[r].clientY,r++;return{x:ce(n/t),y:ce(i/t)}}function H(e,t,n){return{x:t/e||0,y:n/e||0}}function A(e,t){return e===t?Se:he(e)>=he(t)?e>0?xe:Ce:t>0?Ee:He}function j(e,t,n){n||(n=Ie);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return Math.sqrt(i*i+r*r)}function P(e,t,n){n||(n=Ie);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return 180*Math.atan2(r,i)/Math.PI}function I(e,t){return P(t[1],t[0],Oe)-P(e[1],e[0],Oe)}function O(e,t){return j(t[0],t[1],Oe)/j(e[0],e[1],Oe)}function z(){this.evEl=Fe,this.evWin=We,this.allow=!0,this.pressed=!1,D.apply(this,arguments)}function F(){this.evEl=Ne,this.evWin=qe,D.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function W(){this.evTarget=Ue,this.evWin=Je,this.started=!1,D.apply(this,arguments)}function R(e,t){var n=v(e.touches),i=v(e.changedTouches);return t&(Te|Ye)&&(n=M(n.concat(i),"identifier",!0)),[n,i]}function $(){this.evTarget=Ge,this.targetIds={},D.apply(this,arguments)}function N(e,t){var n=v(e.touches),i=this.targetIds;if(t&(De|ke)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,a,o=v(e.changedTouches),s=[],l=this.target;if(a=n.filter(function(e){return f(e.target,l)}),t===De)for(r=0;r<a.length;)i[a[r].identifier]=!0,r++;for(r=0;r<o.length;)i[o[r].identifier]&&s.push(o[r]),t&(Te|Ye)&&delete i[o[r].identifier],r++;return s.length?[M(a.concat(s),"identifier",!0),s]:void 0}function q(){D.apply(this,arguments);var e=u(this.handler,this);this.touch=new $(this.manager,e),this.mouse=new z(this.manager,e)}function B(e,t){this.manager=e,this.set(t)}function U(e){if(_(e,tt))return tt;var t=_(e,nt),n=_(e,it);return t&&n?nt+" "+it:t||n?t?nt:it:_(e,et)?et:Ze}function J(e){this.id=b(),this.manager=null,this.options=l(e||{},this.defaults),this.options.enable=h(this.options.enable,!0),this.state=rt,this.simultaneous={},this.requireFail=[]}function V(e){return e&dt?"cancel":e&st?"end":e&ot?"move":e&at?"start":""}function G(e){return e==He?"down":e==Ee?"up":e==xe?"left":e==Ce?"right":""}function X(e,t){var n=t.manager;return n?n.get(e):e}function K(){J.apply(this,arguments)}function Q(){K.apply(this,arguments),this.pX=null,this.pY=null}function Z(){K.apply(this,arguments)}function ee(){J.apply(this,arguments),this._timer=null,
this._input=null}function te(){K.apply(this,arguments)}function ne(){K.apply(this,arguments)}function ie(){J.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function re(e,t){return t=t||{},t.recognizers=h(t.recognizers,re.defaults.preset),new ae(e,t)}function ae(e,t){t=t||{},this.options=l(t,re.defaults),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.element=e,this.input=k(this),this.touchAction=new B(this,this.options.touchAction),oe(this,!0),o(t.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function oe(e,t){var n=e.element;o(e.options.cssProps,function(e,i){n.style[L(n.style,i)]=t?e:""})}function se(e,n){var i=t.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var le=["","webkit","moz","MS","ms","o"],de=t.createElement("div"),ue="function",ce=Math.round,he=Math.abs,pe=Date.now,me=1,fe=/mobile|tablet|ip(ad|hone|od)|android/i,_e="ontouchstart"in e,ye=L(e,"PointerEvent")!==i,ge=_e&&fe.test(navigator.userAgent),ve="touch",Me="pen",Le="mouse",be="kinect",we=25,De=1,ke=2,Te=4,Ye=8,Se=1,xe=2,Ce=4,Ee=8,He=16,Ae=xe|Ce,je=Ee|He,Pe=Ae|je,Ie=["x","y"],Oe=["clientX","clientY"];D.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(w(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(w(this.element),this.evWin,this.domHandler)}};var ze={mousedown:De,mousemove:ke,mouseup:Te},Fe="mousedown",We="mousemove mouseup";d(z,D,{handler:function(e){var t=ze[e.type];t&De&&0===e.button&&(this.pressed=!0),t&ke&&1!==e.which&&(t=Te),this.pressed&&this.allow&&(t&Te&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:Le,srcEvent:e}))}});var Re={pointerdown:De,pointermove:ke,pointerup:Te,pointercancel:Ye,pointerout:Ye},$e={2:ve,3:Me,4:Le,5:be},Ne="pointerdown",qe="pointermove pointerup pointercancel";e.MSPointerEvent&&(Ne="MSPointerDown",qe="MSPointerMove MSPointerUp MSPointerCancel"),d(F,D,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),r=Re[i],a=$e[e.pointerType]||e.pointerType,o=a==ve,s=g(t,e.pointerId,"pointerId");r&De&&(0===e.button||o)?s<0&&(t.push(e),s=t.length-1):r&(Te|Ye)&&(n=!0),s<0||(t[s]=e,this.callback(this.manager,r,{pointers:t,changedPointers:[e],pointerType:a,srcEvent:e}),n&&t.splice(s,1))}});var Be={touchstart:De,touchmove:ke,touchend:Te,touchcancel:Ye},Ue="touchstart",Je="touchstart touchmove touchend touchcancel";d(W,D,{handler:function(e){var t=Be[e.type];if(t===De&&(this.started=!0),this.started){var n=R.call(this,e,t);t&(Te|Ye)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:ve,srcEvent:e})}}});var Ve={touchstart:De,touchmove:ke,touchend:Te,touchcancel:Ye},Ge="touchstart touchmove touchend touchcancel";d($,D,{handler:function(e){var t=Ve[e.type],n=N.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:ve,srcEvent:e})}}),d(q,D,{handler:function(e,t,n){var i=n.pointerType==ve,r=n.pointerType==Le;if(i)this.mouse.allow=!1;else if(r&&!this.mouse.allow)return;t&(Te|Ye)&&(this.mouse.allow=!0),this.callback(e,t,n)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Xe=L(de.style,"touchAction"),Ke=Xe!==i,Qe="compute",Ze="auto",et="manipulation",tt="none",nt="pan-x",it="pan-y";B.prototype={set:function(e){e==Qe&&(e=this.compute()),Ke&&(this.manager.element.style[Xe]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return o(this.manager.recognizers,function(t){c(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),U(e.join(" "))},preventDefaults:function(e){if(!Ke){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)return void t.preventDefault();var i=this.actions,r=_(i,tt),a=_(i,it),o=_(i,nt);return r||a&&n&Ae||o&&n&je?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var rt=1,at=2,ot=4,st=8,lt=st,dt=16,ut=32;J.prototype={defaults:{},set:function(e){return s(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(a(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=X(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return a(e,"dropRecognizeWith",this)?this:(e=X(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(a(e,"requireFailure",this))return this;var t=this.requireFail;return e=X(e,this),g(t,e)===-1&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(a(e,"dropRequireFailure",this))return this;e=X(e,this);var t=g(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(n.options.event+(t?V(i):""),e)}var n=this,i=this.state;i<st&&t(!0),t(),i>=st&&t(!0)},tryEmit:function(e){return this.canEmit()?this.emit(e):void(this.state=ut)},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(ut|rt)))return!1;e++}return!0},recognize:function(e){var t=s({},e);return c(this.options.enable,[this,t])?(this.state&(lt|dt|ut)&&(this.state=rt),this.state=this.process(t),void(this.state&(at|ot|st|dt)&&this.tryEmit(t))):(this.reset(),void(this.state=ut))},process:function(e){},getTouchAction:function(){},reset:function(){}},d(K,J,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=t&(at|ot),r=this.attrTest(e);return i&&(n&Ye||!r)?t|dt:i||r?n&Te?t|st:t&at?t|ot:at:ut}}),d(Q,K,{defaults:{event:"pan",threshold:10,pointers:1,direction:Pe},getTouchAction:function(){var e=this.options.direction,t=[];return e&Ae&&t.push(it),e&je&&t.push(nt),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,r=e.direction,a=e.deltaX,o=e.deltaY;return r&t.direction||(t.direction&Ae?(r=0===a?Se:a<0?xe:Ce,n=a!=this.pX,i=Math.abs(e.deltaX)):(r=0===o?Se:o<0?Ee:He,n=o!=this.pY,i=Math.abs(e.deltaY))),e.direction=r,n&&i>t.threshold&&r&t.direction},attrTest:function(e){return K.prototype.attrTest.call(this,e)&&(this.state&at||!(this.state&at)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=G(e.direction);t&&this.manager.emit(this.options.event+t,e),this._super.emit.call(this,e)}}),d(Z,K,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[tt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&at)},emit:function(e){if(this._super.emit.call(this,e),1!==e.scale){var t=e.scale<1?"in":"out";this.manager.emit(this.options.event+t,e)}}}),d(ee,J,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return[Ze]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,a=e.deltaTime>t.time;if(this._input=e,!i||!n||e.eventType&(Te|Ye)&&!a)this.reset();else if(e.eventType&De)this.reset(),this._timer=r(function(){this.state=lt,this.tryEmit()},t.time,this);else if(e.eventType&Te)return lt;return ut},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===lt&&(e&&e.eventType&Te?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=pe(),this.manager.emit(this.options.event,this._input)))}}),d(te,K,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[tt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&at)}}),d(ne,K,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:Ae|je,pointers:1},getTouchAction:function(){return Q.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(Ae|je)?t=e.velocity:n&Ae?t=e.velocityX:n&je&&(t=e.velocityY),this._super.attrTest.call(this,e)&&n&e.direction&&e.distance>this.options.threshold&&he(t)>this.options.velocity&&e.eventType&Te},emit:function(e){var t=G(e.direction);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),d(ie,J,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[et]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,a=e.deltaTime<t.time;if(this.reset(),e.eventType&De&&0===this.count)return this.failTimeout();if(i&&a&&n){if(e.eventType!=Te)return this.failTimeout();var o=!this.pTime||e.timeStamp-this.pTime<t.interval,s=!this.pCenter||j(this.pCenter,e.center)<t.posThreshold;this.pTime=e.timeStamp,this.pCenter=e.center,s&&o?this.count+=1:this.count=1,this._input=e;var l=this.count%t.taps;if(0===l)return this.hasRequireFailures()?(this._timer=r(function(){this.state=lt,this.tryEmit()},t.interval,this),at):lt}return ut},failTimeout:function(){return this._timer=r(function(){this.state=ut},this.options.interval,this),ut},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==lt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),re.VERSION="2.0.4",re.defaults={domEvents:!1,touchAction:Qe,enable:!0,inputTarget:null,inputClass:null,preset:[[te,{enable:!1}],[Z,{enable:!1},["rotate"]],[ne,{direction:Ae}],[Q,{direction:Ae},["swipe"]],[ie],[ie,{event:"doubletap",taps:2},["tap"]],[ee]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var ct=1,ht=2;ae.prototype={set:function(e){return s(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?ht:ct},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,i=this.recognizers,r=t.curRecognizer;(!r||r&&r.state&lt)&&(r=t.curRecognizer=null);for(var a=0;a<i.length;)n=i[a],t.stopped===ht||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(e),!r&&n.state&(at|ot|st)&&(r=t.curRecognizer=n),a++}},get:function(e){if(e instanceof J)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(a(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(a(e,"remove",this))return this;var t=this.recognizers;return e=this.get(e),t.splice(g(t,e),1),this.touchAction.update(),this},on:function(e,t){var n=this.handlers;return o(y(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this},off:function(e,t){var n=this.handlers;return o(y(e),function(e){t?n[e].splice(g(n[e],t),1):delete n[e]}),this},emit:function(e,t){this.options.domEvents&&se(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&oe(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},s(re,{INPUT_START:De,INPUT_MOVE:ke,INPUT_END:Te,INPUT_CANCEL:Ye,STATE_POSSIBLE:rt,STATE_BEGAN:at,STATE_CHANGED:ot,STATE_ENDED:st,STATE_RECOGNIZED:lt,STATE_CANCELLED:dt,STATE_FAILED:ut,DIRECTION_NONE:Se,DIRECTION_LEFT:xe,DIRECTION_RIGHT:Ce,DIRECTION_UP:Ee,DIRECTION_DOWN:He,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:je,DIRECTION_ALL:Pe,Manager:ae,Input:D,TouchAction:B,TouchInput:$,MouseInput:z,PointerEventInput:F,TouchMouseInput:q,SingleTouchInput:W,Recognizer:J,AttrRecognizer:K,Tap:ie,Pan:Q,Swipe:ne,Pinch:Z,Rotate:te,Press:ee,on:p,off:m,each:o,merge:l,extend:s,inherit:d,bindFn:u,prefixed:L}),typeof define==ue&&define.amd?define(function(){return re}):"undefined"!=typeof module&&module.exports?module.exports=re:e[n]=re}(window,document,"Hammer"),function(e,t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?t(require("jquery"),window,document):t(e.jQuery||e.Zepto,window,document)}(this,function(e,t,n){"use strict";var i=function(i,r){function a(){L=M,0===M?(L=y,"fade"!==r.animation&&m.css("left",-L*v)):M===g-1&&(L=1,"fade"!==r.animation&&m.css("left",-v)),"fade"===r.animation&&_.eq(L).show(),r.showBullets&&i.next(".as-nav").find("a").removeClass("as-active").eq(L-1).addClass("as-active"),b=!1,r.afterChange.call(i[0])}function o(){b||y<=1||(b=!0,r.beforeChange.call(i[0]),"fade"===r.animation?_.css("z-index",1).fadeOut(r.speed).eq(M).css("z-index",2).fadeIn(r.speed,a):m.animate({left:-M*v},r.speed,r.easing,a),s())}function s(){clearTimeout(f),r.interval&&y>1&&(f=setTimeout(function(){r.reverse?p():u()},r.interval))}function l(){return L}function d(e){M=e,o()}function u(){M=L+1,o()}function c(){clearTimeout(f)}function h(){s()}function p(){M=L-1,o()}var m,f,_=i.children(),y=_.length,g=y,v=i.width(),M=0,L=0,b=!1,w={afterChange:function(){},afterSetup:function(){},animation:"slide",beforeChange:function(){},easing:"swing",interval:5e3,keyboard:!0,nextLabel:"Next slide",pauseOnHover:!0,prevLabel:"Previous slide",reverse:!1,showBullets:!0,showControls:!0,speed:400,startSlide:1,touch:!0};if(r=e.extend(w,r),y>1&&(_.eq(0).clone().addClass("clone").appendTo(i),_.eq(g-1).clone().addClass("clone").prependTo(i),r.startSlide<y&&(L=r.startSlide)),_=i.children(),g=_.length,_.wrapAll('<div class="as-slide-inner"></div>').css("width",v),m=i.css("overflow","hidden").find(".as-slide-inner"),"fade"===r.animation?(_.css({display:"none",left:0,position:"absolute",top:0}).eq(L).show(),m.css("width",v)):(_.css({"float":"left",position:"relative"}),m.css({left:-L*v,width:g*v})),m.css({"float":"left",position:"relative"}),r.showControls&&y>1&&(i.prepend('<a href="#" class="as-prev-arrow" title="LABEL">LABEL</a>'.replace(/LABEL/g,r.prevLabel)),i.append('<a href="#" class="as-next-arrow" title="LABEL">LABEL</a>'.replace(/LABEL/g,r.nextLabel)),i.on("click.as",".as-prev-arrow, .as-next-arrow",function(t){t.preventDefault(),b||(e(this).hasClass("as-prev-arrow")?p():u())})),r.showBullets&&y>1){var D,k,T='<div class="as-nav"></div>',Y=e(T);for(k=1;k<=y;k++)D="",k===L&&(D=' class="as-active"'),Y.append('<a href="#"'+D+">"+k+"</a>");Y.on("click.as","a",function(t){var n=e(this).index();t.preventDefault(),e(this).hasClass("as-active")||b||(Y.find("a").removeClass("as-active").eq(n).addClass("as-active"),d(n+1))}),i.after(Y)}if(r.keyboard&&e(n).on("keydown.as",function(e){var t=e.keyCode;37!==t&&39!==t||y<=1||(37===t?p():u())}),r.pauseOnHover&&i.on("mouseenter",function(){c()}).on("mouseleave",function(){h()}),e(t).resize(function(){b||(v=i.width(),m.css("width",v),_.css("width",v),"fade"!==r.animation&&m.css({left:-L*v,width:g*v}))}),r.touch&&"ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints>0){var S,x;i.on("touchstart.as pointerdown.as MSPointerDown.as",function(e){S=e.timeStamp,x=e.originalEvent?e.originalEvent.pageX||e.originalEvent.touches[0].pageX:e.pageX||e.touches[0].pageX}).on("touchmove.as pointermove.as MSPointerMove.as",function(e){var t,n=e.timeStamp,r=0;t=e.originalEvent?e.originalEvent.pageX||e.originalEvent.touches[0].pageX:e.pageX||e.touches[0].pageX,0!==x&&(r=Math.abs(t-x)),0!==S&&n-S<1e3&&r>200&&(e.preventDefault(),t<x?u():t>x&&p(),S=0,x=0,i.trigger("touchend.as"))}).on("touchend.as pointerup.as MSPointerUp.as",function(){S=0,x=0})}return s(),r.afterSetup.call(i[0]),{currentSlide:l,goTo:d,next:u,pause:c,play:h,prev:p}};e.fn.anyslider=function(t){return this.each(function(){var n,r=e(this);return r.data("anyslider")?r.data("anyslider"):(n=new i(r,t),void r.data("anyslider",n))})}}),function(e){function t(){}function n(e){function n(t){t.prototype.option||(t.prototype.option=function(t){e.isPlainObject(t)&&(this.options=e.extend(!0,this.options,t))})}function r(t,n){e.fn[t]=function(r){if("string"==typeof r){for(var o=i.call(arguments,1),s=0,l=this.length;s<l;s++){var d=this[s],u=e.data(d,t);if(u)if(e.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,o);if(void 0!==c)return c}else a("no such method '"+r+"' for "+t+" instance");else a("cannot call methods on "+t+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=e.data(this,t);i?(i.option(r),i._init()):(i=new n(this,r),e.data(this,t,i))})}}if(e){var a="undefined"==typeof console?t:function(e){console.error(e)};return e.bridget=function(e,t){n(t),r(e,t)},e.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):e.jQuery)}(window),function(e){function t(e){return new RegExp("(^|\\s+)"+e+"(\\s+|$)")}function n(e,t){var n=i(e,t)?a:r;n(e,t)}var i,r,a;"classList"in document.documentElement?(i=function(e,t){return e.classList.contains(t)},r=function(e,t){e.classList.add(t)},a=function(e,t){e.classList.remove(t)}):(i=function(e,n){return t(n).test(e.className)},r=function(e,t){i(e,t)||(e.className=e.className+" "+t)},a=function(e,n){e.className=e.className.replace(t(n)," ")});var o={hasClass:i,addClass:r,removeClass:a,toggleClass:n,has:i,add:r,remove:a,toggle:n};"function"==typeof define&&define.amd?define("classie/classie",o):"object"==typeof exports?module.exports=o:e.classie=o}(window),function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&t(r[i],n)===-1&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),i!==-1&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}.call(this),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):"object"==typeof exports?module.exports=a:e.eventie=a}(window),function(e){function t(e){if(e){if("string"==typeof i[e])return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var t,r=0,a=n.length;r<a;r++)if(t=n[r]+e,"string"==typeof i[t])return t}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return t}):"object"==typeof exports?module.exports=t:e.getStyleProperty=t}(window),function(e,t){function n(e){var t=parseFloat(e),n=e.indexOf("%")===-1&&!isNaN(t);return n&&t}function i(){}function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0,n=s.length;t<n;t++){var i=s[t];e[i]=0}return e}function a(t){function i(){if(!h){h=!0;var i=e.getComputedStyle;if(d=function(){var e=i?function(e){return i(e,null)}:function(e){return e.currentStyle};return function(t){var n=e(t);return n||o("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),u=t("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[u]="border-box";var a=document.body||document.documentElement;a.appendChild(r);var s=d(r);c=200===n(s.width),a.removeChild(r)}}}function a(e){if(i(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=d(e);if("none"===t.display)return r();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var o=a.isBorderBox=!(!u||!t[u]||"border-box"!==t[u]),h=0,p=s.length;h<p;h++){var m=s[h],f=t[m];f=l(e,f);var _=parseFloat(f);a[m]=isNaN(_)?0:_}var y=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,v=a.marginLeft+a.marginRight,M=a.marginTop+a.marginBottom,L=a.borderLeftWidth+a.borderRightWidth,b=a.borderTopWidth+a.borderBottomWidth,w=o&&c,D=n(t.width);D!==!1&&(a.width=D+(w?0:y+L));var k=n(t.height);return k!==!1&&(a.height=k+(w?0:g+b)),a.innerWidth=a.width-(y+L),a.innerHeight=a.height-(g+b),a.outerWidth=a.width+v,a.outerHeight=a.height+M,a}}function l(t,n){if(e.getComputedStyle||n.indexOf("%")===-1)return n;var i=t.style,r=i.left,a=t.runtimeStyle,o=a&&a.left;return o&&(a.left=t.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,o&&(a.left=o),n}var d,u,c,h=!1;return a}var o="undefined"==typeof console?i:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],a):"object"==typeof exports?module.exports=a(require("desandro-get-style-property")):e.getSize=a(e.getStyleProperty)}(window),function(e){function t(e){"function"==typeof e&&(t.isReady?e():o.push(e))}function n(e){var n="readystatechange"===e.type&&"complete"!==a.readyState;t.isReady||n||i()}function i(){t.isReady=!0;for(var e=0,n=o.length;e<n;e++){var i=o[e];i()}}function r(r){return"complete"===a.readyState?i():(r.bind(a,"DOMContentLoaded",n),r.bind(a,"readystatechange",n),r.bind(e,"load",n)),t}var a=e.document,o=[];t.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):e.docReady=r(e.eventie)}(window),function(e){"use strict";function t(e,t){return e[o](t)}function n(e){if(!e.parentNode){var t=document.createDocumentFragment();t.appendChild(e)}}function i(e,t){n(e);for(var i=e.parentNode.querySelectorAll(t),r=0,a=i.length;r<a;r++)if(i[r]===e)return!0;return!1}function r(e,i){return n(e),t(e,i)}var a,o=function(){if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0,i=t.length;n<i;n++){var r=t[n],a=r+"MatchesSelector";if(e[a])return a}}();if(o){var s=document.createElement("div"),l=t(s,"div");a=l?t:r}else a=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return a}):"object"==typeof exports?module.exports=a:window.matchesSelector=a}(Element.prototype),function(e,t){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("doc-ready"),require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.docReady,e.matchesSelector)}(window,function(e,t,n){var i={};i.extend=function(e,t){for(var n in t)e[n]=t[n];return e},i.modulo=function(e,t){return(e%t+t)%t};var r=Object.prototype.toString;i.isArray=function(e){return"[object Array]"==r.call(e)},i.makeArray=function(e){var t=[];if(i.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0,r=e.length;n<r;n++)t.push(e[n]);else t.push(e);return t},i.indexOf=Array.prototype.indexOf?function(e,t){return e.indexOf(t)}:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},i.removeFrom=function(e,t){var n=i.indexOf(e,t);n!=-1&&e.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(e){return e instanceof HTMLElement}:function(e){return e&&"object"==typeof e&&1==e.nodeType&&"string"==typeof e.nodeName},i.setText=function(){function e(e,n){t=t||(void 0!==document.documentElement.textContent?"textContent":"innerText"),e[t]=n}var t;return e}(),i.getParent=function(e,t){for(;e!=document.body;)if(e=e.parentNode,n(e,t))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,t){e=i.makeArray(e);for(var r=[],a=0,o=e.length;a<o;a++){var s=e[a];if(i.isElement(s))if(t){n(s,t)&&r.push(s);for(var l=s.querySelectorAll(t),d=0,u=l.length;d<u;d++)r.push(l[d])}else r.push(s)}return r},i.debounceMethod=function(e,t,n){var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];e&&clearTimeout(e);var t=arguments,a=this;this[r]=setTimeout(function(){i.apply(a,t),delete a[r]},n||100)}},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var a=e.console;return i.htmlInit=function(n,r){t(function(){for(var t=i.toDashed(r),o=document.querySelectorAll(".js-"+t),s="data-"+t+"-options",l=0,d=o.length;l<d;l++){var u,c=o[l],h=c.getAttribute(s);try{u=h&&JSON.parse(h)}catch(p){a&&a.error("Error parsing "+s+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+p);continue}var m=new n(c,u),f=e.jQuery;f&&f.data(c,r,m)}})},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/cell",["get-size/get-size"],function(n){return t(e,n)}):"object"==typeof exports?module.exports=t(e,require("get-size")):(e.Flickity=e.Flickity||{},e.Flickity.Cell=t(e,e.getSize))}(window,function(e,t){function n(e,t){this.element=e,this.parent=t,this.create()}var i="attachEvent"in e;return n.prototype.create=function(){this.element.style.position="absolute",i&&this.element.setAttribute("unselectable","on"),this.x=0,this.shift=0},n.prototype.destroy=function(){this.element.style.position="";var e=this.parent.originSide;this.element.style[e]=""},n.prototype.getSize=function(){this.size=t(this.element)},n.prototype.setPosition=function(e){this.x=e,this.setDefaultTarget(),this.renderPosition(e)},n.prototype.setDefaultTarget=function(){var e="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[e]+this.size.width*this.parent.cellAlign},n.prototype.renderPosition=function(e){var t=this.parent.originSide;this.element.style[t]=this.parent.getPositionValue(e)},n.prototype.wrapShift=function(e){this.shift=e,this.renderPosition(this.x+this.parent.slideableWidth*e)},n.prototype.remove=function(){this.element.parentNode.removeChild(this.element)},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/animate",["get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("desandro-get-style-property"),require("fizzy-ui-utils")):(e.Flickity=e.Flickity||{},e.Flickity.animatePrototype=t(e,e.getStyleProperty,e.fizzyUIUtils))}(window,function(e,t,n){for(var i,r=0,a="webkit moz ms o".split(" "),o=e.requestAnimationFrame,s=e.cancelAnimationFrame,l=0;l<a.length&&(!o||!s);l++)i=a[l],o=o||e[i+"RequestAnimationFrame"],s=s||e[i+"CancelAnimationFrame"]||e[i+"CancelRequestAnimationFrame"];o&&s||(o=function(t){var n=(new Date).getTime(),i=Math.max(0,16-(n-r)),a=e.setTimeout(function(){t(n+i)},i);return r=n+i,a},s=function(t){e.clearTimeout(t)});var d={};d.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},d.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var e=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating){var t=this;o(function(){t.animate()})}};var u=t("transform"),c=!!t("perspective");return d.positionSlider=function(){var e=this.x;this.options.wrapAround&&this.cells.length>1&&(e=n.modulo(e,this.slideableWidth),e-=this.slideableWidth,this.shiftWrapCells(e)),e+=this.cursorPosition,e=this.options.rightToLeft&&u?-e:e;var t=this.getPositionValue(e);u?this.slider.style[u]=c&&this.isAnimating?"translate3d("+t+",0,0)":"translateX("+t+")":this.slider.style[this.originSide]=t},d.positionSliderAtSelected=function(){if(this.cells.length){var e=this.cells[this.selectedIndex];this.x=-e.target,this.positionSlider()}},d.getPositionValue=function(e){return this.options.percentPosition?.01*Math.round(e/this.size.innerWidth*1e4)+"%":Math.round(e)+"px"},d.settle=function(e){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*e)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,c&&this.positionSlider(),this.dispatchEvent("settle"))},d.shiftWrapCells=function(e){var t=this.cursorPosition+e;this._shiftCells(this.beforeShiftCells,t,-1);var n=this.size.innerWidth-(e+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},d._shiftCells=function(e,t,n){for(var i=0,r=e.length;i<r;i++){var a=e[i],o=t>0?n:0;a.wrapShift(o),t-=a.size.outerWidth}},d._unshiftCells=function(e){if(e&&e.length)for(var t=0,n=e.length;t<n;t++)e[t].wrapShift(0)},d.integratePhysics=function(){this.velocity+=this.accel,this.x+=this.velocity,this.velocity*=this.getFrictionFactor(),this.accel=0},d.applyForce=function(e){this.accel+=e},d.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"];
},d.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},d.applyDragForce=function(){if(this.isPointerDown){var e=this.dragX-this.x,t=e-this.velocity;this.applyForce(t)}},d.applySelectedAttraction=function(){var e=this.cells.length;if(!this.isPointerDown&&!this.isFreeScrolling&&e){var t=this.cells[this.selectedIndex],n=this.options.wrapAround&&e>1?this.slideableWidth*Math.floor(this.selectedIndex/e):0,i=(t.target+n)*-1-this.x,r=i*this.options.selectedAttraction;this.applyForce(r)}},d}),function(e,t){"use strict";if("function"==typeof define&&define.amd)define("flickity/js/flickity",["classie/classie","eventEmitter/EventEmitter","eventie/eventie","get-size/get-size","fizzy-ui-utils/utils","./cell","./animate"],function(n,i,r,a,o,s,l){return t(e,n,i,r,a,o,s,l)});else if("object"==typeof exports)module.exports=t(e,require("desandro-classie"),require("wolfy87-eventemitter"),require("eventie"),require("get-size"),require("fizzy-ui-utils"),require("./cell"),require("./animate"));else{var n=e.Flickity;e.Flickity=t(e,e.classie,e.EventEmitter,e.eventie,e.getSize,e.fizzyUIUtils,n.Cell,n.animatePrototype)}}(window,function(e,t,n,i,r,a,o,s){function l(e,t){for(e=a.makeArray(e);e.length;)t.appendChild(e.shift())}function d(e,t){var n=a.getQueryElement(e);return n?(this.element=n,u&&(this.$element=u(this.element)),this.options=a.extend({},this.constructor.defaults),this.option(t),void this._create()):void(h&&h.error("Bad element for Flickity: "+(n||e)))}var u=e.jQuery,c=e.getComputedStyle,h=e.console,p=0,m={};d.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},d.createMethods=[],a.extend(d.prototype,n.prototype),d.prototype._create=function(){var t=this.guid=++p;this.element.flickityGUID=t,m[t]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.accel=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",d.setUnselectable(this.viewport),this._createSlider(),(this.options.resize||this.options.watchCSS)&&(i.bind(e,"resize",this),this.isResizeBound=!0);for(var n=0,r=d.createMethods.length;n<r;n++){var a=d.createMethods[n];this[a]()}this.options.watchCSS?this.watchCSS():this.activate()},d.prototype.option=function(e){a.extend(this.options,e)},d.prototype.activate=function(){if(!this.isActive){this.isActive=!0,t.add(this.element,"flickity-enabled"),this.options.rightToLeft&&t.add(this.element,"flickity-rtl"),this.getSize();var e=this._filterFindCellElements(this.element.children);l(e,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,i.bind(this.element,"keydown",this)),this.emit("activate");var n,r=this.options.initialIndex;n=this.isInitActivated?this.selectedIndex:void 0!==r&&this.cells[r]?r:0,this.select(n,!1,!0),this.isInitActivated=!0}},d.prototype._createSlider=function(){var e=document.createElement("div");e.className="flickity-slider",e.style[this.originSide]=0,this.slider=e},d.prototype._filterFindCellElements=function(e){return a.filterFindElements(e,this.options.cellSelector)},d.prototype.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},d.prototype._makeCells=function(e){for(var t=this._filterFindCellElements(e),n=[],i=0,r=t.length;i<r;i++){var a=t[i],s=new o(a,this);n.push(s)}return n},d.prototype.getLastCell=function(){return this.cells[this.cells.length-1]},d.prototype.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},d.prototype._positionCells=function(e){e=e||0,this.maxCellHeight=e?this.maxCellHeight||0:0;var t=0;if(e>0){var n=this.cells[e-1];t=n.x+n.size.outerWidth}for(var i,r=this.cells.length,a=e;a<r;a++)i=this.cells[a],i.setPosition(t),t+=i.size.outerWidth,this.maxCellHeight=Math.max(i.size.outerHeight,this.maxCellHeight);this.slideableWidth=t,this._containCells()},d.prototype._sizeCells=function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t];i.getSize()}},d.prototype._init=d.prototype.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},d.prototype.getSize=function(){this.size=r(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var f={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};d.prototype.setCellAlign=function(){var e=f[this.options.cellAlign];this.cellAlign=e?e[this.originSide]:this.options.cellAlign},d.prototype.setGallerySize=function(){this.options.setGallerySize&&(this.viewport.style.height=this.maxCellHeight+"px")},d.prototype._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var e=this.cursorPosition,t=this.cells.length-1;this.beforeShiftCells=this._getGapCells(e,t,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1)}},d.prototype._getGapCells=function(e,t,n){for(var i=[];e>0;){var r=this.cells[t];if(!r)break;i.push(r),t+=n,e-=r.size.outerWidth}return i},d.prototype._containCells=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length)for(var e=this.options.rightToLeft?"marginRight":"marginLeft",t=this.options.rightToLeft?"marginLeft":"marginRight",n=this.cells[0].size[e],i=this.getLastCell(),r=this.slideableWidth-i.size[t],a=r-this.size.innerWidth*(1-this.cellAlign),o=r<this.size.innerWidth,s=0,l=this.cells.length;s<l;s++){var d=this.cells[s];d.setDefaultTarget(),o?d.target=r*this.cellAlign:(d.target=Math.max(d.target,this.cursorPosition+n),d.target=Math.min(d.target,a))}},d.prototype.dispatchEvent=function(e,t,n){var i=[t].concat(n);if(this.emitEvent(e,i),u&&this.$element)if(t){var r=u.Event(t);r.type=e,this.$element.trigger(r,n)}else this.$element.trigger(e,n)},d.prototype.select=function(e,t,n){if(this.isActive){e=parseInt(e,10);var i=this.cells.length;this.options.wrapAround&&i>1&&(e<0?this.x-=this.slideableWidth:e>=i&&(this.x+=this.slideableWidth)),(this.options.wrapAround||t)&&(e=a.modulo(e,i)),this.cells[e]&&(this.selectedIndex=e,this.setSelectedCell(),n?this.positionSliderAtSelected():this.startAnimation(),this.dispatchEvent("cellSelect"))}},d.prototype.previous=function(e){this.select(this.selectedIndex-1,e)},d.prototype.next=function(e){this.select(this.selectedIndex+1,e)},d.prototype.setSelectedCell=function(){this._removeSelectedCellClass(),this.selectedCell=this.cells[this.selectedIndex],this.selectedElement=this.selectedCell.element,t.add(this.selectedElement,"is-selected")},d.prototype._removeSelectedCellClass=function(){this.selectedCell&&t.remove(this.selectedCell.element,"is-selected")},d.prototype.getCell=function(e){for(var t=0,n=this.cells.length;t<n;t++){var i=this.cells[t];if(i.element==e)return i}},d.prototype.getCells=function(e){e=a.makeArray(e);for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n],o=this.getCell(r);o&&t.push(o)}return t},d.prototype.getCellElements=function(){for(var e=[],t=0,n=this.cells.length;t<n;t++)e.push(this.cells[t].element);return e},d.prototype.getParentCell=function(e){var t=this.getCell(e);return t?t:(e=a.getParent(e,".flickity-slider > *"),this.getCell(e))},d.prototype.getAdjacentCellElements=function(e,t){if(!e)return[this.selectedElement];t=void 0===t?this.selectedIndex:t;var n=this.cells.length;if(1+2*e>=n)return this.getCellElements();for(var i=[],r=t-e;r<=t+e;r++){var o=this.options.wrapAround?a.modulo(r,n):r,s=this.cells[o];s&&i.push(s.element)}return i},d.prototype.uiChange=function(){this.emit("uiChange")},d.prototype.childUIPointerDown=function(e){this.emitEvent("childUIPointerDown",[e])},d.prototype.onresize=function(){this.watchCSS(),this.resize()},a.debounceMethod(d,"onresize",150),d.prototype.resize=function(){this.isActive&&(this.getSize(),this.options.wrapAround&&(this.x=a.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.positionSliderAtSelected())};var _=d.supportsConditionalCSS=function(){var e;return function(){if(void 0!==e)return e;if(!c)return void(e=!1);var t=document.createElement("style"),n=document.createTextNode('body:after { content: "foo"; display: none; }');t.appendChild(n),document.head.appendChild(t);var i=c(document.body,":after").content;return e=i.indexOf("foo")!=-1,document.head.removeChild(t),e}}();d.prototype.watchCSS=function(){var e=this.options.watchCSS;if(e){var t=_();if(!t){var n="fallbackOn"==e?"activate":"deactivate";return void this[n]()}var i=c(this.element,":after").content;i.indexOf("flickity")!=-1?this.activate():this.deactivate()}},d.prototype.onkeydown=function(e){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==e.keyCode){var t=this.options.rightToLeft?"next":"previous";this.uiChange(),this[t]()}else if(39==e.keyCode){var n=this.options.rightToLeft?"previous":"next";this.uiChange(),this[n]()}},d.prototype.deactivate=function(){if(this.isActive){t.remove(this.element,"flickity-enabled"),t.remove(this.element,"flickity-rtl");for(var e=0,n=this.cells.length;e<n;e++){var r=this.cells[e];r.destroy()}this._removeSelectedCellClass(),this.element.removeChild(this.viewport),l(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),i.unbind(this.element,"keydown",this)),this.isActive=!1,this.emit("deactivate")}},d.prototype.destroy=function(){this.deactivate(),this.isResizeBound&&i.unbind(e,"resize",this),this.emit("destroy"),u&&this.$element&&u.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete m[this.guid]},a.extend(d.prototype,s);var y="attachEvent"in e;return d.setUnselectable=function(e){y&&e.setAttribute("unselectable","on")},d.data=function(e){e=a.getQueryElement(e);var t=e&&e.flickityGUID;return t&&m[t]},a.htmlInit(d,"flickity"),u&&u.bridget&&u.bridget("flickity",d),d.Cell=o,d}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("unipointer/unipointer",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.Unipointer=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(){}function r(){}r.prototype=new t,r.prototype.bindStartEvent=function(e){this._bindStartEvent(e,!0)},r.prototype.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},r.prototype._bindStartEvent=function(t,i){i=void 0===i||!!i;var r=i?"bind":"unbind";e.navigator.pointerEnabled?n[r](t,"pointerdown",this):e.navigator.msPointerEnabled?n[r](t,"MSPointerDown",this):(n[r](t,"mousedown",this),n[r](t,"touchstart",this))},r.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},r.prototype.getTouch=function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t];if(i.identifier==this.pointerIdentifier)return i}},r.prototype.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},r.prototype.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},r.prototype.onMSPointerDown=r.prototype.onpointerdown=function(e){this._pointerDown(e,e)},r.prototype._pointerDown=function(e,t){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},r.prototype.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var a={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return r.prototype._bindPostStartEvents=function(t){if(t){for(var i=a[t.type],r=t.preventDefault?e:document,o=0,s=i.length;o<s;o++){var l=i[o];n.bind(r,l,this)}this._boundPointerEvents={events:i,node:r}}},r.prototype._unbindPostStartEvents=function(){var e=this._boundPointerEvents;if(e&&e.events){for(var t=0,i=e.events.length;t<i;t++){var r=e.events[t];n.unbind(e.node,r,this)}delete this._boundPointerEvents}},r.prototype.onmousemove=function(e){this._pointerMove(e,e)},r.prototype.onMSPointerMove=r.prototype.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},r.prototype.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},r.prototype._pointerMove=function(e,t){this.pointerMove(e,t)},r.prototype.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},r.prototype.onmouseup=function(e){this._pointerUp(e,e)},r.prototype.onMSPointerUp=r.prototype.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},r.prototype.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},r.prototype._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},r.prototype.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},r.prototype._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},r.prototype.pointerDone=i,r.prototype.onMSPointerCancel=r.prototype.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},r.prototype.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},r.prototype._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},r.prototype.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},r.getPointerPoint=function(e){return{x:void 0!==e.pageX?e.pageX:e.clientX,y:void 0!==e.pageY?e.pageY:e.clientY}},r}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("unidragger/unidragger",["eventie/eventie","unipointer/unipointer"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("unipointer")):e.Unidragger=t(e,e.eventie,e.Unipointer)}(window,function(e,t,n){function i(){}function r(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function a(){}function o(){return!1}a.prototype=new n,a.prototype.bindHandles=function(){this._bindHandles(!0)},a.prototype.unbindHandles=function(){this._bindHandles(!1)};var s=e.navigator;a.prototype._bindHandles=function(e){e=void 0===e||!!e;var n;n=s.pointerEnabled?function(t){t.style.touchAction=e?"none":""}:s.msPointerEnabled?function(t){t.style.msTouchAction=e?"none":""}:function(){e&&d(o)};for(var i=e?"bind":"unbind",r=0,a=this.handles.length;r<a;r++){var o=this.handles[r];this._bindStartEvent(o,e),n(o),t[i](o,"click",this)}};var l="attachEvent"in document.documentElement,d=l?function(e){"IMG"==e.nodeName&&(e.ondragstart=o);for(var t=e.querySelectorAll("img"),n=0,i=t.length;n<i;n++){var r=t[n];r.ondragstart=o}}:i;a.prototype.pointerDown=function(n,i){if("INPUT"==n.target.nodeName&&"range"==n.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(n,i);var r=document.activeElement;r&&r.blur&&r.blur(),this._bindPostStartEvents(n),this.pointerDownScroll=a.getScrollPosition(),t.bind(e,"scroll",this),this.emitEvent("pointerDown",[n,i])},a.prototype._dragPointerDown=function(e,t){this.pointerDownPoint=n.getPointerPoint(t);var i="touchstart"==e.type,a=e.target.nodeName;i||"SELECT"==a||r(e)},a.prototype.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,n]),this._dragMove(e,t,n)},a.prototype._dragPointerMove=function(e,t){var i=n.getPointerPoint(t),r={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(r)&&this._dragStart(e,t),r},a.prototype.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},a.prototype.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},a.prototype._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},a.prototype.pointerDone=function(){t.unbind(e,"scroll",this)},a.prototype._dragStart=function(e,t){this.isDragging=!0,this.dragStartPoint=a.getPointerPoint(t),this.isPreventingClicks=!0,this.dragStart(e,t)},a.prototype.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},a.prototype._dragMove=function(e,t,n){this.isDragging&&this.dragMove(e,t,n)},a.prototype.dragMove=function(e,t,n){r(e),this.emitEvent("dragMove",[e,t,n])},a.prototype._dragEnd=function(e,t){this.isDragging=!1;var n=this;setTimeout(function(){delete n.isPreventingClicks}),this.dragEnd(e,t)},a.prototype.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},a.prototype.pointerDone=function(){t.unbind(e,"scroll",this),delete this.pointerDownScroll},a.prototype.onclick=function(e){this.isPreventingClicks&&r(e)},a.prototype._staticClick=function(e,t){if(!this.isIgnoringMouseUp||"mouseup"!=e.type){var n=e.target.nodeName;if("INPUT"!=n&&"TEXTAREA"!=n||e.target.focus(),this.staticClick(e,t),"mouseup"!=e.type){this.isIgnoringMouseUp=!0;var i=this;setTimeout(function(){delete i.isIgnoringMouseUp},400)}}},a.prototype.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},a.prototype.onscroll=function(){var e=a.getScrollPosition(),t=this.pointerDownScroll.x-e.x,n=this.pointerDownScroll.y-e.y;(Math.abs(t)>3||Math.abs(n)>3)&&this._pointerDone()},a.getPointerPoint=function(e){return{x:void 0!==e.pageX?e.pageX:e.clientX,y:void 0!==e.pageY?e.pageY:e.clientY}};var u=void 0!==e.pageYOffset;return a.getScrollPosition=function(){return{x:u?e.pageXOffset:document.body.scrollLeft,y:u?e.pageYOffset:document.body.scrollTop}},a.getPointerPoint=n.getPointerPoint,a}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/drag",["classie/classie","eventie/eventie","./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(n,i,r,a,o){return t(e,n,i,r,a,o)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("eventie"),require("./flickity"),require("unidragger"),require("fizzy-ui-utils")):e.Flickity=t(e,e.classie,e.eventie,e.Flickity,e.Unidragger,e.fizzyUIUtils)}(window,function(e,t,n,i,r,a){function o(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function s(t){var n=r.getPointerPoint(t);return n.y-e.pageYOffset}a.extend(i.defaults,{draggable:!0,touchVerticalScroll:!0}),i.createMethods.push("_createDrag"),a.extend(i.prototype,r.prototype),i.prototype._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag)},i.prototype.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(t.add(this.element,"is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},i.prototype.unbindDrag=function(){this.isDragBound&&(t.remove(this.element,"is-draggable"),this.unbindHandles(),delete this.isDragBound)},i.prototype._uiChangeDrag=function(){delete this.isFreeScrolling},i.prototype._childUIPointerDownDrag=function(e){o(e),this.pointerDownFocus(e)},i.prototype.pointerDown=function(i,a){if("INPUT"==i.target.nodeName&&"range"==i.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(i,a);var o=document.activeElement;o&&o.blur&&o!=this.element&&o!=document.body&&o.blur(),this.pointerDownFocus(i),this.dragX=this.x,t.add(this.viewport,"is-pointer-down"),this._bindPostStartEvents(i),this.pointerDownScroll=r.getScrollPosition(),n.bind(e,"scroll",this),this.dispatchEvent("pointerDown",i,[a])};var l={touchstart:!0,MSPointerDown:!0},d={INPUT:!0,SELECT:!0};i.prototype.pointerDownFocus=function(t){if(this.options.accessibility&&!l[t.type]&&!d[t.target.nodeName]){var n=e.pageYOffset;this.element.focus(),e.pageYOffset!=n&&e.scrollTo(e.pageXOffset,n)}},i.prototype.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.touchVerticalScrollMove(e,t,n),this._dragMove(e,t,n),this.dispatchEvent("pointerMove",e,[t,n])},i.prototype.hasDragStarted=function(e){return!this.isTouchScrolling&&Math.abs(e.x)>3},i.prototype.pointerUp=function(e,n){delete this.isTouchScrolling,t.remove(this.viewport,"is-pointer-down"),this.dispatchEvent("pointerUp",e,[n]),this._dragPointerUp(e,n)};var u={touchmove:!0,MSPointerMove:!0};return i.prototype.touchVerticalScrollMove=function(t,n,i){var r=this.options.touchVerticalScroll,a="withDrag"==r?!r:this.isDragging||!r;!a&&u[t.type]&&!this.isTouchScrolling&&Math.abs(i.y)>10&&(this.startScrollY=e.pageYOffset,this.pointerWindowStartY=s(n),this.isTouchScrolling=!0)},i.prototype.dragStart=function(e,t){this.dragStartPosition=this.x,this.startAnimation(),this.dispatchEvent("dragStart",e,[t])},i.prototype.dragMove=function(e,t,n){o(e),this.previousDragX=this.dragX;var i=this.options.rightToLeft?-1:1,r=this.dragStartPosition+n.x*i;if(!this.options.wrapAround&&this.cells.length){var a=Math.max(-this.cells[0].target,this.dragStartPosition);r=r>a?.5*(r+a):r;var s=Math.min(-this.getLastCell().target,this.dragStartPosition);r=r<s?.5*(r+s):r}this.dragX=r,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",e,[t,n])},i.prototype.dragEnd=function(e,t){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var i=this.getRestingPosition();this.isFreeScrolling=-i>this.cells[0].target&&-i<this.getLastCell().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.select(n),this.dispatchEvent("dragEnd",e,[t])},i.prototype.dragEndRestingSelect=function(){var e=this.getRestingPosition(),t=Math.abs(this.getCellDistance(-e,this.selectedIndex)),n=this._getClosestResting(e,t,1),i=this._getClosestResting(e,t,-1),r=n.distance<i.distance?n.index:i.index;return r},i.prototype._getClosestResting=function(e,t,n){for(var i=this.selectedIndex,r=1/0,a=this.options.contain&&!this.options.wrapAround?function(e,t){return e<=t}:function(e,t){return e<t};a(t,r)&&(i+=n,r=t,t=this.getCellDistance(-e,i),null!==t);)t=Math.abs(t);return{distance:r,index:i-n}},i.prototype.getCellDistance=function(e,t){var n=this.cells.length,i=this.options.wrapAround&&n>1,r=i?a.modulo(t,n):t,o=this.cells[r];if(!o)return null;var s=i?this.slideableWidth*Math.floor(t/n):0;return e-(o.target+s)},i.prototype.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var e=this.getCellDistance(-this.dragX,this.selectedIndex),t=this.previousDragX-this.dragX;return e>0&&t>0?1:e<0&&t<0?-1:0},i.prototype.staticClick=function(e,t){var n=this.getParentCell(e.target),i=n&&n.element,r=n&&a.indexOf(this.cells,n);this.dispatchEvent("staticClick",e,[t,i,r])},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("tap-listener/tap-listener",["unipointer/unipointer"],function(n){return t(e,n)}):"object"==typeof exports?module.exports=t(e,require("unipointer")):e.TapListener=t(e,e.Unipointer)}(window,function(e,t){function n(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function i(e){this.bindTap(e)}i.prototype=new t,i.prototype.bindTap=function(e){e&&(this.unbindTap(),this.tapElement=e,this._bindStartEvent(e,!0))},i.prototype.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)};var r=i.prototype.pointerDown;i.prototype.pointerDown=function(e){"touchstart"==e.type&&n(e),r.apply(this,arguments)};var a=void 0!==e.pageYOffset;return i.prototype.pointerUp=function(n,i){var r=t.getPointerPoint(i),o=this.tapElement.getBoundingClientRect(),s=a?e.pageXOffset:document.body.scrollLeft,l=a?e.pageYOffset:document.body.scrollTop,d=r.x>=o.left+s&&r.x<=o.right+s&&r.y>=o.top+l&&r.y<=o.bottom+l;d&&this.emitEvent("tap",[n,i])},i.prototype.destroy=function(){this.pointerDone(),this.unbindTap()},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/prev-next-button",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):t(e,e.eventie,e.Flickity,e.TapListener,e.fizzyUIUtils)}(window,function(e,t,n,i,r){function a(e,t){this.direction=e,this.parent=t,this._create()}function o(e){return"string"==typeof e?e:"M "+e.x0+",50 L "+e.x1+","+(e.y1+50)+" L "+e.x2+","+(e.y2+50)+" L "+e.x3+",50  L "+e.x2+","+(50-e.y2)+" L "+e.x1+","+(50-e.y1)+" Z"}var s="http://www.w3.org/2000/svg",l=function(){function e(){if(void 0!==t)return t;var e=document.createElement("div");return e.innerHTML="<svg/>",t=(e.firstChild&&e.firstChild.namespaceURI)==s}var t;return e}();return a.prototype=new i,a.prototype._create=function(){this.isEnabled=!0,this.isPrevious=this.direction==-1;var e=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==e;var t=this.element=document.createElement("button");if(t.className="flickity-prev-next-button",t.className+=this.isPrevious?" previous":" next",t.setAttribute("type","button"),this.disable(),n.setUnselectable(t),l()){var i=this.createSVG();t.appendChild(i)}else this.setArrowText(),t.className+=" no-svg";var r=this;this.onCellSelect=function(){r.update()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(e,t){r.parent.childUIPointerDown(t)})},a.prototype.activate=function(){this.bindTap(this.element),t.bind(this.element,"click",this),this.parent.element.appendChild(this.element)},a.prototype.deactivate=function(){this.parent.element.removeChild(this.element),i.prototype.destroy.call(this),t.unbind(this.element,"click",this)},a.prototype.createSVG=function(){var e=document.createElementNS(s,"svg");e.setAttribute("viewBox","0 0 100 100");var t=document.createElementNS(s,"path"),n=o(this.parent.options.arrowShape);return t.setAttribute("d",n),t.setAttribute("class","arrow"),this.isLeft||t.setAttribute("transform","translate(100, 100) rotate(180) "),e.appendChild(t),e},a.prototype.setArrowText=function(){var e=this.parent.options,t=this.isLeft?e.leftArrowText:e.rightArrowText;r.setText(this.element,t)},a.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var e=this.isPrevious?"previous":"next";this.parent[e]()}},a.prototype.handleEvent=r.handleEvent,a.prototype.onclick=function(){var e=document.activeElement;e&&e==this.element&&this.onTap()},a.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},a.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},a.prototype.update=function(){var e=this.parent.cells;if(this.parent.options.wrapAround&&e.length>1)return void this.enable();var t=e.length?e.length-1:0,n=this.isPrevious?0:t,i=this.parent.selectedIndex==n?"disable":"enable";this[i]()},a.prototype.destroy=function(){this.deactivate()},r.extend(n.defaults,{prevNextButtons:!0,leftArrowText:"‹",rightArrowText:"›",arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),n.createMethods.push("_createPrevNextButtons"),n.prototype._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new a((-1),this),this.nextButton=new a(1,this),this.on("activate",this.activatePrevNextButtons))},n.prototype.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},n.prototype.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},n.PrevNextButton=a,n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/page-dots",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):t(e,e.eventie,e.Flickity,e.TapListener,e.fizzyUIUtils)}(window,function(e,t,n,i,r){function a(e){this.parent=e,this._create()}return a.prototype=new i,a.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",n.setUnselectable(this.holder),this.dots=[];var e=this;this.onCellSelect=function(){e.updateSelected()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(t,n){e.parent.childUIPointerDown(n)})},a.prototype.activate=function(){this.setDots(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},a.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),i.prototype.destroy.call(this)},a.prototype.setDots=function(){var e=this.parent.cells.length-this.dots.length;e>0?this.addDots(e):e<0&&this.removeDots(-e)},a.prototype.addDots=function(e){for(var t=document.createDocumentFragment(),n=[];e;){var i=document.createElement("li");i.className="dot",t.appendChild(i),n.push(i),e--}this.holder.appendChild(t),this.dots=this.dots.concat(n)},a.prototype.removeDots=function(e){for(var t=this.dots.splice(this.dots.length-e,e),n=0,i=t.length;n<i;n++){var r=t[n];this.holder.removeChild(r)}},a.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},a.prototype.onTap=function(e){var t=e.target;if("LI"==t.nodeName){this.parent.uiChange();var n=r.indexOf(this.dots,t);this.parent.select(n)}},a.prototype.destroy=function(){this.deactivate()},n.PageDots=a,r.extend(n.defaults,{pageDots:!0}),n.createMethods.push("_createPageDots"),n.prototype._createPageDots=function(){this.options.pageDots&&(this.pageDots=new a(this),this.on("activate",this.activatePageDots),this.on("cellAddedRemoved",this.onCellAddedRemovedPageDots),this.on("deactivate",this.deactivatePageDots))},n.prototype.activatePageDots=function(){this.pageDots.activate()},n.prototype.onCellAddedRemovedPageDots=function(){this.pageDots.setDots()},n.prototype.deactivatePageDots=function(){this.pageDots.deactivate()},n.PageDots=a,n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/player",["eventEmitter/EventEmitter","eventie/eventie","fizzy-ui-utils/utils","./flickity"],function(e,n,i,r){return t(e,n,i,r)}):"object"==typeof exports?module.exports=t(require("wolfy87-eventemitter"),require("eventie"),require("fizzy-ui-utils"),require("./flickity")):t(e.EventEmitter,e.eventie,e.fizzyUIUtils,e.Flickity)}(window,function(e,t,n,i){function r(e){if(this.isPlaying=!1,this.parent=e,o){var t=this;this.onVisibilityChange=function(){t.visibilityChange()}}}var a,o;return"hidden"in document?(a="hidden",o="visibilitychange"):"webkitHidden"in document&&(a="webkitHidden",o="webkitvisibilitychange"),r.prototype=new e,r.prototype.play=function(){this.isPlaying=!0,delete this.isPaused,o&&document.addEventListener(o,this.onVisibilityChange,!1),this.tick()},r.prototype.tick=function(){if(this.isPlaying&&!this.isPaused){this.tickTime=new Date;var e=this.parent.options.autoPlay;e="number"==typeof e?e:3e3;var t=this;this.timeout=setTimeout(function(){t.parent.next(!0),t.tick()},e)}},r.prototype.stop=function(){this.isPlaying=!1,delete this.isPaused,this.clear(),o&&document.removeEventListener(o,this.onVisibilityChange,!1)},r.prototype.clear=function(){clearTimeout(this.timeout)},r.prototype.pause=function(){this.isPlaying&&(this.isPaused=!0,this.clear())},r.prototype.unpause=function(){this.isPaused&&this.play()},r.prototype.visibilityChange=function(){var e=document[a];this[e?"pause":"unpause"]()},n.extend(i.defaults,{pauseAutoPlayOnHover:!0}),i.createMethods.push("_createPlayer"),i.prototype._createPlayer=function(){this.player=new r(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),
this.on("deactivate",this.deactivatePlayer)},i.prototype.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),t.bind(this.element,"mouseenter",this),this.isMouseenterBound=!0)},i.prototype.stopPlayer=function(){this.player.stop()},i.prototype.deactivatePlayer=function(){this.player.stop(),this.isMouseenterBound&&(t.unbind(this.element,"mouseenter",this),delete this.isMouseenterBound)},i.prototype.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),t.bind(this.element,"mouseleave",this))},i.prototype.onmouseleave=function(){this.player.unpause(),t.unbind(this.element,"mouseleave",this)},i.Player=r,i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/add-remove-cell",["./flickity","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("./flickity"),require("fizzy-ui-utils")):t(e,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n){function i(e){for(var t=document.createDocumentFragment(),n=0,i=e.length;n<i;n++){var r=e[n];t.appendChild(r.element)}return t}return t.prototype.insert=function(e,t){var n=this._makeCells(e);if(n&&n.length){var r=this.cells.length;t=void 0===t?r:t;var a=i(n),o=t==r;if(o)this.slider.appendChild(a);else{var s=this.cells[t].element;this.slider.insertBefore(a,s)}if(0===t)this.cells=n.concat(this.cells);else if(o)this.cells=this.cells.concat(n);else{var l=this.cells.splice(t,r-t);this.cells=this.cells.concat(n).concat(l)}this._sizeCells(n);var d=t>this.selectedIndex?0:n.length;this._cellAddedRemoved(t,d)}},t.prototype.append=function(e){this.insert(e,this.cells.length)},t.prototype.prepend=function(e){this.insert(e,0)},t.prototype.remove=function(e){var t,i,r,a=this.getCells(e),o=0;for(t=0,i=a.length;t<i;t++){r=a[t];var s=n.indexOf(this.cells,r)<this.selectedIndex;o-=s?1:0}for(t=0,i=a.length;t<i;t++)r=a[t],r.remove(),n.removeFrom(this.cells,r);a.length&&this._cellAddedRemoved(0,o)},t.prototype._cellAddedRemoved=function(e,t){t=t||0,this.selectedIndex+=t,this.selectedIndex=Math.max(0,Math.min(this.cells.length-1,this.selectedIndex)),this.emitEvent("cellAddedRemoved",[e,t]),this.cellChange(e,!0)},t.prototype.cellSizeChange=function(e){var t=this.getCell(e);if(t){t.getSize();var i=n.indexOf(this.cells,t);this.cellChange(i)}},t.prototype.cellChange=function(e,t){var n=this.slideableWidth;this._positionCells(e),this._getWrapShiftCells(),this.setGallerySize(),this.options.freeScroll?(this.x+=n-this.slideableWidth,this.positionSlider()):(t&&this.positionSliderAtSelected(),this.select(this.selectedIndex))},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/lazyload",["classie/classie","eventie/eventie","./flickity","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("eventie"),require("./flickity"),require("fizzy-ui-utils")):t(e,e.classie,e.eventie,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n,i,r){"use strict";function a(e){if("IMG"==e.nodeName&&e.getAttribute("data-flickity-lazyload"))return[e];var t=e.querySelectorAll("img[data-flickity-lazyload]");return r.makeArray(t)}function o(e,t){this.img=e,this.flickity=t,this.load()}return i.createMethods.push("_createLazyload"),i.prototype._createLazyload=function(){this.on("cellSelect",this.lazyLoad)},i.prototype.lazyLoad=function(){var e=this.options.lazyLoad;if(e){for(var t="number"==typeof e?e:0,n=this.getAdjacentCellElements(t),i=[],r=0,s=n.length;r<s;r++){var l=n[r],d=a(l);i=i.concat(d)}for(r=0,s=i.length;r<s;r++){var u=i[r];new o(u,this)}}},o.prototype.handleEvent=r.handleEvent,o.prototype.load=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},o.prototype.onload=function(e){this.complete(e,"flickity-lazyloaded")},o.prototype.onerror=function(e){this.complete(e,"flickity-lazyerror")},o.prototype.complete=function(e,i){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this);var r=this.flickity.getParentCell(this.img),a=r&&r.element;this.flickity.cellSizeChange(a),t.add(this.img,i),this.flickity.dispatchEvent("lazyLoad",e,a)},i.LazyLoader=o,i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/index",["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],t):"object"==typeof exports&&(module.exports=t(require("./flickity"),require("./drag"),require("./prev-next-button"),require("./page-dots"),require("./player"),require("./add-remove-cell"),require("./lazyload")))}(window,function(e){return e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity-as-nav-for/as-nav-for",["classie/classie","flickity/js/index","fizzy-ui-utils/utils"],function(n,i,r){return t(e,n,i,r)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("flickity"),require("fizzy-ui-utils")):e.Flickity=t(e,e.classie,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n,i){return n.createMethods.push("_createAsNavFor"),n.prototype._createAsNavFor=function(){this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor);var e=this.options.asNavFor;if(e){var t=this;setTimeout(function(){t.setNavCompanion(e)})}},n.prototype.setNavCompanion=function(e){e=i.getQueryElement(e);var t=n.data(e);if(t&&t!=this){this.navCompanion=t;var r=this;this.onNavCompanionSelect=function(){r.navCompanionSelect()},t.on("cellSelect",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect()}},n.prototype.navCompanionSelect=function(){if(this.navCompanion){var e=this.navCompanion.selectedIndex;this.select(e),this.removeNavSelectedElement(),this.selectedIndex==e&&(this.navSelectedElement=this.cells[e].element,t.add(this.navSelectedElement,"is-nav-selected"))}},n.prototype.activateAsNavFor=function(){this.navCompanionSelect()},n.prototype.removeNavSelectedElement=function(){this.navSelectedElement&&(t.remove(this.navSelectedElement,"is-nav-selected"),delete this.navSelectedElement)},n.prototype.onNavStaticClick=function(e,t,n,i){"number"==typeof i&&this.navCompanion.select(i)},n.prototype.deactivateAsNavFor=function(){this.removeNavSelectedElement()},n.prototype.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("cellSelect",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.imagesLoaded=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(e,t){for(var n in t)e[n]=t[n];return e}function r(e){return"[object Array]"==c.call(e)}function a(e){var t=[];if(r(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);"string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=a(e),this.options=i({},this.options),"function"==typeof t?n=t:i(this.options,t),n&&this.on("always",n),this.getImages(),d&&(this.jqDeferred=new d.Deferred);var r=this;setTimeout(function(){r.check()})}function s(e){this.img=e}function l(e,t){this.url=e,this.element=t,this.img=new Image}var d=e.jQuery,u=e.console,c=Object.prototype.toString;o.prototype=new t,o.prototype.options={},o.prototype.getImages=function(){this.images=[];for(var e=0;e<this.elements.length;e++){var t=this.elements[e];this.addElementImages(t)}},o.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&h[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var a=e.querySelectorAll(this.options.background);for(i=0;i<a.length;i++){var o=a[i];this.addElementBackgroundImages(o)}}}};var h={1:!0,9:!0,11:!0};o.prototype.addElementBackgroundImages=function(e){for(var t=p(e),n=/url\(['"]*([^'"\)]+)['"]*\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[1];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}};var p=e.getComputedStyle||function(e){return e.currentStyle};return o.prototype.addImage=function(e){var t=new s(e);this.images.push(t)},o.prototype.addBackground=function(e,t){var n=new l(e,t);this.images.push(n)},o.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;if(this.progressedCount=0,this.hasAnyBroken=!1,!this.images.length)return void this.complete();for(var n=0;n<this.images.length;n++){var i=this.images[n];i.once("progress",e),i.check()}},o.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emit("progress",this,e,t),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&u&&u.log("progress: "+n,e,t)},o.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emit(e,this),this.emit("always",this),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},s.prototype=new t,s.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,n.bind(this.proxyImage,"load",this),n.bind(this.proxyImage,"error",this),n.bind(this.img,"load",this),n.bind(this.img,"error",this),void(this.proxyImage.src=this.img.src))},s.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.img,t)},s.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},s.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},s.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},s.prototype.unbindEvents=function(){n.unbind(this.proxyImage,"load",this),n.unbind(this.proxyImage,"error",this),n.unbind(this.img,"load",this),n.unbind(this.img,"error",this)},l.prototype=new s,l.prototype.check=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},l.prototype.unbindEvents=function(){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this)},l.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.element,t)},o.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(d=t,d.fn.imagesLoaded=function(e,t){var n=new o(this,e,t);return n.jqDeferred.promise(d(this))})},o.makeJQueryPlugin(),o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("flickity"),require("imagesloaded")):e.Flickity=t(e,e.Flickity,e.imagesLoaded)}(window,function(e,t,n){"use strict";return t.createMethods.push("_createImagesLoaded"),t.prototype._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},t.prototype.imagesLoaded=function(){function e(e,n){var i=t.getParentCell(n.img);t.cellSizeChange(i&&i.element),t.options.freeScroll||t.positionSliderAtSelected()}if(this.options.imagesLoaded){var t=this;n(this.slider).on("progress",e)}},t}),function(e){function t(){}function n(e){function n(t){t.prototype.option||(t.prototype.option=function(t){e.isPlainObject(t)&&(this.options=e.extend(!0,this.options,t))})}function r(t,n){e.fn[t]=function(r){if("string"==typeof r){for(var o=i.call(arguments,1),s=0,l=this.length;s<l;s++){var d=this[s],u=e.data(d,t);if(u)if(e.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,o);if(void 0!==c)return c}else a("no such method '"+r+"' for "+t+" instance");else a("cannot call methods on "+t+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=e.data(this,t);i?(i.option(r),i._init()):(i=new n(this,r),e.data(this,t,i))})}}if(e){var a="undefined"==typeof console?t:function(e){console.error(e)};return e.bridget=function(e,t){n(t),r(e,t)},e.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):e.jQuery)}(window),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):"object"==typeof exports?module.exports=a:e.eventie=a}(window),function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&t(r[i],n)===-1&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),i!==-1&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}.call(this),function(e){function t(e){if(e){if("string"==typeof i[e])return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var t,r=0,a=n.length;r<a;r++)if(t=n[r]+e,"string"==typeof i[t])return t}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return t}):"object"==typeof exports?module.exports=t:e.getStyleProperty=t}(window),function(e,t){function n(e){var t=parseFloat(e),n=e.indexOf("%")===-1&&!isNaN(t);return n&&t}function i(){}function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0,n=s.length;t<n;t++){var i=s[t];e[i]=0}return e}function a(t){function i(){if(!h){h=!0;var i=e.getComputedStyle;if(d=function(){var e=i?function(e){return i(e,null)}:function(e){return e.currentStyle};return function(t){var n=e(t);return n||o("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),u=t("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[u]="border-box";var a=document.body||document.documentElement;a.appendChild(r);var s=d(r);c=200===n(s.width),a.removeChild(r)}}}function a(e){if(i(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=d(e);if("none"===t.display)return r();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var o=a.isBorderBox=!(!u||!t[u]||"border-box"!==t[u]),h=0,p=s.length;h<p;h++){var m=s[h],f=t[m];f=l(e,f);var _=parseFloat(f);a[m]=isNaN(_)?0:_}var y=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,v=a.marginLeft+a.marginRight,M=a.marginTop+a.marginBottom,L=a.borderLeftWidth+a.borderRightWidth,b=a.borderTopWidth+a.borderBottomWidth,w=o&&c,D=n(t.width);D!==!1&&(a.width=D+(w?0:y+L));var k=n(t.height);return k!==!1&&(a.height=k+(w?0:g+b)),a.innerWidth=a.width-(y+L),a.innerHeight=a.height-(g+b),a.outerWidth=a.width+v,a.outerHeight=a.height+M,a}}function l(t,n){if(e.getComputedStyle||n.indexOf("%")===-1)return n;var i=t.style,r=i.left,a=t.runtimeStyle,o=a&&a.left;return o&&(a.left=t.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,o&&(a.left=o),n}var d,u,c,h=!1;return a}var o="undefined"==typeof console?i:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],a):"object"==typeof exports?module.exports=a(require("desandro-get-style-property")):e.getSize=a(e.getStyleProperty)}(window),function(e){function t(e){"function"==typeof e&&(t.isReady?e():o.push(e))}function n(e){var n="readystatechange"===e.type&&"complete"!==a.readyState;t.isReady||n||i()}function i(){t.isReady=!0;for(var e=0,n=o.length;e<n;e++){var i=o[e];i()}}function r(r){return"complete"===a.readyState?i():(r.bind(a,"DOMContentLoaded",n),r.bind(a,"readystatechange",n),r.bind(e,"load",n)),t}var a=e.document,o=[];t.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):e.docReady=r(e.eventie)}(window),function(e){"use strict";function t(e,t){return e[o](t)}function n(e){if(!e.parentNode){var t=document.createDocumentFragment();t.appendChild(e)}}function i(e,t){n(e);for(var i=e.parentNode.querySelectorAll(t),r=0,a=i.length;r<a;r++)if(i[r]===e)return!0;return!1}function r(e,i){return n(e),t(e,i)}var a,o=function(){if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0,i=t.length;n<i;n++){var r=t[n],a=r+"MatchesSelector";if(e[a])return a}}();if(o){var s=document.createElement("div"),l=t(s,"div");a=l?t:r}else a=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return a}):"object"==typeof exports?module.exports=a:window.matchesSelector=a}(Element.prototype),function(e,t){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("doc-ready"),require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.docReady,e.matchesSelector)}(window,function(e,t,n){var i={};i.extend=function(e,t){for(var n in t)e[n]=t[n];return e},i.modulo=function(e,t){return(e%t+t)%t};var r=Object.prototype.toString;i.isArray=function(e){return"[object Array]"==r.call(e)},i.makeArray=function(e){var t=[];if(i.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0,r=e.length;n<r;n++)t.push(e[n]);else t.push(e);return t},i.indexOf=Array.prototype.indexOf?function(e,t){return e.indexOf(t)}:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},i.removeFrom=function(e,t){var n=i.indexOf(e,t);n!=-1&&e.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(e){return e instanceof HTMLElement}:function(e){return e&&"object"==typeof e&&1==e.nodeType&&"string"==typeof e.nodeName},i.setText=function(){function e(e,n){t=t||(void 0!==document.documentElement.textContent?"textContent":"innerText"),e[t]=n}var t;return e}(),i.getParent=function(e,t){for(;e!=document.body;)if(e=e.parentNode,n(e,t))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,t){e=i.makeArray(e);for(var r=[],a=0,o=e.length;a<o;a++){var s=e[a];if(i.isElement(s))if(t){n(s,t)&&r.push(s);for(var l=s.querySelectorAll(t),d=0,u=l.length;d<u;d++)r.push(l[d])}else r.push(s)}return r},i.debounceMethod=function(e,t,n){var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];e&&clearTimeout(e);var t=arguments,a=this;this[r]=setTimeout(function(){i.apply(a,t),delete a[r]},n||100)}},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var a=e.console;return i.htmlInit=function(n,r){t(function(){for(var t=i.toDashed(r),o=document.querySelectorAll(".js-"+t),s="data-"+t+"-options",l=0,d=o.length;l<d;l++){var u,c=o[l],h=c.getAttribute(s);try{u=h&&JSON.parse(h)}catch(p){a&&a.error("Error parsing "+s+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+p);continue}var m=new n(c,u),f=e.jQuery;f&&f.data(c,r,m)}})},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(e.Outlayer={},e.Outlayer.Item=t(e,e.EventEmitter,e.getSize,e.getStyleProperty,e.fizzyUIUtils))}(window,function(e,t,n,i,r){"use strict";function a(e){for(var t in e)return!1;return t=null,!0}function o(e,t){e&&(this.element=e,this.layout=t,this.position={x:0,y:0},this._create())}function s(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}var l=e.getComputedStyle,d=l?function(e){return l(e,null)}:function(e){return e.currentStyle},u=i("transition"),c=i("transform"),h=u&&c,p=!!i("perspective"),m={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[u],f=["transform","transition","transitionDuration","transitionProperty"],_=function(){for(var e={},t=0,n=f.length;t<n;t++){var r=f[t],a=i(r);a&&a!==r&&(e[r]=a)}return e}();r.extend(o.prototype,t.prototype),o.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.getSize=function(){this.size=n(this.element)},o.prototype.css=function(e){var t=this.element.style;for(var n in e){var i=_[n]||n;t[i]=e[n]}},o.prototype.getPosition=function(){var e=d(this.element),t=this.layout.options,n=t.isOriginLeft,i=t.isOriginTop,r=e[n?"left":"right"],a=e[i?"top":"bottom"],o=this.layout.size,s=r.indexOf("%")!=-1?parseFloat(r)/100*o.width:parseInt(r,10),l=a.indexOf("%")!=-1?parseFloat(a)/100*o.height:parseInt(a,10);s=isNaN(s)?0:s,l=isNaN(l)?0:l,s-=n?o.paddingLeft:o.paddingRight,l-=i?o.paddingTop:o.paddingBottom,this.position.x=s,this.position.y=l},o.prototype.layoutPosition=function(){var e=this.layout.size,t=this.layout.options,n={},i=t.isOriginLeft?"paddingLeft":"paddingRight",r=t.isOriginLeft?"left":"right",a=t.isOriginLeft?"right":"left",o=this.position.x+e[i];n[r]=this.getXValue(o),n[a]="";var s=t.isOriginTop?"paddingTop":"paddingBottom",l=t.isOriginTop?"top":"bottom",d=t.isOriginTop?"bottom":"top",u=this.position.y+e[s];n[l]=this.getYValue(u),n[d]="",this.css(n),this.emitEvent("layout",[this])},o.prototype.getXValue=function(e){var t=this.layout.options;return t.percentPosition&&!t.isHorizontal?e/this.layout.size.width*100+"%":e+"px"},o.prototype.getYValue=function(e){var t=this.layout.options;return t.percentPosition&&t.isHorizontal?e/this.layout.size.height*100+"%":e+"px"},o.prototype._transitionTo=function(e,t){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(e,10),a=parseInt(t,10),o=r===this.position.x&&a===this.position.y;if(this.setPosition(e,t),o&&!this.isTransitioning)return void this.layoutPosition();var s=e-n,l=t-i,d={};d.transform=this.getTranslate(s,l),this.transition({to:d,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},o.prototype.getTranslate=function(e,t){var n=this.layout.options;return e=n.isOriginLeft?e:-e,t=n.isOriginTop?t:-t,p?"translate3d("+e+"px, "+t+"px, 0)":"translate("+e+"px, "+t+"px)"},o.prototype.goTo=function(e,t){this.setPosition(e,t),this.layoutPosition()},o.prototype.moveTo=h?o.prototype._transitionTo:o.prototype.goTo,o.prototype.setPosition=function(e,t){this.position.x=parseInt(e,10),this.position.y=parseInt(t,10)},o.prototype._nonTransition=function(e){this.css(e.to),e.isCleaning&&this._removeStyles(e.to);for(var t in e.onTransitionEnd)e.onTransitionEnd[t].call(this)},o.prototype._transition=function(e){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(e);var t=this._transn;for(var n in e.onTransitionEnd)t.onEnd[n]=e.onTransitionEnd[n];for(n in e.to)t.ingProperties[n]=!0,e.isCleaning&&(t.clean[n]=!0);if(e.from){this.css(e.from);var i=this.element.offsetHeight;i=null}this.enableTransition(e.to),this.css(e.to),this.isTransitioning=!0};var y="opacity,"+s(_.transform||"transform");o.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:y,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(m,this,!1))},o.prototype.transition=o.prototype[u?"_transition":"_nonTransition"],o.prototype.onwebkitTransitionEnd=function(e){this.ontransitionend(e)},o.prototype.onotransitionend=function(e){this.ontransitionend(e)};var g={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};o.prototype.ontransitionend=function(e){if(e.target===this.element){var t=this._transn,n=g[e.propertyName]||e.propertyName;if(delete t.ingProperties[n],a(t.ingProperties)&&this.disableTransition(),n in t.clean&&(this.element.style[e.propertyName]="",delete t.clean[n]),n in t.onEnd){var i=t.onEnd[n];i.call(this),delete t.onEnd[n]}this.emitEvent("transitionEnd",[this])}},o.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(m,this,!1),this.isTransitioning=!1},o.prototype._removeStyles=function(e){var t={};for(var n in e)t[n]="";this.css(t)};var v={transitionProperty:"",transitionDuration:""};return o.prototype.removeTransitionStyles=function(){this.css(v)},o.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},o.prototype.remove=function(){if(!u||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var e=this;this.once("transitionEnd",function(){e.removeElem()}),this.hide()},o.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var e=this.layout.options,t={},n=this.getHideRevealTransitionEndProperty("visibleStyle");t[n]=this.onRevealTransitionEnd,this.transition({from:e.hiddenStyle,to:e.visibleStyle,isCleaning:!0,onTransitionEnd:t})},o.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},o.prototype.getHideRevealTransitionEndProperty=function(e){var t=this.layout.options[e];if(t.opacity)return"opacity";for(var n in t)return n},o.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var e=this.layout.options,t={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");t[n]=this.onHideTransitionEnd,this.transition({from:e.visibleStyle,to:e.hiddenStyle,isCleaning:!0,onTransitionEnd:t})},o.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},o.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,a,o){return t(e,n,i,r,a,o)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):e.Outlayer=t(e,e.eventie,e.EventEmitter,e.getSize,e.fizzyUIUtils,e.Outlayer.Item)}(window,function(e,t,n,i,r,a){"use strict";function o(e,t){var n=r.getQueryElement(e);if(!n)return void(s&&s.error("Bad element for "+this.constructor.namespace+": "+(n||e)));this.element=n,l&&(this.$element=l(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(t);var i=++u;this.element.outlayerGUID=i,c[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var s=e.console,l=e.jQuery,d=function(){},u=0,c={};return o.namespace="outlayer",o.Item=a,o.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(o.prototype,n.prototype),o.prototype.option=function(e){r.extend(this.options,e)},o.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},o.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},o.prototype._itemize=function(e){for(var t=this._filterFindItemElements(e),n=this.constructor.Item,i=[],r=0,a=t.length;r<a;r++){var o=t[r],s=new n(o,this);i.push(s)}return i},o.prototype._filterFindItemElements=function(e){return r.filterFindElements(e,this.options.itemSelector)},o.prototype.getItemElements=function(){for(var e=[],t=0,n=this.items.length;t<n;t++)e.push(this.items[t].element);return e},o.prototype.layout=function(){this._resetLayout(),this._manageStamps();var e=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},o.prototype._init=o.prototype.layout,
o.prototype._resetLayout=function(){this.getSize()},o.prototype.getSize=function(){this.size=i(this.element)},o.prototype._getMeasurement=function(e,t){var n,a=this.options[e];a?("string"==typeof a?n=this.element.querySelector(a):r.isElement(a)&&(n=a),this[e]=n?i(n)[t]:a):this[e]=0},o.prototype.layoutItems=function(e,t){e=this._getItemsForLayout(e),this._layoutItems(e,t),this._postLayout()},o.prototype._getItemsForLayout=function(e){for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n];r.isIgnored||t.push(r)}return t},o.prototype._layoutItems=function(e,t){if(this._emitCompleteOnItems("layout",e),e&&e.length){for(var n=[],i=0,r=e.length;i<r;i++){var a=e[i],o=this._getItemLayoutPosition(a);o.item=a,o.isInstant=t||a.isLayoutInstant,n.push(o)}this._processLayoutQueue(n)}},o.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},o.prototype._processLayoutQueue=function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t];this._positionItem(i.item,i.x,i.y,i.isInstant)}},o.prototype._positionItem=function(e,t,n,i){i?e.goTo(t,n):e.moveTo(t,n)},o.prototype._postLayout=function(){this.resizeContainer()},o.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},o.prototype._getContainerSize=d,o.prototype._setContainerMeasure=function(e,t){if(void 0!==e){var n=this.size;n.isBorderBox&&(e+=t?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),e=Math.max(e,0),this.element.style[t?"width":"height"]=e+"px"}},o.prototype._emitCompleteOnItems=function(e,t){function n(){r.dispatchEvent(e+"Complete",null,[t])}function i(){o++,o===a&&n()}var r=this,a=t.length;if(!t||!a)return void n();for(var o=0,s=0,l=t.length;s<l;s++){var d=t[s];d.once(e,i)}},o.prototype.dispatchEvent=function(e,t,n){var i=t?[t].concat(n):n;if(this.emitEvent(e,i),l)if(this.$element=this.$element||l(this.element),t){var r=l.Event(t);r.type=e,this.$element.trigger(r,n)}else this.$element.trigger(e,n)},o.prototype.ignore=function(e){var t=this.getItem(e);t&&(t.isIgnored=!0)},o.prototype.unignore=function(e){var t=this.getItem(e);t&&delete t.isIgnored},o.prototype.stamp=function(e){if(e=this._find(e)){this.stamps=this.stamps.concat(e);for(var t=0,n=e.length;t<n;t++){var i=e[t];this.ignore(i)}}},o.prototype.unstamp=function(e){if(e=this._find(e))for(var t=0,n=e.length;t<n;t++){var i=e[t];r.removeFrom(this.stamps,i),this.unignore(i)}},o.prototype._find=function(e){if(e)return"string"==typeof e&&(e=this.element.querySelectorAll(e)),e=r.makeArray(e)},o.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var e=0,t=this.stamps.length;e<t;e++){var n=this.stamps[e];this._manageStamp(n)}}},o.prototype._getBoundingRect=function(){var e=this.element.getBoundingClientRect(),t=this.size;this._boundingRect={left:e.left+t.paddingLeft+t.borderLeftWidth,top:e.top+t.paddingTop+t.borderTopWidth,right:e.right-(t.paddingRight+t.borderRightWidth),bottom:e.bottom-(t.paddingBottom+t.borderBottomWidth)}},o.prototype._manageStamp=d,o.prototype._getElementOffset=function(e){var t=e.getBoundingClientRect(),n=this._boundingRect,r=i(e),a={left:t.left-n.left-r.marginLeft,top:t.top-n.top-r.marginTop,right:n.right-t.right-r.marginRight,bottom:n.bottom-t.bottom-r.marginBottom};return a},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.bindResize=function(){this.isResizeBound||(t.bind(e,"resize",this),this.isResizeBound=!0)},o.prototype.unbindResize=function(){this.isResizeBound&&t.unbind(e,"resize",this),this.isResizeBound=!1},o.prototype.onresize=function(){function e(){t.resize(),delete t.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var t=this;this.resizeTimeout=setTimeout(e,100)},o.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},o.prototype.needsResizeLayout=function(){var e=i(this.element),t=this.size&&e;return t&&e.innerWidth!==this.size.innerWidth},o.prototype.addItems=function(e){var t=this._itemize(e);return t.length&&(this.items=this.items.concat(t)),t},o.prototype.appended=function(e){var t=this.addItems(e);t.length&&(this.layoutItems(t,!0),this.reveal(t))},o.prototype.prepended=function(e){var t=this._itemize(e);if(t.length){var n=this.items.slice(0);this.items=t.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(t,!0),this.reveal(t),this.layoutItems(n)}},o.prototype.reveal=function(e){this._emitCompleteOnItems("reveal",e);for(var t=e&&e.length,n=0;t&&n<t;n++){var i=e[n];i.reveal()}},o.prototype.hide=function(e){this._emitCompleteOnItems("hide",e);for(var t=e&&e.length,n=0;t&&n<t;n++){var i=e[n];i.hide()}},o.prototype.revealItemElements=function(e){var t=this.getItems(e);this.reveal(t)},o.prototype.hideItemElements=function(e){var t=this.getItems(e);this.hide(t)},o.prototype.getItem=function(e){for(var t=0,n=this.items.length;t<n;t++){var i=this.items[t];if(i.element===e)return i}},o.prototype.getItems=function(e){e=r.makeArray(e);for(var t=[],n=0,i=e.length;n<i;n++){var a=e[n],o=this.getItem(a);o&&t.push(o)}return t},o.prototype.remove=function(e){var t=this.getItems(e);if(this._emitCompleteOnItems("remove",t),t&&t.length)for(var n=0,i=t.length;n<i;n++){var a=t[n];a.remove(),r.removeFrom(this.items,a)}},o.prototype.destroy=function(){var e=this.element.style;e.height="",e.position="",e.width="";for(var t=0,n=this.items.length;t<n;t++){var i=this.items[t];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete c[r],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},o.data=function(e){e=r.getQueryElement(e);var t=e&&e.outlayerGUID;return t&&c[t]},o.create=function(e,t){function n(){o.apply(this,arguments)}return Object.create?n.prototype=Object.create(o.prototype):r.extend(n.prototype,o.prototype),n.prototype.constructor=n,n.defaults=r.extend({},o.defaults),r.extend(n.defaults,t),n.prototype.settings={},n.namespace=e,n.data=o.data,n.Item=function(){a.apply(this,arguments)},n.Item.prototype=new a,r.htmlInit(n,e),l&&l.bridget&&l.bridget(e,n),n},o.Item=a,o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],t):"object"==typeof exports?module.exports=t(require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.Item=t(e.Outlayer))}(window,function(e){"use strict";function t(){e.Item.apply(this,arguments)}t.prototype=new e.Item,t.prototype._create=function(){this.id=this.layout.itemGUID++,e.Item.prototype._create.call(this),this.sortData={}},t.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var e=this.layout.options.getSortData,t=this.layout._sorters;for(var n in e){var i=t[n];this.sortData[n]=i(this.element,this)}}};var n=t.prototype.destroy;return t.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],t):"object"==typeof exports?module.exports=t(require("get-size"),require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.LayoutMode=t(e.getSize,e.Outlayer))}(window,function(e,t){"use strict";function n(e){this.isotope=e,e&&(this.options=e.options[this.namespace],this.element=e.element,this.items=e.filteredItems,this.size=e.size)}return function(){function e(e){return function(){return t.prototype[e].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,a=i.length;r<a;r++){var o=i[r];n.prototype[o]=e(o)}}(),n.prototype.needsVerticalResizeLayout=function(){var t=e(this.isotope.element),n=this.isotope.size&&t;return n&&t.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(e,t){var n=e+t,i="outer"+t;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+t]}},n.prototype.getFirstItemSize=function(){var t=this.isotope.filteredItems[0];return t&&t.element&&e(t.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(e,t){function i(){n.apply(this,arguments)}return i.prototype=new n,t&&(i.options=t),i.prototype.namespace=e,n.modes[e]=i,i},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],t):"object"==typeof exports?module.exports=t(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):e.Masonry=t(e.Outlayer,e.getSize,e.fizzyUIUtils)}(window,function(e,t,n){var i=e.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var e=this.cols;for(this.colYs=[];e--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var e=this.items[0],n=e&&e.element;this.columnWidth=n&&t(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,a=r/i,o=i-r%i,s=o&&o<1?"round":"floor";a=Math[s](a),this.cols=Math.max(a,1)},i.prototype.getContainerWidth=function(){var e=this.options.isFitWidth?this.element.parentNode:this.element,n=t(e);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth%this.columnWidth,i=t&&t<1?"round":"ceil",r=Math[i](e.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var a=this._getColGroup(r),o=Math.min.apply(Math,a),s=n.indexOf(a,o),l={x:this.columnWidth*s,y:o},d=o+e.size.outerHeight,u=this.cols+1-a.length,c=0;c<u;c++)this.colYs[s+c]=d;return l},i.prototype._getColGroup=function(e){if(e<2)return this.colYs;for(var t=[],n=this.cols+1-e,i=0;i<n;i++){var r=this.colYs.slice(i,i+e);t[i]=Math.max.apply(Math,r)}return t},i.prototype._manageStamp=function(e){var n=t(e),i=this._getElementOffset(e),r=this.options.isOriginLeft?i.left:i.right,a=r+n.outerWidth,o=Math.floor(r/this.columnWidth);o=Math.max(0,o);var s=Math.floor(a/this.columnWidth);s-=a%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var l=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,d=o;d<=s;d++)this.colYs[d]=Math.max(l,this.colYs[d])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var e={height:this.maxY};return this.options.isFitWidth&&(e.width=this._getContainerFitWidth()),e},i.prototype._getContainerFitWidth=function(){for(var e=0,t=this.cols;--t&&0===this.colYs[t];)e++;return(this.cols-e)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var e=this.containerWidth;return this.getContainerWidth(),e!==this.containerWidth},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],t):"object"==typeof exports?module.exports=t(require("../layout-mode"),require("masonry-layout")):t(e.Isotope.LayoutMode,e.Masonry)}(window,function(e,t){"use strict";function n(e,t){for(var n in t)e[n]=t[n];return e}var i=e.create("masonry"),r=i.prototype._getElementOffset,a=i.prototype.layout,o=i.prototype._getMeasurement;n(i.prototype,t.prototype),i.prototype._getElementOffset=r,i.prototype.layout=a,i.prototype._getMeasurement=o;var s=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var l=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,l.apply(this,arguments)},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("fitRows");return t.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},t.prototype._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&t+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+e.size.outerHeight),this.x+=t,i},t.prototype._getContainerSize=function(){return{height:this.maxY}},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("vertical",{horizontalAlignment:0});return t.prototype._resetLayout=function(){this.y=0},t.prototype._getItemLayoutPosition=function(e){e.getSize();var t=(this.isotope.size.innerWidth-e.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=e.size.outerHeight,{x:t,y:n}},t.prototype._getContainerSize=function(){return{height:this.y}},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,a,o,s){return t(e,n,i,r,a,o,s)}):"object"==typeof exports?module.exports=t(e,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):e.Isotope=t(e,e.Outlayer,e.getSize,e.matchesSelector,e.fizzyUIUtils,e.Isotope.Item,e.Isotope.LayoutMode)}(window,function(e,t,n,i,r,a,o){function s(e,t){return function(n,i){for(var r=0,a=e.length;r<a;r++){var o=e[r],s=n.sortData[o],l=i.sortData[o];if(s>l||s<l){var d=void 0!==t[o]?t[o]:t,u=d?1:-1;return(s>l?1:-1)*u}}return 0}}var l=e.jQuery,d=String.prototype.trim?function(e){return e.trim()}:function(e){return e.replace(/^\s+|\s+$/g,"")},u=document.documentElement,c=u.textContent?function(e){return e.textContent}:function(e){return e.innerText},h=t.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=a,h.LayoutMode=o,h.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),t.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var e in o.modes)this._initLayoutMode(e)},h.prototype.reloadItems=function(){this.itemGUID=0,t.prototype.reloadItems.call(this)},h.prototype._itemize=function(){for(var e=t.prototype._itemize.apply(this,arguments),n=0,i=e.length;n<i;n++){var r=e[n];r.id=this.itemGUID++}return this._updateItemsSortData(e),e},h.prototype._initLayoutMode=function(e){var t=o.modes[e],n=this.options[e]||{};this.options[e]=t.options?r.extend(t.options,n):n,this.modes[e]=new t(this)},h.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},h.prototype._layout=function(){var e=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,e),this._isLayoutInited=!0},h.prototype.arrange=function(e){function t(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(e),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(t):t(),this._sort(),this._layout()},h.prototype._init=h.prototype.arrange,h.prototype._getIsInstant=function(){var e=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=e,e},h.prototype._bindArrangeComplete=function(){function e(){t&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var t,n,i,r=this;this.once("layoutComplete",function(){t=!0,e()}),this.once("hideComplete",function(){n=!0,e()}),this.once("revealComplete",function(){i=!0,e()})},h.prototype._filter=function(e){var t=this.options.filter;t=t||"*";for(var n=[],i=[],r=[],a=this._getFilterTest(t),o=0,s=e.length;o<s;o++){var l=e[o];if(!l.isIgnored){var d=a(l);d&&n.push(l),d&&l.isHidden?i.push(l):d||l.isHidden||r.push(l)}}return{matches:n,needReveal:i,needHide:r}},h.prototype._getFilterTest=function(e){return l&&this.options.isJQueryFiltering?function(t){return l(t.element).is(e)}:"function"==typeof e?function(t){return e(t.element)}:function(t){return i(t.element,e)}},h.prototype.updateSortData=function(e){var t;e?(e=r.makeArray(e),t=this.getItems(e)):t=this.items,this._getSorters(),this._updateItemsSortData(t)},h.prototype._getSorters=function(){var e=this.options.getSortData;for(var t in e){var n=e[t];this._sorters[t]=p(n)}},h.prototype._updateItemsSortData=function(e){for(var t=e&&e.length,n=0;t&&n<t;n++){var i=e[n];i.updateSortData()}};var p=function(){function e(e){if("string"!=typeof e)return e;var n=d(e).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),a=r&&r[1],o=t(a,i),s=h.sortDataParsers[n[1]];return e=s?function(e){return e&&s(o(e))}:function(e){return e&&o(e)}}function t(e,t){var n;return n=e?function(t){return t.getAttribute(e)}:function(e){var n=e.querySelector(t);return n&&c(n)}}return e}();h.sortDataParsers={parseInt:function(e){return parseInt(e,10)},parseFloat:function(e){return parseFloat(e)}},h.prototype._sort=function(){var e=this.options.sortBy;if(e){var t=[].concat.apply(e,this.sortHistory),n=s(t,this.options.sortAscending);this.filteredItems.sort(n),e!=this.sortHistory[0]&&this.sortHistory.unshift(e)}},h.prototype._mode=function(){var e=this.options.layoutMode,t=this.modes[e];if(!t)throw new Error("No layout mode: "+e);return t.options=this.options[e],t},h.prototype._resetLayout=function(){t.prototype._resetLayout.call(this),this._mode()._resetLayout()},h.prototype._getItemLayoutPosition=function(e){return this._mode()._getItemLayoutPosition(e)},h.prototype._manageStamp=function(e){this._mode()._manageStamp(e)},h.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},h.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.prototype.appended=function(e){var t=this.addItems(e);if(t.length){var n=this._filterRevealAdded(t);this.filteredItems=this.filteredItems.concat(n)}},h.prototype.prepended=function(e){var t=this._itemize(e);if(t.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(t);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=t.concat(this.items)}},h.prototype._filterRevealAdded=function(e){var t=this._filter(e);return this.hide(t.needHide),this.reveal(t.matches),this.layoutItems(t.matches,!0),t.matches},h.prototype.insert=function(e){var t=this.addItems(e);if(t.length){var n,i,r=t.length;for(n=0;n<r;n++)i=t[n],this.element.appendChild(i.element);var a=this._filter(t).matches;for(n=0;n<r;n++)t[n].isLayoutInstant=!0;for(this.arrange(),n=0;n<r;n++)delete t[n].isLayoutInstant;this.reveal(a)}};var m=h.prototype.remove;return h.prototype.remove=function(e){e=r.makeArray(e);var t=this.getItems(e);m.call(this,e);var n=t&&t.length;if(n)for(var i=0;i<n;i++){var a=t[i];r.removeFrom(this.filteredItems,a)}},h.prototype.shuffle=function(){for(var e=0,t=this.items.length;e<t;e++){var n=this.items[e];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h.prototype._noTransition=function(e){var t=this.options.transitionDuration;this.options.transitionDuration=0;var n=e.call(this);return this.options.transitionDuration=t,n},h.prototype.getFilteredItemElements=function(){for(var e=[],t=0,n=this.filteredItems.length;t<n;t++)e.push(this.filteredItems[t].element);return e},h}),function(e,t,n){function i(t,n){this.element=t,this.settings=e.extend({},r,n),this.settings.duplicate||n.hasOwnProperty("removeIds")||(this.settings.removeIds=!1),this._defaults=r,this._name=a,this.init()}var r={label:"MENU",duplicate:!0,duration:200,easingOpen:"swing",easingClose:"swing",closedSymbol:"&#9658;",openedSymbol:"&#9660;",prependTo:"body",appendTo:"",parentTag:"a",closeOnClick:!1,allowParentLinks:!1,nestedParentLinks:!0,showChildren:!1,removeIds:!0,removeClasses:!1,removeStyles:!1,brand:"",animations:"jquery",init:function(){},beforeOpen:function(){},beforeClose:function(){},afterOpen:function(){},afterClose:function(){}},a="slicknav",o="slicknav";Keyboard={DOWN:40,ENTER:13,ESCAPE:27,LEFT:37,RIGHT:39,SPACE:32,TAB:9,UP:38},i.prototype.init=function(){var n,i,r=this,a=e(this.element),s=this.settings;if(s.duplicate?r.mobileNav=a.clone():r.mobileNav=a,s.removeIds&&(r.mobileNav.removeAttr("id"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("id")})),s.removeClasses&&(r.mobileNav.removeAttr("class"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("class")})),s.removeStyles&&(r.mobileNav.removeAttr("style"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("style")})),n=o+"_icon",""===s.label&&(n+=" "+o+"_no-text"),"a"==s.parentTag&&(s.parentTag='a href="#"'),r.mobileNav.attr("class",o+"_nav"),i=e('<div class="'+o+'_menu"></div>'),""!==s.brand){var l=e('<div class="'+o+'_brand">'+s.brand+"</div>");e(i).append(l)}r.btn=e(["<"+s.parentTag+' aria-haspopup="true" role="button" tabindex="0" class="'+o+"_btn "+o+'_collapsed">','<span class="'+o+'_menutxt">'+s.label+"</span>",'<span class="'+n+'">','<span class="'+o+'_icon-bar"></span>','<span class="'+o+'_icon-bar"></span>','<span class="'+o+'_icon-bar"></span>',"</span>","</"+s.parentTag+">"].join("")),e(i).append(r.btn),""!==s.appendTo?e(s.appendTo).append(i):e(s.prependTo).prepend(i),i.append(r.mobileNav);var d=r.mobileNav.find("li");e(d).each(function(){var t=e(this),n={};if(n.children=t.children("ul").attr("role","menu"),t.data("menu",n),n.children.length>0){var i=t.contents(),a=!1,l=[];e(i).each(function(){return!e(this).is("ul")&&(l.push(this),void(e(this).is("a")&&(a=!0)))});var d=e("<"+s.parentTag+' role="menuitem" aria-haspopup="true" tabindex="-1" class="'+o+'_item"/>');if(s.allowParentLinks&&!s.nestedParentLinks&&a)e(l).wrapAll('<span class="'+o+"_parent-link "+o+'_row"/>').parent();else{var u=e(l).wrapAll(d).parent();u.addClass(o+"_row")}s.showChildren?t.addClass(o+"_open"):t.addClass(o+"_collapsed"),t.addClass(o+"_parent");var c=e('<span class="'+o+'_arrow">'+(s.showChildren?s.openedSymbol:s.closedSymbol)+"</span>");s.allowParentLinks&&!s.nestedParentLinks&&a&&(c=c.wrap(d).parent()),e(l).last().after(c)}else 0===t.children().length&&t.addClass(o+"_txtnode");t.children("a").attr("role","menuitem").click(function(t){s.closeOnClick&&!e(t.target).parent().closest("li").hasClass(o+"_parent")&&e(r.btn).click()}),s.closeOnClick&&s.allowParentLinks&&(t.children("a").children("a").click(function(t){e(r.btn).click()}),t.find("."+o+"_parent-link a:not(."+o+"_item)").click(function(t){e(r.btn).click()}))}),e(d).each(function(){var t=e(this).data("menu");s.showChildren||r._visibilityToggle(t.children,null,!1,null,!0)}),r._visibilityToggle(r.mobileNav,null,!1,"init",!0),r.mobileNav.attr("role","menu"),e(t).mousedown(function(){r._outlines(!1)}),e(t).keyup(function(){r._outlines(!0)}),e(r.btn).click(function(e){e.preventDefault(),r._menuToggle()}),r.mobileNav.on("click","."+o+"_item",function(t){t.preventDefault(),r._itemClick(e(this))}),e(r.btn).keydown(function(t){var n=t||event;switch(n.keyCode){case Keyboard.ENTER:case Keyboard.SPACE:case Keyboard.DOWN:t.preventDefault(),n.keyCode===Keyboard.DOWN&&e(r.btn).hasClass(o+"_open")||r._menuToggle(),e(r.btn).next().find('[role="menuitem"]').first().focus()}}),r.mobileNav.on("keydown","."+o+"_item",function(t){var n=t||event;switch(n.keyCode){case Keyboard.ENTER:t.preventDefault(),r._itemClick(e(t.target));break;case Keyboard.RIGHT:t.preventDefault(),e(t.target).parent().hasClass(o+"_collapsed")&&r._itemClick(e(t.target)),e(t.target).next().find('[role="menuitem"]').first().focus()}}),r.mobileNav.on("keydown",'[role="menuitem"]',function(t){var n=t||event;switch(n.keyCode){case Keyboard.DOWN:t.preventDefault();var i=e(t.target).parent().parent().children().children('[role="menuitem"]:visible'),a=i.index(t.target),s=a+1;i.length<=s&&(s=0);var l=i.eq(s);l.focus();break;case Keyboard.UP:t.preventDefault();var i=e(t.target).parent().parent().children().children('[role="menuitem"]:visible'),a=i.index(t.target),l=i.eq(a-1);l.focus();break;case Keyboard.LEFT:if(t.preventDefault(),e(t.target).parent().parent().parent().hasClass(o+"_open")){var d=e(t.target).parent().parent().prev();d.focus(),r._itemClick(d)}else e(t.target).parent().parent().hasClass(o+"_nav")&&(r._menuToggle(),e(r.btn).focus());break;case Keyboard.ESCAPE:t.preventDefault(),r._menuToggle(),e(r.btn).focus()}}),s.allowParentLinks&&s.nestedParentLinks&&e("."+o+"_item a").click(function(e){e.stopImmediatePropagation()})},i.prototype._menuToggle=function(e){var t=this,n=t.btn,i=t.mobileNav;n.hasClass(o+"_collapsed")?(n.removeClass(o+"_collapsed"),n.addClass(o+"_open")):(n.removeClass(o+"_open"),n.addClass(o+"_collapsed")),n.addClass(o+"_animating"),t._visibilityToggle(i,n.parent(),!0,n)},i.prototype._itemClick=function(e){var t=this,n=t.settings,i=e.data("menu");i||(i={},i.arrow=e.children("."+o+"_arrow"),i.ul=e.next("ul"),i.parent=e.parent(),i.parent.hasClass(o+"_parent-link")&&(i.parent=e.parent().parent(),i.ul=e.parent().next("ul")),e.data("menu",i)),i.parent.hasClass(o+"_collapsed")?(i.arrow.html(n.openedSymbol),i.parent.removeClass(o+"_collapsed"),i.parent.addClass(o+"_open"),i.parent.addClass(o+"_animating"),t._visibilityToggle(i.ul,i.parent,!0,e)):(i.arrow.html(n.closedSymbol),i.parent.addClass(o+"_collapsed"),i.parent.removeClass(o+"_open"),i.parent.addClass(o+"_animating"),t._visibilityToggle(i.ul,i.parent,!0,e))},i.prototype._visibilityToggle=function(t,n,i,r,a){function s(t,n){e(t).removeClass(o+"_animating"),e(n).removeClass(o+"_animating"),a||u.afterOpen(t)}function l(n,i){t.attr("aria-hidden","true"),c.attr("tabindex","-1"),d._setVisAttr(t,!0),t.hide(),e(n).removeClass(o+"_animating"),e(i).removeClass(o+"_animating"),a?"init"==n&&u.init():u.afterClose(n)}var d=this,u=d.settings,c=d._getActionItems(t),h=0;i&&(h=u.duration),t.hasClass(o+"_hidden")?(t.removeClass(o+"_hidden"),a||u.beforeOpen(r),"jquery"===u.animations?t.stop(!0,!0).slideDown(h,u.easingOpen,function(){s(r,n)}):"velocity"===u.animations&&t.velocity("finish").velocity("slideDown",{duration:h,easing:u.easingOpen,complete:function(){s(r,n)}}),t.attr("aria-hidden","false"),c.attr("tabindex","0"),d._setVisAttr(t,!1)):(t.addClass(o+"_hidden"),a||u.beforeClose(r),"jquery"===u.animations?t.stop(!0,!0).slideUp(h,this.settings.easingClose,function(){l(r,n)}):"velocity"===u.animations&&t.velocity("finish").velocity("slideUp",{duration:h,easing:u.easingClose,complete:function(){l(r,n)}}))},i.prototype._setVisAttr=function(t,n){var i=this,r=t.children("li").children("ul").not("."+o+"_hidden");n?r.each(function(){var t=e(this);t.attr("aria-hidden","true");var r=i._getActionItems(t);r.attr("tabindex","-1"),i._setVisAttr(t,n)}):r.each(function(){var t=e(this);t.attr("aria-hidden","false");var r=i._getActionItems(t);r.attr("tabindex","0"),i._setVisAttr(t,n)})},i.prototype._getActionItems=function(e){var t=e.data("menu");if(!t){t={};var n=e.children("li"),i=n.find("a");t.links=i.add(n.find("."+o+"_item")),e.data("menu",t)}return t.links},i.prototype._outlines=function(t){t?e("."+o+"_item, ."+o+"_btn").css("outline",""):e("."+o+"_item, ."+o+"_btn").css("outline","none")},i.prototype.toggle=function(){var e=this;e._menuToggle()},i.prototype.open=function(){var e=this;e.btn.hasClass(o+"_collapsed")&&e._menuToggle()},i.prototype.close=function(){var e=this;e.btn.hasClass(o+"_open")&&e._menuToggle()},e.fn[a]=function(t){var n=arguments;if(void 0===t||"object"==typeof t)return this.each(function(){e.data(this,"plugin_"+a)||e.data(this,"plugin_"+a,new i(this,t))});if("string"==typeof t&&"_"!==t[0]&&"init"!==t){var r;return this.each(function(){var o=e.data(this,"plugin_"+a);o instanceof i&&"function"==typeof o[t]&&(r=o[t].apply(o,Array.prototype.slice.call(n,1)))}),void 0!==r?r:this}}}(jQuery,document,window),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(t){return e(t,window,document)}):"object"==typeof exports?module.exports=function(t,n){return t||(t=window),n||(n="undefined"!=typeof window?require("jquery"):require("jquery")(t)),e(n,t,t.document)}:e(jQuery,window,document)}(function(e,t,n,i){"use strict";function r(t){var n,i,a="a aa ai ao as b fn i m o s ",o={};e.each(t,function(e,s){n=e.match(/^([^A-Z]+?)([A-Z])/),n&&a.indexOf(n[1]+" ")!==-1&&(i=e.replace(n[0],n[2].toLowerCase()),o[i]=e,"o"===n[1]&&r(t[e]))}),t._hungarianMap=o}function a(t,n,o){t._hungarianMap||r(t);var s;e.each(n,function(r,l){s=t._hungarianMap[r],s===i||!o&&n[s]!==i||("o"===s.charAt(0)?(n[s]||(n[s]={}),e.extend(!0,n[s],n[r]),a(t[s],n[s],o)):n[s]=n[r])})}function o(e){var t=Ve.defaults.oLanguage,n=e.sZeroRecords;!e.sEmptyTable&&n&&"No data available in table"===t.sEmptyTable&&Ae(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&n&&"Loading..."===t.sLoadingRecords&&Ae(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var i=e.sDecimal;i&&$e(i)}function s(e){pt(e,"ordering","bSort"),pt(e,"orderMulti","bSortMulti"),pt(e,"orderClasses","bSortClasses"),pt(e,"orderCellsTop","bSortCellsTop"),pt(e,"order","aaSorting"),pt(e,"orderFixed","aaSortingFixed"),pt(e,"paging","bPaginate"),pt(e,"pagingType","sPaginationType"),pt(e,"pageLength","iDisplayLength"),pt(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,i=t.length;n<i;n++)t[n]&&a(Ve.models.oSearch,t[n])}function l(t){pt(t,"orderable","bSortable"),pt(t,"orderData","aDataSort"),pt(t,"orderSequence","asSorting"),pt(t,"orderDataType","sortDataType");var n=t.aDataSort;n&&!e.isArray(n)&&(t.aDataSort=[n])}function d(n){if(!Ve.__browser){var i={};Ve.__browser=i;var r=e("<div/>").css({position:"fixed",top:0,left:e(t).scrollLeft()*-1,height:1,width:1,overflow:"hidden"}).append(e("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(e("<div/>").css({width:"100%",height:10}))).appendTo("body"),a=r.children(),o=a.children();i.barWidth=a[0].offsetWidth-a[0].clientWidth,i.bScrollOversize=100===o[0].offsetWidth&&100!==a[0].clientWidth,i.bScrollbarLeft=1!==Math.round(o.offset().left),i.bBounding=!!r[0].getBoundingClientRect().width,r.remove()}e.extend(n.oBrowser,Ve.__browser),n.oScroll.iBarWidth=Ve.__browser.barWidth}function u(e,t,n,r,a,o){var s,l=r,d=!1;for(n!==i&&(s=n,d=!0);l!==a;)e.hasOwnProperty(l)&&(s=d?t(s,e[l],l,e):e[l],d=!0,l+=o);return s}function c(t,i){var r=Ve.defaults.column,a=t.aoColumns.length,o=e.extend({},Ve.models.oColumn,r,{nTh:i?i:n.createElement("th"),sTitle:r.sTitle?r.sTitle:i?i.innerHTML:"",aDataSort:r.aDataSort?r.aDataSort:[a],mData:r.mData?r.mData:a,idx:a});t.aoColumns.push(o);var s=t.aoPreSearchCols;s[a]=e.extend({},Ve.models.oSearch,s[a]),h(t,a,e(i).data())}function h(t,n,r){var o=t.aoColumns[n],s=t.oClasses,d=e(o.nTh);if(!o.sWidthOrig){o.sWidthOrig=d.attr("width")||null;var u=(d.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);u&&(o.sWidthOrig=u[1])}r!==i&&null!==r&&(l(r),
a(Ve.defaults.column,r),r.mDataProp===i||r.mData||(r.mData=r.mDataProp),r.sType&&(o._sManualType=r.sType),r.className&&!r.sClass&&(r.sClass=r.className),e.extend(o,r),Ae(o,r,"sWidth","sWidthOrig"),r.iDataSort!==i&&(o.aDataSort=[r.iDataSort]),Ae(o,r,"aDataSort"));var c=o.mData,h=Y(c),p=o.mRender?Y(o.mRender):null,m=function(e){return"string"==typeof e&&e.indexOf("@")!==-1};o._bAttrSrc=e.isPlainObject(c)&&(m(c.sort)||m(c.type)||m(c.filter)),o._setter=null,o.fnGetData=function(e,t,n){var r=h(e,t,i,n);return p&&t?p(r,t,e,n):r},o.fnSetData=function(e,t,n){return S(c)(e,t,n)},"number"!=typeof c&&(t._rowReadObject=!0),t.oFeatures.bSort||(o.bSortable=!1,d.addClass(s.sSortableNone));var f=e.inArray("asc",o.asSorting)!==-1,_=e.inArray("desc",o.asSorting)!==-1;o.bSortable&&(f||_)?f&&!_?(o.sSortingClass=s.sSortableAsc,o.sSortingClassJUI=s.sSortJUIAscAllowed):!f&&_?(o.sSortingClass=s.sSortableDesc,o.sSortingClassJUI=s.sSortJUIDescAllowed):(o.sSortingClass=s.sSortable,o.sSortingClassJUI=s.sSortJUI):(o.sSortingClass=s.sSortableNone,o.sSortingClassJUI="")}function p(e){if(e.oFeatures.bAutoWidth!==!1){var t=e.aoColumns;ye(e);for(var n=0,i=t.length;n<i;n++)t[n].nTh.style.width=t[n].sWidth}var r=e.oScroll;""===r.sY&&""===r.sX||fe(e),Oe(e,null,"column-sizing",[e])}function m(e,t){var n=y(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function f(t,n){var i=y(t,"bVisible"),r=e.inArray(n,i);return r!==-1?r:null}function _(t){var n=0;return e.each(t.aoColumns,function(t,i){i.bVisible&&"none"!==e(i.nTh).css("display")&&n++}),n}function y(t,n){var i=[];return e.map(t.aoColumns,function(e,t){e[n]&&i.push(t)}),i}function g(e){var t,n,r,a,o,s,l,d,u,c=e.aoColumns,h=e.aoData,p=Ve.ext.type.detect;for(t=0,n=c.length;t<n;t++)if(l=c[t],u=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(r=0,a=p.length;r<a;r++){for(o=0,s=h.length;o<s&&(u[o]===i&&(u[o]=D(e,o,t,"type")),d=p[r](u[o],e),d||r===p.length-1)&&"html"!==d;o++);if(d){l.sType=d;break}}l.sType||(l.sType="string")}}function v(t,n,r,a){var o,s,l,d,u,h,p,m=t.aoColumns;if(n)for(o=n.length-1;o>=0;o--){p=n[o];var f=p.targets!==i?p.targets:p.aTargets;for(e.isArray(f)||(f=[f]),l=0,d=f.length;l<d;l++)if("number"==typeof f[l]&&f[l]>=0){for(;m.length<=f[l];)c(t);a(f[l],p)}else if("number"==typeof f[l]&&f[l]<0)a(m.length+f[l],p);else if("string"==typeof f[l])for(u=0,h=m.length;u<h;u++)("_all"==f[l]||e(m[u].nTh).hasClass(f[l]))&&a(u,p)}if(r)for(o=0,s=r.length;o<s;o++)a(o,r[o])}function M(t,n,r,a){var o=t.aoData.length,s=e.extend(!0,{},Ve.models.oRow,{src:r?"dom":"data",idx:o});s._aData=n,t.aoData.push(s);for(var l=t.aoColumns,d=0,u=l.length;d<u;d++)l[d].sType=null;t.aiDisplayMaster.push(o);var c=t.rowIdFn(n);return c!==i&&(t.aIds[c]=s),!r&&t.oFeatures.bDeferRender||j(t,o,r,a),o}function L(t,n){var i;return n instanceof e||(n=e(n)),n.map(function(e,n){return i=A(t,n),M(t,i.data,n,i.cells)})}function b(e,t){return t._DT_RowIndex!==i?t._DT_RowIndex:null}function w(t,n,i){return e.inArray(i,t.aoData[n].anCells)}function D(e,t,n,r){var a=e.iDraw,o=e.aoColumns[n],s=e.aoData[t]._aData,l=o.sDefaultContent,d=o.fnGetData(s,r,{settings:e,row:t,col:n});if(d===i)return e.iDrawError!=a&&null===l&&(He(e,0,"Requested unknown parameter "+("function"==typeof o.mData?"{function}":"'"+o.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=a),l;if(d!==s&&null!==d||null===l||r===i){if("function"==typeof d)return d.call(s)}else d=l;return null===d&&"display"==r?"":d}function k(e,t,n,i){var r=e.aoColumns[n],a=e.aoData[t]._aData;r.fnSetData(a,i,{settings:e,row:t,col:n})}function T(t){return e.map(t.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\\./g,".")})}function Y(t){if(e.isPlainObject(t)){var n={};return e.each(t,function(e,t){t&&(n[e]=Y(t))}),function(e,t,r,a){var o=n[t]||n._;return o!==i?o(e,t,r,a):e}}if(null===t)return function(e){return e};if("function"==typeof t)return function(e,n,i,r){return t(e,n,i,r)};if("string"!=typeof t||t.indexOf(".")===-1&&t.indexOf("[")===-1&&t.indexOf("(")===-1)return function(e,n){return e[t]};var r=function(t,n,a){var o,s,l,d;if(""!==a)for(var u=T(a),c=0,h=u.length;c<h;c++){if(o=u[c].match(mt),s=u[c].match(ft),o){if(u[c]=u[c].replace(mt,""),""!==u[c]&&(t=t[u[c]]),l=[],u.splice(0,c+1),d=u.join("."),e.isArray(t))for(var p=0,m=t.length;p<m;p++)l.push(r(t[p],n,d));var f=o[0].substring(1,o[0].length-1);t=""===f?l:l.join(f);break}if(s)u[c]=u[c].replace(ft,""),t=t[u[c]]();else{if(null===t||t[u[c]]===i)return i;t=t[u[c]]}}return t};return function(e,n){return r(e,n,t)}}function S(t){if(e.isPlainObject(t))return S(t._);if(null===t)return function(){};if("function"==typeof t)return function(e,n,i){t(e,"set",n,i)};if("string"!=typeof t||t.indexOf(".")===-1&&t.indexOf("[")===-1&&t.indexOf("(")===-1)return function(e,n){e[t]=n};var n=function(t,r,a){for(var o,s,l,d,u,c=T(a),h=c[c.length-1],p=0,m=c.length-1;p<m;p++){if(s=c[p].match(mt),l=c[p].match(ft),s){if(c[p]=c[p].replace(mt,""),t[c[p]]=[],o=c.slice(),o.splice(0,p+1),u=o.join("."),e.isArray(r))for(var f=0,_=r.length;f<_;f++)d={},n(d,r[f],u),t[c[p]].push(d);else t[c[p]]=r;return}l&&(c[p]=c[p].replace(ft,""),t=t[c[p]](r)),null!==t[c[p]]&&t[c[p]]!==i||(t[c[p]]={}),t=t[c[p]]}h.match(ft)?t=t[h.replace(ft,"")](r):t[h.replace(mt,"")]=r};return function(e,i){return n(e,i,t)}}function x(e){return st(e.aoData,"_aData")}function C(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function E(e,t,n){for(var r=-1,a=0,o=e.length;a<o;a++)e[a]==t?r=a:e[a]>t&&e[a]--;r!=-1&&n===i&&e.splice(r,1)}function H(e,t,n,r){var a,o,s=e.aoData[t],l=function(n,i){for(;n.childNodes.length;)n.removeChild(n.firstChild);n.innerHTML=D(e,t,i,"display")};if("dom"!==n&&(n&&"auto"!==n||"dom"!==s.src)){var d=s.anCells;if(d)if(r!==i)l(d[r],r);else for(a=0,o=d.length;a<o;a++)l(d[a],a)}else s._aData=A(e,s,r,r===i?i:s._aData).data;s._aSortData=null,s._aFilterData=null;var u=e.aoColumns;if(r!==i)u[r].sType=null;else{for(a=0,o=u.length;a<o;a++)u[a].sType=null;P(e,s)}}function A(t,n,r,a){var o,s,l,d=[],u=n.firstChild,c=0,h=t.aoColumns,p=t._rowReadObject;a=a!==i?a:p?{}:[];var m=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(n!==-1){var i=e.substring(n+1),r=S(e);r(a,t.getAttribute(i))}}},f=function(t){if(r===i||r===c)if(s=h[c],l=e.trim(t.innerHTML),s&&s._bAttrSrc){var n=S(s.mData._);n(a,l),m(s.mData.sort,t),m(s.mData.type,t),m(s.mData.filter,t)}else p?(s._setter||(s._setter=S(s.mData)),s._setter(a,l)):a[c]=l;c++};if(u)for(;u;)o=u.nodeName.toUpperCase(),"TD"!=o&&"TH"!=o||(f(u),d.push(u)),u=u.nextSibling;else{d=n.anCells;for(var _=0,y=d.length;_<y;_++)f(d[_])}var g=n.firstChild?n:n.nTr;if(g){var v=g.getAttribute("id");v&&S(t.rowId)(a,v)}return{data:a,cells:d}}function j(t,i,r,a){var o,s,l,d,u,c=t.aoData[i],h=c._aData,p=[];if(null===c.nTr){for(o=r||n.createElement("tr"),c.nTr=o,c.anCells=p,o._DT_RowIndex=i,P(t,c),d=0,u=t.aoColumns.length;d<u;d++)l=t.aoColumns[d],s=r?a[d]:n.createElement(l.sCellType),s._DT_CellIndex={row:i,column:d},p.push(s),r&&!l.mRender&&l.mData===d||e.isPlainObject(l.mData)&&l.mData._===d+".display"||(s.innerHTML=D(t,i,d,"display")),l.sClass&&(s.className+=" "+l.sClass),l.bVisible&&!r?o.appendChild(s):!l.bVisible&&r&&s.parentNode.removeChild(s),l.fnCreatedCell&&l.fnCreatedCell.call(t.oInstance,s,D(t,i,d),h,i,d);Oe(t,"aoRowCreatedCallback",null,[o,h,i])}c.nTr.setAttribute("role","row")}function P(t,n){var i=n.nTr,r=n._aData;if(i){var a=t.rowIdFn(r);if(a&&(i.id=a),r.DT_RowClass){var o=r.DT_RowClass.split(" ");n.__rowc=n.__rowc?ht(n.__rowc.concat(o)):o,e(i).removeClass(n.__rowc.join(" ")).addClass(r.DT_RowClass)}r.DT_RowAttr&&e(i).attr(r.DT_RowAttr),r.DT_RowData&&e(i).data(r.DT_RowData)}}function I(t){var n,i,r,a,o,s=t.nTHead,l=t.nTFoot,d=0===e("th, td",s).length,u=t.oClasses,c=t.aoColumns;for(d&&(a=e("<tr/>").appendTo(s)),n=0,i=c.length;n<i;n++)o=c[n],r=e(o.nTh).addClass(o.sClass),d&&r.appendTo(a),t.oFeatures.bSort&&(r.addClass(o.sSortingClass),o.bSortable!==!1&&(r.attr("tabindex",t.iTabIndex).attr("aria-controls",t.sTableId),Te(t,o.nTh,n))),o.sTitle!=r[0].innerHTML&&r.html(o.sTitle),Fe(t,"header")(t,r,o,u);if(d&&R(t.aoHeader,s),e(s).find(">tr").attr("role","row"),e(s).find(">tr>th, >tr>td").addClass(u.sHeaderTH),e(l).find(">tr>th, >tr>td").addClass(u.sFooterTH),null!==l){var h=t.aoFooter[0];for(n=0,i=h.length;n<i;n++)o=c[n],o.nTf=h[n].cell,o.sClass&&e(o.nTf).addClass(o.sClass)}}function O(t,n,r){var a,o,s,l,d,u,c,h,p,m=[],f=[],_=t.aoColumns.length;if(n){for(r===i&&(r=!1),a=0,o=n.length;a<o;a++){for(m[a]=n[a].slice(),m[a].nTr=n[a].nTr,s=_-1;s>=0;s--)t.aoColumns[s].bVisible||r||m[a].splice(s,1);f.push([])}for(a=0,o=m.length;a<o;a++){if(c=m[a].nTr)for(;u=c.firstChild;)c.removeChild(u);for(s=0,l=m[a].length;s<l;s++)if(h=1,p=1,f[a][s]===i){for(c.appendChild(m[a][s].cell),f[a][s]=1;m[a+h]!==i&&m[a][s].cell==m[a+h][s].cell;)f[a+h][s]=1,h++;for(;m[a][s+p]!==i&&m[a][s].cell==m[a][s+p].cell;){for(d=0;d<h;d++)f[a+d][s+p]=1;p++}e(m[a][s].cell).attr("rowspan",h).attr("colspan",p)}}}}function z(t){var n=Oe(t,"aoPreDrawCallback","preDraw",[t]);if(e.inArray(!1,n)!==-1)return void pe(t,!1);var r=[],a=0,o=t.asStripeClasses,s=o.length,l=(t.aoOpenRows.length,t.oLanguage),d=t.iInitDisplayStart,u="ssp"==We(t),c=t.aiDisplay;t.bDrawing=!0,d!==i&&d!==-1&&(t._iDisplayStart=u?d:d>=t.fnRecordsDisplay()?0:d,t.iInitDisplayStart=-1);var h=t._iDisplayStart,p=t.fnDisplayEnd();if(t.bDeferLoading)t.bDeferLoading=!1,t.iDraw++,pe(t,!1);else if(u){if(!t.bDestroying&&!q(t))return}else t.iDraw++;if(0!==c.length)for(var m=u?0:h,f=u?t.aoData.length:p,y=m;y<f;y++){var g=c[y],v=t.aoData[g];null===v.nTr&&j(t,g);var M=v.nTr;if(0!==s){var L=o[a%s];v._sRowStripe!=L&&(e(M).removeClass(v._sRowStripe).addClass(L),v._sRowStripe=L)}Oe(t,"aoRowCallback",null,[M,v._aData,a,y]),r.push(M),a++}else{var b=l.sZeroRecords;1==t.iDraw&&"ajax"==We(t)?b=l.sLoadingRecords:l.sEmptyTable&&0===t.fnRecordsTotal()&&(b=l.sEmptyTable),r[0]=e("<tr/>",{"class":s?o[0]:""}).append(e("<td />",{valign:"top",colSpan:_(t),"class":t.oClasses.sRowEmpty}).html(b))[0]}Oe(t,"aoHeaderCallback","header",[e(t.nTHead).children("tr")[0],x(t),h,p,c]),Oe(t,"aoFooterCallback","footer",[e(t.nTFoot).children("tr")[0],x(t),h,p,c]);var w=e(t.nTBody);w.children().detach(),w.append(e(r)),Oe(t,"aoDrawCallback","draw",[t]),t.bSorted=!1,t.bFiltered=!1,t.bDrawing=!1}function F(e,t){var n=e.oFeatures,i=n.bSort,r=n.bFilter;i&&we(e),r?G(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),t!==!0&&(e._iDisplayStart=0),e._drawHold=t,z(e),e._drawHold=!1}function W(t){var n=t.oClasses,i=e(t.nTable),r=e("<div/>").insertBefore(i),a=t.oFeatures,o=e("<div/>",{id:t.sTableId+"_wrapper","class":n.sWrapper+(t.nTFoot?"":" "+n.sNoFooter)});t.nHolding=r[0],t.nTableWrapper=o[0],t.nTableReinsertBefore=t.nTable.nextSibling;for(var s,l,d,u,c,h,p=t.sDom.split(""),m=0;m<p.length;m++){if(s=null,l=p[m],"<"==l){if(d=e("<div/>")[0],u=p[m+1],"'"==u||'"'==u){for(c="",h=2;p[m+h]!=u;)c+=p[m+h],h++;if("H"==c?c=n.sJUIHeader:"F"==c&&(c=n.sJUIFooter),c.indexOf(".")!=-1){var f=c.split(".");d.id=f[0].substr(1,f[0].length-1),d.className=f[1]}else"#"==c.charAt(0)?d.id=c.substr(1,c.length-1):d.className=c;m+=h}o.append(d),o=e(d)}else if(">"==l)o=o.parent();else if("l"==l&&a.bPaginate&&a.bLengthChange)s=de(t);else if("f"==l&&a.bFilter)s=V(t);else if("r"==l&&a.bProcessing)s=he(t);else if("t"==l)s=me(t);else if("i"==l&&a.bInfo)s=ie(t);else if("p"==l&&a.bPaginate)s=ue(t);else if(0!==Ve.ext.feature.length)for(var _=Ve.ext.feature,y=0,g=_.length;y<g;y++)if(l==_[y].cFeature){s=_[y].fnInit(t);break}if(s){var v=t.aanFeatures;v[l]||(v[l]=[]),v[l].push(s),o.append(s)}}r.replaceWith(o),t.nHolding=null}function R(t,n){var i,r,a,o,s,l,d,u,c,h,p,m=e(n).children("tr"),f=function(e,t,n){for(var i=e[t];i[n];)n++;return n};for(t.splice(0,t.length),a=0,l=m.length;a<l;a++)t.push([]);for(a=0,l=m.length;a<l;a++)for(i=m[a],u=0,r=i.firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(c=1*r.getAttribute("colspan"),h=1*r.getAttribute("rowspan"),c=c&&0!==c&&1!==c?c:1,h=h&&0!==h&&1!==h?h:1,d=f(t,a,u),p=1===c,s=0;s<c;s++)for(o=0;o<h;o++)t[a+o][d+s]={cell:r,unique:p},t[a+o].nTr=i;r=r.nextSibling}}function $(e,t,n){var i=[];n||(n=e.aoHeader,t&&(n=[],R(n,t)));for(var r=0,a=n.length;r<a;r++)for(var o=0,s=n[r].length;o<s;o++)!n[r][o].unique||i[o]&&e.bSortCellsTop||(i[o]=n[r][o].cell);return i}function N(t,n,i){if(Oe(t,"aoServerParams","serverParams",[n]),n&&e.isArray(n)){var r={},a=/(.*?)\[\]$/;e.each(n,function(e,t){var n=t.name.match(a);if(n){var i=n[0];r[i]||(r[i]=[]),r[i].push(t.value)}else r[t.name]=t.value}),n=r}var o,s=t.ajax,l=t.oInstance,d=function(e){Oe(t,null,"xhr",[t,e,t.jqXHR]),i(e)};if(e.isPlainObject(s)&&s.data){o=s.data;var u=e.isFunction(o)?o(n,t):o;n=e.isFunction(o)&&u?u:e.extend(!0,n,u),delete s.data}var c={data:n,success:function(e){var n=e.error||e.sError;n&&He(t,0,n),t.json=e,d(e)},dataType:"json",cache:!1,type:t.sServerMethod,error:function(n,i,r){var a=Oe(t,null,"xhr",[t,null,t.jqXHR]);e.inArray(!0,a)===-1&&("parsererror"==i?He(t,0,"Invalid JSON response",1):4===n.readyState&&He(t,0,"Ajax error",7)),pe(t,!1)}};t.oAjaxData=n,Oe(t,null,"preXhr",[t,n]),t.fnServerData?t.fnServerData.call(l,t.sAjaxSource,e.map(n,function(e,t){return{name:t,value:e}}),d,t):t.sAjaxSource||"string"==typeof s?t.jqXHR=e.ajax(e.extend(c,{url:s||t.sAjaxSource})):e.isFunction(s)?t.jqXHR=s.call(l,n,d,t):(t.jqXHR=e.ajax(e.extend(c,s)),s.data=o)}function q(e){return!e.bAjaxDataGet||(e.iDraw++,pe(e,!0),N(e,B(e),function(t){U(e,t)}),!1)}function B(t){var n,i,r,a,o=t.aoColumns,s=o.length,l=t.oFeatures,d=t.oPreviousSearch,u=t.aoPreSearchCols,c=[],h=be(t),p=t._iDisplayStart,m=l.bPaginate!==!1?t._iDisplayLength:-1,f=function(e,t){c.push({name:e,value:t})};f("sEcho",t.iDraw),f("iColumns",s),f("sColumns",st(o,"sName").join(",")),f("iDisplayStart",p),f("iDisplayLength",m);var _={draw:t.iDraw,columns:[],order:[],start:p,length:m,search:{value:d.sSearch,regex:d.bRegex}};for(n=0;n<s;n++)r=o[n],a=u[n],i="function"==typeof r.mData?"function":r.mData,_.columns.push({data:i,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:a.sSearch,regex:a.bRegex}}),f("mDataProp_"+n,i),l.bFilter&&(f("sSearch_"+n,a.sSearch),f("bRegex_"+n,a.bRegex),f("bSearchable_"+n,r.bSearchable)),l.bSort&&f("bSortable_"+n,r.bSortable);l.bFilter&&(f("sSearch",d.sSearch),f("bRegex",d.bRegex)),l.bSort&&(e.each(h,function(e,t){_.order.push({column:t.col,dir:t.dir}),f("iSortCol_"+e,t.col),f("sSortDir_"+e,t.dir)}),f("iSortingCols",h.length));var y=Ve.ext.legacy.ajax;return null===y?t.sAjaxSource?c:_:y?c:_}function U(e,t){var n=function(e,n){return t[e]!==i?t[e]:t[n]},r=J(e,t),a=n("sEcho","draw"),o=n("iTotalRecords","recordsTotal"),s=n("iTotalDisplayRecords","recordsFiltered");if(a){if(1*a<e.iDraw)return;e.iDraw=1*a}C(e),e._iRecordsTotal=parseInt(o,10),e._iRecordsDisplay=parseInt(s,10);for(var l=0,d=r.length;l<d;l++)M(e,r[l]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,z(e),e._bInitComplete||se(e,t),e.bAjaxDataGet=!0,pe(e,!1)}function J(t,n){var r=e.isPlainObject(t.ajax)&&t.ajax.dataSrc!==i?t.ajax.dataSrc:t.sAjaxDataProp;return"data"===r?n.aaData||n[r]:""!==r?Y(r)(n):n}function V(t){var i=t.oClasses,r=t.sTableId,a=t.oLanguage,o=t.oPreviousSearch,s=t.aanFeatures,l='<input type="search" class="'+i.sFilterInput+'"/>',d=a.sSearch;d=d.match(/_INPUT_/)?d.replace("_INPUT_",l):d+l;var u=e("<div/>",{id:s.f?null:r+"_filter","class":i.sFilter}).append(e("<label/>").append(d)),c=function(){var e=(s.f,this.value?this.value:"");e!=o.sSearch&&(G(t,{sSearch:e,bRegex:o.bRegex,bSmart:o.bSmart,bCaseInsensitive:o.bCaseInsensitive}),t._iDisplayStart=0,z(t))},h=null!==t.searchDelay?t.searchDelay:"ssp"===We(t)?400:0,p=e("input",u).val(o.sSearch).attr("placeholder",a.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",h?Mt(c,h):c).on("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",r);return e(t.nTable).on("search.dt.DT",function(e,i){if(t===i)try{p[0]!==n.activeElement&&p.val(o.sSearch)}catch(r){}}),u[0]}function G(e,t,n){var r=e.oPreviousSearch,a=e.aoPreSearchCols,o=function(e){r.sSearch=e.sSearch,r.bRegex=e.bRegex,r.bSmart=e.bSmart,r.bCaseInsensitive=e.bCaseInsensitive},s=function(e){return e.bEscapeRegex!==i?!e.bEscapeRegex:e.bRegex};if(g(e),"ssp"!=We(e)){Q(e,t.sSearch,n,s(t),t.bSmart,t.bCaseInsensitive),o(t);for(var l=0;l<a.length;l++)K(e,a[l].sSearch,l,s(a[l]),a[l].bSmart,a[l].bCaseInsensitive);X(e)}else o(t);e.bFiltered=!0,Oe(e,null,"search",[e])}function X(t){for(var n,i,r=Ve.ext.search,a=t.aiDisplay,o=0,s=r.length;o<s;o++){for(var l=[],d=0,u=a.length;d<u;d++)i=a[d],n=t.aoData[i],r[o](t,n._aFilterData,i,n._aData,d)&&l.push(i);a.length=0,e.merge(a,l)}}function K(e,t,n,i,r,a){if(""!==t){for(var o,s=[],l=e.aiDisplay,d=Z(t,i,r,a),u=0;u<l.length;u++)o=e.aoData[l[u]]._aFilterData[n],d.test(o)&&s.push(l[u]);e.aiDisplay=s}}function Q(e,t,n,i,r,a){var o,s,l,d=Z(t,i,r,a),u=e.oPreviousSearch.sSearch,c=e.aiDisplayMaster,h=[];if(0!==Ve.ext.search.length&&(n=!0),s=ee(e),t.length<=0)e.aiDisplay=c.slice();else{for((s||n||u.length>t.length||0!==t.indexOf(u)||e.bSorted)&&(e.aiDisplay=c.slice()),o=e.aiDisplay,l=0;l<o.length;l++)d.test(e.aoData[o[l]]._sFilterRow)&&h.push(o[l]);e.aiDisplay=h}}function Z(t,n,i,r){if(t=n?t:_t(t),i){var a=e.map(t.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")});t="^(?=.*?"+a.join(")(?=.*?")+").*$"}return new RegExp(t,r?"i":"")}function ee(e){var t,n,i,r,a,o,s,l,d=e.aoColumns,u=Ve.ext.type.search,c=!1;for(n=0,r=e.aoData.length;n<r;n++)if(l=e.aoData[n],!l._aFilterData){for(o=[],i=0,a=d.length;i<a;i++)t=d[i],t.bSearchable?(s=D(e,n,i,"filter"),u[t.sType]&&(s=u[t.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&s.indexOf("&")!==-1&&(yt.innerHTML=s,s=gt?yt.textContent:yt.innerText),s.replace&&(s=s.replace(/[\r\n]/g,"")),o.push(s);l._aFilterData=o,l._sFilterRow=o.join("  "),c=!0}return c}function te(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function ne(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function ie(t){var n=t.sTableId,i=t.aanFeatures.i,r=e("<div/>",{"class":t.oClasses.sInfo,id:i?null:n+"_info"});return i||(t.aoDrawCallback.push({fn:re,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),e(t.nTable).attr("aria-describedby",n+"_info")),r[0]}function re(t){var n=t.aanFeatures.i;if(0!==n.length){var i=t.oLanguage,r=t._iDisplayStart+1,a=t.fnDisplayEnd(),o=t.fnRecordsTotal(),s=t.fnRecordsDisplay(),l=s?i.sInfo:i.sInfoEmpty;s!==o&&(l+=" "+i.sInfoFiltered),l+=i.sInfoPostFix,l=ae(t,l);var d=i.fnInfoCallback;null!==d&&(l=d.call(t.oInstance,t,r,a,o,s,l)),e(n).html(l)}}function ae(e,t){var n=e.fnFormatNumber,i=e._iDisplayStart+1,r=e._iDisplayLength,a=e.fnRecordsDisplay(),o=r===-1;return t.replace(/_START_/g,n.call(e,i)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,a)).replace(/_PAGE_/g,n.call(e,o?1:Math.ceil(i/r))).replace(/_PAGES_/g,n.call(e,o?1:Math.ceil(a/r)))}function oe(e){var t,n,i,r=e.iInitDisplayStart,a=e.aoColumns,o=e.oFeatures,s=e.bDeferLoading;if(!e.bInitialised)return void setTimeout(function(){oe(e)},200);for(W(e),I(e),O(e,e.aoHeader),O(e,e.aoFooter),pe(e,!0),o.bAutoWidth&&ye(e),t=0,n=a.length;t<n;t++)i=a[t],i.sWidth&&(i.nTh.style.width=Le(i.sWidth));Oe(e,null,"preInit",[e]),F(e);var l=We(e);("ssp"!=l||s)&&("ajax"==l?N(e,[],function(n){var i=J(e,n);for(t=0;t<i.length;t++)M(e,i[t]);e.iInitDisplayStart=r,F(e),pe(e,!1),se(e,n)},e):(pe(e,!1),se(e)))}function se(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&p(e),Oe(e,null,"plugin-init",[e,t]),Oe(e,"aoInitComplete","init",[e,t])}function le(e,t){var n=parseInt(t,10);e._iDisplayLength=n,ze(e),Oe(e,null,"length",[e,n])}function de(t){for(var n=t.oClasses,i=t.sTableId,r=t.aLengthMenu,a=e.isArray(r[0]),o=a?r[0]:r,s=a?r[1]:r,l=e("<select/>",{name:i+"_length","aria-controls":i,"class":n.sLengthSelect}),d=0,u=o.length;d<u;d++)l[0][d]=new Option(s[d],o[d]);var c=e("<div><label/></div>").addClass(n.sLength);return t.aanFeatures.l||(c[0].id=i+"_length"),c.children().append(t.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),e("select",c).val(t._iDisplayLength).on("change.DT",function(n){le(t,e(this).val()),z(t)}),e(t.nTable).on("length.dt.DT",function(n,i,r){t===i&&e("select",c).val(r)}),c[0]}function ue(t){var n=t.sPaginationType,i=Ve.ext.pager[n],r="function"==typeof i,a=function(e){z(e)},o=e("<div/>").addClass(t.oClasses.sPaging+n)[0],s=t.aanFeatures;return r||i.fnInit(t,o,a),s.p||(o.id=t.sTableId+"_paginate",t.aoDrawCallback.push({fn:function(e){if(r){var t,n,o=e._iDisplayStart,l=e._iDisplayLength,d=e.fnRecordsDisplay(),u=l===-1,c=u?0:Math.ceil(o/l),h=u?1:Math.ceil(d/l),p=i(c,h);for(t=0,n=s.p.length;t<n;t++)Fe(e,"pageButton")(e,s.p[t],t,p,c,h)}else i.fnUpdate(e,a)},sName:"pagination"})),o}function ce(e,t,n){var i=e._iDisplayStart,r=e._iDisplayLength,a=e.fnRecordsDisplay();0===a||r===-1?i=0:"number"==typeof t?(i=t*r,i>a&&(i=0)):"first"==t?i=0:"previous"==t?(i=r>=0?i-r:0,i<0&&(i=0)):"next"==t?i+r<a&&(i+=r):"last"==t?i=Math.floor((a-1)/r)*r:He(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==i;return e._iDisplayStart=i,o&&(Oe(e,null,"page",[e]),n&&z(e)),o}function he(t){return e("<div/>",{id:t.aanFeatures.r?null:t.sTableId+"_processing","class":t.oClasses.sProcessing}).html(t.oLanguage.sProcessing).insertBefore(t.nTable)[0]}function pe(t,n){t.oFeatures.bProcessing&&e(t.aanFeatures.r).css("display",n?"block":"none"),Oe(t,null,"processing",[t,n])}function me(t){var n=e(t.nTable);n.attr("role","grid");var i=t.oScroll;if(""===i.sX&&""===i.sY)return t.nTable;var r=i.sX,a=i.sY,o=t.oClasses,s=n.children("caption"),l=s.length?s[0]._captionSide:null,d=e(n[0].cloneNode(!1)),u=e(n[0].cloneNode(!1)),c=n.children("tfoot"),h="<div/>",p=function(e){return e?Le(e):null};c.length||(c=null);var m=e(h,{"class":o.sScrollWrapper}).append(e(h,{"class":o.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?p(r):"100%"}).append(e(h,{"class":o.sScrollHeadInner}).css({"box-sizing":"content-box",width:i.sXInner||"100%"}).append(d.removeAttr("id").css("margin-left",0).append("top"===l?s:null).append(n.children("thead"))))).append(e(h,{"class":o.sScrollBody}).css({position:"relative",overflow:"auto",width:p(r)}).append(n));c&&m.append(e(h,{"class":o.sScrollFoot}).css({overflow:"hidden",border:0,width:r?p(r):"100%"}).append(e(h,{"class":o.sScrollFootInner}).append(u.removeAttr("id").css("margin-left",0).append("bottom"===l?s:null).append(n.children("tfoot")))));var f=m.children(),_=f[0],y=f[1],g=c?f[2]:null;return r&&e(y).on("scroll.DT",function(e){var t=this.scrollLeft;_.scrollLeft=t,c&&(g.scrollLeft=t)}),e(y).css(a&&i.bCollapse?"max-height":"height",a),t.nScrollHead=_,t.nScrollBody=y,t.nScrollFoot=g,t.aoDrawCallback.push({fn:fe,sName:"scrolling"}),m[0]}function fe(t){var n,r,a,o,s,l,d,u,c,h=t.oScroll,f=h.sX,_=h.sXInner,y=h.sY,g=h.iBarWidth,v=e(t.nScrollHead),M=v[0].style,L=v.children("div"),b=L[0].style,w=L.children("table"),D=t.nScrollBody,k=e(D),T=D.style,Y=e(t.nScrollFoot),S=Y.children("div"),x=S.children("table"),C=e(t.nTHead),E=e(t.nTable),H=E[0],A=H.style,j=t.nTFoot?e(t.nTFoot):null,P=t.oBrowser,I=P.bScrollOversize,O=st(t.aoColumns,"nTh"),z=[],F=[],W=[],R=[],N=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},q=D.scrollHeight>D.clientHeight;if(t.scrollBarVis!==q&&t.scrollBarVis!==i)return t.scrollBarVis=q,void p(t);t.scrollBarVis=q,E.children("thead, tfoot").remove(),j&&(l=j.clone().prependTo(E),r=j.find("tr"),o=l.find("tr")),s=C.clone().prependTo(E),n=C.find("tr"),a=s.find("tr"),s.find("th, td").removeAttr("tabindex"),f||(T.width="100%",v[0].style.width="100%"),e.each($(t,s),function(e,n){d=m(t,e),n.style.width=t.aoColumns[d].sWidth}),j&&_e(function(e){e.style.width=""},o),c=E.outerWidth(),""===f?(A.width="100%",I&&(E.find("tbody").height()>D.offsetHeight||"scroll"==k.css("overflow-y"))&&(A.width=Le(E.outerWidth()-g)),c=E.outerWidth()):""!==_&&(A.width=Le(_),c=E.outerWidth()),_e(N,a),_e(function(t){W.push(t.innerHTML),z.push(Le(e(t).css("width")))},a),_e(function(t,n){e.inArray(t,O)!==-1&&(t.style.width=z[n])},n),e(a).height(0),j&&(_e(N,o),_e(function(t){R.push(t.innerHTML),F.push(Le(e(t).css("width")))},o),_e(function(e,t){e.style.width=F[t]},r),e(o).height(0)),_e(function(e,t){e.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+W[t]+"</div>",e.style.width=z[t]},a),j&&_e(function(e,t){e.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+R[t]+"</div>",e.style.width=F[t]},o),E.outerWidth()<c?(u=D.scrollHeight>D.offsetHeight||"scroll"==k.css("overflow-y")?c+g:c,I&&(D.scrollHeight>D.offsetHeight||"scroll"==k.css("overflow-y"))&&(A.width=Le(u-g)),""!==f&&""===_||He(t,1,"Possible column misalignment",6)):u="100%",T.width=Le(u),M.width=Le(u),j&&(t.nScrollFoot.style.width=Le(u)),y||I&&(T.height=Le(H.offsetHeight+g));var B=E.outerWidth();w[0].style.width=Le(B),b.width=Le(B);var U=E.height()>D.clientHeight||"scroll"==k.css("overflow-y"),J="padding"+(P.bScrollbarLeft?"Left":"Right");b[J]=U?g+"px":"0px",j&&(x[0].style.width=Le(B),S[0].style.width=Le(B),S[0].style[J]=U?g+"px":"0px"),E.children("colgroup").insertBefore(E.children("thead")),k.scroll(),!t.bSorted&&!t.bFiltered||t._drawHold||(D.scrollTop=0)}function _e(e,t,n){for(var i,r,a=0,o=0,s=t.length;o<s;){for(i=t[o].firstChild,r=n?n[o].firstChild:null;i;)1===i.nodeType&&(n?e(i,r,a):e(i,a),a++),i=i.nextSibling,r=n?r.nextSibling:null;o++}}function ye(n){var i,r,a,o=n.nTable,s=n.aoColumns,l=n.oScroll,d=l.sY,u=l.sX,c=l.sXInner,h=s.length,f=y(n,"bVisible"),g=e("th",n.nTHead),v=o.getAttribute("width"),M=o.parentNode,L=!1,b=n.oBrowser,w=b.bScrollOversize,D=o.style.width;for(D&&D.indexOf("%")!==-1&&(v=D),i=0;i<f.length;i++)r=s[f[i]],null!==r.sWidth&&(r.sWidth=ge(r.sWidthOrig,M),L=!0);if(w||!L&&!u&&!d&&h==_(n)&&h==g.length)for(i=0;i<h;i++){var k=m(n,i);null!==k&&(s[k].sWidth=Le(g.eq(i).width()))}else{var T=e(o).clone().css("visibility","hidden").removeAttr("id");T.find("tbody tr").remove();var Y=e("<tr/>").appendTo(T.find("tbody"));for(T.find("thead, tfoot").remove(),T.append(e(n.nTHead).clone()).append(e(n.nTFoot).clone()),T.find("tfoot th, tfoot td").css("width",""),g=$(n,T.find("thead")[0]),i=0;i<f.length;i++)r=s[f[i]],g[i].style.width=null!==r.sWidthOrig&&""!==r.sWidthOrig?Le(r.sWidthOrig):"",r.sWidthOrig&&u&&e(g[i]).append(e("<div/>").css({width:r.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(n.aoData.length)for(i=0;i<f.length;i++)a=f[i],r=s[a],e(ve(n,a)).clone(!1).append(r.sContentPadding).appendTo(Y);e("[name]",T).removeAttr("name");var S=e("<div/>").css(u||d?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(T).appendTo(M);u&&c?T.width(c):u?(T.css("width","auto"),T.removeAttr("width"),T.width()<M.clientWidth&&v&&T.width(M.clientWidth)):d?T.width(M.clientWidth):v&&T.width(v);var x=0;for(i=0;i<f.length;i++){var C=e(g[i]),E=C.outerWidth()-C.width(),H=b.bBounding?Math.ceil(g[i].getBoundingClientRect().width):C.outerWidth();x+=H,s[f[i]].sWidth=Le(H-E)}o.style.width=Le(x),S.remove()}if(v&&(o.style.width=Le(v)),(v||u)&&!n._reszEvt){var A=function(){e(t).on("resize.DT-"+n.sInstance,Mt(function(){p(n)}))};w?setTimeout(A,1e3):A(),n._reszEvt=!0}}function ge(t,i){if(!t)return 0;var r=e("<div/>").css("width",Le(t)).appendTo(i||n.body),a=r[0].offsetWidth;return r.remove(),a}function ve(t,n){var i=Me(t,n);if(i<0)return null;var r=t.aoData[i];return r.nTr?r.anCells[n]:e("<td/>").html(D(t,i,n,"display"))[0]}function Me(e,t){for(var n,i=-1,r=-1,a=0,o=e.aoData.length;a<o;a++)n=D(e,a,t,"display")+"",n=n.replace(vt,""),n=n.replace(/&nbsp;/g," "),n.length>i&&(i=n.length,r=a);return r}function Le(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function be(t){var n,r,a,o,s,l,d,u=[],c=t.aoColumns,h=t.aaSortingFixed,p=e.isPlainObject(h),m=[],f=function(t){t.length&&!e.isArray(t[0])?m.push(t):e.merge(m,t)};for(e.isArray(h)&&f(h),p&&h.pre&&f(h.pre),f(t.aaSorting),p&&h.post&&f(h.post),n=0;n<m.length;n++)for(d=m[n][0],o=c[d].aDataSort,r=0,a=o.length;r<a;r++)s=o[r],l=c[s].sType||"string",m[n]._idx===i&&(m[n]._idx=e.inArray(m[n][1],c[s].asSorting)),u.push({src:d,col:s,dir:m[n][1],index:m[n]._idx,type:l,formatter:Ve.ext.type.order[l+"-pre"]});return u}function we(e){var t,n,i,r,a,o=[],s=Ve.ext.type.order,l=e.aoData,d=(e.aoColumns,0),u=e.aiDisplayMaster;for(g(e),a=be(e),t=0,n=a.length;t<n;t++)r=a[t],r.formatter&&d++,Se(e,r.col);if("ssp"!=We(e)&&0!==a.length){for(t=0,i=u.length;t<i;t++)o[u[t]]=t;d===a.length?u.sort(function(e,t){var n,i,r,s,d,u=a.length,c=l[e]._aSortData,h=l[t]._aSortData;for(r=0;r<u;r++)if(d=a[r],n=c[d.col],i=h[d.col],s=n<i?-1:n>i?1:0,0!==s)return"asc"===d.dir?s:-s;return n=o[e],i=o[t],n<i?-1:n>i?1:0}):u.sort(function(e,t){var n,i,r,d,u,c,h=a.length,p=l[e]._aSortData,m=l[t]._aSortData;for(r=0;r<h;r++)if(u=a[r],n=p[u.col],i=m[u.col],c=s[u.type+"-"+u.dir]||s["string-"+u.dir],d=c(n,i),0!==d)return d;return n=o[e],i=o[t],n<i?-1:n>i?1:0})}e.bSorted=!0}function De(e){for(var t,n,i=e.aoColumns,r=be(e),a=e.oLanguage.oAria,o=0,s=i.length;o<s;o++){var l=i[o],d=l.asSorting,u=l.sTitle.replace(/<.*?>/g,""),c=l.nTh;c.removeAttribute("aria-sort"),l.bSortable?(r.length>0&&r[0].col==o?(c.setAttribute("aria-sort","asc"==r[0].dir?"ascending":"descending"),n=d[r[0].index+1]||d[0]):n=d[0],t=u+("asc"===n?a.sSortAscending:a.sSortDescending)):t=u,c.setAttribute("aria-label",t)}}function ke(t,n,r,a){var o,s=t.aoColumns[n],l=t.aaSorting,d=s.asSorting,u=function(t,n){var r=t._idx;return r===i&&(r=e.inArray(t[1],d)),r+1<d.length?r+1:n?null:0};if("number"==typeof l[0]&&(l=t.aaSorting=[l]),r&&t.oFeatures.bSortMulti){var c=e.inArray(n,st(l,"0"));c!==-1?(o=u(l[c],!0),null===o&&1===l.length&&(o=0),null===o?l.splice(c,1):(l[c][1]=d[o],l[c]._idx=o)):(l.push([n,d[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==n?(o=u(l[0]),l.length=1,l[0][1]=d[o],l[0]._idx=o):(l.length=0,l.push([n,d[0]]),l[0]._idx=0);F(t),"function"==typeof a&&a(t)}function Te(e,t,n,i){var r=e.aoColumns[n];Pe(t,{},function(t){r.bSortable!==!1&&(e.oFeatures.bProcessing?(pe(e,!0),setTimeout(function(){ke(e,n,t.shiftKey,i),"ssp"!==We(e)&&pe(e,!1)},0)):ke(e,n,t.shiftKey,i))})}function Ye(t){var n,i,r,a=t.aLastSort,o=t.oClasses.sSortColumn,s=be(t),l=t.oFeatures;if(l.bSort&&l.bSortClasses){for(n=0,i=a.length;n<i;n++)r=a[n].src,e(st(t.aoData,"anCells",r)).removeClass(o+(n<2?n+1:3));for(n=0,i=s.length;n<i;n++)r=s[n].src,e(st(t.aoData,"anCells",r)).addClass(o+(n<2?n+1:3))}t.aLastSort=s}function Se(e,t){var n,i=e.aoColumns[t],r=Ve.ext.order[i.sSortDataType];r&&(n=r.call(e.oInstance,e,t,f(e,t)));for(var a,o,s=Ve.ext.type.order[i.sType+"-pre"],l=0,d=e.aoData.length;l<d;l++)a=e.aoData[l],a._aSortData||(a._aSortData=[]),a._aSortData[t]&&!r||(o=r?n[l]:D(e,l,t,"sort"),a._aSortData[t]=s?s(o):o)}function xe(t){if(t.oFeatures.bStateSave&&!t.bDestroying){var n={time:+new Date,start:t._iDisplayStart,length:t._iDisplayLength,order:e.extend(!0,[],t.aaSorting),search:te(t.oPreviousSearch),columns:e.map(t.aoColumns,function(e,n){return{visible:e.bVisible,search:te(t.aoPreSearchCols[n])}})};Oe(t,"aoStateSaveParams","stateSaveParams",[t,n]),t.oSavedState=n,t.fnStateSaveCallback.call(t.oInstance,t,n)}}function Ce(t,n,r){var a,o,s=t.aoColumns,l=function(n){if(!n||!n.time)return void r();var l=Oe(t,"aoStateLoadParams","stateLoadParams",[t,d]);if(e.inArray(!1,l)!==-1)return void r();var u=t.iStateDuration;if(u>0&&n.time<+new Date-1e3*u)return void r();if(n.columns&&s.length!==n.columns.length)return void r();if(t.oLoadedState=e.extend(!0,{},d),n.start!==i&&(t._iDisplayStart=n.start,t.iInitDisplayStart=n.start),n.length!==i&&(t._iDisplayLength=n.length),n.order!==i&&(t.aaSorting=[],e.each(n.order,function(e,n){t.aaSorting.push(n[0]>=s.length?[0,n[1]]:n)})),n.search!==i&&e.extend(t.oPreviousSearch,ne(n.search)),
n.columns)for(a=0,o=n.columns.length;a<o;a++){var c=n.columns[a];c.visible!==i&&(s[a].bVisible=c.visible),c.search!==i&&e.extend(t.aoPreSearchCols[a],ne(c.search))}Oe(t,"aoStateLoaded","stateLoaded",[t,d]),r()};if(!t.oFeatures.bStateSave)return void r();var d=t.fnStateLoadCallback.call(t.oInstance,t,l);d!==i&&l(d)}function Ee(t){var n=Ve.settings,i=e.inArray(t,st(n,"nTable"));return i!==-1?n[i]:null}function He(e,n,i,r){if(i="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+i,r&&(i+=". For more information about this error, please see http://datatables.net/tn/"+r),n)t.console&&console.log&&console.log(i);else{var a=Ve.ext,o=a.sErrMode||a.errMode;if(e&&Oe(e,null,"error",[e,r,i]),"alert"==o)alert(i);else{if("throw"==o)throw new Error(i);"function"==typeof o&&o(e,r,i)}}}function Ae(t,n,r,a){return e.isArray(r)?void e.each(r,function(i,r){e.isArray(r)?Ae(t,n,r[0],r[1]):Ae(t,n,r)}):(a===i&&(a=r),void(n[r]!==i&&(t[a]=n[r])))}function je(t,n,i){var r;for(var a in n)n.hasOwnProperty(a)&&(r=n[a],e.isPlainObject(r)?(e.isPlainObject(t[a])||(t[a]={}),e.extend(!0,t[a],r)):i&&"data"!==a&&"aaData"!==a&&e.isArray(r)?t[a]=r.slice():t[a]=r);return t}function Pe(t,n,i){e(t).on("click.DT",n,function(e){t.blur(),i(e)}).on("keypress.DT",n,function(e){13===e.which&&(e.preventDefault(),i(e))}).on("selectstart.DT",function(){return!1})}function Ie(e,t,n,i){n&&e[t].push({fn:n,sName:i})}function Oe(t,n,i,r){var a=[];if(n&&(a=e.map(t[n].slice().reverse(),function(e,n){return e.fn.apply(t.oInstance,r)})),null!==i){var o=e.Event(i+".dt");e(t.nTable).trigger(o,r),a.push(o.result)}return a}function ze(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),i=e._iDisplayLength;t>=n&&(t=n-i),t-=t%i,(i===-1||t<0)&&(t=0),e._iDisplayStart=t}function Fe(t,n){var i=t.renderer,r=Ve.ext.renderer[n];return e.isPlainObject(i)&&i[n]?r[i[n]]||r._:"string"==typeof i?r[i]||r._:r._}function We(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}function Re(e,t){var n=[],i=Nt.numbers_length,r=Math.floor(i/2);return t<=i?n=dt(0,t):e<=r?(n=dt(0,i-2),n.push("ellipsis"),n.push(t-1)):e>=t-1-r?(n=dt(t-(i-2),t),n.splice(0,0,"ellipsis"),n.splice(0,0,0)):(n=dt(e-r+2,e+r-1),n.push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis"),n.splice(0,0,0)),n.DT_el="span",n}function $e(t){e.each({num:function(e){return qt(e,t)},"num-fmt":function(e){return qt(e,t,et)},"html-num":function(e){return qt(e,t,Ke)},"html-num-fmt":function(e){return qt(e,t,Ke,et)}},function(e,n){qe.type.order[e+t+"-pre"]=n,e.match(/^html\-/)&&(qe.type.search[e+t]=qe.type.search.html)})}function Ne(e){return function(){var t=[Ee(this[Ve.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Ve.ext.internal[e].apply(this,t)}}var qe,Be,Ue,Je,Ve=function(t){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new Be(e?Ee(this[qe.iApiIndex]):this)},this.fnAddData=function(t,n){var r=this.api(!0),a=e.isArray(t)&&(e.isArray(t[0])||e.isPlainObject(t[0]))?r.rows.add(t):r.row.add(t);return(n===i||n)&&r.draw(),a.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),n=t.settings()[0],r=n.oScroll;e===i||e?t.draw(!1):""===r.sX&&""===r.sY||fe(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===i||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var r=this.api(!0),a=r.rows(e),o=a.settings()[0],s=o.aoData[a[0][0]];return a.remove(),t&&t.call(this,o,s),(n===i||n)&&r.draw(),s},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,r,a,o){var s=this.api(!0);null===t||t===i?s.search(e,n,r,o):s.column(t).search(e,n,r,o),s.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e!==i){var r=e.nodeName?e.nodeName.toLowerCase():"";return t!==i||"td"==r||"th"==r?n.cell(e,t).data():n.row(e).data()||null}return n.data().toArray()},this.fnGetNodes=function(e){var t=this.api(!0);return e!==i?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"==n||"TH"==n){var i=t.cell(e).index();return[i.row,i.columnVisible,i.column]}return null},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===i||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var r=this.api(!0).column(e).visible(t);(n===i||n)&&r.columns.adjust().draw()},this.fnSettings=function(){return Ee(this[qe.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,r,a){var o=this.api(!0);return n===i||null===n?o.row(t).data(e):o.cell(t,n).data(e),(a===i||a)&&o.columns.adjust(),(r===i||r)&&o.draw(),0},this.fnVersionCheck=qe.fnVersionCheck;var n=this,r=t===i,u=this.length;r&&(t={}),this.oApi=this.internal=qe.internal;for(var p in Ve.ext.internal)p&&(this[p]=Ne(p));return this.each(function(){var p,m={},f=u>1?je(m,t,!0):t,_=0,y=this.getAttribute("id"),g=!1,b=Ve.defaults,w=e(this);if("table"!=this.nodeName.toLowerCase())return void He(null,0,"Non-table node initialisation ("+this.nodeName+")",2);s(b),l(b.column),a(b,b,!0),a(b.column,b.column,!0),a(b,e.extend(f,w.data()));var D=Ve.settings;for(_=0,p=D.length;_<p;_++){var k=D[_];if(k.nTable==this||k.nTHead.parentNode==this||k.nTFoot&&k.nTFoot.parentNode==this){var T=f.bRetrieve!==i?f.bRetrieve:b.bRetrieve,S=f.bDestroy!==i?f.bDestroy:b.bDestroy;if(r||T)return k.oInstance;if(S){k.oInstance.fnDestroy();break}return void He(k,0,"Cannot reinitialise DataTable",3)}if(k.sTableId==this.id){D.splice(_,1);break}}null!==y&&""!==y||(y="DataTables_Table_"+Ve.ext._unique++,this.id=y);var x=e.extend(!0,{},Ve.models.oSettings,{sDestroyWidth:w[0].style.width,sInstance:y,sTableId:y});x.nTable=this,x.oApi=n.internal,x.oInit=f,D.push(x),x.oInstance=1===n.length?n:w.dataTable(),s(f),f.oLanguage&&o(f.oLanguage),f.aLengthMenu&&!f.iDisplayLength&&(f.iDisplayLength=e.isArray(f.aLengthMenu[0])?f.aLengthMenu[0][0]:f.aLengthMenu[0]),f=je(e.extend(!0,{},b),f),Ae(x.oFeatures,f,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),Ae(x,f,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),Ae(x.oScroll,f,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),Ae(x.oLanguage,f,"fnInfoCallback"),Ie(x,"aoDrawCallback",f.fnDrawCallback,"user"),Ie(x,"aoServerParams",f.fnServerParams,"user"),Ie(x,"aoStateSaveParams",f.fnStateSaveParams,"user"),Ie(x,"aoStateLoadParams",f.fnStateLoadParams,"user"),Ie(x,"aoStateLoaded",f.fnStateLoaded,"user"),Ie(x,"aoRowCallback",f.fnRowCallback,"user"),Ie(x,"aoRowCreatedCallback",f.fnCreatedRow,"user"),Ie(x,"aoHeaderCallback",f.fnHeaderCallback,"user"),Ie(x,"aoFooterCallback",f.fnFooterCallback,"user"),Ie(x,"aoInitComplete",f.fnInitComplete,"user"),Ie(x,"aoPreDrawCallback",f.fnPreDrawCallback,"user"),x.rowIdFn=Y(f.rowId),d(x);var C=x.oClasses;if(f.bJQueryUI?(e.extend(C,Ve.ext.oJUIClasses,f.oClasses),f.sDom===b.sDom&&"lfrtip"===b.sDom&&(x.sDom='<"H"lfr>t<"F"ip>'),x.renderer?e.isPlainObject(x.renderer)&&!x.renderer.header&&(x.renderer.header="jqueryui"):x.renderer="jqueryui"):e.extend(C,Ve.ext.classes,f.oClasses),w.addClass(C.sTable),x.iInitDisplayStart===i&&(x.iInitDisplayStart=f.iDisplayStart,x._iDisplayStart=f.iDisplayStart),null!==f.iDeferLoading){x.bDeferLoading=!0;var E=e.isArray(f.iDeferLoading);x._iRecordsDisplay=E?f.iDeferLoading[0]:f.iDeferLoading,x._iRecordsTotal=E?f.iDeferLoading[1]:f.iDeferLoading}var H=x.oLanguage;e.extend(!0,H,f.oLanguage),H.sUrl&&(e.ajax({dataType:"json",url:H.sUrl,success:function(t){o(t),a(b.oLanguage,t),e.extend(!0,H,t),oe(x)},error:function(){oe(x)}}),g=!0),null===f.asStripeClasses&&(x.asStripeClasses=[C.sStripeOdd,C.sStripeEven]);var A=x.asStripeClasses,j=w.children("tbody").find("tr").eq(0);e.inArray(!0,e.map(A,function(e,t){return j.hasClass(e)}))!==-1&&(e("tbody tr",this).removeClass(A.join(" ")),x.asDestroyStripes=A.slice());var P,I=[],O=this.getElementsByTagName("thead");if(0!==O.length&&(R(x.aoHeader,O[0]),I=$(x)),null===f.aoColumns)for(P=[],_=0,p=I.length;_<p;_++)P.push(null);else P=f.aoColumns;for(_=0,p=P.length;_<p;_++)c(x,I?I[_]:null);if(v(x,f.aoColumnDefs,P,function(e,t){h(x,e,t)}),j.length){var z=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};e(j[0]).children("th, td").each(function(e,t){var n=x.aoColumns[e];if(n.mData===e){var r=z(t,"sort")||z(t,"order"),a=z(t,"filter")||z(t,"search");null===r&&null===a||(n.mData={_:e+".display",sort:null!==r?e+".@data-"+r:i,type:null!==r?e+".@data-"+r:i,filter:null!==a?e+".@data-"+a:i},h(x,e))}})}var F=x.oFeatures,W=function(){if(f.aaSorting===i){var t=x.aaSorting;for(_=0,p=t.length;_<p;_++)t[_][1]=x.aoColumns[_].asSorting[0]}Ye(x),F.bSort&&Ie(x,"aoDrawCallback",function(){if(x.bSorted){var t=be(x),n={};e.each(t,function(e,t){n[t.src]=t.dir}),Oe(x,null,"order",[x,t,n]),De(x)}}),Ie(x,"aoDrawCallback",function(){(x.bSorted||"ssp"===We(x)||F.bDeferRender)&&Ye(x)},"sc");var n=w.children("caption").each(function(){this._captionSide=e(this).css("caption-side")}),r=w.children("thead");0===r.length&&(r=e("<thead/>").appendTo(w)),x.nTHead=r[0];var a=w.children("tbody");0===a.length&&(a=e("<tbody/>").appendTo(w)),x.nTBody=a[0];var o=w.children("tfoot");if(0===o.length&&n.length>0&&(""!==x.oScroll.sX||""!==x.oScroll.sY)&&(o=e("<tfoot/>").appendTo(w)),0===o.length||0===o.children().length?w.addClass(C.sNoFooter):o.length>0&&(x.nTFoot=o[0],R(x.aoFooter,x.nTFoot)),f.aaData)for(_=0;_<f.aaData.length;_++)M(x,f.aaData[_]);else(x.bDeferLoading||"dom"==We(x))&&L(x,e(x.nTBody).children("tr"));x.aiDisplay=x.aiDisplayMaster.slice(),x.bInitialised=!0,g===!1&&oe(x)};f.bStateSave?(F.bStateSave=!0,Ie(x,"aoDrawCallback",xe,"state_save"),Ce(x,f,W)):W()}),n=null,this},Ge={},Xe=/[\r\n]/g,Ke=/<.*?>/g,Qe=/^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,Ze=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),et=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi,tt=function(e){return!e||e===!0||"-"===e},nt=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},it=function(e,t){return Ge[t]||(Ge[t]=new RegExp(_t(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(Ge[t],"."):e},rt=function(e,t,n){var i="string"==typeof e;return!!tt(e)||(t&&i&&(e=it(e,t)),n&&i&&(e=e.replace(et,"")),!isNaN(parseFloat(e))&&isFinite(e))},at=function(e){return tt(e)||"string"==typeof e},ot=function(e,t,n){if(tt(e))return!0;var i=at(e);return i?!!rt(ct(e),t,n)||null:null},st=function(e,t,n){var r=[],a=0,o=e.length;if(n!==i)for(;a<o;a++)e[a]&&e[a][t]&&r.push(e[a][t][n]);else for(;a<o;a++)e[a]&&r.push(e[a][t]);return r},lt=function(e,t,n,r){var a=[],o=0,s=t.length;if(r!==i)for(;o<s;o++)e[t[o]][n]&&a.push(e[t[o]][n][r]);else for(;o<s;o++)a.push(e[t[o]][n]);return a},dt=function(e,t){var n,r=[];t===i?(t=0,n=e):(n=t,t=e);for(var a=t;a<n;a++)r.push(a);return r},ut=function(e){for(var t=[],n=0,i=e.length;n<i;n++)e[n]&&t.push(e[n]);return t},ct=function(e){return e.replace(Ke,"")},ht=function(e){var t,n,i,r=[],a=e.length,o=0;e:for(n=0;n<a;n++){for(t=e[n],i=0;i<o;i++)if(r[i]===t)continue e;r.push(t),o++}return r};Ve.util={throttle:function(e,t){var n,r,a=t!==i?t:200;return function(){var t=this,o=+new Date,s=arguments;n&&o<n+a?(clearTimeout(r),r=setTimeout(function(){n=i,e.apply(t,s)},a)):(n=o,e.apply(t,s))}},escapeRegex:function(e){return e.replace(Ze,"\\$1")}};var pt=function(e,t,n){e[t]!==i&&(e[n]=e[t])},mt=/\[.*?\]$/,ft=/\(\)$/,_t=Ve.util.escapeRegex,yt=e("<div>")[0],gt=yt.textContent!==i,vt=/<.*?>/g,Mt=Ve.util.throttle,Lt=[],bt=Array.prototype,wt=function(t){var n,i,r=Ve.settings,a=e.map(r,function(e,t){return e.nTable});return t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?(n=e.inArray(t,a),n!==-1?[r[n]]:null):t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?i=e(t):t instanceof e&&(i=t),i?i.map(function(t){return n=e.inArray(this,a),n!==-1?r[n]:null}).toArray():void 0):[]};Be=function(t,n){if(!(this instanceof Be))return new Be(t,n);var i=[],r=function(e){var t=wt(e);t&&(i=i.concat(t))};if(e.isArray(t))for(var a=0,o=t.length;a<o;a++)r(t[a]);else r(t);this.context=ht(i),n&&e.merge(this,n),this.selector={rows:null,cols:null,opts:null},Be.extend(this,this,Lt)},Ve.Api=Be,e.extend(Be.prototype,{any:function(){return 0!==this.count()},concat:bt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;t<n;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new Be(t[e],this[e]):null},filter:function(e){var t=[];if(bt.filter)t=bt.filter.call(this,e,this);else for(var n=0,i=this.length;n<i;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new Be(this.context,t)},flatten:function(){var e=[];return new Be(this.context,e.concat.apply(e,this.toArray()))},join:bt.join,indexOf:bt.indexOf||function(e,t){for(var n=t||0,i=this.length;n<i;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,r){var a,o,s,l,d,u,c,h,p=[],m=this.context,f=this.selector;for("string"==typeof e&&(r=n,n=t,t=e,e=!1),o=0,s=m.length;o<s;o++){var _=new Be(m[o]);if("table"===t)a=n.call(_,m[o],o),a!==i&&p.push(a);else if("columns"===t||"rows"===t)a=n.call(_,m[o],this[o],o),a!==i&&p.push(a);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(c=this[o],"column-rows"===t&&(u=xt(m[o],f.opts)),l=0,d=c.length;l<d;l++)h=c[l],a="cell"===t?n.call(_,m[o],h.row,h.column,o,l):n.call(_,m[o],h,o,l,u),a!==i&&p.push(a)}if(p.length||r){var y=new Be(m,e?p.concat.apply([],p):p),g=y.selector;return g.rows=f.rows,g.cols=f.cols,g.opts=f.opts,y}return this},lastIndexOf:bt.lastIndexOf||function(e,t){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(bt.map)t=bt.map.call(this,e,this);else for(var n=0,i=this.length;n<i;n++)t.push(e.call(this,this[n],n));return new Be(this.context,t)},pluck:function(e){return this.map(function(t){return t[e]})},pop:bt.pop,push:bt.push,reduce:bt.reduce||function(e,t){return u(this,e,t,0,this.length,1)},reduceRight:bt.reduceRight||function(e,t){return u(this,e,t,this.length-1,-1,-1)},reverse:bt.reverse,selector:null,shift:bt.shift,sort:bt.sort,splice:bt.splice,toArray:function(){return bt.slice.call(this)},to$:function(){return e(this)},toJQuery:function(){return e(this)},unique:function(){return new Be(this.context,ht(this))},unshift:bt.unshift}),Be.extend=function(t,n,i){if(i.length&&n&&(n instanceof Be||n.__dt_wrapper)){var r,a,o,s=function(e,t,n){return function(){var i=t.apply(e,arguments);return Be.extend(i,i,n.methodExt),i}};for(r=0,a=i.length;r<a;r++)o=i[r],n[o.name]="function"==typeof o.val?s(t,o.val,o):e.isPlainObject(o.val)?{}:o.val,n[o.name].__dt_wrapper=!0,Be.extend(t,n[o.name],o.propExt)}},Be.register=Ue=function(t,n){if(e.isArray(t))for(var i=0,r=t.length;i<r;i++)Be.register(t[i],n);else{var a,o,s,l,d=t.split("."),u=Lt,c=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n].name===t)return e[n];return null};for(a=0,o=d.length;a<o;a++){l=d[a].indexOf("()")!==-1,s=l?d[a].replace("()",""):d[a];var h=c(u,s);h||(h={name:s,val:{},methodExt:[],propExt:[]},u.push(h)),a===o-1?h.val=n:u=l?h.methodExt:h.propExt}}},Be.registerPlural=Je=function(t,n,r){Be.register(t,r),Be.register(n,function(){var t=r.apply(this,arguments);return t===this?this:t instanceof Be?t.length?e.isArray(t[0])?new Be(t.context,t[0]):t[0]:i:t})};var Dt=function(t,n){if("number"==typeof t)return[n[t]];var i=e.map(n,function(e,t){return e.nTable});return e(i).filter(t).map(function(t){var r=e.inArray(this,i);return n[r]}).toArray()};Ue("tables()",function(e){return e?new Be(Dt(e,this.context)):this}),Ue("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new Be(n[0]):t}),Je("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),Je("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),Je("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),Je("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),Je("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),Ue("draw()",function(e){return this.iterator("table",function(t){"page"===e?z(t):("string"==typeof e&&(e="full-hold"!==e),F(t,e===!1))})}),Ue("page()",function(e){return e===i?this.page.info().page:this.iterator("table",function(t){ce(t,e)})}),Ue("page.info()",function(e){if(0===this.context.length)return i;var t=this.context[0],n=t._iDisplayStart,r=t.oFeatures.bPaginate?t._iDisplayLength:-1,a=t.fnRecordsDisplay(),o=r===-1;return{page:o?0:Math.floor(n/r),pages:o?1:Math.ceil(a/r),start:n,end:t.fnDisplayEnd(),length:r,recordsTotal:t.fnRecordsTotal(),recordsDisplay:a,serverSide:"ssp"===We(t)}}),Ue("page.len()",function(e){return e===i?0!==this.context.length?this.context[0]._iDisplayLength:i:this.iterator("table",function(t){le(t,e)})});var kt=function(e,t,n){if(n){var i=new Be(e);i.one("draw",function(){n(i.ajax.json())})}if("ssp"==We(e))F(e,t);else{pe(e,!0);var r=e.jqXHR;r&&4!==r.readyState&&r.abort(),N(e,[],function(n){C(e);for(var i=J(e,n),r=0,a=i.length;r<a;r++)M(e,i[r]);F(e,t),pe(e,!1)})}};Ue("ajax.json()",function(){var e=this.context;if(e.length>0)return e[0].json}),Ue("ajax.params()",function(){var e=this.context;if(e.length>0)return e[0].oAjaxData}),Ue("ajax.reload()",function(e,t){return this.iterator("table",function(n){kt(n,t===!1,e)})}),Ue("ajax.url()",function(t){var n=this.context;return t===i?0===n.length?i:(n=n[0],n.ajax?e.isPlainObject(n.ajax)?n.ajax.url:n.ajax:n.sAjaxSource):this.iterator("table",function(n){e.isPlainObject(n.ajax)?n.ajax.url=t:n.ajax=t})}),Ue("ajax.url().load()",function(e,t){return this.iterator("table",function(n){kt(n,t===!1,e)})});var Tt=function(t,n,r,a,o){var s,l,d,u,c,h,p=[],m=typeof n;for(n&&"string"!==m&&"function"!==m&&n.length!==i||(n=[n]),d=0,u=n.length;d<u;d++)for(l=n[d]&&n[d].split&&!n[d].match(/[\[\(:]/)?n[d].split(","):[n[d]],c=0,h=l.length;c<h;c++)s=r("string"==typeof l[c]?e.trim(l[c]):l[c]),s&&s.length&&(p=p.concat(s));var f=qe.selector[t];if(f.length)for(d=0,u=f.length;d<u;d++)p=f[d](a,o,p);return ht(p)},Yt=function(t){return t||(t={}),t.filter&&t.search===i&&(t.search=t.filter),e.extend({search:"none",order:"current",page:"all"},t)},St=function(e){for(var t=0,n=e.length;t<n;t++)if(e[t].length>0)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},xt=function(t,n){var i,r,a,o=[],s=t.aiDisplay,l=t.aiDisplayMaster,d=n.search,u=n.order,c=n.page;if("ssp"==We(t))return"removed"===d?[]:dt(0,l.length);if("current"==c)for(i=t._iDisplayStart,r=t.fnDisplayEnd();i<r;i++)o.push(s[i]);else if("current"==u||"applied"==u)o="none"==d?l.slice():"applied"==d?s.slice():e.map(l,function(t,n){return e.inArray(t,s)===-1?t:null});else if("index"==u||"original"==u)for(i=0,r=t.aoData.length;i<r;i++)"none"==d?o.push(i):(a=e.inArray(i,s),(a===-1&&"removed"==d||a>=0&&"applied"==d)&&o.push(i));return o},Ct=function(t,n,r){var a,o=function(n){var o=nt(n);if(null!==o&&!r)return[o];if(a||(a=xt(t,r)),null!==o&&e.inArray(o,a)!==-1)return[o];if(null===n||n===i||""===n)return a;if("function"==typeof n)return e.map(a,function(e){var i=t.aoData[e];return n(e,i._aData,i.nTr)?e:null});var s=ut(lt(t.aoData,a,"nTr"));if(n.nodeName){if(n._DT_RowIndex!==i)return[n._DT_RowIndex];if(n._DT_CellIndex)return[n._DT_CellIndex.row];var l=e(n).closest("*[data-dt-row]");return l.length?[l.data("dt-row")]:[]}if("string"==typeof n&&"#"===n.charAt(0)){var d=t.aIds[n.replace(/^#/,"")];if(d!==i)return[d.idx]}return e(s).filter(n).map(function(){return this._DT_RowIndex}).toArray()};return Tt("row",n,o,t,r)};Ue("rows()",function(t,n){t===i?t="":e.isPlainObject(t)&&(n=t,t=""),n=Yt(n);var r=this.iterator("table",function(e){return Ct(e,t,n)},1);return r.selector.rows=t,r.selector.opts=n,r}),Ue("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||i},1)}),Ue("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return lt(e.aoData,t,"_aData")},1)}),Je("rows().cache()","row().cache()",function(e){return this.iterator("row",function(t,n){var i=t.aoData[n];return"search"===e?i._aFilterData:i._aSortData},1)}),Je("rows().invalidate()","row().invalidate()",function(e){return this.iterator("row",function(t,n){H(t,n,e)})}),Je("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),Je("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,i=0,r=n.length;i<r;i++)for(var a=0,o=this[i].length;a<o;a++){var s=n[i].rowIdFn(n[i].aoData[this[i][a]]._aData);t.push((e===!0?"#":"")+s)}return new Be(n,t)}),Je("rows().remove()","row().remove()",function(){var e=this;return this.iterator("row",function(t,n,r){var a,o,s,l,d,u,c=t.aoData,h=c[n];for(c.splice(n,1),a=0,o=c.length;a<o;a++)if(d=c[a],u=d.anCells,null!==d.nTr&&(d.nTr._DT_RowIndex=a),null!==u)for(s=0,l=u.length;s<l;s++)u[s]._DT_CellIndex.row=a;E(t.aiDisplayMaster,n),E(t.aiDisplay,n),E(e[r],n,!1),ze(t);var p=t.rowIdFn(h._aData);p!==i&&delete t.aIds[p]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;t<n;t++)e.aoData[t].idx=t}),this}),Ue("rows.add()",function(t){var n=this.iterator("table",function(e){var n,i,r,a=[];for(i=0,r=t.length;i<r;i++)n=t[i],n.nodeName&&"TR"===n.nodeName.toUpperCase()?a.push(L(e,n)[0]):a.push(M(e,n));return a},1),i=this.rows(-1);return i.pop(),e.merge(i,n),i}),Ue("row()",function(e,t){return St(this.rows(e,t))}),Ue("row().data()",function(e){var t=this.context;return e===i?t.length&&this.length?t[0].aoData[this[0]]._aData:i:(t[0].aoData[this[0]]._aData=e,H(t[0],this[0],"data"),this)}),Ue("row().node()",function(){var e=this.context;return e.length&&this.length?e[0].aoData[this[0]].nTr||null:null}),Ue("row.add()",function(t){t instanceof e&&t.length&&(t=t[0]);var n=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?L(e,t)[0]:M(e,t)});return this.row(n[0])});var Et=function(t,n,i,r){var a=[],o=function(n,i){if(e.isArray(n)||n instanceof e)for(var r=0,s=n.length;r<s;r++)o(n[r],i);else if(n.nodeName&&"tr"===n.nodeName.toLowerCase())a.push(n);else{var l=e("<tr><td/></tr>").addClass(i);e("td",l).addClass(i).html(n)[0].colSpan=_(t),a.push(l[0])}};o(i,r),n._details&&n._details.detach(),n._details=e(a),n._detailsShow&&n._details.insertAfter(n.nTr)},Ht=function(e,t){var n=e.context;if(n.length){var r=n[0].aoData[t!==i?t:e[0]];r&&r._details&&(r._details.remove(),r._detailsShow=i,r._details=i)}},At=function(e,t){var n=e.context;if(n.length&&e.length){var i=n[0].aoData[e[0]];i._details&&(i._detailsShow=t,t?i._details.insertAfter(i.nTr):i._details.detach(),jt(n[0]))}},jt=function(e){var t=new Be(e),n=".dt.DT_details",i="draw"+n,r="column-visibility"+n,a="destroy"+n,o=e.aoData;t.off(i+" "+r+" "+a),st(o,"_details").length>0&&(t.on(i,function(n,i){e===i&&t.rows({page:"current"}).eq(0).each(function(e){var t=o[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),t.on(r,function(t,n,i,r){if(e===n)for(var a,s=_(n),l=0,d=o.length;l<d;l++)a=o[l],a._details&&a._details.children("td[colspan]").attr("colspan",s)}),t.on(a,function(n,i){if(e===i)for(var r=0,a=o.length;r<a;r++)o[r]._details&&Ht(t,r)}))},Pt="",It=Pt+"row().child",Ot=It+"()";Ue(Ot,function(e,t){var n=this.context;return e===i?n.length&&this.length?n[0].aoData[this[0]]._details:i:(e===!0?this.child.show():e===!1?Ht(this):n.length&&this.length&&Et(n[0],n[0].aoData[this[0]],e,t),this)}),Ue([It+".show()",Ot+".show()"],function(e){return At(this,!0),this}),Ue([It+".hide()",Ot+".hide()"],function(){return At(this,!1),this}),Ue([It+".remove()",Ot+".remove()"],function(){return Ht(this),this}),Ue(It+".isShown()",function(){var e=this.context;return!(!e.length||!this.length)&&(e[0].aoData[this[0]]._detailsShow||!1)});var zt=/^([^:]+):(name|visIdx|visible)$/,Ft=function(e,t,n,i,r){for(var a=[],o=0,s=r.length;o<s;o++)a.push(D(e,r[o],t));return a},Wt=function(t,n,i){var r=t.aoColumns,a=st(r,"sName"),o=st(r,"nTh"),s=function(n){var s=nt(n);if(""===n)return dt(r.length);if(null!==s)return[s>=0?s:r.length+s];if("function"==typeof n){var l=xt(t,i);return e.map(r,function(e,i){return n(i,Ft(t,i,0,0,l),o[i])?i:null})}var d="string"==typeof n?n.match(zt):"";if(d)switch(d[2]){case"visIdx":case"visible":var u=parseInt(d[1],10);if(u<0){var c=e.map(r,function(e,t){return e.bVisible?t:null});return[c[c.length+u]]}return[m(t,u)];case"name":return e.map(a,function(e,t){return e===d[1]?t:null});default:return[]}if(n.nodeName&&n._DT_CellIndex)return[n._DT_CellIndex.column];var h=e(o).filter(n).map(function(){return e.inArray(this,o)}).toArray();if(h.length||!n.nodeName)return h;var p=e(n).closest("*[data-dt-column]");return p.length?[p.data("dt-column")]:[]};return Tt("column",n,s,t,i)},Rt=function(t,n,r){var a,o,s,l,d=t.aoColumns,u=d[n],c=t.aoData;if(r===i)return u.bVisible;if(u.bVisible!==r){if(r){var h=e.inArray(!0,st(d,"bVisible"),n+1);for(o=0,s=c.length;o<s;o++)l=c[o].nTr,a=c[o].anCells,l&&l.insertBefore(a[n],a[h]||null)}else e(st(t.aoData,"anCells",n)).detach();u.bVisible=r,O(t,t.aoHeader),O(t,t.aoFooter),xe(t)}};Ue("columns()",function(t,n){t===i?t="":e.isPlainObject(t)&&(n=t,t=""),n=Yt(n);var r=this.iterator("table",function(e){return Wt(e,t,n)},1);return r.selector.cols=t,r.selector.opts=n,r}),Je("columns().header()","column().header()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),Je("columns().footer()","column().footer()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),Je("columns().data()","column().data()",function(){return this.iterator("column-rows",Ft,1)}),Je("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),Je("columns().cache()","column().cache()",function(e){return this.iterator("column-rows",function(t,n,i,r,a){return lt(t.aoData,a,"search"===e?"_aFilterData":"_aSortData",n)},1)}),Je("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,i,r){return lt(e.aoData,r,"anCells",t)},1)}),Je("columns().visible()","column().visible()",function(e,t){var n=this.iterator("column",function(t,n){return e===i?t.aoColumns[n].bVisible:void Rt(t,n,e)});return e!==i&&(this.iterator("column",function(n,i){Oe(n,null,"column-visibility",[n,i,e,t])}),(t===i||t)&&this.columns.adjust()),n}),Je("columns().indexes()","column().index()",function(e){return this.iterator("column",function(t,n){return"visible"===e?f(t,n):n},1)}),Ue("columns.adjust()",function(){return this.iterator("table",function(e){p(e)},1)}),Ue("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return m(n,t);if("fromData"===e||"toVisible"===e)return f(n,t)}}),Ue("column()",function(e,t){return St(this.columns(e,t))});var $t=function(t,n,r){var a,o,s,l,d,u,c,h=t.aoData,p=xt(t,r),m=ut(lt(h,p,"anCells")),f=e([].concat.apply([],m)),_=t.aoColumns.length,y=function(n){var r="function"==typeof n;if(null===n||n===i||r){for(o=[],s=0,l=p.length;s<l;s++)for(a=p[s],d=0;d<_;d++)u={row:a,column:d},r?(c=h[a],n(u,D(t,a,d),c.anCells?c.anCells[d]:null)&&o.push(u)):o.push(u);return o}if(e.isPlainObject(n))return[n];var m=f.filter(n).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return m.length||!n.nodeName?m:(c=e(n).closest("*[data-dt-row]"),c.length?[{row:c.data("dt-row"),column:c.data("dt-column")}]:[])};return Tt("cell",n,y,t,r)};Ue("cells()",function(t,n,r){if(e.isPlainObject(t)&&(t.row===i?(r=t,t=null):(r=n,n=null)),e.isPlainObject(n)&&(r=n,n=null),null===n||n===i)return this.iterator("table",function(e){return $t(e,t,Yt(r))});var a,o,s,l,d,u=this.columns(n,r),c=this.rows(t,r),h=this.iterator("table",function(e,t){for(a=[],o=0,s=c[t].length;o<s;o++)for(l=0,d=u[t].length;l<d;l++)a.push({row:c[t][o],column:u[t][l]});return a},1);return e.extend(h.selector,{cols:n,rows:t,opts:r}),h}),Je("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var r=e.aoData[t];return r&&r.anCells?r.anCells[n]:i},1)}),Ue("cells().data()",function(){return this.iterator("cell",function(e,t,n){return D(e,t,n)},1)}),Je("cells().cache()","cell().cache()",function(e){return e="search"===e?"_aFilterData":"_aSortData",this.iterator("cell",function(t,n,i){return t.aoData[n][e][i]},1)}),Je("cells().render()","cell().render()",function(e){return this.iterator("cell",function(t,n,i){return D(t,n,i,e)},1)}),Je("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:f(e,n)}},1)}),Je("cells().invalidate()","cell().invalidate()",function(e){return this.iterator("cell",function(t,n,i){H(t,n,e,i)})}),Ue("cell()",function(e,t,n){return St(this.cells(e,t,n))}),Ue("cell().data()",function(e){var t=this.context,n=this[0];return e===i?t.length&&n.length?D(t[0],n[0].row,n[0].column):i:(k(t[0],n[0].row,n[0].column,e),H(t[0],n[0].row,"data",n[0].column),this)}),Ue("order()",function(t,n){var r=this.context;return t===i?0!==r.length?r[0].aaSorting:i:("number"==typeof t?t=[[t,n]]:t.length&&!e.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Ue("order.listener()",function(e,t,n){return this.iterator("table",function(i){Te(i,e,t,n)})}),Ue("order.fixed()",function(t){if(!t){var n=this.context,r=n.length?n[0].aaSortingFixed:i;return e.isArray(r)?{pre:r}:r}return this.iterator("table",function(n){n.aaSortingFixed=e.extend(!0,{},t)})}),Ue(["columns().order()","column().order()"],function(t){var n=this;return this.iterator("table",function(i,r){var a=[];e.each(n[r],function(e,n){a.push([n,t])}),i.aaSorting=a})}),Ue("search()",function(t,n,r,a){var o=this.context;return t===i?0!==o.length?o[0].oPreviousSearch.sSearch:i:this.iterator("table",function(i){i.oFeatures.bFilter&&G(i,e.extend({},i.oPreviousSearch,{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===r||r,bCaseInsensitive:null===a||a}),1)})}),Je("columns().search()","column().search()",function(t,n,r,a){return this.iterator("column",function(o,s){var l=o.aoPreSearchCols;return t===i?l[s].sSearch:void(o.oFeatures.bFilter&&(e.extend(l[s],{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===r||r,bCaseInsensitive:null===a||a}),G(o,o.oPreviousSearch,1)))})}),Ue("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Ue("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),Ue("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Ue("state.save()",function(){return this.iterator("table",function(e){xe(e)})}),Ve.versionCheck=Ve.fnVersionCheck=function(e){for(var t,n,i=Ve.version.split("."),r=e.split("."),a=0,o=r.length;a<o;a++)if(t=parseInt(i[a],10)||0,n=parseInt(r[a],10)||0,t!==n)return t>n;return!0},Ve.isDataTable=Ve.fnIsDataTable=function(t){var n=e(t).get(0),i=!1;
return t instanceof Ve.Api||(e.each(Ve.settings,function(t,r){var a=r.nScrollHead?e("table",r.nScrollHead)[0]:null,o=r.nScrollFoot?e("table",r.nScrollFoot)[0]:null;r.nTable!==n&&a!==n&&o!==n||(i=!0)}),i)},Ve.tables=Ve.fnTables=function(t){var n=!1;e.isPlainObject(t)&&(n=t.api,t=t.visible);var i=e.map(Ve.settings,function(n){if(!t||t&&e(n.nTable).is(":visible"))return n.nTable});return n?new Be(i):i},Ve.camelToHungarian=a,Ue("$()",function(t,n){var i=this.rows(n).nodes(),r=e(i);return e([].concat(r.filter(t).toArray(),r.find(t).toArray()))}),e.each(["on","one","off"],function(t,n){Ue(n+"()",function(){var t=Array.prototype.slice.call(arguments);t[0]=e.map(t[0].split(/\s/),function(e){return e.match(/\.dt\b/)?e:e+".dt"}).join(" ");var i=e(this.tables().nodes());return i[n].apply(i,t),this})}),Ue("clear()",function(){return this.iterator("table",function(e){C(e)})}),Ue("settings()",function(){return new Be(this.context,this.context)}),Ue("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),Ue("data()",function(){return this.iterator("table",function(e){return st(e.aoData,"_aData")}).flatten()}),Ue("destroy()",function(n){return n=n||!1,this.iterator("table",function(i){var r,a=i.nTableWrapper.parentNode,o=i.oClasses,s=i.nTable,l=i.nTBody,d=i.nTHead,u=i.nTFoot,c=e(s),h=e(l),p=e(i.nTableWrapper),m=e.map(i.aoData,function(e){return e.nTr});i.bDestroying=!0,Oe(i,"aoDestroyCallback","destroy",[i]),n||new Be(i).columns().visible(!0),p.off(".DT").find(":not(tbody *)").off(".DT"),e(t).off(".DT-"+i.sInstance),s!=d.parentNode&&(c.children("thead").detach(),c.append(d)),u&&s!=u.parentNode&&(c.children("tfoot").detach(),c.append(u)),i.aaSorting=[],i.aaSortingFixed=[],Ye(i),e(m).removeClass(i.asStripeClasses.join(" ")),e("th, td",d).removeClass(o.sSortable+" "+o.sSortableAsc+" "+o.sSortableDesc+" "+o.sSortableNone),i.bJUI&&(e("th span."+o.sSortIcon+", td span."+o.sSortIcon,d).detach(),e("th, td",d).each(function(){var t=e("div."+o.sSortJUIWrapper,this);e(this).append(t.contents()),t.detach()})),h.children().detach(),h.append(m);var f=n?"remove":"detach";c[f](),p[f](),!n&&a&&(a.insertBefore(s,i.nTableReinsertBefore),c.css("width",i.sDestroyWidth).removeClass(o.sTable),r=i.asDestroyStripes.length,r&&h.children().each(function(t){e(this).addClass(i.asDestroyStripes[t%r])}));var _=e.inArray(i,Ve.settings);_!==-1&&Ve.settings.splice(_,1)})}),e.each(["column","row","cell"],function(e,t){Ue(t+"s().every()",function(e){var n=this.selector.opts,r=this;return this.iterator(t,function(a,o,s,l,d){e.call(r[t](o,"cell"===t?s:n,"cell"===t?n:i),o,s,l,d)})})}),Ue("i18n()",function(t,n,r){var a=this.context[0],o=Y(t)(a.oLanguage);return o===i&&(o=n),r!==i&&e.isPlainObject(o)&&(o=o[r]!==i?o[r]:o._),o.replace("%d",r)}),Ve.version="1.10.13",Ve.settings=[],Ve.models={},Ve.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Ve.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Ve.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Ve.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((e.iStateDuration===-1?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(t){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(e.iStateDuration===-1?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:e.extend({},Ve.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},r(Ve.defaults),Ve.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},r(Ve.defaults.column),Ve.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:i,oAjaxData:i,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==We(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==We(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,i=this.aiDisplay.length,r=this.oFeatures,a=r.bPaginate;return r.bServerSide?a===!1||e===-1?t+i:Math.min(t+e,this._iRecordsDisplay):!a||n>i||e===-1?i:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Ve.ext=qe={buttons:{},classes:{},builder:"-source-",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Ve.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Ve.version},e.extend(qe,{afnFiltering:qe.search,aTypes:qe.type.detect,ofnSearch:qe.type.search,oSort:qe.type.order,afnSortData:qe.order,aoFeatures:qe.feature,oApi:qe.internal,oStdClasses:qe.classes,oPagination:qe.pager}),e.extend(Ve.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var t="";t="";var n=t+"ui-state-default",i=t+"css_right ui-icon ui-icon-",r=t+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";e.extend(Ve.ext.oJUIClasses,Ve.ext.classes,{sPageButton:"fg-button ui-button "+n,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:n+" sorting_asc",sSortDesc:n+" sorting_desc",sSortable:n+" sorting",sSortableAsc:n+" sorting_asc_disabled",sSortableDesc:n+" sorting_desc_disabled",sSortableNone:n+" sorting_disabled",sSortJUIAsc:i+"triangle-1-n",sSortJUIDesc:i+"triangle-1-s",sSortJUI:i+"carat-2-n-s",sSortJUIAscAllowed:i+"carat-1-n",sSortJUIDescAllowed:i+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+n,sScrollFoot:"dataTables_scrollFoot "+n,sHeaderTH:n,sFooterTH:n,sJUIHeader:r+" ui-corner-tl ui-corner-tr",sJUIFooter:r+" ui-corner-bl ui-corner-br"})}();var Nt=Ve.ext.pager;e.extend(Nt,{simple:function(e,t){return["previous","next"]},full:function(e,t){return["first","previous","next","last"]},numbers:function(e,t){return[Re(e,t)]},simple_numbers:function(e,t){return["previous",Re(e,t),"next"]},full_numbers:function(e,t){return["first","previous",Re(e,t),"next","last"]},first_last_numbers:function(e,t){return["first",Re(e,t),"last"]},_numbers:Re,numbers_length:7}),e.extend(!0,Ve.ext.renderer,{pageButton:{_:function(t,r,a,o,s,l){var d,u,c,h=t.oClasses,p=t.oLanguage.oPaginate,m=t.oLanguage.oAria.paginate||{},f=0,_=function(n,i){var r,o,c,y,g=function(e){ce(t,e.data.action,!0)};for(r=0,o=i.length;r<o;r++)if(y=i[r],e.isArray(y)){var v=e("<"+(y.DT_el||"div")+"/>").appendTo(n);_(v,y)}else{switch(d=null,u="",y){case"ellipsis":n.append('<span class="ellipsis">&#x2026;</span>');break;case"first":d=p.sFirst,u=y+(s>0?"":" "+h.sPageButtonDisabled);break;case"previous":d=p.sPrevious,u=y+(s>0?"":" "+h.sPageButtonDisabled);break;case"next":d=p.sNext,u=y+(s<l-1?"":" "+h.sPageButtonDisabled);break;case"last":d=p.sLast,u=y+(s<l-1?"":" "+h.sPageButtonDisabled);break;default:d=y+1,u=s===y?h.sPageButtonActive:""}null!==d&&(c=e("<a>",{"class":h.sPageButton+" "+u,"aria-controls":t.sTableId,"aria-label":m[y],"data-dt-idx":f,tabindex:t.iTabIndex,id:0===a&&"string"==typeof y?t.sTableId+"_"+y:null}).html(d).appendTo(n),Pe(c,{action:y},g),f++)}};try{c=e(r).find(n.activeElement).data("dt-idx")}catch(y){}_(e(r).empty(),o),c!==i&&e(r).find("[data-dt-idx="+c+"]").focus()}}}),e.extend(Ve.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return rt(e,n)?"num"+n:null},function(e,t){if(e&&!(e instanceof Date)&&!Qe.test(e))return null;var n=Date.parse(e);return null!==n&&!isNaN(n)||tt(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return rt(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return ot(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return ot(e,n,!0)?"html-num-fmt"+n:null},function(e,t){return tt(e)||"string"==typeof e&&e.indexOf("<")!==-1?"html":null}]),e.extend(Ve.ext.type.search,{html:function(e){return tt(e)?e:"string"==typeof e?e.replace(Xe," ").replace(Ke,""):""},string:function(e){return tt(e)?e:"string"==typeof e?e.replace(Xe," "):e}});var qt=function(e,t,n,i){return 0===e||e&&"-"!==e?(t&&(e=it(e,t)),e.replace&&(n&&(e=e.replace(n,"")),i&&(e=e.replace(i,""))),1*e):-(1/0)};e.extend(qe.type.order,{"date-pre":function(e){return Date.parse(e)||-(1/0)},"html-pre":function(e){return tt(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return tt(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:e>t?1:0},"string-desc":function(e,t){return e<t?1:e>t?-1:0}}),$e(""),e.extend(!0,Ve.ext.renderer,{header:{_:function(t,n,i,r){e(t.nTable).on("order.dt.DT",function(e,a,o,s){if(t===a){var l=i.idx;n.removeClass(i.sSortingClass+" "+r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:i.sSortingClass)}})},jqueryui:function(t,n,i,r){e("<div/>").addClass(r.sSortJUIWrapper).append(n.contents()).append(e("<span/>").addClass(r.sSortIcon+" "+i.sSortingClassJUI)).appendTo(n),e(t.nTable).on("order.dt.DT",function(e,a,o,s){if(t===a){var l=i.idx;n.removeClass(r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:i.sSortingClass),n.find("span."+r.sSortIcon).removeClass(r.sSortJUIAsc+" "+r.sSortJUIDesc+" "+r.sSortJUI+" "+r.sSortJUIAscAllowed+" "+r.sSortJUIDescAllowed).addClass("asc"==s[l]?r.sSortJUIAsc:"desc"==s[l]?r.sSortJUIDesc:i.sSortingClassJUI)}})}}});var Bt=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};return Ve.render={number:function(e,t,n,i,r){return{display:function(a){if("number"!=typeof a&&"string"!=typeof a)return a;var o=a<0?"-":"",s=parseFloat(a);if(isNaN(s))return Bt(a);s=s.toFixed(n),a=Math.abs(s);var l=parseInt(a,10),d=n?t+(a-l).toFixed(n).substring(2):"";return o+(i||"")+l.toString().replace(/\B(?=(\d{3})+(?!\d))/g,e)+d+(r||"")}}},text:function(){return{display:Bt}}},e.extend(Ve.ext.internal,{_fnExternApiFunc:Ne,_fnBuildAjax:N,_fnAjaxUpdate:q,_fnAjaxParameters:B,_fnAjaxUpdateDraw:U,_fnAjaxDataSrc:J,_fnAddColumn:c,_fnColumnOptions:h,_fnAdjustColumnSizing:p,_fnVisibleToColumnIndex:m,_fnColumnIndexToVisible:f,_fnVisbleColumns:_,_fnGetColumns:y,_fnColumnTypes:g,_fnApplyColumnDefs:v,_fnHungarianMap:r,_fnCamelToHungarian:a,_fnLanguageCompat:o,_fnBrowserDetect:d,_fnAddData:M,_fnAddTr:L,_fnNodeToDataIndex:b,_fnNodeToColumnIndex:w,_fnGetCellData:D,_fnSetCellData:k,_fnSplitObjNotation:T,_fnGetObjectDataFn:Y,_fnSetObjectDataFn:S,_fnGetDataMaster:x,_fnClearTable:C,_fnDeleteIndex:E,_fnInvalidate:H,_fnGetRowElements:A,_fnCreateTr:j,_fnBuildHead:I,_fnDrawHead:O,_fnDraw:z,_fnReDraw:F,_fnAddOptionsHtml:W,_fnDetectHeader:R,_fnGetUniqueThs:$,_fnFeatureHtmlFilter:V,_fnFilterComplete:G,_fnFilterCustom:X,_fnFilterColumn:K,_fnFilter:Q,_fnFilterCreateSearch:Z,_fnEscapeRegex:_t,_fnFilterData:ee,_fnFeatureHtmlInfo:ie,_fnUpdateInfo:re,_fnInfoMacros:ae,_fnInitialise:oe,_fnInitComplete:se,_fnLengthChange:le,_fnFeatureHtmlLength:de,_fnFeatureHtmlPaginate:ue,_fnPageChange:ce,_fnFeatureHtmlProcessing:he,_fnProcessingDisplay:pe,_fnFeatureHtmlTable:me,_fnScrollDraw:fe,_fnApplyToChildren:_e,_fnCalculateColumnWidths:ye,_fnThrottle:Mt,_fnConvertToWidth:ge,_fnGetWidestNode:ve,_fnGetMaxLenString:Me,_fnStringToCss:Le,_fnSortFlatten:be,_fnSort:we,_fnSortAria:De,_fnSortListener:ke,_fnSortAttachListener:Te,_fnSortingClasses:Ye,_fnSortData:Se,_fnSaveState:xe,_fnLoadState:Ce,_fnSettingsFromNode:Ee,_fnLog:He,_fnMap:Ae,_fnBindAction:Pe,_fnCallbackReg:Ie,_fnCallbackFire:Oe,_fnLengthOverflow:ze,_fnRenderer:Fe,_fnDataSource:We,_fnRowAttributes:P,_fnCalculateEnd:function(){}}),e.fn.dataTable=Ve,Ve.$=e,e.fn.dataTableSettings=Ve.settings,e.fn.dataTableExt=Ve.ext,e.fn.DataTable=function(t){return e(this).dataTable(t).api()},e.each(Ve,function(t,n){e.fn.DataTable[t]=n}),e.fn.dataTable}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd)var t=e.fn.select2.amd;var t;return function(){if(!t||!t.requirejs){t?n=t:t={};var e,n,i;!function(t){function r(e,t){return M.call(e,t)}function a(e,t){var n,i,r,a,o,s,l,d,u,c,h,p=t&&t.split("/"),m=g.map,f=m&&m["*"]||{};if(e&&"."===e.charAt(0))if(t){for(e=e.split("/"),o=e.length-1,g.nodeIdCompat&&b.test(e[o])&&(e[o]=e[o].replace(b,"")),e=p.slice(0,p.length-1).concat(e),u=0;u<e.length;u+=1)if(h=e[u],"."===h)e.splice(u,1),u-=1;else if(".."===h){if(1===u&&(".."===e[2]||".."===e[0]))break;u>0&&(e.splice(u-1,2),u-=2)}e=e.join("/")}else 0===e.indexOf("./")&&(e=e.substring(2));if((p||f)&&m){for(n=e.split("/"),u=n.length;u>0;u-=1){if(i=n.slice(0,u).join("/"),p)for(c=p.length;c>0;c-=1)if(r=m[p.slice(0,c).join("/")],r&&(r=r[i])){a=r,s=u;break}if(a)break;!l&&f&&f[i]&&(l=f[i],d=u)}!a&&l&&(a=l,s=d),a&&(n.splice(0,s,a),e=n.join("/"))}return e}function o(e,n){return function(){var i=L.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),p.apply(t,i.concat([e,n]))}}function s(e){return function(t){return a(t,e)}}function l(e){return function(t){_[e]=t}}function d(e){if(r(y,e)){var n=y[e];delete y[e],v[e]=!0,h.apply(t,n)}if(!r(_,e)&&!r(v,e))throw new Error("No "+e);return _[e]}function u(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function c(e){return function(){return g&&g.config&&g.config[e]||{}}}var h,p,m,f,_={},y={},g={},v={},M=Object.prototype.hasOwnProperty,L=[].slice,b=/\.js$/;m=function(e,t){var n,i=u(e),r=i[0];return e=i[1],r&&(r=a(r,t),n=d(r)),r?e=n&&n.normalize?n.normalize(e,s(t)):a(e,t):(e=a(e,t),i=u(e),r=i[0],e=i[1],r&&(n=d(r))),{f:r?r+"!"+e:e,n:e,pr:r,p:n}},f={require:function(e){return o(e)},exports:function(e){var t=_[e];return"undefined"!=typeof t?t:_[e]={}},module:function(e){return{id:e,uri:"",exports:_[e],config:c(e)}}},h=function(e,n,i,a){var s,u,c,h,p,g,M=[],L=typeof i;if(a=a||e,"undefined"===L||"function"===L){for(n=!n.length&&i.length?["require","exports","module"]:n,p=0;p<n.length;p+=1)if(h=m(n[p],a),u=h.f,"require"===u)M[p]=f.require(e);else if("exports"===u)M[p]=f.exports(e),g=!0;else if("module"===u)s=M[p]=f.module(e);else if(r(_,u)||r(y,u)||r(v,u))M[p]=d(u);else{if(!h.p)throw new Error(e+" missing "+u);h.p.load(h.n,o(a,!0),l(u),{}),M[p]=_[u]}c=i?i.apply(_[e],M):void 0,e&&(s&&s.exports!==t&&s.exports!==_[e]?_[e]=s.exports:c===t&&g||(_[e]=c))}else e&&(_[e]=i)},e=n=p=function(e,n,i,r,a){if("string"==typeof e)return f[e]?f[e](n):d(m(e,n).f);if(!e.splice){if(g=e,g.deps&&p(g.deps,g.callback),!n)return;n.splice?(e=n,n=i,i=null):e=t}return n=n||function(){},"function"==typeof i&&(i=r,r=a),r?h(t,e,n,i):setTimeout(function(){h(t,e,n,i)},4),p},p.config=function(e){return p(e)},e._defined=_,i=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),r(_,e)||r(y,e)||(y[e]=[e,t,n])},i.amd={jQuery:!0}}(),t.requirejs=e,t.require=n,t.define=i}}(),t.define("almond",function(){}),t.define("jquery",[],function(){var t=e||$;return null==t&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),t}),t.define("select2/utils",["jquery"],function(e){function t(e){var t=e.prototype,n=[];for(var i in t){var r=t[i];"function"==typeof r&&"constructor"!==i&&n.push(i)}return n}var n={};n.Extend=function(e,t){function n(){this.constructor=e}var i={}.hasOwnProperty;for(var r in t)i.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},n.Decorate=function(e,n){function i(){var t=Array.prototype.unshift,i=n.prototype.constructor.length,r=e.prototype.constructor;i>0&&(t.call(arguments,e.prototype.constructor),r=n.prototype.constructor),r.apply(this,arguments)}function r(){this.constructor=i}var a=t(n),o=t(e);n.displayName=e.displayName,i.prototype=new r;for(var s=0;s<o.length;s++){var l=o[s];i.prototype[l]=e.prototype[l]}for(var d=(function(e){var t=function(){};e in i.prototype&&(t=i.prototype[e]);var r=n.prototype[e];return function(){var e=Array.prototype.unshift;return e.call(arguments,t),r.apply(this,arguments)}}),u=0;u<a.length;u++){var c=a[u];i.prototype[c]=d(c)}return i};var i=function(){this.listeners={}};return i.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},i.prototype.trigger=function(e){var t=Array.prototype.slice,n=t.call(arguments,1);this.listeners=this.listeners||{},null==n&&(n=[]),0===n.length&&n.push({}),n[0]._type=e,e in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(e,t){for(var n=0,i=e.length;n<i;n++)e[n].apply(this,t)},n.Observable=i,n.generateChars=function(e){for(var t="",n=0;n<e;n++){var i=Math.floor(36*Math.random());t+=i.toString(36)}return t},n.bind=function(e,t){return function(){e.apply(t,arguments)}},n._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var r=0;r<n.length;r++){var a=n[r];a=a.substring(0,1).toLowerCase()+a.substring(1),a in i||(i[a]={}),r==n.length-1&&(i[a]=e[t]),i=i[a]}delete e[t]}}return e},n.hasScroll=function(t,n){var i=e(n),r=n.style.overflowX,a=n.style.overflowY;return(r!==a||"hidden"!==a&&"visible"!==a)&&("scroll"===r||"scroll"===a||(i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth))},n.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},n.appendMany=function(t,n){if("1.7"===e.fn.jquery.substr(0,3)){var i=e();e.map(n,function(e){i=i.add(e)}),n=i}t.append(n)},n}),t.define("select2/results",["jquery","./utils"],function(e,t){function n(e,t,i){this.$element=e,this.data=i,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&t.attr("aria-multiselectable","true"),this.$results=t,t},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(t){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=e('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),r=this.options.get("translations").get(t.message);i.append(n(r(t.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(e){this.hideLoading();var t=[];if(null==e.results||0===e.results.length)return void(0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"}));e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],r=this.option(i);t.push(r)}this.$results.append(t)},n.prototype.position=function(e,t){var n=t.find(".select2-results");n.append(e)},n.prototype.sort=function(e){var t=this.options.get("sorter");return t(e)},n.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]"),t=e.filter("[aria-selected=true]");t.length>0?t.first().trigger("mouseenter"):e.first().trigger("mouseenter"),this.ensureHighlightVisible()},n.prototype.setClasses=function(){var t=this;this.data.current(function(n){var i=e.map(n,function(e){return e.id.toString()}),r=t.$results.find(".select2-results__option[aria-selected]");r.each(function(){var t=e(this),n=e.data(this,"data"),r=""+n.id;null!=n.element&&n.element.selected||null==n.element&&e.inArray(r,i)>-1?t.attr("aria-selected","true"):t.attr("aria-selected","false")})})},n.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:t(e)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(t){var n=document.createElement("li");n.className="select2-results__option";var i={role:"treeitem","aria-selected":"false"};t.disabled&&(delete i["aria-selected"],i["aria-disabled"]="true"),null==t.id&&delete i["aria-selected"],null!=t._resultId&&(n.id=t._resultId),t.title&&(n.title=t.title),t.children&&(i.role="group",i["aria-label"]=t.text,delete i["aria-selected"]);for(var r in i){var a=i[r];n.setAttribute(r,a)}if(t.children){var o=e(n),s=document.createElement("strong");s.className="select2-results__group";e(s);this.template(t,s);for(var l=[],d=0;d<t.children.length;d++){var u=t.children[d],c=this.option(u);l.push(c)}var h=e("<ul></ul>",{"class":"select2-results__options select2-results__options--nested"});h.append(l),o.append(s),o.append(h)}else this.template(t,n);return e.data(n,"data",t),n},n.prototype.bind=function(t,n){var i=this,r=t.id+"-results";this.$results.attr("id",r),t.on("results:all",function(e){i.clear(),i.append(e.data),t.isOpen()&&(i.setClasses(),i.highlightFirstItem())}),t.on("results:append",function(e){i.append(e.data),t.isOpen()&&i.setClasses()}),t.on("query",function(e){i.hideMessages(),i.showLoading(e)}),t.on("select",function(){t.isOpen()&&(i.setClasses(),i.highlightFirstItem())}),t.on("unselect",function(){t.isOpen()&&(i.setClasses(),i.highlightFirstItem())}),t.on("open",function(){i.$results.attr("aria-expanded","true"),i.$results.attr("aria-hidden","false"),i.setClasses(),i.ensureHighlightVisible()}),t.on("close",function(){i.$results.attr("aria-expanded","false"),i.$results.attr("aria-hidden","true"),i.$results.removeAttr("aria-activedescendant")}),t.on("results:toggle",function(){var e=i.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),t.on("results:select",function(){var e=i.getHighlightedResults();if(0!==e.length){var t=e.data("data");"true"==e.attr("aria-selected")?i.trigger("close",{}):i.trigger("select",{data:t})}}),t.on("results:previous",function(){var e=i.getHighlightedResults(),t=i.$results.find("[aria-selected]"),n=t.index(e);if(0!==n){var r=n-1;0===e.length&&(r=0);var a=t.eq(r);a.trigger("mouseenter");var o=i.$results.offset().top,s=a.offset().top,l=i.$results.scrollTop()+(s-o);0===r?i.$results.scrollTop(0):s-o<0&&i.$results.scrollTop(l)}}),t.on("results:next",function(){var e=i.getHighlightedResults(),t=i.$results.find("[aria-selected]"),n=t.index(e),r=n+1;if(!(r>=t.length)){var a=t.eq(r);a.trigger("mouseenter");var o=i.$results.offset().top+i.$results.outerHeight(!1),s=a.offset().top+a.outerHeight(!1),l=i.$results.scrollTop()+s-o;0===r?i.$results.scrollTop(0):s>o&&i.$results.scrollTop(l)}}),t.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")}),t.on("results:message",function(e){i.displayMessage(e)}),e.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=i.$results.scrollTop(),n=i.$results.get(0).scrollHeight-t+e.deltaY,r=e.deltaY>0&&t-e.deltaY<=0,a=e.deltaY<0&&n<=i.$results.height();r?(i.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):a&&(i.$results.scrollTop(i.$results.get(0).scrollHeight-i.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(t){var n=e(this),r=n.data("data");return"true"===n.attr("aria-selected")?void(i.options.get("multiple")?i.trigger("unselect",{originalEvent:t,data:r}):i.trigger("close",{})):void i.trigger("select",{originalEvent:t,data:r})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(t){var n=e(this).data("data");i.getHighlightedResults().removeClass("select2-results__option--highlighted"),i.trigger("results:focus",{data:n,element:e(this)})})},n.prototype.getHighlightedResults=function(){var e=this.$results.find(".select2-results__option--highlighted");return e},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(0!==e.length){var t=this.$results.find("[aria-selected]"),n=t.index(e),i=this.$results.offset().top,r=e.offset().top,a=this.$results.scrollTop()+(r-i),o=r-i;a-=2*e.outerHeight(!1),n<=2?this.$results.scrollTop(0):(o>this.$results.outerHeight()||o<0)&&this.$results.scrollTop(a)}},n.prototype.template=function(t,n){var i=this.options.get("templateResult"),r=this.options.get("escapeMarkup"),a=i(t,n);null==a?n.style.display="none":"string"==typeof a?n.innerHTML=r(a):e(n).append(a)},n}),t.define("select2/keys",[],function(){var e={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return e}),t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,t.Observable),i.prototype.render=function(){var t=e('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=this.$element.data("old-tabindex")?this._tabindex=this.$element.data("old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),t.attr("title",this.$element.attr("title")),t.attr("tabindex",this._tabindex),this.$selection=t,t},i.prototype.bind=function(e,t){var i=this,r=(e.id+"-container",e.id+"-results");this.container=e,this.$selection.on("focus",function(e){i.trigger("focus",e)}),this.$selection.on("blur",function(e){i._handleBlur(e)}),this.$selection.on("keydown",function(e){i.trigger("keypress",e),e.which===n.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){i.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){i.update(e.data)}),e.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",r),i._attachCloseHandler(e)}),e.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.focus(),i._detachCloseHandler(e)}),e.on("enable",function(){i.$selection.attr("tabindex",i._tabindex)}),e.on("disable",function(){i.$selection.attr("tabindex","-1")})},i.prototype._handleBlur=function(t){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||e.contains(n.$selection[0],document.activeElement)||n.trigger("blur",t)},1)},i.prototype._attachCloseHandler=function(t){e(document.body).on("mousedown.select2."+t.id,function(t){var n=e(t.target),i=n.closest(".select2"),r=e(".select2.select2-container--open");r.each(function(){var t=e(this);if(this!=i[0]){var n=t.data("element");n.select2("close")}})})},i.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)},i.prototype.position=function(e,t){var n=t.find(".selection");n.append(e)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},i}),t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function r(){r.__super__.constructor.apply(this,arguments)}
return n.Extend(r,t),r.prototype.render=function(){var e=r.__super__.render.call(this);return e.addClass("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},r.prototype.bind=function(e,t){var n=this;r.__super__.bind.apply(this,arguments);var i=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),e.on("focus",function(t){e.isOpen()||n.$selection.focus()}),e.on("selection:update",function(e){n.update(e.data)})},r.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},r.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},r.prototype.selectionContainer=function(){return e("<span></span>")},r.prototype.update=function(e){if(0===e.length)return void this.clear();var t=e[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(t,n);n.empty().append(i),n.prop("title",t.title||t.text)},r}),t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,n){function i(e,t){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,t),i.prototype.render=function(){var e=i.__super__.render.call(this);return e.addClass("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},i.prototype.bind=function(t,n){var r=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(e){r.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(t){if(!r.options.get("disabled")){var n=e(this),i=n.parent(),a=i.data("data");r.trigger("unselect",{originalEvent:t,data:a})}})},i.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},i.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},i.prototype.selectionContainer=function(){var t=e('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');return t},i.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],i=0;i<e.length;i++){var r=e[i],a=this.selectionContainer(),o=this.display(r,a);a.append(o),a.prop("title",r.title||r.text),a.data("data",r),t.push(a)}var s=this.$selection.find(".select2-selection__rendered");n.appendMany(s,t)}},i}),t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return t.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},t.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},t.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id,i=t.length>1;if(i||n)return e.call(this,t);this.clear();var r=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r)},t}),t.define("select2/selection/allowClear",["jquery","../keys"],function(e,t){function n(){}return n.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},n.prototype._handleClear=function(e,t){if(!this.options.get("disabled")){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){t.stopPropagation();for(var i=n.data("data"),r=0;r<i.length;r++){var a={data:i[r]};if(this.trigger("unselect",a),a.prevented)return}this.$element.val(this.placeholder.id).trigger("change"),this.trigger("toggle",{})}}},n.prototype._handleKeyboardClear=function(e,n,i){i.isOpen()||n.which!=t.DELETE&&n.which!=t.BACKSPACE||this._handleClear(n)},n.prototype.update=function(t,n){if(t.call(this,n),!(this.$selection.find(".select2-selection__placeholder").length>0||0===n.length)){var i=e('<span class="select2-selection__clear">&times;</span>');i.data("data",n),this.$selection.find(".select2-selection__rendered").prepend(i)}},n}),t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,n){function i(e,t,n){e.call(this,t,n)}return i.prototype.render=function(t){var n=e('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=t.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(e,t,i){var r=this;e.call(this,t,i),t.on("open",function(){r.$search.trigger("focus")}),t.on("close",function(){r.$search.val(""),r.$search.removeAttr("aria-activedescendant"),r.$search.trigger("focus")}),t.on("enable",function(){r.$search.prop("disabled",!1),r._transferTabIndex()}),t.on("disable",function(){r.$search.prop("disabled",!0)}),t.on("focus",function(e){r.$search.trigger("focus")}),t.on("results:focus",function(e){r.$search.attr("aria-activedescendant",e.id)}),this.$selection.on("focusin",".select2-search--inline",function(e){r.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){r._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){e.stopPropagation(),r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented();var t=e.which;if(t===n.BACKSPACE&&""===r.$search.val()){var i=r.$searchContainer.prev(".select2-selection__choice");if(i.length>0){var a=i.data("data");r.searchRemoveChoice(a),e.preventDefault()}}});var a=document.documentMode,o=a&&a<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){return o?void r.$selection.off("input.search input.searchcheck"):void r.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(o&&"input"===e.type)return void r.$selection.off("input.search input.searchcheck");var t=e.which;t!=n.SHIFT&&t!=n.CTRL&&t!=n.ALT&&t!=n.TAB&&r.handleSearch(e)})},i.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},i.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),e.call(this,t),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.focus()},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(""!==this.$search.attr("placeholder"))e=this.$selection.find(".select2-selection__rendered").innerWidth();else{var t=this.$search.val().length+1;e=.75*t+"em"}this.$search.css("width",e)},i}),t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}return t.prototype.bind=function(t,n,i){var r=this,a=["open","opening","close","closing","select","selecting","unselect","unselecting"],o=["opening","closing","selecting","unselecting"];t.call(this,n,i),n.on("*",function(t,n){if(e.inArray(t,a)!==-1){n=n||{};var i=e.Event("select2:"+t,{params:n});r.$element.trigger(i),e.inArray(t,o)!==-1&&(n.prevented=i.isDefaultPrevented())}})},t}),t.define("select2/translation",["jquery","require"],function(e,t){function n(e){this.dict=e||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(e){return this.dict[e]},n.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)},n._cache={},n.loadPath=function(e){if(!(e in n._cache)){var i=t(e);n._cache[e]=i}return new n(n._cache[e])},n}),t.define("select2/diacritics",[],function(){var e={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};return e}),t.define("select2/data/base",["../utils"],function(e){function t(e,n){t.__super__.constructor.call(this)}return e.Extend(t,e.Observable),t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},t.prototype.bind=function(e,t){},t.prototype.destroy=function(){},t.prototype.generateResultId=function(t,n){var i=t.id+"-result-";return i+=e.generateChars(4),i+=null!=n.id?"-"+n.id.toString():"-"+e.generateChars(4)},t}),t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,e),i.prototype.current=function(e){var t=[],i=this;this.$element.find(":selected").each(function(){var e=n(this),r=i.item(e);t.push(r)}),e(t)},i.prototype.select=function(e){var t=this;if(e.selected=!0,n(e.element).is("option"))return e.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var r=[];e=[e],e.push.apply(e,i);for(var a=0;a<e.length;a++){var o=e[a].id;n.inArray(o,r)===-1&&r.push(o)}t.$element.val(r),t.$element.trigger("change")});else{var i=e.id;this.$element.val(i),this.$element.trigger("change")}},i.prototype.unselect=function(e){var t=this;if(this.$element.prop("multiple"))return e.selected=!1,n(e.element).is("option")?(e.element.selected=!1,void this.$element.trigger("change")):void this.current(function(i){for(var r=[],a=0;a<i.length;a++){var o=i[a].id;o!==e.id&&n.inArray(o,r)===-1&&r.push(o)}t.$element.val(r),t.$element.trigger("change")})},i.prototype.bind=function(e,t){var n=this;this.container=e,e.on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){n.removeData(this,"data")})},i.prototype.query=function(e,t){var i=[],r=this,a=this.$element.children();a.each(function(){var t=n(this);if(t.is("option")||t.is("optgroup")){var a=r.item(t),o=r.matches(e,a);null!==o&&i.push(o)}}),t({results:i})},i.prototype.addOptions=function(e){t.appendMany(this.$element,e)},i.prototype.option=function(e){var t;e.children?(t=document.createElement("optgroup"),t.label=e.text):(t=document.createElement("option"),void 0!==t.textContent?t.textContent=e.text:t.innerText=e.text),e.id&&(t.value=e.id),e.disabled&&(t.disabled=!0),e.selected&&(t.selected=!0),e.title&&(t.title=e.title);var i=n(t),r=this._normalizeItem(e);return r.element=t,n.data(t,"data",r),i},i.prototype.item=function(e){var t={};if(t=n.data(e[0],"data"),null!=t)return t;if(e.is("option"))t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if(e.is("optgroup")){t={text:e.prop("label"),children:[],title:e.prop("title")};for(var i=e.children("option"),r=[],a=0;a<i.length;a++){var o=n(i[a]),s=this.item(o);r.push(s)}t.children=r}return t=this._normalizeItem(t),t.element=e[0],n.data(e[0],"data",t),t},i.prototype._normalizeItem=function(e){n.isPlainObject(e)||(e={id:e,text:e}),e=n.extend({},{text:""},e);var t={selected:!1,disabled:!1};return null!=e.id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),n.extend({},t,e)},i.prototype.matches=function(e,t){var n=this.options.get("matcher");return n(e,t)},i}),t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,n){function i(e,t){var n=t.get("data")||[];i.__super__.constructor.call(this,e,t),this.addOptions(this.convertToOptions(n))}return t.Extend(i,e),i.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,n){return n.value==e.id.toString()});0===t.length&&(t=this.option(e),this.addOptions(t)),i.__super__.select.call(this,e)},i.prototype.convertToOptions=function(e){function i(e){return function(){return n(this).val()==e.id}}for(var r=this,a=this.$element.find("option"),o=a.map(function(){return r.item(n(this)).id}).get(),s=[],l=0;l<e.length;l++){var d=this._normalizeItem(e[l]);if(n.inArray(d.id,o)>=0){var u=a.filter(i(d)),c=this.item(u),h=n.extend(!0,{},d,c),p=this.option(h);u.replaceWith(p)}else{var m=this.option(d);if(d.children){var f=this.convertToOptions(d.children);t.appendMany(m,f)}s.push(m)}}return s},i}),t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,n){function i(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype._applyDefaults=function(e){var t={data:function(e){return n.extend({},e,{q:e.term})},transport:function(e,t,i){var r=n.ajax(e);return r.then(t),r.fail(i),r}};return n.extend({},t,e,!0)},i.prototype.processResults=function(e){return e},i.prototype.query=function(e,t){function i(){var i=a.transport(a,function(i){var a=r.processResults(i,e);r.options.get("debug")&&window.console&&console.error&&(a&&a.results&&n.isArray(a.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),t(a)},function(){i.status&&"0"===i.status||r.trigger("results:message",{message:"errorLoading"})});r._request=i}var r=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var a=n.extend({type:"GET"},this.ajaxOptions);"function"==typeof a.url&&(a.url=a.url.call(this.$element,e)),"function"==typeof a.data&&(a.data=a.data.call(this.$element,e)),this.ajaxOptions.delay&&null!=e.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},i}),t.define("select2/data/tags",["jquery"],function(e){function t(t,n,i){var r=i.get("tags"),a=i.get("createTag");void 0!==a&&(this.createTag=a);var o=i.get("insertTag");if(void 0!==o&&(this.insertTag=o),t.call(this,n,i),e.isArray(r))for(var s=0;s<r.length;s++){var l=r[s],d=this._normalizeItem(l),u=this.option(d);this.$element.append(u)}}return t.prototype.query=function(e,t,n){function i(e,a){for(var o=e.results,s=0;s<o.length;s++){var l=o[s],d=null!=l.children&&!i({results:l.children},!0),u=l.text===t.term;if(u||d)return!a&&(e.data=o,void n(e))}if(a)return!0;var c=r.createTag(t);if(null!=c){var h=r.option(c);h.attr("data-select2-tag",!0),r.addOptions([h]),r.insertTag(o,c)}e.results=o,n(e)}var r=this;return this._removeOldTags(),null==t.term||null!=t.page?void e.call(this,t,n):void e.call(this,t,i)},t.prototype.createTag=function(t,n){var i=e.trim(n.term);return""===i?null:{id:i,text:i}},t.prototype.insertTag=function(e,t,n){t.unshift(n)},t.prototype._removeOldTags=function(t){var n=(this._lastTag,this.$element.find("option[data-select2-tag]"));n.each(function(){this.selected||e(this).remove()})},t}),t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return t.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},t.prototype.query=function(t,n,i){function r(t){var n=o._normalizeItem(t),i=o.$element.find("option").filter(function(){return e(this).val()===n.id});if(!i.length){var r=o.option(n);r.attr("data-select2-tag",!0),o._removeOldTags(),o.addOptions([r])}a(n)}function a(e){o.trigger("select",{data:e})}var o=this;n.term=n.term||"";var s=this.tokenizer(n,this.options,r);s.term!==n.term&&(this.$search.length&&(this.$search.val(s.term),this.$search.focus()),n.term=s.term),t.call(this,n,i)},t.prototype.tokenizer=function(t,n,i,r){for(var a=i.get("tokenSeparators")||[],o=n.term,s=0,l=this.createTag||function(e){return{id:e.term,text:e.term}};s<o.length;){var d=o[s];if(e.inArray(d,a)!==-1){var u=o.substr(0,s),c=e.extend({},n,{term:u}),h=l(c);null!=h?(r(h),o=o.substr(s+1)||"",s=0):s++}else s++}return{term:o}},t}),t.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){return t.term=t.term||"",t.term.length<this.minimumInputLength?void this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}}):void e.call(this,t,n)},e}),t.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){return t.term=t.term||"",this.maximumInputLength>0&&t.term.length>this.maximumInputLength?void this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}}):void e.call(this,t,n)},e}),t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){var i=this;this.current(function(r){var a=null!=r?r.length:0;return i.maximumSelectionLength>0&&a>=i.maximumSelectionLength?void i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):void e.call(i,t,n)})},e}),t.define("select2/dropdown",["jquery","./utils"],function(e,t){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<span class="select2-dropdown"><span class="select2-results"></span></span>');return t.attr("dir",this.options.get("dir")),this.$dropdown=t,t},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function n(){}return n.prototype.render=function(t){var n=t.call(this),i=e('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),this.$search.on("keydown",function(e){r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(t){e(this).off("keyup")}),this.$search.on("keyup input",function(e){r.handleSearch(e)}),n.on("open",function(){r.$search.attr("tabindex",0),r.$search.focus(),window.setTimeout(function(){r.$search.focus()},0)}),n.on("close",function(){r.$search.attr("tabindex",-1),r.$search.val("")}),n.on("focus",function(){n.isOpen()&&r.$search.focus()}),n.on("results:all",function(e){if(null==e.query.term||""===e.query.term){var t=r.showSearch(e);t?r.$searchContainer.removeClass("select2-search--hide"):r.$searchContainer.addClass("select2-search--hide")}})},n.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.showSearch=function(e,t){return!0},n}),t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;i>=0;i--){var r=t[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},e}),t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return t.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&this.$results.append(this.$loadingMore)},t.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),n.on("query",function(e){r.lastParams=e,r.loading=!0}),n.on("query:append",function(e){r.lastParams=e,r.loading=!0}),this.$results.on("scroll",function(){var t=e.contains(document.documentElement,r.$loadingMore[0]);if(!r.loading&&t){var n=r.$results.offset().top+r.$results.outerHeight(!1),i=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(!1);n+50>=i&&r.loadMore()}})},t.prototype.loadMore=function(){this.loading=!0;var t=e.extend({},{page:1},this.lastParams);t.page++,this.trigger("query:append",t)},t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},t.prototype.createLoadingMore=function(){var t=e('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return t.html(n(this.lastParams)),t},t}),t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function n(t,n,i){this.$dropdownParent=i.get("dropdownParent")||e(document.body),t.call(this,n,i)}return n.prototype.bind=function(e,t,n){var i=this,r=!1;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),r||(r=!0,t.on("results:all",function(){i._positionDropdown(),i._resizeDropdown()}),t.on("results:append",function(){i._positionDropdown(),i._resizeDropdown()}))}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},n.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t.removeClass("select2"),t.addClass("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(t){var n=e("<span></span>"),i=t.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},n.prototype._attachPositioningHandler=function(n,i){var r=this,a="scroll.select2."+i.id,o="resize.select2."+i.id,s="orientationchange.select2."+i.id,l=this.$container.parents().filter(t.hasScroll);l.each(function(){e(this).data("select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})}),l.on(a,function(t){var n=e(this).data("select2-scroll-position");e(this).scrollTop(n.y)}),e(window).on(a+" "+o+" "+s,function(e){r._positionDropdown(),r._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var r="scroll.select2."+i.id,a="resize.select2."+i.id,o="orientationchange.select2."+i.id,s=this.$container.parents().filter(t.hasScroll);s.off(r),e(window).off(r+" "+a+" "+o)},n.prototype._positionDropdown=function(){var t=e(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),r=null,a=this.$container.offset();a.bottom=a.top+this.$container.outerHeight(!1);var o={height:this.$container.outerHeight(!1)};o.top=a.top,o.bottom=a.top+o.height;var s={height:this.$dropdown.outerHeight(!1)},l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()},d=l.top<a.top-s.height,u=l.bottom>a.bottom+s.height,c={left:a.left,top:o.bottom},h=this.$dropdownParent;"static"===h.css("position")&&(h=h.offsetParent());var p=h.offset();c.top-=p.top,c.left-=p.left,n||i||(r="below"),u||!d||n?!d&&u&&n&&(r="below"):r="above",("above"==r||n&&"below"!==r)&&(c.top=o.top-p.top-s.height),null!=r&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)),this.$dropdownContainer.css(c)},n.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.position="relative",e.width="auto"),this.$dropdown.css(e)},n.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(t){for(var n=0,i=0;i<t.length;i++){var r=t[i];r.children?n+=e(r.children):n++}return n}function t(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return t.prototype.showSearch=function(t,n){return!(e(n.data.results)<this.minimumResultsForSearch)&&t.call(this,n);
},t}),t.define("select2/dropdown/selectOnClose",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(e){i._handleSelectOnClose(e)})},e.prototype._handleSelectOnClose=function(e,t){if(t&&null!=t.originalSelect2Event){var n=t.originalSelect2Event;if("select"===n._type||"unselect"===n._type)return}var i=this.getHighlightedResults();if(!(i.length<1)){var r=i.data("data");null!=r.element&&r.element.selected||null==r.element&&r.selected||this.trigger("select",{data:r})}},e}),t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&n.ctrlKey||this.trigger("close",{originalEvent:n,originalSelect2Event:t})},e}),t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,n="Please delete "+t+" character";return 1!=t&&(n+="s"),n},inputTooShort:function(e){var t=e.minimum-e.input.length,n="Please enter "+t+" or more characters";return n},loadingMore:function(){return"Loading more results…"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searching…"}}}),t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,n,i,r,a,o,s,l,d,u,c,h,p,m,f,_,y,g,v,M,L,b,w,D,k,T,Y,S){function x(){this.reset()}x.prototype.apply=function(c){if(c=e.extend(!0,{},this.defaults,c),null==c.dataAdapter){if(null!=c.ajax?c.dataAdapter=m:null!=c.data?c.dataAdapter=p:c.dataAdapter=h,c.minimumInputLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,y)),c.maximumInputLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,g)),c.maximumSelectionLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,v)),c.tags&&(c.dataAdapter=d.Decorate(c.dataAdapter,f)),null==c.tokenSeparators&&null==c.tokenizer||(c.dataAdapter=d.Decorate(c.dataAdapter,_)),null!=c.query){var S=t(c.amdBase+"compat/query");c.dataAdapter=d.Decorate(c.dataAdapter,S)}if(null!=c.initSelection){var x=t(c.amdBase+"compat/initSelection");c.dataAdapter=d.Decorate(c.dataAdapter,x)}}if(null==c.resultsAdapter&&(c.resultsAdapter=n,null!=c.ajax&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,w)),null!=c.placeholder&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,b)),c.selectOnClose&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,T))),null==c.dropdownAdapter){if(c.multiple)c.dropdownAdapter=M;else{var C=d.Decorate(M,L);c.dropdownAdapter=C}if(0!==c.minimumResultsForSearch&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,k)),c.closeOnSelect&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,Y)),null!=c.dropdownCssClass||null!=c.dropdownCss||null!=c.adaptDropdownCssClass){var E=t(c.amdBase+"compat/dropdownCss");c.dropdownAdapter=d.Decorate(c.dropdownAdapter,E)}c.dropdownAdapter=d.Decorate(c.dropdownAdapter,D)}if(null==c.selectionAdapter){if(c.multiple?c.selectionAdapter=r:c.selectionAdapter=i,null!=c.placeholder&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,a)),c.allowClear&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,o)),c.multiple&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,s)),null!=c.containerCssClass||null!=c.containerCss||null!=c.adaptContainerCssClass){var H=t(c.amdBase+"compat/containerCss");c.selectionAdapter=d.Decorate(c.selectionAdapter,H)}c.selectionAdapter=d.Decorate(c.selectionAdapter,l)}if("string"==typeof c.language)if(c.language.indexOf("-")>0){var A=c.language.split("-"),j=A[0];c.language=[c.language,j]}else c.language=[c.language];if(e.isArray(c.language)){var P=new u;c.language.push("en");for(var I=c.language,O=0;O<I.length;O++){var z=I[O],F={};try{F=u.loadPath(z)}catch(W){try{z=this.defaults.amdLanguageBase+z,F=u.loadPath(z)}catch(R){c.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+z+'" could not be automatically loaded. A fallback will be used instead.');continue}}P.extend(F)}c.translations=P}else{var $=u.loadPath(this.defaults.amdLanguageBase+"en"),N=new u(c.language);N.extend($),c.translations=N}return c},x.prototype.reset=function(){function t(e){function t(e){return c[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function n(i,r){if(""===e.trim(i.term))return r;if(r.children&&r.children.length>0){for(var a=e.extend(!0,{},r),o=r.children.length-1;o>=0;o--){var s=r.children[o],l=n(i,s);null==l&&a.children.splice(o,1)}return a.children.length>0?a:n(i,a)}var d=t(r.text).toUpperCase(),u=t(i.term).toUpperCase();return d.indexOf(u)>-1?r:null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:d.escapeMarkup,language:S,matcher:n,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},x.prototype.set=function(t,n){var i=e.camelCase(t),r={};r[i]=n;var a=d._convertData(r);e.extend(this.defaults,a)};var C=new x;return C}),t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,n,i){function r(t,r){if(this.options=t,null!=r&&this.fromElement(r),this.options=n.apply(this.options),r&&r.is("input")){var a=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,a)}}return r.prototype.fromElement=function(e){var n=["select2"];null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.language&&(e.prop("lang")?this.options.language=e.prop("lang").toLowerCase():e.closest("[lang]").prop("lang")&&(this.options.language=e.closest("[lang]").prop("lang"))),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),e.data("select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),e.data("data",e.data("select2Tags")),e.data("tags",!0)),e.data("ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",e.data("ajaxUrl")),e.data("ajax--url",e.data("ajaxUrl")));var r={};r=t.fn.jquery&&"1."==t.fn.jquery.substr(0,2)&&e[0].dataset?t.extend(!0,{},e[0].dataset,e.data()):e.data();var a=t.extend(!0,{},r);a=i._convertData(a);for(var o in a)t.inArray(o,n)>-1||(t.isPlainObject(this.options[o])?t.extend(this.options[o],a[o]):this.options[o]=a[o]);return this},r.prototype.get=function(e){return this.options[e]},r.prototype.set=function(e,t){this.options[e]=t},r}),t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,n,i){var r=function(e,n){null!=e.data("select2")&&e.data("select2").destroy(),this.$element=e,this.id=this._generateId(e),n=n||{},this.options=new t(n,e),r.__super__.constructor.call(this);var i=e.attr("tabindex")||0;e.data("old-tabindex",i),e.attr("tabindex","-1");var a=this.options.get("dataAdapter");this.dataAdapter=new a(e,this.options);var o=this.render();this._placeContainer(o);var s=this.options.get("selectionAdapter");this.selection=new s(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,o);var l=this.options.get("dropdownAdapter");this.dropdown=new l(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,o);var d=this.options.get("resultsAdapter");this.results=new d(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){u.trigger("selection:update",{data:e})}),e.addClass("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),e.data("select2",this)};return n.Extend(r,n.Observable),r.prototype._generateId=function(e){var t="";return t=null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+n.generateChars(2):n.generateChars(4),t=t.replace(/(:|\.|\[|\]|,)/g,""),t="select2-"+t},r.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},r.prototype._resolveWidth=function(e,t){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t){var i=this._resolveWidth(e,"style");return null!=i?i:this._resolveWidth(e,"element")}if("element"==t){var r=e.outerWidth(!1);return r<=0?"auto":r+"px"}if("style"==t){var a=e.attr("style");if("string"!=typeof a)return null;for(var o=a.split(";"),s=0,l=o.length;s<l;s+=1){var d=o[s].replace(/\s/g,""),u=d.match(n);if(null!==u&&u.length>=1)return u[1]}return null}return t},r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},r.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})}),this.$element.on("focus.select2",function(e){t.trigger("focus",e)}),this._syncA=n.bind(this._syncAttributes,this),this._syncS=n.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var i=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=i?(this._observer=new i(function(n){e.each(n,t._syncA),e.each(n,t._syncS)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",t._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",t._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,!1))},r.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerSelectionEvents=function(){var t=this,n=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()}),this.selection.on("focus",function(e){t.focus(e)}),this.selection.on("*",function(i,r){e.inArray(i,n)===-1&&t.trigger(i,r)})},r.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")}),this.on("close",function(){e.$container.removeClass("select2-container--open")}),this.on("enable",function(){e.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){e.$container.addClass("select2-container--disabled")}),this.on("blur",function(){e.$container.removeClass("select2-container--focus")}),this.on("query",function(t){e.isOpen()||e.trigger("open",{}),this.dataAdapter.query(t,function(n){e.trigger("results:all",{data:n,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(n){e.trigger("results:append",{data:n,query:t})})}),this.on("keypress",function(t){var n=t.which;e.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&t.altKey?(e.close(),t.preventDefault()):n===i.ENTER?(e.trigger("results:select",{}),t.preventDefault()):n===i.SPACE&&t.ctrlKey?(e.trigger("results:toggle",{}),t.preventDefault()):n===i.UP?(e.trigger("results:previous",{}),t.preventDefault()):n===i.DOWN&&(e.trigger("results:next",{}),t.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&t.altKey)&&(e.open(),t.preventDefault())})},r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},r.prototype._syncSubtree=function(e,t){var n=!1,i=this;if(!e||!e.target||"OPTION"===e.target.nodeName||"OPTGROUP"===e.target.nodeName){if(t)if(t.addedNodes&&t.addedNodes.length>0)for(var r=0;r<t.addedNodes.length;r++){var a=t.addedNodes[r];a.selected&&(n=!0)}else t.removedNodes&&t.removedNodes.length>0&&(n=!0);else n=!0;n&&this.dataAdapter.current(function(e){i.trigger("selection:update",{data:e})})}},r.prototype.trigger=function(e,t){var n=r.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(void 0===t&&(t={}),e in i){var a=i[e],o={prevented:!1,name:e,args:t};if(n.call(this,a,o),o.prevented)return void(t.prevented=!0)}n.call(this,e,t)},r.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},r.prototype.open=function(){this.isOpen()||this.trigger("query",{})},r.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},r.prototype.focus=function(e){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},r.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=e&&0!==e.length||(e=[!0]);var t=!e[0];this.$element.prop("disabled",t)},r.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var e=[];return this.dataAdapter.current(function(t){e=t}),e},r.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==t||0===t.length)return this.$element.val();var n=t[0];e.isArray(n)&&(n=e.map(n,function(e){return e.toString()})),this.$element.val(n).trigger("change")},r.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",this.$element.data("old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},r.prototype.render=function(){var t=e('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return t.attr("dir",this.options.get("dir")),this.$container=t,this.$container.addClass("select2-container--"+this.options.get("theme")),t.data("element",this.$element),t},r}),t.define("jquery-mousewheel",["jquery"],function(e){return e}),t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(e,t,n,i){if(null==e.fn.select2){var r=["open","close","destroy"];e.fn.select2=function(t){if(t=t||{},"object"==typeof t)return this.each(function(){var i=e.extend(!0,{},t);new n(e(this),i)}),this;if("string"==typeof t){var i,a=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=e(this).data("select2");null==n&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2."),i=n[t].apply(n,a)}),e.inArray(t,r)>-1?this:i}throw new Error("Invalid arguments for Select2: "+t)}}return null==e.fn.select2.defaults&&(e.fn.select2.defaults=i),n}),{define:t.define,require:t.require}}(),n=t.require("jquery.select2");return e.fn.select2.amd=t,n}),function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var e=jQuery.fn.select2.amd;return e.define("select2/i18n/ru",[],function(){function e(e,t,n,i){return e%10<5&&e%10>0&&e%100<5||e%100>20?e%10>1?n:t:i}return{errorLoading:function(){return"Невозможно загрузить результаты"},inputTooLong:function(t){var n=t.input.length-t.maximum,i="Пожалуйста, введите на "+n+" символ";return i+=e(n,"","a","ов"),i+=" меньше"},inputTooShort:function(t){var n=t.minimum-t.input.length,i="Пожалуйста, введите еще хотя бы "+n+" символ";return i+=e(n,"","a","ов")},loadingMore:function(){return"Загрузка данных…"},maximumSelected:function(t){var n="Вы можете выбрать не более "+t.maximum+" элемент";return n+=e(t.maximum,"","a","ов")},noResults:function(){return"Совпадений не найдено"},searching:function(){return"Поиск…"}}}),{define:e.define,require:e.require}}(),function(e){function t(t,n,i){var r=e.Event(n);return t.trigger(r,i),r.result!==!1}e(document).on("click","[data-trigger='modal'], [data-trigger='nifty']",function(){var t=e(this).data("target");e(t).nifty("show")}),e(document).on("click",".md-overlay",function(){e(".nifty-modal.md-show").nifty("hide")}),e(document).on("click",".nifty-modal.md-show .md-close",function(){e(this).closest(".nifty-modal.md-show").nifty("hide")}),e.fn.extend({nifty:function(n){var i=this,r="transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",a=function(n){var a=!1;if(t(e(i),"show.nifty.modal")){e(i).one(r,function(t){a||(a=!0,t.preventDefault(),t.stopPropagation(),e(i).trigger("shown.nifty.modal"))});var o=Math.floor(e(i).width()/2),s=Math.floor(e(i).height()/2);e(".nifty-modal").css("transform","translateX(-"+o+"px) translateY(-"+s+"px)"),e(i).addClass("md-show")}},o=function(){var n=!1;t(e(i),"hide.nifty.modal")&&(e(i).one(r,function(t){n||(n=!0,t.preventDefault(),t.stopPropagation(),e(i).trigger("hidden.nifty.modal"))}),e(i).removeClass("md-show"))};return"show"==n?a():"hide"==n&&o(),this}})}(jQuery),function(){var e;e=function(){function e(e,t){var n,i;if(this.options={target:"instafeed",get:"popular",resolution:"thumbnail",sortBy:"none",links:!0,mock:!1,useHttp:!1},"object"==typeof e)for(n in e)i=e[n],this.options[n]=i;this.context=null!=t?t:this,this.unique=this._genKey()}return e.prototype.hasNext=function(){return"string"==typeof this.context.nextUrl&&this.context.nextUrl.length>0},e.prototype.next=function(){return!!this.hasNext()&&this.run(this.context.nextUrl)},e.prototype.run=function(t){var n,i,r;if("string"!=typeof this.options.clientId&&"string"!=typeof this.options.accessToken)throw new Error("Missing clientId or accessToken.");if("string"!=typeof this.options.accessToken&&"string"!=typeof this.options.clientId)throw new Error("Missing clientId or accessToken.");return null!=this.options.before&&"function"==typeof this.options.before&&this.options.before.call(this),"undefined"!=typeof document&&null!==document&&(r=document.createElement("script"),r.id="instafeed-fetcher",r.src=t||this._buildUrl(),n=document.getElementsByTagName("head"),n[0].appendChild(r),i="instafeedCache"+this.unique,window[i]=new e(this.options,this),window[i].unique=this.unique),!0},e.prototype.parse=function(e){var t,n,i,r,a,o,s,l,d,u,c,h,p,m,f,_,y,g,v,M,L,b,w,D,k,T,Y,S,x,C,E,H,A;if("object"!=typeof e){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"Invalid JSON data"),!1;throw new Error("Invalid JSON response")}if(200!==e.meta.code){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,e.meta.error_message),!1;throw new Error("Error from Instagram: "+e.meta.error_message)}if(0===e.data.length){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"No images were returned from Instagram"),!1;throw new Error("No images were returned from Instagram")}if(null!=this.options.success&&"function"==typeof this.options.success&&this.options.success.call(this,e),this.context.nextUrl="",null!=e.pagination&&(this.context.nextUrl=e.pagination.next_url),"none"!==this.options.sortBy)switch(E="random"===this.options.sortBy?["","random"]:this.options.sortBy.split("-"),C="least"===E[0],E[1]){case"random":e.data.sort(function(){return.5-Math.random()});break;case"recent":e.data=this._sortBy(e.data,"created_time",C);break;case"liked":e.data=this._sortBy(e.data,"likes.count",C);break;case"commented":e.data=this._sortBy(e.data,"comments.count",C);break;default:throw new Error("Invalid option for sortBy: '"+this.options.sortBy+"'.")}if("undefined"!=typeof document&&null!==document&&this.options.mock===!1){if(_=e.data,x=parseInt(this.options.limit,10),null!=this.options.limit&&_.length>x&&(_=_.slice(0,x)),s=document.createDocumentFragment(),null!=this.options.filter&&"function"==typeof this.options.filter&&(_=this._filter(_,this.options.filter)),null!=this.options.template&&"string"==typeof this.options.template){for(d="",m="",M="",A=document.createElement("div"),c=0,k=_.length;c<k;c++){if(h=_[c],p=h.images[this.options.resolution],"object"!=typeof p)throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);L=p.width,g=p.height,v="square",L>g&&(v="landscape"),L<g&&(v="portrait"),f=p.url,u=window.location.protocol.indexOf("http")>=0,u&&!this.options.useHttp&&(f=f.replace(/https?:\/\//,"//")),m=this._makeTemplate(this.options.template,{model:h,id:h.id,link:h.link,type:h.type,image:f,width:L,height:g,orientation:v,caption:this._getObjectProperty(h,"caption.text"),likes:h.likes.count,comments:h.comments.count,location:this._getObjectProperty(h,"location.name")}),d+=m}for(A.innerHTML=d,r=[],i=0,n=A.childNodes.length;i<n;)r.push(A.childNodes[i]),i+=1;for(w=0,T=r.length;w<T;w++)S=r[w],s.appendChild(S)}else for(D=0,Y=_.length;D<Y;D++){if(h=_[D],y=document.createElement("img"),p=h.images[this.options.resolution],"object"!=typeof p)throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);f=p.url,u=window.location.protocol.indexOf("http")>=0,u&&!this.options.useHttp&&(f=f.replace(/https?:\/\//,"//")),y.src=f,this.options.links===!0?(t=document.createElement("a"),t.href=h.link,t.appendChild(y),s.appendChild(t)):s.appendChild(y)}if(H=this.options.target,"string"==typeof H&&(H=document.getElementById(H)),null==H)throw o='No element with id="'+this.options.target+'" on page.',new Error(o);H.appendChild(s),l=document.getElementsByTagName("head")[0],l.removeChild(document.getElementById("instafeed-fetcher")),b="instafeedCache"+this.unique,window[b]=void 0;try{delete window[b]}catch(j){a=j}}return null!=this.options.after&&"function"==typeof this.options.after&&this.options.after.call(this),!0},e.prototype._buildUrl=function(){var e,t,n;switch(e="https://api.instagram.com/v1",this.options.get){case"popular":t="media/popular";break;case"tagged":if(!this.options.tagName)throw new Error("No tag name specified. Use the 'tagName' option.");t="tags/"+this.options.tagName+"/media/recent";break;case"location":if(!this.options.locationId)throw new Error("No location specified. Use the 'locationId' option.");t="locations/"+this.options.locationId+"/media/recent";break;case"user":if(!this.options.userId)throw new Error("No user specified. Use the 'userId' option.");t="users/"+this.options.userId+"/media/recent";break;default:throw new Error("Invalid option for get: '"+this.options.get+"'.")}return n=e+"/"+t,n+=null!=this.options.accessToken?"?access_token="+this.options.accessToken:"?client_id="+this.options.clientId,null!=this.options.limit&&(n+="&count="+this.options.limit),n+="&callback=instafeedCache"+this.unique+".parse"},e.prototype._genKey=function(){var e;return e=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)},""+e()+e()+e()+e()},e.prototype._makeTemplate=function(e,t){var n,i,r,a,o;for(i=/(?:\{{2})([\w\[\]\.]+)(?:\}{2})/,n=e;i.test(n);)a=n.match(i)[1],o=null!=(r=this._getObjectProperty(t,a))?r:"",n=n.replace(i,function(){return""+o});return n},e.prototype._getObjectProperty=function(e,t){var n,i;for(t=t.replace(/\[(\w+)\]/g,".$1"),i=t.split(".");i.length;){if(n=i.shift(),!(null!=e&&n in e))return null;e=e[n]}return e},e.prototype._sortBy=function(e,t,n){var i;return i=function(e,i){var r,a;return r=this._getObjectProperty(e,t),a=this._getObjectProperty(i,t),n?r>a?1:-1:r<a?1:-1},e.sort(i.bind(this)),e},e.prototype._filter=function(e,t){var n,i,r,a,o;for(n=[],i=function(e){if(t(e))return n.push(e)},r=0,o=e.length;r<o;r++)a=e[r],i(a);return n},e}(),function(e,t){return"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&module.exports?module.exports=t():e.Instafeed=t()}(this,function(){return e})}.call(this),!function(e,t,n){"use strict";!function i(e,t,n){function r(o,s){if(!t[o]){if(!e[o]){var l="function"==typeof require&&require;if(!s&&l)return l(o,!0);if(a)return a(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var u=t[o]={exports:{}};e[o][0].call(u.exports,function(t){var n=e[o][1][t];return r(n?n:t)},u,u.exports,i,e,t,n)}return t[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(i,r,a){var o=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(a,"__esModule",{value:!0});var s,l,d,u,c=i("./modules/handle-dom"),h=i("./modules/utils"),p=i("./modules/handle-swal-dom"),m=i("./modules/handle-click"),f=i("./modules/handle-key"),_=o(f),y=i("./modules/default-params"),g=o(y),v=i("./modules/set-params"),M=o(v);a["default"]=d=u=function(){function i(e){var t=r;return t[e]===n?g["default"][e]:t[e]}var r=arguments[0];if(c.addClass(t.body,"stop-scrolling"),p.resetInput(),r===n)return h.logStr("SweetAlert expects at least 1 attribute!"),!1;var a=h.extend({},g["default"]);switch(typeof r){case"string":a.title=r,a.text=arguments[1]||"",a.type=arguments[2]||"";break;case"object":if(r.title===n)return h.logStr('Missing "title" argument!'),!1;a.title=r.title;for(var o in g["default"])a[o]=i(o);a.confirmButtonText=a.showCancelButton?"Confirm":g["default"].confirmButtonText,a.confirmButtonText=i("confirmButtonText"),a.doneFunction=arguments[1]||null;break;default:return h.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof r),!1}M["default"](a),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var d=p.getModal(),f=d.querySelectorAll("button"),y=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],v=function(e){return m.handleButton(e,a,d)},L=0;L<f.length;L++)for(var b=0;b<y.length;b++){var w=y[b];f[L][w]=v}p.getOverlay().onclick=v,s=e.onkeydown;var D=function(e){return _["default"](e,a,d)};e.onkeydown=D,e.onfocus=function(){setTimeout(function(){l!==n&&(l.focus(),l=n)},0)},u.enableButtons()},d.setDefaults=u.setDefaults=function(e){if(!e)throw new Error("userParams is required");if("object"!=typeof e)throw new Error("userParams has to be a object");h.extend(g["default"],e)},d.close=u.close=function(){var i=p.getModal();c.fadeOut(p.getOverlay(),5),c.fadeOut(i,5),c.removeClass(i,"showSweetAlert"),c.addClass(i,"hideSweetAlert"),c.removeClass(i,"visible");var r=i.querySelector(".sa-icon.sa-success");c.removeClass(r,"animate"),c.removeClass(r.querySelector(".sa-tip"),"animateSuccessTip"),c.removeClass(r.querySelector(".sa-long"),"animateSuccessLong");var a=i.querySelector(".sa-icon.sa-error");c.removeClass(a,"animateErrorIcon"),c.removeClass(a.querySelector(".sa-x-mark"),"animateXMark");var o=i.querySelector(".sa-icon.sa-warning");return c.removeClass(o,"pulseWarning"),c.removeClass(o.querySelector(".sa-body"),"pulseWarningIns"),c.removeClass(o.querySelector(".sa-dot"),"pulseWarningIns"),setTimeout(function(){var e=i.getAttribute("data-custom-class");c.removeClass(i,e)},300),c.removeClass(t.body,"stop-scrolling"),e.onkeydown=s,e.previousActiveElement&&e.previousActiveElement.focus(),l=n,clearTimeout(i.timeout),!0},d.showInputError=u.showInputError=function(e){var t=p.getModal(),n=t.querySelector(".sa-input-error");c.addClass(n,"show");var i=t.querySelector(".sa-error-container");c.addClass(i,"show"),i.querySelector("p").innerHTML=e,setTimeout(function(){d.enableButtons()},1),t.querySelector("input").focus()},d.resetInputError=u.resetInputError=function(e){if(e&&13===e.keyCode)return!1;var t=p.getModal(),n=t.querySelector(".sa-input-error");c.removeClass(n,"show");var i=t.querySelector(".sa-error-container");c.removeClass(i,"show")},d.disableButtons=u.disableButtons=function(){var e=p.getModal(),t=e.querySelector("button.confirm"),n=e.querySelector("button.cancel");t.disabled=!0,n.disabled=!0},d.enableButtons=u.enableButtons=function(){var e=p.getModal(),t=e.querySelector("button.confirm"),n=e.querySelector("button.cancel");t.disabled=!1,n.disabled=!1},"undefined"!=typeof e?e.sweetAlert=e.swal=d:h.logStr("SweetAlert is a frontend module!"),r.exports=a["default"]},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};n["default"]=i,t.exports=n["default"]},{}],3:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=t("./utils"),a=(t("./handle-swal-dom"),t("./handle-dom")),o=function(t,n,i){function o(e){m&&n.confirmButtonColor&&(p.style.backgroundColor=e)}var d,u,c,h=t||e.event,p=h.target||h.srcElement,m=-1!==p.className.indexOf("confirm"),f=-1!==p.className.indexOf("sweet-overlay"),_=a.hasClass(i,"visible"),y=n.doneFunction&&"true"===i.getAttribute("data-has-done-function");switch(m&&n.confirmButtonColor&&(d=n.confirmButtonColor,u=r.colorLuminance(d,-.04),c=r.colorLuminance(d,-.14)),h.type){case"mouseover":o(u);break;case"mouseout":o(d);break;case"mousedown":o(c);break;case"mouseup":o(u);break;case"focus":var g=i.querySelector("button.confirm"),v=i.querySelector("button.cancel");
m?v.style.boxShadow="none":g.style.boxShadow="none";break;case"click":var M=i===p,L=a.isDescendant(i,p);if(!M&&!L&&_&&!n.allowOutsideClick)break;m&&y&&_?s(i,n):y&&_||f?l(i,n):a.isDescendant(i,p)&&"BUTTON"===p.tagName&&sweetAlert.close()}},s=function(e,t){var n=!0;a.hasClass(e,"show-input")&&(n=e.querySelector("input").value,n||(n="")),t.doneFunction(n),t.closeOnConfirm&&sweetAlert.close(),t.showLoaderOnConfirm&&sweetAlert.disableButtons()},l=function(e,t){var n=String(t.doneFunction).replace(/\s/g,""),i="function("===n.substring(0,9)&&")"!==n.substring(9,10);i&&t.doneFunction(!1),t.closeOnCancel&&sweetAlert.close()};i["default"]={handleButton:o,handleConfirm:s,handleCancel:l},n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(n,i,r){Object.defineProperty(r,"__esModule",{value:!0});var a=function(e,t){return new RegExp(" "+t+" ").test(" "+e.className+" ")},o=function(e,t){a(e,t)||(e.className+=" "+t)},s=function(e,t){var n=" "+e.className.replace(/[\t\r\n]/g," ")+" ";if(a(e,t)){for(;n.indexOf(" "+t+" ")>=0;)n=n.replace(" "+t+" "," ");e.className=n.replace(/^\s+|\s+$/g,"")}},l=function(e){var n=t.createElement("div");return n.appendChild(t.createTextNode(e)),n.innerHTML},d=function(e){e.style.opacity="",e.style.display="block"},u=function(e){if(e&&!e.length)return d(e);for(var t=0;t<e.length;++t)d(e[t])},c=function(e){e.style.opacity="",e.style.display="none"},h=function(e){if(e&&!e.length)return c(e);for(var t=0;t<e.length;++t)c(e[t])},p=function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},m=function(e){e.style.left="-9999px",e.style.display="block";var t,n=e.clientHeight;return t="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(e).getPropertyValue("padding-top"),10):parseInt(e.currentStyle.padding),e.style.left="",e.style.display="none","-"+parseInt((n+t)/2)+"px"},f=function(e,t){if(+e.style.opacity<1){t=t||16,e.style.opacity=0,e.style.display="block";var n=+new Date,i=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity+(new Date-n)/100,n=+new Date,+e.style.opacity<1&&setTimeout(i,t)});i()}e.style.display="block"},_=function(e,t){t=t||16,e.style.opacity=1;var n=+new Date,i=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity-(new Date-n)/100,n=+new Date,+e.style.opacity>0?setTimeout(i,t):e.style.display="none"});i()},y=function(n){if("function"==typeof MouseEvent){var i=new MouseEvent("click",{view:e,bubbles:!1,cancelable:!0});n.dispatchEvent(i)}else if(t.createEvent){var r=t.createEvent("MouseEvents");r.initEvent("click",!1,!1),n.dispatchEvent(r)}else t.createEventObject?n.fireEvent("onclick"):"function"==typeof n.onclick&&n.onclick()},g=function(t){"function"==typeof t.stopPropagation?(t.stopPropagation(),t.preventDefault()):e.event&&e.event.hasOwnProperty("cancelBubble")&&(e.event.cancelBubble=!0)};r.hasClass=a,r.addClass=o,r.removeClass=s,r.escapeHtml=l,r._show=d,r.show=u,r._hide=c,r.hide=h,r.isDescendant=p,r.getTopMargin=m,r.fadeIn=f,r.fadeOut=_,r.fireClick=y,r.stopEventPropagation=g},{}],5:[function(t,i,r){Object.defineProperty(r,"__esModule",{value:!0});var a=t("./handle-dom"),o=t("./handle-swal-dom"),s=function(t,i,r){var s=t||e.event,l=s.keyCode||s.which,d=r.querySelector("button.confirm"),u=r.querySelector("button.cancel"),c=r.querySelectorAll("button[tabindex]");if(-1!==[9,13,32,27].indexOf(l)){for(var h=s.target||s.srcElement,p=-1,m=0;m<c.length;m++)if(h===c[m]){p=m;break}9===l?(h=-1===p?d:p===c.length-1?c[0]:c[p+1],a.stopEventPropagation(s),h.focus(),i.confirmButtonColor&&o.setFocusStyle(h,i.confirmButtonColor)):13===l?("INPUT"===h.tagName&&(h=d,d.focus()),h=-1===p?d:n):27===l&&i.allowEscapeKey===!0?(h=u,a.fireClick(h,s)):h=n}};r["default"]=s,i.exports=r["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(n,i,r){var a=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(r,"__esModule",{value:!0});var o=n("./utils"),s=n("./handle-dom"),l=n("./default-params"),d=a(l),u=n("./injected-html"),c=a(u),h=".sweet-alert",p=".sweet-overlay",m=function(){var e=t.createElement("div");for(e.innerHTML=c["default"];e.firstChild;)t.body.appendChild(e.firstChild)},f=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=t.querySelector(h);return e||(m(),e=f()),e}),_=function(){var e=f();return e?e.querySelector("input"):void 0},y=function(){return t.querySelector(p)},g=function(e,t){var n=o.hexToRgb(t);e.style.boxShadow="0 0 2px rgba("+n+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},v=function(n){var i=f();s.fadeIn(y(),10),s.show(i),s.addClass(i,"showSweetAlert"),s.removeClass(i,"hideSweetAlert"),e.previousActiveElement=t.activeElement;var r=i.querySelector("button.confirm");r.focus(),setTimeout(function(){s.addClass(i,"visible")},500);var a=i.getAttribute("data-timer");if("null"!==a&&""!==a){var o=n;i.timeout=setTimeout(function(){var e=(o||null)&&"true"===i.getAttribute("data-has-done-function");e?o(null):sweetAlert.close()},a)}},M=function(){var e=f(),t=_();s.removeClass(e,"show-input"),t.value=d["default"].inputValue,t.setAttribute("type",d["default"].inputType),t.setAttribute("placeholder",d["default"].inputPlaceholder),L()},L=function(e){if(e&&13===e.keyCode)return!1;var t=f(),n=t.querySelector(".sa-input-error");s.removeClass(n,"show");var i=t.querySelector(".sa-error-container");s.removeClass(i,"show")},b=function(){var e=f();e.style.marginTop=s.getTopMargin(f())};r.sweetAlertInitialize=m,r.getModal=f,r.getOverlay=y,r.getInput=_,r.setFocusStyle=g,r.openModal=v,r.resetInput=M,r.resetInputError=L,r.fixVerticalPosition=b},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"]=i,t.exports=n["default"]},{}],8:[function(e,t,i){Object.defineProperty(i,"__esModule",{value:!0});var r=e("./utils"),a=e("./handle-swal-dom"),o=e("./handle-dom"),s=["error","warning","info","success","input","prompt"],l=function(e){var t=a.getModal(),i=t.querySelector("h2"),l=t.querySelector("p"),d=t.querySelector("button.cancel"),u=t.querySelector("button.confirm");if(i.innerHTML=e.html?e.title:o.escapeHtml(e.title).split("\n").join("<br>"),l.innerHTML=e.html?e.text:o.escapeHtml(e.text||"").split("\n").join("<br>"),e.text&&o.show(l),e.customClass)o.addClass(t,e.customClass),t.setAttribute("data-custom-class",e.customClass);else{var c=t.getAttribute("data-custom-class");o.removeClass(t,c),t.setAttribute("data-custom-class","")}if(o.hide(t.querySelectorAll(".sa-icon")),e.type&&!r.isIE8()){var h=function(){for(var i=!1,r=0;r<s.length;r++)if(e.type===s[r]){i=!0;break}if(!i)return logStr("Unknown alert type: "+e.type),{v:!1};var l=["success","error","warning","info"],d=n;-1!==l.indexOf(e.type)&&(d=t.querySelector(".sa-icon.sa-"+e.type),o.show(d));var u=a.getInput();switch(e.type){case"success":o.addClass(d,"animate"),o.addClass(d.querySelector(".sa-tip"),"animateSuccessTip"),o.addClass(d.querySelector(".sa-long"),"animateSuccessLong");break;case"error":o.addClass(d,"animateErrorIcon"),o.addClass(d.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":o.addClass(d,"pulseWarning"),o.addClass(d.querySelector(".sa-body"),"pulseWarningIns"),o.addClass(d.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":u.setAttribute("type",e.inputType),u.value=e.inputValue,u.setAttribute("placeholder",e.inputPlaceholder),o.addClass(t,"show-input"),setTimeout(function(){u.focus(),u.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof h)return h.v}if(e.imageUrl){var p=t.querySelector(".sa-icon.sa-custom");p.style.backgroundImage="url("+e.imageUrl+")",o.show(p);var m=80,f=80;if(e.imageSize){var _=e.imageSize.toString().split("x"),y=_[0],g=_[1];y&&g?(m=y,f=g):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+e.imageSize)}p.setAttribute("style",p.getAttribute("style")+"width:"+m+"px; height:"+f+"px")}t.setAttribute("data-has-cancel-button",e.showCancelButton),e.showCancelButton?d.style.display="inline-block":o.hide(d),t.setAttribute("data-has-confirm-button",e.showConfirmButton),e.showConfirmButton?u.style.display="inline-block":o.hide(u),e.cancelButtonText&&(d.innerHTML=o.escapeHtml(e.cancelButtonText)),e.confirmButtonText&&(u.innerHTML=o.escapeHtml(e.confirmButtonText)),e.confirmButtonColor&&(u.style.backgroundColor=e.confirmButtonColor,u.style.borderLeftColor=e.confirmLoadingButtonColor,u.style.borderRightColor=e.confirmLoadingButtonColor,a.setFocusStyle(u,e.confirmButtonColor)),t.setAttribute("data-allow-outside-click",e.allowOutsideClick);var v=!!e.doneFunction;t.setAttribute("data-has-done-function",v),e.animation?"string"==typeof e.animation?t.setAttribute("data-animation",e.animation):t.setAttribute("data-animation","pop"):t.setAttribute("data-animation","none"),t.setAttribute("data-timer",e.timer)};i["default"]=l,t.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},a=function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?parseInt(t[1],16)+", "+parseInt(t[2],16)+", "+parseInt(t[3],16):null},o=function(){return e.attachEvent&&!e.addEventListener},s=function(t){e.console&&e.console.log("SweetAlert: "+t)},l=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,""),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;var n,i,r="#";for(i=0;3>i;i++)n=parseInt(e.substr(2*i,2),16),n=Math.round(Math.min(Math.max(0,n+n*t),255)).toString(16),r+=("00"+n).substr(n.length);return r};i.extend=r,i.hexToRgb=a,i.isIE8=o,i.logStr=s,i.colorLuminance=l},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document),function(e){e.fn.fitText=function(t,n){var i=t||1,r=e.extend({minFontSize:Number.NEGATIVE_INFINITY,maxFontSize:Number.POSITIVE_INFINITY},n);return this.each(function(){var t=e(this),n=function(){t.css("font-size",Math.max(Math.min(t.width()/(10*i),parseFloat(r.maxFontSize)),parseFloat(r.minFontSize)))};n(),e(window).on("resize.fittext orientationchange.fittext",n)})}}(jQuery),!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t,n=navigator.userAgent,i=/iphone/i.test(n),r=/chrome/i.test(n),a=/android/i.test(n);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(n,o){var s,l,d,u,c,h,p,m;if(!n&&this.length>0){s=e(this[0]);var f=s.data(e.mask.dataName);return f?f():void 0}return o=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},o),l=e.mask.definitions,d=[],u=p=n.length,c=null,e.each(n.split(""),function(e,t){"?"==t?(p--,u=e):l[t]?(d.push(new RegExp(l[t])),null===c&&(c=d.length-1),u>e&&(h=d.length-1)):d.push(null)}),this.trigger("unmask").each(function(){function s(){if(o.completed){for(var e=c;h>=e;e++)if(d[e]&&S[e]===f(e))return;o.completed.call(Y)}}function f(e){return o.placeholder.charAt(e<o.placeholder.length?e:0)}function _(e){for(;++e<p&&!d[e];);return e}function y(e){for(;--e>=0&&!d[e];);return e}function g(e,t){var n,i;if(!(0>e)){for(n=e,i=_(t);p>n;n++)if(d[n]){if(!(p>i&&d[n].test(S[i])))break;S[n]=S[i],S[i]=f(i),i=_(i)}k(),Y.caret(Math.max(c,e))}}function v(e){var t,n,i,r;for(t=e,n=f(e);p>t;t++)if(d[t]){if(i=_(t),r=S[t],S[t]=n,!(p>i&&d[i].test(r)))break;n=r}}function M(){var e=Y.val(),t=Y.caret();if(m&&m.length&&m.length>e.length){for(T(!0);t.begin>0&&!d[t.begin-1];)t.begin--;if(0===t.begin)for(;t.begin<c&&!d[t.begin];)t.begin++;Y.caret(t.begin,t.begin)}else{for(T(!0);t.begin<p&&!d[t.begin];)t.begin++;Y.caret(t.begin,t.begin)}s()}function L(){T(),Y.val()!=C&&Y.change()}function b(e){if(!Y.prop("readonly")){var t,n,r,a=e.which||e.keyCode;m=Y.val(),8===a||46===a||i&&127===a?(t=Y.caret(),n=t.begin,r=t.end,r-n===0&&(n=46!==a?y(n):r=_(n-1),r=46===a?_(r):r),D(n,r),g(n,r-1),e.preventDefault()):13===a?L.call(this,e):27===a&&(Y.val(C),Y.caret(0,T()),e.preventDefault())}}function w(t){if(!Y.prop("readonly")){var n,i,r,o=t.which||t.keyCode,l=Y.caret();if(!(t.ctrlKey||t.altKey||t.metaKey||32>o)&&o&&13!==o){if(l.end-l.begin!==0&&(D(l.begin,l.end),g(l.begin,l.end-1)),n=_(l.begin-1),p>n&&(i=String.fromCharCode(o),d[n].test(i))){if(v(n),S[n]=i,k(),r=_(n),a){var u=function(){e.proxy(e.fn.caret,Y,r)()};setTimeout(u,0)}else Y.caret(r);l.begin<=h&&s()}t.preventDefault()}}}function D(e,t){var n;for(n=e;t>n&&p>n;n++)d[n]&&(S[n]=f(n))}function k(){Y.val(S.join(""))}function T(e){var t,n,i,r=Y.val(),a=-1;for(t=0,i=0;p>t;t++)if(d[t]){for(S[t]=f(t);i++<r.length;)if(n=r.charAt(i-1),d[t].test(n)){S[t]=n,a=t;break}if(i>r.length){D(t+1,p);break}}else S[t]===r.charAt(i)&&i++,u>t&&(a=t);return e?k():u>a+1?o.autoclear||S.join("")===x?(Y.val()&&Y.val(""),D(0,p)):k():(k(),Y.val(Y.val().substring(0,a+1))),u?t:c}var Y=e(this),S=e.map(n.split(""),function(e,t){return"?"!=e?l[e]?f(t):e:void 0}),x=S.join(""),C=Y.val();Y.data(e.mask.dataName,function(){return e.map(S,function(e,t){return d[t]&&e!=f(t)?e:null}).join("")}),Y.one("unmask",function(){Y.off(".mask").removeData(e.mask.dataName)}).on("focus.mask",function(){if(!Y.prop("readonly")){clearTimeout(t);var e;C=Y.val(),e=T(),t=setTimeout(function(){Y.get(0)===document.activeElement&&(k(),e==n.replace("?","").length?Y.caret(0,e):Y.caret(e))},10)}}).on("blur.mask",L).on("keydown.mask",b).on("keypress.mask",w).on("input.mask paste.mask",function(){Y.prop("readonly")||setTimeout(function(){var e=T(!0);Y.caret(e),s()},0)}),r&&a&&Y.off("input.mask").on("input.mask",M),T()})}})}),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return hr.apply(null,arguments)}function t(e){hr=e}function n(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function r(e){var t;for(t in e)return!1;return!0}function a(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function o(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function s(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function u(e,t,n,i){return yt(e,t,n,i,!0).utc()}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function h(e){return null==e._pf&&(e._pf=c()),e._pf}function p(e){if(null==e._isValid){var t=h(e),n=mr.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function m(e){var t=u(NaN);return null!=e?d(h(t),e):h(t).userInvalidated=!0,t}function f(e){return void 0===e}function _(e,t){var n,i,r;if(f(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),f(t._i)||(e._i=t._i),f(t._f)||(e._f=t._f),f(t._l)||(e._l=t._l),f(t._strict)||(e._strict=t._strict),f(t._tzm)||(e._tzm=t._tzm),f(t._isUTC)||(e._isUTC=t._isUTC),f(t._offset)||(e._offset=t._offset),f(t._pf)||(e._pf=h(t)),f(t._locale)||(e._locale=t._locale),fr.length>0)for(n in fr)i=fr[n],r=t[i],f(r)||(e[i]=r);return e}function y(t){_(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),_r===!1&&(_r=!0,e.updateOffset(this),_r=!1)}function g(e){return e instanceof y||null!=e&&null!=e._isAMomentObject}function v(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function M(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=v(t)),n}function L(e,t,n){var i,r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),o=0;for(i=0;i<r;i++)(n&&e[i]!==t[i]||!n&&M(e[i])!==M(t[i]))&&o++;return o+a}function b(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function w(t,n){var i=!0;return d(function(){if(null!=e.deprecationHandler&&e.deprecationHandler(null,t),i){for(var r,a=[],o=0;o<arguments.length;o++){if(r="","object"==typeof arguments[o]){r+="\n["+o+"] ";for(var s in arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[o];a.push(r)}b(t+"\nArguments: "+Array.prototype.slice.call(a).join("")+"\n"+(new Error).stack),i=!1}return n.apply(this,arguments)},n)}function D(t,n){null!=e.deprecationHandler&&e.deprecationHandler(t,n),yr[t]||(b(n),yr[t]=!0)}function k(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function T(e){var t,n;for(n in e)t=e[n],k(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function Y(e,t){var n,r=d({},e);for(n in t)l(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},d(r[n],e[n]),d(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)l(e,n)&&!l(t,n)&&i(e[n])&&(r[n]=d({},r[n]));return r}function S(e){null!=e&&this.set(e)}function x(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return k(i)?i.call(t,n):i}function C(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function E(){return this._invalidDate}function H(e){return this._ordinal.replace("%d",e)}function A(e,t,n,i){var r=this._relativeTime[n];return k(r)?r(e,t,n,i):r.replace(/%d/i,e)}function j(e,t){var n=this._relativeTime[e>0?"future":"past"];return k(n)?n(t):n.replace(/%s/i,t)}function P(e,t){var n=e.toLowerCase();Yr[n]=Yr[n+"s"]=Yr[t]=e}function I(e){return"string"==typeof e?Yr[e]||Yr[e.toLowerCase()]:void 0}function O(e){var t,n,i={};for(n in e)l(e,n)&&(t=I(n),t&&(i[t]=e[n]));return i}function z(e,t){Sr[e]=t}function F(e){var t=[];for(var n in e)t.push({unit:n,priority:Sr[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function W(t,n){return function(i){return null!=i?($(this,t,i),e.updateOffset(this,n),this):R(this,t)}}function R(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function $(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function N(e){return e=I(e),k(this[e])?this[e]():this}function q(e,t){if("object"==typeof e){e=O(e);for(var n=F(e),i=0;i<n.length;i++)this[n[i].unit](e[n[i].unit])}else if(e=I(e),k(this[e]))return this[e](t);return this}function B(e,t,n){var i=""+Math.abs(e),r=t-i.length,a=e>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function U(e,t,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),e&&(Hr[e]=r),t&&(Hr[t[0]]=function(){return B(r.apply(this,arguments),t[1],t[2])}),n&&(Hr[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function J(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function V(e){var t,n,i=e.match(xr);for(t=0,n=i.length;t<n;t++)Hr[i[t]]?i[t]=Hr[i[t]]:i[t]=J(i[t]);return function(t){var r,a="";for(r=0;r<n;r++)a+=i[r]instanceof Function?i[r].call(t,e):i[r];return a}}function G(e,t){return e.isValid()?(t=X(t,e.localeData()),Er[t]=Er[t]||V(t),Er[t](e)):e.localeData().invalidDate()}function X(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(Cr.lastIndex=0;i>=0&&Cr.test(e);)e=e.replace(Cr,n),Cr.lastIndex=0,i-=1;return e}function K(e,t,n){Xr[e]=k(t)?t:function(e,i){return e&&n?n:t}}function Q(e,t){return l(Xr,e)?Xr[e](t._strict,t._locale):new RegExp(Z(e))}function Z(e){return ee(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r}))}function ee(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function te(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),a(t)&&(i=function(e,n){n[t]=M(e)}),n=0;n<e.length;n++)Kr[e[n]]=i}function ne(e,t){te(e,function(e,n,i,r){i._w=i._w||{},t(e,i._w,i,r)})}function ie(e,t,n){null!=t&&l(Kr,e)&&Kr[e](t,n._a,n,e)}function re(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ae(e,t){return e?n(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||la).test(t)?"format":"standalone"][e.month()]:this._months}function oe(e,t){return e?n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[la.test(t)?"format":"standalone"][e.month()]:this._monthsShort}function se(e,t,n){var i,r,a,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)a=u([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?(r=sa.call(this._shortMonthsParse,o),r!==-1?r:null):(r=sa.call(this._longMonthsParse,o),r!==-1?r:null):"MMM"===t?(r=sa.call(this._shortMonthsParse,o),r!==-1?r:(r=sa.call(this._longMonthsParse,o),r!==-1?r:null)):(r=sa.call(this._longMonthsParse,o),r!==-1?r:(r=sa.call(this._shortMonthsParse,o),r!==-1?r:null))}function le(e,t,n){var i,r,a;if(this._monthsParseExact)return se.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(r=u([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function de(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=M(t);else if(t=e.localeData().monthsParse(t),!a(t))return e;return n=Math.min(e.date(),re(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function ue(t){return null!=t?(de(this,t),e.updateOffset(this,!0),this):R(this,"Month")}function ce(){return re(this.year(),this.month())}function he(e){return this._monthsParseExact?(l(this,"_monthsRegex")||me.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=ca),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function pe(e){return this._monthsParseExact?(l(this,"_monthsRegex")||me.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=ha),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function me(){function e(e,t){return t.length-e.length}var t,n,i=[],r=[],a=[];for(t=0;t<12;t++)n=u([2e3,t]),i.push(this.monthsShort(n,"")),r.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(i.sort(e),r.sort(e),a.sort(e),t=0;t<12;t++)i[t]=ee(i[t]),r[t]=ee(r[t]);for(t=0;t<24;t++)a[t]=ee(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function fe(e){return _e(e)?366:365}function _e(e){return e%4===0&&e%100!==0||e%400===0}function ye(){return _e(this.year())}function ge(e,t,n,i,r,a,o){var s=new Date(e,t,n,i,r,a,o);return e<100&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function ve(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Me(e,t,n){var i=7+t-n,r=(7+ve(e,0,i).getUTCDay()-t)%7;return-r+i-1}function Le(e,t,n,i,r){var a,o,s=(7+n-i)%7,l=Me(e,i,r),d=1+7*(t-1)+s+l;return d<=0?(a=e-1,o=fe(a)+d):d>fe(e)?(a=e+1,o=d-fe(e)):(a=e,o=d),{year:a,dayOfYear:o}}function be(e,t,n){var i,r,a=Me(e.year(),t,n),o=Math.floor((e.dayOfYear()-a-1)/7)+1;return o<1?(r=e.year()-1,i=o+we(r,t,n)):o>we(e.year(),t,n)?(i=o-we(e.year(),t,n),r=e.year()+1):(r=e.year(),i=o),{week:i,year:r}}function we(e,t,n){var i=Me(e,t,n),r=Me(e+1,t,n);return(fe(e)-i+r)/7}function De(e){return be(e,this._week.dow,this._week.doy).week}function ke(){return this._week.dow}function Te(){return this._week.doy}function Ye(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Se(e){var t=be(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function xe(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Ce(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Ee(e,t){return e?n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:this._weekdays}function He(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Ae(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function je(e,t,n){var i,r,a,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)a=u([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?(r=sa.call(this._weekdaysParse,o),r!==-1?r:null):"ddd"===t?(r=sa.call(this._shortWeekdaysParse,o),r!==-1?r:null):(r=sa.call(this._minWeekdaysParse,o),r!==-1?r:null):"dddd"===t?(r=sa.call(this._weekdaysParse,o),r!==-1?r:(r=sa.call(this._shortWeekdaysParse,o),r!==-1?r:(r=sa.call(this._minWeekdaysParse,o),r!==-1?r:null))):"ddd"===t?(r=sa.call(this._shortWeekdaysParse,o),r!==-1?r:(r=sa.call(this._weekdaysParse,o),r!==-1?r:(r=sa.call(this._minWeekdaysParse,o),r!==-1?r:null))):(r=sa.call(this._minWeekdaysParse,o),r!==-1?r:(r=sa.call(this._weekdaysParse,o),r!==-1?r:(r=sa.call(this._shortWeekdaysParse,o),r!==-1?r:null)))}function Pe(e,t,n){var i,r,a;if(this._weekdaysParseExact)return je.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(r=u([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function Ie(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=xe(e,this.localeData()),this.add(e-t,"d")):t}function Oe(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function ze(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=Ce(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function Fe(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=ga),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function We(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=va),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Re(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ma),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function $e(){function e(e,t){return t.length-e.length}var t,n,i,r,a,o=[],s=[],l=[],d=[];for(t=0;t<7;t++)n=u([2e3,1]).day(t),i=this.weekdaysMin(n,""),r=this.weekdaysShort(n,""),a=this.weekdays(n,""),o.push(i),s.push(r),l.push(a),d.push(i),d.push(r),d.push(a);for(o.sort(e),s.sort(e),l.sort(e),d.sort(e),t=0;t<7;t++)s[t]=ee(s[t]),l[t]=ee(l[t]),d[t]=ee(d[t]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Ne(){return this.hours()%12||12}function qe(){return this.hours()||24}function Be(e,t){U(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Ue(e,t){return t._meridiemParse}function Je(e){return"p"===(e+"").toLowerCase().charAt(0)}function Ve(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Ge(e){return e?e.toLowerCase().replace("_","-"):e}function Xe(e){for(var t,n,i,r,a=0;a<e.length;){
for(r=Ge(e[a]).split("-"),t=r.length,n=Ge(e[a+1]),n=n?n.split("-"):null;t>0;){if(i=Ke(r.slice(0,t).join("-")))return i;if(n&&n.length>=t&&L(r,n,!0)>=t-1)break;t--}a++}return null}function Ke(e){var t=null;if(!ka[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=La._abbr,require("./locale/"+e),Qe(t)}catch(e){}return ka[e]}function Qe(e,t){var n;return e&&(n=f(t)?tt(e):Ze(e,t),n&&(La=n)),La._abbr}function Ze(e,t){if(null!==t){var n=Da;if(t.abbr=e,null!=ka[e])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=ka[e]._config;else if(null!=t.parentLocale){if(null==ka[t.parentLocale])return Ta[t.parentLocale]||(Ta[t.parentLocale]=[]),Ta[t.parentLocale].push({name:e,config:t}),null;n=ka[t.parentLocale]._config}return ka[e]=new S(Y(n,t)),Ta[e]&&Ta[e].forEach(function(e){Ze(e.name,e.config)}),Qe(e),ka[e]}return delete ka[e],null}function et(e,t){if(null!=t){var n,i=Da;null!=ka[e]&&(i=ka[e]._config),t=Y(i,t),n=new S(t),n.parentLocale=ka[e],ka[e]=n,Qe(e)}else null!=ka[e]&&(null!=ka[e].parentLocale?ka[e]=ka[e].parentLocale:null!=ka[e]&&delete ka[e]);return ka[e]}function tt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return La;if(!n(e)){if(t=Ke(e))return t;e=[e]}return Xe(e)}function nt(){return Mr(ka)}function it(e){var t,n=e._a;return n&&h(e).overflow===-2&&(t=n[Zr]<0||n[Zr]>11?Zr:n[ea]<1||n[ea]>re(n[Qr],n[Zr])?ea:n[ta]<0||n[ta]>24||24===n[ta]&&(0!==n[na]||0!==n[ia]||0!==n[ra])?ta:n[na]<0||n[na]>59?na:n[ia]<0||n[ia]>59?ia:n[ra]<0||n[ra]>999?ra:-1,h(e)._overflowDayOfYear&&(t<Qr||t>ea)&&(t=ea),h(e)._overflowWeeks&&t===-1&&(t=aa),h(e)._overflowWeekday&&t===-1&&(t=oa),h(e).overflow=t),e}function rt(e){var t,n,i,r,a,o,s=e._i,l=Ya.exec(s)||Sa.exec(s);if(l){for(h(e).iso=!0,t=0,n=Ca.length;t<n;t++)if(Ca[t][1].exec(l[1])){r=Ca[t][0],i=Ca[t][2]!==!1;break}if(null==r)return void(e._isValid=!1);if(l[3]){for(t=0,n=Ea.length;t<n;t++)if(Ea[t][1].exec(l[3])){a=(l[2]||" ")+Ea[t][0];break}if(null==a)return void(e._isValid=!1)}if(!i&&null!=a)return void(e._isValid=!1);if(l[4]){if(!xa.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=r+(a||"")+(o||""),ut(e)}else e._isValid=!1}function at(t){var n=Ha.exec(t._i);return null!==n?void(t._d=new Date((+n[1]))):(rt(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function ot(e,t,n){return null!=e?e:null!=t?t:n}function st(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function lt(e){var t,n,i,r,a=[];if(!e._d){for(i=st(e),e._w&&null==e._a[ea]&&null==e._a[Zr]&&dt(e),e._dayOfYear&&(r=ot(e._a[Qr],i[Qr]),e._dayOfYear>fe(r)&&(h(e)._overflowDayOfYear=!0),n=ve(r,0,e._dayOfYear),e._a[Zr]=n.getUTCMonth(),e._a[ea]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=a[t]=i[t];for(;t<7;t++)e._a[t]=a[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ta]&&0===e._a[na]&&0===e._a[ia]&&0===e._a[ra]&&(e._nextDay=!0,e._a[ta]=0),e._d=(e._useUTC?ve:ge).apply(null,a),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ta]=24)}}function dt(e){var t,n,i,r,a,o,s,l;if(t=e._w,null!=t.GG||null!=t.W||null!=t.E)a=1,o=4,n=ot(t.GG,e._a[Qr],be(gt(),1,4).year),i=ot(t.W,1),r=ot(t.E,1),(r<1||r>7)&&(l=!0);else{a=e._locale._week.dow,o=e._locale._week.doy;var d=be(gt(),a,o);n=ot(t.gg,e._a[Qr],d.year),i=ot(t.w,d.week),null!=t.d?(r=t.d,(r<0||r>6)&&(l=!0)):null!=t.e?(r=t.e+a,(t.e<0||t.e>6)&&(l=!0)):r=a}i<1||i>we(n,a,o)?h(e)._overflowWeeks=!0:null!=l?h(e)._overflowWeekday=!0:(s=Le(n,i,r,a,o),e._a[Qr]=s.year,e._dayOfYear=s.dayOfYear)}function ut(t){if(t._f===e.ISO_8601)return void rt(t);t._a=[],h(t).empty=!0;var n,i,r,a,o,s=""+t._i,l=s.length,d=0;for(r=X(t._f,t._locale).match(xr)||[],n=0;n<r.length;n++)a=r[n],i=(s.match(Q(a,t))||[])[0],i&&(o=s.substr(0,s.indexOf(i)),o.length>0&&h(t).unusedInput.push(o),s=s.slice(s.indexOf(i)+i.length),d+=i.length),Hr[a]?(i?h(t).empty=!1:h(t).unusedTokens.push(a),ie(a,i,t)):t._strict&&!i&&h(t).unusedTokens.push(a);h(t).charsLeftOver=l-d,s.length>0&&h(t).unusedInput.push(s),t._a[ta]<=12&&h(t).bigHour===!0&&t._a[ta]>0&&(h(t).bigHour=void 0),h(t).parsedDateParts=t._a.slice(0),h(t).meridiem=t._meridiem,t._a[ta]=ct(t._locale,t._a[ta],t._meridiem),lt(t),it(t)}function ct(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(i=e.isPM(n),i&&t<12&&(t+=12),i||12!==t||(t=0),t):t}function ht(e){var t,n,i,r,a;if(0===e._f.length)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)a=0,t=_({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],ut(t),p(t)&&(a+=h(t).charsLeftOver,a+=10*h(t).unusedTokens.length,h(t).score=a,(null==i||a<i)&&(i=a,n=t));d(e,n||t)}function pt(e){if(!e._d){var t=O(e._i);e._a=s([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),lt(e)}}function mt(e){var t=new y(it(ft(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function ft(e){var t=e._i,i=e._f;return e._locale=e._locale||tt(e._l),null===t||void 0===i&&""===t?m({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),g(t)?new y(it(t)):(o(t)?e._d=t:n(i)?ht(e):i?ut(e):_t(e),p(e)||(e._d=null),e))}function _t(t){var i=t._i;void 0===i?t._d=new Date(e.now()):o(i)?t._d=new Date(i.valueOf()):"string"==typeof i?at(t):n(i)?(t._a=s(i.slice(0),function(e){return parseInt(e,10)}),lt(t)):"object"==typeof i?pt(t):a(i)?t._d=new Date(i):e.createFromInputFallback(t)}function yt(e,t,a,o,s){var l={};return a!==!0&&a!==!1||(o=a,a=void 0),(i(e)&&r(e)||n(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=s,l._l=a,l._i=e,l._f=t,l._strict=o,mt(l)}function gt(e,t,n,i){return yt(e,t,n,i,!1)}function vt(e,t){var i,r;if(1===t.length&&n(t[0])&&(t=t[0]),!t.length)return gt();for(i=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](i)||(i=t[r]);return i}function Mt(){var e=[].slice.call(arguments,0);return vt("isBefore",e)}function Lt(){var e=[].slice.call(arguments,0);return vt("isAfter",e)}function bt(e){var t=O(e),n=t.year||0,i=t.quarter||0,r=t.month||0,a=t.week||0,o=t.day||0,s=t.hour||0,l=t.minute||0,d=t.second||0,u=t.millisecond||0;this._milliseconds=+u+1e3*d+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+r+3*i+12*n,this._data={},this._locale=tt(),this._bubble()}function wt(e){return e instanceof bt}function Dt(e){return e<0?Math.round(-1*e)*-1:Math.round(e)}function kt(e,t){U(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+B(~~(e/60),2)+t+B(~~e%60,2)})}function Tt(e,t){var n=(t||"").match(e);if(null===n)return null;var i=n[n.length-1]||[],r=(i+"").match(Ia)||["-",0,0],a=+(60*r[1])+M(r[2]);return 0===a?0:"+"===r[0]?a:-a}function Yt(t,n){var i,r;return n._isUTC?(i=n.clone(),r=(g(t)||o(t)?t.valueOf():gt(t).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+r),e.updateOffset(i,!1),i):gt(t).local()}function St(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function xt(t,n){var i,r=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(t=Tt(Jr,t),null===t)return this}else Math.abs(t)<16&&(t=60*t);return!this._isUTC&&n&&(i=St(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!n||this._changeInProgress?Bt(this,Wt(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:St(this)}function Ct(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Et(e){return this.utcOffset(0,e)}function Ht(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(St(this),"m")),this}function At(){if(null!=this._tzm)this.utcOffset(this._tzm);else if("string"==typeof this._i){var e=Tt(Ur,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function jt(e){return!!this.isValid()&&(e=e?gt(e).utcOffset():0,(this.utcOffset()-e)%60===0)}function Pt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function It(){if(!f(this._isDSTShifted))return this._isDSTShifted;var e={};if(_(e,this),e=ft(e),e._a){var t=e._isUTC?u(e._a):gt(e._a);this._isDSTShifted=this.isValid()&&L(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Ot(){return!!this.isValid()&&!this._isUTC}function zt(){return!!this.isValid()&&this._isUTC}function Ft(){return!!this.isValid()&&this._isUTC&&0===this._offset}function Wt(e,t){var n,i,r,o=e,s=null;return wt(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:a(e)?(o={},t?o[t]=e:o.milliseconds=e):(s=Oa.exec(e))?(n="-"===s[1]?-1:1,o={y:0,d:M(s[ea])*n,h:M(s[ta])*n,m:M(s[na])*n,s:M(s[ia])*n,ms:M(Dt(1e3*s[ra]))*n}):(s=za.exec(e))?(n="-"===s[1]?-1:1,o={y:Rt(s[2],n),M:Rt(s[3],n),w:Rt(s[4],n),d:Rt(s[5],n),h:Rt(s[6],n),m:Rt(s[7],n),s:Rt(s[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(r=Nt(gt(o.from),gt(o.to)),o={},o.ms=r.milliseconds,o.M=r.months),i=new bt(o),wt(e)&&l(e,"_locale")&&(i._locale=e._locale),i}function Rt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Nt(e,t){var n;return e.isValid()&&t.isValid()?(t=Yt(t,e),e.isBefore(t)?n=$t(e,t):(n=$t(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function qt(e,t){return function(n,i){var r,a;return null===i||isNaN(+i)||(D(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=i,i=a),n="string"==typeof n?+n:n,r=Wt(n,i),Bt(this,r,e),this}}function Bt(t,n,i,r){var a=n._milliseconds,o=Dt(n._days),s=Dt(n._months);t.isValid()&&(r=null==r||r,a&&t._d.setTime(t._d.valueOf()+a*i),o&&$(t,"Date",R(t,"Date")+o*i),s&&de(t,R(t,"Month")+s*i),r&&e.updateOffset(t,o||s))}function Ut(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Jt(t,n){var i=t||gt(),r=Yt(i,this).startOf("day"),a=e.calendarFormat(this,r)||"sameElse",o=n&&(k(n[a])?n[a].call(this,i):n[a]);return this.format(o||this.localeData().calendar(a,this,gt(i)))}function Vt(){return new y(this)}function Gt(e,t){var n=g(e)?e:gt(e);return!(!this.isValid()||!n.isValid())&&(t=I(f(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function Xt(e,t){var n=g(e)?e:gt(e);return!(!this.isValid()||!n.isValid())&&(t=I(f(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function Kt(e,t,n,i){return i=i||"()",("("===i[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===i[1]?this.isBefore(t,n):!this.isAfter(t,n))}function Qt(e,t){var n,i=g(e)?e:gt(e);return!(!this.isValid()||!i.isValid())&&(t=I(t||"millisecond"),"millisecond"===t?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function Zt(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function en(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function tn(e,t,n){var i,r,a,o;return this.isValid()?(i=Yt(e,this),i.isValid()?(r=6e4*(i.utcOffset()-this.utcOffset()),t=I(t),"year"===t||"month"===t||"quarter"===t?(o=nn(this,i),"quarter"===t?o/=3:"year"===t&&(o/=12)):(a=this-i,o="second"===t?a/1e3:"minute"===t?a/6e4:"hour"===t?a/36e5:"day"===t?(a-r)/864e5:"week"===t?(a-r)/6048e5:a),n?o:v(o)):NaN):NaN}function nn(e,t){var n,i,r=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(r,"months");return t-a<0?(n=e.clone().add(r-1,"months"),i=(t-a)/(a-n)):(n=e.clone().add(r+1,"months"),i=(t-a)/(n-a)),-(r+i)||0}function rn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function an(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?k(Date.prototype.toISOString)?this.toDate().toISOString():G(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):G(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function on(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',i=0<this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r="-MM-DD[T]HH:mm:ss.SSS",a=t+'[")]';return this.format(n+i+r+a)}function sn(t){t||(t=this.isUtc()?e.defaultFormatUtc:e.defaultFormat);var n=G(this,t);return this.localeData().postformat(n)}function ln(e,t){return this.isValid()&&(g(e)&&e.isValid()||gt(e).isValid())?Wt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function dn(e){return this.from(gt(),e)}function un(e,t){return this.isValid()&&(g(e)&&e.isValid()||gt(e).isValid())?Wt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function cn(e){return this.to(gt(),e)}function hn(e){var t;return void 0===e?this._locale._abbr:(t=tt(e),null!=t&&(this._locale=t),this)}function pn(){return this._locale}function mn(e){switch(e=I(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function fn(e){return e=I(e),void 0===e||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function _n(){return this._d.valueOf()-6e4*(this._offset||0)}function yn(){return Math.floor(this.valueOf()/1e3)}function gn(){return new Date(this.valueOf())}function vn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Mn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Ln(){return this.isValid()?this.toISOString():null}function bn(){return p(this)}function wn(){return d({},h(this))}function Dn(){return h(this).overflow}function kn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Tn(e,t){U(0,[e,e.length],0,t)}function Yn(e){return En.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Sn(e){return En.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function xn(){return we(this.year(),1,4)}function Cn(){var e=this.localeData()._week;return we(this.year(),e.dow,e.doy)}function En(e,t,n,i,r){var a;return null==e?be(this,i,r).year:(a=we(e,i,r),t>a&&(t=a),Hn.call(this,e,t,n,i,r))}function Hn(e,t,n,i,r){var a=Le(e,t,n,i,r),o=ve(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function An(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function jn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function Pn(e,t){t[ra]=M(1e3*("0."+e))}function In(){return this._isUTC?"UTC":""}function On(){return this._isUTC?"Coordinated Universal Time":""}function zn(e){return gt(1e3*e)}function Fn(){return gt.apply(null,arguments).parseZone()}function Wn(e){return e}function Rn(e,t,n,i){var r=tt(),a=u().set(i,t);return r[n](a,e)}function $n(e,t,n){if(a(e)&&(t=e,e=void 0),e=e||"",null!=t)return Rn(e,t,n,"month");var i,r=[];for(i=0;i<12;i++)r[i]=Rn(e,i,n,"month");return r}function Nn(e,t,n,i){"boolean"==typeof e?(a(t)&&(n=t,t=void 0),t=t||""):(t=e,n=t,e=!1,a(t)&&(n=t,t=void 0),t=t||"");var r=tt(),o=e?r._week.dow:0;if(null!=n)return Rn(t,(n+o)%7,i,"day");var s,l=[];for(s=0;s<7;s++)l[s]=Rn(t,(s+o)%7,i,"day");return l}function qn(e,t){return $n(e,t,"months")}function Bn(e,t){return $n(e,t,"monthsShort")}function Un(e,t,n){return Nn(e,t,n,"weekdays")}function Jn(e,t,n){return Nn(e,t,n,"weekdaysShort")}function Vn(e,t,n){return Nn(e,t,n,"weekdaysMin")}function Gn(){var e=this._data;return this._milliseconds=Ga(this._milliseconds),this._days=Ga(this._days),this._months=Ga(this._months),e.milliseconds=Ga(e.milliseconds),e.seconds=Ga(e.seconds),e.minutes=Ga(e.minutes),e.hours=Ga(e.hours),e.months=Ga(e.months),e.years=Ga(e.years),this}function Xn(e,t,n,i){var r=Wt(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function Kn(e,t){return Xn(this,e,t,1)}function Qn(e,t){return Xn(this,e,t,-1)}function Zn(e){return e<0?Math.floor(e):Math.ceil(e)}function ei(){var e,t,n,i,r,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||a<=0&&o<=0&&s<=0||(a+=864e5*Zn(ni(s)+o),o=0,s=0),l.milliseconds=a%1e3,e=v(a/1e3),l.seconds=e%60,t=v(e/60),l.minutes=t%60,n=v(t/60),l.hours=n%24,o+=v(n/24),r=v(ti(o)),s+=r,o-=Zn(ni(r)),i=v(s/12),s%=12,l.days=o,l.months=s,l.years=i,this}function ti(e){return 4800*e/146097}function ni(e){return 146097*e/4800}function ii(e){var t,n,i=this._milliseconds;if(e=I(e),"month"===e||"year"===e)return t=this._days+i/864e5,n=this._months+ti(t),"month"===e?n:n/12;switch(t=this._days+Math.round(ni(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function ri(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*M(this._months/12)}function ai(e){return function(){return this.as(e)}}function oi(e){return e=I(e),this[e+"s"]()}function si(e){return function(){return this._data[e]}}function li(){return v(this.days()/7)}function di(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}function ui(e,t,n){var i=Wt(e).abs(),r=ho(i.as("s")),a=ho(i.as("m")),o=ho(i.as("h")),s=ho(i.as("d")),l=ho(i.as("M")),d=ho(i.as("y")),u=r<po.s&&["s",r]||a<=1&&["m"]||a<po.m&&["mm",a]||o<=1&&["h"]||o<po.h&&["hh",o]||s<=1&&["d"]||s<po.d&&["dd",s]||l<=1&&["M"]||l<po.M&&["MM",l]||d<=1&&["y"]||["yy",d];return u[2]=t,u[3]=+e>0,u[4]=n,di.apply(null,u)}function ci(e){return void 0===e?ho:"function"==typeof e&&(ho=e,!0)}function hi(e,t){return void 0!==po[e]&&(void 0===t?po[e]:(po[e]=t,!0))}function pi(e){var t=this.localeData(),n=ui(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function mi(){var e,t,n,i=mo(this._milliseconds)/1e3,r=mo(this._days),a=mo(this._months);e=v(i/60),t=v(e/60),i%=60,e%=60,n=v(a/12),a%=12;var o=n,s=a,l=r,d=t,u=e,c=i,h=this.asSeconds();return h?(h<0?"-":"")+"P"+(o?o+"Y":"")+(s?s+"M":"")+(l?l+"D":"")+(d||u||c?"T":"")+(d?d+"H":"")+(u?u+"M":"")+(c?c+"S":""):"P0D"}function fi(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}function _i(e,t,n){var i={mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+fi(i[n],+e)}function yi(e,t,n){var i={mm:"munutenn",MM:"miz",dd:"devezh"};return e+" "+Mi(i[n],e)}function gi(e){switch(vi(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}function vi(e){return e>9?vi(e%10):e}function Mi(e,t){return 2===t?Li(e):e}function Li(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}function bi(e,t,n){var i=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return i+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return i+=1===e?"dan":"dana";case"MM":return i+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return i+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}function wi(e){return e>1&&e<5&&1!==~~(e/10)}function Di(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekund":"pár sekundami";case"m":return t?"minuta":i?"minutu":"minutou";case"mm":return t||i?r+(wi(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(wi(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||i?"den":"dnem";case"dd":return t||i?r+(wi(e)?"dny":"dní"):r+"dny";case"M":return t||i?"měsíc":"měsícem";case"MM":return t||i?r+(wi(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||i?"rok":"rokem";case"yy":return t||i?r+(wi(e)?"roky":"let"):r+"lety"}}function ki(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function Ti(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function Yi(e,t,n,i){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:i?r[n][0]:r[n][1]}function Si(e,t,n,i){var r="";switch(n){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"m":return i?"minuutin":"minuutti";case"mm":r=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":r=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":r=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":r=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":r=i?"vuoden":"vuotta"}return r=xi(e,i)+" "+r}function xi(e,t){return e<10?t?Bo[e]:qo[e]:e}function Ci(e,t,n){var i=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return i+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return i+=1===e?"dan":"dana";case"MM":return i+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return i+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}function Ei(e,t,n,i){var r=e;switch(n){case"s":return i||t?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(i||t?" perc":" perce");case"mm":return r+(i||t?" perc":" perce");case"h":return"egy"+(i||t?" óra":" órája");case"hh":return r+(i||t?" óra":" órája");case"d":return"egy"+(i||t?" nap":" napja");case"dd":return r+(i||t?" nap":" napja");case"M":return"egy"+(i||t?" hónap":" hónapja");case"MM":return r+(i||t?" hónap":" hónapja");case"y":return"egy"+(i||t?" év":" éve");case"yy":return r+(i||t?" év":" éve")}return""}function Hi(e){return(e?"":"[múlt] ")+"["+ts[this.day()]+"] LT[-kor]"}function Ai(e){return e%100===11||e%10!==1}function ji(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return t?"mínúta":"mínútu";case"mm":return Ai(e)?r+(t||i?"mínútur":"mínútum"):t?r+"mínúta":r+"mínútu";case"hh":return Ai(e)?r+(t||i?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return t?"dagur":i?"dag":"degi";case"dd":return Ai(e)?t?r+"dagar":r+(i?"daga":"dögum"):t?r+"dagur":r+(i?"dag":"degi");case"M":return t?"mánuður":i?"mánuð":"mánuði";case"MM":return Ai(e)?t?r+"mánuðir":r+(i?"mánuði":"mánuðum"):t?r+"mánuður":r+(i?"mánuð":"mánuði");case"y":return t||i?"ár":"ári";case"yy":return Ai(e)?r+(t||i?"ár":"árum"):r+(t||i?"ár":"ári")}}function Pi(e,t,n,i){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function Ii(e){var t=e.substr(0,e.indexOf(" "));return zi(t)?"a "+e:"an "+e}function Oi(e){var t=e.substr(0,e.indexOf(" "));return zi(t)?"viru "+e:"virun "+e}function zi(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10,n=e/10;return zi(0===t?n:t)}if(e<1e4){for(;e>=10;)e/=10;return zi(e)}return e/=1e3,zi(e)}function Fi(e,t,n,i){return t?"kelios sekundės":i?"kelių sekundžių":"kelias sekundes"}function Wi(e,t,n,i){return t?$i(n)[0]:i?$i(n)[1]:$i(n)[2]}function Ri(e){return e%10===0||e>10&&e<20}function $i(e){return rs[e].split("_")}function Ni(e,t,n,i){var r=e+" ";return 1===e?r+Wi(e,t,n[0],i):t?r+(Ri(e)?$i(n)[1]:$i(n)[0]):i?r+$i(n)[1]:r+(Ri(e)?$i(n)[1]:$i(n)[2])}function qi(e,t,n){return n?t%10===1&&t%100!==11?e[2]:e[3]:t%10===1&&t%100!==11?e[0]:e[1]}function Bi(e,t,n){return e+" "+qi(as[n],e,t)}function Ui(e,t,n){return qi(as[n],e,t)}function Ji(e,t){return t?"dažas sekundes":"dažām sekundēm"}function Vi(e,t,n,i){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}function Gi(e){return e%10<5&&e%10>1&&~~(e/10)%10!==1}function Xi(e,t,n){var i=e+" ";switch(n){case"m":return t?"minuta":"minutę";case"mm":return i+(Gi(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return i+(Gi(e)?"godziny":"godzin");case"MM":return i+(Gi(e)?"miesiące":"miesięcy");case"yy":return i+(Gi(e)?"lata":"lat")}}function Ki(e,t,n){var i={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},r=" ";return(e%100>=20||e>=100&&e%100===0)&&(r=" de "),e+r+i[n]}function Qi(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}function Zi(e,t,n){var i={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+Qi(i[n],+e)}function er(e){return e>1&&e<5}function tr(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekúnd":"pár sekundami";case"m":return t?"minúta":i?"minútu":"minútou";case"mm":return t||i?r+(er(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(er(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||i?"deň":"dňom";case"dd":return t||i?r+(er(e)?"dni":"dní"):r+"dňami";case"M":return t||i?"mesiac":"mesiacom";case"MM":return t||i?r+(er(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||i?"rok":"rokom";case"yy":return t||i?r+(er(e)?"roky":"rokov"):r+"rokmi"}}function nr(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nekaj sekund":"nekaj sekundami";case"m":return t?"ena minuta":"eno minuto";case"mm":return r+=1===e?t?"minuta":"minuto":2===e?t||i?"minuti":"minutama":e<5?t||i?"minute":"minutami":t||i?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return r+=1===e?t?"ura":"uro":2===e?t||i?"uri":"urama":e<5?t||i?"ure":"urami":t||i?"ur":"urami";case"d":return t||i?"en dan":"enim dnem";case"dd":return r+=1===e?t||i?"dan":"dnem":2===e?t||i?"dni":"dnevoma":t||i?"dni":"dnevi";case"M":return t||i?"en mesec":"enim mesecem";case"MM":return r+=1===e?t||i?"mesec":"mesecem":2===e?t||i?"meseca":"mesecema":e<5?t||i?"mesece":"meseci":t||i?"mesecev":"meseci";case"y":return t||i?"eno leto":"enim letom";case"yy":return r+=1===e?t||i?"leto":"letom":2===e?t||i?"leti":"letoma":e<5?t||i?"leta":"leti":t||i?"let":"leti"}}function ir(e){var t=e;return t=e.indexOf("jaj")!==-1?t.slice(0,-3)+"leS":e.indexOf("jar")!==-1?t.slice(0,-3)+"waQ":e.indexOf("DIS")!==-1?t.slice(0,-3)+"nem":t+" pIq"}function rr(e){var t=e;return t=e.indexOf("jaj")!==-1?t.slice(0,-3)+"Hu’":e.indexOf("jar")!==-1?t.slice(0,-3)+"wen":e.indexOf("DIS")!==-1?t.slice(0,-3)+"ben":t+" ret"}function ar(e,t,n,i){var r=or(e);switch(n){case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}function or(e){var t=Math.floor(e%1e3/100),n=Math.floor(e%100/10),i=e%10,r="";return t>0&&(r+=Hs[t]+"vatlh"),n>0&&(r+=(""!==r?" ":"")+Hs[n]+"maH"),i>0&&(r+=(""!==r?" ":"")+Hs[i]),""===r?"pagh":r}function sr(e,t,n,i){var r={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",""+e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",""+e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",""+e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",""+e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",""+e+" ars"]};return i?r[n][0]:t?r[n][0]:r[n][1]}function lr(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}function dr(e,t,n){var i={mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+lr(i[n],+e)}function ur(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},i=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[i][e.day()]}function cr(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}var hr,pr;pr=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,i=0;i<n;i++)if(i in t&&e.call(this,t[i],i,t))return!0;return!1};var mr=pr,fr=e.momentProperties=[],_r=!1,yr={};e.suppressDeprecationWarnings=!1,e.deprecationHandler=null;var gr;gr=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n};var vr,Mr=gr,Lr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},br={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},wr="Invalid date",Dr="%d",kr=/\d{1,2}/,Tr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Yr={},Sr={},xr=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Cr=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Er={},Hr={},Ar=/\d/,jr=/\d\d/,Pr=/\d{3}/,Ir=/\d{4}/,Or=/[+-]?\d{6}/,zr=/\d\d?/,Fr=/\d\d\d\d?/,Wr=/\d\d\d\d\d\d?/,Rr=/\d{1,3}/,$r=/\d{1,4}/,Nr=/[+-]?\d{1,6}/,qr=/\d+/,Br=/[+-]?\d+/,Ur=/Z|[+-]\d\d:?\d\d/gi,Jr=/Z|[+-]\d\d(?::?\d\d)?/gi,Vr=/[+-]?\d+(\.\d{1,3})?/,Gr=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Xr={},Kr={},Qr=0,Zr=1,ea=2,ta=3,na=4,ia=5,ra=6,aa=7,oa=8;vr=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};var sa=vr;U("M",["MM",2],"Mo",function(){return this.month()+1;
}),U("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),U("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),z("month",8),K("M",zr),K("MM",zr,jr),K("MMM",function(e,t){return t.monthsShortRegex(e)}),K("MMMM",function(e,t){return t.monthsRegex(e)}),te(["M","MM"],function(e,t){t[Zr]=M(e)-1}),te(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[Zr]=r:h(n).invalidMonth=e});var la=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,da="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ua="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ca=Gr,ha=Gr;U("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),P("year","y"),z("year",1),K("Y",Br),K("YY",zr,jr),K("YYYY",$r,Ir),K("YYYYY",Nr,Or),K("YYYYYY",Nr,Or),te(["YYYYY","YYYYYY"],Qr),te("YYYY",function(t,n){n[Qr]=2===t.length?e.parseTwoDigitYear(t):M(t)}),te("YY",function(t,n){n[Qr]=e.parseTwoDigitYear(t)}),te("Y",function(e,t){t[Qr]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return M(e)+(M(e)>68?1900:2e3)};var pa=W("FullYear",!0);U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),z("week",5),z("isoWeek",5),K("w",zr),K("ww",zr,jr),K("W",zr),K("WW",zr,jr),ne(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=M(e)});var ma={dow:0,doy:6};U("d",0,"do","day"),U("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),U("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),U("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),z("day",11),z("weekday",11),z("isoWeekday",11),K("d",zr),K("e",zr),K("E",zr),K("dd",function(e,t){return t.weekdaysMinRegex(e)}),K("ddd",function(e,t){return t.weekdaysShortRegex(e)}),K("dddd",function(e,t){return t.weekdaysRegex(e)}),ne(["dd","ddd","dddd"],function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);null!=r?t.d=r:h(n).invalidWeekday=e}),ne(["d","e","E"],function(e,t,n,i){t[i]=M(e)});var fa="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),_a="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ya="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),ga=Gr,va=Gr,Ma=Gr;U("H",["HH",2],0,"hour"),U("h",["hh",2],0,Ne),U("k",["kk",2],0,qe),U("hmm",0,0,function(){return""+Ne.apply(this)+B(this.minutes(),2)}),U("hmmss",0,0,function(){return""+Ne.apply(this)+B(this.minutes(),2)+B(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+B(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+B(this.minutes(),2)+B(this.seconds(),2)}),Be("a",!0),Be("A",!1),P("hour","h"),z("hour",13),K("a",Ue),K("A",Ue),K("H",zr),K("h",zr),K("HH",zr,jr),K("hh",zr,jr),K("hmm",Fr),K("hmmss",Wr),K("Hmm",Fr),K("Hmmss",Wr),te(["H","HH"],ta),te(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),te(["h","hh"],function(e,t,n){t[ta]=M(e),h(n).bigHour=!0}),te("hmm",function(e,t,n){var i=e.length-2;t[ta]=M(e.substr(0,i)),t[na]=M(e.substr(i)),h(n).bigHour=!0}),te("hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[ta]=M(e.substr(0,i)),t[na]=M(e.substr(i,2)),t[ia]=M(e.substr(r)),h(n).bigHour=!0}),te("Hmm",function(e,t,n){var i=e.length-2;t[ta]=M(e.substr(0,i)),t[na]=M(e.substr(i))}),te("Hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[ta]=M(e.substr(0,i)),t[na]=M(e.substr(i,2)),t[ia]=M(e.substr(r))});var La,ba=/[ap]\.?m?\.?/i,wa=W("Hours",!0),Da={calendar:Lr,longDateFormat:br,invalidDate:wr,ordinal:Dr,ordinalParse:kr,relativeTime:Tr,months:da,monthsShort:ua,week:ma,weekdays:fa,weekdaysMin:ya,weekdaysShort:_a,meridiemParse:ba},ka={},Ta={},Ya=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Sa=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,xa=/Z|[+-]\d\d(?::?\d\d)?/,Ca=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ea=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ha=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=w("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),e.ISO_8601=function(){};var Aa=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=gt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:m()}),ja=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=gt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:m()}),Pa=function(){return Date.now?Date.now():+new Date};kt("Z",":"),kt("ZZ",""),K("Z",Jr),K("ZZ",Jr),te(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Tt(Jr,e)});var Ia=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Oa=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,za=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Wt.fn=bt.prototype;var Fa=qt(1,"add"),Wa=qt(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",e.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Ra=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Tn("gggg","weekYear"),Tn("ggggg","weekYear"),Tn("GGGG","isoWeekYear"),Tn("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),z("weekYear",1),z("isoWeekYear",1),K("G",Br),K("g",Br),K("GG",zr,jr),K("gg",zr,jr),K("GGGG",$r,Ir),K("gggg",$r,Ir),K("GGGGG",Nr,Or),K("ggggg",Nr,Or),ne(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=M(e)}),ne(["gg","GG"],function(t,n,i,r){n[r]=e.parseTwoDigitYear(t)}),U("Q",0,"Qo","quarter"),P("quarter","Q"),z("quarter",7),K("Q",Ar),te("Q",function(e,t){t[Zr]=3*(M(e)-1)}),U("D",["DD",2],"Do","date"),P("date","D"),z("date",9),K("D",zr),K("DD",zr,jr),K("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),te(["D","DD"],ea),te("Do",function(e,t){t[ea]=M(e.match(zr)[0],10)});var $a=W("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),z("dayOfYear",4),K("DDD",Rr),K("DDDD",Pr),te(["DDD","DDDD"],function(e,t,n){n._dayOfYear=M(e)}),U("m",["mm",2],0,"minute"),P("minute","m"),z("minute",14),K("m",zr),K("mm",zr,jr),te(["m","mm"],na);var Na=W("Minutes",!1);U("s",["ss",2],0,"second"),P("second","s"),z("second",15),K("s",zr),K("ss",zr,jr),te(["s","ss"],ia);var qa=W("Seconds",!1);U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),z("millisecond",16),K("S",Rr,Ar),K("SS",Rr,jr),K("SSS",Rr,Pr);var Ba;for(Ba="SSSS";Ba.length<=9;Ba+="S")K(Ba,qr);for(Ba="S";Ba.length<=9;Ba+="S")te(Ba,Pn);var Ua=W("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var Ja=y.prototype;Ja.add=Fa,Ja.calendar=Jt,Ja.clone=Vt,Ja.diff=tn,Ja.endOf=fn,Ja.format=sn,Ja.from=ln,Ja.fromNow=dn,Ja.to=un,Ja.toNow=cn,Ja.get=N,Ja.invalidAt=Dn,Ja.isAfter=Gt,Ja.isBefore=Xt,Ja.isBetween=Kt,Ja.isSame=Qt,Ja.isSameOrAfter=Zt,Ja.isSameOrBefore=en,Ja.isValid=bn,Ja.lang=Ra,Ja.locale=hn,Ja.localeData=pn,Ja.max=ja,Ja.min=Aa,Ja.parsingFlags=wn,Ja.set=q,Ja.startOf=mn,Ja.subtract=Wa,Ja.toArray=vn,Ja.toObject=Mn,Ja.toDate=gn,Ja.toISOString=an,Ja.inspect=on,Ja.toJSON=Ln,Ja.toString=rn,Ja.unix=yn,Ja.valueOf=_n,Ja.creationData=kn,Ja.year=pa,Ja.isLeapYear=ye,Ja.weekYear=Yn,Ja.isoWeekYear=Sn,Ja.quarter=Ja.quarters=An,Ja.month=ue,Ja.daysInMonth=ce,Ja.week=Ja.weeks=Ye,Ja.isoWeek=Ja.isoWeeks=Se,Ja.weeksInYear=Cn,Ja.isoWeeksInYear=xn,Ja.date=$a,Ja.day=Ja.days=Ie,Ja.weekday=Oe,Ja.isoWeekday=ze,Ja.dayOfYear=jn,Ja.hour=Ja.hours=wa,Ja.minute=Ja.minutes=Na,Ja.second=Ja.seconds=qa,Ja.millisecond=Ja.milliseconds=Ua,Ja.utcOffset=xt,Ja.utc=Et,Ja.local=Ht,Ja.parseZone=At,Ja.hasAlignedHourOffset=jt,Ja.isDST=Pt,Ja.isLocal=Ot,Ja.isUtcOffset=zt,Ja.isUtc=Ft,Ja.isUTC=Ft,Ja.zoneAbbr=In,Ja.zoneName=On,Ja.dates=w("dates accessor is deprecated. Use date instead.",$a),Ja.months=w("months accessor is deprecated. Use month instead",ue),Ja.years=w("years accessor is deprecated. Use year instead",pa),Ja.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Ct),Ja.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",It);var Va=S.prototype;Va.calendar=x,Va.longDateFormat=C,Va.invalidDate=E,Va.ordinal=H,Va.preparse=Wn,Va.postformat=Wn,Va.relativeTime=A,Va.pastFuture=j,Va.set=T,Va.months=ae,Va.monthsShort=oe,Va.monthsParse=le,Va.monthsRegex=pe,Va.monthsShortRegex=he,Va.week=De,Va.firstDayOfYear=Te,Va.firstDayOfWeek=ke,Va.weekdays=Ee,Va.weekdaysMin=Ae,Va.weekdaysShort=He,Va.weekdaysParse=Pe,Va.weekdaysRegex=Fe,Va.weekdaysShortRegex=We,Va.weekdaysMinRegex=Re,Va.isPM=Je,Va.meridiem=Ve,Qe("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===M(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=w("moment.lang is deprecated. Use moment.locale instead.",Qe),e.langData=w("moment.langData is deprecated. Use moment.localeData instead.",tt);var Ga=Math.abs,Xa=ai("ms"),Ka=ai("s"),Qa=ai("m"),Za=ai("h"),eo=ai("d"),to=ai("w"),no=ai("M"),io=ai("y"),ro=si("milliseconds"),ao=si("seconds"),oo=si("minutes"),so=si("hours"),lo=si("days"),uo=si("months"),co=si("years"),ho=Math.round,po={s:45,m:45,h:22,d:26,M:11},mo=Math.abs,fo=bt.prototype;fo.abs=Gn,fo.add=Kn,fo.subtract=Qn,fo.as=ii,fo.asMilliseconds=Xa,fo.asSeconds=Ka,fo.asMinutes=Qa,fo.asHours=Za,fo.asDays=eo,fo.asWeeks=to,fo.asMonths=no,fo.asYears=io,fo.valueOf=ri,fo._bubble=ei,fo.get=oi,fo.milliseconds=ro,fo.seconds=ao,fo.minutes=oo,fo.hours=so,fo.days=lo,fo.weeks=li,fo.months=uo,fo.years=co,fo.humanize=pi,fo.toISOString=mi,fo.toString=mi,fo.toJSON=mi,fo.locale=hn,fo.localeData=pn,fo.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",mi),fo.lang=Ra,U("X",0,0,"unix"),U("x",0,0,"valueOf"),K("x",Br),K("X",Vr),te("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),te("x",function(e,t,n){n._d=new Date(M(e))}),e.version="2.17.1",t(gt),e.fn=Ja,e.min=Mt,e.max=Lt,e.now=Pa,e.utc=u,e.unix=zn,e.months=qn,e.isDate=o,e.locale=Qe,e.invalid=m,e.duration=Wt,e.isMoment=g,e.weekdays=Un,e.parseZone=Fn,e.localeData=tt,e.isDuration=wt,e.monthsShort=Bn,e.weekdaysMin=Vn,e.defineLocale=Ze,e.updateLocale=et,e.locales=nt,e.weekdaysShort=Jn,e.normalizeUnits=I,e.relativeTimeRounding=ci,e.relativeTimeThreshold=hi,e.calendarFormat=Ut,e.prototype=Ja,e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}});var _o={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},yo=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},go={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},vo=function(e){return function(t,n,i,r){var a=yo(t),o=go[e][yo(t)];return 2===a&&(o=o[n?0:1]),o.replace(/%d/i,t)}},Mo=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:Mo,monthsShort:Mo,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:vo("s"),m:vo("m"),mm:vo("m"),h:vo("h"),hh:vo("h"),d:vo("d"),dd:vo("d"),M:vo("M"),MM:vo("M"),y:vo("y"),yy:vo("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return _o[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}});var Lo={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},bo={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return bo[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return Lo[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}}),e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}});var wo={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},Do={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},ko=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},To={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},Yo=function(e){return function(t,n,i,r){var a=ko(t),o=To[e][ko(t)];return 2===a&&(o=o[n?0:1]),o.replace(/%d/i,t)}},So=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];e.defineLocale("ar",{months:So,monthsShort:So,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:Yo("s"),m:Yo("m"),mm:Yo("m"),h:Yo("h"),hh:Yo("h"),d:Yo("d"),dd:Yo("d"),M:Yo("M"),MM:Yo("M"),y:Yo("y"),yy:Yo("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return Do[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return wo[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}});var xo={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var t=e%10,n=e%100-t,i=e>=100?100:null;return e+(xo[t]||xo[n]||xo[i])},week:{dow:1,doy:7}}),e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:_i,mm:_i,h:_i,hh:_i,d:"дзень",dd:_i,M:"месяц",MM:_i,y:"год",yy:_i},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!==2&&e%10!==3||e%100===12||e%100===13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}}),e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}});var Co={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},Eo={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return Eo[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Co[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}});var Ho={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},Ao={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return Ao[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ho[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}}),e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:yi,h:"un eur",hh:"%d eur",d:"un devezh",dd:yi,M:"ur miz",MM:yi,y:"ur bloaz",yy:gi},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}}),e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:bi,mm:bi,h:bi,hh:bi,d:"dan",dd:bi,M:"mjesec",MM:bi,y:"godinu",yy:bi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",
M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}});var jo="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),Po="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");e.defineLocale("cs",{months:jo,monthsShort:Po,monthsParse:function(e,t){var n,i=[];for(n=0;n<12;n++)i[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return i}(jo,Po),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(Po),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(jo),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:Di,m:Di,mm:Di,h:Di,hh:Di,d:Di,dd:Di,M:Di,MM:Di,y:Di,yy:Di},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},ordinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}}),e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="",i=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=i[t]),e+n},week:{dow:1,doy:4}}),e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:ki,mm:"%d Minuten",h:ki,hh:"%d Stunden",d:ki,dd:ki,M:ki,MM:ki,y:ki,yy:ki},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:Ti,mm:"%d Minuten",h:Ti,hh:"%d Stunden",d:Ti,dd:Ti,M:Ti,MM:Ti,y:Ti,yy:Ti},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Io=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],Oo=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:Io,monthsShort:Io,weekdays:Oo,weekdaysShort:Oo,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}}),e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n=this._calendarEl[e],i=t&&t.hours();return k(n)&&(n=n.apply(t)),n.replace("{}",i%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}}),e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-an de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}});var zo="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),Fo="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?Fo[e.month()]:zo[e.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});var Wo="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),Ro="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?Ro[e.month()]:Wo[e.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:Yi,m:Yi,mm:Yi,h:Yi,hh:Yi,d:Yi,dd:"%d päeva",M:Yi,MM:Yi,y:Yi,yy:Yi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var $o={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},No={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return No[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return $o[e]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}});var qo="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),Bo=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",qo[7],qo[8],qo[9]];e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:Si,m:Si,mm:Si,h:Si,hh:Si,d:Si,dd:Si,M:Si,MM:Si,y:Si,yy:Si},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")}}),e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")},week:{dow:1,doy:4}}),e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?"er":"")},week:{dow:1,doy:4}});var Uo="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),Jo="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?Jo[e.month()]:Uo[e.month()]},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});var Vo=["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],Go=["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],Xo=["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],Ko=["Did","Dil","Dim","Dic","Dia","Dih","Dis"],Qo=["Dò","Lu","Mà","Ci","Ar","Ha","Sa"];e.defineLocale("gd",{months:Vo,monthsShort:Go,monthsParseExact:!0,weekdays:Xo,weekdaysShort:Ko,weekdaysMin:Qo,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},ordinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10===2?"na":"mh";return e+t},week:{dow:1,doy:4}}),e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10===0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){
return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}});var Zo={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},es={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return es[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Zo[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}}),e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:Ci,mm:Ci,h:Ci,hh:Ci,d:"dan",dd:Ci,M:"mjesec",MM:Ci,y:"godinu",yy:Ci},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var ts="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?n===!0?"de":"DE":n===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return Hi.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return Hi.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:Ei,m:Ei,mm:Ei,h:Ei,hh:Ei,d:Ei,dd:Ei,M:Ei,MM:Ei,y:Ei,yy:Ei},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}}),e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:ji,m:ji,mm:ji,h:"klukkustund",hh:ji,d:ji,dd:ji,M:ji,MM:ji,y:ji,yy:ji},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},ordinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}}),e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20===0||e%100===0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}});var ns={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var t=e%10,n=e>=100?100:null;return e+(ns[e]||ns[t]||ns[n])},week:{dow:1,doy:7}}),e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}}),e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"일분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}});var is={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var t=e%10,n=e>=100?100:null;return e+(is[e]||is[t]||is[n])},week:{dow:1,doy:7}}),e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:Ii,past:Oi,s:"e puer Sekonnen",m:Pi,mm:"%d Minutten",h:Pi,hh:"%d Stonnen",d:Pi,dd:"%d Deeg",M:Pi,MM:"%d Méint",y:Pi,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},ordinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}});var rs={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:Fi,m:Wi,mm:Ni,h:Wi,hh:Ni,d:Wi,dd:Ni,M:Wi,MM:Ni,y:Wi,yy:Ni},ordinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}});var as={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:Ji,m:Ui,mm:Bi,h:Ui,hh:Bi,d:Ui,dd:Bi,M:Ui,MM:Bi,y:Ui,yy:Bi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var os={words:{m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,t,n){var i=os.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+os.correctGrammaticalCase(e,i)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:os.translate,mm:os.translate,h:os.translate,hh:os.translate,d:"dan",dd:os.translate,M:"mjesec",MM:os.translate,y:"godinu",yy:os.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}}),e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}});var ss={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},ls={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:Vi,m:Vi,mm:Vi,h:Vi,hh:Vi,d:Vi,dd:Vi,M:Vi,MM:Vi,y:Vi,yy:Vi},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return ls[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return ss[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}}),e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});var ds={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},us={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return us[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return ds[e]})},week:{dow:1,doy:4}}),e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var cs={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},hs={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return hs[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return cs[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}});var ps="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),ms="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),fs=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],_s=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?ms[e.month()]:ps[e.month()]},monthsRegex:_s,monthsShortRegex:_s,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:fs,longMonthsParse:fs,shortMonthsParse:fs,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});var ys="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),gs="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),vs=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],Ms=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?gs[e.month()]:ys[e.month()]},monthsRegex:Ms,monthsShortRegex:Ms,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:vs,longMonthsParse:vs,shortMonthsParse:vs,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Ls={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},bs={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return bs[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ls[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}});var ws="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),Ds="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");e.defineLocale("pl",{months:function(e,t){return""===t?"("+Ds[e.month()]+"|"+ws[e.month()]+")":/D MMMM/.test(t)?Ds[e.month()]:ws[e.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:Xi,mm:Xi,h:Xi,hh:Xi,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:Xi,y:"rok",yy:Xi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:Ki,h:"o oră",hh:Ki,d:"o zi",dd:Ki,M:"o lună",MM:Ki,y:"un an",yy:Ki},week:{dow:1,doy:7}});var ks=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:ks,longMonthsParse:ks,shortMonthsParse:ks,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:Zi,mm:Zi,h:"час",hh:Zi,d:"день",dd:Zi,M:"месяц",MM:Zi,y:"год",yy:Zi},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:7}}),e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},ordinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}});var Ts="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),Ys="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");e.defineLocale("sk",{months:Ts,monthsShort:Ys,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:tr,m:tr,mm:tr,h:tr,hh:tr,d:tr,dd:tr,M:tr,MM:tr,y:tr,yy:tr},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:nr,m:nr,mm:nr,h:nr,hh:nr,d:nr,dd:nr,M:nr,MM:nr,y:nr,yy:nr},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Ss={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,t,n){var i=Ss.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+Ss.correctGrammaticalCase(e,i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var e=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:Ss.translate,mm:Ss.translate,h:Ss.translate,hh:Ss.translate,d:"дан",dd:Ss.translate,M:"месец",MM:Ss.translate,y:"годину",yy:Ss.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var xs={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,t,n){var i=xs.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+xs.correctGrammaticalCase(e,i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:xs.translate,mm:xs.translate,h:xs.translate,hh:xs.translate,d:"dan",dd:xs.translate,M:"mesec",MM:xs.translate,y:"godinu",yy:xs.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},ordinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}}),e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}}),e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}});var Cs={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},Es={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return Es[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Cs[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}}),e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},ordinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}}),e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sext_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Sex_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",m:"minutu ida",mm:"minutus %d",h:"horas ida",hh:"horas %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n;
},week:{dow:1,doy:4}}),e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}});var Hs="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:ir,past:rr,s:"puS lup",m:"wa’ tup",mm:ar,h:"wa’ rep",hh:ar,d:"wa’ jaj",dd:ar,M:"wa’ jar",MM:ar,y:"wa’ DIS",yy:ar},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var As={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};return e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+"'ıncı";var t=e%10,n=e%100-t,i=e>=100?100:null;return e+(As[t]||As[n]||As[i])},week:{dow:1,doy:7}}),e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:sr,m:sr,mm:sr,h:sr,hh:sr,d:sr,dd:sr,M:sr,MM:sr,y:sr,yy:sr},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}}),e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}}),e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:ur,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:cr("[Сьогодні "),nextDay:cr("[Завтра "),lastDay:cr("[Вчора "),nextWeek:cr("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return cr("[Минулої] dddd [").call(this);case 1:case 2:case 4:return cr("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:dr,mm:dr,h:"годину",hh:dr,d:"день",dd:dr,M:"місяць",MM:dr,y:"рік",yy:dr},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}}),e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}}),e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},ordinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}}),e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var t,n;return t=e().startOf("week"),n=this.diff(t,"days")>=7?"[下]":"[本]",0===this.minutes()?n+"dddAh点整":n+"dddAh点mm"},lastWeek:function(){var t,n;return t=e().startOf("week"),n=this.unix()<t.unix()?"[上]":"[本]",0===this.minutes()?n+"dddAh点整":n+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}}),e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}}),e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}}),e.locale("en"),e}),!function(e){"use strict";if("function"==typeof define&&define.amd)define(["jquery","moment"],e);else if("object"==typeof exports)e(require("jquery"),require("moment"));else{if("undefined"==typeof jQuery)throw"bootstrap-datetimepicker requires jQuery to be loaded first";if("undefined"==typeof moment)throw"bootstrap-datetimepicker requires Moment.js to be loaded first";e(jQuery,moment)}}(function(e,t){"use strict";if(!t)throw new Error("bootstrap-datetimepicker requires Moment.js to be loaded first");var n=function(n,i){var r,a,o,s,l,d,u,c={},h=!0,p=!1,m=!1,f=0,_=[{clsName:"days",navFnc:"M",navStep:1},{clsName:"months",navFnc:"y",navStep:1},{clsName:"years",navFnc:"y",navStep:10},{clsName:"decades",navFnc:"y",navStep:100}],y=["days","months","years","decades"],g=["top","bottom","auto"],v=["left","right","auto"],M=["default","top","bottom"],L={up:38,38:"up",down:40,40:"down",left:37,37:"left",right:39,39:"right",tab:9,9:"tab",escape:27,27:"escape",enter:13,13:"enter",pageUp:33,33:"pageUp",pageDown:34,34:"pageDown",shift:16,16:"shift",control:17,17:"control",space:32,32:"space",t:84,84:"t","delete":46,46:"delete"},b={},w=function(){return void 0!==t.tz&&void 0!==i.timeZone&&null!==i.timeZone&&""!==i.timeZone},D=function(e){var n;return n=void 0===e||null===e?t():w()?t.tz(e,d,i.useStrict,i.timeZone):t(e,d,i.useStrict),w()&&n.tz(i.timeZone),n},k=function(e){if("string"!=typeof e||e.length>1)throw new TypeError("isEnabled expects a single character string parameter");switch(e){case"y":return-1!==l.indexOf("Y");case"M":return-1!==l.indexOf("M");case"d":return-1!==l.toLowerCase().indexOf("d");case"h":case"H":return-1!==l.toLowerCase().indexOf("h");case"m":return-1!==l.indexOf("m");case"s":return-1!==l.indexOf("s");default:return!1}},T=function(){return k("h")||k("m")||k("s")},Y=function(){return k("y")||k("M")||k("d")},S=function(){var t=e("<thead>").append(e("<tr>").append(e("<th>").addClass("prev").attr("data-action","previous").append(e("<span>").addClass(i.icons.previous))).append(e("<th>").addClass("picker-switch").attr("data-action","pickerSwitch").attr("colspan",i.calendarWeeks?"6":"5")).append(e("<th>").addClass("next").attr("data-action","next").append(e("<span>").addClass(i.icons.next)))),n=e("<tbody>").append(e("<tr>").append(e("<td>").attr("colspan",i.calendarWeeks?"8":"7")));return[e("<div>").addClass("datepicker-days").append(e("<table>").addClass("table-condensed").append(t).append(e("<tbody>"))),e("<div>").addClass("datepicker-months").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone())),e("<div>").addClass("datepicker-years").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone())),e("<div>").addClass("datepicker-decades").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone()))]},x=function(){var t=e("<tr>"),n=e("<tr>"),r=e("<tr>");return k("h")&&(t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementHour}).addClass("btn").attr("data-action","incrementHours").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-hour").attr({"data-time-component":"hours",title:i.tooltips.pickHour}).attr("data-action","showHours"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementHour}).addClass("btn").attr("data-action","decrementHours").append(e("<span>").addClass(i.icons.down))))),k("m")&&(k("h")&&(t.append(e("<td>").addClass("separator")),n.append(e("<td>").addClass("separator").html(":")),r.append(e("<td>").addClass("separator"))),t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementMinute}).addClass("btn").attr("data-action","incrementMinutes").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-minute").attr({"data-time-component":"minutes",title:i.tooltips.pickMinute}).attr("data-action","showMinutes"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementMinute}).addClass("btn").attr("data-action","decrementMinutes").append(e("<span>").addClass(i.icons.down))))),k("s")&&(k("m")&&(t.append(e("<td>").addClass("separator")),n.append(e("<td>").addClass("separator").html(":")),r.append(e("<td>").addClass("separator"))),t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementSecond}).addClass("btn").attr("data-action","incrementSeconds").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-second").attr({"data-time-component":"seconds",title:i.tooltips.pickSecond}).attr("data-action","showSeconds"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementSecond}).addClass("btn").attr("data-action","decrementSeconds").append(e("<span>").addClass(i.icons.down))))),s||(t.append(e("<td>").addClass("separator")),n.append(e("<td>").append(e("<button>").addClass("btn btn-primary").attr({"data-action":"togglePeriod",tabindex:"-1",title:i.tooltips.togglePeriod}))),r.append(e("<td>").addClass("separator"))),e("<div>").addClass("timepicker-picker").append(e("<table>").addClass("table-condensed").append([t,n,r]))},C=function(){var t=e("<div>").addClass("timepicker-hours").append(e("<table>").addClass("table-condensed")),n=e("<div>").addClass("timepicker-minutes").append(e("<table>").addClass("table-condensed")),i=e("<div>").addClass("timepicker-seconds").append(e("<table>").addClass("table-condensed")),r=[x()];return k("h")&&r.push(t),k("m")&&r.push(n),k("s")&&r.push(i),r},E=function(){var t=[];return i.showTodayButton&&t.push(e("<td>").append(e("<a>").attr({"data-action":"today",title:i.tooltips.today}).append(e("<span>").addClass(i.icons.today)))),!i.sideBySide&&Y()&&T()&&t.push(e("<td>").append(e("<a>").attr({"data-action":"togglePicker",title:i.tooltips.selectTime}).append(e("<span>").addClass(i.icons.time)))),i.showClear&&t.push(e("<td>").append(e("<a>").attr({"data-action":"clear",title:i.tooltips.clear}).append(e("<span>").addClass(i.icons.clear)))),i.showClose&&t.push(e("<td>").append(e("<a>").attr({"data-action":"close",title:i.tooltips.close}).append(e("<span>").addClass(i.icons.close)))),e("<table>").addClass("table-condensed").append(e("<tbody>").append(e("<tr>").append(t)))},H=function(){var t=e("<div>").addClass("bootstrap-datetimepicker-widget dropdown-menu"),n=e("<div>").addClass("datepicker").append(S()),r=e("<div>").addClass("timepicker").append(C()),a=e("<ul>").addClass("list-unstyled"),o=e("<li>").addClass("picker-switch"+(i.collapse?" accordion-toggle":"")).append(E());return i.inline&&t.removeClass("dropdown-menu"),s&&t.addClass("usetwentyfour"),k("s")&&!s&&t.addClass("wider"),i.sideBySide&&Y()&&T()?(t.addClass("timepicker-sbs"),"top"===i.toolbarPlacement&&t.append(o),t.append(e("<div>").addClass("row").append(n.addClass("col-md-6")).append(r.addClass("col-md-6"))),"bottom"===i.toolbarPlacement&&t.append(o),t):("top"===i.toolbarPlacement&&a.append(o),Y()&&a.append(e("<li>").addClass(i.collapse&&T()?"collapse in":"").append(n)),"default"===i.toolbarPlacement&&a.append(o),T()&&a.append(e("<li>").addClass(i.collapse&&Y()?"collapse":"").append(r)),"bottom"===i.toolbarPlacement&&a.append(o),t.append(a))},A=function(){var t,r={};return t=n.is("input")||i.inline?n.data():n.find("input").data(),t.dateOptions&&t.dateOptions instanceof Object&&(r=e.extend(!0,r,t.dateOptions)),e.each(i,function(e){var n="date"+e.charAt(0).toUpperCase()+e.slice(1);void 0!==t[n]&&(r[e]=t[n])}),r},j=function(){var t,r=(p||n).position(),a=(p||n).offset(),o=i.widgetPositioning.vertical,s=i.widgetPositioning.horizontal;if(i.widgetParent)t=i.widgetParent.append(m);else if(n.is("input"))t=n.after(m).parent();else{if(i.inline)return void(t=n.append(m));t=n,n.children().first().after(m)}if("auto"===o&&(o=a.top+1.5*m.height()>=e(window).height()+e(window).scrollTop()&&m.height()+n.outerHeight()<a.top?"top":"bottom"),"auto"===s&&(s=t.width()<a.left+m.outerWidth()/2&&a.left+m.outerWidth()>e(window).width()?"right":"left"),"top"===o?m.addClass("top").removeClass("bottom"):m.addClass("bottom").removeClass("top"),"right"===s?m.addClass("pull-right"):m.removeClass("pull-right"),"relative"!==t.css("position")&&(t=t.parents().filter(function(){return"relative"===e(this).css("position")}).first()),0===t.length)throw new Error("datetimepicker component should be placed within a relative positioned container");m.css({top:"top"===o?"auto":r.top+n.outerHeight(),bottom:"top"===o?t.outerHeight()-(t===n?0:r.top):"auto",left:"left"===s?t===n?0:r.left:"auto",right:"left"===s?"auto":t.outerWidth()-n.outerWidth()-(t===n?0:r.left)})},P=function(e){"dp.change"===e.type&&(e.date&&e.date.isSame(e.oldDate)||!e.date&&!e.oldDate)||n.trigger(e)},I=function(e){"y"===e&&(e="YYYY"),P({type:"dp.update",change:e,viewDate:a.clone()})},O=function(e){m&&(e&&(u=Math.max(f,Math.min(3,u+e))),m.find(".datepicker > div").hide().filter(".datepicker-"+_[u].clsName).show())},z=function(){var t=e("<tr>"),n=a.clone().startOf("w").startOf("d");for(i.calendarWeeks===!0&&t.append(e("<th>").addClass("cw").text("#"));n.isBefore(a.clone().endOf("w"));)t.append(e("<th>").addClass("dow").text(n.format("dd"))),n.add(1,"d");m.find(".datepicker-days thead").append(t)},F=function(e){return i.disabledDates[e.format("YYYY-MM-DD")]===!0},W=function(e){return i.enabledDates[e.format("YYYY-MM-DD")]===!0},R=function(e){return i.disabledHours[e.format("H")]===!0},$=function(e){return i.enabledHours[e.format("H")]===!0},N=function(t,n){if(!t.isValid())return!1;if(i.disabledDates&&"d"===n&&F(t))return!1;if(i.enabledDates&&"d"===n&&!W(t))return!1;if(i.minDate&&t.isBefore(i.minDate,n))return!1;if(i.maxDate&&t.isAfter(i.maxDate,n))return!1;if(i.daysOfWeekDisabled&&"d"===n&&-1!==i.daysOfWeekDisabled.indexOf(t.day()))return!1;if(i.disabledHours&&("h"===n||"m"===n||"s"===n)&&R(t))return!1;if(i.enabledHours&&("h"===n||"m"===n||"s"===n)&&!$(t))return!1;if(i.disabledTimeIntervals&&("h"===n||"m"===n||"s"===n)){var r=!1;if(e.each(i.disabledTimeIntervals,function(){return t.isBetween(this[0],this[1])?(r=!0,!1):void 0}),r)return!1}return!0},q=function(){for(var t=[],n=a.clone().startOf("y").startOf("d");n.isSame(a,"y");)t.push(e("<span>").attr("data-action","selectMonth").addClass("month").text(n.format("MMM"))),n.add(1,"M");m.find(".datepicker-months td").empty().append(t)},B=function(){var t=m.find(".datepicker-months"),n=t.find("th"),o=t.find("tbody").find("span");n.eq(0).find("span").attr("title",i.tooltips.prevYear),n.eq(1).attr("title",i.tooltips.selectYear),n.eq(2).find("span").attr("title",i.tooltips.nextYear),t.find(".disabled").removeClass("disabled"),N(a.clone().subtract(1,"y"),"y")||n.eq(0).addClass("disabled"),n.eq(1).text(a.year()),N(a.clone().add(1,"y"),"y")||n.eq(2).addClass("disabled"),o.removeClass("active"),r.isSame(a,"y")&&!h&&o.eq(r.month()).addClass("active"),o.each(function(t){N(a.clone().month(t),"M")||e(this).addClass("disabled")})},U=function(){var e=m.find(".datepicker-years"),t=e.find("th"),n=a.clone().subtract(5,"y"),o=a.clone().add(6,"y"),s="";for(t.eq(0).find("span").attr("title",i.tooltips.prevDecade),t.eq(1).attr("title",i.tooltips.selectDecade),t.eq(2).find("span").attr("title",i.tooltips.nextDecade),e.find(".disabled").removeClass("disabled"),i.minDate&&i.minDate.isAfter(n,"y")&&t.eq(0).addClass("disabled"),t.eq(1).text(n.year()+"-"+o.year()),i.maxDate&&i.maxDate.isBefore(o,"y")&&t.eq(2).addClass("disabled");!n.isAfter(o,"y");)s+='<span data-action="selectYear" class="year'+(n.isSame(r,"y")&&!h?" active":"")+(N(n,"y")?"":" disabled")+'">'+n.year()+"</span>",n.add(1,"y");e.find("td").html(s)},J=function(){var e,n=m.find(".datepicker-decades"),o=n.find("th"),s=t({y:a.year()-a.year()%100-1}),l=s.clone().add(100,"y"),d=s.clone(),u=!1,c=!1,h="";for(o.eq(0).find("span").attr("title",i.tooltips.prevCentury),o.eq(2).find("span").attr("title",i.tooltips.nextCentury),n.find(".disabled").removeClass("disabled"),(s.isSame(t({y:1900}))||i.minDate&&i.minDate.isAfter(s,"y"))&&o.eq(0).addClass("disabled"),o.eq(1).text(s.year()+"-"+l.year()),(s.isSame(t({y:2e3}))||i.maxDate&&i.maxDate.isBefore(l,"y"))&&o.eq(2).addClass("disabled");!s.isAfter(l,"y");)e=s.year()+12,u=i.minDate&&i.minDate.isAfter(s,"y")&&i.minDate.year()<=e,c=i.maxDate&&i.maxDate.isAfter(s,"y")&&i.maxDate.year()<=e,h+='<span data-action="selectDecade" class="decade'+(r.isAfter(s)&&r.year()<=e?" active":"")+(N(s,"y")||u||c?"":" disabled")+'" data-selection="'+(s.year()+6)+'">'+(s.year()+1)+" - "+(s.year()+12)+"</span>",s.add(12,"y");h+="<span></span><span></span><span></span>",n.find("td").html(h),o.eq(1).text(d.year()+1+"-"+s.year())},V=function(){var t,n,o,s,l=m.find(".datepicker-days"),d=l.find("th"),u=[];if(Y()){for(d.eq(0).find("span").attr("title",i.tooltips.prevMonth),d.eq(1).attr("title",i.tooltips.selectMonth),d.eq(2).find("span").attr("title",i.tooltips.nextMonth),l.find(".disabled").removeClass("disabled"),d.eq(1).text(a.format(i.dayViewHeaderFormat)),N(a.clone().subtract(1,"M"),"M")||d.eq(0).addClass("disabled"),N(a.clone().add(1,"M"),"M")||d.eq(2).addClass("disabled"),t=a.clone().startOf("M").startOf("w").startOf("d"),s=0;42>s;s++)0===t.weekday()&&(n=e("<tr>"),i.calendarWeeks&&n.append('<td class="cw">'+t.week()+"</td>"),u.push(n)),o="",t.isBefore(a,"M")&&(o+=" old"),t.isAfter(a,"M")&&(o+=" new"),t.isSame(r,"d")&&!h&&(o+=" active"),N(t,"d")||(o+=" disabled"),t.isSame(D(),"d")&&(o+=" today"),0!==t.day()&&6!==t.day()||(o+=" weekend"),n.append('<td data-action="selectDay" data-day="'+t.format("L")+'" class="day'+o+'">'+t.date()+"</td>"),t.add(1,"d");l.find("tbody").empty().append(u),B(),U(),J()}},G=function(){var t=m.find(".timepicker-hours table"),n=a.clone().startOf("d"),i=[],r=e("<tr>");for(a.hour()>11&&!s&&n.hour(12);n.isSame(a,"d")&&(s||a.hour()<12&&n.hour()<12||a.hour()>11);)n.hour()%4===0&&(r=e("<tr>"),i.push(r)),r.append('<td data-action="selectHour" class="hour'+(N(n,"h")?"":" disabled")+'">'+n.format(s?"HH":"hh")+"</td>"),n.add(1,"h");t.empty().append(i)},X=function(){for(var t=m.find(".timepicker-minutes table"),n=a.clone().startOf("h"),r=[],o=e("<tr>"),s=1===i.stepping?5:i.stepping;a.isSame(n,"h");)n.minute()%(4*s)===0&&(o=e("<tr>"),r.push(o)),o.append('<td data-action="selectMinute" class="minute'+(N(n,"m")?"":" disabled")+'">'+n.format("mm")+"</td>"),n.add(s,"m");t.empty().append(r)},K=function(){for(var t=m.find(".timepicker-seconds table"),n=a.clone().startOf("m"),i=[],r=e("<tr>");a.isSame(n,"m");)n.second()%20===0&&(r=e("<tr>"),i.push(r)),r.append('<td data-action="selectSecond" class="second'+(N(n,"s")?"":" disabled")+'">'+n.format("ss")+"</td>"),n.add(5,"s");t.empty().append(i)},Q=function(){var e,t,n=m.find(".timepicker span[data-time-component]");s||(e=m.find(".timepicker [data-action=togglePeriod]"),t=r.clone().add(r.hours()>=12?-12:12,"h"),e.text(r.format("A")),N(t,"h")?e.removeClass("disabled"):e.addClass("disabled")),n.filter("[data-time-component=hours]").text(r.format(s?"HH":"hh")),
n.filter("[data-time-component=minutes]").text(r.format("mm")),n.filter("[data-time-component=seconds]").text(r.format("ss")),G(),X(),K()},Z=function(){m&&(V(),Q())},ee=function(e){var t=h?null:r;return e?(e=e.clone().locale(i.locale),w()&&e.tz(i.timeZone),1!==i.stepping&&e.minutes(Math.round(e.minutes()/i.stepping)*i.stepping).seconds(0),void(N(e)?(r=e,o.val(r.format(l)),n.data("date",r.format(l)),h=!1,Z(),P({type:"dp.change",date:r.clone(),oldDate:t})):(i.keepInvalid?P({type:"dp.change",date:e,oldDate:t}):o.val(h?"":r.format(l)),P({type:"dp.error",date:e,oldDate:t})))):(h=!0,o.val(""),n.data("date",""),P({type:"dp.change",date:!1,oldDate:t}),void Z())},te=function(){var t=!1;return m?(m.find(".collapse").each(function(){var n=e(this).data("collapse");return!n||!n.transitioning||(t=!0,!1)}),t?c:(p&&p.hasClass("btn")&&p.toggleClass("active"),m.hide(),e(window).off("resize",j),m.off("click","[data-action]"),m.off("mousedown",!1),m.remove(),m=!1,P({type:"dp.hide",date:r.clone()}),o.blur(),u=0,a=r.clone(),c)):c},ne=function(){ee(null)},ie=function(e){return void 0===i.parseInputDate?t.isMoment(e)||(e=D(e)):e=i.parseInputDate(e),e},re={next:function(){var e=_[u].navFnc;a.add(_[u].navStep,e),V(),I(e)},previous:function(){var e=_[u].navFnc;a.subtract(_[u].navStep,e),V(),I(e)},pickerSwitch:function(){O(1)},selectMonth:function(t){var n=e(t.target).closest("tbody").find("span").index(e(t.target));a.month(n),u===f?(ee(r.clone().year(a.year()).month(a.month())),i.inline||te()):(O(-1),V()),I("M")},selectYear:function(t){var n=parseInt(e(t.target).text(),10)||0;a.year(n),u===f?(ee(r.clone().year(a.year())),i.inline||te()):(O(-1),V()),I("YYYY")},selectDecade:function(t){var n=parseInt(e(t.target).data("selection"),10)||0;a.year(n),u===f?(ee(r.clone().year(a.year())),i.inline||te()):(O(-1),V()),I("YYYY")},selectDay:function(t){var n=a.clone();e(t.target).is(".old")&&n.subtract(1,"M"),e(t.target).is(".new")&&n.add(1,"M"),ee(n.date(parseInt(e(t.target).text(),10))),T()||i.keepOpen||i.inline||te()},incrementHours:function(){var e=r.clone().add(1,"h");N(e,"h")&&ee(e)},incrementMinutes:function(){var e=r.clone().add(i.stepping,"m");N(e,"m")&&ee(e)},incrementSeconds:function(){var e=r.clone().add(1,"s");N(e,"s")&&ee(e)},decrementHours:function(){var e=r.clone().subtract(1,"h");N(e,"h")&&ee(e)},decrementMinutes:function(){var e=r.clone().subtract(i.stepping,"m");N(e,"m")&&ee(e)},decrementSeconds:function(){var e=r.clone().subtract(1,"s");N(e,"s")&&ee(e)},togglePeriod:function(){ee(r.clone().add(r.hours()>=12?-12:12,"h"))},togglePicker:function(t){var n,r=e(t.target),a=r.closest("ul"),o=a.find(".in"),s=a.find(".collapse:not(.in)");if(o&&o.length){if(n=o.data("collapse"),n&&n.transitioning)return;o.collapse?(o.collapse("hide"),s.collapse("show")):(o.removeClass("in"),s.addClass("in")),r.is("span")?r.toggleClass(i.icons.time+" "+i.icons.date):r.find("span").toggleClass(i.icons.time+" "+i.icons.date)}},showPicker:function(){m.find(".timepicker > div:not(.timepicker-picker)").hide(),m.find(".timepicker .timepicker-picker").show()},showHours:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-hours").show()},showMinutes:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-minutes").show()},showSeconds:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-seconds").show()},selectHour:function(t){var n=parseInt(e(t.target).text(),10);s||(r.hours()>=12?12!==n&&(n+=12):12===n&&(n=0)),ee(r.clone().hours(n)),re.showPicker.call(c)},selectMinute:function(t){ee(r.clone().minutes(parseInt(e(t.target).text(),10))),re.showPicker.call(c)},selectSecond:function(t){ee(r.clone().seconds(parseInt(e(t.target).text(),10))),re.showPicker.call(c)},clear:ne,today:function(){var e=D();N(e,"d")&&ee(e)},close:te},ae=function(t){return!e(t.currentTarget).is(".disabled")&&(re[e(t.currentTarget).data("action")].apply(c,arguments),!1)},oe=function(){var t,n={year:function(e){return e.month(0).date(1).hours(0).seconds(0).minutes(0)},month:function(e){return e.date(1).hours(0).seconds(0).minutes(0)},day:function(e){return e.hours(0).seconds(0).minutes(0)},hour:function(e){return e.seconds(0).minutes(0)},minute:function(e){return e.seconds(0)}};return o.prop("disabled")||!i.ignoreReadonly&&o.prop("readonly")||m?c:(void 0!==o.val()&&0!==o.val().trim().length?ee(ie(o.val().trim())):h&&i.useCurrent&&(i.inline||o.is("input")&&0===o.val().trim().length)&&(t=D(),"string"==typeof i.useCurrent&&(t=n[i.useCurrent](t)),ee(t)),m=H(),z(),q(),m.find(".timepicker-hours").hide(),m.find(".timepicker-minutes").hide(),m.find(".timepicker-seconds").hide(),Z(),O(),e(window).on("resize",j),m.on("click","[data-action]",ae),m.on("mousedown",!1),p&&p.hasClass("btn")&&p.toggleClass("active"),j(),m.show(),i.focusOnShow&&!o.is(":focus")&&o.focus(),P({type:"dp.show"}),c)},se=function(){return m?te():oe()},le=function(e){var t,n,r,a,o=null,s=[],l={},d=e.which,u="p";b[d]=u;for(t in b)b.hasOwnProperty(t)&&b[t]===u&&(s.push(t),parseInt(t,10)!==d&&(l[t]=!0));for(t in i.keyBinds)if(i.keyBinds.hasOwnProperty(t)&&"function"==typeof i.keyBinds[t]&&(r=t.split(" "),r.length===s.length&&L[d]===r[r.length-1])){for(a=!0,n=r.length-2;n>=0;n--)if(!(L[r[n]]in l)){a=!1;break}if(a){o=i.keyBinds[t];break}}o&&(o.call(c,m),e.stopPropagation(),e.preventDefault())},de=function(e){b[e.which]="r",e.stopPropagation(),e.preventDefault()},ue=function(t){var n=e(t.target).val().trim(),i=n?ie(n):null;return ee(i),t.stopImmediatePropagation(),!1},ce=function(){o.on({change:ue,blur:i.debug?"":te,keydown:le,keyup:de,focus:i.allowInputToggle?oe:""}),n.is("input")?o.on({focus:oe}):p&&(p.on("click",se),p.on("mousedown",!1))},he=function(){o.off({change:ue,blur:blur,keydown:le,keyup:de,focus:i.allowInputToggle?te:""}),n.is("input")?o.off({focus:oe}):p&&(p.off("click",se),p.off("mousedown",!1))},pe=function(t){var n={};return e.each(t,function(){var e=ie(this);e.isValid()&&(n[e.format("YYYY-MM-DD")]=!0)}),!!Object.keys(n).length&&n},me=function(t){var n={};return e.each(t,function(){n[this]=!0}),!!Object.keys(n).length&&n},fe=function(){var e=i.format||"L LT";l=e.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,function(e){var t=r.localeData().longDateFormat(e)||e;return t.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,function(e){return r.localeData().longDateFormat(e)||e})}),d=i.extraFormats?i.extraFormats.slice():[],d.indexOf(e)<0&&d.indexOf(l)<0&&d.push(l),s=l.toLowerCase().indexOf("a")<1&&l.replace(/\[.*?\]/g,"").indexOf("h")<1,k("y")&&(f=2),k("M")&&(f=1),k("d")&&(f=0),u=Math.max(f,u),h||ee(r)};if(c.destroy=function(){te(),he(),n.removeData("DateTimePicker"),n.removeData("date")},c.toggle=se,c.show=oe,c.hide=te,c.disable=function(){return te(),p&&p.hasClass("btn")&&p.addClass("disabled"),o.prop("disabled",!0),c},c.enable=function(){return p&&p.hasClass("btn")&&p.removeClass("disabled"),o.prop("disabled",!1),c},c.ignoreReadonly=function(e){if(0===arguments.length)return i.ignoreReadonly;if("boolean"!=typeof e)throw new TypeError("ignoreReadonly () expects a boolean parameter");return i.ignoreReadonly=e,c},c.options=function(t){if(0===arguments.length)return e.extend(!0,{},i);if(!(t instanceof Object))throw new TypeError("options() options parameter should be an object");return e.extend(!0,i,t),e.each(i,function(e,t){if(void 0===c[e])throw new TypeError("option "+e+" is not recognized!");c[e](t)}),c},c.date=function(e){if(0===arguments.length)return h?null:r.clone();if(!(null===e||"string"==typeof e||t.isMoment(e)||e instanceof Date))throw new TypeError("date() parameter must be one of [null, string, moment or Date]");return ee(null===e?null:ie(e)),c},c.format=function(e){if(0===arguments.length)return i.format;if("string"!=typeof e&&("boolean"!=typeof e||e!==!1))throw new TypeError("format() expects a string or boolean:false parameter "+e);return i.format=e,l&&fe(),c},c.timeZone=function(e){if(0===arguments.length)return i.timeZone;if("string"!=typeof e)throw new TypeError("newZone() expects a string parameter");return i.timeZone=e,c},c.dayViewHeaderFormat=function(e){if(0===arguments.length)return i.dayViewHeaderFormat;if("string"!=typeof e)throw new TypeError("dayViewHeaderFormat() expects a string parameter");return i.dayViewHeaderFormat=e,c},c.extraFormats=function(e){if(0===arguments.length)return i.extraFormats;if(e!==!1&&!(e instanceof Array))throw new TypeError("extraFormats() expects an array or false parameter");return i.extraFormats=e,d&&fe(),c},c.disabledDates=function(t){if(0===arguments.length)return i.disabledDates?e.extend({},i.disabledDates):i.disabledDates;if(!t)return i.disabledDates=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledDates() expects an array parameter");return i.disabledDates=pe(t),i.enabledDates=!1,Z(),c},c.enabledDates=function(t){if(0===arguments.length)return i.enabledDates?e.extend({},i.enabledDates):i.enabledDates;if(!t)return i.enabledDates=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("enabledDates() expects an array parameter");return i.enabledDates=pe(t),i.disabledDates=!1,Z(),c},c.daysOfWeekDisabled=function(e){if(0===arguments.length)return i.daysOfWeekDisabled.splice(0);if("boolean"==typeof e&&!e)return i.daysOfWeekDisabled=!1,Z(),c;if(!(e instanceof Array))throw new TypeError("daysOfWeekDisabled() expects an array parameter");if(i.daysOfWeekDisabled=e.reduce(function(e,t){return t=parseInt(t,10),t>6||0>t||isNaN(t)?e:(-1===e.indexOf(t)&&e.push(t),e)},[]).sort(),i.useCurrent&&!i.keepInvalid){for(var t=0;!N(r,"d");){if(r.add(1,"d"),7===t)throw"Tried 7 times to find a valid date";t++}ee(r)}return Z(),c},c.maxDate=function(e){if(0===arguments.length)return i.maxDate?i.maxDate.clone():i.maxDate;if("boolean"==typeof e&&e===!1)return i.maxDate=!1,Z(),c;"string"==typeof e&&("now"!==e&&"moment"!==e||(e=D()));var t=ie(e);if(!t.isValid())throw new TypeError("maxDate() Could not parse date parameter: "+e);if(i.minDate&&t.isBefore(i.minDate))throw new TypeError("maxDate() date parameter is before options.minDate: "+t.format(l));return i.maxDate=t,i.useCurrent&&!i.keepInvalid&&r.isAfter(e)&&ee(i.maxDate),a.isAfter(t)&&(a=t.clone().subtract(i.stepping,"m")),Z(),c},c.minDate=function(e){if(0===arguments.length)return i.minDate?i.minDate.clone():i.minDate;if("boolean"==typeof e&&e===!1)return i.minDate=!1,Z(),c;"string"==typeof e&&("now"!==e&&"moment"!==e||(e=D()));var t=ie(e);if(!t.isValid())throw new TypeError("minDate() Could not parse date parameter: "+e);if(i.maxDate&&t.isAfter(i.maxDate))throw new TypeError("minDate() date parameter is after options.maxDate: "+t.format(l));return i.minDate=t,i.useCurrent&&!i.keepInvalid&&r.isBefore(e)&&ee(i.minDate),a.isBefore(t)&&(a=t.clone().add(i.stepping,"m")),Z(),c},c.defaultDate=function(e){if(0===arguments.length)return i.defaultDate?i.defaultDate.clone():i.defaultDate;if(!e)return i.defaultDate=!1,c;"string"==typeof e&&(e="now"===e||"moment"===e?D():D(e));var t=ie(e);if(!t.isValid())throw new TypeError("defaultDate() Could not parse date parameter: "+e);if(!N(t))throw new TypeError("defaultDate() date passed is invalid according to component setup validations");return i.defaultDate=t,(i.defaultDate&&i.inline||""===o.val().trim())&&ee(i.defaultDate),c},c.locale=function(e){if(0===arguments.length)return i.locale;if(!t.localeData(e))throw new TypeError("locale() locale "+e+" is not loaded from moment locales!");return i.locale=e,r.locale(i.locale),a.locale(i.locale),l&&fe(),m&&(te(),oe()),c},c.stepping=function(e){return 0===arguments.length?i.stepping:(e=parseInt(e,10),(isNaN(e)||1>e)&&(e=1),i.stepping=e,c)},c.useCurrent=function(e){var t=["year","month","day","hour","minute"];if(0===arguments.length)return i.useCurrent;if("boolean"!=typeof e&&"string"!=typeof e)throw new TypeError("useCurrent() expects a boolean or string parameter");if("string"==typeof e&&-1===t.indexOf(e.toLowerCase()))throw new TypeError("useCurrent() expects a string parameter of "+t.join(", "));return i.useCurrent=e,c},c.collapse=function(e){if(0===arguments.length)return i.collapse;if("boolean"!=typeof e)throw new TypeError("collapse() expects a boolean parameter");return i.collapse===e?c:(i.collapse=e,m&&(te(),oe()),c)},c.icons=function(t){if(0===arguments.length)return e.extend({},i.icons);if(!(t instanceof Object))throw new TypeError("icons() expects parameter to be an Object");return e.extend(i.icons,t),m&&(te(),oe()),c},c.tooltips=function(t){if(0===arguments.length)return e.extend({},i.tooltips);if(!(t instanceof Object))throw new TypeError("tooltips() expects parameter to be an Object");return e.extend(i.tooltips,t),m&&(te(),oe()),c},c.useStrict=function(e){if(0===arguments.length)return i.useStrict;if("boolean"!=typeof e)throw new TypeError("useStrict() expects a boolean parameter");return i.useStrict=e,c},c.sideBySide=function(e){if(0===arguments.length)return i.sideBySide;if("boolean"!=typeof e)throw new TypeError("sideBySide() expects a boolean parameter");return i.sideBySide=e,m&&(te(),oe()),c},c.viewMode=function(e){if(0===arguments.length)return i.viewMode;if("string"!=typeof e)throw new TypeError("viewMode() expects a string parameter");if(-1===y.indexOf(e))throw new TypeError("viewMode() parameter must be one of ("+y.join(", ")+") value");return i.viewMode=e,u=Math.max(y.indexOf(e),f),O(),c},c.toolbarPlacement=function(e){if(0===arguments.length)return i.toolbarPlacement;if("string"!=typeof e)throw new TypeError("toolbarPlacement() expects a string parameter");if(-1===M.indexOf(e))throw new TypeError("toolbarPlacement() parameter must be one of ("+M.join(", ")+") value");return i.toolbarPlacement=e,m&&(te(),oe()),c},c.widgetPositioning=function(t){if(0===arguments.length)return e.extend({},i.widgetPositioning);if("[object Object]"!=={}.toString.call(t))throw new TypeError("widgetPositioning() expects an object variable");if(t.horizontal){if("string"!=typeof t.horizontal)throw new TypeError("widgetPositioning() horizontal variable must be a string");if(t.horizontal=t.horizontal.toLowerCase(),-1===v.indexOf(t.horizontal))throw new TypeError("widgetPositioning() expects horizontal parameter to be one of ("+v.join(", ")+")");i.widgetPositioning.horizontal=t.horizontal}if(t.vertical){if("string"!=typeof t.vertical)throw new TypeError("widgetPositioning() vertical variable must be a string");if(t.vertical=t.vertical.toLowerCase(),-1===g.indexOf(t.vertical))throw new TypeError("widgetPositioning() expects vertical parameter to be one of ("+g.join(", ")+")");i.widgetPositioning.vertical=t.vertical}return Z(),c},c.calendarWeeks=function(e){if(0===arguments.length)return i.calendarWeeks;if("boolean"!=typeof e)throw new TypeError("calendarWeeks() expects parameter to be a boolean value");return i.calendarWeeks=e,Z(),c},c.showTodayButton=function(e){if(0===arguments.length)return i.showTodayButton;if("boolean"!=typeof e)throw new TypeError("showTodayButton() expects a boolean parameter");return i.showTodayButton=e,m&&(te(),oe()),c},c.showClear=function(e){if(0===arguments.length)return i.showClear;if("boolean"!=typeof e)throw new TypeError("showClear() expects a boolean parameter");return i.showClear=e,m&&(te(),oe()),c},c.widgetParent=function(t){if(0===arguments.length)return i.widgetParent;if("string"==typeof t&&(t=e(t)),null!==t&&"string"!=typeof t&&!(t instanceof e))throw new TypeError("widgetParent() expects a string or a jQuery object parameter");return i.widgetParent=t,m&&(te(),oe()),c},c.keepOpen=function(e){if(0===arguments.length)return i.keepOpen;if("boolean"!=typeof e)throw new TypeError("keepOpen() expects a boolean parameter");return i.keepOpen=e,c},c.focusOnShow=function(e){if(0===arguments.length)return i.focusOnShow;if("boolean"!=typeof e)throw new TypeError("focusOnShow() expects a boolean parameter");return i.focusOnShow=e,c},c.inline=function(e){if(0===arguments.length)return i.inline;if("boolean"!=typeof e)throw new TypeError("inline() expects a boolean parameter");return i.inline=e,c},c.clear=function(){return ne(),c},c.keyBinds=function(e){return 0===arguments.length?i.keyBinds:(i.keyBinds=e,c)},c.getMoment=function(e){return D(e)},c.debug=function(e){if("boolean"!=typeof e)throw new TypeError("debug() expects a boolean parameter");return i.debug=e,c},c.allowInputToggle=function(e){if(0===arguments.length)return i.allowInputToggle;if("boolean"!=typeof e)throw new TypeError("allowInputToggle() expects a boolean parameter");return i.allowInputToggle=e,c},c.showClose=function(e){if(0===arguments.length)return i.showClose;if("boolean"!=typeof e)throw new TypeError("showClose() expects a boolean parameter");return i.showClose=e,c},c.keepInvalid=function(e){if(0===arguments.length)return i.keepInvalid;if("boolean"!=typeof e)throw new TypeError("keepInvalid() expects a boolean parameter");return i.keepInvalid=e,c},c.datepickerInput=function(e){if(0===arguments.length)return i.datepickerInput;if("string"!=typeof e)throw new TypeError("datepickerInput() expects a string parameter");return i.datepickerInput=e,c},c.parseInputDate=function(e){if(0===arguments.length)return i.parseInputDate;if("function"!=typeof e)throw new TypeError("parseInputDate() sholud be as function");return i.parseInputDate=e,c},c.disabledTimeIntervals=function(t){if(0===arguments.length)return i.disabledTimeIntervals?e.extend({},i.disabledTimeIntervals):i.disabledTimeIntervals;if(!t)return i.disabledTimeIntervals=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledTimeIntervals() expects an array parameter");return i.disabledTimeIntervals=t,Z(),c},c.disabledHours=function(t){if(0===arguments.length)return i.disabledHours?e.extend({},i.disabledHours):i.disabledHours;if(!t)return i.disabledHours=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledHours() expects an array parameter");if(i.disabledHours=me(t),i.enabledHours=!1,i.useCurrent&&!i.keepInvalid){for(var n=0;!N(r,"h");){if(r.add(1,"h"),24===n)throw"Tried 24 times to find a valid date";n++}ee(r)}return Z(),c},c.enabledHours=function(t){if(0===arguments.length)return i.enabledHours?e.extend({},i.enabledHours):i.enabledHours;if(!t)return i.enabledHours=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("enabledHours() expects an array parameter");if(i.enabledHours=me(t),i.disabledHours=!1,i.useCurrent&&!i.keepInvalid){for(var n=0;!N(r,"h");){if(r.add(1,"h"),24===n)throw"Tried 24 times to find a valid date";n++}ee(r)}return Z(),c},c.viewDate=function(e){if(0===arguments.length)return a.clone();if(!e)return a=r.clone(),c;if(!("string"==typeof e||t.isMoment(e)||e instanceof Date))throw new TypeError("viewDate() parameter must be one of [string, moment or Date]");return a=ie(e),I(),c},n.is("input"))o=n;else if(o=n.find(i.datepickerInput),0===o.length)o=n.find("input");else if(!o.is("input"))throw new Error('CSS class "'+i.datepickerInput+'" cannot be applied to non input element');if(n.hasClass("input-group")&&(p=0===n.find(".datepickerbutton").length?n.find(".input-group-addon"):n.find(".datepickerbutton")),!i.inline&&!o.is("input"))throw new Error("Could not initialize DateTimePicker without an input element");return r=D(),a=r.clone(),e.extend(!0,i,A()),c.options(i),fe(),ce(),o.prop("disabled")&&c.disable(),o.is("input")&&0!==o.val().trim().length?ee(ie(o.val().trim())):i.defaultDate&&void 0===o.attr("placeholder")&&ee(i.defaultDate),i.inline&&oe(),c};e.fn.datetimepicker=function(t){t=t||{};var i,r=Array.prototype.slice.call(arguments,1),a=!0,o=["destroy","hide","show","toggle"];if("object"==typeof t)return this.each(function(){var i=e(this);i.data("DateTimePicker")||(t=e.extend(!0,{},e.fn.datetimepicker.defaults,t),i.data("DateTimePicker",n(i,t)))});if("string"==typeof t)return this.each(function(){var n=e(this),o=n.data("DateTimePicker");if(!o)throw new Error('bootstrap-datetimepicker("'+t+'") method was called on an element that is not using DateTimePicker');i=o[t].apply(o,r),a=i===o}),a||e.inArray(t,o)>-1?this:i;throw new TypeError("Invalid arguments for DateTimePicker: "+t)},e.fn.datetimepicker.defaults={timeZone:"",format:!1,dayViewHeaderFormat:"MMMM YYYY",extraFormats:!1,stepping:1,minDate:!1,maxDate:!1,useCurrent:!0,collapse:!0,locale:t.locale(),defaultDate:!1,disabledDates:!1,enabledDates:!1,icons:{time:"glyphicon glyphicon-time",date:"glyphicon glyphicon-calendar",up:"glyphicon glyphicon-chevron-up",down:"glyphicon glyphicon-chevron-down",previous:"glyphicon glyphicon-chevron-left",next:"glyphicon glyphicon-chevron-right",today:"glyphicon glyphicon-screenshot",clear:"glyphicon glyphicon-trash",close:"glyphicon glyphicon-remove"},tooltips:{today:"Go to today",clear:"Clear selection",close:"Close the picker",selectMonth:"Select Month",prevMonth:"Previous Month",nextMonth:"Next Month",selectYear:"Select Year",prevYear:"Previous Year",nextYear:"Next Year",selectDecade:"Select Decade",prevDecade:"Previous Decade",nextDecade:"Next Decade",prevCentury:"Previous Century",nextCentury:"Next Century",pickHour:"Pick Hour",incrementHour:"Increment Hour",decrementHour:"Decrement Hour",pickMinute:"Pick Minute",incrementMinute:"Increment Minute",decrementMinute:"Decrement Minute",pickSecond:"Pick Second",incrementSecond:"Increment Second",decrementSecond:"Decrement Second",togglePeriod:"Toggle Period",selectTime:"Select Time"},useStrict:!1,sideBySide:!1,daysOfWeekDisabled:!1,calendarWeeks:!1,viewMode:"days",toolbarPlacement:"default",showTodayButton:!1,showClear:!1,showClose:!1,widgetPositioning:{horizontal:"auto",vertical:"auto"},widgetParent:null,ignoreReadonly:!1,keepOpen:!1,focusOnShow:!0,inline:!1,keepInvalid:!1,datepickerInput:".datepickerinput",keyBinds:{up:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().subtract(7,"d")):this.date(t.clone().add(this.stepping(),"m"))}},down:function(e){if(!e)return void this.show();var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().add(7,"d")):this.date(t.clone().subtract(this.stepping(),"m"))},"control up":function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().subtract(1,"y")):this.date(t.clone().add(1,"h"))}},"control down":function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().add(1,"y")):this.date(t.clone().subtract(1,"h"))}},left:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().subtract(1,"d"))}},right:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().add(1,"d"))}},pageUp:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().subtract(1,"M"))}},pageDown:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().add(1,"M"))}},enter:function(){this.hide()},escape:function(){this.hide()},"control space":function(e){e.find(".timepicker").is(":visible")&&e.find('.btn[data-action="togglePeriod"]').click()},t:function(){this.date(this.getMoment())},"delete":function(){this.clear()}},debug:!1,allowInputToggle:!1,disabledTimeIntervals:!1,disabledHours:!1,enabledHours:!1,viewDate:!1},"undefined"!=typeof module&&(module.exports=e.fn.datetimepicker)});var iosOverlay=function(e){var t,n=function(){},i={onbeforeshow:n,onshow:n,onbeforehide:n,onhide:n,text:"",icon:null,spinner:null,duration:null,id:null,parentEl:null},r=function(e,t){var n={};for(var i in e)n[i]=e[i];for(var r in t)n[r]=t[r];return n},a=function(){var e=document.body||document.documentElement,t=e.style,n="transition";if("string"==typeof t[n])return!0;var i=["Moz","Webkit","Khtml","O","ms"];n=n.charAt(0).toUpperCase()+n.substr(1);for(var r=0;r<i.length;r++)if("string"==typeof t[i[r]+n])return!0;return!1}(),o=r(i,e),s=function(e){"ios-overlay-show"===e.animationName&&o.onshow(),"ios-overlay-hide"===e.animationName&&(d(),o.onhide())},l=(function(){t=document.createElement("div"),t.className="ui-ios-overlay",t.innerHTML+='<span class="title">'+o.text+"</span",e.icon?t.innerHTML+='<img src="'+e.icon+'">':e.spinner&&t.appendChild(e.spinner.el),a&&(t.addEventListener("webkitAnimationEnd",s,!1),t.addEventListener("msAnimationEnd",s,!1),t.addEventListener("oAnimationEnd",s,!1),t.addEventListener("animationend",s,!1)),e.parentEl?document.getElementById(e.parentEl).appendChild(t):document.body.appendChild(t),o.onbeforeshow(),a?t.className+=" ios-overlay-show":"function"==typeof $&&$(t).fadeIn({duration:200},function(){o.onshow()}),o.duration&&window.setTimeout(function(){l()},o.duration)}(),function(){o.onbeforehide(),a?t.className=t.className.replace("show","hide"):"function"==typeof $&&$(t).fadeOut({duration:200},function(){d(),o.onhide()})}),d=function(){e.parentEl?document.getElementById(e.parentEl).removeChild(t):document.body.removeChild(t)},u=function(e){e.text&&(t.getElementsByTagName("span")[0].innerHTML=e.text),e.icon&&(o.spinner&&(o.spinner.el.parentNode.removeChild(o.spinner.el),o.spinner=null),t.innerHTML+='<img src="'+e.icon+'">')};return{hide:l,destroy:d,update:u}};"function"==typeof define&&define.amd&&define([],function(){return iosOverlay}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):window.jQuery||window.Zepto)}(function(e){var t,n,i,r,a,o,s="Close",l="BeforeClose",d="AfterClose",u="BeforeAppend",c="MarkupParse",h="Open",p="Change",m="mfp",f="."+m,_="mfp-ready",y="mfp-removing",g="mfp-prevent-close",v=function(){},M=!!window.jQuery,L=e(window),b=function(e,n){t.ev.on(m+e+f,n)},w=function(t,n,i,r){var a=document.createElement("div");return a.className="mfp-"+t,i&&(a.innerHTML=i),r?n&&n.appendChild(a):(a=e(a),n&&a.appendTo(n)),a},D=function(n,i){t.ev.triggerHandler(m+n,i),t.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),t.st.callbacks[n]&&t.st.callbacks[n].apply(t,e.isArray(i)?i:[i]))},k=function(n){return n===o&&t.currTemplate.closeBtn||(t.currTemplate.closeBtn=e(t.st.closeMarkup.replace("%title%",t.st.tClose)),o=n),t.currTemplate.closeBtn},T=function(){e.magnificPopup.instance||(t=new v,t.init(),e.magnificPopup.instance=t)},Y=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1};v.prototype={constructor:v,init:function(){var n=navigator.appVersion;t.isLowIE=t.isIE8=document.all&&!document.addEventListener,t.isAndroid=/android/gi.test(n),t.isIOS=/iphone|ipad|ipod/gi.test(n),t.supportsTransition=Y(),t.probablyMobile=t.isAndroid||t.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=e(document),t.popupsCache={}},open:function(n){var r;if(n.isObj===!1){t.items=n.items.toArray(),t.index=0;var o,s=n.items;for(r=0;r<s.length;r++)if(o=s[r],o.parsed&&(o=o.el[0]),o===n.el[0]){t.index=r;break}}else t.items=e.isArray(n.items)?n.items:[n.items],t.index=n.index||0;if(t.isOpen)return void t.updateItemHTML();t.types=[],a="",n.mainEl&&n.mainEl.length?t.ev=n.mainEl.eq(0):t.ev=i,n.key?(t.popupsCache[n.key]||(t.popupsCache[n.key]={}),t.currTemplate=t.popupsCache[n.key]):t.currTemplate={},t.st=e.extend(!0,{},e.magnificPopup.defaults,n),t.fixedContentPos="auto"===t.st.fixedContentPos?!t.probablyMobile:t.st.fixedContentPos,t.st.modal&&(t.st.closeOnContentClick=!1,t.st.closeOnBgClick=!1,t.st.showCloseBtn=!1,t.st.enableEscapeKey=!1),t.bgOverlay||(t.bgOverlay=w("bg").on("click"+f,function(){t.close()}),t.wrap=w("wrap").attr("tabindex",-1).on("click"+f,function(e){t._checkIfClose(e.target)&&t.close()}),t.container=w("container",t.wrap)),t.contentContainer=w("content"),t.st.preloader&&(t.preloader=w("preloader",t.container,t.st.tLoading));var l=e.magnificPopup.modules;for(r=0;r<l.length;r++){var d=l[r];d=d.charAt(0).toUpperCase()+d.slice(1),t["init"+d].call(t)}D("BeforeOpen"),t.st.showCloseBtn&&(t.st.closeBtnInside?(b(c,function(e,t,n,i){n.close_replaceWith=k(i.type)}),a+=" mfp-close-btn-in"):t.wrap.append(k())),t.st.alignTop&&(a+=" mfp-align-top"),t.fixedContentPos?t.wrap.css({overflow:t.st.overflowY,overflowX:"hidden",overflowY:t.st.overflowY}):t.wrap.css({top:L.scrollTop(),position:"absolute"}),(t.st.fixedBgPos===!1||"auto"===t.st.fixedBgPos&&!t.fixedContentPos)&&t.bgOverlay.css({height:i.height(),position:"absolute"}),t.st.enableEscapeKey&&i.on("keyup"+f,function(e){27===e.keyCode&&t.close()}),L.on("resize"+f,function(){t.updateSize()}),t.st.closeOnContentClick||(a+=" mfp-auto-cursor"),a&&t.wrap.addClass(a);var u=t.wH=L.height(),p={};if(t.fixedContentPos&&t._hasScrollBar(u)){var m=t._getScrollbarSize();m&&(p.marginRight=m)}t.fixedContentPos&&(t.isIE7?e("body, html").css("overflow","hidden"):p.overflow="hidden");var y=t.st.mainClass;return t.isIE7&&(y+=" mfp-ie7"),y&&t._addClassToMFP(y),t.updateItemHTML(),D("BuildControls"),e("html").css(p),t.bgOverlay.add(t.wrap).prependTo(t.st.prependTo||e(document.body)),t._lastFocusedEl=document.activeElement,setTimeout(function(){t.content?(t._addClassToMFP(_),t._setFocus()):t.bgOverlay.addClass(_),i.on("focusin"+f,t._onFocusIn)},16),t.isOpen=!0,t.updateSize(u),D(h),n},close:function(){t.isOpen&&(D(l),t.isOpen=!1,t.st.removalDelay&&!t.isLowIE&&t.supportsTransition?(t._addClassToMFP(y),setTimeout(function(){t._close()},t.st.removalDelay)):t._close())},_close:function(){D(s);var n=y+" "+_+" ";if(t.bgOverlay.detach(),t.wrap.detach(),t.container.empty(),t.st.mainClass&&(n+=t.st.mainClass+" "),t._removeClassFromMFP(n),t.fixedContentPos){var r={marginRight:""};t.isIE7?e("body, html").css("overflow",""):r.overflow="",e("html").css(r)}i.off("keyup"+f+" focusin"+f),t.ev.off(f),t.wrap.attr("class","mfp-wrap").removeAttr("style"),t.bgOverlay.attr("class","mfp-bg"),t.container.attr("class","mfp-container"),t.st.showCloseBtn&&(!t.st.closeBtnInside||t.currTemplate[t.currItem.type]===!0)&&t.currTemplate.closeBtn&&t.currTemplate.closeBtn.detach(),t.st.autoFocusLast&&t._lastFocusedEl&&e(t._lastFocusedEl).focus(),t.currItem=null,t.content=null,t.currTemplate=null,t.prevHeight=0,D(d)},updateSize:function(e){if(t.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;t.wrap.css("height",i),t.wH=i}else t.wH=e||L.height();t.fixedContentPos||t.wrap.css("height",t.wH),D("Resize")},updateItemHTML:function(){var n=t.items[t.index];t.contentContainer.detach(),t.content&&t.content.detach(),n.parsed||(n=t.parseEl(t.index));var i=n.type;if(D("BeforeChange",[t.currItem?t.currItem.type:"",i]),t.currItem=n,!t.currTemplate[i]){var a=!!t.st[i]&&t.st[i].markup;D("FirstMarkupParse",a),a?t.currTemplate[i]=e(a):t.currTemplate[i]=!0}r&&r!==n.type&&t.container.removeClass("mfp-"+r+"-holder");var o=t["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,t.currTemplate[i]);t.appendContent(o,i),n.preloaded=!0,D(p,n),r=n.type,t.container.prepend(t.contentContainer),D("AfterChange")},appendContent:function(e,n){t.content=e,e?t.st.showCloseBtn&&t.st.closeBtnInside&&t.currTemplate[n]===!0?t.content.find(".mfp-close").length||t.content.append(k()):t.content=e:t.content="",D(u),t.container.addClass("mfp-"+n+"-holder"),t.contentContainer.append(t.content)},parseEl:function(n){var i,r=t.items[n];if(r.tagName?r={el:e(r)}:(i=r.type,r={data:r,src:r.src}),r.el){for(var a=t.types,o=0;o<a.length;o++)if(r.el.hasClass("mfp-"+a[o])){i=a[o];break}r.src=r.el.attr("data-mfp-src"),r.src||(r.src=r.el.attr("href"))}return r.type=i||t.st.type||"inline",r.index=n,r.parsed=!0,t.items[n]=r,D("ElementParse",r),t.items[n]},addGroup:function(e,n){var i=function(i){i.mfpEl=this,t._openClick(i,e,n)};n||(n={});var r="click.magnificPopup";n.mainEl=e,n.items?(n.isObj=!0,e.off(r).on(r,i)):(n.isObj=!1,n.delegate?e.off(r).on(r,n.delegate,i):(n.items=e,e.off(r).on(r,i)))},_openClick:function(n,i,r){var a=void 0!==r.midClick?r.midClick:e.magnificPopup.defaults.midClick;if(a||!(2===n.which||n.ctrlKey||n.metaKey||n.altKey||n.shiftKey)){var o=void 0!==r.disableOn?r.disableOn:e.magnificPopup.defaults.disableOn;
if(o)if(e.isFunction(o)){if(!o.call(t))return!0}else if(L.width()<o)return!0;n.type&&(n.preventDefault(),t.isOpen&&n.stopPropagation()),r.el=e(n.mfpEl),r.delegate&&(r.items=i.find(r.delegate)),t.open(r)}},updateStatus:function(e,i){if(t.preloader){n!==e&&t.container.removeClass("mfp-s-"+n),!i&&"loading"===e&&(i=t.st.tLoading);var r={status:e,text:i};D("UpdateStatus",r),e=r.status,i=r.text,t.preloader.html(i),t.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),t.container.addClass("mfp-s-"+e),n=e}},_checkIfClose:function(n){if(!e(n).hasClass(g)){var i=t.st.closeOnContentClick,r=t.st.closeOnBgClick;if(i&&r)return!0;if(!t.content||e(n).hasClass("mfp-close")||t.preloader&&n===t.preloader[0])return!0;if(n===t.content[0]||e.contains(t.content[0],n)){if(i)return!0}else if(r&&e.contains(document,n))return!0;return!1}},_addClassToMFP:function(e){t.bgOverlay.addClass(e),t.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),t.wrap.removeClass(e)},_hasScrollBar:function(e){return(t.isIE7?i.height():document.body.scrollHeight)>(e||L.height())},_setFocus:function(){(t.st.focus?t.content.find(t.st.focus).eq(0):t.wrap).focus()},_onFocusIn:function(n){if(n.target!==t.wrap[0]&&!e.contains(t.wrap[0],n.target))return t._setFocus(),!1},_parseMarkup:function(t,n,i){var r;i.data&&(n=e.extend(i.data,n)),D(c,[t,n,i]),e.each(n,function(n,i){if(void 0===i||i===!1)return!0;if(r=n.split("_"),r.length>1){var a=t.find(f+"-"+r[0]);if(a.length>0){var o=r[1];"replaceWith"===o?a[0]!==i[0]&&a.replaceWith(i):"img"===o?a.is("img")?a.attr("src",i):a.replaceWith(e("<img>").attr("src",i).attr("class",a.attr("class"))):a.attr(r[1],i)}}else t.find(f+"-"+n).html(i)})},_getScrollbarSize:function(){if(void 0===t.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),t.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return t.scrollbarSize}},e.magnificPopup={instance:null,proto:v.prototype,modules:[],open:function(t,n){return T(),t=t?e.extend(!0,{},t):{},t.isObj=!0,t.index=n||0,this.instance.open(t)},close:function(){return e.magnificPopup.instance&&e.magnificPopup.instance.close()},registerModule:function(t,n){n.options&&(e.magnificPopup.defaults[t]=n.options),e.extend(this.proto,n.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},e.fn.magnificPopup=function(n){T();var i=e(this);if("string"==typeof n)if("open"===n){var r,a=M?i.data("magnificPopup"):i[0].magnificPopup,o=parseInt(arguments[1],10)||0;a.items?r=a.items[o]:(r=i,a.delegate&&(r=r.find(a.delegate)),r=r.eq(o)),t._openClick({mfpEl:r},i,a)}else t.isOpen&&t[n].apply(t,Array.prototype.slice.call(arguments,1));else n=e.extend(!0,{},n),M?i.data("magnificPopup",n):i[0].magnificPopup=n,t.addGroup(i,n);return i};var S,x,C,E="inline",H=function(){C&&(x.after(C.addClass(S)).detach(),C=null)};e.magnificPopup.registerModule(E,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){t.types.push(E),b(s+"."+E,function(){H()})},getInline:function(n,i){if(H(),n.src){var r=t.st.inline,a=e(n.src);if(a.length){var o=a[0].parentNode;o&&o.tagName&&(x||(S=r.hiddenClass,x=w(S),S="mfp-"+S),C=a.after(x).detach().removeClass(S)),t.updateStatus("ready")}else t.updateStatus("error",r.tNotFound),a=e("<div>");return n.inlineElement=a,a}return t.updateStatus("ready"),t._parseMarkup(i,{},n),i}}});var A,j="ajax",P=function(){A&&e(document.body).removeClass(A)},I=function(){P(),t.req&&t.req.abort()};e.magnificPopup.registerModule(j,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){t.types.push(j),A=t.st.ajax.cursor,b(s+"."+j,I),b("BeforeChange."+j,I)},getAjax:function(n){A&&e(document.body).addClass(A),t.updateStatus("loading");var i=e.extend({url:n.src,success:function(i,r,a){var o={data:i,xhr:a};D("ParseAjax",o),t.appendContent(e(o.data),j),n.finished=!0,P(),t._setFocus(),setTimeout(function(){t.wrap.addClass(_)},16),t.updateStatus("ready"),D("AjaxContentAdded")},error:function(){P(),n.finished=n.loadError=!0,t.updateStatus("error",t.st.ajax.tError.replace("%url%",n.src))}},t.st.ajax.settings);return t.req=e.ajax(i),""}}});var O,z=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=t.st.image.titleSrc;if(i){if(e.isFunction(i))return i.call(t,n);if(n.el)return n.el.attr(i)||""}return""};e.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var n=t.st.image,i=".image";t.types.push("image"),b(h+i,function(){"image"===t.currItem.type&&n.cursor&&e(document.body).addClass(n.cursor)}),b(s+i,function(){n.cursor&&e(document.body).removeClass(n.cursor),L.off("resize"+f)}),b("Resize"+i,t.resizeImage),t.isLowIE&&b("AfterChange",t.resizeImage)},resizeImage:function(){var e=t.currItem;if(e&&e.img&&t.st.image.verticalFit){var n=0;t.isLowIE&&(n=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",t.wH-n)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,O&&clearInterval(O),e.isCheckingImgSize=!1,D("ImageHasSize",e),e.imgHidden&&(t.content&&t.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(e){var n=0,i=e.img[0],r=function(a){O&&clearInterval(O),O=setInterval(function(){return i.naturalWidth>0?void t._onImageHasSize(e):(n>200&&clearInterval(O),n++,3===n?r(10):40===n?r(50):100===n&&r(500),void 0)},a)};r(1)},getImage:function(n,i){var r=0,a=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,D("ImageLoadComplete")):(r++,r<200?setTimeout(a,100):o()))},o=function(){n&&(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("error",s.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},s=t.st.image,l=i.find(".mfp-img");if(l.length){var d=document.createElement("img");d.className="mfp-img",n.el&&n.el.find("img").length&&(d.alt=n.el.find("img").attr("alt")),n.img=e(d).on("load.mfploader",a).on("error.mfploader",o),d.src=n.src,l.is("img")&&(n.img=n.img.clone()),d=n.img[0],d.naturalWidth>0?n.hasSize=!0:d.width||(n.hasSize=!1)}return t._parseMarkup(i,{title:z(n),img_replaceWith:n.img},n),t.resizeImage(),n.hasSize?(O&&clearInterval(O),n.loadError?(i.addClass("mfp-loading"),t.updateStatus("error",s.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),t.updateStatus("ready")),i):(t.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),t.findImageSize(n)),i)}}});var F,W=function(){return void 0===F&&(F=void 0!==document.createElement("p").style.MozTransform),F};e.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,n=t.st.zoom,i=".zoom";if(n.enabled&&t.supportsTransition){var r,a,o=n.duration,d=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,r={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},a="transition";return r["-webkit-"+a]=r["-moz-"+a]=r["-o-"+a]=r[a]=i,t.css(r),t},u=function(){t.content.css("visibility","visible")};b("BuildControls"+i,function(){if(t._allowZoom()){if(clearTimeout(r),t.content.css("visibility","hidden"),e=t._getItemToZoom(),!e)return void u();a=d(e),a.css(t._getOffset()),t.wrap.append(a),r=setTimeout(function(){a.css(t._getOffset(!0)),r=setTimeout(function(){u(),setTimeout(function(){a.remove(),e=a=null,D("ZoomAnimationEnded")},16)},o)},16)}}),b(l+i,function(){if(t._allowZoom()){if(clearTimeout(r),t.st.removalDelay=o,!e){if(e=t._getItemToZoom(),!e)return;a=d(e)}a.css(t._getOffset(!0)),t.wrap.append(a),t.content.css("visibility","hidden"),setTimeout(function(){a.css(t._getOffset())},16)}}),b(s+i,function(){t._allowZoom()&&(u(),a&&a.remove(),e=null)})}},_allowZoom:function(){return"image"===t.currItem.type},_getItemToZoom:function(){return!!t.currItem.hasSize&&t.currItem.img},_getOffset:function(n){var i;i=n?t.currItem.img:t.st.zoom.opener(t.currItem.el||t.currItem);var r=i.offset(),a=parseInt(i.css("padding-top"),10),o=parseInt(i.css("padding-bottom"),10);r.top-=e(window).scrollTop()-a;var s={width:i.width(),height:(M?i.innerHeight():i[0].offsetHeight)-o-a};return W()?s["-moz-transform"]=s.transform="translate("+r.left+"px,"+r.top+"px)":(s.left=r.left,s.top=r.top),s}}});var R="iframe",$="//about:blank",N=function(e){if(t.currTemplate[R]){var n=t.currTemplate[R].find("iframe");n.length&&(e||(n[0].src=$),t.isIE8&&n.css("display",e?"block":"none"))}};e.magnificPopup.registerModule(R,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){t.types.push(R),b("BeforeChange",function(e,t,n){t!==n&&(t===R?N():n===R&&N(!0))}),b(s+"."+R,function(){N()})},getIframe:function(n,i){var r=n.src,a=t.st.iframe;e.each(a.patterns,function(){if(r.indexOf(this.index)>-1)return this.id&&(r="string"==typeof this.id?r.substr(r.lastIndexOf(this.id)+this.id.length,r.length):this.id.call(this,r)),r=this.src.replace("%id%",r),!1});var o={};return a.srcAction&&(o[a.srcAction]=r),t._parseMarkup(i,o,n),t.updateStatus("ready"),i}}});var q=function(e){var n=t.items.length;return e>n-1?e-n:e<0?n+e:e},B=function(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)};e.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=t.st.gallery,r=".mfp-gallery";return t.direction=!0,!(!n||!n.enabled)&&(a+=" mfp-gallery",b(h+r,function(){n.navigateByImgClick&&t.wrap.on("click"+r,".mfp-img",function(){if(t.items.length>1)return t.next(),!1}),i.on("keydown"+r,function(e){37===e.keyCode?t.prev():39===e.keyCode&&t.next()})}),b("UpdateStatus"+r,function(e,n){n.text&&(n.text=B(n.text,t.currItem.index,t.items.length))}),b(c+r,function(e,i,r,a){var o=t.items.length;r.counter=o>1?B(n.tCounter,a.index,o):""}),b("BuildControls"+r,function(){if(t.items.length>1&&n.arrows&&!t.arrowLeft){var i=n.arrowMarkup,r=t.arrowLeft=e(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(g),a=t.arrowRight=e(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(g);r.click(function(){t.prev()}),a.click(function(){t.next()}),t.container.append(r.add(a))}}),b(p+r,function(){t._preloadTimeout&&clearTimeout(t._preloadTimeout),t._preloadTimeout=setTimeout(function(){t.preloadNearbyImages(),t._preloadTimeout=null},16)}),b(s+r,function(){i.off(r),t.wrap.off("click"+r),t.arrowRight=t.arrowLeft=null}),void 0)},next:function(){t.direction=!0,t.index=q(t.index+1),t.updateItemHTML()},prev:function(){t.direction=!1,t.index=q(t.index-1),t.updateItemHTML()},goTo:function(e){t.direction=e>=t.index,t.index=e,t.updateItemHTML()},preloadNearbyImages:function(){var e,n=t.st.gallery.preload,i=Math.min(n[0],t.items.length),r=Math.min(n[1],t.items.length);for(e=1;e<=(t.direction?r:i);e++)t._preloadItem(t.index+e);for(e=1;e<=(t.direction?i:r);e++)t._preloadItem(t.index-e)},_preloadItem:function(n){if(n=q(n),!t.items[n].preloaded){var i=t.items[n];i.parsed||(i=t.parseEl(n)),D("LazyLoad",i),"image"===i.type&&(i.img=e('<img class="mfp-img" />').on("load.mfploader",function(){i.hasSize=!0}).on("error.mfploader",function(){i.hasSize=!0,i.loadError=!0,D("LazyLoadError",i)}).attr("src",i.src)),i.preloaded=!0}}}});var U="retina";e.magnificPopup.registerModule(U,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var e=t.st.retina,n=e.ratio;n=isNaN(n)?n():n,n>1&&(b("ImageHasSize."+U,function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/n,width:"100%"})}),b("ElementParse."+U,function(t,i){i.src=e.replaceSrc(i,n)}))}}}}),T()}),function(e){e.fn.instagramLite=function(t){if(!this.length)return this;plugin=this,plugin.defaults={accessToken:null,limit:null,list:!0,videos:!1,urls:!1,captions:!1,date:!1,likes:!1,comments_count:!1,error:function(){},success:function(){}};var n=e.extend({},plugin.defaults,t),i=e(this),r=function(e){for(var t=e.split(" "),n="",i=0;i<t.length;i++){var r;if("@"==t[i][0]){var a='<a href="http://twitter.com/'+t[i].replace("@","").toLowerCase()+'" target="_blank">'+t[i]+"</a>";r=a}else if("#"==t[i][0]){var a='<a href="http://twitter.com/hashtag/'+t[i].replace("#","").toLowerCase()+'" target="_blank">'+t[i]+"</a>";r=a}else r=t[i];n+=r+" "}return n},a=function(e){for(var t=0;t<e.length;t++){var a,o=e[t];if("image"===o.type||!n.videos){if(a='<img class="il-photo__img" src="'+o.images.standard_resolution.url+'" alt="Instagram Image" data-filter="'+o.filter+'" />',n.urls&&(a='<a href="'+o.link+'" target="_blank">'+a+"</a>"),(n.captions||n.date||n.likes||n.comments_count)&&(a+='<div class="il-photo__meta">'),n.captions&&o.caption&&(a+='<div class="il-photo__caption" data-caption-id="'+o.caption.id+'">'+r(o.caption.text)+"</div>"),n.date){var s=new Date(1e3*o.created_time),l=s.getDate(),d=s.getMonth()+1,u=s.getFullYear();s.getHours(),s.getMinutes(),s.getSeconds();s=d+"/"+l+"/"+u,a+='<div class="il-photo__date">'+s+"</div>"}n.likes&&(a+='<div class="il-photo__likes">'+o.likes.count+"</div>"),n.comments_count&&o.comments&&(a+='<div class="il-photo__comments">'+o.comments.count+"</div>"),(n.captions||n.date||n.likes||n.comments_count)&&(a+="</div>")}if("video"===o.type&&n.videos&&o.videos){var c;o.videos.standard_resolution?c=o.videos.standard_resolution.url:o.videos.low_resolution?c=o.videos.low_resolution.url:o.videos.low_bandwidth&&(c=o.videos.low_bandwidth.url),a='<video poster="'+o.images.standard_resolution.url+'" controls>',a+='<source src="'+c+'" type="video/mp4;"></source>',a+="</video>"}n.list&&a&&(a='<li class="il-item" data-instagram-id="'+o.id+'">'+a+"</li>"),""!==a&&i.append(a)}},o=function(){if(n.accessToken){var t="https://api.instagram.com/v1/users/self/media/recent/?access_token="+n.accessToken+"&count="+n.limit;e.ajax({type:"GET",url:t,dataType:"jsonp",success:function(e){200===e.meta.code&&e.data.length?(a(e.data),n.success.call(this)):n.error.call(this)},error:function(){n.error.call(this)}})}};o()}}(jQuery),function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.Blazy=t()}(this,function(){"use strict";function e(e){var n=e._util;n.elements=o(e.options.selector),n.count=n.elements.length,n.destroyed&&(n.destroyed=!1,e.options.container&&u(e.options.container,function(e){l(e,"scroll",n.validateT)}),l(window,"resize",n.saveViewportOffsetT),l(window,"resize",n.validateT),l(window,"scroll",n.validateT)),t(e)}function t(e){for(var t=e._util,i=0;i<t.count;i++){var a=t.elements[i];(n(a)||r(a,e.options.successClass))&&(e.load(a),t.elements.splice(i,1),t.count--,i--)}0===t.count&&e.destroy()}function n(e){var t=e.getBoundingClientRect();return t.right>=p.left&&t.bottom>=p.top&&t.left<=p.right&&t.top<=p.bottom}function i(e,t,n){if(!r(e,n.successClass)&&(t||n.loadInvisible||e.offsetWidth>0&&e.offsetHeight>0)){var i=e.getAttribute(h)||e.getAttribute(n.src);if(i){var o=i.split(n.separator),s=o[m&&o.length>1?1:0],l="img"===e.nodeName.toLowerCase();if(u(n.breakpoints,function(t){e.removeAttribute(t.src)}),e.removeAttribute(n.src),l||void 0===e.src){var d=new Image;d.onerror=function(){n.error&&n.error(e,"invalid"),a(e,n.errorClass)},d.onload=function(){l?e.src=s:e.style.backgroundImage='url("'+s+'")',a(e,n.successClass),n.success&&n.success(e)},d.src=s}else e.src=s,a(e,n.successClass)}else n.error&&n.error(e,"missing"),r(e,n.errorClass)||a(e,n.errorClass)}}function r(e,t){return(" "+e.className+" ").indexOf(" "+t+" ")!==-1}function a(e,t){e.className=e.className+" "+t}function o(e){for(var t=[],n=document.querySelectorAll(e),i=n.length;i--;t.unshift(n[i]));return t}function s(e){p.bottom=(window.innerHeight||document.documentElement.clientHeight)+e,p.right=(window.innerWidth||document.documentElement.clientWidth)+e}function l(e,t,n){e.attachEvent?e.attachEvent&&e.attachEvent("on"+t,n):e.addEventListener(t,n,!1)}function d(e,t,n){e.detachEvent?e.detachEvent&&e.detachEvent("on"+t,n):e.removeEventListener(t,n,!1)}function u(e,t){if(e&&t)for(var n=e.length,i=0;i<n&&t(e[i],i)!==!1;i++);}function c(e,t,n){var i=0;return function(){var r=+new Date;r-i<t||(i=r,e.apply(n,arguments))}}var h,p,m;return function(n){if(!document.querySelectorAll){var r=document.createStyleSheet();document.querySelectorAll=function(e,t,n,i,a){for(a=document.all,t=[],e=e.replace(/\[for\b/gi,"[htmlFor").split(","),n=e.length;n--;){for(r.addRule(e[n],"k:v"),i=a.length;i--;)a[i].currentStyle.k&&t.push(a[i]);r.removeRule(0)}return t}}var a=this,o=a._util={};o.elements=[],o.destroyed=!0,a.options=n||{},a.options.error=a.options.error||!1,a.options.offset=a.options.offset||100,a.options.success=a.options.success||!1,a.options.selector=a.options.selector||".b-lazy",a.options.separator=a.options.separator||"|",a.options.container=!!a.options.container&&document.querySelectorAll(a.options.container),a.options.errorClass=a.options.errorClass||"b-error",a.options.breakpoints=a.options.breakpoints||!1,a.options.loadInvisible=a.options.loadInvisible||!1,a.options.successClass=a.options.successClass||"b-loaded",a.options.validateDelay=a.options.validateDelay||25,a.options.saveViewportOffsetDelay=a.options.saveViewportOffsetDelay||50,a.options.src=h=a.options.src||"data-src",m=window.devicePixelRatio>1,p={},p.top=0-a.options.offset,p.left=0-a.options.offset,a.revalidate=function(){e(this)},a.load=function(e,t){var n=this.options;void 0===e.length?i(e,t,n):u(e,function(e){i(e,t,n)})},a.destroy=function(){var e=this,t=e._util;e.options.container&&u(e.options.container,function(e){d(e,"scroll",t.validateT)}),d(window,"scroll",t.validateT),d(window,"resize",t.validateT),d(window,"resize",t.saveViewportOffsetT),t.count=0,t.elements.length=0,t.destroyed=!0},o.validateT=c(function(){t(a)},a.options.validateDelay,a),o.saveViewportOffsetT=c(function(){s(a.options.offset)},a.options.saveViewportOffsetDelay,a),s(a.options.offset),u(a.options.breakpoints,function(e){if(e.width>=window.screen.width)return h=e.src,!1}),e(a)}});var global_inTime=0;if($(".index_page").length)var cart=window.document.querySelector(".cart"),cartItems=cart.querySelector(".cart__count");settingsr&&$.inArray("delete_buy_button",settingsr)>-1&&$("#orderNow").hide(),$("#instafeed").length&&$("#instafeed").instagramLite({accessToken:"563190999.5f16351.e17d86039fc14275bc2fa72f448a7ce6",urls:!0,success:function(){console.log("The request was successful!")},error:function(e,t){console.log("There was an error with the request")}});var delivery=sessionStorage.getItem("delivery");$("#inputPhone").length&&$("#inputPhone").mask("+79999999999",{autoclear:!1}),$("#form_auch-login").length&&$("#form_auch-login").mask("+79999999999",{autoclear:!1}),$("#form-phone").length&&$("#form-phone").mask("+79999999999",{autoclear:!1}),$("#phone").length&&$("#phone").mask("+79999999999",{autoclear:!1});var summ,dataTable=$("#tableOrder").DataTable({language:{emptyTable:"Корзина пуста"}}),cache_for_datatable,thiss;if($(".sous_select_box a").click(function(e){var t=$(this).data("text");sous_select(t),$("#select_sous").nifty("hide")}),$(".settings, .sale, .aboutus").length&&delivery_func(),$(".settings").length){var items=getFromLocal("memos"),index;loadList(items),$("#main-button").prop("disabled",!0),$("#main-input").keyup(function(){0!==$(this).val().length?$("#main-button").prop("disabled",!1):$("#main-button").prop("disabled",!0)}),$("#main-input").keypress(function(e){13===e.which&&0!==$("#main-input").val().length&&$("#main-button").click()}),$("#main-button").click(function(){var e=$("#main-input").val();items.push(e),$("#main-input").val(""),loadList(items),storeToLocal("memos",items),$("button").prop("disabled",!0)}),$("ul.addrList").delegate("span","click",function(e){e.stopPropagation(),index=$("span").index(this),$(".addrList li").eq(index).remove(),items.splice(index,1),storeToLocal("memos",items)}),$("ul.addrList").delegate("li","click",function(){index=$(".addrList li").index(this);var e=items[index];$("#edit-input").val(e)}),$("#edit-button").click(function(){items[index]=$("#edit-input").val(),loadList(items),storeToLocal("memos",items)})}$(".userIsAuch .full_price, .borderLeft .full_price").length&&$("#delivery_time").datetimepicker({sideBySide:!0,locale:"ru",useCurrent:!1,widgetPositioning:{vertical:"bottom"}}),$(".userIsAuch h2, .borderLeft  h2 ").click(function(){$(".checkOut").addClass("isUp")});var tableOrder=$("#tableOrder tbody");tableOrder.on("mouseenter","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".action--like.haslogin").click(function(e){var t=$(this);console.log(t),$.getJSON("/like_add",{like:$(this).val()},function(e){"adfavorited"==e.result?(t.find("i").addClass("fa-heart"),t.find("i").removeClass("fa-heart-o"),swal({title:"Ура!",text:"Добавлено в избранное!",timer:1500,type:"success",showConfirmButton:!1})):"delete"==e.result?(t.find("i").addClass("fa-heart-o"),t.find("i").removeClass("fa-heart"),swal({title:"Упс!",text:"Удалено из избранного!",timer:1500,type:"error",showConfirmButton:!1})):0==e.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:1500,type:"error",showConfirmButton:!1})})}),$("#auch-menu-btn").click(function(e){$.getJSON("/auch",{login:$("#inputPhone").val(),password:$("#inputPassword").val()},function(e){1==e.result?swal({title:"Ура!",text:"Вход выполнен успешно!",timer:2e3,type:"success",showConfirmButton:!1},function(){location.reload()}):swal({title:"Упс!",text:"Такого пользоваеля не существует, либо пароль введен неправильно",type:"error",showConfirmButton:!0})})}),$(".select_it").click(function(){$.cookie("delivery",$("input:radio[name=delivery]:checked").val()),sessionStorage.setItem("delivery",$("input:radio[name=delivery]:checked").val()),$.cookie("localLinkClicked",!0),window.location.reload()}),tableOrder.on("mouseleave","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".like_no_admin").click(function(){swal({title:"Эта функция доступна только для зарегистрированых пользователей<br> <h3 class='swal'>Зарегистрируйся и получи скидку 10%</h3>",confirmButtonColor:"#4CAF50",text:"",type:"info",html:!0,showConfirmButton:!0,showCancelButton:!0,confirmButtonText:"Регистрация/Авторизация",cancelButtonText:"Позже",closeOnConfirm:!1},function(){$.cookie("localLinkClicked",!0),document.location="/site_auch"})}),$(".backbtn").click(function(){$.cookie("localLinkClicked",!0),window.history.back()}),$(".pw-reset a, #restorePass").click(function(){var e=$("#inputPhone");""!=e.val()?$.getJSON("/pwreset",{login:e.val()},function(e){console.log(e),"sent"==e.result?swal("Пароль востановлен!","Новый пароль отправлен на вашу почту!","success"):0==e.result?swal("Упс!","Такого пользователя нет!","error"):2==e.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:2e3,showConfirmButton:!0})}):swal("Упс!","Необходимо ввести телефон!","warning")}),$(".checkOut input[type=number]").keypress(function(e){return e=e||window.event,(!e.charCode||!(e.charCode<48||e.charCode>57))&&void $(".full span").text(calculateSumm())}),$(document).keyup(function(e){27==e.keyCode&&closePopup()}),$(".cantbuy").click(function(){swal({title:"Ой!",text:"Данный товар доступн только в кафе",type:"error",html:!0,showConfirmButton:!0,confirmButtonText:"Я понял"})}),$(".one--buy").click(function(){var e=jQuery.parseJSON($(this).attr("data-items"));console.log(e),1==e.sous?(cache_for_datatable=e,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+e.item_name+"</h3><small>"+e.item_component+"</small>"," ","<input data-category='"+e.item_category+"' type='number' value='1' data-price='"+e.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"})),cartItems.innerHTML=Number(cartItems.innerHTML)+1}),jQuery(document).ready(function(){var e=$("#tableOrder");e.on("click",".delete",function(e){dataTable.row(".selected").remove().draw(!1),$(".index_page").length&&(cartItems.innerHTML=Number(cartItems.innerHTML)-1),$(".full span").text(calculateSumm())})}),$("#orderNow").on("click touchstart",function(e){calculateSumm()<500&&"deliveryincafe"!=$.cookie("delivery")?swal({title:"Ой!",text:"Для доставки минимальная сумма заказа составляет 500 рублей",type:"error",html:!0,showConfirmButton:!0,confirmButtonText:"Я понял"}):($.cookie("localLinkClicked",!0),window.location.href="/order")});var magnificPopup=null;$(".simple-ajax-popup").magnificPopup({type:"ajax",preloader:!0,enableEscapeKey:!0,showCloseBtn:!0,closeBtnInside:!1,midClick:!0,callbacks:{open:function(){History.Adapter.bind(window,"statechange",closePopup),History.pushState({url:document.location.href},document.title,"?large"),$(window).on("resize",closePopup),magnificPopup=this},close:function(){$(window).unbind("statechange",closePopup).off("resize",closePopup);var e=History.getState();History.replaceState(null,document.title,e.data.url),magnificPopup=null}}}),$(".cart, .showCart, .userIsAuch h2,.borderLeft h2").click(function(e){var t,n=new Date;switch(n.getDay()){case 0:t=get_act(11,1);break;case 1:t=get_act(10,1);break;case 2:t=get_act(10,1);break;case 3:t=get_act(10,1);break;case 4:t=get_act(10,1);break;case 5:t=get_act(10,2);break;case 6:t=get_act(11,2);break;default:t=0}0==t?activeCart(t):0==calculateSumm()?iosOverlay({text:"Корзина пуста",duration:2e3,icon:"/static/img/cross.png"}):($(".full span").text(calculateSumm()),$("html").toggleClass("overflowbody"),$(".checkOut").addClass("isUp"))}),$(".closezakazbtn").click(function(e){$(".checkOut").removeClass("isUp"),$("html").toggleClass("overflowbody")}),$(function(){if($(".index_page").length){var e=$("#bar"),t=$(".view"),n=$(".cart"),i=e.offset().top-parseFloat(e.css("margin-top"));$(window).scroll(function(r){var a=$(this).scrollTop();a>=i?(e.addClass("fixed"),t.addClass("col-md-offset-2"),t.addClass("col-sm-offset-2"),n.addClass("cartAbsolute cartPerc")):(e.removeClass("fixed"),t.removeClass("col-md-offset-2"),t.removeClass("col-sm-offset-2"),n.removeClass("cartAbsolute cartPerc"))})}}),window.localLinkClicked=!1,window.onload=warning,$("a").on("click",function(){var e=$(this).attr("href");/^http?:\/\/./.test(e)&&!/http?:\/\/127.0.0.1\:5000/.test(e)||$.cookie("localLinkClicked",!0)}),$(".logoa").click(function(e){window.location.reload(),$.removeCookie("localLinkClicked")}),function(e){"use strict";function t(e,t){var n=!0;return function(i){n&&(n=!1,setTimeout(function(){n=!0},t),e(i))}}function n(){p.revalidate()}function i(){if("deliveryincafe"==$.cookie("delivery")&&in_date(),jQuery("#scrollup img").mouseover(function(){jQuery(this).animate({opacity:.65},100)}).mouseout(function(){jQuery(this).animate({opacity:1},100)}).click(function(){return $("html,body").animate({scrollTop:0},"slow"),!1}),jQuery(e).scroll(function(){jQuery(document).scrollTop()>0?jQuery("#scrollup").fadeIn("fast"):jQuery("#scrollup").fadeOut("fast")}),$(".index_page").length){r(),a();$(e);p=new Blazy({offset:200,success:function(){h.layout()}}),h.on("arrangeComplete",n),delivery_func(),classie.remove(f,"grid--loading"),$("#owl-demo").owlCarousel({autoPlay:7300,stopOnHover:!1,navigation:!1,paginationSpeed:1e3,goToFirstSpeed:2e3,singleItem:!0,autoHeight:!0,transitionStyle:"fade",navigationText:["Предыдущая","Следующая"]});var t=$("#owl-demo").data("owlCarousel");$(".owl-pagination").prepend("<div class='prev-slide fa fa-arrow-left'><span></span></div>"),$(".owl-pagination").append("<div class='next-slide fa fa-arrow-right'><span></span></div>"),$(".prev-slide").click(function(){t.prev()}),$(".next-slide").click(function(){t.next()}),$(".preloader").hide()}initIfhaveSession()}function r(){h=new Isotope(f,{isResizeBound:!1,itemSelector:".grid__item",percentPosition:!0,masonry:{columnWidth:".grid__sizer"},transitionDuration:"0.5s"})}function a(){_.forEach(function(e){e.addEventListener("click",function(){classie.remove(e.parentNode.querySelector(".filter__item--selected"),"filter__item--selected"),classie.add(e,"filter__item--selected"),h.arrange({filter:e.getAttribute("data-filter")}),s(),h.layout(),$("html, body").animate({scrollTop:$("#allCatalog").offset().top},1e3),p.revalidate()})}),e.addEventListener("resize",t(function(e){s(),h.layout()},50)),[].slice.call(f.querySelectorAll(".grid__item")).forEach(function(e){e.querySelector(".items-buy").addEventListener("click",o)})}function o(){var e,t=new Date;switch(t.getDay()){case 0:e=get_act(11,1);break;case 1:e=get_act(10,1);break;case 2:e=get_act(10,1);break;case 3:e=get_act(10,1);break;case 4:e=get_act(10,1);break;case 5:e=get_act(10,2);break;case 6:e=get_act(11,2);break;default:e=0}if(0==e)activeBuy(e);else{var n=jQuery.parseJSON($(this).attr("data-items"));"True"==n.sous?(cache_for_datatable=n,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+n.item_name+"</h3><small>"+n.item_component+"</small>"," ","<input type='number' data-category='"+n.item_category+"' value='1' data-price='"+n.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+n.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+n.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"}),classie.add(y,"cart--animate"),setTimeout(function(){g.innerHTML=Number(g.innerHTML)+1},200),c(g,function(){classie.remove(y,"cart--animate")}))}}function s(){for(var e=0,t=m.length;e<t;++e)m[e].resize()}var l={animations:Modernizr.cssanimations},d={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd",animation:"animationend"},u=d[Modernizr.prefixed("animation")],c=function(e,t){var n=function(e){if(l.animations){if(e.target!=this)return;this.removeEventListener(u,n);
}t&&"function"==typeof t&&t.call()};l.animations?e.addEventListener(u,n):n()};if($(".index_page").length)var h,p,m=([].slice.call(document.querySelectorAll(".slider")),[]),f=document.querySelector(".grid"),_=[].slice.call(document.querySelectorAll(".filter > button")),y=document.querySelector(".cart"),g=y.querySelector(".cart__count");i()}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
