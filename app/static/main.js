function uniqId(){return"uniqId"+Math.round((new Date).getTime()+1e3*Math.random())}function sous_select(e){var t=cache_for_datatable,n=uniqId();dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select id='"+n+"' class='basic' ><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect().on("change.fs",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable()))}),thiss=$(this),$("#"+n+" :contains("+e+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"/static/img/check.png"}),$(".basic").trigger("update.fs")}function delivery_func(){"undefined"===delivery||null==delivery?$("#select_delivery").nifty("show"):$("input:radio[name=group2][value='"+sessionStorage.getItem("delivery")+"']").prop({checked:!0})}function loadList(e){if($(".addrList li").remove(),e.length>0)for(var t=0;t<e.length;t++)$("ul.addrList").append('<li class= "list-group-item" data-toggle="modal" data-target="#editModal">'+e[t]+'<span class="fa fa-close"></span</li>')}function storeToLocal(e,t){var n=JSON.stringify(t);localStorage[e]=n,$.post("/address",{addresses:n})}function getFromLocal(e){return localStorage[e]?JSON.parse(localStorage[e]):[]}function initIfhaveSession(){var e=localStorage.getItem("cart");if(null!=e){var t=JSON.parse(e);"Корзина пуста"!=t[0].row[0]&&(t.forEach(function(e){if(null==e.row[1])dataTable.row.add([e.row[0],"","<input type='number' value='"+e.row[2]+"' data-price='"+e.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm());else{var t=uniqId();dataTable.row.add([e.row[0],"<select id='"+t+"' class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input  type='number' value='"+e.row[2]+"' data-price='"+e.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect().on("change.fs",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable()))}),$(".fancified").on("change",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable())),console.log("basic change ")}),$("#"+t+" :contains("+e.row[1]+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())}}),$(".basic").trigger("update.fs"))}}function dataFromTable(){var e=new Array;return $("#tableOrder tr").each(function(t,n){e[t]={row:[$(n).find("td:eq(0)").html(),$(n).find("td:eq(1)").find(".fancified option:selected").val(),$(n).find("td:eq(2)").find("input").val(),$(n).find("td:eq(3)").text(),$(n).find("td:eq(4)").find("a").attr("id")]}}),e.shift(),e}function fnGetSelected(e){return e.$("tr.selected")}function calculateSumm(){return summ=0,$(".checkOut input[type=number]").each(function(){summ+=parseInt($(this).val()*$(this).attr("data-price"))}),summ-=summ*global_sale/100,$(".userIsAuch .full_price").length&&$(".full_price").text(summ),$(".borderLeft .full_price").length&&$(".full_price").text(summ),$.cookie("cart",JSON.stringify(dataFromTable())),$.cookie("cart_price",summ),$("#hidden_table").val(JSON.stringify(dataFromTable())),localStorage.setItem("cart",JSON.stringify(dataFromTable())),localStorage.setItem("cart_price",summ),summ}function unique(e){for(var t={},n=0;n<e.length;n++){var i=e[n];t[i]=!0}return Object.keys(t)}function removeA(e){for(var t,n,i=arguments,r=i.length;r>1&&e.length;)for(t=i[--r],$(".slider").anyslider();-1!==(n=e.indexOf(t));)e.splice(n,1);return e}function warning(){$.cookie("localLinkClicked")?(console.log("window page"),$.removeCookie("localLinkClicked")):(console.log("window reload"),$.removeCookie("localLinkClicked"),$("#select_delivery").nifty("show"))}(function(){function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if("object"==typeof e){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;e.length>t;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;e.length>t;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),-1!==i&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if("object"===n)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:this.EventEmitter=e}).call(this),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):e.eventie=a}(this),function(e,t){"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("eventEmitter"),require("eventie")):e.imagesLoaded=t(e,e.EventEmitter,e.eventie)}(this,function(e,t,n){function i(e,t){for(var n in t)e[n]=t[n];return e}function r(e){return"[object Array]"===h.call(e)}function a(e){var t=[];if(r(e))t=e;else if("number"==typeof e.length)for(var n=0,i=e.length;i>n;n++)t.push(e[n]);else t.push(e);return t}function o(e,t,n){if(!(this instanceof o))return new o(e,t);"string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=a(e),this.options=i({},this.options),"function"==typeof t?n=t:i(this.options,t),n&&this.on("always",n),this.getImages(),d&&(this.jqDeferred=new d.Deferred);var r=this;setTimeout(function(){r.check()})}function s(e){this.img=e}function l(e){this.src=e,p[e]=this}var d=e.jQuery,u=e.console,c=void 0!==u,h=Object.prototype.toString;o.prototype=new t,o.prototype.options={},o.prototype.getImages=function(){this.images=[];for(var e=0,t=this.elements.length;t>e;e++){var n=this.elements[e];if("IMG"===n.nodeName&&this.addImage(n),n.nodeType&&(1===n.nodeType||9===n.nodeType))for(var i=n.querySelectorAll("img"),r=0,a=i.length;a>r;r++){var o=i[r];this.addImage(o)}}},o.prototype.addImage=function(e){var t=new s(e);this.images.push(t)},o.prototype.check=function(){function e(e,r){return t.options.debug&&c&&u.log("confirm",e,r),t.progress(e),n++,n===i&&t.complete(),!0}var t=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return void this.complete();for(var r=0;i>r;r++){var a=this.images[r];a.on("confirm",e),a.check()}},o.prototype.progress=function(e){this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded;var t=this;setTimeout(function(){t.emit("progress",t,e),t.jqDeferred&&t.jqDeferred.notify&&t.jqDeferred.notify(t,e)})},o.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var t=this;setTimeout(function(){if(t.emit(e,t),t.emit("always",t),t.jqDeferred){var n=t.hasAnyBroken?"reject":"resolve";t.jqDeferred[n](t)}})},d&&(d.fn.imagesLoaded=function(e,t){var n=new o(this,e,t);return n.jqDeferred.promise(d(this))}),s.prototype=new t,s.prototype.check=function(){var e=p[this.img.src]||new l(this.img.src);if(e.isConfirmed)return void this.confirm(e.isLoaded,"cached was confirmed");if(this.img.complete&&void 0!==this.img.naturalWidth)return void this.confirm(0!==this.img.naturalWidth,"naturalWidth");var t=this;e.on("confirm",function(e,n){return t.confirm(e.isLoaded,n),!0}),e.check()},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("confirm",this,t)};var p={};return l.prototype=new t,l.prototype.check=function(){if(!this.isChecked){var e=new Image;n.bind(e,"load",this),n.bind(e,"error",this),e.src=this.src,this.isChecked=!0}},l.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},l.prototype.onload=function(e){this.confirm(!0,"onload"),this.unbindProxyEvents(e)},l.prototype.onerror=function(e){this.confirm(!1,"onerror"),this.unbindProxyEvents(e)},l.prototype.confirm=function(e,t){this.isConfirmed=!0,this.isLoaded=e,this.emit("confirm",this,t)},l.prototype.unbindProxyEvents=function(e){n.unbind(e.target,"load",this),n.unbind(e.target,"error",this)},o}),function(){"use strict";function e(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,i),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,t+=1}var t=0,n={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var i in n)t.push(n[i]);for(var r=0,a=t.length;a>r;r++)t[r][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.invokeAll("enable")},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){"use strict";function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=r.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,i[e.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,i={},r=window.Waypoint,a=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical);e&&t&&(this.adapter.off(".waypoints"),delete i[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,r.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){(!t.didScroll||r.isTouch)&&(t.didScroll=!0,r.requestAnimationFrame(e))})},t.prototype.handleResize=function(){r.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in t){var i=t[n],r=i.newScroll>i.oldScroll,a=r?i.forward:i.backward;for(var o in this.waypoints[n]){var s=this.waypoints[n][o],l=i.oldScroll<s.triggerPoint,d=i.newScroll>=s.triggerPoint,u=l&&d,c=!l&&!d;(u||c)&&(s.queueTrigger(a),e[s.group.id]=s.group)}}for(var h in e)e[h].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?r.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?r.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var n in this.waypoints[t])e.push(this.waypoints[t][n]);for(var i=0,r=e.length;r>i;i++)e[i].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,n=t?void 0:this.adapter.offset(),i={};this.handleScroll(),e={horizontal:{contextOffset:t?0:n.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:n.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var a in e){var o=e[a];for(var s in this.waypoints[a]){var l,d,u,c,h,p=this.waypoints[a][s],m=p.options.offset,f=p.triggerPoint,_=0,y=null==f;p.element!==p.element.window&&(_=p.adapter.offset()[o.offsetProp]),"function"==typeof m?m=m.apply(p):"string"==typeof m&&(m=parseFloat(m),p.options.offset.indexOf("%")>-1&&(m=Math.ceil(o.contextDimension*m/100))),l=o.contextScroll-o.contextOffset,p.triggerPoint=_+l-m,d=f<o.oldScroll,u=p.triggerPoint>=o.oldScroll,c=d&&u,h=!d&&!u,!y&&c?(p.queueTrigger(o.backward),i[p.group.id]=p.group):!y&&h?(p.queueTrigger(o.forward),i[p.group.id]=p.group):y&&o.oldScroll>=p.triggerPoint&&(p.queueTrigger(o.forward),i[p.group.id]=p.group)}}return r.requestAnimationFrame(function(){for(var e in i)i[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in i)i[e].refresh()},t.findByElement=function(e){return i[e.waypointContextKey]},window.onload=function(){a&&a(),t.refreshAll()},r.requestAnimationFrame=function(t){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e;n.call(window,t)},r.Context=t}(),function(){"use strict";function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function n(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}var i={vertical:{},horizontal:{}},r=window.Waypoint;n.prototype.add=function(e){this.waypoints.push(e)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],r="up"===n||"left"===n;i.sort(r?t:e);for(var a=0,o=i.length;o>a;a+=1){var s=i[a];(s.options.continuous||a===i.length-1)&&s.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints),i=n===this.waypoints.length-1;return i?null:this.waypoints[n+1]},n.prototype.previous=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},n.prototype.remove=function(e){var t=r.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(e){return i[e.axis][e.name]||new n(e)},r.Group=n}(),function(){"use strict";function e(e){return e===e.window}function t(t){return e(t)?t:t.defaultView}function n(e){this.element=e,this.handlers={}}var i=window.Waypoint;n.prototype.innerHeight=function(){var t=e(this.element);return t?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var t=e(this.element);return t?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(e,t){function n(e,t,n){for(var i=0,r=t.length-1;r>i;i++){var a=t[i];n&&n!==a||e.removeEventListener(a)}}var i=e.split("."),r=i[0],a=i[1],o=this.element;if(a&&this.handlers[a]&&r)n(o,this.handlers[a][r],t),this.handlers[a][r]=[];else if(r)for(var s in this.handlers)n(o,this.handlers[s][r]||[],t),this.handlers[s][r]=[];else if(a&&this.handlers[a]){for(var l in this.handlers[a])n(o,this.handlers[a][l],t);this.handlers[a]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var e=this.element.ownerDocument.documentElement,n=t(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}},n.prototype.on=function(e,t){var n=e.split("."),i=n[0],r=n[1]||"__default",a=this.handlers[r]=this.handlers[r]||{},o=a[i]=a[i]||[];o.push(t),this.element.addEventListener(i,t)},n.prototype.outerHeight=function(t){var n,i=this.innerHeight();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},n.prototype.outerWidth=function(t){var n,i=this.innerWidth();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},n.prototype.scrollLeft=function(){var e=t(this.element);return e?e.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var e=t(this.element);return e?e.pageYOffset:this.element.scrollTop},n.extend=function(){function e(e,t){if("object"==typeof e&&"object"==typeof t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}for(var t=Array.prototype.slice.call(arguments),n=1,i=t.length;i>n;n++)e(t[0],t[n]);return t[0]},n.inArray=function(e,t,n){return null==t?-1:t.indexOf(e,n)},n.isEmptyObject=function(e){for(var t in e)return!1;return!0},i.adapters.push({name:"noframework",Adapter:n}),i.Adapter=n}(),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){function t(e){return s.raw?e:encodeURIComponent(e)}function n(e){return s.raw?e:decodeURIComponent(e)}function i(e){return t(s.json?JSON.stringify(e):String(e))}function r(e){0===e.indexOf('"')&&(e=e.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return e=decodeURIComponent(e.replace(o," ")),s.json?JSON.parse(e):e}catch(t){}}function a(t,n){var i=s.raw?t:r(t);return e.isFunction(n)?n(i):i}var o=/\+/g,s=e.cookie=function(r,o,l){if(void 0!==o&&!e.isFunction(o)){if(l=e.extend({},s.defaults,l),"number"==typeof l.expires){var d=l.expires,u=l.expires=new Date;u.setTime(+u+864e5*d)}return document.cookie=[t(r),"=",i(o),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var c=r?void 0:{},h=document.cookie?document.cookie.split("; "):[],p=0,m=h.length;m>p;p++){var f=h[p].split("="),_=n(f.shift()),y=f.join("=");if(r&&r===_){c=a(y,o);break}r||void 0===(y=a(y))||(c[_]=y)}return c};s.defaults={},e.removeCookie=function(t,n){return void 0===e.cookie(t)?!1:(e.cookie(t,"",e.extend({},n,{expires:-1})),!e.cookie(t))}}),function(e,t,n,i){"use strict";function r(e,t,n){return setTimeout(u(e,n),t)}function a(e,t,n){return Array.isArray(e)?(o(e,n[t],n),!0):!1}function o(e,t,n){var r;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==i)for(r=0;r<e.length;)t.call(n,e[r],r,e),r++;else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e)}function s(e,t,n){for(var r=Object.keys(t),a=0;a<r.length;)(!n||n&&e[r[a]]===i)&&(e[r[a]]=t[r[a]]),a++;return e}function l(e,t){return s(e,t,!0)}function d(e,t,n){var i,r=t.prototype;i=e.prototype=Object.create(r),i.constructor=e,i._super=r,n&&s(i,n)}function u(e,t){return function(){return e.apply(t,arguments)}}function c(e,t){return typeof e==ue?e.apply(t?t[0]||i:i,t):e}function h(e,t){return e===i?t:e}function p(e,t,n){o(y(t),function(t){e.addEventListener(t,n,!1)})}function m(e,t,n){o(y(t),function(t){e.removeEventListener(t,n,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function _(e,t){return e.indexOf(t)>-1}function y(e){return e.trim().split(/\s+/g)}function g(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function v(e){return Array.prototype.slice.call(e,0)}function M(e,t,n){for(var i=[],r=[],a=0;a<e.length;){var o=t?e[a][t]:e[a];g(r,o)<0&&i.push(e[a]),r[a]=o,a++}return n&&(i=t?i.sort(function(e,n){return e[t]>n[t]}):i.sort()),i}function b(e,t){for(var n,r,a=t[0].toUpperCase()+t.slice(1),o=0;o<le.length;){if(n=le[o],r=n?n+a:t,r in e)return r;o++}return i}function L(){return me++}function w(e){var t=e.ownerDocument;return t.defaultView||t.parentWindow}function D(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){c(e.options.enable,[e])&&n.handler(t)},this.init()}function T(e){var t,n=e.options.inputClass;return new(t=n?n:ye?F:ge?N:_e?R:z)(e,S)}function S(e,t,n){var i=n.pointers.length,r=n.changedPointers.length,a=t&De&&i-r===0,o=t&(Se|Ye)&&i-r===0;n.isFirst=!!a,n.isFinal=!!o,a&&(e.session={}),n.eventType=t,Y(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function Y(e,t){var n=e.session,i=t.pointers,r=i.length;n.firstInput||(n.firstInput=C(t)),r>1&&!n.firstMultiple?n.firstMultiple=C(t):1===r&&(n.firstMultiple=!1);var a=n.firstInput,o=n.firstMultiple,s=o?o.center:a.center,l=t.center=H(i);t.timeStamp=pe(),t.deltaTime=t.timeStamp-a.timeStamp,t.angle=I(s,l),t.distance=j(s,l),k(n,t),t.offsetDirection=E(t.deltaX,t.deltaY),t.scale=o?O(o.pointers,i):1,t.rotation=o?P(o.pointers,i):0,x(n,t);var d=e.element;f(t.srcEvent.target,d)&&(d=t.srcEvent.target),t.target=d}function k(e,t){var n=t.center,i=e.offsetDelta||{},r=e.prevDelta||{},a=e.prevInput||{};(t.eventType===De||a.eventType===Se)&&(r=e.prevDelta={x:a.deltaX||0,y:a.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=r.x+(n.x-i.x),t.deltaY=r.y+(n.y-i.y)}function x(e,t){var n,r,a,o,s=e.lastInterval||t,l=t.timeStamp-s.timeStamp;if(t.eventType!=Ye&&(l>we||s.velocity===i)){var d=s.deltaX-t.deltaX,u=s.deltaY-t.deltaY,c=A(l,d,u);r=c.x,a=c.y,n=he(c.x)>he(c.y)?c.x:c.y,o=E(d,u),e.lastInterval=t}else n=s.velocity,r=s.velocityX,a=s.velocityY,o=s.direction;t.velocity=n,t.velocityX=r,t.velocityY=a,t.direction=o}function C(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:ce(e.pointers[n].clientX),clientY:ce(e.pointers[n].clientY)},n++;return{timeStamp:pe(),pointers:t,center:H(t),deltaX:e.deltaX,deltaY:e.deltaY}}function H(e){var t=e.length;if(1===t)return{x:ce(e[0].clientX),y:ce(e[0].clientY)};for(var n=0,i=0,r=0;t>r;)n+=e[r].clientX,i+=e[r].clientY,r++;return{x:ce(n/t),y:ce(i/t)}}function A(e,t,n){return{x:t/e||0,y:n/e||0}}function E(e,t){return e===t?ke:he(e)>=he(t)?e>0?xe:Ce:t>0?He:Ae}function j(e,t,n){n||(n=Pe);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return Math.sqrt(i*i+r*r)}function I(e,t,n){n||(n=Pe);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return 180*Math.atan2(r,i)/Math.PI}function P(e,t){return I(t[1],t[0],Oe)-I(e[1],e[0],Oe)}function O(e,t){return j(t[0],t[1],Oe)/j(e[0],e[1],Oe)}function z(){this.evEl=Fe,this.evWin=We,this.allow=!0,this.pressed=!1,D.apply(this,arguments)}function F(){this.evEl=qe,this.evWin=Re,D.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function W(){this.evTarget=Be,this.evWin=Je,this.started=!1,D.apply(this,arguments)}function $(e,t){var n=v(e.touches),i=v(e.changedTouches);return t&(Se|Ye)&&(n=M(n.concat(i),"identifier",!0)),[n,i]}function N(){this.evTarget=Ge,this.targetIds={},D.apply(this,arguments)}function q(e,t){var n=v(e.touches),i=this.targetIds;if(t&(De|Te)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,a,o=v(e.changedTouches),s=[],l=this.target;if(a=n.filter(function(e){return f(e.target,l)}),t===De)for(r=0;r<a.length;)i[a[r].identifier]=!0,r++;for(r=0;r<o.length;)i[o[r].identifier]&&s.push(o[r]),t&(Se|Ye)&&delete i[o[r].identifier],r++;return s.length?[M(a.concat(s),"identifier",!0),s]:void 0}function R(){D.apply(this,arguments);var e=u(this.handler,this);this.touch=new N(this.manager,e),this.mouse=new z(this.manager,e)}function U(e,t){this.manager=e,this.set(t)}function B(e){if(_(e,tt))return tt;var t=_(e,nt),n=_(e,it);return t&&n?nt+" "+it:t||n?t?nt:it:_(e,et)?et:Ke}function J(e){this.id=L(),this.manager=null,this.options=l(e||{},this.defaults),this.options.enable=h(this.options.enable,!0),this.state=rt,this.simultaneous={},this.requireFail=[]}function V(e){return e&dt?"cancel":e&st?"end":e&ot?"move":e&at?"start":""}function G(e){return e==Ae?"down":e==He?"up":e==xe?"left":e==Ce?"right":""}function X(e,t){var n=t.manager;return n?n.get(e):e}function Q(){J.apply(this,arguments)}function Z(){Q.apply(this,arguments),this.pX=null,this.pY=null}function K(){Q.apply(this,arguments)}function ee(){J.apply(this,arguments),this._timer=null,this._input=null}function te(){Q.apply(this,arguments)}function ne(){Q.apply(this,arguments)}function ie(){J.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function re(e,t){return t=t||{},t.recognizers=h(t.recognizers,re.defaults.preset),new ae(e,t)}function ae(e,t){t=t||{},this.options=l(t,re.defaults),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.element=e,this.input=T(this),this.touchAction=new U(this,this.options.touchAction),oe(this,!0),o(t.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function oe(e,t){var n=e.element;o(e.options.cssProps,function(e,i){n.style[b(n.style,i)]=t?e:""})}function se(e,n){var i=t.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var le=["","webkit","moz","MS","ms","o"],de=t.createElement("div"),ue="function",ce=Math.round,he=Math.abs,pe=Date.now,me=1,fe=/mobile|tablet|ip(ad|hone|od)|android/i,_e="ontouchstart"in e,ye=b(e,"PointerEvent")!==i,ge=_e&&fe.test(navigator.userAgent),ve="touch",Me="pen",be="mouse",Le="kinect",we=25,De=1,Te=2,Se=4,Ye=8,ke=1,xe=2,Ce=4,He=8,Ae=16,Ee=xe|Ce,je=He|Ae,Ie=Ee|je,Pe=["x","y"],Oe=["clientX","clientY"];D.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(w(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(w(this.element),this.evWin,this.domHandler)}};var ze={mousedown:De,mousemove:Te,mouseup:Se},Fe="mousedown",We="mousemove mouseup";d(z,D,{handler:function(e){var t=ze[e.type];t&De&&0===e.button&&(this.pressed=!0),t&Te&&1!==e.which&&(t=Se),this.pressed&&this.allow&&(t&Se&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:be,srcEvent:e}))}});var $e={pointerdown:De,pointermove:Te,pointerup:Se,pointercancel:Ye,pointerout:Ye},Ne={2:ve,3:Me,4:be,5:Le},qe="pointerdown",Re="pointermove pointerup pointercancel";e.MSPointerEvent&&(qe="MSPointerDown",Re="MSPointerMove MSPointerUp MSPointerCancel"),d(F,D,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),r=$e[i],a=Ne[e.pointerType]||e.pointerType,o=a==ve,s=g(t,e.pointerId,"pointerId");r&De&&(0===e.button||o)?0>s&&(t.push(e),s=t.length-1):r&(Se|Ye)&&(n=!0),0>s||(t[s]=e,this.callback(this.manager,r,{pointers:t,changedPointers:[e],pointerType:a,srcEvent:e}),n&&t.splice(s,1))}});var Ue={touchstart:De,touchmove:Te,touchend:Se,touchcancel:Ye},Be="touchstart",Je="touchstart touchmove touchend touchcancel";d(W,D,{handler:function(e){var t=Ue[e.type];if(t===De&&(this.started=!0),this.started){var n=$.call(this,e,t);t&(Se|Ye)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:ve,srcEvent:e})}}});var Ve={touchstart:De,touchmove:Te,touchend:Se,touchcancel:Ye},Ge="touchstart touchmove touchend touchcancel";d(N,D,{handler:function(e){var t=Ve[e.type],n=q.call(this,e,t);
n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:ve,srcEvent:e})}}),d(R,D,{handler:function(e,t,n){var i=n.pointerType==ve,r=n.pointerType==be;if(i)this.mouse.allow=!1;else if(r&&!this.mouse.allow)return;t&(Se|Ye)&&(this.mouse.allow=!0),this.callback(e,t,n)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Xe=b(de.style,"touchAction"),Qe=Xe!==i,Ze="compute",Ke="auto",et="manipulation",tt="none",nt="pan-x",it="pan-y";U.prototype={set:function(e){e==Ze&&(e=this.compute()),Qe&&(this.manager.element.style[Xe]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return o(this.manager.recognizers,function(t){c(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),B(e.join(" "))},preventDefaults:function(e){if(!Qe){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)return void t.preventDefault();var i=this.actions,r=_(i,tt),a=_(i,it),o=_(i,nt);return r||a&&n&Ee||o&&n&je?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var rt=1,at=2,ot=4,st=8,lt=st,dt=16,ut=32;J.prototype={defaults:{},set:function(e){return s(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(a(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=X(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return a(e,"dropRecognizeWith",this)?this:(e=X(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(a(e,"requireFailure",this))return this;var t=this.requireFail;return e=X(e,this),-1===g(t,e)&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(a(e,"dropRequireFailure",this))return this;e=X(e,this);var t=g(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(n.options.event+(t?V(i):""),e)}var n=this,i=this.state;st>i&&t(!0),t(),i>=st&&t(!0)},tryEmit:function(e){return this.canEmit()?this.emit(e):void(this.state=ut)},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(ut|rt)))return!1;e++}return!0},recognize:function(e){var t=s({},e);return c(this.options.enable,[this,t])?(this.state&(lt|dt|ut)&&(this.state=rt),this.state=this.process(t),void(this.state&(at|ot|st|dt)&&this.tryEmit(t))):(this.reset(),void(this.state=ut))},process:function(e){},getTouchAction:function(){},reset:function(){}},d(Q,J,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=t&(at|ot),r=this.attrTest(e);return i&&(n&Ye||!r)?t|dt:i||r?n&Se?t|st:t&at?t|ot:at:ut}}),d(Z,Q,{defaults:{event:"pan",threshold:10,pointers:1,direction:Ie},getTouchAction:function(){var e=this.options.direction,t=[];return e&Ee&&t.push(it),e&je&&t.push(nt),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,r=e.direction,a=e.deltaX,o=e.deltaY;return r&t.direction||(t.direction&Ee?(r=0===a?ke:0>a?xe:Ce,n=a!=this.pX,i=Math.abs(e.deltaX)):(r=0===o?ke:0>o?He:Ae,n=o!=this.pY,i=Math.abs(e.deltaY))),e.direction=r,n&&i>t.threshold&&r&t.direction},attrTest:function(e){return Q.prototype.attrTest.call(this,e)&&(this.state&at||!(this.state&at)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=G(e.direction);t&&this.manager.emit(this.options.event+t,e),this._super.emit.call(this,e)}}),d(K,Q,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[tt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&at)},emit:function(e){if(this._super.emit.call(this,e),1!==e.scale){var t=e.scale<1?"in":"out";this.manager.emit(this.options.event+t,e)}}}),d(ee,J,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return[Ke]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,a=e.deltaTime>t.time;if(this._input=e,!i||!n||e.eventType&(Se|Ye)&&!a)this.reset();else if(e.eventType&De)this.reset(),this._timer=r(function(){this.state=lt,this.tryEmit()},t.time,this);else if(e.eventType&Se)return lt;return ut},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===lt&&(e&&e.eventType&Se?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=pe(),this.manager.emit(this.options.event,this._input)))}}),d(te,Q,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[tt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&at)}}),d(ne,Q,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:Ee|je,pointers:1},getTouchAction:function(){return Z.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(Ee|je)?t=e.velocity:n&Ee?t=e.velocityX:n&je&&(t=e.velocityY),this._super.attrTest.call(this,e)&&n&e.direction&&e.distance>this.options.threshold&&he(t)>this.options.velocity&&e.eventType&Se},emit:function(e){var t=G(e.direction);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),d(ie,J,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[et]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,a=e.deltaTime<t.time;if(this.reset(),e.eventType&De&&0===this.count)return this.failTimeout();if(i&&a&&n){if(e.eventType!=Se)return this.failTimeout();var o=this.pTime?e.timeStamp-this.pTime<t.interval:!0,s=!this.pCenter||j(this.pCenter,e.center)<t.posThreshold;this.pTime=e.timeStamp,this.pCenter=e.center,s&&o?this.count+=1:this.count=1,this._input=e;var l=this.count%t.taps;if(0===l)return this.hasRequireFailures()?(this._timer=r(function(){this.state=lt,this.tryEmit()},t.interval,this),at):lt}return ut},failTimeout:function(){return this._timer=r(function(){this.state=ut},this.options.interval,this),ut},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==lt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),re.VERSION="2.0.4",re.defaults={domEvents:!1,touchAction:Ze,enable:!0,inputTarget:null,inputClass:null,preset:[[te,{enable:!1}],[K,{enable:!1},["rotate"]],[ne,{direction:Ee}],[Z,{direction:Ee},["swipe"]],[ie],[ie,{event:"doubletap",taps:2},["tap"]],[ee]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var ct=1,ht=2;ae.prototype={set:function(e){return s(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?ht:ct},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,i=this.recognizers,r=t.curRecognizer;(!r||r&&r.state&lt)&&(r=t.curRecognizer=null);for(var a=0;a<i.length;)n=i[a],t.stopped===ht||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(e),!r&&n.state&(at|ot|st)&&(r=t.curRecognizer=n),a++}},get:function(e){if(e instanceof J)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(a(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(a(e,"remove",this))return this;var t=this.recognizers;return e=this.get(e),t.splice(g(t,e),1),this.touchAction.update(),this},on:function(e,t){var n=this.handlers;return o(y(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this},off:function(e,t){var n=this.handlers;return o(y(e),function(e){t?n[e].splice(g(n[e],t),1):delete n[e]}),this},emit:function(e,t){this.options.domEvents&&se(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&oe(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},s(re,{INPUT_START:De,INPUT_MOVE:Te,INPUT_END:Se,INPUT_CANCEL:Ye,STATE_POSSIBLE:rt,STATE_BEGAN:at,STATE_CHANGED:ot,STATE_ENDED:st,STATE_RECOGNIZED:lt,STATE_CANCELLED:dt,STATE_FAILED:ut,DIRECTION_NONE:ke,DIRECTION_LEFT:xe,DIRECTION_RIGHT:Ce,DIRECTION_UP:He,DIRECTION_DOWN:Ae,DIRECTION_HORIZONTAL:Ee,DIRECTION_VERTICAL:je,DIRECTION_ALL:Ie,Manager:ae,Input:D,TouchAction:U,TouchInput:N,MouseInput:z,PointerEventInput:F,TouchMouseInput:R,SingleTouchInput:W,Recognizer:J,AttrRecognizer:Q,Tap:ie,Pan:Z,Swipe:ne,Pinch:K,Rotate:te,Press:ee,on:p,off:m,each:o,merge:l,extend:s,inherit:d,bindFn:u,prefixed:b}),typeof define==ue&&define.amd?define(function(){return re}):"undefined"!=typeof module&&module.exports?module.exports=re:e[n]=re}(window,document,"Hammer"),function(e,t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?t(require("jquery"),window,document):t(e.jQuery||e.Zepto,window,document)}(this,function(e,t,n){"use strict";var i=function(i,r){function a(){b=M,0===M?(b=y,"fade"!==r.animation&&m.css("left",-b*v)):M===g-1&&(b=1,"fade"!==r.animation&&m.css("left",-v)),"fade"===r.animation&&_.eq(b).show(),r.showBullets&&i.next(".as-nav").find("a").removeClass("as-active").eq(b-1).addClass("as-active"),L=!1,r.afterChange.call(i[0])}function o(){L||1>=y||(L=!0,r.beforeChange.call(i[0]),"fade"===r.animation?_.css("z-index",1).fadeOut(r.speed).eq(M).css("z-index",2).fadeIn(r.speed,a):m.animate({left:-M*v},r.speed,r.easing,a),s())}function s(){clearTimeout(f),r.interval&&y>1&&(f=setTimeout(function(){r.reverse?p():u()},r.interval))}function l(){return b}function d(e){M=e,o()}function u(){M=b+1,o()}function c(){clearTimeout(f)}function h(){s()}function p(){M=b-1,o()}var m,f,_=i.children(),y=_.length,g=y,v=i.width(),M=0,b=0,L=!1,w={afterChange:function(){},afterSetup:function(){},animation:"slide",beforeChange:function(){},easing:"swing",interval:5e3,keyboard:!0,nextLabel:"Next slide",pauseOnHover:!0,prevLabel:"Previous slide",reverse:!1,showBullets:!0,showControls:!0,speed:400,startSlide:1,touch:!0};if(r=e.extend(w,r),y>1&&(_.eq(0).clone().addClass("clone").appendTo(i),_.eq(g-1).clone().addClass("clone").prependTo(i),r.startSlide<y&&(b=r.startSlide)),_=i.children(),g=_.length,_.wrapAll('<div class="as-slide-inner"></div>').css("width",v),m=i.css("overflow","hidden").find(".as-slide-inner"),"fade"===r.animation?(_.css({display:"none",left:0,position:"absolute",top:0}).eq(b).show(),m.css("width",v)):(_.css({"float":"left",position:"relative"}),m.css({left:-b*v,width:g*v})),m.css({"float":"left",position:"relative"}),r.showControls&&y>1&&(i.prepend('<a href="#" class="as-prev-arrow" title="LABEL">LABEL</a>'.replace(/LABEL/g,r.prevLabel)),i.append('<a href="#" class="as-next-arrow" title="LABEL">LABEL</a>'.replace(/LABEL/g,r.nextLabel)),i.on("click.as",".as-prev-arrow, .as-next-arrow",function(t){t.preventDefault(),L||(e(this).hasClass("as-prev-arrow")?p():u())})),r.showBullets&&y>1){var D,T,S='<div class="as-nav"></div>',Y=e(S);for(T=1;y>=T;T++)D="",T===b&&(D=' class="as-active"'),Y.append('<a href="#"'+D+">"+T+"</a>");Y.on("click.as","a",function(t){var n=e(this).index();t.preventDefault(),e(this).hasClass("as-active")||L||(Y.find("a").removeClass("as-active").eq(n).addClass("as-active"),d(n+1))}),i.after(Y)}if(r.keyboard&&e(n).on("keydown.as",function(e){var t=e.keyCode;37!==t&&39!==t||1>=y||(37===t?p():u())}),r.pauseOnHover&&i.on("mouseenter",function(){c()}).on("mouseleave",function(){h()}),e(t).resize(function(){L||(v=i.width(),m.css("width",v),_.css("width",v),"fade"!==r.animation&&m.css({left:-b*v,width:g*v}))}),r.touch&&"ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints>0){var k,x;i.on("touchstart.as pointerdown.as MSPointerDown.as",function(e){k=e.timeStamp,x=e.originalEvent?e.originalEvent.pageX||e.originalEvent.touches[0].pageX:e.pageX||e.touches[0].pageX}).on("touchmove.as pointermove.as MSPointerMove.as",function(e){var t,n=e.timeStamp,r=0;t=e.originalEvent?e.originalEvent.pageX||e.originalEvent.touches[0].pageX:e.pageX||e.touches[0].pageX,0!==x&&(r=Math.abs(t-x)),0!==k&&1e3>n-k&&r>200&&(e.preventDefault(),x>t?u():t>x&&p(),k=0,x=0,i.trigger("touchend.as"))}).on("touchend.as pointerup.as MSPointerUp.as",function(){k=0,x=0})}return s(),r.afterSetup.call(i[0]),{currentSlide:l,goTo:d,next:u,pause:c,play:h,prev:p}};e.fn.anyslider=function(t){return this.each(function(){var n,r=e(this);return r.data("anyslider")?r.data("anyslider"):(n=new i(r,t),void r.data("anyslider",n))})}}),function(e){function t(){}function n(e){function n(t){t.prototype.option||(t.prototype.option=function(t){e.isPlainObject(t)&&(this.options=e.extend(!0,this.options,t))})}function r(t,n){e.fn[t]=function(r){if("string"==typeof r){for(var o=i.call(arguments,1),s=0,l=this.length;l>s;s++){var d=this[s],u=e.data(d,t);if(u)if(e.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,o);if(void 0!==c)return c}else a("no such method '"+r+"' for "+t+" instance");else a("cannot call methods on "+t+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=e.data(this,t);i?(i.option(r),i._init()):(i=new n(this,r),e.data(this,t,i))})}}if(e){var a="undefined"==typeof console?t:function(e){console.error(e)};return e.bridget=function(e,t){n(t),r(e,t)},e.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):e.jQuery)}(window),function(e){function t(e){return new RegExp("(^|\\s+)"+e+"(\\s+|$)")}function n(e,t){var n=i(e,t)?a:r;n(e,t)}var i,r,a;"classList"in document.documentElement?(i=function(e,t){return e.classList.contains(t)},r=function(e,t){e.classList.add(t)},a=function(e,t){e.classList.remove(t)}):(i=function(e,n){return t(n).test(e.className)},r=function(e,t){i(e,t)||(e.className=e.className+" "+t)},a=function(e,n){e.className=e.className.replace(t(n)," ")});var o={hasClass:i,addClass:r,removeClass:a,toggleClass:n,has:i,add:r,remove:a,toggle:n};"function"==typeof define&&define.amd?define("classie/classie",o):"object"==typeof exports?module.exports=o:e.classie=o}(window),function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),-1!==i&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}.call(this),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):"object"==typeof exports?module.exports=a:e.eventie=a}(window),function(e){function t(e){if(e){if("string"==typeof i[e])return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var t,r=0,a=n.length;a>r;r++)if(t=n[r]+e,"string"==typeof i[t])return t}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return t}):"object"==typeof exports?module.exports=t:e.getStyleProperty=t}(window),function(e,t){function n(e){var t=parseFloat(e),n=-1===e.indexOf("%")&&!isNaN(t);return n&&t}function i(){}function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0,n=s.length;n>t;t++){var i=s[t];e[i]=0}return e}function a(t){function i(){if(!h){h=!0;var i=e.getComputedStyle;if(d=function(){var e=i?function(e){return i(e,null)}:function(e){return e.currentStyle};return function(t){var n=e(t);return n||o("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),u=t("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[u]="border-box";var a=document.body||document.documentElement;a.appendChild(r);var s=d(r);c=200===n(s.width),a.removeChild(r)}}}function a(e){if(i(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=d(e);if("none"===t.display)return r();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var o=a.isBorderBox=!(!u||!t[u]||"border-box"!==t[u]),h=0,p=s.length;p>h;h++){var m=s[h],f=t[m];f=l(e,f);var _=parseFloat(f);a[m]=isNaN(_)?0:_}var y=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,v=a.marginLeft+a.marginRight,M=a.marginTop+a.marginBottom,b=a.borderLeftWidth+a.borderRightWidth,L=a.borderTopWidth+a.borderBottomWidth,w=o&&c,D=n(t.width);D!==!1&&(a.width=D+(w?0:y+b));var T=n(t.height);return T!==!1&&(a.height=T+(w?0:g+L)),a.innerWidth=a.width-(y+b),a.innerHeight=a.height-(g+L),a.outerWidth=a.width+v,a.outerHeight=a.height+M,a}}function l(t,n){if(e.getComputedStyle||-1===n.indexOf("%"))return n;var i=t.style,r=i.left,a=t.runtimeStyle,o=a&&a.left;return o&&(a.left=t.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,o&&(a.left=o),n}var d,u,c,h=!1;return a}var o="undefined"==typeof console?i:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],a):"object"==typeof exports?module.exports=a(require("desandro-get-style-property")):e.getSize=a(e.getStyleProperty)}(window),function(e){function t(e){"function"==typeof e&&(t.isReady?e():o.push(e))}function n(e){var n="readystatechange"===e.type&&"complete"!==a.readyState;t.isReady||n||i()}function i(){t.isReady=!0;for(var e=0,n=o.length;n>e;e++){var i=o[e];i()}}function r(r){return"complete"===a.readyState?i():(r.bind(a,"DOMContentLoaded",n),r.bind(a,"readystatechange",n),r.bind(e,"load",n)),t}var a=e.document,o=[];t.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):e.docReady=r(e.eventie)}(window),function(e){"use strict";function t(e,t){return e[o](t)}function n(e){if(!e.parentNode){var t=document.createDocumentFragment();t.appendChild(e)}}function i(e,t){n(e);for(var i=e.parentNode.querySelectorAll(t),r=0,a=i.length;a>r;r++)if(i[r]===e)return!0;return!1}function r(e,i){return n(e),t(e,i)}var a,o=function(){if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0,i=t.length;i>n;n++){var r=t[n],a=r+"MatchesSelector";if(e[a])return a}}();if(o){var s=document.createElement("div"),l=t(s,"div");a=l?t:r}else a=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return a}):"object"==typeof exports?module.exports=a:window.matchesSelector=a}(Element.prototype),function(e,t){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("doc-ready"),require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.docReady,e.matchesSelector)}(window,function(e,t,n){var i={};i.extend=function(e,t){for(var n in t)e[n]=t[n];return e},i.modulo=function(e,t){return(e%t+t)%t};var r=Object.prototype.toString;i.isArray=function(e){return"[object Array]"==r.call(e)},i.makeArray=function(e){var t=[];if(i.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0,r=e.length;r>n;n++)t.push(e[n]);else t.push(e);return t},i.indexOf=Array.prototype.indexOf?function(e,t){return e.indexOf(t)}:function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n]===t)return n;return-1},i.removeFrom=function(e,t){var n=i.indexOf(e,t);-1!=n&&e.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(e){return e instanceof HTMLElement}:function(e){return e&&"object"==typeof e&&1==e.nodeType&&"string"==typeof e.nodeName},i.setText=function(){function e(e,n){t=t||(void 0!==document.documentElement.textContent?"textContent":"innerText"),e[t]=n}var t;return e}(),i.getParent=function(e,t){for(;e!=document.body;)if(e=e.parentNode,n(e,t))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,t){e=i.makeArray(e);for(var r=[],a=0,o=e.length;o>a;a++){var s=e[a];if(i.isElement(s))if(t){n(s,t)&&r.push(s);for(var l=s.querySelectorAll(t),d=0,u=l.length;u>d;d++)r.push(l[d])}else r.push(s)}return r},i.debounceMethod=function(e,t,n){var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];e&&clearTimeout(e);var t=arguments,a=this;this[r]=setTimeout(function(){i.apply(a,t),delete a[r]},n||100)}},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var a=e.console;return i.htmlInit=function(n,r){t(function(){for(var t=i.toDashed(r),o=document.querySelectorAll(".js-"+t),s="data-"+t+"-options",l=0,d=o.length;d>l;l++){var u,c=o[l],h=c.getAttribute(s);try{u=h&&JSON.parse(h)}catch(p){a&&a.error("Error parsing "+s+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+p);continue}var m=new n(c,u),f=e.jQuery;f&&f.data(c,r,m)}})},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/cell",["get-size/get-size"],function(n){return t(e,n)}):"object"==typeof exports?module.exports=t(e,require("get-size")):(e.Flickity=e.Flickity||{},e.Flickity.Cell=t(e,e.getSize))}(window,function(e,t){function n(e,t){this.element=e,this.parent=t,this.create()}var i="attachEvent"in e;return n.prototype.create=function(){this.element.style.position="absolute",i&&this.element.setAttribute("unselectable","on"),this.x=0,this.shift=0},n.prototype.destroy=function(){this.element.style.position="";var e=this.parent.originSide;this.element.style[e]=""},n.prototype.getSize=function(){this.size=t(this.element)},n.prototype.setPosition=function(e){this.x=e,this.setDefaultTarget(),this.renderPosition(e)},n.prototype.setDefaultTarget=function(){var e="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[e]+this.size.width*this.parent.cellAlign},n.prototype.renderPosition=function(e){var t=this.parent.originSide;this.element.style[t]=this.parent.getPositionValue(e)},n.prototype.wrapShift=function(e){this.shift=e,this.renderPosition(this.x+this.parent.slideableWidth*e)},n.prototype.remove=function(){this.element.parentNode.removeChild(this.element)},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/animate",["get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("desandro-get-style-property"),require("fizzy-ui-utils")):(e.Flickity=e.Flickity||{},e.Flickity.animatePrototype=t(e,e.getStyleProperty,e.fizzyUIUtils))}(window,function(e,t,n){for(var i,r=0,a="webkit moz ms o".split(" "),o=e.requestAnimationFrame,s=e.cancelAnimationFrame,l=0;l<a.length&&(!o||!s);l++)i=a[l],o=o||e[i+"RequestAnimationFrame"],s=s||e[i+"CancelAnimationFrame"]||e[i+"CancelRequestAnimationFrame"];o&&s||(o=function(t){var n=(new Date).getTime(),i=Math.max(0,16-(n-r)),a=e.setTimeout(function(){t(n+i)},i);return r=n+i,a},s=function(t){e.clearTimeout(t)});var d={};d.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},d.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var e=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating){var t=this;o(function(){t.animate()})}};var u=t("transform"),c=!!t("perspective");return d.positionSlider=function(){var e=this.x;this.options.wrapAround&&this.cells.length>1&&(e=n.modulo(e,this.slideableWidth),e-=this.slideableWidth,this.shiftWrapCells(e)),e+=this.cursorPosition,e=this.options.rightToLeft&&u?-e:e;var t=this.getPositionValue(e);u?this.slider.style[u]=c&&this.isAnimating?"translate3d("+t+",0,0)":"translateX("+t+")":this.slider.style[this.originSide]=t},d.positionSliderAtSelected=function(){if(this.cells.length){var e=this.cells[this.selectedIndex];this.x=-e.target,this.positionSlider()}},d.getPositionValue=function(e){return this.options.percentPosition?.01*Math.round(e/this.size.innerWidth*1e4)+"%":Math.round(e)+"px"},d.settle=function(e){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*e)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,c&&this.positionSlider(),this.dispatchEvent("settle"))},d.shiftWrapCells=function(e){var t=this.cursorPosition+e;this._shiftCells(this.beforeShiftCells,t,-1);var n=this.size.innerWidth-(e+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},d._shiftCells=function(e,t,n){for(var i=0,r=e.length;r>i;i++){var a=e[i],o=t>0?n:0;a.wrapShift(o),t-=a.size.outerWidth}},d._unshiftCells=function(e){if(e&&e.length)for(var t=0,n=e.length;n>t;t++)e[t].wrapShift(0)},d.integratePhysics=function(){this.velocity+=this.accel,this.x+=this.velocity,this.velocity*=this.getFrictionFactor(),this.accel=0},d.applyForce=function(e){this.accel+=e},d.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},d.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},d.applyDragForce=function(){if(this.isPointerDown){var e=this.dragX-this.x,t=e-this.velocity;this.applyForce(t)}},d.applySelectedAttraction=function(){var e=this.cells.length;if(!this.isPointerDown&&!this.isFreeScrolling&&e){var t=this.cells[this.selectedIndex],n=this.options.wrapAround&&e>1?this.slideableWidth*Math.floor(this.selectedIndex/e):0,i=-1*(t.target+n)-this.x,r=i*this.options.selectedAttraction;this.applyForce(r)}},d}),function(e,t){"use strict";if("function"==typeof define&&define.amd)define("flickity/js/flickity",["classie/classie","eventEmitter/EventEmitter","eventie/eventie","get-size/get-size","fizzy-ui-utils/utils","./cell","./animate"],function(n,i,r,a,o,s,l){return t(e,n,i,r,a,o,s,l)});else if("object"==typeof exports)module.exports=t(e,require("desandro-classie"),require("wolfy87-eventemitter"),require("eventie"),require("get-size"),require("fizzy-ui-utils"),require("./cell"),require("./animate"));else{var n=e.Flickity;e.Flickity=t(e,e.classie,e.EventEmitter,e.eventie,e.getSize,e.fizzyUIUtils,n.Cell,n.animatePrototype)}}(window,function(e,t,n,i,r,a,o,s){function l(e,t){for(e=a.makeArray(e);e.length;)t.appendChild(e.shift())}function d(e,t){var n=a.getQueryElement(e);return n?(this.element=n,u&&(this.$element=u(this.element)),this.options=a.extend({},this.constructor.defaults),this.option(t),void this._create()):void(h&&h.error("Bad element for Flickity: "+(n||e)))}var u=e.jQuery,c=e.getComputedStyle,h=e.console,p=0,m={};d.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},d.createMethods=[],a.extend(d.prototype,n.prototype),d.prototype._create=function(){var t=this.guid=++p;this.element.flickityGUID=t,m[t]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.accel=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",d.setUnselectable(this.viewport),this._createSlider(),(this.options.resize||this.options.watchCSS)&&(i.bind(e,"resize",this),this.isResizeBound=!0);for(var n=0,r=d.createMethods.length;r>n;n++){var a=d.createMethods[n];this[a]()}this.options.watchCSS?this.watchCSS():this.activate()},d.prototype.option=function(e){a.extend(this.options,e)},d.prototype.activate=function(){if(!this.isActive){this.isActive=!0,t.add(this.element,"flickity-enabled"),this.options.rightToLeft&&t.add(this.element,"flickity-rtl"),this.getSize();var e=this._filterFindCellElements(this.element.children);l(e,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,i.bind(this.element,"keydown",this)),this.emit("activate");var n,r=this.options.initialIndex;n=this.isInitActivated?this.selectedIndex:void 0!==r&&this.cells[r]?r:0,this.select(n,!1,!0),this.isInitActivated=!0}},d.prototype._createSlider=function(){var e=document.createElement("div");e.className="flickity-slider",e.style[this.originSide]=0,this.slider=e;
},d.prototype._filterFindCellElements=function(e){return a.filterFindElements(e,this.options.cellSelector)},d.prototype.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},d.prototype._makeCells=function(e){for(var t=this._filterFindCellElements(e),n=[],i=0,r=t.length;r>i;i++){var a=t[i],s=new o(a,this);n.push(s)}return n},d.prototype.getLastCell=function(){return this.cells[this.cells.length-1]},d.prototype.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},d.prototype._positionCells=function(e){e=e||0,this.maxCellHeight=e?this.maxCellHeight||0:0;var t=0;if(e>0){var n=this.cells[e-1];t=n.x+n.size.outerWidth}for(var i,r=this.cells.length,a=e;r>a;a++)i=this.cells[a],i.setPosition(t),t+=i.size.outerWidth,this.maxCellHeight=Math.max(i.size.outerHeight,this.maxCellHeight);this.slideableWidth=t,this._containCells()},d.prototype._sizeCells=function(e){for(var t=0,n=e.length;n>t;t++){var i=e[t];i.getSize()}},d.prototype._init=d.prototype.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},d.prototype.getSize=function(){this.size=r(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var f={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};d.prototype.setCellAlign=function(){var e=f[this.options.cellAlign];this.cellAlign=e?e[this.originSide]:this.options.cellAlign},d.prototype.setGallerySize=function(){this.options.setGallerySize&&(this.viewport.style.height=this.maxCellHeight+"px")},d.prototype._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var e=this.cursorPosition,t=this.cells.length-1;this.beforeShiftCells=this._getGapCells(e,t,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1)}},d.prototype._getGapCells=function(e,t,n){for(var i=[];e>0;){var r=this.cells[t];if(!r)break;i.push(r),t+=n,e-=r.size.outerWidth}return i},d.prototype._containCells=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length)for(var e=this.options.rightToLeft?"marginRight":"marginLeft",t=this.options.rightToLeft?"marginLeft":"marginRight",n=this.cells[0].size[e],i=this.getLastCell(),r=this.slideableWidth-i.size[t],a=r-this.size.innerWidth*(1-this.cellAlign),o=r<this.size.innerWidth,s=0,l=this.cells.length;l>s;s++){var d=this.cells[s];d.setDefaultTarget(),o?d.target=r*this.cellAlign:(d.target=Math.max(d.target,this.cursorPosition+n),d.target=Math.min(d.target,a))}},d.prototype.dispatchEvent=function(e,t,n){var i=[t].concat(n);if(this.emitEvent(e,i),u&&this.$element)if(t){var r=u.Event(t);r.type=e,this.$element.trigger(r,n)}else this.$element.trigger(e,n)},d.prototype.select=function(e,t,n){if(this.isActive){e=parseInt(e,10);var i=this.cells.length;this.options.wrapAround&&i>1&&(0>e?this.x-=this.slideableWidth:e>=i&&(this.x+=this.slideableWidth)),(this.options.wrapAround||t)&&(e=a.modulo(e,i)),this.cells[e]&&(this.selectedIndex=e,this.setSelectedCell(),n?this.positionSliderAtSelected():this.startAnimation(),this.dispatchEvent("cellSelect"))}},d.prototype.previous=function(e){this.select(this.selectedIndex-1,e)},d.prototype.next=function(e){this.select(this.selectedIndex+1,e)},d.prototype.setSelectedCell=function(){this._removeSelectedCellClass(),this.selectedCell=this.cells[this.selectedIndex],this.selectedElement=this.selectedCell.element,t.add(this.selectedElement,"is-selected")},d.prototype._removeSelectedCellClass=function(){this.selectedCell&&t.remove(this.selectedCell.element,"is-selected")},d.prototype.getCell=function(e){for(var t=0,n=this.cells.length;n>t;t++){var i=this.cells[t];if(i.element==e)return i}},d.prototype.getCells=function(e){e=a.makeArray(e);for(var t=[],n=0,i=e.length;i>n;n++){var r=e[n],o=this.getCell(r);o&&t.push(o)}return t},d.prototype.getCellElements=function(){for(var e=[],t=0,n=this.cells.length;n>t;t++)e.push(this.cells[t].element);return e},d.prototype.getParentCell=function(e){var t=this.getCell(e);return t?t:(e=a.getParent(e,".flickity-slider > *"),this.getCell(e))},d.prototype.getAdjacentCellElements=function(e,t){if(!e)return[this.selectedElement];t=void 0===t?this.selectedIndex:t;var n=this.cells.length;if(1+2*e>=n)return this.getCellElements();for(var i=[],r=t-e;t+e>=r;r++){var o=this.options.wrapAround?a.modulo(r,n):r,s=this.cells[o];s&&i.push(s.element)}return i},d.prototype.uiChange=function(){this.emit("uiChange")},d.prototype.childUIPointerDown=function(e){this.emitEvent("childUIPointerDown",[e])},d.prototype.onresize=function(){this.watchCSS(),this.resize()},a.debounceMethod(d,"onresize",150),d.prototype.resize=function(){this.isActive&&(this.getSize(),this.options.wrapAround&&(this.x=a.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.positionSliderAtSelected())};var _=d.supportsConditionalCSS=function(){var e;return function(){if(void 0!==e)return e;if(!c)return void(e=!1);var t=document.createElement("style"),n=document.createTextNode('body:after { content: "foo"; display: none; }');t.appendChild(n),document.head.appendChild(t);var i=c(document.body,":after").content;return e=-1!=i.indexOf("foo"),document.head.removeChild(t),e}}();d.prototype.watchCSS=function(){var e=this.options.watchCSS;if(e){var t=_();if(!t){var n="fallbackOn"==e?"activate":"deactivate";return void this[n]()}var i=c(this.element,":after").content;-1!=i.indexOf("flickity")?this.activate():this.deactivate()}},d.prototype.onkeydown=function(e){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==e.keyCode){var t=this.options.rightToLeft?"next":"previous";this.uiChange(),this[t]()}else if(39==e.keyCode){var n=this.options.rightToLeft?"previous":"next";this.uiChange(),this[n]()}},d.prototype.deactivate=function(){if(this.isActive){t.remove(this.element,"flickity-enabled"),t.remove(this.element,"flickity-rtl");for(var e=0,n=this.cells.length;n>e;e++){var r=this.cells[e];r.destroy()}this._removeSelectedCellClass(),this.element.removeChild(this.viewport),l(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),i.unbind(this.element,"keydown",this)),this.isActive=!1,this.emit("deactivate")}},d.prototype.destroy=function(){this.deactivate(),this.isResizeBound&&i.unbind(e,"resize",this),this.emit("destroy"),u&&this.$element&&u.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete m[this.guid]},a.extend(d.prototype,s);var y="attachEvent"in e;return d.setUnselectable=function(e){y&&e.setAttribute("unselectable","on")},d.data=function(e){e=a.getQueryElement(e);var t=e&&e.flickityGUID;return t&&m[t]},a.htmlInit(d,"flickity"),u&&u.bridget&&u.bridget("flickity",d),d.Cell=o,d}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("unipointer/unipointer",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.Unipointer=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(){}function r(){}r.prototype=new t,r.prototype.bindStartEvent=function(e){this._bindStartEvent(e,!0)},r.prototype.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},r.prototype._bindStartEvent=function(t,i){i=void 0===i?!0:!!i;var r=i?"bind":"unbind";e.navigator.pointerEnabled?n[r](t,"pointerdown",this):e.navigator.msPointerEnabled?n[r](t,"MSPointerDown",this):(n[r](t,"mousedown",this),n[r](t,"touchstart",this))},r.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},r.prototype.getTouch=function(e){for(var t=0,n=e.length;n>t;t++){var i=e[t];if(i.identifier==this.pointerIdentifier)return i}},r.prototype.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},r.prototype.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},r.prototype.onMSPointerDown=r.prototype.onpointerdown=function(e){this._pointerDown(e,e)},r.prototype._pointerDown=function(e,t){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},r.prototype.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var a={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return r.prototype._bindPostStartEvents=function(t){if(t){for(var i=a[t.type],r=t.preventDefault?e:document,o=0,s=i.length;s>o;o++){var l=i[o];n.bind(r,l,this)}this._boundPointerEvents={events:i,node:r}}},r.prototype._unbindPostStartEvents=function(){var e=this._boundPointerEvents;if(e&&e.events){for(var t=0,i=e.events.length;i>t;t++){var r=e.events[t];n.unbind(e.node,r,this)}delete this._boundPointerEvents}},r.prototype.onmousemove=function(e){this._pointerMove(e,e)},r.prototype.onMSPointerMove=r.prototype.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},r.prototype.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},r.prototype._pointerMove=function(e,t){this.pointerMove(e,t)},r.prototype.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},r.prototype.onmouseup=function(e){this._pointerUp(e,e)},r.prototype.onMSPointerUp=r.prototype.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},r.prototype.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},r.prototype._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},r.prototype.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},r.prototype._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},r.prototype.pointerDone=i,r.prototype.onMSPointerCancel=r.prototype.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},r.prototype.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},r.prototype._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},r.prototype.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},r.getPointerPoint=function(e){return{x:void 0!==e.pageX?e.pageX:e.clientX,y:void 0!==e.pageY?e.pageY:e.clientY}},r}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("unidragger/unidragger",["eventie/eventie","unipointer/unipointer"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("unipointer")):e.Unidragger=t(e,e.eventie,e.Unipointer)}(window,function(e,t,n){function i(){}function r(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function a(){}function o(){return!1}a.prototype=new n,a.prototype.bindHandles=function(){this._bindHandles(!0)},a.prototype.unbindHandles=function(){this._bindHandles(!1)};var s=e.navigator;a.prototype._bindHandles=function(e){e=void 0===e?!0:!!e;var n;n=s.pointerEnabled?function(t){t.style.touchAction=e?"none":""}:s.msPointerEnabled?function(t){t.style.msTouchAction=e?"none":""}:function(){e&&d(o)};for(var i=e?"bind":"unbind",r=0,a=this.handles.length;a>r;r++){var o=this.handles[r];this._bindStartEvent(o,e),n(o),t[i](o,"click",this)}};var l="attachEvent"in document.documentElement,d=l?function(e){"IMG"==e.nodeName&&(e.ondragstart=o);for(var t=e.querySelectorAll("img"),n=0,i=t.length;i>n;n++){var r=t[n];r.ondragstart=o}}:i;a.prototype.pointerDown=function(n,i){if("INPUT"==n.target.nodeName&&"range"==n.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(n,i);var r=document.activeElement;r&&r.blur&&r.blur(),this._bindPostStartEvents(n),this.pointerDownScroll=a.getScrollPosition(),t.bind(e,"scroll",this),this.emitEvent("pointerDown",[n,i])},a.prototype._dragPointerDown=function(e,t){this.pointerDownPoint=n.getPointerPoint(t);var i="touchstart"==e.type,a=e.target.nodeName;i||"SELECT"==a||r(e)},a.prototype.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,n]),this._dragMove(e,t,n)},a.prototype._dragPointerMove=function(e,t){var i=n.getPointerPoint(t),r={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(r)&&this._dragStart(e,t),r},a.prototype.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},a.prototype.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},a.prototype._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},a.prototype.pointerDone=function(){t.unbind(e,"scroll",this)},a.prototype._dragStart=function(e,t){this.isDragging=!0,this.dragStartPoint=a.getPointerPoint(t),this.isPreventingClicks=!0,this.dragStart(e,t)},a.prototype.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},a.prototype._dragMove=function(e,t,n){this.isDragging&&this.dragMove(e,t,n)},a.prototype.dragMove=function(e,t,n){r(e),this.emitEvent("dragMove",[e,t,n])},a.prototype._dragEnd=function(e,t){this.isDragging=!1;var n=this;setTimeout(function(){delete n.isPreventingClicks}),this.dragEnd(e,t)},a.prototype.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},a.prototype.pointerDone=function(){t.unbind(e,"scroll",this),delete this.pointerDownScroll},a.prototype.onclick=function(e){this.isPreventingClicks&&r(e)},a.prototype._staticClick=function(e,t){if(!this.isIgnoringMouseUp||"mouseup"!=e.type){var n=e.target.nodeName;if(("INPUT"==n||"TEXTAREA"==n)&&e.target.focus(),this.staticClick(e,t),"mouseup"!=e.type){this.isIgnoringMouseUp=!0;var i=this;setTimeout(function(){delete i.isIgnoringMouseUp},400)}}},a.prototype.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},a.prototype.onscroll=function(){var e=a.getScrollPosition(),t=this.pointerDownScroll.x-e.x,n=this.pointerDownScroll.y-e.y;(Math.abs(t)>3||Math.abs(n)>3)&&this._pointerDone()},a.getPointerPoint=function(e){return{x:void 0!==e.pageX?e.pageX:e.clientX,y:void 0!==e.pageY?e.pageY:e.clientY}};var u=void 0!==e.pageYOffset;return a.getScrollPosition=function(){return{x:u?e.pageXOffset:document.body.scrollLeft,y:u?e.pageYOffset:document.body.scrollTop}},a.getPointerPoint=n.getPointerPoint,a}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/drag",["classie/classie","eventie/eventie","./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(n,i,r,a,o){return t(e,n,i,r,a,o)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("eventie"),require("./flickity"),require("unidragger"),require("fizzy-ui-utils")):e.Flickity=t(e,e.classie,e.eventie,e.Flickity,e.Unidragger,e.fizzyUIUtils)}(window,function(e,t,n,i,r,a){function o(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function s(t){var n=r.getPointerPoint(t);return n.y-e.pageYOffset}a.extend(i.defaults,{draggable:!0,touchVerticalScroll:!0}),i.createMethods.push("_createDrag"),a.extend(i.prototype,r.prototype),i.prototype._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag)},i.prototype.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(t.add(this.element,"is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},i.prototype.unbindDrag=function(){this.isDragBound&&(t.remove(this.element,"is-draggable"),this.unbindHandles(),delete this.isDragBound)},i.prototype._uiChangeDrag=function(){delete this.isFreeScrolling},i.prototype._childUIPointerDownDrag=function(e){o(e),this.pointerDownFocus(e)},i.prototype.pointerDown=function(i,a){if("INPUT"==i.target.nodeName&&"range"==i.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(i,a);var o=document.activeElement;o&&o.blur&&o!=this.element&&o!=document.body&&o.blur(),this.pointerDownFocus(i),this.dragX=this.x,t.add(this.viewport,"is-pointer-down"),this._bindPostStartEvents(i),this.pointerDownScroll=r.getScrollPosition(),n.bind(e,"scroll",this),this.dispatchEvent("pointerDown",i,[a])};var l={touchstart:!0,MSPointerDown:!0},d={INPUT:!0,SELECT:!0};i.prototype.pointerDownFocus=function(t){if(this.options.accessibility&&!l[t.type]&&!d[t.target.nodeName]){var n=e.pageYOffset;this.element.focus(),e.pageYOffset!=n&&e.scrollTo(e.pageXOffset,n)}},i.prototype.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.touchVerticalScrollMove(e,t,n),this._dragMove(e,t,n),this.dispatchEvent("pointerMove",e,[t,n])},i.prototype.hasDragStarted=function(e){return!this.isTouchScrolling&&Math.abs(e.x)>3},i.prototype.pointerUp=function(e,n){delete this.isTouchScrolling,t.remove(this.viewport,"is-pointer-down"),this.dispatchEvent("pointerUp",e,[n]),this._dragPointerUp(e,n)};var u={touchmove:!0,MSPointerMove:!0};return i.prototype.touchVerticalScrollMove=function(t,n,i){var r=this.options.touchVerticalScroll,a="withDrag"==r?!r:this.isDragging||!r;!a&&u[t.type]&&!this.isTouchScrolling&&Math.abs(i.y)>10&&(this.startScrollY=e.pageYOffset,this.pointerWindowStartY=s(n),this.isTouchScrolling=!0)},i.prototype.dragStart=function(e,t){this.dragStartPosition=this.x,this.startAnimation(),this.dispatchEvent("dragStart",e,[t])},i.prototype.dragMove=function(e,t,n){o(e),this.previousDragX=this.dragX;var i=this.options.rightToLeft?-1:1,r=this.dragStartPosition+n.x*i;if(!this.options.wrapAround&&this.cells.length){var a=Math.max(-this.cells[0].target,this.dragStartPosition);r=r>a?.5*(r+a):r;var s=Math.min(-this.getLastCell().target,this.dragStartPosition);r=s>r?.5*(r+s):r}this.dragX=r,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",e,[t,n])},i.prototype.dragEnd=function(e,t){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var i=this.getRestingPosition();this.isFreeScrolling=-i>this.cells[0].target&&-i<this.getLastCell().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.select(n),this.dispatchEvent("dragEnd",e,[t])},i.prototype.dragEndRestingSelect=function(){var e=this.getRestingPosition(),t=Math.abs(this.getCellDistance(-e,this.selectedIndex)),n=this._getClosestResting(e,t,1),i=this._getClosestResting(e,t,-1),r=n.distance<i.distance?n.index:i.index;return r},i.prototype._getClosestResting=function(e,t,n){for(var i=this.selectedIndex,r=1/0,a=this.options.contain&&!this.options.wrapAround?function(e,t){return t>=e}:function(e,t){return t>e};a(t,r)&&(i+=n,r=t,t=this.getCellDistance(-e,i),null!==t);)t=Math.abs(t);return{distance:r,index:i-n}},i.prototype.getCellDistance=function(e,t){var n=this.cells.length,i=this.options.wrapAround&&n>1,r=i?a.modulo(t,n):t,o=this.cells[r];if(!o)return null;var s=i?this.slideableWidth*Math.floor(t/n):0;return e-(o.target+s)},i.prototype.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var e=this.getCellDistance(-this.dragX,this.selectedIndex),t=this.previousDragX-this.dragX;return e>0&&t>0?1:0>e&&0>t?-1:0},i.prototype.staticClick=function(e,t){var n=this.getParentCell(e.target),i=n&&n.element,r=n&&a.indexOf(this.cells,n);this.dispatchEvent("staticClick",e,[t,i,r])},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("tap-listener/tap-listener",["unipointer/unipointer"],function(n){return t(e,n)}):"object"==typeof exports?module.exports=t(e,require("unipointer")):e.TapListener=t(e,e.Unipointer)}(window,function(e,t){function n(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function i(e){this.bindTap(e)}i.prototype=new t,i.prototype.bindTap=function(e){e&&(this.unbindTap(),this.tapElement=e,this._bindStartEvent(e,!0))},i.prototype.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)};var r=i.prototype.pointerDown;i.prototype.pointerDown=function(e){"touchstart"==e.type&&n(e),r.apply(this,arguments)};var a=void 0!==e.pageYOffset;return i.prototype.pointerUp=function(n,i){var r=t.getPointerPoint(i),o=this.tapElement.getBoundingClientRect(),s=a?e.pageXOffset:document.body.scrollLeft,l=a?e.pageYOffset:document.body.scrollTop,d=r.x>=o.left+s&&r.x<=o.right+s&&r.y>=o.top+l&&r.y<=o.bottom+l;d&&this.emitEvent("tap",[n,i])},i.prototype.destroy=function(){this.pointerDone(),this.unbindTap()},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/prev-next-button",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):t(e,e.eventie,e.Flickity,e.TapListener,e.fizzyUIUtils)}(window,function(e,t,n,i,r){function a(e,t){this.direction=e,this.parent=t,this._create()}function o(e){return"string"==typeof e?e:"M "+e.x0+",50 L "+e.x1+","+(e.y1+50)+" L "+e.x2+","+(e.y2+50)+" L "+e.x3+",50  L "+e.x2+","+(50-e.y2)+" L "+e.x1+","+(50-e.y1)+" Z"}var s="http://www.w3.org/2000/svg",l=function(){function e(){if(void 0!==t)return t;var e=document.createElement("div");return e.innerHTML="<svg/>",t=(e.firstChild&&e.firstChild.namespaceURI)==s}var t;return e}();return a.prototype=new i,a.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var e=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==e;var t=this.element=document.createElement("button");if(t.className="flickity-prev-next-button",t.className+=this.isPrevious?" previous":" next",t.setAttribute("type","button"),this.disable(),n.setUnselectable(t),l()){var i=this.createSVG();t.appendChild(i)}else this.setArrowText(),t.className+=" no-svg";var r=this;this.onCellSelect=function(){r.update()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(e,t){r.parent.childUIPointerDown(t)})},a.prototype.activate=function(){this.bindTap(this.element),t.bind(this.element,"click",this),this.parent.element.appendChild(this.element)},a.prototype.deactivate=function(){this.parent.element.removeChild(this.element),i.prototype.destroy.call(this),t.unbind(this.element,"click",this)},a.prototype.createSVG=function(){var e=document.createElementNS(s,"svg");e.setAttribute("viewBox","0 0 100 100");var t=document.createElementNS(s,"path"),n=o(this.parent.options.arrowShape);return t.setAttribute("d",n),t.setAttribute("class","arrow"),this.isLeft||t.setAttribute("transform","translate(100, 100) rotate(180) "),e.appendChild(t),e},a.prototype.setArrowText=function(){var e=this.parent.options,t=this.isLeft?e.leftArrowText:e.rightArrowText;r.setText(this.element,t)},a.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var e=this.isPrevious?"previous":"next";this.parent[e]()}},a.prototype.handleEvent=r.handleEvent,a.prototype.onclick=function(){var e=document.activeElement;e&&e==this.element&&this.onTap()},a.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},a.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},a.prototype.update=function(){var e=this.parent.cells;if(this.parent.options.wrapAround&&e.length>1)return void this.enable();var t=e.length?e.length-1:0,n=this.isPrevious?0:t,i=this.parent.selectedIndex==n?"disable":"enable";this[i]()},a.prototype.destroy=function(){this.deactivate()},r.extend(n.defaults,{prevNextButtons:!0,leftArrowText:"‹",rightArrowText:"›",arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),n.createMethods.push("_createPrevNextButtons"),n.prototype._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new a(-1,this),this.nextButton=new a(1,this),this.on("activate",this.activatePrevNextButtons))},n.prototype.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},n.prototype.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},n.PrevNextButton=a,n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/page-dots",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):t(e,e.eventie,e.Flickity,e.TapListener,e.fizzyUIUtils)}(window,function(e,t,n,i,r){function a(e){this.parent=e,this._create()}return a.prototype=new i,a.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",n.setUnselectable(this.holder),this.dots=[];var e=this;this.onCellSelect=function(){e.updateSelected()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(t,n){e.parent.childUIPointerDown(n)})},a.prototype.activate=function(){this.setDots(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},a.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),i.prototype.destroy.call(this)},a.prototype.setDots=function(){var e=this.parent.cells.length-this.dots.length;e>0?this.addDots(e):0>e&&this.removeDots(-e)},a.prototype.addDots=function(e){for(var t=document.createDocumentFragment(),n=[];e;){var i=document.createElement("li");i.className="dot",t.appendChild(i),n.push(i),e--}this.holder.appendChild(t),this.dots=this.dots.concat(n)},a.prototype.removeDots=function(e){for(var t=this.dots.splice(this.dots.length-e,e),n=0,i=t.length;i>n;n++){var r=t[n];this.holder.removeChild(r)}},a.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},a.prototype.onTap=function(e){var t=e.target;if("LI"==t.nodeName){this.parent.uiChange();var n=r.indexOf(this.dots,t);this.parent.select(n)}},a.prototype.destroy=function(){this.deactivate()},n.PageDots=a,r.extend(n.defaults,{pageDots:!0}),n.createMethods.push("_createPageDots"),n.prototype._createPageDots=function(){this.options.pageDots&&(this.pageDots=new a(this),this.on("activate",this.activatePageDots),this.on("cellAddedRemoved",this.onCellAddedRemovedPageDots),this.on("deactivate",this.deactivatePageDots))},n.prototype.activatePageDots=function(){this.pageDots.activate()},n.prototype.onCellAddedRemovedPageDots=function(){this.pageDots.setDots()},n.prototype.deactivatePageDots=function(){this.pageDots.deactivate()},n.PageDots=a,n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/player",["eventEmitter/EventEmitter","eventie/eventie","fizzy-ui-utils/utils","./flickity"],function(e,n,i,r){return t(e,n,i,r)}):"object"==typeof exports?module.exports=t(require("wolfy87-eventemitter"),require("eventie"),require("fizzy-ui-utils"),require("./flickity")):t(e.EventEmitter,e.eventie,e.fizzyUIUtils,e.Flickity)}(window,function(e,t,n,i){function r(e){if(this.isPlaying=!1,this.parent=e,o){var t=this;this.onVisibilityChange=function(){t.visibilityChange()}}}var a,o;return"hidden"in document?(a="hidden",o="visibilitychange"):"webkitHidden"in document&&(a="webkitHidden",o="webkitvisibilitychange"),r.prototype=new e,r.prototype.play=function(){this.isPlaying=!0,delete this.isPaused,o&&document.addEventListener(o,this.onVisibilityChange,!1),this.tick()},r.prototype.tick=function(){if(this.isPlaying&&!this.isPaused){this.tickTime=new Date;var e=this.parent.options.autoPlay;e="number"==typeof e?e:3e3;var t=this;this.timeout=setTimeout(function(){t.parent.next(!0),t.tick()},e)}},r.prototype.stop=function(){this.isPlaying=!1,delete this.isPaused,this.clear(),o&&document.removeEventListener(o,this.onVisibilityChange,!1)},r.prototype.clear=function(){clearTimeout(this.timeout)},r.prototype.pause=function(){this.isPlaying&&(this.isPaused=!0,this.clear())},r.prototype.unpause=function(){this.isPaused&&this.play()},r.prototype.visibilityChange=function(){var e=document[a];this[e?"pause":"unpause"]()},n.extend(i.defaults,{pauseAutoPlayOnHover:!0}),i.createMethods.push("_createPlayer"),i.prototype._createPlayer=function(){this.player=new r(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},i.prototype.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),t.bind(this.element,"mouseenter",this),this.isMouseenterBound=!0)},i.prototype.stopPlayer=function(){this.player.stop()},i.prototype.deactivatePlayer=function(){this.player.stop(),this.isMouseenterBound&&(t.unbind(this.element,"mouseenter",this),delete this.isMouseenterBound)},i.prototype.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),t.bind(this.element,"mouseleave",this))},i.prototype.onmouseleave=function(){this.player.unpause(),t.unbind(this.element,"mouseleave",this)},i.Player=r,i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/add-remove-cell",["./flickity","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("./flickity"),require("fizzy-ui-utils")):t(e,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n){function i(e){for(var t=document.createDocumentFragment(),n=0,i=e.length;i>n;n++){var r=e[n];t.appendChild(r.element)}return t}return t.prototype.insert=function(e,t){var n=this._makeCells(e);if(n&&n.length){var r=this.cells.length;t=void 0===t?r:t;var a=i(n),o=t==r;if(o)this.slider.appendChild(a);else{var s=this.cells[t].element;this.slider.insertBefore(a,s)}if(0===t)this.cells=n.concat(this.cells);else if(o)this.cells=this.cells.concat(n);else{var l=this.cells.splice(t,r-t);this.cells=this.cells.concat(n).concat(l)}this._sizeCells(n);var d=t>this.selectedIndex?0:n.length;this._cellAddedRemoved(t,d)}},t.prototype.append=function(e){this.insert(e,this.cells.length)},t.prototype.prepend=function(e){this.insert(e,0)},t.prototype.remove=function(e){var t,i,r,a=this.getCells(e),o=0;for(t=0,i=a.length;i>t;t++){r=a[t];var s=n.indexOf(this.cells,r)<this.selectedIndex;o-=s?1:0}for(t=0,i=a.length;i>t;t++)r=a[t],r.remove(),n.removeFrom(this.cells,r);a.length&&this._cellAddedRemoved(0,o)},t.prototype._cellAddedRemoved=function(e,t){t=t||0,this.selectedIndex+=t,this.selectedIndex=Math.max(0,Math.min(this.cells.length-1,this.selectedIndex)),this.emitEvent("cellAddedRemoved",[e,t]),this.cellChange(e,!0)},t.prototype.cellSizeChange=function(e){var t=this.getCell(e);if(t){t.getSize();var i=n.indexOf(this.cells,t);this.cellChange(i)}},t.prototype.cellChange=function(e,t){var n=this.slideableWidth;this._positionCells(e),this._getWrapShiftCells(),this.setGallerySize(),this.options.freeScroll?(this.x+=n-this.slideableWidth,this.positionSlider()):(t&&this.positionSliderAtSelected(),this.select(this.selectedIndex))},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/lazyload",["classie/classie","eventie/eventie","./flickity","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("eventie"),require("./flickity"),require("fizzy-ui-utils")):t(e,e.classie,e.eventie,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n,i,r){"use strict";function a(e){if("IMG"==e.nodeName&&e.getAttribute("data-flickity-lazyload"))return[e];var t=e.querySelectorAll("img[data-flickity-lazyload]");
return r.makeArray(t)}function o(e,t){this.img=e,this.flickity=t,this.load()}return i.createMethods.push("_createLazyload"),i.prototype._createLazyload=function(){this.on("cellSelect",this.lazyLoad)},i.prototype.lazyLoad=function(){var e=this.options.lazyLoad;if(e){for(var t="number"==typeof e?e:0,n=this.getAdjacentCellElements(t),i=[],r=0,s=n.length;s>r;r++){var l=n[r],d=a(l);i=i.concat(d)}for(r=0,s=i.length;s>r;r++){var u=i[r];new o(u,this)}}},o.prototype.handleEvent=r.handleEvent,o.prototype.load=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},o.prototype.onload=function(e){this.complete(e,"flickity-lazyloaded")},o.prototype.onerror=function(e){this.complete(e,"flickity-lazyerror")},o.prototype.complete=function(e,i){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this);var r=this.flickity.getParentCell(this.img),a=r&&r.element;this.flickity.cellSizeChange(a),t.add(this.img,i),this.flickity.dispatchEvent("lazyLoad",e,a)},i.LazyLoader=o,i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/index",["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],t):"object"==typeof exports&&(module.exports=t(require("./flickity"),require("./drag"),require("./prev-next-button"),require("./page-dots"),require("./player"),require("./add-remove-cell"),require("./lazyload")))}(window,function(e){return e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity-as-nav-for/as-nav-for",["classie/classie","flickity/js/index","fizzy-ui-utils/utils"],function(n,i,r){return t(e,n,i,r)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("flickity"),require("fizzy-ui-utils")):e.Flickity=t(e,e.classie,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n,i){return n.createMethods.push("_createAsNavFor"),n.prototype._createAsNavFor=function(){this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor);var e=this.options.asNavFor;if(e){var t=this;setTimeout(function(){t.setNavCompanion(e)})}},n.prototype.setNavCompanion=function(e){e=i.getQueryElement(e);var t=n.data(e);if(t&&t!=this){this.navCompanion=t;var r=this;this.onNavCompanionSelect=function(){r.navCompanionSelect()},t.on("cellSelect",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect()}},n.prototype.navCompanionSelect=function(){if(this.navCompanion){var e=this.navCompanion.selectedIndex;this.select(e),this.removeNavSelectedElement(),this.selectedIndex==e&&(this.navSelectedElement=this.cells[e].element,t.add(this.navSelectedElement,"is-nav-selected"))}},n.prototype.activateAsNavFor=function(){this.navCompanionSelect()},n.prototype.removeNavSelectedElement=function(){this.navSelectedElement&&(t.remove(this.navSelectedElement,"is-nav-selected"),delete this.navSelectedElement)},n.prototype.onNavStaticClick=function(e,t,n,i){"number"==typeof i&&this.navCompanion.select(i)},n.prototype.deactivateAsNavFor=function(){this.removeNavSelectedElement()},n.prototype.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("cellSelect",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.imagesLoaded=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(e,t){for(var n in t)e[n]=t[n];return e}function r(e){return"[object Array]"==c.call(e)}function a(e){var t=[];if(r(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);"string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=a(e),this.options=i({},this.options),"function"==typeof t?n=t:i(this.options,t),n&&this.on("always",n),this.getImages(),d&&(this.jqDeferred=new d.Deferred);var r=this;setTimeout(function(){r.check()})}function s(e){this.img=e}function l(e,t){this.url=e,this.element=t,this.img=new Image}var d=e.jQuery,u=e.console,c=Object.prototype.toString;o.prototype=new t,o.prototype.options={},o.prototype.getImages=function(){this.images=[];for(var e=0;e<this.elements.length;e++){var t=this.elements[e];this.addElementImages(t)}},o.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&h[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var a=e.querySelectorAll(this.options.background);for(i=0;i<a.length;i++){var o=a[i];this.addElementBackgroundImages(o)}}}};var h={1:!0,9:!0,11:!0};o.prototype.addElementBackgroundImages=function(e){for(var t=p(e),n=/url\(['"]*([^'"\)]+)['"]*\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[1];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}};var p=e.getComputedStyle||function(e){return e.currentStyle};return o.prototype.addImage=function(e){var t=new s(e);this.images.push(t)},o.prototype.addBackground=function(e,t){var n=new l(e,t);this.images.push(n)},o.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;if(this.progressedCount=0,this.hasAnyBroken=!1,!this.images.length)return void this.complete();for(var n=0;n<this.images.length;n++){var i=this.images[n];i.once("progress",e),i.check()}},o.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emit("progress",this,e,t),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&u&&u.log("progress: "+n,e,t)},o.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emit(e,this),this.emit("always",this),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},s.prototype=new t,s.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,n.bind(this.proxyImage,"load",this),n.bind(this.proxyImage,"error",this),n.bind(this.img,"load",this),n.bind(this.img,"error",this),void(this.proxyImage.src=this.img.src))},s.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.img,t)},s.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},s.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},s.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},s.prototype.unbindEvents=function(){n.unbind(this.proxyImage,"load",this),n.unbind(this.proxyImage,"error",this),n.unbind(this.img,"load",this),n.unbind(this.img,"error",this)},l.prototype=new s,l.prototype.check=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},l.prototype.unbindEvents=function(){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this)},l.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.element,t)},o.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(d=t,d.fn.imagesLoaded=function(e,t){var n=new o(this,e,t);return n.jqDeferred.promise(d(this))})},o.makeJQueryPlugin(),o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("flickity"),require("imagesloaded")):e.Flickity=t(e,e.Flickity,e.imagesLoaded)}(window,function(e,t,n){"use strict";return t.createMethods.push("_createImagesLoaded"),t.prototype._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},t.prototype.imagesLoaded=function(){function e(e,n){var i=t.getParentCell(n.img);t.cellSizeChange(i&&i.element),t.options.freeScroll||t.positionSliderAtSelected()}if(this.options.imagesLoaded){var t=this;n(this.slider).on("progress",e)}},t}),function(e){function t(){}function n(e){function n(t){t.prototype.option||(t.prototype.option=function(t){e.isPlainObject(t)&&(this.options=e.extend(!0,this.options,t))})}function r(t,n){e.fn[t]=function(r){if("string"==typeof r){for(var o=i.call(arguments,1),s=0,l=this.length;l>s;s++){var d=this[s],u=e.data(d,t);if(u)if(e.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,o);if(void 0!==c)return c}else a("no such method '"+r+"' for "+t+" instance");else a("cannot call methods on "+t+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=e.data(this,t);i?(i.option(r),i._init()):(i=new n(this,r),e.data(this,t,i))})}}if(e){var a="undefined"==typeof console?t:function(e){console.error(e)};return e.bridget=function(e,t){n(t),r(e,t)},e.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):e.jQuery)}(window),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):"object"==typeof exports?module.exports=a:e.eventie=a}(window),function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),-1!==i&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}.call(this),function(e){function t(e){if(e){if("string"==typeof i[e])return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var t,r=0,a=n.length;a>r;r++)if(t=n[r]+e,"string"==typeof i[t])return t}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return t}):"object"==typeof exports?module.exports=t:e.getStyleProperty=t}(window),function(e,t){function n(e){var t=parseFloat(e),n=-1===e.indexOf("%")&&!isNaN(t);return n&&t}function i(){}function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0,n=s.length;n>t;t++){var i=s[t];e[i]=0}return e}function a(t){function i(){if(!h){h=!0;var i=e.getComputedStyle;if(d=function(){var e=i?function(e){return i(e,null)}:function(e){return e.currentStyle};return function(t){var n=e(t);return n||o("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),u=t("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[u]="border-box";var a=document.body||document.documentElement;a.appendChild(r);var s=d(r);c=200===n(s.width),a.removeChild(r)}}}function a(e){if(i(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=d(e);if("none"===t.display)return r();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var o=a.isBorderBox=!(!u||!t[u]||"border-box"!==t[u]),h=0,p=s.length;p>h;h++){var m=s[h],f=t[m];f=l(e,f);var _=parseFloat(f);a[m]=isNaN(_)?0:_}var y=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,v=a.marginLeft+a.marginRight,M=a.marginTop+a.marginBottom,b=a.borderLeftWidth+a.borderRightWidth,L=a.borderTopWidth+a.borderBottomWidth,w=o&&c,D=n(t.width);D!==!1&&(a.width=D+(w?0:y+b));var T=n(t.height);return T!==!1&&(a.height=T+(w?0:g+L)),a.innerWidth=a.width-(y+b),a.innerHeight=a.height-(g+L),a.outerWidth=a.width+v,a.outerHeight=a.height+M,a}}function l(t,n){if(e.getComputedStyle||-1===n.indexOf("%"))return n;var i=t.style,r=i.left,a=t.runtimeStyle,o=a&&a.left;return o&&(a.left=t.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,o&&(a.left=o),n}var d,u,c,h=!1;return a}var o="undefined"==typeof console?i:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],a):"object"==typeof exports?module.exports=a(require("desandro-get-style-property")):e.getSize=a(e.getStyleProperty)}(window),function(e){function t(e){"function"==typeof e&&(t.isReady?e():o.push(e))}function n(e){var n="readystatechange"===e.type&&"complete"!==a.readyState;t.isReady||n||i()}function i(){t.isReady=!0;for(var e=0,n=o.length;n>e;e++){var i=o[e];i()}}function r(r){return"complete"===a.readyState?i():(r.bind(a,"DOMContentLoaded",n),r.bind(a,"readystatechange",n),r.bind(e,"load",n)),t}var a=e.document,o=[];t.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):e.docReady=r(e.eventie)}(window),function(e){"use strict";function t(e,t){return e[o](t)}function n(e){if(!e.parentNode){var t=document.createDocumentFragment();t.appendChild(e)}}function i(e,t){n(e);for(var i=e.parentNode.querySelectorAll(t),r=0,a=i.length;a>r;r++)if(i[r]===e)return!0;return!1}function r(e,i){return n(e),t(e,i)}var a,o=function(){if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0,i=t.length;i>n;n++){var r=t[n],a=r+"MatchesSelector";if(e[a])return a}}();if(o){var s=document.createElement("div"),l=t(s,"div");a=l?t:r}else a=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return a}):"object"==typeof exports?module.exports=a:window.matchesSelector=a}(Element.prototype),function(e,t){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("doc-ready"),require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.docReady,e.matchesSelector)}(window,function(e,t,n){var i={};i.extend=function(e,t){for(var n in t)e[n]=t[n];return e},i.modulo=function(e,t){return(e%t+t)%t};var r=Object.prototype.toString;i.isArray=function(e){return"[object Array]"==r.call(e)},i.makeArray=function(e){var t=[];if(i.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0,r=e.length;r>n;n++)t.push(e[n]);else t.push(e);return t},i.indexOf=Array.prototype.indexOf?function(e,t){return e.indexOf(t)}:function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n]===t)return n;return-1},i.removeFrom=function(e,t){var n=i.indexOf(e,t);-1!=n&&e.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(e){return e instanceof HTMLElement}:function(e){return e&&"object"==typeof e&&1==e.nodeType&&"string"==typeof e.nodeName},i.setText=function(){function e(e,n){t=t||(void 0!==document.documentElement.textContent?"textContent":"innerText"),e[t]=n}var t;return e}(),i.getParent=function(e,t){for(;e!=document.body;)if(e=e.parentNode,n(e,t))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,t){e=i.makeArray(e);for(var r=[],a=0,o=e.length;o>a;a++){var s=e[a];if(i.isElement(s))if(t){n(s,t)&&r.push(s);for(var l=s.querySelectorAll(t),d=0,u=l.length;u>d;d++)r.push(l[d])}else r.push(s)}return r},i.debounceMethod=function(e,t,n){var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];e&&clearTimeout(e);var t=arguments,a=this;this[r]=setTimeout(function(){i.apply(a,t),delete a[r]},n||100)}},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var a=e.console;return i.htmlInit=function(n,r){t(function(){for(var t=i.toDashed(r),o=document.querySelectorAll(".js-"+t),s="data-"+t+"-options",l=0,d=o.length;d>l;l++){var u,c=o[l],h=c.getAttribute(s);try{u=h&&JSON.parse(h)}catch(p){a&&a.error("Error parsing "+s+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+p);continue}var m=new n(c,u),f=e.jQuery;f&&f.data(c,r,m)}})},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(e.Outlayer={},e.Outlayer.Item=t(e,e.EventEmitter,e.getSize,e.getStyleProperty,e.fizzyUIUtils))}(window,function(e,t,n,i,r){"use strict";function a(e){for(var t in e)return!1;return t=null,!0}function o(e,t){e&&(this.element=e,this.layout=t,this.position={x:0,y:0},this._create())}function s(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}var l=e.getComputedStyle,d=l?function(e){return l(e,null)}:function(e){return e.currentStyle},u=i("transition"),c=i("transform"),h=u&&c,p=!!i("perspective"),m={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[u],f=["transform","transition","transitionDuration","transitionProperty"],_=function(){for(var e={},t=0,n=f.length;n>t;t++){var r=f[t],a=i(r);a&&a!==r&&(e[r]=a)}return e}();r.extend(o.prototype,t.prototype),o.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.getSize=function(){this.size=n(this.element)},o.prototype.css=function(e){var t=this.element.style;for(var n in e){var i=_[n]||n;t[i]=e[n]}},o.prototype.getPosition=function(){var e=d(this.element),t=this.layout.options,n=t.isOriginLeft,i=t.isOriginTop,r=e[n?"left":"right"],a=e[i?"top":"bottom"],o=this.layout.size,s=-1!=r.indexOf("%")?parseFloat(r)/100*o.width:parseInt(r,10),l=-1!=a.indexOf("%")?parseFloat(a)/100*o.height:parseInt(a,10);s=isNaN(s)?0:s,l=isNaN(l)?0:l,s-=n?o.paddingLeft:o.paddingRight,l-=i?o.paddingTop:o.paddingBottom,this.position.x=s,this.position.y=l},o.prototype.layoutPosition=function(){var e=this.layout.size,t=this.layout.options,n={},i=t.isOriginLeft?"paddingLeft":"paddingRight",r=t.isOriginLeft?"left":"right",a=t.isOriginLeft?"right":"left",o=this.position.x+e[i];n[r]=this.getXValue(o),n[a]="";var s=t.isOriginTop?"paddingTop":"paddingBottom",l=t.isOriginTop?"top":"bottom",d=t.isOriginTop?"bottom":"top",u=this.position.y+e[s];n[l]=this.getYValue(u),n[d]="",this.css(n),this.emitEvent("layout",[this])},o.prototype.getXValue=function(e){var t=this.layout.options;return t.percentPosition&&!t.isHorizontal?e/this.layout.size.width*100+"%":e+"px"},o.prototype.getYValue=function(e){var t=this.layout.options;return t.percentPosition&&t.isHorizontal?e/this.layout.size.height*100+"%":e+"px"},o.prototype._transitionTo=function(e,t){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(e,10),a=parseInt(t,10),o=r===this.position.x&&a===this.position.y;if(this.setPosition(e,t),o&&!this.isTransitioning)return void this.layoutPosition();var s=e-n,l=t-i,d={};d.transform=this.getTranslate(s,l),this.transition({to:d,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},o.prototype.getTranslate=function(e,t){var n=this.layout.options;return e=n.isOriginLeft?e:-e,t=n.isOriginTop?t:-t,p?"translate3d("+e+"px, "+t+"px, 0)":"translate("+e+"px, "+t+"px)"},o.prototype.goTo=function(e,t){this.setPosition(e,t),this.layoutPosition()},o.prototype.moveTo=h?o.prototype._transitionTo:o.prototype.goTo,o.prototype.setPosition=function(e,t){this.position.x=parseInt(e,10),this.position.y=parseInt(t,10)},o.prototype._nonTransition=function(e){this.css(e.to),e.isCleaning&&this._removeStyles(e.to);for(var t in e.onTransitionEnd)e.onTransitionEnd[t].call(this)},o.prototype._transition=function(e){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(e);var t=this._transn;for(var n in e.onTransitionEnd)t.onEnd[n]=e.onTransitionEnd[n];for(n in e.to)t.ingProperties[n]=!0,e.isCleaning&&(t.clean[n]=!0);if(e.from){this.css(e.from);var i=this.element.offsetHeight;i=null}this.enableTransition(e.to),this.css(e.to),this.isTransitioning=!0};var y="opacity,"+s(_.transform||"transform");o.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:y,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(m,this,!1))},o.prototype.transition=o.prototype[u?"_transition":"_nonTransition"],o.prototype.onwebkitTransitionEnd=function(e){this.ontransitionend(e)},o.prototype.onotransitionend=function(e){this.ontransitionend(e)};var g={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};o.prototype.ontransitionend=function(e){if(e.target===this.element){var t=this._transn,n=g[e.propertyName]||e.propertyName;if(delete t.ingProperties[n],a(t.ingProperties)&&this.disableTransition(),n in t.clean&&(this.element.style[e.propertyName]="",delete t.clean[n]),n in t.onEnd){var i=t.onEnd[n];i.call(this),delete t.onEnd[n]}this.emitEvent("transitionEnd",[this])}},o.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(m,this,!1),this.isTransitioning=!1},o.prototype._removeStyles=function(e){var t={};for(var n in e)t[n]="";this.css(t)};var v={transitionProperty:"",transitionDuration:""};return o.prototype.removeTransitionStyles=function(){this.css(v)},o.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},o.prototype.remove=function(){if(!u||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var e=this;this.once("transitionEnd",function(){e.removeElem()}),this.hide()},o.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var e=this.layout.options,t={},n=this.getHideRevealTransitionEndProperty("visibleStyle");t[n]=this.onRevealTransitionEnd,this.transition({from:e.hiddenStyle,to:e.visibleStyle,isCleaning:!0,onTransitionEnd:t})},o.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},o.prototype.getHideRevealTransitionEndProperty=function(e){var t=this.layout.options[e];if(t.opacity)return"opacity";for(var n in t)return n},o.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var e=this.layout.options,t={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");t[n]=this.onHideTransitionEnd,this.transition({from:e.visibleStyle,to:e.hiddenStyle,isCleaning:!0,onTransitionEnd:t})},o.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},o.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,a,o){return t(e,n,i,r,a,o)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):e.Outlayer=t(e,e.eventie,e.EventEmitter,e.getSize,e.fizzyUIUtils,e.Outlayer.Item)}(window,function(e,t,n,i,r,a){"use strict";function o(e,t){var n=r.getQueryElement(e);if(!n)return void(s&&s.error("Bad element for "+this.constructor.namespace+": "+(n||e)));this.element=n,l&&(this.$element=l(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(t);var i=++u;this.element.outlayerGUID=i,c[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var s=e.console,l=e.jQuery,d=function(){},u=0,c={};return o.namespace="outlayer",o.Item=a,o.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(o.prototype,n.prototype),o.prototype.option=function(e){r.extend(this.options,e)},o.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},o.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},o.prototype._itemize=function(e){for(var t=this._filterFindItemElements(e),n=this.constructor.Item,i=[],r=0,a=t.length;a>r;r++){var o=t[r],s=new n(o,this);i.push(s)}return i},o.prototype._filterFindItemElements=function(e){return r.filterFindElements(e,this.options.itemSelector)},o.prototype.getItemElements=function(){for(var e=[],t=0,n=this.items.length;n>t;t++)e.push(this.items[t].element);return e},o.prototype.layout=function(){this._resetLayout(),this._manageStamps();var e=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},o.prototype._init=o.prototype.layout,o.prototype._resetLayout=function(){this.getSize()},o.prototype.getSize=function(){this.size=i(this.element)},o.prototype._getMeasurement=function(e,t){var n,a=this.options[e];a?("string"==typeof a?n=this.element.querySelector(a):r.isElement(a)&&(n=a),this[e]=n?i(n)[t]:a):this[e]=0},o.prototype.layoutItems=function(e,t){e=this._getItemsForLayout(e),this._layoutItems(e,t),this._postLayout()},o.prototype._getItemsForLayout=function(e){for(var t=[],n=0,i=e.length;i>n;n++){var r=e[n];r.isIgnored||t.push(r)}return t},o.prototype._layoutItems=function(e,t){if(this._emitCompleteOnItems("layout",e),e&&e.length){for(var n=[],i=0,r=e.length;r>i;i++){var a=e[i],o=this._getItemLayoutPosition(a);o.item=a,o.isInstant=t||a.isLayoutInstant,n.push(o)}this._processLayoutQueue(n)}},o.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},o.prototype._processLayoutQueue=function(e){for(var t=0,n=e.length;n>t;t++){var i=e[t];this._positionItem(i.item,i.x,i.y,i.isInstant)}},o.prototype._positionItem=function(e,t,n,i){i?e.goTo(t,n):e.moveTo(t,n)},o.prototype._postLayout=function(){this.resizeContainer()},o.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},o.prototype._getContainerSize=d,o.prototype._setContainerMeasure=function(e,t){if(void 0!==e){var n=this.size;n.isBorderBox&&(e+=t?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),e=Math.max(e,0),this.element.style[t?"width":"height"]=e+"px"}},o.prototype._emitCompleteOnItems=function(e,t){function n(){r.dispatchEvent(e+"Complete",null,[t])}function i(){o++,o===a&&n()}var r=this,a=t.length;if(!t||!a)return void n();for(var o=0,s=0,l=t.length;l>s;s++){var d=t[s];d.once(e,i)}},o.prototype.dispatchEvent=function(e,t,n){var i=t?[t].concat(n):n;if(this.emitEvent(e,i),l)if(this.$element=this.$element||l(this.element),t){var r=l.Event(t);r.type=e,this.$element.trigger(r,n)}else this.$element.trigger(e,n)},o.prototype.ignore=function(e){var t=this.getItem(e);t&&(t.isIgnored=!0)},o.prototype.unignore=function(e){var t=this.getItem(e);t&&delete t.isIgnored},o.prototype.stamp=function(e){if(e=this._find(e)){this.stamps=this.stamps.concat(e);for(var t=0,n=e.length;n>t;t++){var i=e[t];this.ignore(i)}}},o.prototype.unstamp=function(e){if(e=this._find(e))for(var t=0,n=e.length;n>t;t++){var i=e[t];r.removeFrom(this.stamps,i),this.unignore(i)}},o.prototype._find=function(e){return e?("string"==typeof e&&(e=this.element.querySelectorAll(e)),e=r.makeArray(e)):void 0},o.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var e=0,t=this.stamps.length;t>e;e++){var n=this.stamps[e];this._manageStamp(n)}}},o.prototype._getBoundingRect=function(){var e=this.element.getBoundingClientRect(),t=this.size;this._boundingRect={left:e.left+t.paddingLeft+t.borderLeftWidth,top:e.top+t.paddingTop+t.borderTopWidth,right:e.right-(t.paddingRight+t.borderRightWidth),bottom:e.bottom-(t.paddingBottom+t.borderBottomWidth)}},o.prototype._manageStamp=d,
o.prototype._getElementOffset=function(e){var t=e.getBoundingClientRect(),n=this._boundingRect,r=i(e),a={left:t.left-n.left-r.marginLeft,top:t.top-n.top-r.marginTop,right:n.right-t.right-r.marginRight,bottom:n.bottom-t.bottom-r.marginBottom};return a},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.bindResize=function(){this.isResizeBound||(t.bind(e,"resize",this),this.isResizeBound=!0)},o.prototype.unbindResize=function(){this.isResizeBound&&t.unbind(e,"resize",this),this.isResizeBound=!1},o.prototype.onresize=function(){function e(){t.resize(),delete t.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var t=this;this.resizeTimeout=setTimeout(e,100)},o.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},o.prototype.needsResizeLayout=function(){var e=i(this.element),t=this.size&&e;return t&&e.innerWidth!==this.size.innerWidth},o.prototype.addItems=function(e){var t=this._itemize(e);return t.length&&(this.items=this.items.concat(t)),t},o.prototype.appended=function(e){var t=this.addItems(e);t.length&&(this.layoutItems(t,!0),this.reveal(t))},o.prototype.prepended=function(e){var t=this._itemize(e);if(t.length){var n=this.items.slice(0);this.items=t.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(t,!0),this.reveal(t),this.layoutItems(n)}},o.prototype.reveal=function(e){this._emitCompleteOnItems("reveal",e);for(var t=e&&e.length,n=0;t&&t>n;n++){var i=e[n];i.reveal()}},o.prototype.hide=function(e){this._emitCompleteOnItems("hide",e);for(var t=e&&e.length,n=0;t&&t>n;n++){var i=e[n];i.hide()}},o.prototype.revealItemElements=function(e){var t=this.getItems(e);this.reveal(t)},o.prototype.hideItemElements=function(e){var t=this.getItems(e);this.hide(t)},o.prototype.getItem=function(e){for(var t=0,n=this.items.length;n>t;t++){var i=this.items[t];if(i.element===e)return i}},o.prototype.getItems=function(e){e=r.makeArray(e);for(var t=[],n=0,i=e.length;i>n;n++){var a=e[n],o=this.getItem(a);o&&t.push(o)}return t},o.prototype.remove=function(e){var t=this.getItems(e);if(this._emitCompleteOnItems("remove",t),t&&t.length)for(var n=0,i=t.length;i>n;n++){var a=t[n];a.remove(),r.removeFrom(this.items,a)}},o.prototype.destroy=function(){var e=this.element.style;e.height="",e.position="",e.width="";for(var t=0,n=this.items.length;n>t;t++){var i=this.items[t];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete c[r],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},o.data=function(e){e=r.getQueryElement(e);var t=e&&e.outlayerGUID;return t&&c[t]},o.create=function(e,t){function n(){o.apply(this,arguments)}return Object.create?n.prototype=Object.create(o.prototype):r.extend(n.prototype,o.prototype),n.prototype.constructor=n,n.defaults=r.extend({},o.defaults),r.extend(n.defaults,t),n.prototype.settings={},n.namespace=e,n.data=o.data,n.Item=function(){a.apply(this,arguments)},n.Item.prototype=new a,r.htmlInit(n,e),l&&l.bridget&&l.bridget(e,n),n},o.Item=a,o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],t):"object"==typeof exports?module.exports=t(require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.Item=t(e.Outlayer))}(window,function(e){"use strict";function t(){e.Item.apply(this,arguments)}t.prototype=new e.Item,t.prototype._create=function(){this.id=this.layout.itemGUID++,e.Item.prototype._create.call(this),this.sortData={}},t.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var e=this.layout.options.getSortData,t=this.layout._sorters;for(var n in e){var i=t[n];this.sortData[n]=i(this.element,this)}}};var n=t.prototype.destroy;return t.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],t):"object"==typeof exports?module.exports=t(require("get-size"),require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.LayoutMode=t(e.getSize,e.Outlayer))}(window,function(e,t){"use strict";function n(e){this.isotope=e,e&&(this.options=e.options[this.namespace],this.element=e.element,this.items=e.filteredItems,this.size=e.size)}return function(){function e(e){return function(){return t.prototype[e].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,a=i.length;a>r;r++){var o=i[r];n.prototype[o]=e(o)}}(),n.prototype.needsVerticalResizeLayout=function(){var t=e(this.isotope.element),n=this.isotope.size&&t;return n&&t.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(e,t){var n=e+t,i="outer"+t;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+t]}},n.prototype.getFirstItemSize=function(){var t=this.isotope.filteredItems[0];return t&&t.element&&e(t.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(e,t){function i(){n.apply(this,arguments)}return i.prototype=new n,t&&(i.options=t),i.prototype.namespace=e,n.modes[e]=i,i},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],t):"object"==typeof exports?module.exports=t(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):e.Masonry=t(e.Outlayer,e.getSize,e.fizzyUIUtils)}(window,function(e,t,n){var i=e.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var e=this.cols;for(this.colYs=[];e--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var e=this.items[0],n=e&&e.element;this.columnWidth=n&&t(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,a=r/i,o=i-r%i,s=o&&1>o?"round":"floor";a=Math[s](a),this.cols=Math.max(a,1)},i.prototype.getContainerWidth=function(){var e=this.options.isFitWidth?this.element.parentNode:this.element,n=t(e);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth%this.columnWidth,i=t&&1>t?"round":"ceil",r=Math[i](e.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var a=this._getColGroup(r),o=Math.min.apply(Math,a),s=n.indexOf(a,o),l={x:this.columnWidth*s,y:o},d=o+e.size.outerHeight,u=this.cols+1-a.length,c=0;u>c;c++)this.colYs[s+c]=d;return l},i.prototype._getColGroup=function(e){if(2>e)return this.colYs;for(var t=[],n=this.cols+1-e,i=0;n>i;i++){var r=this.colYs.slice(i,i+e);t[i]=Math.max.apply(Math,r)}return t},i.prototype._manageStamp=function(e){var n=t(e),i=this._getElementOffset(e),r=this.options.isOriginLeft?i.left:i.right,a=r+n.outerWidth,o=Math.floor(r/this.columnWidth);o=Math.max(0,o);var s=Math.floor(a/this.columnWidth);s-=a%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var l=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,d=o;s>=d;d++)this.colYs[d]=Math.max(l,this.colYs[d])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var e={height:this.maxY};return this.options.isFitWidth&&(e.width=this._getContainerFitWidth()),e},i.prototype._getContainerFitWidth=function(){for(var e=0,t=this.cols;--t&&0===this.colYs[t];)e++;return(this.cols-e)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var e=this.containerWidth;return this.getContainerWidth(),e!==this.containerWidth},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],t):"object"==typeof exports?module.exports=t(require("../layout-mode"),require("masonry-layout")):t(e.Isotope.LayoutMode,e.Masonry)}(window,function(e,t){"use strict";function n(e,t){for(var n in t)e[n]=t[n];return e}var i=e.create("masonry"),r=i.prototype._getElementOffset,a=i.prototype.layout,o=i.prototype._getMeasurement;n(i.prototype,t.prototype),i.prototype._getElementOffset=r,i.prototype.layout=a,i.prototype._getMeasurement=o;var s=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var l=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,l.apply(this,arguments)},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("fitRows");return t.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},t.prototype._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&t+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+e.size.outerHeight),this.x+=t,i},t.prototype._getContainerSize=function(){return{height:this.maxY}},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("vertical",{horizontalAlignment:0});return t.prototype._resetLayout=function(){this.y=0},t.prototype._getItemLayoutPosition=function(e){e.getSize();var t=(this.isotope.size.innerWidth-e.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=e.size.outerHeight,{x:t,y:n}},t.prototype._getContainerSize=function(){return{height:this.y}},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,a,o,s){return t(e,n,i,r,a,o,s)}):"object"==typeof exports?module.exports=t(e,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):e.Isotope=t(e,e.Outlayer,e.getSize,e.matchesSelector,e.fizzyUIUtils,e.Isotope.Item,e.Isotope.LayoutMode)}(window,function(e,t,n,i,r,a,o){function s(e,t){return function(n,i){for(var r=0,a=e.length;a>r;r++){var o=e[r],s=n.sortData[o],l=i.sortData[o];if(s>l||l>s){var d=void 0!==t[o]?t[o]:t,u=d?1:-1;return(s>l?1:-1)*u}}return 0}}var l=e.jQuery,d=String.prototype.trim?function(e){return e.trim()}:function(e){return e.replace(/^\s+|\s+$/g,"")},u=document.documentElement,c=u.textContent?function(e){return e.textContent}:function(e){return e.innerText},h=t.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=a,h.LayoutMode=o,h.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),t.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var e in o.modes)this._initLayoutMode(e)},h.prototype.reloadItems=function(){this.itemGUID=0,t.prototype.reloadItems.call(this)},h.prototype._itemize=function(){for(var e=t.prototype._itemize.apply(this,arguments),n=0,i=e.length;i>n;n++){var r=e[n];r.id=this.itemGUID++}return this._updateItemsSortData(e),e},h.prototype._initLayoutMode=function(e){var t=o.modes[e],n=this.options[e]||{};this.options[e]=t.options?r.extend(t.options,n):n,this.modes[e]=new t(this)},h.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},h.prototype._layout=function(){var e=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,e),this._isLayoutInited=!0},h.prototype.arrange=function(e){function t(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(e),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(t):t(),this._sort(),this._layout()},h.prototype._init=h.prototype.arrange,h.prototype._getIsInstant=function(){var e=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=e,e},h.prototype._bindArrangeComplete=function(){function e(){t&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var t,n,i,r=this;this.once("layoutComplete",function(){t=!0,e()}),this.once("hideComplete",function(){n=!0,e()}),this.once("revealComplete",function(){i=!0,e()})},h.prototype._filter=function(e){var t=this.options.filter;t=t||"*";for(var n=[],i=[],r=[],a=this._getFilterTest(t),o=0,s=e.length;s>o;o++){var l=e[o];if(!l.isIgnored){var d=a(l);d&&n.push(l),d&&l.isHidden?i.push(l):d||l.isHidden||r.push(l)}}return{matches:n,needReveal:i,needHide:r}},h.prototype._getFilterTest=function(e){return l&&this.options.isJQueryFiltering?function(t){return l(t.element).is(e)}:"function"==typeof e?function(t){return e(t.element)}:function(t){return i(t.element,e)}},h.prototype.updateSortData=function(e){var t;e?(e=r.makeArray(e),t=this.getItems(e)):t=this.items,this._getSorters(),this._updateItemsSortData(t)},h.prototype._getSorters=function(){var e=this.options.getSortData;for(var t in e){var n=e[t];this._sorters[t]=p(n)}},h.prototype._updateItemsSortData=function(e){for(var t=e&&e.length,n=0;t&&t>n;n++){var i=e[n];i.updateSortData()}};var p=function(){function e(e){if("string"!=typeof e)return e;var n=d(e).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),a=r&&r[1],o=t(a,i),s=h.sortDataParsers[n[1]];return e=s?function(e){return e&&s(o(e))}:function(e){return e&&o(e)}}function t(e,t){var n;return n=e?function(t){return t.getAttribute(e)}:function(e){var n=e.querySelector(t);return n&&c(n)}}return e}();h.sortDataParsers={parseInt:function(e){return parseInt(e,10)},parseFloat:function(e){return parseFloat(e)}},h.prototype._sort=function(){var e=this.options.sortBy;if(e){var t=[].concat.apply(e,this.sortHistory),n=s(t,this.options.sortAscending);this.filteredItems.sort(n),e!=this.sortHistory[0]&&this.sortHistory.unshift(e)}},h.prototype._mode=function(){var e=this.options.layoutMode,t=this.modes[e];if(!t)throw new Error("No layout mode: "+e);return t.options=this.options[e],t},h.prototype._resetLayout=function(){t.prototype._resetLayout.call(this),this._mode()._resetLayout()},h.prototype._getItemLayoutPosition=function(e){return this._mode()._getItemLayoutPosition(e)},h.prototype._manageStamp=function(e){this._mode()._manageStamp(e)},h.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},h.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.prototype.appended=function(e){var t=this.addItems(e);if(t.length){var n=this._filterRevealAdded(t);this.filteredItems=this.filteredItems.concat(n)}},h.prototype.prepended=function(e){var t=this._itemize(e);if(t.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(t);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=t.concat(this.items)}},h.prototype._filterRevealAdded=function(e){var t=this._filter(e);return this.hide(t.needHide),this.reveal(t.matches),this.layoutItems(t.matches,!0),t.matches},h.prototype.insert=function(e){var t=this.addItems(e);if(t.length){var n,i,r=t.length;for(n=0;r>n;n++)i=t[n],this.element.appendChild(i.element);var a=this._filter(t).matches;for(n=0;r>n;n++)t[n].isLayoutInstant=!0;for(this.arrange(),n=0;r>n;n++)delete t[n].isLayoutInstant;this.reveal(a)}};var m=h.prototype.remove;return h.prototype.remove=function(e){e=r.makeArray(e);var t=this.getItems(e);m.call(this,e);var n=t&&t.length;if(n)for(var i=0;n>i;i++){var a=t[i];r.removeFrom(this.filteredItems,a)}},h.prototype.shuffle=function(){for(var e=0,t=this.items.length;t>e;e++){var n=this.items[e];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h.prototype._noTransition=function(e){var t=this.options.transitionDuration;this.options.transitionDuration=0;var n=e.call(this);return this.options.transitionDuration=t,n},h.prototype.getFilteredItemElements=function(){for(var e=[],t=0,n=this.filteredItems.length;n>t;t++)e.push(this.filteredItems[t].element);return e},h}),function(e,t,n){function i(t,n){this.element=t,this.settings=e.extend({},r,n),this._defaults=r,this._name=a,this.init()}var r={label:"MENU",duplicate:!0,duration:200,easingOpen:"swing",easingClose:"swing",closedSymbol:"&#9658;",openedSymbol:"&#9660;",prependTo:"body",appendTo:"",parentTag:"a",closeOnClick:!1,allowParentLinks:!1,nestedParentLinks:!0,showChildren:!1,removeIds:!1,removeClasses:!1,removeStyles:!1,brand:"",init:function(){},beforeOpen:function(){},beforeClose:function(){},afterOpen:function(){},afterClose:function(){}},a="slicknav",o="slicknav";i.prototype.init=function(){var n,i,r=this,a=e(this.element),s=this.settings;if(s.duplicate?(r.mobileNav=a.clone(),r.mobileNav.removeAttr("id"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("id")})):(r.mobileNav=a,r.mobileNav.removeAttr("id"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("id")})),s.removeClasses&&(r.mobileNav.removeAttr("class"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("class")})),s.removeStyles&&(r.mobileNav.removeAttr("style"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("style")})),n=o+"_icon",""===s.label&&(n+=" "+o+"_no-text"),"a"==s.parentTag&&(s.parentTag='a href="#"'),r.mobileNav.attr("class",o+"_nav"),i=e('<div class="'+o+'_menu"></div>'),""!==s.brand){var l=e('<div class="'+o+'_brand">'+s.brand+"</div>");e(i).append(l)}r.btn=e(["<"+s.parentTag+' aria-haspopup="true" tabindex="0" class="'+o+"_btn "+o+'_collapsed">','<span class="'+o+'_menutxt">'+s.label+"</span>",'<span class="'+n+'">','<span class="'+o+'_icon-bar"></span>','<span class="'+o+'_icon-bar"></span>','<span class="'+o+'_icon-bar"></span>',"</span>","</"+s.parentTag+">"].join("")),e(i).append(r.btn),""!==s.appendTo?e(s.appendTo).append(i):e(s.prependTo).prepend(i),i.append(r.mobileNav);var d=r.mobileNav.find("li");e(d).each(function(){var t=e(this),n={};if(n.children=t.children("ul").attr("role","menu"),t.data("menu",n),n.children.length>0){var i=t.contents(),a=!1,l=[];e(i).each(function(){return e(this).is("ul")?!1:(l.push(this),void(e(this).is("a")&&(a=!0)))});var d=e("<"+s.parentTag+' role="menuitem" aria-haspopup="true" tabindex="-1" class="'+o+'_item"/>');if(s.allowParentLinks&&!s.nestedParentLinks&&a)e(l).wrapAll('<span class="'+o+"_parent-link "+o+'_row"/>').parent();else{var u=e(l).wrapAll(d).parent();u.addClass(o+"_row")}s.showChildren?t.addClass(o+"_open"):t.addClass(o+"_collapsed"),t.addClass(o+"_parent");var c=e('<span class="'+o+'_arrow">'+(s.showChildren?s.openedSymbol:s.closedSymbol)+"</span>");s.allowParentLinks&&!s.nestedParentLinks&&a&&(c=c.wrap(d).parent()),e(l).last().after(c)}else 0===t.children().length&&t.addClass(o+"_txtnode");t.children("a").attr("role","menuitem").click(function(t){s.closeOnClick&&!e(t.target).parent().closest("li").hasClass(o+"_parent")&&e(r.btn).click()}),s.closeOnClick&&s.allowParentLinks&&(t.children("a").children("a").click(function(t){e(r.btn).click()}),t.find("."+o+"_parent-link a:not(."+o+"_item)").click(function(t){e(r.btn).click()}))}),e(d).each(function(){var t=e(this).data("menu");s.showChildren||r._visibilityToggle(t.children,null,!1,null,!0)}),r._visibilityToggle(r.mobileNav,null,!1,"init",!0),r.mobileNav.attr("role","menu"),e(t).mousedown(function(){r._outlines(!1)}),e(t).keyup(function(){r._outlines(!0)}),e(r.btn).click(function(e){e.preventDefault(),r._menuToggle()}),r.mobileNav.on("click","."+o+"_item",function(t){t.preventDefault(),r._itemClick(e(this))}),e(r.btn).keydown(function(e){var t=e||event;13==t.keyCode&&(e.preventDefault(),r._menuToggle())}),r.mobileNav.on("keydown","."+o+"_item",function(t){var n=t||event;13==n.keyCode&&(t.preventDefault(),r._itemClick(e(t.target)))}),s.allowParentLinks&&s.nestedParentLinks&&e("."+o+"_item a").click(function(e){e.stopImmediatePropagation()})},i.prototype._menuToggle=function(e){var t=this,n=t.btn,i=t.mobileNav;n.hasClass(o+"_collapsed")?(n.removeClass(o+"_collapsed"),n.addClass(o+"_open")):(n.removeClass(o+"_open"),n.addClass(o+"_collapsed")),n.addClass(o+"_animating"),t._visibilityToggle(i,n.parent(),!0,n)},i.prototype._itemClick=function(e){var t=this,n=t.settings,i=e.data("menu");i||(i={},i.arrow=e.children("."+o+"_arrow"),i.ul=e.next("ul"),i.parent=e.parent(),i.parent.hasClass(o+"_parent-link")&&(i.parent=e.parent().parent(),i.ul=e.parent().next("ul")),e.data("menu",i)),i.parent.hasClass(o+"_collapsed")?(i.arrow.html(n.openedSymbol),i.parent.removeClass(o+"_collapsed"),i.parent.addClass(o+"_open"),i.parent.addClass(o+"_animating"),t._visibilityToggle(i.ul,i.parent,!0,e)):(i.arrow.html(n.closedSymbol),i.parent.addClass(o+"_collapsed"),i.parent.removeClass(o+"_open"),i.parent.addClass(o+"_animating"),t._visibilityToggle(i.ul,i.parent,!0,e))},i.prototype._visibilityToggle=function(t,n,i,r,a){var s=this,l=s.settings,d=s._getActionItems(t),u=0;i&&(u=l.duration),t.hasClass(o+"_hidden")?(t.removeClass(o+"_hidden"),a||l.beforeOpen(r),t.slideDown(u,l.easingOpen,function(){e(r).removeClass(o+"_animating"),e(n).removeClass(o+"_animating"),a||l.afterOpen(r)}),t.attr("aria-hidden","false"),d.attr("tabindex","0"),s._setVisAttr(t,!1)):(t.addClass(o+"_hidden"),a||l.beforeClose(r),t.slideUp(u,this.settings.easingClose,function(){t.attr("aria-hidden","true"),d.attr("tabindex","-1"),s._setVisAttr(t,!0),t.hide(),e(r).removeClass(o+"_animating"),e(n).removeClass(o+"_animating"),a?"init"==r&&l.init():l.afterClose(r)}))},i.prototype._setVisAttr=function(t,n){var i=this,r=t.children("li").children("ul").not("."+o+"_hidden");n?r.each(function(){var t=e(this);t.attr("aria-hidden","true");var r=i._getActionItems(t);r.attr("tabindex","-1"),i._setVisAttr(t,n)}):r.each(function(){var t=e(this);t.attr("aria-hidden","false");var r=i._getActionItems(t);r.attr("tabindex","0"),i._setVisAttr(t,n)})},i.prototype._getActionItems=function(e){var t=e.data("menu");if(!t){t={};var n=e.children("li"),i=n.find("a");t.links=i.add(n.find("."+o+"_item")),e.data("menu",t)}return t.links},i.prototype._outlines=function(t){t?e("."+o+"_item, ."+o+"_btn").css("outline",""):e("."+o+"_item, ."+o+"_btn").css("outline","none")},i.prototype.toggle=function(){var e=this;e._menuToggle()},i.prototype.open=function(){var e=this;e.btn.hasClass(o+"_collapsed")&&e._menuToggle()},i.prototype.close=function(){var e=this;e.btn.hasClass(o+"_open")&&e._menuToggle()},e.fn[a]=function(t){var n=arguments;if(void 0===t||"object"==typeof t)return this.each(function(){e.data(this,"plugin_"+a)||e.data(this,"plugin_"+a,new i(this,t))});if("string"==typeof t&&"_"!==t[0]&&"init"!==t){var r;return this.each(function(){var o=e.data(this,"plugin_"+a);o instanceof i&&"function"==typeof o[t]&&(r=o[t].apply(o,Array.prototype.slice.call(n,1)))}),void 0!==r?r:this}}}(jQuery,document,window),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(t){return e(t,window,document)}):"object"==typeof exports?module.exports=function(t,n){return t||(t=window),n||(n="undefined"!=typeof window?require("jquery"):require("jquery")(t)),e(n,t,t.document)}:e(jQuery,window,document)}(function(e,t,n,i){"use strict";function r(t){var n,i,a="a aa ai ao as b fn i m o s ",o={};e.each(t,function(e,s){n=e.match(/^([^A-Z]+?)([A-Z])/),n&&-1!==a.indexOf(n[1]+" ")&&(i=e.replace(n[0],n[2].toLowerCase()),o[i]=e,"o"===n[1]&&r(t[e]))}),t._hungarianMap=o}function a(t,n,o){t._hungarianMap||r(t);var s;e.each(n,function(r,l){s=t._hungarianMap[r],s===i||!o&&n[s]!==i||("o"===s.charAt(0)?(n[s]||(n[s]={}),e.extend(!0,n[s],n[r]),a(t[s],n[s],o)):n[s]=n[r])})}function o(e){var t=Be.defaults.oLanguage,n=e.sZeroRecords;!e.sEmptyTable&&n&&"No data available in table"===t.sEmptyTable&&Ie(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&n&&"Loading..."===t.sLoadingRecords&&Ie(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var i=e.sDecimal;i&&Re(i)}function s(e){_t(e,"ordering","bSort"),_t(e,"orderMulti","bSortMulti"),_t(e,"orderClasses","bSortClasses"),_t(e,"orderCellsTop","bSortCellsTop"),_t(e,"order","aaSorting"),_t(e,"orderFixed","aaSortingFixed"),_t(e,"paging","bPaginate"),_t(e,"pagingType","sPaginationType"),_t(e,"pageLength","iDisplayLength"),_t(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,i=t.length;i>n;n++)t[n]&&a(Be.models.oSearch,t[n])}function l(t){_t(t,"orderable","bSortable"),_t(t,"orderData","aDataSort"),_t(t,"orderSequence","asSorting"),_t(t,"orderDataType","sortDataType");var n=t.aDataSort;n&&!e.isArray(n)&&(t.aDataSort=[n])}function d(t){if(!Be.__browser){var n={};Be.__browser=n;var i=e("<div/>").css({position:"fixed",top:0,left:0,height:1,width:1,overflow:"hidden"}).append(e("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(e("<div/>").css({width:"100%",height:10}))).appendTo("body"),r=i.children(),a=r.children();n.barWidth=r[0].offsetWidth-r[0].clientWidth,n.bScrollOversize=100===a[0].offsetWidth&&100!==r[0].clientWidth,n.bScrollbarLeft=1!==Math.round(a.offset().left),n.bBounding=i[0].getBoundingClientRect().width?!0:!1,i.remove()}e.extend(t.oBrowser,Be.__browser),t.oScroll.iBarWidth=Be.__browser.barWidth}function u(e,t,n,r,a,o){var s,l=r,d=!1;for(n!==i&&(s=n,d=!0);l!==a;)e.hasOwnProperty(l)&&(s=d?t(s,e[l],l,e):e[l],d=!0,l+=o);return s}function c(t,i){var r=Be.defaults.column,a=t.aoColumns.length,o=e.extend({},Be.models.oColumn,r,{nTh:i?i:n.createElement("th"),sTitle:r.sTitle?r.sTitle:i?i.innerHTML:"",aDataSort:r.aDataSort?r.aDataSort:[a],mData:r.mData?r.mData:a,idx:a});t.aoColumns.push(o);var s=t.aoPreSearchCols;s[a]=e.extend({},Be.models.oSearch,s[a]),h(t,a,e(i).data())}function h(t,n,r){var o=t.aoColumns[n],s=t.oClasses,d=e(o.nTh);if(!o.sWidthOrig){o.sWidthOrig=d.attr("width")||null;var u=(d.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);u&&(o.sWidthOrig=u[1])}r!==i&&null!==r&&(l(r),a(Be.defaults.column,r),r.mDataProp===i||r.mData||(r.mData=r.mDataProp),r.sType&&(o._sManualType=r.sType),r.className&&!r.sClass&&(r.sClass=r.className),e.extend(o,r),Ie(o,r,"sWidth","sWidthOrig"),r.iDataSort!==i&&(o.aDataSort=[r.iDataSort]),Ie(o,r,"aDataSort"));var c=o.mData,h=Y(c),p=o.mRender?Y(o.mRender):null,m=function(e){return"string"==typeof e&&-1!==e.indexOf("@")};o._bAttrSrc=e.isPlainObject(c)&&(m(c.sort)||m(c.type)||m(c.filter)),o.fnGetData=function(e,t,n){var r=h(e,t,i,n);return p&&t?p(r,t,e,n):r},o.fnSetData=function(e,t,n){return k(c)(e,t,n)},"number"!=typeof c&&(t._rowReadObject=!0),t.oFeatures.bSort||(o.bSortable=!1,d.addClass(s.sSortableNone));var f=-1!==e.inArray("asc",o.asSorting),_=-1!==e.inArray("desc",o.asSorting);o.bSortable&&(f||_)?f&&!_?(o.sSortingClass=s.sSortableAsc,o.sSortingClassJUI=s.sSortJUIAscAllowed):!f&&_?(o.sSortingClass=s.sSortableDesc,o.sSortingClassJUI=s.sSortJUIDescAllowed):(o.sSortingClass=s.sSortable,o.sSortingClassJUI=s.sSortJUI):(o.sSortingClass=s.sSortableNone,o.sSortingClassJUI="")}function p(e){if(e.oFeatures.bAutoWidth!==!1){var t=e.aoColumns;ge(e);for(var n=0,i=t.length;i>n;n++)t[n].nTh.style.width=t[n].sWidth}var r=e.oScroll;(""!==r.sY||""!==r.sX)&&_e(e),Fe(e,null,"column-sizing",[e])}function m(e,t){var n=y(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function f(t,n){var i=y(t,"bVisible"),r=e.inArray(n,i);return-1!==r?r:null}function _(e){return y(e,"bVisible").length}function y(t,n){var i=[];return e.map(t.aoColumns,function(e,t){e[n]&&i.push(t)}),i}function g(e){var t,n,r,a,o,s,l,d,u,c=e.aoColumns,h=e.aoData,p=Be.ext.type.detect;for(t=0,n=c.length;n>t;t++)if(l=c[t],u=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(r=0,a=p.length;a>r;r++){for(o=0,s=h.length;s>o&&(u[o]===i&&(u[o]=D(e,o,t,"type")),d=p[r](u[o],e),d||r===p.length-1)&&"html"!==d;o++);if(d){l.sType=d;break}}l.sType||(l.sType="string")}}function v(t,n,r,a){var o,s,l,d,u,h,p,m=t.aoColumns;if(n)for(o=n.length-1;o>=0;o--){p=n[o];var f=p.targets!==i?p.targets:p.aTargets;for(e.isArray(f)||(f=[f]),l=0,d=f.length;d>l;l++)if("number"==typeof f[l]&&f[l]>=0){for(;m.length<=f[l];)c(t);a(f[l],p)}else if("number"==typeof f[l]&&f[l]<0)a(m.length+f[l],p);else if("string"==typeof f[l])for(u=0,h=m.length;h>u;u++)("_all"==f[l]||e(m[u].nTh).hasClass(f[l]))&&a(u,p)}if(r)for(o=0,s=r.length;s>o;o++)a(o,r[o])}function M(t,n,r,a){var o=t.aoData.length,s=e.extend(!0,{},Be.models.oRow,{src:r?"dom":"data",idx:o});s._aData=n,t.aoData.push(s);for(var l=t.aoColumns,d=0,u=l.length;u>d;d++)l[d].sType=null;t.aiDisplayMaster.push(o);var c=t.rowIdFn(n);return c!==i&&(t.aIds[c]=s),(r||!t.oFeatures.bDeferRender)&&j(t,o,r,a),o}function b(t,n){var i;return n instanceof e||(n=e(n)),n.map(function(e,n){return i=E(t,n),M(t,i.data,n,i.cells)})}function L(e,t){return t._DT_RowIndex!==i?t._DT_RowIndex:null}function w(t,n,i){return e.inArray(i,t.aoData[n].anCells)}function D(e,t,n,r){var a=e.iDraw,o=e.aoColumns[n],s=e.aoData[t]._aData,l=o.sDefaultContent,d=o.fnGetData(s,r,{settings:e,row:t,col:n});if(d===i)return e.iDrawError!=a&&null===l&&(je(e,0,"Requested unknown parameter "+("function"==typeof o.mData?"{function}":"'"+o.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=a),l;if(d!==s&&null!==d||null===l){if("function"==typeof d)return d.call(s)}else d=l;return null===d&&"display"==r?"":d}function T(e,t,n,i){var r=e.aoColumns[n],a=e.aoData[t]._aData;r.fnSetData(a,i,{settings:e,row:t,col:n})}function S(t){return e.map(t.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\./g,".")})}function Y(t){if(e.isPlainObject(t)){var n={};return e.each(t,function(e,t){t&&(n[e]=Y(t))}),function(e,t,r,a){var o=n[t]||n._;return o!==i?o(e,t,r,a):e}}if(null===t)return function(e){return e};if("function"==typeof t)return function(e,n,i,r){return t(e,n,i,r)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e,n){return e[t]};var r=function(t,n,a){var o,s,l,d;if(""!==a)for(var u=S(a),c=0,h=u.length;h>c;c++){if(o=u[c].match(yt),s=u[c].match(gt),o){if(u[c]=u[c].replace(yt,""),""!==u[c]&&(t=t[u[c]]),l=[],u.splice(0,c+1),d=u.join("."),e.isArray(t))for(var p=0,m=t.length;m>p;p++)l.push(r(t[p],n,d));var f=o[0].substring(1,o[0].length-1);t=""===f?l:l.join(f);break}if(s)u[c]=u[c].replace(gt,""),t=t[u[c]]();else{if(null===t||t[u[c]]===i)return i;t=t[u[c]]}}return t};return function(e,n){return r(e,n,t)}}function k(t){if(e.isPlainObject(t))return k(t._);if(null===t)return function(){};if("function"==typeof t)return function(e,n,i){t(e,"set",n,i)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e,n){e[t]=n};var n=function(t,r,a){for(var o,s,l,d,u,c=S(a),h=c[c.length-1],p=0,m=c.length-1;m>p;p++){if(s=c[p].match(yt),l=c[p].match(gt),s){if(c[p]=c[p].replace(yt,""),
t[c[p]]=[],o=c.slice(),o.splice(0,p+1),u=o.join("."),e.isArray(r))for(var f=0,_=r.length;_>f;f++)d={},n(d,r[f],u),t[c[p]].push(d);else t[c[p]]=r;return}l&&(c[p]=c[p].replace(gt,""),t=t[c[p]](r)),(null===t[c[p]]||t[c[p]]===i)&&(t[c[p]]={}),t=t[c[p]]}h.match(gt)?t=t[h.replace(gt,"")](r):t[h.replace(yt,"")]=r};return function(e,i){return n(e,i,t)}}function x(e){return ut(e.aoData,"_aData")}function C(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function H(e,t,n){for(var r=-1,a=0,o=e.length;o>a;a++)e[a]==t?r=a:e[a]>t&&e[a]--;-1!=r&&n===i&&e.splice(r,1)}function A(e,t,n,r){var a,o,s=e.aoData[t],l=function(n,i){for(;n.childNodes.length;)n.removeChild(n.firstChild);n.innerHTML=D(e,t,i,"display")};if("dom"!==n&&(n&&"auto"!==n||"dom"!==s.src)){var d=s.anCells;if(d)if(r!==i)l(d[r],r);else for(a=0,o=d.length;o>a;a++)l(d[a],a)}else s._aData=E(e,s,r,r===i?i:s._aData).data;s._aSortData=null,s._aFilterData=null;var u=e.aoColumns;if(r!==i)u[r].sType=null;else{for(a=0,o=u.length;o>a;a++)u[a].sType=null;I(e,s)}}function E(t,n,r,a){var o,s,l,d=[],u=n.firstChild,c=0,h=t.aoColumns,p=t._rowReadObject;a=a!==i?a:p?{}:[];var m=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(-1!==n){var i=e.substring(n+1),r=k(e);r(a,t.getAttribute(i))}}},f=function(t){if(r===i||r===c)if(s=h[c],l=e.trim(t.innerHTML),s&&s._bAttrSrc){var n=k(s.mData._);n(a,l),m(s.mData.sort,t),m(s.mData.type,t),m(s.mData.filter,t)}else p?(s._setter||(s._setter=k(s.mData)),s._setter(a,l)):a[c]=l;c++};if(u)for(;u;)o=u.nodeName.toUpperCase(),("TD"==o||"TH"==o)&&(f(u),d.push(u)),u=u.nextSibling;else{d=n.anCells;for(var _=0,y=d.length;y>_;_++)f(d[_])}var g=n.firstChild?n:n.nTr;if(g){var v=g.getAttribute("id");v&&k(t.rowId)(a,v)}return{data:a,cells:d}}function j(e,t,i,r){var a,o,s,l,d,u=e.aoData[t],c=u._aData,h=[];if(null===u.nTr){for(a=i||n.createElement("tr"),u.nTr=a,u.anCells=h,a._DT_RowIndex=t,I(e,u),l=0,d=e.aoColumns.length;d>l;l++)s=e.aoColumns[l],o=i?r[l]:n.createElement(s.sCellType),o._DT_CellIndex={row:t,column:l},h.push(o),(!i||s.mRender||s.mData!==l)&&(o.innerHTML=D(e,t,l,"display")),s.sClass&&(o.className+=" "+s.sClass),s.bVisible&&!i?a.appendChild(o):!s.bVisible&&i&&o.parentNode.removeChild(o),s.fnCreatedCell&&s.fnCreatedCell.call(e.oInstance,o,D(e,t,l),c,t,l);Fe(e,"aoRowCreatedCallback",null,[a,c,t])}u.nTr.setAttribute("role","row")}function I(t,n){var i=n.nTr,r=n._aData;if(i){var a=t.rowIdFn(r);if(a&&(i.id=a),r.DT_RowClass){var o=r.DT_RowClass.split(" ");n.__rowc=n.__rowc?ft(n.__rowc.concat(o)):o,e(i).removeClass(n.__rowc.join(" ")).addClass(r.DT_RowClass)}r.DT_RowAttr&&e(i).attr(r.DT_RowAttr),r.DT_RowData&&e(i).data(r.DT_RowData)}}function P(t){var n,i,r,a,o,s=t.nTHead,l=t.nTFoot,d=0===e("th, td",s).length,u=t.oClasses,c=t.aoColumns;for(d&&(a=e("<tr/>").appendTo(s)),n=0,i=c.length;i>n;n++)o=c[n],r=e(o.nTh).addClass(o.sClass),d&&r.appendTo(a),t.oFeatures.bSort&&(r.addClass(o.sSortingClass),o.bSortable!==!1&&(r.attr("tabindex",t.iTabIndex).attr("aria-controls",t.sTableId),ke(t,o.nTh,n))),o.sTitle!=r[0].innerHTML&&r.html(o.sTitle),$e(t,"header")(t,r,o,u);if(d&&$(t.aoHeader,s),e(s).find(">tr").attr("role","row"),e(s).find(">tr>th, >tr>td").addClass(u.sHeaderTH),e(l).find(">tr>th, >tr>td").addClass(u.sFooterTH),null!==l){var h=t.aoFooter[0];for(n=0,i=h.length;i>n;n++)o=c[n],o.nTf=h[n].cell,o.sClass&&e(o.nTf).addClass(o.sClass)}}function O(t,n,r){var a,o,s,l,d,u,c,h,p,m=[],f=[],_=t.aoColumns.length;if(n){for(r===i&&(r=!1),a=0,o=n.length;o>a;a++){for(m[a]=n[a].slice(),m[a].nTr=n[a].nTr,s=_-1;s>=0;s--)t.aoColumns[s].bVisible||r||m[a].splice(s,1);f.push([])}for(a=0,o=m.length;o>a;a++){if(c=m[a].nTr)for(;u=c.firstChild;)c.removeChild(u);for(s=0,l=m[a].length;l>s;s++)if(h=1,p=1,f[a][s]===i){for(c.appendChild(m[a][s].cell),f[a][s]=1;m[a+h]!==i&&m[a][s].cell==m[a+h][s].cell;)f[a+h][s]=1,h++;for(;m[a][s+p]!==i&&m[a][s].cell==m[a][s+p].cell;){for(d=0;h>d;d++)f[a+d][s+p]=1;p++}e(m[a][s].cell).attr("rowspan",h).attr("colspan",p)}}}}function z(t){var n=Fe(t,"aoPreDrawCallback","preDraw",[t]);if(-1!==e.inArray(!1,n))return void me(t,!1);var r=[],a=0,o=t.asStripeClasses,s=o.length,l=(t.aoOpenRows.length,t.oLanguage),d=t.iInitDisplayStart,u="ssp"==Ne(t),c=t.aiDisplay;t.bDrawing=!0,d!==i&&-1!==d&&(t._iDisplayStart=u?d:d>=t.fnRecordsDisplay()?0:d,t.iInitDisplayStart=-1);var h=t._iDisplayStart,p=t.fnDisplayEnd();if(t.bDeferLoading)t.bDeferLoading=!1,t.iDraw++,me(t,!1);else if(u){if(!t.bDestroying&&!R(t))return}else t.iDraw++;if(0!==c.length)for(var m=u?0:h,f=u?t.aoData.length:p,y=m;f>y;y++){var g=c[y],v=t.aoData[g];null===v.nTr&&j(t,g);var M=v.nTr;if(0!==s){var b=o[a%s];v._sRowStripe!=b&&(e(M).removeClass(v._sRowStripe).addClass(b),v._sRowStripe=b)}Fe(t,"aoRowCallback",null,[M,v._aData,a,y]),r.push(M),a++}else{var L=l.sZeroRecords;1==t.iDraw&&"ajax"==Ne(t)?L=l.sLoadingRecords:l.sEmptyTable&&0===t.fnRecordsTotal()&&(L=l.sEmptyTable),r[0]=e("<tr/>",{"class":s?o[0]:""}).append(e("<td />",{valign:"top",colSpan:_(t),"class":t.oClasses.sRowEmpty}).html(L))[0]}Fe(t,"aoHeaderCallback","header",[e(t.nTHead).children("tr")[0],x(t),h,p,c]),Fe(t,"aoFooterCallback","footer",[e(t.nTFoot).children("tr")[0],x(t),h,p,c]);var w=e(t.nTBody);w.children().detach(),w.append(e(r)),Fe(t,"aoDrawCallback","draw",[t]),t.bSorted=!1,t.bFiltered=!1,t.bDrawing=!1}function F(e,t){var n=e.oFeatures,i=n.bSort,r=n.bFilter;i&&Te(e),r?G(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),t!==!0&&(e._iDisplayStart=0),e._drawHold=t,z(e),e._drawHold=!1}function W(t){var n=t.oClasses,i=e(t.nTable),r=e("<div/>").insertBefore(i),a=t.oFeatures,o=e("<div/>",{id:t.sTableId+"_wrapper","class":n.sWrapper+(t.nTFoot?"":" "+n.sNoFooter)});t.nHolding=r[0],t.nTableWrapper=o[0],t.nTableReinsertBefore=t.nTable.nextSibling;for(var s,l,d,u,c,h,p=t.sDom.split(""),m=0;m<p.length;m++){if(s=null,l=p[m],"<"==l){if(d=e("<div/>")[0],u=p[m+1],"'"==u||'"'==u){for(c="",h=2;p[m+h]!=u;)c+=p[m+h],h++;if("H"==c?c=n.sJUIHeader:"F"==c&&(c=n.sJUIFooter),-1!=c.indexOf(".")){var f=c.split(".");d.id=f[0].substr(1,f[0].length-1),d.className=f[1]}else"#"==c.charAt(0)?d.id=c.substr(1,c.length-1):d.className=c;m+=h}o.append(d),o=e(d)}else if(">"==l)o=o.parent();else if("l"==l&&a.bPaginate&&a.bLengthChange)s=ue(t);else if("f"==l&&a.bFilter)s=V(t);else if("r"==l&&a.bProcessing)s=pe(t);else if("t"==l)s=fe(t);else if("i"==l&&a.bInfo)s=re(t);else if("p"==l&&a.bPaginate)s=ce(t);else if(0!==Be.ext.feature.length)for(var _=Be.ext.feature,y=0,g=_.length;g>y;y++)if(l==_[y].cFeature){s=_[y].fnInit(t);break}if(s){var v=t.aanFeatures;v[l]||(v[l]=[]),v[l].push(s),o.append(s)}}r.replaceWith(o),t.nHolding=null}function $(t,n){var i,r,a,o,s,l,d,u,c,h,p,m=e(n).children("tr"),f=function(e,t,n){for(var i=e[t];i[n];)n++;return n};for(t.splice(0,t.length),a=0,l=m.length;l>a;a++)t.push([]);for(a=0,l=m.length;l>a;a++)for(i=m[a],u=0,r=i.firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(c=1*r.getAttribute("colspan"),h=1*r.getAttribute("rowspan"),c=c&&0!==c&&1!==c?c:1,h=h&&0!==h&&1!==h?h:1,d=f(t,a,u),p=1===c?!0:!1,s=0;c>s;s++)for(o=0;h>o;o++)t[a+o][d+s]={cell:r,unique:p},t[a+o].nTr=i;r=r.nextSibling}}function N(e,t,n){var i=[];n||(n=e.aoHeader,t&&(n=[],$(n,t)));for(var r=0,a=n.length;a>r;r++)for(var o=0,s=n[r].length;s>o;o++)!n[r][o].unique||i[o]&&e.bSortCellsTop||(i[o]=n[r][o].cell);return i}function q(t,n,i){if(Fe(t,"aoServerParams","serverParams",[n]),n&&e.isArray(n)){var r={},a=/(.*?)\[\]$/;e.each(n,function(e,t){var n=t.name.match(a);if(n){var i=n[0];r[i]||(r[i]=[]),r[i].push(t.value)}else r[t.name]=t.value}),n=r}var o,s=t.ajax,l=t.oInstance,d=function(e){Fe(t,null,"xhr",[t,e,t.jqXHR]),i(e)};if(e.isPlainObject(s)&&s.data){o=s.data;var u=e.isFunction(o)?o(n,t):o;n=e.isFunction(o)&&u?u:e.extend(!0,n,u),delete s.data}var c={data:n,success:function(e){var n=e.error||e.sError;n&&je(t,0,n),t.json=e,d(e)},dataType:"json",cache:!1,type:t.sServerMethod,error:function(n,i,r){var a=Fe(t,null,"xhr",[t,null,t.jqXHR]);-1===e.inArray(!0,a)&&("parsererror"==i?je(t,0,"Invalid JSON response",1):4===n.readyState&&je(t,0,"Ajax error",7)),me(t,!1)}};t.oAjaxData=n,Fe(t,null,"preXhr",[t,n]),t.fnServerData?t.fnServerData.call(l,t.sAjaxSource,e.map(n,function(e,t){return{name:t,value:e}}),d,t):t.sAjaxSource||"string"==typeof s?t.jqXHR=e.ajax(e.extend(c,{url:s||t.sAjaxSource})):e.isFunction(s)?t.jqXHR=s.call(l,n,d,t):(t.jqXHR=e.ajax(e.extend(c,s)),s.data=o)}function R(e){return e.bAjaxDataGet?(e.iDraw++,me(e,!0),q(e,U(e),function(t){B(e,t)}),!1):!0}function U(t){var n,i,r,a,o=t.aoColumns,s=o.length,l=t.oFeatures,d=t.oPreviousSearch,u=t.aoPreSearchCols,c=[],h=De(t),p=t._iDisplayStart,m=l.bPaginate!==!1?t._iDisplayLength:-1,f=function(e,t){c.push({name:e,value:t})};f("sEcho",t.iDraw),f("iColumns",s),f("sColumns",ut(o,"sName").join(",")),f("iDisplayStart",p),f("iDisplayLength",m);var _={draw:t.iDraw,columns:[],order:[],start:p,length:m,search:{value:d.sSearch,regex:d.bRegex}};for(n=0;s>n;n++)r=o[n],a=u[n],i="function"==typeof r.mData?"function":r.mData,_.columns.push({data:i,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:a.sSearch,regex:a.bRegex}}),f("mDataProp_"+n,i),l.bFilter&&(f("sSearch_"+n,a.sSearch),f("bRegex_"+n,a.bRegex),f("bSearchable_"+n,r.bSearchable)),l.bSort&&f("bSortable_"+n,r.bSortable);l.bFilter&&(f("sSearch",d.sSearch),f("bRegex",d.bRegex)),l.bSort&&(e.each(h,function(e,t){_.order.push({column:t.col,dir:t.dir}),f("iSortCol_"+e,t.col),f("sSortDir_"+e,t.dir)}),f("iSortingCols",h.length));var y=Be.ext.legacy.ajax;return null===y?t.sAjaxSource?c:_:y?c:_}function B(e,t){var n=function(e,n){return t[e]!==i?t[e]:t[n]},r=J(e,t),a=n("sEcho","draw"),o=n("iTotalRecords","recordsTotal"),s=n("iTotalDisplayRecords","recordsFiltered");if(a){if(1*a<e.iDraw)return;e.iDraw=1*a}C(e),e._iRecordsTotal=parseInt(o,10),e._iRecordsDisplay=parseInt(s,10);for(var l=0,d=r.length;d>l;l++)M(e,r[l]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,z(e),e._bInitComplete||le(e,t),e.bAjaxDataGet=!0,me(e,!1)}function J(t,n){var r=e.isPlainObject(t.ajax)&&t.ajax.dataSrc!==i?t.ajax.dataSrc:t.sAjaxDataProp;return"data"===r?n.aaData||n[r]:""!==r?Y(r)(n):n}function V(t){var i=t.oClasses,r=t.sTableId,a=t.oLanguage,o=t.oPreviousSearch,s=t.aanFeatures,l='<input type="search" class="'+i.sFilterInput+'"/>',d=a.sSearch;d=d.match(/_INPUT_/)?d.replace("_INPUT_",l):d+l;var u=e("<div/>",{id:s.f?null:r+"_filter","class":i.sFilter}).append(e("<label/>").append(d)),c=function(){var e=(s.f,this.value?this.value:"");e!=o.sSearch&&(G(t,{sSearch:e,bRegex:o.bRegex,bSmart:o.bSmart,bCaseInsensitive:o.bCaseInsensitive}),t._iDisplayStart=0,z(t))},h=null!==t.searchDelay?t.searchDelay:"ssp"===Ne(t)?400:0,p=e("input",u).val(o.sSearch).attr("placeholder",a.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT",h?ve(c,h):c).bind("keypress.DT",function(e){return 13==e.keyCode?!1:void 0}).attr("aria-controls",r);return e(t.nTable).on("search.dt.DT",function(e,i){if(t===i)try{p[0]!==n.activeElement&&p.val(o.sSearch)}catch(r){}}),u[0]}function G(e,t,n){var r=e.oPreviousSearch,a=e.aoPreSearchCols,o=function(e){r.sSearch=e.sSearch,r.bRegex=e.bRegex,r.bSmart=e.bSmart,r.bCaseInsensitive=e.bCaseInsensitive},s=function(e){return e.bEscapeRegex!==i?!e.bEscapeRegex:e.bRegex};if(g(e),"ssp"!=Ne(e)){Z(e,t.sSearch,n,s(t),t.bSmart,t.bCaseInsensitive),o(t);for(var l=0;l<a.length;l++)Q(e,a[l].sSearch,l,s(a[l]),a[l].bSmart,a[l].bCaseInsensitive);X(e)}else o(t);e.bFiltered=!0,Fe(e,null,"search",[e])}function X(t){for(var n,i,r=Be.ext.search,a=t.aiDisplay,o=0,s=r.length;s>o;o++){for(var l=[],d=0,u=a.length;u>d;d++)i=a[d],n=t.aoData[i],r[o](t,n._aFilterData,i,n._aData,d)&&l.push(i);a.length=0,e.merge(a,l)}}function Q(e,t,n,i,r,a){if(""!==t)for(var o,s=e.aiDisplay,l=K(t,i,r,a),d=s.length-1;d>=0;d--)o=e.aoData[s[d]]._aFilterData[n],l.test(o)||s.splice(d,1)}function Z(e,t,n,i,r,a){var o,s,l,d=K(t,i,r,a),u=e.oPreviousSearch.sSearch,c=e.aiDisplayMaster;if(0!==Be.ext.search.length&&(n=!0),s=te(e),t.length<=0)e.aiDisplay=c.slice();else for((s||n||u.length>t.length||0!==t.indexOf(u)||e.bSorted)&&(e.aiDisplay=c.slice()),o=e.aiDisplay,l=o.length-1;l>=0;l--)d.test(e.aoData[o[l]]._sFilterRow)||o.splice(l,1)}function K(t,n,i,r){if(t=n?t:ee(t),i){var a=e.map(t.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")});t="^(?=.*?"+a.join(")(?=.*?")+").*$"}return new RegExp(t,r?"i":"")}function ee(e){return e.replace(nt,"\\$1")}function te(e){var t,n,i,r,a,o,s,l,d=e.aoColumns,u=Be.ext.type.search,c=!1;for(n=0,r=e.aoData.length;r>n;n++)if(l=e.aoData[n],!l._aFilterData){for(o=[],i=0,a=d.length;a>i;i++)t=d[i],t.bSearchable?(s=D(e,n,i,"filter"),u[t.sType]&&(s=u[t.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&-1!==s.indexOf("&")&&(vt.innerHTML=s,s=Mt?vt.textContent:vt.innerText),s.replace&&(s=s.replace(/[\r\n]/g,"")),o.push(s);l._aFilterData=o,l._sFilterRow=o.join("  "),c=!0}return c}function ne(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function ie(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function re(t){var n=t.sTableId,i=t.aanFeatures.i,r=e("<div/>",{"class":t.oClasses.sInfo,id:i?null:n+"_info"});return i||(t.aoDrawCallback.push({fn:ae,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),e(t.nTable).attr("aria-describedby",n+"_info")),r[0]}function ae(t){var n=t.aanFeatures.i;if(0!==n.length){var i=t.oLanguage,r=t._iDisplayStart+1,a=t.fnDisplayEnd(),o=t.fnRecordsTotal(),s=t.fnRecordsDisplay(),l=s?i.sInfo:i.sInfoEmpty;s!==o&&(l+=" "+i.sInfoFiltered),l+=i.sInfoPostFix,l=oe(t,l);var d=i.fnInfoCallback;null!==d&&(l=d.call(t.oInstance,t,r,a,o,s,l)),e(n).html(l)}}function oe(e,t){var n=e.fnFormatNumber,i=e._iDisplayStart+1,r=e._iDisplayLength,a=e.fnRecordsDisplay(),o=-1===r;return t.replace(/_START_/g,n.call(e,i)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,a)).replace(/_PAGE_/g,n.call(e,o?1:Math.ceil(i/r))).replace(/_PAGES_/g,n.call(e,o?1:Math.ceil(a/r)))}function se(e){var t,n,i,r=e.iInitDisplayStart,a=e.aoColumns,o=e.oFeatures,s=e.bDeferLoading;if(!e.bInitialised)return void setTimeout(function(){se(e)},200);for(W(e),P(e),O(e,e.aoHeader),O(e,e.aoFooter),me(e,!0),o.bAutoWidth&&ge(e),t=0,n=a.length;n>t;t++)i=a[t],i.sWidth&&(i.nTh.style.width=we(i.sWidth));Fe(e,null,"preInit",[e]),F(e);var l=Ne(e);("ssp"!=l||s)&&("ajax"==l?q(e,[],function(n){var i=J(e,n);for(t=0;t<i.length;t++)M(e,i[t]);e.iInitDisplayStart=r,F(e),me(e,!1),le(e,n)},e):(me(e,!1),le(e)))}function le(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&p(e),Fe(e,null,"plugin-init",[e,t]),Fe(e,"aoInitComplete","init",[e,t])}function de(e,t){var n=parseInt(t,10);e._iDisplayLength=n,We(e),Fe(e,null,"length",[e,n])}function ue(t){for(var n=t.oClasses,i=t.sTableId,r=t.aLengthMenu,a=e.isArray(r[0]),o=a?r[0]:r,s=a?r[1]:r,l=e("<select/>",{name:i+"_length","aria-controls":i,"class":n.sLengthSelect}),d=0,u=o.length;u>d;d++)l[0][d]=new Option(s[d],o[d]);var c=e("<div><label/></div>").addClass(n.sLength);return t.aanFeatures.l||(c[0].id=i+"_length"),c.children().append(t.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),e("select",c).val(t._iDisplayLength).bind("change.DT",function(n){de(t,e(this).val()),z(t)}),e(t.nTable).bind("length.dt.DT",function(n,i,r){t===i&&e("select",c).val(r)}),c[0]}function ce(t){var n=t.sPaginationType,i=Be.ext.pager[n],r="function"==typeof i,a=function(e){z(e)},o=e("<div/>").addClass(t.oClasses.sPaging+n)[0],s=t.aanFeatures;return r||i.fnInit(t,o,a),s.p||(o.id=t.sTableId+"_paginate",t.aoDrawCallback.push({fn:function(e){if(r){var t,n,o=e._iDisplayStart,l=e._iDisplayLength,d=e.fnRecordsDisplay(),u=-1===l,c=u?0:Math.ceil(o/l),h=u?1:Math.ceil(d/l),p=i(c,h);for(t=0,n=s.p.length;n>t;t++)$e(e,"pageButton")(e,s.p[t],t,p,c,h)}else i.fnUpdate(e,a)},sName:"pagination"})),o}function he(e,t,n){var i=e._iDisplayStart,r=e._iDisplayLength,a=e.fnRecordsDisplay();0===a||-1===r?i=0:"number"==typeof t?(i=t*r,i>a&&(i=0)):"first"==t?i=0:"previous"==t?(i=r>=0?i-r:0,0>i&&(i=0)):"next"==t?a>i+r&&(i+=r):"last"==t?i=Math.floor((a-1)/r)*r:je(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==i;return e._iDisplayStart=i,o&&(Fe(e,null,"page",[e]),n&&z(e)),o}function pe(t){return e("<div/>",{id:t.aanFeatures.r?null:t.sTableId+"_processing","class":t.oClasses.sProcessing}).html(t.oLanguage.sProcessing).insertBefore(t.nTable)[0]}function me(t,n){t.oFeatures.bProcessing&&e(t.aanFeatures.r).css("display",n?"block":"none"),Fe(t,null,"processing",[t,n])}function fe(t){var n=e(t.nTable);n.attr("role","grid");var i=t.oScroll;if(""===i.sX&&""===i.sY)return t.nTable;var r=i.sX,a=i.sY,o=t.oClasses,s=n.children("caption"),l=s.length?s[0]._captionSide:null,d=e(n[0].cloneNode(!1)),u=e(n[0].cloneNode(!1)),c=n.children("tfoot"),h="<div/>",p=function(e){return e?we(e):null};c.length||(c=null);var m=e(h,{"class":o.sScrollWrapper}).append(e(h,{"class":o.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?p(r):"100%"}).append(e(h,{"class":o.sScrollHeadInner}).css({"box-sizing":"content-box",width:i.sXInner||"100%"}).append(d.removeAttr("id").css("margin-left",0).append("top"===l?s:null).append(n.children("thead"))))).append(e(h,{"class":o.sScrollBody}).css({position:"relative",overflow:"auto",width:p(r)}).append(n));c&&m.append(e(h,{"class":o.sScrollFoot}).css({overflow:"hidden",border:0,width:r?p(r):"100%"}).append(e(h,{"class":o.sScrollFootInner}).append(u.removeAttr("id").css("margin-left",0).append("bottom"===l?s:null).append(n.children("tfoot")))));var f=m.children(),_=f[0],y=f[1],g=c?f[2]:null;return r&&e(y).on("scroll.DT",function(e){var t=this.scrollLeft;_.scrollLeft=t,c&&(g.scrollLeft=t)}),e(y).css(a&&i.bCollapse?"max-height":"height",a),t.nScrollHead=_,t.nScrollBody=y,t.nScrollFoot=g,t.aoDrawCallback.push({fn:_e,sName:"scrolling"}),m[0]}function _e(t){var n,r,a,o,s,l,d,u,c,h=t.oScroll,f=h.sX,_=h.sXInner,y=h.sY,g=h.iBarWidth,v=e(t.nScrollHead),M=v[0].style,b=v.children("div"),L=b[0].style,w=b.children("table"),D=t.nScrollBody,T=e(D),S=D.style,Y=e(t.nScrollFoot),k=Y.children("div"),x=k.children("table"),C=e(t.nTHead),H=e(t.nTable),A=H[0],E=A.style,j=t.nTFoot?e(t.nTFoot):null,I=t.oBrowser,P=I.bScrollOversize,O=[],z=[],F=[],W=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},$=D.scrollHeight>D.clientHeight;if(t.scrollBarVis!==$&&t.scrollBarVis!==i)return t.scrollBarVis=$,void p(t);t.scrollBarVis=$,H.children("thead, tfoot").remove(),s=C.clone().prependTo(H),n=C.find("tr"),a=s.find("tr"),s.find("th, td").removeAttr("tabindex"),j&&(l=j.clone().prependTo(H),r=j.find("tr"),o=l.find("tr")),f||(S.width="100%",v[0].style.width="100%"),e.each(N(t,s),function(e,n){d=m(t,e),n.style.width=t.aoColumns[d].sWidth}),j&&ye(function(e){e.style.width=""},o),c=H.outerWidth(),""===f?(E.width="100%",P&&(H.find("tbody").height()>D.offsetHeight||"scroll"==T.css("overflow-y"))&&(E.width=we(H.outerWidth()-g)),c=H.outerWidth()):""!==_&&(E.width=we(_),c=H.outerWidth()),ye(W,a),ye(function(t){F.push(t.innerHTML),O.push(we(e(t).css("width")))},a),ye(function(e,t){e.style.width=O[t]},n),e(a).height(0),j&&(ye(W,o),ye(function(t){z.push(we(e(t).css("width")))},o),ye(function(e,t){e.style.width=z[t]},r),e(o).height(0)),ye(function(e,t){e.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+F[t]+"</div>",e.style.width=O[t]},a),j&&ye(function(e,t){e.innerHTML="",e.style.width=z[t]},o),H.outerWidth()<c?(u=D.scrollHeight>D.offsetHeight||"scroll"==T.css("overflow-y")?c+g:c,P&&(D.scrollHeight>D.offsetHeight||"scroll"==T.css("overflow-y"))&&(E.width=we(u-g)),(""===f||""!==_)&&je(t,1,"Possible column misalignment",6)):u="100%",S.width=we(u),M.width=we(u),j&&(t.nScrollFoot.style.width=we(u)),y||P&&(S.height=we(A.offsetHeight+g));var q=H.outerWidth();w[0].style.width=we(q),L.width=we(q);var R=H.height()>D.clientHeight||"scroll"==T.css("overflow-y"),U="padding"+(I.bScrollbarLeft?"Left":"Right");L[U]=R?g+"px":"0px",j&&(x[0].style.width=we(q),k[0].style.width=we(q),k[0].style[U]=R?g+"px":"0px"),T.scroll(),!t.bSorted&&!t.bFiltered||t._drawHold||(D.scrollTop=0)}function ye(e,t,n){for(var i,r,a=0,o=0,s=t.length;s>o;){for(i=t[o].firstChild,r=n?n[o].firstChild:null;i;)1===i.nodeType&&(n?e(i,r,a):e(i,a),a++),i=i.nextSibling,r=n?r.nextSibling:null;o++}}function ge(n){var i,r,a,o=n.nTable,s=n.aoColumns,l=n.oScroll,d=l.sY,u=l.sX,c=l.sXInner,h=s.length,f=y(n,"bVisible"),g=e("th",n.nTHead),v=o.getAttribute("width"),M=o.parentNode,b=!1,L=n.oBrowser,w=L.bScrollOversize,D=o.style.width;for(D&&-1!==D.indexOf("%")&&(v=D),i=0;i<f.length;i++)r=s[f[i]],null!==r.sWidth&&(r.sWidth=Me(r.sWidthOrig,M),b=!0);if(w||!b&&!u&&!d&&h==_(n)&&h==g.length)for(i=0;h>i;i++){var T=m(n,i);null!==T&&(s[T].sWidth=we(g.eq(i).width()))}else{var S=e(o).clone().css("visibility","hidden").removeAttr("id");S.find("tbody tr").remove();var Y=e("<tr/>").appendTo(S.find("tbody"));for(S.find("thead, tfoot").remove(),S.append(e(n.nTHead).clone()).append(e(n.nTFoot).clone()),S.find("tfoot th, tfoot td").css("width",""),g=N(n,S.find("thead")[0]),i=0;i<f.length;i++)r=s[f[i]],g[i].style.width=null!==r.sWidthOrig&&""!==r.sWidthOrig?we(r.sWidthOrig):"",r.sWidthOrig&&u&&e(g[i]).append(e("<div/>").css({width:r.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(n.aoData.length)for(i=0;i<f.length;i++)a=f[i],r=s[a],e(be(n,a)).clone(!1).append(r.sContentPadding).appendTo(Y);var k=e("<div/>").css(u||d?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(S).appendTo(M);u&&c?S.width(c):u?(S.css("width","auto"),S.removeAttr("width"),S.width()<M.clientWidth&&v&&S.width(M.clientWidth)):d?S.width(M.clientWidth):v&&S.width(v);var x=0;for(i=0;i<f.length;i++){var C=e(g[i]),H=C.outerWidth()-C.width(),A=L.bBounding?Math.ceil(g[i].getBoundingClientRect().width):C.outerWidth();x+=A,s[f[i]].sWidth=we(A-H)}o.style.width=we(x),k.remove()}if(v&&(o.style.width=we(v)),(v||u)&&!n._reszEvt){var E=function(){e(t).bind("resize.DT-"+n.sInstance,ve(function(){p(n)}))};w?setTimeout(E,1e3):E(),n._reszEvt=!0}}function ve(e,t){var n,r,a=t!==i?t:200;return function(){var t=this,o=+new Date,s=arguments;n&&n+a>o?(clearTimeout(r),r=setTimeout(function(){n=i,e.apply(t,s)},a)):(n=o,e.apply(t,s))}}function Me(t,i){if(!t)return 0;var r=e("<div/>").css("width",we(t)).appendTo(i||n.body),a=r[0].offsetWidth;return r.remove(),a}function be(t,n){var i=Le(t,n);if(0>i)return null;var r=t.aoData[i];return r.nTr?r.anCells[n]:e("<td/>").html(D(t,i,n,"display"))[0]}function Le(e,t){for(var n,i=-1,r=-1,a=0,o=e.aoData.length;o>a;a++)n=D(e,a,t,"display")+"",n=n.replace(bt,""),n=n.replace(/&nbsp;/g," "),n.length>i&&(i=n.length,r=a);return r}function we(e){return null===e?"0px":"number"==typeof e?0>e?"0px":e+"px":e.match(/\d$/)?e+"px":e}function De(t){var n,r,a,o,s,l,d,u=[],c=t.aoColumns,h=t.aaSortingFixed,p=e.isPlainObject(h),m=[],f=function(t){t.length&&!e.isArray(t[0])?m.push(t):e.merge(m,t)};for(e.isArray(h)&&f(h),p&&h.pre&&f(h.pre),f(t.aaSorting),p&&h.post&&f(h.post),n=0;n<m.length;n++)for(d=m[n][0],o=c[d].aDataSort,r=0,a=o.length;a>r;r++)s=o[r],l=c[s].sType||"string",m[n]._idx===i&&(m[n]._idx=e.inArray(m[n][1],c[s].asSorting)),u.push({src:d,col:s,dir:m[n][1],index:m[n]._idx,type:l,formatter:Be.ext.type.order[l+"-pre"]});return u}function Te(e){var t,n,i,r,a,o=[],s=Be.ext.type.order,l=e.aoData,d=(e.aoColumns,0),u=e.aiDisplayMaster;for(g(e),a=De(e),t=0,n=a.length;n>t;t++)r=a[t],r.formatter&&d++,Ce(e,r.col);if("ssp"!=Ne(e)&&0!==a.length){for(t=0,i=u.length;i>t;t++)o[u[t]]=t;d===a.length?u.sort(function(e,t){var n,i,r,s,d,u=a.length,c=l[e]._aSortData,h=l[t]._aSortData;for(r=0;u>r;r++)if(d=a[r],n=c[d.col],i=h[d.col],s=i>n?-1:n>i?1:0,0!==s)return"asc"===d.dir?s:-s;return n=o[e],i=o[t],i>n?-1:n>i?1:0}):u.sort(function(e,t){var n,i,r,d,u,c,h=a.length,p=l[e]._aSortData,m=l[t]._aSortData;for(r=0;h>r;r++)if(u=a[r],n=p[u.col],i=m[u.col],c=s[u.type+"-"+u.dir]||s["string-"+u.dir],d=c(n,i),0!==d)return d;return n=o[e],i=o[t],i>n?-1:n>i?1:0})}e.bSorted=!0}function Se(e){for(var t,n,i=e.aoColumns,r=De(e),a=e.oLanguage.oAria,o=0,s=i.length;s>o;o++){var l=i[o],d=l.asSorting,u=l.sTitle.replace(/<.*?>/g,""),c=l.nTh;c.removeAttribute("aria-sort"),l.bSortable?(r.length>0&&r[0].col==o?(c.setAttribute("aria-sort","asc"==r[0].dir?"ascending":"descending"),n=d[r[0].index+1]||d[0]):n=d[0],t=u+("asc"===n?a.sSortAscending:a.sSortDescending)):t=u,c.setAttribute("aria-label",t)}}function Ye(t,n,r,a){var o,s=t.aoColumns[n],l=t.aaSorting,d=s.asSorting,u=function(t,n){var r=t._idx;return r===i&&(r=e.inArray(t[1],d)),r+1<d.length?r+1:n?null:0};if("number"==typeof l[0]&&(l=t.aaSorting=[l]),r&&t.oFeatures.bSortMulti){var c=e.inArray(n,ut(l,"0"));-1!==c?(o=u(l[c],!0),null===o&&1===l.length&&(o=0),null===o?l.splice(c,1):(l[c][1]=d[o],l[c]._idx=o)):(l.push([n,d[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==n?(o=u(l[0]),l.length=1,l[0][1]=d[o],l[0]._idx=o):(l.length=0,l.push([n,d[0]]),l[0]._idx=0);F(t),"function"==typeof a&&a(t)}function ke(e,t,n,i){var r=e.aoColumns[n];Oe(t,{},function(t){r.bSortable!==!1&&(e.oFeatures.bProcessing?(me(e,!0),setTimeout(function(){Ye(e,n,t.shiftKey,i),"ssp"!==Ne(e)&&me(e,!1)},0)):Ye(e,n,t.shiftKey,i))})}function xe(t){var n,i,r,a=t.aLastSort,o=t.oClasses.sSortColumn,s=De(t),l=t.oFeatures;if(l.bSort&&l.bSortClasses){for(n=0,i=a.length;i>n;n++)r=a[n].src,e(ut(t.aoData,"anCells",r)).removeClass(o+(2>n?n+1:3));for(n=0,i=s.length;i>n;n++)r=s[n].src,e(ut(t.aoData,"anCells",r)).addClass(o+(2>n?n+1:3))}t.aLastSort=s}function Ce(e,t){var n,i=e.aoColumns[t],r=Be.ext.order[i.sSortDataType];r&&(n=r.call(e.oInstance,e,t,f(e,t)));for(var a,o,s=Be.ext.type.order[i.sType+"-pre"],l=0,d=e.aoData.length;d>l;l++)a=e.aoData[l],a._aSortData||(a._aSortData=[]),(!a._aSortData[t]||r)&&(o=r?n[l]:D(e,l,t,"sort"),a._aSortData[t]=s?s(o):o)}function He(t){if(t.oFeatures.bStateSave&&!t.bDestroying){var n={time:+new Date,start:t._iDisplayStart,length:t._iDisplayLength,order:e.extend(!0,[],t.aaSorting),search:ne(t.oPreviousSearch),columns:e.map(t.aoColumns,function(e,n){return{visible:e.bVisible,search:ne(t.aoPreSearchCols[n])}})};Fe(t,"aoStateSaveParams","stateSaveParams",[t,n]),t.oSavedState=n,t.fnStateSaveCallback.call(t.oInstance,t,n)}}function Ae(t,n){var r,a,o=t.aoColumns;if(t.oFeatures.bStateSave){var s=t.fnStateLoadCallback.call(t.oInstance,t);if(s&&s.time){var l=Fe(t,"aoStateLoadParams","stateLoadParams",[t,s]);if(-1===e.inArray(!1,l)){var d=t.iStateDuration;if(!(d>0&&s.time<+new Date-1e3*d)&&o.length===s.columns.length){for(t.oLoadedState=e.extend(!0,{},s),s.start!==i&&(t._iDisplayStart=s.start,t.iInitDisplayStart=s.start),s.length!==i&&(t._iDisplayLength=s.length),s.order!==i&&(t.aaSorting=[],e.each(s.order,function(e,n){t.aaSorting.push(n[0]>=o.length?[0,n[1]]:n)})),s.search!==i&&e.extend(t.oPreviousSearch,ie(s.search)),r=0,a=s.columns.length;a>r;r++){var u=s.columns[r];u.visible!==i&&(o[r].bVisible=u.visible),u.search!==i&&e.extend(t.aoPreSearchCols[r],ie(u.search))}Fe(t,"aoStateLoaded","stateLoaded",[t,s])}}}}}function Ee(t){var n=Be.settings,i=e.inArray(t,ut(n,"nTable"));return-1!==i?n[i]:null}function je(e,n,i,r){if(i="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+i,r&&(i+=". For more information about this error, please see http://datatables.net/tn/"+r),n)t.console&&console.log&&console.log(i);else{var a=Be.ext,o=a.sErrMode||a.errMode;if(e&&Fe(e,null,"error",[e,r,i]),"alert"==o)alert(i);else{if("throw"==o)throw new Error(i);"function"==typeof o&&o(e,r,i)}}}function Ie(t,n,r,a){return e.isArray(r)?void e.each(r,function(i,r){e.isArray(r)?Ie(t,n,r[0],r[1]):Ie(t,n,r)}):(a===i&&(a=r),void(n[r]!==i&&(t[a]=n[r])))}function Pe(t,n,i){var r;for(var a in n)n.hasOwnProperty(a)&&(r=n[a],e.isPlainObject(r)?(e.isPlainObject(t[a])||(t[a]={}),e.extend(!0,t[a],r)):i&&"data"!==a&&"aaData"!==a&&e.isArray(r)?t[a]=r.slice():t[a]=r);return t}function Oe(t,n,i){e(t).bind("click.DT",n,function(e){t.blur(),i(e)}).bind("keypress.DT",n,function(e){13===e.which&&(e.preventDefault(),i(e))}).bind("selectstart.DT",function(){return!1})}function ze(e,t,n,i){n&&e[t].push({fn:n,sName:i})}function Fe(t,n,i,r){var a=[];if(n&&(a=e.map(t[n].slice().reverse(),function(e,n){return e.fn.apply(t.oInstance,r)})),null!==i){var o=e.Event(i+".dt");e(t.nTable).trigger(o,r),a.push(o.result)}return a}function We(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),i=e._iDisplayLength;t>=n&&(t=n-i),t-=t%i,(-1===i||0>t)&&(t=0),e._iDisplayStart=t}function $e(t,n){var i=t.renderer,r=Be.ext.renderer[n];return e.isPlainObject(i)&&i[n]?r[i[n]]||r._:"string"==typeof i?r[i]||r._:r._}function Ne(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}function qe(e,t){var n=[],i=Rt.numbers_length,r=Math.floor(i/2);return i>=t?n=ht(0,t):r>=e?(n=ht(0,i-2),n.push("ellipsis"),n.push(t-1)):e>=t-1-r?(n=ht(t-(i-2),t),n.splice(0,0,"ellipsis"),n.splice(0,0,0)):(n=ht(e-r+2,e+r-1),n.push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis"),n.splice(0,0,0)),n.DT_el="span",n}function Re(t){e.each({num:function(e){return Ut(e,t)},"num-fmt":function(e){return Ut(e,t,it)},"html-num":function(e){return Ut(e,t,Ke)},"html-num-fmt":function(e){return Ut(e,t,Ke,it)}},function(e,n){Je.type.order[e+t+"-pre"]=n,e.match(/^html\-/)&&(Je.type.search[e+t]=Je.type.search.html)})}function Ue(e){return function(){var t=[Ee(this[Be.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Be.ext.internal[e].apply(this,t)}}var Be,Je,Ve,Ge,Xe,Qe={},Ze=/[\r\n]/g,Ke=/<.*?>/g,et=/^[\w\+\-]/,tt=/[\w\+\-]$/,nt=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),it=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi,rt=function(e){return e&&e!==!0&&"-"!==e?!1:!0},at=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},ot=function(e,t){return Qe[t]||(Qe[t]=new RegExp(ee(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(Qe[t],"."):e},st=function(e,t,n){var i="string"==typeof e;return rt(e)?!0:(t&&i&&(e=ot(e,t)),n&&i&&(e=e.replace(it,"")),!isNaN(parseFloat(e))&&isFinite(e))},lt=function(e){return rt(e)||"string"==typeof e},dt=function(e,t,n){if(rt(e))return!0;var i=lt(e);return i&&st(mt(e),t,n)?!0:null},ut=function(e,t,n){var r=[],a=0,o=e.length;if(n!==i)for(;o>a;a++)e[a]&&e[a][t]&&r.push(e[a][t][n]);else for(;o>a;a++)e[a]&&r.push(e[a][t]);return r},ct=function(e,t,n,r){var a=[],o=0,s=t.length;if(r!==i)for(;s>o;o++)e[t[o]][n]&&a.push(e[t[o]][n][r]);else for(;s>o;o++)a.push(e[t[o]][n]);return a},ht=function(e,t){var n,r=[];t===i?(t=0,n=e):(n=t,t=e);for(var a=t;n>a;a++)r.push(a);return r},pt=function(e){for(var t=[],n=0,i=e.length;i>n;n++)e[n]&&t.push(e[n]);return t},mt=function(e){return e.replace(Ke,"")},ft=function(e){var t,n,i,r=[],a=e.length,o=0;e:for(n=0;a>n;n++){for(t=e[n],i=0;o>i;i++)if(r[i]===t)continue e;r.push(t),o++}return r},_t=function(e,t,n){e[t]!==i&&(e[n]=e[t])},yt=/\[.*?\]$/,gt=/\(\)$/,vt=e("<div>")[0],Mt=vt.textContent!==i,bt=/<.*?>/g;Be=function(t){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new Ve(e?Ee(this[Je.iApiIndex]):this)},this.fnAddData=function(t,n){var r=this.api(!0),a=e.isArray(t)&&(e.isArray(t[0])||e.isPlainObject(t[0]))?r.rows.add(t):r.row.add(t);return(n===i||n)&&r.draw(),a.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),n=t.settings()[0],r=n.oScroll;e===i||e?t.draw(!1):(""!==r.sX||""!==r.sY)&&_e(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===i||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var r=this.api(!0),a=r.rows(e),o=a.settings()[0],s=o.aoData[a[0][0]];return a.remove(),t&&t.call(this,o,s),(n===i||n)&&r.draw(),s},this.fnDestroy=function(e){this.api(!0).destroy(e);
},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,r,a,o){var s=this.api(!0);null===t||t===i?s.search(e,n,r,o):s.column(t).search(e,n,r,o),s.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e!==i){var r=e.nodeName?e.nodeName.toLowerCase():"";return t!==i||"td"==r||"th"==r?n.cell(e,t).data():n.row(e).data()||null}return n.data().toArray()},this.fnGetNodes=function(e){var t=this.api(!0);return e!==i?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"==n||"TH"==n){var i=t.cell(e).index();return[i.row,i.columnVisible,i.column]}return null},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===i||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var r=this.api(!0).column(e).visible(t);(n===i||n)&&r.columns.adjust().draw()},this.fnSettings=function(){return Ee(this[Je.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,r,a){var o=this.api(!0);return n===i||null===n?o.row(t).data(e):o.cell(t,n).data(e),(a===i||a)&&o.columns.adjust(),(r===i||r)&&o.draw(),0},this.fnVersionCheck=Je.fnVersionCheck;var n=this,r=t===i,u=this.length;r&&(t={}),this.oApi=this.internal=Je.internal;for(var p in Be.ext.internal)p&&(this[p]=Ue(p));return this.each(function(){var p,m={},f=u>1?Pe(m,t,!0):t,_=0,y=this.getAttribute("id"),g=!1,L=Be.defaults,w=e(this);if("table"!=this.nodeName.toLowerCase())return void je(null,0,"Non-table node initialisation ("+this.nodeName+")",2);s(L),l(L.column),a(L,L,!0),a(L.column,L.column,!0),a(L,e.extend(f,w.data()));var D=Be.settings;for(_=0,p=D.length;p>_;_++){var T=D[_];if(T.nTable==this||T.nTHead.parentNode==this||T.nTFoot&&T.nTFoot.parentNode==this){var S=f.bRetrieve!==i?f.bRetrieve:L.bRetrieve,k=f.bDestroy!==i?f.bDestroy:L.bDestroy;if(r||S)return T.oInstance;if(k){T.oInstance.fnDestroy();break}return void je(T,0,"Cannot reinitialise DataTable",3)}if(T.sTableId==this.id){D.splice(_,1);break}}(null===y||""===y)&&(y="DataTables_Table_"+Be.ext._unique++,this.id=y);var x=e.extend(!0,{},Be.models.oSettings,{sDestroyWidth:w[0].style.width,sInstance:y,sTableId:y});x.nTable=this,x.oApi=n.internal,x.oInit=f,D.push(x),x.oInstance=1===n.length?n:w.dataTable(),s(f),f.oLanguage&&o(f.oLanguage),f.aLengthMenu&&!f.iDisplayLength&&(f.iDisplayLength=e.isArray(f.aLengthMenu[0])?f.aLengthMenu[0][0]:f.aLengthMenu[0]),f=Pe(e.extend(!0,{},L),f),Ie(x.oFeatures,f,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),Ie(x,f,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),Ie(x.oScroll,f,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),Ie(x.oLanguage,f,"fnInfoCallback"),ze(x,"aoDrawCallback",f.fnDrawCallback,"user"),ze(x,"aoServerParams",f.fnServerParams,"user"),ze(x,"aoStateSaveParams",f.fnStateSaveParams,"user"),ze(x,"aoStateLoadParams",f.fnStateLoadParams,"user"),ze(x,"aoStateLoaded",f.fnStateLoaded,"user"),ze(x,"aoRowCallback",f.fnRowCallback,"user"),ze(x,"aoRowCreatedCallback",f.fnCreatedRow,"user"),ze(x,"aoHeaderCallback",f.fnHeaderCallback,"user"),ze(x,"aoFooterCallback",f.fnFooterCallback,"user"),ze(x,"aoInitComplete",f.fnInitComplete,"user"),ze(x,"aoPreDrawCallback",f.fnPreDrawCallback,"user"),x.rowIdFn=Y(f.rowId),d(x);var C=x.oClasses;if(f.bJQueryUI?(e.extend(C,Be.ext.oJUIClasses,f.oClasses),f.sDom===L.sDom&&"lfrtip"===L.sDom&&(x.sDom='<"H"lfr>t<"F"ip>'),x.renderer?e.isPlainObject(x.renderer)&&!x.renderer.header&&(x.renderer.header="jqueryui"):x.renderer="jqueryui"):e.extend(C,Be.ext.classes,f.oClasses),w.addClass(C.sTable),x.iInitDisplayStart===i&&(x.iInitDisplayStart=f.iDisplayStart,x._iDisplayStart=f.iDisplayStart),null!==f.iDeferLoading){x.bDeferLoading=!0;var H=e.isArray(f.iDeferLoading);x._iRecordsDisplay=H?f.iDeferLoading[0]:f.iDeferLoading,x._iRecordsTotal=H?f.iDeferLoading[1]:f.iDeferLoading}var A=x.oLanguage;e.extend(!0,A,f.oLanguage),""!==A.sUrl&&(e.ajax({dataType:"json",url:A.sUrl,success:function(t){o(t),a(L.oLanguage,t),e.extend(!0,A,t),se(x)},error:function(){se(x)}}),g=!0),null===f.asStripeClasses&&(x.asStripeClasses=[C.sStripeOdd,C.sStripeEven]);var E=x.asStripeClasses,j=w.children("tbody").find("tr").eq(0);-1!==e.inArray(!0,e.map(E,function(e,t){return j.hasClass(e)}))&&(e("tbody tr",this).removeClass(E.join(" ")),x.asDestroyStripes=E.slice());var I,P=[],O=this.getElementsByTagName("thead");if(0!==O.length&&($(x.aoHeader,O[0]),P=N(x)),null===f.aoColumns)for(I=[],_=0,p=P.length;p>_;_++)I.push(null);else I=f.aoColumns;for(_=0,p=I.length;p>_;_++)c(x,P?P[_]:null);if(v(x,f.aoColumnDefs,I,function(e,t){h(x,e,t)}),j.length){var z=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};e(j[0]).children("th, td").each(function(e,t){var n=x.aoColumns[e];if(n.mData===e){var r=z(t,"sort")||z(t,"order"),a=z(t,"filter")||z(t,"search");(null!==r||null!==a)&&(n.mData={_:e+".display",sort:null!==r?e+".@data-"+r:i,type:null!==r?e+".@data-"+r:i,filter:null!==a?e+".@data-"+a:i},h(x,e))}})}var F=x.oFeatures;if(f.bStateSave&&(F.bStateSave=!0,Ae(x,f),ze(x,"aoDrawCallback",He,"state_save")),f.aaSorting===i){var W=x.aaSorting;for(_=0,p=W.length;p>_;_++)W[_][1]=x.aoColumns[_].asSorting[0]}xe(x),F.bSort&&ze(x,"aoDrawCallback",function(){if(x.bSorted){var t=De(x),n={};e.each(t,function(e,t){n[t.src]=t.dir}),Fe(x,null,"order",[x,t,n]),Se(x)}}),ze(x,"aoDrawCallback",function(){(x.bSorted||"ssp"===Ne(x)||F.bDeferRender)&&xe(x)},"sc");var q=w.children("caption").each(function(){this._captionSide=w.css("caption-side")}),R=w.children("thead");0===R.length&&(R=e("<thead/>").appendTo(this)),x.nTHead=R[0];var U=w.children("tbody");0===U.length&&(U=e("<tbody/>").appendTo(this)),x.nTBody=U[0];var B=w.children("tfoot");if(0===B.length&&q.length>0&&(""!==x.oScroll.sX||""!==x.oScroll.sY)&&(B=e("<tfoot/>").appendTo(this)),0===B.length||0===B.children().length?w.addClass(C.sNoFooter):B.length>0&&(x.nTFoot=B[0],$(x.aoFooter,x.nTFoot)),f.aaData)for(_=0;_<f.aaData.length;_++)M(x,f.aaData[_]);else(x.bDeferLoading||"dom"==Ne(x))&&b(x,e(x.nTBody).children("tr"));x.aiDisplay=x.aiDisplayMaster.slice(),x.bInitialised=!0,g===!1&&se(x)}),n=null,this};var Lt=[],wt=Array.prototype,Dt=function(t){var n,i,r=Be.settings,a=e.map(r,function(e,t){return e.nTable});return t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?(n=e.inArray(t,a),-1!==n?[r[n]]:null):t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?i=e(t):t instanceof e&&(i=t),i?i.map(function(t){return n=e.inArray(this,a),-1!==n?r[n]:null}).toArray():void 0):[]};Ve=function(t,n){if(!(this instanceof Ve))return new Ve(t,n);var i=[],r=function(e){var t=Dt(e);t&&(i=i.concat(t))};if(e.isArray(t))for(var a=0,o=t.length;o>a;a++)r(t[a]);else r(t);this.context=ft(i),n&&e.merge(this,n),this.selector={rows:null,cols:null,opts:null},Ve.extend(this,this,Lt)},Be.Api=Ve,e.extend(Ve.prototype,{any:function(){return 0!==this.count()},concat:wt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;n>t;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new Ve(t[e],this[e]):null},filter:function(e){var t=[];if(wt.filter)t=wt.filter.call(this,e,this);else for(var n=0,i=this.length;i>n;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new Ve(this.context,t)},flatten:function(){var e=[];return new Ve(this.context,e.concat.apply(e,this.toArray()))},join:wt.join,indexOf:wt.indexOf||function(e,t){for(var n=t||0,i=this.length;i>n;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,r){var a,o,s,l,d,u,c,h,p=[],m=this.context,f=this.selector;for("string"==typeof e&&(r=n,n=t,t=e,e=!1),o=0,s=m.length;s>o;o++){var _=new Ve(m[o]);if("table"===t)a=n.call(_,m[o],o),a!==i&&p.push(a);else if("columns"===t||"rows"===t)a=n.call(_,m[o],this[o],o),a!==i&&p.push(a);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(c=this[o],"column-rows"===t&&(u=Ct(m[o],f.opts)),l=0,d=c.length;d>l;l++)h=c[l],a="cell"===t?n.call(_,m[o],h.row,h.column,o,l):n.call(_,m[o],h,o,l,u),a!==i&&p.push(a)}if(p.length||r){var y=new Ve(m,e?p.concat.apply([],p):p),g=y.selector;return g.rows=f.rows,g.cols=f.cols,g.opts=f.opts,y}return this},lastIndexOf:wt.lastIndexOf||function(e,t){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(wt.map)t=wt.map.call(this,e,this);else for(var n=0,i=this.length;i>n;n++)t.push(e.call(this,this[n],n));return new Ve(this.context,t)},pluck:function(e){return this.map(function(t){return t[e]})},pop:wt.pop,push:wt.push,reduce:wt.reduce||function(e,t){return u(this,e,t,0,this.length,1)},reduceRight:wt.reduceRight||function(e,t){return u(this,e,t,this.length-1,-1,-1)},reverse:wt.reverse,selector:null,shift:wt.shift,sort:wt.sort,splice:wt.splice,toArray:function(){return wt.slice.call(this)},to$:function(){return e(this)},toJQuery:function(){return e(this)},unique:function(){return new Ve(this.context,ft(this))},unshift:wt.unshift}),Ve.extend=function(t,n,i){if(i.length&&n&&(n instanceof Ve||n.__dt_wrapper)){var r,a,o,s=function(e,t,n){return function(){var i=t.apply(e,arguments);return Ve.extend(i,i,n.methodExt),i}};for(r=0,a=i.length;a>r;r++)o=i[r],n[o.name]="function"==typeof o.val?s(t,o.val,o):e.isPlainObject(o.val)?{}:o.val,n[o.name].__dt_wrapper=!0,Ve.extend(t,n[o.name],o.propExt)}},Ve.register=Ge=function(t,n){if(e.isArray(t))for(var i=0,r=t.length;r>i;i++)Ve.register(t[i],n);else{var a,o,s,l,d=t.split("."),u=Lt,c=function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n].name===t)return e[n];return null};for(a=0,o=d.length;o>a;a++){l=-1!==d[a].indexOf("()"),s=l?d[a].replace("()",""):d[a];var h=c(u,s);h||(h={name:s,val:{},methodExt:[],propExt:[]},u.push(h)),a===o-1?h.val=n:u=l?h.methodExt:h.propExt}}},Ve.registerPlural=Xe=function(t,n,r){Ve.register(t,r),Ve.register(n,function(){var t=r.apply(this,arguments);return t===this?this:t instanceof Ve?t.length?e.isArray(t[0])?new Ve(t.context,t[0]):t[0]:i:t})};var Tt=function(t,n){if("number"==typeof t)return[n[t]];var i=e.map(n,function(e,t){return e.nTable});return e(i).filter(t).map(function(t){var r=e.inArray(this,i);return n[r]}).toArray()};Ge("tables()",function(e){return e?new Ve(Tt(e,this.context)):this}),Ge("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new Ve(n[0]):t}),Xe("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),Xe("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),Xe("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),Xe("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),Xe("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),Ge("draw()",function(e){return this.iterator("table",function(t){"page"===e?z(t):("string"==typeof e&&(e="full-hold"===e?!1:!0),F(t,e===!1))})}),Ge("page()",function(e){return e===i?this.page.info().page:this.iterator("table",function(t){he(t,e)})}),Ge("page.info()",function(e){if(0===this.context.length)return i;var t=this.context[0],n=t._iDisplayStart,r=t.oFeatures.bPaginate?t._iDisplayLength:-1,a=t.fnRecordsDisplay(),o=-1===r;return{page:o?0:Math.floor(n/r),pages:o?1:Math.ceil(a/r),start:n,end:t.fnDisplayEnd(),length:r,recordsTotal:t.fnRecordsTotal(),recordsDisplay:a,serverSide:"ssp"===Ne(t)}}),Ge("page.len()",function(e){return e===i?0!==this.context.length?this.context[0]._iDisplayLength:i:this.iterator("table",function(t){de(t,e)})});var St=function(e,t,n){if(n){var i=new Ve(e);i.one("draw",function(){n(i.ajax.json())})}if("ssp"==Ne(e))F(e,t);else{me(e,!0);var r=e.jqXHR;r&&4!==r.readyState&&r.abort(),q(e,[],function(n){C(e);for(var i=J(e,n),r=0,a=i.length;a>r;r++)M(e,i[r]);F(e,t),me(e,!1)})}};Ge("ajax.json()",function(){var e=this.context;return e.length>0?e[0].json:void 0}),Ge("ajax.params()",function(){var e=this.context;return e.length>0?e[0].oAjaxData:void 0}),Ge("ajax.reload()",function(e,t){return this.iterator("table",function(n){St(n,t===!1,e)})}),Ge("ajax.url()",function(t){var n=this.context;return t===i?0===n.length?i:(n=n[0],n.ajax?e.isPlainObject(n.ajax)?n.ajax.url:n.ajax:n.sAjaxSource):this.iterator("table",function(n){e.isPlainObject(n.ajax)?n.ajax.url=t:n.ajax=t})}),Ge("ajax.url().load()",function(e,t){return this.iterator("table",function(n){St(n,t===!1,e)})});var Yt=function(t,n,r,a,o){var s,l,d,u,c,h,p=[],m=typeof n;for(n&&"string"!==m&&"function"!==m&&n.length!==i||(n=[n]),d=0,u=n.length;u>d;d++)for(l=n[d]&&n[d].split?n[d].split(","):[n[d]],c=0,h=l.length;h>c;c++)s=r("string"==typeof l[c]?e.trim(l[c]):l[c]),s&&s.length&&(p=p.concat(s));var f=Je.selector[t];if(f.length)for(d=0,u=f.length;u>d;d++)p=f[d](a,o,p);return ft(p)},kt=function(t){return t||(t={}),t.filter&&t.search===i&&(t.search=t.filter),e.extend({search:"none",order:"current",page:"all"},t)},xt=function(e){for(var t=0,n=e.length;n>t;t++)if(e[t].length>0)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},Ct=function(t,n){var i,r,a,o=[],s=t.aiDisplay,l=t.aiDisplayMaster,d=n.search,u=n.order,c=n.page;if("ssp"==Ne(t))return"removed"===d?[]:ht(0,l.length);if("current"==c)for(i=t._iDisplayStart,r=t.fnDisplayEnd();r>i;i++)o.push(s[i]);else if("current"==u||"applied"==u)o="none"==d?l.slice():"applied"==d?s.slice():e.map(l,function(t,n){return-1===e.inArray(t,s)?t:null});else if("index"==u||"original"==u)for(i=0,r=t.aoData.length;r>i;i++)"none"==d?o.push(i):(a=e.inArray(i,s),(-1===a&&"removed"==d||a>=0&&"applied"==d)&&o.push(i));return o},Ht=function(t,n,r){var a=function(n){var a=at(n);if(null!==a&&!r)return[a];var o=Ct(t,r);if(null!==a&&-1!==e.inArray(a,o))return[a];if(!n)return o;if("function"==typeof n)return e.map(o,function(e){var i=t.aoData[e];return n(e,i._aData,i.nTr)?e:null});var s=pt(ct(t.aoData,o,"nTr"));if(n.nodeName&&-1!==e.inArray(n,s))return[n._DT_RowIndex];if("string"==typeof n&&"#"===n.charAt(0)){var l=t.aIds[n.replace(/^#/,"")];if(l!==i)return[l.idx]}return e(s).filter(n).map(function(){return this._DT_RowIndex}).toArray()};return Yt("row",n,a,t,r)};Ge("rows()",function(t,n){t===i?t="":e.isPlainObject(t)&&(n=t,t=""),n=kt(n);var r=this.iterator("table",function(e){return Ht(e,t,n)},1);return r.selector.rows=t,r.selector.opts=n,r}),Ge("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||i},1)}),Ge("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return ct(e.aoData,t,"_aData")},1)}),Xe("rows().cache()","row().cache()",function(e){return this.iterator("row",function(t,n){var i=t.aoData[n];return"search"===e?i._aFilterData:i._aSortData},1)}),Xe("rows().invalidate()","row().invalidate()",function(e){return this.iterator("row",function(t,n){A(t,n,e)})}),Xe("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),Xe("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,i=0,r=n.length;r>i;i++)for(var a=0,o=this[i].length;o>a;a++){var s=n[i].rowIdFn(n[i].aoData[this[i][a]]._aData);t.push((e===!0?"#":"")+s)}return new Ve(n,t)}),Xe("rows().remove()","row().remove()",function(){var e=this;return this.iterator("row",function(t,n,r){var a,o,s,l,d,u,c=t.aoData,h=c[n];for(c.splice(n,1),a=0,o=c.length;o>a;a++)if(d=c[a],u=d.anCells,null!==d.nTr&&(d.nTr._DT_RowIndex=a),null!==u)for(s=0,l=u.length;l>s;s++)u[s]._DT_CellIndex.row=a;H(t.aiDisplayMaster,n),H(t.aiDisplay,n),H(e[r],n,!1),We(t);var p=t.rowIdFn(h._aData);p!==i&&delete t.aIds[p]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;n>t;t++)e.aoData[t].idx=t}),this}),Ge("rows.add()",function(t){var n=this.iterator("table",function(e){var n,i,r,a=[];for(i=0,r=t.length;r>i;i++)n=t[i],n.nodeName&&"TR"===n.nodeName.toUpperCase()?a.push(b(e,n)[0]):a.push(M(e,n));return a},1),i=this.rows(-1);return i.pop(),e.merge(i,n),i}),Ge("row()",function(e,t){return xt(this.rows(e,t))}),Ge("row().data()",function(e){var t=this.context;return e===i?t.length&&this.length?t[0].aoData[this[0]]._aData:i:(t[0].aoData[this[0]]._aData=e,A(t[0],this[0],"data"),this)}),Ge("row().node()",function(){var e=this.context;return e.length&&this.length?e[0].aoData[this[0]].nTr||null:null}),Ge("row.add()",function(t){t instanceof e&&t.length&&(t=t[0]);var n=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?b(e,t)[0]:M(e,t)});return this.row(n[0])});var At=function(t,n,i,r){var a=[],o=function(n,i){if(e.isArray(n)||n instanceof e)for(var r=0,s=n.length;s>r;r++)o(n[r],i);else if(n.nodeName&&"tr"===n.nodeName.toLowerCase())a.push(n);else{var l=e("<tr><td/></tr>").addClass(i);e("td",l).addClass(i).html(n)[0].colSpan=_(t),a.push(l[0])}};o(i,r),n._details&&n._details.remove(),n._details=e(a),n._detailsShow&&n._details.insertAfter(n.nTr)},Et=function(e,t){var n=e.context;if(n.length){var r=n[0].aoData[t!==i?t:e[0]];r&&r._details&&(r._details.remove(),r._detailsShow=i,r._details=i)}},jt=function(e,t){var n=e.context;if(n.length&&e.length){var i=n[0].aoData[e[0]];i._details&&(i._detailsShow=t,t?i._details.insertAfter(i.nTr):i._details.detach(),It(n[0]))}},It=function(e){var t=new Ve(e),n=".dt.DT_details",i="draw"+n,r="column-visibility"+n,a="destroy"+n,o=e.aoData;t.off(i+" "+r+" "+a),ut(o,"_details").length>0&&(t.on(i,function(n,i){e===i&&t.rows({page:"current"}).eq(0).each(function(e){var t=o[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),t.on(r,function(t,n,i,r){if(e===n)for(var a,s=_(n),l=0,d=o.length;d>l;l++)a=o[l],a._details&&a._details.children("td[colspan]").attr("colspan",s)}),t.on(a,function(n,i){if(e===i)for(var r=0,a=o.length;a>r;r++)o[r]._details&&Et(t,r)}))},Pt="",Ot=Pt+"row().child",zt=Ot+"()";Ge(zt,function(e,t){var n=this.context;return e===i?n.length&&this.length?n[0].aoData[this[0]]._details:i:(e===!0?this.child.show():e===!1?Et(this):n.length&&this.length&&At(n[0],n[0].aoData[this[0]],e,t),this)}),Ge([Ot+".show()",zt+".show()"],function(e){return jt(this,!0),this}),Ge([Ot+".hide()",zt+".hide()"],function(){return jt(this,!1),this}),Ge([Ot+".remove()",zt+".remove()"],function(){return Et(this),this}),Ge(Ot+".isShown()",function(){var e=this.context;return e.length&&this.length?e[0].aoData[this[0]]._detailsShow||!1:!1});var Ft=/^(.+):(name|visIdx|visible)$/,Wt=function(e,t,n,i,r){for(var a=[],o=0,s=r.length;s>o;o++)a.push(D(e,r[o],t));return a},$t=function(t,n,i){var r=t.aoColumns,a=ut(r,"sName"),o=ut(r,"nTh"),s=function(n){var s=at(n);if(""===n)return ht(r.length);if(null!==s)return[s>=0?s:r.length+s];if("function"==typeof n){var l=Ct(t,i);return e.map(r,function(e,i){return n(i,Wt(t,i,0,0,l),o[i])?i:null})}var d="string"==typeof n?n.match(Ft):"";if(!d)return e(o).filter(n).map(function(){return e.inArray(this,o)}).toArray();switch(d[2]){case"visIdx":case"visible":var u=parseInt(d[1],10);if(0>u){var c=e.map(r,function(e,t){return e.bVisible?t:null});return[c[c.length+u]]}return[m(t,u)];case"name":return e.map(a,function(e,t){return e===d[1]?t:null})}};return Yt("column",n,s,t,i)},Nt=function(t,n,r,a){var o,s,l,d,u=t.aoColumns,c=u[n],h=t.aoData;if(r===i)return c.bVisible;if(c.bVisible!==r){if(r){var m=e.inArray(!0,ut(u,"bVisible"),n+1);for(s=0,l=h.length;l>s;s++)d=h[s].nTr,o=h[s].anCells,d&&d.insertBefore(o[n],o[m]||null)}else e(ut(t.aoData,"anCells",n)).detach();c.bVisible=r,O(t,t.aoHeader),O(t,t.aoFooter),(a===i||a)&&(p(t),(t.oScroll.sX||t.oScroll.sY)&&_e(t)),Fe(t,null,"column-visibility",[t,n,r,a]),He(t)}};Ge("columns()",function(t,n){t===i?t="":e.isPlainObject(t)&&(n=t,t=""),n=kt(n);var r=this.iterator("table",function(e){return $t(e,t,n)},1);return r.selector.cols=t,r.selector.opts=n,r}),Xe("columns().header()","column().header()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),Xe("columns().footer()","column().footer()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),Xe("columns().data()","column().data()",function(){return this.iterator("column-rows",Wt,1)}),Xe("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),Xe("columns().cache()","column().cache()",function(e){return this.iterator("column-rows",function(t,n,i,r,a){return ct(t.aoData,a,"search"===e?"_aFilterData":"_aSortData",n)},1)}),Xe("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,i,r){return ct(e.aoData,r,"anCells",t)},1)}),Xe("columns().visible()","column().visible()",function(e,t){return this.iterator("column",function(n,r){return e===i?n.aoColumns[r].bVisible:void Nt(n,r,e,t)})}),Xe("columns().indexes()","column().index()",function(e){return this.iterator("column",function(t,n){return"visible"===e?f(t,n):n},1)}),Ge("columns.adjust()",function(){return this.iterator("table",function(e){p(e)},1)}),Ge("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return m(n,t);if("fromData"===e||"toVisible"===e)return f(n,t)}}),Ge("column()",function(e,t){return xt(this.columns(e,t))});var qt=function(t,n,r){var a,o,s,l,d,u,c,h=t.aoData,p=Ct(t,r),m=pt(ct(h,p,"anCells")),f=e([].concat.apply([],m)),_=t.aoColumns.length,y=function(n){var r="function"==typeof n;if(null===n||n===i||r){for(o=[],s=0,l=p.length;l>s;s++)for(a=p[s],d=0;_>d;d++)u={row:a,column:d},r?(c=h[a],n(u,D(t,a,d),c.anCells?c.anCells[d]:null)&&o.push(u)):o.push(u);return o}return e.isPlainObject(n)?[n]:f.filter(n).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray()};return Yt("cell",n,y,t,r)};Ge("cells()",function(t,n,r){if(e.isPlainObject(t)&&(t.row===i?(r=t,t=null):(r=n,n=null)),e.isPlainObject(n)&&(r=n,n=null),null===n||n===i)return this.iterator("table",function(e){return qt(e,t,kt(r))});var a,o,s,l,d,u=this.columns(n,r),c=this.rows(t,r),h=this.iterator("table",function(e,t){for(a=[],o=0,s=c[t].length;s>o;o++)for(l=0,d=u[t].length;d>l;l++)a.push({row:c[t][o],column:u[t][l]});return a},1);return e.extend(h.selector,{cols:n,rows:t,opts:r}),h}),Xe("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var r=e.aoData[t].anCells;return r?r[n]:i},1)}),Ge("cells().data()",function(){return this.iterator("cell",function(e,t,n){return D(e,t,n)},1)}),Xe("cells().cache()","cell().cache()",function(e){return e="search"===e?"_aFilterData":"_aSortData",this.iterator("cell",function(t,n,i){return t.aoData[n][e][i]},1)}),Xe("cells().render()","cell().render()",function(e){return this.iterator("cell",function(t,n,i){return D(t,n,i,e)},1)}),Xe("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:f(e,n)}},1)}),Xe("cells().invalidate()","cell().invalidate()",function(e){return this.iterator("cell",function(t,n,i){A(t,n,e,i)})}),Ge("cell()",function(e,t,n){return xt(this.cells(e,t,n))}),Ge("cell().data()",function(e){var t=this.context,n=this[0];return e===i?t.length&&n.length?D(t[0],n[0].row,n[0].column):i:(T(t[0],n[0].row,n[0].column,e),A(t[0],n[0].row,"data",n[0].column),this)}),Ge("order()",function(t,n){var r=this.context;return t===i?0!==r.length?r[0].aaSorting:i:("number"==typeof t?t=[[t,n]]:e.isArray(t[0])||(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Ge("order.listener()",function(e,t,n){return this.iterator("table",function(i){ke(i,e,t,n)})}),Ge("order.fixed()",function(t){if(!t){var n=this.context,r=n.length?n[0].aaSortingFixed:i;return e.isArray(r)?{pre:r}:r}return this.iterator("table",function(n){n.aaSortingFixed=e.extend(!0,{},t)})}),Ge(["columns().order()","column().order()"],function(t){var n=this;return this.iterator("table",function(i,r){var a=[];e.each(n[r],function(e,n){a.push([n,t])}),i.aaSorting=a})}),Ge("search()",function(t,n,r,a){var o=this.context;return t===i?0!==o.length?o[0].oPreviousSearch.sSearch:i:this.iterator("table",function(i){i.oFeatures.bFilter&&G(i,e.extend({},i.oPreviousSearch,{sSearch:t+"",bRegex:null===n?!1:n,bSmart:null===r?!0:r,bCaseInsensitive:null===a?!0:a}),1)})}),Xe("columns().search()","column().search()",function(t,n,r,a){return this.iterator("column",function(o,s){var l=o.aoPreSearchCols;return t===i?l[s].sSearch:void(o.oFeatures.bFilter&&(e.extend(l[s],{sSearch:t+"",bRegex:null===n?!1:n,bSmart:null===r?!0:r,bCaseInsensitive:null===a?!0:a}),G(o,o.oPreviousSearch,1)))})}),Ge("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Ge("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),Ge("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Ge("state.save()",function(){return this.iterator("table",function(e){He(e)})}),Be.versionCheck=Be.fnVersionCheck=function(e){for(var t,n,i=Be.version.split("."),r=e.split("."),a=0,o=r.length;o>a;a++)if(t=parseInt(i[a],10)||0,n=parseInt(r[a],10)||0,t!==n)return t>n;return!0},Be.isDataTable=Be.fnIsDataTable=function(t){var n=e(t).get(0),i=!1;return e.each(Be.settings,function(t,r){var a=r.nScrollHead?e("table",r.nScrollHead)[0]:null,o=r.nScrollFoot?e("table",r.nScrollFoot)[0]:null;(r.nTable===n||a===n||o===n)&&(i=!0)}),i},Be.tables=Be.fnTables=function(t){var n=!1;e.isPlainObject(t)&&(n=t.api,t=t.visible);var i=e.map(Be.settings,function(n){return!t||t&&e(n.nTable).is(":visible")?n.nTable:void 0});return n?new Ve(i):i},Be.util={throttle:ve,escapeRegex:ee},Be.camelToHungarian=a,Ge("$()",function(t,n){var i=this.rows(n).nodes(),r=e(i);return e([].concat(r.filter(t).toArray(),r.find(t).toArray()))}),e.each(["on","one","off"],function(t,n){Ge(n+"()",function(){var t=Array.prototype.slice.call(arguments);t[0].match(/\.dt\b/)||(t[0]+=".dt");var i=e(this.tables().nodes());return i[n].apply(i,t),this})}),Ge("clear()",function(){return this.iterator("table",function(e){C(e)})}),Ge("settings()",function(){return new Ve(this.context,this.context)}),Ge("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),Ge("data()",function(){return this.iterator("table",function(e){return ut(e.aoData,"_aData")}).flatten()}),Ge("destroy()",function(n){return n=n||!1,this.iterator("table",function(i){var r,a=i.nTableWrapper.parentNode,o=i.oClasses,s=i.nTable,l=i.nTBody,d=i.nTHead,u=i.nTFoot,c=e(s),h=e(l),p=e(i.nTableWrapper),m=e.map(i.aoData,function(e){return e.nTr});i.bDestroying=!0,Fe(i,"aoDestroyCallback","destroy",[i]),n||new Ve(i).columns().visible(!0),p.unbind(".DT").find(":not(tbody *)").unbind(".DT"),e(t).unbind(".DT-"+i.sInstance),s!=d.parentNode&&(c.children("thead").detach(),c.append(d)),u&&s!=u.parentNode&&(c.children("tfoot").detach(),c.append(u)),i.aaSorting=[],i.aaSortingFixed=[],xe(i),e(m).removeClass(i.asStripeClasses.join(" ")),e("th, td",d).removeClass(o.sSortable+" "+o.sSortableAsc+" "+o.sSortableDesc+" "+o.sSortableNone),i.bJUI&&(e("th span."+o.sSortIcon+", td span."+o.sSortIcon,d).detach(),e("th, td",d).each(function(){var t=e("div."+o.sSortJUIWrapper,this);e(this).append(t.contents()),t.detach()})),h.children().detach(),h.append(m);var f=n?"remove":"detach";c[f](),p[f](),!n&&a&&(a.insertBefore(s,i.nTableReinsertBefore),c.css("width",i.sDestroyWidth).removeClass(o.sTable),r=i.asDestroyStripes.length,r&&h.children().each(function(t){e(this).addClass(i.asDestroyStripes[t%r])}));var _=e.inArray(i,Be.settings);-1!==_&&Be.settings.splice(_,1)})}),e.each(["column","row","cell"],function(e,t){Ge(t+"s().every()",function(e){var n=this.selector.opts,r=this;return this.iterator(t,function(a,o,s,l,d){e.call(r[t](o,"cell"===t?s:n,"cell"===t?n:i),o,s,l,d)})})}),Ge("i18n()",function(t,n,r){var a=this.context[0],o=Y(t)(a.oLanguage);return o===i&&(o=n),r!==i&&e.isPlainObject(o)&&(o=o[r]!==i?o[r]:o._),o.replace("%d",r)}),Be.version="1.10.10",Be.settings=[],Be.models={},Be.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Be.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Be.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Be.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((-1===e.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(t){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(-1===e.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:e.extend({},Be.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},r(Be.defaults),Be.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},r(Be.defaults.column),Be.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,
bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:i,oAjaxData:i,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==Ne(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==Ne(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,i=this.aiDisplay.length,r=this.oFeatures,a=r.bPaginate;return r.bServerSide?a===!1||-1===e?t+i:Math.min(t+e,this._iRecordsDisplay):!a||n>i||-1===e?i:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Be.ext=Je={buttons:{},classes:{},builder:"-source-",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Be.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Be.version},e.extend(Je,{afnFiltering:Je.search,aTypes:Je.type.detect,ofnSearch:Je.type.search,oSort:Je.type.order,afnSortData:Je.order,aoFeatures:Je.feature,oApi:Je.internal,oStdClasses:Je.classes,oPagination:Je.pager}),e.extend(Be.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var t="";t="";var n=t+"ui-state-default",i=t+"css_right ui-icon ui-icon-",r=t+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";e.extend(Be.ext.oJUIClasses,Be.ext.classes,{sPageButton:"fg-button ui-button "+n,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:n+" sorting_asc",sSortDesc:n+" sorting_desc",sSortable:n+" sorting",sSortableAsc:n+" sorting_asc_disabled",sSortableDesc:n+" sorting_desc_disabled",sSortableNone:n+" sorting_disabled",sSortJUIAsc:i+"triangle-1-n",sSortJUIDesc:i+"triangle-1-s",sSortJUI:i+"carat-2-n-s",sSortJUIAscAllowed:i+"carat-1-n",sSortJUIDescAllowed:i+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+n,sScrollFoot:"dataTables_scrollFoot "+n,sHeaderTH:n,sFooterTH:n,sJUIHeader:r+" ui-corner-tl ui-corner-tr",sJUIFooter:r+" ui-corner-bl ui-corner-br"})}();var Rt=Be.ext.pager;e.extend(Rt,{simple:function(e,t){return["previous","next"]},full:function(e,t){return["first","previous","next","last"]},numbers:function(e,t){return[qe(e,t)]},simple_numbers:function(e,t){return["previous",qe(e,t),"next"]},full_numbers:function(e,t){return["first","previous",qe(e,t),"next","last"]},_numbers:qe,numbers_length:7}),e.extend(!0,Be.ext.renderer,{pageButton:{_:function(t,i,r,a,o,s){var l,d,u,c=t.oClasses,h=t.oLanguage.oPaginate,p=t.oLanguage.oAria.paginate||{},m=0,f=function(n,i){var a,u,_,y,g=function(e){he(t,e.data.action,!0)};for(a=0,u=i.length;u>a;a++)if(y=i[a],e.isArray(y)){var v=e("<"+(y.DT_el||"div")+"/>").appendTo(n);f(v,y)}else{switch(l=null,d="",y){case"ellipsis":n.append('<span class="ellipsis">&#x2026;</span>');break;case"first":l=h.sFirst,d=y+(o>0?"":" "+c.sPageButtonDisabled);break;case"previous":l=h.sPrevious,d=y+(o>0?"":" "+c.sPageButtonDisabled);break;case"next":l=h.sNext,d=y+(s-1>o?"":" "+c.sPageButtonDisabled);break;case"last":l=h.sLast,d=y+(s-1>o?"":" "+c.sPageButtonDisabled);break;default:l=y+1,d=o===y?c.sPageButtonActive:""}null!==l&&(_=e("<a>",{"class":c.sPageButton+" "+d,"aria-controls":t.sTableId,"aria-label":p[y],"data-dt-idx":m,tabindex:t.iTabIndex,id:0===r&&"string"==typeof y?t.sTableId+"_"+y:null}).html(l).appendTo(n),Oe(_,{action:y},g),m++)}};try{u=e(i).find(n.activeElement).data("dt-idx")}catch(_){}f(e(i).empty(),a),u&&e(i).find("[data-dt-idx="+u+"]").focus()}}}),e.extend(Be.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return st(e,n)?"num"+n:null},function(e,t){if(e&&!(e instanceof Date)&&(!et.test(e)||!tt.test(e)))return null;var n=Date.parse(e);return null!==n&&!isNaN(n)||rt(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return st(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return dt(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return dt(e,n,!0)?"html-num-fmt"+n:null},function(e,t){return rt(e)||"string"==typeof e&&-1!==e.indexOf("<")?"html":null}]),e.extend(Be.ext.type.search,{html:function(e){return rt(e)?e:"string"==typeof e?e.replace(Ze," ").replace(Ke,""):""},string:function(e){return rt(e)?e:"string"==typeof e?e.replace(Ze," "):e}});var Ut=function(e,t,n,i){return 0===e||e&&"-"!==e?(t&&(e=ot(e,t)),e.replace&&(n&&(e=e.replace(n,"")),i&&(e=e.replace(i,""))),1*e):-(1/0)};return e.extend(Je.type.order,{"date-pre":function(e){return Date.parse(e)||0},"html-pre":function(e){return rt(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return rt(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return t>e?-1:e>t?1:0},"string-desc":function(e,t){return t>e?1:e>t?-1:0}}),Re(""),e.extend(!0,Be.ext.renderer,{header:{_:function(t,n,i,r){e(t.nTable).on("order.dt.DT",function(e,a,o,s){if(t===a){var l=i.idx;n.removeClass(i.sSortingClass+" "+r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:i.sSortingClass)}})},jqueryui:function(t,n,i,r){e("<div/>").addClass(r.sSortJUIWrapper).append(n.contents()).append(e("<span/>").addClass(r.sSortIcon+" "+i.sSortingClassJUI)).appendTo(n),e(t.nTable).on("order.dt.DT",function(e,a,o,s){if(t===a){var l=i.idx;n.removeClass(r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:i.sSortingClass),n.find("span."+r.sSortIcon).removeClass(r.sSortJUIAsc+" "+r.sSortJUIDesc+" "+r.sSortJUI+" "+r.sSortJUIAscAllowed+" "+r.sSortJUIDescAllowed).addClass("asc"==s[l]?r.sSortJUIAsc:"desc"==s[l]?r.sSortJUIDesc:i.sSortingClassJUI)}})}}}),Be.render={number:function(e,t,n,i,r){return{display:function(a){if("number"!=typeof a&&"string"!=typeof a)return a;var o=0>a?"-":"",s=parseFloat(a);if(isNaN(s))return a;a=Math.abs(s);var l=parseInt(a,10),d=n?t+(a-l).toFixed(n).substring(2):"";return o+(i||"")+l.toString().replace(/\B(?=(\d{3})+(?!\d))/g,e)+d+(r||"")}}},text:function(){return{display:function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e}}}},e.extend(Be.ext.internal,{_fnExternApiFunc:Ue,_fnBuildAjax:q,_fnAjaxUpdate:R,_fnAjaxParameters:U,_fnAjaxUpdateDraw:B,_fnAjaxDataSrc:J,_fnAddColumn:c,_fnColumnOptions:h,_fnAdjustColumnSizing:p,_fnVisibleToColumnIndex:m,_fnColumnIndexToVisible:f,_fnVisbleColumns:_,_fnGetColumns:y,_fnColumnTypes:g,_fnApplyColumnDefs:v,_fnHungarianMap:r,_fnCamelToHungarian:a,_fnLanguageCompat:o,_fnBrowserDetect:d,_fnAddData:M,_fnAddTr:b,_fnNodeToDataIndex:L,_fnNodeToColumnIndex:w,_fnGetCellData:D,_fnSetCellData:T,_fnSplitObjNotation:S,_fnGetObjectDataFn:Y,_fnSetObjectDataFn:k,_fnGetDataMaster:x,_fnClearTable:C,_fnDeleteIndex:H,_fnInvalidate:A,_fnGetRowElements:E,_fnCreateTr:j,_fnBuildHead:P,_fnDrawHead:O,_fnDraw:z,_fnReDraw:F,_fnAddOptionsHtml:W,_fnDetectHeader:$,_fnGetUniqueThs:N,_fnFeatureHtmlFilter:V,_fnFilterComplete:G,_fnFilterCustom:X,_fnFilterColumn:Q,_fnFilter:Z,_fnFilterCreateSearch:K,_fnEscapeRegex:ee,_fnFilterData:te,_fnFeatureHtmlInfo:re,_fnUpdateInfo:ae,_fnInfoMacros:oe,_fnInitialise:se,_fnInitComplete:le,_fnLengthChange:de,_fnFeatureHtmlLength:ue,_fnFeatureHtmlPaginate:ce,_fnPageChange:he,_fnFeatureHtmlProcessing:pe,_fnProcessingDisplay:me,_fnFeatureHtmlTable:fe,_fnScrollDraw:_e,_fnApplyToChildren:ye,_fnCalculateColumnWidths:ge,_fnThrottle:ve,_fnConvertToWidth:Me,_fnGetWidestNode:be,_fnGetMaxLenString:Le,_fnStringToCss:we,_fnSortFlatten:De,_fnSort:Te,_fnSortAria:Se,_fnSortListener:Ye,_fnSortAttachListener:ke,_fnSortingClasses:xe,_fnSortData:Ce,_fnSaveState:He,_fnLoadState:Ae,_fnSettingsFromNode:Ee,_fnLog:je,_fnMap:Ie,_fnBindAction:Oe,_fnCallbackReg:ze,_fnCallbackFire:Fe,_fnLengthOverflow:We,_fnRenderer:$e,_fnDataSource:Ne,_fnRowAttributes:I,_fnCalculateEnd:function(){}}),e.fn.dataTable=Be,Be.$=e,e.fn.dataTableSettings=Be.settings,e.fn.dataTableExt=Be.ext,e.fn.DataTable=function(t){return e(this).dataTable(t).api()},e.each(Be,function(t,n){e.fn.DataTable[t]=n}),e.fn.dataTable}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd)var t=e.fn.select2.amd;var t;return function(){if(!t||!t.requirejs){t?n=t:t={};var e,n,i;!function(t){function r(e,t){return M.call(e,t)}function a(e,t){var n,i,r,a,o,s,l,d,u,c,h,p=t&&t.split("/"),m=g.map,f=m&&m["*"]||{};if(e&&"."===e.charAt(0))if(t){for(e=e.split("/"),o=e.length-1,g.nodeIdCompat&&L.test(e[o])&&(e[o]=e[o].replace(L,"")),e=p.slice(0,p.length-1).concat(e),u=0;u<e.length;u+=1)if(h=e[u],"."===h)e.splice(u,1),u-=1;else if(".."===h){if(1===u&&(".."===e[2]||".."===e[0]))break;u>0&&(e.splice(u-1,2),u-=2)}e=e.join("/")}else 0===e.indexOf("./")&&(e=e.substring(2));if((p||f)&&m){for(n=e.split("/"),u=n.length;u>0;u-=1){if(i=n.slice(0,u).join("/"),p)for(c=p.length;c>0;c-=1)if(r=m[p.slice(0,c).join("/")],r&&(r=r[i])){a=r,s=u;break}if(a)break;!l&&f&&f[i]&&(l=f[i],d=u)}!a&&l&&(a=l,s=d),a&&(n.splice(0,s,a),e=n.join("/"))}return e}function o(e,n){return function(){var i=b.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),p.apply(t,i.concat([e,n]))}}function s(e){return function(t){return a(t,e)}}function l(e){return function(t){_[e]=t}}function d(e){if(r(y,e)){var n=y[e];delete y[e],v[e]=!0,h.apply(t,n)}if(!r(_,e)&&!r(v,e))throw new Error("No "+e);return _[e]}function u(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function c(e){return function(){return g&&g.config&&g.config[e]||{}}}var h,p,m,f,_={},y={},g={},v={},M=Object.prototype.hasOwnProperty,b=[].slice,L=/\.js$/;m=function(e,t){var n,i=u(e),r=i[0];return e=i[1],r&&(r=a(r,t),n=d(r)),r?e=n&&n.normalize?n.normalize(e,s(t)):a(e,t):(e=a(e,t),i=u(e),r=i[0],e=i[1],r&&(n=d(r))),{f:r?r+"!"+e:e,n:e,pr:r,p:n}},f={require:function(e){return o(e)},exports:function(e){var t=_[e];return"undefined"!=typeof t?t:_[e]={}},module:function(e){return{id:e,uri:"",exports:_[e],config:c(e)}}},h=function(e,n,i,a){var s,u,c,h,p,g,M=[],b=typeof i;if(a=a||e,"undefined"===b||"function"===b){for(n=!n.length&&i.length?["require","exports","module"]:n,p=0;p<n.length;p+=1)if(h=m(n[p],a),u=h.f,"require"===u)M[p]=f.require(e);else if("exports"===u)M[p]=f.exports(e),g=!0;else if("module"===u)s=M[p]=f.module(e);else if(r(_,u)||r(y,u)||r(v,u))M[p]=d(u);else{if(!h.p)throw new Error(e+" missing "+u);h.p.load(h.n,o(a,!0),l(u),{}),M[p]=_[u]}c=i?i.apply(_[e],M):void 0,e&&(s&&s.exports!==t&&s.exports!==_[e]?_[e]=s.exports:c===t&&g||(_[e]=c))}else e&&(_[e]=i)},e=n=p=function(e,n,i,r,a){if("string"==typeof e)return f[e]?f[e](n):d(m(e,n).f);if(!e.splice){if(g=e,g.deps&&p(g.deps,g.callback),!n)return;n.splice?(e=n,n=i,i=null):e=t}return n=n||function(){},"function"==typeof i&&(i=r,r=a),r?h(t,e,n,i):setTimeout(function(){h(t,e,n,i)},4),p},p.config=function(e){return p(e)},e._defined=_,i=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),r(_,e)||r(y,e)||(y[e]=[e,t,n])},i.amd={jQuery:!0}}(),t.requirejs=e,t.require=n,t.define=i}}(),t.define("almond",function(){}),t.define("jquery",[],function(){var t=e||$;return null==t&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),t}),t.define("select2/utils",["jquery"],function(e){function t(e){var t=e.prototype,n=[];for(var i in t){var r=t[i];"function"==typeof r&&"constructor"!==i&&n.push(i)}return n}var n={};n.Extend=function(e,t){function n(){this.constructor=e}var i={}.hasOwnProperty;for(var r in t)i.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},n.Decorate=function(e,n){function i(){var t=Array.prototype.unshift,i=n.prototype.constructor.length,r=e.prototype.constructor;i>0&&(t.call(arguments,e.prototype.constructor),r=n.prototype.constructor),r.apply(this,arguments)}function r(){this.constructor=i}var a=t(n),o=t(e);n.displayName=e.displayName,i.prototype=new r;for(var s=0;s<o.length;s++){var l=o[s];i.prototype[l]=e.prototype[l]}for(var d=(function(e){var t=function(){};e in i.prototype&&(t=i.prototype[e]);var r=n.prototype[e];return function(){var e=Array.prototype.unshift;return e.call(arguments,t),r.apply(this,arguments)}}),u=0;u<a.length;u++){var c=a[u];i.prototype[c]=d(c)}return i};var i=function(){this.listeners={}};return i.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},i.prototype.trigger=function(e){var t=Array.prototype.slice;this.listeners=this.listeners||{},e in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(e,t){for(var n=0,i=e.length;i>n;n++)e[n].apply(this,t)},n.Observable=i,n.generateChars=function(e){for(var t="",n=0;e>n;n++){var i=Math.floor(36*Math.random());t+=i.toString(36)}return t},n.bind=function(e,t){return function(){e.apply(t,arguments)}},n._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var r=0;r<n.length;r++){var a=n[r];a=a.substring(0,1).toLowerCase()+a.substring(1),a in i||(i[a]={}),r==n.length-1&&(i[a]=e[t]),i=i[a]}delete e[t]}}return e},n.hasScroll=function(t,n){var i=e(n),r=n.style.overflowX,a=n.style.overflowY;return r!==a||"hidden"!==a&&"visible"!==a?"scroll"===r||"scroll"===a?!0:i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth:!1},n.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},n.appendMany=function(t,n){if("1.7"===e.fn.jquery.substr(0,3)){var i=e();e.map(n,function(e){i=i.add(e)}),n=i}t.append(n)},n}),t.define("select2/results",["jquery","./utils"],function(e,t){function n(e,t,i){this.$element=e,this.data=i,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&t.attr("aria-multiselectable","true"),this.$results=t,t},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(t){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=e('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),r=this.options.get("translations").get(t.message);i.append(n(r(t.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(e){this.hideLoading();var t=[];if(null==e.results||0===e.results.length)return void(0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"}));e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],r=this.option(i);t.push(r)}this.$results.append(t)},n.prototype.position=function(e,t){var n=t.find(".select2-results");n.append(e)},n.prototype.sort=function(e){var t=this.options.get("sorter");return t(e)},n.prototype.setClasses=function(){var t=this;this.data.current(function(n){var i=e.map(n,function(e){return e.id.toString()}),r=t.$results.find(".select2-results__option[aria-selected]");r.each(function(){var t=e(this),n=e.data(this,"data"),r=""+n.id;null!=n.element&&n.element.selected||null==n.element&&e.inArray(r,i)>-1?t.attr("aria-selected","true"):t.attr("aria-selected","false")});var a=r.filter("[aria-selected=true]");a.length>0?a.first().trigger("mouseenter"):r.first().trigger("mouseenter")})},n.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:t(e)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(t){var n=document.createElement("li");n.className="select2-results__option";var i={role:"treeitem","aria-selected":"false"};t.disabled&&(delete i["aria-selected"],i["aria-disabled"]="true"),null==t.id&&delete i["aria-selected"],null!=t._resultId&&(n.id=t._resultId),t.title&&(n.title=t.title),t.children&&(i.role="group",i["aria-label"]=t.text,delete i["aria-selected"]);for(var r in i){var a=i[r];n.setAttribute(r,a)}if(t.children){var o=e(n),s=document.createElement("strong");s.className="select2-results__group";e(s);this.template(t,s);for(var l=[],d=0;d<t.children.length;d++){var u=t.children[d],c=this.option(u);l.push(c)}var h=e("<ul></ul>",{"class":"select2-results__options select2-results__options--nested"});h.append(l),o.append(s),o.append(h)}else this.template(t,n);return e.data(n,"data",t),n},n.prototype.bind=function(t,n){var i=this,r=t.id+"-results";this.$results.attr("id",r),t.on("results:all",function(e){i.clear(),i.append(e.data),t.isOpen()&&i.setClasses()}),t.on("results:append",function(e){i.append(e.data),t.isOpen()&&i.setClasses()}),t.on("query",function(e){i.hideMessages(),i.showLoading(e)}),t.on("select",function(){t.isOpen()&&i.setClasses()}),t.on("unselect",function(){t.isOpen()&&i.setClasses()}),t.on("open",function(){i.$results.attr("aria-expanded","true"),i.$results.attr("aria-hidden","false"),i.setClasses(),i.ensureHighlightVisible()}),t.on("close",function(){i.$results.attr("aria-expanded","false"),i.$results.attr("aria-hidden","true"),i.$results.removeAttr("aria-activedescendant")}),t.on("results:toggle",function(){var e=i.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),t.on("results:select",function(){var e=i.getHighlightedResults();if(0!==e.length){var t=e.data("data");"true"==e.attr("aria-selected")?i.trigger("close",{}):i.trigger("select",{data:t})}}),t.on("results:previous",function(){var e=i.getHighlightedResults(),t=i.$results.find("[aria-selected]"),n=t.index(e);if(0!==n){var r=n-1;0===e.length&&(r=0);var a=t.eq(r);a.trigger("mouseenter");var o=i.$results.offset().top,s=a.offset().top,l=i.$results.scrollTop()+(s-o);0===r?i.$results.scrollTop(0):0>s-o&&i.$results.scrollTop(l)}}),t.on("results:next",function(){var e=i.getHighlightedResults(),t=i.$results.find("[aria-selected]"),n=t.index(e),r=n+1;if(!(r>=t.length)){var a=t.eq(r);a.trigger("mouseenter");var o=i.$results.offset().top+i.$results.outerHeight(!1),s=a.offset().top+a.outerHeight(!1),l=i.$results.scrollTop()+s-o;0===r?i.$results.scrollTop(0):s>o&&i.$results.scrollTop(l)}}),t.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")}),t.on("results:message",function(e){i.displayMessage(e)}),e.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=i.$results.scrollTop(),n=i.$results.get(0).scrollHeight-i.$results.scrollTop()+e.deltaY,r=e.deltaY>0&&t-e.deltaY<=0,a=e.deltaY<0&&n<=i.$results.height();r?(i.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):a&&(i.$results.scrollTop(i.$results.get(0).scrollHeight-i.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(t){var n=e(this),r=n.data("data");return"true"===n.attr("aria-selected")?void(i.options.get("multiple")?i.trigger("unselect",{originalEvent:t,data:r}):i.trigger("close",{})):void i.trigger("select",{originalEvent:t,data:r})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(t){var n=e(this).data("data");i.getHighlightedResults().removeClass("select2-results__option--highlighted"),i.trigger("results:focus",{data:n,element:e(this)})})},n.prototype.getHighlightedResults=function(){var e=this.$results.find(".select2-results__option--highlighted");return e},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(0!==e.length){var t=this.$results.find("[aria-selected]"),n=t.index(e),i=this.$results.offset().top,r=e.offset().top,a=this.$results.scrollTop()+(r-i),o=r-i;a-=2*e.outerHeight(!1),2>=n?this.$results.scrollTop(0):(o>this.$results.outerHeight()||0>o)&&this.$results.scrollTop(a)}},n.prototype.template=function(t,n){var i=this.options.get("templateResult"),r=this.options.get("escapeMarkup"),a=i(t,n);null==a?n.style.display="none":"string"==typeof a?n.innerHTML=r(a):e(n).append(a)},n}),t.define("select2/keys",[],function(){var e={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return e}),t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,t.Observable),i.prototype.render=function(){var t=e('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=this.$element.data("old-tabindex")?this._tabindex=this.$element.data("old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),t.attr("title",this.$element.attr("title")),t.attr("tabindex",this._tabindex),this.$selection=t,t},i.prototype.bind=function(e,t){var i=this,r=(e.id+"-container",e.id+"-results");this.container=e,this.$selection.on("focus",function(e){i.trigger("focus",e)}),this.$selection.on("blur",function(e){i._handleBlur(e)}),this.$selection.on("keydown",function(e){i.trigger("keypress",e),e.which===n.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){i.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){i.update(e.data)}),e.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",r),i._attachCloseHandler(e)}),e.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.focus(),i._detachCloseHandler(e)}),e.on("enable",function(){i.$selection.attr("tabindex",i._tabindex)}),e.on("disable",function(){i.$selection.attr("tabindex","-1")})},i.prototype._handleBlur=function(t){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||e.contains(n.$selection[0],document.activeElement)||n.trigger("blur",t)},1)},i.prototype._attachCloseHandler=function(t){e(document.body).on("mousedown.select2."+t.id,function(t){var n=e(t.target),i=n.closest(".select2"),r=e(".select2.select2-container--open");r.each(function(){var t=e(this);if(this!=i[0]){var n=t.data("element");n.select2("close")}})})},i.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)},i.prototype.position=function(e,t){var n=t.find(".selection");n.append(e)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},i}),t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function r(){r.__super__.constructor.apply(this,arguments)}return n.Extend(r,t),r.prototype.render=function(){var e=r.__super__.render.call(this);return e.addClass("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},r.prototype.bind=function(e,t){var n=this;r.__super__.bind.apply(this,arguments);var i=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),e.on("selection:update",function(e){n.update(e.data)})},r.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},r.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},r.prototype.selectionContainer=function(){return e("<span></span>")},r.prototype.update=function(e){if(0===e.length)return void this.clear();var t=e[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(t,n);n.empty().append(i),n.prop("title",t.title||t.text)},r}),t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,n){function i(e,t){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,t),i.prototype.render=function(){var e=i.__super__.render.call(this);return e.addClass("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},i.prototype.bind=function(t,n){var r=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(e){r.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(t){if(!r.options.get("disabled")){var n=e(this),i=n.parent(),a=i.data("data");r.trigger("unselect",{originalEvent:t,data:a})}})},i.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},i.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},i.prototype.selectionContainer=function(){var t=e('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');return t},i.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],i=0;i<e.length;i++){var r=e[i],a=this.selectionContainer(),o=this.display(r,a);a.append(o),a.prop("title",r.title||r.text),a.data("data",r),t.push(a)}var s=this.$selection.find(".select2-selection__rendered");n.appendMany(s,t)}},i}),t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return t.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},t.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},t.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id,i=t.length>1;if(i||n)return e.call(this,t);this.clear();var r=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r)},t}),t.define("select2/selection/allowClear",["jquery","../keys"],function(e,t){function n(){}return n.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},n.prototype._handleClear=function(e,t){if(!this.options.get("disabled")){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){t.stopPropagation();for(var i=n.data("data"),r=0;r<i.length;r++){var a={data:i[r]};if(this.trigger("unselect",a),a.prevented)return}this.$element.val(this.placeholder.id).trigger("change"),this.trigger("toggle",{})}}},n.prototype._handleKeyboardClear=function(e,n,i){i.isOpen()||(n.which==t.DELETE||n.which==t.BACKSPACE)&&this._handleClear(n)},n.prototype.update=function(t,n){if(t.call(this,n),!(this.$selection.find(".select2-selection__placeholder").length>0||0===n.length)){var i=e('<span class="select2-selection__clear">&times;</span>');i.data("data",n),this.$selection.find(".select2-selection__rendered").prepend(i)}},n}),t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,n){function i(e,t,n){e.call(this,t,n)}return i.prototype.render=function(t){var n=e('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=t.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(e,t,i){var r=this;e.call(this,t,i),t.on("open",function(){r.$search.trigger("focus")}),t.on("close",function(){r.$search.val(""),r.$search.removeAttr("aria-activedescendant"),r.$search.trigger("focus")}),t.on("enable",function(){r.$search.prop("disabled",!1),r._transferTabIndex()}),t.on("disable",function(){r.$search.prop("disabled",!0)}),t.on("focus",function(e){r.$search.trigger("focus")}),t.on("results:focus",function(e){r.$search.attr("aria-activedescendant",e.id)}),this.$selection.on("focusin",".select2-search--inline",function(e){r.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){r._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){e.stopPropagation(),r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented();var t=e.which;if(t===n.BACKSPACE&&""===r.$search.val()){var i=r.$searchContainer.prev(".select2-selection__choice");if(i.length>0){var a=i.data("data");r.searchRemoveChoice(a),e.preventDefault()}}});var a=document.documentMode,o=a&&11>=a;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){return o?void r.$selection.off("input.search input.searchcheck"):void r.$selection.off("keyup.search");
}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(o&&"input"===e.type)return void r.$selection.off("input.search input.searchcheck");var t=e.which;t!=n.SHIFT&&t!=n.CTRL&&t!=n.ALT&&t!=n.TAB&&r.handleSearch(e)})},i.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},i.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),e.call(this,t),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.focus()},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(""!==this.$search.attr("placeholder"))e=this.$selection.find(".select2-selection__rendered").innerWidth();else{var t=this.$search.val().length+1;e=.75*t+"em"}this.$search.css("width",e)},i}),t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}return t.prototype.bind=function(t,n,i){var r=this,a=["open","opening","close","closing","select","selecting","unselect","unselecting"],o=["opening","closing","selecting","unselecting"];t.call(this,n,i),n.on("*",function(t,n){if(-1!==e.inArray(t,a)){n=n||{};var i=e.Event("select2:"+t,{params:n});r.$element.trigger(i),-1!==e.inArray(t,o)&&(n.prevented=i.isDefaultPrevented())}})},t}),t.define("select2/translation",["jquery","require"],function(e,t){function n(e){this.dict=e||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(e){return this.dict[e]},n.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)},n._cache={},n.loadPath=function(e){if(!(e in n._cache)){var i=t(e);n._cache[e]=i}return new n(n._cache[e])},n}),t.define("select2/diacritics",[],function(){var e={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};return e}),t.define("select2/data/base",["../utils"],function(e){function t(e,n){t.__super__.constructor.call(this)}return e.Extend(t,e.Observable),t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},t.prototype.bind=function(e,t){},t.prototype.destroy=function(){},t.prototype.generateResultId=function(t,n){var i=t.id+"-result-";return i+=e.generateChars(4),i+=null!=n.id?"-"+n.id.toString():"-"+e.generateChars(4)},t}),t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,e),i.prototype.current=function(e){var t=[],i=this;this.$element.find(":selected").each(function(){var e=n(this),r=i.item(e);t.push(r)}),e(t)},i.prototype.select=function(e){var t=this;if(e.selected=!0,n(e.element).is("option"))return e.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var r=[];e=[e],e.push.apply(e,i);for(var a=0;a<e.length;a++){var o=e[a].id;-1===n.inArray(o,r)&&r.push(o)}t.$element.val(r),t.$element.trigger("change")});else{var i=e.id;this.$element.val(i),this.$element.trigger("change")}},i.prototype.unselect=function(e){var t=this;if(this.$element.prop("multiple"))return e.selected=!1,n(e.element).is("option")?(e.element.selected=!1,void this.$element.trigger("change")):void this.current(function(i){for(var r=[],a=0;a<i.length;a++){var o=i[a].id;o!==e.id&&-1===n.inArray(o,r)&&r.push(o)}t.$element.val(r),t.$element.trigger("change")})},i.prototype.bind=function(e,t){var n=this;this.container=e,e.on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){n.removeData(this,"data")})},i.prototype.query=function(e,t){var i=[],r=this,a=this.$element.children();a.each(function(){var t=n(this);if(t.is("option")||t.is("optgroup")){var a=r.item(t),o=r.matches(e,a);null!==o&&i.push(o)}}),t({results:i})},i.prototype.addOptions=function(e){t.appendMany(this.$element,e)},i.prototype.option=function(e){var t;e.children?(t=document.createElement("optgroup"),t.label=e.text):(t=document.createElement("option"),void 0!==t.textContent?t.textContent=e.text:t.innerText=e.text),e.id&&(t.value=e.id),e.disabled&&(t.disabled=!0),e.selected&&(t.selected=!0),e.title&&(t.title=e.title);var i=n(t),r=this._normalizeItem(e);return r.element=t,n.data(t,"data",r),i},i.prototype.item=function(e){var t={};if(t=n.data(e[0],"data"),null!=t)return t;if(e.is("option"))t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if(e.is("optgroup")){t={text:e.prop("label"),children:[],title:e.prop("title")};for(var i=e.children("option"),r=[],a=0;a<i.length;a++){var o=n(i[a]),s=this.item(o);r.push(s)}t.children=r}return t=this._normalizeItem(t),t.element=e[0],n.data(e[0],"data",t),t},i.prototype._normalizeItem=function(e){n.isPlainObject(e)||(e={id:e,text:e}),e=n.extend({},{text:""},e);var t={selected:!1,disabled:!1};return null!=e.id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),n.extend({},t,e)},i.prototype.matches=function(e,t){var n=this.options.get("matcher");return n(e,t)},i}),t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,n){function i(e,t){var n=t.get("data")||[];i.__super__.constructor.call(this,e,t),this.addOptions(this.convertToOptions(n))}return t.Extend(i,e),i.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,n){return n.value==e.id.toString()});0===t.length&&(t=this.option(e),this.addOptions(t)),i.__super__.select.call(this,e)},i.prototype.convertToOptions=function(e){function i(e){return function(){return n(this).val()==e.id}}for(var r=this,a=this.$element.find("option"),o=a.map(function(){return r.item(n(this)).id}).get(),s=[],l=0;l<e.length;l++){var d=this._normalizeItem(e[l]);if(n.inArray(d.id,o)>=0){var u=a.filter(i(d)),c=this.item(u),h=n.extend(!0,{},c,d),p=this.option(h);u.replaceWith(p)}else{var m=this.option(d);if(d.children){var f=this.convertToOptions(d.children);t.appendMany(m,f)}s.push(m)}}return s},i}),t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,n){function i(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype._applyDefaults=function(e){var t={data:function(e){return n.extend({},e,{q:e.term})},transport:function(e,t,i){var r=n.ajax(e);return r.then(t),r.fail(i),r}};return n.extend({},t,e,!0)},i.prototype.processResults=function(e){return e},i.prototype.query=function(e,t){function i(){var i=a.transport(a,function(i){var a=r.processResults(i,e);r.options.get("debug")&&window.console&&console.error&&(a&&a.results&&n.isArray(a.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),t(a)},function(){});r._request=i}var r=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var a=n.extend({type:"GET"},this.ajaxOptions);"function"==typeof a.url&&(a.url=a.url.call(this.$element,e)),"function"==typeof a.data&&(a.data=a.data.call(this.$element,e)),this.ajaxOptions.delay&&""!==e.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},i}),t.define("select2/data/tags",["jquery"],function(e){function t(t,n,i){var r=i.get("tags"),a=i.get("createTag");if(void 0!==a&&(this.createTag=a),t.call(this,n,i),e.isArray(r))for(var o=0;o<r.length;o++){var s=r[o],l=this._normalizeItem(s),d=this.option(l);this.$element.append(d)}}return t.prototype.query=function(e,t,n){function i(e,a){for(var o=e.results,s=0;s<o.length;s++){var l=o[s],d=null!=l.children&&!i({results:l.children},!0),u=l.text===t.term;if(u||d)return a?!1:(e.data=o,void n(e))}if(a)return!0;var c=r.createTag(t);if(null!=c){var h=r.option(c);h.attr("data-select2-tag",!0),r.addOptions([h]),r.insertTag(o,c)}e.results=o,n(e)}var r=this;return this._removeOldTags(),null==t.term||null!=t.page?void e.call(this,t,n):void e.call(this,t,i)},t.prototype.createTag=function(t,n){var i=e.trim(n.term);return""===i?null:{id:i,text:i}},t.prototype.insertTag=function(e,t,n){t.unshift(n)},t.prototype._removeOldTags=function(t){var n=(this._lastTag,this.$element.find("option[data-select2-tag]"));n.each(function(){this.selected||e(this).remove()})},t}),t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return t.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},t.prototype.query=function(e,t,n){function i(e){r.trigger("select",{data:e})}var r=this;t.term=t.term||"";var a=this.tokenizer(t,this.options,i);a.term!==t.term&&(this.$search.length&&(this.$search.val(a.term),this.$search.focus()),t.term=a.term),e.call(this,t,n)},t.prototype.tokenizer=function(t,n,i,r){for(var a=i.get("tokenSeparators")||[],o=n.term,s=0,l=this.createTag||function(e){return{id:e.term,text:e.term}};s<o.length;){var d=o[s];if(-1!==e.inArray(d,a)){var u=o.substr(0,s),c=e.extend({},n,{term:u}),h=l(c);null!=h?(r(h),o=o.substr(s+1)||"",s=0):s++}else s++}return{term:o}},t}),t.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){return t.term=t.term||"",t.term.length<this.minimumInputLength?void this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}}):void e.call(this,t,n)},e}),t.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){return t.term=t.term||"",this.maximumInputLength>0&&t.term.length>this.maximumInputLength?void this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}}):void e.call(this,t,n)},e}),t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){var i=this;this.current(function(r){var a=null!=r?r.length:0;return i.maximumSelectionLength>0&&a>=i.maximumSelectionLength?void i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):void e.call(i,t,n)})},e}),t.define("select2/dropdown",["jquery","./utils"],function(e,t){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<span class="select2-dropdown"><span class="select2-results"></span></span>');return t.attr("dir",this.options.get("dir")),this.$dropdown=t,t},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function n(){}return n.prototype.render=function(t){var n=t.call(this),i=e('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),this.$search.on("keydown",function(e){r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(t){e(this).off("keyup")}),this.$search.on("keyup input",function(e){r.handleSearch(e)}),n.on("open",function(){r.$search.attr("tabindex",0),r.$search.focus(),window.setTimeout(function(){r.$search.focus()},0)}),n.on("close",function(){r.$search.attr("tabindex",-1),r.$search.val("")}),n.on("results:all",function(e){if(null==e.query.term||""===e.query.term){var t=r.showSearch(e);t?r.$searchContainer.removeClass("select2-search--hide"):r.$searchContainer.addClass("select2-search--hide")}})},n.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.showSearch=function(e,t){return!0},n}),t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;i>=0;i--){var r=t[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},e}),t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return t.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&this.$results.append(this.$loadingMore)},t.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),n.on("query",function(e){r.lastParams=e,r.loading=!0}),n.on("query:append",function(e){r.lastParams=e,r.loading=!0}),this.$results.on("scroll",function(){var t=e.contains(document.documentElement,r.$loadingMore[0]);if(!r.loading&&t){var n=r.$results.offset().top+r.$results.outerHeight(!1),i=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(!1);n+50>=i&&r.loadMore()}})},t.prototype.loadMore=function(){this.loading=!0;var t=e.extend({},{page:1},this.lastParams);t.page++,this.trigger("query:append",t)},t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},t.prototype.createLoadingMore=function(){var t=e('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return t.html(n(this.lastParams)),t},t}),t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function n(t,n,i){this.$dropdownParent=i.get("dropdownParent")||e(document.body),t.call(this,n,i)}return n.prototype.bind=function(e,t,n){var i=this,r=!1;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),r||(r=!0,t.on("results:all",function(){i._positionDropdown(),i._resizeDropdown()}),t.on("results:append",function(){i._positionDropdown(),i._resizeDropdown()}))}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},n.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t.removeClass("select2"),t.addClass("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(t){var n=e("<span></span>"),i=t.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},n.prototype._attachPositioningHandler=function(n,i){var r=this,a="scroll.select2."+i.id,o="resize.select2."+i.id,s="orientationchange.select2."+i.id,l=this.$container.parents().filter(t.hasScroll);l.each(function(){e(this).data("select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})}),l.on(a,function(t){var n=e(this).data("select2-scroll-position");e(this).scrollTop(n.y)}),e(window).on(a+" "+o+" "+s,function(e){r._positionDropdown(),r._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var r="scroll.select2."+i.id,a="resize.select2."+i.id,o="orientationchange.select2."+i.id,s=this.$container.parents().filter(t.hasScroll);s.off(r),e(window).off(r+" "+a+" "+o)},n.prototype._positionDropdown=function(){var t=e(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),r=null,a=(this.$container.position(),this.$container.offset());a.bottom=a.top+this.$container.outerHeight(!1);var o={height:this.$container.outerHeight(!1)};o.top=a.top,o.bottom=a.top+o.height;var s={height:this.$dropdown.outerHeight(!1)},l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()},d=l.top<a.top-s.height,u=l.bottom>a.bottom+s.height,c={left:a.left,top:o.bottom};if("static"!==this.$dropdownParent[0].style.position){var h=this.$dropdownParent.offset();c.top-=h.top,c.left-=h.left}n||i||(r="below"),u||!d||n?!d&&u&&n&&(r="below"):r="above",("above"==r||n&&"below"!==r)&&(c.top=o.top-s.height),null!=r&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)),this.$dropdownContainer.css(c)},n.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.width="auto"),this.$dropdown.css(e)},n.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(t){for(var n=0,i=0;i<t.length;i++){var r=t[i];r.children?n+=e(r.children):n++}return n}function t(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return t.prototype.showSearch=function(t,n){return e(n.data.results)<this.minimumResultsForSearch?!1:t.call(this,n)},t}),t.define("select2/dropdown/selectOnClose",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(){i._handleSelectOnClose()})},e.prototype._handleSelectOnClose=function(){var e=this.getHighlightedResults();if(!(e.length<1)){var t=e.data("data");null!=t.element&&t.element.selected||null==t.element&&t.selected||this.trigger("select",{data:t})}},e}),t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&n.ctrlKey||this.trigger("close",{})},e}),t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,n="Please delete "+t+" character";return 1!=t&&(n+="s"),n},inputTooShort:function(e){var t=e.minimum-e.input.length,n="Please enter "+t+" or more characters";return n},loadingMore:function(){return"Loading more results…"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searching…"}}}),t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,n,i,r,a,o,s,l,d,u,c,h,p,m,f,_,y,g,v,M,b,L,w,D,T,S,Y,k){function x(){this.reset()}x.prototype.apply=function(c){if(c=e.extend({},this.defaults,c),null==c.dataAdapter){if(null!=c.ajax?c.dataAdapter=m:null!=c.data?c.dataAdapter=p:c.dataAdapter=h,c.minimumInputLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,y)),c.maximumInputLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,g)),c.maximumSelectionLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,v)),c.tags&&(c.dataAdapter=d.Decorate(c.dataAdapter,f)),(null!=c.tokenSeparators||null!=c.tokenizer)&&(c.dataAdapter=d.Decorate(c.dataAdapter,_)),null!=c.query){var k=t(c.amdBase+"compat/query");c.dataAdapter=d.Decorate(c.dataAdapter,k)}if(null!=c.initSelection){var x=t(c.amdBase+"compat/initSelection");c.dataAdapter=d.Decorate(c.dataAdapter,x)}}if(null==c.resultsAdapter&&(c.resultsAdapter=n,null!=c.ajax&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,w)),null!=c.placeholder&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,L)),c.selectOnClose&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,S))),null==c.dropdownAdapter){if(c.multiple)c.dropdownAdapter=M;else{var C=d.Decorate(M,b);c.dropdownAdapter=C}if(0!==c.minimumResultsForSearch&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,T)),c.closeOnSelect&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,Y)),null!=c.dropdownCssClass||null!=c.dropdownCss||null!=c.adaptDropdownCssClass){var H=t(c.amdBase+"compat/dropdownCss");c.dropdownAdapter=d.Decorate(c.dropdownAdapter,H)}c.dropdownAdapter=d.Decorate(c.dropdownAdapter,D)}if(null==c.selectionAdapter){if(c.multiple?c.selectionAdapter=r:c.selectionAdapter=i,null!=c.placeholder&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,a)),c.allowClear&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,o)),c.multiple&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,s)),null!=c.containerCssClass||null!=c.containerCss||null!=c.adaptContainerCssClass){var A=t(c.amdBase+"compat/containerCss");c.selectionAdapter=d.Decorate(c.selectionAdapter,A)}c.selectionAdapter=d.Decorate(c.selectionAdapter,l)}if("string"==typeof c.language)if(c.language.indexOf("-")>0){var E=c.language.split("-"),j=E[0];c.language=[c.language,j]}else c.language=[c.language];if(e.isArray(c.language)){var I=new u;c.language.push("en");for(var P=c.language,O=0;O<P.length;O++){var z=P[O],F={};try{F=u.loadPath(z)}catch(W){try{z=this.defaults.amdLanguageBase+z,F=u.loadPath(z)}catch($){c.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+z+'" could not be automatically loaded. A fallback will be used instead.');continue}}I.extend(F)}c.translations=I}else{var N=u.loadPath(this.defaults.amdLanguageBase+"en"),q=new u(c.language);q.extend(N),c.translations=q}return c},x.prototype.reset=function(){function t(e){function t(e){return c[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function n(i,r){if(""===e.trim(i.term))return r;if(r.children&&r.children.length>0){for(var a=e.extend(!0,{},r),o=r.children.length-1;o>=0;o--){var s=r.children[o],l=n(i,s);null==l&&a.children.splice(o,1)}return a.children.length>0?a:n(i,a)}var d=t(r.text).toUpperCase(),u=t(i.term).toUpperCase();return d.indexOf(u)>-1?r:null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:d.escapeMarkup,language:k,matcher:n,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},x.prototype.set=function(t,n){var i=e.camelCase(t),r={};r[i]=n;var a=d._convertData(r);e.extend(this.defaults,a)};var C=new x;return C}),t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,n,i){function r(t,r){if(this.options=t,null!=r&&this.fromElement(r),this.options=n.apply(this.options),r&&r.is("input")){var a=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,a)}}return r.prototype.fromElement=function(e){var n=["select2"];null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.language&&(e.prop("lang")?this.options.language=e.prop("lang").toLowerCase():e.closest("[lang]").prop("lang")&&(this.options.language=e.closest("[lang]").prop("lang"))),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),e.data("select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),
e.data("data",e.data("select2Tags")),e.data("tags",!0)),e.data("ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",e.data("ajaxUrl")),e.data("ajax--url",e.data("ajaxUrl")));var r={};r=t.fn.jquery&&"1."==t.fn.jquery.substr(0,2)&&e[0].dataset?t.extend(!0,{},e[0].dataset,e.data()):e.data();var a=t.extend(!0,{},r);a=i._convertData(a);for(var o in a)t.inArray(o,n)>-1||(t.isPlainObject(this.options[o])?t.extend(this.options[o],a[o]):this.options[o]=a[o]);return this},r.prototype.get=function(e){return this.options[e]},r.prototype.set=function(e,t){this.options[e]=t},r}),t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,n,i){var r=function(e,n){null!=e.data("select2")&&e.data("select2").destroy(),this.$element=e,this.id=this._generateId(e),n=n||{},this.options=new t(n,e),r.__super__.constructor.call(this);var i=e.attr("tabindex")||0;e.data("old-tabindex",i),e.attr("tabindex","-1");var a=this.options.get("dataAdapter");this.dataAdapter=new a(e,this.options);var o=this.render();this._placeContainer(o);var s=this.options.get("selectionAdapter");this.selection=new s(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,o);var l=this.options.get("dropdownAdapter");this.dropdown=new l(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,o);var d=this.options.get("resultsAdapter");this.results=new d(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){u.trigger("selection:update",{data:e})}),e.addClass("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),e.data("select2",this)};return n.Extend(r,n.Observable),r.prototype._generateId=function(e){var t="";return t=null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+n.generateChars(2):n.generateChars(4),t="select2-"+t},r.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},r.prototype._resolveWidth=function(e,t){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t){var i=this._resolveWidth(e,"style");return null!=i?i:this._resolveWidth(e,"element")}if("element"==t){var r=e.outerWidth(!1);return 0>=r?"auto":r+"px"}if("style"==t){var a=e.attr("style");if("string"!=typeof a)return null;for(var o=a.split(";"),s=0,l=o.length;l>s;s+=1){var d=o[s].replace(/\s/g,""),u=d.match(n);if(null!==u&&u.length>=1)return u[1]}return null}return t},r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},r.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})}),this._sync=n.bind(this._syncAttributes,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._sync);var i=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=i?(this._observer=new i(function(n){e.each(n,t._sync)}),this._observer.observe(this.$element[0],{attributes:!0,subtree:!1})):this.$element[0].addEventListener&&this.$element[0].addEventListener("DOMAttrModified",t._sync,!1)},r.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerSelectionEvents=function(){var t=this,n=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()}),this.selection.on("focus",function(e){t.focus(e)}),this.selection.on("*",function(i,r){-1===e.inArray(i,n)&&t.trigger(i,r)})},r.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")}),this.on("close",function(){e.$container.removeClass("select2-container--open")}),this.on("enable",function(){e.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){e.$container.addClass("select2-container--disabled")}),this.on("blur",function(){e.$container.removeClass("select2-container--focus")}),this.on("query",function(t){e.isOpen()||e.trigger("open",{}),this.dataAdapter.query(t,function(n){e.trigger("results:all",{data:n,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(n){e.trigger("results:append",{data:n,query:t})})}),this.on("keypress",function(t){var n=t.which;e.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&t.altKey?(e.close(),t.preventDefault()):n===i.ENTER?(e.trigger("results:select",{}),t.preventDefault()):n===i.SPACE&&t.ctrlKey?(e.trigger("results:toggle",{}),t.preventDefault()):n===i.UP?(e.trigger("results:previous",{}),t.preventDefault()):n===i.DOWN&&(e.trigger("results:next",{}),t.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&t.altKey)&&(e.open(),t.preventDefault())})},r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},r.prototype.trigger=function(e,t){var n=r.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(void 0===t&&(t={}),e in i){var a=i[e],o={prevented:!1,name:e,args:t};if(n.call(this,a,o),o.prevented)return void(t.prevented=!0)}n.call(this,e,t)},r.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},r.prototype.open=function(){this.isOpen()||this.trigger("query",{})},r.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},r.prototype.focus=function(e){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},r.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),(null==e||0===e.length)&&(e=[!0]);var t=!e[0];this.$element.prop("disabled",t)},r.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var e=[];return this.dataAdapter.current(function(t){e=t}),e},r.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==t||0===t.length)return this.$element.val();var n=t[0];e.isArray(n)&&(n=e.map(n,function(e){return e.toString()})),this.$element.val(n).trigger("change")},r.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._sync),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&this.$element[0].removeEventListener("DOMAttrModified",this._sync,!1),this._sync=null,this.$element.off(".select2"),this.$element.attr("tabindex",this.$element.data("old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},r.prototype.render=function(){var t=e('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return t.attr("dir",this.options.get("dir")),this.$container=t,this.$container.addClass("select2-container--"+this.options.get("theme")),t.data("element",this.$element),t},r}),t.define("jquery-mousewheel",["jquery"],function(e){return e}),t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(e,t,n,i){if(null==e.fn.select2){var r=["open","close","destroy"];e.fn.select2=function(t){if(t=t||{},"object"==typeof t)return this.each(function(){var i=e.extend(!0,{},t);new n(e(this),i)}),this;if("string"==typeof t){var i;return this.each(function(){var n=e(this).data("select2");null==n&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2.");var r=Array.prototype.slice.call(arguments,1);i=n[t].apply(n,r)}),e.inArray(t,r)>-1?this:i}throw new Error("Invalid arguments for Select2: "+t)}}return null==e.fn.select2.defaults&&(e.fn.select2.defaults=i),n}),{define:t.define,require:t.require}}(),n=t.require("jquery.select2");return e.fn.select2.amd=t,n}),function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var e=jQuery.fn.select2.amd;return e.define("select2/i18n/ru",[],function(){function e(e,t,n,i){return 5>e%10&&e%10>0&&5>e%100||e%100>20?e%10>1?n:t:i}return{errorLoading:function(){return"Невозможно загрузить результаты"},inputTooLong:function(t){var n=t.input.length-t.maximum,i="Пожалуйста, введите на "+n+" символ";return i+=e(n,"","a","ов"),i+=" меньше"},inputTooShort:function(t){var n=t.minimum-t.input.length,i="Пожалуйста, введите еще хотя бы "+n+" символ";return i+=e(n,"","a","ов")},loadingMore:function(){return"Загрузка данных…"},maximumSelected:function(t){var n="Вы можете выбрать не более "+t.maximum+" элемент";return n+=e(t.maximum,"","a","ов")},noResults:function(){return"Совпадений не найдено"},searching:function(){return"Поиск…"}}}),{define:e.define,require:e.require}}(),function(e){function t(t,n,i){var r=e.Event(n);return t.trigger(r,i),r.result!==!1}e(document).on("click","[data-trigger='modal'], [data-trigger='nifty']",function(){var t=e(this).data("target");e(t).nifty("show")}),e(document).on("click",".md-overlay",function(){e(".nifty-modal.md-show").nifty("hide")}),e(document).on("click",".nifty-modal.md-show .md-close",function(){e(this).closest(".nifty-modal.md-show").nifty("hide")}),e.fn.extend({nifty:function(n){var i=this,r="transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",a=function(n){var a=!1;if(t(e(i),"show.nifty.modal")){e(i).one(r,function(t){a||(a=!0,t.preventDefault(),t.stopPropagation(),e(i).trigger("shown.nifty.modal"))});var o=Math.floor(e(i).width()/2),s=Math.floor(e(i).height()/2);e(".nifty-modal").css("transform","translateX(-"+o+"px) translateY(-"+s+"px)"),e(i).addClass("md-show")}},o=function(){var n=!1;t(e(i),"hide.nifty.modal")&&(e(i).one(r,function(t){n||(n=!0,t.preventDefault(),t.stopPropagation(),e(i).trigger("hidden.nifty.modal"))}),e(i).removeClass("md-show"))};return"show"==n?a():"hide"==n&&o(),this}})}(jQuery),function(){var e;e=function(){function e(e,t){var n,i;if(this.options={target:"instafeed",get:"popular",resolution:"thumbnail",sortBy:"none",links:!0,mock:!1,useHttp:!1},"object"==typeof e)for(n in e)i=e[n],this.options[n]=i;this.context=null!=t?t:this,this.unique=this._genKey()}return e.prototype.hasNext=function(){return"string"==typeof this.context.nextUrl&&this.context.nextUrl.length>0},e.prototype.next=function(){return this.hasNext()?this.run(this.context.nextUrl):!1},e.prototype.run=function(t){var n,i,r;if("string"!=typeof this.options.clientId&&"string"!=typeof this.options.accessToken)throw new Error("Missing clientId or accessToken.");if("string"!=typeof this.options.accessToken&&"string"!=typeof this.options.clientId)throw new Error("Missing clientId or accessToken.");return null!=this.options.before&&"function"==typeof this.options.before&&this.options.before.call(this),"undefined"!=typeof document&&null!==document&&(r=document.createElement("script"),r.id="instafeed-fetcher",r.src=t||this._buildUrl(),n=document.getElementsByTagName("head"),n[0].appendChild(r),i="instafeedCache"+this.unique,window[i]=new e(this.options,this),window[i].unique=this.unique),!0},e.prototype.parse=function(e){var t,n,i,r,a,o,s,l,d,u,c,h,p,m,f,_,y,g,v,M,b,L,w,D,T,S,Y,k,x,C,H,A,E;if("object"!=typeof e){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"Invalid JSON data"),!1;throw new Error("Invalid JSON response")}if(200!==e.meta.code){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,e.meta.error_message),!1;throw new Error("Error from Instagram: "+e.meta.error_message)}if(0===e.data.length){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"No images were returned from Instagram"),!1;throw new Error("No images were returned from Instagram")}if(null!=this.options.success&&"function"==typeof this.options.success&&this.options.success.call(this,e),this.context.nextUrl="",null!=e.pagination&&(this.context.nextUrl=e.pagination.next_url),"none"!==this.options.sortBy)switch(H="random"===this.options.sortBy?["","random"]:this.options.sortBy.split("-"),C="least"===H[0]?!0:!1,H[1]){case"random":e.data.sort(function(){return.5-Math.random()});break;case"recent":e.data=this._sortBy(e.data,"created_time",C);break;case"liked":e.data=this._sortBy(e.data,"likes.count",C);break;case"commented":e.data=this._sortBy(e.data,"comments.count",C);break;default:throw new Error("Invalid option for sortBy: '"+this.options.sortBy+"'.")}if("undefined"!=typeof document&&null!==document&&this.options.mock===!1){if(_=e.data,x=parseInt(this.options.limit,10),null!=this.options.limit&&_.length>x&&(_=_.slice(0,x)),s=document.createDocumentFragment(),null!=this.options.filter&&"function"==typeof this.options.filter&&(_=this._filter(_,this.options.filter)),null!=this.options.template&&"string"==typeof this.options.template){for(d="",m="",M="",E=document.createElement("div"),c=0,T=_.length;T>c;c++){if(h=_[c],p=h.images[this.options.resolution],"object"!=typeof p)throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);b=p.width,g=p.height,v="square",b>g&&(v="landscape"),g>b&&(v="portrait"),f=p.url,u=window.location.protocol.indexOf("http")>=0,u&&!this.options.useHttp&&(f=f.replace(/https?:\/\//,"//")),m=this._makeTemplate(this.options.template,{model:h,id:h.id,link:h.link,type:h.type,image:f,width:b,height:g,orientation:v,caption:this._getObjectProperty(h,"caption.text"),likes:h.likes.count,comments:h.comments.count,location:this._getObjectProperty(h,"location.name")}),d+=m}for(E.innerHTML=d,r=[],i=0,n=E.childNodes.length;n>i;)r.push(E.childNodes[i]),i+=1;for(w=0,S=r.length;S>w;w++)k=r[w],s.appendChild(k)}else for(D=0,Y=_.length;Y>D;D++){if(h=_[D],y=document.createElement("img"),p=h.images[this.options.resolution],"object"!=typeof p)throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);f=p.url,u=window.location.protocol.indexOf("http")>=0,u&&!this.options.useHttp&&(f=f.replace(/https?:\/\//,"//")),y.src=f,this.options.links===!0?(t=document.createElement("a"),t.href=h.link,t.appendChild(y),s.appendChild(t)):s.appendChild(y)}if(A=this.options.target,"string"==typeof A&&(A=document.getElementById(A)),null==A)throw o='No element with id="'+this.options.target+'" on page.',new Error(o);A.appendChild(s),l=document.getElementsByTagName("head")[0],l.removeChild(document.getElementById("instafeed-fetcher")),L="instafeedCache"+this.unique,window[L]=void 0;try{delete window[L]}catch(j){a=j}}return null!=this.options.after&&"function"==typeof this.options.after&&this.options.after.call(this),!0},e.prototype._buildUrl=function(){var e,t,n;switch(e="https://api.instagram.com/v1",this.options.get){case"popular":t="media/popular";break;case"tagged":if(!this.options.tagName)throw new Error("No tag name specified. Use the 'tagName' option.");t="tags/"+this.options.tagName+"/media/recent";break;case"location":if(!this.options.locationId)throw new Error("No location specified. Use the 'locationId' option.");t="locations/"+this.options.locationId+"/media/recent";break;case"user":if(!this.options.userId)throw new Error("No user specified. Use the 'userId' option.");t="users/"+this.options.userId+"/media/recent";break;default:throw new Error("Invalid option for get: '"+this.options.get+"'.")}return n=e+"/"+t,n+=null!=this.options.accessToken?"?access_token="+this.options.accessToken:"?client_id="+this.options.clientId,null!=this.options.limit&&(n+="&count="+this.options.limit),n+="&callback=instafeedCache"+this.unique+".parse"},e.prototype._genKey=function(){var e;return e=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)},""+e()+e()+e()+e()},e.prototype._makeTemplate=function(e,t){var n,i,r,a,o;for(i=/(?:\{{2})([\w\[\]\.]+)(?:\}{2})/,n=e;i.test(n);)a=n.match(i)[1],o=null!=(r=this._getObjectProperty(t,a))?r:"",n=n.replace(i,function(){return""+o});return n},e.prototype._getObjectProperty=function(e,t){var n,i;for(t=t.replace(/\[(\w+)\]/g,".$1"),i=t.split(".");i.length;){if(n=i.shift(),!(null!=e&&n in e))return null;e=e[n]}return e},e.prototype._sortBy=function(e,t,n){var i;return i=function(e,i){var r,a;return r=this._getObjectProperty(e,t),a=this._getObjectProperty(i,t),n?r>a?1:-1:a>r?1:-1},e.sort(i.bind(this)),e},e.prototype._filter=function(e,t){var n,i,r,a,o;for(n=[],i=function(e){return t(e)?n.push(e):void 0},r=0,o=e.length;o>r;r++)a=e[r],i(a);return n},e}(),function(e,t){return"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&module.exports?module.exports=t():e.Instafeed=t()}(this,function(){return e})}.call(this),!function(e,t,n){"use strict";!function i(e,t,n){function r(o,s){if(!t[o]){if(!e[o]){var l="function"==typeof require&&require;if(!s&&l)return l(o,!0);if(a)return a(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var u=t[o]={exports:{}};e[o][0].call(u.exports,function(t){var n=e[o][1][t];return r(n?n:t)},u,u.exports,i,e,t,n)}return t[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(i,r,a){var o=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(a,"__esModule",{value:!0});var s,l,d,u,c=i("./modules/handle-dom"),h=i("./modules/utils"),p=i("./modules/handle-swal-dom"),m=i("./modules/handle-click"),f=i("./modules/handle-key"),_=o(f),y=i("./modules/default-params"),g=o(y),v=i("./modules/set-params"),M=o(v);a["default"]=d=u=function(){function i(e){var t=r;return t[e]===n?g["default"][e]:t[e]}var r=arguments[0];if(c.addClass(t.body,"stop-scrolling"),p.resetInput(),r===n)return h.logStr("SweetAlert expects at least 1 attribute!"),!1;var a=h.extend({},g["default"]);switch(typeof r){case"string":a.title=r,a.text=arguments[1]||"",a.type=arguments[2]||"";break;case"object":if(r.title===n)return h.logStr('Missing "title" argument!'),!1;a.title=r.title;for(var o in g["default"])a[o]=i(o);a.confirmButtonText=a.showCancelButton?"Confirm":g["default"].confirmButtonText,a.confirmButtonText=i("confirmButtonText"),a.doneFunction=arguments[1]||null;break;default:return h.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof r),!1}M["default"](a),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var d=p.getModal(),f=d.querySelectorAll("button"),y=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],v=function(e){return m.handleButton(e,a,d)},b=0;b<f.length;b++)for(var L=0;L<y.length;L++){var w=y[L];f[b][w]=v}p.getOverlay().onclick=v,s=e.onkeydown;var D=function(e){return _["default"](e,a,d)};e.onkeydown=D,e.onfocus=function(){setTimeout(function(){l!==n&&(l.focus(),l=n)},0)},u.enableButtons()},d.setDefaults=u.setDefaults=function(e){if(!e)throw new Error("userParams is required");if("object"!=typeof e)throw new Error("userParams has to be a object");h.extend(g["default"],e)},d.close=u.close=function(){var i=p.getModal();c.fadeOut(p.getOverlay(),5),c.fadeOut(i,5),c.removeClass(i,"showSweetAlert"),c.addClass(i,"hideSweetAlert"),c.removeClass(i,"visible");var r=i.querySelector(".sa-icon.sa-success");c.removeClass(r,"animate"),c.removeClass(r.querySelector(".sa-tip"),"animateSuccessTip"),c.removeClass(r.querySelector(".sa-long"),"animateSuccessLong");var a=i.querySelector(".sa-icon.sa-error");c.removeClass(a,"animateErrorIcon"),c.removeClass(a.querySelector(".sa-x-mark"),"animateXMark");var o=i.querySelector(".sa-icon.sa-warning");return c.removeClass(o,"pulseWarning"),c.removeClass(o.querySelector(".sa-body"),"pulseWarningIns"),c.removeClass(o.querySelector(".sa-dot"),"pulseWarningIns"),setTimeout(function(){var e=i.getAttribute("data-custom-class");c.removeClass(i,e)},300),c.removeClass(t.body,"stop-scrolling"),e.onkeydown=s,e.previousActiveElement&&e.previousActiveElement.focus(),l=n,clearTimeout(i.timeout),!0},d.showInputError=u.showInputError=function(e){var t=p.getModal(),n=t.querySelector(".sa-input-error");c.addClass(n,"show");var i=t.querySelector(".sa-error-container");c.addClass(i,"show"),i.querySelector("p").innerHTML=e,setTimeout(function(){d.enableButtons()},1),t.querySelector("input").focus()},d.resetInputError=u.resetInputError=function(e){if(e&&13===e.keyCode)return!1;var t=p.getModal(),n=t.querySelector(".sa-input-error");c.removeClass(n,"show");var i=t.querySelector(".sa-error-container");c.removeClass(i,"show")},d.disableButtons=u.disableButtons=function(){var e=p.getModal(),t=e.querySelector("button.confirm"),n=e.querySelector("button.cancel");t.disabled=!0,n.disabled=!0},d.enableButtons=u.enableButtons=function(){var e=p.getModal(),t=e.querySelector("button.confirm"),n=e.querySelector("button.cancel");t.disabled=!1,n.disabled=!1},"undefined"!=typeof e?e.sweetAlert=e.swal=d:h.logStr("SweetAlert is a frontend module!"),r.exports=a["default"]},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};n["default"]=i,t.exports=n["default"]},{}],3:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=t("./utils"),a=(t("./handle-swal-dom"),t("./handle-dom")),o=function(t,n,i){function o(e){m&&n.confirmButtonColor&&(p.style.backgroundColor=e)}var d,u,c,h=t||e.event,p=h.target||h.srcElement,m=-1!==p.className.indexOf("confirm"),f=-1!==p.className.indexOf("sweet-overlay"),_=a.hasClass(i,"visible"),y=n.doneFunction&&"true"===i.getAttribute("data-has-done-function");switch(m&&n.confirmButtonColor&&(d=n.confirmButtonColor,u=r.colorLuminance(d,-.04),c=r.colorLuminance(d,-.14)),h.type){case"mouseover":o(u);break;case"mouseout":o(d);break;case"mousedown":o(c);break;case"mouseup":o(u);break;case"focus":var g=i.querySelector("button.confirm"),v=i.querySelector("button.cancel");m?v.style.boxShadow="none":g.style.boxShadow="none";break;case"click":var M=i===p,b=a.isDescendant(i,p);if(!M&&!b&&_&&!n.allowOutsideClick)break;m&&y&&_?s(i,n):y&&_||f?l(i,n):a.isDescendant(i,p)&&"BUTTON"===p.tagName&&sweetAlert.close()}},s=function(e,t){var n=!0;a.hasClass(e,"show-input")&&(n=e.querySelector("input").value,n||(n="")),t.doneFunction(n),t.closeOnConfirm&&sweetAlert.close(),t.showLoaderOnConfirm&&sweetAlert.disableButtons()},l=function(e,t){var n=String(t.doneFunction).replace(/\s/g,""),i="function("===n.substring(0,9)&&")"!==n.substring(9,10);i&&t.doneFunction(!1),t.closeOnCancel&&sweetAlert.close()};i["default"]={handleButton:o,handleConfirm:s,handleCancel:l},n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(n,i,r){Object.defineProperty(r,"__esModule",{value:!0});var a=function(e,t){return new RegExp(" "+t+" ").test(" "+e.className+" ")},o=function(e,t){a(e,t)||(e.className+=" "+t)},s=function(e,t){var n=" "+e.className.replace(/[\t\r\n]/g," ")+" ";if(a(e,t)){for(;n.indexOf(" "+t+" ")>=0;)n=n.replace(" "+t+" "," ");e.className=n.replace(/^\s+|\s+$/g,"")}},l=function(e){var n=t.createElement("div");return n.appendChild(t.createTextNode(e)),n.innerHTML},d=function(e){e.style.opacity="",e.style.display="block"},u=function(e){if(e&&!e.length)return d(e);for(var t=0;t<e.length;++t)d(e[t])},c=function(e){e.style.opacity="",e.style.display="none"},h=function(e){if(e&&!e.length)return c(e);for(var t=0;t<e.length;++t)c(e[t])},p=function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},m=function(e){e.style.left="-9999px",e.style.display="block";var t,n=e.clientHeight;return t="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(e).getPropertyValue("padding-top"),10):parseInt(e.currentStyle.padding),e.style.left="",e.style.display="none","-"+parseInt((n+t)/2)+"px"},f=function(e,t){if(+e.style.opacity<1){t=t||16,e.style.opacity=0,e.style.display="block";var n=+new Date,i=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity+(new Date-n)/100,n=+new Date,+e.style.opacity<1&&setTimeout(i,t)});i()}e.style.display="block"},_=function(e,t){t=t||16,e.style.opacity=1;var n=+new Date,i=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity-(new Date-n)/100,n=+new Date,+e.style.opacity>0?setTimeout(i,t):e.style.display="none"});i()},y=function(n){if("function"==typeof MouseEvent){var i=new MouseEvent("click",{view:e,bubbles:!1,cancelable:!0});n.dispatchEvent(i)}else if(t.createEvent){var r=t.createEvent("MouseEvents");r.initEvent("click",!1,!1),n.dispatchEvent(r)}else t.createEventObject?n.fireEvent("onclick"):"function"==typeof n.onclick&&n.onclick()},g=function(t){"function"==typeof t.stopPropagation?(t.stopPropagation(),t.preventDefault()):e.event&&e.event.hasOwnProperty("cancelBubble")&&(e.event.cancelBubble=!0)};r.hasClass=a,r.addClass=o,r.removeClass=s,r.escapeHtml=l,r._show=d,r.show=u,r._hide=c,r.hide=h,r.isDescendant=p,r.getTopMargin=m,r.fadeIn=f,r.fadeOut=_,r.fireClick=y,r.stopEventPropagation=g},{}],5:[function(t,i,r){Object.defineProperty(r,"__esModule",{value:!0});var a=t("./handle-dom"),o=t("./handle-swal-dom"),s=function(t,i,r){var s=t||e.event,l=s.keyCode||s.which,d=r.querySelector("button.confirm"),u=r.querySelector("button.cancel"),c=r.querySelectorAll("button[tabindex]");if(-1!==[9,13,32,27].indexOf(l)){for(var h=s.target||s.srcElement,p=-1,m=0;m<c.length;m++)if(h===c[m]){p=m;break}9===l?(h=-1===p?d:p===c.length-1?c[0]:c[p+1],a.stopEventPropagation(s),h.focus(),i.confirmButtonColor&&o.setFocusStyle(h,i.confirmButtonColor)):13===l?("INPUT"===h.tagName&&(h=d,d.focus()),h=-1===p?d:n):27===l&&i.allowEscapeKey===!0?(h=u,a.fireClick(h,s)):h=n}};r["default"]=s,i.exports=r["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(n,i,r){var a=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(r,"__esModule",{value:!0});var o=n("./utils"),s=n("./handle-dom"),l=n("./default-params"),d=a(l),u=n("./injected-html"),c=a(u),h=".sweet-alert",p=".sweet-overlay",m=function(){var e=t.createElement("div");for(e.innerHTML=c["default"];e.firstChild;)t.body.appendChild(e.firstChild)},f=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=t.querySelector(h);return e||(m(),e=f()),e}),_=function(){var e=f();return e?e.querySelector("input"):void 0},y=function(){return t.querySelector(p)},g=function(e,t){var n=o.hexToRgb(t);e.style.boxShadow="0 0 2px rgba("+n+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},v=function(n){var i=f();s.fadeIn(y(),10),s.show(i),s.addClass(i,"showSweetAlert"),s.removeClass(i,"hideSweetAlert"),e.previousActiveElement=t.activeElement;var r=i.querySelector("button.confirm");r.focus(),setTimeout(function(){s.addClass(i,"visible")},500);var a=i.getAttribute("data-timer");if("null"!==a&&""!==a){var o=n;i.timeout=setTimeout(function(){var e=(o||null)&&"true"===i.getAttribute("data-has-done-function");e?o(null):sweetAlert.close()},a)}},M=function(){var e=f(),t=_();s.removeClass(e,"show-input"),t.value=d["default"].inputValue,t.setAttribute("type",d["default"].inputType),t.setAttribute("placeholder",d["default"].inputPlaceholder),b()},b=function(e){if(e&&13===e.keyCode)return!1;var t=f(),n=t.querySelector(".sa-input-error");s.removeClass(n,"show");var i=t.querySelector(".sa-error-container");s.removeClass(i,"show")},L=function(){var e=f();e.style.marginTop=s.getTopMargin(f())};r.sweetAlertInitialize=m,r.getModal=f,r.getOverlay=y,r.getInput=_,r.setFocusStyle=g,r.openModal=v,r.resetInput=M,r.resetInputError=b,r.fixVerticalPosition=L},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"]=i,t.exports=n["default"]},{}],8:[function(e,t,i){Object.defineProperty(i,"__esModule",{value:!0});var r=e("./utils"),a=e("./handle-swal-dom"),o=e("./handle-dom"),s=["error","warning","info","success","input","prompt"],l=function(e){var t=a.getModal(),i=t.querySelector("h2"),l=t.querySelector("p"),d=t.querySelector("button.cancel"),u=t.querySelector("button.confirm");if(i.innerHTML=e.html?e.title:o.escapeHtml(e.title).split("\n").join("<br>"),l.innerHTML=e.html?e.text:o.escapeHtml(e.text||"").split("\n").join("<br>"),e.text&&o.show(l),e.customClass)o.addClass(t,e.customClass),t.setAttribute("data-custom-class",e.customClass);else{var c=t.getAttribute("data-custom-class");o.removeClass(t,c),
t.setAttribute("data-custom-class","")}if(o.hide(t.querySelectorAll(".sa-icon")),e.type&&!r.isIE8()){var h=function(){for(var i=!1,r=0;r<s.length;r++)if(e.type===s[r]){i=!0;break}if(!i)return logStr("Unknown alert type: "+e.type),{v:!1};var l=["success","error","warning","info"],d=n;-1!==l.indexOf(e.type)&&(d=t.querySelector(".sa-icon.sa-"+e.type),o.show(d));var u=a.getInput();switch(e.type){case"success":o.addClass(d,"animate"),o.addClass(d.querySelector(".sa-tip"),"animateSuccessTip"),o.addClass(d.querySelector(".sa-long"),"animateSuccessLong");break;case"error":o.addClass(d,"animateErrorIcon"),o.addClass(d.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":o.addClass(d,"pulseWarning"),o.addClass(d.querySelector(".sa-body"),"pulseWarningIns"),o.addClass(d.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":u.setAttribute("type",e.inputType),u.value=e.inputValue,u.setAttribute("placeholder",e.inputPlaceholder),o.addClass(t,"show-input"),setTimeout(function(){u.focus(),u.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof h)return h.v}if(e.imageUrl){var p=t.querySelector(".sa-icon.sa-custom");p.style.backgroundImage="url("+e.imageUrl+")",o.show(p);var m=80,f=80;if(e.imageSize){var _=e.imageSize.toString().split("x"),y=_[0],g=_[1];y&&g?(m=y,f=g):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+e.imageSize)}p.setAttribute("style",p.getAttribute("style")+"width:"+m+"px; height:"+f+"px")}t.setAttribute("data-has-cancel-button",e.showCancelButton),e.showCancelButton?d.style.display="inline-block":o.hide(d),t.setAttribute("data-has-confirm-button",e.showConfirmButton),e.showConfirmButton?u.style.display="inline-block":o.hide(u),e.cancelButtonText&&(d.innerHTML=o.escapeHtml(e.cancelButtonText)),e.confirmButtonText&&(u.innerHTML=o.escapeHtml(e.confirmButtonText)),e.confirmButtonColor&&(u.style.backgroundColor=e.confirmButtonColor,u.style.borderLeftColor=e.confirmLoadingButtonColor,u.style.borderRightColor=e.confirmLoadingButtonColor,a.setFocusStyle(u,e.confirmButtonColor)),t.setAttribute("data-allow-outside-click",e.allowOutsideClick);var v=e.doneFunction?!0:!1;t.setAttribute("data-has-done-function",v),e.animation?"string"==typeof e.animation?t.setAttribute("data-animation",e.animation):t.setAttribute("data-animation","pop"):t.setAttribute("data-animation","none"),t.setAttribute("data-timer",e.timer)};i["default"]=l,t.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},a=function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?parseInt(t[1],16)+", "+parseInt(t[2],16)+", "+parseInt(t[3],16):null},o=function(){return e.attachEvent&&!e.addEventListener},s=function(t){e.console&&e.console.log("SweetAlert: "+t)},l=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,""),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;var n,i,r="#";for(i=0;3>i;i++)n=parseInt(e.substr(2*i,2),16),n=Math.round(Math.min(Math.max(0,n+n*t),255)).toString(16),r+=("00"+n).substr(n.length);return r};i.extend=r,i.hexToRgb=a,i.isIE8=o,i.logStr=s,i.colorLuminance=l},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document),function(e){e.fn.fitText=function(t,n){var i=t||1,r=e.extend({minFontSize:Number.NEGATIVE_INFINITY,maxFontSize:Number.POSITIVE_INFINITY},n);return this.each(function(){var t=e(this),n=function(){t.css("font-size",Math.max(Math.min(t.width()/(10*i),parseFloat(r.maxFontSize)),parseFloat(r.minFontSize)))};n(),e(window).on("resize.fittext orientationchange.fittext",n)})}}(jQuery),!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t,n=navigator.userAgent,i=/iphone/i.test(n),r=/chrome/i.test(n),a=/android/i.test(n);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;return 0===this.length||this.is(":hidden")?void 0:"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(n,o){var s,l,d,u,c,h,p,m;if(!n&&this.length>0){s=e(this[0]);var f=s.data(e.mask.dataName);return f?f():void 0}return o=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},o),l=e.mask.definitions,d=[],u=p=n.length,c=null,e.each(n.split(""),function(e,t){"?"==t?(p--,u=e):l[t]?(d.push(new RegExp(l[t])),null===c&&(c=d.length-1),u>e&&(h=d.length-1)):d.push(null)}),this.trigger("unmask").each(function(){function s(){if(o.completed){for(var e=c;h>=e;e++)if(d[e]&&k[e]===f(e))return;o.completed.call(Y)}}function f(e){return o.placeholder.charAt(e<o.placeholder.length?e:0)}function _(e){for(;++e<p&&!d[e];);return e}function y(e){for(;--e>=0&&!d[e];);return e}function g(e,t){var n,i;if(!(0>e)){for(n=e,i=_(t);p>n;n++)if(d[n]){if(!(p>i&&d[n].test(k[i])))break;k[n]=k[i],k[i]=f(i),i=_(i)}T(),Y.caret(Math.max(c,e))}}function v(e){var t,n,i,r;for(t=e,n=f(e);p>t;t++)if(d[t]){if(i=_(t),r=k[t],k[t]=n,!(p>i&&d[i].test(r)))break;n=r}}function M(){var e=Y.val(),t=Y.caret();if(m&&m.length&&m.length>e.length){for(S(!0);t.begin>0&&!d[t.begin-1];)t.begin--;if(0===t.begin)for(;t.begin<c&&!d[t.begin];)t.begin++;Y.caret(t.begin,t.begin)}else{for(S(!0);t.begin<p&&!d[t.begin];)t.begin++;Y.caret(t.begin,t.begin)}s()}function b(){S(),Y.val()!=C&&Y.change()}function L(e){if(!Y.prop("readonly")){var t,n,r,a=e.which||e.keyCode;m=Y.val(),8===a||46===a||i&&127===a?(t=Y.caret(),n=t.begin,r=t.end,r-n===0&&(n=46!==a?y(n):r=_(n-1),r=46===a?_(r):r),D(n,r),g(n,r-1),e.preventDefault()):13===a?b.call(this,e):27===a&&(Y.val(C),Y.caret(0,S()),e.preventDefault())}}function w(t){if(!Y.prop("readonly")){var n,i,r,o=t.which||t.keyCode,l=Y.caret();if(!(t.ctrlKey||t.altKey||t.metaKey||32>o)&&o&&13!==o){if(l.end-l.begin!==0&&(D(l.begin,l.end),g(l.begin,l.end-1)),n=_(l.begin-1),p>n&&(i=String.fromCharCode(o),d[n].test(i))){if(v(n),k[n]=i,T(),r=_(n),a){var u=function(){e.proxy(e.fn.caret,Y,r)()};setTimeout(u,0)}else Y.caret(r);l.begin<=h&&s()}t.preventDefault()}}}function D(e,t){var n;for(n=e;t>n&&p>n;n++)d[n]&&(k[n]=f(n))}function T(){Y.val(k.join(""))}function S(e){var t,n,i,r=Y.val(),a=-1;for(t=0,i=0;p>t;t++)if(d[t]){for(k[t]=f(t);i++<r.length;)if(n=r.charAt(i-1),d[t].test(n)){k[t]=n,a=t;break}if(i>r.length){D(t+1,p);break}}else k[t]===r.charAt(i)&&i++,u>t&&(a=t);return e?T():u>a+1?o.autoclear||k.join("")===x?(Y.val()&&Y.val(""),D(0,p)):T():(T(),Y.val(Y.val().substring(0,a+1))),u?t:c}var Y=e(this),k=e.map(n.split(""),function(e,t){return"?"!=e?l[e]?f(t):e:void 0}),x=k.join(""),C=Y.val();Y.data(e.mask.dataName,function(){return e.map(k,function(e,t){return d[t]&&e!=f(t)?e:null}).join("")}),Y.one("unmask",function(){Y.off(".mask").removeData(e.mask.dataName)}).on("focus.mask",function(){if(!Y.prop("readonly")){clearTimeout(t);var e;C=Y.val(),e=S(),t=setTimeout(function(){Y.get(0)===document.activeElement&&(T(),e==n.replace("?","").length?Y.caret(0,e):Y.caret(e))},10)}}).on("blur.mask",b).on("keydown.mask",L).on("keypress.mask",w).on("input.mask paste.mask",function(){Y.prop("readonly")||setTimeout(function(){var e=S(!0);Y.caret(e),s()},0)}),r&&a&&Y.off("input.mask").on("input.mask",M),S()})}})}),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return Ri.apply(null,arguments)}function t(e){Ri=e}function n(e){return"[object Array]"===Object.prototype.toString.call(e)}function i(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function r(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function a(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function o(e,t){for(var n in t)a(t,n)&&(e[n]=t[n]);return a(t,"toString")&&(e.toString=t.toString),a(t,"valueOf")&&(e.valueOf=t.valueOf),e}function s(e,t,n,i){return xe(e,t,n,i,!0).utc()}function l(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(e){return null==e._pf&&(e._pf=l()),e._pf}function u(e){if(null==e._isValid){var t=d(e);e._isValid=!(isNaN(e._d.getTime())||!(t.overflow<0)||t.empty||t.invalidMonth||t.invalidWeekday||t.nullInput||t.invalidFormat||t.userInvalidated),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function c(e){var t=s(NaN);return null!=e?o(d(t),e):d(t).userInvalidated=!0,t}function h(e){return void 0===e}function p(e,t){var n,i,r;if(h(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),h(t._i)||(e._i=t._i),h(t._f)||(e._f=t._f),h(t._l)||(e._l=t._l),h(t._strict)||(e._strict=t._strict),h(t._tzm)||(e._tzm=t._tzm),h(t._isUTC)||(e._isUTC=t._isUTC),h(t._offset)||(e._offset=t._offset),h(t._pf)||(e._pf=d(t)),h(t._locale)||(e._locale=t._locale),Bi.length>0)for(n in Bi)i=Bi[n],r=t[i],h(r)||(e[i]=r);return e}function m(t){p(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),Ji===!1&&(Ji=!0,e.updateOffset(this),Ji=!1)}function f(e){return e instanceof m||null!=e&&null!=e._isAMomentObject}function _(e){return 0>e?Math.ceil(e):Math.floor(e)}function y(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=_(t)),n}function g(e,t,n){var i,r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),o=0;for(i=0;r>i;i++)(n&&e[i]!==t[i]||!n&&y(e[i])!==y(t[i]))&&o++;return o+a}function v(){}function M(e){return e?e.toLowerCase().replace("_","-"):e}function b(e){for(var t,n,i,r,a=0;a<e.length;){for(r=M(e[a]).split("-"),t=r.length,n=M(e[a+1]),n=n?n.split("-"):null;t>0;){if(i=L(r.slice(0,t).join("-")))return i;if(n&&n.length>=t&&g(r,n,!0)>=t-1)break;t--}a++}return null}function L(e){var t=null;if(!Vi[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=Ui._abbr,require("./locale/"+e),w(t)}catch(n){}return Vi[e]}function w(e,t){var n;return e&&(n=h(t)?T(e):D(e,t),n&&(Ui=n)),Ui._abbr}function D(e,t){return null!==t?(t.abbr=e,Vi[e]=Vi[e]||new v,Vi[e].set(t),w(e),Vi[e]):(delete Vi[e],null)}function T(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ui;if(!n(e)){if(t=L(e))return t;e=[e]}return b(e)}function S(e,t){var n=e.toLowerCase();Gi[n]=Gi[n+"s"]=Gi[t]=e}function Y(e){return"string"==typeof e?Gi[e]||Gi[e.toLowerCase()]:void 0}function k(e){var t,n,i={};for(n in e)a(e,n)&&(t=Y(n),t&&(i[t]=e[n]));return i}function x(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function C(t,n){return function(i){return null!=i?(A(this,t,i),e.updateOffset(this,n),this):H(this,t)}}function H(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function A(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function E(e,t){var n;if("object"==typeof e)for(n in e)this.set(n,e[n]);else if(e=Y(e),x(this[e]))return this[e](t);return this}function j(e,t,n){var i=""+Math.abs(e),r=t-i.length,a=e>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function I(e,t,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),e&&(Ki[e]=r),t&&(Ki[t[0]]=function(){return j(r.apply(this,arguments),t[1],t[2])}),n&&(Ki[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function P(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function O(e){var t,n,i=e.match(Xi);for(t=0,n=i.length;n>t;t++)Ki[i[t]]?i[t]=Ki[i[t]]:i[t]=P(i[t]);return function(r){var a="";for(t=0;n>t;t++)a+=i[t]instanceof Function?i[t].call(r,e):i[t];return a}}function z(e,t){return e.isValid()?(t=F(t,e.localeData()),Zi[t]=Zi[t]||O(t),Zi[t](e)):e.localeData().invalidDate()}function F(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(Qi.lastIndex=0;i>=0&&Qi.test(e);)e=e.replace(Qi,n),Qi.lastIndex=0,i-=1;return e}function W(e,t,n){yr[e]=x(t)?t:function(e,i){return e&&n?n:t}}function $(e,t){return a(yr,e)?yr[e](t._strict,t._locale):new RegExp(N(e))}function N(e){return q(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r}))}function q(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function R(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(i=function(e,n){n[t]=y(e)}),n=0;n<e.length;n++)gr[e[n]]=i}function U(e,t){R(e,function(e,n,i,r){i._w=i._w||{},t(e,i._w,i,r)})}function B(e,t,n){null!=t&&a(gr,e)&&gr[e](t,n._a,n,e)}function J(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function V(e,t){return n(this._months)?this._months[e.month()]:this._months[kr.test(t)?"format":"standalone"][e.month()]}function G(e,t){return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[kr.test(t)?"format":"standalone"][e.month()]}function X(e,t,n){var i,r,a;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=s([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function Q(e,t){var n;return e.isValid()?"string"==typeof t&&(t=e.localeData().monthsParse(t),"number"!=typeof t)?e:(n=Math.min(e.date(),J(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e):e}function Z(t){return null!=t?(Q(this,t),e.updateOffset(this,!0),this):H(this,"Month")}function K(){return J(this.year(),this.month())}function ee(e){return this._monthsParseExact?(a(this,"_monthsRegex")||ne.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}function te(e){return this._monthsParseExact?(a(this,"_monthsRegex")||ne.call(this),e?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}function ne(){function e(e,t){return t.length-e.length}var t,n,i=[],r=[],a=[];for(t=0;12>t;t++)n=s([2e3,t]),i.push(this.monthsShort(n,"")),r.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(i.sort(e),r.sort(e),a.sort(e),t=0;12>t;t++)i[t]=q(i[t]),r[t]=q(r[t]),a[t]=q(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")$","i")}function ie(e){var t,n=e._a;return n&&-2===d(e).overflow&&(t=n[Mr]<0||n[Mr]>11?Mr:n[br]<1||n[br]>J(n[vr],n[Mr])?br:n[Lr]<0||n[Lr]>24||24===n[Lr]&&(0!==n[wr]||0!==n[Dr]||0!==n[Tr])?Lr:n[wr]<0||n[wr]>59?wr:n[Dr]<0||n[Dr]>59?Dr:n[Tr]<0||n[Tr]>999?Tr:-1,d(e)._overflowDayOfYear&&(vr>t||t>br)&&(t=br),d(e)._overflowWeeks&&-1===t&&(t=Sr),d(e)._overflowWeekday&&-1===t&&(t=Yr),d(e).overflow=t),e}function re(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function ae(e,t){var n=!0;return o(function(){return n&&(re(e+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),n=!1),t.apply(this,arguments)},t)}function oe(e,t){Er[e]||(re(t),Er[e]=!0)}function se(e){var t,n,i,r,a,o,s=e._i,l=jr.exec(s)||Ir.exec(s);if(l){for(d(e).iso=!0,t=0,n=Or.length;n>t;t++)if(Or[t][1].exec(l[1])){r=Or[t][0],i=Or[t][2]!==!1;break}if(null==r)return void(e._isValid=!1);if(l[3]){for(t=0,n=zr.length;n>t;t++)if(zr[t][1].exec(l[3])){a=(l[2]||" ")+zr[t][0];break}if(null==a)return void(e._isValid=!1)}if(!i&&null!=a)return void(e._isValid=!1);if(l[4]){if(!Pr.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=r+(a||"")+(o||""),Le(e)}else e._isValid=!1}function le(t){var n=Fr.exec(t._i);return null!==n?void(t._d=new Date(+n[1])):(se(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function de(e,t,n,i,r,a,o){var s=new Date(e,t,n,i,r,a,o);return 100>e&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function ue(e){var t=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ce(e){return he(e)?366:365}function he(e){return e%4===0&&e%100!==0||e%400===0}function pe(){return he(this.year())}function me(e,t,n){var i=7+t-n,r=(7+ue(e,0,i).getUTCDay()-t)%7;return-r+i-1}function fe(e,t,n,i,r){var a,o,s=(7+n-i)%7,l=me(e,i,r),d=1+7*(t-1)+s+l;return 0>=d?(a=e-1,o=ce(a)+d):d>ce(e)?(a=e+1,o=d-ce(e)):(a=e,o=d),{year:a,dayOfYear:o}}function _e(e,t,n){var i,r,a=me(e.year(),t,n),o=Math.floor((e.dayOfYear()-a-1)/7)+1;return 1>o?(r=e.year()-1,i=o+ye(r,t,n)):o>ye(e.year(),t,n)?(i=o-ye(e.year(),t,n),r=e.year()+1):(r=e.year(),i=o),{week:i,year:r}}function ye(e,t,n){var i=me(e,t,n),r=me(e+1,t,n);return(ce(e)-i+r)/7}function ge(e,t,n){return null!=e?e:null!=t?t:n}function ve(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function Me(e){var t,n,i,r,a=[];if(!e._d){for(i=ve(e),e._w&&null==e._a[br]&&null==e._a[Mr]&&be(e),e._dayOfYear&&(r=ge(e._a[vr],i[vr]),e._dayOfYear>ce(r)&&(d(e)._overflowDayOfYear=!0),n=ue(r,0,e._dayOfYear),e._a[Mr]=n.getUTCMonth(),e._a[br]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=a[t]=i[t];for(;7>t;t++)e._a[t]=a[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Lr]&&0===e._a[wr]&&0===e._a[Dr]&&0===e._a[Tr]&&(e._nextDay=!0,e._a[Lr]=0),e._d=(e._useUTC?ue:de).apply(null,a),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Lr]=24)}}function be(e){var t,n,i,r,a,o,s,l;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(a=1,o=4,n=ge(t.GG,e._a[vr],_e(Ce(),1,4).year),i=ge(t.W,1),r=ge(t.E,1),(1>r||r>7)&&(l=!0)):(a=e._locale._week.dow,o=e._locale._week.doy,n=ge(t.gg,e._a[vr],_e(Ce(),a,o).year),i=ge(t.w,1),null!=t.d?(r=t.d,(0>r||r>6)&&(l=!0)):null!=t.e?(r=t.e+a,(t.e<0||t.e>6)&&(l=!0)):r=a),1>i||i>ye(n,a,o)?d(e)._overflowWeeks=!0:null!=l?d(e)._overflowWeekday=!0:(s=fe(n,i,r,a,o),e._a[vr]=s.year,e._dayOfYear=s.dayOfYear)}function Le(t){if(t._f===e.ISO_8601)return void se(t);t._a=[],d(t).empty=!0;var n,i,r,a,o,s=""+t._i,l=s.length,u=0;for(r=F(t._f,t._locale).match(Xi)||[],n=0;n<r.length;n++)a=r[n],i=(s.match($(a,t))||[])[0],i&&(o=s.substr(0,s.indexOf(i)),o.length>0&&d(t).unusedInput.push(o),s=s.slice(s.indexOf(i)+i.length),u+=i.length),Ki[a]?(i?d(t).empty=!1:d(t).unusedTokens.push(a),B(a,i,t)):t._strict&&!i&&d(t).unusedTokens.push(a);d(t).charsLeftOver=l-u,s.length>0&&d(t).unusedInput.push(s),d(t).bigHour===!0&&t._a[Lr]<=12&&t._a[Lr]>0&&(d(t).bigHour=void 0),t._a[Lr]=we(t._locale,t._a[Lr],t._meridiem),Me(t),ie(t)}function we(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(i=e.isPM(n),i&&12>t&&(t+=12),i||12!==t||(t=0),t):t}function De(e){var t,n,i,r,a;if(0===e._f.length)return d(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)a=0,t=p({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],Le(t),u(t)&&(a+=d(t).charsLeftOver,a+=10*d(t).unusedTokens.length,d(t).score=a,(null==i||i>a)&&(i=a,n=t));o(e,n||t)}function Te(e){if(!e._d){var t=k(e._i);e._a=r([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),Me(e)}}function Se(e){var t=new m(ie(Ye(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function Ye(e){var t=e._i,r=e._f;return e._locale=e._locale||T(e._l),null===t||void 0===r&&""===t?c({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),f(t)?new m(ie(t)):(n(r)?De(e):r?Le(e):i(t)?e._d=t:ke(e),u(e)||(e._d=null),e))}function ke(t){var a=t._i;void 0===a?t._d=new Date(e.now()):i(a)?t._d=new Date(+a):"string"==typeof a?le(t):n(a)?(t._a=r(a.slice(0),function(e){return parseInt(e,10)}),Me(t)):"object"==typeof a?Te(t):"number"==typeof a?t._d=new Date(a):e.createFromInputFallback(t)}function xe(e,t,n,i,r){var a={};return"boolean"==typeof n&&(i=n,n=void 0),a._isAMomentObject=!0,a._useUTC=a._isUTC=r,a._l=n,a._i=e,a._f=t,a._strict=i,Se(a)}function Ce(e,t,n,i){return xe(e,t,n,i,!1)}function He(e,t){var i,r;if(1===t.length&&n(t[0])&&(t=t[0]),!t.length)return Ce();for(i=t[0],r=1;r<t.length;++r)(!t[r].isValid()||t[r][e](i))&&(i=t[r]);return i}function Ae(){var e=[].slice.call(arguments,0);return He("isBefore",e)}function Ee(){var e=[].slice.call(arguments,0);return He("isAfter",e)}function je(e){var t=k(e),n=t.year||0,i=t.quarter||0,r=t.month||0,a=t.week||0,o=t.day||0,s=t.hour||0,l=t.minute||0,d=t.second||0,u=t.millisecond||0;this._milliseconds=+u+1e3*d+6e4*l+36e5*s,this._days=+o+7*a,this._months=+r+3*i+12*n,this._data={},this._locale=T(),this._bubble()}function Ie(e){return e instanceof je}function Pe(e,t){I(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+j(~~(e/60),2)+t+j(~~e%60,2)})}function Oe(e,t){var n=(t||"").match(e)||[],i=n[n.length-1]||[],r=(i+"").match(Rr)||["-",0,0],a=+(60*r[1])+y(r[2]);return"+"===r[0]?a:-a}function ze(t,n){var r,a;return n._isUTC?(r=n.clone(),a=(f(t)||i(t)?+t:+Ce(t))-+r,r._d.setTime(+r._d+a),e.updateOffset(r,!1),r):Ce(t).local()}function Fe(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function We(t,n){var i,r=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Oe(mr,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&n&&(i=Fe(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!n||this._changeInProgress?nt(this,Qe(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:Fe(this):null!=t?this:NaN}function $e(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Ne(e){return this.utcOffset(0,e)}function qe(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Fe(this),"m")),this}function Re(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Oe(pr,this._i)),this}function Ue(e){return this.isValid()?(e=e?Ce(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Be(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Je(){if(!h(this._isDSTShifted))return this._isDSTShifted;var e={};if(p(e,this),e=Ye(e),e._a){var t=e._isUTC?s(e._a):Ce(e._a);this._isDSTShifted=this.isValid()&&g(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Ve(){return this.isValid()?!this._isUTC:!1}function Ge(){return this.isValid()?this._isUTC:!1}function Xe(){return this.isValid()?this._isUTC&&0===this._offset:!1}function Qe(e,t){var n,i,r,o=e,s=null;return Ie(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(o={},t?o[t]=e:o.milliseconds=e):(s=Ur.exec(e))?(n="-"===s[1]?-1:1,o={y:0,d:y(s[br])*n,h:y(s[Lr])*n,m:y(s[wr])*n,s:y(s[Dr])*n,ms:y(s[Tr])*n}):(s=Br.exec(e))?(n="-"===s[1]?-1:1,o={y:Ze(s[2],n),M:Ze(s[3],n),d:Ze(s[4],n),h:Ze(s[5],n),m:Ze(s[6],n),s:Ze(s[7],n),w:Ze(s[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(r=et(Ce(o.from),Ce(o.to)),o={},o.ms=r.milliseconds,o.M=r.months),i=new je(o),Ie(e)&&a(e,"_locale")&&(i._locale=e._locale),i}function Ze(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Ke(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function et(e,t){var n;return e.isValid()&&t.isValid()?(t=ze(t,e),e.isBefore(t)?n=Ke(e,t):(n=Ke(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function tt(e,t){return function(n,i){var r,a;return null===i||isNaN(+i)||(oe(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period)."),a=n,n=i,i=a),n="string"==typeof n?+n:n,r=Qe(n,i),nt(this,r,e),this}}function nt(t,n,i,r){var a=n._milliseconds,o=n._days,s=n._months;t.isValid()&&(r=null==r?!0:r,a&&t._d.setTime(+t._d+a*i),o&&A(t,"Date",H(t,"Date")+o*i),s&&Q(t,H(t,"Month")+s*i),r&&e.updateOffset(t,o||s))}function it(e,t){var n=e||Ce(),i=ze(n,this).startOf("day"),r=this.diff(i,"days",!0),a=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse",o=t&&(x(t[a])?t[a]():t[a]);return this.format(o||this.localeData().calendar(a,this,Ce(n)))}function rt(){return new m(this)}function at(e,t){var n=f(e)?e:Ce(e);return this.isValid()&&n.isValid()?(t=Y(h(t)?"millisecond":t),"millisecond"===t?+this>+n:+n<+this.clone().startOf(t)):!1}function ot(e,t){var n=f(e)?e:Ce(e);return this.isValid()&&n.isValid()?(t=Y(h(t)?"millisecond":t),"millisecond"===t?+n>+this:+this.clone().endOf(t)<+n):!1}function st(e,t,n){return this.isAfter(e,n)&&this.isBefore(t,n)}function lt(e,t){var n,i=f(e)?e:Ce(e);return this.isValid()&&i.isValid()?(t=Y(t||"millisecond"),"millisecond"===t?+this===+i:(n=+i,+this.clone().startOf(t)<=n&&n<=+this.clone().endOf(t))):!1}function dt(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function ut(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function ct(e,t,n){var i,r,a,o;return this.isValid()?(i=ze(e,this),i.isValid()?(r=6e4*(i.utcOffset()-this.utcOffset()),t=Y(t),"year"===t||"month"===t||"quarter"===t?(o=ht(this,i),"quarter"===t?o/=3:"year"===t&&(o/=12)):(a=this-i,o="second"===t?a/1e3:"minute"===t?a/6e4:"hour"===t?a/36e5:"day"===t?(a-r)/864e5:"week"===t?(a-r)/6048e5:a),n?o:_(o)):NaN):NaN}function ht(e,t){var n,i,r=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(r,"months");return 0>t-a?(n=e.clone().add(r-1,"months"),i=(t-a)/(a-n)):(n=e.clone().add(r+1,"months"),i=(t-a)/(n-a)),-(r+i)}function pt(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function mt(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?x(Date.prototype.toISOString)?this.toDate().toISOString():z(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):z(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function ft(t){var n=z(this,t||e.defaultFormat);return this.localeData().postformat(n)}function _t(e,t){return this.isValid()&&(f(e)&&e.isValid()||Ce(e).isValid())?Qe({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function yt(e){return this.from(Ce(),e)}function gt(e,t){return this.isValid()&&(f(e)&&e.isValid()||Ce(e).isValid())?Qe({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function vt(e){return this.to(Ce(),e)}function Mt(e){var t;return void 0===e?this._locale._abbr:(t=T(e),null!=t&&(this._locale=t),this)}function bt(){return this._locale}function Lt(e){switch(e=Y(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function wt(e){return e=Y(e),void 0===e||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")}function Dt(){return+this._d-6e4*(this._offset||0)}function Tt(){return Math.floor(+this/1e3)}function St(){return this._offset?new Date(+this):this._d}function Yt(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function kt(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function xt(){return this.isValid()?this.toISOString():"null"}function Ct(){return u(this)}function Ht(){return o({},d(this))}function At(){return d(this).overflow}function Et(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function jt(e,t){I(0,[e,e.length],0,t)}function It(e){return Ft.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Pt(e){return Ft.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Ot(){return ye(this.year(),1,4)}function zt(){var e=this.localeData()._week;return ye(this.year(),e.dow,e.doy)}function Ft(e,t,n,i,r){var a;return null==e?_e(this,i,r).year:(a=ye(e,i,r),t>a&&(t=a),Wt.call(this,e,t,n,i,r))}function Wt(e,t,n,i,r){var a=fe(e,t,n,i,r),o=ue(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function $t(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Nt(e){return _e(e,this._week.dow,this._week.doy).week}function qt(){return this._week.dow}function Rt(){return this._week.doy}function Ut(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Bt(e){var t=_e(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function Jt(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Vt(e,t){return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}function Gt(e){return this._weekdaysShort[e.day()]}function Xt(e){return this._weekdaysMin[e.day()]}function Qt(e,t,n){var i,r,a;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;7>i;i++){if(r=Ce([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function Zt(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Jt(e,this.localeData()),this.add(e-t,"d")):t}function Kt(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function en(e){return this.isValid()?null==e?this.day()||7:this.day(this.day()%7?e:e-7):null!=e?this:NaN}function tn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function nn(){return this.hours()%12||12}function rn(e,t){I(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function an(e,t){return t._meridiemParse}function on(e){return"p"===(e+"").toLowerCase().charAt(0)}function sn(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function ln(e,t){t[Tr]=y(1e3*("0."+e))}function dn(){return this._isUTC?"UTC":""}function un(){return this._isUTC?"Coordinated Universal Time":""}function cn(e){return Ce(1e3*e)}function hn(){return Ce.apply(null,arguments).parseZone();
}function pn(e,t,n){var i=this._calendar[e];return x(i)?i.call(t,n):i}function mn(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function fn(){return this._invalidDate}function _n(e){return this._ordinal.replace("%d",e)}function yn(e){return e}function gn(e,t,n,i){var r=this._relativeTime[n];return x(r)?r(e,t,n,i):r.replace(/%d/i,e)}function vn(e,t){var n=this._relativeTime[e>0?"future":"past"];return x(n)?n(t):n.replace(/%s/i,t)}function Mn(e){var t,n;for(n in e)t=e[n],x(t)?this[n]=t:this["_"+n]=t;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function bn(e,t,n,i){var r=T(),a=s().set(i,t);return r[n](a,e)}function Ln(e,t,n,i,r){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return bn(e,t,n,r);var a,o=[];for(a=0;i>a;a++)o[a]=bn(e,a,n,r);return o}function wn(e,t){return Ln(e,t,"months",12,"month")}function Dn(e,t){return Ln(e,t,"monthsShort",12,"month")}function Tn(e,t){return Ln(e,t,"weekdays",7,"day")}function Sn(e,t){return Ln(e,t,"weekdaysShort",7,"day")}function Yn(e,t){return Ln(e,t,"weekdaysMin",7,"day")}function kn(){var e=this._data;return this._milliseconds=_a(this._milliseconds),this._days=_a(this._days),this._months=_a(this._months),e.milliseconds=_a(e.milliseconds),e.seconds=_a(e.seconds),e.minutes=_a(e.minutes),e.hours=_a(e.hours),e.months=_a(e.months),e.years=_a(e.years),this}function xn(e,t,n,i){var r=Qe(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function Cn(e,t){return xn(this,e,t,1)}function Hn(e,t){return xn(this,e,t,-1)}function An(e){return 0>e?Math.floor(e):Math.ceil(e)}function En(){var e,t,n,i,r,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||0>=a&&0>=o&&0>=s||(a+=864e5*An(In(s)+o),o=0,s=0),l.milliseconds=a%1e3,e=_(a/1e3),l.seconds=e%60,t=_(e/60),l.minutes=t%60,n=_(t/60),l.hours=n%24,o+=_(n/24),r=_(jn(o)),s+=r,o-=An(In(r)),i=_(s/12),s%=12,l.days=o,l.months=s,l.years=i,this}function jn(e){return 4800*e/146097}function In(e){return 146097*e/4800}function Pn(e){var t,n,i=this._milliseconds;if(e=Y(e),"month"===e||"year"===e)return t=this._days+i/864e5,n=this._months+jn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(In(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function On(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function zn(e){return function(){return this.as(e)}}function Fn(e){return e=Y(e),this[e+"s"]()}function Wn(e){return function(){return this._data[e]}}function $n(){return _(this.days()/7)}function Nn(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}function qn(e,t,n){var i=Qe(e).abs(),r=Aa(i.as("s")),a=Aa(i.as("m")),o=Aa(i.as("h")),s=Aa(i.as("d")),l=Aa(i.as("M")),d=Aa(i.as("y")),u=r<Ea.s&&["s",r]||1>=a&&["m"]||a<Ea.m&&["mm",a]||1>=o&&["h"]||o<Ea.h&&["hh",o]||1>=s&&["d"]||s<Ea.d&&["dd",s]||1>=l&&["M"]||l<Ea.M&&["MM",l]||1>=d&&["y"]||["yy",d];return u[2]=t,u[3]=+e>0,u[4]=n,Nn.apply(null,u)}function Rn(e,t){return void 0===Ea[e]?!1:void 0===t?Ea[e]:(Ea[e]=t,!0)}function Un(e){var t=this.localeData(),n=qn(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function Bn(){var e,t,n,i=ja(this._milliseconds)/1e3,r=ja(this._days),a=ja(this._months);e=_(i/60),t=_(e/60),i%=60,e%=60,n=_(a/12),a%=12;var o=n,s=a,l=r,d=t,u=e,c=i,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(o?o+"Y":"")+(s?s+"M":"")+(l?l+"D":"")+(d||u||c?"T":"")+(d?d+"H":"")+(u?u+"M":"")+(c?c+"S":""):"P0D"}function Jn(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?n[1]:n[2]}function Vn(e,t,n){var i={mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+Jn(i[n],+e)}function Gn(e,t,n){var i={mm:"munutenn",MM:"miz",dd:"devezh"};return e+" "+Zn(i[n],e)}function Xn(e){switch(Qn(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}function Qn(e){return e>9?Qn(e%10):e}function Zn(e,t){return 2===t?Kn(e):e}function Kn(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}function ei(e,t,n){var i=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return i+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return i+=1===e?"dan":"dana";case"MM":return i+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return i+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}function ti(e){return e>1&&5>e&&1!==~~(e/10)}function ni(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekund":"pár sekundami";case"m":return t?"minuta":i?"minutu":"minutou";case"mm":return t||i?r+(ti(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(ti(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||i?"den":"dnem";case"dd":return t||i?r+(ti(e)?"dny":"dní"):r+"dny";case"M":return t||i?"měsíc":"měsícem";case"MM":return t||i?r+(ti(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||i?"rok":"rokem";case"yy":return t||i?r+(ti(e)?"roky":"let"):r+"lety"}}function ii(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function ri(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function ai(e,t,n,i){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:i?r[n][0]:r[n][1]}function oi(e,t,n,i){var r="";switch(n){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"m":return i?"minuutin":"minuutti";case"mm":r=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":r=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":r=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":r=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":r=i?"vuoden":"vuotta"}return r=si(e,i)+" "+r}function si(e,t){return 10>e?t?ao[e]:ro[e]:e}function li(e,t,n){var i=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return i+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return i+=1===e?"dan":"dana";case"MM":return i+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return i+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}function di(e,t,n,i){var r=e;switch(n){case"s":return i||t?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(i||t?" perc":" perce");case"mm":return r+(i||t?" perc":" perce");case"h":return"egy"+(i||t?" óra":" órája");case"hh":return r+(i||t?" óra":" órája");case"d":return"egy"+(i||t?" nap":" napja");case"dd":return r+(i||t?" nap":" napja");case"M":return"egy"+(i||t?" hónap":" hónapja");case"MM":return r+(i||t?" hónap":" hónapja");case"y":return"egy"+(i||t?" év":" éve");case"yy":return r+(i||t?" év":" éve")}return""}function ui(e){return(e?"":"[múlt] ")+"["+_o[this.day()]+"] LT[-kor]"}function ci(e){return e%100===11?!0:e%10===1?!1:!0}function hi(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return t?"mínúta":"mínútu";case"mm":return ci(e)?r+(t||i?"mínútur":"mínútum"):t?r+"mínúta":r+"mínútu";case"hh":return ci(e)?r+(t||i?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return t?"dagur":i?"dag":"degi";case"dd":return ci(e)?t?r+"dagar":r+(i?"daga":"dögum"):t?r+"dagur":r+(i?"dag":"degi");case"M":return t?"mánuður":i?"mánuð":"mánuði";case"MM":return ci(e)?t?r+"mánuðir":r+(i?"mánuði":"mánuðum"):t?r+"mánuður":r+(i?"mánuð":"mánuði");case"y":return t||i?"ár":"ári";case"yy":return ci(e)?r+(t||i?"ár":"árum"):r+(t||i?"ár":"ári")}}function pi(e,t,n,i){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function mi(e){var t=e.substr(0,e.indexOf(" "));return _i(t)?"a "+e:"an "+e}function fi(e){var t=e.substr(0,e.indexOf(" "));return _i(t)?"viru "+e:"virun "+e}function _i(e){if(e=parseInt(e,10),isNaN(e))return!1;if(0>e)return!0;if(10>e)return e>=4&&7>=e?!0:!1;if(100>e){var t=e%10,n=e/10;return _i(0===t?n:t)}if(1e4>e){for(;e>=10;)e/=10;return _i(e)}return e/=1e3,_i(e)}function yi(e,t,n,i){return t?"kelios sekundės":i?"kelių sekundžių":"kelias sekundes"}function gi(e,t,n,i){return t?Mi(n)[0]:i?Mi(n)[1]:Mi(n)[2]}function vi(e){return e%10===0||e>10&&20>e}function Mi(e){return go[e].split("_")}function bi(e,t,n,i){var r=e+" ";return 1===e?r+gi(e,t,n[0],i):t?r+(vi(e)?Mi(n)[1]:Mi(n)[0]):i?r+Mi(n)[1]:r+(vi(e)?Mi(n)[1]:Mi(n)[2])}function Li(e,t,n){return n?t%10===1&&11!==t?e[2]:e[3]:t%10===1&&11!==t?e[0]:e[1]}function wi(e,t,n){return e+" "+Li(vo[n],e,t)}function Di(e,t,n){return Li(vo[n],e,t)}function Ti(e,t){return t?"dažas sekundes":"dažām sekundēm"}function Si(e,t,n,i){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}function Yi(e){return 5>e%10&&e%10>1&&~~(e/10)%10!==1}function ki(e,t,n){var i=e+" ";switch(n){case"m":return t?"minuta":"minutę";case"mm":return i+(Yi(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return i+(Yi(e)?"godziny":"godzin");case"MM":return i+(Yi(e)?"miesiące":"miesięcy");case"yy":return i+(Yi(e)?"lata":"lat")}}function xi(e,t,n){var i={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},r=" ";return(e%100>=20||e>=100&&e%100===0)&&(r=" de "),e+r+i[n]}function Ci(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?n[1]:n[2]}function Hi(e,t,n){var i={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+Ci(i[n],+e)}function Ai(e){return e>1&&5>e}function Ei(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekúnd":"pár sekundami";case"m":return t?"minúta":i?"minútu":"minútou";case"mm":return t||i?r+(Ai(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(Ai(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||i?"deň":"dňom";case"dd":return t||i?r+(Ai(e)?"dni":"dní"):r+"dňami";case"M":return t||i?"mesiac":"mesiacom";case"MM":return t||i?r+(Ai(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||i?"rok":"rokom";case"yy":return t||i?r+(Ai(e)?"roky":"rokov"):r+"rokmi"}}function ji(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nekaj sekund":"nekaj sekundami";case"m":return t?"ena minuta":"eno minuto";case"mm":return r+=1===e?t?"minuta":"minuto":2===e?t||i?"minuti":"minutama":5>e?t||i?"minute":"minutami":t||i?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return r+=1===e?t?"ura":"uro":2===e?t||i?"uri":"urama":5>e?t||i?"ure":"urami":t||i?"ur":"urami";case"d":return t||i?"en dan":"enim dnem";case"dd":return r+=1===e?t||i?"dan":"dnem":2===e?t||i?"dni":"dnevoma":t||i?"dni":"dnevi";case"M":return t||i?"en mesec":"enim mesecem";case"MM":return r+=1===e?t||i?"mesec":"mesecem":2===e?t||i?"meseca":"mesecema":5>e?t||i?"mesece":"meseci":t||i?"mesecev":"meseci";case"y":return t||i?"eno leto":"enim letom";case"yy":return r+=1===e?t||i?"leto":"letom":2===e?t||i?"leti":"letoma":5>e?t||i?"leta":"leti":t||i?"let":"leti"}}function Ii(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"}function Pi(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"}function Oi(e,t,n,i){var r=zi(e);switch(n){case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}function zi(e){var t=Math.floor(e%1e3/100),n=Math.floor(e%100/10),i=e%10,r="";return t>0&&(r+=zo[t]+"vatlh"),n>0&&(r+=(""!==r?" ":"")+zo[n]+"maH"),i>0&&(r+=(""!==r?" ":"")+zo[i]),""===r?"pagh":r}function Fi(e,t,n,i){var r={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",""+e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",""+e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",""+e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",""+e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",""+e+" ars"]};return i?r[n][0]:t?r[n][0]:r[n][1]}function Wi(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?n[1]:n[2]}function $i(e,t,n){var i={mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+Wi(i[n],+e)}function Ni(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},i=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[i][e.day()]}function qi(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}var Ri,Ui,Bi=e.momentProperties=[],Ji=!1,Vi={},Gi={},Xi=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Qi=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Zi={},Ki={},er=/\d/,tr=/\d\d/,nr=/\d{3}/,ir=/\d{4}/,rr=/[+-]?\d{6}/,ar=/\d\d?/,or=/\d\d\d\d?/,sr=/\d\d\d\d\d\d?/,lr=/\d{1,3}/,dr=/\d{1,4}/,ur=/[+-]?\d{1,6}/,cr=/\d+/,hr=/[+-]?\d+/,pr=/Z|[+-]\d\d:?\d\d/gi,mr=/Z|[+-]\d\d(?::?\d\d)?/gi,fr=/[+-]?\d+(\.\d{1,3})?/,_r=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,yr={},gr={},vr=0,Mr=1,br=2,Lr=3,wr=4,Dr=5,Tr=6,Sr=7,Yr=8;I("M",["MM",2],"Mo",function(){return this.month()+1}),I("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),I("MMMM",0,0,function(e){return this.localeData().months(this,e)}),S("month","M"),W("M",ar),W("MM",ar,tr),W("MMM",function(e,t){return t.monthsShortRegex(e)}),W("MMMM",function(e,t){return t.monthsRegex(e)}),R(["M","MM"],function(e,t){t[Mr]=y(e)-1}),R(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[Mr]=r:d(n).invalidMonth=e});var kr=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,xr="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Cr="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Hr=_r,Ar=_r,Er={};e.suppressDeprecationWarnings=!1;var jr=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Ir=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Pr=/Z|[+-]\d\d(?::?\d\d)?/,Or=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],zr=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Fr=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=ae("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),I("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),I(0,["YY",2],0,function(){return this.year()%100}),I(0,["YYYY",4],0,"year"),I(0,["YYYYY",5],0,"year"),I(0,["YYYYYY",6,!0],0,"year"),S("year","y"),W("Y",hr),W("YY",ar,tr),W("YYYY",dr,ir),W("YYYYY",ur,rr),W("YYYYYY",ur,rr),R(["YYYYY","YYYYYY"],vr),R("YYYY",function(t,n){n[vr]=2===t.length?e.parseTwoDigitYear(t):y(t)}),R("YY",function(t,n){n[vr]=e.parseTwoDigitYear(t)}),R("Y",function(e,t){t[vr]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return y(e)+(y(e)>68?1900:2e3)};var Wr=C("FullYear",!1);e.ISO_8601=function(){};var $r=ae("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=Ce.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:c()}),Nr=ae("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=Ce.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:c()}),qr=function(){return Date.now?Date.now():+new Date};Pe("Z",":"),Pe("ZZ",""),W("Z",mr),W("ZZ",mr),R(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Oe(mr,e)});var Rr=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Ur=/(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Br=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Qe.fn=je.prototype;var Jr=tt(1,"add"),Vr=tt(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Gr=ae("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});I(0,["gg",2],0,function(){return this.weekYear()%100}),I(0,["GG",2],0,function(){return this.isoWeekYear()%100}),jt("gggg","weekYear"),jt("ggggg","weekYear"),jt("GGGG","isoWeekYear"),jt("GGGGG","isoWeekYear"),S("weekYear","gg"),S("isoWeekYear","GG"),W("G",hr),W("g",hr),W("GG",ar,tr),W("gg",ar,tr),W("GGGG",dr,ir),W("gggg",dr,ir),W("GGGGG",ur,rr),W("ggggg",ur,rr),U(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=y(e)}),U(["gg","GG"],function(t,n,i,r){n[r]=e.parseTwoDigitYear(t)}),I("Q",0,"Qo","quarter"),S("quarter","Q"),W("Q",er),R("Q",function(e,t){t[Mr]=3*(y(e)-1)}),I("w",["ww",2],"wo","week"),I("W",["WW",2],"Wo","isoWeek"),S("week","w"),S("isoWeek","W"),W("w",ar),W("ww",ar,tr),W("W",ar),W("WW",ar,tr),U(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=y(e)});var Xr={dow:0,doy:6};I("D",["DD",2],"Do","date"),S("date","D"),W("D",ar),W("DD",ar,tr),W("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),R(["D","DD"],br),R("Do",function(e,t){t[br]=y(e.match(ar)[0],10)});var Qr=C("Date",!0);I("d",0,"do","day"),I("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),I("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),I("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),I("e",0,0,"weekday"),I("E",0,0,"isoWeekday"),S("day","d"),S("weekday","e"),S("isoWeekday","E"),W("d",ar),W("e",ar),W("E",ar),W("dd",_r),W("ddd",_r),W("dddd",_r),U(["dd","ddd","dddd"],function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);null!=r?t.d=r:d(n).invalidWeekday=e}),U(["d","e","E"],function(e,t,n,i){t[i]=y(e)});var Zr="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Kr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ea="Su_Mo_Tu_We_Th_Fr_Sa".split("_");I("DDD",["DDDD",3],"DDDo","dayOfYear"),S("dayOfYear","DDD"),W("DDD",lr),W("DDDD",nr),R(["DDD","DDDD"],function(e,t,n){n._dayOfYear=y(e)}),I("H",["HH",2],0,"hour"),I("h",["hh",2],0,nn),I("hmm",0,0,function(){return""+nn.apply(this)+j(this.minutes(),2)}),I("hmmss",0,0,function(){return""+nn.apply(this)+j(this.minutes(),2)+j(this.seconds(),2)}),I("Hmm",0,0,function(){return""+this.hours()+j(this.minutes(),2)}),I("Hmmss",0,0,function(){return""+this.hours()+j(this.minutes(),2)+j(this.seconds(),2)}),rn("a",!0),rn("A",!1),S("hour","h"),W("a",an),W("A",an),W("H",ar),W("h",ar),W("HH",ar,tr),W("hh",ar,tr),W("hmm",or),W("hmmss",sr),W("Hmm",or),W("Hmmss",sr),R(["H","HH"],Lr),R(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),R(["h","hh"],function(e,t,n){t[Lr]=y(e),d(n).bigHour=!0}),R("hmm",function(e,t,n){var i=e.length-2;t[Lr]=y(e.substr(0,i)),t[wr]=y(e.substr(i)),d(n).bigHour=!0}),R("hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Lr]=y(e.substr(0,i)),t[wr]=y(e.substr(i,2)),t[Dr]=y(e.substr(r)),d(n).bigHour=!0}),R("Hmm",function(e,t,n){var i=e.length-2;t[Lr]=y(e.substr(0,i)),t[wr]=y(e.substr(i))}),R("Hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Lr]=y(e.substr(0,i)),t[wr]=y(e.substr(i,2)),t[Dr]=y(e.substr(r))});var ta=/[ap]\.?m?\.?/i,na=C("Hours",!0);I("m",["mm",2],0,"minute"),S("minute","m"),W("m",ar),W("mm",ar,tr),R(["m","mm"],wr);var ia=C("Minutes",!1);I("s",["ss",2],0,"second"),S("second","s"),W("s",ar),W("ss",ar,tr),R(["s","ss"],Dr);var ra=C("Seconds",!1);I("S",0,0,function(){return~~(this.millisecond()/100)}),I(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),I(0,["SSS",3],0,"millisecond"),I(0,["SSSS",4],0,function(){return 10*this.millisecond()}),I(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),I(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),I(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),I(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),I(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),S("millisecond","ms"),W("S",lr,er),W("SS",lr,tr),W("SSS",lr,nr);var aa;for(aa="SSSS";aa.length<=9;aa+="S")W(aa,cr);for(aa="S";aa.length<=9;aa+="S")R(aa,ln);var oa=C("Milliseconds",!1);I("z",0,0,"zoneAbbr"),I("zz",0,0,"zoneName");var sa=m.prototype;sa.add=Jr,sa.calendar=it,sa.clone=rt,sa.diff=ct,sa.endOf=wt,sa.format=ft,sa.from=_t,sa.fromNow=yt,sa.to=gt,sa.toNow=vt,sa.get=E,sa.invalidAt=At,sa.isAfter=at,sa.isBefore=ot,sa.isBetween=st,sa.isSame=lt,sa.isSameOrAfter=dt,sa.isSameOrBefore=ut,sa.isValid=Ct,sa.lang=Gr,sa.locale=Mt,sa.localeData=bt,sa.max=Nr,sa.min=$r,sa.parsingFlags=Ht,sa.set=E,sa.startOf=Lt,sa.subtract=Vr,sa.toArray=Yt,sa.toObject=kt,sa.toDate=St,sa.toISOString=mt,sa.toJSON=xt,sa.toString=pt,sa.unix=Tt,sa.valueOf=Dt,sa.creationData=Et,sa.year=Wr,sa.isLeapYear=pe,sa.weekYear=It,sa.isoWeekYear=Pt,sa.quarter=sa.quarters=$t,sa.month=Z,sa.daysInMonth=K,sa.week=sa.weeks=Ut,sa.isoWeek=sa.isoWeeks=Bt,sa.weeksInYear=zt,sa.isoWeeksInYear=Ot,sa.date=Qr,sa.day=sa.days=Zt,sa.weekday=Kt,sa.isoWeekday=en,sa.dayOfYear=tn,sa.hour=sa.hours=na,sa.minute=sa.minutes=ia,sa.second=sa.seconds=ra,sa.millisecond=sa.milliseconds=oa,sa.utcOffset=We,sa.utc=Ne,sa.local=qe,sa.parseZone=Re,sa.hasAlignedHourOffset=Ue,sa.isDST=Be,sa.isDSTShifted=Je,sa.isLocal=Ve,sa.isUtcOffset=Ge,sa.isUtc=Xe,sa.isUTC=Xe,sa.zoneAbbr=dn,sa.zoneName=un,sa.dates=ae("dates accessor is deprecated. Use date instead.",Qr),sa.months=ae("months accessor is deprecated. Use month instead",Z),sa.years=ae("years accessor is deprecated. Use year instead",Wr),sa.zone=ae("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",$e);var la=sa,da={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},ua={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},ca="Invalid date",ha="%d",pa=/\d{1,2}/,ma={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},fa=v.prototype;fa._calendar=da,fa.calendar=pn,fa._longDateFormat=ua,fa.longDateFormat=mn,fa._invalidDate=ca,fa.invalidDate=fn,fa._ordinal=ha,fa.ordinal=_n,fa._ordinalParse=pa,fa.preparse=yn,fa.postformat=yn,fa._relativeTime=ma,fa.relativeTime=gn,fa.pastFuture=vn,fa.set=Mn,fa.months=V,fa._months=xr,fa.monthsShort=G,fa._monthsShort=Cr,fa.monthsParse=X,fa._monthsRegex=Ar,fa.monthsRegex=te,fa._monthsShortRegex=Hr,fa.monthsShortRegex=ee,fa.week=Nt,fa._week=Xr,fa.firstDayOfYear=Rt,fa.firstDayOfWeek=qt,fa.weekdays=Vt,fa._weekdays=Zr,fa.weekdaysMin=Xt,fa._weekdaysMin=ea,fa.weekdaysShort=Gt,fa._weekdaysShort=Kr,fa.weekdaysParse=Qt,fa.isPM=on,fa._meridiemParse=ta,fa.meridiem=sn,w("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===y(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=ae("moment.lang is deprecated. Use moment.locale instead.",w),e.langData=ae("moment.langData is deprecated. Use moment.localeData instead.",T);var _a=Math.abs,ya=zn("ms"),ga=zn("s"),va=zn("m"),Ma=zn("h"),ba=zn("d"),La=zn("w"),wa=zn("M"),Da=zn("y"),Ta=Wn("milliseconds"),Sa=Wn("seconds"),Ya=Wn("minutes"),ka=Wn("hours"),xa=Wn("days"),Ca=Wn("months"),Ha=Wn("years"),Aa=Math.round,Ea={s:45,m:45,h:22,d:26,M:11},ja=Math.abs,Ia=je.prototype;Ia.abs=kn,Ia.add=Cn,Ia.subtract=Hn,Ia.as=Pn,Ia.asMilliseconds=ya,Ia.asSeconds=ga,Ia.asMinutes=va,Ia.asHours=Ma,Ia.asDays=ba,Ia.asWeeks=La,Ia.asMonths=wa,Ia.asYears=Da,Ia.valueOf=On,Ia._bubble=En,Ia.get=Fn,Ia.milliseconds=Ta,Ia.seconds=Sa,Ia.minutes=Ya,Ia.hours=ka,Ia.days=xa,Ia.weeks=$n,Ia.months=Ca,Ia.years=Ha,Ia.humanize=Un,Ia.toISOString=Bn,Ia.toString=Bn,Ia.toJSON=Bn,Ia.locale=Mt,Ia.localeData=bt,Ia.toIsoString=ae("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Bn),Ia.lang=Gr,I("X",0,0,"unix"),I("x",0,0,"valueOf"),W("x",hr),W("X",fr),R("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),R("x",function(e,t,n){n._d=new Date(y(e))}),e.version="2.11.1",t(Ce),e.fn=la,e.min=Ae,e.max=Ee,e.now=qr,e.utc=s,e.unix=cn,e.months=wn,e.isDate=i,e.locale=w,e.invalid=c,e.duration=Qe,e.isMoment=f,e.weekdays=Tn,e.parseZone=hn,e.localeData=T,e.isDuration=Ie,e.monthsShort=Dn,e.weekdaysMin=Yn,e.defineLocale=D,e.weekdaysShort=Sn,e.normalizeUnits=Y,e.relativeTimeThreshold=Rn,e.prototype=la;var Pa=e,Oa=(Pa.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return 12>e?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),Pa.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}}),{1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"}),za={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},Fa=(Pa.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return 12>e?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return za[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return Oa[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),Pa.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}}),{1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",
0:"٠"}),Wa={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},$a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&10>=e%100?3:e%100>=11?4:5},Na={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},qa=function(e){return function(t,n,i,r){var a=$a(t),o=Na[e][$a(t)];return 2===a&&(o=o[n?0:1]),o.replace(/%d/i,t)}},Ra=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"],Ua=(Pa.defineLocale("ar",{months:Ra,monthsShort:Ra,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return 12>e?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:qa("s"),m:qa("m"),mm:qa("m"),h:qa("h"),hh:qa("h"),d:qa("d"),dd:qa("d"),M:qa("M"),MM:qa("M"),y:qa("y"),yy:qa("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return Wa[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return Fa[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),{1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"}),Ba=(Pa.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return 4>e?"gecə":12>e?"səhər":17>e?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var t=e%10,n=e%100-t,i=e>=100?100:null;return e+(Ua[t]||Ua[n]||Ua[i])},week:{dow:1,doy:7}}),Pa.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:Vn,mm:Vn,h:Vn,hh:Vn,d:"дзень",dd:Vn,M:"месяц",MM:Vn,y:"год",yy:Vn},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return 4>e?"ночы":12>e?"раніцы":17>e?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!==2&&e%10!==3||e%100===12||e%100===13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}}),Pa.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&20>n?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}}),{1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"}),Ja={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"},Va=(Pa.defineLocale("bn",{months:"জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি".split("_"),weekdaysMin:"রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return Ja[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ba[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,isPM:function(e){return/^(দুপুর|বিকাল|রাত)$/.test(e)},meridiem:function(e,t,n){return 4>e?"রাত":10>e?"সকাল":17>e?"দুপুর":20>e?"বিকাল":"রাত"},week:{dow:0,doy:6}}),{1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"}),Ga={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"},Xa=(Pa.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return Ga[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Va[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,isPM:function(e){return/^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(e)},meridiem:function(e,t,n){return 4>e?"མཚན་མོ":10>e?"ཞོགས་ཀས":17>e?"ཉིན་གུང":20>e?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}}),Pa.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:Gn,h:"un eur",hh:"%d eur",d:"un devezh",dd:Gn,M:"ur miz",MM:Gn,y:"ur bloaz",yy:Xn},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}}),Pa.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:ei,mm:ei,h:ei,hh:ei,d:"dan",dd:ei,M:"mjesec",MM:ei,y:"godinu",yy:ei},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),Pa.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return("w"===t||"W"===t)&&(n="a"),e+n},week:{dow:1,doy:4}}),"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_")),Qa="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),Za=(Pa.defineLocale("cs",{months:Xa,monthsShort:Qa,monthsParse:function(e,t){var n,i=[];for(n=0;12>n;n++)i[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return i}(Xa,Qa),shortMonthsParse:function(e){var t,n=[];for(t=0;12>t;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(Qa),longMonthsParse:function(e){var t,n=[];for(t=0;12>t;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(Xa),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:ni,m:ni,mm:ni,h:ni,hh:ni,d:ni,dd:ni,M:ni,MM:ni,y:ni,yy:ni},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},ordinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}}),Pa.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="",i=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=i[t]),e+n},week:{dow:1,doy:4}}),Pa.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:ii,mm:"%d Minuten",h:ii,hh:"%d Stunden",d:ii,dd:ii,M:ii,MM:ii,y:ii,yy:ii},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:ri,mm:"%d Minuten",h:ri,hh:"%d Stunden",d:ri,dd:ri,M:ri,MM:ri,y:ri,yy:ri},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"]),Ka=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"],eo=(Pa.defineLocale("dv",{months:Za,monthsShort:Za,weekdays:Ka,weekdaysShort:Ka,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return""===e},meridiem:function(e,t,n){return 12>e?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}}),Pa.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n=this._calendarEl[e],i=t&&t.hours();return x(n)&&(n=n.apply(t)),n.replace("{}",i%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}}),Pa.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),Pa.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY h:mm A",LLLL:"dddd, D MMMM, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),Pa.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),Pa.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),Pa.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),Pa.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-an de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}}),"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),to="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),no=(Pa.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?to[e.month()]:eo[e.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),Pa.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:ai,m:ai,mm:ai,h:ai,hh:ai,d:ai,dd:"%d päeva",M:ai,MM:ai,y:ai,yy:ai},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),{1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"}),io={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"},ro=(Pa.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return 12>e?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return io[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return no[e]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}}),"nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" ")),ao=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",ro[7],ro[8],ro[9]],oo=(Pa.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:oi,m:oi,mm:oi,h:oi,hh:oi,d:oi,dd:oi,M:oi,MM:oi,y:oi,yy:oi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")}}),Pa.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")},week:{dow:1,doy:4}}),Pa.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?"er":"")},week:{dow:1,doy:4}}),"jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_")),so="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),lo=(Pa.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?so[e.month()]:oo[e.month()]},weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"]),uo=["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],co=["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],ho=["Did","Dil","Dim","Dic","Dia","Dih","Dis"],po=["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],mo=(Pa.defineLocale("gd",{months:lo,monthsShort:uo,monthsParseExact:!0,weekdays:co,weekdaysShort:ho,weekdaysMin:po,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},ordinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10===2?"na":"mh";return e+t},week:{dow:1,doy:4}}),Pa.defineLocale("gl",{months:"Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),monthsShort:"Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),weekdays:"Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),weekdaysShort:"Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return"uns segundos"===e?"nuns segundos":"en "+e},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:7}}),Pa.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10===0&&10!==e?e+" שנה":e+" שנים"}}}),{1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"}),fo={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},_o=(Pa.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return fo[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return mo[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?4>e?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"रात":10>e?"सुबह":17>e?"दोपहर":20>e?"शाम":"रात"},week:{dow:0,doy:6}}),Pa.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:li,mm:li,h:li,hh:li,d:"dan",dd:li,M:"mjesec",MM:li,y:"godinu",yy:li},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),"vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ")),yo=(Pa.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return 12>e?n===!0?"de":"DE":n===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return ui.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return ui.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:di,m:di,mm:di,h:di,hh:di,d:di,dd:di,M:di,MM:di,y:di,yy:di},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),Pa.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return 4>e?"գիշերվա":12>e?"առավոտվա":17>e?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}}),Pa.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"pagi":15>e?"siang":19>e?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),Pa.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:hi,m:hi,mm:hi,h:"klukkustund",hh:hi,d:hi,dd:hi,M:hi,MM:hi,y:hi,yy:hi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),Pa.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return 12>e?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),Pa.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"enjing":15>e?"siyang":19>e?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}}),Pa.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":20>e||100>=e&&e%20===0||e%100===0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}}),{0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"}),go=(Pa.defineLocale("kk",{months:"Қаңтар_Ақпан_Наурыз_Сәуір_Мамыр_Маусым_Шілде_Тамыз_Қыркүйек_Қазан_Қараша_Желтоқсан".split("_"),monthsShort:"Қаң_Ақп_Нау_Сәу_Мам_Мау_Шіл_Там_Қыр_Қаз_Қар_Жел".split("_"),weekdays:"Жексенбі_Дүйсенбі_Сейсенбі_Сәрсенбі_Бейсенбі_Жұма_Сенбі".split("_"),weekdaysShort:"Жек_Дүй_Сей_Сәр_Бей_Жұм_Сен".split("_"),weekdaysMin:"Жк_Дй_Сй_Ср_Бй_Жм_Сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var t=e%10,n=e>=100?100:null;return e+(yo[e]||yo[t]||yo[n])},week:{dow:1,doy:7}}),Pa.defineLocale("km",{months:"មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}}),Pa.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return 12>e?"오전":"오후"}}),Pa.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:mi,past:fi,s:"e puer Sekonnen",m:pi,mm:"%d Minutten",h:pi,hh:"%d Stonnen",d:pi,dd:"%d Deeg",M:pi,MM:"%d Méint",y:pi,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return 12>e?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},ordinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}}),{m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"}),vo=(Pa.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_")},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:yi,m:gi,mm:bi,h:gi,hh:bi,d:gi,dd:bi,M:gi,MM:bi,y:gi,yy:bi},ordinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}}),{m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")}),Mo=(Pa.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:Ti,m:Di,mm:wi,h:Di,hh:wi,d:Di,dd:wi,M:Di,MM:wi,y:Di,yy:wi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{words:{m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var i=Mo.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+Mo.correctGrammaticalCase(e,i)}}),bo=(Pa.defineLocale("me",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedjelja","ponedjeljak","utorak","srijeda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sri.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:Mo.translate,mm:Mo.translate,h:Mo.translate,hh:Mo.translate,d:"dan",
dd:Mo.translate,M:"mjesec",MM:Mo.translate,y:"godinu",yy:Mo.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),Pa.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&20>n?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}}),Pa.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,isPM:function(e){return/^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(e)},meridiem:function(e,t,n){return 4>e?"രാത്രി":12>e?"രാവിലെ":17>e?"ഉച്ച കഴിഞ്ഞ്":20>e?"വൈകുന്നേരം":"രാത്രി"}}),{1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"}),Lo={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},wo=(Pa.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:Si,m:Si,mm:Si,h:Si,hh:Si,d:Si,dd:Si,M:Si,MM:Si,y:Si,yy:Si},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return Lo[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return bo[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?4>e?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"रात्री":10>e?"सकाळी":17>e?"दुपारी":20>e?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}}),Pa.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"pagi":15>e?"tengahari":19>e?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),Pa.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"pagi":15>e?"tengahari":19>e?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),{1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"}),Do={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"},To=(Pa.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return Do[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return wo[e]})},week:{dow:1,doy:4}}),Pa.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"}),So={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},Yo=(Pa.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return So[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return To[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?4>e?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return 3>e?"राति":12>e?"बिहान":16>e?"दिउँसो":20>e?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}}),"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),ko="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),xo=(Pa.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?ko[e.month()]:Yo[e.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),Pa.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),"styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_")),Co="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),Ho=(Pa.defineLocale("pl",{months:function(e,t){return""===t?"("+Co[e.month()]+"|"+xo[e.month()]+")":/D MMMM/.test(t)?Co[e.month()]:xo[e.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:ki,mm:ki,h:ki,hh:ki,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:ki,y:"rok",yy:ki},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),Pa.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),Pa.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:xi,h:"o oră",hh:xi,d:"o zi",dd:xi,M:"o lună",MM:xi,y:"un an",yy:xi},week:{dow:1,doy:7}}),[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i]),Ao=(Pa.defineLocale("ru",{months:{format:"Января_Февраля_Марта_Апреля_Мая_Июня_Июля_Августа_Сентября_Октября_Ноября_Декабря".split("_"),standalone:"Январь_Февраль_Март_Апрель_Май_Июнь_Июль_Август_Сентябрь_Октябрь_Ноябрь_Декабрь".split("_")},monthsShort:{format:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_"),standalone:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_")},weekdays:{standalone:"Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота".split("_"),format:"Воскресенье_Понедельник_Вторник_Среду_Четверг_Пятницу_Субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"Вс_Пн_Вт_Ср_Чт_Пт_Сб".split("_"),weekdaysMin:"Вс_Пн_Вт_Ср_Чт_Пт_Сб".split("_"),monthsParse:Ho,longMonthsParse:Ho,shortMonthsParse:Ho,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:Hi,mm:Hi,h:"час",hh:Hi,d:"день",dd:Hi,M:"месяц",MM:Hi,y:"год",yy:Hi},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return 4>e?"ночи":12>e?"утра":17>e?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:7}}),Pa.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},ordinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}}),"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_")),Eo="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),jo=(Pa.defineLocale("sk",{months:Ao,monthsShort:Eo,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:Ei,m:Ei,mm:Ei,h:Ei,hh:Ei,d:Ei,dd:Ei,M:Ei,MM:Ei,y:Ei,yy:Ei},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:ji,m:ji,mm:ji,h:ji,hh:ji,d:ji,dd:ji,M:ji,MM:ji,y:ji,yy:ji},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),Pa.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return 12>e?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var i=jo.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+jo.correctGrammaticalCase(e,i)}}),Io=(Pa.defineLocale("sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var e=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:jo.translate,mm:jo.translate,h:jo.translate,hh:jo.translate,d:"дан",dd:jo.translate,M:"месец",MM:jo.translate,y:"годину",yy:jo.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),{words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var i=Io.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+Io.correctGrammaticalCase(e,i)}}),Po=(Pa.defineLocale("sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:Io.translate,mm:Io.translate,h:Io.translate,hh:Io.translate,d:"dan",dd:Io.translate,M:"mesec",MM:Io.translate,y:"godinu",yy:Io.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),Pa.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}}),Pa.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}}),{1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"}),Oo={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"},zo=(Pa.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return Oo[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Po[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return 2>e?" யாமம்":6>e?" வைகறை":10>e?" காலை":14>e?" நண்பகல்":18>e?" எற்பாடு":22>e?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?2>e?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}}),Pa.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},ordinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?4>e?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"రాత్రి":10>e?"ఉదయం":17>e?"మధ్యాహ్నం":20>e?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}}),Pa.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"H นาฬิกา m นาที s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H นาฬิกา m นาที",LLLL:"วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return 12>e?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),Pa.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"[Ngayon sa] LT",nextDay:"[Bukas sa] LT",nextWeek:"dddd [sa] LT",lastDay:"[Kahapon sa] LT",lastWeek:"dddd [huling linggo] LT",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),"pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_")),Fo=(Pa.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:Ii,past:Pi,s:"puS lup",m:"wa’ tup",mm:Oi,h:"wa’ rep",hh:Oi,d:"wa’ jaj",dd:Oi,M:"wa’ jar",MM:Oi,y:"wa’ DIS",yy:Oi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"}),Wo=(Pa.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+"'ıncı";var t=e%10,n=e%100-t,i=e>=100?100:null;return e+(Fo[t]||Fo[n]||Fo[i])},week:{dow:1,doy:7}}),Pa.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:Fi,m:Fi,mm:Fi,h:Fi,hh:Fi,d:Fi,dd:Fi,M:Fi,MM:Fi,y:Fi,yy:Fi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),Pa.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}}),Pa.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}}),Pa.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:Ni,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:qi("[Сьогодні "),nextDay:qi("[Завтра "),lastDay:qi("[Вчора "),nextWeek:qi("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return qi("[Минулої] dddd [").call(this);case 1:case 2:case 4:return qi("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:$i,mm:$i,h:"годину",hh:$i,d:"день",dd:$i,M:"місяць",MM:$i,y:"рік",yy:$i},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return 4>e?"ночі":12>e?"ранку":17>e?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}}),Pa.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}}),Pa.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),Pa.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return 600>i?"凌晨":900>i?"早上":1130>i?"上午":1230>i?"中午":1800>i?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var e,t;return e=Pa().startOf("week"),t=this.unix()-e.unix()>=604800?"[下]":"[本]",0===this.minutes()?t+"dddAh点整":t+"dddAh点mm"},lastWeek:function(){var e,t;return e=Pa().startOf("week"),t=this.unix()<e.unix()?"[上]":"[本]",0===this.minutes()?t+"dddAh点整":t+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}}),Pa.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return 900>i?"早上":1130>i?"上午":1230>i?"中午":1800>i?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}}),Pa);return Wo.locale("en"),Wo}),!function(e){"use strict";if("function"==typeof define&&define.amd)define(["jquery","moment"],e);else if("object"==typeof exports)e(require("jquery"),require("moment"));else{if("undefined"==typeof jQuery)throw"bootstrap-datetimepicker requires jQuery to be loaded first";if("undefined"==typeof moment)throw"bootstrap-datetimepicker requires Moment.js to be loaded first";e(jQuery,moment)}}(function(e,t){"use strict";if(!t)throw new Error("bootstrap-datetimepicker requires Moment.js to be loaded first");var n=function(n,i){var r,a,o,s,l,d,u,c={},h=!0,p=!1,m=!1,f=0,_=[{clsName:"days",navFnc:"M",navStep:1},{clsName:"months",navFnc:"y",navStep:1},{clsName:"years",navFnc:"y",navStep:10},{clsName:"decades",navFnc:"y",navStep:100}],y=["days","months","years","decades"],g=["top","bottom","auto"],v=["left","right","auto"],M=["default","top","bottom"],b={up:38,38:"up",down:40,40:"down",left:37,37:"left",right:39,39:"right",tab:9,9:"tab",escape:27,27:"escape",enter:13,13:"enter",pageUp:33,33:"pageUp",pageDown:34,34:"pageDown",shift:16,16:"shift",control:17,17:"control",space:32,32:"space",t:84,84:"t","delete":46,46:"delete"},L={},w=function(e){var n,r,a,o,s,l=!1;return void 0!==t.tz&&void 0!==i.timeZone&&null!==i.timeZone&&""!==i.timeZone&&(l=!0),void 0===e||null===e?n=l?t().tz(i.timeZone).startOf("d"):t().startOf("d"):l?(r=t().tz(i.timeZone).utcOffset(),a=t(e,d,i.useStrict).utcOffset(),a!==r?(o=t().tz(i.timeZone).format("Z"),s=t(e,d,i.useStrict).format("YYYY-MM-DD[T]HH:mm:ss")+o,n=t(s,d,i.useStrict).tz(i.timeZone)):n=t(e,d,i.useStrict).tz(i.timeZone)):n=t(e,d,i.useStrict),n},D=function(e){if("string"!=typeof e||e.length>1)throw new TypeError("isEnabled expects a single character string parameter");switch(e){case"y":return-1!==l.indexOf("Y");case"M":return-1!==l.indexOf("M");case"d":return-1!==l.toLowerCase().indexOf("d");case"h":case"H":return-1!==l.toLowerCase().indexOf("h");case"m":return-1!==l.indexOf("m");case"s":return-1!==l.indexOf("s");default:return!1}},T=function(){return D("h")||D("m")||D("s")},S=function(){return D("y")||D("M")||D("d")},Y=function(){var t=e("<thead>").append(e("<tr>").append(e("<th>").addClass("prev").attr("data-action","previous").append(e("<span>").addClass(i.icons.previous))).append(e("<th>").addClass("picker-switch").attr("data-action","pickerSwitch").attr("colspan",i.calendarWeeks?"6":"5")).append(e("<th>").addClass("next").attr("data-action","next").append(e("<span>").addClass(i.icons.next)))),n=e("<tbody>").append(e("<tr>").append(e("<td>").attr("colspan",i.calendarWeeks?"8":"7")));return[e("<div>").addClass("datepicker-days").append(e("<table>").addClass("table-condensed").append(t).append(e("<tbody>"))),e("<div>").addClass("datepicker-months").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone())),e("<div>").addClass("datepicker-years").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone())),e("<div>").addClass("datepicker-decades").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone()))]},k=function(){var t=e("<tr>"),n=e("<tr>"),r=e("<tr>");return D("h")&&(t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementHour}).addClass("btn").attr("data-action","incrementHours").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-hour").attr({"data-time-component":"hours",title:i.tooltips.pickHour}).attr("data-action","showHours"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementHour}).addClass("btn").attr("data-action","decrementHours").append(e("<span>").addClass(i.icons.down))))),D("m")&&(D("h")&&(t.append(e("<td>").addClass("separator")),n.append(e("<td>").addClass("separator").html(":")),r.append(e("<td>").addClass("separator"))),t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementMinute}).addClass("btn").attr("data-action","incrementMinutes").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-minute").attr({"data-time-component":"minutes",title:i.tooltips.pickMinute}).attr("data-action","showMinutes"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementMinute}).addClass("btn").attr("data-action","decrementMinutes").append(e("<span>").addClass(i.icons.down))))),D("s")&&(D("m")&&(t.append(e("<td>").addClass("separator")),n.append(e("<td>").addClass("separator").html(":")),r.append(e("<td>").addClass("separator"))),t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementSecond}).addClass("btn").attr("data-action","incrementSeconds").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-second").attr({"data-time-component":"seconds",title:i.tooltips.pickSecond}).attr("data-action","showSeconds"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementSecond}).addClass("btn").attr("data-action","decrementSeconds").append(e("<span>").addClass(i.icons.down))))),s||(t.append(e("<td>").addClass("separator")),n.append(e("<td>").append(e("<button>").addClass("btn btn-primary").attr({"data-action":"togglePeriod",tabindex:"-1",title:i.tooltips.togglePeriod}))),r.append(e("<td>").addClass("separator"))),e("<div>").addClass("timepicker-picker").append(e("<table>").addClass("table-condensed").append([t,n,r]))},x=function(){var t=e("<div>").addClass("timepicker-hours").append(e("<table>").addClass("table-condensed")),n=e("<div>").addClass("timepicker-minutes").append(e("<table>").addClass("table-condensed")),i=e("<div>").addClass("timepicker-seconds").append(e("<table>").addClass("table-condensed")),r=[k()];return D("h")&&r.push(t),D("m")&&r.push(n),D("s")&&r.push(i),r},C=function(){var t=[];return i.showTodayButton&&t.push(e("<td>").append(e("<a>").attr({"data-action":"today",title:i.tooltips.today}).append(e("<span>").addClass(i.icons.today)))),!i.sideBySide&&S()&&T()&&t.push(e("<td>").append(e("<a>").attr({"data-action":"togglePicker",title:i.tooltips.selectTime}).append(e("<span>").addClass(i.icons.time)))),i.showClear&&t.push(e("<td>").append(e("<a>").attr({"data-action":"clear",title:i.tooltips.clear}).append(e("<span>").addClass(i.icons.clear)))),i.showClose&&t.push(e("<td>").append(e("<a>").attr({"data-action":"close",title:i.tooltips.close}).append(e("<span>").addClass(i.icons.close)))),e("<table>").addClass("table-condensed").append(e("<tbody>").append(e("<tr>").append(t)))},H=function(){var t=e("<div>").addClass("bootstrap-datetimepicker-widget dropdown-menu"),n=e("<div>").addClass("datepicker").append(Y()),r=e("<div>").addClass("timepicker").append(x()),a=e("<ul>").addClass("list-unstyled"),o=e("<li>").addClass("picker-switch"+(i.collapse?" accordion-toggle":"")).append(C());return i.inline&&t.removeClass("dropdown-menu"),s&&t.addClass("usetwentyfour"),D("s")&&!s&&t.addClass("wider"),i.sideBySide&&S()&&T()?(t.addClass("timepicker-sbs"),"top"===i.toolbarPlacement&&t.append(o),t.append(e("<div>").addClass("row").append(n.addClass("col-md-6")).append(r.addClass("col-md-6"))),"bottom"===i.toolbarPlacement&&t.append(o),t):("top"===i.toolbarPlacement&&a.append(o),S()&&a.append(e("<li>").addClass(i.collapse&&T()?"collapse in":"").append(n)),"default"===i.toolbarPlacement&&a.append(o),T()&&a.append(e("<li>").addClass(i.collapse&&S()?"collapse":"").append(r)),"bottom"===i.toolbarPlacement&&a.append(o),t.append(a))},A=function(){var t,r={};return t=n.is("input")||i.inline?n.data():n.find("input").data(),t.dateOptions&&t.dateOptions instanceof Object&&(r=e.extend(!0,r,t.dateOptions)),e.each(i,function(e){var n="date"+e.charAt(0).toUpperCase()+e.slice(1);void 0!==t[n]&&(r[e]=t[n])}),r},E=function(){var t,r=(p||n).position(),a=(p||n).offset(),o=i.widgetPositioning.vertical,s=i.widgetPositioning.horizontal;if(i.widgetParent)t=i.widgetParent.append(m);else if(n.is("input"))t=n.after(m).parent();else{if(i.inline)return void(t=n.append(m));t=n,n.children().first().after(m)}if("auto"===o&&(o=a.top+1.5*m.height()>=e(window).height()+e(window).scrollTop()&&m.height()+n.outerHeight()<a.top?"top":"bottom"),"auto"===s&&(s=t.width()<a.left+m.outerWidth()/2&&a.left+m.outerWidth()>e(window).width()?"right":"left"),"top"===o?m.addClass("top").removeClass("bottom"):m.addClass("bottom").removeClass("top"),"right"===s?m.addClass("pull-right"):m.removeClass("pull-right"),"relative"!==t.css("position")&&(t=t.parents().filter(function(){return"relative"===e(this).css("position")}).first()),0===t.length)throw new Error("datetimepicker component should be placed within a relative positioned container");m.css({top:"top"===o?"auto":r.top+n.outerHeight(),bottom:"top"===o?r.top+n.outerHeight():"auto",left:"left"===s?t===n?0:r.left:"auto",right:"left"===s?"auto":t.outerWidth()-n.outerWidth()-(t===n?0:r.left)})},j=function(e){"dp.change"===e.type&&(e.date&&e.date.isSame(e.oldDate)||!e.date&&!e.oldDate)||n.trigger(e)},I=function(e){"y"===e&&(e="YYYY"),j({type:"dp.update",change:e,viewDate:a.clone()})},P=function(e){m&&(e&&(u=Math.max(f,Math.min(3,u+e))),m.find(".datepicker > div").hide().filter(".datepicker-"+_[u].clsName).show())},O=function(){var t=e("<tr>"),n=a.clone().startOf("w").startOf("d");for(i.calendarWeeks===!0&&t.append(e("<th>").addClass("cw").text("#"));n.isBefore(a.clone().endOf("w"));)t.append(e("<th>").addClass("dow").text(n.format("dd"))),n.add(1,"d");m.find(".datepicker-days thead").append(t)},z=function(e){return i.disabledDates[e.format("YYYY-MM-DD")]===!0},F=function(e){return i.enabledDates[e.format("YYYY-MM-DD")]===!0},W=function(e){return i.disabledHours[e.format("H")]===!0},$=function(e){return i.enabledHours[e.format("H")]===!0},N=function(t,n){if(!t.isValid())return!1;if(i.disabledDates&&"d"===n&&z(t))return!1;if(i.enabledDates&&"d"===n&&!F(t))return!1;if(i.minDate&&t.isBefore(i.minDate,n))return!1;if(i.maxDate&&t.isAfter(i.maxDate,n))return!1;if(i.daysOfWeekDisabled&&"d"===n&&-1!==i.daysOfWeekDisabled.indexOf(t.day()))return!1;if(i.disabledHours&&("h"===n||"m"===n||"s"===n)&&W(t))return!1;if(i.enabledHours&&("h"===n||"m"===n||"s"===n)&&!$(t))return!1;if(i.disabledTimeIntervals&&("h"===n||"m"===n||"s"===n)){var r=!1;if(e.each(i.disabledTimeIntervals,function(){return t.isBetween(this[0],this[1])?(r=!0,!1):void 0}),r)return!1}return!0},q=function(){for(var t=[],n=a.clone().startOf("y").startOf("d");n.isSame(a,"y");)t.push(e("<span>").attr("data-action","selectMonth").addClass("month").text(n.format("MMM"))),n.add(1,"M");m.find(".datepicker-months td").empty().append(t)},R=function(){var t=m.find(".datepicker-months"),n=t.find("th"),o=t.find("tbody").find("span");n.eq(0).find("span").attr("title",i.tooltips.prevYear),n.eq(1).attr("title",i.tooltips.selectYear),n.eq(2).find("span").attr("title",i.tooltips.nextYear),t.find(".disabled").removeClass("disabled"),N(a.clone().subtract(1,"y"),"y")||n.eq(0).addClass("disabled"),n.eq(1).text(a.year()),N(a.clone().add(1,"y"),"y")||n.eq(2).addClass("disabled"),o.removeClass("active"),r.isSame(a,"y")&&!h&&o.eq(r.month()).addClass("active"),o.each(function(t){N(a.clone().month(t),"M")||e(this).addClass("disabled")})},U=function(){var e=m.find(".datepicker-years"),t=e.find("th"),n=a.clone().subtract(5,"y"),o=a.clone().add(6,"y"),s="";for(t.eq(0).find("span").attr("title",i.tooltips.prevDecade),t.eq(1).attr("title",i.tooltips.selectDecade),t.eq(2).find("span").attr("title",i.tooltips.nextDecade),e.find(".disabled").removeClass("disabled"),i.minDate&&i.minDate.isAfter(n,"y")&&t.eq(0).addClass("disabled"),t.eq(1).text(n.year()+"-"+o.year()),i.maxDate&&i.maxDate.isBefore(o,"y")&&t.eq(2).addClass("disabled");!n.isAfter(o,"y");)s+='<span data-action="selectYear" class="year'+(n.isSame(r,"y")&&!h?" active":"")+(N(n,"y")?"":" disabled")+'">'+n.year()+"</span>",n.add(1,"y");e.find("td").html(s)},B=function(){var e=m.find(".datepicker-decades"),n=e.find("th"),o=t({y:a.year()-a.year()%100-1}),s=o.clone().add(100,"y"),l=o.clone(),d="";for(n.eq(0).find("span").attr("title",i.tooltips.prevCentury),n.eq(2).find("span").attr("title",i.tooltips.nextCentury),e.find(".disabled").removeClass("disabled"),(o.isSame(t({y:1900}))||i.minDate&&i.minDate.isAfter(o,"y"))&&n.eq(0).addClass("disabled"),n.eq(1).text(o.year()+"-"+s.year()),(o.isSame(t({y:2e3}))||i.maxDate&&i.maxDate.isBefore(s,"y"))&&n.eq(2).addClass("disabled");!o.isAfter(s,"y");)d+='<span data-action="selectDecade" class="decade'+(o.isSame(r,"y")?" active":"")+(N(o,"y")?"":" disabled")+'" data-selection="'+(o.year()+6)+'">'+(o.year()+1)+" - "+(o.year()+12)+"</span>",o.add(12,"y");d+="<span></span><span></span><span></span>",e.find("td").html(d),n.eq(1).text(l.year()+1+"-"+o.year())},J=function(){var t,n,o,s,l=m.find(".datepicker-days"),d=l.find("th"),u=[];if(S()){for(d.eq(0).find("span").attr("title",i.tooltips.prevMonth),d.eq(1).attr("title",i.tooltips.selectMonth),d.eq(2).find("span").attr("title",i.tooltips.nextMonth),l.find(".disabled").removeClass("disabled"),d.eq(1).text(a.format(i.dayViewHeaderFormat)),N(a.clone().subtract(1,"M"),"M")||d.eq(0).addClass("disabled"),N(a.clone().add(1,"M"),"M")||d.eq(2).addClass("disabled"),t=a.clone().startOf("M").startOf("w").startOf("d"),s=0;42>s;s++)0===t.weekday()&&(n=e("<tr>"),i.calendarWeeks&&n.append('<td class="cw">'+t.week()+"</td>"),u.push(n)),o="",t.isBefore(a,"M")&&(o+=" old"),t.isAfter(a,"M")&&(o+=" new"),t.isSame(r,"d")&&!h&&(o+=" active"),N(t,"d")||(o+=" disabled"),t.isSame(w(),"d")&&(o+=" today"),(0===t.day()||6===t.day())&&(o+=" weekend"),n.append('<td data-action="selectDay" data-day="'+t.format("L")+'" class="day'+o+'">'+t.date()+"</td>"),t.add(1,"d");l.find("tbody").empty().append(u),R(),U(),B()}},V=function(){var t=m.find(".timepicker-hours table"),n=a.clone().startOf("d"),i=[],r=e("<tr>");for(a.hour()>11&&!s&&n.hour(12);n.isSame(a,"d")&&(s||a.hour()<12&&n.hour()<12||a.hour()>11);)n.hour()%4===0&&(r=e("<tr>"),i.push(r)),r.append('<td data-action="selectHour" class="hour'+(N(n,"h")?"":" disabled")+'">'+n.format(s?"HH":"hh")+"</td>"),n.add(1,"h");t.empty().append(i)},G=function(){for(var t=m.find(".timepicker-minutes table"),n=a.clone().startOf("h"),r=[],o=e("<tr>"),s=1===i.stepping?5:i.stepping;a.isSame(n,"h");)n.minute()%(4*s)===0&&(o=e("<tr>"),r.push(o)),o.append('<td data-action="selectMinute" class="minute'+(N(n,"m")?"":" disabled")+'">'+n.format("mm")+"</td>"),n.add(s,"m");t.empty().append(r)},X=function(){for(var t=m.find(".timepicker-seconds table"),n=a.clone().startOf("m"),i=[],r=e("<tr>");a.isSame(n,"m");)n.second()%20===0&&(r=e("<tr>"),i.push(r)),r.append('<td data-action="selectSecond" class="second'+(N(n,"s")?"":" disabled")+'">'+n.format("ss")+"</td>"),n.add(5,"s");t.empty().append(i)},Q=function(){var e,t,n=m.find(".timepicker span[data-time-component]");s||(e=m.find(".timepicker [data-action=togglePeriod]"),t=r.clone().add(r.hours()>=12?-12:12,"h"),e.text(r.format("A")),N(t,"h")?e.removeClass("disabled"):e.addClass("disabled")),n.filter("[data-time-component=hours]").text(r.format(s?"HH":"hh")),n.filter("[data-time-component=minutes]").text(r.format("mm")),n.filter("[data-time-component=seconds]").text(r.format("ss")),V(),G(),X()},Z=function(){m&&(J(),Q())},K=function(e){var t=h?null:r;return e?(e=e.clone().locale(i.locale),1!==i.stepping&&e.minutes(Math.round(e.minutes()/i.stepping)*i.stepping%60).seconds(0),void(N(e)?(r=e,a=r.clone(),o.val(r.format(l)),n.data("date",r.format(l)),h=!1,Z(),j({type:"dp.change",date:r.clone(),oldDate:t})):(i.keepInvalid||o.val(h?"":r.format(l)),j({type:"dp.error",date:e})))):(h=!0,o.val(""),n.data("date",""),j({type:"dp.change",date:!1,oldDate:t}),void Z())},ee=function(){var t=!1;return m?(m.find(".collapse").each(function(){var n=e(this).data("collapse");return n&&n.transitioning?(t=!0,!1):!0}),t?c:(p&&p.hasClass("btn")&&p.toggleClass("active"),m.hide(),e(window).off("resize",E),m.off("click","[data-action]"),m.off("mousedown",!1),m.remove(),m=!1,j({type:"dp.hide",date:r.clone()}),o.blur(),c)):c},te=function(){K(null)},ne={next:function(){var e=_[u].navFnc;a.add(_[u].navStep,e),J(),I(e)},previous:function(){var e=_[u].navFnc;a.subtract(_[u].navStep,e),J(),I(e)},pickerSwitch:function(){P(1)},selectMonth:function(t){var n=e(t.target).closest("tbody").find("span").index(e(t.target));a.month(n),u===f?(K(r.clone().year(a.year()).month(a.month())),i.inline||ee()):(P(-1),J()),I("M")},selectYear:function(t){var n=parseInt(e(t.target).text(),10)||0;a.year(n),u===f?(K(r.clone().year(a.year())),i.inline||ee()):(P(-1),J()),I("YYYY")},selectDecade:function(t){var n=parseInt(e(t.target).data("selection"),10)||0;a.year(n),u===f?(K(r.clone().year(a.year())),i.inline||ee()):(P(-1),J()),I("YYYY")},selectDay:function(t){var n=a.clone();e(t.target).is(".old")&&n.subtract(1,"M"),e(t.target).is(".new")&&n.add(1,"M"),K(n.date(parseInt(e(t.target).text(),10))),T()||i.keepOpen||i.inline||ee()},incrementHours:function(){var e=r.clone().add(1,"h");N(e,"h")&&K(e)},incrementMinutes:function(){var e=r.clone().add(i.stepping,"m");N(e,"m")&&K(e)},incrementSeconds:function(){var e=r.clone().add(1,"s");N(e,"s")&&K(e)},decrementHours:function(){var e=r.clone().subtract(1,"h");N(e,"h")&&K(e)},decrementMinutes:function(){var e=r.clone().subtract(i.stepping,"m");N(e,"m")&&K(e)},decrementSeconds:function(){var e=r.clone().subtract(1,"s");N(e,"s")&&K(e)},togglePeriod:function(){K(r.clone().add(r.hours()>=12?-12:12,"h"))},togglePicker:function(t){var n,r=e(t.target),a=r.closest("ul"),o=a.find(".in"),s=a.find(".collapse:not(.in)");if(o&&o.length){if(n=o.data("collapse"),n&&n.transitioning)return;o.collapse?(o.collapse("hide"),s.collapse("show")):(o.removeClass("in"),s.addClass("in")),r.is("span")?r.toggleClass(i.icons.time+" "+i.icons.date):r.find("span").toggleClass(i.icons.time+" "+i.icons.date)}},showPicker:function(){m.find(".timepicker > div:not(.timepicker-picker)").hide(),m.find(".timepicker .timepicker-picker").show()},showHours:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-hours").show()},showMinutes:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-minutes").show()},showSeconds:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-seconds").show()},selectHour:function(t){var n=parseInt(e(t.target).text(),10);
s||(r.hours()>=12?12!==n&&(n+=12):12===n&&(n=0)),K(r.clone().hours(n)),ne.showPicker.call(c)},selectMinute:function(t){K(r.clone().minutes(parseInt(e(t.target).text(),10))),ne.showPicker.call(c)},selectSecond:function(t){K(r.clone().seconds(parseInt(e(t.target).text(),10))),ne.showPicker.call(c)},clear:te,today:function(){var e=w();N(e,"d")&&K(e)},close:ee},ie=function(t){return e(t.currentTarget).is(".disabled")?!1:(ne[e(t.currentTarget).data("action")].apply(c,arguments),!1)},re=function(){var t,n={year:function(e){return e.month(0).date(1).hours(0).seconds(0).minutes(0)},month:function(e){return e.date(1).hours(0).seconds(0).minutes(0)},day:function(e){return e.hours(0).seconds(0).minutes(0)},hour:function(e){return e.seconds(0).minutes(0)},minute:function(e){return e.seconds(0)}};return o.prop("disabled")||!i.ignoreReadonly&&o.prop("readonly")||m?c:(void 0!==o.val()&&0!==o.val().trim().length?K(oe(o.val().trim())):i.useCurrent&&h&&(o.is("input")&&0===o.val().trim().length||i.inline)&&(t=w(),"string"==typeof i.useCurrent&&(t=n[i.useCurrent](t)),K(t)),m=H(),O(),q(),m.find(".timepicker-hours").hide(),m.find(".timepicker-minutes").hide(),m.find(".timepicker-seconds").hide(),Z(),P(),e(window).on("resize",E),m.on("click","[data-action]",ie),m.on("mousedown",!1),p&&p.hasClass("btn")&&p.toggleClass("active"),m.show(),E(),i.focusOnShow&&!o.is(":focus")&&o.focus(),j({type:"dp.show"}),c)},ae=function(){return m?ee():re()},oe=function(e){return e=void 0===i.parseInputDate?t.isMoment(e)||e instanceof Date?t(e):w(e):i.parseInputDate(e),e.locale(i.locale),e},se=function(e){var t,n,r,a,o=null,s=[],l={},d=e.which,u="p";L[d]=u;for(t in L)L.hasOwnProperty(t)&&L[t]===u&&(s.push(t),parseInt(t,10)!==d&&(l[t]=!0));for(t in i.keyBinds)if(i.keyBinds.hasOwnProperty(t)&&"function"==typeof i.keyBinds[t]&&(r=t.split(" "),r.length===s.length&&b[d]===r[r.length-1])){for(a=!0,n=r.length-2;n>=0;n--)if(!(b[r[n]]in l)){a=!1;break}if(a){o=i.keyBinds[t];break}}o&&(o.call(c,m),e.stopPropagation(),e.preventDefault())},le=function(e){L[e.which]="r",e.stopPropagation(),e.preventDefault()},de=function(t){var n=e(t.target).val().trim(),i=n?oe(n):null;return K(i),t.stopImmediatePropagation(),!1},ue=function(){o.on({change:de,blur:i.debug?"":ee,keydown:se,keyup:le,focus:i.allowInputToggle?re:""}),n.is("input")?o.on({focus:re}):p&&(p.on("click",ae),p.on("mousedown",!1))},ce=function(){o.off({change:de,blur:blur,keydown:se,keyup:le,focus:i.allowInputToggle?ee:""}),n.is("input")?o.off({focus:re}):p&&(p.off("click",ae),p.off("mousedown",!1))},he=function(t){var n={};return e.each(t,function(){var e=oe(this);e.isValid()&&(n[e.format("YYYY-MM-DD")]=!0)}),Object.keys(n).length?n:!1},pe=function(t){var n={};return e.each(t,function(){n[this]=!0}),Object.keys(n).length?n:!1},me=function(){var e=i.format||"L LT";l=e.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,function(e){var t=r.localeData().longDateFormat(e)||e;return t.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,function(e){return r.localeData().longDateFormat(e)||e})}),d=i.extraFormats?i.extraFormats.slice():[],d.indexOf(e)<0&&d.indexOf(l)<0&&d.push(l),s=l.toLowerCase().indexOf("a")<1&&l.replace(/\[.*?\]/g,"").indexOf("h")<1,D("y")&&(f=2),D("M")&&(f=1),D("d")&&(f=0),u=Math.max(f,u),h||K(r)};if(c.destroy=function(){ee(),ce(),n.removeData("DateTimePicker"),n.removeData("date")},c.toggle=ae,c.show=re,c.hide=ee,c.disable=function(){return ee(),p&&p.hasClass("btn")&&p.addClass("disabled"),o.prop("disabled",!0),c},c.enable=function(){return p&&p.hasClass("btn")&&p.removeClass("disabled"),o.prop("disabled",!1),c},c.ignoreReadonly=function(e){if(0===arguments.length)return i.ignoreReadonly;if("boolean"!=typeof e)throw new TypeError("ignoreReadonly () expects a boolean parameter");return i.ignoreReadonly=e,c},c.options=function(t){if(0===arguments.length)return e.extend(!0,{},i);if(!(t instanceof Object))throw new TypeError("options() options parameter should be an object");return e.extend(!0,i,t),e.each(i,function(e,t){if(void 0===c[e])throw new TypeError("option "+e+" is not recognized!");c[e](t)}),c},c.date=function(e){if(0===arguments.length)return h?null:r.clone();if(!(null===e||"string"==typeof e||t.isMoment(e)||e instanceof Date))throw new TypeError("date() parameter must be one of [null, string, moment or Date]");return K(null===e?null:oe(e)),c},c.format=function(e){if(0===arguments.length)return i.format;if("string"!=typeof e&&("boolean"!=typeof e||e!==!1))throw new TypeError("format() expects a sting or boolean:false parameter "+e);return i.format=e,l&&me(),c},c.timeZone=function(e){return 0===arguments.length?i.timeZone:(i.timeZone=e,c)},c.dayViewHeaderFormat=function(e){if(0===arguments.length)return i.dayViewHeaderFormat;if("string"!=typeof e)throw new TypeError("dayViewHeaderFormat() expects a string parameter");return i.dayViewHeaderFormat=e,c},c.extraFormats=function(e){if(0===arguments.length)return i.extraFormats;if(e!==!1&&!(e instanceof Array))throw new TypeError("extraFormats() expects an array or false parameter");return i.extraFormats=e,d&&me(),c},c.disabledDates=function(t){if(0===arguments.length)return i.disabledDates?e.extend({},i.disabledDates):i.disabledDates;if(!t)return i.disabledDates=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledDates() expects an array parameter");return i.disabledDates=he(t),i.enabledDates=!1,Z(),c},c.enabledDates=function(t){if(0===arguments.length)return i.enabledDates?e.extend({},i.enabledDates):i.enabledDates;if(!t)return i.enabledDates=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("enabledDates() expects an array parameter");return i.enabledDates=he(t),i.disabledDates=!1,Z(),c},c.daysOfWeekDisabled=function(e){if(0===arguments.length)return i.daysOfWeekDisabled.splice(0);if("boolean"==typeof e&&!e)return i.daysOfWeekDisabled=!1,Z(),c;if(!(e instanceof Array))throw new TypeError("daysOfWeekDisabled() expects an array parameter");if(i.daysOfWeekDisabled=e.reduce(function(e,t){return t=parseInt(t,10),t>6||0>t||isNaN(t)?e:(-1===e.indexOf(t)&&e.push(t),e)},[]).sort(),i.useCurrent&&!i.keepInvalid){for(var t=0;!N(r,"d");){if(r.add(1,"d"),7===t)throw"Tried 7 times to find a valid date";t++}K(r)}return Z(),c},c.maxDate=function(e){if(0===arguments.length)return i.maxDate?i.maxDate.clone():i.maxDate;if("boolean"==typeof e&&e===!1)return i.maxDate=!1,Z(),c;"string"==typeof e&&("now"===e||"moment"===e)&&(e=w());var t=oe(e);if(!t.isValid())throw new TypeError("maxDate() Could not parse date parameter: "+e);if(i.minDate&&t.isBefore(i.minDate))throw new TypeError("maxDate() date parameter is before options.minDate: "+t.format(l));return i.maxDate=t,i.useCurrent&&!i.keepInvalid&&r.isAfter(e)&&K(i.maxDate),a.isAfter(t)&&(a=t.clone().subtract(i.stepping,"m")),Z(),c},c.minDate=function(e){if(0===arguments.length)return i.minDate?i.minDate.clone():i.minDate;if("boolean"==typeof e&&e===!1)return i.minDate=!1,Z(),c;"string"==typeof e&&("now"===e||"moment"===e)&&(e=w());var t=oe(e);if(!t.isValid())throw new TypeError("minDate() Could not parse date parameter: "+e);if(i.maxDate&&t.isAfter(i.maxDate))throw new TypeError("minDate() date parameter is after options.maxDate: "+t.format(l));return i.minDate=t,i.useCurrent&&!i.keepInvalid&&r.isBefore(e)&&K(i.minDate),a.isBefore(t)&&(a=t.clone().add(i.stepping,"m")),Z(),c},c.defaultDate=function(e){if(0===arguments.length)return i.defaultDate?i.defaultDate.clone():i.defaultDate;if(!e)return i.defaultDate=!1,c;"string"==typeof e&&("now"===e||"moment"===e)&&(e=w());var t=oe(e);if(!t.isValid())throw new TypeError("defaultDate() Could not parse date parameter: "+e);if(!N(t))throw new TypeError("defaultDate() date passed is invalid according to component setup validations");return i.defaultDate=t,(i.defaultDate&&i.inline||""===o.val().trim())&&K(i.defaultDate),c},c.locale=function(e){if(0===arguments.length)return i.locale;if(!t.localeData(e))throw new TypeError("locale() locale "+e+" is not loaded from moment locales!");return i.locale=e,r.locale(i.locale),a.locale(i.locale),l&&me(),m&&(ee(),re()),c},c.stepping=function(e){return 0===arguments.length?i.stepping:(e=parseInt(e,10),(isNaN(e)||1>e)&&(e=1),i.stepping=e,c)},c.useCurrent=function(e){var t=["year","month","day","hour","minute"];if(0===arguments.length)return i.useCurrent;if("boolean"!=typeof e&&"string"!=typeof e)throw new TypeError("useCurrent() expects a boolean or string parameter");if("string"==typeof e&&-1===t.indexOf(e.toLowerCase()))throw new TypeError("useCurrent() expects a string parameter of "+t.join(", "));return i.useCurrent=e,c},c.collapse=function(e){if(0===arguments.length)return i.collapse;if("boolean"!=typeof e)throw new TypeError("collapse() expects a boolean parameter");return i.collapse===e?c:(i.collapse=e,m&&(ee(),re()),c)},c.icons=function(t){if(0===arguments.length)return e.extend({},i.icons);if(!(t instanceof Object))throw new TypeError("icons() expects parameter to be an Object");return e.extend(i.icons,t),m&&(ee(),re()),c},c.tooltips=function(t){if(0===arguments.length)return e.extend({},i.tooltips);if(!(t instanceof Object))throw new TypeError("tooltips() expects parameter to be an Object");return e.extend(i.tooltips,t),m&&(ee(),re()),c},c.useStrict=function(e){if(0===arguments.length)return i.useStrict;if("boolean"!=typeof e)throw new TypeError("useStrict() expects a boolean parameter");return i.useStrict=e,c},c.sideBySide=function(e){if(0===arguments.length)return i.sideBySide;if("boolean"!=typeof e)throw new TypeError("sideBySide() expects a boolean parameter");return i.sideBySide=e,m&&(ee(),re()),c},c.viewMode=function(e){if(0===arguments.length)return i.viewMode;if("string"!=typeof e)throw new TypeError("viewMode() expects a string parameter");if(-1===y.indexOf(e))throw new TypeError("viewMode() parameter must be one of ("+y.join(", ")+") value");return i.viewMode=e,u=Math.max(y.indexOf(e),f),P(),c},c.toolbarPlacement=function(e){if(0===arguments.length)return i.toolbarPlacement;if("string"!=typeof e)throw new TypeError("toolbarPlacement() expects a string parameter");if(-1===M.indexOf(e))throw new TypeError("toolbarPlacement() parameter must be one of ("+M.join(", ")+") value");return i.toolbarPlacement=e,m&&(ee(),re()),c},c.widgetPositioning=function(t){if(0===arguments.length)return e.extend({},i.widgetPositioning);if("[object Object]"!=={}.toString.call(t))throw new TypeError("widgetPositioning() expects an object variable");if(t.horizontal){if("string"!=typeof t.horizontal)throw new TypeError("widgetPositioning() horizontal variable must be a string");if(t.horizontal=t.horizontal.toLowerCase(),-1===v.indexOf(t.horizontal))throw new TypeError("widgetPositioning() expects horizontal parameter to be one of ("+v.join(", ")+")");i.widgetPositioning.horizontal=t.horizontal}if(t.vertical){if("string"!=typeof t.vertical)throw new TypeError("widgetPositioning() vertical variable must be a string");if(t.vertical=t.vertical.toLowerCase(),-1===g.indexOf(t.vertical))throw new TypeError("widgetPositioning() expects vertical parameter to be one of ("+g.join(", ")+")");i.widgetPositioning.vertical=t.vertical}return Z(),c},c.calendarWeeks=function(e){if(0===arguments.length)return i.calendarWeeks;if("boolean"!=typeof e)throw new TypeError("calendarWeeks() expects parameter to be a boolean value");return i.calendarWeeks=e,Z(),c},c.showTodayButton=function(e){if(0===arguments.length)return i.showTodayButton;if("boolean"!=typeof e)throw new TypeError("showTodayButton() expects a boolean parameter");return i.showTodayButton=e,m&&(ee(),re()),c},c.showClear=function(e){if(0===arguments.length)return i.showClear;if("boolean"!=typeof e)throw new TypeError("showClear() expects a boolean parameter");return i.showClear=e,m&&(ee(),re()),c},c.widgetParent=function(t){if(0===arguments.length)return i.widgetParent;if("string"==typeof t&&(t=e(t)),null!==t&&"string"!=typeof t&&!(t instanceof e))throw new TypeError("widgetParent() expects a string or a jQuery object parameter");return i.widgetParent=t,m&&(ee(),re()),c},c.keepOpen=function(e){if(0===arguments.length)return i.keepOpen;if("boolean"!=typeof e)throw new TypeError("keepOpen() expects a boolean parameter");return i.keepOpen=e,c},c.focusOnShow=function(e){if(0===arguments.length)return i.focusOnShow;if("boolean"!=typeof e)throw new TypeError("focusOnShow() expects a boolean parameter");return i.focusOnShow=e,c},c.inline=function(e){if(0===arguments.length)return i.inline;if("boolean"!=typeof e)throw new TypeError("inline() expects a boolean parameter");return i.inline=e,c},c.clear=function(){return te(),c},c.keyBinds=function(e){return i.keyBinds=e,c},c.getMoment=function(e){return w(e)},c.debug=function(e){if("boolean"!=typeof e)throw new TypeError("debug() expects a boolean parameter");return i.debug=e,c},c.allowInputToggle=function(e){if(0===arguments.length)return i.allowInputToggle;if("boolean"!=typeof e)throw new TypeError("allowInputToggle() expects a boolean parameter");return i.allowInputToggle=e,c},c.showClose=function(e){if(0===arguments.length)return i.showClose;if("boolean"!=typeof e)throw new TypeError("showClose() expects a boolean parameter");return i.showClose=e,c},c.keepInvalid=function(e){if(0===arguments.length)return i.keepInvalid;if("boolean"!=typeof e)throw new TypeError("keepInvalid() expects a boolean parameter");return i.keepInvalid=e,c},c.datepickerInput=function(e){if(0===arguments.length)return i.datepickerInput;if("string"!=typeof e)throw new TypeError("datepickerInput() expects a string parameter");return i.datepickerInput=e,c},c.parseInputDate=function(e){if(0===arguments.length)return i.parseInputDate;if("function"!=typeof e)throw new TypeError("parseInputDate() sholud be as function");return i.parseInputDate=e,c},c.disabledTimeIntervals=function(t){if(0===arguments.length)return i.disabledTimeIntervals?e.extend({},i.disabledTimeIntervals):i.disabledTimeIntervals;if(!t)return i.disabledTimeIntervals=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledTimeIntervals() expects an array parameter");return i.disabledTimeIntervals=t,Z(),c},c.disabledHours=function(t){if(0===arguments.length)return i.disabledHours?e.extend({},i.disabledHours):i.disabledHours;if(!t)return i.disabledHours=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledHours() expects an array parameter");if(i.disabledHours=pe(t),i.enabledHours=!1,i.useCurrent&&!i.keepInvalid){for(var n=0;!N(r,"h");){if(r.add(1,"h"),24===n)throw"Tried 24 times to find a valid date";n++}K(r)}return Z(),c},c.enabledHours=function(t){if(0===arguments.length)return i.enabledHours?e.extend({},i.enabledHours):i.enabledHours;if(!t)return i.enabledHours=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("enabledHours() expects an array parameter");if(i.enabledHours=pe(t),i.disabledHours=!1,i.useCurrent&&!i.keepInvalid){for(var n=0;!N(r,"h");){if(r.add(1,"h"),24===n)throw"Tried 24 times to find a valid date";n++}K(r)}return Z(),c},c.viewDate=function(e){if(0===arguments.length)return a.clone();if(!e)return a=r.clone(),c;if(!("string"==typeof e||t.isMoment(e)||e instanceof Date))throw new TypeError("viewDate() parameter must be one of [string, moment or Date]");return a=oe(e),I(),c},n.is("input"))o=n;else if(o=n.find(i.datepickerInput),0===o.size())o=n.find("input");else if(!o.is("input"))throw new Error('CSS class "'+i.datepickerInput+'" cannot be applied to non input element');if(n.hasClass("input-group")&&(p=0===n.find(".datepickerbutton").size()?n.find(".input-group-addon"):n.find(".datepickerbutton")),!i.inline&&!o.is("input"))throw new Error("Could not initialize DateTimePicker without an input element");return r=w(),a=r.clone(),e.extend(!0,i,A()),c.options(i),me(),ue(),o.prop("disabled")&&c.disable(),o.is("input")&&0!==o.val().trim().length?K(oe(o.val().trim())):i.defaultDate&&void 0===o.attr("placeholder")&&K(i.defaultDate),i.inline&&re(),c};e.fn.datetimepicker=function(t){return this.each(function(){var i=e(this);i.data("DateTimePicker")||(t=e.extend(!0,{},e.fn.datetimepicker.defaults,t),i.data("DateTimePicker",n(i,t)))})},e.fn.datetimepicker.defaults={timeZone:"Etc/UTC",format:!1,dayViewHeaderFormat:"MMMM YYYY",extraFormats:!1,stepping:1,minDate:!1,maxDate:!1,useCurrent:!0,collapse:!0,locale:t.locale(),defaultDate:!1,disabledDates:!1,enabledDates:!1,icons:{time:"glyphicon glyphicon-time",date:"glyphicon glyphicon-calendar",up:"glyphicon glyphicon-chevron-up",down:"glyphicon glyphicon-chevron-down",previous:"glyphicon glyphicon-chevron-left",next:"glyphicon glyphicon-chevron-right",today:"glyphicon glyphicon-screenshot",clear:"glyphicon glyphicon-trash",close:"glyphicon glyphicon-remove"},tooltips:{today:"Go to today",clear:"Clear selection",close:"Close the picker",selectMonth:"Select Month",prevMonth:"Previous Month",nextMonth:"Next Month",selectYear:"Select Year",prevYear:"Previous Year",nextYear:"Next Year",selectDecade:"Select Decade",prevDecade:"Previous Decade",nextDecade:"Next Decade",prevCentury:"Previous Century",nextCentury:"Next Century",pickHour:"Pick Hour",incrementHour:"Increment Hour",decrementHour:"Decrement Hour",pickMinute:"Pick Minute",incrementMinute:"Increment Minute",decrementMinute:"Decrement Minute",pickSecond:"Pick Second",incrementSecond:"Increment Second",decrementSecond:"Decrement Second",togglePeriod:"Toggle Period",selectTime:"Select Time"},useStrict:!1,sideBySide:!1,daysOfWeekDisabled:!1,calendarWeeks:!1,viewMode:"days",toolbarPlacement:"default",showTodayButton:!1,showClear:!1,showClose:!1,widgetPositioning:{horizontal:"auto",vertical:"auto"},widgetParent:null,ignoreReadonly:!1,keepOpen:!1,focusOnShow:!0,inline:!1,keepInvalid:!1,datepickerInput:".datepickerinput",keyBinds:{up:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().subtract(7,"d")):this.date(t.clone().add(this.stepping(),"m"))}},down:function(e){if(!e)return void this.show();var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().add(7,"d")):this.date(t.clone().subtract(this.stepping(),"m"))},"control up":function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().subtract(1,"y")):this.date(t.clone().add(1,"h"))}},"control down":function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().add(1,"y")):this.date(t.clone().subtract(1,"h"))}},left:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().subtract(1,"d"))}},right:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().add(1,"d"))}},pageUp:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().subtract(1,"M"))}},pageDown:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().add(1,"M"))}},enter:function(){this.hide()},escape:function(){this.hide()},"control space":function(e){e.find(".timepicker").is(":visible")&&e.find('.btn[data-action="togglePeriod"]').click()},t:function(){this.date(this.getMoment())},"delete":function(){this.clear()}},debug:!1,allowInputToggle:!1,disabledTimeIntervals:!1,disabledHours:!1,enabledHours:!1,viewDate:!1}});var iosOverlay=function(e){var t,n=function(){},i={onbeforeshow:n,onshow:n,onbeforehide:n,onhide:n,text:"",icon:null,spinner:null,duration:null,id:null,parentEl:null},r=function(e,t){var n={};for(var i in e)n[i]=e[i];for(var r in t)n[r]=t[r];return n},a=function(){var e=document.body||document.documentElement,t=e.style,n="transition";if("string"==typeof t[n])return!0;var i=["Moz","Webkit","Khtml","O","ms"];n=n.charAt(0).toUpperCase()+n.substr(1);for(var r=0;r<i.length;r++)if("string"==typeof t[i[r]+n])return!0;return!1}(),o=r(i,e),s=function(e){"ios-overlay-show"===e.animationName&&o.onshow(),"ios-overlay-hide"===e.animationName&&(d(),o.onhide())},l=(function(){t=document.createElement("div"),t.className="ui-ios-overlay",t.innerHTML+='<span class="title">'+o.text+"</span",e.icon?t.innerHTML+='<img src="'+e.icon+'">':e.spinner&&t.appendChild(e.spinner.el),a&&(t.addEventListener("webkitAnimationEnd",s,!1),t.addEventListener("msAnimationEnd",s,!1),t.addEventListener("oAnimationEnd",s,!1),t.addEventListener("animationend",s,!1)),e.parentEl?document.getElementById(e.parentEl).appendChild(t):document.body.appendChild(t),o.onbeforeshow(),a?t.className+=" ios-overlay-show":"function"==typeof $&&$(t).fadeIn({duration:200},function(){o.onshow()}),o.duration&&window.setTimeout(function(){l()},o.duration)}(),function(){o.onbeforehide(),a?t.className=t.className.replace("show","hide"):"function"==typeof $&&$(t).fadeOut({duration:200},function(){d(),o.onhide()})}),d=function(){e.parentEl?document.getElementById(e.parentEl).removeChild(t):document.body.removeChild(t)},u=function(e){e.text&&(t.getElementsByTagName("span")[0].innerHTML=e.text),e.icon&&(o.spinner&&(o.spinner.el.parentNode.removeChild(o.spinner.el),o.spinner=null),t.innerHTML+='<img src="'+e.icon+'">')};return{hide:l,destroy:d,update:u}};if("function"==typeof define&&define.amd&&define([],function(){return iosOverlay}),function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.Blazy=t()}(this,function(){"use strict";function e(e){var n=e._util;n.elements=o(e.options.selector),n.count=n.elements.length,n.destroyed&&(n.destroyed=!1,e.options.container&&u(e.options.container,function(e){l(e,"scroll",n.validateT)}),l(window,"resize",n.saveViewportOffsetT),l(window,"resize",n.validateT),l(window,"scroll",n.validateT)),t(e)}function t(e){for(var t=e._util,i=0;i<t.count;i++){var a=t.elements[i];(n(a)||r(a,e.options.successClass))&&(e.load(a),t.elements.splice(i,1),t.count--,i--)}0===t.count&&e.destroy()}function n(e){var t=e.getBoundingClientRect();return t.right>=p.left&&t.bottom>=p.top&&t.left<=p.right&&t.top<=p.bottom}function i(e,t,n){if(!r(e,n.successClass)&&(t||n.loadInvisible||e.offsetWidth>0&&e.offsetHeight>0)){var i=e.getAttribute(h)||e.getAttribute(n.src);if(i){var o=i.split(n.separator),s=o[m&&o.length>1?1:0],l="img"===e.nodeName.toLowerCase();if(u(n.breakpoints,function(t){e.removeAttribute(t.src)}),e.removeAttribute(n.src),l||void 0===e.src){var d=new Image;d.onerror=function(){n.error&&n.error(e,"invalid"),a(e,n.errorClass)},d.onload=function(){l?e.src=s:e.style.backgroundImage='url("'+s+'")',a(e,n.successClass),n.success&&n.success(e)},d.src=s}else e.src=s,a(e,n.successClass)}else n.error&&n.error(e,"missing"),r(e,n.errorClass)||a(e,n.errorClass)}}function r(e,t){return-1!==(" "+e.className+" ").indexOf(" "+t+" ")}function a(e,t){e.className=e.className+" "+t}function o(e){for(var t=[],n=document.querySelectorAll(e),i=n.length;i--;t.unshift(n[i]));return t}function s(e){p.bottom=(window.innerHeight||document.documentElement.clientHeight)+e,p.right=(window.innerWidth||document.documentElement.clientWidth)+e}function l(e,t,n){e.attachEvent?e.attachEvent&&e.attachEvent("on"+t,n):e.addEventListener(t,n,!1)}function d(e,t,n){e.detachEvent?e.detachEvent&&e.detachEvent("on"+t,n):e.removeEventListener(t,n,!1)}function u(e,t){if(e&&t)for(var n=e.length,i=0;n>i&&t(e[i],i)!==!1;i++);}function c(e,t,n){var i=0;return function(){var r=+new Date;t>r-i||(i=r,e.apply(n,arguments))}}var h,p,m;return function(n){if(!document.querySelectorAll){var r=document.createStyleSheet();document.querySelectorAll=function(e,t,n,i,a){for(a=document.all,t=[],e=e.replace(/\[for\b/gi,"[htmlFor").split(","),n=e.length;n--;){for(r.addRule(e[n],"k:v"),i=a.length;i--;)a[i].currentStyle.k&&t.push(a[i]);r.removeRule(0)}return t}}var a=this,o=a._util={};o.elements=[],o.destroyed=!0,a.options=n||{},a.options.error=a.options.error||!1,a.options.offset=a.options.offset||100,a.options.success=a.options.success||!1,a.options.selector=a.options.selector||".b-lazy",a.options.separator=a.options.separator||"|",a.options.container=a.options.container?document.querySelectorAll(a.options.container):!1,a.options.errorClass=a.options.errorClass||"b-error",a.options.breakpoints=a.options.breakpoints||!1,a.options.loadInvisible=a.options.loadInvisible||!1,a.options.successClass=a.options.successClass||"b-loaded",a.options.validateDelay=a.options.validateDelay||25,a.options.saveViewportOffsetDelay=a.options.saveViewportOffsetDelay||50,a.options.src=h=a.options.src||"data-src",m=window.devicePixelRatio>1,p={},p.top=0-a.options.offset,p.left=0-a.options.offset,a.revalidate=function(){e(this)},a.load=function(e,t){var n=this.options;void 0===e.length?i(e,t,n):u(e,function(e){i(e,t,n)})},a.destroy=function(){var e=this,t=e._util;e.options.container&&u(e.options.container,function(e){d(e,"scroll",t.validateT)}),d(window,"scroll",t.validateT),d(window,"resize",t.validateT),d(window,"resize",t.saveViewportOffsetT),t.count=0,t.elements.length=0,t.destroyed=!0},o.validateT=c(function(){t(a)},a.options.validateDelay,a),o.saveViewportOffsetT=c(function(){s(a.options.offset)},a.options.saveViewportOffsetDelay,a),s(a.options.offset),u(a.options.breakpoints,function(e){return e.width>=window.screen.width?(h=e.src,!1):void 0}),e(a)}}),$(".index_page").length)var cart=window.document.querySelector(".cart"),cartItems=cart.querySelector(".cart__count");if(settingsr&&$.inArray("delete_buy_button",settingsr)>-1&&$("#orderNow").hide(),$("#instafeed").length){var feed=new Instafeed({get:"user",limit:9,userId:"563190999",accessToken:"323833101.1677ed0.fcc5482509e845148f0636e980328400"});feed.run()}var delivery=sessionStorage.getItem("delivery");$("#inputPhone").length&&$("#inputPhone").mask("+79999999999",{autoclear:!1}),$("#form_auch-login").length&&$("#form_auch-login").mask("+79999999999",{autoclear:!1}),$("#form-phone").length&&$("#form-phone").mask("+79999999999",{autoclear:!1}),$("#phone").length&&$("#phone").mask("+79999999999",{autoclear:!1});var summ,dataTable=$("#tableOrder").DataTable({language:{emptyTable:"Корзина пуста"}}),cache_for_datatable,thiss;if($(".sous_select_box a").click(function(e){var t=$(this).data("text");sous_select(t),$("#select_sous").nifty("hide")}),$(".settings, .sale, .aboutus").length&&delivery_func(),$(".settings").length){$.getJSON("/address","",function(e){console.log(JSON.parse(e.result)),localStorage.memos=JSON.stringify(JSON.parse(e.result))});var items=getFromLocal("memos"),index;loadList(items),$("#main-button").prop("disabled",!0),$("#main-input").keyup(function(){0!==$(this).val().length?$("#main-button").prop("disabled",!1):$("#main-button").prop("disabled",!0)}),$("#main-input").keypress(function(e){13===e.which&&0!==$("#main-input").val().length&&$("#main-button").click()}),$("#main-button").click(function(){var e=$("#main-input").val();items.push(e),$("#main-input").val(""),loadList(items),storeToLocal("memos",items),$("button").prop("disabled",!0)}),$("ul.addrList").delegate("span","click",function(e){e.stopPropagation(),index=$("span").index(this),$(".addrList li").eq(index).remove(),items.splice(index,1),storeToLocal("memos",items)}),$("ul.addrList").delegate("li","click",function(){index=$(".addrList li").index(this);var e=items[index];$("#edit-input").val(e)}),$("#edit-button").click(function(){items[index]=$("#edit-input").val(),loadList(items),storeToLocal("memos",items)})}$(".userIsAuch .full_price, .borderLeft .full_price").length&&$("#delivery_time").datetimepicker({sideBySide:!0,locale:"ru",useCurrent:!1,widgetPositioning:{vertical:"bottom"}}),$(".userIsAuch h2, .borderLeft  h2 ").click(function(){$(".checkOut").addClass("isUp")});var tableOrder=$("#tableOrder tbody");tableOrder.on("mouseenter","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".action--like.haslogin").click(function(e){var t=$(this);console.log(t),$.getJSON("/like_add",{like:$(this).val()},function(e){"adfavorited"==e.result?(t.find("i").addClass("fa-heart"),t.find("i").removeClass("fa-heart-o"),swal({title:"Ура!",text:"Добавлено в избранное!",timer:1500,type:"success",showConfirmButton:!1})):"delete"==e.result?(t.find("i").addClass("fa-heart-o"),t.find("i").removeClass("fa-heart"),swal({title:"Упс!",text:"Удалено из избранного!",timer:1500,type:"error",showConfirmButton:!1})):0==e.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:1500,type:"error",showConfirmButton:!1})})}),$("#auch-menu-btn").click(function(e){$.getJSON("/auch",{login:$("#inputPhone").val(),password:$("#inputPassword").val()},function(e){1==e.result?swal({title:"Ура!",text:"Вход выполнен успешно!",timer:2e3,type:"success",showConfirmButton:!1},function(){location.reload()}):swal({title:"Упс!",text:"Такого пользоваеля не существует, либо пароль введен неправильно",type:"error",showConfirmButton:!0})})}),$(".select_it").click(function(){$.cookie("delivery",$("input:radio[name=delivery]:checked").val()),sessionStorage.setItem("delivery",$("input:radio[name=delivery]:checked").val()),$.cookie("localLinkClicked",!0),window.location.reload()}),tableOrder.on("mouseleave","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".like_no_admin").click(function(){swal({title:"Эта функция доступна только для зарегистрированых пользователей<br> <h3 class='swal'>Зарегистрируйся и получи скидку 10%</h3>",confirmButtonColor:"#4CAF50",text:"",type:"info",html:!0,showConfirmButton:!0,showCancelButton:!0,confirmButtonText:"Регистрация/Авторизация",cancelButtonText:"Позже",closeOnConfirm:!1},function(){document.location="/site_auch"})}),$(".pw-reset a, #restorePass").click(function(){var e=$("#inputPhone");""!=e.val()?$.getJSON("/pwreset",{login:e.val()},function(e){console.log(e),"sent"==e.result?swal("Пароль востановлен!","Новый пароль отправлен на вашу почту!","success"):0==e.result?swal("Упс!","Такого пользователя нет!","error"):2==e.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:2e3,showConfirmButton:!0})}):swal("Упс!","Необходимо ввести телефон!","warning")}),$(".checkOut input[type=number]").keypress(function(e){return e=e||window.event,e.charCode&&(e.charCode<48||e.charCode>57)?!1:void $(".full span").text(calculateSumm())}),$(document).keyup(function(e){27==e.keyCode&&($(".popUp").removeClass("isUp"),$("html").toggleClass("overflowbody"))}),$(".cantbuy").click(function(){swal({title:"Ой!",text:"Данный товар доступн только в кафе",type:"error",html:!0,showConfirmButton:!0,confirmButtonText:"Я понял"})}),$(".one--buy").click(function(){var e=jQuery.parseJSON($(this).attr("data-items"));1==e.sous?(cache_for_datatable=e,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+e.item_name+"</h3><small>"+e.item_component+"</small>"," ","<input type='number' value='1' data-price='"+e.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"})),cartItems.innerHTML=Number(cartItems.innerHTML)+1}),jQuery(document).ready(function(){var e=$("#tableOrder");e.on("click",".delete",function(e){dataTable.row(".selected").remove().draw(!1),$(".index_page").length&&(cartItems.innerHTML=Number(cartItems.innerHTML)-1),$(".full span").text(calculateSumm())})}),$("#orderNow").click(function(e){calculateSumm()<500?swal({title:"Ой!",text:"Для доставки минимальная сумма заказа составляет 500 рублей",type:"error",html:!0,showConfirmButton:!0,confirmButtonText:"Я понял"}):window.location.href="/order"}),$(".slider__item").click(function(e){$("html").toggleClass("overflowbody"),$("#one_img").removeAttr("src"),$(".preloader").show(),
$(".popUp").addClass("isUp"),$.ajax({type:"POST",contentType:"application/json",dataType:"json",url:"/get_one_item/"+$(this).attr("data-id-item"),success:function(e){$("#one_img").attr({src:"static/upload/"+e.result.imgs});var t={item_id:e.result.item_id,item_name:e.result.name,item_price:e.result.price,item_component:e.result.components,item_weight:e.result.weight,item_category:e.result.category,sous:e.result.sous};$(".aboutProduct .action--buy").attr({value:e.result.id,"data-items":JSON.stringify(t)}),arrays_one=e.result.components.split(","),""==arrays_one[0]?$(".aboutProduct h3").hide():$(".aboutProduct h3").show(),$("#one_array").empty(),$.each(arrays_one,function(e){$("<li/>").text(arrays_one[e]).appendTo($("#one_array"))}),$("#one_price").html(e.result.price+'<i class="fa fa-rub"></i>'),$("#one_weight").text(e.result.weight),$("#one_name").text(e.result.name),"deliveryincafe"==$.cookie("delivery")||1!=e.result.cafe_only?($(".aboutProduct .action--buy").show(),$(".aboutProduct .cantbuy").hide()):($(".aboutProduct .action--buy").hide(),$(".aboutProduct .cantbuy").show()),setTimeout(function(){$(".preloader").hide()},500)}})}),$(".closebtn").click(function(e){$(".popUp").removeClass("isUp"),$("html").toggleClass("overflowbody")}),$(".cart, .showCart, .userIsAuch h2,.borderLeft h2").click(function(e){0==calculateSumm()?iosOverlay({text:"Корзина пуста",duration:2e3,icon:"/static/img/cross.png"}):($(".full span").text(calculateSumm()),$("html").toggleClass("overflowbody"),$(".checkOut").addClass("isUp"))}),$(".closezakazbtn").click(function(e){$(".checkOut").removeClass("isUp"),$("html").toggleClass("overflowbody")}),$(function(){if($(".index_page").length){var e=$("#bar"),t=$(".view"),n=$(".cart"),i=e.offset().top-parseFloat(e.css("margin-top"));$(window).scroll(function(r){var a=$(this).scrollTop();a>=i?(e.addClass("fixed"),t.addClass("col-md-offset-2"),t.addClass("col-sm-offset-2"),n.addClass("cartAbsolute cartPerc")):(e.removeClass("fixed"),t.removeClass("col-md-offset-2"),t.removeClass("col-sm-offset-2"),n.removeClass("cartAbsolute cartPerc"))})}}),window.localLinkClicked=!1,window.onload=warning,$("a").on("click",function(){var e=$(this).attr("href");(!/^http?:\/\/./.test(e)||/http?:\/\/127.0.0.1\:5000/.test(e))&&$.cookie("localLinkClicked",!0)}),$(".logoa").click(function(e){window.location.reload(),$.removeCookie("localLinkClicked")}),function(e){"use strict";function t(e,t){var n=!0;return function(i){n&&(n=!1,setTimeout(function(){n=!0},t),e(i))}}function n(){p.revalidate()}function i(){if(console.log(global_sale),$(".index_page").length){r(),a();$(e);p=new Blazy({offset:200,success:function(){h.layout()}}),h.on("arrangeComplete",n),delivery_func(),classie.remove(f,"grid--loading");var t=$(".sliders").anyslider({interval:1e4,showBullets:!0,showControls:!0}),i=t.data("anyslider");$(".seq-prev").click(function(e){i.prev()}),$(".seq-next").click(function(e){i.next()}),$(".preloader").hide()}initIfhaveSession()}function r(){h=new Isotope(f,{isResizeBound:!1,itemSelector:".grid__item",percentPosition:!0,masonry:{columnWidth:".grid__sizer"},transitionDuration:"0.5s"})}function a(){_.forEach(function(e){e.addEventListener("click",function(){classie.remove(e.parentNode.querySelector(".filter__item--selected"),"filter__item--selected"),classie.add(e,"filter__item--selected"),h.arrange({filter:e.getAttribute("data-filter")}),s(),h.layout(),$("html, body").animate({scrollTop:$("#allCatalog").offset().top},1e3),p.revalidate()})}),e.addEventListener("resize",t(function(e){s(),h.layout()},50)),[].slice.call(f.querySelectorAll(".grid__item")).forEach(function(e){e.querySelector(".items-buy").addEventListener("click",o)})}function o(){var e=jQuery.parseJSON($(this).attr("data-items"));"True"==e.sous?(cache_for_datatable=e,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+e.item_name+"</h3><small>"+e.item_component+"</small>"," ","<input type='number' value='1' data-price='"+e.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"}),classie.add(y,"cart--animate"),setTimeout(function(){g.innerHTML=Number(g.innerHTML)+1},200),c(g,function(){classie.remove(y,"cart--animate")}))}function s(){for(var e=0,t=m.length;t>e;++e)m[e].resize()}var l={animations:Modernizr.cssanimations},d={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd",animation:"animationend"},u=d[Modernizr.prefixed("animation")],c=function(e,t){var n=function(e){if(l.animations){if(e.target!=this)return;this.removeEventListener(u,n)}t&&"function"==typeof t&&t.call()};l.animations?e.addEventListener(u,n):n()};if($(".index_page").length)var h,p,m=([].slice.call(document.querySelectorAll(".slider")),[]),f=document.querySelector(".grid"),_=[].slice.call(document.querySelectorAll(".filter > button")),y=document.querySelector(".cart"),g=y.querySelector(".cart__count");i()}(window);
//# sourceMappingURL=data:application/json;base64,
