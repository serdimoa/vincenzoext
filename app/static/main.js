function defineSequence(t,e){"use strict";var n=[],i=0,r=function(r,o){function s(t){return"[object Array]"===Object.prototype.toString.call(t)?!0:!1}function a(t,e){for(var n in e)t[n]=e[n];return t}function l(t,e){var n;return t.currentStyle?n=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(n=document.defaultView.getComputedStyle(t,"")[e]),n}function u(t,e,n){if(t.addEventListener)return t.addEventListener(e,n,!1),n;if(t.attachEvent){var i=function(){n.call(t)};return t.attachEvent("on"+e,i),i}}function c(t,e,n){t.addEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&t.detachEvent("on"+e,n)}function d(t){var e,n;return n=t.indexOf("ms")>-1?1:1e3,e="0s"==t?0:parseFloat(t.replace("s",""))*n}function h(t,e){return void 0!==t?new RegExp("(\\s|^)"+e+"(\\s|$)").test(t.className):void 0}function p(t,e){var n,i,r;for(s(t)===!1&&(i=1,t=[t]),i=t.length,r=0;i>r;r++)n=t[r],h(n,e)===!1&&(n.className+=(n.className?" ":"")+e)}function f(t,e){var n,i,r;for(s(t)===!1?(i=1,t=[t]):i=t.length,r=0;i>r;r++)n=t[r],h(n,e)===!0&&(n.className=n.className.replace(new RegExp("(\\s|^)"+e+"(\\s|$)")," ").replace(/^\s+|\s+$/g,""))}function m(t,e){var n=t.getBoundingClientRect(),i=!1;return e.clientX>=n.left&&e.clientX<=n.right&&e.clientY>=n.top&&e.clientY<=n.bottom&&(i=!0),i}function g(t,e,n){if("BODY"===e.nodeName)return!1;if(t!==e)return n=e,g(t,e.parentNode,n);if(void 0!==n)for(var i=n,r=t.getElementsByTagName(i.nodeName),o=r.length;o--;)if(i===r[o])return o+1}function v(t){var n=0,i=e.DIRECTION_NONE;return(void 0!==t.left||void 0!==t.right)&&(n+=1),(void 0!==t.up||void 0!==t.down)&&(n+=2),1===n?i=e.DIRECTION_HORIZONTAL:2===n?i=e.DIRECTION_VERTICAL:3===n&&(i=e.DIRECTION_ALL),i}function y(t,e){var n="seq-",i="no-touch";e.touch===!0&&(i="touch"),p(t,n+i)}var b=r.getAttribute("data-seq-enabled");if(null!==b)return n[b];r.setAttribute("data-seq-enabled",i),i++;var w={startingStepId:1,startingStepAnimatesIn:!1,cycle:!0,phaseThreshold:!0,reverseWhenNavigatingBackwards:!1,reverseTimingFunctionWhenNavigatingBackwards:!1,moveActiveStepToTop:!0,animateCanvas:!0,animateCanvasDuration:250,autoPlay:!1,autoPlayInterval:5e3,autoPlayDelay:null,autoPlayDirection:1,autoPlayButton:!0,autoPlayPauseOnHover:!0,navigationSkip:!0,navigationSkipThreshold:250,fadeStepWhenSkipped:!0,fadeStepTime:500,ignorePhaseThresholdWhenSkipped:!1,preventReverseSkipping:!1,nextButton:!0,prevButton:!0,pagination:!0,preloader:!1,preloadTheseSteps:[1],preloadTheseImages:[],hideStepsUntilPreloaded:!1,pausePreloader:!1,keyNavigation:!1,numericKeysGoToSteps:!1,keyEvents:{left:function(t){t.prev()},right:function(t){t.next()}},swipeNavigation:!0,swipeEvents:{left:function(t){t.next()},right:function(t){t.prev()},up:void 0,down:void 0},swipeHammerOptions:{},hashTags:!1,hashDataAttribute:!1,hashChangesOnFirstStep:!1,fallback:{speed:500}},S=50,_=100,x={animation:{WebkitAnimation:"-webkit-",animation:""}},T=function(t,e,n){function i(t){v.cssText=t}function r(t,e){return typeof t===e}function o(t,e){return!!~(""+t).indexOf(e)}function s(t,e){for(var i in t){var r=t[i];if(!o(r,"-")&&v[r]!==n)return"pfx"==e?r:!0}return!1}function a(t,e,i){for(var o in t){var s=e[t[o]];if(s!==n)return i===!1?t[o]:r(s,"function")?s.bind(i||e):s}return!1}function l(t,e,n){var i=t.charAt(0).toUpperCase()+t.slice(1),o=(t+" "+w.join(i+" ")+i).split(" ");return r(e,"string")||r(e,"undefined")?s(o,e):(o=(t+" "+S.join(i+" ")+i).split(" "),a(o,e,n))}var u,c,d,h="2.8.3",p={},f=e.documentElement,m="modernizr",g=e.createElement(m),v=g.style,y=({}.toString," -webkit- -moz- -o- -ms- ".split(" ")),b="Webkit Moz O ms",w=b.split(" "),S=b.toLowerCase().split(" "),_={svg:"http://www.w3.org/2000/svg"},x={},T=[],C=T.slice,D=function(t,n,i,r){var o,s,a,l,u=e.createElement("div"),c=e.body,d=c||e.createElement("body");if(parseInt(i,10))for(;i--;)a=e.createElement("div"),a.id=r?r[i]:m+(i+1),u.appendChild(a);return o=["&#173;",'<style id="s',m,'">',t,"</style>"].join(""),u.id=m,(c?u:d).innerHTML+=o,d.appendChild(u),c||(d.style.background="",d.style.overflow="hidden",l=f.style.overflow,f.style.overflow="hidden",f.appendChild(d)),s=n(u,t),c?u.parentNode.removeChild(u):(d.parentNode.removeChild(d),f.style.overflow=l),!!s},E={}.hasOwnProperty;d=r(E,"undefined")||r(E.call,"undefined")?function(t,e){return e in t&&r(t.constructor.prototype[e],"undefined")}:function(t,e){return E.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var n=C.call(arguments,1),i=function(){if(this instanceof i){var r=function(){};r.prototype=e.prototype;var o=new r,s=e.apply(o,n.concat(C.call(arguments)));return Object(s)===s?s:o}return e.apply(t,n.concat(C.call(arguments)))};return i}),x.touch=function(){var n;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?n=!0:D(["@media (",y.join("touch-enabled),("),m,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){n=9===t.offsetTop}),n},x.cssanimations=function(){return l("animationName")},x.csstransforms=function(){return!!l("transform")},x.csstransitions=function(){return l("transition")},x.svg=function(){return!!e.createElementNS&&!!e.createElementNS(_.svg,"svg").createSVGRect};for(var A in x)d(x,A)&&(c=A.toLowerCase(),p[c]=x[A](),T.push((p[c]?"":"no-")+c));return p.addTest=function(t,e){if("object"==typeof t)for(var i in t)d(t,i)&&p.addTest(i,t[i]);else{if(t=t.toLowerCase(),p[t]!==n)return p;e="function"==typeof e?e():e,"undefined"!=typeof enableClasses&&enableClasses&&(f.className+=" "+(e?"":"no-")+t),p[t]=e}return p},i(""),g=u=null,p._version=h,p._prefixes=y,p._domPrefixes=S,p._cssomPrefixes=w,p.testProp=function(t){return s([t])},p.testAllProps=l,p.testStyles=D,p.prefixed=function(t,e,n){return e?l(t,e,n):l(t,"pfx")},p}(window,window.document);Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){if(void 0===this||null===this)throw new TypeError('"this" is null or not defined');var n=this.length>>>0;for(e=+e||0,Math.abs(e)===1/0&&(e=0),0>e&&(e+=n,0>e&&(e=0));n>e;e++)if(this[e]===t)return e;return-1});var C,D;"undefined"!=typeof document.hidden?(C="hidden",D="visibilitychange"):"undefined"!=typeof document.mozHidden?(C="mozHidden",D="mozvisibilitychange"):"undefined"!=typeof document.msHidden?(C="msHidden",D="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(C="webkitHidden",D="webkitvisibilitychange");var E={modernizr:T};return E.ui={defaultElements:{nextButton:"seq-next",prevButton:"seq-prev",autoPlayButton:"seq-autoplay",pagination:"seq-pagination",preloader:"seq-preloader"},getElements:function(t,e){var n,i,r,o,s,a=[];for(i=e===!0?document.querySelectorAll("."+this.defaultElements[t]):document.querySelectorAll(e),r=i.length,s=0;r>s;s++)n=i[s],o=n.getAttribute("rel"),(null===o||o===E.$container.getAttribute("id"))&&a.push(n);return a},show:function(t,e){E.propertySupport.transitions===!0?(t.style[T.prefixed("transitionDuration")]=e+"ms",t.style[T.prefixed("transitionProperty")]="opacity, "+T.prefixed("transform"),t.style.opacity=1):E.animationFallback.animate(t,"opacity","",0,1,e)},hide:function(t,e,n){E.propertySupport.transitions===!0?(t.style[T.prefixed("transitionDuration")]=e+"ms",t.style[T.prefixed("transitionProperty")]="opacity, "+T.prefixed("transform"),t.style.opacity=0):E.animationFallback.animate(t,"opacity","",1,0,e),void 0!==n&&(E.hideTimer=setTimeout(function(){n()},e))}},E.autoPlay={init:function(){E.isAutoPlayPaused=!1,E.isAutoPlaying=!1},getDelay:function(t,e,n){switch(t){case!0:t=null===e?n:e;break;case!1:case void 0:t=0}return t},start:function(t,e){if(E.isAutoPlaying===!0||E.isReady===!1)return!1;var n=E.options;return t=this.getDelay(t,n.autoPlayDelay,n.autoPlayInterval),void 0===e&&E.started(E),p(E.$container,"seq-autoplaying"),p(E.$autoPlay,"seq-autoplaying"),n.autoPlay=!0,E.isAutoPlaying=!0,E.isAnimating===!1&&(E.autoPlayTimer=setTimeout(function(){1===n.autoPlayDirection?E.next():E.prev()},t)),!0},stop:function(){return E.options.autoPlay!==!0||E.isAutoPlaying!==!0?!1:(E.options.autoPlay=!1,E.isAutoPlaying=!1,clearTimeout(E.autoPlayTimer),f(E.$container,"seq-autoplaying"),f(E.$autoPlay,"seq-autoplaying"),E.stopped(E),!0)},unpause:function(){return E.isAutoPlayPaused!==!0?!1:(E.isAutoPlayPaused=!1,this.start(!0),!0)},pause:function(){return E.options.autoPlay!==!0?!1:(E.isAutoPlayPaused=!0,this.stop(),!0)}},E.canvas={init:function(t){void 0!==E.$screen&&(E.$screen.style.height="100%",E.$screen.style.width="100%"),E.canvas.getTransformProperties()},getSteps:function(t){var e,n,i,r=[],o=t.children,s=o.length;for(E.stepProperties={},i=0;s>i;i++)n=o[i],e=i+1,r.push(n),E.stepProperties[e]={},E.stepProperties[e].isActive=!1;return r},getTransformProperties:function(){var t,e,n,i;for(t=0;t<E.noOfSteps;t++)e=E.$steps[t],n=t+1,i={seqX:0,seqY:0,seqZ:0},i.seqX+=-1*e.offsetLeft,i.seqY+=-1*e.offsetTop,E.stepProperties[n].canvasTransform=i},move:function(t,e){if(E.options.animateCanvas===!0){var n,i=0;return e===!0&&E.firstRun===!1&&(i=E.options.animateCanvasDuration),E.isFallbackMode===!1&&(n=E.stepProperties[t].canvasTransform,E.$canvas.style[T.prefixed("transitionDuration")]=i+"ms",E.$canvas.style[T.prefixed("transform")]="translateX("+n.seqX+"px) translateY("+n.seqY+"px) translateZ("+n.seqZ+"px) "),!0}return!1},removeNoJsClass:function(){if(E.isFallbackMode!==!0)for(var t=0;t<E.$steps.length;t++){var e=E.$steps[t];if(h(e,"seq-in")===!0){var n=t+1;E.animation.resetInheritedSpeed(n),f(e,"seq-in")}}}},E.animation={getPhaseProperties:function(t){var e,n,i,r,o=E.$steps[t-1],s=o.querySelectorAll("*[data-seq]"),a=o.querySelectorAll("*"),u=a.length,c=[],h=[],p=[],f=[],m=[],g=[];for(n=0;u>n;n++)e=a[n],i=d(l(e,T.prefixed("transitionDuration"))),r=d(l(e,T.prefixed("transitionDelay"))),f.push(i),m.push(r),g.push(i+r),null!==e.getAttribute("data-seq")&&(c.push(i),h.push(r),p.push(i+r));var v=Math.max.apply(Math,f),y=Math.max.apply(Math,m),b=Math.max.apply(Math,g),w=Math.max.apply(Math,c),S=Math.max.apply(Math,h),_=Math.max.apply(Math,p);return{stepId:t,stepElement:o,children:a,animatedChildren:s,watchedTimings:{maxDuration:w,maxDelay:S,maxTotal:_},timings:{maxDuration:v,maxDelay:y,maxTotal:b}}},getPhaseThreshold:function(t,e,n,i){var r=0;return n===!0&&E.options.ignorePhaseThresholdWhenSkipped===!0&&(t=!0),void 0===t&&(e===!0?r=i:e!==!1&&(r=e)),r},getReversePhaseDelay:function(t,e,n,i,r){var o=0,s=0,a=0;return n===!0||i!==!1&&r!==!1||(o=t-e,o>0?a=o:0>o&&(s=Math.abs(o))),{next:a,current:s}},moveActiveStepToTop:function(t,e){if(E.options.moveActiveStepToTop===!0){var n=E.$steps[E.prevStepId-1],i=E.noOfSteps-1;n.style.zIndex=1,t.style.zIndex=i,e.style.zIndex=E.noOfSteps}return null},manageNavigationSkip:function(t,e){if(E.isFallbackMode!==!0){var n,i,r,o,s;if(E.ui.show(e,0),E.options.navigationSkip===!0){if(E.navigationSkipThresholdActive=!0,0!==E.phasesAnimating&&(clearTimeout(E.phaseThresholdTimer),clearTimeout(E.nextPhaseStartedTimer),E.options.fadeStepWhenSkipped===!0))for(n=1;n<=E.noOfSteps;n++)i=E.stepProperties[n],i.isActive===!0&&n!==t&&(r=E.$steps[n-1],o=n,s={},s.id=o,s.element=r,E.phasesSkipped.push(s),E.animation.stepSkipped(r));E.navigationSkipThresholdTimer=setTimeout(function(){E.navigationSkipThresholdActive=!1},E.options.navigationSkipThreshold)}}},stepSkipped:function(t){E.ui.hide(t,E.options.fadeStepTime,function(){})},changeStep:function(t){var e="seq-step"+t;if(void 0!==E.currentStepId){var n="seq-step"+E.currentStepId;p(E.$container,e),f(E.$container,n)}else p(E.$container,e)},reverseProperties:function(t,e,n,i,r){var o,s,a,u,c,h,p,f=this,m=t.children,g=m.length,v=t.timings,y="",b="",w=[],S=[];for(s=0;g>s;s++)o=m[s],a=d(l(o,T.prefixed("transitionDuration"))),u=d(l(o,T.prefixed("transitionDelay"))),c=a+u,u=v.maxTotal-c,i!==!0&&(u+=e),c=a+u,w.push(c),null!==o.getAttribute("data-seq")&&S.push(c),r.reverseTimingFunctionWhenNavigatingBackwards===!0&&(y=l(o,T.prefixed("transitionTimingFunction")),b=f.reverseTimingFunction(y)),o.style[T.prefixed("transition")]=a+"ms "+u+"ms "+b;return h=Math.max.apply(Math,w),p=Math.max.apply(Math,S),setTimeout(function(){f.domDelay(function(){for(s=0;g>s;s++)o=m[s],o.style[T.prefixed("transition")]=""})},h+n),p},forward:function(t,e,n,i,r){var o,s,a,l=this;E.firstRun===!1&&l.currentPhaseStarted(E.currentStepId),f(n,"seq-out"),l.domDelay(function(){o=l.startAnimateOut(E.currentStepId,e,1),s=o.watchedTimings.maxTotal,a=l.getPhaseThreshold(i,E.options.phaseThreshold,E.isAnimating,s),E.isAnimating=!0,l.startAnimateIn(t,s,n,a,r)})},reverse:function(t,e,n,i,r){var o,s,a,l,u,c=this,d=0;p(n,"seq-out"),c.domDelay(function(){s=c.getPhaseProperties(E.currentStepId,"current"),a=c.getPhaseProperties(t,"next"),d=c.getPhaseThreshold(i,E.options.phaseThreshold,E.isAnimating,s.timings.maxTotal),o=c.getReversePhaseDelay(s.timings.maxTotal,a.timings.maxTotal,E.options.phaseThreshold,E.options.ignorePhaseThresholdWhenSkipped,E.isAnimating),l=c.reverseProperties(s,o.current,0,i,E.options),u=c.reverseProperties(a,o.next,d,i,E.options),c.startAnimateOut(E.currentStepId,e,-1,l),E.isAnimating=!0,E.firstRun===!1&&c.currentPhaseStarted(E.currentStepId),c.startAnimateIn(t,l,n,d,r,u)})},startAnimateIn:function(t,e,n,i,r,o){var s,a,l=this;E.prevStepId=E.currentStepId,E.currentStepId=t,E.firstRun===!0&&E.pagination.update(),E.firstRun===!1||E.options.startingStepAnimatesIn===!0?(E.stepProperties[t].isActive=!0,E.nextPhaseStartedTimer=setTimeout(function(){l.nextPhaseStarted(t,r)},i),E.phaseThresholdTimer=setTimeout(function(){p(n,"seq-in"),f(n,"seq-out"),void 0===o&&(s=E.animation.getPhaseProperties(t,"next"),o=s.watchedTimings.maxTotal),l.phaseEnded(t,"next",o,l.nextPhaseEnded),a=l.getStepDuration(e,o,E.options.phaseThreshold),E.stepEndedTimer=setTimeout(function(){E.animation.stepEnded(t)},a)},i)):(l.resetInheritedSpeed(t),E.phasesAnimating=0,E.isAnimating=!1,E.options.autoPlay===!0&&E.autoPlay.start(!0),p(n,"seq-in"),f(n,"seq-out")),E.firstRun=!1},startAnimateOut:function(t,e,n,i){var r,o=this;return 1===n?(f(e,"seq-in"),p(e,"seq-out"),r=o.getPhaseProperties(t,"current"),i=r.watchedTimings.maxTotal):f(e,"seq-in"),E.firstRun===!1&&(E.stepProperties[t].isActive=!0,o.phaseEnded(t,"current",i,o.currentPhaseEnded)),r},getStepDuration:function(t,e,n){var i;switch(n){case!0:i=e;break;case!1:i=t>=e?t:e;break;default:i=t>=e+n?t-n:e}return i},currentPhaseStarted:function(t){E.phasesAnimating++,E.currentPhaseStarted(t,E)},currentPhaseEnded:function(t){E.currentPhaseEnded(t,E)},nextPhaseStarted:function(t,e){E.phasesAnimating++,void 0===e&&E.hashTags.update(),E.pagination.update(),E.nextPhaseStarted(t,E)},nextPhaseEnded:function(t){E.nextPhaseEnded(t,E)},phaseEnded:function(t,e,n,i){var r;r=function(t){E.stepProperties[t].isActive=!1,E.phasesAnimating--,i(t)},"current"===e?E.currentPhaseEndedTimer=setTimeout(function(){r(t)},n):E.nextPhaseEndedTimer=setTimeout(function(){r(t)},n)},stepEnded:function(t){E.isAnimating=!1,E.isAutoPlaying=!1,E.options.autoPlay===!0&&E.autoPlay.start(!0,!0),E.animationEnded(t,E)},reversePhase:function(t){var e={"seq-out":"seq-in","seq-in":"seq-out"};return e[t]},domDelay:function(t){setTimeout(function(){t()},S)},reverseTimingFunction:function(t){if(""===t||void 0===t)return t;var e,n,i,r,o={linear:"cubic-bezier(0.0,0.0,1.0,1.0)",ease:"cubic-bezier(0.25, 0.1, 0.25, 1.0)","ease-in":"cubic-bezier(0.42, 0.0, 1.0, 1.0)","ease-in-out":"cubic-bezier(0.42, 0.0, 0.58, 1.0)","ease-out":"cubic-bezier(0.0, 0.0, 0.58, 1.0)"};for(t.indexOf("cubic-bezier")<0&&(t=t.split(",")[0],t=o[t]),e=t.replace("cubic-bezier(","").replace(")","").split(","),n=e.length,r=0;n>r;r++)e[r]=parseFloat(e[r]);return i=[1-e[2],1-e[3],1-e[0],1-e[1]],t="cubic-bezier("+i+")"},resetInheritedSpeed:function(t){if(E.isFallbackMode!==!0){var e,n,i=E.$steps[t-1].querySelectorAll("*"),r=i.length;for(n=0;r>n;n++)e=i[n],e.style[T.prefixed("transition")]="0ms 0ms";E.animation.domDelay(function(){for(n=0;r>n;n++)e=i[n],e.style[T.prefixed("transition")]=""})}},getDirection:function(t,e,n,i,r,o,s){var a=1;return a=void 0!==e?e:o===!0||r===!0?s===!0&&1===t&&n===i?1:n>t?-1:1:1},requiresFallbackMode:function(t){var e=t.transitions,n=!1;return e===!1&&(n=!0),n},getPropertySupport:function(t){var e=!1,n=!1;return T.csstransitions===!0&&(e=!0),T.cssanimations===!0&&(n=!0),{transitions:e,animations:n}}},E.animationFallback={animate:function(t,e,n,i,r,o,s){if(t!==!1){var a=(new Date).getTime(),l=setInterval(function(){var u=Math.min(1,((new Date).getTime()-a)/o);t.style[e]=i+u*(r-i)+n,1===u&&(void 0!==s&&s(),clearInterval(l))},25);t.style[e]=i+n}},setupCanvas:function(t){var e,n,i;if(E.isFallbackMode===!0)for(p(E.$container,"seq-fallback"),void 0!==E.$screen&&(E.$screen.style.overflow="hidden",E.$screen.style.width="100%",E.$screen.style.height="100%"),E.$canvas.style.width="100%",E.$canvas.style.height="100%",this.canvasWidth=E.$canvas.offsetWidth,e=0;e<E.noOfSteps;e++)n=E.$steps[e],i=e+1,p(n,"seq-in"),n.style.width="100%",n.style.height="100%",n.style.position="absolute",n.style.whiteSpace="normal",n.style.left="100%"},moveCanvas:function(t,e,n,i){if(i===!0){var r=0,o=-100,s=100,a=0;-1===n&&(o=100,s=-100),this.animate(e,"left","%",r,o,E.options.fallback.speed),this.animate(t,"left","%",s,a,E.options.fallback.speed)}else e.style.left="-100%",t.style.left="0"},goTo:function(t,e,n,i,r,o,s){E.prevStepId=E.currentStepId,E.currentStepId=t,void 0===s&&E.hashTags.update(),E.pagination.update(),E.firstRun===!1?(this.moveCanvas(r,n,o,!0),E.isAnimating=!0,E.animationStarted(E.currentStepId,E),E.stepEndedTimer=setTimeout(function(){E.animation.stepEnded(E.currentStepId)},E.options.fallback.speed)):(this.moveCanvas(r,n,o,!1),E.firstRun=!1,E.options.autoPlay===!0&&E.autoPlay.start(!0))}},E.pagination={getLinks:function(t,e){var n,i,r=t.childNodes,o=r.length,s=[];for(i=0;o>i;i++)n=r[i],1===n.nodeType&&s.push(n);return s},update:function(){if(void 0!==E.$pagination.elements){var t,e,n,i,r=E.currentStepId-1,o=E.$pagination.elements.length;if(void 0!==E.$pagination.currentLinks)for(i=E.$pagination.currentLinks.length,t=0;i>t;t++)n=E.$pagination.currentLinks[t],f(n,"seq-current");for(E.$pagination.currentLinks=[],e=0;o>e;e++)n=E.$pagination.links[e][r],E.$pagination.currentLinks.push(n),p(n,"seq-current")}return E.$pagination.currentLinks}},E.hashTags={init:function(t){if(E.options.hashTags===!0){var e,n;E.hasPushstate=!(!window.history||!history.pushState),n=location.hash.replace("#!",""),E.stepHashTags=this.getStepHashTags(),""!==n&&(E.currentHashTag=n,e=this.hasCorrespondingStep(E.currentHashTag),e>-1&&(t=e+1))}return t},hasCorrespondingStep:function(t){var e=-1,n=E.stepHashTags.indexOf(t);return n>-1&&(e=n),e},getStepHashTags:function(){var t,e,n=[];for(t=0;t<E.noOfSteps;t++)e=E.options.hashDataAttribute===!1?E.$steps[t].id:E.$steps[t].getAttribute("data-seq-hashtag"),n.push(e);return n},update:function(){if(E.options.hashTags===!0&&E.firstRun===!1||E.options.hashTags===!0&&E.firstRun===!0&&E.options.hashChangesOnFirstStep===!0){var t=E.currentStepId-1;E.currentHashTag=E.stepHashTags[t],""!==E.currentHashtag&&(E.hasPushstate===!0?history.pushState(null,null,"#!"+E.currentHashTag):location.hash="#!"+E.currentHashTag)}},setupEvent:function(){if("onhashchange"in window){if(window.addEventListener)return window.addHashChange=function(t,e){window.addEventListener("hashchange",t,e)},void(window.removeHashChange=function(t){window.removeEventListener("hashchange",t)});if(window.attachEvent)return window.addHashChange=function(t){window.attachEvent("onhashchange",t)},void(window.removeHashChange=function(t){window.detachEvent("onhashchange",t)})}var t=[],e=location.href;window.addHashChange=function(e,n){"function"==typeof e&&t[n?"unshift":"push"](e)},window.removeHashChange=function(e){for(var n=t.length-1;n>=0;n--)t[n]===e&&t.splice(n,1)},setInterval(function(){var n=location.href;if(e!==n){var i=e;e=n;for(var r=0;r<t.length;r++)t[r].call(window,{type:"hashchange",newURL:n,oldURL:i})}},100)}},E.preload={defaultHtml:'<svg width="39" height="16" viewBox="0 0 39 16" xmlns="http://www.w3.org/2000/svg" class="seq-preload-indicator"><title>Sequence.js Preloading Indicator</title><desc>Three orange dots increasing in size from left to right</desc><g fill="#F96D38"><path class="seq-preload-circle seq-preload-circle-1" d="M3.999 12.012c2.209 0 3.999-1.791 3.999-3.999s-1.79-3.999-3.999-3.999-3.999 1.791-3.999 3.999 1.79 3.999 3.999 3.999z"/><path class="seq-preload-circle seq-preload-circle-2" d="M15.996 13.468c3.018 0 5.465-2.447 5.465-5.466 0-3.018-2.447-5.465-5.465-5.465-3.019 0-5.466 2.447-5.466 5.465 0 3.019 2.447 5.466 5.466 5.466z"/><path class="seq-preload-circle seq-preload-circle-3" d="M31.322 15.334c4.049 0 7.332-3.282 7.332-7.332 0-4.049-3.282-7.332-7.332-7.332s-7.332 3.283-7.332 7.332c0 4.05 3.283 7.332 7.332 7.332z"/></g></svg>',fallbackHtml:'<div class="seq-preload-indicator seq-preload-indicator-fallback"><div class="seq-preload-circle seq-preload-circle-1"></div><div class="seq-preload-circle seq-preload-circle-2"></div><div class="seq-preload-circle seq-preload-circle-3"></div></div>',defaultStyles:"@"+x.animation[T.prefixed("animation")]+"keyframes seq-preloader {50% {opacity: 1;}100% {opacity: 0;}}.seq-preloader {background: white;visibility: visible;opacity: 1;position: absolute;z-index: 9999;height: 100%;width: 100%;top: 0;left: 0;right: 0;bottom: 0;} .seq-preloader.seq-preloaded {opacity: 0;visibility: hidden;"+T.prefixed("transition")+": visibility 0s .5s, opacity .5s;}.seq-preload-indicator {overflow: visible;position: relative;top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);}.seq-preload-circle {display: inline-block;height: 12px;width: 12px;fill: #F96D38;opacity: 0;"+x.animation[T.prefixed("animation")]+"animation: seq-preloader 1.25s infinite;}.seq-preload-circle-2 {"+x.animation[T.prefixed("animation")]+"animation-delay: .15s;}.seq-preload-circle-3 {"+x.animation[T.prefixed("animation")]+"animation-delay: .3s;}.seq-preload-indicator-fallback{width: 42px;margin-left: -21px;overflow: visible;}.seq-preload-indicator-fallback .seq-preload-circle {width: 8px; height:8px;background-color: #F96D38;border-radius: 100%; opacity: 1;display: inline-block; vertical-align: middle;}.seq-preload-indicator-fallback .seq-preload-circle-2{margin-left: 3px; margin-right: 3px; width: 12px; height: 12px;}.seq-preload-indicator-fallback .seq-preload-circle-3{width: 16px; height: 16px;}",init:function(e){if(E.options.preloader!==!1){var n,i,r,o,s,a,l=this;return p(E.$container,"seq-preloading"),E.$preloader=E.ui.getElements("preloader",E.options.preloader),l.append(),l.addStyles(),l.toggleStepsVisibility("hide"),n=l.getImagesToPreload(E.options.preloadTheseSteps),i=l.getImagesToPreload(E.options.preloadTheseImages,!0),r=n.concat(i),o=t(r),o.on("always",function(t){l.complete(e)}),s=1,o.on("progress",function(t,e){a=e.isLoaded?"loaded":"broken",E.preloadProgress(a,e.img.src,s++,r.length,E)}),!0}return!1},complete:function(t){E.preloaded(E),E.options.pausePreloader!==!0&&(this.toggleStepsVisibility("show"),f(E.$container,"seq-preloading"),p(E.$container,"seq-preloaded"),p(E.$preloader[0],"seq-preloaded"),void 0!==this.preloadIndicatorTimer&&clearInterval(this.preloadIndicatorTimer),(T.prefixed("animation")===!1||T.svg===!1)&&(E.$preloader[0].style.display="none"),void 0!==t&&t())},addStyles:function(){if(E.options.preloader===!0){var t=document.head||document.getElementsByTagName("head")[0];if(this.styleElement=document.createElement("style"),this.styleElement.type="text/css",this.styleElement.styleSheet?this.styleElement.styleSheet.cssText=this.defaultStyles:this.styleElement.appendChild(document.createTextNode(this.defaultStyles)),t.appendChild(this.styleElement),T.prefixed("animation")===!1||T.svg===!1){var e=E.$preloader[0].firstChild,n=function(){e.style.visibility="hidden",preloadFlashTime=1e3,setTimeout(function(){e.style.visibility="visible"},500)};n(),this.preloadIndicatorTimer=setInterval(function(){n()},1e3)}return!0}return!1},removeStyles:function(){this.styleElement.parentNode.removeChild(this.styleElement)},getImagesToPreload:function(t,e){var n=[];if(s(t)===!0){var i,r,o,a,l,u,c,d,h=t.length;if(e!==!0)for(i=0;h>i;i++)for(o=E.$steps[i],a=o.getElementsByTagName("img"),l=a.length,r=0;l>r;r++)u=a[r],n.push(u);else for(c=[],i=0;h>i;i++)d=t[i],c[i]=new Image,c[i].src=d,n.push(c[i])}return n},append:function(){return E.options.preloader===!0?(E.$preloader=document.createElement("div"),E.$preloader.className="seq-preloader",E.$preloader=[E.$preloader],T.prefixed("animation")!==!1&&T.svg===!0?E.$preloader[0].innerHTML=E.preload.defaultHtml:E.$preloader[0].innerHTML=E.preload.fallbackHtml,E.$container.insertBefore(E.$preloader[0],null),!0):!1},toggleStepsVisibility:function(t){if(E.options.hideStepsUntilPreloaded===!0){var e,n;for(e=0;e<E.noOfSteps;e++)n=E.$steps[e],"hide"===t?E.ui.hide(n,0):E.ui.show(n,0);return!0}return!1}},E.manageEvents={list:{load:[],click:[],touchstart:[],mousemove:[],mouseleave:[],hammer:[],keyup:[],hashchange:[],resize:[]},init:function(){return E.manageEvents.list[D]=[],E.options.hashTags===!0&&this.add.hashChange(),E.options.swipeNavigation===!0?this.add.swipeNavigation():E.hammerTime=!1,E.options.keyNavigation===!0&&this.add.keyNavigation(),this.add.resizeThrottle(),this.add.pageVisibility(),E.options.nextButton!==!1&&(E.$next=E.ui.getElements("nextButton",E.options.nextButton),this.add.button(E.$next,"nav",E.next)),E.options.prevButton!==!1&&(E.$prev=E.ui.getElements("prevButton",E.options.prevButton),this.add.button(E.$prev,"nav",E.prev)),E.options.autoPlayButton!==!1&&(E.$autoPlay=E.ui.getElements("autoPlayButton",E.options.autoPlayButton),this.add.button(E.$autoPlay,"nav",E.toggleAutoPlay)),this.add.stopOnHover(),E.options.pagination!==!1&&(E.$pagination={},E.$pagination.relatedElementId=i,E.$pagination.links=[],E.$pagination.elements=E.ui.getElements("pagination",E.options.pagination),this.add.button(E.$pagination.elements,"pagination")),null},removeAll:function(t){var e,n;for(e in t)t.hasOwnProperty(e)===!0&&(n=t[e],this.remove(e));return null},remove:function(t){var e=E.manageEvents.list[t],n=e.length;switch(t){case"hashchange":E.options.hashTags===!0&&removeHashChange(e[0].handler);break;case"hammer":if(E.manageEvents.list.hammer.length>0&&void 0!==document.querySelectorAll){var i=E.manageEvents.list.hammer[0].handler;E.hammerTime.off("swipe",[i])}break;default:for(var r=0;n>r;r++){var o=e[r];c(o.element,t,o.handler)}}},add:{hashChange:function(){E.hashTags.setupEvent();var t=function(t){var e,n;e=t.newURL||location.href,e=e.split("#!")[1],E.currentHashTag!==e&&(n=E.stepHashTags.indexOf(e)+1,E.currentHashTag=e,E.goTo(n,void 0,void 0,!0))};return addHashChange(t),E.manageEvents.list.hashchange.push({element:window,handler:t}),E.manageEvents.list.hashchange},button:function(t,e,n){var i,r,o,s,a,l,c,d=t.length;switch(e){case"nav":o=function(t){i=u(t,"click",function(t){t||(t=window.event),t.preventDefault?t.preventDefault():t.returnValue=!1,n()})};break;case"pagination":o=function(t,e){i=u(t,"click",function(t,e){t||(t=window.event),t.preventDefault?t.preventDefault():t.returnValue=!1;var n=t.target||t.srcElement;s=this,l=g(s,n),E.goTo(l)}),E.$pagination.links.push(E.pagination.getLinks(t,e))}}for(c=0;d>c;c++)r=t[c],a=r.getAttribute("rel"),a===E.$container.id&&null===r.getAttribute("data-seq-button")?(r.setAttribute("data-seq-button",!0),o(r,a)):null===a&&null===r.getAttribute("data-seq-button")&&o(r,a),E.manageEvents.list.click.push({element:r,handler:i});return E.manageEvents.list.click},stopOnHover:function(){var t,e;return E.isMouseOver=!1,t=u(E.$container,"touchstart",function(t){E.isTouched=!0}),E.manageEvents.list.touchstart.push({element:E.$container,handler:t}),e=u(E.$container,"mousemove",function(t){return t=t||window.event,E.isTouched===!0?void(E.isTouched=!1):void(m(E.$container,t)===!0?(E.options.autoPlayPauseOnHover===!0&&E.isMouseOver===!1&&E.autoPlay.pause(),E.isMouseOver=!0):(E.options.autoPlayPauseOnHover===!0&&E.isMouseOver===!0&&E.autoPlay.unpause(),E.isMouseOver=!1))}),E.manageEvents.list.mousemove.push({element:E.$container,handler:e}),e=u(E.$container,"mouseleave",function(t){E.options.autoPlayPauseOnHover===!0&&E.autoPlay.unpause(),E.isMouseOver=!1}),E.manageEvents.list.mouseleave.push({element:E.$container,handler:e}),null},swipeNavigation:function(){if(void 0===window.addEventListener)return void(E.hammerTime=!1);var t,n;"function"==typeof e&&(n=function(t){switch(t.direction){case 2:E.options.swipeEvents.left(E);break;case 4:E.options.swipeEvents.right(E);break;case 8:E.options.swipeEvents.up(E);break;case 16:E.options.swipeEvents.down(E)}},E.hammerTime=new e(E.$container).on("swipe",n),E.hammerTime.get("swipe").set(E.options.swipeHammerOptions),t=v(E.options.swipeEvents),E.hammerTime.get("swipe").set({direction:t}),E.manageEvents.list.hammer.push({element:E.$container,handler:n}))},keyNavigation:function(){var t=u(document,"keyup",function(t){t||(t=window.event);var e=parseInt(String.fromCharCode(t.keyCode));switch(e>0&&e<=E.noOfSteps&&E.options.numericKeysGoToSteps&&E.goTo(e),t.keyCode){case 37:E.options.keyEvents.left(E);break;case 39:E.options.keyEvents.right(E)}});E.manageEvents.list.keyup.push({element:document,handler:t})},resizeThrottle:function(){function t(){setTimeout(function(){E.canvas.getTransformProperties(),E.propertySupport.transitions===!0&&E.canvas.move(E.currentStepId,!1)},500),E.throttledResize(E)}var e,n;n=u(window,"resize",function(n){clearTimeout(e),e=setTimeout(t,_)}),E.manageEvents.list.resize.push({element:window,handler:n})},pageVisibility:function(){var t=u(document,D,function(){document[C]?E.autoPlay.pause():E.autoPlay.unpause()},!1);E.manageEvents.list[D].push({element:document,handler:t})}}},E.init=function(e){var n,i,r,s;E.options=a(w,o),E.isAnimating=!1,E.isReady=!1,E.$container=e,E.$screen=E.$container.querySelectorAll(".seq-screen")[0],E.$canvas=E.$container.querySelectorAll(".seq-canvas")[0],E.$steps=E.canvas.getSteps(E.$canvas),E.noOfSteps=E.$steps.length,E.phasesAnimating=0,E.phasesSkipped=[],y(E.$container,T),n=E.options.startingStepId,p(E.$container,"seq-active"),E.propertySupport=E.animation.getPropertySupport(),E.isFallbackMode=E.animation.requiresFallbackMode(E.propertySupport),E.canvas.init(n),E.canvas.removeNoJsClass(E),E.manageEvents.init(),E.autoPlay.init(),E.firstRun=!0,n=E.hashTags.init(n),1===E.options.autoPlayDirection?(r=n-1,E.prevStepId=1>r?E.noOfSteps:r):(r=n+1,E.prevStepId=r>E.noOfSteps?1:r),E.currentStepId=E.prevStepId,i=E.prevStepId,E.animationFallback.setupCanvas(n),s=function(){E.animation.domDelay(function(){E.animation.domDelay(function(){E.animation.resetInheritedSpeed(i)}),E.isReady=!0,E.ready(E),E.goTo(n,E.options.autoPlayDirection,!0)})},E.options.preloader!==!1&&void 0!==document.querySelectorAll&&"function"==typeof t?E.preload.init(function(){s()}):s()},E.destroy=function(){var t,e,n;for(E.autoPlay.stop(),clearTimeout(E.autoPlayTimer),clearTimeout(E.phaseThresholdTimer),clearTimeout(E.stepEndedTimer),clearTimeout(E.currentPhaseEndedTimer),clearTimeout(E.nextPhaseStartedTimer),clearTimeout(E.nextPhaseEndedTimer),clearTimeout(E.fadeStepTimer),clearTimeout(E.hideTimer),clearTimeout(E.navigationSkipThresholdTimer),E.manageEvents.removeAll(E.manageEvents.list),f(E.$pagination.currentLinks,"seq-current"),f(E.$container,"seq-step"+E.currentStepId),f(E.$container,"seq-active"),E.$container.removeAttribute("style"),void 0!==E.$screen&&E.$screen.removeAttribute("style"),E.$canvas.removeAttribute("style"),t=0;t<E.noOfSteps;t++)e=E.$steps[t],e.removeAttribute("style"),E.animation.resetInheritedSpeed(t+1),f(e,"seq-in"),f(e,"seq-out");return n=E.$steps[E.options.startingStepId-1],E.animation.resetInheritedSpeed(E.options.startingStepId),p(n,"seq-in"),r.removeAttribute("data-seq-enabled"),E.destroyed(E),E=null},E.next=function(){var t=E.currentStepId+1;return t>E.noOfSteps&&E.options.cycle===!1?!1:(t>E.noOfSteps&&(t=1),E.goTo(t),t)},E.prev=function(){var t,e=E.currentStepId-1;return 1>e&&E.options.cycle===!1?!1:(1>e&&(e=E.noOfSteps),
E.options.reverseWhenNavigatingBackwards===!0&&(t=-1),E.goTo(e,t),e)},E.toggleAutoPlay=function(t){return E.isAutoPlaying===!1?E.start(t):E.stop(),E.isAutoPlaying},E.stop=function(){E.autoPlay.stop()},E.start=function(t){E.autoPlay.start(t)},E.goTo=function(t,e,n,i){if(e=E.animation.getDirection(t,e,E.currentStepId,E.noOfSteps,E.isFallbackMode,E.options.reverseWhenNavigatingBackwards,E.options.cycle),void 0===t||1>t||t>E.noOfSteps||t===E.currentStepId||E.options.navigationSkip===!1&&E.isAnimating===!0||E.options.navigationSkip===!0&&E.navigationSkipThresholdActive===!0&&void 0===i||E.isFallbackMode===!0&&E.isAnimating===!0&&void 0===i||E.options.preventReverseSkipping===!0&&E.direction!==e&&E.isAnimating===!0)return!1;var r,o;return clearTimeout(E.autoPlayTimer),E.direction=e,1===e?f(E.$container,"seq-reversed"):p(E.$container,"seq-reversed"),r=E.$steps[E.currentStepId-1],o=E.$steps[t-1],E.animation.moveActiveStepToTop(r,o),E.animation.changeStep(t),E.isFallbackMode===!1?(E.animation.resetInheritedSpeed(t),(E.firstRun===!1||E.firstRun===!0&&E.options.startingStepAnimatesIn===!0)&&E.animationStarted(t,E),E.canvas.move(t,!0),E.animation.manageNavigationSkip(t,o),1===e?E.animation.forward(t,r,o,n,i):E.animation.reverse(t,r,o,n,i)):E.animationFallback.goTo(t,E.currentStepId,r,t,o,e,i),!0},E.started=function(t){},E.stopped=function(t){},E.animationStarted=function(t,e){},E.animationEnded=function(t,e){},E.currentPhaseStarted=function(t,e){},E.currentPhaseEnded=function(t,e){},E.nextPhaseStarted=function(t,e){},E.nextPhaseEnded=function(t,e){},E.throttledResize=function(t){},E.preloaded=function(t){},E.preloadProgress=function(t,e,n,i,r){},E.ready=function(t){},E.destroyed=function(t){},E.utils={addClass:p,removeClass:f,addEvent:u,removeEvent:c},E.init(r),n.push(E),E};return r}function delivery_func(){void 0===delivery?$("#select_delivery").nifty("show"):$("input:radio[name=group2][value='"+$.cookie("delivery")+"']").prop({checked:!0})}function initIfhaveSession(){var t=sessionStorage.getItem("cart");if(null!=t){var e=JSON.parse(t);"Корзина пуста"!=e[0].row[0]&&(e.forEach(function(t){console.log(t.row[0]),null==t.row[1]?(dataTable.row.add([t.row[0],"","<input type='number' value='"+t.row[2]+"' data-price='"+t.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())):(dataTable.row.add([t.row[0],"<select class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='"+t.row[2]+"' data-price='"+t.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect(),$(".fancified :contains("+t.row[1]+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()))}),$(".basic").trigger("update.fs"))}}function dataFromTable(){var t=new Array;return $("#tableOrder tr").each(function(e,n){t[e]={row:[$(n).find("td:eq(0)").html(),$(n).find("td:eq(1)").find(".fancified option:selected").val(),$(n).find("td:eq(2)").find("input").val(),$(n).find("td:eq(3)").text(),$(n).find("td:eq(4)").find("a").attr("id")]}}),t.shift(),t}function fnGetSelected(t){return t.$("tr.selected")}function calculateSumm(){return summ=0,$(".checkOut input[type=number]").each(function(){summ+=parseInt($(this).val()*$(this).attr("data-price"))}),0!=summ&&"no_delivery"==$.cookie("delivery")&&(summ-=10*summ/100),$(".userIsAuch .full_price").length&&$(".full_price").text(summ),$(".borderLeft .full_price").length&&$(".full_price").text(summ),sessionStorage.setItem("cart",JSON.stringify(dataFromTable())),sessionStorage.setItem("cart_price",summ),sessionStorage.setItem("delivery",$.cookie("delivery")),summ}function unique(t){for(var e={},n=0;n<t.length;n++){var i=t[n];e[i]=!0}return Object.keys(e)}function removeA(t){for(var e,n,i=arguments,r=i.length;r>1&&t.length;)for(e=i[--r];-1!==(n=t.indexOf(e));)t.splice(n,1);return t}if(function(){function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,r=this,o=r.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if("object"==typeof t){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;t.length>e;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,r=this.getListenersAsObject(t),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===e(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;t.length>e;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,r,o=this.getListenersAsObject(t);for(r in o)o.hasOwnProperty(r)&&(i=e(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,r,o=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)o.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if("object"===n)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,r,o,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(t,n.listener),o=n.listener.apply(this,e||[]),o===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=o,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:this.EventEmitter=t}.call(this),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var r=function(){};n.removeEventListener?r=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(r=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):t.eventie=o}(this),function(t,e){"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("eventEmitter"),require("eventie")):t.imagesLoaded=e(t,t.EventEmitter,t.eventie)}(this,function(t,e,n){function i(t,e){for(var n in e)t[n]=e[n];return t}function r(t){return"[object Array]"===h.call(t)}function o(t){var e=[];if(r(t))e=t;else if("number"==typeof t.length)for(var n=0,i=t.length;i>n;n++)e.push(t[n]);else e.push(t);return e}function s(t,e,n){if(!(this instanceof s))return new s(t,e);"string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=o(t),this.options=i({},this.options),"function"==typeof e?n=e:i(this.options,e),n&&this.on("always",n),this.getImages(),u&&(this.jqDeferred=new u.Deferred);var r=this;setTimeout(function(){r.check()})}function a(t){this.img=t}function l(t){this.src=t,p[t]=this}var u=t.jQuery,c=t.console,d=void 0!==c,h=Object.prototype.toString;s.prototype=new e,s.prototype.options={},s.prototype.getImages=function(){this.images=[];for(var t=0,e=this.elements.length;e>t;t++){var n=this.elements[t];if("IMG"===n.nodeName&&this.addImage(n),n.nodeType&&(1===n.nodeType||9===n.nodeType))for(var i=n.querySelectorAll("img"),r=0,o=i.length;o>r;r++){var s=i[r];this.addImage(s)}}},s.prototype.addImage=function(t){var e=new a(t);this.images.push(e)},s.prototype.check=function(){function t(t,r){return e.options.debug&&d&&c.log("confirm",t,r),e.progress(t),n++,n===i&&e.complete(),!0}var e=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return void this.complete();for(var r=0;i>r;r++){var o=this.images[r];o.on("confirm",t),o.check()}},s.prototype.progress=function(t){this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded;var e=this;setTimeout(function(){e.emit("progress",e,t),e.jqDeferred&&e.jqDeferred.notify&&e.jqDeferred.notify(e,t)})},s.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var e=this;setTimeout(function(){if(e.emit(t,e),e.emit("always",e),e.jqDeferred){var n=e.hasAnyBroken?"reject":"resolve";e.jqDeferred[n](e)}})},u&&(u.fn.imagesLoaded=function(t,e){var n=new s(this,t,e);return n.jqDeferred.promise(u(this))}),a.prototype=new e,a.prototype.check=function(){var t=p[this.img.src]||new l(this.img.src);if(t.isConfirmed)return void this.confirm(t.isLoaded,"cached was confirmed");if(this.img.complete&&void 0!==this.img.naturalWidth)return void this.confirm(0!==this.img.naturalWidth,"naturalWidth");var e=this;t.on("confirm",function(t,n){return e.confirm(t.isLoaded,n),!0}),t.check()},a.prototype.confirm=function(t,e){this.isLoaded=t,this.emit("confirm",this,e)};var p={};return l.prototype=new e,l.prototype.check=function(){if(!this.isChecked){var t=new Image;n.bind(t,"load",this),n.bind(t,"error",this),t.src=this.src,this.isChecked=!0}},l.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.prototype.onload=function(t){this.confirm(!0,"onload"),this.unbindProxyEvents(t)},l.prototype.onerror=function(t){this.confirm(!1,"onerror"),this.unbindProxyEvents(t)},l.prototype.confirm=function(t,e){this.isConfirmed=!0,this.isLoaded=t,this.emit("confirm",this,e)},l.prototype.unbindProxyEvents=function(t){n.unbind(t.target,"load",this),n.unbind(t.target,"error",this)},s}),function(){"use strict";function t(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,i),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,e+=1}var e=0,n={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var i in n)e.push(n[i]);for(var r=0,o=e.length;o>r;r++)e[r][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.invokeAll("enable")},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=r.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,i[t.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,i={},r=window.Waypoint,o=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(".waypoints"),delete i[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,r.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){(!e.didScroll||r.isTouch)&&(e.didScroll=!0,r.requestAnimationFrame(t))})},e.prototype.handleResize=function(){r.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in e){var i=e[n],r=i.newScroll>i.oldScroll,o=r?i.forward:i.backward;for(var s in this.waypoints[n]){var a=this.waypoints[n][s],l=i.oldScroll<a.triggerPoint,u=i.newScroll>=a.triggerPoint,c=l&&u,d=!l&&!u;(c||d)&&(a.queueTrigger(o),t[a.group.id]=a.group)}}for(var h in t)t[h].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?r.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?r.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var n in this.waypoints[e])t.push(this.waypoints[e][n]);for(var i=0,r=t.length;r>i;i++)t[i].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,n=e?void 0:this.adapter.offset(),i={};this.handleScroll(),t={horizontal:{contextOffset:e?0:n.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:n.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var o in t){var s=t[o];for(var a in this.waypoints[o]){var l,u,c,d,h,p=this.waypoints[o][a],f=p.options.offset,m=p.triggerPoint,g=0,v=null==m;p.element!==p.element.window&&(g=p.adapter.offset()[s.offsetProp]),"function"==typeof f?f=f.apply(p):"string"==typeof f&&(f=parseFloat(f),p.options.offset.indexOf("%")>-1&&(f=Math.ceil(s.contextDimension*f/100))),l=s.contextScroll-s.contextOffset,p.triggerPoint=g+l-f,u=m<s.oldScroll,c=p.triggerPoint>=s.oldScroll,d=u&&c,h=!u&&!c,!v&&d?(p.queueTrigger(s.backward),i[p.group.id]=p.group):!v&&h?(p.queueTrigger(s.forward),i[p.group.id]=p.group):v&&s.oldScroll>=p.triggerPoint&&(p.queueTrigger(s.forward),i[p.group.id]=p.group)}}return r.requestAnimationFrame(function(){for(var t in i)i[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in i)i[t].refresh()},e.findByElement=function(t){return i[t.waypointContextKey]},window.onload=function(){o&&o(),e.refreshAll()},r.requestAnimationFrame=function(e){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t;n.call(window,e)},r.Context=e}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function n(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}var i={vertical:{},horizontal:{}},r=window.Waypoint;n.prototype.add=function(t){this.waypoints.push(t)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],r="up"===n||"left"===n;i.sort(r?e:t);for(var o=0,s=i.length;s>o;o+=1){var a=i[o];(a.options.continuous||o===i.length-1)&&a.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(e){this.waypoints.sort(t);var n=r.Adapter.inArray(e,this.waypoints),i=n===this.waypoints.length-1;return i?null:this.waypoints[n+1]},n.prototype.previous=function(e){this.waypoints.sort(t);var n=r.Adapter.inArray(e,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},n.prototype.remove=function(t){var e=r.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(t){return i[t.axis][t.name]||new n(t)},r.Group=n}(),function(){"use strict";function t(t){return t===t.window}function e(e){return t(e)?e:e.defaultView}function n(t){this.element=t,this.handlers={}}var i=window.Waypoint;n.prototype.innerHeight=function(){var e=t(this.element);return e?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var e=t(this.element);return e?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(t,e){function n(t,e,n){for(var i=0,r=e.length-1;r>i;i++){var o=e[i];n&&n!==o||t.removeEventListener(o)}}var i=t.split("."),r=i[0],o=i[1],s=this.element;if(o&&this.handlers[o]&&r)n(s,this.handlers[o][r],e),this.handlers[o][r]=[];else if(r)for(var a in this.handlers)n(s,this.handlers[a][r]||[],e),this.handlers[a][r]=[];else if(o&&this.handlers[o]){for(var l in this.handlers[o])n(s,this.handlers[o][l],e);this.handlers[o]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var t=this.element.ownerDocument.documentElement,n=e(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}},n.prototype.on=function(t,e){var n=t.split("."),i=n[0],r=n[1]||"__default",o=this.handlers[r]=this.handlers[r]||{},s=o[i]=o[i]||[];s.push(e),this.element.addEventListener(i,e)},n.prototype.outerHeight=function(e){var n,i=this.innerHeight();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},n.prototype.outerWidth=function(e){var n,i=this.innerWidth();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},n.prototype.scrollLeft=function(){var t=e(this.element);return t?t.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var t=e(this.element);return t?t.pageYOffset:this.element.scrollTop},n.extend=function(){function t(t,e){if("object"==typeof t&&"object"==typeof e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}for(var e=Array.prototype.slice.call(arguments),n=1,i=e.length;i>n;n++)t(e[0],e[n]);return e[0]},n.inArray=function(t,e,n){return null==e?-1:e.indexOf(t,n)},n.isEmptyObject=function(t){for(var e in t)return!1;return!0},i.adapters.push({name:"noframework",Adapter:n}),i.Adapter=n}(),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):jQuery)}(function(t){function e(t){return a.raw?t:encodeURIComponent(t)}function n(t){return a.raw?t:decodeURIComponent(t)}function i(t){return e(a.json?JSON.stringify(t):String(t))}function r(t){0===t.indexOf('"')&&(t=t.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return t=decodeURIComponent(t.replace(s," ")),a.json?JSON.parse(t):t}catch(e){}}function o(e,n){var i=a.raw?e:r(e);return t.isFunction(n)?n(i):i}var s=/\+/g,a=t.cookie=function(r,s,l){if(void 0!==s&&!t.isFunction(s)){if(l=t.extend({},a.defaults,l),"number"==typeof l.expires){var u=l.expires,c=l.expires=new Date;c.setTime(+c+864e5*u)}return document.cookie=[e(r),"=",i(s),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var d=r?void 0:{},h=document.cookie?document.cookie.split("; "):[],p=0,f=h.length;f>p;p++){var m=h[p].split("="),g=n(m.shift()),v=m.join("=");if(r&&r===g){d=o(v,s);break}r||void 0===(v=o(v))||(d[g]=v)}return d};a.defaults={},t.removeCookie=function(e,n){return void 0===t.cookie(e)?!1:(t.cookie(e,"",t.extend({},n,{expires:-1})),!t.cookie(e))}}),function(t,e,n,i){"use strict";function r(t,e,n){return setTimeout(c(t,n),e)}function o(t,e,n){return Array.isArray(t)?(s(t,n[e],n),!0):!1}function s(t,e,n){var r;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==i)for(r=0;r<t.length;)e.call(n,t[r],r,t),r++;else for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t)}function a(t,e,n){for(var r=Object.keys(e),o=0;o<r.length;)(!n||n&&t[r[o]]===i)&&(t[r[o]]=e[r[o]]),o++;return t}function l(t,e){return a(t,e,!0)}function u(t,e,n){var i,r=e.prototype;i=t.prototype=Object.create(r),i.constructor=t,i._super=r,n&&a(i,n)}function c(t,e){return function(){return t.apply(e,arguments)}}function d(t,e){return typeof t==ct?t.apply(e?e[0]||i:i,e):t}function h(t,e){return t===i?e:t}function p(t,e,n){s(v(e),function(e){t.addEventListener(e,n,!1)})}function f(t,e,n){s(v(e),function(e){t.removeEventListener(e,n,!1)})}function m(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function g(t,e){return t.indexOf(e)>-1}function v(t){return t.trim().split(/\s+/g)}function y(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function b(t){return Array.prototype.slice.call(t,0)}function w(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];y(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function S(t,e){for(var n,r,o=e[0].toUpperCase()+e.slice(1),s=0;s<lt.length;){if(n=lt[s],r=n?n+o:e,r in t)return r;s++}return i}function _(){return ft++}function x(t){var e=t.ownerDocument;return e.defaultView||e.parentWindow}function T(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){d(t.options.enable,[t])&&n.handler(e)},this.init()}function C(t){var e,n=t.options.inputClass;return new(e=n?n:vt?M:yt?H:gt?B:R)(t,D)}function D(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&Tt&&i-r===0,s=e&(Dt|Et)&&i-r===0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,E(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function E(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=P(e)),r>1&&!n.firstMultiple?n.firstMultiple=P(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,a=s?s.center:o.center,l=e.center=k(i);e.timeStamp=pt(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=q(a,l),e.distance=O(a,l),A(n,e),e.offsetDirection=$(e.deltaX,e.deltaY),e.scale=s?j(s.pointers,i):1,e.rotation=s?z(s.pointers,i):0,I(n,e);var u=t.element;m(e.srcEvent.target,u)&&(u=e.srcEvent.target),e.target=u}function A(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};(e.eventType===Tt||o.eventType===Dt)&&(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}function I(t,e){var n,r,o,s,a=t.lastInterval||e,l=e.timeStamp-a.timeStamp;if(e.eventType!=Et&&(l>xt||a.velocity===i)){var u=a.deltaX-e.deltaX,c=a.deltaY-e.deltaY,d=L(l,u,c);r=d.x,o=d.y,n=ht(d.x)>ht(d.y)?d.x:d.y,s=$(u,c),t.lastInterval=e}else n=a.velocity,r=a.velocityX,o=a.velocityY,s=a.direction;e.velocity=n,e.velocityX=r,e.velocityY=o,e.direction=s}function P(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:dt(t.pointers[n].clientX),clientY:dt(t.pointers[n].clientY)},n++;return{timeStamp:pt(),pointers:e,center:k(e),deltaX:t.deltaX,deltaY:t.deltaY}}function k(t){var e=t.length;if(1===e)return{x:dt(t[0].clientX),y:dt(t[0].clientY)};for(var n=0,i=0,r=0;e>r;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:dt(n/e),y:dt(i/e)}}function L(t,e,n){return{x:e/t||0,y:n/t||0}}function $(t,e){return t===e?At:ht(t)>=ht(e)?t>0?It:Pt:e>0?kt:Lt}function O(t,e,n){n||(n=zt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function q(t,e,n){n||(n=zt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}function z(t,e){return q(e[1],e[0],jt)-q(t[1],t[0],jt)}function j(t,e){return O(e[0],e[1],jt)/O(t[0],t[1],jt)}function R(){this.evEl=Mt,this.evWin=Ft,this.allow=!0,this.pressed=!1,T.apply(this,arguments)}function M(){this.evEl=Wt,this.evWin=Bt,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function F(){this.evTarget=Vt,this.evWin=Yt,this.started=!1,T.apply(this,arguments)}function N(t,e){var n=b(t.touches),i=b(t.changedTouches);return e&(Dt|Et)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function H(){this.evTarget=Gt,this.targetIds={},T.apply(this,arguments)}function W(t,e){var n=b(t.touches),i=this.targetIds;if(e&(Tt|Ct)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=b(t.changedTouches),a=[],l=this.target;if(o=n.filter(function(t){return m(t.target,l)}),e===Tt)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(Dt|Et)&&delete i[s[r].identifier],r++;return a.length?[w(o.concat(a),"identifier",!0),a]:void 0}function B(){T.apply(this,arguments);var t=c(this.handler,this);this.touch=new H(this.manager,t),this.mouse=new R(this.manager,t)}function U(t,e){this.manager=t,this.set(e)}function V(t){if(g(t,ee))return ee;var e=g(t,ne),n=g(t,ie);return e&&n?ne+" "+ie:e||n?e?ne:ie:g(t,te)?te:Zt}function Y(t){this.id=_(),this.manager=null,this.options=l(t||{},this.defaults),this.options.enable=h(this.options.enable,!0),this.state=re,this.simultaneous={},this.requireFail=[]}function X(t){return t&ue?"cancel":t&ae?"end":t&se?"move":t&oe?"start":""}function G(t){return t==Lt?"down":t==kt?"up":t==It?"left":t==Pt?"right":""}function J(t,e){var n=e.manager;return n?n.get(t):t}function Q(){Y.apply(this,arguments)}function K(){Q.apply(this,arguments),this.pX=null,this.pY=null}function Z(){Q.apply(this,arguments)}function tt(){Y.apply(this,arguments),this._timer=null,this._input=null}function et(){Q.apply(this,arguments)}function nt(){Q.apply(this,arguments)}function it(){Y.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function rt(t,e){return e=e||{},e.recognizers=h(e.recognizers,rt.defaults.preset),new ot(t,e)}function ot(t,e){e=e||{},this.options=l(e,rt.defaults),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.element=t,this.input=C(this),this.touchAction=new U(this,this.options.touchAction),st(this,!0),s(e.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function st(t,e){var n=t.element;s(t.options.cssProps,function(t,i){n.style[S(n.style,i)]=e?t:""})}function at(t,n){var i=e.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var lt=["","webkit","moz","MS","ms","o"],ut=e.createElement("div"),ct="function",dt=Math.round,ht=Math.abs,pt=Date.now,ft=1,mt=/mobile|tablet|ip(ad|hone|od)|android/i,gt="ontouchstart"in t,vt=S(t,"PointerEvent")!==i,yt=gt&&mt.test(navigator.userAgent),bt="touch",wt="pen",St="mouse",_t="kinect",xt=25,Tt=1,Ct=2,Dt=4,Et=8,At=1,It=2,Pt=4,kt=8,Lt=16,$t=It|Pt,Ot=kt|Lt,qt=$t|Ot,zt=["x","y"],jt=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(x(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(x(this.element),this.evWin,this.domHandler)}};var Rt={mousedown:Tt,mousemove:Ct,mouseup:Dt},Mt="mousedown",Ft="mousemove mouseup";u(R,T,{handler:function(t){var e=Rt[t.type];e&Tt&&0===t.button&&(this.pressed=!0),e&Ct&&1!==t.which&&(e=Dt),this.pressed&&this.allow&&(e&Dt&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:St,srcEvent:t}))}});var Nt={pointerdown:Tt,pointermove:Ct,pointerup:Dt,pointercancel:Et,pointerout:Et},Ht={2:bt,3:wt,4:St,5:_t},Wt="pointerdown",Bt="pointermove pointerup pointercancel";t.MSPointerEvent&&(Wt="MSPointerDown",Bt="MSPointerMove MSPointerUp MSPointerCancel"),u(M,T,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=Nt[i],o=Ht[t.pointerType]||t.pointerType,s=o==bt,a=y(e,t.pointerId,"pointerId");r&Tt&&(0===t.button||s)?0>a&&(e.push(t),a=e.length-1):r&(Dt|Et)&&(n=!0),0>a||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var Ut={touchstart:Tt,touchmove:Ct,touchend:Dt,touchcancel:Et},Vt="touchstart",Yt="touchstart touchmove touchend touchcancel";u(F,T,{handler:function(t){var e=Ut[t.type];if(e===Tt&&(this.started=!0),this.started){var n=N.call(this,t,e);e&(Dt|Et)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:bt,srcEvent:t})}}});var Xt={touchstart:Tt,touchmove:Ct,touchend:Dt,touchcancel:Et},Gt="touchstart touchmove touchend touchcancel";u(H,T,{handler:function(t){var e=Xt[t.type],n=W.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:bt,srcEvent:t})}}),u(B,T,{handler:function(t,e,n){var i=n.pointerType==bt,r=n.pointerType==St;if(i)this.mouse.allow=!1;else if(r&&!this.mouse.allow)return;e&(Dt|Et)&&(this.mouse.allow=!0),this.callback(t,e,n);
},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Jt=S(ut.style,"touchAction"),Qt=Jt!==i,Kt="compute",Zt="auto",te="manipulation",ee="none",ne="pan-x",ie="pan-y";U.prototype={set:function(t){t==Kt&&(t=this.compute()),Qt&&(this.manager.element.style[Jt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return s(this.manager.recognizers,function(e){d(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),V(t.join(" "))},preventDefaults:function(t){if(!Qt){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,r=g(i,ee),o=g(i,ie),s=g(i,ne);return r||o&&n&$t||s&&n&Ot?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var re=1,oe=2,se=4,ae=8,le=ae,ue=16,ce=32;Y.prototype={defaults:{},set:function(t){return a(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(o(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=J(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return o(t,"dropRecognizeWith",this)?this:(t=J(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(o(t,"requireFailure",this))return this;var e=this.requireFail;return t=J(t,this),-1===y(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(o(t,"dropRequireFailure",this))return this;t=J(t,this);var e=y(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(n.options.event+(e?X(i):""),t)}var n=this,i=this.state;ae>i&&e(!0),e(),i>=ae&&e(!0)},tryEmit:function(t){return this.canEmit()?this.emit(t):void(this.state=ce)},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(ce|re)))return!1;t++}return!0},recognize:function(t){var e=a({},t);return d(this.options.enable,[this,e])?(this.state&(le|ue|ce)&&(this.state=re),this.state=this.process(e),void(this.state&(oe|se|ae|ue)&&this.tryEmit(e))):(this.reset(),void(this.state=ce))},process:function(t){},getTouchAction:function(){},reset:function(){}},u(Q,Y,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(oe|se),r=this.attrTest(t);return i&&(n&Et||!r)?e|ue:i||r?n&Dt?e|ae:e&oe?e|se:oe:ce}}),u(K,Q,{defaults:{event:"pan",threshold:10,pointers:1,direction:qt},getTouchAction:function(){var t=this.options.direction,e=[];return t&$t&&e.push(ie),t&Ot&&e.push(ne),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&$t?(r=0===o?At:0>o?It:Pt,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?At:0>s?kt:Lt,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return Q.prototype.attrTest.call(this,t)&&(this.state&oe||!(this.state&oe)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=G(t.direction);e&&this.manager.emit(this.options.event+e,t),this._super.emit.call(this,t)}}),u(Z,Q,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[ee]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&oe)},emit:function(t){if(this._super.emit.call(this,t),1!==t.scale){var e=t.scale<1?"in":"out";this.manager.emit(this.options.event+e,t)}}}),u(tt,Y,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return[Zt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,o=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(Dt|Et)&&!o)this.reset();else if(t.eventType&Tt)this.reset(),this._timer=r(function(){this.state=le,this.tryEmit()},e.time,this);else if(t.eventType&Dt)return le;return ce},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===le&&(t&&t.eventType&Dt?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=pt(),this.manager.emit(this.options.event,this._input)))}}),u(et,Q,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[ee]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&oe)}}),u(nt,Q,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:$t|Ot,pointers:1},getTouchAction:function(){return K.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&($t|Ot)?e=t.velocity:n&$t?e=t.velocityX:n&Ot&&(e=t.velocityY),this._super.attrTest.call(this,t)&&n&t.direction&&t.distance>this.options.threshold&&ht(e)>this.options.velocity&&t.eventType&Dt},emit:function(t){var e=G(t.direction);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),u(it,Y,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[te]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,o=t.deltaTime<e.time;if(this.reset(),t.eventType&Tt&&0===this.count)return this.failTimeout();if(i&&o&&n){if(t.eventType!=Dt)return this.failTimeout();var s=this.pTime?t.timeStamp-this.pTime<e.interval:!0,a=!this.pCenter||O(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&s?this.count+=1:this.count=1,this._input=t;var l=this.count%e.taps;if(0===l)return this.hasRequireFailures()?(this._timer=r(function(){this.state=le,this.tryEmit()},e.interval,this),oe):le}return ce},failTimeout:function(){return this._timer=r(function(){this.state=ce},this.options.interval,this),ce},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==le&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),rt.VERSION="2.0.4",rt.defaults={domEvents:!1,touchAction:Kt,enable:!0,inputTarget:null,inputClass:null,preset:[[et,{enable:!1}],[Z,{enable:!1},["rotate"]],[nt,{direction:$t}],[K,{direction:$t},["swipe"]],[it],[it,{event:"doubletap",taps:2},["tap"]],[tt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var de=1,he=2;ot.prototype={set:function(t){return a(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?he:de},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,r=e.curRecognizer;(!r||r&&r.state&le)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],e.stopped===he||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&n.state&(oe|se|ae)&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Y)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(o(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(o(t,"remove",this))return this;var e=this.recognizers;return t=this.get(t),e.splice(y(e,t),1),this.touchAction.update(),this},on:function(t,e){var n=this.handlers;return s(v(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this},off:function(t,e){var n=this.handlers;return s(v(t),function(t){e?n[t].splice(y(n[t],e),1):delete n[t]}),this},emit:function(t,e){this.options.domEvents&&at(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&st(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},a(rt,{INPUT_START:Tt,INPUT_MOVE:Ct,INPUT_END:Dt,INPUT_CANCEL:Et,STATE_POSSIBLE:re,STATE_BEGAN:oe,STATE_CHANGED:se,STATE_ENDED:ae,STATE_RECOGNIZED:le,STATE_CANCELLED:ue,STATE_FAILED:ce,DIRECTION_NONE:At,DIRECTION_LEFT:It,DIRECTION_RIGHT:Pt,DIRECTION_UP:kt,DIRECTION_DOWN:Lt,DIRECTION_HORIZONTAL:$t,DIRECTION_VERTICAL:Ot,DIRECTION_ALL:qt,Manager:ot,Input:T,TouchAction:U,TouchInput:H,MouseInput:R,PointerEventInput:M,TouchMouseInput:B,SingleTouchInput:F,Recognizer:Y,AttrRecognizer:Q,Tap:it,Pan:K,Swipe:nt,Pinch:Z,Rotate:et,Press:tt,on:p,off:f,each:s,merge:l,extend:a,inherit:u,bindFn:c,prefixed:S}),typeof define==ct&&define.amd?define(function(){return rt}):"undefined"!=typeof module&&module.exports?module.exports=rt:t[n]=rt}(window,document,"Hammer"),"function"==typeof define&&define.amd)define(["imagesLoaded","Hammer"],defineSequence);else{Hammer="function"!=typeof Hammer?null:Hammer,imagesLoaded="function"!=typeof imagesLoaded?null:imagesLoaded;var sequence=defineSequence(imagesLoaded,Hammer)}!function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function r(e,n){t.fn[e]=function(r){if("string"==typeof r){for(var s=i.call(arguments,1),a=0,l=this.length;l>a;a++){var u=this[a],c=t.data(u,e);if(c)if(t.isFunction(c[r])&&"_"!==r.charAt(0)){var d=c[r].apply(c,s);if(void 0!==d)return d}else o("no such method '"+r+"' for "+e+" instance");else o("cannot call methods on "+e+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(r),i._init()):(i=new n(this,r),t.data(this,e,i))})}}if(t){var o="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),r(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(t){return new RegExp("(^|\\s+)"+t+"(\\s+|$)")}function n(t,e){var n=i(t,e)?o:r;n(t,e)}var i,r,o;"classList"in document.documentElement?(i=function(t,e){return t.classList.contains(e)},r=function(t,e){t.classList.add(e)},o=function(t,e){t.classList.remove(e)}):(i=function(t,n){return e(n).test(t.className)},r=function(t,e){i(t,e)||(t.className=t.className+" "+e)},o=function(t,n){t.className=t.className.replace(e(n)," ")});var s={hasClass:i,addClass:r,removeClass:o,toggleClass:n,has:i,add:r,remove:o,toggle:n};"function"==typeof define&&define.amd?define("classie/classie",s):"object"==typeof exports?module.exports=s:t.classie=s}(window),function(){function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,r=this,o=r.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,r=this.getListenersAsObject(t),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===e(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,r,o=this.getListenersAsObject(t);for(r in o)o.hasOwnProperty(r)&&(i=e(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,r,o=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)o.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,r,o,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(t,n.listener),o=n.listener.apply(this,e||[]),o===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=o,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}.call(this),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var r=function(){};n.removeEventListener?r=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(r=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):"object"==typeof exports?module.exports=o:t.eventie=o}(window),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,r=0,o=n.length;o>r;r++)if(e=n[r]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function r(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function o(e){function i(){if(!h){h=!0;var i=t.getComputedStyle;if(u=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[c]="border-box";var o=document.body||document.documentElement;o.appendChild(r);var a=u(r);d=200===n(a.width),o.removeChild(r)}}}function o(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=u(t);if("none"===e.display)return r();var o={};o.width=t.offsetWidth,o.height=t.offsetHeight;for(var s=o.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),h=0,p=a.length;p>h;h++){var f=a[h],m=e[f];m=l(t,m);var g=parseFloat(m);o[f]=isNaN(g)?0:g}var v=o.paddingLeft+o.paddingRight,y=o.paddingTop+o.paddingBottom,b=o.marginLeft+o.marginRight,w=o.marginTop+o.marginBottom,S=o.borderLeftWidth+o.borderRightWidth,_=o.borderTopWidth+o.borderBottomWidth,x=s&&d,T=n(e.width);T!==!1&&(o.width=T+(x?0:v+S));var C=n(e.height);return C!==!1&&(o.height=C+(x?0:y+_)),o.innerWidth=o.width-(v+S),o.innerHeight=o.height-(y+_),o.outerWidth=o.width+b,o.outerHeight=o.height+w,o}}function l(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,r=i.left,o=e.runtimeStyle,s=o&&o.left;return s&&(o.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,s&&(o.left=s),n}var u,c,d,h=!1;return o}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],o):"object"==typeof exports?module.exports=o(require("desandro-get-style-property")):t.getSize=o(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==o.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function r(r){return"complete"===o.readyState?i():(r.bind(o,"DOMContentLoaded",n),r.bind(o,"readystatechange",n),r.bind(t,"load",n)),e}var o=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):t.docReady=r(t.eventie)}(window),function(t){function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),r=0,o=i.length;o>r;r++)if(i[r]===t)return!0;return!1}function r(t,i){return n(t),e(t,i)}var o,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var r=e[n],o=r+"MatchesSelector";if(t[o])return o}}();if(s){var a=document.createElement("div"),l=e(a,"div");o=l?e:r}else o=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return o}):"object"==typeof exports?module.exports=o:window.matchesSelector=o}(Element.prototype),function(t,e){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var r=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==r.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,r=t.length;r>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var r=[],o=0,s=t.length;s>o;o++){var a=t[o];if(i.isElement(a))if(e){n(a,e)&&r.push(a);for(var l=a.querySelectorAll(e),u=0,c=l.length;c>u;u++)r.push(l[u])}else r.push(a)}return r},i.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var o=t.console;return i.htmlInit=function(n,r){e(function(){for(var e=i.toDashed(r),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",l=0,u=s.length;u>l;l++){var c,d=s[l],h=d.getAttribute(a);try{c=h&&JSON.parse(h)}catch(p){o&&o.error("Error parsing "+a+" on "+d.nodeName.toLowerCase()+(d.id?"#"+d.id:"")+": "+p);continue}var f=new n(d,c),m=t.jQuery;m&&m.data(d,r,f)}})},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/cell",["get-size/get-size"],function(n){return e(t,n)}):"object"==typeof exports?module.exports=e(t,require("get-size")):(t.Flickity=t.Flickity||{},t.Flickity.Cell=e(t,t.getSize))}(window,function(t,e){function n(t,e){this.element=t,this.parent=e,this.create()}var i="attachEvent"in t;return n.prototype.create=function(){this.element.style.position="absolute",i&&this.element.setAttribute("unselectable","on"),this.x=0,this.shift=0},n.prototype.destroy=function(){this.element.style.position="";var t=this.parent.originSide;this.element.style[t]=""},n.prototype.getSize=function(){this.size=e(this.element)},n.prototype.setPosition=function(t){this.x=t,this.setDefaultTarget(),this.renderPosition(t)},n.prototype.setDefaultTarget=function(){var t="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[t]+this.size.width*this.parent.cellAlign},n.prototype.renderPosition=function(t){var e=this.parent.originSide;this.element.style[e]=this.parent.getPositionValue(t)},n.prototype.wrapShift=function(t){this.shift=t,this.renderPosition(this.x+this.parent.slideableWidth*t)},n.prototype.remove=function(){this.element.parentNode.removeChild(this.element)},n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/animate",["get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Flickity=t.Flickity||{},t.Flickity.animatePrototype=e(t,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n){for(var i,r=0,o="webkit moz ms o".split(" "),s=t.requestAnimationFrame,a=t.cancelAnimationFrame,l=0;l<o.length&&(!s||!a);l++)i=o[l],s=s||t[i+"RequestAnimationFrame"],a=a||t[i+"CancelAnimationFrame"]||t[i+"CancelRequestAnimationFrame"];s&&a||(s=function(e){var n=(new Date).getTime(),i=Math.max(0,16-(n-r)),o=t.setTimeout(function(){e(n+i)},i);return r=n+i,o},a=function(e){t.clearTimeout(e)});var u={};u.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},u.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var t=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(t),this.isAnimating){var e=this;s(function(){e.animate()})}};var c=e("transform"),d=!!e("perspective");return u.positionSlider=function(){var t=this.x;this.options.wrapAround&&this.cells.length>1&&(t=n.modulo(t,this.slideableWidth),t-=this.slideableWidth,this.shiftWrapCells(t)),t+=this.cursorPosition,t=this.options.rightToLeft&&c?-t:t;var e=this.getPositionValue(t);c?this.slider.style[c]=d&&this.isAnimating?"translate3d("+e+",0,0)":"translateX("+e+")":this.slider.style[this.originSide]=e},u.positionSliderAtSelected=function(){if(this.cells.length){var t=this.cells[this.selectedIndex];this.x=-t.target,this.positionSlider()}},u.getPositionValue=function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},u.settle=function(t){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*t)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,d&&this.positionSlider(),this.dispatchEvent("settle"))},u.shiftWrapCells=function(t){var e=this.cursorPosition+t;this._shiftCells(this.beforeShiftCells,e,-1);var n=this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},u._shiftCells=function(t,e,n){for(var i=0,r=t.length;r>i;i++){var o=t[i],s=e>0?n:0;o.wrapShift(s),e-=o.size.outerWidth}},u._unshiftCells=function(t){if(t&&t.length)for(var e=0,n=t.length;n>e;e++)t[e].wrapShift(0)},u.integratePhysics=function(){this.velocity+=this.accel,this.x+=this.velocity,this.velocity*=this.getFrictionFactor(),this.accel=0},u.applyForce=function(t){this.accel+=t},u.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},u.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},u.applyDragForce=function(){if(this.isPointerDown){var t=this.dragX-this.x,e=t-this.velocity;this.applyForce(e)}},u.applySelectedAttraction=function(){var t=this.cells.length;if(!this.isPointerDown&&!this.isFreeScrolling&&t){var e=this.cells[this.selectedIndex],n=this.options.wrapAround&&t>1?this.slideableWidth*Math.floor(this.selectedIndex/t):0,i=-1*(e.target+n)-this.x,r=i*this.options.selectedAttraction;this.applyForce(r)}},u}),function(t,e){if("function"==typeof define&&define.amd)define("flickity/js/flickity",["classie/classie","eventEmitter/EventEmitter","eventie/eventie","get-size/get-size","fizzy-ui-utils/utils","./cell","./animate"],function(n,i,r,o,s,a,l){return e(t,n,i,r,o,s,a,l)});else if("object"==typeof exports)module.exports=e(t,require("desandro-classie"),require("wolfy87-eventemitter"),require("eventie"),require("get-size"),require("fizzy-ui-utils"),require("./cell"),require("./animate"));else{var n=t.Flickity;t.Flickity=e(t,t.classie,t.EventEmitter,t.eventie,t.getSize,t.fizzyUIUtils,n.Cell,n.animatePrototype)}}(window,function(t,e,n,i,r,o,s,a){function l(t,e){for(t=o.makeArray(t);t.length;)e.appendChild(t.shift())}function u(t,e){var n=o.getQueryElement(t);return n?(this.element=n,c&&(this.$element=c(this.element)),this.options=o.extend({},this.constructor.defaults),this.option(e),void this._create()):void(h&&h.error("Bad element for Flickity: "+(n||t)))}var c=t.jQuery,d=t.getComputedStyle,h=t.console,p=0,f={};u.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},u.createMethods=[],o.extend(u.prototype,n.prototype),u.prototype._create=function(){var e=this.guid=++p;this.element.flickityGUID=e,f[e]=this,this.selectedIndex=this.options.initialIndex||0,this.restingFrames=0,this.x=0,this.velocity=0,this.accel=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",u.setUnselectable(this.viewport),this._createSlider(),(this.options.resize||this.options.watchCSS)&&(i.bind(t,"resize",this),this.isResizeBound=!0);for(var n=0,r=u.createMethods.length;r>n;n++){var o=u.createMethods[n];this[o]()}this.options.watchCSS?this.watchCSS():this.activate()},u.prototype.option=function(t){o.extend(this.options,t)},u.prototype.activate=function(){if(!this.isActive){this.isActive=!0,e.add(this.element,"flickity-enabled"),this.options.rightToLeft&&e.add(this.element,"flickity-rtl"),this.getSize();var t=this._filterFindCellElements(this.element.children);l(t,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,i.bind(this.element,"keydown",this)),this.emit("activate"),this.positionSliderAtSelected(),this.select(this.selectedIndex)}},u.prototype._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",t.style[this.originSide]=0,this.slider=t},u.prototype._filterFindCellElements=function(t){return o.filterFindElements(t,this.options.cellSelector)},u.prototype.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},u.prototype._makeCells=function(t){for(var e=this._filterFindCellElements(t),n=[],i=0,r=e.length;r>i;i++){var o=e[i],a=new s(o,this);n.push(a)}return n},u.prototype.getLastCell=function(){return this.cells[this.cells.length-1]},u.prototype.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},u.prototype._positionCells=function(t){t=t||0,this.maxCellHeight=t?this.maxCellHeight||0:0;var e=0;if(t>0){var n=this.cells[t-1];e=n.x+n.size.outerWidth}for(var i,r=this.cells.length,o=t;r>o;o++)i=this.cells[o],i.setPosition(e),e+=i.size.outerWidth,this.maxCellHeight=Math.max(i.size.outerHeight,this.maxCellHeight);this.slideableWidth=e,this._containCells()},u.prototype._sizeCells=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];i.getSize()}},u.prototype._init=u.prototype.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},u.prototype.getSize=function(){this.size=r(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var m={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};u.prototype.setCellAlign=function(){var t=m[this.options.cellAlign];this.cellAlign=t?t[this.originSide]:this.options.cellAlign},u.prototype.setGallerySize=function(){this.options.setGallerySize&&(this.viewport.style.height=this.maxCellHeight+"px")},u.prototype._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var t=this.cursorPosition,e=this.cells.length-1;this.beforeShiftCells=this._getGapCells(t,e,-1),t=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(t,0,1)}},u.prototype._getGapCells=function(t,e,n){for(var i=[];t>0;){var r=this.cells[e];if(!r)break;i.push(r),e+=n,t-=r.size.outerWidth}return i},u.prototype._containCells=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length)for(var t=this.options.rightToLeft?"marginRight":"marginLeft",e=this.options.rightToLeft?"marginLeft":"marginRight",n=this.cells[0].size[t],i=this.getLastCell(),r=this.slideableWidth-i.size[e],o=r-this.size.innerWidth*(1-this.cellAlign),s=r<this.size.innerWidth,a=0,l=this.cells.length;l>a;a++){var u=this.cells[a];u.setDefaultTarget(),s?u.target=r*this.cellAlign:(u.target=Math.max(u.target,this.cursorPosition+n),u.target=Math.min(u.target,o))}},u.prototype.dispatchEvent=function(t,e,n){var i=[e].concat(n);if(this.emitEvent(t,i),c&&this.$element)if(e){var r=c.Event(e);r.type=t,this.$element.trigger(r,n)}else this.$element.trigger(t,n)},u.prototype.select=function(t,e){if(this.isActive){var n=this.cells.length;this.options.wrapAround&&n>1&&(0>t?this.x-=this.slideableWidth:t>=n&&(this.x+=this.slideableWidth)),(this.options.wrapAround||e)&&(t=o.modulo(t,n)),this.cells[t]&&(this.selectedIndex=t,this.setSelectedCell(),this.startAnimation(),this.dispatchEvent("cellSelect"))}},u.prototype.previous=function(t){this.select(this.selectedIndex-1,t)},u.prototype.next=function(t){this.select(this.selectedIndex+1,t)},u.prototype.setSelectedCell=function(){this._removeSelectedCellClass(),this.selectedCell=this.cells[this.selectedIndex],this.selectedElement=this.selectedCell.element,e.add(this.selectedElement,"is-selected")},u.prototype._removeSelectedCellClass=function(){this.selectedCell&&e.remove(this.selectedCell.element,"is-selected")},u.prototype.getCell=function(t){for(var e=0,n=this.cells.length;n>e;e++){var i=this.cells[e];if(i.element==t)return i}},u.prototype.getCells=function(t){t=o.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var r=t[n],s=this.getCell(r);s&&e.push(s)}return e},u.prototype.getCellElements=function(){
for(var t=[],e=0,n=this.cells.length;n>e;e++)t.push(this.cells[e].element);return t},u.prototype.getParentCell=function(t){var e=this.getCell(t);return e?e:(t=o.getParent(t,".flickity-slider > *"),this.getCell(t))},u.prototype.getAdjacentCellElements=function(t,e){if(!t)return[this.selectedElement];e=void 0===e?this.selectedIndex:e;var n=this.cells.length;if(1+2*t>=n)return this.getCellElements();for(var i=[],r=e-t;e+t>=r;r++){var s=this.options.wrapAround?o.modulo(r,n):r,a=this.cells[s];a&&i.push(a.element)}return i},u.prototype.uiChange=function(){this.emit("uiChange")},u.prototype.childUIPointerDown=function(t){this.emitEvent("childUIPointerDown",[t])},u.prototype.onresize=function(){this.watchCSS(),this.resize()},o.debounceMethod(u,"onresize",150),u.prototype.resize=function(){this.isActive&&(this.getSize(),this.options.wrapAround&&(this.x=o.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.positionSliderAtSelected())};var g=u.supportsConditionalCSS=function(){var t;return function(){if(void 0!==t)return t;if(!d)return void(t=!1);var e=document.createElement("style"),n=document.createTextNode('body:after { content: "foo"; display: none; }');e.appendChild(n),document.head.appendChild(e);var i=d(document.body,":after").content;return t=-1!=i.indexOf("foo"),document.head.removeChild(e),t}}();u.prototype.watchCSS=function(){var t=this.options.watchCSS;if(t){var e=g();if(!e){var n="fallbackOn"==t?"activate":"deactivate";return void this[n]()}var i=d(this.element,":after").content;-1!=i.indexOf("flickity")?this.activate():this.deactivate()}},u.prototype.onkeydown=function(t){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==t.keyCode){var e=this.options.rightToLeft?"next":"previous";this.uiChange(),this[e]()}else if(39==t.keyCode){var n=this.options.rightToLeft?"previous":"next";this.uiChange(),this[n]()}},u.prototype.deactivate=function(){if(this.isActive){e.remove(this.element,"flickity-enabled"),e.remove(this.element,"flickity-rtl");for(var t=0,n=this.cells.length;n>t;t++){var r=this.cells[t];r.destroy()}this._removeSelectedCellClass(),this.element.removeChild(this.viewport),l(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),i.unbind(this.element,"keydown",this)),this.isActive=!1,this.emit("deactivate")}},u.prototype.destroy=function(){this.deactivate(),this.isResizeBound&&i.unbind(t,"resize",this),this.emit("destroy"),c&&this.$element&&c.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete f[this.guid]},o.extend(u.prototype,a);var v="attachEvent"in t;return u.setUnselectable=function(t){v&&t.setAttribute("unselectable","on")},u.data=function(t){t=o.getQueryElement(t);var e=t&&t.flickityGUID;return e&&f[e]},o.htmlInit(u,"flickity"),c&&c.bridget&&c.bridget("flickity",u),u.Cell=s,u}),function(t,e){"function"==typeof define&&define.amd?define("unipointer/unipointer",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("eventie")):t.Unipointer=e(t,t.EventEmitter,t.eventie)}(window,function(t,e,n){function i(){}function r(){}r.prototype=new e,r.prototype.bindStartEvent=function(t){this._bindStartEvent(t,!0)},r.prototype.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},r.prototype._bindStartEvent=function(e,i){i=void 0===i?!0:!!i;var r=i?"bind":"unbind";t.navigator.pointerEnabled?n[r](e,"pointerdown",this):t.navigator.msPointerEnabled?n[r](e,"MSPointerDown",this):(n[r](e,"mousedown",this),n[r](e,"touchstart",this))},r.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},r.prototype.getTouch=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];if(i.identifier==this.pointerIdentifier)return i}},r.prototype.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},r.prototype.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},r.prototype.onMSPointerDown=r.prototype.onpointerdown=function(t){this._pointerDown(t,t)},r.prototype._pointerDown=function(t,e){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},r.prototype.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var o={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return r.prototype._bindPostStartEvents=function(e){if(e){for(var i=o[e.type],r=e.preventDefault?t:document,s=0,a=i.length;a>s;s++){var l=i[s];n.bind(r,l,this)}this._boundPointerEvents={events:i,node:r}}},r.prototype._unbindPostStartEvents=function(){var t=this._boundPointerEvents;if(t&&t.events){for(var e=0,i=t.events.length;i>e;e++){var r=t.events[e];n.unbind(t.node,r,this)}delete this._boundPointerEvents}},r.prototype.onmousemove=function(t){this._pointerMove(t,t)},r.prototype.onMSPointerMove=r.prototype.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},r.prototype.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},r.prototype._pointerMove=function(t,e){this.pointerMove(t,e)},r.prototype.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},r.prototype.onmouseup=function(t){this._pointerUp(t,t)},r.prototype.onMSPointerUp=r.prototype.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},r.prototype.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},r.prototype._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},r.prototype.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},r.prototype._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},r.prototype.pointerDone=i,r.prototype.onMSPointerCancel=r.prototype.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},r.prototype.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},r.prototype._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},r.prototype.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},r.getPointerPoint=function(t){return{x:void 0!==t.pageX?t.pageX:t.clientX,y:void 0!==t.pageY?t.pageY:t.clientY}},r}),function(t,e){"function"==typeof define&&define.amd?define("unidragger/unidragger",["eventie/eventie","unipointer/unipointer"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("unipointer")):t.Unidragger=e(t,t.eventie,t.Unipointer)}(window,function(t,e,n){function i(){}function r(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function o(){}function s(){return!1}o.prototype=new n,o.prototype.bindHandles=function(){this._bindHandles(!0)},o.prototype.unbindHandles=function(){this._bindHandles(!1)};var a=t.navigator;o.prototype._bindHandles=function(t){t=void 0===t?!0:!!t;var n;n=a.pointerEnabled?function(e){e.style.touchAction=t?"none":""}:a.msPointerEnabled?function(e){e.style.msTouchAction=t?"none":""}:function(){t&&u(s)};for(var i=t?"bind":"unbind",r=0,o=this.handles.length;o>r;r++){var s=this.handles[r];this._bindStartEvent(s,t),n(s),e[i](s,"click",this)}};var l="attachEvent"in document.documentElement,u=l?function(t){"IMG"==t.nodeName&&(t.ondragstart=s);for(var e=t.querySelectorAll("img"),n=0,i=e.length;i>n;n++){var r=e[n];r.ondragstart=s}}:i;o.prototype.pointerDown=function(n,i){if("INPUT"==n.target.nodeName&&"range"==n.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(n,i);var r=document.activeElement;r&&r.blur&&r.blur(),this._bindPostStartEvents(n),this.pointerDownScroll=o.getScrollPosition(),e.bind(t,"scroll",this),this.emitEvent("pointerDown",[n,i])},o.prototype._dragPointerDown=function(t,e){this.pointerDownPoint=n.getPointerPoint(e);var i="touchstart"==t.type,o=t.target.nodeName;i||"SELECT"==o||r(t)},o.prototype.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,n]),this._dragMove(t,e,n)},o.prototype._dragPointerMove=function(t,e){var i=n.getPointerPoint(e),r={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(r)&&this._dragStart(t,e),r},o.prototype.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},o.prototype.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},o.prototype._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},n.prototype.pointerDone=function(){e.unbind(t,"scroll",this)},o.prototype._dragStart=function(t,e){this.isDragging=!0,this.dragStartPoint=o.getPointerPoint(e),this.isPreventingClicks=!0,this.dragStart(t,e)},o.prototype.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},o.prototype._dragMove=function(t,e,n){this.isDragging&&this.dragMove(t,e,n)},o.prototype.dragMove=function(t,e,n){r(t),this.emitEvent("dragMove",[t,e,n])},o.prototype._dragEnd=function(t,e){this.isDragging=!1;var n=this;setTimeout(function(){delete n.isPreventingClicks}),this.dragEnd(t,e)},o.prototype.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},o.prototype.pointerDone=function(){e.unbind(t,"scroll",this),delete this.pointerDownScroll},o.prototype.onclick=function(t){this.isPreventingClicks&&r(t)},o.prototype._staticClick=function(t,e){if(!this.isIgnoringMouseUp||"mouseup"!=t.type){var n=t.target.nodeName;if(("INPUT"==n||"TEXTAREA"==n)&&t.target.focus(),this.staticClick(t,e),"mouseup"!=t.type){this.isIgnoringMouseUp=!0;var i=this;setTimeout(function(){delete i.isIgnoringMouseUp},400)}}},o.prototype.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},o.prototype.onscroll=function(){var t=o.getScrollPosition(),e=this.pointerDownScroll.x-t.x,n=this.pointerDownScroll.y-t.y;(Math.abs(e)>3||Math.abs(n)>3)&&this._pointerDone()},o.getPointerPoint=function(t){return{x:void 0!==t.pageX?t.pageX:t.clientX,y:void 0!==t.pageY?t.pageY:t.clientY}};var c=void 0!==t.pageYOffset;return o.getScrollPosition=function(){return{x:c?t.pageXOffset:document.body.scrollLeft,y:c?t.pageYOffset:document.body.scrollTop}},o.getPointerPoint=n.getPointerPoint,o}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/drag",["classie/classie","eventie/eventie","./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(n,i,r,o,s){return e(t,n,i,r,o,s)}):"object"==typeof exports?module.exports=e(t,require("desandro-classie"),require("eventie"),require("./flickity"),require("unidragger"),require("fizzy-ui-utils")):t.Flickity=e(t,t.classie,t.eventie,t.Flickity,t.Unidragger,t.fizzyUIUtils)}(window,function(t,e,n,i,r,o){function s(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function a(e){var n=r.getPointerPoint(e);return n.y-t.pageYOffset}o.extend(i.defaults,{draggable:!0,touchVerticalScroll:!0}),i.createMethods.push("_createDrag"),o.extend(i.prototype,r.prototype),i.prototype._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag)},i.prototype.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(e.add(this.element,"is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},i.prototype.unbindDrag=function(){this.isDragBound&&(e.remove(this.element,"is-draggable"),this.unbindHandles(),delete this.isDragBound)},i.prototype._uiChangeDrag=function(){delete this.isFreeScrolling},i.prototype._childUIPointerDownDrag=function(t){s(t),this.pointerDownFocus(t)},i.prototype.pointerDown=function(i,o){if("INPUT"==i.target.nodeName&&"range"==i.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(i,o);var s=document.activeElement;s&&s.blur&&s!=this.element&&s!=document.body&&s.blur(),this.pointerDownFocus(i),this.dragX=this.x,e.add(this.viewport,"is-pointer-down"),this._bindPostStartEvents(i),this.pointerDownScroll=r.getScrollPosition(),n.bind(t,"scroll",this),this.dispatchEvent("pointerDown",i,[o])};var l={touchstart:!0,MSPointerDown:!0},u={INPUT:!0,SELECT:!0};i.prototype.pointerDownFocus=function(t){!this.options.accessibility||l[t.type]||u[t.target.nodeName]||this.element.focus()},i.prototype.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.touchVerticalScrollMove(t,e,n),this._dragMove(t,e,n),this.dispatchEvent("pointerMove",t,[e,n])},i.prototype.hasDragStarted=function(t){return!this.isTouchScrolling&&Math.abs(t.x)>3},i.prototype.pointerUp=function(t,n){delete this.isTouchScrolling,e.remove(this.viewport,"is-pointer-down"),this.dispatchEvent("pointerUp",t,[n]),this._dragPointerUp(t,n)};var c={touchmove:!0,MSPointerMove:!0};return i.prototype.touchVerticalScrollMove=function(e,n,i){var r=this.options.touchVerticalScroll,o="withDrag"==r?!r:this.isDragging||!r;!o&&c[e.type]&&!this.isTouchScrolling&&Math.abs(i.y)>10&&(this.startScrollY=t.pageYOffset,this.pointerWindowStartY=a(n),this.isTouchScrolling=!0)},i.prototype.dragStart=function(t,e){this.dragStartPosition=this.x,this.startAnimation(),this.dispatchEvent("dragStart",t,[e])},i.prototype.dragMove=function(t,e,n){s(t),this.previousDragX=this.dragX;var i=this.options.rightToLeft?-1:1,r=this.dragStartPosition+n.x*i;if(!this.options.wrapAround&&this.cells.length){var o=Math.max(-this.cells[0].target,this.dragStartPosition);r=r>o?.5*(r+o):r;var a=Math.min(-this.getLastCell().target,this.dragStartPosition);r=a>r?.5*(r+a):r}this.dragX=r,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",t,[e,n])},i.prototype.dragEnd=function(t,e){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var i=this.getRestingPosition();this.isFreeScrolling=-i>this.cells[0].target&&-i<this.getLastCell().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.select(n),this.dispatchEvent("dragEnd",t,[e])},i.prototype.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getCellDistance(-t,this.selectedIndex)),n=this._getClosestResting(t,e,1),i=this._getClosestResting(t,e,-1),r=n.distance<i.distance?n.index:i.index;return r},i.prototype._getClosestResting=function(t,e,n){for(var i=this.selectedIndex,r=1/0,o=this.options.contain&&!this.options.wrapAround?function(t,e){return e>=t}:function(t,e){return e>t};o(e,r)&&(i+=n,r=e,e=this.getCellDistance(-t,i),null!==e);)e=Math.abs(e);return{distance:r,index:i-n}},i.prototype.getCellDistance=function(t,e){var n=this.cells.length,i=this.options.wrapAround&&n>1,r=i?o.modulo(e,n):e,s=this.cells[r];if(!s)return null;var a=i?this.slideableWidth*Math.floor(e/n):0;return t-(s.target+a)},i.prototype.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var t=this.getCellDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX;return t>0&&e>0?1:0>t&&0>e?-1:0},i.prototype.staticClick=function(t,e){var n=this.getParentCell(t.target),i=n&&n.element,r=n&&o.indexOf(this.cells,n);this.dispatchEvent("staticClick",t,[e,i,r])},i}),function(t,e){"function"==typeof define&&define.amd?define("tap-listener/tap-listener",["unipointer/unipointer"],function(n){return e(t,n)}):"object"==typeof exports?module.exports=e(t,require("unipointer")):t.TapListener=e(t,t.Unipointer)}(window,function(t,e){function n(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function i(t){this.bindTap(t)}i.prototype=new e,i.prototype.bindTap=function(t){t&&(this.unbindTap(),this.tapElement=t,this._bindStartEvent(t,!0))},i.prototype.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)};var r=i.prototype.pointerDown;i.prototype.pointerDown=function(t){"touchstart"==t.type&&n(t),r.apply(this,arguments)};var o=void 0!==t.pageYOffset;return i.prototype.pointerUp=function(n,i){var r=e.getPointerPoint(i),s=this.tapElement.getBoundingClientRect(),a=o?t.pageXOffset:document.body.scrollLeft,l=o?t.pageYOffset:document.body.scrollTop,u=r.x>=s.left+a&&r.x<=s.right+a&&r.y>=s.top+l&&r.y<=s.bottom+l;u&&this.emitEvent("tap",[n,i])},i.prototype.destroy=function(){this.pointerDone(),this.unbindTap()},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/prev-next-button",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):e(t,t.eventie,t.Flickity,t.TapListener,t.fizzyUIUtils)}(window,function(t,e,n,i,r){function o(t,e){this.direction=t,this.parent=e,this._create()}function s(t){return"string"==typeof t?t:"M "+t.x0+",50 L "+t.x1+","+(t.y1+50)+" L "+t.x2+","+(t.y2+50)+" L "+t.x3+",50  L "+t.x2+","+(50-t.y2)+" L "+t.x1+","+(50-t.y1)+" Z"}var a="http://www.w3.org/2000/svg",l=function(){function t(){if(void 0!==e)return e;var t=document.createElement("div");return t.innerHTML="<svg/>",e=(t.firstChild&&t.firstChild.namespaceURI)==a}var e;return t}();return o.prototype=new i,o.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var t=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==t;var e=this.element=document.createElement("button");if(e.className="flickity-prev-next-button",e.className+=this.isPrevious?" previous":" next",e.setAttribute("type","button"),n.setUnselectable(e),l()){var i=this.createSVG();e.appendChild(i)}else this.setArrowText(),e.className+=" no-svg";var r=this;this.onCellSelect=function(){r.update()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(t,e){r.parent.childUIPointerDown(e)})},o.prototype.activate=function(){this.update(),this.bindTap(this.element),e.bind(this.element,"click",this),this.parent.element.appendChild(this.element)},o.prototype.deactivate=function(){this.parent.element.removeChild(this.element),i.prototype.destroy.call(this),e.unbind(this.element,"click",this)},o.prototype.createSVG=function(){var t=document.createElementNS(a,"svg");t.setAttribute("viewBox","0 0 100 100");var e=document.createElementNS(a,"path"),n=s(this.parent.options.arrowShape);return e.setAttribute("d",n),e.setAttribute("class","arrow"),this.isLeft||e.setAttribute("transform","translate(100, 100) rotate(180) "),t.appendChild(e),t},o.prototype.setArrowText=function(){var t=this.parent.options,e=this.isLeft?t.leftArrowText:t.rightArrowText;r.setText(this.element,e)},o.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var t=this.isPrevious?"previous":"next";this.parent[t]()}},o.prototype.handleEvent=r.handleEvent,o.prototype.onclick=function(){var t=document.activeElement;t&&t==this.element&&this.onTap()},o.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},o.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},o.prototype.update=function(){var t=this.parent.cells;if(this.parent.options.wrapAround&&t.length>1)return void this.enable();var e=t.length?t.length-1:0,n=this.isPrevious?0:e,i=this.parent.selectedIndex==n?"disable":"enable";this[i]()},o.prototype.destroy=function(){this.deactivate()},r.extend(n.defaults,{prevNextButtons:!0,leftArrowText:"‹",rightArrowText:"›",arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),n.createMethods.push("_createPrevNextButtons"),n.prototype._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new o(-1,this),this.nextButton=new o(1,this),this.on("activate",this.activatePrevNextButtons))},n.prototype.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},n.prototype.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},n.PrevNextButton=o,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/page-dots",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):e(t,t.eventie,t.Flickity,t.TapListener,t.fizzyUIUtils)}(window,function(t,e,n,i,r){function o(t){this.parent=t,this._create()}return o.prototype=new i,o.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",n.setUnselectable(this.holder),this.dots=[];var t=this;this.onCellSelect=function(){t.updateSelected()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(e,n){t.parent.childUIPointerDown(n)})},o.prototype.activate=function(){this.setDots(),this.updateSelected(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},o.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),i.prototype.destroy.call(this)},o.prototype.setDots=function(){var t=this.parent.cells.length-this.dots.length;t>0?this.addDots(t):0>t&&this.removeDots(-t)},o.prototype.addDots=function(t){for(var e=document.createDocumentFragment(),n=[];t;){var i=document.createElement("li");i.className="dot",e.appendChild(i),n.push(i),t--}this.holder.appendChild(e),this.dots=this.dots.concat(n)},o.prototype.removeDots=function(t){for(var e=this.dots.splice(this.dots.length-t,t),n=0,i=e.length;i>n;n++){var r=e[n];this.holder.removeChild(r)}},o.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},o.prototype.onTap=function(t){var e=t.target;if("LI"==e.nodeName){this.parent.uiChange();var n=r.indexOf(this.dots,e);this.parent.select(n)}},o.prototype.destroy=function(){this.deactivate()},n.PageDots=o,r.extend(n.defaults,{pageDots:!0}),n.createMethods.push("_createPageDots"),n.prototype._createPageDots=function(){this.options.pageDots&&(this.pageDots=new o(this),this.on("activate",this.activatePageDots),this.on("cellAddedRemoved",this.onCellAddedRemovedPageDots),this.on("deactivate",this.deactivatePageDots))},n.prototype.activatePageDots=function(){this.pageDots.activate()},n.prototype.onCellAddedRemovedPageDots=function(){this.pageDots.setDots()},n.prototype.deactivatePageDots=function(){this.pageDots.deactivate()},n.PageDots=o,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/player",["eventEmitter/EventEmitter","eventie/eventie","./flickity"],function(t,n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(require("wolfy87-eventemitter"),require("eventie"),require("./flickity")):e(t.EventEmitter,t.eventie,t.Flickity)}(window,function(t,e,n){function i(t){if(this.isPlaying=!1,this.parent=t,o){var e=this;this.onVisibilityChange=function(){e.visibilityChange()}}}var r,o;return"hidden"in document?(r="hidden",o="visibilitychange"):"webkitHidden"in document&&(r="webkitHidden",o="webkitvisibilitychange"),i.prototype=new t,i.prototype.play=function(){this.isPlaying=!0,delete this.isPaused,o&&document.addEventListener(o,this.onVisibilityChange,!1),this.tick()},i.prototype.tick=function(){if(this.isPlaying&&!this.isPaused){this.tickTime=new Date;var t=this.parent.options.autoPlay;t="number"==typeof t?t:3e3;var e=this;this.timeout=setTimeout(function(){e.parent.next(!0),e.tick()},t)}},i.prototype.stop=function(){this.isPlaying=!1,delete this.isPaused,this.clear(),o&&document.removeEventListener(o,this.onVisibilityChange,!1)},i.prototype.clear=function(){clearTimeout(this.timeout)},i.prototype.pause=function(){this.isPlaying&&(this.isPaused=!0,this.clear())},i.prototype.unpause=function(){this.isPaused&&this.play()},i.prototype.visibilityChange=function(){var t=document[r];this[t?"pause":"unpause"]()},n.createMethods.push("_createPlayer"),n.prototype._createPlayer=function(){this.player=new i(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},n.prototype.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),e.bind(this.element,"mouseenter",this),this.isMouseenterBound=!0)},n.prototype.stopPlayer=function(){this.player.stop()},n.prototype.deactivatePlayer=function(){this.player.stop(),this.isMouseenterBound&&(e.unbind(this.element,"mouseenter",this),delete this.isMouseenterBound)},n.prototype.onmouseenter=function(){this.player.pause(),e.bind(this.element,"mouseleave",this)},n.prototype.onmouseleave=function(){this.player.unpause(),e.unbind(this.element,"mouseleave",this)},n.Player=i,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/add-remove-cell",["./flickity","fizzy-ui-utils/utils"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("./flickity"),require("fizzy-ui-utils")):e(t,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,n){function i(t){for(var e=document.createDocumentFragment(),n=0,i=t.length;i>n;n++){var r=t[n];e.appendChild(r.element)}return e}return e.prototype.insert=function(t,e){var n=this._makeCells(t);if(n&&n.length){var r=this.cells.length;e=void 0===e?r:e;var o=i(n),s=e==r;if(s)this.slider.appendChild(o);else{var a=this.cells[e].element;this.slider.insertBefore(o,a)}if(0===e)this.cells=n.concat(this.cells);else if(s)this.cells=this.cells.concat(n);else{var l=this.cells.splice(e,r-e);this.cells=this.cells.concat(n).concat(l)}this._sizeCells(n);var u=e>this.selectedIndex?0:n.length;this._cellAddedRemoved(e,u)}},e.prototype.append=function(t){this.insert(t,this.cells.length)},e.prototype.prepend=function(t){this.insert(t,0)},e.prototype.remove=function(t){var e,i,r,o=this.getCells(t),s=0;for(e=0,i=o.length;i>e;e++){r=o[e];var a=n.indexOf(this.cells,r)<this.selectedIndex;s-=a?1:0}for(e=0,i=o.length;i>e;e++)r=o[e],r.remove(),n.removeFrom(this.cells,r);o.length&&this._cellAddedRemoved(0,s)},e.prototype._cellAddedRemoved=function(t,e){e=e||0,this.selectedIndex+=e,this.selectedIndex=Math.max(0,Math.min(this.cells.length-1,this.selectedIndex)),this.emitEvent("cellAddedRemoved",[t,e]),this.cellChange(t,!0)},e.prototype.cellSizeChange=function(t){var e=this.getCell(t);if(e){e.getSize();var i=n.indexOf(this.cells,e);this.cellChange(i)}},e.prototype.cellChange=function(t,e){var n=this.slideableWidth;this._positionCells(t),this._getWrapShiftCells(),this.setGallerySize(),this.options.freeScroll?(this.x+=n-this.slideableWidth,this.positionSlider()):(e&&this.positionSliderAtSelected(),this.select(this.selectedIndex))},e}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/lazyload",["classie/classie","eventie/eventie","./flickity","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("desandro-classie"),require("eventie"),require("./flickity"),require("fizzy-ui-utils")):e(t,t.classie,t.eventie,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,n,i,r){function o(t){if("IMG"==t.nodeName&&t.getAttribute("data-flickity-lazyload"))return[t];var e=t.querySelectorAll("img[data-flickity-lazyload]");return r.makeArray(e)}function s(t,e){this.img=t,this.flickity=e,this.load()}return i.createMethods.push("_createLazyload"),i.prototype._createLazyload=function(){this.on("cellSelect",this.lazyLoad)},i.prototype.lazyLoad=function(){var t=this.options.lazyLoad;if(t){for(var e="number"==typeof t?t:0,n=this.getAdjacentCellElements(e),i=[],r=0,a=n.length;a>r;r++){var l=n[r],u=o(l);i=i.concat(u)}for(r=0,a=i.length;a>r;r++){var c=i[r];new s(c,this)}}},s.prototype.handleEvent=r.handleEvent,s.prototype.load=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},s.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},s.prototype.onerror=function(){this.complete(event,"flickity-lazyerror")},s.prototype.complete=function(t,i){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this);var r=this.flickity.getParentCell(this.img),o=r&&r.element;this.flickity.cellSizeChange(o),e.add(this.img,i),this.flickity.dispatchEvent("lazyLoad",t,o)},i.LazyLoader=s,i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/index",["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],e):"object"==typeof exports&&(module.exports=e(require("./flickity"),require("./drag"),require("./prev-next-button"),require("./page-dots"),require("./player"),require("./add-remove-cell"),require("./lazyload")))}(window,function(t){return t}),function(t,e){"function"==typeof define&&define.amd?define("flickity-as-nav-for/as-nav-for",["classie/classie","flickity/js/index","fizzy-ui-utils/utils"],function(n,i,r){return e(t,n,i,r)}):"object"==typeof exports?module.exports=e(t,require("desandro-classie"),require("flickity"),require("fizzy-ui-utils")):t.Flickity=e(t,t.classie,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,n,i){return n.createMethods.push("_createAsNavFor"),n.prototype._createAsNavFor=function(){this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor);var t=this.options.asNavFor;if(t){var e=this;setTimeout(function(){e.setNavCompanion(t)})}},n.prototype.setNavCompanion=function(t){t=i.getQueryElement(t);var e=n.data(t);if(e&&e!=this){this.navCompanion=e;var r=this;this.onNavCompanionSelect=function(){r.navCompanionSelect()},e.on("cellSelect",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect()}},n.prototype.navCompanionSelect=function(){if(this.navCompanion){var t=this.navCompanion.selectedIndex;this.select(t),this.removeNavSelectedElement(),this.selectedIndex==t&&(this.navSelectedElement=this.cells[t].element,e.add(this.navSelectedElement,"is-nav-selected"))}},n.prototype.activateAsNavFor=function(){this.navCompanionSelect()},n.prototype.removeNavSelectedElement=function(){this.navSelectedElement&&(e.remove(this.navSelectedElement,"is-nav-selected"),delete this.navSelectedElement)},n.prototype.onNavStaticClick=function(t,e,n,i){"number"==typeof i&&this.navCompanion.select(i)},n.prototype.deactivateAsNavFor=function(){this.removeNavSelectedElement()},n.prototype.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("cellSelect",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},n}),function(t,e){"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("eventie")):t.imagesLoaded=e(t,t.EventEmitter,t.eventie)}(window,function(t,e,n){function i(t,e){for(var n in e)t[n]=e[n];return t}function r(t){return"[object Array]"===h.call(t)}function o(t){var e=[];if(r(t))e=t;else if("number"==typeof t.length)for(var n=0,i=t.length;i>n;n++)e.push(t[n]);else e.push(t);return e}function s(t,e,n){if(!(this instanceof s))return new s(t,e);"string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=o(t),this.options=i({},this.options),"function"==typeof e?n=e:i(this.options,e),n&&this.on("always",n),this.getImages(),u&&(this.jqDeferred=new u.Deferred);var r=this;setTimeout(function(){r.check()})}function a(t){
this.img=t}function l(t){this.src=t,p[t]=this}var u=t.jQuery,c=t.console,d="undefined"!=typeof c,h=Object.prototype.toString;s.prototype=new e,s.prototype.options={},s.prototype.getImages=function(){this.images=[];for(var t=0,e=this.elements.length;e>t;t++){var n=this.elements[t];"IMG"===n.nodeName&&this.addImage(n);var i=n.nodeType;if(i&&(1===i||9===i||11===i))for(var r=n.querySelectorAll("img"),o=0,s=r.length;s>o;o++){var a=r[o];this.addImage(a)}}},s.prototype.addImage=function(t){var e=new a(t);this.images.push(e)},s.prototype.check=function(){function t(t,r){return e.options.debug&&d&&c.log("confirm",t,r),e.progress(t),n++,n===i&&e.complete(),!0}var e=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return void this.complete();for(var r=0;i>r;r++){var o=this.images[r];o.on("confirm",t),o.check()}},s.prototype.progress=function(t){this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded;var e=this;setTimeout(function(){e.emit("progress",e,t),e.jqDeferred&&e.jqDeferred.notify&&e.jqDeferred.notify(e,t)})},s.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var e=this;setTimeout(function(){if(e.emit(t,e),e.emit("always",e),e.jqDeferred){var n=e.hasAnyBroken?"reject":"resolve";e.jqDeferred[n](e)}})},u&&(u.fn.imagesLoaded=function(t,e){var n=new s(this,t,e);return n.jqDeferred.promise(u(this))}),a.prototype=new e,a.prototype.check=function(){var t=p[this.img.src]||new l(this.img.src);if(t.isConfirmed)return void this.confirm(t.isLoaded,"cached was confirmed");if(this.img.complete&&void 0!==this.img.naturalWidth)return void this.confirm(0!==this.img.naturalWidth,"naturalWidth");var e=this;t.on("confirm",function(t,n){return e.confirm(t.isLoaded,n),!0}),t.check()},a.prototype.confirm=function(t,e){this.isLoaded=t,this.emit("confirm",this,e)};var p={};return l.prototype=new e,l.prototype.check=function(){if(!this.isChecked){var t=new Image;n.bind(t,"load",this),n.bind(t,"error",this),t.src=this.src,this.isChecked=!0}},l.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.prototype.onload=function(t){this.confirm(!0,"onload"),this.unbindProxyEvents(t)},l.prototype.onerror=function(t){this.confirm(!1,"onerror"),this.unbindProxyEvents(t)},l.prototype.confirm=function(t,e){this.isConfirmed=!0,this.isLoaded=t,this.emit("confirm",this,e)},l.prototype.unbindProxyEvents=function(t){n.unbind(t.target,"load",this),n.unbind(t.target,"error",this)},s}),function(t,e){"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("flickity"),require("imagesloaded")):t.Flickity=e(t,t.Flickity,t.imagesLoaded)}(window,function(t,e,n){return e.createMethods.push("_createImagesLoaded"),e.prototype._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},e.prototype.imagesLoaded=function(){function t(t,n){var i=e.getParentCell(n.img);e.cellSizeChange(i&&i.element),e.options.freeScroll||e.positionSliderAtSelected()}if(this.options.imagesLoaded){var e=this;n(this.slider).on("progress",t)}},e}),function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function r(e,n){t.fn[e]=function(r){if("string"==typeof r){for(var s=i.call(arguments,1),a=0,l=this.length;l>a;a++){var u=this[a],c=t.data(u,e);if(c)if(t.isFunction(c[r])&&"_"!==r.charAt(0)){var d=c[r].apply(c,s);if(void 0!==d)return d}else o("no such method '"+r+"' for "+e+" instance");else o("cannot call methods on "+e+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(r),i._init()):(i=new n(this,r),t.data(this,e,i))})}}if(t){var o="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),r(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var r=function(){};n.removeEventListener?r=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(r=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):"object"==typeof exports?module.exports=o:t.eventie=o}(window),function(){"use strict";function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,r=this,o=r.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,r=this.getListenersAsObject(t),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===e(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,r,o=this.getListenersAsObject(t);for(r in o)o.hasOwnProperty(r)&&(i=e(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,r,o=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)o.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,r,o,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(t,n.listener),o=n.listener.apply(this,e||[]),o===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=o,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,r=0,o=n.length;o>r;r++)if(e=n[r]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function r(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function o(e){function i(){if(!h){h=!0;var i=t.getComputedStyle;if(u=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[c]="border-box";var o=document.body||document.documentElement;o.appendChild(r);var a=u(r);d=200===n(a.width),o.removeChild(r)}}}function o(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=u(t);if("none"===e.display)return r();var o={};o.width=t.offsetWidth,o.height=t.offsetHeight;for(var s=o.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),h=0,p=a.length;p>h;h++){var f=a[h],m=e[f];m=l(t,m);var g=parseFloat(m);o[f]=isNaN(g)?0:g}var v=o.paddingLeft+o.paddingRight,y=o.paddingTop+o.paddingBottom,b=o.marginLeft+o.marginRight,w=o.marginTop+o.marginBottom,S=o.borderLeftWidth+o.borderRightWidth,_=o.borderTopWidth+o.borderBottomWidth,x=s&&d,T=n(e.width);T!==!1&&(o.width=T+(x?0:v+S));var C=n(e.height);return C!==!1&&(o.height=C+(x?0:y+_)),o.innerWidth=o.width-(v+S),o.innerHeight=o.height-(y+_),o.outerWidth=o.width+b,o.outerHeight=o.height+w,o}}function l(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,r=i.left,o=e.runtimeStyle,s=o&&o.left;return s&&(o.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,s&&(o.left=s),n}var u,c,d,h=!1;return o}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],o):"object"==typeof exports?module.exports=o(require("desandro-get-style-property")):t.getSize=o(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==o.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function r(r){return"complete"===o.readyState?i():(r.bind(o,"DOMContentLoaded",n),r.bind(o,"readystatechange",n),r.bind(t,"load",n)),e}var o=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):t.docReady=r(t.eventie)}(window),function(t){"use strict";function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),r=0,o=i.length;o>r;r++)if(i[r]===t)return!0;return!1}function r(t,i){return n(t),e(t,i)}var o,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var r=e[n],o=r+"MatchesSelector";if(t[o])return o}}();if(s){var a=document.createElement("div"),l=e(a,"div");o=l?e:r}else o=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return o}):"object"==typeof exports?module.exports=o:window.matchesSelector=o}(Element.prototype),function(t,e){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var r=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==r.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,r=t.length;r>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var r=[],o=0,s=t.length;s>o;o++){var a=t[o];if(i.isElement(a))if(e){n(a,e)&&r.push(a);for(var l=a.querySelectorAll(e),u=0,c=l.length;c>u;u++)r.push(l[u])}else r.push(a)}return r},i.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var o=t.console;return i.htmlInit=function(n,r){e(function(){for(var e=i.toDashed(r),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",l=0,u=s.length;u>l;l++){var c,d=s[l],h=d.getAttribute(a);try{c=h&&JSON.parse(h)}catch(p){o&&o.error("Error parsing "+a+" on "+d.nodeName.toLowerCase()+(d.id?"#"+d.id:"")+": "+p);continue}var f=new n(d,c),m=t.jQuery;m&&m.data(d,r,f)}})},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n,i,r){"use strict";function o(t){for(var e in t)return!1;return e=null,!0}function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function a(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var l=t.getComputedStyle,u=l?function(t){return l(t,null)}:function(t){return t.currentStyle},c=i("transition"),d=i("transform"),h=c&&d,p=!!i("perspective"),f={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[c],m=["transform","transition","transitionDuration","transitionProperty"],g=function(){for(var t={},e=0,n=m.length;n>e;e++){var r=m[e],o=i(r);o&&o!==r&&(t[r]=o)}return t}();r.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=n(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var n in t){var i=g[n]||n;e[i]=t[n]}},s.prototype.getPosition=function(){var t=u(this.element),e=this.layout.options,n=e.isOriginLeft,i=e.isOriginTop,r=t[n?"left":"right"],o=t[i?"top":"bottom"],s=this.layout.size,a=-1!=r.indexOf("%")?parseFloat(r)/100*s.width:parseInt(r,10),l=-1!=o.indexOf("%")?parseFloat(o)/100*s.height:parseInt(o,10);a=isNaN(a)?0:a,l=isNaN(l)?0:l,a-=n?s.paddingLeft:s.paddingRight,l-=i?s.paddingTop:s.paddingBottom,this.position.x=a,this.position.y=l},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,n={},i=e.isOriginLeft?"paddingLeft":"paddingRight",r=e.isOriginLeft?"left":"right",o=e.isOriginLeft?"right":"left",s=this.position.x+t[i];n[r]=this.getXValue(s),n[o]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",l=e.isOriginTop?"top":"bottom",u=e.isOriginTop?"bottom":"top",c=this.position.y+t[a];n[l]=this.getYValue(c),n[u]="",this.css(n),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(t,10),o=parseInt(e,10),s=r===this.position.x&&o===this.position.y;if(this.setPosition(t,e),s&&!this.isTransitioning)return void this.layoutPosition();var a=t-n,l=e-i,u={};u.transform=this.getTranslate(a,l),this.transition({to:u,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},s.prototype.getTranslate=function(t,e){var n=this.layout.options;return t=n.isOriginLeft?t:-t,e=n.isOriginTop?e:-e,p?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=h?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);if(t.from){this.css(t.from);var i=this.element.offsetHeight;i=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var v="opacity,"+a(g.transform||"transform");s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:v,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(f,this,!1))},s.prototype.transition=s.prototype[c?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var y={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=y[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],o(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd){var i=e.onEnd[n];i.call(this),delete e.onEnd[n]}this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(f,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var b={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(b)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(!c||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("visibleStyle");e[n]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");e[n]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,o,s){return e(t,n,i,r,o,s)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,n,i,r,o){"use strict";function s(t,e){var n=r.getQueryElement(t);if(!n)return void(a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t)));this.element=n,l&&(this.$element=l(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var i=++c;this.element.outlayerGUID=i,d[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var a=t.console,l=t.jQuery,u=function(){},c=0,d={};return s.namespace="outlayer",s.Item=o,s.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(s.prototype,n.prototype),s.prototype.option=function(t){r.extend(this.options,t)},s.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},s.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},s.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],r=0,o=e.length;o>r;r++){var s=e[r],a=new n(s,this);i.push(a)}return i},s.prototype._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},s.prototype.getItemElements=function(){for(var t=[],e=0,n=this.items.length;n>e;e++)t.push(this.items[e].element);return t},s.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},s.prototype._init=s.prototype.layout,s.prototype._resetLayout=function(){this.getSize()},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype._getMeasurement=function(t,e){var n,o=this.options[t];o?("string"==typeof o?n=this.element.querySelector(o):r.isElement(o)&&(n=o),this[t]=n?i(n)[e]:o):this[t]=0},s.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},s.prototype._getItemsForLayout=function(t){for(var e=[],n=0,i=t.length;i>n;n++){var r=t[n];r.isIgnored||e.push(r)}return e},s.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var n=[],i=0,r=t.length;r>i;i++){var o=t[i],s=this._getItemLayoutPosition(o);s.item=o,s.isInstant=e||o.isLayoutInstant,n.push(s)}this._processLayoutQueue(n)}},s.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},s.prototype._processLayoutQueue=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];this._positionItem(i.item,i.x,i.y,i.isInstant)}},s.prototype._positionItem=function(t,e,n,i){i?t.goTo(e,n):t.moveTo(e,n)},s.prototype._postLayout=function(){this.resizeContainer()},s.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},s.prototype._getContainerSize=u,s.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},s.prototype._emitCompleteOnItems=function(t,e){function n(){r.dispatchEvent(t+"Complete",null,[e])}function i(){s++,s===o&&n()}var r=this,o=e.length;if(!e||!o)return void n();for(var s=0,a=0,l=e.length;l>a;a++){var u=e[a];u.once(t,i)}},s.prototype.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),l)if(this.$element=this.$element||l(this.element),e){var r=l.Event(e);r.type=t,this.$element.trigger(r,n)}else this.$element.trigger(t,n)},s.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},s.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},s.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,n=t.length;n>e;e++){var i=t[e];this.ignore(i)}}},s.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,n=t.length;n>e;e++){var i=t[e];r.removeFrom(this.stamps,i),this.unignore(i)}},s.prototype._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=r.makeArray(t)):void 0},s.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;e>t;t++){var n=this.stamps[t];this._manageStamp(n)}}},s.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},s.prototype._manageStamp=u,s.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,r=i(t),o={left:e.left-n.left-r.marginLeft,top:e.top-n.top-r.marginTop,right:n.right-e.right-r.marginRight,bottom:n.bottom-e.bottom-r.marginBottom};return o},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},s.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1},s.prototype.onresize=function(){function t(){e.resize(),delete e.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var e=this;this.resizeTimeout=setTimeout(t,100)},s.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},s.prototype.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},s.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},s.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},s.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},s.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.reveal()}},s.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.hide()}},s.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},s.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},s.prototype.getItem=function(t){for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];if(i.element===t)return i}},s.prototype.getItems=function(t){t=r.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var o=t[n],s=this.getItem(o);s&&e.push(s)}return e},s.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var n=0,i=e.length;i>n;n++){var o=e[n];o.remove(),r.removeFrom(this.items,o)}},s.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete d[r],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=r.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&d[e]},s.create=function(t,e){function n(){s.apply(this,arguments)}return Object.create?n.prototype=Object.create(s.prototype):r.extend(n.prototype,s.prototype),n.prototype.constructor=n,n.defaults=r.extend({},s.defaults),r.extend(n.defaults,e),n.prototype.settings={},n.namespace=t,n.data=s.data,n.Item=function(){o.apply(this,arguments)},n.Item.prototype=new o,r.htmlInit(n,t),l&&l.bridget&&l.bridget(t,n),n},s.Item=o,s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}e.prototype=new t.Item,e.prototype._create=function(){this.id=this.layout.itemGUID++,t.Item.prototype._create.call(this),this.sortData={}},e.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var n in t){var i=e[n];this.sortData[n]=i(this.element,this)}}};var n=e.prototype.destroy;return e.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(t,e){"use strict";function n(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}return function(){function t(t){return function(){return e.prototype[t].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,o=i.length;o>r;r++){var s=i[r];n.prototype[s]=t(s)}}(),n.prototype.needsVerticalResizeLayout=function(){var e=t(this.isotope.element),n=this.isotope.size&&e;return n&&e.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(t,e){var n=t+e,i="outer"+e;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+e]}},n.prototype.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size;
},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return i.prototype=new n,e&&(i.options=e),i.prototype.namespace=t,n.modes[t]=i,i},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,n){var i=t.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,o=r/i,s=i-r%i,a=s&&1>s?"round":"floor";o=Math[a](o),this.cols=Math.max(o,1)},i.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=e&&1>e?"round":"ceil",r=Math[i](t.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var o=this._getColGroup(r),s=Math.min.apply(Math,o),a=n.indexOf(o,s),l={x:this.columnWidth*a,y:s},u=s+t.size.outerHeight,c=this.cols+1-o.length,d=0;c>d;d++)this.colYs[a+d]=u;return l},i.prototype._getColGroup=function(t){if(2>t)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;n>i;i++){var r=this.colYs.slice(i,i+t);e[i]=Math.max.apply(Math,r)}return e},i.prototype._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),r=this.options.isOriginLeft?i.left:i.right,o=r+n.outerWidth,s=Math.floor(r/this.columnWidth);s=Math.max(0,s);var a=Math.floor(o/this.columnWidth);a-=o%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,u=s;a>=u;u++)this.colYs[u]=Math.max(l,this.colYs[u])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},i.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],e):"object"==typeof exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}var i=t.create("masonry"),r=i.prototype._getElementOffset,o=i.prototype.layout,s=i.prototype._getMeasurement;n(i.prototype,e.prototype),i.prototype._getElementOffset=r,i.prototype.layout=o,i.prototype._getMeasurement=s;var a=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,a.call(this)};var l=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,l.apply(this,arguments)},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows");return e.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,i},e.prototype._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0});return e.prototype._resetLayout=function(){this.y=0},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=t.size.outerHeight,{x:e,y:n}},e.prototype._getContainerSize=function(){return{height:this.y}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,o,s,a){return e(t,n,i,r,o,s,a)}):"object"==typeof exports?module.exports=e(t,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):t.Isotope=e(t,t.Outlayer,t.getSize,t.matchesSelector,t.fizzyUIUtils,t.Isotope.Item,t.Isotope.LayoutMode)}(window,function(t,e,n,i,r,o,s){function a(t,e){return function(n,i){for(var r=0,o=t.length;o>r;r++){var s=t[r],a=n.sortData[s],l=i.sortData[s];if(a>l||l>a){var u=void 0!==e[s]?e[s]:e,c=u?1:-1;return(a>l?1:-1)*c}}return 0}}var l=t.jQuery,u=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},c=document.documentElement,d=c.textContent?function(t){return t.textContent}:function(t){return t.innerText},h=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=o,h.LayoutMode=s,h.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var t in s.modes)this._initLayoutMode(t)},h.prototype.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},h.prototype._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),n=0,i=t.length;i>n;n++){var r=t[n];r.id=this.itemGUID++}return this._updateItemsSortData(t),t},h.prototype._initLayoutMode=function(t){var e=s.modes[t],n=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,n):n,this.modes[t]=new e(this)},h.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},h.prototype._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},h.prototype.arrange=function(t){function e(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(t),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(e):e(),this._sort(),this._layout()},h.prototype._init=h.prototype.arrange,h.prototype._getIsInstant=function(){var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=t,t},h.prototype._bindArrangeComplete=function(){function t(){e&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var e,n,i,r=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){n=!0,t()}),this.once("revealComplete",function(){i=!0,t()})},h.prototype._filter=function(t){var e=this.options.filter;e=e||"*";for(var n=[],i=[],r=[],o=this._getFilterTest(e),s=0,a=t.length;a>s;s++){var l=t[s];if(!l.isIgnored){var u=o(l);u&&n.push(l),u&&l.isHidden?i.push(l):u||l.isHidden||r.push(l)}}return{matches:n,needReveal:i,needHide:r}},h.prototype._getFilterTest=function(t){return l&&this.options.isJQueryFiltering?function(e){return l(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return i(e.element,t)}},h.prototype.updateSortData=function(t){var e;t?(t=r.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},h.prototype._getSorters=function(){var t=this.options.getSortData;for(var e in t){var n=t[e];this._sorters[e]=p(n)}},h.prototype._updateItemsSortData=function(t){for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.updateSortData()}};var p=function(){function t(t){if("string"!=typeof t)return t;var n=u(t).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),o=r&&r[1],s=e(o,i),a=h.sortDataParsers[n[1]];return t=a?function(t){return t&&a(s(t))}:function(t){return t&&s(t)}}function e(t,e){var n;return n=t?function(e){return e.getAttribute(t)}:function(t){var n=t.querySelector(e);return n&&d(n)}}return t}();h.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},h.prototype._sort=function(){var t=this.options.sortBy;if(t){var e=[].concat.apply(t,this.sortHistory),n=a(e,this.options.sortAscending);this.filteredItems.sort(n),t!=this.sortHistory[0]&&this.sortHistory.unshift(t)}},h.prototype._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},h.prototype._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},h.prototype._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},h.prototype._manageStamp=function(t){this._mode()._manageStamp(t)},h.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},h.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.prototype.appended=function(t){var e=this.addItems(t);if(e.length){var n=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(n)}},h.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=e.concat(this.items)}},h.prototype._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},h.prototype.insert=function(t){var e=this.addItems(t);if(e.length){var n,i,r=e.length;for(n=0;r>n;n++)i=e[n],this.element.appendChild(i.element);var o=this._filter(e).matches;for(n=0;r>n;n++)e[n].isLayoutInstant=!0;for(this.arrange(),n=0;r>n;n++)delete e[n].isLayoutInstant;this.reveal(o)}};var f=h.prototype.remove;return h.prototype.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);f.call(this,t);var n=e&&e.length;if(n)for(var i=0;n>i;i++){var o=e[i];r.removeFrom(this.filteredItems,o)}},h.prototype.shuffle=function(){for(var t=0,e=this.items.length;e>t;t++){var n=this.items[t];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h.prototype._noTransition=function(t){var e=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.call(this);return this.options.transitionDuration=e,n},h.prototype.getFilteredItemElements=function(){for(var t=[],e=0,n=this.filteredItems.length;n>e;e++)t.push(this.filteredItems[e].element);return t},h}),function(t,e,n){function i(e,n){this.element=e,this.settings=t.extend({},r,n),this._defaults=r,this._name=o,this.init()}var r={label:"MENU",duplicate:!0,duration:200,easingOpen:"swing",easingClose:"swing",closedSymbol:"&#9658;",openedSymbol:"&#9660;",prependTo:"body",appendTo:"",parentTag:"a",closeOnClick:!1,allowParentLinks:!1,nestedParentLinks:!0,showChildren:!1,removeIds:!1,removeClasses:!1,removeStyles:!1,brand:"",init:function(){},beforeOpen:function(){},beforeClose:function(){},afterOpen:function(){},afterClose:function(){}},o="slicknav",s="slicknav";i.prototype.init=function(){var n,i,r=this,o=t(this.element),a=this.settings;if(a.duplicate?(r.mobileNav=o.clone(),r.mobileNav.removeAttr("id"),r.mobileNav.find("*").each(function(e,n){t(n).removeAttr("id")})):(r.mobileNav=o,r.mobileNav.removeAttr("id"),r.mobileNav.find("*").each(function(e,n){t(n).removeAttr("id")})),a.removeClasses&&(r.mobileNav.removeAttr("class"),r.mobileNav.find("*").each(function(e,n){t(n).removeAttr("class")})),a.removeStyles&&(r.mobileNav.removeAttr("style"),r.mobileNav.find("*").each(function(e,n){t(n).removeAttr("style")})),n=s+"_icon",""===a.label&&(n+=" "+s+"_no-text"),"a"==a.parentTag&&(a.parentTag='a href="#"'),r.mobileNav.attr("class",s+"_nav"),i=t('<div class="'+s+'_menu"></div>'),""!==a.brand){var l=t('<div class="'+s+'_brand">'+a.brand+"</div>");t(i).append(l)}r.btn=t(["<"+a.parentTag+' aria-haspopup="true" tabindex="0" class="'+s+"_btn "+s+'_collapsed">','<span class="'+s+'_menutxt">'+a.label+"</span>",'<span class="'+n+'">','<span class="'+s+'_icon-bar"></span>','<span class="'+s+'_icon-bar"></span>','<span class="'+s+'_icon-bar"></span>',"</span>","</"+a.parentTag+">"].join("")),t(i).append(r.btn),""!==a.appendTo?t(a.appendTo).append(i):t(a.prependTo).prepend(i),i.append(r.mobileNav);var u=r.mobileNav.find("li");t(u).each(function(){var e=t(this),n={};if(n.children=e.children("ul").attr("role","menu"),e.data("menu",n),n.children.length>0){var i=e.contents(),o=!1,l=[];t(i).each(function(){return t(this).is("ul")?!1:(l.push(this),void(t(this).is("a")&&(o=!0)))});var u=t("<"+a.parentTag+' role="menuitem" aria-haspopup="true" tabindex="-1" class="'+s+'_item"/>');if(a.allowParentLinks&&!a.nestedParentLinks&&o)t(l).wrapAll('<span class="'+s+"_parent-link "+s+'_row"/>').parent();else{var c=t(l).wrapAll(u).parent();c.addClass(s+"_row")}a.showChildren?e.addClass(s+"_open"):e.addClass(s+"_collapsed"),e.addClass(s+"_parent");var d=t('<span class="'+s+'_arrow">'+(a.showChildren?a.openedSymbol:a.closedSymbol)+"</span>");a.allowParentLinks&&!a.nestedParentLinks&&o&&(d=d.wrap(u).parent()),t(l).last().after(d)}else 0===e.children().length&&e.addClass(s+"_txtnode");e.children("a").attr("role","menuitem").click(function(e){a.closeOnClick&&!t(e.target).parent().closest("li").hasClass(s+"_parent")&&t(r.btn).click()}),a.closeOnClick&&a.allowParentLinks&&(e.children("a").children("a").click(function(e){t(r.btn).click()}),e.find("."+s+"_parent-link a:not(."+s+"_item)").click(function(e){t(r.btn).click()}))}),t(u).each(function(){var e=t(this).data("menu");a.showChildren||r._visibilityToggle(e.children,null,!1,null,!0)}),r._visibilityToggle(r.mobileNav,null,!1,"init",!0),r.mobileNav.attr("role","menu"),t(e).mousedown(function(){r._outlines(!1)}),t(e).keyup(function(){r._outlines(!0)}),t(r.btn).click(function(t){t.preventDefault(),r._menuToggle()}),r.mobileNav.on("click","."+s+"_item",function(e){e.preventDefault(),r._itemClick(t(this))}),t(r.btn).keydown(function(t){var e=t||event;13==e.keyCode&&(t.preventDefault(),r._menuToggle())}),r.mobileNav.on("keydown","."+s+"_item",function(e){var n=e||event;13==n.keyCode&&(e.preventDefault(),r._itemClick(t(e.target)))}),a.allowParentLinks&&a.nestedParentLinks&&t("."+s+"_item a").click(function(t){t.stopImmediatePropagation()})},i.prototype._menuToggle=function(t){var e=this,n=e.btn,i=e.mobileNav;n.hasClass(s+"_collapsed")?(n.removeClass(s+"_collapsed"),n.addClass(s+"_open")):(n.removeClass(s+"_open"),n.addClass(s+"_collapsed")),n.addClass(s+"_animating"),e._visibilityToggle(i,n.parent(),!0,n)},i.prototype._itemClick=function(t){var e=this,n=e.settings,i=t.data("menu");i||(i={},i.arrow=t.children("."+s+"_arrow"),i.ul=t.next("ul"),i.parent=t.parent(),i.parent.hasClass(s+"_parent-link")&&(i.parent=t.parent().parent(),i.ul=t.parent().next("ul")),t.data("menu",i)),i.parent.hasClass(s+"_collapsed")?(i.arrow.html(n.openedSymbol),i.parent.removeClass(s+"_collapsed"),i.parent.addClass(s+"_open"),i.parent.addClass(s+"_animating"),e._visibilityToggle(i.ul,i.parent,!0,t)):(i.arrow.html(n.closedSymbol),i.parent.addClass(s+"_collapsed"),i.parent.removeClass(s+"_open"),i.parent.addClass(s+"_animating"),e._visibilityToggle(i.ul,i.parent,!0,t))},i.prototype._visibilityToggle=function(e,n,i,r,o){var a=this,l=a.settings,u=a._getActionItems(e),c=0;i&&(c=l.duration),e.hasClass(s+"_hidden")?(e.removeClass(s+"_hidden"),o||l.beforeOpen(r),e.slideDown(c,l.easingOpen,function(){t(r).removeClass(s+"_animating"),t(n).removeClass(s+"_animating"),o||l.afterOpen(r)}),e.attr("aria-hidden","false"),u.attr("tabindex","0"),a._setVisAttr(e,!1)):(e.addClass(s+"_hidden"),o||l.beforeClose(r),e.slideUp(c,this.settings.easingClose,function(){e.attr("aria-hidden","true"),u.attr("tabindex","-1"),a._setVisAttr(e,!0),e.hide(),t(r).removeClass(s+"_animating"),t(n).removeClass(s+"_animating"),o?"init"==r&&l.init():l.afterClose(r)}))},i.prototype._setVisAttr=function(e,n){var i=this,r=e.children("li").children("ul").not("."+s+"_hidden");n?r.each(function(){var e=t(this);e.attr("aria-hidden","true");var r=i._getActionItems(e);r.attr("tabindex","-1"),i._setVisAttr(e,n)}):r.each(function(){var e=t(this);e.attr("aria-hidden","false");var r=i._getActionItems(e);r.attr("tabindex","0"),i._setVisAttr(e,n)})},i.prototype._getActionItems=function(t){var e=t.data("menu");if(!e){e={};var n=t.children("li"),i=n.find("a");e.links=i.add(n.find("."+s+"_item")),t.data("menu",e)}return e.links},i.prototype._outlines=function(e){e?t("."+s+"_item, ."+s+"_btn").css("outline",""):t("."+s+"_item, ."+s+"_btn").css("outline","none")},i.prototype.toggle=function(){var t=this;t._menuToggle()},i.prototype.open=function(){var t=this;t.btn.hasClass(s+"_collapsed")&&t._menuToggle()},i.prototype.close=function(){var t=this;t.btn.hasClass(s+"_open")&&t._menuToggle()},t.fn[o]=function(e){var n=arguments;if(void 0===e||"object"==typeof e)return this.each(function(){t.data(this,"plugin_"+o)||t.data(this,"plugin_"+o,new i(this,e))});if("string"==typeof e&&"_"!==e[0]&&"init"!==e){var r;return this.each(function(){var s=t.data(this,"plugin_"+o);s instanceof i&&"function"==typeof s[e]&&(r=s[e].apply(s,Array.prototype.slice.call(n,1)))}),void 0!==r?r:this}}}(jQuery,document,window),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return t(e,window,document)}):"object"==typeof exports?module.exports=function(e,n){return e||(e=window),n||(n="undefined"!=typeof window?require("jquery"):require("jquery")(e)),t(n,e,e.document)}:t(jQuery,window,document)}(function(t,e,n,i){"use strict";function r(e){var n,i,o="a aa ai ao as b fn i m o s ",s={};t.each(e,function(t,a){n=t.match(/^([^A-Z]+?)([A-Z])/),n&&-1!==o.indexOf(n[1]+" ")&&(i=t.replace(n[0],n[2].toLowerCase()),s[i]=t,"o"===n[1]&&r(e[t]))}),e._hungarianMap=s}function o(e,n,s){e._hungarianMap||r(e);var a;t.each(n,function(r,l){a=e._hungarianMap[r],a===i||!s&&n[a]!==i||("o"===a.charAt(0)?(n[a]||(n[a]={}),t.extend(!0,n[a],n[r]),o(e[a],n[a],s)):n[a]=n[r])})}function s(t){var e=Vt.defaults.oLanguage,n=t.sZeroRecords;!t.sEmptyTable&&n&&"No data available in table"===e.sEmptyTable&&qt(t,t,"sZeroRecords","sEmptyTable"),!t.sLoadingRecords&&n&&"Loading..."===e.sLoadingRecords&&qt(t,t,"sZeroRecords","sLoadingRecords"),t.sInfoThousands&&(t.sThousands=t.sInfoThousands);var i=t.sDecimal;i&&Bt(i)}function a(t){ge(t,"ordering","bSort"),ge(t,"orderMulti","bSortMulti"),ge(t,"orderClasses","bSortClasses"),ge(t,"orderCellsTop","bSortCellsTop"),ge(t,"order","aaSorting"),ge(t,"orderFixed","aaSortingFixed"),ge(t,"paging","bPaginate"),ge(t,"pagingType","sPaginationType"),ge(t,"pageLength","iDisplayLength"),ge(t,"searching","bFilter"),"boolean"==typeof t.sScrollX&&(t.sScrollX=t.sScrollX?"100%":""),"boolean"==typeof t.scrollX&&(t.scrollX=t.scrollX?"100%":"");var e=t.aoSearchCols;if(e)for(var n=0,i=e.length;i>n;n++)e[n]&&o(Vt.models.oSearch,e[n])}function l(e){ge(e,"orderable","bSortable"),ge(e,"orderData","aDataSort"),ge(e,"orderSequence","asSorting"),ge(e,"orderDataType","sortDataType");var n=e.aDataSort;n&&!t.isArray(n)&&(e.aDataSort=[n])}function u(e){if(!Vt.__browser){var n={};Vt.__browser=n;var i=t("<div/>").css({position:"fixed",top:0,left:0,height:1,width:1,overflow:"hidden"}).append(t("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(t("<div/>").css({width:"100%",height:10}))).appendTo("body"),r=i.children(),o=r.children();n.barWidth=r[0].offsetWidth-r[0].clientWidth,n.bScrollOversize=100===o[0].offsetWidth&&100!==r[0].clientWidth,n.bScrollbarLeft=1!==Math.round(o.offset().left),n.bBounding=i[0].getBoundingClientRect().width?!0:!1,i.remove()}t.extend(e.oBrowser,Vt.__browser),e.oScroll.iBarWidth=Vt.__browser.barWidth}function c(t,e,n,r,o,s){var a,l=r,u=!1;for(n!==i&&(a=n,u=!0);l!==o;)t.hasOwnProperty(l)&&(a=u?e(a,t[l],l,t):t[l],u=!0,l+=s);return a}function d(e,i){var r=Vt.defaults.column,o=e.aoColumns.length,s=t.extend({},Vt.models.oColumn,r,{nTh:i?i:n.createElement("th"),sTitle:r.sTitle?r.sTitle:i?i.innerHTML:"",aDataSort:r.aDataSort?r.aDataSort:[o],mData:r.mData?r.mData:o,idx:o});e.aoColumns.push(s);var a=e.aoPreSearchCols;a[o]=t.extend({},Vt.models.oSearch,a[o]),h(e,o,t(i).data())}function h(e,n,r){var s=e.aoColumns[n],a=e.oClasses,u=t(s.nTh);if(!s.sWidthOrig){s.sWidthOrig=u.attr("width")||null;var c=(u.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);c&&(s.sWidthOrig=c[1])}r!==i&&null!==r&&(l(r),o(Vt.defaults.column,r),r.mDataProp===i||r.mData||(r.mData=r.mDataProp),r.sType&&(s._sManualType=r.sType),r.className&&!r.sClass&&(r.sClass=r.className),t.extend(s,r),qt(s,r,"sWidth","sWidthOrig"),r.iDataSort!==i&&(s.aDataSort=[r.iDataSort]),qt(s,r,"aDataSort"));var d=s.mData,h=E(d),p=s.mRender?E(s.mRender):null,f=function(t){return"string"==typeof t&&-1!==t.indexOf("@")};s._bAttrSrc=t.isPlainObject(d)&&(f(d.sort)||f(d.type)||f(d.filter)),s.fnGetData=function(t,e,n){var r=h(t,e,i,n);return p&&e?p(r,e,t,n):r},s.fnSetData=function(t,e,n){return A(d)(t,e,n)},"number"!=typeof d&&(e._rowReadObject=!0),e.oFeatures.bSort||(s.bSortable=!1,u.addClass(a.sSortableNone));var m=-1!==t.inArray("asc",s.asSorting),g=-1!==t.inArray("desc",s.asSorting);s.bSortable&&(m||g)?m&&!g?(s.sSortingClass=a.sSortableAsc,s.sSortingClassJUI=a.sSortJUIAscAllowed):!m&&g?(s.sSortingClass=a.sSortableDesc,s.sSortingClassJUI=a.sSortJUIDescAllowed):(s.sSortingClass=a.sSortable,s.sSortingClassJUI=a.sSortJUI):(s.sSortingClass=a.sSortableNone,s.sSortingClassJUI="")}function p(t){if(t.oFeatures.bAutoWidth!==!1){var e=t.aoColumns;yt(t);for(var n=0,i=e.length;i>n;n++)e[n].nTh.style.width=e[n].sWidth}var r=t.oScroll;(""!==r.sY||""!==r.sX)&&gt(t),Mt(t,null,"column-sizing",[t])}function f(t,e){var n=v(t,"bVisible");return"number"==typeof n[e]?n[e]:null}function m(e,n){var i=v(e,"bVisible"),r=t.inArray(n,i);return-1!==r?r:null}function g(t){return v(t,"bVisible").length}function v(e,n){var i=[];return t.map(e.aoColumns,function(t,e){t[n]&&i.push(e)}),i}function y(t){var e,n,r,o,s,a,l,u,c,d=t.aoColumns,h=t.aoData,p=Vt.ext.type.detect;for(e=0,n=d.length;n>e;e++)if(l=d[e],c=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(r=0,o=p.length;o>r;r++){for(s=0,a=h.length;a>s&&(c[s]===i&&(c[s]=T(t,s,e,"type")),u=p[r](c[s],t),u||r===p.length-1)&&"html"!==u;s++);if(u){l.sType=u;break}}l.sType||(l.sType="string")}}function b(e,n,r,o){var s,a,l,u,c,h,p,f=e.aoColumns;if(n)for(s=n.length-1;s>=0;s--){p=n[s];var m=p.targets!==i?p.targets:p.aTargets;for(t.isArray(m)||(m=[m]),l=0,u=m.length;u>l;l++)if("number"==typeof m[l]&&m[l]>=0){for(;f.length<=m[l];)d(e);o(m[l],p)}else if("number"==typeof m[l]&&m[l]<0)o(f.length+m[l],p);else if("string"==typeof m[l])for(c=0,h=f.length;h>c;c++)("_all"==m[l]||t(f[c].nTh).hasClass(m[l]))&&o(c,p)}if(r)for(s=0,a=r.length;a>s;s++)o(s,r[s])}function w(e,n,r,o){var s=e.aoData.length,a=t.extend(!0,{},Vt.models.oRow,{src:r?"dom":"data",idx:s});a._aData=n,e.aoData.push(a);for(var l=e.aoColumns,u=0,c=l.length;c>u;u++)l[u].sType=null;e.aiDisplayMaster.push(s);var d=e.rowIdFn(n);return d!==i&&(e.aIds[d]=a),(r||!e.oFeatures.bDeferRender)&&O(e,s,r,o),s}function S(e,n){var i;return n instanceof t||(n=t(n)),n.map(function(t,n){return i=$(e,n),w(e,i.data,n,i.cells)})}function _(t,e){return e._DT_RowIndex!==i?e._DT_RowIndex:null}function x(e,n,i){return t.inArray(i,e.aoData[n].anCells)}function T(t,e,n,r){var o=t.iDraw,s=t.aoColumns[n],a=t.aoData[e]._aData,l=s.sDefaultContent,u=s.fnGetData(a,r,{settings:t,row:e,col:n});if(u===i)return t.iDrawError!=o&&null===l&&(Ot(t,0,"Requested unknown parameter "+("function"==typeof s.mData?"{function}":"'"+s.mData+"'")+" for row "+e+", column "+n,4),t.iDrawError=o),l;if(u!==a&&null!==u||null===l){if("function"==typeof u)return u.call(a)}else u=l;return null===u&&"display"==r?"":u}function C(t,e,n,i){var r=t.aoColumns[n],o=t.aoData[e]._aData;r.fnSetData(o,i,{settings:t,row:e,col:n})}function D(e){return t.map(e.match(/(\\.|[^\.])+/g)||[""],function(t){return t.replace(/\\./g,".")})}function E(e){if(t.isPlainObject(e)){var n={};return t.each(e,function(t,e){e&&(n[t]=E(e))}),function(t,e,r,o){var s=n[e]||n._;return s!==i?s(t,e,r,o):t}}if(null===e)return function(t){return t};if("function"==typeof e)return function(t,n,i,r){return e(t,n,i,r)};if("string"!=typeof e||-1===e.indexOf(".")&&-1===e.indexOf("[")&&-1===e.indexOf("("))return function(t,n){return t[e]};var r=function(e,n,o){var s,a,l,u;if(""!==o)for(var c=D(o),d=0,h=c.length;h>d;d++){if(s=c[d].match(ve),a=c[d].match(ye),s){if(c[d]=c[d].replace(ve,""),""!==c[d]&&(e=e[c[d]]),l=[],c.splice(0,d+1),u=c.join("."),t.isArray(e))for(var p=0,f=e.length;f>p;p++)l.push(r(e[p],n,u));var m=s[0].substring(1,s[0].length-1);e=""===m?l:l.join(m);break}if(a)c[d]=c[d].replace(ye,""),e=e[c[d]]();else{if(null===e||e[c[d]]===i)return i;e=e[c[d]]}}return e};return function(t,n){return r(t,n,e)}}function A(e){if(t.isPlainObject(e))return A(e._);if(null===e)return function(){};if("function"==typeof e)return function(t,n,i){e(t,"set",n,i)};if("string"!=typeof e||-1===e.indexOf(".")&&-1===e.indexOf("[")&&-1===e.indexOf("("))return function(t,n){t[e]=n};var n=function(e,r,o){for(var s,a,l,u,c,d=D(o),h=d[d.length-1],p=0,f=d.length-1;f>p;p++){if(a=d[p].match(ve),l=d[p].match(ye),a){if(d[p]=d[p].replace(ve,""),e[d[p]]=[],s=d.slice(),s.splice(0,p+1),c=s.join("."),t.isArray(r))for(var m=0,g=r.length;g>m;m++)u={},n(u,r[m],c),e[d[p]].push(u);else e[d[p]]=r;return}l&&(d[p]=d[p].replace(ye,""),e=e[d[p]](r)),(null===e[d[p]]||e[d[p]]===i)&&(e[d[p]]={}),e=e[d[p]]}h.match(ye)?e=e[h.replace(ye,"")](r):e[h.replace(ve,"")]=r};return function(t,i){return n(t,i,e)}}function I(t){return ce(t.aoData,"_aData")}function P(t){t.aoData.length=0,t.aiDisplayMaster.length=0,t.aiDisplay.length=0,t.aIds={}}function k(t,e,n){for(var r=-1,o=0,s=t.length;s>o;o++)t[o]==e?r=o:t[o]>e&&t[o]--;-1!=r&&n===i&&t.splice(r,1)}function L(t,e,n,r){var o,s,a=t.aoData[e],l=function(n,i){for(;n.childNodes.length;)n.removeChild(n.firstChild);n.innerHTML=T(t,e,i,"display")};if("dom"!==n&&(n&&"auto"!==n||"dom"!==a.src)){var u=a.anCells;if(u)if(r!==i)l(u[r],r);else for(o=0,s=u.length;s>o;o++)l(u[o],o)}else a._aData=$(t,a,r,r===i?i:a._aData).data;a._aSortData=null,a._aFilterData=null;var c=t.aoColumns;if(r!==i)c[r].sType=null;else{for(o=0,s=c.length;s>o;o++)c[o].sType=null;q(t,a)}}function $(e,n,r,o){var s,a,l,u=[],c=n.firstChild,d=0,h=e.aoColumns,p=e._rowReadObject;o=o!==i?o:p?{}:[];var f=function(t,e){if("string"==typeof t){var n=t.indexOf("@");if(-1!==n){var i=t.substring(n+1),r=A(t);r(o,e.getAttribute(i))}}},m=function(e){if(r===i||r===d)if(a=h[d],l=t.trim(e.innerHTML),a&&a._bAttrSrc){var n=A(a.mData._);n(o,l),f(a.mData.sort,e),f(a.mData.type,e),f(a.mData.filter,e)}else p?(a._setter||(a._setter=A(a.mData)),a._setter(o,l)):o[d]=l;d++};if(c)for(;c;)s=c.nodeName.toUpperCase(),("TD"==s||"TH"==s)&&(m(c),u.push(c)),c=c.nextSibling;else{u=n.anCells;for(var g=0,v=u.length;v>g;g++)m(u[g])}var y=n.firstChild?n:n.nTr;if(y){var b=y.getAttribute("id");b&&A(e.rowId)(o,b)}return{data:o,cells:u}}function O(t,e,i,r){var o,s,a,l,u,c=t.aoData[e],d=c._aData,h=[];if(null===c.nTr){for(o=i||n.createElement("tr"),c.nTr=o,c.anCells=h,o._DT_RowIndex=e,q(t,c),l=0,u=t.aoColumns.length;u>l;l++)a=t.aoColumns[l],s=i?r[l]:n.createElement(a.sCellType),s._DT_CellIndex={row:e,column:l},h.push(s),(!i||a.mRender||a.mData!==l)&&(s.innerHTML=T(t,e,l,"display")),a.sClass&&(s.className+=" "+a.sClass),a.bVisible&&!i?o.appendChild(s):!a.bVisible&&i&&s.parentNode.removeChild(s),a.fnCreatedCell&&a.fnCreatedCell.call(t.oInstance,s,T(t,e,l),d,e,l);Mt(t,"aoRowCreatedCallback",null,[o,d,e])}c.nTr.setAttribute("role","row")}function q(e,n){var i=n.nTr,r=n._aData;if(i){var o=e.rowIdFn(r);if(o&&(i.id=o),r.DT_RowClass){var s=r.DT_RowClass.split(" ");n.__rowc=n.__rowc?me(n.__rowc.concat(s)):s,t(i).removeClass(n.__rowc.join(" ")).addClass(r.DT_RowClass)}r.DT_RowAttr&&t(i).attr(r.DT_RowAttr),r.DT_RowData&&t(i).data(r.DT_RowData)}}function z(e){var n,i,r,o,s,a=e.nTHead,l=e.nTFoot,u=0===t("th, td",a).length,c=e.oClasses,d=e.aoColumns;for(u&&(o=t("<tr/>").appendTo(a)),n=0,i=d.length;i>n;n++)s=d[n],r=t(s.nTh).addClass(s.sClass),u&&r.appendTo(o),e.oFeatures.bSort&&(r.addClass(s.sSortingClass),s.bSortable!==!1&&(r.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),At(e,s.nTh,n))),s.sTitle!=r[0].innerHTML&&r.html(s.sTitle),Nt(e,"header")(e,r,s,c);if(u&&N(e.aoHeader,a),t(a).find(">tr").attr("role","row"),t(a).find(">tr>th, >tr>td").addClass(c.sHeaderTH),t(l).find(">tr>th, >tr>td").addClass(c.sFooterTH),null!==l){var h=e.aoFooter[0];for(n=0,i=h.length;i>n;n++)s=d[n],s.nTf=h[n].cell,s.sClass&&t(s.nTf).addClass(s.sClass)}}function j(e,n,r){var o,s,a,l,u,c,d,h,p,f=[],m=[],g=e.aoColumns.length;if(n){for(r===i&&(r=!1),o=0,s=n.length;s>o;o++){for(f[o]=n[o].slice(),f[o].nTr=n[o].nTr,a=g-1;a>=0;a--)e.aoColumns[a].bVisible||r||f[o].splice(a,1);m.push([])}for(o=0,s=f.length;s>o;o++){if(d=f[o].nTr)for(;c=d.firstChild;)d.removeChild(c);for(a=0,l=f[o].length;l>a;a++)if(h=1,p=1,m[o][a]===i){for(d.appendChild(f[o][a].cell),m[o][a]=1;f[o+h]!==i&&f[o][a].cell==f[o+h][a].cell;)m[o+h][a]=1,h++;for(;f[o][a+p]!==i&&f[o][a].cell==f[o][a+p].cell;){for(u=0;h>u;u++)m[o+u][a+p]=1;p++}t(f[o][a].cell).attr("rowspan",h).attr("colspan",p)}}}}function R(e){var n=Mt(e,"aoPreDrawCallback","preDraw",[e]);if(-1!==t.inArray(!1,n))return void ft(e,!1);var r=[],o=0,s=e.asStripeClasses,a=s.length,l=(e.aoOpenRows.length,e.oLanguage),u=e.iInitDisplayStart,c="ssp"==Ht(e),d=e.aiDisplay;e.bDrawing=!0,u!==i&&-1!==u&&(e._iDisplayStart=c?u:u>=e.fnRecordsDisplay()?0:u,e.iInitDisplayStart=-1);var h=e._iDisplayStart,p=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,ft(e,!1);else if(c){if(!e.bDestroying&&!B(e))return}else e.iDraw++;if(0!==d.length)for(var f=c?0:h,m=c?e.aoData.length:p,v=f;m>v;v++){var y=d[v],b=e.aoData[y];null===b.nTr&&O(e,y);var w=b.nTr;if(0!==a){var S=s[o%a];b._sRowStripe!=S&&(t(w).removeClass(b._sRowStripe).addClass(S),b._sRowStripe=S)}Mt(e,"aoRowCallback",null,[w,b._aData,o,v]),r.push(w),o++}else{var _=l.sZeroRecords;1==e.iDraw&&"ajax"==Ht(e)?_=l.sLoadingRecords:l.sEmptyTable&&0===e.fnRecordsTotal()&&(_=l.sEmptyTable),r[0]=t("<tr/>",{"class":a?s[0]:""}).append(t("<td />",{valign:"top",colSpan:g(e),"class":e.oClasses.sRowEmpty}).html(_))[0]}Mt(e,"aoHeaderCallback","header",[t(e.nTHead).children("tr")[0],I(e),h,p,d]),Mt(e,"aoFooterCallback","footer",[t(e.nTFoot).children("tr")[0],I(e),h,p,d]);var x=t(e.nTBody);x.children().detach(),x.append(t(r)),Mt(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}function M(t,e){var n=t.oFeatures,i=n.bSort,r=n.bFilter;i&&Ct(t),r?G(t,t.oPreviousSearch):t.aiDisplay=t.aiDisplayMaster.slice(),e!==!0&&(t._iDisplayStart=0),t._drawHold=e,R(t),t._drawHold=!1}function F(e){var n=e.oClasses,i=t(e.nTable),r=t("<div/>").insertBefore(i),o=e.oFeatures,s=t("<div/>",{
id:e.sTableId+"_wrapper","class":n.sWrapper+(e.nTFoot?"":" "+n.sNoFooter)});e.nHolding=r[0],e.nTableWrapper=s[0],e.nTableReinsertBefore=e.nTable.nextSibling;for(var a,l,u,c,d,h,p=e.sDom.split(""),f=0;f<p.length;f++){if(a=null,l=p[f],"<"==l){if(u=t("<div/>")[0],c=p[f+1],"'"==c||'"'==c){for(d="",h=2;p[f+h]!=c;)d+=p[f+h],h++;if("H"==d?d=n.sJUIHeader:"F"==d&&(d=n.sJUIFooter),-1!=d.indexOf(".")){var m=d.split(".");u.id=m[0].substr(1,m[0].length-1),u.className=m[1]}else"#"==d.charAt(0)?u.id=d.substr(1,d.length-1):u.className=d;f+=h}s.append(u),s=t(u)}else if(">"==l)s=s.parent();else if("l"==l&&o.bPaginate&&o.bLengthChange)a=ct(e);else if("f"==l&&o.bFilter)a=X(e);else if("r"==l&&o.bProcessing)a=pt(e);else if("t"==l)a=mt(e);else if("i"==l&&o.bInfo)a=rt(e);else if("p"==l&&o.bPaginate)a=dt(e);else if(0!==Vt.ext.feature.length)for(var g=Vt.ext.feature,v=0,y=g.length;y>v;v++)if(l==g[v].cFeature){a=g[v].fnInit(e);break}if(a){var b=e.aanFeatures;b[l]||(b[l]=[]),b[l].push(a),s.append(a)}}r.replaceWith(s),e.nHolding=null}function N(e,n){var i,r,o,s,a,l,u,c,d,h,p,f=t(n).children("tr"),m=function(t,e,n){for(var i=t[e];i[n];)n++;return n};for(e.splice(0,e.length),o=0,l=f.length;l>o;o++)e.push([]);for(o=0,l=f.length;l>o;o++)for(i=f[o],c=0,r=i.firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(d=1*r.getAttribute("colspan"),h=1*r.getAttribute("rowspan"),d=d&&0!==d&&1!==d?d:1,h=h&&0!==h&&1!==h?h:1,u=m(e,o,c),p=1===d?!0:!1,a=0;d>a;a++)for(s=0;h>s;s++)e[o+s][u+a]={cell:r,unique:p},e[o+s].nTr=i;r=r.nextSibling}}function H(t,e,n){var i=[];n||(n=t.aoHeader,e&&(n=[],N(n,e)));for(var r=0,o=n.length;o>r;r++)for(var s=0,a=n[r].length;a>s;s++)!n[r][s].unique||i[s]&&t.bSortCellsTop||(i[s]=n[r][s].cell);return i}function W(e,n,i){if(Mt(e,"aoServerParams","serverParams",[n]),n&&t.isArray(n)){var r={},o=/(.*?)\[\]$/;t.each(n,function(t,e){var n=e.name.match(o);if(n){var i=n[0];r[i]||(r[i]=[]),r[i].push(e.value)}else r[e.name]=e.value}),n=r}var s,a=e.ajax,l=e.oInstance,u=function(t){Mt(e,null,"xhr",[e,t,e.jqXHR]),i(t)};if(t.isPlainObject(a)&&a.data){s=a.data;var c=t.isFunction(s)?s(n,e):s;n=t.isFunction(s)&&c?c:t.extend(!0,n,c),delete a.data}var d={data:n,success:function(t){var n=t.error||t.sError;n&&Ot(e,0,n),e.json=t,u(t)},dataType:"json",cache:!1,type:e.sServerMethod,error:function(n,i,r){var o=Mt(e,null,"xhr",[e,null,e.jqXHR]);-1===t.inArray(!0,o)&&("parsererror"==i?Ot(e,0,"Invalid JSON response",1):4===n.readyState&&Ot(e,0,"Ajax error",7)),ft(e,!1)}};e.oAjaxData=n,Mt(e,null,"preXhr",[e,n]),e.fnServerData?e.fnServerData.call(l,e.sAjaxSource,t.map(n,function(t,e){return{name:e,value:t}}),u,e):e.sAjaxSource||"string"==typeof a?e.jqXHR=t.ajax(t.extend(d,{url:a||e.sAjaxSource})):t.isFunction(a)?e.jqXHR=a.call(l,n,u,e):(e.jqXHR=t.ajax(t.extend(d,a)),a.data=s)}function B(t){return t.bAjaxDataGet?(t.iDraw++,ft(t,!0),W(t,U(t),function(e){V(t,e)}),!1):!0}function U(e){var n,i,r,o,s=e.aoColumns,a=s.length,l=e.oFeatures,u=e.oPreviousSearch,c=e.aoPreSearchCols,d=[],h=Tt(e),p=e._iDisplayStart,f=l.bPaginate!==!1?e._iDisplayLength:-1,m=function(t,e){d.push({name:t,value:e})};m("sEcho",e.iDraw),m("iColumns",a),m("sColumns",ce(s,"sName").join(",")),m("iDisplayStart",p),m("iDisplayLength",f);var g={draw:e.iDraw,columns:[],order:[],start:p,length:f,search:{value:u.sSearch,regex:u.bRegex}};for(n=0;a>n;n++)r=s[n],o=c[n],i="function"==typeof r.mData?"function":r.mData,g.columns.push({data:i,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:o.sSearch,regex:o.bRegex}}),m("mDataProp_"+n,i),l.bFilter&&(m("sSearch_"+n,o.sSearch),m("bRegex_"+n,o.bRegex),m("bSearchable_"+n,r.bSearchable)),l.bSort&&m("bSortable_"+n,r.bSortable);l.bFilter&&(m("sSearch",u.sSearch),m("bRegex",u.bRegex)),l.bSort&&(t.each(h,function(t,e){g.order.push({column:e.col,dir:e.dir}),m("iSortCol_"+t,e.col),m("sSortDir_"+t,e.dir)}),m("iSortingCols",h.length));var v=Vt.ext.legacy.ajax;return null===v?e.sAjaxSource?d:g:v?d:g}function V(t,e){var n=function(t,n){return e[t]!==i?e[t]:e[n]},r=Y(t,e),o=n("sEcho","draw"),s=n("iTotalRecords","recordsTotal"),a=n("iTotalDisplayRecords","recordsFiltered");if(o){if(1*o<t.iDraw)return;t.iDraw=1*o}P(t),t._iRecordsTotal=parseInt(s,10),t._iRecordsDisplay=parseInt(a,10);for(var l=0,u=r.length;u>l;l++)w(t,r[l]);t.aiDisplay=t.aiDisplayMaster.slice(),t.bAjaxDataGet=!1,R(t),t._bInitComplete||lt(t,e),t.bAjaxDataGet=!0,ft(t,!1)}function Y(e,n){var r=t.isPlainObject(e.ajax)&&e.ajax.dataSrc!==i?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===r?n.aaData||n[r]:""!==r?E(r)(n):n}function X(e){var i=e.oClasses,r=e.sTableId,o=e.oLanguage,s=e.oPreviousSearch,a=e.aanFeatures,l='<input type="search" class="'+i.sFilterInput+'"/>',u=o.sSearch;u=u.match(/_INPUT_/)?u.replace("_INPUT_",l):u+l;var c=t("<div/>",{id:a.f?null:r+"_filter","class":i.sFilter}).append(t("<label/>").append(u)),d=function(){var t=(a.f,this.value?this.value:"");t!=s.sSearch&&(G(e,{sSearch:t,bRegex:s.bRegex,bSmart:s.bSmart,bCaseInsensitive:s.bCaseInsensitive}),e._iDisplayStart=0,R(e))},h=null!==e.searchDelay?e.searchDelay:"ssp"===Ht(e)?400:0,p=t("input",c).val(s.sSearch).attr("placeholder",o.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT",h?bt(d,h):d).bind("keypress.DT",function(t){return 13==t.keyCode?!1:void 0}).attr("aria-controls",r);return t(e.nTable).on("search.dt.DT",function(t,i){if(e===i)try{p[0]!==n.activeElement&&p.val(s.sSearch)}catch(r){}}),c[0]}function G(t,e,n){var r=t.oPreviousSearch,o=t.aoPreSearchCols,s=function(t){r.sSearch=t.sSearch,r.bRegex=t.bRegex,r.bSmart=t.bSmart,r.bCaseInsensitive=t.bCaseInsensitive},a=function(t){return t.bEscapeRegex!==i?!t.bEscapeRegex:t.bRegex};if(y(t),"ssp"!=Ht(t)){K(t,e.sSearch,n,a(e),e.bSmart,e.bCaseInsensitive),s(e);for(var l=0;l<o.length;l++)Q(t,o[l].sSearch,l,a(o[l]),o[l].bSmart,o[l].bCaseInsensitive);J(t)}else s(e);t.bFiltered=!0,Mt(t,null,"search",[t])}function J(e){for(var n,i,r=Vt.ext.search,o=e.aiDisplay,s=0,a=r.length;a>s;s++){for(var l=[],u=0,c=o.length;c>u;u++)i=o[u],n=e.aoData[i],r[s](e,n._aFilterData,i,n._aData,u)&&l.push(i);o.length=0,t.merge(o,l)}}function Q(t,e,n,i,r,o){if(""!==e)for(var s,a=t.aiDisplay,l=Z(e,i,r,o),u=a.length-1;u>=0;u--)s=t.aoData[a[u]]._aFilterData[n],l.test(s)||a.splice(u,1)}function K(t,e,n,i,r,o){var s,a,l,u=Z(e,i,r,o),c=t.oPreviousSearch.sSearch,d=t.aiDisplayMaster;if(0!==Vt.ext.search.length&&(n=!0),a=et(t),e.length<=0)t.aiDisplay=d.slice();else for((a||n||c.length>e.length||0!==e.indexOf(c)||t.bSorted)&&(t.aiDisplay=d.slice()),s=t.aiDisplay,l=s.length-1;l>=0;l--)u.test(t.aoData[s[l]]._sFilterRow)||s.splice(l,1)}function Z(e,n,i,r){if(e=n?e:tt(e),i){var o=t.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(t){if('"'===t.charAt(0)){var e=t.match(/^"(.*)"$/);t=e?e[1]:t}return t.replace('"',"")});e="^(?=.*?"+o.join(")(?=.*?")+").*$"}return new RegExp(e,r?"i":"")}function tt(t){return t.replace(ne,"\\$1")}function et(t){var e,n,i,r,o,s,a,l,u=t.aoColumns,c=Vt.ext.type.search,d=!1;for(n=0,r=t.aoData.length;r>n;n++)if(l=t.aoData[n],!l._aFilterData){for(s=[],i=0,o=u.length;o>i;i++)e=u[i],e.bSearchable?(a=T(t,n,i,"filter"),c[e.sType]&&(a=c[e.sType](a)),null===a&&(a=""),"string"!=typeof a&&a.toString&&(a=a.toString())):a="",a.indexOf&&-1!==a.indexOf("&")&&(be.innerHTML=a,a=we?be.textContent:be.innerText),a.replace&&(a=a.replace(/[\r\n]/g,"")),s.push(a);l._aFilterData=s,l._sFilterRow=s.join("  "),d=!0}return d}function nt(t){return{search:t.sSearch,smart:t.bSmart,regex:t.bRegex,caseInsensitive:t.bCaseInsensitive}}function it(t){return{sSearch:t.search,bSmart:t.smart,bRegex:t.regex,bCaseInsensitive:t.caseInsensitive}}function rt(e){var n=e.sTableId,i=e.aanFeatures.i,r=t("<div/>",{"class":e.oClasses.sInfo,id:i?null:n+"_info"});return i||(e.aoDrawCallback.push({fn:ot,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),t(e.nTable).attr("aria-describedby",n+"_info")),r[0]}function ot(e){var n=e.aanFeatures.i;if(0!==n.length){var i=e.oLanguage,r=e._iDisplayStart+1,o=e.fnDisplayEnd(),s=e.fnRecordsTotal(),a=e.fnRecordsDisplay(),l=a?i.sInfo:i.sInfoEmpty;a!==s&&(l+=" "+i.sInfoFiltered),l+=i.sInfoPostFix,l=st(e,l);var u=i.fnInfoCallback;null!==u&&(l=u.call(e.oInstance,e,r,o,s,a,l)),t(n).html(l)}}function st(t,e){var n=t.fnFormatNumber,i=t._iDisplayStart+1,r=t._iDisplayLength,o=t.fnRecordsDisplay(),s=-1===r;return e.replace(/_START_/g,n.call(t,i)).replace(/_END_/g,n.call(t,t.fnDisplayEnd())).replace(/_MAX_/g,n.call(t,t.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(t,o)).replace(/_PAGE_/g,n.call(t,s?1:Math.ceil(i/r))).replace(/_PAGES_/g,n.call(t,s?1:Math.ceil(o/r)))}function at(t){var e,n,i,r=t.iInitDisplayStart,o=t.aoColumns,s=t.oFeatures,a=t.bDeferLoading;if(!t.bInitialised)return void setTimeout(function(){at(t)},200);for(F(t),z(t),j(t,t.aoHeader),j(t,t.aoFooter),ft(t,!0),s.bAutoWidth&&yt(t),e=0,n=o.length;n>e;e++)i=o[e],i.sWidth&&(i.nTh.style.width=xt(i.sWidth));Mt(t,null,"preInit",[t]),M(t);var l=Ht(t);("ssp"!=l||a)&&("ajax"==l?W(t,[],function(n){var i=Y(t,n);for(e=0;e<i.length;e++)w(t,i[e]);t.iInitDisplayStart=r,M(t),ft(t,!1),lt(t,n)},t):(ft(t,!1),lt(t)))}function lt(t,e){t._bInitComplete=!0,(e||t.oInit.aaData)&&p(t),Mt(t,null,"plugin-init",[t,e]),Mt(t,"aoInitComplete","init",[t,e])}function ut(t,e){var n=parseInt(e,10);t._iDisplayLength=n,Ft(t),Mt(t,null,"length",[t,n])}function ct(e){for(var n=e.oClasses,i=e.sTableId,r=e.aLengthMenu,o=t.isArray(r[0]),s=o?r[0]:r,a=o?r[1]:r,l=t("<select/>",{name:i+"_length","aria-controls":i,"class":n.sLengthSelect}),u=0,c=s.length;c>u;u++)l[0][u]=new Option(a[u],s[u]);var d=t("<div><label/></div>").addClass(n.sLength);return e.aanFeatures.l||(d[0].id=i+"_length"),d.children().append(e.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),t("select",d).val(e._iDisplayLength).bind("change.DT",function(n){ut(e,t(this).val()),R(e)}),t(e.nTable).bind("length.dt.DT",function(n,i,r){e===i&&t("select",d).val(r)}),d[0]}function dt(e){var n=e.sPaginationType,i=Vt.ext.pager[n],r="function"==typeof i,o=function(t){R(t)},s=t("<div/>").addClass(e.oClasses.sPaging+n)[0],a=e.aanFeatures;return r||i.fnInit(e,s,o),a.p||(s.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(t){if(r){var e,n,s=t._iDisplayStart,l=t._iDisplayLength,u=t.fnRecordsDisplay(),c=-1===l,d=c?0:Math.ceil(s/l),h=c?1:Math.ceil(u/l),p=i(d,h);for(e=0,n=a.p.length;n>e;e++)Nt(t,"pageButton")(t,a.p[e],e,p,d,h)}else i.fnUpdate(t,o)},sName:"pagination"})),s}function ht(t,e,n){var i=t._iDisplayStart,r=t._iDisplayLength,o=t.fnRecordsDisplay();0===o||-1===r?i=0:"number"==typeof e?(i=e*r,i>o&&(i=0)):"first"==e?i=0:"previous"==e?(i=r>=0?i-r:0,0>i&&(i=0)):"next"==e?o>i+r&&(i+=r):"last"==e?i=Math.floor((o-1)/r)*r:Ot(t,0,"Unknown paging action: "+e,5);var s=t._iDisplayStart!==i;return t._iDisplayStart=i,s&&(Mt(t,null,"page",[t]),n&&R(t)),s}function pt(e){return t("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing","class":e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function ft(e,n){e.oFeatures.bProcessing&&t(e.aanFeatures.r).css("display",n?"block":"none"),Mt(e,null,"processing",[e,n])}function mt(e){var n=t(e.nTable);n.attr("role","grid");var i=e.oScroll;if(""===i.sX&&""===i.sY)return e.nTable;var r=i.sX,o=i.sY,s=e.oClasses,a=n.children("caption"),l=a.length?a[0]._captionSide:null,u=t(n[0].cloneNode(!1)),c=t(n[0].cloneNode(!1)),d=n.children("tfoot"),h="<div/>",p=function(t){return t?xt(t):null};d.length||(d=null);var f=t(h,{"class":s.sScrollWrapper}).append(t(h,{"class":s.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?p(r):"100%"}).append(t(h,{"class":s.sScrollHeadInner}).css({"box-sizing":"content-box",width:i.sXInner||"100%"}).append(u.removeAttr("id").css("margin-left",0).append("top"===l?a:null).append(n.children("thead"))))).append(t(h,{"class":s.sScrollBody}).css({position:"relative",overflow:"auto",width:p(r)}).append(n));d&&f.append(t(h,{"class":s.sScrollFoot}).css({overflow:"hidden",border:0,width:r?p(r):"100%"}).append(t(h,{"class":s.sScrollFootInner}).append(c.removeAttr("id").css("margin-left",0).append("bottom"===l?a:null).append(n.children("tfoot")))));var m=f.children(),g=m[0],v=m[1],y=d?m[2]:null;return r&&t(v).on("scroll.DT",function(t){var e=this.scrollLeft;g.scrollLeft=e,d&&(y.scrollLeft=e)}),t(v).css(o&&i.bCollapse?"max-height":"height",o),e.nScrollHead=g,e.nScrollBody=v,e.nScrollFoot=y,e.aoDrawCallback.push({fn:gt,sName:"scrolling"}),f[0]}function gt(e){var n,r,o,s,a,l,u,c,d,h=e.oScroll,m=h.sX,g=h.sXInner,v=h.sY,y=h.iBarWidth,b=t(e.nScrollHead),w=b[0].style,S=b.children("div"),_=S[0].style,x=S.children("table"),T=e.nScrollBody,C=t(T),D=T.style,E=t(e.nScrollFoot),A=E.children("div"),I=A.children("table"),P=t(e.nTHead),k=t(e.nTable),L=k[0],$=L.style,O=e.nTFoot?t(e.nTFoot):null,q=e.oBrowser,z=q.bScrollOversize,j=[],R=[],M=[],F=function(t){var e=t.style;e.paddingTop="0",e.paddingBottom="0",e.borderTopWidth="0",e.borderBottomWidth="0",e.height=0},N=T.scrollHeight>T.clientHeight;if(e.scrollBarVis!==N&&e.scrollBarVis!==i)return e.scrollBarVis=N,void p(e);e.scrollBarVis=N,k.children("thead, tfoot").remove(),a=P.clone().prependTo(k),n=P.find("tr"),o=a.find("tr"),a.find("th, td").removeAttr("tabindex"),O&&(l=O.clone().prependTo(k),r=O.find("tr"),s=l.find("tr")),m||(D.width="100%",b[0].style.width="100%"),t.each(H(e,a),function(t,n){u=f(e,t),n.style.width=e.aoColumns[u].sWidth}),O&&vt(function(t){t.style.width=""},s),d=k.outerWidth(),""===m?($.width="100%",z&&(k.find("tbody").height()>T.offsetHeight||"scroll"==C.css("overflow-y"))&&($.width=xt(k.outerWidth()-y)),d=k.outerWidth()):""!==g&&($.width=xt(g),d=k.outerWidth()),vt(F,o),vt(function(e){M.push(e.innerHTML),j.push(xt(t(e).css("width")))},o),vt(function(t,e){t.style.width=j[e]},n),t(o).height(0),O&&(vt(F,s),vt(function(e){R.push(xt(t(e).css("width")))},s),vt(function(t,e){t.style.width=R[e]},r),t(s).height(0)),vt(function(t,e){t.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+M[e]+"</div>",t.style.width=j[e]},o),O&&vt(function(t,e){t.innerHTML="",t.style.width=R[e]},s),k.outerWidth()<d?(c=T.scrollHeight>T.offsetHeight||"scroll"==C.css("overflow-y")?d+y:d,z&&(T.scrollHeight>T.offsetHeight||"scroll"==C.css("overflow-y"))&&($.width=xt(c-y)),(""===m||""!==g)&&Ot(e,1,"Possible column misalignment",6)):c="100%",D.width=xt(c),w.width=xt(c),O&&(e.nScrollFoot.style.width=xt(c)),v||z&&(D.height=xt(L.offsetHeight+y));var W=k.outerWidth();x[0].style.width=xt(W),_.width=xt(W);var B=k.height()>T.clientHeight||"scroll"==C.css("overflow-y"),U="padding"+(q.bScrollbarLeft?"Left":"Right");_[U]=B?y+"px":"0px",O&&(I[0].style.width=xt(W),A[0].style.width=xt(W),A[0].style[U]=B?y+"px":"0px"),C.scroll(),!e.bSorted&&!e.bFiltered||e._drawHold||(T.scrollTop=0)}function vt(t,e,n){for(var i,r,o=0,s=0,a=e.length;a>s;){for(i=e[s].firstChild,r=n?n[s].firstChild:null;i;)1===i.nodeType&&(n?t(i,r,o):t(i,o),o++),i=i.nextSibling,r=n?r.nextSibling:null;s++}}function yt(n){var i,r,o,s=n.nTable,a=n.aoColumns,l=n.oScroll,u=l.sY,c=l.sX,d=l.sXInner,h=a.length,m=v(n,"bVisible"),y=t("th",n.nTHead),b=s.getAttribute("width"),w=s.parentNode,S=!1,_=n.oBrowser,x=_.bScrollOversize,T=s.style.width;for(T&&-1!==T.indexOf("%")&&(b=T),i=0;i<m.length;i++)r=a[m[i]],null!==r.sWidth&&(r.sWidth=wt(r.sWidthOrig,w),S=!0);if(x||!S&&!c&&!u&&h==g(n)&&h==y.length)for(i=0;h>i;i++){var C=f(n,i);null!==C&&(a[C].sWidth=xt(y.eq(i).width()))}else{var D=t(s).clone().css("visibility","hidden").removeAttr("id");D.find("tbody tr").remove();var E=t("<tr/>").appendTo(D.find("tbody"));for(D.find("thead, tfoot").remove(),D.append(t(n.nTHead).clone()).append(t(n.nTFoot).clone()),D.find("tfoot th, tfoot td").css("width",""),y=H(n,D.find("thead")[0]),i=0;i<m.length;i++)r=a[m[i]],y[i].style.width=null!==r.sWidthOrig&&""!==r.sWidthOrig?xt(r.sWidthOrig):"",r.sWidthOrig&&c&&t(y[i]).append(t("<div/>").css({width:r.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(n.aoData.length)for(i=0;i<m.length;i++)o=m[i],r=a[o],t(St(n,o)).clone(!1).append(r.sContentPadding).appendTo(E);var A=t("<div/>").css(c||u?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(D).appendTo(w);c&&d?D.width(d):c?(D.css("width","auto"),D.removeAttr("width"),D.width()<w.clientWidth&&b&&D.width(w.clientWidth)):u?D.width(w.clientWidth):b&&D.width(b);var I=0;for(i=0;i<m.length;i++){var P=t(y[i]),k=P.outerWidth()-P.width(),L=_.bBounding?Math.ceil(y[i].getBoundingClientRect().width):P.outerWidth();I+=L,a[m[i]].sWidth=xt(L-k)}s.style.width=xt(I),A.remove()}if(b&&(s.style.width=xt(b)),(b||c)&&!n._reszEvt){var $=function(){t(e).bind("resize.DT-"+n.sInstance,bt(function(){p(n)}))};x?setTimeout($,1e3):$(),n._reszEvt=!0}}function bt(t,e){var n,r,o=e!==i?e:200;return function(){var e=this,s=+new Date,a=arguments;n&&n+o>s?(clearTimeout(r),r=setTimeout(function(){n=i,t.apply(e,a)},o)):(n=s,t.apply(e,a))}}function wt(e,i){if(!e)return 0;var r=t("<div/>").css("width",xt(e)).appendTo(i||n.body),o=r[0].offsetWidth;return r.remove(),o}function St(e,n){var i=_t(e,n);if(0>i)return null;var r=e.aoData[i];return r.nTr?r.anCells[n]:t("<td/>").html(T(e,i,n,"display"))[0]}function _t(t,e){for(var n,i=-1,r=-1,o=0,s=t.aoData.length;s>o;o++)n=T(t,o,e,"display")+"",n=n.replace(Se,""),n=n.replace(/&nbsp;/g," "),n.length>i&&(i=n.length,r=o);return r}function xt(t){return null===t?"0px":"number"==typeof t?0>t?"0px":t+"px":t.match(/\d$/)?t+"px":t}function Tt(e){var n,r,o,s,a,l,u,c=[],d=e.aoColumns,h=e.aaSortingFixed,p=t.isPlainObject(h),f=[],m=function(e){e.length&&!t.isArray(e[0])?f.push(e):t.merge(f,e)};for(t.isArray(h)&&m(h),p&&h.pre&&m(h.pre),m(e.aaSorting),p&&h.post&&m(h.post),n=0;n<f.length;n++)for(u=f[n][0],s=d[u].aDataSort,r=0,o=s.length;o>r;r++)a=s[r],l=d[a].sType||"string",f[n]._idx===i&&(f[n]._idx=t.inArray(f[n][1],d[a].asSorting)),c.push({src:u,col:a,dir:f[n][1],index:f[n]._idx,type:l,formatter:Vt.ext.type.order[l+"-pre"]});return c}function Ct(t){var e,n,i,r,o,s=[],a=Vt.ext.type.order,l=t.aoData,u=(t.aoColumns,0),c=t.aiDisplayMaster;for(y(t),o=Tt(t),e=0,n=o.length;n>e;e++)r=o[e],r.formatter&&u++,Pt(t,r.col);if("ssp"!=Ht(t)&&0!==o.length){for(e=0,i=c.length;i>e;e++)s[c[e]]=e;u===o.length?c.sort(function(t,e){var n,i,r,a,u,c=o.length,d=l[t]._aSortData,h=l[e]._aSortData;for(r=0;c>r;r++)if(u=o[r],n=d[u.col],i=h[u.col],a=i>n?-1:n>i?1:0,0!==a)return"asc"===u.dir?a:-a;return n=s[t],i=s[e],i>n?-1:n>i?1:0}):c.sort(function(t,e){var n,i,r,u,c,d,h=o.length,p=l[t]._aSortData,f=l[e]._aSortData;for(r=0;h>r;r++)if(c=o[r],n=p[c.col],i=f[c.col],d=a[c.type+"-"+c.dir]||a["string-"+c.dir],u=d(n,i),0!==u)return u;return n=s[t],i=s[e],i>n?-1:n>i?1:0})}t.bSorted=!0}function Dt(t){for(var e,n,i=t.aoColumns,r=Tt(t),o=t.oLanguage.oAria,s=0,a=i.length;a>s;s++){var l=i[s],u=l.asSorting,c=l.sTitle.replace(/<.*?>/g,""),d=l.nTh;d.removeAttribute("aria-sort"),l.bSortable?(r.length>0&&r[0].col==s?(d.setAttribute("aria-sort","asc"==r[0].dir?"ascending":"descending"),n=u[r[0].index+1]||u[0]):n=u[0],e=c+("asc"===n?o.sSortAscending:o.sSortDescending)):e=c,d.setAttribute("aria-label",e)}}function Et(e,n,r,o){var s,a=e.aoColumns[n],l=e.aaSorting,u=a.asSorting,c=function(e,n){var r=e._idx;return r===i&&(r=t.inArray(e[1],u)),r+1<u.length?r+1:n?null:0};if("number"==typeof l[0]&&(l=e.aaSorting=[l]),r&&e.oFeatures.bSortMulti){var d=t.inArray(n,ce(l,"0"));-1!==d?(s=c(l[d],!0),null===s&&1===l.length&&(s=0),null===s?l.splice(d,1):(l[d][1]=u[s],l[d]._idx=s)):(l.push([n,u[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==n?(s=c(l[0]),l.length=1,l[0][1]=u[s],l[0]._idx=s):(l.length=0,l.push([n,u[0]]),l[0]._idx=0);M(e),"function"==typeof o&&o(e)}function At(t,e,n,i){var r=t.aoColumns[n];jt(e,{},function(e){r.bSortable!==!1&&(t.oFeatures.bProcessing?(ft(t,!0),setTimeout(function(){Et(t,n,e.shiftKey,i),"ssp"!==Ht(t)&&ft(t,!1)},0)):Et(t,n,e.shiftKey,i))})}function It(e){var n,i,r,o=e.aLastSort,s=e.oClasses.sSortColumn,a=Tt(e),l=e.oFeatures;if(l.bSort&&l.bSortClasses){for(n=0,i=o.length;i>n;n++)r=o[n].src,t(ce(e.aoData,"anCells",r)).removeClass(s+(2>n?n+1:3));for(n=0,i=a.length;i>n;n++)r=a[n].src,t(ce(e.aoData,"anCells",r)).addClass(s+(2>n?n+1:3))}e.aLastSort=a}function Pt(t,e){var n,i=t.aoColumns[e],r=Vt.ext.order[i.sSortDataType];r&&(n=r.call(t.oInstance,t,e,m(t,e)));for(var o,s,a=Vt.ext.type.order[i.sType+"-pre"],l=0,u=t.aoData.length;u>l;l++)o=t.aoData[l],o._aSortData||(o._aSortData=[]),(!o._aSortData[e]||r)&&(s=r?n[l]:T(t,l,e,"sort"),o._aSortData[e]=a?a(s):s)}function kt(e){if(e.oFeatures.bStateSave&&!e.bDestroying){var n={time:+new Date,start:e._iDisplayStart,length:e._iDisplayLength,order:t.extend(!0,[],e.aaSorting),search:nt(e.oPreviousSearch),columns:t.map(e.aoColumns,function(t,n){return{visible:t.bVisible,search:nt(e.aoPreSearchCols[n])}})};Mt(e,"aoStateSaveParams","stateSaveParams",[e,n]),e.oSavedState=n,e.fnStateSaveCallback.call(e.oInstance,e,n)}}function Lt(e,n){var r,o,s=e.aoColumns;if(e.oFeatures.bStateSave){var a=e.fnStateLoadCallback.call(e.oInstance,e);if(a&&a.time){var l=Mt(e,"aoStateLoadParams","stateLoadParams",[e,a]);if(-1===t.inArray(!1,l)){var u=e.iStateDuration;if(!(u>0&&a.time<+new Date-1e3*u)&&s.length===a.columns.length){for(e.oLoadedState=t.extend(!0,{},a),a.start!==i&&(e._iDisplayStart=a.start,e.iInitDisplayStart=a.start),a.length!==i&&(e._iDisplayLength=a.length),a.order!==i&&(e.aaSorting=[],t.each(a.order,function(t,n){e.aaSorting.push(n[0]>=s.length?[0,n[1]]:n)})),a.search!==i&&t.extend(e.oPreviousSearch,it(a.search)),r=0,o=a.columns.length;o>r;r++){var c=a.columns[r];c.visible!==i&&(s[r].bVisible=c.visible),c.search!==i&&t.extend(e.aoPreSearchCols[r],it(c.search))}Mt(e,"aoStateLoaded","stateLoaded",[e,a])}}}}}function $t(e){var n=Vt.settings,i=t.inArray(e,ce(n,"nTable"));return-1!==i?n[i]:null}function Ot(t,n,i,r){if(i="DataTables warning: "+(t?"table id="+t.sTableId+" - ":"")+i,r&&(i+=". For more information about this error, please see http://datatables.net/tn/"+r),n)e.console&&console.log&&console.log(i);else{var o=Vt.ext,s=o.sErrMode||o.errMode;if(t&&Mt(t,null,"error",[t,r,i]),"alert"==s)alert(i);else{if("throw"==s)throw new Error(i);"function"==typeof s&&s(t,r,i)}}}function qt(e,n,r,o){return t.isArray(r)?void t.each(r,function(i,r){t.isArray(r)?qt(e,n,r[0],r[1]):qt(e,n,r)}):(o===i&&(o=r),void(n[r]!==i&&(e[o]=n[r])))}function zt(e,n,i){var r;for(var o in n)n.hasOwnProperty(o)&&(r=n[o],t.isPlainObject(r)?(t.isPlainObject(e[o])||(e[o]={}),t.extend(!0,e[o],r)):i&&"data"!==o&&"aaData"!==o&&t.isArray(r)?e[o]=r.slice():e[o]=r);return e}function jt(e,n,i){t(e).bind("click.DT",n,function(t){e.blur(),i(t)}).bind("keypress.DT",n,function(t){13===t.which&&(t.preventDefault(),i(t))}).bind("selectstart.DT",function(){return!1})}function Rt(t,e,n,i){n&&t[e].push({fn:n,sName:i})}function Mt(e,n,i,r){var o=[];if(n&&(o=t.map(e[n].slice().reverse(),function(t,n){return t.fn.apply(e.oInstance,r)})),null!==i){var s=t.Event(i+".dt");t(e.nTable).trigger(s,r),o.push(s.result)}return o}function Ft(t){var e=t._iDisplayStart,n=t.fnDisplayEnd(),i=t._iDisplayLength;e>=n&&(e=n-i),e-=e%i,(-1===i||0>e)&&(e=0),t._iDisplayStart=e}function Nt(e,n){var i=e.renderer,r=Vt.ext.renderer[n];return t.isPlainObject(i)&&i[n]?r[i[n]]||r._:"string"==typeof i?r[i]||r._:r._}function Ht(t){return t.oFeatures.bServerSide?"ssp":t.ajax||t.sAjaxSource?"ajax":"dom"}function Wt(t,e){var n=[],i=Be.numbers_length,r=Math.floor(i/2);return i>=e?n=he(0,e):r>=t?(n=he(0,i-2),n.push("ellipsis"),n.push(e-1)):t>=e-1-r?(n=he(e-(i-2),e),n.splice(0,0,"ellipsis"),n.splice(0,0,0)):(n=he(t-r+2,t+r-1),n.push("ellipsis"),n.push(e-1),n.splice(0,0,"ellipsis"),n.splice(0,0,0)),n.DT_el="span",n}function Bt(e){t.each({num:function(t){return Ue(t,e)},"num-fmt":function(t){return Ue(t,e,ie)},"html-num":function(t){return Ue(t,e,Zt)},"html-num-fmt":function(t){return Ue(t,e,Zt,ie)}},function(t,n){Yt.type.order[t+e+"-pre"]=n,t.match(/^html\-/)&&(Yt.type.search[t+e]=Yt.type.search.html)})}function Ut(t){return function(){var e=[$t(this[Vt.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Vt.ext.internal[t].apply(this,e)}}var Vt,Yt,Xt,Gt,Jt,Qt={},Kt=/[\r\n]/g,Zt=/<.*?>/g,te=/^[\w\+\-]/,ee=/[\w\+\-]$/,ne=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),ie=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi,re=function(t){return t&&t!==!0&&"-"!==t?!1:!0},oe=function(t){var e=parseInt(t,10);return!isNaN(e)&&isFinite(t)?e:null},se=function(t,e){return Qt[e]||(Qt[e]=new RegExp(tt(e),"g")),"string"==typeof t&&"."!==e?t.replace(/\./g,"").replace(Qt[e],"."):t},ae=function(t,e,n){var i="string"==typeof t;return re(t)?!0:(e&&i&&(t=se(t,e)),n&&i&&(t=t.replace(ie,"")),!isNaN(parseFloat(t))&&isFinite(t))},le=function(t){return re(t)||"string"==typeof t},ue=function(t,e,n){if(re(t))return!0;var i=le(t);return i&&ae(fe(t),e,n)?!0:null},ce=function(t,e,n){var r=[],o=0,s=t.length;if(n!==i)for(;s>o;o++)t[o]&&t[o][e]&&r.push(t[o][e][n]);else for(;s>o;o++)t[o]&&r.push(t[o][e]);return r},de=function(t,e,n,r){var o=[],s=0,a=e.length;if(r!==i)for(;a>s;s++)t[e[s]][n]&&o.push(t[e[s]][n][r]);else for(;a>s;s++)o.push(t[e[s]][n]);return o},he=function(t,e){var n,r=[];e===i?(e=0,n=t):(n=e,e=t);for(var o=e;n>o;o++)r.push(o);return r},pe=function(t){for(var e=[],n=0,i=t.length;i>n;n++)t[n]&&e.push(t[n]);return e},fe=function(t){return t.replace(Zt,"")},me=function(t){var e,n,i,r=[],o=t.length,s=0;t:for(n=0;o>n;n++){for(e=t[n],i=0;s>i;i++)if(r[i]===e)continue t;r.push(e),s++}return r},ge=function(t,e,n){t[e]!==i&&(t[n]=t[e])},ve=/\[.*?\]$/,ye=/\(\)$/,be=t("<div>")[0],we=be.textContent!==i,Se=/<.*?>/g;Vt=function(e){this.$=function(t,e){return this.api(!0).$(t,e)},this._=function(t,e){return this.api(!0).rows(t,e).data()},this.api=function(t){return new Xt(t?$t(this[Yt.iApiIndex]):this)},this.fnAddData=function(e,n){var r=this.api(!0),o=t.isArray(e)&&(t.isArray(e[0])||t.isPlainObject(e[0]))?r.rows.add(e):r.row.add(e);return(n===i||n)&&r.draw(),o.flatten().toArray()},this.fnAdjustColumnSizing=function(t){var e=this.api(!0).columns.adjust(),n=e.settings()[0],r=n.oScroll;t===i||t?e.draw(!1):(""!==r.sX||""!==r.sY)&&gt(n)},this.fnClearTable=function(t){var e=this.api(!0).clear();(t===i||t)&&e.draw()},this.fnClose=function(t){this.api(!0).row(t).child.hide()},this.fnDeleteRow=function(t,e,n){var r=this.api(!0),o=r.rows(t),s=o.settings()[0],a=s.aoData[o[0][0]];return o.remove(),e&&e.call(this,s,a),(n===i||n)&&r.draw(),a},this.fnDestroy=function(t){this.api(!0).destroy(t)},this.fnDraw=function(t){this.api(!0).draw(t)},this.fnFilter=function(t,e,n,r,o,s){var a=this.api(!0);null===e||e===i?a.search(t,n,r,s):a.column(e).search(t,n,r,s),a.draw()},this.fnGetData=function(t,e){var n=this.api(!0);if(t!==i){var r=t.nodeName?t.nodeName.toLowerCase():"";return e!==i||"td"==r||"th"==r?n.cell(t,e).data():n.row(t).data()||null}return n.data().toArray()},this.fnGetNodes=function(t){var e=this.api(!0);return t!==i?e.row(t).node():e.rows().nodes().flatten().toArray()},this.fnGetPosition=function(t){var e=this.api(!0),n=t.nodeName.toUpperCase();if("TR"==n)return e.row(t).index();if("TD"==n||"TH"==n){var i=e.cell(t).index();return[i.row,i.columnVisible,i.column]}return null},this.fnIsOpen=function(t){return this.api(!0).row(t).child.isShown()},this.fnOpen=function(t,e,n){return this.api(!0).row(t).child(e,n).show().child()[0]},this.fnPageChange=function(t,e){var n=this.api(!0).page(t);(e===i||e)&&n.draw(!1)},this.fnSetColumnVis=function(t,e,n){var r=this.api(!0).column(t).visible(e);(n===i||n)&&r.columns.adjust().draw()},this.fnSettings=function(){return $t(this[Yt.iApiIndex])},this.fnSort=function(t){this.api(!0).order(t).draw()},this.fnSortListener=function(t,e,n){this.api(!0).order.listener(t,e,n)},this.fnUpdate=function(t,e,n,r,o){var s=this.api(!0);return n===i||null===n?s.row(e).data(t):s.cell(e,n).data(t),(o===i||o)&&s.columns.adjust(),(r===i||r)&&s.draw(),0},this.fnVersionCheck=Yt.fnVersionCheck;var n=this,r=e===i,c=this.length;r&&(e={}),this.oApi=this.internal=Yt.internal;for(var p in Vt.ext.internal)p&&(this[p]=Ut(p));return this.each(function(){var p,f={},m=c>1?zt(f,e,!0):e,g=0,v=this.getAttribute("id"),y=!1,_=Vt.defaults,x=t(this);if("table"!=this.nodeName.toLowerCase())return void Ot(null,0,"Non-table node initialisation ("+this.nodeName+")",2);a(_),l(_.column),o(_,_,!0),o(_.column,_.column,!0),o(_,t.extend(m,x.data()));var T=Vt.settings;for(g=0,p=T.length;p>g;g++){var C=T[g];if(C.nTable==this||C.nTHead.parentNode==this||C.nTFoot&&C.nTFoot.parentNode==this){var D=m.bRetrieve!==i?m.bRetrieve:_.bRetrieve,A=m.bDestroy!==i?m.bDestroy:_.bDestroy;if(r||D)return C.oInstance;if(A){C.oInstance.fnDestroy();break}return void Ot(C,0,"Cannot reinitialise DataTable",3)}if(C.sTableId==this.id){T.splice(g,1);break}}(null===v||""===v)&&(v="DataTables_Table_"+Vt.ext._unique++,this.id=v);var I=t.extend(!0,{},Vt.models.oSettings,{sDestroyWidth:x[0].style.width,sInstance:v,sTableId:v});I.nTable=this,I.oApi=n.internal,I.oInit=m,T.push(I),I.oInstance=1===n.length?n:x.dataTable(),a(m),m.oLanguage&&s(m.oLanguage),m.aLengthMenu&&!m.iDisplayLength&&(m.iDisplayLength=t.isArray(m.aLengthMenu[0])?m.aLengthMenu[0][0]:m.aLengthMenu[0]),m=zt(t.extend(!0,{},_),m),qt(I.oFeatures,m,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),qt(I,m,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),qt(I.oScroll,m,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),qt(I.oLanguage,m,"fnInfoCallback"),Rt(I,"aoDrawCallback",m.fnDrawCallback,"user"),Rt(I,"aoServerParams",m.fnServerParams,"user"),Rt(I,"aoStateSaveParams",m.fnStateSaveParams,"user"),Rt(I,"aoStateLoadParams",m.fnStateLoadParams,"user"),Rt(I,"aoStateLoaded",m.fnStateLoaded,"user"),Rt(I,"aoRowCallback",m.fnRowCallback,"user"),Rt(I,"aoRowCreatedCallback",m.fnCreatedRow,"user"),Rt(I,"aoHeaderCallback",m.fnHeaderCallback,"user"),Rt(I,"aoFooterCallback",m.fnFooterCallback,"user"),Rt(I,"aoInitComplete",m.fnInitComplete,"user"),Rt(I,"aoPreDrawCallback",m.fnPreDrawCallback,"user"),I.rowIdFn=E(m.rowId),u(I);var P=I.oClasses;if(m.bJQueryUI?(t.extend(P,Vt.ext.oJUIClasses,m.oClasses),m.sDom===_.sDom&&"lfrtip"===_.sDom&&(I.sDom='<"H"lfr>t<"F"ip>'),I.renderer?t.isPlainObject(I.renderer)&&!I.renderer.header&&(I.renderer.header="jqueryui"):I.renderer="jqueryui"):t.extend(P,Vt.ext.classes,m.oClasses),x.addClass(P.sTable),I.iInitDisplayStart===i&&(I.iInitDisplayStart=m.iDisplayStart,I._iDisplayStart=m.iDisplayStart),null!==m.iDeferLoading){I.bDeferLoading=!0;var k=t.isArray(m.iDeferLoading);I._iRecordsDisplay=k?m.iDeferLoading[0]:m.iDeferLoading,I._iRecordsTotal=k?m.iDeferLoading[1]:m.iDeferLoading}var L=I.oLanguage;t.extend(!0,L,m.oLanguage),""!==L.sUrl&&(t.ajax({dataType:"json",url:L.sUrl,success:function(e){s(e),o(_.oLanguage,e),t.extend(!0,L,e),at(I)},error:function(){at(I)}}),y=!0),null===m.asStripeClasses&&(I.asStripeClasses=[P.sStripeOdd,P.sStripeEven]);var $=I.asStripeClasses,O=x.children("tbody").find("tr").eq(0);-1!==t.inArray(!0,t.map($,function(t,e){return O.hasClass(t)}))&&(t("tbody tr",this).removeClass($.join(" ")),I.asDestroyStripes=$.slice());var q,z=[],j=this.getElementsByTagName("thead");if(0!==j.length&&(N(I.aoHeader,j[0]),z=H(I)),null===m.aoColumns)for(q=[],g=0,p=z.length;p>g;g++)q.push(null);else q=m.aoColumns;for(g=0,p=q.length;p>g;g++)d(I,z?z[g]:null);if(b(I,m.aoColumnDefs,q,function(t,e){h(I,t,e)}),O.length){var R=function(t,e){return null!==t.getAttribute("data-"+e)?e:null};t(O[0]).children("th, td").each(function(t,e){var n=I.aoColumns[t];if(n.mData===t){var r=R(e,"sort")||R(e,"order"),o=R(e,"filter")||R(e,"search");
(null!==r||null!==o)&&(n.mData={_:t+".display",sort:null!==r?t+".@data-"+r:i,type:null!==r?t+".@data-"+r:i,filter:null!==o?t+".@data-"+o:i},h(I,t))}})}var M=I.oFeatures;if(m.bStateSave&&(M.bStateSave=!0,Lt(I,m),Rt(I,"aoDrawCallback",kt,"state_save")),m.aaSorting===i){var F=I.aaSorting;for(g=0,p=F.length;p>g;g++)F[g][1]=I.aoColumns[g].asSorting[0]}It(I),M.bSort&&Rt(I,"aoDrawCallback",function(){if(I.bSorted){var e=Tt(I),n={};t.each(e,function(t,e){n[e.src]=e.dir}),Mt(I,null,"order",[I,e,n]),Dt(I)}}),Rt(I,"aoDrawCallback",function(){(I.bSorted||"ssp"===Ht(I)||M.bDeferRender)&&It(I)},"sc");var W=x.children("caption").each(function(){this._captionSide=x.css("caption-side")}),B=x.children("thead");0===B.length&&(B=t("<thead/>").appendTo(this)),I.nTHead=B[0];var U=x.children("tbody");0===U.length&&(U=t("<tbody/>").appendTo(this)),I.nTBody=U[0];var V=x.children("tfoot");if(0===V.length&&W.length>0&&(""!==I.oScroll.sX||""!==I.oScroll.sY)&&(V=t("<tfoot/>").appendTo(this)),0===V.length||0===V.children().length?x.addClass(P.sNoFooter):V.length>0&&(I.nTFoot=V[0],N(I.aoFooter,I.nTFoot)),m.aaData)for(g=0;g<m.aaData.length;g++)w(I,m.aaData[g]);else(I.bDeferLoading||"dom"==Ht(I))&&S(I,t(I.nTBody).children("tr"));I.aiDisplay=I.aiDisplayMaster.slice(),I.bInitialised=!0,y===!1&&at(I)}),n=null,this};var _e=[],xe=Array.prototype,Te=function(e){var n,i,r=Vt.settings,o=t.map(r,function(t,e){return t.nTable});return e?e.nTable&&e.oApi?[e]:e.nodeName&&"table"===e.nodeName.toLowerCase()?(n=t.inArray(e,o),-1!==n?[r[n]]:null):e&&"function"==typeof e.settings?e.settings().toArray():("string"==typeof e?i=t(e):e instanceof t&&(i=e),i?i.map(function(e){return n=t.inArray(this,o),-1!==n?r[n]:null}).toArray():void 0):[]};Xt=function(e,n){if(!(this instanceof Xt))return new Xt(e,n);var i=[],r=function(t){var e=Te(t);e&&(i=i.concat(e))};if(t.isArray(e))for(var o=0,s=e.length;s>o;o++)r(e[o]);else r(e);this.context=me(i),n&&t.merge(this,n),this.selector={rows:null,cols:null,opts:null},Xt.extend(this,this,_e)},Vt.Api=Xt,t.extend(Xt.prototype,{any:function(){return 0!==this.count()},concat:xe.concat,context:[],count:function(){return this.flatten().length},each:function(t){for(var e=0,n=this.length;n>e;e++)t.call(this,this[e],e,this);return this},eq:function(t){var e=this.context;return e.length>t?new Xt(e[t],this[t]):null},filter:function(t){var e=[];if(xe.filter)e=xe.filter.call(this,t,this);else for(var n=0,i=this.length;i>n;n++)t.call(this,this[n],n,this)&&e.push(this[n]);return new Xt(this.context,e)},flatten:function(){var t=[];return new Xt(this.context,t.concat.apply(t,this.toArray()))},join:xe.join,indexOf:xe.indexOf||function(t,e){for(var n=e||0,i=this.length;i>n;n++)if(this[n]===t)return n;return-1},iterator:function(t,e,n,r){var o,s,a,l,u,c,d,h,p=[],f=this.context,m=this.selector;for("string"==typeof t&&(r=n,n=e,e=t,t=!1),s=0,a=f.length;a>s;s++){var g=new Xt(f[s]);if("table"===e)o=n.call(g,f[s],s),o!==i&&p.push(o);else if("columns"===e||"rows"===e)o=n.call(g,f[s],this[s],s),o!==i&&p.push(o);else if("column"===e||"column-rows"===e||"row"===e||"cell"===e)for(d=this[s],"column-rows"===e&&(c=Pe(f[s],m.opts)),l=0,u=d.length;u>l;l++)h=d[l],o="cell"===e?n.call(g,f[s],h.row,h.column,s,l):n.call(g,f[s],h,s,l,c),o!==i&&p.push(o)}if(p.length||r){var v=new Xt(f,t?p.concat.apply([],p):p),y=v.selector;return y.rows=m.rows,y.cols=m.cols,y.opts=m.opts,v}return this},lastIndexOf:xe.lastIndexOf||function(t,e){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(t){var e=[];if(xe.map)e=xe.map.call(this,t,this);else for(var n=0,i=this.length;i>n;n++)e.push(t.call(this,this[n],n));return new Xt(this.context,e)},pluck:function(t){return this.map(function(e){return e[t]})},pop:xe.pop,push:xe.push,reduce:xe.reduce||function(t,e){return c(this,t,e,0,this.length,1)},reduceRight:xe.reduceRight||function(t,e){return c(this,t,e,this.length-1,-1,-1)},reverse:xe.reverse,selector:null,shift:xe.shift,sort:xe.sort,splice:xe.splice,toArray:function(){return xe.slice.call(this)},to$:function(){return t(this)},toJQuery:function(){return t(this)},unique:function(){return new Xt(this.context,me(this))},unshift:xe.unshift}),Xt.extend=function(e,n,i){if(i.length&&n&&(n instanceof Xt||n.__dt_wrapper)){var r,o,s,a=function(t,e,n){return function(){var i=e.apply(t,arguments);return Xt.extend(i,i,n.methodExt),i}};for(r=0,o=i.length;o>r;r++)s=i[r],n[s.name]="function"==typeof s.val?a(e,s.val,s):t.isPlainObject(s.val)?{}:s.val,n[s.name].__dt_wrapper=!0,Xt.extend(e,n[s.name],s.propExt)}},Xt.register=Gt=function(e,n){if(t.isArray(e))for(var i=0,r=e.length;r>i;i++)Xt.register(e[i],n);else{var o,s,a,l,u=e.split("."),c=_e,d=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n].name===e)return t[n];return null};for(o=0,s=u.length;s>o;o++){l=-1!==u[o].indexOf("()"),a=l?u[o].replace("()",""):u[o];var h=d(c,a);h||(h={name:a,val:{},methodExt:[],propExt:[]},c.push(h)),o===s-1?h.val=n:c=l?h.methodExt:h.propExt}}},Xt.registerPlural=Jt=function(e,n,r){Xt.register(e,r),Xt.register(n,function(){var e=r.apply(this,arguments);return e===this?this:e instanceof Xt?e.length?t.isArray(e[0])?new Xt(e.context,e[0]):e[0]:i:e})};var Ce=function(e,n){if("number"==typeof e)return[n[e]];var i=t.map(n,function(t,e){return t.nTable});return t(i).filter(e).map(function(e){var r=t.inArray(this,i);return n[r]}).toArray()};Gt("tables()",function(t){return t?new Xt(Ce(t,this.context)):this}),Gt("table()",function(t){var e=this.tables(t),n=e.context;return n.length?new Xt(n[0]):e}),Jt("tables().nodes()","table().node()",function(){return this.iterator("table",function(t){return t.nTable},1)}),Jt("tables().body()","table().body()",function(){return this.iterator("table",function(t){return t.nTBody},1)}),Jt("tables().header()","table().header()",function(){return this.iterator("table",function(t){return t.nTHead},1)}),Jt("tables().footer()","table().footer()",function(){return this.iterator("table",function(t){return t.nTFoot},1)}),Jt("tables().containers()","table().container()",function(){return this.iterator("table",function(t){return t.nTableWrapper},1)}),Gt("draw()",function(t){return this.iterator("table",function(e){"page"===t?R(e):("string"==typeof t&&(t="full-hold"===t?!1:!0),M(e,t===!1))})}),Gt("page()",function(t){return t===i?this.page.info().page:this.iterator("table",function(e){ht(e,t)})}),Gt("page.info()",function(t){if(0===this.context.length)return i;var e=this.context[0],n=e._iDisplayStart,r=e.oFeatures.bPaginate?e._iDisplayLength:-1,o=e.fnRecordsDisplay(),s=-1===r;return{page:s?0:Math.floor(n/r),pages:s?1:Math.ceil(o/r),start:n,end:e.fnDisplayEnd(),length:r,recordsTotal:e.fnRecordsTotal(),recordsDisplay:o,serverSide:"ssp"===Ht(e)}}),Gt("page.len()",function(t){return t===i?0!==this.context.length?this.context[0]._iDisplayLength:i:this.iterator("table",function(e){ut(e,t)})});var De=function(t,e,n){if(n){var i=new Xt(t);i.one("draw",function(){n(i.ajax.json())})}if("ssp"==Ht(t))M(t,e);else{ft(t,!0);var r=t.jqXHR;r&&4!==r.readyState&&r.abort(),W(t,[],function(n){P(t);for(var i=Y(t,n),r=0,o=i.length;o>r;r++)w(t,i[r]);M(t,e),ft(t,!1)})}};Gt("ajax.json()",function(){var t=this.context;return t.length>0?t[0].json:void 0}),Gt("ajax.params()",function(){var t=this.context;return t.length>0?t[0].oAjaxData:void 0}),Gt("ajax.reload()",function(t,e){return this.iterator("table",function(n){De(n,e===!1,t)})}),Gt("ajax.url()",function(e){var n=this.context;return e===i?0===n.length?i:(n=n[0],n.ajax?t.isPlainObject(n.ajax)?n.ajax.url:n.ajax:n.sAjaxSource):this.iterator("table",function(n){t.isPlainObject(n.ajax)?n.ajax.url=e:n.ajax=e})}),Gt("ajax.url().load()",function(t,e){return this.iterator("table",function(n){De(n,e===!1,t)})});var Ee=function(e,n,r,o,s){var a,l,u,c,d,h,p=[],f=typeof n;for(n&&"string"!==f&&"function"!==f&&n.length!==i||(n=[n]),u=0,c=n.length;c>u;u++)for(l=n[u]&&n[u].split?n[u].split(","):[n[u]],d=0,h=l.length;h>d;d++)a=r("string"==typeof l[d]?t.trim(l[d]):l[d]),a&&a.length&&(p=p.concat(a));var m=Yt.selector[e];if(m.length)for(u=0,c=m.length;c>u;u++)p=m[u](o,s,p);return me(p)},Ae=function(e){return e||(e={}),e.filter&&e.search===i&&(e.search=e.filter),t.extend({search:"none",order:"current",page:"all"},e)},Ie=function(t){for(var e=0,n=t.length;n>e;e++)if(t[e].length>0)return t[0]=t[e],t[0].length=1,t.length=1,t.context=[t.context[e]],t;return t.length=0,t},Pe=function(e,n){var i,r,o,s=[],a=e.aiDisplay,l=e.aiDisplayMaster,u=n.search,c=n.order,d=n.page;if("ssp"==Ht(e))return"removed"===u?[]:he(0,l.length);if("current"==d)for(i=e._iDisplayStart,r=e.fnDisplayEnd();r>i;i++)s.push(a[i]);else if("current"==c||"applied"==c)s="none"==u?l.slice():"applied"==u?a.slice():t.map(l,function(e,n){return-1===t.inArray(e,a)?e:null});else if("index"==c||"original"==c)for(i=0,r=e.aoData.length;r>i;i++)"none"==u?s.push(i):(o=t.inArray(i,a),(-1===o&&"removed"==u||o>=0&&"applied"==u)&&s.push(i));return s},ke=function(e,n,r){var o=function(n){var o=oe(n);if(null!==o&&!r)return[o];var s=Pe(e,r);if(null!==o&&-1!==t.inArray(o,s))return[o];if(!n)return s;if("function"==typeof n)return t.map(s,function(t){var i=e.aoData[t];return n(t,i._aData,i.nTr)?t:null});var a=pe(de(e.aoData,s,"nTr"));if(n.nodeName&&-1!==t.inArray(n,a))return[n._DT_RowIndex];if("string"==typeof n&&"#"===n.charAt(0)){var l=e.aIds[n.replace(/^#/,"")];if(l!==i)return[l.idx]}return t(a).filter(n).map(function(){return this._DT_RowIndex}).toArray()};return Ee("row",n,o,e,r)};Gt("rows()",function(e,n){e===i?e="":t.isPlainObject(e)&&(n=e,e=""),n=Ae(n);var r=this.iterator("table",function(t){return ke(t,e,n)},1);return r.selector.rows=e,r.selector.opts=n,r}),Gt("rows().nodes()",function(){return this.iterator("row",function(t,e){return t.aoData[e].nTr||i},1)}),Gt("rows().data()",function(){return this.iterator(!0,"rows",function(t,e){return de(t.aoData,e,"_aData")},1)}),Jt("rows().cache()","row().cache()",function(t){return this.iterator("row",function(e,n){var i=e.aoData[n];return"search"===t?i._aFilterData:i._aSortData},1)}),Jt("rows().invalidate()","row().invalidate()",function(t){return this.iterator("row",function(e,n){L(e,n,t)})}),Jt("rows().indexes()","row().index()",function(){return this.iterator("row",function(t,e){return e},1)}),Jt("rows().ids()","row().id()",function(t){for(var e=[],n=this.context,i=0,r=n.length;r>i;i++)for(var o=0,s=this[i].length;s>o;o++){var a=n[i].rowIdFn(n[i].aoData[this[i][o]]._aData);e.push((t===!0?"#":"")+a)}return new Xt(n,e)}),Jt("rows().remove()","row().remove()",function(){var t=this;return this.iterator("row",function(e,n,r){var o,s,a,l,u,c,d=e.aoData,h=d[n];for(d.splice(n,1),o=0,s=d.length;s>o;o++)if(u=d[o],c=u.anCells,null!==u.nTr&&(u.nTr._DT_RowIndex=o),null!==c)for(a=0,l=c.length;l>a;a++)c[a]._DT_CellIndex.row=o;k(e.aiDisplayMaster,n),k(e.aiDisplay,n),k(t[r],n,!1),Ft(e);var p=e.rowIdFn(h._aData);p!==i&&delete e.aIds[p]}),this.iterator("table",function(t){for(var e=0,n=t.aoData.length;n>e;e++)t.aoData[e].idx=e}),this}),Gt("rows.add()",function(e){var n=this.iterator("table",function(t){var n,i,r,o=[];for(i=0,r=e.length;r>i;i++)n=e[i],n.nodeName&&"TR"===n.nodeName.toUpperCase()?o.push(S(t,n)[0]):o.push(w(t,n));return o},1),i=this.rows(-1);return i.pop(),t.merge(i,n),i}),Gt("row()",function(t,e){return Ie(this.rows(t,e))}),Gt("row().data()",function(t){var e=this.context;return t===i?e.length&&this.length?e[0].aoData[this[0]]._aData:i:(e[0].aoData[this[0]]._aData=t,L(e[0],this[0],"data"),this)}),Gt("row().node()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]].nTr||null:null}),Gt("row.add()",function(e){e instanceof t&&e.length&&(e=e[0]);var n=this.iterator("table",function(t){return e.nodeName&&"TR"===e.nodeName.toUpperCase()?S(t,e)[0]:w(t,e)});return this.row(n[0])});var Le=function(e,n,i,r){var o=[],s=function(n,i){if(t.isArray(n)||n instanceof t)for(var r=0,a=n.length;a>r;r++)s(n[r],i);else if(n.nodeName&&"tr"===n.nodeName.toLowerCase())o.push(n);else{var l=t("<tr><td/></tr>").addClass(i);t("td",l).addClass(i).html(n)[0].colSpan=g(e),o.push(l[0])}};s(i,r),n._details&&n._details.remove(),n._details=t(o),n._detailsShow&&n._details.insertAfter(n.nTr)},$e=function(t,e){var n=t.context;if(n.length){var r=n[0].aoData[e!==i?e:t[0]];r&&r._details&&(r._details.remove(),r._detailsShow=i,r._details=i)}},Oe=function(t,e){var n=t.context;if(n.length&&t.length){var i=n[0].aoData[t[0]];i._details&&(i._detailsShow=e,e?i._details.insertAfter(i.nTr):i._details.detach(),qe(n[0]))}},qe=function(t){var e=new Xt(t),n=".dt.DT_details",i="draw"+n,r="column-visibility"+n,o="destroy"+n,s=t.aoData;e.off(i+" "+r+" "+o),ce(s,"_details").length>0&&(e.on(i,function(n,i){t===i&&e.rows({page:"current"}).eq(0).each(function(t){var e=s[t];e._detailsShow&&e._details.insertAfter(e.nTr)})}),e.on(r,function(e,n,i,r){if(t===n)for(var o,a=g(n),l=0,u=s.length;u>l;l++)o=s[l],o._details&&o._details.children("td[colspan]").attr("colspan",a)}),e.on(o,function(n,i){if(t===i)for(var r=0,o=s.length;o>r;r++)s[r]._details&&$e(e,r)}))},ze="",je=ze+"row().child",Re=je+"()";Gt(Re,function(t,e){var n=this.context;return t===i?n.length&&this.length?n[0].aoData[this[0]]._details:i:(t===!0?this.child.show():t===!1?$e(this):n.length&&this.length&&Le(n[0],n[0].aoData[this[0]],t,e),this)}),Gt([je+".show()",Re+".show()"],function(t){return Oe(this,!0),this}),Gt([je+".hide()",Re+".hide()"],function(){return Oe(this,!1),this}),Gt([je+".remove()",Re+".remove()"],function(){return $e(this),this}),Gt(je+".isShown()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]]._detailsShow||!1:!1});var Me=/^(.+):(name|visIdx|visible)$/,Fe=function(t,e,n,i,r){for(var o=[],s=0,a=r.length;a>s;s++)o.push(T(t,r[s],e));return o},Ne=function(e,n,i){var r=e.aoColumns,o=ce(r,"sName"),s=ce(r,"nTh"),a=function(n){var a=oe(n);if(""===n)return he(r.length);if(null!==a)return[a>=0?a:r.length+a];if("function"==typeof n){var l=Pe(e,i);return t.map(r,function(t,i){return n(i,Fe(e,i,0,0,l),s[i])?i:null})}var u="string"==typeof n?n.match(Me):"";if(!u)return t(s).filter(n).map(function(){return t.inArray(this,s)}).toArray();switch(u[2]){case"visIdx":case"visible":var c=parseInt(u[1],10);if(0>c){var d=t.map(r,function(t,e){return t.bVisible?e:null});return[d[d.length+c]]}return[f(e,c)];case"name":return t.map(o,function(t,e){return t===u[1]?e:null})}};return Ee("column",n,a,e,i)},He=function(e,n,r,o){var s,a,l,u,c=e.aoColumns,d=c[n],h=e.aoData;if(r===i)return d.bVisible;if(d.bVisible!==r){if(r){var f=t.inArray(!0,ce(c,"bVisible"),n+1);for(a=0,l=h.length;l>a;a++)u=h[a].nTr,s=h[a].anCells,u&&u.insertBefore(s[n],s[f]||null)}else t(ce(e.aoData,"anCells",n)).detach();d.bVisible=r,j(e,e.aoHeader),j(e,e.aoFooter),(o===i||o)&&(p(e),(e.oScroll.sX||e.oScroll.sY)&&gt(e)),Mt(e,null,"column-visibility",[e,n,r,o]),kt(e)}};Gt("columns()",function(e,n){e===i?e="":t.isPlainObject(e)&&(n=e,e=""),n=Ae(n);var r=this.iterator("table",function(t){return Ne(t,e,n)},1);return r.selector.cols=e,r.selector.opts=n,r}),Jt("columns().header()","column().header()",function(t,e){return this.iterator("column",function(t,e){return t.aoColumns[e].nTh},1)}),Jt("columns().footer()","column().footer()",function(t,e){return this.iterator("column",function(t,e){return t.aoColumns[e].nTf},1)}),Jt("columns().data()","column().data()",function(){return this.iterator("column-rows",Fe,1)}),Jt("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(t,e){return t.aoColumns[e].mData},1)}),Jt("columns().cache()","column().cache()",function(t){return this.iterator("column-rows",function(e,n,i,r,o){return de(e.aoData,o,"search"===t?"_aFilterData":"_aSortData",n)},1)}),Jt("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(t,e,n,i,r){return de(t.aoData,r,"anCells",e)},1)}),Jt("columns().visible()","column().visible()",function(t,e){return this.iterator("column",function(n,r){return t===i?n.aoColumns[r].bVisible:void He(n,r,t,e)})}),Jt("columns().indexes()","column().index()",function(t){return this.iterator("column",function(e,n){return"visible"===t?m(e,n):n},1)}),Gt("columns.adjust()",function(){return this.iterator("table",function(t){p(t)},1)}),Gt("column.index()",function(t,e){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===t||"toData"===t)return f(n,e);if("fromData"===t||"toVisible"===t)return m(n,e)}}),Gt("column()",function(t,e){return Ie(this.columns(t,e))});var We=function(e,n,r){var o,s,a,l,u,c,d,h=e.aoData,p=Pe(e,r),f=pe(de(h,p,"anCells")),m=t([].concat.apply([],f)),g=e.aoColumns.length,v=function(n){var r="function"==typeof n;if(null===n||n===i||r){for(s=[],a=0,l=p.length;l>a;a++)for(o=p[a],u=0;g>u;u++)c={row:o,column:u},r?(d=h[o],n(c,T(e,o,u),d.anCells?d.anCells[u]:null)&&s.push(c)):s.push(c);return s}return t.isPlainObject(n)?[n]:m.filter(n).map(function(t,e){return{row:e._DT_CellIndex.row,column:e._DT_CellIndex.column}}).toArray()};return Ee("cell",n,v,e,r)};Gt("cells()",function(e,n,r){if(t.isPlainObject(e)&&(e.row===i?(r=e,e=null):(r=n,n=null)),t.isPlainObject(n)&&(r=n,n=null),null===n||n===i)return this.iterator("table",function(t){return We(t,e,Ae(r))});var o,s,a,l,u,c=this.columns(n,r),d=this.rows(e,r),h=this.iterator("table",function(t,e){for(o=[],s=0,a=d[e].length;a>s;s++)for(l=0,u=c[e].length;u>l;l++)o.push({row:d[e][s],column:c[e][l]});return o},1);return t.extend(h.selector,{cols:n,rows:e,opts:r}),h}),Jt("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(t,e,n){var r=t.aoData[e].anCells;return r?r[n]:i},1)}),Gt("cells().data()",function(){return this.iterator("cell",function(t,e,n){return T(t,e,n)},1)}),Jt("cells().cache()","cell().cache()",function(t){return t="search"===t?"_aFilterData":"_aSortData",this.iterator("cell",function(e,n,i){return e.aoData[n][t][i]},1)}),Jt("cells().render()","cell().render()",function(t){return this.iterator("cell",function(e,n,i){return T(e,n,i,t)},1)}),Jt("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(t,e,n){return{row:e,column:n,columnVisible:m(t,n)}},1)}),Jt("cells().invalidate()","cell().invalidate()",function(t){return this.iterator("cell",function(e,n,i){L(e,n,t,i)})}),Gt("cell()",function(t,e,n){return Ie(this.cells(t,e,n))}),Gt("cell().data()",function(t){var e=this.context,n=this[0];return t===i?e.length&&n.length?T(e[0],n[0].row,n[0].column):i:(C(e[0],n[0].row,n[0].column,t),L(e[0],n[0].row,"data",n[0].column),this)}),Gt("order()",function(e,n){var r=this.context;return e===i?0!==r.length?r[0].aaSorting:i:("number"==typeof e?e=[[e,n]]:t.isArray(e[0])||(e=Array.prototype.slice.call(arguments)),this.iterator("table",function(t){t.aaSorting=e.slice()}))}),Gt("order.listener()",function(t,e,n){return this.iterator("table",function(i){At(i,t,e,n)})}),Gt("order.fixed()",function(e){if(!e){var n=this.context,r=n.length?n[0].aaSortingFixed:i;return t.isArray(r)?{pre:r}:r}return this.iterator("table",function(n){n.aaSortingFixed=t.extend(!0,{},e)})}),Gt(["columns().order()","column().order()"],function(e){var n=this;return this.iterator("table",function(i,r){var o=[];t.each(n[r],function(t,n){o.push([n,e])}),i.aaSorting=o})}),Gt("search()",function(e,n,r,o){var s=this.context;return e===i?0!==s.length?s[0].oPreviousSearch.sSearch:i:this.iterator("table",function(i){i.oFeatures.bFilter&&G(i,t.extend({},i.oPreviousSearch,{sSearch:e+"",bRegex:null===n?!1:n,bSmart:null===r?!0:r,bCaseInsensitive:null===o?!0:o}),1)})}),Jt("columns().search()","column().search()",function(e,n,r,o){return this.iterator("column",function(s,a){var l=s.aoPreSearchCols;return e===i?l[a].sSearch:void(s.oFeatures.bFilter&&(t.extend(l[a],{sSearch:e+"",bRegex:null===n?!1:n,bSmart:null===r?!0:r,bCaseInsensitive:null===o?!0:o}),G(s,s.oPreviousSearch,1)))})}),Gt("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Gt("state.clear()",function(){return this.iterator("table",function(t){t.fnStateSaveCallback.call(t.oInstance,t,{})})}),Gt("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Gt("state.save()",function(){return this.iterator("table",function(t){kt(t)})}),Vt.versionCheck=Vt.fnVersionCheck=function(t){for(var e,n,i=Vt.version.split("."),r=t.split("."),o=0,s=r.length;s>o;o++)if(e=parseInt(i[o],10)||0,n=parseInt(r[o],10)||0,e!==n)return e>n;return!0},Vt.isDataTable=Vt.fnIsDataTable=function(e){var n=t(e).get(0),i=!1;return t.each(Vt.settings,function(e,r){var o=r.nScrollHead?t("table",r.nScrollHead)[0]:null,s=r.nScrollFoot?t("table",r.nScrollFoot)[0]:null;(r.nTable===n||o===n||s===n)&&(i=!0)}),i},Vt.tables=Vt.fnTables=function(e){var n=!1;t.isPlainObject(e)&&(n=e.api,e=e.visible);var i=t.map(Vt.settings,function(n){return!e||e&&t(n.nTable).is(":visible")?n.nTable:void 0});return n?new Xt(i):i},Vt.util={throttle:bt,escapeRegex:tt},Vt.camelToHungarian=o,Gt("$()",function(e,n){var i=this.rows(n).nodes(),r=t(i);return t([].concat(r.filter(e).toArray(),r.find(e).toArray()))}),t.each(["on","one","off"],function(e,n){Gt(n+"()",function(){var e=Array.prototype.slice.call(arguments);e[0].match(/\.dt\b/)||(e[0]+=".dt");var i=t(this.tables().nodes());return i[n].apply(i,e),this})}),Gt("clear()",function(){return this.iterator("table",function(t){P(t)})}),Gt("settings()",function(){return new Xt(this.context,this.context)}),Gt("init()",function(){var t=this.context;return t.length?t[0].oInit:null}),Gt("data()",function(){return this.iterator("table",function(t){return ce(t.aoData,"_aData")}).flatten()}),Gt("destroy()",function(n){return n=n||!1,this.iterator("table",function(i){var r,o=i.nTableWrapper.parentNode,s=i.oClasses,a=i.nTable,l=i.nTBody,u=i.nTHead,c=i.nTFoot,d=t(a),h=t(l),p=t(i.nTableWrapper),f=t.map(i.aoData,function(t){return t.nTr});i.bDestroying=!0,Mt(i,"aoDestroyCallback","destroy",[i]),n||new Xt(i).columns().visible(!0),p.unbind(".DT").find(":not(tbody *)").unbind(".DT"),t(e).unbind(".DT-"+i.sInstance),a!=u.parentNode&&(d.children("thead").detach(),d.append(u)),c&&a!=c.parentNode&&(d.children("tfoot").detach(),d.append(c)),i.aaSorting=[],i.aaSortingFixed=[],It(i),t(f).removeClass(i.asStripeClasses.join(" ")),t("th, td",u).removeClass(s.sSortable+" "+s.sSortableAsc+" "+s.sSortableDesc+" "+s.sSortableNone),i.bJUI&&(t("th span."+s.sSortIcon+", td span."+s.sSortIcon,u).detach(),t("th, td",u).each(function(){var e=t("div."+s.sSortJUIWrapper,this);t(this).append(e.contents()),e.detach()})),h.children().detach(),h.append(f);var m=n?"remove":"detach";d[m](),p[m](),!n&&o&&(o.insertBefore(a,i.nTableReinsertBefore),d.css("width",i.sDestroyWidth).removeClass(s.sTable),r=i.asDestroyStripes.length,r&&h.children().each(function(e){t(this).addClass(i.asDestroyStripes[e%r])}));var g=t.inArray(i,Vt.settings);-1!==g&&Vt.settings.splice(g,1)})}),t.each(["column","row","cell"],function(t,e){Gt(e+"s().every()",function(t){var n=this.selector.opts,r=this;return this.iterator(e,function(o,s,a,l,u){t.call(r[e](s,"cell"===e?a:n,"cell"===e?n:i),s,a,l,u)})})}),Gt("i18n()",function(e,n,r){var o=this.context[0],s=E(e)(o.oLanguage);return s===i&&(s=n),r!==i&&t.isPlainObject(s)&&(s=s[r]!==i?s[r]:s._),s.replace("%d",r)}),Vt.version="1.10.10",Vt.settings=[],Vt.models={},Vt.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Vt.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Vt.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Vt.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(t){try{return JSON.parse((-1===t.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+t.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(t,e){try{(-1===t.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+t.sInstance+"_"+location.pathname,JSON.stringify(e))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:t.extend({},Vt.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},r(Vt.defaults),Vt.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},r(Vt.defaults.column),Vt.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:i,oAjaxData:i,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==Ht(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==Ht(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var t=this._iDisplayLength,e=this._iDisplayStart,n=e+t,i=this.aiDisplay.length,r=this.oFeatures,o=r.bPaginate;return r.bServerSide?o===!1||-1===t?e+i:Math.min(e+t,this._iRecordsDisplay):!o||n>i||-1===t?i:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Vt.ext=Yt={buttons:{},classes:{},builder:"-source-",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Vt.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Vt.version},t.extend(Yt,{afnFiltering:Yt.search,aTypes:Yt.type.detect,ofnSearch:Yt.type.search,oSort:Yt.type.order,afnSortData:Yt.order,aoFeatures:Yt.feature,oApi:Yt.internal,oStdClasses:Yt.classes,oPagination:Yt.pager}),t.extend(Vt.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var e="";e="";var n=e+"ui-state-default",i=e+"css_right ui-icon ui-icon-",r=e+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";t.extend(Vt.ext.oJUIClasses,Vt.ext.classes,{sPageButton:"fg-button ui-button "+n,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:n+" sorting_asc",sSortDesc:n+" sorting_desc",sSortable:n+" sorting",sSortableAsc:n+" sorting_asc_disabled",sSortableDesc:n+" sorting_desc_disabled",sSortableNone:n+" sorting_disabled",sSortJUIAsc:i+"triangle-1-n",sSortJUIDesc:i+"triangle-1-s",sSortJUI:i+"carat-2-n-s",sSortJUIAscAllowed:i+"carat-1-n",sSortJUIDescAllowed:i+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+n,sScrollFoot:"dataTables_scrollFoot "+n,sHeaderTH:n,sFooterTH:n,sJUIHeader:r+" ui-corner-tl ui-corner-tr",sJUIFooter:r+" ui-corner-bl ui-corner-br"})}();var Be=Vt.ext.pager;t.extend(Be,{simple:function(t,e){return["previous","next"]},full:function(t,e){return["first","previous","next","last"]},numbers:function(t,e){return[Wt(t,e)]},simple_numbers:function(t,e){return["previous",Wt(t,e),"next"]},full_numbers:function(t,e){return["first","previous",Wt(t,e),"next","last"]},_numbers:Wt,numbers_length:7}),t.extend(!0,Vt.ext.renderer,{pageButton:{_:function(e,i,r,o,s,a){var l,u,c,d=e.oClasses,h=e.oLanguage.oPaginate,p=e.oLanguage.oAria.paginate||{},f=0,m=function(n,i){var o,c,g,v,y=function(t){ht(e,t.data.action,!0)};for(o=0,c=i.length;c>o;o++)if(v=i[o],t.isArray(v)){var b=t("<"+(v.DT_el||"div")+"/>").appendTo(n);m(b,v)}else{switch(l=null,u="",v){case"ellipsis":n.append('<span class="ellipsis">&#x2026;</span>');break;case"first":l=h.sFirst,u=v+(s>0?"":" "+d.sPageButtonDisabled);break;case"previous":l=h.sPrevious,u=v+(s>0?"":" "+d.sPageButtonDisabled);break;case"next":l=h.sNext,u=v+(a-1>s?"":" "+d.sPageButtonDisabled);break;case"last":l=h.sLast,u=v+(a-1>s?"":" "+d.sPageButtonDisabled);break;default:l=v+1,u=s===v?d.sPageButtonActive:""}null!==l&&(g=t("<a>",{"class":d.sPageButton+" "+u,"aria-controls":e.sTableId,"aria-label":p[v],
"data-dt-idx":f,tabindex:e.iTabIndex,id:0===r&&"string"==typeof v?e.sTableId+"_"+v:null}).html(l).appendTo(n),jt(g,{action:v},y),f++)}};try{c=t(i).find(n.activeElement).data("dt-idx")}catch(g){}m(t(i).empty(),o),c&&t(i).find("[data-dt-idx="+c+"]").focus()}}}),t.extend(Vt.ext.type.detect,[function(t,e){var n=e.oLanguage.sDecimal;return ae(t,n)?"num"+n:null},function(t,e){if(t&&!(t instanceof Date)&&(!te.test(t)||!ee.test(t)))return null;var n=Date.parse(t);return null!==n&&!isNaN(n)||re(t)?"date":null},function(t,e){var n=e.oLanguage.sDecimal;return ae(t,n,!0)?"num-fmt"+n:null},function(t,e){var n=e.oLanguage.sDecimal;return ue(t,n)?"html-num"+n:null},function(t,e){var n=e.oLanguage.sDecimal;return ue(t,n,!0)?"html-num-fmt"+n:null},function(t,e){return re(t)||"string"==typeof t&&-1!==t.indexOf("<")?"html":null}]),t.extend(Vt.ext.type.search,{html:function(t){return re(t)?t:"string"==typeof t?t.replace(Kt," ").replace(Zt,""):""},string:function(t){return re(t)?t:"string"==typeof t?t.replace(Kt," "):t}});var Ue=function(t,e,n,i){return 0===t||t&&"-"!==t?(e&&(t=se(t,e)),t.replace&&(n&&(t=t.replace(n,"")),i&&(t=t.replace(i,""))),1*t):-(1/0)};return t.extend(Yt.type.order,{"date-pre":function(t){return Date.parse(t)||0},"html-pre":function(t){return re(t)?"":t.replace?t.replace(/<.*?>/g,"").toLowerCase():t+""},"string-pre":function(t){return re(t)?"":"string"==typeof t?t.toLowerCase():t.toString?t.toString():""},"string-asc":function(t,e){return e>t?-1:t>e?1:0},"string-desc":function(t,e){return e>t?1:t>e?-1:0}}),Bt(""),t.extend(!0,Vt.ext.renderer,{header:{_:function(e,n,i,r){t(e.nTable).on("order.dt.DT",function(t,o,s,a){if(e===o){var l=i.idx;n.removeClass(i.sSortingClass+" "+r.sSortAsc+" "+r.sSortDesc).addClass("asc"==a[l]?r.sSortAsc:"desc"==a[l]?r.sSortDesc:i.sSortingClass)}})},jqueryui:function(e,n,i,r){t("<div/>").addClass(r.sSortJUIWrapper).append(n.contents()).append(t("<span/>").addClass(r.sSortIcon+" "+i.sSortingClassJUI)).appendTo(n),t(e.nTable).on("order.dt.DT",function(t,o,s,a){if(e===o){var l=i.idx;n.removeClass(r.sSortAsc+" "+r.sSortDesc).addClass("asc"==a[l]?r.sSortAsc:"desc"==a[l]?r.sSortDesc:i.sSortingClass),n.find("span."+r.sSortIcon).removeClass(r.sSortJUIAsc+" "+r.sSortJUIDesc+" "+r.sSortJUI+" "+r.sSortJUIAscAllowed+" "+r.sSortJUIDescAllowed).addClass("asc"==a[l]?r.sSortJUIAsc:"desc"==a[l]?r.sSortJUIDesc:i.sSortingClassJUI)}})}}}),Vt.render={number:function(t,e,n,i,r){return{display:function(o){if("number"!=typeof o&&"string"!=typeof o)return o;var s=0>o?"-":"",a=parseFloat(o);if(isNaN(a))return o;o=Math.abs(a);var l=parseInt(o,10),u=n?e+(o-l).toFixed(n).substring(2):"";return s+(i||"")+l.toString().replace(/\B(?=(\d{3})+(?!\d))/g,t)+u+(r||"")}}},text:function(){return{display:function(t){return"string"==typeof t?t.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):t}}}},t.extend(Vt.ext.internal,{_fnExternApiFunc:Ut,_fnBuildAjax:W,_fnAjaxUpdate:B,_fnAjaxParameters:U,_fnAjaxUpdateDraw:V,_fnAjaxDataSrc:Y,_fnAddColumn:d,_fnColumnOptions:h,_fnAdjustColumnSizing:p,_fnVisibleToColumnIndex:f,_fnColumnIndexToVisible:m,_fnVisbleColumns:g,_fnGetColumns:v,_fnColumnTypes:y,_fnApplyColumnDefs:b,_fnHungarianMap:r,_fnCamelToHungarian:o,_fnLanguageCompat:s,_fnBrowserDetect:u,_fnAddData:w,_fnAddTr:S,_fnNodeToDataIndex:_,_fnNodeToColumnIndex:x,_fnGetCellData:T,_fnSetCellData:C,_fnSplitObjNotation:D,_fnGetObjectDataFn:E,_fnSetObjectDataFn:A,_fnGetDataMaster:I,_fnClearTable:P,_fnDeleteIndex:k,_fnInvalidate:L,_fnGetRowElements:$,_fnCreateTr:O,_fnBuildHead:z,_fnDrawHead:j,_fnDraw:R,_fnReDraw:M,_fnAddOptionsHtml:F,_fnDetectHeader:N,_fnGetUniqueThs:H,_fnFeatureHtmlFilter:X,_fnFilterComplete:G,_fnFilterCustom:J,_fnFilterColumn:Q,_fnFilter:K,_fnFilterCreateSearch:Z,_fnEscapeRegex:tt,_fnFilterData:et,_fnFeatureHtmlInfo:rt,_fnUpdateInfo:ot,_fnInfoMacros:st,_fnInitialise:at,_fnInitComplete:lt,_fnLengthChange:ut,_fnFeatureHtmlLength:ct,_fnFeatureHtmlPaginate:dt,_fnPageChange:ht,_fnFeatureHtmlProcessing:pt,_fnProcessingDisplay:ft,_fnFeatureHtmlTable:mt,_fnScrollDraw:gt,_fnApplyToChildren:vt,_fnCalculateColumnWidths:yt,_fnThrottle:bt,_fnConvertToWidth:wt,_fnGetWidestNode:St,_fnGetMaxLenString:_t,_fnStringToCss:xt,_fnSortFlatten:Tt,_fnSort:Ct,_fnSortAria:Dt,_fnSortListener:Et,_fnSortAttachListener:At,_fnSortingClasses:It,_fnSortData:Pt,_fnSaveState:kt,_fnLoadState:Lt,_fnSettingsFromNode:$t,_fnLog:Ot,_fnMap:qt,_fnBindAction:jt,_fnCallbackReg:Rt,_fnCallbackFire:Mt,_fnLengthOverflow:Ft,_fnRenderer:Nt,_fnDataSource:Ht,_fnRowAttributes:q,_fnCalculateEnd:function(){}}),t.fn.dataTable=Vt,Vt.$=t,t.fn.dataTableSettings=Vt.settings,t.fn.dataTableExt=Vt.ext,t.fn.DataTable=function(e){return t(this).dataTable(e).api()},t.each(Vt,function(e,n){t.fn.DataTable[e]=n}),t.fn.dataTable}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):jQuery)}(function(t){var e=function(){if(t&&t.fn&&t.fn.select2&&t.fn.select2.amd)var e=t.fn.select2.amd;var e;return function(){if(!e||!e.requirejs){e?n=e:e={};var t,n,i;!function(e){function r(t,e){return w.call(t,e)}function o(t,e){var n,i,r,o,s,a,l,u,c,d,h,p=e&&e.split("/"),f=y.map,m=f&&f["*"]||{};if(t&&"."===t.charAt(0))if(e){for(t=t.split("/"),s=t.length-1,y.nodeIdCompat&&_.test(t[s])&&(t[s]=t[s].replace(_,"")),t=p.slice(0,p.length-1).concat(t),c=0;c<t.length;c+=1)if(h=t[c],"."===h)t.splice(c,1),c-=1;else if(".."===h){if(1===c&&(".."===t[2]||".."===t[0]))break;c>0&&(t.splice(c-1,2),c-=2)}t=t.join("/")}else 0===t.indexOf("./")&&(t=t.substring(2));if((p||m)&&f){for(n=t.split("/"),c=n.length;c>0;c-=1){if(i=n.slice(0,c).join("/"),p)for(d=p.length;d>0;d-=1)if(r=f[p.slice(0,d).join("/")],r&&(r=r[i])){o=r,a=c;break}if(o)break;!l&&m&&m[i]&&(l=m[i],u=c)}!o&&l&&(o=l,a=u),o&&(n.splice(0,a,o),t=n.join("/"))}return t}function s(t,n){return function(){var i=S.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),p.apply(e,i.concat([t,n]))}}function a(t){return function(e){return o(e,t)}}function l(t){return function(e){g[t]=e}}function u(t){if(r(v,t)){var n=v[t];delete v[t],b[t]=!0,h.apply(e,n)}if(!r(g,t)&&!r(b,t))throw new Error("No "+t);return g[t]}function c(t){var e,n=t?t.indexOf("!"):-1;return n>-1&&(e=t.substring(0,n),t=t.substring(n+1,t.length)),[e,t]}function d(t){return function(){return y&&y.config&&y.config[t]||{}}}var h,p,f,m,g={},v={},y={},b={},w=Object.prototype.hasOwnProperty,S=[].slice,_=/\.js$/;f=function(t,e){var n,i=c(t),r=i[0];return t=i[1],r&&(r=o(r,e),n=u(r)),r?t=n&&n.normalize?n.normalize(t,a(e)):o(t,e):(t=o(t,e),i=c(t),r=i[0],t=i[1],r&&(n=u(r))),{f:r?r+"!"+t:t,n:t,pr:r,p:n}},m={require:function(t){return s(t)},exports:function(t){var e=g[t];return"undefined"!=typeof e?e:g[t]={}},module:function(t){return{id:t,uri:"",exports:g[t],config:d(t)}}},h=function(t,n,i,o){var a,c,d,h,p,y,w=[],S=typeof i;if(o=o||t,"undefined"===S||"function"===S){for(n=!n.length&&i.length?["require","exports","module"]:n,p=0;p<n.length;p+=1)if(h=f(n[p],o),c=h.f,"require"===c)w[p]=m.require(t);else if("exports"===c)w[p]=m.exports(t),y=!0;else if("module"===c)a=w[p]=m.module(t);else if(r(g,c)||r(v,c)||r(b,c))w[p]=u(c);else{if(!h.p)throw new Error(t+" missing "+c);h.p.load(h.n,s(o,!0),l(c),{}),w[p]=g[c]}d=i?i.apply(g[t],w):void 0,t&&(a&&a.exports!==e&&a.exports!==g[t]?g[t]=a.exports:d===e&&y||(g[t]=d))}else t&&(g[t]=i)},t=n=p=function(t,n,i,r,o){if("string"==typeof t)return m[t]?m[t](n):u(f(t,n).f);if(!t.splice){if(y=t,y.deps&&p(y.deps,y.callback),!n)return;n.splice?(t=n,n=i,i=null):t=e}return n=n||function(){},"function"==typeof i&&(i=r,r=o),r?h(e,t,n,i):setTimeout(function(){h(e,t,n,i)},4),p},p.config=function(t){return p(t)},t._defined=g,i=function(t,e,n){if("string"!=typeof t)throw new Error("See almond README: incorrect module build, no module name");e.splice||(n=e,e=[]),r(g,t)||r(v,t)||(v[t]=[t,e,n])},i.amd={jQuery:!0}}(),e.requirejs=t,e.require=n,e.define=i}}(),e.define("almond",function(){}),e.define("jquery",[],function(){var e=t||$;return null==e&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),e}),e.define("select2/utils",["jquery"],function(t){function e(t){var e=t.prototype,n=[];for(var i in e){var r=e[i];"function"==typeof r&&"constructor"!==i&&n.push(i)}return n}var n={};n.Extend=function(t,e){function n(){this.constructor=t}var i={}.hasOwnProperty;for(var r in e)i.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},n.Decorate=function(t,n){function i(){var e=Array.prototype.unshift,i=n.prototype.constructor.length,r=t.prototype.constructor;i>0&&(e.call(arguments,t.prototype.constructor),r=n.prototype.constructor),r.apply(this,arguments)}function r(){this.constructor=i}var o=e(n),s=e(t);n.displayName=t.displayName,i.prototype=new r;for(var a=0;a<s.length;a++){var l=s[a];i.prototype[l]=t.prototype[l]}for(var u=(function(t){var e=function(){};t in i.prototype&&(e=i.prototype[t]);var r=n.prototype[t];return function(){var t=Array.prototype.unshift;return t.call(arguments,e),r.apply(this,arguments)}}),c=0;c<o.length;c++){var d=o[c];i.prototype[d]=u(d)}return i};var i=function(){this.listeners={}};return i.prototype.on=function(t,e){this.listeners=this.listeners||{},t in this.listeners?this.listeners[t].push(e):this.listeners[t]=[e]},i.prototype.trigger=function(t){var e=Array.prototype.slice;this.listeners=this.listeners||{},t in this.listeners&&this.invoke(this.listeners[t],e.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(t,e){for(var n=0,i=t.length;i>n;n++)t[n].apply(this,e)},n.Observable=i,n.generateChars=function(t){for(var e="",n=0;t>n;n++){var i=Math.floor(36*Math.random());e+=i.toString(36)}return e},n.bind=function(t,e){return function(){t.apply(e,arguments)}},n._convertData=function(t){for(var e in t){var n=e.split("-"),i=t;if(1!==n.length){for(var r=0;r<n.length;r++){var o=n[r];o=o.substring(0,1).toLowerCase()+o.substring(1),o in i||(i[o]={}),r==n.length-1&&(i[o]=t[e]),i=i[o]}delete t[e]}}return t},n.hasScroll=function(e,n){var i=t(n),r=n.style.overflowX,o=n.style.overflowY;return r!==o||"hidden"!==o&&"visible"!==o?"scroll"===r||"scroll"===o?!0:i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth:!1},n.escapeMarkup=function(t){var e={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof t?t:String(t).replace(/[&<>"'\/\\]/g,function(t){return e[t]})},n.appendMany=function(e,n){if("1.7"===t.fn.jquery.substr(0,3)){var i=t();t.map(n,function(t){i=i.add(t)}),n=i}e.append(n)},n}),e.define("select2/results",["jquery","./utils"],function(t,e){function n(t,e,i){this.$element=t,this.data=i,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var e=t('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&e.attr("aria-multiselectable","true"),this.$results=e,e},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(e){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=t('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),r=this.options.get("translations").get(e.message);i.append(n(r(e.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(t){this.hideLoading();var e=[];if(null==t.results||0===t.results.length)return void(0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"}));t.results=this.sort(t.results);for(var n=0;n<t.results.length;n++){var i=t.results[n],r=this.option(i);e.push(r)}this.$results.append(e)},n.prototype.position=function(t,e){var n=e.find(".select2-results");n.append(t)},n.prototype.sort=function(t){var e=this.options.get("sorter");return e(t)},n.prototype.setClasses=function(){var e=this;this.data.current(function(n){var i=t.map(n,function(t){return t.id.toString()}),r=e.$results.find(".select2-results__option[aria-selected]");r.each(function(){var e=t(this),n=t.data(this,"data"),r=""+n.id;null!=n.element&&n.element.selected||null==n.element&&t.inArray(r,i)>-1?e.attr("aria-selected","true"):e.attr("aria-selected","false")});var o=r.filter("[aria-selected=true]");o.length>0?o.first().trigger("mouseenter"):r.first().trigger("mouseenter")})},n.prototype.showLoading=function(t){this.hideLoading();var e=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:e(t)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(e){var n=document.createElement("li");n.className="select2-results__option";var i={role:"treeitem","aria-selected":"false"};e.disabled&&(delete i["aria-selected"],i["aria-disabled"]="true"),null==e.id&&delete i["aria-selected"],null!=e._resultId&&(n.id=e._resultId),e.title&&(n.title=e.title),e.children&&(i.role="group",i["aria-label"]=e.text,delete i["aria-selected"]);for(var r in i){var o=i[r];n.setAttribute(r,o)}if(e.children){var s=t(n),a=document.createElement("strong");a.className="select2-results__group";t(a);this.template(e,a);for(var l=[],u=0;u<e.children.length;u++){var c=e.children[u],d=this.option(c);l.push(d)}var h=t("<ul></ul>",{"class":"select2-results__options select2-results__options--nested"});h.append(l),s.append(a),s.append(h)}else this.template(e,n);return t.data(n,"data",e),n},n.prototype.bind=function(e,n){var i=this,r=e.id+"-results";this.$results.attr("id",r),e.on("results:all",function(t){i.clear(),i.append(t.data),e.isOpen()&&i.setClasses()}),e.on("results:append",function(t){i.append(t.data),e.isOpen()&&i.setClasses()}),e.on("query",function(t){i.hideMessages(),i.showLoading(t)}),e.on("select",function(){e.isOpen()&&i.setClasses()}),e.on("unselect",function(){e.isOpen()&&i.setClasses()}),e.on("open",function(){i.$results.attr("aria-expanded","true"),i.$results.attr("aria-hidden","false"),i.setClasses(),i.ensureHighlightVisible()}),e.on("close",function(){i.$results.attr("aria-expanded","false"),i.$results.attr("aria-hidden","true"),i.$results.removeAttr("aria-activedescendant")}),e.on("results:toggle",function(){var t=i.getHighlightedResults();0!==t.length&&t.trigger("mouseup")}),e.on("results:select",function(){var t=i.getHighlightedResults();if(0!==t.length){var e=t.data("data");"true"==t.attr("aria-selected")?i.trigger("close",{}):i.trigger("select",{data:e})}}),e.on("results:previous",function(){var t=i.getHighlightedResults(),e=i.$results.find("[aria-selected]"),n=e.index(t);if(0!==n){var r=n-1;0===t.length&&(r=0);var o=e.eq(r);o.trigger("mouseenter");var s=i.$results.offset().top,a=o.offset().top,l=i.$results.scrollTop()+(a-s);0===r?i.$results.scrollTop(0):0>a-s&&i.$results.scrollTop(l)}}),e.on("results:next",function(){var t=i.getHighlightedResults(),e=i.$results.find("[aria-selected]"),n=e.index(t),r=n+1;if(!(r>=e.length)){var o=e.eq(r);o.trigger("mouseenter");var s=i.$results.offset().top+i.$results.outerHeight(!1),a=o.offset().top+o.outerHeight(!1),l=i.$results.scrollTop()+a-s;0===r?i.$results.scrollTop(0):a>s&&i.$results.scrollTop(l)}}),e.on("results:focus",function(t){t.element.addClass("select2-results__option--highlighted")}),e.on("results:message",function(t){i.displayMessage(t)}),t.fn.mousewheel&&this.$results.on("mousewheel",function(t){var e=i.$results.scrollTop(),n=i.$results.get(0).scrollHeight-i.$results.scrollTop()+t.deltaY,r=t.deltaY>0&&e-t.deltaY<=0,o=t.deltaY<0&&n<=i.$results.height();r?(i.$results.scrollTop(0),t.preventDefault(),t.stopPropagation()):o&&(i.$results.scrollTop(i.$results.get(0).scrollHeight-i.$results.height()),t.preventDefault(),t.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(e){var n=t(this),r=n.data("data");return"true"===n.attr("aria-selected")?void(i.options.get("multiple")?i.trigger("unselect",{originalEvent:e,data:r}):i.trigger("close",{})):void i.trigger("select",{originalEvent:e,data:r})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(e){var n=t(this).data("data");i.getHighlightedResults().removeClass("select2-results__option--highlighted"),i.trigger("results:focus",{data:n,element:t(this)})})},n.prototype.getHighlightedResults=function(){var t=this.$results.find(".select2-results__option--highlighted");return t},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var t=this.getHighlightedResults();if(0!==t.length){var e=this.$results.find("[aria-selected]"),n=e.index(t),i=this.$results.offset().top,r=t.offset().top,o=this.$results.scrollTop()+(r-i),s=r-i;o-=2*t.outerHeight(!1),2>=n?this.$results.scrollTop(0):(s>this.$results.outerHeight()||0>s)&&this.$results.scrollTop(o)}},n.prototype.template=function(e,n){var i=this.options.get("templateResult"),r=this.options.get("escapeMarkup"),o=i(e,n);null==o?n.style.display="none":"string"==typeof o?n.innerHTML=r(o):t(n).append(o)},n}),e.define("select2/keys",[],function(){var t={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return t}),e.define("select2/selection/base",["jquery","../utils","../keys"],function(t,e,n){function i(t,e){this.$element=t,this.options=e,i.__super__.constructor.call(this)}return e.Extend(i,e.Observable),i.prototype.render=function(){var e=t('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=this.$element.data("old-tabindex")?this._tabindex=this.$element.data("old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),e.attr("title",this.$element.attr("title")),e.attr("tabindex",this._tabindex),this.$selection=e,e},i.prototype.bind=function(t,e){var i=this,r=(t.id+"-container",t.id+"-results");this.container=t,this.$selection.on("focus",function(t){i.trigger("focus",t)}),this.$selection.on("blur",function(t){i._handleBlur(t)}),this.$selection.on("keydown",function(t){i.trigger("keypress",t),t.which===n.SPACE&&t.preventDefault()}),t.on("results:focus",function(t){i.$selection.attr("aria-activedescendant",t.data._resultId)}),t.on("selection:update",function(t){i.update(t.data)}),t.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",r),i._attachCloseHandler(t)}),t.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.focus(),i._detachCloseHandler(t)}),t.on("enable",function(){i.$selection.attr("tabindex",i._tabindex)}),t.on("disable",function(){i.$selection.attr("tabindex","-1")})},i.prototype._handleBlur=function(e){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||t.contains(n.$selection[0],document.activeElement)||n.trigger("blur",e)},1)},i.prototype._attachCloseHandler=function(e){t(document.body).on("mousedown.select2."+e.id,function(e){var n=t(e.target),i=n.closest(".select2"),r=t(".select2.select2-container--open");r.each(function(){var e=t(this);if(this!=i[0]){var n=e.data("element");n.select2("close")}})})},i.prototype._detachCloseHandler=function(e){t(document.body).off("mousedown.select2."+e.id)},i.prototype.position=function(t,e){var n=e.find(".selection");n.append(t)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(t){throw new Error("The `update` method must be defined in child classes.")},i}),e.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(t,e,n,i){function r(){r.__super__.constructor.apply(this,arguments)}return n.Extend(r,e),r.prototype.render=function(){var t=r.__super__.render.call(this);return t.addClass("select2-selection--single"),t.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),t},r.prototype.bind=function(t,e){var n=this;r.__super__.bind.apply(this,arguments);var i=t.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(t){1===t.which&&n.trigger("toggle",{originalEvent:t})}),this.$selection.on("focus",function(t){}),this.$selection.on("blur",function(t){}),t.on("selection:update",function(t){n.update(t.data)})},r.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},r.prototype.display=function(t,e){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(t,e))},r.prototype.selectionContainer=function(){return t("<span></span>")},r.prototype.update=function(t){if(0===t.length)return void this.clear();var e=t[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(e,n);n.empty().append(i),n.prop("title",e.title||e.text)},r}),e.define("select2/selection/multiple",["jquery","./base","../utils"],function(t,e,n){function i(t,e){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,e),i.prototype.render=function(){var t=i.__super__.render.call(this);return t.addClass("select2-selection--multiple"),t.html('<ul class="select2-selection__rendered"></ul>'),t},i.prototype.bind=function(e,n){var r=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(t){r.trigger("toggle",{originalEvent:t})}),this.$selection.on("click",".select2-selection__choice__remove",function(e){if(!r.options.get("disabled")){var n=t(this),i=n.parent(),o=i.data("data");r.trigger("unselect",{originalEvent:e,data:o})}})},i.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},i.prototype.display=function(t,e){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(t,e))},i.prototype.selectionContainer=function(){var e=t('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');return e},i.prototype.update=function(t){if(this.clear(),0!==t.length){for(var e=[],i=0;i<t.length;i++){var r=t[i],o=this.selectionContainer(),s=this.display(r,o);o.append(s),o.prop("title",r.title||r.text),o.data("data",r),e.push(o)}var a=this.$selection.find(".select2-selection__rendered");n.appendMany(a,e)}},i}),e.define("select2/selection/placeholder",["../utils"],function(t){function e(t,e,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),t.call(this,e,n)}return e.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},e.prototype.createPlaceholder=function(t,e){var n=this.selectionContainer();return n.html(this.display(e)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},e.prototype.update=function(t,e){var n=1==e.length&&e[0].id!=this.placeholder.id,i=e.length>1;if(i||n)return t.call(this,e);this.clear();var r=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r)},e}),e.define("select2/selection/allowClear",["jquery","../keys"],function(t,e){function n(){}return n.prototype.bind=function(t,e,n){var i=this;t.call(this,e,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(t){i._handleClear(t)}),e.on("keypress",function(t){i._handleKeyboardClear(t,e)})},n.prototype._handleClear=function(t,e){if(!this.options.get("disabled")){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){e.stopPropagation();for(var i=n.data("data"),r=0;r<i.length;r++){var o={data:i[r]};if(this.trigger("unselect",o),o.prevented)return}this.$element.val(this.placeholder.id).trigger("change"),this.trigger("toggle",{})}}},n.prototype._handleKeyboardClear=function(t,n,i){i.isOpen()||(n.which==e.DELETE||n.which==e.BACKSPACE)&&this._handleClear(n)},n.prototype.update=function(e,n){if(e.call(this,n),!(this.$selection.find(".select2-selection__placeholder").length>0||0===n.length)){var i=t('<span class="select2-selection__clear">&times;</span>');i.data("data",n),this.$selection.find(".select2-selection__rendered").prepend(i)}},n}),e.define("select2/selection/search",["jquery","../utils","../keys"],function(t,e,n){function i(t,e,n){t.call(this,e,n)}return i.prototype.render=function(e){var n=t('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=e.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(t,e,i){var r=this;t.call(this,e,i),e.on("open",function(){r.$search.trigger("focus")}),e.on("close",function(){r.$search.val(""),r.$search.removeAttr("aria-activedescendant"),r.$search.trigger("focus")}),e.on("enable",function(){r.$search.prop("disabled",!1),r._transferTabIndex()}),e.on("disable",function(){r.$search.prop("disabled",!0)}),e.on("focus",function(t){r.$search.trigger("focus")}),e.on("results:focus",function(t){r.$search.attr("aria-activedescendant",t.id)}),this.$selection.on("focusin",".select2-search--inline",function(t){r.trigger("focus",t)}),this.$selection.on("focusout",".select2-search--inline",function(t){r._handleBlur(t)}),this.$selection.on("keydown",".select2-search--inline",function(t){t.stopPropagation(),r.trigger("keypress",t),r._keyUpPrevented=t.isDefaultPrevented();var e=t.which;if(e===n.BACKSPACE&&""===r.$search.val()){var i=r.$searchContainer.prev(".select2-selection__choice");if(i.length>0){var o=i.data("data");r.searchRemoveChoice(o),t.preventDefault()}}});var o=document.documentMode,s=o&&11>=o;this.$selection.on("input.searchcheck",".select2-search--inline",function(t){return s?void r.$selection.off("input.search input.searchcheck"):void r.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(t){if(s&&"input"===t.type)return void r.$selection.off("input.search input.searchcheck");var e=t.which;e!=n.SHIFT&&e!=n.CTRL&&e!=n.ALT&&e!=n.TAB&&r.handleSearch(t)})},i.prototype._transferTabIndex=function(t){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(t,e){this.$search.attr("placeholder",e.text)},i.prototype.update=function(t,e){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),t.call(this,e),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.focus()},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(t,e){this.trigger("unselect",{data:e}),this.$search.val(e.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var t="";if(""!==this.$search.attr("placeholder"))t=this.$selection.find(".select2-selection__rendered").innerWidth();else{var e=this.$search.val().length+1;t=.75*e+"em"}this.$search.css("width",t)},i}),e.define("select2/selection/eventRelay",["jquery"],function(t){function e(){}return e.prototype.bind=function(e,n,i){var r=this,o=["open","opening","close","closing","select","selecting","unselect","unselecting"],s=["opening","closing","selecting","unselecting"];e.call(this,n,i),n.on("*",function(e,n){if(-1!==t.inArray(e,o)){n=n||{};var i=t.Event("select2:"+e,{params:n});r.$element.trigger(i),-1!==t.inArray(e,s)&&(n.prevented=i.isDefaultPrevented())}})},e}),e.define("select2/translation",["jquery","require"],function(t,e){function n(t){this.dict=t||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(t){return this.dict[t]},n.prototype.extend=function(e){this.dict=t.extend({},e.all(),this.dict)},n._cache={},n.loadPath=function(t){if(!(t in n._cache)){var i=e(t);n._cache[t]=i}return new n(n._cache[t])},n}),e.define("select2/diacritics",[],function(){var t={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a",
"ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};return t}),e.define("select2/data/base",["../utils"],function(t){function e(t,n){e.__super__.constructor.call(this)}return t.Extend(e,t.Observable),e.prototype.current=function(t){throw new Error("The `current` method must be defined in child classes.")},e.prototype.query=function(t,e){throw new Error("The `query` method must be defined in child classes.")},e.prototype.bind=function(t,e){},e.prototype.destroy=function(){},e.prototype.generateResultId=function(e,n){var i=e.id+"-result-";return i+=t.generateChars(4),i+=null!=n.id?"-"+n.id.toString():"-"+t.generateChars(4)},e}),e.define("select2/data/select",["./base","../utils","jquery"],function(t,e,n){function i(t,e){this.$element=t,this.options=e,i.__super__.constructor.call(this)}return e.Extend(i,t),i.prototype.current=function(t){var e=[],i=this;this.$element.find(":selected").each(function(){var t=n(this),r=i.item(t);e.push(r)}),t(e)},i.prototype.select=function(t){var e=this;if(t.selected=!0,n(t.element).is("option"))return t.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var r=[];t=[t],t.push.apply(t,i);for(var o=0;o<t.length;o++){var s=t[o].id;-1===n.inArray(s,r)&&r.push(s)}e.$element.val(r),e.$element.trigger("change")});else{var i=t.id;this.$element.val(i),this.$element.trigger("change")}},i.prototype.unselect=function(t){var e=this;if(this.$element.prop("multiple"))return t.selected=!1,n(t.element).is("option")?(t.element.selected=!1,void this.$element.trigger("change")):void this.current(function(i){for(var r=[],o=0;o<i.length;o++){var s=i[o].id;s!==t.id&&-1===n.inArray(s,r)&&r.push(s)}e.$element.val(r),e.$element.trigger("change")})},i.prototype.bind=function(t,e){var n=this;this.container=t,t.on("select",function(t){n.select(t.data)}),t.on("unselect",function(t){n.unselect(t.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){n.removeData(this,"data")})},i.prototype.query=function(t,e){var i=[],r=this,o=this.$element.children();o.each(function(){var e=n(this);if(e.is("option")||e.is("optgroup")){var o=r.item(e),s=r.matches(t,o);null!==s&&i.push(s)}}),e({results:i})},i.prototype.addOptions=function(t){e.appendMany(this.$element,t)},i.prototype.option=function(t){var e;t.children?(e=document.createElement("optgroup"),e.label=t.text):(e=document.createElement("option"),void 0!==e.textContent?e.textContent=t.text:e.innerText=t.text),t.id&&(e.value=t.id),t.disabled&&(e.disabled=!0),t.selected&&(e.selected=!0),t.title&&(e.title=t.title);var i=n(e),r=this._normalizeItem(t);return r.element=e,n.data(e,"data",r),i},i.prototype.item=function(t){var e={};if(e=n.data(t[0],"data"),null!=e)return e;if(t.is("option"))e={id:t.val(),text:t.text(),disabled:t.prop("disabled"),selected:t.prop("selected"),title:t.prop("title")};else if(t.is("optgroup")){e={text:t.prop("label"),children:[],title:t.prop("title")};for(var i=t.children("option"),r=[],o=0;o<i.length;o++){var s=n(i[o]),a=this.item(s);r.push(a)}e.children=r}return e=this._normalizeItem(e),e.element=t[0],n.data(t[0],"data",e),e},i.prototype._normalizeItem=function(t){n.isPlainObject(t)||(t={id:t,text:t}),t=n.extend({},{text:""},t);var e={selected:!1,disabled:!1};return null!=t.id&&(t.id=t.id.toString()),null!=t.text&&(t.text=t.text.toString()),null==t._resultId&&t.id&&null!=this.container&&(t._resultId=this.generateResultId(this.container,t)),n.extend({},e,t)},i.prototype.matches=function(t,e){var n=this.options.get("matcher");return n(t,e)},i}),e.define("select2/data/array",["./select","../utils","jquery"],function(t,e,n){function i(t,e){var n=e.get("data")||[];i.__super__.constructor.call(this,t,e),this.addOptions(this.convertToOptions(n))}return e.Extend(i,t),i.prototype.select=function(t){var e=this.$element.find("option").filter(function(e,n){return n.value==t.id.toString()});0===e.length&&(e=this.option(t),this.addOptions(e)),i.__super__.select.call(this,t)},i.prototype.convertToOptions=function(t){function i(t){return function(){return n(this).val()==t.id}}for(var r=this,o=this.$element.find("option"),s=o.map(function(){return r.item(n(this)).id}).get(),a=[],l=0;l<t.length;l++){var u=this._normalizeItem(t[l]);if(n.inArray(u.id,s)>=0){var c=o.filter(i(u)),d=this.item(c),h=n.extend(!0,{},d,u),p=this.option(h);c.replaceWith(p)}else{var f=this.option(u);if(u.children){var m=this.convertToOptions(u.children);e.appendMany(f,m)}a.push(f)}}return a},i}),e.define("select2/data/ajax",["./array","../utils","jquery"],function(t,e,n){function i(t,e){this.ajaxOptions=this._applyDefaults(e.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,t,e)}return e.Extend(i,t),i.prototype._applyDefaults=function(t){var e={data:function(t){return n.extend({},t,{q:t.term})},transport:function(t,e,i){var r=n.ajax(t);return r.then(e),r.fail(i),r}};return n.extend({},e,t,!0)},i.prototype.processResults=function(t){return t},i.prototype.query=function(t,e){function i(){var i=o.transport(o,function(i){var o=r.processResults(i,t);r.options.get("debug")&&window.console&&console.error&&(o&&o.results&&n.isArray(o.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),e(o)},function(){});r._request=i}var r=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var o=n.extend({type:"GET"},this.ajaxOptions);"function"==typeof o.url&&(o.url=o.url.call(this.$element,t)),"function"==typeof o.data&&(o.data=o.data.call(this.$element,t)),this.ajaxOptions.delay&&""!==t.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},i}),e.define("select2/data/tags",["jquery"],function(t){function e(e,n,i){var r=i.get("tags"),o=i.get("createTag");if(void 0!==o&&(this.createTag=o),e.call(this,n,i),t.isArray(r))for(var s=0;s<r.length;s++){var a=r[s],l=this._normalizeItem(a),u=this.option(l);this.$element.append(u)}}return e.prototype.query=function(t,e,n){function i(t,o){for(var s=t.results,a=0;a<s.length;a++){var l=s[a],u=null!=l.children&&!i({results:l.children},!0),c=l.text===e.term;if(c||u)return o?!1:(t.data=s,void n(t))}if(o)return!0;var d=r.createTag(e);if(null!=d){var h=r.option(d);h.attr("data-select2-tag",!0),r.addOptions([h]),r.insertTag(s,d)}t.results=s,n(t)}var r=this;return this._removeOldTags(),null==e.term||null!=e.page?void t.call(this,e,n):void t.call(this,e,i)},e.prototype.createTag=function(e,n){var i=t.trim(n.term);return""===i?null:{id:i,text:i}},e.prototype.insertTag=function(t,e,n){e.unshift(n)},e.prototype._removeOldTags=function(e){var n=(this._lastTag,this.$element.find("option[data-select2-tag]"));n.each(function(){this.selected||t(this).remove()})},e}),e.define("select2/data/tokenizer",["jquery"],function(t){function e(t,e,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),t.call(this,e,n)}return e.prototype.bind=function(t,e,n){t.call(this,e,n),this.$search=e.dropdown.$search||e.selection.$search||n.find(".select2-search__field")},e.prototype.query=function(t,e,n){function i(t){r.trigger("select",{data:t})}var r=this;e.term=e.term||"";var o=this.tokenizer(e,this.options,i);o.term!==e.term&&(this.$search.length&&(this.$search.val(o.term),this.$search.focus()),e.term=o.term),t.call(this,e,n)},e.prototype.tokenizer=function(e,n,i,r){for(var o=i.get("tokenSeparators")||[],s=n.term,a=0,l=this.createTag||function(t){return{id:t.term,text:t.term}};a<s.length;){var u=s[a];if(-1!==t.inArray(u,o)){var c=s.substr(0,a),d=t.extend({},n,{term:c}),h=l(d);null!=h?(r(h),s=s.substr(a+1)||"",a=0):a++}else a++}return{term:s}},e}),e.define("select2/data/minimumInputLength",[],function(){function t(t,e,n){this.minimumInputLength=n.get("minimumInputLength"),t.call(this,e,n)}return t.prototype.query=function(t,e,n){return e.term=e.term||"",e.term.length<this.minimumInputLength?void this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:e.term,params:e}}):void t.call(this,e,n)},t}),e.define("select2/data/maximumInputLength",[],function(){function t(t,e,n){this.maximumInputLength=n.get("maximumInputLength"),t.call(this,e,n)}return t.prototype.query=function(t,e,n){return e.term=e.term||"",this.maximumInputLength>0&&e.term.length>this.maximumInputLength?void this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:e.term,params:e}}):void t.call(this,e,n)},t}),e.define("select2/data/maximumSelectionLength",[],function(){function t(t,e,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),t.call(this,e,n)}return t.prototype.query=function(t,e,n){var i=this;this.current(function(r){var o=null!=r?r.length:0;return i.maximumSelectionLength>0&&o>=i.maximumSelectionLength?void i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):void t.call(i,e,n)})},t}),e.define("select2/dropdown",["jquery","./utils"],function(t,e){function n(t,e){this.$element=t,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var e=t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir",this.options.get("dir")),this.$dropdown=e,e},n.prototype.bind=function(){},n.prototype.position=function(t,e){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),e.define("select2/dropdown/search",["jquery","../utils"],function(t,e){function n(){}return n.prototype.render=function(e){var n=e.call(this),i=t('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(e,n,i){var r=this;e.call(this,n,i),this.$search.on("keydown",function(t){r.trigger("keypress",t),r._keyUpPrevented=t.isDefaultPrevented()}),this.$search.on("input",function(e){t(this).off("keyup")}),this.$search.on("keyup input",function(t){r.handleSearch(t)}),n.on("open",function(){r.$search.attr("tabindex",0),r.$search.focus(),window.setTimeout(function(){r.$search.focus()},0)}),n.on("close",function(){r.$search.attr("tabindex",-1),r.$search.val("")}),n.on("results:all",function(t){if(null==t.query.term||""===t.query.term){var e=r.showSearch(t);e?r.$searchContainer.removeClass("select2-search--hide"):r.$searchContainer.addClass("select2-search--hide")}})},n.prototype.handleSearch=function(t){if(!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},n.prototype.showSearch=function(t,e){return!0},n}),e.define("select2/dropdown/hidePlaceholder",[],function(){function t(t,e,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),t.call(this,e,n,i)}return t.prototype.append=function(t,e){e.results=this.removePlaceholder(e.results),t.call(this,e)},t.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},t.prototype.removePlaceholder=function(t,e){for(var n=e.slice(0),i=e.length-1;i>=0;i--){var r=e[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},t}),e.define("select2/dropdown/infiniteScroll",["jquery"],function(t){function e(t,e,n,i){this.lastParams={},t.call(this,e,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return e.prototype.append=function(t,e){this.$loadingMore.remove(),this.loading=!1,t.call(this,e),this.showLoadingMore(e)&&this.$results.append(this.$loadingMore)},e.prototype.bind=function(e,n,i){var r=this;e.call(this,n,i),n.on("query",function(t){r.lastParams=t,r.loading=!0}),n.on("query:append",function(t){r.lastParams=t,r.loading=!0}),this.$results.on("scroll",function(){var e=t.contains(document.documentElement,r.$loadingMore[0]);if(!r.loading&&e){var n=r.$results.offset().top+r.$results.outerHeight(!1),i=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(!1);n+50>=i&&r.loadMore()}})},e.prototype.loadMore=function(){this.loading=!0;var e=t.extend({},{page:1},this.lastParams);e.page++,this.trigger("query:append",e)},e.prototype.showLoadingMore=function(t,e){return e.pagination&&e.pagination.more},e.prototype.createLoadingMore=function(){var e=t('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return e.html(n(this.lastParams)),e},e}),e.define("select2/dropdown/attachBody",["jquery","../utils"],function(t,e){function n(e,n,i){this.$dropdownParent=i.get("dropdownParent")||t(document.body),e.call(this,n,i)}return n.prototype.bind=function(t,e,n){var i=this,r=!1;t.call(this,e,n),e.on("open",function(){i._showDropdown(),i._attachPositioningHandler(e),r||(r=!0,e.on("results:all",function(){i._positionDropdown(),i._resizeDropdown()}),e.on("results:append",function(){i._positionDropdown(),i._resizeDropdown()}))}),e.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(e)}),this.$dropdownContainer.on("mousedown",function(t){t.stopPropagation()})},n.prototype.destroy=function(t){t.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(t,e,n){e.attr("class",n.attr("class")),e.removeClass("select2"),e.addClass("select2-container--open"),e.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(e){var n=t("<span></span>"),i=e.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(t){this.$dropdownContainer.detach()},n.prototype._attachPositioningHandler=function(n,i){var r=this,o="scroll.select2."+i.id,s="resize.select2."+i.id,a="orientationchange.select2."+i.id,l=this.$container.parents().filter(e.hasScroll);l.each(function(){t(this).data("select2-scroll-position",{x:t(this).scrollLeft(),y:t(this).scrollTop()})}),l.on(o,function(e){var n=t(this).data("select2-scroll-position");t(this).scrollTop(n.y)}),t(window).on(o+" "+s+" "+a,function(t){r._positionDropdown(),r._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var r="scroll.select2."+i.id,o="resize.select2."+i.id,s="orientationchange.select2."+i.id,a=this.$container.parents().filter(e.hasScroll);a.off(r),t(window).off(r+" "+o+" "+s)},n.prototype._positionDropdown=function(){var e=t(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),r=null,o=(this.$container.position(),this.$container.offset());o.bottom=o.top+this.$container.outerHeight(!1);var s={height:this.$container.outerHeight(!1)};s.top=o.top,s.bottom=o.top+s.height;var a={height:this.$dropdown.outerHeight(!1)},l={top:e.scrollTop(),bottom:e.scrollTop()+e.height()},u=l.top<o.top-a.height,c=l.bottom>o.bottom+a.height,d={left:o.left,top:s.bottom};if("static"!==this.$dropdownParent[0].style.position){var h=this.$dropdownParent.offset();d.top-=h.top,d.left-=h.left}n||i||(r="below"),c||!u||n?!u&&c&&n&&(r="below"):r="above",("above"==r||n&&"below"!==r)&&(d.top=s.top-a.height),null!=r&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)),this.$dropdownContainer.css(d)},n.prototype._resizeDropdown=function(){var t={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(t.minWidth=t.width,t.width="auto"),this.$dropdown.css(t)},n.prototype._showDropdown=function(t){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),e.define("select2/dropdown/minimumResultsForSearch",[],function(){function t(e){for(var n=0,i=0;i<e.length;i++){var r=e[i];r.children?n+=t(r.children):n++}return n}function e(t,e,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),t.call(this,e,n,i)}return e.prototype.showSearch=function(e,n){return t(n.data.results)<this.minimumResultsForSearch?!1:e.call(this,n)},e}),e.define("select2/dropdown/selectOnClose",[],function(){function t(){}return t.prototype.bind=function(t,e,n){var i=this;t.call(this,e,n),e.on("close",function(){i._handleSelectOnClose()})},t.prototype._handleSelectOnClose=function(){var t=this.getHighlightedResults();if(!(t.length<1)){var e=t.data("data");null!=e.element&&e.element.selected||null==e.element&&e.selected||this.trigger("select",{data:e})}},t}),e.define("select2/dropdown/closeOnSelect",[],function(){function t(){}return t.prototype.bind=function(t,e,n){var i=this;t.call(this,e,n),e.on("select",function(t){i._selectTriggered(t)}),e.on("unselect",function(t){i._selectTriggered(t)})},t.prototype._selectTriggered=function(t,e){var n=e.originalEvent;n&&n.ctrlKey||this.trigger("close",{})},t}),e.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(t){var e=t.input.length-t.maximum,n="Please delete "+e+" character";return 1!=e&&(n+="s"),n},inputTooShort:function(t){var e=t.minimum-t.input.length,n="Please enter "+e+" or more characters";return n},loadingMore:function(){return"Loading more results…"},maximumSelected:function(t){var e="You can only select "+t.maximum+" item";return 1!=t.maximum&&(e+="s"),e},noResults:function(){return"No results found"},searching:function(){return"Searching…"}}}),e.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(t,e,n,i,r,o,s,a,l,u,c,d,h,p,f,m,g,v,y,b,w,S,_,x,T,C,D,E,A){function I(){this.reset()}I.prototype.apply=function(d){if(d=t.extend({},this.defaults,d),null==d.dataAdapter){if(null!=d.ajax?d.dataAdapter=f:null!=d.data?d.dataAdapter=p:d.dataAdapter=h,d.minimumInputLength>0&&(d.dataAdapter=u.Decorate(d.dataAdapter,v)),d.maximumInputLength>0&&(d.dataAdapter=u.Decorate(d.dataAdapter,y)),d.maximumSelectionLength>0&&(d.dataAdapter=u.Decorate(d.dataAdapter,b)),d.tags&&(d.dataAdapter=u.Decorate(d.dataAdapter,m)),(null!=d.tokenSeparators||null!=d.tokenizer)&&(d.dataAdapter=u.Decorate(d.dataAdapter,g)),null!=d.query){var A=e(d.amdBase+"compat/query");d.dataAdapter=u.Decorate(d.dataAdapter,A)}if(null!=d.initSelection){var I=e(d.amdBase+"compat/initSelection");d.dataAdapter=u.Decorate(d.dataAdapter,I)}}if(null==d.resultsAdapter&&(d.resultsAdapter=n,null!=d.ajax&&(d.resultsAdapter=u.Decorate(d.resultsAdapter,x)),null!=d.placeholder&&(d.resultsAdapter=u.Decorate(d.resultsAdapter,_)),d.selectOnClose&&(d.resultsAdapter=u.Decorate(d.resultsAdapter,D))),null==d.dropdownAdapter){if(d.multiple)d.dropdownAdapter=w;else{var P=u.Decorate(w,S);d.dropdownAdapter=P}if(0!==d.minimumResultsForSearch&&(d.dropdownAdapter=u.Decorate(d.dropdownAdapter,C)),d.closeOnSelect&&(d.dropdownAdapter=u.Decorate(d.dropdownAdapter,E)),null!=d.dropdownCssClass||null!=d.dropdownCss||null!=d.adaptDropdownCssClass){var k=e(d.amdBase+"compat/dropdownCss");d.dropdownAdapter=u.Decorate(d.dropdownAdapter,k)}d.dropdownAdapter=u.Decorate(d.dropdownAdapter,T)}if(null==d.selectionAdapter){if(d.multiple?d.selectionAdapter=r:d.selectionAdapter=i,null!=d.placeholder&&(d.selectionAdapter=u.Decorate(d.selectionAdapter,o)),d.allowClear&&(d.selectionAdapter=u.Decorate(d.selectionAdapter,s)),d.multiple&&(d.selectionAdapter=u.Decorate(d.selectionAdapter,a)),null!=d.containerCssClass||null!=d.containerCss||null!=d.adaptContainerCssClass){var L=e(d.amdBase+"compat/containerCss");d.selectionAdapter=u.Decorate(d.selectionAdapter,L)}d.selectionAdapter=u.Decorate(d.selectionAdapter,l)}if("string"==typeof d.language)if(d.language.indexOf("-")>0){var $=d.language.split("-"),O=$[0];d.language=[d.language,O]}else d.language=[d.language];if(t.isArray(d.language)){var q=new c;d.language.push("en");for(var z=d.language,j=0;j<z.length;j++){var R=z[j],M={};try{M=c.loadPath(R)}catch(F){try{R=this.defaults.amdLanguageBase+R,M=c.loadPath(R)}catch(N){d.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+R+'" could not be automatically loaded. A fallback will be used instead.');continue}}q.extend(M)}d.translations=q}else{var H=c.loadPath(this.defaults.amdLanguageBase+"en"),W=new c(d.language);W.extend(H),d.translations=W}return d},I.prototype.reset=function(){function e(t){function e(t){return d[t]||t}return t.replace(/[^\u0000-\u007E]/g,e)}function n(i,r){if(""===t.trim(i.term))return r;if(r.children&&r.children.length>0){for(var o=t.extend(!0,{},r),s=r.children.length-1;s>=0;s--){var a=r.children[s],l=n(i,a);null==l&&o.children.splice(s,1)}return o.children.length>0?o:n(i,o)}var u=e(r.text).toUpperCase(),c=e(i.term).toUpperCase();return u.indexOf(c)>-1?r:null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:u.escapeMarkup,language:A,matcher:n,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(t){return t},templateResult:function(t){return t.text},templateSelection:function(t){return t.text},theme:"default",width:"resolve"}},I.prototype.set=function(e,n){var i=t.camelCase(e),r={};r[i]=n;var o=u._convertData(r);t.extend(this.defaults,o)};var P=new I;return P}),e.define("select2/options",["require","jquery","./defaults","./utils"],function(t,e,n,i){function r(e,r){if(this.options=e,null!=r&&this.fromElement(r),this.options=n.apply(this.options),r&&r.is("input")){var o=t(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,o)}}return r.prototype.fromElement=function(t){var n=["select2"];null==this.options.multiple&&(this.options.multiple=t.prop("multiple")),null==this.options.disabled&&(this.options.disabled=t.prop("disabled")),null==this.options.language&&(t.prop("lang")?this.options.language=t.prop("lang").toLowerCase():t.closest("[lang]").prop("lang")&&(this.options.language=t.closest("[lang]").prop("lang"))),null==this.options.dir&&(t.prop("dir")?this.options.dir=t.prop("dir"):t.closest("[dir]").prop("dir")?this.options.dir=t.closest("[dir]").prop("dir"):this.options.dir="ltr"),t.prop("disabled",this.options.disabled),t.prop("multiple",this.options.multiple),t.data("select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),t.data("data",t.data("select2Tags")),t.data("tags",!0)),t.data("ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),t.attr("ajax--url",t.data("ajaxUrl")),t.data("ajax--url",t.data("ajaxUrl")));var r={};r=e.fn.jquery&&"1."==e.fn.jquery.substr(0,2)&&t[0].dataset?e.extend(!0,{},t[0].dataset,t.data()):t.data();var o=e.extend(!0,{},r);o=i._convertData(o);for(var s in o)e.inArray(s,n)>-1||(e.isPlainObject(this.options[s])?e.extend(this.options[s],o[s]):this.options[s]=o[s]);return this},r.prototype.get=function(t){return this.options[t]},r.prototype.set=function(t,e){this.options[t]=e},r}),e.define("select2/core",["jquery","./options","./utils","./keys"],function(t,e,n,i){var r=function(t,n){null!=t.data("select2")&&t.data("select2").destroy(),this.$element=t,this.id=this._generateId(t),n=n||{},this.options=new e(n,t),r.__super__.constructor.call(this);var i=t.attr("tabindex")||0;t.data("old-tabindex",i),t.attr("tabindex","-1");var o=this.options.get("dataAdapter");this.dataAdapter=new o(t,this.options);var s=this.render();this._placeContainer(s);var a=this.options.get("selectionAdapter");this.selection=new a(t,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,s);var l=this.options.get("dropdownAdapter");this.dropdown=new l(t,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,s);var u=this.options.get("resultsAdapter");this.results=new u(t,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var c=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(t){c.trigger("selection:update",{data:t})}),t.addClass("select2-hidden-accessible"),t.attr("aria-hidden","true"),this._syncAttributes(),t.data("select2",this)};return n.Extend(r,n.Observable),r.prototype._generateId=function(t){var e="";return e=null!=t.attr("id")?t.attr("id"):null!=t.attr("name")?t.attr("name")+"-"+n.generateChars(2):n.generateChars(4),e="select2-"+e},r.prototype._placeContainer=function(t){t.insertAfter(this.$element);var e=this._resolveWidth(this.$element,this.options.get("width"));null!=e&&t.css("width",e)},r.prototype._resolveWidth=function(t,e){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==e){var i=this._resolveWidth(t,"style");return null!=i?i:this._resolveWidth(t,"element")}if("element"==e){var r=t.outerWidth(!1);return 0>=r?"auto":r+"px"}if("style"==e){var o=t.attr("style");if("string"!=typeof o)return null;for(var s=o.split(";"),a=0,l=s.length;l>a;a+=1){var u=s[a].replace(/\s/g,""),c=u.match(n);if(null!==c&&c.length>=1)return c[1]}return null}return e},r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},r.prototype._registerDomEvents=function(){var e=this;this.$element.on("change.select2",function(){e.dataAdapter.current(function(t){e.trigger("selection:update",{data:t})})}),this._sync=n.bind(this._syncAttributes,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._sync);var i=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=i?(this._observer=new i(function(n){t.each(n,e._sync)}),this._observer.observe(this.$element[0],{attributes:!0,subtree:!1})):this.$element[0].addEventListener&&this.$element[0].addEventListener("DOMAttrModified",e._sync,!1)},r.prototype._registerDataEvents=function(){var t=this;this.dataAdapter.on("*",function(e,n){t.trigger(e,n)})},r.prototype._registerSelectionEvents=function(){var e=this,n=["toggle","focus"];this.selection.on("toggle",function(){e.toggleDropdown()}),this.selection.on("focus",function(t){e.focus(t)}),this.selection.on("*",function(i,r){-1===t.inArray(i,n)&&e.trigger(i,r)})},r.prototype._registerDropdownEvents=function(){var t=this;this.dropdown.on("*",function(e,n){t.trigger(e,n)})},r.prototype._registerResultsEvents=function(){var t=this;this.results.on("*",function(e,n){t.trigger(e,n)})},r.prototype._registerEvents=function(){var t=this;this.on("open",function(){t.$container.addClass("select2-container--open")}),this.on("close",function(){t.$container.removeClass("select2-container--open")}),this.on("enable",function(){t.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){t.$container.addClass("select2-container--disabled")}),this.on("blur",function(){t.$container.removeClass("select2-container--focus")}),this.on("query",function(e){t.isOpen()||t.trigger("open",{}),this.dataAdapter.query(e,function(n){t.trigger("results:all",{data:n,query:e})})}),this.on("query:append",function(e){this.dataAdapter.query(e,function(n){t.trigger("results:append",{data:n,query:e})})}),this.on("keypress",function(e){var n=e.which;t.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&e.altKey?(t.close(),e.preventDefault()):n===i.ENTER?(t.trigger("results:select",{}),e.preventDefault()):n===i.SPACE&&e.ctrlKey?(t.trigger("results:toggle",{}),e.preventDefault()):n===i.UP?(t.trigger("results:previous",{}),e.preventDefault()):n===i.DOWN&&(t.trigger("results:next",{}),
e.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&e.altKey)&&(t.open(),e.preventDefault())})},r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},r.prototype.trigger=function(t,e){var n=r.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(void 0===e&&(e={}),t in i){var o=i[t],s={prevented:!1,name:t,args:e};if(n.call(this,o,s),s.prevented)return void(e.prevented=!0)}n.call(this,t,e)},r.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},r.prototype.open=function(){this.isOpen()||this.trigger("query",{})},r.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},r.prototype.focus=function(t){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},r.prototype.enable=function(t){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),(null==t||0===t.length)&&(t=[!0]);var e=!t[0];this.$element.prop("disabled",e)},r.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t=[];return this.dataAdapter.current(function(e){t=e}),t},r.prototype.val=function(e){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==e||0===e.length)return this.$element.val();var n=e[0];t.isArray(n)&&(n=t.map(n,function(t){return t.toString()})),this.$element.val(n).trigger("change")},r.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._sync),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&this.$element[0].removeEventListener("DOMAttrModified",this._sync,!1),this._sync=null,this.$element.off(".select2"),this.$element.attr("tabindex",this.$element.data("old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},r.prototype.render=function(){var e=t('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir",this.options.get("dir")),this.$container=e,this.$container.addClass("select2-container--"+this.options.get("theme")),e.data("element",this.$element),e},r}),e.define("jquery-mousewheel",["jquery"],function(t){return t}),e.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(t,e,n,i){if(null==t.fn.select2){var r=["open","close","destroy"];t.fn.select2=function(e){if(e=e||{},"object"==typeof e)return this.each(function(){var i=t.extend(!0,{},e);new n(t(this),i)}),this;if("string"==typeof e){var i;return this.each(function(){var n=t(this).data("select2");null==n&&window.console&&console.error&&console.error("The select2('"+e+"') method was called on an element that is not using Select2.");var r=Array.prototype.slice.call(arguments,1);i=n[e].apply(n,r)}),t.inArray(e,r)>-1?this:i}throw new Error("Invalid arguments for Select2: "+e)}}return null==t.fn.select2.defaults&&(t.fn.select2.defaults=i),n}),{define:e.define,require:e.require}}(),n=e.require("jquery.select2");return t.fn.select2.amd=e,n}),function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var t=jQuery.fn.select2.amd;return t.define("select2/i18n/ru",[],function(){function t(t,e,n,i){return 5>t%10&&t%10>0&&5>t%100||t%100>20?t%10>1?n:e:i}return{errorLoading:function(){return"Невозможно загрузить результаты"},inputTooLong:function(e){var n=e.input.length-e.maximum,i="Пожалуйста, введите на "+n+" символ";return i+=t(n,"","a","ов"),i+=" меньше"},inputTooShort:function(e){var n=e.minimum-e.input.length,i="Пожалуйста, введите еще хотя бы "+n+" символ";return i+=t(n,"","a","ов")},loadingMore:function(){return"Загрузка данных…"},maximumSelected:function(e){var n="Вы можете выбрать не более "+e.maximum+" элемент";return n+=t(e.maximum,"","a","ов")},noResults:function(){return"Совпадений не найдено"},searching:function(){return"Поиск…"}}}),{define:t.define,require:t.require}}(),function(t){function e(e,n,i){var r=t.Event(n);return e.trigger(r,i),r.result!==!1}t(document).on("click","[data-trigger='modal'], [data-trigger='nifty']",function(){var e=t(this).data("target");t(e).nifty("show")}),t(document).on("click",".md-overlay",function(){t(".nifty-modal.md-show").nifty("hide")}),t(document).on("click",".nifty-modal.md-show .md-close",function(){t(this).closest(".nifty-modal.md-show").nifty("hide")}),t.fn.extend({nifty:function(n){var i=this,r="transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",o=function(n){var o=!1;if(e(t(i),"show.nifty.modal")){t(i).one(r,function(e){o||(o=!0,e.preventDefault(),e.stopPropagation(),t(i).trigger("shown.nifty.modal"))});var s=Math.floor(t(i).width()/2),a=Math.floor(t(i).height()/2);t(".nifty-modal").css("transform","translateX(-"+s+"px) translateY(-"+a+"px)"),t(i).addClass("md-show")}},s=function(){var n=!1;e(t(i),"hide.nifty.modal")&&(t(i).one(r,function(e){n||(n=!0,e.preventDefault(),e.stopPropagation(),t(i).trigger("hidden.nifty.modal"))}),t(i).removeClass("md-show"))};return"show"==n?o():"hide"==n&&s(),this}})}(jQuery),function(){var t;t=function(){function t(t,e){var n,i;if(this.options={target:"instafeed",get:"popular",resolution:"thumbnail",sortBy:"none",links:!0,mock:!1,useHttp:!1},"object"==typeof t)for(n in t)i=t[n],this.options[n]=i;this.context=null!=e?e:this,this.unique=this._genKey()}return t.prototype.hasNext=function(){return"string"==typeof this.context.nextUrl&&this.context.nextUrl.length>0},t.prototype.next=function(){return this.hasNext()?this.run(this.context.nextUrl):!1},t.prototype.run=function(e){var n,i,r;if("string"!=typeof this.options.clientId&&"string"!=typeof this.options.accessToken)throw new Error("Missing clientId or accessToken.");if("string"!=typeof this.options.accessToken&&"string"!=typeof this.options.clientId)throw new Error("Missing clientId or accessToken.");return null!=this.options.before&&"function"==typeof this.options.before&&this.options.before.call(this),"undefined"!=typeof document&&null!==document&&(r=document.createElement("script"),r.id="instafeed-fetcher",r.src=e||this._buildUrl(),n=document.getElementsByTagName("head"),n[0].appendChild(r),i="instafeedCache"+this.unique,window[i]=new t(this.options,this),window[i].unique=this.unique),!0},t.prototype.parse=function(t){var e,n,i,r,o,s,a,l,u,c,d,h,p,f,m,g,v,y,b,w,S,_,x,T,C,D,E,A,I,P,k,L,$;if("object"!=typeof t){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"Invalid JSON data"),!1;throw new Error("Invalid JSON response")}if(200!==t.meta.code){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,t.meta.error_message),!1;throw new Error("Error from Instagram: "+t.meta.error_message)}if(0===t.data.length){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"No images were returned from Instagram"),!1;throw new Error("No images were returned from Instagram")}if(null!=this.options.success&&"function"==typeof this.options.success&&this.options.success.call(this,t),this.context.nextUrl="",null!=t.pagination&&(this.context.nextUrl=t.pagination.next_url),"none"!==this.options.sortBy)switch(k="random"===this.options.sortBy?["","random"]:this.options.sortBy.split("-"),P="least"===k[0]?!0:!1,k[1]){case"random":t.data.sort(function(){return.5-Math.random()});break;case"recent":t.data=this._sortBy(t.data,"created_time",P);break;case"liked":t.data=this._sortBy(t.data,"likes.count",P);break;case"commented":t.data=this._sortBy(t.data,"comments.count",P);break;default:throw new Error("Invalid option for sortBy: '"+this.options.sortBy+"'.")}if("undefined"!=typeof document&&null!==document&&this.options.mock===!1){if(g=t.data,I=parseInt(this.options.limit,10),null!=this.options.limit&&g.length>I&&(g=g.slice(0,I)),a=document.createDocumentFragment(),null!=this.options.filter&&"function"==typeof this.options.filter&&(g=this._filter(g,this.options.filter)),null!=this.options.template&&"string"==typeof this.options.template){for(u="",f="",w="",$=document.createElement("div"),d=0,C=g.length;C>d;d++){if(h=g[d],p=h.images[this.options.resolution],"object"!=typeof p)throw s="No image found for resolution: "+this.options.resolution+".",new Error(s);S=p.width,y=p.height,b="square",S>y&&(b="landscape"),y>S&&(b="portrait"),m=p.url,c=window.location.protocol.indexOf("http")>=0,c&&!this.options.useHttp&&(m=m.replace(/https?:\/\//,"//")),f=this._makeTemplate(this.options.template,{model:h,id:h.id,link:h.link,type:h.type,image:m,width:S,height:y,orientation:b,caption:this._getObjectProperty(h,"caption.text"),likes:h.likes.count,comments:h.comments.count,location:this._getObjectProperty(h,"location.name")}),u+=f}for($.innerHTML=u,r=[],i=0,n=$.childNodes.length;n>i;)r.push($.childNodes[i]),i+=1;for(x=0,D=r.length;D>x;x++)A=r[x],a.appendChild(A)}else for(T=0,E=g.length;E>T;T++){if(h=g[T],v=document.createElement("img"),p=h.images[this.options.resolution],"object"!=typeof p)throw s="No image found for resolution: "+this.options.resolution+".",new Error(s);m=p.url,c=window.location.protocol.indexOf("http")>=0,c&&!this.options.useHttp&&(m=m.replace(/https?:\/\//,"//")),v.src=m,this.options.links===!0?(e=document.createElement("a"),e.href=h.link,e.appendChild(v),a.appendChild(e)):a.appendChild(v)}if(L=this.options.target,"string"==typeof L&&(L=document.getElementById(L)),null==L)throw s='No element with id="'+this.options.target+'" on page.',new Error(s);L.appendChild(a),l=document.getElementsByTagName("head")[0],l.removeChild(document.getElementById("instafeed-fetcher")),_="instafeedCache"+this.unique,window[_]=void 0;try{delete window[_]}catch(O){o=O}}return null!=this.options.after&&"function"==typeof this.options.after&&this.options.after.call(this),!0},t.prototype._buildUrl=function(){var t,e,n;switch(t="https://api.instagram.com/v1",this.options.get){case"popular":e="media/popular";break;case"tagged":if(!this.options.tagName)throw new Error("No tag name specified. Use the 'tagName' option.");e="tags/"+this.options.tagName+"/media/recent";break;case"location":if(!this.options.locationId)throw new Error("No location specified. Use the 'locationId' option.");e="locations/"+this.options.locationId+"/media/recent";break;case"user":if(!this.options.userId)throw new Error("No user specified. Use the 'userId' option.");e="users/"+this.options.userId+"/media/recent";break;default:throw new Error("Invalid option for get: '"+this.options.get+"'.")}return n=t+"/"+e,n+=null!=this.options.accessToken?"?access_token="+this.options.accessToken:"?client_id="+this.options.clientId,null!=this.options.limit&&(n+="&count="+this.options.limit),n+="&callback=instafeedCache"+this.unique+".parse"},t.prototype._genKey=function(){var t;return t=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)},""+t()+t()+t()+t()},t.prototype._makeTemplate=function(t,e){var n,i,r,o,s;for(i=/(?:\{{2})([\w\[\]\.]+)(?:\}{2})/,n=t;i.test(n);)o=n.match(i)[1],s=null!=(r=this._getObjectProperty(e,o))?r:"",n=n.replace(i,function(){return""+s});return n},t.prototype._getObjectProperty=function(t,e){var n,i;for(e=e.replace(/\[(\w+)\]/g,".$1"),i=e.split(".");i.length;){if(n=i.shift(),!(null!=t&&n in t))return null;t=t[n]}return t},t.prototype._sortBy=function(t,e,n){var i;return i=function(t,i){var r,o;return r=this._getObjectProperty(t,e),o=this._getObjectProperty(i,e),n?r>o?1:-1:o>r?1:-1},t.sort(i.bind(this)),t},t.prototype._filter=function(t,e){var n,i,r,o,s;for(n=[],i=function(t){return e(t)?n.push(t):void 0},r=0,s=t.length;s>r;r++)o=t[r],i(o);return n},t}(),function(t,e){return"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():t.Instafeed=e()}(this,function(){return t})}.call(this),!function(t,e,n){"use strict";!function i(t,e,n){function r(s,a){if(!e[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=e[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return r(n?n:e)},c,c.exports,i,t,e,n)}return e[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(i,r,o){var s=function(t){return t&&t.__esModule?t:{"default":t}};Object.defineProperty(o,"__esModule",{value:!0});var a,l,u,c,d=i("./modules/handle-dom"),h=i("./modules/utils"),p=i("./modules/handle-swal-dom"),f=i("./modules/handle-click"),m=i("./modules/handle-key"),g=s(m),v=i("./modules/default-params"),y=s(v),b=i("./modules/set-params"),w=s(b);o["default"]=u=c=function(){function i(t){var e=r;return e[t]===n?y["default"][t]:e[t]}var r=arguments[0];if(d.addClass(e.body,"stop-scrolling"),p.resetInput(),r===n)return h.logStr("SweetAlert expects at least 1 attribute!"),!1;var o=h.extend({},y["default"]);switch(typeof r){case"string":o.title=r,o.text=arguments[1]||"",o.type=arguments[2]||"";break;case"object":if(r.title===n)return h.logStr('Missing "title" argument!'),!1;o.title=r.title;for(var s in y["default"])o[s]=i(s);o.confirmButtonText=o.showCancelButton?"Confirm":y["default"].confirmButtonText,o.confirmButtonText=i("confirmButtonText"),o.doneFunction=arguments[1]||null;break;default:return h.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof r),!1}w["default"](o),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var u=p.getModal(),m=u.querySelectorAll("button"),v=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],b=function(t){return f.handleButton(t,o,u)},S=0;S<m.length;S++)for(var _=0;_<v.length;_++){var x=v[_];m[S][x]=b}p.getOverlay().onclick=b,a=t.onkeydown;var T=function(t){return g["default"](t,o,u)};t.onkeydown=T,t.onfocus=function(){setTimeout(function(){l!==n&&(l.focus(),l=n)},0)},c.enableButtons()},u.setDefaults=c.setDefaults=function(t){if(!t)throw new Error("userParams is required");if("object"!=typeof t)throw new Error("userParams has to be a object");h.extend(y["default"],t)},u.close=c.close=function(){var i=p.getModal();d.fadeOut(p.getOverlay(),5),d.fadeOut(i,5),d.removeClass(i,"showSweetAlert"),d.addClass(i,"hideSweetAlert"),d.removeClass(i,"visible");var r=i.querySelector(".sa-icon.sa-success");d.removeClass(r,"animate"),d.removeClass(r.querySelector(".sa-tip"),"animateSuccessTip"),d.removeClass(r.querySelector(".sa-long"),"animateSuccessLong");var o=i.querySelector(".sa-icon.sa-error");d.removeClass(o,"animateErrorIcon"),d.removeClass(o.querySelector(".sa-x-mark"),"animateXMark");var s=i.querySelector(".sa-icon.sa-warning");return d.removeClass(s,"pulseWarning"),d.removeClass(s.querySelector(".sa-body"),"pulseWarningIns"),d.removeClass(s.querySelector(".sa-dot"),"pulseWarningIns"),setTimeout(function(){var t=i.getAttribute("data-custom-class");d.removeClass(i,t)},300),d.removeClass(e.body,"stop-scrolling"),t.onkeydown=a,t.previousActiveElement&&t.previousActiveElement.focus(),l=n,clearTimeout(i.timeout),!0},u.showInputError=c.showInputError=function(t){var e=p.getModal(),n=e.querySelector(".sa-input-error");d.addClass(n,"show");var i=e.querySelector(".sa-error-container");d.addClass(i,"show"),i.querySelector("p").innerHTML=t,setTimeout(function(){u.enableButtons()},1),e.querySelector("input").focus()},u.resetInputError=c.resetInputError=function(t){if(t&&13===t.keyCode)return!1;var e=p.getModal(),n=e.querySelector(".sa-input-error");d.removeClass(n,"show");var i=e.querySelector(".sa-error-container");d.removeClass(i,"show")},u.disableButtons=c.disableButtons=function(){var t=p.getModal(),e=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");e.disabled=!0,n.disabled=!0},u.enableButtons=c.enableButtons=function(){var t=p.getModal(),e=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");e.disabled=!1,n.disabled=!1},"undefined"!=typeof t?t.sweetAlert=t.swal=u:h.logStr("SweetAlert is a frontend module!"),r.exports=o["default"]},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(t,e,n){Object.defineProperty(n,"__esModule",{value:!0});var i={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};n["default"]=i,e.exports=n["default"]},{}],3:[function(e,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=e("./utils"),o=(e("./handle-swal-dom"),e("./handle-dom")),s=function(e,n,i){function s(t){f&&n.confirmButtonColor&&(p.style.backgroundColor=t)}var u,c,d,h=e||t.event,p=h.target||h.srcElement,f=-1!==p.className.indexOf("confirm"),m=-1!==p.className.indexOf("sweet-overlay"),g=o.hasClass(i,"visible"),v=n.doneFunction&&"true"===i.getAttribute("data-has-done-function");switch(f&&n.confirmButtonColor&&(u=n.confirmButtonColor,c=r.colorLuminance(u,-.04),d=r.colorLuminance(u,-.14)),h.type){case"mouseover":s(c);break;case"mouseout":s(u);break;case"mousedown":s(d);break;case"mouseup":s(c);break;case"focus":var y=i.querySelector("button.confirm"),b=i.querySelector("button.cancel");f?b.style.boxShadow="none":y.style.boxShadow="none";break;case"click":var w=i===p,S=o.isDescendant(i,p);if(!w&&!S&&g&&!n.allowOutsideClick)break;f&&v&&g?a(i,n):v&&g||m?l(i,n):o.isDescendant(i,p)&&"BUTTON"===p.tagName&&sweetAlert.close()}},a=function(t,e){var n=!0;o.hasClass(t,"show-input")&&(n=t.querySelector("input").value,n||(n="")),e.doneFunction(n),e.closeOnConfirm&&sweetAlert.close(),e.showLoaderOnConfirm&&sweetAlert.disableButtons()},l=function(t,e){var n=String(e.doneFunction).replace(/\s/g,""),i="function("===n.substring(0,9)&&")"!==n.substring(9,10);i&&e.doneFunction(!1),e.closeOnCancel&&sweetAlert.close()};i["default"]={handleButton:s,handleConfirm:a,handleCancel:l},n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(n,i,r){Object.defineProperty(r,"__esModule",{value:!0});var o=function(t,e){return new RegExp(" "+e+" ").test(" "+t.className+" ")},s=function(t,e){o(t,e)||(t.className+=" "+e)},a=function(t,e){var n=" "+t.className.replace(/[\t\r\n]/g," ")+" ";if(o(t,e)){for(;n.indexOf(" "+e+" ")>=0;)n=n.replace(" "+e+" "," ");t.className=n.replace(/^\s+|\s+$/g,"")}},l=function(t){var n=e.createElement("div");return n.appendChild(e.createTextNode(t)),n.innerHTML},u=function(t){t.style.opacity="",t.style.display="block"},c=function(t){if(t&&!t.length)return u(t);for(var e=0;e<t.length;++e)u(t[e])},d=function(t){t.style.opacity="",t.style.display="none"},h=function(t){if(t&&!t.length)return d(t);for(var e=0;e<t.length;++e)d(t[e])},p=function(t,e){for(var n=e.parentNode;null!==n;){if(n===t)return!0;n=n.parentNode}return!1},f=function(t){t.style.left="-9999px",t.style.display="block";var e,n=t.clientHeight;return e="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(t).getPropertyValue("padding-top"),10):parseInt(t.currentStyle.padding),t.style.left="",t.style.display="none","-"+parseInt((n+e)/2)+"px"},m=function(t,e){if(+t.style.opacity<1){e=e||16,t.style.opacity=0,t.style.display="block";var n=+new Date,i=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){t.style.opacity=+t.style.opacity+(new Date-n)/100,n=+new Date,+t.style.opacity<1&&setTimeout(i,e)});i()}t.style.display="block"},g=function(t,e){e=e||16,t.style.opacity=1;var n=+new Date,i=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){t.style.opacity=+t.style.opacity-(new Date-n)/100,n=+new Date,+t.style.opacity>0?setTimeout(i,e):t.style.display="none"});i()},v=function(n){if("function"==typeof MouseEvent){var i=new MouseEvent("click",{view:t,bubbles:!1,cancelable:!0});n.dispatchEvent(i)}else if(e.createEvent){var r=e.createEvent("MouseEvents");r.initEvent("click",!1,!1),n.dispatchEvent(r)}else e.createEventObject?n.fireEvent("onclick"):"function"==typeof n.onclick&&n.onclick()},y=function(e){"function"==typeof e.stopPropagation?(e.stopPropagation(),e.preventDefault()):t.event&&t.event.hasOwnProperty("cancelBubble")&&(t.event.cancelBubble=!0)};r.hasClass=o,r.addClass=s,r.removeClass=a,r.escapeHtml=l,r._show=u,r.show=c,r._hide=d,r.hide=h,r.isDescendant=p,r.getTopMargin=f,r.fadeIn=m,r.fadeOut=g,r.fireClick=v,r.stopEventPropagation=y},{}],5:[function(e,i,r){Object.defineProperty(r,"__esModule",{value:!0});var o=e("./handle-dom"),s=e("./handle-swal-dom"),a=function(e,i,r){var a=e||t.event,l=a.keyCode||a.which,u=r.querySelector("button.confirm"),c=r.querySelector("button.cancel"),d=r.querySelectorAll("button[tabindex]");if(-1!==[9,13,32,27].indexOf(l)){for(var h=a.target||a.srcElement,p=-1,f=0;f<d.length;f++)if(h===d[f]){p=f;break}9===l?(h=-1===p?u:p===d.length-1?d[0]:d[p+1],o.stopEventPropagation(a),h.focus(),i.confirmButtonColor&&s.setFocusStyle(h,i.confirmButtonColor)):13===l?("INPUT"===h.tagName&&(h=u,u.focus()),h=-1===p?u:n):27===l&&i.allowEscapeKey===!0?(h=c,o.fireClick(h,a)):h=n}};r["default"]=a,i.exports=r["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(n,i,r){var o=function(t){return t&&t.__esModule?t:{"default":t}};Object.defineProperty(r,"__esModule",{value:!0});var s=n("./utils"),a=n("./handle-dom"),l=n("./default-params"),u=o(l),c=n("./injected-html"),d=o(c),h=".sweet-alert",p=".sweet-overlay",f=function(){var t=e.createElement("div");for(t.innerHTML=d["default"];t.firstChild;)e.body.appendChild(t.firstChild)},m=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){var t=e.querySelector(h);return t||(f(),t=m()),t}),g=function(){var t=m();return t?t.querySelector("input"):void 0},v=function(){return e.querySelector(p)},y=function(t,e){var n=s.hexToRgb(e);t.style.boxShadow="0 0 2px rgba("+n+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},b=function(n){var i=m();a.fadeIn(v(),10),a.show(i),a.addClass(i,"showSweetAlert"),a.removeClass(i,"hideSweetAlert"),t.previousActiveElement=e.activeElement;var r=i.querySelector("button.confirm");r.focus(),setTimeout(function(){a.addClass(i,"visible")},500);var o=i.getAttribute("data-timer");if("null"!==o&&""!==o){var s=n;i.timeout=setTimeout(function(){var t=(s||null)&&"true"===i.getAttribute("data-has-done-function");t?s(null):sweetAlert.close()},o)}},w=function(){var t=m(),e=g();a.removeClass(t,"show-input"),e.value=u["default"].inputValue,e.setAttribute("type",u["default"].inputType),e.setAttribute("placeholder",u["default"].inputPlaceholder),S()},S=function(t){if(t&&13===t.keyCode)return!1;var e=m(),n=e.querySelector(".sa-input-error");a.removeClass(n,"show");var i=e.querySelector(".sa-error-container");a.removeClass(i,"show")},_=function(){var t=m();t.style.marginTop=a.getTopMargin(m())};r.sweetAlertInitialize=f,r.getModal=m,r.getOverlay=v,r.getInput=g,r.setFocusStyle=y,r.openModal=b,r.resetInput=w,r.resetInputError=S,r.fixVerticalPosition=_},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(t,e,n){Object.defineProperty(n,"__esModule",{value:!0});var i='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"]=i,e.exports=n["default"]},{}],8:[function(t,e,i){Object.defineProperty(i,"__esModule",{value:!0});var r=t("./utils"),o=t("./handle-swal-dom"),s=t("./handle-dom"),a=["error","warning","info","success","input","prompt"],l=function(t){var e=o.getModal(),i=e.querySelector("h2"),l=e.querySelector("p"),u=e.querySelector("button.cancel"),c=e.querySelector("button.confirm");if(i.innerHTML=t.html?t.title:s.escapeHtml(t.title).split("\n").join("<br>"),l.innerHTML=t.html?t.text:s.escapeHtml(t.text||"").split("\n").join("<br>"),t.text&&s.show(l),t.customClass)s.addClass(e,t.customClass),e.setAttribute("data-custom-class",t.customClass);else{var d=e.getAttribute("data-custom-class");s.removeClass(e,d),e.setAttribute("data-custom-class","")}if(s.hide(e.querySelectorAll(".sa-icon")),t.type&&!r.isIE8()){var h=function(){for(var i=!1,r=0;r<a.length;r++)if(t.type===a[r]){i=!0;break}if(!i)return logStr("Unknown alert type: "+t.type),{v:!1};var l=["success","error","warning","info"],u=n;-1!==l.indexOf(t.type)&&(u=e.querySelector(".sa-icon.sa-"+t.type),s.show(u));var c=o.getInput();switch(t.type){case"success":s.addClass(u,"animate"),s.addClass(u.querySelector(".sa-tip"),"animateSuccessTip"),s.addClass(u.querySelector(".sa-long"),"animateSuccessLong");break;case"error":s.addClass(u,"animateErrorIcon"),s.addClass(u.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":s.addClass(u,"pulseWarning"),s.addClass(u.querySelector(".sa-body"),"pulseWarningIns"),s.addClass(u.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":c.setAttribute("type",t.inputType),c.value=t.inputValue,c.setAttribute("placeholder",t.inputPlaceholder),s.addClass(e,"show-input"),setTimeout(function(){c.focus(),c.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof h)return h.v}if(t.imageUrl){var p=e.querySelector(".sa-icon.sa-custom");p.style.backgroundImage="url("+t.imageUrl+")",s.show(p);var f=80,m=80;if(t.imageSize){var g=t.imageSize.toString().split("x"),v=g[0],y=g[1];v&&y?(f=v,m=y):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+t.imageSize)}p.setAttribute("style",p.getAttribute("style")+"width:"+f+"px; height:"+m+"px")}e.setAttribute("data-has-cancel-button",t.showCancelButton),t.showCancelButton?u.style.display="inline-block":s.hide(u),e.setAttribute("data-has-confirm-button",t.showConfirmButton),t.showConfirmButton?c.style.display="inline-block":s.hide(c),t.cancelButtonText&&(u.innerHTML=s.escapeHtml(t.cancelButtonText)),t.confirmButtonText&&(c.innerHTML=s.escapeHtml(t.confirmButtonText)),t.confirmButtonColor&&(c.style.backgroundColor=t.confirmButtonColor,c.style.borderLeftColor=t.confirmLoadingButtonColor,c.style.borderRightColor=t.confirmLoadingButtonColor,o.setFocusStyle(c,t.confirmButtonColor)),e.setAttribute("data-allow-outside-click",t.allowOutsideClick);var b=t.doneFunction?!0:!1;e.setAttribute("data-has-done-function",b),t.animation?"string"==typeof t.animation?e.setAttribute("data-animation",t.animation):e.setAttribute("data-animation","pop"):e.setAttribute("data-animation","none"),e.setAttribute("data-timer",t.timer)};i["default"]=l,e.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(e,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},o=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?parseInt(e[1],16)+", "+parseInt(e[2],16)+", "+parseInt(e[3],16):null},s=function(){return t.attachEvent&&!t.addEventListener},a=function(e){t.console&&t.console.log("SweetAlert: "+e)},l=function(t,e){t=String(t).replace(/[^0-9a-f]/gi,""),t.length<6&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]),e=e||0;var n,i,r="#";for(i=0;3>i;i++)n=parseInt(t.substr(2*i,2),16),n=Math.round(Math.min(Math.max(0,n+n*e),255)).toString(16),r+=("00"+n).substr(n.length);return r};i.extend=r,i.hexToRgb=o,i.isIE8=s,i.logStr=a,i.colorLuminance=l},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document),function(t){t.fn.fitText=function(e,n){var i=e||1,r=t.extend({minFontSize:Number.NEGATIVE_INFINITY,maxFontSize:Number.POSITIVE_INFINITY},n);return this.each(function(){var e=t(this),n=function(){e.css("font-size",Math.max(Math.min(e.width()/(10*i),parseFloat(r.maxFontSize)),parseFloat(r.minFontSize)))};n(),t(window).on("resize.fittext orientationchange.fittext",n)})}}(jQuery),!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):jQuery)}(function(t){var e,n=navigator.userAgent,i=/iphone/i.test(n),r=/chrome/i.test(n),o=/android/i.test(n);t.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},t.fn.extend({caret:function(t,e){var n;return 0===this.length||this.is(":hidden")?void 0:"number"==typeof t?(e="number"==typeof e?e:t,this.each(function(){this.setSelectionRange?this.setSelectionRange(t,e):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",t),n.select())})):(this[0].setSelectionRange?(t=this[0].selectionStart,e=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),t=0-n.duplicate().moveStart("character",-1e5),e=t+n.text.length),{begin:t,end:e})},unmask:function(){return this.trigger("unmask")},mask:function(n,s){var a,l,u,c,d,h,p,f;if(!n&&this.length>0){a=t(this[0]);var m=a.data(t.mask.dataName);return m?m():void 0}return s=t.extend({autoclear:t.mask.autoclear,placeholder:t.mask.placeholder,completed:null},s),l=t.mask.definitions,u=[],c=p=n.length,d=null,t.each(n.split(""),function(t,e){"?"==e?(p--,c=t):l[e]?(u.push(new RegExp(l[e])),null===d&&(d=u.length-1),c>t&&(h=u.length-1)):u.push(null)}),this.trigger("unmask").each(function(){function a(){if(s.completed){for(var t=d;h>=t;t++)if(u[t]&&A[t]===m(t))return;s.completed.call(E)}}function m(t){return s.placeholder.charAt(t<s.placeholder.length?t:0)}function g(t){for(;++t<p&&!u[t];);return t}function v(t){for(;--t>=0&&!u[t];);return t}function y(t,e){var n,i;if(!(0>t)){
for(n=t,i=g(e);p>n;n++)if(u[n]){if(!(p>i&&u[n].test(A[i])))break;A[n]=A[i],A[i]=m(i),i=g(i)}C(),E.caret(Math.max(d,t))}}function b(t){var e,n,i,r;for(e=t,n=m(t);p>e;e++)if(u[e]){if(i=g(e),r=A[e],A[e]=n,!(p>i&&u[i].test(r)))break;n=r}}function w(){var t=E.val(),e=E.caret();if(f&&f.length&&f.length>t.length){for(D(!0);e.begin>0&&!u[e.begin-1];)e.begin--;if(0===e.begin)for(;e.begin<d&&!u[e.begin];)e.begin++;E.caret(e.begin,e.begin)}else{for(D(!0);e.begin<p&&!u[e.begin];)e.begin++;E.caret(e.begin,e.begin)}a()}function S(){D(),E.val()!=P&&E.change()}function _(t){if(!E.prop("readonly")){var e,n,r,o=t.which||t.keyCode;f=E.val(),8===o||46===o||i&&127===o?(e=E.caret(),n=e.begin,r=e.end,r-n===0&&(n=46!==o?v(n):r=g(n-1),r=46===o?g(r):r),T(n,r),y(n,r-1),t.preventDefault()):13===o?S.call(this,t):27===o&&(E.val(P),E.caret(0,D()),t.preventDefault())}}function x(e){if(!E.prop("readonly")){var n,i,r,s=e.which||e.keyCode,l=E.caret();if(!(e.ctrlKey||e.altKey||e.metaKey||32>s)&&s&&13!==s){if(l.end-l.begin!==0&&(T(l.begin,l.end),y(l.begin,l.end-1)),n=g(l.begin-1),p>n&&(i=String.fromCharCode(s),u[n].test(i))){if(b(n),A[n]=i,C(),r=g(n),o){var c=function(){t.proxy(t.fn.caret,E,r)()};setTimeout(c,0)}else E.caret(r);l.begin<=h&&a()}e.preventDefault()}}}function T(t,e){var n;for(n=t;e>n&&p>n;n++)u[n]&&(A[n]=m(n))}function C(){E.val(A.join(""))}function D(t){var e,n,i,r=E.val(),o=-1;for(e=0,i=0;p>e;e++)if(u[e]){for(A[e]=m(e);i++<r.length;)if(n=r.charAt(i-1),u[e].test(n)){A[e]=n,o=e;break}if(i>r.length){T(e+1,p);break}}else A[e]===r.charAt(i)&&i++,c>e&&(o=e);return t?C():c>o+1?s.autoclear||A.join("")===I?(E.val()&&E.val(""),T(0,p)):C():(C(),E.val(E.val().substring(0,o+1))),c?e:d}var E=t(this),A=t.map(n.split(""),function(t,e){return"?"!=t?l[t]?m(e):t:void 0}),I=A.join(""),P=E.val();E.data(t.mask.dataName,function(){return t.map(A,function(t,e){return u[e]&&t!=m(e)?t:null}).join("")}),E.one("unmask",function(){E.off(".mask").removeData(t.mask.dataName)}).on("focus.mask",function(){if(!E.prop("readonly")){clearTimeout(e);var t;P=E.val(),t=D(),e=setTimeout(function(){E.get(0)===document.activeElement&&(C(),t==n.replace("?","").length?E.caret(0,t):E.caret(t))},10)}}).on("blur.mask",S).on("keydown.mask",_).on("keypress.mask",x).on("input.mask paste.mask",function(){E.prop("readonly")||setTimeout(function(){var t=D(!0);E.caret(t),a()},0)}),r&&o&&E.off("input.mask").on("input.mask",w),D()})}})});var iosOverlay=function(t){var e,n=function(){},i={onbeforeshow:n,onshow:n,onbeforehide:n,onhide:n,text:"",icon:null,spinner:null,duration:null,id:null,parentEl:null},r=function(t,e){var n={};for(var i in t)n[i]=t[i];for(var r in e)n[r]=e[r];return n},o=function(){var t=document.body||document.documentElement,e=t.style,n="transition";if("string"==typeof e[n])return!0;var i=["Moz","Webkit","Khtml","O","ms"];n=n.charAt(0).toUpperCase()+n.substr(1);for(var r=0;r<i.length;r++)if("string"==typeof e[i[r]+n])return!0;return!1}(),s=r(i,t),a=function(t){"ios-overlay-show"===t.animationName&&s.onshow(),"ios-overlay-hide"===t.animationName&&(u(),s.onhide())},l=(function(){e=document.createElement("div"),e.className="ui-ios-overlay",e.innerHTML+='<span class="title">'+s.text+"</span",t.icon?e.innerHTML+='<img src="'+t.icon+'">':t.spinner&&e.appendChild(t.spinner.el),o&&(e.addEventListener("webkitAnimationEnd",a,!1),e.addEventListener("msAnimationEnd",a,!1),e.addEventListener("oAnimationEnd",a,!1),e.addEventListener("animationend",a,!1)),t.parentEl?document.getElementById(t.parentEl).appendChild(e):document.body.appendChild(e),s.onbeforeshow(),o?e.className+=" ios-overlay-show":"function"==typeof $&&$(e).fadeIn({duration:200},function(){s.onshow()}),s.duration&&window.setTimeout(function(){l()},s.duration)}(),function(){s.onbeforehide(),o?e.className=e.className.replace("show","hide"):"function"==typeof $&&$(e).fadeOut({duration:200},function(){u(),s.onhide()})}),u=function(){t.parentEl?document.getElementById(t.parentEl).removeChild(e):document.body.removeChild(e)},c=function(t){t.text&&(e.getElementsByTagName("span")[0].innerHTML=t.text),t.icon&&(s.spinner&&(s.spinner.el.parentNode.removeChild(s.spinner.el),s.spinner=null),e.innerHTML+='<img src="'+t.icon+'">')};return{hide:l,destroy:u,update:c}};if("function"==typeof define&&define.amd&&define([],function(){return iosOverlay}),$(".index_page").length)var cart=window.document.querySelector(".cart"),cartItems=cart.querySelector(".cart__count");var delivery=$.cookie("delivery");$("#inputPhone").length&&$("#inputPhone").mask("+79999999999",{autoclear:!1}),$("#phone").length&&$("#phone").mask("+79999999999",{autoclear:!1});var summ,dataTable=$("#tableOrder").DataTable({language:{emptyTable:"Корзина пуста"}});if($(".userIsAuch .full_price, .borderLeft .full_price").length){var full_price=sessionStorage.getItem("cart_price");console.log(full_price),$(".full_price").text(full_price),initIfhaveSession(),delivery_func(),$("#adressAuch").select2({maximumSelectionLength:1,tags:!0,data:data})}$(".userIsAuch h2, .borderLeft  h2 ").click(function(){$(".checkOut").addClass("isUp")});var tableOrder=$("#tableOrder tbody");tableOrder.on("mouseenter","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".action--like").click(function(t){var e=$(this);console.log(e),$.getJSON("/like_add",{like:$(this).val()},function(t){"adfavorited"==t.result?(e.find("i").addClass("fa-heart"),e.find("i").removeClass("fa-heart-o"),swal({title:"Ура!",text:"Добавлено в избранное!",timer:1500,type:"success",showConfirmButton:!1})):"delete"==t.result?(e.find("i").addClass("fa-heart-o"),e.find("i").removeClass("fa-heart"),swal({title:"Упс!",text:"Удалено из избранного!",timer:1500,type:"error",showConfirmButton:!1})):0==t.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:1500,type:"error",showConfirmButton:!1})})}),$("#auch-menu-btn").click(function(t){$.getJSON("/auch",{login:$("#inputPhone").val(),password:$("#inputPassword").val()},function(t){console.log(t.result),1==t.result?swal({title:"Ура!",text:"Вход выполнен успешно!",timer:2e3,type:"success",showConfirmButton:!1},function(){location.reload()}):swal({title:"Упс!",text:"Такого пользоваеля не существует, либо пароль введен неправильно",type:"error",showConfirmButton:!0})})}),$("input:radio[name=group2]").change(function(){$.cookie("delivery",this.value,{expires:7}),$(".full span").text(calculateSumm())}),$("input:radio[name=group1]").change(function(){$.cookie("delivery",this.value,{expires:7}),$("#select_delivery").nifty("hide"),$("input:radio[name=group2][value='"+$.cookie("delivery")+"']").prop({checked:!0}),$(".full span").text(calculateSumm())}),tableOrder.on("mouseleave","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".pw-reset a, #restorePass").click(function(){var t=$("#inputPhone");""!=t.val()?$.getJSON("/pwreset",{login:t.val()},function(t){console.log(t),"sent"==t.result?swal("Пароль востановлен!","Новый пароль отправлен на вашу почту!","success"):0==t.result?swal("Упс!","Такого пользователя нет!","error"):2==t.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:2e3,showConfirmButton:!0})}):swal("Упс!","Необходимо ввести телефон!","warning")}),$(".checkOut input[type=number]").keypress(function(t){return t=t||window.event,t.charCode&&(t.charCode<48||t.charCode>57)?!1:void $(".full span").text(calculateSumm())}),$(document).keyup(function(t){27==t.keyCode&&$(".popUp").removeClass("isUp")}),$(".one--buy").click(function(){var t=jQuery.parseJSON($(this).attr("data-items"));1==t.item_category?(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect(),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())):(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>"," ","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())),cartItems.innerHTML=Number(cartItems.innerHTML)+1,iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"})}),jQuery(document).ready(function(){if($(".index_page").length){var t=$("#tableOrder");t.on("click",".delete",function(t){dataTable.row(".selected").remove().draw(!1),cartItems.innerHTML=Number(cartItems.innerHTML)-1,$(".full span").text(calculateSumm())})}}),$("#orderNow").click(function(t){window.location.href="/order"});var data=[{id:1,text:"г.Нижневартовск"},{id:2,text:"г.Мегион"},{id:3,text:"г.Лангепас"}];$(".slider__item").click(function(t){$(".preloader").show(),$(".popUp").addClass("isUp"),$.ajax({type:"POST",contentType:"application/json",dataType:"json",url:"/get_one_item/"+$(this).attr("data-id-item"),success:function(t){$("#one_img").attr({src:"static/upload/"+t.result.imgs});var e={item_id:t.result.item_id,item_name:t.result.name,item_price:t.result.price,item_component:t.result.components,item_weight:t.result.weight,item_category:t.result.category};$(".aboutProduct .action--buy").attr({value:t.result.id,"data-items":JSON.stringify(e)}),arrays_one=t.result.components.split(","),""==arrays_one[0]?$(".aboutProduct h3").hide():$(".aboutProduct h3").show(),$("#one_array").empty(),$.each(arrays_one,function(t){$("<li/>").text(arrays_one[t]).appendTo($("#one_array"))}),$("#one_weight").text(t.result.weight),$("#one_name").text(t.result.name),$(".preloader").hide()}}),jQuery("#one_name").fitText()}),$(".closebtn").click(function(t){$(".popUp").removeClass("isUp")}),$(".cart, .showCart").click(function(t){0==calculateSumm()?iosOverlay({text:"Корзина пуста",duration:2e3,icon:"static/img/cross.png"}):($(".full span").text(calculateSumm()),$(".checkOut").addClass("isUp"))}),$(".closezakazbtn").click(function(t){$(".checkOut").removeClass("isUp")}),$(function(){if($(".index_page").length){var t=$("#bar"),e=$(".view"),n=$(".cart"),i=t.offset().top-parseFloat(t.css("margin-top"));$(window).scroll(function(r){var o=$(this).scrollTop();o>=i?(t.addClass("fixed"),e.addClass("col-md-offset-2"),n.addClass("cartAbsolute cartPerc")):(t.removeClass("fixed"),e.removeClass("col-md-offset-2"),n.removeClass("cartAbsolute cartPerc"))})}}),function(t){"use strict";function e(t,e){var n=!0;return function(i){n&&(n=!1,setTimeout(function(){n=!0},e),t(i))}}function n(){$(".index_page").length&&imagesLoaded(f,function(){i(),r(),o(),delivery_func(),initIfhaveSession(),classie.remove(f,"grid--loading"),jQuery(".seq-title h2").fitText(),$(".preloader").hide()})}function i(){}function r(){h=new Isotope(f,{isResizeBound:!1,itemSelector:".grid__item",percentPosition:!0,masonry:{columnWidth:".grid__sizer"},transitionDuration:"0.6s"})}function o(){m.forEach(function(t){t.addEventListener("click",function(){classie.remove(t.parentNode.querySelector(".filter__item--selected"),"filter__item--selected"),classie.add(t,"filter__item--selected"),h.arrange({filter:t.getAttribute("data-filter")}),a(),h.layout()})}),t.addEventListener("resize",e(function(t){a(),h.layout()},50)),[].slice.call(f.querySelectorAll(".grid__item")).forEach(function(t){t.querySelector(".items-buy").addEventListener("click",s)})}function s(){var t=jQuery.parseJSON($(this).attr("data-items"));"Вторая"==t.item_category?(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect(),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())):(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>"," ","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"}),classie.add(g,"cart--animate"),setTimeout(function(){v.innerHTML=Number(v.innerHTML)+1},200),d(v,function(){classie.remove(g,"cart--animate")})}function a(){for(var t=0,e=p.length;e>t;++t)p[t].resize()}var l={animations:Modernizr.cssanimations},u={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd",animation:"animationend"},c=u[Modernizr.prefixed("animation")],d=function(t,e){var n=function(t){if(l.animations){if(t.target!=this)return;this.removeEventListener(c,n)}e&&"function"==typeof e&&e.call()};l.animations?t.addEventListener(c,n):n()};if($(".index_page").length)var h,p=([].slice.call(document.querySelectorAll(".slider")),[]),f=document.querySelector(".grid"),m=[].slice.call(document.querySelectorAll(".filter > button")),g=document.querySelector(".cart"),v=g.querySelector(".cart__count");n()}(window);
//# sourceMappingURL=data:application/json;base64,
