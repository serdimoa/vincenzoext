function defineSequence(t,e){"use strict";var n=[],i=0,o=function(o,r){function s(t){return"[object Array]"===Object.prototype.toString.call(t)?!0:!1}function a(t,e){for(var n in e)t[n]=e[n];return t}function l(t,e){var n;return t.currentStyle?n=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(n=document.defaultView.getComputedStyle(t,"")[e]),n}function u(t,e,n){if(t.addEventListener)return t.addEventListener(e,n,!1),n;if(t.attachEvent){var i=function(){n.call(t)};return t.attachEvent("on"+e,i),i}}function c(t,e,n){t.addEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&t.detachEvent("on"+e,n)}function d(t){var e,n;return n=t.indexOf("ms")>-1?1:1e3,e="0s"==t?0:parseFloat(t.replace("s",""))*n}function h(t,e){return void 0!==t?new RegExp("(\\s|^)"+e+"(\\s|$)").test(t.className):void 0}function p(t,e){var n,i,o;for(s(t)===!1&&(i=1,t=[t]),i=t.length,o=0;i>o;o++)n=t[o],h(n,e)===!1&&(n.className+=(n.className?" ":"")+e)}function f(t,e){var n,i,o;for(s(t)===!1?(i=1,t=[t]):i=t.length,o=0;i>o;o++)n=t[o],h(n,e)===!0&&(n.className=n.className.replace(new RegExp("(\\s|^)"+e+"(\\s|$)")," ").replace(/^\s+|\s+$/g,""))}function m(t,e){var n=t.getBoundingClientRect(),i=!1;return e.clientX>=n.left&&e.clientX<=n.right&&e.clientY>=n.top&&e.clientY<=n.bottom&&(i=!0),i}function g(t,e,n){if("BODY"===e.nodeName)return!1;if(t!==e)return n=e,g(t,e.parentNode,n);if(void 0!==n)for(var i=n,o=t.getElementsByTagName(i.nodeName),r=o.length;r--;)if(i===o[r])return r+1}function v(t){var n=0,i=e.DIRECTION_NONE;return(void 0!==t.left||void 0!==t.right)&&(n+=1),(void 0!==t.up||void 0!==t.down)&&(n+=2),1===n?i=e.DIRECTION_HORIZONTAL:2===n?i=e.DIRECTION_VERTICAL:3===n&&(i=e.DIRECTION_ALL),i}function y(t,e){var n="seq-",i="no-touch";e.touch===!0&&(i="touch"),p(t,n+i)}var b=o.getAttribute("data-seq-enabled");if(null!==b)return n[b];o.setAttribute("data-seq-enabled",i),i++;var w={startingStepId:1,startingStepAnimatesIn:!1,cycle:!0,phaseThreshold:!0,reverseWhenNavigatingBackwards:!1,reverseTimingFunctionWhenNavigatingBackwards:!1,moveActiveStepToTop:!0,animateCanvas:!0,animateCanvasDuration:250,autoPlay:!1,autoPlayInterval:5e3,autoPlayDelay:null,autoPlayDirection:1,autoPlayButton:!0,autoPlayPauseOnHover:!0,navigationSkip:!0,navigationSkipThreshold:250,fadeStepWhenSkipped:!0,fadeStepTime:500,ignorePhaseThresholdWhenSkipped:!1,preventReverseSkipping:!1,nextButton:!0,prevButton:!0,pagination:!0,preloader:!1,preloadTheseSteps:[1],preloadTheseImages:[],hideStepsUntilPreloaded:!1,pausePreloader:!1,keyNavigation:!1,numericKeysGoToSteps:!1,keyEvents:{left:function(t){t.prev()},right:function(t){t.next()}},swipeNavigation:!0,swipeEvents:{left:function(t){t.next()},right:function(t){t.prev()},up:void 0,down:void 0},swipeHammerOptions:{},hashTags:!1,hashDataAttribute:!1,hashChangesOnFirstStep:!1,fallback:{speed:500}},S=50,_=100,x={animation:{WebkitAnimation:"-webkit-",animation:""}},T=function(t,e,n){function i(t){v.cssText=t}function o(t,e){return typeof t===e}function r(t,e){return!!~(""+t).indexOf(e)}function s(t,e){for(var i in t){var o=t[i];if(!r(o,"-")&&v[o]!==n)return"pfx"==e?o:!0}return!1}function a(t,e,i){for(var r in t){var s=e[t[r]];if(s!==n)return i===!1?t[r]:o(s,"function")?s.bind(i||e):s}return!1}function l(t,e,n){var i=t.charAt(0).toUpperCase()+t.slice(1),r=(t+" "+w.join(i+" ")+i).split(" ");return o(e,"string")||o(e,"undefined")?s(r,e):(r=(t+" "+S.join(i+" ")+i).split(" "),a(r,e,n))}var u,c,d,h="2.8.3",p={},f=e.documentElement,m="modernizr",g=e.createElement(m),v=g.style,y=({}.toString," -webkit- -moz- -o- -ms- ".split(" ")),b="Webkit Moz O ms",w=b.split(" "),S=b.toLowerCase().split(" "),_={svg:"http://www.w3.org/2000/svg"},x={},T=[],C=T.slice,D=function(t,n,i,o){var r,s,a,l,u=e.createElement("div"),c=e.body,d=c||e.createElement("body");if(parseInt(i,10))for(;i--;)a=e.createElement("div"),a.id=o?o[i]:m+(i+1),u.appendChild(a);return r=["&#173;",'<style id="s',m,'">',t,"</style>"].join(""),u.id=m,(c?u:d).innerHTML+=r,d.appendChild(u),c||(d.style.background="",d.style.overflow="hidden",l=f.style.overflow,f.style.overflow="hidden",f.appendChild(d)),s=n(u,t),c?u.parentNode.removeChild(u):(d.parentNode.removeChild(d),f.style.overflow=l),!!s},E={}.hasOwnProperty;d=o(E,"undefined")||o(E.call,"undefined")?function(t,e){return e in t&&o(t.constructor.prototype[e],"undefined")}:function(t,e){return E.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var n=C.call(arguments,1),i=function(){if(this instanceof i){var o=function(){};o.prototype=e.prototype;var r=new o,s=e.apply(r,n.concat(C.call(arguments)));return Object(s)===s?s:r}return e.apply(t,n.concat(C.call(arguments)))};return i}),x.touch=function(){var n;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?n=!0:D(["@media (",y.join("touch-enabled),("),m,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){n=9===t.offsetTop}),n},x.cssanimations=function(){return l("animationName")},x.csstransforms=function(){return!!l("transform")},x.csstransitions=function(){return l("transition")},x.svg=function(){return!!e.createElementNS&&!!e.createElementNS(_.svg,"svg").createSVGRect};for(var A in x)d(x,A)&&(c=A.toLowerCase(),p[c]=x[A](),T.push((p[c]?"":"no-")+c));return p.addTest=function(t,e){if("object"==typeof t)for(var i in t)d(t,i)&&p.addTest(i,t[i]);else{if(t=t.toLowerCase(),p[t]!==n)return p;e="function"==typeof e?e():e,"undefined"!=typeof enableClasses&&enableClasses&&(f.className+=" "+(e?"":"no-")+t),p[t]=e}return p},i(""),g=u=null,p._version=h,p._prefixes=y,p._domPrefixes=S,p._cssomPrefixes=w,p.testProp=function(t){return s([t])},p.testAllProps=l,p.testStyles=D,p.prefixed=function(t,e,n){return e?l(t,e,n):l(t,"pfx")},p}(window,window.document);Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){if(void 0===this||null===this)throw new TypeError('"this" is null or not defined');var n=this.length>>>0;for(e=+e||0,Math.abs(e)===1/0&&(e=0),0>e&&(e+=n,0>e&&(e=0));n>e;e++)if(this[e]===t)return e;return-1});var C,D;"undefined"!=typeof document.hidden?(C="hidden",D="visibilitychange"):"undefined"!=typeof document.mozHidden?(C="mozHidden",D="mozvisibilitychange"):"undefined"!=typeof document.msHidden?(C="msHidden",D="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(C="webkitHidden",D="webkitvisibilitychange");var E={modernizr:T};return E.ui={defaultElements:{nextButton:"seq-next",prevButton:"seq-prev",autoPlayButton:"seq-autoplay",pagination:"seq-pagination",preloader:"seq-preloader"},getElements:function(t,e){var n,i,o,r,s,a=[];for(i=e===!0?document.querySelectorAll("."+this.defaultElements[t]):document.querySelectorAll(e),o=i.length,s=0;o>s;s++)n=i[s],r=n.getAttribute("rel"),(null===r||r===E.$container.getAttribute("id"))&&a.push(n);return a},show:function(t,e){E.propertySupport.transitions===!0?(t.style[T.prefixed("transitionDuration")]=e+"ms",t.style[T.prefixed("transitionProperty")]="opacity, "+T.prefixed("transform"),t.style.opacity=1):E.animationFallback.animate(t,"opacity","",0,1,e)},hide:function(t,e,n){E.propertySupport.transitions===!0?(t.style[T.prefixed("transitionDuration")]=e+"ms",t.style[T.prefixed("transitionProperty")]="opacity, "+T.prefixed("transform"),t.style.opacity=0):E.animationFallback.animate(t,"opacity","",1,0,e),void 0!==n&&(E.hideTimer=setTimeout(function(){n()},e))}},E.autoPlay={init:function(){E.isAutoPlayPaused=!1,E.isAutoPlaying=!1},getDelay:function(t,e,n){switch(t){case!0:t=null===e?n:e;break;case!1:case void 0:t=0}return t},start:function(t,e){if(E.isAutoPlaying===!0||E.isReady===!1)return!1;var n=E.options;return t=this.getDelay(t,n.autoPlayDelay,n.autoPlayInterval),void 0===e&&E.started(E),p(E.$container,"seq-autoplaying"),p(E.$autoPlay,"seq-autoplaying"),n.autoPlay=!0,E.isAutoPlaying=!0,E.isAnimating===!1&&(E.autoPlayTimer=setTimeout(function(){1===n.autoPlayDirection?E.next():E.prev()},t)),!0},stop:function(){return E.options.autoPlay!==!0||E.isAutoPlaying!==!0?!1:(E.options.autoPlay=!1,E.isAutoPlaying=!1,clearTimeout(E.autoPlayTimer),f(E.$container,"seq-autoplaying"),f(E.$autoPlay,"seq-autoplaying"),E.stopped(E),!0)},unpause:function(){return E.isAutoPlayPaused!==!0?!1:(E.isAutoPlayPaused=!1,this.start(!0),!0)},pause:function(){return E.options.autoPlay!==!0?!1:(E.isAutoPlayPaused=!0,this.stop(),!0)}},E.canvas={init:function(t){void 0!==E.$screen&&(E.$screen.style.height="100%",E.$screen.style.width="100%"),E.canvas.getTransformProperties()},getSteps:function(t){var e,n,i,o=[],r=t.children,s=r.length;for(E.stepProperties={},i=0;s>i;i++)n=r[i],e=i+1,o.push(n),E.stepProperties[e]={},E.stepProperties[e].isActive=!1;return o},getTransformProperties:function(){var t,e,n,i;for(t=0;t<E.noOfSteps;t++)e=E.$steps[t],n=t+1,i={seqX:0,seqY:0,seqZ:0},i.seqX+=-1*e.offsetLeft,i.seqY+=-1*e.offsetTop,E.stepProperties[n].canvasTransform=i},move:function(t,e){if(E.options.animateCanvas===!0){var n,i=0;return e===!0&&E.firstRun===!1&&(i=E.options.animateCanvasDuration),E.isFallbackMode===!1&&(n=E.stepProperties[t].canvasTransform,E.$canvas.style[T.prefixed("transitionDuration")]=i+"ms",E.$canvas.style[T.prefixed("transform")]="translateX("+n.seqX+"px) translateY("+n.seqY+"px) translateZ("+n.seqZ+"px) "),!0}return!1},removeNoJsClass:function(){if(E.isFallbackMode!==!0)for(var t=0;t<E.$steps.length;t++){var e=E.$steps[t];if(h(e,"seq-in")===!0){var n=t+1;E.animation.resetInheritedSpeed(n),f(e,"seq-in")}}}},E.animation={getPhaseProperties:function(t){var e,n,i,o,r=E.$steps[t-1],s=r.querySelectorAll("*[data-seq]"),a=r.querySelectorAll("*"),u=a.length,c=[],h=[],p=[],f=[],m=[],g=[];for(n=0;u>n;n++)e=a[n],i=d(l(e,T.prefixed("transitionDuration"))),o=d(l(e,T.prefixed("transitionDelay"))),f.push(i),m.push(o),g.push(i+o),null!==e.getAttribute("data-seq")&&(c.push(i),h.push(o),p.push(i+o));var v=Math.max.apply(Math,f),y=Math.max.apply(Math,m),b=Math.max.apply(Math,g),w=Math.max.apply(Math,c),S=Math.max.apply(Math,h),_=Math.max.apply(Math,p);return{stepId:t,stepElement:r,children:a,animatedChildren:s,watchedTimings:{maxDuration:w,maxDelay:S,maxTotal:_},timings:{maxDuration:v,maxDelay:y,maxTotal:b}}},getPhaseThreshold:function(t,e,n,i){var o=0;return n===!0&&E.options.ignorePhaseThresholdWhenSkipped===!0&&(t=!0),void 0===t&&(e===!0?o=i:e!==!1&&(o=e)),o},getReversePhaseDelay:function(t,e,n,i,o){var r=0,s=0,a=0;return n===!0||i!==!1&&o!==!1||(r=t-e,r>0?a=r:0>r&&(s=Math.abs(r))),{next:a,current:s}},moveActiveStepToTop:function(t,e){if(E.options.moveActiveStepToTop===!0){var n=E.$steps[E.prevStepId-1],i=E.noOfSteps-1;n.style.zIndex=1,t.style.zIndex=i,e.style.zIndex=E.noOfSteps}return null},manageNavigationSkip:function(t,e){if(E.isFallbackMode!==!0){var n,i,o,r,s;if(E.ui.show(e,0),E.options.navigationSkip===!0){if(E.navigationSkipThresholdActive=!0,0!==E.phasesAnimating&&(clearTimeout(E.phaseThresholdTimer),clearTimeout(E.nextPhaseStartedTimer),E.options.fadeStepWhenSkipped===!0))for(n=1;n<=E.noOfSteps;n++)i=E.stepProperties[n],i.isActive===!0&&n!==t&&(o=E.$steps[n-1],r=n,s={},s.id=r,s.element=o,E.phasesSkipped.push(s),E.animation.stepSkipped(o));E.navigationSkipThresholdTimer=setTimeout(function(){E.navigationSkipThresholdActive=!1},E.options.navigationSkipThreshold)}}},stepSkipped:function(t){E.ui.hide(t,E.options.fadeStepTime,function(){})},changeStep:function(t){var e="seq-step"+t;if(void 0!==E.currentStepId){var n="seq-step"+E.currentStepId;p(E.$container,e),f(E.$container,n)}else p(E.$container,e)},reverseProperties:function(t,e,n,i,o){var r,s,a,u,c,h,p,f=this,m=t.children,g=m.length,v=t.timings,y="",b="",w=[],S=[];for(s=0;g>s;s++)r=m[s],a=d(l(r,T.prefixed("transitionDuration"))),u=d(l(r,T.prefixed("transitionDelay"))),c=a+u,u=v.maxTotal-c,i!==!0&&(u+=e),c=a+u,w.push(c),null!==r.getAttribute("data-seq")&&S.push(c),o.reverseTimingFunctionWhenNavigatingBackwards===!0&&(y=l(r,T.prefixed("transitionTimingFunction")),b=f.reverseTimingFunction(y)),r.style[T.prefixed("transition")]=a+"ms "+u+"ms "+b;return h=Math.max.apply(Math,w),p=Math.max.apply(Math,S),setTimeout(function(){f.domDelay(function(){for(s=0;g>s;s++)r=m[s],r.style[T.prefixed("transition")]=""})},h+n),p},forward:function(t,e,n,i,o){var r,s,a,l=this;E.firstRun===!1&&l.currentPhaseStarted(E.currentStepId),f(n,"seq-out"),l.domDelay(function(){r=l.startAnimateOut(E.currentStepId,e,1),s=r.watchedTimings.maxTotal,a=l.getPhaseThreshold(i,E.options.phaseThreshold,E.isAnimating,s),E.isAnimating=!0,l.startAnimateIn(t,s,n,a,o)})},reverse:function(t,e,n,i,o){var r,s,a,l,u,c=this,d=0;p(n,"seq-out"),c.domDelay(function(){s=c.getPhaseProperties(E.currentStepId,"current"),a=c.getPhaseProperties(t,"next"),d=c.getPhaseThreshold(i,E.options.phaseThreshold,E.isAnimating,s.timings.maxTotal),r=c.getReversePhaseDelay(s.timings.maxTotal,a.timings.maxTotal,E.options.phaseThreshold,E.options.ignorePhaseThresholdWhenSkipped,E.isAnimating),l=c.reverseProperties(s,r.current,0,i,E.options),u=c.reverseProperties(a,r.next,d,i,E.options),c.startAnimateOut(E.currentStepId,e,-1,l),E.isAnimating=!0,E.firstRun===!1&&c.currentPhaseStarted(E.currentStepId),c.startAnimateIn(t,l,n,d,o,u)})},startAnimateIn:function(t,e,n,i,o,r){var s,a,l=this;E.prevStepId=E.currentStepId,E.currentStepId=t,E.firstRun===!0&&E.pagination.update(),E.firstRun===!1||E.options.startingStepAnimatesIn===!0?(E.stepProperties[t].isActive=!0,E.nextPhaseStartedTimer=setTimeout(function(){l.nextPhaseStarted(t,o)},i),E.phaseThresholdTimer=setTimeout(function(){p(n,"seq-in"),f(n,"seq-out"),void 0===r&&(s=E.animation.getPhaseProperties(t,"next"),r=s.watchedTimings.maxTotal),l.phaseEnded(t,"next",r,l.nextPhaseEnded),a=l.getStepDuration(e,r,E.options.phaseThreshold),E.stepEndedTimer=setTimeout(function(){E.animation.stepEnded(t)},a)},i)):(l.resetInheritedSpeed(t),E.phasesAnimating=0,E.isAnimating=!1,E.options.autoPlay===!0&&E.autoPlay.start(!0),p(n,"seq-in"),f(n,"seq-out")),E.firstRun=!1},startAnimateOut:function(t,e,n,i){var o,r=this;return 1===n?(f(e,"seq-in"),p(e,"seq-out"),o=r.getPhaseProperties(t,"current"),i=o.watchedTimings.maxTotal):f(e,"seq-in"),E.firstRun===!1&&(E.stepProperties[t].isActive=!0,r.phaseEnded(t,"current",i,r.currentPhaseEnded)),o},getStepDuration:function(t,e,n){var i;switch(n){case!0:i=e;break;case!1:i=t>=e?t:e;break;default:i=t>=e+n?t-n:e}return i},currentPhaseStarted:function(t){E.phasesAnimating++,E.currentPhaseStarted(t,E)},currentPhaseEnded:function(t){E.currentPhaseEnded(t,E)},nextPhaseStarted:function(t,e){E.phasesAnimating++,void 0===e&&E.hashTags.update(),E.pagination.update(),E.nextPhaseStarted(t,E)},nextPhaseEnded:function(t){E.nextPhaseEnded(t,E)},phaseEnded:function(t,e,n,i){var o;o=function(t){E.stepProperties[t].isActive=!1,E.phasesAnimating--,i(t)},"current"===e?E.currentPhaseEndedTimer=setTimeout(function(){o(t)},n):E.nextPhaseEndedTimer=setTimeout(function(){o(t)},n)},stepEnded:function(t){E.isAnimating=!1,E.isAutoPlaying=!1,E.options.autoPlay===!0&&E.autoPlay.start(!0,!0),E.animationEnded(t,E)},reversePhase:function(t){var e={"seq-out":"seq-in","seq-in":"seq-out"};return e[t]},domDelay:function(t){setTimeout(function(){t()},S)},reverseTimingFunction:function(t){if(""===t||void 0===t)return t;var e,n,i,o,r={linear:"cubic-bezier(0.0,0.0,1.0,1.0)",ease:"cubic-bezier(0.25, 0.1, 0.25, 1.0)","ease-in":"cubic-bezier(0.42, 0.0, 1.0, 1.0)","ease-in-out":"cubic-bezier(0.42, 0.0, 0.58, 1.0)","ease-out":"cubic-bezier(0.0, 0.0, 0.58, 1.0)"};for(t.indexOf("cubic-bezier")<0&&(t=t.split(",")[0],t=r[t]),e=t.replace("cubic-bezier(","").replace(")","").split(","),n=e.length,o=0;n>o;o++)e[o]=parseFloat(e[o]);return i=[1-e[2],1-e[3],1-e[0],1-e[1]],t="cubic-bezier("+i+")"},resetInheritedSpeed:function(t){if(E.isFallbackMode!==!0){var e,n,i=E.$steps[t-1].querySelectorAll("*"),o=i.length;for(n=0;o>n;n++)e=i[n],e.style[T.prefixed("transition")]="0ms 0ms";E.animation.domDelay(function(){for(n=0;o>n;n++)e=i[n],e.style[T.prefixed("transition")]=""})}},getDirection:function(t,e,n,i,o,r,s){var a=1;return a=void 0!==e?e:r===!0||o===!0?s===!0&&1===t&&n===i?1:n>t?-1:1:1},requiresFallbackMode:function(t){var e=t.transitions,n=!1;return e===!1&&(n=!0),n},getPropertySupport:function(t){var e=!1,n=!1;return T.csstransitions===!0&&(e=!0),T.cssanimations===!0&&(n=!0),{transitions:e,animations:n}}},E.animationFallback={animate:function(t,e,n,i,o,r,s){if(t!==!1){var a=(new Date).getTime(),l=setInterval(function(){var u=Math.min(1,((new Date).getTime()-a)/r);t.style[e]=i+u*(o-i)+n,1===u&&(void 0!==s&&s(),clearInterval(l))},25);t.style[e]=i+n}},setupCanvas:function(t){var e,n,i;if(E.isFallbackMode===!0)for(p(E.$container,"seq-fallback"),void 0!==E.$screen&&(E.$screen.style.overflow="hidden",E.$screen.style.width="100%",E.$screen.style.height="100%"),E.$canvas.style.width="100%",E.$canvas.style.height="100%",this.canvasWidth=E.$canvas.offsetWidth,e=0;e<E.noOfSteps;e++)n=E.$steps[e],i=e+1,p(n,"seq-in"),n.style.width="100%",n.style.height="100%",n.style.position="absolute",n.style.whiteSpace="normal",n.style.left="100%"},moveCanvas:function(t,e,n,i){if(i===!0){var o=0,r=-100,s=100,a=0;-1===n&&(r=100,s=-100),this.animate(e,"left","%",o,r,E.options.fallback.speed),this.animate(t,"left","%",s,a,E.options.fallback.speed)}else e.style.left="-100%",t.style.left="0"},goTo:function(t,e,n,i,o,r,s){E.prevStepId=E.currentStepId,E.currentStepId=t,void 0===s&&E.hashTags.update(),E.pagination.update(),E.firstRun===!1?(this.moveCanvas(o,n,r,!0),E.isAnimating=!0,E.animationStarted(E.currentStepId,E),E.stepEndedTimer=setTimeout(function(){E.animation.stepEnded(E.currentStepId)},E.options.fallback.speed)):(this.moveCanvas(o,n,r,!1),E.firstRun=!1,E.options.autoPlay===!0&&E.autoPlay.start(!0))}},E.pagination={getLinks:function(t,e){var n,i,o=t.childNodes,r=o.length,s=[];for(i=0;r>i;i++)n=o[i],1===n.nodeType&&s.push(n);return s},update:function(){if(void 0!==E.$pagination.elements){var t,e,n,i,o=E.currentStepId-1,r=E.$pagination.elements.length;if(void 0!==E.$pagination.currentLinks)for(i=E.$pagination.currentLinks.length,t=0;i>t;t++)n=E.$pagination.currentLinks[t],f(n,"seq-current");for(E.$pagination.currentLinks=[],e=0;r>e;e++)n=E.$pagination.links[e][o],E.$pagination.currentLinks.push(n),p(n,"seq-current")}return E.$pagination.currentLinks}},E.hashTags={init:function(t){if(E.options.hashTags===!0){var e,n;E.hasPushstate=!(!window.history||!history.pushState),n=location.hash.replace("#!",""),E.stepHashTags=this.getStepHashTags(),""!==n&&(E.currentHashTag=n,e=this.hasCorrespondingStep(E.currentHashTag),e>-1&&(t=e+1))}return t},hasCorrespondingStep:function(t){var e=-1,n=E.stepHashTags.indexOf(t);return n>-1&&(e=n),e},getStepHashTags:function(){var t,e,n=[];for(t=0;t<E.noOfSteps;t++)e=E.options.hashDataAttribute===!1?E.$steps[t].id:E.$steps[t].getAttribute("data-seq-hashtag"),n.push(e);return n},update:function(){if(E.options.hashTags===!0&&E.firstRun===!1||E.options.hashTags===!0&&E.firstRun===!0&&E.options.hashChangesOnFirstStep===!0){var t=E.currentStepId-1;E.currentHashTag=E.stepHashTags[t],""!==E.currentHashtag&&(E.hasPushstate===!0?history.pushState(null,null,"#!"+E.currentHashTag):location.hash="#!"+E.currentHashTag)}},setupEvent:function(){if("onhashchange"in window){if(window.addEventListener)return window.addHashChange=function(t,e){window.addEventListener("hashchange",t,e)},void(window.removeHashChange=function(t){window.removeEventListener("hashchange",t)});if(window.attachEvent)return window.addHashChange=function(t){window.attachEvent("onhashchange",t)},void(window.removeHashChange=function(t){window.detachEvent("onhashchange",t)})}var t=[],e=location.href;window.addHashChange=function(e,n){"function"==typeof e&&t[n?"unshift":"push"](e)},window.removeHashChange=function(e){for(var n=t.length-1;n>=0;n--)t[n]===e&&t.splice(n,1)},setInterval(function(){var n=location.href;if(e!==n){var i=e;e=n;for(var o=0;o<t.length;o++)t[o].call(window,{type:"hashchange",newURL:n,oldURL:i})}},100)}},E.preload={defaultHtml:'<svg width="39" height="16" viewBox="0 0 39 16" xmlns="http://www.w3.org/2000/svg" class="seq-preload-indicator"><title>Sequence.js Preloading Indicator</title><desc>Three orange dots increasing in size from left to right</desc><g fill="#F96D38"><path class="seq-preload-circle seq-preload-circle-1" d="M3.999 12.012c2.209 0 3.999-1.791 3.999-3.999s-1.79-3.999-3.999-3.999-3.999 1.791-3.999 3.999 1.79 3.999 3.999 3.999z"/><path class="seq-preload-circle seq-preload-circle-2" d="M15.996 13.468c3.018 0 5.465-2.447 5.465-5.466 0-3.018-2.447-5.465-5.465-5.465-3.019 0-5.466 2.447-5.466 5.465 0 3.019 2.447 5.466 5.466 5.466z"/><path class="seq-preload-circle seq-preload-circle-3" d="M31.322 15.334c4.049 0 7.332-3.282 7.332-7.332 0-4.049-3.282-7.332-7.332-7.332s-7.332 3.283-7.332 7.332c0 4.05 3.283 7.332 7.332 7.332z"/></g></svg>',fallbackHtml:'<div class="seq-preload-indicator seq-preload-indicator-fallback"><div class="seq-preload-circle seq-preload-circle-1"></div><div class="seq-preload-circle seq-preload-circle-2"></div><div class="seq-preload-circle seq-preload-circle-3"></div></div>',defaultStyles:"@"+x.animation[T.prefixed("animation")]+"keyframes seq-preloader {50% {opacity: 1;}100% {opacity: 0;}}.seq-preloader {background: white;visibility: visible;opacity: 1;position: absolute;z-index: 9999;height: 100%;width: 100%;top: 0;left: 0;right: 0;bottom: 0;} .seq-preloader.seq-preloaded {opacity: 0;visibility: hidden;"+T.prefixed("transition")+": visibility 0s .5s, opacity .5s;}.seq-preload-indicator {overflow: visible;position: relative;top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);}.seq-preload-circle {display: inline-block;height: 12px;width: 12px;fill: #F96D38;opacity: 0;"+x.animation[T.prefixed("animation")]+"animation: seq-preloader 1.25s infinite;}.seq-preload-circle-2 {"+x.animation[T.prefixed("animation")]+"animation-delay: .15s;}.seq-preload-circle-3 {"+x.animation[T.prefixed("animation")]+"animation-delay: .3s;}.seq-preload-indicator-fallback{width: 42px;margin-left: -21px;overflow: visible;}.seq-preload-indicator-fallback .seq-preload-circle {width: 8px; height:8px;background-color: #F96D38;border-radius: 100%; opacity: 1;display: inline-block; vertical-align: middle;}.seq-preload-indicator-fallback .seq-preload-circle-2{margin-left: 3px; margin-right: 3px; width: 12px; height: 12px;}.seq-preload-indicator-fallback .seq-preload-circle-3{width: 16px; height: 16px;}",init:function(e){if(E.options.preloader!==!1){var n,i,o,r,s,a,l=this;return p(E.$container,"seq-preloading"),E.$preloader=E.ui.getElements("preloader",E.options.preloader),l.append(),l.addStyles(),l.toggleStepsVisibility("hide"),n=l.getImagesToPreload(E.options.preloadTheseSteps),i=l.getImagesToPreload(E.options.preloadTheseImages,!0),o=n.concat(i),r=t(o),r.on("always",function(t){l.complete(e)}),s=1,r.on("progress",function(t,e){a=e.isLoaded?"loaded":"broken",E.preloadProgress(a,e.img.src,s++,o.length,E)}),!0}return!1},complete:function(t){E.preloaded(E),E.options.pausePreloader!==!0&&(this.toggleStepsVisibility("show"),f(E.$container,"seq-preloading"),p(E.$container,"seq-preloaded"),p(E.$preloader[0],"seq-preloaded"),void 0!==this.preloadIndicatorTimer&&clearInterval(this.preloadIndicatorTimer),(T.prefixed("animation")===!1||T.svg===!1)&&(E.$preloader[0].style.display="none"),void 0!==t&&t())},addStyles:function(){if(E.options.preloader===!0){var t=document.head||document.getElementsByTagName("head")[0];if(this.styleElement=document.createElement("style"),this.styleElement.type="text/css",this.styleElement.styleSheet?this.styleElement.styleSheet.cssText=this.defaultStyles:this.styleElement.appendChild(document.createTextNode(this.defaultStyles)),t.appendChild(this.styleElement),T.prefixed("animation")===!1||T.svg===!1){var e=E.$preloader[0].firstChild,n=function(){e.style.visibility="hidden",preloadFlashTime=1e3,setTimeout(function(){e.style.visibility="visible"},500)};n(),this.preloadIndicatorTimer=setInterval(function(){n()},1e3)}return!0}return!1},removeStyles:function(){this.styleElement.parentNode.removeChild(this.styleElement)},getImagesToPreload:function(t,e){var n=[];if(s(t)===!0){var i,o,r,a,l,u,c,d,h=t.length;if(e!==!0)for(i=0;h>i;i++)for(r=E.$steps[i],a=r.getElementsByTagName("img"),l=a.length,o=0;l>o;o++)u=a[o],n.push(u);else for(c=[],i=0;h>i;i++)d=t[i],c[i]=new Image,c[i].src=d,n.push(c[i])}return n},append:function(){return E.options.preloader===!0?(E.$preloader=document.createElement("div"),E.$preloader.className="seq-preloader",E.$preloader=[E.$preloader],T.prefixed("animation")!==!1&&T.svg===!0?E.$preloader[0].innerHTML=E.preload.defaultHtml:E.$preloader[0].innerHTML=E.preload.fallbackHtml,E.$container.insertBefore(E.$preloader[0],null),!0):!1},toggleStepsVisibility:function(t){if(E.options.hideStepsUntilPreloaded===!0){var e,n;for(e=0;e<E.noOfSteps;e++)n=E.$steps[e],"hide"===t?E.ui.hide(n,0):E.ui.show(n,0);return!0}return!1}},E.manageEvents={list:{load:[],click:[],touchstart:[],mousemove:[],mouseleave:[],hammer:[],keyup:[],hashchange:[],resize:[]},init:function(){return E.manageEvents.list[D]=[],E.options.hashTags===!0&&this.add.hashChange(),E.options.swipeNavigation===!0?this.add.swipeNavigation():E.hammerTime=!1,E.options.keyNavigation===!0&&this.add.keyNavigation(),this.add.resizeThrottle(),this.add.pageVisibility(),E.options.nextButton!==!1&&(E.$next=E.ui.getElements("nextButton",E.options.nextButton),this.add.button(E.$next,"nav",E.next)),E.options.prevButton!==!1&&(E.$prev=E.ui.getElements("prevButton",E.options.prevButton),this.add.button(E.$prev,"nav",E.prev)),E.options.autoPlayButton!==!1&&(E.$autoPlay=E.ui.getElements("autoPlayButton",E.options.autoPlayButton),this.add.button(E.$autoPlay,"nav",E.toggleAutoPlay)),this.add.stopOnHover(),E.options.pagination!==!1&&(E.$pagination={},E.$pagination.relatedElementId=i,E.$pagination.links=[],E.$pagination.elements=E.ui.getElements("pagination",E.options.pagination),this.add.button(E.$pagination.elements,"pagination")),null},removeAll:function(t){var e,n;for(e in t)t.hasOwnProperty(e)===!0&&(n=t[e],this.remove(e));return null},remove:function(t){var e=E.manageEvents.list[t],n=e.length;switch(t){case"hashchange":E.options.hashTags===!0&&removeHashChange(e[0].handler);break;case"hammer":if(E.manageEvents.list.hammer.length>0&&void 0!==document.querySelectorAll){var i=E.manageEvents.list.hammer[0].handler;E.hammerTime.off("swipe",[i])}break;default:for(var o=0;n>o;o++){var r=e[o];c(r.element,t,r.handler)}}},add:{hashChange:function(){E.hashTags.setupEvent();var t=function(t){var e,n;e=t.newURL||location.href,e=e.split("#!")[1],E.currentHashTag!==e&&(n=E.stepHashTags.indexOf(e)+1,E.currentHashTag=e,E.goTo(n,void 0,void 0,!0))};return addHashChange(t),E.manageEvents.list.hashchange.push({element:window,handler:t}),E.manageEvents.list.hashchange},button:function(t,e,n){var i,o,r,s,a,l,c,d=t.length;switch(e){case"nav":r=function(t){i=u(t,"click",function(t){t||(t=window.event),t.preventDefault?t.preventDefault():t.returnValue=!1,n()})};break;case"pagination":r=function(t,e){i=u(t,"click",function(t,e){t||(t=window.event),t.preventDefault?t.preventDefault():t.returnValue=!1;var n=t.target||t.srcElement;s=this,l=g(s,n),E.goTo(l)}),E.$pagination.links.push(E.pagination.getLinks(t,e))}}for(c=0;d>c;c++)o=t[c],a=o.getAttribute("rel"),a===E.$container.id&&null===o.getAttribute("data-seq-button")?(o.setAttribute("data-seq-button",!0),r(o,a)):null===a&&null===o.getAttribute("data-seq-button")&&r(o,a),E.manageEvents.list.click.push({element:o,handler:i});return E.manageEvents.list.click},stopOnHover:function(){var t,e;return E.isMouseOver=!1,t=u(E.$container,"touchstart",function(t){E.isTouched=!0}),E.manageEvents.list.touchstart.push({element:E.$container,handler:t}),e=u(E.$container,"mousemove",function(t){return t=t||window.event,E.isTouched===!0?void(E.isTouched=!1):void(m(E.$container,t)===!0?(E.options.autoPlayPauseOnHover===!0&&E.isMouseOver===!1&&E.autoPlay.pause(),E.isMouseOver=!0):(E.options.autoPlayPauseOnHover===!0&&E.isMouseOver===!0&&E.autoPlay.unpause(),E.isMouseOver=!1))}),E.manageEvents.list.mousemove.push({element:E.$container,handler:e}),e=u(E.$container,"mouseleave",function(t){E.options.autoPlayPauseOnHover===!0&&E.autoPlay.unpause(),E.isMouseOver=!1}),E.manageEvents.list.mouseleave.push({element:E.$container,handler:e}),null},swipeNavigation:function(){if(void 0===window.addEventListener)return void(E.hammerTime=!1);var t,n;"function"==typeof e&&(n=function(t){switch(t.direction){case 2:E.options.swipeEvents.left(E);break;case 4:E.options.swipeEvents.right(E);break;case 8:E.options.swipeEvents.up(E);break;case 16:E.options.swipeEvents.down(E)}},E.hammerTime=new e(E.$container).on("swipe",n),E.hammerTime.get("swipe").set(E.options.swipeHammerOptions),t=v(E.options.swipeEvents),E.hammerTime.get("swipe").set({direction:t}),E.manageEvents.list.hammer.push({element:E.$container,handler:n}))},keyNavigation:function(){var t=u(document,"keyup",function(t){t||(t=window.event);var e=parseInt(String.fromCharCode(t.keyCode));switch(e>0&&e<=E.noOfSteps&&E.options.numericKeysGoToSteps&&E.goTo(e),t.keyCode){case 37:E.options.keyEvents.left(E);break;case 39:E.options.keyEvents.right(E)}});E.manageEvents.list.keyup.push({element:document,handler:t})},resizeThrottle:function(){function t(){setTimeout(function(){E.canvas.getTransformProperties(),E.propertySupport.transitions===!0&&E.canvas.move(E.currentStepId,!1)},500),E.throttledResize(E)}var e,n;n=u(window,"resize",function(n){clearTimeout(e),e=setTimeout(t,_)}),E.manageEvents.list.resize.push({element:window,handler:n})},pageVisibility:function(){var t=u(document,D,function(){document[C]?E.autoPlay.pause():E.autoPlay.unpause()},!1);E.manageEvents.list[D].push({element:document,handler:t})}}},E.init=function(e){var n,i,o,s;E.options=a(w,r),E.isAnimating=!1,E.isReady=!1,E.$container=e,E.$screen=E.$container.querySelectorAll(".seq-screen")[0],E.$canvas=E.$container.querySelectorAll(".seq-canvas")[0],E.$steps=E.canvas.getSteps(E.$canvas),E.noOfSteps=E.$steps.length,E.phasesAnimating=0,E.phasesSkipped=[],y(E.$container,T),n=E.options.startingStepId,p(E.$container,"seq-active"),E.propertySupport=E.animation.getPropertySupport(),E.isFallbackMode=E.animation.requiresFallbackMode(E.propertySupport),E.canvas.init(n),E.canvas.removeNoJsClass(E),E.manageEvents.init(),E.autoPlay.init(),E.firstRun=!0,n=E.hashTags.init(n),1===E.options.autoPlayDirection?(o=n-1,E.prevStepId=1>o?E.noOfSteps:o):(o=n+1,E.prevStepId=o>E.noOfSteps?1:o),E.currentStepId=E.prevStepId,i=E.prevStepId,E.animationFallback.setupCanvas(n),s=function(){E.animation.domDelay(function(){E.animation.domDelay(function(){E.animation.resetInheritedSpeed(i)}),E.isReady=!0,E.ready(E),E.goTo(n,E.options.autoPlayDirection,!0)})},E.options.preloader!==!1&&void 0!==document.querySelectorAll&&"function"==typeof t?E.preload.init(function(){s()}):s()},E.destroy=function(){var t,e,n;for(E.autoPlay.stop(),clearTimeout(E.autoPlayTimer),clearTimeout(E.phaseThresholdTimer),clearTimeout(E.stepEndedTimer),clearTimeout(E.currentPhaseEndedTimer),clearTimeout(E.nextPhaseStartedTimer),clearTimeout(E.nextPhaseEndedTimer),clearTimeout(E.fadeStepTimer),clearTimeout(E.hideTimer),clearTimeout(E.navigationSkipThresholdTimer),E.manageEvents.removeAll(E.manageEvents.list),f(E.$pagination.currentLinks,"seq-current"),f(E.$container,"seq-step"+E.currentStepId),f(E.$container,"seq-active"),E.$container.removeAttribute("style"),void 0!==E.$screen&&E.$screen.removeAttribute("style"),E.$canvas.removeAttribute("style"),t=0;t<E.noOfSteps;t++)e=E.$steps[t],e.removeAttribute("style"),E.animation.resetInheritedSpeed(t+1),f(e,"seq-in"),f(e,"seq-out");return n=E.$steps[E.options.startingStepId-1],E.animation.resetInheritedSpeed(E.options.startingStepId),p(n,"seq-in"),o.removeAttribute("data-seq-enabled"),E.destroyed(E),E=null},E.next=function(){var t=E.currentStepId+1;return t>E.noOfSteps&&E.options.cycle===!1?!1:(t>E.noOfSteps&&(t=1),E.goTo(t),t)},E.prev=function(){var t,e=E.currentStepId-1;return 1>e&&E.options.cycle===!1?!1:(1>e&&(e=E.noOfSteps),
E.options.reverseWhenNavigatingBackwards===!0&&(t=-1),E.goTo(e,t),e)},E.toggleAutoPlay=function(t){return E.isAutoPlaying===!1?E.start(t):E.stop(),E.isAutoPlaying},E.stop=function(){E.autoPlay.stop()},E.start=function(t){E.autoPlay.start(t)},E.goTo=function(t,e,n,i){if(e=E.animation.getDirection(t,e,E.currentStepId,E.noOfSteps,E.isFallbackMode,E.options.reverseWhenNavigatingBackwards,E.options.cycle),void 0===t||1>t||t>E.noOfSteps||t===E.currentStepId||E.options.navigationSkip===!1&&E.isAnimating===!0||E.options.navigationSkip===!0&&E.navigationSkipThresholdActive===!0&&void 0===i||E.isFallbackMode===!0&&E.isAnimating===!0&&void 0===i||E.options.preventReverseSkipping===!0&&E.direction!==e&&E.isAnimating===!0)return!1;var o,r;return clearTimeout(E.autoPlayTimer),E.direction=e,1===e?f(E.$container,"seq-reversed"):p(E.$container,"seq-reversed"),o=E.$steps[E.currentStepId-1],r=E.$steps[t-1],E.animation.moveActiveStepToTop(o,r),E.animation.changeStep(t),E.isFallbackMode===!1?(E.animation.resetInheritedSpeed(t),(E.firstRun===!1||E.firstRun===!0&&E.options.startingStepAnimatesIn===!0)&&E.animationStarted(t,E),E.canvas.move(t,!0),E.animation.manageNavigationSkip(t,r),1===e?E.animation.forward(t,o,r,n,i):E.animation.reverse(t,o,r,n,i)):E.animationFallback.goTo(t,E.currentStepId,o,t,r,e,i),!0},E.started=function(t){},E.stopped=function(t){},E.animationStarted=function(t,e){},E.animationEnded=function(t,e){},E.currentPhaseStarted=function(t,e){},E.currentPhaseEnded=function(t,e){},E.nextPhaseStarted=function(t,e){},E.nextPhaseEnded=function(t,e){},E.throttledResize=function(t){},E.preloaded=function(t){},E.preloadProgress=function(t,e,n,i,o){},E.ready=function(t){},E.destroyed=function(t){},E.utils={addClass:p,removeClass:f,addEvent:u,removeEvent:c},E.init(o),n.push(E),E};return o}function delivery_func(){void 0===delivery?$("#select_delivery").nifty("show"):$("input:radio[name=group2][value='"+$.cookie("delivery")+"']").prop({checked:!0})}function initIfhaveSession(){var t=sessionStorage.getItem("cart"),e=JSON.parse(t);"Корзина пуста"!=e[0].row[0]&&(e.forEach(function(t){console.log(t.row[0]),null==t.row[1]?(dataTable.row.add([t.row[0],"","<input type='number' value='"+t.row[2]+"' data-price='"+t.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())):(dataTable.row.add([t.row[0],"<select class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='"+t.row[2]+"' data-price='"+t.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect(),$(".fancified :contains("+t.row[1]+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()))}),$(".basic").trigger("update.fs"))}function dataFromTable(){var t=new Array;return $("#tableOrder tr").each(function(e,n){t[e]={row:[$(n).find("td:eq(0)").html(),$(n).find("td:eq(1)").find(".fancified option:selected").val(),$(n).find("td:eq(2)").find("input").val(),$(n).find("td:eq(3)").text(),$(n).find("td:eq(4)").find("a").attr("id")]}}),t.shift(),t}function fnGetSelected(t){return t.$("tr.selected")}function calculateSumm(){return summ=0,$(".checkOut input[type=number]").each(function(){summ+=parseInt($(this).val()*$(this).attr("data-price"))}),0!=summ&&"no_delivery"==$.cookie("delivery")&&(summ-=10*summ/100),$(".userIsAuch .full_price").length&&$(".full_price").text(summ),sessionStorage.setItem("cart",JSON.stringify(dataFromTable())),sessionStorage.setItem("cart_price",summ),sessionStorage.setItem("delivery",$.cookie("delivery")),summ}function unique(t){for(var e={},n=0;n<t.length;n++){var i=t[n];e[i]=!0}return Object.keys(e)}function removeA(t){for(var e,n,i=arguments,o=i.length;o>1&&t.length;)for(e=i[--o];-1!==(n=t.indexOf(e));)t.splice(n,1);return t}if(function(){function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,o=this,r=o.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if("object"==typeof t){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;t.length>e;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,o=this.getListenersAsObject(t),r="object"==typeof n;for(i in o)o.hasOwnProperty(i)&&-1===e(o[i],n)&&o[i].push(r?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;t.length>e;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,o,r=this.getListenersAsObject(t);for(o in r)r.hasOwnProperty(o)&&(i=e(r[o],n),-1!==i&&r[o].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,o,r=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)r.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(o=e[i])&&("function"==typeof o?r.call(this,i,o):s.call(this,i,o));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if("object"===n)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,o,r,s=this.getListenersAsObject(t);for(o in s)if(s.hasOwnProperty(o))for(i=s[o].length;i--;)n=s[o][i],n.once===!0&&this.removeListener(t,n.listener),r=n.listener.apply(this,e||[]),r===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return o.EventEmitter=r,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:this.EventEmitter=t}.call(this),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var o=function(){};n.removeEventListener?o=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(o=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var r={bind:i,unbind:o};"function"==typeof define&&define.amd?define("eventie/eventie",r):t.eventie=r}(this),function(t,e){"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("eventEmitter"),require("eventie")):t.imagesLoaded=e(t,t.EventEmitter,t.eventie)}(this,function(t,e,n){function i(t,e){for(var n in e)t[n]=e[n];return t}function o(t){return"[object Array]"===h.call(t)}function r(t){var e=[];if(o(t))e=t;else if("number"==typeof t.length)for(var n=0,i=t.length;i>n;n++)e.push(t[n]);else e.push(t);return e}function s(t,e,n){if(!(this instanceof s))return new s(t,e);"string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=r(t),this.options=i({},this.options),"function"==typeof e?n=e:i(this.options,e),n&&this.on("always",n),this.getImages(),u&&(this.jqDeferred=new u.Deferred);var o=this;setTimeout(function(){o.check()})}function a(t){this.img=t}function l(t){this.src=t,p[t]=this}var u=t.jQuery,c=t.console,d=void 0!==c,h=Object.prototype.toString;s.prototype=new e,s.prototype.options={},s.prototype.getImages=function(){this.images=[];for(var t=0,e=this.elements.length;e>t;t++){var n=this.elements[t];if("IMG"===n.nodeName&&this.addImage(n),n.nodeType&&(1===n.nodeType||9===n.nodeType))for(var i=n.querySelectorAll("img"),o=0,r=i.length;r>o;o++){var s=i[o];this.addImage(s)}}},s.prototype.addImage=function(t){var e=new a(t);this.images.push(e)},s.prototype.check=function(){function t(t,o){return e.options.debug&&d&&c.log("confirm",t,o),e.progress(t),n++,n===i&&e.complete(),!0}var e=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return void this.complete();for(var o=0;i>o;o++){var r=this.images[o];r.on("confirm",t),r.check()}},s.prototype.progress=function(t){this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded;var e=this;setTimeout(function(){e.emit("progress",e,t),e.jqDeferred&&e.jqDeferred.notify&&e.jqDeferred.notify(e,t)})},s.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var e=this;setTimeout(function(){if(e.emit(t,e),e.emit("always",e),e.jqDeferred){var n=e.hasAnyBroken?"reject":"resolve";e.jqDeferred[n](e)}})},u&&(u.fn.imagesLoaded=function(t,e){var n=new s(this,t,e);return n.jqDeferred.promise(u(this))}),a.prototype=new e,a.prototype.check=function(){var t=p[this.img.src]||new l(this.img.src);if(t.isConfirmed)return void this.confirm(t.isLoaded,"cached was confirmed");if(this.img.complete&&void 0!==this.img.naturalWidth)return void this.confirm(0!==this.img.naturalWidth,"naturalWidth");var e=this;t.on("confirm",function(t,n){return e.confirm(t.isLoaded,n),!0}),t.check()},a.prototype.confirm=function(t,e){this.isLoaded=t,this.emit("confirm",this,e)};var p={};return l.prototype=new e,l.prototype.check=function(){if(!this.isChecked){var t=new Image;n.bind(t,"load",this),n.bind(t,"error",this),t.src=this.src,this.isChecked=!0}},l.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.prototype.onload=function(t){this.confirm(!0,"onload"),this.unbindProxyEvents(t)},l.prototype.onerror=function(t){this.confirm(!1,"onerror"),this.unbindProxyEvents(t)},l.prototype.confirm=function(t,e){this.isConfirmed=!0,this.isLoaded=t,this.emit("confirm",this,e)},l.prototype.unbindProxyEvents=function(t){n.unbind(t.target,"load",this),n.unbind(t.target,"error",this)},s}),function(){"use strict";function t(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,i),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,e+=1}var e=0,n={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var i in n)e.push(n[i]);for(var o=0,r=e.length;r>o;o++)e[o][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.invokeAll("enable")},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=o.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,i[t.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,i={},o=window.Waypoint,r=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(".waypoints"),delete i[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,o.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){(!e.didScroll||o.isTouch)&&(e.didScroll=!0,o.requestAnimationFrame(t))})},e.prototype.handleResize=function(){o.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in e){var i=e[n],o=i.newScroll>i.oldScroll,r=o?i.forward:i.backward;for(var s in this.waypoints[n]){var a=this.waypoints[n][s],l=i.oldScroll<a.triggerPoint,u=i.newScroll>=a.triggerPoint,c=l&&u,d=!l&&!u;(c||d)&&(a.queueTrigger(r),t[a.group.id]=a.group)}}for(var h in t)t[h].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?o.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?o.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var n in this.waypoints[e])t.push(this.waypoints[e][n]);for(var i=0,o=t.length;o>i;i++)t[i].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,n=e?void 0:this.adapter.offset(),i={};this.handleScroll(),t={horizontal:{contextOffset:e?0:n.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:n.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var r in t){var s=t[r];for(var a in this.waypoints[r]){var l,u,c,d,h,p=this.waypoints[r][a],f=p.options.offset,m=p.triggerPoint,g=0,v=null==m;p.element!==p.element.window&&(g=p.adapter.offset()[s.offsetProp]),"function"==typeof f?f=f.apply(p):"string"==typeof f&&(f=parseFloat(f),p.options.offset.indexOf("%")>-1&&(f=Math.ceil(s.contextDimension*f/100))),l=s.contextScroll-s.contextOffset,p.triggerPoint=g+l-f,u=m<s.oldScroll,c=p.triggerPoint>=s.oldScroll,d=u&&c,h=!u&&!c,!v&&d?(p.queueTrigger(s.backward),i[p.group.id]=p.group):!v&&h?(p.queueTrigger(s.forward),i[p.group.id]=p.group):v&&s.oldScroll>=p.triggerPoint&&(p.queueTrigger(s.forward),i[p.group.id]=p.group)}}return o.requestAnimationFrame(function(){for(var t in i)i[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in i)i[t].refresh()},e.findByElement=function(t){return i[t.waypointContextKey]},window.onload=function(){r&&r(),e.refreshAll()},o.requestAnimationFrame=function(e){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t;n.call(window,e)},o.Context=e}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function n(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}var i={vertical:{},horizontal:{}},o=window.Waypoint;n.prototype.add=function(t){this.waypoints.push(t)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],o="up"===n||"left"===n;i.sort(o?e:t);for(var r=0,s=i.length;s>r;r+=1){var a=i[r];(a.options.continuous||r===i.length-1)&&a.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(e){this.waypoints.sort(t);var n=o.Adapter.inArray(e,this.waypoints),i=n===this.waypoints.length-1;return i?null:this.waypoints[n+1]},n.prototype.previous=function(e){this.waypoints.sort(t);var n=o.Adapter.inArray(e,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},n.prototype.remove=function(t){var e=o.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(t){return i[t.axis][t.name]||new n(t)},o.Group=n}(),function(){"use strict";function t(t){return t===t.window}function e(e){return t(e)?e:e.defaultView}function n(t){this.element=t,this.handlers={}}var i=window.Waypoint;n.prototype.innerHeight=function(){var e=t(this.element);return e?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var e=t(this.element);return e?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(t,e){function n(t,e,n){for(var i=0,o=e.length-1;o>i;i++){var r=e[i];n&&n!==r||t.removeEventListener(r)}}var i=t.split("."),o=i[0],r=i[1],s=this.element;if(r&&this.handlers[r]&&o)n(s,this.handlers[r][o],e),this.handlers[r][o]=[];else if(o)for(var a in this.handlers)n(s,this.handlers[a][o]||[],e),this.handlers[a][o]=[];else if(r&&this.handlers[r]){for(var l in this.handlers[r])n(s,this.handlers[r][l],e);this.handlers[r]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var t=this.element.ownerDocument.documentElement,n=e(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}},n.prototype.on=function(t,e){var n=t.split("."),i=n[0],o=n[1]||"__default",r=this.handlers[o]=this.handlers[o]||{},s=r[i]=r[i]||[];s.push(e),this.element.addEventListener(i,e)},n.prototype.outerHeight=function(e){var n,i=this.innerHeight();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},n.prototype.outerWidth=function(e){var n,i=this.innerWidth();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},n.prototype.scrollLeft=function(){var t=e(this.element);return t?t.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var t=e(this.element);return t?t.pageYOffset:this.element.scrollTop},n.extend=function(){function t(t,e){if("object"==typeof t&&"object"==typeof e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}for(var e=Array.prototype.slice.call(arguments),n=1,i=e.length;i>n;n++)t(e[0],e[n]);return e[0]},n.inArray=function(t,e,n){return null==e?-1:e.indexOf(t,n)},n.isEmptyObject=function(t){for(var e in t)return!1;return!0},i.adapters.push({name:"noframework",Adapter:n}),i.Adapter=n}(),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):jQuery)}(function(t){function e(t){return a.raw?t:encodeURIComponent(t)}function n(t){return a.raw?t:decodeURIComponent(t)}function i(t){return e(a.json?JSON.stringify(t):String(t))}function o(t){0===t.indexOf('"')&&(t=t.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return t=decodeURIComponent(t.replace(s," ")),a.json?JSON.parse(t):t}catch(e){}}function r(e,n){var i=a.raw?e:o(e);return t.isFunction(n)?n(i):i}var s=/\+/g,a=t.cookie=function(o,s,l){if(void 0!==s&&!t.isFunction(s)){if(l=t.extend({},a.defaults,l),"number"==typeof l.expires){var u=l.expires,c=l.expires=new Date;c.setTime(+c+864e5*u)}return document.cookie=[e(o),"=",i(s),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var d=o?void 0:{},h=document.cookie?document.cookie.split("; "):[],p=0,f=h.length;f>p;p++){var m=h[p].split("="),g=n(m.shift()),v=m.join("=");if(o&&o===g){d=r(v,s);break}o||void 0===(v=r(v))||(d[g]=v)}return d};a.defaults={},t.removeCookie=function(e,n){return void 0===t.cookie(e)?!1:(t.cookie(e,"",t.extend({},n,{expires:-1})),!t.cookie(e))}}),function(t,e,n,i){"use strict";function o(t,e,n){return setTimeout(c(t,n),e)}function r(t,e,n){return Array.isArray(t)?(s(t,n[e],n),!0):!1}function s(t,e,n){var o;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==i)for(o=0;o<t.length;)e.call(n,t[o],o,t),o++;else for(o in t)t.hasOwnProperty(o)&&e.call(n,t[o],o,t)}function a(t,e,n){for(var o=Object.keys(e),r=0;r<o.length;)(!n||n&&t[o[r]]===i)&&(t[o[r]]=e[o[r]]),r++;return t}function l(t,e){return a(t,e,!0)}function u(t,e,n){var i,o=e.prototype;i=t.prototype=Object.create(o),i.constructor=t,i._super=o,n&&a(i,n)}function c(t,e){return function(){return t.apply(e,arguments)}}function d(t,e){return typeof t==ct?t.apply(e?e[0]||i:i,e):t}function h(t,e){return t===i?e:t}function p(t,e,n){s(v(e),function(e){t.addEventListener(e,n,!1)})}function f(t,e,n){s(v(e),function(e){t.removeEventListener(e,n,!1)})}function m(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function g(t,e){return t.indexOf(e)>-1}function v(t){return t.trim().split(/\s+/g)}function y(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function b(t){return Array.prototype.slice.call(t,0)}function w(t,e,n){for(var i=[],o=[],r=0;r<t.length;){var s=e?t[r][e]:t[r];y(o,s)<0&&i.push(t[r]),o[r]=s,r++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function S(t,e){for(var n,o,r=e[0].toUpperCase()+e.slice(1),s=0;s<lt.length;){if(n=lt[s],o=n?n+r:e,o in t)return o;s++}return i}function _(){return ft++}function x(t){var e=t.ownerDocument;return e.defaultView||e.parentWindow}function T(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){d(t.options.enable,[t])&&n.handler(e)},this.init()}function C(t){var e,n=t.options.inputClass;return new(e=n?n:vt?R:yt?H:gt?B:M)(t,D)}function D(t,e,n){var i=n.pointers.length,o=n.changedPointers.length,r=e&Tt&&i-o===0,s=e&(Dt|Et)&&i-o===0;n.isFirst=!!r,n.isFinal=!!s,r&&(t.session={}),n.eventType=e,E(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function E(t,e){var n=t.session,i=e.pointers,o=i.length;n.firstInput||(n.firstInput=P(e)),o>1&&!n.firstMultiple?n.firstMultiple=P(e):1===o&&(n.firstMultiple=!1);var r=n.firstInput,s=n.firstMultiple,a=s?s.center:r.center,l=e.center=k(i);e.timeStamp=pt(),e.deltaTime=e.timeStamp-r.timeStamp,e.angle=q(a,l),e.distance=O(a,l),A(n,e),e.offsetDirection=$(e.deltaX,e.deltaY),e.scale=s?j(s.pointers,i):1,e.rotation=s?z(s.pointers,i):0,I(n,e);var u=t.element;m(e.srcEvent.target,u)&&(u=e.srcEvent.target),e.target=u}function A(t,e){var n=e.center,i=t.offsetDelta||{},o=t.prevDelta||{},r=t.prevInput||{};(e.eventType===Tt||r.eventType===Dt)&&(o=t.prevDelta={x:r.deltaX||0,y:r.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=o.x+(n.x-i.x),e.deltaY=o.y+(n.y-i.y)}function I(t,e){var n,o,r,s,a=t.lastInterval||e,l=e.timeStamp-a.timeStamp;if(e.eventType!=Et&&(l>xt||a.velocity===i)){var u=a.deltaX-e.deltaX,c=a.deltaY-e.deltaY,d=L(l,u,c);o=d.x,r=d.y,n=ht(d.x)>ht(d.y)?d.x:d.y,s=$(u,c),t.lastInterval=e}else n=a.velocity,o=a.velocityX,r=a.velocityY,s=a.direction;e.velocity=n,e.velocityX=o,e.velocityY=r,e.direction=s}function P(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:dt(t.pointers[n].clientX),clientY:dt(t.pointers[n].clientY)},n++;return{timeStamp:pt(),pointers:e,center:k(e),deltaX:t.deltaX,deltaY:t.deltaY}}function k(t){var e=t.length;if(1===e)return{x:dt(t[0].clientX),y:dt(t[0].clientY)};for(var n=0,i=0,o=0;e>o;)n+=t[o].clientX,i+=t[o].clientY,o++;return{x:dt(n/e),y:dt(i/e)}}function L(t,e,n){return{x:e/t||0,y:n/t||0}}function $(t,e){return t===e?At:ht(t)>=ht(e)?t>0?It:Pt:e>0?kt:Lt}function O(t,e,n){n||(n=zt);var i=e[n[0]]-t[n[0]],o=e[n[1]]-t[n[1]];return Math.sqrt(i*i+o*o)}function q(t,e,n){n||(n=zt);var i=e[n[0]]-t[n[0]],o=e[n[1]]-t[n[1]];return 180*Math.atan2(o,i)/Math.PI}function z(t,e){return q(e[1],e[0],jt)-q(t[1],t[0],jt)}function j(t,e){return O(e[0],e[1],jt)/O(t[0],t[1],jt)}function M(){this.evEl=Rt,this.evWin=Ft,this.allow=!0,this.pressed=!1,T.apply(this,arguments)}function R(){this.evEl=Wt,this.evWin=Bt,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function F(){this.evTarget=Vt,this.evWin=Yt,this.started=!1,T.apply(this,arguments)}function N(t,e){var n=b(t.touches),i=b(t.changedTouches);return e&(Dt|Et)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function H(){this.evTarget=Gt,this.targetIds={},T.apply(this,arguments)}function W(t,e){var n=b(t.touches),i=this.targetIds;if(e&(Tt|Ct)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var o,r,s=b(t.changedTouches),a=[],l=this.target;if(r=n.filter(function(t){return m(t.target,l)}),e===Tt)for(o=0;o<r.length;)i[r[o].identifier]=!0,o++;for(o=0;o<s.length;)i[s[o].identifier]&&a.push(s[o]),e&(Dt|Et)&&delete i[s[o].identifier],o++;return a.length?[w(r.concat(a),"identifier",!0),a]:void 0}function B(){T.apply(this,arguments);var t=c(this.handler,this);this.touch=new H(this.manager,t),this.mouse=new M(this.manager,t)}function U(t,e){this.manager=t,this.set(e)}function V(t){if(g(t,ee))return ee;var e=g(t,ne),n=g(t,ie);return e&&n?ne+" "+ie:e||n?e?ne:ie:g(t,te)?te:Zt}function Y(t){this.id=_(),this.manager=null,this.options=l(t||{},this.defaults),this.options.enable=h(this.options.enable,!0),this.state=oe,this.simultaneous={},this.requireFail=[]}function X(t){return t&ue?"cancel":t&ae?"end":t&se?"move":t&re?"start":""}function G(t){return t==Lt?"down":t==kt?"up":t==It?"left":t==Pt?"right":""}function J(t,e){var n=e.manager;return n?n.get(t):t}function Q(){Y.apply(this,arguments)}function K(){Q.apply(this,arguments),this.pX=null,this.pY=null}function Z(){Q.apply(this,arguments)}function tt(){Y.apply(this,arguments),this._timer=null,this._input=null}function et(){Q.apply(this,arguments)}function nt(){Q.apply(this,arguments)}function it(){Y.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function ot(t,e){return e=e||{},e.recognizers=h(e.recognizers,ot.defaults.preset),new rt(t,e)}function rt(t,e){e=e||{},this.options=l(e,ot.defaults),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.element=t,this.input=C(this),this.touchAction=new U(this,this.options.touchAction),st(this,!0),s(e.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function st(t,e){var n=t.element;s(t.options.cssProps,function(t,i){n.style[S(n.style,i)]=e?t:""})}function at(t,n){var i=e.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var lt=["","webkit","moz","MS","ms","o"],ut=e.createElement("div"),ct="function",dt=Math.round,ht=Math.abs,pt=Date.now,ft=1,mt=/mobile|tablet|ip(ad|hone|od)|android/i,gt="ontouchstart"in t,vt=S(t,"PointerEvent")!==i,yt=gt&&mt.test(navigator.userAgent),bt="touch",wt="pen",St="mouse",_t="kinect",xt=25,Tt=1,Ct=2,Dt=4,Et=8,At=1,It=2,Pt=4,kt=8,Lt=16,$t=It|Pt,Ot=kt|Lt,qt=$t|Ot,zt=["x","y"],jt=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(x(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(x(this.element),this.evWin,this.domHandler)}};var Mt={mousedown:Tt,mousemove:Ct,mouseup:Dt},Rt="mousedown",Ft="mousemove mouseup";u(M,T,{handler:function(t){var e=Mt[t.type];e&Tt&&0===t.button&&(this.pressed=!0),e&Ct&&1!==t.which&&(e=Dt),this.pressed&&this.allow&&(e&Dt&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:St,srcEvent:t}))}});var Nt={pointerdown:Tt,pointermove:Ct,pointerup:Dt,pointercancel:Et,pointerout:Et},Ht={2:bt,3:wt,4:St,5:_t},Wt="pointerdown",Bt="pointermove pointerup pointercancel";t.MSPointerEvent&&(Wt="MSPointerDown",Bt="MSPointerMove MSPointerUp MSPointerCancel"),u(R,T,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),o=Nt[i],r=Ht[t.pointerType]||t.pointerType,s=r==bt,a=y(e,t.pointerId,"pointerId");o&Tt&&(0===t.button||s)?0>a&&(e.push(t),a=e.length-1):o&(Dt|Et)&&(n=!0),0>a||(e[a]=t,this.callback(this.manager,o,{pointers:e,changedPointers:[t],pointerType:r,srcEvent:t}),n&&e.splice(a,1))}});var Ut={touchstart:Tt,touchmove:Ct,touchend:Dt,touchcancel:Et},Vt="touchstart",Yt="touchstart touchmove touchend touchcancel";u(F,T,{handler:function(t){var e=Ut[t.type];if(e===Tt&&(this.started=!0),this.started){var n=N.call(this,t,e);e&(Dt|Et)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:bt,srcEvent:t})}}});var Xt={touchstart:Tt,touchmove:Ct,touchend:Dt,touchcancel:Et},Gt="touchstart touchmove touchend touchcancel";u(H,T,{handler:function(t){var e=Xt[t.type],n=W.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:bt,srcEvent:t})}}),u(B,T,{handler:function(t,e,n){var i=n.pointerType==bt,o=n.pointerType==St;if(i)this.mouse.allow=!1;else if(o&&!this.mouse.allow)return;e&(Dt|Et)&&(this.mouse.allow=!0),this.callback(t,e,n)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Jt=S(ut.style,"touchAction"),Qt=Jt!==i,Kt="compute",Zt="auto",te="manipulation",ee="none",ne="pan-x",ie="pan-y";
U.prototype={set:function(t){t==Kt&&(t=this.compute()),Qt&&(this.manager.element.style[Jt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return s(this.manager.recognizers,function(e){d(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),V(t.join(" "))},preventDefaults:function(t){if(!Qt){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,o=g(i,ee),r=g(i,ie),s=g(i,ne);return o||r&&n&$t||s&&n&Ot?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var oe=1,re=2,se=4,ae=8,le=ae,ue=16,ce=32;Y.prototype={defaults:{},set:function(t){return a(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(r(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=J(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return r(t,"dropRecognizeWith",this)?this:(t=J(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(r(t,"requireFailure",this))return this;var e=this.requireFail;return t=J(t,this),-1===y(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(r(t,"dropRequireFailure",this))return this;t=J(t,this);var e=y(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(n.options.event+(e?X(i):""),t)}var n=this,i=this.state;ae>i&&e(!0),e(),i>=ae&&e(!0)},tryEmit:function(t){return this.canEmit()?this.emit(t):void(this.state=ce)},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(ce|oe)))return!1;t++}return!0},recognize:function(t){var e=a({},t);return d(this.options.enable,[this,e])?(this.state&(le|ue|ce)&&(this.state=oe),this.state=this.process(e),void(this.state&(re|se|ae|ue)&&this.tryEmit(e))):(this.reset(),void(this.state=ce))},process:function(t){},getTouchAction:function(){},reset:function(){}},u(Q,Y,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(re|se),o=this.attrTest(t);return i&&(n&Et||!o)?e|ue:i||o?n&Dt?e|ae:e&re?e|se:re:ce}}),u(K,Q,{defaults:{event:"pan",threshold:10,pointers:1,direction:qt},getTouchAction:function(){var t=this.options.direction,e=[];return t&$t&&e.push(ie),t&Ot&&e.push(ne),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,o=t.direction,r=t.deltaX,s=t.deltaY;return o&e.direction||(e.direction&$t?(o=0===r?At:0>r?It:Pt,n=r!=this.pX,i=Math.abs(t.deltaX)):(o=0===s?At:0>s?kt:Lt,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=o,n&&i>e.threshold&&o&e.direction},attrTest:function(t){return Q.prototype.attrTest.call(this,t)&&(this.state&re||!(this.state&re)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=G(t.direction);e&&this.manager.emit(this.options.event+e,t),this._super.emit.call(this,t)}}),u(Z,Q,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[ee]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&re)},emit:function(t){if(this._super.emit.call(this,t),1!==t.scale){var e=t.scale<1?"in":"out";this.manager.emit(this.options.event+e,t)}}}),u(tt,Y,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return[Zt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(Dt|Et)&&!r)this.reset();else if(t.eventType&Tt)this.reset(),this._timer=o(function(){this.state=le,this.tryEmit()},e.time,this);else if(t.eventType&Dt)return le;return ce},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===le&&(t&&t.eventType&Dt?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=pt(),this.manager.emit(this.options.event,this._input)))}}),u(et,Q,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[ee]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&re)}}),u(nt,Q,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:$t|Ot,pointers:1},getTouchAction:function(){return K.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&($t|Ot)?e=t.velocity:n&$t?e=t.velocityX:n&Ot&&(e=t.velocityY),this._super.attrTest.call(this,t)&&n&t.direction&&t.distance>this.options.threshold&&ht(e)>this.options.velocity&&t.eventType&Dt},emit:function(t){var e=G(t.direction);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),u(it,Y,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[te]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&Tt&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=Dt)return this.failTimeout();var s=this.pTime?t.timeStamp-this.pTime<e.interval:!0,a=!this.pCenter||O(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&s?this.count+=1:this.count=1,this._input=t;var l=this.count%e.taps;if(0===l)return this.hasRequireFailures()?(this._timer=o(function(){this.state=le,this.tryEmit()},e.interval,this),re):le}return ce},failTimeout:function(){return this._timer=o(function(){this.state=ce},this.options.interval,this),ce},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==le&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),ot.VERSION="2.0.4",ot.defaults={domEvents:!1,touchAction:Kt,enable:!0,inputTarget:null,inputClass:null,preset:[[et,{enable:!1}],[Z,{enable:!1},["rotate"]],[nt,{direction:$t}],[K,{direction:$t},["swipe"]],[it],[it,{event:"doubletap",taps:2},["tap"]],[tt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var de=1,he=2;rt.prototype={set:function(t){return a(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?he:de},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,o=e.curRecognizer;(!o||o&&o.state&le)&&(o=e.curRecognizer=null);for(var r=0;r<i.length;)n=i[r],e.stopped===he||o&&n!=o&&!n.canRecognizeWith(o)?n.reset():n.recognize(t),!o&&n.state&(re|se|ae)&&(o=e.curRecognizer=n),r++}},get:function(t){if(t instanceof Y)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(r(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(r(t,"remove",this))return this;var e=this.recognizers;return t=this.get(t),e.splice(y(e,t),1),this.touchAction.update(),this},on:function(t,e){var n=this.handlers;return s(v(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this},off:function(t,e){var n=this.handlers;return s(v(t),function(t){e?n[t].splice(y(n[t],e),1):delete n[t]}),this},emit:function(t,e){this.options.domEvents&&at(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&st(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},a(ot,{INPUT_START:Tt,INPUT_MOVE:Ct,INPUT_END:Dt,INPUT_CANCEL:Et,STATE_POSSIBLE:oe,STATE_BEGAN:re,STATE_CHANGED:se,STATE_ENDED:ae,STATE_RECOGNIZED:le,STATE_CANCELLED:ue,STATE_FAILED:ce,DIRECTION_NONE:At,DIRECTION_LEFT:It,DIRECTION_RIGHT:Pt,DIRECTION_UP:kt,DIRECTION_DOWN:Lt,DIRECTION_HORIZONTAL:$t,DIRECTION_VERTICAL:Ot,DIRECTION_ALL:qt,Manager:rt,Input:T,TouchAction:U,TouchInput:H,MouseInput:M,PointerEventInput:R,TouchMouseInput:B,SingleTouchInput:F,Recognizer:Y,AttrRecognizer:Q,Tap:it,Pan:K,Swipe:nt,Pinch:Z,Rotate:et,Press:tt,on:p,off:f,each:s,merge:l,extend:a,inherit:u,bindFn:c,prefixed:S}),typeof define==ct&&define.amd?define(function(){return ot}):"undefined"!=typeof module&&module.exports?module.exports=ot:t[n]=ot}(window,document,"Hammer"),"function"==typeof define&&define.amd)define(["imagesLoaded","Hammer"],defineSequence);else{Hammer="function"!=typeof Hammer?null:Hammer,imagesLoaded="function"!=typeof imagesLoaded?null:imagesLoaded;var sequence=defineSequence(imagesLoaded,Hammer)}!function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function o(e,n){t.fn[e]=function(o){if("string"==typeof o){for(var s=i.call(arguments,1),a=0,l=this.length;l>a;a++){var u=this[a],c=t.data(u,e);if(c)if(t.isFunction(c[o])&&"_"!==o.charAt(0)){var d=c[o].apply(c,s);if(void 0!==d)return d}else r("no such method '"+o+"' for "+e+" instance");else r("cannot call methods on "+e+" prior to initialization; attempted to call '"+o+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(o),i._init()):(i=new n(this,o),t.data(this,e,i))})}}if(t){var r="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),o(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(t){return new RegExp("(^|\\s+)"+t+"(\\s+|$)")}function n(t,e){var n=i(t,e)?r:o;n(t,e)}var i,o,r;"classList"in document.documentElement?(i=function(t,e){return t.classList.contains(e)},o=function(t,e){t.classList.add(e)},r=function(t,e){t.classList.remove(e)}):(i=function(t,n){return e(n).test(t.className)},o=function(t,e){i(t,e)||(t.className=t.className+" "+e)},r=function(t,n){t.className=t.className.replace(e(n)," ")});var s={hasClass:i,addClass:o,removeClass:r,toggleClass:n,has:i,add:o,remove:r,toggle:n};"function"==typeof define&&define.amd?define("classie/classie",s):"object"==typeof exports?module.exports=s:t.classie=s}(window),function(){function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,o=this,r=o.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,o=this.getListenersAsObject(t),r="object"==typeof n;for(i in o)o.hasOwnProperty(i)&&-1===e(o[i],n)&&o[i].push(r?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,o,r=this.getListenersAsObject(t);for(o in r)r.hasOwnProperty(o)&&(i=e(r[o],n),-1!==i&&r[o].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,o,r=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)r.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(o=e[i])&&("function"==typeof o?r.call(this,i,o):s.call(this,i,o));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,o,r,s=this.getListenersAsObject(t);for(o in s)if(s.hasOwnProperty(o))for(i=s[o].length;i--;)n=s[o][i],n.once===!0&&this.removeListener(t,n.listener),r=n.listener.apply(this,e||[]),r===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return o.EventEmitter=r,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:o.EventEmitter=t}.call(this),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var o=function(){};n.removeEventListener?o=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(o=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var r={bind:i,unbind:o};"function"==typeof define&&define.amd?define("eventie/eventie",r):"object"==typeof exports?module.exports=r:t.eventie=r}(window),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,o=0,r=n.length;r>o;o++)if(e=n[o]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function o(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function r(e){function i(){if(!h){h=!0;var i=t.getComputedStyle;if(u=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var o=document.createElement("div");o.style.width="200px",o.style.padding="1px 2px 3px 4px",o.style.borderStyle="solid",o.style.borderWidth="1px 2px 3px 4px",o.style[c]="border-box";var r=document.body||document.documentElement;r.appendChild(o);var a=u(o);d=200===n(a.width),r.removeChild(o)}}}function r(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=u(t);if("none"===e.display)return o();var r={};r.width=t.offsetWidth,r.height=t.offsetHeight;for(var s=r.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),h=0,p=a.length;p>h;h++){var f=a[h],m=e[f];m=l(t,m);var g=parseFloat(m);r[f]=isNaN(g)?0:g}var v=r.paddingLeft+r.paddingRight,y=r.paddingTop+r.paddingBottom,b=r.marginLeft+r.marginRight,w=r.marginTop+r.marginBottom,S=r.borderLeftWidth+r.borderRightWidth,_=r.borderTopWidth+r.borderBottomWidth,x=s&&d,T=n(e.width);T!==!1&&(r.width=T+(x?0:v+S));var C=n(e.height);return C!==!1&&(r.height=C+(x?0:y+_)),r.innerWidth=r.width-(v+S),r.innerHeight=r.height-(y+_),r.outerWidth=r.width+b,r.outerHeight=r.height+w,r}}function l(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,o=i.left,r=e.runtimeStyle,s=r&&r.left;return s&&(r.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=o,s&&(r.left=s),n}var u,c,d,h=!1;return r}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],r):"object"==typeof exports?module.exports=r(require("desandro-get-style-property")):t.getSize=r(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==r.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function o(o){return"complete"===r.readyState?i():(o.bind(r,"DOMContentLoaded",n),o.bind(r,"readystatechange",n),o.bind(t,"load",n)),e}var r=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],o):"object"==typeof exports?module.exports=o(require("eventie")):t.docReady=o(t.eventie)}(window),function(t){function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),o=0,r=i.length;r>o;o++)if(i[o]===t)return!0;return!1}function o(t,i){return n(t),e(t,i)}var r,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var o=e[n],r=o+"MatchesSelector";if(t[r])return r}}();if(s){var a=document.createElement("div"),l=e(a,"div");r=l?e:o}else r=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return r}):"object"==typeof exports?module.exports=r:window.matchesSelector=r}(Element.prototype),function(t,e){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var o=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==o.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,o=t.length;o>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var o=[],r=0,s=t.length;s>r;r++){var a=t[r];if(i.isElement(a))if(e){n(a,e)&&o.push(a);for(var l=a.querySelectorAll(e),u=0,c=l.length;c>u;u++)o.push(l[u])}else o.push(a)}return o},i.debounceMethod=function(t,e,n){var i=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];t&&clearTimeout(t);var e=arguments,r=this;this[o]=setTimeout(function(){i.apply(r,e),delete r[o]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var r=t.console;return i.htmlInit=function(n,o){e(function(){for(var e=i.toDashed(o),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",l=0,u=s.length;u>l;l++){var c,d=s[l],h=d.getAttribute(a);try{c=h&&JSON.parse(h)}catch(p){r&&r.error("Error parsing "+a+" on "+d.nodeName.toLowerCase()+(d.id?"#"+d.id:"")+": "+p);continue}var f=new n(d,c),m=t.jQuery;m&&m.data(d,o,f)}})},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/cell",["get-size/get-size"],function(n){return e(t,n)}):"object"==typeof exports?module.exports=e(t,require("get-size")):(t.Flickity=t.Flickity||{},t.Flickity.Cell=e(t,t.getSize))}(window,function(t,e){function n(t,e){this.element=t,this.parent=e,this.create()}var i="attachEvent"in t;return n.prototype.create=function(){this.element.style.position="absolute",i&&this.element.setAttribute("unselectable","on"),this.x=0,this.shift=0},n.prototype.destroy=function(){this.element.style.position="";var t=this.parent.originSide;this.element.style[t]=""},n.prototype.getSize=function(){this.size=e(this.element)},n.prototype.setPosition=function(t){this.x=t,this.setDefaultTarget(),this.renderPosition(t)},n.prototype.setDefaultTarget=function(){var t="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[t]+this.size.width*this.parent.cellAlign},n.prototype.renderPosition=function(t){var e=this.parent.originSide;this.element.style[e]=this.parent.getPositionValue(t)},n.prototype.wrapShift=function(t){this.shift=t,this.renderPosition(this.x+this.parent.slideableWidth*t)},n.prototype.remove=function(){this.element.parentNode.removeChild(this.element)},n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/animate",["get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Flickity=t.Flickity||{},t.Flickity.animatePrototype=e(t,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n){for(var i,o=0,r="webkit moz ms o".split(" "),s=t.requestAnimationFrame,a=t.cancelAnimationFrame,l=0;l<r.length&&(!s||!a);l++)i=r[l],s=s||t[i+"RequestAnimationFrame"],a=a||t[i+"CancelAnimationFrame"]||t[i+"CancelRequestAnimationFrame"];s&&a||(s=function(e){var n=(new Date).getTime(),i=Math.max(0,16-(n-o)),r=t.setTimeout(function(){e(n+i)},i);return o=n+i,r},a=function(e){t.clearTimeout(e)});var u={};u.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},u.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var t=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(t),this.isAnimating){var e=this;s(function(){e.animate()})}};var c=e("transform"),d=!!e("perspective");return u.positionSlider=function(){var t=this.x;this.options.wrapAround&&this.cells.length>1&&(t=n.modulo(t,this.slideableWidth),t-=this.slideableWidth,this.shiftWrapCells(t)),t+=this.cursorPosition,t=this.options.rightToLeft&&c?-t:t;var e=this.getPositionValue(t);c?this.slider.style[c]=d&&this.isAnimating?"translate3d("+e+",0,0)":"translateX("+e+")":this.slider.style[this.originSide]=e},u.positionSliderAtSelected=function(){if(this.cells.length){var t=this.cells[this.selectedIndex];this.x=-t.target,this.positionSlider()}},u.getPositionValue=function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},u.settle=function(t){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*t)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,d&&this.positionSlider(),this.dispatchEvent("settle"))},u.shiftWrapCells=function(t){var e=this.cursorPosition+t;this._shiftCells(this.beforeShiftCells,e,-1);var n=this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},u._shiftCells=function(t,e,n){for(var i=0,o=t.length;o>i;i++){var r=t[i],s=e>0?n:0;r.wrapShift(s),e-=r.size.outerWidth}},u._unshiftCells=function(t){if(t&&t.length)for(var e=0,n=t.length;n>e;e++)t[e].wrapShift(0)},u.integratePhysics=function(){this.velocity+=this.accel,this.x+=this.velocity,this.velocity*=this.getFrictionFactor(),this.accel=0},u.applyForce=function(t){this.accel+=t},u.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},u.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},u.applyDragForce=function(){if(this.isPointerDown){var t=this.dragX-this.x,e=t-this.velocity;this.applyForce(e)}},u.applySelectedAttraction=function(){var t=this.cells.length;if(!this.isPointerDown&&!this.isFreeScrolling&&t){var e=this.cells[this.selectedIndex],n=this.options.wrapAround&&t>1?this.slideableWidth*Math.floor(this.selectedIndex/t):0,i=-1*(e.target+n)-this.x,o=i*this.options.selectedAttraction;this.applyForce(o)}},u}),function(t,e){if("function"==typeof define&&define.amd)define("flickity/js/flickity",["classie/classie","eventEmitter/EventEmitter","eventie/eventie","get-size/get-size","fizzy-ui-utils/utils","./cell","./animate"],function(n,i,o,r,s,a,l){return e(t,n,i,o,r,s,a,l)});else if("object"==typeof exports)module.exports=e(t,require("desandro-classie"),require("wolfy87-eventemitter"),require("eventie"),require("get-size"),require("fizzy-ui-utils"),require("./cell"),require("./animate"));else{var n=t.Flickity;t.Flickity=e(t,t.classie,t.EventEmitter,t.eventie,t.getSize,t.fizzyUIUtils,n.Cell,n.animatePrototype)}}(window,function(t,e,n,i,o,r,s,a){function l(t,e){for(t=r.makeArray(t);t.length;)e.appendChild(t.shift())}function u(t,e){var n=r.getQueryElement(t);return n?(this.element=n,c&&(this.$element=c(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e),void this._create()):void(h&&h.error("Bad element for Flickity: "+(n||t)))}var c=t.jQuery,d=t.getComputedStyle,h=t.console,p=0,f={};u.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},u.createMethods=[],r.extend(u.prototype,n.prototype),u.prototype._create=function(){var e=this.guid=++p;this.element.flickityGUID=e,f[e]=this,this.selectedIndex=this.options.initialIndex||0,this.restingFrames=0,this.x=0,this.velocity=0,this.accel=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",u.setUnselectable(this.viewport),this._createSlider(),(this.options.resize||this.options.watchCSS)&&(i.bind(t,"resize",this),this.isResizeBound=!0);for(var n=0,o=u.createMethods.length;o>n;n++){var r=u.createMethods[n];this[r]()}this.options.watchCSS?this.watchCSS():this.activate()},u.prototype.option=function(t){r.extend(this.options,t)},u.prototype.activate=function(){if(!this.isActive){this.isActive=!0,e.add(this.element,"flickity-enabled"),this.options.rightToLeft&&e.add(this.element,"flickity-rtl"),this.getSize();var t=this._filterFindCellElements(this.element.children);l(t,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,i.bind(this.element,"keydown",this)),this.emit("activate"),this.positionSliderAtSelected(),this.select(this.selectedIndex)}},u.prototype._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",t.style[this.originSide]=0,this.slider=t},u.prototype._filterFindCellElements=function(t){return r.filterFindElements(t,this.options.cellSelector)},u.prototype.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},u.prototype._makeCells=function(t){for(var e=this._filterFindCellElements(t),n=[],i=0,o=e.length;o>i;i++){var r=e[i],a=new s(r,this);n.push(a)}return n},u.prototype.getLastCell=function(){return this.cells[this.cells.length-1]},u.prototype.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},u.prototype._positionCells=function(t){t=t||0,this.maxCellHeight=t?this.maxCellHeight||0:0;var e=0;if(t>0){var n=this.cells[t-1];e=n.x+n.size.outerWidth}for(var i,o=this.cells.length,r=t;o>r;r++)i=this.cells[r],i.setPosition(e),e+=i.size.outerWidth,this.maxCellHeight=Math.max(i.size.outerHeight,this.maxCellHeight);this.slideableWidth=e,this._containCells()},u.prototype._sizeCells=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];i.getSize()}},u.prototype._init=u.prototype.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},u.prototype.getSize=function(){this.size=o(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var m={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};u.prototype.setCellAlign=function(){var t=m[this.options.cellAlign];this.cellAlign=t?t[this.originSide]:this.options.cellAlign},u.prototype.setGallerySize=function(){this.options.setGallerySize&&(this.viewport.style.height=this.maxCellHeight+"px")},u.prototype._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var t=this.cursorPosition,e=this.cells.length-1;this.beforeShiftCells=this._getGapCells(t,e,-1),t=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(t,0,1)}},u.prototype._getGapCells=function(t,e,n){for(var i=[];t>0;){var o=this.cells[e];if(!o)break;i.push(o),e+=n,t-=o.size.outerWidth}return i},u.prototype._containCells=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length)for(var t=this.options.rightToLeft?"marginRight":"marginLeft",e=this.options.rightToLeft?"marginLeft":"marginRight",n=this.cells[0].size[t],i=this.getLastCell(),o=this.slideableWidth-i.size[e],r=o-this.size.innerWidth*(1-this.cellAlign),s=o<this.size.innerWidth,a=0,l=this.cells.length;l>a;a++){var u=this.cells[a];u.setDefaultTarget(),s?u.target=o*this.cellAlign:(u.target=Math.max(u.target,this.cursorPosition+n),u.target=Math.min(u.target,r))}},u.prototype.dispatchEvent=function(t,e,n){var i=[e].concat(n);if(this.emitEvent(t,i),c&&this.$element)if(e){var o=c.Event(e);o.type=t,this.$element.trigger(o,n)}else this.$element.trigger(t,n)},u.prototype.select=function(t,e){if(this.isActive){var n=this.cells.length;this.options.wrapAround&&n>1&&(0>t?this.x-=this.slideableWidth:t>=n&&(this.x+=this.slideableWidth)),(this.options.wrapAround||e)&&(t=r.modulo(t,n)),this.cells[t]&&(this.selectedIndex=t,this.setSelectedCell(),this.startAnimation(),this.dispatchEvent("cellSelect"))}},u.prototype.previous=function(t){this.select(this.selectedIndex-1,t)},u.prototype.next=function(t){this.select(this.selectedIndex+1,t)},u.prototype.setSelectedCell=function(){this._removeSelectedCellClass(),this.selectedCell=this.cells[this.selectedIndex],this.selectedElement=this.selectedCell.element,e.add(this.selectedElement,"is-selected")},u.prototype._removeSelectedCellClass=function(){this.selectedCell&&e.remove(this.selectedCell.element,"is-selected")},u.prototype.getCell=function(t){for(var e=0,n=this.cells.length;n>e;e++){var i=this.cells[e];if(i.element==t)return i}},u.prototype.getCells=function(t){t=r.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var o=t[n],s=this.getCell(o);s&&e.push(s)}return e},u.prototype.getCellElements=function(){for(var t=[],e=0,n=this.cells.length;n>e;e++)t.push(this.cells[e].element);return t},u.prototype.getParentCell=function(t){var e=this.getCell(t);return e?e:(t=r.getParent(t,".flickity-slider > *"),
this.getCell(t))},u.prototype.getAdjacentCellElements=function(t,e){if(!t)return[this.selectedElement];e=void 0===e?this.selectedIndex:e;var n=this.cells.length;if(1+2*t>=n)return this.getCellElements();for(var i=[],o=e-t;e+t>=o;o++){var s=this.options.wrapAround?r.modulo(o,n):o,a=this.cells[s];a&&i.push(a.element)}return i},u.prototype.uiChange=function(){this.emit("uiChange")},u.prototype.childUIPointerDown=function(t){this.emitEvent("childUIPointerDown",[t])},u.prototype.onresize=function(){this.watchCSS(),this.resize()},r.debounceMethod(u,"onresize",150),u.prototype.resize=function(){this.isActive&&(this.getSize(),this.options.wrapAround&&(this.x=r.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.positionSliderAtSelected())};var g=u.supportsConditionalCSS=function(){var t;return function(){if(void 0!==t)return t;if(!d)return void(t=!1);var e=document.createElement("style"),n=document.createTextNode('body:after { content: "foo"; display: none; }');e.appendChild(n),document.head.appendChild(e);var i=d(document.body,":after").content;return t=-1!=i.indexOf("foo"),document.head.removeChild(e),t}}();u.prototype.watchCSS=function(){var t=this.options.watchCSS;if(t){var e=g();if(!e){var n="fallbackOn"==t?"activate":"deactivate";return void this[n]()}var i=d(this.element,":after").content;-1!=i.indexOf("flickity")?this.activate():this.deactivate()}},u.prototype.onkeydown=function(t){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==t.keyCode){var e=this.options.rightToLeft?"next":"previous";this.uiChange(),this[e]()}else if(39==t.keyCode){var n=this.options.rightToLeft?"previous":"next";this.uiChange(),this[n]()}},u.prototype.deactivate=function(){if(this.isActive){e.remove(this.element,"flickity-enabled"),e.remove(this.element,"flickity-rtl");for(var t=0,n=this.cells.length;n>t;t++){var o=this.cells[t];o.destroy()}this._removeSelectedCellClass(),this.element.removeChild(this.viewport),l(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),i.unbind(this.element,"keydown",this)),this.isActive=!1,this.emit("deactivate")}},u.prototype.destroy=function(){this.deactivate(),this.isResizeBound&&i.unbind(t,"resize",this),this.emit("destroy"),c&&this.$element&&c.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete f[this.guid]},r.extend(u.prototype,a);var v="attachEvent"in t;return u.setUnselectable=function(t){v&&t.setAttribute("unselectable","on")},u.data=function(t){t=r.getQueryElement(t);var e=t&&t.flickityGUID;return e&&f[e]},r.htmlInit(u,"flickity"),c&&c.bridget&&c.bridget("flickity",u),u.Cell=s,u}),function(t,e){"function"==typeof define&&define.amd?define("unipointer/unipointer",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("eventie")):t.Unipointer=e(t,t.EventEmitter,t.eventie)}(window,function(t,e,n){function i(){}function o(){}o.prototype=new e,o.prototype.bindStartEvent=function(t){this._bindStartEvent(t,!0)},o.prototype.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},o.prototype._bindStartEvent=function(e,i){i=void 0===i?!0:!!i;var o=i?"bind":"unbind";t.navigator.pointerEnabled?n[o](e,"pointerdown",this):t.navigator.msPointerEnabled?n[o](e,"MSPointerDown",this):(n[o](e,"mousedown",this),n[o](e,"touchstart",this))},o.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},o.prototype.getTouch=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];if(i.identifier==this.pointerIdentifier)return i}},o.prototype.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},o.prototype.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},o.prototype.onMSPointerDown=o.prototype.onpointerdown=function(t){this._pointerDown(t,t)},o.prototype._pointerDown=function(t,e){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},o.prototype.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return o.prototype._bindPostStartEvents=function(e){if(e){for(var i=r[e.type],o=e.preventDefault?t:document,s=0,a=i.length;a>s;s++){var l=i[s];n.bind(o,l,this)}this._boundPointerEvents={events:i,node:o}}},o.prototype._unbindPostStartEvents=function(){var t=this._boundPointerEvents;if(t&&t.events){for(var e=0,i=t.events.length;i>e;e++){var o=t.events[e];n.unbind(t.node,o,this)}delete this._boundPointerEvents}},o.prototype.onmousemove=function(t){this._pointerMove(t,t)},o.prototype.onMSPointerMove=o.prototype.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},o.prototype.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},o.prototype._pointerMove=function(t,e){this.pointerMove(t,e)},o.prototype.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},o.prototype.onmouseup=function(t){this._pointerUp(t,t)},o.prototype.onMSPointerUp=o.prototype.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},o.prototype.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},o.prototype._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},o.prototype.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},o.prototype._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},o.prototype.pointerDone=i,o.prototype.onMSPointerCancel=o.prototype.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},o.prototype.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},o.prototype._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},o.prototype.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},o.getPointerPoint=function(t){return{x:void 0!==t.pageX?t.pageX:t.clientX,y:void 0!==t.pageY?t.pageY:t.clientY}},o}),function(t,e){"function"==typeof define&&define.amd?define("unidragger/unidragger",["eventie/eventie","unipointer/unipointer"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("unipointer")):t.Unidragger=e(t,t.eventie,t.Unipointer)}(window,function(t,e,n){function i(){}function o(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function r(){}function s(){return!1}r.prototype=new n,r.prototype.bindHandles=function(){this._bindHandles(!0)},r.prototype.unbindHandles=function(){this._bindHandles(!1)};var a=t.navigator;r.prototype._bindHandles=function(t){t=void 0===t?!0:!!t;var n;n=a.pointerEnabled?function(e){e.style.touchAction=t?"none":""}:a.msPointerEnabled?function(e){e.style.msTouchAction=t?"none":""}:function(){t&&u(s)};for(var i=t?"bind":"unbind",o=0,r=this.handles.length;r>o;o++){var s=this.handles[o];this._bindStartEvent(s,t),n(s),e[i](s,"click",this)}};var l="attachEvent"in document.documentElement,u=l?function(t){"IMG"==t.nodeName&&(t.ondragstart=s);for(var e=t.querySelectorAll("img"),n=0,i=e.length;i>n;n++){var o=e[n];o.ondragstart=s}}:i;r.prototype.pointerDown=function(n,i){if("INPUT"==n.target.nodeName&&"range"==n.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(n,i);var o=document.activeElement;o&&o.blur&&o.blur(),this._bindPostStartEvents(n),this.pointerDownScroll=r.getScrollPosition(),e.bind(t,"scroll",this),this.emitEvent("pointerDown",[n,i])},r.prototype._dragPointerDown=function(t,e){this.pointerDownPoint=n.getPointerPoint(e);var i="touchstart"==t.type,r=t.target.nodeName;i||"SELECT"==r||o(t)},r.prototype.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,n]),this._dragMove(t,e,n)},r.prototype._dragPointerMove=function(t,e){var i=n.getPointerPoint(e),o={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(o)&&this._dragStart(t,e),o},r.prototype.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},r.prototype.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},r.prototype._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},n.prototype.pointerDone=function(){e.unbind(t,"scroll",this)},r.prototype._dragStart=function(t,e){this.isDragging=!0,this.dragStartPoint=r.getPointerPoint(e),this.isPreventingClicks=!0,this.dragStart(t,e)},r.prototype.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},r.prototype._dragMove=function(t,e,n){this.isDragging&&this.dragMove(t,e,n)},r.prototype.dragMove=function(t,e,n){o(t),this.emitEvent("dragMove",[t,e,n])},r.prototype._dragEnd=function(t,e){this.isDragging=!1;var n=this;setTimeout(function(){delete n.isPreventingClicks}),this.dragEnd(t,e)},r.prototype.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},r.prototype.pointerDone=function(){e.unbind(t,"scroll",this),delete this.pointerDownScroll},r.prototype.onclick=function(t){this.isPreventingClicks&&o(t)},r.prototype._staticClick=function(t,e){if(!this.isIgnoringMouseUp||"mouseup"!=t.type){var n=t.target.nodeName;if(("INPUT"==n||"TEXTAREA"==n)&&t.target.focus(),this.staticClick(t,e),"mouseup"!=t.type){this.isIgnoringMouseUp=!0;var i=this;setTimeout(function(){delete i.isIgnoringMouseUp},400)}}},r.prototype.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},r.prototype.onscroll=function(){var t=r.getScrollPosition(),e=this.pointerDownScroll.x-t.x,n=this.pointerDownScroll.y-t.y;(Math.abs(e)>3||Math.abs(n)>3)&&this._pointerDone()},r.getPointerPoint=function(t){return{x:void 0!==t.pageX?t.pageX:t.clientX,y:void 0!==t.pageY?t.pageY:t.clientY}};var c=void 0!==t.pageYOffset;return r.getScrollPosition=function(){return{x:c?t.pageXOffset:document.body.scrollLeft,y:c?t.pageYOffset:document.body.scrollTop}},r.getPointerPoint=n.getPointerPoint,r}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/drag",["classie/classie","eventie/eventie","./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(n,i,o,r,s){return e(t,n,i,o,r,s)}):"object"==typeof exports?module.exports=e(t,require("desandro-classie"),require("eventie"),require("./flickity"),require("unidragger"),require("fizzy-ui-utils")):t.Flickity=e(t,t.classie,t.eventie,t.Flickity,t.Unidragger,t.fizzyUIUtils)}(window,function(t,e,n,i,o,r){function s(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function a(e){var n=o.getPointerPoint(e);return n.y-t.pageYOffset}r.extend(i.defaults,{draggable:!0,touchVerticalScroll:!0}),i.createMethods.push("_createDrag"),r.extend(i.prototype,o.prototype),i.prototype._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag)},i.prototype.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(e.add(this.element,"is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},i.prototype.unbindDrag=function(){this.isDragBound&&(e.remove(this.element,"is-draggable"),this.unbindHandles(),delete this.isDragBound)},i.prototype._uiChangeDrag=function(){delete this.isFreeScrolling},i.prototype._childUIPointerDownDrag=function(t){s(t),this.pointerDownFocus(t)},i.prototype.pointerDown=function(i,r){if("INPUT"==i.target.nodeName&&"range"==i.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(i,r);var s=document.activeElement;s&&s.blur&&s!=this.element&&s!=document.body&&s.blur(),this.pointerDownFocus(i),this.dragX=this.x,e.add(this.viewport,"is-pointer-down"),this._bindPostStartEvents(i),this.pointerDownScroll=o.getScrollPosition(),n.bind(t,"scroll",this),this.dispatchEvent("pointerDown",i,[r])};var l={touchstart:!0,MSPointerDown:!0},u={INPUT:!0,SELECT:!0};i.prototype.pointerDownFocus=function(t){!this.options.accessibility||l[t.type]||u[t.target.nodeName]||this.element.focus()},i.prototype.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.touchVerticalScrollMove(t,e,n),this._dragMove(t,e,n),this.dispatchEvent("pointerMove",t,[e,n])},i.prototype.hasDragStarted=function(t){return!this.isTouchScrolling&&Math.abs(t.x)>3},i.prototype.pointerUp=function(t,n){delete this.isTouchScrolling,e.remove(this.viewport,"is-pointer-down"),this.dispatchEvent("pointerUp",t,[n]),this._dragPointerUp(t,n)};var c={touchmove:!0,MSPointerMove:!0};return i.prototype.touchVerticalScrollMove=function(e,n,i){var o=this.options.touchVerticalScroll,r="withDrag"==o?!o:this.isDragging||!o;!r&&c[e.type]&&!this.isTouchScrolling&&Math.abs(i.y)>10&&(this.startScrollY=t.pageYOffset,this.pointerWindowStartY=a(n),this.isTouchScrolling=!0)},i.prototype.dragStart=function(t,e){this.dragStartPosition=this.x,this.startAnimation(),this.dispatchEvent("dragStart",t,[e])},i.prototype.dragMove=function(t,e,n){s(t),this.previousDragX=this.dragX;var i=this.options.rightToLeft?-1:1,o=this.dragStartPosition+n.x*i;if(!this.options.wrapAround&&this.cells.length){var r=Math.max(-this.cells[0].target,this.dragStartPosition);o=o>r?.5*(o+r):o;var a=Math.min(-this.getLastCell().target,this.dragStartPosition);o=a>o?.5*(o+a):o}this.dragX=o,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",t,[e,n])},i.prototype.dragEnd=function(t,e){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var i=this.getRestingPosition();this.isFreeScrolling=-i>this.cells[0].target&&-i<this.getLastCell().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.select(n),this.dispatchEvent("dragEnd",t,[e])},i.prototype.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getCellDistance(-t,this.selectedIndex)),n=this._getClosestResting(t,e,1),i=this._getClosestResting(t,e,-1),o=n.distance<i.distance?n.index:i.index;return o},i.prototype._getClosestResting=function(t,e,n){for(var i=this.selectedIndex,o=1/0,r=this.options.contain&&!this.options.wrapAround?function(t,e){return e>=t}:function(t,e){return e>t};r(e,o)&&(i+=n,o=e,e=this.getCellDistance(-t,i),null!==e);)e=Math.abs(e);return{distance:o,index:i-n}},i.prototype.getCellDistance=function(t,e){var n=this.cells.length,i=this.options.wrapAround&&n>1,o=i?r.modulo(e,n):e,s=this.cells[o];if(!s)return null;var a=i?this.slideableWidth*Math.floor(e/n):0;return t-(s.target+a)},i.prototype.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var t=this.getCellDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX;return t>0&&e>0?1:0>t&&0>e?-1:0},i.prototype.staticClick=function(t,e){var n=this.getParentCell(t.target),i=n&&n.element,o=n&&r.indexOf(this.cells,n);this.dispatchEvent("staticClick",t,[e,i,o])},i}),function(t,e){"function"==typeof define&&define.amd?define("tap-listener/tap-listener",["unipointer/unipointer"],function(n){return e(t,n)}):"object"==typeof exports?module.exports=e(t,require("unipointer")):t.TapListener=e(t,t.Unipointer)}(window,function(t,e){function n(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function i(t){this.bindTap(t)}i.prototype=new e,i.prototype.bindTap=function(t){t&&(this.unbindTap(),this.tapElement=t,this._bindStartEvent(t,!0))},i.prototype.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)};var o=i.prototype.pointerDown;i.prototype.pointerDown=function(t){"touchstart"==t.type&&n(t),o.apply(this,arguments)};var r=void 0!==t.pageYOffset;return i.prototype.pointerUp=function(n,i){var o=e.getPointerPoint(i),s=this.tapElement.getBoundingClientRect(),a=r?t.pageXOffset:document.body.scrollLeft,l=r?t.pageYOffset:document.body.scrollTop,u=o.x>=s.left+a&&o.x<=s.right+a&&o.y>=s.top+l&&o.y<=s.bottom+l;u&&this.emitEvent("tap",[n,i])},i.prototype.destroy=function(){this.pointerDone(),this.unbindTap()},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/prev-next-button",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,o,r){return e(t,n,i,o,r)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):e(t,t.eventie,t.Flickity,t.TapListener,t.fizzyUIUtils)}(window,function(t,e,n,i,o){function r(t,e){this.direction=t,this.parent=e,this._create()}function s(t){return"string"==typeof t?t:"M "+t.x0+",50 L "+t.x1+","+(t.y1+50)+" L "+t.x2+","+(t.y2+50)+" L "+t.x3+",50  L "+t.x2+","+(50-t.y2)+" L "+t.x1+","+(50-t.y1)+" Z"}var a="http://www.w3.org/2000/svg",l=function(){function t(){if(void 0!==e)return e;var t=document.createElement("div");return t.innerHTML="<svg/>",e=(t.firstChild&&t.firstChild.namespaceURI)==a}var e;return t}();return r.prototype=new i,r.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var t=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==t;var e=this.element=document.createElement("button");if(e.className="flickity-prev-next-button",e.className+=this.isPrevious?" previous":" next",e.setAttribute("type","button"),n.setUnselectable(e),l()){var i=this.createSVG();e.appendChild(i)}else this.setArrowText(),e.className+=" no-svg";var o=this;this.onCellSelect=function(){o.update()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(t,e){o.parent.childUIPointerDown(e)})},r.prototype.activate=function(){this.update(),this.bindTap(this.element),e.bind(this.element,"click",this),this.parent.element.appendChild(this.element)},r.prototype.deactivate=function(){this.parent.element.removeChild(this.element),i.prototype.destroy.call(this),e.unbind(this.element,"click",this)},r.prototype.createSVG=function(){var t=document.createElementNS(a,"svg");t.setAttribute("viewBox","0 0 100 100");var e=document.createElementNS(a,"path"),n=s(this.parent.options.arrowShape);return e.setAttribute("d",n),e.setAttribute("class","arrow"),this.isLeft||e.setAttribute("transform","translate(100, 100) rotate(180) "),t.appendChild(e),t},r.prototype.setArrowText=function(){var t=this.parent.options,e=this.isLeft?t.leftArrowText:t.rightArrowText;o.setText(this.element,e)},r.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var t=this.isPrevious?"previous":"next";this.parent[t]()}},r.prototype.handleEvent=o.handleEvent,r.prototype.onclick=function(){var t=document.activeElement;t&&t==this.element&&this.onTap()},r.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},r.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},r.prototype.update=function(){var t=this.parent.cells;if(this.parent.options.wrapAround&&t.length>1)return void this.enable();var e=t.length?t.length-1:0,n=this.isPrevious?0:e,i=this.parent.selectedIndex==n?"disable":"enable";this[i]()},r.prototype.destroy=function(){this.deactivate()},o.extend(n.defaults,{prevNextButtons:!0,leftArrowText:"‹",rightArrowText:"›",arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),n.createMethods.push("_createPrevNextButtons"),n.prototype._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new r(-1,this),this.nextButton=new r(1,this),this.on("activate",this.activatePrevNextButtons))},n.prototype.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},n.prototype.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},n.PrevNextButton=r,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/page-dots",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,o,r){return e(t,n,i,o,r)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):e(t,t.eventie,t.Flickity,t.TapListener,t.fizzyUIUtils)}(window,function(t,e,n,i,o){function r(t){this.parent=t,this._create()}return r.prototype=new i,r.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",n.setUnselectable(this.holder),this.dots=[];var t=this;this.onCellSelect=function(){t.updateSelected()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(e,n){t.parent.childUIPointerDown(n)})},r.prototype.activate=function(){this.setDots(),this.updateSelected(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},r.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),i.prototype.destroy.call(this)},r.prototype.setDots=function(){var t=this.parent.cells.length-this.dots.length;t>0?this.addDots(t):0>t&&this.removeDots(-t)},r.prototype.addDots=function(t){for(var e=document.createDocumentFragment(),n=[];t;){var i=document.createElement("li");i.className="dot",e.appendChild(i),n.push(i),t--}this.holder.appendChild(e),this.dots=this.dots.concat(n)},r.prototype.removeDots=function(t){for(var e=this.dots.splice(this.dots.length-t,t),n=0,i=e.length;i>n;n++){var o=e[n];this.holder.removeChild(o)}},r.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},r.prototype.onTap=function(t){var e=t.target;if("LI"==e.nodeName){this.parent.uiChange();var n=o.indexOf(this.dots,e);this.parent.select(n)}},r.prototype.destroy=function(){this.deactivate()},n.PageDots=r,o.extend(n.defaults,{pageDots:!0}),n.createMethods.push("_createPageDots"),n.prototype._createPageDots=function(){this.options.pageDots&&(this.pageDots=new r(this),this.on("activate",this.activatePageDots),this.on("cellAddedRemoved",this.onCellAddedRemovedPageDots),this.on("deactivate",this.deactivatePageDots))},n.prototype.activatePageDots=function(){this.pageDots.activate()},n.prototype.onCellAddedRemovedPageDots=function(){this.pageDots.setDots()},n.prototype.deactivatePageDots=function(){this.pageDots.deactivate()},n.PageDots=r,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/player",["eventEmitter/EventEmitter","eventie/eventie","./flickity"],function(t,n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(require("wolfy87-eventemitter"),require("eventie"),require("./flickity")):e(t.EventEmitter,t.eventie,t.Flickity)}(window,function(t,e,n){function i(t){if(this.isPlaying=!1,this.parent=t,r){var e=this;this.onVisibilityChange=function(){e.visibilityChange()}}}var o,r;return"hidden"in document?(o="hidden",r="visibilitychange"):"webkitHidden"in document&&(o="webkitHidden",r="webkitvisibilitychange"),i.prototype=new t,i.prototype.play=function(){this.isPlaying=!0,delete this.isPaused,r&&document.addEventListener(r,this.onVisibilityChange,!1),this.tick()},i.prototype.tick=function(){if(this.isPlaying&&!this.isPaused){this.tickTime=new Date;var t=this.parent.options.autoPlay;t="number"==typeof t?t:3e3;var e=this;this.timeout=setTimeout(function(){e.parent.next(!0),e.tick()},t)}},i.prototype.stop=function(){this.isPlaying=!1,delete this.isPaused,this.clear(),r&&document.removeEventListener(r,this.onVisibilityChange,!1)},i.prototype.clear=function(){clearTimeout(this.timeout)},i.prototype.pause=function(){this.isPlaying&&(this.isPaused=!0,this.clear())},i.prototype.unpause=function(){this.isPaused&&this.play()},i.prototype.visibilityChange=function(){var t=document[o];this[t?"pause":"unpause"]()},n.createMethods.push("_createPlayer"),n.prototype._createPlayer=function(){this.player=new i(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},n.prototype.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),e.bind(this.element,"mouseenter",this),this.isMouseenterBound=!0)},n.prototype.stopPlayer=function(){this.player.stop()},n.prototype.deactivatePlayer=function(){this.player.stop(),this.isMouseenterBound&&(e.unbind(this.element,"mouseenter",this),delete this.isMouseenterBound)},n.prototype.onmouseenter=function(){this.player.pause(),e.bind(this.element,"mouseleave",this)},n.prototype.onmouseleave=function(){this.player.unpause(),e.unbind(this.element,"mouseleave",this)},n.Player=i,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/add-remove-cell",["./flickity","fizzy-ui-utils/utils"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("./flickity"),require("fizzy-ui-utils")):e(t,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,n){function i(t){for(var e=document.createDocumentFragment(),n=0,i=t.length;i>n;n++){var o=t[n];e.appendChild(o.element)}return e}return e.prototype.insert=function(t,e){var n=this._makeCells(t);if(n&&n.length){var o=this.cells.length;e=void 0===e?o:e;var r=i(n),s=e==o;if(s)this.slider.appendChild(r);else{var a=this.cells[e].element;this.slider.insertBefore(r,a)}if(0===e)this.cells=n.concat(this.cells);else if(s)this.cells=this.cells.concat(n);else{var l=this.cells.splice(e,o-e);this.cells=this.cells.concat(n).concat(l)}this._sizeCells(n);var u=e>this.selectedIndex?0:n.length;this._cellAddedRemoved(e,u)}},e.prototype.append=function(t){this.insert(t,this.cells.length)},e.prototype.prepend=function(t){this.insert(t,0)},e.prototype.remove=function(t){var e,i,o,r=this.getCells(t),s=0;for(e=0,i=r.length;i>e;e++){o=r[e];var a=n.indexOf(this.cells,o)<this.selectedIndex;s-=a?1:0}for(e=0,i=r.length;i>e;e++)o=r[e],o.remove(),n.removeFrom(this.cells,o);r.length&&this._cellAddedRemoved(0,s)},e.prototype._cellAddedRemoved=function(t,e){e=e||0,this.selectedIndex+=e,this.selectedIndex=Math.max(0,Math.min(this.cells.length-1,this.selectedIndex)),this.emitEvent("cellAddedRemoved",[t,e]),this.cellChange(t,!0)},e.prototype.cellSizeChange=function(t){var e=this.getCell(t);if(e){e.getSize();var i=n.indexOf(this.cells,e);this.cellChange(i)}},e.prototype.cellChange=function(t,e){var n=this.slideableWidth;this._positionCells(t),this._getWrapShiftCells(),this.setGallerySize(),this.options.freeScroll?(this.x+=n-this.slideableWidth,this.positionSlider()):(e&&this.positionSliderAtSelected(),this.select(this.selectedIndex))},e}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/lazyload",["classie/classie","eventie/eventie","./flickity","fizzy-ui-utils/utils"],function(n,i,o,r){return e(t,n,i,o,r)}):"object"==typeof exports?module.exports=e(t,require("desandro-classie"),require("eventie"),require("./flickity"),require("fizzy-ui-utils")):e(t,t.classie,t.eventie,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,n,i,o){function r(t){if("IMG"==t.nodeName&&t.getAttribute("data-flickity-lazyload"))return[t];var e=t.querySelectorAll("img[data-flickity-lazyload]");return o.makeArray(e)}function s(t,e){this.img=t,this.flickity=e,this.load()}return i.createMethods.push("_createLazyload"),i.prototype._createLazyload=function(){this.on("cellSelect",this.lazyLoad)},i.prototype.lazyLoad=function(){var t=this.options.lazyLoad;if(t){for(var e="number"==typeof t?t:0,n=this.getAdjacentCellElements(e),i=[],o=0,a=n.length;a>o;o++){var l=n[o],u=r(l);i=i.concat(u)}for(o=0,a=i.length;a>o;o++){var c=i[o];new s(c,this)}}},s.prototype.handleEvent=o.handleEvent,s.prototype.load=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},s.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},s.prototype.onerror=function(){this.complete(event,"flickity-lazyerror")},s.prototype.complete=function(t,i){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this);var o=this.flickity.getParentCell(this.img),r=o&&o.element;this.flickity.cellSizeChange(r),e.add(this.img,i),this.flickity.dispatchEvent("lazyLoad",t,r)},i.LazyLoader=s,i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/index",["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],e):"object"==typeof exports&&(module.exports=e(require("./flickity"),require("./drag"),require("./prev-next-button"),require("./page-dots"),require("./player"),require("./add-remove-cell"),require("./lazyload")))}(window,function(t){return t}),function(t,e){"function"==typeof define&&define.amd?define("flickity-as-nav-for/as-nav-for",["classie/classie","flickity/js/index","fizzy-ui-utils/utils"],function(n,i,o){return e(t,n,i,o)}):"object"==typeof exports?module.exports=e(t,require("desandro-classie"),require("flickity"),require("fizzy-ui-utils")):t.Flickity=e(t,t.classie,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,n,i){return n.createMethods.push("_createAsNavFor"),n.prototype._createAsNavFor=function(){this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor);var t=this.options.asNavFor;if(t){var e=this;setTimeout(function(){e.setNavCompanion(t)})}},n.prototype.setNavCompanion=function(t){t=i.getQueryElement(t);var e=n.data(t);if(e&&e!=this){this.navCompanion=e;var o=this;this.onNavCompanionSelect=function(){o.navCompanionSelect()},e.on("cellSelect",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect()}},n.prototype.navCompanionSelect=function(){if(this.navCompanion){var t=this.navCompanion.selectedIndex;this.select(t),this.removeNavSelectedElement(),this.selectedIndex==t&&(this.navSelectedElement=this.cells[t].element,e.add(this.navSelectedElement,"is-nav-selected"))}},n.prototype.activateAsNavFor=function(){this.navCompanionSelect()},n.prototype.removeNavSelectedElement=function(){this.navSelectedElement&&(e.remove(this.navSelectedElement,"is-nav-selected"),delete this.navSelectedElement)},n.prototype.onNavStaticClick=function(t,e,n,i){"number"==typeof i&&this.navCompanion.select(i)},n.prototype.deactivateAsNavFor=function(){this.removeNavSelectedElement()},n.prototype.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("cellSelect",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},n}),function(t,e){"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("eventie")):t.imagesLoaded=e(t,t.EventEmitter,t.eventie)}(window,function(t,e,n){function i(t,e){for(var n in e)t[n]=e[n];return t}function o(t){return"[object Array]"===h.call(t)}function r(t){var e=[];if(o(t))e=t;else if("number"==typeof t.length)for(var n=0,i=t.length;i>n;n++)e.push(t[n]);else e.push(t);return e}function s(t,e,n){if(!(this instanceof s))return new s(t,e);"string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=r(t),this.options=i({},this.options),"function"==typeof e?n=e:i(this.options,e),n&&this.on("always",n),this.getImages(),u&&(this.jqDeferred=new u.Deferred);var o=this;setTimeout(function(){o.check()})}function a(t){this.img=t}function l(t){this.src=t,p[t]=this}var u=t.jQuery,c=t.console,d="undefined"!=typeof c,h=Object.prototype.toString;s.prototype=new e,s.prototype.options={},s.prototype.getImages=function(){
this.images=[];for(var t=0,e=this.elements.length;e>t;t++){var n=this.elements[t];"IMG"===n.nodeName&&this.addImage(n);var i=n.nodeType;if(i&&(1===i||9===i||11===i))for(var o=n.querySelectorAll("img"),r=0,s=o.length;s>r;r++){var a=o[r];this.addImage(a)}}},s.prototype.addImage=function(t){var e=new a(t);this.images.push(e)},s.prototype.check=function(){function t(t,o){return e.options.debug&&d&&c.log("confirm",t,o),e.progress(t),n++,n===i&&e.complete(),!0}var e=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return void this.complete();for(var o=0;i>o;o++){var r=this.images[o];r.on("confirm",t),r.check()}},s.prototype.progress=function(t){this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded;var e=this;setTimeout(function(){e.emit("progress",e,t),e.jqDeferred&&e.jqDeferred.notify&&e.jqDeferred.notify(e,t)})},s.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var e=this;setTimeout(function(){if(e.emit(t,e),e.emit("always",e),e.jqDeferred){var n=e.hasAnyBroken?"reject":"resolve";e.jqDeferred[n](e)}})},u&&(u.fn.imagesLoaded=function(t,e){var n=new s(this,t,e);return n.jqDeferred.promise(u(this))}),a.prototype=new e,a.prototype.check=function(){var t=p[this.img.src]||new l(this.img.src);if(t.isConfirmed)return void this.confirm(t.isLoaded,"cached was confirmed");if(this.img.complete&&void 0!==this.img.naturalWidth)return void this.confirm(0!==this.img.naturalWidth,"naturalWidth");var e=this;t.on("confirm",function(t,n){return e.confirm(t.isLoaded,n),!0}),t.check()},a.prototype.confirm=function(t,e){this.isLoaded=t,this.emit("confirm",this,e)};var p={};return l.prototype=new e,l.prototype.check=function(){if(!this.isChecked){var t=new Image;n.bind(t,"load",this),n.bind(t,"error",this),t.src=this.src,this.isChecked=!0}},l.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.prototype.onload=function(t){this.confirm(!0,"onload"),this.unbindProxyEvents(t)},l.prototype.onerror=function(t){this.confirm(!1,"onerror"),this.unbindProxyEvents(t)},l.prototype.confirm=function(t,e){this.isConfirmed=!0,this.isLoaded=t,this.emit("confirm",this,e)},l.prototype.unbindProxyEvents=function(t){n.unbind(t.target,"load",this),n.unbind(t.target,"error",this)},s}),function(t,e){"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("flickity"),require("imagesloaded")):t.Flickity=e(t,t.Flickity,t.imagesLoaded)}(window,function(t,e,n){return e.createMethods.push("_createImagesLoaded"),e.prototype._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},e.prototype.imagesLoaded=function(){function t(t,n){var i=e.getParentCell(n.img);e.cellSizeChange(i&&i.element),e.options.freeScroll||e.positionSliderAtSelected()}if(this.options.imagesLoaded){var e=this;n(this.slider).on("progress",t)}},e}),function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function o(e,n){t.fn[e]=function(o){if("string"==typeof o){for(var s=i.call(arguments,1),a=0,l=this.length;l>a;a++){var u=this[a],c=t.data(u,e);if(c)if(t.isFunction(c[o])&&"_"!==o.charAt(0)){var d=c[o].apply(c,s);if(void 0!==d)return d}else r("no such method '"+o+"' for "+e+" instance");else r("cannot call methods on "+e+" prior to initialization; attempted to call '"+o+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(o),i._init()):(i=new n(this,o),t.data(this,e,i))})}}if(t){var r="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),o(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var o=function(){};n.removeEventListener?o=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(o=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var r={bind:i,unbind:o};"function"==typeof define&&define.amd?define("eventie/eventie",r):"object"==typeof exports?module.exports=r:t.eventie=r}(window),function(){"use strict";function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,o=this,r=o.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,o=this.getListenersAsObject(t),r="object"==typeof n;for(i in o)o.hasOwnProperty(i)&&-1===e(o[i],n)&&o[i].push(r?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,o,r=this.getListenersAsObject(t);for(o in r)r.hasOwnProperty(o)&&(i=e(r[o],n),-1!==i&&r[o].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,o,r=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)r.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(o=e[i])&&("function"==typeof o?r.call(this,i,o):s.call(this,i,o));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,o,r,s=this.getListenersAsObject(t);for(o in s)if(s.hasOwnProperty(o))for(i=s[o].length;i--;)n=s[o][i],n.once===!0&&this.removeListener(t,n.listener),r=n.listener.apply(this,e||[]),r===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return o.EventEmitter=r,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:o.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,o=0,r=n.length;r>o;o++)if(e=n[o]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function o(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function r(e){function i(){if(!h){h=!0;var i=t.getComputedStyle;if(u=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var o=document.createElement("div");o.style.width="200px",o.style.padding="1px 2px 3px 4px",o.style.borderStyle="solid",o.style.borderWidth="1px 2px 3px 4px",o.style[c]="border-box";var r=document.body||document.documentElement;r.appendChild(o);var a=u(o);d=200===n(a.width),r.removeChild(o)}}}function r(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=u(t);if("none"===e.display)return o();var r={};r.width=t.offsetWidth,r.height=t.offsetHeight;for(var s=r.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),h=0,p=a.length;p>h;h++){var f=a[h],m=e[f];m=l(t,m);var g=parseFloat(m);r[f]=isNaN(g)?0:g}var v=r.paddingLeft+r.paddingRight,y=r.paddingTop+r.paddingBottom,b=r.marginLeft+r.marginRight,w=r.marginTop+r.marginBottom,S=r.borderLeftWidth+r.borderRightWidth,_=r.borderTopWidth+r.borderBottomWidth,x=s&&d,T=n(e.width);T!==!1&&(r.width=T+(x?0:v+S));var C=n(e.height);return C!==!1&&(r.height=C+(x?0:y+_)),r.innerWidth=r.width-(v+S),r.innerHeight=r.height-(y+_),r.outerWidth=r.width+b,r.outerHeight=r.height+w,r}}function l(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,o=i.left,r=e.runtimeStyle,s=r&&r.left;return s&&(r.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=o,s&&(r.left=s),n}var u,c,d,h=!1;return r}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],r):"object"==typeof exports?module.exports=r(require("desandro-get-style-property")):t.getSize=r(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==r.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function o(o){return"complete"===r.readyState?i():(o.bind(r,"DOMContentLoaded",n),o.bind(r,"readystatechange",n),o.bind(t,"load",n)),e}var r=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],o):"object"==typeof exports?module.exports=o(require("eventie")):t.docReady=o(t.eventie)}(window),function(t){"use strict";function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),o=0,r=i.length;r>o;o++)if(i[o]===t)return!0;return!1}function o(t,i){return n(t),e(t,i)}var r,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var o=e[n],r=o+"MatchesSelector";if(t[r])return r}}();if(s){var a=document.createElement("div"),l=e(a,"div");r=l?e:o}else r=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return r}):"object"==typeof exports?module.exports=r:window.matchesSelector=r}(Element.prototype),function(t,e){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var o=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==o.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,o=t.length;o>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var o=[],r=0,s=t.length;s>r;r++){var a=t[r];if(i.isElement(a))if(e){n(a,e)&&o.push(a);for(var l=a.querySelectorAll(e),u=0,c=l.length;c>u;u++)o.push(l[u])}else o.push(a)}return o},i.debounceMethod=function(t,e,n){var i=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];t&&clearTimeout(t);var e=arguments,r=this;this[o]=setTimeout(function(){i.apply(r,e),delete r[o]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var r=t.console;return i.htmlInit=function(n,o){e(function(){for(var e=i.toDashed(o),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",l=0,u=s.length;u>l;l++){var c,d=s[l],h=d.getAttribute(a);try{c=h&&JSON.parse(h)}catch(p){r&&r.error("Error parsing "+a+" on "+d.nodeName.toLowerCase()+(d.id?"#"+d.id:"")+": "+p);continue}var f=new n(d,c),m=t.jQuery;m&&m.data(d,o,f)}})},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,o,r){return e(t,n,i,o,r)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n,i,o){"use strict";function r(t){for(var e in t)return!1;return e=null,!0}function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function a(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var l=t.getComputedStyle,u=l?function(t){return l(t,null)}:function(t){return t.currentStyle},c=i("transition"),d=i("transform"),h=c&&d,p=!!i("perspective"),f={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[c],m=["transform","transition","transitionDuration","transitionProperty"],g=function(){for(var t={},e=0,n=m.length;n>e;e++){var o=m[e],r=i(o);r&&r!==o&&(t[o]=r)}return t}();o.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=n(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var n in t){var i=g[n]||n;e[i]=t[n]}},s.prototype.getPosition=function(){var t=u(this.element),e=this.layout.options,n=e.isOriginLeft,i=e.isOriginTop,o=t[n?"left":"right"],r=t[i?"top":"bottom"],s=this.layout.size,a=-1!=o.indexOf("%")?parseFloat(o)/100*s.width:parseInt(o,10),l=-1!=r.indexOf("%")?parseFloat(r)/100*s.height:parseInt(r,10);a=isNaN(a)?0:a,l=isNaN(l)?0:l,a-=n?s.paddingLeft:s.paddingRight,l-=i?s.paddingTop:s.paddingBottom,this.position.x=a,this.position.y=l},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,n={},i=e.isOriginLeft?"paddingLeft":"paddingRight",o=e.isOriginLeft?"left":"right",r=e.isOriginLeft?"right":"left",s=this.position.x+t[i];n[o]=this.getXValue(s),n[r]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",l=e.isOriginTop?"top":"bottom",u=e.isOriginTop?"bottom":"top",c=this.position.y+t[a];n[l]=this.getYValue(c),n[u]="",this.css(n),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,o=parseInt(t,10),r=parseInt(e,10),s=o===this.position.x&&r===this.position.y;if(this.setPosition(t,e),s&&!this.isTransitioning)return void this.layoutPosition();var a=t-n,l=e-i,u={};u.transform=this.getTranslate(a,l),this.transition({to:u,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},s.prototype.getTranslate=function(t,e){var n=this.layout.options;return t=n.isOriginLeft?t:-t,e=n.isOriginTop?e:-e,p?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=h?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);if(t.from){this.css(t.from);var i=this.element.offsetHeight;i=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var v="opacity,"+a(g.transform||"transform");s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:v,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(f,this,!1))},s.prototype.transition=s.prototype[c?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var y={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=y[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],r(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd){var i=e.onEnd[n];i.call(this),delete e.onEnd[n]}this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(f,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var b={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(b)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(!c||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("visibleStyle");e[n]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");e[n]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,o,r,s){return e(t,n,i,o,r,s)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,n,i,o,r){"use strict";function s(t,e){var n=o.getQueryElement(t);if(!n)return void(a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t)));this.element=n,l&&(this.$element=l(this.element)),this.options=o.extend({},this.constructor.defaults),this.option(e);var i=++c;this.element.outlayerGUID=i,d[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var a=t.console,l=t.jQuery,u=function(){},c=0,d={};return s.namespace="outlayer",s.Item=r,s.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},o.extend(s.prototype,n.prototype),s.prototype.option=function(t){o.extend(this.options,t)},s.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),o.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},s.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},s.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],o=0,r=e.length;r>o;o++){var s=e[o],a=new n(s,this);i.push(a)}return i},s.prototype._filterFindItemElements=function(t){return o.filterFindElements(t,this.options.itemSelector)},s.prototype.getItemElements=function(){for(var t=[],e=0,n=this.items.length;n>e;e++)t.push(this.items[e].element);return t},s.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},s.prototype._init=s.prototype.layout,s.prototype._resetLayout=function(){this.getSize()},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype._getMeasurement=function(t,e){var n,r=this.options[t];r?("string"==typeof r?n=this.element.querySelector(r):o.isElement(r)&&(n=r),this[t]=n?i(n)[e]:r):this[t]=0},s.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},s.prototype._getItemsForLayout=function(t){for(var e=[],n=0,i=t.length;i>n;n++){var o=t[n];o.isIgnored||e.push(o)}return e},s.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var n=[],i=0,o=t.length;o>i;i++){var r=t[i],s=this._getItemLayoutPosition(r);s.item=r,s.isInstant=e||r.isLayoutInstant,n.push(s)}this._processLayoutQueue(n)}},s.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},s.prototype._processLayoutQueue=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];this._positionItem(i.item,i.x,i.y,i.isInstant)}},s.prototype._positionItem=function(t,e,n,i){i?t.goTo(e,n):t.moveTo(e,n)},s.prototype._postLayout=function(){this.resizeContainer()},s.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},s.prototype._getContainerSize=u,s.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},s.prototype._emitCompleteOnItems=function(t,e){function n(){o.dispatchEvent(t+"Complete",null,[e])}function i(){s++,s===r&&n()}var o=this,r=e.length;if(!e||!r)return void n();for(var s=0,a=0,l=e.length;l>a;a++){var u=e[a];u.once(t,i)}},s.prototype.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),l)if(this.$element=this.$element||l(this.element),e){var o=l.Event(e);o.type=t,this.$element.trigger(o,n)}else this.$element.trigger(t,n)},s.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},s.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},s.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,n=t.length;n>e;e++){var i=t[e];this.ignore(i)}}},s.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,n=t.length;n>e;e++){var i=t[e];o.removeFrom(this.stamps,i),this.unignore(i)}},s.prototype._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=o.makeArray(t)):void 0},s.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;e>t;t++){var n=this.stamps[t];this._manageStamp(n)}}},s.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},s.prototype._manageStamp=u,s.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,o=i(t),r={left:e.left-n.left-o.marginLeft,top:e.top-n.top-o.marginTop,right:n.right-e.right-o.marginRight,bottom:n.bottom-e.bottom-o.marginBottom};return r},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},s.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1},s.prototype.onresize=function(){function t(){e.resize(),delete e.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var e=this;this.resizeTimeout=setTimeout(t,100)},s.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},s.prototype.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},s.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},s.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},s.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},s.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.reveal()}},s.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.hide()}},s.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},s.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},s.prototype.getItem=function(t){for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];if(i.element===t)return i}},s.prototype.getItems=function(t){t=o.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var r=t[n],s=this.getItem(r);s&&e.push(s)}return e},s.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var n=0,i=e.length;i>n;n++){var r=e[n];r.remove(),o.removeFrom(this.items,r)}},s.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];i.destroy()}this.unbindResize();var o=this.element.outlayerGUID;delete d[o],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=o.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&d[e]},s.create=function(t,e){function n(){s.apply(this,arguments)}return Object.create?n.prototype=Object.create(s.prototype):o.extend(n.prototype,s.prototype),n.prototype.constructor=n,n.defaults=o.extend({},s.defaults),o.extend(n.defaults,e),n.prototype.settings={},n.namespace=t,n.data=s.data,n.Item=function(){r.apply(this,arguments)},n.Item.prototype=new r,o.htmlInit(n,t),l&&l.bridget&&l.bridget(t,n),n},s.Item=r,s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}e.prototype=new t.Item,e.prototype._create=function(){this.id=this.layout.itemGUID++,t.Item.prototype._create.call(this),this.sortData={}},e.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var n in t){var i=e[n];this.sortData[n]=i(this.element,this)}}};var n=e.prototype.destroy;return e.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(t,e){"use strict";function n(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}return function(){function t(t){return function(){return e.prototype[t].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],o=0,r=i.length;r>o;o++){var s=i[o];n.prototype[s]=t(s)}}(),n.prototype.needsVerticalResizeLayout=function(){var e=t(this.isotope.element),n=this.isotope.size&&e;return n&&e.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(t,e){var n=t+e,i="outer"+e;if(this._getMeasurement(n,i),!this[n]){var o=this.getFirstItemSize();this[n]=o&&o[i]||this.isotope.size["inner"+e]}},n.prototype.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return i.prototype=new n,e&&(i.options=e),i.prototype.namespace=t,n.modes[t]=i,i},n}),function(t,e){"use strict";
"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,n){var i=t.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/i,s=i-o%i,a=s&&1>s?"round":"floor";r=Math[a](r),this.cols=Math.max(r,1)},i.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=e&&1>e?"round":"ceil",o=Math[i](t.size.outerWidth/this.columnWidth);o=Math.min(o,this.cols);for(var r=this._getColGroup(o),s=Math.min.apply(Math,r),a=n.indexOf(r,s),l={x:this.columnWidth*a,y:s},u=s+t.size.outerHeight,c=this.cols+1-r.length,d=0;c>d;d++)this.colYs[a+d]=u;return l},i.prototype._getColGroup=function(t){if(2>t)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;n>i;i++){var o=this.colYs.slice(i,i+t);e[i]=Math.max.apply(Math,o)}return e},i.prototype._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),o=this.options.isOriginLeft?i.left:i.right,r=o+n.outerWidth,s=Math.floor(o/this.columnWidth);s=Math.max(0,s);var a=Math.floor(r/this.columnWidth);a-=r%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,u=s;a>=u;u++)this.colYs[u]=Math.max(l,this.colYs[u])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},i.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],e):"object"==typeof exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}var i=t.create("masonry"),o=i.prototype._getElementOffset,r=i.prototype.layout,s=i.prototype._getMeasurement;n(i.prototype,e.prototype),i.prototype._getElementOffset=o,i.prototype.layout=r,i.prototype._getMeasurement=s;var a=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,a.call(this)};var l=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,l.apply(this,arguments)},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows");return e.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,i},e.prototype._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0});return e.prototype._resetLayout=function(){this.y=0},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=t.size.outerHeight,{x:e,y:n}},e.prototype._getContainerSize=function(){return{height:this.y}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,o,r,s,a){return e(t,n,i,o,r,s,a)}):"object"==typeof exports?module.exports=e(t,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):t.Isotope=e(t,t.Outlayer,t.getSize,t.matchesSelector,t.fizzyUIUtils,t.Isotope.Item,t.Isotope.LayoutMode)}(window,function(t,e,n,i,o,r,s){function a(t,e){return function(n,i){for(var o=0,r=t.length;r>o;o++){var s=t[o],a=n.sortData[s],l=i.sortData[s];if(a>l||l>a){var u=void 0!==e[s]?e[s]:e,c=u?1:-1;return(a>l?1:-1)*c}}return 0}}var l=t.jQuery,u=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},c=document.documentElement,d=c.textContent?function(t){return t.textContent}:function(t){return t.innerText},h=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=r,h.LayoutMode=s,h.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var t in s.modes)this._initLayoutMode(t)},h.prototype.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},h.prototype._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),n=0,i=t.length;i>n;n++){var o=t[n];o.id=this.itemGUID++}return this._updateItemsSortData(t),t},h.prototype._initLayoutMode=function(t){var e=s.modes[t],n=this.options[t]||{};this.options[t]=e.options?o.extend(e.options,n):n,this.modes[t]=new e(this)},h.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},h.prototype._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},h.prototype.arrange=function(t){function e(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(t),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(e):e(),this._sort(),this._layout()},h.prototype._init=h.prototype.arrange,h.prototype._getIsInstant=function(){var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=t,t},h.prototype._bindArrangeComplete=function(){function t(){e&&n&&i&&o.dispatchEvent("arrangeComplete",null,[o.filteredItems])}var e,n,i,o=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){n=!0,t()}),this.once("revealComplete",function(){i=!0,t()})},h.prototype._filter=function(t){var e=this.options.filter;e=e||"*";for(var n=[],i=[],o=[],r=this._getFilterTest(e),s=0,a=t.length;a>s;s++){var l=t[s];if(!l.isIgnored){var u=r(l);u&&n.push(l),u&&l.isHidden?i.push(l):u||l.isHidden||o.push(l)}}return{matches:n,needReveal:i,needHide:o}},h.prototype._getFilterTest=function(t){return l&&this.options.isJQueryFiltering?function(e){return l(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return i(e.element,t)}},h.prototype.updateSortData=function(t){var e;t?(t=o.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},h.prototype._getSorters=function(){var t=this.options.getSortData;for(var e in t){var n=t[e];this._sorters[e]=p(n)}},h.prototype._updateItemsSortData=function(t){for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.updateSortData()}};var p=function(){function t(t){if("string"!=typeof t)return t;var n=u(t).split(" "),i=n[0],o=i.match(/^\[(.+)\]$/),r=o&&o[1],s=e(r,i),a=h.sortDataParsers[n[1]];return t=a?function(t){return t&&a(s(t))}:function(t){return t&&s(t)}}function e(t,e){var n;return n=t?function(e){return e.getAttribute(t)}:function(t){var n=t.querySelector(e);return n&&d(n)}}return t}();h.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},h.prototype._sort=function(){var t=this.options.sortBy;if(t){var e=[].concat.apply(t,this.sortHistory),n=a(e,this.options.sortAscending);this.filteredItems.sort(n),t!=this.sortHistory[0]&&this.sortHistory.unshift(t)}},h.prototype._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},h.prototype._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},h.prototype._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},h.prototype._manageStamp=function(t){this._mode()._manageStamp(t)},h.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},h.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.prototype.appended=function(t){var e=this.addItems(t);if(e.length){var n=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(n)}},h.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=e.concat(this.items)}},h.prototype._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},h.prototype.insert=function(t){var e=this.addItems(t);if(e.length){var n,i,o=e.length;for(n=0;o>n;n++)i=e[n],this.element.appendChild(i.element);var r=this._filter(e).matches;for(n=0;o>n;n++)e[n].isLayoutInstant=!0;for(this.arrange(),n=0;o>n;n++)delete e[n].isLayoutInstant;this.reveal(r)}};var f=h.prototype.remove;return h.prototype.remove=function(t){t=o.makeArray(t);var e=this.getItems(t);f.call(this,t);var n=e&&e.length;if(n)for(var i=0;n>i;i++){var r=e[i];o.removeFrom(this.filteredItems,r)}},h.prototype.shuffle=function(){for(var t=0,e=this.items.length;e>t;t++){var n=this.items[t];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h.prototype._noTransition=function(t){var e=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.call(this);return this.options.transitionDuration=e,n},h.prototype.getFilteredItemElements=function(){for(var t=[],e=0,n=this.filteredItems.length;n>e;e++)t.push(this.filteredItems[e].element);return t},h}),function(t,e,n){function i(e,n){this.element=e,this.settings=t.extend({},o,n),this._defaults=o,this._name=r,this.init()}var o={label:"MENU",duplicate:!0,duration:200,easingOpen:"swing",easingClose:"swing",closedSymbol:"&#9658;",openedSymbol:"&#9660;",prependTo:"body",appendTo:"",parentTag:"a",closeOnClick:!1,allowParentLinks:!1,nestedParentLinks:!0,showChildren:!1,removeIds:!1,removeClasses:!1,removeStyles:!1,brand:"",init:function(){},beforeOpen:function(){},beforeClose:function(){},afterOpen:function(){},afterClose:function(){}},r="slicknav",s="slicknav";i.prototype.init=function(){var n,i,o=this,r=t(this.element),a=this.settings;if(a.duplicate?(o.mobileNav=r.clone(),o.mobileNav.removeAttr("id"),o.mobileNav.find("*").each(function(e,n){t(n).removeAttr("id")})):(o.mobileNav=r,o.mobileNav.removeAttr("id"),o.mobileNav.find("*").each(function(e,n){t(n).removeAttr("id")})),a.removeClasses&&(o.mobileNav.removeAttr("class"),o.mobileNav.find("*").each(function(e,n){t(n).removeAttr("class")})),a.removeStyles&&(o.mobileNav.removeAttr("style"),o.mobileNav.find("*").each(function(e,n){t(n).removeAttr("style")})),n=s+"_icon",""===a.label&&(n+=" "+s+"_no-text"),"a"==a.parentTag&&(a.parentTag='a href="#"'),o.mobileNav.attr("class",s+"_nav"),i=t('<div class="'+s+'_menu"></div>'),""!==a.brand){var l=t('<div class="'+s+'_brand">'+a.brand+"</div>");t(i).append(l)}o.btn=t(["<"+a.parentTag+' aria-haspopup="true" tabindex="0" class="'+s+"_btn "+s+'_collapsed">','<span class="'+s+'_menutxt">'+a.label+"</span>",'<span class="'+n+'">','<span class="'+s+'_icon-bar"></span>','<span class="'+s+'_icon-bar"></span>','<span class="'+s+'_icon-bar"></span>',"</span>","</"+a.parentTag+">"].join("")),t(i).append(o.btn),""!==a.appendTo?t(a.appendTo).append(i):t(a.prependTo).prepend(i),i.append(o.mobileNav);var u=o.mobileNav.find("li");t(u).each(function(){var e=t(this),n={};if(n.children=e.children("ul").attr("role","menu"),e.data("menu",n),n.children.length>0){var i=e.contents(),r=!1,l=[];t(i).each(function(){return t(this).is("ul")?!1:(l.push(this),void(t(this).is("a")&&(r=!0)))});var u=t("<"+a.parentTag+' role="menuitem" aria-haspopup="true" tabindex="-1" class="'+s+'_item"/>');if(a.allowParentLinks&&!a.nestedParentLinks&&r)t(l).wrapAll('<span class="'+s+"_parent-link "+s+'_row"/>').parent();else{var c=t(l).wrapAll(u).parent();c.addClass(s+"_row")}a.showChildren?e.addClass(s+"_open"):e.addClass(s+"_collapsed"),e.addClass(s+"_parent");var d=t('<span class="'+s+'_arrow">'+(a.showChildren?a.openedSymbol:a.closedSymbol)+"</span>");a.allowParentLinks&&!a.nestedParentLinks&&r&&(d=d.wrap(u).parent()),t(l).last().after(d)}else 0===e.children().length&&e.addClass(s+"_txtnode");e.children("a").attr("role","menuitem").click(function(e){a.closeOnClick&&!t(e.target).parent().closest("li").hasClass(s+"_parent")&&t(o.btn).click()}),a.closeOnClick&&a.allowParentLinks&&(e.children("a").children("a").click(function(e){t(o.btn).click()}),e.find("."+s+"_parent-link a:not(."+s+"_item)").click(function(e){t(o.btn).click()}))}),t(u).each(function(){var e=t(this).data("menu");a.showChildren||o._visibilityToggle(e.children,null,!1,null,!0)}),o._visibilityToggle(o.mobileNav,null,!1,"init",!0),o.mobileNav.attr("role","menu"),t(e).mousedown(function(){o._outlines(!1)}),t(e).keyup(function(){o._outlines(!0)}),t(o.btn).click(function(t){t.preventDefault(),o._menuToggle()}),o.mobileNav.on("click","."+s+"_item",function(e){e.preventDefault(),o._itemClick(t(this))}),t(o.btn).keydown(function(t){var e=t||event;13==e.keyCode&&(t.preventDefault(),o._menuToggle())}),o.mobileNav.on("keydown","."+s+"_item",function(e){var n=e||event;13==n.keyCode&&(e.preventDefault(),o._itemClick(t(e.target)))}),a.allowParentLinks&&a.nestedParentLinks&&t("."+s+"_item a").click(function(t){t.stopImmediatePropagation()})},i.prototype._menuToggle=function(t){var e=this,n=e.btn,i=e.mobileNav;n.hasClass(s+"_collapsed")?(n.removeClass(s+"_collapsed"),n.addClass(s+"_open")):(n.removeClass(s+"_open"),n.addClass(s+"_collapsed")),n.addClass(s+"_animating"),e._visibilityToggle(i,n.parent(),!0,n)},i.prototype._itemClick=function(t){var e=this,n=e.settings,i=t.data("menu");i||(i={},i.arrow=t.children("."+s+"_arrow"),i.ul=t.next("ul"),i.parent=t.parent(),i.parent.hasClass(s+"_parent-link")&&(i.parent=t.parent().parent(),i.ul=t.parent().next("ul")),t.data("menu",i)),i.parent.hasClass(s+"_collapsed")?(i.arrow.html(n.openedSymbol),i.parent.removeClass(s+"_collapsed"),i.parent.addClass(s+"_open"),i.parent.addClass(s+"_animating"),e._visibilityToggle(i.ul,i.parent,!0,t)):(i.arrow.html(n.closedSymbol),i.parent.addClass(s+"_collapsed"),i.parent.removeClass(s+"_open"),i.parent.addClass(s+"_animating"),e._visibilityToggle(i.ul,i.parent,!0,t))},i.prototype._visibilityToggle=function(e,n,i,o,r){var a=this,l=a.settings,u=a._getActionItems(e),c=0;i&&(c=l.duration),e.hasClass(s+"_hidden")?(e.removeClass(s+"_hidden"),r||l.beforeOpen(o),e.slideDown(c,l.easingOpen,function(){t(o).removeClass(s+"_animating"),t(n).removeClass(s+"_animating"),r||l.afterOpen(o)}),e.attr("aria-hidden","false"),u.attr("tabindex","0"),a._setVisAttr(e,!1)):(e.addClass(s+"_hidden"),r||l.beforeClose(o),e.slideUp(c,this.settings.easingClose,function(){e.attr("aria-hidden","true"),u.attr("tabindex","-1"),a._setVisAttr(e,!0),e.hide(),t(o).removeClass(s+"_animating"),t(n).removeClass(s+"_animating"),r?"init"==o&&l.init():l.afterClose(o)}))},i.prototype._setVisAttr=function(e,n){var i=this,o=e.children("li").children("ul").not("."+s+"_hidden");n?o.each(function(){var e=t(this);e.attr("aria-hidden","true");var o=i._getActionItems(e);o.attr("tabindex","-1"),i._setVisAttr(e,n)}):o.each(function(){var e=t(this);e.attr("aria-hidden","false");var o=i._getActionItems(e);o.attr("tabindex","0"),i._setVisAttr(e,n)})},i.prototype._getActionItems=function(t){var e=t.data("menu");if(!e){e={};var n=t.children("li"),i=n.find("a");e.links=i.add(n.find("."+s+"_item")),t.data("menu",e)}return e.links},i.prototype._outlines=function(e){e?t("."+s+"_item, ."+s+"_btn").css("outline",""):t("."+s+"_item, ."+s+"_btn").css("outline","none")},i.prototype.toggle=function(){var t=this;t._menuToggle()},i.prototype.open=function(){var t=this;t.btn.hasClass(s+"_collapsed")&&t._menuToggle()},i.prototype.close=function(){var t=this;t.btn.hasClass(s+"_open")&&t._menuToggle()},t.fn[r]=function(e){var n=arguments;if(void 0===e||"object"==typeof e)return this.each(function(){t.data(this,"plugin_"+r)||t.data(this,"plugin_"+r,new i(this,e))});if("string"==typeof e&&"_"!==e[0]&&"init"!==e){var o;return this.each(function(){var s=t.data(this,"plugin_"+r);s instanceof i&&"function"==typeof s[e]&&(o=s[e].apply(s,Array.prototype.slice.call(n,1)))}),void 0!==o?o:this}}}(jQuery,document,window),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return t(e,window,document)}):"object"==typeof exports?module.exports=function(e,n){return e||(e=window),n||(n="undefined"!=typeof window?require("jquery"):require("jquery")(e)),t(n,e,e.document)}:t(jQuery,window,document)}(function(t,e,n,i){"use strict";function o(e){var n,i,r="a aa ai ao as b fn i m o s ",s={};t.each(e,function(t,a){n=t.match(/^([^A-Z]+?)([A-Z])/),n&&-1!==r.indexOf(n[1]+" ")&&(i=t.replace(n[0],n[2].toLowerCase()),s[i]=t,"o"===n[1]&&o(e[t]))}),e._hungarianMap=s}function r(e,n,s){e._hungarianMap||o(e);var a;t.each(n,function(o,l){a=e._hungarianMap[o],a===i||!s&&n[a]!==i||("o"===a.charAt(0)?(n[a]||(n[a]={}),t.extend(!0,n[a],n[o]),r(e[a],n[a],s)):n[a]=n[o])})}function s(t){var e=Vt.defaults.oLanguage,n=t.sZeroRecords;!t.sEmptyTable&&n&&"No data available in table"===e.sEmptyTable&&qt(t,t,"sZeroRecords","sEmptyTable"),!t.sLoadingRecords&&n&&"Loading..."===e.sLoadingRecords&&qt(t,t,"sZeroRecords","sLoadingRecords"),t.sInfoThousands&&(t.sThousands=t.sInfoThousands);var i=t.sDecimal;i&&Bt(i)}function a(t){ge(t,"ordering","bSort"),ge(t,"orderMulti","bSortMulti"),ge(t,"orderClasses","bSortClasses"),ge(t,"orderCellsTop","bSortCellsTop"),ge(t,"order","aaSorting"),ge(t,"orderFixed","aaSortingFixed"),ge(t,"paging","bPaginate"),ge(t,"pagingType","sPaginationType"),ge(t,"pageLength","iDisplayLength"),ge(t,"searching","bFilter"),"boolean"==typeof t.sScrollX&&(t.sScrollX=t.sScrollX?"100%":""),"boolean"==typeof t.scrollX&&(t.scrollX=t.scrollX?"100%":"");var e=t.aoSearchCols;if(e)for(var n=0,i=e.length;i>n;n++)e[n]&&r(Vt.models.oSearch,e[n])}function l(e){ge(e,"orderable","bSortable"),ge(e,"orderData","aDataSort"),ge(e,"orderSequence","asSorting"),ge(e,"orderDataType","sortDataType");var n=e.aDataSort;n&&!t.isArray(n)&&(e.aDataSort=[n])}function u(e){if(!Vt.__browser){var n={};Vt.__browser=n;var i=t("<div/>").css({position:"fixed",top:0,left:0,height:1,width:1,overflow:"hidden"}).append(t("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(t("<div/>").css({width:"100%",height:10}))).appendTo("body"),o=i.children(),r=o.children();n.barWidth=o[0].offsetWidth-o[0].clientWidth,n.bScrollOversize=100===r[0].offsetWidth&&100!==o[0].clientWidth,n.bScrollbarLeft=1!==Math.round(r.offset().left),n.bBounding=i[0].getBoundingClientRect().width?!0:!1,i.remove()}t.extend(e.oBrowser,Vt.__browser),e.oScroll.iBarWidth=Vt.__browser.barWidth}function c(t,e,n,o,r,s){var a,l=o,u=!1;for(n!==i&&(a=n,u=!0);l!==r;)t.hasOwnProperty(l)&&(a=u?e(a,t[l],l,t):t[l],u=!0,l+=s);return a}function d(e,i){var o=Vt.defaults.column,r=e.aoColumns.length,s=t.extend({},Vt.models.oColumn,o,{nTh:i?i:n.createElement("th"),sTitle:o.sTitle?o.sTitle:i?i.innerHTML:"",aDataSort:o.aDataSort?o.aDataSort:[r],mData:o.mData?o.mData:r,idx:r});e.aoColumns.push(s);var a=e.aoPreSearchCols;a[r]=t.extend({},Vt.models.oSearch,a[r]),h(e,r,t(i).data())}function h(e,n,o){var s=e.aoColumns[n],a=e.oClasses,u=t(s.nTh);if(!s.sWidthOrig){s.sWidthOrig=u.attr("width")||null;var c=(u.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);c&&(s.sWidthOrig=c[1])}o!==i&&null!==o&&(l(o),r(Vt.defaults.column,o),o.mDataProp===i||o.mData||(o.mData=o.mDataProp),o.sType&&(s._sManualType=o.sType),o.className&&!o.sClass&&(o.sClass=o.className),t.extend(s,o),qt(s,o,"sWidth","sWidthOrig"),o.iDataSort!==i&&(s.aDataSort=[o.iDataSort]),qt(s,o,"aDataSort"));var d=s.mData,h=E(d),p=s.mRender?E(s.mRender):null,f=function(t){return"string"==typeof t&&-1!==t.indexOf("@")};s._bAttrSrc=t.isPlainObject(d)&&(f(d.sort)||f(d.type)||f(d.filter)),s.fnGetData=function(t,e,n){var o=h(t,e,i,n);return p&&e?p(o,e,t,n):o},s.fnSetData=function(t,e,n){return A(d)(t,e,n)},"number"!=typeof d&&(e._rowReadObject=!0),e.oFeatures.bSort||(s.bSortable=!1,u.addClass(a.sSortableNone));var m=-1!==t.inArray("asc",s.asSorting),g=-1!==t.inArray("desc",s.asSorting);s.bSortable&&(m||g)?m&&!g?(s.sSortingClass=a.sSortableAsc,s.sSortingClassJUI=a.sSortJUIAscAllowed):!m&&g?(s.sSortingClass=a.sSortableDesc,s.sSortingClassJUI=a.sSortJUIDescAllowed):(s.sSortingClass=a.sSortable,s.sSortingClassJUI=a.sSortJUI):(s.sSortingClass=a.sSortableNone,s.sSortingClassJUI="")}function p(t){if(t.oFeatures.bAutoWidth!==!1){var e=t.aoColumns;yt(t);for(var n=0,i=e.length;i>n;n++)e[n].nTh.style.width=e[n].sWidth}var o=t.oScroll;(""!==o.sY||""!==o.sX)&&gt(t),Rt(t,null,"column-sizing",[t])}function f(t,e){var n=v(t,"bVisible");return"number"==typeof n[e]?n[e]:null}function m(e,n){var i=v(e,"bVisible"),o=t.inArray(n,i);return-1!==o?o:null}function g(t){return v(t,"bVisible").length}function v(e,n){var i=[];return t.map(e.aoColumns,function(t,e){t[n]&&i.push(e)}),i}function y(t){var e,n,o,r,s,a,l,u,c,d=t.aoColumns,h=t.aoData,p=Vt.ext.type.detect;for(e=0,n=d.length;n>e;e++)if(l=d[e],c=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(o=0,r=p.length;r>o;o++){for(s=0,a=h.length;a>s&&(c[s]===i&&(c[s]=T(t,s,e,"type")),u=p[o](c[s],t),u||o===p.length-1)&&"html"!==u;s++);if(u){l.sType=u;break}}l.sType||(l.sType="string")}}function b(e,n,o,r){var s,a,l,u,c,h,p,f=e.aoColumns;if(n)for(s=n.length-1;s>=0;s--){p=n[s];var m=p.targets!==i?p.targets:p.aTargets;for(t.isArray(m)||(m=[m]),l=0,u=m.length;u>l;l++)if("number"==typeof m[l]&&m[l]>=0){for(;f.length<=m[l];)d(e);r(m[l],p)}else if("number"==typeof m[l]&&m[l]<0)r(f.length+m[l],p);else if("string"==typeof m[l])for(c=0,h=f.length;h>c;c++)("_all"==m[l]||t(f[c].nTh).hasClass(m[l]))&&r(c,p)}if(o)for(s=0,a=o.length;a>s;s++)r(s,o[s])}function w(e,n,o,r){var s=e.aoData.length,a=t.extend(!0,{},Vt.models.oRow,{src:o?"dom":"data",idx:s});a._aData=n,e.aoData.push(a);for(var l=e.aoColumns,u=0,c=l.length;c>u;u++)l[u].sType=null;e.aiDisplayMaster.push(s);var d=e.rowIdFn(n);return d!==i&&(e.aIds[d]=a),(o||!e.oFeatures.bDeferRender)&&O(e,s,o,r),s}function S(e,n){var i;return n instanceof t||(n=t(n)),n.map(function(t,n){return i=$(e,n),w(e,i.data,n,i.cells)})}function _(t,e){return e._DT_RowIndex!==i?e._DT_RowIndex:null}function x(e,n,i){return t.inArray(i,e.aoData[n].anCells)}function T(t,e,n,o){var r=t.iDraw,s=t.aoColumns[n],a=t.aoData[e]._aData,l=s.sDefaultContent,u=s.fnGetData(a,o,{settings:t,row:e,col:n});if(u===i)return t.iDrawError!=r&&null===l&&(Ot(t,0,"Requested unknown parameter "+("function"==typeof s.mData?"{function}":"'"+s.mData+"'")+" for row "+e+", column "+n,4),t.iDrawError=r),l;if(u!==a&&null!==u||null===l){if("function"==typeof u)return u.call(a)}else u=l;return null===u&&"display"==o?"":u}function C(t,e,n,i){var o=t.aoColumns[n],r=t.aoData[e]._aData;o.fnSetData(r,i,{settings:t,row:e,col:n})}function D(e){return t.map(e.match(/(\\.|[^\.])+/g)||[""],function(t){return t.replace(/\\./g,".")})}function E(e){if(t.isPlainObject(e)){var n={};return t.each(e,function(t,e){e&&(n[t]=E(e))}),function(t,e,o,r){var s=n[e]||n._;return s!==i?s(t,e,o,r):t}}if(null===e)return function(t){return t};if("function"==typeof e)return function(t,n,i,o){return e(t,n,i,o)};if("string"!=typeof e||-1===e.indexOf(".")&&-1===e.indexOf("[")&&-1===e.indexOf("("))return function(t,n){return t[e]};var o=function(e,n,r){var s,a,l,u;if(""!==r)for(var c=D(r),d=0,h=c.length;h>d;d++){if(s=c[d].match(ve),a=c[d].match(ye),s){if(c[d]=c[d].replace(ve,""),""!==c[d]&&(e=e[c[d]]),l=[],c.splice(0,d+1),u=c.join("."),t.isArray(e))for(var p=0,f=e.length;f>p;p++)l.push(o(e[p],n,u));var m=s[0].substring(1,s[0].length-1);e=""===m?l:l.join(m);break}if(a)c[d]=c[d].replace(ye,""),e=e[c[d]]();else{if(null===e||e[c[d]]===i)return i;e=e[c[d]]}}return e};return function(t,n){return o(t,n,e)}}function A(e){if(t.isPlainObject(e))return A(e._);if(null===e)return function(){};if("function"==typeof e)return function(t,n,i){e(t,"set",n,i)};if("string"!=typeof e||-1===e.indexOf(".")&&-1===e.indexOf("[")&&-1===e.indexOf("("))return function(t,n){t[e]=n};var n=function(e,o,r){for(var s,a,l,u,c,d=D(r),h=d[d.length-1],p=0,f=d.length-1;f>p;p++){if(a=d[p].match(ve),l=d[p].match(ye),a){if(d[p]=d[p].replace(ve,""),e[d[p]]=[],s=d.slice(),s.splice(0,p+1),c=s.join("."),t.isArray(o))for(var m=0,g=o.length;g>m;m++)u={},n(u,o[m],c),e[d[p]].push(u);else e[d[p]]=o;return}l&&(d[p]=d[p].replace(ye,""),e=e[d[p]](o)),(null===e[d[p]]||e[d[p]]===i)&&(e[d[p]]={}),e=e[d[p]]}h.match(ye)?e=e[h.replace(ye,"")](o):e[h.replace(ve,"")]=o};return function(t,i){return n(t,i,e)}}function I(t){return ce(t.aoData,"_aData")}function P(t){t.aoData.length=0,t.aiDisplayMaster.length=0,t.aiDisplay.length=0,t.aIds={}}function k(t,e,n){for(var o=-1,r=0,s=t.length;s>r;r++)t[r]==e?o=r:t[r]>e&&t[r]--;-1!=o&&n===i&&t.splice(o,1)}function L(t,e,n,o){var r,s,a=t.aoData[e],l=function(n,i){for(;n.childNodes.length;)n.removeChild(n.firstChild);n.innerHTML=T(t,e,i,"display")};if("dom"!==n&&(n&&"auto"!==n||"dom"!==a.src)){var u=a.anCells;if(u)if(o!==i)l(u[o],o);else for(r=0,s=u.length;s>r;r++)l(u[r],r)}else a._aData=$(t,a,o,o===i?i:a._aData).data;a._aSortData=null,a._aFilterData=null;var c=t.aoColumns;if(o!==i)c[o].sType=null;else{for(r=0,s=c.length;s>r;r++)c[r].sType=null;q(t,a)}}function $(e,n,o,r){var s,a,l,u=[],c=n.firstChild,d=0,h=e.aoColumns,p=e._rowReadObject;r=r!==i?r:p?{}:[];var f=function(t,e){if("string"==typeof t){var n=t.indexOf("@");if(-1!==n){var i=t.substring(n+1),o=A(t);o(r,e.getAttribute(i))}}},m=function(e){if(o===i||o===d)if(a=h[d],l=t.trim(e.innerHTML),a&&a._bAttrSrc){var n=A(a.mData._);n(r,l),f(a.mData.sort,e),f(a.mData.type,e),f(a.mData.filter,e)}else p?(a._setter||(a._setter=A(a.mData)),a._setter(r,l)):r[d]=l;d++};if(c)for(;c;)s=c.nodeName.toUpperCase(),("TD"==s||"TH"==s)&&(m(c),u.push(c)),c=c.nextSibling;else{u=n.anCells;for(var g=0,v=u.length;v>g;g++)m(u[g])}var y=n.firstChild?n:n.nTr;if(y){var b=y.getAttribute("id");b&&A(e.rowId)(r,b)}return{data:r,cells:u}}function O(t,e,i,o){var r,s,a,l,u,c=t.aoData[e],d=c._aData,h=[];if(null===c.nTr){for(r=i||n.createElement("tr"),c.nTr=r,c.anCells=h,r._DT_RowIndex=e,q(t,c),l=0,u=t.aoColumns.length;u>l;l++)a=t.aoColumns[l],s=i?o[l]:n.createElement(a.sCellType),s._DT_CellIndex={row:e,column:l},h.push(s),(!i||a.mRender||a.mData!==l)&&(s.innerHTML=T(t,e,l,"display")),a.sClass&&(s.className+=" "+a.sClass),a.bVisible&&!i?r.appendChild(s):!a.bVisible&&i&&s.parentNode.removeChild(s),a.fnCreatedCell&&a.fnCreatedCell.call(t.oInstance,s,T(t,e,l),d,e,l);Rt(t,"aoRowCreatedCallback",null,[r,d,e])}c.nTr.setAttribute("role","row")}function q(e,n){var i=n.nTr,o=n._aData;if(i){var r=e.rowIdFn(o);if(r&&(i.id=r),o.DT_RowClass){var s=o.DT_RowClass.split(" ");n.__rowc=n.__rowc?me(n.__rowc.concat(s)):s,t(i).removeClass(n.__rowc.join(" ")).addClass(o.DT_RowClass)}o.DT_RowAttr&&t(i).attr(o.DT_RowAttr),o.DT_RowData&&t(i).data(o.DT_RowData)}}function z(e){var n,i,o,r,s,a=e.nTHead,l=e.nTFoot,u=0===t("th, td",a).length,c=e.oClasses,d=e.aoColumns;for(u&&(r=t("<tr/>").appendTo(a)),n=0,i=d.length;i>n;n++)s=d[n],o=t(s.nTh).addClass(s.sClass),u&&o.appendTo(r),e.oFeatures.bSort&&(o.addClass(s.sSortingClass),s.bSortable!==!1&&(o.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),At(e,s.nTh,n))),s.sTitle!=o[0].innerHTML&&o.html(s.sTitle),Nt(e,"header")(e,o,s,c);if(u&&N(e.aoHeader,a),t(a).find(">tr").attr("role","row"),t(a).find(">tr>th, >tr>td").addClass(c.sHeaderTH),t(l).find(">tr>th, >tr>td").addClass(c.sFooterTH),null!==l){var h=e.aoFooter[0];for(n=0,i=h.length;i>n;n++)s=d[n],s.nTf=h[n].cell,s.sClass&&t(s.nTf).addClass(s.sClass)}}function j(e,n,o){var r,s,a,l,u,c,d,h,p,f=[],m=[],g=e.aoColumns.length;if(n){for(o===i&&(o=!1),r=0,s=n.length;s>r;r++){for(f[r]=n[r].slice(),f[r].nTr=n[r].nTr,a=g-1;a>=0;a--)e.aoColumns[a].bVisible||o||f[r].splice(a,1);m.push([])}for(r=0,s=f.length;s>r;r++){if(d=f[r].nTr)for(;c=d.firstChild;)d.removeChild(c);for(a=0,l=f[r].length;l>a;a++)if(h=1,p=1,m[r][a]===i){for(d.appendChild(f[r][a].cell),m[r][a]=1;f[r+h]!==i&&f[r][a].cell==f[r+h][a].cell;)m[r+h][a]=1,h++;for(;f[r][a+p]!==i&&f[r][a].cell==f[r][a+p].cell;){for(u=0;h>u;u++)m[r+u][a+p]=1;p++}t(f[r][a].cell).attr("rowspan",h).attr("colspan",p)}}}}function M(e){var n=Rt(e,"aoPreDrawCallback","preDraw",[e]);if(-1!==t.inArray(!1,n))return void ft(e,!1);var o=[],r=0,s=e.asStripeClasses,a=s.length,l=(e.aoOpenRows.length,e.oLanguage),u=e.iInitDisplayStart,c="ssp"==Ht(e),d=e.aiDisplay;e.bDrawing=!0,u!==i&&-1!==u&&(e._iDisplayStart=c?u:u>=e.fnRecordsDisplay()?0:u,e.iInitDisplayStart=-1);var h=e._iDisplayStart,p=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,ft(e,!1);else if(c){if(!e.bDestroying&&!B(e))return}else e.iDraw++;if(0!==d.length)for(var f=c?0:h,m=c?e.aoData.length:p,v=f;m>v;v++){var y=d[v],b=e.aoData[y];null===b.nTr&&O(e,y);var w=b.nTr;if(0!==a){var S=s[r%a];b._sRowStripe!=S&&(t(w).removeClass(b._sRowStripe).addClass(S),b._sRowStripe=S)}Rt(e,"aoRowCallback",null,[w,b._aData,r,v]),o.push(w),r++}else{var _=l.sZeroRecords;1==e.iDraw&&"ajax"==Ht(e)?_=l.sLoadingRecords:l.sEmptyTable&&0===e.fnRecordsTotal()&&(_=l.sEmptyTable),o[0]=t("<tr/>",{"class":a?s[0]:""}).append(t("<td />",{valign:"top",colSpan:g(e),"class":e.oClasses.sRowEmpty}).html(_))[0]}Rt(e,"aoHeaderCallback","header",[t(e.nTHead).children("tr")[0],I(e),h,p,d]),Rt(e,"aoFooterCallback","footer",[t(e.nTFoot).children("tr")[0],I(e),h,p,d]);var x=t(e.nTBody);x.children().detach(),x.append(t(o)),Rt(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}function R(t,e){var n=t.oFeatures,i=n.bSort,o=n.bFilter;i&&Ct(t),o?G(t,t.oPreviousSearch):t.aiDisplay=t.aiDisplayMaster.slice(),e!==!0&&(t._iDisplayStart=0),t._drawHold=e,M(t),t._drawHold=!1}function F(e){var n=e.oClasses,i=t(e.nTable),o=t("<div/>").insertBefore(i),r=e.oFeatures,s=t("<div/>",{id:e.sTableId+"_wrapper","class":n.sWrapper+(e.nTFoot?"":" "+n.sNoFooter)});e.nHolding=o[0],e.nTableWrapper=s[0],
e.nTableReinsertBefore=e.nTable.nextSibling;for(var a,l,u,c,d,h,p=e.sDom.split(""),f=0;f<p.length;f++){if(a=null,l=p[f],"<"==l){if(u=t("<div/>")[0],c=p[f+1],"'"==c||'"'==c){for(d="",h=2;p[f+h]!=c;)d+=p[f+h],h++;if("H"==d?d=n.sJUIHeader:"F"==d&&(d=n.sJUIFooter),-1!=d.indexOf(".")){var m=d.split(".");u.id=m[0].substr(1,m[0].length-1),u.className=m[1]}else"#"==d.charAt(0)?u.id=d.substr(1,d.length-1):u.className=d;f+=h}s.append(u),s=t(u)}else if(">"==l)s=s.parent();else if("l"==l&&r.bPaginate&&r.bLengthChange)a=ct(e);else if("f"==l&&r.bFilter)a=X(e);else if("r"==l&&r.bProcessing)a=pt(e);else if("t"==l)a=mt(e);else if("i"==l&&r.bInfo)a=ot(e);else if("p"==l&&r.bPaginate)a=dt(e);else if(0!==Vt.ext.feature.length)for(var g=Vt.ext.feature,v=0,y=g.length;y>v;v++)if(l==g[v].cFeature){a=g[v].fnInit(e);break}if(a){var b=e.aanFeatures;b[l]||(b[l]=[]),b[l].push(a),s.append(a)}}o.replaceWith(s),e.nHolding=null}function N(e,n){var i,o,r,s,a,l,u,c,d,h,p,f=t(n).children("tr"),m=function(t,e,n){for(var i=t[e];i[n];)n++;return n};for(e.splice(0,e.length),r=0,l=f.length;l>r;r++)e.push([]);for(r=0,l=f.length;l>r;r++)for(i=f[r],c=0,o=i.firstChild;o;){if("TD"==o.nodeName.toUpperCase()||"TH"==o.nodeName.toUpperCase())for(d=1*o.getAttribute("colspan"),h=1*o.getAttribute("rowspan"),d=d&&0!==d&&1!==d?d:1,h=h&&0!==h&&1!==h?h:1,u=m(e,r,c),p=1===d?!0:!1,a=0;d>a;a++)for(s=0;h>s;s++)e[r+s][u+a]={cell:o,unique:p},e[r+s].nTr=i;o=o.nextSibling}}function H(t,e,n){var i=[];n||(n=t.aoHeader,e&&(n=[],N(n,e)));for(var o=0,r=n.length;r>o;o++)for(var s=0,a=n[o].length;a>s;s++)!n[o][s].unique||i[s]&&t.bSortCellsTop||(i[s]=n[o][s].cell);return i}function W(e,n,i){if(Rt(e,"aoServerParams","serverParams",[n]),n&&t.isArray(n)){var o={},r=/(.*?)\[\]$/;t.each(n,function(t,e){var n=e.name.match(r);if(n){var i=n[0];o[i]||(o[i]=[]),o[i].push(e.value)}else o[e.name]=e.value}),n=o}var s,a=e.ajax,l=e.oInstance,u=function(t){Rt(e,null,"xhr",[e,t,e.jqXHR]),i(t)};if(t.isPlainObject(a)&&a.data){s=a.data;var c=t.isFunction(s)?s(n,e):s;n=t.isFunction(s)&&c?c:t.extend(!0,n,c),delete a.data}var d={data:n,success:function(t){var n=t.error||t.sError;n&&Ot(e,0,n),e.json=t,u(t)},dataType:"json",cache:!1,type:e.sServerMethod,error:function(n,i,o){var r=Rt(e,null,"xhr",[e,null,e.jqXHR]);-1===t.inArray(!0,r)&&("parsererror"==i?Ot(e,0,"Invalid JSON response",1):4===n.readyState&&Ot(e,0,"Ajax error",7)),ft(e,!1)}};e.oAjaxData=n,Rt(e,null,"preXhr",[e,n]),e.fnServerData?e.fnServerData.call(l,e.sAjaxSource,t.map(n,function(t,e){return{name:e,value:t}}),u,e):e.sAjaxSource||"string"==typeof a?e.jqXHR=t.ajax(t.extend(d,{url:a||e.sAjaxSource})):t.isFunction(a)?e.jqXHR=a.call(l,n,u,e):(e.jqXHR=t.ajax(t.extend(d,a)),a.data=s)}function B(t){return t.bAjaxDataGet?(t.iDraw++,ft(t,!0),W(t,U(t),function(e){V(t,e)}),!1):!0}function U(e){var n,i,o,r,s=e.aoColumns,a=s.length,l=e.oFeatures,u=e.oPreviousSearch,c=e.aoPreSearchCols,d=[],h=Tt(e),p=e._iDisplayStart,f=l.bPaginate!==!1?e._iDisplayLength:-1,m=function(t,e){d.push({name:t,value:e})};m("sEcho",e.iDraw),m("iColumns",a),m("sColumns",ce(s,"sName").join(",")),m("iDisplayStart",p),m("iDisplayLength",f);var g={draw:e.iDraw,columns:[],order:[],start:p,length:f,search:{value:u.sSearch,regex:u.bRegex}};for(n=0;a>n;n++)o=s[n],r=c[n],i="function"==typeof o.mData?"function":o.mData,g.columns.push({data:i,name:o.sName,searchable:o.bSearchable,orderable:o.bSortable,search:{value:r.sSearch,regex:r.bRegex}}),m("mDataProp_"+n,i),l.bFilter&&(m("sSearch_"+n,r.sSearch),m("bRegex_"+n,r.bRegex),m("bSearchable_"+n,o.bSearchable)),l.bSort&&m("bSortable_"+n,o.bSortable);l.bFilter&&(m("sSearch",u.sSearch),m("bRegex",u.bRegex)),l.bSort&&(t.each(h,function(t,e){g.order.push({column:e.col,dir:e.dir}),m("iSortCol_"+t,e.col),m("sSortDir_"+t,e.dir)}),m("iSortingCols",h.length));var v=Vt.ext.legacy.ajax;return null===v?e.sAjaxSource?d:g:v?d:g}function V(t,e){var n=function(t,n){return e[t]!==i?e[t]:e[n]},o=Y(t,e),r=n("sEcho","draw"),s=n("iTotalRecords","recordsTotal"),a=n("iTotalDisplayRecords","recordsFiltered");if(r){if(1*r<t.iDraw)return;t.iDraw=1*r}P(t),t._iRecordsTotal=parseInt(s,10),t._iRecordsDisplay=parseInt(a,10);for(var l=0,u=o.length;u>l;l++)w(t,o[l]);t.aiDisplay=t.aiDisplayMaster.slice(),t.bAjaxDataGet=!1,M(t),t._bInitComplete||lt(t,e),t.bAjaxDataGet=!0,ft(t,!1)}function Y(e,n){var o=t.isPlainObject(e.ajax)&&e.ajax.dataSrc!==i?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===o?n.aaData||n[o]:""!==o?E(o)(n):n}function X(e){var i=e.oClasses,o=e.sTableId,r=e.oLanguage,s=e.oPreviousSearch,a=e.aanFeatures,l='<input type="search" class="'+i.sFilterInput+'"/>',u=r.sSearch;u=u.match(/_INPUT_/)?u.replace("_INPUT_",l):u+l;var c=t("<div/>",{id:a.f?null:o+"_filter","class":i.sFilter}).append(t("<label/>").append(u)),d=function(){var t=(a.f,this.value?this.value:"");t!=s.sSearch&&(G(e,{sSearch:t,bRegex:s.bRegex,bSmart:s.bSmart,bCaseInsensitive:s.bCaseInsensitive}),e._iDisplayStart=0,M(e))},h=null!==e.searchDelay?e.searchDelay:"ssp"===Ht(e)?400:0,p=t("input",c).val(s.sSearch).attr("placeholder",r.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT",h?bt(d,h):d).bind("keypress.DT",function(t){return 13==t.keyCode?!1:void 0}).attr("aria-controls",o);return t(e.nTable).on("search.dt.DT",function(t,i){if(e===i)try{p[0]!==n.activeElement&&p.val(s.sSearch)}catch(o){}}),c[0]}function G(t,e,n){var o=t.oPreviousSearch,r=t.aoPreSearchCols,s=function(t){o.sSearch=t.sSearch,o.bRegex=t.bRegex,o.bSmart=t.bSmart,o.bCaseInsensitive=t.bCaseInsensitive},a=function(t){return t.bEscapeRegex!==i?!t.bEscapeRegex:t.bRegex};if(y(t),"ssp"!=Ht(t)){K(t,e.sSearch,n,a(e),e.bSmart,e.bCaseInsensitive),s(e);for(var l=0;l<r.length;l++)Q(t,r[l].sSearch,l,a(r[l]),r[l].bSmart,r[l].bCaseInsensitive);J(t)}else s(e);t.bFiltered=!0,Rt(t,null,"search",[t])}function J(e){for(var n,i,o=Vt.ext.search,r=e.aiDisplay,s=0,a=o.length;a>s;s++){for(var l=[],u=0,c=r.length;c>u;u++)i=r[u],n=e.aoData[i],o[s](e,n._aFilterData,i,n._aData,u)&&l.push(i);r.length=0,t.merge(r,l)}}function Q(t,e,n,i,o,r){if(""!==e)for(var s,a=t.aiDisplay,l=Z(e,i,o,r),u=a.length-1;u>=0;u--)s=t.aoData[a[u]]._aFilterData[n],l.test(s)||a.splice(u,1)}function K(t,e,n,i,o,r){var s,a,l,u=Z(e,i,o,r),c=t.oPreviousSearch.sSearch,d=t.aiDisplayMaster;if(0!==Vt.ext.search.length&&(n=!0),a=et(t),e.length<=0)t.aiDisplay=d.slice();else for((a||n||c.length>e.length||0!==e.indexOf(c)||t.bSorted)&&(t.aiDisplay=d.slice()),s=t.aiDisplay,l=s.length-1;l>=0;l--)u.test(t.aoData[s[l]]._sFilterRow)||s.splice(l,1)}function Z(e,n,i,o){if(e=n?e:tt(e),i){var r=t.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(t){if('"'===t.charAt(0)){var e=t.match(/^"(.*)"$/);t=e?e[1]:t}return t.replace('"',"")});e="^(?=.*?"+r.join(")(?=.*?")+").*$"}return new RegExp(e,o?"i":"")}function tt(t){return t.replace(ne,"\\$1")}function et(t){var e,n,i,o,r,s,a,l,u=t.aoColumns,c=Vt.ext.type.search,d=!1;for(n=0,o=t.aoData.length;o>n;n++)if(l=t.aoData[n],!l._aFilterData){for(s=[],i=0,r=u.length;r>i;i++)e=u[i],e.bSearchable?(a=T(t,n,i,"filter"),c[e.sType]&&(a=c[e.sType](a)),null===a&&(a=""),"string"!=typeof a&&a.toString&&(a=a.toString())):a="",a.indexOf&&-1!==a.indexOf("&")&&(be.innerHTML=a,a=we?be.textContent:be.innerText),a.replace&&(a=a.replace(/[\r\n]/g,"")),s.push(a);l._aFilterData=s,l._sFilterRow=s.join("  "),d=!0}return d}function nt(t){return{search:t.sSearch,smart:t.bSmart,regex:t.bRegex,caseInsensitive:t.bCaseInsensitive}}function it(t){return{sSearch:t.search,bSmart:t.smart,bRegex:t.regex,bCaseInsensitive:t.caseInsensitive}}function ot(e){var n=e.sTableId,i=e.aanFeatures.i,o=t("<div/>",{"class":e.oClasses.sInfo,id:i?null:n+"_info"});return i||(e.aoDrawCallback.push({fn:rt,sName:"information"}),o.attr("role","status").attr("aria-live","polite"),t(e.nTable).attr("aria-describedby",n+"_info")),o[0]}function rt(e){var n=e.aanFeatures.i;if(0!==n.length){var i=e.oLanguage,o=e._iDisplayStart+1,r=e.fnDisplayEnd(),s=e.fnRecordsTotal(),a=e.fnRecordsDisplay(),l=a?i.sInfo:i.sInfoEmpty;a!==s&&(l+=" "+i.sInfoFiltered),l+=i.sInfoPostFix,l=st(e,l);var u=i.fnInfoCallback;null!==u&&(l=u.call(e.oInstance,e,o,r,s,a,l)),t(n).html(l)}}function st(t,e){var n=t.fnFormatNumber,i=t._iDisplayStart+1,o=t._iDisplayLength,r=t.fnRecordsDisplay(),s=-1===o;return e.replace(/_START_/g,n.call(t,i)).replace(/_END_/g,n.call(t,t.fnDisplayEnd())).replace(/_MAX_/g,n.call(t,t.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(t,r)).replace(/_PAGE_/g,n.call(t,s?1:Math.ceil(i/o))).replace(/_PAGES_/g,n.call(t,s?1:Math.ceil(r/o)))}function at(t){var e,n,i,o=t.iInitDisplayStart,r=t.aoColumns,s=t.oFeatures,a=t.bDeferLoading;if(!t.bInitialised)return void setTimeout(function(){at(t)},200);for(F(t),z(t),j(t,t.aoHeader),j(t,t.aoFooter),ft(t,!0),s.bAutoWidth&&yt(t),e=0,n=r.length;n>e;e++)i=r[e],i.sWidth&&(i.nTh.style.width=xt(i.sWidth));Rt(t,null,"preInit",[t]),R(t);var l=Ht(t);("ssp"!=l||a)&&("ajax"==l?W(t,[],function(n){var i=Y(t,n);for(e=0;e<i.length;e++)w(t,i[e]);t.iInitDisplayStart=o,R(t),ft(t,!1),lt(t,n)},t):(ft(t,!1),lt(t)))}function lt(t,e){t._bInitComplete=!0,(e||t.oInit.aaData)&&p(t),Rt(t,null,"plugin-init",[t,e]),Rt(t,"aoInitComplete","init",[t,e])}function ut(t,e){var n=parseInt(e,10);t._iDisplayLength=n,Ft(t),Rt(t,null,"length",[t,n])}function ct(e){for(var n=e.oClasses,i=e.sTableId,o=e.aLengthMenu,r=t.isArray(o[0]),s=r?o[0]:o,a=r?o[1]:o,l=t("<select/>",{name:i+"_length","aria-controls":i,"class":n.sLengthSelect}),u=0,c=s.length;c>u;u++)l[0][u]=new Option(a[u],s[u]);var d=t("<div><label/></div>").addClass(n.sLength);return e.aanFeatures.l||(d[0].id=i+"_length"),d.children().append(e.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),t("select",d).val(e._iDisplayLength).bind("change.DT",function(n){ut(e,t(this).val()),M(e)}),t(e.nTable).bind("length.dt.DT",function(n,i,o){e===i&&t("select",d).val(o)}),d[0]}function dt(e){var n=e.sPaginationType,i=Vt.ext.pager[n],o="function"==typeof i,r=function(t){M(t)},s=t("<div/>").addClass(e.oClasses.sPaging+n)[0],a=e.aanFeatures;return o||i.fnInit(e,s,r),a.p||(s.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(t){if(o){var e,n,s=t._iDisplayStart,l=t._iDisplayLength,u=t.fnRecordsDisplay(),c=-1===l,d=c?0:Math.ceil(s/l),h=c?1:Math.ceil(u/l),p=i(d,h);for(e=0,n=a.p.length;n>e;e++)Nt(t,"pageButton")(t,a.p[e],e,p,d,h)}else i.fnUpdate(t,r)},sName:"pagination"})),s}function ht(t,e,n){var i=t._iDisplayStart,o=t._iDisplayLength,r=t.fnRecordsDisplay();0===r||-1===o?i=0:"number"==typeof e?(i=e*o,i>r&&(i=0)):"first"==e?i=0:"previous"==e?(i=o>=0?i-o:0,0>i&&(i=0)):"next"==e?r>i+o&&(i+=o):"last"==e?i=Math.floor((r-1)/o)*o:Ot(t,0,"Unknown paging action: "+e,5);var s=t._iDisplayStart!==i;return t._iDisplayStart=i,s&&(Rt(t,null,"page",[t]),n&&M(t)),s}function pt(e){return t("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing","class":e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function ft(e,n){e.oFeatures.bProcessing&&t(e.aanFeatures.r).css("display",n?"block":"none"),Rt(e,null,"processing",[e,n])}function mt(e){var n=t(e.nTable);n.attr("role","grid");var i=e.oScroll;if(""===i.sX&&""===i.sY)return e.nTable;var o=i.sX,r=i.sY,s=e.oClasses,a=n.children("caption"),l=a.length?a[0]._captionSide:null,u=t(n[0].cloneNode(!1)),c=t(n[0].cloneNode(!1)),d=n.children("tfoot"),h="<div/>",p=function(t){return t?xt(t):null};d.length||(d=null);var f=t(h,{"class":s.sScrollWrapper}).append(t(h,{"class":s.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:o?p(o):"100%"}).append(t(h,{"class":s.sScrollHeadInner}).css({"box-sizing":"content-box",width:i.sXInner||"100%"}).append(u.removeAttr("id").css("margin-left",0).append("top"===l?a:null).append(n.children("thead"))))).append(t(h,{"class":s.sScrollBody}).css({position:"relative",overflow:"auto",width:p(o)}).append(n));d&&f.append(t(h,{"class":s.sScrollFoot}).css({overflow:"hidden",border:0,width:o?p(o):"100%"}).append(t(h,{"class":s.sScrollFootInner}).append(c.removeAttr("id").css("margin-left",0).append("bottom"===l?a:null).append(n.children("tfoot")))));var m=f.children(),g=m[0],v=m[1],y=d?m[2]:null;return o&&t(v).on("scroll.DT",function(t){var e=this.scrollLeft;g.scrollLeft=e,d&&(y.scrollLeft=e)}),t(v).css(r&&i.bCollapse?"max-height":"height",r),e.nScrollHead=g,e.nScrollBody=v,e.nScrollFoot=y,e.aoDrawCallback.push({fn:gt,sName:"scrolling"}),f[0]}function gt(e){var n,o,r,s,a,l,u,c,d,h=e.oScroll,m=h.sX,g=h.sXInner,v=h.sY,y=h.iBarWidth,b=t(e.nScrollHead),w=b[0].style,S=b.children("div"),_=S[0].style,x=S.children("table"),T=e.nScrollBody,C=t(T),D=T.style,E=t(e.nScrollFoot),A=E.children("div"),I=A.children("table"),P=t(e.nTHead),k=t(e.nTable),L=k[0],$=L.style,O=e.nTFoot?t(e.nTFoot):null,q=e.oBrowser,z=q.bScrollOversize,j=[],M=[],R=[],F=function(t){var e=t.style;e.paddingTop="0",e.paddingBottom="0",e.borderTopWidth="0",e.borderBottomWidth="0",e.height=0},N=T.scrollHeight>T.clientHeight;if(e.scrollBarVis!==N&&e.scrollBarVis!==i)return e.scrollBarVis=N,void p(e);e.scrollBarVis=N,k.children("thead, tfoot").remove(),a=P.clone().prependTo(k),n=P.find("tr"),r=a.find("tr"),a.find("th, td").removeAttr("tabindex"),O&&(l=O.clone().prependTo(k),o=O.find("tr"),s=l.find("tr")),m||(D.width="100%",b[0].style.width="100%"),t.each(H(e,a),function(t,n){u=f(e,t),n.style.width=e.aoColumns[u].sWidth}),O&&vt(function(t){t.style.width=""},s),d=k.outerWidth(),""===m?($.width="100%",z&&(k.find("tbody").height()>T.offsetHeight||"scroll"==C.css("overflow-y"))&&($.width=xt(k.outerWidth()-y)),d=k.outerWidth()):""!==g&&($.width=xt(g),d=k.outerWidth()),vt(F,r),vt(function(e){R.push(e.innerHTML),j.push(xt(t(e).css("width")))},r),vt(function(t,e){t.style.width=j[e]},n),t(r).height(0),O&&(vt(F,s),vt(function(e){M.push(xt(t(e).css("width")))},s),vt(function(t,e){t.style.width=M[e]},o),t(s).height(0)),vt(function(t,e){t.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+R[e]+"</div>",t.style.width=j[e]},r),O&&vt(function(t,e){t.innerHTML="",t.style.width=M[e]},s),k.outerWidth()<d?(c=T.scrollHeight>T.offsetHeight||"scroll"==C.css("overflow-y")?d+y:d,z&&(T.scrollHeight>T.offsetHeight||"scroll"==C.css("overflow-y"))&&($.width=xt(c-y)),(""===m||""!==g)&&Ot(e,1,"Possible column misalignment",6)):c="100%",D.width=xt(c),w.width=xt(c),O&&(e.nScrollFoot.style.width=xt(c)),v||z&&(D.height=xt(L.offsetHeight+y));var W=k.outerWidth();x[0].style.width=xt(W),_.width=xt(W);var B=k.height()>T.clientHeight||"scroll"==C.css("overflow-y"),U="padding"+(q.bScrollbarLeft?"Left":"Right");_[U]=B?y+"px":"0px",O&&(I[0].style.width=xt(W),A[0].style.width=xt(W),A[0].style[U]=B?y+"px":"0px"),C.scroll(),!e.bSorted&&!e.bFiltered||e._drawHold||(T.scrollTop=0)}function vt(t,e,n){for(var i,o,r=0,s=0,a=e.length;a>s;){for(i=e[s].firstChild,o=n?n[s].firstChild:null;i;)1===i.nodeType&&(n?t(i,o,r):t(i,r),r++),i=i.nextSibling,o=n?o.nextSibling:null;s++}}function yt(n){var i,o,r,s=n.nTable,a=n.aoColumns,l=n.oScroll,u=l.sY,c=l.sX,d=l.sXInner,h=a.length,m=v(n,"bVisible"),y=t("th",n.nTHead),b=s.getAttribute("width"),w=s.parentNode,S=!1,_=n.oBrowser,x=_.bScrollOversize,T=s.style.width;for(T&&-1!==T.indexOf("%")&&(b=T),i=0;i<m.length;i++)o=a[m[i]],null!==o.sWidth&&(o.sWidth=wt(o.sWidthOrig,w),S=!0);if(x||!S&&!c&&!u&&h==g(n)&&h==y.length)for(i=0;h>i;i++){var C=f(n,i);null!==C&&(a[C].sWidth=xt(y.eq(i).width()))}else{var D=t(s).clone().css("visibility","hidden").removeAttr("id");D.find("tbody tr").remove();var E=t("<tr/>").appendTo(D.find("tbody"));for(D.find("thead, tfoot").remove(),D.append(t(n.nTHead).clone()).append(t(n.nTFoot).clone()),D.find("tfoot th, tfoot td").css("width",""),y=H(n,D.find("thead")[0]),i=0;i<m.length;i++)o=a[m[i]],y[i].style.width=null!==o.sWidthOrig&&""!==o.sWidthOrig?xt(o.sWidthOrig):"",o.sWidthOrig&&c&&t(y[i]).append(t("<div/>").css({width:o.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(n.aoData.length)for(i=0;i<m.length;i++)r=m[i],o=a[r],t(St(n,r)).clone(!1).append(o.sContentPadding).appendTo(E);var A=t("<div/>").css(c||u?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(D).appendTo(w);c&&d?D.width(d):c?(D.css("width","auto"),D.removeAttr("width"),D.width()<w.clientWidth&&b&&D.width(w.clientWidth)):u?D.width(w.clientWidth):b&&D.width(b);var I=0;for(i=0;i<m.length;i++){var P=t(y[i]),k=P.outerWidth()-P.width(),L=_.bBounding?Math.ceil(y[i].getBoundingClientRect().width):P.outerWidth();I+=L,a[m[i]].sWidth=xt(L-k)}s.style.width=xt(I),A.remove()}if(b&&(s.style.width=xt(b)),(b||c)&&!n._reszEvt){var $=function(){t(e).bind("resize.DT-"+n.sInstance,bt(function(){p(n)}))};x?setTimeout($,1e3):$(),n._reszEvt=!0}}function bt(t,e){var n,o,r=e!==i?e:200;return function(){var e=this,s=+new Date,a=arguments;n&&n+r>s?(clearTimeout(o),o=setTimeout(function(){n=i,t.apply(e,a)},r)):(n=s,t.apply(e,a))}}function wt(e,i){if(!e)return 0;var o=t("<div/>").css("width",xt(e)).appendTo(i||n.body),r=o[0].offsetWidth;return o.remove(),r}function St(e,n){var i=_t(e,n);if(0>i)return null;var o=e.aoData[i];return o.nTr?o.anCells[n]:t("<td/>").html(T(e,i,n,"display"))[0]}function _t(t,e){for(var n,i=-1,o=-1,r=0,s=t.aoData.length;s>r;r++)n=T(t,r,e,"display")+"",n=n.replace(Se,""),n=n.replace(/&nbsp;/g," "),n.length>i&&(i=n.length,o=r);return o}function xt(t){return null===t?"0px":"number"==typeof t?0>t?"0px":t+"px":t.match(/\d$/)?t+"px":t}function Tt(e){var n,o,r,s,a,l,u,c=[],d=e.aoColumns,h=e.aaSortingFixed,p=t.isPlainObject(h),f=[],m=function(e){e.length&&!t.isArray(e[0])?f.push(e):t.merge(f,e)};for(t.isArray(h)&&m(h),p&&h.pre&&m(h.pre),m(e.aaSorting),p&&h.post&&m(h.post),n=0;n<f.length;n++)for(u=f[n][0],s=d[u].aDataSort,o=0,r=s.length;r>o;o++)a=s[o],l=d[a].sType||"string",f[n]._idx===i&&(f[n]._idx=t.inArray(f[n][1],d[a].asSorting)),c.push({src:u,col:a,dir:f[n][1],index:f[n]._idx,type:l,formatter:Vt.ext.type.order[l+"-pre"]});return c}function Ct(t){var e,n,i,o,r,s=[],a=Vt.ext.type.order,l=t.aoData,u=(t.aoColumns,0),c=t.aiDisplayMaster;for(y(t),r=Tt(t),e=0,n=r.length;n>e;e++)o=r[e],o.formatter&&u++,Pt(t,o.col);if("ssp"!=Ht(t)&&0!==r.length){for(e=0,i=c.length;i>e;e++)s[c[e]]=e;u===r.length?c.sort(function(t,e){var n,i,o,a,u,c=r.length,d=l[t]._aSortData,h=l[e]._aSortData;for(o=0;c>o;o++)if(u=r[o],n=d[u.col],i=h[u.col],a=i>n?-1:n>i?1:0,0!==a)return"asc"===u.dir?a:-a;return n=s[t],i=s[e],i>n?-1:n>i?1:0}):c.sort(function(t,e){var n,i,o,u,c,d,h=r.length,p=l[t]._aSortData,f=l[e]._aSortData;for(o=0;h>o;o++)if(c=r[o],n=p[c.col],i=f[c.col],d=a[c.type+"-"+c.dir]||a["string-"+c.dir],u=d(n,i),0!==u)return u;return n=s[t],i=s[e],i>n?-1:n>i?1:0})}t.bSorted=!0}function Dt(t){for(var e,n,i=t.aoColumns,o=Tt(t),r=t.oLanguage.oAria,s=0,a=i.length;a>s;s++){var l=i[s],u=l.asSorting,c=l.sTitle.replace(/<.*?>/g,""),d=l.nTh;d.removeAttribute("aria-sort"),l.bSortable?(o.length>0&&o[0].col==s?(d.setAttribute("aria-sort","asc"==o[0].dir?"ascending":"descending"),n=u[o[0].index+1]||u[0]):n=u[0],e=c+("asc"===n?r.sSortAscending:r.sSortDescending)):e=c,d.setAttribute("aria-label",e)}}function Et(e,n,o,r){var s,a=e.aoColumns[n],l=e.aaSorting,u=a.asSorting,c=function(e,n){var o=e._idx;return o===i&&(o=t.inArray(e[1],u)),o+1<u.length?o+1:n?null:0};if("number"==typeof l[0]&&(l=e.aaSorting=[l]),o&&e.oFeatures.bSortMulti){var d=t.inArray(n,ce(l,"0"));-1!==d?(s=c(l[d],!0),null===s&&1===l.length&&(s=0),null===s?l.splice(d,1):(l[d][1]=u[s],l[d]._idx=s)):(l.push([n,u[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==n?(s=c(l[0]),l.length=1,l[0][1]=u[s],l[0]._idx=s):(l.length=0,l.push([n,u[0]]),l[0]._idx=0);R(e),"function"==typeof r&&r(e)}function At(t,e,n,i){var o=t.aoColumns[n];jt(e,{},function(e){o.bSortable!==!1&&(t.oFeatures.bProcessing?(ft(t,!0),setTimeout(function(){Et(t,n,e.shiftKey,i),"ssp"!==Ht(t)&&ft(t,!1)},0)):Et(t,n,e.shiftKey,i))})}function It(e){var n,i,o,r=e.aLastSort,s=e.oClasses.sSortColumn,a=Tt(e),l=e.oFeatures;if(l.bSort&&l.bSortClasses){for(n=0,i=r.length;i>n;n++)o=r[n].src,t(ce(e.aoData,"anCells",o)).removeClass(s+(2>n?n+1:3));for(n=0,i=a.length;i>n;n++)o=a[n].src,t(ce(e.aoData,"anCells",o)).addClass(s+(2>n?n+1:3))}e.aLastSort=a}function Pt(t,e){var n,i=t.aoColumns[e],o=Vt.ext.order[i.sSortDataType];o&&(n=o.call(t.oInstance,t,e,m(t,e)));for(var r,s,a=Vt.ext.type.order[i.sType+"-pre"],l=0,u=t.aoData.length;u>l;l++)r=t.aoData[l],r._aSortData||(r._aSortData=[]),(!r._aSortData[e]||o)&&(s=o?n[l]:T(t,l,e,"sort"),r._aSortData[e]=a?a(s):s)}function kt(e){if(e.oFeatures.bStateSave&&!e.bDestroying){var n={time:+new Date,start:e._iDisplayStart,length:e._iDisplayLength,order:t.extend(!0,[],e.aaSorting),search:nt(e.oPreviousSearch),columns:t.map(e.aoColumns,function(t,n){return{visible:t.bVisible,search:nt(e.aoPreSearchCols[n])}})};Rt(e,"aoStateSaveParams","stateSaveParams",[e,n]),e.oSavedState=n,e.fnStateSaveCallback.call(e.oInstance,e,n)}}function Lt(e,n){var o,r,s=e.aoColumns;if(e.oFeatures.bStateSave){var a=e.fnStateLoadCallback.call(e.oInstance,e);if(a&&a.time){var l=Rt(e,"aoStateLoadParams","stateLoadParams",[e,a]);if(-1===t.inArray(!1,l)){var u=e.iStateDuration;if(!(u>0&&a.time<+new Date-1e3*u)&&s.length===a.columns.length){for(e.oLoadedState=t.extend(!0,{},a),a.start!==i&&(e._iDisplayStart=a.start,e.iInitDisplayStart=a.start),a.length!==i&&(e._iDisplayLength=a.length),a.order!==i&&(e.aaSorting=[],t.each(a.order,function(t,n){e.aaSorting.push(n[0]>=s.length?[0,n[1]]:n)})),a.search!==i&&t.extend(e.oPreviousSearch,it(a.search)),o=0,r=a.columns.length;r>o;o++){var c=a.columns[o];c.visible!==i&&(s[o].bVisible=c.visible),c.search!==i&&t.extend(e.aoPreSearchCols[o],it(c.search))}Rt(e,"aoStateLoaded","stateLoaded",[e,a])}}}}}function $t(e){var n=Vt.settings,i=t.inArray(e,ce(n,"nTable"));return-1!==i?n[i]:null}function Ot(t,n,i,o){if(i="DataTables warning: "+(t?"table id="+t.sTableId+" - ":"")+i,o&&(i+=". For more information about this error, please see http://datatables.net/tn/"+o),n)e.console&&console.log&&console.log(i);else{var r=Vt.ext,s=r.sErrMode||r.errMode;if(t&&Rt(t,null,"error",[t,o,i]),"alert"==s)alert(i);else{if("throw"==s)throw new Error(i);"function"==typeof s&&s(t,o,i)}}}function qt(e,n,o,r){return t.isArray(o)?void t.each(o,function(i,o){t.isArray(o)?qt(e,n,o[0],o[1]):qt(e,n,o)}):(r===i&&(r=o),void(n[o]!==i&&(e[r]=n[o])))}function zt(e,n,i){var o;for(var r in n)n.hasOwnProperty(r)&&(o=n[r],t.isPlainObject(o)?(t.isPlainObject(e[r])||(e[r]={}),t.extend(!0,e[r],o)):i&&"data"!==r&&"aaData"!==r&&t.isArray(o)?e[r]=o.slice():e[r]=o);return e}function jt(e,n,i){t(e).bind("click.DT",n,function(t){e.blur(),i(t)}).bind("keypress.DT",n,function(t){13===t.which&&(t.preventDefault(),i(t))}).bind("selectstart.DT",function(){return!1})}function Mt(t,e,n,i){n&&t[e].push({fn:n,sName:i})}function Rt(e,n,i,o){var r=[];if(n&&(r=t.map(e[n].slice().reverse(),function(t,n){return t.fn.apply(e.oInstance,o)})),null!==i){var s=t.Event(i+".dt");t(e.nTable).trigger(s,o),r.push(s.result)}return r}function Ft(t){var e=t._iDisplayStart,n=t.fnDisplayEnd(),i=t._iDisplayLength;e>=n&&(e=n-i),e-=e%i,(-1===i||0>e)&&(e=0),t._iDisplayStart=e}function Nt(e,n){var i=e.renderer,o=Vt.ext.renderer[n];return t.isPlainObject(i)&&i[n]?o[i[n]]||o._:"string"==typeof i?o[i]||o._:o._}function Ht(t){return t.oFeatures.bServerSide?"ssp":t.ajax||t.sAjaxSource?"ajax":"dom"}function Wt(t,e){var n=[],i=Be.numbers_length,o=Math.floor(i/2);return i>=e?n=he(0,e):o>=t?(n=he(0,i-2),n.push("ellipsis"),n.push(e-1)):t>=e-1-o?(n=he(e-(i-2),e),n.splice(0,0,"ellipsis"),n.splice(0,0,0)):(n=he(t-o+2,t+o-1),n.push("ellipsis"),n.push(e-1),n.splice(0,0,"ellipsis"),n.splice(0,0,0)),n.DT_el="span",n}function Bt(e){t.each({num:function(t){return Ue(t,e)},"num-fmt":function(t){return Ue(t,e,ie)},"html-num":function(t){return Ue(t,e,Zt)},"html-num-fmt":function(t){return Ue(t,e,Zt,ie)}},function(t,n){Yt.type.order[t+e+"-pre"]=n,t.match(/^html\-/)&&(Yt.type.search[t+e]=Yt.type.search.html)})}function Ut(t){return function(){var e=[$t(this[Vt.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Vt.ext.internal[t].apply(this,e)}}var Vt,Yt,Xt,Gt,Jt,Qt={},Kt=/[\r\n]/g,Zt=/<.*?>/g,te=/^[\w\+\-]/,ee=/[\w\+\-]$/,ne=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),ie=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi,oe=function(t){return t&&t!==!0&&"-"!==t?!1:!0},re=function(t){var e=parseInt(t,10);return!isNaN(e)&&isFinite(t)?e:null},se=function(t,e){return Qt[e]||(Qt[e]=new RegExp(tt(e),"g")),"string"==typeof t&&"."!==e?t.replace(/\./g,"").replace(Qt[e],"."):t},ae=function(t,e,n){var i="string"==typeof t;return oe(t)?!0:(e&&i&&(t=se(t,e)),n&&i&&(t=t.replace(ie,"")),!isNaN(parseFloat(t))&&isFinite(t))},le=function(t){return oe(t)||"string"==typeof t},ue=function(t,e,n){if(oe(t))return!0;var i=le(t);return i&&ae(fe(t),e,n)?!0:null},ce=function(t,e,n){var o=[],r=0,s=t.length;if(n!==i)for(;s>r;r++)t[r]&&t[r][e]&&o.push(t[r][e][n]);else for(;s>r;r++)t[r]&&o.push(t[r][e]);return o},de=function(t,e,n,o){var r=[],s=0,a=e.length;if(o!==i)for(;a>s;s++)t[e[s]][n]&&r.push(t[e[s]][n][o]);else for(;a>s;s++)r.push(t[e[s]][n]);return r},he=function(t,e){var n,o=[];e===i?(e=0,n=t):(n=e,e=t);for(var r=e;n>r;r++)o.push(r);return o},pe=function(t){for(var e=[],n=0,i=t.length;i>n;n++)t[n]&&e.push(t[n]);return e},fe=function(t){return t.replace(Zt,"")},me=function(t){var e,n,i,o=[],r=t.length,s=0;t:for(n=0;r>n;n++){for(e=t[n],i=0;s>i;i++)if(o[i]===e)continue t;o.push(e),s++}return o},ge=function(t,e,n){t[e]!==i&&(t[n]=t[e])},ve=/\[.*?\]$/,ye=/\(\)$/,be=t("<div>")[0],we=be.textContent!==i,Se=/<.*?>/g;Vt=function(e){this.$=function(t,e){return this.api(!0).$(t,e)},this._=function(t,e){return this.api(!0).rows(t,e).data()},this.api=function(t){return new Xt(t?$t(this[Yt.iApiIndex]):this)},this.fnAddData=function(e,n){var o=this.api(!0),r=t.isArray(e)&&(t.isArray(e[0])||t.isPlainObject(e[0]))?o.rows.add(e):o.row.add(e);return(n===i||n)&&o.draw(),r.flatten().toArray()},this.fnAdjustColumnSizing=function(t){var e=this.api(!0).columns.adjust(),n=e.settings()[0],o=n.oScroll;t===i||t?e.draw(!1):(""!==o.sX||""!==o.sY)&&gt(n)},this.fnClearTable=function(t){var e=this.api(!0).clear();(t===i||t)&&e.draw()},this.fnClose=function(t){this.api(!0).row(t).child.hide()},this.fnDeleteRow=function(t,e,n){var o=this.api(!0),r=o.rows(t),s=r.settings()[0],a=s.aoData[r[0][0]];return r.remove(),e&&e.call(this,s,a),(n===i||n)&&o.draw(),a},this.fnDestroy=function(t){this.api(!0).destroy(t)},this.fnDraw=function(t){this.api(!0).draw(t)},this.fnFilter=function(t,e,n,o,r,s){var a=this.api(!0);null===e||e===i?a.search(t,n,o,s):a.column(e).search(t,n,o,s),a.draw()},this.fnGetData=function(t,e){var n=this.api(!0);if(t!==i){var o=t.nodeName?t.nodeName.toLowerCase():"";return e!==i||"td"==o||"th"==o?n.cell(t,e).data():n.row(t).data()||null}return n.data().toArray()},this.fnGetNodes=function(t){var e=this.api(!0);return t!==i?e.row(t).node():e.rows().nodes().flatten().toArray()},this.fnGetPosition=function(t){var e=this.api(!0),n=t.nodeName.toUpperCase();if("TR"==n)return e.row(t).index();if("TD"==n||"TH"==n){var i=e.cell(t).index();return[i.row,i.columnVisible,i.column]}return null},this.fnIsOpen=function(t){return this.api(!0).row(t).child.isShown()},this.fnOpen=function(t,e,n){return this.api(!0).row(t).child(e,n).show().child()[0]},this.fnPageChange=function(t,e){var n=this.api(!0).page(t);(e===i||e)&&n.draw(!1)},this.fnSetColumnVis=function(t,e,n){var o=this.api(!0).column(t).visible(e);(n===i||n)&&o.columns.adjust().draw()},this.fnSettings=function(){return $t(this[Yt.iApiIndex])},this.fnSort=function(t){this.api(!0).order(t).draw()},this.fnSortListener=function(t,e,n){this.api(!0).order.listener(t,e,n)},this.fnUpdate=function(t,e,n,o,r){var s=this.api(!0);return n===i||null===n?s.row(e).data(t):s.cell(e,n).data(t),(r===i||r)&&s.columns.adjust(),(o===i||o)&&s.draw(),0},this.fnVersionCheck=Yt.fnVersionCheck;var n=this,o=e===i,c=this.length;o&&(e={}),this.oApi=this.internal=Yt.internal;for(var p in Vt.ext.internal)p&&(this[p]=Ut(p));return this.each(function(){var p,f={},m=c>1?zt(f,e,!0):e,g=0,v=this.getAttribute("id"),y=!1,_=Vt.defaults,x=t(this);if("table"!=this.nodeName.toLowerCase())return void Ot(null,0,"Non-table node initialisation ("+this.nodeName+")",2);a(_),l(_.column),r(_,_,!0),r(_.column,_.column,!0),r(_,t.extend(m,x.data()));var T=Vt.settings;for(g=0,p=T.length;p>g;g++){var C=T[g];if(C.nTable==this||C.nTHead.parentNode==this||C.nTFoot&&C.nTFoot.parentNode==this){var D=m.bRetrieve!==i?m.bRetrieve:_.bRetrieve,A=m.bDestroy!==i?m.bDestroy:_.bDestroy;if(o||D)return C.oInstance;if(A){C.oInstance.fnDestroy();break}return void Ot(C,0,"Cannot reinitialise DataTable",3)}if(C.sTableId==this.id){T.splice(g,1);break}}(null===v||""===v)&&(v="DataTables_Table_"+Vt.ext._unique++,this.id=v);var I=t.extend(!0,{},Vt.models.oSettings,{sDestroyWidth:x[0].style.width,sInstance:v,sTableId:v});I.nTable=this,I.oApi=n.internal,I.oInit=m,T.push(I),I.oInstance=1===n.length?n:x.dataTable(),a(m),m.oLanguage&&s(m.oLanguage),m.aLengthMenu&&!m.iDisplayLength&&(m.iDisplayLength=t.isArray(m.aLengthMenu[0])?m.aLengthMenu[0][0]:m.aLengthMenu[0]),m=zt(t.extend(!0,{},_),m),qt(I.oFeatures,m,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),qt(I,m,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),qt(I.oScroll,m,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),qt(I.oLanguage,m,"fnInfoCallback"),Mt(I,"aoDrawCallback",m.fnDrawCallback,"user"),Mt(I,"aoServerParams",m.fnServerParams,"user"),Mt(I,"aoStateSaveParams",m.fnStateSaveParams,"user"),Mt(I,"aoStateLoadParams",m.fnStateLoadParams,"user"),Mt(I,"aoStateLoaded",m.fnStateLoaded,"user"),Mt(I,"aoRowCallback",m.fnRowCallback,"user"),Mt(I,"aoRowCreatedCallback",m.fnCreatedRow,"user"),Mt(I,"aoHeaderCallback",m.fnHeaderCallback,"user"),Mt(I,"aoFooterCallback",m.fnFooterCallback,"user"),Mt(I,"aoInitComplete",m.fnInitComplete,"user"),Mt(I,"aoPreDrawCallback",m.fnPreDrawCallback,"user"),I.rowIdFn=E(m.rowId),u(I);var P=I.oClasses;if(m.bJQueryUI?(t.extend(P,Vt.ext.oJUIClasses,m.oClasses),m.sDom===_.sDom&&"lfrtip"===_.sDom&&(I.sDom='<"H"lfr>t<"F"ip>'),I.renderer?t.isPlainObject(I.renderer)&&!I.renderer.header&&(I.renderer.header="jqueryui"):I.renderer="jqueryui"):t.extend(P,Vt.ext.classes,m.oClasses),x.addClass(P.sTable),I.iInitDisplayStart===i&&(I.iInitDisplayStart=m.iDisplayStart,I._iDisplayStart=m.iDisplayStart),null!==m.iDeferLoading){I.bDeferLoading=!0;var k=t.isArray(m.iDeferLoading);I._iRecordsDisplay=k?m.iDeferLoading[0]:m.iDeferLoading,I._iRecordsTotal=k?m.iDeferLoading[1]:m.iDeferLoading}var L=I.oLanguage;t.extend(!0,L,m.oLanguage),""!==L.sUrl&&(t.ajax({dataType:"json",url:L.sUrl,success:function(e){s(e),r(_.oLanguage,e),t.extend(!0,L,e),at(I)},error:function(){at(I)}}),y=!0),null===m.asStripeClasses&&(I.asStripeClasses=[P.sStripeOdd,P.sStripeEven]);var $=I.asStripeClasses,O=x.children("tbody").find("tr").eq(0);-1!==t.inArray(!0,t.map($,function(t,e){return O.hasClass(t)}))&&(t("tbody tr",this).removeClass($.join(" ")),I.asDestroyStripes=$.slice());var q,z=[],j=this.getElementsByTagName("thead");if(0!==j.length&&(N(I.aoHeader,j[0]),z=H(I)),null===m.aoColumns)for(q=[],g=0,p=z.length;p>g;g++)q.push(null);else q=m.aoColumns;for(g=0,p=q.length;p>g;g++)d(I,z?z[g]:null);if(b(I,m.aoColumnDefs,q,function(t,e){h(I,t,e)}),O.length){var M=function(t,e){return null!==t.getAttribute("data-"+e)?e:null};t(O[0]).children("th, td").each(function(t,e){var n=I.aoColumns[t];if(n.mData===t){var o=M(e,"sort")||M(e,"order"),r=M(e,"filter")||M(e,"search");(null!==o||null!==r)&&(n.mData={_:t+".display",sort:null!==o?t+".@data-"+o:i,type:null!==o?t+".@data-"+o:i,
filter:null!==r?t+".@data-"+r:i},h(I,t))}})}var R=I.oFeatures;if(m.bStateSave&&(R.bStateSave=!0,Lt(I,m),Mt(I,"aoDrawCallback",kt,"state_save")),m.aaSorting===i){var F=I.aaSorting;for(g=0,p=F.length;p>g;g++)F[g][1]=I.aoColumns[g].asSorting[0]}It(I),R.bSort&&Mt(I,"aoDrawCallback",function(){if(I.bSorted){var e=Tt(I),n={};t.each(e,function(t,e){n[e.src]=e.dir}),Rt(I,null,"order",[I,e,n]),Dt(I)}}),Mt(I,"aoDrawCallback",function(){(I.bSorted||"ssp"===Ht(I)||R.bDeferRender)&&It(I)},"sc");var W=x.children("caption").each(function(){this._captionSide=x.css("caption-side")}),B=x.children("thead");0===B.length&&(B=t("<thead/>").appendTo(this)),I.nTHead=B[0];var U=x.children("tbody");0===U.length&&(U=t("<tbody/>").appendTo(this)),I.nTBody=U[0];var V=x.children("tfoot");if(0===V.length&&W.length>0&&(""!==I.oScroll.sX||""!==I.oScroll.sY)&&(V=t("<tfoot/>").appendTo(this)),0===V.length||0===V.children().length?x.addClass(P.sNoFooter):V.length>0&&(I.nTFoot=V[0],N(I.aoFooter,I.nTFoot)),m.aaData)for(g=0;g<m.aaData.length;g++)w(I,m.aaData[g]);else(I.bDeferLoading||"dom"==Ht(I))&&S(I,t(I.nTBody).children("tr"));I.aiDisplay=I.aiDisplayMaster.slice(),I.bInitialised=!0,y===!1&&at(I)}),n=null,this};var _e=[],xe=Array.prototype,Te=function(e){var n,i,o=Vt.settings,r=t.map(o,function(t,e){return t.nTable});return e?e.nTable&&e.oApi?[e]:e.nodeName&&"table"===e.nodeName.toLowerCase()?(n=t.inArray(e,r),-1!==n?[o[n]]:null):e&&"function"==typeof e.settings?e.settings().toArray():("string"==typeof e?i=t(e):e instanceof t&&(i=e),i?i.map(function(e){return n=t.inArray(this,r),-1!==n?o[n]:null}).toArray():void 0):[]};Xt=function(e,n){if(!(this instanceof Xt))return new Xt(e,n);var i=[],o=function(t){var e=Te(t);e&&(i=i.concat(e))};if(t.isArray(e))for(var r=0,s=e.length;s>r;r++)o(e[r]);else o(e);this.context=me(i),n&&t.merge(this,n),this.selector={rows:null,cols:null,opts:null},Xt.extend(this,this,_e)},Vt.Api=Xt,t.extend(Xt.prototype,{any:function(){return 0!==this.count()},concat:xe.concat,context:[],count:function(){return this.flatten().length},each:function(t){for(var e=0,n=this.length;n>e;e++)t.call(this,this[e],e,this);return this},eq:function(t){var e=this.context;return e.length>t?new Xt(e[t],this[t]):null},filter:function(t){var e=[];if(xe.filter)e=xe.filter.call(this,t,this);else for(var n=0,i=this.length;i>n;n++)t.call(this,this[n],n,this)&&e.push(this[n]);return new Xt(this.context,e)},flatten:function(){var t=[];return new Xt(this.context,t.concat.apply(t,this.toArray()))},join:xe.join,indexOf:xe.indexOf||function(t,e){for(var n=e||0,i=this.length;i>n;n++)if(this[n]===t)return n;return-1},iterator:function(t,e,n,o){var r,s,a,l,u,c,d,h,p=[],f=this.context,m=this.selector;for("string"==typeof t&&(o=n,n=e,e=t,t=!1),s=0,a=f.length;a>s;s++){var g=new Xt(f[s]);if("table"===e)r=n.call(g,f[s],s),r!==i&&p.push(r);else if("columns"===e||"rows"===e)r=n.call(g,f[s],this[s],s),r!==i&&p.push(r);else if("column"===e||"column-rows"===e||"row"===e||"cell"===e)for(d=this[s],"column-rows"===e&&(c=Pe(f[s],m.opts)),l=0,u=d.length;u>l;l++)h=d[l],r="cell"===e?n.call(g,f[s],h.row,h.column,s,l):n.call(g,f[s],h,s,l,c),r!==i&&p.push(r)}if(p.length||o){var v=new Xt(f,t?p.concat.apply([],p):p),y=v.selector;return y.rows=m.rows,y.cols=m.cols,y.opts=m.opts,v}return this},lastIndexOf:xe.lastIndexOf||function(t,e){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(t){var e=[];if(xe.map)e=xe.map.call(this,t,this);else for(var n=0,i=this.length;i>n;n++)e.push(t.call(this,this[n],n));return new Xt(this.context,e)},pluck:function(t){return this.map(function(e){return e[t]})},pop:xe.pop,push:xe.push,reduce:xe.reduce||function(t,e){return c(this,t,e,0,this.length,1)},reduceRight:xe.reduceRight||function(t,e){return c(this,t,e,this.length-1,-1,-1)},reverse:xe.reverse,selector:null,shift:xe.shift,sort:xe.sort,splice:xe.splice,toArray:function(){return xe.slice.call(this)},to$:function(){return t(this)},toJQuery:function(){return t(this)},unique:function(){return new Xt(this.context,me(this))},unshift:xe.unshift}),Xt.extend=function(e,n,i){if(i.length&&n&&(n instanceof Xt||n.__dt_wrapper)){var o,r,s,a=function(t,e,n){return function(){var i=e.apply(t,arguments);return Xt.extend(i,i,n.methodExt),i}};for(o=0,r=i.length;r>o;o++)s=i[o],n[s.name]="function"==typeof s.val?a(e,s.val,s):t.isPlainObject(s.val)?{}:s.val,n[s.name].__dt_wrapper=!0,Xt.extend(e,n[s.name],s.propExt)}},Xt.register=Gt=function(e,n){if(t.isArray(e))for(var i=0,o=e.length;o>i;i++)Xt.register(e[i],n);else{var r,s,a,l,u=e.split("."),c=_e,d=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n].name===e)return t[n];return null};for(r=0,s=u.length;s>r;r++){l=-1!==u[r].indexOf("()"),a=l?u[r].replace("()",""):u[r];var h=d(c,a);h||(h={name:a,val:{},methodExt:[],propExt:[]},c.push(h)),r===s-1?h.val=n:c=l?h.methodExt:h.propExt}}},Xt.registerPlural=Jt=function(e,n,o){Xt.register(e,o),Xt.register(n,function(){var e=o.apply(this,arguments);return e===this?this:e instanceof Xt?e.length?t.isArray(e[0])?new Xt(e.context,e[0]):e[0]:i:e})};var Ce=function(e,n){if("number"==typeof e)return[n[e]];var i=t.map(n,function(t,e){return t.nTable});return t(i).filter(e).map(function(e){var o=t.inArray(this,i);return n[o]}).toArray()};Gt("tables()",function(t){return t?new Xt(Ce(t,this.context)):this}),Gt("table()",function(t){var e=this.tables(t),n=e.context;return n.length?new Xt(n[0]):e}),Jt("tables().nodes()","table().node()",function(){return this.iterator("table",function(t){return t.nTable},1)}),Jt("tables().body()","table().body()",function(){return this.iterator("table",function(t){return t.nTBody},1)}),Jt("tables().header()","table().header()",function(){return this.iterator("table",function(t){return t.nTHead},1)}),Jt("tables().footer()","table().footer()",function(){return this.iterator("table",function(t){return t.nTFoot},1)}),Jt("tables().containers()","table().container()",function(){return this.iterator("table",function(t){return t.nTableWrapper},1)}),Gt("draw()",function(t){return this.iterator("table",function(e){"page"===t?M(e):("string"==typeof t&&(t="full-hold"===t?!1:!0),R(e,t===!1))})}),Gt("page()",function(t){return t===i?this.page.info().page:this.iterator("table",function(e){ht(e,t)})}),Gt("page.info()",function(t){if(0===this.context.length)return i;var e=this.context[0],n=e._iDisplayStart,o=e.oFeatures.bPaginate?e._iDisplayLength:-1,r=e.fnRecordsDisplay(),s=-1===o;return{page:s?0:Math.floor(n/o),pages:s?1:Math.ceil(r/o),start:n,end:e.fnDisplayEnd(),length:o,recordsTotal:e.fnRecordsTotal(),recordsDisplay:r,serverSide:"ssp"===Ht(e)}}),Gt("page.len()",function(t){return t===i?0!==this.context.length?this.context[0]._iDisplayLength:i:this.iterator("table",function(e){ut(e,t)})});var De=function(t,e,n){if(n){var i=new Xt(t);i.one("draw",function(){n(i.ajax.json())})}if("ssp"==Ht(t))R(t,e);else{ft(t,!0);var o=t.jqXHR;o&&4!==o.readyState&&o.abort(),W(t,[],function(n){P(t);for(var i=Y(t,n),o=0,r=i.length;r>o;o++)w(t,i[o]);R(t,e),ft(t,!1)})}};Gt("ajax.json()",function(){var t=this.context;return t.length>0?t[0].json:void 0}),Gt("ajax.params()",function(){var t=this.context;return t.length>0?t[0].oAjaxData:void 0}),Gt("ajax.reload()",function(t,e){return this.iterator("table",function(n){De(n,e===!1,t)})}),Gt("ajax.url()",function(e){var n=this.context;return e===i?0===n.length?i:(n=n[0],n.ajax?t.isPlainObject(n.ajax)?n.ajax.url:n.ajax:n.sAjaxSource):this.iterator("table",function(n){t.isPlainObject(n.ajax)?n.ajax.url=e:n.ajax=e})}),Gt("ajax.url().load()",function(t,e){return this.iterator("table",function(n){De(n,e===!1,t)})});var Ee=function(e,n,o,r,s){var a,l,u,c,d,h,p=[],f=typeof n;for(n&&"string"!==f&&"function"!==f&&n.length!==i||(n=[n]),u=0,c=n.length;c>u;u++)for(l=n[u]&&n[u].split?n[u].split(","):[n[u]],d=0,h=l.length;h>d;d++)a=o("string"==typeof l[d]?t.trim(l[d]):l[d]),a&&a.length&&(p=p.concat(a));var m=Yt.selector[e];if(m.length)for(u=0,c=m.length;c>u;u++)p=m[u](r,s,p);return me(p)},Ae=function(e){return e||(e={}),e.filter&&e.search===i&&(e.search=e.filter),t.extend({search:"none",order:"current",page:"all"},e)},Ie=function(t){for(var e=0,n=t.length;n>e;e++)if(t[e].length>0)return t[0]=t[e],t[0].length=1,t.length=1,t.context=[t.context[e]],t;return t.length=0,t},Pe=function(e,n){var i,o,r,s=[],a=e.aiDisplay,l=e.aiDisplayMaster,u=n.search,c=n.order,d=n.page;if("ssp"==Ht(e))return"removed"===u?[]:he(0,l.length);if("current"==d)for(i=e._iDisplayStart,o=e.fnDisplayEnd();o>i;i++)s.push(a[i]);else if("current"==c||"applied"==c)s="none"==u?l.slice():"applied"==u?a.slice():t.map(l,function(e,n){return-1===t.inArray(e,a)?e:null});else if("index"==c||"original"==c)for(i=0,o=e.aoData.length;o>i;i++)"none"==u?s.push(i):(r=t.inArray(i,a),(-1===r&&"removed"==u||r>=0&&"applied"==u)&&s.push(i));return s},ke=function(e,n,o){var r=function(n){var r=re(n);if(null!==r&&!o)return[r];var s=Pe(e,o);if(null!==r&&-1!==t.inArray(r,s))return[r];if(!n)return s;if("function"==typeof n)return t.map(s,function(t){var i=e.aoData[t];return n(t,i._aData,i.nTr)?t:null});var a=pe(de(e.aoData,s,"nTr"));if(n.nodeName&&-1!==t.inArray(n,a))return[n._DT_RowIndex];if("string"==typeof n&&"#"===n.charAt(0)){var l=e.aIds[n.replace(/^#/,"")];if(l!==i)return[l.idx]}return t(a).filter(n).map(function(){return this._DT_RowIndex}).toArray()};return Ee("row",n,r,e,o)};Gt("rows()",function(e,n){e===i?e="":t.isPlainObject(e)&&(n=e,e=""),n=Ae(n);var o=this.iterator("table",function(t){return ke(t,e,n)},1);return o.selector.rows=e,o.selector.opts=n,o}),Gt("rows().nodes()",function(){return this.iterator("row",function(t,e){return t.aoData[e].nTr||i},1)}),Gt("rows().data()",function(){return this.iterator(!0,"rows",function(t,e){return de(t.aoData,e,"_aData")},1)}),Jt("rows().cache()","row().cache()",function(t){return this.iterator("row",function(e,n){var i=e.aoData[n];return"search"===t?i._aFilterData:i._aSortData},1)}),Jt("rows().invalidate()","row().invalidate()",function(t){return this.iterator("row",function(e,n){L(e,n,t)})}),Jt("rows().indexes()","row().index()",function(){return this.iterator("row",function(t,e){return e},1)}),Jt("rows().ids()","row().id()",function(t){for(var e=[],n=this.context,i=0,o=n.length;o>i;i++)for(var r=0,s=this[i].length;s>r;r++){var a=n[i].rowIdFn(n[i].aoData[this[i][r]]._aData);e.push((t===!0?"#":"")+a)}return new Xt(n,e)}),Jt("rows().remove()","row().remove()",function(){var t=this;return this.iterator("row",function(e,n,o){var r,s,a,l,u,c,d=e.aoData,h=d[n];for(d.splice(n,1),r=0,s=d.length;s>r;r++)if(u=d[r],c=u.anCells,null!==u.nTr&&(u.nTr._DT_RowIndex=r),null!==c)for(a=0,l=c.length;l>a;a++)c[a]._DT_CellIndex.row=r;k(e.aiDisplayMaster,n),k(e.aiDisplay,n),k(t[o],n,!1),Ft(e);var p=e.rowIdFn(h._aData);p!==i&&delete e.aIds[p]}),this.iterator("table",function(t){for(var e=0,n=t.aoData.length;n>e;e++)t.aoData[e].idx=e}),this}),Gt("rows.add()",function(e){var n=this.iterator("table",function(t){var n,i,o,r=[];for(i=0,o=e.length;o>i;i++)n=e[i],n.nodeName&&"TR"===n.nodeName.toUpperCase()?r.push(S(t,n)[0]):r.push(w(t,n));return r},1),i=this.rows(-1);return i.pop(),t.merge(i,n),i}),Gt("row()",function(t,e){return Ie(this.rows(t,e))}),Gt("row().data()",function(t){var e=this.context;return t===i?e.length&&this.length?e[0].aoData[this[0]]._aData:i:(e[0].aoData[this[0]]._aData=t,L(e[0],this[0],"data"),this)}),Gt("row().node()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]].nTr||null:null}),Gt("row.add()",function(e){e instanceof t&&e.length&&(e=e[0]);var n=this.iterator("table",function(t){return e.nodeName&&"TR"===e.nodeName.toUpperCase()?S(t,e)[0]:w(t,e)});return this.row(n[0])});var Le=function(e,n,i,o){var r=[],s=function(n,i){if(t.isArray(n)||n instanceof t)for(var o=0,a=n.length;a>o;o++)s(n[o],i);else if(n.nodeName&&"tr"===n.nodeName.toLowerCase())r.push(n);else{var l=t("<tr><td/></tr>").addClass(i);t("td",l).addClass(i).html(n)[0].colSpan=g(e),r.push(l[0])}};s(i,o),n._details&&n._details.remove(),n._details=t(r),n._detailsShow&&n._details.insertAfter(n.nTr)},$e=function(t,e){var n=t.context;if(n.length){var o=n[0].aoData[e!==i?e:t[0]];o&&o._details&&(o._details.remove(),o._detailsShow=i,o._details=i)}},Oe=function(t,e){var n=t.context;if(n.length&&t.length){var i=n[0].aoData[t[0]];i._details&&(i._detailsShow=e,e?i._details.insertAfter(i.nTr):i._details.detach(),qe(n[0]))}},qe=function(t){var e=new Xt(t),n=".dt.DT_details",i="draw"+n,o="column-visibility"+n,r="destroy"+n,s=t.aoData;e.off(i+" "+o+" "+r),ce(s,"_details").length>0&&(e.on(i,function(n,i){t===i&&e.rows({page:"current"}).eq(0).each(function(t){var e=s[t];e._detailsShow&&e._details.insertAfter(e.nTr)})}),e.on(o,function(e,n,i,o){if(t===n)for(var r,a=g(n),l=0,u=s.length;u>l;l++)r=s[l],r._details&&r._details.children("td[colspan]").attr("colspan",a)}),e.on(r,function(n,i){if(t===i)for(var o=0,r=s.length;r>o;o++)s[o]._details&&$e(e,o)}))},ze="",je=ze+"row().child",Me=je+"()";Gt(Me,function(t,e){var n=this.context;return t===i?n.length&&this.length?n[0].aoData[this[0]]._details:i:(t===!0?this.child.show():t===!1?$e(this):n.length&&this.length&&Le(n[0],n[0].aoData[this[0]],t,e),this)}),Gt([je+".show()",Me+".show()"],function(t){return Oe(this,!0),this}),Gt([je+".hide()",Me+".hide()"],function(){return Oe(this,!1),this}),Gt([je+".remove()",Me+".remove()"],function(){return $e(this),this}),Gt(je+".isShown()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]]._detailsShow||!1:!1});var Re=/^(.+):(name|visIdx|visible)$/,Fe=function(t,e,n,i,o){for(var r=[],s=0,a=o.length;a>s;s++)r.push(T(t,o[s],e));return r},Ne=function(e,n,i){var o=e.aoColumns,r=ce(o,"sName"),s=ce(o,"nTh"),a=function(n){var a=re(n);if(""===n)return he(o.length);if(null!==a)return[a>=0?a:o.length+a];if("function"==typeof n){var l=Pe(e,i);return t.map(o,function(t,i){return n(i,Fe(e,i,0,0,l),s[i])?i:null})}var u="string"==typeof n?n.match(Re):"";if(!u)return t(s).filter(n).map(function(){return t.inArray(this,s)}).toArray();switch(u[2]){case"visIdx":case"visible":var c=parseInt(u[1],10);if(0>c){var d=t.map(o,function(t,e){return t.bVisible?e:null});return[d[d.length+c]]}return[f(e,c)];case"name":return t.map(r,function(t,e){return t===u[1]?e:null})}};return Ee("column",n,a,e,i)},He=function(e,n,o,r){var s,a,l,u,c=e.aoColumns,d=c[n],h=e.aoData;if(o===i)return d.bVisible;if(d.bVisible!==o){if(o){var f=t.inArray(!0,ce(c,"bVisible"),n+1);for(a=0,l=h.length;l>a;a++)u=h[a].nTr,s=h[a].anCells,u&&u.insertBefore(s[n],s[f]||null)}else t(ce(e.aoData,"anCells",n)).detach();d.bVisible=o,j(e,e.aoHeader),j(e,e.aoFooter),(r===i||r)&&(p(e),(e.oScroll.sX||e.oScroll.sY)&&gt(e)),Rt(e,null,"column-visibility",[e,n,o,r]),kt(e)}};Gt("columns()",function(e,n){e===i?e="":t.isPlainObject(e)&&(n=e,e=""),n=Ae(n);var o=this.iterator("table",function(t){return Ne(t,e,n)},1);return o.selector.cols=e,o.selector.opts=n,o}),Jt("columns().header()","column().header()",function(t,e){return this.iterator("column",function(t,e){return t.aoColumns[e].nTh},1)}),Jt("columns().footer()","column().footer()",function(t,e){return this.iterator("column",function(t,e){return t.aoColumns[e].nTf},1)}),Jt("columns().data()","column().data()",function(){return this.iterator("column-rows",Fe,1)}),Jt("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(t,e){return t.aoColumns[e].mData},1)}),Jt("columns().cache()","column().cache()",function(t){return this.iterator("column-rows",function(e,n,i,o,r){return de(e.aoData,r,"search"===t?"_aFilterData":"_aSortData",n)},1)}),Jt("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(t,e,n,i,o){return de(t.aoData,o,"anCells",e)},1)}),Jt("columns().visible()","column().visible()",function(t,e){return this.iterator("column",function(n,o){return t===i?n.aoColumns[o].bVisible:void He(n,o,t,e)})}),Jt("columns().indexes()","column().index()",function(t){return this.iterator("column",function(e,n){return"visible"===t?m(e,n):n},1)}),Gt("columns.adjust()",function(){return this.iterator("table",function(t){p(t)},1)}),Gt("column.index()",function(t,e){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===t||"toData"===t)return f(n,e);if("fromData"===t||"toVisible"===t)return m(n,e)}}),Gt("column()",function(t,e){return Ie(this.columns(t,e))});var We=function(e,n,o){var r,s,a,l,u,c,d,h=e.aoData,p=Pe(e,o),f=pe(de(h,p,"anCells")),m=t([].concat.apply([],f)),g=e.aoColumns.length,v=function(n){var o="function"==typeof n;if(null===n||n===i||o){for(s=[],a=0,l=p.length;l>a;a++)for(r=p[a],u=0;g>u;u++)c={row:r,column:u},o?(d=h[r],n(c,T(e,r,u),d.anCells?d.anCells[u]:null)&&s.push(c)):s.push(c);return s}return t.isPlainObject(n)?[n]:m.filter(n).map(function(t,e){return{row:e._DT_CellIndex.row,column:e._DT_CellIndex.column}}).toArray()};return Ee("cell",n,v,e,o)};Gt("cells()",function(e,n,o){if(t.isPlainObject(e)&&(e.row===i?(o=e,e=null):(o=n,n=null)),t.isPlainObject(n)&&(o=n,n=null),null===n||n===i)return this.iterator("table",function(t){return We(t,e,Ae(o))});var r,s,a,l,u,c=this.columns(n,o),d=this.rows(e,o),h=this.iterator("table",function(t,e){for(r=[],s=0,a=d[e].length;a>s;s++)for(l=0,u=c[e].length;u>l;l++)r.push({row:d[e][s],column:c[e][l]});return r},1);return t.extend(h.selector,{cols:n,rows:e,opts:o}),h}),Jt("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(t,e,n){var o=t.aoData[e].anCells;return o?o[n]:i},1)}),Gt("cells().data()",function(){return this.iterator("cell",function(t,e,n){return T(t,e,n)},1)}),Jt("cells().cache()","cell().cache()",function(t){return t="search"===t?"_aFilterData":"_aSortData",this.iterator("cell",function(e,n,i){return e.aoData[n][t][i]},1)}),Jt("cells().render()","cell().render()",function(t){return this.iterator("cell",function(e,n,i){return T(e,n,i,t)},1)}),Jt("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(t,e,n){return{row:e,column:n,columnVisible:m(t,n)}},1)}),Jt("cells().invalidate()","cell().invalidate()",function(t){return this.iterator("cell",function(e,n,i){L(e,n,t,i)})}),Gt("cell()",function(t,e,n){return Ie(this.cells(t,e,n))}),Gt("cell().data()",function(t){var e=this.context,n=this[0];return t===i?e.length&&n.length?T(e[0],n[0].row,n[0].column):i:(C(e[0],n[0].row,n[0].column,t),L(e[0],n[0].row,"data",n[0].column),this)}),Gt("order()",function(e,n){var o=this.context;return e===i?0!==o.length?o[0].aaSorting:i:("number"==typeof e?e=[[e,n]]:t.isArray(e[0])||(e=Array.prototype.slice.call(arguments)),this.iterator("table",function(t){t.aaSorting=e.slice()}))}),Gt("order.listener()",function(t,e,n){return this.iterator("table",function(i){At(i,t,e,n)})}),Gt("order.fixed()",function(e){if(!e){var n=this.context,o=n.length?n[0].aaSortingFixed:i;return t.isArray(o)?{pre:o}:o}return this.iterator("table",function(n){n.aaSortingFixed=t.extend(!0,{},e)})}),Gt(["columns().order()","column().order()"],function(e){var n=this;return this.iterator("table",function(i,o){var r=[];t.each(n[o],function(t,n){r.push([n,e])}),i.aaSorting=r})}),Gt("search()",function(e,n,o,r){var s=this.context;return e===i?0!==s.length?s[0].oPreviousSearch.sSearch:i:this.iterator("table",function(i){i.oFeatures.bFilter&&G(i,t.extend({},i.oPreviousSearch,{sSearch:e+"",bRegex:null===n?!1:n,bSmart:null===o?!0:o,bCaseInsensitive:null===r?!0:r}),1)})}),Jt("columns().search()","column().search()",function(e,n,o,r){return this.iterator("column",function(s,a){var l=s.aoPreSearchCols;return e===i?l[a].sSearch:void(s.oFeatures.bFilter&&(t.extend(l[a],{sSearch:e+"",bRegex:null===n?!1:n,bSmart:null===o?!0:o,bCaseInsensitive:null===r?!0:r}),G(s,s.oPreviousSearch,1)))})}),Gt("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Gt("state.clear()",function(){return this.iterator("table",function(t){t.fnStateSaveCallback.call(t.oInstance,t,{})})}),Gt("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Gt("state.save()",function(){return this.iterator("table",function(t){kt(t)})}),Vt.versionCheck=Vt.fnVersionCheck=function(t){for(var e,n,i=Vt.version.split("."),o=t.split("."),r=0,s=o.length;s>r;r++)if(e=parseInt(i[r],10)||0,n=parseInt(o[r],10)||0,e!==n)return e>n;return!0},Vt.isDataTable=Vt.fnIsDataTable=function(e){var n=t(e).get(0),i=!1;return t.each(Vt.settings,function(e,o){var r=o.nScrollHead?t("table",o.nScrollHead)[0]:null,s=o.nScrollFoot?t("table",o.nScrollFoot)[0]:null;(o.nTable===n||r===n||s===n)&&(i=!0)}),i},Vt.tables=Vt.fnTables=function(e){var n=!1;t.isPlainObject(e)&&(n=e.api,e=e.visible);var i=t.map(Vt.settings,function(n){return!e||e&&t(n.nTable).is(":visible")?n.nTable:void 0});return n?new Xt(i):i},Vt.util={throttle:bt,escapeRegex:tt},Vt.camelToHungarian=r,Gt("$()",function(e,n){var i=this.rows(n).nodes(),o=t(i);return t([].concat(o.filter(e).toArray(),o.find(e).toArray()))}),t.each(["on","one","off"],function(e,n){Gt(n+"()",function(){var e=Array.prototype.slice.call(arguments);e[0].match(/\.dt\b/)||(e[0]+=".dt");var i=t(this.tables().nodes());return i[n].apply(i,e),this})}),Gt("clear()",function(){return this.iterator("table",function(t){P(t)})}),Gt("settings()",function(){return new Xt(this.context,this.context)}),Gt("init()",function(){var t=this.context;return t.length?t[0].oInit:null}),Gt("data()",function(){return this.iterator("table",function(t){return ce(t.aoData,"_aData")}).flatten()}),Gt("destroy()",function(n){return n=n||!1,this.iterator("table",function(i){var o,r=i.nTableWrapper.parentNode,s=i.oClasses,a=i.nTable,l=i.nTBody,u=i.nTHead,c=i.nTFoot,d=t(a),h=t(l),p=t(i.nTableWrapper),f=t.map(i.aoData,function(t){return t.nTr});i.bDestroying=!0,Rt(i,"aoDestroyCallback","destroy",[i]),n||new Xt(i).columns().visible(!0),p.unbind(".DT").find(":not(tbody *)").unbind(".DT"),t(e).unbind(".DT-"+i.sInstance),a!=u.parentNode&&(d.children("thead").detach(),d.append(u)),c&&a!=c.parentNode&&(d.children("tfoot").detach(),d.append(c)),i.aaSorting=[],i.aaSortingFixed=[],It(i),t(f).removeClass(i.asStripeClasses.join(" ")),t("th, td",u).removeClass(s.sSortable+" "+s.sSortableAsc+" "+s.sSortableDesc+" "+s.sSortableNone),i.bJUI&&(t("th span."+s.sSortIcon+", td span."+s.sSortIcon,u).detach(),t("th, td",u).each(function(){var e=t("div."+s.sSortJUIWrapper,this);t(this).append(e.contents()),e.detach()})),h.children().detach(),h.append(f);var m=n?"remove":"detach";d[m](),p[m](),!n&&r&&(r.insertBefore(a,i.nTableReinsertBefore),d.css("width",i.sDestroyWidth).removeClass(s.sTable),o=i.asDestroyStripes.length,o&&h.children().each(function(e){t(this).addClass(i.asDestroyStripes[e%o])}));var g=t.inArray(i,Vt.settings);-1!==g&&Vt.settings.splice(g,1)})}),t.each(["column","row","cell"],function(t,e){Gt(e+"s().every()",function(t){var n=this.selector.opts,o=this;return this.iterator(e,function(r,s,a,l,u){t.call(o[e](s,"cell"===e?a:n,"cell"===e?n:i),s,a,l,u)})})}),Gt("i18n()",function(e,n,o){var r=this.context[0],s=E(e)(r.oLanguage);return s===i&&(s=n),o!==i&&t.isPlainObject(s)&&(s=s[o]!==i?s[o]:s._),s.replace("%d",o)}),Vt.version="1.10.10",Vt.settings=[],Vt.models={},Vt.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Vt.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Vt.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Vt.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(t){try{return JSON.parse((-1===t.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+t.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(t,e){try{(-1===t.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+t.sInstance+"_"+location.pathname,JSON.stringify(e))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:t.extend({},Vt.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},o(Vt.defaults),Vt.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},o(Vt.defaults.column),Vt.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:i,oAjaxData:i,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==Ht(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==Ht(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var t=this._iDisplayLength,e=this._iDisplayStart,n=e+t,i=this.aiDisplay.length,o=this.oFeatures,r=o.bPaginate;return o.bServerSide?r===!1||-1===t?e+i:Math.min(e+t,this._iRecordsDisplay):!r||n>i||-1===t?i:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Vt.ext=Yt={buttons:{},classes:{},builder:"-source-",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Vt.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Vt.version},t.extend(Yt,{afnFiltering:Yt.search,aTypes:Yt.type.detect,ofnSearch:Yt.type.search,oSort:Yt.type.order,afnSortData:Yt.order,aoFeatures:Yt.feature,oApi:Yt.internal,oStdClasses:Yt.classes,oPagination:Yt.pager}),t.extend(Vt.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var e="";e="";var n=e+"ui-state-default",i=e+"css_right ui-icon ui-icon-",o=e+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";t.extend(Vt.ext.oJUIClasses,Vt.ext.classes,{sPageButton:"fg-button ui-button "+n,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:n+" sorting_asc",sSortDesc:n+" sorting_desc",sSortable:n+" sorting",sSortableAsc:n+" sorting_asc_disabled",sSortableDesc:n+" sorting_desc_disabled",sSortableNone:n+" sorting_disabled",sSortJUIAsc:i+"triangle-1-n",sSortJUIDesc:i+"triangle-1-s",sSortJUI:i+"carat-2-n-s",sSortJUIAscAllowed:i+"carat-1-n",sSortJUIDescAllowed:i+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+n,sScrollFoot:"dataTables_scrollFoot "+n,sHeaderTH:n,sFooterTH:n,sJUIHeader:o+" ui-corner-tl ui-corner-tr",sJUIFooter:o+" ui-corner-bl ui-corner-br"})}();var Be=Vt.ext.pager;t.extend(Be,{simple:function(t,e){return["previous","next"]},full:function(t,e){return["first","previous","next","last"]},numbers:function(t,e){return[Wt(t,e)]},simple_numbers:function(t,e){return["previous",Wt(t,e),"next"]},full_numbers:function(t,e){return["first","previous",Wt(t,e),"next","last"]},_numbers:Wt,numbers_length:7}),t.extend(!0,Vt.ext.renderer,{pageButton:{_:function(e,i,o,r,s,a){var l,u,c,d=e.oClasses,h=e.oLanguage.oPaginate,p=e.oLanguage.oAria.paginate||{},f=0,m=function(n,i){var r,c,g,v,y=function(t){ht(e,t.data.action,!0)};for(r=0,c=i.length;c>r;r++)if(v=i[r],t.isArray(v)){var b=t("<"+(v.DT_el||"div")+"/>").appendTo(n);m(b,v)}else{switch(l=null,u="",v){case"ellipsis":n.append('<span class="ellipsis">&#x2026;</span>');break;case"first":l=h.sFirst,u=v+(s>0?"":" "+d.sPageButtonDisabled);break;case"previous":l=h.sPrevious,u=v+(s>0?"":" "+d.sPageButtonDisabled);break;case"next":l=h.sNext,u=v+(a-1>s?"":" "+d.sPageButtonDisabled);break;case"last":l=h.sLast,u=v+(a-1>s?"":" "+d.sPageButtonDisabled);break;default:l=v+1,u=s===v?d.sPageButtonActive:""}null!==l&&(g=t("<a>",{"class":d.sPageButton+" "+u,"aria-controls":e.sTableId,"aria-label":p[v],"data-dt-idx":f,tabindex:e.iTabIndex,id:0===o&&"string"==typeof v?e.sTableId+"_"+v:null}).html(l).appendTo(n),
jt(g,{action:v},y),f++)}};try{c=t(i).find(n.activeElement).data("dt-idx")}catch(g){}m(t(i).empty(),r),c&&t(i).find("[data-dt-idx="+c+"]").focus()}}}),t.extend(Vt.ext.type.detect,[function(t,e){var n=e.oLanguage.sDecimal;return ae(t,n)?"num"+n:null},function(t,e){if(t&&!(t instanceof Date)&&(!te.test(t)||!ee.test(t)))return null;var n=Date.parse(t);return null!==n&&!isNaN(n)||oe(t)?"date":null},function(t,e){var n=e.oLanguage.sDecimal;return ae(t,n,!0)?"num-fmt"+n:null},function(t,e){var n=e.oLanguage.sDecimal;return ue(t,n)?"html-num"+n:null},function(t,e){var n=e.oLanguage.sDecimal;return ue(t,n,!0)?"html-num-fmt"+n:null},function(t,e){return oe(t)||"string"==typeof t&&-1!==t.indexOf("<")?"html":null}]),t.extend(Vt.ext.type.search,{html:function(t){return oe(t)?t:"string"==typeof t?t.replace(Kt," ").replace(Zt,""):""},string:function(t){return oe(t)?t:"string"==typeof t?t.replace(Kt," "):t}});var Ue=function(t,e,n,i){return 0===t||t&&"-"!==t?(e&&(t=se(t,e)),t.replace&&(n&&(t=t.replace(n,"")),i&&(t=t.replace(i,""))),1*t):-(1/0)};return t.extend(Yt.type.order,{"date-pre":function(t){return Date.parse(t)||0},"html-pre":function(t){return oe(t)?"":t.replace?t.replace(/<.*?>/g,"").toLowerCase():t+""},"string-pre":function(t){return oe(t)?"":"string"==typeof t?t.toLowerCase():t.toString?t.toString():""},"string-asc":function(t,e){return e>t?-1:t>e?1:0},"string-desc":function(t,e){return e>t?1:t>e?-1:0}}),Bt(""),t.extend(!0,Vt.ext.renderer,{header:{_:function(e,n,i,o){t(e.nTable).on("order.dt.DT",function(t,r,s,a){if(e===r){var l=i.idx;n.removeClass(i.sSortingClass+" "+o.sSortAsc+" "+o.sSortDesc).addClass("asc"==a[l]?o.sSortAsc:"desc"==a[l]?o.sSortDesc:i.sSortingClass)}})},jqueryui:function(e,n,i,o){t("<div/>").addClass(o.sSortJUIWrapper).append(n.contents()).append(t("<span/>").addClass(o.sSortIcon+" "+i.sSortingClassJUI)).appendTo(n),t(e.nTable).on("order.dt.DT",function(t,r,s,a){if(e===r){var l=i.idx;n.removeClass(o.sSortAsc+" "+o.sSortDesc).addClass("asc"==a[l]?o.sSortAsc:"desc"==a[l]?o.sSortDesc:i.sSortingClass),n.find("span."+o.sSortIcon).removeClass(o.sSortJUIAsc+" "+o.sSortJUIDesc+" "+o.sSortJUI+" "+o.sSortJUIAscAllowed+" "+o.sSortJUIDescAllowed).addClass("asc"==a[l]?o.sSortJUIAsc:"desc"==a[l]?o.sSortJUIDesc:i.sSortingClassJUI)}})}}}),Vt.render={number:function(t,e,n,i,o){return{display:function(r){if("number"!=typeof r&&"string"!=typeof r)return r;var s=0>r?"-":"",a=parseFloat(r);if(isNaN(a))return r;r=Math.abs(a);var l=parseInt(r,10),u=n?e+(r-l).toFixed(n).substring(2):"";return s+(i||"")+l.toString().replace(/\B(?=(\d{3})+(?!\d))/g,t)+u+(o||"")}}},text:function(){return{display:function(t){return"string"==typeof t?t.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):t}}}},t.extend(Vt.ext.internal,{_fnExternApiFunc:Ut,_fnBuildAjax:W,_fnAjaxUpdate:B,_fnAjaxParameters:U,_fnAjaxUpdateDraw:V,_fnAjaxDataSrc:Y,_fnAddColumn:d,_fnColumnOptions:h,_fnAdjustColumnSizing:p,_fnVisibleToColumnIndex:f,_fnColumnIndexToVisible:m,_fnVisbleColumns:g,_fnGetColumns:v,_fnColumnTypes:y,_fnApplyColumnDefs:b,_fnHungarianMap:o,_fnCamelToHungarian:r,_fnLanguageCompat:s,_fnBrowserDetect:u,_fnAddData:w,_fnAddTr:S,_fnNodeToDataIndex:_,_fnNodeToColumnIndex:x,_fnGetCellData:T,_fnSetCellData:C,_fnSplitObjNotation:D,_fnGetObjectDataFn:E,_fnSetObjectDataFn:A,_fnGetDataMaster:I,_fnClearTable:P,_fnDeleteIndex:k,_fnInvalidate:L,_fnGetRowElements:$,_fnCreateTr:O,_fnBuildHead:z,_fnDrawHead:j,_fnDraw:M,_fnReDraw:R,_fnAddOptionsHtml:F,_fnDetectHeader:N,_fnGetUniqueThs:H,_fnFeatureHtmlFilter:X,_fnFilterComplete:G,_fnFilterCustom:J,_fnFilterColumn:Q,_fnFilter:K,_fnFilterCreateSearch:Z,_fnEscapeRegex:tt,_fnFilterData:et,_fnFeatureHtmlInfo:ot,_fnUpdateInfo:rt,_fnInfoMacros:st,_fnInitialise:at,_fnInitComplete:lt,_fnLengthChange:ut,_fnFeatureHtmlLength:ct,_fnFeatureHtmlPaginate:dt,_fnPageChange:ht,_fnFeatureHtmlProcessing:pt,_fnProcessingDisplay:ft,_fnFeatureHtmlTable:mt,_fnScrollDraw:gt,_fnApplyToChildren:vt,_fnCalculateColumnWidths:yt,_fnThrottle:bt,_fnConvertToWidth:wt,_fnGetWidestNode:St,_fnGetMaxLenString:_t,_fnStringToCss:xt,_fnSortFlatten:Tt,_fnSort:Ct,_fnSortAria:Dt,_fnSortListener:Et,_fnSortAttachListener:At,_fnSortingClasses:It,_fnSortData:Pt,_fnSaveState:kt,_fnLoadState:Lt,_fnSettingsFromNode:$t,_fnLog:Ot,_fnMap:qt,_fnBindAction:jt,_fnCallbackReg:Mt,_fnCallbackFire:Rt,_fnLengthOverflow:Ft,_fnRenderer:Nt,_fnDataSource:Ht,_fnRowAttributes:q,_fnCalculateEnd:function(){}}),t.fn.dataTable=Vt,Vt.$=t,t.fn.dataTableSettings=Vt.settings,t.fn.dataTableExt=Vt.ext,t.fn.DataTable=function(e){return t(this).dataTable(e).api()},t.each(Vt,function(e,n){t.fn.DataTable[e]=n}),t.fn.dataTable}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):jQuery)}(function(t){var e=function(){if(t&&t.fn&&t.fn.select2&&t.fn.select2.amd)var e=t.fn.select2.amd;var e;return function(){if(!e||!e.requirejs){e?n=e:e={};var t,n,i;!function(e){function o(t,e){return w.call(t,e)}function r(t,e){var n,i,o,r,s,a,l,u,c,d,h,p=e&&e.split("/"),f=y.map,m=f&&f["*"]||{};if(t&&"."===t.charAt(0))if(e){for(t=t.split("/"),s=t.length-1,y.nodeIdCompat&&_.test(t[s])&&(t[s]=t[s].replace(_,"")),t=p.slice(0,p.length-1).concat(t),c=0;c<t.length;c+=1)if(h=t[c],"."===h)t.splice(c,1),c-=1;else if(".."===h){if(1===c&&(".."===t[2]||".."===t[0]))break;c>0&&(t.splice(c-1,2),c-=2)}t=t.join("/")}else 0===t.indexOf("./")&&(t=t.substring(2));if((p||m)&&f){for(n=t.split("/"),c=n.length;c>0;c-=1){if(i=n.slice(0,c).join("/"),p)for(d=p.length;d>0;d-=1)if(o=f[p.slice(0,d).join("/")],o&&(o=o[i])){r=o,a=c;break}if(r)break;!l&&m&&m[i]&&(l=m[i],u=c)}!r&&l&&(r=l,a=u),r&&(n.splice(0,a,r),t=n.join("/"))}return t}function s(t,n){return function(){var i=S.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),p.apply(e,i.concat([t,n]))}}function a(t){return function(e){return r(e,t)}}function l(t){return function(e){g[t]=e}}function u(t){if(o(v,t)){var n=v[t];delete v[t],b[t]=!0,h.apply(e,n)}if(!o(g,t)&&!o(b,t))throw new Error("No "+t);return g[t]}function c(t){var e,n=t?t.indexOf("!"):-1;return n>-1&&(e=t.substring(0,n),t=t.substring(n+1,t.length)),[e,t]}function d(t){return function(){return y&&y.config&&y.config[t]||{}}}var h,p,f,m,g={},v={},y={},b={},w=Object.prototype.hasOwnProperty,S=[].slice,_=/\.js$/;f=function(t,e){var n,i=c(t),o=i[0];return t=i[1],o&&(o=r(o,e),n=u(o)),o?t=n&&n.normalize?n.normalize(t,a(e)):r(t,e):(t=r(t,e),i=c(t),o=i[0],t=i[1],o&&(n=u(o))),{f:o?o+"!"+t:t,n:t,pr:o,p:n}},m={require:function(t){return s(t)},exports:function(t){var e=g[t];return"undefined"!=typeof e?e:g[t]={}},module:function(t){return{id:t,uri:"",exports:g[t],config:d(t)}}},h=function(t,n,i,r){var a,c,d,h,p,y,w=[],S=typeof i;if(r=r||t,"undefined"===S||"function"===S){for(n=!n.length&&i.length?["require","exports","module"]:n,p=0;p<n.length;p+=1)if(h=f(n[p],r),c=h.f,"require"===c)w[p]=m.require(t);else if("exports"===c)w[p]=m.exports(t),y=!0;else if("module"===c)a=w[p]=m.module(t);else if(o(g,c)||o(v,c)||o(b,c))w[p]=u(c);else{if(!h.p)throw new Error(t+" missing "+c);h.p.load(h.n,s(r,!0),l(c),{}),w[p]=g[c]}d=i?i.apply(g[t],w):void 0,t&&(a&&a.exports!==e&&a.exports!==g[t]?g[t]=a.exports:d===e&&y||(g[t]=d))}else t&&(g[t]=i)},t=n=p=function(t,n,i,o,r){if("string"==typeof t)return m[t]?m[t](n):u(f(t,n).f);if(!t.splice){if(y=t,y.deps&&p(y.deps,y.callback),!n)return;n.splice?(t=n,n=i,i=null):t=e}return n=n||function(){},"function"==typeof i&&(i=o,o=r),o?h(e,t,n,i):setTimeout(function(){h(e,t,n,i)},4),p},p.config=function(t){return p(t)},t._defined=g,i=function(t,e,n){if("string"!=typeof t)throw new Error("See almond README: incorrect module build, no module name");e.splice||(n=e,e=[]),o(g,t)||o(v,t)||(v[t]=[t,e,n])},i.amd={jQuery:!0}}(),e.requirejs=t,e.require=n,e.define=i}}(),e.define("almond",function(){}),e.define("jquery",[],function(){var e=t||$;return null==e&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),e}),e.define("select2/utils",["jquery"],function(t){function e(t){var e=t.prototype,n=[];for(var i in e){var o=e[i];"function"==typeof o&&"constructor"!==i&&n.push(i)}return n}var n={};n.Extend=function(t,e){function n(){this.constructor=t}var i={}.hasOwnProperty;for(var o in e)i.call(e,o)&&(t[o]=e[o]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},n.Decorate=function(t,n){function i(){var e=Array.prototype.unshift,i=n.prototype.constructor.length,o=t.prototype.constructor;i>0&&(e.call(arguments,t.prototype.constructor),o=n.prototype.constructor),o.apply(this,arguments)}function o(){this.constructor=i}var r=e(n),s=e(t);n.displayName=t.displayName,i.prototype=new o;for(var a=0;a<s.length;a++){var l=s[a];i.prototype[l]=t.prototype[l]}for(var u=(function(t){var e=function(){};t in i.prototype&&(e=i.prototype[t]);var o=n.prototype[t];return function(){var t=Array.prototype.unshift;return t.call(arguments,e),o.apply(this,arguments)}}),c=0;c<r.length;c++){var d=r[c];i.prototype[d]=u(d)}return i};var i=function(){this.listeners={}};return i.prototype.on=function(t,e){this.listeners=this.listeners||{},t in this.listeners?this.listeners[t].push(e):this.listeners[t]=[e]},i.prototype.trigger=function(t){var e=Array.prototype.slice;this.listeners=this.listeners||{},t in this.listeners&&this.invoke(this.listeners[t],e.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(t,e){for(var n=0,i=t.length;i>n;n++)t[n].apply(this,e)},n.Observable=i,n.generateChars=function(t){for(var e="",n=0;t>n;n++){var i=Math.floor(36*Math.random());e+=i.toString(36)}return e},n.bind=function(t,e){return function(){t.apply(e,arguments)}},n._convertData=function(t){for(var e in t){var n=e.split("-"),i=t;if(1!==n.length){for(var o=0;o<n.length;o++){var r=n[o];r=r.substring(0,1).toLowerCase()+r.substring(1),r in i||(i[r]={}),o==n.length-1&&(i[r]=t[e]),i=i[r]}delete t[e]}}return t},n.hasScroll=function(e,n){var i=t(n),o=n.style.overflowX,r=n.style.overflowY;return o!==r||"hidden"!==r&&"visible"!==r?"scroll"===o||"scroll"===r?!0:i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth:!1},n.escapeMarkup=function(t){var e={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof t?t:String(t).replace(/[&<>"'\/\\]/g,function(t){return e[t]})},n.appendMany=function(e,n){if("1.7"===t.fn.jquery.substr(0,3)){var i=t();t.map(n,function(t){i=i.add(t)}),n=i}e.append(n)},n}),e.define("select2/results",["jquery","./utils"],function(t,e){function n(t,e,i){this.$element=t,this.data=i,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var e=t('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&e.attr("aria-multiselectable","true"),this.$results=e,e},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(e){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=t('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),o=this.options.get("translations").get(e.message);i.append(n(o(e.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(t){this.hideLoading();var e=[];if(null==t.results||0===t.results.length)return void(0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"}));t.results=this.sort(t.results);for(var n=0;n<t.results.length;n++){var i=t.results[n],o=this.option(i);e.push(o)}this.$results.append(e)},n.prototype.position=function(t,e){var n=e.find(".select2-results");n.append(t)},n.prototype.sort=function(t){var e=this.options.get("sorter");return e(t)},n.prototype.setClasses=function(){var e=this;this.data.current(function(n){var i=t.map(n,function(t){return t.id.toString()}),o=e.$results.find(".select2-results__option[aria-selected]");o.each(function(){var e=t(this),n=t.data(this,"data"),o=""+n.id;null!=n.element&&n.element.selected||null==n.element&&t.inArray(o,i)>-1?e.attr("aria-selected","true"):e.attr("aria-selected","false")});var r=o.filter("[aria-selected=true]");r.length>0?r.first().trigger("mouseenter"):o.first().trigger("mouseenter")})},n.prototype.showLoading=function(t){this.hideLoading();var e=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:e(t)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(e){var n=document.createElement("li");n.className="select2-results__option";var i={role:"treeitem","aria-selected":"false"};e.disabled&&(delete i["aria-selected"],i["aria-disabled"]="true"),null==e.id&&delete i["aria-selected"],null!=e._resultId&&(n.id=e._resultId),e.title&&(n.title=e.title),e.children&&(i.role="group",i["aria-label"]=e.text,delete i["aria-selected"]);for(var o in i){var r=i[o];n.setAttribute(o,r)}if(e.children){var s=t(n),a=document.createElement("strong");a.className="select2-results__group";t(a);this.template(e,a);for(var l=[],u=0;u<e.children.length;u++){var c=e.children[u],d=this.option(c);l.push(d)}var h=t("<ul></ul>",{"class":"select2-results__options select2-results__options--nested"});h.append(l),s.append(a),s.append(h)}else this.template(e,n);return t.data(n,"data",e),n},n.prototype.bind=function(e,n){var i=this,o=e.id+"-results";this.$results.attr("id",o),e.on("results:all",function(t){i.clear(),i.append(t.data),e.isOpen()&&i.setClasses()}),e.on("results:append",function(t){i.append(t.data),e.isOpen()&&i.setClasses()}),e.on("query",function(t){i.hideMessages(),i.showLoading(t)}),e.on("select",function(){e.isOpen()&&i.setClasses()}),e.on("unselect",function(){e.isOpen()&&i.setClasses()}),e.on("open",function(){i.$results.attr("aria-expanded","true"),i.$results.attr("aria-hidden","false"),i.setClasses(),i.ensureHighlightVisible()}),e.on("close",function(){i.$results.attr("aria-expanded","false"),i.$results.attr("aria-hidden","true"),i.$results.removeAttr("aria-activedescendant")}),e.on("results:toggle",function(){var t=i.getHighlightedResults();0!==t.length&&t.trigger("mouseup")}),e.on("results:select",function(){var t=i.getHighlightedResults();if(0!==t.length){var e=t.data("data");"true"==t.attr("aria-selected")?i.trigger("close",{}):i.trigger("select",{data:e})}}),e.on("results:previous",function(){var t=i.getHighlightedResults(),e=i.$results.find("[aria-selected]"),n=e.index(t);if(0!==n){var o=n-1;0===t.length&&(o=0);var r=e.eq(o);r.trigger("mouseenter");var s=i.$results.offset().top,a=r.offset().top,l=i.$results.scrollTop()+(a-s);0===o?i.$results.scrollTop(0):0>a-s&&i.$results.scrollTop(l)}}),e.on("results:next",function(){var t=i.getHighlightedResults(),e=i.$results.find("[aria-selected]"),n=e.index(t),o=n+1;if(!(o>=e.length)){var r=e.eq(o);r.trigger("mouseenter");var s=i.$results.offset().top+i.$results.outerHeight(!1),a=r.offset().top+r.outerHeight(!1),l=i.$results.scrollTop()+a-s;0===o?i.$results.scrollTop(0):a>s&&i.$results.scrollTop(l)}}),e.on("results:focus",function(t){t.element.addClass("select2-results__option--highlighted")}),e.on("results:message",function(t){i.displayMessage(t)}),t.fn.mousewheel&&this.$results.on("mousewheel",function(t){var e=i.$results.scrollTop(),n=i.$results.get(0).scrollHeight-i.$results.scrollTop()+t.deltaY,o=t.deltaY>0&&e-t.deltaY<=0,r=t.deltaY<0&&n<=i.$results.height();o?(i.$results.scrollTop(0),t.preventDefault(),t.stopPropagation()):r&&(i.$results.scrollTop(i.$results.get(0).scrollHeight-i.$results.height()),t.preventDefault(),t.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(e){var n=t(this),o=n.data("data");return"true"===n.attr("aria-selected")?void(i.options.get("multiple")?i.trigger("unselect",{originalEvent:e,data:o}):i.trigger("close",{})):void i.trigger("select",{originalEvent:e,data:o})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(e){var n=t(this).data("data");i.getHighlightedResults().removeClass("select2-results__option--highlighted"),i.trigger("results:focus",{data:n,element:t(this)})})},n.prototype.getHighlightedResults=function(){var t=this.$results.find(".select2-results__option--highlighted");return t},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var t=this.getHighlightedResults();if(0!==t.length){var e=this.$results.find("[aria-selected]"),n=e.index(t),i=this.$results.offset().top,o=t.offset().top,r=this.$results.scrollTop()+(o-i),s=o-i;r-=2*t.outerHeight(!1),2>=n?this.$results.scrollTop(0):(s>this.$results.outerHeight()||0>s)&&this.$results.scrollTop(r)}},n.prototype.template=function(e,n){var i=this.options.get("templateResult"),o=this.options.get("escapeMarkup"),r=i(e,n);null==r?n.style.display="none":"string"==typeof r?n.innerHTML=o(r):t(n).append(r)},n}),e.define("select2/keys",[],function(){var t={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return t}),e.define("select2/selection/base",["jquery","../utils","../keys"],function(t,e,n){function i(t,e){this.$element=t,this.options=e,i.__super__.constructor.call(this)}return e.Extend(i,e.Observable),i.prototype.render=function(){var e=t('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=this.$element.data("old-tabindex")?this._tabindex=this.$element.data("old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),e.attr("title",this.$element.attr("title")),e.attr("tabindex",this._tabindex),this.$selection=e,e},i.prototype.bind=function(t,e){var i=this,o=(t.id+"-container",t.id+"-results");this.container=t,this.$selection.on("focus",function(t){i.trigger("focus",t)}),this.$selection.on("blur",function(t){i._handleBlur(t)}),this.$selection.on("keydown",function(t){i.trigger("keypress",t),t.which===n.SPACE&&t.preventDefault()}),t.on("results:focus",function(t){i.$selection.attr("aria-activedescendant",t.data._resultId)}),t.on("selection:update",function(t){i.update(t.data)}),t.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",o),i._attachCloseHandler(t)}),t.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.focus(),i._detachCloseHandler(t)}),t.on("enable",function(){i.$selection.attr("tabindex",i._tabindex)}),t.on("disable",function(){i.$selection.attr("tabindex","-1")})},i.prototype._handleBlur=function(e){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||t.contains(n.$selection[0],document.activeElement)||n.trigger("blur",e)},1)},i.prototype._attachCloseHandler=function(e){t(document.body).on("mousedown.select2."+e.id,function(e){var n=t(e.target),i=n.closest(".select2"),o=t(".select2.select2-container--open");o.each(function(){var e=t(this);if(this!=i[0]){var n=e.data("element");n.select2("close")}})})},i.prototype._detachCloseHandler=function(e){t(document.body).off("mousedown.select2."+e.id)},i.prototype.position=function(t,e){var n=e.find(".selection");n.append(t)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(t){throw new Error("The `update` method must be defined in child classes.")},i}),e.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(t,e,n,i){function o(){o.__super__.constructor.apply(this,arguments)}return n.Extend(o,e),o.prototype.render=function(){var t=o.__super__.render.call(this);return t.addClass("select2-selection--single"),t.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),t},o.prototype.bind=function(t,e){var n=this;o.__super__.bind.apply(this,arguments);var i=t.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(t){1===t.which&&n.trigger("toggle",{originalEvent:t})}),this.$selection.on("focus",function(t){}),this.$selection.on("blur",function(t){}),t.on("selection:update",function(t){n.update(t.data)})},o.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},o.prototype.display=function(t,e){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(t,e))},o.prototype.selectionContainer=function(){return t("<span></span>")},o.prototype.update=function(t){if(0===t.length)return void this.clear();var e=t[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(e,n);n.empty().append(i),n.prop("title",e.title||e.text)},o}),e.define("select2/selection/multiple",["jquery","./base","../utils"],function(t,e,n){function i(t,e){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,e),i.prototype.render=function(){var t=i.__super__.render.call(this);return t.addClass("select2-selection--multiple"),t.html('<ul class="select2-selection__rendered"></ul>'),t},i.prototype.bind=function(e,n){var o=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(t){o.trigger("toggle",{originalEvent:t})}),this.$selection.on("click",".select2-selection__choice__remove",function(e){if(!o.options.get("disabled")){var n=t(this),i=n.parent(),r=i.data("data");o.trigger("unselect",{originalEvent:e,data:r})}})},i.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},i.prototype.display=function(t,e){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(t,e))},i.prototype.selectionContainer=function(){var e=t('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');return e},i.prototype.update=function(t){if(this.clear(),0!==t.length){for(var e=[],i=0;i<t.length;i++){var o=t[i],r=this.selectionContainer(),s=this.display(o,r);r.append(s),r.prop("title",o.title||o.text),r.data("data",o),e.push(r)}var a=this.$selection.find(".select2-selection__rendered");n.appendMany(a,e)}},i}),e.define("select2/selection/placeholder",["../utils"],function(t){function e(t,e,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),t.call(this,e,n)}return e.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},e.prototype.createPlaceholder=function(t,e){var n=this.selectionContainer();return n.html(this.display(e)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},e.prototype.update=function(t,e){var n=1==e.length&&e[0].id!=this.placeholder.id,i=e.length>1;if(i||n)return t.call(this,e);this.clear();var o=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(o)},e}),e.define("select2/selection/allowClear",["jquery","../keys"],function(t,e){function n(){}return n.prototype.bind=function(t,e,n){var i=this;t.call(this,e,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(t){i._handleClear(t)}),e.on("keypress",function(t){i._handleKeyboardClear(t,e)})},n.prototype._handleClear=function(t,e){if(!this.options.get("disabled")){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){e.stopPropagation();for(var i=n.data("data"),o=0;o<i.length;o++){var r={data:i[o]};if(this.trigger("unselect",r),r.prevented)return}this.$element.val(this.placeholder.id).trigger("change"),this.trigger("toggle",{})}}},n.prototype._handleKeyboardClear=function(t,n,i){i.isOpen()||(n.which==e.DELETE||n.which==e.BACKSPACE)&&this._handleClear(n)},n.prototype.update=function(e,n){if(e.call(this,n),!(this.$selection.find(".select2-selection__placeholder").length>0||0===n.length)){var i=t('<span class="select2-selection__clear">&times;</span>');i.data("data",n),this.$selection.find(".select2-selection__rendered").prepend(i)}},n}),e.define("select2/selection/search",["jquery","../utils","../keys"],function(t,e,n){function i(t,e,n){t.call(this,e,n)}return i.prototype.render=function(e){var n=t('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=e.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(t,e,i){var o=this;t.call(this,e,i),e.on("open",function(){o.$search.trigger("focus")}),e.on("close",function(){o.$search.val(""),o.$search.removeAttr("aria-activedescendant"),o.$search.trigger("focus")}),e.on("enable",function(){o.$search.prop("disabled",!1),o._transferTabIndex()}),e.on("disable",function(){o.$search.prop("disabled",!0)}),e.on("focus",function(t){o.$search.trigger("focus")}),e.on("results:focus",function(t){o.$search.attr("aria-activedescendant",t.id)}),this.$selection.on("focusin",".select2-search--inline",function(t){o.trigger("focus",t)}),this.$selection.on("focusout",".select2-search--inline",function(t){o._handleBlur(t)}),this.$selection.on("keydown",".select2-search--inline",function(t){t.stopPropagation(),o.trigger("keypress",t),o._keyUpPrevented=t.isDefaultPrevented();var e=t.which;if(e===n.BACKSPACE&&""===o.$search.val()){var i=o.$searchContainer.prev(".select2-selection__choice");if(i.length>0){var r=i.data("data");o.searchRemoveChoice(r),t.preventDefault()}}});var r=document.documentMode,s=r&&11>=r;this.$selection.on("input.searchcheck",".select2-search--inline",function(t){return s?void o.$selection.off("input.search input.searchcheck"):void o.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(t){if(s&&"input"===t.type)return void o.$selection.off("input.search input.searchcheck");var e=t.which;e!=n.SHIFT&&e!=n.CTRL&&e!=n.ALT&&e!=n.TAB&&o.handleSearch(t)})},i.prototype._transferTabIndex=function(t){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(t,e){this.$search.attr("placeholder",e.text)},i.prototype.update=function(t,e){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),t.call(this,e),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.focus()},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(t,e){this.trigger("unselect",{data:e}),this.$search.val(e.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var t="";if(""!==this.$search.attr("placeholder"))t=this.$selection.find(".select2-selection__rendered").innerWidth();else{var e=this.$search.val().length+1;t=.75*e+"em"}this.$search.css("width",t)},i}),e.define("select2/selection/eventRelay",["jquery"],function(t){function e(){}return e.prototype.bind=function(e,n,i){var o=this,r=["open","opening","close","closing","select","selecting","unselect","unselecting"],s=["opening","closing","selecting","unselecting"];e.call(this,n,i),n.on("*",function(e,n){if(-1!==t.inArray(e,r)){n=n||{};var i=t.Event("select2:"+e,{params:n});o.$element.trigger(i),-1!==t.inArray(e,s)&&(n.prevented=i.isDefaultPrevented())}})},e}),e.define("select2/translation",["jquery","require"],function(t,e){function n(t){this.dict=t||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(t){return this.dict[t]},n.prototype.extend=function(e){this.dict=t.extend({},e.all(),this.dict)},n._cache={},n.loadPath=function(t){if(!(t in n._cache)){var i=e(t);n._cache[t]=i}return new n(n._cache[t])},n}),e.define("select2/diacritics",[],function(){var t={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a",
"ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};return t}),e.define("select2/data/base",["../utils"],function(t){function e(t,n){e.__super__.constructor.call(this)}return t.Extend(e,t.Observable),e.prototype.current=function(t){throw new Error("The `current` method must be defined in child classes.")},e.prototype.query=function(t,e){throw new Error("The `query` method must be defined in child classes.")},e.prototype.bind=function(t,e){},e.prototype.destroy=function(){},e.prototype.generateResultId=function(e,n){var i=e.id+"-result-";return i+=t.generateChars(4),i+=null!=n.id?"-"+n.id.toString():"-"+t.generateChars(4)},e}),e.define("select2/data/select",["./base","../utils","jquery"],function(t,e,n){function i(t,e){this.$element=t,this.options=e,i.__super__.constructor.call(this)}return e.Extend(i,t),i.prototype.current=function(t){var e=[],i=this;this.$element.find(":selected").each(function(){var t=n(this),o=i.item(t);e.push(o)}),t(e)},i.prototype.select=function(t){var e=this;if(t.selected=!0,n(t.element).is("option"))return t.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var o=[];t=[t],t.push.apply(t,i);for(var r=0;r<t.length;r++){var s=t[r].id;-1===n.inArray(s,o)&&o.push(s)}e.$element.val(o),e.$element.trigger("change")});else{var i=t.id;this.$element.val(i),this.$element.trigger("change")}},i.prototype.unselect=function(t){var e=this;if(this.$element.prop("multiple"))return t.selected=!1,n(t.element).is("option")?(t.element.selected=!1,void this.$element.trigger("change")):void this.current(function(i){for(var o=[],r=0;r<i.length;r++){var s=i[r].id;s!==t.id&&-1===n.inArray(s,o)&&o.push(s)}e.$element.val(o),e.$element.trigger("change")})},i.prototype.bind=function(t,e){var n=this;this.container=t,t.on("select",function(t){n.select(t.data)}),t.on("unselect",function(t){n.unselect(t.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){n.removeData(this,"data")})},i.prototype.query=function(t,e){var i=[],o=this,r=this.$element.children();r.each(function(){var e=n(this);if(e.is("option")||e.is("optgroup")){var r=o.item(e),s=o.matches(t,r);null!==s&&i.push(s)}}),e({results:i})},i.prototype.addOptions=function(t){e.appendMany(this.$element,t)},i.prototype.option=function(t){var e;t.children?(e=document.createElement("optgroup"),e.label=t.text):(e=document.createElement("option"),void 0!==e.textContent?e.textContent=t.text:e.innerText=t.text),t.id&&(e.value=t.id),t.disabled&&(e.disabled=!0),t.selected&&(e.selected=!0),t.title&&(e.title=t.title);var i=n(e),o=this._normalizeItem(t);return o.element=e,n.data(e,"data",o),i},i.prototype.item=function(t){var e={};if(e=n.data(t[0],"data"),null!=e)return e;if(t.is("option"))e={id:t.val(),text:t.text(),disabled:t.prop("disabled"),selected:t.prop("selected"),title:t.prop("title")};else if(t.is("optgroup")){e={text:t.prop("label"),children:[],title:t.prop("title")};for(var i=t.children("option"),o=[],r=0;r<i.length;r++){var s=n(i[r]),a=this.item(s);o.push(a)}e.children=o}return e=this._normalizeItem(e),e.element=t[0],n.data(t[0],"data",e),e},i.prototype._normalizeItem=function(t){n.isPlainObject(t)||(t={id:t,text:t}),t=n.extend({},{text:""},t);var e={selected:!1,disabled:!1};return null!=t.id&&(t.id=t.id.toString()),null!=t.text&&(t.text=t.text.toString()),null==t._resultId&&t.id&&null!=this.container&&(t._resultId=this.generateResultId(this.container,t)),n.extend({},e,t)},i.prototype.matches=function(t,e){var n=this.options.get("matcher");return n(t,e)},i}),e.define("select2/data/array",["./select","../utils","jquery"],function(t,e,n){function i(t,e){var n=e.get("data")||[];i.__super__.constructor.call(this,t,e),this.addOptions(this.convertToOptions(n))}return e.Extend(i,t),i.prototype.select=function(t){var e=this.$element.find("option").filter(function(e,n){return n.value==t.id.toString()});0===e.length&&(e=this.option(t),this.addOptions(e)),i.__super__.select.call(this,t)},i.prototype.convertToOptions=function(t){function i(t){return function(){return n(this).val()==t.id}}for(var o=this,r=this.$element.find("option"),s=r.map(function(){return o.item(n(this)).id}).get(),a=[],l=0;l<t.length;l++){var u=this._normalizeItem(t[l]);if(n.inArray(u.id,s)>=0){var c=r.filter(i(u)),d=this.item(c),h=n.extend(!0,{},d,u),p=this.option(h);c.replaceWith(p)}else{var f=this.option(u);if(u.children){var m=this.convertToOptions(u.children);e.appendMany(f,m)}a.push(f)}}return a},i}),e.define("select2/data/ajax",["./array","../utils","jquery"],function(t,e,n){function i(t,e){this.ajaxOptions=this._applyDefaults(e.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,t,e)}return e.Extend(i,t),i.prototype._applyDefaults=function(t){var e={data:function(t){return n.extend({},t,{q:t.term})},transport:function(t,e,i){var o=n.ajax(t);return o.then(e),o.fail(i),o}};return n.extend({},e,t,!0)},i.prototype.processResults=function(t){return t},i.prototype.query=function(t,e){function i(){var i=r.transport(r,function(i){var r=o.processResults(i,t);o.options.get("debug")&&window.console&&console.error&&(r&&r.results&&n.isArray(r.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),e(r)},function(){});o._request=i}var o=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var r=n.extend({type:"GET"},this.ajaxOptions);"function"==typeof r.url&&(r.url=r.url.call(this.$element,t)),"function"==typeof r.data&&(r.data=r.data.call(this.$element,t)),this.ajaxOptions.delay&&""!==t.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},i}),e.define("select2/data/tags",["jquery"],function(t){function e(e,n,i){var o=i.get("tags"),r=i.get("createTag");if(void 0!==r&&(this.createTag=r),e.call(this,n,i),t.isArray(o))for(var s=0;s<o.length;s++){var a=o[s],l=this._normalizeItem(a),u=this.option(l);this.$element.append(u)}}return e.prototype.query=function(t,e,n){function i(t,r){for(var s=t.results,a=0;a<s.length;a++){var l=s[a],u=null!=l.children&&!i({results:l.children},!0),c=l.text===e.term;if(c||u)return r?!1:(t.data=s,void n(t))}if(r)return!0;var d=o.createTag(e);if(null!=d){var h=o.option(d);h.attr("data-select2-tag",!0),o.addOptions([h]),o.insertTag(s,d)}t.results=s,n(t)}var o=this;return this._removeOldTags(),null==e.term||null!=e.page?void t.call(this,e,n):void t.call(this,e,i)},e.prototype.createTag=function(e,n){var i=t.trim(n.term);return""===i?null:{id:i,text:i}},e.prototype.insertTag=function(t,e,n){e.unshift(n)},e.prototype._removeOldTags=function(e){var n=(this._lastTag,this.$element.find("option[data-select2-tag]"));n.each(function(){this.selected||t(this).remove()})},e}),e.define("select2/data/tokenizer",["jquery"],function(t){function e(t,e,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),t.call(this,e,n)}return e.prototype.bind=function(t,e,n){t.call(this,e,n),this.$search=e.dropdown.$search||e.selection.$search||n.find(".select2-search__field")},e.prototype.query=function(t,e,n){function i(t){o.trigger("select",{data:t})}var o=this;e.term=e.term||"";var r=this.tokenizer(e,this.options,i);r.term!==e.term&&(this.$search.length&&(this.$search.val(r.term),this.$search.focus()),e.term=r.term),t.call(this,e,n)},e.prototype.tokenizer=function(e,n,i,o){for(var r=i.get("tokenSeparators")||[],s=n.term,a=0,l=this.createTag||function(t){return{id:t.term,text:t.term}};a<s.length;){var u=s[a];if(-1!==t.inArray(u,r)){var c=s.substr(0,a),d=t.extend({},n,{term:c}),h=l(d);null!=h?(o(h),s=s.substr(a+1)||"",a=0):a++}else a++}return{term:s}},e}),e.define("select2/data/minimumInputLength",[],function(){function t(t,e,n){this.minimumInputLength=n.get("minimumInputLength"),t.call(this,e,n)}return t.prototype.query=function(t,e,n){return e.term=e.term||"",e.term.length<this.minimumInputLength?void this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:e.term,params:e}}):void t.call(this,e,n)},t}),e.define("select2/data/maximumInputLength",[],function(){function t(t,e,n){this.maximumInputLength=n.get("maximumInputLength"),t.call(this,e,n)}return t.prototype.query=function(t,e,n){return e.term=e.term||"",this.maximumInputLength>0&&e.term.length>this.maximumInputLength?void this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:e.term,params:e}}):void t.call(this,e,n)},t}),e.define("select2/data/maximumSelectionLength",[],function(){function t(t,e,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),t.call(this,e,n)}return t.prototype.query=function(t,e,n){var i=this;this.current(function(o){var r=null!=o?o.length:0;return i.maximumSelectionLength>0&&r>=i.maximumSelectionLength?void i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):void t.call(i,e,n)})},t}),e.define("select2/dropdown",["jquery","./utils"],function(t,e){function n(t,e){this.$element=t,this.options=e,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var e=t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir",this.options.get("dir")),this.$dropdown=e,e},n.prototype.bind=function(){},n.prototype.position=function(t,e){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),e.define("select2/dropdown/search",["jquery","../utils"],function(t,e){function n(){}return n.prototype.render=function(e){var n=e.call(this),i=t('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(e,n,i){var o=this;e.call(this,n,i),this.$search.on("keydown",function(t){o.trigger("keypress",t),o._keyUpPrevented=t.isDefaultPrevented()}),this.$search.on("input",function(e){t(this).off("keyup")}),this.$search.on("keyup input",function(t){o.handleSearch(t)}),n.on("open",function(){o.$search.attr("tabindex",0),o.$search.focus(),window.setTimeout(function(){o.$search.focus()},0)}),n.on("close",function(){o.$search.attr("tabindex",-1),o.$search.val("")}),n.on("results:all",function(t){if(null==t.query.term||""===t.query.term){var e=o.showSearch(t);e?o.$searchContainer.removeClass("select2-search--hide"):o.$searchContainer.addClass("select2-search--hide")}})},n.prototype.handleSearch=function(t){if(!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},n.prototype.showSearch=function(t,e){return!0},n}),e.define("select2/dropdown/hidePlaceholder",[],function(){function t(t,e,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),t.call(this,e,n,i)}return t.prototype.append=function(t,e){e.results=this.removePlaceholder(e.results),t.call(this,e)},t.prototype.normalizePlaceholder=function(t,e){return"string"==typeof e&&(e={id:"",text:e}),e},t.prototype.removePlaceholder=function(t,e){for(var n=e.slice(0),i=e.length-1;i>=0;i--){var o=e[i];this.placeholder.id===o.id&&n.splice(i,1)}return n},t}),e.define("select2/dropdown/infiniteScroll",["jquery"],function(t){function e(t,e,n,i){this.lastParams={},t.call(this,e,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return e.prototype.append=function(t,e){this.$loadingMore.remove(),this.loading=!1,t.call(this,e),this.showLoadingMore(e)&&this.$results.append(this.$loadingMore)},e.prototype.bind=function(e,n,i){var o=this;e.call(this,n,i),n.on("query",function(t){o.lastParams=t,o.loading=!0}),n.on("query:append",function(t){o.lastParams=t,o.loading=!0}),this.$results.on("scroll",function(){var e=t.contains(document.documentElement,o.$loadingMore[0]);if(!o.loading&&e){var n=o.$results.offset().top+o.$results.outerHeight(!1),i=o.$loadingMore.offset().top+o.$loadingMore.outerHeight(!1);n+50>=i&&o.loadMore()}})},e.prototype.loadMore=function(){this.loading=!0;var e=t.extend({},{page:1},this.lastParams);e.page++,this.trigger("query:append",e)},e.prototype.showLoadingMore=function(t,e){return e.pagination&&e.pagination.more},e.prototype.createLoadingMore=function(){var e=t('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return e.html(n(this.lastParams)),e},e}),e.define("select2/dropdown/attachBody",["jquery","../utils"],function(t,e){function n(e,n,i){this.$dropdownParent=i.get("dropdownParent")||t(document.body),e.call(this,n,i)}return n.prototype.bind=function(t,e,n){var i=this,o=!1;t.call(this,e,n),e.on("open",function(){i._showDropdown(),i._attachPositioningHandler(e),o||(o=!0,e.on("results:all",function(){i._positionDropdown(),i._resizeDropdown()}),e.on("results:append",function(){i._positionDropdown(),i._resizeDropdown()}))}),e.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(e)}),this.$dropdownContainer.on("mousedown",function(t){t.stopPropagation()})},n.prototype.destroy=function(t){t.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(t,e,n){e.attr("class",n.attr("class")),e.removeClass("select2"),e.addClass("select2-container--open"),e.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(e){var n=t("<span></span>"),i=e.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(t){this.$dropdownContainer.detach()},n.prototype._attachPositioningHandler=function(n,i){var o=this,r="scroll.select2."+i.id,s="resize.select2."+i.id,a="orientationchange.select2."+i.id,l=this.$container.parents().filter(e.hasScroll);l.each(function(){t(this).data("select2-scroll-position",{x:t(this).scrollLeft(),y:t(this).scrollTop()})}),l.on(r,function(e){var n=t(this).data("select2-scroll-position");t(this).scrollTop(n.y)}),t(window).on(r+" "+s+" "+a,function(t){o._positionDropdown(),o._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var o="scroll.select2."+i.id,r="resize.select2."+i.id,s="orientationchange.select2."+i.id,a=this.$container.parents().filter(e.hasScroll);a.off(o),t(window).off(o+" "+r+" "+s)},n.prototype._positionDropdown=function(){var e=t(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),o=null,r=(this.$container.position(),this.$container.offset());r.bottom=r.top+this.$container.outerHeight(!1);var s={height:this.$container.outerHeight(!1)};s.top=r.top,s.bottom=r.top+s.height;var a={height:this.$dropdown.outerHeight(!1)},l={top:e.scrollTop(),bottom:e.scrollTop()+e.height()},u=l.top<r.top-a.height,c=l.bottom>r.bottom+a.height,d={left:r.left,top:s.bottom};if("static"!==this.$dropdownParent[0].style.position){var h=this.$dropdownParent.offset();d.top-=h.top,d.left-=h.left}n||i||(o="below"),c||!u||n?!u&&c&&n&&(o="below"):o="above",("above"==o||n&&"below"!==o)&&(d.top=s.top-a.height),null!=o&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+o),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+o)),this.$dropdownContainer.css(d)},n.prototype._resizeDropdown=function(){var t={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(t.minWidth=t.width,t.width="auto"),this.$dropdown.css(t)},n.prototype._showDropdown=function(t){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),e.define("select2/dropdown/minimumResultsForSearch",[],function(){function t(e){for(var n=0,i=0;i<e.length;i++){var o=e[i];o.children?n+=t(o.children):n++}return n}function e(t,e,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),t.call(this,e,n,i)}return e.prototype.showSearch=function(e,n){return t(n.data.results)<this.minimumResultsForSearch?!1:e.call(this,n)},e}),e.define("select2/dropdown/selectOnClose",[],function(){function t(){}return t.prototype.bind=function(t,e,n){var i=this;t.call(this,e,n),e.on("close",function(){i._handleSelectOnClose()})},t.prototype._handleSelectOnClose=function(){var t=this.getHighlightedResults();if(!(t.length<1)){var e=t.data("data");null!=e.element&&e.element.selected||null==e.element&&e.selected||this.trigger("select",{data:e})}},t}),e.define("select2/dropdown/closeOnSelect",[],function(){function t(){}return t.prototype.bind=function(t,e,n){var i=this;t.call(this,e,n),e.on("select",function(t){i._selectTriggered(t)}),e.on("unselect",function(t){i._selectTriggered(t)})},t.prototype._selectTriggered=function(t,e){var n=e.originalEvent;n&&n.ctrlKey||this.trigger("close",{})},t}),e.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(t){var e=t.input.length-t.maximum,n="Please delete "+e+" character";return 1!=e&&(n+="s"),n},inputTooShort:function(t){var e=t.minimum-t.input.length,n="Please enter "+e+" or more characters";return n},loadingMore:function(){return"Loading more results…"},maximumSelected:function(t){var e="You can only select "+t.maximum+" item";return 1!=t.maximum&&(e+="s"),e},noResults:function(){return"No results found"},searching:function(){return"Searching…"}}}),e.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(t,e,n,i,o,r,s,a,l,u,c,d,h,p,f,m,g,v,y,b,w,S,_,x,T,C,D,E,A){function I(){this.reset()}I.prototype.apply=function(d){if(d=t.extend({},this.defaults,d),null==d.dataAdapter){if(null!=d.ajax?d.dataAdapter=f:null!=d.data?d.dataAdapter=p:d.dataAdapter=h,d.minimumInputLength>0&&(d.dataAdapter=u.Decorate(d.dataAdapter,v)),d.maximumInputLength>0&&(d.dataAdapter=u.Decorate(d.dataAdapter,y)),d.maximumSelectionLength>0&&(d.dataAdapter=u.Decorate(d.dataAdapter,b)),d.tags&&(d.dataAdapter=u.Decorate(d.dataAdapter,m)),(null!=d.tokenSeparators||null!=d.tokenizer)&&(d.dataAdapter=u.Decorate(d.dataAdapter,g)),null!=d.query){var A=e(d.amdBase+"compat/query");d.dataAdapter=u.Decorate(d.dataAdapter,A)}if(null!=d.initSelection){var I=e(d.amdBase+"compat/initSelection");d.dataAdapter=u.Decorate(d.dataAdapter,I)}}if(null==d.resultsAdapter&&(d.resultsAdapter=n,null!=d.ajax&&(d.resultsAdapter=u.Decorate(d.resultsAdapter,x)),null!=d.placeholder&&(d.resultsAdapter=u.Decorate(d.resultsAdapter,_)),d.selectOnClose&&(d.resultsAdapter=u.Decorate(d.resultsAdapter,D))),null==d.dropdownAdapter){if(d.multiple)d.dropdownAdapter=w;else{var P=u.Decorate(w,S);d.dropdownAdapter=P}if(0!==d.minimumResultsForSearch&&(d.dropdownAdapter=u.Decorate(d.dropdownAdapter,C)),d.closeOnSelect&&(d.dropdownAdapter=u.Decorate(d.dropdownAdapter,E)),null!=d.dropdownCssClass||null!=d.dropdownCss||null!=d.adaptDropdownCssClass){var k=e(d.amdBase+"compat/dropdownCss");d.dropdownAdapter=u.Decorate(d.dropdownAdapter,k)}d.dropdownAdapter=u.Decorate(d.dropdownAdapter,T)}if(null==d.selectionAdapter){if(d.multiple?d.selectionAdapter=o:d.selectionAdapter=i,null!=d.placeholder&&(d.selectionAdapter=u.Decorate(d.selectionAdapter,r)),d.allowClear&&(d.selectionAdapter=u.Decorate(d.selectionAdapter,s)),d.multiple&&(d.selectionAdapter=u.Decorate(d.selectionAdapter,a)),null!=d.containerCssClass||null!=d.containerCss||null!=d.adaptContainerCssClass){var L=e(d.amdBase+"compat/containerCss");d.selectionAdapter=u.Decorate(d.selectionAdapter,L)}d.selectionAdapter=u.Decorate(d.selectionAdapter,l)}if("string"==typeof d.language)if(d.language.indexOf("-")>0){var $=d.language.split("-"),O=$[0];d.language=[d.language,O]}else d.language=[d.language];if(t.isArray(d.language)){var q=new c;d.language.push("en");for(var z=d.language,j=0;j<z.length;j++){var M=z[j],R={};try{R=c.loadPath(M)}catch(F){try{M=this.defaults.amdLanguageBase+M,R=c.loadPath(M)}catch(N){d.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+M+'" could not be automatically loaded. A fallback will be used instead.');continue}}q.extend(R)}d.translations=q}else{var H=c.loadPath(this.defaults.amdLanguageBase+"en"),W=new c(d.language);W.extend(H),d.translations=W}return d},I.prototype.reset=function(){function e(t){function e(t){return d[t]||t}return t.replace(/[^\u0000-\u007E]/g,e)}function n(i,o){if(""===t.trim(i.term))return o;if(o.children&&o.children.length>0){for(var r=t.extend(!0,{},o),s=o.children.length-1;s>=0;s--){var a=o.children[s],l=n(i,a);null==l&&r.children.splice(s,1)}return r.children.length>0?r:n(i,r)}var u=e(o.text).toUpperCase(),c=e(i.term).toUpperCase();return u.indexOf(c)>-1?o:null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:u.escapeMarkup,language:A,matcher:n,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(t){return t},templateResult:function(t){return t.text},templateSelection:function(t){return t.text},theme:"default",width:"resolve"}},I.prototype.set=function(e,n){var i=t.camelCase(e),o={};o[i]=n;var r=u._convertData(o);t.extend(this.defaults,r)};var P=new I;return P}),e.define("select2/options",["require","jquery","./defaults","./utils"],function(t,e,n,i){function o(e,o){if(this.options=e,null!=o&&this.fromElement(o),this.options=n.apply(this.options),o&&o.is("input")){var r=t(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,r)}}return o.prototype.fromElement=function(t){var n=["select2"];null==this.options.multiple&&(this.options.multiple=t.prop("multiple")),null==this.options.disabled&&(this.options.disabled=t.prop("disabled")),null==this.options.language&&(t.prop("lang")?this.options.language=t.prop("lang").toLowerCase():t.closest("[lang]").prop("lang")&&(this.options.language=t.closest("[lang]").prop("lang"))),null==this.options.dir&&(t.prop("dir")?this.options.dir=t.prop("dir"):t.closest("[dir]").prop("dir")?this.options.dir=t.closest("[dir]").prop("dir"):this.options.dir="ltr"),t.prop("disabled",this.options.disabled),t.prop("multiple",this.options.multiple),t.data("select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),t.data("data",t.data("select2Tags")),t.data("tags",!0)),t.data("ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),t.attr("ajax--url",t.data("ajaxUrl")),t.data("ajax--url",t.data("ajaxUrl")));var o={};o=e.fn.jquery&&"1."==e.fn.jquery.substr(0,2)&&t[0].dataset?e.extend(!0,{},t[0].dataset,t.data()):t.data();var r=e.extend(!0,{},o);r=i._convertData(r);for(var s in r)e.inArray(s,n)>-1||(e.isPlainObject(this.options[s])?e.extend(this.options[s],r[s]):this.options[s]=r[s]);return this},o.prototype.get=function(t){return this.options[t]},o.prototype.set=function(t,e){this.options[t]=e},o}),e.define("select2/core",["jquery","./options","./utils","./keys"],function(t,e,n,i){var o=function(t,n){null!=t.data("select2")&&t.data("select2").destroy(),this.$element=t,this.id=this._generateId(t),n=n||{},this.options=new e(n,t),o.__super__.constructor.call(this);var i=t.attr("tabindex")||0;t.data("old-tabindex",i),t.attr("tabindex","-1");var r=this.options.get("dataAdapter");this.dataAdapter=new r(t,this.options);var s=this.render();this._placeContainer(s);var a=this.options.get("selectionAdapter");this.selection=new a(t,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,s);var l=this.options.get("dropdownAdapter");this.dropdown=new l(t,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,s);var u=this.options.get("resultsAdapter");this.results=new u(t,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var c=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(t){c.trigger("selection:update",{data:t})}),t.addClass("select2-hidden-accessible"),t.attr("aria-hidden","true"),this._syncAttributes(),t.data("select2",this)};return n.Extend(o,n.Observable),o.prototype._generateId=function(t){var e="";return e=null!=t.attr("id")?t.attr("id"):null!=t.attr("name")?t.attr("name")+"-"+n.generateChars(2):n.generateChars(4),e="select2-"+e},o.prototype._placeContainer=function(t){t.insertAfter(this.$element);var e=this._resolveWidth(this.$element,this.options.get("width"));null!=e&&t.css("width",e)},o.prototype._resolveWidth=function(t,e){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==e){var i=this._resolveWidth(t,"style");return null!=i?i:this._resolveWidth(t,"element")}if("element"==e){var o=t.outerWidth(!1);return 0>=o?"auto":o+"px"}if("style"==e){var r=t.attr("style");if("string"!=typeof r)return null;for(var s=r.split(";"),a=0,l=s.length;l>a;a+=1){var u=s[a].replace(/\s/g,""),c=u.match(n);if(null!==c&&c.length>=1)return c[1]}return null}return e},o.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},o.prototype._registerDomEvents=function(){var e=this;this.$element.on("change.select2",function(){e.dataAdapter.current(function(t){e.trigger("selection:update",{data:t})})}),this._sync=n.bind(this._syncAttributes,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._sync);var i=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=i?(this._observer=new i(function(n){t.each(n,e._sync)}),this._observer.observe(this.$element[0],{attributes:!0,subtree:!1})):this.$element[0].addEventListener&&this.$element[0].addEventListener("DOMAttrModified",e._sync,!1)},o.prototype._registerDataEvents=function(){var t=this;this.dataAdapter.on("*",function(e,n){t.trigger(e,n)})},o.prototype._registerSelectionEvents=function(){var e=this,n=["toggle","focus"];this.selection.on("toggle",function(){e.toggleDropdown()}),this.selection.on("focus",function(t){e.focus(t)}),this.selection.on("*",function(i,o){-1===t.inArray(i,n)&&e.trigger(i,o)})},o.prototype._registerDropdownEvents=function(){var t=this;this.dropdown.on("*",function(e,n){t.trigger(e,n)})},o.prototype._registerResultsEvents=function(){var t=this;this.results.on("*",function(e,n){t.trigger(e,n)})},o.prototype._registerEvents=function(){var t=this;this.on("open",function(){t.$container.addClass("select2-container--open")}),this.on("close",function(){t.$container.removeClass("select2-container--open")}),this.on("enable",function(){t.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){t.$container.addClass("select2-container--disabled")}),this.on("blur",function(){t.$container.removeClass("select2-container--focus")}),this.on("query",function(e){t.isOpen()||t.trigger("open",{}),this.dataAdapter.query(e,function(n){t.trigger("results:all",{data:n,query:e})})}),this.on("query:append",function(e){this.dataAdapter.query(e,function(n){t.trigger("results:append",{data:n,query:e})})}),this.on("keypress",function(e){var n=e.which;t.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&e.altKey?(t.close(),e.preventDefault()):n===i.ENTER?(t.trigger("results:select",{}),e.preventDefault()):n===i.SPACE&&e.ctrlKey?(t.trigger("results:toggle",{}),e.preventDefault()):n===i.UP?(t.trigger("results:previous",{}),e.preventDefault()):n===i.DOWN&&(t.trigger("results:next",{}),e.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&e.altKey)&&(t.open(),
e.preventDefault())})},o.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},o.prototype.trigger=function(t,e){var n=o.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(void 0===e&&(e={}),t in i){var r=i[t],s={prevented:!1,name:t,args:e};if(n.call(this,r,s),s.prevented)return void(e.prevented=!0)}n.call(this,t,e)},o.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},o.prototype.open=function(){this.isOpen()||this.trigger("query",{})},o.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},o.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},o.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},o.prototype.focus=function(t){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},o.prototype.enable=function(t){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),(null==t||0===t.length)&&(t=[!0]);var e=!t[0];this.$element.prop("disabled",e)},o.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t=[];return this.dataAdapter.current(function(e){t=e}),t},o.prototype.val=function(e){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==e||0===e.length)return this.$element.val();var n=e[0];t.isArray(n)&&(n=t.map(n,function(t){return t.toString()})),this.$element.val(n).trigger("change")},o.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._sync),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&this.$element[0].removeEventListener("DOMAttrModified",this._sync,!1),this._sync=null,this.$element.off(".select2"),this.$element.attr("tabindex",this.$element.data("old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},o.prototype.render=function(){var e=t('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir",this.options.get("dir")),this.$container=e,this.$container.addClass("select2-container--"+this.options.get("theme")),e.data("element",this.$element),e},o}),e.define("jquery-mousewheel",["jquery"],function(t){return t}),e.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(t,e,n,i){if(null==t.fn.select2){var o=["open","close","destroy"];t.fn.select2=function(e){if(e=e||{},"object"==typeof e)return this.each(function(){var i=t.extend(!0,{},e);new n(t(this),i)}),this;if("string"==typeof e){var i;return this.each(function(){var n=t(this).data("select2");null==n&&window.console&&console.error&&console.error("The select2('"+e+"') method was called on an element that is not using Select2.");var o=Array.prototype.slice.call(arguments,1);i=n[e].apply(n,o)}),t.inArray(e,o)>-1?this:i}throw new Error("Invalid arguments for Select2: "+e)}}return null==t.fn.select2.defaults&&(t.fn.select2.defaults=i),n}),{define:e.define,require:e.require}}(),n=e.require("jquery.select2");return t.fn.select2.amd=e,n}),function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var t=jQuery.fn.select2.amd;return t.define("select2/i18n/ru",[],function(){function t(t,e,n,i){return 5>t%10&&t%10>0&&5>t%100||t%100>20?t%10>1?n:e:i}return{errorLoading:function(){return"Невозможно загрузить результаты"},inputTooLong:function(e){var n=e.input.length-e.maximum,i="Пожалуйста, введите на "+n+" символ";return i+=t(n,"","a","ов"),i+=" меньше"},inputTooShort:function(e){var n=e.minimum-e.input.length,i="Пожалуйста, введите еще хотя бы "+n+" символ";return i+=t(n,"","a","ов")},loadingMore:function(){return"Загрузка данных…"},maximumSelected:function(e){var n="Вы можете выбрать не более "+e.maximum+" элемент";return n+=t(e.maximum,"","a","ов")},noResults:function(){return"Совпадений не найдено"},searching:function(){return"Поиск…"}}}),{define:t.define,require:t.require}}(),function(t){function e(e,n,i){var o=t.Event(n);return e.trigger(o,i),o.result!==!1}t(document).on("click","[data-trigger='modal'], [data-trigger='nifty']",function(){var e=t(this).data("target");t(e).nifty("show")}),t(document).on("click",".md-overlay",function(){t(".nifty-modal.md-show").nifty("hide")}),t(document).on("click",".nifty-modal.md-show .md-close",function(){t(this).closest(".nifty-modal.md-show").nifty("hide")}),t.fn.extend({nifty:function(n){var i=this,o="transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",r=function(n){var r=!1;if(e(t(i),"show.nifty.modal")){t(i).one(o,function(e){r||(r=!0,e.preventDefault(),e.stopPropagation(),t(i).trigger("shown.nifty.modal"))});var s=Math.floor(t(i).width()/2),a=Math.floor(t(i).height()/2);t(".nifty-modal").css("transform","translateX(-"+s+"px) translateY(-"+a+"px)"),t(i).addClass("md-show")}},s=function(){var n=!1;e(t(i),"hide.nifty.modal")&&(t(i).one(o,function(e){n||(n=!0,e.preventDefault(),e.stopPropagation(),t(i).trigger("hidden.nifty.modal"))}),t(i).removeClass("md-show"))};return"show"==n?r():"hide"==n&&s(),this}})}(jQuery),function(){var t;t=function(){function t(t,e){var n,i;if(this.options={target:"instafeed",get:"popular",resolution:"thumbnail",sortBy:"none",links:!0,mock:!1,useHttp:!1},"object"==typeof t)for(n in t)i=t[n],this.options[n]=i;this.context=null!=e?e:this,this.unique=this._genKey()}return t.prototype.hasNext=function(){return"string"==typeof this.context.nextUrl&&this.context.nextUrl.length>0},t.prototype.next=function(){return this.hasNext()?this.run(this.context.nextUrl):!1},t.prototype.run=function(e){var n,i,o;if("string"!=typeof this.options.clientId&&"string"!=typeof this.options.accessToken)throw new Error("Missing clientId or accessToken.");if("string"!=typeof this.options.accessToken&&"string"!=typeof this.options.clientId)throw new Error("Missing clientId or accessToken.");return null!=this.options.before&&"function"==typeof this.options.before&&this.options.before.call(this),"undefined"!=typeof document&&null!==document&&(o=document.createElement("script"),o.id="instafeed-fetcher",o.src=e||this._buildUrl(),n=document.getElementsByTagName("head"),n[0].appendChild(o),i="instafeedCache"+this.unique,window[i]=new t(this.options,this),window[i].unique=this.unique),!0},t.prototype.parse=function(t){var e,n,i,o,r,s,a,l,u,c,d,h,p,f,m,g,v,y,b,w,S,_,x,T,C,D,E,A,I,P,k,L,$;if("object"!=typeof t){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"Invalid JSON data"),!1;throw new Error("Invalid JSON response")}if(200!==t.meta.code){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,t.meta.error_message),!1;throw new Error("Error from Instagram: "+t.meta.error_message)}if(0===t.data.length){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"No images were returned from Instagram"),!1;throw new Error("No images were returned from Instagram")}if(null!=this.options.success&&"function"==typeof this.options.success&&this.options.success.call(this,t),this.context.nextUrl="",null!=t.pagination&&(this.context.nextUrl=t.pagination.next_url),"none"!==this.options.sortBy)switch(k="random"===this.options.sortBy?["","random"]:this.options.sortBy.split("-"),P="least"===k[0]?!0:!1,k[1]){case"random":t.data.sort(function(){return.5-Math.random()});break;case"recent":t.data=this._sortBy(t.data,"created_time",P);break;case"liked":t.data=this._sortBy(t.data,"likes.count",P);break;case"commented":t.data=this._sortBy(t.data,"comments.count",P);break;default:throw new Error("Invalid option for sortBy: '"+this.options.sortBy+"'.")}if("undefined"!=typeof document&&null!==document&&this.options.mock===!1){if(g=t.data,I=parseInt(this.options.limit,10),null!=this.options.limit&&g.length>I&&(g=g.slice(0,I)),a=document.createDocumentFragment(),null!=this.options.filter&&"function"==typeof this.options.filter&&(g=this._filter(g,this.options.filter)),null!=this.options.template&&"string"==typeof this.options.template){for(u="",f="",w="",$=document.createElement("div"),d=0,C=g.length;C>d;d++){if(h=g[d],p=h.images[this.options.resolution],"object"!=typeof p)throw s="No image found for resolution: "+this.options.resolution+".",new Error(s);S=p.width,y=p.height,b="square",S>y&&(b="landscape"),y>S&&(b="portrait"),m=p.url,c=window.location.protocol.indexOf("http")>=0,c&&!this.options.useHttp&&(m=m.replace(/https?:\/\//,"//")),f=this._makeTemplate(this.options.template,{model:h,id:h.id,link:h.link,type:h.type,image:m,width:S,height:y,orientation:b,caption:this._getObjectProperty(h,"caption.text"),likes:h.likes.count,comments:h.comments.count,location:this._getObjectProperty(h,"location.name")}),u+=f}for($.innerHTML=u,o=[],i=0,n=$.childNodes.length;n>i;)o.push($.childNodes[i]),i+=1;for(x=0,D=o.length;D>x;x++)A=o[x],a.appendChild(A)}else for(T=0,E=g.length;E>T;T++){if(h=g[T],v=document.createElement("img"),p=h.images[this.options.resolution],"object"!=typeof p)throw s="No image found for resolution: "+this.options.resolution+".",new Error(s);m=p.url,c=window.location.protocol.indexOf("http")>=0,c&&!this.options.useHttp&&(m=m.replace(/https?:\/\//,"//")),v.src=m,this.options.links===!0?(e=document.createElement("a"),e.href=h.link,e.appendChild(v),a.appendChild(e)):a.appendChild(v)}if(L=this.options.target,"string"==typeof L&&(L=document.getElementById(L)),null==L)throw s='No element with id="'+this.options.target+'" on page.',new Error(s);L.appendChild(a),l=document.getElementsByTagName("head")[0],l.removeChild(document.getElementById("instafeed-fetcher")),_="instafeedCache"+this.unique,window[_]=void 0;try{delete window[_]}catch(O){r=O}}return null!=this.options.after&&"function"==typeof this.options.after&&this.options.after.call(this),!0},t.prototype._buildUrl=function(){var t,e,n;switch(t="https://api.instagram.com/v1",this.options.get){case"popular":e="media/popular";break;case"tagged":if(!this.options.tagName)throw new Error("No tag name specified. Use the 'tagName' option.");e="tags/"+this.options.tagName+"/media/recent";break;case"location":if(!this.options.locationId)throw new Error("No location specified. Use the 'locationId' option.");e="locations/"+this.options.locationId+"/media/recent";break;case"user":if(!this.options.userId)throw new Error("No user specified. Use the 'userId' option.");e="users/"+this.options.userId+"/media/recent";break;default:throw new Error("Invalid option for get: '"+this.options.get+"'.")}return n=t+"/"+e,n+=null!=this.options.accessToken?"?access_token="+this.options.accessToken:"?client_id="+this.options.clientId,null!=this.options.limit&&(n+="&count="+this.options.limit),n+="&callback=instafeedCache"+this.unique+".parse"},t.prototype._genKey=function(){var t;return t=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)},""+t()+t()+t()+t()},t.prototype._makeTemplate=function(t,e){var n,i,o,r,s;for(i=/(?:\{{2})([\w\[\]\.]+)(?:\}{2})/,n=t;i.test(n);)r=n.match(i)[1],s=null!=(o=this._getObjectProperty(e,r))?o:"",n=n.replace(i,function(){return""+s});return n},t.prototype._getObjectProperty=function(t,e){var n,i;for(e=e.replace(/\[(\w+)\]/g,".$1"),i=e.split(".");i.length;){if(n=i.shift(),!(null!=t&&n in t))return null;t=t[n]}return t},t.prototype._sortBy=function(t,e,n){var i;return i=function(t,i){var o,r;return o=this._getObjectProperty(t,e),r=this._getObjectProperty(i,e),n?o>r?1:-1:r>o?1:-1},t.sort(i.bind(this)),t},t.prototype._filter=function(t,e){var n,i,o,r,s;for(n=[],i=function(t){return e(t)?n.push(t):void 0},o=0,s=t.length;s>o;o++)r=t[o],i(r);return n},t}(),function(t,e){return"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():t.Instafeed=e()}(this,function(){return t})}.call(this),!function(t,e,n){"use strict";!function i(t,e,n){function o(s,a){if(!e[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=e[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return o(n?n:e)},c,c.exports,i,t,e,n)}return e[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(i,o,r){var s=function(t){return t&&t.__esModule?t:{"default":t}};Object.defineProperty(r,"__esModule",{value:!0});var a,l,u,c,d=i("./modules/handle-dom"),h=i("./modules/utils"),p=i("./modules/handle-swal-dom"),f=i("./modules/handle-click"),m=i("./modules/handle-key"),g=s(m),v=i("./modules/default-params"),y=s(v),b=i("./modules/set-params"),w=s(b);r["default"]=u=c=function(){function i(t){var e=o;return e[t]===n?y["default"][t]:e[t]}var o=arguments[0];if(d.addClass(e.body,"stop-scrolling"),p.resetInput(),o===n)return h.logStr("SweetAlert expects at least 1 attribute!"),!1;var r=h.extend({},y["default"]);switch(typeof o){case"string":r.title=o,r.text=arguments[1]||"",r.type=arguments[2]||"";break;case"object":if(o.title===n)return h.logStr('Missing "title" argument!'),!1;r.title=o.title;for(var s in y["default"])r[s]=i(s);r.confirmButtonText=r.showCancelButton?"Confirm":y["default"].confirmButtonText,r.confirmButtonText=i("confirmButtonText"),r.doneFunction=arguments[1]||null;break;default:return h.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof o),!1}w["default"](r),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var u=p.getModal(),m=u.querySelectorAll("button"),v=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],b=function(t){return f.handleButton(t,r,u)},S=0;S<m.length;S++)for(var _=0;_<v.length;_++){var x=v[_];m[S][x]=b}p.getOverlay().onclick=b,a=t.onkeydown;var T=function(t){return g["default"](t,r,u)};t.onkeydown=T,t.onfocus=function(){setTimeout(function(){l!==n&&(l.focus(),l=n)},0)},c.enableButtons()},u.setDefaults=c.setDefaults=function(t){if(!t)throw new Error("userParams is required");if("object"!=typeof t)throw new Error("userParams has to be a object");h.extend(y["default"],t)},u.close=c.close=function(){var i=p.getModal();d.fadeOut(p.getOverlay(),5),d.fadeOut(i,5),d.removeClass(i,"showSweetAlert"),d.addClass(i,"hideSweetAlert"),d.removeClass(i,"visible");var o=i.querySelector(".sa-icon.sa-success");d.removeClass(o,"animate"),d.removeClass(o.querySelector(".sa-tip"),"animateSuccessTip"),d.removeClass(o.querySelector(".sa-long"),"animateSuccessLong");var r=i.querySelector(".sa-icon.sa-error");d.removeClass(r,"animateErrorIcon"),d.removeClass(r.querySelector(".sa-x-mark"),"animateXMark");var s=i.querySelector(".sa-icon.sa-warning");return d.removeClass(s,"pulseWarning"),d.removeClass(s.querySelector(".sa-body"),"pulseWarningIns"),d.removeClass(s.querySelector(".sa-dot"),"pulseWarningIns"),setTimeout(function(){var t=i.getAttribute("data-custom-class");d.removeClass(i,t)},300),d.removeClass(e.body,"stop-scrolling"),t.onkeydown=a,t.previousActiveElement&&t.previousActiveElement.focus(),l=n,clearTimeout(i.timeout),!0},u.showInputError=c.showInputError=function(t){var e=p.getModal(),n=e.querySelector(".sa-input-error");d.addClass(n,"show");var i=e.querySelector(".sa-error-container");d.addClass(i,"show"),i.querySelector("p").innerHTML=t,setTimeout(function(){u.enableButtons()},1),e.querySelector("input").focus()},u.resetInputError=c.resetInputError=function(t){if(t&&13===t.keyCode)return!1;var e=p.getModal(),n=e.querySelector(".sa-input-error");d.removeClass(n,"show");var i=e.querySelector(".sa-error-container");d.removeClass(i,"show")},u.disableButtons=c.disableButtons=function(){var t=p.getModal(),e=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");e.disabled=!0,n.disabled=!0},u.enableButtons=c.enableButtons=function(){var t=p.getModal(),e=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");e.disabled=!1,n.disabled=!1},"undefined"!=typeof t?t.sweetAlert=t.swal=u:h.logStr("SweetAlert is a frontend module!"),o.exports=r["default"]},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(t,e,n){Object.defineProperty(n,"__esModule",{value:!0});var i={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};n["default"]=i,e.exports=n["default"]},{}],3:[function(e,n,i){Object.defineProperty(i,"__esModule",{value:!0});var o=e("./utils"),r=(e("./handle-swal-dom"),e("./handle-dom")),s=function(e,n,i){function s(t){f&&n.confirmButtonColor&&(p.style.backgroundColor=t)}var u,c,d,h=e||t.event,p=h.target||h.srcElement,f=-1!==p.className.indexOf("confirm"),m=-1!==p.className.indexOf("sweet-overlay"),g=r.hasClass(i,"visible"),v=n.doneFunction&&"true"===i.getAttribute("data-has-done-function");switch(f&&n.confirmButtonColor&&(u=n.confirmButtonColor,c=o.colorLuminance(u,-.04),d=o.colorLuminance(u,-.14)),h.type){case"mouseover":s(c);break;case"mouseout":s(u);break;case"mousedown":s(d);break;case"mouseup":s(c);break;case"focus":var y=i.querySelector("button.confirm"),b=i.querySelector("button.cancel");f?b.style.boxShadow="none":y.style.boxShadow="none";break;case"click":var w=i===p,S=r.isDescendant(i,p);if(!w&&!S&&g&&!n.allowOutsideClick)break;f&&v&&g?a(i,n):v&&g||m?l(i,n):r.isDescendant(i,p)&&"BUTTON"===p.tagName&&sweetAlert.close()}},a=function(t,e){var n=!0;r.hasClass(t,"show-input")&&(n=t.querySelector("input").value,n||(n="")),e.doneFunction(n),e.closeOnConfirm&&sweetAlert.close(),e.showLoaderOnConfirm&&sweetAlert.disableButtons()},l=function(t,e){var n=String(e.doneFunction).replace(/\s/g,""),i="function("===n.substring(0,9)&&")"!==n.substring(9,10);i&&e.doneFunction(!1),e.closeOnCancel&&sweetAlert.close()};i["default"]={handleButton:s,handleConfirm:a,handleCancel:l},n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(n,i,o){Object.defineProperty(o,"__esModule",{value:!0});var r=function(t,e){return new RegExp(" "+e+" ").test(" "+t.className+" ")},s=function(t,e){r(t,e)||(t.className+=" "+e)},a=function(t,e){var n=" "+t.className.replace(/[\t\r\n]/g," ")+" ";if(r(t,e)){for(;n.indexOf(" "+e+" ")>=0;)n=n.replace(" "+e+" "," ");t.className=n.replace(/^\s+|\s+$/g,"")}},l=function(t){var n=e.createElement("div");return n.appendChild(e.createTextNode(t)),n.innerHTML},u=function(t){t.style.opacity="",t.style.display="block"},c=function(t){if(t&&!t.length)return u(t);for(var e=0;e<t.length;++e)u(t[e])},d=function(t){t.style.opacity="",t.style.display="none"},h=function(t){if(t&&!t.length)return d(t);for(var e=0;e<t.length;++e)d(t[e])},p=function(t,e){for(var n=e.parentNode;null!==n;){if(n===t)return!0;n=n.parentNode}return!1},f=function(t){t.style.left="-9999px",t.style.display="block";var e,n=t.clientHeight;return e="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(t).getPropertyValue("padding-top"),10):parseInt(t.currentStyle.padding),t.style.left="",t.style.display="none","-"+parseInt((n+e)/2)+"px"},m=function(t,e){if(+t.style.opacity<1){e=e||16,t.style.opacity=0,t.style.display="block";var n=+new Date,i=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){t.style.opacity=+t.style.opacity+(new Date-n)/100,n=+new Date,+t.style.opacity<1&&setTimeout(i,e)});i()}t.style.display="block"},g=function(t,e){e=e||16,t.style.opacity=1;var n=+new Date,i=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){t.style.opacity=+t.style.opacity-(new Date-n)/100,n=+new Date,+t.style.opacity>0?setTimeout(i,e):t.style.display="none"});i()},v=function(n){if("function"==typeof MouseEvent){var i=new MouseEvent("click",{view:t,bubbles:!1,cancelable:!0});n.dispatchEvent(i)}else if(e.createEvent){var o=e.createEvent("MouseEvents");o.initEvent("click",!1,!1),n.dispatchEvent(o)}else e.createEventObject?n.fireEvent("onclick"):"function"==typeof n.onclick&&n.onclick()},y=function(e){"function"==typeof e.stopPropagation?(e.stopPropagation(),e.preventDefault()):t.event&&t.event.hasOwnProperty("cancelBubble")&&(t.event.cancelBubble=!0)};o.hasClass=r,o.addClass=s,o.removeClass=a,o.escapeHtml=l,o._show=u,o.show=c,o._hide=d,o.hide=h,o.isDescendant=p,o.getTopMargin=f,o.fadeIn=m,o.fadeOut=g,o.fireClick=v,o.stopEventPropagation=y},{}],5:[function(e,i,o){Object.defineProperty(o,"__esModule",{value:!0});var r=e("./handle-dom"),s=e("./handle-swal-dom"),a=function(e,i,o){var a=e||t.event,l=a.keyCode||a.which,u=o.querySelector("button.confirm"),c=o.querySelector("button.cancel"),d=o.querySelectorAll("button[tabindex]");if(-1!==[9,13,32,27].indexOf(l)){for(var h=a.target||a.srcElement,p=-1,f=0;f<d.length;f++)if(h===d[f]){p=f;break}9===l?(h=-1===p?u:p===d.length-1?d[0]:d[p+1],r.stopEventPropagation(a),h.focus(),i.confirmButtonColor&&s.setFocusStyle(h,i.confirmButtonColor)):13===l?("INPUT"===h.tagName&&(h=u,u.focus()),h=-1===p?u:n):27===l&&i.allowEscapeKey===!0?(h=c,r.fireClick(h,a)):h=n}};o["default"]=a,i.exports=o["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(n,i,o){var r=function(t){return t&&t.__esModule?t:{"default":t}};Object.defineProperty(o,"__esModule",{value:!0});var s=n("./utils"),a=n("./handle-dom"),l=n("./default-params"),u=r(l),c=n("./injected-html"),d=r(c),h=".sweet-alert",p=".sweet-overlay",f=function(){var t=e.createElement("div");for(t.innerHTML=d["default"];t.firstChild;)e.body.appendChild(t.firstChild)},m=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){var t=e.querySelector(h);return t||(f(),t=m()),t}),g=function(){var t=m();return t?t.querySelector("input"):void 0},v=function(){return e.querySelector(p)},y=function(t,e){var n=s.hexToRgb(e);t.style.boxShadow="0 0 2px rgba("+n+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},b=function(n){var i=m();a.fadeIn(v(),10),a.show(i),a.addClass(i,"showSweetAlert"),a.removeClass(i,"hideSweetAlert"),t.previousActiveElement=e.activeElement;var o=i.querySelector("button.confirm");o.focus(),setTimeout(function(){a.addClass(i,"visible")},500);var r=i.getAttribute("data-timer");if("null"!==r&&""!==r){var s=n;i.timeout=setTimeout(function(){var t=(s||null)&&"true"===i.getAttribute("data-has-done-function");t?s(null):sweetAlert.close()},r)}},w=function(){var t=m(),e=g();a.removeClass(t,"show-input"),e.value=u["default"].inputValue,e.setAttribute("type",u["default"].inputType),e.setAttribute("placeholder",u["default"].inputPlaceholder),S()},S=function(t){if(t&&13===t.keyCode)return!1;var e=m(),n=e.querySelector(".sa-input-error");a.removeClass(n,"show");var i=e.querySelector(".sa-error-container");a.removeClass(i,"show")},_=function(){var t=m();t.style.marginTop=a.getTopMargin(m())};o.sweetAlertInitialize=f,o.getModal=m,o.getOverlay=v,o.getInput=g,o.setFocusStyle=y,o.openModal=b,o.resetInput=w,o.resetInputError=S,o.fixVerticalPosition=_},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(t,e,n){Object.defineProperty(n,"__esModule",{value:!0});var i='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"]=i,e.exports=n["default"]},{}],8:[function(t,e,i){Object.defineProperty(i,"__esModule",{value:!0});var o=t("./utils"),r=t("./handle-swal-dom"),s=t("./handle-dom"),a=["error","warning","info","success","input","prompt"],l=function(t){var e=r.getModal(),i=e.querySelector("h2"),l=e.querySelector("p"),u=e.querySelector("button.cancel"),c=e.querySelector("button.confirm");if(i.innerHTML=t.html?t.title:s.escapeHtml(t.title).split("\n").join("<br>"),l.innerHTML=t.html?t.text:s.escapeHtml(t.text||"").split("\n").join("<br>"),t.text&&s.show(l),t.customClass)s.addClass(e,t.customClass),e.setAttribute("data-custom-class",t.customClass);else{var d=e.getAttribute("data-custom-class");s.removeClass(e,d),e.setAttribute("data-custom-class","")}if(s.hide(e.querySelectorAll(".sa-icon")),t.type&&!o.isIE8()){var h=function(){for(var i=!1,o=0;o<a.length;o++)if(t.type===a[o]){i=!0;break}if(!i)return logStr("Unknown alert type: "+t.type),{v:!1};var l=["success","error","warning","info"],u=n;-1!==l.indexOf(t.type)&&(u=e.querySelector(".sa-icon.sa-"+t.type),s.show(u));var c=r.getInput();switch(t.type){case"success":s.addClass(u,"animate"),s.addClass(u.querySelector(".sa-tip"),"animateSuccessTip"),s.addClass(u.querySelector(".sa-long"),"animateSuccessLong");break;case"error":s.addClass(u,"animateErrorIcon"),s.addClass(u.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":s.addClass(u,"pulseWarning"),s.addClass(u.querySelector(".sa-body"),"pulseWarningIns"),s.addClass(u.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":c.setAttribute("type",t.inputType),c.value=t.inputValue,c.setAttribute("placeholder",t.inputPlaceholder),s.addClass(e,"show-input"),setTimeout(function(){c.focus(),c.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof h)return h.v}if(t.imageUrl){var p=e.querySelector(".sa-icon.sa-custom");p.style.backgroundImage="url("+t.imageUrl+")",s.show(p);var f=80,m=80;if(t.imageSize){var g=t.imageSize.toString().split("x"),v=g[0],y=g[1];v&&y?(f=v,m=y):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+t.imageSize)}p.setAttribute("style",p.getAttribute("style")+"width:"+f+"px; height:"+m+"px")}e.setAttribute("data-has-cancel-button",t.showCancelButton),t.showCancelButton?u.style.display="inline-block":s.hide(u),e.setAttribute("data-has-confirm-button",t.showConfirmButton),t.showConfirmButton?c.style.display="inline-block":s.hide(c),t.cancelButtonText&&(u.innerHTML=s.escapeHtml(t.cancelButtonText)),t.confirmButtonText&&(c.innerHTML=s.escapeHtml(t.confirmButtonText)),t.confirmButtonColor&&(c.style.backgroundColor=t.confirmButtonColor,c.style.borderLeftColor=t.confirmLoadingButtonColor,c.style.borderRightColor=t.confirmLoadingButtonColor,r.setFocusStyle(c,t.confirmButtonColor)),e.setAttribute("data-allow-outside-click",t.allowOutsideClick);var b=t.doneFunction?!0:!1;e.setAttribute("data-has-done-function",b),t.animation?"string"==typeof t.animation?e.setAttribute("data-animation",t.animation):e.setAttribute("data-animation","pop"):e.setAttribute("data-animation","none"),e.setAttribute("data-timer",t.timer)};i["default"]=l,e.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(e,n,i){Object.defineProperty(i,"__esModule",{value:!0});var o=function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},r=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?parseInt(e[1],16)+", "+parseInt(e[2],16)+", "+parseInt(e[3],16):null},s=function(){return t.attachEvent&&!t.addEventListener},a=function(e){t.console&&t.console.log("SweetAlert: "+e)},l=function(t,e){t=String(t).replace(/[^0-9a-f]/gi,""),t.length<6&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]),e=e||0;var n,i,o="#";for(i=0;3>i;i++)n=parseInt(t.substr(2*i,2),16),n=Math.round(Math.min(Math.max(0,n+n*e),255)).toString(16),o+=("00"+n).substr(n.length);return o};i.extend=o,i.hexToRgb=r,i.isIE8=s,i.logStr=a,i.colorLuminance=l},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document);var iosOverlay=function(t){var e,n=function(){},i={onbeforeshow:n,onshow:n,onbeforehide:n,onhide:n,text:"",icon:null,spinner:null,duration:null,id:null,parentEl:null},o=function(t,e){var n={};for(var i in t)n[i]=t[i];for(var o in e)n[o]=e[o];return n},r=function(){var t=document.body||document.documentElement,e=t.style,n="transition";if("string"==typeof e[n])return!0;var i=["Moz","Webkit","Khtml","O","ms"];n=n.charAt(0).toUpperCase()+n.substr(1);for(var o=0;o<i.length;o++)if("string"==typeof e[i[o]+n])return!0;return!1}(),s=o(i,t),a=function(t){"ios-overlay-show"===t.animationName&&s.onshow(),"ios-overlay-hide"===t.animationName&&(u(),s.onhide())},l=(function(){e=document.createElement("div"),e.className="ui-ios-overlay",e.innerHTML+='<span class="title">'+s.text+"</span",t.icon?e.innerHTML+='<img src="'+t.icon+'">':t.spinner&&e.appendChild(t.spinner.el),r&&(e.addEventListener("webkitAnimationEnd",a,!1),e.addEventListener("msAnimationEnd",a,!1),e.addEventListener("oAnimationEnd",a,!1),e.addEventListener("animationend",a,!1)),t.parentEl?document.getElementById(t.parentEl).appendChild(e):document.body.appendChild(e),s.onbeforeshow(),r?e.className+=" ios-overlay-show":"function"==typeof $&&$(e).fadeIn({duration:200},function(){s.onshow()}),s.duration&&window.setTimeout(function(){l()},s.duration)}(),function(){s.onbeforehide(),r?e.className=e.className.replace("show","hide"):"function"==typeof $&&$(e).fadeOut({duration:200},function(){u(),s.onhide()})}),u=function(){t.parentEl?document.getElementById(t.parentEl).removeChild(e):document.body.removeChild(e)},c=function(t){t.text&&(e.getElementsByTagName("span")[0].innerHTML=t.text),t.icon&&(s.spinner&&(s.spinner.el.parentNode.removeChild(s.spinner.el),s.spinner=null),e.innerHTML+='<img src="'+t.icon+'">')};return{hide:l,destroy:u,update:c}};if("function"==typeof define&&define.amd&&define([],function(){return iosOverlay}),$(".index_page").length)var cart=window.document.querySelector(".cart"),cartItems=cart.querySelector(".cart__count");var delivery=$.cookie("delivery"),summ,dataTable=$("#tableOrder").DataTable({language:{emptyTable:"Корзина пуста"}});if($(".userIsAuch .full_price").length){
var full_price=sessionStorage.getItem("cart_price");console.log(full_price),$(".full_price").text(full_price),initIfhaveSession(),delivery_func(),$("#adressAuch").select2({maximumSelectionLength:1,tags:!0,data:data})}$(".userIsAuch h2").click(function(){$(".checkOut").addClass("isUp")});var tableOrder=$("#tableOrder tbody");tableOrder.on("mouseenter","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".action--like").click(function(t){var e=$(this);$.getJSON("/like_add",{like:$(this).val()},function(t){"add"==t.result?(e.find("i").addClass("fa-heart"),e.find("i").removeClass("fa-heart-o"),swal({title:"Ура!",text:"Добавлено в избранное!",timer:1500,type:"success",showConfirmButton:!1})):"delete"==t.result?(e.find("i").addClass("fa-heart-o"),e.find("i").removeClass("fa-heart"),swal({title:"Упс!",text:"Удалено из избранного!",timer:1500,type:"error",showConfirmButton:!1})):0==t.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:1500,type:"error",showConfirmButton:!1})})}),$("#auch-menu-btn").click(function(t){$.getJSON("/auch",{login:$("#inputPhone").val(),password:$("#inputPassword").val()},function(t){console.log(t.result),1==t.result?swal({title:"Ура!",text:"Вход выполнен успешно!",timer:2e3,type:"success",showConfirmButton:!1},function(){location.reload()}):swal({title:"Упс!",text:"Такого пользоваеля не существует, либо пароль введен неправильно",type:"error",showConfirmButton:!0})})}),$("input:radio[name=group2]").change(function(){$.cookie("delivery",this.value,{expires:7}),$(".full span").text(calculateSumm())}),$("input:radio[name=group1]").change(function(){$.cookie("delivery",this.value,{expires:7}),$("#select_delivery").nifty("hide"),$("input:radio[name=group2][value='"+$.cookie("delivery")+"']").prop({checked:!0}),$(".full span").text(calculateSumm())}),tableOrder.on("mouseleave","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".pw-reset a, #restorePass").click(function(){var t=$("#inputPhone");""!=t.val()?$.getJSON("/pwreset",{login:t.val()},function(t){console.log(t),"sent"==t.result?swal("Пароль востановлен!","Новый пароль отправлен на вашу почту!","success"):0==t.result?swal("Упс!","Такого пользователя нет!","error"):2==t.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:2e3,showConfirmButton:!0})}):swal("Упс!","Необходимо ввести телефон!","warning")}),$(".checkOut input[type=number]").keypress(function(t){return t=t||window.event,t.charCode&&(t.charCode<48||t.charCode>57)?!1:void $(".full span").text(calculateSumm())}),$(document).keyup(function(t){27==t.keyCode&&$(".popUp").removeClass("isUp")}),$(".one--buy").click(function(){var t=jQuery.parseJSON($(this).attr("data-items"));1==t.item_category?(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect(),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())):(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>"," ","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())),cartItems.innerHTML=Number(cartItems.innerHTML)+1,iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"})}),jQuery(document).ready(function(){if($(".index_page").length){var t=document.getElementById("sequence"),e={animateCanvas:!1,phaseThreshold:!1,preloader:!0,reverseWhenNavigatingBackwards:!0},n=(sequence(t,e),$("#tableOrder"));n.on("click",".delete",function(t){dataTable.row(".selected").remove().draw(!1),cartItems.innerHTML=Number(cartItems.innerHTML)-1,$(".full span").text(calculateSumm())})}}),$("#orderNow").click(function(t){window.location.href="/order"});var data=[{id:1,text:"г.Нижневартовск"},{id:2,text:"г.Мегион"},{id:3,text:"г.Лангепас"}];$("#restorePass").click(function(t){""==$("#auchPhone").val()?$(".wrongPhone").show():($(".orderModal").modal("hide"),$(".auchUsers").empty(),$("#sendAuchNone").attr({disabled:"disabled"}),$(".userIsAuch").show(),$("#adressAuch").select2({placeholder:"Выберите ваш адрес",data:data}))}),$(".slider__item").click(function(t){$(".preloader").show(),$(".popUp").addClass("isUp"),$.ajax({type:"POST",contentType:"application/json",dataType:"json",url:"/get_one_item/"+$(this).attr("data-id-item"),success:function(t){$("#one_img").attr({src:"static/upload/"+t.result.imgs});var e={item_id:t.result.item_id,item_name:t.result.name,item_price:t.result.price,item_component:t.result.components,item_weight:t.result.weight,item_category:t.result.category};$(".aboutProduct .action--buy").attr({value:t.result.id,"data-items":JSON.stringify(e)}),arrays_one=t.result.components.split(","),$("#one_array").empty(),$.each(arrays_one,function(t){$("<li/>").text(arrays_one[t]).appendTo($("#one_array"))}),$("#one_weight").text(t.result.weight),$("#one_name").text(t.result.name),$(".preloader").hide()}})}),$(".closebtn").click(function(t){$(".popUp").removeClass("isUp")}),$(".cart, .showCart").click(function(t){0==calculateSumm()?iosOverlay({text:"Корзина пуста",duration:2e3,icon:"static/img/cross.png"}):($(".full span").text(calculateSumm()),$(".checkOut").addClass("isUp"))}),$(".closezakazbtn").click(function(t){$(".checkOut").removeClass("isUp")}),$(function(){if($(".index_page").length){var t=$("#bar"),e=$(".view"),n=$(".cart"),i=t.offset().top-parseFloat(t.css("margin-top"));$(window).scroll(function(o){var r=$(this).scrollTop();r>=i?(t.addClass("fixed"),e.addClass("col-md-offset-2"),n.addClass("cartAbsolute cartPerc")):(t.removeClass("fixed"),e.removeClass("col-md-offset-2"),n.removeClass("cartAbsolute cartPerc"))})}}),function(t){"use strict";function e(t,e){var n=!0;return function(i){n&&(n=!1,setTimeout(function(){n=!0},e),t(i))}}function n(){$(".index_page").length&&imagesLoaded(f,function(){i(),o(),r(),delivery_func(),initIfhaveSession(),classie.remove(f,"grid--loading"),$(".preloader").hide()})}function i(){}function o(){h=new Isotope(f,{isResizeBound:!1,itemSelector:".grid__item",percentPosition:!0,masonry:{columnWidth:".grid__sizer"},transitionDuration:"0.6s"})}function r(){m.forEach(function(t){t.addEventListener("click",function(){classie.remove(t.parentNode.querySelector(".filter__item--selected"),"filter__item--selected"),classie.add(t,"filter__item--selected"),h.arrange({filter:t.getAttribute("data-filter")}),a(),h.layout()})}),t.addEventListener("resize",e(function(t){a(),h.layout()},50)),[].slice.call(f.querySelectorAll(".grid__item")).forEach(function(t){t.querySelector(".items-buy").addEventListener("click",s)})}function s(){var t=jQuery.parseJSON($(this).attr("data-items"));"Вторая"==t.item_category?(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect(),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())):(dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>"," ","<input type='number' value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(t){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"}),classie.add(g,"cart--animate"),setTimeout(function(){v.innerHTML=Number(v.innerHTML)+1},200),d(v,function(){classie.remove(g,"cart--animate")})}function a(){for(var t=0,e=p.length;e>t;++t)p[t].resize()}var l={animations:Modernizr.cssanimations},u={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd",animation:"animationend"},c=u[Modernizr.prefixed("animation")],d=function(t,e){var n=function(t){if(l.animations){if(t.target!=this)return;this.removeEventListener(c,n)}e&&"function"==typeof e&&e.call()};l.animations?t.addEventListener(c,n):n()};if($(".index_page").length)var h,p=([].slice.call(document.querySelectorAll(".slider")),[]),f=document.querySelector(".grid"),m=[].slice.call(document.querySelectorAll(".filter > button")),g=document.querySelector(".cart"),v=g.querySelector(".cart__count");n()}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZGVmaW5lU2VxdWVuY2UiLCJpbWFnZXNMb2FkZWQiLCJIYW1tZXIiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZSIsIlNlcXVlbmNlIiwiZWxlbWVudCIsIm9wdGlvbnMiLCJpc0FycmF5Iiwib2JqZWN0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZXh0ZW5kIiwiYSIsImIiLCJpIiwiZ2V0U3R5bGUiLCJwcm9wZXJ0eSIsInZhbHVlIiwiY3VycmVudFN0eWxlIiwiZG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJhZGRFdmVudCIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJoYW5kbGVyciIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiY29udmVydFRpbWVUb01zIiwidGltZSIsImNvbnZlcnRlZFRpbWUiLCJmcmFjdGlvbiIsImluZGV4T2YiLCJwYXJzZUZsb2F0IiwicmVwbGFjZSIsImhhc0NsYXNzIiwibmFtZSIsInVuZGVmaW5lZCIsIlJlZ0V4cCIsInRlc3QiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImVsZW1lbnRzIiwiZWxlbWVudHNMZW5ndGgiLCJsZW5ndGgiLCJyZW1vdmVDbGFzcyIsImluc2lkZUVsZW1lbnQiLCJjdXJzb3IiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaW5zaWRlIiwiY2xpZW50WCIsImxlZnQiLCJyaWdodCIsImNsaWVudFkiLCJ0b3AiLCJib3R0b20iLCJoYXNQYXJlbnQiLCJwYXJlbnQiLCJ0YXJnZXQiLCJwcmV2aW91c1RhcmdldCIsIm5vZGVOYW1lIiwicGFyZW50Tm9kZSIsInRvcExldmVsIiwiYWxsVG9wTGV2ZWwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEhhbW1lckRpcmVjdGlvbiIsInN3aXBlRXZlbnRzIiwic3dpcGVEaXJlY3Rpb25zIiwiaGFtbWVyRGlyZWN0aW9uIiwiRElSRUNUSU9OX05PTkUiLCJ1cCIsImRvd24iLCJESVJFQ1RJT05fSE9SSVpPTlRBTCIsIkRJUkVDVElPTl9WRVJUSUNBTCIsIkRJUkVDVElPTl9BTEwiLCJhZGRGZWF0dXJlU3VwcG9ydENsYXNzZXMiLCIkZWwiLCJNb2Rlcm5penIiLCJwcmVmaXgiLCJzdXBwb3J0IiwidG91Y2giLCJpbnN0YW5jZUlkIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZGVmYXVsdHMiLCJzdGFydGluZ1N0ZXBJZCIsInN0YXJ0aW5nU3RlcEFuaW1hdGVzSW4iLCJjeWNsZSIsInBoYXNlVGhyZXNob2xkIiwicmV2ZXJzZVdoZW5OYXZpZ2F0aW5nQmFja3dhcmRzIiwicmV2ZXJzZVRpbWluZ0Z1bmN0aW9uV2hlbk5hdmlnYXRpbmdCYWNrd2FyZHMiLCJtb3ZlQWN0aXZlU3RlcFRvVG9wIiwiYW5pbWF0ZUNhbnZhcyIsImFuaW1hdGVDYW52YXNEdXJhdGlvbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlJbnRlcnZhbCIsImF1dG9QbGF5RGVsYXkiLCJhdXRvUGxheURpcmVjdGlvbiIsImF1dG9QbGF5QnV0dG9uIiwiYXV0b1BsYXlQYXVzZU9uSG92ZXIiLCJuYXZpZ2F0aW9uU2tpcCIsIm5hdmlnYXRpb25Ta2lwVGhyZXNob2xkIiwiZmFkZVN0ZXBXaGVuU2tpcHBlZCIsImZhZGVTdGVwVGltZSIsImlnbm9yZVBoYXNlVGhyZXNob2xkV2hlblNraXBwZWQiLCJwcmV2ZW50UmV2ZXJzZVNraXBwaW5nIiwibmV4dEJ1dHRvbiIsInByZXZCdXR0b24iLCJwYWdpbmF0aW9uIiwicHJlbG9hZGVyIiwicHJlbG9hZFRoZXNlU3RlcHMiLCJwcmVsb2FkVGhlc2VJbWFnZXMiLCJoaWRlU3RlcHNVbnRpbFByZWxvYWRlZCIsInBhdXNlUHJlbG9hZGVyIiwia2V5TmF2aWdhdGlvbiIsIm51bWVyaWNLZXlzR29Ub1N0ZXBzIiwia2V5RXZlbnRzIiwic2VxdWVuY2UiLCJwcmV2IiwibmV4dCIsInN3aXBlTmF2aWdhdGlvbiIsInN3aXBlSGFtbWVyT3B0aW9ucyIsImhhc2hUYWdzIiwiaGFzaERhdGFBdHRyaWJ1dGUiLCJoYXNoQ2hhbmdlc09uRmlyc3RTdGVwIiwiZmFsbGJhY2siLCJzcGVlZCIsImRvbVRocmVzaG9sZCIsInJlc2l6ZVRocmVzaG9sZCIsInByZWZpeFRyYW5zbGF0aW9ucyIsImFuaW1hdGlvbiIsIldlYmtpdEFuaW1hdGlvbiIsImMiLCJ6IiwiY3NzVGV4dCIsIkIiLCJDIiwiRCIsImQiLCJlIiwiRSIsImYiLCJiaW5kIiwiRiIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJuIiwiam9pbiIsInNwbGl0IiwibyIsImoiLCJ2IiwieSIsImRvY3VtZW50RWxlbWVudCIsImciLCJoIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwibCIsIm0iLCJ0b0xvd2VyQ2FzZSIsInAiLCJzdmciLCJxIiwidCIsInUiLCJ3IiwiayIsImJvZHkiLCJwYXJzZUludCIsImlkIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJiYWNrZ3JvdW5kIiwib3ZlcmZsb3ciLCJyZW1vdmVDaGlsZCIsIngiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiRnVuY3Rpb24iLCJ0aGlzIiwiVHlwZUVycm9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJjb25jYXQiLCJEb2N1bWVudFRvdWNoIiwib2Zmc2V0VG9wIiwiY3NzYW5pbWF0aW9ucyIsImNzc3RyYW5zZm9ybXMiLCJjc3N0cmFuc2l0aW9ucyIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVNWR1JlY3QiLCJHIiwicHVzaCIsImFkZFRlc3QiLCJlbmFibGVDbGFzc2VzIiwiX3ZlcnNpb24iLCJfcHJlZml4ZXMiLCJfZG9tUHJlZml4ZXMiLCJfY3Nzb21QcmVmaXhlcyIsInRlc3RQcm9wIiwidGVzdEFsbFByb3BzIiwidGVzdFN0eWxlcyIsInByZWZpeGVkIiwid2luZG93IiwiQXJyYXkiLCJzZWFyY2hFbGVtZW50IiwiZnJvbUluZGV4IiwiTWF0aCIsImFicyIsIkluZmluaXR5IiwiaGlkZGVuIiwidmlzaWJpbGl0eUNoYW5nZSIsIm1vekhpZGRlbiIsIm1zSGlkZGVuIiwid2Via2l0SGlkZGVuIiwic2VsZiIsIm1vZGVybml6ciIsInVpIiwiZGVmYXVsdEVsZW1lbnRzIiwiZ2V0RWxlbWVudHMiLCJ0eXBlIiwib3B0aW9uIiwicmVsIiwicmVsYXRlZEVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIiRjb250YWluZXIiLCJzaG93IiwiZHVyYXRpb24iLCJwcm9wZXJ0eVN1cHBvcnQiLCJ0cmFuc2l0aW9ucyIsIm9wYWNpdHkiLCJhbmltYXRpb25GYWxsYmFjayIsImFuaW1hdGUiLCJoaWRlIiwiY2FsbGJhY2siLCJoaWRlVGltZXIiLCJzZXRUaW1lb3V0IiwiaW5pdCIsImlzQXV0b1BsYXlQYXVzZWQiLCJpc0F1dG9QbGF5aW5nIiwiZ2V0RGVsYXkiLCJkZWxheSIsInN0YXJ0RGVsYXkiLCJzdGFydCIsImNvbnRpbnVpbmciLCJpc1JlYWR5Iiwic3RhcnRlZCIsIiRhdXRvUGxheSIsImlzQW5pbWF0aW5nIiwiYXV0b1BsYXlUaW1lciIsInN0b3AiLCJjbGVhclRpbWVvdXQiLCJzdG9wcGVkIiwidW5wYXVzZSIsInBhdXNlIiwiY2FudmFzIiwiJHNjcmVlbiIsImhlaWdodCIsIndpZHRoIiwiZ2V0VHJhbnNmb3JtUHJvcGVydGllcyIsImdldFN0ZXBzIiwic3RlcElkIiwic3RlcCIsInN0ZXBzIiwic3RlcEVsZW1lbnRzIiwiY2hpbGRyZW4iLCJzdGVwc0xlbmd0aCIsInN0ZXBQcm9wZXJ0aWVzIiwiaXNBY3RpdmUiLCJjYW52YXNUcmFuc2Zvcm0iLCJub09mU3RlcHMiLCIkc3RlcHMiLCJzZXFYIiwic2VxWSIsInNlcVoiLCJvZmZzZXRMZWZ0IiwibW92ZSIsInRyYW5zZm9ybXMiLCJmaXJzdFJ1biIsImlzRmFsbGJhY2tNb2RlIiwiJGNhbnZhcyIsInJlbW92ZU5vSnNDbGFzcyIsInJlc2V0SW5oZXJpdGVkU3BlZWQiLCJnZXRQaGFzZVByb3BlcnRpZXMiLCJlbCIsInN0ZXBFbGVtZW50Iiwic3RlcEFuaW1hdGVkQ2hpbGRyZW4iLCJzdGVwQ2hpbGRyZW4iLCJzdGVwQ2hpbGRyZW5MZW5ndGgiLCJ3YXRjaGVkRHVyYXRpb25zIiwid2F0Y2hlZERlbGF5cyIsIndhdGNoZWRMZW5ndGhzIiwiZHVyYXRpb25zIiwiZGVsYXlzIiwibGVuZ3RocyIsIm1heER1cmF0aW9uIiwibWF4IiwibWF4RGVsYXkiLCJtYXhUb3RhbCIsIndhdGNoZWRNYXhEdXJhdGlvbiIsIndhdGNoZWRNYXhEZWxheSIsIndhdGNoZWRNYXhUb3RhbCIsImFuaW1hdGVkQ2hpbGRyZW4iLCJ3YXRjaGVkVGltaW5ncyIsInRpbWluZ3MiLCJnZXRQaGFzZVRocmVzaG9sZCIsImlnbm9yZVBoYXNlVGhyZXNob2xkIiwicGhhc2VUaHJlc2hvbGRPcHRpb24iLCJjdXJyZW50UGhhc2VEdXJhdGlvbiIsInBoYXNlVGhyZXNob2xkVGltZSIsImdldFJldmVyc2VQaGFzZURlbGF5IiwiY3VycmVudFBoYXNlVG90YWwiLCJuZXh0UGhhc2VUb3RhbCIsImlnbm9yZVBoYXNlVGhyZXNob2xkV2hlblNraXBwZWRPcHRpb24iLCJwaGFzZURpZmZlcmVuY2UiLCJjdXJyZW50IiwiY3VycmVudEVsZW1lbnQiLCJuZXh0RWxlbWVudCIsInByZXZTdGVwRWxlbWVudCIsInByZXZTdGVwSWQiLCJsYXN0U3RlcElkIiwiekluZGV4IiwibWFuYWdlTmF2aWdhdGlvblNraXAiLCJuZXh0U3RlcEVsZW1lbnQiLCJwaGFzZVNraXBwZWQiLCJuYXZpZ2F0aW9uU2tpcFRocmVzaG9sZEFjdGl2ZSIsInBoYXNlc0FuaW1hdGluZyIsInBoYXNlVGhyZXNob2xkVGltZXIiLCJuZXh0UGhhc2VTdGFydGVkVGltZXIiLCJwaGFzZXNTa2lwcGVkIiwic3RlcFNraXBwZWQiLCJuYXZpZ2F0aW9uU2tpcFRocmVzaG9sZFRpbWVyIiwiY2hhbmdlU3RlcCIsInN0ZXBUb0FkZCIsImN1cnJlbnRTdGVwSWQiLCJzdGVwVG9SZW1vdmUiLCJyZXZlcnNlUHJvcGVydGllcyIsInBoYXNlUHJvcGVydGllcyIsInBoYXNlRGVsYXkiLCJ0b3RhbCIsIm1heFdhdGNoZWRUb3RhbCIsInBoYXNlRWxlbWVudHMiLCJub09mUGhhc2VFbGVtZW50cyIsInN0ZXBEdXJhdGlvbnMiLCJ0aW1pbmdGdW5jdGlvbiIsInRpbWluZ0Z1bmN0aW9uUmV2ZXJzZWQiLCJ0b3RhbHMiLCJ3YXRjaGVkVG90YWxzIiwicmV2ZXJzZVRpbWluZ0Z1bmN0aW9uIiwiZG9tRGVsYXkiLCJmb3J3YXJkIiwiY3VycmVudFN0ZXBFbGVtZW50IiwiaGFzaFRhZ05hdiIsImN1cnJlbnRQaGFzZVByb3BlcnRpZXMiLCJjdXJyZW50UGhhc2VTdGFydGVkIiwic3RhcnRBbmltYXRlT3V0Iiwic3RhcnRBbmltYXRlSW4iLCJyZXZlcnNlIiwicmV2ZXJzZVBoYXNlRGVsYXkiLCJuZXh0UGhhc2VQcm9wZXJ0aWVzIiwic3RlcER1cmF0aW9uIiwidXBkYXRlIiwibmV4dFBoYXNlU3RhcnRlZCIsInBoYXNlRW5kZWQiLCJuZXh0UGhhc2VFbmRlZCIsImdldFN0ZXBEdXJhdGlvbiIsInN0ZXBFbmRlZFRpbWVyIiwic3RlcEVuZGVkIiwiZGlyZWN0aW9uIiwiY3VycmVudFBoYXNlRW5kZWQiLCJwaGFzZSIsInBoYXNlRHVyYXRpb24iLCJjdXJyZW50UGhhc2VFbmRlZFRpbWVyIiwibmV4dFBoYXNlRW5kZWRUaW1lciIsImFuaW1hdGlvbkVuZGVkIiwicmV2ZXJzZVBoYXNlIiwic2VxLW91dCIsInNlcS1pbiIsImN1YmljQmV6aWVyIiwiY3ViaWNCZXppZXJMZW5ndGgiLCJyZXZlcnNlZEN1YmljQmV6aWVyIiwidGltaW5nRnVuY3Rpb25Ub0N1YmljQmV6aWVyIiwibGluZWFyIiwiZWFzZSIsImVhc2UtaW4iLCJlYXNlLWluLW91dCIsImVhc2Utb3V0IiwibnVtYmVyT2ZTdGVwRWxlbWVudHMiLCJnZXREaXJlY3Rpb24iLCJkZWZpbmVkRGlyZWN0aW9uIiwicmV2ZXJzZVdoZW5OYXZpZ2F0aW5nQmFja3dhcmRzT3B0aW9uIiwiY3ljbGVPcHRpb24iLCJyZXF1aXJlc0ZhbGxiYWNrTW9kZSIsImdldFByb3BlcnR5U3VwcG9ydCIsInByb3BlcnRpZXMiLCJhbmltYXRpb25zIiwidW5pdCIsImZyb20iLCJ0byIsIkRhdGUiLCJnZXRUaW1lIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsIm1pbiIsImNsZWFySW50ZXJ2YWwiLCJzZXR1cENhbnZhcyIsImNhbnZhc1dpZHRoIiwib2Zmc2V0V2lkdGgiLCJwb3NpdGlvbiIsIndoaXRlU3BhY2UiLCJtb3ZlQ2FudmFzIiwiY3VycmVudEZyb20iLCJjdXJyZW50VG8iLCJuZXh0RnJvbSIsIm5leHRUbyIsImdvVG8iLCJjdXJyZW50U3RlcCIsIm5leHRTdGVwIiwiYW5pbWF0aW9uU3RhcnRlZCIsImdldExpbmtzIiwiY2hpbGRFbGVtZW50IiwiY2hpbGRFbGVtZW50cyIsImNoaWxkTm9kZXMiLCJjaGlsZEVsZW1lbnRzTGVuZ3RoIiwicGFnaW5hdGlvbkxpbmtzIiwibm9kZVR5cGUiLCIkcGFnaW5hdGlvbiIsImN1cnJlbnRQYWdpbmF0aW9uTGluayIsImN1cnJlbnRQYWdpbmF0aW9uTGlua3NMZW5ndGgiLCJwYWdpbmF0aW9uTGVuZ3RoIiwiY3VycmVudExpbmtzIiwibGlua3MiLCJjb3JyZXNwb25kaW5nU3RlcElkIiwibmV3SGFzaFRhZyIsImhhc1B1c2hzdGF0ZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJsb2NhdGlvbiIsImhhc2giLCJzdGVwSGFzaFRhZ3MiLCJnZXRTdGVwSGFzaFRhZ3MiLCJjdXJyZW50SGFzaFRhZyIsImhhc0NvcnJlc3BvbmRpbmdTdGVwIiwiaGFzaFRhZyIsImNvcnJlc3BvbmRpbmdTdGVwIiwiZWxlbWVudEhhc2hUYWciLCJoYXNoVGFnSWQiLCJjdXJyZW50SGFzaHRhZyIsInNldHVwRXZlbnQiLCJhZGRIYXNoQ2hhbmdlIiwiZnVuYyIsImJlZm9yZSIsInJlbW92ZUhhc2hDaGFuZ2UiLCJoYXNoQ2hhbmdlRnVuY3MiLCJvbGRIcmVmIiwiaHJlZiIsInNwbGljZSIsIm5ld0hyZWYiLCJfb2xkSHJlZiIsIm5ld1VSTCIsIm9sZFVSTCIsInByZWxvYWQiLCJkZWZhdWx0SHRtbCIsImZhbGxiYWNrSHRtbCIsImRlZmF1bHRTdHlsZXMiLCJzdGVwSW1hZ2VzVG9QcmVsb2FkIiwiaW5kaXZpZHVhbEltYWdlc1RvUHJlbG9hZCIsImltYWdlc1RvUHJlbG9hZCIsImltZ0xvYWQiLCJwcm9ncmVzcyIsInJlc3VsdCIsIiRwcmVsb2FkZXIiLCJhcHBlbmQiLCJhZGRTdHlsZXMiLCJ0b2dnbGVTdGVwc1Zpc2liaWxpdHkiLCJnZXRJbWFnZXNUb1ByZWxvYWQiLCJvbiIsImNvbXBsZXRlIiwiaW1hZ2UiLCJpc0xvYWRlZCIsInByZWxvYWRQcm9ncmVzcyIsImltZyIsInNyYyIsInByZWxvYWRlZCIsInByZWxvYWRJbmRpY2F0b3JUaW1lciIsImRpc3BsYXkiLCJoZWFkIiwic3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNyZWF0ZVRleHROb2RlIiwicHJlbG9hZEluZGljYXRvciIsImZpcnN0Q2hpbGQiLCJpbmRpY2F0b3JGbGFzaCIsInZpc2liaWxpdHkiLCJwcmVsb2FkRmxhc2hUaW1lIiwicmVtb3ZlU3R5bGVzIiwic3JjT25seSIsImltYWdlc0luU3RlcCIsImltYWdlc0luU3RlcExlbmd0aCIsImVsZW1lbnRMZW5ndGgiLCJJbWFnZSIsImluc2VydEJlZm9yZSIsIm1hbmFnZUV2ZW50cyIsImxpc3QiLCJsb2FkIiwiY2xpY2siLCJ0b3VjaHN0YXJ0IiwibW91c2Vtb3ZlIiwibW91c2VsZWF2ZSIsImhhbW1lciIsImtleXVwIiwiaGFzaGNoYW5nZSIsInJlc2l6ZSIsImFkZCIsImhhc2hDaGFuZ2UiLCJoYW1tZXJUaW1lIiwicmVzaXplVGhyb3R0bGUiLCJwYWdlVmlzaWJpbGl0eSIsIiRuZXh0IiwiYnV0dG9uIiwiJHByZXYiLCJ0b2dnbGVBdXRvUGxheSIsInN0b3BPbkhvdmVyIiwicmVsYXRlZEVsZW1lbnRJZCIsInJlbW92ZUFsbCIsImV2ZW50TGlzdCIsImV2ZW50VHlwZSIsInRoZUV2ZW50cyIsInJlbW92ZSIsImV2ZW50RWxlbWVudHMiLCJldmVudEVsZW1lbnRzTGVuZ3RoIiwib2ZmIiwiZXZlbnRQcm9wZXJ0aWVzIiwiYnV0dG9uRXZlbnQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmV0dXJuVmFsdWUiLCJ0YXJnZXRFbGVtZW50Iiwic3JjRWxlbWVudCIsInRvdWNoSGFuZGxlciIsImlzTW91c2VPdmVyIiwiaXNUb3VjaGVkIiwiZ2V0Iiwic2V0Iiwia2V5Q29kZUNoYXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJrZXlDb2RlIiwidGhyb3R0bGVkRXZlbnRzIiwidGhyb3R0bGVkUmVzaXplIiwidGhyb3R0bGVUaW1lciIsInByZXZTdGVwIiwiZ29Ub0ZpcnN0U3RlcCIsInJlYWR5IiwiZGVzdHJveSIsImxhc3RTdGVwIiwiZmFkZVN0ZXBUaW1lciIsInJlbW92ZUF0dHJpYnV0ZSIsImRlc3Ryb3llZCIsIm5leHRTdGVwSWQiLCJ1dGlscyIsImRlbGl2ZXJ5X2Z1bmMiLCJkZWxpdmVyeSIsIiQiLCJuaWZ0eSIsImNvb2tpZSIsInByb3AiLCJjaGVja2VkIiwiaW5pdElmaGF2ZVNlc3Npb24iLCJjYXJ0VmFsdWUiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJjYXJ0T2JqIiwiSlNPTiIsInBhcnNlIiwicm93IiwiZm9yRWFjaCIsImVudHJ5IiwiY29uc29sZSIsImxvZyIsImRhdGFUYWJsZSIsImRyYXciLCJ0ZXh0IiwiY2FsY3VsYXRlU3VtbSIsImZhbmN5U2VsZWN0IiwidHJpZ2dlciIsImRhdGFGcm9tVGFibGUiLCJUYWJsZURhdGEiLCJlYWNoIiwidHIiLCJmaW5kIiwiaHRtbCIsInZhbCIsImF0dHIiLCJzaGlmdCIsImZuR2V0U2VsZWN0ZWQiLCJvVGFibGVMb2NhbCIsInN1bW0iLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwidW5pcXVlIiwiYXJyIiwib2JqIiwic3RyIiwia2V5cyIsInJlbW92ZUEiLCJ3aGF0IiwiYXgiLCJMIiwibGlzdGVuZXIiLCJyIiwiRXZlbnRFbWl0dGVyIiwiZ2V0TGlzdGVuZXJzIiwiX2dldEV2ZW50cyIsImZsYXR0ZW5MaXN0ZW5lcnMiLCJnZXRMaXN0ZW5lcnNBc09iamVjdCIsImFkZExpc3RlbmVyIiwib25jZSIsImFkZE9uY2VMaXN0ZW5lciIsImRlZmluZUV2ZW50IiwiZGVmaW5lRXZlbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRMaXN0ZW5lcnMiLCJtYW5pcHVsYXRlTGlzdGVuZXJzIiwicmVtb3ZlTGlzdGVuZXJzIiwicyIsIl9ldmVudHMiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0RXZlbnQiLCJfZ2V0T25jZVJldHVyblZhbHVlIiwiZW1pdCIsInNldE9uY2VSZXR1cm5WYWx1ZSIsIl9vbmNlUmV0dXJuVmFsdWUiLCJub0NvbmZsaWN0IiwiZGVmaW5lIiwiYW1kIiwibW9kdWxlIiwiZXhwb3J0cyIsImhhbmRsZUV2ZW50IiwidW5iaW5kIiwiZXZlbnRpZSIsInJlcXVpcmUiLCJnZXRJbWFnZXMiLCJqcURlZmVycmVkIiwiRGVmZXJyZWQiLCJjaGVjayIsImpRdWVyeSIsImltYWdlcyIsImFkZEltYWdlIiwiZGVidWciLCJoYXNBbnlCcm9rZW4iLCJub3RpZnkiLCJpc0NvbXBsZXRlIiwiZm4iLCJwcm9taXNlIiwiaXNDb25maXJtZWQiLCJjb25maXJtIiwibmF0dXJhbFdpZHRoIiwiaXNDaGVja2VkIiwib25sb2FkIiwidW5iaW5kUHJveHlFdmVudHMiLCJvbmVycm9yIiwiV2F5cG9pbnQiLCJFcnJvciIsImtleSIsImtleUNvdW50ZXIiLCJBZGFwdGVyIiwiYWRhcHRlciIsImF4aXMiLCJob3Jpem9udGFsIiwiZW5hYmxlZCIsInRyaWdnZXJQb2ludCIsImdyb3VwIiwiR3JvdXAiLCJmaW5kT3JDcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsImZpbmRPckNyZWF0ZUJ5RWxlbWVudCIsIm9mZnNldEFsaWFzZXMiLCJvZmZzZXQiLCJhbGxXYXlwb2ludHMiLCJxdWV1ZVRyaWdnZXIiLCJhcmdzIiwiZGlzYWJsZSIsImVuYWJsZSIsInJlZnJlc2giLCJwcmV2aW91cyIsImludm9rZUFsbCIsIm1ldGhvZCIsImFsbFdheXBvaW50c0FycmF5Iiwid2F5cG9pbnRLZXkiLCJlbmQiLCJkZXN0cm95QWxsIiwiZGlzYWJsZUFsbCIsImVuYWJsZUFsbCIsInJlZnJlc2hBbGwiLCJ2aWV3cG9ydEhlaWdodCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwidmlld3BvcnRXaWR0aCIsImNsaWVudFdpZHRoIiwiYWRhcHRlcnMiLCJjb250aW51b3VzIiwiYm90dG9tLWluLXZpZXciLCJvdXRlckhlaWdodCIsInJpZ2h0LWluLXZpZXciLCJpbm5lcldpZHRoIiwib3V0ZXJXaWR0aCIsInJlcXVlc3RBbmltYXRpb25GcmFtZVNoaW0iLCJkaWRTY3JvbGwiLCJkaWRSZXNpemUiLCJvbGRTY3JvbGwiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwid2F5cG9pbnRzIiwidmVydGljYWwiLCJ3YXlwb2ludENvbnRleHRLZXkiLCJjb250ZXh0cyIsImNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIiLCJjcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyIiwib2xkV2luZG93TG9hZCIsIndheXBvaW50IiwiY2hlY2tFbXB0eSIsImhvcml6b250YWxFbXB0eSIsImlzRW1wdHlPYmplY3QiLCJ2ZXJ0aWNhbEVtcHR5IiwicmVzaXplSGFuZGxlciIsImhhbmRsZVJlc2l6ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNjcm9sbEhhbmRsZXIiLCJoYW5kbGVTY3JvbGwiLCJpc1RvdWNoIiwidHJpZ2dlcmVkR3JvdXBzIiwiYXhlcyIsIm5ld1Njcm9sbCIsImJhY2t3YXJkIiwiYXhpc0tleSIsImlzRm9yd2FyZCIsIndhc0JlZm9yZVRyaWdnZXJQb2ludCIsIm5vd0FmdGVyVHJpZ2dlclBvaW50IiwiY3Jvc3NlZEZvcndhcmQiLCJjcm9zc2VkQmFja3dhcmQiLCJncm91cEtleSIsImZsdXNoVHJpZ2dlcnMiLCJpc1dpbmRvdyIsImNvbnRleHRPZmZzZXQiLCJjb250ZXh0U2Nyb2xsIiwiY29udGV4dERpbWVuc2lvbiIsIm9mZnNldFByb3AiLCJjb250ZXh0TW9kaWZpZXIiLCJ3YXNCZWZvcmVTY3JvbGwiLCJub3dBZnRlclNjcm9sbCIsInRyaWdnZXJlZEJhY2t3YXJkIiwidHJpZ2dlcmVkRm9yd2FyZCIsImFkanVzdG1lbnQiLCJvbGRUcmlnZ2VyUG9pbnQiLCJlbGVtZW50T2Zmc2V0IiwiZnJlc2hXYXlwb2ludCIsImNlaWwiLCJmaW5kQnlFbGVtZW50IiwiY29udGV4dElkIiwicmVxdWVzdEZuIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYnlUcmlnZ2VyUG9pbnQiLCJieVJldmVyc2VUcmlnZ2VyUG9pbnQiLCJjbGVhclRyaWdnZXJRdWV1ZXMiLCJncm91cHMiLCJ0cmlnZ2VyUXVldWVzIiwic29ydCIsImluZGV4IiwiaW5BcnJheSIsImlzTGFzdCIsImZpcnN0IiwibGFzdCIsImdldFdpbmRvdyIsIk5vRnJhbWV3b3JrQWRhcHRlciIsImhhbmRsZXJzIiwiaXNXaW4iLCJsaXN0ZW5lcnMiLCJldmVudFBhcnRzIiwibmFtZXNwYWNlIiwibnMiLCJvd25lckRvY3VtZW50Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJuc0hhbmRsZXJzIiwibnNUeXBlTGlzdCIsImluY2x1ZGVNYXJnaW4iLCJjb21wdXRlZFN0eWxlIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWVyZ2UiLCJhcnJheSIsImZhY3RvcnkiLCJlbmNvZGUiLCJjb25maWciLCJyYXciLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnlDb29raWVWYWx1ZSIsImpzb24iLCJwYXJzZUNvb2tpZVZhbHVlIiwicGx1c2VzIiwicmVhZCIsImNvbnZlcnRlciIsImlzRnVuY3Rpb24iLCJleHBpcmVzIiwiZGF5cyIsInNldFRpbWUiLCJ0b1VUQ1N0cmluZyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWVzIiwicGFydHMiLCJyZW1vdmVDb29raWUiLCJleHBvcnROYW1lIiwic2V0VGltZW91dENvbnRleHQiLCJ0aW1lb3V0IiwiYmluZEZuIiwiaW52b2tlQXJyYXlBcmciLCJhcmciLCJpdGVyYXRvciIsImRlc3QiLCJpbmhlcml0IiwiY2hpbGQiLCJiYXNlIiwiY2hpbGRQIiwiYmFzZVAiLCJjcmVhdGUiLCJfc3VwZXIiLCJib29sT3JGbiIsIlRZUEVfRlVOQ1RJT04iLCJpZlVuZGVmaW5lZCIsInZhbDEiLCJ2YWwyIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJ0eXBlcyIsInNwbGl0U3RyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJub2RlIiwiaW5TdHIiLCJ0cmltIiwiZmluZEJ5S2V5IiwidG9BcnJheSIsInVuaXF1ZUFycmF5IiwicmVzdWx0cyIsInZhbHVlcyIsImNhbWVsUHJvcCIsIlZFTkRPUl9QUkVGSVhFUyIsInVuaXF1ZUlkIiwiX3VuaXF1ZUlkIiwiZ2V0V2luZG93Rm9yRWxlbWVudCIsImRvYyIsInBhcmVudFdpbmRvdyIsIklucHV0IiwibWFuYWdlciIsImlucHV0VGFyZ2V0IiwiZG9tSGFuZGxlciIsImV2IiwiY3JlYXRlSW5wdXRJbnN0YW5jZSIsIlR5cGUiLCJpbnB1dENsYXNzIiwiU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyIsIlBvaW50ZXJFdmVudElucHV0IiwiU1VQUE9SVF9PTkxZX1RPVUNIIiwiVG91Y2hJbnB1dCIsIlNVUFBPUlRfVE9VQ0giLCJUb3VjaE1vdXNlSW5wdXQiLCJNb3VzZUlucHV0IiwiaW5wdXRIYW5kbGVyIiwiaW5wdXQiLCJwb2ludGVyc0xlbiIsInBvaW50ZXJzIiwiY2hhbmdlZFBvaW50ZXJzTGVuIiwiY2hhbmdlZFBvaW50ZXJzIiwiaXNGaXJzdCIsIklOUFVUX1NUQVJUIiwiaXNGaW5hbCIsIklOUFVUX0VORCIsIklOUFVUX0NBTkNFTCIsInNlc3Npb24iLCJjb21wdXRlSW5wdXREYXRhIiwicmVjb2duaXplIiwicHJldklucHV0IiwicG9pbnRlcnNMZW5ndGgiLCJmaXJzdElucHV0Iiwic2ltcGxlQ2xvbmVJbnB1dERhdGEiLCJmaXJzdE11bHRpcGxlIiwib2Zmc2V0Q2VudGVyIiwiY2VudGVyIiwiZ2V0Q2VudGVyIiwidGltZVN0YW1wIiwibm93IiwiZGVsdGFUaW1lIiwiYW5nbGUiLCJnZXRBbmdsZSIsImRpc3RhbmNlIiwiZ2V0RGlzdGFuY2UiLCJjb21wdXRlRGVsdGFYWSIsIm9mZnNldERpcmVjdGlvbiIsImRlbHRhWCIsImRlbHRhWSIsInNjYWxlIiwiZ2V0U2NhbGUiLCJyb3RhdGlvbiIsImdldFJvdGF0aW9uIiwiY29tcHV0ZUludGVydmFsSW5wdXREYXRhIiwic3JjRXZlbnQiLCJvZmZzZXREZWx0YSIsInByZXZEZWx0YSIsInZlbG9jaXR5IiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwibGFzdEludGVydmFsIiwiQ09NUFVURV9JTlRFUlZBTCIsImdldFZlbG9jaXR5Iiwicm91bmQiLCJESVJFQ1RJT05fTEVGVCIsIkRJUkVDVElPTl9SSUdIVCIsIkRJUkVDVElPTl9VUCIsIkRJUkVDVElPTl9ET1dOIiwicDEiLCJwMiIsInByb3BzIiwiUFJPUFNfWFkiLCJzcXJ0IiwiYXRhbjIiLCJQSSIsIlBST1BTX0NMSUVOVF9YWSIsImV2RWwiLCJNT1VTRV9FTEVNRU5UX0VWRU5UUyIsImV2V2luIiwiTU9VU0VfV0lORE9XX0VWRU5UUyIsImFsbG93IiwicHJlc3NlZCIsIlBPSU5URVJfRUxFTUVOVF9FVkVOVFMiLCJQT0lOVEVSX1dJTkRPV19FVkVOVFMiLCJzdG9yZSIsInBvaW50ZXJFdmVudHMiLCJTaW5nbGVUb3VjaElucHV0IiwiZXZUYXJnZXQiLCJTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyIsIlNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTIiwibm9ybWFsaXplU2luZ2xlVG91Y2hlcyIsImFsbCIsInRvdWNoZXMiLCJjaGFuZ2VkIiwiY2hhbmdlZFRvdWNoZXMiLCJUT1VDSF9UQVJHRVRfRVZFTlRTIiwidGFyZ2V0SWRzIiwiZ2V0VG91Y2hlcyIsImFsbFRvdWNoZXMiLCJJTlBVVF9NT1ZFIiwiaWRlbnRpZmllciIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVGFyZ2V0VG91Y2hlcyIsImZpbHRlciIsIm1vdXNlIiwiVG91Y2hBY3Rpb24iLCJjbGVhblRvdWNoQWN0aW9ucyIsImFjdGlvbnMiLCJUT1VDSF9BQ1RJT05fTk9ORSIsImhhc1BhblgiLCJUT1VDSF9BQ1RJT05fUEFOX1giLCJoYXNQYW5ZIiwiVE9VQ0hfQUNUSU9OX1BBTl9ZIiwiVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiIsIlRPVUNIX0FDVElPTl9BVVRPIiwiUmVjb2duaXplciIsInN0YXRlIiwiU1RBVEVfUE9TU0lCTEUiLCJzaW11bHRhbmVvdXMiLCJyZXF1aXJlRmFpbCIsInN0YXRlU3RyIiwiU1RBVEVfQ0FOQ0VMTEVEIiwiU1RBVEVfRU5ERUQiLCJTVEFURV9DSEFOR0VEIiwiU1RBVEVfQkVHQU4iLCJkaXJlY3Rpb25TdHIiLCJnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyIiwib3RoZXJSZWNvZ25pemVyIiwicmVjb2duaXplciIsIkF0dHJSZWNvZ25pemVyIiwiUGFuUmVjb2duaXplciIsInBYIiwicFkiLCJQaW5jaFJlY29nbml6ZXIiLCJQcmVzc1JlY29nbml6ZXIiLCJfdGltZXIiLCJfaW5wdXQiLCJSb3RhdGVSZWNvZ25pemVyIiwiU3dpcGVSZWNvZ25pemVyIiwiVGFwUmVjb2duaXplciIsInBUaW1lIiwicENlbnRlciIsImNvdW50IiwicmVjb2duaXplcnMiLCJwcmVzZXQiLCJNYW5hZ2VyIiwidG91Y2hBY3Rpb24iLCJ0b2dnbGVDc3NQcm9wcyIsIml0ZW0iLCJyZWNvZ25pemVXaXRoIiwicmVxdWlyZUZhaWx1cmUiLCJjc3NQcm9wcyIsInRyaWdnZXJEb21FdmVudCIsImRhdGEiLCJnZXN0dXJlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImdlc3R1cmUiLCJkaXNwYXRjaEV2ZW50IiwiVEVTVF9FTEVNRU5UIiwiTU9CSUxFX1JFR0VYIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiSU5QVVRfVFlQRV9UT1VDSCIsIklOUFVUX1RZUEVfUEVOIiwiSU5QVVRfVFlQRV9NT1VTRSIsIklOUFVUX1RZUEVfS0lORUNUIiwiTU9VU0VfSU5QVVRfTUFQIiwibW91c2Vkb3duIiwibW91c2V1cCIsIndoaWNoIiwicG9pbnRlclR5cGUiLCJQT0lOVEVSX0lOUFVUX01BUCIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVyY2FuY2VsIiwicG9pbnRlcm91dCIsIklFMTBfUE9JTlRFUl9UWVBFX0VOVU0iLDIsMyw0LDUsIk1TUG9pbnRlckV2ZW50IiwicmVtb3ZlUG9pbnRlciIsImV2ZW50VHlwZU5vcm1hbGl6ZWQiLCJzdG9yZUluZGV4IiwicG9pbnRlcklkIiwiU0lOR0xFX1RPVUNIX0lOUFVUX01BUCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwidG91Y2hjYW5jZWwiLCJUT1VDSF9JTlBVVF9NQVAiLCJpbnB1dEV2ZW50IiwiaW5wdXREYXRhIiwiaXNNb3VzZSIsIlBSRUZJWEVEX1RPVUNIX0FDVElPTiIsIk5BVElWRV9UT1VDSF9BQ1RJT04iLCJUT1VDSF9BQ1RJT05fQ09NUFVURSIsImNvbXB1dGUiLCJnZXRUb3VjaEFjdGlvbiIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnRlZCIsImhhc05vbmUiLCJwcmV2ZW50U3JjIiwiU1RBVEVfUkVDT0dOSVpFRCIsIlNUQVRFX0ZBSUxFRCIsImRyb3BSZWNvZ25pemVXaXRoIiwiZHJvcFJlcXVpcmVGYWlsdXJlIiwiaGFzUmVxdWlyZUZhaWx1cmVzIiwiY2FuUmVjb2duaXplV2l0aCIsIndpdGhTdGF0ZSIsInRyeUVtaXQiLCJjYW5FbWl0IiwiaW5wdXREYXRhQ2xvbmUiLCJwcm9jZXNzIiwicmVzZXQiLCJhdHRyVGVzdCIsIm9wdGlvblBvaW50ZXJzIiwiaXNSZWNvZ25pemVkIiwiaXNWYWxpZCIsInRocmVzaG9sZCIsImRpcmVjdGlvblRlc3QiLCJoYXNNb3ZlZCIsImluT3V0IiwidmFsaWRQb2ludGVycyIsInZhbGlkTW92ZW1lbnQiLCJ2YWxpZFRpbWUiLCJ0YXBzIiwiaW50ZXJ2YWwiLCJwb3NUaHJlc2hvbGQiLCJ2YWxpZFRvdWNoVGltZSIsImZhaWxUaW1lb3V0IiwidmFsaWRJbnRlcnZhbCIsInZhbGlkTXVsdGlUYXAiLCJ0YXBDb3VudCIsIlZFUlNJT04iLCJkb21FdmVudHMiLCJ1c2VyU2VsZWN0IiwidG91Y2hTZWxlY3QiLCJ0b3VjaENhbGxvdXQiLCJjb250ZW50Wm9vbWluZyIsInVzZXJEcmFnIiwidGFwSGlnaGxpZ2h0Q29sb3IiLCJTVE9QIiwiRk9SQ0VEX1NUT1AiLCJmb3JjZSIsImN1clJlY29nbml6ZXIiLCJleGlzdGluZyIsImV2ZW50cyIsIlRhcCIsIlBhbiIsIlN3aXBlIiwiUGluY2giLCJSb3RhdGUiLCJQcmVzcyIsIm5vb3AiLCJkZWZpbmVCcmlkZ2V0IiwiYWRkT3B0aW9uTWV0aG9kIiwiUGx1Z2luQ2xhc3MiLCJvcHRzIiwiaXNQbGFpbk9iamVjdCIsImJyaWRnZSIsImxlbiIsImVsZW0iLCJsb2dFcnJvciIsIl9pbml0IiwibWVzc2FnZSIsImVycm9yIiwiYnJpZGdldCIsImNsYXNzUmVnIiwidG9nZ2xlQ2xhc3MiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImNsYXNzaWUiLCJoYXMiLCJ0b2dnbGUiLCJpbmRleE9mTGlzdGVuZXIiLCJhbGlhcyIsInByb3RvIiwib3JpZ2luYWxHbG9iYWxWYWx1ZSIsImV2dCIsInJlc3BvbnNlIiwiZmxhdExpc3RlbmVycyIsImxpc3RlbmVySXNXcmFwcGVkIiwiZXZ0cyIsInNpbmdsZSIsIm11bHRpcGxlIiwiZ2V0SUVFdmVudCIsImRvY0VsZW0iLCJlcnIiLCJnZXRTdHlsZVByb3BlcnR5IiwicHJvcE5hbWUiLCJkb2NFbGVtU3R5bGUiLCJwcmVmaXhlcyIsImdldFN0eWxlU2l6ZSIsIm51bSIsImlzTmFOIiwiZ2V0WmVyb1NpemUiLCJzaXplIiwibWVhc3VyZW1lbnRzIiwibWVhc3VyZW1lbnQiLCJkZWZpbmVHZXRTaXplIiwic2V0dXAiLCJpc1NldHVwIiwiZ2V0U3R5bGVGbiIsImJveFNpemluZ1Byb3AiLCJkaXYiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImlzQm94U2l6ZU91dGVyIiwiZ2V0U2l6ZSIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXRIZWlnaHQiLCJpc0JvcmRlckJveCIsIm11bmdlTm9uUGl4ZWwiLCJwYWRkaW5nV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdIZWlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcmdpbldpZHRoIiwibWFyZ2luSGVpZ2h0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckhlaWdodCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJpc0JvcmRlckJveFNpemVPdXRlciIsInN0eWxlV2lkdGgiLCJzdHlsZUhlaWdodCIsInJzIiwicnVudGltZVN0eWxlIiwicnNMZWZ0IiwicGl4ZWxMZWZ0IiwiZG9jUmVhZHkiLCJxdWV1ZSIsIm9uUmVhZHkiLCJpc0lFOE5vdFJlYWR5IiwicmVhZHlTdGF0ZSIsImRlZmluZURvY1JlYWR5IiwiRWxlbVByb3RvIiwibWF0Y2giLCJzZWxlY3RvciIsIm1hdGNoZXNNZXRob2QiLCJjaGVja1BhcmVudCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInF1ZXJ5IiwiZWxlbXMiLCJtYXRjaENoaWxkIiwibWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlcyIsInN1cHBvcnRzT3JwaGFucyIsIkVsZW1lbnQiLCJmaXp6eVVJVXRpbHMiLCJtb2R1bG8iLCJvYmpUb1N0cmluZyIsIm1ha2VBcnJheSIsImFyeSIsInJlbW92ZUZyb20iLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsInNldFRleHQiLCJzZXRUZXh0UHJvcGVydHkiLCJ0ZXh0Q29udGVudCIsImdldFBhcmVudCIsImdldFF1ZXJ5RWxlbWVudCIsImZpbHRlckZpbmRFbGVtZW50cyIsImZmRWxlbXMiLCJjaGlsZEVsZW1zIiwiakxlbiIsImRlYm91bmNlTWV0aG9kIiwiX2NsYXNzIiwibWV0aG9kTmFtZSIsInRpbWVvdXROYW1lIiwiX3RoaXMiLCJ0b0Rhc2hlZCIsIiQxIiwiJDIiLCJodG1sSW5pdCIsIldpZGdldENsYXNzIiwiZGFzaGVkTmFtZXNwYWNlIiwiZGF0YUF0dHIiLCJGbGlja2l0eSIsIkNlbGwiLCJpc0lFOCIsInNpZGUiLCJvcmlnaW5TaWRlIiwic2V0UG9zaXRpb24iLCJzZXREZWZhdWx0VGFyZ2V0IiwicmVuZGVyUG9zaXRpb24iLCJtYXJnaW5Qcm9wZXJ0eSIsImNlbGxBbGlnbiIsImdldFBvc2l0aW9uVmFsdWUiLCJ3cmFwU2hpZnQiLCJzbGlkZWFibGVXaWR0aCIsImFuaW1hdGVQcm90b3R5cGUiLCJsYXN0VGltZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY3VyclRpbWUiLCJ0aW1lVG9DYWxsIiwic3RhcnRBbmltYXRpb24iLCJyZXN0aW5nRnJhbWVzIiwiYXBwbHlEcmFnRm9yY2UiLCJhcHBseVNlbGVjdGVkQXR0cmFjdGlvbiIsInByZXZpb3VzWCIsImludGVncmF0ZVBoeXNpY3MiLCJwb3NpdGlvblNsaWRlciIsInNldHRsZSIsInRyYW5zZm9ybVByb3BlcnR5IiwiaXMzZCIsIndyYXBBcm91bmQiLCJjZWxscyIsInNoaWZ0V3JhcENlbGxzIiwiY3Vyc29yUG9zaXRpb24iLCJyaWdodFRvTGVmdCIsInNsaWRlciIsInBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCIsInNlbGVjdGVkQ2VsbCIsInNlbGVjdGVkSW5kZXgiLCJwZXJjZW50UG9zaXRpb24iLCJpc1BvaW50ZXJEb3duIiwiaXNGcmVlU2Nyb2xsaW5nIiwiYmVmb3JlR2FwIiwiX3NoaWZ0Q2VsbHMiLCJiZWZvcmVTaGlmdENlbGxzIiwiYWZ0ZXJHYXAiLCJhZnRlclNoaWZ0Q2VsbHMiLCJnYXAiLCJjZWxsIiwiY2VsbFNoaWZ0IiwiX3Vuc2hpZnRDZWxscyIsImFjY2VsIiwiZ2V0RnJpY3Rpb25GYWN0b3IiLCJhcHBseUZvcmNlIiwiZ2V0UmVzdGluZ1Bvc2l0aW9uIiwiZHJhZ1ZlbG9jaXR5IiwiZHJhZ1giLCJkcmFnRm9yY2UiLCJ3cmFwIiwiZmxvb3IiLCJzZWxlY3RlZEF0dHJhY3Rpb24iLCJfRmxpY2tpdHkiLCJtb3ZlRWxlbWVudHMiLCJ0b0VsZW0iLCJxdWVyeUVsZW1lbnQiLCIkZWxlbWVudCIsIl9jcmVhdGUiLCJHVUlEIiwiYWNjZXNzaWJpbGl0eSIsImZyZWVTY3JvbGxGcmljdGlvbiIsImZyaWN0aW9uIiwic2V0R2FsbGVyeVNpemUiLCJjcmVhdGVNZXRob2RzIiwiZ3VpZCIsImZsaWNraXR5R1VJRCIsImluaXRpYWxJbmRleCIsInZpZXdwb3J0Iiwic2V0VW5zZWxlY3RhYmxlIiwiX2NyZWF0ZVNsaWRlciIsIndhdGNoQ1NTIiwiaXNSZXNpemVCb3VuZCIsImFjdGl2YXRlIiwiY2VsbEVsZW1zIiwiX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMiLCJyZWxvYWRDZWxscyIsInRhYkluZGV4Iiwic2VsZWN0IiwiY2VsbFNlbGVjdG9yIiwiX21ha2VDZWxscyIsInBvc2l0aW9uQ2VsbHMiLCJfZ2V0V3JhcFNoaWZ0Q2VsbHMiLCJnZXRMYXN0Q2VsbCIsIl9zaXplQ2VsbHMiLCJfcG9zaXRpb25DZWxscyIsIm1heENlbGxIZWlnaHQiLCJjZWxsWCIsInN0YXJ0Q2VsbCIsIl9jb250YWluQ2VsbHMiLCJyZXBvc2l0aW9uIiwic2V0Q2VsbEFsaWduIiwiY2VsbEFsaWduU2hvcnRoYW5kcyIsInNob3J0aGFuZCIsImdhcFgiLCJjZWxsSW5kZXgiLCJfZ2V0R2FwQ2VsbHMiLCJpbmNyZW1lbnQiLCJjb250YWluIiwic3RhcnRNYXJnaW4iLCJlbmRNYXJnaW4iLCJmaXJzdENlbGxTdGFydE1hcmdpbiIsImxhc3RDZWxsIiwiY29udGVudFdpZHRoIiwiZW5kTGltaXQiLCJpc0NvbnRlbnRTbWFsbGVyIiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJFdmVudCIsImlzV3JhcCIsInNldFNlbGVjdGVkQ2VsbCIsIl9yZW1vdmVTZWxlY3RlZENlbGxDbGFzcyIsInNlbGVjdGVkRWxlbWVudCIsImdldENlbGwiLCJnZXRDZWxscyIsImdldENlbGxFbGVtZW50cyIsImdldFBhcmVudENlbGwiLCJnZXRBZGphY2VudENlbGxFbGVtZW50cyIsImFkakNvdW50IiwidWlDaGFuZ2UiLCJjaGlsZFVJUG9pbnRlckRvd24iLCJvbnJlc2l6ZSIsInN1cHBvcnRzQ29uZGl0aW9uYWxDU1MiLCJzdXBwb3J0cyIsImFmdGVyQ29udGVudCIsImNvbnRlbnQiLCJ3YXRjaE9wdGlvbiIsImRlYWN0aXZhdGUiLCJvbmtleWRvd24iLCJhY3RpdmVFbGVtZW50IiwibGVmdE1ldGhvZCIsInJpZ2h0TWV0aG9kIiwicmVtb3ZlRGF0YSIsIlVuaXBvaW50ZXIiLCJiaW5kU3RhcnRFdmVudCIsIl9iaW5kU3RhcnRFdmVudCIsInVuYmluZFN0YXJ0RXZlbnQiLCJpc0JpbmQiLCJiaW5kTWV0aG9kIiwicG9pbnRlckVuYWJsZWQiLCJtc1BvaW50ZXJFbmFibGVkIiwiZ2V0VG91Y2giLCJwb2ludGVySWRlbnRpZmllciIsIm9ubW91c2Vkb3duIiwiX3BvaW50ZXJEb3duIiwib250b3VjaHN0YXJ0Iiwib25NU1BvaW50ZXJEb3duIiwib25wb2ludGVyZG93biIsInBvaW50ZXIiLCJwb2ludGVyRG93biIsIl9iaW5kUG9zdFN0YXJ0RXZlbnRzIiwicG9zdFN0YXJ0RXZlbnRzIiwiTVNQb2ludGVyRG93biIsImV2bnQiLCJfYm91bmRQb2ludGVyRXZlbnRzIiwiX3VuYmluZFBvc3RTdGFydEV2ZW50cyIsIm9ubW91c2Vtb3ZlIiwiX3BvaW50ZXJNb3ZlIiwib25NU1BvaW50ZXJNb3ZlIiwib25wb2ludGVybW92ZSIsIm9udG91Y2htb3ZlIiwicG9pbnRlck1vdmUiLCJvbm1vdXNldXAiLCJfcG9pbnRlclVwIiwib25NU1BvaW50ZXJVcCIsIm9ucG9pbnRlcnVwIiwib250b3VjaGVuZCIsIl9wb2ludGVyRG9uZSIsInBvaW50ZXJVcCIsInBvaW50ZXJEb25lIiwib25NU1BvaW50ZXJDYW5jZWwiLCJvbnBvaW50ZXJjYW5jZWwiLCJfcG9pbnRlckNhbmNlbCIsIm9udG91Y2hjYW5jZWwiLCJwb2ludGVyQ2FuY2VsIiwiZ2V0UG9pbnRlclBvaW50IiwicGFnZVgiLCJwYWdlWSIsIlVuaWRyYWdnZXIiLCJwcmV2ZW50RGVmYXVsdEV2ZW50Iiwibm9EcmFnU3RhcnQiLCJiaW5kSGFuZGxlcyIsIl9iaW5kSGFuZGxlcyIsInVuYmluZEhhbmRsZXMiLCJiaW5kZXJFeHRyYSIsImhhbmRsZSIsIm1zVG91Y2hBY3Rpb24iLCJkaXNhYmxlSW1nT25kcmFnc3RhcnQiLCJoYW5kbGVzIiwib25kcmFnc3RhcnQiLCJfZHJhZ1BvaW50ZXJEb3duIiwiZm9jdXNlZCIsImJsdXIiLCJwb2ludGVyRG93blNjcm9sbCIsImdldFNjcm9sbFBvc2l0aW9uIiwicG9pbnRlckRvd25Qb2ludCIsImlzVG91Y2hzdGFydCIsInRhcmdldE5vZGVOYW1lIiwibW92ZVZlY3RvciIsIl9kcmFnUG9pbnRlck1vdmUiLCJfZHJhZ01vdmUiLCJtb3ZlUG9pbnQiLCJpc0RyYWdnaW5nIiwiaGFzRHJhZ1N0YXJ0ZWQiLCJfZHJhZ1N0YXJ0IiwiX2RyYWdQb2ludGVyVXAiLCJfZHJhZ0VuZCIsIl9zdGF0aWNDbGljayIsImRyYWdTdGFydFBvaW50IiwiaXNQcmV2ZW50aW5nQ2xpY2tzIiwiZHJhZ1N0YXJ0IiwiZHJhZ01vdmUiLCJkcmFnRW5kIiwib25jbGljayIsImlzSWdub3JpbmdNb3VzZVVwIiwiZm9jdXMiLCJzdGF0aWNDbGljayIsIm9uc2Nyb2xsIiwic2Nyb2xsIiwic2Nyb2xsTW92ZVgiLCJzY3JvbGxNb3ZlWSIsImlzUGFnZU9mZnNldCIsImdldFBvaW50ZXJXaW5kb3dZIiwicG9pbnRlclBvaW50IiwiZHJhZ2dhYmxlIiwidG91Y2hWZXJ0aWNhbFNjcm9sbCIsIl9jcmVhdGVEcmFnIiwiYmluZERyYWciLCJfdWlDaGFuZ2VEcmFnIiwiX2NoaWxkVUlQb2ludGVyRG93bkRyYWciLCJ1bmJpbmREcmFnIiwiaXNEcmFnQm91bmQiLCJwb2ludGVyRG93bkZvY3VzIiwidG91Y2hTdGFydEV2ZW50cyIsImZvY3VzTm9kZXMiLCJJTlBVVCIsIlNFTEVDVCIsInRvdWNoVmVydGljYWxTY3JvbGxNb3ZlIiwiaXNUb3VjaFNjcm9sbGluZyIsInRvdWNoU2Nyb2xsRXZlbnRzIiwiTVNQb2ludGVyTW92ZSIsImNhbk5vdFNjcm9sbCIsInN0YXJ0U2Nyb2xsWSIsInBvaW50ZXJXaW5kb3dTdGFydFkiLCJkcmFnU3RhcnRQb3NpdGlvbiIsInByZXZpb3VzRHJhZ1giLCJvcmlnaW5Cb3VuZCIsImVuZEJvdW5kIiwiZHJhZ01vdmVUaW1lIiwiZnJlZVNjcm9sbCIsImRyYWdFbmRSZXN0aW5nU2VsZWN0IiwicmVzdGluZ1giLCJkcmFnRW5kQm9vc3RTZWxlY3QiLCJnZXRDZWxsRGlzdGFuY2UiLCJwb3NpdGl2ZVJlc3RpbmciLCJfZ2V0Q2xvc2VzdFJlc3RpbmciLCJuZWdhdGl2ZVJlc3RpbmciLCJtaW5EaXN0YW5jZSIsImNvbmRpdGlvbiIsIm1kIiwiaXNXcmFwQXJvdW5kIiwiZGVsdGEiLCJjbGlja2VkQ2VsbCIsImNlbGxFbGVtIiwiVGFwTGlzdGVuZXIiLCJiaW5kVGFwIiwidW5iaW5kVGFwIiwidGFwRWxlbWVudCIsImJvdW5kaW5nUmVjdCIsInNjcm9sbFgiLCJzY3JvbGxZIiwiaXNJbnNpZGUiLCJQcmV2TmV4dEJ1dHRvbiIsImdldEFycm93TW92ZW1lbnRzIiwic2hhcGUiLCJ4MCIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJzdmdVUkkiLCJzdXBwb3J0c0lubGluZVNWRyIsImNoZWNrU3VwcG9ydCIsIm5hbWVzcGFjZVVSSSIsImlzRW5hYmxlZCIsImlzUHJldmlvdXMiLCJsZWZ0RGlyZWN0aW9uIiwiaXNMZWZ0IiwiY3JlYXRlU1ZHIiwic2V0QXJyb3dUZXh0Iiwib25DZWxsU2VsZWN0Iiwib25UYXAiLCJwYXRoTW92ZW1lbnRzIiwiYXJyb3dTaGFwZSIsInBhcmVudE9wdGlvbnMiLCJhcnJvd1RleHQiLCJsZWZ0QXJyb3dUZXh0IiwicmlnaHRBcnJvd1RleHQiLCJkaXNhYmxlZCIsImxhc3RJbmRleCIsImJvdW5kSW5kZXgiLCJwcmV2TmV4dEJ1dHRvbnMiLCJfY3JlYXRlUHJldk5leHRCdXR0b25zIiwiYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMiLCJkZWFjdGl2YXRlUHJldk5leHRCdXR0b25zIiwiUGFnZURvdHMiLCJob2xkZXIiLCJkb3RzIiwidXBkYXRlU2VsZWN0ZWQiLCJzZXREb3RzIiwiYWRkRG90cyIsInJlbW92ZURvdHMiLCJuZXdEb3RzIiwiZG90Iiwic2VsZWN0ZWREb3QiLCJwYWdlRG90cyIsIl9jcmVhdGVQYWdlRG90cyIsImFjdGl2YXRlUGFnZURvdHMiLCJvbkNlbGxBZGRlZFJlbW92ZWRQYWdlRG90cyIsImRlYWN0aXZhdGVQYWdlRG90cyIsIlBsYXllciIsImlzUGxheWluZyIsInZpc2liaWxpdHlFdmVudCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsImhpZGRlblByb3BlcnR5IiwicGxheSIsImlzUGF1c2VkIiwidGljayIsInRpY2tUaW1lIiwiY2xlYXIiLCJpc0hpZGRlbiIsIl9jcmVhdGVQbGF5ZXIiLCJwbGF5ZXIiLCJhY3RpdmF0ZVBsYXllciIsInN0b3BQbGF5ZXIiLCJkZWFjdGl2YXRlUGxheWVyIiwiaXNNb3VzZWVudGVyQm91bmQiLCJvbm1vdXNlZW50ZXIiLCJvbm1vdXNlbGVhdmUiLCJnZXRDZWxsc0ZyYWdtZW50IiwiaW5zZXJ0IiwiaXNBcHBlbmQiLCJpbnNlcnRDZWxsRWxlbWVudCIsImVuZENlbGxzIiwic2VsZWN0ZWRJbmRleERlbHRhIiwiX2NlbGxBZGRlZFJlbW92ZWQiLCJwcmVwZW5kIiwid2FzQmVmb3JlIiwiY2hhbmdlZENlbGxJbmRleCIsImNlbGxDaGFuZ2UiLCJjZWxsU2l6ZUNoYW5nZSIsImlzUG9zaXRpb25pbmdTbGlkZXIiLCJwcmV2U2xpZGVhYmxlV2lkdGgiLCJnZXRDZWxsTGF6eUltYWdlcyIsImltZ3MiLCJMYXp5TG9hZGVyIiwiZmxpY2tpdHkiLCJfY3JlYXRlTGF6eWxvYWQiLCJsYXp5TG9hZCIsImxhenlJbWFnZXMiLCJsYXp5Q2VsbEltYWdlcyIsIl9jcmVhdGVBc05hdkZvciIsImFjdGl2YXRlQXNOYXZGb3IiLCJkZWFjdGl2YXRlQXNOYXZGb3IiLCJkZXN0cm95QXNOYXZGb3IiLCJhc05hdkZvck9wdGlvbiIsImFzTmF2Rm9yIiwic2V0TmF2Q29tcGFuaW9uIiwiY29tcGFuaW9uIiwibmF2Q29tcGFuaW9uIiwib25OYXZDb21wYW5pb25TZWxlY3QiLCJuYXZDb21wYW5pb25TZWxlY3QiLCJvbk5hdlN0YXRpY0NsaWNrIiwicmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50IiwibmF2U2VsZWN0ZWRFbGVtZW50IiwiY2VsbEVsZW1lbnQiLCJJbWFnZXNMb2FkZWQiLCJvbkFsd2F5cyIsIkxvYWRpbmdJbWFnZSIsIlJlc291cmNlIiwiY2FjaGUiLCJoYXNDb25zb2xlIiwibG9hZGluZ0ltYWdlIiwib25Db25maXJtIiwiY2hlY2tlZENvdW50IiwianFNZXRob2QiLCJyZXNvdXJjZSIsInJlc3JjIiwicHJveHlJbWFnZSIsIl9jcmVhdGVJbWFnZXNMb2FkZWQiLCJvbkltYWdlc0xvYWRlZFByb2dyZXNzIiwiT3V0bGF5ZXIiLCJJdGVtIiwiaXNFbXB0eU9iaiIsImxheW91dCIsInRvRGFzaGVkQWxsIiwidHJhbnNpdGlvblByb3BlcnR5Iiwic3VwcG9ydHNDU1MzIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJwcmVmaXhhYmxlUHJvcGVydGllcyIsInZlbmRvclByb3BlcnRpZXMiLCJzdXBwb3J0ZWRQcm9wIiwiX3RyYW5zbiIsImluZ1Byb3BlcnRpZXMiLCJjbGVhbiIsIm9uRW5kIiwiY3NzIiwiZWxlbVN0eWxlIiwiZ2V0UG9zaXRpb24iLCJsYXlvdXRPcHRpb25zIiwiaXNPcmlnaW5MZWZ0IiwiaXNPcmlnaW5Ub3AiLCJ4VmFsdWUiLCJ5VmFsdWUiLCJsYXlvdXRTaXplIiwibGF5b3V0UG9zaXRpb24iLCJ4UGFkZGluZyIsInhQcm9wZXJ0eSIsInhSZXNldFByb3BlcnR5IiwiZ2V0WFZhbHVlIiwieVBhZGRpbmciLCJ5UHJvcGVydHkiLCJ5UmVzZXRQcm9wZXJ0eSIsImdldFlWYWx1ZSIsImlzSG9yaXpvbnRhbCIsIl90cmFuc2l0aW9uVG8iLCJjdXJYIiwiY3VyWSIsImNvbXBhcmVYIiwiY29tcGFyZVkiLCJkaWROb3RNb3ZlIiwiaXNUcmFuc2l0aW9uaW5nIiwidHJhbnNYIiwidHJhbnNZIiwidHJhbnNpdGlvblN0eWxlIiwidHJhbnNmb3JtIiwiZ2V0VHJhbnNsYXRlIiwib25UcmFuc2l0aW9uRW5kIiwiaXNDbGVhbmluZyIsIm1vdmVUbyIsIl9ub25UcmFuc2l0aW9uIiwiX3JlbW92ZVN0eWxlcyIsIl90cmFuc2l0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsIm9ud2Via2l0VHJhbnNpdGlvbkVuZCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ub3RyYW5zaXRpb25lbmQiLCJkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCItbW96LXRyYW5zZm9ybSIsIi1vLXRyYW5zZm9ybSIsInByb3BlcnR5TmFtZSIsImRpc2FibGVUcmFuc2l0aW9uIiwicmVtb3ZlVHJhbnNpdGlvblN0eWxlcyIsImNsZWFuU3R5bGUiLCJjbGVhblRyYW5zaXRpb25TdHlsZSIsInJlbW92ZUVsZW0iLCJyZXZlYWwiLCJ0cmFuc2l0aW9uRW5kUHJvcGVydHkiLCJnZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5Iiwib25SZXZlYWxUcmFuc2l0aW9uRW5kIiwiaGlkZGVuU3R5bGUiLCJ2aXNpYmxlU3R5bGUiLCJzdHlsZVByb3BlcnR5Iiwib3B0aW9uU3R5bGUiLCJvbkhpZGVUcmFuc2l0aW9uRW5kIiwib3V0bGF5ZXJHVUlEIiwiaXNJbml0TGF5b3V0IiwiY29udGFpbmVyU3R5bGUiLCJpc1Jlc2l6aW5nQ29udGFpbmVyIiwicmVsb2FkSXRlbXMiLCJzdGFtcHMiLCJzdGFtcCIsImJpbmRSZXNpemUiLCJpdGVtcyIsIl9pdGVtaXplIiwiaXRlbUVsZW1zIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtU2VsZWN0b3IiLCJnZXRJdGVtRWxlbWVudHMiLCJfcmVzZXRMYXlvdXQiLCJfbWFuYWdlU3RhbXBzIiwiaXNJbnN0YW50IiwiaXNMYXlvdXRJbnN0YW50IiwiX2lzTGF5b3V0SW5pdGVkIiwibGF5b3V0SXRlbXMiLCJfZ2V0TWVhc3VyZW1lbnQiLCJfZ2V0SXRlbXNGb3JMYXlvdXQiLCJfbGF5b3V0SXRlbXMiLCJfcG9zdExheW91dCIsImlzSWdub3JlZCIsIl9lbWl0Q29tcGxldGVPbkl0ZW1zIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsIl9wcm9jZXNzTGF5b3V0UXVldWUiLCJfcG9zaXRpb25JdGVtIiwicmVzaXplQ29udGFpbmVyIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsIm1lYXN1cmUiLCJpc1dpZHRoIiwiZWxlbVNpemUiLCJvbkNvbXBsZXRlIiwiZG9uZUNvdW50IiwiaWdub3JlIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJ1bmJpbmRSZXNpemUiLCJkZWxheWVkIiwicmVzaXplVGltZW91dCIsIm5lZWRzUmVzaXplTGF5b3V0IiwiaGFzU2l6ZXMiLCJhZGRJdGVtcyIsImFwcGVuZGVkIiwicHJlcGVuZGVkIiwicHJldmlvdXNJdGVtcyIsInJldmVhbEl0ZW1FbGVtZW50cyIsImdldEl0ZW1zIiwiaGlkZUl0ZW1FbGVtZW50cyIsInJlbW92ZUl0ZW1zIiwiTGF5b3V0Iiwic2V0dGluZ3MiLCJJc290b3BlIiwiaXRlbUdVSUQiLCJzb3J0RGF0YSIsInVwZGF0ZVNvcnREYXRhIiwicmFuZG9tIiwiZ2V0U29ydERhdGEiLCJzb3J0ZXJzIiwiX3NvcnRlcnMiLCJzb3J0ZXIiLCJfZGVzdHJveSIsIkxheW91dE1vZGUiLCJpc290b3BlIiwiZmlsdGVyZWRJdGVtcyIsImdldE91dGxheWVyTWV0aG9kIiwiZmFjYWRlTWV0aG9kcyIsIm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQiLCJnZXRDb2x1bW5XaWR0aCIsImdldFNlZ21lbnRTaXplIiwiZ2V0Um93SGVpZ2h0Iiwic2VnbWVudCIsInNlZ21lbnROYW1lIiwib3V0ZXJTaXplIiwiZmlyc3RJdGVtU2l6ZSIsImdldEZpcnN0SXRlbVNpemUiLCJmaXJzdEl0ZW0iLCJtb2RlcyIsIk1vZGUiLCJNYXNvbnJ5IiwibWVhc3VyZUNvbHVtbnMiLCJjb2xzIiwiY29sWXMiLCJtYXhZIiwiZ2V0Q29udGFpbmVyV2lkdGgiLCJjb2x1bW5XaWR0aCIsImZpcnN0SXRlbUVsZW0iLCJjb250YWluZXJXaWR0aCIsImd1dHRlciIsImV4Y2VzcyIsIm1hdGhNZXRob2QiLCJjb250YWluZXIiLCJpc0ZpdFdpZHRoIiwicmVtYWluZGVyIiwiY29sU3BhbiIsImNvbEdyb3VwIiwiX2dldENvbEdyb3VwIiwibWluaW11bVkiLCJzaG9ydENvbEluZGV4Iiwic2V0SGVpZ2h0Iiwic2V0U3BhbiIsImdyb3VwQ291bnQiLCJncm91cENvbFlzIiwic3RhbXBTaXplIiwiZmlyc3RYIiwibGFzdFgiLCJmaXJzdENvbCIsImxhc3RDb2wiLCJzdGFtcE1heFkiLCJfZ2V0Q29udGFpbmVyRml0V2lkdGgiLCJ1bnVzZWRDb2xzIiwicHJldmlvdXNXaWR0aCIsIk1hc29ucnlNb2RlIiwiRml0Um93cyIsIml0ZW1XaWR0aCIsIlZlcnRpY2FsIiwiaG9yaXpvbnRhbEFsaWdubWVudCIsImdldEl0ZW1Tb3J0ZXIiLCJzb3J0QnlzIiwic29ydEFzYyIsIml0ZW1BIiwiaXRlbUIiLCJzb3J0QnkiLCJpc0FzY2VuZGluZyIsImdldFRleHQiLCJpbm5lclRleHQiLCJsYXlvdXRNb2RlIiwiaXNKUXVlcnlGaWx0ZXJpbmciLCJzb3J0QXNjZW5kaW5nIiwiX2dldFNvcnRlcnMiLCJzb3J0SGlzdG9yeSIsIl9pbml0TGF5b3V0TW9kZSIsIl91cGRhdGVJdGVtc1NvcnREYXRhIiwiaW5pdGlhbE9wdHMiLCJhcnJhbmdlIiwiX2xheW91dCIsIl9nZXRJc0luc3RhbnQiLCJoaWRlUmV2ZWFsIiwiZmlsdGVyZWQiLCJuZWVkUmV2ZWFsIiwibmVlZEhpZGUiLCJfZmlsdGVyIiwiX2JpbmRBcnJhbmdlQ29tcGxldGUiLCJfaXNJbnN0YW50IiwiX25vVHJhbnNpdGlvbiIsIl9zb3J0IiwiYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2siLCJpc0xheW91dENvbXBsZXRlIiwiaXNIaWRlQ29tcGxldGUiLCJpc1JldmVhbENvbXBsZXRlIiwiaGlkZGVuTWF0Y2hlZCIsInZpc2libGVVbm1hdGNoZWQiLCJfZ2V0RmlsdGVyVGVzdCIsImlzTWF0Y2hlZCIsImlzIiwibXVuZ2VTb3J0ZXIiLCJhdHRyTWF0Y2giLCJnZXRWYWx1ZSIsImdldFZhbHVlR2V0dGVyIiwicGFyc2VyIiwic29ydERhdGFQYXJzZXJzIiwic29ydEJ5T3B0IiwiaXRlbVNvcnRlciIsInVuc2hpZnQiLCJfbW9kZSIsIm1vZGUiLCJfZmlsdGVyUmV2ZWFsQWRkZWQiLCJmaWx0ZXJlZEluc2VydEl0ZW1zIiwiX3JlbW92ZSIsInNodWZmbGUiLCJnZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyIsIlBsdWdpbiIsIl9kZWZhdWx0cyIsIl9uYW1lIiwibW9iaWxlTWVudSIsImxhYmVsIiwiZHVwbGljYXRlIiwiZWFzaW5nT3BlbiIsImVhc2luZ0Nsb3NlIiwiY2xvc2VkU3ltYm9sIiwib3BlbmVkU3ltYm9sIiwicHJlcGVuZFRvIiwiYXBwZW5kVG8iLCJwYXJlbnRUYWciLCJjbG9zZU9uQ2xpY2siLCJhbGxvd1BhcmVudExpbmtzIiwibmVzdGVkUGFyZW50TGlua3MiLCJzaG93Q2hpbGRyZW4iLCJyZW1vdmVJZHMiLCJyZW1vdmVDbGFzc2VzIiwiYnJhbmQiLCJiZWZvcmVPcGVuIiwiYmVmb3JlQ2xvc2UiLCJhZnRlck9wZW4iLCJhZnRlckNsb3NlIiwiaWNvbkNsYXNzIiwibWVudUJhciIsIiR0aGlzIiwibWVudSIsIm1vYmlsZU5hdiIsImNsb25lIiwicmVtb3ZlQXR0ciIsImJ0biIsImNvbnRlbnRzIiwiY29udGFpbnNBbmNob3IiLCJub2RlcyIsIndyYXBFbGVtZW50Iiwid3JhcEFsbCIsIiR3cmFwIiwiYXJyb3dFbGVtZW50IiwiYWZ0ZXIiLCJjbG9zZXN0IiwiX3Zpc2liaWxpdHlUb2dnbGUiLCJfb3V0bGluZXMiLCJfbWVudVRvZ2dsZSIsIl9pdGVtQ2xpY2siLCJrZXlkb3duIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYXJyb3ciLCJ1bCIsIl9nZXRBY3Rpb25JdGVtcyIsInNsaWRlRG93biIsIl9zZXRWaXNBdHRyIiwic2xpZGVVcCIsIm5vbkhpZGRlbiIsIm5vdCIsImFuY2hvcnMiLCJvcGVuIiwiY2xvc2UiLCJyZXR1cm5zIiwicm9vdCIsIl9mbkh1bmdhcmlhbk1hcCIsIm5ld0tleSIsImh1bmdhcmlhbiIsIm1hcCIsIl9odW5nYXJpYW5NYXAiLCJfZm5DYW1lbFRvSHVuZ2FyaWFuIiwidXNlciIsImh1bmdhcmlhbktleSIsIl9mbkxhbmd1YWdlQ29tcGF0IiwibGFuZyIsIkRhdGFUYWJsZSIsIm9MYW5ndWFnZSIsInplcm9SZWNvcmRzIiwic1plcm9SZWNvcmRzIiwic0VtcHR5VGFibGUiLCJfZm5NYXAiLCJzTG9hZGluZ1JlY29yZHMiLCJzSW5mb1Rob3VzYW5kcyIsInNUaG91c2FuZHMiLCJkZWNpbWFsIiwic0RlY2ltYWwiLCJfYWRkTnVtZXJpY1NvcnQiLCJfZm5Db21wYXRPcHRzIiwiX2ZuQ29tcGF0TWFwIiwic1Njcm9sbFgiLCJzZWFyY2hDb2xzIiwiYW9TZWFyY2hDb2xzIiwiaWVuIiwibW9kZWxzIiwib1NlYXJjaCIsIl9mbkNvbXBhdENvbHMiLCJkYXRhU29ydCIsImFEYXRhU29ydCIsIl9mbkJyb3dzZXJEZXRlY3QiLCJfX2Jyb3dzZXIiLCJicm93c2VyIiwib3V0ZXIiLCJpbm5lciIsImJhcldpZHRoIiwiYlNjcm9sbE92ZXJzaXplIiwiYlNjcm9sbGJhckxlZnQiLCJiQm91bmRpbmciLCJvQnJvd3NlciIsIm9TY3JvbGwiLCJpQmFyV2lkdGgiLCJfZm5SZWR1Y2UiLCJ0aGF0IiwiaW5jIiwiaXNTZXQiLCJfZm5BZGRDb2x1bW4iLCJvU2V0dGluZ3MiLCJuVGgiLCJvRGVmYXVsdHMiLCJjb2x1bW4iLCJpQ29sIiwiYW9Db2x1bW5zIiwib0NvbCIsIm9Db2x1bW4iLCJzVGl0bGUiLCJtRGF0YSIsImlkeCIsImFvUHJlU2VhcmNoQ29scyIsIl9mbkNvbHVtbk9wdGlvbnMiLCJvT3B0aW9ucyIsIm9DbGFzc2VzIiwidGgiLCJzV2lkdGhPcmlnIiwibURhdGFQcm9wIiwic1R5cGUiLCJfc01hbnVhbFR5cGUiLCJzQ2xhc3MiLCJpRGF0YVNvcnQiLCJtRGF0YVNyYyIsIl9mbkdldE9iamVjdERhdGFGbiIsIm1SZW5kZXIiLCJfYkF0dHJTcmMiLCJmbkdldERhdGEiLCJyb3dEYXRhIiwibWV0YSIsImlubmVyRGF0YSIsImZuU2V0RGF0YSIsIl9mblNldE9iamVjdERhdGFGbiIsIl9yb3dSZWFkT2JqZWN0Iiwib0ZlYXR1cmVzIiwiYlNvcnQiLCJiU29ydGFibGUiLCJzU29ydGFibGVOb25lIiwiYkFzYyIsImFzU29ydGluZyIsImJEZXNjIiwic1NvcnRpbmdDbGFzcyIsInNTb3J0YWJsZUFzYyIsInNTb3J0aW5nQ2xhc3NKVUkiLCJzU29ydEpVSUFzY0FsbG93ZWQiLCJzU29ydGFibGVEZXNjIiwic1NvcnRKVUlEZXNjQWxsb3dlZCIsInNTb3J0YWJsZSIsInNTb3J0SlVJIiwiX2ZuQWRqdXN0Q29sdW1uU2l6aW5nIiwiYkF1dG9XaWR0aCIsImNvbHVtbnMiLCJfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMiLCJpTGVuIiwic1dpZHRoIiwic1kiLCJzWCIsIl9mblNjcm9sbERyYXciLCJfZm5DYWxsYmFja0ZpcmUiLCJfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCIsImlNYXRjaCIsImFpVmlzIiwiX2ZuR2V0Q29sdW1ucyIsIl9mbkNvbHVtbkluZGV4VG9WaXNpYmxlIiwiaVBvcyIsIl9mblZpc2JsZUNvbHVtbnMiLCJzUGFyYW0iLCJfZm5Db2x1bW5UeXBlcyIsImplbiIsImtlbiIsImNvbCIsImRldGVjdGVkVHlwZSIsImFvRGF0YSIsImV4dCIsImRldGVjdCIsIl9mbkdldENlbGxEYXRhIiwiX2ZuQXBwbHlDb2x1bW5EZWZzIiwiYW9Db2xEZWZzIiwiYW9Db2xzIiwia0xlbiIsImRlZiIsImFUYXJnZXRzIiwidGFyZ2V0cyIsIl9mbkFkZERhdGEiLCJhRGF0YUluIiwiblRyIiwiYW5UZHMiLCJpUm93Iiwib0RhdGEiLCJvUm93IiwiX2FEYXRhIiwiYWlEaXNwbGF5TWFzdGVyIiwicm93SWRGbiIsImFJZHMiLCJiRGVmZXJSZW5kZXIiLCJfZm5DcmVhdGVUciIsIl9mbkFkZFRyIiwidHJzIiwiX2ZuR2V0Um93RWxlbWVudHMiLCJfZm5Ob2RlVG9EYXRhSW5kZXgiLCJfRFRfUm93SW5kZXgiLCJfZm5Ob2RlVG9Db2x1bW5JbmRleCIsImFuQ2VsbHMiLCJyb3dJZHgiLCJjb2xJZHgiLCJpRHJhdyIsImRlZmF1bHRDb250ZW50Iiwic0RlZmF1bHRDb250ZW50IiwiY2VsbERhdGEiLCJpRHJhd0Vycm9yIiwiX2ZuTG9nIiwiX2ZuU2V0Q2VsbERhdGEiLCJfZm5TcGxpdE9iak5vdGF0aW9uIiwibVNvdXJjZSIsIl8iLCJmZXRjaERhdGEiLCJhcnJheU5vdGF0aW9uIiwiZnVuY05vdGF0aW9uIiwib3V0IiwiaW5uZXJTcmMiLCJfX3JlQXJyYXkiLCJfX3JlRm4iLCJzdWJzdHJpbmciLCJzZXREYXRhIiwiYUxhc3QiLCJfZm5HZXREYXRhTWFzdGVyIiwiX3BsdWNrIiwiX2ZuQ2xlYXJUYWJsZSIsImFpRGlzcGxheSIsIl9mbkRlbGV0ZUluZGV4IiwiaVRhcmdldCIsImlUYXJnZXRJbmRleCIsIl9mbkludmFsaWRhdGUiLCJjZWxsV3JpdGUiLCJfYVNvcnREYXRhIiwiX2FGaWx0ZXJEYXRhIiwiX2ZuUm93QXR0cmlidXRlcyIsInRkcyIsInRkIiwib2JqZWN0UmVhZCIsInNldHRlciIsImNlbGxQcm9jZXNzIiwiX3NldHRlciIsIm5leHRTaWJsaW5nIiwicm93Tm9kZSIsInJvd0lkIiwiblRySW4iLCJuVGQiLCJzQ2VsbFR5cGUiLCJfRFRfQ2VsbEluZGV4IiwiYlZpc2libGUiLCJmbkNyZWF0ZWRDZWxsIiwib0luc3RhbmNlIiwiRFRfUm93Q2xhc3MiLCJfX3Jvd2MiLCJfdW5pcXVlIiwiRFRfUm93QXR0ciIsIkRUX1Jvd0RhdGEiLCJfZm5CdWlsZEhlYWQiLCJ0aGVhZCIsIm5USGVhZCIsInRmb290IiwiblRGb290IiwiY3JlYXRlSGVhZGVyIiwiY2xhc3NlcyIsImlUYWJJbmRleCIsInNUYWJsZUlkIiwiX2ZuU29ydEF0dGFjaExpc3RlbmVyIiwiX2ZuUmVuZGVyZXIiLCJfZm5EZXRlY3RIZWFkZXIiLCJhb0hlYWRlciIsInNIZWFkZXJUSCIsInNGb290ZXJUSCIsImFvRm9vdGVyIiwiblRmIiwiX2ZuRHJhd0hlYWQiLCJhb1NvdXJjZSIsImJJbmNsdWRlSGlkZGVuIiwibkxvY2FsVHIiLCJpUm93c3BhbiIsImlDb2xzcGFuIiwiYW9Mb2NhbCIsImFBcHBsaWVkIiwiaUNvbHVtbnMiLCJfZm5EcmF3IiwiYVByZURyYXciLCJfZm5Qcm9jZXNzaW5nRGlzcGxheSIsImFuUm93cyIsImlSb3dDb3VudCIsImFzU3RyaXBlQ2xhc3NlcyIsImlTdHJpcGVzIiwib0xhbmciLCJhb09wZW5Sb3dzIiwiaUluaXREaXNwbGF5U3RhcnQiLCJiU2VydmVyU2lkZSIsIl9mbkRhdGFTb3VyY2UiLCJiRHJhd2luZyIsIl9pRGlzcGxheVN0YXJ0IiwiZm5SZWNvcmRzRGlzcGxheSIsImlEaXNwbGF5U3RhcnQiLCJpRGlzcGxheUVuZCIsImZuRGlzcGxheUVuZCIsImJEZWZlckxvYWRpbmciLCJiRGVzdHJveWluZyIsIl9mbkFqYXhVcGRhdGUiLCJpU3RhcnQiLCJpRW5kIiwiaURhdGFJbmRleCIsIm5Sb3ciLCJzU3RyaXBlIiwiX3NSb3dTdHJpcGUiLCJzWmVybyIsImZuUmVjb3Jkc1RvdGFsIiwiY2xhc3MiLCJ2YWxpZ24iLCJzUm93RW1wdHkiLCJuVEJvZHkiLCJkZXRhY2giLCJiU29ydGVkIiwiYkZpbHRlcmVkIiwiX2ZuUmVEcmF3IiwiaG9sZFBvc2l0aW9uIiwiZmVhdHVyZXMiLCJiRmlsdGVyIiwiX2ZuU29ydCIsIl9mbkZpbHRlckNvbXBsZXRlIiwib1ByZXZpb3VzU2VhcmNoIiwiX2RyYXdIb2xkIiwiX2ZuQWRkT3B0aW9uc0h0bWwiLCJ0YWJsZSIsIm5UYWJsZSIsImhvbGRpbmciLCJzV3JhcHBlciIsInNOb0Zvb3RlciIsIm5Ib2xkaW5nIiwiblRhYmxlV3JhcHBlciIsIm5UYWJsZVJlaW5zZXJ0QmVmb3JlIiwiZmVhdHVyZU5vZGUiLCJjT3B0aW9uIiwibk5ld05vZGUiLCJjTmV4dCIsInNBdHRyIiwiYURvbSIsInNEb20iLCJzSlVJSGVhZGVyIiwic0pVSUZvb3RlciIsImFTcGxpdCIsInN1YnN0ciIsImJQYWdpbmF0ZSIsImJMZW5ndGhDaGFuZ2UiLCJfZm5GZWF0dXJlSHRtbExlbmd0aCIsIl9mbkZlYXR1cmVIdG1sRmlsdGVyIiwiYlByb2Nlc3NpbmciLCJfZm5GZWF0dXJlSHRtbFByb2Nlc3NpbmciLCJfZm5GZWF0dXJlSHRtbFRhYmxlIiwiYkluZm8iLCJfZm5GZWF0dXJlSHRtbEluZm8iLCJfZm5GZWF0dXJlSHRtbFBhZ2luYXRlIiwiZmVhdHVyZSIsImFvRmVhdHVyZXMiLCJjRmVhdHVyZSIsImZuSW5pdCIsImFhbkZlYXR1cmVzIiwicmVwbGFjZVdpdGgiLCJhTGF5b3V0IiwiblRoZWFkIiwibkNlbGwiLCJpQ29sU2hpZnRlZCIsImlDb2x1bW4iLCJiVW5pcXVlIiwiblRycyIsImZuU2hpZnRDb2wiLCJfZm5HZXRVbmlxdWVUaHMiLCJuSGVhZGVyIiwiYVJldHVybiIsImJTb3J0Q2VsbHNUb3AiLCJfZm5CdWlsZEFqYXgiLCJ0bXAiLCJyYnJhY2tldCIsImFqYXhEYXRhIiwiYWpheCIsImpxWEhSIiwibmV3RGF0YSIsImJhc2VBamF4Iiwic3VjY2VzcyIsInNFcnJvciIsImRhdGFUeXBlIiwic1NlcnZlck1ldGhvZCIsInhociIsInRocm93biIsInJldCIsIm9BamF4RGF0YSIsImZuU2VydmVyRGF0YSIsInNBamF4U291cmNlIiwidXJsIiwiYkFqYXhEYXRhR2V0IiwiX2ZuQWpheFBhcmFtZXRlcnMiLCJfZm5BamF4VXBkYXRlRHJhdyIsImRhdGFQcm9wIiwiY29sdW1uU2VhcmNoIiwiY29sdW1uQ291bnQiLCJwcmVTZWFyY2giLCJwcmVDb2xTZWFyY2giLCJfZm5Tb3J0RmxhdHRlbiIsImRpc3BsYXlTdGFydCIsImRpc3BsYXlMZW5ndGgiLCJfaURpc3BsYXlMZW5ndGgiLCJwYXJhbSIsIm9yZGVyIiwic2VhcmNoIiwic1NlYXJjaCIsInJlZ2V4IiwiYlJlZ2V4Iiwic05hbWUiLCJzZWFyY2hhYmxlIiwiYlNlYXJjaGFibGUiLCJvcmRlcmFibGUiLCJkaXIiLCJsZWdhY3kiLCJjb21wYXQiLCJvbGQiLCJtb2Rlcm4iLCJfZm5BamF4RGF0YVNyYyIsInJlY29yZHNUb3RhbCIsInJlY29yZHNGaWx0ZXJlZCIsIl9pUmVjb3Jkc1RvdGFsIiwiX2lSZWNvcmRzRGlzcGxheSIsIl9iSW5pdENvbXBsZXRlIiwiX2ZuSW5pdENvbXBsZXRlIiwiZGF0YVNyYyIsInNBamF4RGF0YVByb3AiLCJhYURhdGEiLCJ0YWJsZUlkIiwibGFuZ3VhZ2UiLCJwcmV2aW91c1NlYXJjaCIsInNGaWx0ZXJJbnB1dCIsInNGaWx0ZXIiLCJzZWFyY2hGbiIsImJTbWFydCIsImJDYXNlSW5zZW5zaXRpdmUiLCJzZWFyY2hEZWxheSIsImpxRmlsdGVyIiwic1NlYXJjaFBsYWNlaG9sZGVyIiwiX2ZuVGhyb3R0bGUiLCJvSW5wdXQiLCJpRm9yY2UiLCJvUHJldlNlYXJjaCIsImFvUHJldlNlYXJjaCIsImZuU2F2ZUZpbHRlciIsIm9GaWx0ZXIiLCJmblJlZ2V4IiwiYkVzY2FwZVJlZ2V4IiwiX2ZuRmlsdGVyIiwiX2ZuRmlsdGVyQ29sdW1uIiwiX2ZuRmlsdGVyQ3VzdG9tIiwiZmlsdGVycyIsImRpc3BsYXlSb3dzIiwicm93cyIsInNlYXJjaFN0ciIsInNtYXJ0IiwiY2FzZUluc2Vuc2l0aXZlIiwicnBTZWFyY2giLCJfZm5GaWx0ZXJDcmVhdGVTZWFyY2giLCJpbnZhbGlkYXRlZCIsInByZXZTZWFyY2giLCJkaXNwbGF5TWFzdGVyIiwiX2ZuRmlsdGVyRGF0YSIsIl9zRmlsdGVyUm93IiwiX2ZuRXNjYXBlUmVnZXgiLCJ3b3JkIiwic1ZhbCIsIl9yZV9lc2NhcGVfcmVnZXgiLCJmaWx0ZXJEYXRhIiwiZm9tYXR0ZXJzIiwid2FzSW52YWxpZGF0ZWQiLCJfX2ZpbHRlcl9kaXYiLCJfX2ZpbHRlcl9kaXZfdGV4dENvbnRlbnQiLCJfZm5TZWFyY2hUb0NhbWVsIiwiX2ZuU2VhcmNoVG9IdW5nIiwidGlkIiwic0luZm8iLCJhb0RyYXdDYWxsYmFjayIsIl9mblVwZGF0ZUluZm8iLCJzSW5mb0VtcHR5Iiwic0luZm9GaWx0ZXJlZCIsInNJbmZvUG9zdEZpeCIsIl9mbkluZm9NYWNyb3MiLCJmbkluZm9DYWxsYmFjayIsImZvcm1hdHRlciIsImZuRm9ybWF0TnVtYmVyIiwidmlzIiwiX2ZuSW5pdGlhbGlzZSIsImlBamF4U3RhcnQiLCJkZWZlckxvYWRpbmciLCJiSW5pdGlhbGlzZWQiLCJfZm5TdHJpbmdUb0NzcyIsImFEYXRhIiwib0luaXQiLCJfZm5MZW5ndGhDaGFuZ2UiLCJfZm5MZW5ndGhPdmVyZmxvdyIsImFMZW5ndGhNZW51IiwiZDIiLCJhcmlhLWNvbnRyb2xzIiwic0xlbmd0aFNlbGVjdCIsIk9wdGlvbiIsInNMZW5ndGgiLCJzTGVuZ3RoTWVudSIsIm91dGVySFRNTCIsInNQYWdpbmF0aW9uVHlwZSIsInBsdWdpbiIsInBhZ2VyIiwicmVkcmF3Iiwic1BhZ2luZyIsInZpc1JlY29yZHMiLCJwYWdlIiwicGFnZXMiLCJidXR0b25zIiwiZm5VcGRhdGUiLCJfZm5QYWdlQ2hhbmdlIiwiYWN0aW9uIiwicmVjb3JkcyIsInNQcm9jZXNzaW5nIiwiY2FwdGlvbiIsImNhcHRpb25TaWRlIiwiX2NhcHRpb25TaWRlIiwiaGVhZGVyQ2xvbmUiLCJjbG9uZU5vZGUiLCJmb290ZXJDbG9uZSIsImZvb3RlciIsIl9kaXYiLCJzY3JvbGxlciIsInNTY3JvbGxXcmFwcGVyIiwic1Njcm9sbEhlYWQiLCJib3JkZXIiLCJzU2Nyb2xsSGVhZElubmVyIiwiYm94LXNpemluZyIsInNYSW5uZXIiLCJzU2Nyb2xsQm9keSIsInNTY3JvbGxGb290Iiwic1Njcm9sbEZvb3RJbm5lciIsInNjcm9sbEhlYWQiLCJzY3JvbGxCb2R5Iiwic2Nyb2xsRm9vdCIsImJDb2xsYXBzZSIsIm5TY3JvbGxIZWFkIiwiblNjcm9sbEJvZHkiLCJuU2Nyb2xsRm9vdCIsImhlYWRlclRyZ0VscyIsImZvb3RlclRyZ0VscyIsImhlYWRlclNyY0VscyIsImZvb3RlclNyY0VscyIsImhlYWRlckNvcHkiLCJmb290ZXJDb3B5IiwiY29ycmVjdGlvbiIsInNhbml0eVdpZHRoIiwic2Nyb2xsWElubmVyIiwiZGl2SGVhZGVyIiwiZGl2SGVhZGVyU3R5bGUiLCJkaXZIZWFkZXJJbm5lciIsImRpdkhlYWRlcklubmVyU3R5bGUiLCJkaXZIZWFkZXJUYWJsZSIsImRpdkJvZHlFbCIsImRpdkJvZHkiLCJkaXZCb2R5U3R5bGUiLCJkaXZGb290ZXIiLCJkaXZGb290ZXJJbm5lciIsImRpdkZvb3RlclRhYmxlIiwiaGVhZGVyIiwidGFibGVFbCIsInRhYmxlU3R5bGUiLCJpZTY3IiwiaGVhZGVyV2lkdGhzIiwiZm9vdGVyV2lkdGhzIiwiaGVhZGVyQ29udGVudCIsInplcm9PdXQiLCJuU2l6ZXIiLCJzY3JvbGxCYXJWaXMiLCJzY3JvbGxIZWlnaHQiLCJfZm5BcHBseVRvQ2hpbGRyZW4iLCJuVG9TaXplIiwiaU91dGVyV2lkdGgiLCJiU2Nyb2xsaW5nIiwiYW4xIiwiYW4yIiwibk5vZGUxIiwibk5vZGUyIiwiY29sdW1uSWR4IiwidmlzaWJsZUNvbHVtbnMiLCJoZWFkZXJDZWxscyIsInRhYmxlV2lkdGhBdHRyIiwidGFibGVDb250YWluZXIiLCJ1c2VySW5wdXRzIiwiX2ZuQ29udmVydFRvV2lkdGgiLCJlcSIsInRtcFRhYmxlIiwibWFyZ2luIiwiX2ZuR2V0V2lkZXN0Tm9kZSIsInNDb250ZW50UGFkZGluZyIsImJvdW5kaW5nIiwiX3Jlc3pFdnQiLCJzSW5zdGFuY2UiLCJmcmVxIiwiZnJlcXVlbmN5IiwiX2ZuR2V0TWF4TGVuU3RyaW5nIiwibWF4SWR4IiwiX19yZV9odG1sX3JlbW92ZSIsInNyY0NvbCIsImFTb3J0IiwiZml4ZWQiLCJhYVNvcnRpbmdGaXhlZCIsImZpeGVkT2JqIiwibmVzdGVkU29ydCIsInByZSIsImFhU29ydGluZyIsInBvc3QiLCJfaWR4Iiwic29ydENvbCIsImFpT3JpZyIsIm9FeHRTb3J0IiwiZm9ybWF0dGVycyIsIl9mblNvcnREYXRhIiwiZGF0YUEiLCJkYXRhQiIsIl9mblNvcnRBcmlhIiwibmV4dFNvcnQiLCJvQXJpYSIsInNTb3J0QXNjZW5kaW5nIiwic1NvcnREZXNjZW5kaW5nIiwiX2ZuU29ydExpc3RlbmVyIiwibmV4dFNvcnRJZHgiLCJzb3J0aW5nIiwiYlNvcnRNdWx0aSIsInNvcnRJZHgiLCJhdHRhY2hUbyIsIl9mbkJpbmRBY3Rpb24iLCJzaGlmdEtleSIsIl9mblNvcnRpbmdDbGFzc2VzIiwib2xkU29ydCIsImFMYXN0U29ydCIsInNvcnRDbGFzcyIsInNTb3J0Q29sdW1uIiwiYlNvcnRDbGFzc2VzIiwiY3VzdG9tRGF0YSIsImN1c3RvbVNvcnQiLCJzU29ydERhdGFUeXBlIiwiX2ZuU2F2ZVN0YXRlIiwiYlN0YXRlU2F2ZSIsInZpc2libGUiLCJvU2F2ZWRTdGF0ZSIsImZuU3RhdGVTYXZlQ2FsbGJhY2siLCJfZm5Mb2FkU3RhdGUiLCJmblN0YXRlTG9hZENhbGxiYWNrIiwiYWJTdGF0ZUxvYWQiLCJpU3RhdGVEdXJhdGlvbiIsIm9Mb2FkZWRTdGF0ZSIsIl9mblNldHRpbmdzRnJvbU5vZGUiLCJsZXZlbCIsIm1zZyIsInRuIiwic0Vyck1vZGUiLCJlcnJNb2RlIiwiYWxlcnQiLCJtYXBwZWROYW1lIiwiX2ZuRXh0ZW5kIiwiZXh0ZW5kZXIiLCJicmVha1JlZnMiLCJfZm5DYWxsYmFja1JlZyIsInNTdG9yZSIsImNhbGxiYWNrQXJyIiwicmVuZGVyZXIiLCJob3N0IiwiX251bWJlcnMiLCJudW1iZXJzIiwiZXh0UGFnaW5hdGlvbiIsIm51bWJlcnNfbGVuZ3RoIiwiaGFsZiIsIl9yYW5nZSIsIkRUX2VsIiwiZGVjaW1hbFBsYWNlIiwiX19udW1lcmljUmVwbGFjZSIsIm51bS1mbXQiLCJfcmVfZm9ybWF0dGVkX251bWVyaWMiLCJodG1sLW51bSIsIl9yZV9odG1sIiwiaHRtbC1udW0tZm10IiwiX2V4dCIsIl9mbkV4dGVybkFwaUZ1bmMiLCJpQXBpSW5kZXgiLCJpbnRlcm5hbCIsIl9BcGkiLCJfYXBpX3JlZ2lzdGVyIiwiX2FwaV9yZWdpc3RlclBsdXJhbCIsIl9yZV9kaWMiLCJfcmVfbmV3X2xpbmVzIiwiX3JlX2RhdGVfc3RhcnQiLCJfcmVfZGF0ZV9lbmQiLCJfZW1wdHkiLCJfaW50VmFsIiwiaW50ZWdlciIsImlzRmluaXRlIiwiX251bVRvRGVjaW1hbCIsImRlY2ltYWxQb2ludCIsIl9pc051bWJlciIsImZvcm1hdHRlZCIsInN0clR5cGUiLCJfaXNIdG1sIiwiX2h0bWxOdW1lcmljIiwiX3N0cmlwSHRtbCIsInByb3AyIiwiX3BsdWNrX29yZGVyIiwiX3JlbW92ZUVtcHR5IiwiYWdhaW4iLCJrbmV3Iiwic1NlbGVjdG9yIiwib09wdHMiLCJhcGkiLCJ0cmFkaXRpb25hbCIsImZuQWRkRGF0YSIsImZsYXR0ZW4iLCJmbkFkanVzdENvbHVtblNpemluZyIsImJSZWRyYXciLCJhZGp1c3QiLCJmbkNsZWFyVGFibGUiLCJmbkNsb3NlIiwiZm5EZWxldGVSb3ciLCJmbkRlc3Ryb3kiLCJmbkRyYXciLCJmbkZpbHRlciIsInNJbnB1dCIsImJTaG93R2xvYmFsIiwiZm5HZXROb2RlcyIsImZuR2V0UG9zaXRpb24iLCJjb2x1bW5WaXNpYmxlIiwiZm5Jc09wZW4iLCJpc1Nob3duIiwiZm5PcGVuIiwibUh0bWwiLCJmblBhZ2VDaGFuZ2UiLCJtQWN0aW9uIiwiZm5TZXRDb2x1bW5WaXMiLCJiU2hvdyIsImZuU2V0dGluZ3MiLCJmblNvcnQiLCJhYVNvcnQiLCJmblNvcnRMaXN0ZW5lciIsIm5Ob2RlIiwiZm5DYWxsYmFjayIsIm1Sb3ciLCJiQWN0aW9uIiwiZm5WZXJzaW9uQ2hlY2siLCJfdGhhdCIsImVtcHR5SW5pdCIsIm9BcGkiLCJzSWQiLCJiSW5pdEhhbmRlZE9mZiIsImFsbFNldHRpbmdzIiwiYlJldHJpZXZlIiwiYkRlc3Ryb3kiLCJzRGVzdHJveVdpZHRoIiwiaURpc3BsYXlMZW5ndGgiLCJmbkRyYXdDYWxsYmFjayIsImZuU2VydmVyUGFyYW1zIiwiZm5TdGF0ZVNhdmVQYXJhbXMiLCJmblN0YXRlTG9hZFBhcmFtcyIsImZuU3RhdGVMb2FkZWQiLCJmblJvd0NhbGxiYWNrIiwiZm5DcmVhdGVkUm93IiwiZm5IZWFkZXJDYWxsYmFjayIsImZuRm9vdGVyQ2FsbGJhY2siLCJmbkluaXRDb21wbGV0ZSIsImZuUHJlRHJhd0NhbGxiYWNrIiwiYkpRdWVyeVVJIiwib0pVSUNsYXNzZXMiLCJzVGFibGUiLCJpRGVmZXJMb2FkaW5nIiwic1VybCIsInNTdHJpcGVPZGQiLCJzU3RyaXBlRXZlbiIsInN0cmlwZUNsYXNzZXMiLCJyb3dPbmUiLCJhc0Rlc3Ryb3lTdHJpcGVzIiwiYW9Db2x1bW5zSW5pdCIsImFuVGhzIiwiYW9Db2x1bW5EZWZzIiwib0RlZiIsInNvcnRlZENvbHVtbnMiLCJjYXB0aW9ucyIsInRib2R5IiwiX19hcGlTdHJ1Y3QiLCJfX2FycmF5UHJvdG8iLCJfdG9TZXR0aW5ncyIsIm1peGVkIiwianEiLCJ0YWJsZXMiLCJjdHhTZXR0aW5ncyIsIkFwaSIsImFueSIsImN0eCIsImFsd2F5c05ldyIsImFwaUluc3QiLCJfc2VsZWN0b3Jfcm93X2luZGV4ZXMiLCJhcGlTZWxlY3RvciIsImxhc3RJbmRleE9mIiwicGx1Y2siLCJwb3AiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsInRvJCIsInRvSlF1ZXJ5Iiwic2NvcGUiLCJfX2R0X3dyYXBwZXIiLCJzdHJ1Y3QiLCJtZXRob2RTY29waW5nIiwic3RydWMiLCJtZXRob2RFeHQiLCJwcm9wRXh0IiwicmVnaXN0ZXIiLCJoZWlyIiwicmVnaXN0ZXJQbHVyYWwiLCJwbHVyYWxOYW1lIiwic2luZ3VsYXJOYW1lIiwiX190YWJsZV9zZWxlY3RvciIsInBhZ2luZyIsImluZm8iLCJyZWNvcmRzRGlzcGxheSIsInNlcnZlclNpZGUiLCJfX3JlbG9hZCIsIm9uZSIsImFib3J0IiwicmVzZXRQYWdpbmciLCJfc2VsZWN0b3JfcnVuIiwic2VsZWN0Rm4iLCJyZXMiLCJzZWxlY3RvclR5cGUiLCJfc2VsZWN0b3Jfb3B0cyIsIl9zZWxlY3Rvcl9maXJzdCIsImluc3QiLCJkaXNwbGF5RmlsdGVyZWQiLCJfX3Jvd19zZWxlY3RvciIsInJ1biIsInNlbCIsInNlbEludCIsInJvd09iaiIsInRoYXRJZHgiLCJsb29wUm93IiwibG9vcENlbGxzIiwibmV3Um93cyIsIm1vZFJvd3MiLCJfX2RldGFpbHNfYWRkIiwia2xhc3MiLCJhZGRSb3ciLCJjcmVhdGVkIiwiX2RldGFpbHMiLCJfZGV0YWlsc1Nob3ciLCJpbnNlcnRBZnRlciIsIl9fZGV0YWlsc19yZW1vdmUiLCJfX2RldGFpbHNfZGlzcGxheSIsIl9fZGV0YWlsc19ldmVudHMiLCJkcmF3RXZlbnQiLCJjb2x2aXNFdmVudCIsImRlc3Ryb3lFdmVudCIsIl9lbXAiLCJfY2hpbGRfb2JqIiwiX2NoaWxkX210aCIsIl9fcmVfY29sdW1uX3NlbGVjdG9yIiwiX19jb2x1bW5EYXRhIiwicjEiLCJyMiIsIl9fY29sdW1uX3NlbGVjdG9yIiwibmFtZXMiLCJ2aXNDb2x1bW5zIiwiX19zZXRDb2x1bW5WaXMiLCJyZWNhbGMiLCJjYWxjIiwiX19jZWxsX3NlbGVjdG9yIiwiYWxsQ2VsbHMiLCJmblNlbGVjdG9yIiwicm93U2VsZWN0b3IiLCJjb2x1bW5TZWxlY3RvciIsImNhc2VJbnNlbiIsInZlcnNpb25DaGVjayIsInZlcnNpb24iLCJpVGhpcyIsImlUaGF0IiwiYVRoaXMiLCJhVGhhdCIsImlzRGF0YVRhYmxlIiwiZm5Jc0RhdGFUYWJsZSIsImZvb3QiLCJmblRhYmxlcyIsInV0aWwiLCJ0aHJvdHRsZSIsImVzY2FwZVJlZ2V4IiwiY2FtZWxUb0h1bmdhcmlhbiIsImpxUm93cyIsIm9yaWciLCJqcVRhYmxlIiwianFUYm9keSIsImpxV3JhcHBlciIsImJKVUkiLCJzU29ydEljb24iLCJ3cmFwcGVyIiwic1NvcnRKVUlXcmFwcGVyIiwicmVtb3ZlZE1ldGhvZCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImFyZzQiLCJ0b2tlbiIsInBsdXJhbCIsInJlc29sdmVkIiwiYlNjcm9sbENvbGxhcHNlIiwidG9Gb3JtYXQiLCJsb2NhbFN0b3JhZ2UiLCJwYXRobmFtZSIsIm9QYWdpbmF0ZSIsInNGaXJzdCIsInNMYXN0Iiwic05leHQiLCJzUHJldmlvdXMiLCJzU2Nyb2xsWElubmVyIiwic1Njcm9sbFkiLCJhb1Jvd0NhbGxiYWNrIiwiYW9IZWFkZXJDYWxsYmFjayIsImFvRm9vdGVyQ2FsbGJhY2siLCJhb1Jvd0NyZWF0ZWRDYWxsYmFjayIsImFvUHJlRHJhd0NhbGxiYWNrIiwiYW9Jbml0Q29tcGxldGUiLCJhb1N0YXRlU2F2ZVBhcmFtcyIsImFvU3RhdGVMb2FkUGFyYW1zIiwiYW9TdGF0ZUxvYWRlZCIsImFvU3RhdGVTYXZlIiwiYW9TdGF0ZUxvYWQiLCJhb1NlcnZlclBhcmFtcyIsImFvRGVzdHJveUNhbGxiYWNrIiwicGFnaW5hdGUiLCJvUGx1Z2lucyIsImJ1aWxkZXIiLCJwYWdlQnV0dG9uIiwic1ZlcnNpb24iLCJhZm5GaWx0ZXJpbmciLCJhVHlwZXMiLCJvZm5TZWFyY2giLCJvU29ydCIsImFmblNvcnREYXRhIiwib1N0ZENsYXNzZXMiLCJvUGFnaW5hdGlvbiIsInNQYWdlQnV0dG9uIiwic1BhZ2VCdXR0b25BY3RpdmUiLCJzUGFnZUJ1dHRvbkRpc2FibGVkIiwic1NvcnRBc2MiLCJzU29ydERlc2MiLCJzU29ydEpVSUFzYyIsInNTb3J0SlVJRGVzYyIsIl9zdGF0ZURlZmF1bHQiLCJfc29ydEljb24iLCJfaGVhZGVyRm9vdGVyIiwic2ltcGxlIiwiZnVsbCIsInNpbXBsZV9udW1iZXJzIiwiZnVsbF9udW1iZXJzIiwiYnRuRGlzcGxheSIsImJ0bkNsYXNzIiwiYWN0aXZlRWwiLCJhcmlhIiwiY291bnRlciIsImF0dGFjaCIsImNsaWNrSGFuZGxlciIsImFyaWEtbGFiZWwiLCJkYXRhLWR0LWlkeCIsInRhYmluZGV4IiwiZW1wdHkiLCJwYXJzZWQiLCJzdHJpbmciLCJyZTEiLCJyZTIiLCJkYXRlLXByZSIsImh0bWwtcHJlIiwic3RyaW5nLXByZSIsInN0cmluZy1hc2MiLCJzdHJpbmctZGVzYyIsImpxdWVyeXVpIiwicmVuZGVyIiwibnVtYmVyIiwidGhvdXNhbmRzIiwicHJlY2lzaW9uIiwicG9zdGZpeCIsIm5lZ2F0aXZlIiwiZmxvIiwiaW50UGFydCIsImZsb2F0UGFydCIsInRvRml4ZWQiLCJfZm5DYWxjdWxhdGVFbmQiLCJkYXRhVGFibGVTZXR0aW5ncyIsImRhdGFUYWJsZUV4dCIsIlMyIiwic2VsZWN0MiIsInJlcXVpcmVqcyIsInVuZGVmIiwiaGFzUHJvcCIsImhhc093biIsIm5vcm1hbGl6ZSIsImJhc2VOYW1lIiwibmFtZVBhcnRzIiwibmFtZVNlZ21lbnQiLCJtYXBWYWx1ZSIsImZvdW5kTWFwIiwiZm91bmRJIiwiZm91bmRTdGFyTWFwIiwic3RhckkiLCJwYXJ0IiwiYmFzZVBhcnRzIiwic3Rhck1hcCIsIm5vZGVJZENvbXBhdCIsImpzU3VmZml4UmVnRXhwIiwibWFrZVJlcXVpcmUiLCJyZWxOYW1lIiwiZm9yY2VTeW5jIiwiYXBzIiwicmVxIiwibWFrZU5vcm1hbGl6ZSIsIm1ha2VMb2FkIiwiZGVwTmFtZSIsImRlZmluZWQiLCJjYWxsRGVwIiwid2FpdGluZyIsImRlZmluaW5nIiwibWFpbiIsInNwbGl0UHJlZml4IiwibWFrZUNvbmZpZyIsIm1ha2VNYXAiLCJwciIsInVyaSIsImRlcHMiLCJjanNNb2R1bGUiLCJ1c2luZ0V4cG9ydHMiLCJjYWxsYmFja1R5cGUiLCJhbHQiLCJjZmciLCJfZGVmaW5lZCIsIl8kIiwiZ2V0TWV0aG9kcyIsInRoZUNsYXNzIiwibWV0aG9kcyIsIlV0aWxzIiwiRXh0ZW5kIiwiQ2hpbGRDbGFzcyIsIlN1cGVyQ2xhc3MiLCJCYXNlQ29uc3RydWN0b3IiLCJfX2hhc1Byb3AiLCJfX3N1cGVyX18iLCJEZWNvcmF0ZSIsIkRlY29yYXRvckNsYXNzIiwiRGVjb3JhdGVkQ2xhc3MiLCJhcmdDb3VudCIsImNhbGxlZENvbnN0cnVjdG9yIiwiY3RyIiwiZGVjb3JhdGVkTWV0aG9kcyIsInN1cGVyTWV0aG9kcyIsImRpc3BsYXlOYW1lIiwic3VwZXJNZXRob2QiLCJjYWxsZWRNZXRob2QiLCJvcmlnaW5hbE1ldGhvZCIsImRlY29yYXRlZE1ldGhvZCIsIk9ic2VydmFibGUiLCJpbnZva2UiLCJwYXJhbXMiLCJnZW5lcmF0ZUNoYXJzIiwiY2hhcnMiLCJyYW5kb21DaGFyIiwiX2NvbnZlcnREYXRhIiwib3JpZ2luYWxLZXkiLCJkYXRhTGV2ZWwiLCJoYXNTY3JvbGwiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJzY3JvbGxXaWR0aCIsImVzY2FwZU1hcmt1cCIsIm1hcmt1cCIsInJlcGxhY2VNYXAiLCJcXCIsIiYiLCI8IiwiPiIsIlwiIiwiJyIsIi8iLCJhcHBlbmRNYW55IiwiJG5vZGVzIiwianF1ZXJ5IiwiJGpxTm9kZXMiLCJSZXN1bHRzIiwiZGF0YUFkYXB0ZXIiLCIkcmVzdWx0cyIsImRpc3BsYXlNZXNzYWdlIiwiaGlkZUxvYWRpbmciLCIkbWVzc2FnZSIsImhpZGVNZXNzYWdlcyIsIiRvcHRpb25zIiwiJG9wdGlvbiIsIiRkcm9wZG93biIsIiRyZXN1bHRzQ29udGFpbmVyIiwic2V0Q2xhc3NlcyIsInNlbGVjdGVkIiwic2VsZWN0ZWRJZHMiLCIkc2VsZWN0ZWQiLCJzaG93TG9hZGluZyIsImxvYWRpbmdNb3JlIiwibG9hZGluZyIsIiRsb2FkaW5nIiwiYXR0cnMiLCJyb2xlIiwiYXJpYS1zZWxlY3RlZCIsIl9yZXN1bHRJZCIsInRpdGxlIiwidGVtcGxhdGUiLCIkY2hpbGRyZW4iLCIkY2hpbGQiLCIkY2hpbGRyZW5Db250YWluZXIiLCJpc09wZW4iLCJlbnN1cmVIaWdobGlnaHRWaXNpYmxlIiwiJGhpZ2hsaWdodGVkIiwiZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzIiwiY3VycmVudEluZGV4IiwibmV4dEluZGV4IiwiY3VycmVudE9mZnNldCIsIm5leHRUb3AiLCJuZXh0T2Zmc2V0IiwibmV4dEJvdHRvbSIsIm1vdXNld2hlZWwiLCJpc0F0VG9wIiwiaXNBdEJvdHRvbSIsInN0b3BQcm9wYWdhdGlvbiIsIm9yaWdpbmFsRXZlbnQiLCJLRVlTIiwiQkFDS1NQQUNFIiwiVEFCIiwiRU5URVIiLCJTSElGVCIsIkNUUkwiLCJBTFQiLCJFU0MiLCJTUEFDRSIsIlBBR0VfVVAiLCJQQUdFX0RPV04iLCJFTkQiLCJIT01FIiwiTEVGVCIsIlVQIiwiUklHSFQiLCJET1dOIiwiREVMRVRFIiwiQmFzZVNlbGVjdGlvbiIsIiRzZWxlY3Rpb24iLCJfdGFiaW5kZXgiLCJyZXN1bHRzSWQiLCJfaGFuZGxlQmx1ciIsIl9hdHRhY2hDbG9zZUhhbmRsZXIiLCJfZGV0YWNoQ2xvc2VIYW5kbGVyIiwiJHRhcmdldCIsIiRzZWxlY3QiLCIkYWxsIiwiJHNlbGVjdGlvbkNvbnRhaW5lciIsIlNpbmdsZVNlbGVjdGlvbiIsInNlbGVjdGlvbkNvbnRhaW5lciIsInNlbGVjdGlvbiIsIiRyZW5kZXJlZCIsIk11bHRpcGxlU2VsZWN0aW9uIiwiJHJlbW92ZSIsIiRzZWxlY3Rpb25zIiwiUGxhY2Vob2xkZXIiLCJkZWNvcmF0ZWQiLCJwbGFjZWhvbGRlciIsIm5vcm1hbGl6ZVBsYWNlaG9sZGVyIiwiY3JlYXRlUGxhY2Vob2xkZXIiLCIkcGxhY2Vob2xkZXIiLCJzaW5nbGVQbGFjZWhvbGRlciIsIm11bHRpcGxlU2VsZWN0aW9ucyIsIkFsbG93Q2xlYXIiLCJfaGFuZGxlQ2xlYXIiLCJfaGFuZGxlS2V5Ym9hcmRDbGVhciIsIiRjbGVhciIsInVuc2VsZWN0RGF0YSIsIlNlYXJjaCIsIiRzZWFyY2giLCIkc2VhcmNoQ29udGFpbmVyIiwiX3RyYW5zZmVyVGFiSW5kZXgiLCJfa2V5VXBQcmV2ZW50ZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCIkcHJldmlvdXNDaG9pY2UiLCJzZWFyY2hSZW1vdmVDaG9pY2UiLCJtc2llIiwiZG9jdW1lbnRNb2RlIiwiZGlzYWJsZUlucHV0RXZlbnRzIiwiaGFuZGxlU2VhcmNoIiwic2VhcmNoSGFkRm9jdXMiLCJyZXNpemVTZWFyY2giLCJ0ZXJtIiwibWluaW11bVdpZHRoIiwiRXZlbnRSZWxheSIsInJlbGF5RXZlbnRzIiwicHJldmVudGFibGVFdmVudHMiLCJUcmFuc2xhdGlvbiIsImRpY3QiLCJ0cmFuc2xhdGlvbiIsIl9jYWNoZSIsImxvYWRQYXRoIiwidHJhbnNsYXRpb25zIiwiZGlhY3JpdGljcyIsIuKStiIsIu+8oSIsIsOAIiwiw4EiLCLDgiIsIuG6piIsIuG6pCIsIuG6qiIsIuG6qCIsIsODIiwixIAiLCLEgiIsIuG6sCIsIuG6riIsIuG6tCIsIuG6siIsIsimIiwix6AiLCLDhCIsIseeIiwi4bqiIiwiw4UiLCLHuiIsIseNIiwiyIAiLCLIgiIsIuG6oCIsIuG6rCIsIuG6tiIsIuG4gCIsIsSEIiwiyLoiLCLisa8iLCLqnLIiLCLDhiIsIse8Iiwix6IiLCLqnLQiLCLqnLYiLCLqnLgiLCLqnLoiLCLqnLwiLCLikrciLCLvvKIiLCLhuIIiLCLhuIQiLCLhuIYiLCLJgyIsIsaCIiwixoEiLCLikrgiLCLvvKMiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsOHIiwi4biIIiwixociLCLIuyIsIuqcviIsIuKSuSIsIu+8pCIsIuG4iiIsIsSOIiwi4biMIiwi4biQIiwi4biSIiwi4biOIiwixJAiLCLGiyIsIsaKIiwixokiLCLqnbkiLCLHsSIsIseEIiwix7IiLCLHhSIsIuKSuiIsIu+8pSIsIsOIIiwiw4kiLCLDiiIsIuG7gCIsIuG6viIsIuG7hCIsIuG7giIsIuG6vCIsIsSSIiwi4biUIiwi4biWIiwixJQiLCLEliIsIsOLIiwi4bq6IiwixJoiLCLIhCIsIsiGIiwi4bq4Iiwi4buGIiwiyKgiLCLhuJwiLCLEmCIsIuG4mCIsIuG4miIsIsaQIiwixo4iLCLikrsiLCLvvKYiLCLhuJ4iLCLGkSIsIuqduyIsIuKSvCIsIu+8pyIsIse0IiwixJwiLCLhuKAiLCLEniIsIsSgIiwix6YiLCLEoiIsIsekIiwixpMiLCLqnqAiLCLqnb0iLCLqnb4iLCLikr0iLCLvvKgiLCLEpCIsIuG4oiIsIuG4piIsIsieIiwi4bikIiwi4bioIiwi4biqIiwixKYiLCLisaciLCLisbUiLCLqno0iLCLikr4iLCLvvKkiLCLDjCIsIsONIiwiw44iLCLEqCIsIsSqIiwixKwiLCLEsCIsIsOPIiwi4biuIiwi4buIIiwix48iLCLIiCIsIsiKIiwi4buKIiwixK4iLCLhuKwiLCLGlyIsIuKSvyIsIu+8qiIsIsS0IiwiyYgiLCLik4AiLCLvvKsiLCLhuLAiLCLHqCIsIuG4siIsIsS2Iiwi4bi0IiwixpgiLCLisakiLCLqnYAiLCLqnYIiLCLqnYQiLCLqnqIiLCLik4EiLCLvvKwiLCLEvyIsIsS5IiwixL0iLCLhuLYiLCLhuLgiLCLEuyIsIuG4vCIsIuG4uiIsIsWBIiwiyL0iLCLisaIiLCLisaAiLCLqnYgiLCLqnYYiLCLqnoAiLCLHhyIsIseIIiwi4pOCIiwi77ytIiwi4bi+Iiwi4bmAIiwi4bmCIiwi4rGuIiwixpwiLCLik4MiLCLvvK4iLCLHuCIsIsWDIiwiw5EiLCLhuYQiLCLFhyIsIuG5hiIsIsWFIiwi4bmKIiwi4bmIIiwiyKAiLCLGnSIsIuqekCIsIuqepCIsIseKIiwix4siLCLik4QiLCLvvK8iLCLDkiIsIsOTIiwiw5QiLCLhu5IiLCLhu5AiLCLhu5YiLCLhu5QiLCLDlSIsIuG5jCIsIsisIiwi4bmOIiwixYwiLCLhuZAiLCLhuZIiLCLFjiIsIsiuIiwiyLAiLCLDliIsIsiqIiwi4buOIiwixZAiLCLHkSIsIsiMIiwiyI4iLCLGoCIsIuG7nCIsIuG7miIsIuG7oCIsIuG7niIsIuG7oiIsIuG7jCIsIuG7mCIsIseqIiwix6wiLCLDmCIsIse+IiwixoYiLCLGnyIsIuqdiiIsIuqdjCIsIsaiIiwi6p2OIiwiyKIiLCLik4UiLCLvvLAiLCLhuZQiLCLhuZYiLCLGpCIsIuKxoyIsIuqdkCIsIuqdkiIsIuqdlCIsIuKThiIsIu+8sSIsIuqdliIsIuqdmCIsIsmKIiwi4pOHIiwi77yyIiwixZQiLCLhuZgiLCLFmCIsIsiQIiwiyJIiLCLhuZoiLCLhuZwiLCLFliIsIuG5niIsIsmMIiwi4rGkIiwi6p2aIiwi6p6mIiwi6p6CIiwi4pOIIiwi77yzIiwi4bqeIiwixZoiLCLhuaQiLCLFnCIsIuG5oCIsIsWgIiwi4bmmIiwi4bmiIiwi4bmoIiwiyJgiLCLFniIsIuKxviIsIuqeqCIsIuqehCIsIuKTiSIsIu+8tCIsIuG5qiIsIsWkIiwi4bmsIiwiyJoiLCLFoiIsIuG5sCIsIuG5riIsIsWmIiwixqwiLCLGriIsIsi+Iiwi6p6GIiwi6pyoIiwi4pOKIiwi77y1Iiwiw5kiLCLDmiIsIsObIiwixagiLCLhubgiLCLFqiIsIuG5uiIsIsWsIiwiw5wiLCLHmyIsIseXIiwix5UiLCLHmSIsIuG7piIsIsWuIiwixbAiLCLHkyIsIsiUIiwiyJYiLCLGryIsIuG7qiIsIuG7qCIsIuG7riIsIuG7rCIsIuG7sCIsIuG7pCIsIuG5siIsIsWyIiwi4bm2Iiwi4bm0IiwiyYQiLCLik4siLCLvvLYiLCLhubwiLCLhub4iLCLGsiIsIuqdniIsIsmFIiwi6p2gIiwi4pOMIiwi77y3Iiwi4bqAIiwi4bqCIiwixbQiLCLhuoYiLCLhuoQiLCLhuogiLCLisbIiLCLik40iLCLvvLgiLCLhuooiLCLhuowiLCLik44iLCLvvLkiLCLhu7IiLCLDnSIsIsW2Iiwi4bu4IiwiyLIiLCLhuo4iLCLFuCIsIuG7tiIsIuG7tCIsIsazIiwiyY4iLCLhu74iLCLik48iLCLvvLoiLCLFuSIsIuG6kCIsIsW7Iiwixb0iLCLhupIiLCLhupQiLCLGtSIsIsikIiwi4rG/Iiwi4rGrIiwi6p2iIiwi4pOQIiwi772BIiwi4bqaIiwiw6AiLCLDoSIsIsOiIiwi4bqnIiwi4bqlIiwi4bqrIiwi4bqpIiwiw6MiLCLEgSIsIsSDIiwi4bqxIiwi4bqvIiwi4bq1Iiwi4bqzIiwiyKciLCLHoSIsIsOkIiwix58iLCLhuqMiLCLDpSIsIse7Iiwix44iLCLIgSIsIsiDIiwi4bqhIiwi4bqtIiwi4bq3Iiwi4biBIiwixIUiLCLisaUiLCLJkCIsIuqcsyIsIsOmIiwix70iLCLHoyIsIuqctSIsIuqctyIsIuqcuSIsIuqcuyIsIuqcvSIsIuKTkSIsIu+9giIsIuG4gyIsIuG4hSIsIuG4hyIsIsaAIiwixoMiLCLJkyIsIuKTkiIsIu+9gyIsIsSHIiwixIkiLCLEiyIsIsSNIiwiw6ciLCLhuIkiLCLGiCIsIsi8Iiwi6py/Iiwi4oaEIiwi4pOTIiwi772EIiwi4biLIiwixI8iLCLhuI0iLCLhuJEiLCLhuJMiLCLhuI8iLCLEkSIsIsaMIiwiyZYiLCLJlyIsIuqduiIsIsezIiwix4YiLCLik5QiLCLvvYUiLCLDqCIsIsOpIiwiw6oiLCLhu4EiLCLhur8iLCLhu4UiLCLhu4MiLCLhur0iLCLEkyIsIuG4lSIsIuG4lyIsIsSVIiwixJciLCLDqyIsIuG6uyIsIsSbIiwiyIUiLCLIhyIsIuG6uSIsIuG7hyIsIsipIiwi4bidIiwixJkiLCLhuJkiLCLhuJsiLCLJhyIsIsmbIiwix50iLCLik5UiLCLvvYYiLCLhuJ8iLCLGkiIsIuqdvCIsIuKTliIsIu+9hyIsIse1IiwixJ0iLCLhuKEiLCLEnyIsIsShIiwix6ciLCLEoyIsIselIiwiyaAiLCLqnqEiLCLhtbkiLCLqnb8iLCLik5ciLCLvvYgiLCLEpSIsIuG4oyIsIuG4pyIsIsifIiwi4bilIiwi4bipIiwi4birIiwi4bqWIiwixKciLCLisagiLCLisbYiLCLJpSIsIsaVIiwi4pOYIiwi772JIiwiw6wiLCLDrSIsIsOuIiwixKkiLCLEqyIsIsStIiwiw68iLCLhuK8iLCLhu4kiLCLHkCIsIsiJIiwiyIsiLCLhu4siLCLEryIsIuG4rSIsIsmoIiwixLEiLCLik5kiLCLvvYoiLCLEtSIsIsewIiwiyYkiLCLik5oiLCLvvYsiLCLhuLEiLCLHqSIsIuG4syIsIsS3Iiwi4bi1IiwixpkiLCLisaoiLCLqnYEiLCLqnYMiLCLqnYUiLCLqnqMiLCLik5siLCLvvYwiLCLFgCIsIsS6IiwixL4iLCLhuLciLCLhuLkiLCLEvCIsIuG4vSIsIuG4uyIsIsW/IiwixYIiLCLGmiIsIsmrIiwi4rGhIiwi6p2JIiwi6p6BIiwi6p2HIiwix4kiLCLik5wiLCLvvY0iLCLhuL8iLCLhuYEiLCLhuYMiLCLJsSIsIsmvIiwi4pOdIiwi772OIiwix7kiLCLFhCIsIsOxIiwi4bmFIiwixYgiLCLhuYciLCLFhiIsIuG5iyIsIuG5iSIsIsaeIiwiybIiLCLFiSIsIuqekSIsIuqepSIsIseMIiwi4pOeIiwi772PIiwiw7IiLCLDsyIsIsO0Iiwi4buTIiwi4buRIiwi4buXIiwi4buVIiwiw7UiLCLhuY0iLCLIrSIsIuG5jyIsIsWNIiwi4bmRIiwi4bmTIiwixY8iLCLIryIsIsixIiwiw7YiLCLIqyIsIuG7jyIsIsWRIiwix5IiLCLIjSIsIsiPIiwixqEiLCLhu50iLCLhu5siLCLhu6EiLCLhu58iLCLhu6MiLCLhu40iLCLhu5kiLCLHqyIsIsetIiwiw7giLCLHvyIsIsmUIiwi6p2LIiwi6p2NIiwiybUiLCLGoyIsIsijIiwi6p2PIiwi4pOfIiwi772QIiwi4bmVIiwi4bmXIiwixqUiLCLhtb0iLCLqnZEiLCLqnZMiLCLqnZUiLCLik6AiLCLvvZEiLCLJiyIsIuqdlyIsIuqdmSIsIuKToSIsIu+9kiIsIsWVIiwi4bmZIiwixZkiLCLIkSIsIsiTIiwi4bmbIiwi4bmdIiwixZciLCLhuZ8iLCLJjSIsIsm9Iiwi6p2bIiwi6p6nIiwi6p6DIiwi4pOiIiwi772TIiwiw58iLCLFmyIsIuG5pSIsIsWdIiwi4bmhIiwixaEiLCLhuaciLCLhuaMiLCLhuakiLCLImSIsIsWfIiwiyL8iLCLqnqkiLCLqnoUiLCLhupsiLCLik6MiLCLvvZQiLCLhuasiLCLhupciLCLFpSIsIuG5rSIsIsibIiwixaMiLCLhubEiLCLhua8iLCLFpyIsIsatIiwiyogiLCLisaYiLCLqnociLCLqnKkiLCLik6QiLCLvvZUiLCLDuSIsIsO6Iiwiw7siLCLFqSIsIuG5uSIsIsWrIiwi4bm7Iiwixa0iLCLDvCIsIsecIiwix5giLCLHliIsIseaIiwi4bunIiwixa8iLCLFsSIsIseUIiwiyJUiLCLIlyIsIsawIiwi4burIiwi4bupIiwi4buvIiwi4butIiwi4buxIiwi4bulIiwi4bmzIiwixbMiLCLhubciLCLhubUiLCLKiSIsIuKTpSIsIu+9liIsIuG5vSIsIuG5vyIsIsqLIiwi6p2fIiwiyowiLCLqnaEiLCLik6YiLCLvvZciLCLhuoEiLCLhuoMiLCLFtSIsIuG6hyIsIuG6hSIsIuG6mCIsIuG6iSIsIuKxsyIsIuKTpyIsIu+9mCIsIuG6iyIsIuG6jSIsIuKTqCIsIu+9mSIsIuG7syIsIsO9IiwixbciLCLhu7kiLCLIsyIsIuG6jyIsIsO/Iiwi4bu3Iiwi4bqZIiwi4bu1IiwixrQiLCLJjyIsIuG7vyIsIuKTqSIsIu+9miIsIsW6Iiwi4bqRIiwixbwiLCLFviIsIuG6kyIsIuG6lSIsIsa2IiwiyKUiLCLJgCIsIuKxrCIsIuqdoyIsIs6GIiwizogiLCLOiSIsIs6KIiwizqoiLCLOjCIsIs6OIiwizqsiLCLOjyIsIs6sIiwizq0iLCLOriIsIs6vIiwiz4oiLCLOkCIsIs+MIiwiz40iLCLPiyIsIs6wIiwiz4kiLCLPgiIsIkJhc2VBZGFwdGVyIiwiZ2VuZXJhdGVSZXN1bHRJZCIsIlNlbGVjdEFkYXB0ZXIiLCJjdXJyZW50RGF0YSIsInVuc2VsZWN0IiwiYWRkT3B0aW9ucyIsIm5vcm1hbGl6ZWREYXRhIiwiX25vcm1hbGl6ZUl0ZW0iLCJtYXRjaGVyIiwiQXJyYXlBZGFwdGVyIiwiY29udmVydFRvT3B0aW9ucyIsImVsbSIsIm9ubHlJdGVtIiwiJGV4aXN0aW5nIiwiZXhpc3RpbmdJZHMiLCIkZXhpc3RpbmdPcHRpb24iLCJleGlzdGluZ0RhdGEiLCIkbmV3T3B0aW9uIiwiQWpheEFkYXB0ZXIiLCJhamF4T3B0aW9ucyIsIl9hcHBseURlZmF1bHRzIiwicHJvY2Vzc1Jlc3VsdHMiLCJ0cmFuc3BvcnQiLCJmYWlsdXJlIiwiJHJlcXVlc3QiLCJ0aGVuIiwiZmFpbCIsInJlcXVlc3QiLCJfcmVxdWVzdCIsIl9xdWVyeVRpbWVvdXQiLCJUYWdzIiwidGFncyIsImNyZWF0ZVRhZyIsInRhZyIsImNoZWNrQ2hpbGRyZW4iLCJjaGVja1RleHQiLCJpbnNlcnRUYWciLCJfcmVtb3ZlT2xkVGFncyIsIl9sYXN0VGFnIiwiVG9rZW5pemVyIiwidG9rZW5pemVyIiwiZHJvcGRvd24iLCJ0b2tlbkRhdGEiLCJzZXBhcmF0b3JzIiwidGVybUNoYXIiLCJwYXJ0UGFyYW1zIiwiTWluaW11bUlucHV0TGVuZ3RoIiwiJGUiLCJtaW5pbXVtSW5wdXRMZW5ndGgiLCJtaW5pbXVtIiwiTWF4aW11bUlucHV0TGVuZ3RoIiwibWF4aW11bUlucHV0TGVuZ3RoIiwibWF4aW11bSIsIk1heGltdW1TZWxlY3Rpb25MZW5ndGgiLCJtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoIiwiRHJvcGRvd24iLCJzaG93U2VhcmNoIiwiSGlkZVBsYWNlaG9sZGVyIiwicmVtb3ZlUGxhY2Vob2xkZXIiLCJtb2RpZmllZERhdGEiLCJJbmZpbml0ZVNjcm9sbCIsImxhc3RQYXJhbXMiLCIkbG9hZGluZ01vcmUiLCJjcmVhdGVMb2FkaW5nTW9yZSIsInNob3dMb2FkaW5nTW9yZSIsImlzTG9hZE1vcmVWaXNpYmxlIiwibG9hZGluZ01vcmVPZmZzZXQiLCJsb2FkTW9yZSIsIm1vcmUiLCJBdHRhY2hCb2R5IiwiJGRyb3Bkb3duUGFyZW50Iiwic2V0dXBSZXN1bHRzRXZlbnRzIiwiX3Nob3dEcm9wZG93biIsIl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIiLCJfcG9zaXRpb25Ecm9wZG93biIsIl9yZXNpemVEcm9wZG93biIsIl9oaWRlRHJvcGRvd24iLCJfZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyIiwiJGRyb3Bkb3duQ29udGFpbmVyIiwic2Nyb2xsRXZlbnQiLCJyZXNpemVFdmVudCIsIm9yaWVudGF0aW9uRXZlbnQiLCIkd2F0Y2hlcnMiLCJwYXJlbnRzIiwiJHdpbmRvdyIsImlzQ3VycmVudGx5QWJvdmUiLCJpc0N1cnJlbnRseUJlbG93IiwibmV3RGlyZWN0aW9uIiwiZW5vdWdoUm9vbUFib3ZlIiwiZW5vdWdoUm9vbUJlbG93IiwicGFyZW50T2Zmc2V0IiwibWluV2lkdGgiLCJjb3VudFJlc3VsdHMiLCJNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCIsIm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoIiwiU2VsZWN0T25DbG9zZSIsIl9oYW5kbGVTZWxlY3RPbkNsb3NlIiwiJGhpZ2hsaWdodGVkUmVzdWx0cyIsIkNsb3NlT25TZWxlY3QiLCJfc2VsZWN0VHJpZ2dlcmVkIiwiY3RybEtleSIsImVycm9yTG9hZGluZyIsImlucHV0VG9vTG9uZyIsIm92ZXJDaGFycyIsImlucHV0VG9vU2hvcnQiLCJyZW1haW5pbmdDaGFycyIsIm1heGltdW1TZWxlY3RlZCIsIm5vUmVzdWx0cyIsInNlYXJjaGluZyIsIlJlc3VsdHNMaXN0IiwiU2VsZWN0aW9uU2VhcmNoIiwiRElBQ1JJVElDUyIsIlNlbGVjdERhdGEiLCJBcnJheURhdGEiLCJBamF4RGF0YSIsIkRyb3Bkb3duU2VhcmNoIiwiRW5nbGlzaFRyYW5zbGF0aW9uIiwiRGVmYXVsdHMiLCJ0b2tlblNlcGFyYXRvcnMiLCJRdWVyeSIsImFtZEJhc2UiLCJpbml0U2VsZWN0aW9uIiwiSW5pdFNlbGVjdGlvbiIsInJlc3VsdHNBZGFwdGVyIiwic2VsZWN0T25DbG9zZSIsImRyb3Bkb3duQWRhcHRlciIsIlNlYXJjaGFibGVEcm9wZG93biIsImNsb3NlT25TZWxlY3QiLCJkcm9wZG93bkNzc0NsYXNzIiwiZHJvcGRvd25Dc3MiLCJhZGFwdERyb3Bkb3duQ3NzQ2xhc3MiLCJEcm9wZG93bkNTUyIsInNlbGVjdGlvbkFkYXB0ZXIiLCJhbGxvd0NsZWFyIiwiY29udGFpbmVyQ3NzQ2xhc3MiLCJjb250YWluZXJDc3MiLCJhZGFwdENvbnRhaW5lckNzc0NsYXNzIiwiQ29udGFpbmVyQ1NTIiwibGFuZ3VhZ2VQYXJ0cyIsImJhc2VMYW5ndWFnZSIsImxhbmd1YWdlcyIsImxhbmd1YWdlTmFtZXMiLCJhbWRMYW5ndWFnZUJhc2UiLCJleCIsIndhcm4iLCJiYXNlVHJhbnNsYXRpb24iLCJjdXN0b21UcmFuc2xhdGlvbiIsInN0cmlwRGlhY3JpdGljcyIsIm9yaWdpbmFsIiwiZHJvcGRvd25BdXRvV2lkdGgiLCJ0ZW1wbGF0ZVJlc3VsdCIsInRlbXBsYXRlU2VsZWN0aW9uIiwidGhlbWUiLCJjYW1lbEtleSIsImNhbWVsQ2FzZSIsImNvbnZlcnRlZERhdGEiLCJPcHRpb25zIiwiZnJvbUVsZW1lbnQiLCJJbnB1dENvbXBhdCIsImV4Y2x1ZGVkRGF0YSIsImRhdGFzZXQiLCJTZWxlY3QyIiwiX2dlbmVyYXRlSWQiLCJEYXRhQWRhcHRlciIsIl9wbGFjZUNvbnRhaW5lciIsIlNlbGVjdGlvbkFkYXB0ZXIiLCJEcm9wZG93bkFkYXB0ZXIiLCJSZXN1bHRzQWRhcHRlciIsIl9iaW5kQWRhcHRlcnMiLCJfcmVnaXN0ZXJEb21FdmVudHMiLCJfcmVnaXN0ZXJEYXRhRXZlbnRzIiwiX3JlZ2lzdGVyU2VsZWN0aW9uRXZlbnRzIiwiX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMiLCJfcmVnaXN0ZXJSZXN1bHRzRXZlbnRzIiwiX3JlZ2lzdGVyRXZlbnRzIiwiaW5pdGlhbERhdGEiLCJfc3luY0F0dHJpYnV0ZXMiLCJfcmVzb2x2ZVdpZHRoIiwiV0lEVEgiLCJlbGVtZW50V2lkdGgiLCJfc3luYyIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiX29ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJzdWJ0cmVlIiwibm9uUmVsYXlFdmVudHMiLCJ0b2dnbGVEcm9wZG93biIsImFsdEtleSIsImFjdHVhbFRyaWdnZXIiLCJwcmVUcmlnZ2VyTWFwIiwicHJlVHJpZ2dlck5hbWUiLCJwcmVUcmlnZ2VyQXJncyIsImhhc0ZvY3VzIiwibmV3VmFsIiwiZGlzY29ubmVjdCIsInRoaXNNZXRob2RzIiwiaW5zdGFuY2VPcHRpb25zIiwiZmlyZSIsImNtZCIsInRyYW5zaXRpb25FbmRFdmVudHMiLCJzaG93SGFuZGxlciIsImhhbmRsZWRUcmFuc2l0aW9uRW5kIiwieGNlbnRlciIsInljZW50ZXIiLCJoaWRlSGFuZGxlciIsIkluc3RhZmVlZCIsInJlc29sdXRpb24iLCJtb2NrIiwidXNlSHR0cCIsIl9nZW5LZXkiLCJoYXNOZXh0IiwibmV4dFVybCIsImluc3RhbmNlTmFtZSIsInNjcmlwdCIsImNsaWVudElkIiwiYWNjZXNzVG9rZW4iLCJfYnVpbGRVcmwiLCJhbmNob3IiLCJjaGlsZE5vZGVDb3VudCIsImNoaWxkTm9kZUluZGV4IiwiY2hpbGROb2Rlc0FyciIsImVNc2ciLCJodG1sU3RyaW5nIiwiaHR0cFByb3RvY29sIiwiaW1hZ2VPYmoiLCJpbWFnZVN0cmluZyIsImltYWdlVXJsIiwiaW1nSGVpZ2h0IiwiaW1nT3JpZW50IiwiaW1nVXJsIiwiaW1nV2lkdGgiLCJsZW4xIiwibGVuMiIsInBhcnNlZExpbWl0Iiwic29ydFNldHRpbmdzIiwidGFyZ2V0RWwiLCJ0bXBFbCIsImNvZGUiLCJlcnJvcl9tZXNzYWdlIiwibmV4dF91cmwiLCJfc29ydEJ5IiwibGltaXQiLCJwcm90b2NvbCIsIl9tYWtlVGVtcGxhdGUiLCJtb2RlbCIsImxpbmsiLCJvcmllbnRhdGlvbiIsIl9nZXRPYmplY3RQcm9wZXJ0eSIsImxpa2VzIiwiY29tbWVudHMiLCJnZXRFbGVtZW50QnlJZCIsIl9lcnJvciIsImVuZHBvaW50IiwiZmluYWwiLCJ0YWdOYW1lIiwibG9jYXRpb25JZCIsInVzZXJJZCIsIlM0Iiwib3V0cHV0IiwicGF0dGVybiIsInJlZiIsInZhck5hbWUiLCJ2YXJWYWx1ZSIsInBpZWNlIiwicGllY2VzIiwidmFsdWVBIiwidmFsdWVCIiwiZmlsdGVyZWRJbWFnZXMiLDEsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZGVmaW5lUHJvcGVydHkiLCJyZXNldElucHV0IiwibG9nU3RyIiwiY29uZmlybUJ1dHRvblRleHQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiZG9uZUZ1bmN0aW9uIiwiZml4VmVydGljYWxQb3NpdGlvbiIsIm9wZW5Nb2RhbCIsImdldE1vZGFsIiwiaGFuZGxlQnV0dG9uIiwiUyIsImdldE92ZXJsYXkiLCJvbmZvY3VzIiwiZW5hYmxlQnV0dG9ucyIsInNldERlZmF1bHRzIiwiZmFkZU91dCIsInByZXZpb3VzQWN0aXZlRWxlbWVudCIsInNob3dJbnB1dEVycm9yIiwicmVzZXRJbnB1dEVycm9yIiwiZGlzYWJsZUJ1dHRvbnMiLCJzd2VldEFsZXJ0Iiwic3dhbCIsIi4vbW9kdWxlcy9kZWZhdWx0LXBhcmFtcyIsIi4vbW9kdWxlcy9oYW5kbGUtY2xpY2siLCIuL21vZHVsZXMvaGFuZGxlLWRvbSIsIi4vbW9kdWxlcy9oYW5kbGUta2V5IiwiLi9tb2R1bGVzL2hhbmRsZS1zd2FsLWRvbSIsIi4vbW9kdWxlcy9zZXQtcGFyYW1zIiwiLi9tb2R1bGVzL3V0aWxzIiwiYWxsb3dPdXRzaWRlQ2xpY2siLCJzaG93Q29uZmlybUJ1dHRvbiIsImNsb3NlT25Db25maXJtIiwiY2xvc2VPbkNhbmNlbCIsImNvbmZpcm1CdXR0b25Db2xvciIsImNhbmNlbEJ1dHRvblRleHQiLCJpbWFnZVNpemUiLCJjdXN0b21DbGFzcyIsImFsbG93RXNjYXBlS2V5IiwiaW5wdXRUeXBlIiwiaW5wdXRQbGFjZWhvbGRlciIsImlucHV0VmFsdWUiLCJzaG93TG9hZGVyT25Db25maXJtIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3JMdW1pbmFuY2UiLCJib3hTaGFkb3ciLCJpc0Rlc2NlbmRhbnQiLCJoYW5kbGVDb25maXJtIiwiaGFuZGxlQ2FuY2VsIiwiLi9oYW5kbGUtZG9tIiwiLi9oYW5kbGUtc3dhbC1kb20iLCIuL3V0aWxzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIk1vdXNlRXZlbnQiLCJ2aWV3IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjcmVhdGVFdmVudE9iamVjdCIsImZpcmVFdmVudCIsImNhbmNlbEJ1YmJsZSIsImVzY2FwZUh0bWwiLCJfc2hvdyIsIl9oaWRlIiwiZ2V0VG9wTWFyZ2luIiwiZmFkZUluIiwiZmlyZUNsaWNrIiwic3RvcEV2ZW50UHJvcGFnYXRpb24iLCJzZXRGb2N1c1N0eWxlIiw2LCJoZXhUb1JnYiIsInN3ZWV0QWxlcnRJbml0aWFsaXplIiwiZ2V0SW5wdXQiLCIuL2RlZmF1bHQtcGFyYW1zIiwiLi9pbmplY3RlZC1odG1sIiw3LDgsImJhY2tncm91bmRJbWFnZSIsImJvcmRlckxlZnRDb2xvciIsImNvbmZpcm1Mb2FkaW5nQnV0dG9uQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiw5LCJleGVjIiwiaW9zT3ZlcmxheSIsIm92ZXJsYXlET00iLCJvbmJlZm9yZXNob3ciLCJvbnNob3ciLCJvbmJlZm9yZWhpZGUiLCJvbmhpZGUiLCJpY29uIiwic3Bpbm5lciIsInBhcmVudEVsIiwib2JqMSIsIm9iajIiLCJvYmozIiwiYXR0ck9uZSIsImF0dHJUd28iLCJkb2VzVHJhbnNpdGlvbnMiLCJoYW5kbGVBbmltIiwiYW5pbSIsImFuaW1hdGlvbk5hbWUiLCJjYXJ0IiwiY2FydEl0ZW1zIiwiZW1wdHlUYWJsZSIsImZ1bGxfcHJpY2UiLCJ0YWJsZU9yZGVyIiwiZ2V0SlNPTiIsImxpa2UiLCJsb2dpbiIsInBhc3N3b3JkIiwicmVsb2FkIiwiY2hhbmdlIiwia2V5cHJlc3MiLCJjaGFyQ29kZSIsImRhdGFfaXRlbXMiLCJwYXJzZUpTT04iLCJOdW1iZXIiLCJzZXF1ZW5jZUVsZW1lbnQiLCJtb2RhbCIsImNvbnRlbnRUeXBlIiwiaXRlbV9yZXN1bHQiLCJpdGVtX2lkIiwiaXRlbV9uYW1lIiwiaXRlbV9wcmljZSIsInByaWNlIiwiaXRlbV9jb21wb25lbnQiLCJjb21wb25lbnRzIiwiaXRlbV93ZWlnaHQiLCJ3ZWlnaHQiLCJpdGVtX2NhdGVnb3J5IiwiY2F0ZWdvcnkiLCJkYXRhLWl0ZW1zIiwiYXJyYXlzX29uZSIsInNpZGViYXIiLCJib2R5d2l0aHNpZGViYXIiLCJhbGxvd1NhbXBsZSIsImdyaWQiLCJpbml0SXNvdG9wZSIsImluaXRFdmVudHMiLCJpc28iLCJtYXNvbnJ5IiwiZmlsdGVyQ3RybHMiLCJmaWx0ZXJDdHJsIiwicmVjYWxjRmxpY2tpdGllcyIsImFkZFRvQ2FydCIsIm9uRW5kQW5pbWF0aW9uIiwiZmxrdGllcyIsImFuaW1FbmRFdmVudE5hbWVzIiwiT0FuaW1hdGlvbiIsIm1zQW5pbWF0aW9uIiwiYW5pbUVuZEV2ZW50TmFtZSIsIm9uRW5kQ2FsbGJhY2tGbiJdLCJtYXBwaW5ncyI6IkFBcXhHQSxRQUFTQSxnQkFBZUMsRUFBY0MsR0FFcEMsWUFFQSxJQUFJQyxNQUNBQyxFQUFXLEVBU1hDLEVBQVcsU0FBV0MsRUFBU0MsR0EwU2pDLFFBQVNDLEdBQVFDLEdBRWYsTUFBK0MsbUJBQTNDQyxPQUFPQyxVQUFVQyxTQUFTQyxLQUFLSixJQUMxQixHQUVBLEVBWVgsUUFBU0ssR0FBT0MsRUFBR0MsR0FFakIsSUFBSyxHQUFJQyxLQUFLRCxHQUNaRCxFQUFFRSxHQUFLRCxFQUFFQyxFQUdYLE9BQU9GLEdBVVQsUUFBU0csR0FBU1osRUFBU2EsR0FFekIsR0FBSUMsRUFXSixPQVJJZCxHQUFRZSxhQUNWRCxFQUFRZCxFQUFRZSxhQUFhRixHQUd0QkcsU0FBU0MsYUFBZUQsU0FBU0MsWUFBWUMsbUJBQ3BESixFQUFRRSxTQUFTQyxZQUFZQyxpQkFBaUJsQixFQUFTLElBQUlhLElBR3REQyxFQVdULFFBQVNLLEdBQVNuQixFQUFTb0IsRUFBV0MsR0FFcEMsR0FBSXJCLEVBQVFzQixpQkFHVixNQUZBdEIsR0FBUXNCLGlCQUFpQkYsRUFBV0MsR0FBUyxHQUV0Q0EsQ0FHSixJQUFJckIsRUFBUXVCLFlBQWEsQ0FHNUIsR0FBSUMsR0FBVyxXQUNiSCxFQUFRZCxLQUFLUCxHQUtmLE9BRkFBLEdBQVF1QixZQUFZLEtBQU9ILEVBQVdJLEdBRS9CQSxHQVlYLFFBQVNDLEdBQVl6QixFQUFTb0IsRUFBV0MsR0FFbkNyQixFQUFRc0IsaUJBQ1Z0QixFQUFRMEIsb0JBQW9CTixFQUFXQyxHQUFTLEdBR3pDckIsRUFBUTJCLGFBQ2YzQixFQUFRMkIsWUFBWSxLQUFPUCxFQUFXQyxHQVkxQyxRQUFTTyxHQUFnQkMsR0FFdkIsR0FBSUMsR0FDQUMsQ0FlSixPQVhFQSxHQURFRixFQUFLRyxRQUFRLE1BQVEsR0FDWixFQUVBLElBSVhGLEVBRFUsTUFBUkQsRUFDYyxFQUVBSSxXQUFXSixFQUFLSyxRQUFRLElBQUssS0FBT0gsRUFjeEQsUUFBU0ksR0FBU25DLEVBQVNvQyxHQUV6QixNQUFnQkMsVUFBWnJDLEVBSUcsR0FBSXNDLFFBQU8sVUFBWUYsRUFBTyxXQUFXRyxLQUFLdkMsRUFBUXdDLFdBSjdELE9BY0YsUUFBU0MsR0FBU0MsRUFBVU4sR0FFMUIsR0FBSXBDLEdBQ0EyQyxFQUNBaEMsQ0FXSixLQVBJVCxFQUFRd0MsTUFBYyxJQUN4QkMsRUFBaUIsRUFDakJELEdBQVlBLElBR2RDLEVBQWlCRCxFQUFTRSxPQUVyQmpDLEVBQUksRUFBT2dDLEVBQUpoQyxFQUFvQkEsSUFFOUJYLEVBQVUwQyxFQUFTL0IsR0FFZndCLEVBQVNuQyxFQUFTb0MsTUFBVSxJQUM5QnBDLEVBQVF3QyxZQUFjeEMsRUFBUXdDLFVBQVksSUFBSyxJQUFNSixHQVkzRCxRQUFTUyxHQUFZSCxFQUFVTixHQUU3QixHQUFJcEMsR0FDQTJDLEVBQ0FoQyxDQWFKLEtBVElULEVBQVF3QyxNQUFjLEdBQ3hCQyxFQUFpQixFQUNqQkQsR0FBWUEsSUFJWkMsRUFBaUJELEVBQVNFLE9BR3ZCakMsRUFBSSxFQUFPZ0MsRUFBSmhDLEVBQW9CQSxJQUU5QlgsRUFBVTBDLEVBQVMvQixHQUVmd0IsRUFBU25DLEVBQVNvQyxNQUFVLElBQzlCcEMsRUFBUXdDLFVBQVl4QyxFQUFRd0MsVUFBVU4sUUFBUSxHQUFJSSxRQUFPLFVBQVlGLEVBQU8sV0FBVyxLQUFLRixRQUFRLGFBQWMsS0FZeEgsUUFBU1ksR0FBYzlDLEVBQVMrQyxHQUc5QixHQUFJQyxHQUFPaEQsRUFBUWlELHdCQUNmQyxHQUFTLENBT2IsT0FKSUgsR0FBT0ksU0FBV0gsRUFBS0ksTUFBUUwsRUFBT0ksU0FBV0gsRUFBS0ssT0FBU04sRUFBT08sU0FBV04sRUFBS08sS0FBT1IsRUFBT08sU0FBV04sRUFBS1EsU0FDdEhOLEdBQVMsR0FHSkEsRUFtQlQsUUFBU08sR0FBVUMsRUFBUUMsRUFBUUMsR0FFakMsR0FBd0IsU0FBcEJELEVBQU9FLFNBQ1QsT0FBTyxDQUlULElBQUlILElBQVdDLEVBeUJiLE1BREFDLEdBQWlCRCxFQUNWRixFQUFVQyxFQUFRQyxFQUFPRyxXQUFZRixFQXZCNUMsSUFBdUJ2QixTQUFuQnVCLEVBVUYsSUFQQSxHQUFJRyxHQUFXSCxFQUNYSSxFQUFjTixFQUFPTyxxQkFBcUJGLEVBQVNGLFVBR25EbEQsRUFBSXFELEVBQVlwQixPQUdiakMsS0FDTCxHQUFJb0QsSUFBYUMsRUFBWXJELEdBRzNCLE1BQU9BLEdBQUksRUFzQnJCLFFBQVN1RCxHQUFtQkMsR0FFMUIsR0FBSUMsR0FBa0IsRUFDbEJDLEVBQWtCekUsRUFBTzBFLGNBa0I3QixRQWhCeUJqQyxTQUFyQjhCLEVBQVlmLE1BQTRDZixTQUF0QjhCLEVBQVlkLFNBQ2hEZSxHQUFtQixJQUdFL0IsU0FBbkI4QixFQUFZSSxJQUF5Q2xDLFNBQXJCOEIsRUFBWUssUUFDOUNKLEdBQW1CLEdBR0csSUFBcEJBLEVBQ0ZDLEVBQWtCekUsRUFBTzZFLHFCQUNJLElBQXBCTCxFQUNUQyxFQUFrQnpFLEVBQU84RSxtQkFDSSxJQUFwQk4sSUFDVEMsRUFBa0J6RSxFQUFPK0UsZUFHcEJOLEVBV1QsUUFBU08sR0FBeUJDLEVBQUtDLEdBT3JDLEdBQUlDLEdBQVMsT0FDVEMsRUFBVSxVQUVWRixHQUFVRyxTQUFVLElBQ3RCRCxFQUFVLFNBR1p2QyxFQUFTb0MsRUFBS0UsRUFBU0MsR0F6bkJ6QixHQUFJRSxHQUFhbEYsRUFBUW1GLGFBQWEsbUJBR3RDLElBQW1CLE9BQWZELEVBQ0YsTUFBT3JGLEdBQVVxRixFQUluQmxGLEdBQVFvRixhQUFhLG1CQUFvQnRGLEdBQ3pDQSxHQUtBLElBQUl1RixJQUtGQyxlQUFnQixFQUdoQkMsd0JBQXdCLEVBR3hCQyxPQUFPLEVBSVBDLGdCQUFnQixFQUdoQkMsZ0NBQWdDLEVBR2hDQyw4Q0FBOEMsRUFHOUNDLHFCQUFxQixFQU1yQkMsZUFBZSxFQUdmQyxzQkFBdUIsSUFTdkJDLFVBQVUsRUFHVkMsaUJBQWtCLElBR2xCQyxjQUFlLEtBR2ZDLGtCQUFtQixFQUtuQkMsZ0JBQWdCLEVBR2hCQyxzQkFBc0IsRUFPdEJDLGdCQUFnQixFQUdoQkMsd0JBQXlCLElBR3pCQyxxQkFBcUIsRUFHckJDLGFBQWMsSUFJZEMsaUNBQWlDLEVBSWpDQyx3QkFBd0IsRUFReEJDLFlBQVksRUFDWkMsWUFBWSxFQVFaQyxZQUFZLEVBUVpDLFdBQVcsRUFHWEMsbUJBQW9CLEdBR3BCQyxzQkFTQUMseUJBQXlCLEVBSXpCQyxnQkFBZ0IsRUFNaEJDLGVBQWUsRUFJZkMsc0JBQXNCLEVBR3RCQyxXQUNFakUsS0FBTSxTQUFTa0UsR0FBV0EsRUFBU0MsUUFDbkNsRSxNQUFPLFNBQVNpRSxHQUFXQSxFQUFTRSxTQU90Q0MsaUJBQWlCLEVBR2pCdEQsYUFDRWYsS0FBTSxTQUFTa0UsR0FBV0EsRUFBU0UsUUFDbkNuRSxNQUFPLFNBQVNpRSxHQUFXQSxFQUFTQyxRQUNwQ2hELEdBQUlsQyxPQUNKbUMsS0FBTW5DLFFBSVJxRixzQkFPQUMsVUFBVSxFQUdWQyxtQkFBbUIsRUFHbkJDLHdCQUF3QixFQU14QkMsVUFHRUMsTUFBTyxNQVFQQyxFQUFlLEdBSWZDLEVBQWtCLElBR2xCQyxHQUVGQyxXQUNFQyxnQkFBbUIsV0FDbkJELFVBQWEsS0FjYnJELEVBQVUsU0FBU3JFLEVBQUVDLEVBQUUySCxHQUFHLFFBQVNDLEdBQUU3SCxHQUFHRSxFQUFFNEgsUUFBUTlILEVBQWtELFFBQVMrSCxHQUFFL0gsRUFBRUMsR0FBRyxhQUFjRCxLQUFJQyxFQUFFLFFBQVMrSCxHQUFFaEksRUFBRUMsR0FBRyxVQUFVLEdBQUdELEdBQUd1QixRQUFRdEIsR0FBRyxRQUFTZ0ksR0FBRWpJLEVBQUVDLEdBQUcsSUFBSSxHQUFJaUksS0FBS2xJLEdBQUUsQ0FBQyxHQUFJbUksR0FBRW5JLEVBQUVrSSxFQUFHLEtBQUlGLEVBQUVHLEVBQUUsTUFBTWpJLEVBQUVpSSxLQUFLUCxFQUFFLE1BQVUsT0FBSDNILEVBQVNrSSxHQUFFLEVBQUcsT0FBTSxFQUFHLFFBQVNDLEdBQUVwSSxFQUFFQyxFQUFFaUksR0FBRyxJQUFJLEdBQUlDLEtBQUtuSSxHQUFFLENBQUMsR0FBSXFJLEdBQUVwSSxFQUFFRCxFQUFFbUksR0FBSSxJQUFHRSxJQUFJVCxFQUFFLE1BQU9NLE1BQUksRUFBR2xJLEVBQUVtSSxHQUFHSixFQUFFTSxFQUFFLFlBQVlBLEVBQUVDLEtBQUtKLEdBQUdqSSxHQUFHb0ksRUFBRSxPQUFNLEVBQUcsUUFBU0UsR0FBRXZJLEVBQUVDLEVBQUUySCxHQUFHLEdBQUlNLEdBQUVsSSxFQUFFd0ksT0FBTyxHQUFHQyxjQUFjekksRUFBRTBJLE1BQU0sR0FBR1AsR0FBR25JLEVBQUUsSUFBSTJJLEVBQUVDLEtBQUtWLEVBQUUsS0FBS0EsR0FBR1csTUFBTSxJQUFLLE9BQU9kLEdBQUU5SCxFQUFFLFdBQVc4SCxFQUFFOUgsRUFBRSxhQUFhZ0ksRUFBRUUsRUFBRWxJLElBQUlrSSxHQUFHbkksRUFBRSxJQUFJOEksRUFBRUYsS0FBS1YsRUFBRSxLQUFLQSxHQUFHVyxNQUFNLEtBQUtULEVBQUVELEVBQUVsSSxFQUFFMkgsSUFBSSxHQUFvRm1CLEdBQTRMQyxFQUE0Z0JDLEVBQXh4QmYsRUFBRSxRQUFRQyxLQUFLRSxFQUFFcEksRUFBRWlKLGdCQUFnQkMsRUFBRSxZQUFZQyxFQUFFbkosRUFBRW9KLGNBQWNGLEdBQUdqSixFQUFFa0osRUFBRUUsTUFBc0JDLE1BQVQxSixTQUFXLDRCQUE0QmdKLE1BQU0sTUFBS1csRUFBRSxrQkFBa0JiLEVBQUVhLEVBQUVYLE1BQU0sS0FBS0MsRUFBRVUsRUFBRUMsY0FBY1osTUFBTSxLQUFLYSxHQUFHQyxJQUFJLDhCQUE4QkMsS0FBZUMsS0FBS0MsRUFBRUQsRUFBRW5CLE1BQVFxQixFQUFFLFNBQVMvSixFQUFFNEgsRUFBRU0sRUFBRUMsR0FBRyxHQUFJaUIsR0FBRWxKLEVBQUU2SSxFQUFFaUIsRUFBRVQsRUFBRXRKLEVBQUVvSixjQUFjLE9BQU9HLEVBQUV2SixFQUFFZ0ssS0FBS3RCLEVBQUVhLEdBQUd2SixFQUFFb0osY0FBYyxPQUFRLElBQUdhLFNBQVNoQyxFQUFFLElBQUksS0FBTUEsS0FBSWEsRUFBRTlJLEVBQUVvSixjQUFjLE9BQU9OLEVBQUVvQixHQUFHaEMsRUFBRUEsRUFBRUQsR0FBR2lCLEdBQUdqQixFQUFFLEdBQUdxQixFQUFFYSxZQUFZckIsRUFBRyxPQUFPSyxJQUFHLFNBQVMsZUFBZUQsRUFBRSxLQUFLbkosRUFBRSxZQUFZNEksS0FBSyxJQUFJVyxFQUFFWSxHQUFHaEIsR0FBR0ssRUFBRUQsRUFBRVosR0FBRzBCLFdBQVdqQixFQUFFVCxFQUFFeUIsWUFBWWIsR0FBR0MsSUFBSWIsRUFBRVcsTUFBTWdCLFdBQVcsR0FBRzNCLEVBQUVXLE1BQU1pQixTQUFTLFNBQVNQLEVBQUUzQixFQUFFaUIsTUFBTWlCLFNBQVNsQyxFQUFFaUIsTUFBTWlCLFNBQVMsU0FBU2xDLEVBQUUrQixZQUFZekIsSUFBSXpJLEVBQUUwSCxFQUFFMkIsRUFBRXZKLEdBQUd3SixFQUFFRCxFQUFFbEcsV0FBV21ILFlBQVlqQixJQUFJWixFQUFFdEYsV0FBV21ILFlBQVk3QixHQUFHTixFQUFFaUIsTUFBTWlCLFNBQVNQLEtBQUs5SixHQUFHdUssS0FBS0MsY0FBK0Z6QixHQUE3RWxCLEVBQUUwQyxFQUFFLGNBQWUxQyxFQUFFMEMsRUFBRTNLLEtBQUssYUFBbUQsU0FBU0UsRUFBRUMsR0FBRyxNQUFPQSxLQUFLRCxJQUFHK0gsRUFBRS9ILEVBQUUySyxZQUFZL0ssVUFBVUssR0FBRyxjQUE5RixTQUFTRCxFQUFFQyxHQUFHLE1BQU93SyxHQUFFM0ssS0FBS0UsRUFBRUMsSUFBOEUySyxTQUFTaEwsVUFBVTBJLE9BQU9zQyxTQUFTaEwsVUFBVTBJLEtBQUssU0FBU3JJLEdBQUcsR0FBSTJILEdBQUVpRCxJQUFLLElBQWEsa0JBQUhqRCxHQUFjLEtBQU0sSUFBSWtELFVBQVUsSUFBSTVDLEdBQUU0QixFQUFFaEssS0FBS2lMLFVBQVUsR0FBRzVDLEVBQUUsV0FBVyxHQUFHMEMsZUFBZ0IxQyxHQUFFLENBQUMsR0FBSW5JLEdBQUUsWUFBYUEsR0FBRUosVUFBVWdJLEVBQUVoSSxTQUFVLElBQUl5SSxHQUFFLEdBQUlySSxHQUFFbUosRUFBRXZCLEVBQUVvRCxNQUFNM0MsRUFBRUgsRUFBRStDLE9BQU9uQixFQUFFaEssS0FBS2lMLFlBQWEsT0FBT3BMLFFBQU93SixLQUFLQSxFQUFFQSxFQUFFZCxFQUFFLE1BQU9ULEdBQUVvRCxNQUFNL0ssRUFBRWlJLEVBQUUrQyxPQUFPbkIsRUFBRWhLLEtBQUtpTCxhQUFjLE9BQU81QyxLQUFJeUIsRUFBRXBGLE1BQU0sV0FBVyxHQUFJb0QsRUFBRSxPQUFNLGdCQUFpQjVILElBQUdBLEVBQUVrTCxlQUFlakwsWUFBYWlMLGVBQWN0RCxHQUFFLEVBQUdtQyxHQUFHLFdBQVdSLEVBQUVYLEtBQUssb0JBQW9CTyxFQUFFLElBQUksMkNBQTJDUCxLQUFLLElBQUksU0FBUzVJLEdBQUc0SCxFQUFnQixJQUFkNUgsRUFBRW1MLFlBQWdCdkQsR0FBR2dDLEVBQUV3QixjQUFjLFdBQVcsTUFBTzdDLEdBQUUsa0JBQWtCcUIsRUFBRXlCLGNBQWMsV0FBVyxRQUFROUMsRUFBRSxjQUFjcUIsRUFBRTBCLGVBQWUsV0FBVyxNQUFPL0MsR0FBRSxlQUFlcUIsRUFBRUQsSUFBSSxXQUFXLFFBQVExSixFQUFFc0wsbUJBQW1CdEwsRUFBRXNMLGdCQUFnQjdCLEVBQUVDLElBQUksT0FBTzZCLGNBQWUsS0FBSSxHQUFJQyxLQUFLN0IsR0FBRVgsRUFBRVcsRUFBRTZCLEtBQUt6QyxFQUFFeUMsRUFBRWhDLGNBQWN0QixFQUFFYSxHQUFHWSxFQUFFNkIsS0FBSzVCLEVBQUU2QixNQUFNdkQsRUFBRWEsR0FBRyxHQUFHLE9BQU9BLEdBQUksT0FBT2IsR0FBRXdELFFBQVEsU0FBUzNMLEVBQUVDLEdBQUcsR0FBYSxnQkFBSEQsR0FBWSxJQUFJLEdBQUlrSSxLQUFLbEksR0FBRWlKLEVBQUVqSixFQUFFa0ksSUFBSUMsRUFBRXdELFFBQVF6RCxFQUFFbEksRUFBRWtJLFFBQVEsQ0FBbUIsR0FBbEJsSSxFQUFFQSxFQUFFeUosY0FBaUJ0QixFQUFFbkksS0FBSzRILEVBQUUsTUFBT08sRUFBRWxJLEdBQVksa0JBQUhBLEdBQWNBLElBQUlBLEVBQXdCLG1CQUFmMkwsZ0JBQTRCQSxnQkFBZ0J2RCxFQUFFdEcsV0FBVyxLQUFLOUIsRUFBRSxHQUFHLE9BQU9ELEdBQUdtSSxFQUFFbkksR0FBR0MsRUFBRSxNQUFPa0ksSUFBR04sRUFBRSxJQUFJdUIsRUFBRUwsRUFBRSxLQUFLWixFQUFFMEQsU0FBUzNELEVBQUVDLEVBQUUyRCxVQUFVdkMsRUFBRXBCLEVBQUU0RCxhQUFhakQsRUFBRVgsRUFBRTZELGVBQWVyRCxFQUFFUixFQUFFOEQsU0FBUyxTQUFTak0sR0FBRyxNQUFPaUksSUFBR2pJLEtBQUttSSxFQUFFK0QsYUFBYTNELEVBQUVKLEVBQUVnRSxXQUFXcEMsRUFBRTVCLEVBQUVpRSxTQUFTLFNBQVNwTSxFQUFFQyxFQUFFMkgsR0FBRyxNQUFPM0gsR0FBRXNJLEVBQUV2SSxFQUFFQyxFQUFFMkgsR0FBR1csRUFBRXZJLEVBQUUsUUFBUW1JLEdBQUdrRSxPQUFPQSxPQUFPOUwsU0FJLzNGK0wsT0FBTTFNLFVBQVUyQixVQUNuQitLLE1BQU0xTSxVQUFVMkIsUUFBVSxTQUFVZ0wsRUFBZUMsR0FDakQsR0FBYzVLLFNBQVRpSixNQUErQixPQUFUQSxLQUN6QixLQUFNLElBQUlDLFdBQVcsZ0NBSXZCLElBQUkzSSxHQUFTMEksS0FBSzFJLFNBQVcsQ0FlN0IsS0FiQXFLLEdBQWFBLEdBQWEsRUFFdEJDLEtBQUtDLElBQUlGLEtBQWVHLEVBQUFBLElBQzFCSCxFQUFZLEdBR0UsRUFBWkEsSUFDRkEsR0FBYXJLLEVBQ0csRUFBWnFLLElBQ0ZBLEVBQVksSUFJRXJLLEVBQVpxSyxFQUFvQkEsSUFDeEIsR0FBSTNCLEtBQUsyQixLQUFlRCxFQUN0QixNQUFPQyxFQUlYLE9BQU8sSUFPWCxJQUFJSSxHQUNBQyxDQUUyQixvQkFBcEJ0TSxVQUFTcU0sUUFHbEJBLEVBQVMsU0FDVEMsRUFBbUIsb0JBQ29CLG1CQUF2QnRNLFVBQVN1TSxXQUV6QkYsRUFBUyxZQUNUQyxFQUFtQix1QkFDbUIsbUJBQXRCdE0sVUFBU3dNLFVBRXpCSCxFQUFTLFdBQ1RDLEVBQW1CLHNCQUN1QixtQkFBMUJ0TSxVQUFTeU0sZUFFekJKLEVBQVMsZUFDVEMsRUFBbUIseUJBZ1dyQixJQUFJSSxJQUNGQyxVQUFXN0ksRUF1c0diLE9BanNHQTRJLEdBQUtFLElBR0hDLGlCQUNFbEgsV0FBYyxXQUNkQyxXQUFjLFdBQ2RULGVBQWtCLGVBQ2xCVSxXQUFjLGlCQUNkQyxVQUFhLGlCQVVmZ0gsWUFBYSxTQUFTQyxFQUFNQyxHQUUxQixHQUFJaE8sR0FDQTBDLEVBQ0FDLEVBRUFzTCxFQUNBdE4sRUFGQXVOLElBb0JKLEtBWkV4TCxFQUhFc0wsS0FBVyxFQUdGaE4sU0FBU21OLGlCQUFpQixJQUFNN0MsS0FBS3VDLGdCQUFnQkUsSUFJckQvTSxTQUFTbU4saUJBQWlCSCxHQUd2Q3JMLEVBQWlCRCxFQUFTRSxPQUtyQmpDLEVBQUksRUFBT2dDLEVBQUpoQyxFQUFvQkEsSUFFOUJYLEVBQVUwQyxFQUFTL0IsR0FDbkJzTixFQUFNak8sRUFBUW1GLGFBQWEsUUFFZixPQUFSOEksR0FBZ0JBLElBQVFQLEVBQUtVLFdBQVdqSixhQUFhLFFBQ3ZEK0ksRUFBZ0IvQixLQUFLbk0sRUFJekIsT0FBT2tPLElBU1RHLEtBQU0sU0FBU3JPLEVBQVNzTyxHQUVsQlosRUFBS2EsZ0JBQWdCQyxlQUFnQixHQUV2Q3hPLEVBQVErSixNQUFNakYsRUFBVStILFNBQVMsdUJBQXlCeUIsRUFBVyxLQUNyRXRPLEVBQVErSixNQUFNakYsRUFBVStILFNBQVMsdUJBQXlCLFlBQWMvSCxFQUFVK0gsU0FBUyxhQUMzRjdNLEVBQVErSixNQUFNMEUsUUFBVSxHQUt4QmYsRUFBS2dCLGtCQUFrQkMsUUFBUTNPLEVBQVMsVUFBVyxHQUFJLEVBQUcsRUFBR3NPLElBWWpFTSxLQUFNLFNBQVM1TyxFQUFTc08sRUFBVU8sR0FFNUJuQixFQUFLYSxnQkFBZ0JDLGVBQWdCLEdBRXZDeE8sRUFBUStKLE1BQU1qRixFQUFVK0gsU0FBUyx1QkFBeUJ5QixFQUFXLEtBQ3JFdE8sRUFBUStKLE1BQU1qRixFQUFVK0gsU0FBUyx1QkFBeUIsWUFBYy9ILEVBQVUrSCxTQUFTLGFBQzNGN00sRUFBUStKLE1BQU0wRSxRQUFVLEdBS3hCZixFQUFLZ0Isa0JBQWtCQyxRQUFRM08sRUFBUyxVQUFXLEdBQUksRUFBRyxFQUFHc08sR0FHOUNqTSxTQUFid00sSUFDRm5CLEVBQUtvQixVQUFZQyxXQUFXLFdBQzFCRixLQUNDUCxNQVFUWixFQUFLM0gsVUFLSGlKLEtBQU0sV0FFSnRCLEVBQUt1QixrQkFBbUIsRUFDeEJ2QixFQUFLd0IsZUFBZ0IsR0FnQnZCQyxTQUFVLFNBQVNDLEVBQU9DLEVBQVlySixHQUVwQyxPQUFRb0osR0FFTixLQUFLLEVBRUhBLEVBQXdCLE9BQWZDLEVBQXVCckosRUFBa0JxSixDQUNsRCxNQUVGLE1BQUssRUFDTCxJQUFLaE4sUUFDSCtNLEVBQVEsRUFJWixNQUFPQSxJQWNURSxNQUFPLFNBQVNGLEVBQU9HLEdBR3JCLEdBQUk3QixFQUFLd0IsaUJBQWtCLEdBQVF4QixFQUFLOEIsV0FBWSxFQUNsRCxPQUFPLENBR1QsSUFBSXZQLEdBQVV5TixFQUFLek4sT0FpQ25CLE9BOUJBbVAsR0FBUTlELEtBQUs2RCxTQUFTQyxFQUFPblAsRUFBUWdHLGNBQWVoRyxFQUFRK0Ysa0JBSXpDM0QsU0FBZmtOLEdBQ0Y3QixFQUFLK0IsUUFBUS9CLEdBR2ZqTCxFQUFTaUwsRUFBS1UsV0FBWSxtQkFDMUIzTCxFQUFTaUwsRUFBS2dDLFVBQVcsbUJBR3pCelAsRUFBUThGLFVBQVcsRUFDbkIySCxFQUFLd0IsZUFBZ0IsRUFJakJ4QixFQUFLaUMsZUFBZ0IsSUFHdkJqQyxFQUFLa0MsY0FBZ0JiLFdBQVcsV0FFSSxJQUE5QjlPLEVBQVFpRyxrQkFDVndILEVBQUtsRyxPQUVMa0csRUFBS25HLFFBRU42SCxLQUdFLEdBTVRTLEtBQU0sV0FFSixNQUFJbkMsR0FBS3pOLFFBQVE4RixZQUFhLEdBQVEySCxFQUFLd0IsaUJBQWtCLEdBV3BELEdBVlB4QixFQUFLek4sUUFBUThGLFVBQVcsRUFDeEIySCxFQUFLd0IsZUFBZ0IsRUFDckJZLGFBQWFwQyxFQUFLa0MsZUFFbEIvTSxFQUFZNkssRUFBS1UsV0FBWSxtQkFDN0J2TCxFQUFZNkssRUFBS2dDLFVBQVcsbUJBRzVCaEMsRUFBS3FDLFFBQVFyQyxJQUtSLElBU1RzQyxRQUFTLFdBRVAsTUFBSXRDLEdBQUt1QixvQkFBcUIsR0FLckIsR0FIUHZCLEVBQUt1QixrQkFBbUIsRUFDeEIzRCxLQUFLZ0UsT0FBTSxJQUtOLElBU1RXLE1BQU8sV0FFTCxNQUFJdkMsR0FBS3pOLFFBQVE4RixZQUFhLEdBTXJCLEdBSlAySCxFQUFLdUIsa0JBQW1CLEVBQ3hCM0QsS0FBS3VFLFFBTUEsS0FPWG5DLEVBQUt3QyxRQUtIbEIsS0FBTSxTQUFTcEUsR0FFUXZJLFNBQWpCcUwsRUFBS3lDLFVBQ1B6QyxFQUFLeUMsUUFBUXBHLE1BQU1xRyxPQUFTLE9BQzVCMUMsRUFBS3lDLFFBQVFwRyxNQUFNc0csTUFBUSxRQUs3QjNDLEVBQUt3QyxPQUFPSSwwQkFVZEMsU0FBVSxTQUFTTCxHQUVqQixHQUNJTSxHQUNBQyxFQUdBOVAsRUFMQStQLEtBR0FDLEVBQWVULEVBQU9VLFNBQ3RCQyxFQUFjRixFQUFhL04sTUFPL0IsS0FIQThLLEVBQUtvRCxrQkFHQW5RLEVBQUksRUFBT2tRLEVBQUpsUSxFQUFpQkEsSUFFM0I4UCxFQUFPRSxFQUFhaFEsR0FDcEI2UCxFQUFTN1AsRUFBSSxFQUViK1AsRUFBTXZFLEtBQUtzRSxHQUlYL0MsRUFBS29ELGVBQWVOLE1BQ3BCOUMsRUFBS29ELGVBQWVOLEdBQVFPLFVBQVcsQ0FHekMsT0FBT0wsSUFRVEosdUJBQXdCLFdBRXRCLEdBQUkzUCxHQUNBOFAsRUFDQUQsRUFDQVEsQ0FFSixLQUFLclEsRUFBSSxFQUFHQSxFQUFJK00sRUFBS3VELFVBQVd0USxJQUU5QjhQLEVBQU8vQyxFQUFLd0QsT0FBT3ZRLEdBQ25CNlAsRUFBUzdQLEVBQUksRUFFYnFRLEdBQ0VHLEtBQVEsRUFDUkMsS0FBUSxFQUNSQyxLQUFRLEdBS1ZMLEVBQWdCRyxNQUEwQixHQUFsQlYsRUFBS2EsV0FDN0JOLEVBQWdCSSxNQUF5QixHQUFqQlgsRUFBSzdFLFVBRTdCOEIsRUFBS29ELGVBQWVOLEdBQVFRLGdCQUFrQkEsR0FVbERPLEtBQU0sU0FBUzNHLEVBQUkrRCxHQUVqQixHQUFJakIsRUFBS3pOLFFBQVE0RixpQkFBa0IsRUFBTSxDQUd2QyxHQUNJMkwsR0FEQWxELEVBQVcsQ0FrQmYsT0FkSUssTUFBWSxHQUFRakIsRUFBSytELFlBQWEsSUFDeENuRCxFQUFXWixFQUFLek4sUUFBUTZGLHVCQUl0QjRILEVBQUtnRSxrQkFBbUIsSUFFMUJGLEVBQWE5RCxFQUFLb0QsZUFBZWxHLEdBQUlvRyxnQkFHckN0RCxFQUFLaUUsUUFBUTVILE1BQU1qRixFQUFVK0gsU0FBUyx1QkFBeUJ5QixFQUFXLEtBQzFFWixFQUFLaUUsUUFBUTVILE1BQU1qRixFQUFVK0gsU0FBUyxjQUFnQixjQUFnQjJFLEVBQVdMLEtBQU8sa0JBQXlCSyxFQUFXSixLQUFPLGtCQUF5QkksRUFBV0gsS0FBTyxTQUd6SyxFQUdULE9BQU8sR0FTVE8sZ0JBQWlCLFdBRWYsR0FBSWxFLEVBQUtnRSxrQkFBbUIsRUFLNUIsSUFBSyxHQUFJL1EsR0FBSSxFQUFHQSxFQUFJK00sRUFBS3dELE9BQU90TyxPQUFRakMsSUFBSyxDQUMzQyxHQUFJWCxHQUFVME4sRUFBS3dELE9BQU92USxFQUUxQixJQUFJd0IsRUFBU25DLEVBQVMsYUFBYyxFQUFNLENBQ3hDLEdBQUl5USxHQUFPOVAsRUFBSSxDQUVmK00sR0FBS3ZGLFVBQVUwSixvQkFBb0JwQixHQUNuQzVOLEVBQVk3QyxFQUFTLGNBUzdCME4sRUFBS3ZGLFdBV0gySixtQkFBb0IsU0FBU3RCLEdBRTNCLEdBSUl1QixHQUNBcFIsRUFPQTJOLEVBQ0FjLEVBYkE0QyxFQUFjdEUsRUFBS3dELE9BQU9WLEVBQVMsR0FDbkN5QixFQUF1QkQsRUFBWTdELGlCQUFpQixlQUNwRCtELEVBQWVGLEVBQVk3RCxpQkFBaUIsS0FDNUNnRSxFQUFxQkQsRUFBYXRQLE9BR2xDd1AsS0FDQUMsS0FDQUMsS0FDQUMsS0FDQUMsS0FDQUMsSUFNSixLQUFLOVIsRUFBSSxFQUFPd1IsRUFBSnhSLEVBQXdCQSxJQUNsQ29SLEVBQUtHLEVBQWF2UixHQUVsQjJOLEVBQVcxTSxFQUFnQmhCLEVBQVNtUixFQUFJak4sRUFBVStILFNBQVMsd0JBQzNEdUMsRUFBUXhOLEVBQWdCaEIsRUFBU21SLEVBQUlqTixFQUFVK0gsU0FBUyxxQkFHeEQwRixFQUFVcEcsS0FBS21DLEdBQ2ZrRSxFQUFPckcsS0FBS2lELEdBQ1pxRCxFQUFRdEcsS0FBS21DLEVBQVdjLEdBR1ksT0FBaEMyQyxFQUFHNU0sYUFBYSxjQUNsQmlOLEVBQWlCakcsS0FBS21DLEdBQ3RCK0QsRUFBY2xHLEtBQUtpRCxHQUNuQmtELEVBQWVuRyxLQUFLbUMsRUFBV2MsR0FLbkMsSUFBSXNELEdBQWN4RixLQUFLeUYsSUFBSWxILE1BQU15QixLQUFNcUYsR0FDbkNLLEVBQVcxRixLQUFLeUYsSUFBSWxILE1BQU15QixLQUFNc0YsR0FDaENLLEVBQVczRixLQUFLeUYsSUFBSWxILE1BQU15QixLQUFNdUYsR0FHaENLLEVBQXFCNUYsS0FBS3lGLElBQUlsSCxNQUFNeUIsS0FBTWtGLEdBQzFDVyxFQUFrQjdGLEtBQUt5RixJQUFJbEgsTUFBTXlCLEtBQU1tRixHQUN2Q1csRUFBa0I5RixLQUFLeUYsSUFBSWxILE1BQU15QixLQUFNb0YsRUFFM0MsUUFDRTlCLE9BQVFBLEVBQ1J3QixZQUFhQSxFQUNicEIsU0FBVXNCLEVBQ1ZlLGlCQUFrQmhCLEVBQ2xCaUIsZ0JBQ0VSLFlBQWFJLEVBQ2JGLFNBQVVHLEVBQ1ZGLFNBQVVHLEdBRVpHLFNBQ0VULFlBQWFBLEVBQ2JFLFNBQVVBLEVBQ1ZDLFNBQVVBLEtBU2hCTyxrQkFBbUIsU0FBU0MsRUFBc0JDLEVBQXNCM0QsRUFBYTRELEdBRW5GLEdBQUlDLEdBQXFCLENBb0J6QixPQWhCSTdELE1BQWdCLEdBQVFqQyxFQUFLek4sUUFBUXdHLG1DQUFvQyxJQUMzRTRNLEdBQXVCLEdBR0loUixTQUF6QmdSLElBRUVDLEtBQXlCLEVBRzNCRSxFQUFxQkQsRUFDWkQsS0FBeUIsSUFFbENFLEVBQXFCRixJQUlsQkUsR0FpQlJDLHFCQUFzQixTQUFTQyxFQUFtQkMsRUFBZ0JMLEVBQXNCTSxFQUF1Q2pFLEdBRTlILEdBQUlrRSxHQUFrQixFQUNsQkMsRUFBVSxFQUNWdE0sRUFBTyxDQWVYLE9BVkk4TCxNQUF5QixHQUFTTSxLQUEwQyxHQUFTakUsS0FBZ0IsSUFDckdrRSxFQUFrQkgsRUFBb0JDLEVBRXBDRSxFQUFrQixFQUNwQnJNLEVBQU9xTSxFQUNvQixFQUFsQkEsSUFDVEMsRUFBVTVHLEtBQUtDLElBQUkwRyxNQUtyQnJNLEtBQU1BLEVBQ05zTSxRQUFTQSxJQVlibE8sb0JBQXFCLFNBQVNtTyxFQUFnQkMsR0FFNUMsR0FBSXRHLEVBQUt6TixRQUFRMkYsdUJBQXdCLEVBQU0sQ0FFN0MsR0FBSXFPLEdBQWtCdkcsRUFBS3dELE9BQU94RCxFQUFLd0csV0FBYSxHQUNoREMsRUFBYXpHLEVBQUt1RCxVQUFZLENBRWxDZ0QsR0FBZ0JsSyxNQUFNcUssT0FBUyxFQUMvQkwsRUFBZWhLLE1BQU1xSyxPQUFTRCxFQUM5QkgsRUFBWWpLLE1BQU1xSyxPQUFTMUcsRUFBS3VELFVBR2xDLE1BQU8sT0FVVG9ELHFCQUFzQixTQUFTekosRUFBSTBKLEdBRWpDLEdBQUk1RyxFQUFLZ0Usa0JBQW1CLEVBQTVCLENBSUEsR0FBSS9RLEdBQ0FtUSxFQUNBa0IsRUFDQXhCLEVBQ0ErRCxDQUtKLElBRkE3RyxFQUFLRSxHQUFHUyxLQUFLaUcsRUFBaUIsR0FFMUI1RyxFQUFLek4sUUFBUW9HLGtCQUFtQixFQUFNLENBTXhDLEdBSEFxSCxFQUFLOEcsK0JBQWdDLEVBR1IsSUFBekI5RyxFQUFLK0csa0JBSVAzRSxhQUFhcEMsRUFBS2dILHFCQUNsQjVFLGFBQWFwQyxFQUFLaUgsdUJBSWRqSCxFQUFLek4sUUFBUXNHLHVCQUF3QixHQUl2QyxJQUFLNUYsRUFBSSxFQUFHQSxHQUFLK00sRUFBS3VELFVBQVd0USxJQUUvQm1RLEVBQWlCcEQsRUFBS29ELGVBQWVuUSxHQUdqQ21RLEVBQWVDLFlBQWEsR0FBUXBRLElBQU1pSyxJQUM1Q29ILEVBQWN0RSxFQUFLd0QsT0FBT3ZRLEVBQUksR0FDOUI2UCxFQUFTN1AsRUFFVDRULEtBQ0FBLEVBQWEzSixHQUFLNEYsRUFDbEIrRCxFQUFhdlUsUUFBVWdTLEVBR3ZCdEUsRUFBS2tILGNBQWN6SSxLQUFLb0ksR0FHeEI3RyxFQUFLdkYsVUFBVTBNLFlBQVk3QyxHQVFuQ3RFLEdBQUtvSCw2QkFBK0IvRixXQUFXLFdBQzdDckIsRUFBSzhHLCtCQUFnQyxHQUNwQzlHLEVBQUt6TixRQUFRcUcsNEJBU3BCdU8sWUFBYSxTQUFTN0MsR0FRcEJ0RSxFQUFLRSxHQUFHZ0IsS0FBS29ELEVBQWF0RSxFQUFLek4sUUFBUXVHLGFBQWMsZUFXdkR1TyxXQUFZLFNBQVNuSyxHQUduQixHQUFJb0ssR0FBWSxXQUFhcEssQ0FHN0IsSUFBMkJ2SSxTQUF2QnFMLEVBQUt1SCxjQUE2QixDQUVwQyxHQUFJQyxHQUFlLFdBQWF4SCxFQUFLdUgsYUFFckN4UyxHQUFTaUwsRUFBS1UsV0FBWTRHLEdBQzFCblMsRUFBWTZLLEVBQUtVLFdBQVk4RyxPQUU3QnpTLEdBQVNpTCxFQUFLVSxXQUFZNEcsSUFtQjlCRyxrQkFBbUIsU0FBU0MsRUFBaUJDLEVBQVk3QixFQUFvQkgsRUFBc0JwVCxHQUVqRyxHQUlJOFIsR0FDQXBSLEVBR0EyTixFQUNBYyxFQUNBa0csRUFDQXpDLEVBQ0EwQyxFQVpBcE4sRUFBWW1ELEtBQ1prSyxFQUFnQkosRUFBZ0J4RSxTQUNoQzZFLEVBQW9CRCxFQUFjNVMsT0FDbEM4UyxFQUFnQk4sRUFBZ0JqQyxRQUdoQ3dDLEVBQWlCLEdBQ2pCQyxFQUF5QixHQU16QkMsS0FDQUMsSUFFSixLQUFLblYsRUFBSSxFQUFPOFUsRUFBSjlVLEVBQXVCQSxJQUNqQ29SLEVBQUt5RCxFQUFjN1UsR0FHbkIyTixFQUFXMU0sRUFBZ0JoQixFQUFTbVIsRUFBSWpOLEVBQVUrSCxTQUFTLHdCQUMzRHVDLEVBQVF4TixFQUFnQmhCLEVBQVNtUixFQUFJak4sRUFBVStILFNBQVMscUJBR3hEeUksRUFBUWhILEVBQVdjLEVBS25CQSxFQUFRc0csRUFBYzdDLFNBQVd5QyxFQUk3QmpDLEtBQXlCLElBQzNCakUsR0FBU2lHLEdBSVhDLEVBQVFoSCxFQUFXYyxFQUduQnlHLEVBQU8xSixLQUFLbUosR0FHd0IsT0FBaEN2RCxFQUFHNU0sYUFBYSxhQUNsQjJRLEVBQWMzSixLQUFLbUosR0FJakJyVixFQUFRMEYsZ0RBQWlELElBQzNEZ1EsRUFBaUIvVSxFQUFTbVIsRUFBSWpOLEVBQVUrSCxTQUFTLDZCQUNqRCtJLEVBQXlCek4sRUFBVTROLHNCQUFzQkosSUFJM0Q1RCxFQUFHaEksTUFBTWpGLEVBQVUrSCxTQUFTLGVBQWlCeUIsRUFBVyxNQUFRYyxFQUFRLE1BQVF3RyxDQXVCbEYsT0FuQkEvQyxHQUFXM0YsS0FBS3lGLElBQUlsSCxNQUFNeUIsS0FBTTJJLEdBSWhDTixFQUFrQnJJLEtBQUt5RixJQUFJbEgsTUFBTXlCLEtBQU00SSxHQUt2Qy9HLFdBQVcsV0FDVDVHLEVBQVU2TixTQUFTLFdBQ2pCLElBQUtyVixFQUFJLEVBQU84VSxFQUFKOVUsRUFBdUJBLElBQ2pDb1IsRUFBS3lELEVBQWM3VSxHQUVuQm9SLEVBQUdoSSxNQUFNakYsRUFBVStILFNBQVMsZUFBaUIsTUFHaERnRyxFQUFXVyxHQUVQK0IsR0FhVFUsUUFBUyxTQUFTckwsRUFBSXNMLEVBQW9CNUIsRUFBaUJqQixFQUFzQjhDLEdBRS9FLEdBQ0lDLEdBQ0ExQyxFQUNBRixFQUhBckwsRUFBWW1ELElBS1pvQyxHQUFLK0QsWUFBYSxHQUdwQnRKLEVBQVVrTyxvQkFBb0IzSSxFQUFLdUgsZUFJckNwUyxFQUFZeVIsRUFBaUIsV0FFN0JuTSxFQUFVNk4sU0FBUyxXQUdqQkksRUFBeUJqTyxFQUFVbU8sZ0JBQWdCNUksRUFBS3VILGNBQWVpQixFQUFvQixHQUczRnhDLEVBQW9CMEMsRUFBdUJsRCxlQUFlTCxTQUcxRFcsRUFBcUJyTCxFQUFVaUwsa0JBQWtCQyxFQUFzQjNGLEVBQUt6TixRQUFRd0YsZUFBZ0JpSSxFQUFLaUMsWUFBYStELEdBR3RIaEcsRUFBS2lDLGFBQWMsRUFHbkJ4SCxFQUFVb08sZUFBZTNMLEVBQUk4SSxFQUFtQlksRUFBaUJkLEVBQW9CMkMsTUFjekZLLFFBQVMsU0FBUzVMLEVBQUlzTCxFQUFvQjVCLEVBQWlCakIsRUFBc0I4QyxHQUUvRSxHQUVJTSxHQUVBTCxFQUNBTSxFQUNBaEQsRUFDQUMsRUFQQXhMLEVBQVltRCxLQUdaa0ksRUFBcUIsQ0FPekIvUSxHQUFTNlIsRUFBaUIsV0FFMUJuTSxFQUFVNk4sU0FBUyxXQUlqQkksRUFBeUJqTyxFQUFVMkosbUJBQW1CcEUsRUFBS3VILGNBQWUsV0FDMUV5QixFQUFzQnZPLEVBQVUySixtQkFBbUJsSCxFQUFJLFFBR3ZENEksRUFBcUJyTCxFQUFVaUwsa0JBQWtCQyxFQUFzQjNGLEVBQUt6TixRQUFRd0YsZUFBZ0JpSSxFQUFLaUMsWUFBYXlHLEVBQXVCakQsUUFBUU4sVUFRcko0RCxFQUFvQnRPLEVBQVVzTCxxQkFBcUIyQyxFQUF1QmpELFFBQVFOLFNBQVU2RCxFQUFvQnZELFFBQVFOLFNBQVVuRixFQUFLek4sUUFBUXdGLGVBQWdCaUksRUFBS3pOLFFBQVF3RyxnQ0FBaUNpSCxFQUFLaUMsYUFJbE4rRCxFQUFvQnZMLEVBQVVnTixrQkFBa0JpQixFQUF3QkssRUFBa0IzQyxRQUFTLEVBQUdULEVBQXNCM0YsRUFBS3pOLFNBQ2pJMFQsRUFBaUJ4TCxFQUFVZ04sa0JBQWtCdUIsRUFBcUJELEVBQWtCalAsS0FBTWdNLEVBQW9CSCxFQUFzQjNGLEVBQUt6TixTQUd6SWtJLEVBQVVtTyxnQkFBZ0I1SSxFQUFLdUgsY0FBZWlCLEVBQW9CLEdBQUl4QyxHQUd0RWhHLEVBQUtpQyxhQUFjLEVBRWZqQyxFQUFLK0QsWUFBYSxHQUdwQnRKLEVBQVVrTyxvQkFBb0IzSSxFQUFLdUgsZUFJckM5TSxFQUFVb08sZUFBZTNMLEVBQUk4SSxFQUFtQlksRUFBaUJkLEVBQW9CMkMsRUFBWXhDLE1BaUJyRzRDLGVBQWdCLFNBQVMzTCxFQUFJOEksRUFBbUJZLEVBQWlCZCxFQUFvQjJDLEVBQVl4QyxHQUUvRixHQUNJK0MsR0FDQUMsRUFGQXhPLEVBQVltRCxJQUtoQm9DLEdBQUt3RyxXQUFheEcsRUFBS3VILGNBQ3ZCdkgsRUFBS3VILGNBQWdCckssRUFFakI4QyxFQUFLK0QsWUFBYSxHQUVwQi9ELEVBQUs3RyxXQUFXK1AsU0FLZGxKLEVBQUsrRCxZQUFhLEdBQVMvRCxFQUFLek4sUUFBUXNGLDBCQUEyQixHQUVyRW1JLEVBQUtvRCxlQUFlbEcsR0FBSW1HLFVBQVcsRUFHbkNyRCxFQUFLaUgsc0JBQXdCNUYsV0FBVyxXQUN0QzVHLEVBQVUwTyxpQkFBaUJqTSxFQUFJdUwsSUFDOUIzQyxHQUdIOUYsRUFBS2dILG9CQUFzQjNGLFdBQVcsV0FHcEN0TSxFQUFTNlIsRUFBaUIsVUFDMUJ6UixFQUFZeVIsRUFBaUIsV0FJTmpTLFNBQW5Cc1IsSUFDRitDLEVBQXNCaEosRUFBS3ZGLFVBQVUySixtQkFBbUJsSCxFQUFJLFFBQzVEK0ksRUFBaUIrQyxFQUFvQnhELGVBQWVMLFVBSXREMUssRUFBVTJPLFdBQVdsTSxFQUFJLE9BQVErSSxFQUFnQnhMLEVBQVU0TyxnQkFHM0RKLEVBQWV4TyxFQUFVNk8sZ0JBQWdCdEQsRUFBbUJDLEVBQWdCakcsRUFBS3pOLFFBQVF3RixnQkFFekZpSSxFQUFLdUosZUFBaUJsSSxXQUFXLFdBRS9CckIsRUFBS3ZGLFVBQVUrTyxVQUFVdE0sSUFDeEIrTCxJQUVGbkQsS0FPSHJMLEVBQVUwSixvQkFBb0JqSCxHQUU5QjhDLEVBQUsrRyxnQkFBa0IsRUFDdkIvRyxFQUFLaUMsYUFBYyxFQUVmakMsRUFBS3pOLFFBQVE4RixZQUFhLEdBQzVCMkgsRUFBSzNILFNBQVN1SixPQUFNLEdBR3RCN00sRUFBUzZSLEVBQWlCLFVBQzFCelIsRUFBWXlSLEVBQWlCLFlBRy9CNUcsRUFBSytELFVBQVcsR0FZbEI2RSxnQkFBaUIsU0FBUzFMLEVBQUlzTCxFQUFvQmlCLEVBQVd6RCxHQUUzRCxHQUNBMEMsR0FESWpPLEVBQVltRCxJQStCaEIsT0E1QmtCLEtBQWQ2TCxHQUlGdFUsRUFBWXFULEVBQW9CLFVBQ2hDelQsRUFBU3lULEVBQW9CLFdBSTdCRSxFQUF5QmpPLEVBQVUySixtQkFBbUJsSCxFQUFJLFdBRTFEOEksRUFBb0IwQyxFQUF1QmxELGVBQWVMLFVBSzFEaFEsRUFBWXFULEVBQW9CLFVBRzlCeEksRUFBSytELFlBQWEsSUFHcEIvRCxFQUFLb0QsZUFBZWxHLEdBQUltRyxVQUFXLEVBR25DNUksRUFBVTJPLFdBQVdsTSxFQUFJLFVBQVc4SSxFQUFtQnZMLEVBQVVpUCxvQkFHNURoQixHQWVUWSxnQkFBaUIsU0FBU3RELEVBQW1CQyxFQUFnQkwsR0FFM0QsR0FBSXFELEVBRUosUUFBUXJELEdBQ04sS0FBSyxFQUNIcUQsRUFBZWhELENBQ2pCLE1BRUEsTUFBSyxFQUVIZ0QsRUFBZ0JqRCxHQUFxQkMsRUFBa0JELEVBQW9CQyxDQUM3RSxNQUVBLFNBQ0VnRCxFQUFnQmpELEdBQXFCQyxFQUFpQkwsRUFBd0IsRUFBc0JBLEVBQXVCSyxFQUcvSCxNQUFPZ0QsSUFNVE4sb0JBQXFCLFNBQVN6TCxHQUU1QjhDLEVBQUsrRyxrQkFHTC9HLEVBQUsySSxvQkFBb0J6TCxFQUFJOEMsSUFNL0IwSixrQkFBbUIsU0FBU3hNLEdBRzFCOEMsRUFBSzBKLGtCQUFrQnhNLEVBQUk4QyxJQVE3Qm1KLGlCQUFrQixTQUFTak0sRUFBSXVMLEdBRTdCekksRUFBSytHLGtCQUdjcFMsU0FBZjhULEdBQ0Z6SSxFQUFLL0YsU0FBU2lQLFNBSWhCbEosRUFBSzdHLFdBQVcrUCxTQUdoQmxKLEVBQUttSixpQkFBaUJqTSxFQUFJOEMsSUFNNUJxSixlQUFnQixTQUFTbk0sR0FHdkI4QyxFQUFLcUosZUFBZW5NLEVBQUk4QyxJQVkxQm9KLFdBQVksU0FBU2xNLEVBQUl5TSxFQUFPQyxFQUFlekksR0FFN0MsR0FDSWlJLEVBRUpBLEdBQWEsU0FBU2xNLEdBQ3BCOEMsRUFBS29ELGVBQWVsRyxHQUFJbUcsVUFBVyxFQUNuQ3JELEVBQUsrRyxrQkFHTDVGLEVBQVNqRSxJQUdHLFlBQVZ5TSxFQUVGM0osRUFBSzZKLHVCQUF5QnhJLFdBQVcsV0FFdkMrSCxFQUFXbE0sSUFDVjBNLEdBR0g1SixFQUFLOEosb0JBQXNCekksV0FBVyxXQUVwQytILEVBQVdsTSxJQUNWME0sSUFXUEosVUFBVyxTQUFTdE0sR0FFaEI4QyxFQUFLaUMsYUFBYyxFQUNuQmpDLEVBQUt3QixlQUFnQixFQUdqQnhCLEVBQUt6TixRQUFROEYsWUFBYSxHQUM1QjJILEVBQUszSCxTQUFTdUosT0FBTSxHQUFNLEdBSTVCNUIsRUFBSytKLGVBQWU3TSxFQUFJOEMsSUFTNUJnSyxhQUFjLFNBQVNMLEdBRXJCLEdBQUlLLElBQ0FDLFVBQVcsU0FDWEMsU0FBVSxVQUdkLE9BQU9GLEdBQWFMLElBbUJ0QnJCLFNBQVUsU0FBU25ILEdBRWpCRSxXQUFXLFdBQ1RGLEtBQ0M3RyxJQVNMK04sc0JBQXVCLFNBQVNKLEdBRTlCLEdBQXVCLEtBQW5CQSxHQUE0Q3RULFNBQW5Cc1QsRUFDM0IsTUFBT0EsRUFLVCxJQVFJa0MsR0FDQUMsRUFDQUMsRUFDQXBYLEVBWEFxWCxHQUNGQyxPQUFlLGdDQUNmQyxLQUFlLHFDQUNmQyxVQUFlLG9DQUNmQyxjQUFlLHFDQUNmQyxXQUFlLG9DQXlCakIsS0FoQkkxQyxFQUFlM1QsUUFBUSxnQkFBa0IsSUFLM0MyVCxFQUFpQkEsRUFBZXJNLE1BQU0sS0FBSyxHQUczQ3FNLEVBQWlCcUMsRUFBNEJyQyxJQUkvQ2tDLEVBQWNsQyxFQUFlelQsUUFBUSxnQkFBaUIsSUFBSUEsUUFBUSxJQUFLLElBQUlvSCxNQUFNLEtBQ2pGd08sRUFBb0JELEVBQVlqVixPQUczQmpDLEVBQUksRUFBT21YLEVBQUpuWCxFQUF1QkEsSUFDakNrWCxFQUFZbFgsR0FBS3NCLFdBQVc0VixFQUFZbFgsR0FjMUMsT0FWQW9YLElBQ0UsRUFBSUYsRUFBWSxHQUNoQixFQUFJQSxFQUFZLEdBQ2hCLEVBQUlBLEVBQVksR0FDaEIsRUFBSUEsRUFBWSxJQUlsQmxDLEVBQWlCLGdCQUFrQm9DLEVBQXNCLEtBYzNEbEcsb0JBQXFCLFNBQVNwQixHQUU1QixHQUFJL0MsRUFBS2dFLGtCQUFtQixFQUE1QixDQUlBLEdBQ0lLLEdBQ0FwUixFQUdBZ1EsRUFBZWpELEVBQUt3RCxPQUFPVCxFQUFPLEdBQUd0QyxpQkFBaUIsS0FDdERtSyxFQUF1QjNILEVBQWEvTixNQUl4QyxLQUFLakMsRUFBSSxFQUFPMlgsRUFBSjNYLEVBQTBCQSxJQUNwQ29SLEVBQUtwQixFQUFhaFEsR0FFbEJvUixFQUFHaEksTUFBTWpGLEVBQVUrSCxTQUFTLGVBQWlCLFNBZ0IvQ2EsR0FBS3ZGLFVBQVU2TixTQUFTLFdBRXRCLElBQUtyVixFQUFJLEVBQU8yWCxFQUFKM1gsRUFBMEJBLElBRXBDb1IsRUFBS3BCLEVBQWFoUSxHQUNsQm9SLEVBQUdoSSxNQUFNakYsRUFBVStILFNBQVMsZUFBaUIsT0FhbkQwTCxhQUFjLFNBQVMzTixFQUFJNE4sRUFBa0J2RCxFQUFlaEUsRUFBV1MsRUFBZ0IrRyxFQUFzQ0MsR0FFM0gsR0FDSXZCLEdBQVksQ0FpQmhCLE9BZEVBLEdBRHVCOVUsU0FBckJtVyxFQUNVQSxFQUNIQyxLQUF5QyxHQUFRL0csS0FBbUIsRUFFekVnSCxLQUFnQixHQUFnQixJQUFQOU4sR0FBWXFLLElBQWtCaEUsRUFHN0MsRUFFTWdFLEVBQUxySyxFQUFzQixHQUFJLEVBRzdCLEdBYWhCK04scUJBQXNCLFNBQVNwSyxHQUU3QixHQUFJQyxHQUFjRCxFQUFnQkMsWUFDOUJrRCxHQUFpQixDQU1yQixPQUpJbEQsTUFBZ0IsSUFDbEJrRCxHQUFpQixHQUdaQSxHQVlUa0gsbUJBQW9CLFNBQVNDLEdBRTNCLEdBQUlySyxJQUFjLEVBQ2RzSyxHQUFhLENBWWpCLE9BVEloVSxHQUFVaUgsa0JBQW1CLElBQy9CeUMsR0FBYyxHQUlaMUosRUFBVStHLGlCQUFrQixJQUM5QmlOLEdBQWEsSUFJYnRLLFlBQWFBLEVBQ2JzSyxXQUFZQSxLQVNsQnBMLEVBQUtnQixtQkFjSEMsUUFBUyxTQUFTM08sRUFBUytKLEVBQU9nUCxFQUFNQyxFQUFNQyxFQUFJcFgsRUFBTWdOLEdBRXRELEdBQUk3TyxLQUFZLEVBQWhCLENBSUEsR0FBSXNQLElBQVEsR0FBSTRKLE9BQU9DLFVBRW5CQyxFQUFRQyxZQUFZLFdBRXRCLEdBQUk1SSxHQUFPdkQsS0FBS29NLElBQUksSUFBSSxHQUFJSixPQUFPQyxVQUFVN0osR0FBU3pOLEVBRXREN0IsR0FBUStKLE1BQU1BLEdBQVVpUCxFQUFPdkksR0FBUXdJLEVBQUtELEdBQVNELEVBRXhDLElBQVR0SSxJQUVlcE8sU0FBYndNLEdBQ0ZBLElBR0YwSyxjQUFjSCxLQUVmLEdBRUhwWixHQUFRK0osTUFBTUEsR0FBU2lQLEVBQU9ELElBUWhDUyxZQUFhLFNBQVM1TyxHQUVwQixHQUFJakssR0FDQThQLEVBQ0FELENBRUosSUFBSTlDLEVBQUtnRSxrQkFBbUIsRUFxQjFCLElBbEJBalAsRUFBU2lMLEVBQUtVLFdBQVksZ0JBRUwvTCxTQUFqQnFMLEVBQUt5QyxVQUVQekMsRUFBS3lDLFFBQVFwRyxNQUFNaUIsU0FBVyxTQUM5QjBDLEVBQUt5QyxRQUFRcEcsTUFBTXNHLE1BQVEsT0FDM0IzQyxFQUFLeUMsUUFBUXBHLE1BQU1xRyxPQUFTLFFBSTlCMUMsRUFBS2lFLFFBQVE1SCxNQUFNc0csTUFBUSxPQUMzQjNDLEVBQUtpRSxRQUFRNUgsTUFBTXFHLE9BQVMsT0FJNUI5RSxLQUFLbU8sWUFBYy9MLEVBQUtpRSxRQUFRK0gsWUFHM0IvWSxFQUFJLEVBQUdBLEVBQUkrTSxFQUFLdUQsVUFBV3RRLElBRzlCOFAsRUFBTy9DLEVBQUt3RCxPQUFPdlEsR0FDbkI2UCxFQUFTN1AsRUFBSSxFQVFiOEIsRUFBU2dPLEVBQU0sVUFHZkEsRUFBSzFHLE1BQU1zRyxNQUFRLE9BQ25CSSxFQUFLMUcsTUFBTXFHLE9BQVMsT0FDcEJLLEVBQUsxRyxNQUFNNFAsU0FBVyxXQUN0QmxKLEVBQUsxRyxNQUFNNlAsV0FBYSxTQUd4Qm5KLEVBQUsxRyxNQUFNM0csS0FBTyxRQWF4QnlXLFdBQVksU0FBU3ZGLEVBQWlCNEIsRUFBb0JpQixFQUFXeEksR0FHbkUsR0FBSUEsS0FBWSxFQUFNLENBRXBCLEdBQUltTCxHQUFjLEVBQ2RDLEVBQVksS0FDWkMsRUFBVyxJQUNYQyxFQUFTLENBRUssTUFBZDlDLElBQ0Y0QyxFQUFZLElBQ1pDLEVBQVcsTUFHYjFPLEtBQUtxRCxRQUFRdUgsRUFBb0IsT0FBUSxJQUFLNEQsRUFBYUMsRUFBV3JNLEVBQUt6TixRQUFRNkgsU0FBU0MsT0FDNUZ1RCxLQUFLcUQsUUFBUTJGLEVBQWlCLE9BQVEsSUFBSzBGLEVBQVVDLEVBQVF2TSxFQUFLek4sUUFBUTZILFNBQVNDLFdBTW5GbU8sR0FBbUJuTSxNQUFNM0csS0FBTyxRQUNoQ2tSLEVBQWdCdkssTUFBTTNHLEtBQU8sS0FlakM4VyxLQUFNLFNBQVN0UCxFQUFJdVAsRUFBYWpFLEVBQW9Ca0UsRUFBVTlGLEVBQWlCNkMsRUFBV2hCLEdBS3hGekksRUFBS3dHLFdBQWF4RyxFQUFLdUgsY0FDdkJ2SCxFQUFLdUgsY0FBZ0JySyxFQUdGdkksU0FBZjhULEdBQ0Z6SSxFQUFLL0YsU0FBU2lQLFNBR2hCbEosRUFBSzdHLFdBQVcrUCxTQUlabEosRUFBSytELFlBQWEsR0FFcEJuRyxLQUFLdU8sV0FBV3ZGLEVBQWlCNEIsRUFBb0JpQixHQUFXLEdBR2hFekosRUFBS2lDLGFBQWMsRUFHbkJqQyxFQUFLMk0saUJBQWlCM00sRUFBS3VILGNBQWV2SCxHQUcxQ0EsRUFBS3VKLGVBQWlCbEksV0FBVyxXQUUvQnJCLEVBQUt2RixVQUFVK08sVUFBVXhKLEVBQUt1SCxnQkFDN0J2SCxFQUFLek4sUUFBUTZILFNBQVNDLFNBTXpCdUQsS0FBS3VPLFdBQVd2RixFQUFpQjRCLEVBQW9CaUIsR0FBVyxHQUNoRXpKLEVBQUsrRCxVQUFXLEVBRVovRCxFQUFLek4sUUFBUThGLFlBQWEsR0FDNUIySCxFQUFLM0gsU0FBU3VKLE9BQU0sTUFTNUI1QixFQUFLN0csWUFXSHlULFNBQVUsU0FBU3RhLEVBQVNpTyxHQUUxQixHQUFJc00sR0FJQTVaLEVBSEE2WixFQUFnQnhhLEVBQVF5YSxXQUN4QkMsRUFBc0JGLEVBQWM1WCxPQUNwQytYLElBSUosS0FBS2hhLEVBQUksRUFBTytaLEVBQUovWixFQUF5QkEsSUFFbkM0WixFQUFlQyxFQUFjN1osR0FFQyxJQUExQjRaLEVBQWFLLFVBQ2ZELEVBQWdCeE8sS0FBS29PLEVBSXpCLE9BQU9JLElBUVQvRCxPQUFRLFdBRU4sR0FBaUN2VSxTQUE5QnFMLEVBQUttTixZQUFZblksU0FBd0IsQ0FFMUMsR0FBSS9CLEdBQ0E2SSxFQUVBc1IsRUFDQUMsRUFGQW5RLEVBQUs4QyxFQUFLdUgsY0FBZ0IsRUFHMUIrRixFQUFtQnROLEVBQUttTixZQUFZblksU0FBU0UsTUFJakQsSUFBc0NQLFNBQWxDcUwsRUFBS21OLFlBQVlJLGFBSW5CLElBRkFGLEVBQStCck4sRUFBS21OLFlBQVlJLGFBQWFyWSxPQUV4RGpDLEVBQUksRUFBT29hLEVBQUpwYSxFQUFrQ0EsSUFFNUNtYSxFQUF3QnBOLEVBQUttTixZQUFZSSxhQUFhdGEsR0FDdERrQyxFQUFZaVksRUFBdUIsY0FVdkMsS0FMQXBOLEVBQUttTixZQUFZSSxnQkFLWnpSLEVBQUksRUFBT3dSLEVBQUp4UixFQUFzQkEsSUFFaENzUixFQUF3QnBOLEVBQUttTixZQUFZSyxNQUFNMVIsR0FBR29CLEdBQ2xEOEMsRUFBS21OLFlBQVlJLGFBQWE5TyxLQUFLMk8sR0FFbkNyWSxFQUFTcVksRUFBdUIsZUFJcEMsTUFBT3BOLEdBQUttTixZQUFZSSxlQU81QnZOLEVBQUsvRixVQVVIcUgsS0FBTSxTQUFTcEUsR0FFYixHQUFJOEMsRUFBS3pOLFFBQVEwSCxZQUFhLEVBQU0sQ0FFbEMsR0FBSXdULEdBQ0FDLENBR0oxTixHQUFLMk4sZ0JBQWtCdk8sT0FBT3dPLFVBQVdBLFFBQVFDLFdBR2pESCxFQUFhSSxTQUFTQyxLQUFLdlosUUFBUSxLQUFNLElBR3pDd0wsRUFBS2dPLGFBQWVwUSxLQUFLcVEsa0JBR04sS0FBZlAsSUFHRjFOLEVBQUtrTyxlQUFpQlIsRUFDdEJELEVBQXNCN1AsS0FBS3VRLHFCQUFxQm5PLEVBQUtrTyxnQkFLakRULEVBQXNCLEtBQ3hCdlEsRUFBS3VRLEVBQXNCLElBUWpDLE1BQU92USxJQVFUaVIscUJBQXNCLFNBQVNDLEdBRTdCLEdBQUlDLEdBQW9CLEdBQ3BCWixFQUFzQnpOLEVBQUtnTyxhQUFhMVosUUFBUThaLEVBTXBELE9BSklYLEdBQXNCLEtBQ3hCWSxFQUFvQlosR0FHZlksR0FRVEosZ0JBQWlCLFdBRWYsR0FBSWhiLEdBQ0FxYixFQUNBTixJQUdKLEtBQUsvYSxFQUFJLEVBQUdBLEVBQUkrTSxFQUFLdUQsVUFBV3RRLElBRTlCcWIsRUFBa0J0TyxFQUFLek4sUUFBUTJILHFCQUFzQixFQUFTOEYsRUFBS3dELE9BQU92USxHQUFHaUssR0FBSThDLEVBQUt3RCxPQUFPdlEsR0FBR3dFLGFBQWEsb0JBRzdHdVcsRUFBYXZQLEtBQUs2UCxFQUdwQixPQUFPTixJQVdUOUUsT0FBUSxXQUVOLEdBQUlsSixFQUFLek4sUUFBUTBILFlBQWEsR0FBUStGLEVBQUsrRCxZQUFhLEdBQVUvRCxFQUFLek4sUUFBUTBILFlBQWEsR0FBUStGLEVBQUsrRCxZQUFhLEdBQVEvRCxFQUFLek4sUUFBUTRILDBCQUEyQixFQUFPLENBRzNLLEdBQUlvVSxHQUFZdk8sRUFBS3VILGNBQWdCLENBR3JDdkgsR0FBS2tPLGVBQWlCbE8sRUFBS2dPLGFBQWFPLEdBRVosS0FBeEJ2TyxFQUFLd08saUJBR0h4TyxFQUFLMk4sZ0JBQWlCLEVBQ3hCQyxRQUFRQyxVQUFVLEtBQU0sS0FBTSxLQUFPN04sRUFBS2tPLGdCQUcxQ0osU0FBU0MsS0FBTyxLQUFPL04sRUFBS2tPLGtCQVVwQ08sV0FBWSxXQUVWLEdBQUksZ0JBQWtCclAsUUFBUSxDQUU1QixHQUFJQSxPQUFPeEwsaUJBVVQsTUFSQXdMLFFBQU9zUCxjQUFnQixTQUFTQyxFQUFNQyxHQUNwQ3hQLE9BQU94TCxpQkFBaUIsYUFBYythLEVBQU1DLFNBRzlDeFAsT0FBT3lQLGlCQUFtQixTQUFTRixHQUNqQ3ZQLE9BQU9wTCxvQkFBb0IsYUFBYzJhLElBS3RDLElBQUl2UCxPQUFPdkwsWUFVaEIsTUFSQXVMLFFBQU9zUCxjQUFnQixTQUFTQyxHQUM5QnZQLE9BQU92TCxZQUFZLGVBQWdCOGEsU0FHckN2UCxPQUFPeVAsaUJBQW1CLFNBQVNGLEdBQ2pDdlAsT0FBT25MLFlBQVksZUFBZ0IwYSxLQU96QyxHQUFJRyxNQUNBQyxFQUFVakIsU0FBU2tCLElBRXZCNVAsUUFBT3NQLGNBQWdCLFNBQVNDLEVBQU1DLEdBQ2hCLGtCQUFURCxJQUNURyxFQUFnQkYsRUFBTyxVQUFVLFFBQVFELElBSTdDdlAsT0FBT3lQLGlCQUFtQixTQUFTRixHQUNqQyxJQUFLLEdBQUkxYixHQUFFNmIsRUFBZ0I1WixPQUFPLEVBQUdqQyxHQUFHLEVBQUdBLElBQ3JDNmIsRUFBZ0I3YixLQUFPMGIsR0FDekJHLEVBQWdCRyxPQUFPaGMsRUFBRyxJQUtoQzBZLFlBQVksV0FDVixHQUFJdUQsR0FBVXBCLFNBQVNrQixJQUN2QixJQUFJRCxJQUFZRyxFQUFTLENBQ3ZCLEdBQUlDLEdBQVdKLENBQ2ZBLEdBQVVHLENBQ1YsS0FBSyxHQUFJamMsR0FBRSxFQUFHQSxFQUFFNmIsRUFBZ0I1WixPQUFRakMsSUFDdEM2YixFQUFnQjdiLEdBQUdKLEtBQUt1TSxRQUN0QmlCLEtBQVEsYUFDUitPLE9BQVVGLEVBQ1ZHLE9BQVVGLE1BSWYsT0FPUG5QLEVBQUtzUCxTQUdIQyxZQUFhLGswQkFFYkMsYUFBYyw0UEFHYkMsY0FBZSxJQUFJalYsRUFBbUJDLFVBQVVyRCxFQUFVK0gsU0FBUyxjQUFjLDJSQUEyUi9ILEVBQVUrSCxTQUFTLGNBQWMsNlJBQTZSM0UsRUFBbUJDLFVBQVVyRCxFQUFVK0gsU0FBUyxjQUFjLG1FQUFtRTNFLEVBQW1CQyxVQUFVckQsRUFBVStILFNBQVMsY0FBYyxpREFBaUQzRSxFQUFtQkMsVUFBVXJELEVBQVUrSCxTQUFTLGNBQWMsdWVBUXo5Qm1DLEtBQU0sU0FBU0gsR0FFYixHQUFJbkIsRUFBS3pOLFFBQVE2RyxhQUFjLEVBQU8sQ0FFcEMsR0FDSXNXLEdBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBTkFULEVBQVUxUixJQW9EZCxPQTNDQTdJLEdBQVNpTCxFQUFLVSxXQUFZLGtCQUcxQlYsRUFBS2dRLFdBQWFoUSxFQUFLRSxHQUFHRSxZQUFZLFlBQWFKLEVBQUt6TixRQUFRNkcsV0FHaEVrVyxFQUFRVyxTQUdSWCxFQUFRWSxZQUdSWixFQUFRYSxzQkFBc0IsUUFJOUJULEVBQXNCSixFQUFRYyxtQkFBbUJwUSxFQUFLek4sUUFBUThHLG1CQUM5RHNXLEVBQTRCTCxFQUFRYyxtQkFBbUJwUSxFQUFLek4sUUFBUStHLG9CQUFvQixHQUd4RnNXLEVBQWtCRixFQUFvQjFSLE9BQU8yUixHQUc3Q0UsRUFBVTVkLEVBQWEyZCxHQUl2QkMsRUFBUVEsR0FBRyxTQUFVLFNBQVNqZSxHQUM1QmtkLEVBQVFnQixTQUFTblAsS0FJbkIyTyxFQUFXLEVBRVhELEVBQVFRLEdBQUcsV0FBWSxTQUFTamUsRUFBVW1lLEdBR3hDUixFQUFTUSxFQUFNQyxTQUFXLFNBQVUsU0FHcEN4USxFQUFLeVEsZ0JBQWdCVixFQUFRUSxFQUFNRyxJQUFJQyxJQUFLYixJQUFZRixFQUFnQjFhLE9BQVE4SyxNQUczRSxFQUdULE9BQU8sR0FRVHNRLFNBQVUsU0FBU25QLEdBR2pCbkIsRUFBSzRRLFVBQVU1USxHQUlYQSxFQUFLek4sUUFBUWlILGtCQUFtQixJQUtwQ29FLEtBQUt1UyxzQkFBc0IsUUFHM0JoYixFQUFZNkssRUFBS1UsV0FBWSxrQkFDN0IzTCxFQUFTaUwsRUFBS1UsV0FBWSxpQkFDMUIzTCxFQUFTaUwsRUFBS2dRLFdBQVcsR0FBSSxpQkFFTXJiLFNBQS9CaUosS0FBS2lULHVCQUNQaEYsY0FBY2pPLEtBQUtpVCx3QkFJakJ6WixFQUFVK0gsU0FBUyxnQkFBaUIsR0FBUy9ILEVBQVVzRixPQUFRLEtBQ2pFc0QsRUFBS2dRLFdBQVcsR0FBRzNULE1BQU15VSxRQUFVLFFBR3BCbmMsU0FBYndNLEdBQ0ZBLE1BT0orTyxVQUFXLFdBRVQsR0FBSWxRLEVBQUt6TixRQUFRNkcsYUFBYyxFQUFNLENBR25DLEdBQUkyWCxHQUFPemQsU0FBU3lkLE1BQVF6ZCxTQUFTaUQscUJBQXFCLFFBQVEsRUFlbEUsSUFkQXFILEtBQUtvVCxhQUFlMWQsU0FBUzhJLGNBQWMsU0FHM0N3QixLQUFLb1QsYUFBYTNRLEtBQU8sV0FDckJ6QyxLQUFLb1QsYUFBYUMsV0FDcEJyVCxLQUFLb1QsYUFBYUMsV0FBV3BXLFFBQVUrQyxLQUFLNlIsY0FFNUM3UixLQUFLb1QsYUFBYTdULFlBQVk3SixTQUFTNGQsZUFBZXRULEtBQUs2UixnQkFJN0RzQixFQUFLNVQsWUFBWVMsS0FBS29ULGNBR2xCNVosRUFBVStILFNBQVMsZ0JBQWlCLEdBQVMvSCxFQUFVc0YsT0FBUSxFQUFPLENBR3hFLEdBQUl5VSxHQUFtQm5SLEVBQUtnUSxXQUFXLEdBQUdvQixXQUV0Q0MsRUFBaUIsV0FDbkJGLEVBQWlCOVUsTUFBTWlWLFdBQWEsU0FDcENDLGlCQUFtQixJQUNuQmxRLFdBQVcsV0FDVDhQLEVBQWlCOVUsTUFBTWlWLFdBQWEsV0FDbkMsS0FHTEQsS0FHQXpULEtBQUtpVCxzQkFBd0JsRixZQUFZLFdBQ3ZDMEYsS0FDQyxLQUdMLE9BQU8sRUFHVCxPQUFPLEdBTVRHLGFBQWMsV0FFWjVULEtBQUtvVCxhQUFhNWEsV0FBV21ILFlBQVlLLEtBQUtvVCxlQVdoRFosbUJBQW9CLFNBQVNwYixFQUFVeWMsR0FHckMsR0FBSTdCLEtBRUosSUFBSXBkLEVBQVF3QyxNQUFjLEVBQU0sQ0FFOUIsR0FBSS9CLEdBQ0E2SSxFQUVBaUgsRUFDQTJPLEVBQ0FDLEVBQ0FwQixFQUNBRyxFQUNBQyxFQU5BaUIsRUFBZ0I1YyxFQUFTRSxNQVM3QixJQUFJdWMsS0FBWSxFQUdkLElBQUt4ZSxFQUFJLEVBQU8yZSxFQUFKM2UsRUFBbUJBLElBUTdCLElBTEE4UCxFQUFPL0MsRUFBS3dELE9BQU92USxHQUNuQnllLEVBQWUzTyxFQUFLeE0scUJBQXFCLE9BQ3pDb2IsRUFBcUJELEVBQWF4YyxPQUc3QjRHLEVBQUksRUFBTzZWLEVBQUo3VixFQUF3QkEsSUFFbEN5VSxFQUFRbUIsRUFBYTVWLEdBQ3JCOFQsRUFBZ0JuUixLQUFLOFIsT0FVekIsS0FGQUcsS0FFS3pkLEVBQUksRUFBTzJlLEVBQUozZSxFQUFtQkEsSUFDN0IwZCxFQUFNM2IsRUFBUy9CLEdBRWZ5ZCxFQUFJemQsR0FBSyxHQUFJNGUsT0FDYm5CLEVBQUl6ZCxHQUFHMGQsSUFBTUEsRUFFYmYsRUFBZ0JuUixLQUFLaVMsRUFBSXpkLElBSy9CLE1BQU8yYyxJQVFUSyxPQUFRLFdBRU4sTUFBSWpRLEdBQUt6TixRQUFRNkcsYUFBYyxHQUc3QjRHLEVBQUtnUSxXQUFhMWMsU0FBUzhJLGNBQWMsT0FDekM0RCxFQUFLZ1EsV0FBV2xiLFVBQVksZ0JBRzVCa0wsRUFBS2dRLFlBQWNoUSxFQUFLZ1EsWUFHcEI1WSxFQUFVK0gsU0FBUyxnQkFBaUIsR0FBUy9ILEVBQVVzRixPQUFRLEVBQ2pFc0QsRUFBS2dRLFdBQVcsR0FBRzVTLFVBQVk0QyxFQUFLc1AsUUFBUUMsWUFFNUN2UCxFQUFLZ1EsV0FBVyxHQUFHNVMsVUFBWTRDLEVBQUtzUCxRQUFRRSxhQUk5Q3hQLEVBQUtVLFdBQVdvUixhQUFhOVIsRUFBS2dRLFdBQVcsR0FBSSxPQUUxQyxJQUdGLEdBUVRHLHNCQUF1QixTQUFTOVAsR0FFOUIsR0FBSUwsRUFBS3pOLFFBQVFnSCwyQkFBNEIsRUFBTSxDQUVqRCxHQUFJdEcsR0FDQThQLENBR0osS0FBSzlQLEVBQUksRUFBR0EsRUFBSStNLEVBQUt1RCxVQUFXdFEsSUFDOUI4UCxFQUFPL0MsRUFBS3dELE9BQU92USxHQUVOLFNBQVRvTixFQUNGTCxFQUFLRSxHQUFHZ0IsS0FBSzZCLEVBQU0sR0FFbkIvQyxFQUFLRSxHQUFHUyxLQUFLb0MsRUFBTSxFQUt2QixRQUFPLEVBR1QsT0FBTyxJQU9YL0MsRUFBSytSLGNBR0hDLE1BQ0VDLFFBQ0FDLFNBQ0FDLGNBQ0FDLGFBQ0FDLGNBQ0FDLFVBQ0FDLFNBQ0FDLGNBQ0FDLFdBTUZuUixLQUFNLFdBNERKLE1BekRBdEIsR0FBSytSLGFBQWFDLEtBQUtwUyxNQUVuQkksRUFBS3pOLFFBQVEwSCxZQUFhLEdBQzVCMkQsS0FBSzhVLElBQUlDLGFBR1AzUyxFQUFLek4sUUFBUXdILG1CQUFvQixFQUNuQzZELEtBQUs4VSxJQUFJM1ksa0JBRVRpRyxFQUFLNFMsWUFBYSxFQUdoQjVTLEVBQUt6TixRQUFRa0gsaUJBQWtCLEdBQ2pDbUUsS0FBSzhVLElBQUlqWixnQkFJWG1FLEtBQUs4VSxJQUFJRyxpQkFHVGpWLEtBQUs4VSxJQUFJSSxpQkFHTDlTLEVBQUt6TixRQUFRMEcsY0FBZSxJQUM5QitHLEVBQUsrUyxNQUFRL1MsRUFBS0UsR0FBR0UsWUFBWSxhQUFjSixFQUFLek4sUUFBUTBHLFlBQzVEMkUsS0FBSzhVLElBQUlNLE9BQU9oVCxFQUFLK1MsTUFBTyxNQUFPL1MsRUFBS2xHLE9BSXRDa0csRUFBS3pOLFFBQVEyRyxjQUFlLElBQzlCOEcsRUFBS2lULE1BQVFqVCxFQUFLRSxHQUFHRSxZQUFZLGFBQWNKLEVBQUt6TixRQUFRMkcsWUFDNUQwRSxLQUFLOFUsSUFBSU0sT0FBT2hULEVBQUtpVCxNQUFPLE1BQU9qVCxFQUFLbkcsT0FJdENtRyxFQUFLek4sUUFBUWtHLGtCQUFtQixJQUNsQ3VILEVBQUtnQyxVQUFZaEMsRUFBS0UsR0FBR0UsWUFBWSxpQkFBa0JKLEVBQUt6TixRQUFRa0csZ0JBQ3BFbUYsS0FBSzhVLElBQUlNLE9BQU9oVCxFQUFLZ0MsVUFBVyxNQUFPaEMsRUFBS2tULGlCQUk5Q3RWLEtBQUs4VSxJQUFJUyxjQUdMblQsRUFBS3pOLFFBQVE0RyxjQUFlLElBRTlCNkcsRUFBS21OLGVBR0xuTixFQUFLbU4sWUFBWWlHLGlCQUFtQmhoQixFQUNwQzROLEVBQUttTixZQUFZSyxTQUVqQnhOLEVBQUttTixZQUFZblksU0FBV2dMLEVBQUtFLEdBQUdFLFlBQVksYUFBY0osRUFBS3pOLFFBQVE0RyxZQUUzRXlFLEtBQUs4VSxJQUFJTSxPQUFPaFQsRUFBS21OLFlBQVluWSxTQUFVLGVBR3RDLE1BTVRxZSxVQUFXLFNBQVNDLEdBRWxCLEdBQUlDLEdBQ0FDLENBR0osS0FBS0QsSUFBYUQsR0FDWkEsRUFBVTdWLGVBQWU4VixNQUFlLElBRTFDQyxFQUFZRixFQUFVQyxHQUV0QjNWLEtBQUs2VixPQUFPRixHQUloQixPQUFPLE9BUVRFLE9BQVEsU0FBU3BULEdBR2YsR0FBSXFULEdBQWdCMVQsRUFBSytSLGFBQWFDLEtBQUszUixHQUN2Q3NULEVBQXNCRCxFQUFjeGUsTUFFeEMsUUFBT21MLEdBRUwsSUFBSyxhQUNDTCxFQUFLek4sUUFBUTBILFlBQWEsR0FDNUI0VSxpQkFBaUI2RSxFQUFjLEdBQUcvZixRQUV0QyxNQUVBLEtBQUssU0FFSCxHQUFJcU0sRUFBSytSLGFBQWFDLEtBQUtNLE9BQU9wZCxPQUFTLEdBQW1DUCxTQUE5QnJCLFNBQVNtTixpQkFBZ0MsQ0FFdkYsR0FBSTlNLEdBQVVxTSxFQUFLK1IsYUFBYUMsS0FBS00sT0FBTyxHQUFHM2UsT0FDL0NxTSxHQUFLNFMsV0FBV2dCLElBQUksU0FBVWpnQixJQUVsQyxLQUVBLFNBR0UsSUFBSyxHQUFJVixHQUFJLEVBQU8wZ0IsRUFBSjFnQixFQUF5QkEsSUFBSyxDQUM1QyxHQUFJNGdCLEdBQWtCSCxFQUFjemdCLEVBRXBDYyxHQUFZOGYsRUFBZ0J2aEIsUUFBUytOLEVBQU13VCxFQUFnQmxnQixZQUtuRStlLEtBT0VDLFdBQVksV0FHVjNTLEVBQUsvRixTQUFTd1UsWUFFZCxJQUFJOWEsR0FBVSxTQUFTdUgsR0FFckIsR0FBSXdTLEdBQ0F4USxDQUdKd1EsR0FBYXhTLEVBQUVrVSxRQUFVdEIsU0FBU2tCLEtBQ2xDdEIsRUFBYUEsRUFBVzlSLE1BQU0sTUFBTSxHQUdoQ29FLEVBQUtrTyxpQkFBbUJSLElBRzFCeFEsRUFBSzhDLEVBQUtnTyxhQUFhMVosUUFBUW9aLEdBQWMsRUFFN0MxTixFQUFLa08sZUFBaUJSLEVBWXRCMU4sRUFBS3dNLEtBQUt0UCxFQUFJdkksT0FBV0EsUUFBVyxJQVF4QyxPQUpBK1osZUFBYy9hLEdBRWRxTSxFQUFLK1IsYUFBYUMsS0FBS1EsV0FBVy9ULE1BQU1uTSxRQUFXOE0sT0FBUXpMLFFBQVdBLElBRS9EcU0sRUFBSytSLGFBQWFDLEtBQUtRLFlBV2hDUSxPQUFRLFNBQVNoZSxFQUFVcUwsRUFBTWMsR0FHL0IsR0FDSXhOLEdBQ0FyQixFQUVBd2hCLEVBQ0E5ZCxFQUNBdUssRUFDQXJELEVBQ0FqSyxFQVJBZ0MsRUFBaUJELEVBQVNFLE1BVTlCLFFBQVFtTCxHQUdOLElBQUssTUFFSHlULEVBQWMsU0FBU3hoQixHQUVyQnFCLEVBQVVGLEVBQVNuQixFQUFTLFFBQVMsU0FBU3loQixHQUV2Q0EsSUFDSEEsRUFBUTNVLE9BQU8yVSxPQU1iQSxFQUFNQyxlQUNSRCxFQUFNQyxpQkFFTkQsRUFBTUUsYUFBYyxFQUd0QjlTLE1BR0osTUFHRixLQUFLLGFBRUgyUyxFQUFjLFNBQVN4aEIsRUFBU2lPLEdBRTlCNU0sRUFBVUYsRUFBU25CLEVBQVMsUUFBUyxTQUFTeWhCLEVBQU96aEIsR0FFOUN5aEIsSUFDSEEsRUFBUTNVLE9BQU8yVSxPQU1iQSxFQUFNQyxlQUNSRCxFQUFNQyxpQkFFTkQsRUFBTUUsYUFBYyxDQUd0QixJQUFJQyxHQUFnQkgsRUFBTTlkLFFBQVU4ZCxFQUFNSSxVQUUxQ25lLEdBQVM0SCxLQUdUVixFQUFLbkgsRUFBVUMsRUFBUWtlLEdBR3ZCbFUsRUFBS3dNLEtBQUt0UCxLQUlaOEMsRUFBS21OLFlBQVlLLE1BQU0vTyxLQUFLdUIsRUFBSzdHLFdBQVd5VCxTQUFTdGEsRUFBU2lPLEtBTXBFLElBQUt0TixFQUFJLEVBQU9nQyxFQUFKaEMsRUFBb0JBLElBQzlCWCxFQUFVMEMsRUFBUy9CLEdBR25Cc04sRUFBTWpPLEVBQVFtRixhQUFhLE9BSXZCOEksSUFBUVAsRUFBS1UsV0FBV3hELElBQWtELE9BQTVDNUssRUFBUW1GLGFBQWEsb0JBRXJEbkYsRUFBUW9GLGFBQWEsbUJBQW1CLEdBQ3hDb2MsRUFBWXhoQixFQUFTaU8sSUFJTixPQUFSQSxHQUE0RCxPQUE1Q2pPLEVBQVFtRixhQUFhLG9CQUU1Q3FjLEVBQVl4aEIsRUFBU2lPLEdBS3ZCUCxFQUFLK1IsYUFBYUMsS0FBS0UsTUFBTXpULE1BQU1uTSxRQUFXQSxFQUFTcUIsUUFBV0EsR0FHcEUsT0FBT3FNLEdBQUsrUixhQUFhQyxLQUFLRSxPQVloQ2lCLFlBQWEsV0FFWCxHQUNJaUIsR0FDQXpnQixDQTRFSixPQTFFQXFNLEdBQUtxVSxhQUFjLEVBTW5CRCxFQUFlM2dCLEVBQVN1TSxFQUFLVSxXQUFZLGFBQWMsU0FBU3hGLEdBRTlEOEUsRUFBS3NVLFdBQVksSUFJbkJ0VSxFQUFLK1IsYUFBYUMsS0FBS0csV0FBVzFULE1BQU1uTSxRQUFXME4sRUFBS1UsV0FBWS9NLFFBQVd5Z0IsSUFNL0V6Z0IsRUFBVUYsRUFBU3VNLEVBQUtVLFdBQVksWUFBYSxTQUFTeEYsR0FNeEQsTUFKQUEsR0FBSUEsR0FBS2tFLE9BQU8yVSxNQUlaL1QsRUFBS3NVLGFBQWMsT0FDckJ0VSxFQUFLc1UsV0FBWSxRQUtmbGYsRUFBYzRLLEVBQUtVLFdBQVl4RixNQUFPLEdBR3BDOEUsRUFBS3pOLFFBQVFtRyx3QkFBeUIsR0FBUXNILEVBQUtxVSxlQUFnQixHQUNyRXJVLEVBQUszSCxTQUFTa0ssUUFJaEJ2QyxFQUFLcVUsYUFBYyxJQVFmclUsRUFBS3pOLFFBQVFtRyx3QkFBeUIsR0FBUXNILEVBQUtxVSxlQUFnQixHQUNyRXJVLEVBQUszSCxTQUFTaUssVUFJaEJ0QyxFQUFLcVUsYUFBYyxNQUt2QnJVLEVBQUsrUixhQUFhQyxLQUFLSSxVQUFVM1QsTUFBTW5NLFFBQVcwTixFQUFLVSxXQUFZL00sUUFBV0EsSUFLOUVBLEVBQVVGLEVBQVN1TSxFQUFLVSxXQUFZLGFBQWMsU0FBU3hGLEdBRXJEOEUsRUFBS3pOLFFBQVFtRyx3QkFBeUIsR0FDeENzSCxFQUFLM0gsU0FBU2lLLFVBSWhCdEMsRUFBS3FVLGFBQWMsSUFJckJyVSxFQUFLK1IsYUFBYUMsS0FBS0ssV0FBVzVULE1BQU1uTSxRQUFXME4sRUFBS1UsV0FBWS9NLFFBQVdBLElBRXhFLE1BTVRvRyxnQkFBaUIsV0FJZixHQUFnQ3BGLFNBQTVCeUssT0FBT3hMLGlCQUVULFlBREFvTSxFQUFLNFMsWUFBYSxFQUlwQixJQUFJamMsR0FDQWhELENBRWtCLG1CQUFYekIsS0FFVHlCLEVBQVUsU0FBU3VILEdBRWpCLE9BQU9BLEVBQUV1TyxXQUdQLElBQUssR0FDSHpKLEVBQUt6TixRQUFRa0UsWUFBWWYsS0FBS3NLLEVBQ2hDLE1BR0EsS0FBSyxHQUNIQSxFQUFLek4sUUFBUWtFLFlBQVlkLE1BQU1xSyxFQUNqQyxNQUdBLEtBQUssR0FDSEEsRUFBS3pOLFFBQVFrRSxZQUFZSSxHQUFHbUosRUFDOUIsTUFHQSxLQUFLLElBQ0hBLEVBQUt6TixRQUFRa0UsWUFBWUssS0FBS2tKLEtBTXBDQSxFQUFLNFMsV0FBYSxHQUFJMWdCLEdBQU84TixFQUFLVSxZQUFZMlAsR0FBRyxRQUFTMWMsR0FHMURxTSxFQUFLNFMsV0FBVzJCLElBQUksU0FBU0MsSUFBSXhVLEVBQUt6TixRQUFReUgsb0JBSTlDckQsRUFBa0JILEVBQW1Cd0osRUFBS3pOLFFBQVFrRSxhQUNsRHVKLEVBQUs0UyxXQUFXMkIsSUFBSSxTQUFTQyxLQUFLL0ssVUFBVzlTLElBRTdDcUosRUFBSytSLGFBQWFDLEtBQUtNLE9BQU83VCxNQUFNbk0sUUFBVzBOLEVBQUtVLFdBQVkvTSxRQUFXQSxNQU8vRThGLGNBQWUsV0FFYixHQUFJOUYsR0FBVUYsRUFBU0gsU0FBVSxRQUFTLFNBQVN5Z0IsR0FFNUNBLElBQ0hBLEVBQVEzVSxPQUFPMlUsTUFJakIsSUFBSVUsR0FBY3hYLFNBQVN5WCxPQUFPQyxhQUFhWixFQUFNYSxTQVFyRCxRQUxLSCxFQUFjLEdBQUtBLEdBQWV6VSxFQUFLdUQsV0FBZXZELEVBQUt6TixRQUE0QixzQkFDMUZ5TixFQUFLd00sS0FBS2lJLEdBSUxWLEVBQU1hLFNBQ1gsSUFBSyxJQUNINVUsRUFBS3pOLFFBQVFvSCxVQUFVakUsS0FBS3NLLEVBQzlCLE1BRUEsS0FBSyxJQUNIQSxFQUFLek4sUUFBUW9ILFVBQVVoRSxNQUFNcUssS0FLbkNBLEdBQUsrUixhQUFhQyxLQUFLTyxNQUFNOVQsTUFBTW5NLFFBQVdnQixTQUFVSyxRQUFXQSxLQU9yRWtmLGVBQWdCLFdBR2QsUUFBU2dDLEtBSVB4VCxXQUFXLFdBQ1RyQixFQUFLd0MsT0FBT0kseUJBV1I1QyxFQUFLYSxnQkFBZ0JDLGVBQWdCLEdBQ3ZDZCxFQUFLd0MsT0FBT3FCLEtBQUs3RCxFQUFLdUgsZUFBZSxJQUV0QyxLQUdIdkgsRUFBSzhVLGdCQUFnQjlVLEdBUXZCLEdBQUkrVSxHQUNBcGhCLENBRUpBLEdBQVVGLEVBQVMyTCxPQUFRLFNBQVUsU0FBU2xFLEdBRTVDa0gsYUFBYTJTLEdBQ2JBLEVBQWdCMVQsV0FBV3dULEVBQWlCdGEsS0FHOUN5RixFQUFLK1IsYUFBYUMsS0FBS1MsT0FBT2hVLE1BQU1uTSxRQUFXOE0sT0FBUXpMLFFBQVdBLEtBT3BFbWYsZUFBZ0IsV0FFZCxHQUFJbmYsR0FBVUYsRUFBU0gsU0FBVXNNLEVBQWtCLFdBRTdDdE0sU0FBU3FNLEdBRVhLLEVBQUszSCxTQUFTa0ssUUFHZHZDLEVBQUszSCxTQUFTaUssWUFFZixFQUVIdEMsR0FBSytSLGFBQWFDLEtBQUtwUyxHQUFrQm5CLE1BQU1uTSxRQUFXZ0IsU0FBVUssUUFBV0EsT0FVckZxTSxFQUFLc0IsS0FBTyxTQUFTaFAsR0FFbkIsR0FBSTRLLEdBQ0E4WCxFQUNBeE8sRUFFQXlPLENBR0pqVixHQUFLek4sUUFBVU8sRUFBTzZFLEVBQVVwRixHQUVoQ3lOLEVBQUtpQyxhQUFjLEVBQ25CakMsRUFBSzhCLFNBQVUsRUFJZjlCLEVBQUtVLFdBQWFwTyxFQUNsQjBOLEVBQUt5QyxRQUFVekMsRUFBS1UsV0FBV0QsaUJBQWlCLGVBQWUsR0FDL0RULEVBQUtpRSxRQUFVakUsRUFBS1UsV0FBV0QsaUJBQWlCLGVBQWUsR0FDL0RULEVBQUt3RCxPQUFTeEQsRUFBS3dDLE9BQU9LLFNBQVM3QyxFQUFLaUUsU0FHeENqRSxFQUFLdUQsVUFBWXZELEVBQUt3RCxPQUFPdE8sT0FFN0I4SyxFQUFLK0csZ0JBQWtCLEVBQ3ZCL0csRUFBS2tILGlCQUdMaFEsRUFBeUI4SSxFQUFLVSxXQUFZdEosR0FHMUM4RixFQUFLOEMsRUFBS3pOLFFBQVFxRixlQUVsQjdDLEVBQVNpTCxFQUFLVSxXQUFZLGNBSTFCVixFQUFLYSxnQkFBa0JiLEVBQUt2RixVQUFVeVEscUJBQ3RDbEwsRUFBS2dFLGVBQWlCaEUsRUFBS3ZGLFVBQVV3USxxQkFBcUJqTCxFQUFLYSxpQkFHL0RiLEVBQUt3QyxPQUFPbEIsS0FBS3BFLEdBR2pCOEMsRUFBS3dDLE9BQU8wQixnQkFBZ0JsRSxHQUc1QkEsRUFBSytSLGFBQWF6USxPQUdsQnRCLEVBQUszSCxTQUFTaUosT0FHZHRCLEVBQUsrRCxVQUFXLEVBSWhCN0csRUFBSzhDLEVBQUsvRixTQUFTcUgsS0FBS3BFLEdBR2UsSUFBbkM4QyxFQUFLek4sUUFBUWlHLG1CQUNmZ08sRUFBYXRKLEVBQUssRUFDbEI4QyxFQUFLd0csV0FBMkIsRUFBYkEsRUFBa0J4RyxFQUFLdUQsVUFBV2lELElBRXJEQSxFQUFhdEosRUFBSyxFQUNsQjhDLEVBQUt3RyxXQUFjQSxFQUFheEcsRUFBS3VELFVBQWEsRUFBR2lELEdBSXZEeEcsRUFBS3VILGNBQWdCdkgsRUFBS3dHLFdBQzFCd08sRUFBV2hWLEVBQUt3RyxXQUdoQnhHLEVBQUtnQixrQkFBa0I4SyxZQUFZNU8sR0FFbkMrWCxFQUFnQixXQUVkalYsRUFBS3ZGLFVBQVU2TixTQUFTLFdBR3RCdEksRUFBS3ZGLFVBQVU2TixTQUFTLFdBQ3RCdEksRUFBS3ZGLFVBQVUwSixvQkFBb0I2USxLQUdyQ2hWLEVBQUs4QixTQUFVLEVBR2Y5QixFQUFLa1YsTUFBTWxWLEdBR1hBLEVBQUt3TSxLQUFLdFAsRUFBSThDLEVBQUt6TixRQUFRaUcsbUJBQW1CLE1BSzlDd0gsRUFBS3pOLFFBQVE2RyxhQUFjLEdBQXVDekUsU0FBOUJyQixTQUFTbU4sa0JBQTBELGtCQUFqQnhPLEdBRXhGK04sRUFBS3NQLFFBQVFoTyxLQUFLLFdBQ2hCMlQsTUFHRkEsS0FTSmpWLEVBQUttVixRQUFVLFdBRWIsR0FBSWxpQixHQUNBOFAsRUFDQXFTLENBZ0NKLEtBN0JBcFYsRUFBSzNILFNBQVM4SixPQUdkQyxhQUFhcEMsRUFBS2tDLGVBQ2xCRSxhQUFhcEMsRUFBS2dILHFCQUNsQjVFLGFBQWFwQyxFQUFLdUosZ0JBQ2xCbkgsYUFBYXBDLEVBQUs2Six3QkFDbEJ6SCxhQUFhcEMsRUFBS2lILHVCQUNsQjdFLGFBQWFwQyxFQUFLOEoscUJBQ2xCMUgsYUFBYXBDLEVBQUtxVixlQUNsQmpULGFBQWFwQyxFQUFLb0IsV0FDbEJnQixhQUFhcEMsRUFBS29ILDhCQUdsQnBILEVBQUsrUixhQUFhc0IsVUFBVXJULEVBQUsrUixhQUFhQyxNQUc5QzdjLEVBQVk2SyxFQUFLbU4sWUFBWUksYUFBYyxlQUMzQ3BZLEVBQVk2SyxFQUFLVSxXQUFZLFdBQWFWLEVBQUt1SCxlQUMvQ3BTLEVBQVk2SyxFQUFLVSxXQUFZLGNBRzdCVixFQUFLVSxXQUFXNFUsZ0JBQWdCLFNBQ1gzZ0IsU0FBakJxTCxFQUFLeUMsU0FDUHpDLEVBQUt5QyxRQUFRNlMsZ0JBQWdCLFNBRS9CdFYsRUFBS2lFLFFBQVFxUixnQkFBZ0IsU0FHeEJyaUIsRUFBSSxFQUFHQSxFQUFJK00sRUFBS3VELFVBQVd0USxJQUM5QjhQLEVBQU8vQyxFQUFLd0QsT0FBT3ZRLEdBRW5COFAsRUFBS3VTLGdCQUFnQixTQUNyQnRWLEVBQUt2RixVQUFVMEosb0JBQW9CbFIsRUFBSSxHQUN2Q2tDLEVBQVk0TixFQUFNLFVBQ2xCNU4sRUFBWTROLEVBQU0sVUFpQnBCLE9BYkFxUyxHQUFXcFYsRUFBS3dELE9BQU94RCxFQUFLek4sUUFBUXFGLGVBQWlCLEdBQ3JEb0ksRUFBS3ZGLFVBQVUwSixvQkFBb0JuRSxFQUFLek4sUUFBUXFGLGdCQUNoRDdDLEVBQVNxZ0IsRUFBVSxVQUduQjlpQixFQUFRZ2pCLGdCQUFnQixvQkFHeEJ0VixFQUFLdVYsVUFBVXZWLEdBR2ZBLEVBQU8sTUFZVEEsRUFBS2xHLEtBQU8sV0FFVixHQUFJMGIsR0FBYXhWLEVBQUt1SCxjQUFnQixDQUd0QyxPQUFJaU8sR0FBYXhWLEVBQUt1RCxXQUFhdkQsRUFBS3pOLFFBQVF1RixTQUFVLEdBQ2pELEdBQ0UwZCxFQUFheFYsRUFBS3VELFlBQzNCaVMsRUFBYSxHQUdmeFYsRUFBS3dNLEtBQUtnSixHQUVIQSxJQVVUeFYsRUFBS25HLEtBQU8sV0FFVixHQUNJNFAsR0FEQWpELEVBQWF4RyxFQUFLdUgsY0FBZ0IsQ0FHdEMsT0FBaUIsR0FBYmYsR0FBa0J4RyxFQUFLek4sUUFBUXVGLFNBQVUsR0FDcEMsR0FDZSxFQUFiME8sSUFDVEEsRUFBYXhHLEVBQUt1RDtBQUdoQnZELEVBQUt6TixRQUFReUYsa0NBQW1DLElBQ2xEeVIsRUFBWSxJQUdkekosRUFBS3dNLEtBQUtoRyxFQUFZaUQsR0FFZmpELElBWVR4RyxFQUFLa1QsZUFBaUIsU0FBU3hSLEdBUTdCLE1BTkkxQixHQUFLd0IsaUJBQWtCLEVBQ3pCeEIsRUFBSzRCLE1BQU1GLEdBRVgxQixFQUFLbUMsT0FHQW5DLEVBQUt3QixlQUdkeEIsRUFBS21DLEtBQU8sV0FFVm5DLEVBQUszSCxTQUFTOEosUUFHaEJuQyxFQUFLNEIsTUFBUSxTQUFTRixHQUVwQjFCLEVBQUszSCxTQUFTdUosTUFBTUYsSUFjdEIxQixFQUFLd00sS0FBTyxTQUFTdFAsRUFBSXVNLEVBQVc5RCxFQUFzQjhDLEdBcUJ4RCxHQWxCQWdCLEVBQVl6SixFQUFLdkYsVUFBVW9RLGFBQWEzTixFQUFJdU0sRUFBV3pKLEVBQUt1SCxjQUFldkgsRUFBS3VELFVBQVd2RCxFQUFLZ0UsZUFBZ0JoRSxFQUFLek4sUUFBUXlGLCtCQUFnQ2dJLEVBQUt6TixRQUFRdUYsT0FrQi9KbkQsU0FBUHVJLEdBQXlCLEVBQUxBLEdBQVVBLEVBQUs4QyxFQUFLdUQsV0FBYXJHLElBQU84QyxFQUFLdUgsZUFBa0J2SCxFQUFLek4sUUFBUW9HLGtCQUFtQixHQUFTcUgsRUFBS2lDLGVBQWdCLEdBQVVqQyxFQUFLek4sUUFBUW9HLGtCQUFtQixHQUFRcUgsRUFBSzhHLGlDQUFrQyxHQUF1Qm5TLFNBQWY4VCxHQUE4QnpJLEVBQUtnRSxrQkFBbUIsR0FBUWhFLEVBQUtpQyxlQUFnQixHQUF1QnROLFNBQWY4VCxHQUE4QnpJLEVBQUt6TixRQUFReUcsMEJBQTJCLEdBQVFnSCxFQUFLeUosWUFBY0EsR0FBYXpKLEVBQUtpQyxlQUFnQixFQUNsZCxPQUFPLENBR1QsSUFBSXVHLEdBQ0E1QixDQTZESixPQTFEQXhFLGNBQWFwQyxFQUFLa0MsZUFHbEJsQyxFQUFLeUosVUFBWUEsRUFHQyxJQUFkQSxFQUVGdFUsRUFBWTZLLEVBQUtVLFdBQVksZ0JBRzdCM0wsRUFBU2lMLEVBQUtVLFdBQVksZ0JBSTVCOEgsRUFBcUJ4SSxFQUFLd0QsT0FBT3hELEVBQUt1SCxjQUFnQixHQUN0RFgsRUFBa0I1RyxFQUFLd0QsT0FBT3RHLEVBQUssR0FHbkM4QyxFQUFLdkYsVUFBVXZDLG9CQUFvQnNRLEVBQW9CNUIsR0FHdkQ1RyxFQUFLdkYsVUFBVTRNLFdBQVduSyxHQUV0QjhDLEVBQUtnRSxrQkFBbUIsR0FJMUJoRSxFQUFLdkYsVUFBVTBKLG9CQUFvQmpILElBRS9COEMsRUFBSytELFlBQWEsR0FBVS9ELEVBQUsrRCxZQUFhLEdBQVEvRCxFQUFLek4sUUFBUXNGLDBCQUEyQixJQUdoR21JLEVBQUsyTSxpQkFBaUJ6UCxFQUFJOEMsR0FJNUJBLEVBQUt3QyxPQUFPcUIsS0FBSzNHLEdBQUksR0FJckI4QyxFQUFLdkYsVUFBVWtNLHFCQUFxQnpKLEVBQUkwSixHQUd0QixJQUFkNkMsRUFFRnpKLEVBQUt2RixVQUFVOE4sUUFBUXJMLEVBQUlzTCxFQUFvQjVCLEVBQWlCakIsRUFBc0I4QyxHQUV0RnpJLEVBQUt2RixVQUFVcU8sUUFBUTVMLEVBQUlzTCxFQUFvQjVCLEVBQWlCakIsRUFBc0I4QyxJQU94RnpJLEVBQUtnQixrQkFBa0J3TCxLQUFLdFAsRUFBSThDLEVBQUt1SCxjQUFlaUIsRUFBb0J0TCxFQUFJMEosRUFBaUI2QyxFQUFXaEIsSUFHbkcsR0FRVHpJLEVBQUsrQixRQUFVLFNBQVMvQixLQVF4QkEsRUFBS3FDLFFBQVUsU0FBU3JDLEtBV3hCQSxFQUFLMk0saUJBQW1CLFNBQVN6UCxFQUFJOEMsS0FXckNBLEVBQUsrSixlQUFpQixTQUFTN00sRUFBSThDLEtBVW5DQSxFQUFLMkksb0JBQXNCLFNBQVN6TCxFQUFJOEMsS0FVeENBLEVBQUswSixrQkFBb0IsU0FBU3hNLEVBQUk4QyxLQVV0Q0EsRUFBS21KLGlCQUFtQixTQUFTak0sRUFBSThDLEtBVXJDQSxFQUFLcUosZUFBaUIsU0FBU25NLEVBQUk4QyxLQVVuQ0EsRUFBSzhVLGdCQUFrQixTQUFTOVUsS0FVaENBLEVBQUs0USxVQUFZLFNBQVM1USxLQWMxQkEsRUFBS3lRLGdCQUFrQixTQUFTVixFQUFRWSxFQUFLYixFQUFVNWEsRUFBUThLLEtBVy9EQSxFQUFLa1YsTUFBUSxTQUFTbFYsS0FVdEJBLEVBQUt1VixVQUFZLFNBQVN2VixLQVUxQkEsRUFBS3lWLE9BQ0gxZ0IsU0FBVUEsRUFDVkksWUFBYUEsRUFDYjFCLFNBQVVBLEVBQ1ZNLFlBQWFBLEdBS2ZpTSxFQUFLc0IsS0FBS2hQLEdBR1ZILEVBQVVzTSxLQUFLdUIsR0FFUkEsRUFHVCxPQUFPM04sR0E2eTlCVCxRQUFTcWpCLGlCQUNnQi9nQixTQUFiZ2hCLFNBQ0FDLEVBQUUsb0JBQW9CQyxNQUFNLFFBRzVCRCxFQUFFLG1DQUFxQ0EsRUFBRUUsT0FBTyxZQUFjLE1BQU1DLE1BQU1DLFNBQVcsSUFLakcsUUFBU0MscUJBQ0wsR0FBSUMsR0FBWUMsZUFBZUMsUUFBUSxRQUNuQ0MsRUFBVUMsS0FBS0MsTUFBTUwsRUFDQSxrQkFBckJHLEVBQVEsR0FBR0csSUFBSSxLQUNmSCxFQUFRSSxRQUFRLFNBQVVDLEdBQ3RCQyxRQUFRQyxJQUFJRixFQUFNRixJQUFJLElBQ0YsTUFBaEJFLEVBQU1GLElBQUksSUFDVkssVUFBVUwsSUFBSTlELEtBQ1ZnRSxFQUFNRixJQUFJLEdBQ1YsR0FDQSwrQkFBaUNFLEVBQU1GLElBQUksR0FBSyxpQkFBbUJFLEVBQU1GLElBQUksR0FBSywwRkFDbEYsc0JBQXdCRSxFQUFNRixJQUFJLEdBQUssb0NBQ3ZDLG9CQUFzQkUsRUFBTUYsSUFBSSxHQUFLLHFEQUN0Q00sTUFBSyxHQUNSbEIsRUFBRSxnQ0FBZ0N2RixHQUFHLFNBQVUsU0FBVW5WLEdBQ3JEMGEsRUFBRSxjQUFjbUIsS0FBS0MsbUJBR3pCcEIsRUFBRSxjQUFjbUIsS0FBS0MsbUJBRXJCSCxVQUFVTCxJQUFJOUQsS0FDVmdFLEVBQU1GLElBQUksR0FDViwyTEFDQSwrQkFBaUNFLEVBQU1GLElBQUksR0FBSyxpQkFBbUJFLEVBQU1GLElBQUksR0FBSywwRkFDbEYsc0JBQXdCRSxFQUFNRixJQUFJLEdBQUssb0NBQ3ZDLG9CQUFzQkUsRUFBTUYsSUFBSSxHQUFLLHFEQUN0Q00sTUFBSyxHQUVSbEIsRUFBRSxVQUFVcUIsY0FFWnJCLEVBQUUsd0JBQTBCYyxFQUFNRixJQUFJLEdBQUssS0FBS1QsS0FBSyxZQUFZLEdBRWpFSCxFQUFFLGdDQUFnQ3ZGLEdBQUcsU0FBVSxTQUFVblYsR0FDckQwYSxFQUFFLGNBQWNtQixLQUFLQyxtQkFHekJwQixFQUFFLGNBQWNtQixLQUFLQyxvQkFJN0JwQixFQUFFLFVBQVVzQixRQUFRLGNBMEI1QixRQUFTQyxpQkFDTCxHQUFJQyxHQUFZLEdBQUkvWCxNQWFwQixPQVpBdVcsR0FBRSxrQkFBa0J5QixLQUFLLFNBQVViLEVBQUtjLEdBQ3BDRixFQUFVWixJQUNOQSxLQUNJWixFQUFFMEIsR0FBSUMsS0FBSyxZQUFZQyxPQUN2QjVCLEVBQUUwQixHQUFJQyxLQUFLLFlBQVlBLEtBQUssOEJBQThCRSxNQUMxRDdCLEVBQUUwQixHQUFJQyxLQUFLLFlBQVlBLEtBQUssU0FBU0UsTUFDckM3QixFQUFFMEIsR0FBSUMsS0FBSyxZQUFZUixPQUN2Qm5CLEVBQUUwQixHQUFJQyxLQUFLLFlBQVlBLEtBQUssS0FBS0csS0FBSyxVQUlsRE4sRUFBVU8sUUFDSFAsRUFtSFgsUUFBU1EsZUFBY0MsR0FDbkIsTUFBT0EsR0FBWWpDLEVBQUUsZUF5QnpCLFFBQVNvQixpQkFtQkwsTUFsQkFjLE1BQU8sRUFDUGxDLEVBQUUsZ0NBQWdDeUIsS0FBSyxXQUNuQ1MsTUFBUTdhLFNBQVMyWSxFQUFFaFksTUFBTTZaLE1BQVE3QixFQUFFaFksTUFBTThaLEtBQUssaUJBRXRDLEdBQVJJLE1BRTRCLGVBQXhCbEMsRUFBRUUsT0FBTyxjQUNUZ0MsTUFBcUIsR0FBUEEsS0FBWSxLQUk5QmxDLEVBQUUsMkJBQTJCMWdCLFFBQzdCMGdCLEVBQUUsZUFBZW1CLEtBQUtlLE1BRzFCM0IsZUFBZTRCLFFBQVEsT0FBUXpCLEtBQUswQixVQUFVYixrQkFDOUNoQixlQUFlNEIsUUFBUSxhQUFjRCxNQUNyQzNCLGVBQWU0QixRQUFRLFdBQVluQyxFQUFFRSxPQUFPLGFBQ3JDZ0MsS0FJWCxRQUFTRyxRQUFPQyxHQUdaLElBQUssR0FGREMsTUFFS2xsQixFQUFJLEVBQUdBLEVBQUlpbEIsRUFBSWhqQixPQUFRakMsSUFBSyxDQUNqQyxHQUFJbWxCLEdBQU1GLEVBQUlqbEIsRUFDZGtsQixHQUFJQyxJQUFPLEVBR2YsTUFBTzFsQixRQUFPMmxCLEtBQUtGLEdBaUJ2QixRQUFTRyxTQUFRSixHQUliLElBSEEsR0FBSUssR0FFQUMsRUFGTXpsQixFQUFJK0ssVUFDVjJhLEVBQUkxbEIsRUFBRW1DLE9BRUh1akIsRUFBSSxHQUFLUCxFQUFJaGpCLFFBRWhCLElBREFxakIsRUFBT3hsQixJQUFJMGxCLEdBQ3lCLE1BQTVCRCxFQUFLTixFQUFJNWpCLFFBQVFpa0IsS0FDckJMLEVBQUlqSixPQUFPdUosRUFBSSxFQUd2QixPQUFPTixHQTNrK0JYLEdBeG1PQSxXQUFZLFFBQVNoZCxNQUFLLFFBQVMwQixHQUFFMUIsRUFBRTBCLEdBQUcsSUFBSSxHQUFJbEIsR0FBRVIsRUFBRWhHLE9BQU93RyxLQUFLLEdBQUdSLEVBQUVRLEdBQUdnZCxXQUFXOWIsRUFBRSxNQUFPbEIsRUFBRSxPQUFNLEdBQUcsUUFBU0EsR0FBRVIsR0FBRyxNQUFPLFlBQVcsTUFBTzBDLE1BQUsxQyxHQUFHNkMsTUFBTUgsS0FBS0UsWUFBWSxHQUFJN0ssR0FBRWlJLEVBQUV2SSxVQUFVZ21CLEVBQUUvYSxLQUFLL0IsRUFBRThjLEVBQUVDLFlBQWEzbEIsR0FBRTRsQixhQUFhLFNBQVMzZCxHQUFHLEdBQUkwQixHQUFFbEIsRUFBRXpJLEVBQUUySyxLQUFLa2IsWUFBYSxJQUFHLGdCQUFpQjVkLEdBQUUsQ0FBQzBCLElBQUssS0FBSWxCLElBQUt6SSxHQUFFQSxFQUFFd0ssZUFBZS9CLElBQUlSLEVBQUVyRyxLQUFLNkcsS0FBS2tCLEVBQUVsQixHQUFHekksRUFBRXlJLFFBQVNrQixHQUFFM0osRUFBRWlJLEtBQUtqSSxFQUFFaUksTUFBTyxPQUFPMEIsSUFBRzNKLEVBQUU4bEIsaUJBQWlCLFNBQVM3ZCxHQUFHLEdBQUkwQixHQUFFbEIsSUFBSyxLQUFJa0IsRUFBRSxFQUFFMUIsRUFBRWhHLE9BQU8wSCxFQUFFQSxHQUFHLEVBQUVsQixFQUFFK0MsS0FBS3ZELEVBQUUwQixHQUFHOGIsU0FBVSxPQUFPaGQsSUFBR3pJLEVBQUUrbEIscUJBQXFCLFNBQVM5ZCxHQUFHLEdBQUkwQixHQUFFbEIsRUFBRWtDLEtBQUtpYixhQUFhM2QsRUFBRyxPQUFPUSxhQUFhMkQsU0FBUXpDLEtBQUtBLEVBQUUxQixHQUFHUSxHQUFHa0IsR0FBR2xCLEdBQUd6SSxFQUFFZ21CLFlBQVksU0FBUy9kLEVBQUVRLEdBQUcsR0FBSXpJLEdBQUUwbEIsRUFBRS9hLEtBQUtvYixxQkFBcUI5ZCxHQUFHVyxFQUFFLGdCQUFpQkgsRUFBRSxLQUFJekksSUFBSzBsQixHQUFFQSxFQUFFbGIsZUFBZXhLLElBQUksS0FBSzJKLEVBQUUrYixFQUFFMWxCLEdBQUd5SSxJQUFJaWQsRUFBRTFsQixHQUFHd0wsS0FBSzVDLEVBQUVILEdBQUdnZCxTQUFTaGQsRUFBRXdkLE1BQUssR0FBSyxPQUFPdGIsT0FBTTNLLEVBQUVvZCxHQUFHM1UsRUFBRSxlQUFlekksRUFBRWttQixnQkFBZ0IsU0FBU2plLEVBQUUwQixHQUFHLE1BQU9nQixNQUFLcWIsWUFBWS9kLEdBQUd3ZCxTQUFTOWIsRUFBRXNjLE1BQUssS0FBTWptQixFQUFFaW1CLEtBQUt4ZCxFQUFFLG1CQUFtQnpJLEVBQUVtbUIsWUFBWSxTQUFTbGUsR0FBRyxNQUFPMEMsTUFBS2liLGFBQWEzZCxHQUFHMEMsTUFBTTNLLEVBQUVvbUIsYUFBYSxTQUFTbmUsR0FBRyxJQUFJLEdBQUkwQixHQUFFLEVBQUUxQixFQUFFaEcsT0FBTzBILEVBQUVBLEdBQUcsRUFBRWdCLEtBQUt3YixZQUFZbGUsRUFBRTBCLEdBQUksT0FBT2dCLE9BQU0zSyxFQUFFcW1CLGVBQWUsU0FBU3BlLEVBQUVRLEdBQUcsR0FBSXpJLEdBQUUwbEIsRUFBRTljLEVBQUUrQixLQUFLb2IscUJBQXFCOWQsRUFBRyxLQUFJeWQsSUFBSzljLEdBQUVBLEVBQUU0QixlQUFla2IsS0FBSzFsQixFQUFFMkosRUFBRWYsRUFBRThjLEdBQUdqZCxHQUFHLEtBQUt6SSxHQUFHNEksRUFBRThjLEdBQUcxSixPQUFPaGMsRUFBRSxHQUFJLE9BQU8ySyxPQUFNM0ssRUFBRTJnQixJQUFJbFksRUFBRSxrQkFBa0J6SSxFQUFFc21CLGFBQWEsU0FBU3JlLEVBQUUwQixHQUFHLE1BQU9nQixNQUFLNGIscUJBQW9CLEVBQUd0ZSxFQUFFMEIsSUFBSTNKLEVBQUV3bUIsZ0JBQWdCLFNBQVN2ZSxFQUFFMEIsR0FBRyxNQUFPZ0IsTUFBSzRiLHFCQUFvQixFQUFHdGUsRUFBRTBCLElBQUkzSixFQUFFdW1CLG9CQUFvQixTQUFTdGUsRUFBRTBCLEVBQUVsQixHQUFHLEdBQUl6SSxHQUFFMGxCLEVBQUU5YyxFQUFFWCxFQUFFMEMsS0FBSzBiLGVBQWUxYixLQUFLcWIsWUFBWVMsRUFBRXhlLEVBQUUwQyxLQUFLNmIsZ0JBQWdCN2IsS0FBSzJiLFlBQWEsSUFBRyxnQkFBaUIzYyxJQUFHQSxZQUFhaEksUUFBTyxJQUFJM0IsRUFBRXlJLEVBQUV4RyxPQUFPakMsS0FBSzRJLEVBQUVoSixLQUFLK0ssS0FBS2hCLEVBQUVsQixFQUFFekksUUFBUyxLQUFJQSxJQUFLMkosR0FBRUEsRUFBRWEsZUFBZXhLLEtBQUswbEIsRUFBRS9iLEVBQUUzSixNQUFNLGtCQUFtQjBsQixHQUFFOWMsRUFBRWhKLEtBQUsrSyxLQUFLM0ssRUFBRTBsQixHQUFHZSxFQUFFN21CLEtBQUsrSyxLQUFLM0ssRUFBRTBsQixHQUFJLE9BQU8vYSxPQUFNM0ssRUFBRWMsWUFBWSxTQUFTbUgsR0FBRyxHQUFJMEIsR0FBRWxCLFFBQVNSLEdBQUVqSSxFQUFFMkssS0FBS2tiLFlBQWEsSUFBRyxXQUFXcGQsUUFBU3pJLEdBQUVpSSxPQUFRLElBQUcsV0FBV1EsRUFBRSxJQUFJa0IsSUFBSzNKLEdBQUVBLEVBQUV3SyxlQUFlYixJQUFJMUIsRUFBRXJHLEtBQUsrSCxVQUFXM0osR0FBRTJKLGNBQWVnQixNQUFLK2IsT0FBUSxPQUFPL2IsT0FBTTNLLEVBQUUybUIsbUJBQW1CbGUsRUFBRSxlQUFlekksRUFBRTRtQixVQUFVLFNBQVMzZSxFQUFFMEIsR0FBRyxHQUFJbEIsR0FBRXpJLEVBQUUwbEIsRUFBRTljLEVBQUU2ZCxFQUFFOWIsS0FBS29iLHFCQUFxQjlkLEVBQUcsS0FBSXlkLElBQUtlLEdBQUUsR0FBR0EsRUFBRWpjLGVBQWVrYixHQUFHLElBQUkxbEIsRUFBRXltQixFQUFFZixHQUFHempCLE9BQU9qQyxLQUFLeUksRUFBRWdlLEVBQUVmLEdBQUcxbEIsR0FBR3lJLEVBQUV3ZCxRQUFPLEdBQUl0YixLQUFLMGIsZUFBZXBlLEVBQUVRLEVBQUVnZCxVQUFVN2MsRUFBRUgsRUFBRWdkLFNBQVMzYSxNQUFNSCxLQUFLaEIsT0FBT2YsSUFBSStCLEtBQUtrYyx1QkFBdUJsYyxLQUFLMGIsZUFBZXBlLEVBQUVRLEVBQUVnZCxTQUFVLE9BQU85YSxPQUFNM0ssRUFBRWlrQixRQUFReGIsRUFBRSxhQUFhekksRUFBRThtQixLQUFLLFNBQVM3ZSxHQUFHLEdBQUkwQixHQUFFeUMsTUFBTTFNLFVBQVU4SSxNQUFNNUksS0FBS2lMLFVBQVUsRUFBRyxPQUFPRixNQUFLaWMsVUFBVTNlLEVBQUUwQixJQUFJM0osRUFBRSttQixtQkFBbUIsU0FBUzllLEdBQUcsTUFBTzBDLE1BQUtxYyxpQkFBaUIvZSxFQUFFMEMsTUFBTTNLLEVBQUU2bUIsb0JBQW9CLFdBQVcsTUFBT2xjLE1BQUtILGVBQWUsb0JBQW9CRyxLQUFLcWMsa0JBQWlCLEdBQUlobkIsRUFBRTZsQixXQUFXLFdBQVcsTUFBT2xiLE1BQUsrYixVQUFVL2IsS0FBSytiLGFBQWF6ZSxFQUFFZ2YsV0FBVyxXQUFXLE1BQU92QixHQUFFQyxhQUFhL2MsRUFBRVgsR0FBRyxrQkFBbUJpZixTQUFRQSxPQUFPQyxJQUFJRCxPQUFPLCtCQUErQixXQUFXLE1BQU9qZixLQUFJLGdCQUFpQm1mLFNBQVFBLE9BQU9DLFFBQVFELE9BQU9DLFFBQVFwZixFQUFFMEMsS0FBS2diLGFBQWExZCxHQUFJckksS0FBSytLLE1BQU0sU0FBUzFDLEdBQUcsUUFBUzBCLEdBQUVBLEdBQUcsR0FBSWxCLEdBQUVSLEVBQUU2WSxLQUFNLE9BQU9yWSxHQUFFekYsT0FBT3lGLEVBQUV6RixRQUFReUYsRUFBRXlZLFlBQVl2WCxFQUFFbEIsRUFBRSxHQUFJQSxHQUFFcEksU0FBUzJJLGdCQUFnQmhKLEVBQUUsWUFBYXlJLEdBQUU5SCxpQkFBaUJYLEVBQUUsU0FBU2lJLEVBQUUwQixFQUFFbEIsR0FBR1IsRUFBRXRILGlCQUFpQmdKLEVBQUVsQixHQUFFLElBQUtBLEVBQUU3SCxjQUFjWixFQUFFLFNBQVNpSSxFQUFFUSxFQUFFekksR0FBR2lJLEVBQUVRLEVBQUV6SSxHQUFHQSxFQUFFc25CLFlBQVksV0FBVyxHQUFJN2UsR0FBRWtCLEVBQUUxQixFQUFHakksR0FBRXNuQixZQUFZMW5CLEtBQUtJLEVBQUV5SSxJQUFJLFdBQVcsR0FBSUEsR0FBRWtCLEVBQUUxQixFQUFHakksR0FBRUosS0FBS3FJLEVBQUVRLElBQUlSLEVBQUVySCxZQUFZLEtBQUs2SCxFQUFFUixFQUFFUSxFQUFFekksS0FBTSxJQUFJMGxCLEdBQUUsWUFBYWpkLEdBQUUxSCxvQkFBb0Iya0IsRUFBRSxTQUFTemQsRUFBRTBCLEVBQUVsQixHQUFHUixFQUFFbEgsb0JBQW9CNEksRUFBRWxCLEdBQUUsSUFBS0EsRUFBRXpILGNBQWMwa0IsRUFBRSxTQUFTemQsRUFBRTBCLEVBQUVsQixHQUFHUixFQUFFakgsWUFBWSxLQUFLMkksRUFBRTFCLEVBQUUwQixFQUFFbEIsR0FBSSxXQUFXUixHQUFFMEIsRUFBRWxCLEdBQUcsTUFBTXpJLEdBQUdpSSxFQUFFMEIsRUFBRWxCLEdBQUcsU0FBVSxJQUFJRyxJQUFHUixLQUFLcEksRUFBRXVuQixPQUFPN0IsRUFBRyxtQkFBbUJ3QixTQUFRQSxPQUFPQyxJQUFJRCxPQUFPLGtCQUFrQnRlLEdBQUdYLEVBQUV1ZixRQUFRNWUsR0FBRytCLE1BQU0sU0FBUzFDLEVBQUUwQixHQUFHLGtCQUFtQnVkLFNBQVFBLE9BQU9DLElBQUlELFFBQVEsNEJBQTRCLG1CQUFtQixTQUFTemUsRUFBRXpJLEdBQUcsTUFBTzJKLEdBQUUxQixFQUFFUSxFQUFFekksS0FBSyxnQkFBaUJxbkIsU0FBUUQsT0FBT0MsUUFBUTFkLEVBQUUxQixFQUFFd2YsUUFBUSxnQkFBZ0JBLFFBQVEsWUFBWXhmLEVBQUVqSixhQUFhMkssRUFBRTFCLEVBQUVBLEVBQUUwZCxhQUFhMWQsRUFBRXVmLFVBQVU3YyxLQUFLLFNBQVMxQyxFQUFFMEIsRUFBRWxCLEdBQUcsUUFBU3pJLEdBQUVpSSxFQUFFMEIsR0FBRyxJQUFJLEdBQUlsQixLQUFLa0IsR0FBRTFCLEVBQUVRLEdBQUdrQixFQUFFbEIsRUFBRyxPQUFPUixHQUFFLFFBQVN5ZCxHQUFFemQsR0FBRyxNQUFNLG1CQUFtQkQsRUFBRXBJLEtBQUtxSSxHQUFHLFFBQVNXLEdBQUVYLEdBQUcsR0FBSTBCLEtBQUssSUFBRytiLEVBQUV6ZCxHQUFHMEIsRUFBRTFCLE1BQU8sSUFBRyxnQkFBaUJBLEdBQUVoRyxPQUFPLElBQUksR0FBSXdHLEdBQUUsRUFBRXpJLEVBQUVpSSxFQUFFaEcsT0FBT2pDLEVBQUV5SSxFQUFFQSxJQUFJa0IsRUFBRTZCLEtBQUt2RCxFQUFFUSxRQUFTa0IsR0FBRTZCLEtBQUt2RCxFQUFHLE9BQU8wQixHQUFFLFFBQVM4YyxHQUFFeGUsRUFBRTBCLEVBQUVsQixHQUFHLEtBQUtrQyxlQUFnQjhiLElBQUcsTUFBTyxJQUFJQSxHQUFFeGUsRUFBRTBCLEVBQUcsaUJBQWlCMUIsS0FBSUEsRUFBRTVILFNBQVNtTixpQkFBaUJ2RixJQUFJMEMsS0FBSzVJLFNBQVM2RyxFQUFFWCxHQUFHMEMsS0FBS3JMLFFBQVFVLEtBQUsySyxLQUFLckwsU0FBUyxrQkFBbUJxSyxHQUFFbEIsRUFBRWtCLEVBQUUzSixFQUFFMkssS0FBS3JMLFFBQVFxSyxHQUFHbEIsR0FBR2tDLEtBQUt5UyxHQUFHLFNBQVMzVSxHQUFHa0MsS0FBSytjLFlBQVk1bkIsSUFBSTZLLEtBQUtnZCxXQUFXLEdBQUk3bkIsR0FBRThuQixTQUFVLElBQUlsQyxHQUFFL2EsSUFBS3lELFlBQVcsV0FBV3NYLEVBQUVtQyxVQUFVLFFBQVNuZ0IsR0FBRU8sR0FBRzBDLEtBQUs4UyxJQUFJeFYsRUFBRSxRQUFTRSxHQUFFRixHQUFHMEMsS0FBSytTLElBQUl6VixFQUFFYSxFQUFFYixHQUFHMEMsS0FBSyxHQUFJN0ssR0FBRW1JLEVBQUU2ZixPQUFPbGUsRUFBRTNCLEVBQUV5YixRQUFReGEsRUFBTSxTQUFKVSxFQUFXNUIsRUFBRXZJLE9BQU9DLFVBQVVDLFFBQVM4bUIsR0FBRS9tQixVQUFVLEdBQUlpSyxHQUFFOGMsRUFBRS9tQixVQUFVSixXQUFXbW5CLEVBQUUvbUIsVUFBVWdvQixVQUFVLFdBQVcvYyxLQUFLb2QsU0FBVSxLQUFJLEdBQUk5ZixHQUFFLEVBQUUwQixFQUFFZ0IsS0FBSzVJLFNBQVNFLE9BQU8wSCxFQUFFMUIsRUFBRUEsSUFBSSxDQUFDLEdBQUlRLEdBQUVrQyxLQUFLNUksU0FBU2tHLEVBQUcsSUFBRyxRQUFRUSxFQUFFdkYsVUFBVXlILEtBQUtxZCxTQUFTdmYsR0FBR0EsRUFBRXdSLFdBQVcsSUFBSXhSLEVBQUV3UixVQUFVLElBQUl4UixFQUFFd1IsVUFBVSxJQUFJLEdBQUlqYSxHQUFFeUksRUFBRStFLGlCQUFpQixPQUFPa1ksRUFBRSxFQUFFOWMsRUFBRTVJLEVBQUVpQyxPQUFPMkcsRUFBRThjLEVBQUVBLElBQUksQ0FBQyxHQUFJZSxHQUFFem1CLEVBQUUwbEIsRUFBRy9hLE1BQUtxZCxTQUFTdkIsTUFBTUEsRUFBRS9tQixVQUFVc29CLFNBQVMsU0FBUy9mLEdBQUcsR0FBSTBCLEdBQUUsR0FBSWpDLEdBQUVPLEVBQUcwQyxNQUFLb2QsT0FBT3ZjLEtBQUs3QixJQUFJOGMsRUFBRS9tQixVQUFVbW9CLE1BQU0sV0FBVyxRQUFTNWYsR0FBRUEsRUFBRXlkLEdBQUcsTUFBTy9iLEdBQUVySyxRQUFRMm9CLE9BQU8vZSxHQUFHVSxFQUFFK1osSUFBSSxVQUFVMWIsRUFBRXlkLEdBQUcvYixFQUFFa1QsU0FBUzVVLEdBQUdRLElBQUlBLElBQUl6SSxHQUFHMkosRUFBRTBULFlBQVcsRUFBRyxHQUFJMVQsR0FBRWdCLEtBQUtsQyxFQUFFLEVBQUV6SSxFQUFFMkssS0FBS29kLE9BQU85bEIsTUFBTyxJQUFHMEksS0FBS3VkLGNBQWEsR0FBSWxvQixFQUFFLFdBQU8ySyxNQUFLMFMsVUFBa0IsS0FBSSxHQUFJcUksR0FBRSxFQUFFMWxCLEVBQUUwbEIsRUFBRUEsSUFBSSxDQUFDLEdBQUk5YyxHQUFFK0IsS0FBS29kLE9BQU9yQyxFQUFHOWMsR0FBRXdVLEdBQUcsVUFBVW5WLEdBQUdXLEVBQUVpZixVQUFVcEIsRUFBRS9tQixVQUFVbWQsU0FBUyxTQUFTNVUsR0FBRzBDLEtBQUt1ZCxhQUFhdmQsS0FBS3VkLGVBQWVqZ0IsRUFBRXNWLFFBQVMsSUFBSTVULEdBQUVnQixJQUFLeUQsWUFBVyxXQUFXekUsRUFBRW1kLEtBQUssV0FBV25kLEVBQUUxQixHQUFHMEIsRUFBRWdlLFlBQVloZSxFQUFFZ2UsV0FBV1EsUUFBUXhlLEVBQUVnZSxXQUFXUSxPQUFPeGUsRUFBRTFCLE1BQU13ZSxFQUFFL21CLFVBQVUyZCxTQUFTLFdBQVcsR0FBSXBWLEdBQUUwQyxLQUFLdWQsYUFBYSxPQUFPLE1BQU92ZCxNQUFLeWQsWUFBVyxDQUFHLElBQUl6ZSxHQUFFZ0IsSUFBS3lELFlBQVcsV0FBVyxHQUFHekUsRUFBRW1kLEtBQUs3ZSxFQUFFMEIsR0FBR0EsRUFBRW1kLEtBQUssU0FBU25kLEdBQUdBLEVBQUVnZSxXQUFXLENBQUMsR0FBSWxmLEdBQUVrQixFQUFFdWUsYUFBYSxTQUFTLFNBQVV2ZSxHQUFFZ2UsV0FBV2xmLEdBQUdrQixPQUFPN0osSUFBSUEsRUFBRXVvQixHQUFHcnBCLGFBQWEsU0FBU2lKLEVBQUUwQixHQUFHLEdBQUlsQixHQUFFLEdBQUlnZSxHQUFFOWIsS0FBSzFDLEVBQUUwQixFQUFHLE9BQU9sQixHQUFFa2YsV0FBV1csUUFBUXhvQixFQUFFNkssU0FBU2pELEVBQUVoSSxVQUFVLEdBQUlpSyxHQUFFakMsRUFBRWhJLFVBQVVtb0IsTUFBTSxXQUFXLEdBQUk1ZixHQUFFYSxFQUFFNkIsS0FBSzhTLElBQUlDLE1BQU0sR0FBSXZWLEdBQUV3QyxLQUFLOFMsSUFBSUMsSUFBSyxJQUFHelYsRUFBRXNnQixZQUFZLFdBQU81ZCxNQUFLNmQsUUFBUXZnQixFQUFFc1YsU0FBUyx1QkFBK0IsSUFBRzVTLEtBQUs4UyxJQUFJSixVQUFVLFNBQVMxUyxLQUFLOFMsSUFBSWdMLGFBQWEsV0FBTzlkLE1BQUs2ZCxRQUFRLElBQUk3ZCxLQUFLOFMsSUFBSWdMLGFBQWEsZUFBdUIsSUFBSTllLEdBQUVnQixJQUFLMUMsR0FBRW1WLEdBQUcsVUFBVSxTQUFTblYsRUFBRVEsR0FBRyxNQUFPa0IsR0FBRTZlLFFBQVF2Z0IsRUFBRXNWLFNBQVM5VSxJQUFHLElBQUtSLEVBQUU0ZixTQUFTbmdCLEVBQUVoSSxVQUFVOG9CLFFBQVEsU0FBU3ZnQixFQUFFMEIsR0FBR2dCLEtBQUs0UyxTQUFTdFYsRUFBRTBDLEtBQUttYyxLQUFLLFVBQVVuYyxLQUFLaEIsR0FBSSxJQUFJYixLQUFLLE9BQU9YLEdBQUV6SSxVQUFVLEdBQUlpSyxHQUFFeEIsRUFBRXpJLFVBQVVtb0IsTUFBTSxXQUFXLElBQUlsZCxLQUFLK2QsVUFBVSxDQUFDLEdBQUl6Z0IsR0FBRSxHQUFJMlcsTUFBTW5XLEdBQUVMLEtBQUtILEVBQUUsT0FBTzBDLE1BQU1sQyxFQUFFTCxLQUFLSCxFQUFFLFFBQVEwQyxNQUFNMUMsRUFBRXlWLElBQUkvUyxLQUFLK1MsSUFBSS9TLEtBQUsrZCxXQUFVLElBQUt2Z0IsRUFBRXpJLFVBQVU0bkIsWUFBWSxTQUFTcmYsR0FBRyxHQUFJMEIsR0FBRSxLQUFLMUIsRUFBRW1GLElBQUt6QyxNQUFLaEIsSUFBSWdCLEtBQUtoQixHQUFHMUIsSUFBSUUsRUFBRXpJLFVBQVVpcEIsT0FBTyxTQUFTMWdCLEdBQUcwQyxLQUFLNmQsU0FBUSxFQUFHLFVBQVU3ZCxLQUFLaWUsa0JBQWtCM2dCLElBQUlFLEVBQUV6SSxVQUFVbXBCLFFBQVEsU0FBUzVnQixHQUFHMEMsS0FBSzZkLFNBQVEsRUFBRyxXQUFXN2QsS0FBS2llLGtCQUFrQjNnQixJQUFJRSxFQUFFekksVUFBVThvQixRQUFRLFNBQVN2Z0IsRUFBRTBCLEdBQUdnQixLQUFLNGQsYUFBWSxFQUFHNWQsS0FBSzRTLFNBQVN0VixFQUFFMEMsS0FBS21jLEtBQUssVUFBVW5jLEtBQUtoQixJQUFJeEIsRUFBRXpJLFVBQVVrcEIsa0JBQWtCLFNBQVMzZ0IsR0FBR1EsRUFBRThlLE9BQU90ZixFQUFFakYsT0FBTyxPQUFPMkgsTUFBTWxDLEVBQUU4ZSxPQUFPdGYsRUFBRWpGLE9BQU8sUUFBUTJILE9BQU84YixJQU9ucU4sV0FDQyxZQU1BLFNBQVNxQyxHQUFTeHBCLEdBQ2hCLElBQUtBLEVBQ0gsS0FBTSxJQUFJeXBCLE9BQU0sNENBRWxCLEtBQUt6cEIsRUFBUUQsUUFDWCxLQUFNLElBQUkwcEIsT0FBTSxtREFFbEIsS0FBS3pwQixFQUFRb0IsUUFDWCxLQUFNLElBQUlxb0IsT0FBTSxtREFHbEJwZSxNQUFLcWUsSUFBTSxZQUFjQyxFQUN6QnRlLEtBQUtyTCxRQUFVd3BCLEVBQVNJLFFBQVFycEIsVUFBV2lwQixFQUFTcGtCLFNBQVVwRixHQUM5RHFMLEtBQUt0TCxRQUFVc0wsS0FBS3JMLFFBQVFELFFBQzVCc0wsS0FBS3dlLFFBQVUsR0FBSUwsR0FBU0ksUUFBUXZlLEtBQUt0TCxTQUN6Q3NMLEtBQUt1RCxTQUFXNU8sRUFBUW9CLFFBQ3hCaUssS0FBS3llLEtBQU96ZSxLQUFLckwsUUFBUStwQixXQUFhLGFBQWUsV0FDckQxZSxLQUFLMmUsUUFBVTNlLEtBQUtyTCxRQUFRZ3FCLFFBQzVCM2UsS0FBSzRlLGFBQWUsS0FDcEI1ZSxLQUFLNmUsTUFBUVYsRUFBU1csTUFBTUMsY0FDMUJqb0IsS0FBTWtKLEtBQUtyTCxRQUFRa3FCLE1BQ25CSixLQUFNemUsS0FBS3llLE9BRWJ6ZSxLQUFLZ2YsUUFBVWIsRUFBU2MsUUFBUUMsc0JBQXNCbGYsS0FBS3JMLFFBQVFxcUIsU0FFL0RiLEVBQVNnQixjQUFjbmYsS0FBS3JMLFFBQVF5cUIsVUFDdENwZixLQUFLckwsUUFBUXlxQixPQUFTakIsRUFBU2dCLGNBQWNuZixLQUFLckwsUUFBUXlxQixTQUU1RHBmLEtBQUs2ZSxNQUFNL0osSUFBSTlVLE1BQ2ZBLEtBQUtnZixRQUFRbEssSUFBSTlVLE1BQ2pCcWYsRUFBYXJmLEtBQUtxZSxLQUFPcmUsS0FDekJzZSxHQUFjLEVBbkNoQixHQUFJQSxHQUFhLEVBQ2JlLElBc0NKbEIsR0FBU3BwQixVQUFVdXFCLGFBQWUsU0FBU3pULEdBQ3pDN0wsS0FBSzZlLE1BQU1TLGFBQWF0ZixLQUFNNkwsSUFJaENzUyxFQUFTcHBCLFVBQVV1a0IsUUFBVSxTQUFTaUcsR0FDL0J2ZixLQUFLMmUsU0FHTjNlLEtBQUt1RCxVQUNQdkQsS0FBS3VELFNBQVNwRCxNQUFNSCxLQUFNdWYsSUFNOUJwQixFQUFTcHBCLFVBQVV3aUIsUUFBVSxXQUMzQnZYLEtBQUtnZixRQUFRbkosT0FBTzdWLE1BQ3BCQSxLQUFLNmUsTUFBTWhKLE9BQU83VixZQUNYcWYsR0FBYXJmLEtBQUtxZSxNQUszQkYsRUFBU3BwQixVQUFVeXFCLFFBQVUsV0FFM0IsTUFEQXhmLE1BQUsyZSxTQUFVLEVBQ1IzZSxNQUtUbWUsRUFBU3BwQixVQUFVMHFCLE9BQVMsV0FHMUIsTUFGQXpmLE1BQUtnZixRQUFRVSxVQUNiMWYsS0FBSzJlLFNBQVUsRUFDUjNlLE1BS1RtZSxFQUFTcHBCLFVBQVVtSCxLQUFPLFdBQ3hCLE1BQU84RCxNQUFLNmUsTUFBTTNpQixLQUFLOEQsT0FLekJtZSxFQUFTcHBCLFVBQVU0cUIsU0FBVyxXQUM1QixNQUFPM2YsTUFBSzZlLE1BQU1jLFNBQVMzZixPQUk3Qm1lLEVBQVN5QixVQUFZLFNBQVNDLEdBQzVCLEdBQUlDLEtBQ0osS0FBSyxHQUFJQyxLQUFlVixHQUN0QlMsRUFBa0JqZixLQUFLd2UsRUFBYVUsR0FFdEMsS0FBSyxHQUFJMXFCLEdBQUksRUFBRzJxQixFQUFNRixFQUFrQnhvQixPQUFZMG9CLEVBQUozcUIsRUFBU0EsSUFDdkR5cUIsRUFBa0J6cUIsR0FBR3dxQixNQU16QjFCLEVBQVM4QixXQUFhLFdBQ3BCOUIsRUFBU3lCLFVBQVUsWUFLckJ6QixFQUFTK0IsV0FBYSxXQUNwQi9CLEVBQVN5QixVQUFVLFlBS3JCekIsRUFBU2dDLFVBQVksV0FDbkJoQyxFQUFTeUIsVUFBVSxXQUtyQnpCLEVBQVNpQyxXQUFhLFdBQ3BCakMsRUFBU2MsUUFBUW1CLGNBS25CakMsRUFBU2tDLGVBQWlCLFdBQ3hCLE1BQU83ZSxRQUFPOGUsYUFBZTVxQixTQUFTMkksZ0JBQWdCa2lCLGNBS3hEcEMsRUFBU3FDLGNBQWdCLFdBQ3ZCLE1BQU85cUIsVUFBUzJJLGdCQUFnQm9pQixhQUdsQ3RDLEVBQVN1QyxZQUVUdkMsRUFBU3BrQixVQUNQaWxCLFFBQVN4ZCxPQUNUbWYsWUFBWSxFQUNaaEMsU0FBUyxFQUNURSxNQUFPLFVBQ1BILFlBQVksRUFDWlUsT0FBUSxHQUdWakIsRUFBU2dCLGVBQ1B5QixpQkFBa0IsV0FDaEIsTUFBTzVnQixNQUFLZ2YsUUFBUXNCLGNBQWdCdGdCLEtBQUt3ZSxRQUFRcUMsZUFFbkRDLGdCQUFpQixXQUNmLE1BQU85Z0IsTUFBS2dmLFFBQVErQixhQUFlL2dCLEtBQUt3ZSxRQUFRd0MsZUFJcER4ZixPQUFPMmMsU0FBV0EsS0FFbEIsV0FDQSxZQUVBLFNBQVM4QyxHQUEwQjFkLEdBQ2pDL0IsT0FBT2lDLFdBQVdGLEVBQVUsSUFBTyxJQVNyQyxRQUFTMGIsR0FBUXZxQixHQUNmc0wsS0FBS3RMLFFBQVVBLEVBQ2ZzTCxLQUFLdWUsUUFBVUosRUFBU0ksUUFDeEJ2ZSxLQUFLd2UsUUFBVSxHQUFJeGUsTUFBS3VlLFFBQVE3cEIsR0FDaENzTCxLQUFLcWUsSUFBTSxvQkFBc0JDLEVBQ2pDdGUsS0FBS2toQixXQUFZLEVBQ2pCbGhCLEtBQUttaEIsV0FBWSxFQUNqQm5oQixLQUFLb2hCLFdBQ0h4aEIsRUFBR0ksS0FBS3dlLFFBQVE2QyxhQUNoQmpqQixFQUFHNEIsS0FBS3dlLFFBQVE4QyxhQUVsQnRoQixLQUFLdWhCLFdBQ0hDLFlBQ0E5QyxlQUdGaHFCLEVBQVErc0IsbUJBQXFCemhCLEtBQUtxZSxJQUNsQ3FELEVBQVNodEIsRUFBUStzQixvQkFBc0J6aEIsS0FDdkNzZSxHQUFjLEVBRWR0ZSxLQUFLMmhCLCtCQUNMM2hCLEtBQUs0aEIsK0JBM0JQLEdBQUl0RCxHQUFhLEVBQ2JvRCxLQUNBdkQsRUFBVzNjLE9BQU8yYyxTQUNsQjBELEVBQWdCcmdCLE9BQU93YyxNQTRCM0JpQixHQUFRbHFCLFVBQVUrZixJQUFNLFNBQVNnTixHQUMvQixHQUFJckQsR0FBT3FELEVBQVNudEIsUUFBUStwQixXQUFhLGFBQWUsVUFDeEQxZSxNQUFLdWhCLFVBQVU5QyxHQUFNcUQsRUFBU3pELEtBQU95RCxFQUNyQzloQixLQUFLMGYsV0FJUFQsRUFBUWxxQixVQUFVZ3RCLFdBQWEsV0FDN0IsR0FBSUMsR0FBa0JoaUIsS0FBS3VlLFFBQVEwRCxjQUFjamlCLEtBQUt1aEIsVUFBVTdDLFlBQzVEd0QsRUFBZ0JsaUIsS0FBS3VlLFFBQVEwRCxjQUFjamlCLEtBQUt1aEIsVUFBVUMsU0FDMURRLElBQW1CRSxJQUNyQmxpQixLQUFLd2UsUUFBUXhJLElBQUksb0JBQ1YwTCxHQUFTMWhCLEtBQUtxZSxPQUt6QlksRUFBUWxxQixVQUFVNnNCLDZCQUErQixXQUcvQyxRQUFTTyxLQUNQL2YsRUFBS2dnQixlQUNMaGdCLEVBQUsrZSxXQUFZLEVBSm5CLEdBQUkvZSxHQUFPcEMsSUFPWEEsTUFBS3dlLFFBQVEvTCxHQUFHLG1CQUFvQixXQUM3QnJRLEVBQUsrZSxZQUNSL2UsRUFBSytlLFdBQVksRUFDakJoRCxFQUFTa0Usc0JBQXNCRixPQU1yQ2xELEVBQVFscUIsVUFBVTRzQiw2QkFBK0IsV0FFL0MsUUFBU1csS0FDUGxnQixFQUFLbWdCLGVBQ0xuZ0IsRUFBSzhlLFdBQVksRUFIbkIsR0FBSTllLEdBQU9wQyxJQU1YQSxNQUFLd2UsUUFBUS9MLEdBQUcsbUJBQW9CLGFBQzdCclEsRUFBSzhlLFdBQWEvQyxFQUFTcUUsV0FDOUJwZ0IsRUFBSzhlLFdBQVksRUFDakIvQyxFQUFTa0Usc0JBQXNCQyxPQU1yQ3JELEVBQVFscUIsVUFBVXF0QixhQUFlLFdBQy9CakUsRUFBU2MsUUFBUW1CLGNBSW5CbkIsRUFBUWxxQixVQUFVd3RCLGFBQWUsV0FDL0IsR0FBSUUsTUFDQUMsR0FDRmhFLFlBQ0VpRSxVQUFXM2lCLEtBQUt3ZSxRQUFRNkMsYUFDeEJELFVBQVdwaEIsS0FBS29oQixVQUFVeGhCLEVBQzFCK0ssUUFBUyxRQUNUaVksU0FBVSxRQUVacEIsVUFDRW1CLFVBQVczaUIsS0FBS3dlLFFBQVE4QyxZQUN4QkYsVUFBV3BoQixLQUFLb2hCLFVBQVVoakIsRUFDMUJ1TSxRQUFTLE9BQ1RpWSxTQUFVLE1BSWQsS0FBSyxHQUFJQyxLQUFXSCxHQUFNLENBQ3hCLEdBQUlqRSxHQUFPaUUsRUFBS0csR0FDWkMsRUFBWXJFLEVBQUtrRSxVQUFZbEUsRUFBSzJDLFVBQ2xDdlYsRUFBWWlYLEVBQVlyRSxFQUFLOVQsUUFBVThULEVBQUttRSxRQUVoRCxLQUFLLEdBQUk3QyxLQUFlL2YsTUFBS3VoQixVQUFVc0IsR0FBVSxDQUMvQyxHQUFJZixHQUFXOWhCLEtBQUt1aEIsVUFBVXNCLEdBQVM5QyxHQUNuQ2dELEVBQXdCdEUsRUFBSzJDLFVBQVlVLEVBQVNsRCxhQUNsRG9FLEVBQXVCdkUsRUFBS2tFLFdBQWFiLEVBQVNsRCxhQUNsRHFFLEVBQWlCRixHQUF5QkMsRUFDMUNFLEdBQW1CSCxJQUEwQkMsR0FDN0NDLEdBQWtCQyxLQUNwQnBCLEVBQVN4QyxhQUFhelQsR0FDdEI0VyxFQUFnQlgsRUFBU2pELE1BQU12ZixJQUFNd2lCLEVBQVNqRCxRQUtwRCxJQUFLLEdBQUlzRSxLQUFZVixHQUNuQkEsRUFBZ0JVLEdBQVVDLGVBRzVCcGpCLE1BQUtvaEIsV0FDSHhoQixFQUFHOGlCLEVBQUtoRSxXQUFXaUUsVUFDbkJ2a0IsRUFBR3NrQixFQUFLbEIsU0FBU21CLFlBS3JCMUQsRUFBUWxxQixVQUFVdXJCLFlBQWMsV0FFOUIsTUFBSXRnQixNQUFLdEwsU0FBV3NMLEtBQUt0TCxRQUFROE0sT0FDeEIyYyxFQUFTa0MsaUJBR1hyZ0IsS0FBS3dlLFFBQVE4QixlQUl0QnJCLEVBQVFscUIsVUFBVThnQixPQUFTLFNBQVNpTSxTQUMzQjloQixNQUFLdWhCLFVBQVVPLEVBQVNyRCxNQUFNcUQsRUFBU3pELEtBQzlDcmUsS0FBSytoQixjQUlQOUMsRUFBUWxxQixVQUFVZ3NCLFdBQWEsV0FFN0IsTUFBSS9nQixNQUFLdEwsU0FBV3NMLEtBQUt0TCxRQUFROE0sT0FDeEIyYyxFQUFTcUMsZ0JBR1h4Z0IsS0FBS3dlLFFBQVF1QyxjQUt0QjlCLEVBQVFscUIsVUFBVXdpQixRQUFVLFdBQzFCLEdBQUk4SCxLQUNKLEtBQUssR0FBSVosS0FBUXplLE1BQUt1aEIsVUFDcEIsSUFBSyxHQUFJeEIsS0FBZS9mLE1BQUt1aEIsVUFBVTlDLEdBQ3JDWSxFQUFheGUsS0FBS2IsS0FBS3VoQixVQUFVOUMsR0FBTXNCLEdBRzNDLEtBQUssR0FBSTFxQixHQUFJLEVBQUcycUIsRUFBTVgsRUFBYS9uQixPQUFZMG9CLEVBQUozcUIsRUFBU0EsSUFDbERncUIsRUFBYWhxQixHQUFHa2lCLFdBTXBCMEgsRUFBUWxxQixVQUFVMnFCLFFBQVUsV0FFMUIsR0FJSWdELEdBSkFXLEVBQVdyakIsS0FBS3RMLFNBQVdzTCxLQUFLdEwsUUFBUThNLE9BRXhDOGhCLEVBQWdCRCxFQUFXdHNCLE9BQVlpSixLQUFLd2UsUUFBUVksU0FDcERxRCxJQUdKemlCLE1BQUt1aUIsZUFDTEcsR0FDRWhFLFlBQ0U0RSxjQUFlRCxFQUFXLEVBQUlDLEVBQWN4ckIsS0FDNUN5ckIsY0FBZUYsRUFBVyxFQUFJcmpCLEtBQUtvaEIsVUFBVXhoQixFQUM3QzRqQixpQkFBa0J4akIsS0FBSytnQixhQUN2QkssVUFBV3BoQixLQUFLb2hCLFVBQVV4aEIsRUFDMUIrSyxRQUFTLFFBQ1RpWSxTQUFVLE9BQ1ZhLFdBQVksUUFFZGpDLFVBQ0U4QixjQUFlRCxFQUFXLEVBQUlDLEVBQWNyckIsSUFDNUNzckIsY0FBZUYsRUFBVyxFQUFJcmpCLEtBQUtvaEIsVUFBVWhqQixFQUM3Q29sQixpQkFBa0J4akIsS0FBS3NnQixjQUN2QmMsVUFBV3BoQixLQUFLb2hCLFVBQVVoakIsRUFDMUJ1TSxRQUFTLE9BQ1RpWSxTQUFVLEtBQ1ZhLFdBQVksT0FJaEIsS0FBSyxHQUFJWixLQUFXSCxHQUFNLENBQ3hCLEdBQUlqRSxHQUFPaUUsRUFBS0csRUFDaEIsS0FBSyxHQUFJOUMsS0FBZS9mLE1BQUt1aEIsVUFBVXNCLEdBQVUsQ0FDL0MsR0FLSWEsR0FBaUJDLEVBQWlCQyxFQUNsQ0MsRUFBbUJDLEVBTm5CaEMsRUFBVzloQixLQUFLdWhCLFVBQVVzQixHQUFTOUMsR0FDbkNnRSxFQUFhakMsRUFBU250QixRQUFReXFCLE9BQzlCNEUsRUFBa0JsQyxFQUFTbEQsYUFDM0JxRixFQUFnQixFQUNoQkMsRUFBbUMsTUFBbkJGLENBSWhCbEMsR0FBU3B0QixVQUFZb3RCLEVBQVNwdEIsUUFBUThNLFNBQ3hDeWlCLEVBQWdCbkMsRUFBU3RELFFBQVFZLFNBQVNYLEVBQUtnRixhQUd2QixrQkFBZk0sR0FDVEEsRUFBYUEsRUFBVzVqQixNQUFNMmhCLEdBRUQsZ0JBQWZpQyxLQUNkQSxFQUFhcHRCLFdBQVdvdEIsR0FDcEJqQyxFQUFTbnRCLFFBQVF5cUIsT0FBTzFvQixRQUFRLEtBQU8sS0FDekNxdEIsRUFBYW5pQixLQUFLdWlCLEtBQUsxRixFQUFLK0UsaUJBQW1CTyxFQUFhLE9BSWhFTCxFQUFrQmpGLEVBQUs4RSxjQUFnQjlFLEVBQUs2RSxjQUM1Q3hCLEVBQVNsRCxhQUFlcUYsRUFBZ0JQLEVBQWtCSyxFQUMxREosRUFBa0JLLEVBQWtCdkYsRUFBSzJDLFVBQ3pDd0MsRUFBaUI5QixFQUFTbEQsY0FBZ0JILEVBQUsyQyxVQUMvQ3lDLEVBQW9CRixHQUFtQkMsRUFDdkNFLEdBQW9CSCxJQUFvQkMsR0FFbkNNLEdBQWlCTCxHQUNwQi9CLEVBQVN4QyxhQUFhYixFQUFLbUUsVUFDM0JILEVBQWdCWCxFQUFTakQsTUFBTXZmLElBQU13aUIsRUFBU2pELFFBRXRDcUYsR0FBaUJKLEdBQ3pCaEMsRUFBU3hDLGFBQWFiLEVBQUs5VCxTQUMzQjhYLEVBQWdCWCxFQUFTakQsTUFBTXZmLElBQU13aUIsRUFBU2pELE9BRXZDcUYsR0FBaUJ6RixFQUFLMkMsV0FBYVUsRUFBU2xELGVBQ25Ea0QsRUFBU3hDLGFBQWFiLEVBQUs5VCxTQUMzQjhYLEVBQWdCWCxFQUFTakQsTUFBTXZmLElBQU13aUIsRUFBU2pELFFBV3BELE1BTkFWLEdBQVNrRSxzQkFBc0IsV0FDN0IsSUFBSyxHQUFJYyxLQUFZVixHQUNuQkEsRUFBZ0JVLEdBQVVDLGtCQUl2QnBqQixNQUlUaWYsRUFBUUMsc0JBQXdCLFNBQVN4cUIsR0FDdkMsTUFBT3VxQixHQUFRbUYsY0FBYzF2QixJQUFZLEdBQUl1cUIsR0FBUXZxQixJQUl2RHVxQixFQUFRbUIsV0FBYSxXQUNuQixJQUFLLEdBQUlpRSxLQUFhM0MsR0FDcEJBLEVBQVMyQyxHQUFXM0UsV0FNeEJULEVBQVFtRixjQUFnQixTQUFTMXZCLEdBQy9CLE1BQU9ndEIsR0FBU2h0QixFQUFRK3NCLHFCQUcxQmpnQixPQUFPd2MsT0FBUyxXQUNWNkQsR0FDRkEsSUFFRjVDLEVBQVFtQixjQUdWakMsRUFBU2tFLHNCQUF3QixTQUFTOWUsR0FDeEMsR0FBSStnQixHQUFZOWlCLE9BQU82Z0IsdUJBQ3JCN2dCLE9BQU8raUIsMEJBQ1AvaUIsT0FBT2dqQiw2QkFDUHZELENBQ0ZxRCxHQUFVcnZCLEtBQUt1TSxPQUFRK0IsSUFFekI0YSxFQUFTYyxRQUFVQSxLQUVuQixXQUNBLFlBRUEsU0FBU3dGLEdBQWV0dkIsRUFBR0MsR0FDekIsTUFBT0QsR0FBRXlwQixhQUFleHBCLEVBQUV3cEIsYUFHNUIsUUFBUzhGLEdBQXNCdnZCLEVBQUdDLEdBQ2hDLE1BQU9BLEdBQUV3cEIsYUFBZXpwQixFQUFFeXBCLGFBVTVCLFFBQVNFLEdBQU1ucUIsR0FDYnFMLEtBQUtsSixLQUFPbkMsRUFBUW1DLEtBQ3BCa0osS0FBS3llLEtBQU85cEIsRUFBUThwQixLQUNwQnplLEtBQUtWLEdBQUtVLEtBQUtsSixLQUFPLElBQU1rSixLQUFLeWUsS0FDakN6ZSxLQUFLdWhCLGFBQ0x2aEIsS0FBSzJrQixxQkFDTEMsRUFBTzVrQixLQUFLeWUsTUFBTXplLEtBQUtsSixNQUFRa0osS0FiakMsR0FBSTRrQixJQUNGcEQsWUFDQTlDLGVBRUVQLEVBQVczYyxPQUFPMmMsUUFhdEJXLEdBQU0vcEIsVUFBVStmLElBQU0sU0FBU2dOLEdBQzdCOWhCLEtBQUt1aEIsVUFBVTFnQixLQUFLaWhCLElBSXRCaEQsRUFBTS9wQixVQUFVNHZCLG1CQUFxQixXQUNuQzNrQixLQUFLNmtCLGVBQ0g1ckIsTUFDQUMsUUFDQXBCLFFBQ0FDLFdBS0orbUIsRUFBTS9wQixVQUFVcXVCLGNBQWdCLFdBQzlCLElBQUssR0FBSXZYLEtBQWE3TCxNQUFLNmtCLGNBQWUsQ0FDeEMsR0FBSXRELEdBQVl2aEIsS0FBSzZrQixjQUFjaFosR0FDL0JYLEVBQXdCLE9BQWRXLEdBQW9DLFNBQWRBLENBQ3BDMFYsR0FBVXVELEtBQUs1WixFQUFVd1osRUFBd0JELEVBQ2pELEtBQUssR0FBSXB2QixHQUFJLEVBQUcycUIsRUFBTXVCLEVBQVVqcUIsT0FBWTBvQixFQUFKM3FCLEVBQVNBLEdBQUssRUFBRyxDQUN2RCxHQUFJeXNCLEdBQVdQLEVBQVVsc0IsSUFDckJ5c0IsRUFBU250QixRQUFRZ3NCLFlBQWN0ckIsSUFBTWtzQixFQUFVanFCLE9BQVMsSUFDMUR3cUIsRUFBU3hJLFNBQVN6TixLQUl4QjdMLEtBQUsya0Isc0JBSVA3RixFQUFNL3BCLFVBQVVtSCxLQUFPLFNBQVM0bEIsR0FDOUI5aEIsS0FBS3VoQixVQUFVdUQsS0FBS0wsRUFDcEIsSUFBSU0sR0FBUTVHLEVBQVNJLFFBQVF5RyxRQUFRbEQsRUFBVTloQixLQUFLdWhCLFdBQ2hEMEQsRUFBU0YsSUFBVS9rQixLQUFLdWhCLFVBQVVqcUIsT0FBUyxDQUMvQyxPQUFPMnRCLEdBQVMsS0FBT2psQixLQUFLdWhCLFVBQVV3RCxFQUFRLElBSWhEakcsRUFBTS9wQixVQUFVNHFCLFNBQVcsU0FBU21DLEdBQ2xDOWhCLEtBQUt1aEIsVUFBVXVELEtBQUtMLEVBQ3BCLElBQUlNLEdBQVE1RyxFQUFTSSxRQUFReUcsUUFBUWxELEVBQVU5aEIsS0FBS3VoQixVQUNwRCxPQUFPd0QsR0FBUS9rQixLQUFLdWhCLFVBQVV3RCxFQUFRLEdBQUssTUFJN0NqRyxFQUFNL3BCLFVBQVV1cUIsYUFBZSxTQUFTd0MsRUFBVWpXLEdBQ2hEN0wsS0FBSzZrQixjQUFjaFosR0FBV2hMLEtBQUtpaEIsSUFJckNoRCxFQUFNL3BCLFVBQVU4Z0IsT0FBUyxTQUFTaU0sR0FDaEMsR0FBSWlELEdBQVE1RyxFQUFTSSxRQUFReUcsUUFBUWxELEVBQVU5aEIsS0FBS3VoQixVQUNoRHdELEdBQVEsSUFDVi9rQixLQUFLdWhCLFVBQVVsUSxPQUFPMFQsRUFBTyxJQU1qQ2pHLEVBQU0vcEIsVUFBVW13QixNQUFRLFdBQ3RCLE1BQU9sbEIsTUFBS3VoQixVQUFVLElBS3hCekMsRUFBTS9wQixVQUFVb3dCLEtBQU8sV0FDckIsTUFBT25sQixNQUFLdWhCLFVBQVV2aEIsS0FBS3VoQixVQUFVanFCLE9BQVMsSUFJaER3bkIsRUFBTUMsYUFBZSxTQUFTcHFCLEdBQzVCLE1BQU9pd0IsR0FBT2p3QixFQUFROHBCLE1BQU05cEIsRUFBUW1DLE9BQVMsR0FBSWdvQixHQUFNbnFCLElBR3pEd3BCLEVBQVNXLE1BQVFBLEtBRWpCLFdBQ0EsWUFJQSxTQUFTdUUsR0FBUzN1QixHQUNoQixNQUFPQSxLQUFZQSxFQUFROE0sT0FHN0IsUUFBUzRqQixHQUFVMXdCLEdBQ2pCLE1BQUkydUIsR0FBUzN1QixHQUNKQSxFQUVGQSxFQUFRaUIsWUFHakIsUUFBUzB2QixHQUFtQjN3QixHQUMxQnNMLEtBQUt0TCxRQUFVQSxFQUNmc0wsS0FBS3NsQixZQWZQLEdBQUluSCxHQUFXM2MsT0FBTzJjLFFBa0J0QmtILEdBQW1CdHdCLFVBQVV1ckIsWUFBYyxXQUN6QyxHQUFJaUYsR0FBUWxDLEVBQVNyakIsS0FBS3RMLFFBQzFCLE9BQU82d0IsR0FBUXZsQixLQUFLdEwsUUFBUTRyQixZQUFjdGdCLEtBQUt0TCxRQUFRNnJCLGNBR3pEOEUsRUFBbUJ0d0IsVUFBVWdzQixXQUFhLFdBQ3hDLEdBQUl3RSxHQUFRbEMsRUFBU3JqQixLQUFLdEwsUUFDMUIsT0FBTzZ3QixHQUFRdmxCLEtBQUt0TCxRQUFRcXNCLFdBQWEvZ0IsS0FBS3RMLFFBQVErckIsYUFHeEQ0RSxFQUFtQnR3QixVQUFVaWhCLElBQU0sU0FBU0csRUFBT3BnQixHQUNqRCxRQUFTOGxCLEdBQWdCbm5CLEVBQVM4d0IsRUFBV3p2QixHQUMzQyxJQUFLLEdBQUlWLEdBQUksRUFBRzJxQixFQUFNd0YsRUFBVWx1QixPQUFTLEVBQU8wb0IsRUFBSjNxQixFQUFTQSxJQUFLLENBQ3hELEdBQUl5bEIsR0FBVzBLLEVBQVVud0IsRUFDcEJVLElBQVdBLElBQVkra0IsR0FDMUJwbUIsRUFBUTBCLG9CQUFvQjBrQixJQUtsQyxHQUFJMkssR0FBYXRQLEVBQU1uWSxNQUFNLEtBQ3pCMlgsRUFBWThQLEVBQVcsR0FDdkJDLEVBQVlELEVBQVcsR0FDdkIvd0IsRUFBVXNMLEtBQUt0TCxPQUVuQixJQUFJZ3hCLEdBQWExbEIsS0FBS3NsQixTQUFTSSxJQUFjL1AsRUFDM0NrRyxFQUFnQm5uQixFQUFTc0wsS0FBS3NsQixTQUFTSSxHQUFXL1AsR0FBWTVmLEdBQzlEaUssS0FBS3NsQixTQUFTSSxHQUFXL1AsVUFFdEIsSUFBSUEsRUFDUCxJQUFLLEdBQUlnUSxLQUFNM2xCLE1BQUtzbEIsU0FDbEJ6SixFQUFnQm5uQixFQUFTc0wsS0FBS3NsQixTQUFTSyxHQUFJaFEsT0FBa0I1ZixHQUM3RGlLLEtBQUtzbEIsU0FBU0ssR0FBSWhRLFVBR2pCLElBQUkrUCxHQUFhMWxCLEtBQUtzbEIsU0FBU0ksR0FBWSxDQUM5QyxJQUFLLEdBQUlqakIsS0FBUXpDLE1BQUtzbEIsU0FBU0ksR0FDN0I3SixFQUFnQm5uQixFQUFTc0wsS0FBS3NsQixTQUFTSSxHQUFXampCLEdBQU8xTSxFQUUzRGlLLE1BQUtzbEIsU0FBU0ksUUFLbEJMLEVBQW1CdHdCLFVBQVVxcUIsT0FBUyxXQUNwQyxJQUFLcGYsS0FBS3RMLFFBQVFreEIsY0FDaEIsTUFBTyxLQUdULElBQUl2bkIsR0FBa0IyQixLQUFLdEwsUUFBUWt4QixjQUFjdm5CLGdCQUM3Q3duQixFQUFNVCxFQUFVcGxCLEtBQUt0TCxRQUFRa3hCLGVBQzdCbHVCLEdBQ0ZPLElBQUssRUFDTEgsS0FBTSxFQU9SLE9BSklrSSxNQUFLdEwsUUFBUWlELHdCQUNmRCxFQUFPc0ksS0FBS3RMLFFBQVFpRCwwQkFJcEJNLElBQUtQLEVBQUtPLElBQU00dEIsRUFBSUMsWUFBY3puQixFQUFnQjBuQixVQUNsRGp1QixLQUFNSixFQUFLSSxLQUFPK3RCLEVBQUlHLFlBQWMzbkIsRUFBZ0I0bkIsYUFJeERaLEVBQW1CdHdCLFVBQVUwZCxHQUFLLFNBQVMwRCxFQUFPcGdCLEdBQ2hELEdBQUkwdkIsR0FBYXRQLEVBQU1uWSxNQUFNLEtBQ3pCMlgsRUFBWThQLEVBQVcsR0FDdkJDLEVBQVlELEVBQVcsSUFBTSxZQUM3QlMsRUFBYWxtQixLQUFLc2xCLFNBQVNJLEdBQWExbEIsS0FBS3NsQixTQUFTSSxPQUN0RFMsRUFBYUQsRUFBV3ZRLEdBQWF1USxFQUFXdlEsTUFFcER3USxHQUFXdGxCLEtBQUs5SyxHQUNoQmlLLEtBQUt0TCxRQUFRc0IsaUJBQWlCMmYsRUFBVzVmLElBRzNDc3ZCLEVBQW1CdHdCLFVBQVU4ckIsWUFBYyxTQUFTdUYsR0FDbEQsR0FDSUMsR0FEQXZoQixFQUFTOUUsS0FBS3NnQixhQVNsQixPQU5JOEYsS0FBa0IvQyxFQUFTcmpCLEtBQUt0TCxXQUNsQzJ4QixFQUFnQjdrQixPQUFPNUwsaUJBQWlCb0ssS0FBS3RMLFNBQzdDb1EsR0FBVXpGLFNBQVNnbkIsRUFBY0MsVUFBVyxJQUM1Q3hoQixHQUFVekYsU0FBU2duQixFQUFjRSxhQUFjLEtBRzFDemhCLEdBR1R1Z0IsRUFBbUJ0d0IsVUFBVWlzQixXQUFhLFNBQVNvRixHQUNqRCxHQUNJQyxHQURBdGhCLEVBQVEvRSxLQUFLK2dCLFlBU2pCLE9BTklxRixLQUFrQi9DLEVBQVNyakIsS0FBS3RMLFdBQ2xDMnhCLEVBQWdCN2tCLE9BQU81TCxpQkFBaUJvSyxLQUFLdEwsU0FDN0NxUSxHQUFTMUYsU0FBU2duQixFQUFjRyxXQUFZLElBQzVDemhCLEdBQVMxRixTQUFTZ25CLEVBQWNJLFlBQWEsS0FHeEMxaEIsR0FHVHNnQixFQUFtQnR3QixVQUFVc3NCLFdBQWEsV0FDeEMsR0FBSXdFLEdBQU1ULEVBQVVwbEIsS0FBS3RMLFFBQ3pCLE9BQU9teEIsR0FBTUEsRUFBSUcsWUFBY2htQixLQUFLdEwsUUFBUTJzQixZQUc5Q2dFLEVBQW1CdHdCLFVBQVV1c0IsVUFBWSxXQUN2QyxHQUFJdUUsR0FBTVQsRUFBVXBsQixLQUFLdEwsUUFDekIsT0FBT214QixHQUFNQSxFQUFJQyxZQUFjOWxCLEtBQUt0TCxRQUFRNHNCLFdBRzlDK0QsRUFBbUJud0IsT0FBUyxXQUcxQixRQUFTd3hCLEdBQU1ydUIsRUFBUWtpQixHQUNyQixHQUFzQixnQkFBWGxpQixJQUFzQyxnQkFBUmtpQixHQUN2QyxJQUFLLEdBQUk4RCxLQUFPOUQsR0FDVkEsRUFBSTFhLGVBQWV3ZSxLQUNyQmhtQixFQUFPZ21CLEdBQU85RCxFQUFJOEQsR0FLeEIsT0FBT2htQixHQUdULElBQUssR0FkRGtuQixHQUFPOWQsTUFBTTFNLFVBQVU4SSxNQUFNNUksS0FBS2lMLFdBYzdCN0ssRUFBSSxFQUFHMnFCLEVBQU1ULEVBQUtqb0IsT0FBWTBvQixFQUFKM3FCLEVBQVNBLElBQzFDcXhCLEVBQU1uSCxFQUFLLEdBQUlBLEVBQUtscUIsR0FFdEIsT0FBT2txQixHQUFLLElBR2Q4RixFQUFtQkwsUUFBVSxTQUFTdHdCLEVBQVNpeUIsRUFBT3R4QixHQUNwRCxNQUFnQixPQUFUc3hCLEVBQWdCLEdBQUtBLEVBQU1qd0IsUUFBUWhDLEVBQVNXLElBR3JEZ3dCLEVBQW1CcEQsY0FBZ0IsU0FBUzFILEdBRTFDLElBQUssR0FBSXpqQixLQUFReWpCLEdBQ2YsT0FBTyxDQUVULFFBQU8sR0FHVDRELEVBQVN1QyxTQUFTN2YsTUFDaEIvSixLQUFNLGNBQ055bkIsUUFBUzhHLElBRVhsSCxFQUFTSSxRQUFVOEcsS0FVcEIsU0FBVXVCLEdBQ1ksa0JBQVhySyxTQUF5QkEsT0FBT0MsSUFFMUNELFFBQVEsVUFBV3FLLEdBR25CQSxFQUY2QixnQkFBWmxLLFNBRVRJLFFBQVEsVUFHUkssU0FFUixTQUFVbkYsR0FJWCxRQUFTNk8sR0FBTy9LLEdBQ2YsTUFBT2dMLEdBQU9DLElBQU1qTCxFQUFJa0wsbUJBQW1CbEwsR0FHNUMsUUFBU21MLEdBQU9uTCxHQUNmLE1BQU9nTCxHQUFPQyxJQUFNakwsRUFBSW9MLG1CQUFtQnBMLEdBRzVDLFFBQVNxTCxHQUFxQjN4QixHQUM3QixNQUFPcXhCLEdBQU9DLEVBQU9NLEtBQU8xTyxLQUFLMEIsVUFBVTVrQixHQUFTc2hCLE9BQU90aEIsSUFHNUQsUUFBUzZ4QixHQUFpQnZMLEdBQ0YsSUFBbkJBLEVBQUVwbEIsUUFBUSxPQUVib2xCLEVBQUlBLEVBQUVqZSxNQUFNLEVBQUcsSUFBSWpILFFBQVEsT0FBUSxLQUFLQSxRQUFRLFFBQVMsTUFHMUQsS0FLQyxNQURBa2xCLEdBQUlvTCxtQkFBbUJwTCxFQUFFbGxCLFFBQVEwd0IsRUFBUSxNQUNsQ1IsRUFBT00sS0FBTzFPLEtBQUtDLE1BQU1tRCxHQUFLQSxFQUNwQyxNQUFNeGUsS0FHVCxRQUFTaXFCLEdBQUt6TCxFQUFHMEwsR0FDaEIsR0FBSWh5QixHQUFRc3hCLEVBQU9DLElBQU1qTCxFQUFJdUwsRUFBaUJ2TCxFQUM5QyxPQUFPOUQsR0FBRXlQLFdBQVdELEdBQWFBLEVBQVVoeUIsR0FBU0EsRUEvQnJELEdBQUk4eEIsR0FBUyxNQWtDVFIsRUFBUzlPLEVBQUVFLE9BQVMsU0FBVW1HLEVBQUs3b0IsRUFBT2IsR0FJN0MsR0FBY29DLFNBQVZ2QixJQUF3QndpQixFQUFFeVAsV0FBV2p5QixHQUFRLENBR2hELEdBRkFiLEVBQVVxakIsRUFBRTlpQixVQUFXNHhCLEVBQU8vc0IsU0FBVXBGLEdBRVQsZ0JBQXBCQSxHQUFRK3lCLFFBQXNCLENBQ3hDLEdBQUlDLEdBQU9oekIsRUFBUSt5QixRQUFTMW9CLEVBQUlySyxFQUFRK3lCLFFBQVUsR0FBSTlaLEtBQ3RENU8sR0FBRTRvQixTQUFTNW9CLEVBQVcsTUFBUDJvQixHQUdoQixNQUFRanlCLFVBQVN3aUIsUUFDaEIyTyxFQUFPeEksR0FBTSxJQUFLOEksRUFBcUIzeEIsR0FDdkNiLEVBQVEreUIsUUFBVSxhQUFlL3lCLEVBQVEreUIsUUFBUUcsY0FBZ0IsR0FDakVsekIsRUFBUW16QixLQUFVLFVBQVluekIsRUFBUW16QixLQUFPLEdBQzdDbnpCLEVBQVFvekIsT0FBVSxZQUFjcHpCLEVBQVFvekIsT0FBUyxHQUNqRHB6QixFQUFRcXpCLE9BQVUsV0FBYSxJQUM5QmpxQixLQUFLLElBWVIsSUFBSyxHQVBEb1UsR0FBU2tNLEVBQU10bkIsVUFLZmt4QixFQUFVdnlCLFNBQVN3aUIsT0FBU3hpQixTQUFTd2lCLE9BQU9sYSxNQUFNLFNBRTdDM0ksRUFBSSxFQUFHcUosRUFBSXVwQixFQUFRM3dCLE9BQVlvSCxFQUFKckosRUFBT0EsSUFBSyxDQUMvQyxHQUFJNnlCLEdBQVFELEVBQVE1eUIsR0FBRzJJLE1BQU0sS0FDekJsSCxFQUFPbXdCLEVBQU9pQixFQUFNbk8sU0FDcEI3QixFQUFTZ1EsRUFBTW5xQixLQUFLLElBRXhCLElBQUlzZ0IsR0FBT0EsSUFBUXZuQixFQUFNLENBRXhCcWIsRUFBU29WLEVBQUtyUCxFQUFRMWlCLEVBQ3RCLE9BSUk2b0IsR0FBbUN0bkIsVUFBM0JtaEIsRUFBU3FQLEVBQUtyUCxNQUMxQi9GLEVBQU9yYixHQUFRb2hCLEdBSWpCLE1BQU8vRixHQUdSMlUsR0FBTy9zQixZQUVQaWUsRUFBRW1RLGFBQWUsU0FBVTlKLEVBQUsxcEIsR0FDL0IsTUFBc0JvQyxVQUFsQmloQixFQUFFRSxPQUFPbUcsSUFDTCxHQUlSckcsRUFBRUUsT0FBT21HLEVBQUssR0FBSXJHLEVBQUU5aUIsVUFBV1AsR0FBVyt5QixRQUFTLE9BQzNDMVAsRUFBRUUsT0FBT21HLE9BU25CLFNBQVU3YyxFQUFROUwsRUFBVTB5QixFQUFZcnhCLEdBQ3RDLFlBa0JGLFNBQVNzeEIsR0FBa0IzSyxFQUFJNEssRUFBU3RKLEdBQ3BDLE1BQU92YixZQUFXOGtCLEVBQU83SyxFQUFJc0IsR0FBVXNKLEdBWTNDLFFBQVNFLEdBQWVDLEVBQUsvSyxFQUFJc0IsR0FDN0IsTUFBSXZkLE9BQU03TSxRQUFRNnpCLElBQ2RoUCxFQUFLZ1AsRUFBS3pKLEVBQVF0QixHQUFLc0IsSUFDaEIsSUFFSixFQVNYLFFBQVN2RixHQUFLYyxFQUFLbU8sRUFBVTFKLEdBQ3pCLEdBQUkzcEIsRUFFSixJQUFLa2xCLEVBSUwsR0FBSUEsRUFBSTFCLFFBQ0owQixFQUFJMUIsUUFBUTZQLEVBQVUxSixPQUNuQixJQUFJekUsRUFBSWpqQixTQUFXUCxFQUV0QixJQURBMUIsRUFBSSxFQUNHQSxFQUFJa2xCLEVBQUlqakIsUUFDWG94QixFQUFTenpCLEtBQUsrcEIsRUFBU3pFLEVBQUlsbEIsR0FBSUEsRUFBR2tsQixHQUNsQ2xsQixRQUdKLEtBQUtBLElBQUtrbEIsR0FDTkEsRUFBSTFhLGVBQWV4SyxJQUFNcXpCLEVBQVN6ekIsS0FBSytwQixFQUFTekUsRUFBSWxsQixHQUFJQSxFQUFHa2xCLEdBYXZFLFFBQVNybEIsR0FBT3l6QixFQUFNNVYsRUFBSzJULEdBR3ZCLElBRkEsR0FBSWpNLEdBQU8zbEIsT0FBTzJsQixLQUFLMUgsR0FDbkIxZCxFQUFJLEVBQ0RBLEVBQUlvbEIsRUFBS25qQixVQUNQb3ZCLEdBQVVBLEdBQVNpQyxFQUFLbE8sRUFBS3BsQixNQUFRMEIsS0FDdEM0eEIsRUFBS2xPLEVBQUtwbEIsSUFBTTBkLEVBQUkwSCxFQUFLcGxCLEtBRTdCQSxHQUVKLE9BQU9zekIsR0FVWCxRQUFTakMsR0FBTWlDLEVBQU01VixHQUNqQixNQUFPN2QsR0FBT3l6QixFQUFNNVYsR0FBSyxHQVM3QixRQUFTNlYsR0FBUUMsRUFBT0MsRUFBTXZiLEdBQzFCLEdBQ0l3YixHQURBQyxFQUFRRixFQUFLL3pCLFNBR2pCZzBCLEdBQVNGLEVBQU05ekIsVUFBWUQsT0FBT20wQixPQUFPRCxHQUN6Q0QsRUFBT2pwQixZQUFjK29CLEVBQ3JCRSxFQUFPRyxPQUFTRixFQUVaemIsR0FDQXJZLEVBQU82ekIsRUFBUXhiLEdBVXZCLFFBQVNnYixHQUFPN0ssRUFBSXNCLEdBQ2hCLE1BQU8sWUFDSCxNQUFPdEIsR0FBR3ZkLE1BQU02ZSxFQUFTOWUsWUFXakMsUUFBU2lwQixHQUFTdFAsRUFBSzBGLEdBQ25CLGFBQVcxRixJQUFPdVAsR0FDUHZQLEVBQUkxWixNQUFNb2YsRUFBT0EsRUFBSyxJQUFNeG9CLEVBQVlBLEVBQVd3b0IsR0FFdkQxRixFQVNYLFFBQVN3UCxHQUFZQyxFQUFNQyxHQUN2QixNQUFRRCxLQUFTdnlCLEVBQWF3eUIsRUFBT0QsRUFTekMsUUFBU0UsR0FBa0JueEIsRUFBUW94QixFQUFPMXpCLEdBQ3RDMGpCLEVBQUtpUSxFQUFTRCxHQUFRLFNBQVNobkIsR0FDM0JwSyxFQUFPckMsaUJBQWlCeU0sRUFBTTFNLEdBQVMsS0FVL0MsUUFBUzR6QixHQUFxQnR4QixFQUFRb3hCLEVBQU8xekIsR0FDekMwakIsRUFBS2lRLEVBQVNELEdBQVEsU0FBU2huQixHQUMzQnBLLEVBQU9qQyxvQkFBb0JxTSxFQUFNMU0sR0FBUyxLQVdsRCxRQUFTb0MsR0FBVXl4QixFQUFNeHhCLEdBQ3JCLEtBQU93eEIsR0FBTSxDQUNULEdBQUlBLEdBQVF4eEIsRUFDUixPQUFPLENBRVh3eEIsR0FBT0EsRUFBS3B4QixXQUVoQixPQUFPLEVBU1gsUUFBU3F4QixHQUFNclAsRUFBS2IsR0FDaEIsTUFBT2EsR0FBSTlqQixRQUFRaWpCLEdBQVEsR0FRL0IsUUFBUytQLEdBQVNsUCxHQUNkLE1BQU9BLEdBQUlzUCxPQUFPOXJCLE1BQU0sUUFVNUIsUUFBU2duQixHQUFRalMsRUFBSzRHLEVBQU1vUSxHQUN4QixHQUFJaFgsRUFBSXJjLFVBQVlxekIsRUFDaEIsTUFBT2hYLEdBQUlyYyxRQUFRaWpCLEVBR25CLEtBREEsR0FBSXRrQixHQUFJLEVBQ0RBLEVBQUkwZCxFQUFJemIsUUFBUSxDQUNuQixHQUFLeXlCLEdBQWFoWCxFQUFJMWQsR0FBRzAwQixJQUFjcFEsSUFBV29RLEdBQWFoWCxFQUFJMWQsS0FBT3NrQixFQUN0RSxNQUFPdGtCLEVBRVhBLEtBRUosTUFBTyxHQVNmLFFBQVMyMEIsR0FBUXpQLEdBQ2IsTUFBTzlZLE9BQU0xTSxVQUFVOEksTUFBTTVJLEtBQUtzbEIsRUFBSyxHQVUzQyxRQUFTMFAsR0FBWWxYLEVBQUtzTCxFQUFLeUcsR0FLM0IsSUFKQSxHQUFJb0YsTUFDQUMsS0FDQTkwQixFQUFJLEVBRURBLEVBQUkwZCxFQUFJemIsUUFBUSxDQUNuQixHQUFJdWlCLEdBQU13RSxFQUFNdEwsRUFBSTFkLEdBQUdncEIsR0FBT3RMLEVBQUkxZCxFQUM5QjJ2QixHQUFRbUYsRUFBUXRRLEdBQU8sR0FDdkJxUSxFQUFRcnBCLEtBQUtrUyxFQUFJMWQsSUFFckI4MEIsRUFBTzkwQixHQUFLd2tCLEVBQ1p4a0IsSUFhSixNQVZJeXZCLEtBSUlvRixFQUhDN0wsRUFHUzZMLEVBQVFwRixLQUFLLFNBQXlCM3ZCLEVBQUdDLEdBQy9DLE1BQU9ELEdBQUVrcEIsR0FBT2pwQixFQUFFaXBCLEtBSFo2TCxFQUFRcEYsUUFRbkJvRixFQVNYLFFBQVMzb0IsR0FBU2daLEVBQUtobEIsR0FLbkIsSUFKQSxHQUFJa0UsR0FBUTBlLEVBQ1JpUyxFQUFZNzBCLEVBQVMsR0FBR3FJLGNBQWdCckksRUFBU3NJLE1BQU0sR0FFdkR4SSxFQUFJLEVBQ0RBLEVBQUlnMUIsR0FBZ0IveUIsUUFBUSxDQUkvQixHQUhBbUMsRUFBUzR3QixHQUFnQmgxQixHQUN6QjhpQixFQUFPLEVBQVcxZSxFQUFTMndCLEVBQVk3MEIsRUFFbkM0aUIsSUFBUW9DLEdBQ1IsTUFBT3BDLEVBRVg5aUIsS0FFSixNQUFPMEIsR0FRWCxRQUFTdXpCLEtBQ0wsTUFBT0MsTUFRWCxRQUFTQyxHQUFvQjkxQixHQUN6QixHQUFJKzFCLEdBQU0vMUIsRUFBUWt4QixhQUNsQixPQUFRNkUsR0FBSTkwQixhQUFlODBCLEVBQUlDLGFBeUNuQyxRQUFTQyxHQUFNQyxFQUFTcm5CLEdBQ3BCLEdBQUluQixHQUFPcEMsSUFDWEEsTUFBSzRxQixRQUFVQSxFQUNmNXFCLEtBQUt1RCxTQUFXQSxFQUNoQnZELEtBQUt0TCxRQUFVazJCLEVBQVFsMkIsUUFDdkJzTCxLQUFLM0gsT0FBU3V5QixFQUFRajJCLFFBQVFrMkIsWUFJOUI3cUIsS0FBSzhxQixXQUFhLFNBQVNDLEdBQ25CNUIsRUFBU3lCLEVBQVFqMkIsUUFBUThxQixRQUFTbUwsS0FDbEN4b0IsRUFBS3JNLFFBQVFnMUIsSUFJckIvcUIsS0FBSzBELE9Bb0NULFFBQVNzbkIsR0FBb0JKLEdBQ3pCLEdBQUlLLEdBQ0FDLEVBQWFOLEVBQVFqMkIsUUFBUXUyQixVQWFqQyxPQUFPLEtBVkhELEVBREFDLEVBQ09BLEVBQ0FDLEdBQ0FDLEVBQ0FDLEdBQ0FDLEVBQ0NDLEdBR0RDLEVBRkFDLEdBSU9iLEVBQVNjLEdBUy9CLFFBQVNBLEdBQWFkLEVBQVNqVixFQUFXZ1csR0FDdEMsR0FBSUMsR0FBY0QsRUFBTUUsU0FBU3YwQixPQUM3QncwQixFQUFxQkgsRUFBTUksZ0JBQWdCejBCLE9BQzNDMDBCLEVBQVdyVyxFQUFZc1csSUFBZ0JMLEVBQWNFLElBQXVCLEVBQzVFSSxFQUFXdlcsR0FBYXdXLEdBQVlDLEtBQWtCUixFQUFjRSxJQUF1QixDQUUvRkgsR0FBTUssVUFBWUEsRUFDbEJMLEVBQU1PLFVBQVlBLEVBRWRGLElBQ0FwQixFQUFReUIsWUFLWlYsRUFBTWhXLFVBQVlBLEVBR2xCMlcsRUFBaUIxQixFQUFTZSxHQUcxQmYsRUFBUXpPLEtBQUssZUFBZ0J3UCxHQUU3QmYsRUFBUTJCLFVBQVVaLEdBQ2xCZixFQUFReUIsUUFBUUcsVUFBWWIsRUFRaEMsUUFBU1csR0FBaUIxQixFQUFTZSxHQUMvQixHQUFJVSxHQUFVekIsRUFBUXlCLFFBQ2xCUixFQUFXRixFQUFNRSxTQUNqQlksRUFBaUJaLEVBQVN2MEIsTUFHekIrMEIsR0FBUUssYUFDVEwsRUFBUUssV0FBYUMsRUFBcUJoQixJQUkxQ2MsRUFBaUIsSUFBTUosRUFBUU8sY0FDL0JQLEVBQVFPLGNBQWdCRCxFQUFxQmhCLEdBQ25CLElBQW5CYyxJQUNQSixFQUFRTyxlQUFnQixFQUc1QixJQUFJRixHQUFhTCxFQUFRSyxXQUNyQkUsRUFBZ0JQLEVBQVFPLGNBQ3hCQyxFQUFlRCxFQUFnQkEsRUFBY0UsT0FBU0osRUFBV0ksT0FFakVBLEVBQVNuQixFQUFNbUIsT0FBU0MsRUFBVWxCLEVBQ3RDRixHQUFNcUIsVUFBWUMsS0FDbEJ0QixFQUFNdUIsVUFBWXZCLEVBQU1xQixVQUFZTixFQUFXTSxVQUUvQ3JCLEVBQU13QixNQUFRQyxFQUFTUCxFQUFjQyxHQUNyQ25CLEVBQU0wQixTQUFXQyxFQUFZVCxFQUFjQyxHQUUzQ1MsRUFBZWxCLEVBQVNWLEdBQ3hCQSxFQUFNNkIsZ0JBQWtCdmdCLEVBQWEwZSxFQUFNOEIsT0FBUTlCLEVBQU0rQixRQUV6RC9CLEVBQU1nQyxNQUFRZixFQUFnQmdCLEVBQVNoQixFQUFjZixTQUFVQSxHQUFZLEVBQzNFRixFQUFNa0MsU0FBV2pCLEVBQWdCa0IsRUFBWWxCLEVBQWNmLFNBQVVBLEdBQVksRUFFakZrQyxFQUF5QjFCLEVBQVNWLEVBR2xDLElBQUl0ekIsR0FBU3V5QixFQUFRbDJCLE9BQ2pCeUQsR0FBVXd6QixFQUFNcUMsU0FBUzMxQixPQUFRQSxLQUNqQ0EsRUFBU3N6QixFQUFNcUMsU0FBUzMxQixRQUU1QnN6QixFQUFNdHpCLE9BQVNBLEVBR25CLFFBQVNrMUIsR0FBZWxCLEVBQVNWLEdBQzdCLEdBQUltQixHQUFTbkIsRUFBTW1CLE9BQ2YxTixFQUFTaU4sRUFBUTRCLGdCQUNqQkMsRUFBWTdCLEVBQVE2QixjQUNwQjFCLEVBQVlILEVBQVFHLGVBRXBCYixFQUFNaFcsWUFBY3NXLElBQWVPLEVBQVU3VyxZQUFjd1csTUFDM0QrQixFQUFZN0IsRUFBUTZCLFdBQ2hCdHVCLEVBQUc0c0IsRUFBVWlCLFFBQVUsRUFDdkJydkIsRUFBR291QixFQUFVa0IsUUFBVSxHQUczQnRPLEVBQVNpTixFQUFRNEIsYUFDYnJ1QixFQUFHa3RCLEVBQU9sdEIsRUFDVnhCLEVBQUcwdUIsRUFBTzF1QixJQUlsQnV0QixFQUFNOEIsT0FBU1MsRUFBVXR1QixHQUFLa3RCLEVBQU9sdEIsRUFBSXdmLEVBQU94ZixHQUNoRCtyQixFQUFNK0IsT0FBU1EsRUFBVTl2QixHQUFLMHVCLEVBQU8xdUIsRUFBSWdoQixFQUFPaGhCLEdBUXBELFFBQVMydkIsR0FBeUIxQixFQUFTVixHQUN2QyxHQUVJd0MsR0FBVUMsRUFBV0MsRUFBV3hpQixFQUZoQ3NaLEVBQU9rSCxFQUFRaUMsY0FBZ0IzQyxFQUMvQnVCLEVBQVl2QixFQUFNcUIsVUFBWTdILEVBQUs2SCxTQUd2QyxJQUFJckIsRUFBTWhXLFdBQWF5VyxLQUFpQmMsRUFBWXFCLElBQW9CcEosRUFBS2dKLFdBQWFwM0IsR0FBWSxDQUNsRyxHQUFJMDJCLEdBQVN0SSxFQUFLc0ksT0FBUzlCLEVBQU04QixPQUM3QkMsRUFBU3ZJLEVBQUt1SSxPQUFTL0IsRUFBTStCLE9BRTdCdnZCLEVBQUlxd0IsRUFBWXRCLEVBQVdPLEVBQVFDLEVBQ3ZDVSxHQUFZandCLEVBQUV5QixFQUNkeXVCLEVBQVlsd0IsRUFBRUMsRUFDZCt2QixFQUFZdHNCLEdBQUkxRCxFQUFFeUIsR0FBS2lDLEdBQUkxRCxFQUFFQyxHQUFNRCxFQUFFeUIsRUFBSXpCLEVBQUVDLEVBQzNDeU4sRUFBWW9CLEVBQWF3Z0IsRUFBUUMsR0FFakNyQixFQUFRaUMsYUFBZTNDLE1BR3ZCd0MsR0FBV2hKLEVBQUtnSixTQUNoQkMsRUFBWWpKLEVBQUtpSixVQUNqQkMsRUFBWWxKLEVBQUtrSixVQUNqQnhpQixFQUFZc1osRUFBS3RaLFNBR3JCOGYsR0FBTXdDLFNBQVdBLEVBQ2pCeEMsRUFBTXlDLFVBQVlBLEVBQ2xCekMsRUFBTTBDLFVBQVlBLEVBQ2xCMUMsRUFBTTlmLFVBQVlBLEVBUXRCLFFBQVM4Z0IsR0FBcUJoQixHQUsxQixJQUZBLEdBQUlFLE1BQ0F4MkIsRUFBSSxFQUNEQSxFQUFJczJCLEVBQU1FLFNBQVN2MEIsUUFDdEJ1MEIsRUFBU3gyQixJQUNMd0MsUUFBUzQyQixHQUFNOUMsRUFBTUUsU0FBU3gyQixHQUFHd0MsU0FDakNHLFFBQVN5MkIsR0FBTTlDLEVBQU1FLFNBQVN4MkIsR0FBRzJDLFVBRXJDM0MsR0FHSixRQUNJMjNCLFVBQVdDLEtBQ1hwQixTQUFVQSxFQUNWaUIsT0FBUUMsRUFBVWxCLEdBQ2xCNEIsT0FBUTlCLEVBQU04QixPQUNkQyxPQUFRL0IsRUFBTStCLFFBU3RCLFFBQVNYLEdBQVVsQixHQUNmLEdBQUlZLEdBQWlCWixFQUFTdjBCLE1BRzlCLElBQXVCLElBQW5CbTFCLEVBQ0EsT0FDSTdzQixFQUFHNnVCLEdBQU01QyxFQUFTLEdBQUdoMEIsU0FDckJ1RyxFQUFHcXdCLEdBQU01QyxFQUFTLEdBQUc3ekIsU0FLN0IsS0FEQSxHQUFJNEgsR0FBSSxFQUFHeEIsRUFBSSxFQUFHL0ksRUFBSSxFQUNYbzNCLEVBQUpwM0IsR0FDSHVLLEdBQUtpc0IsRUFBU3gyQixHQUFHd0MsUUFDakJ1RyxHQUFLeXRCLEVBQVN4MkIsR0FBRzJDLFFBQ2pCM0MsR0FHSixRQUNJdUssRUFBRzZ1QixHQUFNN3VCLEVBQUk2c0IsR0FDYnJ1QixFQUFHcXdCLEdBQU1yd0IsRUFBSXF1QixJQVdyQixRQUFTK0IsR0FBWXRCLEVBQVd0dEIsRUFBR3hCLEdBQy9CLE9BQ0l3QixFQUFHQSxFQUFJc3RCLEdBQWEsRUFDcEI5dUIsRUFBR0EsRUFBSTh1QixHQUFhLEdBVTVCLFFBQVNqZ0IsR0FBYXJOLEVBQUd4QixHQUNyQixNQUFJd0IsS0FBTXhCLEVBQ0NwRixHQUdQNkksR0FBSWpDLElBQU1pQyxHQUFJekQsR0FDUHdCLEVBQUksRUFBSTh1QixHQUFpQkMsR0FFN0J2d0IsRUFBSSxFQUFJd3dCLEdBQWVDLEdBVWxDLFFBQVN2QixHQUFZd0IsRUFBSUMsRUFBSUMsR0FDcEJBLElBQ0RBLEVBQVFDLEdBRVosSUFBSXJ2QixHQUFJbXZCLEVBQUdDLEVBQU0sSUFBTUYsRUFBR0UsRUFBTSxJQUM1QjV3QixFQUFJMndCLEVBQUdDLEVBQU0sSUFBTUYsRUFBR0UsRUFBTSxHQUVoQyxPQUFPcHRCLE1BQUtzdEIsS0FBTXR2QixFQUFJQSxFQUFNeEIsRUFBSUEsR0FVcEMsUUFBU2d2QixHQUFTMEIsRUFBSUMsRUFBSUMsR0FDakJBLElBQ0RBLEVBQVFDLEdBRVosSUFBSXJ2QixHQUFJbXZCLEVBQUdDLEVBQU0sSUFBTUYsRUFBR0UsRUFBTSxJQUM1QjV3QixFQUFJMndCLEVBQUdDLEVBQU0sSUFBTUYsRUFBR0UsRUFBTSxHQUNoQyxPQUEwQixLQUFuQnB0QixLQUFLdXRCLE1BQU0vd0IsRUFBR3dCLEdBQVdnQyxLQUFLd3RCLEdBU3pDLFFBQVN0QixHQUFZOXBCLEVBQU9nYyxHQUN4QixNQUFPb04sR0FBU3BOLEVBQUksR0FBSUEsRUFBSSxHQUFJcVAsSUFBbUJqQyxFQUFTcHBCLEVBQU0sR0FBSUEsRUFBTSxHQUFJcXJCLElBVXBGLFFBQVN6QixHQUFTNXBCLEVBQU9nYyxHQUNyQixNQUFPc04sR0FBWXROLEVBQUksR0FBSUEsRUFBSSxHQUFJcVAsSUFBbUIvQixFQUFZdHBCLEVBQU0sR0FBSUEsRUFBTSxHQUFJcXJCLElBaUIxRixRQUFTNUQsS0FDTHpyQixLQUFLc3ZCLEtBQU9DLEdBQ1p2dkIsS0FBS3d2QixNQUFRQyxHQUVienZCLEtBQUswdkIsT0FBUSxFQUNiMXZCLEtBQUsydkIsU0FBVSxFQUVmaEYsRUFBTXhxQixNQUFNSCxLQUFNRSxXQW9FdEIsUUFBU2tyQixLQUNMcHJCLEtBQUtzdkIsS0FBT00sR0FDWjV2QixLQUFLd3ZCLE1BQVFLLEdBRWJsRixFQUFNeHFCLE1BQU1ILEtBQU1FLFdBRWxCRixLQUFLOHZCLE1BQVM5dkIsS0FBSzRxQixRQUFReUIsUUFBUTBELGlCQW9FdkMsUUFBU0MsS0FDTGh3QixLQUFLaXdCLFNBQVdDLEdBQ2hCbHdCLEtBQUt3dkIsTUFBUVcsR0FDYm53QixLQUFLbUUsU0FBVSxFQUVmd21CLEVBQU14cUIsTUFBTUgsS0FBTUUsV0FzQ3RCLFFBQVNrd0IsR0FBdUJyRixFQUFJdG9CLEdBQ2hDLEdBQUk0dEIsR0FBTXJHLEVBQVFlLEVBQUd1RixTQUNqQkMsRUFBVXZHLEVBQVFlLEVBQUd5RixlQU16QixPQUpJL3RCLElBQVEwcEIsR0FBWUMsTUFDcEJpRSxFQUFNcEcsRUFBWW9HLEVBQUlqd0IsT0FBT213QixHQUFVLGNBQWMsS0FHakRGLEVBQUtFLEdBaUJqQixRQUFTakYsS0FDTHRyQixLQUFLaXdCLFNBQVdRLEdBQ2hCendCLEtBQUswd0IsYUFFTC9GLEVBQU14cUIsTUFBTUgsS0FBTUUsV0EwQnRCLFFBQVN5d0IsR0FBVzVGLEVBQUl0b0IsR0FDcEIsR0FBSW11QixHQUFhNUcsRUFBUWUsRUFBR3VGLFNBQ3hCSSxFQUFZMXdCLEtBQUswd0IsU0FHckIsSUFBSWp1QixHQUFRd3BCLEdBQWM0RSxLQUFxQyxJQUF0QkQsRUFBV3Q1QixPQUVoRCxNQURBbzVCLEdBQVVFLEVBQVcsR0FBR0UsYUFBYyxHQUM5QkYsRUFBWUEsRUFHeEIsSUFBSXY3QixHQUNBMDdCLEVBQ0FQLEVBQWlCeEcsRUFBUWUsRUFBR3lGLGdCQUM1QlEsS0FDQTM0QixFQUFTMkgsS0FBSzNILE1BUWxCLElBTEEwNEIsRUFBZ0JILEVBQVdLLE9BQU8sU0FBU3QzQixHQUN2QyxNQUFPeEIsR0FBVXdCLEVBQU10QixPQUFRQSxLQUkvQm9LLElBQVN3cEIsR0FFVCxJQURBNTJCLEVBQUksRUFDR0EsRUFBSTA3QixFQUFjejVCLFFBQ3JCbzVCLEVBQVVLLEVBQWMxN0IsR0FBR3k3QixhQUFjLEVBQ3pDejdCLEdBTVIsS0FEQUEsRUFBSSxFQUNHQSxFQUFJbTdCLEVBQWVsNUIsUUFDbEJvNUIsRUFBVUYsRUFBZW43QixHQUFHeTdCLGFBQzVCRSxFQUFxQm53QixLQUFLMnZCLEVBQWVuN0IsSUFJekNvTixHQUFRMHBCLEdBQVlDLFdBQ2JzRSxHQUFVRixFQUFlbjdCLEdBQUd5N0IsWUFFdkN6N0IsR0FHSixPQUFLMjdCLEdBQXFCMTVCLFFBTXRCMnlCLEVBQVk4RyxFQUFjM3dCLE9BQU80d0IsR0FBdUIsY0FBYyxHQUN0RUEsR0FQSixPQW9CSixRQUFTeEYsS0FDTGIsRUFBTXhxQixNQUFNSCxLQUFNRSxVQUVsQixJQUFJbkssR0FBVXd5QixFQUFPdm9CLEtBQUtqSyxRQUFTaUssS0FDbkNBLE1BQUtyRyxNQUFRLEdBQUkyeEIsR0FBV3RyQixLQUFLNHFCLFFBQVM3MEIsR0FDMUNpSyxLQUFLa3hCLE1BQVEsR0FBSXpGLEdBQVd6ckIsS0FBSzRxQixRQUFTNzBCLEdBeUQ5QyxRQUFTbzdCLEdBQVl2RyxFQUFTcDFCLEdBQzFCd0ssS0FBSzRxQixRQUFVQSxFQUNmNXFCLEtBQUs0VyxJQUFJcGhCLEdBdUZiLFFBQVM0N0IsR0FBa0JDLEdBRXZCLEdBQUl4SCxFQUFNd0gsRUFBU0MsSUFDZixNQUFPQSxHQUdYLElBQUlDLEdBQVUxSCxFQUFNd0gsRUFBU0csSUFDekJDLEVBQVU1SCxFQUFNd0gsRUFBU0ssR0FHN0IsT0FBSUgsSUFBV0UsRUFDSkQsR0FBcUIsSUFBTUUsR0FJbENILEdBQVdFLEVBQ0pGLEVBQVVDLEdBQXFCRSxHQUl0QzdILEVBQU13SCxFQUFTTSxJQUNSQSxHQUdKQyxHQTRDWCxRQUFTQyxHQUFXbDlCLEdBQ2hCcUwsS0FBS1YsR0FBS2dyQixJQUVWdHFCLEtBQUs0cUIsUUFBVSxLQUNmNXFCLEtBQUtyTCxRQUFVK3hCLEVBQU0veEIsTUFBZXFMLEtBQUtqRyxVQUd6Q2lHLEtBQUtyTCxRQUFROHFCLE9BQVM0SixFQUFZcnBCLEtBQUtyTCxRQUFROHFCLFFBQVEsR0FFdkR6ZixLQUFLOHhCLE1BQVFDLEdBRWIveEIsS0FBS2d5QixnQkFDTGh5QixLQUFLaXlCLGVBaU9ULFFBQVNDLEdBQVNKLEdBQ2QsTUFBSUEsR0FBUUssR0FDRCxTQUNBTCxFQUFRTSxHQUNSLE1BQ0FOLEVBQVFPLEdBQ1IsT0FDQVAsRUFBUVEsR0FDUixRQUVKLEdBUVgsUUFBU0MsR0FBYTFtQixHQUNsQixNQUFJQSxJQUFhZ2pCLEdBQ04sT0FDQWhqQixHQUFhK2lCLEdBQ2IsS0FDQS9pQixHQUFhNmlCLEdBQ2IsT0FDQTdpQixHQUFhOGlCLEdBQ2IsUUFFSixHQVNYLFFBQVM2RCxHQUE2QkMsRUFBaUJDLEdBQ25ELEdBQUk5SCxHQUFVOEgsRUFBVzlILE9BQ3pCLE9BQUlBLEdBQ09BLEVBQVFqVSxJQUFJOGIsR0FFaEJBLEVBUVgsUUFBU0UsS0FDTGQsRUFBVzF4QixNQUFNSCxLQUFNRSxXQTZEM0IsUUFBUzB5QixLQUNMRCxFQUFleHlCLE1BQU1ILEtBQU1FLFdBRTNCRixLQUFLNnlCLEdBQUssS0FDVjd5QixLQUFLOHlCLEdBQUssS0EyRWQsUUFBU0MsS0FDTEosRUFBZXh5QixNQUFNSCxLQUFNRSxXQXNDL0IsUUFBUzh5QixNQUNMbkIsRUFBVzF4QixNQUFNSCxLQUFNRSxXQUV2QkYsS0FBS2l6QixPQUFTLEtBQ2RqekIsS0FBS2t6QixPQUFTLEtBbUVsQixRQUFTQyxNQUNMUixFQUFleHlCLE1BQU1ILEtBQU1FLFdBOEIvQixRQUFTa3pCLE1BQ0xULEVBQWV4eUIsTUFBTUgsS0FBTUUsV0EwRC9CLFFBQVNtekIsTUFDTHhCLEVBQVcxeEIsTUFBTUgsS0FBTUUsV0FJdkJGLEtBQUtzekIsT0FBUSxFQUNidHpCLEtBQUt1ekIsU0FBVSxFQUVmdnpCLEtBQUtpekIsT0FBUyxLQUNkanpCLEtBQUtrekIsT0FBUyxLQUNkbHpCLEtBQUt3ekIsTUFBUSxFQXFHakIsUUFBU2wvQixJQUFPSSxFQUFTQyxHQUdyQixNQUZBQSxHQUFVQSxNQUNWQSxFQUFROCtCLFlBQWNwSyxFQUFZMTBCLEVBQVE4K0IsWUFBYW4vQixHQUFPeUYsU0FBUzI1QixRQUNoRSxHQUFJQyxJQUFRai9CLEVBQVNDLEdBaUloQyxRQUFTZy9CLElBQVFqL0IsRUFBU0MsR0FDdEJBLEVBQVVBLE1BRVZxTCxLQUFLckwsUUFBVSt4QixFQUFNL3hCLEVBQVNMLEdBQU95RixVQUNyQ2lHLEtBQUtyTCxRQUFRazJCLFlBQWM3cUIsS0FBS3JMLFFBQVFrMkIsYUFBZW4yQixFQUV2RHNMLEtBQUtzbEIsWUFDTHRsQixLQUFLcXNCLFdBQ0xyc0IsS0FBS3l6QixlQUVMenpCLEtBQUt0TCxRQUFVQSxFQUNmc0wsS0FBSzJyQixNQUFRWCxFQUFvQmhyQixNQUNqQ0EsS0FBSzR6QixZQUFjLEdBQUl6QyxHQUFZbnhCLEtBQU1BLEtBQUtyTCxRQUFRaS9CLGFBRXREQyxHQUFlN3pCLE1BQU0sR0FFckJ5WixFQUFLOWtCLEVBQVE4K0IsWUFBYSxTQUFTSyxHQUMvQixHQUFJcEIsR0FBYTF5QixLQUFLOFUsSUFBSSxHQUFLZ2YsR0FBSyxHQUFJQSxFQUFLLElBQzdDQSxHQUFLLElBQU1wQixFQUFXcUIsY0FBY0QsRUFBSyxJQUN6Q0EsRUFBSyxJQUFNcEIsRUFBV3NCLGVBQWVGLEVBQUssS0FDM0M5ekIsTUF5T1AsUUFBUzZ6QixJQUFlakosRUFBUzlWLEdBQzdCLEdBQUlwZ0IsR0FBVWsyQixFQUFRbDJCLE9BQ3RCK2tCLEdBQUttUixFQUFRajJCLFFBQVFzL0IsU0FBVSxTQUFTeitCLEVBQU9zQixHQUMzQ3BDLEVBQVErSixNQUFNOEMsRUFBUzdNLEVBQVErSixNQUFPM0gsSUFBU2dlLEVBQU10ZixFQUFRLEtBU3JFLFFBQVMwK0IsSUFBZ0IvZCxFQUFPZ2UsR0FDNUIsR0FBSUMsR0FBZTErQixFQUFTMitCLFlBQVksUUFDeENELEdBQWFFLFVBQVVuZSxHQUFPLEdBQU0sR0FDcENpZSxFQUFhRyxRQUFVSixFQUN2QkEsRUFBSzk3QixPQUFPbThCLGNBQWNKLEdBcjFFOUIsR0FBSS9KLEtBQW1CLEdBQUksU0FBVSxNQUFPLEtBQU0sS0FBTSxLQUNwRG9LLEdBQWUvK0IsRUFBUzhJLGNBQWMsT0FFdEM0cUIsR0FBZ0IsV0FFaEJxRixHQUFRN3NCLEtBQUs2c0IsTUFDYjVzQixHQUFNRCxLQUFLQyxJQUNYb3JCLEdBQU1yZixLQUFLcWYsSUF3U1gxQyxHQUFZLEVBZVptSyxHQUFlLHdDQUVmbkosR0FBaUIsZ0JBQWtCL3BCLEdBQ25DMnBCLEdBQXlCNXBCLEVBQVNDLEVBQVEsa0JBQW9CekssRUFDOURzMEIsR0FBcUJFLElBQWlCbUosR0FBYXo5QixLQUFLMDlCLFVBQVVDLFdBRWxFQyxHQUFtQixRQUNuQkMsR0FBaUIsTUFDakJDLEdBQW1CLFFBQ25CQyxHQUFvQixTQUVwQnpHLEdBQW1CLEdBRW5CdEMsR0FBYyxFQUNkNEUsR0FBYSxFQUNiMUUsR0FBWSxFQUNaQyxHQUFlLEVBRWZwekIsR0FBaUIsRUFDakIwMUIsR0FBaUIsRUFDakJDLEdBQWtCLEVBQ2xCQyxHQUFlLEVBQ2ZDLEdBQWlCLEdBRWpCMTFCLEdBQXVCdTFCLEdBQWlCQyxHQUN4Q3YxQixHQUFxQncxQixHQUFlQyxHQUNwQ3gxQixHQUFnQkYsR0FBdUJDLEdBRXZDNjFCLElBQVksSUFBSyxLQUNqQkksSUFBbUIsVUFBVyxVQTRCbEMxRSxHQUFNNTFCLFdBS0ZnQixRQUFTLGFBS1QyTixLQUFNLFdBQ0YxRCxLQUFLc3ZCLE1BQVE5RixFQUFrQnhwQixLQUFLdEwsUUFBU3NMLEtBQUtzdkIsS0FBTXR2QixLQUFLOHFCLFlBQzdEOXFCLEtBQUtpd0IsVUFBWXpHLEVBQWtCeHBCLEtBQUszSCxPQUFRMkgsS0FBS2l3QixTQUFVandCLEtBQUs4cUIsWUFDcEU5cUIsS0FBS3d2QixPQUFTaEcsRUFBa0JnQixFQUFvQnhxQixLQUFLdEwsU0FBVXNMLEtBQUt3dkIsTUFBT3h2QixLQUFLOHFCLGFBTXhGdlQsUUFBUyxXQUNMdlgsS0FBS3N2QixNQUFRM0YsRUFBcUIzcEIsS0FBS3RMLFFBQVNzTCxLQUFLc3ZCLEtBQU10dkIsS0FBSzhxQixZQUNoRTlxQixLQUFLaXdCLFVBQVl0RyxFQUFxQjNwQixLQUFLM0gsT0FBUTJILEtBQUtpd0IsU0FBVWp3QixLQUFLOHFCLFlBQ3ZFOXFCLEtBQUt3dkIsT0FBUzdGLEVBQXFCYSxFQUFvQnhxQixLQUFLdEwsU0FBVXNMLEtBQUt3dkIsTUFBT3h2QixLQUFLOHFCLGFBb1QvRixJQUFJbUssS0FDQUMsVUFBV2pKLEdBQ1h6WCxVQUFXcWMsR0FDWHNFLFFBQVNoSixJQUdUb0QsR0FBdUIsWUFDdkJFLEdBQXNCLG1CQWlCMUI3RyxHQUFRNkMsRUFBWWQsR0FLaEI1MEIsUUFBUyxTQUFtQmcxQixHQUN4QixHQUFJcFYsR0FBWXNmLEdBQWdCbEssRUFBR3RvQixLQUcvQmtULEdBQVlzVyxJQUE2QixJQUFkbEIsRUFBRzNWLFNBQzlCcFYsS0FBSzJ2QixTQUFVLEdBR2ZoYSxFQUFZa2IsSUFBMkIsSUFBYjlGLEVBQUdxSyxRQUM3QnpmLEVBQVl3VyxJQUlYbnNCLEtBQUsydkIsU0FBWTN2QixLQUFLMHZCLFFBSXZCL1osRUFBWXdXLEtBQ1puc0IsS0FBSzJ2QixTQUFVLEdBR25CM3ZCLEtBQUt1RCxTQUFTdkQsS0FBSzRxQixRQUFTalYsR0FDeEJrVyxVQUFXZCxHQUNYZ0IsaUJBQWtCaEIsR0FDbEJzSyxZQUFhTixHQUNiL0csU0FBVWpELE9BS3RCLElBQUl1SyxLQUNBQyxZQUFhdEosR0FDYnVKLFlBQWEzRSxHQUNiNEUsVUFBV3RKLEdBQ1h1SixjQUFldEosR0FDZnVKLFdBQVl2SixJQUlad0osSUFDQUMsRUFBR2hCLEdBQ0hpQixFQUFHaEIsR0FDSGlCLEVBQUdoQixHQUNIaUIsRUFBR2hCLElBR0hwRixHQUF5QixjQUN6QkMsR0FBd0IscUNBR3hCcnVCLEdBQU95MEIsaUJBQ1ByRyxHQUF5QixnQkFDekJDLEdBQXdCLDZDQWlCNUJqSCxFQUFRd0MsRUFBbUJULEdBS3ZCNTBCLFFBQVMsU0FBbUJnMUIsR0FDeEIsR0FBSStFLEdBQVE5dkIsS0FBSzh2QixNQUNib0csR0FBZ0IsRUFFaEJDLEVBQXNCcEwsRUFBR3RvQixLQUFLN0QsY0FBY2hJLFFBQVEsS0FBTSxJQUMxRCtlLEVBQVkyZixHQUFrQmEsR0FDOUJkLEVBQWNPLEdBQXVCN0ssRUFBR3NLLGNBQWdCdEssRUFBR3NLLFlBRTNEN1MsRUFBVzZTLEdBQWVSLEdBRzFCdUIsRUFBYXBSLEVBQVE4SyxFQUFPL0UsRUFBR3NMLFVBQVcsWUFHMUMxZ0IsR0FBWXNXLEtBQThCLElBQWRsQixFQUFHM1YsUUFBZ0JvTixHQUM5QixFQUFiNFQsSUFDQXRHLEVBQU1qdkIsS0FBS2txQixHQUNYcUwsRUFBYXRHLEVBQU14NEIsT0FBUyxHQUV6QnFlLEdBQWF3VyxHQUFZQyxNQUNoQzhKLEdBQWdCLEdBSUgsRUFBYkUsSUFLSnRHLEVBQU1zRyxHQUFjckwsRUFFcEIvcUIsS0FBS3VELFNBQVN2RCxLQUFLNHFCLFFBQVNqVixHQUN4QmtXLFNBQVVpRSxFQUNWL0QsaUJBQWtCaEIsR0FDbEJzSyxZQUFhQSxFQUNickgsU0FBVWpELElBR1ZtTCxHQUVBcEcsRUFBTXplLE9BQU8ra0IsRUFBWSxNQUtyQyxJQUFJRSxLQUNBL2hCLFdBQVkwWCxHQUNac0ssVUFBVzFGLEdBQ1gyRixTQUFVckssR0FDVnNLLFlBQWFySyxJQUdiOEQsR0FBNkIsYUFDN0JDLEdBQTZCLDJDQWVqQ3ZILEdBQVFvSCxFQUFrQnJGLEdBQ3RCNTBCLFFBQVMsU0FBbUJnMUIsR0FDeEIsR0FBSXRvQixHQUFPNnpCLEdBQXVCdkwsRUFBR3RvQixLQU9yQyxJQUpJQSxJQUFTd3BCLEtBQ1Rqc0IsS0FBS21FLFNBQVUsR0FHZG5FLEtBQUttRSxRQUFWLENBSUEsR0FBSW1zQixHQUFVRixFQUF1Qm43QixLQUFLK0ssS0FBTStxQixFQUFJdG9CLEVBR2hEQSxJQUFRMHBCLEdBQVlDLEtBQWlCa0UsRUFBUSxHQUFHaDVCLE9BQVNnNUIsRUFBUSxHQUFHaDVCLFNBQVcsSUFDL0UwSSxLQUFLbUUsU0FBVSxHQUduQm5FLEtBQUt1RCxTQUFTdkQsS0FBSzRxQixRQUFTbm9CLEdBQ3hCb3BCLFNBQVV5RSxFQUFRLEdBQ2xCdkUsZ0JBQWlCdUUsRUFBUSxHQUN6QitFLFlBQWFSLEdBQ2I3RyxTQUFVakQsT0FzQnRCLElBQUkyTCxLQUNBbmlCLFdBQVkwWCxHQUNac0ssVUFBVzFGLEdBQ1gyRixTQUFVckssR0FDVnNLLFlBQWFySyxJQUdicUUsR0FBc0IsMkNBYzFCN0gsR0FBUTBDLEVBQVlYLEdBQ2hCNTBCLFFBQVMsU0FBb0JnMUIsR0FDekIsR0FBSXRvQixHQUFPaTBCLEdBQWdCM0wsRUFBR3RvQixNQUMxQjZ0QixFQUFVSyxFQUFXMTdCLEtBQUsrSyxLQUFNK3FCLEVBQUl0b0IsRUFDbkM2dEIsSUFJTHR3QixLQUFLdUQsU0FBU3ZELEtBQUs0cUIsUUFBU25vQixHQUN4Qm9wQixTQUFVeUUsRUFBUSxHQUNsQnZFLGdCQUFpQnVFLEVBQVEsR0FDekIrRSxZQUFhUixHQUNiN0csU0FBVWpELE9BbUZ0Qm5DLEVBQVE0QyxFQUFpQmIsR0FPckI1MEIsUUFBUyxTQUFvQjYwQixFQUFTK0wsRUFBWUMsR0FDOUMsR0FBSXBVLEdBQVdvVSxFQUFVdkIsYUFBZVIsR0FDcENnQyxFQUFXRCxFQUFVdkIsYUFBZU4sRUFJeEMsSUFBSXZTLEVBQ0F4aUIsS0FBS2t4QixNQUFNeEIsT0FBUSxNQUNoQixJQUFJbUgsSUFBWTcyQixLQUFLa3hCLE1BQU14QixNQUM5QixNQUlBaUgsSUFBY3hLLEdBQVlDLE1BQzFCcHNCLEtBQUtreEIsTUFBTXhCLE9BQVEsR0FHdkIxdkIsS0FBS3VELFNBQVNxbkIsRUFBUytMLEVBQVlDLElBTXZDcmYsUUFBUyxXQUNMdlgsS0FBS3JHLE1BQU00ZCxVQUNYdlgsS0FBS2t4QixNQUFNM1osWUFJbkIsSUFBSXVmLElBQXdCdjFCLEVBQVNrekIsR0FBYWgyQixNQUFPLGVBQ3JEczRCLEdBQXNCRCxLQUEwQi8vQixFQUdoRGlnQyxHQUF1QixVQUN2QnBGLEdBQW9CLE9BQ3BCRCxHQUE0QixlQUM1QkwsR0FBb0IsT0FDcEJFLEdBQXFCLFFBQ3JCRSxHQUFxQjtBQWN6QlAsRUFBWXA4QixXQUtSNmhCLElBQUssU0FBU3BoQixHQUVOQSxHQUFTd2hDLEtBQ1R4aEMsRUFBUXdLLEtBQUtpM0IsV0FHYkYsS0FDQS8yQixLQUFLNHFCLFFBQVFsMkIsUUFBUStKLE1BQU1xNEIsSUFBeUJ0aEMsR0FFeER3SyxLQUFLcXhCLFFBQVU3N0IsRUFBTW9KLGNBQWNrckIsUUFNdkN4ZSxPQUFRLFdBQ0p0TCxLQUFLNFcsSUFBSTVXLEtBQUs0cUIsUUFBUWoyQixRQUFRaS9CLGNBT2xDcUQsUUFBUyxXQUNMLEdBQUk1RixLQU1KLE9BTEE1WCxHQUFLelosS0FBSzRxQixRQUFRNkksWUFBYSxTQUFTZixHQUNoQ3ZKLEVBQVN1SixFQUFXLzlCLFFBQVE4cUIsUUFBU2lULE1BQ3JDckIsRUFBVUEsRUFBUWp4QixPQUFPc3lCLEVBQVd3RSxxQkFHckM5RixFQUFrQkMsRUFBUXR6QixLQUFLLE9BTzFDbzVCLGdCQUFpQixTQUFTeEwsR0FFdEIsSUFBSW9MLEdBQUosQ0FJQSxHQUFJL0ksR0FBV3JDLEVBQU1xQyxTQUNqQm5pQixFQUFZOGYsRUFBTTZCLGVBR3RCLElBQUl4dEIsS0FBSzRxQixRQUFReUIsUUFBUStLLFVBRXJCLFdBREFwSixHQUFTNVgsZ0JBSWIsSUFBSWliLEdBQVVyeEIsS0FBS3F4QixRQUNmZ0csRUFBVXhOLEVBQU13SCxFQUFTQyxJQUN6QkcsRUFBVTVILEVBQU13SCxFQUFTSyxJQUN6QkgsRUFBVTFILEVBQU13SCxFQUFTRyxHQUU3QixPQUFJNkYsSUFDQzVGLEdBQVc1bEIsRUFBWTFTLElBQ3ZCbzRCLEdBQVcxbEIsRUFBWXpTLEdBQ2pCNEcsS0FBS3MzQixXQUFXdEosR0FIM0IsU0FXSnNKLFdBQVksU0FBU3RKLEdBQ2pCaHVCLEtBQUs0cUIsUUFBUXlCLFFBQVErSyxXQUFZLEVBQ2pDcEosRUFBUzVYLGtCQStEakIsSUFBSTJiLElBQWlCLEVBQ2pCTyxHQUFjLEVBQ2RELEdBQWdCLEVBQ2hCRCxHQUFjLEVBQ2RtRixHQUFtQm5GLEdBQ25CRCxHQUFrQixHQUNsQnFGLEdBQWUsRUF1Qm5CM0YsR0FBVzk4QixXQUtQZ0YsWUFPQTZjLElBQUssU0FBU2ppQixHQUtWLE1BSkFPLEdBQU84SyxLQUFLckwsUUFBU0EsR0FHckJxTCxLQUFLNHFCLFNBQVc1cUIsS0FBSzRxQixRQUFRZ0osWUFBWXRvQixTQUNsQ3RMLE1BUVgrekIsY0FBZSxTQUFTdEIsR0FDcEIsR0FBSWpLLEVBQWVpSyxFQUFpQixnQkFBaUJ6eUIsTUFDakQsTUFBT0EsS0FHWCxJQUFJZ3lCLEdBQWVoeUIsS0FBS2d5QixZQU14QixPQUxBUyxHQUFrQkQsRUFBNkJDLEVBQWlCenlCLE1BQzNEZ3lCLEVBQWFTLEVBQWdCbnpCLE1BQzlCMHlCLEVBQWFTLEVBQWdCbnpCLElBQU1tekIsRUFDbkNBLEVBQWdCc0IsY0FBYy96QixPQUUzQkEsTUFRWHkzQixrQkFBbUIsU0FBU2hGLEdBQ3hCLE1BQUlqSyxHQUFlaUssRUFBaUIsb0JBQXFCenlCLE1BQzlDQSxNQUdYeXlCLEVBQWtCRCxFQUE2QkMsRUFBaUJ6eUIsWUFDekRBLE1BQUtneUIsYUFBYVMsRUFBZ0JuekIsSUFDbENVLE9BUVhnMEIsZUFBZ0IsU0FBU3ZCLEdBQ3JCLEdBQUlqSyxFQUFlaUssRUFBaUIsaUJBQWtCenlCLE1BQ2xELE1BQU9BLEtBR1gsSUFBSWl5QixHQUFjanlCLEtBQUtpeUIsV0FNdkIsT0FMQVEsR0FBa0JELEVBQTZCQyxFQUFpQnp5QixNQUNsQixLQUExQ2dsQixFQUFRaU4sRUFBYVEsS0FDckJSLEVBQVlweEIsS0FBSzR4QixHQUNqQkEsRUFBZ0J1QixlQUFlaDBCLE9BRTVCQSxNQVFYMDNCLG1CQUFvQixTQUFTakYsR0FDekIsR0FBSWpLLEVBQWVpSyxFQUFpQixxQkFBc0J6eUIsTUFDdEQsTUFBT0EsS0FHWHl5QixHQUFrQkQsRUFBNkJDLEVBQWlCenlCLEtBQ2hFLElBQUkra0IsR0FBUUMsRUFBUWhsQixLQUFLaXlCLFlBQWFRLEVBSXRDLE9BSEkxTixHQUFRLElBQ1Iva0IsS0FBS2l5QixZQUFZNWdCLE9BQU8wVCxFQUFPLEdBRTVCL2tCLE1BT1gyM0IsbUJBQW9CLFdBQ2hCLE1BQU8zM0IsTUFBS2l5QixZQUFZMzZCLE9BQVMsR0FRckNzZ0MsaUJBQWtCLFNBQVNuRixHQUN2QixRQUFTenlCLEtBQUtneUIsYUFBYVMsRUFBZ0JuekIsS0FRL0M2YyxLQUFNLFNBQVN3UCxHQUlYLFFBQVN4UCxHQUFLMGIsR0FDVnoxQixFQUFLd29CLFFBQVF6TyxLQUFLL1osRUFBS3pOLFFBQVF3aEIsT0FBUzBoQixFQUFZM0YsRUFBU0osR0FBUyxJQUFLbkcsR0FKL0UsR0FBSXZwQixHQUFPcEMsS0FDUDh4QixFQUFROXhCLEtBQUs4eEIsS0FPTE0sSUFBUk4sR0FDQTNWLEdBQUssR0FHVEEsSUFHSTJWLEdBQVNNLElBQ1RqVyxHQUFLLElBVWIyYixRQUFTLFNBQVNuTSxHQUNkLE1BQUkzckIsTUFBSyszQixVQUNFLzNCLEtBQUttYyxLQUFLd1AsUUFHckIzckIsS0FBSzh4QixNQUFRMEYsS0FPakJPLFFBQVMsV0FFTCxJQURBLEdBQUkxaUMsR0FBSSxFQUNEQSxFQUFJMkssS0FBS2l5QixZQUFZMzZCLFFBQVEsQ0FDaEMsS0FBTTBJLEtBQUtpeUIsWUFBWTU4QixHQUFHeThCLE9BQVMwRixHQUFlekYsS0FDOUMsT0FBTyxDQUVYMThCLEtBRUosT0FBTyxHQU9YazNCLFVBQVcsU0FBU3FLLEdBR2hCLEdBQUlvQixHQUFpQjlpQyxLQUFXMGhDLEVBR2hDLE9BQUt6TixHQUFTbnBCLEtBQUtyTCxRQUFROHFCLFFBQVN6ZixLQUFNZzRCLEtBT3RDaDRCLEtBQUs4eEIsT0FBU3lGLEdBQW1CcEYsR0FBa0JxRixNQUNuRHgzQixLQUFLOHhCLE1BQVFDLElBR2pCL3hCLEtBQUs4eEIsTUFBUTl4QixLQUFLaTRCLFFBQVFELFFBSXRCaDRCLEtBQUs4eEIsT0FBU1EsR0FBY0QsR0FBZ0JELEdBQWNELEtBQzFEbnlCLEtBQUs4M0IsUUFBUUUsTUFmYmg0QixLQUFLazRCLGFBQ0xsNEIsS0FBSzh4QixNQUFRMEYsTUF5QnJCUyxRQUFTLFNBQVNyQixLQU9sQk0sZUFBZ0IsYUFPaEJnQixNQUFPLGNBOERYdFAsRUFBUStKLEVBQWdCZCxHQUtwQjkzQixVQUtJOHhCLFNBQVUsR0FTZHNNLFNBQVUsU0FBU3hNLEdBQ2YsR0FBSXlNLEdBQWlCcDRCLEtBQUtyTCxRQUFRazNCLFFBQ2xDLE9BQTBCLEtBQW5CdU0sR0FBd0J6TSxFQUFNRSxTQUFTdjBCLFNBQVc4Z0MsR0FTN0RILFFBQVMsU0FBU3RNLEdBQ2QsR0FBSW1HLEdBQVE5eEIsS0FBSzh4QixNQUNibmMsRUFBWWdXLEVBQU1oVyxVQUVsQjBpQixFQUFldkcsR0FBU1EsR0FBY0QsSUFDdENpRyxFQUFVdDRCLEtBQUttNEIsU0FBU3hNLEVBRzVCLE9BQUkwTSxLQUFpQjFpQixFQUFZeVcsS0FBaUJrTSxHQUN2Q3hHLEVBQVFLLEdBQ1JrRyxHQUFnQkMsRUFDbkIzaUIsRUFBWXdXLEdBQ0wyRixFQUFRTSxHQUNOTixFQUFRUSxHQUdkUixFQUFRTyxHQUZKQyxHQUlSa0YsTUFpQmY1TyxFQUFRZ0ssRUFBZUQsR0FLbkI1NEIsVUFDSW9jLE1BQU8sTUFDUG9pQixVQUFXLEdBQ1gxTSxTQUFVLEVBQ1ZoZ0IsVUFBV3hTLElBR2Y2OUIsZUFBZ0IsV0FDWixHQUFJcnJCLEdBQVk3TCxLQUFLckwsUUFBUWtYLFVBQ3pCd2xCLElBT0osT0FOSXhsQixHQUFZMVMsSUFDWms0QixFQUFReHdCLEtBQUs2d0IsSUFFYjdsQixFQUFZelMsSUFDWmk0QixFQUFReHdCLEtBQUsyd0IsSUFFVkgsR0FHWG1ILGNBQWUsU0FBUzdNLEdBQ3BCLEdBQUloM0IsR0FBVXFMLEtBQUtyTCxRQUNmOGpDLEdBQVcsRUFDWHBMLEVBQVcxQixFQUFNMEIsU0FDakJ4aEIsRUFBWThmLEVBQU05ZixVQUNsQmpNLEVBQUkrckIsRUFBTThCLE9BQ1ZydkIsRUFBSXV0QixFQUFNK0IsTUFlZCxPQVpNN2hCLEdBQVlsWCxFQUFRa1gsWUFDbEJsWCxFQUFRa1gsVUFBWTFTLElBQ3BCMFMsRUFBbUIsSUFBTmpNLEVBQVc1RyxHQUFzQixFQUFKNEcsRUFBUzh1QixHQUFpQkMsR0FDcEU4SixFQUFXNzRCLEdBQUtJLEtBQUs2eUIsR0FDckJ4RixFQUFXenJCLEtBQUtDLElBQUk4cEIsRUFBTThCLFVBRTFCNWhCLEVBQW1CLElBQU56TixFQUFXcEYsR0FBc0IsRUFBSm9GLEVBQVN3d0IsR0FBZUMsR0FDbEU0SixFQUFXcjZCLEdBQUs0QixLQUFLOHlCLEdBQ3JCekYsRUFBV3pyQixLQUFLQyxJQUFJOHBCLEVBQU0rQixVQUdsQy9CLEVBQU05ZixVQUFZQSxFQUNYNHNCLEdBQVlwTCxFQUFXMTRCLEVBQVE0akMsV0FBYTFzQixFQUFZbFgsRUFBUWtYLFdBRzNFc3NCLFNBQVUsU0FBU3hNLEdBQ2YsTUFBT2dILEdBQWU1OUIsVUFBVW9qQyxTQUFTbGpDLEtBQUsrSyxLQUFNMnJCLEtBQy9DM3JCLEtBQUs4eEIsTUFBUVEsTUFBa0J0eUIsS0FBSzh4QixNQUFRUSxLQUFnQnR5QixLQUFLdzRCLGNBQWM3TSxLQUd4RnhQLEtBQU0sU0FBU3dQLEdBQ1gzckIsS0FBSzZ5QixHQUFLbEgsRUFBTThCLE9BQ2hCenRCLEtBQUs4eUIsR0FBS25ILEVBQU0rQixNQUVoQixJQUFJN2hCLEdBQVkwbUIsRUFBYTVHLEVBQU05ZixVQUMvQkEsSUFDQTdMLEtBQUs0cUIsUUFBUXpPLEtBQUtuYyxLQUFLckwsUUFBUXdoQixNQUFRdEssRUFBVzhmLEdBR3REM3JCLEtBQUtrcEIsT0FBTy9NLEtBQUtsbkIsS0FBSytLLEtBQU0yckIsTUFjcEMvQyxFQUFRbUssRUFBaUJKLEdBS3JCNTRCLFVBQ0lvYyxNQUFPLFFBQ1BvaUIsVUFBVyxFQUNYMU0sU0FBVSxHQUdkcUwsZUFBZ0IsV0FDWixPQUFRNUYsS0FHWjZHLFNBQVUsU0FBU3hNLEdBQ2YsTUFBTzNyQixNQUFLa3BCLE9BQU9pUCxTQUFTbGpDLEtBQUsrSyxLQUFNMnJCLEtBQ2xDL3BCLEtBQUtDLElBQUk4cEIsRUFBTWdDLE1BQVEsR0FBSzN0QixLQUFLckwsUUFBUTRqQyxXQUFhdjRCLEtBQUs4eEIsTUFBUVEsS0FHNUVuVyxLQUFNLFNBQVN3UCxHQUVYLEdBREEzckIsS0FBS2twQixPQUFPL00sS0FBS2xuQixLQUFLK0ssS0FBTTJyQixHQUNSLElBQWhCQSxFQUFNZ0MsTUFBYSxDQUNuQixHQUFJK0ssR0FBUS9NLEVBQU1nQyxNQUFRLEVBQUksS0FBTyxLQUNyQzN0QixNQUFLNHFCLFFBQVF6TyxLQUFLbmMsS0FBS3JMLFFBQVF3aEIsTUFBUXVpQixFQUFPL00sT0FrQjFEL0MsRUFBUW9LLEdBQWlCbkIsR0FLckI5M0IsVUFDSW9jLE1BQU8sUUFDUDBWLFNBQVUsRUFDVnQxQixLQUFNLElBQ05naUMsVUFBVyxHQUdmckIsZUFBZ0IsV0FDWixPQUFRdEYsS0FHWnFHLFFBQVMsU0FBU3RNLEdBQ2QsR0FBSWgzQixHQUFVcUwsS0FBS3JMLFFBQ2Zna0MsRUFBZ0JoTixFQUFNRSxTQUFTdjBCLFNBQVczQyxFQUFRazNCLFNBQ2xEK00sRUFBZ0JqTixFQUFNMEIsU0FBVzE0QixFQUFRNGpDLFVBQ3pDTSxFQUFZbE4sRUFBTXVCLFVBQVl2NEIsRUFBUTRCLElBTTFDLElBSkF5SixLQUFLa3pCLE9BQVN2SCxHQUlUaU4sSUFBa0JELEdBQWtCaE4sRUFBTWhXLFdBQWF3VyxHQUFZQyxNQUFrQnlNLEVBQ3RGNzRCLEtBQUtrNEIsWUFDRixJQUFJdk0sRUFBTWhXLFVBQVlzVyxHQUN6QmpzQixLQUFLazRCLFFBQ0xsNEIsS0FBS2l6QixPQUFTNUssRUFBa0IsV0FDNUJyb0IsS0FBSzh4QixNQUFReUYsR0FDYnYzQixLQUFLODNCLFdBQ05uakMsRUFBUTRCLEtBQU15SixVQUNkLElBQUkyckIsRUFBTWhXLFVBQVl3VyxHQUN6QixNQUFPb0wsR0FFWCxPQUFPQyxLQUdYVSxNQUFPLFdBQ0gxekIsYUFBYXhFLEtBQUtpekIsU0FHdEI5VyxLQUFNLFNBQVN3UCxHQUNQM3JCLEtBQUs4eEIsUUFBVXlGLEtBSWY1TCxHQUFVQSxFQUFNaFcsVUFBWXdXLEdBQzVCbnNCLEtBQUs0cUIsUUFBUXpPLEtBQUtuYyxLQUFLckwsUUFBUXdoQixNQUFRLEtBQU13VixJQUU3QzNyQixLQUFLa3pCLE9BQU9sRyxVQUFZQyxLQUN4Qmp0QixLQUFLNHFCLFFBQVF6TyxLQUFLbmMsS0FBS3JMLFFBQVF3aEIsTUFBT25XLEtBQUtrekIsYUFldkR0SyxFQUFRdUssR0FBa0JSLEdBS3RCNTRCLFVBQ0lvYyxNQUFPLFNBQ1BvaUIsVUFBVyxFQUNYMU0sU0FBVSxHQUdkcUwsZUFBZ0IsV0FDWixPQUFRNUYsS0FHWjZHLFNBQVUsU0FBU3hNLEdBQ2YsTUFBTzNyQixNQUFLa3BCLE9BQU9pUCxTQUFTbGpDLEtBQUsrSyxLQUFNMnJCLEtBQ2xDL3BCLEtBQUtDLElBQUk4cEIsRUFBTWtDLFVBQVk3dEIsS0FBS3JMLFFBQVE0akMsV0FBYXY0QixLQUFLOHhCLE1BQVFRLE9BYy9FMUosRUFBUXdLLEdBQWlCVCxHQUtyQjU0QixVQUNJb2MsTUFBTyxRQUNQb2lCLFVBQVcsR0FDWHBLLFNBQVUsSUFDVnRpQixVQUFXMVMsR0FBdUJDLEdBQ2xDeXlCLFNBQVUsR0FHZHFMLGVBQWdCLFdBQ1osTUFBT3RFLEdBQWM3OUIsVUFBVW1pQyxlQUFlamlDLEtBQUsrSyxPQUd2RG00QixTQUFVLFNBQVN4TSxHQUNmLEdBQ0l3QyxHQURBdGlCLEVBQVk3TCxLQUFLckwsUUFBUWtYLFNBVzdCLE9BUklBLElBQWExUyxHQUF1QkMsSUFDcEMrMEIsRUFBV3hDLEVBQU13QyxTQUNWdGlCLEVBQVkxUyxHQUNuQmcxQixFQUFXeEMsRUFBTXlDLFVBQ1Z2aUIsRUFBWXpTLEtBQ25CKzBCLEVBQVd4QyxFQUFNMEMsV0FHZHJ1QixLQUFLa3BCLE9BQU9pUCxTQUFTbGpDLEtBQUsrSyxLQUFNMnJCLElBQ25DOWYsRUFBWThmLEVBQU05ZixXQUNsQjhmLEVBQU0wQixTQUFXcnRCLEtBQUtyTCxRQUFRNGpDLFdBQzlCMTJCLEdBQUlzc0IsR0FBWW51QixLQUFLckwsUUFBUXc1QixVQUFZeEMsRUFBTWhXLFVBQVl3VyxJQUduRWhRLEtBQU0sU0FBU3dQLEdBQ1gsR0FBSTlmLEdBQVkwbUIsRUFBYTVHLEVBQU05ZixVQUMvQkEsSUFDQTdMLEtBQUs0cUIsUUFBUXpPLEtBQUtuYyxLQUFLckwsUUFBUXdoQixNQUFRdEssRUFBVzhmLEdBR3REM3JCLEtBQUs0cUIsUUFBUXpPLEtBQUtuYyxLQUFLckwsUUFBUXdoQixNQUFPd1YsTUEyQjlDL0MsRUFBUXlLLEdBQWV4QixHQUtuQjkzQixVQUNJb2MsTUFBTyxNQUNQMFYsU0FBVSxFQUNWaU4sS0FBTSxFQUNOQyxTQUFVLElBQ1Z4aUMsS0FBTSxJQUNOZ2lDLFVBQVcsRUFDWFMsYUFBYyxJQUdsQjlCLGVBQWdCLFdBQ1osT0FBUXZGLEtBR1pzRyxRQUFTLFNBQVN0TSxHQUNkLEdBQUloM0IsR0FBVXFMLEtBQUtyTCxRQUVmZ2tDLEVBQWdCaE4sRUFBTUUsU0FBU3YwQixTQUFXM0MsRUFBUWszQixTQUNsRCtNLEVBQWdCak4sRUFBTTBCLFNBQVcxNEIsRUFBUTRqQyxVQUN6Q1UsRUFBaUJ0TixFQUFNdUIsVUFBWXY0QixFQUFRNEIsSUFJL0MsSUFGQXlKLEtBQUtrNEIsUUFFQXZNLEVBQU1oVyxVQUFZc1csSUFBZ0MsSUFBZmpzQixLQUFLd3pCLE1BQ3pDLE1BQU94ekIsTUFBS2s1QixhQUtoQixJQUFJTixHQUFpQkssR0FBa0JOLEVBQWUsQ0FDbEQsR0FBSWhOLEVBQU1oVyxXQUFhd1csR0FDbkIsTUFBT25zQixNQUFLazVCLGFBR2hCLElBQUlDLEdBQWdCbjVCLEtBQUtzekIsTUFBUzNILEVBQU1xQixVQUFZaHRCLEtBQUtzekIsTUFBUTMrQixFQUFRb2tDLFVBQVksRUFDakZLLEdBQWlCcDVCLEtBQUt1ekIsU0FBV2pHLEVBQVl0dEIsS0FBS3V6QixRQUFTNUgsRUFBTW1CLFFBQVVuNEIsRUFBUXFrQyxZQUV2Rmg1QixNQUFLc3pCLE1BQVEzSCxFQUFNcUIsVUFDbkJodEIsS0FBS3V6QixRQUFVNUgsRUFBTW1CLE9BRWhCc00sR0FBa0JELEVBR25CbjVCLEtBQUt3ekIsT0FBUyxFQUZkeHpCLEtBQUt3ekIsTUFBUSxFQUtqQnh6QixLQUFLa3pCLE9BQVN2SCxDQUlkLElBQUkwTixHQUFXcjVCLEtBQUt3ekIsTUFBUTcrQixFQUFRbWtDLElBQ3BDLElBQWlCLElBQWJPLEVBR0EsTUFBS3I1QixNQUFLMjNCLHNCQUdOMzNCLEtBQUtpekIsT0FBUzVLLEVBQWtCLFdBQzVCcm9CLEtBQUs4eEIsTUFBUXlGLEdBQ2J2M0IsS0FBSzgzQixXQUNObmpDLEVBQVFva0MsU0FBVS80QixNQUNkc3lCLElBTkFpRixHQVVuQixNQUFPQyxLQUdYMEIsWUFBYSxXQUlULE1BSEFsNUIsTUFBS2l6QixPQUFTNUssRUFBa0IsV0FDNUJyb0IsS0FBSzh4QixNQUFRMEYsSUFDZHgzQixLQUFLckwsUUFBUW9rQyxTQUFVLzRCLE1BQ25CdzNCLElBR1hVLE1BQU8sV0FDSDF6QixhQUFheEUsS0FBS2l6QixTQUd0QjlXLEtBQU0sV0FDRW5jLEtBQUs4eEIsT0FBU3lGLEtBQ2R2M0IsS0FBS2t6QixPQUFPbUcsU0FBV3I1QixLQUFLd3pCLE1BQzVCeHpCLEtBQUs0cUIsUUFBUXpPLEtBQUtuYyxLQUFLckwsUUFBUXdoQixNQUFPblcsS0FBS2t6QixZQW9CdkQ1K0IsR0FBT2dsQyxRQUFVLFFBTWpCaGxDLEdBQU95RixVQU9Idy9CLFdBQVcsRUFRWDNGLFlBQWFvRCxHQU1idlgsUUFBUSxFQVNSb0wsWUFBYSxLQU9iSyxXQUFZLEtBT1p3SSxTQUVLUCxJQUFvQjFULFFBQVEsS0FDNUJzVCxHQUFtQnRULFFBQVEsSUFBVSxZQUNyQzJULElBQWtCdm5CLFVBQVcxUyxNQUM3Qnk1QixHQUFpQi9tQixVQUFXMVMsS0FBeUIsV0FDckRrNkIsS0FDQUEsSUFBaUJsZCxNQUFPLFlBQWEyaUIsS0FBTSxJQUFNLFNBQ2pEOUYsS0FRTGlCLFVBTUl1RixXQUFZLE9BT1pDLFlBQWEsT0FTYkMsYUFBYyxPQU9kQyxlQUFnQixPQU9oQkMsU0FBVSxPQVFWQyxrQkFBbUIsaUJBSTNCLElBQUlDLElBQU8sRUFDUEMsR0FBYyxDQStCbEJwRyxJQUFRNStCLFdBTUo2aEIsSUFBSyxTQUFTamlCLEdBYVYsTUFaQU8sR0FBTzhLLEtBQUtyTCxRQUFTQSxHQUdqQkEsRUFBUWkvQixhQUNSNXpCLEtBQUs0ekIsWUFBWXRvQixTQUVqQjNXLEVBQVFrMkIsY0FFUjdxQixLQUFLMnJCLE1BQU1wVSxVQUNYdlgsS0FBSzJyQixNQUFNdHpCLE9BQVMxRCxFQUFRazJCLFlBQzVCN3FCLEtBQUsyckIsTUFBTWpvQixRQUVSMUQsTUFTWHVFLEtBQU0sU0FBU3kxQixHQUNYaDZCLEtBQUtxc0IsUUFBUTVuQixRQUFVdTFCLEVBQVFELEdBQWNELElBU2pEdk4sVUFBVyxTQUFTcUssR0FDaEIsR0FBSXZLLEdBQVVyc0IsS0FBS3FzQixPQUNuQixLQUFJQSxFQUFRNW5CLFFBQVosQ0FLQXpFLEtBQUs0ekIsWUFBWXVELGdCQUFnQlAsRUFFakMsSUFBSWxFLEdBQ0FlLEVBQWN6ekIsS0FBS3l6QixZQUtuQndHLEVBQWdCNU4sRUFBUTROLGdCQUl2QkEsR0FBa0JBLEdBQWlCQSxFQUFjbkksTUFBUXlGLE1BQzFEMEMsRUFBZ0I1TixFQUFRNE4sY0FBZ0IsS0FJNUMsS0FEQSxHQUFJNWtDLEdBQUksRUFDREEsRUFBSW8rQixFQUFZbjhCLFFBQ25CbzdCLEVBQWFlLEVBQVlwK0IsR0FRckJnM0IsRUFBUTVuQixVQUFZczFCLElBQ2ZFLEdBQWlCdkgsR0FBY3VILElBQ2hDdkgsRUFBV2tGLGlCQUFpQnFDLEdBR2hDdkgsRUFBV3dGLFFBRlh4RixFQUFXbkcsVUFBVXFLLElBT3BCcUQsR0FBaUJ2SCxFQUFXWixPQUFTUSxHQUFjRCxHQUFnQkQsTUFDcEU2SCxFQUFnQjVOLEVBQVE0TixjQUFnQnZILEdBRTVDcjlCLE1BU1JzaEIsSUFBSyxTQUFTK2IsR0FDVixHQUFJQSxZQUFzQmIsR0FDdEIsTUFBT2EsRUFJWCxLQUFLLEdBRERlLEdBQWN6ekIsS0FBS3l6QixZQUNkcCtCLEVBQUksRUFBR0EsRUFBSW8rQixFQUFZbjhCLE9BQVFqQyxJQUNwQyxHQUFJbytCLEVBQVlwK0IsR0FBR1YsUUFBUXdoQixPQUFTdWMsRUFDaEMsTUFBT2UsR0FBWXArQixFQUczQixPQUFPLE9BU1h5ZixJQUFLLFNBQVM0ZCxHQUNWLEdBQUlsSyxFQUFla0ssRUFBWSxNQUFPMXlCLE1BQ2xDLE1BQU9BLEtBSVgsSUFBSWs2QixHQUFXbDZCLEtBQUsyVyxJQUFJK2IsRUFBVy85QixRQUFRd2hCLE1BUzNDLE9BUkkrakIsSUFDQWw2QixLQUFLNlYsT0FBT3FrQixHQUdoQmw2QixLQUFLeXpCLFlBQVk1eUIsS0FBSzZ4QixHQUN0QkEsRUFBVzlILFFBQVU1cUIsS0FFckJBLEtBQUs0ekIsWUFBWXRvQixTQUNWb25CLEdBUVg3YyxPQUFRLFNBQVM2YyxHQUNiLEdBQUlsSyxFQUFla0ssRUFBWSxTQUFVMXlCLE1BQ3JDLE1BQU9BLEtBR1gsSUFBSXl6QixHQUFjenpCLEtBQUt5ekIsV0FLdkIsT0FKQWYsR0FBYTF5QixLQUFLMlcsSUFBSStiLEdBQ3RCZSxFQUFZcGlCLE9BQU8yVCxFQUFReU8sRUFBYWYsR0FBYSxHQUVyRDF5QixLQUFLNHpCLFlBQVl0b0IsU0FDVnRMLE1BU1h5UyxHQUFJLFNBQVMwbkIsRUFBUXBrQyxHQUNqQixHQUFJdXZCLEdBQVd0bEIsS0FBS3NsQixRQUtwQixPQUpBN0wsR0FBS2lRLEVBQVN5USxHQUFTLFNBQVNoa0IsR0FDNUJtUCxFQUFTblAsR0FBU21QLEVBQVNuUCxPQUMzQm1QLEVBQVNuUCxHQUFPdFYsS0FBSzlLLEtBRWxCaUssTUFTWGdXLElBQUssU0FBU21rQixFQUFRcGtDLEdBQ2xCLEdBQUl1dkIsR0FBV3RsQixLQUFLc2xCLFFBUXBCLE9BUEE3TCxHQUFLaVEsRUFBU3lRLEdBQVMsU0FBU2hrQixHQUN2QnBnQixFQUdEdXZCLEVBQVNuUCxHQUFPOUUsT0FBTzJULEVBQVFNLEVBQVNuUCxHQUFRcGdCLEdBQVUsU0FGbkR1dkIsR0FBU25QLEtBS2pCblcsTUFRWG1jLEtBQU0sU0FBU2hHLEVBQU9nZSxHQUVkbjBCLEtBQUtyTCxRQUFRNGtDLFdBQ2JyRixHQUFnQi9kLEVBQU9nZSxFQUkzQixJQUFJN08sR0FBV3RsQixLQUFLc2xCLFNBQVNuUCxJQUFVblcsS0FBS3NsQixTQUFTblAsR0FBT3RZLE9BQzVELElBQUt5bkIsR0FBYUEsRUFBU2h1QixPQUEzQixDQUlBNjhCLEVBQUsxeEIsS0FBTzBULEVBQ1pnZSxFQUFLL2QsZUFBaUIsV0FDbEIrZCxFQUFLbkcsU0FBUzVYLGlCQUlsQixLQURBLEdBQUkvZ0IsR0FBSSxFQUNEQSxFQUFJaXdCLEVBQVNodUIsUUFDaEJndUIsRUFBU2p3QixHQUFHOCtCLEdBQ1o5K0IsTUFRUmtpQixRQUFTLFdBQ0x2WCxLQUFLdEwsU0FBV20vQixHQUFlN3pCLE1BQU0sR0FFckNBLEtBQUtzbEIsWUFDTHRsQixLQUFLcXNCLFdBQ0xyc0IsS0FBSzJyQixNQUFNcFUsVUFDWHZYLEtBQUt0TCxRQUFVLE9BNEJ2QlEsRUFBT1osSUFDSDIzQixZQUFhQSxHQUNiNEUsV0FBWUEsR0FDWjFFLFVBQVdBLEdBQ1hDLGFBQWNBLEdBRWQyRixlQUFnQkEsR0FDaEJPLFlBQWFBLEdBQ2JELGNBQWVBLEdBQ2ZELFlBQWFBLEdBQ2JtRixpQkFBa0JBLEdBQ2xCcEYsZ0JBQWlCQSxHQUNqQnFGLGFBQWNBLEdBRWR4K0IsZUFBZ0JBLEdBQ2hCMDFCLGVBQWdCQSxHQUNoQkMsZ0JBQWlCQSxHQUNqQkMsYUFBY0EsR0FDZEMsZUFBZ0JBLEdBQ2hCMTFCLHFCQUFzQkEsR0FDdEJDLG1CQUFvQkEsR0FDcEJDLGNBQWVBLEdBRWZzNkIsUUFBU0EsR0FDVGhKLE1BQU9BLEVBQ1B3RyxZQUFhQSxFQUViN0YsV0FBWUEsRUFDWkcsV0FBWUEsRUFDWkwsa0JBQW1CQSxFQUNuQkksZ0JBQWlCQSxFQUNqQndFLGlCQUFrQkEsRUFFbEI2QixXQUFZQSxFQUNaYyxlQUFnQkEsRUFDaEJ5SCxJQUFLL0csR0FDTGdILElBQUt6SCxFQUNMMEgsTUFBT2xILEdBQ1BtSCxNQUFPeEgsRUFDUHlILE9BQVFySCxHQUNSc0gsTUFBT3pILEdBRVB2Z0IsR0FBSStXLEVBQ0p4VCxJQUFLMlQsRUFDTGxRLEtBQU1BLEVBQ05pTixNQUFPQSxFQUNQeHhCLE9BQVFBLEVBQ1IwekIsUUFBU0EsRUFDVEwsT0FBUUEsRUFDUmhuQixTQUFVQSxVQUdIZ2IsU0FBVTZNLElBQWlCN00sT0FBT0MsSUFDekNELE9BQU8sV0FDSCxNQUFPam9CLE1BRWEsbUJBQVZtb0IsU0FBeUJBLE9BQU9DLFFBQzlDRCxPQUFPQyxRQUFVcG9CLEdBRWpCa04sRUFBTzRtQixHQUFjOXpCLElBR3RCa04sT0FBUTlMLFNBQVUsVUEyMkhDLGtCQUFYNm1CLFNBQXlCQSxPQUFPQyxJQUV6Q0QsUUFBUSxlQUFnQixVQUFXbm9CLG9CQUM5QixDQUdMRSxPQUE0QixrQkFBWEEsUUFBeUIsS0FBTUEsT0FDaERELGFBQXdDLGtCQUFqQkEsY0FBK0IsS0FBTUEsWUFFNUQsSUFBSTJILFVBQVc1SCxlQUFlQyxhQUFjQyxTQW1COUMsU0FBWWtOLEdBUVosUUFBU2s1QixNQUlULFFBQVNDLEdBQWUzaUIsR0FheEIsUUFBUzRpQixHQUFpQkMsR0FFbkJBLEVBQVk5bEMsVUFBVTJOLFNBSzNCbTRCLEVBQVk5bEMsVUFBVTJOLE9BQVMsU0FBVW80QixHQUVqQzlpQixFQUFFK2lCLGNBQWVELEtBR3ZCOTZCLEtBQUtyTCxRQUFVcWpCLEVBQUU5aUIsUUFBUSxFQUFNOEssS0FBS3JMLFFBQVNtbUMsTUFrQmpELFFBQVNFLEdBQVF0VixFQUFXbVYsR0FFMUI3aUIsRUFBRTBGLEdBQUlnSSxHQUFjLFNBQVUvd0IsR0FDNUIsR0FBd0IsZ0JBQVpBLEdBQXVCLENBS2pDLElBQU0sR0FGRjRxQixHQUFPMWhCLEVBQU01SSxLQUFNaUwsVUFBVyxHQUV4QjdLLEVBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUsxSSxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUMvQyxHQUFJNmxDLEdBQU9sN0IsS0FBSzNLLEdBQ1piLEVBQVd3akIsRUFBRW1jLEtBQU0rRyxFQUFNeFYsRUFDN0IsSUFBTWx4QixFQUtOLEdBQU13akIsRUFBRXlQLFdBQVlqekIsRUFBU0csS0FBb0MsTUFBdEJBLEVBQVFnSixPQUFPLEdBQTFELENBTUEsR0FBSTBZLEdBQWM3aEIsRUFBVUcsR0FBVXdMLE1BQU8zTCxFQUFVK3FCLEVBR3ZELElBQXFCeG9CLFNBQWhCc2YsRUFDSCxNQUFPQSxPQVRQOGtCLEdBQVUsbUJBQXFCeG1DLEVBQVUsU0FBVyt3QixFQUFZLGlCQUxoRXlWLEdBQVUsMEJBQTRCelYsRUFBWSxnREFDeEIvd0IsRUFBVSxLQWlCeEMsTUFBT3FMLE1BRVAsTUFBT0EsTUFBS3laLEtBQU0sV0FDaEIsR0FBSWpsQixHQUFXd2pCLEVBQUVtYyxLQUFNbjBCLEtBQU0wbEIsRUFDeEJseEIsSUFFSEEsRUFBU2tPLE9BQVEvTixHQUNqQkgsRUFBUzRtQyxVQUdUNW1DLEVBQVcsR0FBSXFtQyxHQUFhNzZCLEtBQU1yTCxHQUNsQ3FqQixFQUFFbWMsS0FBTW4wQixLQUFNMGxCLEVBQVdseEIsT0FqRm5DLEdBQU13akIsRUFBTixDQThCQSxHQUFJbWpCLEdBQThCLG1CQUFacGlCLFNBQTBCMmhCLEVBQzlDLFNBQVVXLEdBQ1J0aUIsUUFBUXVpQixNQUFPRCxHQXNFbkIsT0FMQXJqQixHQUFFdWpCLFFBQVUsU0FBVTdWLEVBQVdtVixHQUMvQkQsRUFBaUJDLEdBQ2pCRyxFQUFRdFYsRUFBV21WLElBR2Q3aUIsRUFBRXVqQixTQS9HVCxHQUFJMTlCLEdBQVE0RCxNQUFNMU0sVUFBVThJLEtBb0hMLG1CQUFYMGUsU0FBeUJBLE9BQU9DLElBRTFDRCxPQUFRLGlDQUFrQyxVQUFZb2UsR0FFdERBLEVBRDZCLGdCQUFaamUsU0FDRkksUUFBUSxVQUdSdGIsRUFBTzJiLFNBR3BCM2IsUUFpQkosU0FBWUEsR0FNWixRQUFTZzZCLEdBQVV0a0MsR0FDakIsTUFBTyxJQUFJRixRQUFPLFdBQWFFLEVBQVksWUFnQzdDLFFBQVN1a0MsR0FBYVAsRUFBTW4rQixHQUMxQixHQUFJMmdCLEdBQUs3bUIsRUFBVXFrQyxFQUFNbitCLEdBQU14RixFQUFjSixDQUM3Q3VtQixHQUFJd2QsRUFBTW4rQixHQTdCWixHQUFJbEcsR0FBVU0sRUFBVUksQ0FFbkIsY0FBZTdCLFVBQVMySSxpQkFDM0J4SCxFQUFXLFNBQVVxa0MsRUFBTW4rQixHQUN6QixNQUFPbStCLEdBQUtRLFVBQVVDLFNBQVU1K0IsSUFFbEM1RixFQUFXLFNBQVUrakMsRUFBTW4rQixHQUN6Qm0rQixFQUFLUSxVQUFVNW1CLElBQUsvWCxJQUV0QnhGLEVBQWMsU0FBVTJqQyxFQUFNbitCLEdBQzVCbStCLEVBQUtRLFVBQVU3bEIsT0FBUTlZLE1BSXpCbEcsRUFBVyxTQUFVcWtDLEVBQU1uK0IsR0FDekIsTUFBT3krQixHQUFVeitCLEdBQUk5RixLQUFNaWtDLEVBQUtoa0MsWUFFbENDLEVBQVcsU0FBVStqQyxFQUFNbitCLEdBQ25CbEcsRUFBVXFrQyxFQUFNbitCLEtBQ3BCbStCLEVBQUtoa0MsVUFBWWdrQyxFQUFLaGtDLFVBQVksSUFBTTZGLElBRzVDeEYsRUFBYyxTQUFVMmpDLEVBQU1uK0IsR0FDNUJtK0IsRUFBS2hrQyxVQUFZZ2tDLEVBQUtoa0MsVUFBVU4sUUFBUzRrQyxFQUFVeitCLEdBQUssTUFTNUQsSUFBSTYrQixJQUVGL2tDLFNBQVVBLEVBQ1ZNLFNBQVVBLEVBQ1ZJLFlBQWFBLEVBQ2Jra0MsWUFBYUEsRUFFYkksSUFBS2hsQyxFQUNMaWUsSUFBSzNkLEVBQ0wwZSxPQUFRdGUsRUFDUnVrQyxPQUFRTCxFQUlhLG1CQUFYbGYsU0FBeUJBLE9BQU9DLElBRTFDRCxPQUFRLGtCQUFrQnFmLEdBQ0csZ0JBQVpsZixTQUVqQkQsT0FBT0MsUUFBVWtmLEVBR2pCcDZCLEVBQU9vNkIsUUFBVUEsR0FHZnA2QixRQVNGLFdBU0UsUUFBU3daLE1BZVQsUUFBUytnQixHQUFnQnZXLEVBQVcxSyxHQUVoQyxJQURBLEdBQUl6bEIsR0FBSW13QixFQUFVbHVCLE9BQ1hqQyxLQUNILEdBQUltd0IsRUFBVW53QixHQUFHeWxCLFdBQWFBLEVBQzFCLE1BQU96bEIsRUFJZixPQUFPLEdBVVgsUUFBUzJtQyxHQUFNbGxDLEdBQ1gsTUFBTyxZQUNILE1BQU9rSixNQUFLbEosR0FBTXFKLE1BQU1ILEtBQU1FLFlBaEN0QyxHQUFJKzdCLEdBQVFqaEIsRUFBYWptQixVQUNyQjJuQixFQUFVMWMsS0FDVms4QixFQUFzQnhmLEVBQVExQixZQTJDbENpaEIsR0FBTWhoQixhQUFlLFNBQXNCa2hCLEdBQ3ZDLEdBQ0lDLEdBQ0EvZCxFQUZBOGIsRUFBU242QixLQUFLa2IsWUFNbEIsSUFBSWloQixZQUFlbmxDLFFBQVEsQ0FDdkJvbEMsSUFDQSxLQUFLL2QsSUFBTzhiLEdBQ0pBLEVBQU90NkIsZUFBZXdlLElBQVE4ZCxFQUFJbGxDLEtBQUtvbkIsS0FDdkMrZCxFQUFTL2QsR0FBTzhiLEVBQU85YixRQUsvQitkLEdBQVdqQyxFQUFPZ0MsS0FBU2hDLEVBQU9nQyxNQUd0QyxPQUFPQyxJQVNYSCxFQUFNOWdCLGlCQUFtQixTQUEwQnFLLEdBQy9DLEdBQ0lud0IsR0FEQWduQyxJQUdKLEtBQUtobkMsRUFBSSxFQUFHQSxFQUFJbXdCLEVBQVVsdUIsT0FBUWpDLEdBQUssRUFDbkNnbkMsRUFBY3g3QixLQUFLMmtCLEVBQVVud0IsR0FBR3lsQixTQUdwQyxPQUFPdWhCLElBU1hKLEVBQU03Z0IscUJBQXVCLFNBQThCK2dCLEdBQ3ZELEdBQ0lDLEdBREE1VyxFQUFZeGxCLEtBQUtpYixhQUFha2hCLEVBUWxDLE9BTEkzVyxhQUFxQi9qQixTQUNyQjI2QixLQUNBQSxFQUFTRCxHQUFPM1csR0FHYjRXLEdBQVk1VyxHQWF2QnlXLEVBQU01Z0IsWUFBYyxTQUFxQjhnQixFQUFLcmhCLEdBQzFDLEdBRUl1RCxHQUZBbUgsRUFBWXhsQixLQUFLb2IscUJBQXFCK2dCLEdBQ3RDRyxFQUF3QyxnQkFBYnhoQixFQUcvQixLQUFLdUQsSUFBT21ILEdBQ0pBLEVBQVUzbEIsZUFBZXdlLElBQXNELEtBQTlDMGQsRUFBZ0J2VyxFQUFVbkgsR0FBTXZELElBQ2pFMEssRUFBVW5ILEdBQUt4ZCxLQUFLeTdCLEVBQW9CeGhCLEdBQ3BDQSxTQUFVQSxFQUNWUSxNQUFNLEdBS2xCLE9BQU90YixPQU1YaThCLEVBQU14cEIsR0FBS3VwQixFQUFNLGVBVWpCQyxFQUFNMWdCLGdCQUFrQixTQUF5QjRnQixFQUFLcmhCLEdBQ2xELE1BQU85YSxNQUFLcWIsWUFBWThnQixHQUNwQnJoQixTQUFVQSxFQUNWUSxNQUFNLEtBT2QyZ0IsRUFBTTNnQixLQUFPMGdCLEVBQU0sbUJBU25CQyxFQUFNemdCLFlBQWMsU0FBcUIyZ0IsR0FFckMsTUFEQW44QixNQUFLaWIsYUFBYWtoQixHQUNYbjhCLE1BU1hpOEIsRUFBTXhnQixhQUFlLFNBQXNCOGdCLEdBQ3ZDLElBQUssR0FBSWxuQyxHQUFJLEVBQUdBLEVBQUlrbkMsRUFBS2psQyxPQUFRakMsR0FBSyxFQUNsQzJLLEtBQUt3YixZQUFZK2dCLEVBQUtsbkMsR0FFMUIsT0FBTzJLLE9BV1hpOEIsRUFBTXZnQixlQUFpQixTQUF3QnlnQixFQUFLcmhCLEdBQ2hELEdBQ0lpSyxHQUNBMUcsRUFGQW1ILEVBQVl4bEIsS0FBS29iLHFCQUFxQitnQixFQUkxQyxLQUFLOWQsSUFBT21ILEdBQ0pBLEVBQVUzbEIsZUFBZXdlLEtBQ3pCMEcsRUFBUWdYLEVBQWdCdlcsRUFBVW5ILEdBQU12RCxHQUUxQixLQUFWaUssR0FDQVMsRUFBVW5ILEdBQUtoTixPQUFPMFQsRUFBTyxHQUt6QyxPQUFPL2tCLE9BTVhpOEIsRUFBTWptQixJQUFNZ21CLEVBQU0sa0JBWWxCQyxFQUFNdGdCLGFBQWUsU0FBc0J3Z0IsRUFBSzNXLEdBRTVDLE1BQU94bEIsTUFBSzRiLHFCQUFvQixFQUFPdWdCLEVBQUszVyxJQWFoRHlXLEVBQU1wZ0IsZ0JBQWtCLFNBQXlCc2dCLEVBQUszVyxHQUVsRCxNQUFPeGxCLE1BQUs0YixxQkFBb0IsRUFBTXVnQixFQUFLM1csSUFlL0N5VyxFQUFNcmdCLG9CQUFzQixTQUE2Qi9GLEVBQVFzbUIsRUFBSzNXLEdBQ2xFLEdBQUlud0IsR0FDQUcsRUFDQWduQyxFQUFTM21CLEVBQVM3VixLQUFLMGIsZUFBaUIxYixLQUFLcWIsWUFDN0NvaEIsRUFBVzVtQixFQUFTN1YsS0FBSzZiLGdCQUFrQjdiLEtBQUsyYixZQUdwRCxJQUFtQixnQkFBUndnQixJQUFzQkEsWUFBZW5sQyxRQW1CNUMsSUFEQTNCLEVBQUltd0IsRUFBVWx1QixPQUNQakMsS0FDSG1uQyxFQUFPdm5DLEtBQUsrSyxLQUFNbThCLEVBQUszVyxFQUFVbndCLFFBbkJyQyxLQUFLQSxJQUFLOG1DLEdBQ0ZBLEVBQUl0OEIsZUFBZXhLLEtBQU9HLEVBQVEybUMsRUFBSTltQyxNQUVqQixrQkFBVkcsR0FDUGduQyxFQUFPdm5DLEtBQUsrSyxLQUFNM0ssRUFBR0csR0FJckJpbkMsRUFBU3huQyxLQUFLK0ssS0FBTTNLLEVBQUdHLEdBZXZDLE9BQU93SyxPQVlYaThCLEVBQU05bEMsWUFBYyxTQUFxQmdtQyxHQUNyQyxHQUVJOWQsR0FGQTViLFFBQWMwNUIsR0FDZGhDLEVBQVNuNkIsS0FBS2tiLFlBSWxCLElBQWEsV0FBVHpZLFFBRU8wM0IsR0FBT2dDLE9BRWIsSUFBSUEsWUFBZW5sQyxRQUVwQixJQUFLcW5CLElBQU84YixHQUNKQSxFQUFPdDZCLGVBQWV3ZSxJQUFROGQsRUFBSWxsQyxLQUFLb25CLFVBQ2hDOGIsR0FBTzliLGNBTWZyZSxNQUFLK2IsT0FHaEIsT0FBTy9iLE9BUVhpOEIsRUFBTWpnQixtQkFBcUJnZ0IsRUFBTSxlQWNqQ0MsRUFBTWhnQixVQUFZLFNBQW1Ca2dCLEVBQUs1YyxHQUN0QyxHQUNJekUsR0FDQXpsQixFQUNBZ3BCLEVBQ0ErZCxFQUpBNVcsRUFBWXhsQixLQUFLb2IscUJBQXFCK2dCLEVBTTFDLEtBQUs5ZCxJQUFPbUgsR0FDUixHQUFJQSxFQUFVM2xCLGVBQWV3ZSxHQUd6QixJQUZBaHBCLEVBQUltd0IsRUFBVW5ILEdBQUsvbUIsT0FFWmpDLEtBR0h5bEIsRUFBVzBLLEVBQVVuSCxHQUFLaHBCLEdBRXRCeWxCLEVBQVNRLFFBQVMsR0FDbEJ0YixLQUFLMGIsZUFBZXlnQixFQUFLcmhCLEVBQVNBLFVBR3RDc2hCLEVBQVd0aEIsRUFBU0EsU0FBUzNhLE1BQU1ILEtBQU11ZixPQUVyQzZjLElBQWFwOEIsS0FBS2tjLHVCQUNsQmxjLEtBQUswYixlQUFleWdCLEVBQUtyaEIsRUFBU0EsU0FNbEQsT0FBTzlhLE9BTVhpOEIsRUFBTTNpQixRQUFVMGlCLEVBQU0sYUFVdEJDLEVBQU05ZixLQUFPLFNBQWNnZ0IsR0FDdkIsR0FBSTVjLEdBQU85ZCxNQUFNMU0sVUFBVThJLE1BQU01SSxLQUFLaUwsVUFBVyxFQUNqRCxPQUFPRixNQUFLaWMsVUFBVWtnQixFQUFLNWMsSUFXL0IwYyxFQUFNN2YsbUJBQXFCLFNBQTRCNW1CLEdBRW5ELE1BREF3SyxNQUFLcWMsaUJBQW1CN21CLEVBQ2pCd0ssTUFXWGk4QixFQUFNL2Ysb0JBQXNCLFdBQ3hCLE1BQUlsYyxNQUFLSCxlQUFlLG9CQUNiRyxLQUFLcWMsa0JBR0wsR0FVZjRmLEVBQU0vZ0IsV0FBYSxXQUNmLE1BQU9sYixNQUFLK2IsVUFBWS9iLEtBQUsrYixhQVFqQ2YsRUFBYXNCLFdBQWEsV0FFdEIsTUFEQUksR0FBUTFCLGFBQWVraEIsRUFDaEJsaEIsR0FJVyxrQkFBWHVCLFNBQXlCQSxPQUFPQyxJQUN2Q0QsT0FBTywrQkFBK0IsV0FDbEMsTUFBT3ZCLEtBR1ksZ0JBQVh5QixTQUF1QkEsT0FBT0MsUUFDMUNELE9BQU9DLFFBQVUxQixFQUdqQjBCLEVBQVExQixhQUFlQSxHQUU3Qi9sQixLQUFLK0ssTUFhUCxTQUFZd0IsR0FRWixRQUFTazdCLEdBQVluaUIsR0FDbkIsR0FBSXBFLEdBQVEzVSxFQUFPMlUsS0FHbkIsT0FEQUEsR0FBTTlkLE9BQVM4ZCxFQUFNOWQsUUFBVThkLEVBQU1JLFlBQWNnRSxFQUM1Q3BFLEVBUlQsR0FBSXdtQixHQUFVam5DLFNBQVMySSxnQkFFbkJaLEVBQU8sWUFTTmsvQixHQUFRM21DLGlCQUNYeUgsRUFBTyxTQUFVOGMsRUFBSzlYLEVBQU1pYixHQUMxQm5ELEVBQUl2a0IsaUJBQWtCeU0sRUFBTWliLEdBQUksSUFFeEJpZixFQUFRMW1DLGNBQ2xCd0gsRUFBTyxTQUFVOGMsRUFBSzlYLEVBQU1pYixHQUMxQm5ELEVBQUs5WCxFQUFPaWIsR0FBT0EsRUFBR2YsWUFDcEIsV0FDRSxHQUFJeEcsR0FBUXVtQixFQUFZbmlCLEVBQ3hCbUQsR0FBR2YsWUFBWTFuQixLQUFNeW9CLEVBQUl2SCxJQUUzQixXQUNFLEdBQUlBLEdBQVF1bUIsRUFBWW5pQixFQUN4Qm1ELEdBQUd6b0IsS0FBTXNsQixFQUFLcEUsSUFFbEJvRSxFQUFJdGtCLFlBQWEsS0FBT3dNLEVBQU04WCxFQUFLOVgsRUFBT2liLEtBSTlDLElBQUlkLEdBQVMsWUFFUitmLEdBQVF2bUMsb0JBQ1h3bUIsRUFBUyxTQUFVckMsRUFBSzlYLEVBQU1pYixHQUM1Qm5ELEVBQUlua0Isb0JBQXFCcU0sRUFBTWliLEdBQUksSUFFM0JpZixFQUFRdG1DLGNBQ2xCdW1CLEVBQVMsU0FBVXJDLEVBQUs5WCxFQUFNaWIsR0FDNUJuRCxFQUFJbGtCLFlBQWEsS0FBT29NLEVBQU04WCxFQUFLOVgsRUFBT2liLEdBQzFDLFdBQ1NuRCxHQUFLOVgsRUFBT2liLEdBQ25CLE1BQVFrZixHQUVScmlCLEVBQUs5WCxFQUFPaWIsR0FBTzNtQixTQUt6QixJQUFJOGxCLElBQ0ZwZixLQUFNQSxFQUNObWYsT0FBUUEsRUFLYSxtQkFBWEwsU0FBeUJBLE9BQU9DLElBRTFDRCxPQUFRLGtCQUFrQk0sR0FDRyxnQkFBWkgsU0FFakJELE9BQU9DLFFBQVVHLEVBR2pCcmIsRUFBT3FiLFFBQVVBLEdBR2ZyYixRQVlKLFNBQVlBLEdBT1osUUFBU3E3QixHQUFrQkMsR0FDekIsR0FBTUEsRUFBTixDQUtBLEdBQXlDLGdCQUE3QkMsR0FBY0QsR0FDeEIsTUFBT0EsRUFJVEEsR0FBV0EsRUFBU24vQixPQUFPLEdBQUdDLGNBQWdCay9CLEVBQVNqL0IsTUFBTSxFQUk3RCxLQUFNLEdBREYwRCxHQUNNbE0sRUFBRSxFQUFHNGxDLEVBQU0rQixFQUFTMWxDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUU3QyxHQURBa00sRUFBV3k3QixFQUFTM25DLEdBQUt5bkMsRUFDZ0IsZ0JBQTdCQyxHQUFjeDdCLEdBQ3hCLE1BQU9BLElBckJiLEdBQUl5N0IsR0FBVyxxQkFBcUJoL0IsTUFBTSxLQUN0QysrQixFQUFlcm5DLFNBQVMySSxnQkFBZ0JJLEtBMEJyQixtQkFBWDhkLFNBQXlCQSxPQUFPQyxJQUUxQ0QsT0FBUSwyQ0FBMkMsV0FDakQsTUFBT3NnQixLQUVvQixnQkFBWm5nQixTQUVqQkQsT0FBT0MsUUFBVW1nQixFQUdqQnI3QixFQUFPcTdCLGlCQUFtQkEsR0FHeEJyN0IsUUFXSixTQUFZQSxFQUFRekssR0FPcEIsUUFBU2ttQyxHQUFjem5DLEdBQ3JCLEdBQUkwbkMsR0FBTXZtQyxXQUFZbkIsR0FFbEI4aUMsRUFBaUMsS0FBdkI5aUMsRUFBTWtCLFFBQVEsT0FBZ0J5bUMsTUFBT0QsRUFDbkQsT0FBTzVFLElBQVc0RSxFQUdwQixRQUFTeEMsTUF3QlQsUUFBUzBDLEtBU1AsSUFBTSxHQVJGQyxJQUNGdDRCLE1BQU8sRUFDUEQsT0FBUSxFQUNSaWMsV0FBWSxFQUNaVCxZQUFhLEVBQ2JVLFdBQVksRUFDWkgsWUFBYSxHQUVMeHJCLEVBQUUsRUFBRzRsQyxFQUFNcUMsRUFBYWhtQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUN2RCxHQUFJa29DLEdBQWNELEVBQWFqb0MsRUFDL0Jnb0MsR0FBTUUsR0FBZ0IsRUFFeEIsTUFBT0YsR0FLVCxRQUFTRyxHQUFlWCxHQWF4QixRQUFTWSxLQUVQLElBQUtDLEVBQUwsQ0FHQUEsR0FBVSxDQUVWLElBQUk5bkMsR0FBbUI0TCxFQUFPNUwsZ0JBNkI5QixJQTVCQU4sRUFBVyxXQUNULEdBQUlxb0MsR0FBYS9uQyxFQUNmLFNBQVVzbEMsR0FDUixNQUFPdGxDLEdBQWtCc2xDLEVBQU0sT0FFakMsU0FBVUEsR0FDUixNQUFPQSxHQUFLemxDLGFBR2QsT0FBTyxVQUFtQnlsQyxHQUN4QixHQUFJejhCLEdBQVFrL0IsRUFBWXpDLEVBTXhCLE9BTE16OEIsSUFDSjA4QixFQUFVLGtCQUFvQjE4QixFQUM1Qiw0RkFHR0EsTUFNYm0vQixFQUFnQmYsRUFBaUIsYUFNWixDQUNuQixHQUFJZ0IsR0FBTW5vQyxTQUFTOEksY0FBYyxNQUNqQ3EvQixHQUFJcC9CLE1BQU1zRyxNQUFRLFFBQ2xCODRCLEVBQUlwL0IsTUFBTXEvQixRQUFVLGtCQUNwQkQsRUFBSXAvQixNQUFNcy9CLFlBQWMsUUFDeEJGLEVBQUlwL0IsTUFBTXUvQixZQUFjLGtCQUN4QkgsRUFBSXAvQixNQUFPbS9CLEdBQWtCLFlBRTdCLElBQUl4K0IsR0FBTzFKLFNBQVMwSixNQUFRMUosU0FBUzJJLGVBQ3JDZSxHQUFLRyxZQUFhcytCLEVBQ2xCLElBQUlwL0IsR0FBUW5KLEVBQVV1b0MsRUFFdEJJLEdBQWlELE1BQWhDaEIsRUFBY3grQixFQUFNc0csT0FDckMzRixFQUFLTyxZQUFhaytCLEtBT3RCLFFBQVNLLEdBQVNoRCxHQVNoQixHQVJBdUMsSUFHcUIsZ0JBQVR2QyxLQUNWQSxFQUFPeGxDLFNBQVN5b0MsY0FBZWpELElBSTNCQSxHQUF3QixnQkFBVEEsSUFBc0JBLEVBQUs1ckIsU0FBaEQsQ0FJQSxHQUFJN1EsR0FBUW5KLEVBQVU0bEMsRUFHdEIsSUFBdUIsU0FBbEJ6OEIsRUFBTXlVLFFBQ1QsTUFBT2txQixJQUdULElBQUlDLEtBQ0pBLEdBQUt0NEIsTUFBUW0yQixFQUFLOXNCLFlBQ2xCaXZCLEVBQUt2NEIsT0FBU28yQixFQUFLa0QsWUFNbkIsS0FBTSxHQUpGQyxHQUFjaEIsRUFBS2dCLGVBQWtCVCxJQUN2Q24vQixFQUFPbS9CLElBQThDLGVBQTNCbi9CLEVBQU9tL0IsSUFHekJ2b0MsRUFBRSxFQUFHNGxDLEVBQU1xQyxFQUFhaG1DLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ3ZELEdBQUlrb0MsR0FBY0QsRUFBYWpvQyxHQUMzQkcsRUFBUWlKLEVBQU84K0IsRUFDbkIvbkMsR0FBUThvQyxFQUFlcEQsRUFBTTFsQyxFQUM3QixJQUFJMG5DLEdBQU12bUMsV0FBWW5CLEVBRXRCNm5DLEdBQU1FLEdBQWlCSixNQUFPRCxHQUFjLEVBQU5BLEVBR3hDLEdBQUlxQixHQUFlbEIsRUFBS21CLFlBQWNuQixFQUFLb0IsYUFDdkNDLEVBQWdCckIsRUFBS3NCLFdBQWF0QixFQUFLdUIsY0FDdkNDLEVBQWN4QixFQUFLN1csV0FBYTZXLEVBQUs1VyxZQUNyQ3FZLEVBQWV6QixFQUFLL1csVUFBWStXLEVBQUs5VyxhQUNyQ3lYLEVBQWNYLEVBQUswQixnQkFBa0IxQixFQUFLMkIsaUJBQzFDQyxFQUFlNUIsRUFBSzZCLGVBQWlCN0IsRUFBSzhCLGtCQUUxQ0MsRUFBdUJmLEdBQWVKLEVBR3RDb0IsRUFBYXBDLEVBQWN4K0IsRUFBTXNHLE1BQ2hDczZCLE1BQWUsSUFDbEJoQyxFQUFLdDRCLE1BQVFzNkIsR0FFVEQsRUFBdUIsRUFBSWIsRUFBZVAsR0FHaEQsSUFBSXNCLEdBQWNyQyxFQUFjeCtCLEVBQU1xRyxPQWF0QyxPQVpLdzZCLE1BQWdCLElBQ25CakMsRUFBS3Y0QixPQUFTdzZCLEdBRVZGLEVBQXVCLEVBQUlWLEVBQWdCTyxJQUdqRDVCLEVBQUt0YyxXQUFhc2MsRUFBS3Q0QixPQUFVdzVCLEVBQWVQLEdBQ2hEWCxFQUFLL2MsWUFBYytjLEVBQUt2NEIsUUFBVzQ1QixFQUFnQk8sR0FFbkQ1QixFQUFLcmMsV0FBYXFjLEVBQUt0NEIsTUFBUTg1QixFQUMvQnhCLEVBQUt4YyxZQUFjd2MsRUFBS3Y0QixPQUFTZzZCLEVBRTFCekIsR0FLVCxRQUFTaUIsR0FBZXBELEVBQU0xbEMsR0FFNUIsR0FBS2dNLEVBQU81TCxrQkFBMkMsS0FBdkJKLEVBQU1rQixRQUFRLEtBQzVDLE1BQU9sQixFQUVULElBQUlpSixHQUFReThCLEVBQUt6OEIsTUFFYjNHLEVBQU8yRyxFQUFNM0csS0FDYnluQyxFQUFLckUsRUFBS3NFLGFBQ1ZDLEVBQVNGLEdBQU1BLEVBQUd6bkMsSUFldEIsT0FaSzJuQyxLQUNIRixFQUFHem5DLEtBQU9vakMsRUFBS3psQyxhQUFhcUMsTUFFOUIyRyxFQUFNM0csS0FBT3RDLEVBQ2JBLEVBQVFpSixFQUFNaWhDLFVBR2RqaEMsRUFBTTNHLEtBQU9BLEVBQ1IybkMsSUFDSEYsRUFBR3puQyxLQUFPMm5DLEdBR0xqcUMsRUFqS1QsR0FFSUYsR0FBVXNvQyxFQUFlSyxFQUZ6QlAsR0FBVSxDQW9LZCxPQUFPUSxHQWhOUCxHQUFJL0MsR0FBOEIsbUJBQVpwaUIsU0FBMEIyaEIsRUFDOUMsU0FBVVcsR0FDUnRpQixRQUFRdWlCLE1BQU9ELElBS2ZpQyxHQUNGLGNBQ0EsZUFDQSxhQUNBLGdCQUNBLGFBQ0EsY0FDQSxZQUNBLGVBQ0Esa0JBQ0EsbUJBQ0EsaUJBQ0Esb0JBa01xQixtQkFBWC9nQixTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEscUJBQXNCLHlDQUEyQ2loQixHQUM1QyxnQkFBWjlnQixTQUVqQkQsT0FBT0MsUUFBVThnQixFQUFlMWdCLFFBQVEsZ0NBR3hDdGIsRUFBTzA4QixRQUFVVixFQUFlaDhCLEVBQU9xN0IsbUJBR3JDcjdCLFFBV0osU0FBWUEsR0FRWixRQUFTbStCLEdBQVVqaUIsR0FFRSxrQkFBUEEsS0FJUGlpQixFQUFTejdCLFFBRVp3WixJQUdBa2lCLEVBQU0vK0IsS0FBTTZjLElBT2hCLFFBQVNtaUIsR0FBUzFwQixHQUVoQixHQUFJMnBCLEdBQStCLHFCQUFmM3BCLEVBQU0xVCxNQUF1RCxhQUF4Qi9NLEVBQVNxcUMsVUFDN0RKLEdBQVN6N0IsU0FBVzQ3QixHQUl6QnhtQixJQUdGLFFBQVNBLEtBQ1BxbUIsRUFBU3o3QixTQUFVLENBRW5CLEtBQU0sR0FBSTdPLEdBQUUsRUFBRzRsQyxFQUFNMkUsRUFBTXRvQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJcW9CLEdBQUtraUIsRUFBTXZxQyxFQUNmcW9CLE1BSUosUUFBU3NpQixHQUFnQm5qQixHQVd2QixNQVQ2QixhQUF4Qm5uQixFQUFTcXFDLFdBQ1p6bUIsS0FHQXVELEVBQVFwZixLQUFNL0gsRUFBVSxtQkFBb0JtcUMsR0FDNUNoakIsRUFBUXBmLEtBQU0vSCxFQUFVLG1CQUFvQm1xQyxHQUM1Q2hqQixFQUFRcGYsS0FBTStELEVBQVEsT0FBUXErQixJQUd6QkYsRUFwRFQsR0FBSWpxQyxHQUFXOEwsRUFBTzlMLFNBRWxCa3FDLElBaUJKRCxHQUFTejdCLFNBQVUsRUFxQ0ksa0JBQVhxWSxTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEsdUJBQXdCLG1CQUFxQnlqQixHQUN4QixnQkFBWnRqQixTQUNqQkQsT0FBT0MsUUFBVXNqQixFQUFnQmxqQixRQUFRLFlBR3pDdGIsRUFBT20rQixTQUFXSyxFQUFnQngrQixFQUFPcWIsVUFHdkNyYixRQVdKLFNBQVl5K0IsR0EyQlYsUUFBU0MsR0FBT2hGLEVBQU1pRixHQUNwQixNQUFPakYsR0FBTWtGLEdBQWlCRCxHQUtoQyxRQUFTRSxHQUFhbkYsR0FFcEIsSUFBS0EsRUFBSzFpQyxXQUFWLENBR0EsR0FBSThuQyxHQUFXNXFDLFNBQVM2cUMsd0JBQ3hCRCxHQUFTL2dDLFlBQWEyN0IsSUFPeEIsUUFBU3NGLEdBQU90RixFQUFNaUYsR0FFcEJFLEVBQWFuRixFQUliLEtBQU0sR0FERnVGLEdBQVF2RixFQUFLMWlDLFdBQVdxSyxpQkFBa0JzOUIsR0FDcEM5cUMsRUFBRSxFQUFHNGxDLEVBQU13RixFQUFNbnBDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUUxQyxHQUFLb3JDLEVBQU1wckMsS0FBTzZsQyxFQUNoQixPQUFPLENBSVgsUUFBTyxFQUtULFFBQVN3RixHQUFZeEYsRUFBTWlGLEdBRXpCLE1BREFFLEdBQWFuRixHQUNOZ0YsRUFBT2hGLEVBQU1pRixHQTlEdEIsR0FtRUlRLEdBbkVBUCxFQUFnQixXQUVsQixHQUFLSCxFQUFVVyxRQUNiLE1BQU8sU0FHVCxJQUFLWCxFQUFVVSxnQkFDYixNQUFPLGlCQUtULEtBQU0sR0FGRjNELElBQWEsU0FBVSxNQUFPLEtBQU0sS0FFOUIzbkMsRUFBRSxFQUFHNGxDLEVBQU0rQixFQUFTMWxDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ25ELEdBQUlvRSxHQUFTdWpDLEVBQVMzbkMsR0FDbEJ3cUIsRUFBU3BtQixFQUFTLGlCQUN0QixJQUFLd21DLEVBQVdwZ0IsR0FDZCxNQUFPQSxNQXFEYixJQUFLdWdCLEVBQWdCLENBR25CLEdBQUl2QyxHQUFNbm9DLFNBQVM4SSxjQUFjLE9BQzdCcWlDLEVBQWtCWCxFQUFPckMsRUFBSyxNQUNsQzhDLEdBQWtCRSxFQUFrQlgsRUFBUVEsTUFFNUNDLEdBQWtCSCxDQUlHLG1CQUFYamtCLFNBQXlCQSxPQUFPQyxJQUUxQ0QsT0FBUSx1Q0FBdUMsV0FDN0MsTUFBT29rQixLQUVvQixnQkFBWmprQixTQUNqQkQsT0FBT0MsUUFBVWlrQixFQUlqQm4vQixPQUFPbS9CLGdCQUFrQkEsR0FHekJHLFFBQVEvckMsV0FTVixTQUFVeU0sRUFBUW9sQixHQUtJLGtCQUFWckssU0FBd0JBLE9BQU9DLElBRXpDRCxPQUFRLHdCQUNOLHNCQUNBLHFDQUNDLFNBQVVvakIsRUFBVWdCLEdBQ3JCLE1BQU8vWixHQUFTcGxCLEVBQVFtK0IsRUFBVWdCLEtBRVIsZ0JBQVhqa0IsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLGFBQ1JBLFFBQVEsOEJBSVZ0YixFQUFPdS9CLGFBQWVuYSxFQUNwQnBsQixFQUNBQSxFQUFPbStCLFNBQ1BuK0IsRUFBT20vQixrQkFJVm4vQixPQUFRLFNBQWtCQSxFQUFRbStCLEVBQVVnQixHQUkvQyxHQUFJOW9CLEtBS0pBLEdBQU0zaUIsT0FBUyxTQUFVQyxFQUFHQyxHQUMxQixJQUFNLEdBQUkraUIsS0FBUS9pQixHQUNoQkQsRUFBR2dqQixHQUFTL2lCLEVBQUcraUIsRUFFakIsT0FBT2hqQixJQUtUMGlCLEVBQU1tcEIsT0FBUyxTQUFVOUQsRUFBS1csR0FDNUIsT0FBV1gsRUFBTVcsRUFBUUEsR0FBUUEsRUFLbkMsSUFBSW9ELEdBQWNuc0MsT0FBT0MsVUFBVUMsUUFDbkM2aUIsR0FBTWpqQixRQUFVLFNBQVUybEIsR0FDeEIsTUFBa0Msa0JBQTNCMG1CLEVBQVloc0MsS0FBTXNsQixJQU0zQjFDLEVBQU1xcEIsVUFBWSxTQUFVM21CLEdBQzFCLEdBQUk0bUIsS0FDSixJQUFLdHBCLEVBQU1qakIsUUFBUzJsQixHQUVsQjRtQixFQUFNNW1CLE1BQ0QsSUFBS0EsR0FBNEIsZ0JBQWRBLEdBQUlqakIsT0FFNUIsSUFBTSxHQUFJakMsR0FBRSxFQUFHNGxDLEVBQU0xZ0IsRUFBSWpqQixPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFDeEM4ckMsRUFBSXRnQyxLQUFNMFosRUFBSWxsQixRQUloQjhyQyxHQUFJdGdDLEtBQU0wWixFQUVaLE9BQU80bUIsSUFNVHRwQixFQUFNbmhCLFFBQVUrSyxNQUFNMU0sVUFBVTJCLFFBQVUsU0FBVXlxQyxFQUFLNW1CLEdBQ3JELE1BQU80bUIsR0FBSXpxQyxRQUFTNmpCLElBQ2xCLFNBQVU0bUIsRUFBSzVtQixHQUNqQixJQUFNLEdBQUlsbEIsR0FBRSxFQUFHNGxDLEVBQU1rRyxFQUFJN3BDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUN4QyxHQUFLOHJDLEVBQUk5ckMsS0FBT2tsQixFQUNkLE1BQU9sbEIsRUFHWCxPQUFPLElBS1h3aUIsRUFBTXVwQixXQUFhLFNBQVVELEVBQUs1bUIsR0FDaEMsR0FBSXdLLEdBQVFsTixFQUFNbmhCLFFBQVN5cUMsRUFBSzVtQixFQUNsQixLQUFUd0ssR0FDSG9jLEVBQUk5dkIsT0FBUTBULEVBQU8sSUFPdkJsTixFQUFNd3BCLFVBQW9DLGtCQUFmQyxjQUFtRCxnQkFBZkEsYUFDN0QsU0FBd0IvbUIsR0FDdEIsTUFBT0EsYUFBZSttQixjQUV4QixTQUEwQi9tQixHQUN4QixNQUFPQSxJQUFxQixnQkFBUEEsSUFDSCxHQUFoQkEsRUFBSWpMLFVBQXdDLGdCQUFoQmlMLEdBQUloaUIsVUFLdENzZixFQUFNMHBCLFFBQVUsV0FFZCxRQUFTQSxHQUFTckcsRUFBTS9oQixHQUV0QnFvQixFQUFrQkEsSUFBOER6cUMsU0FBekNyQixTQUFTMkksZ0JBQWdCb2pDLFlBQTRCLGNBQWdCLGFBQzVHdkcsRUFBTXNHLEdBQW9Ccm9CLEVBSjVCLEdBQUlxb0IsRUFNSixPQUFPRCxNQUtUMXBCLEVBQU02cEIsVUFBWSxTQUFVeEcsRUFBTWlGLEdBQ2hDLEtBQVFqRixHQUFReGxDLFNBQVMwSixNQUV2QixHQURBODdCLEVBQU9BLEVBQUsxaUMsV0FDUG1vQyxFQUFpQnpGLEVBQU1pRixHQUMxQixNQUFPakYsSUFRYnJqQixFQUFNOHBCLGdCQUFrQixTQUFVekcsR0FDaEMsTUFBb0IsZ0JBQVJBLEdBQ0h4bEMsU0FBU3lvQyxjQUFlakQsR0FFMUJBLEdBTVRyakIsRUFBTThFLFlBQWMsU0FBVXhHLEdBQzVCLEdBQUkwSixHQUFTLEtBQU8xSixFQUFNMVQsSUFDckJ6QyxNQUFNNmYsSUFDVDdmLEtBQU02ZixHQUFVMUosSUFNcEIwQixFQUFNK3BCLG1CQUFxQixTQUFVbkIsRUFBT04sR0FFMUNNLEVBQVE1b0IsRUFBTXFwQixVQUFXVCxFQUd6QixLQUFNLEdBRkZvQixNQUVNeHNDLEVBQUUsRUFBRzRsQyxFQUFNd0YsRUFBTW5wQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJNmxDLEdBQU91RixFQUFNcHJDLEVBRWpCLElBQU13aUIsRUFBTXdwQixVQUFXbkcsR0FJdkIsR0FBS2lGLEVBQVcsQ0FFVFEsRUFBaUJ6RixFQUFNaUYsSUFDMUIwQixFQUFRaGhDLEtBQU1xNkIsRUFLaEIsS0FBTSxHQUZGNEcsR0FBYTVHLEVBQUtyNEIsaUJBQWtCczlCLEdBRTlCamlDLEVBQUUsRUFBRzZqQyxFQUFPRCxFQUFXeHFDLE9BQVl5cUMsRUFBSjdqQyxFQUFVQSxJQUNqRDJqQyxFQUFRaGhDLEtBQU1paEMsRUFBVzVqQyxRQUczQjJqQyxHQUFRaGhDLEtBQU1xNkIsR0FJbEIsTUFBTzJHLElBS1RocUIsRUFBTW1xQixlQUFpQixTQUFVQyxFQUFRQyxFQUFZM0osR0FFbkQsR0FBSTFZLEdBQVNvaUIsRUFBT2x0QyxVQUFXbXRDLEdBQzNCQyxFQUFjRCxFQUFhLFNBRS9CRCxHQUFPbHRDLFVBQVdtdEMsR0FBZSxXQUMvQixHQUFJNVosR0FBVXRvQixLQUFNbWlDLEVBQ2Y3WixJQUNIOWpCLGFBQWM4akIsRUFFaEIsSUFBSS9JLEdBQU9yZixVQUVQa2lDLEVBQVFwaUMsSUFDWkEsTUFBTW1pQyxHQUFnQjErQixXQUFZLFdBQ2hDb2MsRUFBTzFmLE1BQU9paUMsRUFBTzdpQixTQUNkNmlCLEdBQU9ELElBQ2I1SixHQUFhLE9BT3BCMWdCLEVBQU13cUIsU0FBVyxTQUFVN25CLEdBQ3pCLE1BQU9BLEdBQUk1akIsUUFBUyxjQUFlLFNBQVVzcEMsRUFBT29DLEVBQUlDLEdBQ3RELE1BQU9ELEdBQUssSUFBTUMsSUFDakIzakMsY0FHTCxJQUFJbWEsR0FBVXZYLEVBQU91WCxPQXdDckIsT0FsQ0FsQixHQUFNMnFCLFNBQVcsU0FBVUMsRUFBYS9jLEdBQ3RDaWEsRUFBVSxXQUtSLElBQU0sR0FKRitDLEdBQWtCN3FCLEVBQU13cUIsU0FBVTNjLEdBQ2xDK2EsRUFBUS9xQyxTQUFTbU4saUJBQWtCLE9BQVM2L0IsR0FDNUNDLEVBQVcsUUFBVUQsRUFBa0IsV0FFakNydEMsRUFBRSxFQUFHNGxDLEVBQU13RixFQUFNbnBDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBRUlWLEdBRkF1bUMsRUFBT3VGLEVBQU1wckMsR0FDYnlrQixFQUFPb2hCLEVBQUtyaEMsYUFBYzhvQyxFQUU5QixLQUNFaHVDLEVBQVVtbEIsR0FBUXBCLEtBQUtDLE1BQU9tQixHQUM5QixNQUFRd2hCLEdBRUh2aUIsR0FDSEEsRUFBUXVpQixNQUFPLGlCQUFtQnFILEVBQVcsT0FDM0N6SCxFQUFLM2lDLFNBQVNxRyxlQUFrQnM4QixFQUFLNTdCLEdBQUssSUFBTTQ3QixFQUFLNTdCLEdBQUssSUFBTyxLQUNqRWc4QixFQUVKLFVBR0YsR0FBSTltQyxHQUFXLEdBQUlpdUMsR0FBYXZILEVBQU12bUMsR0FFbEN3b0IsRUFBUzNiLEVBQU8yYixNQUNmQSxJQUNIQSxFQUFPZ1gsS0FBTStHLEVBQU14VixFQUFXbHhCLE9BUS9CcWpCLElBSUwsU0FBVXJXLEVBQVFvbEIsR0FJSSxrQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSxvQkFDTixxQkFDQyxTQUFVMmhCLEdBQ1gsTUFBT3RYLEdBQVNwbEIsRUFBUTA4QixLQUVFLGdCQUFYeGhCLFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZnBsQixFQUNBc2IsUUFBUSxjQUlWdGIsRUFBT29oQyxTQUFXcGhDLEVBQU9vaEMsYUFDekJwaEMsRUFBT29oQyxTQUFTQyxLQUFPamMsRUFDckJwbEIsRUFDQUEsRUFBTzA4QixXQUlWMThCLE9BQVEsU0FBa0JBLEVBQVEwOEIsR0FJckMsUUFBUzJFLEdBQU0zSCxFQUFNOWlDLEdBQ25CNEgsS0FBS3RMLFFBQVV3bUMsRUFDZmw3QixLQUFLNUgsT0FBU0EsRUFFZDRILEtBQUtpcEIsU0FHUCxHQUFJNlosR0FBUSxlQUFpQnRoQyxFQXFEN0IsT0FuREFxaEMsR0FBSzl0QyxVQUFVazBCLE9BQVMsV0FDdEJqcEIsS0FBS3RMLFFBQVErSixNQUFNNFAsU0FBVyxXQUV6QnkwQixHQUNIOWlDLEtBQUt0TCxRQUFRb0YsYUFBYyxlQUFnQixNQUU3Q2tHLEtBQUtKLEVBQUksRUFDVEksS0FBSytaLE1BQVEsR0FHZjhvQixFQUFLOXRDLFVBQVV3aUIsUUFBVSxXQUV2QnZYLEtBQUt0TCxRQUFRK0osTUFBTTRQLFNBQVcsRUFDOUIsSUFBSTAwQixHQUFPL2lDLEtBQUs1SCxPQUFPNHFDLFVBQ3ZCaGpDLE1BQUt0TCxRQUFRK0osTUFBT3NrQyxHQUFTLElBRy9CRixFQUFLOXRDLFVBQVVtcEMsUUFBVSxXQUN2QmwrQixLQUFLcTlCLEtBQU9hLEVBQVNsK0IsS0FBS3RMLFVBRzVCbXVDLEVBQUs5dEMsVUFBVWt1QyxZQUFjLFNBQVVyakMsR0FDckNJLEtBQUtKLEVBQUlBLEVBQ1RJLEtBQUtrakMsbUJBQ0xsakMsS0FBS21qQyxlQUFnQnZqQyxJQUd2QmlqQyxFQUFLOXRDLFVBQVVtdUMsaUJBQW1CLFdBQ2hDLEdBQUlFLEdBQTJDLFFBQTFCcGpDLEtBQUs1SCxPQUFPNHFDLFdBQXVCLGFBQWUsYUFDdkVoakMsTUFBSzNILE9BQVMySCxLQUFLSixFQUFJSSxLQUFLcTlCLEtBQU0rRixHQUNoQ3BqQyxLQUFLcTlCLEtBQUt0NEIsTUFBUS9FLEtBQUs1SCxPQUFPaXJDLFdBR2xDUixFQUFLOXRDLFVBQVVvdUMsZUFBaUIsU0FBVXZqQyxHQUV4QyxHQUFJbWpDLEdBQU8vaUMsS0FBSzVILE9BQU80cUMsVUFDdkJoakMsTUFBS3RMLFFBQVErSixNQUFPc2tDLEdBQVMvaUMsS0FBSzVILE9BQU9rckMsaUJBQWtCMWpDLElBTTdEaWpDLEVBQUs5dEMsVUFBVXd1QyxVQUFZLFNBQVV4cEIsR0FDbkMvWixLQUFLK1osTUFBUUEsRUFDYi9aLEtBQUttakMsZUFBZ0JuakMsS0FBS0osRUFBSUksS0FBSzVILE9BQU9vckMsZUFBaUJ6cEIsSUFHN0Q4b0IsRUFBSzl0QyxVQUFVOGdCLE9BQVMsV0FDdEI3VixLQUFLdEwsUUFBUThELFdBQVdtSCxZQUFhSyxLQUFLdEwsVUFHckNtdUMsSUFJTCxTQUFVcmhDLEVBQVFvbEIsR0FJSSxrQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSx1QkFDTix3Q0FDQSx3QkFDQyxTQUFVc2dCLEVBQWtCaGxCLEdBQzdCLE1BQU8rTyxHQUFTcGxCLEVBQVFxN0IsRUFBa0JobEIsS0FFaEIsZ0JBQVg2RSxTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2ZwbEIsRUFDQXNiLFFBQVEsK0JBQ1JBLFFBQVEsb0JBSVZ0YixFQUFPb2hDLFNBQVdwaEMsRUFBT29oQyxhQUN6QnBoQyxFQUFPb2hDLFNBQVNhLGlCQUFtQjdjLEVBQ2pDcGxCLEVBQ0FBLEVBQU9xN0IsaUJBQ1ByN0IsRUFBT3UvQixnQkFJVnYvQixPQUFRLFNBQWtCQSxFQUFRcTdCLEVBQWtCaGxCLEdBZXZELElBQUssR0FERHBlLEdBTkFpcUMsRUFBVyxFQUNYMUcsRUFBVyxrQkFBa0JoL0IsTUFBTSxLQUVuQ3FrQixFQUF3QjdnQixFQUFPNmdCLHNCQUMvQnNoQixFQUF1Qm5pQyxFQUFPbWlDLHFCQUd6QnR1QyxFQUFJLEVBQUdBLEVBQUkybkMsRUFBUzFsQyxVQUN0QitxQixJQUF5QnNoQixHQURLdHVDLElBSW5Db0UsRUFBU3VqQyxFQUFTM25DLEdBQ2xCZ3RCLEVBQXdCQSxHQUF5QjdnQixFQUFRL0gsRUFBUyx5QkFDbEVrcUMsRUFBd0JBLEdBQXlCbmlDLEVBQVEvSCxFQUFTLHlCQUN4QytILEVBQVEvSCxFQUFTLDhCQUl2QzRvQixJQUEwQnNoQixJQUM5QnRoQixFQUF3QixTQUFVOWUsR0FDaEMsR0FBSXFnQyxJQUFXLEdBQUloMkIsT0FBT0MsVUFDdEJnMkIsRUFBYWppQyxLQUFLeUYsSUFBSyxFQUFHLElBQU91OEIsRUFBV0YsSUFDNUNwa0MsRUFBS2tDLEVBQU9pQyxXQUFZLFdBQzFCRixFQUFVcWdDLEVBQVdDLElBQ3BCQSxFQUVILE9BREFILEdBQVdFLEVBQVdDLEVBQ2Z2a0MsR0FHVHFrQyxFQUF1QixTQUFVcmtDLEdBQy9Ca0MsRUFBT2dELGFBQWNsRixJQU16QixJQUFJMjhCLEtBRUpBLEdBQU02SCxlQUFpQixXQUNoQjlqQyxLQUFLcUUsY0FJVnJFLEtBQUtxRSxhQUFjLEVBQ25CckUsS0FBSytqQyxjQUFnQixFQUNyQi9qQyxLQUFLcUQsWUFHUDQ0QixFQUFNNTRCLFFBQVUsV0FDZHJELEtBQUtna0MsaUJBQ0xoa0MsS0FBS2lrQyx5QkFFTCxJQUFJQyxHQUFZbGtDLEtBQUtKLENBTXJCLElBSkFJLEtBQUtta0MsbUJBQ0xua0MsS0FBS29rQyxpQkFDTHBrQyxLQUFLcWtDLE9BQVFILEdBRVJsa0MsS0FBS3FFLFlBQWMsQ0FDdEIsR0FBSSs5QixHQUFRcGlDLElBQ1pxaUIsR0FBdUIsV0FDckIrZixFQUFNLytCLGFBZVosSUFBSWloQyxHQUFvQnpILEVBQWlCLGFBQ3JDMEgsSUFBUzFILEVBQWlCLGNBMkk5QixPQXpJQVosR0FBTW1JLGVBQWlCLFdBQ3JCLEdBQUl4a0MsR0FBSUksS0FBS0osQ0FFUkksTUFBS3JMLFFBQVE2dkMsWUFBY3hrQyxLQUFLeWtDLE1BQU1udEMsT0FBUyxJQUNsRHNJLEVBQUlpWSxFQUFNbXBCLE9BQVFwaEMsRUFBR0ksS0FBS3dqQyxnQkFDMUI1akMsR0FBUUksS0FBS3dqQyxlQUNieGpDLEtBQUswa0MsZUFBZ0I5a0MsSUFHdkJBLEdBQVFJLEtBQUsya0MsZUFHYi9rQyxFQUFJSSxLQUFLckwsUUFBUWl3QyxhQUFlTixHQUFxQjFrQyxFQUFJQSxDQUV6RCxJQUFJcEssR0FBUXdLLEtBQUtzakMsaUJBQWtCMWpDLEVBRTlCMGtDLEdBR0h0a0MsS0FBSzZrQyxPQUFPcG1DLE1BQU82bEMsR0FBc0JDLEdBQVF2a0MsS0FBS3FFLFlBQ3BELGVBQWlCN08sRUFBUSxRQUFVLGNBQWdCQSxFQUFRLElBRTdEd0ssS0FBSzZrQyxPQUFPcG1DLE1BQU91QixLQUFLZ2pDLFlBQWV4dEMsR0FJM0N5bUMsRUFBTTZJLHlCQUEyQixXQUMvQixHQUFNOWtDLEtBQUt5a0MsTUFBTW50QyxPQUFqQixDQUdBLEdBQUl5dEMsR0FBZS9rQyxLQUFLeWtDLE1BQU96a0MsS0FBS2dsQyxjQUNwQ2hsQyxNQUFLSixHQUFLbWxDLEVBQWExc0MsT0FDdkIySCxLQUFLb2tDLG1CQUdQbkksRUFBTXFILGlCQUFtQixTQUFVajFCLEdBQ2pDLE1BQUtyTyxNQUFLckwsUUFBUXN3QyxnQkFFcUQsSUFBNURyakMsS0FBSzZzQixNQUFTcGdCLEVBQVdyTyxLQUFLcTlCLEtBQUt0YyxXQUFlLEtBQWtCLElBR3RFbmYsS0FBSzZzQixNQUFPcGdCLEdBQWEsTUFJcEM0dEIsRUFBTW9JLE9BQVMsU0FBVUgsR0FFakJsa0MsS0FBS2tsQyxlQUFpQnRqQyxLQUFLNnNCLE1BQWdCLElBQVR6dUIsS0FBS0osSUFBYWdDLEtBQUs2c0IsTUFBbUIsSUFBWnlWLElBQ3BFbGtDLEtBQUsrakMsZ0JBR0YvakMsS0FBSytqQyxjQUFnQixJQUN4Qi9qQyxLQUFLcUUsYUFBYyxRQUNackUsTUFBS21sQyxnQkFFUFosR0FDSHZrQyxLQUFLb2tDLGlCQUVQcGtDLEtBQUt3MEIsY0FBYyxZQUl2QnlILEVBQU15SSxlQUFpQixTQUFVOWtDLEdBRS9CLEdBQUl3bEMsR0FBWXBsQyxLQUFLMmtDLGVBQWlCL2tDLENBQ3RDSSxNQUFLcWxDLFlBQWFybEMsS0FBS3NsQyxpQkFBa0JGLEVBQVcsR0FFcEQsSUFBSUcsR0FBV3ZsQyxLQUFLcTlCLEtBQUt0YyxZQUFlbmhCLEVBQUlJLEtBQUt3akMsZUFBaUJ4akMsS0FBSzJrQyxlQUN2RTNrQyxNQUFLcWxDLFlBQWFybEMsS0FBS3dsQyxnQkFBaUJELEVBQVUsSUFHcER0SixFQUFNb0osWUFBYyxTQUFVWixFQUFPZ0IsRUFBSzFyQixHQUN4QyxJQUFNLEdBQUkxa0IsR0FBRSxFQUFHNGxDLEVBQU13SixFQUFNbnRDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBQUlxd0MsR0FBT2pCLEVBQU1wdkMsR0FDYnN3QyxFQUFZRixFQUFNLEVBQUkxckIsRUFBUSxDQUNsQzJyQixHQUFLbkMsVUFBV29DLEdBQ2hCRixHQUFPQyxFQUFLckksS0FBS3JjLGFBSXJCaWIsRUFBTTJKLGNBQWdCLFNBQVVuQixHQUM5QixHQUFNQSxHQUFVQSxFQUFNbnRDLE9BR3RCLElBQU0sR0FBSWpDLEdBQUUsRUFBRzRsQyxFQUFNd0osRUFBTW50QyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFDMUNvdkMsRUFBTXB2QyxHQUFHa3VDLFVBQVcsSUFNeEJ0SCxFQUFNa0ksaUJBQW1CLFdBQ3ZCbmtDLEtBQUttdUIsVUFBWW51QixLQUFLNmxDLE1BQ3RCN2xDLEtBQUtKLEdBQUtJLEtBQUttdUIsU0FDZm51QixLQUFLbXVCLFVBQVludUIsS0FBSzhsQyxvQkFFdEI5bEMsS0FBSzZsQyxNQUFRLEdBR2Y1SixFQUFNOEosV0FBYSxTQUFVL0wsR0FDM0JoNkIsS0FBSzZsQyxPQUFTN0wsR0FHaEJpQyxFQUFNNkosa0JBQW9CLFdBQ3hCLE1BQU8sR0FBSTlsQyxLQUFLckwsUUFBU3FMLEtBQUttbEMsZ0JBQWtCLHFCQUF1QixhQUl6RWxKLEVBQU0rSixtQkFBcUIsV0FFekIsTUFBT2htQyxNQUFLSixFQUFJSSxLQUFLbXVCLFVBQWEsRUFBSW51QixLQUFLOGxDLHNCQUc3QzdKLEVBQU0rSCxlQUFpQixXQUNyQixHQUFNaGtDLEtBQUtrbEMsY0FBWCxDQUlBLEdBQUllLEdBQWVqbUMsS0FBS2ttQyxNQUFRbG1DLEtBQUtKLEVBQ2pDdW1DLEVBQVlGLEVBQWVqbUMsS0FBS211QixRQUNwQ251QixNQUFLK2xDLFdBQVlJLEtBR25CbEssRUFBTWdJLHdCQUEwQixXQUU5QixHQUFJaEosR0FBTWo3QixLQUFLeWtDLE1BQU1udEMsTUFDckIsS0FBSzBJLEtBQUtrbEMsZ0JBQWlCbGxDLEtBQUttbEMsaUJBQW9CbEssRUFBcEQsQ0FHQSxHQUFJeUssR0FBTzFsQyxLQUFLeWtDLE1BQU96a0MsS0FBS2dsQyxlQUN4Qm9CLEVBQU9wbUMsS0FBS3JMLFFBQVE2dkMsWUFBY3ZKLEVBQU0sRUFDMUNqN0IsS0FBS3dqQyxlQUFpQjVoQyxLQUFLeWtDLE1BQU9ybUMsS0FBS2dsQyxjQUFnQi9KLEdBQVEsRUFDN0Q1TixFQUFvQyxJQUF2QnFZLEVBQUtydEMsT0FBUyt0QyxHQUFjcG1DLEtBQUtKLEVBQzlDbzZCLEVBQVEzTSxFQUFXcnRCLEtBQUtyTCxRQUFRMnhDLGtCQUNwQ3RtQyxNQUFLK2xDLFdBQVkvTCxLQUdaaUMsSUFlTCxTQUFVejZCLEVBQVFvbEIsR0FJbEIsR0FBc0Isa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEsd0JBQ04sa0JBQ0EsNEJBQ0Esa0JBQ0Esb0JBQ0EsdUJBQ0EsU0FDQSxhQUNDLFNBQVVxZixFQUFTNWdCLEVBQWM2QixFQUFTcWhCLEVBQVNybUIsRUFBT2dyQixFQUFNWSxHQUNqRSxNQUFPN2MsR0FBU3BsQixFQUFRbzZCLEVBQVM1Z0IsRUFBYzZCLEVBQVNxaEIsRUFBU3JtQixFQUFPZ3JCLEVBQU1ZLFNBRTNFLElBQXVCLGdCQUFYL21CLFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZnBsQixFQUNBc2IsUUFBUSxvQkFDUkEsUUFBUSx3QkFDUkEsUUFBUSxXQUNSQSxRQUFRLFlBQ1JBLFFBQVEsa0JBQ1JBLFFBQVEsVUFDUkEsUUFBUSxrQkFFTCxDQUVMLEdBQUl5cEIsR0FBWS9rQyxFQUFPb2hDLFFBRXZCcGhDLEdBQU9vaEMsU0FBV2hjLEVBQ2hCcGxCLEVBQ0FBLEVBQU9vNkIsUUFDUHA2QixFQUFPd1osYUFDUHhaLEVBQU9xYixRQUNQcmIsRUFBTzA4QixRQUNQMThCLEVBQU91L0IsYUFDUHdGLEVBQVUxRCxLQUNWMEQsRUFBVTlDLG9CQUliamlDLE9BQVEsU0FBa0JBLEVBQVFvNkIsRUFBUzVnQixFQUFjNkIsRUFBU3FoQixFQUNuRXJtQixFQUFPZ3JCLEVBQU1ZLEdBU2YsUUFBUytDLEdBQWMvRixFQUFPZ0csR0FFNUIsSUFEQWhHLEVBQVE1b0IsRUFBTXFwQixVQUFXVCxHQUNqQkEsRUFBTW5wQyxRQUNabXZDLEVBQU9sbkMsWUFBYWtoQyxFQUFNMW1CLFNBVzlCLFFBQVM2b0IsR0FBVWx1QyxFQUFTQyxHQUMxQixHQUFJK3hDLEdBQWU3dUIsRUFBTThwQixnQkFBaUJqdEMsRUFDMUMsT0FBTWd5QyxJQU1OMW1DLEtBQUt0TCxRQUFVZ3lDLEVBRVZ2cEIsSUFDSG5kLEtBQUsybUMsU0FBV3hwQixFQUFRbmQsS0FBS3RMLFVBRy9Cc0wsS0FBS3JMLFFBQVVrakIsRUFBTTNpQixVQUFZOEssS0FBS0YsWUFBWS9GLFVBQ2xEaUcsS0FBSzBDLE9BQVEvTixPQUdicUwsTUFBSzRtQyxnQkFmRTd0QixHQUNIQSxFQUFRdWlCLE1BQU8sOEJBQWlDb0wsR0FBZ0JoeUMsS0F0QnRFLEdBQUl5b0IsR0FBUzNiLEVBQU8yYixPQUNoQnZuQixFQUFtQjRMLEVBQU81TCxpQkFDMUJtakIsRUFBVXZYLEVBQU91WCxRQVlqQjh0QixFQUFPLEVBRVB0eUMsSUF1QkpxdUMsR0FBUzdvQyxVQUNQK3NDLGVBQWUsRUFDZnpELFVBQVcsU0FHWDBELG1CQUFvQixLQUNwQkMsU0FBVSxJQUVWL0IsaUJBQWlCLEVBQ2pCcHdCLFFBQVEsRUFDUnl4QixtQkFBb0IsS0FDcEJXLGdCQUFnQixHQU1sQnJFLEVBQVNzRSxpQkFHVHJ2QixFQUFNM2lCLE9BQVEwdEMsRUFBUzd0QyxVQUFXaW1CLEVBQWFqbUIsV0FFL0M2dEMsRUFBUzd0QyxVQUFVNnhDLFFBQVUsV0FFM0IsR0FBSXRuQyxHQUFLVSxLQUFLbW5DLE9BQVNOLENBQ3ZCN21DLE1BQUt0TCxRQUFRMHlDLGFBQWU5bkMsRUFDNUIvSyxFQUFXK0ssR0FBT1UsS0FFbEJBLEtBQUtnbEMsY0FBZ0JobEMsS0FBS3JMLFFBQVEweUMsY0FBZ0IsRUFFbERybkMsS0FBSytqQyxjQUFnQixFQUVyQi9qQyxLQUFLSixFQUFJLEVBQ1RJLEtBQUttdUIsU0FBVyxFQUNoQm51QixLQUFLNmxDLE1BQVEsRUFDYjdsQyxLQUFLZ2pDLFdBQWFoakMsS0FBS3JMLFFBQVFpd0MsWUFBYyxRQUFVLE9BRXZENWtDLEtBQUtzbkMsU0FBVzV4QyxTQUFTOEksY0FBYyxPQUN2Q3dCLEtBQUtzbkMsU0FBU3B3QyxVQUFZLG9CQUMxQjByQyxFQUFTMkUsZ0JBQWlCdm5DLEtBQUtzbkMsVUFDL0J0bkMsS0FBS3duQyxpQkFFQXhuQyxLQUFLckwsUUFBUWtnQixRQUFVN1UsS0FBS3JMLFFBQVE4eUMsWUFDdkM1cUIsRUFBUXBmLEtBQU0rRCxFQUFRLFNBQVV4QixNQUNoQ0EsS0FBSzBuQyxlQUFnQixFQUd2QixLQUFNLEdBQUlyeUMsR0FBRSxFQUFHNGxDLEVBQU0ySCxFQUFTc0UsY0FBYzV2QyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNqRSxHQUFJd3FCLEdBQVMraUIsRUFBU3NFLGNBQWM3eEMsRUFDcEMySyxNQUFNNmYsS0FHSDdmLEtBQUtyTCxRQUFROHlDLFNBQ2hCem5DLEtBQUt5bkMsV0FFTHpuQyxLQUFLMm5DLFlBU1QvRSxFQUFTN3RDLFVBQVUyTixPQUFTLFNBQVVvNEIsR0FDcENqakIsRUFBTTNpQixPQUFROEssS0FBS3JMLFFBQVNtbUMsSUFHOUI4SCxFQUFTN3RDLFVBQVU0eUMsU0FBVyxXQUM1QixJQUFLM25DLEtBQUt5RixTQUFWLENBR0F6RixLQUFLeUYsVUFBVyxFQUNoQm0yQixFQUFROW1CLElBQUs5VSxLQUFLdEwsUUFBUyxvQkFDdEJzTCxLQUFLckwsUUFBUWl3QyxhQUNoQmhKLEVBQVE5bUIsSUFBSzlVLEtBQUt0TCxRQUFTLGdCQUc3QnNMLEtBQUtrK0IsU0FFTCxJQUFJMEosR0FBWTVuQyxLQUFLNm5DLHdCQUF5QjduQyxLQUFLdEwsUUFBUTRRLFNBQzNEa2hDLEdBQWNvQixFQUFXNW5DLEtBQUs2a0MsUUFDOUI3a0MsS0FBS3NuQyxTQUFTL25DLFlBQWFTLEtBQUs2a0MsUUFDaEM3a0MsS0FBS3RMLFFBQVE2SyxZQUFhUyxLQUFLc25DLFVBRS9CdG5DLEtBQUs4bkMsY0FFQTluQyxLQUFLckwsUUFBUW15QyxnQkFFaEI5bUMsS0FBS3RMLFFBQVFxekMsU0FBVyxFQUV4QmxyQixFQUFRcGYsS0FBTXVDLEtBQUt0TCxRQUFTLFVBQVdzTCxPQUd6Q0EsS0FBS21jLEtBQUssWUFFVm5jLEtBQUs4a0MsMkJBQ0w5a0MsS0FBS2dvQyxPQUFRaG9DLEtBQUtnbEMsaUJBSXBCcEMsRUFBUzd0QyxVQUFVeXlDLGNBQWdCLFdBRWpDLEdBQUkzQyxHQUFTbnZDLFNBQVM4SSxjQUFjLE1BQ3BDcW1DLEdBQU8zdEMsVUFBWSxrQkFDbkIydEMsRUFBT3BtQyxNQUFPdUIsS0FBS2dqQyxZQUFlLEVBQ2xDaGpDLEtBQUs2a0MsT0FBU0EsR0FHaEJqQyxFQUFTN3RDLFVBQVU4eUMsd0JBQTBCLFNBQVVwSCxHQUNyRCxNQUFPNW9CLEdBQU0rcEIsbUJBQW9CbkIsRUFBT3pnQyxLQUFLckwsUUFBUXN6QyxlQUl2RHJGLEVBQVM3dEMsVUFBVSt5QyxZQUFjLFdBRS9COW5DLEtBQUt5a0MsTUFBUXprQyxLQUFLa29DLFdBQVlsb0MsS0FBSzZrQyxPQUFPdi9CLFVBQzFDdEYsS0FBS21vQyxnQkFDTG5vQyxLQUFLb29DLHFCQUNMcG9DLEtBQUtpbkMsa0JBUVByRSxFQUFTN3RDLFVBQVVtekMsV0FBYSxTQUFVekgsR0FLeEMsSUFBTSxHQUpGbUgsR0FBWTVuQyxLQUFLNm5DLHdCQUF5QnBILEdBRzFDZ0UsS0FDTXB2QyxFQUFFLEVBQUc0bEMsRUFBTTJNLEVBQVV0d0MsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDcEQsR0FBSTZsQyxHQUFPME0sRUFBVXZ5QyxHQUNqQnF3QyxFQUFPLEdBQUk3QyxHQUFNM0gsRUFBTWw3QixLQUMzQnlrQyxHQUFNNWpDLEtBQU02a0MsR0FHZCxNQUFPakIsSUFHVDdCLEVBQVM3dEMsVUFBVXN6QyxZQUFjLFdBQy9CLE1BQU9yb0MsTUFBS3lrQyxNQUFPemtDLEtBQUt5a0MsTUFBTW50QyxPQUFTLElBSXpDc3JDLEVBQVM3dEMsVUFBVW96QyxjQUFnQixXQUVqQ25vQyxLQUFLc29DLFdBQVl0b0MsS0FBS3lrQyxPQUV0QnprQyxLQUFLdW9DLGVBQWdCLElBT3ZCM0YsRUFBUzd0QyxVQUFVd3pDLGVBQWlCLFNBQVV4akIsR0FDNUNBLEVBQVFBLEdBQVMsRUFHakIva0IsS0FBS3dvQyxjQUFnQnpqQixFQUFRL2tCLEtBQUt3b0MsZUFBaUIsRUFBSSxDQUN2RCxJQUFJQyxHQUFRLENBRVosSUFBSzFqQixFQUFRLEVBQUksQ0FDZixHQUFJMmpCLEdBQVkxb0MsS0FBS3lrQyxNQUFPMWYsRUFBUSxFQUNwQzBqQixHQUFRQyxFQUFVOW9DLEVBQUk4b0MsRUFBVXJMLEtBQUtyYyxXQUd2QyxJQUFNLEdBREYwa0IsR0FDTXpLLEVBQU1qN0IsS0FBS3lrQyxNQUFNbnRDLE9BQVFqQyxFQUFFMHZCLEVBQVdrVyxFQUFKNWxDLEVBQVNBLElBQ25EcXdDLEVBQU8xbEMsS0FBS3lrQyxNQUFNcHZDLEdBQ2xCcXdDLEVBQUt6QyxZQUFhd0YsR0FDbEJBLEdBQVMvQyxFQUFLckksS0FBS3JjLFdBQ25CaGhCLEtBQUt3b0MsY0FBZ0I1bUMsS0FBS3lGLElBQUtxK0IsRUFBS3JJLEtBQUt4YyxZQUFhN2dCLEtBQUt3b0MsY0FHN0R4b0MsTUFBS3dqQyxlQUFpQmlGLEVBRXRCem9DLEtBQUsyb0MsaUJBT1AvRixFQUFTN3RDLFVBQVV1ekMsV0FBYSxTQUFVN0QsR0FDeEMsSUFBTSxHQUFJcHZDLEdBQUUsRUFBRzRsQyxFQUFNd0osRUFBTW50QyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJcXdDLEdBQU9qQixFQUFNcHZDLEVBQ2pCcXdDLEdBQUt4SCxZQUtUMEUsRUFBUzd0QyxVQUFVcW1DLE1BQ25Cd0gsRUFBUzd0QyxVQUFVNnpDLFdBQWEsV0FDOUI1b0MsS0FBS21vQyxnQkFDTG5vQyxLQUFLOGtDLDRCQUdQbEMsRUFBUzd0QyxVQUFVbXBDLFFBQVUsV0FDM0JsK0IsS0FBS3E5QixLQUFPYSxFQUFTbCtCLEtBQUt0TCxTQUMxQnNMLEtBQUs2b0MsZUFDTDdvQyxLQUFLMmtDLGVBQWlCM2tDLEtBQUtxOUIsS0FBS3RjLFdBQWEvZ0IsS0FBS3FqQyxVQUdwRCxJQUFJeUYsSUFFRmhjLFFBQ0VoMUIsS0FBTSxHQUNOQyxNQUFPLElBRVRELE1BQ0VBLEtBQU0sRUFDTkMsTUFBTyxHQUVUQSxPQUNFQSxNQUFPLEVBQ1BELEtBQU0sR0FJVjhxQyxHQUFTN3RDLFVBQVU4ekMsYUFBZSxXQUNoQyxHQUFJRSxHQUFZRCxFQUFxQjlvQyxLQUFLckwsUUFBUTB1QyxVQUNsRHJqQyxNQUFLcWpDLFVBQVkwRixFQUFZQSxFQUFXL29DLEtBQUtnakMsWUFBZWhqQyxLQUFLckwsUUFBUTB1QyxXQUczRVQsRUFBUzd0QyxVQUFVa3lDLGVBQWlCLFdBQzdCam5DLEtBQUtyTCxRQUFRc3lDLGlCQUNoQmpuQyxLQUFLc25DLFNBQVM3b0MsTUFBTXFHLE9BQVM5RSxLQUFLd29DLGNBQWdCLE9BSXRENUYsRUFBUzd0QyxVQUFVcXpDLG1CQUFxQixXQUV0QyxHQUFNcG9DLEtBQUtyTCxRQUFRNnZDLFdBQW5CLENBSUF4a0MsS0FBSzRsQyxjQUFlNWxDLEtBQUtzbEMsa0JBQ3pCdGxDLEtBQUs0bEMsY0FBZTVsQyxLQUFLd2xDLGdCQUd6QixJQUFJd0QsR0FBT2hwQyxLQUFLMmtDLGVBQ1pzRSxFQUFZanBDLEtBQUt5a0MsTUFBTW50QyxPQUFTLENBQ3BDMEksTUFBS3NsQyxpQkFBbUJ0bEMsS0FBS2twQyxhQUFjRixFQUFNQyxFQUFXLElBRzVERCxFQUFPaHBDLEtBQUtxOUIsS0FBS3RjLFdBQWEvZ0IsS0FBSzJrQyxlQUVuQzNrQyxLQUFLd2xDLGdCQUFrQnhsQyxLQUFLa3BDLGFBQWNGLEVBQU0sRUFBRyxLQUdyRHBHLEVBQVM3dEMsVUFBVW0wQyxhQUFlLFNBQVVGLEVBQU1DLEVBQVdFLEdBRzNELElBREEsR0FBSTFFLE1BQ0l1RSxFQUFPLEdBQUksQ0FDakIsR0FBSXRELEdBQU8xbEMsS0FBS3lrQyxNQUFPd0UsRUFDdkIsS0FBTXZELEVBQ0osS0FFRmpCLEdBQU01akMsS0FBTTZrQyxHQUNadUQsR0FBYUUsRUFDYkgsR0FBUXRELEVBQUtySSxLQUFLcmMsV0FFcEIsTUFBT3lqQixJQU1UN0IsRUFBUzd0QyxVQUFVNHpDLGNBQWdCLFdBQ2pDLEdBQU0zb0MsS0FBS3JMLFFBQVF5MEMsVUFBV3BwQyxLQUFLckwsUUFBUTZ2QyxZQUFleGtDLEtBQUt5a0MsTUFBTW50QyxPQVlyRSxJQUFNLEdBVEYreEMsR0FBY3JwQyxLQUFLckwsUUFBUWl3QyxZQUFjLGNBQWdCLGFBQ3pEMEUsRUFBWXRwQyxLQUFLckwsUUFBUWl3QyxZQUFjLGFBQWUsY0FDdEQyRSxFQUF1QnZwQyxLQUFLeWtDLE1BQU0sR0FBR3BILEtBQU1nTSxHQUMzQ0csRUFBV3hwQyxLQUFLcW9DLGNBQ2hCb0IsRUFBZXpwQyxLQUFLd2pDLGVBQWlCZ0csRUFBU25NLEtBQU1pTSxHQUNwREksRUFBV0QsRUFBZXpwQyxLQUFLcTlCLEtBQUt0YyxZQUFlLEVBQUkvZ0IsS0FBS3FqQyxXQUU1RHNHLEVBQW1CRixFQUFlenBDLEtBQUtxOUIsS0FBS3RjLFdBRXRDMXJCLEVBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUt5a0MsTUFBTW50QyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNyRCxHQUFJcXdDLEdBQU8xbEMsS0FBS3lrQyxNQUFNcHZDLEVBRXRCcXdDLEdBQUt4QyxtQkFDQXlHLEVBRUhqRSxFQUFLcnRDLE9BQVNveEMsRUFBZXpwQyxLQUFLcWpDLFdBR2xDcUMsRUFBS3J0QyxPQUFTdUosS0FBS3lGLElBQUtxK0IsRUFBS3J0QyxPQUFRMkgsS0FBSzJrQyxlQUFpQjRFLEdBQzNEN0QsRUFBS3J0QyxPQUFTdUosS0FBS29NLElBQUswM0IsRUFBS3J0QyxPQUFRcXhDLE1BYTNDOUcsRUFBUzd0QyxVQUFVeS9CLGNBQWdCLFNBQVUveEIsRUFBTTBULEVBQU9vSixHQUN4RCxHQUFJcXFCLElBQWF6ekIsR0FBUS9WLE9BQVFtZixFQUdqQyxJQUZBdmYsS0FBS2ljLFVBQVd4WixFQUFNbW5DLEdBRWpCenNCLEdBQVVuZCxLQUFLMm1DLFNBQ2xCLEdBQUt4d0IsRUFBUSxDQUVYLEdBQUkwekIsR0FBUzFzQixFQUFPMnNCLE1BQU8zekIsRUFDM0IwekIsR0FBT3BuQyxLQUFPQSxFQUNkekMsS0FBSzJtQyxTQUFTcnRCLFFBQVN1d0IsRUFBUXRxQixPQUcvQnZmLE1BQUsybUMsU0FBU3J0QixRQUFTN1csRUFBTThjLElBV25DcWpCLEVBQVM3dEMsVUFBVWl6QyxPQUFTLFNBQVVqakIsRUFBT2dsQixHQUMzQyxHQUFNL3BDLEtBQUt5RixTQUFYLENBSUEsR0FBSXcxQixHQUFNajdCLEtBQUt5a0MsTUFBTW50QyxNQUNoQjBJLE1BQUtyTCxRQUFRNnZDLFlBQWN2SixFQUFNLElBQ3ZCLEVBQVJsVyxFQUNIL2tCLEtBQUtKLEdBQUtJLEtBQUt3akMsZUFDTHplLEdBQVNrVyxJQUNuQmo3QixLQUFLSixHQUFLSSxLQUFLd2pDLGtCQUlkeGpDLEtBQUtyTCxRQUFRNnZDLFlBQWN1RixLQUM5QmhsQixFQUFRbE4sRUFBTW1wQixPQUFRamMsRUFBT2tXLElBRzFCajdCLEtBQUt5a0MsTUFBTzFmLEtBQ2Yva0IsS0FBS2dsQyxjQUFnQmpnQixFQUNyQi9rQixLQUFLZ3FDLGtCQUNMaHFDLEtBQUs4akMsaUJBQ0w5akMsS0FBS3cwQixjQUFjLGlCQUl2Qm9PLEVBQVM3dEMsVUFBVTRxQixTQUFXLFNBQVVvcUIsR0FDdEMvcEMsS0FBS2dvQyxPQUFRaG9DLEtBQUtnbEMsY0FBZ0IsRUFBRytFLElBR3ZDbkgsRUFBUzd0QyxVQUFVbUgsS0FBTyxTQUFVNnRDLEdBQ2xDL3BDLEtBQUtnb0MsT0FBUWhvQyxLQUFLZ2xDLGNBQWdCLEVBQUcrRSxJQUd2Q25ILEVBQVM3dEMsVUFBVWkxQyxnQkFBa0IsV0FDbkNocUMsS0FBS2lxQywyQkFDTGpxQyxLQUFLK2tDLGFBQWUva0MsS0FBS3lrQyxNQUFPemtDLEtBQUtnbEMsZUFDckNobEMsS0FBS2txQyxnQkFBa0JscUMsS0FBSytrQyxhQUFhcndDLFFBQ3pDa25DLEVBQVE5bUIsSUFBSzlVLEtBQUtrcUMsZ0JBQWlCLGdCQUdyQ3RILEVBQVM3dEMsVUFBVWsxQyx5QkFBMkIsV0FDdkNqcUMsS0FBSytrQyxjQUNSbkosRUFBUS9sQixPQUFRN1YsS0FBSytrQyxhQUFhcndDLFFBQVMsZ0JBVy9Da3VDLEVBQVM3dEMsVUFBVW8xQyxRQUFVLFNBQVVqUCxHQUVyQyxJQUFNLEdBQUk3bEMsR0FBRSxFQUFHNGxDLEVBQU1qN0IsS0FBS3lrQyxNQUFNbnRDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ3JELEdBQUlxd0MsR0FBTzFsQyxLQUFLeWtDLE1BQU1wdkMsRUFDdEIsSUFBS3F3QyxFQUFLaHhDLFNBQVd3bUMsRUFDbkIsTUFBT3dLLEtBVWI5QyxFQUFTN3RDLFVBQVVxMUMsU0FBVyxTQUFVM0osR0FDdENBLEVBQVE1b0IsRUFBTXFwQixVQUFXVCxFQUV6QixLQUFNLEdBREZnRSxNQUNNcHZDLEVBQUUsRUFBRzRsQyxFQUFNd0YsRUFBTW5wQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJNmxDLEdBQU91RixFQUFNcHJDLEdBQ2Jxd0MsRUFBTzFsQyxLQUFLbXFDLFFBQVNqUCxFQUNwQndLLElBQ0hqQixFQUFNNWpDLEtBQU02a0MsR0FHaEIsTUFBT2pCLElBT1Q3QixFQUFTN3RDLFVBQVVzMUMsZ0JBQWtCLFdBRW5DLElBQU0sR0FERnpDLE1BQ012eUMsRUFBRSxFQUFHNGxDLEVBQU1qN0IsS0FBS3lrQyxNQUFNbnRDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUMvQ3V5QyxFQUFVL21DLEtBQU1iLEtBQUt5a0MsTUFBTXB2QyxHQUFHWCxRQUVoQyxPQUFPa3pDLElBUVRoRixFQUFTN3RDLFVBQVV1MUMsY0FBZ0IsU0FBVXBQLEdBRTNDLEdBQUl3SyxHQUFPMWxDLEtBQUttcUMsUUFBU2pQLEVBQ3pCLE9BQUt3SyxHQUNJQSxHQUdUeEssRUFBT3JqQixFQUFNNnBCLFVBQVd4RyxFQUFNO0FBQ3ZCbDdCLEtBQUttcUMsUUFBU2pQLEtBU3ZCMEgsRUFBUzd0QyxVQUFVdzFDLHdCQUEwQixTQUFVQyxFQUFVemxCLEdBQy9ELElBQU15bEIsRUFDSixPQUFTeHFDLEtBQUtrcUMsZ0JBRWhCbmxCLEdBQWtCaHVCLFNBQVZndUIsRUFBc0Iva0IsS0FBS2dsQyxjQUFnQmpnQixDQUVuRCxJQUFJa1csR0FBTWo3QixLQUFLeWtDLE1BQU1udEMsTUFDckIsSUFBSyxFQUFpQixFQUFYa3pDLEdBQWtCdlAsRUFDM0IsTUFBT2o3QixNQUFLcXFDLGlCQUlkLEtBQU0sR0FERnpDLE1BQ012eUMsRUFBSTB2QixFQUFReWxCLEVBQWV6bEIsRUFBUXlsQixHQUFibjFDLEVBQXdCQSxJQUFNLENBQzVELEdBQUk0ekMsR0FBWWpwQyxLQUFLckwsUUFBUTZ2QyxXQUFhM3NCLEVBQU1tcEIsT0FBUTNyQyxFQUFHNGxDLEdBQVE1bEMsRUFDL0Rxd0MsRUFBTzFsQyxLQUFLeWtDLE1BQU93RSxFQUNsQnZELElBQ0hrQyxFQUFVL21DLEtBQU02a0MsRUFBS2h4QyxTQUd6QixNQUFPa3pDLElBS1RoRixFQUFTN3RDLFVBQVUwMUMsU0FBVyxXQUM1QnpxQyxLQUFLbWMsS0FBSyxhQUdaeW1CLEVBQVM3dEMsVUFBVTIxQyxtQkFBcUIsU0FBVXYwQixHQUNoRG5XLEtBQUtpYyxVQUFXLHNCQUF3QjlGLEtBSzFDeXNCLEVBQVM3dEMsVUFBVTQxQyxTQUFXLFdBQzVCM3FDLEtBQUt5bkMsV0FDTHpuQyxLQUFLNlUsVUFHUGdELEVBQU1tcUIsZUFBZ0JZLEVBQVUsV0FBWSxLQUU1Q0EsRUFBUzd0QyxVQUFVOGYsT0FBUyxXQUNwQjdVLEtBQUt5RixXQUdYekYsS0FBS2srQixVQUVBbCtCLEtBQUtyTCxRQUFRNnZDLGFBQ2hCeGtDLEtBQUtKLEVBQUlpWSxFQUFNbXBCLE9BQVFoaEMsS0FBS0osRUFBR0ksS0FBS3dqQyxpQkFFdEN4akMsS0FBS21vQyxnQkFDTG5vQyxLQUFLb29DLHFCQUNMcG9DLEtBQUtpbkMsaUJBQ0xqbkMsS0FBSzhrQyw0QkFHUCxJQUFJOEYsR0FBeUJoSSxFQUFTZ0ksdUJBQXlCLFdBQzdELEdBQUlDLEVBQ0osT0FBTyxZQUNMLEdBQWtCOXpDLFNBQWI4ekMsRUFDSCxNQUFPQSxFQUVULEtBQU1qMUMsRUFFSixZQURBaTFDLEdBQVcsRUFJYixJQUFJcHNDLEdBQVEvSSxTQUFTOEksY0FBYyxTQUMvQnZCLEVBQVV2SCxTQUFTNGQsZUFBZSxnREFDdEM3VSxHQUFNYyxZQUFhdEMsR0FDbkJ2SCxTQUFTeWQsS0FBSzVULFlBQWFkLEVBQzNCLElBQUlxc0MsR0FBZWwxQyxFQUFrQkYsU0FBUzBKLEtBQU0sVUFBVzJyQyxPQUkvRCxPQUZBRixHQUEwQyxJQUEvQkMsRUFBYXAwQyxRQUFRLE9BQ2hDaEIsU0FBU3lkLEtBQUt4VCxZQUFhbEIsR0FDcEJvc0MsS0FLWGpJLEdBQVM3dEMsVUFBVTB5QyxTQUFXLFdBQzVCLEdBQUl1RCxHQUFjaHJDLEtBQUtyTCxRQUFROHlDLFFBQy9CLElBQU11RCxFQUFOLENBR0EsR0FBSUgsR0FBV0QsR0FDZixLQUFNQyxFQUFXLENBRWYsR0FBSWhyQixHQUF3QixjQUFmbXJCLEVBQThCLFdBQWEsWUFFeEQsWUFEQWhyQyxNQUFNNmYsS0FJUixHQUFJaXJCLEdBQWVsMUMsRUFBa0JvSyxLQUFLdEwsUUFBUyxVQUFXcTJDLE9BRXJCLEtBQXBDRCxFQUFhcDBDLFFBQVEsWUFDeEJzSixLQUFLMm5DLFdBRUwzbkMsS0FBS2lyQyxlQU9UckksRUFBUzd0QyxVQUFVbTJDLFVBQVksU0FBVS8wQixHQUV2QyxHQUFNblcsS0FBS3JMLFFBQVFteUMsaUJBQ2ZweEMsU0FBU3kxQyxlQUFpQnoxQyxTQUFTeTFDLGVBQWlCbnJDLEtBQUt0TCxTQUk3RCxHQUFzQixJQUFqQnloQixFQUFNYSxRQUFnQixDQUV6QixHQUFJbzBCLEdBQWFwckMsS0FBS3JMLFFBQVFpd0MsWUFBYyxPQUFTLFVBQ3JENWtDLE1BQUt5cUMsV0FDTHpxQyxLQUFNb3JDLFNBQ0QsSUFBc0IsSUFBakJqMUIsRUFBTWEsUUFBZ0IsQ0FFaEMsR0FBSXEwQixHQUFjcnJDLEtBQUtyTCxRQUFRaXdDLFlBQWMsV0FBYSxNQUMxRDVrQyxNQUFLeXFDLFdBQ0x6cUMsS0FBTXFyQyxPQU9WekksRUFBUzd0QyxVQUFVazJDLFdBQWEsV0FDOUIsR0FBTWpyQyxLQUFLeUYsU0FBWCxDQUdBbTJCLEVBQVEvbEIsT0FBUTdWLEtBQUt0TCxRQUFTLG9CQUM5QmtuQyxFQUFRL2xCLE9BQVE3VixLQUFLdEwsUUFBUyxlQUU5QixLQUFNLEdBQUlXLEdBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUt5a0MsTUFBTW50QyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNyRCxHQUFJcXdDLEdBQU8xbEMsS0FBS3lrQyxNQUFNcHZDLEVBQ3RCcXdDLEdBQUtudUIsVUFFUHZYLEtBQUtpcUMsMkJBQ0xqcUMsS0FBS3RMLFFBQVFpTCxZQUFhSyxLQUFLc25DLFVBRS9CZCxFQUFjeG1DLEtBQUs2a0MsT0FBT3YvQixTQUFVdEYsS0FBS3RMLFNBQ3BDc0wsS0FBS3JMLFFBQVFteUMsZ0JBQ2hCOW1DLEtBQUt0TCxRQUFRZ2pCLGdCQUFnQixZQUM3Qm1GLEVBQVFELE9BQVE1YyxLQUFLdEwsUUFBUyxVQUFXc0wsT0FHM0NBLEtBQUt5RixVQUFXLEVBQ2hCekYsS0FBS21jLEtBQUssZ0JBR1p5bUIsRUFBUzd0QyxVQUFVd2lCLFFBQVUsV0FDM0J2WCxLQUFLaXJDLGFBQ0FqckMsS0FBSzBuQyxlQUNSN3FCLEVBQVFELE9BQVFwYixFQUFRLFNBQVV4QixNQUVwQ0EsS0FBS21jLEtBQUssV0FDTGdCLEdBQVVuZCxLQUFLMm1DLFVBQ2xCeHBCLEVBQU9tdUIsV0FBWXRyQyxLQUFLdEwsUUFBUyxrQkFFNUJzTCxNQUFLdEwsUUFBUTB5QyxtQkFDYjd5QyxHQUFXeUwsS0FBS21uQyxPQUt6QnR2QixFQUFNM2lCLE9BQVEwdEMsRUFBUzd0QyxVQUFXMHVDLEVBS2xDLElBQUlYLEdBQVEsZUFBaUJ0aEMsRUE2QjdCLE9BM0JBb2hDLEdBQVMyRSxnQkFBa0IsU0FBVXJNLEdBQzdCNEgsR0FJTjVILEVBQUtwaEMsYUFBYyxlQUFnQixPQVFyQzhvQyxFQUFTek8sS0FBTyxTQUFVK0csR0FDeEJBLEVBQU9yakIsRUFBTThwQixnQkFBaUJ6RyxFQUM5QixJQUFJNTdCLEdBQUs0N0IsR0FBUUEsRUFBS2tNLFlBQ3RCLE9BQU85bkMsSUFBTS9LLEVBQVcrSyxJQUcxQnVZLEVBQU0ycUIsU0FBVUksRUFBVSxZQUVyQnpsQixHQUFVQSxFQUFPb2UsU0FDcEJwZSxFQUFPb2UsUUFBUyxXQUFZcUgsR0FHOUJBLEVBQVNDLEtBQU9BLEVBRVRELElBYUwsU0FBVXBoQyxFQUFRb2xCLEdBSUksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEseUJBQ04sNEJBQ0EsbUJBQ0MsU0FBVXZCLEVBQWM2QixHQUN6QixNQUFPK0osR0FBU3BsQixFQUFRd1osRUFBYzZCLEtBRVosZ0JBQVhILFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZnBsQixFQUNBc2IsUUFBUSx3QkFDUkEsUUFBUSxZQUlWdGIsRUFBTytwQyxXQUFhM2tCLEVBQ2xCcGxCLEVBQ0FBLEVBQU93WixhQUNQeFosRUFBT3FiLFVBSVZyYixPQUFRLFNBQWtCQSxFQUFRd1osRUFBYzZCLEdBSW5ELFFBQVM2ZCxNQUVULFFBQVM2USxNQUdUQSxFQUFXeDJDLFVBQVksR0FBSWltQixHQUUzQnV3QixFQUFXeDJDLFVBQVV5MkMsZUFBaUIsU0FBVXRRLEdBQzlDbDdCLEtBQUt5ckMsZ0JBQWlCdlEsR0FBTSxJQUc5QnFRLEVBQVd4MkMsVUFBVTIyQyxpQkFBbUIsU0FBVXhRLEdBQ2hEbDdCLEtBQUt5ckMsZ0JBQWlCdlEsR0FBTSxJQU85QnFRLEVBQVd4MkMsVUFBVTAyQyxnQkFBa0IsU0FBVXZRLEVBQU15USxHQUVyREEsRUFBb0I1MEMsU0FBWDQwQyxHQUF1QixJQUFTQSxDQUN6QyxJQUFJQyxHQUFhRCxFQUFTLE9BQVMsUUFFOUJucUMsR0FBT216QixVQUFVa1gsZUFFcEJodkIsRUFBUyt1QixHQUFjMVEsRUFBTSxjQUFlbDdCLE1BQ2xDd0IsRUFBT216QixVQUFVbVgsaUJBRTNCanZCLEVBQVMrdUIsR0FBYzFRLEVBQU0sZ0JBQWlCbDdCLE9BRzlDNmMsRUFBUyt1QixHQUFjMVEsRUFBTSxZQUFhbDdCLE1BQzFDNmMsRUFBUyt1QixHQUFjMVEsRUFBTSxhQUFjbDdCLFFBSy9DdXJDLEVBQVd4MkMsVUFBVTRuQixZQUFjLFNBQVV4RyxHQUMzQyxHQUFJMEosR0FBUyxLQUFPMUosRUFBTTFULElBQ3JCekMsTUFBTTZmLElBQ1Q3ZixLQUFNNmYsR0FBVTFKLElBS3BCbzFCLEVBQVd4MkMsVUFBVWczQyxTQUFXLFNBQVV6YixHQUN4QyxJQUFNLEdBQUlqN0IsR0FBRSxFQUFHNGxDLEVBQU0zSyxFQUFRaDVCLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2xELEdBQUlzRSxHQUFRMjJCLEVBQVFqN0IsRUFDcEIsSUFBS3NFLEVBQU1tM0IsWUFBYzl3QixLQUFLZ3NDLGtCQUM1QixNQUFPcnlDLEtBT2I0eEMsRUFBV3gyQyxVQUFVazNDLFlBQWMsU0FBVTkxQixHQUUzQyxHQUFJZixHQUFTZSxFQUFNZixNQUNkQSxJQUF1QixJQUFYQSxHQUEyQixJQUFYQSxHQUdqQ3BWLEtBQUtrc0MsYUFBYy8xQixFQUFPQSxJQUc1Qm8xQixFQUFXeDJDLFVBQVVvM0MsYUFBZSxTQUFVaDJCLEdBQzVDblcsS0FBS2tzQyxhQUFjLzFCLEVBQU9BLEVBQU1xYSxlQUFlLEtBR2pEK2EsRUFBV3gyQyxVQUFVcTNDLGdCQUNyQmIsRUFBV3gyQyxVQUFVczNDLGNBQWdCLFNBQVVsMkIsR0FDN0NuVyxLQUFLa3NDLGFBQWMvMUIsRUFBT0EsSUFRNUJvMUIsRUFBV3gyQyxVQUFVbTNDLGFBQWUsU0FBVS8xQixFQUFPbTJCLEdBRTlDdHNDLEtBQUtrbEMsZ0JBSVZsbEMsS0FBS2tsQyxlQUFnQixFQUVyQmxsQyxLQUFLZ3NDLGtCQUEwQ2oxQyxTQUF0QnUxQyxFQUFRalcsVUFFL0JpVyxFQUFRalcsVUFBWWlXLEVBQVF4YixXQUU5Qjl3QixLQUFLdXNDLFlBQWFwMkIsRUFBT20yQixLQUczQmYsRUFBV3gyQyxVQUFVdzNDLFlBQWMsU0FBVXAyQixFQUFPbTJCLEdBQ2xEdHNDLEtBQUt3c0MscUJBQXNCcjJCLEdBQzNCblcsS0FBS2ljLFVBQVcsZUFBaUI5RixFQUFPbTJCLElBSTFDLElBQUlHLElBQ0Z2WCxXQUFhLFlBQWEsV0FDMUIzZ0IsWUFBYyxZQUFhLFdBQVksZUFDdkNnaEIsYUFBZSxjQUFlLFlBQWEsaUJBQzNDbVgsZUFBaUIsZ0JBQWlCLGNBQWUsbUJBdUtuRCxPQXBLQW5CLEdBQVd4MkMsVUFBVXkzQyxxQkFBdUIsU0FBVXIyQixHQUNwRCxHQUFNQSxFQUFOLENBUUEsSUFBTSxHQUpGZ2tCLEdBQVNzUyxFQUFpQnQyQixFQUFNMVQsTUFFaENtbkIsRUFBT3pULEVBQU1DLGVBQWlCNVUsRUFBUzlMLFNBRWpDTCxFQUFFLEVBQUc0bEMsRUFBTWQsRUFBTzdpQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNqRCxHQUFJczNDLEdBQU94UyxFQUFPOWtDLEVBQ2xCd25CLEdBQVFwZixLQUFNbXNCLEVBQU0raUIsRUFBTTNzQyxNQUc1QkEsS0FBSzRzQyxxQkFDSHpTLE9BQVFBLEVBQ1J2USxLQUFNQSxLQUlWMmhCLEVBQVd4MkMsVUFBVTgzQyx1QkFBeUIsV0FDNUMsR0FBSXR0QixHQUFPdmYsS0FBSzRzQyxtQkFFaEIsSUFBTXJ0QixHQUFTQSxFQUFLNGEsT0FBcEIsQ0FJQSxJQUFNLEdBQUk5a0MsR0FBRSxFQUFHNGxDLEVBQU0xYixFQUFLNGEsT0FBTzdpQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUN0RCxHQUFJOGdCLEdBQVFvSixFQUFLNGEsT0FBTzlrQyxFQUN4QnduQixHQUFRRCxPQUFRMkMsRUFBS3FLLEtBQU16VCxFQUFPblcsWUFFN0JBLE1BQUs0c0Msc0JBS2RyQixFQUFXeDJDLFVBQVUrM0MsWUFBYyxTQUFVMzJCLEdBQzNDblcsS0FBSytzQyxhQUFjNTJCLEVBQU9BLElBRzVCbzFCLEVBQVd4MkMsVUFBVWk0QyxnQkFDckJ6QixFQUFXeDJDLFVBQVVrNEMsY0FBZ0IsU0FBVTkyQixHQUN4Q0EsRUFBTWtnQixXQUFhcjJCLEtBQUtnc0MsbUJBQzNCaHNDLEtBQUsrc0MsYUFBYzUyQixFQUFPQSxJQUk5Qm8xQixFQUFXeDJDLFVBQVVtNEMsWUFBYyxTQUFVLzJCLEdBQzNDLEdBQUl4YyxHQUFRcUcsS0FBSytyQyxTQUFVNTFCLEVBQU1xYSxlQUM1QjcyQixJQUNIcUcsS0FBSytzQyxhQUFjNTJCLEVBQU94YyxJQVU5QjR4QyxFQUFXeDJDLFVBQVVnNEMsYUFBZSxTQUFVNTJCLEVBQU9tMkIsR0FDbkR0c0MsS0FBS210QyxZQUFhaDNCLEVBQU9tMkIsSUFJM0JmLEVBQVd4MkMsVUFBVW80QyxZQUFjLFNBQVVoM0IsRUFBT20yQixHQUNsRHRzQyxLQUFLaWMsVUFBVyxlQUFpQjlGLEVBQU9tMkIsS0FNMUNmLEVBQVd4MkMsVUFBVXE0QyxVQUFZLFNBQVVqM0IsR0FDekNuVyxLQUFLcXRDLFdBQVlsM0IsRUFBT0EsSUFHMUJvMUIsRUFBV3gyQyxVQUFVdTRDLGNBQ3JCL0IsRUFBV3gyQyxVQUFVdzRDLFlBQWMsU0FBVXAzQixHQUN0Q0EsRUFBTWtnQixXQUFhcjJCLEtBQUtnc0MsbUJBQzNCaHNDLEtBQUtxdEMsV0FBWWwzQixFQUFPQSxJQUk1Qm8xQixFQUFXeDJDLFVBQVV5NEMsV0FBYSxTQUFVcjNCLEdBQzFDLEdBQUl4YyxHQUFRcUcsS0FBSytyQyxTQUFVNTFCLEVBQU1xYSxlQUM1QjcyQixJQUNIcUcsS0FBS3F0QyxXQUFZbDNCLEVBQU94YyxJQVU1QjR4QyxFQUFXeDJDLFVBQVVzNEMsV0FBYSxTQUFVbDNCLEVBQU9tMkIsR0FDakR0c0MsS0FBS3l0QyxlQUNMenRDLEtBQUswdEMsVUFBV3YzQixFQUFPbTJCLElBSXpCZixFQUFXeDJDLFVBQVUyNEMsVUFBWSxTQUFVdjNCLEVBQU9tMkIsR0FDaER0c0MsS0FBS2ljLFVBQVcsYUFBZTlGLEVBQU9tMkIsS0FNeENmLEVBQVd4MkMsVUFBVTA0QyxhQUFlLFdBRWxDenRDLEtBQUtrbEMsZUFBZ0IsUUFDZGxsQyxNQUFLZ3NDLGtCQUVaaHNDLEtBQUs2c0MseUJBQ0w3c0MsS0FBSzJ0QyxlQUdQcEMsRUFBV3gyQyxVQUFVNDRDLFlBQWNqVCxFQUluQzZRLEVBQVd4MkMsVUFBVTY0QyxrQkFDckJyQyxFQUFXeDJDLFVBQVU4NEMsZ0JBQWtCLFNBQVUxM0IsR0FDMUNBLEVBQU1rZ0IsV0FBYXIyQixLQUFLZ3NDLG1CQUMzQmhzQyxLQUFLOHRDLGVBQWdCMzNCLEVBQU9BLElBSWhDbzFCLEVBQVd4MkMsVUFBVWc1QyxjQUFnQixTQUFVNTNCLEdBQzdDLEdBQUl4YyxHQUFRcUcsS0FBSytyQyxTQUFVNTFCLEVBQU1xYSxlQUM1QjcyQixJQUNIcUcsS0FBSzh0QyxlQUFnQjMzQixFQUFPeGMsSUFVaEM0eEMsRUFBV3gyQyxVQUFVKzRDLGVBQWlCLFNBQVUzM0IsRUFBT20yQixHQUNyRHRzQyxLQUFLeXRDLGVBQ0x6dEMsS0FBS2d1QyxjQUFlNzNCLEVBQU9tMkIsSUFJN0JmLEVBQVd4MkMsVUFBVWk1QyxjQUFnQixTQUFVNzNCLEVBQU9tMkIsR0FDcER0c0MsS0FBS2ljLFVBQVcsaUJBQW1COUYsRUFBT20yQixLQU01Q2YsRUFBVzBDLGdCQUFrQixTQUFVM0IsR0FDckMsT0FDRTFzQyxFQUFxQjdJLFNBQWxCdTFDLEVBQVE0QixNQUFzQjVCLEVBQVE0QixNQUFRNUIsRUFBUXowQyxRQUN6RHVHLEVBQXFCckgsU0FBbEJ1MUMsRUFBUTZCLE1BQXNCN0IsRUFBUTZCLE1BQVE3QixFQUFRdDBDLFVBTXREdXpDLElBWUwsU0FBVS9wQyxFQUFRb2xCLEdBS0ksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEseUJBQ04sa0JBQ0EseUJBQ0MsU0FBVU0sRUFBUzB1QixHQUNwQixNQUFPM2tCLEdBQVNwbEIsRUFBUXFiLEVBQVMwdUIsS0FFUCxnQkFBWDd1QixTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2ZwbEIsRUFDQXNiLFFBQVEsV0FDUkEsUUFBUSxlQUlWdGIsRUFBTzRzQyxXQUFheG5CLEVBQ2xCcGxCLEVBQ0FBLEVBQU9xYixRQUNQcmIsRUFBTytwQyxhQUlWL3BDLE9BQVEsU0FBa0JBLEVBQVFxYixFQUFTMHVCLEdBTTlDLFFBQVM3USxNQUdULFFBQVMyVCxHQUFxQmw0QixHQUN2QkEsRUFBTUMsZUFDVEQsRUFBTUMsaUJBRU5ELEVBQU1FLGFBQWMsRUFNeEIsUUFBUyszQixNQXdEVCxRQUFTRSxLQUNQLE9BQU8sRUF0RFRGLEVBQVdyNUMsVUFBWSxHQUFJdzJDLEdBSTNCNkMsRUFBV3I1QyxVQUFVdzVDLFlBQWMsV0FDakN2dUMsS0FBS3d1QyxjQUFjLElBR3JCSixFQUFXcjVDLFVBQVUwNUMsY0FBZ0IsV0FDbkN6dUMsS0FBS3d1QyxjQUFjLEdBR3JCLElBQUk3WixHQUFZbnpCLEVBQU9tekIsU0FLdkJ5WixHQUFXcjVDLFVBQVV5NUMsYUFBZSxTQUFVN0MsR0FFNUNBLEVBQW9CNTBDLFNBQVg0MEMsR0FBdUIsSUFBU0EsQ0FFekMsSUFBSStDLEVBRUZBLEdBREcvWixFQUFVa1gsZUFDQyxTQUFVOEMsR0FFdEJBLEVBQU9sd0MsTUFBTW0xQixZQUFjK1gsRUFBUyxPQUFTLElBRXJDaFgsRUFBVW1YLGlCQUNOLFNBQVU2QyxHQUV0QkEsRUFBT2x3QyxNQUFNbXdDLGNBQWdCakQsRUFBUyxPQUFTLElBR25DLFdBRVBBLEdBQ0hrRCxFQUF1QkYsR0FNN0IsS0FBTSxHQURGL0MsR0FBYUQsRUFBUyxPQUFTLFNBQ3pCdDJDLEVBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUs4dUMsUUFBUXgzQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUN2RCxHQUFJczVDLEdBQVMzdUMsS0FBSzh1QyxRQUFRejVDLEVBQzFCMkssTUFBS3lyQyxnQkFBaUJrRCxFQUFRaEQsR0FDOUIrQyxFQUFhQyxHQUNiOXhCLEVBQVMrdUIsR0FBYytDLEVBQVEsUUFBUzN1QyxPQVk1QyxJQUFJOGlDLEdBQVEsZUFBaUJwdEMsVUFBUzJJLGdCQUdsQ3d3QyxFQUF5Qi9MLEVBQWUsU0FBVTZMLEdBRTVCLE9BQW5CQSxFQUFPcDJDLFdBQ1ZvMkMsRUFBT0ksWUFBY1QsRUFJdkIsS0FBTSxHQURGbHhCLEdBQVN1eEIsRUFBTzlyQyxpQkFBaUIsT0FDM0J4TixFQUFFLEVBQUc0bEMsRUFBTTdkLEVBQU85bEIsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDakQsR0FBSXlkLEdBQU1zSyxFQUFPL25CLEVBQ2pCeWQsR0FBSWk4QixZQUFjVCxJQVRlNVQsQ0FvQnJDMFQsR0FBV3I1QyxVQUFVdzNDLFlBQWMsU0FBVXAyQixFQUFPbTJCLEdBRWxELEdBQThCLFNBQXpCbjJCLEVBQU05ZCxPQUFPRSxVQUE0QyxTQUFyQjRkLEVBQU05ZCxPQUFPb0ssS0FJcEQsTUFGQXpDLE1BQUtrbEMsZUFBZ0IsYUFDZGxsQyxNQUFLZ3NDLGlCQUlkaHNDLE1BQUtndkMsaUJBQWtCNzRCLEVBQU9tMkIsRUFFOUIsSUFBSTJDLEdBQVV2NUMsU0FBU3kxQyxhQUNsQjhELElBQVdBLEVBQVFDLE1BQ3RCRCxFQUFRQyxPQUdWbHZDLEtBQUt3c0MscUJBQXNCcjJCLEdBRTNCblcsS0FBS212QyxrQkFBb0JmLEVBQVdnQixvQkFDcEN2eUIsRUFBUXBmLEtBQU0rRCxFQUFRLFNBQVV4QixNQUVoQ0EsS0FBS2ljLFVBQVcsZUFBaUI5RixFQUFPbTJCLEtBSTFDOEIsRUFBV3I1QyxVQUFVaTZDLGlCQUFtQixTQUFVNzRCLEVBQU9tMkIsR0FFdkR0c0MsS0FBS3F2QyxpQkFBbUI5RCxFQUFXMEMsZ0JBQWlCM0IsRUFHcEQsSUFBSWdELEdBQTZCLGNBQWRuNUIsRUFBTTFULEtBQ3JCOHNDLEVBQWlCcDVCLEVBQU05ZCxPQUFPRSxRQUM1QisyQyxJQUFrQyxVQUFsQkMsR0FDcEJsQixFQUFxQmw0QixJQVd6Qmk0QixFQUFXcjVDLFVBQVVvNEMsWUFBYyxTQUFVaDNCLEVBQU9tMkIsR0FDbEQsR0FBSWtELEdBQWF4dkMsS0FBS3l2QyxpQkFBa0J0NUIsRUFBT20yQixFQUMvQ3RzQyxNQUFLaWMsVUFBVyxlQUFpQjlGLEVBQU9tMkIsRUFBU2tELElBQ2pEeHZDLEtBQUswdkMsVUFBV3Y1QixFQUFPbTJCLEVBQVNrRCxJQUlsQ3BCLEVBQVdyNUMsVUFBVTA2QyxpQkFBbUIsU0FBVXQ1QixFQUFPbTJCLEdBQ3ZELEdBQUlxRCxHQUFZcEUsRUFBVzBDLGdCQUFpQjNCLEdBQ3hDa0QsR0FDRjV2QyxFQUFHK3ZDLEVBQVUvdkMsRUFBSUksS0FBS3F2QyxpQkFBaUJ6dkMsRUFDdkN4QixFQUFHdXhDLEVBQVV2eEMsRUFBSTRCLEtBQUtxdkMsaUJBQWlCanhDLEVBTXpDLFFBSE00QixLQUFLNHZDLFlBQWM1dkMsS0FBSzZ2QyxlQUFnQkwsSUFDNUN4dkMsS0FBSzh2QyxXQUFZMzVCLEVBQU9tMkIsR0FFbkJrRCxHQUlUcEIsRUFBV3I1QyxVQUFVODZDLGVBQWlCLFNBQVVMLEdBQzlDLE1BQU81dEMsTUFBS0MsSUFBSzJ0QyxFQUFXNXZDLEdBQU0sR0FBS2dDLEtBQUtDLElBQUsydEMsRUFBV3B4QyxHQUFNLEdBV3BFZ3dDLEVBQVdyNUMsVUFBVTI0QyxVQUFZLFNBQVV2M0IsRUFBT20yQixHQUNoRHRzQyxLQUFLaWMsVUFBVyxhQUFlOUYsRUFBT20yQixJQUN0Q3RzQyxLQUFLK3ZDLGVBQWdCNTVCLEVBQU9tMkIsSUFHOUI4QixFQUFXcjVDLFVBQVVnN0MsZUFBaUIsU0FBVTU1QixFQUFPbTJCLEdBQ2hEdHNDLEtBQUs0dkMsV0FDUjV2QyxLQUFLZ3dDLFNBQVU3NUIsRUFBT20yQixHQUd0QnRzQyxLQUFLaXdDLGFBQWM5NUIsRUFBT20yQixJQUk5QmYsRUFBV3gyQyxVQUFVNDRDLFlBQWMsV0FDakM5d0IsRUFBUUQsT0FBUXBiLEVBQVEsU0FBVXhCLE9BTXBDb3VDLEVBQVdyNUMsVUFBVSs2QyxXQUFhLFNBQVUzNUIsRUFBT20yQixHQUNqRHRzQyxLQUFLNHZDLFlBQWEsRUFDbEI1dkMsS0FBS2t3QyxlQUFpQjlCLEVBQVdILGdCQUFpQjNCLEdBRWxEdHNDLEtBQUttd0Msb0JBQXFCLEVBRTFCbndDLEtBQUtvd0MsVUFBV2o2QixFQUFPbTJCLElBR3pCOEIsRUFBV3I1QyxVQUFVcTdDLFVBQVksU0FBVWo2QixFQUFPbTJCLEdBQ2hEdHNDLEtBQUtpYyxVQUFXLGFBQWU5RixFQUFPbTJCLEtBSXhDOEIsRUFBV3I1QyxVQUFVMjZDLFVBQVksU0FBVXY1QixFQUFPbTJCLEVBQVNrRCxHQUVuRHh2QyxLQUFLNHZDLFlBSVg1dkMsS0FBS3F3QyxTQUFVbDZCLEVBQU9tMkIsRUFBU2tELElBR2pDcEIsRUFBV3I1QyxVQUFVczdDLFNBQVcsU0FBVWw2QixFQUFPbTJCLEVBQVNrRCxHQUN4RG5CLEVBQXFCbDRCLEdBQ3JCblcsS0FBS2ljLFVBQVcsWUFBYzlGLEVBQU9tMkIsRUFBU2tELEtBSWhEcEIsRUFBV3I1QyxVQUFVaTdDLFNBQVcsU0FBVTc1QixFQUFPbTJCLEdBRS9DdHNDLEtBQUs0dkMsWUFBYSxDQUVsQixJQUFJeE4sR0FBUXBpQyxJQUNaeUQsWUFBWSxpQkFDSDIrQixHQUFNK04scUJBR2Zud0MsS0FBS3N3QyxRQUFTbjZCLEVBQU9tMkIsSUFHdkI4QixFQUFXcjVDLFVBQVV1N0MsUUFBVSxTQUFVbjZCLEVBQU9tMkIsR0FDOUN0c0MsS0FBS2ljLFVBQVcsV0FBYTlGLEVBQU9tMkIsS0FHdEM4QixFQUFXcjVDLFVBQVU0NEMsWUFBYyxXQUNqQzl3QixFQUFRRCxPQUFRcGIsRUFBUSxTQUFVeEIsWUFDM0JBLE1BQUttdkMsbUJBTWRmLEVBQVdyNUMsVUFBVXc3QyxRQUFVLFNBQVVwNkIsR0FDbENuVyxLQUFLbXdDLG9CQUNSOUIsRUFBcUJsNEIsSUFPekJpNEIsRUFBV3I1QyxVQUFVazdDLGFBQWUsU0FBVTk1QixFQUFPbTJCLEdBRW5ELElBQUt0c0MsS0FBS3d3QyxtQkFBbUMsV0FBZHI2QixFQUFNMVQsS0FBckMsQ0FLQSxHQUFJbEssR0FBVzRkLEVBQU05ZCxPQUFPRSxRQU81QixLQU5pQixTQUFaQSxHQUFtQyxZQUFaQSxJQUMxQjRkLEVBQU05ZCxPQUFPbzRDLFFBRWZ6d0MsS0FBSzB3QyxZQUFhdjZCLEVBQU9tMkIsR0FHTixXQUFkbjJCLEVBQU0xVCxLQUFvQixDQUM3QnpDLEtBQUt3d0MsbUJBQW9CLENBQ3pCLElBQUlwTyxHQUFRcGlDLElBRVp5RCxZQUFZLGlCQUNIMitCLEdBQU1vTyxtQkFDWixRQUlQcEMsRUFBV3I1QyxVQUFVMjdDLFlBQWMsU0FBVXY2QixFQUFPbTJCLEdBQ2xEdHNDLEtBQUtpYyxVQUFXLGVBQWlCOUYsRUFBT20yQixLQUsxQzhCLEVBQVdyNUMsVUFBVTQ3QyxTQUFXLFdBQzlCLEdBQUlDLEdBQVN4QyxFQUFXZ0Isb0JBQ3BCeUIsRUFBYzd3QyxLQUFLbXZDLGtCQUFrQnZ2QyxFQUFJZ3hDLEVBQU9oeEMsRUFDaERreEMsRUFBYzl3QyxLQUFLbXZDLGtCQUFrQi93QyxFQUFJd3lDLEVBQU94eUMsR0FFL0N3RCxLQUFLQyxJQUFLZ3ZDLEdBQWdCLEdBQUtqdkMsS0FBS0MsSUFBS2l2QyxHQUFnQixJQUM1RDl3QyxLQUFLeXRDLGdCQU1UVyxFQUFXSCxnQkFBa0IsU0FBVTNCLEdBQ3JDLE9BQ0Uxc0MsRUFBcUI3SSxTQUFsQnUxQyxFQUFRNEIsTUFBc0I1QixFQUFRNEIsTUFBUTVCLEVBQVF6MEMsUUFDekR1RyxFQUFxQnJILFNBQWxCdTFDLEVBQVE2QixNQUFzQjdCLEVBQVE2QixNQUFRN0IsRUFBUXQwQyxTQUk3RCxJQUFJKzRDLEdBQXNDaDZDLFNBQXZCeUssRUFBT3NrQixXQWMxQixPQVhBc29CLEdBQVdnQixrQkFBb0IsV0FDN0IsT0FDRXh2QyxFQUFHbXhDLEVBQWV2dkMsRUFBT3drQixZQUFjdHdCLFNBQVMwSixLQUFLaWlCLFdBQ3JEampCLEVBQUcyeUMsRUFBZXZ2QyxFQUFPc2tCLFlBQWNwd0IsU0FBUzBKLEtBQUtraUIsWUFNekQ4c0IsRUFBV0gsZ0JBQWtCMUMsRUFBVzBDLGdCQUVqQ0csSUFJTCxTQUFVNXNDLEVBQVFvbEIsR0FJSSxrQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSxvQkFDTixrQkFDQSxrQkFDQSxhQUNBLHdCQUNBLHdCQUNDLFNBQVVxZixFQUFTL2UsRUFBUytsQixFQUFVd0wsRUFBWXYyQixHQUNuRCxNQUFPK08sR0FBU3BsQixFQUFRbzZCLEVBQVMvZSxFQUFTK2xCLEVBQVV3TCxFQUFZdjJCLEtBRXRDLGdCQUFYNkUsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLG9CQUNSQSxRQUFRLFdBQ1JBLFFBQVEsY0FDUkEsUUFBUSxjQUNSQSxRQUFRLG1CQUlWdGIsRUFBT29oQyxTQUFXaGMsRUFDaEJwbEIsRUFDQUEsRUFBT282QixRQUNQcDZCLEVBQU9xYixRQUNQcmIsRUFBT29oQyxTQUNQcGhDLEVBQU80c0MsV0FDUDVzQyxFQUFPdS9CLGVBSVZ2L0IsT0FBUSxTQUFrQkEsRUFBUW82QixFQUFTL2UsRUFBUytsQixFQUFVd0wsRUFBWXYyQixHQUs3RSxRQUFTdzJCLEdBQXFCbDRCLEdBQ3ZCQSxFQUFNQyxlQUNURCxFQUFNQyxpQkFFTkQsRUFBTUUsYUFBYyxFQTJJeEIsUUFBUzI2QixHQUFtQjFFLEdBQzFCLEdBQUkyRSxHQUFlN0MsRUFBV0gsZ0JBQWlCM0IsRUFDL0MsT0FBTzJFLEdBQWE3eUMsRUFBSW9ELEVBQU9za0IsWUF2SWpDak8sRUFBTTNpQixPQUFRMHRDLEVBQVM3b0MsVUFDckJtM0MsV0FBVyxFQUNYQyxxQkFBcUIsSUFLdkJ2TyxFQUFTc0UsY0FBY3JtQyxLQUFLLGVBSTVCZ1gsRUFBTTNpQixPQUFRMHRDLEVBQVM3dEMsVUFBV3E1QyxFQUFXcjVDLFdBSTdDNnRDLEVBQVM3dEMsVUFBVXE4QyxZQUFjLFdBQy9CcHhDLEtBQUt5UyxHQUFJLFdBQVl6UyxLQUFLcXhDLFVBQzFCcnhDLEtBQUt5UyxHQUFJLFdBQVl6UyxLQUFLc3hDLGVBQzFCdHhDLEtBQUt5UyxHQUFJLHFCQUFzQnpTLEtBQUt1eEMseUJBQ3BDdnhDLEtBQUt5UyxHQUFJLGFBQWN6UyxLQUFLd3hDLGFBRzlCNU8sRUFBUzd0QyxVQUFVczhDLFNBQVcsV0FDdEJyeEMsS0FBS3JMLFFBQVF1OEMsWUFBYWx4QyxLQUFLeXhDLGNBR3JDN1YsRUFBUTltQixJQUFLOVUsS0FBS3RMLFFBQVMsZ0JBQzNCc0wsS0FBSzh1QyxTQUFZOXVDLEtBQUtzbkMsVUFDdEJ0bkMsS0FBS3V1QyxjQUNMdnVDLEtBQUt5eEMsYUFBYyxJQUdyQjdPLEVBQVM3dEMsVUFBVXk4QyxXQUFhLFdBQ3hCeHhDLEtBQUt5eEMsY0FHWDdWLEVBQVEvbEIsT0FBUTdWLEtBQUt0TCxRQUFTLGdCQUM5QnNMLEtBQUt5dUMsc0JBQ0V6dUMsTUFBS3l4QyxjQUdkN08sRUFBUzd0QyxVQUFVdThDLGNBQWdCLGlCQUMxQnR4QyxNQUFLbWxDLGlCQUdkdkMsRUFBUzd0QyxVQUFVdzhDLHdCQUEwQixTQUFVcDdCLEdBQ3JEazRCLEVBQXFCbDRCLEdBQ3JCblcsS0FBSzB4QyxpQkFBa0J2N0IsSUFLekJ5c0IsRUFBUzd0QyxVQUFVdzNDLFlBQWMsU0FBVXAyQixFQUFPbTJCLEdBRWhELEdBQThCLFNBQXpCbjJCLEVBQU05ZCxPQUFPRSxVQUE0QyxTQUFyQjRkLEVBQU05ZCxPQUFPb0ssS0FJcEQsTUFGQXpDLE1BQUtrbEMsZUFBZ0IsYUFDZGxsQyxNQUFLZ3NDLGlCQUlkaHNDLE1BQUtndkMsaUJBQWtCNzRCLEVBQU9tMkIsRUFHOUIsSUFBSTJDLEdBQVV2NUMsU0FBU3kxQyxhQUNsQjhELElBQVdBLEVBQVFDLE1BQVFELEdBQVdqdkMsS0FBS3RMLFNBRTlDdTZDLEdBQVd2NUMsU0FBUzBKLE1BQ3BCNnZDLEVBQVFDLE9BRVZsdkMsS0FBSzB4QyxpQkFBa0J2N0IsR0FFdkJuVyxLQUFLa21DLE1BQVFsbUMsS0FBS0osRUFDbEJnOEIsRUFBUTltQixJQUFLOVUsS0FBS3NuQyxTQUFVLG1CQUU1QnRuQyxLQUFLd3NDLHFCQUFzQnIyQixHQUUzQm5XLEtBQUttdkMsa0JBQW9CZixFQUFXZ0Isb0JBQ3BDdnlCLEVBQVFwZixLQUFNK0QsRUFBUSxTQUFVeEIsTUFFaENBLEtBQUt3MEIsY0FBZSxjQUFlcmUsR0FBU20yQixJQUc5QyxJQUFJcUYsSUFDRnA5QixZQUFZLEVBQ1ptNEIsZUFBZSxHQUdia0YsR0FDRkMsT0FBTyxFQUNQQyxRQUFRLEVBR1ZsUCxHQUFTN3RDLFVBQVUyOEMsaUJBQW1CLFNBQVV2N0IsSUFFekNuVyxLQUFLckwsUUFBUW15QyxlQUFrQjZLLEVBQWtCeDdCLEVBQU0xVCxPQUN2RG12QyxFQUFZejdCLEVBQU05ZCxPQUFPRSxXQUM1QnlILEtBQUt0TCxRQUFRKzdDLFNBTWpCN04sRUFBUzd0QyxVQUFVbzRDLFlBQWMsU0FBVWgzQixFQUFPbTJCLEdBQ2hELEdBQUlrRCxHQUFheHZDLEtBQUt5dkMsaUJBQWtCdDVCLEVBQU9tMkIsRUFDL0N0c0MsTUFBSyt4Qyx3QkFBeUI1N0IsRUFBT20yQixFQUFTa0QsR0FDOUN4dkMsS0FBSzB2QyxVQUFXdjVCLEVBQU9tMkIsRUFBU2tELEdBQ2hDeHZDLEtBQUt3MEIsY0FBZSxjQUFlcmUsR0FBU20yQixFQUFTa0QsS0FHdkQ1TSxFQUFTN3RDLFVBQVU4NkMsZUFBaUIsU0FBVUwsR0FDNUMsT0FBUXh2QyxLQUFLZ3lDLGtCQUFvQnB3QyxLQUFLQyxJQUFLMnRDLEVBQVc1dkMsR0FBTSxHQUs5RGdqQyxFQUFTN3RDLFVBQVUyNEMsVUFBWSxTQUFVdjNCLEVBQU9tMkIsU0FDdkN0c0MsTUFBS2d5QyxpQkFDWnBXLEVBQVEvbEIsT0FBUTdWLEtBQUtzbkMsU0FBVSxtQkFDL0J0bkMsS0FBS3cwQixjQUFlLFlBQWFyZSxHQUFTbTJCLElBQzFDdHNDLEtBQUsrdkMsZUFBZ0I1NUIsRUFBT20yQixHQUs5QixJQUFJMkYsSUFHRjFiLFdBQVcsRUFDWDJiLGVBQWUsRUFtTGpCLE9BMUtBdFAsR0FBUzd0QyxVQUFVZzlDLHdCQUEwQixTQUFVNTdCLEVBQU9tMkIsRUFBU2tELEdBRXJFLEdBQUkyQixHQUFzQm54QyxLQUFLckwsUUFBUXc4QyxvQkFFbkNnQixFQUFzQyxZQUF2QmhCLEdBQXFDQSxFQUN0RG54QyxLQUFLNHZDLGFBQWV1QixHQUNqQmdCLEdBQWlCRixFQUFtQjk3QixFQUFNMVQsUUFJekN6QyxLQUFLZ3lDLGtCQUFvQnB3QyxLQUFLQyxJQUFLMnRDLEVBQVdweEMsR0FBTSxLQUd4RDRCLEtBQUtveUMsYUFBZTV3QyxFQUFPc2tCLFlBQzNCOWxCLEtBQUtxeUMsb0JBQXNCckIsRUFBbUIxRSxHQUU5Q3RzQyxLQUFLZ3lDLGtCQUFtQixJQU01QnBQLEVBQVM3dEMsVUFBVXE3QyxVQUFZLFNBQVVqNkIsRUFBT20yQixHQUM5Q3RzQyxLQUFLc3lDLGtCQUFvQnR5QyxLQUFLSixFQUM5QkksS0FBSzhqQyxpQkFDTDlqQyxLQUFLdzBCLGNBQWUsWUFBYXJlLEdBQVNtMkIsS0FHNUMxSixFQUFTN3RDLFVBQVVzN0MsU0FBVyxTQUFVbDZCLEVBQU9tMkIsRUFBU2tELEdBQ3REbkIsRUFBcUJsNEIsR0FFckJuVyxLQUFLdXlDLGNBQWdCdnlDLEtBQUtrbUMsS0FFMUIsSUFBSXI2QixHQUFZN0wsS0FBS3JMLFFBQVFpd0MsWUFBYyxHQUFLLEVBQzVDc0IsRUFBUWxtQyxLQUFLc3lDLGtCQUFvQjlDLEVBQVc1dkMsRUFBSWlNLENBRXBELEtBQU03TCxLQUFLckwsUUFBUTZ2QyxZQUFjeGtDLEtBQUt5a0MsTUFBTW50QyxPQUFTLENBRW5ELEdBQUlrN0MsR0FBYzV3QyxLQUFLeUYsS0FBTXJILEtBQUt5a0MsTUFBTSxHQUFHcHNDLE9BQVEySCxLQUFLc3lDLGtCQUN4RHBNLEdBQVFBLEVBQVFzTSxFQUF3QyxJQUF4QnRNLEVBQVFzTSxHQUFzQnRNLENBQzlELElBQUl1TSxHQUFXN3dDLEtBQUtvTSxLQUFNaE8sS0FBS3FvQyxjQUFjaHdDLE9BQVEySCxLQUFLc3lDLGtCQUMxRHBNLEdBQWdCdU0sRUFBUnZNLEVBQTBDLElBQXJCQSxFQUFRdU0sR0FBbUJ2TSxFQUcxRGxtQyxLQUFLa21DLE1BQVFBLEVBRWJsbUMsS0FBSzB5QyxhQUFlLEdBQUk5a0MsTUFDeEI1TixLQUFLdzBCLGNBQWUsV0FBWXJlLEdBQVNtMkIsRUFBU2tELEtBR3BENU0sRUFBUzd0QyxVQUFVdTdDLFFBQVUsU0FBVW42QixFQUFPbTJCLEdBQ3ZDdHNDLEtBQUtyTCxRQUFRZytDLGFBQ2hCM3lDLEtBQUttbEMsaUJBQWtCLEVBR3pCLElBQUlwZ0IsR0FBUS9rQixLQUFLNHlDLHNCQUVqQixJQUFLNXlDLEtBQUtyTCxRQUFRZytDLGFBQWUzeUMsS0FBS3JMLFFBQVE2dkMsV0FBYSxDQUl6RCxHQUFJcU8sR0FBVzd5QyxLQUFLZ21DLG9CQUNwQmhtQyxNQUFLbWxDLGlCQUFtQjBOLEVBQVc3eUMsS0FBS3lrQyxNQUFNLEdBQUdwc0MsU0FDOUN3NkMsRUFBVzd5QyxLQUFLcW9DLGNBQWNod0MsV0FDdEIySCxNQUFLckwsUUFBUWcrQyxZQUFjNXRCLEdBQVMva0IsS0FBS2dsQyxnQkFFcERqZ0IsR0FBUy9rQixLQUFLOHlDLDRCQUVUOXlDLE1BQUt1eUMsY0FHWnZ5QyxLQUFLZ29DLE9BQVFqakIsR0FDYi9rQixLQUFLdzBCLGNBQWUsVUFBV3JlLEdBQVNtMkIsS0FHMUMxSixFQUFTN3RDLFVBQVU2OUMscUJBQXVCLFdBQ3hDLEdBQUlDLEdBQVc3eUMsS0FBS2dtQyxxQkFFaEIzWSxFQUFXenJCLEtBQUtDLElBQUs3QixLQUFLK3lDLGlCQUFrQkYsRUFBVTd5QyxLQUFLZ2xDLGdCQUUzRGdPLEVBQWtCaHpDLEtBQUtpekMsbUJBQW9CSixFQUFVeGxCLEVBQVUsR0FDL0Q2bEIsRUFBa0JsekMsS0FBS2l6QyxtQkFBb0JKLEVBQVV4bEIsRUFBVSxJQUUvRHRJLEVBQVFpdUIsRUFBZ0IzbEIsU0FBVzZsQixFQUFnQjdsQixTQUNyRDJsQixFQUFnQmp1QixNQUFRbXVCLEVBQWdCbnVCLEtBQzFDLE9BQU9BLElBV1Q2ZCxFQUFTN3RDLFVBQVVrK0MsbUJBQXFCLFNBQVVKLEVBQVV4bEIsRUFBVThiLEdBTXBFLElBTEEsR0FBSXBrQixHQUFRL2tCLEtBQUtnbEMsY0FDYm1PLEVBQWNyeEMsRUFBQUEsRUFDZHN4QyxFQUFZcHpDLEtBQUtyTCxRQUFReTBDLFVBQVlwcEMsS0FBS3JMLFFBQVE2dkMsV0FFcEQsU0FBVW5uQyxFQUFHZzJDLEdBQU8sTUFBWUEsSUFBTGgyQyxHQUFhLFNBQVVBLEVBQUdnMkMsR0FBTyxNQUFXQSxHQUFKaDJDLEdBQzdEKzFDLEVBQVcvbEIsRUFBVThsQixLQUUzQnB1QixHQUFTb2tCLEVBQ1RnSyxFQUFjOWxCLEVBQ2RBLEVBQVdydEIsS0FBSyt5QyxpQkFBa0JGLEVBQVU5dEIsR0FDMUIsT0FBYnNJLElBR0xBLEVBQVd6ckIsS0FBS0MsSUFBS3dyQixFQUV2QixRQUNFQSxTQUFVOGxCLEVBRVZwdUIsTUFBT0EsRUFBUW9rQixJQVNuQnZHLEVBQVM3dEMsVUFBVWcrQyxnQkFBa0IsU0FBVW56QyxFQUFHbWxCLEdBQ2hELEdBQUlrVyxHQUFNajdCLEtBQUt5a0MsTUFBTW50QyxPQUVqQmc4QyxFQUFldHpDLEtBQUtyTCxRQUFRNnZDLFlBQWN2SixFQUFNLEVBQ2hEZ08sRUFBWXFLLEVBQWV6N0IsRUFBTW1wQixPQUFRamMsRUFBT2tXLEdBQVFsVyxFQUN4RDJnQixFQUFPMWxDLEtBQUt5a0MsTUFBT3dFLEVBQ3ZCLEtBQU12RCxFQUNKLE1BQU8sS0FHVCxJQUFJVSxHQUFPa04sRUFBZXR6QyxLQUFLd2pDLGVBQWlCNWhDLEtBQUt5a0MsTUFBT3RoQixFQUFRa1csR0FBUSxDQUM1RSxPQUFPcjdCLElBQU04bEMsRUFBS3J0QyxPQUFTK3RDLElBRzdCeEQsRUFBUzd0QyxVQUFVKzlDLG1CQUFxQixXQUV0QyxHQUE0Qi83QyxTQUF2QmlKLEtBQUt1eUMsZ0JBQWdDdnlDLEtBQUsweUMsY0FFN0MsR0FBSTlrQyxNQUFTNU4sS0FBSzB5QyxhQUFlLElBQ2pDLE1BQU8sRUFHVCxJQUFJcmxCLEdBQVdydEIsS0FBSyt5QyxpQkFBa0IveUMsS0FBS2ttQyxNQUFPbG1DLEtBQUtnbEMsZUFDbkR1TyxFQUFRdnpDLEtBQUt1eUMsY0FBZ0J2eUMsS0FBS2ttQyxLQUN0QyxPQUFLN1ksR0FBVyxHQUFLa21CLEVBQVEsRUFFcEIsRUFDYyxFQUFYbG1CLEdBQXdCLEVBQVJrbUIsRUFFbkIsR0FFRixHQUtUM1EsRUFBUzd0QyxVQUFVMjdDLFlBQWMsU0FBVXY2QixFQUFPbTJCLEdBRWhELEdBQUlrSCxHQUFjeHpDLEtBQUtzcUMsY0FBZW4wQixFQUFNOWQsUUFDeENvN0MsRUFBV0QsR0FBZUEsRUFBWTkrQyxRQUN0Q3UwQyxFQUFZdUssR0FBZTM3QixFQUFNbmhCLFFBQVNzSixLQUFLeWtDLE1BQU8rTyxFQUMxRHh6QyxNQUFLdzBCLGNBQWUsY0FBZXJlLEdBQVNtMkIsRUFBU21ILEVBQVV4SyxLQUsxRHJHLElBWUwsU0FBVXBoQyxFQUFRb2xCLEdBS0ksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEsNkJBQ04seUJBQ0MsU0FBVWd2QixHQUNYLE1BQU8za0IsR0FBU3BsQixFQUFRK3BDLEtBRUUsZ0JBQVg3dUIsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLGVBSVZ0YixFQUFPa3lDLFlBQWM5c0IsRUFDbkJwbEIsRUFDQUEsRUFBTytwQyxhQUlWL3BDLE9BQVEsU0FBa0JBLEVBQVErcEMsR0FLckMsUUFBUzhDLEdBQXFCbDRCLEdBQ3ZCQSxFQUFNQyxlQUNURCxFQUFNQyxpQkFFTkQsRUFBTUUsYUFBYyxFQU14QixRQUFTcTlCLEdBQWF4WSxHQUNwQmw3QixLQUFLMnpDLFFBQVN6WSxHQUloQndZLEVBQVkzK0MsVUFBWSxHQUFJdzJDLEdBTTVCbUksRUFBWTMrQyxVQUFVNCtDLFFBQVUsU0FBVXpZLEdBQ2xDQSxJQUdObDdCLEtBQUs0ekMsWUFDTDV6QyxLQUFLNnpDLFdBQWEzWSxFQUNsQmw3QixLQUFLeXJDLGdCQUFpQnZRLEdBQU0sS0FHOUJ3WSxFQUFZMytDLFVBQVU2K0MsVUFBWSxXQUMxQjV6QyxLQUFLNnpDLGFBR1g3ekMsS0FBS3lyQyxnQkFBaUJ6ckMsS0FBSzZ6QyxZQUFZLFNBQ2hDN3pDLE1BQUs2ekMsWUFHZCxJQUFJdEgsR0FBY21ILEVBQVkzK0MsVUFBVXczQyxXQUV4Q21ILEdBQVkzK0MsVUFBVXczQyxZQUFjLFNBQVVwMkIsR0FFekIsY0FBZEEsRUFBTTFULE1BQ1Q0ckMsRUFBcUJsNEIsR0FFdkJvMkIsRUFBWXBzQyxNQUFPSCxLQUFNRSxXQUczQixJQUFJNndDLEdBQXNDaDZDLFNBQXZCeUssRUFBT3NrQixXQThCMUIsT0F4QkE0dEIsR0FBWTMrQyxVQUFVMjRDLFVBQVksU0FBVXYzQixFQUFPbTJCLEdBQ2pELEdBQUkyRSxHQUFlMUYsRUFBVzBDLGdCQUFpQjNCLEdBQzNDd0gsRUFBZTl6QyxLQUFLNnpDLFdBQVdsOEMsd0JBRS9CbzhDLEVBQVVoRCxFQUFldnZDLEVBQU93a0IsWUFBY3R3QixTQUFTMEosS0FBS2lpQixXQUM1RDJ5QixFQUFVakQsRUFBZXZ2QyxFQUFPc2tCLFlBQWNwd0IsU0FBUzBKLEtBQUtraUIsVUFFNUQyeUIsRUFBV2hELEVBQWFyeEMsR0FBS2swQyxFQUFhaDhDLEtBQU9pOEMsR0FDbkQ5QyxFQUFhcnhDLEdBQUtrMEMsRUFBYS83QyxNQUFRZzhDLEdBQ3ZDOUMsRUFBYTd5QyxHQUFLMDFDLEVBQWE3N0MsSUFBTSs3QyxHQUNyQy9DLEVBQWE3eUMsR0FBSzAxQyxFQUFhNTdDLE9BQVM4N0MsQ0FFckNDLElBQ0hqMEMsS0FBS2ljLFVBQVcsT0FBUzlGLEVBQU9tMkIsS0FJcENvSCxFQUFZMytDLFVBQVV3aUIsUUFBVSxXQUM5QnZYLEtBQUsydEMsY0FDTDN0QyxLQUFLNHpDLGFBS0FGLElBTUwsU0FBVWx5QyxFQUFRb2xCLEdBSUksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEsZ0NBQ04sa0JBQ0EsYUFDQSw0QkFDQSx3QkFDQyxTQUFVTSxFQUFTK2xCLEVBQVU4USxFQUFhNzdCLEdBQzNDLE1BQU8rTyxHQUFTcGxCLEVBQVFxYixFQUFTK2xCLEVBQVU4USxFQUFhNzdCLEtBRTlCLGdCQUFYNkUsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLFdBQ1JBLFFBQVEsY0FDUkEsUUFBUSxnQkFDUkEsUUFBUSxtQkFJVjhKLEVBQ0VwbEIsRUFDQUEsRUFBT3FiLFFBQ1ByYixFQUFPb2hDLFNBQ1BwaEMsRUFBT2t5QyxZQUNQbHlDLEVBQU91L0IsZUFJVnYvQixPQUFRLFNBQWtCQSxFQUFRcWIsRUFBUytsQixFQUFVOFEsRUFBYTc3QixHQXlCckUsUUFBU3E4QixHQUFnQnJvQyxFQUFXelQsR0FDbEM0SCxLQUFLNkwsVUFBWUEsRUFDakI3TCxLQUFLNUgsT0FBU0EsRUFDZDRILEtBQUs0bUMsVUEyRVAsUUFBU3VOLEdBQW1CQyxHQUUxQixNQUFxQixnQkFBVEEsR0FDSEEsRUFHRixLQUFPQSxFQUFNQyxHQUFLLFNBQ2ZELEVBQU1FLEdBQUssS0FBUUYsRUFBTUcsR0FBSyxJQUN0QyxNQUFRSCxFQUFNSSxHQUFLLEtBQVFKLEVBQU1LLEdBQUssSUFDdEMsTUFBUUwsRUFBTU0sR0FBSyxVQUNYTixFQUFNSSxHQUFLLEtBQVEsR0FBS0osRUFBTUssSUFDdEMsTUFBUUwsRUFBTUUsR0FBSyxLQUFRLEdBQUtGLEVBQU1HLElBQ3RDLEtBN0dKLEdBQUlJLEdBQVMsNkJBR1RDLEVBQW9CLFdBRXRCLFFBQVNDLEtBQ1AsR0FBa0I5OUMsU0FBYjh6QyxFQUNILE1BQU9BLEVBRVQsSUFBSWhOLEdBQU1ub0MsU0FBUzhJLGNBQWMsTUFHakMsT0FGQXEvQixHQUFJcitCLFVBQVksU0FDaEJxckMsR0FBYWhOLEVBQUlycUIsWUFBY3FxQixFQUFJcnFCLFdBQVdzaEMsZUFBa0JILEVBUGxFLEdBQUk5SixFQVVKLE9BQU9nSyxLQTBNVCxPQS9MQVgsR0FBZW4vQyxVQUFZLEdBQUkyK0MsR0FFL0JRLEVBQWVuL0MsVUFBVTZ4QyxRQUFVLFdBRWpDNW1DLEtBQUsrMEMsV0FBWSxFQUNqQi8wQyxLQUFLZzFDLFdBQStCLElBQWxCaDFDLEtBQUs2TCxTQUN2QixJQUFJb3BDLEdBQWdCajFDLEtBQUs1SCxPQUFPekQsUUFBUWl3QyxZQUFjLEVBQUksRUFDMUQ1a0MsTUFBS2sxQyxPQUFTbDFDLEtBQUs2TCxXQUFhb3BDLENBRWhDLElBQUl2Z0QsR0FBVXNMLEtBQUt0TCxRQUFVZ0IsU0FBUzhJLGNBQWMsU0FPcEQsSUFOQTlKLEVBQVF3QyxVQUFZLDRCQUNwQnhDLEVBQVF3QyxXQUFhOEksS0FBS2cxQyxXQUFhLFlBQWMsUUFFckR0Z0QsRUFBUW9GLGFBQWMsT0FBUSxVQUM5QjhvQyxFQUFTMkUsZ0JBQWlCN3lDLEdBRXJCa2dELElBQXNCLENBQ3pCLEdBQUk5MUMsR0FBTWtCLEtBQUttMUMsV0FDZnpnRCxHQUFRNkssWUFBYVQsT0FHckJrQixNQUFLbzFDLGVBQ0wxZ0QsRUFBUXdDLFdBQWEsU0FHdkIsSUFBSWtyQyxHQUFRcGlDLElBQ1pBLE1BQUtxMUMsYUFBZSxXQUNsQmpULEVBQU05MkIsVUFFUnRMLEtBQUs1SCxPQUFPcWEsR0FBSSxhQUFjelMsS0FBS3ExQyxjQUVuQ3IxQyxLQUFLeVMsR0FBSSxNQUFPelMsS0FBS3MxQyxPQUVyQnQxQyxLQUFLeVMsR0FBSSxjQUFlLFNBQXdCMkMsRUFBUWUsR0FDdERpc0IsRUFBTWhxQyxPQUFPc3lDLG1CQUFvQnYwQixNQUlyQys5QixFQUFlbi9DLFVBQVU0eUMsU0FBVyxXQUNsQzNuQyxLQUFLc0wsU0FDTHRMLEtBQUsyekMsUUFBUzN6QyxLQUFLdEwsU0FFbkJtb0IsRUFBUXBmLEtBQU11QyxLQUFLdEwsUUFBUyxRQUFTc0wsTUFFckNBLEtBQUs1SCxPQUFPMUQsUUFBUTZLLFlBQWFTLEtBQUt0TCxVQUd4Q3cvQyxFQUFlbi9DLFVBQVVrMkMsV0FBYSxXQUVwQ2pyQyxLQUFLNUgsT0FBTzFELFFBQVFpTCxZQUFhSyxLQUFLdEwsU0FFdENnL0MsRUFBWTMrQyxVQUFVd2lCLFFBQVF0aUIsS0FBTStLLE1BRXBDNmMsRUFBUUQsT0FBUTVjLEtBQUt0TCxRQUFTLFFBQVNzTCxPQUd6Q2swQyxFQUFlbi9DLFVBQVVvZ0QsVUFBWSxXQUNuQyxHQUFJcjJDLEdBQU1wSixTQUFTZ0wsZ0JBQWlCaTBDLEVBQVEsTUFDNUM3MUMsR0FBSWhGLGFBQWMsVUFBVyxjQUM3QixJQUFJZ3VCLEdBQU9weUIsU0FBU2dMLGdCQUFpQmkwQyxFQUFRLFFBQ3pDWSxFQUFnQnBCLEVBQW1CbjBDLEtBQUs1SCxPQUFPekQsUUFBUTZnRCxXQVEzRCxPQVBBMXRCLEdBQUtodUIsYUFBYyxJQUFLeTdDLEdBQ3hCenRCLEVBQUtodUIsYUFBYyxRQUFTLFNBRXRCa0csS0FBS2sxQyxRQUNUcHRCLEVBQUtodUIsYUFBYyxZQUFhLG9DQUVsQ2dGLEVBQUlTLFlBQWF1b0IsR0FDVmhwQixHQW1CVG8xQyxFQUFlbi9DLFVBQVVxZ0QsYUFBZSxXQUN0QyxHQUFJSyxHQUFnQnoxQyxLQUFLNUgsT0FBT3pELFFBQzVCK2dELEVBQVkxMUMsS0FBS2sxQyxPQUFTTyxFQUFjRSxjQUFnQkYsRUFBY0csY0FDMUUvOUIsR0FBTTBwQixRQUFTdmhDLEtBQUt0TCxRQUFTZ2hELElBRy9CeEIsRUFBZW4vQyxVQUFVdWdELE1BQVEsV0FDL0IsR0FBTXQxQyxLQUFLKzBDLFVBQVgsQ0FHQS8wQyxLQUFLNUgsT0FBT3F5QyxVQUNaLElBQUk1cUIsR0FBUzdmLEtBQUtnMUMsV0FBYSxXQUFhLE1BQzVDaDFDLE1BQUs1SCxPQUFReW5CLE9BR2ZxMEIsRUFBZW4vQyxVQUFVNG5CLFlBQWM5RSxFQUFNOEUsWUFFN0N1M0IsRUFBZW4vQyxVQUFVdzdDLFFBQVUsV0FFakMsR0FBSXRCLEdBQVV2NUMsU0FBU3kxQyxhQUNsQjhELElBQVdBLEdBQVdqdkMsS0FBS3RMLFNBQzlCc0wsS0FBS3MxQyxTQU1UcEIsRUFBZW4vQyxVQUFVMHFCLE9BQVMsV0FDM0J6ZixLQUFLKzBDLFlBR1YvMEMsS0FBS3RMLFFBQVFtaEQsVUFBVyxFQUN4QjcxQyxLQUFLKzBDLFdBQVksSUFHbkJiLEVBQWVuL0MsVUFBVXlxQixRQUFVLFdBQzNCeGYsS0FBSyswQyxZQUdYLzBDLEtBQUt0TCxRQUFRbWhELFVBQVcsRUFDeEI3MUMsS0FBSyswQyxXQUFZLElBR25CYixFQUFlbi9DLFVBQVV1VyxPQUFTLFdBRWhDLEdBQUltNUIsR0FBUXprQyxLQUFLNUgsT0FBT3FzQyxLQUV4QixJQUFLemtDLEtBQUs1SCxPQUFPekQsUUFBUTZ2QyxZQUFjQyxFQUFNbnRDLE9BQVMsRUFFcEQsV0FEQTBJLE1BQUt5ZixRQUdQLElBQUlxMkIsR0FBWXJSLEVBQU1udEMsT0FBU210QyxFQUFNbnRDLE9BQVMsRUFBSSxFQUM5Q3krQyxFQUFhLzFDLEtBQUtnMUMsV0FBYSxFQUFJYyxFQUNuQ2oyQixFQUFTN2YsS0FBSzVILE9BQU80c0MsZUFBaUIrUSxFQUFhLFVBQVksUUFDbkUvMUMsTUFBTTZmLE1BR1JxMEIsRUFBZW4vQyxVQUFVd2lCLFFBQVUsV0FDakN2WCxLQUFLaXJDLGNBS1BwekIsRUFBTTNpQixPQUFRMHRDLEVBQVM3b0MsVUFDckJpOEMsaUJBQWlCLEVBQ2pCTCxjQUFlLElBQ2ZDLGVBQWdCLElBQ2hCSixZQUNFbkIsR0FBSSxHQUNKQyxHQUFJLEdBQUlDLEdBQUksR0FDWkMsR0FBSSxHQUFJQyxHQUFJLEdBQ1pDLEdBQUksTUFJUjlSLEVBQVNzRSxjQUFjcm1DLEtBQUssMEJBRTVCK2hDLEVBQVM3dEMsVUFBVWtoRCx1QkFBeUIsV0FDcENqMkMsS0FBS3JMLFFBQVFxaEQsa0JBSW5CaDJDLEtBQUsxRSxXQUFhLEdBQUk0NEMsR0FBZ0IsR0FBSWwwQyxNQUMxQ0EsS0FBSzNFLFdBQWEsR0FBSTY0QyxHQUFnQixFQUFHbDBDLE1BRXpDQSxLQUFLeVMsR0FBSSxXQUFZelMsS0FBS2syQywyQkFHNUJ0VCxFQUFTN3RDLFVBQVVtaEQsd0JBQTBCLFdBQzNDbDJDLEtBQUsxRSxXQUFXcXNDLFdBQ2hCM25DLEtBQUszRSxXQUFXc3NDLFdBQ2hCM25DLEtBQUt5UyxHQUFJLGFBQWN6UyxLQUFLbTJDLDRCQUc5QnZULEVBQVM3dEMsVUFBVW9oRCwwQkFBNEIsV0FDN0NuMkMsS0FBSzFFLFdBQVcydkMsYUFDaEJqckMsS0FBSzNFLFdBQVc0dkMsYUFDaEJqckMsS0FBS2dXLElBQUssYUFBY2hXLEtBQUttMkMsNEJBSy9CdlQsRUFBU3NSLGVBQWlCQSxFQUVuQnRSLElBSUwsU0FBVXBoQyxFQUFRb2xCLEdBSUksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEseUJBQ04sa0JBQ0EsYUFDQSw0QkFDQSx3QkFDQyxTQUFVTSxFQUFTK2xCLEVBQVU4USxFQUFhNzdCLEdBQzNDLE1BQU8rTyxHQUFTcGxCLEVBQVFxYixFQUFTK2xCLEVBQVU4USxFQUFhNzdCLEtBRTlCLGdCQUFYNkUsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLFdBQ1JBLFFBQVEsY0FDUkEsUUFBUSxnQkFDUkEsUUFBUSxtQkFJVjhKLEVBQ0VwbEIsRUFDQUEsRUFBT3FiLFFBQ1ByYixFQUFPb2hDLFNBQ1BwaEMsRUFBT2t5QyxZQUNQbHlDLEVBQU91L0IsZUFJVnYvQixPQUFRLFNBQWtCQSxFQUFRcWIsRUFBUytsQixFQUFVOFEsRUFBYTc3QixHQU1yRSxRQUFTdStCLEdBQVVoK0MsR0FDakI0SCxLQUFLNUgsT0FBU0EsRUFDZDRILEtBQUs0bUMsVUEySVAsTUF4SUF3UCxHQUFTcmhELFVBQVksR0FBSTIrQyxHQUV6QjBDLEVBQVNyaEQsVUFBVTZ4QyxRQUFVLFdBRTNCNW1DLEtBQUtxMkMsT0FBUzNnRCxTQUFTOEksY0FBYyxNQUNyQ3dCLEtBQUtxMkMsT0FBT24vQyxVQUFZLHFCQUN4QjByQyxFQUFTMkUsZ0JBQWlCdm5DLEtBQUtxMkMsUUFFL0JyMkMsS0FBS3MyQyxPQUVMLElBQUlsVSxHQUFRcGlDLElBQ1pBLE1BQUtxMUMsYUFBZSxXQUNsQmpULEVBQU1tVSxrQkFFUnYyQyxLQUFLNUgsT0FBT3FhLEdBQUksYUFBY3pTLEtBQUtxMUMsY0FFbkNyMUMsS0FBS3lTLEdBQUksTUFBT3pTLEtBQUtzMUMsT0FFckJ0MUMsS0FBS3lTLEdBQUksY0FBZSxTQUF3QjJDLEVBQVFlLEdBQ3REaXNCLEVBQU1ocUMsT0FBT3N5QyxtQkFBb0J2MEIsTUFJckNpZ0MsRUFBU3JoRCxVQUFVNHlDLFNBQVcsV0FDNUIzbkMsS0FBS3cyQyxVQUNMeDJDLEtBQUt1MkMsaUJBQ0x2MkMsS0FBSzJ6QyxRQUFTM3pDLEtBQUtxMkMsUUFFbkJyMkMsS0FBSzVILE9BQU8xRCxRQUFRNkssWUFBYVMsS0FBS3EyQyxTQUd4Q0QsRUFBU3JoRCxVQUFVazJDLFdBQWEsV0FFOUJqckMsS0FBSzVILE9BQU8xRCxRQUFRaUwsWUFBYUssS0FBS3EyQyxRQUN0QzNDLEVBQVkzK0MsVUFBVXdpQixRQUFRdGlCLEtBQU0rSyxPQUd0Q28yQyxFQUFTcmhELFVBQVV5aEQsUUFBVSxXQUUzQixHQUFJakQsR0FBUXZ6QyxLQUFLNUgsT0FBT3FzQyxNQUFNbnRDLE9BQVMwSSxLQUFLczJDLEtBQUtoL0MsTUFDNUNpOEMsR0FBUSxFQUNYdnpDLEtBQUt5MkMsUUFBU2xELEdBQ0ksRUFBUkEsR0FDVnZ6QyxLQUFLMDJDLFlBQWFuRCxJQUl0QjZDLEVBQVNyaEQsVUFBVTBoRCxRQUFVLFNBQVVqakIsR0FHckMsSUFGQSxHQUFJOE0sR0FBVzVxQyxTQUFTNnFDLHlCQUNwQm9XLEtBQ0luakIsR0FBUSxDQUNkLEdBQUlvakIsR0FBTWxoRCxTQUFTOEksY0FBYyxLQUNqQ280QyxHQUFJMS9DLFVBQVksTUFDaEJvcEMsRUFBUy9nQyxZQUFhcTNDLEdBQ3RCRCxFQUFROTFDLEtBQU0rMUMsR0FDZHBqQixJQUVGeHpCLEtBQUtxMkMsT0FBTzkyQyxZQUFhK2dDLEdBQ3pCdGdDLEtBQUtzMkMsS0FBT3QyQyxLQUFLczJDLEtBQUtsMkMsT0FBUXUyQyxJQUdoQ1AsRUFBU3JoRCxVQUFVMmhELFdBQWEsU0FBVWxqQixHQUl4QyxJQUFNLEdBRkZrakIsR0FBYTEyQyxLQUFLczJDLEtBQUtqbEMsT0FBUXJSLEtBQUtzMkMsS0FBS2gvQyxPQUFTazhCLEVBQU9BLEdBRW5EbitCLEVBQUUsRUFBRzRsQyxFQUFNeWIsRUFBV3AvQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNyRCxHQUFJdWhELEdBQU1GLEVBQVdyaEQsRUFDckIySyxNQUFLcTJDLE9BQU8xMkMsWUFBYWkzQyxLQUk3QlIsRUFBU3JoRCxVQUFVd2hELGVBQWlCLFdBRTdCdjJDLEtBQUs2MkMsY0FDUjcyQyxLQUFLNjJDLFlBQVkzL0MsVUFBWSxPQUd6QjhJLEtBQUtzMkMsS0FBS2gvQyxTQUdoQjBJLEtBQUs2MkMsWUFBYzcyQyxLQUFLczJDLEtBQU10MkMsS0FBSzVILE9BQU80c0MsZUFDMUNobEMsS0FBSzYyQyxZQUFZMy9DLFVBQVksb0JBRy9Cay9DLEVBQVNyaEQsVUFBVXVnRCxNQUFRLFNBQVVuL0IsR0FDbkMsR0FBSTlkLEdBQVM4ZCxFQUFNOWQsTUFFbkIsSUFBd0IsTUFBbkJBLEVBQU9FLFNBQVosQ0FJQXlILEtBQUs1SCxPQUFPcXlDLFVBQ1osSUFBSTFsQixHQUFRbE4sRUFBTW5oQixRQUFTc0osS0FBS3MyQyxLQUFNaitDLEVBQ3RDMkgsTUFBSzVILE9BQU80dkMsT0FBUWpqQixLQUd0QnF4QixFQUFTcmhELFVBQVV3aUIsUUFBVSxXQUMzQnZYLEtBQUtpckMsY0FHUHJJLEVBQVN3VCxTQUFXQSxFQUlwQnYrQixFQUFNM2lCLE9BQVEwdEMsRUFBUzdvQyxVQUNyQis4QyxVQUFVLElBR1psVSxFQUFTc0UsY0FBY3JtQyxLQUFLLG1CQUU1QitoQyxFQUFTN3RDLFVBQVVnaUQsZ0JBQWtCLFdBQzdCLzJDLEtBQUtyTCxRQUFRbWlELFdBR25COTJDLEtBQUs4MkMsU0FBVyxHQUFJVixHQUFVcDJDLE1BQzlCQSxLQUFLeVMsR0FBSSxXQUFZelMsS0FBS2czQyxrQkFDMUJoM0MsS0FBS3lTLEdBQUksbUJBQW9CelMsS0FBS2kzQyw0QkFDbENqM0MsS0FBS3lTLEdBQUksYUFBY3pTLEtBQUtrM0Msc0JBRzlCdFUsRUFBUzd0QyxVQUFVaWlELGlCQUFtQixXQUNwQ2gzQyxLQUFLODJDLFNBQVNuUCxZQUdoQi9FLEVBQVM3dEMsVUFBVWtpRCwyQkFBNkIsV0FDOUNqM0MsS0FBSzgyQyxTQUFTTixXQUdoQjVULEVBQVM3dEMsVUFBVW1pRCxtQkFBcUIsV0FDdENsM0MsS0FBSzgyQyxTQUFTN0wsY0FLaEJySSxFQUFTd1QsU0FBV0EsRUFFYnhULElBSUwsU0FBVXBoQyxFQUFRb2xCLEdBSUksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEsc0JBQ04sNEJBQ0Esa0JBQ0EsY0FDQyxTQUFVdkIsRUFBYzZCLEVBQVMrbEIsR0FDbEMsTUFBT2hjLEdBQVM1TCxFQUFjNkIsRUFBUytsQixLQUViLGdCQUFYbG1CLFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZjlKLFFBQVEsd0JBQ1JBLFFBQVEsV0FDUkEsUUFBUSxlQUlWOEosRUFDRXBsQixFQUFPd1osYUFDUHhaLEVBQU9xYixRQUNQcmIsRUFBT29oQyxXQUlWcGhDLE9BQVEsU0FBa0J3WixFQUFjNkIsRUFBUytsQixHQWtCcEQsUUFBU3VVLEdBQVEvK0MsR0FJZixHQUhBNEgsS0FBS28zQyxXQUFZLEVBQ2pCcDNDLEtBQUs1SCxPQUFTQSxFQUVUaS9DLEVBQWtCLENBQ3JCLEdBQUlqVixHQUFRcGlDLElBQ1pBLE1BQUtzM0MsbUJBQXFCLFdBQ3hCbFYsRUFBTXBnQyxxQkFsQlosR0FBSXUxQyxHQUFnQkYsQ0FrSnBCLE9BakpLLFVBQVkzaEQsV0FDZjZoRCxFQUFpQixTQUNqQkYsRUFBa0Isb0JBQ1IsZ0JBQWtCM2hELFlBQzVCNmhELEVBQWlCLGVBQ2pCRixFQUFrQiwwQkFpQnBCRixFQUFPcGlELFVBQVksR0FBSWltQixHQUd2Qm04QixFQUFPcGlELFVBQVV5aUQsS0FBTyxXQUN0QngzQyxLQUFLbzNDLFdBQVksUUFFVnAzQyxNQUFLeTNDLFNBRVBKLEdBQ0gzaEQsU0FBU00saUJBQWtCcWhELEVBQWlCcjNDLEtBQUtzM0Msb0JBQW9CLEdBR3ZFdDNDLEtBQUswM0MsUUFHUFAsRUFBT3BpRCxVQUFVMmlELEtBQU8sV0FFdEIsR0FBTTEzQyxLQUFLbzNDLFlBQWFwM0MsS0FBS3kzQyxTQUE3QixDQUlBejNDLEtBQUsyM0MsU0FBVyxHQUFJL3BDLEtBQ3BCLElBQUlyWCxHQUFPeUosS0FBSzVILE9BQU96RCxRQUFROEYsUUFFL0JsRSxHQUFzQixnQkFBUkEsR0FBbUJBLEVBQU8sR0FDeEMsSUFBSTZyQyxHQUFRcGlDLElBQ1pBLE1BQUtzb0IsUUFBVTdrQixXQUFZLFdBQ3pCMitCLEVBQU1ocUMsT0FBTzhELE1BQU0sR0FDbkJrbUMsRUFBTXNWLFFBQ0xuaEQsS0FHTDRnRCxFQUFPcGlELFVBQVV3UCxLQUFPLFdBQ3RCdkUsS0FBS28zQyxXQUFZLFFBRVZwM0MsTUFBS3kzQyxTQUNaejNDLEtBQUs0M0MsUUFFQVAsR0FDSDNoRCxTQUFTVSxvQkFBcUJpaEQsRUFBaUJyM0MsS0FBS3MzQyxvQkFBb0IsSUFJNUVILEVBQU9waUQsVUFBVTZpRCxNQUFRLFdBQ3ZCcHpDLGFBQWN4RSxLQUFLc29CLFVBR3JCNnVCLEVBQU9waUQsVUFBVTRQLE1BQVEsV0FDbEIzRSxLQUFLbzNDLFlBQ1JwM0MsS0FBS3kzQyxVQUFXLEVBQ2hCejNDLEtBQUs0M0MsVUFJVFQsRUFBT3BpRCxVQUFVMlAsUUFBVSxXQUVwQjFFLEtBQUt5M0MsVUFDUnozQyxLQUFLdzNDLFFBS1RMLEVBQU9waUQsVUFBVWlOLGlCQUFtQixXQUNsQyxHQUFJNjFDLEdBQVduaUQsU0FBVTZoRCxFQUN6QnYzQyxNQUFNNjNDLEVBQVcsUUFBVSxjQVM3QmpWLEVBQVNzRSxjQUFjcm1DLEtBQUssaUJBRTVCK2hDLEVBQVM3dEMsVUFBVStpRCxjQUFnQixXQUNqQzkzQyxLQUFLKzNDLE9BQVMsR0FBSVosR0FBUW4zQyxNQUUxQkEsS0FBS3lTLEdBQUksV0FBWXpTLEtBQUtnNEMsZ0JBQzFCaDRDLEtBQUt5UyxHQUFJLFdBQVl6UyxLQUFLaTRDLFlBQzFCajRDLEtBQUt5UyxHQUFJLGNBQWV6UyxLQUFLaTRDLFlBQzdCajRDLEtBQUt5UyxHQUFJLGFBQWN6UyxLQUFLazRDLG1CQUc5QnRWLEVBQVM3dEMsVUFBVWlqRCxlQUFpQixXQUM1Qmg0QyxLQUFLckwsUUFBUThGLFdBR25CdUYsS0FBSyszQyxPQUFPUCxPQUNaMzZCLEVBQVFwZixLQUFNdUMsS0FBS3RMLFFBQVMsYUFBY3NMLE1BQzFDQSxLQUFLbTRDLG1CQUFvQixJQUczQnZWLEVBQVM3dEMsVUFBVWtqRCxXQUFhLFdBQzlCajRDLEtBQUsrM0MsT0FBT3h6QyxRQUdkcStCLEVBQVM3dEMsVUFBVW1qRCxpQkFBbUIsV0FDcENsNEMsS0FBSyszQyxPQUFPeHpDLE9BQ1B2RSxLQUFLbTRDLG9CQUNSdDdCLEVBQVFELE9BQVE1YyxLQUFLdEwsUUFBUyxhQUFjc0wsWUFDckNBLE1BQUttNEMsb0JBT2hCdlYsRUFBUzd0QyxVQUFVcWpELGFBQWUsV0FDaENwNEMsS0FBSyszQyxPQUFPcHpDLFFBQ1prWSxFQUFRcGYsS0FBTXVDLEtBQUt0TCxRQUFTLGFBQWNzTCxPQUk1QzRpQyxFQUFTN3RDLFVBQVVzakQsYUFBZSxXQUNoQ3I0QyxLQUFLKzNDLE9BQU9yekMsVUFDWm1ZLEVBQVFELE9BQVE1YyxLQUFLdEwsUUFBUyxhQUFjc0wsT0FLOUM0aUMsRUFBU3VVLE9BQVNBLEVBRVh2VSxJQUlMLFNBQVVwaEMsRUFBUW9sQixHQUlJLGtCQUFWckssU0FBd0JBLE9BQU9DLElBRXpDRCxPQUFRLCtCQUNOLGFBQ0Esd0JBQ0MsU0FBVXFtQixFQUFVL3FCLEdBQ3JCLE1BQU8rTyxHQUFTcGxCLEVBQVFvaEMsRUFBVS9xQixLQUVSLGdCQUFYNkUsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLGNBQ1JBLFFBQVEsbUJBSVY4SixFQUNFcGxCLEVBQ0FBLEVBQU9vaEMsU0FDUHBoQyxFQUFPdS9CLGVBSVZ2L0IsT0FBUSxTQUFrQkEsRUFBUW9oQyxFQUFVL3FCLEdBSy9DLFFBQVN5Z0MsR0FBa0I3VCxHQUV6QixJQUFNLEdBREZuRSxHQUFXNXFDLFNBQVM2cUMseUJBQ2RsckMsRUFBRSxFQUFHNGxDLEVBQU13SixFQUFNbnRDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBQUlxd0MsR0FBT2pCLEVBQU1wdkMsRUFDakJpckMsR0FBUy9nQyxZQUFhbW1DLEVBQUtoeEMsU0FFN0IsTUFBTzRyQyxHQXNJVCxNQTVIQXNDLEdBQVM3dEMsVUFBVXdqRCxPQUFTLFNBQVU5WCxFQUFPMWIsR0FDM0MsR0FBSTBmLEdBQVF6a0MsS0FBS2tvQyxXQUFZekgsRUFDN0IsSUFBTWdFLEdBQVVBLEVBQU1udEMsT0FBdEIsQ0FHQSxHQUFJMmpDLEdBQU1qN0IsS0FBS3lrQyxNQUFNbnRDLE1BRXJCeXRCLEdBQWtCaHVCLFNBQVZndUIsRUFBc0JrVyxFQUFNbFcsQ0FFcEMsSUFBSXViLEdBQVdnWSxFQUFrQjdULEdBRTdCK1QsRUFBV3p6QixHQUFTa1csQ0FDeEIsSUFBS3VkLEVBQ0h4NEMsS0FBSzZrQyxPQUFPdGxDLFlBQWErZ0MsT0FDcEIsQ0FDTCxHQUFJbVksR0FBb0J6NEMsS0FBS3lrQyxNQUFPMWYsR0FBUXJ3QixPQUM1Q3NMLE1BQUs2a0MsT0FBTzN3QixhQUFjb3NCLEVBQVVtWSxHQUd0QyxHQUFlLElBQVYxekIsRUFFSC9rQixLQUFLeWtDLE1BQVFBLEVBQU1ya0MsT0FBUUosS0FBS3lrQyxXQUMzQixJQUFLK1QsRUFFVng0QyxLQUFLeWtDLE1BQVF6a0MsS0FBS3lrQyxNQUFNcmtDLE9BQVFxa0MsT0FDM0IsQ0FFTCxHQUFJaVUsR0FBVzE0QyxLQUFLeWtDLE1BQU1wekIsT0FBUTBULEVBQU9rVyxFQUFNbFcsRUFDL0Mva0IsTUFBS3lrQyxNQUFRemtDLEtBQUt5a0MsTUFBTXJrQyxPQUFRcWtDLEdBQVFya0MsT0FBUXM0QyxHQUdsRDE0QyxLQUFLc29DLFdBQVk3RCxFQUVqQixJQUFJa1UsR0FBcUI1ekIsRUFBUS9rQixLQUFLZ2xDLGNBQWdCLEVBQUlQLEVBQU1udEMsTUFDaEUwSSxNQUFLNDRDLGtCQUFtQjd6QixFQUFPNHpCLEtBR2pDL1YsRUFBUzd0QyxVQUFVc2QsT0FBUyxTQUFVb3VCLEdBQ3BDemdDLEtBQUt1NEMsT0FBUTlYLEVBQU96Z0MsS0FBS3lrQyxNQUFNbnRDLFNBR2pDc3JDLEVBQVM3dEMsVUFBVThqRCxRQUFVLFNBQVVwWSxHQUNyQ3pnQyxLQUFLdTRDLE9BQVE5WCxFQUFPLElBT3RCbUMsRUFBUzd0QyxVQUFVOGdCLE9BQVMsU0FBVTRxQixHQUNwQyxHQUVJcHJDLEdBQUc0bEMsRUFBS3lLLEVBRlJqQixFQUFRemtDLEtBQUtvcUMsU0FBVTNKLEdBQ3ZCa1ksRUFBcUIsQ0FHekIsS0FBTXRqRCxFQUFFLEVBQUc0bEMsRUFBTXdKLEVBQU1udEMsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDNUNxd0MsRUFBT2pCLEVBQU1wdkMsRUFDYixJQUFJeWpELEdBQVlqaEMsRUFBTW5oQixRQUFTc0osS0FBS3lrQyxNQUFPaUIsR0FBUzFsQyxLQUFLZ2xDLGFBQ3pEMlQsSUFBc0JHLEVBQVksRUFBSSxFQUd4QyxJQUFNempELEVBQUUsRUFBRzRsQyxFQUFNd0osRUFBTW50QyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFDdENxd0MsRUFBT2pCLEVBQU1wdkMsR0FDYnF3QyxFQUFLN3ZCLFNBRUxnQyxFQUFNdXBCLFdBQVlwaEMsS0FBS3lrQyxNQUFPaUIsRUFHM0JqQixHQUFNbnRDLFFBRVQwSSxLQUFLNDRDLGtCQUFtQixFQUFHRCxJQUsvQi9WLEVBQVM3dEMsVUFBVTZqRCxrQkFBb0IsU0FBVUcsRUFBa0JKLEdBQ2pFQSxFQUFxQkEsR0FBc0IsRUFDM0MzNEMsS0FBS2dsQyxlQUFpQjJULEVBQ3RCMzRDLEtBQUtnbEMsY0FBZ0JwakMsS0FBS3lGLElBQUssRUFBR3pGLEtBQUtvTSxJQUFLaE8sS0FBS3lrQyxNQUFNbnRDLE9BQVMsRUFBRzBJLEtBQUtnbEMsZ0JBRXhFaGxDLEtBQUtpYyxVQUFXLG9CQUFzQjg4QixFQUFrQkosSUFDeEQzNEMsS0FBS2c1QyxXQUFZRCxHQUFrQixJQU9yQ25XLEVBQVM3dEMsVUFBVWtrRCxlQUFpQixTQUFVL2QsR0FDNUMsR0FBSXdLLEdBQU8xbEMsS0FBS21xQyxRQUFTalAsRUFDekIsSUFBTXdLLEVBQU4sQ0FHQUEsRUFBS3hILFNBRUwsSUFBSW5aLEdBQVFsTixFQUFNbmhCLFFBQVNzSixLQUFLeWtDLE1BQU9pQixFQUN2QzFsQyxNQUFLZzVDLFdBQVlqMEIsS0FPbkI2ZCxFQUFTN3RDLFVBQVVpa0QsV0FBYSxTQUFVRCxFQUFrQkcsR0FDMUQsR0FBSUMsR0FBcUJuNUMsS0FBS3dqQyxjQUM5QnhqQyxNQUFLdW9DLGVBQWdCd1EsR0FDckIvNEMsS0FBS29vQyxxQkFDTHBvQyxLQUFLaW5DLGlCQUVBam5DLEtBQUtyTCxRQUFRZytDLFlBR2hCM3lDLEtBQUtKLEdBQUt1NUMsRUFBcUJuNUMsS0FBS3dqQyxlQUNwQ3hqQyxLQUFLb2tDLG1CQUdBOFUsR0FDSGw1QyxLQUFLOGtDLDJCQUVQOWtDLEtBQUtnb0MsT0FBUWhvQyxLQUFLZ2xDLGlCQU1mcEMsSUFJTCxTQUFVcGhDLEVBQVFvbEIsR0FJSSxrQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSx3QkFDTixrQkFDQSxrQkFDQSxhQUNBLHdCQUNDLFNBQVVxZixFQUFTL2UsRUFBUytsQixFQUFVL3FCLEdBQ3ZDLE1BQU8rTyxHQUFTcGxCLEVBQVFvNkIsRUFBUy9lLEVBQVMrbEIsRUFBVS9xQixLQUUxQixnQkFBWDZFLFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZnBsQixFQUNBc2IsUUFBUSxvQkFDUkEsUUFBUSxXQUNSQSxRQUFRLGNBQ1JBLFFBQVEsbUJBSVY4SixFQUNFcGxCLEVBQ0FBLEVBQU9vNkIsUUFDUHA2QixFQUFPcWIsUUFDUHJiLEVBQU9vaEMsU0FDUHBoQyxFQUFPdS9CLGVBSVZ2L0IsT0FBUSxTQUFrQkEsRUFBUW82QixFQUFTL2UsRUFBUytsQixFQUFVL3FCLEdBK0JqRSxRQUFTdWhDLEdBQW1CM0YsR0FFMUIsR0FBMEIsT0FBckJBLEVBQVNsN0MsVUFDWms3QyxFQUFTNTVDLGFBQWEsMEJBQ3RCLE9BQVM0NUMsRUFHWCxJQUFJNEYsR0FBTzVGLEVBQVM1d0MsaUJBQWlCLDhCQUNyQyxPQUFPZ1YsR0FBTXFwQixVQUFXbVksR0FRMUIsUUFBU0MsR0FBWXhtQyxFQUFLeW1DLEdBQ3hCdjVDLEtBQUs4UyxJQUFNQSxFQUNYOVMsS0FBS3U1QyxTQUFXQSxFQUNoQnY1QyxLQUFLcVUsT0F1Q1AsTUF0RkF1dUIsR0FBU3NFLGNBQWNybUMsS0FBSyxtQkFFNUIraEMsRUFBUzd0QyxVQUFVeWtELGdCQUFrQixXQUNuQ3g1QyxLQUFLeVMsR0FBSSxhQUFjelMsS0FBS3k1QyxXQUc5QjdXLEVBQVM3dEMsVUFBVTBrRCxTQUFXLFdBQzVCLEdBQUlBLEdBQVd6NUMsS0FBS3JMLFFBQVE4a0QsUUFDNUIsSUFBTUEsRUFBTixDQVFBLElBQU0sR0FKRmpQLEdBQThCLGdCQUFaaVAsR0FBdUJBLEVBQVcsRUFDcEQ3UixFQUFZNW5DLEtBQUt1cUMsd0JBQXlCQyxHQUUxQ2tQLEtBQ01ya0QsRUFBRSxFQUFHNGxDLEVBQU0yTSxFQUFVdHdDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ3BELEdBQUlvK0MsR0FBVzdMLEVBQVV2eUMsR0FDckJza0QsRUFBaUJQLEVBQW1CM0YsRUFDeENpRyxHQUFhQSxFQUFXdDVDLE9BQVF1NUMsR0FHbEMsSUFBTXRrRCxFQUFFLEVBQUc0bEMsRUFBTXllLEVBQVdwaUQsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDakQsR0FBSXlkLEdBQU00bUMsRUFBV3JrRCxFQUNyQixJQUFJaWtELEdBQVl4bUMsRUFBSzlTLFNBMEJ6QnM1QyxFQUFXdmtELFVBQVU0bkIsWUFBYzlFLEVBQU04RSxZQUV6QzI4QixFQUFXdmtELFVBQVVzZixLQUFPLFdBQzFCd0ksRUFBUXBmLEtBQU11QyxLQUFLOFMsSUFBSyxPQUFROVMsTUFDaEM2YyxFQUFRcGYsS0FBTXVDLEtBQUs4UyxJQUFLLFFBQVM5UyxNQUVqQ0EsS0FBSzhTLElBQUlDLElBQU0vUyxLQUFLOFMsSUFBSWpaLGFBQWEsMEJBRXJDbUcsS0FBSzhTLElBQUk0RSxnQkFBZ0IsMkJBRzNCNGhDLEVBQVd2a0QsVUFBVWlwQixPQUFTLFNBQVU3SCxHQUN0Q25XLEtBQUswUyxTQUFVeUQsRUFBTyx3QkFHeEJtakMsRUFBV3ZrRCxVQUFVbXBCLFFBQVUsV0FDN0JsZSxLQUFLMFMsU0FBVXlELE1BQU8sdUJBR3hCbWpDLEVBQVd2a0QsVUFBVTJkLFNBQVcsU0FBVXlELEVBQU9qZixHQUUvQzJsQixFQUFRRCxPQUFRNWMsS0FBSzhTLElBQUssT0FBUTlTLE1BQ2xDNmMsRUFBUUQsT0FBUTVjLEtBQUs4UyxJQUFLLFFBQVM5UyxLQUVuQyxJQUFJMGxDLEdBQU8xbEMsS0FBS3U1QyxTQUFTalAsY0FBZXRxQyxLQUFLOFMsS0FDekMyZ0MsRUFBVy9OLEdBQVFBLEVBQUtoeEMsT0FDNUJzTCxNQUFLdTVDLFNBQVNOLGVBQWdCeEYsR0FFOUI3WCxFQUFROW1CLElBQUs5VSxLQUFLOFMsSUFBSzViLEdBQ3ZCOEksS0FBS3U1QyxTQUFTL2tCLGNBQWUsV0FBWXJlLEVBQU9zOUIsSUFLbEQ3USxFQUFTMFcsV0FBYUEsRUFFZjFXLElBU1AsU0FBWXBoQyxFQUFRb2xCLEdBSUksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEscUJBQ04sYUFDQSxTQUNBLHFCQUNBLGNBQ0EsV0FDQSxvQkFDQSxjQUNDcUssR0FDeUIsZ0JBQVhsSyxXQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2Y5SixRQUFRLGNBQ1JBLFFBQVEsVUFDUkEsUUFBUSxzQkFDUkEsUUFBUSxlQUNSQSxRQUFRLFlBQ1JBLFFBQVEscUJBQ1JBLFFBQVEsaUJBSVZ0YixPQUFRLFNBQWtCb2hDLEdBRTVCLE1BQU9BLEtBVVAsU0FBVXBoQyxFQUFRb2xCLEdBS0ksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEsa0NBQ04sa0JBQ0Esb0JBQ0Esd0JBQ0MsU0FBVXFmLEVBQVNnSCxFQUFVL3FCLEdBQzlCLE1BQU8rTyxHQUFTcGxCLEVBQVFvNkIsRUFBU2dILEVBQVUvcUIsS0FFakIsZ0JBQVg2RSxTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2ZwbEIsRUFDQXNiLFFBQVEsb0JBQ1JBLFFBQVEsWUFDUkEsUUFBUSxtQkFJVnRiLEVBQU9vaEMsU0FBV2hjLEVBQ2hCcGxCLEVBQ0FBLEVBQU9vNkIsUUFDUHA2QixFQUFPb2hDLFNBQ1BwaEMsRUFBT3UvQixlQUlWdi9CLE9BQVEsU0FBa0JBLEVBQVFvNkIsRUFBU2dILEVBQVUvcUIsR0FnR3hELE1BeEZBK3FCLEdBQVNzRSxjQUFjcm1DLEtBQUssbUJBRTVCK2hDLEVBQVM3dEMsVUFBVTZrRCxnQkFBa0IsV0FDbkM1NUMsS0FBS3lTLEdBQUksV0FBWXpTLEtBQUs2NUMsa0JBQzFCNzVDLEtBQUt5UyxHQUFJLGFBQWN6UyxLQUFLODVDLG9CQUM1Qjk1QyxLQUFLeVMsR0FBSSxVQUFXelMsS0FBSys1QyxnQkFFekIsSUFBSUMsR0FBaUJoNkMsS0FBS3JMLFFBQVFzbEQsUUFDbEMsSUFBTUQsRUFBTixDQUlBLEdBQUk1WCxHQUFRcGlDLElBQ1p5RCxZQUFZLFdBQ1YyK0IsRUFBTThYLGdCQUFpQkYsT0FJM0JwWCxFQUFTN3RDLFVBQVVtbEQsZ0JBQWtCLFNBQVVoZixHQUM3Q0EsRUFBT3JqQixFQUFNOHBCLGdCQUFpQnpHLEVBQzlCLElBQUlpZixHQUFZdlgsRUFBU3pPLEtBQU0rRyxFQUUvQixJQUFNaWYsR0FBYUEsR0FBYW42QyxLQUFoQyxDQUlBQSxLQUFLbzZDLGFBQWVELENBRXBCLElBQUkvWCxHQUFRcGlDLElBQ1pBLE1BQUtxNkMscUJBQXVCLFdBQzFCalksRUFBTWtZLHNCQUVSSCxFQUFVMW5DLEdBQUksYUFBY3pTLEtBQUtxNkMsc0JBRWpDcjZDLEtBQUt5UyxHQUFJLGNBQWV6UyxLQUFLdTZDLGtCQUU3QnY2QyxLQUFLczZDLHVCQUdQMVgsRUFBUzd0QyxVQUFVdWxELG1CQUFxQixXQUN0QyxHQUFNdDZDLEtBQUtvNkMsYUFBWCxDQUdBLEdBQUlyMUIsR0FBUS9rQixLQUFLbzZDLGFBQWFwVixhQUM5QmhsQyxNQUFLZ29DLE9BQVFqakIsR0FFYi9rQixLQUFLdzZDLDJCQUVBeDZDLEtBQUtnbEMsZUFBaUJqZ0IsSUFHM0Iva0IsS0FBS3k2QyxtQkFBcUJ6NkMsS0FBS3lrQyxNQUFPMWYsR0FBUXJ3QixRQUM5Q2tuQyxFQUFROW1CLElBQUs5VSxLQUFLeTZDLG1CQUFvQixzQkFHeEM3WCxFQUFTN3RDLFVBQVU4a0QsaUJBQW1CLFdBQ3BDNzVDLEtBQUtzNkMsc0JBR1AxWCxFQUFTN3RDLFVBQVV5bEQseUJBQTJCLFdBQ3RDeDZDLEtBQUt5NkMscUJBR1g3ZSxFQUFRL2xCLE9BQVE3VixLQUFLeTZDLG1CQUFvQix5QkFDbEN6NkMsTUFBS3k2QyxxQkFHZDdYLEVBQVM3dEMsVUFBVXdsRCxpQkFBbUIsU0FBVXBrQyxFQUFPbTJCLEVBQVNvTyxFQUFhelIsR0FDbEQsZ0JBQWJBLElBQ1ZqcEMsS0FBS282QyxhQUFhcFMsT0FBUWlCLElBSTlCckcsRUFBUzd0QyxVQUFVK2tELG1CQUFxQixXQUN0Qzk1QyxLQUFLdzZDLDRCQUdQNVgsRUFBUzd0QyxVQUFVZ2xELGdCQUFrQixXQUM3Qi81QyxLQUFLbzZDLGVBR1hwNkMsS0FBS282QyxhQUFhcGtDLElBQUssYUFBY2hXLEtBQUtxNkMsc0JBQzFDcjZDLEtBQUtnVyxJQUFLLGNBQWVoVyxLQUFLdTZDLHdCQUN2QnY2QyxNQUFLbzZDLGVBS1B4WCxJQVVQLFNBQVlwaEMsRUFBUW9sQixHQUtLLGtCQUFYckssU0FBeUJBLE9BQU9DLElBRTFDRCxPQUFRLDZCQUNOLDRCQUNBLG1CQUNDLFNBQVV2QixFQUFjNkIsR0FDekIsTUFBTytKLEdBQVNwbEIsRUFBUXdaLEVBQWM2QixLQUVYLGdCQUFaSCxTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2ZwbEIsRUFDQXNiLFFBQVEsd0JBQ1JBLFFBQVEsWUFJVnRiLEVBQU9uTixhQUFldXlCLEVBQ3BCcGxCLEVBQ0FBLEVBQU93WixhQUNQeFosRUFBT3FiLFVBSVRyYixPQUlKLFNBQWtCQSxFQUFRd1osRUFBYzZCLEdBV3hDLFFBQVMzbkIsR0FBUUMsRUFBR0MsR0FDbEIsSUFBTSxHQUFJK2lCLEtBQVEvaUIsR0FDaEJELEVBQUdnakIsR0FBUy9pQixFQUFHK2lCLEVBRWpCLE9BQU9oakIsR0FJVCxRQUFTUCxHQUFTMmxCLEdBQ2hCLE1BQW1DLG1CQUE1QjBtQixFQUFZaHNDLEtBQU1zbEIsR0FJM0IsUUFBUzJtQixHQUFXM21CLEdBQ2xCLEdBQUk0bUIsS0FDSixJQUFLdnNDLEVBQVMybEIsR0FFWjRtQixFQUFNNW1CLE1BQ0QsSUFBMkIsZ0JBQWZBLEdBQUlqakIsT0FFckIsSUFBTSxHQUFJakMsR0FBRSxFQUFHNGxDLEVBQU0xZ0IsRUFBSWpqQixPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFDeEM4ckMsRUFBSXRnQyxLQUFNMFosRUFBSWxsQixRQUloQjhyQyxHQUFJdGdDLEtBQU0wWixFQUVaLE9BQU80bUIsR0FVUCxRQUFTd1osR0FBY3pmLEVBQU12bUMsRUFBU2ltRCxHQUVwQyxLQUFRNTZDLGVBQWdCMjZDLElBQ3RCLE1BQU8sSUFBSUEsR0FBY3pmLEVBQU12bUMsRUFHWixpQkFBVHVtQyxLQUNWQSxFQUFPeGxDLFNBQVNtTixpQkFBa0JxNEIsSUFHcENsN0IsS0FBSzVJLFNBQVc4cEMsRUFBV2hHLEdBQzNCbDdCLEtBQUtyTCxRQUFVTyxLQUFZOEssS0FBS3JMLFNBRVIsa0JBQVpBLEdBQ1ZpbUQsRUFBV2ptRCxFQUVYTyxFQUFROEssS0FBS3JMLFFBQVNBLEdBR25CaW1ELEdBQ0g1NkMsS0FBS3lTLEdBQUksU0FBVW1vQyxHQUdyQjU2QyxLQUFLK2MsWUFFQS9FLElBRUhoWSxLQUFLZ2QsV0FBYSxHQUFJaEYsR0FBRWlGLFNBSTFCLElBQUltbEIsR0FBUXBpQyxJQUNaeUQsWUFBWSxXQUNWMitCLEVBQU1sbEIsVUErR1YsUUFBUzI5QixHQUFjL25DLEdBQ3JCOVMsS0FBSzhTLElBQU1BLEVBMkNiLFFBQVNnb0MsR0FBVS9uQyxHQUNqQi9TLEtBQUsrUyxJQUFNQSxFQUVYZ29DLEVBQU9ob0MsR0FBUS9TLEtBM09uQixHQUFJZ1ksR0FBSXhXLEVBQU8yYixPQUNYcEUsRUFBVXZYLEVBQU91WCxRQUNqQmlpQyxFQUFnQyxtQkFBWmppQyxHQVlwQmtvQixFQUFjbnNDLE9BQU9DLFVBQVVDLFFBbUVqQzJsRCxHQUFhNWxELFVBQVksR0FBSWltQixHQUU3QjIvQixFQUFhNWxELFVBQVVKLFdBRXZCZ21ELEVBQWE1bEQsVUFBVWdvQixVQUFZO0FBQ2pDL2MsS0FBS29kLFNBR0wsS0FBTSxHQUFJL25CLEdBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUs1SSxTQUFTRSxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUN4RCxHQUFJNmxDLEdBQU9sN0IsS0FBSzVJLFNBQVMvQixFQUVGLFNBQWxCNmxDLEVBQUszaUMsVUFDUnlILEtBQUtxZCxTQUFVNmQsRUFJakIsSUFBSTVyQixHQUFXNHJCLEVBQUs1ckIsUUFDcEIsSUFBTUEsSUFBNEIsSUFBYkEsR0FBK0IsSUFBYkEsR0FBK0IsS0FBYkEsR0FLekQsSUFBTSxHQUZGd3lCLEdBQWE1RyxFQUFLcjRCLGlCQUFpQixPQUU3QjNFLEVBQUUsRUFBRzZqQyxFQUFPRCxFQUFXeHFDLE9BQVl5cUMsRUFBSjdqQyxFQUFVQSxJQUFNLENBQ3ZELEdBQUk0VSxHQUFNZ3ZCLEVBQVc1akMsRUFDckI4QixNQUFLcWQsU0FBVXZLLE1BUXJCNm5DLEVBQWE1bEQsVUFBVXNvQixTQUFXLFNBQVV2SyxHQUMxQyxHQUFJbW9DLEdBQWUsR0FBSUosR0FBYy9uQyxFQUNyQzlTLE1BQUtvZCxPQUFPdmMsS0FBTW82QyxJQUdwQk4sRUFBYTVsRCxVQUFVbW9CLE1BQVEsV0FXN0IsUUFBU2crQixHQUFXdm9DLEVBQU8wb0IsR0FVekIsTUFUSytHLEdBQU16dEMsUUFBUTJvQixPQUFTMDlCLEdBQzFCamlDLEVBQVFDLElBQUssVUFBV3JHLEVBQU8wb0IsR0FHakMrRyxFQUFNbHdCLFNBQVVTLEdBQ2hCd29DLElBQ0tBLElBQWlCN2pELEdBQ3BCOHFDLEVBQU0xdkIsWUFFRCxFQXBCVCxHQUFJMHZCLEdBQVFwaUMsS0FDUm03QyxFQUFlLEVBQ2Y3akQsRUFBUzBJLEtBQUtvZCxPQUFPOWxCLE1BR3pCLElBRkEwSSxLQUFLdWQsY0FBZSxHQUVkam1CLEVBRUosV0FEQTBJLE1BQUswUyxVQWlCUCxLQUFNLEdBQUlyZCxHQUFFLEVBQU9pQyxFQUFKakMsRUFBWUEsSUFBTSxDQUMvQixHQUFJNGxELEdBQWVqN0MsS0FBS29kLE9BQU8vbkIsRUFDL0I0bEQsR0FBYXhvQyxHQUFJLFVBQVd5b0MsR0FDNUJELEVBQWEvOUIsVUFJakJ5OUIsRUFBYTVsRCxVQUFVbWQsU0FBVyxTQUFVUyxHQUMxQzNTLEtBQUt1ZCxhQUFldmQsS0FBS3VkLGVBQWlCNUssRUFBTUMsUUFFaEQsSUFBSXd2QixHQUFRcGlDLElBQ1p5RCxZQUFZLFdBQ1YyK0IsRUFBTWptQixLQUFNLFdBQVlpbUIsRUFBT3p2QixHQUMxQnl2QixFQUFNcGxCLFlBQWNvbEIsRUFBTXBsQixXQUFXUSxRQUN4QzRrQixFQUFNcGxCLFdBQVdRLE9BQVE0a0IsRUFBT3p2QixNQUt0Q2dvQyxFQUFhNWxELFVBQVUyZCxTQUFXLFdBQ2hDLEdBQUk1YyxHQUFZa0ssS0FBS3VkLGFBQWUsT0FBUyxNQUM3Q3ZkLE1BQUt5ZCxZQUFhLENBQ2xCLElBQUkya0IsR0FBUXBpQyxJQUVaeUQsWUFBWSxXQUdWLEdBRkEyK0IsRUFBTWptQixLQUFNcm1CLEVBQVdzc0MsR0FDdkJBLEVBQU1qbUIsS0FBTSxTQUFVaW1CLEdBQ2pCQSxFQUFNcGxCLFdBQWEsQ0FDdEIsR0FBSW8rQixHQUFXaFosRUFBTTdrQixhQUFlLFNBQVcsU0FDL0M2a0IsR0FBTXBsQixXQUFZbytCLEdBQVloWixPQU8vQnBxQixJQUNIQSxFQUFFMEYsR0FBR3JwQixhQUFlLFNBQVVNLEVBQVM0TyxHQUNyQyxHQUFJL08sR0FBVyxHQUFJbW1ELEdBQWMzNkMsS0FBTXJMLEVBQVM0TyxFQUNoRCxPQUFPL08sR0FBU3dvQixXQUFXVyxRQUFTM0YsRUFBRWhZLFNBVzFDNjZDLEVBQWE5bEQsVUFBWSxHQUFJaW1CLEdBRTdCNi9CLEVBQWE5bEQsVUFBVW1vQixNQUFRLFdBRTdCLEdBQUltK0IsR0FBV04sRUFBTy82QyxLQUFLOFMsSUFBSUMsTUFBUyxHQUFJK25DLEdBQVU5NkMsS0FBSzhTLElBQUlDLElBQy9ELElBQUtzb0MsRUFBU3o5QixZQUVaLFdBREE1ZCxNQUFLNmQsUUFBU3c5QixFQUFTem9DLFNBQVUsdUJBTW5DLElBQUs1UyxLQUFLOFMsSUFBSUosVUFBc0MzYixTQUExQmlKLEtBQUs4UyxJQUFJZ0wsYUFHakMsV0FEQTlkLE1BQUs2ZCxRQUFtQyxJQUExQjdkLEtBQUs4UyxJQUFJZ0wsYUFBb0IsZUFLN0MsSUFBSXNrQixHQUFRcGlDLElBQ1pxN0MsR0FBUzVvQyxHQUFJLFVBQVcsU0FBVTZvQyxFQUFPamdCLEdBRXZDLE1BREErRyxHQUFNdmtCLFFBQVN5OUIsRUFBTTFvQyxTQUFVeW9CLElBQ3hCLElBR1RnZ0IsRUFBU24rQixTQUdYMjlCLEVBQWE5bEQsVUFBVThvQixRQUFVLFNBQVVqTCxFQUFVeW9CLEdBQ25EcjdCLEtBQUs0UyxTQUFXQSxFQUNoQjVTLEtBQUttYyxLQUFNLFVBQVduYyxLQUFNcTdCLEdBUTlCLElBQUkwZixLQTJESixPQW5EQUQsR0FBUy9sRCxVQUFZLEdBQUlpbUIsR0FFekI4L0IsRUFBUy9sRCxVQUFVbW9CLE1BQVEsV0FFekIsSUFBS2xkLEtBQUsrZCxVQUFWLENBSUEsR0FBSXc5QixHQUFhLEdBQUl0bkMsTUFDckI0SSxHQUFRcGYsS0FBTTg5QyxFQUFZLE9BQVF2N0MsTUFDbEM2YyxFQUFRcGYsS0FBTTg5QyxFQUFZLFFBQVN2N0MsTUFDbkN1N0MsRUFBV3hvQyxJQUFNL1MsS0FBSytTLElBRXRCL1MsS0FBSytkLFdBQVksSUFNbkIrOEIsRUFBUy9sRCxVQUFVNG5CLFlBQWMsU0FBVXhHLEdBQ3pDLEdBQUkwSixHQUFTLEtBQU8xSixFQUFNMVQsSUFDckJ6QyxNQUFNNmYsSUFDVDdmLEtBQU02ZixHQUFVMUosSUFJcEIya0MsRUFBUy9sRCxVQUFVaXBCLE9BQVMsU0FBVTdILEdBQ3BDblcsS0FBSzZkLFNBQVMsRUFBTSxVQUNwQjdkLEtBQUtpZSxrQkFBbUI5SCxJQUcxQjJrQyxFQUFTL2xELFVBQVVtcEIsUUFBVSxTQUFVL0gsR0FDckNuVyxLQUFLNmQsU0FBUyxFQUFPLFdBQ3JCN2QsS0FBS2llLGtCQUFtQjlILElBSzFCMmtDLEVBQVMvbEQsVUFBVThvQixRQUFVLFNBQVVqTCxFQUFVeW9CLEdBQy9DcjdCLEtBQUs0ZCxhQUFjLEVBQ25CNWQsS0FBSzRTLFNBQVdBLEVBQ2hCNVMsS0FBS21jLEtBQU0sVUFBV25jLEtBQU1xN0IsSUFHOUJ5ZixFQUFTL2xELFVBQVVrcEIsa0JBQW9CLFNBQVU5SCxHQUMvQzBHLEVBQVFELE9BQVF6RyxFQUFNOWQsT0FBUSxPQUFRMkgsTUFDdEM2YyxFQUFRRCxPQUFRekcsRUFBTTlkLE9BQVEsUUFBUzJILE9BS2xDMjZDLElBV1AsU0FBVW41QyxFQUFRb2xCLEdBS0ksa0JBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELFFBQ0Usb0JBQ0EsNkJBQ0MsU0FBVXFtQixFQUFVdnVDLEdBQ3JCLE1BQU91eUIsR0FBU3BsQixFQUFRb2hDLEVBQVV2dUMsS0FFUixnQkFBWHFvQixTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2ZwbEIsRUFDQXNiLFFBQVEsWUFDUkEsUUFBUSxpQkFJVnRiLEVBQU9vaEMsU0FBV2hjLEVBQ2hCcGxCLEVBQ0FBLEVBQU9vaEMsU0FDUHBoQyxFQUFPbk4sZUFJVm1OLE9BQVEsU0FBa0JBLEVBQVFvaEMsRUFBVXZ1QyxHQXdCL0MsTUFyQkF1dUMsR0FBU3NFLGNBQWNybUMsS0FBSyx1QkFFNUIraEMsRUFBUzd0QyxVQUFVeW1ELG9CQUFzQixXQUN2Q3g3QyxLQUFLeVMsR0FBSSxXQUFZelMsS0FBSzNMLGVBRzVCdXVDLEVBQVM3dEMsVUFBVVYsYUFBZSxXQUtoQyxRQUFTb25ELEdBQXdCam5ELEVBQVVtZSxHQUN6QyxHQUFJK3lCLEdBQU90RCxFQUFNa0ksY0FBZTMzQixFQUFNRyxJQUN0Q3N2QixHQUFNNlcsZUFBZ0J2VCxHQUFRQSxFQUFLaHhDLFNBQzdCMHRDLEVBQU16dEMsUUFBUWcrQyxZQUNsQnZRLEVBQU0wQywyQkFSVixHQUFNOWtDLEtBQUtyTCxRQUFRTixhQUFuQixDQUdBLEdBQUkrdEMsR0FBUXBpQyxJQVFaM0wsR0FBYzJMLEtBQUs2a0MsUUFBU3B5QixHQUFJLFdBQVlncEMsS0FHdkM3WSxJQW1CUCxTQUFZcGhDLEdBUVosUUFBU2s1QixNQUlULFFBQVNDLEdBQWUzaUIsR0FheEIsUUFBUzRpQixHQUFpQkMsR0FFbkJBLEVBQVk5bEMsVUFBVTJOLFNBSzNCbTRCLEVBQVk5bEMsVUFBVTJOLE9BQVMsU0FBVW80QixHQUVqQzlpQixFQUFFK2lCLGNBQWVELEtBR3ZCOTZCLEtBQUtyTCxRQUFVcWpCLEVBQUU5aUIsUUFBUSxFQUFNOEssS0FBS3JMLFFBQVNtbUMsTUFrQmpELFFBQVNFLEdBQVF0VixFQUFXbVYsR0FFMUI3aUIsRUFBRTBGLEdBQUlnSSxHQUFjLFNBQVUvd0IsR0FDNUIsR0FBd0IsZ0JBQVpBLEdBQXVCLENBS2pDLElBQU0sR0FGRjRxQixHQUFPMWhCLEVBQU01SSxLQUFNaUwsVUFBVyxHQUV4QjdLLEVBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUsxSSxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUMvQyxHQUFJNmxDLEdBQU9sN0IsS0FBSzNLLEdBQ1piLEVBQVd3akIsRUFBRW1jLEtBQU0rRyxFQUFNeFYsRUFDN0IsSUFBTWx4QixFQUtOLEdBQU13akIsRUFBRXlQLFdBQVlqekIsRUFBU0csS0FBb0MsTUFBdEJBLEVBQVFnSixPQUFPLEdBQTFELENBTUEsR0FBSTBZLEdBQWM3aEIsRUFBVUcsR0FBVXdMLE1BQU8zTCxFQUFVK3FCLEVBR3ZELElBQXFCeG9CLFNBQWhCc2YsRUFDSCxNQUFPQSxPQVRQOGtCLEdBQVUsbUJBQXFCeG1DLEVBQVUsU0FBVyt3QixFQUFZLGlCQUxoRXlWLEdBQVUsMEJBQTRCelYsRUFBWSxnREFDeEIvd0IsRUFBVSxLQWlCeEMsTUFBT3FMLE1BRVAsTUFBT0EsTUFBS3laLEtBQU0sV0FDaEIsR0FBSWpsQixHQUFXd2pCLEVBQUVtYyxLQUFNbjBCLEtBQU0wbEIsRUFDeEJseEIsSUFFSEEsRUFBU2tPLE9BQVEvTixHQUNqQkgsRUFBUzRtQyxVQUdUNW1DLEVBQVcsR0FBSXFtQyxHQUFhNzZCLEtBQU1yTCxHQUNsQ3FqQixFQUFFbWMsS0FBTW4wQixLQUFNMGxCLEVBQVdseEIsT0FqRm5DLEdBQU13akIsRUFBTixDQThCQSxHQUFJbWpCLEdBQThCLG1CQUFacGlCLFNBQTBCMmhCLEVBQzlDLFNBQVVXLEdBQ1J0aUIsUUFBUXVpQixNQUFPRCxHQXNFbkIsT0FMQXJqQixHQUFFdWpCLFFBQVUsU0FBVTdWLEVBQVdtVixHQUMvQkQsRUFBaUJDLEdBQ2pCRyxFQUFRdFYsRUFBV21WLElBR2Q3aUIsRUFBRXVqQixTQS9HVCxHQUFJMTlCLEdBQVE0RCxNQUFNMU0sVUFBVThJLEtBb0hMLG1CQUFYMGUsU0FBeUJBLE9BQU9DLElBRTFDRCxPQUFRLGlDQUFrQyxVQUFZb2UsR0FFdERBLEVBRDZCLGdCQUFaamUsU0FDRkksUUFBUSxVQUdSdGIsRUFBTzJiLFNBR3BCM2IsUUFhSixTQUFZQSxHQVFaLFFBQVNrN0IsR0FBWW5pQixHQUNuQixHQUFJcEUsR0FBUTNVLEVBQU8yVSxLQUduQixPQURBQSxHQUFNOWQsT0FBUzhkLEVBQU05ZCxRQUFVOGQsRUFBTUksWUFBY2dFLEVBQzVDcEUsRUFSVCxHQUFJd21CLEdBQVVqbkMsU0FBUzJJLGdCQUVuQlosRUFBTyxZQVNOay9CLEdBQVEzbUMsaUJBQ1h5SCxFQUFPLFNBQVU4YyxFQUFLOVgsRUFBTWliLEdBQzFCbkQsRUFBSXZrQixpQkFBa0J5TSxFQUFNaWIsR0FBSSxJQUV4QmlmLEVBQVExbUMsY0FDbEJ3SCxFQUFPLFNBQVU4YyxFQUFLOVgsRUFBTWliLEdBQzFCbkQsRUFBSzlYLEVBQU9pYixHQUFPQSxFQUFHZixZQUNwQixXQUNFLEdBQUl4RyxHQUFRdW1CLEVBQVluaUIsRUFDeEJtRCxHQUFHZixZQUFZMW5CLEtBQU15b0IsRUFBSXZILElBRTNCLFdBQ0UsR0FBSUEsR0FBUXVtQixFQUFZbmlCLEVBQ3hCbUQsR0FBR3pvQixLQUFNc2xCLEVBQUtwRSxJQUVsQm9FLEVBQUl0a0IsWUFBYSxLQUFPd00sRUFBTThYLEVBQUs5WCxFQUFPaWIsS0FJOUMsSUFBSWQsR0FBUyxZQUVSK2YsR0FBUXZtQyxvQkFDWHdtQixFQUFTLFNBQVVyQyxFQUFLOVgsRUFBTWliLEdBQzVCbkQsRUFBSW5rQixvQkFBcUJxTSxFQUFNaWIsR0FBSSxJQUUzQmlmLEVBQVF0bUMsY0FDbEJ1bUIsRUFBUyxTQUFVckMsRUFBSzlYLEVBQU1pYixHQUM1Qm5ELEVBQUlsa0IsWUFBYSxLQUFPb00sRUFBTThYLEVBQUs5WCxFQUFPaWIsR0FDMUMsV0FDU25ELEdBQUs5WCxFQUFPaWIsR0FDbkIsTUFBUWtmLEdBRVJyaUIsRUFBSzlYLEVBQU9pYixHQUFPM21CLFNBS3pCLElBQUk4bEIsSUFDRnBmLEtBQU1BLEVBQ05tZixPQUFRQSxFQUthLG1CQUFYTCxTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEsa0JBQWtCTSxHQUNHLGdCQUFaSCxTQUVqQkQsT0FBT0MsUUFBVUcsRUFHakJyYixFQUFPcWIsUUFBVUEsR0FHZnJiLFFBU0YsV0FDRSxZQVFBLFNBQVN3WixNQWVULFFBQVMrZ0IsR0FBZ0J2VyxFQUFXMUssR0FFaEMsSUFEQSxHQUFJemxCLEdBQUltd0IsRUFBVWx1QixPQUNYakMsS0FDSCxHQUFJbXdCLEVBQVVud0IsR0FBR3lsQixXQUFhQSxFQUMxQixNQUFPemxCLEVBSWYsT0FBTyxHQVVYLFFBQVMybUMsR0FBTWxsQyxHQUNYLE1BQU8sWUFDSCxNQUFPa0osTUFBS2xKLEdBQU1xSixNQUFNSCxLQUFNRSxZQWhDdEMsR0FBSSs3QixHQUFRamhCLEVBQWFqbUIsVUFDckIybkIsRUFBVTFjLEtBQ1ZrOEIsRUFBc0J4ZixFQUFRMUIsWUEyQ2xDaWhCLEdBQU1oaEIsYUFBZSxTQUFzQmtoQixHQUN2QyxHQUNJQyxHQUNBL2QsRUFGQThiLEVBQVNuNkIsS0FBS2tiLFlBTWxCLElBQUlpaEIsWUFBZW5sQyxRQUFRLENBQ3ZCb2xDLElBQ0EsS0FBSy9kLElBQU84YixHQUNKQSxFQUFPdDZCLGVBQWV3ZSxJQUFROGQsRUFBSWxsQyxLQUFLb25CLEtBQ3ZDK2QsRUFBUy9kLEdBQU84YixFQUFPOWIsUUFLL0IrZCxHQUFXakMsRUFBT2dDLEtBQVNoQyxFQUFPZ0MsTUFHdEMsT0FBT0MsSUFTWEgsRUFBTTlnQixpQkFBbUIsU0FBMEJxSyxHQUMvQyxHQUNJbndCLEdBREFnbkMsSUFHSixLQUFLaG5DLEVBQUksRUFBR0EsRUFBSW13QixFQUFVbHVCLE9BQVFqQyxHQUFLLEVBQ25DZ25DLEVBQWN4N0IsS0FBSzJrQixFQUFVbndCLEdBQUd5bEIsU0FHcEMsT0FBT3VoQixJQVNYSixFQUFNN2dCLHFCQUF1QixTQUE4QitnQixHQUN2RCxHQUNJQyxHQURBNVcsRUFBWXhsQixLQUFLaWIsYUFBYWtoQixFQVFsQyxPQUxJM1csYUFBcUIvakIsU0FDckIyNkIsS0FDQUEsRUFBU0QsR0FBTzNXLEdBR2I0VyxHQUFZNVcsR0FhdkJ5VyxFQUFNNWdCLFlBQWMsU0FBcUI4Z0IsRUFBS3JoQixHQUMxQyxHQUVJdUQsR0FGQW1ILEVBQVl4bEIsS0FBS29iLHFCQUFxQitnQixHQUN0Q0csRUFBd0MsZ0JBQWJ4aEIsRUFHL0IsS0FBS3VELElBQU9tSCxHQUNKQSxFQUFVM2xCLGVBQWV3ZSxJQUFzRCxLQUE5QzBkLEVBQWdCdlcsRUFBVW5ILEdBQU12RCxJQUNqRTBLLEVBQVVuSCxHQUFLeGQsS0FBS3k3QixFQUFvQnhoQixHQUNwQ0EsU0FBVUEsRUFDVlEsTUFBTSxHQUtsQixPQUFPdGIsT0FNWGk4QixFQUFNeHBCLEdBQUt1cEIsRUFBTSxlQVVqQkMsRUFBTTFnQixnQkFBa0IsU0FBeUI0Z0IsRUFBS3JoQixHQUNsRCxNQUFPOWEsTUFBS3FiLFlBQVk4Z0IsR0FDcEJyaEIsU0FBVUEsRUFDVlEsTUFBTSxLQU9kMmdCLEVBQU0zZ0IsS0FBTzBnQixFQUFNLG1CQVNuQkMsRUFBTXpnQixZQUFjLFNBQXFCMmdCLEdBRXJDLE1BREFuOEIsTUFBS2liLGFBQWFraEIsR0FDWG44QixNQVNYaThCLEVBQU14Z0IsYUFBZSxTQUFzQjhnQixHQUN2QyxJQUFLLEdBQUlsbkMsR0FBSSxFQUFHQSxFQUFJa25DLEVBQUtqbEMsT0FBUWpDLEdBQUssRUFDbEMySyxLQUFLd2IsWUFBWStnQixFQUFLbG5DLEdBRTFCLE9BQU8ySyxPQVdYaThCLEVBQU12Z0IsZUFBaUIsU0FBd0J5Z0IsRUFBS3JoQixHQUNoRCxHQUNJaUssR0FDQTFHLEVBRkFtSCxFQUFZeGxCLEtBQUtvYixxQkFBcUIrZ0IsRUFJMUMsS0FBSzlkLElBQU9tSCxHQUNKQSxFQUFVM2xCLGVBQWV3ZSxLQUN6QjBHLEVBQVFnWCxFQUFnQnZXLEVBQVVuSCxHQUFNdkQsR0FFMUIsS0FBVmlLLEdBQ0FTLEVBQVVuSCxHQUFLaE4sT0FBTzBULEVBQU8sR0FLekMsT0FBTy9rQixPQU1YaThCLEVBQU1qbUIsSUFBTWdtQixFQUFNLGtCQVlsQkMsRUFBTXRnQixhQUFlLFNBQXNCd2dCLEVBQUszVyxHQUU1QyxNQUFPeGxCLE1BQUs0YixxQkFBb0IsRUFBT3VnQixFQUFLM1csSUFhaER5VyxFQUFNcGdCLGdCQUFrQixTQUF5QnNnQixFQUFLM1csR0FFbEQsTUFBT3hsQixNQUFLNGIscUJBQW9CLEVBQU11Z0IsRUFBSzNXLElBZS9DeVcsRUFBTXJnQixvQkFBc0IsU0FBNkIvRixFQUFRc21CLEVBQUszVyxHQUNsRSxHQUFJbndCLEdBQ0FHLEVBQ0FnbkMsRUFBUzNtQixFQUFTN1YsS0FBSzBiLGVBQWlCMWIsS0FBS3FiLFlBQzdDb2hCLEVBQVc1bUIsRUFBUzdWLEtBQUs2YixnQkFBa0I3YixLQUFLMmIsWUFHcEQsSUFBbUIsZ0JBQVJ3Z0IsSUFBc0JBLFlBQWVubEMsUUFtQjVDLElBREEzQixFQUFJbXdCLEVBQVVsdUIsT0FDUGpDLEtBQ0htbkMsRUFBT3ZuQyxLQUFLK0ssS0FBTW04QixFQUFLM1csRUFBVW53QixRQW5CckMsS0FBS0EsSUFBSzhtQyxHQUNGQSxFQUFJdDhCLGVBQWV4SyxLQUFPRyxFQUFRMm1DLEVBQUk5bUMsTUFFakIsa0JBQVZHLEdBQ1BnbkMsRUFBT3ZuQyxLQUFLK0ssS0FBTTNLLEVBQUdHLEdBSXJCaW5DLEVBQVN4bkMsS0FBSytLLEtBQU0zSyxFQUFHRyxHQWV2QyxPQUFPd0ssT0FZWGk4QixFQUFNOWxDLFlBQWMsU0FBcUJnbUMsR0FDckMsR0FFSTlkLEdBRkE1YixRQUFjMDVCLEdBQ2RoQyxFQUFTbjZCLEtBQUtrYixZQUlsQixJQUFhLFdBQVR6WSxRQUVPMDNCLEdBQU9nQyxPQUViLElBQUlBLFlBQWVubEMsUUFFcEIsSUFBS3FuQixJQUFPOGIsR0FDSkEsRUFBT3Q2QixlQUFld2UsSUFBUThkLEVBQUlsbEMsS0FBS29uQixVQUNoQzhiLEdBQU85YixjQU1mcmUsTUFBSytiLE9BR2hCLE9BQU8vYixPQVFYaThCLEVBQU1qZ0IsbUJBQXFCZ2dCLEVBQU0sZUFjakNDLEVBQU1oZ0IsVUFBWSxTQUFtQmtnQixFQUFLNWMsR0FDdEMsR0FDSXpFLEdBQ0F6bEIsRUFDQWdwQixFQUNBK2QsRUFKQTVXLEVBQVl4bEIsS0FBS29iLHFCQUFxQitnQixFQU0xQyxLQUFLOWQsSUFBT21ILEdBQ1IsR0FBSUEsRUFBVTNsQixlQUFld2UsR0FHekIsSUFGQWhwQixFQUFJbXdCLEVBQVVuSCxHQUFLL21CLE9BRVpqQyxLQUdIeWxCLEVBQVcwSyxFQUFVbkgsR0FBS2hwQixHQUV0QnlsQixFQUFTUSxRQUFTLEdBQ2xCdGIsS0FBSzBiLGVBQWV5Z0IsRUFBS3JoQixFQUFTQSxVQUd0Q3NoQixFQUFXdGhCLEVBQVNBLFNBQVMzYSxNQUFNSCxLQUFNdWYsT0FFckM2YyxJQUFhcDhCLEtBQUtrYyx1QkFDbEJsYyxLQUFLMGIsZUFBZXlnQixFQUFLcmhCLEVBQVNBLFNBTWxELE9BQU85YSxPQU1YaThCLEVBQU0zaUIsUUFBVTBpQixFQUFNLGFBVXRCQyxFQUFNOWYsS0FBTyxTQUFjZ2dCLEdBQ3ZCLEdBQUk1YyxHQUFPOWQsTUFBTTFNLFVBQVU4SSxNQUFNNUksS0FBS2lMLFVBQVcsRUFDakQsT0FBT0YsTUFBS2ljLFVBQVVrZ0IsRUFBSzVjLElBVy9CMGMsRUFBTTdmLG1CQUFxQixTQUE0QjVtQixHQUVuRCxNQURBd0ssTUFBS3FjLGlCQUFtQjdtQixFQUNqQndLLE1BV1hpOEIsRUFBTS9mLG9CQUFzQixXQUN4QixNQUFJbGMsTUFBS0gsZUFBZSxvQkFDYkcsS0FBS3FjLGtCQUdMLEdBVWY0ZixFQUFNL2dCLFdBQWEsV0FDZixNQUFPbGIsTUFBSytiLFVBQVkvYixLQUFLK2IsYUFRakNmLEVBQWFzQixXQUFhLFdBRXRCLE1BREFJLEdBQVExQixhQUFla2hCLEVBQ2hCbGhCLEdBSVcsa0JBQVh1QixTQUF5QkEsT0FBT0MsSUFDdkNELE9BQU8sK0JBQStCLFdBQ2xDLE1BQU92QixLQUdZLGdCQUFYeUIsU0FBdUJBLE9BQU9DLFFBQzFDRCxPQUFPQyxRQUFVMUIsRUFHakIwQixFQUFRMUIsYUFBZUEsR0FFN0IvbEIsS0FBSytLLE1BWVAsU0FBWXdCLEdBT1osUUFBU3E3QixHQUFrQkMsR0FDekIsR0FBTUEsRUFBTixDQUtBLEdBQXlDLGdCQUE3QkMsR0FBY0QsR0FDeEIsTUFBT0EsRUFJVEEsR0FBV0EsRUFBU24vQixPQUFPLEdBQUdDLGNBQWdCay9CLEVBQVNqL0IsTUFBTSxFQUk3RCxLQUFNLEdBREYwRCxHQUNNbE0sRUFBRSxFQUFHNGxDLEVBQU0rQixFQUFTMWxDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUU3QyxHQURBa00sRUFBV3k3QixFQUFTM25DLEdBQUt5bkMsRUFDZ0IsZ0JBQTdCQyxHQUFjeDdCLEdBQ3hCLE1BQU9BLElBckJiLEdBQUl5N0IsR0FBVyxxQkFBcUJoL0IsTUFBTSxLQUN0QysrQixFQUFlcm5DLFNBQVMySSxnQkFBZ0JJLEtBMEJyQixtQkFBWDhkLFNBQXlCQSxPQUFPQyxJQUUxQ0QsT0FBUSwyQ0FBMkMsV0FDakQsTUFBT3NnQixLQUVvQixnQkFBWm5nQixTQUVqQkQsT0FBT0MsUUFBVW1nQixFQUdqQnI3QixFQUFPcTdCLGlCQUFtQkEsR0FHeEJyN0IsUUFXSixTQUFZQSxFQUFRekssR0FPcEIsUUFBU2ttQyxHQUFjem5DLEdBQ3JCLEdBQUkwbkMsR0FBTXZtQyxXQUFZbkIsR0FFbEI4aUMsRUFBaUMsS0FBdkI5aUMsRUFBTWtCLFFBQVEsT0FBZ0J5bUMsTUFBT0QsRUFDbkQsT0FBTzVFLElBQVc0RSxFQUdwQixRQUFTeEMsTUF3QlQsUUFBUzBDLEtBU1AsSUFBTSxHQVJGQyxJQUNGdDRCLE1BQU8sRUFDUEQsT0FBUSxFQUNSaWMsV0FBWSxFQUNaVCxZQUFhLEVBQ2JVLFdBQVksRUFDWkgsWUFBYSxHQUVMeHJCLEVBQUUsRUFBRzRsQyxFQUFNcUMsRUFBYWhtQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUN2RCxHQUFJa29DLEdBQWNELEVBQWFqb0MsRUFDL0Jnb0MsR0FBTUUsR0FBZ0IsRUFFeEIsTUFBT0YsR0FLVCxRQUFTRyxHQUFlWCxHQWF4QixRQUFTWSxLQUVQLElBQUtDLEVBQUwsQ0FHQUEsR0FBVSxDQUVWLElBQUk5bkMsR0FBbUI0TCxFQUFPNUwsZ0JBNkI5QixJQTVCQU4sRUFBVyxXQUNULEdBQUlxb0MsR0FBYS9uQyxFQUNmLFNBQVVzbEMsR0FDUixNQUFPdGxDLEdBQWtCc2xDLEVBQU0sT0FFakMsU0FBVUEsR0FDUixNQUFPQSxHQUFLemxDLGFBR2QsT0FBTyxVQUFtQnlsQyxHQUN4QixHQUFJejhCLEdBQVFrL0IsRUFBWXpDLEVBTXhCLE9BTE16OEIsSUFDSjA4QixFQUFVLGtCQUFvQjE4QixFQUM1Qiw0RkFHR0EsTUFNYm0vQixFQUFnQmYsRUFBaUIsYUFNWixDQUNuQixHQUFJZ0IsR0FBTW5vQyxTQUFTOEksY0FBYyxNQUNqQ3EvQixHQUFJcC9CLE1BQU1zRyxNQUFRLFFBQ2xCODRCLEVBQUlwL0IsTUFBTXEvQixRQUFVLGtCQUNwQkQsRUFBSXAvQixNQUFNcy9CLFlBQWMsUUFDeEJGLEVBQUlwL0IsTUFBTXUvQixZQUFjLGtCQUN4QkgsRUFBSXAvQixNQUFPbS9CLEdBQWtCLFlBRTdCLElBQUl4K0IsR0FBTzFKLFNBQVMwSixNQUFRMUosU0FBUzJJLGVBQ3JDZSxHQUFLRyxZQUFhcytCLEVBQ2xCLElBQUlwL0IsR0FBUW5KLEVBQVV1b0MsRUFFdEJJLEdBQWlELE1BQWhDaEIsRUFBY3grQixFQUFNc0csT0FDckMzRixFQUFLTyxZQUFhaytCLEtBT3RCLFFBQVNLLEdBQVNoRCxHQVNoQixHQVJBdUMsSUFHcUIsZ0JBQVR2QyxLQUNWQSxFQUFPeGxDLFNBQVN5b0MsY0FBZWpELElBSTNCQSxHQUF3QixnQkFBVEEsSUFBc0JBLEVBQUs1ckIsU0FBaEQsQ0FJQSxHQUFJN1EsR0FBUW5KLEVBQVU0bEMsRUFHdEIsSUFBdUIsU0FBbEJ6OEIsRUFBTXlVLFFBQ1QsTUFBT2txQixJQUdULElBQUlDLEtBQ0pBLEdBQUt0NEIsTUFBUW0yQixFQUFLOXNCLFlBQ2xCaXZCLEVBQUt2NEIsT0FBU28yQixFQUFLa0QsWUFNbkIsS0FBTSxHQUpGQyxHQUFjaEIsRUFBS2dCLGVBQWtCVCxJQUN2Q24vQixFQUFPbS9CLElBQThDLGVBQTNCbi9CLEVBQU9tL0IsSUFHekJ2b0MsRUFBRSxFQUFHNGxDLEVBQU1xQyxFQUFhaG1DLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ3ZELEdBQUlrb0MsR0FBY0QsRUFBYWpvQyxHQUMzQkcsRUFBUWlKLEVBQU84K0IsRUFDbkIvbkMsR0FBUThvQyxFQUFlcEQsRUFBTTFsQyxFQUM3QixJQUFJMG5DLEdBQU12bUMsV0FBWW5CLEVBRXRCNm5DLEdBQU1FLEdBQWlCSixNQUFPRCxHQUFjLEVBQU5BLEVBR3hDLEdBQUlxQixHQUFlbEIsRUFBS21CLFlBQWNuQixFQUFLb0IsYUFDdkNDLEVBQWdCckIsRUFBS3NCLFdBQWF0QixFQUFLdUIsY0FDdkNDLEVBQWN4QixFQUFLN1csV0FBYTZXLEVBQUs1VyxZQUNyQ3FZLEVBQWV6QixFQUFLL1csVUFBWStXLEVBQUs5VyxhQUNyQ3lYLEVBQWNYLEVBQUswQixnQkFBa0IxQixFQUFLMkIsaUJBQzFDQyxFQUFlNUIsRUFBSzZCLGVBQWlCN0IsRUFBSzhCLGtCQUUxQ0MsRUFBdUJmLEdBQWVKLEVBR3RDb0IsRUFBYXBDLEVBQWN4K0IsRUFBTXNHLE1BQ2hDczZCLE1BQWUsSUFDbEJoQyxFQUFLdDRCLE1BQVFzNkIsR0FFVEQsRUFBdUIsRUFBSWIsRUFBZVAsR0FHaEQsSUFBSXNCLEdBQWNyQyxFQUFjeCtCLEVBQU1xRyxPQWF0QyxPQVpLdzZCLE1BQWdCLElBQ25CakMsRUFBS3Y0QixPQUFTdzZCLEdBRVZGLEVBQXVCLEVBQUlWLEVBQWdCTyxJQUdqRDVCLEVBQUt0YyxXQUFhc2MsRUFBS3Q0QixPQUFVdzVCLEVBQWVQLEdBQ2hEWCxFQUFLL2MsWUFBYytjLEVBQUt2NEIsUUFBVzQ1QixFQUFnQk8sR0FFbkQ1QixFQUFLcmMsV0FBYXFjLEVBQUt0NEIsTUFBUTg1QixFQUMvQnhCLEVBQUt4YyxZQUFjd2MsRUFBS3Y0QixPQUFTZzZCLEVBRTFCekIsR0FLVCxRQUFTaUIsR0FBZXBELEVBQU0xbEMsR0FFNUIsR0FBS2dNLEVBQU81TCxrQkFBMkMsS0FBdkJKLEVBQU1rQixRQUFRLEtBQzVDLE1BQU9sQixFQUVULElBQUlpSixHQUFReThCLEVBQUt6OEIsTUFFYjNHLEVBQU8yRyxFQUFNM0csS0FDYnluQyxFQUFLckUsRUFBS3NFLGFBQ1ZDLEVBQVNGLEdBQU1BLEVBQUd6bkMsSUFldEIsT0FaSzJuQyxLQUNIRixFQUFHem5DLEtBQU9vakMsRUFBS3psQyxhQUFhcUMsTUFFOUIyRyxFQUFNM0csS0FBT3RDLEVBQ2JBLEVBQVFpSixFQUFNaWhDLFVBR2RqaEMsRUFBTTNHLEtBQU9BLEVBQ1IybkMsSUFDSEYsRUFBR3puQyxLQUFPMm5DLEdBR0xqcUMsRUFqS1QsR0FFSUYsR0FBVXNvQyxFQUFlSyxFQUZ6QlAsR0FBVSxDQW9LZCxPQUFPUSxHQWhOUCxHQUFJL0MsR0FBOEIsbUJBQVpwaUIsU0FBMEIyaEIsRUFDOUMsU0FBVVcsR0FDUnRpQixRQUFRdWlCLE1BQU9ELElBS2ZpQyxHQUNGLGNBQ0EsZUFDQSxhQUNBLGdCQUNBLGFBQ0EsY0FDQSxZQUNBLGVBQ0Esa0JBQ0EsbUJBQ0EsaUJBQ0Esb0JBa01xQixtQkFBWC9nQixTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEscUJBQXNCLHlDQUEyQ2loQixHQUM1QyxnQkFBWjlnQixTQUVqQkQsT0FBT0MsUUFBVThnQixFQUFlMWdCLFFBQVEsZ0NBR3hDdGIsRUFBTzA4QixRQUFVVixFQUFlaDhCLEVBQU9xN0IsbUJBR3JDcjdCLFFBV0osU0FBWUEsR0FRWixRQUFTbStCLEdBQVVqaUIsR0FFRSxrQkFBUEEsS0FJUGlpQixFQUFTejdCLFFBRVp3WixJQUdBa2lCLEVBQU0vK0IsS0FBTTZjLElBT2hCLFFBQVNtaUIsR0FBUzFwQixHQUVoQixHQUFJMnBCLEdBQStCLHFCQUFmM3BCLEVBQU0xVCxNQUF1RCxhQUF4Qi9NLEVBQVNxcUMsVUFDN0RKLEdBQVN6N0IsU0FBVzQ3QixHQUl6QnhtQixJQUdGLFFBQVNBLEtBQ1BxbUIsRUFBU3o3QixTQUFVLENBRW5CLEtBQU0sR0FBSTdPLEdBQUUsRUFBRzRsQyxFQUFNMkUsRUFBTXRvQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJcW9CLEdBQUtraUIsRUFBTXZxQyxFQUNmcW9CLE1BSUosUUFBU3NpQixHQUFnQm5qQixHQVd2QixNQVQ2QixhQUF4Qm5uQixFQUFTcXFDLFdBQ1p6bUIsS0FHQXVELEVBQVFwZixLQUFNL0gsRUFBVSxtQkFBb0JtcUMsR0FDNUNoakIsRUFBUXBmLEtBQU0vSCxFQUFVLG1CQUFvQm1xQyxHQUM1Q2hqQixFQUFRcGYsS0FBTStELEVBQVEsT0FBUXErQixJQUd6QkYsRUFwRFQsR0FBSWpxQyxHQUFXOEwsRUFBTzlMLFNBRWxCa3FDLElBaUJKRCxHQUFTejdCLFNBQVUsRUFxQ0ksa0JBQVhxWSxTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEsdUJBQXdCLG1CQUFxQnlqQixHQUN4QixnQkFBWnRqQixTQUNqQkQsT0FBT0MsUUFBVXNqQixFQUFnQmxqQixRQUFRLFlBR3pDdGIsRUFBT20rQixTQUFXSyxFQUFnQngrQixFQUFPcWIsVUFHdkNyYixRQVdKLFNBQVl5K0IsR0FFVixZQXlCQSxTQUFTQyxHQUFPaEYsRUFBTWlGLEdBQ3BCLE1BQU9qRixHQUFNa0YsR0FBaUJELEdBS2hDLFFBQVNFLEdBQWFuRixHQUVwQixJQUFLQSxFQUFLMWlDLFdBQVYsQ0FHQSxHQUFJOG5DLEdBQVc1cUMsU0FBUzZxQyx3QkFDeEJELEdBQVMvZ0MsWUFBYTI3QixJQU94QixRQUFTc0YsR0FBT3RGLEVBQU1pRixHQUVwQkUsRUFBYW5GLEVBSWIsS0FBTSxHQURGdUYsR0FBUXZGLEVBQUsxaUMsV0FBV3FLLGlCQUFrQnM5QixHQUNwQzlxQyxFQUFFLEVBQUc0bEMsRUFBTXdGLEVBQU1ucEMsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBRTFDLEdBQUtvckMsRUFBTXByQyxLQUFPNmxDLEVBQ2hCLE9BQU8sQ0FJWCxRQUFPLEVBS1QsUUFBU3dGLEdBQVl4RixFQUFNaUYsR0FFekIsTUFEQUUsR0FBYW5GLEdBQ05nRixFQUFPaEYsRUFBTWlGLEdBOUR0QixHQW1FSVEsR0FuRUFQLEVBQWdCLFdBRWxCLEdBQUtILEVBQVVXLFFBQ2IsTUFBTyxTQUdULElBQUtYLEVBQVVVLGdCQUNiLE1BQU8saUJBS1QsS0FBTSxHQUZGM0QsSUFBYSxTQUFVLE1BQU8sS0FBTSxLQUU5QjNuQyxFQUFFLEVBQUc0bEMsRUFBTStCLEVBQVMxbEMsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDbkQsR0FBSW9FLEdBQVN1akMsRUFBUzNuQyxHQUNsQndxQixFQUFTcG1CLEVBQVMsaUJBQ3RCLElBQUt3bUMsRUFBV3BnQixHQUNkLE1BQU9BLE1BcURiLElBQUt1Z0IsRUFBZ0IsQ0FHbkIsR0FBSXZDLEdBQU1ub0MsU0FBUzhJLGNBQWMsT0FDN0JxaUMsRUFBa0JYLEVBQU9yQyxFQUFLLE1BQ2xDOEMsR0FBa0JFLEVBQWtCWCxFQUFRUSxNQUU1Q0MsR0FBa0JILENBSUcsbUJBQVhqa0IsU0FBeUJBLE9BQU9DLElBRTFDRCxPQUFRLHVDQUF1QyxXQUM3QyxNQUFPb2tCLEtBRW9CLGdCQUFaamtCLFNBQ2pCRCxPQUFPQyxRQUFVaWtCLEVBSWpCbi9CLE9BQU9tL0IsZ0JBQWtCQSxHQUd6QkcsUUFBUS9yQyxXQVNWLFNBQVV5TSxFQUFRb2xCLEdBRWxCLFlBR3NCLG1CQUFWckssU0FBd0JBLE9BQU9DLElBRXpDRCxPQUFRLHdCQUNOLHNCQUNBLHFDQUNDLFNBQVVvakIsRUFBVWdCLEdBQ3JCLE1BQU8vWixHQUFTcGxCLEVBQVFtK0IsRUFBVWdCLEtBRVIsZ0JBQVhqa0IsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLGFBQ1JBLFFBQVEsOEJBSVZ0YixFQUFPdS9CLGFBQWVuYSxFQUNwQnBsQixFQUNBQSxFQUFPbStCLFNBQ1BuK0IsRUFBT20vQixrQkFJVm4vQixPQUFRLFNBQWtCQSxFQUFRbStCLEVBQVVnQixHQUkvQyxHQUFJOW9CLEtBS0pBLEdBQU0zaUIsT0FBUyxTQUFVQyxFQUFHQyxHQUMxQixJQUFNLEdBQUkraUIsS0FBUS9pQixHQUNoQkQsRUFBR2dqQixHQUFTL2lCLEVBQUcraUIsRUFFakIsT0FBT2hqQixJQUtUMGlCLEVBQU1tcEIsT0FBUyxTQUFVOUQsRUFBS1csR0FDNUIsT0FBV1gsRUFBTVcsRUFBUUEsR0FBUUEsRUFLbkMsSUFBSW9ELEdBQWNuc0MsT0FBT0MsVUFBVUMsUUFDbkM2aUIsR0FBTWpqQixRQUFVLFNBQVUybEIsR0FDeEIsTUFBa0Msa0JBQTNCMG1CLEVBQVloc0MsS0FBTXNsQixJQU0zQjFDLEVBQU1xcEIsVUFBWSxTQUFVM21CLEdBQzFCLEdBQUk0bUIsS0FDSixJQUFLdHBCLEVBQU1qakIsUUFBUzJsQixHQUVsQjRtQixFQUFNNW1CLE1BQ0QsSUFBS0EsR0FBNEIsZ0JBQWRBLEdBQUlqakIsT0FFNUIsSUFBTSxHQUFJakMsR0FBRSxFQUFHNGxDLEVBQU0xZ0IsRUFBSWpqQixPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFDeEM4ckMsRUFBSXRnQyxLQUFNMFosRUFBSWxsQixRQUloQjhyQyxHQUFJdGdDLEtBQU0wWixFQUVaLE9BQU80bUIsSUFNVHRwQixFQUFNbmhCLFFBQVUrSyxNQUFNMU0sVUFBVTJCLFFBQVUsU0FBVXlxQyxFQUFLNW1CLEdBQ3JELE1BQU80bUIsR0FBSXpxQyxRQUFTNmpCLElBQ2xCLFNBQVU0bUIsRUFBSzVtQixHQUNqQixJQUFNLEdBQUlsbEIsR0FBRSxFQUFHNGxDLEVBQU1rRyxFQUFJN3BDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUN4QyxHQUFLOHJDLEVBQUk5ckMsS0FBT2tsQixFQUNkLE1BQU9sbEIsRUFHWCxPQUFPLElBS1h3aUIsRUFBTXVwQixXQUFhLFNBQVVELEVBQUs1bUIsR0FDaEMsR0FBSXdLLEdBQVFsTixFQUFNbmhCLFFBQVN5cUMsRUFBSzVtQixFQUNsQixLQUFUd0ssR0FDSG9jLEVBQUk5dkIsT0FBUTBULEVBQU8sSUFPdkJsTixFQUFNd3BCLFVBQW9DLGtCQUFmQyxjQUFtRCxnQkFBZkEsYUFDN0QsU0FBd0IvbUIsR0FDdEIsTUFBT0EsYUFBZSttQixjQUV4QixTQUEwQi9tQixHQUN4QixNQUFPQSxJQUFxQixnQkFBUEEsSUFDSCxHQUFoQkEsRUFBSWpMLFVBQXdDLGdCQUFoQmlMLEdBQUloaUIsVUFLdENzZixFQUFNMHBCLFFBQVUsV0FFZCxRQUFTQSxHQUFTckcsRUFBTS9oQixHQUV0QnFvQixFQUFrQkEsSUFBOER6cUMsU0FBekNyQixTQUFTMkksZ0JBQWdCb2pDLFlBQTRCLGNBQWdCLGFBQzVHdkcsRUFBTXNHLEdBQW9Ccm9CLEVBSjVCLEdBQUlxb0IsRUFNSixPQUFPRCxNQUtUMXBCLEVBQU02cEIsVUFBWSxTQUFVeEcsRUFBTWlGLEdBQ2hDLEtBQVFqRixHQUFReGxDLFNBQVMwSixNQUV2QixHQURBODdCLEVBQU9BLEVBQUsxaUMsV0FDUG1vQyxFQUFpQnpGLEVBQU1pRixHQUMxQixNQUFPakYsSUFRYnJqQixFQUFNOHBCLGdCQUFrQixTQUFVekcsR0FDaEMsTUFBb0IsZ0JBQVJBLEdBQ0h4bEMsU0FBU3lvQyxjQUFlakQsR0FFMUJBLEdBTVRyakIsRUFBTThFLFlBQWMsU0FBVXhHLEdBQzVCLEdBQUkwSixHQUFTLEtBQU8xSixFQUFNMVQsSUFDckJ6QyxNQUFNNmYsSUFDVDdmLEtBQU02ZixHQUFVMUosSUFNcEIwQixFQUFNK3BCLG1CQUFxQixTQUFVbkIsRUFBT04sR0FFMUNNLEVBQVE1b0IsRUFBTXFwQixVQUFXVCxFQUd6QixLQUFNLEdBRkZvQixNQUVNeHNDLEVBQUUsRUFBRzRsQyxFQUFNd0YsRUFBTW5wQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJNmxDLEdBQU91RixFQUFNcHJDLEVBRWpCLElBQU13aUIsRUFBTXdwQixVQUFXbkcsR0FJdkIsR0FBS2lGLEVBQVcsQ0FFVFEsRUFBaUJ6RixFQUFNaUYsSUFDMUIwQixFQUFRaGhDLEtBQU1xNkIsRUFLaEIsS0FBTSxHQUZGNEcsR0FBYTVHLEVBQUtyNEIsaUJBQWtCczlCLEdBRTlCamlDLEVBQUUsRUFBRzZqQyxFQUFPRCxFQUFXeHFDLE9BQVl5cUMsRUFBSjdqQyxFQUFVQSxJQUNqRDJqQyxFQUFRaGhDLEtBQU1paEMsRUFBVzVqQyxRQUczQjJqQyxHQUFRaGhDLEtBQU1xNkIsR0FJbEIsTUFBTzJHLElBS1RocUIsRUFBTW1xQixlQUFpQixTQUFVQyxFQUFRQyxFQUFZM0osR0FFbkQsR0FBSTFZLEdBQVNvaUIsRUFBT2x0QyxVQUFXbXRDLEdBQzNCQyxFQUFjRCxFQUFhLFNBRS9CRCxHQUFPbHRDLFVBQVdtdEMsR0FBZSxXQUMvQixHQUFJNVosR0FBVXRvQixLQUFNbWlDLEVBQ2Y3WixJQUNIOWpCLGFBQWM4akIsRUFFaEIsSUFBSS9JLEdBQU9yZixVQUVQa2lDLEVBQVFwaUMsSUFDWkEsTUFBTW1pQyxHQUFnQjErQixXQUFZLFdBQ2hDb2MsRUFBTzFmLE1BQU9paUMsRUFBTzdpQixTQUNkNmlCLEdBQU9ELElBQ2I1SixHQUFhLE9BT3BCMWdCLEVBQU13cUIsU0FBVyxTQUFVN25CLEdBQ3pCLE1BQU9BLEdBQUk1akIsUUFBUyxjQUFlLFNBQVVzcEMsRUFBT29DLEVBQUlDLEdBQ3RELE1BQU9ELEdBQUssSUFBTUMsSUFDakIzakMsY0FHTCxJQUFJbWEsR0FBVXZYLEVBQU91WCxPQXdDckIsT0FsQ0FsQixHQUFNMnFCLFNBQVcsU0FBVUMsRUFBYS9jLEdBQ3RDaWEsRUFBVSxXQUtSLElBQU0sR0FKRitDLEdBQWtCN3FCLEVBQU13cUIsU0FBVTNjLEdBQ2xDK2EsRUFBUS9xQyxTQUFTbU4saUJBQWtCLE9BQVM2L0IsR0FDNUNDLEVBQVcsUUFBVUQsRUFBa0IsV0FFakNydEMsRUFBRSxFQUFHNGxDLEVBQU13RixFQUFNbnBDLE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBRUlWLEdBRkF1bUMsRUFBT3VGLEVBQU1wckMsR0FDYnlrQixFQUFPb2hCLEVBQUtyaEMsYUFBYzhvQyxFQUU5QixLQUNFaHVDLEVBQVVtbEIsR0FBUXBCLEtBQUtDLE1BQU9tQixHQUM5QixNQUFRd2hCLEdBRUh2aUIsR0FDSEEsRUFBUXVpQixNQUFPLGlCQUFtQnFILEVBQVcsT0FDM0N6SCxFQUFLM2lDLFNBQVNxRyxlQUFrQnM4QixFQUFLNTdCLEdBQUssSUFBTTQ3QixFQUFLNTdCLEdBQUssSUFBTyxLQUNqRWc4QixFQUVKLFVBR0YsR0FBSTltQyxHQUFXLEdBQUlpdUMsR0FBYXZILEVBQU12bUMsR0FFbEN3b0IsRUFBUzNiLEVBQU8yYixNQUNmQSxJQUNIQSxFQUFPZ1gsS0FBTStHLEVBQU14VixFQUFXbHhCLE9BUS9CcWpCLElBUUwsU0FBVXJXLEVBQVFvbEIsR0FDbEIsWUFFdUIsbUJBQVhySyxTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEsaUJBQ0osNEJBQ0Esb0JBQ0Esd0NBQ0Esd0JBRUYsU0FBVXZCLEVBQWNrakIsRUFBU3JCLEVBQWtCaGxCLEdBQ2pELE1BQU8rTyxHQUFTcGxCLEVBQVF3WixFQUFja2pCLEVBQVNyQixFQUFrQmhsQixLQUd6QyxnQkFBWjZFLFNBRWhCRCxPQUFPQyxRQUFVa0ssRUFDZnBsQixFQUNBc2IsUUFBUSx3QkFDUkEsUUFBUSxZQUNSQSxRQUFRLCtCQUNSQSxRQUFRLG9CQUlWdGIsRUFBT2s2QyxZQUNQbDZDLEVBQU9rNkMsU0FBU0MsS0FBTy8wQixFQUNyQnBsQixFQUNBQSxFQUFPd1osYUFDUHhaLEVBQU8wOEIsUUFDUDE4QixFQUFPcTdCLGlCQUNQcjdCLEVBQU91L0IsZ0JBSVZ2L0IsT0FBUSxTQUFrQkEsRUFBUXdaLEVBQWNrakIsRUFBU3JCLEVBQWtCaGxCLEdBQzlFLFlBY0EsU0FBUytqQyxHQUFZcmhDLEdBQ25CLElBQU0sR0FBSXBDLEtBQVFvQyxHQUNoQixPQUFPLENBR1QsT0FEQXBDLEdBQU8sTUFDQSxFQXdDVCxRQUFTd2pDLEdBQU1qbkQsRUFBU21uRCxHQUNoQm5uRCxJQUlOc0wsS0FBS3RMLFFBQVVBLEVBRWZzTCxLQUFLNjdDLE9BQVNBLEVBQ2Q3N0MsS0FBS3FPLFVBQ0h6TyxFQUFHLEVBQ0h4QixFQUFHLEdBR0w0QixLQUFLNG1DLFdBbVBQLFFBQVNrVixHQUFhdGhDLEdBQ3BCLE1BQU9BLEdBQUk1akIsUUFBUyxXQUFZLFNBQVUwckMsR0FDeEMsTUFBTyxJQUFNQSxFQUFHMWpDLGdCQXpUcEIsR0FBSWhKLEdBQW1CNEwsRUFBTzVMLGlCQUMxQk4sRUFBV00sRUFDYixTQUFVc2xDLEdBQ1IsTUFBT3RsQyxHQUFrQnNsQyxFQUFNLE9BRWpDLFNBQVVBLEdBQ1IsTUFBT0EsR0FBS3psQyxjQWNac21ELEVBQXFCbGYsRUFBaUIsY0FDdEN5SCxFQUFvQnpILEVBQWlCLGFBQ3JDbWYsRUFBZUQsR0FBc0J6WCxFQUNyQ0MsSUFBUzFILEVBQWlCLGVBRTFCb2YsR0FDRkMsaUJBQWtCLHNCQUNsQkMsY0FBZSxnQkFDZkMsWUFBYSxpQkFDYkMsV0FBWSxpQkFDWE4sR0FHQ08sR0FDRixZQUNBLGFBQ0EscUJBQ0Esc0JBSUVDLEVBQW1CLFdBRXJCLElBQU0sR0FERnhCLE1BQ00xbEQsRUFBRSxFQUFHNGxDLEVBQU1xaEIsRUFBcUJobEQsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDL0QsR0FBSThpQixHQUFPbWtDLEVBQXFCam5ELEdBQzVCbW5ELEVBQWdCM2YsRUFBa0Ixa0IsRUFDakNxa0MsSUFBaUJBLElBQWtCcmtDLElBQ3RDNGlDLEVBQU81aUMsR0FBU3FrQyxHQUdwQixNQUFPekIsS0FzQlRsakMsR0FBTTNpQixPQUFReW1ELEVBQUs1bUQsVUFBV2ltQixFQUFham1CLFdBRTNDNG1ELEVBQUs1bUQsVUFBVTZ4QyxRQUFVLFdBRXZCNW1DLEtBQUt5OEMsU0FDSEMsaUJBQ0FDLFNBQ0FDLFVBR0Y1OEMsS0FBSzY4QyxLQUNIeHVDLFNBQVUsY0FLZHN0QyxFQUFLNW1ELFVBQVU0bkIsWUFBYyxTQUFVeEcsR0FDckMsR0FBSTBKLEdBQVMsS0FBTzFKLEVBQU0xVCxJQUNyQnpDLE1BQU02ZixJQUNUN2YsS0FBTTZmLEdBQVUxSixJQUlwQndsQyxFQUFLNW1ELFVBQVVtcEMsUUFBVSxXQUN2QmwrQixLQUFLcTlCLEtBQU9hLEVBQVNsK0IsS0FBS3RMLFVBTzVCaW5ELEVBQUs1bUQsVUFBVThuRCxJQUFNLFNBQVVwK0MsR0FDN0IsR0FBSXErQyxHQUFZOThDLEtBQUt0TCxRQUFRK0osS0FFN0IsS0FBTSxHQUFJMFosS0FBUTFaLEdBQVEsQ0FFeEIsR0FBSSs5QyxHQUFnQkQsRUFBa0Jwa0MsSUFBVUEsQ0FDaEQya0MsR0FBV04sR0FBa0IvOUMsRUFBTzBaLEtBS3hDd2pDLEVBQUs1bUQsVUFBVWdvRCxZQUFjLFdBQzNCLEdBQUl0K0MsR0FBUW5KLEVBQVUwSyxLQUFLdEwsU0FDdkJzb0QsRUFBZ0JoOUMsS0FBSzY3QyxPQUFPbG5ELFFBQzVCc29ELEVBQWVELEVBQWNDLGFBQzdCQyxFQUFjRixFQUFjRSxZQUM1QkMsRUFBUzErQyxFQUFPdytDLEVBQWUsT0FBUyxTQUN4Q0csRUFBUzMrQyxFQUFPeStDLEVBQWMsTUFBUSxVQUV0Q0csRUFBYXI5QyxLQUFLNjdDLE9BQU94ZSxLQUN6Qno5QixFQUEyQixJQUF2QnU5QyxFQUFPem1ELFFBQVEsS0FDbkJDLFdBQVl3bUQsR0FBVyxJQUFRRSxFQUFXdDRDLE1BQVExRixTQUFVODlDLEVBQVEsSUFDcEUvK0MsRUFBMkIsSUFBdkJnL0MsRUFBTzFtRCxRQUFRLEtBQ25CQyxXQUFZeW1ELEdBQVcsSUFBUUMsRUFBV3Y0QyxPQUFTekYsU0FBVSs5QyxFQUFRLEdBR3pFeDlDLEdBQUl1OUIsTUFBT3Y5QixHQUFNLEVBQUlBLEVBQ3JCeEIsRUFBSSsrQixNQUFPLytCLEdBQU0sRUFBSUEsRUFFckJ3QixHQUFLcTlDLEVBQWVJLEVBQVc3ZSxZQUFjNmUsRUFBVzVlLGFBQ3hEcmdDLEdBQUs4K0MsRUFBY0csRUFBVzFlLFdBQWEwZSxFQUFXemUsY0FFdEQ1K0IsS0FBS3FPLFNBQVN6TyxFQUFJQSxFQUNsQkksS0FBS3FPLFNBQVNqUSxFQUFJQSxHQUlwQnU5QyxFQUFLNW1ELFVBQVV1b0QsZUFBaUIsV0FDOUIsR0FBSUQsR0FBYXI5QyxLQUFLNjdDLE9BQU94ZSxLQUN6QjJmLEVBQWdCaDlDLEtBQUs2N0MsT0FBT2xuRCxRQUM1QjhKLEtBR0E4K0MsRUFBV1AsRUFBY0MsYUFBZSxjQUFnQixlQUN4RE8sRUFBWVIsRUFBY0MsYUFBZSxPQUFTLFFBQ2xEUSxFQUFpQlQsRUFBY0MsYUFBZSxRQUFVLE9BRXhEcjlDLEVBQUlJLEtBQUtxTyxTQUFTek8sRUFBSXk5QyxFQUFZRSxFQUV0QzkrQyxHQUFPKytDLEdBQWN4OUMsS0FBSzA5QyxVQUFXOTlDLEdBRXJDbkIsRUFBT2cvQyxHQUFtQixFQUcxQixJQUFJRSxHQUFXWCxFQUFjRSxZQUFjLGFBQWUsZ0JBQ3REVSxFQUFZWixFQUFjRSxZQUFjLE1BQVEsU0FDaERXLEVBQWlCYixFQUFjRSxZQUFjLFNBQVcsTUFFeEQ5K0MsRUFBSTRCLEtBQUtxTyxTQUFTalEsRUFBSWkvQyxFQUFZTSxFQUV0Q2wvQyxHQUFPbS9DLEdBQWM1OUMsS0FBSzg5QyxVQUFXMS9DLEdBRXJDSyxFQUFPby9DLEdBQW1CLEdBRTFCNzlDLEtBQUs2OEMsSUFBS3ArQyxHQUNWdUIsS0FBS2ljLFVBQVcsVUFBWWpjLFFBRzlCMjdDLEVBQUs1bUQsVUFBVTJvRCxVQUFZLFNBQVU5OUMsR0FDbkMsR0FBSW85QyxHQUFnQmg5QyxLQUFLNjdDLE9BQU9sbkQsT0FDaEMsT0FBT3FvRCxHQUFjL1gsa0JBQW9CK1gsRUFBY2UsYUFDakRuK0MsRUFBSUksS0FBSzY3QyxPQUFPeGUsS0FBS3Q0QixNQUFVLElBQVEsSUFBTW5GLEVBQUksTUFHekQrN0MsRUFBSzVtRCxVQUFVK29ELFVBQVksU0FBVTEvQyxHQUNuQyxHQUFJNCtDLEdBQWdCaDlDLEtBQUs2N0MsT0FBT2xuRCxPQUNoQyxPQUFPcW9ELEdBQWMvWCxpQkFBbUIrWCxFQUFjZSxhQUNoRDMvQyxFQUFJNEIsS0FBSzY3QyxPQUFPeGUsS0FBS3Y0QixPQUFXLElBQVEsSUFBTTFHLEVBQUksTUFJMUR1OUMsRUFBSzVtRCxVQUFVaXBELGNBQWdCLFNBQVVwK0MsRUFBR3hCLEdBQzFDNEIsS0FBSys4QyxhQUVMLElBQUlrQixHQUFPaitDLEtBQUtxTyxTQUFTek8sRUFDckJzK0MsRUFBT2wrQyxLQUFLcU8sU0FBU2pRLEVBRXJCKy9DLEVBQVc5K0MsU0FBVU8sRUFBRyxJQUN4QncrQyxFQUFXLytDLFNBQVVqQixFQUFHLElBQ3hCaWdELEVBQWFGLElBQWFuK0MsS0FBS3FPLFNBQVN6TyxHQUFLdytDLElBQWFwK0MsS0FBS3FPLFNBQVNqUSxDQU01RSxJQUhBNEIsS0FBS2lqQyxZQUFhcmpDLEVBQUd4QixHQUdoQmlnRCxJQUFlcitDLEtBQUtzK0MsZ0JBRXZCLFdBREF0K0MsTUFBS3M5QyxnQkFJUCxJQUFJaUIsR0FBUzMrQyxFQUFJcStDLEVBQ2JPLEVBQVNwZ0QsRUFBSTgvQyxFQUNiTyxJQUNKQSxHQUFnQkMsVUFBWTErQyxLQUFLMitDLGFBQWNKLEVBQVFDLEdBRXZEeCtDLEtBQUtxOEMsWUFDSDF1QyxHQUFJOHdDLEVBQ0pHLGlCQUNFRixVQUFXMStDLEtBQUtzOUMsZ0JBRWxCdUIsWUFBWSxLQUloQmxELEVBQUs1bUQsVUFBVTRwRCxhQUFlLFNBQVUvK0MsRUFBR3hCLEdBRXpDLEdBQUk0K0MsR0FBZ0JoOUMsS0FBSzY3QyxPQUFPbG5ELE9BSWhDLE9BSEFpTCxHQUFJbzlDLEVBQWNDLGFBQWVyOUMsR0FBS0EsRUFDdEN4QixFQUFJNCtDLEVBQWNFLFlBQWM5K0MsR0FBS0EsRUFFaENtbUMsRUFDSSxlQUFpQjNrQyxFQUFJLE9BQVN4QixFQUFJLFNBR3BDLGFBQWV3QixFQUFJLE9BQVN4QixFQUFJLE9BSXpDdTlDLEVBQUs1bUQsVUFBVTZaLEtBQU8sU0FBVWhQLEVBQUd4QixHQUNqQzRCLEtBQUtpakMsWUFBYXJqQyxFQUFHeEIsR0FDckI0QixLQUFLczlDLGtCQUlQM0IsRUFBSzVtRCxVQUFVK3BELE9BQVM5QyxFQUN0QkwsRUFBSzVtRCxVQUFVaXBELGNBQWdCckMsRUFBSzVtRCxVQUFVNlosS0FFaEQrc0MsRUFBSzVtRCxVQUFVa3VDLFlBQWMsU0FBVXJqQyxFQUFHeEIsR0FDeEM0QixLQUFLcU8sU0FBU3pPLEVBQUlQLFNBQVVPLEVBQUcsSUFDL0JJLEtBQUtxTyxTQUFTalEsRUFBSWlCLFNBQVVqQixFQUFHLEtBV2pDdTlDLEVBQUs1bUQsVUFBVWdxRCxlQUFpQixTQUFVeC9CLEdBQ3hDdmYsS0FBSzY4QyxJQUFLdDlCLEVBQUs1UixJQUNWNFIsRUFBS3MvQixZQUNSNytDLEtBQUtnL0MsY0FBZXovQixFQUFLNVIsR0FFM0IsS0FBTSxHQUFJd0ssS0FBUW9ILEdBQUtxL0IsZ0JBQ3JCci9CLEVBQUtxL0IsZ0JBQWlCem1DLEdBQU9sakIsS0FBTStLLE9BWXZDMjdDLEVBQUs1bUQsVUFBVWtxRCxZQUFjLFNBQVUxL0IsR0FFckMsSUFBTTVvQixXQUFZcUosS0FBSzY3QyxPQUFPbG5ELFFBQVF1cUQsb0JBRXBDLFdBREFsL0MsTUFBSysrQyxlQUFnQngvQixFQUl2QixJQUFJMC9CLEdBQWNqL0MsS0FBS3k4QyxPQUV2QixLQUFNLEdBQUl0a0MsS0FBUW9ILEdBQUtxL0IsZ0JBQ3JCSyxFQUFZckMsTUFBT3prQyxHQUFTb0gsRUFBS3EvQixnQkFBaUJ6bUMsRUFHcEQsS0FBTUEsSUFBUW9ILEdBQUs1UixHQUNqQnN4QyxFQUFZdkMsY0FBZXZrQyxJQUFTLEVBRS9Cb0gsRUFBS3MvQixhQUNSSSxFQUFZdEMsTUFBT3hrQyxJQUFTLEVBS2hDLElBQUtvSCxFQUFLN1IsS0FBTyxDQUNmMU4sS0FBSzY4QyxJQUFLdDlCLEVBQUs3UixLQUVmLElBQUluUCxHQUFJeUIsS0FBS3RMLFFBQVEwcEMsWUFFckI3L0IsR0FBSSxLQUdOeUIsS0FBS20vQyxpQkFBa0I1L0IsRUFBSzVSLElBRTVCM04sS0FBSzY4QyxJQUFLdDlCLEVBQUs1UixJQUVmM04sS0FBS3MrQyxpQkFBa0IsRUFZekIsSUFBSWMsR0FBa0IsV0FDcEJ0RCxFQUFhUyxFQUFpQm1DLFdBQWEsWUFFN0MvQyxHQUFLNW1ELFVBQVVvcUQsaUJBQW1CLFdBRzNCbi9DLEtBQUtzK0Msa0JBY1Z0K0MsS0FBSzY4QyxLQUNIZCxtQkFBb0JxRCxFQUNwQkYsbUJBQW9CbC9DLEtBQUs2N0MsT0FBT2xuRCxRQUFRdXFELHFCQUcxQ2wvQyxLQUFLdEwsUUFBUXNCLGlCQUFrQmltRCxFQUFvQmo4QyxNQUFNLEtBRzNEMjdDLEVBQUs1bUQsVUFBVXNuRCxXQUFhVixFQUFLNW1ELFVBQVdnbkQsRUFBcUIsY0FBZ0Isa0JBSWpGSixFQUFLNW1ELFVBQVVzcUQsc0JBQXdCLFNBQVVscEMsR0FDL0NuVyxLQUFLcy9DLGdCQUFpQm5wQyxJQUd4QndsQyxFQUFLNW1ELFVBQVV3cUQsaUJBQW1CLFNBQVVwcEMsR0FDMUNuVyxLQUFLcy9DLGdCQUFpQm5wQyxHQUl4QixJQUFJcXBDLElBQ0ZDLG9CQUFxQixZQUNyQkMsaUJBQWtCLFlBQ2xCQyxlQUFnQixZQUdsQmhFLEdBQUs1bUQsVUFBVXVxRCxnQkFBa0IsU0FBVW5wQyxHQUV6QyxHQUFLQSxFQUFNOWQsU0FBVzJILEtBQUt0TCxRQUEzQixDQUdBLEdBQUl1cUQsR0FBY2ovQyxLQUFLeThDLFFBRW5CbUQsRUFBZUosRUFBd0JycEMsRUFBTXlwQyxlQUFrQnpwQyxFQUFNeXBDLFlBZ0J6RSxVQWJPWCxHQUFZdkMsY0FBZWtELEdBRTdCaEUsRUFBWXFELEVBQVl2QyxnQkFFM0IxOEMsS0FBSzYvQyxvQkFHRkQsSUFBZ0JYLEdBQVl0QyxRQUUvQjM4QyxLQUFLdEwsUUFBUStKLE1BQU8wWCxFQUFNeXBDLGNBQWlCLFNBQ3BDWCxHQUFZdEMsTUFBT2lELElBR3ZCQSxJQUFnQlgsR0FBWXJDLE1BQVEsQ0FDdkMsR0FBSWdDLEdBQWtCSyxFQUFZckMsTUFBT2dELEVBQ3pDaEIsR0FBZ0IzcEQsS0FBTStLLFlBQ2ZpL0MsR0FBWXJDLE1BQU9nRCxHQUc1QjUvQyxLQUFLaWMsVUFBVyxpQkFBbUJqYyxTQUdyQzI3QyxFQUFLNW1ELFVBQVU4cUQsa0JBQW9CLFdBQ2pDNy9DLEtBQUs4L0MseUJBQ0w5L0MsS0FBS3RMLFFBQVEwQixvQkFBcUI2bEQsRUFBb0JqOEMsTUFBTSxHQUM1REEsS0FBS3MrQyxpQkFBa0IsR0FPekIzQyxFQUFLNW1ELFVBQVVpcUQsY0FBZ0IsU0FBVXZnRCxHQUV2QyxHQUFJc2hELEtBQ0osS0FBTSxHQUFJNW5DLEtBQVExWixHQUNoQnNoRCxFQUFZNW5DLEdBQVMsRUFFdkJuWSxNQUFLNjhDLElBQUtrRCxHQUdaLElBQUlDLElBQ0ZqRSxtQkFBb0IsR0FDcEJtRCxtQkFBb0IsR0F1SHRCLE9BcEhBdkQsR0FBSzVtRCxVQUFVK3FELHVCQUF5QixXQUV0QzkvQyxLQUFLNjhDLElBQUttRCxJQU1ackUsRUFBSzVtRCxVQUFVa3JELFdBQWEsV0FDMUJqZ0QsS0FBS3RMLFFBQVE4RCxXQUFXbUgsWUFBYUssS0FBS3RMLFNBRTFDc0wsS0FBSzY4QyxLQUFNM3BDLFFBQVMsS0FDcEJsVCxLQUFLaWMsVUFBVyxVQUFZamMsUUFHOUIyN0MsRUFBSzVtRCxVQUFVOGdCLE9BQVMsV0FFdEIsSUFBTWttQyxJQUF1QnBsRCxXQUFZcUosS0FBSzY3QyxPQUFPbG5ELFFBQVF1cUQsb0JBRTNELFdBREFsL0MsTUFBS2lnRCxZQUtQLElBQUk3ZCxHQUFRcGlDLElBQ1pBLE1BQUtzYixLQUFNLGdCQUFpQixXQUMxQjhtQixFQUFNNmQsZUFFUmpnRCxLQUFLc0QsUUFHUHE0QyxFQUFLNW1ELFVBQVVtckQsT0FBUyxpQkFDZmxnRCxNQUFLNjNDLFNBRVo3M0MsS0FBSzY4QyxLQUFNM3BDLFFBQVMsSUFFcEIsSUFBSXZlLEdBQVVxTCxLQUFLNjdDLE9BQU9sbkQsUUFFdEJpcUQsS0FDQXVCLEVBQXdCbmdELEtBQUtvZ0QsbUNBQW1DLGVBQ3BFeEIsR0FBaUJ1QixHQUEwQm5nRCxLQUFLcWdELHNCQUVoRHJnRCxLQUFLcThDLFlBQ0gzdUMsS0FBTS9ZLEVBQVEyckQsWUFDZDN5QyxHQUFJaFosRUFBUTRyRCxhQUNaMUIsWUFBWSxFQUNaRCxnQkFBaUJBLEtBSXJCakQsRUFBSzVtRCxVQUFVc3JELHNCQUF3QixXQUcvQnJnRCxLQUFLNjNDLFVBQ1Q3M0MsS0FBS2ljLFVBQVUsV0FTbkIwL0IsRUFBSzVtRCxVQUFVcXJELG1DQUFxQyxTQUFVSSxHQUM1RCxHQUFJQyxHQUFjemdELEtBQUs2N0MsT0FBT2xuRCxRQUFTNnJELEVBRXZDLElBQUtDLEVBQVl0OUMsUUFDZixNQUFPLFNBR1QsS0FBTSxHQUFJZ1YsS0FBUXNvQyxHQUNoQixNQUFPdG9DLElBSVh3akMsRUFBSzVtRCxVQUFVdU8sS0FBTyxXQUVwQnRELEtBQUs2M0MsVUFBVyxFQUVoQjczQyxLQUFLNjhDLEtBQU0zcEMsUUFBUyxJQUVwQixJQUFJdmUsR0FBVXFMLEtBQUs2N0MsT0FBT2xuRCxRQUV0QmlxRCxLQUNBdUIsRUFBd0JuZ0QsS0FBS29nRCxtQ0FBbUMsY0FDcEV4QixHQUFpQnVCLEdBQTBCbmdELEtBQUswZ0Qsb0JBRWhEMWdELEtBQUtxOEMsWUFDSDN1QyxLQUFNL1ksRUFBUTRyRCxhQUNkNXlDLEdBQUloWixFQUFRMnJELFlBRVp6QixZQUFZLEVBQ1pELGdCQUFpQkEsS0FJckJqRCxFQUFLNW1ELFVBQVUyckQsb0JBQXNCLFdBRzlCMWdELEtBQUs2M0MsV0FDUjczQyxLQUFLNjhDLEtBQU0zcEMsUUFBUyxTQUNwQmxULEtBQUtpYyxVQUFVLFVBSW5CMC9CLEVBQUs1bUQsVUFBVXdpQixRQUFVLFdBQ3ZCdlgsS0FBSzY4QyxLQUNIeHVDLFNBQVUsR0FDVnZXLEtBQU0sR0FDTkMsTUFBTyxHQUNQRSxJQUFLLEdBQ0xDLE9BQVEsR0FDUm1rRCxXQUFZLEdBQ1pxQyxVQUFXLE1BSVIvQyxJQVVMLFNBQVVuNkMsRUFBUW9sQixHQUNsQixZQUdzQixtQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSxxQkFDSixrQkFDQSw0QkFDQSxvQkFDQSx1QkFDQSxVQUVGLFNBQVVNLEVBQVM3QixFQUFja2pCLEVBQVNybUIsRUFBTzhqQyxHQUMvQyxNQUFPLzBCLEdBQVNwbEIsRUFBUXFiLEVBQVM3QixFQUFja2pCLEVBQVNybUIsRUFBTzhqQyxLQUd2QyxnQkFBWGovQixTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2ZwbEIsRUFDQXNiLFFBQVEsV0FDUkEsUUFBUSx3QkFDUkEsUUFBUSxZQUNSQSxRQUFRLGtCQUNSQSxRQUFRLFdBSVZ0YixFQUFPazZDLFNBQVc5MEIsRUFDaEJwbEIsRUFDQUEsRUFBT3FiLFFBQ1ByYixFQUFPd1osYUFDUHhaLEVBQU8wOEIsUUFDUDE4QixFQUFPdS9CLGFBQ1B2L0IsRUFBT2s2QyxTQUFTQyxPQUluQm42QyxPQUFRLFNBQWtCQSxFQUFRcWIsRUFBUzdCLEVBQWNrakIsRUFBU3JtQixFQUFPOGpDLEdBQzVFLFlBcUJBLFNBQVNELEdBQVVobkQsRUFBU0MsR0FDMUIsR0FBSSt4QyxHQUFlN3VCLEVBQU04cEIsZ0JBQWlCanRDLEVBQzFDLEtBQU1neUMsRUFLSixZQUpLM3RCLEdBQ0hBLEVBQVF1aUIsTUFBTyxtQkFBcUJ0N0IsS0FBS0YsWUFBWTRsQixVQUNuRCxNQUFTZ2hCLEdBQWdCaHlDLElBSS9Cc0wsTUFBS3RMLFFBQVVneUMsRUFFVnZwQixJQUNIbmQsS0FBSzJtQyxTQUFXeHBCLEVBQVFuZCxLQUFLdEwsVUFJL0JzTCxLQUFLckwsUUFBVWtqQixFQUFNM2lCLFVBQVk4SyxLQUFLRixZQUFZL0YsVUFDbERpRyxLQUFLMEMsT0FBUS9OLEVBR2IsSUFBSTJLLEtBQU91bkMsQ0FDWDdtQyxNQUFLdEwsUUFBUWlzRCxhQUFlcmhELEVBQzVCL0ssRUFBVytLLEdBQU9VLEtBR2xCQSxLQUFLNG1DLFVBRUE1bUMsS0FBS3JMLFFBQVFpc0QsY0FDaEI1Z0QsS0FBSzY3QyxTQTdDVCxHQUFJOWlDLEdBQVV2WCxFQUFPdVgsUUFDakJvRSxFQUFTM2IsRUFBTzJiLE9BQ2hCdWQsRUFBTyxhQUtQbU0sRUFBTyxFQUVQdHlDLElBKzFCSixPQXR6QkFtbkQsR0FBU2gyQixVQUFZLFdBQ3JCZzJCLEVBQVNDLEtBQU9BLEVBR2hCRCxFQUFTM2hELFVBQ1A4bUQsZ0JBQ0V4eUMsU0FBVSxZQUVadXlDLGNBQWMsRUFDZDNELGNBQWMsRUFDZEMsYUFBYSxFQUNieFYsZUFBZSxFQUNmb1oscUJBQXFCLEVBRXJCNUIsbUJBQW9CLE9BQ3BCb0IsYUFDRW45QyxRQUFTLEVBQ1R1N0MsVUFBVyxnQkFFYjZCLGNBQ0VwOUMsUUFBUyxFQUNUdTdDLFVBQVcsYUFLZjdtQyxFQUFNM2lCLE9BQVF3bUQsRUFBUzNtRCxVQUFXaW1CLEVBQWFqbUIsV0FNL0MybUQsRUFBUzNtRCxVQUFVMk4sT0FBUyxTQUFVbzRCLEdBQ3BDampCLEVBQU0zaUIsT0FBUThLLEtBQUtyTCxRQUFTbW1DLElBRzlCNGdCLEVBQVMzbUQsVUFBVTZ4QyxRQUFVLFdBRTNCNW1DLEtBQUsrZ0QsY0FFTC9nRCxLQUFLZ2hELFVBQ0xoaEQsS0FBS2loRCxNQUFPamhELEtBQUtyTCxRQUFRc3NELE9BRXpCcHBDLEVBQU0zaUIsT0FBUThLLEtBQUt0TCxRQUFRK0osTUFBT3VCLEtBQUtyTCxRQUFRa3NELGdCQUcxQzdnRCxLQUFLckwsUUFBUSt5QyxlQUNoQjFuQyxLQUFLa2hELGNBS1R4RixFQUFTM21ELFVBQVVnc0QsWUFBYyxXQUUvQi9nRCxLQUFLbWhELE1BQVFuaEQsS0FBS29oRCxTQUFVcGhELEtBQUt0TCxRQUFRNFEsV0FTM0NvMkMsRUFBUzNtRCxVQUFVcXNELFNBQVcsU0FBVTNnQixHQU90QyxJQUFNLEdBTEY0Z0IsR0FBWXJoRCxLQUFLc2hELHdCQUF5QjdnQixHQUMxQ2tiLEVBQU8zN0MsS0FBS0YsWUFBWTY3QyxLQUd4QndGLEtBQ005ckQsRUFBRSxFQUFHNGxDLEVBQU1vbUIsRUFBVS9wRCxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNwRCxHQUFJNmxDLEdBQU9tbUIsRUFBVWhzRCxHQUNqQnkrQixFQUFPLEdBQUk2bkIsR0FBTXpnQixFQUFNbDdCLEtBQzNCbWhELEdBQU10Z0QsS0FBTWl6QixHQUdkLE1BQU9xdEIsSUFRVHpGLEVBQVMzbUQsVUFBVXVzRCx3QkFBMEIsU0FBVTdnQixHQUNyRCxNQUFPNW9CLEdBQU0rcEIsbUJBQW9CbkIsRUFBT3pnQyxLQUFLckwsUUFBUTRzRCxlQU92RDdGLEVBQVMzbUQsVUFBVXlzRCxnQkFBa0IsV0FFbkMsSUFBTSxHQURGL2dCLE1BQ01wckMsRUFBRSxFQUFHNGxDLEVBQU1qN0IsS0FBS21oRCxNQUFNN3BELE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUMvQ29yQyxFQUFNNS9CLEtBQU1iLEtBQUttaEQsTUFBTTlyRCxHQUFHWCxRQUU1QixPQUFPK3JDLElBUVRpYixFQUFTM21ELFVBQVU4bUQsT0FBUyxXQUMxQjc3QyxLQUFLeWhELGVBQ0x6aEQsS0FBSzBoRCxlQUdMLElBQUlDLEdBQTZDNXFELFNBQWpDaUosS0FBS3JMLFFBQVFpdEQsZ0JBQzNCNWhELEtBQUtyTCxRQUFRaXRELGlCQUFtQjVoRCxLQUFLNmhELGVBQ3ZDN2hELE1BQUs4aEQsWUFBYTloRCxLQUFLbWhELE1BQU9RLEdBRzlCM2hELEtBQUs2aEQsaUJBQWtCLEdBSXpCbkcsRUFBUzNtRCxVQUFVcW1DLE1BQVFzZ0IsRUFBUzNtRCxVQUFVOG1ELE9BSzlDSCxFQUFTM21ELFVBQVUwc0QsYUFBZSxXQUNoQ3poRCxLQUFLaytCLFdBSVB3ZCxFQUFTM21ELFVBQVVtcEMsUUFBVSxXQUMzQmwrQixLQUFLcTlCLEtBQU9hLEVBQVNsK0IsS0FBS3RMLFVBYTVCZ25ELEVBQVMzbUQsVUFBVWd0RCxnQkFBa0IsU0FBVXhrQixFQUFhRixHQUMxRCxHQUNJbkMsR0FEQXg0QixFQUFTMUMsS0FBS3JMLFFBQVM0b0MsRUFFckI3NkIsSUFLbUIsZ0JBQVhBLEdBQ1Z3NEIsRUFBT2w3QixLQUFLdEwsUUFBUXlwQyxjQUFlejdCLEdBQ3pCbVYsRUFBTXdwQixVQUFXMytCLEtBQzNCdzRCLEVBQU94NEIsR0FHVDFDLEtBQU11OUIsR0FBZ0JyQyxFQUFPZ0QsRUFBU2hELEdBQVFtQyxHQUFTMzZCLEdBVHZEMUMsS0FBTXU5QixHQUFnQixHQWlCMUJtZSxFQUFTM21ELFVBQVUrc0QsWUFBYyxTQUFVWCxFQUFPUSxHQUNoRFIsRUFBUW5oRCxLQUFLZ2lELG1CQUFvQmIsR0FFakNuaEQsS0FBS2lpRCxhQUFjZCxFQUFPUSxHQUUxQjNoRCxLQUFLa2lELGVBU1B4RyxFQUFTM21ELFVBQVVpdEQsbUJBQXFCLFNBQVViLEdBRWhELElBQU0sR0FERlcsTUFDTXpzRCxFQUFFLEVBQUc0bEMsRUFBTWttQixFQUFNN3BELE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBQUl5K0IsR0FBT3F0QixFQUFNOXJELEVBQ1h5K0IsR0FBS3F1QixXQUNUTCxFQUFZamhELEtBQU1pekIsR0FHdEIsTUFBT2d1QixJQVFUcEcsRUFBUzNtRCxVQUFVa3RELGFBQWUsU0FBVWQsRUFBT1EsR0FHakQsR0FGQTNoRCxLQUFLb2lELHFCQUFzQixTQUFVakIsR0FFL0JBLEdBQVVBLEVBQU03cEQsT0FBdEIsQ0FPQSxJQUFNLEdBRkZzb0MsTUFFTXZxQyxFQUFFLEVBQUc0bEMsRUFBTWttQixFQUFNN3BELE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBQUl5K0IsR0FBT3F0QixFQUFNOXJELEdBRWJnWixFQUFXck8sS0FBS3FpRCx1QkFBd0J2dUIsRUFFNUN6bEIsR0FBU3lsQixLQUFPQSxFQUNoQnpsQixFQUFTc3pDLFVBQVlBLEdBQWE3dEIsRUFBSzh0QixnQkFDdkNoaUIsRUFBTS8rQixLQUFNd04sR0FHZHJPLEtBQUtzaUQsb0JBQXFCMWlCLEtBUTVCOGIsRUFBUzNtRCxVQUFVc3RELHVCQUF5QixXQUMxQyxPQUNFemlELEVBQUcsRUFDSHhCLEVBQUcsSUFVUHM5QyxFQUFTM21ELFVBQVV1dEQsb0JBQXNCLFNBQVUxaUIsR0FDakQsSUFBTSxHQUFJdnFDLEdBQUUsRUFBRzRsQyxFQUFNMkUsRUFBTXRvQyxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNoRCxHQUFJa2xCLEdBQU1xbEIsRUFBTXZxQyxFQUNoQjJLLE1BQUt1aUQsY0FBZWhvQyxFQUFJdVosS0FBTXZaLEVBQUkzYSxFQUFHMmEsRUFBSW5jLEVBQUdtYyxFQUFJb25DLGFBV3BEakcsRUFBUzNtRCxVQUFVd3RELGNBQWdCLFNBQVV6dUIsRUFBTWwwQixFQUFHeEIsRUFBR3VqRCxHQUNsREEsRUFFSDd0QixFQUFLbGxCLEtBQU1oUCxFQUFHeEIsR0FFZDAxQixFQUFLZ3JCLE9BQVFsL0MsRUFBR3hCLElBUXBCczlDLEVBQVMzbUQsVUFBVW10RCxZQUFjLFdBQy9CbGlELEtBQUt3aUQsbUJBR1A5RyxFQUFTM21ELFVBQVV5dEQsZ0JBQWtCLFdBQ25DLEdBQU14aUQsS0FBS3JMLFFBQVFtc0Qsb0JBQW5CLENBR0EsR0FBSXpqQixHQUFPcjlCLEtBQUt5aUQsbUJBQ1hwbEIsS0FDSHI5QixLQUFLMGlELHFCQUFzQnJsQixFQUFLdDRCLE9BQU8sR0FDdkMvRSxLQUFLMGlELHFCQUFzQnJsQixFQUFLdjRCLFFBQVEsTUFVNUM0MkMsRUFBUzNtRCxVQUFVMHRELGtCQUFvQi9uQixFQU12Q2doQixFQUFTM21ELFVBQVUydEQscUJBQXVCLFNBQVVDLEVBQVNDLEdBQzNELEdBQWlCN3JELFNBQVo0ckQsRUFBTCxDQUlBLEdBQUlFLEdBQVc3aUQsS0FBS3E5QixJQUVmd2xCLEdBQVN4a0IsY0FDWnNrQixHQUFXQyxFQUFVQyxFQUFTcmtCLFlBQWNxa0IsRUFBU3BrQixhQUNuRG9rQixFQUFTOWpCLGdCQUFrQjhqQixFQUFTN2pCLGlCQUNwQzZqQixFQUFTamtCLGNBQWdCaWtCLEVBQVNsa0IsV0FDbENra0IsRUFBUzNqQixlQUFpQjJqQixFQUFTMWpCLG1CQUd2Q3dqQixFQUFVL2dELEtBQUt5RixJQUFLczdDLEVBQVMsR0FDN0IzaUQsS0FBS3RMLFFBQVErSixNQUFPbWtELEVBQVUsUUFBVSxVQUFhRCxFQUFVLE9BUWpFakgsRUFBUzNtRCxVQUFVcXRELHFCQUF1QixTQUFVdHNELEVBQVdxckQsR0FFN0QsUUFBUzJCLEtBQ1AxZ0IsRUFBTTVOLGNBQWUxK0IsRUFBWSxXQUFZLE1BQVFxckQsSUFVdkQsUUFBU3pKLEtBQ1BxTCxJQUNLQSxJQUFjdnZCLEdBQ2pCc3ZCLElBZkosR0FBSTFnQixHQUFRcGlDLEtBS1J3ekIsRUFBUTJ0QixFQUFNN3BELE1BQ2xCLEtBQU02cEQsSUFBVTN0QixFQUVkLFdBREFzdkIsSUFhRixLQUFNLEdBVEZDLEdBQVksRUFTTjF0RCxFQUFFLEVBQUc0bEMsRUFBTWttQixFQUFNN3BELE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBQUl5K0IsR0FBT3F0QixFQUFNOXJELEVBQ2pCeStCLEdBQUt4WSxLQUFNeGxCLEVBQVc0aEQsS0FVMUJnRSxFQUFTM21ELFVBQVV5L0IsY0FBZ0IsU0FBVS94QixFQUFNMFQsRUFBT29KLEdBRXhELEdBQUlxcUIsR0FBV3p6QixHQUFVQSxHQUFRL1YsT0FBUW1mLEdBQVNBLENBR2xELElBRkF2ZixLQUFLaWMsVUFBV3haLEVBQU1tbkMsR0FFakJ6c0IsRUFHSCxHQURBbmQsS0FBSzJtQyxTQUFXM21DLEtBQUsybUMsVUFBWXhwQixFQUFRbmQsS0FBS3RMLFNBQ3pDeWhCLEVBQVEsQ0FFWCxHQUFJMHpCLEdBQVMxc0IsRUFBTzJzQixNQUFPM3pCLEVBQzNCMHpCLEdBQU9wbkMsS0FBT0EsRUFDZHpDLEtBQUsybUMsU0FBU3J0QixRQUFTdXdCLEVBQVF0cUIsT0FHL0J2ZixNQUFLMm1DLFNBQVNydEIsUUFBUzdXLEVBQU04YyxJQWFuQ204QixFQUFTM21ELFVBQVVpdUQsT0FBUyxTQUFVOW5CLEdBQ3BDLEdBQUlwSCxHQUFPOXpCLEtBQUt3WSxRQUFTMGlCLEVBQ3BCcEgsS0FDSEEsRUFBS3F1QixXQUFZLElBUXJCekcsRUFBUzNtRCxVQUFVa3VELFNBQVcsU0FBVS9uQixHQUN0QyxHQUFJcEgsR0FBTzl6QixLQUFLd1ksUUFBUzBpQixFQUNwQnBILFVBQ0lBLEdBQUtxdUIsV0FRaEJ6RyxFQUFTM21ELFVBQVVrc0QsTUFBUSxTQUFVeGdCLEdBRW5DLEdBREFBLEVBQVF6Z0MsS0FBS2tqRCxNQUFPemlCLEdBQ3BCLENBSUF6Z0MsS0FBS2doRCxPQUFTaGhELEtBQUtnaEQsT0FBTzVnRCxPQUFRcWdDLEVBRWxDLEtBQU0sR0FBSXByQyxHQUFFLEVBQUc0bEMsRUFBTXdGLEVBQU1ucEMsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDaEQsR0FBSTZsQyxHQUFPdUYsRUFBTXByQyxFQUNqQjJLLE1BQUtnakQsT0FBUTluQixNQVFqQndnQixFQUFTM21ELFVBQVVvdUQsUUFBVSxTQUFVMWlCLEdBRXJDLEdBREFBLEVBQVF6Z0MsS0FBS2tqRCxNQUFPemlCLEdBS3BCLElBQU0sR0FBSXByQyxHQUFFLEVBQUc0bEMsRUFBTXdGLEVBQU1ucEMsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDaEQsR0FBSTZsQyxHQUFPdUYsRUFBTXByQyxFQUVqQndpQixHQUFNdXBCLFdBQVlwaEMsS0FBS2doRCxPQUFROWxCLEdBQy9CbDdCLEtBQUtpakQsU0FBVS9uQixLQVVuQndnQixFQUFTM21ELFVBQVVtdUQsTUFBUSxTQUFVemlCLEdBQ25DLE1BQU1BLElBSWdCLGdCQUFWQSxLQUNWQSxFQUFRemdDLEtBQUt0TCxRQUFRbU8saUJBQWtCNDlCLElBRXpDQSxFQUFRNW9CLEVBQU1xcEIsVUFBV1QsSUFQekIsUUFXRmliLEVBQVMzbUQsVUFBVTJzRCxjQUFnQixXQUNqQyxHQUFNMWhELEtBQUtnaEQsUUFBV2hoRCxLQUFLZ2hELE9BQU8xcEQsT0FBbEMsQ0FJQTBJLEtBQUtvakQsa0JBRUwsS0FBTSxHQUFJL3RELEdBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUtnaEQsT0FBTzFwRCxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUN0RCxHQUFJNHJELEdBQVFqaEQsS0FBS2doRCxPQUFPM3JELEVBQ3hCMkssTUFBS3FqRCxhQUFjcEMsTUFLdkJ2RixFQUFTM21ELFVBQVVxdUQsaUJBQW1CLFdBRXBDLEdBQUl0UCxHQUFlOXpDLEtBQUt0TCxRQUFRaUQsd0JBQzVCMGxDLEVBQU9yOUIsS0FBS3E5QixJQUNoQnI5QixNQUFLc2pELGVBQ0h4ckQsS0FBTWc4QyxFQUFhaDhDLEtBQU91bEMsRUFBS21CLFlBQWNuQixFQUFLMEIsZ0JBQ2xEOW1DLElBQUs2N0MsRUFBYTc3QyxJQUFNb2xDLEVBQUtzQixXQUFhdEIsRUFBSzZCLGVBQy9Dbm5DLE1BQU8rN0MsRUFBYS83QyxPQUFVc2xDLEVBQUtvQixhQUFlcEIsRUFBSzJCLGtCQUN2RDltQyxPQUFRNDdDLEVBQWE1N0MsUUFBV21sQyxFQUFLdUIsY0FBZ0J2QixFQUFLOEIscUJBTzlEdWMsRUFBUzNtRCxVQUFVc3VELGFBQWUzb0IsRUFPbENnaEIsRUFBUzNtRCxVQUFVd3VELGtCQUFvQixTQUFVcm9CLEdBQy9DLEdBQUk0WSxHQUFlNVksRUFBS3ZqQyx3QkFDcEI2ckQsRUFBV3hqRCxLQUFLc2pELGNBQ2hCam1CLEVBQU9hLEVBQVNoRCxHQUNoQjliLEdBQ0Z0bkIsS0FBTWc4QyxFQUFhaDhDLEtBQU8wckQsRUFBUzFyRCxLQUFPdWxDLEVBQUs3VyxXQUMvQ3Z1QixJQUFLNjdDLEVBQWE3N0MsSUFBTXVyRCxFQUFTdnJELElBQU1vbEMsRUFBSy9XLFVBQzVDdnVCLE1BQU95ckQsRUFBU3pyRCxNQUFRKzdDLEVBQWEvN0MsTUFBUXNsQyxFQUFLNVcsWUFDbER2dUIsT0FBUXNyRCxFQUFTdHJELE9BQVM0N0MsRUFBYTU3QyxPQUFTbWxDLEVBQUs5VyxhQUV2RCxPQUFPbkgsSUFPVHM4QixFQUFTM21ELFVBQVU0bkIsWUFBYyxTQUFVeEcsR0FDekMsR0FBSTBKLEdBQVMsS0FBTzFKLEVBQU0xVCxJQUNyQnpDLE1BQU02ZixJQUNUN2YsS0FBTTZmLEdBQVUxSixJQU9wQnVsQyxFQUFTM21ELFVBQVVtc0QsV0FBYSxXQUV6QmxoRCxLQUFLMG5DLGdCQUdWN3FCLEVBQVFwZixLQUFNK0QsRUFBUSxTQUFVeEIsTUFDaENBLEtBQUswbkMsZUFBZ0IsSUFNdkJnVSxFQUFTM21ELFVBQVUwdUQsYUFBZSxXQUMzQnpqRCxLQUFLMG5DLGVBQ1I3cUIsRUFBUUQsT0FBUXBiLEVBQVEsU0FBVXhCLE1BRXBDQSxLQUFLMG5DLGVBQWdCLEdBT3ZCZ1UsRUFBUzNtRCxVQUFVNDFDLFNBQVcsV0FNNUIsUUFBUytZLEtBQ1B0aEIsRUFBTXZ0QixlQUNDdXRCLEdBQU11aEIsY0FQVjNqRCxLQUFLMmpELGVBQ1JuL0MsYUFBY3hFLEtBQUsyakQsY0FHckIsSUFBSXZoQixHQUFRcGlDLElBTVpBLE1BQUsyakQsY0FBZ0JsZ0QsV0FBWWlnRCxFQUFTLE1BSTVDaEksRUFBUzNtRCxVQUFVOGYsT0FBUyxXQUdwQjdVLEtBQUswbkMsZUFBa0IxbkMsS0FBSzRqRCxxQkFJbEM1akQsS0FBSzY3QyxVQU9QSCxFQUFTM21ELFVBQVU2dUQsa0JBQW9CLFdBQ3JDLEdBQUl2bUIsR0FBT2EsRUFBU2wrQixLQUFLdEwsU0FHckJtdkQsRUFBVzdqRCxLQUFLcTlCLE1BQVFBLENBQzVCLE9BQU93bUIsSUFBWXhtQixFQUFLdGMsYUFBZS9nQixLQUFLcTlCLEtBQUt0YyxZQVVuRDI2QixFQUFTM21ELFVBQVUrdUQsU0FBVyxTQUFVcmpCLEdBQ3RDLEdBQUkwZ0IsR0FBUW5oRCxLQUFLb2hELFNBQVUzZ0IsRUFLM0IsT0FISzBnQixHQUFNN3BELFNBQ1QwSSxLQUFLbWhELE1BQVFuaEQsS0FBS21oRCxNQUFNL2dELE9BQVErZ0QsSUFFM0JBLEdBT1R6RixFQUFTM21ELFVBQVVndkQsU0FBVyxTQUFVdGpCLEdBQ3RDLEdBQUkwZ0IsR0FBUW5oRCxLQUFLOGpELFNBQVVyakIsRUFDckIwZ0IsR0FBTTdwRCxTQUlaMEksS0FBSzhoRCxZQUFhWCxHQUFPLEdBQ3pCbmhELEtBQUtrZ0QsT0FBUWlCLEtBT2Z6RixFQUFTM21ELFVBQVVpdkQsVUFBWSxTQUFVdmpCLEdBQ3ZDLEdBQUkwZ0IsR0FBUW5oRCxLQUFLb2hELFNBQVUzZ0IsRUFDM0IsSUFBTTBnQixFQUFNN3BELE9BQVosQ0FJQSxHQUFJMnNELEdBQWdCamtELEtBQUttaEQsTUFBTXRqRCxNQUFNLEVBQ3JDbUMsTUFBS21oRCxNQUFRQSxFQUFNL2dELE9BQVE2akQsR0FFM0Jqa0QsS0FBS3loRCxlQUNMemhELEtBQUswaEQsZ0JBRUwxaEQsS0FBSzhoRCxZQUFhWCxHQUFPLEdBQ3pCbmhELEtBQUtrZ0QsT0FBUWlCLEdBRWJuaEQsS0FBSzhoRCxZQUFhbUMsS0FPcEJ2SSxFQUFTM21ELFVBQVVtckQsT0FBUyxTQUFVaUIsR0FDcENuaEQsS0FBS29pRCxxQkFBc0IsU0FBVWpCLEVBR3JDLEtBQU0sR0FERmxtQixHQUFNa21CLEdBQVNBLEVBQU03cEQsT0FDZmpDLEVBQUUsRUFBRzRsQyxHQUFXQSxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDbkMsR0FBSXkrQixHQUFPcXRCLEVBQU05ckQsRUFDakJ5K0IsR0FBS29zQixXQVFUeEUsRUFBUzNtRCxVQUFVdU8sS0FBTyxTQUFVNjlDLEdBQ2xDbmhELEtBQUtvaUQscUJBQXNCLE9BQVFqQixFQUduQyxLQUFNLEdBREZsbUIsR0FBTWttQixHQUFTQSxFQUFNN3BELE9BQ2ZqQyxFQUFFLEVBQUc0bEMsR0FBV0EsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ25DLEdBQUl5K0IsR0FBT3F0QixFQUFNOXJELEVBQ2pCeStCLEdBQUt4d0IsU0FRVG80QyxFQUFTM21ELFVBQVVtdkQsbUJBQXFCLFNBQVV6akIsR0FDaEQsR0FBSTBnQixHQUFRbmhELEtBQUtta0QsU0FBVTFqQixFQUMzQnpnQyxNQUFLa2dELE9BQVFpQixJQU9mekYsRUFBUzNtRCxVQUFVcXZELGlCQUFtQixTQUFVM2pCLEdBQzlDLEdBQUkwZ0IsR0FBUW5oRCxLQUFLbWtELFNBQVUxakIsRUFDM0J6Z0MsTUFBS3NELEtBQU02OUMsSUFTYnpGLEVBQVMzbUQsVUFBVXlqQixRQUFVLFNBQVUwaUIsR0FFckMsSUFBTSxHQUFJN2xDLEdBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUttaEQsTUFBTTdwRCxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNyRCxHQUFJeStCLEdBQU85ekIsS0FBS21oRCxNQUFNOXJELEVBQ3RCLElBQUt5K0IsRUFBS3AvQixVQUFZd21DLEVBRXBCLE1BQU9wSCxLQVViNG5CLEVBQVMzbUQsVUFBVW92RCxTQUFXLFNBQVUxakIsR0FDdENBLEVBQVE1b0IsRUFBTXFwQixVQUFXVCxFQUV6QixLQUFNLEdBREYwZ0IsTUFDTTlyRCxFQUFFLEVBQUc0bEMsRUFBTXdGLEVBQU1ucEMsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDaEQsR0FBSTZsQyxHQUFPdUYsRUFBTXByQyxHQUNieStCLEVBQU85ekIsS0FBS3dZLFFBQVMwaUIsRUFDcEJwSCxJQUNIcXRCLEVBQU10Z0QsS0FBTWl6QixHQUloQixNQUFPcXRCLElBT1R6RixFQUFTM21ELFVBQVU4Z0IsT0FBUyxTQUFVNHFCLEdBQ3BDLEdBQUk0akIsR0FBY3JrRCxLQUFLbWtELFNBQVUxakIsRUFLakMsSUFIQXpnQyxLQUFLb2lELHFCQUFzQixTQUFVaUMsR0FHL0JBLEdBQWdCQSxFQUFZL3NELE9BSWxDLElBQU0sR0FBSWpDLEdBQUUsRUFBRzRsQyxFQUFNb3BCLEVBQVkvc0QsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDdEQsR0FBSXkrQixHQUFPdXdCLEVBQVlodkQsRUFDdkJ5K0IsR0FBS2plLFNBRUxnQyxFQUFNdXBCLFdBQVlwaEMsS0FBS21oRCxNQUFPcnRCLEtBT2xDNG5CLEVBQVMzbUQsVUFBVXdpQixRQUFVLFdBRTNCLEdBQUk5WSxHQUFRdUIsS0FBS3RMLFFBQVErSixLQUN6QkEsR0FBTXFHLE9BQVMsR0FDZnJHLEVBQU00UCxTQUFXLEdBQ2pCNVAsRUFBTXNHLE1BQVEsRUFFZCxLQUFNLEdBQUkxUCxHQUFFLEVBQUc0bEMsRUFBTWo3QixLQUFLbWhELE1BQU03cEQsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDckQsR0FBSXkrQixHQUFPOXpCLEtBQUttaEQsTUFBTTlyRCxFQUN0QnkrQixHQUFLdmMsVUFHUHZYLEtBQUt5akQsY0FFTCxJQUFJbmtELEdBQUtVLEtBQUt0TCxRQUFRaXNELG1CQUNmcHNELEdBQVcrSyxTQUNYVSxNQUFLdEwsUUFBUWlzRCxhQUVmeGpDLEdBQ0hBLEVBQU9tdUIsV0FBWXRyQyxLQUFLdEwsUUFBU3NMLEtBQUtGLFlBQVk0bEIsWUFZdERnMkIsRUFBU3ZuQixLQUFPLFNBQVUrRyxHQUN4QkEsRUFBT3JqQixFQUFNOHBCLGdCQUFpQnpHLEVBQzlCLElBQUk1N0IsR0FBSzQ3QixHQUFRQSxFQUFLeWxCLFlBQ3RCLE9BQU9yaEQsSUFBTS9LLEVBQVcrSyxJQVUxQm84QyxFQUFTenlCLE9BQVMsU0FBVXZELEVBQVcvd0IsR0FFckMsUUFBUzJ2RCxLQUNQNUksRUFBU3Y3QyxNQUFPSCxLQUFNRSxXQXVDeEIsTUFwQ0twTCxRQUFPbTBCLE9BQ1ZxN0IsRUFBT3Z2RCxVQUFZRCxPQUFPbTBCLE9BQVF5eUIsRUFBUzNtRCxXQUUzQzhpQixFQUFNM2lCLE9BQVFvdkQsRUFBT3Z2RCxVQUFXMm1ELEVBQVMzbUQsV0FHM0N1dkQsRUFBT3Z2RCxVQUFVK0ssWUFBY3drRCxFQUUvQkEsRUFBT3ZxRCxTQUFXOGQsRUFBTTNpQixVQUFZd21ELEVBQVMzaEQsVUFFN0M4ZCxFQUFNM2lCLE9BQVFvdkQsRUFBT3ZxRCxTQUFVcEYsR0FFL0IydkQsRUFBT3Z2RCxVQUFVd3ZELFlBRWpCRCxFQUFPNStCLFVBQVlBLEVBRW5CNCtCLEVBQU9ud0IsS0FBT3VuQixFQUFTdm5CLEtBR3ZCbXdCLEVBQU8zSSxLQUFPLFdBQ1pBLEVBQUt4N0MsTUFBT0gsS0FBTUUsWUFHcEJva0QsRUFBTzNJLEtBQUs1bUQsVUFBWSxHQUFJNG1ELEdBSTVCOWpDLEVBQU0ycUIsU0FBVThoQixFQUFRNStCLEdBS25CdkksR0FBVUEsRUFBT29lLFNBQ3BCcGUsRUFBT29lLFFBQVM3VixFQUFXNCtCLEdBR3RCQSxHQU1UNUksRUFBU0MsS0FBT0EsRUFFVEQsSUFTTCxTQUFVbDZDLEVBQVFvbEIsR0FDcEIsWUFFd0IsbUJBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELE9BQVEsbUJBQ0oscUJBRUZxSyxHQUMwQixnQkFBWGxLLFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZjlKLFFBQVEsY0FJVnRiLEVBQU9nakQsUUFBVWhqRCxFQUFPZ2pELFlBQ3hCaGpELEVBQU9nakQsUUFBUTdJLEtBQU8vMEIsRUFDcEJwbEIsRUFBT2s2QyxZQUlWbDZDLE9BQVEsU0FBa0JrNkMsR0FDN0IsWUFLQSxTQUFTQyxLQUNQRCxFQUFTQyxLQUFLeDdDLE1BQU9ILEtBQU1FLFdBRzdCeTdDLEVBQUs1bUQsVUFBWSxHQUFJMm1ELEdBQVNDLEtBRTlCQSxFQUFLNW1ELFVBQVU2eEMsUUFBVSxXQUV2QjVtQyxLQUFLVixHQUFLVSxLQUFLNjdDLE9BQU80SSxXQUN0Qi9JLEVBQVNDLEtBQUs1bUQsVUFBVTZ4QyxRQUFRM3hDLEtBQU0rSyxNQUN0Q0EsS0FBSzBrRCxhQUdQL0ksRUFBSzVtRCxVQUFVNHZELGVBQWlCLFdBQzlCLElBQUsza0QsS0FBS21pRCxVQUFWLENBSUFuaUQsS0FBSzBrRCxTQUFTcGxELEdBQUtVLEtBQUtWLEdBRXhCVSxLQUFLMGtELFNBQVMsa0JBQW9CMWtELEtBQUtWLEdBQ3ZDVSxLQUFLMGtELFNBQVNFLE9BQVNoakQsS0FBS2dqRCxRQUU1QixJQUFJQyxHQUFjN2tELEtBQUs2N0MsT0FBT2xuRCxRQUFRa3dELFlBQ2xDQyxFQUFVOWtELEtBQUs2N0MsT0FBT2tKLFFBQzFCLEtBQU0sR0FBSTFtQyxLQUFPd21DLEdBQWMsQ0FDN0IsR0FBSUcsR0FBU0YsRUFBU3ptQyxFQUN0QnJlLE1BQUswa0QsU0FBVXJtQyxHQUFRMm1DLEVBQVFobEQsS0FBS3RMLFFBQVNzTCxRQUlqRCxJQUFJaWxELEdBQVd0SixFQUFLNW1ELFVBQVV3aUIsT0FVOUIsT0FUQW9rQyxHQUFLNW1ELFVBQVV3aUIsUUFBVSxXQUV2QjB0QyxFQUFTOWtELE1BQU9ILEtBQU1FLFdBRXRCRixLQUFLNjhDLEtBQ0gzcEMsUUFBUyxNQUlOeW9DLElBUUwsU0FBVW42QyxFQUFRb2xCLEdBQ2xCLFlBR3NCLG1CQUFWckssU0FBd0JBLE9BQU9DLElBRXpDRCxPQUFRLDBCQUNKLG9CQUNBLHFCQUVGcUssR0FDMEIsZ0JBQVhsSyxTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2Y5SixRQUFRLFlBQ1JBLFFBQVEsY0FJVnRiLEVBQU9nakQsUUFBVWhqRCxFQUFPZ2pELFlBQ3hCaGpELEVBQU9nakQsUUFBUVUsV0FBYXQrQixFQUMxQnBsQixFQUFPMDhCLFFBQ1AxOEIsRUFBT2s2QyxZQUlWbDZDLE9BQVEsU0FBa0IwOEIsRUFBU3dkLEdBQ3BDLFlBR0EsU0FBU3dKLEdBQVlDLEdBQ25CbmxELEtBQUttbEQsUUFBVUEsRUFFVkEsSUFDSG5sRCxLQUFLckwsUUFBVXd3RCxFQUFReHdELFFBQVNxTCxLQUFLMGxCLFdBQ3JDMWxCLEtBQUt0TCxRQUFVeXdELEVBQVF6d0QsUUFDdkJzTCxLQUFLbWhELE1BQVFnRSxFQUFRQyxjQUNyQnBsRCxLQUFLcTlCLEtBQU84bkIsRUFBUTluQixNQXFIeEIsTUE3R0EsWUFlRSxRQUFTZ29CLEdBQW1CbmpCLEdBQzFCLE1BQU8sWUFDTCxNQUFPd1osR0FBUzNtRCxVQUFXbXRDLEdBQWEvaEMsTUFBT0gsS0FBS21sRCxRQUFTamxELFlBUGpFLElBQU0sR0FURm9sRCxJQUNGLGVBQ0EseUJBQ0EsZUFDQSxvQkFDQSxvQkFDQSxxQkFHUWp3RCxFQUFFLEVBQUc0bEMsRUFBTXFxQixFQUFjaHVELE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ3hELEdBQUk2c0MsR0FBYW9qQixFQUFjandELEVBQy9CNnZELEdBQVdud0QsVUFBV210QyxHQUFlbWpCLEVBQW1CbmpCLE9BYTVEZ2pCLEVBQVdud0QsVUFBVXd3RCwwQkFBNEIsV0FFL0MsR0FBSWxvQixHQUFPYSxFQUFTbCtCLEtBQUttbEQsUUFBUXp3RCxTQUc3Qm12RCxFQUFXN2pELEtBQUttbEQsUUFBUTluQixNQUFRQSxDQUNwQyxPQUFPd21CLElBQVl4bUIsRUFBSy9jLGFBQWV0Z0IsS0FBS21sRCxRQUFROW5CLEtBQUsvYyxhQUszRDRrQyxFQUFXbndELFVBQVVndEQsZ0JBQWtCLFdBQ3JDL2hELEtBQUttbEQsUUFBUXBELGdCQUFnQjVoRCxNQUFPSCxLQUFNRSxZQUc1Q2dsRCxFQUFXbndELFVBQVV5d0QsZUFBaUIsV0FDcEN4bEQsS0FBS3lsRCxlQUFnQixTQUFVLFVBR2pDUCxFQUFXbndELFVBQVUyd0QsYUFBZSxXQUNsQzFsRCxLQUFLeWxELGVBQWdCLE1BQU8sV0FROUJQLEVBQVdud0QsVUFBVTB3RCxlQUFpQixTQUFVRSxFQUFTdG9CLEdBQ3ZELEdBQUl1b0IsR0FBY0QsRUFBVXRvQixFQUN4QndvQixFQUFZLFFBQVV4b0IsQ0FJMUIsSUFGQXI5QixLQUFLK2hELGdCQUFpQjZELEVBQWFDLElBRTlCN2xELEtBQU00bEQsR0FBWCxDQUlBLEdBQUlFLEdBQWdCOWxELEtBQUsrbEQsa0JBQ3pCL2xELE1BQU00bEQsR0FBZ0JFLEdBQWlCQSxFQUFlRCxJQUVwRDdsRCxLQUFLbWxELFFBQVE5bkIsS0FBTSxRQUFVQSxLQUdqQzZuQixFQUFXbndELFVBQVVneEQsaUJBQW1CLFdBQ3RDLEdBQUlDLEdBQVlobUQsS0FBS21sRCxRQUFRQyxjQUFjLEVBQzNDLE9BQU9ZLElBQWFBLEVBQVV0eEQsU0FBV3dwQyxFQUFTOG5CLEVBQVV0eEQsVUFLOUR3d0QsRUFBV253RCxVQUFVOG1ELE9BQVMsV0FDNUI3N0MsS0FBS21sRCxRQUFRdEosT0FBTzE3QyxNQUFPSCxLQUFLbWxELFFBQVNqbEQsWUFHM0NnbEQsRUFBV253RCxVQUFVbXBDLFFBQVUsV0FDN0JsK0IsS0FBS21sRCxRQUFRam5CLFVBQ2JsK0IsS0FBS3E5QixLQUFPcjlCLEtBQUttbEQsUUFBUTluQixNQUszQjZuQixFQUFXZSxTQUVYZixFQUFXajhCLE9BQVMsU0FBVXZELEVBQVcvd0IsR0FFdkMsUUFBU3V4RCxLQUNQaEIsRUFBVy9rRCxNQUFPSCxLQUFNRSxXQWMxQixNQVhBZ21ELEdBQUtueEQsVUFBWSxHQUFJbXdELEdBR2hCdndELElBQ0h1eEQsRUFBS3Z4RCxRQUFVQSxHQUdqQnV4RCxFQUFLbnhELFVBQVUyd0IsVUFBWUEsRUFFM0J3L0IsRUFBV2UsTUFBT3ZnQyxHQUFjd2dDLEVBRXpCQSxHQUdGaEIsSUFZUCxTQUFVMWpELEVBQVFvbEIsR0FDbEI7QUFFdUIsa0JBQVhySyxTQUF5QkEsT0FBT0MsSUFFMUNELE9BQVEsbUJBQ0osb0JBQ0Esb0JBQ0Esd0JBRUZxSyxHQUMyQixnQkFBWmxLLFNBRWpCRCxPQUFPQyxRQUFVa0ssRUFDZjlKLFFBQVEsWUFDUkEsUUFBUSxZQUNSQSxRQUFRLG1CQUlWdGIsRUFBTzJrRCxRQUFVdi9CLEVBQ2ZwbEIsRUFBT2s2QyxTQUNQbDZDLEVBQU8wOEIsUUFDUDE4QixFQUFPdS9CLGVBSVZ2L0IsT0FBUSxTQUFrQms2QyxFQUFVeGQsRUFBU3JtQixHQU85QyxHQUFJc3VDLEdBQVV6SyxFQUFTenlCLE9BQU8sVUE4SjlCLE9BNUpBazlCLEdBQVFweEQsVUFBVTBzRCxhQUFlLFdBQy9CemhELEtBQUtrK0IsVUFDTGwrQixLQUFLK2hELGdCQUFpQixjQUFlLGNBQ3JDL2hELEtBQUsraEQsZ0JBQWlCLFNBQVUsY0FDaEMvaEQsS0FBS29tRCxnQkFHTCxJQUFJL3dELEdBQUkySyxLQUFLcW1ELElBRWIsS0FEQXJtRCxLQUFLc21ELFNBQ0VqeEQsS0FDTDJLLEtBQUtzbUQsTUFBTXpsRCxLQUFNLEVBR25CYixNQUFLdW1ELEtBQU8sR0FHZEosRUFBUXB4RCxVQUFVcXhELGVBQWlCLFdBR2pDLEdBRkFwbUQsS0FBS3dtRCxxQkFFQ3htRCxLQUFLeW1ELFlBQWMsQ0FDdkIsR0FBSVQsR0FBWWhtRCxLQUFLbWhELE1BQU0sR0FDdkJ1RixFQUFnQlYsR0FBYUEsRUFBVXR4RCxPQUUzQ3NMLE1BQUt5bUQsWUFBY0MsR0FBaUJ4b0IsRUFBU3dvQixHQUFnQjFsQyxZQUUzRGhoQixLQUFLMm1ELGVBR1QsR0FBSUYsR0FBY3ptRCxLQUFLeW1ELGFBQWV6bUQsS0FBSzRtRCxPQUd2Q0QsRUFBaUIzbUQsS0FBSzJtRCxlQUFpQjNtRCxLQUFLNG1ELE9BQzVDUCxFQUFPTSxFQUFpQkYsRUFFeEJJLEVBQVNKLEVBQWNFLEVBQWlCRixFQUV4Q0ssRUFBYUQsR0FBbUIsRUFBVEEsRUFBYSxRQUFVLE9BQ2xEUixHQUFPemtELEtBQU1rbEQsR0FBY1QsR0FDM0JybUQsS0FBS3FtRCxLQUFPemtELEtBQUt5RixJQUFLZy9DLEVBQU0sSUFHOUJGLEVBQVFweEQsVUFBVXl4RCxrQkFBb0IsV0FFcEMsR0FBSU8sR0FBWS9tRCxLQUFLckwsUUFBUXF5RCxXQUFhaG5ELEtBQUt0TCxRQUFROEQsV0FBYXdILEtBQUt0TCxRQUdyRTJvQyxFQUFPYSxFQUFTNm9CLEVBQ3BCL21ELE1BQUsybUQsZUFBaUJ0cEIsR0FBUUEsRUFBS3RjLFlBR3JDb2xDLEVBQVFweEQsVUFBVXN0RCx1QkFBeUIsU0FBVXZ1QixHQUNuREEsRUFBS29LLFNBRUwsSUFBSStvQixHQUFZbnpCLEVBQUt1SixLQUFLcmMsV0FBYWhoQixLQUFLeW1ELFlBQ3hDSyxFQUFhRyxHQUF5QixFQUFaQSxFQUFnQixRQUFVLE9BRXBEQyxFQUFVdGxELEtBQU1rbEQsR0FBY2h6QixFQUFLdUosS0FBS3JjLFdBQWFoaEIsS0FBS3ltRCxZQUM5RFMsR0FBVXRsRCxLQUFLb00sSUFBS2s1QyxFQUFTbG5ELEtBQUtxbUQsS0FnQmxDLEtBQU0sR0FkRmMsR0FBV25uRCxLQUFLb25ELGFBQWNGLEdBRTlCRyxFQUFXemxELEtBQUtvTSxJQUFJN04sTUFBT3lCLEtBQU11bEQsR0FDakNHLEVBQWdCenZDLEVBQU1uaEIsUUFBU3l3RCxFQUFVRSxHQUd6Q2g1QyxHQUNGek8sRUFBR0ksS0FBS3ltRCxZQUFjYSxFQUN0QmxwRCxFQUFHaXBELEdBSURFLEVBQVlGLEVBQVd2ekIsRUFBS3VKLEtBQUt4YyxZQUNqQzJtQyxFQUFVeG5ELEtBQUtxbUQsS0FBTyxFQUFJYyxFQUFTN3ZELE9BQzdCakMsRUFBSSxFQUFPbXlELEVBQUpueUQsRUFBYUEsSUFDNUIySyxLQUFLc21ELE1BQU9nQixFQUFnQmp5RCxHQUFNa3lELENBR3BDLE9BQU9sNUMsSUFPVDgzQyxFQUFRcHhELFVBQVVxeUQsYUFBZSxTQUFVRixHQUN6QyxHQUFlLEVBQVZBLEVBRUgsTUFBT2xuRCxNQUFLc21ELEtBT2QsS0FBTSxHQUpGYSxNQUVBTSxFQUFhem5ELEtBQUtxbUQsS0FBTyxFQUFJYSxFQUV2Qjd4RCxFQUFJLEVBQU9veUQsRUFBSnB5RCxFQUFnQkEsSUFBTSxDQUVyQyxHQUFJcXlELEdBQWExbkQsS0FBS3NtRCxNQUFNem9ELE1BQU94SSxFQUFHQSxFQUFJNnhELEVBRTFDQyxHQUFTOXhELEdBQUt1TSxLQUFLeUYsSUFBSWxILE1BQU95QixLQUFNOGxELEdBRXRDLE1BQU9QLElBR1RoQixFQUFRcHhELFVBQVVzdUQsYUFBZSxTQUFVcEMsR0FDekMsR0FBSTBHLEdBQVl6cEIsRUFBUytpQixHQUNyQjdoQyxFQUFTcGYsS0FBS3VqRCxrQkFBbUJ0QyxHQUVqQzJHLEVBQVM1bkQsS0FBS3JMLFFBQVFzb0QsYUFBZTc5QixFQUFPdG5CLEtBQU9zbkIsRUFBT3JuQixNQUMxRDh2RCxFQUFRRCxFQUFTRCxFQUFVM21DLFdBQzNCOG1DLEVBQVdsbUQsS0FBS3lrQyxNQUFPdWhCLEVBQVM1bkQsS0FBS3ltRCxZQUN6Q3FCLEdBQVdsbUQsS0FBS3lGLElBQUssRUFBR3lnRCxFQUN4QixJQUFJQyxHQUFVbm1ELEtBQUt5a0MsTUFBT3doQixFQUFRN25ELEtBQUt5bUQsWUFFdkNzQixJQUFXRixFQUFRN25ELEtBQUt5bUQsWUFBYyxFQUFJLEVBQzFDc0IsRUFBVW5tRCxLQUFLb00sSUFBS2hPLEtBQUtxbUQsS0FBTyxFQUFHMEIsRUFJbkMsS0FBTSxHQUZGQyxJQUFjaG9ELEtBQUtyTCxRQUFRdW9ELFlBQWM5OUIsRUFBT25uQixJQUFNbW5CLEVBQU9sbkIsUUFDL0R5dkQsRUFBVTltQyxZQUNGeHJCLEVBQUl5eUQsRUFBZUMsR0FBTDF5RCxFQUFjQSxJQUNwQzJLLEtBQUtzbUQsTUFBTWp4RCxHQUFLdU0sS0FBS3lGLElBQUsyZ0QsRUFBV2hvRCxLQUFLc21ELE1BQU1qeEQsS0FJcEQ4d0QsRUFBUXB4RCxVQUFVMHRELGtCQUFvQixXQUNwQ3ppRCxLQUFLdW1ELEtBQU8za0QsS0FBS3lGLElBQUlsSCxNQUFPeUIsS0FBTTVCLEtBQUtzbUQsTUFDdkMsSUFBSWpwQixJQUNGdjRCLE9BQVE5RSxLQUFLdW1ELEtBT2YsT0FKS3ZtRCxNQUFLckwsUUFBUXF5RCxhQUNoQjNwQixFQUFLdDRCLE1BQVEvRSxLQUFLaW9ELHlCQUdiNXFCLEdBR1Q4b0IsRUFBUXB4RCxVQUFVa3pELHNCQUF3QixXQUl4QyxJQUhBLEdBQUlDLEdBQWEsRUFFYjd5RCxFQUFJMkssS0FBS3FtRCxPQUNIaHhELEdBQ2UsSUFBbEIySyxLQUFLc21ELE1BQU1qeEQsSUFHaEI2eUQsR0FHRixRQUFTbG9ELEtBQUtxbUQsS0FBTzZCLEdBQWVsb0QsS0FBS3ltRCxZQUFjem1ELEtBQUs0bUQsUUFHOURULEVBQVFweEQsVUFBVTZ1RCxrQkFBb0IsV0FDcEMsR0FBSXVFLEdBQWdCbm9ELEtBQUsybUQsY0FFekIsT0FEQTNtRCxNQUFLd21ELG9CQUNFMkIsSUFBa0Jub0QsS0FBSzJtRCxnQkFHekJSLElBVVAsU0FBVTNrRCxFQUFRb2xCLEdBQ2xCLFlBRXNCLG1CQUFWckssU0FBd0JBLE9BQU9DLElBRXpDRCxPQUFRLG1DQUNKLGlCQUNBLG1CQUVGcUssR0FDMEIsZ0JBQVhsSyxTQUVqQkQsT0FBT0MsUUFBVWtLLEVBQ2Y5SixRQUFRLGtCQUNSQSxRQUFRLG1CQUlWOEosRUFDRXBsQixFQUFPZ2pELFFBQVFVLFdBQ2YxakQsRUFBTzJrRCxVQUlWM2tELE9BQVEsU0FBa0IwakQsRUFBWWlCLEdBQ3pDLFlBS0EsU0FBU2p4RCxHQUFRQyxFQUFHQyxHQUNsQixJQUFNLEdBQUkraUIsS0FBUS9pQixHQUNoQkQsRUFBR2dqQixHQUFTL2lCLEVBQUcraUIsRUFFakIsT0FBT2hqQixHQU1QLEdBQUlpekQsR0FBY2xELEVBQVdqOEIsT0FBTyxXQUdoQ3M2QixFQUFvQjZFLEVBQVlyekQsVUFBVXd1RCxrQkFDMUMxSCxFQUFTdU0sRUFBWXJ6RCxVQUFVOG1ELE9BQy9Ca0csRUFBa0JxRyxFQUFZcnpELFVBQVVndEQsZUFHNUM3c0QsR0FBUWt6RCxFQUFZcnpELFVBQVdveEQsRUFBUXB4RCxXQUd2Q3F6RCxFQUFZcnpELFVBQVV3dUQsa0JBQW9CQSxFQUMxQzZFLEVBQVlyekQsVUFBVThtRCxPQUFTQSxFQUMvQnVNLEVBQVlyekQsVUFBVWd0RCxnQkFBa0JBLENBRXhDLElBQUlxRSxHQUFpQmdDLEVBQVlyekQsVUFBVXF4RCxjQUMzQ2dDLEdBQVlyekQsVUFBVXF4RCxlQUFpQixXQUVyQ3BtRCxLQUFLbWhELE1BQVFuaEQsS0FBS21sRCxRQUFRQyxjQUMxQmdCLEVBQWVueEQsS0FBTStLLE1BSXZCLElBQUlxakQsR0FBZStFLEVBQVlyekQsVUFBVXN1RCxZQU96QyxPQU5BK0UsR0FBWXJ6RCxVQUFVc3VELGFBQWUsV0FDbkNyakQsS0FBS3JMLFFBQVFzb0QsYUFBZWo5QyxLQUFLbWxELFFBQVF4d0QsUUFBUXNvRCxhQUNqRGo5QyxLQUFLckwsUUFBUXVvRCxZQUFjbDlDLEtBQUttbEQsUUFBUXh3RCxRQUFRdW9ELFlBQ2hEbUcsRUFBYWxqRCxNQUFPSCxLQUFNRSxZQUdyQmtvRCxJQVFQLFNBQVU1bUQsRUFBUW9sQixHQUNsQixZQUVzQixtQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSxvQ0FDSixrQkFFRnFLLEdBQzBCLGdCQUFYbEssU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmOUosUUFBUSxtQkFJVjhKLEVBQ0VwbEIsRUFBT2dqRCxRQUFRVSxhQUlsQjFqRCxPQUFRLFNBQWtCMGpELEdBQzdCLFlBRUEsSUFBSW1ELEdBQVVuRCxFQUFXajhCLE9BQU8sVUFtQ2hDLE9BakNBby9CLEdBQVF0ekQsVUFBVTBzRCxhQUFlLFdBQy9CemhELEtBQUtKLEVBQUksRUFDVEksS0FBSzVCLEVBQUksRUFDVDRCLEtBQUt1bUQsS0FBTyxFQUNadm1ELEtBQUsraEQsZ0JBQWlCLFNBQVUsZUFHbENzRyxFQUFRdHpELFVBQVVzdEQsdUJBQXlCLFNBQVV2dUIsR0FDbkRBLEVBQUtvSyxTQUVMLElBQUlvcUIsR0FBWXgwQixFQUFLdUosS0FBS3JjLFdBQWFoaEIsS0FBSzRtRCxPQUV4Q0QsRUFBaUIzbUQsS0FBS21sRCxRQUFROW5CLEtBQUt0YyxXQUFhL2dCLEtBQUs0bUQsTUFDekMsS0FBWDVtRCxLQUFLSixHQUFXMG9ELEVBQVl0b0QsS0FBS0osRUFBSSttRCxJQUN4QzNtRCxLQUFLSixFQUFJLEVBQ1RJLEtBQUs1QixFQUFJNEIsS0FBS3VtRCxLQUdoQixJQUFJbDRDLElBQ0Z6TyxFQUFHSSxLQUFLSixFQUNSeEIsRUFBRzRCLEtBQUs1QixFQU1WLE9BSEE0QixNQUFLdW1ELEtBQU8za0QsS0FBS3lGLElBQUtySCxLQUFLdW1ELEtBQU12bUQsS0FBSzVCLEVBQUkwMUIsRUFBS3VKLEtBQUt4YyxhQUNwRDdnQixLQUFLSixHQUFLMG9ELEVBRUhqNkMsR0FHVGc2QyxFQUFRdHpELFVBQVUwdEQsa0JBQW9CLFdBQ3BDLE9BQVMzOUMsT0FBUTlFLEtBQUt1bUQsT0FHakI4QixJQVFMLFNBQVU3bUQsRUFBUW9sQixHQUNsQixZQUVzQixtQkFBVnJLLFNBQXdCQSxPQUFPQyxJQUV6Q0QsT0FBUSxvQ0FDSixrQkFFRnFLLEdBQzBCLGdCQUFYbEssU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmOUosUUFBUSxtQkFJVjhKLEVBQ0VwbEIsRUFBT2dqRCxRQUFRVSxhQUlsQjFqRCxPQUFRLFNBQWtCMGpELEdBQzdCLFlBRUEsSUFBSXFELEdBQVdyRCxFQUFXajhCLE9BQVEsWUFDaEN1L0Isb0JBQXFCLEdBb0J2QixPQWpCQUQsR0FBU3h6RCxVQUFVMHNELGFBQWUsV0FDaEN6aEQsS0FBSzVCLEVBQUksR0FHWG1xRCxFQUFTeHpELFVBQVVzdEQsdUJBQXlCLFNBQVV2dUIsR0FDcERBLEVBQUtvSyxTQUNMLElBQUl0K0IsSUFBTUksS0FBS21sRCxRQUFROW5CLEtBQUt0YyxXQUFhK1MsRUFBS3VKLEtBQUtyYyxZQUNqRGhoQixLQUFLckwsUUFBUTZ6RCxvQkFDWHBxRCxFQUFJNEIsS0FBSzVCLENBRWIsT0FEQTRCLE1BQUs1QixHQUFLMDFCLEVBQUt1SixLQUFLeGMsYUFDWGpoQixFQUFHQSxFQUFHeEIsRUFBR0EsSUFHcEJtcUQsRUFBU3h6RCxVQUFVMHRELGtCQUFvQixXQUNyQyxPQUFTMzlDLE9BQVE5RSxLQUFLNUIsSUFHakJtcUQsSUFjTCxTQUFVL21ELEVBQVFvbEIsR0FDbEIsWUFHc0IsbUJBQVZySyxTQUF3QkEsT0FBT0MsSUFFekNELFFBQ0ksb0JBQ0Esb0JBQ0Esb0NBQ0EsdUJBQ0Esa0JBQ0EseUJBRUEsa0NBQ0EsbUNBQ0Esb0NBRUYsU0FBVW0vQixFQUFVeGQsRUFBU3lDLEVBQWlCOW9CLEVBQU84akMsRUFBTXVKLEdBQ3pELE1BQU90K0IsR0FBU3BsQixFQUFRazZDLEVBQVV4ZCxFQUFTeUMsRUFBaUI5b0IsRUFBTzhqQyxFQUFNdUosS0FFakQsZ0JBQVh4b0MsU0FFakJELE9BQU9DLFFBQVVrSyxFQUNmcGxCLEVBQ0FzYixRQUFRLFlBQ1JBLFFBQVEsWUFDUkEsUUFBUSw2QkFDUkEsUUFBUSxrQkFDUkEsUUFBUSxVQUNSQSxRQUFRLGlCQUVSQSxRQUFRLDBCQUNSQSxRQUFRLDJCQUNSQSxRQUFRLDRCQUlWdGIsRUFBT2dqRCxRQUFVNTlCLEVBQ2ZwbEIsRUFDQUEsRUFBT2s2QyxTQUNQbDZDLEVBQU8wOEIsUUFDUDE4QixFQUFPbS9CLGdCQUNQbi9CLEVBQU91L0IsYUFDUHYvQixFQUFPZ2pELFFBQVE3SSxLQUNmbjZDLEVBQU9nakQsUUFBUVUsYUFJbEIxakQsT0FBUSxTQUFrQkEsRUFBUWs2QyxFQUFVeGQsRUFBU3lDLEVBQWlCOW9CLEVBQ3ZFOGpDLEVBQU11SixHQW9YTixRQUFTdUQsR0FBZUMsRUFBU0MsR0FDL0IsTUFBTyxVQUFpQkMsRUFBT0MsR0FFN0IsSUFBTSxHQUFJeHpELEdBQUksRUFBRzRsQyxFQUFNeXRCLEVBQVFweEQsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDcEQsR0FBSXl6RCxHQUFTSixFQUFRcnpELEdBQ2pCRixFQUFJeXpELEVBQU1sRSxTQUFVb0UsR0FDcEIxekQsRUFBSXl6RCxFQUFNbkUsU0FBVW9FLEVBQ3hCLElBQUszekQsRUFBSUMsR0FBU0EsRUFBSkQsRUFBUSxDQUVwQixHQUFJNHpELEdBQW9DaHlELFNBQXRCNHhELEVBQVNHLEdBQXlCSCxFQUFTRyxHQUFXSCxFQUNwRTk4QyxFQUFZazlDLEVBQWMsRUFBSSxFQUNsQyxRQUFTNXpELEVBQUlDLEVBQUksRUFBSSxJQUFPeVcsR0FHaEMsTUFBTyxJQTVYYixHQUFJc1IsR0FBUzNiLEVBQU8yYixPQUloQjJNLEVBQU9oVCxPQUFPL2hCLFVBQVUrMEIsS0FDMUIsU0FBVXRQLEdBQ1IsTUFBT0EsR0FBSXNQLFFBRWIsU0FBVXRQLEdBQ1IsTUFBT0EsR0FBSTVqQixRQUFTLGFBQWMsS0FHbEMrbEMsRUFBVWpuQyxTQUFTMkksZ0JBRW5CMnFELEVBQVVyc0IsRUFBUThFLFlBQ3BCLFNBQVV2RyxHQUNSLE1BQU9BLEdBQUt1RyxhQUVkLFNBQVV2RyxHQUNSLE1BQU9BLEdBQUsrdEIsV0FNVnpFLEVBQVU5SSxFQUFTenlCLE9BQVEsV0FDN0JpZ0MsV0FBWSxVQUNaQyxtQkFBbUIsRUFDbkJDLGVBQWUsR0FHakI1RSxHQUFRN0ksS0FBT0EsRUFDZjZJLEVBQVFVLFdBQWFBLEVBRXJCVixFQUFRenZELFVBQVU2eEMsUUFBVSxXQUMxQjVtQyxLQUFLeWtELFNBQVcsRUFFaEJ6a0QsS0FBSytrRCxZQUNML2tELEtBQUtxcEQsY0FFTDNOLEVBQVMzbUQsVUFBVTZ4QyxRQUFRM3hDLEtBQU0rSyxNQUdqQ0EsS0FBS2ltRCxTQUVMam1ELEtBQUtvbEQsY0FBZ0JwbEQsS0FBS21oRCxNQUUxQm5oRCxLQUFLc3BELGFBQWdCLGlCQUVyQixLQUFNLEdBQUl4eUQsS0FBUW91RCxHQUFXZSxNQUMzQmptRCxLQUFLdXBELGdCQUFpQnp5RCxJQUkxQjB0RCxFQUFRenZELFVBQVVnc0QsWUFBYyxXQUU5Qi9nRCxLQUFLeWtELFNBQVcsRUFFaEIvSSxFQUFTM21ELFVBQVVnc0QsWUFBWTlyRCxLQUFNK0ssT0FHdkN3a0QsRUFBUXp2RCxVQUFVcXNELFNBQVcsV0FHM0IsSUFBTSxHQUZGRCxHQUFRekYsRUFBUzNtRCxVQUFVcXNELFNBQVNqaEQsTUFBT0gsS0FBTUUsV0FFM0M3SyxFQUFFLEVBQUc0bEMsRUFBTWttQixFQUFNN3BELE9BQVkyakMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQ2hELEdBQUl5K0IsR0FBT3F0QixFQUFNOXJELEVBQ2pCeStCLEdBQUt4MEIsR0FBS1UsS0FBS3lrRCxXQUdqQixNQURBemtELE1BQUt3cEQscUJBQXNCckksR0FDcEJBLEdBTVRxRCxFQUFRenZELFVBQVV3MEQsZ0JBQWtCLFNBQVV6eUQsR0FDNUMsR0FBSW92RCxHQUFPaEIsRUFBV2UsTUFBT252RCxHQUd6QjJ5RCxFQUFjenBELEtBQUtyTCxRQUFTbUMsTUFDaENrSixNQUFLckwsUUFBU21DLEdBQVNvdkQsRUFBS3Z4RCxRQUMxQmtqQixFQUFNM2lCLE9BQVFneEQsRUFBS3Z4RCxRQUFTODBELEdBQWdCQSxFQUU5Q3pwRCxLQUFLaW1ELE1BQU9udkQsR0FBUyxHQUFJb3ZELEdBQU1sbUQsT0FJakN3a0QsRUFBUXp2RCxVQUFVOG1ELE9BQVMsV0FFekIsT0FBTTc3QyxLQUFLNmhELGlCQUFtQjdoRCxLQUFLckwsUUFBUWlzRCxpQkFDekM1Z0QsTUFBSzBwRCxjQUdQMXBELE1BQUsycEQsV0FJUG5GLEVBQVF6dkQsVUFBVTQwRCxRQUFVLFdBRTFCLEdBQUloSSxHQUFZM2hELEtBQUs0cEQsZUFFckI1cEQsTUFBS3loRCxlQUNMemhELEtBQUswaEQsZ0JBQ0wxaEQsS0FBSzhoRCxZQUFhOWhELEtBQUtvbEQsY0FBZXpELEdBR3RDM2hELEtBQUs2aEQsaUJBQWtCLEdBSXpCMkMsRUFBUXp2RCxVQUFVMjBELFFBQVUsU0FBVTV1QixHQVdwQyxRQUFTK3VCLEtBQ1B6bkIsRUFBTThkLE9BQVE0SixFQUFTQyxZQUN2QjNuQixFQUFNOStCLEtBQU13bUQsRUFBU0UsVUFYdkJocUQsS0FBSzBDLE9BQVFvNEIsR0FDYjk2QixLQUFLNHBELGVBSUwsSUFBSUUsR0FBVzlwRCxLQUFLaXFELFFBQVNqcUQsS0FBS21oRCxNQUNsQ25oRCxNQUFLb2xELGNBQWdCMEUsRUFBU2xwQixPQUU5QixJQUFJd0IsR0FBUXBpQyxJQU1aQSxNQUFLa3FELHVCQUVBbHFELEtBQUttcUQsV0FDUm5xRCxLQUFLb3FELGNBQWVQLEdBRXBCQSxJQUdGN3BELEtBQUtxcUQsUUFDTHJxRCxLQUFLMnBELFdBR1BuRixFQUFRenZELFVBQVVxbUMsTUFBUW9wQixFQUFRenZELFVBQVUyMEQsUUFLNUNsRixFQUFRenZELFVBQVU2MEQsY0FBZ0IsV0FDaEMsR0FBSWpJLEdBQTZDNXFELFNBQWpDaUosS0FBS3JMLFFBQVFpdEQsZ0JBQzNCNWhELEtBQUtyTCxRQUFRaXRELGlCQUFtQjVoRCxLQUFLNmhELGVBRXZDLE9BREE3aEQsTUFBS21xRCxXQUFheEksRUFDWEEsR0FLVDZDLEVBQVF6dkQsVUFBVW0xRCxxQkFBdUIsV0FJdkMsUUFBU0ksS0FDRkMsR0FBb0JDLEdBQWtCQyxHQUN6Q3JvQixFQUFNNU4sY0FBZSxrQkFBbUIsTUFBUTROLEVBQU1nakIsZ0JBSjFELEdBQUltRixHQUFrQkMsRUFBZ0JDLEVBQ2xDcm9CLEVBQVFwaUMsSUFNWkEsTUFBS3NiLEtBQU0saUJBQWtCLFdBQzNCaXZDLEdBQW1CLEVBQ25CRCxNQUVGdHFELEtBQUtzYixLQUFNLGVBQWdCLFdBQ3pCa3ZDLEdBQWlCLEVBQ2pCRixNQUVGdHFELEtBQUtzYixLQUFNLGlCQUFrQixXQUMzQm12QyxHQUFtQixFQUNuQkgsT0FNSjlGLEVBQVF6dkQsVUFBVWsxRCxRQUFVLFNBQVU5SSxHQUNwQyxHQUFJbHdCLEdBQVNqeEIsS0FBS3JMLFFBQVFzOEIsTUFDMUJBLEdBQVNBLEdBQVUsR0FRbkIsS0FBTSxHQVBGMlAsTUFDQThwQixLQUNBQyxLQUVBMXpELEVBQU8rSSxLQUFLNHFELGVBQWdCMzVCLEdBR3RCNTdCLEVBQUUsRUFBRzRsQyxFQUFNa21CLEVBQU03cEQsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQU0sQ0FDaEQsR0FBSXkrQixHQUFPcXRCLEVBQU05ckQsRUFDakIsS0FBS3krQixFQUFLcXVCLFVBQVYsQ0FJQSxHQUFJMEksR0FBWTV6RCxFQUFNNjhCLEVBR2pCKzJCLElBQ0hqcUIsRUFBUS8vQixLQUFNaXpCLEdBR1grMkIsR0FBYS8yQixFQUFLK2pCLFNBQ3JCNlMsRUFBYzdwRCxLQUFNaXpCLEdBQ1QrMkIsR0FBYy8yQixFQUFLK2pCLFVBQzlCOFMsRUFBaUI5cEQsS0FBTWl6QixJQUszQixPQUNFOE0sUUFBU0EsRUFDVG1wQixXQUFZVyxFQUNaVixTQUFVVyxJQUtkbkcsRUFBUXp2RCxVQUFVNjFELGVBQWlCLFNBQVUzNUIsR0FDM0MsTUFBSzlULElBQVVuZCxLQUFLckwsUUFBUXcwRCxrQkFFbkIsU0FBVXIxQixHQUNmLE1BQU8zVyxHQUFRMlcsRUFBS3AvQixTQUFVbzJELEdBQUk3NUIsSUFHaEIsa0JBQVZBLEdBRUgsU0FBVTZDLEdBQ2YsTUFBTzdDLEdBQVE2QyxFQUFLcC9CLFVBSWpCLFNBQVVvL0IsR0FDZixNQUFPNk0sR0FBaUI3TSxFQUFLcC9CLFFBQVN1OEIsS0FVMUN1ekIsRUFBUXp2RCxVQUFVNHZELGVBQWlCLFNBQVVsa0IsR0FFM0MsR0FBSTBnQixFQUNDMWdCLElBQ0hBLEVBQVE1b0IsRUFBTXFwQixVQUFXVCxHQUN6QjBnQixFQUFRbmhELEtBQUtta0QsU0FBVTFqQixJQUd2QjBnQixFQUFRbmhELEtBQUttaEQsTUFHZm5oRCxLQUFLcXBELGNBQ0xycEQsS0FBS3dwRCxxQkFBc0JySSxJQUc3QnFELEVBQVF6dkQsVUFBVXMwRCxZQUFjLFdBQzlCLEdBQUl4RSxHQUFjN2tELEtBQUtyTCxRQUFRa3dELFdBQy9CLEtBQU0sR0FBSXhtQyxLQUFPd21DLEdBQWMsQ0FDN0IsR0FBSUcsR0FBU0gsRUFBYXhtQyxFQUMxQnJlLE1BQUsra0QsU0FBVTFtQyxHQUFRMHNDLEVBQWEvRixLQVF4Q1IsRUFBUXp2RCxVQUFVeTBELHFCQUF1QixTQUFVckksR0FJakQsSUFBTSxHQUZGbG1CLEdBQU1rbUIsR0FBU0EsRUFBTTdwRCxPQUVmakMsRUFBRSxFQUFHNGxDLEdBQVdBLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNuQyxHQUFJeStCLEdBQU9xdEIsRUFBTTlyRCxFQUNqQnkrQixHQUFLNndCLGtCQVFULElBQUlvRyxHQUFjLFdBTWhCLFFBQVNBLEdBQWEvRixHQUVwQixHQUFzQixnQkFBVkEsR0FDVixNQUFPQSxFQUdULElBQUl6bEMsR0FBT3VLLEVBQU1rN0IsR0FBU2huRCxNQUFNLEtBQzVCd2lDLEVBQVFqaEIsRUFBSyxHQUVieXJDLEVBQVl4cUIsRUFBTU4sTUFBTyxjQUN6QnBtQixFQUFPa3hDLEdBQWFBLEVBQVUsR0FDOUJDLEVBQVdDLEVBQWdCcHhDLEVBQU0wbUIsR0FFakMycUIsRUFBUzNHLEVBQVE0RyxnQkFBaUI3ckMsRUFBSyxHQVUzQyxPQVJBeWxDLEdBQVNtRyxFQUFTLFNBQVVqd0IsR0FDMUIsTUFBT0EsSUFBUWl3QixFQUFRRixFQUFVL3ZCLEtBR25DLFNBQVVBLEdBQ1IsTUFBT0EsSUFBUSt2QixFQUFVL3ZCLElBTzdCLFFBQVNnd0IsR0FBZ0JweEMsRUFBTTBtQixHQUM3QixHQUFJeXFCLEVBYUosT0FWRUEsR0FER254QyxFQUNRLFNBQVVvaEIsR0FDbkIsTUFBT0EsR0FBS3JoQyxhQUFjaWdCLElBSWpCLFNBQVVvaEIsR0FDbkIsR0FBSXJTLEdBQVFxUyxFQUFLaUQsY0FBZXFDLEVBQ2hDLE9BQU8zWCxJQUFTbWdDLEVBQVNuZ0MsSUFNL0IsTUFBT2tpQyxLQUlUdkcsR0FBUTRHLGlCQUNOL3JELFNBQVksU0FBVXdhLEdBQ3BCLE1BQU94YSxVQUFVd2EsRUFBSyxLQUV4QmxqQixXQUFjLFNBQVVrakIsR0FDdEIsTUFBT2xqQixZQUFZa2pCLEtBT3ZCMnFDLEVBQVF6dkQsVUFBVXMxRCxNQUFRLFdBQ3hCLEdBQUlnQixHQUFZcnJELEtBQUtyTCxRQUFRbTBELE1BQzdCLElBQU11QyxFQUFOLENBSUEsR0FBSTNDLE1BQWF0b0QsT0FBT0QsTUFBT2tyRCxFQUFXcnJELEtBQUtzcEQsYUFFM0NnQyxFQUFhN0MsRUFBZUMsRUFBUzFvRCxLQUFLckwsUUFBUXkwRCxjQUN0RHBwRCxNQUFLb2xELGNBQWN0Z0MsS0FBTXdtQyxHQUVwQkQsR0FBYXJyRCxLQUFLc3BELFlBQVksSUFFakN0cEQsS0FBS3NwRCxZQUFZaUMsUUFBU0YsS0EwQjlCN0csRUFBUXp2RCxVQUFVeTJELE1BQVEsV0FDeEIsR0FBSXRDLEdBQWFscEQsS0FBS3JMLFFBQVF1MEQsV0FDMUJ1QyxFQUFPenJELEtBQUtpbUQsTUFBT2lELEVBQ3ZCLEtBQU11QyxFQUVKLEtBQU0sSUFBSXJ0QyxPQUFPLG1CQUFxQjhxQyxFQUt4QyxPQURBdUMsR0FBSzkyRCxRQUFVcUwsS0FBS3JMLFFBQVN1MEQsR0FDdEJ1QyxHQUdUakgsRUFBUXp2RCxVQUFVMHNELGFBQWUsV0FFL0IvRixFQUFTM21ELFVBQVUwc0QsYUFBYXhzRCxLQUFNK0ssTUFDdENBLEtBQUt3ckQsUUFBUS9KLGdCQUdmK0MsRUFBUXp2RCxVQUFVc3RELHVCQUF5QixTQUFVdnVCLEdBQ25ELE1BQU85ekIsTUFBS3dyRCxRQUFRbkosdUJBQXdCdnVCLElBRzlDMHdCLEVBQVF6dkQsVUFBVXN1RCxhQUFlLFNBQVVwQyxHQUN6Q2poRCxLQUFLd3JELFFBQVFuSSxhQUFjcEMsSUFHN0J1RCxFQUFRenZELFVBQVUwdEQsa0JBQW9CLFdBQ3BDLE1BQU96aUQsTUFBS3dyRCxRQUFRL0kscUJBR3RCK0IsRUFBUXp2RCxVQUFVNnVELGtCQUFvQixXQUNwQyxNQUFPNWpELE1BQUt3ckQsUUFBUTVILHFCQU10QlksRUFBUXp2RCxVQUFVZ3ZELFNBQVcsU0FBVXRqQixHQUNyQyxHQUFJMGdCLEdBQVFuaEQsS0FBSzhqRCxTQUFVcmpCLEVBQzNCLElBQU0wZ0IsRUFBTTdwRCxPQUFaLENBSUEsR0FBSTh0RCxHQUFnQnBsRCxLQUFLMHJELG1CQUFvQnZLLEVBRTdDbmhELE1BQUtvbEQsY0FBZ0JwbEQsS0FBS29sRCxjQUFjaGxELE9BQVFnbEQsS0FJbERaLEVBQVF6dkQsVUFBVWl2RCxVQUFZLFNBQVV2akIsR0FDdEMsR0FBSTBnQixHQUFRbmhELEtBQUtvaEQsU0FBVTNnQixFQUMzQixJQUFNMGdCLEVBQU03cEQsT0FBWixDQUlBMEksS0FBS3loRCxlQUNMemhELEtBQUswaEQsZUFFTCxJQUFJMEQsR0FBZ0JwbEQsS0FBSzByRCxtQkFBb0J2SyxFQUU3Q25oRCxNQUFLOGhELFlBQWE5aEQsS0FBS29sRCxlQUV2QnBsRCxLQUFLb2xELGNBQWdCQSxFQUFjaGxELE9BQVFKLEtBQUtvbEQsZUFDaERwbEQsS0FBS21oRCxNQUFRQSxFQUFNL2dELE9BQVFKLEtBQUttaEQsU0FHbENxRCxFQUFRenZELFVBQVUyMkQsbUJBQXFCLFNBQVV2SyxHQUMvQyxHQUFJMkksR0FBVzlwRCxLQUFLaXFELFFBQVM5SSxFQU03QixPQUxBbmhELE1BQUtzRCxLQUFNd21ELEVBQVNFLFVBRXBCaHFELEtBQUtrZ0QsT0FBUTRKLEVBQVNscEIsU0FFdEI1Z0MsS0FBSzhoRCxZQUFhZ0ksRUFBU2xwQixTQUFTLEdBQzdCa3BCLEVBQVNscEIsU0FPbEI0akIsRUFBUXp2RCxVQUFVd2pELE9BQVMsU0FBVTlYLEdBQ25DLEdBQUkwZ0IsR0FBUW5oRCxLQUFLOGpELFNBQVVyakIsRUFDM0IsSUFBTTBnQixFQUFNN3BELE9BQVosQ0FJQSxHQUFJakMsR0FBR3krQixFQUNIbUgsRUFBTWttQixFQUFNN3BELE1BQ2hCLEtBQU1qQyxFQUFFLEVBQU80bEMsRUFBSjVsQyxFQUFTQSxJQUNsQnkrQixFQUFPcXRCLEVBQU05ckQsR0FDYjJLLEtBQUt0TCxRQUFRNkssWUFBYXUwQixFQUFLcC9CLFFBR2pDLElBQUlpM0QsR0FBc0IzckQsS0FBS2lxRCxRQUFTOUksR0FBUXZnQixPQUVoRCxLQUFNdnJDLEVBQUUsRUFBTzRsQyxFQUFKNWxDLEVBQVNBLElBQ2xCOHJELEVBQU05ckQsR0FBR3VzRCxpQkFBa0IsQ0FJN0IsS0FGQTVoRCxLQUFLMHBELFVBRUNyMEQsRUFBRSxFQUFPNGxDLEVBQUo1bEMsRUFBU0EsVUFDWDhyRCxHQUFNOXJELEdBQUd1c0QsZUFFbEI1aEQsTUFBS2tnRCxPQUFReUwsSUFHZixJQUFJQyxHQUFVcEgsRUFBUXp2RCxVQUFVOGdCLE1BaUVoQyxPQWhFQTJ1QyxHQUFRenZELFVBQVU4Z0IsT0FBUyxTQUFVNHFCLEdBQ25DQSxFQUFRNW9CLEVBQU1xcEIsVUFBV1QsRUFDekIsSUFBSTRqQixHQUFjcmtELEtBQUtta0QsU0FBVTFqQixFQUVqQ21yQixHQUFRMzJELEtBQU0rSyxLQUFNeWdDLEVBRXBCLElBQUl4RixHQUFNb3BCLEdBQWVBLEVBQVkvc0QsTUFDckMsSUFBTTJqQyxFQUlOLElBQU0sR0FBSTVsQyxHQUFFLEVBQU80bEMsRUFBSjVsQyxFQUFTQSxJQUFNLENBQzVCLEdBQUl5K0IsR0FBT3V3QixFQUFZaHZELEVBRXZCd2lCLEdBQU11cEIsV0FBWXBoQyxLQUFLb2xELGNBQWV0eEIsS0FJMUMwd0IsRUFBUXp2RCxVQUFVODJELFFBQVUsV0FFMUIsSUFBTSxHQUFJeDJELEdBQUUsRUFBRzRsQyxFQUFNajdCLEtBQUttaEQsTUFBTTdwRCxPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFBTSxDQUNyRCxHQUFJeStCLEdBQU85ekIsS0FBS21oRCxNQUFNOXJELEVBQ3RCeStCLEdBQUs0d0IsU0FBU0UsT0FBU2hqRCxLQUFLZ2pELFNBRTlCNWtELEtBQUtyTCxRQUFRbTBELE9BQVMsU0FDdEI5b0QsS0FBS3FxRCxRQUNMcnFELEtBQUsycEQsV0FVUG5GLEVBQVF6dkQsVUFBVXExRCxjQUFnQixTQUFVMXNDLEdBRTFDLEdBQUl3aEMsR0FBcUJsL0MsS0FBS3JMLFFBQVF1cUQsa0JBRXRDbC9DLE1BQUtyTCxRQUFRdXFELG1CQUFxQixDQUVsQyxJQUFJN29DLEdBQWNxSCxFQUFHem9CLEtBQU0rSyxLQUczQixPQURBQSxNQUFLckwsUUFBUXVxRCxtQkFBcUJBLEVBQzNCN29DLEdBU1RtdUMsRUFBUXp2RCxVQUFVKzJELHdCQUEwQixXQUUxQyxJQUFNLEdBREZyckIsTUFDTXByQyxFQUFFLEVBQUc0bEMsRUFBTWo3QixLQUFLb2xELGNBQWM5dEQsT0FBWTJqQyxFQUFKNWxDLEVBQVNBLElBQ3ZEb3JDLEVBQU01L0IsS0FBTWIsS0FBS29sRCxjQUFjL3ZELEdBQUdYLFFBRXBDLE9BQU8rckMsSUFLRitqQixJQVFQLFNBQVV4c0MsRUFBR3RpQixFQUFVOEwsR0ErQnJCLFFBQVN1cUQsR0FBT3IzRCxFQUFTQyxHQUNyQnFMLEtBQUt0TCxRQUFVQSxFQU1mc0wsS0FBS3VrRCxTQUFXdnNDLEVBQUU5aUIsVUFBVzZFLEVBQVVwRixHQUV2Q3FMLEtBQUtnc0QsVUFBWWp5RCxFQUNqQmlHLEtBQUtpc0QsTUFBUUMsRUFFYmxzRCxLQUFLMEQsT0ExQ1QsR0FFSTNKLElBQ0lveUQsTUFBTyxPQUNQQyxXQUFXLEVBQ1hwcEQsU0FBVSxJQUNWcXBELFdBQVksUUFDWkMsWUFBYSxRQUNiQyxhQUFjLFVBQ2RDLGFBQWMsVUFDZEMsVUFBVyxPQUNYQyxTQUFVLEdBQ1ZDLFVBQVcsSUFDWEMsY0FBYyxFQUNkQyxrQkFBa0IsRUFDbEJDLG1CQUFtQixFQUNuQkMsY0FBYyxFQUNkQyxXQUFXLEVBQ1hDLGVBQWUsRUFDZnI1QyxjQUFjLEVBQ3ZCczVDLE1BQU8sR0FDRXhwRCxLQUFNLGFBQ055cEQsV0FBWSxhQUNaQyxZQUFhLGFBQ2JDLFVBQVcsYUFDWEMsV0FBWSxjQUVoQnBCLEVBQWEsV0FDYnp5RCxFQUFTLFVBaUJic3lELEdBQU9oM0QsVUFBVTJPLEtBQU8sV0FDcEIsR0FHSTZwRCxHQUNBQyxFQUpBQyxFQUFRenRELEtBQ1IwdEQsRUFBTzExQyxFQUFFaFksS0FBS3RMLFNBQ2Q2dkQsRUFBV3ZrRCxLQUFLdWtELFFBb0QxQixJQS9DVUEsRUFBUzZILFdBQ1RxQixFQUFNRSxVQUFZRCxFQUFLRSxRQUV2QkgsRUFBTUUsVUFBVUUsV0FBVyxNQUMzQkosRUFBTUUsVUFBVWgwQyxLQUFLLEtBQUtGLEtBQUssU0FBVXBrQixFQUFHaUksR0FDeEMwYSxFQUFFMWEsR0FBR3V3RCxXQUFXLFVBR3BCSixFQUFNRSxVQUFZRCxFQUdsQkQsRUFBTUUsVUFBVUUsV0FBVyxNQUMzQkosRUFBTUUsVUFBVWgwQyxLQUFLLEtBQUtGLEtBQUssU0FBVXBrQixFQUFHaUksR0FDeEMwYSxFQUFFMWEsR0FBR3V3RCxXQUFXLFNBS3BCdEosRUFBUzBJLGdCQUNUUSxFQUFNRSxVQUFVRSxXQUFXLFNBQzNCSixFQUFNRSxVQUFVaDBDLEtBQUssS0FBS0YsS0FBSyxTQUFVcGtCLEVBQUdpSSxHQUN4QzBhLEVBQUUxYSxHQUFHdXdELFdBQVcsWUFLcEJ0SixFQUFTM3dDLGVBQ1Q2NUMsRUFBTUUsVUFBVUUsV0FBVyxTQUMzQkosRUFBTUUsVUFBVWgwQyxLQUFLLEtBQUtGLEtBQUssU0FBVXBrQixFQUFHaUksR0FDeEMwYSxFQUFFMWEsR0FBR3V3RCxXQUFXLFlBS3hCTixFQUFZOXpELEVBQVMsUUFFRSxLQUFuQjhxRCxFQUFTNEgsUUFDVG9CLEdBQWEsSUFBTTl6RCxFQUFTLFlBR04sS0FBdEI4cUQsRUFBU29JLFlBQ1RwSSxFQUFTb0ksVUFBWSxjQUl6QmMsRUFBTUUsVUFBVTd6QyxLQUFLLFFBQVNyZ0IsRUFBUyxRQUN2Qyt6RCxFQUFVeDFDLEVBQUUsZUFBaUJ2ZSxFQUFTLGlCQUNyQixLQUFuQjhxRCxFQUFTMkksTUFBYyxDQUMxQixHQUFJQSxHQUFRbDFDLEVBQUUsZUFBaUJ2ZSxFQUFTLFdBQVc4cUQsRUFBUzJJLE1BQU0sU0FDbEVsMUMsR0FBRXcxQyxHQUFTbjdDLE9BQU82NkMsR0FFYk8sRUFBTUssSUFBTTkxQyxHQUNQLElBQU11c0MsRUFBU29JLFVBQVksNkNBQStDbHpELEVBQVMsUUFBVUEsRUFBUyxlQUNuRyxnQkFBa0JBLEVBQVMsYUFBZThxRCxFQUFTNEgsTUFBUSxVQUMzRCxnQkFBa0JvQixFQUFZLEtBQzFCLGdCQUFrQjl6RCxFQUFTLHFCQUMzQixnQkFBa0JBLEVBQVMscUJBQzNCLGdCQUFrQkEsRUFBUyxxQkFDL0IsVUFDSixLQUFPOHFELEVBQVNvSSxVQUFZLEtBQzFCNXVELEtBQUssS0FFWGlhLEVBQUV3MUMsR0FBU243QyxPQUFPbzdDLEVBQU1LLEtBQ0MsS0FBdEJ2SixFQUFTbUksU0FDUjEwQyxFQUFFdXNDLEVBQVNtSSxVQUFVcjZDLE9BQU9tN0MsR0FFNUJ4MUMsRUFBRXVzQyxFQUFTa0ksV0FBVzVULFFBQVEyVSxHQUVsQ0EsRUFBUW43QyxPQUFPbzdDLEVBQU1FLFVBR3JCLElBQUl4TSxHQUFRc00sRUFBTUUsVUFBVWgwQyxLQUFLLEtBQ2pDM0IsR0FBRW1wQyxHQUFPMW5DLEtBQUssV0FDVixHQUFJcWEsR0FBTzliLEVBQUVoWSxNQUNUbTBCLElBS0osSUFKQUEsRUFBSzd1QixTQUFXd3VCLEVBQUt4dUIsU0FBUyxNQUFNd1UsS0FBSyxPQUFRLFFBQ2pEZ2EsRUFBS0ssS0FBSyxPQUFRQSxHQUdkQSxFQUFLN3VCLFNBQVNoTyxPQUFTLEVBQUcsQ0FLMUIsR0FBSW5DLEdBQUkyK0IsRUFBS2k2QixXQUNUQyxHQUFpQixFQUNqQkMsSUFFSmoyQyxHQUFFN2lCLEdBQUdza0IsS0FBSyxXQUNOLE1BQUt6QixHQUFFaFksTUFBTThxRCxHQUFHLE9BR0wsR0FGUG1ELEVBQU1wdEQsS0FBS2IsV0FLWmdZLEVBQUVoWSxNQUFNOHFELEdBQUcsT0FDVmtELEdBQWlCLE1BSXpCLElBQUlFLEdBQWNsMkMsRUFDZCxJQUFNdXNDLEVBQVNvSSxVQUFZLDhEQUFnRWx6RCxFQUFTLFdBSXhHLElBQU04cUQsRUFBU3NJLG1CQUFvQnRJLEVBQVN1SSxtQkFBdUJrQixFQUkvRGgyQyxFQUFFaTJDLEdBQU9FLFFBQVEsZ0JBQWdCMTBELEVBQU8sZ0JBQWdCQSxFQUFPLFdBQVdyQixhQUpLLENBQy9FLEdBQUlnMkQsR0FBUXAyQyxFQUFFaTJDLEdBQU9FLFFBQVFELEdBQWE5MUQsUUFDMUNnMkQsR0FBTWozRCxTQUFTc0MsRUFBTyxRQUlyQjhxRCxFQUFTd0ksYUFHVmo1QixFQUFLMzhCLFNBQVNzQyxFQUFPLFNBRnJCcTZCLEVBQUszOEIsU0FBU3NDLEVBQU8sY0FLekJxNkIsRUFBSzM4QixTQUFTc0MsRUFBTyxVQUdyQixJQUFJNDBELEdBQWVyMkMsRUFBRSxnQkFBZ0J2ZSxFQUFPLFlBQVk4cUQsRUFBU3dJLGFBQWF4SSxFQUFTaUksYUFBYWpJLEVBQVNnSSxjQUFjLFVBRXZIaEksR0FBU3NJLG1CQUFxQnRJLEVBQVN1SSxtQkFBcUJrQixJQUM1REssRUFBZUEsRUFBYWpvQixLQUFLOG5CLEdBQWE5MUQsVUFHbEQ0ZixFQUFFaTJDLEdBQU85b0MsT0FBT21wQyxNQUFNRCxPQUdhLEtBQTNCdjZCLEVBQUt4dUIsV0FBV2hPLFFBQ3ZCdzhCLEVBQUszOEIsU0FBU3NDLEVBQU8sV0FJMUJxNkIsR0FBS3h1QixTQUFTLEtBQUt3VSxLQUFLLE9BQVEsWUFBWXhGLE1BQU0sU0FBUzZCLEdBRW5Eb3VDLEVBQVNxSSxlQUFpQjUwQyxFQUFFN0IsRUFBTTlkLFFBQVFELFNBQVNtMkQsUUFBUSxNQUFNMTNELFNBQVM0QyxFQUFPLFlBRTdFdWUsRUFBRXkxQyxFQUFNSyxLQUFLeDVDLFVBS3JCaXdDLEVBQVNxSSxjQUFnQnJJLEVBQVNzSSxtQkFDbEMvNEIsRUFBS3h1QixTQUFTLEtBQUtBLFNBQVMsS0FBS2dQLE1BQU0sU0FBVTZCLEdBRTdDNkIsRUFBRXkxQyxFQUFNSyxLQUFLeDVDLFVBR2pCd2YsRUFBS25hLEtBQUssSUFBSWxnQixFQUFPLHVCQUF1QkEsRUFBTyxVQUFVNmEsTUFBTSxTQUFTNkIsR0FFcEU2QixFQUFFeTFDLEVBQU1LLEtBQUt4NUMsYUFNN0IwRCxFQUFFbXBDLEdBQU8xbkMsS0FBSyxXQUNWLEdBQUkwYSxHQUFPbmMsRUFBRWhZLE1BQU1tMEIsS0FBSyxPQUNuQm93QixHQUFTd0ksY0FDVlUsRUFBTWUsa0JBQWtCcjZCLEVBQUs3dUIsU0FBVSxNQUFNLEVBQU8sTUFBTSxLQUtsRW1vRCxFQUFNZSxrQkFBa0JmLEVBQU1FLFVBQVcsTUFBTSxFQUFPLFFBQVEsR0FHOURGLEVBQU1FLFVBQVU3ekMsS0FBSyxPQUFPLFFBRzVCOUIsRUFBRXRpQixHQUFVdy9CLFVBQVUsV0FDbEJ1NEIsRUFBTWdCLFdBQVUsS0FHcEJ6MkMsRUFBRXRpQixHQUFVaWYsTUFBTSxXQUNkODRDLEVBQU1nQixXQUFVLEtBSXBCejJDLEVBQUV5MUMsRUFBTUssS0FBS3g1QyxNQUFNLFNBQVVoWCxHQUN6QkEsRUFBRThZLGlCQUNGcTNDLEVBQU1pQixnQkFJVmpCLEVBQU1FLFVBQVVsN0MsR0FBRyxRQUFTLElBQU1oWixFQUFTLFFBQVMsU0FBVTZELEdBQzFEQSxFQUFFOFksaUJBQ0ZxM0MsRUFBTWtCLFdBQVczMkMsRUFBRWhZLFNBSXZCZ1ksRUFBRXkxQyxFQUFNSyxLQUFLYyxRQUFRLFNBQVV0eEQsR0FDM0IsR0FBSXl0QixHQUFLenRCLEdBQUs2WSxLQUNHLEtBQWQ0VSxFQUFHL1QsVUFDRjFaLEVBQUU4WSxpQkFDRnEzQyxFQUFNaUIsaUJBSWRqQixFQUFNRSxVQUFVbDdDLEdBQUcsVUFBVyxJQUFJaFosRUFBTyxRQUFTLFNBQVM2RCxHQUN2RCxHQUFJeXRCLEdBQUt6dEIsR0FBSzZZLEtBQ0csS0FBZDRVLEVBQUcvVCxVQUNGMVosRUFBRThZLGlCQUNGcTNDLEVBQU1rQixXQUFXMzJDLEVBQUUxYSxFQUFFakYsWUFLekJrc0QsRUFBU3NJLGtCQUFvQnRJLEVBQVN1SSxtQkFDdEM5MEMsRUFBRSxJQUFJdmUsRUFBTyxXQUFXNmEsTUFBTSxTQUFTaFgsR0FDL0JBLEVBQUV1eEQsOEJBTWxCOUMsRUFBT2gzRCxVQUFVMjVELFlBQWMsU0FBVWpvRCxHQUNyQyxHQUFJZ25ELEdBQVF6dEQsS0FDUjh0RCxFQUFNTCxFQUFNSyxJQUNaSCxFQUFZRixFQUFNRSxTQUVsQkcsR0FBSWozRCxTQUFTNEMsRUFBTyxlQUNwQnEwRCxFQUFJdjJELFlBQVlrQyxFQUFPLGNBQ3ZCcTBELEVBQUkzMkQsU0FBU3NDLEVBQU8sV0FFcEJxMEQsRUFBSXYyRCxZQUFZa0MsRUFBTyxTQUN2QnEwRCxFQUFJMzJELFNBQVNzQyxFQUFPLGVBRXhCcTBELEVBQUkzMkQsU0FBU3NDLEVBQU8sY0FDcEJnMEQsRUFBTWUsa0JBQWtCYixFQUFXRyxFQUFJMTFELFVBQVUsRUFBTTAxRCxJQUkzRC9CLEVBQU9oM0QsVUFBVTQ1RCxXQUFhLFNBQVVsb0QsR0FDcEMsR0FBSWduRCxHQUFRenRELEtBQ1J1a0QsRUFBV2tKLEVBQU1sSixTQUNqQnB3QixFQUFPMXRCLEVBQUcwdEIsS0FBSyxPQUNkQSxLQUNEQSxLQUNBQSxFQUFLMjZCLE1BQVFyb0QsRUFBR25CLFNBQVMsSUFBSTdMLEVBQU8sVUFDcEMwNkIsRUFBSzQ2QixHQUFLdG9ELEVBQUd2SyxLQUFLLE1BQ2xCaTRCLEVBQUsvN0IsT0FBU3FPLEVBQUdyTyxTQUViKzdCLEVBQUsvN0IsT0FBT3ZCLFNBQVM0QyxFQUFPLGtCQUM1QjA2QixFQUFLLzdCLE9BQVNxTyxFQUFHck8sU0FBU0EsU0FDMUIrN0IsRUFBSzQ2QixHQUFLdG9ELEVBQUdyTyxTQUFTOEQsS0FBSyxPQUUvQnVLLEVBQUcwdEIsS0FBSyxPQUFRQSxJQUVoQkEsRUFBSy83QixPQUFPdkIsU0FBUzRDLEVBQU8sZUFDNUIwNkIsRUFBSzI2QixNQUFNbDFDLEtBQUsycUMsRUFBU2lJLGNBQ3pCcjRCLEVBQUsvN0IsT0FBT2IsWUFBWWtDLEVBQU8sY0FDL0IwNkIsRUFBSy83QixPQUFPakIsU0FBU3NDLEVBQU8sU0FDNUIwNkIsRUFBSy83QixPQUFPakIsU0FBU3NDLEVBQU8sY0FDNUJnMEQsRUFBTWUsa0JBQWtCcjZCLEVBQUs0NkIsR0FBSTU2QixFQUFLLzdCLFFBQVEsRUFBTXFPLEtBRXBEMHRCLEVBQUsyNkIsTUFBTWwxQyxLQUFLMnFDLEVBQVNnSSxjQUN6QnA0QixFQUFLLzdCLE9BQU9qQixTQUFTc0MsRUFBTyxjQUM1QjA2QixFQUFLLzdCLE9BQU9iLFlBQVlrQyxFQUFPLFNBQy9CMDZCLEVBQUsvN0IsT0FBT2pCLFNBQVNzQyxFQUFPLGNBQzVCZzBELEVBQU1lLGtCQUFrQnI2QixFQUFLNDZCLEdBQUk1NkIsRUFBSy83QixRQUFRLEVBQU1xTyxLQUs1RHNsRCxFQUFPaDNELFVBQVV5NUQsa0JBQW9CLFNBQVMvbkQsRUFBSXJPLEVBQVFpTCxFQUFTaVcsRUFBUzVWLEdBQ3hFLEdBQUkrcEQsR0FBUXp0RCxLQUNSdWtELEVBQVdrSixFQUFNbEosU0FDakJwRCxFQUFRc00sRUFBTXVCLGdCQUFnQnZvRCxHQUM5QnpELEVBQVcsQ0FDWEssS0FDQUwsRUFBV3VoRCxFQUFTdmhELFVBR3BCeUQsRUFBRzVQLFNBQVM0QyxFQUFPLFlBQ25CZ04sRUFBR2xQLFlBQVlrQyxFQUFPLFdBRWJpSyxHQUNENmdELEVBQVM0SSxXQUFXN3pDLEdBRTVCN1MsRUFBR3dvRCxVQUFVanNELEVBQVV1aEQsRUFBUzhILFdBQVksV0FFeENyMEMsRUFBRXNCLEdBQVMvaEIsWUFBWWtDLEVBQU8sY0FDOUJ1ZSxFQUFFNWYsR0FBUWIsWUFBWWtDLEVBQU8sY0FHeEJpSyxHQUNENmdELEVBQVM4SSxVQUFVL3pDLEtBRzNCN1MsRUFBR3FULEtBQUssY0FBYyxTQUN0QnFuQyxFQUFNcm5DLEtBQUssV0FBWSxLQUN2QjJ6QyxFQUFNeUIsWUFBWXpvRCxHQUFJLEtBRXRCQSxFQUFHdFAsU0FBU3NDLEVBQU8sV0FHZGlLLEdBQ0Q2Z0QsRUFBUzZJLFlBQVk5ekMsR0FHekI3UyxFQUFHMG9ELFFBQVFuc0QsRUFBVWhELEtBQUt1a0QsU0FBUytILFlBQWEsV0FDNUM3bEQsRUFBR3FULEtBQUssY0FBYyxRQUN0QnFuQyxFQUFNcm5DLEtBQUssV0FBWSxNQUN2QjJ6QyxFQUFNeUIsWUFBWXpvRCxHQUFJLEdBQ3RCQSxFQUFHbkQsT0FFSDBVLEVBQUVzQixHQUFTL2hCLFlBQVlrQyxFQUFPLGNBQzlCdWUsRUFBRTVmLEdBQVFiLFlBQVlrQyxFQUFPLGNBR3hCaUssRUFFaUIsUUFBWDRWLEdBQ1BpckMsRUFBUzdnRCxPQUZUNmdELEVBQVMrSSxXQUFXaDBDLE9BU3BDeXlDLEVBQU9oM0QsVUFBVW02RCxZQUFjLFNBQVN6b0QsRUFBSTFFLEdBQ3hDLEdBQUkwckQsR0FBUXp0RCxLQUdSb3ZELEVBQVkzb0QsRUFBR25CLFNBQVMsTUFBTUEsU0FBUyxNQUFNK3BELElBQUksSUFBSTUxRCxFQUFPLFVBRzNEc0ksR0FTRHF0RCxFQUFVMzFDLEtBQUssV0FDWCxHQUFJczFDLEdBQUsvMkMsRUFBRWhZLEtBQ1grdUQsR0FBR2oxQyxLQUFLLGNBQWMsT0FDdEIsSUFBSXFuQyxHQUFRc00sRUFBTXVCLGdCQUFnQkQsRUFDbEM1TixHQUFNcm5DLEtBQUssV0FBWSxNQUN2QjJ6QyxFQUFNeUIsWUFBWUgsRUFBSWh0RCxLQWIxQnF0RCxFQUFVMzFDLEtBQUssV0FDWCxHQUFJczFDLEdBQUsvMkMsRUFBRWhZLEtBQ1grdUQsR0FBR2oxQyxLQUFLLGNBQWMsUUFDdEIsSUFBSXFuQyxHQUFRc00sRUFBTXVCLGdCQUFnQkQsRUFDbEM1TixHQUFNcm5DLEtBQUssV0FBWSxLQUN2QjJ6QyxFQUFNeUIsWUFBWUgsRUFBSWh0RCxNQWNsQ2dxRCxFQUFPaDNELFVBQVVpNkQsZ0JBQWtCLFNBQVN2b0QsR0FDeEMsR0FBSTB0QixHQUFPMXRCLEVBQUcwdEIsS0FBSyxPQUNuQixLQUFLQSxFQUFNLENBQ1BBLElBQ0EsSUFBSWd0QixHQUFRMTZDLEVBQUduQixTQUFTLE1BQ3BCZ3FELEVBQVVuTyxFQUFNeG5DLEtBQUssSUFDekJ3YSxHQUFLdmtCLE1BQVEwL0MsRUFBUXg2QyxJQUFJcXNDLEVBQU14bkMsS0FBSyxJQUFJbGdCLEVBQU8sVUFDL0NnTixFQUFHMHRCLEtBQUssT0FBUUEsR0FFcEIsTUFBT0EsR0FBS3ZrQixPQUdoQm04QyxFQUFPaDNELFVBQVUwNUQsVUFBWSxTQUFTMzhCLEdBQzdCQSxFQUdEOVosRUFBRSxJQUFJdmUsRUFBTyxXQUFXQSxFQUFPLFFBQVFvakQsSUFBSSxVQUFVLElBRnJEN2tDLEVBQUUsSUFBSXZlLEVBQU8sV0FBV0EsRUFBTyxRQUFRb2pELElBQUksVUFBVSxTQU03RGtQLEVBQU9oM0QsVUFBVSttQyxPQUFTLFdBQ3RCLEdBQUkyeEIsR0FBUXp0RCxJQUNaeXRELEdBQU1pQixlQUdWM0MsRUFBT2gzRCxVQUFVdzZELEtBQU8sV0FDcEIsR0FBSTlCLEdBQVF6dEQsSUFDUnl0RCxHQUFNSyxJQUFJajNELFNBQVM0QyxFQUFPLGVBQzFCZzBELEVBQU1pQixlQUlkM0MsRUFBT2gzRCxVQUFVeTZELE1BQVEsV0FDckIsR0FBSS9CLEdBQVF6dEQsSUFDUnl0RCxHQUFNSyxJQUFJajNELFNBQVM0QyxFQUFPLFVBQzFCZzBELEVBQU1pQixlQUlkMTJDLEVBQUUwRixHQUFHd3VDLEdBQWMsU0FBV3YzRCxHQUMxQixHQUFJNHFCLEdBQU9yZixTQUdYLElBQWdCbkosU0FBWnBDLEdBQTRDLGdCQUFaQSxHQUNoQyxNQUFPcUwsTUFBS3laLEtBQUssV0FHUnpCLEVBQUVtYyxLQUFLbjBCLEtBQU0sVUFBWWtzRCxJQUkxQmwwQyxFQUFFbWMsS0FBS24wQixLQUFNLFVBQVlrc0QsRUFBWSxHQUFJSCxHQUFRL3JELEtBQU1yTCxLQUs1RCxJQUF1QixnQkFBWkEsSUFBdUMsTUFBZkEsRUFBUSxJQUEwQixTQUFaQSxFQUFvQixDQUdoRixHQUFJODZELEVBY0osT0FaQXp2RCxNQUFLeVosS0FBSyxXQUNOLEdBQUlqbEIsR0FBV3dqQixFQUFFbWMsS0FBS24wQixLQUFNLFVBQVlrc0QsRUFHcEMxM0QsYUFBb0J1M0QsSUFBdUMsa0JBQXRCdjNELEdBQVNHLEtBRzlDODZELEVBQVVqN0QsRUFBU0csR0FBU3dMLE1BQU8zTCxFQUFVaU4sTUFBTTFNLFVBQVU4SSxNQUFNNUksS0FBTXNxQixFQUFNLE9BS3BFeG9CLFNBQVowNEQsRUFBd0JBLEVBQVV6dkQsUUFHbkRtZCxPQUFRem5CLFNBQVU4TCxRQTJCbkIsU0FBVW9sQixHQUNWLFlBRXVCLG1CQUFYckssU0FBeUJBLE9BQU9DLElBRTNDRCxRQUFTLFVBQVcsU0FBV3ZFLEdBQzlCLE1BQU80TyxHQUFTNU8sRUFBR3hXLE9BQVE5TCxZQUdBLGdCQUFaZ25CLFNBRWhCRCxPQUFPQyxRQUFVLFNBQVVnekMsRUFBTTEzQyxHQWFoQyxNQVpPMDNDLEtBR05BLEVBQU9sdUQsUUFHRHdXLElBQ05BLEVBQXNCLG1CQUFYeFcsUUFDVnNiLFFBQVEsVUFDUkEsUUFBUSxVQUFXNHlDLElBR2Q5b0MsRUFBUzVPLEVBQUcwM0MsRUFBTUEsRUFBS2g2RCxXQUsvQmt4QixFQUFTekosT0FBUTNiLE9BQVE5TCxXQUcxQixTQUFVc2lCLEVBQUd4VyxFQUFROUwsRUFBVXFCLEdBQy9CLFlBeVJBLFNBQVM0NEQsR0FBa0IxeEQsR0FFMUIsR0FFQ2lpQyxHQUNBMHZCLEVBRkFDLEVBQVksOEJBR1pDLElBRUQ5M0MsR0FBRXlCLEtBQU14YixFQUFHLFNBQVVvZ0IsRUFBS3hFLEdBQ3pCcW1CLEVBQVE3aEIsRUFBSTZoQixNQUFNLHNCQUViQSxHQUE2QyxLQUFwQzJ2QixFQUFVbjVELFFBQVF3cEMsRUFBTSxHQUFHLE9BRXhDMHZCLEVBQVN2eEMsRUFBSXpuQixRQUFTc3BDLEVBQU0sR0FBSUEsRUFBTSxHQUFHdGhDLGVBQ3pDa3hELEVBQUtGLEdBQVd2eEMsRUFFRSxNQUFiNmhCLEVBQU0sSUFFVnl2QixFQUFpQjF4RCxFQUFFb2dCLE9BS3RCcGdCLEVBQUU4eEQsY0FBZ0JELEVBZW5CLFFBQVNFLEdBQXNCajlDLEVBQUtrOUMsRUFBTWoyQixHQUVsQ2puQixFQUFJZzlDLGVBQ1ZKLEVBQWlCNThDLEVBR2xCLElBQUltOUMsRUFFSmw0QyxHQUFFeUIsS0FBTXcyQyxFQUFNLFNBQVU1eEMsRUFBS3hFLEdBQzVCcTJDLEVBQWVuOUMsRUFBSWc5QyxjQUFlMXhDLEdBRTdCNnhDLElBQWlCbjVELElBQWNpakMsR0FBU2kyQixFQUFLQyxLQUFrQm41RCxJQUduQyxNQUEzQm01RCxFQUFhdnlELE9BQU8sSUFHakJzeUQsRUFBTUMsS0FDWkQsRUFBTUMsT0FFUGw0QyxFQUFFOWlCLFFBQVEsRUFBTSs2RCxFQUFLQyxHQUFlRCxFQUFLNXhDLElBRXpDMnhDLEVBQXFCajlDLEVBQUltOUMsR0FBZUQsRUFBS0MsR0FBZWwyQixJQUc1RGkyQixFQUFLQyxHQUFnQkQsRUFBTTV4QyxNQWMvQixRQUFTOHhDLEdBQW1CQyxHQUUzQixHQUFJcjJELEdBQVdzMkQsR0FBVXQyRCxTQUFTdTJELFVBQzlCQyxFQUFjSCxFQUFLSSxjQUtoQkosRUFBS0ssYUFBZUYsR0FDRCwrQkFBekJ4MkQsRUFBUzAyRCxhQUVUQyxHQUFRTixFQUFNQSxFQUFNLGVBQWdCLGdCQUk5QkEsRUFBS08saUJBQW1CSixHQUNELGVBQTdCeDJELEVBQVM0MkQsaUJBRVRELEdBQVFOLEVBQU1BLEVBQU0sZUFBZ0IsbUJBSWhDQSxFQUFLUSxpQkFDVFIsRUFBS1MsV0FBYVQsRUFBS1EsZUFHeEIsSUFBSUUsR0FBVVYsRUFBS1csUUFDZEQsSUFDSkUsR0FBaUJGLEdBd0JuQixRQUFTRyxHQUFnQnZ0RCxHQUV4Qnd0RCxHQUFjeHRELEVBQU0sV0FBaUIsU0FDckN3dEQsR0FBY3h0RCxFQUFNLGFBQWlCLGNBQ3JDd3RELEdBQWN4dEQsRUFBTSxlQUFpQixnQkFDckN3dEQsR0FBY3h0RCxFQUFNLGdCQUFpQixpQkFDckN3dEQsR0FBY3h0RCxFQUFNLFFBQWlCLGFBQ3JDd3RELEdBQWN4dEQsRUFBTSxhQUFpQixrQkFDckN3dEQsR0FBY3h0RCxFQUFNLFNBQWlCLGFBQ3JDd3RELEdBQWN4dEQsRUFBTSxhQUFpQixtQkFDckN3dEQsR0FBY3h0RCxFQUFNLGFBQWlCLGtCQUNyQ3d0RCxHQUFjeHRELEVBQU0sWUFBaUIsV0FHUCxpQkFBbEJBLEdBQUt5dEQsV0FDaEJ6dEQsRUFBS3l0RCxTQUFXenRELEVBQUt5dEQsU0FBVyxPQUFTLElBRWIsaUJBQWpCenRELEdBQUtxd0MsVUFDaEJyd0MsRUFBS3F3QyxRQUFVcndDLEVBQUtxd0MsUUFBVSxPQUFTLEdBS3hDLElBQUlxZCxHQUFhMXRELEVBQUsydEQsWUFFdEIsSUFBS0QsRUFDSixJQUFNLEdBQUkvN0QsR0FBRSxFQUFHaThELEVBQUlGLEVBQVc5NUQsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3pDKzdELEVBQVcvN0QsSUFDZjI2RCxFQUFxQkssR0FBVWtCLE9BQU9DLFFBQVNKLEVBQVcvN0QsSUFhOUQsUUFBU284RCxHQUFnQi90RCxHQUV4Qnd0RCxHQUFjeHRELEVBQU0sWUFBaUIsYUFDckN3dEQsR0FBY3h0RCxFQUFNLFlBQWlCLGFBQ3JDd3RELEdBQWN4dEQsRUFBTSxnQkFBaUIsYUFDckN3dEQsR0FBY3h0RCxFQUFNLGdCQUFpQixlQUdyQyxJQUFJZ3VELEdBQVdodUQsRUFBS2l1RCxTQUNmRCxLQUFjMTVDLEVBQUVwakIsUUFBUzg4RCxLQUM3Qmh1RCxFQUFLaXVELFdBQWNELElBVXJCLFFBQVNFLEdBQWtCck4sR0FLMUIsSUFBTzhMLEdBQVV3QixVQUFZLENBQzVCLEdBQUlDLEtBQ0p6QixJQUFVd0IsVUFBWUMsQ0FHdEIsSUFBSWgwRCxHQUFJa2EsRUFBRSxVQUNSNmtDLEtBQ0F4dUMsU0FBVSxRQUNWcFcsSUFBSyxFQUNMSCxLQUFNLEVBQ05nTixPQUFRLEVBQ1JDLE1BQU8sRUFDUHJGLFNBQVUsV0FFVjJTLE9BQ0EyRixFQUFFLFVBQ0E2a0MsS0FDQXh1QyxTQUFVLFdBQ1ZwVyxJQUFLLEVBQ0xILEtBQU0sRUFDTmlOLE1BQU8sSUFDUHJGLFNBQVUsV0FFVjJTLE9BQ0EyRixFQUFFLFVBQ0E2a0MsS0FDQTkzQyxNQUFPLE9BQ1BELE9BQVEsT0FJWjRuRCxTQUFVLFFBRVJxRixFQUFRajBELEVBQUV3SCxXQUNWMHNELEVBQVFELEVBQU16c0QsVUFhbEJ3c0QsR0FBUUcsU0FBV0YsRUFBTSxHQUFHM2pELFlBQWMyakQsRUFBTSxHQUFHdHhDLFlBS25EcXhDLEVBQVFJLGdCQUEyQyxNQUF6QkYsRUFBTSxHQUFHNWpELGFBQWdELE1BQXpCMmpELEVBQU0sR0FBR3R4QyxZQUluRXF4QyxFQUFRSyxlQUF1RCxJQUF0Q3Z3RCxLQUFLNnNCLE1BQU91akMsRUFBTTV5QyxTQUFTdG5CLE1BR3BEZzZELEVBQVFNLFVBQVl0MEQsRUFBRSxHQUFHbkcsd0JBQXdCb04sT0FBUSxHQUFPLEVBRWhFakgsRUFBRStYLFNBR0htQyxFQUFFOWlCLE9BQVFxdkQsRUFBUzhOLFNBQVVoQyxHQUFVd0IsV0FDdkN0TixFQUFTK04sUUFBUUMsVUFBWWxDLEdBQVV3QixVQUFVSSxTQVVsRCxRQUFTTyxHQUFZQyxFQUFNLzBDLEVBQUloYSxFQUFNTSxFQUFPZ2MsRUFBSzB5QyxHQUVoRCxHQUVDbDlELEdBREFILEVBQUkyTyxFQUVKMnVELEdBQVEsQ0FPVCxLQUxLanZELElBQVMzTSxJQUNidkIsRUFBUWtPLEVBQ1JpdkQsR0FBUSxHQUdEdDlELElBQU0ycUIsR0FDTnl5QyxFQUFLNXlELGVBQWV4SyxLQUkzQkcsRUFBUW05RCxFQUNQajFDLEVBQUlsb0IsRUFBT2k5RCxFQUFLcDlELEdBQUlBLEVBQUdvOUQsR0FDdkJBLEVBQUtwOUQsR0FFTnM5RCxHQUFRLEVBQ1J0OUQsR0FBS3E5RCxFQUdOLE9BQU9sOUQsR0FTUixRQUFTbzlELEdBQWNDLEVBQVdDLEdBR2pDLEdBQUlDLEdBQVkxQyxHQUFVdDJELFNBQVNpNUQsT0FDL0JDLEVBQU9KLEVBQVVLLFVBQVU1N0QsT0FDM0I2N0QsRUFBT243QyxFQUFFOWlCLFVBQVltN0QsR0FBVWtCLE9BQU82QixRQUFTTCxHQUNsREQsSUFBT0EsRUFBTUEsRUFBTXA5RCxFQUFTOEksY0FBYyxNQUMxQzYwRCxPQUFhTixFQUFVTSxPQUFZTixFQUFVTSxPQUFZUCxFQUFNQSxFQUFJdHpELFVBQVksR0FDL0VteUQsVUFBYW9CLEVBQVVwQixVQUFZb0IsRUFBVXBCLFdBQWFzQixHQUMxREssTUFBU1AsRUFBVU8sTUFBUVAsRUFBVU8sTUFBUUwsRUFDN0NNLElBQUtOLEdBRU5KLEdBQVVLLFVBQVVyeUQsS0FBTXN5RCxFQUsxQixJQUFJL0IsR0FBYXlCLEVBQVVXLGVBQzNCcEMsR0FBWTZCLEdBQVNqN0MsRUFBRTlpQixVQUFZbTdELEdBQVVrQixPQUFPQyxRQUFTSixFQUFZNkIsSUFHekVRLEVBQWtCWixFQUFXSSxFQUFNajdDLEVBQUU4NkMsR0FBSzMrQixRQVczQyxRQUFTcy9CLEdBQWtCWixFQUFXSSxFQUFNUyxHQUUzQyxHQUFJUCxHQUFPTixFQUFVSyxVQUFXRCxHQUM1QlUsRUFBV2QsRUFBVWMsU0FDckJDLEVBQUs1N0MsRUFBRW03QyxFQUFLTCxJQUloQixLQUFPSyxFQUFLVSxXQUFhLENBRXhCVixFQUFLVSxXQUFhRCxFQUFHOTVDLEtBQUssVUFBWSxJQUd0QyxJQUFJOWEsSUFBSzQwRCxFQUFHOTVDLEtBQUssVUFBWSxJQUFJb21CLE1BQU0seUJBQ2xDbGhDLEtBQ0ptMEQsRUFBS1UsV0FBYTcwRCxFQUFFLElBS2pCMDBELElBQWEzOEQsR0FBMEIsT0FBYjI4RCxJQUc5QmpDLEVBQWVpQyxHQUdmMUQsRUFBcUJLLEdBQVV0MkQsU0FBU2k1RCxPQUFRVSxHQUczQ0EsRUFBU0ksWUFBYy84RCxHQUFjMjhELEVBQVNKLFFBRWxESSxFQUFTSixNQUFRSSxFQUFTSSxXQUd0QkosRUFBU0ssUUFFYlosRUFBS2EsYUFBZU4sRUFBU0ssT0FLekJMLEVBQVN4OEQsWUFBZXc4RCxFQUFTTyxTQUVyQ1AsRUFBU08sT0FBU1AsRUFBU3g4RCxXQUc1QjhnQixFQUFFOWlCLE9BQVFpK0QsRUFBTU8sR0FDaEJoRCxHQUFReUMsRUFBTU8sRUFBVSxTQUFVLGNBSzdCQSxFQUFTUSxZQUFjbjlELElBRTNCbzhELEVBQUt4QixXQUFjK0IsRUFBU1EsWUFFN0J4RCxHQUFReUMsRUFBTU8sRUFBVSxhQUl6QixJQUFJUyxHQUFXaEIsRUFBS0csTUFDaEJBLEVBQVFjLEVBQW9CRCxHQUM1QkUsRUFBVWxCLEVBQUtrQixRQUFVRCxFQUFvQmpCLEVBQUtrQixTQUFZLEtBRTlEbDhCLEVBQVcsU0FBVXBsQixHQUN4QixNQUFzQixnQkFBUkEsSUFBeUMsS0FBckJBLEVBQUlyYyxRQUFRLEtBRS9DeThELEdBQUttQixVQUFZdDhDLEVBQUUraUIsY0FBZW81QixLQUNqQ2g4QixFQUFTZzhCLEVBQVNydkMsT0FBU3FULEVBQVNnOEIsRUFBUzF4RCxPQUFTMDFCLEVBQVNnOEIsRUFBU2xqQyxTQUd6RWtpQyxFQUFLb0IsVUFBWSxTQUFVQyxFQUFTL3hELEVBQU1neUQsR0FDekMsR0FBSUMsR0FBWXBCLEVBQU9rQixFQUFTL3hELEVBQU0xTCxFQUFXMDlELEVBRWpELE9BQU9KLElBQVc1eEQsRUFDakI0eEQsRUFBU0ssRUFBV2p5RCxFQUFNK3hELEVBQVNDLEdBQ25DQyxHQUVGdkIsRUFBS3dCLFVBQVksU0FBV0gsRUFBUzM2QyxFQUFLNDZDLEdBQ3pDLE1BQU9HLEdBQW9CVCxHQUFZSyxFQUFTMzZDLEVBQUs0NkMsSUFLN0IsZ0JBQWJOLEtBQ1h0QixFQUFVZ0MsZ0JBQWlCLEdBSXRCaEMsRUFBVWlDLFVBQVVDLFFBRXpCNUIsRUFBSzZCLFdBQVksRUFDakJwQixFQUFHejhELFNBQVV3OEQsRUFBU3NCLGVBSXZCLElBQUlDLEdBQTRDLEtBQXJDbDlDLEVBQUVnTixRQUFRLE1BQU9tdUMsRUFBS2dDLFdBQzdCQyxFQUE4QyxLQUF0Q3A5QyxFQUFFZ04sUUFBUSxPQUFRbXVDLEVBQUtnQyxVQUM3QmhDLEdBQUs2QixZQUFlRSxHQUFTRSxHQUt6QkYsSUFBU0UsR0FFbEJqQyxFQUFLa0MsY0FBZ0IxQixFQUFTMkIsYUFDOUJuQyxFQUFLb0MsaUJBQW1CNUIsRUFBUzZCLHFCQUV2Qk4sR0FBUUUsR0FFbEJqQyxFQUFLa0MsY0FBZ0IxQixFQUFTOEIsY0FDOUJ0QyxFQUFLb0MsaUJBQW1CNUIsRUFBUytCLHNCQUlqQ3ZDLEVBQUtrQyxjQUFnQjFCLEVBQVNnQyxVQUM5QnhDLEVBQUtvQyxpQkFBbUI1QixFQUFTaUMsV0FoQmpDekMsRUFBS2tDLGNBQWdCMUIsRUFBU3NCLGNBQzlCOUIsRUFBS29DLGlCQUFtQixJQTBCMUIsUUFBU00sR0FBd0J0UixHQUdoQyxHQUFLQSxFQUFTdVEsVUFBVWdCLGNBQWUsRUFDdkMsQ0FDQyxHQUFJQyxHQUFVeFIsRUFBUzJPLFNBRXZCOEMsSUFBMEJ6UixFQUMxQixLQUFNLEdBQUlsdkQsR0FBRSxFQUFJNGdFLEVBQUtGLEVBQVF6K0QsT0FBVzIrRCxFQUFGNWdFLEVBQVNBLElBRTlDMGdFLEVBQVExZ0UsR0FBR3k5RCxJQUFJcjBELE1BQU1zRyxNQUFRZ3hELEVBQVExZ0UsR0FBRzZnRSxPQUkxQyxHQUFJdGxCLEdBQVMyVCxFQUFTK04sU0FDSCxLQUFkMWhCLEVBQU91bEIsSUFBMkIsS0FBZHZsQixFQUFPd2xCLEtBRS9CQyxHQUFlOVIsR0FHaEIrUixHQUFpQi9SLEVBQVUsS0FBTSxpQkFBa0JBLElBWXBELFFBQVNnUyxHQUF5QjFELEVBQVcyRCxHQUU1QyxHQUFJQyxHQUFRQyxFQUFlN0QsRUFBVyxXQUV0QyxPQUFnQyxnQkFBbEI0RCxHQUFNRCxHQUNuQkMsRUFBTUQsR0FDTixLQVlGLFFBQVNHLEdBQXlCOUQsRUFBVzJELEdBRTVDLEdBQUlDLEdBQVFDLEVBQWU3RCxFQUFXLFlBQ2xDK0QsRUFBTzUrQyxFQUFFZ04sUUFBU3d4QyxFQUFRQyxFQUU5QixPQUFnQixLQUFURyxFQUFjQSxFQUFPLEtBVTdCLFFBQVNDLEdBQWtCaEUsR0FFMUIsTUFBTzZELEdBQWU3RCxFQUFXLFlBQWF2N0QsT0FZL0MsUUFBU28vRCxHQUFlN0QsRUFBV2lFLEdBRWxDLEdBQUkzaEUsS0FRSixPQU5BNmlCLEdBQUU4M0MsSUFBSytDLEVBQVVLLFVBQVcsU0FBU3I1QyxFQUFLeGtCLEdBQ3BDd2tCLEVBQUlpOUMsSUFDUjNoRSxFQUFFMEwsS0FBTXhMLEtBSUhGLEVBU1IsUUFBUzRoRSxHQUFpQnhTLEdBRXpCLEdBR0lsdkQsR0FBR2k4RCxFQUFLcHpELEVBQUc4NEQsRUFBSzczRCxFQUFHODNELEVBQ25CQyxFQUFXQyxFQUFjcGMsRUFKekJnYixFQUFVeFIsRUFBUzJPLFVBQ25CLytCLEVBQU9vd0IsRUFBUzZTLE9BQ2hCM3RDLEVBQVE0bUMsR0FBVWdILElBQUk1MEQsS0FBSzYwRCxNQUsvQixLQUFNamlFLEVBQUUsRUFBR2k4RCxFQUFJeUUsRUFBUXorRCxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFJdkMsR0FIQTZoRSxFQUFNbkIsRUFBUTFnRSxHQUNkMGxELE1BRU9tYyxFQUFJbkQsT0FBU21ELEVBQUlsRCxhQUN2QmtELEVBQUluRCxNQUFRbUQsRUFBSWxELGlCQUVaLEtBQU9rRCxFQUFJbkQsTUFBUSxDQUN2QixJQUFNNzFELEVBQUUsRUFBRzg0RCxFQUFJdnRDLEVBQU1ueUIsT0FBVzAvRCxFQUFGOTRELEVBQVFBLElBQU0sQ0FDM0MsSUFBTWlCLEVBQUUsRUFBRzgzRCxFQUFJOWlDLEVBQUs3OEIsT0FBVzIvRCxFQUFGOTNELElBR3ZCNDdDLEVBQU01N0MsS0FBT3BJLElBQ2pCZ2tELEVBQU01N0MsR0FBS280RCxFQUFnQmhULEVBQVVwbEQsRUFBRzlKLEVBQUcsU0FHNUM4aEUsRUFBZTF0QyxFQUFNdnJCLEdBQUk2OEMsRUFBTTU3QyxHQUFJb2xELEdBTzVCNFMsR0FBZ0JqNUQsSUFBTXVyQixFQUFNbnlCLE9BQU8sSUFNcEIsU0FBakI2L0QsRUFwQitCaDRELEtBMkJyQyxHQUFLZzRELEVBQWUsQ0FDbkJELEVBQUluRCxNQUFRb0QsQ0FDWixRQUtLRCxFQUFJbkQsUUFDVm1ELEVBQUluRCxNQUFRLFdBa0JoQixRQUFTeUQsR0FBb0IzRSxFQUFXNEUsRUFBV0MsRUFBUWg2QyxHQUUxRCxHQUFJcm9CLEdBQUc0Z0UsRUFBTS8zRCxFQUFHNmpDLEVBQU01aUMsRUFBR3c0RCxFQUFNQyxFQUMzQjdCLEVBQVVsRCxFQUFVSyxTQUd4QixJQUFLdUUsRUFHSixJQUFNcGlFLEVBQUVvaUUsRUFBVW5nRSxPQUFPLEVBQUlqQyxHQUFHLEVBQUlBLElBQ3BDLENBQ0N1aUUsRUFBTUgsRUFBVXBpRSxFQUdoQixJQUFJd2lFLEdBQVdELEVBQUlFLFVBQVkvZ0UsRUFDOUI2Z0UsRUFBSUUsUUFDSkYsRUFBSUMsUUFPTCxLQUxPNy9DLEVBQUVwakIsUUFBU2lqRSxLQUVqQkEsR0FBYUEsSUFHUjM1RCxFQUFFLEVBQUc2akMsRUFBSzgxQixFQUFTdmdFLE9BQVd5cUMsRUFBRjdqQyxFQUFTQSxJQUUxQyxHQUE0QixnQkFBaEIyNUQsR0FBUzM1RCxJQUFtQjI1RCxFQUFTMzVELElBQU0sRUFDdkQsQ0FFQyxLQUFPNjNELEVBQVF6K0QsUUFBVXVnRSxFQUFTMzVELElBRWpDMDBELEVBQWNDLEVBSWZuMUMsR0FBSW02QyxFQUFTMzVELEdBQUkwNUQsT0FFYixJQUE0QixnQkFBaEJDLEdBQVMzNUQsSUFBbUIyNUQsRUFBUzM1RCxHQUFLLEVBRzFEd2YsRUFBSXE0QyxFQUFReitELE9BQU91Z0UsRUFBUzM1RCxHQUFJMDVELE9BRTVCLElBQTRCLGdCQUFoQkMsR0FBUzM1RCxHQUd6QixJQUFNaUIsRUFBRSxFQUFHdzRELEVBQUs1QixFQUFReitELE9BQVdxZ0UsRUFBRng0RCxFQUFTQSxLQUVyQixRQUFmMDRELEVBQVMzNUQsSUFDVDhaLEVBQUUrOUMsRUFBUTUyRCxHQUFHMnpELEtBQUtqOEQsU0FBVWdoRSxFQUFTMzVELE1BRXpDd2YsRUFBSXZlLEVBQUd5NEQsR0FTYixHQUFLRixFQUVKLElBQU1yaUUsRUFBRSxFQUFHNGdFLEVBQUt5QixFQUFPcGdFLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUV4Q3FvQixFQUFJcm9CLEVBQUdxaUUsRUFBT3JpRSxJQWtCakIsUUFBUzBpRSxHQUFhbEYsRUFBV21GLEVBQVNDLEVBQUtDLEdBRzlDLEdBQUlDLEdBQU90RixFQUFVdUUsT0FBTzkvRCxPQUN4QjhnRSxFQUFRcGdELEVBQUU5aUIsUUFBUSxLQUFVbTdELEdBQVVrQixPQUFPOEcsTUFDaER0bEQsSUFBS2tsRCxFQUFNLE1BQVEsT0FDbkIxRSxJQUFLNEUsR0FHTkMsR0FBTUUsT0FBU04sRUFDZm5GLEVBQVV1RSxPQUFPdjJELEtBQU11M0QsRUFPdkIsS0FBTSxHQUhGckMsR0FBVWxELEVBQVVLLFVBR2Q3OUQsRUFBRSxFQUFHNGdFLEVBQUtGLEVBQVF6K0QsT0FBVzIrRCxFQUFGNWdFLEVBQVNBLElBRTdDMGdFLEVBQVExZ0UsR0FBRzArRCxNQUFRLElBSXBCbEIsR0FBVTBGLGdCQUFnQjEzRCxLQUFNczNELEVBRWhDLElBQUk3NEQsR0FBS3V6RCxFQUFVMkYsUUFBU1IsRUFXNUIsT0FWSzE0RCxLQUFPdkksSUFDWDg3RCxFQUFVNEYsS0FBTW41RCxHQUFPODRELElBSW5CSCxJQUFTcEYsRUFBVWlDLFVBQVU0RCxlQUVqQ0MsRUFBYTlGLEVBQVdzRixFQUFNRixFQUFLQyxHQUc3QkMsRUFjUixRQUFTUyxHQUFVclUsRUFBVXNVLEdBRTVCLEdBQUlqZ0QsRUFPSixPQUpRaWdELGFBQWU3Z0QsS0FDdEI2Z0QsRUFBTTdnRCxFQUFFNmdELElBR0ZBLEVBQUkvSSxJQUFLLFNBQVV6NkQsRUFBR29SLEdBRTVCLE1BREFtUyxHQUFNa2dELEVBQW1CdlUsRUFBVTk5QyxHQUM1QnN4RCxFQUFZeFQsRUFBVTNyQyxFQUFJdWIsS0FBTTF0QixFQUFJbVMsRUFBSTZyQixTQVlqRCxRQUFTczBCLEdBQW9CbEcsRUFBVy8wRCxHQUV2QyxNQUFRQSxHQUFFazdELGVBQWVqaUUsRUFBYStHLEVBQUVrN0QsYUFBZSxLQVl4RCxRQUFTQyxHQUFzQnBHLEVBQVdzRixFQUFNcjZELEdBRS9DLE1BQU9rYSxHQUFFZ04sUUFBU2xuQixFQUFHKzBELEVBQVV1RSxPQUFRZSxHQUFPZSxTQWEvQyxRQUFTM0IsR0FBZ0JoVCxFQUFVNFUsRUFBUUMsRUFBUTMyRCxHQUVsRCxHQUFJeVcsR0FBaUJxckMsRUFBUzhVLE1BQzFCbkMsRUFBaUIzUyxFQUFTMk8sVUFBVWtHLEdBQ3BDNUUsRUFBaUJqUSxFQUFTNlMsT0FBTytCLEdBQVFiLE9BQ3pDZ0IsRUFBaUJwQyxFQUFJcUMsZ0JBQ3JCQyxFQUFpQnRDLEVBQUkzQyxVQUFXQyxFQUFTL3hELEdBQzVDOGhELFNBQVVBLEVBQ1YzckMsSUFBVXVnRCxFQUNWakMsSUFBVWtDLEdBR1gsSUFBS0ksSUFBYXppRSxFQU9qQixNQU5Ld3RELEdBQVNrVixZQUFjdmdELEdBQTJCLE9BQW5Cb2dELElBQ25DSSxHQUFRblYsRUFBVSxFQUFHLGdDQUNELGtCQUFYMlMsR0FBSTVELE1BQW9CLGFBQWUsSUFBSTRELEVBQUk1RCxNQUFNLEtBQzdELFlBQVk2RixFQUFPLFlBQVlDLEVBQVEsR0FDeEM3VSxFQUFTa1YsV0FBYXZnRCxHQUVoQm9nRCxDQUlSLElBQU1FLElBQWFoRixHQUF3QixPQUFiZ0YsR0FBeUMsT0FBbkJGLEdBRy9DLEdBQXlCLGtCQUFiRSxHQUdoQixNQUFPQSxHQUFTdmtFLEtBQU11L0QsT0FMdEJnRixHQUFXRixDQVFaLE9BQWtCLFFBQWJFLEdBQTZCLFdBQVIvMkQsRUFDbEIsR0FFRCsyRCxFQVlSLFFBQVNHLEdBQWdCcFYsRUFBVTRVLEVBQVFDLEVBQVF2L0MsR0FFbEQsR0FBSXE5QyxHQUFVM1MsRUFBUzJPLFVBQVVrRyxHQUM3QjVFLEVBQVVqUSxFQUFTNlMsT0FBTytCLEdBQVFiLE1BRXRDcEIsR0FBSXZDLFVBQVdILEVBQVMzNkMsR0FDdkIwcUMsU0FBVUEsRUFDVjNyQyxJQUFVdWdELEVBQ1ZqQyxJQUFVa0MsSUFjWixRQUFTUSxHQUFxQnAvQyxHQUU3QixNQUFPeEMsR0FBRTgzQyxJQUFLdDFDLEVBQUkwbEIsTUFBTSxtQkFBcUIsSUFBSyxTQUFXcGtCLEdBQzVELE1BQU9BLEdBQUVsbEIsUUFBUSxPQUFRLE9BWTNCLFFBQVN3OUQsR0FBb0J5RixHQUU1QixHQUFLN2hELEVBQUUraUIsY0FBZTgrQixHQUN0QixDQUVDLEdBQUk1N0QsS0FPSixPQU5BK1osR0FBRXlCLEtBQU1vZ0QsRUFBUyxTQUFVeDdDLEVBQUt4RSxHQUMxQkEsSUFDSjViLEVBQUVvZ0IsR0FBTysxQyxFQUFvQnY2QyxNQUl4QixTQUFVc2EsRUFBTTF4QixFQUFNbVcsRUFBSzY3QyxHQUNqQyxHQUFJejFELEdBQUlmLEVBQUV3RSxJQUFTeEUsRUFBRTY3RCxDQUNyQixPQUFPOTZELEtBQU1qSSxFQUNaaUksRUFBRW0xQixFQUFNMXhCLEVBQU1tVyxFQUFLNjdDLEdBQ25CdGdDLEdBR0UsR0FBaUIsT0FBWjBsQyxFQUdULE1BQU8sVUFBVTFsQyxHQUNoQixNQUFPQSxHQUdKLElBQXdCLGtCQUFaMGxDLEdBRWhCLE1BQU8sVUFBVTFsQyxFQUFNMXhCLEVBQU1tVyxFQUFLNjdDLEdBQ2pDLE1BQU9vRixHQUFTMWxDLEVBQU0xeEIsRUFBTW1XLEVBQUs2N0MsR0FHOUIsSUFBd0IsZ0JBQVpvRixJQUFrRCxLQUF6QkEsRUFBUW5qRSxRQUFRLE1BQzFCLEtBQXpCbWpFLEVBQVFuakUsUUFBUSxNQUF3QyxLQUF6Qm1qRSxFQUFRbmpFLFFBQVEsS0E4RXJELE1BQU8sVUFBVXk5QixFQUFNMXhCLEdBQ3RCLE1BQU8weEIsR0FBSzBsQyxHQXZFYixJQUFJRSxHQUFZLFNBQVU1bEMsRUFBTTF4QixFQUFNc1EsR0FDckMsR0FBSWluRCxHQUFlQyxFQUFjQyxFQUFLQyxDQUV0QyxJQUFhLEtBQVJwbkQsRUFJSixJQUFNLEdBRkY1ZCxHQUFJeWtFLEVBQXFCN21ELEdBRW5CMWQsRUFBRSxFQUFHNGdFLEVBQUs5Z0UsRUFBRW1DLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUN4QyxDQUtDLEdBSEEya0UsRUFBZ0I3a0UsRUFBRUUsR0FBRzZxQyxNQUFNazZCLElBQzNCSCxFQUFlOWtFLEVBQUVFLEdBQUc2cUMsTUFBTW02QixJQUVyQkwsRUFDTCxDQWVDLEdBYkE3a0UsRUFBRUUsR0FBS0YsRUFBRUUsR0FBR3VCLFFBQVF3akUsR0FBVyxJQUdqQixLQUFUamxFLEVBQUVFLEtBQ044K0IsRUFBT0EsRUFBTWgvQixFQUFFRSxLQUVoQjZrRSxLQUdBL2tFLEVBQUVrYyxPQUFRLEVBQUdoYyxFQUFFLEdBQ2Y4a0UsRUFBV2hsRSxFQUFFNEksS0FBSyxLQUdiaWEsRUFBRXBqQixRQUFTdS9CLEdBQ2YsSUFBTSxHQUFJajJCLEdBQUUsRUFBRzZqQyxFQUFLNU4sRUFBSzc4QixPQUFXeXFDLEVBQUY3akMsRUFBU0EsSUFDMUNnOEQsRUFBSXI1RCxLQUFNazVELEVBQVc1bEMsRUFBS2oyQixHQUFJdUUsRUFBTTAzRCxHQU10QyxJQUFJcDhELEdBQU9pOEQsRUFBYyxHQUFHTSxVQUFVLEVBQUdOLEVBQWMsR0FBRzFpRSxPQUFPLEVBQ2pFNjhCLEdBQWUsS0FBUHAyQixFQUFhbThELEVBQU1BLEVBQUluOEQsS0FBS0EsRUFJcEMsT0FFSSxHQUFLazhELEVBR1Q5a0UsRUFBRUUsR0FBS0YsRUFBRUUsR0FBR3VCLFFBQVF5akUsR0FBUSxJQUM1QmxtQyxFQUFPQSxFQUFNaC9CLEVBQUVFLFVBSlgsQ0FRTCxHQUFjLE9BQVQ4K0IsR0FBaUJBLEVBQU1oL0IsRUFBRUUsTUFBUzBCLEVBRXRDLE1BQU9BLEVBRVJvOUIsR0FBT0EsRUFBTWgvQixFQUFFRSxLQUlqQixNQUFPOCtCLEdBR1IsT0FBTyxVQUFVQSxFQUFNMXhCLEdBQ3RCLE1BQU9zM0QsR0FBVzVsQyxFQUFNMXhCLEVBQU1vM0QsSUFvQmpDLFFBQVNqRixHQUFvQmlGLEdBRTVCLEdBQUs3aEQsRUFBRStpQixjQUFlOCtCLEdBT3JCLE1BQU9qRixHQUFvQmlGLEVBQVFDLEVBRS9CLElBQWlCLE9BQVpELEVBR1QsTUFBTyxhQUVILElBQXdCLGtCQUFaQSxHQUVoQixNQUFPLFVBQVUxbEMsRUFBTXRhLEVBQUs0NkMsR0FDM0JvRixFQUFTMWxDLEVBQU0sTUFBT3RhLEVBQUs0NkMsR0FHeEIsSUFBd0IsZ0JBQVpvRixJQUFrRCxLQUF6QkEsRUFBUW5qRSxRQUFRLE1BQzFCLEtBQXpCbWpFLEVBQVFuakUsUUFBUSxNQUF3QyxLQUF6Qm1qRSxFQUFRbmpFLFFBQVEsS0FtRnJELE1BQU8sVUFBVXk5QixFQUFNdGEsR0FDdEJzYSxFQUFLMGxDLEdBQVdoZ0QsRUFqRmpCLElBQUkwZ0QsR0FBVSxTQUFVcG1DLEVBQU10YSxFQUFLOUcsR0FLbEMsSUFBTSxHQUo4QjNkLEdBRWhDNGtFLEVBQWVDLEVBQWNoOEQsRUFBR2s4RCxFQUZoQ2hsRSxFQUFJeWtFLEVBQXFCN21ELEdBQ3pCeW5ELEVBQVFybEUsRUFBRUEsRUFBRW1DLE9BQU8sR0FHYmpDLEVBQUUsRUFBRzRnRSxFQUFLOWdFLEVBQUVtQyxPQUFPLEVBQU0yK0QsRUFBRjVnRSxFQUFTQSxJQUMxQyxDQUtDLEdBSEEya0UsRUFBZ0I3a0UsRUFBRUUsR0FBRzZxQyxNQUFNazZCLElBQzNCSCxFQUFlOWtFLEVBQUVFLEdBQUc2cUMsTUFBTW02QixJQUVyQkwsRUFDTCxDQVVDLEdBVEE3a0UsRUFBRUUsR0FBS0YsRUFBRUUsR0FBR3VCLFFBQVF3akUsR0FBVyxJQUMvQmptQyxFQUFNaC9CLEVBQUVFLE9BR1JELEVBQUlELEVBQUUwSSxRQUNOekksRUFBRWljLE9BQVEsRUFBR2hjLEVBQUUsR0FDZjhrRSxFQUFXL2tFLEVBQUUySSxLQUFLLEtBR2JpYSxFQUFFcGpCLFFBQVNpbEIsR0FFZixJQUFNLEdBQUkzYixHQUFFLEVBQUc2akMsRUFBS2xvQixFQUFJdmlCLE9BQVd5cUMsRUFBRjdqQyxFQUFTQSxJQUV6Q0QsS0FDQXM4RCxFQUFTdDhELEVBQUc0YixFQUFJM2IsR0FBSWk4RCxHQUNwQmhtQyxFQUFNaC9CLEVBQUVFLElBQUt3TCxLQUFNNUMsT0FRcEJrMkIsR0FBTWgvQixFQUFFRSxJQUFPd2tCLENBS2hCLFFBRVNvZ0QsSUFHVDlrRSxFQUFFRSxHQUFLRixFQUFFRSxHQUFHdUIsUUFBUXlqRSxHQUFRLElBQzVCbG1DLEVBQU9BLEVBQU1oL0IsRUFBRUUsSUFBTXdrQixLQUtBLE9BQWpCc2EsRUFBTWgvQixFQUFFRSxLQUFpQjgrQixFQUFNaC9CLEVBQUVFLE1BQVMwQixLQUU5Q285QixFQUFNaC9CLEVBQUVFLFFBRVQ4K0IsRUFBT0EsRUFBTWgvQixFQUFFRSxJQUlYbWxFLEVBQU10NkIsTUFBTW02QixJQUdoQmxtQyxFQUFPQSxFQUFNcW1DLEVBQU01akUsUUFBUXlqRSxHQUFRLEtBQU94Z0QsR0FNMUNzYSxFQUFNcW1DLEVBQU01akUsUUFBUXdqRSxHQUFXLEtBQVF2Z0QsRUFJekMsT0FBTyxVQUFVc2EsRUFBTXRhLEdBQ3RCLE1BQU8wZ0QsR0FBU3BtQyxFQUFNdGEsRUFBS2dnRCxJQW1COUIsUUFBU1ksR0FBbUJsVyxHQUUzQixNQUFPbVcsSUFBUW5XLEVBQVM2UyxPQUFRLFVBU2pDLFFBQVN1RCxHQUFlcFcsR0FFdkJBLEVBQVM2UyxPQUFPOS9ELE9BQVMsRUFDekJpdEQsRUFBU2dVLGdCQUFnQmpoRSxPQUFTLEVBQ2xDaXRELEVBQVNxVyxVQUFVdGpFLE9BQVMsRUFDNUJpdEQsRUFBU2tVLFFBV1YsUUFBU29DLEdBQWdCMWxFLEVBQUcybEUsRUFBU3pwRCxHQUlwQyxJQUFNLEdBRkYwcEQsR0FBZSxHQUVUMWxFLEVBQUUsRUFBRzRnRSxFQUFLOWdFLEVBQUVtQyxPQUFXMitELEVBQUY1Z0UsRUFBU0EsSUFFbENGLEVBQUVFLElBQU15bEUsRUFFWkMsRUFBZTFsRSxFQUVORixFQUFFRSxHQUFLeWxFLEdBRWhCM2xFLEVBQUVFLElBSWlCLEtBQWhCMGxFLEdBQXNCMXBELElBQVd0YSxHQUVyQzVCLEVBQUVrYyxPQUFRMHBELEVBQWMsR0FxQjFCLFFBQVNDLEdBQWV6VyxFQUFVNFUsRUFBUXBtRCxFQUFLcW1ELEdBRTlDLEdBQ0kvakUsR0FBR2k4RCxFQURIMTRDLEVBQU0yckMsRUFBUzZTLE9BQVErQixHQUV2QjhCLEVBQVksU0FBV3YxQixFQUFNd3hCLEdBSWhDLEtBQVF4eEIsRUFBS3YyQixXQUFXN1gsUUFDdkJvdUMsRUFBSy9sQyxZQUFhK2xDLEVBQUtseUIsV0FHeEJreUIsR0FBS2xtQyxVQUFZKzNELEVBQWdCaFQsRUFBVTRVLEVBQVFqQyxFQUFLLFdBSXpELElBQWEsUUFBUm5rRCxJQUFxQkEsR0FBZSxTQUFSQSxHQUErQixRQUFaNkYsRUFBSTdGLEtBT25ELENBRUosR0FBSTB4QixHQUFRN3JCLEVBQUlzZ0QsT0FFaEIsSUFBS3owQixFQUNKLEdBQUsyMEIsSUFBV3JpRSxFQUNma2tFLEVBQVd4MkIsRUFBTTIwQixHQUFTQSxPQUcxQixLQUFNL2pFLEVBQUUsRUFBR2k4RCxFQUFJN3NCLEVBQU1udEMsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3JDNGxFLEVBQVd4MkIsRUFBTXB2QyxHQUFJQSxPQWZ4QnVqQixHQUFJMC9DLE9BQVNRLEVBQ1h2VSxFQUFVM3JDLEVBQUt3Z0QsRUFBUUEsSUFBV3JpRSxFQUFZQSxFQUFZNmhCLEVBQUkwL0MsUUFFOURua0MsSUFvQkh2YixHQUFJc2lELFdBQWEsS0FDakJ0aUQsRUFBSXVpRCxhQUFlLElBSW5CLElBQUk5VSxHQUFPOUIsRUFBUzJPLFNBQ3BCLElBQUtrRyxJQUFXcmlFLEVBQ2ZzdkQsRUFBTStTLEdBQVNyRixNQUFRLFNBRW5CLENBQ0osSUFBTTErRCxFQUFFLEVBQUdpOEQsRUFBSWpMLEVBQUsvdUQsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3BDZ3hELEVBQUtoeEQsR0FBRzArRCxNQUFRLElBSWpCcUgsR0FBa0I3VyxFQUFVM3JDLElBc0I5QixRQUFTa2dELEdBQW1CdlUsRUFBVTNyQyxFQUFLd2dELEVBQVEvN0QsR0FFbEQsR0FHQ3ZHLEdBQU1vZ0UsRUFBYW5KLEVBRm5Cc04sS0FDQUMsRUFBSzFpRCxFQUFJcEYsV0FDS25lLEVBQUUsRUFDaEIwZ0UsRUFBVXhSLEVBQVMyTyxVQUNuQnFJLEVBQWFoWCxFQUFTc1EsY0FHdkJ4M0QsR0FBSUEsSUFBTXRHLEVBQ1RzRyxFQUNBaytELE9BSUQsSUFBSXpoRCxHQUFPLFNBQVdVLEVBQUs4Z0QsR0FDMUIsR0FBb0IsZ0JBQVI5Z0QsR0FBbUIsQ0FDOUIsR0FBSSs0QyxHQUFNLzRDLEVBQUk5akIsUUFBUSxJQUV0QixJQUFhLEtBQVI2OEQsRUFBYSxDQUNqQixHQUFJejVDLEdBQU9VLEVBQUk4L0MsVUFBVy9HLEVBQUksR0FDMUJpSSxFQUFTNUcsRUFBb0JwNkMsRUFDakNnaEQsR0FBUW4rRCxFQUFHaStELEVBQUd6aEUsYUFBY2lnQixPQU0zQjJoRCxFQUFjLFNBQVcvMUIsR0FDNUIsR0FBSzB6QixJQUFXcmlFLEdBQWFxaUUsSUFBVy9qRSxFQUl2QyxHQUhBNmhFLEVBQU1uQixFQUFRMWdFLEdBQ2QwNEQsRUFBVy8xQyxFQUFFOFIsS0FBSzRiLEVBQUtsbUMsV0FFbEIwM0QsR0FBT0EsRUFBSTVDLFVBQVksQ0FDM0IsR0FBSWtILEdBQVM1RyxFQUFvQnNDLEVBQUk1RCxNQUFNd0csRUFDM0MwQixHQUFRbitELEVBQUcwd0QsR0FFWGowQyxFQUFNbzlDLEVBQUk1RCxNQUFNeHVDLEtBQU00Z0IsR0FDdEI1ckIsRUFBTW85QyxFQUFJNUQsTUFBTTd3RCxLQUFNaWpDLEdBQ3RCNXJCLEVBQU1vOUMsRUFBSTVELE1BQU1yaUMsT0FBUXlVLE9BS25CNjFCLElBQ0dyRSxFQUFJd0UsVUFFVnhFLEVBQUl3RSxRQUFVOUcsRUFBb0JzQyxFQUFJNUQsUUFFdkM0RCxFQUFJd0UsUUFBU3IrRCxFQUFHMHdELElBR2hCMXdELEVBQUVoSSxHQUFLMDRELENBS1YxNEQsS0FHRCxJQUFLaW1FLEVBRUosS0FBUUEsR0FDUHhrRSxFQUFPd2tFLEVBQUcvaUUsU0FBU3FGLGVBRU4sTUFBUjlHLEdBQXdCLE1BQVJBLEtBQ3BCMmtFLEVBQWFILEdBQ2JELEVBQUl4NkQsS0FBTXk2RCxJQUdYQSxFQUFLQSxFQUFHSyxnQkFHTCxDQUVKTixFQUFNemlELEVBQUlzZ0QsT0FFVixLQUFNLEdBQUloN0QsR0FBRSxFQUFHODRELEVBQUlxRSxFQUFJL2pFLE9BQVcwL0QsRUFBRjk0RCxFQUFRQSxJQUN2Q3U5RCxFQUFhSixFQUFJbjlELElBS25CLEdBQUkwOUQsR0FBVWhqRCxFQUFJcEYsV0FBYW9GLEVBQU1BLEVBQUlxL0MsR0FFekMsSUFBSzJELEVBQVUsQ0FDZCxHQUFJdDhELEdBQUtzOEQsRUFBUS9oRSxhQUFjLEtBRTFCeUYsSUFDSnMxRCxFQUFvQnJRLEVBQVNzWCxPQUFTeCtELEVBQUdpQyxHQUkzQyxPQUNDNjBCLEtBQU05MkIsRUFDTm9uQyxNQUFPNDJCLEdBYVQsUUFBUzFDLEdBQWM5RixFQUFXc0YsRUFBTTJELEVBQU81RCxHQUU5QyxHQUlDRCxHQUFLOEQsRUFBSzVJLEVBQ1Y5OUQsRUFBRzRnRSxFQUpIcjlDLEVBQU1pNkMsRUFBVXVFLE9BQU9lLEdBQ3ZCM0QsRUFBVTU3QyxFQUFJMC9DLE9BQ2Q3ekIsSUFJRCxJQUFpQixPQUFaN3JCLEVBQUlxL0MsSUFDVCxDQWVDLElBZEFBLEVBQU02RCxHQUFTcG1FLEVBQVM4SSxjQUFjLE1BRXRDb2EsRUFBSXEvQyxJQUFNQSxFQUNWci9DLEVBQUlzZ0QsUUFBVXowQixFQUtkd3pCLEVBQUllLGFBQWViLEVBR25CaUQsRUFBa0J2SSxFQUFXajZDLEdBR3ZCdmpCLEVBQUUsRUFBRzRnRSxFQUFLcEQsRUFBVUssVUFBVTU3RCxPQUFXMitELEVBQUY1Z0UsRUFBU0EsSUFFckQ4OUQsRUFBT04sRUFBVUssVUFBVTc5RCxHQUUzQjBtRSxFQUFNRCxFQUFRNUQsRUFBTTdpRSxHQUFLSyxFQUFTOEksY0FBZTIwRCxFQUFLNkksV0FDdERELEVBQUlFLGVBQ0hyakQsSUFBS3UvQyxFQUNMbkYsT0FBUTM5RCxHQUdUb3ZDLEVBQU01akMsS0FBTWs3RCxLQUdORCxHQUFTM0ksRUFBS2tCLFNBQVdsQixFQUFLRyxRQUFVaitELEtBRTdDMG1FLEVBQUl2OEQsVUFBWSszRCxFQUFnQjFFLEVBQVdzRixFQUFNOWlFLEVBQUcsWUFJaEQ4OUQsRUFBS2MsU0FFVDhILEVBQUk3a0UsV0FBYSxJQUFJaThELEVBQUtjLFFBSXRCZCxFQUFLK0ksV0FBY0osRUFFdkI3RCxFQUFJMTRELFlBQWF3OEQsSUFFTjVJLEVBQUsrSSxVQUFZSixHQUU1QkMsRUFBSXZqRSxXQUFXbUgsWUFBYW84RCxHQUd4QjVJLEVBQUtnSixlQUVUaEosRUFBS2dKLGNBQWNsbkUsS0FBTTQ5RCxFQUFVdUosVUFDbENMLEVBQUt4RSxFQUFnQjFFLEVBQVdzRixFQUFNOWlFLEdBQUttL0QsRUFBUzJELEVBQU05aUUsRUFLN0RpaEUsSUFBaUJ6RCxFQUFXLHVCQUF3QixNQUFPb0YsRUFBS3pELEVBQVMyRCxJQUsxRXYvQyxFQUFJcS9DLElBQUluK0QsYUFBYyxPQUFRLE9BVy9CLFFBQVNzaEUsR0FBa0I3VyxFQUFVM3JDLEdBRXBDLEdBQUljLEdBQUtkLEVBQUlxL0MsSUFDVDlqQyxFQUFPdmIsRUFBSTAvQyxNQUVmLElBQUs1K0MsRUFBSyxDQUNULEdBQUlwYSxHQUFLaWxELEVBQVNpVSxRQUFTcmtDLEVBTTNCLElBSks3MEIsSUFDSm9hLEVBQUdwYSxHQUFLQSxHQUdKNjBCLEVBQUtrb0MsWUFBYyxDQUV2QixHQUFJbG5FLEdBQUlnL0IsRUFBS2tvQyxZQUFZcitELE1BQU0sSUFDL0I0YSxHQUFJMGpELE9BQVMxakQsRUFBSTBqRCxPQUNoQkMsR0FBUzNqRCxFQUFJMGpELE9BQU9sOEQsT0FBUWpMLElBQzVCQSxFQUVENmlCLEVBQUUwQixHQUNBbmlCLFlBQWFxaEIsRUFBSTBqRCxPQUFPditELEtBQUssTUFDN0I1RyxTQUFVZzlCLEVBQUtrb0MsYUFHYmxvQyxFQUFLcW9DLFlBQ1R4a0QsRUFBRTBCLEdBQUlJLEtBQU1xYSxFQUFLcW9DLFlBR2Jyb0MsRUFBS3NvQyxZQUNUemtELEVBQUUwQixHQUFJeWEsS0FBTUEsRUFBS3NvQyxhQVdwQixRQUFTQyxHQUFjN0osR0FFdEIsR0FBSXg5RCxHQUFHaThELEVBQUs1ckIsRUFBTTlzQixFQUFLbzZDLEVBQ25CMkosRUFBUTlKLEVBQVUrSixPQUNsQkMsRUFBUWhLLEVBQVVpSyxPQUNsQkMsRUFBNkMsSUFBOUIva0QsRUFBRSxTQUFVMmtELEdBQU9ybEUsT0FDbEMwbEUsRUFBVW5LLEVBQVVjLFNBQ3BCb0MsRUFBVWxELEVBQVVLLFNBTXhCLEtBSks2SixJQUNKbmtELEVBQU1aLEVBQUUsU0FBUzAwQyxTQUFVaVEsSUFHdEJ0bkUsRUFBRSxFQUFHaThELEVBQUl5RSxFQUFReitELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUN2QzI5RCxFQUFTK0MsRUFBUTFnRSxHQUNqQnF3QyxFQUFPMXRCLEVBQUdnN0MsRUFBT0YsS0FBTTM3RCxTQUFVNjdELEVBQU9pQixRQUVuQzhJLEdBQ0pyM0IsRUFBS2duQixTQUFVOXpDLEdBSVhpNkMsRUFBVWlDLFVBQVVDLFFBQ3hCcnZCLEVBQUt2dUMsU0FBVTY3RCxFQUFPcUMsZUFFakJyQyxFQUFPZ0MsYUFBYyxJQUN6QnR2QixFQUNFNXJCLEtBQU0sV0FBWSs0QyxFQUFVb0ssV0FDNUJuakQsS0FBTSxnQkFBaUIrNEMsRUFBVXFLLFVBRW5DQyxHQUF1QnRLLEVBQVdHLEVBQU9GLElBQUt6OUQsS0FJM0MyOUQsRUFBT0ssUUFBVTN0QixFQUFLLEdBQUdsbUMsV0FDN0JrbUMsRUFBSzlyQixLQUFNbzVDLEVBQU9LLFFBR25CK0osR0FBYXZLLEVBQVcsVUFDdkJBLEVBQVdudEIsRUFBTXN0QixFQUFRZ0ssRUFtQjNCLElBZktELEdBQ0pNLEVBQWlCeEssRUFBVXlLLFNBQVVYLEdBSXJDM2tELEVBQUUya0QsR0FBT2hqRCxLQUFLLE9BQU9HLEtBQUssT0FBUSxPQUduQzlCLEVBQUUya0QsR0FBT2hqRCxLQUFLLGtCQUFrQnhpQixTQUFVNmxFLEVBQVFPLFdBQ2xEdmxELEVBQUU2a0QsR0FBT2xqRCxLQUFLLGtCQUFrQnhpQixTQUFVNmxFLEVBQVFRLFdBTW5DLE9BQVZYLEVBQWlCLENBQ3JCLEdBQUlwNEIsR0FBUW91QixFQUFVNEssU0FBUyxFQUUvQixLQUFNcG9FLEVBQUUsRUFBR2k4RCxFQUFJN3NCLEVBQU1udEMsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3JDMjlELEVBQVMrQyxFQUFRMWdFLEdBQ2pCMjlELEVBQU8wSyxJQUFNajVCLEVBQU1wdkMsR0FBR3F3QyxLQUVqQnN0QixFQUFPaUIsUUFDWGo4QyxFQUFFZzdDLEVBQU8wSyxLQUFLdm1FLFNBQVU2N0QsRUFBT2lCLFNBb0JuQyxRQUFTMEosR0FBYTlLLEVBQVcrSyxFQUFVQyxHQUUxQyxHQUFJeG9FLEdBQUc0Z0UsRUFBTS8zRCxFQUFHNmpDLEVBQU01aUMsRUFBU3JCLEVBQUdnZ0UsRUFJOUJDLEVBQVVDLEVBSFZDLEtBQ0FDLEtBQ0FDLEVBQVd0TCxFQUFVSyxVQUFVNTdELE1BR25DLElBQU9zbUUsRUFBUCxDQVdBLElBTk1DLElBQW1COW1FLElBRXhCOG1FLEdBQWlCLEdBSVp4b0UsRUFBRSxFQUFHNGdFLEVBQUsySCxFQUFTdG1FLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUMzQyxDQUtDLElBSkE0b0UsRUFBUTVvRSxHQUFLdW9FLEVBQVN2b0UsR0FBR3dJLFFBQ3pCb2dFLEVBQVE1b0UsR0FBRzRpRSxJQUFNMkYsRUFBU3ZvRSxHQUFHNGlFLElBR3ZCLzVELEVBQUVpZ0UsRUFBUyxFQUFJamdFLEdBQUcsRUFBSUEsSUFFckIyMEQsRUFBVUssVUFBVWgxRCxHQUFHZytELFVBQWEyQixHQUV6Q0ksRUFBUTVvRSxHQUFHZ2MsT0FBUW5ULEVBQUcsRUFLeEJnZ0UsR0FBU3I5RCxTQUdWLElBQU14TCxFQUFFLEVBQUc0Z0UsRUFBS2dJLEVBQVEzbUUsT0FBVzIrRCxFQUFGNWdFLEVBQVNBLElBQzFDLENBSUMsR0FIQXlvRSxFQUFXRyxFQUFRNW9FLEdBQUc0aUUsSUFLckIsS0FBUW42RCxFQUFJZ2dFLEVBQVN0cUQsWUFFcEJzcUQsRUFBU24rRCxZQUFhN0IsRUFJeEIsS0FBTUksRUFBRSxFQUFHNmpDLEVBQUtrOEIsRUFBUTVvRSxHQUFHaUMsT0FBV3lxQyxFQUFGN2pDLEVBQVNBLElBUTVDLEdBTkE2L0QsRUFBVyxFQUNYQyxFQUFXLEVBS05FLEVBQVM3b0UsR0FBRzZJLEtBQU9uSCxFQUN4QixDQUtDLElBSkErbUUsRUFBU3YrRCxZQUFhMCtELEVBQVE1b0UsR0FBRzZJLEdBQUd3bkMsTUFDcEN3NEIsRUFBUzdvRSxHQUFHNkksR0FBSyxFQUdUKy9ELEVBQVE1b0UsRUFBRTBvRSxLQUFjaG5FLEdBQ3hCa25FLEVBQVE1b0UsR0FBRzZJLEdBQUd3bkMsTUFBUXU0QixFQUFRNW9FLEVBQUUwb0UsR0FBVTcvRCxHQUFHd25DLE1BRXBEdzRCLEVBQVM3b0UsRUFBRTBvRSxHQUFVNy9ELEdBQUssRUFDMUI2L0QsR0FJRCxNQUFRRSxFQUFRNW9FLEdBQUc2SSxFQUFFOC9ELEtBQWNqbkUsR0FDM0JrbkUsRUFBUTVvRSxHQUFHNkksR0FBR3duQyxNQUFRdTRCLEVBQVE1b0UsR0FBRzZJLEVBQUU4L0QsR0FBVXQ0QixNQUNyRCxDQUVDLElBQU12bUMsRUFBRSxFQUFNNCtELEVBQUY1K0QsRUFBYUEsSUFFeEIrK0QsRUFBUzdvRSxFQUFFOEosR0FBR2pCLEVBQUU4L0QsR0FBWSxDQUU3QkEsS0FJRGhtRCxFQUFFaW1ELEVBQVE1b0UsR0FBRzZJLEdBQUd3bkMsTUFDZDVyQixLQUFLLFVBQVdpa0QsR0FDaEJqa0QsS0FBSyxVQUFXa2tELE1BWXRCLFFBQVNJLEdBQVN2TCxHQUdqQixHQUFJd0wsR0FBVy9ILEdBQWlCekQsRUFBVyxvQkFBcUIsV0FBWUEsR0FDNUUsSUFBc0MsS0FBakM3NkMsRUFBRWdOLFNBQVMsRUFBT3E1QyxHQUd0QixXQURBQyxJQUFzQnpMLEdBQVcsRUFJbEMsSUFDSTBMLE1BQ0FDLEVBQVksRUFDWkMsRUFBa0I1TCxFQUFVNEwsZ0JBQzVCQyxFQUFXRCxFQUFnQm5uRSxPQUUzQnFuRSxHQURZOUwsRUFBVStMLFdBQVd0bkUsT0FDekJ1N0QsRUFBVXZDLFdBQ2xCdU8sRUFBb0JoTSxFQUFVZ00sa0JBQzlCQyxFQUE0QyxPQUE5QkMsR0FBZWxNLEdBQzdCK0gsRUFBWS9ILEVBQVUrSCxTQUUxQi9ILEdBQVVtTSxVQUFXLEVBR2hCSCxJQUFzQjluRSxHQUFtQyxLQUF0QjhuRSxJQUV2Q2hNLEVBQVVvTSxlQUFpQkgsRUFDMUJELEVBQ0FBLEdBQXFCaE0sRUFBVXFNLG1CQUM5QixFQUNBTCxFQUVGaE0sRUFBVWdNLGtCQUFvQixHQUcvQixJQUFJTSxHQUFnQnRNLEVBQVVvTSxlQUMxQkcsRUFBY3ZNLEVBQVV3TSxjQUc1QixJQUFLeE0sRUFBVXlNLGNBRWR6TSxFQUFVeU0sZUFBZ0IsRUFDMUJ6TSxFQUFVd0csUUFDVmlGLEdBQXNCekwsR0FBVyxPQUU3QixJQUFNaU0sR0FJTixJQUFNak0sRUFBVTBNLGNBQWdCQyxFQUFlM00sR0FFbkQsV0FKQUEsR0FBVXdHLE9BT1gsSUFBMEIsSUFBckJ1QixFQUFVdGpFLE9BS2QsSUFBTSxHQUhGbW9FLEdBQVNYLEVBQWMsRUFBSUssRUFDM0JPLEVBQU9aLEVBQWNqTSxFQUFVdUUsT0FBTzkvRCxPQUFTOG5FLEVBRXpDbGhFLEVBQUV1aEUsRUFBV0MsRUFBRnhoRSxFQUFTQSxJQUM5QixDQUNDLEdBQUl5aEUsR0FBYS9FLEVBQVUxOEQsR0FDdkJrNUQsRUFBU3ZFLEVBQVV1RSxPQUFRdUksRUFDWCxRQUFmdkksRUFBT2EsS0FFWFUsRUFBYTlGLEVBQVc4TSxFQUd6QixJQUFJQyxHQUFPeEksRUFBT2EsR0FHbEIsSUFBa0IsSUFBYnlHLEVBQ0wsQ0FDQyxHQUFJbUIsR0FBVXBCLEVBQWlCRCxFQUFZRSxFQUN0Q3RILEdBQU8wSSxhQUFlRCxJQUUxQjduRCxFQUFFNG5ELEdBQU1yb0UsWUFBYTYvRCxFQUFPMEksYUFBYzNvRSxTQUFVMG9FLEdBQ3BEekksRUFBTzBJLFlBQWNELEdBT3ZCdkosR0FBaUJ6RCxFQUFXLGdCQUFpQixNQUMzQytNLEVBQU14SSxFQUFPa0IsT0FBUWtHLEVBQVd0Z0UsSUFFbENxZ0UsRUFBTzE5RCxLQUFNKytELEdBQ2JwQixRQUlGLENBRUMsR0FBSXVCLEdBQVFwQixFQUFNbk8sWUFDTSxJQUFuQnFDLEVBQVV3RyxPQUE2QyxRQUE5QjBGLEdBQWVsTSxHQUU1Q2tOLEVBQVFwQixFQUFNaE8sZ0JBRUxnTyxFQUFNbE8sYUFBOEMsSUFBL0JvQyxFQUFVbU4sbUJBRXhDRCxFQUFRcEIsRUFBTWxPLGFBR2Y4TixFQUFRLEdBQU12bUQsRUFBRyxTQUFXaW9ELFFBQVN2QixFQUFXRCxFQUFnQixHQUFLLEtBQ25FcHNELE9BQVEyRixFQUFFLFVBQ1Zrb0QsT0FBVyxNQUNYaFosUUFBVzJQLEVBQWtCaEUsR0FDN0JvTixRQUFXcE4sRUFBVWMsU0FBU3dNLFlBQzNCdm1ELEtBQU1tbUQsSUFBVSxHQUl0QnpKLEdBQWlCekQsRUFBVyxtQkFBb0IsVUFBWTc2QyxFQUFFNjZDLEVBQVUrSixRQUFRdDNELFNBQVMsTUFBTSxHQUM5Rm0xRCxFQUFrQjVILEdBQWFzTSxFQUFlQyxFQUFheEUsSUFFNUR0RSxHQUFpQnpELEVBQVcsbUJBQW9CLFVBQVk3NkMsRUFBRTY2QyxFQUFVaUssUUFBUXgzRCxTQUFTLE1BQU0sR0FDOUZtMUQsRUFBa0I1SCxHQUFhc00sRUFBZUMsRUFBYXhFLEdBRTVELElBQUl4N0QsR0FBTzRZLEVBQUU2NkMsRUFBVXVOLE9BRXZCaGhFLEdBQUtrRyxXQUFXKzZELFNBQ2hCamhFLEVBQUtpVCxPQUFRMkYsRUFBRXVtRCxJQUdmakksR0FBaUJ6RCxFQUFXLGlCQUFrQixRQUFTQSxJQUd2REEsRUFBVXlOLFNBQVUsRUFDcEJ6TixFQUFVME4sV0FBWSxFQUN0QjFOLEVBQVVtTSxVQUFXLEVBV3RCLFFBQVN3QixHQUFXamMsRUFBVWtjLEdBRTdCLEdBQ0NDLEdBQVduYyxFQUFTdVEsVUFDcEJod0MsRUFBVzQ3QyxFQUFTM0wsTUFDcEI5akMsRUFBV3l2QyxFQUFTQyxPQUVoQjc3QyxJQUNKODdDLEdBQVNyYyxHQUdMdHpCLEVBQ0o0dkMsRUFBbUJ0YyxFQUFVQSxFQUFTdWMsaUJBSXRDdmMsRUFBU3FXLFVBQVlyVyxFQUFTZ1UsZ0JBQWdCMTZELFFBRzFDNGlFLEtBQWlCLElBQ3JCbGMsRUFBUzBhLGVBQWlCLEdBSzNCMWEsRUFBU3djLFVBQVlOLEVBRXJCckMsRUFBUzdaLEdBRVRBLEVBQVN3YyxXQUFZLEVBU3RCLFFBQVNDLEdBQW9Cbk8sR0FFNUIsR0FBSW1LLEdBQVVuSyxFQUFVYyxTQUNwQnNOLEVBQVFqcEQsRUFBRTY2QyxFQUFVcU8sUUFDcEJDLEVBQVVucEQsRUFBRSxVQUFVOUQsYUFBYytzRCxHQUNwQ1AsRUFBVzdOLEVBQVVpQyxVQUdyQnZjLEVBQVN2Z0MsRUFBRSxVQUNkMVksR0FBU3V6RCxFQUFVcUssU0FBUyxXQUM1QitDLFFBQVNqRCxFQUFRb0UsVUFBWXZPLEVBQVVpSyxPQUFTLEdBQUssSUFBSUUsRUFBUXFFLFlBR2xFeE8sR0FBVXlPLFNBQVdILEVBQVEsR0FDN0J0TyxFQUFVME8sY0FBZ0JocEIsRUFBTztBQUNqQ3NhLEVBQVUyTyxxQkFBdUIzTyxFQUFVcU8sT0FBT3ZGLFdBS2xELEtBQU0sR0FERjhGLEdBQWFDLEVBQVNDLEVBQVVDLEVBQU9DLEVBQU8zakUsRUFEOUM0akUsRUFBT2pQLEVBQVVrUCxLQUFLL2pFLE1BQU0sSUFFdEIzSSxFQUFFLEVBQUlBLEVBQUV5c0UsRUFBS3hxRSxPQUFTakMsSUFDaEMsQ0FJQyxHQUhBb3NFLEVBQWMsS0FDZEMsRUFBVUksRUFBS3pzRSxHQUVDLEtBQVhxc0UsRUFDTCxDQU1DLEdBSkFDLEVBQVczcEQsRUFBRSxVQUFVLEdBR3ZCNHBELEVBQVFFLEVBQUt6c0UsRUFBRSxHQUNELEtBQVR1c0UsR0FBeUIsS0FBVEEsRUFDckIsQ0FHQyxJQUZBQyxFQUFRLEdBQ1IzakUsRUFBSSxFQUNJNGpFLEVBQUt6c0UsRUFBRTZJLElBQU0wakUsR0FFcEJDLEdBQVNDLEVBQUt6c0UsRUFBRTZJLEdBQ2hCQSxHQWdCRCxJQVpjLEtBQVQyakUsRUFFSkEsRUFBUTdFLEVBQVFnRixXQUVFLEtBQVRILElBRVRBLEVBQVE3RSxFQUFRaUYsWUFNVSxJQUF0QkosRUFBTW5yRSxRQUFRLEtBQ25CLENBQ0MsR0FBSXdyRSxHQUFTTCxFQUFNN2pFLE1BQU0sSUFDekIyakUsR0FBU3JpRSxHQUFLNGlFLEVBQU8sR0FBR0MsT0FBTyxFQUFHRCxFQUFPLEdBQUc1cUUsT0FBTyxHQUNuRHFxRSxFQUFTenFFLFVBQVlnckUsRUFBTyxPQUVBLEtBQW5CTCxFQUFNbGtFLE9BQU8sR0FFdEJna0UsRUFBU3JpRSxHQUFLdWlFLEVBQU1NLE9BQU8sRUFBR04sRUFBTXZxRSxPQUFPLEdBSTNDcXFFLEVBQVN6cUUsVUFBWTJxRSxDQUd0QnhzRSxJQUFLNkksRUFHTnE2QyxFQUFPbG1DLE9BQVFzdkQsR0FDZnBwQixFQUFTdmdDLEVBQUUycEQsT0FFUCxJQUFnQixLQUFYRCxFQUdUbnBCLEVBQVNBLEVBQU9uZ0QsYUFHWixJQUFnQixLQUFYc3BFLEdBQWtCaEIsRUFBUzBCLFdBQWExQixFQUFTMkIsY0FHMURaLEVBQWNhLEdBQXNCelAsT0FFaEMsSUFBZ0IsS0FBWDZPLEdBQWtCaEIsRUFBU0MsUUFHcENjLEVBQWNjLEVBQXNCMVAsT0FFaEMsSUFBZ0IsS0FBWDZPLEdBQWtCaEIsRUFBUzhCLFlBR3BDZixFQUFjZ0IsR0FBMEI1UCxPQUVwQyxJQUFnQixLQUFYNk8sRUFHVEQsRUFBY2lCLEdBQXFCN1AsT0FFL0IsSUFBaUIsS0FBWjZPLEdBQW1CaEIsRUFBU2lDLE1BR3JDbEIsRUFBY21CLEdBQW9CL1AsT0FFOUIsSUFBZ0IsS0FBWDZPLEdBQWtCaEIsRUFBUzBCLFVBR3BDWCxFQUFjb0IsR0FBd0JoUSxPQUVsQyxJQUFzQyxJQUFqQ3hDLEdBQVVnSCxJQUFJeUwsUUFBUXhyRSxPQUkvQixJQUFNLEdBREZ5ckUsR0FBYTFTLEdBQVVnSCxJQUFJeUwsUUFDckIzakUsRUFBRSxFQUFHdzRELEVBQUtvTCxFQUFXenJFLE9BQVdxZ0UsRUFBRng0RCxFQUFTQSxJQUVoRCxHQUFLdWlFLEdBQVdxQixFQUFXNWpFLEdBQUc2akUsU0FDOUIsQ0FDQ3ZCLEVBQWNzQixFQUFXNWpFLEdBQUc4akUsT0FBUXBRLEVBQ3BDLE9BTUgsR0FBSzRPLEVBQ0wsQ0FDQyxHQUFJeUIsR0FBY3JRLEVBQVVxUSxXQUVyQkEsR0FBWXhCLEtBRWxCd0IsRUFBWXhCLE9BR2J3QixFQUFZeEIsR0FBUzdnRSxLQUFNNGdFLEdBQzNCbHBCLEVBQU9sbUMsT0FBUW92RCxJQUtqQk4sRUFBUWdDLFlBQWE1cUIsR0FDckJzYSxFQUFVeU8sU0FBVyxLQWF0QixRQUFTakUsR0FBa0IrRixFQUFTQyxHQUVuQyxHQUNJcEwsR0FBS3FMLEVBQ0xqdUUsRUFBRzhKLEVBQUdULEVBQUd1M0QsRUFBWXNOLEVBQWFDLEVBQVN4RixFQUFVRCxFQUNyRDBGLEVBSEFDLEVBQU8xckQsRUFBRXFyRCxHQUFRLzlELFNBQVMsTUFJMUJxK0QsRUFBYSxTQUFXeHVFLEVBQUdFLEVBQUc2SSxHQUVuQixJQURkLEdBQUlpQixHQUFJaEssRUFBRUUsR0FDWThKLEVBQUVqQixJQUN2QkEsR0FFRCxPQUFPQSxHQU1SLEtBSEFrbEUsRUFBUS94RCxPQUFRLEVBQUcreEQsRUFBUTlyRSxRQUdyQmpDLEVBQUUsRUFBRzRnRSxFQUFLeU4sRUFBS3BzRSxPQUFXMitELEVBQUY1Z0UsRUFBU0EsSUFFdEMrdEUsRUFBUXZpRSxRQUlULEtBQU14TCxFQUFFLEVBQUc0Z0UsRUFBS3lOLEVBQUtwc0UsT0FBVzIrRCxFQUFGNWdFLEVBQVNBLElBT3RDLElBTEE0aUUsRUFBTXlMLEVBQUtydUUsR0FDWG11RSxFQUFVLEVBR1ZGLEVBQVFyTCxFQUFJemtELFdBQ0o4dkQsR0FBUSxDQUNmLEdBQXFDLE1BQWhDQSxFQUFNL3FFLFNBQVNxRixlQUNpQixNQUFoQzBsRSxFQUFNL3FFLFNBQVNxRixjQWlCbkIsSUFkQW9nRSxFQUEyQyxFQUFoQ3NGLEVBQU16cEUsYUFBYSxXQUM5QmtrRSxFQUEyQyxFQUFoQ3VGLEVBQU16cEUsYUFBYSxXQUM5Qm1rRSxFQUFhQSxHQUF1QixJQUFYQSxHQUEyQixJQUFYQSxFQUFvQkEsRUFBSixFQUN6REQsRUFBYUEsR0FBdUIsSUFBWEEsR0FBMkIsSUFBWEEsRUFBb0JBLEVBQUosRUFLekR3RixFQUFjSSxFQUFZUCxFQUFTL3RFLEVBQUdtdUUsR0FHdENDLEVBQXVCLElBQWJ6RixHQUFpQixHQUFPLEVBRzVCdC9ELEVBQUUsRUFBTXMvRCxFQUFGdC9ELEVBQWFBLElBRXhCLElBQU1TLEVBQUUsRUFBTTQrRCxFQUFGNStELEVBQWFBLElBRXhCaWtFLEVBQVEvdEUsRUFBRThKLEdBQUdva0UsRUFBWTdrRSxJQUN4QmduQyxLQUFRNDlCLEVBQ1JqcEQsT0FBVW9wRCxHQUVYTCxFQUFRL3RFLEVBQUU4SixHQUFHODRELElBQU1BLENBSXRCcUwsR0FBUUEsRUFBTTNILGFBY2pCLFFBQVNpSSxHQUFrQi9RLEVBQVdnUixFQUFTVCxHQUU5QyxHQUFJVSxLQUNFVixLQUVMQSxFQUFVdlEsRUFBVXlLLFNBQ2Z1RyxJQUVKVCxLQUNBL0YsRUFBaUIrRixFQUFTUyxJQUk1QixLQUFNLEdBQUl4dUUsR0FBRSxFQUFHNGdFLEVBQUttTixFQUFROXJFLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUU3QyxJQUFNLEdBQUk2SSxHQUFFLEVBQUc2akMsRUFBS3FoQyxFQUFRL3RFLEdBQUdpQyxPQUFXeXFDLEVBQUY3akMsRUFBU0EsS0FFM0NrbEUsRUFBUS90RSxHQUFHNkksR0FBR21jLFFBQ2Z5cEQsRUFBUTVsRSxJQUFPMjBELEVBQVVrUixnQkFFNUJELEVBQVE1bEUsR0FBS2tsRSxFQUFRL3RFLEdBQUc2SSxHQUFHd25DLEtBSzlCLE9BQU9vK0IsR0FZUixRQUFTRSxHQUFjblIsRUFBVzErQixFQUFNelcsR0FPdkMsR0FKQTQ0QyxHQUFpQnpELEVBQVcsaUJBQWtCLGdCQUFpQjErQixJQUkxREEsR0FBUW5jLEVBQUVwakIsUUFBUXUvQixHQUFRLENBQzlCLEdBQUk4dkMsTUFDQUMsRUFBVyxZQUVmbHNELEdBQUV5QixLQUFNMGEsRUFBTSxTQUFVOVYsRUFBS3hFLEdBQzVCLEdBQUlxbUIsR0FBUXJtQixFQUFJL2lCLEtBQUtvcEMsTUFBTWdrQyxFQUUzQixJQUFLaGtDLEVBQVEsQ0FFWixHQUFJcHBDLEdBQU9vcEMsRUFBTSxFQUVWK2pDLEdBQUtudEUsS0FDWG10RSxFQUFLbnRFLE9BRU5tdEUsRUFBS250RSxHQUFPK0osS0FBTWdaLEVBQUlya0IsV0FHdEJ5dUUsR0FBSXBxRCxFQUFJL2lCLE1BQVEraUIsRUFBSXJrQixRQUd0QjIrQixFQUFPOHZDLEVBR1IsR0FBSUUsR0FDQUMsRUFBT3ZSLEVBQVV1UixLQUNqQjV2RSxFQUFXcStELEVBQVV1SixVQUNyQjc0RCxFQUFXLFNBQVc2akIsR0FDekJrdkMsR0FBaUJ6RCxFQUFXLEtBQU0sT0FBUUEsRUFBV3pyQyxFQUFNeXJDLEVBQVV3UixRQUNyRTNtRCxFQUFJMEosR0FHTCxJQUFLcFAsRUFBRStpQixjQUFlcXBDLElBQVVBLEVBQUtqd0MsS0FDckMsQ0FDQ2d3QyxFQUFXQyxFQUFLandDLElBRWhCLElBQUltd0MsR0FBVXRzRCxFQUFFeVAsV0FBWTA4QyxHQUMzQkEsRUFBVWh3QyxFQUFNMCtCLEdBQ2hCc1IsQ0FHRGh3QyxHQUFPbmMsRUFBRXlQLFdBQVkwOEMsSUFBY0csRUFDbENBLEVBQ0F0c0QsRUFBRTlpQixRQUFRLEVBQU1pL0IsRUFBTW13QyxTQUloQkYsR0FBS2p3QyxLQUdiLEdBQUlvd0MsSUFDSHB3QyxLQUFRQSxFQUNScXdDLFFBQVcsU0FBVXA5QyxHQUNwQixHQUFJa1UsR0FBUWxVLEVBQUtrVSxPQUFTbFUsRUFBS3E5QyxNQUMxQm5wQyxJQUNKbytCLEdBQVE3RyxFQUFXLEVBQUd2M0IsR0FHdkJ1M0IsRUFBVXpyQyxLQUFPQSxFQUNqQjdqQixFQUFVNmpCLElBRVhzOUMsU0FBWSxPQUNaM3BCLE9BQVMsRUFDVHQ0QyxLQUFRb3dELEVBQVU4UixjQUNsQnJwQyxNQUFTLFNBQVVzcEMsRUFBS3RwQyxFQUFPdXBDLEdBQzlCLEdBQUlDLEdBQU14TyxHQUFpQnpELEVBQVcsS0FBTSxPQUFRQSxFQUFXLEtBQU1BLEVBQVV3UixPQUUvQyxNQUEzQnJzRCxFQUFFZ04sU0FBUyxFQUFNOC9DLEtBQ1AsZUFBVHhwQyxFQUNKbytCLEdBQVE3RyxFQUFXLEVBQUcsd0JBQXlCLEdBRW5CLElBQW5CK1IsRUFBSTdrQyxZQUNiMjVCLEdBQVE3RyxFQUFXLEVBQUcsYUFBYyxJQUl0Q3lMLEdBQXNCekwsR0FBVyxJQUtuQ0EsR0FBVWtTLFVBQVk1d0MsRUFHdEJtaUMsR0FBaUJ6RCxFQUFXLEtBQU0sVUFBV0EsRUFBVzErQixJQUVuRDArQixFQUFVbVMsYUFHZG5TLEVBQVVtUyxhQUFhL3ZFLEtBQU1ULEVBQzVCcStELEVBQVVvUyxZQUNWanRELEVBQUU4M0MsSUFBSzM3QixFQUFNLFNBQVV0YSxFQUFLd0UsR0FDM0IsT0FBU3ZuQixLQUFNdW5CLEVBQUs3b0IsTUFBT3FrQixLQUU1QnRXLEVBQ0FzdkQsR0FHUUEsRUFBVW9TLGFBQStCLGdCQUFUYixHQUd6Q3ZSLEVBQVV3UixNQUFRcnNELEVBQUVvc0QsS0FBTXBzRCxFQUFFOWlCLE9BQVFxdkUsR0FDbkNXLElBQUtkLEdBQVF2UixFQUFVb1MsZUFHZmp0RCxFQUFFeVAsV0FBWTI4QyxHQUd2QnZSLEVBQVV3UixNQUFRRCxFQUFLbnZFLEtBQU1ULEVBQVUyL0IsRUFBTTV3QixFQUFVc3ZELElBS3ZEQSxFQUFVd1IsTUFBUXJzRCxFQUFFb3NELEtBQU1wc0QsRUFBRTlpQixPQUFRcXZFLEVBQVVILElBRzlDQSxFQUFLandDLEtBQU9nd0MsR0FXZCxRQUFTM0UsR0FBZWpiLEdBRXZCLE1BQUtBLEdBQVM0Z0IsY0FDYjVnQixFQUFTOFUsUUFDVGlGLEdBQXNCL1osR0FBVSxHQUVoQ3lmLEVBQ0N6ZixFQUNBNmdCLEVBQW1CN2dCLEdBQ25CLFNBQVNuOUIsR0FDUmkrQyxFQUFtQjlnQixFQUFVbjlCLE1BSXhCLElBRUQsRUFlUixRQUFTZytDLEdBQW1CN2dCLEdBRTNCLEdBTUNsdkQsR0FBY2l3RSxFQUFVdFMsRUFBUXVTLEVBTGhDeFAsRUFBVXhSLEVBQVMyTyxVQUNuQnNTLEVBQWN6UCxFQUFReitELE9BQ3RCb3BFLEVBQVduYyxFQUFTdVEsVUFDcEIyUSxFQUFZbGhCLEVBQVN1YyxnQkFDckI0RSxFQUFlbmhCLEVBQVNpUCxnQkFDckJyL0IsS0FDSHJQLEVBQU82Z0QsR0FBZ0JwaEIsR0FDdkJxaEIsRUFBZXJoQixFQUFTMGEsZUFDeEI0RyxFQUFnQm5GLEVBQVMwQixhQUFjLEVBQ3RDN2QsRUFBU3VoQixnQkFDVCxHQUVFQyxFQUFRLFNBQVdqdkUsRUFBTXRCLEdBQzVCMitCLEVBQUt0ekIsTUFBUS9KLEtBQVFBLEVBQU10QixNQUFTQSxJQUlyQ3V3RSxHQUFPLFFBQWtCeGhCLEVBQVM4VSxPQUNsQzBNLEVBQU8sV0FBa0JQLEdBQ3pCTyxFQUFPLFdBQWtCckwsR0FBUTNFLEVBQVMsU0FBVWg0RCxLQUFLLE1BQ3pEZ29FLEVBQU8sZ0JBQWtCSCxHQUN6QkcsRUFBTyxpQkFBa0JGLEVBR3pCLElBQUl4b0UsSUFDSDZiLEtBQVNxckMsRUFBUzhVLE1BQ2xCdEQsV0FDQWlRLFNBQ0FoaUUsTUFBUzRoRSxFQUNUdHVFLE9BQVN1dUUsRUFDVEksUUFDQ3p3RSxNQUFPaXdFLEVBQVVTLFFBQ2pCQyxNQUFPVixFQUFVVyxRQUluQixLQUFNL3dFLEVBQUUsRUFBTW13RSxFQUFGbndFLEVBQWdCQSxJQUMzQjI5RCxFQUFTK0MsRUFBUTFnRSxHQUNqQmt3RSxFQUFlRyxFQUFhcndFLEdBQzVCaXdFLEVBQWdDLGtCQUFkdFMsR0FBT00sTUFBb0IsV0FBYU4sRUFBT00sTUFFakVqMkQsRUFBRTA0RCxRQUFRbDFELE1BQ1RzekIsS0FBWW14QyxFQUNaeHVFLEtBQVlrOEQsRUFBT3FULE1BQ25CQyxXQUFZdFQsRUFBT3VULFlBQ25CQyxVQUFZeFQsRUFBT2dDLFVBQ25CaVIsUUFDQ3p3RSxNQUFPK3ZFLEVBQWFXLFFBQ3BCQyxNQUFPWixFQUFhYSxVQUl0QkwsRUFBTyxhQUFhMXdFLEVBQUdpd0UsR0FFbEI1RSxFQUFTQyxVQUNib0YsRUFBTyxXQUFXMXdFLEVBQU9rd0UsRUFBYVcsU0FDdENILEVBQU8sVUFBVTF3RSxFQUFRa3dFLEVBQWFhLFFBQ3RDTCxFQUFPLGVBQWUxd0UsRUFBRzI5RCxFQUFPdVQsY0FHNUI3RixFQUFTM0wsT0FDYmdSLEVBQU8sYUFBYTF3RSxFQUFHMjlELEVBQU9nQyxVQUkzQjBMLEdBQVNDLFVBQ2JvRixFQUFPLFVBQVdOLEVBQVVTLFNBQzVCSCxFQUFPLFNBQVVOLEVBQVVXLFNBR3ZCMUYsRUFBUzNMLFFBQ2IvOEMsRUFBRXlCLEtBQU1xTCxFQUFNLFNBQVd6dkIsRUFBR3drQixHQUMzQnhjLEVBQUUyb0UsTUFBTW5sRSxNQUFRbXlELE9BQVFuNUMsRUFBSXE5QyxJQUFLdVAsSUFBSzVzRCxFQUFJNHNELE1BRTFDVixFQUFPLFlBQVkxd0UsRUFBR3drQixFQUFJcTlDLEtBQzFCNk8sRUFBTyxZQUFZMXdFLEVBQUd3a0IsRUFBSTRzRCxPQUczQlYsRUFBTyxlQUFnQmpoRCxFQUFLeHRCLFFBSzdCLElBQUlvdkUsR0FBU3JXLEdBQVVnSCxJQUFJcVAsT0FBT3RDLElBQ2xDLE9BQWdCLFFBQVhzQyxFQUNHbmlCLEVBQVMwZ0IsWUFBYzl3QyxFQUFPOTJCLEVBSy9CcXBFLEVBQVN2eUMsRUFBTzkyQixFQWV4QixRQUFTZ29FLEdBQW9COWdCLEVBQVVuOUIsR0FJdEMsR0FBSXUvQyxHQUFTLFNBQVdDLEVBQUtDLEdBQzVCLE1BQU96L0MsR0FBS3cvQyxLQUFTN3ZFLEVBQVlxd0IsRUFBS3cvQyxHQUFPeC9DLEVBQUt5L0MsSUFHL0MxeUMsRUFBTzJ5QyxFQUFnQnZpQixFQUFVbjlCLEdBQ2pDbE8sRUFBa0J5dEQsRUFBUSxRQUF3QixRQUNsREksRUFBa0JKLEVBQVEsZ0JBQXdCLGdCQUNsREssRUFBa0JMLEVBQVEsdUJBQXdCLGtCQUV0RCxJQUFLenRELEVBQU8sQ0FFWCxHQUFVLEVBQUxBLEVBQVNxckMsRUFBUzhVLE1BQ3RCLE1BRUQ5VSxHQUFTOFUsTUFBZSxFQUFQbmdELEVBR2xCeWhELEVBQWVwVyxHQUNmQSxFQUFTMGlCLGVBQW1CNW5FLFNBQVMwbkUsRUFBYyxJQUNuRHhpQixFQUFTMmlCLGlCQUFtQjduRSxTQUFTMm5FLEVBQWlCLEdBRXRELEtBQU0sR0FBSTN4RSxHQUFFLEVBQUdpOEQsRUFBSW45QixFQUFLNzhCLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUN4QzBpRSxFQUFZeFQsRUFBVXB3QixFQUFLOStCLEdBRTVCa3ZELEdBQVNxVyxVQUFZclcsRUFBU2dVLGdCQUFnQjE2RCxRQUU5QzBtRCxFQUFTNGdCLGNBQWUsRUFDeEIvRyxFQUFTN1osR0FFRkEsRUFBUzRpQixnQkFDZkMsR0FBaUI3aUIsRUFBVW45QixHQUc1Qm05QixFQUFTNGdCLGNBQWUsRUFDeEI3RyxHQUFzQi9aLEdBQVUsR0FZakMsUUFBU3VpQixHQUFpQmpVLEVBQVd6ckMsR0FFcEMsR0FBSWlnRCxHQUFVcnZELEVBQUUraUIsY0FBZTgzQixFQUFVdVIsT0FBVXZSLEVBQVV1UixLQUFLaUQsVUFBWXR3RSxFQUM3RTg3RCxFQUFVdVIsS0FBS2lELFFBQ2Z4VSxFQUFVeVUsYUFJWCxPQUFpQixTQUFaRCxFQUNHamdELEVBQUttZ0QsUUFBVW5nRCxFQUFLaWdELEdBR1QsS0FBWkEsRUFDTmpULEVBQW9CaVQsR0FBV2pnRCxHQUMvQkEsRUFTRixRQUFTbTdDLEdBQXVCaGUsR0FFL0IsR0FBSXlZLEdBQVV6WSxFQUFTb1AsU0FDbkI2VCxFQUFVampCLEVBQVMyWSxTQUNuQnVLLEVBQVdsakIsRUFBUytMLFVBQ3BCb1gsRUFBaUJuakIsRUFBU3VjLGdCQUMxQkosRUFBV25jLEVBQVMyZSxZQUNwQnYzQyxFQUFRLCtCQUErQnF4QyxFQUFRMkssYUFBYSxNQUU1RG50RCxFQUFNaXRELEVBQVN2QixPQUNuQjFyRCxHQUFNQSxFQUFJMGxCLE1BQU0sV0FDZjFsQixFQUFJNWpCLFFBQVEsVUFBVyswQixHQUN2Qm5SLEVBQUltUixDQUVMLElBQUlzRixHQUFTalosRUFBRSxVQUNiMVksR0FBUW9oRSxFQUFTbGpFLEVBQXdCLEtBQXBCZ3FFLEVBQVEsVUFDN0J2SCxRQUFTakQsRUFBUTRLLFVBRWpCdjFELE9BQVEyRixFQUFFLFlBQWEzRixPQUFRbUksSUFFN0JxdEQsRUFBVyxXQUVkLEdBQ0lodUQsSUFESTZtRCxFQUFTbGpFLEVBQ053QyxLQUFLeEssTUFBYXdLLEtBQUt4SyxNQUFWLEdBR25CcWtCLElBQU82dEQsRUFBZXhCLFVBQzFCckYsRUFBbUJ0YyxHQUNsQjJoQixRQUFXcnNELEVBQ1h1c0QsT0FBVXNCLEVBQWV0QixPQUN6QjBCLE9BQVVKLEVBQWVJLE9BQ3pCQyxpQkFBb0JMLEVBQWVLLG1CQUlwQ3hqQixFQUFTMGEsZUFBaUIsRUFDMUJiLEVBQVM3WixLQUlQeWpCLEVBQXVDLE9BQXpCempCLEVBQVN5akIsWUFDMUJ6akIsRUFBU3lqQixZQUNxQixRQUE5QmpKLEdBQWV4YSxHQUNkLElBQ0EsRUFFRTBqQixFQUFXandELEVBQUUsUUFBU2laLEdBQ3hCcFgsSUFBSzZ0RCxFQUFleEIsU0FDcEJwc0QsS0FBTSxjQUFlMnRELEVBQVNTLG9CQUM5QnpxRSxLQUNBLDhDQUNBdXFFLEVBQ0NHLEdBQWFOLEVBQVVHLEdBQ3ZCSCxHQUVEcHFFLEtBQU0sY0FBZSxTQUFTSCxHQUU5QixNQUFrQixLQUFiQSxFQUFFMFosU0FDQyxFQURSLFNBSUE4QyxLQUFLLGdCQUFpQjB0RCxFQWdCeEIsT0FiQXh2RCxHQUFFdXNDLEVBQVMyYyxRQUFRenVELEdBQUksZUFBZ0IsU0FBV3NZLEVBQUlqUCxHQUNyRCxHQUFLeW9DLElBQWF6b0MsRUFHakIsSUFDTW1zRCxFQUFTLEtBQU92eUUsRUFBU3kxQyxlQUM3Qjg4QixFQUFTcHVELElBQUs2dEQsRUFBZXhCLFNBRy9CLE1BQVE1b0UsT0FJSDJ6QixFQUFPLEdBV2YsUUFBUzR2QyxHQUFvQmhPLEVBQVd1VixFQUFRQyxHQUUvQyxHQUFJQyxHQUFjelYsRUFBVWlPLGdCQUN4QnlILEVBQWUxVixFQUFVVyxnQkFDekJnVixFQUFlLFNBQVdDLEdBRTdCSCxFQUFZcEMsUUFBVXVDLEVBQVF2QyxRQUM5Qm9DLEVBQVlsQyxPQUFTcUMsRUFBUXJDLE9BQzdCa0MsRUFBWVIsT0FBU1csRUFBUVgsT0FDN0JRLEVBQVlQLGlCQUFtQlUsRUFBUVYsa0JBRXBDVyxFQUFVLFNBQVd6cUUsR0FFeEIsTUFBT0EsR0FBRTBxRSxlQUFpQjV4RSxHQUFha0gsRUFBRTBxRSxhQUFlMXFFLEVBQUVtb0UsT0FRM0QsSUFIQXJQLEVBQWdCbEUsR0FHbUIsT0FBOUJrTSxHQUFlbE0sR0FDcEIsQ0FFQytWLEVBQVcvVixFQUFXdVYsRUFBT2xDLFFBQVNtQyxFQUFRSyxFQUFRTixHQUFTQSxFQUFPTixPQUFRTSxFQUFPTCxrQkFDckZTLEVBQWNKLEVBR2QsS0FBTSxHQUFJL3lFLEdBQUUsRUFBSUEsRUFBRWt6RSxFQUFhanhFLE9BQVNqQyxJQUV2Q3d6RSxFQUFpQmhXLEVBQVcwVixFQUFhbHpFLEdBQUc2d0UsUUFBUzd3RSxFQUFHcXpFLEVBQVFILEVBQWFsekUsSUFDNUVrekUsRUFBYWx6RSxHQUFHeXlFLE9BQVFTLEVBQWFsekUsR0FBRzB5RSxpQkFJMUNlLEdBQWlCalcsT0FJakIyVixHQUFjSixFQUlmdlYsR0FBVTBOLFdBQVksRUFDdEJqSyxHQUFpQnpELEVBQVcsS0FBTSxVQUFXQSxJQVM5QyxRQUFTaVcsR0FBaUJ2a0IsR0FNekIsSUFBTSxHQUZGM3JDLEdBQUt1Z0QsRUFGTDRQLEVBQVUxWSxHQUFVZ0gsSUFBSTRPLE9BQ3hCK0MsRUFBY3prQixFQUFTcVcsVUFHakJ2bEUsRUFBRSxFQUFHaThELEVBQUl5WCxFQUFRenhFLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUFNLENBSWpELElBQU0sR0FIRjR6RSxNQUdNL3FFLEVBQUUsRUFBRzg0RCxFQUFJZ1MsRUFBWTF4RSxPQUFXMC9ELEVBQUY5NEQsRUFBUUEsSUFDL0NpN0QsRUFBUzZQLEVBQWE5cUUsR0FDdEIwYSxFQUFNMnJDLEVBQVM2UyxPQUFRK0IsR0FFbEI0UCxFQUFRMXpFLEdBQUlrdkQsRUFBVTNyQyxFQUFJdWlELGFBQWNoQyxFQUFRdmdELEVBQUkwL0MsT0FBUXA2RCxJQUNoRStxRSxFQUFLcG9FLEtBQU1zNEQsRUFNYjZQLEdBQVkxeEUsT0FBUyxFQUNyQjBnQixFQUFFME8sTUFBT3NpRCxFQUFhQyxJQWV4QixRQUFTSixHQUFrQnRrQixFQUFVMmtCLEVBQVc5UCxFQUFRK00sRUFBT2dELEVBQU9DLEdBRXJFLEdBQW1CLEtBQWRGLEVBUUwsSUFBTSxHQUpGLzBDLEdBQ0FqaEIsRUFBVXF4QyxFQUFTcVcsVUFDbkJ5TyxFQUFXQyxFQUF1QkosRUFBVy9DLEVBQU9nRCxFQUFPQyxHQUVyRC96RSxFQUFFNmQsRUFBUTViLE9BQU8sRUFBSWpDLEdBQUcsRUFBSUEsSUFDckM4K0IsRUFBT293QixFQUFTNlMsT0FBUWxrRCxFQUFRN2QsSUFBSzhsRSxhQUFjL0IsR0FFNUNpUSxFQUFTcHlFLEtBQU1rOUIsSUFDckJqaEIsRUFBUTdCLE9BQVFoYyxFQUFHLEdBZ0J0QixRQUFTdXpFLEdBQVdya0IsRUFBVTU0QixFQUFPcU8sRUFBT21zQyxFQUFPZ0QsRUFBT0MsR0FFekQsR0FHSWwyRCxHQUFTcTJELEVBQWFsMEUsRUFIdEJnMEUsRUFBV0MsRUFBdUIzOUMsRUFBT3c2QyxFQUFPZ0QsRUFBT0MsR0FDdkRJLEVBQWFqbEIsRUFBU3VjLGdCQUFnQm9GLFFBQ3RDdUQsRUFBZ0JsbEIsRUFBU2dVLGVBWTdCLElBUnFDLElBQWhDbEksR0FBVWdILElBQUk0TyxPQUFPM3VFLFNBQ3pCMGlDLEdBQVEsR0FJVHV2QyxFQUFjRyxHQUFlbmxCLEdBR3hCNTRCLEVBQU1yMEIsUUFBVSxFQUNwQml0RCxFQUFTcVcsVUFBWTZPLEVBQWM1ckUsWUFpQm5DLE1BYkswckUsR0FDSHZ2QyxHQUNBd3ZDLEVBQVdseUUsT0FBU3EwQixFQUFNcjBCLFFBQ0ksSUFBOUJxMEIsRUFBTWoxQixRQUFROHlFLElBQ2RqbEIsRUFBUytiLFdBR1YvYixFQUFTcVcsVUFBWTZPLEVBQWM1ckUsU0FJcENxVixFQUFVcXhDLEVBQVNxVyxVQUVidmxFLEVBQUU2ZCxFQUFRNWIsT0FBTyxFQUFJakMsR0FBRyxFQUFJQSxJQUMxQmcwRSxFQUFTcHlFLEtBQU1zdEQsRUFBUzZTLE9BQVFsa0QsRUFBUTdkLElBQUtzMEUsY0FDbkR6MkQsRUFBUTdCLE9BQVFoYyxFQUFHLEdBZ0J2QixRQUFTaTBFLEdBQXVCckQsRUFBUUUsRUFBT2dELEVBQU9DLEdBTXJELEdBSkFuRCxFQUFTRSxFQUNSRixFQUNBMkQsR0FBZ0IzRCxHQUVaa0QsRUFBUSxDQVFaLEdBQUloMEUsR0FBSTZpQixFQUFFODNDLElBQUttVyxFQUFPL2xDLE1BQU8sb0JBQXVCLElBQUssU0FBVzJwQyxHQUNuRSxHQUF3QixNQUFuQkEsRUFBS2xzRSxPQUFPLEdBQWEsQ0FDN0IsR0FBSWdCLEdBQUlrckUsRUFBSzNwQyxNQUFPLFdBQ3BCMnBDLEdBQU9sckUsRUFBSUEsRUFBRSxHQUFLa3JFLEVBR25CLE1BQU9BLEdBQUtqekUsUUFBUSxJQUFLLEtBRzFCcXZFLEdBQVMsVUFBVTl3RSxFQUFFNEksS0FBTSxXQUFZLE9BR3hDLE1BQU8sSUFBSS9HLFFBQVFpdkUsRUFBUW1ELEVBQWtCLElBQU0sSUFVcEQsUUFBU1EsSUFBaUJFLEdBRXpCLE1BQU9BLEdBQUtsekUsUUFBU216RSxHQUFrQixRQVN4QyxRQUFTTCxJQUFnQm5sQixHQUV4QixHQUNJeU8sR0FDQTM5RCxFQUFHNkksRUFBR296RCxFQUFLMEYsRUFBS2dULEVBQVl4USxFQUFVNWdELEVBRnRDbTlDLEVBQVV4UixFQUFTMk8sVUFHbkIrVyxFQUFZNVosR0FBVWdILElBQUk1MEQsS0FBS3dqRSxPQUMvQmlFLEdBQWlCLENBRXJCLEtBQU03MEUsRUFBRSxFQUFHaThELEVBQUkvTSxFQUFTNlMsT0FBTzkvRCxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFHL0MsR0FGQXVqQixFQUFNMnJDLEVBQVM2UyxPQUFPL2hFLElBRWZ1akIsRUFBSXVpRCxhQUFlLENBR3pCLElBRkE2TyxLQUVNOXJFLEVBQUUsRUFBRzg0RCxFQUFJakIsRUFBUXorRCxPQUFXMC9ELEVBQUY5NEQsRUFBUUEsSUFDdkM4MEQsRUFBUytDLEVBQVE3M0QsR0FFWjgwRCxFQUFPdVQsYUFDWC9NLEVBQVdqQyxFQUFnQmhULEVBQVVsdkQsRUFBRzZJLEVBQUcsVUFFdEMrckUsRUFBV2pYLEVBQU9lLFNBQ3RCeUYsRUFBV3lRLEVBQVdqWCxFQUFPZSxPQUFTeUYsSUFLckIsT0FBYkEsSUFDSkEsRUFBVyxJQUdhLGdCQUFiQSxJQUF5QkEsRUFBU3hrRSxXQUM3Q3drRSxFQUFXQSxFQUFTeGtFLGFBSXJCd2tFLEVBQVcsR0FPUEEsRUFBUzlpRSxTQUFxQyxLQUExQjhpRSxFQUFTOWlFLFFBQVEsT0FDekN5ekUsR0FBYTNxRSxVQUFZZzZELEVBQ3pCQSxFQUFXNFEsR0FDVkQsR0FBYTFvQyxZQUNiMG9DLEdBQWFsaEIsV0FHVnVRLEVBQVM1aUUsVUFDYjRpRSxFQUFXQSxFQUFTNWlFLFFBQVEsVUFBVyxLQUd4Q296RSxFQUFXbnBFLEtBQU0yNEQsRUFHbEI1Z0QsR0FBSXVpRCxhQUFlNk8sRUFDbkJweEQsRUFBSSt3RCxZQUFjSyxFQUFXanNFLEtBQUssTUFDbENtc0UsR0FBaUIsRUFJbkIsTUFBT0EsR0FXUixRQUFTRyxJQUFtQjl2RCxHQUUzQixPQUNDMHJELE9BQWlCMXJELEVBQUkyckQsUUFDckJpRCxNQUFpQjV1RCxFQUFJdXRELE9BQ3JCM0IsTUFBaUI1ckQsRUFBSTZyRCxPQUNyQmdELGdCQUFpQjd1RCxFQUFJd3RELGtCQWF2QixRQUFTdUMsSUFBa0IvdkQsR0FFMUIsT0FDQzJyRCxRQUFrQjNyRCxFQUFJMHJELE9BQ3RCNkIsT0FBa0J2dEQsRUFBSTR1RCxNQUN0Qi9DLE9BQWtCN3JELEVBQUk0ckQsTUFDdEI0QixpQkFBa0J4dEQsRUFBSTZ1RCxpQkFVeEIsUUFBU3hHLElBQXFCcmUsR0FFN0IsR0FDQ2dtQixHQUFNaG1CLEVBQVMyWSxTQUNmalAsRUFBUTFKLEVBQVMyZSxZQUFZN3RFLEVBQzdCeUksRUFBSWthLEVBQUUsVUFDTGlvRCxRQUFTMWIsRUFBU29QLFNBQVM2VyxNQUMzQmxyRSxHQUFRMnVELEVBQXNCLEtBQWRzYyxFQUFJLFNBa0J0QixPQWZPdGMsS0FFTjFKLEVBQVNrbUIsZUFBZTVwRSxNQUN2QjZjLEdBQU1ndEQsR0FDTnJFLE1BQVMsZ0JBR1Z2b0UsRUFDRWdjLEtBQU0sT0FBUSxVQUNkQSxLQUFNLFlBQWEsVUFHckI5QixFQUFFdXNDLEVBQVMyYyxRQUFRcG5ELEtBQU0sbUJBQW9CeXdELEVBQUksVUFHM0N6c0UsRUFBRSxHQVNWLFFBQVM0c0UsSUFBZ0JubUIsR0FHeEIsR0FBSTBKLEdBQVExSixFQUFTMmUsWUFBWTd0RSxDQUNqQyxJQUFzQixJQUFqQjQ0RCxFQUFNMzJELE9BQVgsQ0FJQSxHQUNDODRELEdBQVE3TCxFQUFTK0wsVUFDakJ0c0QsRUFBUXVnRCxFQUFTMGEsZUFBZSxFQUNoQ2ovQyxFQUFRdWtDLEVBQVM4YSxlQUNqQmg0RCxFQUFRazlDLEVBQVN5YixpQkFDakJoMkQsRUFBUXU2QyxFQUFTMmEsbUJBQ2pCaEYsRUFBUWx3RCxFQUNQb21ELEVBQUtvYSxNQUNMcGEsRUFBS3VhLFVBRUYzZ0UsS0FBVTNDLElBRWQ2eUQsR0FBTyxJQUFNOUosRUFBS3dhLGVBSW5CMVEsR0FBTzlKLEVBQUt5YSxhQUNaM1EsRUFBTTRRLEdBQWV2bUIsRUFBVTJWLEVBRS9CLElBQUkzMkQsR0FBVzZzRCxFQUFLMmEsY0FDRixRQUFieG5FLElBQ0oyMkQsRUFBTTMyRCxFQUFTdE8sS0FBTXN2RCxFQUFTNlgsVUFDN0I3WCxFQUFVdmdELEVBQU9nYyxFQUFLM1ksRUFBSzJDLEVBQU9rd0QsSUFJcENsaUQsRUFBRWkyQyxHQUFPcjBDLEtBQU1zZ0QsSUFJaEIsUUFBUzRRLElBQWdCdm1CLEVBQVUvcEMsR0FJbEMsR0FDQ3d3RCxHQUFhem1CLEVBQVMwbUIsZUFDdEJqbkUsRUFBYXVnRCxFQUFTMGEsZUFBZSxFQUNyQ2hrQyxFQUFhc3BCLEVBQVN1aEIsZ0JBQ3RCb0YsRUFBYTNtQixFQUFTMmEsbUJBQ3RCN3VDLEVBQXFCLEtBQVI0SyxDQUVkLE9BQU96Z0IsR0FDTjVqQixRQUFRLFdBQVlvMEUsRUFBVS8xRSxLQUFNc3ZELEVBQVV2Z0QsSUFDOUNwTixRQUFRLFNBQVlvMEUsRUFBVS8xRSxLQUFNc3ZELEVBQVVBLEVBQVM4YSxpQkFDdkR6b0UsUUFBUSxTQUFZbzBFLEVBQVUvMUUsS0FBTXN2RCxFQUFVQSxFQUFTeWIsbUJBQ3ZEcHBFLFFBQVEsV0FBWW8wRSxFQUFVLzFFLEtBQU1zdkQsRUFBVTJtQixJQUM5Q3QwRSxRQUFRLFVBQVlvMEUsRUFBVS8xRSxLQUFNc3ZELEVBQVVsMEIsRUFBTSxFQUFJenVCLEtBQUt1aUIsS0FBTW5nQixFQUFRaTNCLEtBQzNFcmtDLFFBQVEsV0FBWW8wRSxFQUFVLzFFLEtBQU1zdkQsRUFBVWwwQixFQUFNLEVBQUl6dUIsS0FBS3VpQixLQUFNK21ELEVBQU1qd0MsS0FVM0UsUUFBU2t3QyxJQUFnQjVtQixHQUV4QixHQUFJbHZELEdBQUc0Z0UsRUFDMkJqRCxFQURyQm9ZLEVBQVc3bUIsRUFBU3NhLGtCQUM3QjlJLEVBQVV4UixFQUFTMk8sVUFDbkJ3TixFQUFXbmMsRUFBU3VRLFVBQ3BCdVcsRUFBZTltQixFQUFTK2EsYUFHNUIsS0FBTy9hLEVBQVMrbUIsYUFFZixXQURBN25FLFlBQVksV0FBWTBuRSxHQUFlNW1CLElBQWUsSUFvQnZELEtBZkF5YyxFQUFtQnpjLEdBR25CbVksRUFBY25ZLEdBQ2RvWixFQUFhcFosRUFBVUEsRUFBUytZLFVBQ2hDSyxFQUFhcFosRUFBVUEsRUFBU2taLFVBR2hDYSxHQUFzQi9aLEdBQVUsR0FHM0JtYyxFQUFTNUssWUFDYkUsR0FBMEJ6UixHQUdyQmx2RCxFQUFFLEVBQUc0Z0UsRUFBS0YsRUFBUXorRCxPQUFXMitELEVBQUY1Z0UsRUFBU0EsSUFDekMyOUQsRUFBUytDLEVBQVExZ0UsR0FFWjI5RCxFQUFPa0QsU0FDWGxELEVBQU9GLElBQUlyMEQsTUFBTXNHLE1BQVF3bUUsR0FBZ0J2WSxFQUFPa0QsUUFJbERJLElBQWlCL1IsRUFBVSxLQUFNLFdBQVlBLElBTTdDaWMsRUFBV2pjLEVBR1gsSUFBSThpQixHQUFVdEksR0FBZXhhLElBQ2IsT0FBWDhpQixHQUFvQmdFLEtBRVIsUUFBWGhFLEVBQ0pyRCxFQUFjemYsS0FBYyxTQUFTbjlCLEdBQ3BDLEdBQUlva0QsR0FBUTFFLEVBQWdCdmlCLEVBQVVuOUIsRUFHdEMsS0FBTS94QixFQUFFLEVBQUlBLEVBQUVtMkUsRUFBTWwwRSxPQUFTakMsSUFDNUIwaUUsRUFBWXhULEVBQVVpbkIsRUFBTW4yRSxHQU03Qmt2RCxHQUFTc2Esa0JBQW9CdU0sRUFFN0I1SyxFQUFXamMsR0FFWCtaLEdBQXNCL1osR0FBVSxHQUNoQzZpQixHQUFpQjdpQixFQUFVbjlCLElBQ3pCbTlCLElBR0grWixHQUFzQi9aLEdBQVUsR0FDaEM2aUIsR0FBaUI3aUIsS0FhcEIsUUFBUzZpQixJQUFrQjdpQixFQUFVbjlCLEdBRXBDbTlCLEVBQVM0aUIsZ0JBQWlCLEdBSXJCLy9DLEdBQVFtOUIsRUFBU2tuQixNQUFNbEUsU0FDM0IxUixFQUF1QnRSLEdBR3hCK1IsR0FBaUIvUixFQUFVLEtBQU0sZUFBZ0JBLEVBQVVuOUIsSUFDM0RrdkMsR0FBaUIvUixFQUFVLGlCQUFrQixRQUFTQSxFQUFVbjlCLElBSWpFLFFBQVNza0QsSUFBa0JubkIsRUFBVTFxQyxHQUVwQyxHQUFJb2hCLEdBQU01N0IsU0FBVXdhLEVBQUssR0FDekIwcUMsR0FBU3VoQixnQkFBa0I3cUMsRUFFM0Iwd0MsR0FBbUJwbkIsR0FHbkIrUixHQUFpQi9SLEVBQVUsS0FBTSxVQUFXQSxFQUFVdHBCLElBVXZELFFBQVNxbkMsSUFBdUIvZCxHQWdCL0IsSUFBTSxHQWJMeVksR0FBV3pZLEVBQVNvUCxTQUNwQjZULEVBQVdqakIsRUFBUzJZLFNBQ3BCeFAsRUFBV25KLEVBQVNxbkIsWUFDcEJDLEVBQVc3ekQsRUFBRXBqQixRQUFTODRELEVBQUssSUFDM0J2bUQsRUFBVzBrRSxFQUFLbmUsRUFBSyxHQUFLQSxFQUMxQitaLEVBQVdvRSxFQUFLbmUsRUFBSyxHQUFLQSxFQUV2QjFsQixFQUFTaHdCLEVBQUUsYUFDZGxoQixLQUFpQjB3RSxFQUFRLFVBQ3pCc0UsZ0JBQWlCdEUsRUFDakJ2SCxRQUFpQmpELEVBQVErTyxnQkFHaEIxMkUsRUFBRSxFQUFHaThELEVBQUlucUQsRUFBUTdQLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUMzQzJ5QyxFQUFPLEdBQUkzeUMsR0FBTSxHQUFJMjJFLFFBQVF2RSxFQUFTcHlFLEdBQUk4UixFQUFROVIsR0FHbkQsSUFBSXdvQyxHQUFNN2xCLEVBQUUsdUJBQXVCN2dCLFNBQVU2bEUsRUFBUWlQLFFBeUJyRCxPQXhCTzFuQixHQUFTMmUsWUFBWXhrRSxJQUMzQm0vQixFQUFJLEdBQUd2K0IsR0FBS2tvRSxFQUFRLFdBR3JCM3BDLEVBQUl2NEIsV0FBVytNLE9BQ2RreUMsRUFBUytMLFVBQVU0YixZQUFZdDFFLFFBQVMsU0FBVW94QyxFQUFPLEdBQUdta0MsWUFLN0RuMEQsRUFBRSxTQUFVNmxCLEdBQ1Zoa0IsSUFBSzBxQyxFQUFTdWhCLGlCQUNkcm9FLEtBQU0sWUFBYSxTQUFTSCxHQUM1Qm91RSxHQUFpQm5uQixFQUFVdnNDLEVBQUVoWSxNQUFNNlosT0FDbkN1a0QsRUFBUzdaLEtBSVh2c0MsRUFBRXVzQyxFQUFTMmMsUUFBUXpqRSxLQUFNLGVBQWdCLFNBQVVILEVBQUd3ZSxFQUFHbWYsR0FDbkRzcEIsSUFBYXpvQyxHQUNqQjlELEVBQUUsU0FBVTZsQixHQUFLaGtCLElBQUtvaEIsS0FJakI0QyxFQUFJLEdBZ0JaLFFBQVNnbEMsSUFBeUJ0ZSxHQUVqQyxHQUNDOWhELEdBQVM4aEQsRUFBUzZuQixnQkFDbEJDLEVBQVNoYyxHQUFVZ0gsSUFBSWlWLE1BQU83cEUsR0FDOUJva0UsRUFBMkIsa0JBQVh3RixHQUNoQkUsRUFBUyxTQUFVaG9CLEdBQ2xCNlosRUFBUzdaLElBRVYzNkIsRUFBTzVSLEVBQUUsVUFBVTdnQixTQUFVb3RELEVBQVNvUCxTQUFTNlksUUFBVS9wRSxHQUFPLEdBQ2hFaStELEVBQVduYyxFQUFTMmUsV0FzQ3JCLE9BcENPMkQsSUFDTndGLEVBQU9wSixPQUFRMWUsRUFBVTM2QixFQUFNMmlELEdBSXpCN0wsRUFBUzdoRSxJQUVmK3FCLEVBQUt0cUIsR0FBS2lsRCxFQUFTMlksU0FBUyxZQUU1QjNZLEVBQVNrbUIsZUFBZTVwRSxNQUN2QjZjLEdBQU0sU0FBVTZtQyxHQUNmLEdBQUtzaUIsRUFBUyxDQUNiLEdBUUN4eEUsR0FBR2k4RCxFQVBIdHRELEVBQWF1Z0QsRUFBUzBhLGVBQ3RCaGtDLEVBQWFzcEIsRUFBU3VoQixnQkFDdEIyRyxFQUFhbG9CLEVBQVMyYSxtQkFDdEI3dUMsRUFBcUIsS0FBUjRLLEVBQ2J5eEMsRUFBT3I4QyxFQUFNLEVBQUl6dUIsS0FBS3VpQixLQUFNbmdCLEVBQVFpM0IsR0FDcEMweEMsRUFBUXQ4QyxFQUFNLEVBQUl6dUIsS0FBS3VpQixLQUFNc29ELEVBQWF4eEMsR0FDMUMyeEMsRUFBVVAsRUFBT0ssRUFBTUMsRUFHeEIsS0FBTXQzRSxFQUFFLEVBQUdpOEQsRUFBSW9QLEVBQVM3aEUsRUFBRXZILE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUMxQytuRSxHQUFhN1ksRUFBVSxjQUN0QkEsRUFBVW1jLEVBQVM3aEUsRUFBRXhKLEdBQUlBLEVBQUd1M0UsRUFBU0YsRUFBTUMsT0FLN0NOLEdBQU9RLFNBQVV0b0IsRUFBVWdvQixJQUc3QmxHLE1BQVMsZ0JBSUp6OEMsRUFhUixRQUFTa2pELElBQWdCdm9CLEVBQVV3b0IsRUFBUVIsR0FFMUMsR0FDQ3ZvRSxHQUFZdWdELEVBQVMwYSxlQUNyQmhrQyxFQUFZc3BCLEVBQVN1aEIsZ0JBQ3JCa0gsRUFBWXpvQixFQUFTMmEsa0JBRUwsS0FBWjhOLEdBQXlCLEtBQVIveEMsRUFFckJqM0IsRUFBUSxFQUVtQixnQkFBWCtvRSxJQUVoQi9vRSxFQUFRK29FLEVBQVM5eEMsRUFFWmozQixFQUFRZ3BFLElBRVpocEUsRUFBUSxJQUdVLFNBQVYrb0UsRUFFVC9vRSxFQUFRLEVBRVcsWUFBVitvRSxHQUVUL29FLEVBQVFpM0IsR0FBTyxFQUNkajNCLEVBQVFpM0IsRUFDUixFQUVZLEVBQVJqM0IsSUFFSEEsRUFBUSxJQUdTLFFBQVYrb0UsRUFFVUMsRUFBZGhwRSxFQUFRaTNCLElBRVpqM0IsR0FBU2kzQixHQUdTLFFBQVY4eEMsRUFFVC9vRSxFQUFRcEMsS0FBS3lrQyxPQUFRMm1DLEVBQVEsR0FBSy94QyxHQUFPQSxFQUl6Q3krQixHQUFRblYsRUFBVSxFQUFHLDBCQUEwQndvQixFQUFRLEVBR3hELElBQUl4OEMsR0FBVWcwQixFQUFTMGEsaUJBQW1CajdELENBVzFDLE9BVkF1Z0QsR0FBUzBhLGVBQWlCajdELEVBRXJCdXNCLElBQ0orbEMsR0FBaUIvUixFQUFVLEtBQU0sUUFBU0EsSUFFckNnb0IsR0FDSm5PLEVBQVM3WixJQUlKaDBCLEVBV1IsUUFBU2t5QyxJQUEyQmxlLEdBRW5DLE1BQU92c0MsR0FBRSxVQUNQMVksR0FBUWlsRCxFQUFTMmUsWUFBWW5vRCxFQUFzQyxLQUFsQ3dwQyxFQUFTMlksU0FBUyxjQUNuRCtDLFFBQVMxYixFQUFTb1AsU0FBU3NaLGNBRTNCcnpELEtBQU0ycUMsRUFBUytMLFVBQVUyYyxhQUN6Qi80RCxhQUFjcXdDLEVBQVMyYyxRQUFTLEdBVW5DLFFBQVM1QyxJQUF1Qi9aLEVBQVV4aEQsR0FFcEN3aEQsRUFBU3VRLFVBQVUwTixhQUN2QnhxRCxFQUFFdXNDLEVBQVMyZSxZQUFZbm9ELEdBQUc4aEMsSUFBSyxVQUFXOTVDLEVBQU8sUUFBVSxRQUc1RHV6RCxHQUFpQi9SLEVBQVUsS0FBTSxjQUFlQSxFQUFVeGhELElBUzNELFFBQVMyL0QsSUFBc0JuZSxHQUU5QixHQUFJMGMsR0FBUWpwRCxFQUFFdXNDLEVBQVMyYyxPQUd2QkQsR0FBTW5uRCxLQUFNLE9BQVEsT0FHcEIsSUFBSTgyQixHQUFTMlQsRUFBUytOLE9BRXRCLElBQW1CLEtBQWQxaEIsRUFBT3dsQixJQUEyQixLQUFkeGxCLEVBQU91bEIsR0FDL0IsTUFBTzVSLEdBQVMyYyxNQUdqQixJQUFJbnRCLEdBQVVuRCxFQUFPd2xCLEdBQ2pCcGlCLEVBQVVwRCxFQUFPdWxCLEdBQ2pCNkcsRUFBVXpZLEVBQVNvUCxTQUNuQnVaLEVBQVVqTSxFQUFNMzdELFNBQVMsV0FDekI2bkUsRUFBY0QsRUFBUTUxRSxPQUFTNDFFLEVBQVEsR0FBR0UsYUFBZSxLQUN6REMsRUFBY3IxRCxFQUFHaXBELEVBQU0sR0FBR3FNLFdBQVUsSUFDcENDLEVBQWN2MUQsRUFBR2lwRCxFQUFNLEdBQUdxTSxXQUFVLElBQ3BDRSxFQUFTdk0sRUFBTTM3RCxTQUFTLFNBQ3hCbW9FLEVBQU8sU0FDUHB3QyxFQUFPLFNBQVd2aEIsR0FDckIsTUFBUUEsR0FBV3l2RCxHQUFnQnp2RCxHQUF2QixLQUdOMHhELEdBQU9sMkUsU0FDYmsyRSxFQUFTLEtBbUJWLElBQUlFLEdBQVcxMUQsRUFBR3kxRCxHQUFReE4sUUFBU2pELEVBQVEyUSxpQkFDekN0N0QsT0FDQTJGLEVBQUV5MUQsR0FBUXhOLFFBQVNqRCxFQUFRNFEsY0FDekIvd0IsS0FDQW45QyxTQUFVLFNBQ1YyTyxTQUFVLFdBQ1Z3L0QsT0FBUSxFQUNSOW9FLE1BQU9ndkMsRUFBVTFXLEVBQUswVyxHQUFXLFNBRWpDMWhDLE9BQ0EyRixFQUFFeTFELEdBQVF4TixRQUFTakQsRUFBUThRLG1CQUN6Qmp4QixLQUNBa3hCLGFBQWMsY0FDZGhwRSxNQUFPNnJDLEVBQU9vOUIsU0FBVyxTQUV6QjM3RCxPQUNBZzdELEVBQ0V4ZixXQUFXLE1BQ1hoUixJQUFLLGNBQWUsR0FDcEJ4cUMsT0FBd0IsUUFBaEI4NkQsRUFBd0JELEVBQVUsTUFDMUM3NkQsT0FDQTR1RCxFQUFNMzdELFNBQVMsYUFLckIrTSxPQUNBMkYsRUFBRXkxRCxHQUFReE4sUUFBU2pELEVBQVFpUixjQUN6QnB4QixLQUNBeHVDLFNBQVUsV0FDVjNPLFNBQVUsT0FDVnFGLE1BQU9zNEIsRUFBTTBXLEtBRWIxaEMsT0FBUTR1RCxHQUdQdU0sSUFDSkUsRUFBU3I3RCxPQUNSMkYsRUFBRXkxRCxHQUFReE4sUUFBU2pELEVBQVFrUixjQUN6QnJ4QixLQUNBbjlDLFNBQVUsU0FDVm11RSxPQUFRLEVBQ1I5b0UsTUFBT2d2QyxFQUFVMVcsRUFBSzBXLEdBQVcsU0FFakMxaEMsT0FDQTJGLEVBQUV5MUQsR0FBUXhOLFFBQVNqRCxFQUFRbVIsbUJBQ3pCOTdELE9BQ0FrN0QsRUFDRTFmLFdBQVcsTUFDWGhSLElBQUssY0FBZSxHQUNwQnhxQyxPQUF3QixXQUFoQjg2RCxFQUEyQkQsRUFBVSxNQUM3Qzc2RCxPQUNBNHVELEVBQU0zN0QsU0FBUyxZQU92QixJQUFJQSxHQUFXb29FLEVBQVNwb0UsV0FDcEI4b0UsRUFBYTlvRSxFQUFTLEdBQ3RCK29FLEVBQWEvb0UsRUFBUyxHQUN0QmdwRSxFQUFhZCxFQUFTbG9FLEVBQVMsR0FBSyxJQThCeEMsT0EzQkt5dUMsSUFDSi83QixFQUFFcTJELEdBQVk1N0QsR0FBSSxZQUFhLFNBQVVuVixHQUN4QyxHQUFJK2pCLEdBQWFyaEIsS0FBS3FoQixVQUV0QitzRCxHQUFXL3NELFdBQWFBLEVBRW5CbXNELElBQ0pjLEVBQVdqdEQsV0FBYUEsS0FLM0JySixFQUFFcTJELEdBQVl4eEIsSUFDYjdJLEdBQVdwRCxFQUFPMjlCLFVBQVksYUFBZSxTQUM3Q3Y2QixHQUdEdVEsRUFBU2lxQixZQUFjSixFQUN2QjdwQixFQUFTa3FCLFlBQWNKLEVBQ3ZCOXBCLEVBQVNtcUIsWUFBY0osRUFHdkIvcEIsRUFBU2ttQixlQUFlNXBFLE1BQ3ZCNmMsR0FBTTI0QyxHQUNOZ1EsTUFBUyxjQUdIcUgsRUFBUyxHQW1CakIsUUFBU3JYLElBQWdCOVIsR0FJeEIsR0F3QkNvcUIsR0FBY0MsRUFDZEMsRUFBY0MsRUFDZEMsRUFBWUMsRUFHWnpiLEVBQUswYixFQUFZQyxFQTVCakJ0K0IsRUFBaUIyVCxFQUFTK04sUUFDMUJ2ZSxFQUFpQm5ELEVBQU93bEIsR0FDeEIrWSxFQUFpQnYrQixFQUFPbzlCLFFBQ3hCaDZCLEVBQWlCcEQsRUFBT3VsQixHQUN4QmxFLEVBQWlCcmhCLEVBQU8yaEIsVUFDeEI2YyxFQUFpQnAzRCxFQUFFdXNDLEVBQVNpcUIsYUFDNUJhLEVBQWlCRCxFQUFVLEdBQUczd0UsTUFDOUI2d0UsRUFBaUJGLEVBQVU5cEUsU0FBUyxPQUNwQ2lxRSxFQUFzQkQsRUFBZSxHQUFHN3dFLE1BQ3hDK3dFLEVBQWlCRixFQUFlaHFFLFNBQVMsU0FDekNtcUUsRUFBaUJsckIsRUFBU2txQixZQUMxQmlCLEVBQWlCMTNELEVBQUV5M0QsR0FDbkJFLEVBQWlCRixFQUFVaHhFLE1BQzNCbXhFLEVBQWlCNTNELEVBQUV1c0MsRUFBU21xQixhQUM1Qm1CLEVBQWlCRCxFQUFVdHFFLFNBQVMsT0FDcEN3cUUsRUFBaUJELEVBQWV2cUUsU0FBUyxTQUN6Q3lxRSxFQUFpQi8zRCxFQUFFdXNDLEVBQVNxWSxRQUM1QnFFLEVBQWlCanBELEVBQUV1c0MsRUFBUzJjLFFBQzVCOE8sRUFBaUIvTyxFQUFNLEdBQ3ZCZ1AsRUFBaUJELEVBQVF2eEUsTUFDekIrdUUsRUFBaUJqcEIsRUFBU3VZLE9BQVM5a0QsRUFBRXVzQyxFQUFTdVksUUFBVSxLQUN4RGhMLEVBQWlCdk4sRUFBUzhOLFNBQzFCNmQsRUFBaUJwZSxFQUFRSSxnQkFJekJpZSxLQUFpQkMsS0FDakJDLEtBRUFDLEVBQVUsU0FBU0MsR0FDbEIsR0FBSTl4RSxHQUFROHhFLEVBQU85eEUsS0FDbkJBLEdBQU1rZ0MsV0FBYSxJQUNuQmxnQyxFQUFNbWdDLGNBQWdCLElBQ3RCbmdDLEVBQU15Z0MsZUFBaUIsSUFDdkJ6Z0MsRUFBTTBnQyxrQkFBb0IsSUFDMUIxZ0MsRUFBTXFHLE9BQVMsR0FNYjByRSxFQUFlZixFQUFVZ0IsYUFBZWhCLEVBQVVsdkQsWUFFdEQsSUFBS2drQyxFQUFTaXNCLGVBQWlCQSxHQUFnQmpzQixFQUFTaXNCLGVBQWlCejVFLEVBR3hFLE1BRkF3dEQsR0FBU2lzQixhQUFlQSxNQUN4QjNhLEdBQXVCdFIsRUFJdkJBLEdBQVNpc0IsYUFBZUEsRUFRekJ2UCxFQUFNMzdELFNBQVMsZ0JBQWdCdVEsU0FHL0JrNUQsRUFBYWdCLEVBQU9uaUIsUUFBUW5CLFVBQVd3VSxHQUN2QzBOLEVBQWVvQixFQUFPcDJELEtBQUssTUFDM0JrMUQsRUFBZUUsRUFBV3AxRCxLQUFLLE1BQy9CbzFELEVBQVdwMUQsS0FBSyxVQUFVazBDLFdBQVcsWUFFaEMyZixJQUNKd0IsRUFBYXhCLEVBQU81ZixRQUFRbkIsVUFBV3dVLEdBQ3ZDMk4sRUFBZXBCLEVBQU83ekQsS0FBSyxNQUMzQm0xRCxFQUFlRSxFQUFXcjFELEtBQUssT0FXekJvNkIsSUFFTjQ3QixFQUFhNXFFLE1BQVEsT0FDckJxcUUsRUFBVSxHQUFHM3dFLE1BQU1zRyxNQUFRLFFBRzVCaVQsRUFBRXlCLEtBQU1tcUQsRUFBaUJyZixFQUFVd3FCLEdBQWMsU0FBVzE1RSxFQUFHb1IsR0FDOUQ4c0QsRUFBTWdELEVBQXlCaFMsRUFBVWx2RCxHQUN6Q29SLEVBQUdoSSxNQUFNc0csTUFBUXcvQyxFQUFTMk8sVUFBVUssR0FBSzJDLFNBR3JDc1gsR0FDSmtELEdBQW9CLFNBQVM1eUUsR0FDNUJBLEVBQUVXLE1BQU1zRyxNQUFRLElBQ2QrcEUsR0FJSkksRUFBY2pPLEVBQU1qZ0QsYUFDSCxLQUFaK3lCLEdBRUprOEIsRUFBV2xyRSxNQUFRLE9BS2RtckUsSUFBU2pQLEVBQU10bkQsS0FBSyxTQUFTN1UsU0FBVzJxRSxFQUFVcnhDLGNBQ3pCLFVBQTdCc3hDLEVBQVE3eUIsSUFBSSxpQkFFWm96QixFQUFXbHJFLE1BQVF3bUUsR0FBZ0J0SyxFQUFNamdELGFBQWVpeEMsSUFJekRpZCxFQUFjak8sRUFBTWpnRCxjQUVNLEtBQWpCbXVELElBRVRjLEVBQVdsckUsTUFBUXdtRSxHQUFlNEQsR0FHbENELEVBQWNqTyxFQUFNamdELGNBT3JCMHZELEdBQW9CSixFQUFTekIsR0FHN0I2QixHQUFvQixTQUFTSCxHQUM1QkYsRUFBY3h2RSxLQUFNMHZFLEVBQU8vd0UsV0FDM0Iyd0UsRUFBYXR2RSxLQUFNMHFFLEdBQWdCdnpELEVBQUV1NEQsR0FBUTF6QixJQUFJLFlBQy9DZ3lCLEdBR0g2QixHQUFvQixTQUFTQyxFQUFTdDdFLEdBQ3JDczdFLEVBQVFseUUsTUFBTXNHLE1BQVFvckUsRUFBYTk2RSxJQUNqQ3M1RSxHQUVIMzJELEVBQUU2MkQsR0FBYy9wRSxPQUFPLEdBR2xCMG9FLElBRUprRCxHQUFvQkosRUFBU3hCLEdBRTdCNEIsR0FBb0IsU0FBU0gsR0FDNUJILEVBQWF2dkUsS0FBTTBxRSxHQUFnQnZ6RCxFQUFFdTRELEdBQVExekIsSUFBSSxZQUMvQ2l5QixHQUVINEIsR0FBb0IsU0FBU0MsRUFBU3Q3RSxHQUNyQ3M3RSxFQUFRbHlFLE1BQU1zRyxNQUFRcXJFLEVBQWEvNkUsSUFDakN1NUUsR0FFSDUyRCxFQUFFODJELEdBQWNocUUsT0FBTyxJQVl4QjRyRSxHQUFvQixTQUFTSCxFQUFRbDdFLEdBQ3BDazdFLEVBQU8vd0UsVUFBWSxvRUFBb0U2d0UsRUFBY2g3RSxHQUFHLFNBQ3hHazdFLEVBQU85eEUsTUFBTXNHLE1BQVFvckUsRUFBYTk2RSxJQUNoQ3c1RSxHQUVFckIsR0FFSmtELEdBQW9CLFNBQVNILEVBQVFsN0UsR0FDcENrN0UsRUFBTy93RSxVQUFZLEdBQ25CK3dFLEVBQU85eEUsTUFBTXNHLE1BQVFxckUsRUFBYS82RSxJQUNoQ3k1RSxHQUtDN04sRUFBTWpnRCxhQUFla3VELEdBR3pCRCxFQUFlUSxFQUFVZ0IsYUFBZWhCLEVBQVVyeEMsY0FDcEIsVUFBN0JzeEMsRUFBUTd5QixJQUFJLGNBQ1hxeUIsRUFBWWpkLEVBQ1ppZCxFQUdHZ0IsSUFBU1QsRUFBVWdCLGFBQ3ZCaEIsRUFBVXJ4QyxjQUE2QyxVQUE3QnN4QyxFQUFRN3lCLElBQUksaUJBRXRDb3pCLEVBQVdsckUsTUFBUXdtRSxHQUFnQjBELEVBQVdoZCxLQUk5QixLQUFabGUsR0FBbUMsS0FBakJvN0IsSUFDdEJ6VixHQUFRblYsRUFBVSxFQUFHLCtCQUFnQyxJQUt0RDBxQixFQUFhLE9BSWRVLEVBQWE1cUUsTUFBUXdtRSxHQUFnQjBELEdBQ3JDSSxFQUFldHFFLE1BQVF3bUUsR0FBZ0IwRCxHQUVsQ3pCLElBQ0pqcEIsRUFBU21xQixZQUFZandFLE1BQU1zRyxNQUFRd21FLEdBQWdCMEQsSUFPN0NqN0IsR0FLRGs4QixJQUNKUCxFQUFhN3FFLE9BQVN5bUUsR0FBZ0J5RSxFQUFRNXhDLGFBQWE2ekIsR0FLN0QsSUFBSTJlLEdBQWMzUCxFQUFNamdELFlBQ3hCd3VELEdBQWUsR0FBRy93RSxNQUFNc0csTUFBUXdtRSxHQUFnQnFGLEdBQ2hEckIsRUFBb0J4cUUsTUFBUXdtRSxHQUFnQnFGLEVBSTVDLElBQUlDLEdBQWE1UCxFQUFNbjhELFNBQVcycUUsRUFBVWx2RCxjQUE2QyxVQUE3Qm12RCxFQUFRN3lCLElBQUksY0FDcEUvZSxFQUFVLFdBQWFnMEIsRUFBUUssZUFBaUIsT0FBUyxRQUM3RG9kLEdBQXFCenhDLEdBQVkreUMsRUFBYTVlLEVBQVMsS0FBTyxNQUV6RHViLElBQ0pzQyxFQUFlLEdBQUdyeEUsTUFBTXNHLE1BQVF3bUUsR0FBZ0JxRixHQUNoRGYsRUFBZSxHQUFHcHhFLE1BQU1zRyxNQUFRd21FLEdBQWdCcUYsR0FDaERmLEVBQWUsR0FBR3B4RSxNQUFNcS9CLEdBQVcreUMsRUFBYTVlLEVBQVMsS0FBTyxPQUlqRXlkLEVBQVE5K0IsVUFJRjJULEVBQVMrYixVQUFXL2IsRUFBU2djLFdBQWdCaGMsRUFBU3djLFlBQzNEME8sRUFBVW51RCxVQUFZLEdBY3hCLFFBQVNvdkQsSUFBb0JoekQsRUFBSW96RCxFQUFLQyxHQUtyQyxJQUhBLEdBQ0lDLEdBQVFDLEVBRFJsc0QsRUFBTSxFQUFHMXZCLEVBQUUsRUFBRzRnRSxFQUFLNmEsRUFBSXg1RSxPQUdmMitELEVBQUo1Z0UsR0FBVyxDQUlsQixJQUhBMjdFLEVBQVNGLEVBQUl6N0UsR0FBR21lLFdBQ2hCeTlELEVBQVNGLEVBQU1BLEVBQUkxN0UsR0FBR21lLFdBQWEsS0FFM0J3OUQsR0FDa0IsSUFBcEJBLEVBQU8xaEUsV0FDTnloRSxFQUNKcnpELEVBQUlzekQsRUFBUUMsRUFBUWxzRCxHQUdwQnJILEVBQUlzekQsRUFBUWpzRCxHQUdiQSxLQUdEaXNELEVBQVNBLEVBQU9yVixZQUNoQnNWLEVBQVNGLEVBQU1FLEVBQU90VixZQUFjLElBR3JDdG1FLE1BY0YsUUFBUzJnRSxJQUEyQm5ELEdBRW5DLEdBYUN4OUQsR0FBRzI5RCxFQUFRa2UsRUFaWGpRLEVBQVFwTyxFQUFVcU8sT0FDbEJuTCxFQUFVbEQsRUFBVUssVUFDcEJ0aUIsRUFBU2lpQixFQUFVUCxRQUNuQnRlLEVBQVVwRCxFQUFPdWxCLEdBQ2pCcGlCLEVBQVVuRCxFQUFPd2xCLEdBQ2pCK1ksRUFBZXYrQixFQUFPbzlCLFFBQ3RCeEksRUFBY3pQLEVBQVF6K0QsT0FDdEI2NUUsRUFBaUJ6YSxFQUFlN0QsRUFBVyxZQUMzQ3VlLEVBQWNwNUQsRUFBRSxLQUFNNjZDLEVBQVUrSixRQUNoQ3lVLEVBQWlCcFEsRUFBTXBuRSxhQUFhLFNBQ3BDeTNFLEVBQWlCclEsRUFBTXpvRSxXQUN2Qis0RSxHQUFhLEVBRWJ6ZixFQUFVZSxFQUFVUixTQUNwQjZkLEVBQU9wZSxFQUFRSSxnQkFFWjd5QixFQUFhNGhDLEVBQU14aUUsTUFBTXNHLEtBTTdCLEtBTEtzNkIsR0FBMEMsS0FBNUJBLEVBQVczb0MsUUFBUSxPQUNyQzI2RSxFQUFpQmh5QyxHQUlaaHFDLEVBQUUsRUFBSUEsRUFBRTg3RSxFQUFlNzVFLE9BQVNqQyxJQUNyQzI5RCxFQUFTK0MsRUFBU29iLEVBQWU5N0UsSUFFVixPQUFsQjI5RCxFQUFPa0QsU0FDWGxELEVBQU9rRCxPQUFTc2IsR0FBbUJ4ZSxFQUFPYSxXQUFZeWQsR0FFdERDLEdBQWEsRUFTZixJQUFLckIsSUFBVXFCLElBQWdCeDlCLElBQWFDLEdBQ3ZDd3hCLEdBQWUzTyxFQUFrQmhFLElBQ2pDMlMsR0FBZTRMLEVBQVk5NUUsT0FFL0IsSUFBTWpDLEVBQUUsRUFBTW13RSxFQUFGbndFLEVBQWdCQSxJQUFNLENBQ2pDLEdBQUkrakUsR0FBUzdDLEVBQXlCMUQsRUFBV3g5RCxFQUVqQyxRQUFYK2pFLElBQ0pyRCxFQUFTcUQsR0FBU2xELE9BQVNxVixHQUFnQjZGLEVBQVlLLEdBQUdwOEUsR0FBRzBQLGNBS2hFLENBS0MsR0FBSTJzRSxHQUFXMTVELEVBQUVpcEQsR0FBT3JULFFBQ3RCL1EsSUFBSyxhQUFjLFVBQ25CZ1IsV0FBWSxLQUdkNmpCLEdBQVMvM0QsS0FBSyxZQUFZOUQsUUFDMUIsSUFBSTZELEdBQUsxQixFQUFFLFNBQVMwMEMsU0FBVWdsQixFQUFTLzNELEtBQUssU0FnQjVDLEtBWEErM0QsRUFBUy8zRCxLQUFLLGdCQUFnQjlELFNBQzlCNjdELEVBQ0VyL0QsT0FBUTJGLEVBQUU2NkMsRUFBVStKLFFBQVFoUCxTQUM1QnY3QyxPQUFRMkYsRUFBRTY2QyxFQUFVaUssUUFBUWxQLFNBRzlCOGpCLEVBQVMvM0QsS0FBSyxzQkFBc0JrakMsSUFBSSxRQUFTLElBR2pEdTBCLEVBQWN4TixFQUFpQi9RLEVBQVc2ZSxFQUFTLzNELEtBQUssU0FBUyxJQUUzRHRrQixFQUFFLEVBQUlBLEVBQUU4N0UsRUFBZTc1RSxPQUFTakMsSUFDckMyOUQsRUFBUytDLEVBQVNvYixFQUFlOTdFLElBRWpDKzdFLEVBQVkvN0UsR0FBR29KLE1BQU1zRyxNQUE4QixPQUF0Qml1RCxFQUFPYSxZQUE2QyxLQUF0QmIsRUFBT2EsV0FDakUwWCxHQUFnQnZZLEVBQU9hLFlBQ3ZCLEdBS0liLEVBQU9hLFlBQWM5ZixHQUN6Qi83QixFQUFHbzVELEVBQVkvN0UsSUFBS2dkLE9BQVEyRixFQUFFLFVBQVU2a0MsS0FDdkM5M0MsTUFBT2l1RCxFQUFPYSxXQUNkOGQsT0FBUSxFQUNSN3pDLFFBQVMsRUFDVCt2QyxPQUFRLEVBQ1Ivb0UsT0FBUSxJQU1YLElBQUsrdEQsRUFBVXVFLE9BQU85L0QsT0FDckIsSUFBTWpDLEVBQUUsRUFBSUEsRUFBRTg3RSxFQUFlNzVFLE9BQVNqQyxJQUNyQzY3RSxFQUFZQyxFQUFlOTdFLEdBQzNCMjlELEVBQVMrQyxFQUFTbWIsR0FFbEJsNUQsRUFBRzQ1RCxHQUFrQi9lLEVBQVdxZSxJQUM5QnRqQixPQUFPLEdBQ1B2N0MsT0FBUTJnRCxFQUFPNmUsaUJBQ2ZubEIsU0FBVWh6QyxFQVNkLElBQUkyOEIsR0FBU3IrQixFQUFFLFVBQVU2a0MsSUFBSzlJLEdBQVdDLEdBRXRDM2xDLFNBQVUsV0FDVnBXLElBQUssRUFDTEgsS0FBTSxFQUNOZ04sT0FBUSxFQUNSL00sTUFBTyxFQUNQMkgsU0FBVSxjQUlYMlMsT0FBUXEvRCxHQUNSaGxCLFNBQVU0a0IsRUFLUHY5QixJQUFXbzdCLEVBQ2Z1QyxFQUFTM3NFLE1BQU9vcUUsR0FFUHA3QixHQUNUMjlCLEVBQVM3MEIsSUFBSyxRQUFTLFFBQ3ZCNjBCLEVBQVM3akIsV0FBVyxTQUlmNmpCLEVBQVMzc0UsUUFBVXVzRSxFQUFlN3dELGFBQWU0d0QsR0FDckRLLEVBQVMzc0UsTUFBT3VzRSxFQUFlN3dELGNBR3ZCdXpCLEVBQ1QwOUIsRUFBUzNzRSxNQUFPdXNFLEVBQWU3d0QsYUFFdEI0d0QsR0FDVEssRUFBUzNzRSxNQUFPc3NFLEVBU2pCLElBQUlybkUsR0FBUSxDQUNaLEtBQU0zVSxFQUFFLEVBQUlBLEVBQUU4N0UsRUFBZTc1RSxPQUFTakMsSUFBTSxDQUMzQyxHQUFJcXdDLEdBQU8xdEIsRUFBRW81RCxFQUFZLzdFLElBQ3JCdzRFLEVBQVNub0MsRUFBSzFrQixhQUFlMGtCLEVBQUszZ0MsUUFJbEMrc0UsRUFBV2hnQixFQUFRTSxVQUN0Qnh3RCxLQUFLdWlCLEtBQU1pdEQsRUFBWS83RSxHQUFHc0Msd0JBQXdCb04sT0FDbEQyZ0MsRUFBSzFrQixZQUlOaFgsSUFBUzhuRSxFQUdUL2IsRUFBU29iLEVBQWU5N0UsSUFBSzZnRSxPQUFTcVYsR0FBZ0J1RyxFQUFXakUsR0FHbEU1TSxFQUFNeGlFLE1BQU1zRyxNQUFRd21FLEdBQWdCdmhFLEdBR3BDcXNDLEVBQU94Z0MsU0FXUixHQUpLdzdELElBQ0pwUSxFQUFNeGlFLE1BQU1zRyxNQUFRd21FLEdBQWdCOEYsS0FHL0JBLEdBQWtCdDlCLEtBQWM4ZSxFQUFVa2YsU0FBVyxDQUMxRCxHQUFJN3dCLEdBQWEsV0FDaEJscEMsRUFBRXhXLEdBQVEvRCxLQUFLLGFBQWFvMUQsRUFBVW1mLFVBQVc3SixHQUFhLFdBQzdEdFMsRUFBdUJoRCxNQU1wQnFkLEdBQ0p6c0UsV0FBWXk5QyxFQUFZLEtBR3hCQSxJQUdEMlIsRUFBVWtmLFVBQVcsR0FhdkIsUUFBUzVKLElBQWF6cUQsRUFBSXUwRCxHQUN6QixHQUVDOXNELEdBQ0FyWCxFQUZBb2tFLEVBQVlELElBQVNsN0UsRUFBWWs3RSxFQUFPLEdBSXpDLE9BQU8sWUFDTixHQUNDeGYsR0FBT3p5RCxLQUNQaXRCLEdBQVEsR0FBSXJmLE1BQ1oyUixFQUFPcmYsU0FFSGlsQixJQUFjQSxFQUFPK3NELEVBQWJqbEQsR0FDWnpvQixhQUFjc0osR0FFZEEsRUFBUXJLLFdBQVksV0FDbkIwaEIsRUFBT3B1QixFQUNQMm1CLEVBQUd2ZCxNQUFPc3lELEVBQU1sekMsSUFDZDJ5RCxLQUdIL3NELEVBQU84SCxFQUNQdlAsRUFBR3ZkLE1BQU9zeUQsRUFBTWx6QyxLQWFuQixRQUFTaXlELElBQW9CenNFLEVBQU8zTSxHQUVuQyxJQUFPMk0sRUFDTixNQUFPLEVBR1IsSUFBSWpILEdBQUlrYSxFQUFFLFVBQ1I2a0MsSUFBSyxRQUFTMHVCLEdBQWdCeG1FLElBQzlCMm5ELFNBQVV0MEQsR0FBVTFDLEVBQVMwSixNQUUzQnlhLEVBQU0vYixFQUFFLEdBQUdzUSxXQUdmLE9BRkF0USxHQUFFK1gsU0FFS2dFLEVBV1IsUUFBUyszRCxJQUFrQnJ0QixFQUFVNlUsR0FFcEMsR0FBSTdGLEdBQU00ZSxHQUFvQjV0QixFQUFVNlUsRUFDeEMsSUFBVyxFQUFON0YsRUFDSixNQUFPLEtBR1IsSUFBSXAvQixHQUFPb3dCLEVBQVM2UyxPQUFRN0QsRUFDNUIsT0FBU3AvQixHQUFLOGpDLElBRWI5akMsRUFBSytrQyxRQUFTRSxHQURkcGhELEVBQUUsU0FBUzRCLEtBQU0yOUMsRUFBZ0JoVCxFQUFVZ1AsRUFBSzZGLEVBQVEsWUFBYyxHQVl4RSxRQUFTK1ksSUFBb0I1dEIsRUFBVTZVLEdBSXRDLElBQU0sR0FGRnQ5QyxHQUFHelUsRUFBSSxHQUFJK3FFLEVBQVMsR0FFZC84RSxFQUFFLEVBQUdpOEQsRUFBSS9NLEVBQVM2UyxPQUFPOS9ELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNuRHltQixFQUFJeTdDLEVBQWdCaFQsRUFBVWx2RCxFQUFHK2pFLEVBQVEsV0FBWSxHQUNyRHQ5QyxFQUFJQSxFQUFFbGxCLFFBQVN5N0UsR0FBa0IsSUFDakN2MkQsRUFBSUEsRUFBRWxsQixRQUFTLFVBQVcsS0FFckJrbEIsRUFBRXhrQixPQUFTK1AsSUFDZkEsRUFBTXlVLEVBQUV4a0IsT0FDUjg2RSxFQUFTLzhFLEVBSVgsT0FBTys4RSxHQVVSLFFBQVM3RyxJQUFnQnp2RCxHQUV4QixNQUFXLFFBQU5BLEVBQ0csTUFHUyxnQkFBTEEsR0FDQSxFQUFKQSxFQUNOLE1BQ0FBLEVBQUUsS0FJR0EsRUFBRW9rQixNQUFNLE9BQ2Rwa0IsRUFBRSxLQUNGQSxFQUtGLFFBQVM2cEQsSUFBaUJwaEIsR0FFekIsR0FDQ2x2RCxHQUFTOEosRUFBR3c0RCxFQUlaaEcsRUFBV3NCLEVBQU1jLEVBQU91ZSxFQUh4QkMsS0FFQXJmLEVBQVkzTyxFQUFTMk8sVUFFckJzZixFQUFRanVCLEVBQVNrdUIsZUFDakJDLEVBQVcxNkQsRUFBRStpQixjQUFleTNDLEdBQzVCRyxLQUNBNzlELEVBQU0sU0FBVzNmLEdBQ1hBLEVBQUVtQyxTQUFZMGdCLEVBQUVwakIsUUFBU08sRUFBRSxJQUUvQnc5RSxFQUFXOXhFLEtBQU0xTCxHQUlqQjZpQixFQUFFME8sTUFBT2lzRCxFQUFZeDlFLEdBb0J4QixLQWRLNmlCLEVBQUVwakIsUUFBUzQ5RSxJQUNmMTlELEVBQUswOUQsR0FHREUsR0FBWUYsRUFBTUksS0FDdEI5OUQsRUFBSzA5RCxFQUFNSSxLQUdaOTlELEVBQUt5dkMsRUFBU3N1QixXQUVWSCxHQUFZRixFQUFNTSxNQUNyQmgrRCxFQUFLMDlELEVBQU1NLE1BR056OUUsRUFBRSxFQUFJQSxFQUFFczlFLEVBQVdyN0UsT0FBU2pDLElBS2pDLElBSEFpOUUsRUFBU0ssRUFBV3Q5RSxHQUFHLEdBQ3ZCczhELEVBQVl1QixFQUFXb2YsR0FBUzNnQixVQUUxQnh5RCxFQUFFLEVBQUd3NEQsRUFBS2hHLEVBQVVyNkQsT0FBV3FnRSxFQUFGeDRELEVBQVNBLElBRTNDOHpELEVBQU90QixFQUFVeHlELEdBQ2pCNDBELEVBQVFiLEVBQVdELEdBQU9jLE9BQVMsU0FFOUI0ZSxFQUFXdDlFLEdBQUcwOUUsT0FBU2g4RSxJQUMzQjQ3RSxFQUFXdDlFLEdBQUcwOUUsS0FBTy82RCxFQUFFZ04sUUFBUzJ0RCxFQUFXdDlFLEdBQUcsR0FBSTY5RCxFQUFVRCxHQUFNa0MsWUFHbkVvZCxFQUFNMXhFLE1BQ0xrUyxJQUFXdS9ELEVBQ1hwYixJQUFXakUsRUFDWHdULElBQVdrTSxFQUFXdDlFLEdBQUcsR0FDekIwdkIsTUFBVzR0RCxFQUFXdDlFLEdBQUcwOUUsS0FDekJ0d0UsS0FBV3N4RCxFQUNYaVgsVUFBVzNhLEdBQVVnSCxJQUFJNTBELEtBQUt1akUsTUFBT2pTLEVBQU0sU0FLOUMsT0FBT3dlLEdBU1IsUUFBUzNSLElBQVUvTixHQUVsQixHQUNDeDlELEdBQUdpOEQsRUFBSzJFLEVBUVIrYyxFQUVBVCxFQVJBVSxLQUNBQyxFQUFXN2lCLEdBQVVnSCxJQUFJNTBELEtBQUt1akUsTUFDOUI1TyxFQUFTdkUsRUFBVXVFLE9BR25CK2IsR0FGWXRnQixFQUFVSyxVQUVULEdBRWJ1VyxFQUFnQjVXLEVBQVUwRixlQVUzQixLQUpBeEIsRUFBZ0JsRSxHQUVoQjBmLEVBQVE1TSxHQUFnQjlTLEdBRWxCeDlELEVBQUUsRUFBR2k4RCxFQUFJaWhCLEVBQU1qN0UsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3JDMjlFLEVBQVVULEVBQU1sOUUsR0FHWDI5RSxFQUFRaEksV0FDWm1JLElBSURDLEdBQWF2Z0IsRUFBV21nQixFQUFROWIsSUFJakMsSUFBbUMsT0FBOUI2SCxHQUFlbE0sSUFBeUMsSUFBakIwZixFQUFNajdFLE9BQ2xELENBR0MsSUFBTWpDLEVBQUUsRUFBRzRnRSxFQUFLd1QsRUFBY255RSxPQUFXMitELEVBQUY1Z0UsRUFBU0EsSUFDL0M0OUUsRUFBUXhKLEVBQWNwMEUsSUFBT0EsQ0F3QnpCODlFLEtBQWVaLEVBQU1qN0UsT0FFekJteUUsRUFBYzNrRCxLQUFNLFNBQVczdkIsRUFBR0MsR0FDakMsR0FDQ3dLLEdBQUd4QixFQUFHZSxFQUFHbEksRUFBTTZ0QixFQUNmbVcsRUFBSXMzQyxFQUFNajdFLE9BQ1YrN0UsRUFBUWpjLEVBQU9qaUUsR0FBRytsRSxXQUNsQm9ZLEVBQVFsYyxFQUFPaGlFLEdBQUc4bEUsVUFFbkIsS0FBTS83RCxFQUFFLEVBQU04N0IsRUFBRjk3QixFQUFRQSxJQU9uQixHQU5BMmxCLEVBQU95dEQsRUFBTXB6RSxHQUViUyxFQUFJeXpFLEVBQU92dUQsRUFBS295QyxLQUNoQjk0RCxFQUFJazFFLEVBQU94dUQsRUFBS295QyxLQUVoQmpnRSxFQUFTbUgsRUFBRndCLEVBQU0sR0FBS0EsRUFBRXhCLEVBQUksRUFBSSxFQUNkLElBQVRuSCxFQUNKLE1BQW9CLFFBQWI2dEIsRUFBSzJoRCxJQUFnQnh2RSxHQUFRQSxDQU10QyxPQUZBMkksR0FBSXF6RSxFQUFPOTlFLEdBQ1hpSixFQUFJNjBFLEVBQU83OUUsR0FDRmdKLEVBQUZ3QixFQUFNLEdBQUtBLEVBQUV4QixFQUFJLEVBQUksSUFPN0JxckUsRUFBYzNrRCxLQUFNLFNBQVczdkIsRUFBR0MsR0FDakMsR0FDQ3dLLEdBQUd4QixFQUFHZSxFQUFNbEksRUFBTTZ0QixFQUFNcEgsRUFDeEJ1ZCxFQUFJczNDLEVBQU1qN0UsT0FDVis3RSxFQUFRamMsRUFBT2ppRSxHQUFHK2xFLFdBQ2xCb1ksRUFBUWxjLEVBQU9oaUUsR0FBRzhsRSxVQUVuQixLQUFNLzdELEVBQUUsRUFBTTg3QixFQUFGOTdCLEVBQVFBLElBUW5CLEdBUEEybEIsRUFBT3l0RCxFQUFNcHpFLEdBRWJTLEVBQUl5ekUsRUFBT3Z1RCxFQUFLb3lDLEtBQ2hCOTRELEVBQUlrMUUsRUFBT3h1RCxFQUFLb3lDLEtBRWhCeDVDLEVBQUt3MUQsRUFBVXB1RCxFQUFLcmlCLEtBQUssSUFBSXFpQixFQUFLMmhELE1BQVN5TSxFQUFVLFVBQVVwdUQsRUFBSzJoRCxLQUNwRXh2RSxFQUFPeW1CLEVBQUk5ZCxFQUFHeEIsR0FDQSxJQUFUbkgsRUFDSixNQUFPQSxFQU1ULE9BRkEySSxHQUFJcXpFLEVBQU85OUUsR0FDWGlKLEVBQUk2MEUsRUFBTzc5RSxHQUNGZ0osRUFBRndCLEVBQU0sR0FBS0EsRUFBRXhCLEVBQUksRUFBSSxJQU0vQnkwRCxFQUFVeU4sU0FBVSxFQUlyQixRQUFTaVQsSUFBY2h2QixHQVV0QixJQUFNLEdBUkY0SCxHQUNBcW5CLEVBQ0F6ZCxFQUFVeFIsRUFBUzJPLFVBQ25CcWYsRUFBUTVNLEdBQWdCcGhCLEdBQ3hCa3ZCLEVBQVFsdkIsRUFBUytMLFVBQVVtakIsTUFJckJwK0UsRUFBRSxFQUFHNGdFLEVBQUtGLEVBQVF6K0QsT0FBVzIrRCxFQUFGNWdFLEVBQVNBLElBQzlDLENBQ0MsR0FBSTZoRSxHQUFNbkIsRUFBUTFnRSxHQUNkOC9ELEVBQVkrQixFQUFJL0IsVUFDaEI5QixFQUFTNkQsRUFBSTdELE9BQU96OEQsUUFBUyxTQUFVLElBQ3ZDZzlELEVBQUtzRCxFQUFJcEUsR0FJYmMsR0FBR2w4QyxnQkFBZ0IsYUFHZHcvQyxFQUFJbEMsV0FDSHVkLEVBQU1qN0UsT0FBUyxHQUFLaTdFLEVBQU0sR0FBR3JiLEtBQU83aEUsR0FDeEN1K0QsRUFBRzk1RCxhQUFhLFlBQTJCLE9BQWR5NEUsRUFBTSxHQUFHOUwsSUFBYSxZQUFjLGNBQ2pFK00sRUFBV3JlLEVBQVdvZCxFQUFNLEdBQUd4dEQsTUFBTSxJQUFPb3dDLEVBQVUsSUFHdERxZSxFQUFXcmUsRUFBVSxHQUd0QmhKLEVBQVFrSCxHQUF3QixRQUFibWdCLEVBQ2xCQyxFQUFNQyxlQUNORCxFQUFNRSxrQkFJUHhuQixFQUFRa0gsRUFHVE8sRUFBRzk1RCxhQUFhLGFBQWNxeUQsSUFlaEMsUUFBU3luQixJQUFrQnJ2QixFQUFVNlUsRUFBUS9tRCxFQUFROU8sR0FFcEQsR0FHSXN3RSxHQUhBM2MsRUFBTTNTLEVBQVMyTyxVQUFXa0csR0FDMUIwYSxFQUFVdnZCLEVBQVNzdUIsVUFDbkIxZCxFQUFZK0IsRUFBSS9CLFVBRWhCajVELEVBQU8sU0FBVy9HLEVBQUd1SyxHQUN4QixHQUFJNnpELEdBQU1wK0QsRUFBRTQ5RSxJQUtaLE9BSkt4ZixLQUFReDhELElBQ1p3OEQsRUFBTXY3QyxFQUFFZ04sUUFBUzd2QixFQUFFLEdBQUlnZ0UsSUFHakI1QixFQUFJLEVBQUk0QixFQUFVNzlELE9BQ3hCaThELEVBQUksRUFDSjd6RCxFQUNDLEtBQ0EsRUFTSCxJQUwyQixnQkFBZm8wRSxHQUFRLEtBQ25CQSxFQUFVdnZCLEVBQVNzdUIsV0FBY2lCLElBSTdCemhFLEdBQVVreUMsRUFBU3VRLFVBQVVpZixXQUFhLENBRTlDLEdBQUlDLEdBQVVoOEQsRUFBRWdOLFFBQVNvMEMsRUFBUXNCLEdBQU9vWixFQUFTLEtBRWhDLE1BQVpFLEdBRUpILEVBQWMzM0UsRUFBTTQzRSxFQUFRRSxJQUFVLEdBRWpCLE9BQWhCSCxHQUEyQyxJQUFuQkMsRUFBUXg4RSxTQUNwQ3U4RSxFQUFjLEdBR00sT0FBaEJBLEVBQ0pDLEVBQVF6aUUsT0FBUTJpRSxFQUFTLElBR3pCRixFQUFRRSxHQUFTLEdBQUs3ZSxFQUFXMGUsR0FDakNDLEVBQVFFLEdBQVNqQixLQUFPYyxLQUt6QkMsRUFBUWp6RSxNQUFRdTRELEVBQVFqRSxFQUFVLEdBQUksSUFDdEMyZSxFQUFRQSxFQUFReDhFLE9BQU8sR0FBR3k3RSxLQUFPLE9BR3pCZSxHQUFReDhFLFFBQVV3OEUsRUFBUSxHQUFHLElBQU0xYSxHQUU1Q3lhLEVBQWMzM0UsRUFBTTQzRSxFQUFRLElBRTVCQSxFQUFReDhFLE9BQVMsRUFDakJ3OEUsRUFBUSxHQUFHLEdBQUszZSxFQUFXMGUsR0FDM0JDLEVBQVEsR0FBR2YsS0FBT2MsSUFJbEJDLEVBQVF4OEUsT0FBUyxFQUNqQnc4RSxFQUFRanpFLE1BQVF1NEQsRUFBUWpFLEVBQVUsS0FDbEMyZSxFQUFRLEdBQUdmLEtBQU8sRUFJbkJ2UyxHQUFXamMsR0FHYSxrQkFBWmhoRCxJQUNYQSxFQUFVZ2hELEdBYVosUUFBUzRZLElBQXdCNVksRUFBVTB2QixFQUFVN2EsRUFBUTcxRCxHQUU1RCxHQUFJMnpELEdBQU0zUyxFQUFTMk8sVUFBV2tHLEVBRTlCOGEsSUFBZUQsS0FBYyxTQUFVMzJFLEdBRWpDNDVELEVBQUlsQyxhQUFjLElBTWxCelEsRUFBU3VRLFVBQVUwTixhQUN2QmxFLEdBQXNCL1osR0FBVSxHQUVoQzlnRCxXQUFZLFdBQ1htd0UsR0FBaUJydkIsRUFBVTZVLEVBQVE5N0QsRUFBRTYyRSxTQUFVNXdFLEdBSVosUUFBOUJ3N0QsR0FBZXhhLElBQ25CK1osR0FBc0IvWixHQUFVLElBRS9CLElBR0hxdkIsR0FBaUJydkIsRUFBVTZVLEVBQVE5N0QsRUFBRTYyRSxTQUFVNXdFLE1BWWxELFFBQVM2d0UsSUFBbUI3dkIsR0FFM0IsR0FJSWx2RCxHQUFHaThELEVBQUs4SCxFQUpSaWIsRUFBVTl2QixFQUFTK3ZCLFVBQ25CQyxFQUFZaHdCLEVBQVNvUCxTQUFTNmdCLFlBQzlCMXZELEVBQU82Z0QsR0FBZ0JwaEIsR0FDdkJtYyxFQUFXbmMsRUFBU3VRLFNBR3hCLElBQUs0TCxFQUFTM0wsT0FBUzJMLEVBQVMrVCxhQUFlLENBRTlDLElBQU1wL0UsRUFBRSxFQUFHaThELEVBQUkraUIsRUFBUS84RSxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFDdkMrakUsRUFBU2liLEVBQVFoL0UsR0FBRzBkLElBR3BCaUYsRUFBRzBpRCxHQUFRblcsRUFBUzZTLE9BQVEsVUFBV2dDLElBQ3JDN2hFLFlBQWFnOUUsR0FBZSxFQUFGbC9FLEVBQU1BLEVBQUUsRUFBSSxHQUl6QyxLQUFNQSxFQUFFLEVBQUdpOEQsRUFBSXhzQyxFQUFLeHRCLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNwQytqRSxFQUFTdDBDLEVBQUt6dkIsR0FBRzBkLElBRWpCaUYsRUFBRzBpRCxHQUFRblcsRUFBUzZTLE9BQVEsVUFBV2dDLElBQ3JDamlFLFNBQVVvOUUsR0FBZSxFQUFGbC9FLEVBQU1BLEVBQUUsRUFBSSxJQUl2Q2t2RCxFQUFTK3ZCLFVBQVl4dkQsRUFNdEIsUUFBU3N1RCxJQUFhN3VCLEVBQVVnUCxHQUcvQixHQUVJbWhCLEdBRkExaEIsRUFBU3pPLEVBQVMyTyxVQUFXSyxHQUM3Qm9oQixFQUFhdGtCLEdBQVVnSCxJQUFJMk8sTUFBT2hULEVBQU80aEIsY0FHeENELEtBQ0pELEVBQWFDLEVBQVcxL0UsS0FBTXN2RCxFQUFTNlgsVUFBVzdYLEVBQVVnUCxFQUMzRG9ELEVBQXlCcFMsRUFBVWdQLElBUXJDLEtBQU0sR0FIRjM2QyxHQUFLNGdELEVBQ0x3UixFQUFZM2EsR0FBVWdILElBQUk1MEQsS0FBS3VqRSxNQUFPaFQsRUFBT2UsTUFBTSxRQUU3QzErRCxFQUFFLEVBQUdpOEQsRUFBSS9NLEVBQVM2UyxPQUFPOS9ELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNuRHVqQixFQUFNMnJDLEVBQVM2UyxPQUFPL2hFLEdBRWZ1akIsRUFBSXNpRCxhQUNWdGlELEVBQUlzaUQsaUJBR0V0aUQsRUFBSXNpRCxXQUFXM0gsSUFBUW9oQixLQUM3Qm5iLEVBQVdtYixFQUNWRCxFQUFXci9FLEdBQ1hraUUsRUFBZ0JoVCxFQUFVbHZELEVBQUdrK0QsRUFBSyxRQUVuQzM2QyxFQUFJc2lELFdBQVkzSCxHQUFReVgsRUFDdkJBLEVBQVd4UixHQUNYQSxHQVlKLFFBQVNxYixJQUFldHdCLEdBRXZCLEdBQU1BLEVBQVN1USxVQUFVZ2dCLGFBQWN2d0IsRUFBU2diLFlBQWhELENBTUEsR0FBSXp0QyxJQUNIdjdCLE1BQVUsR0FBSXFYLE1BQ2Q1SixNQUFTdWdELEVBQVMwYSxlQUNsQjNuRSxPQUFTaXRELEVBQVN1aEIsZ0JBQ2xCRSxNQUFTaHVELEVBQUU5aUIsUUFBUSxLQUFVcXZELEVBQVNzdUIsV0FDdEM1TSxPQUFTb0UsR0FBa0I5bEIsRUFBU3VjLGlCQUNwQy9LLFFBQVMvOUMsRUFBRTgzQyxJQUFLdkwsRUFBUzJPLFVBQVcsU0FBV2dFLEVBQUs3aEUsR0FDbkQsT0FDQzAvRSxRQUFTN2QsRUFBSWdGLFNBQ2IrSixPQUFRb0UsR0FBa0I5bEIsRUFBU2lQLGdCQUFnQm4rRCxPQUt0RGloRSxJQUFpQi9SLEVBQVUsb0JBQXFCLG1CQUFvQkEsRUFBVXp5QixJQUU5RXl5QixFQUFTeXdCLFlBQWNsakQsRUFDdkJ5eUIsRUFBUzB3QixvQkFBb0JoZ0YsS0FBTXN2RCxFQUFTNlgsVUFBVzdYLEVBQVV6eUIsSUFVbEUsUUFBU29qRCxJQUFlM3dCLEVBQVVrbkIsR0FFakMsR0FBSXAyRSxHQUFHaThELEVBQ0h5RSxFQUFVeFIsRUFBUzJPLFNBRXZCLElBQU8zTyxFQUFTdVEsVUFBVWdnQixXQUExQixDQUlBLEdBQUloakQsR0FBUXl5QixFQUFTNHdCLG9CQUFvQmxnRixLQUFNc3ZELEVBQVM2WCxVQUFXN1gsRUFDbkUsSUFBT3p5QixHQUFXQSxFQUFNdjdCLEtBQXhCLENBT0EsR0FBSTYrRSxHQUFjOWUsR0FBaUIvUixFQUFVLG9CQUFxQixtQkFBb0JBLEVBQVV6eUIsR0FDaEcsSUFBeUMsS0FBcEM5WixFQUFFZ04sU0FBUyxFQUFPb3dELEdBQXZCLENBS0EsR0FBSXB5RSxHQUFXdWhELEVBQVM4d0IsY0FDeEIsTUFBS3J5RSxFQUFXLEdBQUs4dUIsRUFBTXY3QixNQUFRLEdBQUlxWCxNQUFtQixJQUFUNUssSUFLNUMreUQsRUFBUXorRCxTQUFXdzZCLEVBQU1pa0MsUUFBUXorRCxPQUF0QyxDQWtDQSxJQTdCQWl0RCxFQUFTK3dCLGFBQWV0OUQsRUFBRTlpQixRQUFRLEtBQVU0OEIsR0FJdkNBLEVBQU05dEIsUUFBVWpOLElBQ3BCd3RELEVBQVMwYSxlQUFvQm50QyxFQUFNOXRCLE1BQ25DdWdELEVBQVNzYSxrQkFBb0Ivc0MsRUFBTTl0QixPQUUvQjh0QixFQUFNeDZCLFNBQVdQLElBQ3JCd3RELEVBQVN1aEIsZ0JBQW9CaDBDLEVBQU14NkIsUUFJL0J3NkIsRUFBTWswQyxRQUFVanZFLElBQ3BCd3RELEVBQVNzdUIsYUFDVDc2RCxFQUFFeUIsS0FBTXFZLEVBQU1rMEMsTUFBTyxTQUFXM3dFLEVBQUc2aEUsR0FDbEMzUyxFQUFTc3VCLFVBQVVoeUUsS0FBTXEyRCxFQUFJLElBQU1uQixFQUFReitELFFBQ3hDLEVBQUc0L0QsRUFBSSxJQUNUQSxNQU1FcGxDLEVBQU1tMEMsU0FBV2x2RSxHQUNyQmloQixFQUFFOWlCLE9BQVFxdkQsRUFBU3VjLGdCQUFpQndKLEdBQWlCeDRDLEVBQU1tMEMsU0FJdEQ1d0UsRUFBRSxFQUFHaThELEVBQUl4L0IsRUFBTWlrQyxRQUFReitELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUFNLENBQ25ELEdBQUk2aEUsR0FBTXBsQyxFQUFNaWtDLFFBQVExZ0UsRUFHbkI2aEUsR0FBSTZkLFVBQVloK0UsSUFDcEJnL0QsRUFBUTFnRSxHQUFHNm1FLFNBQVdoRixFQUFJNmQsU0FJdEI3ZCxFQUFJK08sU0FBV2x2RSxHQUNuQmloQixFQUFFOWlCLE9BQVFxdkQsRUFBU2lQLGdCQUFnQm4rRCxHQUFJaTFFLEdBQWlCcFQsRUFBSStPLFNBSTlEM1AsR0FBaUIvUixFQUFVLGdCQUFpQixlQUFnQkEsRUFBVXp5QixRQVV2RSxRQUFTeWpELElBQXNCdFUsR0FFOUIsR0FBSTFjLEdBQVc4TCxHQUFVOUwsU0FDckJnUCxFQUFNdjdDLEVBQUVnTixRQUFTaThDLEVBQU92RyxHQUFRblcsRUFBVSxVQUU5QyxPQUFlLEtBQVJnUCxFQUNOaFAsRUFBVWdQLEdBQ1YsS0FZRixRQUFTbUcsSUFBUW5WLEVBQVVpeEIsRUFBT0MsRUFBS0MsR0FVdEMsR0FSQUQsRUFBTSx3QkFDSmx4QixFQUFXLFlBQVlBLEVBQVMyWSxTQUFTLE1BQVEsSUFBSXVZLEVBRWxEQyxJQUNKRCxHQUFPLGdGQUNxQkMsR0FHdEJGLEVBbUJHaDBFLEVBQU91WCxTQUFXQSxRQUFRQyxLQUNuQ0QsUUFBUUMsSUFBS3k4RCxPQXBCRSxDQUVmLEdBQUlwZSxHQUFNaEgsR0FBVWdILElBQ2hCNTBELEVBQU80MEQsRUFBSXNlLFVBQVl0ZSxFQUFJdWUsT0FNL0IsSUFKS3J4QixHQUNKK1IsR0FBaUIvUixFQUFVLEtBQU0sU0FBV0EsRUFBVW14QixFQUFJRCxJQUc5QyxTQUFSaHpFLEVBQ0pvekUsTUFBT0osT0FFSCxDQUFBLEdBQWEsU0FBUmh6RSxFQUNULEtBQU0sSUFBSTJiLE9BQU1xM0QsRUFFUSxtQkFBUmh6RSxJQUNoQkEsRUFBTThoRCxFQUFVbXhCLEVBQUlELEtBaUJ2QixRQUFTL2tCLElBQVFvVSxFQUFLL3hELEVBQUtqYyxFQUFNZy9FLEdBRWhDLE1BQUs5OUQsR0FBRXBqQixRQUFTa0MsT0FDZmtoQixHQUFFeUIsS0FBTTNpQixFQUFNLFNBQVV6QixFQUFHd2tCLEdBQ3JCN0IsRUFBRXBqQixRQUFTaWxCLEdBQ2Y2MkMsR0FBUW9VLEVBQUsveEQsRUFBSzhHLEVBQUksR0FBSUEsRUFBSSxJQUc5QjYyQyxHQUFRb1UsRUFBSy94RCxFQUFLOEcsTUFPaEJpOEQsSUFBZS8rRSxJQUNuQisrRSxFQUFhaC9FLFFBR1RpYyxFQUFJamMsS0FBVUMsSUFDbEIrdEUsRUFBSWdSLEdBQWMvaUUsRUFBSWpjLE1Bc0J4QixRQUFTaS9FLElBQVc3YixFQUFLOGIsRUFBVUMsR0FFbEMsR0FBSXA4RCxFQUVKLEtBQU0sR0FBSTFCLEtBQVE2OUQsR0FDWkEsRUFBU24yRSxlQUFlc1ksS0FDNUIwQixFQUFNbThELEVBQVM3OUQsR0FFVkgsRUFBRStpQixjQUFlbGhCLElBQ2Q3QixFQUFFK2lCLGNBQWVtL0IsRUFBSS9oRCxNQUMzQitoRCxFQUFJL2hELE9BRUxILEVBQUU5aUIsUUFBUSxFQUFNZ2xFLEVBQUkvaEQsR0FBTzBCLElBRWxCbzhELEdBQXNCLFNBQVQ5OUQsR0FBNEIsV0FBVEEsR0FBcUJILEVBQUVwakIsUUFBUWlsQixHQUN4RXFnRCxFQUFJL2hELEdBQVEwQixFQUFJaGMsUUFHaEJxOEQsRUFBSS9oRCxHQUFRMEIsRUFLZixPQUFPcWdELEdBYVIsUUFBU2dhLElBQWVwMkUsRUFBR3M2RCxFQUFPMTZDLEdBRWpDMUYsRUFBRWxhLEdBQ0FMLEtBQU0sV0FBWTI2RCxFQUFPLFNBQVU5NkQsR0FDbENRLEVBQUVveEMsT0FDRnh4QixFQUFHcGdCLEtBRUpHLEtBQU0sY0FBZTI2RCxFQUFPLFNBQVU5NkQsR0FDcEIsS0FBWkEsRUFBRTgzQixRQUNOOTNCLEVBQUU4WSxpQkFDRnNILEVBQUdwZ0IsTUFHTEcsS0FBTSxpQkFBa0IsV0FFdkIsT0FBTyxJQWNYLFFBQVN5NEUsSUFBZ0JyakIsRUFBV3NqQixFQUFRejRELEVBQUkyb0QsR0FFMUMzb0QsR0FFSm0xQyxFQUFVc2pCLEdBQVF0MUUsTUFDakI2YyxHQUFNQSxFQUNOMm9ELE1BQVNBLElBb0JaLFFBQVMvUCxJQUFpQi9SLEVBQVU2eEIsRUFBYXRnRixFQUFXeXBCLEdBRTNELEdBQUl1bEQsS0FRSixJQU5Lc1IsSUFDSnRSLEVBQU05c0QsRUFBRTgzQyxJQUFLdkwsRUFBUzZ4QixHQUFhdjRFLFFBQVFxTixVQUFXLFNBQVUyTyxFQUFLeGtCLEdBQ3BFLE1BQU93a0IsR0FBSTZELEdBQUd2ZCxNQUFPb2tELEVBQVM2WCxVQUFXNzhDLE1BSXhCLE9BQWR6cEIsRUFBcUIsQ0FDekIsR0FBSXdILEdBQUkwYSxFQUFFOHhCLE1BQU9oMEMsRUFBVSxNQUUzQmtpQixHQUFFdXNDLEVBQVMyYyxRQUFRNW5ELFFBQVNoYyxFQUFHaWlCLEdBRS9CdWxELEVBQUlqa0UsS0FBTXZELEVBQUU2VSxRQUdiLE1BQU8yeUQsR0FJUixRQUFTNkcsSUFBb0JwbkIsR0FFNUIsR0FDQ3ZnRCxHQUFRdWdELEVBQVMwYSxlQUNqQmovQyxFQUFNdWtDLEVBQVM4YSxlQUNmcGtDLEVBQU1zcEIsRUFBU3VoQixlQUdYOWhFLElBQVNnYyxJQUViaGMsRUFBUWdjLEVBQU1pYixHQUlmajNCLEdBQVVBLEVBQVFpM0IsR0FFTCxLQUFSQSxHQUFzQixFQUFSajNCLEtBRWxCQSxFQUFRLEdBR1R1Z0QsRUFBUzBhLGVBQWlCajdELEVBSTNCLFFBQVNvNUQsSUFBYTdZLEVBQVU5aEQsR0FFL0IsR0FBSTR6RSxHQUFXOXhCLEVBQVM4eEIsU0FDcEJDLEVBQU9qbUIsR0FBVWdILElBQUlnZixTQUFTNXpFLEVBRWxDLE9BQUt1VixHQUFFK2lCLGNBQWVzN0MsSUFBY0EsRUFBUzV6RSxHQUdyQzZ6RSxFQUFLRCxFQUFTNXpFLEtBQVU2ekUsRUFBS3hjLEVBRVAsZ0JBQWJ1YyxHQUdUQyxFQUFLRCxJQUFhQyxFQUFLeGMsRUFJeEJ3YyxFQUFLeGMsRUFZYixRQUFTaUYsSUFBZ0J4YSxHQUV4QixNQUFLQSxHQUFTdVEsVUFBVWdLLFlBQ2hCLE1BRUV2YSxFQUFTNmYsTUFBUTdmLEVBQVMwZ0IsWUFDNUIsT0FFRCxNQTR6UlIsUUFBU3NSLElBQVc3SixFQUFNQyxHQUN6QixHQUNDNkosTUFDQTVKLEVBQVU2SixHQUFjQyxlQUN4QkMsRUFBTy8wRSxLQUFLeWtDLE1BQU91bUMsRUFBVSxFQXlCOUIsT0F0QmNBLElBQVRELEVBQ0o2SixFQUFVSSxHQUFRLEVBQUdqSyxHQUVKZ0ssR0FBUmpLLEdBQ1Q4SixFQUFVSSxHQUFRLEVBQUdoSyxFQUFRLEdBQzdCNEosRUFBUTMxRSxLQUFNLFlBQ2QyMUUsRUFBUTMxRSxLQUFNOHJFLEVBQU0sSUFFWEQsR0FBUUMsRUFBUSxFQUFJZ0ssR0FDN0JILEVBQVVJLEdBQVFqSyxHQUFPQyxFQUFRLEdBQUlELEdBQ3JDNkosRUFBUW5sRSxPQUFRLEVBQUcsRUFBRyxZQUN0Qm1sRSxFQUFRbmxFLE9BQVEsRUFBRyxFQUFHLEtBR3RCbWxFLEVBQVVJLEdBQVFsSyxFQUFLaUssRUFBSyxFQUFHakssRUFBS2lLLEVBQUssR0FDekNILEVBQVEzMUUsS0FBTSxZQUNkMjFFLEVBQVEzMUUsS0FBTThyRSxFQUFNLEdBQ3BCNkosRUFBUW5sRSxPQUFRLEVBQUcsRUFBRyxZQUN0Qm1sRSxFQUFRbmxFLE9BQVEsRUFBRyxFQUFHLElBR3ZCbWxFLEVBQVFLLE1BQVEsT0FDVEwsRUFrUVIsUUFBU3hsQixJQUFrQjhsQixHQUMxQjkrRCxFQUFFeUIsTUFHQXlqQixJQUFPLFNBQVc3L0IsR0FDakIsTUFBTzA1RSxJQUFrQjE1RSxFQUFHeTVFLElBSTdCRSxVQUFXLFNBQVczNUUsR0FDckIsTUFBTzA1RSxJQUFrQjE1RSxFQUFHeTVFLEVBQWNHLEtBSTNDQyxXQUFZLFNBQVc3NUUsR0FDdEIsTUFBTzA1RSxJQUFrQjE1RSxFQUFHeTVFLEVBQWNLLEtBSTNDQyxlQUFnQixTQUFXLzVFLEdBQzFCLE1BQU8wNUUsSUFBa0IxNUUsRUFBR3k1RSxFQUFjSyxHQUFVRixNQUd0RCxTQUFXNTRELEVBQUtYLEdBRWYyNUQsR0FBSzUwRSxLQUFLdWpFLE1BQU8zbkQsRUFBSXk0RCxFQUFhLFFBQVdwNUQsRUFHeENXLEVBQUk2aEIsTUFBTSxhQUNkbTNDLEdBQUs1MEUsS0FBS3dqRSxPQUFRNW5ELEVBQUl5NEQsR0FBaUJPLEdBQUs1MEUsS0FBS3dqRSxPQUFPcnNELFFBd041RCxRQUFTMDlELElBQWtCNTVELEdBRTFCLE1BQU8sWUFDTixHQUFJNkIsSUFBUWcyRCxHQUFxQnYxRSxLQUFLcXdELEdBQVVnSCxJQUFJa2dCLGFBQWNuM0UsT0FDakVxQixNQUFNMU0sVUFBVThJLE1BQU01SSxLQUFLaUwsV0FFNUIsT0FBT213RCxJQUFVZ0gsSUFBSW1nQixTQUFTOTVELEdBQUl2ZCxNQUFPSCxLQUFNdWYsSUF6K2NqRCxHQUFJOHdDLElBbUJBZ25CLEdBQ0FJLEdBQ0FDLEdBQ0FDLEdBRUFDLE1BQ0FDLEdBQWdCLFVBQ2hCVixHQUFXLFNBQ1hXLEdBQWlCLFlBQ2pCQyxHQUFlLFlBR2ZoTyxHQUFtQixHQUFJL3lFLFFBQVEsT0FBVSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxLQUFNLElBQUssSUFBSyxLQUFNK0csS0FBSyxPQUFTLElBQUssS0FZOUlrNUUsR0FBd0IsK0NBR3hCZSxHQUFTLFNBQVczNkUsR0FDdkIsTUFBUUEsSUFBS0EsS0FBTSxHQUFjLE1BQU5BLEdBQW1CLEdBQVAsR0FJcEM0NkUsR0FBVSxTQUFXbjhELEdBQ3hCLEdBQUlvOEQsR0FBVTc0RSxTQUFVeWMsRUFBRyxHQUMzQixRQUFRcWhCLE1BQU0rNkMsSUFBWUMsU0FBU3I4RCxHQUFLbzhELEVBQVUsTUFLL0NFLEdBQWdCLFNBQVdsN0MsRUFBS203QyxHQUtuQyxNQUhPVCxJQUFTUyxLQUNmVCxHQUFTUyxHQUFpQixHQUFJcmhGLFFBQVE0eUUsR0FBZ0J5TyxHQUFnQixNQUVqRCxnQkFBUm43QyxJQUFxQyxNQUFqQm03QyxFQUNqQ243QyxFQUFJdG1DLFFBQVMsTUFBTyxJQUFLQSxRQUFTZ2hGLEdBQVNTLEdBQWdCLEtBQzNEbjdDLEdBSUVvN0MsR0FBWSxTQUFXajdFLEVBQUdnN0UsRUFBY0UsR0FDM0MsR0FBSUMsR0FBdUIsZ0JBQU5uN0UsRUFLckIsT0FBSzI2RSxJQUFRMzZFLElBQ0wsR0FHSGc3RSxHQUFnQkcsSUFDcEJuN0UsRUFBSSs2RSxHQUFlLzZFLEVBQUdnN0UsSUFHbEJFLEdBQWFDLElBQ2pCbjdFLEVBQUlBLEVBQUV6RyxRQUFTcWdGLEdBQXVCLE1BRy9COTVDLE1BQU94bUMsV0FBVzBHLEtBQVE4NkUsU0FBVTk2RSxLQUt6Q283RSxHQUFVLFNBQVdwN0UsR0FDeEIsTUFBTzI2RSxJQUFRMzZFLElBQW9CLGdCQUFOQSxJQUkxQnE3RSxHQUFlLFNBQVdyN0UsRUFBR2c3RSxFQUFjRSxHQUM5QyxHQUFLUCxHQUFRMzZFLEdBQ1osT0FBTyxDQUdSLElBQUl1YyxHQUFPNitELEdBQVNwN0UsRUFDcEIsT0FBU3VjLElBRVIwK0QsR0FBV0ssR0FBWXQ3RSxHQUFLZzdFLEVBQWNFLElBQ3pDLEVBRkQsTUFPRTdkLEdBQVMsU0FBV3ZsRSxFQUFHZ2pCLEVBQU15Z0UsR0FDaEMsR0FBSTFlLE1BQ0E3a0UsRUFBRSxFQUFHaThELEVBQUluOEQsRUFBRW1DLE1BSWYsSUFBS3NoRixJQUFVN2hGLEVBQ2QsS0FBVXU2RCxFQUFGajhELEVBQVFBLElBQ1ZGLEVBQUVFLElBQU1GLEVBQUVFLEdBQUk4aUIsSUFDbEIraEQsRUFBSXI1RCxLQUFNMUwsRUFBRUUsR0FBSThpQixHQUFReWdFLFFBSzFCLE1BQVV0bkIsRUFBRmo4RCxFQUFRQSxJQUNWRixFQUFFRSxJQUNONmtFLEVBQUlyNUQsS0FBTTFMLEVBQUVFLEdBQUk4aUIsR0FLbkIsT0FBTytoRCxJQU1KMmUsR0FBZSxTQUFXMWpGLEVBQUc2d0UsRUFBTzd0RCxFQUFNeWdFLEdBRTdDLEdBQUkxZSxNQUNBN2tFLEVBQUUsRUFBR2k4RCxFQUFJMFUsRUFBTTF1RSxNQUluQixJQUFLc2hGLElBQVU3aEYsRUFDZCxLQUFVdTZELEVBQUZqOEQsRUFBUUEsSUFDVkYsRUFBRzZ3RSxFQUFNM3dFLElBQU04aUIsSUFDbkIraEQsRUFBSXI1RCxLQUFNMUwsRUFBRzZ3RSxFQUFNM3dFLElBQU04aUIsR0FBUXlnRSxRQUtuQyxNQUFVdG5CLEVBQUZqOEQsRUFBUUEsSUFDZjZrRSxFQUFJcjVELEtBQU0xTCxFQUFHNndFLEVBQU0zd0UsSUFBTThpQixHQUkzQixPQUFPK2hELElBSUowYyxHQUFTLFNBQVczN0MsRUFBS2ozQixHQUU1QixHQUNJZ2MsR0FEQWs2QyxJQUdDbDJELEtBQVVqTixHQUNkaU4sRUFBUSxFQUNSZ2MsRUFBTWliLElBR05qYixFQUFNaGMsRUFDTkEsRUFBUWkzQixFQUdULEtBQU0sR0FBSTVsQyxHQUFFMk8sRUFBVWdjLEVBQUYzcUIsRUFBUUEsSUFDM0I2a0UsRUFBSXI1RCxLQUFNeEwsRUFHWCxPQUFPNmtFLElBSUo0ZSxHQUFlLFNBQVczakYsR0FJN0IsSUFBTSxHQUZGK2tFLE1BRU03a0UsRUFBRSxFQUFHaThELEVBQUluOEQsRUFBRW1DLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNoQ0YsRUFBRUUsSUFDTjZrRSxFQUFJcjVELEtBQU0xTCxFQUFFRSxHQUlkLE9BQU82a0UsSUFJSnllLEdBQWEsU0FBV3Q3RSxHQUMzQixNQUFPQSxHQUFFekcsUUFBU3VnRixHQUFVLEtBV3pCNWEsR0FBVSxTQUFXeHBELEdBTXhCLEdBRUM4RyxHQUNBeGtCLEVBQ0E2SSxFQUhBZzhELEtBRUc1SSxFQUFJditDLEVBQUl6YixPQUNSNkgsRUFBRSxDQUVONDVFLEdBQU8sSUFBTTFqRixFQUFFLEVBQU1pOEQsRUFBRmo4RCxFQUFRQSxJQUFNLENBR2hDLElBRkF3a0IsRUFBTTlHLEVBQUkxZCxHQUVKNkksRUFBRSxFQUFNaUIsRUFBRmpCLEVBQU1BLElBQ2pCLEdBQUtnOEQsRUFBSWg4RCxLQUFPMmIsRUFDZixRQUFTay9ELEVBSVg3ZSxHQUFJcjVELEtBQU1nWixHQUNWMWEsSUFHRCxNQUFPKzZELElBZ0lKaEosR0FBZSxTQUFXanpELEVBQUcrNkUsRUFBTXBTLEdBQ2pDM29FLEVBQUcrNkUsS0FBV2ppRixJQUNsQmtILEVBQUcyb0UsR0FBUTNvRSxFQUFHKzZFLEtBcXZCWjVlLEdBQVksV0FDWkMsR0FBUyxRQWk0RFQ4UCxHQUFlbnlELEVBQUUsU0FBUyxHQUMxQm95RCxHQUEyQkQsR0FBYTFvQyxjQUFnQjFxQyxFQXEvQnhEczdFLEdBQW1CLFFBNnJDdkJoaUIsSUFBWSxTQUFVMTdELEdBc0NyQnFMLEtBQUtnWSxFQUFJLFNBQVdpaEUsRUFBV0MsR0FFOUIsTUFBT2w1RSxNQUFLbTVFLEtBQUksR0FBTW5oRSxFQUFHaWhFLEVBQVdDLElBb0RyQ2w1RSxLQUFLODVELEVBQUksU0FBV21mLEVBQVdDLEdBRTlCLE1BQU9sNUUsTUFBS201RSxLQUFJLEdBQU1sUSxLQUFNZ1EsRUFBV0MsR0FBUS9rRCxRQWFoRG4wQixLQUFLbTVFLElBQU0sU0FBV0MsR0FFckIsTUFDQyxJQUFJM0IsSUFERTJCLEVBRUw3RCxHQUFxQnYxRSxLQUFNcTNFLEdBQUtFLFlBRXZCdjNFLE9BMENaQSxLQUFLcTVFLFVBQVksU0FBVWxsRCxFQUFNbzRDLEdBRWhDLEdBQUk0TSxHQUFNbjVFLEtBQUttNUUsS0FBSyxHQUdoQmxRLEVBQU9qeEQsRUFBRXBqQixRQUFRdS9CLEtBQVduYyxFQUFFcGpCLFFBQVF1L0IsRUFBSyxLQUFPbmMsRUFBRStpQixjQUFjNUcsRUFBSyxLQUMxRWdsRCxFQUFJbFEsS0FBS24wRCxJQUFLcWYsR0FDZGdsRCxFQUFJdmdFLElBQUk5RCxJQUFLcWYsRUFNZCxRQUpLbzRDLElBQVd4MUUsR0FBYXcxRSxJQUM1QjRNLEVBQUlqZ0UsT0FHRSt2RCxFQUFLcVEsVUFBVXR2RCxXQXlCdkJocUIsS0FBS3U1RSxxQkFBdUIsU0FBV0MsR0FFdEMsR0FBSUwsR0FBTW41RSxLQUFLbTVFLEtBQUssR0FBT3BqQixRQUFRMGpCLFNBQy9CbDFCLEVBQVc0MEIsRUFBSTUwQixXQUFXLEdBQzFCM1QsRUFBUzJULEVBQVMrTixPQUVqQmtuQixLQUFZemlGLEdBQWF5aUYsRUFDN0JMLEVBQUlqZ0UsTUFBTSxJQUVhLEtBQWQwM0IsRUFBT3dsQixJQUEyQixLQUFkeGxCLEVBQU91bEIsS0FFcENFLEdBQWU5UixJQW1CakJ2a0QsS0FBSzA1RSxhQUFlLFNBQVVGLEdBRTdCLEdBQUlMLEdBQU1uNUUsS0FBS201RSxLQUFLLEdBQU92aEMsU0FFdEI0aEMsSUFBWXppRixHQUFheWlGLElBQzdCTCxFQUFJamdFLFFBNkJObFosS0FBSzI1RSxRQUFVLFNBQVUxaEIsR0FFeEJqNEQsS0FBS201RSxLQUFLLEdBQU92Z0UsSUFBS3EvQyxHQUFNcHZDLE1BQU12bEIsUUFzQm5DdEQsS0FBSzQ1RSxZQUFjLFNBQVV2aEYsRUFBUWtMLEVBQVVncEUsR0FFOUMsR0FBSTRNLEdBQU1uNUUsS0FBS201RSxLQUFLLEdBQ2hCbFEsRUFBT2tRLEVBQUlsUSxLQUFNNXdFLEdBQ2pCa3NELEVBQVcwa0IsRUFBSzFrQixXQUFXLEdBQzNCcHdCLEVBQU9vd0IsRUFBUzZTLE9BQVE2UixFQUFLLEdBQUcsR0FZcEMsT0FWQUEsR0FBS3B6RCxTQUVBdFMsR0FDSkEsRUFBU3RPLEtBQU0rSyxLQUFNdWtELEVBQVVwd0IsSUFHM0JvNEMsSUFBV3gxRSxHQUFhdzFFLElBQzVCNE0sRUFBSWpnRSxPQUdFaWIsR0FrQlJuMEIsS0FBSzY1RSxVQUFZLFNBQVdoa0UsR0FFM0I3VixLQUFLbTVFLEtBQUssR0FBTzVoRSxRQUFTMUIsSUFrQjNCN1YsS0FBSzg1RSxPQUFTLFNBQVVwbkUsR0FJdkIxUyxLQUFLbTVFLEtBQUssR0FBT2pnRSxLQUFNeEcsSUF1QnhCMVMsS0FBSys1RSxTQUFXLFNBQVVDLEVBQVF4VyxFQUFTNEMsRUFBUTBCLEVBQVFtUyxFQUFhbFMsR0FFdkUsR0FBSW9SLEdBQU1uNUUsS0FBS201RSxLQUFLLEVBRUgsUUFBWjNWLEdBQW9CQSxJQUFZenNFLEVBQ3BDb2lGLEVBQUlsVCxPQUFRK1QsRUFBUTVULEVBQVEwQixFQUFRQyxHQUdwQ29SLEVBQUlubUIsT0FBUXdRLEdBQVV5QyxPQUFRK1QsRUFBUTVULEVBQVEwQixFQUFRQyxHQUd2RG9SLEVBQUlqZ0UsUUF5Q0xsWixLQUFLdTBELFVBQVksU0FBVXhoRCxFQUFLbWtELEdBRS9CLEdBQUlpaUIsR0FBTW41RSxLQUFLbTVFLEtBQUssRUFFcEIsSUFBS3BtRSxJQUFRaGMsRUFBWSxDQUN4QixHQUFJMEwsR0FBT3NRLEVBQUl4YSxTQUFXd2EsRUFBSXhhLFNBQVNxRyxjQUFnQixFQUV2RCxPQUFPczRELEtBQVFuZ0UsR0FBcUIsTUFBUjBMLEdBQXdCLE1BQVJBLEVBQzNDMDJFLEVBQUl6ekMsS0FBTTN5QixFQUFLbWtELEdBQU0vaUMsT0FDckJnbEQsRUFBSXZnRSxJQUFLN0YsR0FBTW9oQixRQUFVLEtBRzNCLE1BQU9nbEQsR0FBSWhsRCxPQUFPbkssV0FzQm5CaHFCLEtBQUtrNkUsV0FBYSxTQUFVL2hCLEdBRTNCLEdBQUlnaEIsR0FBTW41RSxLQUFLbTVFLEtBQUssRUFFcEIsT0FBT2hoQixLQUFTcGhFLEVBQ2ZvaUYsRUFBSXZnRSxJQUFLdS9DLEdBQU92dUMsT0FDaEJ1dkQsRUFBSWxRLE9BQU9oYixRQUFRcXJCLFVBQVV0dkQsV0FnQy9CaHFCLEtBQUttNkUsY0FBZ0IsU0FBVXZ3RCxHQUU5QixHQUFJdXZELEdBQU1uNUUsS0FBS201RSxLQUFLLEdBQ2hCNWdGLEVBQVdxeEIsRUFBS3J4QixTQUFTcUYsYUFFN0IsSUFBaUIsTUFBWnJGLEVBQ0osTUFBTzRnRixHQUFJdmdFLElBQUtnUixHQUFPN0UsT0FFbkIsSUFBaUIsTUFBWnhzQixHQUFnQyxNQUFaQSxFQUFtQixDQUNoRCxHQUFJbXRDLEdBQU95ekMsRUFBSXp6QyxLQUFNOWIsR0FBTzdFLE9BRTVCLFFBQ0MyZ0IsRUFBSzlzQixJQUNMOHNCLEVBQUswMEMsY0FDTDEwQyxFQUFLc3RCLFFBR1AsTUFBTyxPQTJCUmh6RCxLQUFLcTZFLFNBQVcsU0FBVXBpQixHQUV6QixNQUFPajRELE1BQUttNUUsS0FBSyxHQUFPdmdFLElBQUtxL0MsR0FBTXB2QyxNQUFNeXhELFdBa0MxQ3Q2RSxLQUFLdTZFLE9BQVMsU0FBVXRpQixFQUFLdWlCLEVBQU92bUIsR0FFbkMsTUFBT2owRCxNQUFLbTVFLEtBQUssR0FDZnZnRSxJQUFLcS9DLEdBQ0xwdkMsTUFBTzJ4RCxFQUFPdm1CLEdBQ2RseEQsT0FDQThsQixRQUFRLElBb0JYN29CLEtBQUt5NkUsYUFBZSxTQUFXQyxFQUFTbEIsR0FFdkMsR0FBSUwsR0FBTW41RSxLQUFLbTVFLEtBQUssR0FBT3pNLEtBQU1nTyxJQUU1QmxCLElBQVl6aUYsR0FBYXlpRixJQUM3QkwsRUFBSWpnRSxNQUFLLElBcUJYbFosS0FBSzI2RSxlQUFpQixTQUFXMW5CLEVBQU0ybkIsRUFBT3BCLEdBRTdDLEdBQUlMLEdBQU1uNUUsS0FBS201RSxLQUFLLEdBQU9ubUIsT0FBUUMsR0FBTzhoQixRQUFTNkYsSUFFOUNwQixJQUFZemlGLEdBQWF5aUYsSUFDN0JMLEVBQUlwakIsUUFBUTBqQixTQUFTdmdFLFFBcUJ2QmxaLEtBQUs2NkUsV0FBYSxXQUVqQixNQUFPdEYsSUFBcUJ2MUUsS0FBS3EzRSxHQUFLRSxhQW1CdkN2M0UsS0FBSzg2RSxPQUFTLFNBQVVDLEdBRXZCLzZFLEtBQUttNUUsS0FBSyxHQUFPblQsTUFBTytVLEdBQVM3aEUsUUFvQmxDbFosS0FBS2c3RSxlQUFpQixTQUFVQyxFQUFPelgsRUFBUzBYLEdBRS9DbDdFLEtBQUttNUUsS0FBSyxHQUFPblQsTUFBTWxyRCxTQUFVbWdFLEVBQU96WCxFQUFTMFgsSUEwQmxEbDdFLEtBQUs2c0UsU0FBVyxTQUFVdlosRUFBTzZuQixFQUFNM1gsRUFBU2dXLEVBQVM0QixHQUV4RCxHQUFJakMsR0FBTW41RSxLQUFLbTVFLEtBQUssRUFnQnBCLE9BZEszVixLQUFZenNFLEdBQXlCLE9BQVp5c0UsRUFDN0IyVixFQUFJdmdFLElBQUt1aUUsR0FBT2huRCxLQUFNbS9CLEdBR3RCNmxCLEVBQUl6ekMsS0FBTXkxQyxFQUFNM1gsR0FBVXJ2QyxLQUFNbS9CLElBRzVCOG5CLElBQVlya0YsR0FBYXFrRixJQUM3QmpDLEVBQUlwakIsUUFBUTBqQixVQUdSRCxJQUFZemlGLEdBQWF5aUYsSUFDN0JMLEVBQUlqZ0UsT0FFRSxHQXFCUmxaLEtBQUtxN0UsZUFBaUJoRSxHQUFLZ0UsY0FHM0IsSUFBSUMsR0FBUXQ3RSxLQUNSdTdFLEVBQVk1bUYsSUFBWW9DLEVBQ3hCa2tDLEVBQU1qN0IsS0FBSzFJLE1BRVZpa0YsS0FDSjVtRixNQUdEcUwsS0FBS3c3RSxLQUFPeDdFLEtBQUt3M0UsU0FBV0gsR0FBS0csUUFHakMsS0FBTSxHQUFJOTVELEtBQU0yeUMsSUFBVWdILElBQUltZ0IsU0FDeEI5NUQsSUFDSjFkLEtBQUswZCxHQUFNNDVELEdBQWlCNTVELEdBOGQ5QixPQTFkQTFkLE1BQUt5WixLQUFLLFdBR1QsR0FNU3c4QyxHQU5MaDRELEtBQ0F3dEUsRUFBUXh3QyxFQUFNLEVBQ2pCODZDLEdBQVc5M0UsRUFBR3RKLEdBQVMsR0FDdkJBLEVBR0dVLEVBQUUsRUFDRm9tRixFQUFNejdFLEtBQUtuRyxhQUFjLE1BQ3pCNmhGLEdBQWlCLEVBQ2pCM2hGLEVBQVdzMkQsR0FBVXQyRCxTQUNyQjB6RCxFQUFRejFDLEVBQUVoWSxLQUlkLElBQW9DLFNBQS9CQSxLQUFLekgsU0FBU3FHLGNBR2xCLFdBREE4NkQsSUFBUSxLQUFNLEVBQUcsa0NBQWtDMTVELEtBQUt6SCxTQUFTLElBQUssRUFLdkUwNEQsR0FBZWwzRCxHQUNmMDNELEVBQWUxM0QsRUFBU2k1RCxRQUd4QmhELEVBQXFCajJELEVBQVVBLEdBQVUsR0FDekNpMkQsRUFBcUJqMkQsRUFBU2k1RCxPQUFRajVELEVBQVNpNUQsUUFBUSxHQUd2RGhELEVBQXFCajJELEVBQVVpZSxFQUFFOWlCLE9BQVF1MkUsRUFBT2hlLEVBQU10NUIsUUFLdEQsSUFBSXduRCxHQUFjdHJCLEdBQVU5TCxRQUM1QixLQUFNbHZELEVBQUUsRUFBRzRnRSxFQUFLMGxCLEVBQVlya0YsT0FBVzIrRCxFQUFGNWdFLEVBQVNBLElBQzlDLENBQ0MsR0FBSXltQixHQUFJNi9ELEVBQVl0bUYsRUFHcEIsSUFBS3ltQixFQUFFb2xELFFBQVVsaEUsTUFBUThiLEVBQUU4Z0QsT0FBT3BrRSxZQUFjd0gsTUFBUzhiLEVBQUVnaEQsUUFBVWhoRCxFQUFFZ2hELE9BQU90a0UsWUFBY3dILEtBQzVGLENBQ0MsR0FBSTQ3RSxHQUFZblEsRUFBTW1RLFlBQWM3a0YsRUFBWTAwRSxFQUFNbVEsVUFBWTdoRixFQUFTNmhGLFVBQ3ZFQyxFQUFXcFEsRUFBTW9RLFdBQWE5a0YsRUFBWTAwRSxFQUFNb1EsU0FBVzloRixFQUFTOGhGLFFBRXhFLElBQUtOLEdBQWFLLEVBRWpCLE1BQU85L0QsR0FBRXNnRCxTQUVMLElBQUt5ZixFQUNWLENBQ0MvL0QsRUFBRXNnRCxVQUFVeWQsV0FDWixPQUtBLFdBREFuZ0IsSUFBUTU5QyxFQUFHLEVBQUcsZ0NBQWlDLEdBVWpELEdBQUtBLEVBQUVvaEQsVUFBWWw5RCxLQUFLVixHQUN4QixDQUNDcThFLEVBQVl0cUUsT0FBUWhjLEVBQUcsRUFDdkIsU0FLVyxPQUFSb21GLEdBQXdCLEtBQVJBLEtBRXBCQSxFQUFNLG9CQUFxQnByQixHQUFVZ0gsSUFBSWtGLFVBQ3pDdjhELEtBQUtWLEdBQUttOEUsRUFJWCxJQUFJNW9CLEdBQVk3NkMsRUFBRTlpQixRQUFRLEtBQVVtN0QsR0FBVWtCLE9BQU9zQixXQUNwRGlwQixjQUFpQnJ1QixFQUFNLEdBQUdodkQsTUFBTXNHLE1BQ2hDaXRFLFVBQWlCeUosRUFDakJ2ZSxTQUFpQnVlLEdBRWxCNW9CLEdBQVVxTyxPQUFTbGhFLEtBQ25CNnlELEVBQVUyb0IsS0FBU0YsRUFBTTlELFNBQ3pCM2tCLEVBQVU0WSxNQUFTQSxFQUVuQmtRLEVBQVk5NkUsS0FBTWd5RCxHQUlsQkEsRUFBVXVKLFVBQTRCLElBQWZrZixFQUFNaGtGLE9BQWNna0YsRUFBUTd0QixFQUFNeDBDLFlBR3pEZzRDLEVBQWV3YSxHQUVWQSxFQUFNbmIsV0FFVkgsRUFBbUJzYixFQUFNbmIsV0FJckJtYixFQUFNRyxjQUFpQkgsRUFBTXNRLGlCQUVqQ3RRLEVBQU1zUSxlQUFpQi9qRSxFQUFFcGpCLFFBQVM2MkUsRUFBTUcsWUFBWSxJQUNuREgsRUFBTUcsWUFBWSxHQUFHLEdBQUtILEVBQU1HLFlBQVksSUFLOUNILEVBQVFzSyxHQUFXLzlELEVBQUU5aUIsUUFBUSxLQUFVNkUsR0FBWTB4RSxHQUluRC9hLEdBQVFtQyxFQUFVaUMsVUFBVzJXLEdBQzVCLFlBQ0EsZ0JBQ0EsVUFDQSxRQUNBLGFBQ0EsUUFDQSxjQUNBLGFBQ0EsZUFDQSxjQUNBLGlCQUVEL2EsR0FBUW1DLEVBQVc0WSxHQUNsQixrQkFDQSxPQUNBLGVBQ0EsaUJBQ0EsZ0JBQ0EsWUFDQSxpQkFDQSxjQUNBLGtCQUNBLGNBQ0EsZ0JBQ0EsaUJBQ0EsT0FDQSxnQkFDQSxZQUNBLHNCQUNBLHNCQUNBLFdBQ0EsY0FDQSxTQUNFLGtCQUFtQixtQkFDbkIsVUFBVyxvQkFDWCxlQUFnQixvQkFDaEIsaUJBQWtCLG9CQUNsQixZQUFhLFVBRWhCL2EsR0FBUW1DLEVBQVVQLFFBQVNtWixJQUN4QixXQUFZLE9BQ1osZ0JBQWlCLFlBQ2pCLFdBQVksT0FDWixrQkFBbUIsZUFFdEIvYSxHQUFRbUMsRUFBVXZDLFVBQVdtYixFQUFPLGtCQUdwQ3lLLEdBQWdCcmpCLEVBQVcsaUJBQXdCNFksRUFBTXVRLGVBQXFCLFFBQzlFOUYsR0FBZ0JyakIsRUFBVyxpQkFBd0I0WSxFQUFNd1EsZUFBcUIsUUFDOUUvRixHQUFnQnJqQixFQUFXLG9CQUF3QjRZLEVBQU15USxrQkFBcUIsUUFDOUVoRyxHQUFnQnJqQixFQUFXLG9CQUF3QjRZLEVBQU0wUSxrQkFBcUIsUUFDOUVqRyxHQUFnQnJqQixFQUFXLGdCQUF3QjRZLEVBQU0yUSxjQUFxQixRQUM5RWxHLEdBQWdCcmpCLEVBQVcsZ0JBQXdCNFksRUFBTTRRLGNBQXFCLFFBQzlFbkcsR0FBZ0JyakIsRUFBVyx1QkFBd0I0WSxFQUFNNlEsYUFBcUIsUUFDOUVwRyxHQUFnQnJqQixFQUFXLG1CQUF3QjRZLEVBQU04USxpQkFBcUIsUUFDOUVyRyxHQUFnQnJqQixFQUFXLG1CQUF3QjRZLEVBQU0rUSxpQkFBcUIsUUFDOUV0RyxHQUFnQnJqQixFQUFXLGlCQUF3QjRZLEVBQU1nUixlQUFxQixRQUM5RXZHLEdBQWdCcmpCLEVBQVcsb0JBQXdCNFksRUFBTWlSLGtCQUFxQixRQUU5RTdwQixFQUFVMkYsUUFBVXBFLEVBQW9CcVgsRUFBTTVQLE9BRzlDakssRUFBa0JpQixFQUVsQixJQUFJYyxHQUFXZCxFQUFVYyxRQXFDekIsSUFsQ0s4WCxFQUFNa1IsV0FLVjNrRSxFQUFFOWlCLE9BQVF5K0QsRUFBVXRELEdBQVVnSCxJQUFJdWxCLFlBQWFuUixFQUFNOVgsVUFFaEQ4WCxFQUFNMUosT0FBU2hvRSxFQUFTZ29FLE1BQTBCLFdBQWxCaG9FLEVBQVNnb0UsT0FHN0NsUCxFQUFVa1AsS0FBTyxvQkFHWGxQLEVBQVV3akIsU0FHUHIrRCxFQUFFK2lCLGNBQWU4M0IsRUFBVXdqQixZQUFnQnhqQixFQUFVd2pCLFNBQVN0RyxTQUN2RWxkLEVBQVV3akIsU0FBU3RHLE9BQVMsWUFINUJsZCxFQUFVd2pCLFNBQVcsWUFRdEJyK0QsRUFBRTlpQixPQUFReStELEVBQVV0RCxHQUFVZ0gsSUFBSTJGLFFBQVN5TyxFQUFNOVgsVUFFbERsRyxFQUFNdDJELFNBQVV3OEQsRUFBU2twQixRQUdwQmhxQixFQUFVZ00sb0JBQXNCOW5FLElBR3BDODdELEVBQVVnTSxrQkFBb0I0TSxFQUFNdE0sY0FDcEN0TSxFQUFVb00sZUFBaUJ3TSxFQUFNdE0sZUFHTCxPQUF4QnNNLEVBQU1xUixjQUNYLENBQ0NqcUIsRUFBVXlNLGVBQWdCLENBQzFCLElBQUkyRSxHQUFNanNELEVBQUVwakIsUUFBUzYyRSxFQUFNcVIsY0FDM0JqcUIsR0FBVXFVLGlCQUFtQmpELEVBQU13SCxFQUFNcVIsY0FBYyxHQUFLclIsRUFBTXFSLGNBQ2xFanFCLEVBQVVvVSxlQUFpQmhELEVBQU13SCxFQUFNcVIsY0FBYyxHQUFLclIsRUFBTXFSLGNBSWpFLEdBQUl4c0IsR0FBWXVDLEVBQVV2QyxTQUMxQnQ0QyxHQUFFOWlCLFFBQVEsRUFBTW83RCxFQUFXbWIsRUFBTW5iLFdBRVQsS0FBbkJBLEVBQVV5c0IsT0FNZC9rRSxFQUFFb3NELE1BQ0RNLFNBQVUsT0FDVlEsSUFBSzVVLEVBQVV5c0IsS0FDZnZZLFFBQVMsU0FBV3A5QyxHQUNuQitvQyxFQUFtQi9vQyxHQUNuQjRvQyxFQUFxQmoyRCxFQUFTdTJELFVBQVdscEMsR0FDekNwUCxFQUFFOWlCLFFBQVEsRUFBTW83RCxFQUFXbHBDLEdBQzNCK2pELEdBQWV0WSxJQUVoQnYzQixNQUFPLFdBRU42dkMsR0FBZXRZLE1BR2pCNm9CLEdBQWlCLEdBTWEsT0FBMUJqUSxFQUFNaE4sa0JBRVY1TCxFQUFVNEwsaUJBQ1Q5SyxFQUFTcXBCLFdBQ1RycEIsRUFBU3NwQixhQUtYLElBQUlDLEdBQWdCcnFCLEVBQVU0TCxnQkFDMUIwZSxFQUFTMXZCLEVBQU1ub0QsU0FBUyxTQUFTcVUsS0FBSyxNQUFNODNELEdBQUcsRUFHekMsTUFGTHo1RCxFQUFFZ04sU0FBUyxFQUFNaE4sRUFBRTgzQyxJQUFLb3RCLEVBQWUsU0FBU3oyRSxFQUFJcFIsR0FDeEQsTUFBTzhuRixHQUFPdG1GLFNBQVM0UCxRQUV2QnVSLEVBQUUsV0FBWWhZLE1BQU16SSxZQUFhMmxGLEVBQWNuL0UsS0FBSyxNQUNwRDgwRCxFQUFVdXFCLGlCQUFtQkYsRUFBY3IvRSxRQU81QyxJQUNJdy9FLEdBREFDLEtBRUFqYSxFQUFTcmpFLEtBQUtySCxxQkFBcUIsUUFRdkMsSUFQdUIsSUFBbEIwcUUsRUFBTy9yRSxTQUVYK2xFLEVBQWlCeEssRUFBVXlLLFNBQVUrRixFQUFPLElBQzVDaWEsRUFBUTFaLEVBQWlCL1EsSUFJRCxPQUFwQjRZLEVBQU12WSxVQUdWLElBREFtcUIsS0FDTWhvRixFQUFFLEVBQUc0Z0UsRUFBS3FuQixFQUFNaG1GLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUV2Q2dvRixFQUFjeDhFLEtBQU0sVUFLckJ3OEUsR0FBZ0I1UixFQUFNdlksU0FJdkIsS0FBTTc5RCxFQUFFLEVBQUc0Z0UsRUFBS29uQixFQUFjL2xGLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUUvQ3U5RCxFQUFjQyxFQUFXeXFCLEVBQVFBLEVBQU1qb0YsR0FBSyxLQVc3QyxJQVBBbWlFLEVBQW9CM0UsRUFBVzRZLEVBQU04UixhQUFjRixFQUFlLFNBQVVwcUIsRUFBTXVxQixHQUNqRi9wQixFQUFrQlosRUFBV0ksRUFBTXVxQixLQU0vQkwsRUFBTzdsRixPQUFTLENBQ3BCLEdBQUluQyxHQUFJLFNBQVd1d0MsRUFBTTV1QyxHQUN4QixNQUE2QyxRQUF0QzR1QyxFQUFLN3JDLGFBQWMsUUFBUS9DLEdBQWtCQSxFQUFPLEtBRzVEa2hCLEdBQUdtbEUsRUFBTyxJQUFLNzNFLFNBQVMsVUFBVW1VLEtBQU0sU0FBVXBrQixFQUFHcXdDLEdBQ3BELEdBQUl3eEIsR0FBTXJFLEVBQVVLLFVBQVU3OUQsRUFFOUIsSUFBSzZoRSxFQUFJNUQsUUFBVWorRCxFQUFJLENBQ3RCLEdBQUl5dkIsR0FBTzN2QixFQUFHdXdDLEVBQU0sU0FBWXZ3QyxFQUFHdXdDLEVBQU0sU0FDckN6VSxFQUFTOTdCLEVBQUd1d0MsRUFBTSxXQUFjdndDLEVBQUd1d0MsRUFBTSxXQUUvQixPQUFUNWdCLEdBQTRCLE9BQVhtTSxLQUNyQmltQyxFQUFJNUQsT0FDSHdHLEVBQVF6a0UsRUFBRSxXQUNWeXZCLEtBQWlCLE9BQVRBLEVBQWtCenZCLEVBQUUsVUFBVXl2QixFQUFTL3RCLEVBQy9DMEwsS0FBaUIsT0FBVHFpQixFQUFrQnp2QixFQUFFLFVBQVV5dkIsRUFBUy90QjtBQUMvQ2s2QixPQUFtQixPQUFYQSxFQUFrQjU3QixFQUFFLFVBQVU0N0IsRUFBU2w2QixHQUdoRDA4RCxFQUFrQlosRUFBV3g5RCxPQU1qQyxHQUFJcXJFLEdBQVc3TixFQUFVaUMsU0FrQnpCLElBZksyVyxFQUFNcUosYUFFVnBVLEVBQVNvVSxZQUFhLEVBQ3RCSSxHQUFjcmlCLEVBQVc0WSxHQUN6QnlLLEdBQWdCcmpCLEVBQVcsaUJBQWtCZ2lCLEdBQWMsZUFXdkRwSixFQUFNb0gsWUFBYzk3RSxFQUN6QixDQUNDLEdBQUkrOEUsR0FBVWpoQixFQUFVZ2dCLFNBQ3hCLEtBQU14OUUsRUFBRSxFQUFHNGdFLEVBQUs2ZCxFQUFReDhFLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUV6Q3krRSxFQUFReitFLEdBQUcsR0FBS3c5RCxFQUFVSyxVQUFXNzlELEdBQUk4L0QsVUFBVSxHQU9yRGlmLEdBQW1CdmhCLEdBRWQ2TixFQUFTM0wsT0FFYm1oQixHQUFnQnJqQixFQUFXLGlCQUFrQixXQUM1QyxHQUFLQSxFQUFVeU4sUUFBVSxDQUN4QixHQUFJaVMsR0FBUTVNLEdBQWdCOVMsR0FDeEI0cUIsSUFFSnpsRSxHQUFFeUIsS0FBTTg0RCxFQUFPLFNBQVVsOUUsRUFBR3drQixHQUMzQjRqRSxFQUFlNWpFLEVBQUk5RyxLQUFROEcsRUFBSTRzRCxNQUdoQ25RLEdBQWlCekQsRUFBVyxLQUFNLFNBQVVBLEVBQVcwZixFQUFPa0wsSUFDOURsSyxHQUFhMWdCLE1BS2hCcWpCLEdBQWdCcmpCLEVBQVcsaUJBQWtCLFlBQ3ZDQSxFQUFVeU4sU0FBMEMsUUFBL0J2QixHQUFlbE0sSUFBeUI2TixFQUFTaEksZUFDMUUwYixHQUFtQnZoQixJQUVsQixLQVNILElBQUk2cUIsR0FBV2p3QixFQUFNbm9ELFNBQVMsV0FBV21VLEtBQU0sV0FDOUN6WixLQUFLb3RFLGFBQWUzZixFQUFNNVEsSUFBSSxrQkFHM0I4ZixFQUFRbFAsRUFBTW5vRCxTQUFTLFFBQ0wsS0FBakJxM0QsRUFBTXJsRSxTQUVWcWxFLEVBQVEza0QsRUFBRSxZQUFZMDBDLFNBQVMxc0QsT0FFaEM2eUQsRUFBVStKLE9BQVNELEVBQU0sRUFFekIsSUFBSWdoQixHQUFRbHdCLEVBQU1ub0QsU0FBUyxRQUNMLEtBQWpCcTRFLEVBQU1ybUYsU0FFVnFtRixFQUFRM2xFLEVBQUUsWUFBWTAwQyxTQUFTMXNELE9BRWhDNnlELEVBQVV1TixPQUFTdWQsRUFBTSxFQUV6QixJQUFJOWdCLEdBQVFwUCxFQUFNbm9ELFNBQVMsUUFpQjNCLElBaEJzQixJQUFqQnUzRCxFQUFNdmxFLFFBQWdCb21GLEVBQVNwbUYsT0FBUyxJQUErQixLQUF6QnU3RCxFQUFVUCxRQUFROEQsSUFBc0MsS0FBekJ2RCxFQUFVUCxRQUFRNkQsTUFJbkcwRyxFQUFRN2tELEVBQUUsWUFBWTAwQyxTQUFTMXNELE9BR1YsSUFBakI2OEQsRUFBTXZsRSxRQUE0QyxJQUE1QnVsRSxFQUFNdjNELFdBQVdoTyxPQUMzQ20yRCxFQUFNdDJELFNBQVV3OEQsRUFBUzBOLFdBRWhCeEUsRUFBTXZsRSxPQUFTLElBQ3hCdTdELEVBQVVpSyxPQUFTRCxFQUFNLEdBQ3pCUSxFQUFpQnhLLEVBQVU0SyxTQUFVNUssRUFBVWlLLFNBSTNDMk8sRUFBTWxFLE9BRVYsSUFBTWx5RSxFQUFFLEVBQUlBLEVBQUVvMkUsRUFBTWxFLE9BQU9qd0UsT0FBU2pDLElBRW5DMGlFLEVBQVlsRixFQUFXNFksRUFBTWxFLE9BQVFseUUsU0FHN0J3OUQsRUFBVXlNLGVBQStDLE9BQTlCUCxHQUFlbE0sS0FNbkQrRixFQUFVL0YsRUFBVzc2QyxFQUFFNjZDLEVBQVV1TixRQUFROTZELFNBQVMsTUFJbkR1dEQsR0FBVStILFVBQVkvSCxFQUFVMEYsZ0JBQWdCMTZELFFBR2hEZzFELEVBQVV5WSxjQUFlLEVBS3BCb1EsS0FBbUIsR0FFdkJ2USxHQUFldFksS0FHakJ5b0IsRUFBUSxLQUNEdDdFLEtBeUNSLElBQUk0OUUsT0FTQUMsR0FBZXA4RSxNQUFNMU0sVUF1QnJCK29GLEdBQWMsU0FBV0MsR0FFNUIsR0FBSXhxQixHQUFLeXFCLEVBQ0x6NUIsRUFBVzhMLEdBQVU5TCxTQUNyQjA1QixFQUFTam1FLEVBQUU4M0MsSUFBS3ZMLEVBQVUsU0FBVTk5QyxFQUFJcFIsR0FDM0MsTUFBT29SLEdBQUd5NkQsUUFHWCxPQUFPNmMsR0FHR0EsRUFBTTdjLFFBQVU2YyxFQUFNdkMsTUFFdEJ1QyxHQUVBQSxFQUFNeGxGLFVBQTZDLFVBQWpDd2xGLEVBQU14bEYsU0FBU3FHLGVBRTFDMjBELEVBQU12N0MsRUFBRWdOLFFBQVMrNEQsRUFBT0UsR0FDVCxLQUFSMXFCLEdBQWVoUCxFQUFTZ1AsSUFBUyxNQUUvQndxQixHQUFtQyxrQkFBbkJBLEdBQU14NUIsU0FDeEJ3NUIsRUFBTXg1QixXQUFXdjZCLFdBRUUsZ0JBQVYrekQsR0FFaEJDLEVBQUtobUUsRUFBRStsRSxHQUVFQSxZQUFpQi9sRSxLQUUxQmdtRSxFQUFLRCxHQUdEQyxFQUNHQSxFQUFHbHVCLElBQUssU0FBU3o2RCxHQUV2QixNQURBaytELEdBQU12N0MsRUFBRWdOLFFBQVNobEIsS0FBTWkrRSxHQUNSLEtBQVIxcUIsRUFBYWhQLEVBQVNnUCxHQUFPLE9BQ2pDdnBDLFVBSkwsV0ErRER5dEQsSUFBTyxTQUFXejRELEVBQVNtVixHQUUxQixLQUFRbjBCLGVBQWdCeTNFLEtBQ3ZCLE1BQU8sSUFBSUEsSUFBTXo0RCxFQUFTbVYsRUFHM0IsSUFBSW93QixNQUNBMjVCLEVBQWMsU0FBV2pnRixHQUM1QixHQUFJOUksR0FBSTJvRixHQUFhNy9FLEVBQ2hCOUksS0FDSm92RCxFQUFXQSxFQUFTbmtELE9BQVFqTCxJQUk5QixJQUFLNmlCLEVBQUVwakIsUUFBU29xQixHQUNmLElBQU0sR0FBSTNwQixHQUFFLEVBQUdpOEQsRUFBSXR5QyxFQUFRMW5CLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUMzQzZvRixFQUFhbC9ELEVBQVEzcEIsUUFJdEI2b0YsR0FBYWwvRCxFQUlkaGYsTUFBS2dmLFFBQVV1OUMsR0FBU2hZLEdBR25CcHdCLEdBQ0puYyxFQUFFME8sTUFBTzFtQixLQUFNbTBCLEdBSWhCbjBCLEtBQUttZ0MsVUFDSjhvQyxLQUFNLEtBQ041aUIsS0FBTSxLQUNOdnJCLEtBQU0sTUFHUDI4QyxHQUFLdmlGLE9BQVE4SyxLQUFNQSxLQUFNNDlFLEtBRzFCdnRCLEdBQVU4dEIsSUFBTTFHLEdBSWhCei9ELEVBQUU5aUIsT0FBUXVpRixHQUFLMWlGLFdBQ2RxcEYsSUFBSyxXQUVKLE1BQXdCLEtBQWpCcCtFLEtBQUt3ekIsU0FJYnB6QixPQUFTeTlFLEdBQWF6OUUsT0FHdEI0ZSxXQUdBd1UsTUFBTyxXQUVOLE1BQU94ekIsTUFBS3M1RSxVQUFVaGlGLFFBSXZCbWlCLEtBQU0sU0FBV2lFLEdBRWhCLElBQU0sR0FBSXJvQixHQUFFLEVBQUdpOEQsRUFBSXR4RCxLQUFLMUksT0FBV2c2RCxFQUFGajhELEVBQU9BLElBQ3ZDcW9CLEVBQUd6b0IsS0FBTStLLEtBQU1BLEtBQUszSyxHQUFJQSxFQUFHMkssS0FHNUIsT0FBT0EsT0FJUnl4RSxHQUFJLFNBQVdsZSxHQUVkLEdBQUk4cUIsR0FBTXIrRSxLQUFLZ2YsT0FFZixPQUFPcS9ELEdBQUkvbUYsT0FBU2k4RCxFQUNuQixHQUFJa2tCLElBQU00RyxFQUFJOXFCLEdBQU12ekQsS0FBS3V6RCxJQUN6QixNQUlGdGlDLE9BQVEsU0FBV3ZULEdBRWxCLEdBQUl2b0IsS0FFSixJQUFLMG9GLEdBQWE1c0QsT0FDakI5N0IsRUFBSTBvRixHQUFhNXNELE9BQU9oOEIsS0FBTStLLEtBQU0wZCxFQUFJMWQsVUFJeEMsS0FBTSxHQUFJM0ssR0FBRSxFQUFHaThELEVBQUl0eEQsS0FBSzFJLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNuQ3FvQixFQUFHem9CLEtBQU0rSyxLQUFNQSxLQUFLM0ssR0FBSUEsRUFBRzJLLE9BQy9CN0ssRUFBRTBMLEtBQU1iLEtBQUszSyxHQUtoQixPQUFPLElBQUlvaUYsSUFBTXozRSxLQUFLZ2YsUUFBUzdwQixJQUloQ21rRixRQUFTLFdBRVIsR0FBSW5rRixLQUNKLE9BQU8sSUFBSXNpRixJQUFNejNFLEtBQUtnZixRQUFTN3BCLEVBQUVpTCxPQUFPRCxNQUFPaEwsRUFBRzZLLEtBQUtncUIsYUFJeERqc0IsS0FBUzgvRSxHQUFhOS9FLEtBR3RCckgsUUFBU21uRixHQUFhbm5GLFNBQVcsU0FBVTZqQixFQUFLdlcsR0FFL0MsSUFBTSxHQUFJM08sR0FBRzJPLEdBQVMsRUFBSXN0RCxFQUFJdHhELEtBQUsxSSxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFDbkQsR0FBSzJLLEtBQUszSyxLQUFPa2xCLEVBQ2hCLE1BQU9sbEIsRUFHVCxPQUFPLElBR1JxekIsU0FBVSxTQUFXNHdELEVBQVM3MkUsRUFBTWliLEVBQUk0Z0UsR0FDdkMsR0FDU3haLEdBQ1J6dkUsRUFBR2k4RCxFQUFLcHpELEVBQUc4NEQsRUFFWGlTLEVBQU05bkIsRUFBT3J0QixFQUhiMytCLEtBRUE2cEIsRUFBVWhmLEtBQUtnZixRQUVmbWhCLEVBQVduZ0MsS0FBS21nQyxRQVVqQixLQVB3QixnQkFBWm01QyxLQUNYZ0YsRUFBWTVnRSxFQUNaQSxFQUFLamIsRUFDTEEsRUFBTzYyRSxFQUNQQSxHQUFVLEdBR0xqa0YsRUFBRSxFQUFHaThELEVBQUl0eUMsRUFBUTFuQixPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFBTSxDQUM3QyxHQUFJa3BGLEdBQVUsR0FBSTlHLElBQU16NEQsRUFBUTNwQixHQUVoQyxJQUFjLFVBQVRvTixFQUNKcWlFLEVBQU1wbkQsRUFBR3pvQixLQUFNc3BGLEVBQVN2L0QsRUFBUTNwQixHQUFJQSxHQUUvQnl2RSxJQUFRL3RFLEdBQ1o1QixFQUFFMEwsS0FBTWlrRSxPQUdMLElBQWMsWUFBVHJpRSxHQUErQixTQUFUQSxFQUUvQnFpRSxFQUFNcG5ELEVBQUd6b0IsS0FBTXNwRixFQUFTdi9ELEVBQVEzcEIsR0FBSTJLLEtBQUszSyxHQUFJQSxHQUV4Q3l2RSxJQUFRL3RFLEdBQ1o1QixFQUFFMEwsS0FBTWlrRSxPQUdMLElBQWMsV0FBVHJpRSxHQUE4QixnQkFBVEEsR0FBbUMsUUFBVEEsR0FBMkIsU0FBVEEsRUFTMUUsSUFOQTArQyxFQUFRbmhELEtBQUszSyxHQUVDLGdCQUFUb04sSUFDSndtRSxFQUFPdVYsR0FBdUJ4L0QsRUFBUTNwQixHQUFJOHFDLEVBQVNyRixPQUc5QzU4QixFQUFFLEVBQUc4NEQsRUFBSTdWLEVBQU03cEQsT0FBVzAvRCxFQUFGOTRELEVBQVFBLElBQ3JDNDFCLEVBQU9xdEIsRUFBTWpqRCxHQUdaNG1FLEVBRGEsU0FBVHJpRSxFQUNFaWIsRUFBR3pvQixLQUFNc3BGLEVBQVN2L0QsRUFBUTNwQixHQUFJeStCLEVBQUtsYixJQUFLa2IsRUFBS2svQixPQUFRMzlELEVBQUc2SSxHQUd4RHdmLEVBQUd6b0IsS0FBTXNwRixFQUFTdi9ELEVBQVEzcEIsR0FBSXkrQixFQUFNeitCLEVBQUc2SSxFQUFHK3FFLEdBRzVDbkUsSUFBUS90RSxHQUNaNUIsRUFBRTBMLEtBQU1pa0UsR0FNWixHQUFLM3ZFLEVBQUVtQyxRQUFVZ25GLEVBQVksQ0FDNUIsR0FBSW5GLEdBQU0sR0FBSTFCLElBQU16NEQsRUFBU3M2RCxFQUFVbmtGLEVBQUVpTCxPQUFPRCxTQUFXaEwsR0FBTUEsR0FDN0RzcEYsRUFBY3RGLEVBQUloNUMsUUFJdEIsT0FIQXMrQyxHQUFZeFYsS0FBTzlvQyxFQUFTOG9DLEtBQzVCd1YsRUFBWXA0QixLQUFPbG1CLEVBQVNrbUIsS0FDNUJvNEIsRUFBWTNqRCxLQUFPcUYsRUFBU3JGLEtBQ3JCcStDLEVBRVIsTUFBT241RSxPQUlSMCtFLFlBQWFiLEdBQWFhLGFBQWUsU0FBVW5rRSxFQUFLdlcsR0FHdkQsTUFBT2hFLE1BQUt0SixRQUFReUosTUFBT0gsS0FBS2dxQixRQUFROWUsVUFBV2hMLFlBSXBENUksT0FBUyxFQUdUdzRELElBQUssU0FBV3B5QyxHQUVmLEdBQUl2b0IsS0FFSixJQUFLMG9GLEdBQWEvdEIsSUFDakIzNkQsRUFBSTBvRixHQUFhL3RCLElBQUk3NkQsS0FBTStLLEtBQU0wZCxFQUFJMWQsVUFJckMsS0FBTSxHQUFJM0ssR0FBRSxFQUFHaThELEVBQUl0eEQsS0FBSzFJLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUN4Q0YsRUFBRTBMLEtBQU02YyxFQUFHem9CLEtBQU0rSyxLQUFNQSxLQUFLM0ssR0FBSUEsR0FJbEMsT0FBTyxJQUFJb2lGLElBQU16M0UsS0FBS2dmLFFBQVM3cEIsSUFJaEN3cEYsTUFBTyxTQUFXeG1FLEdBRWpCLE1BQU9uWSxNQUFLOHZELElBQUssU0FBV3JwRCxHQUMzQixNQUFPQSxHQUFJMFIsTUFJYnltRSxJQUFTZixHQUFhZSxJQUd0Qi85RSxLQUFTZzlFLEdBQWFoOUUsS0FJdEJnK0UsT0FBUWhCLEdBQWFnQixRQUFVLFNBQVduaEUsRUFBSWhhLEdBRTdDLE1BQU84dUQsR0FBV3h5RCxLQUFNMGQsRUFBSWhhLEVBQU0sRUFBRzFELEtBQUsxSSxPQUFRLElBSW5Ed25GLFlBQWFqQixHQUFhaUIsYUFBZSxTQUFXcGhFLEVBQUloYSxHQUV2RCxNQUFPOHVELEdBQVd4eUQsS0FBTTBkLEVBQUloYSxFQUFNMUQsS0FBSzFJLE9BQU8sRUFBRyxHQUFJLEtBSXRENFQsUUFBUzJ5RSxHQUFhM3lFLFFBSXRCaTFCLFNBQVUsS0FHVnBtQixNQUFTOGpFLEdBQWE5akUsTUFHdEIrSyxLQUFTKzRELEdBQWEvNEQsS0FHdEJ6VCxPQUFTd3NFLEdBQWF4c0UsT0FHdEIyWSxRQUFTLFdBRVIsTUFBTzZ6RCxJQUFhaGdGLE1BQU01SSxLQUFNK0ssT0FJakMrK0UsSUFBSyxXQUVKLE1BQU8vbUUsR0FBR2hZLE9BSVhnL0UsU0FBVSxXQUVULE1BQU9obkUsR0FBR2hZLE9BSVhxYSxPQUFRLFdBRVAsTUFBTyxJQUFJbzlELElBQU16M0UsS0FBS2dmLFFBQVN1OUMsR0FBUXY4RCxRQUl4Q3VyRCxRQUFTc3lCLEdBQWF0eUIsVUFJdkJrc0IsR0FBS3ZpRixPQUFTLFNBQVcrcEYsRUFBTzFrRSxFQUFLODhDLEdBR3BDLEdBQU9BLEVBQUkvL0QsUUFBWWlqQixJQUFZQSxZQUFlazlELEtBQVdsOUQsRUFBSTJrRSxjQUFqRSxDQUlBLEdBQ0M3cEYsR0FBR2k4RCxFQUVINnRCLEVBQ0FDLEVBQWdCLFNBQVdILEVBQU92aEUsRUFBSTJoRSxHQUNyQyxNQUFPLFlBQ04sR0FBSXZhLEdBQU1wbkQsRUFBR3ZkLE1BQU84K0UsRUFBTy8rRSxVQUkzQixPQURBdTNFLElBQUt2aUYsT0FBUTR2RSxFQUFLQSxFQUFLdWEsRUFBTUMsV0FDdEJ4YSxHQUlWLEtBQU16dkUsRUFBRSxFQUFHaThELEVBQUkrRixFQUFJLy9ELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNuQzhwRixFQUFTOW5CLEVBQUloaUUsR0FHYmtsQixFQUFLNGtFLEVBQU9yb0YsTUFBK0Isa0JBQWZxb0YsR0FBT3RsRSxJQUNsQ3VsRSxFQUFlSCxFQUFPRSxFQUFPdGxFLElBQUtzbEUsR0FDbENubkUsRUFBRStpQixjQUFlb2tELEVBQU90bEUsUUFFdkJzbEUsRUFBT3RsRSxJQUVUVSxFQUFLNGtFLEVBQU9yb0YsTUFBT29vRixjQUFlLEVBR2xDekgsR0FBS3ZpRixPQUFRK3BGLEVBQU8xa0UsRUFBSzRrRSxFQUFPcm9GLE1BQVFxb0YsRUFBT0ksV0FzQ2pEOUgsR0FBSytILFNBQVc5SCxHQUFnQixTQUFXNWdGLEVBQU0raUIsR0FFaEQsR0FBSzdCLEVBQUVwakIsUUFBU2tDLEdBQ2YsSUFBTSxHQUFJb0gsR0FBRSxFQUFHODRELEVBQUlsZ0UsRUFBS1EsT0FBVzAvRCxFQUFGOTRELEVBQVFBLElBQ3hDdTVFLEdBQUsrSCxTQUFVMW9GLEVBQUtvSCxHQUFJMmIsT0FGMUIsQ0FPQSxHQUNDeGtCLEdBQUdpOEQsRUFHSGp6QyxFQUFLd0IsRUFGTDQvRCxFQUFPM29GLEVBQUtrSCxNQUFNLEtBQ2xCbWhGLEVBQVN2QixHQUdOamtFLEVBQU8sU0FBVzVHLEVBQUtqYyxHQUMxQixJQUFNLEdBQUl6QixHQUFFLEVBQUdpOEQsRUFBSXYrQyxFQUFJemIsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3ZDLEdBQUswZCxFQUFJMWQsR0FBR3lCLE9BQVNBLEVBQ3BCLE1BQU9pYyxHQUFJMWQsRUFHYixPQUFPLE1BR1IsS0FBTUEsRUFBRSxFQUFHaThELEVBQUltdUIsRUFBS25vRixPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFBTSxDQUMxQ3dxQixFQUFtQyxLQUExQjQvRCxFQUFLcHFGLEdBQUdxQixRQUFRLE1BQ3pCMm5CLEVBQU13QixFQUNMNC9ELEVBQUtwcUYsR0FBR3VCLFFBQVEsS0FBTSxJQUN0QjZvRixFQUFLcHFGLEVBRU4sSUFBSTBkLEdBQU00RyxFQUFNd2xFLEVBQVE5Z0UsRUFDakJ0TCxLQUNOQSxHQUNDamMsS0FBV3VuQixFQUNYeEUsT0FDQXlsRSxhQUNBQyxZQUVESixFQUFPdCtFLEtBQU1rUyxJQUdUMWQsSUFBTWk4RCxFQUFJLEVBQ2R2K0MsRUFBSThHLElBQU1BLEVBR1ZzbEUsRUFBU3QvRCxFQUNSOU0sRUFBSXVzRSxVQUNKdnNFLEVBQUl3c0UsV0FNUjlILEdBQUtpSSxlQUFpQi9ILEdBQXNCLFNBQVdnSSxFQUFZQyxFQUFjL2xFLEdBQ2hGNDlELEdBQUsrSCxTQUFVRyxFQUFZOWxFLEdBRTNCNDlELEdBQUsrSCxTQUFVSSxFQUFjLFdBQzVCLEdBQUk5YSxHQUFNanJELEVBQUkxWixNQUFPSCxLQUFNRSxVQUUzQixPQUFLNGtFLEtBQVE5a0UsS0FFTEEsS0FFRThrRSxZQUFlMlMsSUFHakIzUyxFQUFJeHRFLE9BQ1YwZ0IsRUFBRXBqQixRQUFTa3dFLEVBQUksSUFDZCxHQUFJMlMsSUFBTTNTLEVBQUk5bEQsUUFBUzhsRCxFQUFJLElBQzNCQSxFQUFJLEdBQ0wvdEUsRUFJSyt0RSxJQWNULElBQUkrYSxJQUFtQixTQUFXMS9DLEVBQVVockMsR0FHM0MsR0FBeUIsZ0JBQWJnckMsR0FDWCxPQUFTaHJDLEVBQUdnckMsR0FJYixJQUFJOHRCLEdBQVFqMkMsRUFBRTgzQyxJQUFLMzZELEVBQUcsU0FBVXNSLEVBQUlwUixHQUNuQyxNQUFPb1IsR0FBR3k2RCxRQUdYLE9BQU9scEQsR0FBRWkyQyxHQUNQaDlCLE9BQVFrUCxHQUNSMnZCLElBQUssU0FBVXo2RCxHQUVmLEdBQUlrK0QsR0FBTXY3QyxFQUFFZ04sUUFBU2hsQixLQUFNaXVELEVBQzNCLE9BQU85NEQsR0FBR28rRCxLQUVWdnBDLFVBZ0JIMHRELElBQWUsV0FBWSxTQUFXdjNDLEdBRXJDLE1BQU9BLEdBQ04sR0FBSXMzQyxJQUFNb0ksR0FBa0IxL0MsRUFBVW5nQyxLQUFLZ2YsVUFDM0NoZixPQUlGMDNFLEdBQWUsVUFBVyxTQUFXdjNDLEdBQ3BDLEdBQUk4OUMsR0FBU2orRSxLQUFLaStFLE9BQVE5OUMsR0FDdEJrK0MsRUFBTUosRUFBT2ovRCxPQUdqQixPQUFPcS9ELEdBQUkvbUYsT0FDVixHQUFJbWdGLElBQU00RyxFQUFJLElBQ2RKLElBSUZ0RyxHQUFxQixtQkFBb0IsaUJBQW1CLFdBQzNELE1BQU8zM0UsTUFBSzBvQixTQUFVLFFBQVMsU0FBVzIxRCxHQUN6QyxNQUFPQSxHQUFJbmQsUUFDVCxLQUlKeVcsR0FBcUIsa0JBQW1CLGlCQUFtQixXQUMxRCxNQUFPMzNFLE1BQUswb0IsU0FBVSxRQUFTLFNBQVcyMUQsR0FDekMsTUFBT0EsR0FBSWplLFFBQ1QsS0FJSnVYLEdBQXFCLG9CQUFxQixtQkFBcUIsV0FDOUQsTUFBTzMzRSxNQUFLMG9CLFNBQVUsUUFBUyxTQUFXMjFELEdBQ3pDLE1BQU9BLEdBQUl6aEIsUUFDVCxLQUlKK2EsR0FBcUIsb0JBQXFCLG1CQUFxQixXQUM5RCxNQUFPMzNFLE1BQUswb0IsU0FBVSxRQUFTLFNBQVcyMUQsR0FDekMsTUFBT0EsR0FBSXZoQixRQUNULEtBSUo2YSxHQUFxQix3QkFBeUIsc0JBQXdCLFdBQ3JFLE1BQU8zM0UsTUFBSzBvQixTQUFVLFFBQVMsU0FBVzIxRCxHQUN6QyxNQUFPQSxHQUFJOWMsZUFDVCxLQVFKbVcsR0FBZSxTQUFVLFNBQVdvSSxHQUNuQyxNQUFPOS9FLE1BQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDekIsU0FBWHU3QixFQUNKMWhCLEVBQVM3WixJQUdjLGdCQUFYdTdCLEtBQ1hBLEVBQW9CLGNBQVhBLEdBQ1IsR0FDQSxHQUdGdGYsRUFBV2pjLEVBQVV1N0IsS0FBUyxRQTBCakNwSSxHQUFlLFNBQVUsU0FBVzNLLEdBQ25DLE1BQUtBLEtBQVdoMkUsRUFDUmlKLEtBQUswc0UsS0FBS3FULE9BQU9yVCxLQUlsQjFzRSxLQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBQ3pDdW9CLEdBQWV2b0IsRUFBVXdvQixPQXVCM0IySyxHQUFlLGNBQWUsU0FBVzNLLEdBQ3hDLEdBQTZCLElBQXhCL3NFLEtBQUtnZixRQUFRMW5CLE9BQ2pCLE1BQU9QLEVBR1IsSUFDQ3d0RCxHQUFhdmtELEtBQUtnZixRQUFRLEdBQzFCaGIsRUFBYXVnRCxFQUFTMGEsZUFDdEJoa0MsRUFBYXNwQixFQUFTdVEsVUFBVXNOLFVBQVk3ZCxFQUFTdWhCLGdCQUFrQixHQUN2RTJHLEVBQWFsb0IsRUFBUzJhLG1CQUN0Qjd1QyxFQUFxQixLQUFSNEssQ0FFZCxRQUNDeXhDLEtBQWtCcjhDLEVBQU0sRUFBSXp1QixLQUFLeWtDLE1BQU9yaUMsRUFBUWkzQixHQUNoRDB4QyxNQUFrQnQ4QyxFQUFNLEVBQUl6dUIsS0FBS3VpQixLQUFNc29ELEVBQWF4eEMsR0FDcERqM0IsTUFBa0JBLEVBQ2xCZ2MsSUFBa0J1a0MsRUFBUzhhLGVBQzNCL25FLE9BQWtCMmpDLEVBQ2xCOHJDLGFBQWtCeGlCLEVBQVN5YixpQkFDM0JnZ0IsZUFBa0J2VCxFQUNsQndULFdBQWdELFFBQTlCbGhCLEdBQWV4YSxNQWdCbkNtekIsR0FBZSxhQUFjLFNBQVd6OEMsR0FJdkMsTUFBS0EsS0FBUWxrQyxFQUNtQixJQUF4QmlKLEtBQUtnZixRQUFRMW5CLE9BQ25CMEksS0FBS2dmLFFBQVEsR0FBRzhtRCxnQkFDaEIvdUUsRUFJS2lKLEtBQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDekNtbkIsR0FBaUJubkIsRUFBVXRwQixNQU03QixJQUFJaWxELElBQVcsU0FBVzM3QixFQUFVa2MsRUFBY2w5RCxHQUVqRCxHQUFLQSxFQUFXLENBQ2YsR0FBSTQxRSxHQUFNLEdBQUkxQixJQUFNbHpCLEVBRXBCNDBCLEdBQUlnSCxJQUFLLE9BQVEsV0FDaEI1OEUsRUFBVTQxRSxFQUFJL1UsS0FBS2g5QyxVQUlyQixHQUFrQyxPQUE3QjIzQyxHQUFleGEsR0FDbkJpYyxFQUFXamMsRUFBVWtjLE9BRWpCLENBQ0puQyxHQUFzQi9aLEdBQVUsRUFHaEMsSUFBSXFnQixHQUFNcmdCLEVBQVM4ZixLQUNkTyxJQUEwQixJQUFuQkEsRUFBSTdrQyxZQUNmNmtDLEVBQUl3YixRQUlMcGMsRUFBY3pmLEtBQWMsU0FBVW45QixHQUNyQ3V6QyxFQUFlcFcsRUFHZixLQUFNLEdBREZwd0IsR0FBTzJ5QyxFQUFnQnZpQixFQUFVbjlCLEdBQzNCL3hCLEVBQUUsRUFBR2k4RCxFQUFJbjlCLEVBQUs3OEIsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3hDMGlFLEVBQVl4VCxFQUFVcHdCLEVBQUs5K0IsR0FHNUJtckUsR0FBV2pjLEVBQVVrYyxHQUNyQm5DLEdBQXNCL1osR0FBVSxNQWFuQ216QixJQUFlLGNBQWUsV0FDN0IsR0FBSTJHLEdBQU1yK0UsS0FBS2dmLE9BRWYsT0FBS3EvRCxHQUFJL21GLE9BQVMsRUFDVittRixFQUFJLEdBQUdqM0QsS0FEZixTQVdEc3dELEdBQWUsZ0JBQWlCLFdBQy9CLEdBQUkyRyxHQUFNcitFLEtBQUtnZixPQUVmLE9BQUtxL0QsR0FBSS9tRixPQUFTLEVBQ1YrbUYsRUFBSSxHQUFHdFosVUFEZixTQWlCRDJTLEdBQWUsZ0JBQWlCLFNBQVduMEUsRUFBVTg4RSxHQUNwRCxNQUFPcmdGLE1BQUswb0IsU0FBVSxRQUFTLFNBQVU2N0IsR0FDeEMyN0IsR0FBVTM3QixFQUFVODdCLEtBQWMsRUFBTzk4RSxPQWlCM0NtMEUsR0FBZSxhQUFjLFNBQVd4UyxHQUN2QyxHQUFJbVosR0FBTXIrRSxLQUFLZ2YsT0FFZixPQUFLa21ELEtBQVFudUUsRUFFUSxJQUFmc25GLEVBQUkvbUYsT0FDRFAsR0FFUnNuRixFQUFNQSxFQUFJLEdBRUhBLEVBQUlqYSxLQUNWcHNELEVBQUUraUIsY0FBZXNqRCxFQUFJamEsTUFDcEJpYSxFQUFJamEsS0FBS2MsSUFDVG1aLEVBQUlqYSxLQUNMaWEsRUFBSXBaLGFBSUNqbEUsS0FBSzBvQixTQUFVLFFBQVMsU0FBVzY3QixHQUNwQ3ZzQyxFQUFFK2lCLGNBQWV3cEIsRUFBUzZmLE1BQzlCN2YsRUFBUzZmLEtBQUtjLElBQU1BLEVBR3BCM2dCLEVBQVM2ZixLQUFPYyxNQWtCbkJ3UyxHQUFlLG9CQUFxQixTQUFXbjBFLEVBQVU4OEUsR0FHeEQsTUFBT3JnRixNQUFLMG9CLFNBQVUsUUFBUyxTQUFXMjFELEdBQ3pDNkIsR0FBVTdCLEVBQUtnQyxLQUFjLEVBQU85OEUsTUFPdEMsSUFBSSs4RSxJQUFnQixTQUFXNzlFLEVBQU0wOUIsRUFBVW9nRCxFQUFVaDhCLEVBQVV6cEIsR0FFbEUsR0FDVzBsRCxHQUNWcnJGLEVBQUdFLEVBQUdpOEQsRUFBS3B6RCxFQUFHODRELEVBRGRrRCxLQUVBdW1CLFFBQXNCdGdELEVBUXZCLEtBSk9BLEdBQTZCLFdBQWpCc2dELEdBQThDLGFBQWpCQSxHQUErQnRnRCxFQUFTN29DLFNBQVdQLElBQ2xHb3BDLEdBQWFBLElBR1I5cUMsRUFBRSxFQUFHaThELEVBQUlueEIsRUFBUzdvQyxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFLeEMsSUFKQUYsRUFBSWdyQyxFQUFTOXFDLElBQU04cUMsRUFBUzlxQyxHQUFHMkksTUFDOUJtaUMsRUFBUzlxQyxHQUFHMkksTUFBTSxNQUNoQm1pQyxFQUFTOXFDLElBRU42SSxFQUFFLEVBQUc4NEQsRUFBSTdoRSxFQUFFbUMsT0FBVzAvRCxFQUFGOTRELEVBQVFBLElBQ2pDc2lGLEVBQU1ELEVBQTBCLGdCQUFUcHJGLEdBQUUrSSxHQUFrQjhaLEVBQUU4UixLQUFLMzBCLEVBQUUrSSxJQUFNL0ksRUFBRStJLElBRXZEc2lGLEdBQU9BLEVBQUlscEYsU0FDZjRpRSxFQUFNQSxFQUFJOTVELE9BQVFvZ0YsR0FNckIsSUFBSW5wQixHQUFNZ2dCLEdBQUtsM0MsU0FBVTE5QixFQUN6QixJQUFLNDBELEVBQUkvL0QsT0FDUixJQUFNakMsRUFBRSxFQUFHaThELEVBQUkrRixFQUFJLy9ELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUNuQzZrRSxFQUFNN0MsRUFBSWhpRSxHQUFJa3ZELEVBQVV6cEIsRUFBTW8vQixFQUloQyxPQUFPcUMsSUFBU3JDLElBSWJ3bUIsR0FBaUIsU0FBVzVsRCxHQVkvQixNQVZPQSxLQUNOQSxNQUtJQSxFQUFLN0osUUFBVTZKLEVBQUttckMsU0FBV2x2RSxJQUNuQytqQyxFQUFLbXJDLE9BQVNuckMsRUFBSzdKLFFBR2JqWixFQUFFOWlCLFFBQ1Ird0UsT0FBUSxPQUNSRCxNQUFPLFVBQ1AwRyxLQUFNLE9BQ0o1eEMsSUFJQTZsRCxHQUFrQixTQUFXQyxHQUdoQyxJQUFNLEdBQUl2ckYsR0FBRSxFQUFHaThELEVBQUlzdkIsRUFBS3RwRixPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFDeEMsR0FBS3VyRixFQUFLdnJGLEdBQUdpQyxPQUFTLEVBUXJCLE1BTEFzcEYsR0FBSyxHQUFLQSxFQUFLdnJGLEdBQ2Z1ckYsRUFBSyxHQUFHdHBGLE9BQVMsRUFDakJzcEYsRUFBS3RwRixPQUFTLEVBQ2RzcEYsRUFBSzVoRSxTQUFZNGhFLEVBQUs1aEUsUUFBUTNwQixJQUV2QnVyRixDQU1ULE9BREFBLEdBQUt0cEYsT0FBUyxFQUNQc3BGLEdBSUpwQyxHQUF3QixTQUFXajZCLEVBQVV6cEIsR0FFaEQsR0FDQ3psQyxHQUFHaThELEVBQUsyUyxFQUFLOXVFLEtBQ2IwckYsRUFBa0J0OEIsRUFBU3FXLFVBQzNCNk8sRUFBZ0JsbEIsRUFBU2dVLGdCQUd6QjBOLEVBQVNuckMsRUFBS21yQyxPQUNkRCxFQUFTbHJDLEVBQUtrckMsTUFDZDBHLEVBQVM1eEMsRUFBSzR4QyxJQUVmLElBQWtDLE9BQTdCM04sR0FBZXhhLEdBS25CLE1BQWtCLFlBQVgwaEIsS0FFTjJRLEdBQVEsRUFBR25OLEVBQWNueUUsT0FFdEIsSUFBYSxXQUFSbzFFLEVBSVQsSUFBTXIzRSxFQUFFa3ZELEVBQVMwYSxlQUFnQjNOLEVBQUkvTSxFQUFTOGEsZUFBbUIvTixFQUFGajhELEVBQVFBLElBQ3RFRixFQUFFMEwsS0FBTWdnRixFQUFnQnhyRixRQUdyQixJQUFjLFdBQVQyd0UsR0FBK0IsV0FBVEEsRUFDL0I3d0UsRUFBYyxRQUFWOHdFLEVBQ0h3RCxFQUFjNXJFLFFBQ0osV0FBVm9vRSxFQUNDNGEsRUFBZ0JoakYsUUFDaEJtYSxFQUFFODNDLElBQUsyWixFQUFlLFNBQVVoakUsRUFBSXBSLEdBQ25DLE1BQTRDLEtBQXJDMmlCLEVBQUVnTixRQUFTdmUsRUFBSW82RSxHQUEyQnA2RSxFQUFLLFdBR3JELElBQWMsU0FBVHUvRCxHQUE2QixZQUFUQSxFQUM3QixJQUFNM3dFLEVBQUUsRUFBR2k4RCxFQUFJL00sRUFBUzZTLE9BQU85L0QsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ2hDLFFBQVY0d0UsRUFDSjl3RSxFQUFFMEwsS0FBTXhMLElBR1I0dUUsRUFBTWpzRCxFQUFFZ04sUUFBUzN2QixFQUFHd3JGLElBRVAsS0FBUjVjLEdBQXdCLFdBQVZnQyxHQUNqQmhDLEdBQU8sR0FBaUIsV0FBVmdDLElBRWY5d0UsRUFBRTBMLEtBQU14TCxHQU1aLE9BQU9GLElBZ0JKMnJGLEdBQWlCLFNBQVd2OEIsRUFBVXBrQixFQUFVckYsR0FFbkQsR0FBSWltRCxHQUFNLFNBQVdDLEdBQ3BCLEdBQUlDLEdBQVNoSixHQUFTK0ksRUFNdEIsSUFBZ0IsT0FBWEMsSUFBcUJubUQsRUFDekIsT0FBU21tRCxFQUdWLElBQUloWSxHQUFPdVYsR0FBdUJqNkIsRUFBVXpwQixFQUU1QyxJQUFnQixPQUFYbW1ELEdBQWlELEtBQTlCanBFLEVBQUVnTixRQUFTaThELEVBQVFoWSxHQUUxQyxPQUFTZ1ksRUFFTCxLQUFPRCxFQUVYLE1BQU8vWCxFQUlSLElBQW9CLGtCQUFSK1gsR0FDWCxNQUFPaHBFLEdBQUU4M0MsSUFBS21aLEVBQU0sU0FBVTFWLEdBQzdCLEdBQUkzNkMsR0FBTTJyQyxFQUFTNlMsT0FBUTdELEVBQzNCLE9BQU95dEIsR0FBS3p0QixFQUFLMzZDLEVBQUkwL0MsT0FBUTEvQyxFQUFJcS9DLEtBQVExRSxFQUFNLE1BS2pELElBQUl0RixHQUFRNnFCLEdBQ1hELEdBQWN0MEIsRUFBUzZTLE9BQVE2UixFQUFNLE9BSXRDLElBQUsrWCxFQUFJem9GLFVBQ3lCLEtBQTVCeWYsRUFBRWdOLFFBQVNnOEQsRUFBSy95QixHQUNwQixPQUFTK3lCLEVBQUlob0IsYUFjZixJQUFvQixnQkFBUmdvQixJQUFzQyxNQUFsQkEsRUFBSXJqRixPQUFPLEdBQWEsQ0FFdkQsR0FBSXVqRixHQUFTMzhCLEVBQVNrVSxLQUFNdW9CLEVBQUlwcUYsUUFBUyxLQUFNLElBQy9DLElBQUtzcUYsSUFBV25xRixFQUNmLE9BQVNtcUYsRUFBTzN0QixLQVVsQixNQUFPdjdDLEdBQUVpMkMsR0FDUGg5QixPQUFRK3ZELEdBQ1JseEIsSUFBSyxXQUNMLE1BQU85dkQsTUFBS2c1RCxlQUVaaHZDLFVBR0gsT0FBT3MyRCxJQUFlLE1BQU9uZ0QsRUFBVTRnRCxFQUFLeDhCLEVBQVV6cEIsR0FJdkQ0OEMsSUFBZSxTQUFVLFNBQVd2M0MsRUFBVXJGLEdBRXhDcUYsSUFBYXBwQyxFQUNqQm9wQyxFQUFXLEdBRUZub0IsRUFBRStpQixjQUFlb0YsS0FDMUJyRixFQUFPcUYsRUFDUEEsRUFBVyxJQUdackYsRUFBTzRsRCxHQUFnQjVsRCxFQUV2QixJQUFJOGxELEdBQU81Z0YsS0FBSzBvQixTQUFVLFFBQVMsU0FBVzY3QixHQUM3QyxNQUFPdThCLElBQWdCdjhCLEVBQVVwa0IsRUFBVXJGLElBQ3pDLEVBTUgsT0FIQThsRCxHQUFLemdELFNBQVM4b0MsS0FBTzlvQyxFQUNyQnlnRCxFQUFLemdELFNBQVNyRixLQUFPQSxFQUVkOGxELElBR1JsSixHQUFlLGlCQUFrQixXQUNoQyxNQUFPMTNFLE1BQUswb0IsU0FBVSxNQUFPLFNBQVc2N0IsRUFBVTNyQyxHQUNqRCxNQUFPMnJDLEdBQVM2UyxPQUFReCtDLEdBQU1xL0MsS0FBT2xoRSxHQUNuQyxLQUdKMmdGLEdBQWUsZ0JBQWlCLFdBQy9CLE1BQU8xM0UsTUFBSzBvQixVQUFVLEVBQU0sT0FBUSxTQUFXNjdCLEVBQVUwa0IsR0FDeEQsTUFBTzRQLElBQWN0MEIsRUFBUzZTLE9BQVE2UixFQUFNLFdBQzFDLEtBR0owTyxHQUFxQixpQkFBa0IsZ0JBQWlCLFNBQVdsMUUsR0FDbEUsTUFBT3pDLE1BQUswb0IsU0FBVSxNQUFPLFNBQVc2N0IsRUFBVTNyQyxHQUNqRCxHQUFJbUMsR0FBSXdwQyxFQUFTNlMsT0FBUXgrQyxFQUN6QixPQUFnQixXQUFUblcsRUFBb0JzWSxFQUFFb2dELGFBQWVwZ0QsRUFBRW1nRCxZQUM1QyxLQUdKeWMsR0FBcUIsc0JBQXVCLHFCQUFzQixTQUFXNWtFLEdBQzVFLE1BQU8vUyxNQUFLMG9CLFNBQVUsTUFBTyxTQUFXNjdCLEVBQVUzckMsR0FDakRvaUQsRUFBZXpXLEVBQVUzckMsRUFBSzdGLE9BSWhDNGtFLEdBQXFCLG1CQUFvQixnQkFBaUIsV0FDekQsTUFBTzMzRSxNQUFLMG9CLFNBQVUsTUFBTyxTQUFXNjdCLEVBQVUzckMsR0FDakQsTUFBT0EsSUFDTCxLQUdKKytELEdBQXFCLGVBQWdCLGFBQWMsU0FBV3huRSxHQUs3RCxJQUFNLEdBSkZoYixNQUNBNnBCLEVBQVVoZixLQUFLZ2YsUUFHVDNwQixFQUFFLEVBQUdpOEQsRUFBSXR5QyxFQUFRMW5CLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUMzQyxJQUFNLEdBQUk2SSxHQUFFLEVBQUc4NEQsRUFBSWgzRCxLQUFLM0ssR0FBR2lDLE9BQVcwL0QsRUFBRjk0RCxFQUFRQSxJQUFNLENBQ2pELEdBQUlvQixHQUFLMGYsRUFBUTNwQixHQUFHbWpFLFFBQVN4NUMsRUFBUTNwQixHQUFHK2hFLE9BQVFwM0QsS0FBSzNLLEdBQUc2SSxJQUFLbzZELE9BQzdEbmpFLEdBQUUwTCxNQUFPc1AsS0FBUyxFQUFPLElBQU0sSUFBTTdRLEdBSXZDLE1BQU8sSUFBSW00RSxJQUFNejRELEVBQVM3cEIsS0FHM0J3aUYsR0FBcUIsa0JBQW1CLGlCQUFrQixXQUN6RCxHQUFJbGxCLEdBQU96eUQsSUFpRFgsT0EvQ0FBLE1BQUswb0IsU0FBVSxNQUFPLFNBQVc2N0IsRUFBVTNyQyxFQUFLdW9FLEdBQy9DLEdBRUk5ckYsR0FBR2k4RCxFQUFLcHpELEVBQUc4NEQsRUFDWG9xQixFQUFTQyxFQUhUbHRELEVBQU9vd0IsRUFBUzZTLE9BQ2hCNUMsRUFBVXJnQyxFQUFNdmIsRUFPcEIsS0FIQXViLEVBQUs5aUIsT0FBUXVILEVBQUssR0FHWnZqQixFQUFFLEVBQUdpOEQsRUFBSW45QixFQUFLNzhCLE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQVVwQyxHQVRBK3JGLEVBQVVqdEQsRUFBSzkrQixHQUNmZ3NGLEVBQVlELEVBQVFsb0IsUUFHQyxPQUFoQmtvQixFQUFRbnBCLE1BQ1ptcEIsRUFBUW5wQixJQUFJZSxhQUFlM2pFLEdBSVQsT0FBZGdzRixFQUNKLElBQU1uakYsRUFBRSxFQUFHODRELEVBQUlxcUIsRUFBVS9wRixPQUFXMC9ELEVBQUY5NEQsRUFBUUEsSUFDekNtakYsRUFBVW5qRixHQUFHKzlELGNBQWNyakQsSUFBTXZqQixDQU1wQ3dsRSxHQUFnQnRXLEVBQVNnVSxnQkFBaUIzL0MsR0FDMUNpaUQsRUFBZ0J0VyxFQUFTcVcsVUFBV2hpRCxHQUNwQ2lpRCxFQUFnQnBJLEVBQU0wdUIsR0FBV3ZvRSxHQUFLLEdBR3RDK3lELEdBQW1CcG5CLEVBR25CLElBQUlqbEQsR0FBS2lsRCxFQUFTaVUsUUFBU2hFLEVBQVE4RCxPQUM5Qmg1RCxLQUFPdkksU0FDSnd0RCxHQUFTa1UsS0FBTW41RCxLQUl4QlUsS0FBSzBvQixTQUFVLFFBQVMsU0FBVzY3QixHQUNsQyxJQUFNLEdBQUlsdkQsR0FBRSxFQUFHaThELEVBQUkvTSxFQUFTNlMsT0FBTzkvRCxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFDbkRrdkQsRUFBUzZTLE9BQU8vaEUsR0FBR2srRCxJQUFNbCtELElBSXBCMkssT0FJUjAzRSxHQUFlLGFBQWMsU0FBV3pPLEdBQ3ZDLEdBQUlxWSxHQUFVdGhGLEtBQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDL0MsR0FBSTNyQyxHQUFLdmpCLEVBQUdpOEQsRUFDUjRJLElBRUosS0FBTTdrRSxFQUFFLEVBQUdpOEQsRUFBSTJYLEVBQUszeEUsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3BDdWpCLEVBQU1xd0QsRUFBSzV6RSxHQUVOdWpCLEVBQUlyZ0IsVUFBMkMsT0FBL0JxZ0IsRUFBSXJnQixTQUFTcUYsY0FDakNzOEQsRUFBSXI1RCxLQUFNKzNELEVBQVVyVSxFQUFVM3JDLEdBQU0sSUFHcENzaEQsRUFBSXI1RCxLQUFNazNELEVBQVl4VCxFQUFVM3JDLEdBSWxDLE9BQU9zaEQsSUFDTCxHQUdBcW5CLEVBQVV2aEYsS0FBS2lwRSxLQUFNLEdBSXpCLE9BSEFzWSxHQUFRM0MsTUFDUjVtRSxFQUFFME8sTUFBTzY2RCxFQUFTRCxHQUVYQyxJQVVSN0osR0FBZSxRQUFTLFNBQVd2M0MsRUFBVXJGLEdBQzVDLE1BQU82bEQsSUFBaUIzZ0YsS0FBS2lwRSxLQUFNOW9DLEVBQVVyRixNQUk5QzQ4QyxHQUFlLGVBQWdCLFNBQVd2akQsR0FDekMsR0FBSWtxRCxHQUFNcitFLEtBQUtnZixPQUVmLE9BQUttVixLQUFTcDlCLEVBRU5zbkYsRUFBSS9tRixRQUFVMEksS0FBSzFJLE9BQ3pCK21GLEVBQUksR0FBR2puQixPQUFRcDNELEtBQUssSUFBS3M0RCxPQUN6QnZoRSxHQUlGc25GLEVBQUksR0FBR2puQixPQUFRcDNELEtBQUssSUFBS3M0RCxPQUFTbmtDLEVBR2xDNm1DLEVBQWVxakIsRUFBSSxHQUFJcitFLEtBQUssR0FBSSxRQUV6QkEsUUFJUjAzRSxHQUFlLGVBQWdCLFdBQzlCLEdBQUkyRyxHQUFNcitFLEtBQUtnZixPQUVmLE9BQU9xL0QsR0FBSS9tRixRQUFVMEksS0FBSzFJLE9BQ3pCK21GLEVBQUksR0FBR2puQixPQUFRcDNELEtBQUssSUFBS2k0RCxLQUFPLEtBQ2hDLE9BSUZ5ZixHQUFlLFlBQWEsU0FBVzkrRCxHQUdqQ0EsWUFBZVosSUFBS1ksRUFBSXRoQixTQUM1QnNoQixFQUFNQSxFQUFJLEdBR1gsSUFBSXF3RCxHQUFPanBFLEtBQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDN0MsTUFBSzNyQyxHQUFJcmdCLFVBQTJDLE9BQS9CcWdCLEVBQUlyZ0IsU0FBU3FGLGNBQzFCZzdELEVBQVVyVSxFQUFVM3JDLEdBQU0sR0FFM0JtL0MsRUFBWXhULEVBQVUzckMsSUFJOUIsT0FBTzVZLE1BQUs0WSxJQUFLcXdELEVBQUssS0FLdkIsSUFBSXVZLElBQWdCLFNBQVduRCxFQUFLemxFLEVBQUt1YixFQUFNc3RELEdBRzlDLEdBQUl4WSxNQUNBeVksRUFBUyxTQUFXM21FLEVBQUc1YixHQUUxQixHQUFLNlksRUFBRXBqQixRQUFTbW1CLElBQU9BLFlBQWEvQyxHQUNuQyxJQUFNLEdBQUkzaUIsR0FBRSxFQUFHaThELEVBQUl2MkMsRUFBRXpqQixPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFDckNxc0YsRUFBUTNtRSxFQUFFMWxCLEdBQUk4SixPQU9oQixJQUFLNGIsRUFBRXhpQixVQUF5QyxPQUE3QndpQixFQUFFeGlCLFNBQVNxRyxjQUM3QnFxRSxFQUFLcG9FLEtBQU1rYSxPQUVQLENBRUosR0FBSTRtRSxHQUFVM3BFLEVBQUUsa0JBQWtCN2dCLFNBQVVnSSxFQUM1QzZZLEdBQUUsS0FBTTJwRSxHQUNOeHFGLFNBQVVnSSxHQUNWeWEsS0FBTW1CLEdBQ04sR0FBR21zQyxRQUFVMlAsRUFBa0J3bkIsR0FFakNwVixFQUFLcG9FLEtBQU04Z0YsRUFBUSxLQUlyQkQsR0FBUXZ0RCxFQUFNc3RELEdBRVQ3b0UsRUFBSWdwRSxVQUNSaHBFLEVBQUlncEUsU0FBUy9yRSxTQUdkK0MsRUFBSWdwRSxTQUFXNXBFLEVBQUVpeEQsR0FHWnJ3RCxFQUFJaXBFLGNBQ1JqcEUsRUFBSWdwRSxTQUFTRSxZQUFhbHBFLEVBQUlxL0MsTUFLNUI4cEIsR0FBbUIsU0FBVzVJLEVBQUs1bEIsR0FFdEMsR0FBSThxQixHQUFNbEYsRUFBSW42RCxPQUVkLElBQUtxL0QsRUFBSS9tRixPQUFTLENBQ2pCLEdBQUlzaEIsR0FBTXlsRSxFQUFJLEdBQUdqbkIsT0FBUTdELElBQVF4OEQsRUFBWXc4RCxFQUFNNGxCLEVBQUksR0FFbER2Z0UsSUFBT0EsRUFBSWdwRSxXQUNmaHBFLEVBQUlncEUsU0FBUy9yRSxTQUViK0MsRUFBSWlwRSxhQUFlOXFGLEVBQ25CNmhCLEVBQUlncEUsU0FBVzdxRixLQU1kaXJGLEdBQW9CLFNBQVc3SSxFQUFLcDJFLEdBQ3ZDLEdBQUlzN0UsR0FBTWxGLEVBQUluNkQsT0FFZCxJQUFLcS9ELEVBQUkvbUYsUUFBVTZoRixFQUFJN2hGLE9BQVMsQ0FDL0IsR0FBSXNoQixHQUFNeWxFLEVBQUksR0FBR2puQixPQUFRK2hCLEVBQUksR0FFeEJ2Z0UsR0FBSWdwRSxXQUNSaHBFLEVBQUlpcEUsYUFBZTkrRSxFQUVkQSxFQUNKNlYsRUFBSWdwRSxTQUFTRSxZQUFhbHBFLEVBQUlxL0MsS0FHOUJyL0MsRUFBSWdwRSxTQUFTdmhCLFNBR2Q0aEIsR0FBa0I1RCxFQUFJLE9BTXJCNEQsR0FBbUIsU0FBVzE5QixHQUVqQyxHQUFJNDBCLEdBQU0sR0FBSTFCLElBQU1sekIsR0FDaEI3K0IsRUFBWSxpQkFDWnc4RCxFQUFZLE9BQU94OEQsRUFDbkJ5OEQsRUFBYyxvQkFBb0J6OEQsRUFDbEMwOEQsRUFBZSxVQUFVMThELEVBQ3pCeU8sRUFBT293QixFQUFTNlMsTUFFcEIraEIsR0FBSW5qRSxJQUFLa3NFLEVBQVcsSUFBS0MsRUFBYSxJQUFLQyxHQUV0QzFuQixHQUFRdm1DLEVBQU0sWUFBYTc4QixPQUFTLElBRXhDNmhGLEVBQUkxbUUsR0FBSXl2RSxFQUFXLFNBQVc1a0YsRUFBRytnRixHQUMzQjk1QixJQUFhODVCLEdBSWxCbEYsRUFBSWxRLE1BQU95RCxLQUFLLFlBQWErRSxHQUFHLEdBQUdoNEQsS0FBTSxTQUFVODVDLEdBRWxELEdBQUkzNkMsR0FBTXViLEVBQU1vL0IsRUFFWDM2QyxHQUFJaXBFLGNBQ1JqcEUsRUFBSWdwRSxTQUFTRSxZQUFhbHBFLEVBQUlxL0MsU0FNakNraEIsRUFBSTFtRSxHQUFJMHZFLEVBQWEsU0FBVzdrRixFQUFHK2dGLEVBQUs5cUIsRUFBSzJYLEdBQzVDLEdBQUszbUIsSUFBYTg1QixFQVFsQixJQUFNLEdBRkZ6bEUsR0FBS204RCxFQUFVbGUsRUFBa0J3bkIsR0FFM0JocEYsRUFBRSxFQUFHaThELEVBQUluOUIsRUFBSzc4QixPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFDeEN1akIsRUFBTXViLEVBQUs5K0IsR0FFTnVqQixFQUFJZ3BFLFVBQ1JocEUsRUFBSWdwRSxTQUFTdDhFLFNBQVMsZUFBZXdVLEtBQUssVUFBV2k3RCxLQU14RG9FLEVBQUkxbUUsR0FBSTJ2RSxFQUFjLFNBQVc5a0YsRUFBRytnRixHQUNuQyxHQUFLOTVCLElBQWE4NUIsRUFJbEIsSUFBTSxHQUFJaHBGLEdBQUUsRUFBR2k4RCxFQUFJbjlCLEVBQUs3OEIsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ25DOCtCLEVBQUs5K0IsR0FBR3VzRixVQUNaRyxHQUFrQjVJLEVBQUs5akYsT0FReEJndEYsR0FBTyxHQUNQQyxHQUFhRCxHQUFLLGNBQ2xCRSxHQUFhRCxHQUFXLElBTTVCNUssSUFBZTZLLEdBQVksU0FBV3B1RCxFQUFNc3RELEdBQzNDLEdBQUlwRCxHQUFNcitFLEtBQUtnZixPQUVmLE9BQUttVixLQUFTcDlCLEVBRU5zbkYsRUFBSS9tRixRQUFVMEksS0FBSzFJLE9BQ3pCK21GLEVBQUksR0FBR2puQixPQUFRcDNELEtBQUssSUFBSzRoRixTQUN6QjdxRixHQUVRbzlCLEtBQVMsRUFFbEJuMEIsS0FBSzZvQixNQUFNOWxCLE9BRUZveEIsS0FBUyxFQUVsQjR0RCxHQUFrQi9oRixNQUVUcStFLEVBQUkvbUYsUUFBVTBJLEtBQUsxSSxRQUU1QmtxRixHQUFlbkQsRUFBSSxHQUFJQSxFQUFJLEdBQUdqbkIsT0FBUXAzRCxLQUFLLElBQU1tMEIsRUFBTXN0RCxHQUdqRHpoRixRQUlSMDNFLElBQ0M0SyxHQUFXLFVBQ1hDLEdBQVcsV0FDVCxTQUFXeC9FLEdBRWIsTUFEQWkvRSxJQUFtQmhpRixNQUFNLEdBQ2xCQSxPQUlSMDNFLElBQ0M0SyxHQUFXLFVBQ1hDLEdBQVcsV0FDVCxXQUVGLE1BREFQLElBQW1CaGlGLE1BQU0sR0FDbEJBLE9BSVIwM0UsSUFDQzRLLEdBQVcsWUFDWEMsR0FBVyxhQUNULFdBRUYsTUFEQVIsSUFBa0IvaEYsTUFDWEEsT0FJUjAzRSxHQUFlNEssR0FBVyxhQUFjLFdBQ3ZDLEdBQUlqRSxHQUFNcitFLEtBQUtnZixPQUVmLE9BQUtxL0QsR0FBSS9tRixRQUFVMEksS0FBSzFJLE9BRWhCK21GLEVBQUksR0FBR2puQixPQUFRcDNELEtBQUssSUFBSzZoRixlQUFnQixHQUUxQyxHQW1CUixJQUFJVyxJQUF1QiwrQkFLdkJDLEdBQWUsU0FBV2wrQixFQUFVeU8sRUFBUTB2QixFQUFJQyxFQUFJMVosR0FFdkQsSUFBTSxHQURGOXpFLE1BQ015akIsRUFBSSxFQUFHMDRDLEVBQUkyWCxFQUFLM3hFLE9BQWFnNkQsRUFBSjE0QyxFQUFVQSxJQUM1Q3pqQixFQUFFMEwsS0FBTTAyRCxFQUFnQmhULEVBQVUwa0IsRUFBS3J3RCxHQUFNbzZDLEdBRTlDLE9BQU83OUQsSUFJSnl0RixHQUFvQixTQUFXcitCLEVBQVVwa0IsRUFBVXJGLEdBRXRELEdBQ0NpN0IsR0FBVXhSLEVBQVMyTyxVQUNuQjJ2QixFQUFRbm9CLEdBQVEzRSxFQUFTLFNBQ3pCOUgsRUFBUXlNLEdBQVEzRSxFQUFTLE9BRXRCZ3JCLEVBQU0sU0FBV2psRSxHQUNwQixHQUFJbWxFLEdBQVNoSixHQUFTbjhELEVBR3RCLElBQVcsS0FBTkEsRUFDSixNQUFPODZELElBQVE3Z0IsRUFBUXorRCxPQUl4QixJQUFnQixPQUFYMnBGLEVBQ0osT0FBU0EsR0FBVSxFQUNsQkEsRUFDQWxyQixFQUFReitELE9BQVMycEYsRUFLbkIsSUFBa0Isa0JBQU5ubEUsR0FBbUIsQ0FDOUIsR0FBSW10RCxHQUFPdVYsR0FBdUJqNkIsRUFBVXpwQixFQUU1QyxPQUFPOWlCLEdBQUU4M0MsSUFBS2lHLEVBQVMsU0FBVW1CLEVBQUszRCxHQUNyQyxNQUFPejNDLEdBQ0x5M0MsRUFDQWt2QixHQUFjbCtCLEVBQVVnUCxFQUFLLEVBQUcsRUFBRzBWLEdBQ25DaGIsRUFBT3NGLElBQ0pBLEVBQU0sT0FLYixHQUFJcnpCLEdBQXFCLGdCQUFOcGtCLEdBQ2xCQSxFQUFFb2tCLE1BQU9zaUQsSUFDVCxFQUVELEtBQUt0aUQsRUF5QkosTUFBT2xvQixHQUFHaTJDLEdBQ1JoOUIsT0FBUW5WLEdBQ1JnMEMsSUFBSyxXQUNMLE1BQU85M0MsR0FBRWdOLFFBQVNobEIsS0FBTWl1RCxLQUV4QmprQyxTQTdCRixRQUFRa1csRUFBTSxJQUNiLElBQUssU0FDTCxJQUFLLFVBQ0osR0FBSXF6QixHQUFNbDBELFNBQVU2Z0MsRUFBTSxHQUFJLEdBRTlCLElBQVcsRUFBTnF6QixFQUFVLENBRWQsR0FBSXV2QixHQUFhOXFFLEVBQUU4M0MsSUFBS2lHLEVBQVMsU0FBVW1CLEVBQUk3aEUsR0FDOUMsTUFBTzZoRSxHQUFJZ0YsU0FBVzdtRSxFQUFJLE1BRTNCLFFBQVN5dEYsRUFBWUEsRUFBV3hyRixPQUFTaThELElBRzFDLE9BQVNnRCxFQUF5QmhTLEVBQVVnUCxHQUU3QyxLQUFLLE9BRUosTUFBT3Y3QyxHQUFFODNDLElBQUsreUIsRUFBTyxTQUFVL3JGLEVBQU16QixHQUNwQyxNQUFPeUIsS0FBU29wQyxFQUFNLEdBQUs3cUMsRUFBSSxRQWVwQyxPQUFPaXJGLElBQWUsU0FBVW5nRCxFQUFVNGdELEVBQUt4OEIsRUFBVXpwQixJQUl0RGlvRCxHQUFpQixTQUFXeCtCLEVBQVV5TyxFQUFRa1ksRUFBSzhYLEdBQ3RELEdBSU12K0MsR0FBT3B2QyxFQUFHaThELEVBQUs1M0MsRUFIcEIyc0MsRUFBTzlCLEVBQVMyTyxVQUNoQmdFLEVBQU83USxFQUFNMk0sR0FDYjcrQixFQUFPb3dCLEVBQVM2UyxNQUlqQixJQUFLOFQsSUFBUW4wRSxFQUNaLE1BQU9tZ0UsR0FBSWdGLFFBS1osSUFBS2hGLEVBQUlnRixXQUFhZ1AsRUFBdEIsQ0FJQSxHQUFLQSxFQUFNLENBR1YsR0FBSWgzRCxHQUFlOEQsRUFBRWdOLFNBQVMsRUFBTTAxQyxHQUFPclUsRUFBTSxZQUFhMk0sRUFBTyxFQUVyRSxLQUFNMzlELEVBQUUsRUFBR2k4RCxFQUFJbjlCLEVBQUs3OEIsT0FBV2c2RCxFQUFGajhELEVBQVFBLElBQ3BDcWtCLEVBQUt5YSxFQUFLOStCLEdBQUc0aUUsSUFDYnh6QixFQUFRdFEsRUFBSzkrQixHQUFHNmpFLFFBRVh4L0MsR0FFSkEsRUFBR3hGLGFBQWN1d0IsRUFBT3V1QixHQUFVdnVCLEVBQU92d0IsSUFBa0IsVUFNN0Q4RCxHQUFHMGlELEdBQVFuVyxFQUFTNlMsT0FBUSxVQUFXcEUsSUFBV3FOLFFBSW5EbkosR0FBSWdGLFNBQVdnUCxFQUNmdk4sRUFBYXBaLEVBQVVBLEVBQVMrWSxVQUNoQ0ssRUFBYXBaLEVBQVVBLEVBQVNrWixXQUUzQnVsQixJQUFXanNGLEdBQWFpc0YsS0FFNUJudEIsRUFBdUJ0UixJQUdsQkEsRUFBUytOLFFBQVE4RCxJQUFNN1IsRUFBUytOLFFBQVE2RCxLQUM1Q0UsR0FBZTlSLElBSWpCK1IsR0FBaUIvUixFQUFVLEtBQU0scUJBQXNCQSxFQUFVeU8sRUFBUWtZLEVBQUs4WCxJQUU5RW5PLEdBQWN0d0IsSUFJZm16QixJQUFlLFlBQWEsU0FBV3YzQyxFQUFVckYsR0FFM0NxRixJQUFhcHBDLEVBQ2pCb3BDLEVBQVcsR0FFRm5vQixFQUFFK2lCLGNBQWVvRixLQUMxQnJGLEVBQU9xRixFQUNQQSxFQUFXLElBR1pyRixFQUFPNGxELEdBQWdCNWxELEVBRXZCLElBQUk4bEQsR0FBTzVnRixLQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBQzdDLE1BQU9xK0IsSUFBbUJyK0IsRUFBVXBrQixFQUFVckYsSUFDNUMsRUFNSCxPQUhBOGxELEdBQUt6Z0QsU0FBU2ttQixLQUFPbG1CLEVBQ3JCeWdELEVBQUt6Z0QsU0FBU3JGLEtBQU9BLEVBRWQ4bEQsSUFHUmpKLEdBQXFCLHFCQUFzQixvQkFBcUIsU0FBV3gzQyxFQUFVckYsR0FDcEYsTUFBTzk2QixNQUFLMG9CLFNBQVUsU0FBVSxTQUFXNjdCLEVBQVV5TyxHQUNwRCxNQUFPek8sR0FBUzJPLFVBQVVGLEdBQVFGLEtBQ2hDLEtBR0o2a0IsR0FBcUIscUJBQXNCLG9CQUFxQixTQUFXeDNDLEVBQVVyRixHQUNwRixNQUFPOTZCLE1BQUswb0IsU0FBVSxTQUFVLFNBQVc2N0IsRUFBVXlPLEdBQ3BELE1BQU96TyxHQUFTMk8sVUFBVUYsR0FBUTBLLEtBQ2hDLEtBR0ppYSxHQUFxQixtQkFBb0Isa0JBQW1CLFdBQzNELE1BQU8zM0UsTUFBSzBvQixTQUFVLGNBQWUrNUQsR0FBYyxLQUdwRDlLLEdBQXFCLHNCQUF1QixxQkFBc0IsV0FDakUsTUFBTzMzRSxNQUFLMG9CLFNBQVUsU0FBVSxTQUFXNjdCLEVBQVV5TyxHQUNwRCxNQUFPek8sR0FBUzJPLFVBQVVGLEdBQVFNLE9BQ2hDLEtBR0pxa0IsR0FBcUIsb0JBQXFCLG1CQUFvQixTQUFXbDFFLEdBQ3hFLE1BQU96QyxNQUFLMG9CLFNBQVUsY0FBZSxTQUFXNjdCLEVBQVV5TyxFQUFRMzlELEVBQUc2SSxFQUFHK3FFLEdBQ3ZFLE1BQU80UCxJQUFjdDBCLEVBQVM2UyxPQUFRNlIsRUFDNUIsV0FBVHhtRSxFQUFvQixlQUFpQixhQUFjdXdELElBRWxELEtBR0oya0IsR0FBcUIsb0JBQXFCLG1CQUFvQixXQUM3RCxNQUFPMzNFLE1BQUswb0IsU0FBVSxjQUFlLFNBQVc2N0IsRUFBVXlPLEVBQVEzOUQsRUFBRzZJLEVBQUcrcUUsR0FDdkUsTUFBTzRQLElBQWN0MEIsRUFBUzZTLE9BQVE2UixFQUFNLFVBQVdqVyxJQUNyRCxLQUdKMmtCLEdBQXFCLHNCQUF1QixxQkFBc0IsU0FBV3pNLEVBQUsrWCxHQUNqRixNQUFPampGLE1BQUswb0IsU0FBVSxTQUFVLFNBQVc2N0IsRUFBVXlPLEdBQ3BELE1BQUtrWSxLQUFRbjBFLEVBQ0x3dEQsRUFBUzJPLFVBQVdGLEdBQVNrSixhQUVyQzZtQixJQUFnQngrQixFQUFVeU8sRUFBUWtZLEVBQUsrWCxPQUl6Q3RMLEdBQXFCLHNCQUF1QixtQkFBb0IsU0FBV2wxRSxHQUMxRSxNQUFPekMsTUFBSzBvQixTQUFVLFNBQVUsU0FBVzY3QixFQUFVeU8sR0FDcEQsTUFBZ0IsWUFBVHZ3RCxFQUNOazBELEVBQXlCcFMsRUFBVXlPLEdBQ25DQSxHQUNDLEtBR0owa0IsR0FBZSxtQkFBb0IsV0FDbEMsTUFBTzEzRSxNQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBQ3pDc1IsRUFBdUJ0UixJQUNyQixLQUdKbXpCLEdBQWUsaUJBQWtCLFNBQVdqMUUsRUFBTTh3RCxHQUNqRCxHQUE2QixJQUF4QnZ6RCxLQUFLZ2YsUUFBUTFuQixPQUFlLENBQ2hDLEdBQUkrbUYsR0FBTXIrRSxLQUFLZ2YsUUFBUSxFQUV2QixJQUFjLGdCQUFUdmMsR0FBbUMsV0FBVEEsRUFDOUIsTUFBTzh6RCxHQUF5QjhuQixFQUFLOXFCLEVBRWpDLElBQWMsYUFBVDl3RCxHQUFnQyxjQUFUQSxFQUNoQyxNQUFPazBELEdBQXlCMG5CLEVBQUs5cUIsTUFLeENta0IsR0FBZSxXQUFZLFNBQVd2M0MsRUFBVXJGLEdBQy9DLE1BQU82bEQsSUFBaUIzZ0YsS0FBSysxRCxRQUFTNTFCLEVBQVVyRixLQU1qRCxJQUFJb29ELElBQWtCLFNBQVczK0IsRUFBVXBrQixFQUFVckYsR0FFcEQsR0FJSWxpQixHQUVBempCLEVBQUdFLEVBQUdpOEQsRUFBS3B6RCxFQUFHRCxFQUFHcTRFLEVBTmpCbmlELEVBQU9vd0IsRUFBUzZTLE9BQ2hCNlIsRUFBT3VWLEdBQXVCajZCLEVBQVV6cEIsR0FDeEMySixFQUFRcTBDLEdBQWNELEdBQWMxa0QsRUFBTTgwQyxFQUFNLFlBQ2hEa2EsRUFBV25yRSxLQUFNNVgsT0FBT0QsU0FBVXNrQyxJQUVsQ3N4QixFQUFVeFIsRUFBUzJPLFVBQVU1N0QsT0FHN0J5cEYsRUFBTSxTQUFXamxFLEdBQ3BCLEdBQUlzbkUsR0FBMEIsa0JBQU50bkUsRUFFeEIsSUFBVyxPQUFOQSxHQUFjQSxJQUFNL2tCLEdBQWFxc0YsRUFBYSxDQUlsRCxJQUZBanVGLEtBRU1FLEVBQUUsRUFBR2k4RCxFQUFJMlgsRUFBSzN4RSxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFHcEMsSUFGQXVqQixFQUFNcXdELEVBQUs1ekUsR0FFTDZJLEVBQUUsRUFBTTYzRCxFQUFGNzNELEVBQVlBLElBQ3ZCRCxHQUNDMmEsSUFBS0EsRUFDTG82QyxPQUFROTBELEdBR0prbEYsR0FFSjlNLEVBQU9uaUQsRUFBTXZiLEdBRVJrRCxFQUFHN2QsRUFBR3M1RCxFQUFlaFQsRUFBVTNyQyxFQUFLMWEsR0FBSW80RSxFQUFLcGQsUUFBVW9kLEVBQUtwZCxRQUFRaDdELEdBQUssT0FDN0UvSSxFQUFFMEwsS0FBTTVDLElBS1Q5SSxFQUFFMEwsS0FBTTVDLEVBS1gsT0FBTzlJLEdBSVIsTUFBSzZpQixHQUFFK2lCLGNBQWVqZixJQUNiQSxHQUlGcW5FLEVBQ0xseUQsT0FBUW5WLEdBQ1JnMEMsSUFBSyxTQUFVejZELEVBQUdvUixHQUNsQixPQUNDbVMsSUFBUW5TLEVBQUd3MUQsY0FBY3JqRCxJQUN6Qm82QyxPQUFRdnNELEVBQUd3MUQsY0FBY2pKLFVBRzFCaHBDLFVBR0gsT0FBT3MyRCxJQUFlLE9BQVFuZ0QsRUFBVTRnRCxFQUFLeDhCLEVBQVV6cEIsR0FNeEQ0OEMsSUFBZSxVQUFXLFNBQVcyTCxFQUFhQyxFQUFnQnhvRCxHQXFCakUsR0FuQks5aUIsRUFBRStpQixjQUFlc29ELEtBRWhCQSxFQUFZenFFLE1BQVE3aEIsR0FFeEIrakMsRUFBT3VvRCxFQUNQQSxFQUFjLE9BSWR2b0QsRUFBT3dvRCxFQUNQQSxFQUFpQixPQUdkdHJFLEVBQUUraUIsY0FBZXVvRCxLQUNyQnhvRCxFQUFPd29ELEVBQ1BBLEVBQWlCLE1BSU0sT0FBbkJBLEdBQTJCQSxJQUFtQnZzRixFQUNsRCxNQUFPaUosTUFBSzBvQixTQUFVLFFBQVMsU0FBVzY3QixHQUN6QyxNQUFPMitCLElBQWlCMytCLEVBQVU4K0IsRUFBYTNDLEdBQWdCNWxELEtBS2pFLElBRUkzbEMsR0FBR0UsRUFBR2k4RCxFQUFLcHpELEVBQUc4NEQsRUFGZGpCLEVBQVUvMUQsS0FBSysxRCxRQUFTdXRCLEVBQWdCeG9ELEdBQ3hDbXVDLEVBQU9qcEUsS0FBS2lwRSxLQUFNb2EsRUFBYXZvRCxHQUcvQjJKLEVBQVF6a0MsS0FBSzBvQixTQUFVLFFBQVMsU0FBVzY3QixFQUFVZ1AsR0FHeEQsSUFGQXArRCxLQUVNRSxFQUFFLEVBQUdpOEQsRUFBSTJYLEVBQUsxVixHQUFLajhELE9BQVdnNkQsRUFBRmo4RCxFQUFRQSxJQUN6QyxJQUFNNkksRUFBRSxFQUFHODRELEVBQUlqQixFQUFReEMsR0FBS2o4RCxPQUFXMC9ELEVBQUY5NEQsRUFBUUEsSUFDNUMvSSxFQUFFMEwsTUFDRCtYLElBQVFxd0QsRUFBSzFWLEdBQUtsK0QsR0FDbEIyOUQsT0FBUStDLEVBQVF4QyxHQUFLcjFELElBS3hCLE9BQU8vSSxJQUNMLEVBUUgsT0FOQTZpQixHQUFFOWlCLE9BQVF1dkMsRUFBTXRFLFVBQ2ZrbUIsS0FBTWk5QixFQUNOcmEsS0FBTW9hLEVBQ052b0QsS0FBTUEsSUFHQTJKLElBSVJrekMsR0FBcUIsa0JBQW1CLGdCQUFpQixXQUN4RCxNQUFPMzNFLE1BQUswb0IsU0FBVSxPQUFRLFNBQVc2N0IsRUFBVTNyQyxFQUFLbzZDLEdBQ3ZELEdBQUl2dUIsR0FBUThmLEVBQVM2UyxPQUFReCtDLEdBQU1zZ0QsT0FDbkMsT0FBT3owQixHQUNOQSxFQUFPdXVCLEdBQ1BqOEQsR0FDQyxLQUlKMmdGLEdBQWUsaUJBQWtCLFdBQ2hDLE1BQU8xM0UsTUFBSzBvQixTQUFVLE9BQVEsU0FBVzY3QixFQUFVM3JDLEVBQUtvNkMsR0FDdkQsTUFBT3VFLEdBQWdCaFQsRUFBVTNyQyxFQUFLbzZDLElBQ3BDLEtBSUoya0IsR0FBcUIsa0JBQW1CLGlCQUFrQixTQUFXbDFFLEdBR3BFLE1BRkFBLEdBQWdCLFdBQVRBLEVBQW9CLGVBQWlCLGFBRXJDekMsS0FBSzBvQixTQUFVLE9BQVEsU0FBVzY3QixFQUFVM3JDLEVBQUtvNkMsR0FDdkQsTUFBT3pPLEdBQVM2UyxPQUFReCtDLEdBQU9uVyxHQUFRdXdELElBQ3JDLEtBSUoya0IsR0FBcUIsbUJBQW9CLGtCQUFtQixTQUFXbDFFLEdBQ3RFLE1BQU96QyxNQUFLMG9CLFNBQVUsT0FBUSxTQUFXNjdCLEVBQVUzckMsRUFBS282QyxHQUN2RCxNQUFPdUUsR0FBZ0JoVCxFQUFVM3JDLEVBQUtvNkMsRUFBUXZ3RCxJQUM1QyxLQUlKazFFLEdBQXFCLG9CQUFxQixpQkFBa0IsV0FDM0QsTUFBTzMzRSxNQUFLMG9CLFNBQVUsT0FBUSxTQUFXNjdCLEVBQVUzckMsRUFBS282QyxHQUN2RCxPQUNDcDZDLElBQUtBLEVBQ0xvNkMsT0FBUUEsRUFDUm9uQixjQUFlempCLEVBQXlCcFMsRUFBVXlPLEtBRWpELEtBSUoya0IsR0FBcUIsdUJBQXdCLHNCQUF1QixTQUFXNWtFLEdBQzlFLE1BQU8vUyxNQUFLMG9CLFNBQVUsT0FBUSxTQUFXNjdCLEVBQVUzckMsRUFBS282QyxHQUN2RGdJLEVBQWV6VyxFQUFVM3JDLEVBQUs3RixFQUFLaWdELE9BTXJDMGtCLEdBQWUsU0FBVSxTQUFXMkwsRUFBYUMsRUFBZ0J4b0QsR0FDaEUsTUFBTzZsRCxJQUFpQjNnRixLQUFLeWtDLE1BQU80K0MsRUFBYUMsRUFBZ0J4b0QsTUFJbEU0OEMsR0FBZSxnQkFBaUIsU0FBV3ZqRCxHQUMxQyxHQUFJa3FELEdBQU1yK0UsS0FBS2dmLFFBQ1gwbUIsRUFBTzFsQyxLQUFLLEVBRWhCLE9BQUttMEIsS0FBU3A5QixFQUVOc25GLEVBQUkvbUYsUUFBVW91QyxFQUFLcHVDLE9BQ3pCaWdFLEVBQWdCOG1CLEVBQUksR0FBSTM0QyxFQUFLLEdBQUc5c0IsSUFBSzhzQixFQUFLLEdBQUdzdEIsUUFDN0NqOEQsR0FJRjRpRSxFQUFnQjBrQixFQUFJLEdBQUkzNEMsRUFBSyxHQUFHOXNCLElBQUs4c0IsRUFBSyxHQUFHc3RCLE9BQVE3K0IsR0FDckQ2bUMsRUFBZXFqQixFQUFJLEdBQUkzNEMsRUFBSyxHQUFHOXNCLElBQUssT0FBUThzQixFQUFLLEdBQUdzdEIsUUFFN0NoekQsUUFpQ1IwM0UsR0FBZSxVQUFXLFNBQVcxUixFQUFPUyxHQUMzQyxHQUFJNFgsR0FBTXIrRSxLQUFLZ2YsT0FFZixPQUFLZ25ELEtBQVVqdkUsRUFFUSxJQUFmc25GLEVBQUkvbUYsT0FDVittRixFQUFJLEdBQUd4TCxVQUNQOTdFLEdBSW9CLGdCQUFWaXZFLEdBRVhBLElBQVlBLEVBQU9TLElBRVJ6dUQsRUFBRXBqQixRQUFTb3hFLEVBQU0sTUFFNUJBLEVBQVF2a0UsTUFBTTFNLFVBQVU4SSxNQUFNNUksS0FBTWlMLFlBSTlCRixLQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBQ3pDQSxFQUFTc3VCLFVBQVk3TSxFQUFNbm9FLGFBZTdCNjVFLEdBQWUsbUJBQW9CLFNBQVc5dEQsRUFBTW9wQyxFQUFRenZELEdBQzNELE1BQU92RCxNQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBQ3pDNFksR0FBdUI1WSxFQUFVMzZCLEVBQU1vcEMsRUFBUXp2RCxPQUtqRG0wRSxHQUFlLGdCQUFpQixTQUFXOWdFLEdBQzFDLElBQU9BLEVBQU0sQ0FDWixHQUFJeW5FLEdBQU1yK0UsS0FBS2dmLFFBQ1h3ekQsRUFBUTZMLEVBQUkvbUYsT0FDZittRixFQUFJLEdBQUc1TCxlQUNQMTdFLENBRUQsT0FBT2loQixHQUFFcGpCLFFBQVM0OUUsSUFDZkksSUFBS0osR0FDUEEsRUFHRixNQUFPeHlFLE1BQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDekNBLEVBQVNrdUIsZUFBaUJ6NkQsRUFBRTlpQixRQUFRLEtBQVUwaEIsT0FNaEQ4Z0UsSUFDQyxvQkFDQSxvQkFDRSxTQUFXalIsR0FDYixHQUFJaFUsR0FBT3p5RCxJQUVYLE9BQU9BLE1BQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsRUFBVWx2RCxHQUNuRCxHQUFJeXZCLEtBRUo5TSxHQUFFeUIsS0FBTWc1QyxFQUFLcDlELEdBQUksU0FBVTZJLEVBQUdnNUQsR0FDN0JweUMsRUFBS2prQixNQUFRcTJELEVBQUt1UCxNQUduQmxpQixFQUFTc3VCLFVBQVkvdEQsTUFNdkI0eUQsR0FBZSxXQUFZLFNBQVcvckQsRUFBT3c2QyxFQUFPZ0QsRUFBT29hLEdBQzFELEdBQUlsRixHQUFNcitFLEtBQUtnZixPQUVmLE9BQUsyTSxLQUFVNTBCLEVBRVEsSUFBZnNuRixFQUFJL21GLE9BQ1YrbUYsRUFBSSxHQUFHdmQsZ0JBQWdCb0YsUUFDdkJudkUsRUFJS2lKLEtBQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDbENBLEVBQVN1USxVQUFVNkwsU0FJMUJFLEVBQW1CdGMsRUFBVXZzQyxFQUFFOWlCLFVBQVlxdkQsRUFBU3VjLGlCQUNuRG9GLFFBQVd2NkMsRUFBTSxHQUNqQnk2QyxPQUFxQixPQUFWRCxHQUFpQixFQUFRQSxFQUNwQzJCLE9BQXFCLE9BQVZxQixHQUFpQixFQUFRQSxFQUNwQ3BCLGlCQUFrQyxPQUFkd2IsR0FBcUIsRUFBT0EsSUFDNUMsT0FLUDVMLEdBQ0MscUJBQ0Esb0JBQ0EsU0FBV2hzRCxFQUFPdzZDLEVBQU9nRCxFQUFPb2EsR0FDL0IsTUFBT3ZqRixNQUFLMG9CLFNBQVUsU0FBVSxTQUFXNjdCLEVBQVV5TyxHQUNwRCxHQUFJeVMsR0FBWWxoQixFQUFTaVAsZUFFekIsT0FBSzduQyxLQUFVNTBCLEVBRVAwdUUsRUFBV3pTLEdBQVNrVCxhQUlyQjNoQixFQUFTdVEsVUFBVTZMLFVBSTFCM29ELEVBQUU5aUIsT0FBUXV3RSxFQUFXelMsSUFDcEJrVCxRQUFXdjZDLEVBQU0sR0FDakJ5NkMsT0FBcUIsT0FBVkQsR0FBaUIsRUFBUUEsRUFDcEMyQixPQUFxQixPQUFWcUIsR0FBaUIsRUFBUUEsRUFDcENwQixpQkFBa0MsT0FBZHdiLEdBQXFCLEVBQU9BLElBR2pEMWlCLEVBQW1CdGMsRUFBVUEsRUFBU3VjLGdCQUFpQixTQVMxRDRXLEdBQWUsVUFBVyxXQUN6QixNQUFPMTNFLE1BQUtnZixRQUFRMW5CLE9BQ25CMEksS0FBS2dmLFFBQVEsR0FBR2cyRCxZQUNoQixPQUlGMEMsR0FBZSxnQkFBaUIsV0FDL0IsTUFBTzEzRSxNQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBRXpDQSxFQUFTMHdCLG9CQUFvQmhnRixLQUFNc3ZELEVBQVM2WCxVQUFXN1gsVUFLekRtekIsR0FBZSxpQkFBa0IsV0FDaEMsTUFBTzEzRSxNQUFLZ2YsUUFBUTFuQixPQUNuQjBJLEtBQUtnZixRQUFRLEdBQUdzMkQsYUFDaEIsT0FJRm9DLEdBQWUsZUFBZ0IsV0FDOUIsTUFBTzEzRSxNQUFLMG9CLFNBQVUsUUFBUyxTQUFXNjdCLEdBQ3pDc3dCLEdBQWN0d0IsT0FxQmhCOEwsR0FBVW16QixhQUFlbnpCLEdBQVVnckIsZUFBaUIsU0FBVW9JLEdBTTdELElBQU0sR0FGRkMsR0FBT0MsRUFGUEMsRUFBUXZ6QixHQUFVb3pCLFFBQVF6bEYsTUFBTSxLQUNoQzZsRixFQUFRSixFQUFRemxGLE1BQU0sS0FHaEIzSSxFQUFFLEVBQUc0Z0UsRUFBSzR0QixFQUFNdnNGLE9BQVcyK0QsRUFBRjVnRSxFQUFTQSxJQUszQyxHQUpBcXVGLEVBQVFya0YsU0FBVXVrRixFQUFNdnVGLEdBQUksS0FBUSxFQUNwQ3N1RixFQUFRdGtGLFNBQVV3a0YsRUFBTXh1RixHQUFJLEtBQVEsRUFHaENxdUYsSUFBVUMsRUFLZCxNQUFPRCxHQUFRQyxDQUdoQixRQUFPLEdBbUJSdHpCLEdBQVV5ekIsWUFBY3p6QixHQUFVMHpCLGNBQWdCLFNBQVc5aUIsR0FFNUQsR0FBSWppRSxHQUFJZ1osRUFBRWlwRCxHQUFPdHFELElBQUksR0FDakJtMEMsR0FBSyxDQVdULE9BVEE5eUMsR0FBRXlCLEtBQU00MkMsR0FBVTlMLFNBQVUsU0FBVWx2RCxFQUFHNEksR0FDeEMsR0FBSWtWLEdBQU9sVixFQUFFdXdFLFlBQWN4MkQsRUFBRSxRQUFTL1osRUFBRXV3RSxhQUFhLEdBQUssS0FDdER3VixFQUFPL2xGLEVBQUV5d0UsWUFBYzEyRCxFQUFFLFFBQVMvWixFQUFFeXdFLGFBQWEsR0FBSyxNQUVyRHp3RSxFQUFFaWpFLFNBQVdsaUUsR0FBS21VLElBQVNuVSxHQUFLZ2xGLElBQVNobEYsS0FDN0M4ckQsR0FBSyxLQUlBQSxHQW9CUnVGLEdBQVU0dEIsT0FBUzV0QixHQUFVNHpCLFNBQVcsU0FBV2xQLEdBRWxELEdBQUlvRSxJQUFNLENBRUxuaEUsR0FBRStpQixjQUFlZzZDLEtBQ3JCb0UsRUFBTXBFLEVBQVFvRSxJQUNkcEUsRUFBVUEsRUFBUUEsUUFHbkIsSUFBSTUvRSxHQUFJNmlCLEVBQUU4M0MsSUFBS08sR0FBVTlMLFNBQVUsU0FBVXRtRCxHQUM1QyxPQUFNODJFLEdBQVlBLEdBQVcvOEQsRUFBRS9aLEVBQUVpakUsUUFBUXBXLEdBQUcsWUFDcEM3c0QsRUFBRWlqRSxPQURWLFFBS0QsT0FBT2lZLEdBQ04sR0FBSTFCLElBQU10aUYsR0FDVkEsR0FjRms3RCxHQUFVNnpCLE1BU1RDLFNBQVVoYyxHQVNWaWMsWUFBYXhhLElBaUJkdlosR0FBVWcwQixpQkFBbUJyMEIsRUFPN0IwbkIsR0FBZSxNQUFPLFNBQVd2M0MsRUFBVXJGLEdBQzFDLEdBQ0NtdUMsR0FBU2pwRSxLQUFLaXBFLEtBQU1udUMsR0FBT216QixRQUMzQnEyQixFQUFTdHNFLEVBQUVpeEQsRUFFWixPQUFPanhELE1BQU01WCxPQUNaa2tGLEVBQU9yekQsT0FBUWtQLEdBQVduVyxVQUMxQnM2RCxFQUFPM3FFLEtBQU13bUIsR0FBV25XLGNBTTFCaFMsRUFBRXlCLE1BQVEsS0FBTSxNQUFPLE9BQVMsU0FBVXBrQixFQUFHZ3BCLEdBQzVDcTVELEdBQWVyNUQsRUFBSSxLQUFNLFdBQ3hCLEdBQUlrQixHQUFPOWQsTUFBTTFNLFVBQVU4SSxNQUFNNUksS0FBS2lMLFVBRy9CcWYsR0FBSyxHQUFHMmdCLE1BQU0sWUFDcEIzZ0IsRUFBSyxJQUFNLE1BR1osSUFBSXFoRSxHQUFPNW9FLEVBQUdoWSxLQUFLaStFLFNBQVNod0IsUUFFNUIsT0FEQTJ5QixHQUFLdmlFLEdBQUtsZSxNQUFPeWdGLEVBQU1yaEUsR0FDaEJ2ZixTQUtUMDNFLEdBQWUsVUFBVyxXQUN6QixNQUFPMTNFLE1BQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDekNvVyxFQUFlcFcsT0FLakJtekIsR0FBZSxhQUFjLFdBQzVCLE1BQU8sSUFBSUQsSUFBTXozRSxLQUFLZ2YsUUFBU2hmLEtBQUtnZixXQUlyQzA0RCxHQUFlLFNBQVUsV0FDeEIsR0FBSTJHLEdBQU1yK0UsS0FBS2dmLE9BQ2YsT0FBT3EvRCxHQUFJL21GLE9BQVMrbUYsRUFBSSxHQUFHNVMsTUFBUSxPQUlwQ2lNLEdBQWUsU0FBVSxXQUN4QixNQUFPMTNFLE1BQUswb0IsU0FBVSxRQUFTLFNBQVc2N0IsR0FDekMsTUFBT21XLElBQVFuVyxFQUFTNlMsT0FBUSxZQUM3QmtpQixZQUlMNUIsR0FBZSxZQUFhLFNBQVc3aEUsR0FHdEMsTUFGQUEsR0FBU0EsSUFBVSxFQUVaN1YsS0FBSzBvQixTQUFVLFFBQVMsU0FBVzY3QixHQUN6QyxHQVVPK00sR0FWSGl6QixFQUFZaGdDLEVBQVNnZCxjQUFjL29FLFdBQ25Dd2tFLEVBQVl6WSxFQUFTb1AsU0FDckJzTixFQUFZMWMsRUFBUzJjLE9BQ3JCeWMsRUFBWXA1QixFQUFTNmIsT0FDckJ6RCxFQUFZcFksRUFBU3FZLE9BQ3JCQyxFQUFZdFksRUFBU3VZLE9BQ3JCMG5CLEVBQVl4c0UsRUFBRWlwRCxHQUNkd2pCLEVBQVl6c0UsRUFBRTJsRSxHQUNkK0csRUFBWTFzRSxFQUFFdXNDLEVBQVNnZCxlQUN2QjBILEVBQVlqeEQsRUFBRTgzQyxJQUFLdkwsRUFBUzZTLE9BQVEsU0FBVXI4QyxHQUFLLE1BQU9BLEdBQUVrOUMsS0FLaEUxVCxHQUFTZ2IsYUFBYyxFQUd2QmpKLEdBQWlCL1IsRUFBVSxvQkFBcUIsV0FBWUEsSUFHckQxdUMsR0FDTixHQUFJNGhFLElBQU1sekIsR0FBV3dSLFVBQVVnZixTQUFTLEdBTXpDMlAsRUFBVTluRSxPQUFPLE9BQU9qRCxLQUFLLGlCQUFpQmlELE9BQU8sT0FDckQ1RSxFQUFFeFcsR0FBUW9iLE9BQU8sT0FBTzJuQyxFQUFTeXRCLFdBRzVCL1EsR0FBU3RFLEVBQU1ua0UsYUFDbkJnc0YsRUFBUWwvRSxTQUFTLFNBQVMrNkQsU0FDMUJta0IsRUFBUW55RSxPQUFRc3FELElBR1pFLEdBQVNvRSxHQUFTcEUsRUFBTXJrRSxhQUM1QmdzRixFQUFRbC9FLFNBQVMsU0FBUys2RCxTQUMxQm1rQixFQUFRbnlFLE9BQVF3cUQsSUFHakJ0WSxFQUFTc3VCLGFBQ1R0dUIsRUFBU2t1QixrQkFDVDJCLEdBQW1CN3ZCLEdBRW5CdnNDLEVBQUdpeEQsR0FBTzF4RSxZQUFhZ3RELEVBQVNrYSxnQkFBZ0IxZ0UsS0FBSyxNQUVyRGlhLEVBQUUsU0FBVTJrRCxHQUFPcGxFLFlBQWF5bEUsRUFBUXJILFVBQVUsSUFDakRxSCxFQUFRMUgsYUFBYSxJQUFJMEgsRUFBUXZILGNBQWMsSUFBSXVILEVBQVEvSCxlQUd2RDFRLEVBQVNvZ0MsT0FDYjNzRSxFQUFFLFdBQVdnbEQsRUFBUTRuQixVQUFXLGFBQWE1bkIsRUFBUTRuQixVQUFXam9CLEdBQU8wRCxTQUN2RXJvRCxFQUFFLFNBQVUya0QsR0FBT2xqRCxLQUFNLFdBQ3hCLEdBQUlvckUsR0FBVTdzRSxFQUFFLE9BQU9nbEQsRUFBUThuQixnQkFBaUI5a0YsS0FDaERnWSxHQUFFaFksTUFBTXFTLE9BQVF3eUUsRUFBUTkyQixZQUN4QjgyQixFQUFReGtCLFlBS1Zva0IsRUFBUW4vRSxXQUFXKzZELFNBQ25Cb2tCLEVBQVFweUUsT0FBUTQyRCxFQUdoQixJQUFJOGIsR0FBZ0JsdkUsRUFBUyxTQUFXLFFBQ3hDMnVFLEdBQVNPLEtBQ1RMLEVBQVdLLE1BR0psdkUsR0FBVTB1RSxJQUVoQkEsRUFBS3J3RSxhQUFjK3NELEVBQU8xYyxFQUFTaWQsc0JBSW5DZ2pCLEVBQ0UzbkMsSUFBSyxRQUFTMEgsRUFBU3UzQixlQUN2QnZrRixZQUFheWxFLEVBQVE2ZixRQUt2QnZyQixFQUFNL00sRUFBUzY0QixpQkFBaUI5bEYsT0FFM0JnNkQsR0FDSm16QixFQUFRbi9FLFdBQVdtVSxLQUFNLFNBQVVwa0IsR0FDbEMyaUIsRUFBRWhZLE1BQU03SSxTQUFVb3RELEVBQVM2NEIsaUJBQWlCL25GLEVBQUlpOEQsTUFNbkQsSUFBSWlDLEdBQU12N0MsRUFBRWdOLFFBQVN1L0IsRUFBVThMLEdBQVU5TCxTQUM1QixNQUFSZ1AsR0FDSmxELEdBQVU5TCxTQUFTbHpDLE9BQVFraUQsRUFBSyxPQU9uQ3Y3QyxFQUFFeUIsTUFBUSxTQUFVLE1BQU8sUUFBVSxTQUFXcGtCLEVBQUdvTixHQUNsRGkxRSxHQUFlajFFLEVBQUssY0FBZSxTQUFXaWIsR0FDN0MsR0FBSW9kLEdBQU85NkIsS0FBS21nQyxTQUFTckYsS0FDckJxK0MsRUFBTW41RSxJQUVWLE9BQU9BLE1BQUswb0IsU0FBVWptQixFQUFNLFNBQVc4aEQsRUFBVXlnQyxFQUFNQyxFQUFNQyxFQUFNQyxHQVdsRXpuRSxFQUFHem9CLEtBQ0Zra0YsRUFBSzEyRSxHQUNKdWlGLEVBQ08sU0FBUHZpRixFQUFnQndpRixFQUFPbnFELEVBQ2hCLFNBQVByNEIsRUFBZ0JxNEIsRUFBTy9qQyxHQUV4Qml1RixFQUFNQyxFQUFNQyxFQUFNQyxTQVN0QnpOLEdBQWUsU0FBVSxTQUFXME4sRUFBT3h0QixFQUFLeXRCLEdBQy9DLEdBQUloSCxHQUFNcitFLEtBQUtnZixRQUFRLEdBQ25Cc21FLEVBQVdseEIsRUFBb0JneEIsR0FBUy9HLEVBQUkvdEIsVUFZaEQsT0FWS2cxQixLQUFhdnVGLElBQ2pCdXVGLEVBQVcxdEIsR0FHUHl0QixJQUFXdHVGLEdBQWFpaEIsRUFBRStpQixjQUFldXFELEtBQzdDQSxFQUFXQSxFQUFVRCxLQUFhdHVGLEVBQ2pDdXVGLEVBQVVELEdBQ1ZDLEVBQVN4ckIsR0FHSndyQixFQUFTMXVGLFFBQVMsS0FBTXl1RixLQVdoQ2gxQixHQUFVb3pCLFFBQVUsVUFjcEJwekIsR0FBVTlMLFlBUVY4TCxHQUFVa0IsVUFTVmxCLEdBQVVrQixPQUFPQyxTQU1oQnVXLGtCQUFvQixFQU9wQjdCLFFBQVcsR0FTWEUsUUFBVSxFQU9WMEIsUUFBVSxHQVlYelgsR0FBVWtCLE9BQU84RyxNQU1oQkosSUFBTyxLQVFQaUIsUUFBVyxLQVdYWixVQWNBNEMsV0FBYyxLQVNkQyxhQUFnQixLQVdoQndPLFlBQWUsS0FVZjdKLFlBQWUsR0FXZi9zRCxJQUFPLEtBU1B3Z0QsSUFBTyxJQWVSbEQsR0FBVWtCLE9BQU82QixTQU9oQkcsSUFBTyxLQVdQNUIsVUFBYSxLQVVid0QsVUFBYSxLQU9ib1IsWUFBZSxLQU1mdlIsVUFBYSxLQU1ia0gsU0FBWSxLQVNabEksYUFBZ0IsS0FTaEJNLFdBQWEsRUFjYjZILGNBQWlCLEtBZ0JqQjVILFVBQWEsS0FhYkksVUFBYSxLQVNickIsTUFBUyxLQVVUZSxRQUFXLEtBUVh2QixJQUFPLEtBU1A0SyxJQUFPLEtBT1B6SixPQUFVLEtBYVY0ZCxnQkFBbUIsS0FTbkJ0WSxnQkFBbUIsS0FPbkI4TSxNQUFTLEtBUVR1TyxjQUFpQixNQU9qQnZmLGNBQWlCLEtBUWpCRSxpQkFBb0IsS0FNcEJsQyxPQUFVLEtBT1ZVLE1BQVMsS0FPVG1DLE9BQVUsS0FPVnJDLFdBQWMsTUF5QmZ4RCxHQUFVdDJELFVBNERUd3RFLE9BQVUsS0E4QlZzTCxZQUFlLEVBQUUsUUF1QmpCSixrQkE2SkFyTyxLQUFRLEtBMEJSd0gsYUFBaUIsR0FBSSxHQUFJLEdBQUksS0FlN0IxWSxVQUFhLEtBcUJicXFCLGFBQWdCLEtBMkJoQmxzQixnQkFxQkFvTixnQkFBbUIsS0FvQm5CM0ksWUFBYyxFQXVCZDRDLGNBQWdCLEVBNEJoQm1qQixVQUFZLEVBd0JabGIsU0FBVyxFQW9CWGdDLE9BQVMsRUFvQlRnYSxXQUFhLEVBbUJidGEsZUFBaUIsRUFrQmpCRCxXQUFhLEVBcUJiSSxhQUFlLEVBc0Nmb1osV0FBYSxFQXdCYjJKLGlCQUFtQixFQXNCbkJ6bUIsYUFBZSxFQW1CZi9KLE9BQVMsRUFvQlRnZixZQUFjLEVBb0JkaFEsZUFBaUIsRUFzQmpCMFEsY0FBZ0IsRUF5QmhCSyxZQUFjLEVBNEJkd0gsYUFBZ0IsS0FxQmhCTixlQUFrQixLQTRCbEJRLGlCQUFvQixLQThCcEJ2UixlQUFrQixTQUFXdWEsR0FDNUIsTUFBT0EsR0FBU3h3RixXQUFXNEIsUUFDMUIsd0JBQ0FvSixLQUFLc3dELFVBQVVPLGFBK0JqQjByQixpQkFBb0IsS0E4QnBCeFIsZUFBa0IsS0F5QmxCMFIsZUFBa0IsS0EwQmxCQyxrQkFBcUIsS0E2QnJCTCxjQUFpQixLQTBCakJyWCxhQUFnQixLQTJCaEJpWCxlQUFrQixLQXNDbEI5RyxvQkFBdUIsU0FBVzV3QixHQUNqQyxJQUNDLE1BQU83ckMsTUFBS0MsT0FDa0IsS0FBNUI0ckMsRUFBUzh3QixlQUF3Qjk4RCxlQUFpQmt0RSxjQUFjanRFLFFBQ2hFLGNBQWMrckMsRUFBU3l0QixVQUFVLElBQUk5aEUsU0FBU3cxRSxXQUcvQyxNQUFPcG9GLE1BdUNWNitFLGtCQUFxQixLQXdCckJDLGNBQWlCLEtBZ0NqQm5ILG9CQUF1QixTQUFXMXdCLEVBQVVwd0IsR0FDM0MsS0FDOEIsS0FBNUJvd0IsRUFBUzh3QixlQUF3Qjk4RCxlQUFpQmt0RSxjQUFjdHJFLFFBQ2hFLGNBQWNvcUMsRUFBU3l0QixVQUFVLElBQUk5aEUsU0FBU3cxRSxTQUM5Q2h0RSxLQUFLMEIsVUFBVytaLElBRWhCLE1BQU83MkIsTUE0QlY0K0Usa0JBQXFCLEtBb0JyQjdHLGVBQWtCLEtBNENsQnlILGNBQWlCLEtBb0JqQmYsZUFBa0IsR0FxQmxCNWMsY0FBaUIsRUF1QmpCbEMsVUFBYSxFQVdidEosWUFVQXJELFdBUUNtakIsT0FzQkNDLGVBQWtCLHNDQXVCbEJDLGdCQUFtQix3Q0FTcEJnUyxXQXFCQ0MsT0FBVSxRQXVCVkMsTUFBUyxPQXVCVEMsTUFBUyxPQXVCVEMsVUFBYSxZQXVCZHQxQixZQUFlLDZCQWdDZitaLE1BQVMsOENBcUJURyxXQUFjLDhCQXNCZEMsY0FBaUIsc0NBdUJqQkMsYUFBZ0IsR0ErQmhCOVosU0FBWSxHQXVCWkYsV0FBYyxJQXlDZHFiLFlBQWUsc0JBd0JmdmIsZ0JBQW1CLGFBcUJuQnNjLFlBQWUsZ0JBbUNmL0csUUFBVyxVQVdYZ0MsbUJBQXNCLEdBeUJ0QjZVLEtBQVEsR0FzQlJ2c0IsYUFBZ0IsNkJBeUJqQmdCLFFBQVd4NUMsRUFBRTlpQixVQUFZbTdELEdBQVVrQixPQUFPQyxTQXFCMUM4VixjQUFpQixPQW1CakJyQyxZQUFlLEtBc0RmbEQsS0FBUSxTQW9CUmlHLFlBQWUsS0EyQmZvRSxnQkFBbUIsaUJBeUJuQmpiLFNBQVksR0F3Qlo2MEIsY0FBaUIsR0F3QmpCQyxTQUFZLEdBa0JadGhCLGNBQWlCLE1Ba0JqQjBSLFNBQVksS0FXWnhhLE1BQVMsWUFHVmxNLEVBQWlCVSxHQUFVdDJELFVBYTNCczJELEdBQVV0MkQsU0FBU2k1RCxRQXVDbEJyQixVQUFhLEtBQ2J1QyxVQUFhLEdBdUNiaUIsV0FBZSxNQUFPLFFBaUN0Qm9SLGFBQWUsRUFpQ2Z2UixXQUFhLEVBaUNia0gsVUFBWSxFQWdDWkMsY0FBaUIsS0FxTGpCN0ksTUFBUyxLQTBIVGUsUUFBVyxLQXdCWDJILFVBQWEsS0FtQ2IvSCxPQUFVLEdBaUNWNGQsZ0JBQW1CLEdBMkNuQnRZLGdCQUFtQixLQTRDbkI4TSxNQUFTLEdBMENUdU8sY0FBaUIsTUFvQ2pCdmhCLE9BQVUsS0F5Q1ZVLE1BQVMsS0FzQ1RtQyxPQUFVLE1BR1h2RyxFQUFpQlUsR0FBVXQyRCxTQUFTaTVELFFBMEJwQzNDLEdBQVVrQixPQUFPc0IsV0FLaEJpQyxXQVNDZ0IsV0FBYyxLQVdkNEMsYUFBZ0IsS0FVaEJpSSxRQUFXLEtBU1hnQyxNQUFTLEtBU1ROLGNBQWlCLEtBU2pCRCxVQUFhLEtBU2JJLFlBQWUsS0FVZjFELFlBQWUsS0FRZi9KLE1BQVMsS0FRVGdmLFdBQWMsS0FVZFUsYUFBZ0IsS0FRaEJLLFdBQWMsTUFRZnhpQixTQVFDaWMsVUFBYSxLQVFiaGMsVUFBYSxFQVNiNkQsR0FBTSxLQVVONFgsUUFBVyxLQVNYN1gsR0FBTSxNQVFQN0YsV0FPQ3lhLGVBQWtCLE1BT25CMVksVUFPQ0gsaUJBQW1CLEVBU25CQyxnQkFBa0IsRUFPbEJDLFdBQWEsRUFPYkgsU0FBWSxHQUlibVMsS0FBUSxLQWlCUmxCLGVBUUE5TCxVQU9Bd0QsYUFPQXJDLG1CQU9BRSxRQU9BdkYsYUFPQW9LLFlBT0FHLFlBVUFxRCxtQkFTQXROLG1CQWNBcWYsVUFBYSxLQVViSixrQkFTQWhVLGdCQUFtQixLQU9uQjJlLG9CQU9BdEIsY0FBaUIsRUFPakJvSyxpQkFPQUMsb0JBT0FDLG9CQU9BM2Isa0JBT0E0Yix3QkFRQUMscUJBT0FDLGtCQVNBQyxxQkFRQUMscUJBUUFDLGlCQU9BeHBCLFNBQVksR0FPWmdFLE9BQVUsS0FPVnRFLE9BQVUsS0FPVkUsT0FBVSxLQU9Wc0QsT0FBVSxLQU9WbUIsY0FBaUIsS0FVakJqQyxlQUFpQixFQU9qQmdNLGNBQWdCLEVBUWhCMU0sY0FVQW1ELEtBQVEsS0FPUmlHLFlBQWUsS0FTZm9FLGdCQUFtQixhQVNuQmlKLGVBQWtCLEVBZWxCc1IsZUFhQUMsZUFPQTVSLFlBQWUsS0FPZk0sYUFBZ0IsS0FTaEJyUSxZQUFlLEtBVWZxQyxjQUFpQixLQU9qQm5DLGNBQWdCLEVBU2hCZCxNQUFTLEtBT1RqOUMsS0FBUXJ3QixFQU9SZ3VFLFVBQWFodUUsRUFRYml1RSxhQUFnQixLQVFoQjZoQixrQkFTQWxpQixjQUFpQixLQVFqQnNHLGVBQWtCLEtBU2xCVyxZQUFlLEtBUWZ2UyxNQUFTLEVBT1QyRixVQUFZLEVBT1p2RixXQUFjLEdBT2RxTSxnQkFBbUIsR0FPbkI3RyxlQUFrQixFQVdsQmdJLGVBQWtCLEVBV2xCQyxpQkFBb0IsRUFRcEJ5ZCxLQUFRLEtBT1JoeEIsWUFVQTRNLFdBQWEsRUFVYkQsU0FBVyxFQVVYeUQsY0FBaUIsS0FPakIwSCxNQUFTLEtBUVRxYixxQkFPQTltQixlQUFrQixXQUVqQixNQUFnQyxPQUF6QmpCLEdBQWUvK0QsTUFDQyxFQUF0QkEsS0FBS2luRSxlQUNMam5FLEtBQUt1NEQsZ0JBQWdCamhFLFFBT3ZCNG5FLGlCQUFvQixXQUVuQixNQUFnQyxPQUF6QkgsR0FBZS8rRCxNQUNHLEVBQXhCQSxLQUFLa25FLGlCQUNMbG5FLEtBQUs0NkQsVUFBVXRqRSxRQU9qQituRSxhQUFnQixXQUVmLEdBQ0Nwa0MsR0FBV2o3QixLQUFLOGxFLGdCQUNoQjloRSxFQUFXaEUsS0FBS2kvRCxlQUNoQmdrQixFQUFXai9FLEVBQVFpM0IsRUFDbkIreEMsRUFBV2h0RSxLQUFLNDZELFVBQVV0akUsT0FDMUJvcEUsRUFBVzFnRSxLQUFLODBELFVBQ2hCaXlCLEVBQVdybUIsRUFBUzBCLFNBRXJCLE9BQUsxQixHQUFTNUIsWUFDTmlvQixLQUFhLEdBQWlCLEtBQVI5ckQsRUFDNUJqM0IsRUFBUWdwRSxFQUNScHJFLEtBQUtvTSxJQUFLaEssRUFBTWkzQixFQUFLajdCLEtBQUtrbkUsbUJBR2xCNmYsR0FBWTlELEVBQUtqVyxHQUFpQixLQUFOL3hDLEVBQ3BDK3hDLEVBQ0FpVyxHQVNIN21CLFVBQWEsS0FTYjRWLFVBQWEsS0FNYi9VLFVBQWEsRUFLYnVSLFlBQWUsS0FLZkUsWUFBZSxLQU9mNEYsYUFPQTBTLFlBT0F4dUIsUUFBVyxLQU9YcUQsTUFBUyxNQTRCVnhMLEdBQVVnSCxJQUFNZ2dCLElBU2Z6SyxXQVNBNVAsV0FRQWlxQixRQUFTLFdBWVRyUixRQUFTLFFBd0NUOVMsV0E2REFtRCxVQTJCQTlsQyxVQUNDdUYsUUFDQXN0QixVQUNBcDZDLFFBY0Q0K0QsWUFTQTlRLFFBUUN0QyxLQUFNLE1BaURQa0ksU0FHQStKLFVBQ0M2USxjQUNBblgsV0E0Q0QvSixTQWFBdmpFLE1BeUNDNjBELFVBdUNBMk8sVUFtRUFELFVBU0R6SixRQUFTLEVBZVQ4ZSxlQUFnQmhyQixHQUFVZ3JCLGVBUTFCOUQsVUFBVyxFQVFYcUYsZUFRQXVLLFNBQVU5MkIsR0FBVW96QixTQU9yQnpyRSxFQUFFOWlCLE9BQVFtaUYsSUFDVCtQLGFBQWMvUCxHQUFLcFIsT0FDbkJvaEIsT0FBY2hRLEdBQUs1MEUsS0FBSzYwRCxPQUN4Qmd3QixVQUFjalEsR0FBSzUwRSxLQUFLd2pFLE9BQ3hCc2hCLE1BQWNsUSxHQUFLNTBFLEtBQUt1akUsTUFDeEJ3aEIsWUFBY25RLEdBQUtyUixNQUNuQmpELFdBQWNzVSxHQUFLdlUsUUFDbkIwWSxLQUFjbkUsR0FBS0csU0FDbkJpUSxZQUFjcFEsR0FBS3JhLFFBQ25CMHFCLFlBQWNyUSxHQUFLL0ssUUFJcEJ0MEQsRUFBRTlpQixPQUFRbTdELEdBQVVnSCxJQUFJMkYsU0FDdkI2ZixPQUFVLFlBQ1Z4YixVQUFhLFlBR2JzbUIsWUFBZSxrQkFDZkMsa0JBQXFCLFVBQ3JCQyxvQkFBdUIsV0FHdkI3SyxXQUFjLE1BQ2RDLFlBQWUsT0FHZjljLFVBQWEsbUJBR2JpQixTQUFZLHFCQUNad0csUUFBVyxvQkFDWDRDLE1BQVMsa0JBQ1RnQyxRQUFXLDhCQUNYUCxRQUFXLG9CQUNYZ0IsWUFBZSx3QkFHZjZhLFNBQVksY0FDWkMsVUFBYSxlQUNicHlCLFVBQWEsVUFDYkwsYUFBZ0IsdUJBQ2hCRyxjQUFpQix3QkFDakJSLGNBQWlCLG1CQUNqQnVmLFlBQWUsV0FHZjdNLGFBQWdCLEdBR2hCb0UsY0FBaUIsR0FHakI0QixlQUFrQixvQkFDbEJDLFlBQWUsd0JBQ2ZFLGlCQUFvQiw2QkFDcEJHLFlBQWUsd0JBQ2ZDLFlBQWUsd0JBQ2ZDLGlCQUFvQiw2QkFHcEI1USxVQUFhLEdBQ2JDLFVBQWEsR0FHYndxQixZQUFlLEdBQ2ZDLGFBQWdCLEdBQ2hCcnlCLFNBQVksR0FDWkosbUJBQXNCLEdBQ3RCRSxvQkFBdUIsR0FDdkJvdkIsZ0JBQW1CLEdBQ25CRixVQUFhLEdBQ2I1aUIsV0FBYyxHQUNkQyxXQUFjLEtBSWQsV0FNRCxHQUFJK1YsR0FBUyxFQUNiQSxHQUFTLEVBRVQsSUFBSWtRLEdBQWdCbFEsRUFBUyxtQkFDekJtUSxFQUFnQm5RLEVBQVMsNkJBQ3pCb1EsRUFBZ0JwUSxFQUFTLDJEQUU3QmhnRSxHQUFFOWlCLE9BQVFtN0QsR0FBVWdILElBQUl1bEIsWUFBYXZzQixHQUFVZ0gsSUFBSTJGLFNBRWxEMnFCLFlBQXVCLHVCQUF1Qk8sRUFDOUNOLGtCQUF1QixvQkFDdkJDLG9CQUF1QixvQkFHdkJyYixRQUFXLDhGQUlYc2IsU0FBdUJJLEVBQWMsZUFDckNILFVBQXVCRyxFQUFjLGdCQUNyQ3Z5QixVQUF1QnV5QixFQUFjLFdBQ3JDNXlCLGFBQXVCNHlCLEVBQWMsd0JBQ3JDenlCLGNBQXVCeXlCLEVBQWMseUJBQ3JDanpCLGNBQXVCaXpCLEVBQWMsb0JBQ3JDRixZQUF1QkcsRUFBVSxlQUNqQ0YsYUFBdUJFLEVBQVUsZUFDakN2eUIsU0FBdUJ1eUIsRUFBVSxjQUNqQzN5QixtQkFBdUIyeUIsRUFBVSxZQUNqQ3p5QixvQkFBdUJ5eUIsRUFBVSxZQUNqQ3JELGdCQUF1QiwwQkFDdkJGLFVBQXVCLHVCQUd2QmhYLFlBQWUseUJBQXlCc2EsRUFDeENoYSxZQUFlLHlCQUF5QmdhLEVBR3hDM3FCLFVBQWMycUIsRUFDZDFxQixVQUFjMHFCLEVBQ2RsbUIsV0FBY29tQixFQUFjLDZCQUM1Qm5tQixXQUFjbW1CLEVBQWMsaUNBTzdCLElBQUkzUixJQUFnQnBtQixHQUFVZ0gsSUFBSWlWLEtBbUNsQ3QwRCxHQUFFOWlCLE9BQVF1aEYsSUFDVDRSLE9BQVEsU0FBVzNiLEVBQU1DLEdBQ3hCLE9BQVMsV0FBWSxTQUd0QjJiLEtBQU0sU0FBVzViLEVBQU1DLEdBQ3RCLE9BQVUsUUFBUyxXQUFZLE9BQVEsU0FHeEM2SixRQUFTLFNBQVc5SixFQUFNQyxHQUN6QixPQUFTNEosR0FBUzdKLEVBQU1DLEtBR3pCNGIsZUFBZ0IsU0FBVzdiLEVBQU1DLEdBQ2hDLE9BQVMsV0FBWTRKLEdBQVM3SixFQUFNQyxHQUFRLFNBRzdDNmIsYUFBYyxTQUFXOWIsRUFBTUMsR0FDOUIsT0FBUyxRQUFTLFdBQVk0SixHQUFTN0osRUFBTUMsR0FBUSxPQUFRLFNBSTlENEosU0FBVUEsR0FHVkcsZUFBZ0IsSUFJakIxK0QsRUFBRTlpQixRQUFRLEVBQU1tN0QsR0FBVWdILElBQUlnZixVQUM3QjZRLFlBQ0NwdEIsRUFBRyxTQUFXdlYsRUFBVSt4QixFQUFNL2lCLEVBQUtxWixFQUFTRixFQUFNQyxHQUNqRCxHQUdJOGIsR0FBWUMsRUFtRlpDLEVBdEZBM3JCLEVBQVV6WSxFQUFTb1AsU0FDbkJ2RCxFQUFPN0wsRUFBUytMLFVBQVVxMUIsVUFDMUJpRCxFQUFPcmtDLEVBQVMrTCxVQUFVbWpCLE1BQU1zVCxhQUNWOEIsRUFBUSxFQUU5QkMsRUFBUyxTQUFVL2hDLEVBQVc2bEIsR0FDakMsR0FBSXYzRSxHQUFHaThELEVBQUsxbkMsRUFBTXhVLEVBQ2QyekUsRUFBZSxTQUFXenJGLEdBQzdCd3ZFLEdBQWV2b0IsRUFBVWpuRCxFQUFFNjJCLEtBQUs0NEMsUUFBUSxHQUd6QyxLQUFNMTNFLEVBQUUsRUFBR2k4RCxFQUFJc2IsRUFBUXQxRSxPQUFXZzZELEVBQUZqOEQsRUFBUUEsSUFHdkMsR0FGQStmLEVBQVN3M0QsRUFBUXYzRSxHQUVaMmlCLEVBQUVwakIsUUFBU3dnQixHQUFXLENBQzFCLEdBQUk0OEMsR0FBUWg2QyxFQUFHLEtBQUs1QyxFQUFPeWhFLE9BQVMsT0FBTyxNQUN6Q25xQixTQUFVM0YsRUFDWitoQyxHQUFROTJCLEVBQU81OEMsT0FFWCxDQUlKLE9BSEFxekUsRUFBYSxLQUNiQyxFQUFXLEdBRUZ0ekUsR0FDUixJQUFLLFdBQ0oyeEMsRUFBVTEwQyxPQUFPLHlDQUNqQixNQUVELEtBQUssUUFDSm8yRSxFQUFhcjRCLEVBQUt3MUIsT0FDbEI4QyxFQUFXdHpFLEdBQVVzM0QsRUFBTyxFQUMzQixHQUFLLElBQUkxUCxFQUFRNnFCLG9CQUNsQixNQUVELEtBQUssV0FDSlksRUFBYXI0QixFQUFLMjFCLFVBQ2xCMkMsRUFBV3R6RSxHQUFVczNELEVBQU8sRUFDM0IsR0FBSyxJQUFJMVAsRUFBUTZxQixvQkFDbEIsTUFFRCxLQUFLLE9BQ0pZLEVBQWFyNEIsRUFBSzAxQixNQUNsQjRDLEVBQVd0ekUsR0FBaUJ1M0QsRUFBTSxFQUFiRCxFQUNwQixHQUFLLElBQUkxUCxFQUFRNnFCLG9CQUNsQixNQUVELEtBQUssT0FDSlksRUFBYXI0QixFQUFLeTFCLE1BQ2xCNkMsRUFBV3R6RSxHQUFpQnUzRCxFQUFNLEVBQWJELEVBQ3BCLEdBQUssSUFBSTFQLEVBQVE2cUIsb0JBQ2xCLE1BRUQsU0FDQ1ksRUFBYXJ6RSxFQUFTLEVBQ3RCc3pFLEVBQVdoYyxJQUFTdDNELEVBQ25CNG5ELEVBQVE0cUIsa0JBQW9CLEdBSVgsT0FBZmEsSUFDSjcrRCxFQUFPNVIsRUFBRSxPQUNQaW9ELFFBQVNqRCxFQUFRMnFCLFlBQVksSUFBSWUsRUFDakM1YyxnQkFBaUJ2bkIsRUFBUzJZLFNBQzFCOHJCLGFBQWNKLEVBQU14ekUsR0FDcEI2ekUsY0FBZUosRUFDZkssU0FBWTNrQyxFQUFTMFksVUFDckIzOUQsR0FBYyxJQUFSaTBELEdBQStCLGdCQUFYbitDLEdBQ3pCbXZDLEVBQVMyWSxTQUFVLElBQUs5bkQsRUFDeEIsT0FFRHdFLEtBQU02dUUsR0FDTi83QixTQUFVM0Y7QUFFWm10QixHQUNDdHFELEdBQU9takQsT0FBUTMzRCxHQUFTMnpFLEdBR3pCRixNQVdKLEtBS0NGLEVBQVczd0UsRUFBRXMrRCxHQUFNMzhELEtBQUtqa0IsRUFBU3kxQyxlQUFlaFgsS0FBSyxVQUV0RCxNQUFPNzJCLElBRVB3ckYsRUFBUTl3RSxFQUFFcytELEdBQU02UyxRQUFTdmMsR0FFcEIrYixHQUNKM3dFLEVBQUVzK0QsR0FBTTM4RCxLQUFNLGdCQUFnQmd2RSxFQUFTLEtBQU1sNEMsWUFVakR6NEIsRUFBRTlpQixPQUFRbTdELEdBQVVnSCxJQUFJNTBELEtBQUs2MEQsUUFHNUIsU0FBV2o2RCxFQUFHa25ELEdBRWIsR0FBSXVNLEdBQVV2TSxFQUFTK0wsVUFBVVMsUUFDakMsT0FBT3VuQixJQUFXajdFLEVBQUd5ekQsR0FBWSxNQUFNQSxFQUFVLE1BSWxELFNBQVd6ekQsRUFBR2tuRCxHQUtiLEdBQUtsbkQsS0FBT0EsWUFBYXVRLFVBQWFrcUUsR0FBZTdnRixLQUFLb0csS0FBUTA2RSxHQUFhOWdGLEtBQUtvRyxJQUNuRixNQUFPLEtBRVIsSUFBSStyRixHQUFTeDdFLEtBQUsrSyxNQUFNdGIsRUFDeEIsT0FBbUIsUUFBWCtyRixJQUFvQmpzRCxNQUFNaXNELElBQVlwUixHQUFPMzZFLEdBQUssT0FBUyxNQUlwRSxTQUFXQSxFQUFHa25ELEdBRWIsR0FBSXVNLEdBQVV2TSxFQUFTK0wsVUFBVVMsUUFDakMsT0FBT3VuQixJQUFXajdFLEVBQUd5ekQsR0FBUyxHQUFTLFVBQVVBLEVBQVUsTUFJNUQsU0FBV3p6RCxFQUFHa25ELEdBRWIsR0FBSXVNLEdBQVV2TSxFQUFTK0wsVUFBVVMsUUFDakMsT0FBTzJuQixJQUFjcjdFLEVBQUd5ekQsR0FBWSxXQUFXQSxFQUFVLE1BSTFELFNBQVd6ekQsRUFBR2tuRCxHQUViLEdBQUl1TSxHQUFVdk0sRUFBUytMLFVBQVVTLFFBQ2pDLE9BQU8ybkIsSUFBY3I3RSxFQUFHeXpELEdBQVMsR0FBUyxlQUFlQSxFQUFVLE1BSXBFLFNBQVd6ekQsRUFBR2tuRCxHQUViLE1BQU95ekIsSUFBUTM2RSxJQUFxQixnQkFBTkEsSUFBcUMsS0FBbkJBLEVBQUUzRyxRQUFRLEtBQ3pELE9BQVMsUUFjWnNoQixFQUFFOWlCLE9BQVFtN0QsR0FBVWdILElBQUk1MEQsS0FBS3dqRSxRQUM1QnJzRCxLQUFNLFNBQVd1YSxHQUNoQixNQUFPNmpELElBQU83akQsR0FDYkEsRUFDZ0IsZ0JBQVRBLEdBQ05BLEVBQ0V2OUIsUUFBU2loRixHQUFlLEtBQ3hCamhGLFFBQVN1Z0YsR0FBVSxJQUNyQixJQUdIa1MsT0FBUSxTQUFXbDFELEdBQ2xCLE1BQU82akQsSUFBTzdqRCxHQUNiQSxFQUNnQixnQkFBVEEsR0FDTkEsRUFBS3Y5QixRQUFTaWhGLEdBQWUsS0FDN0IxakQsSUFNSixJQUFJNGlELElBQW1CLFNBQVcxNUUsRUFBR3k1RSxFQUFjd1MsRUFBS0MsR0FDdkQsTUFBVyxLQUFObHNGLEdBQWFBLEdBQVcsTUFBTkEsR0FPbEJ5NUUsSUFDSno1RSxFQUFJKzZFLEdBQWUvNkUsRUFBR3k1RSxJQUdsQno1RSxFQUFFekcsVUFDRDB5RixJQUNKanNGLEVBQUlBLEVBQUV6RyxRQUFTMHlGLEVBQUssS0FHaEJDLElBQ0psc0YsRUFBSUEsRUFBRXpHLFFBQVMyeUYsRUFBSyxNQUlYLEVBQUpsc0YsS0FwQkV5RSxFQUFBQSxHQTBqQlYsT0ExZkFrVyxHQUFFOWlCLE9BQVFtaUYsR0FBSzUwRSxLQUFLdWpFLE9BRW5Cd2pCLFdBQVksU0FBV25zRixHQUN0QixNQUFPdVEsTUFBSytLLE1BQU90YixJQUFPLEdBSTNCb3NGLFdBQVksU0FBV3QwRixHQUN0QixNQUFPNmlGLElBQU83aUYsR0FDYixHQUNBQSxFQUFFeUIsUUFDRHpCLEVBQUV5QixRQUFTLFNBQVUsSUFBS2dJLGNBQzFCekosRUFBRSxJQUlMdTBGLGFBQWMsU0FBV3YwRixHQUd4QixNQUFPNmlGLElBQU83aUYsR0FDYixHQUNhLGdCQUFOQSxHQUNOQSxFQUFFeUosY0FDQXpKLEVBQUVILFNBRUhHLEVBQUVILFdBREYsSUFNSjIwRixhQUFjLFNBQVcvcEYsRUFBR3hCLEdBQzNCLE1BQWFBLEdBQUp3QixFQUFTLEdBQU9BLEVBQUl4QixFQUFLLEVBQUksR0FHdkN3ckYsY0FBZSxTQUFXaHFGLEVBQUd4QixHQUM1QixNQUFhQSxHQUFKd0IsRUFBUyxFQUFNQSxFQUFJeEIsRUFBSyxHQUFLLEtBTXhDNHlELEdBQWlCLElBR2pCaDVDLEVBQUU5aUIsUUFBUSxFQUFNbTdELEdBQVVnSCxJQUFJZ2YsVUFDN0J0RyxRQUNDalcsRUFBRyxTQUFXdlYsRUFBVTdlLEVBQU1zdEIsRUFBUWdLLEdBTXJDaGxELEVBQUV1c0MsRUFBUzJjLFFBQVF6dUQsR0FBSSxjQUFlLFNBQVduVixFQUFHK2dGLEVBQUt2SyxFQUFTL2QsR0FDakUsR0FBS3hSLElBQWE4NUIsRUFBbEIsQ0FJQSxHQUFJamxCLEdBQVNwRyxFQUFPTyxHQUVwQjd0QixHQUNFbnVDLFlBQ0F5N0QsRUFBT3FDLGNBQWUsSUFDdEIySCxFQUFROHFCLFNBQVUsSUFDbEI5cUIsRUFBUStxQixXQUVSNXdGLFNBQStCLE9BQXJCNCtELEVBQVNxRCxHQUNuQjRELEVBQVE4cUIsU0FBZ0MsUUFBckIveEIsRUFBU3FELEdBQzNCNEQsRUFBUStxQixVQUNSLzBCLEVBQU9xQyxtQkFLWncwQixTQUFVLFNBQVd0bEMsRUFBVTdlLEVBQU1zdEIsRUFBUWdLLEdBQzVDaGxELEVBQUUsVUFDQTdnQixTQUFVNmxFLEVBQVE4bkIsaUJBQ2xCenlFLE9BQVFxekIsRUFBS3FvQixZQUNiMTdDLE9BQVEyRixFQUFFLFdBQ1Q3Z0IsU0FBVTZsRSxFQUFRNG5CLFVBQVUsSUFBSTV4QixFQUFPdUMsbUJBRXhDN0ksU0FBVWhuQixHQUdaMXRCLEVBQUV1c0MsRUFBUzJjLFFBQVF6dUQsR0FBSSxjQUFlLFNBQVduVixFQUFHK2dGLEVBQUt2SyxFQUFTL2QsR0FDakUsR0FBS3hSLElBQWE4NUIsRUFBbEIsQ0FJQSxHQUFJamxCLEdBQVNwRyxFQUFPTyxHQUVwQjd0QixHQUNFbnVDLFlBQWF5bEUsRUFBUThxQixTQUFVLElBQUk5cUIsRUFBUStxQixXQUMzQzV3RixTQUErQixPQUFyQjQrRCxFQUFTcUQsR0FDbkI0RCxFQUFROHFCLFNBQWdDLFFBQXJCL3hCLEVBQVNxRCxHQUMzQjRELEVBQVErcUIsVUFDUi8wQixFQUFPcUMsZUFHVjN2QixFQUNFL3JCLEtBQU0sUUFBUXFqRCxFQUFRNG5CLFdBQ3RCcnRGLFlBQ0F5bEUsRUFBUWdyQixZQUFhLElBQ3JCaHJCLEVBQVFpckIsYUFBYyxJQUN0QmpyQixFQUFRcEgsU0FBVSxJQUNsQm9ILEVBQVF4SCxtQkFBb0IsSUFDNUJ3SCxFQUFRdEgscUJBRVJ2K0QsU0FBK0IsT0FBckI0K0QsRUFBU3FELEdBQ25CNEQsRUFBUWdyQixZQUFtQyxRQUFyQmp5QixFQUFTcUQsR0FDOUI0RCxFQUFRaXJCLGFBQ1JqMUIsRUFBT3VDLHlCQXdDZGxGLEdBQVV5NUIsUUFDVEMsT0FBUSxTQUFXQyxFQUFXbDVCLEVBQVNtNUIsRUFBV3h3RixFQUFReXdGLEdBQ3pELE9BQ0NoM0UsUUFBUyxTQUFXN1YsR0FDbkIsR0FBa0IsZ0JBQU5BLElBQStCLGdCQUFOQSxHQUNwQyxNQUFPQSxFQUdSLElBQUk4c0YsR0FBZSxFQUFKOXNGLEVBQVEsSUFBTSxHQUN6QitzRixFQUFNenpGLFdBQVkwRyxFQUl0QixJQUFLOC9CLE1BQU9pdEQsR0FDWCxNQUFPL3NGLEVBR1JBLEdBQUl1RSxLQUFLQyxJQUFLdW9GLEVBRWQsSUFBSUMsR0FBVWhyRixTQUFVaEMsRUFBRyxJQUN2Qml0RixFQUFZTCxFQUNmbjVCLEdBQVN6ekQsRUFBSWd0RixHQUFTRSxRQUFTTixHQUFZM3ZCLFVBQVcsR0FDdEQsRUFFRCxPQUFPNnZCLElBQVkxd0YsR0FBUSxJQUMxQjR3RixFQUFRcjFGLFdBQVc0QixRQUNsQix3QkFBeUJvekYsR0FFMUJNLEdBQ0NKLEdBQVMsT0FLZC93RSxLQUFNLFdBQ0wsT0FDQ2pHLFFBQVMsU0FBVzdWLEdBQ25CLE1BQW9CLGdCQUFOQSxHQUNiQSxFQUFFekcsUUFBUSxLQUFNLFFBQVFBLFFBQVEsS0FBTSxRQUFRQSxRQUFRLEtBQU0sVUFDNUR5RyxNQXFDTDJhLEVBQUU5aUIsT0FBUW03RCxHQUFVZ0gsSUFBSW1nQixVQUN2QkYsaUJBQWtCQSxHQUNsQnRULGFBQWNBLEVBQ2R4RSxjQUFlQSxFQUNmNEYsa0JBQW1CQSxFQUNuQkMsa0JBQW1CQSxFQUNuQnlCLGVBQWdCQSxFQUNoQmxVLGFBQWNBLEVBQ2RhLGlCQUFrQkEsRUFDbEJvQyxzQkFBdUJBLEVBQ3ZCVSx3QkFBeUJBLEVBQ3pCSSx3QkFBeUJBLEVBQ3pCRSxpQkFBa0JBLEVBQ2xCSCxjQUFlQSxFQUNmSyxlQUFnQkEsRUFDaEJTLG1CQUFvQkEsRUFDcEI3SCxnQkFBaUJBLEVBQ2pCSyxvQkFBcUJBLEVBQ3JCRyxrQkFBbUJBLEVBQ25CeUIsaUJBQWtCQSxFQUNsQm1HLFdBQVlBLEVBQ1phLFNBQVVBLEVBQ1ZHLG1CQUFvQkEsRUFDcEJFLHFCQUFzQkEsRUFDdEIxQixlQUFnQkEsRUFDaEJvQyxlQUFnQkEsRUFDaEJDLG9CQUFxQkEsRUFDckJ4RixtQkFBb0JBLEVBQ3BCUSxtQkFBb0JBLEVBQ3BCNkYsaUJBQWtCQSxFQUNsQkUsY0FBZUEsRUFDZkUsZUFBZ0JBLEVBQ2hCRyxjQUFlQSxFQUNmbEMsa0JBQW1CQSxFQUNuQkgsWUFBYUEsRUFDYitELGFBQWNBLEVBQ2RpQixZQUFhQSxFQUNiUyxRQUFTQSxFQUNUb0MsVUFBV0EsRUFDWFEsa0JBQW1CQSxFQUNuQjNELGdCQUFpQkEsRUFDakJ1RyxnQkFBaUJBLEVBQ2pCckIscUJBQXNCQSxFQUN0QjFCLGtCQUFtQkEsRUFDbkJpSSxnQkFBaUJBLEVBQ2pCRCxnQkFBaUJBLEVBQ2pCRCxVQUFXQSxFQUNYVSxzQkFBdUJBLEVBQ3ZCTSxlQUFnQkEsR0FDaEJGLGNBQWVBLEdBQ2Y5RyxtQkFBb0JBLEdBQ3BCOEgsY0FBZUEsR0FDZkksY0FBZUEsR0FDZkssY0FBZUEsR0FDZi9ELGdCQUFpQkEsR0FDakJzRSxnQkFBaUJBLEdBQ2pCcEoscUJBQXNCQSxHQUN0Qk8sdUJBQXdCQSxHQUN4QmlLLGNBQWVBLEdBQ2ZySyx5QkFBMEJBLEdBQzFCbkUscUJBQXNCQSxHQUN0Qm9FLG9CQUFxQkEsR0FDckJyTSxjQUFlQSxHQUNmcWEsbUJBQW9CQSxHQUNwQjFhLHlCQUEwQkEsR0FDMUJtUyxZQUFhQSxHQUNicUosa0JBQW1CQSxHQUNuQkksaUJBQWtCQSxHQUNsQk8sbUJBQW9CQSxHQUNwQjVHLGVBQWdCQSxHQUNoQjVGLGVBQWdCQSxHQUNoQi9FLFFBQVNBLEdBQ1QyUyxZQUFhQSxHQUNiSyxnQkFBaUJBLEdBQ2pCelcsc0JBQXVCQSxHQUN2QmlYLGtCQUFtQkEsR0FDbkJoQixZQUFhQSxHQUNieUIsYUFBY0EsR0FDZEssYUFBY0EsR0FDZEssb0JBQXFCQSxHQUNyQjdiLE9BQVFBLEdBQ1JoSixPQUFRQSxHQUNSd2pCLGNBQWVBLEdBQ2ZnQyxlQUFnQkEsR0FDaEI1ZixnQkFBaUJBLEdBQ2pCcVYsa0JBQW1CQSxHQUNuQnZPLFlBQWFBLEdBQ2IyQixjQUFlQSxHQUNmM0QsaUJBQWtCQSxFQUNsQm92QixnQkFBaUIsZUFPbEJ4eUUsRUFBRTBGLEdBQUd6RSxVQUFZbzNDLEdBR2pCQSxHQUFVcjRDLEVBQUlBLEVBR2RBLEVBQUUwRixHQUFHK3NFLGtCQUFvQnA2QixHQUFVOUwsU0FDbkN2c0MsRUFBRTBGLEdBQUdndEUsYUFBZXI2QixHQUFVZ0gsSUFJOUJyL0MsRUFBRTBGLEdBQUcyeUMsVUFBWSxTQUFXdjFCLEdBQzNCLE1BQU85aUIsR0FBRWhZLE1BQU1pWixVQUFXNmhCLEdBQU9xK0MsT0FLbENuaEUsRUFBRXlCLEtBQU00MkMsR0FBVyxTQUFXbDRDLEVBQU0wQixHQUNuQzdCLEVBQUUwRixHQUFHMnlDLFVBQVdsNEMsR0FBUzBCLElBc0tuQjdCLEVBQUUwRixHQUFHekUsWUFTWixTQUFVMk4sR0FDYSxrQkFBWHJLLFNBQXlCQSxPQUFPQyxJQUV6Q0QsUUFBUSxVQUFXcUssR0FHbkJBLEVBRjRCLGdCQUFabEssU0FFUkksUUFBUSxVQUdSSyxTQUVWLFNBQVVBLEdBSVYsR0FBSXd0RSxHQUNMLFdBR0MsR0FBSXh0RSxHQUFVQSxFQUFPTyxJQUFNUCxFQUFPTyxHQUFHa3RFLFNBQVd6dEUsRUFBT08sR0FBR2t0RSxRQUFRcHVFLElBQ2hFLEdBQUltdUUsR0FBS3h0RSxFQUFPTyxHQUFHa3RFLFFBQVFwdUUsR0FFL0IsSUFBSW11RSxFQW01S0YsT0FuNUtNLFlBQWMsSUFBS0EsSUFBT0EsRUFBR0UsVUFBVyxDQUMzQ0YsRUFBd0I3dEUsRUFBVTZ0RSxFQUE1QkEsSUFXWCxJQUFJRSxHQUFXL3RFLEVBQVNQLEdBQ3ZCLFNBQVV1dUUsR0FVUCxRQUFTQyxHQUFReHdFLEVBQUtwQyxHQUNsQixNQUFPNnlFLEdBQU8vMUYsS0FBS3NsQixFQUFLcEMsR0FXNUIsUUFBUzh5RSxHQUFVbjBGLEVBQU1vMEYsR0FDckIsR0FBSUMsR0FBV0MsRUFBYUMsRUFBVUMsRUFBVXgxQyxFQUM1Q3kxQyxFQUFRQyxFQUFjQyxFQUFPcDJGLEVBQUc2SSxFQUFHd3RGLEVBQ25DQyxFQUFZVCxHQUFZQSxFQUFTbHRGLE1BQU0sS0FDdkM4eEQsRUFBTWhwQyxFQUFPZ3BDLElBQ2I4N0IsRUFBVzk3QixHQUFPQSxFQUFJLFFBRzFCLElBQUloNUQsR0FBMkIsTUFBbkJBLEVBQUs2RyxPQUFPLEdBSXBCLEdBQUl1dEYsRUFBVSxDQWdCVixJQWZBcDBGLEVBQU9BLEVBQUtrSCxNQUFNLEtBQ2xCODNDLEVBQVloL0MsRUFBS1EsT0FBUyxFQUd0Qnd2QixFQUFPK2tFLGNBQWdCQyxFQUFlNzBGLEtBQUtILEVBQUtnL0MsTUFDaERoL0MsRUFBS2cvQyxHQUFhaC9DLEVBQUtnL0MsR0FBV2wvQyxRQUFRazFGLEVBQWdCLEtBTzlEaDFGLEVBQU82MEYsRUFBVTl0RixNQUFNLEVBQUc4dEYsRUFBVXIwRixPQUFTLEdBQUc4SSxPQUFPdEosR0FHbER6QixFQUFJLEVBQUdBLEVBQUl5QixFQUFLUSxPQUFRakMsR0FBSyxFQUU5QixHQURBcTJGLEVBQU81MEYsRUFBS3pCLEdBQ0MsTUFBVHEyRixFQUNBNTBGLEVBQUt1YSxPQUFPaGMsRUFBRyxHQUNmQSxHQUFLLE1BQ0YsSUFBYSxPQUFUcTJGLEVBQWUsQ0FDdEIsR0FBVSxJQUFOcjJGLElBQXdCLE9BQVp5QixFQUFLLElBQTJCLE9BQVpBLEVBQUssSUFPckMsS0FDT3pCLEdBQUksSUFDWHlCLEVBQUt1YSxPQUFPaGMsRUFBSSxFQUFHLEdBQ25CQSxHQUFLLEdBTWpCeUIsRUFBT0EsRUFBS2lILEtBQUssU0FDYSxLQUF2QmpILEVBQUtKLFFBQVEsUUFHcEJJLEVBQU9BLEVBQUt3akUsVUFBVSxHQUs5QixLQUFLcXhCLEdBQWFDLElBQVk5N0IsRUFBSyxDQUcvQixJQUZBcTdCLEVBQVlyMEYsRUFBS2tILE1BQU0sS0FFbEIzSSxFQUFJODFGLEVBQVU3ekYsT0FBUWpDLEVBQUksRUFBR0EsR0FBSyxFQUFHLENBR3RDLEdBRkErMUYsRUFBY0QsRUFBVXR0RixNQUFNLEVBQUd4SSxHQUFHMEksS0FBSyxLQUVyQzR0RixFQUdBLElBQUt6dEYsRUFBSXl0RixFQUFVcjBGLE9BQVE0RyxFQUFJLEVBQUdBLEdBQUssRUFLbkMsR0FKQW10RixFQUFXdjdCLEVBQUk2N0IsRUFBVTl0RixNQUFNLEVBQUdLLEdBQUdILEtBQUssTUFJdENzdEYsSUFDQUEsRUFBV0EsRUFBU0QsSUFDTixDQUVWRSxFQUFXRCxFQUNYRSxFQUFTbDJGLENBQ1QsT0FNaEIsR0FBSWkyRixFQUNBLE9BTUNFLEdBQWdCSSxHQUFXQSxFQUFRUixLQUNwQ0ksRUFBZUksRUFBUVIsR0FDdkJLLEVBQVFwMkYsSUFJWGkyRixHQUFZRSxJQUNiRixFQUFXRSxFQUNYRCxFQUFTRSxHQUdUSCxJQUNBSCxFQUFVOTVFLE9BQU8sRUFBR2s2RSxFQUFRRCxHQUM1QngwRixFQUFPcTBGLEVBQVVwdEYsS0FBSyxNQUk5QixNQUFPakgsR0FHWCxRQUFTaTFGLEdBQVlDLEVBQVNDLEdBQzFCLE1BQU8sWUFJSCxHQUFJMXNFLEdBQU8yc0UsRUFBSWozRixLQUFLaUwsVUFBVyxFQVEvQixPQUh1QixnQkFBWnFmLEdBQUssSUFBbUMsSUFBaEJBLEVBQUtqb0IsUUFDcENpb0IsRUFBSzFlLEtBQUssTUFFUHNyRixFQUFJaHNGLE1BQU0ycUYsRUFBT3ZyRSxFQUFLbmYsUUFBUTRyRixFQUFTQyxNQUl0RCxRQUFTRyxHQUFjSixHQUNuQixNQUFPLFVBQVVsMUYsR0FDYixNQUFPbTBGLEdBQVVuMEYsRUFBTWsxRixJQUkvQixRQUFTSyxHQUFTQyxHQUNkLE1BQU8sVUFBVTkyRixHQUNiKzJGLEVBQVFELEdBQVc5MkYsR0FJM0IsUUFBU2czRixHQUFRMTFGLEdBQ2IsR0FBSWkwRixFQUFRMEIsRUFBUzMxRixHQUFPLENBQ3hCLEdBQUl5b0IsR0FBT2t0RSxFQUFRMzFGLFNBQ1oyMUYsR0FBUTMxRixHQUNmNDFGLEVBQVM1MUYsSUFBUSxFQUNqQjYxRixFQUFLeHNGLE1BQU0ycUYsRUFBT3ZyRSxHQUd0QixJQUFLd3JFLEVBQVF3QixFQUFTejFGLEtBQVVpMEYsRUFBUTJCLEVBQVU1MUYsR0FDOUMsS0FBTSxJQUFJc25CLE9BQU0sTUFBUXRuQixFQUU1QixPQUFPeTFGLEdBQVF6MUYsR0FNbkIsUUFBUzgxRixHQUFZOTFGLEdBQ2pCLEdBQUkyQyxHQUNBc3JCLEVBQVFqdUIsRUFBT0EsRUFBS0osUUFBUSxLQUFPLEVBS3ZDLE9BSklxdUIsR0FBUSxLQUNSdHJCLEVBQVMzQyxFQUFLd2pFLFVBQVUsRUFBR3YxQyxHQUMzQmp1QixFQUFPQSxFQUFLd2pFLFVBQVV2MUMsRUFBUSxFQUFHanVCLEVBQUtRLFVBRWxDbUMsRUFBUTNDLEdBOENwQixRQUFTKzFGLEdBQVcvMUYsR0FDaEIsTUFBTyxZQUNILE1BQVFnd0IsSUFBVUEsRUFBT0EsUUFBVUEsRUFBT0EsT0FBT2h3QixRQTFPekQsR0FBSTYxRixHQUFNUixFQUFLVyxFQUFTeG5FLEVBQ3BCaW5FLEtBQ0FFLEtBQ0EzbEUsS0FDQTRsRSxLQUNBMUIsRUFBU2wyRixPQUFPQyxVQUFVOEssZUFDMUJxc0YsS0FBU3J1RixNQUNUaXVGLEVBQWlCLE9BMkxyQmdCLEdBQVUsU0FBVWgyRixFQUFNazFGLEdBQ3RCLEdBQUkzZixHQUNBbmtELEVBQVEwa0UsRUFBWTkxRixHQUNwQjJDLEVBQVN5dUIsRUFBTSxFQTJCbkIsT0F6QkFweEIsR0FBT294QixFQUFNLEdBRVR6dUIsSUFDQUEsRUFBU3d4RixFQUFVeHhGLEVBQVF1eUYsR0FDM0IzZixFQUFTbWdCLEVBQVEveUYsSUFJakJBLEVBRUkzQyxFQURBdTFFLEdBQVVBLEVBQU80ZSxVQUNWNWUsRUFBTzRlLFVBQVVuMEYsRUFBTXMxRixFQUFjSixJQUVyQ2YsRUFBVW4wRixFQUFNazFGLElBRzNCbDFGLEVBQU9tMEYsRUFBVW4wRixFQUFNazFGLEdBQ3ZCOWpFLEVBQVEwa0UsRUFBWTkxRixHQUNwQjJDLEVBQVN5dUIsRUFBTSxHQUNmcHhCLEVBQU9veEIsRUFBTSxHQUNUenVCLElBQ0E0eUUsRUFBU21nQixFQUFRL3lGLE1BTXJCK0QsRUFBRy9ELEVBQVNBLEVBQVMsSUFBTTNDLEVBQU9BLEVBQ2xDZ0gsRUFBR2hILEVBQ0hpMkYsR0FBSXR6RixFQUNKb0YsRUFBR3d0RSxJQVVYL21ELEdBQ0l4SSxRQUFTLFNBQVVobUIsR0FDZixNQUFPaTFGLEdBQVlqMUYsSUFFdkI0bEIsUUFBUyxTQUFVNWxCLEdBQ2YsR0FBSXdHLEdBQUlpdkYsRUFBUXoxRixFQUNoQixPQUFpQixtQkFBTndHLEdBQ0FBLEVBRUNpdkYsRUFBUXoxRixPQUd4QjJsQixPQUFRLFNBQVUzbEIsR0FDZCxPQUNJd0ksR0FBSXhJLEVBQ0prMkYsSUFBSyxHQUNMdHdFLFFBQVM2dkUsRUFBUXoxRixHQUNqQmd3QixPQUFRK2xFLEVBQVcvMUYsTUFLL0I2MUYsRUFBTyxTQUFVNzFGLEVBQU1tMkYsRUFBTTFwRixFQUFVeW9GLEdBQ25DLEdBQUlrQixHQUFXWixFQUFTeG5CLEVBQUtoVixFQUFLejZELEVBRzlCODNGLEVBRkE1dEUsS0FDQTZ0RSxRQUFzQjdwRixFQU8xQixJQUhBeW9GLEVBQVVBLEdBQVdsMUYsRUFHQSxjQUFqQnMyRixHQUFpRCxhQUFqQkEsRUFBNkIsQ0FLN0QsSUFEQUgsR0FBUUEsRUFBSzMxRixRQUFVaU0sRUFBU2pNLFFBQVUsVUFBVyxVQUFXLFVBQVkyMUYsRUFDdkU1M0YsRUFBSSxFQUFHQSxFQUFJNDNGLEVBQUszMUYsT0FBUWpDLEdBQUssRUFLOUIsR0FKQXk2RCxFQUFNZzlCLEVBQVFHLEVBQUs1M0YsR0FBSTIyRixHQUN2Qk0sRUFBVXg4QixFQUFJdHlELEVBR0UsWUFBWjh1RixFQUNBL3NFLEVBQUtscUIsR0FBS2l3QixFQUFTeEksUUFBUWhtQixPQUN4QixJQUFnQixZQUFadzFGLEVBRVAvc0UsRUFBS2xxQixHQUFLaXdCLEVBQVM1SSxRQUFRNWxCLEdBQzNCcTJGLEdBQWUsTUFDWixJQUFnQixXQUFaYixFQUVQWSxFQUFZM3RFLEVBQUtscUIsR0FBS2l3QixFQUFTN0ksT0FBTzNsQixPQUNuQyxJQUFJaTBGLEVBQVF3QixFQUFTRCxJQUNqQnZCLEVBQVEwQixFQUFTSCxJQUNqQnZCLEVBQVEyQixFQUFVSixHQUN6Qi9zRSxFQUFLbHFCLEdBQUttM0YsRUFBUUYsT0FDZixDQUFBLElBQUl4OEIsRUFBSWp4RCxFQUlYLEtBQU0sSUFBSXVmLE9BQU10bkIsRUFBTyxZQUFjdzFGLEVBSHJDeDhCLEdBQUlqeEQsRUFBRXdWLEtBQUt5N0MsRUFBSWh5RCxFQUFHaXVGLEVBQVlDLEdBQVMsR0FBT0ssRUFBU0MsT0FDdkQvc0UsRUFBS2xxQixHQUFLazNGLEVBQVFELEdBTTFCeG5CLEVBQU12aEUsRUFBV0EsRUFBU3BELE1BQU1vc0YsRUFBUXoxRixHQUFPeW9CLEdBQVF4b0IsT0FFbkRELElBSUlvMkYsR0FBYUEsRUFBVXh3RSxVQUFZb3VFLEdBQy9Cb0MsRUFBVXh3RSxVQUFZNnZFLEVBQVF6MUYsR0FDbEN5MUYsRUFBUXoxRixHQUFRbzJGLEVBQVV4d0UsUUFDbkJvb0QsSUFBUWdtQixHQUFVcUMsSUFFekJaLEVBQVF6MUYsR0FBUWd1RSxRQUdqQmh1RSxLQUdQeTFGLEVBQVF6MUYsR0FBUXlNLElBSXhCc25GLEVBQVkvdEUsRUFBVXF2RSxFQUFNLFNBQVVjLEVBQU0xcEYsRUFBVXlvRixFQUFTQyxFQUFXb0IsR0FDdEUsR0FBb0IsZ0JBQVRKLEdBQ1AsTUFBSTNuRSxHQUFTMm5FLEdBRUYzbkUsRUFBUzJuRSxHQUFNMXBGLEdBTW5CaXBGLEVBQVFNLEVBQVFHLEVBQU0xcEYsR0FBVS9GLEVBQ3BDLEtBQUt5dkYsRUFBSzU3RSxPQUFRLENBTXJCLEdBSkF5VixFQUFTbW1FLEVBQ0xubUUsRUFBT21tRSxNQUNQZCxFQUFJcmxFLEVBQU9tbUUsS0FBTW5tRSxFQUFPdmpCLFdBRXZCQSxFQUNELE1BR0FBLEdBQVM4TixRQUdUNDdFLEVBQU8xcEYsRUFDUEEsRUFBV3lvRixFQUNYQSxFQUFVLE1BRVZpQixFQUFPbkMsRUE2QmYsTUF4QkF2bkYsR0FBV0EsR0FBWSxhQUlBLGtCQUFaeW9GLEtBQ1BBLEVBQVVDLEVBQ1ZBLEVBQVlvQixHQUlacEIsRUFDQVUsRUFBSzdCLEVBQU9tQyxFQUFNMXBGLEVBQVV5b0YsR0FRNUJ2b0YsV0FBVyxXQUNQa3BGLEVBQUs3QixFQUFPbUMsRUFBTTFwRixFQUFVeW9GLElBQzdCLEdBR0FHLEdBT1hBLEVBQUlybEUsT0FBUyxTQUFVd21FLEdBQ25CLE1BQU9uQixHQUFJbUIsSUFNZnpDLEVBQVUwQyxTQUFXaEIsRUFFckJod0UsRUFBUyxTQUFVemxCLEVBQU1tMkYsRUFBTTFwRixHQUMzQixHQUFvQixnQkFBVHpNLEdBQ1AsS0FBTSxJQUFJc25CLE9BQU0sNERBSWY2dUUsR0FBSzU3RSxTQUlOOU4sRUFBVzBwRixFQUNYQSxNQUdDbEMsRUFBUXdCLEVBQVN6MUYsSUFBVWkwRixFQUFRMEIsRUFBUzMxRixLQUM3QzIxRixFQUFRMzFGLElBQVNBLEVBQU1tMkYsRUFBTTFwRixLQUlyQ2daLEVBQU9DLEtBQ0hXLFFBQVEsTUFJaEJ3dEUsRUFBR0UsVUFBWUEsRUFBVUYsRUFBRzd0RSxRQUFVQSxFQUFRNnRFLEVBQUdwdUUsT0FBU0EsTUFHMURvdUUsRUFBR3B1RSxPQUFPLFNBQVUsY0FHcEJvdUUsRUFBR3B1RSxPQUFPLFlBQVksV0FDcEIsR0FBSWl4RSxHQUFLcndFLEdBQVVuRixDQVVuQixPQVJVLE9BQU53MUUsR0FBY3owRSxTQUFXQSxRQUFRdWlCLE9BQ25DdmlCLFFBQVF1aUIsTUFDTix5SkFNR2t5RCxJQUdUN0MsRUFBR3B1RSxPQUFPLGlCQUNSLFVBQ0MsU0FBVXZFLEdBdUJYLFFBQVN5MUUsR0FBWUMsR0FDbkIsR0FBSXp4RCxHQUFReXhELEVBQVMzNEYsVUFFakI0NEYsSUFFSixLQUFLLEdBQUl6ckQsS0FBY2pHLEdBQU8sQ0FDNUIsR0FBSXQ5QixHQUFJczlCLEVBQU1pRyxFQUVHLG1CQUFOdmpDLElBSVEsZ0JBQWZ1akMsR0FJSnlyRCxFQUFROXNGLEtBQUtxaEMsR0FHZixNQUFPeXJELEdBekNULEdBQUlDLEtBRUpBLEdBQU1DLE9BQVMsU0FBVUMsRUFBWUMsR0FHbkMsUUFBU0MsS0FDUGh1RixLQUFLRixZQUFjZ3VGLEVBSHJCLEdBQUlHLE1BQWVwdUYsY0FNbkIsS0FBSyxHQUFJd2UsS0FBTzB2RSxHQUNWRSxFQUFVaDVGLEtBQUs4NEYsRUFBWTF2RSxLQUM3Qnl2RSxFQUFXenZFLEdBQU8wdkUsRUFBVzF2RSxHQVFqQyxPQUpBMnZFLEdBQWdCajVGLFVBQVlnNUYsRUFBV2g1RixVQUN2Qys0RixFQUFXLzRGLFVBQVksR0FBSWk1RixHQUMzQkYsRUFBV0ksVUFBWUgsRUFBV2g1RixVQUUzQis0RixHQXlCVEYsRUFBTU8sU0FBVyxTQUFVSixFQUFZSyxHQUlyQyxRQUFTQyxLQUNQLEdBQUk5aUMsR0FBVTlwRCxNQUFNMU0sVUFBVXcyRCxRQUUxQitpQyxFQUFXRixFQUFlcjVGLFVBQVUrSyxZQUFZeEksT0FFaERpM0YsRUFBb0JSLEVBQVdoNUYsVUFBVStLLFdBRXpDd3VGLEdBQVcsSUFDYi9pQyxFQUFRdDJELEtBQUtpTCxVQUFXNnRGLEVBQVdoNUYsVUFBVStLLGFBRTdDeXVGLEVBQW9CSCxFQUFlcjVGLFVBQVUrSyxhQUcvQ3l1RixFQUFrQnB1RixNQUFNSCxLQUFNRSxXQUtoQyxRQUFTc3VGLEtBQ1B4dUYsS0FBS0YsWUFBY3V1RixFQXRCckIsR0FBSUksR0FBbUJoQixFQUFXVyxHQUM5Qk0sRUFBZWpCLEVBQVdNLEVBa0I5QkssR0FBZU8sWUFBY1osRUFBV1ksWUFNeENOLEVBQWV0NUYsVUFBWSxHQUFJeTVGLEVBRS9CLEtBQUssR0FBSTd2RixHQUFJLEVBQUdBLEVBQUkrdkYsRUFBYXAzRixPQUFRcUgsSUFBSyxDQUMxQyxHQUFJaXdGLEdBQWNGLEVBQWEvdkYsRUFFL0IwdkYsR0FBZXQ1RixVQUFVNjVGLEdBQ3ZCYixFQUFXaDVGLFVBQVU2NUYsR0FzQjNCLElBQUssR0FuQkRDLElBQWUsU0FBVTNzRCxHQUUzQixHQUFJNHNELEdBQWlCLFlBRWpCNXNELEtBQWNtc0QsR0FBZXQ1RixZQUMvQis1RixFQUFpQlQsRUFBZXQ1RixVQUFVbXRDLEdBRzVDLElBQUk2c0QsR0FBa0JYLEVBQWVyNUYsVUFBVW10QyxFQUUvQyxPQUFPLFlBQ0wsR0FBSXFwQixHQUFVOXBELE1BQU0xTSxVQUFVdzJELE9BSTlCLE9BRkFBLEdBQVF0MkQsS0FBS2lMLFVBQVc0dUYsR0FFakJDLEVBQWdCNXVGLE1BQU1ILEtBQU1FLGNBSTlCN0MsRUFBSSxFQUFHQSxFQUFJb3hGLEVBQWlCbjNGLE9BQVErRixJQUFLLENBQ2hELEdBQUkweEYsR0FBa0JOLEVBQWlCcHhGLEVBRXZDZ3hGLEdBQWV0NUYsVUFBVWc2RixHQUFtQkYsRUFBYUUsR0FHM0QsTUFBT1YsR0FHVCxJQUFJVyxHQUFhLFdBQ2ZodkYsS0FBS3dsQixhQXFKUCxPQWxKQXdwRSxHQUFXajZGLFVBQVUwZCxHQUFLLFNBQVUwRCxFQUFPNVMsR0FDekN2RCxLQUFLd2xCLFVBQVl4bEIsS0FBS3dsQixjQUVsQnJQLElBQVNuVyxNQUFLd2xCLFVBQ2hCeGxCLEtBQUt3bEIsVUFBVXJQLEdBQU90VixLQUFLMEMsR0FFM0J2RCxLQUFLd2xCLFVBQVVyUCxJQUFVNVMsSUFJN0J5ckYsRUFBV2o2RixVQUFVdWtCLFFBQVUsU0FBVW5ELEdBQ3ZDLEdBQUl0WSxHQUFRNEQsTUFBTTFNLFVBQVU4SSxLQUU1Qm1DLE1BQUt3bEIsVUFBWXhsQixLQUFLd2xCLGNBRWxCclAsSUFBU25XLE1BQUt3bEIsV0FDaEJ4bEIsS0FBS2l2RixPQUFPanZGLEtBQUt3bEIsVUFBVXJQLEdBQVF0WSxFQUFNNUksS0FBS2lMLFVBQVcsSUFHdkQsS0FBT0YsTUFBS3dsQixXQUNkeGxCLEtBQUtpdkYsT0FBT2p2RixLQUFLd2xCLFVBQVUsS0FBTXRsQixZQUlyQzh1RixFQUFXajZGLFVBQVVrNkYsT0FBUyxTQUFVenBFLEVBQVcwcEUsR0FDakQsSUFBSyxHQUFJNzVGLEdBQUksRUFBRzRsQyxFQUFNelYsRUFBVWx1QixPQUFZMmpDLEVBQUo1bEMsRUFBU0EsSUFDL0Ntd0IsRUFBVW53QixHQUFHOEssTUFBTUgsS0FBTWt2RixJQUk3QnRCLEVBQU1vQixXQUFhQSxFQUVuQnBCLEVBQU11QixjQUFnQixTQUFVNzNGLEdBRzlCLElBQUssR0FGRDgzRixHQUFRLEdBRUgvNUYsRUFBSSxFQUFPaUMsRUFBSmpDLEVBQVlBLElBQUssQ0FDL0IsR0FBSWc2RixHQUFhenRGLEtBQUt5a0MsTUFBc0IsR0FBaEJ6a0MsS0FBS2dqRCxTQUNqQ3dxQyxJQUFTQyxFQUFXcjZGLFNBQVMsSUFHL0IsTUFBT282RixJQUdUeEIsRUFBTW53RixLQUFPLFNBQVVzVCxFQUFNaU8sR0FDM0IsTUFBTyxZQUNMak8sRUFBSzVRLE1BQU02ZSxFQUFTOWUsYUFJeEIwdEYsRUFBTTBCLGFBQWUsU0FBVW43RCxHQUM3QixJQUFLLEdBQUlvN0QsS0FBZXA3RCxHQUFNLENBQzVCLEdBQUkxWixHQUFPODBFLEVBQVl2eEYsTUFBTSxLQUV6Qnd4RixFQUFZcjdELENBRWhCLElBQW9CLElBQWhCMVosRUFBS25qQixPQUFULENBSUEsSUFBSyxHQUFJNkgsR0FBSSxFQUFHQSxFQUFJc2IsRUFBS25qQixPQUFRNkgsSUFBSyxDQUNwQyxHQUFJa2YsR0FBTTVELEVBQUt0YixFQUlma2YsR0FBTUEsRUFBSWk4QyxVQUFVLEVBQUcsR0FBRzE3RCxjQUFnQnlmLEVBQUlpOEMsVUFBVSxHQUVsRGo4QyxJQUFPbXhFLEtBQ1hBLEVBQVVueEUsT0FHUmxmLEdBQUtzYixFQUFLbmpCLE9BQVMsSUFDckJrNEYsRUFBVW54RSxHQUFPOFYsRUFBS283RCxJQUd4QkMsRUFBWUEsRUFBVW54RSxTQUdqQjhWLEdBQUtvN0QsSUFHZCxNQUFPcDdELElBR1R5NUQsRUFBTTZCLFVBQVksU0FBVTFxRSxFQUFPdGUsR0FPakMsR0FBSWxOLEdBQU15ZSxFQUFFdlIsR0FDUmlwRixFQUFZanBGLEVBQUdoSSxNQUFNaXhGLFVBQ3JCQyxFQUFZbHBGLEVBQUdoSSxNQUFNa3hGLFNBR3pCLE9BQUlELEtBQWNDLEdBQ0MsV0FBZEEsR0FBd0MsWUFBZEEsRUFJYixXQUFkRCxHQUF3QyxXQUFkQyxHQUNyQixFQUdEcDJGLEVBQUkrbUIsY0FBZ0I3WixFQUFHZ3FFLGNBQzdCbDNFLEVBQUl3bkIsYUFBZXRhLEVBQUdtcEYsYUFSZixHQVdYaEMsRUFBTWlDLGFBQWUsU0FBVUMsR0FDN0IsR0FBSUMsSUFDRkMsS0FBTSxRQUNOQyxJQUFLLFFBQ0xDLElBQUssT0FDTEMsSUFBSyxPQUNMQyxJQUFLLFNBQ0xDLElBQU0sUUFDTkMsSUFBSyxRQUlQLE9BQXNCLGdCQUFYUixHQUNGQSxFQUdGaDVFLE9BQU9nNUUsR0FBUWw1RixRQUFRLGVBQWdCLFNBQVVzcEMsR0FDdEQsTUFBTzZ2RCxHQUFXN3ZELE1BS3RCMHRELEVBQU0yQyxXQUFhLFNBQVU1cEQsRUFBVTZwRCxHQUdyQyxHQUFpQyxRQUE3Qng0RSxFQUFFMEYsR0FBRyt5RSxPQUFPdHVCLE9BQU8sRUFBRyxHQUFjLENBQ3RDLEdBQUl1dUIsR0FBVzE0RSxHQUVmQSxHQUFFODNDLElBQUkwZ0MsRUFBUSxTQUFVNW1FLEdBQ3RCOG1FLEVBQVdBLEVBQVM1N0UsSUFBSThVLEtBRzFCNG1FLEVBQVNFLEVBR1gvcEQsRUFBU3QwQixPQUFPbStFLElBR1g1QyxJQUdUakQsRUFBR3B1RSxPQUFPLG1CQUNSLFNBQ0EsV0FDQyxTQUFVdkUsRUFBRzQxRSxHQUNkLFFBQVMrQyxHQUFTaHFELEVBQVVoeUMsRUFBU2k4RixHQUNuQzV3RixLQUFLMm1DLFNBQVdBLEVBQ2hCM21DLEtBQUttMEIsS0FBT3k4RCxFQUNaNXdGLEtBQUtyTCxRQUFVQSxFQUVmZzhGLEVBQVF6QyxVQUFVcHVGLFlBQVk3SyxLQUFLK0ssTUF5ZnJDLE1BdGZBNHRGLEdBQU1DLE9BQU84QyxFQUFTL0MsRUFBTW9CLFlBRTVCMkIsRUFBUTU3RixVQUFVKzBGLE9BQVMsV0FDekIsR0FBSStHLEdBQVc3NEUsRUFDYix5REFTRixPQU5JaFksTUFBS3JMLFFBQVFnaUIsSUFBSSxhQUNuQms2RSxFQUFTLzJFLEtBQUssdUJBQXdCLFFBR3hDOVosS0FBSzZ3RixTQUFXQSxFQUVUQSxHQUdURixFQUFRNTdGLFVBQVU2aUQsTUFBUSxXQUN4QjUzQyxLQUFLNndGLFNBQVMxSCxTQUdoQndILEVBQVE1N0YsVUFBVSs3RixlQUFpQixTQUFVNUIsR0FDM0MsR0FBSVcsR0FBZTd2RixLQUFLckwsUUFBUWdpQixJQUFJLGVBRXBDM1csTUFBSzQzQyxRQUNMNTNDLEtBQUsrd0YsYUFFTCxJQUFJQyxHQUFXaDVFLEVBQ2IsbUZBSUVxakIsRUFBVXI3QixLQUFLckwsUUFBUWdpQixJQUFJLGdCQUFnQkEsSUFBSXU0RSxFQUFPN3pELFFBRTFEMjFELEdBQVMzK0UsT0FDUHc5RSxFQUNFeDBELEVBQVE2ekQsRUFBTzN2RSxRQUluQnl4RSxFQUFTLEdBQUc5NUYsV0FBYSw0QkFFekI4SSxLQUFLNndGLFNBQVN4K0UsT0FBTzIrRSxJQUd2QkwsRUFBUTU3RixVQUFVazhGLGFBQWUsV0FDL0JqeEYsS0FBSzZ3RixTQUFTbDNFLEtBQUssNkJBQTZCOUQsVUFHbEQ4NkUsRUFBUTU3RixVQUFVc2QsT0FBUyxTQUFVOGhCLEdBQ25DbjBCLEtBQUsrd0YsYUFFTCxJQUFJRyxLQUVKLElBQW9CLE1BQWhCLzhELEVBQUtqSyxTQUEyQyxJQUF4QmlLLEVBQUtqSyxRQUFRNXlCLE9BT3ZDLFlBTndDLElBQXBDMEksS0FBSzZ3RixTQUFTdnJGLFdBQVdoTyxRQUMzQjBJLEtBQUtzWixRQUFRLG1CQUNYK2hCLFFBQVMsY0FPZmxILEdBQUtqSyxRQUFVbHFCLEtBQUs4a0IsS0FBS3FQLEVBQUtqSyxRQUU5QixLQUFLLEdBQUk3c0IsR0FBSSxFQUFHQSxFQUFJODJCLEVBQUtqSyxRQUFRNXlCLE9BQVErRixJQUFLLENBQzVDLEdBQUl5MkIsR0FBT0ssRUFBS2pLLFFBQVE3c0IsR0FFcEI4ekYsRUFBVW54RixLQUFLMEMsT0FBT294QixFQUUxQm85RCxHQUFTcndGLEtBQUtzd0YsR0FHaEJueEYsS0FBSzZ3RixTQUFTeCtFLE9BQU82K0UsSUFHdkJQLEVBQVE1N0YsVUFBVXNaLFNBQVcsU0FBVXdpRixFQUFVTyxHQUMvQyxHQUFJQyxHQUFvQkQsRUFBVXozRSxLQUFLLG1CQUN2QzAzRSxHQUFrQmgvRSxPQUFPdytFLElBRzNCRixFQUFRNTdGLFVBQVUrdkIsS0FBTyxTQUFVcVAsR0FDakMsR0FBSTZ3QixHQUFTaGxELEtBQUtyTCxRQUFRZ2lCLElBQUksU0FFOUIsT0FBT3F1QyxHQUFPN3dCLElBR2hCdzhELEVBQVE1N0YsVUFBVXU4RixXQUFhLFdBQzdCLEdBQUlsdkYsR0FBT3BDLElBRVhBLE1BQUttMEIsS0FBSzNyQixRQUFRLFNBQVUrb0YsR0FDMUIsR0FBSUMsR0FBY3g1RSxFQUFFODNDLElBQUl5aEMsRUFBVSxTQUFVejFFLEdBQzFDLE1BQU9BLEdBQUV4YyxHQUFHdEssYUFHVms4RixFQUFXOXVGLEVBQUt5dUYsU0FDakJsM0UsS0FBSywwQ0FFUnUzRSxHQUFTejNFLEtBQUssV0FDWixHQUFJMDNFLEdBQVVuNUUsRUFBRWhZLE1BRVo4ekIsRUFBTzliLEVBQUVtYyxLQUFLbjBCLEtBQU0sUUFHcEJWLEVBQUssR0FBS3cwQixFQUFLeDBCLEVBRUUsT0FBaEJ3MEIsRUFBS3AvQixTQUFtQm8vQixFQUFLcC9CLFFBQVE2OEYsVUFDckIsTUFBaEJ6OUQsRUFBS3AvQixTQUFtQnNqQixFQUFFZ04sUUFBUTFsQixFQUFJa3lGLEdBQWUsR0FDeERMLEVBQVFyM0UsS0FBSyxnQkFBaUIsUUFFOUJxM0UsRUFBUXIzRSxLQUFLLGdCQUFpQixVQUlsQyxJQUFJMjNFLEdBQVlQLEVBQVNqZ0UsT0FBTyx1QkFHNUJ3Z0UsR0FBVW42RixPQUFTLEVBRXJCbTZGLEVBQVV2c0UsUUFBUTVMLFFBQVEsY0FJMUI0M0UsRUFBU2hzRSxRQUFRNUwsUUFBUSxpQkFLL0JxM0UsRUFBUTU3RixVQUFVMjhGLFlBQWMsU0FBVXhDLEdBQ3hDbHZGLEtBQUsrd0YsYUFFTCxJQUFJWSxHQUFjM3hGLEtBQUtyTCxRQUFRZ2lCLElBQUksZ0JBQWdCQSxJQUFJLGFBRW5EaTdFLEdBQ0YvN0MsVUFBVSxFQUNWKzdDLFNBQVMsRUFDVHo0RSxLQUFNdzRFLEVBQVl6QyxJQUVoQjJDLEVBQVc3eEYsS0FBSzBDLE9BQU9rdkYsRUFDM0JDLEdBQVMzNkYsV0FBYSxtQkFFdEI4SSxLQUFLNndGLFNBQVNoNEMsUUFBUWc1QyxJQUd4QmxCLEVBQVE1N0YsVUFBVWc4RixZQUFjLFdBQzlCL3dGLEtBQUs2d0YsU0FBU2wzRSxLQUFLLG9CQUFvQjlELFVBR3pDODZFLEVBQVE1N0YsVUFBVTJOLE9BQVMsU0FBVXl4QixHQUNuQyxHQUFJenhCLEdBQVNoTixTQUFTOEksY0FBYyxLQUNwQ2tFLEdBQU94TCxVQUFZLHlCQUVuQixJQUFJNDZGLElBQ0ZDLEtBQVEsV0FDUkMsZ0JBQWlCLFFBR2Y3OUQsR0FBSzBoQixpQkFDQWk4QyxHQUFNLGlCQUNiQSxFQUFNLGlCQUFtQixRQUdaLE1BQVgzOUQsRUFBSzcwQixVQUNBd3lGLEdBQU0saUJBR08sTUFBbEIzOUQsRUFBSzg5RCxZQUNQdnZGLEVBQU9wRCxHQUFLNjBCLEVBQUs4OUQsV0FHZjk5RCxFQUFLKzlELFFBQ1B4dkYsRUFBT3d2RixNQUFRLzlELEVBQUsrOUQsT0FHbEIvOUQsRUFBSzd1QixXQUNQd3NGLEVBQU1DLEtBQU8sUUFDYkQsRUFBTSxjQUFnQjM5RCxFQUFLaGIsV0FDcEIyNEUsR0FBTSxpQkFHZixLQUFLLEdBQUloNEUsS0FBUWc0RSxHQUFPLENBQ3RCLEdBQUlqNEUsR0FBTWk0RSxFQUFNaDRFLEVBRWhCcFgsR0FBTzVJLGFBQWFnZ0IsRUFBTUQsR0FHNUIsR0FBSXNhLEVBQUs3dUIsU0FBVSxDQUNqQixHQUFJNnJGLEdBQVVuNUUsRUFBRXRWLEdBRVp5cEQsRUFBUXoyRCxTQUFTOEksY0FBYyxTQUNuQzJ0RCxHQUFNajFELFVBQVksd0JBRUw4Z0IsR0FBRW0wQyxFQUNmbnNELE1BQUtteUYsU0FBU2grRCxFQUFNZzRCLEVBSXBCLEtBQUssR0FGRGltQyxNQUVLcjFGLEVBQUksRUFBR0EsRUFBSW8zQixFQUFLN3VCLFNBQVNoTyxPQUFReUYsSUFBSyxDQUM3QyxHQUFJOHJCLEdBQVFzTCxFQUFLN3VCLFNBQVN2SSxHQUV0QnMxRixFQUFTcnlGLEtBQUswQyxPQUFPbW1CLEVBRXpCdXBFLEdBQVV2eEYsS0FBS3d4RixHQUdqQixHQUFJQyxHQUFxQnQ2RSxFQUFFLGFBQ3pCaW9ELFFBQVMsNkRBR1hxeUIsR0FBbUJqZ0YsT0FBTysvRSxHQUUxQmpCLEVBQVE5K0UsT0FBTzg1QyxHQUNmZ2xDLEVBQVE5K0UsT0FBT2lnRixPQUVmdHlGLE1BQUtteUYsU0FBU2grRCxFQUFNenhCLEVBS3RCLE9BRkFzVixHQUFFbWMsS0FBS3p4QixFQUFRLE9BQVF5eEIsR0FFaEJ6eEIsR0FHVGl1RixFQUFRNTdGLFVBQVUwSSxLQUFPLFNBQVVzcEQsRUFBV2prRCxHQUM1QyxHQUFJVixHQUFPcEMsS0FFUFYsRUFBS3luRCxFQUFVem5ELEdBQUssVUFFeEJVLE1BQUs2d0YsU0FBUy8yRSxLQUFLLEtBQU14YSxHQUV6QnluRCxFQUFVdDBDLEdBQUcsY0FBZSxTQUFVeThFLEdBQ3BDOXNGLEVBQUt3MUMsUUFDTHgxQyxFQUFLaVEsT0FBTzY4RSxFQUFPLzZELE1BRWY0eUIsRUFBVXdyQyxVQUNabndGLEVBQUtrdkYsZUFJVHZxQyxFQUFVdDBDLEdBQUcsaUJBQWtCLFNBQVV5OEUsR0FDdkM5c0YsRUFBS2lRLE9BQU82OEUsRUFBTy82RCxNQUVmNHlCLEVBQVV3ckMsVUFDWm53RixFQUFLa3ZGLGVBSVR2cUMsRUFBVXQwQyxHQUFHLFFBQVMsU0FBVXk4RSxHQUM5QjlzRixFQUFLNnVGLGVBQ0w3dUYsRUFBS3N2RixZQUFZeEMsS0FHbkJub0MsRUFBVXQwQyxHQUFHLFNBQVUsV0FDaEJzMEMsRUFBVXdyQyxVQUlmbndGLEVBQUtrdkYsZUFHUHZxQyxFQUFVdDBDLEdBQUcsV0FBWSxXQUNsQnMwQyxFQUFVd3JDLFVBSWZud0YsRUFBS2t2RixlQUdQdnFDLEVBQVV0MEMsR0FBRyxPQUFRLFdBRW5CclEsRUFBS3l1RixTQUFTLzJFLEtBQUssZ0JBQWlCLFFBQ3BDMVgsRUFBS3l1RixTQUFTLzJFLEtBQUssY0FBZSxTQUVsQzFYLEVBQUtrdkYsYUFDTGx2RixFQUFLb3dGLDJCQUdQenJDLEVBQVV0MEMsR0FBRyxRQUFTLFdBRXBCclEsRUFBS3l1RixTQUFTLzJFLEtBQUssZ0JBQWlCLFNBQ3BDMVgsRUFBS3l1RixTQUFTLzJFLEtBQUssY0FBZSxRQUNsQzFYLEVBQUt5dUYsU0FBU2hqQyxXQUFXLDJCQUczQjlHLEVBQVV0MEMsR0FBRyxpQkFBa0IsV0FDN0IsR0FBSWdnRixHQUFlcndGLEVBQUtzd0YsdUJBRUksS0FBeEJELEVBQWFuN0YsUUFJakJtN0YsRUFBYW41RSxRQUFRLGFBR3ZCeXRDLEVBQVV0MEMsR0FBRyxpQkFBa0IsV0FDN0IsR0FBSWdnRixHQUFlcndGLEVBQUtzd0YsdUJBRXhCLElBQTRCLElBQXhCRCxFQUFhbjdGLE9BQWpCLENBSUEsR0FBSTY4QixHQUFPcytELEVBQWF0K0QsS0FBSyxPQUVhLFNBQXRDcytELEVBQWEzNEUsS0FBSyxpQkFDcEIxWCxFQUFLa1gsUUFBUSxZQUVibFgsRUFBS2tYLFFBQVEsVUFDWDZhLEtBQU1BLE9BS1o0eUIsRUFBVXQwQyxHQUFHLG1CQUFvQixXQUMvQixHQUFJZ2dGLEdBQWVyd0YsRUFBS3N3Rix3QkFFcEJ4QixFQUFXOXVGLEVBQUt5dUYsU0FBU2wzRSxLQUFLLG1CQUU5Qmc1RSxFQUFlekIsRUFBU25zRSxNQUFNMHRFLEVBR2xDLElBQXFCLElBQWpCRSxFQUFKLENBSUEsR0FBSUMsR0FBWUQsRUFBZSxDQUdILEtBQXhCRixFQUFhbjdGLFNBQ2ZzN0YsRUFBWSxFQUdkLElBQUl6OUUsR0FBUSs3RSxFQUFTemYsR0FBR21oQixFQUV4Qno5RSxHQUFNbUUsUUFBUSxhQUVkLElBQUl1NUUsR0FBZ0J6d0YsRUFBS3l1RixTQUFTenhFLFNBQVNubkIsSUFDdkM2NkYsRUFBVTM5RSxFQUFNaUssU0FBU25uQixJQUN6Qjg2RixFQUFhM3dGLEVBQUt5dUYsU0FBU3Z2RSxhQUFld3hFLEVBQVVELEVBRXRDLEtBQWRELEVBQ0Z4d0YsRUFBS3l1RixTQUFTdnZFLFVBQVUsR0FDVyxFQUExQnd4RSxFQUFVRCxHQUNuQnp3RixFQUFLeXVGLFNBQVN2dkUsVUFBVXl4RSxNQUk1QmhzQyxFQUFVdDBDLEdBQUcsZUFBZ0IsV0FDM0IsR0FBSWdnRixHQUFlcndGLEVBQUtzd0Ysd0JBRXBCeEIsRUFBVzl1RixFQUFLeXVGLFNBQVNsM0UsS0FBSyxtQkFFOUJnNUUsRUFBZXpCLEVBQVNuc0UsTUFBTTB0RSxHQUU5QkcsRUFBWUQsRUFBZSxDQUcvQixNQUFJQyxHQUFhMUIsRUFBUzU1RixRQUExQixDQUlBLEdBQUk2ZCxHQUFRKzdFLEVBQVN6ZixHQUFHbWhCLEVBRXhCejlFLEdBQU1tRSxRQUFRLGFBRWQsSUFBSXU1RSxHQUFnQnp3RixFQUFLeXVGLFNBQVN6eEUsU0FBU25uQixJQUN6Q21LLEVBQUt5dUYsU0FBU2h3RSxhQUFZLEdBQ3hCbXlFLEVBQWE3OUUsRUFBTWlLLFNBQVNubkIsSUFBTWtkLEVBQU0wTCxhQUFZLEdBQ3BEa3lFLEVBQWEzd0YsRUFBS3l1RixTQUFTdnZFLFlBQWMweEUsRUFBYUgsQ0FFeEMsS0FBZEQsRUFDRnh3RixFQUFLeXVGLFNBQVN2dkUsVUFBVSxHQUNmMHhFLEVBQWFILEdBQ3RCendGLEVBQUt5dUYsU0FBU3Z2RSxVQUFVeXhFLE1BSTVCaHNDLEVBQVV0MEMsR0FBRyxnQkFBaUIsU0FBVXk4RSxHQUN0Q0EsRUFBT3g2RixRQUFReUMsU0FBUywwQ0FHMUI0dkQsRUFBVXQwQyxHQUFHLGtCQUFtQixTQUFVeThFLEdBQ3hDOXNGLEVBQUswdUYsZUFBZTVCLEtBR2xCbDNFLEVBQUUwRixHQUFHdTFFLFlBQ1BqekYsS0FBSzZ3RixTQUFTcCtFLEdBQUcsYUFBYyxTQUFVblYsR0FDdkMsR0FBSXJGLEdBQU1tSyxFQUFLeXVGLFNBQVN2dkUsWUFFcEJwcEIsRUFDRmtLLEVBQUt5dUYsU0FBU2w2RSxJQUFJLEdBQUc4NUQsYUFDckJydUUsRUFBS3l1RixTQUFTdnZFLFlBQ2Roa0IsRUFBRW93QixPQUdBd2xFLEVBQVU1MUYsRUFBRW93QixPQUFTLEdBQUt6MUIsRUFBTXFGLEVBQUVvd0IsUUFBVSxFQUM1Q3lsRSxFQUFhNzFGLEVBQUVvd0IsT0FBUyxHQUFLeDFCLEdBQVVrSyxFQUFLeXVGLFNBQVMvckYsUUFFckRvdUYsSUFDRjl3RixFQUFLeXVGLFNBQVN2dkUsVUFBVSxHQUV4QmhrQixFQUFFOFksaUJBQ0Y5WSxFQUFFODFGLG1CQUNPRCxJQUNUL3dGLEVBQUt5dUYsU0FBU3Z2RSxVQUNabGYsRUFBS3l1RixTQUFTbDZFLElBQUksR0FBRzg1RCxhQUFlcnVFLEVBQUt5dUYsU0FBUy9yRixVQUdwRHhILEVBQUU4WSxpQkFDRjlZLEVBQUU4MUYscUJBS1JwekYsS0FBSzZ3RixTQUFTcCtFLEdBQUcsVUFBVywwQ0FDMUIsU0FBVTBwQixHQUNWLEdBQUlzeEIsR0FBUXoxQyxFQUFFaFksTUFFVm0wQixFQUFPczVCLEVBQU10NUIsS0FBSyxPQUV0QixPQUFvQyxTQUFoQ3M1QixFQUFNM3pDLEtBQUssc0JBQ1QxWCxFQUFLek4sUUFBUWdpQixJQUFJLFlBQ25CdlUsRUFBS2tYLFFBQVEsWUFDWCs1RSxjQUFlbDNELEVBQ2ZoSSxLQUFNQSxJQUdSL3hCLEVBQUtrWCxRQUFRLGlCQU1qQmxYLEdBQUtrWCxRQUFRLFVBQ1grNUUsY0FBZWwzRCxFQUNmaEksS0FBTUEsTUFJVm4wQixLQUFLNndGLFNBQVNwK0UsR0FBRyxhQUFjLDBDQUM3QixTQUFVMHBCLEdBQ1YsR0FBSWhJLEdBQU9uYyxFQUFFaFksTUFBTW0wQixLQUFLLE9BRXhCL3hCLEdBQUtzd0Ysd0JBQ0FuN0YsWUFBWSx3Q0FFakI2SyxFQUFLa1gsUUFBUSxpQkFDWDZhLEtBQU1BLEVBQ056L0IsUUFBU3NqQixFQUFFaFksV0FLakIyd0YsRUFBUTU3RixVQUFVMjlGLHNCQUF3QixXQUN4QyxHQUFJRCxHQUFlenlGLEtBQUs2d0YsU0FDdkJsM0UsS0FBSyx3Q0FFTixPQUFPODRFLElBR1Q5QixFQUFRNTdGLFVBQVV3aUIsUUFBVSxXQUMxQnZYLEtBQUs2d0YsU0FBU2g3RSxVQUdoQjg2RSxFQUFRNTdGLFVBQVV5OUYsdUJBQXlCLFdBQ3pDLEdBQUlDLEdBQWV6eUYsS0FBSzB5Rix1QkFFeEIsSUFBNEIsSUFBeEJELEVBQWFuN0YsT0FBakIsQ0FJQSxHQUFJNDVGLEdBQVdseEYsS0FBSzZ3RixTQUFTbDNFLEtBQUssbUJBRTlCZzVFLEVBQWV6QixFQUFTbnNFLE1BQU0wdEUsR0FFOUJJLEVBQWdCN3lGLEtBQUs2d0YsU0FBU3p4RSxTQUFTbm5CLElBQ3ZDNjZGLEVBQVVMLEVBQWFyekUsU0FBU25uQixJQUNoQzg2RixFQUFhL3lGLEtBQUs2d0YsU0FBU3Z2RSxhQUFld3hFLEVBQVVELEdBRXBENWtFLEVBQWM2a0UsRUFBVUQsQ0FDNUJFLElBQWdELEVBQWxDTixFQUFhNXhFLGFBQVksR0FFbkIsR0FBaEI4eEUsRUFDRjN5RixLQUFLNndGLFNBQVN2dkUsVUFBVSxJQUNmMk0sRUFBY2p1QixLQUFLNndGLFNBQVNod0UsZUFBK0IsRUFBZG9OLElBQ3REanVCLEtBQUs2d0YsU0FBU3Z2RSxVQUFVeXhFLEtBSTVCcEMsRUFBUTU3RixVQUFVbzlGLFNBQVcsU0FBVWhnRixFQUFRNDBDLEdBQzdDLEdBQUlvckMsR0FBV255RixLQUFLckwsUUFBUWdpQixJQUFJLGtCQUM1Qms1RSxFQUFlN3ZGLEtBQUtyTCxRQUFRZ2lCLElBQUksZ0JBRWhDbzBCLEVBQVVvbkQsRUFBU2hnRixFQUFRNDBDLEVBRWhCLE9BQVhoYyxFQUNGZ2MsRUFBVXRvRCxNQUFNeVUsUUFBVSxPQUNFLGdCQUFaNjNCLEdBQ2hCZ2MsRUFBVXZuRCxVQUFZcXdGLEVBQWE5a0QsR0FFbkMveUIsRUFBRSt1QyxHQUFXMTBDLE9BQU8wNEIsSUFJakI0bEQsSUFHVGhHLEVBQUdwdUUsT0FBTyxrQkFFUCxXQUNELEdBQUkrMkUsSUFDRkMsVUFBVyxFQUNYQyxJQUFLLEVBQ0xDLE1BQU8sR0FDUEMsTUFBTyxHQUNQQyxLQUFNLEdBQ05DLElBQUssR0FDTEMsSUFBSyxHQUNMQyxNQUFPLEdBQ1BDLFFBQVMsR0FDVEMsVUFBVyxHQUNYQyxJQUFLLEdBQ0xDLEtBQU0sR0FDTkMsS0FBTSxHQUNOQyxHQUFJLEdBQ0pDLE1BQU8sR0FDUEMsS0FBTSxHQUNOQyxPQUFRLEdBR1YsT0FBT2pCLEtBR1QzSSxFQUFHcHVFLE9BQU8sMEJBQ1IsU0FDQSxXQUNBLFdBQ0MsU0FBVXZFLEVBQUc0MUUsRUFBTzBGLEdBQ3JCLFFBQVNrQixHQUFlN3RELEVBQVVoeUMsR0FDaENxTCxLQUFLMm1DLFNBQVdBLEVBQ2hCM21DLEtBQUtyTCxRQUFVQSxFQUVmNi9GLEVBQWN0RyxVQUFVcHVGLFlBQVk3SyxLQUFLK0ssTUFtSjNDLE1BaEpBNHRGLEdBQU1DLE9BQU8yRyxFQUFlNUcsRUFBTW9CLFlBRWxDd0YsRUFBY3ovRixVQUFVKzBGLE9BQVMsV0FDL0IsR0FBSTJLLEdBQWF6OEUsRUFDZixzR0FrQkYsT0FiQWhZLE1BQUswMEYsVUFBWSxFQUV5QixNQUF0QzEwRixLQUFLMm1DLFNBQVN4UyxLQUFLLGdCQUNyQm4wQixLQUFLMDBGLFVBQVkxMEYsS0FBSzJtQyxTQUFTeFMsS0FBSyxnQkFDTyxNQUFsQ24wQixLQUFLMm1DLFNBQVM3c0IsS0FBSyxjQUM1QjlaLEtBQUswMEYsVUFBWTEwRixLQUFLMm1DLFNBQVM3c0IsS0FBSyxhQUd0QzI2RSxFQUFXMzZFLEtBQUssUUFBUzlaLEtBQUsybUMsU0FBUzdzQixLQUFLLFVBQzVDMjZFLEVBQVczNkUsS0FBSyxXQUFZOVosS0FBSzAwRixXQUVqQzEwRixLQUFLeTBGLFdBQWFBLEVBRVhBLEdBR1RELEVBQWN6L0YsVUFBVTBJLEtBQU8sU0FBVXNwRCxFQUFXamtELEdBQ2xELEdBQUlWLEdBQU9wQyxLQUdQMjBGLEdBREs1dEMsRUFBVXpuRCxHQUFLLGFBQ1J5bkQsRUFBVXpuRCxHQUFLLFdBRS9CVSxNQUFLK21ELFVBQVlBLEVBRWpCL21ELEtBQUt5MEYsV0FBV2hpRixHQUFHLFFBQVMsU0FBVTBwQixHQUNwQy81QixFQUFLa1gsUUFBUSxRQUFTNmlCLEtBR3hCbjhCLEtBQUt5MEYsV0FBV2hpRixHQUFHLE9BQVEsU0FBVTBwQixHQUNuQy81QixFQUFLd3lGLFlBQVl6NEQsS0FHbkJuOEIsS0FBS3kwRixXQUFXaGlGLEdBQUcsVUFBVyxTQUFVMHBCLEdBQ3RDLzVCLEVBQUtrWCxRQUFRLFdBQVk2aUIsR0FFckJBLEVBQUkvRyxRQUFVaytELEVBQUtRLE9BQ3JCMzNELEVBQUkvbEIsbUJBSVIyd0MsRUFBVXQwQyxHQUFHLGdCQUFpQixTQUFVeThFLEdBQ3RDOXNGLEVBQUtxeUYsV0FBVzM2RSxLQUFLLHdCQUF5Qm8xRSxFQUFPLzZELEtBQUs4OUQsYUFHNURsckMsRUFBVXQwQyxHQUFHLG1CQUFvQixTQUFVeThFLEdBQ3pDOXNGLEVBQUtrSixPQUFPNGpGLEVBQU8vNkQsUUFHckI0eUIsRUFBVXQwQyxHQUFHLE9BQVEsV0FFbkJyUSxFQUFLcXlGLFdBQVczNkUsS0FBSyxnQkFBaUIsUUFDdEMxWCxFQUFLcXlGLFdBQVczNkUsS0FBSyxZQUFhNjZFLEdBRWxDdnlGLEVBQUt5eUYsb0JBQW9COXRDLEtBRzNCQSxFQUFVdDBDLEdBQUcsUUFBUyxXQUVwQnJRLEVBQUtxeUYsV0FBVzM2RSxLQUFLLGdCQUFpQixTQUN0QzFYLEVBQUtxeUYsV0FBVzVtQyxXQUFXLHlCQUMzQnpyRCxFQUFLcXlGLFdBQVc1bUMsV0FBVyxhQUUzQnpyRCxFQUFLcXlGLFdBQVdoa0QsUUFFaEJydUMsRUFBSzB5RixvQkFBb0IvdEMsS0FHM0JBLEVBQVV0MEMsR0FBRyxTQUFVLFdBQ3JCclEsRUFBS3F5RixXQUFXMzZFLEtBQUssV0FBWTFYLEVBQUtzeUYsYUFHeEMzdEMsRUFBVXQwQyxHQUFHLFVBQVcsV0FDdEJyUSxFQUFLcXlGLFdBQVczNkUsS0FBSyxXQUFZLFNBSXJDMDZFLEVBQWN6L0YsVUFBVTYvRixZQUFjLFNBQVV6NEQsR0FDOUMsR0FBSS81QixHQUFPcEMsSUFJWHdCLFFBQU9pQyxXQUFXLFdBR2IvTixTQUFTeTFDLGVBQWlCL29DLEVBQUtxeUYsV0FBVyxJQUMxQ3o4RSxFQUFFMmpCLFNBQVN2NUIsRUFBS3F5RixXQUFXLEdBQUkvK0YsU0FBU3kxQyxnQkFLM0Mvb0MsRUFBS2tYLFFBQVEsT0FBUTZpQixJQUNwQixJQUdMcTRELEVBQWN6L0YsVUFBVTgvRixvQkFBc0IsU0FBVTl0QyxHQUd0RC91QyxFQUFFdGlCLFNBQVMwSixNQUFNcVQsR0FBRyxxQkFBdUJzMEMsRUFBVXpuRCxHQUFJLFNBQVVoQyxHQUNqRSxHQUFJeTNGLEdBQVUvOEUsRUFBRTFhLEVBQUVqRixRQUVkMjhGLEVBQVVELEVBQVF4bUMsUUFBUSxZQUUxQjBtQyxFQUFPajlFLEVBQUUsbUNBRWJpOUUsR0FBS3g3RSxLQUFLLFdBQ1IsR0FBSWcwQyxHQUFRejFDLEVBQUVoWSxLQUVkLElBQUlBLE1BQVFnMUYsRUFBUSxHQUFwQixDQUlBLEdBQUlydUQsR0FBVzhtQixFQUFNdDVCLEtBQUssVUFFMUJ3UyxHQUFTaWtELFFBQVEsZUFLdkI0SixFQUFjei9GLFVBQVUrL0Ysb0JBQXNCLFNBQVUvdEMsR0FDdEQvdUMsRUFBRXRpQixTQUFTMEosTUFBTTRXLElBQUkscUJBQXVCK3dDLEVBQVV6bkQsS0FHeERrMUYsRUFBY3ovRixVQUFVc1osU0FBVyxTQUFVb21GLEVBQVkzeEYsR0FDdkQsR0FBSW95RixHQUFzQnB5RixFQUFXNlcsS0FBSyxhQUMxQ3U3RSxHQUFvQjdpRixPQUFPb2lGLElBRzdCRCxFQUFjei9GLFVBQVV3aUIsUUFBVSxXQUNoQ3ZYLEtBQUs4MEYsb0JBQW9COTBGLEtBQUsrbUQsWUFHaEN5dEMsRUFBY3ovRixVQUFVdVcsT0FBUyxTQUFVNm9CLEdBQ3pDLEtBQU0sSUFBSS9WLE9BQU0sMERBR1hvMkUsSUFHVDdKLEVBQUdwdUUsT0FBTyw0QkFDUixTQUNBLFNBQ0EsV0FDQSxXQUNDLFNBQVV2RSxFQUFHdzhFLEVBQWU1RyxFQUFPMEYsR0FDcEMsUUFBUzZCLEtBQ1BBLEVBQWdCakgsVUFBVXB1RixZQUFZSyxNQUFNSCxLQUFNRSxXQW9GcEQsTUFqRkEwdEYsR0FBTUMsT0FBT3NILEVBQWlCWCxHQUU5QlcsRUFBZ0JwZ0csVUFBVSswRixPQUFTLFdBQ2pDLEdBQUkySyxHQUFhVSxFQUFnQmpILFVBQVVwRSxPQUFPNzBGLEtBQUsrSyxLQVd2RCxPQVRBeTBGLEdBQVd0OUYsU0FBUyw2QkFFcEJzOUYsRUFBVzc2RSxLQUNULGtKQU1LNjZFLEdBR1RVLEVBQWdCcGdHLFVBQVUwSSxLQUFPLFNBQVVzcEQsRUFBV2prRCxHQUNwRCxHQUFJVixHQUFPcEMsSUFFWG0xRixHQUFnQmpILFVBQVV6d0YsS0FBSzBDLE1BQU1ILEtBQU1FLFVBRTNDLElBQUlaLEdBQUt5bkQsRUFBVXpuRCxHQUFLLFlBRXhCVSxNQUFLeTBGLFdBQVc5NkUsS0FBSyxnQ0FBZ0NHLEtBQUssS0FBTXhhLEdBQ2hFVSxLQUFLeTBGLFdBQVczNkUsS0FBSyxrQkFBbUJ4YSxHQUV4Q1UsS0FBS3kwRixXQUFXaGlGLEdBQUcsWUFBYSxTQUFVMHBCLEdBRXRCLElBQWRBLEVBQUkvRyxPQUlSaHpCLEVBQUtrWCxRQUFRLFVBQ1grNUUsY0FBZWwzRCxNQUluQm44QixLQUFLeTBGLFdBQVdoaUYsR0FBRyxRQUFTLFNBQVUwcEIsTUFJdENuOEIsS0FBS3kwRixXQUFXaGlGLEdBQUcsT0FBUSxTQUFVMHBCLE1BSXJDNHFCLEVBQVV0MEMsR0FBRyxtQkFBb0IsU0FBVXk4RSxHQUN6QzlzRixFQUFLa0osT0FBTzRqRixFQUFPLzZELFNBSXZCZ2hFLEVBQWdCcGdHLFVBQVU2aUQsTUFBUSxXQUNoQzUzQyxLQUFLeTBGLFdBQVc5NkUsS0FBSyxnQ0FBZ0N3dkUsU0FHdkRnTSxFQUFnQnBnRyxVQUFVbWUsUUFBVSxTQUFVaWhCLEVBQU00eUIsR0FDbEQsR0FBSW9yQyxHQUFXbnlGLEtBQUtyTCxRQUFRZ2lCLElBQUkscUJBQzVCazVFLEVBQWU3dkYsS0FBS3JMLFFBQVFnaUIsSUFBSSxlQUVwQyxPQUFPazVFLEdBQWFzQyxFQUFTaCtELEVBQU00eUIsS0FHckNvdUMsRUFBZ0JwZ0csVUFBVXFnRyxtQkFBcUIsV0FDN0MsTUFBT3A5RSxHQUFFLGtCQUdYbTlFLEVBQWdCcGdHLFVBQVV1VyxPQUFTLFNBQVU2b0IsR0FDM0MsR0FBb0IsSUFBaEJBLEVBQUs3OEIsT0FFUCxXQURBMEksTUFBSzQzQyxPQUlQLElBQUl5OUMsR0FBWWxoRSxFQUFLLEdBRWpCbWhFLEVBQVl0MUYsS0FBS3kwRixXQUFXOTZFLEtBQUssZ0NBQ2pDNCtELEVBQVl2NEUsS0FBS2tULFFBQVFtaUYsRUFBV0MsRUFFeENBLEdBQVVuTSxRQUFROTJFLE9BQU9rbUUsR0FDekIrYyxFQUFVbjlFLEtBQUssUUFBU2s5RSxFQUFVbkQsT0FBU21ELEVBQVVsOEUsT0FHaERnOEUsSUFHVHhLLEVBQUdwdUUsT0FBTyw4QkFDUixTQUNBLFNBQ0EsWUFDQyxTQUFVdkUsRUFBR3c4RSxFQUFlNUcsR0FDN0IsUUFBUzJILEdBQW1CNXVELEVBQVVoeUMsR0FDcEM0Z0csRUFBa0JySCxVQUFVcHVGLFlBQVlLLE1BQU1ILEtBQU1FLFdBcUd0RCxNQWxHQTB0RixHQUFNQyxPQUFPMEgsRUFBbUJmLEdBRWhDZSxFQUFrQnhnRyxVQUFVKzBGLE9BQVMsV0FDbkMsR0FBSTJLLEdBQWFjLEVBQWtCckgsVUFBVXBFLE9BQU83MEYsS0FBSytLLEtBUXpELE9BTkF5MEYsR0FBV3Q5RixTQUFTLCtCQUVwQnM5RixFQUFXNzZFLEtBQ1QsaURBR0s2NkUsR0FHVGMsRUFBa0J4Z0csVUFBVTBJLEtBQU8sU0FBVXNwRCxFQUFXamtELEdBQ3RELEdBQUlWLEdBQU9wQyxJQUVYdTFGLEdBQWtCckgsVUFBVXp3RixLQUFLMEMsTUFBTUgsS0FBTUUsV0FFN0NGLEtBQUt5MEYsV0FBV2hpRixHQUFHLFFBQVMsU0FBVTBwQixHQUNwQy81QixFQUFLa1gsUUFBUSxVQUNYKzVFLGNBQWVsM0QsTUFJbkJuOEIsS0FBS3kwRixXQUFXaGlGLEdBQ2QsUUFDQSxxQ0FDQSxTQUFVMHBCLEdBRVIsSUFBSS81QixFQUFLek4sUUFBUWdpQixJQUFJLFlBQXJCLENBSUEsR0FBSTYrRSxHQUFVeDlFLEVBQUVoWSxNQUNaeTBGLEVBQWFlLEVBQVFwOUYsU0FFckIrN0IsRUFBT3NnRSxFQUFXdGdFLEtBQUssT0FFM0IveEIsR0FBS2tYLFFBQVEsWUFDWCs1RSxjQUFlbDNELEVBQ2ZoSSxLQUFNQSxRQU1kb2hFLEVBQWtCeGdHLFVBQVU2aUQsTUFBUSxXQUNsQzUzQyxLQUFLeTBGLFdBQVc5NkUsS0FBSyxnQ0FBZ0N3dkUsU0FHdkRvTSxFQUFrQnhnRyxVQUFVbWUsUUFBVSxTQUFVaWhCLEVBQU00eUIsR0FDcEQsR0FBSW9yQyxHQUFXbnlGLEtBQUtyTCxRQUFRZ2lCLElBQUkscUJBQzVCazVFLEVBQWU3dkYsS0FBS3JMLFFBQVFnaUIsSUFBSSxlQUVwQyxPQUFPazVFLEdBQWFzQyxFQUFTaCtELEVBQU00eUIsS0FHckN3dUMsRUFBa0J4Z0csVUFBVXFnRyxtQkFBcUIsV0FDL0MsR0FBSXR5RixHQUFha1YsRUFDZixnSUFPRixPQUFPbFYsSUFHVHl5RixFQUFrQnhnRyxVQUFVdVcsT0FBUyxTQUFVNm9CLEdBRzdDLEdBRkFuMEIsS0FBSzQzQyxRQUVlLElBQWhCempCLEVBQUs3OEIsT0FBVCxDQU1BLElBQUssR0FGRG0rRixNQUVLcDRGLEVBQUksRUFBR0EsRUFBSTgyQixFQUFLNzhCLE9BQVErRixJQUFLLENBQ3BDLEdBQUlnNEYsR0FBWWxoRSxFQUFLOTJCLEdBRWpCbzNGLEVBQWF6MEYsS0FBS28xRixxQkFDbEI3YyxFQUFZdjRFLEtBQUtrVCxRQUFRbWlGLEVBQVdaLEVBRXhDQSxHQUFXcGlGLE9BQU9rbUUsR0FDbEJrYyxFQUFXdDhFLEtBQUssUUFBU2s5RSxFQUFVbkQsT0FBU21ELEVBQVVsOEUsTUFFdERzN0UsRUFBV3RnRSxLQUFLLE9BQVFraEUsR0FFeEJJLEVBQVk1MEYsS0FBSzR6RixHQUduQixHQUFJYSxHQUFZdDFGLEtBQUt5MEYsV0FBVzk2RSxLQUFLLCtCQUVyQ2kwRSxHQUFNMkMsV0FBVytFLEVBQVdHLEtBR3ZCRixJQUdUNUssRUFBR3B1RSxPQUFPLGlDQUNSLFlBQ0MsU0FBVXF4RSxHQUNYLFFBQVM4SCxHQUFhQyxFQUFXaHZELEVBQVVoeUMsR0FDekNxTCxLQUFLNDFGLFlBQWM1MUYsS0FBSzYxRixxQkFBcUJsaEcsRUFBUWdpQixJQUFJLGdCQUV6RGcvRSxFQUFVMWdHLEtBQUsrSyxLQUFNMm1DLEVBQVVoeUMsR0F5Q2pDLE1BdENBK2dHLEdBQVkzZ0csVUFBVThnRyxxQkFBdUIsU0FBVS83QixFQUFHODdCLEdBUXhELE1BUDJCLGdCQUFoQkEsS0FDVEEsR0FDRXQyRixHQUFJLEdBQ0o2WixLQUFNeThFLElBSUhBLEdBR1RGLEVBQVkzZ0csVUFBVStnRyxrQkFBb0IsU0FBVUgsRUFBV0MsR0FDN0QsR0FBSUcsR0FBZS8xRixLQUFLbzFGLG9CQU14QixPQUpBVyxHQUFhbjhFLEtBQUs1WixLQUFLa1QsUUFBUTBpRixJQUMvQkcsRUFBYTUrRixTQUFTLGtDQUNUSSxZQUFZLDZCQUVsQncrRixHQUdUTCxFQUFZM2dHLFVBQVV1VyxPQUFTLFNBQVVxcUYsRUFBV3hoRSxHQUNsRCxHQUFJNmhFLEdBQ2EsR0FBZjdoRSxFQUFLNzhCLFFBQWU2OEIsRUFBSyxHQUFHNzBCLElBQU1VLEtBQUs0MUYsWUFBWXQyRixHQUVqRDIyRixFQUFxQjloRSxFQUFLNzhCLE9BQVMsQ0FFdkMsSUFBSTIrRixHQUFzQkQsRUFDeEIsTUFBT0wsR0FBVTFnRyxLQUFLK0ssS0FBTW0wQixFQUc5Qm4wQixNQUFLNDNDLE9BRUwsSUFBSW0rQyxHQUFlLzFGLEtBQUs4MUYsa0JBQWtCOTFGLEtBQUs0MUYsWUFFL0M1MUYsTUFBS3kwRixXQUFXOTZFLEtBQUssZ0NBQWdDdEgsT0FBTzBqRixJQUd2REwsSUFHVC9LLEVBQUdwdUUsT0FBTyxnQ0FDUixTQUNBLFdBQ0MsU0FBVXZFLEVBQUdzN0UsR0FDZCxRQUFTNEMsTUEyRlQsTUF6RkFBLEdBQVduaEcsVUFBVTBJLEtBQU8sU0FBVWs0RixFQUFXNXVDLEVBQVdqa0QsR0FDMUQsR0FBSVYsR0FBT3BDLElBRVgyMUYsR0FBVTFnRyxLQUFLK0ssS0FBTSttRCxFQUFXamtELEdBRVIsTUFBcEI5QyxLQUFLNDFGLGFBQ0g1MUYsS0FBS3JMLFFBQVFnaUIsSUFBSSxVQUFZblYsT0FBT3VYLFNBQVdBLFFBQVF1aUIsT0FDekR2aUIsUUFBUXVpQixNQUNOLGlHQU1OdDdCLEtBQUt5MEYsV0FBV2hpRixHQUFHLFlBQWEsNEJBQzlCLFNBQVUwcEIsR0FDUi81QixFQUFLK3pGLGFBQWFoNkQsS0FHdEI0cUIsRUFBVXQwQyxHQUFHLFdBQVksU0FBVTBwQixHQUNqQy81QixFQUFLZzBGLHFCQUFxQmo2RCxFQUFLNHFCLE1BSW5DbXZDLEVBQVduaEcsVUFBVW9oRyxhQUFlLFNBQVVyOEIsRUFBRzM5QixHQUUvQyxJQUFJbjhCLEtBQUtyTCxRQUFRZ2lCLElBQUksWUFBckIsQ0FJQSxHQUFJMC9FLEdBQVNyMkYsS0FBS3kwRixXQUFXOTZFLEtBQUssNEJBR2xDLElBQXNCLElBQWxCMDhFLEVBQU8vK0YsT0FBWCxDQUlBNmtDLEVBQUlpM0QsaUJBSUosS0FBSyxHQUZEai9ELEdBQU9raUUsRUFBT2xpRSxLQUFLLFFBRWQ5MkIsRUFBSSxFQUFHQSxFQUFJODJCLEVBQUs3OEIsT0FBUStGLElBQUssQ0FDcEMsR0FBSWk1RixJQUNGbmlFLEtBQU1BLEVBQUs5MkIsR0FRYixJQUhBMkMsS0FBS3NaLFFBQVEsV0FBWWc5RSxHQUdyQkEsRUFBYWwvRCxVQUNmLE9BSUpwM0IsS0FBSzJtQyxTQUFTOXNCLElBQUk3WixLQUFLNDFGLFlBQVl0MkYsSUFBSWdhLFFBQVEsVUFFL0N0WixLQUFLc1osUUFBUSxnQkFHZjQ4RSxFQUFXbmhHLFVBQVVxaEcscUJBQXVCLFNBQVV0OEIsRUFBRzM5QixFQUFLNHFCLEdBQ3hEQSxFQUFVd3JDLFdBSVZwMkQsRUFBSS9HLE9BQVNrK0QsRUFBS2lCLFFBQVVwNEQsRUFBSS9HLE9BQVNrK0QsRUFBS0MsWUFDaER2ekYsS0FBS20yRixhQUFhaDZELElBSXRCKzVELEVBQVduaEcsVUFBVXVXLE9BQVMsU0FBVXFxRixFQUFXeGhFLEdBR2pELEdBRkF3aEUsRUFBVTFnRyxLQUFLK0ssS0FBTW0wQixLQUVqQm4wQixLQUFLeTBGLFdBQVc5NkUsS0FBSyxtQ0FBbUNyaUIsT0FBUyxHQUNqRCxJQUFoQjY4QixFQUFLNzhCLFFBRFQsQ0FLQSxHQUFJaytGLEdBQVV4OUUsRUFDWix3REFJRnc5RSxHQUFRcmhFLEtBQUssT0FBUUEsR0FFckJuMEIsS0FBS3kwRixXQUFXOTZFLEtBQUssZ0NBQWdDay9CLFFBQVEyOEMsS0FHeERVLElBR1R2TCxFQUFHcHVFLE9BQU8sNEJBQ1IsU0FDQSxXQUNBLFdBQ0MsU0FBVXZFLEVBQUc0MUUsRUFBTzBGLEdBQ3JCLFFBQVNpRCxHQUFRWixFQUFXaHZELEVBQVVoeUMsR0FDcENnaEcsRUFBVTFnRyxLQUFLK0ssS0FBTTJtQyxFQUFVaHlDLEdBc05qQyxNQW5OQTRoRyxHQUFPeGhHLFVBQVUrMEYsT0FBUyxTQUFVNkwsR0FDbEMsR0FBSWEsR0FBVXgrRSxFQUNaLGtQQU9GaFksTUFBS3kyRixpQkFBbUJELEVBQ3hCeDJGLEtBQUt3MkYsUUFBVUEsRUFBUTc4RSxLQUFLLFFBRTVCLElBQUkyN0UsR0FBWUssRUFBVTFnRyxLQUFLK0ssS0FJL0IsT0FGQUEsTUFBSzAyRixvQkFFRXBCLEdBR1RpQixFQUFPeGhHLFVBQVUwSSxLQUFPLFNBQVVrNEYsRUFBVzV1QyxFQUFXamtELEdBQ3RELEdBQUlWLEdBQU9wQyxJQUVYMjFGLEdBQVUxZ0csS0FBSytLLEtBQU0rbUQsRUFBV2prRCxHQUVoQ2lrRCxFQUFVdDBDLEdBQUcsT0FBUSxXQUNuQnJRLEVBQUtvMEYsUUFBUWw5RSxRQUFRLFdBR3ZCeXRDLEVBQVV0MEMsR0FBRyxRQUFTLFdBQ3BCclEsRUFBS28wRixRQUFRMzhFLElBQUksSUFDakJ6WCxFQUFLbzBGLFFBQVEzb0MsV0FBVyx5QkFDeEJ6ckQsRUFBS28wRixRQUFRbDlFLFFBQVEsV0FHdkJ5dEMsRUFBVXQwQyxHQUFHLFNBQVUsV0FDckJyUSxFQUFLbzBGLFFBQVFyK0UsS0FBSyxZQUFZLEdBRTlCL1YsRUFBS3MwRixzQkFHUDN2QyxFQUFVdDBDLEdBQUcsVUFBVyxXQUN0QnJRLEVBQUtvMEYsUUFBUXIrRSxLQUFLLFlBQVksS0FHaEM0dUMsRUFBVXQwQyxHQUFHLFFBQVMsU0FBVTBwQixHQUM5Qi81QixFQUFLbzBGLFFBQVFsOUUsUUFBUSxXQUd2Qnl0QyxFQUFVdDBDLEdBQUcsZ0JBQWlCLFNBQVV5OEUsR0FDdEM5c0YsRUFBS28wRixRQUFRMThFLEtBQUssd0JBQXlCbzFFLEVBQU81dkYsTUFHcERVLEtBQUt5MEYsV0FBV2hpRixHQUFHLFVBQVcsMEJBQTJCLFNBQVUwcEIsR0FDakUvNUIsRUFBS2tYLFFBQVEsUUFBUzZpQixLQUd4Qm44QixLQUFLeTBGLFdBQVdoaUYsR0FBRyxXQUFZLDBCQUEyQixTQUFVMHBCLEdBQ2xFLzVCLEVBQUt3eUYsWUFBWXo0RCxLQUduQm44QixLQUFLeTBGLFdBQVdoaUYsR0FBRyxVQUFXLDBCQUEyQixTQUFVMHBCLEdBQ2pFQSxFQUFJaTNELGtCQUVKaHhGLEVBQUtrWCxRQUFRLFdBQVk2aUIsR0FFekIvNUIsRUFBS3UwRixnQkFBa0J4NkQsRUFBSXk2RCxvQkFFM0IsSUFBSXY0RSxHQUFNOGQsRUFBSS9HLEtBRWQsSUFBSS9XLElBQVFpMUUsRUFBS0MsV0FBb0MsS0FBdkJueEYsRUFBS28wRixRQUFRMzhFLE1BQWMsQ0FDdkQsR0FBSWc5RSxHQUFrQnowRixFQUFLcTBGLGlCQUN4Qng2RixLQUFLLDZCQUVSLElBQUk0NkYsRUFBZ0J2L0YsT0FBUyxFQUFHLENBQzlCLEdBQUl3OEIsR0FBTytpRSxFQUFnQjFpRSxLQUFLLE9BRWhDL3hCLEdBQUswMEYsbUJBQW1CaGpFLEdBRXhCcUksRUFBSS9sQixvQkFVVixJQUFJMmdGLEdBQU9yaEcsU0FBU3NoRyxhQUNoQkMsRUFBcUJGLEdBQWdCLElBQVJBLENBS2pDLzJGLE1BQUt5MEYsV0FBV2hpRixHQUNkLG9CQUNBLDBCQUNBLFNBQVUwcEIsR0FJUixNQUFJODZELE9BQ0Y3MEYsR0FBS3F5RixXQUFXeitFLElBQUksc0NBS3RCNVQsR0FBS3F5RixXQUFXeitFLElBQUksa0JBSXhCaFcsS0FBS3kwRixXQUFXaGlGLEdBQ2QsNEJBQ0EsMEJBQ0EsU0FBVTBwQixHQUlSLEdBQUk4NkQsR0FBbUMsVUFBYjk2RCxFQUFJMTVCLEtBRTVCLFdBREFMLEdBQUtxeUYsV0FBV3orRSxJQUFJLGlDQUl0QixJQUFJcUksR0FBTThkLEVBQUkvRyxLQUdWL1csSUFBT2kxRSxFQUFLSSxPQUFTcjFFLEdBQU9pMUUsRUFBS0ssTUFBUXQxRSxHQUFPaTFFLEVBQUtNLEtBS3JEdjFFLEdBQU9pMUUsRUFBS0UsS0FJaEJweEYsRUFBSzgwRixhQUFhLzZELE1BWXhCbzZELEVBQU94aEcsVUFBVTJoRyxrQkFBb0IsU0FBVWYsR0FDN0MzMUYsS0FBS3cyRixRQUFRMThFLEtBQUssV0FBWTlaLEtBQUt5MEYsV0FBVzM2RSxLQUFLLGFBQ25EOVosS0FBS3kwRixXQUFXMzZFLEtBQUssV0FBWSxPQUduQ3k4RSxFQUFPeGhHLFVBQVUrZ0csa0JBQW9CLFNBQVVILEVBQVdDLEdBQ3hENTFGLEtBQUt3MkYsUUFBUTE4RSxLQUFLLGNBQWU4N0UsRUFBWXo4RSxPQUcvQ285RSxFQUFPeGhHLFVBQVV1VyxPQUFTLFNBQVVxcUYsRUFBV3hoRSxHQUM3QyxHQUFJZ2pFLEdBQWlCbjNGLEtBQUt3MkYsUUFBUSxJQUFNOWdHLFNBQVN5MUMsYUFFakRuckMsTUFBS3cyRixRQUFRMThFLEtBQUssY0FBZSxJQUVqQzY3RSxFQUFVMWdHLEtBQUsrSyxLQUFNbTBCLEdBRXJCbjBCLEtBQUt5MEYsV0FBVzk2RSxLQUFLLGdDQUNMdEgsT0FBT3JTLEtBQUt5MkYsa0JBRTVCejJGLEtBQUtvM0YsZUFDREQsR0FDRm4zRixLQUFLdzJGLFFBQVEvbEQsU0FJakI4bEQsRUFBT3hoRyxVQUFVbWlHLGFBQWUsV0FHOUIsR0FGQWwzRixLQUFLbzNGLGdCQUVBcDNGLEtBQUsyMkYsZ0JBQWlCLENBQ3pCLEdBQUlockUsR0FBUTNyQixLQUFLdzJGLFFBQVEzOEUsS0FFekI3WixNQUFLc1osUUFBUSxTQUNYKzlFLEtBQU0xckUsSUFJVjNyQixLQUFLMjJGLGlCQUFrQixHQUd6QkosRUFBT3hoRyxVQUFVK2hHLG1CQUFxQixTQUFVbkIsRUFBVzdoRSxHQUN6RDl6QixLQUFLc1osUUFBUSxZQUNYNmEsS0FBTUwsSUFHUjl6QixLQUFLdzJGLFFBQVEzOEUsSUFBSWlhLEVBQUszYSxNQUN0Qm5aLEtBQUtrM0YsZ0JBR1BYLEVBQU94aEcsVUFBVXFpRyxhQUFlLFdBQzlCcDNGLEtBQUt3MkYsUUFBUTM1QyxJQUFJLFFBQVMsT0FFMUIsSUFBSTkzQyxHQUFRLEVBRVosSUFBeUMsS0FBckMvRSxLQUFLdzJGLFFBQVExOEUsS0FBSyxlQUNwQi9VLEVBQVEvRSxLQUFLeTBGLFdBQVc5NkUsS0FBSyxnQ0FBZ0NvSCxpQkFDeEQsQ0FDTCxHQUFJdTJFLEdBQWV0M0YsS0FBS3cyRixRQUFRMzhFLE1BQU12aUIsT0FBUyxDQUUvQ3lOLEdBQXdCLElBQWZ1eUYsRUFBdUIsS0FHbEN0M0YsS0FBS3cyRixRQUFRMzVDLElBQUksUUFBUzkzQyxJQUdyQnd4RixJQUdUNUwsRUFBR3B1RSxPQUFPLGdDQUNSLFVBQ0MsU0FBVXZFLEdBQ1gsUUFBU3UvRSxNQXdDVCxNQXRDQUEsR0FBV3hpRyxVQUFVMEksS0FBTyxTQUFVazRGLEVBQVc1dUMsRUFBV2prRCxHQUMxRCxHQUFJVixHQUFPcEMsS0FDUHczRixHQUNGLE9BQVEsVUFDUixRQUFTLFVBQ1QsU0FBVSxZQUNWLFdBQVksZUFHVkMsR0FBcUIsVUFBVyxVQUFXLFlBQWEsY0FFNUQ5QixHQUFVMWdHLEtBQUsrSyxLQUFNK21ELEVBQVdqa0QsR0FFaENpa0QsRUFBVXQwQyxHQUFHLElBQUssU0FBVTNiLEVBQU1vNEYsR0FFaEMsR0FBcUMsS0FBakNsM0UsRUFBRWdOLFFBQVFsdUIsRUFBTTBnRyxHQUFwQixDQUtBdEksRUFBU0EsS0FHVCxJQUFJL3lELEdBQU1ua0IsRUFBRTh4QixNQUFNLFdBQWFoekMsR0FDN0JvNEYsT0FBUUEsR0FHVjlzRixHQUFLdWtDLFNBQVNydEIsUUFBUTZpQixHQUdxQixLQUF2Q25rQixFQUFFZ04sUUFBUWx1QixFQUFNMmdHLEtBSXBCdkksRUFBTzkzRCxVQUFZK0UsRUFBSXk2RCwwQkFJcEJXLElBR1Q1TSxFQUFHcHVFLE9BQU8sdUJBQ1IsU0FDQSxXQUNDLFNBQVV2RSxFQUFHOEUsR0FDZCxRQUFTNDZFLEdBQWFDLEdBQ3BCMzNGLEtBQUsyM0YsS0FBT0EsTUE2QmQsTUExQkFELEdBQVkzaUcsVUFBVXM3QixJQUFNLFdBQzFCLE1BQU9yd0IsTUFBSzIzRixNQUdkRCxFQUFZM2lHLFVBQVU0aEIsSUFBTSxTQUFVMEgsR0FDcEMsTUFBT3JlLE1BQUsyM0YsS0FBS3Q1RSxJQUduQnE1RSxFQUFZM2lHLFVBQVVHLE9BQVMsU0FBVTBpRyxHQUN2QzUzRixLQUFLMjNGLEtBQU8zL0UsRUFBRTlpQixVQUFXMGlHLEVBQVl2bkUsTUFBT3J3QixLQUFLMjNGLE9BS25ERCxFQUFZRyxVQUVaSCxFQUFZSSxTQUFXLFNBQVVod0UsR0FDL0IsS0FBTUEsSUFBUTR2RSxHQUFZRyxRQUFTLENBQ2pDLEdBQUlFLEdBQWVqN0UsRUFBUWdMLEVBRTNCNHZFLEdBQVlHLE9BQU8vdkUsR0FBUWl3RSxFQUc3QixNQUFPLElBQUlMLEdBQVlBLEVBQVlHLE9BQU8vdkUsS0FHckM0dkUsSUFHVC9NLEVBQUdwdUUsT0FBTyx3QkFFUCxXQUNELEdBQUl5N0UsSUFDRkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVTtBQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUs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SSxXQUFXLFdBQ1B1Z0ksRUFBVXhrSSxVQUFZc2xJLE9BQU9kLEVBQVV4a0ksV0FBYSxHQUNyRCxLQUNIbW5JLEVBQWUzQyxFQUFXLFdBQ3RCcG9HLFFBQVEvbEIsT0FBT2t1SCxFQUFNLG1CQUk3QixRQUFTMEMsS0FDTCxJQUFLLEdBQUlweEksR0FBSSxFQUFHNGxDLEVBQU0yckcsRUFBUXR2SSxPQUFZMmpDLEVBQUo1bEMsSUFBV0EsRUFDN0N1eEksRUFBUXZ4SSxHQUFHd2YsU0FyTW5CLEdBQUluYixJQUNJOFQsV0FBWWhVLFVBQVUrRyxlQUUxQnNtSSxHQUNJL3BJLGdCQUFtQixxQkFDbkJncUksV0FBYyxnQkFDZEMsWUFBZSxpQkFDZmxxSSxVQUFhLGdCQUVqQm1xSSxFQUFtQkgsRUFBa0JydEksVUFBVStILFNBQVMsY0FDeERvbEksRUFBaUIsU0FBVWxnSSxFQUFJbEQsR0FDM0IsR0FBSTBqSSxHQUFrQixTQUFVbDhHLEdBQzVCLEdBQUlyeEIsRUFBUThULFdBQVksQ0FDcEIsR0FBSXVkLEVBQUcxeUIsUUFBVTJILEtBQU0sTUFDdkJBLE1BQUs1SixvQkFBb0I0d0ksRUFBa0JDLEdBRTNDMWpJLEdBQWdDLGtCQUFiQSxJQUNuQkEsRUFBU3RPLE9BR2J5RSxHQUFROFQsV0FDUi9HLEVBQUd6USxpQkFBaUJneEksRUFBa0JDLEdBRXRDQSxJQW9CWixJQUFJanZILEVBQUUsZUFBZTFnQixPQUNqQixHQU1JK3VJLEdBSkFPLE1BRmEvb0ksTUFBTTVJLEtBQUtTLFNBQVNtTixpQkFBaUIsZ0JBSWxEcWpJLEVBQU94d0ksU0FBU3lvQyxjQUFjLFNBSTlCb29HLEtBQWlCMW9JLE1BQU01SSxLQUFLUyxTQUFTbU4saUJBQWlCLHFCQUV0RGtoSSxFQUFPcnVJLFNBQVN5b0MsY0FBYyxTQUM5QjZsRyxFQUFZRCxFQUFLNWxHLGNBQWMsZUFrSnZDejZCLE1BRURsQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHNlcmRpbW9hIG9uIDE0LjEyLjE1LlxuICovXG5cbi8qIVxuICogaW1hZ2VzTG9hZGVkIFBBQ0tBR0VEIHYzLjEuNVxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31mdW5jdGlvbiB0KGUsdCl7Zm9yKHZhciBuPWUubGVuZ3RoO24tLTspaWYoZVtuXS5saXN0ZW5lcj09PXQpcmV0dXJuIG47cmV0dXJuLTF9ZnVuY3Rpb24gbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tlXS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fXZhciBpPWUucHJvdG90eXBlLHI9dGhpcyxvPXIuRXZlbnRFbWl0dGVyO2kuZ2V0TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG4saT10aGlzLl9nZXRFdmVudHMoKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7dD17fTtmb3IobiBpbiBpKWkuaGFzT3duUHJvcGVydHkobikmJmUudGVzdChuKSYmKHRbbl09aVtuXSl9ZWxzZSB0PWlbZV18fChpW2VdPVtdKTtyZXR1cm4gdH0saS5mbGF0dGVuTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG49W107Zm9yKHQ9MDtlLmxlbmd0aD50O3QrPTEpbi5wdXNoKGVbdF0ubGlzdGVuZXIpO3JldHVybiBufSxpLmdldExpc3RlbmVyc0FzT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcy5nZXRMaXN0ZW5lcnMoZSk7cmV0dXJuIG4gaW5zdGFuY2VvZiBBcnJheSYmKHQ9e30sdFtlXT1uKSx0fHxufSxpLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsbil7dmFyIGkscj10aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGUpLG89XCJvYmplY3RcIj09dHlwZW9mIG47Zm9yKGkgaW4gcilyLmhhc093blByb3BlcnR5KGkpJiYtMT09PXQocltpXSxuKSYmcltpXS5wdXNoKG8/bjp7bGlzdGVuZXI6bixvbmNlOiExfSk7cmV0dXJuIHRoaXN9LGkub249bihcImFkZExpc3RlbmVyXCIpLGkuYWRkT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZSx7bGlzdGVuZXI6dCxvbmNlOiEwfSl9LGkub25jZT1uKFwiYWRkT25jZUxpc3RlbmVyXCIpLGkuZGVmaW5lRXZlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0TGlzdGVuZXJzKGUpLHRoaXN9LGkuZGVmaW5lRXZlbnRzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO2UubGVuZ3RoPnQ7dCs9MSl0aGlzLmRlZmluZUV2ZW50KGVbdF0pO3JldHVybiB0aGlzfSxpLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsbil7dmFyIGkscixvPXRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZSk7Zm9yKHIgaW4gbylvLmhhc093blByb3BlcnR5KHIpJiYoaT10KG9bcl0sbiksLTEhPT1pJiZvW3JdLnNwbGljZShpLDEpKTtyZXR1cm4gdGhpc30saS5vZmY9bihcInJlbW92ZUxpc3RlbmVyXCIpLGkuYWRkTGlzdGVuZXJzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyghMSxlLHQpfSxpLnJlbW92ZUxpc3RlbmVycz1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnMoITAsZSx0KX0saS5tYW5pcHVsYXRlTGlzdGVuZXJzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyLG89ZT90aGlzLnJlbW92ZUxpc3RlbmVyOnRoaXMuYWRkTGlzdGVuZXIscz1lP3RoaXMucmVtb3ZlTGlzdGVuZXJzOnRoaXMuYWRkTGlzdGVuZXJzO2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0fHx0IGluc3RhbmNlb2YgUmVnRXhwKWZvcihpPW4ubGVuZ3RoO2ktLTspby5jYWxsKHRoaXMsdCxuW2ldKTtlbHNlIGZvcihpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmKHI9dFtpXSkmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiByP28uY2FsbCh0aGlzLGkscik6cy5jYWxsKHRoaXMsaSxyKSk7cmV0dXJuIHRoaXN9LGkucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj10eXBlb2YgZSxpPXRoaXMuX2dldEV2ZW50cygpO2lmKFwic3RyaW5nXCI9PT1uKWRlbGV0ZSBpW2VdO2Vsc2UgaWYoXCJvYmplY3RcIj09PW4pZm9yKHQgaW4gaSlpLmhhc093blByb3BlcnR5KHQpJiZlLnRlc3QodCkmJmRlbGV0ZSBpW3RdO2Vsc2UgZGVsZXRlIHRoaXMuX2V2ZW50cztyZXR1cm4gdGhpc30saS5yZW1vdmVBbGxMaXN0ZW5lcnM9bihcInJlbW92ZUV2ZW50XCIpLGkuZW1pdEV2ZW50PWZ1bmN0aW9uKGUsdCl7dmFyIG4saSxyLG8scz10aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGUpO2ZvcihyIGluIHMpaWYocy5oYXNPd25Qcm9wZXJ0eShyKSlmb3IoaT1zW3JdLmxlbmd0aDtpLS07KW49c1tyXVtpXSxuLm9uY2U9PT0hMCYmdGhpcy5yZW1vdmVMaXN0ZW5lcihlLG4ubGlzdGVuZXIpLG89bi5saXN0ZW5lci5hcHBseSh0aGlzLHR8fFtdKSxvPT09dGhpcy5fZ2V0T25jZVJldHVyblZhbHVlKCkmJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSxuLmxpc3RlbmVyKTtyZXR1cm4gdGhpc30saS50cmlnZ2VyPW4oXCJlbWl0RXZlbnRcIiksaS5lbWl0PWZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gdGhpcy5lbWl0RXZlbnQoZSx0KX0saS5zZXRPbmNlUmV0dXJuVmFsdWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX29uY2VSZXR1cm5WYWx1ZT1lLHRoaXN9LGkuX2dldE9uY2VSZXR1cm5WYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc093blByb3BlcnR5KFwiX29uY2VSZXR1cm5WYWx1ZVwiKT90aGlzLl9vbmNlUmV0dXJuVmFsdWU6ITB9LGkuX2dldEV2ZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9e30pfSxlLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gci5FdmVudEVtaXR0ZXI9byxlfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlclwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGV9KTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lOnRoaXMuRXZlbnRFbWl0dGVyPWV9KS5jYWxsKHRoaXMpLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIG49ZS5ldmVudDtyZXR1cm4gbi50YXJnZXQ9bi50YXJnZXR8fG4uc3JjRWxlbWVudHx8dCxufXZhciBuPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxpPWZ1bmN0aW9uKCl7fTtuLmFkZEV2ZW50TGlzdGVuZXI/aT1mdW5jdGlvbihlLHQsbil7ZS5hZGRFdmVudExpc3RlbmVyKHQsbiwhMSl9Om4uYXR0YWNoRXZlbnQmJihpPWZ1bmN0aW9uKGUsbixpKXtlW24raV09aS5oYW5kbGVFdmVudD9mdW5jdGlvbigpe3ZhciBuPXQoZSk7aS5oYW5kbGVFdmVudC5jYWxsKGksbil9OmZ1bmN0aW9uKCl7dmFyIG49dChlKTtpLmNhbGwoZSxuKX0sZS5hdHRhY2hFdmVudChcIm9uXCIrbixlW24raV0pfSk7dmFyIHI9ZnVuY3Rpb24oKXt9O24ucmVtb3ZlRXZlbnRMaXN0ZW5lcj9yPWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuLCExKX06bi5kZXRhY2hFdmVudCYmKHI9ZnVuY3Rpb24oZSx0LG4pe2UuZGV0YWNoRXZlbnQoXCJvblwiK3QsZVt0K25dKTt0cnl7ZGVsZXRlIGVbdCtuXX1jYXRjaChpKXtlW3Qrbl09dm9pZCAwfX0pO3ZhciBvPXtiaW5kOmksdW5iaW5kOnJ9O1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJldmVudGllL2V2ZW50aWVcIixvKTplLmV2ZW50aWU9b30odGhpcyksZnVuY3Rpb24oZSx0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXJcIixcImV2ZW50aWUvZXZlbnRpZVwiXSxmdW5jdGlvbihuLGkpe3JldHVybiB0KGUsbixpKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoZSxyZXF1aXJlKFwiZXZlbnRFbWl0dGVyXCIpLHJlcXVpcmUoXCJldmVudGllXCIpKTplLmltYWdlc0xvYWRlZD10KGUsZS5FdmVudEVtaXR0ZXIsZS5ldmVudGllKX0odGhpcyxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gaShlLHQpe2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiByKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PWQuY2FsbChlKX1mdW5jdGlvbiBvKGUpe3ZhciB0PVtdO2lmKHIoZSkpdD1lO2Vsc2UgaWYoXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKWZvcih2YXIgbj0wLGk9ZS5sZW5ndGg7aT5uO24rKyl0LnB1c2goZVtuXSk7ZWxzZSB0LnB1c2goZSk7cmV0dXJuIHR9ZnVuY3Rpb24gcyhlLHQsbil7aWYoISh0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBzKGUsdCk7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZSkpLHRoaXMuZWxlbWVudHM9byhlKSx0aGlzLm9wdGlvbnM9aSh7fSx0aGlzLm9wdGlvbnMpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/bj10OmkodGhpcy5vcHRpb25zLHQpLG4mJnRoaXMub24oXCJhbHdheXNcIixuKSx0aGlzLmdldEltYWdlcygpLGEmJih0aGlzLmpxRGVmZXJyZWQ9bmV3IGEuRGVmZXJyZWQpO3ZhciByPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe3IuY2hlY2soKX0pfWZ1bmN0aW9uIGMoZSl7dGhpcy5pbWc9ZX1mdW5jdGlvbiBmKGUpe3RoaXMuc3JjPWUsdltlXT10aGlzfXZhciBhPWUualF1ZXJ5LHU9ZS5jb25zb2xlLGg9dSE9PXZvaWQgMCxkPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7cy5wcm90b3R5cGU9bmV3IHQscy5wcm90b3R5cGUub3B0aW9ucz17fSxzLnByb3RvdHlwZS5nZXRJbWFnZXM9ZnVuY3Rpb24oKXt0aGlzLmltYWdlcz1bXTtmb3IodmFyIGU9MCx0PXRoaXMuZWxlbWVudHMubGVuZ3RoO3Q+ZTtlKyspe3ZhciBuPXRoaXMuZWxlbWVudHNbZV07aWYoXCJJTUdcIj09PW4ubm9kZU5hbWUmJnRoaXMuYWRkSW1hZ2Uobiksbi5ub2RlVHlwZSYmKDE9PT1uLm5vZGVUeXBlfHw5PT09bi5ub2RlVHlwZSkpZm9yKHZhciBpPW4ucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKSxyPTAsbz1pLmxlbmd0aDtvPnI7cisrKXt2YXIgcz1pW3JdO3RoaXMuYWRkSW1hZ2Uocyl9fX0scy5wcm90b3R5cGUuYWRkSW1hZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IGMoZSk7dGhpcy5pbWFnZXMucHVzaCh0KX0scy5wcm90b3R5cGUuY2hlY2s9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUscil7cmV0dXJuIHQub3B0aW9ucy5kZWJ1ZyYmaCYmdS5sb2coXCJjb25maXJtXCIsZSxyKSx0LnByb2dyZXNzKGUpLG4rKyxuPT09aSYmdC5jb21wbGV0ZSgpLCEwfXZhciB0PXRoaXMsbj0wLGk9dGhpcy5pbWFnZXMubGVuZ3RoO2lmKHRoaXMuaGFzQW55QnJva2VuPSExLCFpKXJldHVybiB0aGlzLmNvbXBsZXRlKCksdm9pZCAwO2Zvcih2YXIgcj0wO2k+cjtyKyspe3ZhciBvPXRoaXMuaW1hZ2VzW3JdO28ub24oXCJjb25maXJtXCIsZSksby5jaGVjaygpfX0scy5wcm90b3R5cGUucHJvZ3Jlc3M9ZnVuY3Rpb24oZSl7dGhpcy5oYXNBbnlCcm9rZW49dGhpcy5oYXNBbnlCcm9rZW58fCFlLmlzTG9hZGVkO3ZhciB0PXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe3QuZW1pdChcInByb2dyZXNzXCIsdCxlKSx0LmpxRGVmZXJyZWQmJnQuanFEZWZlcnJlZC5ub3RpZnkmJnQuanFEZWZlcnJlZC5ub3RpZnkodCxlKX0pfSxzLnByb3RvdHlwZS5jb21wbGV0ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaGFzQW55QnJva2VuP1wiZmFpbFwiOlwiZG9uZVwiO3RoaXMuaXNDb21wbGV0ZT0hMDt2YXIgdD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpZih0LmVtaXQoZSx0KSx0LmVtaXQoXCJhbHdheXNcIix0KSx0LmpxRGVmZXJyZWQpe3ZhciBuPXQuaGFzQW55QnJva2VuP1wicmVqZWN0XCI6XCJyZXNvbHZlXCI7dC5qcURlZmVycmVkW25dKHQpfX0pfSxhJiYoYS5mbi5pbWFnZXNMb2FkZWQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgcyh0aGlzLGUsdCk7cmV0dXJuIG4uanFEZWZlcnJlZC5wcm9taXNlKGEodGhpcykpfSksYy5wcm90b3R5cGU9bmV3IHQsYy5wcm90b3R5cGUuY2hlY2s9ZnVuY3Rpb24oKXt2YXIgZT12W3RoaXMuaW1nLnNyY118fG5ldyBmKHRoaXMuaW1nLnNyYyk7aWYoZS5pc0NvbmZpcm1lZClyZXR1cm4gdGhpcy5jb25maXJtKGUuaXNMb2FkZWQsXCJjYWNoZWQgd2FzIGNvbmZpcm1lZFwiKSx2b2lkIDA7aWYodGhpcy5pbWcuY29tcGxldGUmJnZvaWQgMCE9PXRoaXMuaW1nLm5hdHVyYWxXaWR0aClyZXR1cm4gdGhpcy5jb25maXJtKDAhPT10aGlzLmltZy5uYXR1cmFsV2lkdGgsXCJuYXR1cmFsV2lkdGhcIiksdm9pZCAwO3ZhciB0PXRoaXM7ZS5vbihcImNvbmZpcm1cIixmdW5jdGlvbihlLG4pe3JldHVybiB0LmNvbmZpcm0oZS5pc0xvYWRlZCxuKSwhMH0pLGUuY2hlY2soKX0sYy5wcm90b3R5cGUuY29uZmlybT1mdW5jdGlvbihlLHQpe3RoaXMuaXNMb2FkZWQ9ZSx0aGlzLmVtaXQoXCJjb25maXJtXCIsdGhpcyx0KX07dmFyIHY9e307cmV0dXJuIGYucHJvdG90eXBlPW5ldyB0LGYucHJvdG90eXBlLmNoZWNrPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNDaGVja2VkKXt2YXIgZT1uZXcgSW1hZ2U7bi5iaW5kKGUsXCJsb2FkXCIsdGhpcyksbi5iaW5kKGUsXCJlcnJvclwiLHRoaXMpLGUuc3JjPXRoaXMuc3JjLHRoaXMuaXNDaGVja2VkPSEwfX0sZi5wcm90b3R5cGUuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJvblwiK2UudHlwZTt0aGlzW3RdJiZ0aGlzW3RdKGUpfSxmLnByb3RvdHlwZS5vbmxvYWQ9ZnVuY3Rpb24oZSl7dGhpcy5jb25maXJtKCEwLFwib25sb2FkXCIpLHRoaXMudW5iaW5kUHJveHlFdmVudHMoZSl9LGYucHJvdG90eXBlLm9uZXJyb3I9ZnVuY3Rpb24oZSl7dGhpcy5jb25maXJtKCExLFwib25lcnJvclwiKSx0aGlzLnVuYmluZFByb3h5RXZlbnRzKGUpfSxmLnByb3RvdHlwZS5jb25maXJtPWZ1bmN0aW9uKGUsdCl7dGhpcy5pc0NvbmZpcm1lZD0hMCx0aGlzLmlzTG9hZGVkPWUsdGhpcy5lbWl0KFwiY29uZmlybVwiLHRoaXMsdCl9LGYucHJvdG90eXBlLnVuYmluZFByb3h5RXZlbnRzPWZ1bmN0aW9uKGUpe24udW5iaW5kKGUudGFyZ2V0LFwibG9hZFwiLHRoaXMpLG4udW5iaW5kKGUudGFyZ2V0LFwiZXJyb3JcIix0aGlzKX0sc30pO1xuLyohXG5XYXlwb2ludHMgLSA0LjAuMFxuQ29weXJpZ2h0IMKpIDIwMTEtMjAxNSBDYWxlYiBUcm91Z2h0b25cbkxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmh0dHBzOi8vZ2l0aHViLmNvbS9pbWFrZXdlYnRoaW5ncy93YXlwb2ludHMvYmxvZy9tYXN0ZXIvbGljZW5zZXMudHh0XG4qL1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIga2V5Q291bnRlciA9IDBcbiAgdmFyIGFsbFdheXBvaW50cyA9IHt9XG5cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3dheXBvaW50ICovXG4gIGZ1bmN0aW9uIFdheXBvaW50KG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gb3B0aW9ucyBwYXNzZWQgdG8gV2F5cG9pbnQgY29uc3RydWN0b3InKVxuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IG9wdGlvbiBwYXNzZWQgdG8gV2F5cG9pbnQgY29uc3RydWN0b3InKVxuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuaGFuZGxlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBoYW5kbGVyIG9wdGlvbiBwYXNzZWQgdG8gV2F5cG9pbnQgY29uc3RydWN0b3InKVxuICAgIH1cblxuICAgIHRoaXMua2V5ID0gJ3dheXBvaW50LScgKyBrZXlDb3VudGVyXG4gICAgdGhpcy5vcHRpb25zID0gV2F5cG9pbnQuQWRhcHRlci5leHRlbmQoe30sIFdheXBvaW50LmRlZmF1bHRzLCBvcHRpb25zKVxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMub3B0aW9ucy5lbGVtZW50XG4gICAgdGhpcy5hZGFwdGVyID0gbmV3IFdheXBvaW50LkFkYXB0ZXIodGhpcy5lbGVtZW50KVxuICAgIHRoaXMuY2FsbGJhY2sgPSBvcHRpb25zLmhhbmRsZXJcbiAgICB0aGlzLmF4aXMgPSB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbCA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCdcbiAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZW5hYmxlZFxuICAgIHRoaXMudHJpZ2dlclBvaW50ID0gbnVsbFxuICAgIHRoaXMuZ3JvdXAgPSBXYXlwb2ludC5Hcm91cC5maW5kT3JDcmVhdGUoe1xuICAgICAgbmFtZTogdGhpcy5vcHRpb25zLmdyb3VwLFxuICAgICAgYXhpczogdGhpcy5heGlzXG4gICAgfSlcbiAgICB0aGlzLmNvbnRleHQgPSBXYXlwb2ludC5Db250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCh0aGlzLm9wdGlvbnMuY29udGV4dClcblxuICAgIGlmIChXYXlwb2ludC5vZmZzZXRBbGlhc2VzW3RoaXMub3B0aW9ucy5vZmZzZXRdKSB7XG4gICAgICB0aGlzLm9wdGlvbnMub2Zmc2V0ID0gV2F5cG9pbnQub2Zmc2V0QWxpYXNlc1t0aGlzLm9wdGlvbnMub2Zmc2V0XVxuICAgIH1cbiAgICB0aGlzLmdyb3VwLmFkZCh0aGlzKVxuICAgIHRoaXMuY29udGV4dC5hZGQodGhpcylcbiAgICBhbGxXYXlwb2ludHNbdGhpcy5rZXldID0gdGhpc1xuICAgIGtleUNvdW50ZXIgKz0gMVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUucXVldWVUcmlnZ2VyID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgdGhpcy5ncm91cC5xdWV1ZVRyaWdnZXIodGhpcywgZGlyZWN0aW9uKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh0aGlzLmNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgfVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kZXN0cm95ICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb250ZXh0LnJlbW92ZSh0aGlzKVxuICAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpXG4gICAgZGVsZXRlIGFsbFdheXBvaW50c1t0aGlzLmtleV1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZGlzYWJsZSAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZW5hYmxlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRleHQucmVmcmVzaCgpXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL25leHQgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cC5uZXh0KHRoaXMpXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3ByZXZpb3VzICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5wcmV2aW91cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdyb3VwLnByZXZpb3VzKHRoaXMpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIFdheXBvaW50Lmludm9rZUFsbCA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBhbGxXYXlwb2ludHNBcnJheSA9IFtdXG4gICAgZm9yICh2YXIgd2F5cG9pbnRLZXkgaW4gYWxsV2F5cG9pbnRzKSB7XG4gICAgICBhbGxXYXlwb2ludHNBcnJheS5wdXNoKGFsbFdheXBvaW50c1t3YXlwb2ludEtleV0pXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBlbmQgPSBhbGxXYXlwb2ludHNBcnJheS5sZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgYWxsV2F5cG9pbnRzQXJyYXlbaV1bbWV0aG9kXSgpXG4gICAgfVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kZXN0cm95LWFsbCAqL1xuICBXYXlwb2ludC5kZXN0cm95QWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuaW52b2tlQWxsKCdkZXN0cm95JylcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZGlzYWJsZS1hbGwgKi9cbiAgV2F5cG9pbnQuZGlzYWJsZUFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIFdheXBvaW50Lmludm9rZUFsbCgnZGlzYWJsZScpXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2VuYWJsZS1hbGwgKi9cbiAgV2F5cG9pbnQuZW5hYmxlQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuaW52b2tlQWxsKCdlbmFibGUnKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9yZWZyZXNoLWFsbCAqL1xuICBXYXlwb2ludC5yZWZyZXNoQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvdmlld3BvcnQtaGVpZ2h0ICovXG4gIFdheXBvaW50LnZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3ZpZXdwb3J0LXdpZHRoICovXG4gIFdheXBvaW50LnZpZXdwb3J0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG4gIH1cblxuICBXYXlwb2ludC5hZGFwdGVycyA9IFtdXG5cbiAgV2F5cG9pbnQuZGVmYXVsdHMgPSB7XG4gICAgY29udGV4dDogd2luZG93LFxuICAgIGNvbnRpbnVvdXM6IHRydWUsXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBncm91cDogJ2RlZmF1bHQnLFxuICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgIG9mZnNldDogMFxuICB9XG5cbiAgV2F5cG9pbnQub2Zmc2V0QWxpYXNlcyA9IHtcbiAgICAnYm90dG9tLWluLXZpZXcnOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuaW5uZXJIZWlnaHQoKSAtIHRoaXMuYWRhcHRlci5vdXRlckhlaWdodCgpXG4gICAgfSxcbiAgICAncmlnaHQtaW4tdmlldyc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pbm5lcldpZHRoKCkgLSB0aGlzLmFkYXB0ZXIub3V0ZXJXaWR0aCgpXG4gICAgfVxuICB9XG5cbiAgd2luZG93LldheXBvaW50ID0gV2F5cG9pbnRcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25GcmFtZVNoaW0oY2FsbGJhY2spIHtcbiAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKVxuICB9XG5cbiAgdmFyIGtleUNvdW50ZXIgPSAwXG4gIHZhciBjb250ZXh0cyA9IHt9XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuICB2YXIgb2xkV2luZG93TG9hZCA9IHdpbmRvdy5vbmxvYWRcblxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dCAqL1xuICBmdW5jdGlvbiBDb250ZXh0KGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5BZGFwdGVyID0gV2F5cG9pbnQuQWRhcHRlclxuICAgIHRoaXMuYWRhcHRlciA9IG5ldyB0aGlzLkFkYXB0ZXIoZWxlbWVudClcbiAgICB0aGlzLmtleSA9ICd3YXlwb2ludC1jb250ZXh0LScgKyBrZXlDb3VudGVyXG4gICAgdGhpcy5kaWRTY3JvbGwgPSBmYWxzZVxuICAgIHRoaXMuZGlkUmVzaXplID0gZmFsc2VcbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcbiAgICAgIHg6IHRoaXMuYWRhcHRlci5zY3JvbGxMZWZ0KCksXG4gICAgICB5OiB0aGlzLmFkYXB0ZXIuc2Nyb2xsVG9wKClcbiAgICB9XG4gICAgdGhpcy53YXlwb2ludHMgPSB7XG4gICAgICB2ZXJ0aWNhbDoge30sXG4gICAgICBob3Jpem9udGFsOiB7fVxuICAgIH1cblxuICAgIGVsZW1lbnQud2F5cG9pbnRDb250ZXh0S2V5ID0gdGhpcy5rZXlcbiAgICBjb250ZXh0c1tlbGVtZW50LndheXBvaW50Q29udGV4dEtleV0gPSB0aGlzXG4gICAga2V5Q291bnRlciArPSAxXG5cbiAgICB0aGlzLmNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIoKVxuICAgIHRoaXMuY3JlYXRlVGhyb3R0bGVkUmVzaXplSGFuZGxlcigpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdmFyIGF4aXMgPSB3YXlwb2ludC5vcHRpb25zLmhvcml6b250YWwgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnXG4gICAgdGhpcy53YXlwb2ludHNbYXhpc11bd2F5cG9pbnQua2V5XSA9IHdheXBvaW50XG4gICAgdGhpcy5yZWZyZXNoKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuY2hlY2tFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBob3Jpem9udGFsRW1wdHkgPSB0aGlzLkFkYXB0ZXIuaXNFbXB0eU9iamVjdCh0aGlzLndheXBvaW50cy5ob3Jpem9udGFsKVxuICAgIHZhciB2ZXJ0aWNhbEVtcHR5ID0gdGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMudmVydGljYWwpXG4gICAgaWYgKGhvcml6b250YWxFbXB0eSAmJiB2ZXJ0aWNhbEVtcHR5KSB7XG4gICAgICB0aGlzLmFkYXB0ZXIub2ZmKCcud2F5cG9pbnRzJylcbiAgICAgIGRlbGV0ZSBjb250ZXh0c1t0aGlzLmtleV1cbiAgICB9XG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmNyZWF0ZVRocm90dGxlZFJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLmhhbmRsZVJlc2l6ZSgpXG4gICAgICBzZWxmLmRpZFJlc2l6ZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5hZGFwdGVyLm9uKCdyZXNpemUud2F5cG9pbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuZGlkUmVzaXplKSB7XG4gICAgICAgIHNlbGYuZGlkUmVzaXplID0gdHJ1ZVxuICAgICAgICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzaXplSGFuZGxlcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgZnVuY3Rpb24gc2Nyb2xsSGFuZGxlcigpIHtcbiAgICAgIHNlbGYuaGFuZGxlU2Nyb2xsKClcbiAgICAgIHNlbGYuZGlkU2Nyb2xsID0gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLmFkYXB0ZXIub24oJ3Njcm9sbC53YXlwb2ludHMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2VsZi5kaWRTY3JvbGwgfHwgV2F5cG9pbnQuaXNUb3VjaCkge1xuICAgICAgICBzZWxmLmRpZFNjcm9sbCA9IHRydWVcbiAgICAgICAgV2F5cG9pbnQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjcm9sbEhhbmRsZXIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaGFuZGxlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyaWdnZXJlZEdyb3VwcyA9IHt9XG4gICAgdmFyIGF4ZXMgPSB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIG5ld1Njcm9sbDogdGhpcy5hZGFwdGVyLnNjcm9sbExlZnQoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC54LFxuICAgICAgICBmb3J3YXJkOiAncmlnaHQnLFxuICAgICAgICBiYWNrd2FyZDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgbmV3U2Nyb2xsOiB0aGlzLmFkYXB0ZXIuc2Nyb2xsVG9wKCksXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueSxcbiAgICAgICAgZm9yd2FyZDogJ2Rvd24nLFxuICAgICAgICBiYWNrd2FyZDogJ3VwJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xuICAgICAgdmFyIGF4aXMgPSBheGVzW2F4aXNLZXldXG4gICAgICB2YXIgaXNGb3J3YXJkID0gYXhpcy5uZXdTY3JvbGwgPiBheGlzLm9sZFNjcm9sbFxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRm9yd2FyZCA/IGF4aXMuZm9yd2FyZCA6IGF4aXMuYmFja3dhcmRcblxuICAgICAgZm9yICh2YXIgd2F5cG9pbnRLZXkgaW4gdGhpcy53YXlwb2ludHNbYXhpc0tleV0pIHtcbiAgICAgICAgdmFyIHdheXBvaW50ID0gdGhpcy53YXlwb2ludHNbYXhpc0tleV1bd2F5cG9pbnRLZXldXG4gICAgICAgIHZhciB3YXNCZWZvcmVUcmlnZ2VyUG9pbnQgPSBheGlzLm9sZFNjcm9sbCA8IHdheXBvaW50LnRyaWdnZXJQb2ludFxuICAgICAgICB2YXIgbm93QWZ0ZXJUcmlnZ2VyUG9pbnQgPSBheGlzLm5ld1Njcm9sbCA+PSB3YXlwb2ludC50cmlnZ2VyUG9pbnRcbiAgICAgICAgdmFyIGNyb3NzZWRGb3J3YXJkID0gd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmIG5vd0FmdGVyVHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBjcm9zc2VkQmFja3dhcmQgPSAhd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmICFub3dBZnRlclRyaWdnZXJQb2ludFxuICAgICAgICBpZiAoY3Jvc3NlZEZvcndhcmQgfHwgY3Jvc3NlZEJhY2t3YXJkKSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGRpcmVjdGlvbilcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xuICAgICAgdHJpZ2dlcmVkR3JvdXBzW2dyb3VwS2V5XS5mbHVzaFRyaWdnZXJzKClcbiAgICB9XG5cbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcbiAgICAgIHg6IGF4ZXMuaG9yaXpvbnRhbC5uZXdTY3JvbGwsXG4gICAgICB5OiBheGVzLnZlcnRpY2FsLm5ld1Njcm9sbFxuICAgIH1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIGlmICh0aGlzLmVsZW1lbnQgPT0gdGhpcy5lbGVtZW50LndpbmRvdykge1xuICAgICAgcmV0dXJuIFdheXBvaW50LnZpZXdwb3J0SGVpZ2h0KClcbiAgICB9XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuaW5uZXJIZWlnaHQoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIGRlbGV0ZSB0aGlzLndheXBvaW50c1t3YXlwb2ludC5heGlzXVt3YXlwb2ludC5rZXldXG4gICAgdGhpcy5jaGVja0VtcHR5KClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG4gICAgaWYgKHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93KSB7XG4gICAgICByZXR1cm4gV2F5cG9pbnQudmlld3BvcnRXaWR0aCgpXG4gICAgfVxuICAgIC8qZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlubmVyV2lkdGgoKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9jb250ZXh0LWRlc3Ryb3kgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbGxXYXlwb2ludHMgPSBbXVxuICAgIGZvciAodmFyIGF4aXMgaW4gdGhpcy53YXlwb2ludHMpIHtcbiAgICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIHRoaXMud2F5cG9pbnRzW2F4aXNdKSB7XG4gICAgICAgIGFsbFdheXBvaW50cy5wdXNoKHRoaXMud2F5cG9pbnRzW2F4aXNdW3dheXBvaW50S2V5XSlcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgYWxsV2F5cG9pbnRzW2ldLmRlc3Ryb3koKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dC1yZWZyZXNoICovXG4gIENvbnRleHQucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIHZhciBpc1dpbmRvdyA9IHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHZhciBjb250ZXh0T2Zmc2V0ID0gaXNXaW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLmFkYXB0ZXIub2Zmc2V0KClcbiAgICB2YXIgdHJpZ2dlcmVkR3JvdXBzID0ge31cbiAgICB2YXIgYXhlc1xuXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKVxuICAgIGF4ZXMgPSB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIGNvbnRleHRPZmZzZXQ6IGlzV2luZG93ID8gMCA6IGNvbnRleHRPZmZzZXQubGVmdCxcbiAgICAgICAgY29udGV4dFNjcm9sbDogaXNXaW5kb3cgPyAwIDogdGhpcy5vbGRTY3JvbGwueCxcbiAgICAgICAgY29udGV4dERpbWVuc2lvbjogdGhpcy5pbm5lcldpZHRoKCksXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueCxcbiAgICAgICAgZm9yd2FyZDogJ3JpZ2h0JyxcbiAgICAgICAgYmFja3dhcmQ6ICdsZWZ0JyxcbiAgICAgICAgb2Zmc2V0UHJvcDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgY29udGV4dE9mZnNldDogaXNXaW5kb3cgPyAwIDogY29udGV4dE9mZnNldC50b3AsXG4gICAgICAgIGNvbnRleHRTY3JvbGw6IGlzV2luZG93ID8gMCA6IHRoaXMub2xkU2Nyb2xsLnksXG4gICAgICAgIGNvbnRleHREaW1lbnNpb246IHRoaXMuaW5uZXJIZWlnaHQoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC55LFxuICAgICAgICBmb3J3YXJkOiAnZG93bicsXG4gICAgICAgIGJhY2t3YXJkOiAndXAnLFxuICAgICAgICBvZmZzZXRQcm9wOiAndG9wJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xuICAgICAgdmFyIGF4aXMgPSBheGVzW2F4aXNLZXldXG4gICAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiB0aGlzLndheXBvaW50c1theGlzS2V5XSkge1xuICAgICAgICB2YXIgd2F5cG9pbnQgPSB0aGlzLndheXBvaW50c1theGlzS2V5XVt3YXlwb2ludEtleV1cbiAgICAgICAgdmFyIGFkanVzdG1lbnQgPSB3YXlwb2ludC5vcHRpb25zLm9mZnNldFxuICAgICAgICB2YXIgb2xkVHJpZ2dlclBvaW50ID0gd2F5cG9pbnQudHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBlbGVtZW50T2Zmc2V0ID0gMFxuICAgICAgICB2YXIgZnJlc2hXYXlwb2ludCA9IG9sZFRyaWdnZXJQb2ludCA9PSBudWxsXG4gICAgICAgIHZhciBjb250ZXh0TW9kaWZpZXIsIHdhc0JlZm9yZVNjcm9sbCwgbm93QWZ0ZXJTY3JvbGxcbiAgICAgICAgdmFyIHRyaWdnZXJlZEJhY2t3YXJkLCB0cmlnZ2VyZWRGb3J3YXJkXG5cbiAgICAgICAgaWYgKHdheXBvaW50LmVsZW1lbnQgIT09IHdheXBvaW50LmVsZW1lbnQud2luZG93KSB7XG4gICAgICAgICAgZWxlbWVudE9mZnNldCA9IHdheXBvaW50LmFkYXB0ZXIub2Zmc2V0KClbYXhpcy5vZmZzZXRQcm9wXVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYWRqdXN0bWVudCA9IGFkanVzdG1lbnQuYXBwbHkod2F5cG9pbnQpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFkanVzdG1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYWRqdXN0bWVudCA9IHBhcnNlRmxvYXQoYWRqdXN0bWVudClcbiAgICAgICAgICBpZiAod2F5cG9pbnQub3B0aW9ucy5vZmZzZXQuaW5kZXhPZignJScpID4gLSAxKSB7XG4gICAgICAgICAgICBhZGp1c3RtZW50ID0gTWF0aC5jZWlsKGF4aXMuY29udGV4dERpbWVuc2lvbiAqIGFkanVzdG1lbnQgLyAxMDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dE1vZGlmaWVyID0gYXhpcy5jb250ZXh0U2Nyb2xsIC0gYXhpcy5jb250ZXh0T2Zmc2V0XG4gICAgICAgIHdheXBvaW50LnRyaWdnZXJQb2ludCA9IGVsZW1lbnRPZmZzZXQgKyBjb250ZXh0TW9kaWZpZXIgLSBhZGp1c3RtZW50XG4gICAgICAgIHdhc0JlZm9yZVNjcm9sbCA9IG9sZFRyaWdnZXJQb2ludCA8IGF4aXMub2xkU2Nyb2xsXG4gICAgICAgIG5vd0FmdGVyU2Nyb2xsID0gd2F5cG9pbnQudHJpZ2dlclBvaW50ID49IGF4aXMub2xkU2Nyb2xsXG4gICAgICAgIHRyaWdnZXJlZEJhY2t3YXJkID0gd2FzQmVmb3JlU2Nyb2xsICYmIG5vd0FmdGVyU2Nyb2xsXG4gICAgICAgIHRyaWdnZXJlZEZvcndhcmQgPSAhd2FzQmVmb3JlU2Nyb2xsICYmICFub3dBZnRlclNjcm9sbFxuXG4gICAgICAgIGlmICghZnJlc2hXYXlwb2ludCAmJiB0cmlnZ2VyZWRCYWNrd2FyZCkge1xuICAgICAgICAgIHdheXBvaW50LnF1ZXVlVHJpZ2dlcihheGlzLmJhY2t3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmcmVzaFdheXBvaW50ICYmIHRyaWdnZXJlZEZvcndhcmQpIHtcbiAgICAgICAgICB3YXlwb2ludC5xdWV1ZVRyaWdnZXIoYXhpcy5mb3J3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZyZXNoV2F5cG9pbnQgJiYgYXhpcy5vbGRTY3JvbGwgPj0gd2F5cG9pbnQudHJpZ2dlclBvaW50KSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuZm9yd2FyZClcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xuICAgICAgICB0cmlnZ2VyZWRHcm91cHNbZ3JvdXBLZXldLmZsdXNoVHJpZ2dlcnMoKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQ29udGV4dC5maW5kQnlFbGVtZW50KGVsZW1lbnQpIHx8IG5ldyBDb250ZXh0KGVsZW1lbnQpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucmVmcmVzaEFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGNvbnRleHRJZCBpbiBjb250ZXh0cykge1xuICAgICAgY29udGV4dHNbY29udGV4dElkXS5yZWZyZXNoKClcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2NvbnRleHQtZmluZC1ieS1lbGVtZW50ICovXG4gIENvbnRleHQuZmluZEJ5RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY29udGV4dHNbZWxlbWVudC53YXlwb2ludENvbnRleHRLZXldXG4gIH1cblxuICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG9sZFdpbmRvd0xvYWQpIHtcbiAgICAgIG9sZFdpbmRvd0xvYWQoKVxuICAgIH1cbiAgICBDb250ZXh0LnJlZnJlc2hBbGwoKVxuICB9XG5cbiAgV2F5cG9pbnQucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgcmVxdWVzdEZuID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lU2hpbVxuICAgIHJlcXVlc3RGbi5jYWxsKHdpbmRvdywgY2FsbGJhY2spXG4gIH1cbiAgV2F5cG9pbnQuQ29udGV4dCA9IENvbnRleHRcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGZ1bmN0aW9uIGJ5VHJpZ2dlclBvaW50KGEsIGIpIHtcbiAgICByZXR1cm4gYS50cmlnZ2VyUG9pbnQgLSBiLnRyaWdnZXJQb2ludFxuICB9XG5cbiAgZnVuY3Rpb24gYnlSZXZlcnNlVHJpZ2dlclBvaW50KGEsIGIpIHtcbiAgICByZXR1cm4gYi50cmlnZ2VyUG9pbnQgLSBhLnRyaWdnZXJQb2ludFxuICB9XG5cbiAgdmFyIGdyb3VwcyA9IHtcbiAgICB2ZXJ0aWNhbDoge30sXG4gICAgaG9yaXpvbnRhbDoge31cbiAgfVxuICB2YXIgV2F5cG9pbnQgPSB3aW5kb3cuV2F5cG9pbnRcblxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZ3JvdXAgKi9cbiAgZnVuY3Rpb24gR3JvdXAob3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZVxuICAgIHRoaXMuYXhpcyA9IG9wdGlvbnMuYXhpc1xuICAgIHRoaXMuaWQgPSB0aGlzLm5hbWUgKyAnLScgKyB0aGlzLmF4aXNcbiAgICB0aGlzLndheXBvaW50cyA9IFtdXG4gICAgdGhpcy5jbGVhclRyaWdnZXJRdWV1ZXMoKVxuICAgIGdyb3Vwc1t0aGlzLmF4aXNdW3RoaXMubmFtZV0gPSB0aGlzXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIHRoaXMud2F5cG9pbnRzLnB1c2god2F5cG9pbnQpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5jbGVhclRyaWdnZXJRdWV1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyaWdnZXJRdWV1ZXMgPSB7XG4gICAgICB1cDogW10sXG4gICAgICBkb3duOiBbXSxcbiAgICAgIGxlZnQ6IFtdLFxuICAgICAgcmlnaHQ6IFtdXG4gICAgfVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUuZmx1c2hUcmlnZ2VycyA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGRpcmVjdGlvbiBpbiB0aGlzLnRyaWdnZXJRdWV1ZXMpIHtcbiAgICAgIHZhciB3YXlwb2ludHMgPSB0aGlzLnRyaWdnZXJRdWV1ZXNbZGlyZWN0aW9uXVxuICAgICAgdmFyIHJldmVyc2UgPSBkaXJlY3Rpb24gPT09ICd1cCcgfHwgZGlyZWN0aW9uID09PSAnbGVmdCdcbiAgICAgIHdheXBvaW50cy5zb3J0KHJldmVyc2UgPyBieVJldmVyc2VUcmlnZ2VyUG9pbnQgOiBieVRyaWdnZXJQb2ludClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlbmQgPSB3YXlwb2ludHMubGVuZ3RoOyBpIDwgZW5kOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHdheXBvaW50ID0gd2F5cG9pbnRzW2ldXG4gICAgICAgIGlmICh3YXlwb2ludC5vcHRpb25zLmNvbnRpbnVvdXMgfHwgaSA9PT0gd2F5cG9pbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB3YXlwb2ludC50cmlnZ2VyKFtkaXJlY3Rpb25dKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY2xlYXJUcmlnZ2VyUXVldWVzKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIHRoaXMud2F5cG9pbnRzLnNvcnQoYnlUcmlnZ2VyUG9pbnQpXG4gICAgdmFyIGluZGV4ID0gV2F5cG9pbnQuQWRhcHRlci5pbkFycmF5KHdheXBvaW50LCB0aGlzLndheXBvaW50cylcbiAgICB2YXIgaXNMYXN0ID0gaW5kZXggPT09IHRoaXMud2F5cG9pbnRzLmxlbmd0aCAtIDFcbiAgICByZXR1cm4gaXNMYXN0ID8gbnVsbCA6IHRoaXMud2F5cG9pbnRzW2luZGV4ICsgMV1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLnByZXZpb3VzID0gZnVuY3Rpb24od2F5cG9pbnQpIHtcbiAgICB0aGlzLndheXBvaW50cy5zb3J0KGJ5VHJpZ2dlclBvaW50KVxuICAgIHZhciBpbmRleCA9IFdheXBvaW50LkFkYXB0ZXIuaW5BcnJheSh3YXlwb2ludCwgdGhpcy53YXlwb2ludHMpXG4gICAgcmV0dXJuIGluZGV4ID8gdGhpcy53YXlwb2ludHNbaW5kZXggLSAxXSA6IG51bGxcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLnF1ZXVlVHJpZ2dlciA9IGZ1bmN0aW9uKHdheXBvaW50LCBkaXJlY3Rpb24pIHtcbiAgICB0aGlzLnRyaWdnZXJRdWV1ZXNbZGlyZWN0aW9uXS5wdXNoKHdheXBvaW50KVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24od2F5cG9pbnQpIHtcbiAgICB2YXIgaW5kZXggPSBXYXlwb2ludC5BZGFwdGVyLmluQXJyYXkod2F5cG9pbnQsIHRoaXMud2F5cG9pbnRzKVxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLndheXBvaW50cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9maXJzdCAqL1xuICBHcm91cC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy53YXlwb2ludHNbMF1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvbGFzdCAqL1xuICBHcm91cC5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLndheXBvaW50c1t0aGlzLndheXBvaW50cy5sZW5ndGggLSAxXVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5maW5kT3JDcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdyb3Vwc1tvcHRpb25zLmF4aXNdW29wdGlvbnMubmFtZV0gfHwgbmV3IEdyb3VwKG9wdGlvbnMpXG4gIH1cblxuICBXYXlwb2ludC5Hcm91cCA9IEdyb3VwXG59KCkpXG47KGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIgV2F5cG9pbnQgPSB3aW5kb3cuV2F5cG9pbnRcblxuICBmdW5jdGlvbiBpc1dpbmRvdyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPT09IGVsZW1lbnQud2luZG93XG4gIH1cblxuICBmdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQuZGVmYXVsdFZpZXdcbiAgfVxuXG4gIGZ1bmN0aW9uIE5vRnJhbWV3b3JrQWRhcHRlcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMuaGFuZGxlcnMgPSB7fVxuICB9XG5cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5pbm5lckhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpc1dpbiA9IGlzV2luZG93KHRoaXMuZWxlbWVudClcbiAgICByZXR1cm4gaXNXaW4gPyB0aGlzLmVsZW1lbnQuaW5uZXJIZWlnaHQgOiB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLmlubmVyV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXNXaW4gPSBpc1dpbmRvdyh0aGlzLmVsZW1lbnQpXG4gICAgcmV0dXJuIGlzV2luID8gdGhpcy5lbGVtZW50LmlubmVyV2lkdGggOiB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGhcbiAgfVxuXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIpIHtcbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoZWxlbWVudCwgbGlzdGVuZXJzLCBoYW5kbGVyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cbiAgICAgICAgaWYgKCFoYW5kbGVyIHx8IGhhbmRsZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50UGFydHMgPSBldmVudC5zcGxpdCgnLicpXG4gICAgdmFyIGV2ZW50VHlwZSA9IGV2ZW50UGFydHNbMF1cbiAgICB2YXIgbmFtZXNwYWNlID0gZXZlbnRQYXJ0c1sxXVxuICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50XG5cbiAgICBpZiAobmFtZXNwYWNlICYmIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSAmJiBldmVudFR5cGUpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVycyhlbGVtZW50LCB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV1bZXZlbnRUeXBlXSwgaGFuZGxlcilcbiAgICAgIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXVtldmVudFR5cGVdID0gW11cbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnRUeXBlKSB7XG4gICAgICBmb3IgKHZhciBucyBpbiB0aGlzLmhhbmRsZXJzKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVycyhlbGVtZW50LCB0aGlzLmhhbmRsZXJzW25zXVtldmVudFR5cGVdIHx8IFtdLCBoYW5kbGVyKVxuICAgICAgICB0aGlzLmhhbmRsZXJzW25zXVtldmVudFR5cGVdID0gW11cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAobmFtZXNwYWNlICYmIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSkge1xuICAgICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV0pIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKGVsZW1lbnQsIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXVt0eXBlXSwgaGFuZGxlcilcbiAgICAgIH1cbiAgICAgIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSA9IHt9XG4gICAgfVxuICB9XG5cbiAgLyogQWRhcHRlZCBmcm9tIGpRdWVyeSAxLnggb2Zmc2V0KCkgKi9cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5vZmZzZXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHZhciBkb2N1bWVudEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbiAgICB2YXIgd2luID0gZ2V0V2luZG93KHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50KVxuICAgIHZhciByZWN0ID0ge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH1cblxuICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICByZWN0ID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jdW1lbnRFbGVtZW50LmNsaWVudExlZnRcbiAgICB9XG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIpIHtcbiAgICB2YXIgZXZlbnRQYXJ0cyA9IGV2ZW50LnNwbGl0KCcuJylcbiAgICB2YXIgZXZlbnRUeXBlID0gZXZlbnRQYXJ0c1swXVxuICAgIHZhciBuYW1lc3BhY2UgPSBldmVudFBhcnRzWzFdIHx8ICdfX2RlZmF1bHQnXG4gICAgdmFyIG5zSGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV0gPSB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV0gfHwge31cbiAgICB2YXIgbnNUeXBlTGlzdCA9IG5zSGFuZGxlcnNbZXZlbnRUeXBlXSA9IG5zSGFuZGxlcnNbZXZlbnRUeXBlXSB8fCBbXVxuXG4gICAgbnNUeXBlTGlzdC5wdXNoKGhhbmRsZXIpXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyKVxuICB9XG5cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5vdXRlckhlaWdodCA9IGZ1bmN0aW9uKGluY2x1ZGVNYXJnaW4pIHtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5pbm5lckhlaWdodCgpXG4gICAgdmFyIGNvbXB1dGVkU3R5bGVcblxuICAgIGlmIChpbmNsdWRlTWFyZ2luICYmICFpc1dpbmRvdyh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50KVxuICAgICAgaGVpZ2h0ICs9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUubWFyZ2luVG9wLCAxMClcbiAgICAgIGhlaWdodCArPSBwYXJzZUludChjb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSwgMTApXG4gICAgfVxuXG4gICAgcmV0dXJuIGhlaWdodFxuICB9XG5cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5vdXRlcldpZHRoID0gZnVuY3Rpb24oaW5jbHVkZU1hcmdpbikge1xuICAgIHZhciB3aWR0aCA9IHRoaXMuaW5uZXJXaWR0aCgpXG4gICAgdmFyIGNvbXB1dGVkU3R5bGVcblxuICAgIGlmIChpbmNsdWRlTWFyZ2luICYmICFpc1dpbmRvdyh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50KVxuICAgICAgd2lkdGggKz0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0LCAxMClcbiAgICAgIHdpZHRoICs9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsIDEwKVxuICAgIH1cblxuICAgIHJldHVybiB3aWR0aFxuICB9XG5cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5zY3JvbGxMZWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0aGlzLmVsZW1lbnQpXG4gICAgcmV0dXJuIHdpbiA/IHdpbi5wYWdlWE9mZnNldCA6IHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0XG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLnNjcm9sbFRvcCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3aW4gPSBnZXRXaW5kb3codGhpcy5lbGVtZW50KVxuICAgIHJldHVybiB3aW4gPyB3aW4ucGFnZVlPZmZzZXQgOiB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wXG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG5cbiAgICBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gb2JqW2tleV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAxLCBlbmQgPSBhcmdzLmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBtZXJnZShhcmdzWzBdLCBhcmdzW2ldKVxuICAgIH1cbiAgICByZXR1cm4gYXJnc1swXVxuICB9XG5cbiAgTm9GcmFtZXdvcmtBZGFwdGVyLmluQXJyYXkgPSBmdW5jdGlvbihlbGVtZW50LCBhcnJheSwgaSkge1xuICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gLTEgOiBhcnJheS5pbmRleE9mKGVsZW1lbnQsIGkpXG4gIH1cblxuICBOb0ZyYW1ld29ya0FkYXB0ZXIuaXNFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogMCAqL1xuICAgIGZvciAodmFyIG5hbWUgaW4gb2JqKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIFdheXBvaW50LmFkYXB0ZXJzLnB1c2goe1xuICAgIG5hbWU6ICdub2ZyYW1ld29yaycsXG4gICAgQWRhcHRlcjogTm9GcmFtZXdvcmtBZGFwdGVyXG4gIH0pXG4gIFdheXBvaW50LkFkYXB0ZXIgPSBOb0ZyYW1ld29ya0FkYXB0ZXJcbn0oKSlcbjtcbi8qIVxuICogalF1ZXJ5IENvb2tpZSBQbHVnaW4gdjEuNC4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2FyaGFydGwvanF1ZXJ5LWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDEzIEtsYXVzIEhhcnRsXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcblx0fSBlbHNlIHtcblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KGpRdWVyeSk7XG5cdH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuXHR2YXIgcGx1c2VzID0gL1xcKy9nO1xuXG5cdGZ1bmN0aW9uIGVuY29kZShzKSB7XG5cdFx0cmV0dXJuIGNvbmZpZy5yYXcgPyBzIDogZW5jb2RlVVJJQ29tcG9uZW50KHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlKHMpIHtcblx0XHRyZXR1cm4gY29uZmlnLnJhdyA/IHMgOiBkZWNvZGVVUklDb21wb25lbnQocyk7XG5cdH1cblxuXHRmdW5jdGlvbiBzdHJpbmdpZnlDb29raWVWYWx1ZSh2YWx1ZSkge1xuXHRcdHJldHVybiBlbmNvZGUoY29uZmlnLmpzb24gPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBTdHJpbmcodmFsdWUpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlQ29va2llVmFsdWUocykge1xuXHRcdGlmIChzLmluZGV4T2YoJ1wiJykgPT09IDApIHtcblx0XHRcdC8vIFRoaXMgaXMgYSBxdW90ZWQgY29va2llIGFzIGFjY29yZGluZyB0byBSRkMyMDY4LCB1bmVzY2FwZS4uLlxuXHRcdFx0cyA9IHMuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHQvLyBSZXBsYWNlIHNlcnZlci1zaWRlIHdyaXR0ZW4gcGx1c2VzIHdpdGggc3BhY2VzLlxuXHRcdFx0Ly8gSWYgd2UgY2FuJ3QgZGVjb2RlIHRoZSBjb29raWUsIGlnbm9yZSBpdCwgaXQncyB1bnVzYWJsZS5cblx0XHRcdC8vIElmIHdlIGNhbid0IHBhcnNlIHRoZSBjb29raWUsIGlnbm9yZSBpdCwgaXQncyB1bnVzYWJsZS5cblx0XHRcdHMgPSBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKHBsdXNlcywgJyAnKSk7XG5cdFx0XHRyZXR1cm4gY29uZmlnLmpzb24gPyBKU09OLnBhcnNlKHMpIDogcztcblx0XHR9IGNhdGNoKGUpIHt9XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkKHMsIGNvbnZlcnRlcikge1xuXHRcdHZhciB2YWx1ZSA9IGNvbmZpZy5yYXcgPyBzIDogcGFyc2VDb29raWVWYWx1ZShzKTtcblx0XHRyZXR1cm4gJC5pc0Z1bmN0aW9uKGNvbnZlcnRlcikgPyBjb252ZXJ0ZXIodmFsdWUpIDogdmFsdWU7XG5cdH1cblxuXHR2YXIgY29uZmlnID0gJC5jb29raWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuXG5cdFx0Ly8gV3JpdGVcblxuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEkLmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQoe30sIGNvbmZpZy5kZWZhdWx0cywgb3B0aW9ucyk7XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHR2YXIgZGF5cyA9IG9wdGlvbnMuZXhwaXJlcywgdCA9IG9wdGlvbnMuZXhwaXJlcyA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdHQuc2V0VGltZSgrdCArIGRheXMgKiA4NjRlKzUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKGRvY3VtZW50LmNvb2tpZSA9IFtcblx0XHRcdFx0ZW5jb2RlKGtleSksICc9Jywgc3RyaW5naWZ5Q29va2llVmFsdWUodmFsdWUpLFxuXHRcdFx0XHRvcHRpb25zLmV4cGlyZXMgPyAnOyBleHBpcmVzPScgKyBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnLCAvLyB1c2UgZXhwaXJlcyBhdHRyaWJ1dGUsIG1heC1hZ2UgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0XHRvcHRpb25zLnBhdGggICAgPyAnOyBwYXRoPScgKyBvcHRpb25zLnBhdGggOiAnJyxcblx0XHRcdFx0b3B0aW9ucy5kb21haW4gID8gJzsgZG9tYWluPScgKyBvcHRpb25zLmRvbWFpbiA6ICcnLFxuXHRcdFx0XHRvcHRpb25zLnNlY3VyZSAgPyAnOyBzZWN1cmUnIDogJydcblx0XHRcdF0uam9pbignJykpO1xuXHRcdH1cblxuXHRcdC8vIFJlYWRcblxuXHRcdHZhciByZXN1bHQgPSBrZXkgPyB1bmRlZmluZWQgOiB7fTtcblxuXHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHQvLyBpbiBjYXNlIHRoZXJlIGFyZSBubyBjb29raWVzIGF0IGFsbC4gQWxzbyBwcmV2ZW50cyBvZGQgcmVzdWx0IHdoZW5cblx0XHQvLyBjYWxsaW5nICQuY29va2llKCkuXG5cdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY29va2llcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xuXHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLmpvaW4oJz0nKTtcblxuXHRcdFx0aWYgKGtleSAmJiBrZXkgPT09IG5hbWUpIHtcblx0XHRcdFx0Ly8gSWYgc2Vjb25kIGFyZ3VtZW50ICh2YWx1ZSkgaXMgYSBmdW5jdGlvbiBpdCdzIGEgY29udmVydGVyLi4uXG5cdFx0XHRcdHJlc3VsdCA9IHJlYWQoY29va2llLCB2YWx1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQcmV2ZW50IHN0b3JpbmcgYSBjb29raWUgdGhhdCB3ZSBjb3VsZG4ndCBkZWNvZGUuXG5cdFx0XHRpZiAoIWtleSAmJiAoY29va2llID0gcmVhZChjb29raWUpKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJlc3VsdFtuYW1lXSA9IGNvb2tpZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdGNvbmZpZy5kZWZhdWx0cyA9IHt9O1xuXG5cdCQucmVtb3ZlQ29va2llID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucykge1xuXHRcdGlmICgkLmNvb2tpZShrZXkpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBNdXN0IG5vdCBhbHRlciBvcHRpb25zLCB0aHVzIGV4dGVuZGluZyBhIGZyZXNoIG9iamVjdC4uLlxuXHRcdCQuY29va2llKGtleSwgJycsICQuZXh0ZW5kKHt9LCBvcHRpb25zLCB7IGV4cGlyZXM6IC0xIH0pKTtcblx0XHRyZXR1cm4gISQuY29va2llKGtleSk7XG5cdH07XG5cbn0pKTtcbi8qISBIYW1tZXIuSlMgLSB2Mi4wLjQgLSAyMDE0LTA5LTI4XG4gKiBodHRwOi8vaGFtbWVyanMuZ2l0aHViLmlvL1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBKb3JpayBUYW5nZWxkZXI7XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKi9cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCBleHBvcnROYW1lLCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVORE9SX1BSRUZJWEVTID0gWycnLCAnd2Via2l0JywgJ21veicsICdNUycsICdtcycsICdvJ107XG52YXIgVEVTVF9FTEVNRU5UID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbnZhciBUWVBFX0ZVTkNUSU9OID0gJ2Z1bmN0aW9uJztcblxudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBub3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBzZXQgYSB0aW1lb3V0IHdpdGggYSBnaXZlbiBzY29wZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0XG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gc2V0VGltZW91dENvbnRleHQoZm4sIHRpbWVvdXQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChiaW5kRm4oZm4sIGNvbnRleHQpLCB0aW1lb3V0KTtcbn1cblxuLyoqXG4gKiBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIHdlIHdhbnQgdG8gZXhlY3V0ZSB0aGUgZm4gb24gZWFjaCBlbnRyeVxuICogaWYgaXQgYWludCBhbiBhcnJheSB3ZSBkb24ndCB3YW50IHRvIGRvIGEgdGhpbmcuXG4gKiB0aGlzIGlzIHVzZWQgYnkgYWxsIHRoZSBtZXRob2RzIHRoYXQgYWNjZXB0IGEgc2luZ2xlIGFuZCBhcnJheSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7KnxBcnJheX0gYXJnXG4gKiBAcGFyYW0ge1N0cmluZ30gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF1cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpbnZva2VBcnJheUFyZyhhcmcsIGZuLCBjb250ZXh0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICBlYWNoKGFyZywgY29udGV4dFtmbl0sIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIHdhbGsgb2JqZWN0cyBhbmQgYXJyYXlzXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRvclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gZWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9iai5mb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBvYmoubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShpKSAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBleHRlbmQgb2JqZWN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICogQHBhcmFtIHtCb29sZWFufSBbbWVyZ2VdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMsIG1lcmdlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghbWVyZ2UgfHwgKG1lcmdlICYmIGRlc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGRlc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdDtcbn1cblxuLyoqXG4gKiBtZXJnZSB0aGUgdmFsdWVzIGZyb20gc3JjIGluIHRoZSBkZXN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIHRoYXQgZXhpc3QgaW4gZGVzdCB3aWxsIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzcmNcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gKi9cbmZ1bmN0aW9uIG1lcmdlKGRlc3QsIHNyYykge1xuICAgIHJldHVybiBleHRlbmQoZGVzdCwgc3JjLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBzaW1wbGUgY2xhc3MgaW5oZXJpdGFuY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoaWxkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBiYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdXG4gKi9cbmZ1bmN0aW9uIGluaGVyaXQoY2hpbGQsIGJhc2UsIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgYmFzZVAgPSBiYXNlLnByb3RvdHlwZSxcbiAgICAgICAgY2hpbGRQO1xuXG4gICAgY2hpbGRQID0gY2hpbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlUCk7XG4gICAgY2hpbGRQLmNvbnN0cnVjdG9yID0gY2hpbGQ7XG4gICAgY2hpbGRQLl9zdXBlciA9IGJhc2VQO1xuXG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgZXh0ZW5kKGNoaWxkUCwgcHJvcGVydGllcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIHNpbXBsZSBmdW5jdGlvbiBiaW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gYmluZEZuKGZuLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kRm4oKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8qKlxuICogbGV0IGEgYm9vbGVhbiB2YWx1ZSBhbHNvIGJlIGEgZnVuY3Rpb24gdGhhdCBtdXN0IHJldHVybiBhIGJvb2xlYW5cbiAqIHRoaXMgZmlyc3QgaXRlbSBpbiBhcmdzIHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSB2YWxcbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGJvb2xPckZuKHZhbCwgYXJncykge1xuICAgIGlmICh0eXBlb2YgdmFsID09IFRZUEVfRlVOQ1RJT04pIHtcbiAgICAgICAgcmV0dXJuIHZhbC5hcHBseShhcmdzID8gYXJnc1swXSB8fCB1bmRlZmluZWQgOiB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuXG4vKipcbiAqIHVzZSB0aGUgdmFsMiB3aGVuIHZhbDEgaXMgdW5kZWZpbmVkXG4gKiBAcGFyYW0geyp9IHZhbDFcbiAqIEBwYXJhbSB7Kn0gdmFsMlxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGlmVW5kZWZpbmVkKHZhbDEsIHZhbDIpIHtcbiAgICByZXR1cm4gKHZhbDEgPT09IHVuZGVmaW5lZCkgPyB2YWwyIDogdmFsMTtcbn1cblxuLyoqXG4gKiBhZGRFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKHRhcmdldCwgdHlwZXMsIGhhbmRsZXIpIHtcbiAgICBlYWNoKHNwbGl0U3RyKHR5cGVzKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcmVtb3ZlRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyh0YXJnZXQsIHR5cGVzLCBoYW5kbGVyKSB7XG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIGZpbmQgaWYgYSBub2RlIGlzIGluIHRoZSBnaXZlbiBwYXJlbnRcbiAqIEBtZXRob2QgaGFzUGFyZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGhhc1BhcmVudChub2RlLCBwYXJlbnQpIHtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBzbWFsbCBpbmRleE9mIHdyYXBwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gZm91bmRcbiAqL1xuZnVuY3Rpb24gaW5TdHIoc3RyLCBmaW5kKSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKGZpbmQpID4gLTE7XG59XG5cbi8qKlxuICogc3BsaXQgc3RyaW5nIG9uIHdoaXRlc3BhY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtBcnJheX0gd29yZHNcbiAqL1xuZnVuY3Rpb24gc3BsaXRTdHIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkuc3BsaXQoL1xccysvZyk7XG59XG5cbi8qKlxuICogZmluZCBpZiBhIGFycmF5IGNvbnRhaW5zIHRoZSBvYmplY3QgdXNpbmcgaW5kZXhPZiBvciBhIHNpbXBsZSBwb2x5RmlsbFxuICogQHBhcmFtIHtBcnJheX0gc3JjXG4gKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICogQHBhcmFtIHtTdHJpbmd9IFtmaW5kQnlLZXldXG4gKiBAcmV0dXJuIHtCb29sZWFufE51bWJlcn0gZmFsc2Ugd2hlbiBub3QgZm91bmQsIG9yIHRoZSBpbmRleFxuICovXG5mdW5jdGlvbiBpbkFycmF5KHNyYywgZmluZCwgZmluZEJ5S2V5KSB7XG4gICAgaWYgKHNyYy5pbmRleE9mICYmICFmaW5kQnlLZXkpIHtcbiAgICAgICAgcmV0dXJuIHNyYy5pbmRleE9mKGZpbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoKGZpbmRCeUtleSAmJiBzcmNbaV1bZmluZEJ5S2V5XSA9PSBmaW5kKSB8fCAoIWZpbmRCeUtleSAmJiBzcmNbaV0gPT09IGZpbmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn1cblxuLyoqXG4gKiBjb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byByZWFsIGFycmF5c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmosIDApO1xufVxuXG4vKipcbiAqIHVuaXF1ZSBhcnJheSB3aXRoIG9iamVjdHMgYmFzZWQgb24gYSBrZXkgKGxpa2UgJ2lkJykgb3IganVzdCBieSB0aGUgYXJyYXkncyB2YWx1ZVxuICogQHBhcmFtIHtBcnJheX0gc3JjIFt7aWQ6MX0se2lkOjJ9LHtpZDoxfV1cbiAqIEBwYXJhbSB7U3RyaW5nfSBba2V5XVxuICogQHBhcmFtIHtCb29sZWFufSBbc29ydD1GYWxzZV1cbiAqIEByZXR1cm5zIHtBcnJheX0gW3tpZDoxfSx7aWQ6Mn1dXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZUFycmF5KHNyYywga2V5LCBzb3J0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWwgPSBrZXkgPyBzcmNbaV1ba2V5XSA6IHNyY1tpXTtcbiAgICAgICAgaWYgKGluQXJyYXkodmFsdWVzLCB2YWwpIDwgMCkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHNyY1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzW2ldID0gdmFsO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgaWYgKHNvcnQpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoZnVuY3Rpb24gc29ydFVuaXF1ZUFycmF5KGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVtrZXldID4gYltrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBnZXQgdGhlIHByZWZpeGVkIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm5zIHtTdHJpbmd8VW5kZWZpbmVkfSBwcmVmaXhlZFxuICovXG5mdW5jdGlvbiBwcmVmaXhlZChvYmosIHByb3BlcnR5KSB7XG4gICAgdmFyIHByZWZpeCwgcHJvcDtcbiAgICB2YXIgY2FtZWxQcm9wID0gcHJvcGVydHlbMF0udG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgVkVORE9SX1BSRUZJWEVTLmxlbmd0aCkge1xuICAgICAgICBwcmVmaXggPSBWRU5ET1JfUFJFRklYRVNbaV07XG4gICAgICAgIHByb3AgPSAocHJlZml4KSA/IHByZWZpeCArIGNhbWVsUHJvcCA6IHByb3BlcnR5O1xuXG4gICAgICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIGdldCBhIHVuaXF1ZSBpZFxuICogQHJldHVybnMge251bWJlcn0gdW5pcXVlSWRcbiAqL1xudmFyIF91bmlxdWVJZCA9IDE7XG5mdW5jdGlvbiB1bmlxdWVJZCgpIHtcbiAgICByZXR1cm4gX3VuaXF1ZUlkKys7XG59XG5cbi8qKlxuICogZ2V0IHRoZSB3aW5kb3cgb2JqZWN0IG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtEb2N1bWVudFZpZXd8V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3dGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiAoZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3cpO1xufVxuXG52YXIgTU9CSUxFX1JFR0VYID0gL21vYmlsZXx0YWJsZXR8aXAoYWR8aG9uZXxvZCl8YW5kcm9pZC9pO1xuXG52YXIgU1VQUE9SVF9UT1VDSCA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xudmFyIFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMgPSBwcmVmaXhlZCh3aW5kb3csICdQb2ludGVyRXZlbnQnKSAhPT0gdW5kZWZpbmVkO1xudmFyIFNVUFBPUlRfT05MWV9UT1VDSCA9IFNVUFBPUlRfVE9VQ0ggJiYgTU9CSUxFX1JFR0VYLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbnZhciBJTlBVVF9UWVBFX1RPVUNIID0gJ3RvdWNoJztcbnZhciBJTlBVVF9UWVBFX1BFTiA9ICdwZW4nO1xudmFyIElOUFVUX1RZUEVfTU9VU0UgPSAnbW91c2UnO1xudmFyIElOUFVUX1RZUEVfS0lORUNUID0gJ2tpbmVjdCc7XG5cbnZhciBDT01QVVRFX0lOVEVSVkFMID0gMjU7XG5cbnZhciBJTlBVVF9TVEFSVCA9IDE7XG52YXIgSU5QVVRfTU9WRSA9IDI7XG52YXIgSU5QVVRfRU5EID0gNDtcbnZhciBJTlBVVF9DQU5DRUwgPSA4O1xuXG52YXIgRElSRUNUSU9OX05PTkUgPSAxO1xudmFyIERJUkVDVElPTl9MRUZUID0gMjtcbnZhciBESVJFQ1RJT05fUklHSFQgPSA0O1xudmFyIERJUkVDVElPTl9VUCA9IDg7XG52YXIgRElSRUNUSU9OX0RPV04gPSAxNjtcblxudmFyIERJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XG52YXIgRElSRUNUSU9OX1ZFUlRJQ0FMID0gRElSRUNUSU9OX1VQIHwgRElSRUNUSU9OX0RPV047XG52YXIgRElSRUNUSU9OX0FMTCA9IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMO1xuXG52YXIgUFJPUFNfWFkgPSBbJ3gnLCAneSddO1xudmFyIFBST1BTX0NMSUVOVF9YWSA9IFsnY2xpZW50WCcsICdjbGllbnRZJ107XG5cbi8qKlxuICogY3JlYXRlIG5ldyBpbnB1dCB0eXBlIG1hbmFnZXJcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtJbnB1dH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnB1dChtYW5hZ2VyLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLmVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgdGhpcy50YXJnZXQgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRUYXJnZXQ7XG5cbiAgICAvLyBzbWFsbGVyIHdyYXBwZXIgYXJvdW5kIHRoZSBoYW5kbGVyLCBmb3IgdGhlIHNjb3BlIGFuZCB0aGUgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgbWFuYWdlcixcbiAgICAvLyBzbyB3aGVuIGRpc2FibGVkIHRoZSBpbnB1dCBldmVudHMgYXJlIGNvbXBsZXRlbHkgYnlwYXNzZWQuXG4gICAgdGhpcy5kb21IYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaWYgKGJvb2xPckZuKG1hbmFnZXIub3B0aW9ucy5lbmFibGUsIFttYW5hZ2VyXSkpIHtcbiAgICAgICAgICAgIHNlbGYuaGFuZGxlcihldik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5pbml0KCk7XG5cbn1cblxuSW5wdXQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNob3VsZCBoYW5kbGUgdGhlIGlucHV0RXZlbnQgZGF0YSBhbmQgdHJpZ2dlciB0aGUgY2FsbGJhY2tcbiAgICAgKiBAdmlydHVhbFxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkgeyB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXZFbCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldldpbiAmJiBhZGRFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXZFbCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldldpbiAmJiByZW1vdmVFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfVxufTtcblxuLyoqXG4gKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICogY2FsbGVkIGJ5IHRoZSBNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICogQHJldHVybnMge0lucHV0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dEluc3RhbmNlKG1hbmFnZXIpIHtcbiAgICB2YXIgVHlwZTtcbiAgICB2YXIgaW5wdXRDbGFzcyA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dENsYXNzO1xuXG4gICAgaWYgKGlucHV0Q2xhc3MpIHtcbiAgICAgICAgVHlwZSA9IGlucHV0Q2xhc3M7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX1BPSU5URVJfRVZFTlRTKSB7XG4gICAgICAgIFR5cGUgPSBQb2ludGVyRXZlbnRJbnB1dDtcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfT05MWV9UT1VDSCkge1xuICAgICAgICBUeXBlID0gVG91Y2hJbnB1dDtcbiAgICB9IGVsc2UgaWYgKCFTVVBQT1JUX1RPVUNIKSB7XG4gICAgICAgIFR5cGUgPSBNb3VzZUlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFR5cGUgPSBUb3VjaE1vdXNlSW5wdXQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgKFR5cGUpKG1hbmFnZXIsIGlucHV0SGFuZGxlcik7XG59XG5cbi8qKlxuICogaGFuZGxlIGlucHV0IGV2ZW50c1xuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gaW5wdXRIYW5kbGVyKG1hbmFnZXIsIGV2ZW50VHlwZSwgaW5wdXQpIHtcbiAgICB2YXIgcG9pbnRlcnNMZW4gPSBpbnB1dC5wb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGNoYW5nZWRQb2ludGVyc0xlbiA9IGlucHV0LmNoYW5nZWRQb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGlzRmlyc3QgPSAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XG4gICAgdmFyIGlzRmluYWwgPSAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XG5cbiAgICBpbnB1dC5pc0ZpcnN0ID0gISFpc0ZpcnN0O1xuICAgIGlucHV0LmlzRmluYWwgPSAhIWlzRmluYWw7XG5cbiAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICBtYW5hZ2VyLnNlc3Npb24gPSB7fTtcbiAgICB9XG5cbiAgICAvLyBzb3VyY2UgZXZlbnQgaXMgdGhlIG5vcm1hbGl6ZWQgdmFsdWUgb2YgdGhlIGRvbUV2ZW50c1xuICAgIC8vIGxpa2UgJ3RvdWNoc3RhcnQsIG1vdXNldXAsIHBvaW50ZXJkb3duJ1xuICAgIGlucHV0LmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcblxuICAgIC8vIGNvbXB1dGUgc2NhbGUsIHJvdGF0aW9uIGV0Y1xuICAgIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpO1xuXG4gICAgLy8gZW1pdCBzZWNyZXQgZXZlbnRcbiAgICBtYW5hZ2VyLmVtaXQoJ2hhbW1lci5pbnB1dCcsIGlucHV0KTtcblxuICAgIG1hbmFnZXIucmVjb2duaXplKGlucHV0KTtcbiAgICBtYW5hZ2VyLnNlc3Npb24ucHJldklucHV0ID0gaW5wdXQ7XG59XG5cbi8qKlxuICogZXh0ZW5kIHRoZSBkYXRhIHdpdGggc29tZSB1c2FibGUgcHJvcGVydGllcyBsaWtlIHNjYWxlLCByb3RhdGUsIHZlbG9jaXR5IGV0Y1xuICogQHBhcmFtIHtPYmplY3R9IG1hbmFnZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KSB7XG4gICAgdmFyIHNlc3Npb24gPSBtYW5hZ2VyLnNlc3Npb247XG4gICAgdmFyIHBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnM7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xuXG4gICAgLy8gc3RvcmUgdGhlIGZpcnN0IGlucHV0IHRvIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYW5kIGRpcmVjdGlvblxuICAgIGlmICghc2Vzc2lvbi5maXJzdElucHV0KSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RJbnB1dCA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9XG5cbiAgICAvLyB0byBjb21wdXRlIHNjYWxlIGFuZCByb3RhdGlvbiB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBtdWx0aXBsZSB0b3VjaGVzXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID4gMSAmJiAhc2Vzc2lvbi5maXJzdE11bHRpcGxlKSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9IGVsc2UgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBmaXJzdElucHV0ID0gc2Vzc2lvbi5maXJzdElucHV0O1xuICAgIHZhciBmaXJzdE11bHRpcGxlID0gc2Vzc2lvbi5maXJzdE11bHRpcGxlO1xuICAgIHZhciBvZmZzZXRDZW50ZXIgPSBmaXJzdE11bHRpcGxlID8gZmlyc3RNdWx0aXBsZS5jZW50ZXIgOiBmaXJzdElucHV0LmNlbnRlcjtcblxuICAgIHZhciBjZW50ZXIgPSBpbnB1dC5jZW50ZXIgPSBnZXRDZW50ZXIocG9pbnRlcnMpO1xuICAgIGlucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgIGlucHV0LmRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGZpcnN0SW5wdXQudGltZVN0YW1wO1xuXG4gICAgaW5wdXQuYW5nbGUgPSBnZXRBbmdsZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG4gICAgaW5wdXQuZGlzdGFuY2UgPSBnZXREaXN0YW5jZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG5cbiAgICBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCk7XG4gICAgaW5wdXQub2Zmc2V0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcblxuICAgIGlucHV0LnNjYWxlID0gZmlyc3RNdWx0aXBsZSA/IGdldFNjYWxlKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDE7XG4gICAgaW5wdXQucm90YXRpb24gPSBmaXJzdE11bHRpcGxlID8gZ2V0Um90YXRpb24oZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMDtcblxuICAgIGNvbXB1dGVJbnRlcnZhbElucHV0RGF0YShzZXNzaW9uLCBpbnB1dCk7XG5cbiAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IHRhcmdldFxuICAgIHZhciB0YXJnZXQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgaWYgKGhhc1BhcmVudChpbnB1dC5zcmNFdmVudC50YXJnZXQsIHRhcmdldCkpIHtcbiAgICAgICAgdGFyZ2V0ID0gaW5wdXQuc3JjRXZlbnQudGFyZ2V0O1xuICAgIH1cbiAgICBpbnB1dC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlcjtcbiAgICB2YXIgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZJbnB1dCA9IHNlc3Npb24ucHJldklucHV0IHx8IHt9O1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfU1RBUlQgfHwgcHJldklucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfRU5EKSB7XG4gICAgICAgIHByZXZEZWx0YSA9IHNlc3Npb24ucHJldkRlbHRhID0ge1xuICAgICAgICAgICAgeDogcHJldklucHV0LmRlbHRhWCB8fCAwLFxuICAgICAgICAgICAgeTogcHJldklucHV0LmRlbHRhWSB8fCAwXG4gICAgICAgIH07XG5cbiAgICAgICAgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxuICAgICAgICAgICAgeTogY2VudGVyLnlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpbnB1dC5kZWx0YVggPSBwcmV2RGVsdGEueCArIChjZW50ZXIueCAtIG9mZnNldC54KTtcbiAgICBpbnB1dC5kZWx0YVkgPSBwcmV2RGVsdGEueSArIChjZW50ZXIueSAtIG9mZnNldC55KTtcbn1cblxuLyoqXG4gKiB2ZWxvY2l0eSBpcyBjYWxjdWxhdGVkIGV2ZXJ5IHggbXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXNzaW9uXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGxhc3QgPSBzZXNzaW9uLmxhc3RJbnRlcnZhbCB8fCBpbnB1dCxcbiAgICAgICAgZGVsdGFUaW1lID0gaW5wdXQudGltZVN0YW1wIC0gbGFzdC50aW1lU3RhbXAsXG4gICAgICAgIHZlbG9jaXR5LCB2ZWxvY2l0eVgsIHZlbG9jaXR5WSwgZGlyZWN0aW9uO1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSAhPSBJTlBVVF9DQU5DRUwgJiYgKGRlbHRhVGltZSA+IENPTVBVVEVfSU5URVJWQUwgfHwgbGFzdC52ZWxvY2l0eSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICB2YXIgZGVsdGFYID0gbGFzdC5kZWx0YVggLSBpbnB1dC5kZWx0YVg7XG4gICAgICAgIHZhciBkZWx0YVkgPSBsYXN0LmRlbHRhWSAtIGlucHV0LmRlbHRhWTtcblxuICAgICAgICB2YXIgdiA9IGdldFZlbG9jaXR5KGRlbHRhVGltZSwgZGVsdGFYLCBkZWx0YVkpO1xuICAgICAgICB2ZWxvY2l0eVggPSB2Lng7XG4gICAgICAgIHZlbG9jaXR5WSA9IHYueTtcbiAgICAgICAgdmVsb2NpdHkgPSAoYWJzKHYueCkgPiBhYnModi55KSkgPyB2LnggOiB2Lnk7XG4gICAgICAgIGRpcmVjdGlvbiA9IGdldERpcmVjdGlvbihkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgPSBpbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2UgbGF0ZXN0IHZlbG9jaXR5IGluZm8gaWYgaXQgZG9lc24ndCBvdmVydGFrZSBhIG1pbmltdW0gcGVyaW9kXG4gICAgICAgIHZlbG9jaXR5ID0gbGFzdC52ZWxvY2l0eTtcbiAgICAgICAgdmVsb2NpdHlYID0gbGFzdC52ZWxvY2l0eVg7XG4gICAgICAgIHZlbG9jaXR5WSA9IGxhc3QudmVsb2NpdHlZO1xuICAgICAgICBkaXJlY3Rpb24gPSBsYXN0LmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBpbnB1dC52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgIGlucHV0LnZlbG9jaXR5WCA9IHZlbG9jaXR5WDtcbiAgICBpbnB1dC52ZWxvY2l0eVkgPSB2ZWxvY2l0eVk7XG4gICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xufVxuXG4vKipcbiAqIGNyZWF0ZSBhIHNpbXBsZSBjbG9uZSBmcm9tIHRoZSBpbnB1dCB1c2VkIGZvciBzdG9yYWdlIG9mIGZpcnN0SW5wdXQgYW5kIGZpcnN0TXVsdGlwbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICogQHJldHVybnMge09iamVjdH0gY2xvbmVkSW5wdXREYXRhXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KSB7XG4gICAgLy8gbWFrZSBhIHNpbXBsZSBjb3B5IG9mIHRoZSBwb2ludGVycyBiZWNhdXNlIHdlIHdpbGwgZ2V0IGEgcmVmZXJlbmNlIGlmIHdlIGRvbid0XG4gICAgLy8gd2Ugb25seSBuZWVkIGNsaWVudFhZIGZvciB0aGUgY2FsY3VsYXRpb25zXG4gICAgdmFyIHBvaW50ZXJzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgaW5wdXQucG9pbnRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBvaW50ZXJzW2ldID0ge1xuICAgICAgICAgICAgY2xpZW50WDogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WCksXG4gICAgICAgICAgICBjbGllbnRZOiByb3VuZChpbnB1dC5wb2ludGVyc1tpXS5jbGllbnRZKVxuICAgICAgICB9O1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGltZVN0YW1wOiBub3coKSxcbiAgICAgICAgcG9pbnRlcnM6IHBvaW50ZXJzLFxuICAgICAgICBjZW50ZXI6IGdldENlbnRlcihwb2ludGVycyksXG4gICAgICAgIGRlbHRhWDogaW5wdXQuZGVsdGFYLFxuICAgICAgICBkZWx0YVk6IGlucHV0LmRlbHRhWVxuICAgIH07XG59XG5cbi8qKlxuICogZ2V0IHRoZSBjZW50ZXIgb2YgYWxsIHRoZSBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gcG9pbnRlcnNcbiAqIEByZXR1cm4ge09iamVjdH0gY2VudGVyIGNvbnRhaW5zIGB4YCBhbmQgYHlgIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Q2VudGVyKHBvaW50ZXJzKSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xuXG4gICAgLy8gbm8gbmVlZCB0byBsb29wIHdoZW4gb25seSBvbmUgdG91Y2hcbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFgpLFxuICAgICAgICAgICAgeTogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgeCA9IDAsIHkgPSAwLCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHBvaW50ZXJzTGVuZ3RoKSB7XG4gICAgICAgIHggKz0gcG9pbnRlcnNbaV0uY2xpZW50WDtcbiAgICAgICAgeSArPSBwb2ludGVyc1tpXS5jbGllbnRZO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcm91bmQoeCAvIHBvaW50ZXJzTGVuZ3RoKSxcbiAgICAgICAgeTogcm91bmQoeSAvIHBvaW50ZXJzTGVuZ3RoKVxuICAgIH07XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSB2ZWxvY2l0eSBiZXR3ZWVuIHR3byBwb2ludHMuIHVuaXQgaXMgaW4gcHggcGVyIG1zLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhVGltZVxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtPYmplY3R9IHZlbG9jaXR5IGB4YCBhbmQgYHlgXG4gKi9cbmZ1bmN0aW9uIGdldFZlbG9jaXR5KGRlbHRhVGltZSwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggLyBkZWx0YVRpbWUgfHwgMCxcbiAgICAgICAgeTogeSAvIGRlbHRhVGltZSB8fCAwXG4gICAgfTtcbn1cblxuLyoqXG4gKiBnZXQgdGhlIGRpcmVjdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHJldHVybiB7TnVtYmVyfSBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHgsIHkpIHtcbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICByZXR1cm4gRElSRUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgaWYgKGFicyh4KSA+PSBhYnMoeSkpIHtcbiAgICAgICAgcmV0dXJuIHggPiAwID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgfVxuICAgIHJldHVybiB5ID4gMCA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzXG4gKiBAcGFyYW0ge09iamVjdH0gcDEge3gsIHl9XG4gKiBAcGFyYW0ge09iamVjdH0gcDIge3gsIHl9XG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGRpc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dLFxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuXG4gICAgcmV0dXJuIE1hdGguc3FydCgoeCAqIHgpICsgKHkgKiB5KSk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlc1xuICogQHBhcmFtIHtPYmplY3R9IHAxXG4gKiBAcGFyYW0ge09iamVjdH0gcDJcbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcbiAqIEByZXR1cm4ge051bWJlcn0gYW5nbGVcbiAqL1xuZnVuY3Rpb24gZ2V0QW5nbGUocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcHJvcHMgPSBQUk9QU19YWTtcbiAgICB9XG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV0sXG4gICAgICAgIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgcm90YXRpb24gZGVncmVlcyBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGVuZCBhcnJheSBvZiBwb2ludGVyc1xuICogQHJldHVybiB7TnVtYmVyfSByb3RhdGlvblxuICovXG5mdW5jdGlvbiBnZXRSb3RhdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldEFuZ2xlKGVuZFsxXSwgZW5kWzBdLCBQUk9QU19DTElFTlRfWFkpIC0gZ2V0QW5nbGUoc3RhcnRbMV0sIHN0YXJ0WzBdLCBQUk9QU19DTElFTlRfWFkpO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgc2NhbGUgZmFjdG9yIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXG4gKiBubyBzY2FsZSBpcyAxLCBhbmQgZ29lcyBkb3duIHRvIDAgd2hlbiBwaW5jaGVkIHRvZ2V0aGVyLCBhbmQgYmlnZ2VyIHdoZW4gcGluY2hlZCBvdXRcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gc2NhbGVcbiAqL1xuZnVuY3Rpb24gZ2V0U2NhbGUoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBnZXREaXN0YW5jZShlbmRbMF0sIGVuZFsxXSwgUFJPUFNfQ0xJRU5UX1hZKSAvIGdldERpc3RhbmNlKHN0YXJ0WzBdLCBzdGFydFsxXSwgUFJPUFNfQ0xJRU5UX1hZKTtcbn1cblxudmFyIE1PVVNFX0lOUFVUX01BUCA9IHtcbiAgICBtb3VzZWRvd246IElOUFVUX1NUQVJULFxuICAgIG1vdXNlbW92ZTogSU5QVVRfTU9WRSxcbiAgICBtb3VzZXVwOiBJTlBVVF9FTkRcbn07XG5cbnZhciBNT1VTRV9FTEVNRU5UX0VWRU5UUyA9ICdtb3VzZWRvd24nO1xudmFyIE1PVVNFX1dJTkRPV19FVkVOVFMgPSAnbW91c2Vtb3ZlIG1vdXNldXAnO1xuXG4vKipcbiAqIE1vdXNlIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBNb3VzZUlucHV0KCkge1xuICAgIHRoaXMuZXZFbCA9IE1PVVNFX0VMRU1FTlRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBNT1VTRV9XSU5ET1dfRVZFTlRTO1xuXG4gICAgdGhpcy5hbGxvdyA9IHRydWU7IC8vIHVzZWQgYnkgSW5wdXQuVG91Y2hNb3VzZSB0byBkaXNhYmxlIG1vdXNlIGV2ZW50c1xuICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOyAvLyBtb3VzZWRvd24gc3RhdGVcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTUVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBNT1VTRV9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gb24gc3RhcnQgd2Ugd2FudCB0byBoYXZlIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiBldi5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfTU9WRSAmJiBldi53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gSU5QVVRfRU5EO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW91c2UgbXVzdCBiZSBkb3duLCBhbmQgbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkIChzZWUgdGhlIFRvdWNoTW91c2UgaW5wdXQpXG4gICAgICAgIGlmICghdGhpcy5wcmVzc2VkIHx8ICF0aGlzLmFsbG93KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbnZhciBQT0lOVEVSX0lOUFVUX01BUCA9IHtcbiAgICBwb2ludGVyZG93bjogSU5QVVRfU1RBUlQsXG4gICAgcG9pbnRlcm1vdmU6IElOUFVUX01PVkUsXG4gICAgcG9pbnRlcnVwOiBJTlBVVF9FTkQsXG4gICAgcG9pbnRlcmNhbmNlbDogSU5QVVRfQ0FOQ0VMLFxuICAgIHBvaW50ZXJvdXQ6IElOUFVUX0NBTkNFTFxufTtcblxuLy8gaW4gSUUxMCB0aGUgcG9pbnRlciB0eXBlcyBpcyBkZWZpbmVkIGFzIGFuIGVudW1cbnZhciBJRTEwX1BPSU5URVJfVFlQRV9FTlVNID0ge1xuICAgIDI6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgMzogSU5QVVRfVFlQRV9QRU4sXG4gICAgNDogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICA1OiBJTlBVVF9UWVBFX0tJTkVDVCAvLyBzZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWNvYnJvc3NpL3N0YXR1cy80ODA1OTY0Mzg0ODk4OTA4MTZcbn07XG5cbnZhciBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ3BvaW50ZXJkb3duJztcbnZhciBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAncG9pbnRlcm1vdmUgcG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnO1xuXG4vLyBJRTEwIGhhcyBwcmVmaXhlZCBzdXBwb3J0LCBhbmQgY2FzZS1zZW5zaXRpdmVcbmlmICh3aW5kb3cuTVNQb2ludGVyRXZlbnQpIHtcbiAgICBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ01TUG9pbnRlckRvd24nO1xuICAgIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdNU1BvaW50ZXJNb3ZlIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCc7XG59XG5cbi8qKlxuICogUG9pbnRlciBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gUG9pbnRlckV2ZW50SW5wdXQoKSB7XG4gICAgdGhpcy5ldkVsID0gUE9JTlRFUl9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gUE9JTlRFUl9XSU5ET1dfRVZFTlRTO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuc3RvcmUgPSAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucG9pbnRlckV2ZW50cyA9IFtdKTtcbn1cblxuaW5oZXJpdChQb2ludGVyRXZlbnRJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gUEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBzdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIHZhciByZW1vdmVQb2ludGVyID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2ZW50VHlwZU5vcm1hbGl6ZWQgPSBldi50eXBlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnbXMnLCAnJyk7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBQT0lOVEVSX0lOUFVUX01BUFtldmVudFR5cGVOb3JtYWxpemVkXTtcbiAgICAgICAgdmFyIHBvaW50ZXJUeXBlID0gSUUxMF9QT0lOVEVSX1RZUEVfRU5VTVtldi5wb2ludGVyVHlwZV0gfHwgZXYucG9pbnRlclR5cGU7XG5cbiAgICAgICAgdmFyIGlzVG91Y2ggPSAocG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCk7XG5cbiAgICAgICAgLy8gZ2V0IGluZGV4IG9mIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcbiAgICAgICAgdmFyIHN0b3JlSW5kZXggPSBpbkFycmF5KHN0b3JlLCBldi5wb2ludGVySWQsICdwb2ludGVySWQnKTtcblxuICAgICAgICAvLyBzdGFydCBhbmQgbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAoZXYuYnV0dG9uID09PSAwIHx8IGlzVG91Y2gpKSB7XG4gICAgICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICBzdG9yZUluZGV4ID0gc3RvcmUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICAgICAgcmVtb3ZlUG9pbnRlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpdCBub3QgZm91bmQsIHNvIHRoZSBwb2ludGVyIGhhc24ndCBiZWVuIGRvd24gKHNvIGl0J3MgcHJvYmFibHkgYSBob3ZlcilcbiAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGV2ZW50IGluIHRoZSBzdG9yZVxuICAgICAgICBzdG9yZVtzdG9yZUluZGV4XSA9IGV2O1xuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBzdG9yZSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBwb2ludGVyVHlwZSxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVtb3ZlUG9pbnRlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gdGhlIHN0b3JlXG4gICAgICAgICAgICBzdG9yZS5zcGxpY2Uoc3RvcmVJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIFNJTkdMRV9UT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQnO1xudmFyIFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcblxuLyoqXG4gKiBUb3VjaCBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gU2luZ2xlVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTO1xuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTaW5nbGVUb3VjaElucHV0LCBJbnB1dCwge1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgdHlwZSA9IFNJTkdMRV9UT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gc2hvdWxkIHdlIGhhbmRsZSB0aGUgdG91Y2ggZXZlbnRzP1xuICAgICAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoZXMgPSBub3JtYWxpemVTaW5nbGVUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpO1xuXG4gICAgICAgIC8vIHdoZW4gZG9uZSwgcmVzZXQgdGhlIHN0YXJ0ZWQgc3RhdGVcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiB0b3VjaGVzWzBdLmxlbmd0aCAtIHRvdWNoZXNbMV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxuICogQHBhcmFtIHtPYmplY3R9IGV2XG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSBmbGFnXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVTaW5nbGVUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbCA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIGNoYW5nZWQgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKTtcblxuICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgYWxsID0gdW5pcXVlQXJyYXkoYWxsLmNvbmNhdChjaGFuZ2VkKSwgJ2lkZW50aWZpZXInLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2FsbCwgY2hhbmdlZF07XG59XG5cbnZhciBUT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFRPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xuXG4vKipcbiAqIE11bHRpLXVzZXIgdG91Y2ggZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFRvdWNoSW5wdXQoKSB7XG4gICAgdGhpcy5ldlRhcmdldCA9IFRPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy50YXJnZXRJZHMgPSB7fTtcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNVEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciB0eXBlID0gVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGdldFRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG4gICAgICAgIGlmICghdG91Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQHRoaXMge1RvdWNoSW5wdXR9XG4gKiBAcGFyYW0ge09iamVjdH0gZXZcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8QXJyYXl9IFthbGwsIGNoYW5nZWRdXG4gKi9cbmZ1bmN0aW9uIGdldFRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsVG91Y2hlcyA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIHRhcmdldElkcyA9IHRoaXMudGFyZ2V0SWRzO1xuXG4gICAgLy8gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSB0b3VjaCwgdGhlIHByb2Nlc3MgY2FuIGJlIHNpbXBsaWZpZWRcbiAgICBpZiAodHlwZSAmIChJTlBVVF9TVEFSVCB8IElOUFVUX01PVkUpICYmIGFsbFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRhcmdldElkc1thbGxUb3VjaGVzWzBdLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFthbGxUb3VjaGVzLCBhbGxUb3VjaGVzXTtcbiAgICB9XG5cbiAgICB2YXIgaSxcbiAgICAgICAgdGFyZ2V0VG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXMgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMgPSBbXSxcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG5cbiAgICAvLyBnZXQgdGFyZ2V0IHRvdWNoZXMgZnJvbSB0b3VjaGVzXG4gICAgdGFyZ2V0VG91Y2hlcyA9IGFsbFRvdWNoZXMuZmlsdGVyKGZ1bmN0aW9uKHRvdWNoKSB7XG4gICAgICAgIHJldHVybiBoYXNQYXJlbnQodG91Y2gudGFyZ2V0LCB0YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgLy8gY29sbGVjdCB0b3VjaGVzXG4gICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXJnZXRJZHNbdGFyZ2V0VG91Y2hlc1tpXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgY2hhbmdlZCB0b3VjaGVzIHRvIG9ubHkgY29udGFpbiB0b3VjaGVzIHRoYXQgZXhpc3QgaW4gdGhlIGNvbGxlY3RlZCB0YXJnZXQgaWRzXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBjaGFuZ2VkVG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMucHVzaChjaGFuZ2VkVG91Y2hlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhbnVwIHJlbW92ZWQgdG91Y2hlc1xuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoIWNoYW5nZWRUYXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgLy8gbWVyZ2UgdGFyZ2V0VG91Y2hlcyB3aXRoIGNoYW5nZWRUYXJnZXRUb3VjaGVzIHNvIGl0IGNvbnRhaW5zIEFMTCB0b3VjaGVzLCBpbmNsdWRpbmcgJ2VuZCcgYW5kICdjYW5jZWwnXG4gICAgICAgIHVuaXF1ZUFycmF5KHRhcmdldFRvdWNoZXMuY29uY2F0KGNoYW5nZWRUYXJnZXRUb3VjaGVzKSwgJ2lkZW50aWZpZXInLCB0cnVlKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXNcbiAgICBdO1xufVxuXG4vKipcbiAqIENvbWJpbmVkIHRvdWNoIGFuZCBtb3VzZSBpbnB1dFxuICpcbiAqIFRvdWNoIGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGVuIG1vdXNlLCBhbmQgd2hpbGUgdG91Y2hpbmcgbm8gbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkLlxuICogVGhpcyBiZWNhdXNlIHRvdWNoIGRldmljZXMgYWxzbyBlbWl0IG1vdXNlIGV2ZW50cyB3aGlsZSBkb2luZyBhIHRvdWNoLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gVG91Y2hNb3VzZUlucHV0KCkge1xuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGJpbmRGbih0aGlzLmhhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMudG91Y2ggPSBuZXcgVG91Y2hJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2VJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xufVxuXG5pbmhlcml0KFRvdWNoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgYW5kIHRvdWNoIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7SGFtbWVyfSBtYW5hZ2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0RXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVE1FaGFuZGxlcihtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIGlzVG91Y2ggPSAoaW5wdXREYXRhLnBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfVE9VQ0gpLFxuICAgICAgICAgICAgaXNNb3VzZSA9IChpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9NT1VTRSk7XG5cbiAgICAgICAgLy8gd2hlbiB3ZSdyZSBpbiBhIHRvdWNoIGV2ZW50LCBzbyAgYmxvY2sgYWxsIHVwY29taW5nIG1vdXNlIGV2ZW50c1xuICAgICAgICAvLyBtb3N0IG1vYmlsZSBicm93c2VyIGFsc28gZW1pdCBtb3VzZWV2ZW50cywgcmlnaHQgYWZ0ZXIgdG91Y2hzdGFydFxuICAgICAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgICAgICAgdGhpcy5tb3VzZS5hbGxvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91c2UgJiYgIXRoaXMubW91c2UuYWxsb3cpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc2V0IHRoZSBhbGxvd01vdXNlIHdoZW4gd2UncmUgZG9uZVxuICAgICAgICBpZiAoaW5wdXRFdmVudCAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlLmFsbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRvdWNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5tb3VzZS5kZXN0cm95KCk7XG4gICAgfVxufSk7XG5cbnZhciBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gPSBwcmVmaXhlZChURVNUX0VMRU1FTlQuc3R5bGUsICd0b3VjaEFjdGlvbicpO1xudmFyIE5BVElWRV9UT1VDSF9BQ1RJT04gPSBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gIT09IHVuZGVmaW5lZDtcblxuLy8gbWFnaWNhbCB0b3VjaEFjdGlvbiB2YWx1ZVxudmFyIFRPVUNIX0FDVElPTl9DT01QVVRFID0gJ2NvbXB1dGUnO1xudmFyIFRPVUNIX0FDVElPTl9BVVRPID0gJ2F1dG8nO1xudmFyIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04gPSAnbWFuaXB1bGF0aW9uJzsgLy8gbm90IGltcGxlbWVudGVkXG52YXIgVE9VQ0hfQUNUSU9OX05PTkUgPSAnbm9uZSc7XG52YXIgVE9VQ0hfQUNUSU9OX1BBTl9YID0gJ3Bhbi14JztcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1kgPSAncGFuLXknO1xuXG4vKipcbiAqIFRvdWNoIEFjdGlvblxuICogc2V0cyB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgb3IgdXNlcyB0aGUganMgYWx0ZXJuYXRpdmVcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVG91Y2hBY3Rpb24obWFuYWdlciwgdmFsdWUpIHtcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuc2V0KHZhbHVlKTtcbn1cblxuVG91Y2hBY3Rpb24ucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWUgb24gdGhlIGVsZW1lbnQgb3IgZW5hYmxlIHRoZSBwb2x5ZmlsbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gZmluZCBvdXQgdGhlIHRvdWNoLWFjdGlvbiBieSB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgaWYgKHZhbHVlID09IFRPVUNIX0FDVElPTl9DT01QVVRFKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuY29tcHV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE5BVElWRV9UT1VDSF9BQ1RJT04pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlW1BSRUZJWEVEX1RPVUNIX0FDVElPTl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGlvbnMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICoganVzdCByZS1zZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXQodGhpcy5tYW5hZ2VyLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjb21wdXRlIHRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IGJhc2VkIG9uIHRoZSByZWNvZ25pemVyJ3Mgc2V0dGluZ3NcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIGNvbXB1dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICBlYWNoKHRoaXMubWFuYWdlci5yZWNvZ25pemVycywgZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICAgICAgaWYgKGJvb2xPckZuKHJlY29nbml6ZXIub3B0aW9ucy5lbmFibGUsIFtyZWNvZ25pemVyXSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zID0gYWN0aW9ucy5jb25jYXQocmVjb2duaXplci5nZXRUb3VjaEFjdGlvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGVhblRvdWNoQWN0aW9ucyhhY3Rpb25zLmpvaW4oJyAnKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBlYWNoIGlucHV0IGN5Y2xlIGFuZCBwcm92aWRlcyB0aGUgcHJldmVudGluZyBvZiB0aGUgYnJvd3NlciBiZWhhdmlvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0czogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgLy8gbm90IG5lZWRlZCB3aXRoIG5hdGl2ZSBzdXBwb3J0IGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHlcbiAgICAgICAgaWYgKE5BVElWRV9UT1VDSF9BQ1RJT04pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzcmNFdmVudCA9IGlucHV0LnNyY0V2ZW50O1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQub2Zmc2V0RGlyZWN0aW9uO1xuXG4gICAgICAgIC8vIGlmIHRoZSB0b3VjaCBhY3Rpb24gZGlkIHByZXZlbnRlZCBvbmNlIHRoaXMgc2Vzc2lvblxuICAgICAgICBpZiAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucHJldmVudGVkKSB7XG4gICAgICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIHZhciBoYXNOb25lID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpO1xuICAgICAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSk7XG4gICAgICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKTtcblxuICAgICAgICBpZiAoaGFzTm9uZSB8fFxuICAgICAgICAgICAgKGhhc1BhblkgJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHx8XG4gICAgICAgICAgICAoaGFzUGFuWCAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2ZW50U3JjKHNyY0V2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjRXZlbnRcbiAgICAgKi9cbiAgICBwcmV2ZW50U3JjOiBmdW5jdGlvbihzcmNFdmVudCkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogd2hlbiB0aGUgdG91Y2hBY3Rpb25zIGFyZSBjb2xsZWN0ZWQgdGhleSBhcmUgbm90IGEgdmFsaWQgdmFsdWUsIHNvIHdlIG5lZWQgdG8gY2xlYW4gdGhpbmdzIHVwLiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWN0aW9uc1xuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMpIHtcbiAgICAvLyBub25lXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcblxuICAgIC8vIHBhbi14IGFuZCBwYW4teSBjYW4gYmUgY29tYmluZWRcbiAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fUEFOX1ggKyAnICcgKyBUT1VDSF9BQ1RJT05fUEFOX1k7XG4gICAgfVxuXG4gICAgLy8gcGFuLXggT1IgcGFuLXlcbiAgICBpZiAoaGFzUGFuWCB8fCBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBoYXNQYW5YID8gVE9VQ0hfQUNUSU9OX1BBTl9YIDogVE9VQ0hfQUNUSU9OX1BBTl9ZO1xuICAgIH1cblxuICAgIC8vIG1hbmlwdWxhdGlvblxuICAgIGlmIChpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTjtcbiAgICB9XG5cbiAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX0FVVE87XG59XG5cbi8qKlxuICogUmVjb2duaXplciBmbG93IGV4cGxhaW5lZDsgKlxuICogQWxsIHJlY29nbml6ZXJzIGhhdmUgdGhlIGluaXRpYWwgc3RhdGUgb2YgUE9TU0lCTEUgd2hlbiBhIGlucHV0IHNlc3Npb24gc3RhcnRzLlxuICogVGhlIGRlZmluaXRpb24gb2YgYSBpbnB1dCBzZXNzaW9uIGlzIGZyb20gdGhlIGZpcnN0IGlucHV0IHVudGlsIHRoZSBsYXN0IGlucHV0LCB3aXRoIGFsbCBpdCdzIG1vdmVtZW50IGluIGl0LiAqXG4gKiBFeGFtcGxlIHNlc3Npb24gZm9yIG1vdXNlLWlucHV0OiBtb3VzZWRvd24gLT4gbW91c2Vtb3ZlIC0+IG1vdXNldXBcbiAqXG4gKiBPbiBlYWNoIHJlY29nbml6aW5nIGN5Y2xlIChzZWUgTWFuYWdlci5yZWNvZ25pemUpIHRoZSAucmVjb2duaXplKCkgbWV0aG9kIGlzIGV4ZWN1dGVkXG4gKiB3aGljaCBkZXRlcm1pbmVzIHdpdGggc3RhdGUgaXQgc2hvdWxkIGJlLlxuICpcbiAqIElmIHRoZSByZWNvZ25pemVyIGhhcyB0aGUgc3RhdGUgRkFJTEVELCBDQU5DRUxMRUQgb3IgUkVDT0dOSVpFRCAoZXF1YWxzIEVOREVEKSwgaXQgaXMgcmVzZXQgdG9cbiAqIFBPU1NJQkxFIHRvIGdpdmUgaXQgYW5vdGhlciBjaGFuZ2Ugb24gdGhlIG5leHQgY3ljbGUuXG4gKlxuICogICAgICAgICAgICAgICBQb3NzaWJsZVxuICogICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICstLS0tLSstLS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICstLS0tLSstLS0tLSsgICAgICAgICAgICAgICB8XG4gKiAgICAgIHwgICAgICAgICAgIHwgICAgICAgICAgICAgICB8XG4gKiAgIEZhaWxlZCAgICAgIENhbmNlbGxlZCAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0rLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgIFJlY29nbml6ZWQgICAgICAgQmVnYW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuZGVkL1JlY29nbml6ZWRcbiAqL1xudmFyIFNUQVRFX1BPU1NJQkxFID0gMTtcbnZhciBTVEFURV9CRUdBTiA9IDI7XG52YXIgU1RBVEVfQ0hBTkdFRCA9IDQ7XG52YXIgU1RBVEVfRU5ERUQgPSA4O1xudmFyIFNUQVRFX1JFQ09HTklaRUQgPSBTVEFURV9FTkRFRDtcbnZhciBTVEFURV9DQU5DRUxMRUQgPSAxNjtcbnZhciBTVEFURV9GQUlMRUQgPSAzMjtcblxuLyoqXG4gKiBSZWNvZ25pemVyXG4gKiBFdmVyeSByZWNvZ25pemVyIG5lZWRzIHRvIGV4dGVuZCBmcm9tIHRoaXMgY2xhc3MuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFJlY29nbml6ZXIob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSB1bmlxdWVJZCgpO1xuXG4gICAgdGhpcy5tYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZShvcHRpb25zIHx8IHt9LCB0aGlzLmRlZmF1bHRzKTtcblxuICAgIC8vIGRlZmF1bHQgaXMgZW5hYmxlIHRydWVcbiAgICB0aGlzLm9wdGlvbnMuZW5hYmxlID0gaWZVbmRlZmluZWQodGhpcy5vcHRpb25zLmVuYWJsZSwgdHJ1ZSk7XG5cbiAgICB0aGlzLnN0YXRlID0gU1RBVEVfUE9TU0lCTEU7XG5cbiAgICB0aGlzLnNpbXVsdGFuZW91cyA9IHt9O1xuICAgIHRoaXMucmVxdWlyZUZhaWwgPSBbXTtcbn1cblxuUmVjb2duaXplci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7fSxcblxuICAgIC8qKlxuICAgICAqIHNldCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtSZWNvZ25pemVyfVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBleHRlbmQodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBhbHNvIHVwZGF0ZSB0aGUgdG91Y2hBY3Rpb24sIGluIGNhc2Ugc29tZXRoaW5nIGNoYW5nZWQgYWJvdXQgdGhlIGRpcmVjdGlvbnMvZW5hYmxlZCBzdGF0ZVxuICAgICAgICB0aGlzLm1hbmFnZXIgJiYgdGhpcy5tYW5hZ2VyLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIHJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaW11bHRhbmVvdXMgPSB0aGlzLnNpbXVsdGFuZW91cztcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBpZiAoIXNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdKSB7XG4gICAgICAgICAgICBzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSA9IG90aGVyUmVjb2duaXplcjtcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZWNvZ25pemVXaXRoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSBzaW11bHRhbmVvdXMgbGluay4gaXQgZG9lc250IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgZHJvcFJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAnZHJvcFJlY29nbml6ZVdpdGgnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVjb2duaXplciBjYW4gb25seSBydW4gd2hlbiBhbiBvdGhlciBpcyBmYWlsaW5nXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIHJlcXVpcmVGYWlsdXJlOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ3JlcXVpcmVGYWlsdXJlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlcXVpcmVGYWlsID0gdGhpcy5yZXF1aXJlRmFpbDtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBpZiAoaW5BcnJheShyZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlcXVpcmVGYWlsLnB1c2gob3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZXF1aXJlRmFpbHVyZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZHJvcCB0aGUgcmVxdWlyZUZhaWx1cmUgbGluay4gaXQgZG9lcyBub3QgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAnZHJvcFJlcXVpcmVGYWlsdXJlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICB2YXIgaW5kZXggPSBpbkFycmF5KHRoaXMucmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVpcmVGYWlsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhhcyByZXF1aXJlIGZhaWx1cmVzIGJvb2xlYW5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNSZXF1aXJlRmFpbHVyZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGggPiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgcmVjb2duaXplciBjYW4gcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNhblJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICByZXR1cm4gISF0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBZb3Ugc2hvdWxkIHVzZSBgdHJ5RW1pdGAgaW5zdGVhZCBvZiBgZW1pdGAgZGlyZWN0bHkgdG8gY2hlY2tcbiAgICAgKiB0aGF0IGFsbCB0aGUgbmVlZGVkIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQgYmVmb3JlIGVtaXR0aW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBmdW5jdGlvbiBlbWl0KHdpdGhTdGF0ZSkge1xuICAgICAgICAgICAgc2VsZi5tYW5hZ2VyLmVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgKHdpdGhTdGF0ZSA/IHN0YXRlU3RyKHN0YXRlKSA6ICcnKSwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ3BhbnN0YXJ0JyBhbmQgJ3Bhbm1vdmUnXG4gICAgICAgIGlmIChzdGF0ZSA8IFNUQVRFX0VOREVEKSB7XG4gICAgICAgICAgICBlbWl0KHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW1pdCgpOyAvLyBzaW1wbGUgJ2V2ZW50TmFtZScgZXZlbnRzXG5cbiAgICAgICAgLy8gcGFuZW5kIGFuZCBwYW5jYW5jZWxcbiAgICAgICAgaWYgKHN0YXRlID49IFNUQVRFX0VOREVEKSB7XG4gICAgICAgICAgICBlbWl0KHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoYXQgYWxsIHRoZSByZXF1aXJlIGZhaWx1cmUgcmVjb2duaXplcnMgaGFzIGZhaWxlZCxcbiAgICAgKiBpZiB0cnVlLCBpdCBlbWl0cyBhIGdlc3R1cmUgZXZlbnQsXG4gICAgICogb3RoZXJ3aXNlLCBzZXR1cCB0aGUgc3RhdGUgdG8gRkFJTEVELlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHRyeUVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLmNhbkVtaXQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXQncyBmYWlsaW5nIGFueXdheVxuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYW4gd2UgZW1pdD9cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjYW5FbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMucmVxdWlyZUZhaWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLnJlcXVpcmVGYWlsW2ldLnN0YXRlICYgKFNUQVRFX0ZBSUxFRCB8IFNUQVRFX1BPU1NJQkxFKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgcmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uKGlucHV0RGF0YSkge1xuICAgICAgICAvLyBtYWtlIGEgbmV3IGNvcHkgb2YgdGhlIGlucHV0RGF0YVxuICAgICAgICAvLyBzbyB3ZSBjYW4gY2hhbmdlIHRoZSBpbnB1dERhdGEgd2l0aG91dCBtZXNzaW5nIHVwIHRoZSBvdGhlciByZWNvZ25pemVyc1xuICAgICAgICB2YXIgaW5wdXREYXRhQ2xvbmUgPSBleHRlbmQoe30sIGlucHV0RGF0YSk7XG5cbiAgICAgICAgLy8gaXMgaXMgZW5hYmxlZCBhbmQgYWxsb3cgcmVjb2duaXppbmc/XG4gICAgICAgIGlmICghYm9vbE9yRm4odGhpcy5vcHRpb25zLmVuYWJsZSwgW3RoaXMsIGlucHV0RGF0YUNsb25lXSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXNldCB3aGVuIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZFxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmIChTVEFURV9SRUNPR05JWkVEIHwgU1RBVEVfQ0FOQ0VMTEVEIHwgU1RBVEVfRkFJTEVEKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BPU1NJQkxFO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvY2VzcyhpbnB1dERhdGFDbG9uZSk7XG5cbiAgICAgICAgLy8gdGhlIHJlY29nbml6ZXIgaGFzIHJlY29nbml6ZWQgYSBnZXN0dXJlXG4gICAgICAgIC8vIHNvIHRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQgfCBTVEFURV9DQU5DRUxMRUQpKSB7XG4gICAgICAgICAgICB0aGlzLnRyeUVtaXQoaW5wdXREYXRhQ2xvbmUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgc3RhdGUgb2YgdGhlIHJlY29nbml6ZXJcbiAgICAgKiB0aGUgYWN0dWFsIHJlY29nbml6aW5nIGhhcHBlbnMgaW4gdGhpcyBtZXRob2RcbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKiBAcmV0dXJucyB7Q29uc3R9IFNUQVRFXG4gICAgICovXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXREYXRhKSB7IH0sIC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBwcmVmZXJyZWQgdG91Y2gtYWN0aW9uXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkgeyB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsbGVkIHdoZW4gdGhlIGdlc3R1cmUgaXNuJ3QgYWxsb3dlZCB0byByZWNvZ25pemVcbiAgICAgKiBsaWtlIHdoZW4gYW5vdGhlciBpcyBiZWluZyByZWNvZ25pemVkIG9yIGl0IGlzIGRpc2FibGVkXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKSB7IH1cbn07XG5cbi8qKlxuICogZ2V0IGEgdXNhYmxlIHN0cmluZywgdXNlZCBhcyBldmVudCBwb3N0Zml4XG4gKiBAcGFyYW0ge0NvbnN0fSBzdGF0ZVxuICogQHJldHVybnMge1N0cmluZ30gc3RhdGVcbiAqL1xuZnVuY3Rpb24gc3RhdGVTdHIoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgJiBTVEFURV9DQU5DRUxMRUQpIHtcbiAgICAgICAgcmV0dXJuICdjYW5jZWwnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9FTkRFRCkge1xuICAgICAgICByZXR1cm4gJ2VuZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0NIQU5HRUQpIHtcbiAgICAgICAgcmV0dXJuICdtb3ZlJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQkVHQU4pIHtcbiAgICAgICAgcmV0dXJuICdzdGFydCc7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBkaXJlY3Rpb24gY29ucyB0byBzdHJpbmdcbiAqIEBwYXJhbSB7Q29uc3R9IGRpcmVjdGlvblxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZGlyZWN0aW9uU3RyKGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0RPV04pIHtcbiAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fVVApIHtcbiAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0xFRlQpIHtcbiAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fUklHSFQpIHtcbiAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBnZXQgYSByZWNvZ25pemVyIGJ5IG5hbWUgaWYgaXQgaXMgYm91bmQgdG8gYSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSBvdGhlclJlY29nbml6ZXJcbiAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICogQHJldHVybnMge1JlY29nbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCByZWNvZ25pemVyKSB7XG4gICAgdmFyIG1hbmFnZXIgPSByZWNvZ25pemVyLm1hbmFnZXI7XG4gICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgICAgcmV0dXJuIG1hbmFnZXIuZ2V0KG90aGVyUmVjb2duaXplcik7XG4gICAgfVxuICAgIHJldHVybiBvdGhlclJlY29nbml6ZXI7XG59XG5cbi8qKlxuICogVGhpcyByZWNvZ25pemVyIGlzIGp1c3QgdXNlZCBhcyBhIGJhc2UgZm9yIHRoZSBzaW1wbGUgYXR0cmlidXRlIHJlY29nbml6ZXJzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIEF0dHJSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChBdHRyUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjaGVjayBpZiBpdCB0aGUgcmVjb2duaXplciByZWNlaXZlcyB2YWxpZCBpbnB1dCwgbGlrZSBpbnB1dC5kaXN0YW5jZSA+IDEwLlxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSByZWNvZ25pemVkXG4gICAgICovXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25Qb2ludGVycyA9IHRoaXMub3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgcmV0dXJuIG9wdGlvblBvaW50ZXJzID09PSAwIHx8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9uUG9pbnRlcnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGlucHV0IGFuZCByZXR1cm4gdGhlIHN0YXRlIGZvciB0aGUgcmVjb2duaXplclxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHsqfSBTdGF0ZVxuICAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBpbnB1dC5ldmVudFR5cGU7XG5cbiAgICAgICAgdmFyIGlzUmVjb2duaXplZCA9IHN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCk7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5hdHRyVGVzdChpbnB1dCk7XG5cbiAgICAgICAgLy8gb24gY2FuY2VsIGlucHV0IGFuZCB3ZSd2ZSByZWNvZ25pemVkIGJlZm9yZSwgcmV0dXJuIFNUQVRFX0NBTkNFTExFRFxuICAgICAgICBpZiAoaXNSZWNvZ25pemVkICYmIChldmVudFR5cGUgJiBJTlBVVF9DQU5DRUwgfHwgIWlzVmFsaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DQU5DRUxMRUQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWNvZ25pemVkIHx8IGlzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9FTkRFRDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIShzdGF0ZSAmIFNUQVRFX0JFR0FOKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NIQU5HRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQYW5cbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGFuZCBtb3ZlZCBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFBhblJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMucFggPSBudWxsO1xuICAgIHRoaXMucFkgPSBudWxsO1xufVxuXG5pbmhlcml0KFBhblJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQYW5SZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwYW4nLFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fQUxMXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgfSxcblxuICAgIGRpcmVjdGlvblRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBpbnB1dC5kaXN0YW5jZTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0LmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHggPSBpbnB1dC5kZWx0YVg7XG4gICAgICAgIHZhciB5ID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIC8vIGxvY2sgdG8gYXhpcz9cbiAgICAgICAgaWYgKCEoZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICh4ID09PSAwKSA/IERJUkVDVElPTl9OT05FIDogKHggPCAwKSA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geCAhPSB0aGlzLnBYO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFYKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gKHkgPT09IDApID8gRElSRUNUSU9OX05PTkUgOiAoeSA8IDApID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XG4gICAgICAgICAgICAgICAgaGFzTW92ZWQgPSB5ICE9IHRoaXMucFk7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgcmV0dXJuIGhhc01vdmVkICYmIGRpc3RhbmNlID4gb3B0aW9ucy50aHJlc2hvbGQgJiYgZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb247XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gQXR0clJlY29nbml6ZXIucHJvdG90eXBlLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOIHx8ICghKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTikgJiYgdGhpcy5kaXJlY3Rpb25UZXN0KGlucHV0KSkpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB0aGlzLnBYID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB0aGlzLnBZID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uLCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFBpbmNoXG4gKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlcnMgYXJlIG1vdmluZyB0b3dhcmQgKHpvb20taW4pIG9yIGF3YXkgZnJvbSBlYWNoIG90aGVyICh6b29tLW91dCkuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFBpbmNoUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFBpbmNoUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBpbmNoUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncGluY2gnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgIHBvaW50ZXJzOiAyXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5zY2FsZSAtIDEpID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgICAgICBpZiAoaW5wdXQuc2NhbGUgIT09IDEpIHtcbiAgICAgICAgICAgIHZhciBpbk91dCA9IGlucHV0LnNjYWxlIDwgMSA/ICdpbicgOiAnb3V0JztcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGluT3V0LCBpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBQcmVzc1xuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvd24gZm9yIHggbXMgd2l0aG91dCBhbnkgbW92ZW1lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUHJlc3NSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG59XG5cbmluaGVyaXQoUHJlc3NSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQcmVzc1JlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3ByZXNzJyxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIHRpbWU6IDUwMCwgLy8gbWluaW1hbCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIHByZXNzZWRcbiAgICAgICAgdGhyZXNob2xkOiA1IC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fQVVUT107XG4gICAgfSxcblxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgdmFyIHZhbGlkTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IG9wdGlvbnMudGhyZXNob2xkO1xuICAgICAgICB2YXIgdmFsaWRUaW1lID0gaW5wdXQuZGVsdGFUaW1lID4gb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuICAgICAgICBpZiAoIXZhbGlkTW92ZW1lbnQgfHwgIXZhbGlkUG9pbnRlcnMgfHwgKGlucHV0LmV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmICF2YWxpZFRpbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICB9LCBvcHRpb25zLnRpbWUsIHRoaXMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyAndXAnLCBpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogUm90YXRlXG4gKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlciBhcmUgbW92aW5nIGluIGEgY2lyY3VsYXIgbW90aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBSb3RhdGVSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoUm90YXRlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFJvdGF0ZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3JvdGF0ZScsXG4gICAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgICAgcG9pbnRlcnM6IDJcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKE1hdGguYWJzKGlucHV0LnJvdGF0aW9uKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBTd2lwZVxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIG1vdmluZyBmYXN0ICh2ZWxvY2l0eSksIHdpdGggZW5vdWdoIGRpc3RhbmNlIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gU3dpcGVSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoU3dpcGVSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgU3dpcGVSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdzd2lwZScsXG4gICAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICAgIHZlbG9jaXR5OiAwLjY1LFxuICAgICAgICBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMLFxuICAgICAgICBwb2ludGVyczogMVxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQYW5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRUb3VjaEFjdGlvbi5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIHZhciB2ZWxvY2l0eTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uICYgKERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC52ZWxvY2l0eTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC52ZWxvY2l0eVg7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0LnZlbG9jaXR5WTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgZGlyZWN0aW9uICYgaW5wdXQuZGlyZWN0aW9uICYmXG4gICAgICAgICAgICBpbnB1dC5kaXN0YW5jZSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgJiZcbiAgICAgICAgICAgIGFicyh2ZWxvY2l0eSkgPiB0aGlzLm9wdGlvbnMudmVsb2NpdHkgJiYgaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0LmRpcmVjdGlvbik7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbiwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQSB0YXAgaXMgZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG9pbmcgYSBzbWFsbCB0YXAvY2xpY2suIE11bHRpcGxlIHRhcHMgYXJlIHJlY29nbml6ZWQgaWYgdGhleSBvY2N1clxuICogYmV0d2VlbiB0aGUgZ2l2ZW4gaW50ZXJ2YWwgYW5kIHBvc2l0aW9uLiBUaGUgZGVsYXkgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBtdWx0aS10YXBzIHdpdGhvdXQgZmlyaW5nXG4gKiBhIHNpbmdsZSB0YXAuXG4gKlxuICogVGhlIGV2ZW50RGF0YSBmcm9tIHRoZSBlbWl0dGVkIGV2ZW50IGNvbnRhaW5zIHRoZSBwcm9wZXJ0eSBgdGFwQ291bnRgLCB3aGljaCBjb250YWlucyB0aGUgYW1vdW50IG9mXG4gKiBtdWx0aS10YXBzIGJlaW5nIHJlY29nbml6ZWQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gVGFwUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBwcmV2aW91cyB0aW1lIGFuZCBjZW50ZXIsXG4gICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXG4gICAgdGhpcy5wVGltZSA9IGZhbHNlO1xuICAgIHRoaXMucENlbnRlciA9IGZhbHNlO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbn1cblxuaW5oZXJpdChUYXBSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3RhcCcsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0YXBzOiAxLFxuICAgICAgICBpbnRlcnZhbDogMzAwLCAvLyBtYXggdGltZSBiZXR3ZWVuIHRoZSBtdWx0aS10YXAgdGFwc1xuICAgICAgICB0aW1lOiAyNTAsIC8vIG1heCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIGRvd24gKGxpa2UgZmluZ2VyIG9uIHRoZSBzY3JlZW4pXG4gICAgICAgIHRocmVzaG9sZDogMiwgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICAgICAgcG9zVGhyZXNob2xkOiAxMCAvLyBhIG11bHRpLXRhcCBjYW4gYmUgYSBiaXQgb2ZmIHRoZSBpbml0aWFsIHBvc2l0aW9uXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgICAgdmFyIHZhbGlkVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICBpZiAoKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSAmJiAodGhpcy5jb3VudCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICh2YWxpZE1vdmVtZW50ICYmIHZhbGlkVG91Y2hUaW1lICYmIHZhbGlkUG9pbnRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHZhbGlkSW50ZXJ2YWwgPSB0aGlzLnBUaW1lID8gKGlucHV0LnRpbWVTdGFtcCAtIHRoaXMucFRpbWUgPCBvcHRpb25zLmludGVydmFsKSA6IHRydWU7XG4gICAgICAgICAgICB2YXIgdmFsaWRNdWx0aVRhcCA9ICF0aGlzLnBDZW50ZXIgfHwgZ2V0RGlzdGFuY2UodGhpcy5wQ2VudGVyLCBpbnB1dC5jZW50ZXIpIDwgb3B0aW9ucy5wb3NUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIHRoaXMucFRpbWUgPSBpbnB1dC50aW1lU3RhbXA7XG4gICAgICAgICAgICB0aGlzLnBDZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRNdWx0aVRhcCB8fCAhdmFsaWRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgICAgIC8vIGlmIHRhcCBjb3VudCBtYXRjaGVzIHdlIGhhdmUgcmVjb2duaXplZCBpdCxcbiAgICAgICAgICAgIC8vIGVsc2UgaXQgaGFzIGJlZ2FuIHJlY29nbml6aW5nLi4uXG4gICAgICAgICAgICB2YXIgdGFwQ291bnQgPSB0aGlzLmNvdW50ICUgb3B0aW9ucy50YXBzO1xuICAgICAgICAgICAgaWYgKHRhcENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gZmFpbGluZyByZXF1aXJlbWVudHMsIGltbWVkaWF0ZWx5IHRyaWdnZXIgdGhlIHRhcCBldmVudFxuICAgICAgICAgICAgICAgIC8vIG9yIHdhaXQgYXMgbG9uZyBhcyB0aGUgbXVsdGl0YXAgaW50ZXJ2YWwgdG8gdHJpZ2dlclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXNSZXF1aXJlRmFpbHVyZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgZmFpbFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLmludGVydmFsLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gU1RBVEVfUkVDT0dOSVpFRCApIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0LnRhcENvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogU2ltcGxlIHdheSB0byBjcmVhdGUgYW4gbWFuYWdlciB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgcmVjb2duaXplcnMuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSGFtbWVyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnJlY29nbml6ZXJzID0gaWZVbmRlZmluZWQob3B0aW9ucy5yZWNvZ25pemVycywgSGFtbWVyLmRlZmF1bHRzLnByZXNldCk7XG4gICAgcmV0dXJuIG5ldyBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfVxuICovXG5IYW1tZXIuVkVSU0lPTiA9ICcyLjAuNCc7XG5cbi8qKlxuICogZGVmYXVsdCBzZXR0aW5nc1xuICogQG5hbWVzcGFjZVxuICovXG5IYW1tZXIuZGVmYXVsdHMgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IGlmIERPTSBldmVudHMgYXJlIGJlaW5nIHRyaWdnZXJlZC5cbiAgICAgKiBCdXQgdGhpcyBpcyBzbG93ZXIgYW5kIHVudXNlZCBieSBzaW1wbGUgaW1wbGVtZW50YXRpb25zLCBzbyBkaXNhYmxlZCBieSBkZWZhdWx0LlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZG9tRXZlbnRzOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5L2ZhbGxiYWNrLlxuICAgICAqIFdoZW4gc2V0IHRvIGBjb21wdXRlYCBpdCB3aWxsIG1hZ2ljYWxseSBzZXQgdGhlIGNvcnJlY3QgdmFsdWUgYmFzZWQgb24gdGhlIGFkZGVkIHJlY29nbml6ZXJzLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQGRlZmF1bHQgY29tcHV0ZVxuICAgICAqL1xuICAgIHRvdWNoQWN0aW9uOiBUT1VDSF9BQ1RJT05fQ09NUFVURSxcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBlbmFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFWFBFUklNRU5UQUwgRkVBVFVSRSAtLSBjYW4gYmUgcmVtb3ZlZC9jaGFuZ2VkXG4gICAgICogQ2hhbmdlIHRoZSBwYXJlbnQgaW5wdXQgdGFyZ2V0IGVsZW1lbnQuXG4gICAgICogSWYgTnVsbCwgdGhlbiBpdCBpcyBiZWluZyBzZXQgdGhlIHRvIG1haW4gZWxlbWVudC5cbiAgICAgKiBAdHlwZSB7TnVsbHxFdmVudFRhcmdldH1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRUYXJnZXQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBmb3JjZSBhbiBpbnB1dCBjbGFzc1xuICAgICAqIEB0eXBlIHtOdWxsfEZ1bmN0aW9ufVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpbnB1dENsYXNzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCByZWNvZ25pemVyIHNldHVwIHdoZW4gY2FsbGluZyBgSGFtbWVyKClgXG4gICAgICogV2hlbiBjcmVhdGluZyBhIG5ldyBNYW5hZ2VyIHRoZXNlIHdpbGwgYmUgc2tpcHBlZC5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgcHJlc2V0OiBbXG4gICAgICAgIC8vIFJlY29nbml6ZXJDbGFzcywgb3B0aW9ucywgW3JlY29nbml6ZVdpdGgsIC4uLl0sIFtyZXF1aXJlRmFpbHVyZSwgLi4uXVxuICAgICAgICBbUm90YXRlUmVjb2duaXplciwgeyBlbmFibGU6IGZhbHNlIH1dLFxuICAgICAgICBbUGluY2hSZWNvZ25pemVyLCB7IGVuYWJsZTogZmFsc2UgfSwgWydyb3RhdGUnXV0sXG4gICAgICAgIFtTd2lwZVJlY29nbml6ZXIseyBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMIH1dLFxuICAgICAgICBbUGFuUmVjb2duaXplciwgeyBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMIH0sIFsnc3dpcGUnXV0sXG4gICAgICAgIFtUYXBSZWNvZ25pemVyXSxcbiAgICAgICAgW1RhcFJlY29nbml6ZXIsIHsgZXZlbnQ6ICdkb3VibGV0YXAnLCB0YXBzOiAyIH0sIFsndGFwJ11dLFxuICAgICAgICBbUHJlc3NSZWNvZ25pemVyXVxuICAgIF0sXG5cbiAgICAvKipcbiAgICAgKiBTb21lIENTUyBwcm9wZXJ0aWVzIGNhbiBiZSB1c2VkIHRvIGltcHJvdmUgdGhlIHdvcmtpbmcgb2YgSGFtbWVyLlxuICAgICAqIEFkZCB0aGVtIHRvIHRoaXMgbWV0aG9kIGFuZCB0aGV5IHdpbGwgYmUgc2V0IHdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlci5cbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICovXG4gICAgY3NzUHJvcHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHRleHQgc2VsZWN0aW9uIHRvIGltcHJvdmUgdGhlIGRyYWdnaW5nIGdlc3R1cmUuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgdGhlIFdpbmRvd3MgUGhvbmUgZ3JpcHBlcnMgd2hlbiBwcmVzc2luZyBhbiBlbGVtZW50LlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHRvdWNoU2VsZWN0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHRoZSBkZWZhdWx0IGNhbGxvdXQgc2hvd24gd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQuXG4gICAgICAgICAqIE9uIGlPUywgd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQgc3VjaCBhcyBhIGxpbmssIFNhZmFyaSBkaXNwbGF5c1xuICAgICAgICAgKiBhIGNhbGxvdXQgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluay4gVGhpcyBwcm9wZXJ0eSBhbGxvd3MgeW91IHRvIGRpc2FibGUgdGhhdCBjYWxsb3V0LlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHRvdWNoQ2FsbG91dDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB6b29taW5nIGlzIGVuYWJsZWQuIFVzZWQgYnkgSUUxMD5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50Wm9vbWluZzogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBlbnRpcmUgZWxlbWVudCBzaG91bGQgYmUgZHJhZ2dhYmxlIGluc3RlYWQgb2YgaXRzIGNvbnRlbnRzLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlckRyYWc6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3ZlcnJpZGVzIHRoZSBoaWdobGlnaHQgY29sb3Igc2hvd24gd2hlbiB0aGUgdXNlciB0YXBzIGEgbGluayBvciBhIEphdmFTY3JpcHRcbiAgICAgICAgICogY2xpY2thYmxlIGVsZW1lbnQgaW4gaU9TLiBUaGlzIHByb3BlcnR5IG9iZXlzIHRoZSBhbHBoYSB2YWx1ZSwgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAncmdiYSgwLDAsMCwwKSdcbiAgICAgICAgICovXG4gICAgICAgIHRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKSdcbiAgICB9XG59O1xuXG52YXIgU1RPUCA9IDE7XG52YXIgRk9SQ0VEX1NUT1AgPSAyO1xuXG4vKipcbiAqIE1hbmFnZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlKG9wdGlvbnMsIEhhbW1lci5kZWZhdWx0cyk7XG4gICAgdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0ID0gdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0IHx8IGVsZW1lbnQ7XG5cbiAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgdGhpcy5yZWNvZ25pemVycyA9IFtdO1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmlucHV0ID0gY3JlYXRlSW5wdXRJbnN0YW5jZSh0aGlzKTtcbiAgICB0aGlzLnRvdWNoQWN0aW9uID0gbmV3IFRvdWNoQWN0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy50b3VjaEFjdGlvbik7XG5cbiAgICB0b2dnbGVDc3NQcm9wcyh0aGlzLCB0cnVlKTtcblxuICAgIGVhY2gob3B0aW9ucy5yZWNvZ25pemVycywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcmVjb2duaXplciA9IHRoaXMuYWRkKG5ldyAoaXRlbVswXSkoaXRlbVsxXSkpO1xuICAgICAgICBpdGVtWzJdICYmIHJlY29nbml6ZXIucmVjb2duaXplV2l0aChpdGVtWzJdKTtcbiAgICAgICAgaXRlbVszXSAmJiByZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKGl0ZW1bM10pO1xuICAgIH0sIHRoaXMpO1xufVxuXG5NYW5hZ2VyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIE9wdGlvbnMgdGhhdCBuZWVkIGEgbGl0dGxlIG1vcmUgc2V0dXBcbiAgICAgICAgaWYgKG9wdGlvbnMudG91Y2hBY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIGV2ZW50IGxpc3RlbmVycyBhbmQgcmVpbml0aWFsaXplXG4gICAgICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQudGFyZ2V0ID0gb3B0aW9ucy5pbnB1dFRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzdG9wIHJlY29nbml6aW5nIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICogVGhpcyBzZXNzaW9uIHdpbGwgYmUgZGlzY2FyZGVkLCB3aGVuIGEgbmV3IFtpbnB1dF1zdGFydCBldmVudCBpcyBmaXJlZC5cbiAgICAgKiBXaGVuIGZvcmNlZCwgdGhlIHJlY29nbml6ZXIgY3ljbGUgaXMgc3RvcHBlZCBpbW1lZGlhdGVseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZV1cbiAgICAgKi9cbiAgICBzdG9wOiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICB0aGlzLnNlc3Npb24uc3RvcHBlZCA9IGZvcmNlID8gRk9SQ0VEX1NUT1AgOiBTVE9QO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBydW4gdGhlIHJlY29nbml6ZXJzIVxuICAgICAqIGNhbGxlZCBieSB0aGUgaW5wdXRIYW5kbGVyIGZ1bmN0aW9uIG9uIGV2ZXJ5IG1vdmVtZW50IG9mIHRoZSBwb2ludGVycyAodG91Y2hlcylcbiAgICAgKiBpdCB3YWxrcyB0aHJvdWdoIGFsbCB0aGUgcmVjb2duaXplcnMgYW5kIHRyaWVzIHRvIGRldGVjdCB0aGUgZ2VzdHVyZSB0aGF0IGlzIGJlaW5nIG1hZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzLnNlc3Npb247XG4gICAgICAgIGlmIChzZXNzaW9uLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJ1biB0aGUgdG91Y2gtYWN0aW9uIHBvbHlmaWxsXG4gICAgICAgIHRoaXMudG91Y2hBY3Rpb24ucHJldmVudERlZmF1bHRzKGlucHV0RGF0YSk7XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXI7XG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG5cbiAgICAgICAgLy8gdGhpcyBob2xkcyB0aGUgcmVjb2duaXplciB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgIC8vIHNvIHRoZSByZWNvZ25pemVyJ3Mgc3RhdGUgbmVlZHMgdG8gYmUgQkVHQU4sIENIQU5HRUQsIEVOREVEIG9yIFJFQ09HTklaRURcbiAgICAgICAgLy8gaWYgbm8gcmVjb2duaXplciBpcyBkZXRlY3RpbmcgYSB0aGluZywgaXQgaXMgc2V0IHRvIGBudWxsYFxuICAgICAgICB2YXIgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplcjtcblxuICAgICAgICAvLyByZXNldCB3aGVuIHRoZSBsYXN0IHJlY29nbml6ZXIgaXMgcmVjb2duaXplZFxuICAgICAgICAvLyBvciB3aGVuIHdlJ3JlIGluIGEgbmV3IHNlc3Npb25cbiAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyIHx8IChjdXJSZWNvZ25pemVyICYmIGN1clJlY29nbml6ZXIuc3RhdGUgJiBTVEFURV9SRUNPR05JWkVEKSkge1xuICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgcmVjb2duaXplcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWNvZ25pemVyID0gcmVjb2duaXplcnNbaV07XG5cbiAgICAgICAgICAgIC8vIGZpbmQgb3V0IGlmIHdlIGFyZSBhbGxvd2VkIHRyeSB0byByZWNvZ25pemUgdGhlIGlucHV0IGZvciB0aGlzIG9uZS5cbiAgICAgICAgICAgIC8vIDEuICAgYWxsb3cgaWYgdGhlIHNlc3Npb24gaXMgTk9UIGZvcmNlZCBzdG9wcGVkIChzZWUgdGhlIC5zdG9wKCkgbWV0aG9kKVxuICAgICAgICAgICAgLy8gMi4gICBhbGxvdyBpZiB3ZSBzdGlsbCBoYXZlbid0IHJlY29nbml6ZWQgYSBnZXN0dXJlIGluIHRoaXMgc2Vzc2lvbiwgb3IgdGhlIHRoaXMgcmVjb2duaXplciBpcyB0aGUgb25lXG4gICAgICAgICAgICAvLyAgICAgIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgICAgIC8vIDMuICAgYWxsb3cgaWYgdGhlIHJlY29nbml6ZXIgaXMgYWxsb3dlZCB0byBydW4gc2ltdWx0YW5lb3VzIHdpdGggdGhlIGN1cnJlbnQgcmVjb2duaXplZCByZWNvZ25pemVyLlxuICAgICAgICAgICAgLy8gICAgICB0aGlzIGNhbiBiZSBzZXR1cCB3aXRoIHRoZSBgcmVjb2duaXplV2l0aCgpYCBtZXRob2Qgb24gdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkICE9PSBGT1JDRURfU1RPUCAmJiAoIC8vIDFcbiAgICAgICAgICAgICAgICAgICAgIWN1clJlY29nbml6ZXIgfHwgcmVjb2duaXplciA9PSBjdXJSZWNvZ25pemVyIHx8IC8vIDJcbiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplci5jYW5SZWNvZ25pemVXaXRoKGN1clJlY29nbml6ZXIpKSkgeyAvLyAzXG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZWNvZ25pemUoaW5wdXREYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZXNldCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGUgcmVjb2duaXplciBoYXMgYmVlbiByZWNvZ25pemluZyB0aGUgaW5wdXQgYXMgYSB2YWxpZCBnZXN0dXJlLCB3ZSB3YW50IHRvIHN0b3JlIHRoaXMgb25lIGFzIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgcmVjb2duaXplci4gYnV0IG9ubHkgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIGFuIGFjdGl2ZSByZWNvZ25pemVyXG4gICAgICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgJiYgcmVjb2duaXplci5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCkpIHtcbiAgICAgICAgICAgICAgICBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSByZWNvZ25pemVyIGJ5IGl0cyBldmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxOdWxsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAocmVjb2duaXplciBpbnN0YW5jZW9mIFJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHJlY29nbml6ZXJzW2ldLm9wdGlvbnMuZXZlbnQgPT0gcmVjb2duaXplcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgcmVjb2duaXplciB0byB0aGUgbWFuYWdlclxuICAgICAqIGV4aXN0aW5nIHJlY29nbml6ZXJzIHdpdGggdGhlIHNhbWUgZXZlbnQgbmFtZSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxNYW5hZ2VyfVxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ2FkZCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldChyZWNvZ25pemVyLm9wdGlvbnMuZXZlbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGV4aXN0aW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVjb2duaXplcnMucHVzaChyZWNvZ25pemVyKTtcbiAgICAgICAgcmVjb2duaXplci5tYW5hZ2VyID0gdGhpcztcblxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGEgcmVjb2duaXplciBieSBuYW1lIG9yIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ3JlbW92ZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG4gICAgICAgIHJlY29nbml6ZXIgPSB0aGlzLmdldChyZWNvZ25pemVyKTtcbiAgICAgICAgcmVjb2duaXplcnMuc3BsaWNlKGluQXJyYXkocmVjb2duaXplcnMsIHJlY29nbml6ZXIpLCAxKTtcblxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCBldmVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdW5iaW5kIGV2ZW50LCBsZWF2ZSBlbWl0IGJsYW5rIHRvIHJlbW92ZSBhbGwgaGFuZGxlcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2hhbmRsZXJdXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9mZjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tldmVudF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XS5zcGxpY2UoaW5BcnJheShoYW5kbGVyc1tldmVudF0sIGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBlbWl0IGV2ZW50IHRvIHRoZSBsaXN0ZW5lcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIC8vIHdlIGFsc28gd2FudCB0byB0cmlnZ2VyIGRvbSBldmVudHNcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kb21FdmVudHMpIHtcbiAgICAgICAgICAgIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBubyBoYW5kbGVycywgc28gc2tpcCBpdCBhbGxcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF0gJiYgdGhpcy5oYW5kbGVyc1tldmVudF0uc2xpY2UoKTtcbiAgICAgICAgaWYgKCFoYW5kbGVycyB8fCAhaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnR5cGUgPSBldmVudDtcbiAgICAgICAgZGF0YS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGF0YS5zcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2ldKGRhdGEpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRlc3Ryb3kgdGhlIG1hbmFnZXIgYW5kIHVuYmluZHMgYWxsIGV2ZW50c1xuICAgICAqIGl0IGRvZXNuJ3QgdW5iaW5kIGRvbSBldmVudHMsIHRoYXQgaXMgdGhlIHVzZXIgb3duIHJlc3BvbnNpYmlsaXR5XG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCAmJiB0b2dnbGVDc3NQcm9wcyh0aGlzLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBhZGQvcmVtb3ZlIHRoZSBjc3MgcHJvcGVydGllcyBhcyBkZWZpbmVkIGluIG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wc1xuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGFkZFxuICovXG5mdW5jdGlvbiB0b2dnbGVDc3NQcm9wcyhtYW5hZ2VyLCBhZGQpIHtcbiAgICB2YXIgZWxlbWVudCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICBlYWNoKG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZVtwcmVmaXhlZChlbGVtZW50LnN0eWxlLCBuYW1lKV0gPSBhZGQgPyB2YWx1ZSA6ICcnO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHRyaWdnZXIgZG9tIGV2ZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSkge1xuICAgIHZhciBnZXN0dXJlRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBnZXN0dXJlRXZlbnQuaW5pdEV2ZW50KGV2ZW50LCB0cnVlLCB0cnVlKTtcbiAgICBnZXN0dXJlRXZlbnQuZ2VzdHVyZSA9IGRhdGE7XG4gICAgZGF0YS50YXJnZXQuZGlzcGF0Y2hFdmVudChnZXN0dXJlRXZlbnQpO1xufVxuXG5leHRlbmQoSGFtbWVyLCB7XG4gICAgSU5QVVRfU1RBUlQ6IElOUFVUX1NUQVJULFxuICAgIElOUFVUX01PVkU6IElOUFVUX01PVkUsXG4gICAgSU5QVVRfRU5EOiBJTlBVVF9FTkQsXG4gICAgSU5QVVRfQ0FOQ0VMOiBJTlBVVF9DQU5DRUwsXG5cbiAgICBTVEFURV9QT1NTSUJMRTogU1RBVEVfUE9TU0lCTEUsXG4gICAgU1RBVEVfQkVHQU46IFNUQVRFX0JFR0FOLFxuICAgIFNUQVRFX0NIQU5HRUQ6IFNUQVRFX0NIQU5HRUQsXG4gICAgU1RBVEVfRU5ERUQ6IFNUQVRFX0VOREVELFxuICAgIFNUQVRFX1JFQ09HTklaRUQ6IFNUQVRFX1JFQ09HTklaRUQsXG4gICAgU1RBVEVfQ0FOQ0VMTEVEOiBTVEFURV9DQU5DRUxMRUQsXG4gICAgU1RBVEVfRkFJTEVEOiBTVEFURV9GQUlMRUQsXG5cbiAgICBESVJFQ1RJT05fTk9ORTogRElSRUNUSU9OX05PTkUsXG4gICAgRElSRUNUSU9OX0xFRlQ6IERJUkVDVElPTl9MRUZULFxuICAgIERJUkVDVElPTl9SSUdIVDogRElSRUNUSU9OX1JJR0hULFxuICAgIERJUkVDVElPTl9VUDogRElSRUNUSU9OX1VQLFxuICAgIERJUkVDVElPTl9ET1dOOiBESVJFQ1RJT05fRE9XTixcbiAgICBESVJFQ1RJT05fSE9SSVpPTlRBTDogRElSRUNUSU9OX0hPUklaT05UQUwsXG4gICAgRElSRUNUSU9OX1ZFUlRJQ0FMOiBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgRElSRUNUSU9OX0FMTDogRElSRUNUSU9OX0FMTCxcblxuICAgIE1hbmFnZXI6IE1hbmFnZXIsXG4gICAgSW5wdXQ6IElucHV0LFxuICAgIFRvdWNoQWN0aW9uOiBUb3VjaEFjdGlvbixcblxuICAgIFRvdWNoSW5wdXQ6IFRvdWNoSW5wdXQsXG4gICAgTW91c2VJbnB1dDogTW91c2VJbnB1dCxcbiAgICBQb2ludGVyRXZlbnRJbnB1dDogUG9pbnRlckV2ZW50SW5wdXQsXG4gICAgVG91Y2hNb3VzZUlucHV0OiBUb3VjaE1vdXNlSW5wdXQsXG4gICAgU2luZ2xlVG91Y2hJbnB1dDogU2luZ2xlVG91Y2hJbnB1dCxcblxuICAgIFJlY29nbml6ZXI6IFJlY29nbml6ZXIsXG4gICAgQXR0clJlY29nbml6ZXI6IEF0dHJSZWNvZ25pemVyLFxuICAgIFRhcDogVGFwUmVjb2duaXplcixcbiAgICBQYW46IFBhblJlY29nbml6ZXIsXG4gICAgU3dpcGU6IFN3aXBlUmVjb2duaXplcixcbiAgICBQaW5jaDogUGluY2hSZWNvZ25pemVyLFxuICAgIFJvdGF0ZTogUm90YXRlUmVjb2duaXplcixcbiAgICBQcmVzczogUHJlc3NSZWNvZ25pemVyLFxuXG4gICAgb246IGFkZEV2ZW50TGlzdGVuZXJzLFxuICAgIG9mZjogcmVtb3ZlRXZlbnRMaXN0ZW5lcnMsXG4gICAgZWFjaDogZWFjaCxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgaW5oZXJpdDogaW5oZXJpdCxcbiAgICBiaW5kRm46IGJpbmRGbixcbiAgICBwcmVmaXhlZDogcHJlZml4ZWRcbn0pO1xuXG5pZiAodHlwZW9mIGRlZmluZSA9PSBUWVBFX0ZVTkNUSU9OICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIYW1tZXI7XG4gICAgfSk7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEhhbW1lcjtcbn0gZWxzZSB7XG4gICAgd2luZG93W2V4cG9ydE5hbWVdID0gSGFtbWVyO1xufVxuXG59KSh3aW5kb3csIGRvY3VtZW50LCAnSGFtbWVyJyk7XG4vKlxuICogU2VxdWVuY2UuanNcbiAqXG4gKiBUaGUgcmVzcG9uc2l2ZSBDU1MgYW5pbWF0aW9uIGZyYW1ld29yayBmb3IgY3JlYXRpbmcgdW5pcXVlIHNsaWRlcnMsXG4gKiBwcmVzZW50YXRpb25zLCBiYW5uZXJzLCBhbmQgb3RoZXIgc3RlcC1iYXNlZCBhcHBsaWNhdGlvbnMuXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0lhbkx1bm4vU2VxdWVuY2VcbiAqIEBhdXRob3IgSWFuTHVublxuICogQHZlcnNpb24gMi4xLjBcbiAqIEBsaWNlbnNlIGh0dHA6Ly9zZXF1ZW5jZWpzLmNvbS9saWNlbnNlcy9cbiAqIEBjb3B5cmlnaHQgSWFuIEx1bm4gRGVzaWduIExpbWl0ZWQgMjAxNVxuICovXG5cbmZ1bmN0aW9uIGRlZmluZVNlcXVlbmNlKGltYWdlc0xvYWRlZCwgSGFtbWVyKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBpbnN0YW5jZXMgPSBbXSxcbiAgICAgIGluc3RhbmNlID0gMDtcblxuICAvKipcbiAgICogU2VxdWVuY2UgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSB0aGUgZWxlbWVudCBTZXF1ZW5jZSBpcyBib3VuZCB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoaXMgaW5zdGFuY2UncyBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHNlbGYgLSBQcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGF2YWlsYWJsZSB0byB0aGlzIGluc3RhbmNlXG4gICAqL1xuICB2YXIgU2VxdWVuY2UgPSAoZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcblxuICAgIHZhciBpbnN0YW5jZUlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlcS1lbmFibGVkXCIpO1xuXG4gICAgLy8gUHJldmVudCBtdWx0aXBsZSBpbnN0YW5jZXMgb24gdGhlIHNhbWUgZWxlbWVudC4gUmV0dXJuIHRoZSBvYmplY3QgaW5zdGVhZFxuICAgIGlmIChpbnN0YW5jZUlkICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgIH1cblxuICAgIC8vIFRoZSBlbGVtZW50IG5vdyBoYXMgU2VxdWVuY2UgYXR0YWNoZWQgdG8gaXRcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc2VxLWVuYWJsZWRcIiwgaW5zdGFuY2UpO1xuICAgIGluc3RhbmNlKys7XG5cbiAgICAvKiAtLS0gUFJJVkFURSBWQVJJQUJMRVMvRlVOQ1RJT05TIC0tLSAqL1xuXG4gICAgLy8gRGVmYXVsdCBTZXF1ZW5jZSBzZXR0aW5nc1xuICAgIHZhciBkZWZhdWx0cyA9IHtcblxuICAgICAgLyogLS0tIEdlbmVyYWwgLS0tICovXG5cbiAgICAgIC8vIFRoZSBmaXJzdCBzdGVwIHRvIHNob3dcbiAgICAgIHN0YXJ0aW5nU3RlcElkOiAxLFxuXG4gICAgICAvLyBTaG91bGQgdGhlIHN0YXJ0aW5nIHN0ZXAgYW5pbWF0ZSBpbiB0byBiZWdpbiB3aXRoP1xuICAgICAgc3RhcnRpbmdTdGVwQW5pbWF0ZXNJbjogZmFsc2UsXG5cbiAgICAgIC8vIFdoZW4gdGhlIGxhc3Qgc3RlcCBpcyByZWFjaGVkLCBzaG91bGQgU2VxdWVuY2UgY3ljbGUgYmFjayB0byB0aGUgc3RhcnQ/XG4gICAgICBjeWNsZTogdHJ1ZSxcblxuICAgICAgLy8gSG93IGxvbmcgdG8gd2FpdCBiZXR3ZWVuIHRoZSBjdXJyZW50IHBoYXNlIGFuaW1hdGluZyBvdXQsIGFuZCB0aGUgbmV4dFxuICAgICAgLy8gYW5pbWF0aW5nIGluLlxuICAgICAgcGhhc2VUaHJlc2hvbGQ6IHRydWUsXG5cbiAgICAgIC8vIFNob3VsZCB0cmFuc2l0aW9ucyBiZSByZXZlcnNlZCB3aGVuIG5hdmlnYXRpbmcgYmFja3dhcmRzP1xuICAgICAgcmV2ZXJzZVdoZW5OYXZpZ2F0aW5nQmFja3dhcmRzOiBmYWxzZSxcblxuICAgICAgLy8gU2hvdWxkIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uIGJlIHJldmVyc2VkIHdoZW4gbmF2aWdhdGluZyBiYWNrd2FyZHM/XG4gICAgICByZXZlcnNlVGltaW5nRnVuY3Rpb25XaGVuTmF2aWdhdGluZ0JhY2t3YXJkczogZmFsc2UsXG5cbiAgICAgIC8vIFNob3VsZCB0aGUgYWN0aXZlIHN0ZXAgYmUgZ2l2ZW4gYSBoaWdoZXIgei1pbmRleD9cbiAgICAgIG1vdmVBY3RpdmVTdGVwVG9Ub3A6IHRydWUsXG5cblxuICAgICAgLyogLS0tIENhbnZhcyBBbmltYXRpb24gLS0tICovXG5cbiAgICAgIC8vIFNob3VsZCB0aGUgY2FudmFzIGF1dG9tYXRpY2FsbHkgYW5pbWF0ZSBiZXR3ZWVuIHN0ZXBzP1xuICAgICAgYW5pbWF0ZUNhbnZhczogdHJ1ZSxcblxuICAgICAgLy8gVGltZSBpdCBzaG91bGQgdGFrZSB0byBhbmltYXRlIGJldHdlZW4gc3RlcHNcbiAgICAgIGFuaW1hdGVDYW52YXNEdXJhdGlvbjogMjUwLFxuXG5cbiAgICAgIC8qIC0tLSBhdXRvUGxheSAtLS0gKi9cblxuICAgICAgLy8gQ2F1c2UgU2VxdWVuY2UgdG8gYXV0b21hdGljYWxseSBuYXZpZ2F0ZSBiZXR3ZWVuIHN0ZXBzXG4gICAgICAvLyBTcGVjaWZ5IGEgbnVtYmVyIGluIG1pbGxpc2Vjb25kcyBvciB0cnVlIChmb3IgYSBkZWZhdWx0IG9mIDUwMDBtcykgdG9cbiAgICAgIC8vIGRlZmluZSB0aGUgcGVyaW9kIFNlcXVlbmNlIHNob3VsZCB3YWl0IGJldHdlZW4gZWFjaCBzdGVwIGJlZm9yZVxuICAgICAgLy8gbmF2aWdhdGluZyB0byB0aGUgbmV4dCBzdGVwXG4gICAgICBhdXRvUGxheTogZmFsc2UsXG5cbiAgICAgIC8vIEhvdyBsb25nIHRvIHdhaXQgYmV0d2VlbiBlYWNoIHN0ZXAgYmVmb3JlIG5hdmlnYXRpb24gb2NjdXJzIGFnYWluXG4gICAgICBhdXRvUGxheUludGVydmFsOiA1MDAwLFxuXG4gICAgICAvLyBBbW91bnQgb2YgdGltZSB0byB3YWl0IHVudGlsIGF1dG9QbGF5IHN0YXJ0cyBhZ2FpbiBhZnRlciBiZWluZyBzdG9wcGVkXG4gICAgICBhdXRvUGxheURlbGF5OiBudWxsLFxuXG4gICAgICAvLyBEaXJlY3Rpb24gb2YgbmF2aWdhdGlvbiB3aGVuIGF1dG9QbGF5IGlzIGVuYWJsZWRcbiAgICAgIGF1dG9QbGF5RGlyZWN0aW9uOiAxLFxuXG4gICAgICAvLyBVc2UgYW4gYXV0b1BsYXkgYnV0dG9uPyBZb3UgY2FuIGFsc28gc3BlY2lmeSBhIENTUyBzZWxlY3RvciB0b1xuICAgICAgLy8gY2hhbmdlIHdoYXQgZWxlbWVudCBhY3RzIGFzIHRoZSBidXR0b24uIElmIHRydWUsIHRoZSBlbGVtZW50IHVzZXMgdGhlXG4gICAgICAvLyBjbGFzcyBvZiBcInNlcS1hdXRvcGxheVwiXG4gICAgICBhdXRvUGxheUJ1dHRvbjogdHJ1ZSxcblxuICAgICAgLy8gUGF1c2UgYXV0b1BsYXkgd2hlbiB0aGUgU2VxdWVuY2UgZWxlbWVudCBpcyBob3ZlcmVkIG92ZXJcbiAgICAgIGF1dG9QbGF5UGF1c2VPbkhvdmVyOiB0cnVlLFxuXG5cbiAgICAgIC8qIC0tLSBOYXZpZ2F0aW9uIFNraXBwaW5nIC0tLSAqL1xuXG4gICAgICAvLyBBbGxvdyB0aGUgdXNlciB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHN0ZXBzIGV2ZW4gaWYgdGhleSBoYXZlbid0XG4gICAgICAvLyBmaW5pc2hlZCBhbmltYXRpbmdcbiAgICAgIG5hdmlnYXRpb25Ta2lwOiB0cnVlLFxuXG4gICAgICAvLyBIb3cgbG9uZyB0byB3YWl0IGJlZm9yZSB0aGUgdXNlciBpcyBhbGxvd2VkIHRvIHNraXAgdG8gYW5vdGhlciBzdGVwXG4gICAgICBuYXZpZ2F0aW9uU2tpcFRocmVzaG9sZDogMjUwLFxuXG4gICAgICAvLyBGYWRlIGEgc3RlcCB3aGVuIGl0IGhhcyBiZWVuIHNraXBwZWRcbiAgICAgIGZhZGVTdGVwV2hlblNraXBwZWQ6IHRydWUsXG5cbiAgICAgIC8vIEhvdyBsb25nIHRoZSBmYWRlIHNob3VsZCB0YWtlXG4gICAgICBmYWRlU3RlcFRpbWU6IDUwMCxcblxuICAgICAgLy8gV2hlbiBhIHN0ZXAgaXMgc2tpcHBlZCwgdGhlIG5leHQgc3RlcCB3aWxsIGltbWVkaWF0ZWx5IGFuaW1hdGUtaW5cbiAgICAgIC8vIHJlZ2FyZGxlc3Mgb2YgdGhlIHBoYXNlVGhyZXNob2xkIG9wdGlvblxuICAgICAgaWdub3JlUGhhc2VUaHJlc2hvbGRXaGVuU2tpcHBlZDogZmFsc2UsXG5cbiAgICAgIC8vIERvbid0IGFsbG93IHRoZSB1c2VyIHRvIGdvIHRvIGEgcHJldmlvdXMgc3RlcCB3aGVuIHRoZSBjdXJyZW50IG9uZSBpc1xuICAgICAgLy8gc3RpbGwgYWN0aXZlXG4gICAgICBwcmV2ZW50UmV2ZXJzZVNraXBwaW5nOiBmYWxzZSxcblxuXG4gICAgICAvKiAtLS0gTmV4dC9QcmV2IEJ1dHRvbiAtLS0gKi9cblxuICAgICAgLy8gVXNlIG5leHQgYW5kIHByZXZpb3VzIGJ1dHRvbnM/IFlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgQ1NTIHNlbGVjdG9yIHRvXG4gICAgICAvLyBjaGFuZ2Ugd2hhdCBlbGVtZW50IGFjdHMgYXMgdGhlIGJ1dHRvbi4gSWYgdHJ1ZSwgdGhlIGVsZW1lbnQgdXNlc1xuICAgICAgLy8gY2xhc3NlcyBvZiBcInNlcS1uZXh0XCIgYW5kIFwic2VxLXByZXZcIlxuICAgICAgbmV4dEJ1dHRvbjogdHJ1ZSxcbiAgICAgIHByZXZCdXR0b246IHRydWUsXG5cblxuICAgICAgLyogLS0tIFBhZ2luYXRpb24gLS0tICovXG5cbiAgICAgIC8vIFVzZSBwYWdpbmF0aW9uPyBZb3UgY2FuIGFsc28gc3BlY2lmeSBhIENTUyBzZWxlY3RvciB0b1xuICAgICAgLy8gY2hhbmdlIHdoYXQgZWxlbWVudCBhY3RzIGFzIHBhZ2luYXRpb24uIElmIHRydWUsIHRoZSBlbGVtZW50IHVzZXMgdGhlXG4gICAgICAvLyBjbGFzcyBvZiBcInNlcS1wYWdpbmF0aW9uXCJcbiAgICAgIHBhZ2luYXRpb246IHRydWUsXG5cblxuICAgICAgLyogLS0tIFByZWxvYWRlciAtLS0gKi9cblxuICAgICAgLy8gWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBDU1Mgc2VsZWN0b3IgdG9cbiAgICAgIC8vIGNoYW5nZSB3aGF0IGVsZW1lbnQgYWN0cyBhcyB0aGUgcHJlbG9hZGVyLiBJZiB0cnVlLCB0aGUgZWxlbWVudCB1c2VzXG4gICAgICAvLyB0aGUgY2xhc3Mgb2YgXCJzZXEtcHJlbG9hZGVyXCJcbiAgICAgIHByZWxvYWRlcjogZmFsc2UsXG5cbiAgICAgIC8vIFByZWxvYWQgYWxsIGltYWdlcyBmcm9tIHNwZWNpZmljIHN0ZXBzXG4gICAgICBwcmVsb2FkVGhlc2VTdGVwczogWzFdLFxuXG4gICAgICAvLyBQcmVsb2FkIHNwZWNpZmllZCBpbWFnZXNcbiAgICAgIHByZWxvYWRUaGVzZUltYWdlczogW1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhhbXBsZSB1c2FnZVxuICAgICAgICAgKiBcImltYWdlcy9jYXRFYXRpbmdTYWxhZC5qcGdcIixcbiAgICAgICAgICogXCJpbWFnZXMvZ3JhbmRtYURyZXNzZWRBc0JhdG1hbi5wbmdcIlxuICAgICAgICAgKi9cbiAgICAgIF0sXG5cbiAgICAgIC8vIEhpZGUgU2VxdWVuY2UncyBzdGVwcyB1bnRpbCBpdCBoYXMgcHJlbG9hZGVkXG4gICAgICBoaWRlU3RlcHNVbnRpbFByZWxvYWRlZDogZmFsc2UsXG5cbiAgICAgIC8vIChEZWJ1Z2dpbmcgb25seSkgUHJldmVudCB0aGUgcHJlbG9hZGVyIGZyb20gaGlkaW5nIHNvIHlvdSBjYW5cbiAgICAgIC8vIHRlc3QgaXQncyBzdHlsZXNcbiAgICAgIHBhdXNlUHJlbG9hZGVyOiBmYWxzZSxcblxuXG4gICAgICAvKiAtLS0gS2V5Ym9hcmQgLS0tICovXG5cbiAgICAgIC8vIENhbiB0aGUgdXNlciBuYXZpZ2F0ZSBiZXR3ZWVuIHN0ZXBzIGJ5IHByZXNzaW5nIGtleWJvYXJkIGJ1dHRvbnM/XG4gICAgICBrZXlOYXZpZ2F0aW9uOiBmYWxzZSxcblxuICAgICAgLy8gV2hlbiBudW1lcmljIGtleXMgMSAtIDkgYXJlIHByZXNzZWQsIFNlcXVlbmNlIHdpbGwgbmF2aWdhdGUgdG8gdGhlXG4gICAgICAvLyBjb3JyZXNwb25kaW5nIHN0ZXBcbiAgICAgIG51bWVyaWNLZXlzR29Ub1N0ZXBzOiBmYWxzZSxcblxuICAgICAgLy8gRXZlbnRzIHRvIHJ1biB3aGVuIHRoZSB1c2VyIHByZXNzZXMgdGhlIGxlZnQvcmlnaHQga2V5c1xuICAgICAga2V5RXZlbnRzOiB7XG4gICAgICAgIGxlZnQ6IGZ1bmN0aW9uKHNlcXVlbmNlKSB7c2VxdWVuY2UucHJldigpO30sXG4gICAgICAgIHJpZ2h0OiBmdW5jdGlvbihzZXF1ZW5jZSkge3NlcXVlbmNlLm5leHQoKTt9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qIC0tLSBUb3VjaCBTd2lwZSAtLS0gKi9cblxuICAgICAgLy8gQ2FuIHRoZSB1c2VyIG5hdmlnYXRlIGJldHdlZW4gc3RlcHMgYnkgc3dpcGluZyBvbiBhIHRvdWNoIGVuYWJsZWQgZGV2aWNlP1xuICAgICAgc3dpcGVOYXZpZ2F0aW9uOiB0cnVlLFxuXG4gICAgICAvLyBFdmVudHMgdG8gcnVuIHdoZW4gdGhlIHVzZXIgc3dpcGVzIGluIGEgcGFydGljdWxhciBkaXJlY3Rpb25cbiAgICAgIHN3aXBlRXZlbnRzOiB7XG4gICAgICAgIGxlZnQ6IGZ1bmN0aW9uKHNlcXVlbmNlKSB7c2VxdWVuY2UubmV4dCgpO30sXG4gICAgICAgIHJpZ2h0OiBmdW5jdGlvbihzZXF1ZW5jZSkge3NlcXVlbmNlLnByZXYoKTt9LFxuICAgICAgICB1cDogdW5kZWZpbmVkLFxuICAgICAgICBkb3duOiB1bmRlZmluZWRcbiAgICAgIH0sXG5cbiAgICAgIC8vIE9wdGlvbnMgdG8gc3VwcGx5IHRoZSB0aGlyZC1wYXJ0eSBIYW1tZXIgbGlicmFyeSBTZWU6IGh0dHA6Ly9oYW1tZXJqcy5naXRodWIuaW8vcmVjb2duaXplci1zd2lwZS9cbiAgICAgIHN3aXBlSGFtbWVyT3B0aW9uczoge30sXG5cblxuICAgICAgLyogLS0tIGhhc2hUYWdzIC0tLSAqL1xuXG4gICAgICAvLyBTaG91bGQgdGhlIFVSTCB1cGRhdGUgdG8gaW5jbHVkZSBhIGhhc2hUYWcgdGhhdCByZWxhdGVzIHRvIHRoZSBjdXJyZW50XG4gICAgICAvLyBzdGVwIGJlaW5nIHNob3duP1xuICAgICAgaGFzaFRhZ3M6IGZhbHNlLFxuXG4gICAgICAvLyBHZXQgdGhlIGhhc2hUYWcgZnJvbSBhbiBJRCBvciBkYXRhLXNlcS1oYXNodGFnIGF0dHJpYnV0ZT9cbiAgICAgIGhhc2hEYXRhQXR0cmlidXRlOiBmYWxzZSxcblxuICAgICAgLy8gU2hvdWxkIHRoZSBoYXNoIGNoYW5nZSBvbiB0aGUgZmlyc3Qgc3RlcD9cbiAgICAgIGhhc2hDaGFuZ2VzT25GaXJzdFN0ZXA6IGZhbHNlLFxuXG5cbiAgICAgIC8qIC0tLSBGYWxsYmFjayBUaGVtZSAtLS0gKi9cblxuICAgICAgLy8gU2V0dGluZ3MgdG8gdXNlIHdoZW4gdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IENTUyB0cmFuc2l0aW9uc1xuICAgICAgZmFsbGJhY2s6IHtcblxuICAgICAgICAvLyBUaGUgc3BlZWQgdG8gdHJhbnNpdGlvbiBiZXR3ZWVuIHN0ZXBzXG4gICAgICAgIHNwZWVkOiA1MDBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRGVmYXVsdCB2YWx1ZSBmb3IgYXV0b1BsYXkgaW4gbWlsbGlzZWNvbmRzXG4gICAgdmFyIGF1dG9QbGF5RGVmYXVsdCA9IDUwMDA7XG5cbiAgICAvLyBTZWUgc2VxdWVuY2UuYW5pbWF0aW9uLmRvbURlbGF5KCkgZm9yIGFuIGV4cGxhbmF0aW9uIG9mIHRoaXNcbiAgICB2YXIgZG9tVGhyZXNob2xkID0gNTA7XG5cbiAgICAvLyBUaHJvdHRsZSB0aGUgd2luZG93IHJlc2l6ZSBldmVudFxuICAgIC8vIHNlZSBzZWxmLm1hbmFnZUV2ZW50cy5hZGQucmVzaXplVGhyb3R0bGUoKVxuICAgIHZhciByZXNpemVUaHJlc2hvbGQgPSAxMDA7XG5cbiAgICAvLyBDb252ZXJ0IGJyb3dzZXIgZml4ZXMgdG8gQ1NTIHN0cmluZ3NcbiAgICB2YXIgcHJlZml4VHJhbnNsYXRpb25zID0ge1xuXG4gICAgICBhbmltYXRpb246IHtcbiAgICAgICAgXCJXZWJraXRBbmltYXRpb25cIjogXCItd2Via2l0LVwiLFxuICAgICAgICBcImFuaW1hdGlvblwiOiBcIlwiXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVGhpcyB2ZXJzaW9uIG9mIE1vZGVybml6ciBpcyBmb3IgdXNlIHdpdGggU2VxdWVuY2UuanMgYW5kIGlzIGluY2x1ZGVkXG4gICAgICogaW50ZXJuYWxseSB0byBwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIG90aGVyIE1vZGVybml6ciBidWlsZHMuXG4gICAgICpcbiAgICAgKiBNb2Rlcm5penIgMi44LjMgKEN1c3RvbSBCdWlsZCkgfCBNSVQgJiBCU0RcbiAgICAgKiBCdWlsZDogaHR0cDovL21vZGVybml6ci5jb20vZG93bmxvYWQvIy1jc3NhbmltYXRpb25zLWNzc3RyYW5zZm9ybXMtY3NzdHJhbnNpdGlvbnMtc3ZnLXRvdWNoLXByZWZpeGVkLXRlc3RzdHlsZXMtdGVzdHByb3AtdGVzdGFsbHByb3BzLXByZWZpeGVzLWRvbXByZWZpeGVzXG4gICAgICovXG5cbiAgICAvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG4gICAgdmFyIE1vZGVybml6cj1mdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24geihhKXtpLmNzc1RleHQ9YX1mdW5jdGlvbiBBKGEsYil7cmV0dXJuIHoobC5qb2luKGErXCI7XCIpKyhifHxcIlwiKSl9ZnVuY3Rpb24gQihhLGIpe3JldHVybiB0eXBlb2YgYT09PWJ9ZnVuY3Rpb24gQyhhLGIpe3JldHVybiEhfihcIlwiK2EpLmluZGV4T2YoYil9ZnVuY3Rpb24gRChhLGIpe2Zvcih2YXIgZCBpbiBhKXt2YXIgZT1hW2RdO2lmKCFDKGUsXCItXCIpJiZpW2VdIT09YylyZXR1cm4gYj09XCJwZnhcIj9lOiEwfXJldHVybiExfWZ1bmN0aW9uIEUoYSxiLGQpe2Zvcih2YXIgZSBpbiBhKXt2YXIgZj1iW2FbZV1dO2lmKGYhPT1jKXJldHVybiBkPT09ITE/YVtlXTpCKGYsXCJmdW5jdGlvblwiKT9mLmJpbmQoZHx8Yik6Zn1yZXR1cm4hMX1mdW5jdGlvbiBGKGEsYixjKXt2YXIgZD1hLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZT0oYStcIiBcIituLmpvaW4oZCtcIiBcIikrZCkuc3BsaXQoXCIgXCIpO3JldHVybiBCKGIsXCJzdHJpbmdcIil8fEIoYixcInVuZGVmaW5lZFwiKT9EKGUsYik6KGU9KGErXCIgXCIrby5qb2luKGQrXCIgXCIpK2QpLnNwbGl0KFwiIFwiKSxFKGUsYixjKSl9dmFyIGQ9XCIyLjguM1wiLGU9e30sZj1iLmRvY3VtZW50RWxlbWVudCxnPVwibW9kZXJuaXpyXCIsaD1iLmNyZWF0ZUVsZW1lbnQoZyksaT1oLnN0eWxlLGosaz17fS50b1N0cmluZyxsPVwiIC13ZWJraXQtIC1tb3otIC1vLSAtbXMtIFwiLnNwbGl0KFwiIFwiKSxtPVwiV2Via2l0IE1veiBPIG1zXCIsbj1tLnNwbGl0KFwiIFwiKSxvPW0udG9Mb3dlckNhc2UoKS5zcGxpdChcIiBcIikscD17c3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0scT17fSxyPXt9LHM9e30sdD1bXSx1PXQuc2xpY2Usdix3PWZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBoLGksaixrLGw9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG09Yi5ib2R5LG49bXx8Yi5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtpZihwYXJzZUludChkLDEwKSl3aGlsZShkLS0paj1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksai5pZD1lP2VbZF06ZysoZCsxKSxsLmFwcGVuZENoaWxkKGopO3JldHVybiBoPVtcIiYjMTczO1wiLCc8c3R5bGUgaWQ9XCJzJyxnLCdcIj4nLGEsXCI8L3N0eWxlPlwiXS5qb2luKFwiXCIpLGwuaWQ9ZywobT9sOm4pLmlubmVySFRNTCs9aCxuLmFwcGVuZENoaWxkKGwpLG18fChuLnN0eWxlLmJhY2tncm91bmQ9XCJcIixuLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsaz1mLnN0eWxlLm92ZXJmbG93LGYuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixmLmFwcGVuZENoaWxkKG4pKSxpPWMobCxhKSxtP2wucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKToobi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLGYuc3R5bGUub3ZlcmZsb3c9ayksISFpfSx4PXt9Lmhhc093blByb3BlcnR5LHk7IUIoeCxcInVuZGVmaW5lZFwiKSYmIUIoeC5jYWxsLFwidW5kZWZpbmVkXCIpP3k9ZnVuY3Rpb24oYSxiKXtyZXR1cm4geC5jYWxsKGEsYil9Onk9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYiBpbiBhJiZCKGEuY29uc3RydWN0b3IucHJvdG90eXBlW2JdLFwidW5kZWZpbmVkXCIpfSxGdW5jdGlvbi5wcm90b3R5cGUuYmluZHx8KEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7aWYodHlwZW9mIGMhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yO3ZhciBkPXUuY2FsbChhcmd1bWVudHMsMSksZT1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBlKXt2YXIgYT1mdW5jdGlvbigpe307YS5wcm90b3R5cGU9Yy5wcm90b3R5cGU7dmFyIGY9bmV3IGEsZz1jLmFwcGx5KGYsZC5jb25jYXQodS5jYWxsKGFyZ3VtZW50cykpKTtyZXR1cm4gT2JqZWN0KGcpPT09Zz9nOmZ9cmV0dXJuIGMuYXBwbHkoYixkLmNvbmNhdCh1LmNhbGwoYXJndW1lbnRzKSkpfTtyZXR1cm4gZX0pLHEudG91Y2g9ZnVuY3Rpb24oKXt2YXIgYztyZXR1cm5cIm9udG91Y2hzdGFydFwiaW4gYXx8YS5Eb2N1bWVudFRvdWNoJiZiIGluc3RhbmNlb2YgRG9jdW1lbnRUb3VjaD9jPSEwOncoW1wiQG1lZGlhIChcIixsLmpvaW4oXCJ0b3VjaC1lbmFibGVkKSwoXCIpLGcsXCIpXCIsXCJ7I21vZGVybml6cnt0b3A6OXB4O3Bvc2l0aW9uOmFic29sdXRlfX1cIl0uam9pbihcIlwiKSxmdW5jdGlvbihhKXtjPWEub2Zmc2V0VG9wPT09OX0pLGN9LHEuY3NzYW5pbWF0aW9ucz1mdW5jdGlvbigpe3JldHVybiBGKFwiYW5pbWF0aW9uTmFtZVwiKX0scS5jc3N0cmFuc2Zvcm1zPWZ1bmN0aW9uKCl7cmV0dXJuISFGKFwidHJhbnNmb3JtXCIpfSxxLmNzc3RyYW5zaXRpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIEYoXCJ0cmFuc2l0aW9uXCIpfSxxLnN2Zz1mdW5jdGlvbigpe3JldHVybiEhYi5jcmVhdGVFbGVtZW50TlMmJiEhYi5jcmVhdGVFbGVtZW50TlMocC5zdmcsXCJzdmdcIikuY3JlYXRlU1ZHUmVjdH07Zm9yKHZhciBHIGluIHEpeShxLEcpJiYodj1HLnRvTG93ZXJDYXNlKCksZVt2XT1xW0ddKCksdC5wdXNoKChlW3ZdP1wiXCI6XCJuby1cIikrdikpO3JldHVybiBlLmFkZFRlc3Q9ZnVuY3Rpb24oYSxiKXtpZih0eXBlb2YgYT09XCJvYmplY3RcIilmb3IodmFyIGQgaW4gYSl5KGEsZCkmJmUuYWRkVGVzdChkLGFbZF0pO2Vsc2V7YT1hLnRvTG93ZXJDYXNlKCk7aWYoZVthXSE9PWMpcmV0dXJuIGU7Yj10eXBlb2YgYj09XCJmdW5jdGlvblwiP2IoKTpiLHR5cGVvZiBlbmFibGVDbGFzc2VzIT1cInVuZGVmaW5lZFwiJiZlbmFibGVDbGFzc2VzJiYoZi5jbGFzc05hbWUrPVwiIFwiKyhiP1wiXCI6XCJuby1cIikrYSksZVthXT1ifXJldHVybiBlfSx6KFwiXCIpLGg9aj1udWxsLGUuX3ZlcnNpb249ZCxlLl9wcmVmaXhlcz1sLGUuX2RvbVByZWZpeGVzPW8sZS5fY3Nzb21QcmVmaXhlcz1uLGUudGVzdFByb3A9ZnVuY3Rpb24oYSl7cmV0dXJuIEQoW2FdKX0sZS50ZXN0QWxsUHJvcHM9RixlLnRlc3RTdHlsZXM9dyxlLnByZWZpeGVkPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj9GKGEsYixjKTpGKGEsXCJwZnhcIil9LGV9KHdpbmRvdyx3aW5kb3cuZG9jdW1lbnQpO1xuICAgIC8qIGpzaGludCBpZ25vcmU6ZW5kICovXG5cbiAgICAvLyBBZGQgaW5kZXhPZigpIHN1cHBvcnQgdG8gYXJyYXlzIGZvciBJbnRlcm5ldCBFeHBsb3JlciA4XG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB7XG4gICAgICAgIGlmICggdGhpcyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMgPT09IG51bGwgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvciggJ1widGhpc1wiIGlzIG51bGwgb3Igbm90IGRlZmluZWQnICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYWNrIHRvIGNvbnZlcnQgb2JqZWN0Lmxlbmd0aCB0byBhIFVJbnQzMlxuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgZnJvbUluZGV4ID0gK2Zyb21JbmRleCB8fCAwO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhmcm9tSW5kZXgpID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIGZyb21JbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICAgIGZyb21JbmRleCArPSBsZW5ndGg7XG4gICAgICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgICAgIGZyb21JbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICg7ZnJvbUluZGV4IDwgbGVuZ3RoOyBmcm9tSW5kZXgrKykge1xuICAgICAgICAgIGlmICh0aGlzW2Zyb21JbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgdGhlIHByZWZpeCB0byB1c2UgZm9yIHRoZSBwYWdlVmlzaWJpbGl0eSBBUElcbiAgICAgKi9cbiAgICB2YXIgaGlkZGVuLFxuICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlO1xuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5oaWRkZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgICAgLy8gT3BlcmEgMTIuMTAgYW5kIEZpcmVmb3ggMTggYW5kIGxhdGVyIHN1cHBvcnRcbiAgICAgIGhpZGRlbiA9IFwiaGlkZGVuXCI7XG4gICAgICB2aXNpYmlsaXR5Q2hhbmdlID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICAgIGhpZGRlbiA9IFwibW96SGlkZGVuXCI7XG4gICAgICB2aXNpYmlsaXR5Q2hhbmdlID0gXCJtb3p2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQubXNIaWRkZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgICAgaGlkZGVuID0gXCJtc0hpZGRlblwiO1xuICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwibXN2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICAgIGhpZGRlbiA9IFwid2Via2l0SGlkZGVuXCI7XG4gICAgICB2aXNpYmlsaXR5Q2hhbmdlID0gXCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXMgYW4gb2JqZWN0IGFuIGFycmF5P1xuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAtIFRoZSBvYmplY3Qgd2Ugd2FudCB0byB0ZXN0XG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheShvYmplY3QpIHtcblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfWVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0ZW5kIG9iamVjdCBhIHdpdGggdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gICAgICogSWYgdGhlcmUncyBhIGNvbmZsaWN0LCBvYmplY3QgYiB0YWtlcyBwcmVjZWRlbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGEgLSBUaGUgZmlyc3Qgb2JqZWN0IHRvIG1lcmdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGIgLSBUaGUgc2Vjb25kIG9iamVjdCB0byBtZXJnZSAodGFrZXMgcHJlY2VkZW5jZSlcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuXG4gICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWVzIG9mIGFuIGVsZW1lbnQncyBDU1MgcHJvcGVydHlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTE9iamVjdH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgdmFsdWUgZnJvbVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSAtIFRoZSBDU1MgcHJvcGVydHkgdG8gZ2V0IHRoZSB2YWx1ZSBvZlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIGZyb20gdGhlIGVsZW1lbnQncyBDU1MgcHJvcGVydHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuXG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIC8vIElFXG4gICAgICBpZiAoZWxlbWVudC5jdXJyZW50U3R5bGUpIHtcbiAgICAgICAgdmFsdWUgPSBlbGVtZW50LmN1cnJlbnRTdHlsZVtwcm9wZXJ0eV07XG4gICAgICB9XG5cbiAgICAgIGVsc2UgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgdmFsdWUgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIFwiXCIpW3Byb3BlcnR5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyb3NzIEJyb3dzZXIgaGVscGVyIGZvciBhZGRFdmVudExpc3RlbmVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxPYmplY3R9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBhdHRhY2ggdGhlIGV2ZW50IHRvXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudDsgXCJjbGlja1wiIGZvciBleGFtcGxlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IG9jY3Vyc1xuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gaGFuZGxlciAtIFJldHVybnMgdGhlIGhhbmRsZXIgc28gaXQgY2FuIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRFdmVudChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcblxuICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XG4gICAgICB9XG5cbiAgICAgIGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcblxuICAgICAgICAvLyBBbGxvd3MgSUUgdG8gcmV0dXJuIHRoaXMga2V5d29yZFxuICAgICAgICB2YXIgaGFuZGxlcnIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBoYW5kbGVyLmNhbGwoZWxlbWVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZWxlbWVudC5hdHRhY2hFdmVudChcIm9uXCIgKyBldmVudE5hbWUsIGhhbmRsZXJyKTtcblxuICAgICAgICByZXR1cm4gaGFuZGxlcnI7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcm9zcyBCcm93c2VyIGhlbHBlciBmb3IgcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MT2JqZWN0fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gYXR0YWNoIHRoZSBldmVudCB0b1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQ7IFwiY2xpY2tcIiBmb3IgZXhhbXBsZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBUaGUgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBvY2N1cnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVFdmVudChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcblxuICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGVsc2UgaWYgKGVsZW1lbnQuZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgZWxlbWVudC5kZXRhY2hFdmVudChcIm9uXCIgKyBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgdGltZSB2YWx1ZSB0YWtlbiBmcm9tIGEgQ1NTIHByb3BlcnR5LCBzdWNoIGFzIFwiMC41c1wiXG4gICAgICogYW5kIGNvbnZlcnRzIGl0IHRvIGEgbnVtYmVyIGluIG1pbGxpc2Vjb25kcywgc3VjaCBhcyA1MDBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lIC0gdGhlIHRpbWUgaW4gYSBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBjb252ZXJ0ZWRUaW1lIC0gdGhlIHRpbWUgYXMgYSBudW1iZXJcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb252ZXJ0VGltZVRvTXModGltZSkge1xuXG4gICAgICB2YXIgY29udmVydGVkVGltZSxcbiAgICAgICAgICBmcmFjdGlvbjtcblxuICAgICAgLy8gRGVhbCB3aXRoIG1pbGxpc2Vjb25kcyBhbmQgc2Vjb25kc1xuICAgICAgaWYgKHRpbWUuaW5kZXhPZihcIm1zXCIpID4gLTEpIHtcbiAgICAgICAgZnJhY3Rpb24gPSAxO1xuICAgICAgfWVsc2Uge1xuICAgICAgICBmcmFjdGlvbiA9IDEwMDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lID09IFwiMHNcIikge1xuICAgICAgICBjb252ZXJ0ZWRUaW1lID0gMDtcbiAgICAgIH1lbHNlIHtcbiAgICAgICAgY29udmVydGVkVGltZSA9IHBhcnNlRmxvYXQodGltZS5yZXBsYWNlKFwic1wiLCBcIlwiKSkgKiBmcmFjdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnZlcnRlZFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG9lcyBhbiBlbGVtZW50IGhhdmUgYSBwYXJ0aWN1bGFyIGNsYXNzP1xuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgY2xhc3MgdG8gY2hlY2sgZm9yXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgbmFtZSkge1xuXG4gICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBuYW1lICsgJyhcXFxcc3wkKScpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNsYXNzIHRvIGFuIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50cyAtIFRoZSBlbGVtZW50KHMpIHRvIGFkZCBhIGNsYXNzIHRvXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgY2xhc3MgdG8gYWRkXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudHMsIG5hbWUpIHtcblxuICAgICAgdmFyIGVsZW1lbnQsXG4gICAgICAgICAgZWxlbWVudHNMZW5ndGgsXG4gICAgICAgICAgaTtcblxuICAgICAgLy8gSWYgb25seSBvbmUgZWxlbWVudCBpcyBkZWZpbmVkLCB0dXJuIGl0IGludG8gYSBub2RlbGlzdCBzbyBpdCdsbCBwYXNzXG4gICAgICAvLyB0aHJvdWdoIHRoZSBmb3IgbG9vcFxuICAgICAgaWYgKGlzQXJyYXkoZWxlbWVudHMpID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50c0xlbmd0aCA9IDE7XG4gICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudHNMZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50c0xlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgIGlmIChoYXNDbGFzcyhlbGVtZW50LCBuYW1lKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAoZWxlbWVudC5jbGFzc05hbWUgPyAnICc6ICcnKSArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBjbGFzcyBmcm9tIGFuIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50cyAtIFRoZSBlbGVtZW50IHRvIHJlbW92ZSBhIGNsYXNzIGZyb21cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIFRoZSBjbGFzcyB0byByZW1vdmVcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50cywgbmFtZSkge1xuXG4gICAgICB2YXIgZWxlbWVudCxcbiAgICAgICAgICBlbGVtZW50c0xlbmd0aCxcbiAgICAgICAgICBpO1xuXG4gICAgICAvLyBJZiBvbmx5IG9uZSBlbGVtZW50IGlzIGRlZmluZWQsIHR1cm4gaXQgaW50byBhIG5vZGVsaXN0IHNvIGl0J2xsIHBhc3NcbiAgICAgIC8vIHRocm91Z2ggdGhlIGZvciBsb29wXG4gICAgICBpZiAoaXNBcnJheShlbGVtZW50cykgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnRzTGVuZ3RoID0gMTtcbiAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgICAgfVxuXG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudHNMZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50c0xlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgIGlmIChoYXNDbGFzcyhlbGVtZW50LCBuYW1lKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgbmFtZSArICcoXFxcXHN8JCknKSwnICcpLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgYm91bmRhcmllcyBvZiBhblxuICAgICAqIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIHRlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY3Vyc29yIC0gVGhlIGV2ZW50IGhvbGRpbmcgY3Vyc29yIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNpZGVFbGVtZW50KGVsZW1lbnQsIGN1cnNvcikge1xuXG4gICAgICAvLyBHZXQgdGhlIGVsZW1lbnRzIGJvdW5kYXJpZXNcbiAgICAgIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICBpbnNpZGUgPSBmYWxzZTtcblxuICAgICAgLy8gUmV0dXJuIHRydWUgaWYgaW5zaWRlIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBTZXF1ZW5jZSBlbGVtZW50XG4gICAgICBpZiAoY3Vyc29yLmNsaWVudFggPj0gcmVjdC5sZWZ0ICYmIGN1cnNvci5jbGllbnRYIDw9IHJlY3QucmlnaHQgJiYgY3Vyc29yLmNsaWVudFkgPj0gcmVjdC50b3AgJiYgY3Vyc29yLmNsaWVudFkgPD0gcmVjdC5ib3R0b20pIHtcbiAgICAgICAgaW5zaWRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc2lkZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgYW4gZWxlbWVudCBoYXMgYSBzcGVjaWZpZWQgcGFyZW50LCBhbmQgaWYgc28sIHJldHVybiB0aGVcbiAgICAgKiBpbmRleCBudW1iZXIgZm9yIHRoZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogVGhlIGluZGV4IGlzIHRha2VuIGZyb20gdGhlIHRvcCBsZXZlbCBlbGVtZW50cyB3aXRpbnQgYSBwYWdpbmF0aW9uXG4gICAgICogZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB3aWxsIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIHBhcmVudCB1bnRpbCBpdFxuICAgICAqIHJlYWNoZXMgdGhlIHRvcCBsZXZlbCwgdGhlbiBnZXQgYWxsIHRvcCBsZXZlbCBlbGVtZW50cyBhbmQgZGV0ZXJtaW5lXG4gICAgICogdGhlIGluZGV4IG9mIHRoZSBjaG9zZW4gdG9wIGxldmVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudHMgLSBUaGUgcGFyZW50IGVsZW1lbnQocykgdGhhdCB0aGUgY2hpbGQgc2hvdWxkIGJlXG4gICAgICogd2l0aGluXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIFRoZSBjaGlsZCBlbGVtZW50IHRvIHRlc3QgaWYgaXQgaGFzIHRoZSBwYXJlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldmlvdXNUYXJnZXQgLSBUaGUgZWxlbWVudCB0aGF0IHdhcyBwcmV2aW91c2x5IGNoZWNrZWRcbiAgICAgKiB0byBkZXRlcm1pbmUgaWYgaXQgd2FzIHRvcCBsZXZlbFxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhcmVudChwYXJlbnQsIHRhcmdldCwgcHJldmlvdXNUYXJnZXQpIHtcblxuICAgICAgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gXCJCT0RZXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSdyZSBhdCB0aGUgcGFnaW5hdGlvbiBwYXJlbnRcbiAgICAgIGlmIChwYXJlbnQgPT09IHRhcmdldCkge1xuXG4gICAgICAgIGlmIChwcmV2aW91c1RhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIHRvcCBsZXZlbCBlbGVtZW50IGNsaWNrZWQgYW5kIGFsbCB0b3AgbGV2ZWwgZWxlbWVudHNcbiAgICAgICAgICB2YXIgdG9wTGV2ZWwgPSBwcmV2aW91c1RhcmdldDtcbiAgICAgICAgICB2YXIgYWxsVG9wTGV2ZWwgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodG9wTGV2ZWwubm9kZU5hbWUpO1xuXG4gICAgICAgICAgLy8gQ291bnQgdGhlIG51bWJlciBvZiB0b3AgbGV2ZWwgZWxlbWVudHNcbiAgICAgICAgICB2YXIgaSA9IGFsbFRvcExldmVsLmxlbmd0aDtcblxuICAgICAgICAgIC8vIFdoaWNoIHRvcCBsZXZlbCBlbGVtZW50IHdhcyBjbGlja2VkP1xuICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmICh0b3BMZXZlbCA9PT0gYWxsVG9wTGV2ZWxbaV0pIHtcblxuICAgICAgICAgICAgICAvLyBPbmUtYmFzZSB0aGUgaW5kZXggYW5kIHJldHVybiBpdFxuICAgICAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdCB5ZXQgYXQgdGhlIHBhZ2luYXRpb24gcGFyZW50IGVsZW1lbnQsIGl0ZXJhdGUgYWdhaW5cbiAgICAgIGVsc2Uge1xuICAgICAgICBwcmV2aW91c1RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgcmV0dXJuIGhhc1BhcmVudChwYXJlbnQsIHRhcmdldC5wYXJlbnROb2RlLCBwcmV2aW91c1RhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSBIYW1tZXIgZGlyZWN0aW9uIHJlcXVpcmVkIGJhc2VkIG9uIHRoZSBzd2lwZSBkaXJlY3Rpb25zXG4gICAgICogYmVpbmcgdXNlZFxuICAgICAqIGhhbW1lcmpzLmdpdGh1Yi5pby9hcGkvI2RpcmVjdGlvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzd2lwZUV2ZW50cyAtIEFuIG9iamVjdCBob2xkaW5nIGVhY2ggc3dpcGUgZGlyZWN0aW9uIGFuZFxuICAgICAqIHRoZSBoYW5kbGVyIHRvIGV4ZWN1dGVcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIYW1tZXJEaXJlY3Rpb24oc3dpcGVFdmVudHMpIHtcblxuICAgICAgdmFyIHN3aXBlRGlyZWN0aW9ucyA9IDAsXG4gICAgICAgICAgaGFtbWVyRGlyZWN0aW9uID0gSGFtbWVyLkRJUkVDVElPTl9OT05FO1xuXG4gICAgICBpZiAoc3dpcGVFdmVudHMubGVmdCAhPT0gdW5kZWZpbmVkIHx8IHN3aXBlRXZlbnRzLnJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3dpcGVEaXJlY3Rpb25zICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZUV2ZW50cy51cCAhPT0gdW5kZWZpbmVkIHx8IHN3aXBlRXZlbnRzLmRvd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzd2lwZURpcmVjdGlvbnMgKz0gMjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlRGlyZWN0aW9ucyA9PT0gMSkge1xuICAgICAgICBoYW1tZXJEaXJlY3Rpb24gPSBIYW1tZXIuRElSRUNUSU9OX0hPUklaT05UQUw7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlRGlyZWN0aW9ucyA9PT0gMikge1xuICAgICAgICBoYW1tZXJEaXJlY3Rpb24gPSBIYW1tZXIuRElSRUNUSU9OX1ZFUlRJQ0FMO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZURpcmVjdGlvbnMgPT09IDMpIHtcbiAgICAgICAgaGFtbWVyRGlyZWN0aW9uID0gSGFtbWVyLkRJUkVDVElPTl9BTEw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoYW1tZXJEaXJlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGNsYXNzZXMgdG8gdGhlIFNlcXVlbmNlIGNvbnRhaW5lciB0aGF0IGFsbG93IGZvciBzdHlsaW5nIGJhc2VkIG9uXG4gICAgICogZmVhdHVyZSBzdXBwb3J0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MT2JqZWN0fSAkZWwgLSBUaGUgZWxlbWVudCB0byBhZGQgdGhlIGNsYXNzZXMgdG9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gTW9kZXJuaXpyIC0gU2VxdWVuY2UncyBpbnN0YW5jZSBvZiBNb2Rlcm5penJcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRGZWF0dXJlU3VwcG9ydENsYXNzZXMoJGVsLCBNb2Rlcm5penIpIHtcblxuICAgICAgLy8gVE9ETzogQWRkIHN1cHBvcnQgZm9yIGFsbCBmZWF0dXJlcyB1c2VkIGJ5IFNlcXVlbmNlIGFuZCBvbmx5IG1hbmlwdWxhdGVcbiAgICAgIC8vIHRoZSBET00gb25jZS4gQ3VycmVudGx5IHRoaXMgZnVuY3Rpb24ganVzdCBhZGRzIGEgY2xhc3MgZm9yIHRoZSB0b3VjaFxuICAgICAgLy8gZmVhdHVyZS4gUHJvYmFibHkgYmVzdCBqdXN0IHRvIGNvcHkgaG93IE1vZGVybml6ciBkb2VzIGl0IHRvIGltcGxlbWVudFxuICAgICAgLy8gZnVsbCBsaXN0IG9mIGZlYXR1cmVzXG5cbiAgICAgIHZhciBwcmVmaXggPSBcInNlcS1cIixcbiAgICAgICAgICBzdXBwb3J0ID0gXCJuby10b3VjaFwiO1xuXG4gICAgICBpZiAoTW9kZXJuaXpyLnRvdWNoID09PSB0cnVlKSB7XG4gICAgICAgIHN1cHBvcnQgPSBcInRvdWNoXCI7XG4gICAgICB9XG5cbiAgICAgIGFkZENsYXNzKCRlbCwgcHJlZml4ICsgc3VwcG9ydCk7XG4gICAgfVxuXG4gICAgLyogLS0tIFBVQkxJQyBQUk9QRVJUSUVTL01FVEhPRFMgLS0tICovXG5cbiAgICAvLyBFeHBvc2Ugc29tZSBvZiBTZXF1ZW5jZSdzIHByaXZhdGUgcHJvcGVydGllc1xuICAgIHZhciBzZWxmID0ge1xuICAgICAgbW9kZXJuaXpyOiBNb2Rlcm5penJcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTWFuYWdlIFVJIGVsZW1lbnRzIHN1Y2ggYXMgbmV4dEJ1dHRvbiwgcHJldkJ1dHRvbiwgYW5kIHBhZ2luYXRpb25cbiAgICAgKi9cbiAgICBzZWxmLnVpID0ge1xuXG4gICAgICAvLyBEZWZhdWx0IFVJIGVsZW1lbnRzXG4gICAgICBkZWZhdWx0RWxlbWVudHM6IHtcbiAgICAgICAgXCJuZXh0QnV0dG9uXCI6IFwic2VxLW5leHRcIixcbiAgICAgICAgXCJwcmV2QnV0dG9uXCI6IFwic2VxLXByZXZcIixcbiAgICAgICAgXCJhdXRvUGxheUJ1dHRvblwiOiBcInNlcS1hdXRvcGxheVwiLFxuICAgICAgICBcInBhZ2luYXRpb25cIjogXCJzZXEtcGFnaW5hdGlvblwiLFxuICAgICAgICBcInByZWxvYWRlclwiOiBcInNlcS1wcmVsb2FkZXJcIlxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgYW4gVUkgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgVUkgZWxlbWVudCAobmV4dEJ1dHRvbiBmb3IgZXhhbXBsZSlcbiAgICAgICAqIEByZXR1cm5zIHtCb29sZWFuIHwgSFRNTEVsZW1lbnR9IG9wdGlvbiAtIFRydWUgaWYgdXNpbmcgdGhlIGRlZmF1bHRcbiAgICAgICAqIGVsZW1lbnQsIGVsc2UgYW4gSFRNTEVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgZ2V0RWxlbWVudHM6IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbikge1xuXG4gICAgICAgIHZhciBlbGVtZW50LFxuICAgICAgICAgICAgZWxlbWVudHMsXG4gICAgICAgICAgICBlbGVtZW50c0xlbmd0aCxcbiAgICAgICAgICAgIHJlbGF0ZWRFbGVtZW50cyA9IFtdLFxuICAgICAgICAgICAgcmVsLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAvLyBHZXQgdGhlIGVsZW1lbnQgYmVpbmcgdXNlZFxuICAgICAgICBpZiAob3B0aW9uID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAvLyBEZWZhdWx0IGVsZW1lbnRzXG4gICAgICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgdGhpcy5kZWZhdWx0RWxlbWVudHNbdHlwZV0pO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgLy8gQ3VzdG9tIGVsZW1lbnRzXG4gICAgICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG9wdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50c0xlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICAvLyBEb2VzIHRoZSBlbGVtZW50IGNvbnRyb2wgdGhpcyBpbnN0YW5jZSBvZiBTZXF1ZW5jZT8gV2UncmUgbG9va2luZ1xuICAgICAgICAvLyBmb3IgZWl0aGVyIGEgZ2xvYmFsIGVsZW1lbnQgb3Igb25lIHdpdGggYSByZWwgYXR0cmlidXRlIHRoZSBzYW1lXG4gICAgICAgIC8vIGFzIHRoaXMgaW5zdGFuY2VzIElEXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50c0xlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgcmVsID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJyZWxcIik7XG5cbiAgICAgICAgICBpZiAocmVsID09PSBudWxsIHx8IHJlbCA9PT0gc2VsZi4kY29udGFpbmVyLmdldEF0dHJpYnV0ZShcImlkXCIpKSB7XG4gICAgICAgICAgICByZWxhdGVkRWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVsYXRlZEVsZW1lbnRzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBGYWRlIGFuIGVsZW1lbnQgaW4gdXNpbmcgdHJhbnNpdGlvbnMgaWYgdGhleSdyZSBzdXBwb3J0ZWQsIGVsc2UgdXNlIEpTXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIHNob3dcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiB0byBzaG93IHRoZSBlbGVtZW50IG92ZXJcbiAgICAgICAqL1xuICAgICAgc2hvdzogZnVuY3Rpb24oZWxlbWVudCwgZHVyYXRpb24pIHtcblxuICAgICAgICBpZiAoc2VsZi5wcm9wZXJ0eVN1cHBvcnQudHJhbnNpdGlvbnMgPT09IHRydWUpIHtcblxuICAgICAgICAgIGVsZW1lbnQuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvbkR1cmF0aW9uXCIpXSA9IGR1cmF0aW9uICsgXCJtc1wiO1xuICAgICAgICAgIGVsZW1lbnQuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvblByb3BlcnR5XCIpXSA9IFwib3BhY2l0eSwgXCIgKyBNb2Rlcm5penIucHJlZml4ZWQoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgc2VsZi5hbmltYXRpb25GYWxsYmFjay5hbmltYXRlKGVsZW1lbnQsIFwib3BhY2l0eVwiLCBcIlwiLCAwLCAxLCBkdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRmFkZSBhbiBlbGVtZW50IG91dCB1c2luZyB0cmFuc2l0aW9ucyBpZiB0aGV5J3JlIHN1cHBvcnRlZCwgZWxzZSB1c2UgSlNcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gaGlkZVxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uIHRvIGhpZGUgdGhlIGVsZW1lbnQgb3ZlclxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGVsZW1lbnQgaXNcbiAgICAgICAqIGhpZGRlblxuICAgICAgICovXG4gICAgICBoaWRlOiBmdW5jdGlvbihlbGVtZW50LCBkdXJhdGlvbiwgY2FsbGJhY2spIHtcblxuICAgICAgICBpZiAoc2VsZi5wcm9wZXJ0eVN1cHBvcnQudHJhbnNpdGlvbnMgPT09IHRydWUpIHtcblxuICAgICAgICAgIGVsZW1lbnQuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvbkR1cmF0aW9uXCIpXSA9IGR1cmF0aW9uICsgXCJtc1wiO1xuICAgICAgICAgIGVsZW1lbnQuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvblByb3BlcnR5XCIpXSA9IFwib3BhY2l0eSwgXCIgKyBNb2Rlcm5penIucHJlZml4ZWQoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgc2VsZi5hbmltYXRpb25GYWxsYmFjay5hbmltYXRlKGVsZW1lbnQsIFwib3BhY2l0eVwiLCBcIlwiLCAxLCAwLCBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNlbGYuaGlkZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZHMgcmVsYXRpbmcgdG8gYXV0b1BsYXlcbiAgICAgKi9cbiAgICBzZWxmLmF1dG9QbGF5ID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIEluaXRpYXRlIGF1dG9QbGF5XG4gICAgICAgKi9cbiAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHNlbGYuaXNBdXRvUGxheVBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBzZWxmLmlzQXV0b1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZXJtaW5lIHRoZSBkZWxheSB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIGJlZm9yZSBzdGFydGluZyBhdXRvUGxheS4gQVxuICAgICAgICogY3VzdG9tIGRlbGF5IHNob3VsZCB0YWtlIHByZWNlZGVuY2UuIElmIGRlbGF5IGlzIHRydWUgdGhlbiB0aGUgZGVsYXlcbiAgICAgICAqIHNob3VsZCB1c2Ugb3B0aW9ucy5hdXRvUGxheURlbGF5IHdoZXJlIHNwZWNpZmllZC4gSWYgbm90XG4gICAgICAgKiBzcGVjaWZpZWQsIHVzZSB0aGUgc2FtZSB0aW1lIGFzIGRlZmluZWQgaW4gb3B0aW9ucy5hdXRvUGxheUludGVydmFsXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtCb29sZWFuL051bWJlcn0gZGVsYXkgLSBXaGV0aGVyIGEgZGVsYXkgc2hvdWxkIGJlIGFwcGxpZWQgYmVmb3JlXG4gICAgICAgKiBzdGFydGluZyBhdXRvUGxheSAodHJ1ZSA9IHNhbWUgYW1vdW50IGFzIG9wdGlvbnMuYXV0b1BsYXlJbnRlcnZhbCxcbiAgICAgICAqIGZhbHNlID0gbm8gaW50ZXJ2YWwsIG51bWJlciA9IGN1c3RvbSBpbnRlcnZhbCBwZXJpb2QpLiBBcHBsaWVkIHRvXG4gICAgICAgKiBhdXRvUGxheS5zdGFydCgpXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnREZWxheSAtIFRoZSBkZWxheSBhcHBsaWVkIHZpYSBvcHRpb25zLmF1dG9QbGF5RGVsYXlcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdXRvUGxheUludGVydmFsIC0gVGhlIGRlbGF5IGFwcGxpZWQgdmlhIG9wdGlvbnMuYXV0b1BsYXlJbnRlcnZhbFxuICAgICAgICovXG4gICAgICBnZXREZWxheTogZnVuY3Rpb24oZGVsYXksIHN0YXJ0RGVsYXksIGF1dG9QbGF5SW50ZXJ2YWwpIHtcblxuICAgICAgICBzd2l0Y2ggKGRlbGF5KSB7XG5cbiAgICAgICAgICBjYXNlIHRydWU6XG5cbiAgICAgICAgICAgIGRlbGF5ID0gKHN0YXJ0RGVsYXkgPT09IG51bGwpID8gYXV0b1BsYXlJbnRlcnZhbDogc3RhcnREZWxheTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlbGF5O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTdGFydCBhdXRvUGxheVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbi9OdW1iZXJ9IGRlbGF5IC0gV2hldGhlciBhIGRlbGF5IHNob3VsZCBiZSBhcHBsaWVkIGJlZm9yZVxuICAgICAgICogc3RhcnRpbmcgYXV0b1BsYXkgKHRydWUgPSBzYW1lIGFtb3VudCBhcyBvcHRpb25zLmF1dG9QbGF5SW50ZXJ2YWwsXG4gICAgICAgKiBmYWxzZSA9IG5vIGRlbGF5LCBudW1iZXIgPSBjdXN0b20gZGVsYXkgcGVyaW9kKVxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBjb250aW51aW5nIC0gSWYgYXV0b1BsYXkgaXMgY29udGludWluZyBmcm9tIGFcbiAgICAgICAqIHByZXZpb3VzIGN5Y2xlLCB0aGUgc3RhcnRlZCgpIGNhbGxiYWNrIHdvbid0IGJlIHRyaWdnZXJlZFxuICAgICAgICogQHJldHVybnMgZmFsc2UgLSBXaGVuIGF1dG9QbGF5IGlzIGFscmVhZHkgYWN0aXZlIGFuZCBjYW4ndCBiZSBzdGFydGVkXG4gICAgICAgKiBhZ2FpblxuICAgICAgICovXG4gICAgICBzdGFydDogZnVuY3Rpb24oZGVsYXksIGNvbnRpbnVpbmcpIHtcblxuICAgICAgICAvLyBPbmx5IHN0YXJ0IG9uY2VcbiAgICAgICAgaWYgKHNlbGYuaXNBdXRvUGxheWluZyA9PT0gdHJ1ZSB8fCBzZWxmLmlzUmVhZHkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBzZWxmLm9wdGlvbnM7XG5cbiAgICAgICAgLy8gV2hpY2ggZGVsYXkgc2hvdWxkIHdlIHVzZT9cbiAgICAgICAgZGVsYXkgPSB0aGlzLmdldERlbGF5KGRlbGF5LCBvcHRpb25zLmF1dG9QbGF5RGVsYXksIG9wdGlvbnMuYXV0b1BsYXlJbnRlcnZhbCk7XG5cbiAgICAgICAgLy8gQ2FsbGJhY2sgKG9ubHkgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gYXV0b1BsYXkgaXMgY29udGludWluZyBmcm9tIGFcbiAgICAgICAgLy8gcHJldmlvdXMgY3ljbGUpXG4gICAgICAgIGlmIChjb250aW51aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0ZWQoc2VsZik7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRDbGFzcyhzZWxmLiRjb250YWluZXIsIFwic2VxLWF1dG9wbGF5aW5nXCIpO1xuICAgICAgICBhZGRDbGFzcyhzZWxmLiRhdXRvUGxheSwgXCJzZXEtYXV0b3BsYXlpbmdcIik7XG5cbiAgICAgICAgLy8gYXV0b1BsYXkgaXMgbm93IGVuYWJsZWQgYW5kIGFjdGl2ZVxuICAgICAgICBvcHRpb25zLmF1dG9QbGF5ID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5pc0F1dG9QbGF5aW5nID0gdHJ1ZTtcblxuICAgICAgICAvLyBPbmx5IHN0YXJ0IGEgbmV3IGF1dG9QbGF5IHRpbWVyIGlmIFNlcXVlbmNlIGlzbid0IGFscmVhZHkgYW5pbWF0aW5nLlxuICAgICAgICAvLyBJZiBpdCBpcywgYSBuZXcgb25lIHdpbGwgYmUgc3RhcnRlZCBhdCB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb24uXG4gICAgICAgIGlmIChzZWxmLmlzQW5pbWF0aW5nID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgLy8gQ2hvb3NlIHRoZSBkaXJlY3Rpb24gYW5kIHN0YXJ0IGF1dG9QbGF5XG4gICAgICAgICAgc2VsZi5hdXRvUGxheVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1BsYXlEaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5uZXh0KCk7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYucHJldigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTdG9wIGF1dG9QbGF5XG4gICAgICAgKi9cbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuYXV0b1BsYXkgPT09IHRydWUgJiYgc2VsZi5pc0F1dG9QbGF5aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLmF1dG9QbGF5ID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5pc0F1dG9QbGF5aW5nID0gZmFsc2U7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuYXV0b1BsYXlUaW1lcik7XG5cbiAgICAgICAgICByZW1vdmVDbGFzcyhzZWxmLiRjb250YWluZXIsIFwic2VxLWF1dG9wbGF5aW5nXCIpO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHNlbGYuJGF1dG9QbGF5LCBcInNlcS1hdXRvcGxheWluZ1wiKTtcblxuICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgc2VsZi5zdG9wcGVkKHNlbGYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVbnBhdXNlIGF1dG9QbGF5XG4gICAgICAgKlxuICAgICAgICogYXV0b1BsYXkucGF1c2UoKSBhbmQgYXV0b1BsYXkudW5wYXVzZSgpIGFyZSB1c2VkIGludGVybmFsbHkgdG9cbiAgICAgICAqIHRlbXBvcmFyaWx5IHN0b3AgYXV0b1BsYXkgd2hlbiBob3ZlcmVkIG92ZXIuXG4gICAgICAgKi9cbiAgICAgIHVucGF1c2U6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmIChzZWxmLmlzQXV0b1BsYXlQYXVzZWQgPT09IHRydWUpIHtcblxuICAgICAgICAgIHNlbGYuaXNBdXRvUGxheVBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuc3RhcnQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFBhdXNlIGF1dG9QbGF5XG4gICAgICAgKlxuICAgICAgICogYXV0b1BsYXkucGF1c2UoKSBhbmQgYXV0b1BsYXkudW5wYXVzZSgpIGFyZSB1c2VkIGludGVybmFsbHkgdG9cbiAgICAgICAqIHRlbXBvcmFyaWx5IHN0b3AgYXV0b1BsYXkgd2hlbiBob3ZlcmVkIG92ZXIuXG4gICAgICAgKi9cbiAgICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmF1dG9QbGF5ID09PSB0cnVlKSB7XG5cbiAgICAgICAgICBzZWxmLmlzQXV0b1BsYXlQYXVzZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIFNlcXVlbmNlJ3MgY2FudmFzXG4gICAgICovXG4gICAgc2VsZi5jYW52YXMgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0dXAgdGhlIGNhbnZhcywgc2NyZWVuLCBhbmQgc3RlcHMgcmVhZHkgdG8gYmUgYW5pbWF0ZWRcbiAgICAgICAqL1xuICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcblxuICAgICAgICBpZiAoc2VsZi4kc2NyZWVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxmLiRzY3JlZW4uc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgICAgc2VsZi4kc2NyZWVuLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGVhY2ggc3RlcCBhbmQgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHJlcXVpcmVkIGZvciB0aGUgY2FudmFzIHNvIGl0IGNhbiBtb3ZlIHRvIGVhY2ggc3RlcFxuICAgICAgICBzZWxmLmNhbnZhcy5nZXRUcmFuc2Zvcm1Qcm9wZXJ0aWVzKCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBTZXF1ZW5jZSdzIHN0ZXBzXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2FudmFzIC0gVGhlIGNhbnZhcyBlbGVtZW50XG4gICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IHN0ZXBzIC0gVGhlIGVsZW1lbnRzIHRoYXQgbWFrZSB1cCBTZXF1ZW5jZSdzIHN0ZXBzXG4gICAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgZ2V0U3RlcHM6IGZ1bmN0aW9uKGNhbnZhcykge1xuXG4gICAgICAgIHZhciBzdGVwcyA9IFtdLFxuICAgICAgICAgICAgc3RlcElkLFxuICAgICAgICAgICAgc3RlcCxcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50cyA9IGNhbnZhcy5jaGlsZHJlbixcbiAgICAgICAgICAgIHN0ZXBzTGVuZ3RoID0gc3RlcEVsZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gV2hlcmUgd2UnbGwgc2F2ZSBpbmZvIGFib3V0IHRoZSBhbmltYXRpb25cbiAgICAgICAgc2VsZi5zdGVwUHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgIC8vIEdldCB0aGUgc3RlcHMgdGhhdCBoYXZlIGEgcGFyZW50IHdpdGggYSBjbGFzcyBvZiBcInNlcS1jYW52YXNcIlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RlcHNMZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgc3RlcCA9IHN0ZXBFbGVtZW50c1tpXTtcbiAgICAgICAgICBzdGVwSWQgPSBpICsgMTtcblxuICAgICAgICAgIHN0ZXBzLnB1c2goc3RlcCk7XG5cbiAgICAgICAgICAvLyBBZGQgZWFjaCBzdGVwIHRvIHRoZSBhbmltYXRpb24gbWFwLCB3aGVyZSB3ZSdsbCBzYXZlIGl0cyB0cmFuc2Zvcm1cbiAgICAgICAgICAvLyBwcm9wZXJ0aWVzXG4gICAgICAgICAgc2VsZi5zdGVwUHJvcGVydGllc1tzdGVwSWRdID0ge307XG4gICAgICAgICAgc2VsZi5zdGVwUHJvcGVydGllc1tzdGVwSWRdLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RlcHM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgZWFjaCBzdGVwIGFuZCB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXNcbiAgICAgICAqIHJlcXVpcmVkIGZvciB0aGUgY2FudmFzIHNvIGl0IGNhbiBtb3ZlIHRvIGVhY2ggc3RlcFxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgZ2V0VHJhbnNmb3JtUHJvcGVydGllczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBzdGVwLFxuICAgICAgICAgICAgc3RlcElkLFxuICAgICAgICAgICAgY2FudmFzVHJhbnNmb3JtO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxmLm5vT2ZTdGVwczsgaSsrKSB7XG5cbiAgICAgICAgICBzdGVwID0gc2VsZi4kc3RlcHNbaV07XG4gICAgICAgICAgc3RlcElkID0gaSArIDE7XG5cbiAgICAgICAgICBjYW52YXNUcmFuc2Zvcm0gPSB7XG4gICAgICAgICAgICBcInNlcVhcIjogMCxcbiAgICAgICAgICAgIFwic2VxWVwiOiAwLFxuICAgICAgICAgICAgXCJzZXFaXCI6IDBcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gSW52ZXJ0IHRoZSBzdGVwcyBvZmZzZXRMZWZ0IGFuZCBvZmZzZXRUb3AgdG8gdGhlIGNhbnZhcyB3aWxsIGFsd2F5c1xuICAgICAgICAgIC8vIG1vdmUgdG8gc2hvdyB0aGUgc3RlcFxuICAgICAgICAgIGNhbnZhc1RyYW5zZm9ybS5zZXFYICs9IHN0ZXAub2Zmc2V0TGVmdCAqIC0xO1xuICAgICAgICAgIGNhbnZhc1RyYW5zZm9ybS5zZXFZICs9IHN0ZXAub2Zmc2V0VG9wICogLTE7XG5cbiAgICAgICAgICBzZWxmLnN0ZXBQcm9wZXJ0aWVzW3N0ZXBJZF0uY2FudmFzVHJhbnNmb3JtID0gY2FudmFzVHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIE1vdmUgdGhlIGNhbnZhcyB0byBzaG93IGEgc3BlY2lmaWMgc3RlcFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZCAtIFRoZSBJRCBvZiB0aGUgc3RlcCB0byBtb3ZlIHRvXG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFuaW1hdGUgLSBTaG91bGQgdGhlIGNhbnZhcyBhbmltYXRlIG9yIHNuYXA/XG4gICAgICAgKi9cbiAgICAgIG1vdmU6IGZ1bmN0aW9uKGlkLCBhbmltYXRlKSB7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5hbmltYXRlQ2FudmFzID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIGNhbnZhcyBlbGVtZW50IGFuZCBzdGVwIGVsZW1lbnQgdG8gYW5pbWF0ZSB0b1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IDAsXG4gICAgICAgICAgICAgIHRyYW5zZm9ybXM7XG5cbiAgICAgICAgICAvLyBTaG91bGQgdGhlIGNhbnZhcyBhbmltYXRlP1xuICAgICAgICAgIGlmIChhbmltYXRlID09PSB0cnVlICYmIHNlbGYuZmlyc3RSdW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHNlbGYub3B0aW9ucy5hbmltYXRlQ2FudmFzRHVyYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQW5pbWF0ZSB0aGUgY2FudmFzIHVzaW5nIENTUyB0cmFuc2l0aW9uc1xuICAgICAgICAgIGlmIChzZWxmLmlzRmFsbGJhY2tNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICB0cmFuc2Zvcm1zID0gc2VsZi5zdGVwUHJvcGVydGllc1tpZF0uY2FudmFzVHJhbnNmb3JtO1xuXG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgdHJhbnNmb3JtIENTUyB0byB0aGUgY2FudmFzXG4gICAgICAgICAgICBzZWxmLiRjYW52YXMuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvbkR1cmF0aW9uXCIpXSA9IGR1cmF0aW9uICsgXCJtc1wiO1xuICAgICAgICAgICAgc2VsZi4kY2FudmFzLnN0eWxlW01vZGVybml6ci5wcmVmaXhlZChcInRyYW5zZm9ybVwiKV0gPSBcInRyYW5zbGF0ZVgoXCIgKyB0cmFuc2Zvcm1zLnNlcVggKyBcInB4KSBcIiArIFwidHJhbnNsYXRlWShcIiArIHRyYW5zZm9ybXMuc2VxWSArIFwicHgpIFwiICsgXCJ0cmFuc2xhdGVaKFwiICsgdHJhbnNmb3Jtcy5zZXFaICsgXCJweCkgXCI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgbm8tSlMgXCJzZXEtaW5cIiBjbGFzcyBmcm9tIGEgc3RlcFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAgICogQGFwaSBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZU5vSnNDbGFzczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKHNlbGYuaXNGYWxsYmFja01vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMb29rIGZvciB0aGUgc3RlcCB3aXRoIHRoZSBcInNlcS1pblwiIGNsYXNzIGFuZCByZW1vdmUgdGhlIGNsYXNzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi4kc3RlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IHNlbGYuJHN0ZXBzW2ldO1xuXG4gICAgICAgICAgaWYgKGhhc0NsYXNzKGVsZW1lbnQsIFwic2VxLWluXCIpID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgc3RlcCA9IGkgKyAxO1xuXG4gICAgICAgICAgICBzZWxmLmFuaW1hdGlvbi5yZXNldEluaGVyaXRlZFNwZWVkKHN0ZXApO1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgXCJzZXEtaW5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIFNlcXVlbmNlJ3Mgc3RlcCBhbmltYXRpb25zXG4gICAgICovXG4gICAgc2VsZi5hbmltYXRpb24gPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBwcm9wZXJ0aWVzIG9mIGEgcGhhc2VcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RlcElkIC0gVGhlIElEIG9mIHRoZSBzdGVwXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBJRCBhbmQgZWxlbWVudCBvZiB0aGUgc3RlcCB0aGUgcGhhc2UgYmVsb25ncyB0byxcbiAgICAgICAqIGFycmF5IG9mIGFsbCBjaGlsZCBlbGVtZW50cyB0aGF0IGJlbG9uZyB0byBzdGVwLCBhcnJheSBvZiBhbmltYXRlZFxuICAgICAgICogZWxlbWVudHMsIHRpbWluZ3Mgb2JqZWN0IGNvbnRhaW5pbmcgbWF4RHVyYXRpb24sIG1heERlbGF5LCBhbmRcbiAgICAgICAqIG1heExlbmd0aFxuICAgICAgICovXG4gICAgICBnZXRQaGFzZVByb3BlcnRpZXM6IGZ1bmN0aW9uKHN0ZXBJZCkge1xuXG4gICAgICAgIHZhciBzdGVwRWxlbWVudCA9IHNlbGYuJHN0ZXBzW3N0ZXBJZCAtIDFdLFxuICAgICAgICAgICAgc3RlcEFuaW1hdGVkQ2hpbGRyZW4gPSBzdGVwRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKltkYXRhLXNlcV1cIiksXG4gICAgICAgICAgICBzdGVwQ2hpbGRyZW4gPSBzdGVwRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSxcbiAgICAgICAgICAgIHN0ZXBDaGlsZHJlbkxlbmd0aCA9IHN0ZXBDaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgICAgICBlbCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICB3YXRjaGVkRHVyYXRpb25zID0gW10sXG4gICAgICAgICAgICB3YXRjaGVkRGVsYXlzID0gW10sXG4gICAgICAgICAgICB3YXRjaGVkTGVuZ3RocyA9IFtdLFxuICAgICAgICAgICAgZHVyYXRpb25zID0gW10sXG4gICAgICAgICAgICBkZWxheXMgPSBbXSxcbiAgICAgICAgICAgIGxlbmd0aHMgPSBbXSxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgZGVsYXk7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBhbmltYXRpb24gbGVuZ3RoIG9mIGVhY2ggZWxlbWVudCAoZHVyYXRpb24gKyBkZWxheSkgYW5kIHNhdmVcbiAgICAgICAgLy8gZm9yIGNvbXBhcmlzc29uXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGVwQ2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVsID0gc3RlcENoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgZHVyYXRpb24gPSBjb252ZXJ0VGltZVRvTXMoZ2V0U3R5bGUoZWwsIE1vZGVybml6ci5wcmVmaXhlZChcInRyYW5zaXRpb25EdXJhdGlvblwiKSkpO1xuICAgICAgICAgIGRlbGF5ID0gY29udmVydFRpbWVUb01zKGdldFN0eWxlKGVsLCBNb2Rlcm5penIucHJlZml4ZWQoXCJ0cmFuc2l0aW9uRGVsYXlcIikpKTtcblxuICAgICAgICAgIC8vIFNhdmUgdGhpcyBlbGVtZW50cyBhbmltYXRpb24gbGVuZ3RoIGZvciBhbGwgZWxlbWVudHNcbiAgICAgICAgICBkdXJhdGlvbnMucHVzaChkdXJhdGlvbik7XG4gICAgICAgICAgZGVsYXlzLnB1c2goZGVsYXkpO1xuICAgICAgICAgIGxlbmd0aHMucHVzaChkdXJhdGlvbiArIGRlbGF5KTtcblxuICAgICAgICAgIC8vIEFsc28gc2F2ZSBhbmltYXRpb24gbGVuZ3RocyBidXQgb25seSBmb3Igd2F0Y2hlZCBlbGVtZW50c1xuICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlcVwiKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2F0Y2hlZER1cmF0aW9ucy5wdXNoKGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHdhdGNoZWREZWxheXMucHVzaChkZWxheSk7XG4gICAgICAgICAgICB3YXRjaGVkTGVuZ3Rocy5wdXNoKGR1cmF0aW9uICsgZGVsYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoaWNoIHdlcmUgdGhlIGxvbmdlc3QgZHVyYXRpb25zIGFuZCBkZWxheXM/XG4gICAgICAgIHZhciBtYXhEdXJhdGlvbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGR1cmF0aW9ucyksXG4gICAgICAgICAgICBtYXhEZWxheSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGRlbGF5cyksXG4gICAgICAgICAgICBtYXhUb3RhbCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGxlbmd0aHMpO1xuXG4gICAgICAgIC8vIFdoaWNoIHdlcmUgdGhlIGxvbmdlc3Qgd2F0Y2hlZCBkdXJhdGlvbnMgYW5kIGRlbGF5cz9cbiAgICAgICAgdmFyIHdhdGNoZWRNYXhEdXJhdGlvbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHdhdGNoZWREdXJhdGlvbnMpLFxuICAgICAgICAgICAgd2F0Y2hlZE1heERlbGF5ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgd2F0Y2hlZERlbGF5cyksXG4gICAgICAgICAgICB3YXRjaGVkTWF4VG90YWwgPSBNYXRoLm1heC5hcHBseShNYXRoLCB3YXRjaGVkTGVuZ3Rocyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGVwSWQ6IHN0ZXBJZCxcbiAgICAgICAgICBzdGVwRWxlbWVudDogc3RlcEVsZW1lbnQsXG4gICAgICAgICAgY2hpbGRyZW46IHN0ZXBDaGlsZHJlbixcbiAgICAgICAgICBhbmltYXRlZENoaWxkcmVuOiBzdGVwQW5pbWF0ZWRDaGlsZHJlbixcbiAgICAgICAgICB3YXRjaGVkVGltaW5nczoge1xuICAgICAgICAgICAgbWF4RHVyYXRpb246IHdhdGNoZWRNYXhEdXJhdGlvbixcbiAgICAgICAgICAgIG1heERlbGF5OiB3YXRjaGVkTWF4RGVsYXksXG4gICAgICAgICAgICBtYXhUb3RhbDogd2F0Y2hlZE1heFRvdGFsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aW1pbmdzOiB7XG4gICAgICAgICAgICBtYXhEdXJhdGlvbjogbWF4RHVyYXRpb24sXG4gICAgICAgICAgICBtYXhEZWxheTogbWF4RGVsYXksXG4gICAgICAgICAgICBtYXhUb3RhbDogbWF4VG90YWxcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEhvdyBsb25nIGJlZm9yZSB0aGUgbmV4dCBwaGFzZSBzaG91bGQgc3RhcnQ/XG4gICAgICAgKiBJZ25vcmUgdGhlIHBoYXNlVGhyZXNob2xkIChvbiBmaXJzdCBydW4gZm9yIGV4YW1wbGUpXG4gICAgICAgKi9cbiAgICAgIGdldFBoYXNlVGhyZXNob2xkOiBmdW5jdGlvbihpZ25vcmVQaGFzZVRocmVzaG9sZCwgcGhhc2VUaHJlc2hvbGRPcHRpb24sIGlzQW5pbWF0aW5nLCBjdXJyZW50UGhhc2VEdXJhdGlvbikge1xuXG4gICAgICAgIHZhciBwaGFzZVRocmVzaG9sZFRpbWUgPSAwO1xuXG4gICAgICAgIC8vIElnbm9yZSB0aGUgcGhhc2VUaHJlc2hvbGQgaWYgdGhlIGRldmVsb3BlciB3aXNoZXMgZm9yIHRoaXMgdG8gaGFwcGVuXG4gICAgICAgIC8vIGlmIFNlcXVlbmNlLmpzIGlzIGFuaW1hdGluZ1xuICAgICAgICBpZiAoaXNBbmltYXRpbmcgPT09IHRydWUgJiYgc2VsZi5vcHRpb25zLmlnbm9yZVBoYXNlVGhyZXNob2xkV2hlblNraXBwZWQgPT09IHRydWUpIHtcbiAgICAgICAgICBpZ25vcmVQaGFzZVRocmVzaG9sZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWdub3JlUGhhc2VUaHJlc2hvbGQgPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgaWYgKHBoYXNlVGhyZXNob2xkT3B0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBUaGUgcGhhc2VUaHJlc2hvbGQgc2hvdWxkIGJlIHRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgcGhhc2VcbiAgICAgICAgICAgIC8vIHNvIHRoZSBuZXh0IHN0YXJ0cyBpbW1lZGlhdGVseSBhZnRlclxuICAgICAgICAgICAgcGhhc2VUaHJlc2hvbGRUaW1lID0gY3VycmVudFBoYXNlRHVyYXRpb247XG4gICAgICAgICAgfSBlbHNlIGlmIChwaGFzZVRocmVzaG9sZE9wdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgZGV2ZWxvcGVyIGRlZmluZWQgcGhhc2VUaHJlc2hvbGRcbiAgICAgICAgICAgIHBoYXNlVGhyZXNob2xkVGltZSA9IHBoYXNlVGhyZXNob2xkT3B0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwaGFzZVRocmVzaG9sZFRpbWU7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIERvIHdlIG5lZWQgdG8gYWRkIGEgZGVsYXkgdG8gYWNjb3VudCBmb3Igb25lIHBoYXNlIGZpbmlzaGluZ1xuICAgICAgICogYmVmb3JlIGFub3RoZXI/XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRQaGFzZVRvdGFsIC0gQW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRoZVxuICAgICAgICogY3VycmVudCBwaGFzZSB3aWxsIGFuaW1hdGUgZm9yXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gbmV4dFBoYXNlVG90YWwgLSBBbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhlXG4gICAgICAgKiBuZXh0IHBoYXNlIHdpbGwgYW5pbWF0ZSBmb3JcbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaWdub3JlUGhhc2VUaHJlc2hvbGRXaGVuU2tpcHBlZE9wdGlvbiAtIGlmIHRydWUsXG4gICAgICAgKiBkb24ndCB1c2UgYSByZXZlcnNlUGhhc2VEZWxheVxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc0FuaW1hdGluZyAtIFdoZXRoZXIgU2VxdWVuY2UgaXMgYW5pbWF0aW5nXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIENvbnRhaW5zIHRpbWVzIHRoYXQgc2hvdWxkIGRlbGF5IHRoZSBuZXh0IG9yXG4gICAgICAgKiBjdXJyZW50IHBoYXNlIGFjY29yZGluZ2x5XG4gICAgICAgKi9cbiAgICAgICBnZXRSZXZlcnNlUGhhc2VEZWxheTogZnVuY3Rpb24oY3VycmVudFBoYXNlVG90YWwsIG5leHRQaGFzZVRvdGFsLCBwaGFzZVRocmVzaG9sZE9wdGlvbiwgaWdub3JlUGhhc2VUaHJlc2hvbGRXaGVuU2tpcHBlZE9wdGlvbiwgaXNBbmltYXRpbmcpIHtcblxuICAgICAgICB2YXIgcGhhc2VEaWZmZXJlbmNlID0gMCxcbiAgICAgICAgICAgIGN1cnJlbnQgPSAwLFxuICAgICAgICAgICAgbmV4dCA9IDA7XG5cbiAgICAgICAgLy8gT25seSB1c2UgYSByZXZlcnNlUGhhc2VEZWxheSBpZiB0aGUgcGhhc2VUaHJlc2hvbGQgb3B0aW9uIGlzIHRydWUgb3JcbiAgICAgICAgLy8gYSBjdXN0b20gdGltZSwgYW5kIFNlcXVlbmNlIGlzIG5vdCBhbmltYXRpbmcgd2l0aCB0aGVcbiAgICAgICAgLy8gaWdub3JlUGhhc2VUaHJlc2hvbGQgb3B0aW9uIG9uXG4gICAgICAgIGlmIChwaGFzZVRocmVzaG9sZE9wdGlvbiAhPT0gdHJ1ZSAmJiAoaWdub3JlUGhhc2VUaHJlc2hvbGRXaGVuU2tpcHBlZE9wdGlvbiA9PT0gZmFsc2UgfHwgaXNBbmltYXRpbmcgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcGhhc2VEaWZmZXJlbmNlID0gY3VycmVudFBoYXNlVG90YWwgLSBuZXh0UGhhc2VUb3RhbDtcblxuICAgICAgICAgIGlmIChwaGFzZURpZmZlcmVuY2UgPiAwKSB7XG4gICAgICAgICAgICBuZXh0ID0gcGhhc2VEaWZmZXJlbmNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGhhc2VEaWZmZXJlbmNlIDwgMCkge1xuICAgICAgICAgICAgY3VycmVudCA9IE1hdGguYWJzKHBoYXNlRGlmZmVyZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXh0OiBuZXh0LFxuICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgdGhlIG1vdmVBY3RpdmVTdGVwVG9Ub3Agb3B0aW9uIGlzIGJlaW5nIHVzZWQsIG1vdmUgdGhlIG5leHQgc3RlcFxuICAgICAgICogdG8gdGhlIHRvcCBhbmQgdGhlIGN1cnJlbnQgc3RlcCB0byB0aGUgYm90dG9tIHZpYSB6LWluZGV4XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY3VycmVudEVsZW1lbnQgLSBUaGUgY3VycmVudCBzdGVwIHRvIGJlIG1vdmVkIG9mZlxuICAgICAgICogdGhlIHRvcFxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbmV4dEVsZW1lbnQgLSBUaGUgbmV4dCBzdGVwIHRvIGJlIG1vdmVkIHRvIHRoZSB0b3BcbiAgICAgICAqL1xuICAgICAgbW92ZUFjdGl2ZVN0ZXBUb1RvcDogZnVuY3Rpb24oY3VycmVudEVsZW1lbnQsIG5leHRFbGVtZW50KSB7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tb3ZlQWN0aXZlU3RlcFRvVG9wID09PSB0cnVlKSB7XG5cbiAgICAgICAgICB2YXIgcHJldlN0ZXBFbGVtZW50ID0gc2VsZi4kc3RlcHNbc2VsZi5wcmV2U3RlcElkIC0gMV0sXG4gICAgICAgICAgICAgIGxhc3RTdGVwSWQgPSBzZWxmLm5vT2ZTdGVwcyAtIDE7XG5cbiAgICAgICAgICBwcmV2U3RlcEVsZW1lbnQuc3R5bGUuekluZGV4ID0gMTtcbiAgICAgICAgICBjdXJyZW50RWxlbWVudC5zdHlsZS56SW5kZXggPSBsYXN0U3RlcElkO1xuICAgICAgICAgIG5leHRFbGVtZW50LnN0eWxlLnpJbmRleCA9IHNlbGYubm9PZlN0ZXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRoZSBuYXZpZ2F0aW9uU2tpcFRocmVzaG9sZCBvcHRpb24gaXMgYmVpbmcgdXNlZCwgcHJldmVudCB0aGUgdXNlXG4gICAgICAgKiBvZiBnb1RvKCkgZHVyaW5nIHRoZSB0aHJlc2hvbGQgcGVyaW9kXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIElEIG9mIHRoZSBzdGVwIFNlcXVlbmNlIGlzIHRyeWluZyB0byBnbyB0b1xuICAgICAgICogQHBhcmFtIHtIVE1MT2JqZWN0fSBuZXh0U3RlcEVsZW1lbnQgLSBUaGUgZWxlbWVudCBmb3IgdGhlIG5leHQgc3RlcFxuICAgICAgICovXG4gICAgICBtYW5hZ2VOYXZpZ2F0aW9uU2tpcDogZnVuY3Rpb24oaWQsIG5leHRTdGVwRWxlbWVudCkge1xuXG4gICAgICAgIGlmIChzZWxmLmlzRmFsbGJhY2tNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBzdGVwUHJvcGVydGllcyxcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50LFxuICAgICAgICAgICAgc3RlcElkLFxuICAgICAgICAgICAgcGhhc2VTa2lwcGVkO1xuXG4gICAgICAgIC8vIFNob3cgdGhlIG5leHQgc3RlcCBhZ2FpblxuICAgICAgICBzZWxmLnVpLnNob3cobmV4dFN0ZXBFbGVtZW50LCAwKTtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm5hdmlnYXRpb25Ta2lwID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAvLyBTdGFydCB0aGUgbmF2aWdhdGlvbiBza2lwIHRocmVzaG9sZFxuICAgICAgICAgIHNlbGYubmF2aWdhdGlvblNraXBUaHJlc2hvbGRBY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gQXJlIHRoZXJlIHN0ZXBzIGN1cnJlbnRseSBhbmltYXRpbmcgdGhhdCBuZWVkIHRvIGJlIGZhZGVkIG91dD9cbiAgICAgICAgICBpZiAoc2VsZi5waGFzZXNBbmltYXRpbmcgIT09IDApIHtcblxuICAgICAgICAgICAgLy8gSWYgYSBzdGVwIGlzIHdhaXRpbmcgdG8gYW5pbWF0ZSBpbiBiYXNlZCBvbiB0aGUgcGhhc2VUaHJlc2hvbGQsXG4gICAgICAgICAgICAvLyBjYW5jZWwgaXRcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLnBoYXNlVGhyZXNob2xkVGltZXIpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYubmV4dFBoYXNlU3RhcnRlZFRpbWVyKTtcblxuICAgICAgICAgICAgLy8gRmFkZSBhIHN0ZXAgaWYgdGhlIHVzZXIgbmF2aWdhdGVzIHRvIGFub3RoZXIgcHJpb3IgdG8gaXRzXG4gICAgICAgICAgICAvLyBhbmltYXRpb24gZmluaXNoaW5nXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmZhZGVTdGVwV2hlblNraXBwZWQgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAvLyBGYWRlIGFsbCBlbGVtZW50cyB0aGF0IGFyZSBhbmltYXRpbmdcbiAgICAgICAgICAgICAgLy8gKG5vdCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgb25lKVxuICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IHNlbGYubm9PZlN0ZXBzOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIHN0ZXBQcm9wZXJ0aWVzID0gc2VsZi5zdGVwUHJvcGVydGllc1tpXTtcblxuICAgICAgICAgICAgICAgIC8vIERlYWwgd2l0aCB0aGUgc3RlcHMgdGhhdCB3ZXJlIHNraXBwZWQgd2hpbHN0IHN0aWxsIGFuaW1hdGluZ1xuICAgICAgICAgICAgICAgIGlmIChzdGVwUHJvcGVydGllcy5pc0FjdGl2ZSA9PT0gdHJ1ZSAmJiBpICE9PSBpZCkge1xuICAgICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQgPSBzZWxmLiRzdGVwc1tpIC0gMV07XG4gICAgICAgICAgICAgICAgICBzdGVwSWQgPSBpO1xuXG4gICAgICAgICAgICAgICAgICBwaGFzZVNraXBwZWQgPSB7fTtcbiAgICAgICAgICAgICAgICAgIHBoYXNlU2tpcHBlZC5pZCA9IHN0ZXBJZDtcbiAgICAgICAgICAgICAgICAgIHBoYXNlU2tpcHBlZC5lbGVtZW50ID0gc3RlcEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIElEIG9mIHRoZSBza2lwcGVkIHN0ZXAgc28gd2UgY2FuIGRlYWwgd2l0aCBpdCB3aGVuIGl0IGhhcyBmYWRlZCBvdXRcbiAgICAgICAgICAgICAgICAgIHNlbGYucGhhc2VzU2tpcHBlZC5wdXNoKHBoYXNlU2tpcHBlZCk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIERlYWwgd2l0aCB0aGUgc2tpcHBlZCBzdGVwXG4gICAgICAgICAgICAgICAgICBzZWxmLmFuaW1hdGlvbi5zdGVwU2tpcHBlZChzdGVwRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3RhcnQgdGhlIG5hdmlnYXRpb25Ta2lwVGhyZXNob2xkIHRpbWVyIHRvIHByZXZlbnQgYmVpbmcgYWJsZSB0b1xuICAgICAgICAgIC8vIG5hdmlnYXRlIHRvbyBxdWlja2x5XG4gICAgICAgICAgc2VsZi5uYXZpZ2F0aW9uU2tpcFRocmVzaG9sZFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYubmF2aWdhdGlvblNraXBUaHJlc2hvbGRBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICB9LCBzZWxmLm9wdGlvbnMubmF2aWdhdGlvblNraXBUaHJlc2hvbGQpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIERlYWwgd2l0aCBhIHN0ZXAgd2hlbiBpdCBoYXMgYmVlbiBza2lwcGVkXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gc3RlcEVsZW1lbnQgLSBUaGUgc3RlcCBlbGVtZW50IHRoYXQgd2FzIHNraXBwZWRcbiAgICAgICAqL1xuICAgICAgc3RlcFNraXBwZWQ6IGZ1bmN0aW9uKHN0ZXBFbGVtZW50KSB7XG5cbiAgICAgICAgLy8gVE9ETzogQWRkIHJlc2V0V2hlblN0ZXBTa2lwcGVkIG9wdGlvbiAtXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9JYW5MdW5uL1NlcXVlbmNlL2lzc3Vlcy8yNTdcbiAgICAgICAgLy8gUmVzZXQgdGhlIHNraXBwZWQgc3RlcHMgY3VycmVudCBhbmQgbmV4dCBwaGFzZSBlbmRlZCB0aW1lcnMgYW5kIHRyaWdnZXJcbiAgICAgICAgLy8gdGhlbSBhcyBzb29uIGFzIHRoZSBzdGVwcyBoYXZlIGZhZGVkIG91dFxuXG4gICAgICAgIC8vIEZhZGUgdGhlIHN0ZXAgb3V0XG4gICAgICAgIHNlbGYudWkuaGlkZShzdGVwRWxlbWVudCwgc2VsZi5vcHRpb25zLmZhZGVTdGVwVGltZSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hhbmdlIGEgc3RlcCdzIGNsYXNzLiBFeGFtcGxlOiBnbyBmcm9tIHN0ZXAxIHRvIHN0ZXAyXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIElEIG9mIHRoZSBzdGVwIHRvIGNoYW5nZVxuICAgICAgICovXG4gICAgICBjaGFuZ2VTdGVwOiBmdW5jdGlvbihpZCkge1xuXG4gICAgICAgIC8vIEdldCB0aGUgc3RlcCB0byBhZGRcbiAgICAgICAgdmFyIHN0ZXBUb0FkZCA9IFwic2VxLXN0ZXBcIiArIGlkO1xuXG4gICAgICAgIC8vIEFkZCB0aGUgbmV3IHN0ZXAgYW5kIHJlbW92ZSB0aGUgcHJldmlvdXNcbiAgICAgICAgaWYgKHNlbGYuY3VycmVudFN0ZXBJZCAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICB2YXIgc3RlcFRvUmVtb3ZlID0gXCJzZXEtc3RlcFwiICsgc2VsZi5jdXJyZW50U3RlcElkO1xuXG4gICAgICAgICAgYWRkQ2xhc3Moc2VsZi4kY29udGFpbmVyLCBzdGVwVG9BZGQpO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHNlbGYuJGNvbnRhaW5lciwgc3RlcFRvUmVtb3ZlKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgIGFkZENsYXNzKHNlbGYuJGNvbnRhaW5lciwgc3RlcFRvQWRkKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBcHBseSB0aGUgcmV2ZXJzZWQgcHJvcGVydGllcyB0byBhbGwgYW5pbWF0YWJsZSBlbGVtZW50cyB3aXRoaW4gYSBwaGFzZVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwaGFzZVByb3BlcnRpZXMgLSBQcm9wZXJ0aWVzIHJlbGF0aW5nIHRvIHRoZSBhY3RpdmUgcGhhc2VzXG4gICAgICAgKiAoc2VxLWluIGFuZCBzZXEtb3V0KVxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBoYXNlRGVsYXkgLSBBIGRlbGF5IHRoYXQgaXMgYWRkZWQgd2hlbiBvbmUgcGhhc2VcbiAgICAgICAqIGFuaW1hdGVzIGxvbmdlciB0aGFuIHRoZSBvdGhlclxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBoYXNlVGhyZXNob2xkVGltZSAtIFRoZSBhbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAqIGJlZm9yZSB0aGUgbmV4dCBzdGVwIHNob3VsZCBzdGFydCBhbmltYXRpbmcgaW5cbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaWdub3JlUGhhc2VUaHJlc2hvbGQgLSBpZiB0cnVlLCBpZ25vcmUgdGhlIHRocmVzaG9sZFxuICAgICAgICogYmV0d2VlbiBwaGFzZXMgKGJyZWFrcyByZXZlcnNhbCBvZiBhbmltYXRpb25zIGJ1dCBtYXkgYmUgdXNlZCB3aGVuXG4gICAgICAgKiBza2lwcGluZyBuYXZpZ2F0aW9uIGV0YylcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IG1heFdhdGNoZWRUb3RhbCAtIFRoZSBuZXcgdG90YWwgbGVuZ3RoXG4gICAgICAgKiAoZHVyYXRpb24gKyBkZWxheSkgZm9yIHdhdGNoZWQgZWxlbWVudHMgd2hlbiByZXZlcnNlZFxuICAgICAgICovXG4gICAgICByZXZlcnNlUHJvcGVydGllczogZnVuY3Rpb24ocGhhc2VQcm9wZXJ0aWVzLCBwaGFzZURlbGF5LCBwaGFzZVRocmVzaG9sZFRpbWUsIGlnbm9yZVBoYXNlVGhyZXNob2xkLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgICAgICBwaGFzZUVsZW1lbnRzID0gcGhhc2VQcm9wZXJ0aWVzLmNoaWxkcmVuLFxuICAgICAgICAgICAgbm9PZlBoYXNlRWxlbWVudHMgPSBwaGFzZUVsZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIHN0ZXBEdXJhdGlvbnMgPSBwaGFzZVByb3BlcnRpZXMudGltaW5ncyxcbiAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHRpbWluZ0Z1bmN0aW9uID0gJycsXG4gICAgICAgICAgICB0aW1pbmdGdW5jdGlvblJldmVyc2VkID0gJycsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgdG90YWwsXG4gICAgICAgICAgICBtYXhUb3RhbCxcbiAgICAgICAgICAgIG1heFdhdGNoZWRUb3RhbCxcbiAgICAgICAgICAgIHRvdGFscyA9IFtdLFxuICAgICAgICAgICAgd2F0Y2hlZFRvdGFscyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBub09mUGhhc2VFbGVtZW50czsgaSsrKSB7XG4gICAgICAgICAgZWwgPSBwaGFzZUVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgLy8gR2V0IGVhY2ggZWxlbWVudCdzIGR1cmF0aW9uIGFuZCBkZWxheVxuICAgICAgICAgIGR1cmF0aW9uID0gY29udmVydFRpbWVUb01zKGdldFN0eWxlKGVsLCBNb2Rlcm5penIucHJlZml4ZWQoXCJ0cmFuc2l0aW9uRHVyYXRpb25cIikpKTtcbiAgICAgICAgICBkZWxheSA9IGNvbnZlcnRUaW1lVG9NcyhnZXRTdHlsZShlbCwgTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvbkRlbGF5XCIpKSk7XG5cbiAgICAgICAgICAvLyBTYXZlIHRoZSB0b3RhbFxuICAgICAgICAgIHRvdGFsID0gZHVyYXRpb24gKyBkZWxheTtcblxuICAgICAgICAgIC8vIERlbGF5IGVsZW1lbnRzIGluIHJlbGF0aW9uIHRvIHRoZSBsZW5ndGggb2Ygb3RoZXIgZWxlbWVudHMgaW4gdGhlXG4gICAgICAgICAgLy8gcGhhc2UgZWcuIElmIG9uZSBlbGVtZW50IEEgdHJhbnNpdGlvbnMgZm9yIDFzIGFuZCBlbGVtZW50IEIgMnNcbiAgICAgICAgICAvLyBlbGVtZW50IEEgc2hvdWxkIGJlIGRlbGF5ZWQgYnkgMXMgKGVsZW1lbnQgQiBsZW5ndGggLSBlbGVtZW50IEEgbGVuZ3RoKS5cbiAgICAgICAgICBkZWxheSA9IHN0ZXBEdXJhdGlvbnMubWF4VG90YWwgLSB0b3RhbDtcblxuICAgICAgICAgIC8vIERlbGF5IHRoaXMgcGhhc2UncyBlbGVtZW50cyBzbyB0aGV5IGFuaW1hdGUgaW4gcmVsYXRpb24gdG8gdGhlXG4gICAgICAgICAgLy8gb3RoZXIgcGhhc2VcbiAgICAgICAgICBpZiAoaWdub3JlUGhhc2VUaHJlc2hvbGQgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGRlbGF5ICs9IHBoYXNlRGVsYXk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSB0b3RhbCB3aXRoIHRoZSBuZXcgZGVsYXlcbiAgICAgICAgICB0b3RhbCA9IGR1cmF0aW9uICsgZGVsYXk7XG5cbiAgICAgICAgICAvLyBTYXZlIHRoZSB0b3RhbCBvZiB0aGUgcmV2ZXJzZWQgYW5pbWF0aW9uXG4gICAgICAgICAgdG90YWxzLnB1c2godG90YWwpO1xuXG4gICAgICAgICAgLy8gU2F2ZSB0aGUgdG90YWwgb2YgdGhlIHJldmVyc2VkIGFuaW1hdGlvbiBmb3Igd2F0Y2hlZCBlbGVtZW50cyBvbmx5XG4gICAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZShcImRhdGEtc2VxXCIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3YXRjaGVkVG90YWxzLnB1c2godG90YWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEdldCB0aGUgdGltaW5nLWZ1bmN0aW9uIGFuZCByZXZlcnNlIGl0XG4gICAgICAgICAgaWYgKG9wdGlvbnMucmV2ZXJzZVRpbWluZ0Z1bmN0aW9uV2hlbk5hdmlnYXRpbmdCYWNrd2FyZHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRpbWluZ0Z1bmN0aW9uID0gZ2V0U3R5bGUoZWwsIE1vZGVybml6ci5wcmVmaXhlZChcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiKSk7XG4gICAgICAgICAgICB0aW1pbmdGdW5jdGlvblJldmVyc2VkID0gYW5pbWF0aW9uLnJldmVyc2VUaW1pbmdGdW5jdGlvbih0aW1pbmdGdW5jdGlvbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQXBwbHkgdGhlIHJldmVyc2VkIHRyYW5zaXRpb24gcHJvcGVydGllcyB0byBlYWNoIGVsZW1lbnRcbiAgICAgICAgICBlbC5zdHlsZVtNb2Rlcm5penIucHJlZml4ZWQoXCJ0cmFuc2l0aW9uXCIpXSA9IGR1cmF0aW9uICsgXCJtcyBcIiArIGRlbGF5ICsgXCJtcyBcIiArIHRpbWluZ0Z1bmN0aW9uUmV2ZXJzZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGxvbmdlc3QgdG90YWwgYW5kIGRlbGF5IG9mIHRoZSByZXZlcnNlZCBhbmltYXRpb25zXG4gICAgICAgIG1heFRvdGFsID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgdG90YWxzKTtcblxuICAgICAgICAvLyBHZXQgdGhlIGxvbmdlc3QgdG90YWwgYW5kIGRlbGF5IG9mIHRoZSByZXZlcnNlZCBhbmltYXRpb25zIChmb3JcbiAgICAgICAgLy8gd2F0Y2hlZCBlbGVtZW50cyBvbmx5KVxuICAgICAgICBtYXhXYXRjaGVkVG90YWwgPSBNYXRoLm1heC5hcHBseShNYXRoLCB3YXRjaGVkVG90YWxzKTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHJldmVyc2VkIHRyYW5zaXRpb24gcHJvcGVydGllcyBmcm9tIGVhY2ggZWxlbWVudCBvbmNlIGl0XG4gICAgICAgIC8vIGhhcyBmaW5pc2hlZCBhbmltYXRpbmc7IGFsbG93aW5nIGZvciB0aGUgaW5oZXJpdGVkIHN0eWxlcyB0byB0YWtlXG4gICAgICAgIC8vIGVmZmVjdCBhZ2Fpbi5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBhbmltYXRpb24uZG9tRGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9PZlBoYXNlRWxlbWVudHM7IGkrKykge1xuICAgICAgICAgICAgICBlbCA9IHBoYXNlRWxlbWVudHNbaV07XG5cbiAgICAgICAgICAgICAgZWwuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvblwiKV0gPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBtYXhUb3RhbCArIHBoYXNlVGhyZXNob2xkVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIG1heFdhdGNoZWRUb3RhbDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogR28gZm9yd2FyZCB0byB0aGUgbmV4dCBzdGVwXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIElEIG9mIHRoZSBuZXh0IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7SFRNTE9iamVjdH0gY3VycmVudFN0ZXBFbGVtZW50IC0gVGhlIGVsZW1lbnQgZm9yIHRoZSBjdXJyZW50IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7SFRNTE9iamVjdH0gbmV4dFN0ZXBFbGVtZW50IC0gVGhlIGVsZW1lbnQgZm9yIHRoZSBuZXh0IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaWdub3JlUGhhc2VUaHJlc2hvbGQgLSBpZiB0cnVlLCBpZ25vcmUgdGhlXG4gICAgICAgKiB0cmFuc2l0aW9uVGhyZXNob2xkIHNldHRpbmcgYW5kIGltbWVkaWF0ZWx5IGdvIHRvIHRoZSBzcGVjaWZpZWQgc3RlcFxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBoYXNoVGFnTmF2IC0gSWYgbmF2aWdhdGlvbiBpcyB0cmlnZ2VyZWQgYnkgdGhlIGhhc2hUYWdcbiAgICAgICAqL1xuICAgICAgZm9yd2FyZDogZnVuY3Rpb24oaWQsIGN1cnJlbnRTdGVwRWxlbWVudCwgbmV4dFN0ZXBFbGVtZW50LCBpZ25vcmVQaGFzZVRocmVzaG9sZCwgaGFzaFRhZ05hdikge1xuXG4gICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudFBoYXNlUHJvcGVydGllcyxcbiAgICAgICAgICAgIGN1cnJlbnRQaGFzZVRvdGFsLFxuICAgICAgICAgICAgcGhhc2VUaHJlc2hvbGRUaW1lO1xuXG4gICAgICAgIGlmIChzZWxmLmZpcnN0UnVuID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgLy8gQ2FsbGJhY2tcbiAgICAgICAgICBhbmltYXRpb24uY3VycmVudFBoYXNlU3RhcnRlZChzZWxmLmN1cnJlbnRTdGVwSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU25hcCB0aGUgc3RlcCB0byB0aGUgXCJhbmltYXRlLXN0YXJ0XCIgcGhhc2VcbiAgICAgICAgcmVtb3ZlQ2xhc3MobmV4dFN0ZXBFbGVtZW50LCBcInNlcS1vdXRcIik7XG5cbiAgICAgICAgYW5pbWF0aW9uLmRvbURlbGF5KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgLy8gTWFrZSB0aGUgY3VycmVudCBzdGVwIHRyYW5zaXRpb24gdG8gXCJzZXEtb3V0XCJcbiAgICAgICAgICBjdXJyZW50UGhhc2VQcm9wZXJ0aWVzID0gYW5pbWF0aW9uLnN0YXJ0QW5pbWF0ZU91dChzZWxmLmN1cnJlbnRTdGVwSWQsIGN1cnJlbnRTdGVwRWxlbWVudCwgMSk7XG5cbiAgICAgICAgICAvLyBUb3RhbCBkdXJhdGlvbiBvZiB0aGUgY3VycmVudCBwaGFzZSAoZHVyYXRpb24gKyBkZWxheSlcbiAgICAgICAgICBjdXJyZW50UGhhc2VUb3RhbCA9IGN1cnJlbnRQaGFzZVByb3BlcnRpZXMud2F0Y2hlZFRpbWluZ3MubWF4VG90YWw7XG5cbiAgICAgICAgICAvLyBIb3cgbG9uZyBiZWZvcmUgdGhlIG5leHQgcGhhc2Ugc2hvdWxkIHN0YXJ0P1xuICAgICAgICAgIHBoYXNlVGhyZXNob2xkVGltZSA9IGFuaW1hdGlvbi5nZXRQaGFzZVRocmVzaG9sZChpZ25vcmVQaGFzZVRocmVzaG9sZCwgc2VsZi5vcHRpb25zLnBoYXNlVGhyZXNob2xkLCBzZWxmLmlzQW5pbWF0aW5nLCBjdXJyZW50UGhhc2VUb3RhbCk7XG5cbiAgICAgICAgICAvLyBTZXF1ZW5jZSBpcyBub3cgYW5pbWF0aW5nXG4gICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgICAvLyBNYWtlIHRoZSBuZXh0IHN0ZXAgdHJhbnNpdGlvbiB0byBcInNlcS1pblwiXG4gICAgICAgICAgYW5pbWF0aW9uLnN0YXJ0QW5pbWF0ZUluKGlkLCBjdXJyZW50UGhhc2VUb3RhbCwgbmV4dFN0ZXBFbGVtZW50LCBwaGFzZVRocmVzaG9sZFRpbWUsIGhhc2hUYWdOYXYpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogTmF2aWdhdGUgaW4gcmV2ZXJzZSB0byB0aGUgbmV4dCBzdGVwXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIElEIG9mIHRoZSBuZXh0IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7SFRNTE9iamVjdH0gY3VycmVudFN0ZXBFbGVtZW50IC0gVGhlIGVsZW1lbnQgZm9yIHRoZSBjdXJyZW50IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7SFRNTE9iamVjdH0gbmV4dFN0ZXBFbGVtZW50IC0gVGhlIGVsZW1lbnQgZm9yIHRoZSBuZXh0IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaWdub3JlUGhhc2VUaHJlc2hvbGQgLSBpZiB0cnVlLCBpZ25vcmUgdGhlXG4gICAgICAgKiB0cmFuc2l0aW9uVGhyZXNob2xkIHNldHRpbmcgYW5kIGltbWVkaWF0ZWx5IGdvIHRvIHRoZSBzcGVjaWZpZWQgc3RlcFxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBoYXNoVGFnTmF2IC0gSWYgbmF2aWdhdGlvbiBpcyB0cmlnZ2VyZWQgYnkgdGhlIGhhc2hUYWdcbiAgICAgICAqL1xuICAgICAgcmV2ZXJzZTogZnVuY3Rpb24oaWQsIGN1cnJlbnRTdGVwRWxlbWVudCwgbmV4dFN0ZXBFbGVtZW50LCBpZ25vcmVQaGFzZVRocmVzaG9sZCwgaGFzaFRhZ05hdikge1xuXG4gICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudElkLFxuICAgICAgICAgICAgcmV2ZXJzZVBoYXNlRGVsYXksXG4gICAgICAgICAgICBwaGFzZVRocmVzaG9sZFRpbWUgPSAwLFxuICAgICAgICAgICAgY3VycmVudFBoYXNlUHJvcGVydGllcyxcbiAgICAgICAgICAgIG5leHRQaGFzZVByb3BlcnRpZXMsXG4gICAgICAgICAgICBjdXJyZW50UGhhc2VUb3RhbCxcbiAgICAgICAgICAgIG5leHRQaGFzZVRvdGFsO1xuXG4gICAgICAgIC8vIFNuYXAgdGhlIG5leHQgcGhhc2UgdG8gXCJhbmltYXRlLW91dFwiXG4gICAgICAgIGFkZENsYXNzKG5leHRTdGVwRWxlbWVudCwgXCJzZXEtb3V0XCIpO1xuXG4gICAgICAgIGFuaW1hdGlvbi5kb21EZWxheShmdW5jdGlvbigpIHtcblxuICAgICAgICAgIC8vIEdldCB0aGUgc3RlcCBudW1iZXIsIGVsZW1lbnQsIGl0cyBhbmltYXRlZCBlbGVtZW50cyAoY2hpbGQgbm9kZXMpLFxuICAgICAgICAgIC8vIGFuZCBtYXggdGltaW5nc1xuICAgICAgICAgIGN1cnJlbnRQaGFzZVByb3BlcnRpZXMgPSBhbmltYXRpb24uZ2V0UGhhc2VQcm9wZXJ0aWVzKHNlbGYuY3VycmVudFN0ZXBJZCwgXCJjdXJyZW50XCIpO1xuICAgICAgICAgIG5leHRQaGFzZVByb3BlcnRpZXMgPSBhbmltYXRpb24uZ2V0UGhhc2VQcm9wZXJ0aWVzKGlkLCBcIm5leHRcIik7XG5cbiAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGdhcCBiZXR3ZWVuIHBoYXNlcyBiYXNlZCBvbiB0aGUgcGhhc2VUaHJlc2hvbGQgb3B0aW9uXG4gICAgICAgICAgcGhhc2VUaHJlc2hvbGRUaW1lID0gYW5pbWF0aW9uLmdldFBoYXNlVGhyZXNob2xkKGlnbm9yZVBoYXNlVGhyZXNob2xkLCBzZWxmLm9wdGlvbnMucGhhc2VUaHJlc2hvbGQsIHNlbGYuaXNBbmltYXRpbmcsIGN1cnJlbnRQaGFzZVByb3BlcnRpZXMudGltaW5ncy5tYXhUb3RhbCk7XG5cbiAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlcmUgc2hvdWxkIGJlIGEgZGVsYXkgdG8gYWNjb3VudCBmb3Igb25lIHBoYXNlXG4gICAgICAgICAgLy8gZmluaXNoaW5nIGJlZm9yZSB0aGUgb3RoZXIuXG4gICAgICAgICAgLy8gRXhhbXBsZTogTmF2aWdhdGluZyBmb3J3YXJkLCB0aGUgbmV4dCBlbGVtZW50IHRyYW5zaXRpb25zIGluIG92ZXJcbiAgICAgICAgICAvLyAxcyAoQSkgYW5kIHRoZSBjdXJyZW50IGVsZW1lbnQgb3ZlciAycyAoQikuIFdoZW4gcmV2ZXJzZWQsIHRoZSBuZXh0XG4gICAgICAgICAgLy8gZWxlbWVudCAocHJldmlvdWx5IHRoZSBjdXJyZW50IGVsZW1lbnQpIHNob3VsZCB3YWl0IDFzIChCIC0gQSlcbiAgICAgICAgICAvLyBiZWZvcmUgYW5pbWF0aW5nIGJhY2sgaW5cbiAgICAgICAgICByZXZlcnNlUGhhc2VEZWxheSA9IGFuaW1hdGlvbi5nZXRSZXZlcnNlUGhhc2VEZWxheShjdXJyZW50UGhhc2VQcm9wZXJ0aWVzLnRpbWluZ3MubWF4VG90YWwsIG5leHRQaGFzZVByb3BlcnRpZXMudGltaW5ncy5tYXhUb3RhbCwgc2VsZi5vcHRpb25zLnBoYXNlVGhyZXNob2xkLCBzZWxmLm9wdGlvbnMuaWdub3JlUGhhc2VUaHJlc2hvbGRXaGVuU2tpcHBlZCwgc2VsZi5pc0FuaW1hdGluZyk7XG5cbiAgICAgICAgICAvLyBSZXZlcnNlIHByb3BlcnRpZXMgZm9yIGFsbCBlbGVtZW50cyBpbiB0aGUgY3VycmVudCBhbmQgbmV4dCBzdGVwXG4gICAgICAgICAgLy8gYW5kIGFkZCB0aGUgcmV2ZXJzZVBoYXNlRGVsYXkgYXMgYSB0cmFuc2l0aW9uLWRlbGF5IHdoZXJlIG5lY2Vzc2FyeVxuICAgICAgICAgIGN1cnJlbnRQaGFzZVRvdGFsID0gYW5pbWF0aW9uLnJldmVyc2VQcm9wZXJ0aWVzKGN1cnJlbnRQaGFzZVByb3BlcnRpZXMsIHJldmVyc2VQaGFzZURlbGF5LmN1cnJlbnQsIDAsIGlnbm9yZVBoYXNlVGhyZXNob2xkLCBzZWxmLm9wdGlvbnMpO1xuICAgICAgICAgIG5leHRQaGFzZVRvdGFsID0gYW5pbWF0aW9uLnJldmVyc2VQcm9wZXJ0aWVzKG5leHRQaGFzZVByb3BlcnRpZXMsIHJldmVyc2VQaGFzZURlbGF5Lm5leHQsIHBoYXNlVGhyZXNob2xkVGltZSwgaWdub3JlUGhhc2VUaHJlc2hvbGQsIHNlbGYub3B0aW9ucyk7XG5cbiAgICAgICAgICAvLyBNYWtlIHRoZSBjdXJyZW50IHN0ZXAgdHJhbnNpdGlvbiB0byBcImFuaW1hdGUtc3RhcnRcIlxuICAgICAgICAgIGFuaW1hdGlvbi5zdGFydEFuaW1hdGVPdXQoc2VsZi5jdXJyZW50U3RlcElkLCBjdXJyZW50U3RlcEVsZW1lbnQsIC0xLCBjdXJyZW50UGhhc2VUb3RhbCk7XG5cbiAgICAgICAgICAvLyBTZXF1ZW5jZSBpcyBub3cgYW5pbWF0aW5nXG4gICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc2VsZi5maXJzdFJ1biA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgLy8gQ2FsbGJhY2tzXG4gICAgICAgICAgICBhbmltYXRpb24uY3VycmVudFBoYXNlU3RhcnRlZChzZWxmLmN1cnJlbnRTdGVwSWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE1ha2UgdGhlIG5leHQgc3RlcCB0cmFuc2l0aW9uIHRvIFwic2VxLWluXCJcbiAgICAgICAgICBhbmltYXRpb24uc3RhcnRBbmltYXRlSW4oaWQsIGN1cnJlbnRQaGFzZVRvdGFsLCBuZXh0U3RlcEVsZW1lbnQsIHBoYXNlVGhyZXNob2xkVGltZSwgaGFzaFRhZ05hdiwgbmV4dFBoYXNlVG90YWwpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhcnQgdGhlIG5leHQgc3RlcCdzIFwic2VxLWluXCIgcGhhc2VcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgSUQgb2YgdGhlIG5leHQgc3RlcFxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRQaGFzZVRvdGFsIC0gQW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRoZVxuICAgICAgICogY3VycmVudCBwaGFzZSB3aWxsIGFuaW1hdGUgZm9yXG4gICAgICAgKiBAcGFyYW0ge0hUTUxPYmplY3R9IG5leHRTdGVwRWxlbWVudCAtIFRoZSBlbGVtZW50IGZvciB0aGUgbmV4dCBzdGVwXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gcGhhc2VUaHJlc2hvbGRUaW1lIC0gVGhlIGFtb3VudCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICogYmVmb3JlIHRoZSBuZXh0IHN0ZXAgc2hvdWxkIHN0YXJ0IGFuaW1hdGluZyBpblxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBoYXNoVGFnTmF2IC0gSWYgbmF2aWdhdGlvbiBpcyB0cmlnZ2VyZWQgYnkgdGhlIGhhc2hUYWdcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuZXh0UGhhc2VUb3RhbCAtIEFtb3VudCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kcyB0aGVcbiAgICAgICAqIG5leHQgcGhhc2Ugd2lsbCBhbmltYXRlIGZvclxuICAgICAgICovXG4gICAgICBzdGFydEFuaW1hdGVJbjogZnVuY3Rpb24oaWQsIGN1cnJlbnRQaGFzZVRvdGFsLCBuZXh0U3RlcEVsZW1lbnQsIHBoYXNlVGhyZXNob2xkVGltZSwgaGFzaFRhZ05hdiwgbmV4dFBoYXNlVG90YWwpIHtcblxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgICAgIG5leHRQaGFzZVByb3BlcnRpZXMsXG4gICAgICAgICAgICBzdGVwRHVyYXRpb247XG5cbiAgICAgICAgLy8gVGhlIG5leHQgSUQgaXMgbm93IHRoZSBjdXJyZW50IElEXG4gICAgICAgIHNlbGYucHJldlN0ZXBJZCA9IHNlbGYuY3VycmVudFN0ZXBJZDtcbiAgICAgICAgc2VsZi5jdXJyZW50U3RlcElkID0gaWQ7XG5cbiAgICAgICAgaWYgKHNlbGYuZmlyc3RSdW4gPT09IHRydWUpIHtcbiAgICAgICAgICAvLyBVcGRhdGUgcGFnaW5hdGlvblxuICAgICAgICAgIHNlbGYucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gc2hvdWxkIHRoZSBcInNlcS1pblwiIHBoYXNlIHN0YXJ0IGFuZCBob3cgbG9uZyB1bnRpbCB0aGUgc3RlcFxuICAgICAgICAvLyBjb21wbGV0ZWx5IGZpbmlzaGVzIGFuaW1hdGluZz9cbiAgICAgICAgaWYgKHNlbGYuZmlyc3RSdW4gPT09IGZhbHNlIHx8IHNlbGYub3B0aW9ucy5zdGFydGluZ1N0ZXBBbmltYXRlc0luID09PSB0cnVlKSB7XG5cbiAgICAgICAgICBzZWxmLnN0ZXBQcm9wZXJ0aWVzW2lkXS5pc0FjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgIHNlbGYubmV4dFBoYXNlU3RhcnRlZFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5uZXh0UGhhc2VTdGFydGVkKGlkLCBoYXNoVGFnTmF2KTtcbiAgICAgICAgICB9LCBwaGFzZVRocmVzaG9sZFRpbWUpO1xuXG4gICAgICAgICAgLy8gU3RhcnQgdGhlIFwic2VxLWluXCIgcGhhc2VcbiAgICAgICAgICBzZWxmLnBoYXNlVGhyZXNob2xkVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBDaGFuZ2UgbXVsdGlwbGUgY2xhc3NlcyB2aWEgb25lIGZ1bmN0aW9uXG4gICAgICAgICAgICBhZGRDbGFzcyhuZXh0U3RlcEVsZW1lbnQsIFwic2VxLWluXCIpO1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MobmV4dFN0ZXBFbGVtZW50LCBcInNlcS1vdXRcIik7XG5cbiAgICAgICAgICAgIC8vIFdoZW4gYW5pbWF0ZS1pbiBpcyByZXZlcnNlZCwgdGhpcyB3aWxsIGhhdmUgYWxyZWFkeSBiZWVuIHBhc3NlZFxuICAgICAgICAgICAgLy8gaW4gYXMgYW4gYXJndW1lbnQgc28gaXQncyBvbmx5IG5lZWRlZCBmb3IgZm9yd2FyZCBhbmltYXRpb25cbiAgICAgICAgICAgIGlmIChuZXh0UGhhc2VUb3RhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIG5leHRQaGFzZVByb3BlcnRpZXMgPSBzZWxmLmFuaW1hdGlvbi5nZXRQaGFzZVByb3BlcnRpZXMoaWQsIFwibmV4dFwiKTtcbiAgICAgICAgICAgICAgbmV4dFBoYXNlVG90YWwgPSBuZXh0UGhhc2VQcm9wZXJ0aWVzLndhdGNoZWRUaW1pbmdzLm1heFRvdGFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgbmV4dCBwaGFzZSB0byBlbmRcbiAgICAgICAgICAgIGFuaW1hdGlvbi5waGFzZUVuZGVkKGlkLCBcIm5leHRcIiwgbmV4dFBoYXNlVG90YWwsIGFuaW1hdGlvbi5uZXh0UGhhc2VFbmRlZCk7XG5cbiAgICAgICAgICAgIC8vIEhvdyBsb25nIHdpbGwgaXQgdGFrZSBmb3IgdGhlIHN0ZXAgdG8gZW5kP1xuICAgICAgICAgICAgc3RlcER1cmF0aW9uID0gYW5pbWF0aW9uLmdldFN0ZXBEdXJhdGlvbihjdXJyZW50UGhhc2VUb3RhbCwgbmV4dFBoYXNlVG90YWwsIHNlbGYub3B0aW9ucy5waGFzZVRocmVzaG9sZCk7XG5cbiAgICAgICAgICAgIHNlbGYuc3RlcEVuZGVkVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgIHNlbGYuYW5pbWF0aW9uLnN0ZXBFbmRlZChpZCk7XG4gICAgICAgICAgICB9LCBzdGVwRHVyYXRpb24pO1xuXG4gICAgICAgICAgfSwgcGhhc2VUaHJlc2hvbGRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHJ1bi4gU25hcCB0aGUgZmlyc3Qgc3RlcCBpbnRvIHBsYWNlIHdpdGhvdXQgYW5pbWF0aW9uXG4gICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgLy8gU2V0IHRoZSBmaXJzdCBzdGVwJ3Mgc3BlZWQgdG8gMCB0byBoYXZlIGl0IGltbWVkaWF0ZWx5IHNuYXAgaW50byBwbGFjZVxuICAgICAgICAgIGFuaW1hdGlvbi5yZXNldEluaGVyaXRlZFNwZWVkKGlkKTtcblxuICAgICAgICAgIHNlbGYucGhhc2VzQW5pbWF0aW5nID0gMDtcbiAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmF1dG9QbGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzZWxmLmF1dG9QbGF5LnN0YXJ0KHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFkZENsYXNzKG5leHRTdGVwRWxlbWVudCwgXCJzZXEtaW5cIik7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MobmV4dFN0ZXBFbGVtZW50LCBcInNlcS1vdXRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmZpcnN0UnVuID0gZmFsc2U7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFN0YXJ0IHRoZSBuZXh0IHN0ZXAncyBcInNlcS1vdXRcIiBwaGFzZVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZCAtIFRoZSBJRCBvZiB0aGUgbmV4dCBzdGVwXG4gICAgICAgKiBAcGFyYW0ge0hUTUxPYmplY3R9IGN1cnJlbnRTdGVwRWxlbWVudCAtIFRoZSBlbGVtZW50IGZvciB0aGUgY3VycmVudCBzdGVwXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiBvZiBuYXZpZ2F0aW9uXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFBoYXNlVG90YWwgLSBBbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhlXG4gICAgICAgKiBjdXJyZW50IHBoYXNlIHdpbGwgYW5pbWF0ZSBmb3JcbiAgICAgICAqL1xuICAgICAgc3RhcnRBbmltYXRlT3V0OiBmdW5jdGlvbihpZCwgY3VycmVudFN0ZXBFbGVtZW50LCBkaXJlY3Rpb24sIGN1cnJlbnRQaGFzZVRvdGFsKSB7XG5cbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgIGN1cnJlbnRQaGFzZVByb3BlcnRpZXM7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMSkge1xuXG4gICAgICAgICAgLy8gVE9ETzogQ2hhbmdlIG11bHRpcGxlIGNsYXNzZXMgdmlhIG9uZSBmdW5jdGlvblxuICAgICAgICAgIC8vIE1ha2UgdGhlIGN1cnJlbnQgc3RlcCB0cmFuc2l0aW9uIHRvIFwiYW5pbWF0ZS1vdXRcIlxuICAgICAgICAgIHJlbW92ZUNsYXNzKGN1cnJlbnRTdGVwRWxlbWVudCwgXCJzZXEtaW5cIik7XG4gICAgICAgICAgYWRkQ2xhc3MoY3VycmVudFN0ZXBFbGVtZW50LCBcInNlcS1vdXRcIik7XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIHN0ZXAgbnVtYmVyLCBlbGVtZW50LCBpdHMgYW5pbWF0ZWQgZWxlbWVudHMgKGNoaWxkIG5vZGVzKSwgYW5kXG4gICAgICAgICAgLy8gbWF4IHRpbWluZ3NcbiAgICAgICAgICBjdXJyZW50UGhhc2VQcm9wZXJ0aWVzID0gYW5pbWF0aW9uLmdldFBoYXNlUHJvcGVydGllcyhpZCwgXCJjdXJyZW50XCIpO1xuXG4gICAgICAgICAgY3VycmVudFBoYXNlVG90YWwgPSBjdXJyZW50UGhhc2VQcm9wZXJ0aWVzLndhdGNoZWRUaW1pbmdzLm1heFRvdGFsO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAvLyBNYWtlIHRoZSBjdXJyZW50IHN0ZXAgdHJhbnNpdGlvbiB0byBcImFuaW1hdGUtc3RhcnRcIlxuICAgICAgICAgIHJlbW92ZUNsYXNzKGN1cnJlbnRTdGVwRWxlbWVudCwgXCJzZXEtaW5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5maXJzdFJ1biA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgc3RlcHMgdG8gdGhlIGxpc3Qgb2YgYWN0aXZlIHN0ZXBzXG4gICAgICAgICAgc2VsZi5zdGVwUHJvcGVydGllc1tpZF0uaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGN1cnJlbnQgcGhhc2UgdG8gZW5kXG4gICAgICAgICAgYW5pbWF0aW9uLnBoYXNlRW5kZWQoaWQsIFwiY3VycmVudFwiLCBjdXJyZW50UGhhc2VUb3RhbCwgYW5pbWF0aW9uLmN1cnJlbnRQaGFzZUVuZGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50UGhhc2VQcm9wZXJ0aWVzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlcm1pbmUgaG93IGxvbmcgYSBzdGVwIHdpbGwgYW5pbWF0ZSBmb3JcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFBoYXNlVG90YWwgLSBBbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhlXG4gICAgICAgKiBjdXJyZW50IHBoYXNlIHdpbGwgYW5pbWF0ZSBmb3JcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuZXh0UGhhc2VUb3RhbCAtIEFtb3VudCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kcyB0aGVcbiAgICAgICAqIG5leHQgcGhhc2Ugd2lsbCBhbmltYXRlIGZvclxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ8Qm9vbGVhbn0gcGhhc2VUaHJlc2hvbGRPcHRpb24gLSBBbW91bnQgb2YgdGltZSBiZXR3ZWVuXG4gICAgICAgKiBwaGFzZXMgYXMgZGVmaW5lZCB2aWEgdGhlIHBoYXNlVGhyZXNob2xkIG9wdGlvblxuICAgICAgICogQHJldHVybnMge051bWJlcn0gc3RlcER1cmF0aW9uIC0gV2hpY2ggZXZlciBpcyBsb25nZXN0LCBjdXJyZW50IG9yIG5leHRcbiAgICAgICAqIHBoYXNlIGR1cmF0aW9uXG4gICAgICAgKi9cbiAgICAgIGdldFN0ZXBEdXJhdGlvbjogZnVuY3Rpb24oY3VycmVudFBoYXNlVG90YWwsIG5leHRQaGFzZVRvdGFsLCBwaGFzZVRocmVzaG9sZE9wdGlvbikge1xuXG4gICAgICAgIHZhciBzdGVwRHVyYXRpb247XG5cbiAgICAgICAgc3dpdGNoIChwaGFzZVRocmVzaG9sZE9wdGlvbikge1xuICAgICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICAgIHN0ZXBEdXJhdGlvbiA9IG5leHRQaGFzZVRvdGFsO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgIC8vIFRoZSBzdGVwRHVyYXRpb24gaXMgd2hpY2hldmVyIHBoYXNlIGlzIGxvbmdlc3RcbiAgICAgICAgICAgIHN0ZXBEdXJhdGlvbiA9IChjdXJyZW50UGhhc2VUb3RhbCA+PSBuZXh0UGhhc2VUb3RhbCkgPyBjdXJyZW50UGhhc2VUb3RhbCA6IG5leHRQaGFzZVRvdGFsO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHN0ZXBEdXJhdGlvbiA9IChjdXJyZW50UGhhc2VUb3RhbCA+PSBuZXh0UGhhc2VUb3RhbCArIHBoYXNlVGhyZXNob2xkT3B0aW9uKSA/IChjdXJyZW50UGhhc2VUb3RhbCkgLSBwaGFzZVRocmVzaG9sZE9wdGlvbiA6IG5leHRQaGFzZVRvdGFsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0ZXBEdXJhdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB0aGUgY3VycmVudCBwaGFzZSBzdGFydHMgYW5pbWF0aW5nXG4gICAgICAgKi9cbiAgICAgIGN1cnJlbnRQaGFzZVN0YXJ0ZWQ6IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICAgICAgc2VsZi5waGFzZXNBbmltYXRpbmcrKztcblxuICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICBzZWxmLmN1cnJlbnRQaGFzZVN0YXJ0ZWQoaWQsIHNlbGYpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHRoZSBjdXJyZW50IHBoYXNlIGZpbmlzaGVzIGFuaW1hdGluZ1xuICAgICAgICovXG4gICAgICBjdXJyZW50UGhhc2VFbmRlZDogZnVuY3Rpb24oaWQpIHtcblxuICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICBzZWxmLmN1cnJlbnRQaGFzZUVuZGVkKGlkLCBzZWxmKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB0aGUgbmV4dCBwaGFzZSBzdGFydHMgYW5pbWF0aW5nXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBoYXNoVGFnTmF2IC0gSWYgbmF2aWdhdGlvbiBpcyB0cmlnZ2VyZWQgYnkgdGhlIGhhc2hUYWdcbiAgICAgICAqL1xuICAgICAgbmV4dFBoYXNlU3RhcnRlZDogZnVuY3Rpb24oaWQsIGhhc2hUYWdOYXYpIHtcblxuICAgICAgICBzZWxmLnBoYXNlc0FuaW1hdGluZysrO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaFRhZyBpZiBiZWluZyB1c2VkXG4gICAgICAgIGlmIChoYXNoVGFnTmF2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxmLmhhc2hUYWdzLnVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHBhZ2luYXRpb25cbiAgICAgICAgc2VsZi5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuXG4gICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgIHNlbGYubmV4dFBoYXNlU3RhcnRlZChpZCwgc2VsZik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdGhlIG5leHQgcGhhc2UgZmluaXNoZXMgYW5pbWF0aW5nXG4gICAgICAgKi9cbiAgICAgIG5leHRQaGFzZUVuZGVkOiBmdW5jdGlvbihpZCkge1xuXG4gICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgIHNlbGYubmV4dFBoYXNlRW5kZWQoaWQsIHNlbGYpO1xuXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdhaXQgZm9yIGEgcGhhc2VzIChzZXEtaW4gb3Igc2VxLW91dCkgYW5pbWF0aW9ucyB0byBmaW5pc2hcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgaWQgb2YgdGhlIHN0ZXAgdGhlIHBoYXNlIGJlbG9uZ3MgdG9cbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwaGFzZUR1cmF0aW9uIC0gVGhlIGFtb3VudCBvZiB0aW1lIGJlZm9yZSB0aGUgcGhhc2VcbiAgICAgICAqIGVuZHMgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIHBoYXNlIGVuZHNcbiAgICAgICAqL1xuICAgICAgcGhhc2VFbmRlZDogZnVuY3Rpb24oaWQsIHBoYXNlLCBwaGFzZUR1cmF0aW9uLCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICAgICAgcGhhc2VFbmRlZDtcblxuICAgICAgICBwaGFzZUVuZGVkID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICBzZWxmLnN0ZXBQcm9wZXJ0aWVzW2lkXS5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYucGhhc2VzQW5pbWF0aW5nLS07XG5cbiAgICAgICAgICAvLyBQaGFzZSBjYWxsYmFja1xuICAgICAgICAgIGNhbGxiYWNrKGlkKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAocGhhc2UgPT09IFwiY3VycmVudFwiKSB7XG5cbiAgICAgICAgICBzZWxmLmN1cnJlbnRQaGFzZUVuZGVkVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBwaGFzZUVuZGVkKGlkKTtcbiAgICAgICAgICB9LCBwaGFzZUR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIHNlbGYubmV4dFBoYXNlRW5kZWRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHBoYXNlRW5kZWQoaWQpO1xuICAgICAgICAgIH0sIHBoYXNlRHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gYSBzdGVwJ3MgYW5pbWF0aW9ucyBoYXZlIGNvbXBsZXRlbHkgZmluaXNoZWRcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgSUQgb2YgdGhlIHN0ZXAgdGhhdCBlbmRlZFxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBEdXJhdGlvbiAtIFRoZSBhbW91bnQgb2YgdGltZSBiZWZvcmUgdGhlIHN0ZXBcbiAgICAgICAqIGZpbmlzaGVzIGFuaW1hdGluZ1xuICAgICAgICovXG4gICAgICBzdGVwRW5kZWQ6IGZ1bmN0aW9uKGlkKSB7XG5cbiAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5pc0F1dG9QbGF5aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIGF1dG9QbGF5IGlmIGVuYWJsZWRcbiAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmF1dG9QbGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzZWxmLmF1dG9QbGF5LnN0YXJ0KHRydWUsIHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgc2VsZi5hbmltYXRpb25FbmRlZChpZCwgc2VsZik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIENoYW5nZSBcInNlcS1vdXRcIiB0byBcInNlcS1pblwiIGFuZCB2aWNlLXZlcnNhLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwaGFzZSAtIFRoZSBwaGFzZSB0byByZXZlcnNlXG4gICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIFRoZSByZXZlcnNlZCBwaGFzZVxuICAgICAgICovXG4gICAgICByZXZlcnNlUGhhc2U6IGZ1bmN0aW9uKHBoYXNlKSB7XG5cbiAgICAgICAgdmFyIHJldmVyc2VQaGFzZSA9IHtcbiAgICAgICAgICAgIFwic2VxLW91dFwiOiBcInNlcS1pblwiLFxuICAgICAgICAgICAgXCJzZXEtaW5cIjogXCJzZXEtb3V0XCJcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcmV2ZXJzZVBoYXNlW3BoYXNlXTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQXBwbHkgYSBzaG9ydCBkZWxheSB0byBhIGZ1bmN0aW9uIHRoYXQgbWFuaXB1bGF0ZXMgdGhlIERPTS4gQWxsb3dzIGZvclxuICAgICAgICogc2VxdWVudGlhbCBET00gbWFuaXB1bGF0aW9ucy5cbiAgICAgICAqXG4gICAgICAgKiBXaHkgaXMgdGhpcyBuZWVkZWQ/XG4gICAgICAgKlxuICAgICAgICogV2hlbiBzZXF1ZW50aWFsbHkgbWFuaXB1bGF0aW5nIGEgRE9NIGVsZW1lbnQgKGllLCByZW1vdmluZyBhIGNsYXNzIHRoZW5cbiAgICAgICAqIGltbWVkaWF0ZWx5IGFwcGx5aW5nIGFub3RoZXIgb24gdGhlIHNhbWUgZWxlbWVudCksIHRoZSBmaXJzdCBtYW5pcHVsYXRpb25cbiAgICAgICAqIGFwcGVhcnMgbm90IHRvIGFwcGx5LiBUaGlzIGZ1bmN0aW9uIHB1dHMgYSBzbWFsbCBnYXAgYmV0d2VlbiBzZXF1ZW50aWFsXG4gICAgICAgKiBtYW5pcHVsYXRpb25zIHRvIGdpdmUgdGhlIGJyb3dzZXIgYSBjaGFuY2UgdmlzdWFsbHkgYXBwbHkgZWFjaCBtYW5pcHVsYXRpb24uXG4gICAgICAgKlxuICAgICAgICogU29tZSBicm93c2VycyBjYW4gYXBwbHkgYSBzdWNjZXNzaW9uIG9mIGNsYXNzZXMgcXVpY2tlciB0aGFuXG4gICAgICAgKiB0aGlzIGJ1dCA1MG1zIGlzIGVub3VnaCB0byBjYXB0dXJlIGV2ZW4gdGhlIHNsb3dlc3Qgb2YgYnJvd3NlcnMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBhIGZ1bmN0aW9uIHRvIHJ1biBhZnRlciB0aGUgZGVsYXlcbiAgICAgICAqL1xuICAgICAgZG9tRGVsYXk6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9LCBkb21UaHJlc2hvbGQpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXZlcnNlIGEgQ1NTIHRpbWluZyBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aW1pbmdGdW5jdGlvbiAtIFRoZSB0aW1pbmcgZnVuY3Rpb24gdG8gcmV2ZXJzZVxuICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGltaW5nRnVuY3Rpb24gLSBUaGUgcmV2ZXJzZSB0aW1pbmcgZnVuY3Rpb25cbiAgICAgICAqL1xuICAgICAgcmV2ZXJzZVRpbWluZ0Z1bmN0aW9uOiBmdW5jdGlvbih0aW1pbmdGdW5jdGlvbikge1xuXG4gICAgICAgIGlmICh0aW1pbmdGdW5jdGlvbiA9PT0gJycgfHwgdGltaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB0aW1pbmdGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgdGltaW5nRnVuY3Rpb24ga2V5d29yZHMgdG8gYSBjdWJpYy1iZXppZXIgZnVuY3Rpb25cbiAgICAgICAgLy8gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBzb21lIGJyb3dzZXJzIHJldHVybiBhIGtleXdvcmQsIG90aGVycyBhIGZ1bmN0aW9uXG4gICAgICAgIHZhciB0aW1pbmdGdW5jdGlvblRvQ3ViaWNCZXppZXIgPSB7XG4gICAgICAgICAgXCJsaW5lYXJcIiAgICAgOiBcImN1YmljLWJlemllcigwLjAsMC4wLDEuMCwxLjApXCIsXG4gICAgICAgICAgXCJlYXNlXCIgICAgICAgOiBcImN1YmljLWJlemllcigwLjI1LCAwLjEsIDAuMjUsIDEuMClcIixcbiAgICAgICAgICBcImVhc2UtaW5cIiAgICA6IFwiY3ViaWMtYmV6aWVyKDAuNDIsIDAuMCwgMS4wLCAxLjApXCIsXG4gICAgICAgICAgXCJlYXNlLWluLW91dFwiOiBcImN1YmljLWJlemllcigwLjQyLCAwLjAsIDAuNTgsIDEuMClcIixcbiAgICAgICAgICBcImVhc2Utb3V0XCIgICA6IFwiY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjU4LCAxLjApXCJcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY3ViaWNCZXppZXIsXG4gICAgICAgICAgICBjdWJpY0Jlemllckxlbmd0aCxcbiAgICAgICAgICAgIHJldmVyc2VkQ3ViaWNCZXppZXIsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHRpbWluZyBmdW5jdGlvbiB0byBhIGN1YmljLWJlemllciBpZiBpdCBpcyBhIGtleXdvcmRcbiAgICAgICAgaWYgKHRpbWluZ0Z1bmN0aW9uLmluZGV4T2YoXCJjdWJpYy1iZXppZXJcIikgPCAwKSB7XG5cbiAgICAgICAgICAvLyBUT0RPOiBTdXBwb3J0IG11bHRpcGxlIHRpbWluZy1mdW5jdGlvbnNcbiAgICAgICAgICAvLyBJZiB0aGUgdGltaW5nLWZ1bmN0aW9uIGlzIG1hZGUgdXAgb2YgbXVsdGlwbGUgZnVuY3Rpb25zLCByZWR1Y2UgaXRcbiAgICAgICAgICAvLyB0byBvbmUgb25seVxuICAgICAgICAgIHRpbWluZ0Z1bmN0aW9uID0gdGltaW5nRnVuY3Rpb24uc3BsaXQoXCIsXCIpWzBdO1xuXG4gICAgICAgICAgLy8gQ29udmVydFxuICAgICAgICAgIHRpbWluZ0Z1bmN0aW9uID0gdGltaW5nRnVuY3Rpb25Ub0N1YmljQmV6aWVyW3RpbWluZ0Z1bmN0aW9uXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgQ1NTIGZ1bmN0aW9uIGFuZCBqdXN0IGdldCB0aGUgYXJyYXkgb2YgcG9pbnRzXG4gICAgICAgIGN1YmljQmV6aWVyID0gdGltaW5nRnVuY3Rpb24ucmVwbGFjZShcImN1YmljLWJlemllcihcIiwgXCJcIikucmVwbGFjZShcIilcIiwgXCJcIikuc3BsaXQoXCIsXCIpO1xuICAgICAgICBjdWJpY0Jlemllckxlbmd0aCA9IGN1YmljQmV6aWVyLmxlbmd0aDtcblxuICAgICAgICAvLyBDb252ZXJ0IGVhY2ggcG9pbnQgaW50byBhIG51bWJlciAocmF0aGVyIHRoYW4gYSBzdHJpbmcpXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjdWJpY0Jlemllckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY3ViaWNCZXppZXJbaV0gPSBwYXJzZUZsb2F0KGN1YmljQmV6aWVyW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldmVyc2UgdGhlIGN1YmljIGJlemllclxuICAgICAgICByZXZlcnNlZEN1YmljQmV6aWVyID0gW1xuICAgICAgICAgIDEgLSBjdWJpY0JlemllclsyXSxcbiAgICAgICAgICAxIC0gY3ViaWNCZXppZXJbM10sXG4gICAgICAgICAgMSAtIGN1YmljQmV6aWVyWzBdLFxuICAgICAgICAgIDEgLSBjdWJpY0JlemllclsxXVxuICAgICAgICBdO1xuXG4gICAgICAgIC8vIEFkZCB0aGUgcmV2ZXJzZWQgY3ViaWMgYmV6aWVyIGJhY2sgaW50byBhIENTUyBmdW5jdGlvblxuICAgICAgICB0aW1pbmdGdW5jdGlvbiA9IFwiY3ViaWMtYmV6aWVyKFwiICsgcmV2ZXJzZWRDdWJpY0JlemllciArIFwiKVwiO1xuXG4gICAgICAgIHJldHVybiB0aW1pbmdGdW5jdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQXBwbHkgYSB0cmFuc2l0aW9uLWR1cmF0aW9uIGFuZCB0cmFuc2l0aW9uLWRlbGF5IHRvIGVhY2ggZWxlbWVudFxuICAgICAgICogdGhlbiByZW1vdmUgdGhlc2UgdGVtcG9yYXJ5IHZhbHVlcyBvbmNlIHRoZSBwaGFzZSBpcyByZXNldC5cbiAgICAgICAqXG4gICAgICAgKiBDYW4gYmUgdXNlZCB0byBhcHBseSAwIHRvIGJvdGggZHVyYXRpb24gYW5kIGRlbGF5IHNvIGFuaW1hdGVzIHJlc2V0XG4gICAgICAgKiBiYWNrIGludG8gdGhlaXIgb3JpZ2luYWwgcGxhY2VzIGZvciBleGFtcGxlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGVwIC0gVGhlIHN0ZXAgdGhhdCB0aGUgZWxlbWVudHMgd2UnbGwgcmVzZXQgYmVsb25nIHRvXG4gICAgICAgKi9cbiAgICAgIHJlc2V0SW5oZXJpdGVkU3BlZWQ6IGZ1bmN0aW9uKHN0ZXApIHtcblxuICAgICAgICBpZiAoc2VsZi5pc0ZhbGxiYWNrTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIEdldCB0aGUgc3RlcCdzIGVsZW1lbnRzIGFuZCBjb3VudCB0aGVtXG4gICAgICAgIHZhciBzdGVwRWxlbWVudHMgPSBzZWxmLiRzdGVwc1tzdGVwIC0gMV0ucXVlcnlTZWxlY3RvckFsbChcIipcIiksXG4gICAgICAgICAgICBudW1iZXJPZlN0ZXBFbGVtZW50cyA9IHN0ZXBFbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGVtcG9yYXJpbHkgYXBwbHkgYSB0cmFuc2l0aW9uLWR1cmF0aW9uIGFuZCB0cmFuc2l0aW9uLWRlbGF5IHRvIGVhY2hcbiAgICAgICAgLy8gZWxlbWVudCB3ZSBuZWVkIHRvIHRyYWNrLlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtYmVyT2ZTdGVwRWxlbWVudHM7IGkrKykge1xuICAgICAgICAgIGVsID0gc3RlcEVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgZWwuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvblwiKV0gPSBcIjBtcyAwbXNcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RlOiBTeW5jaHJvbm91c2x5LCBhbiBlbGVtZW50J3MgcGhhc2UgY2xhc3MgaXMgYWRkZWQvcmVtb3ZlZCBoZXJlLlxuICAgICAgICAgKiBUbyBzYXZlIHRoZSBuZWVkIGZvciBhIGNhbGxiYWNrIHRob3VnaCAoYW5kIGV4dHJhIGNvZGUpLCB3ZSBpbnN0ZWFkIHJlbHlcbiAgICAgICAgICogb24gdGhlIG5lY2Vzc2l0eSBmb3IgdGhlIC5kb21EZWxheSgpIGZ1bmN0aW9uIHdoaWNoIGRvZXNuJ3QgcmVtb3ZlIHRoZVxuICAgICAgICAgKiBpbmhlcml0ZWRTdHlsZXMgdW50aWwgYWZ0ZXIgYSBicmllZiBkZWxheS4gV2hhdCB3b3VsZCBiZSB0aGUgY2FsbGJhY2tcbiAgICAgICAgICogaXMgaW5zdGVhZCBqdXN0IHBsYWNlZCBhZnRlciB0aGUgY2FsbCB0byAucmVzZXRJbmhlcml0ZWRTcGVlZCgpIGFuZFxuICAgICAgICAgKiBmcm9tIGEgc3luY2hyb25vdXMgcG9pbnQgb2Ygdmlldywgb2NjdXJzIGF0IHRoaXMgcG9pbnQsIGJlZm9yZSB0aGVcbiAgICAgICAgICogZm9sbG93aW5nIC5kb21EZWxheSgpO1xuICAgICAgICAgKi9cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHRlbXBvcmFyeSB0cmFuc2l0aW9uLWR1cmF0aW9uIGFuZCB0cmFuc2l0aW9uLWRlbGF5IGZyb20gZWFjaFxuICAgICAgICAvLyBlbGVtZW50IG5vdyBpdCBoYXMgYmVlbiBtYW5pcHVsYXRlZDsgYWxsb3dpbmcgZm9yIHRoZSBpbmhlcml0ZWQgc3R5bGVzXG4gICAgICAgIC8vIHRvIHRha2UgZWZmZWN0IGFnYWluLlxuICAgICAgICBzZWxmLmFuaW1hdGlvbi5kb21EZWxheShmdW5jdGlvbigpIHtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZlN0ZXBFbGVtZW50czsgaSsrKSB7XG5cbiAgICAgICAgICAgIGVsID0gc3RlcEVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgZWwuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKFwidHJhbnNpdGlvblwiKV0gPSBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgZGlyZWN0aW9uIHRvIG5hdmlnYXRlIGluIGJhc2VkIG9uIHdoZXRoZXIgdGhlIC5nb1RvKCkgZnVuY3Rpb25cbiAgICAgICAqIGhhcyBhIGRlZmluZWQgZGlyZWN0aW9uLCBhbmQgaWYgbm90LCB3aGF0IG9wdGlvbnMgYXJlIGJlaW5nIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIGlkIG9mIHRoZSBzdGVwIHRvIGdvIHRvXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVmaW5lZERpcmVjdGlvbiAtIFRoZSBkZWZpbmVkIGRpcmVjdGlvbiAxIG9yIC0xXG4gICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uIDEgb3IgLTFcbiAgICAgICAqL1xuICAgICAgZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbihpZCwgZGVmaW5lZERpcmVjdGlvbiwgY3VycmVudFN0ZXBJZCwgbm9PZlN0ZXBzLCBpc0ZhbGxiYWNrTW9kZSwgcmV2ZXJzZVdoZW5OYXZpZ2F0aW5nQmFja3dhcmRzT3B0aW9uLCBjeWNsZU9wdGlvbikge1xuXG4gICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICAgICAgZGlyZWN0aW9uID0gMTtcblxuICAgICAgICBpZiAoZGVmaW5lZERpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGlyZWN0aW9uID0gZGVmaW5lZERpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChyZXZlcnNlV2hlbk5hdmlnYXRpbmdCYWNrd2FyZHNPcHRpb24gPT09IHRydWUgfHwgaXNGYWxsYmFja01vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgIGlmIChjeWNsZU9wdGlvbiA9PT0gdHJ1ZSAmJiAoaWQgPT09IDEgJiYgY3VycmVudFN0ZXBJZCA9PT0gbm9PZlN0ZXBzKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGN5Y2xlIG9wdGlvbiBpcyBlbmFibGVkLCBhbmQgdGhlIHVzZXIgaXMgbmF2aWdhdGluZyBmcm9tXG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBzdGVwIHRvIHRoZSBmaXJzdCwgbmF2aWdhdGUgZm9yd2FyZHNcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IChpZCA8IGN1cnJlbnRTdGVwSWQpID8gLTE6IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpcmVjdGlvbiA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBEb2VzIFNlcXVlbmNlIG5lZWQgdG8gZ28gaW50byBmYWxsYmFjayBtb2RlIGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndFxuICAgICAgICogc3VwcG9ydCB0cmFuc2l0aW9ucz9cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydHlTdXBwb3J0IC0gTGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB3aGV0aGVyIHRoZVxuICAgICAgICogYnJvd3NlciBzdXBwb3J0cyB0aGVtXG4gICAgICAgKi9cbiAgICAgIHJlcXVpcmVzRmFsbGJhY2tNb2RlOiBmdW5jdGlvbihwcm9wZXJ0eVN1cHBvcnQpIHtcblxuICAgICAgICB2YXIgdHJhbnNpdGlvbnMgPSBwcm9wZXJ0eVN1cHBvcnQudHJhbnNpdGlvbnMsXG4gICAgICAgICAgICBpc0ZhbGxiYWNrTW9kZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0cmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpc0ZhbGxiYWNrTW9kZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNGYWxsYmFja01vZGU7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIERldGVybWluZSB3aGF0IHByb3BlcnRpZXMgdGhlIGJyb3dzZXIgc3VwcG9ydHMuIEN1cnJlbnRseSB0ZXN0czpcbiAgICAgICAqXG4gICAgICAgKiAtIHRyYW5zaXRpb25zXG4gICAgICAgKiAtIGFuaW1hdGlvbnNcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIFRoZSBwcm9wZXJ0aWVzIHRvIGJlIHVzZWQgKG9uIHRoZSBjYW52YXMpXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbGlzdCBvZiBwcm9wZXJ0aWVzIHdlJ3ZlIHRlc3RlZCBhbmQgdGhlaXIgc3VwcG9ydFxuICAgICAgICovXG4gICAgICBnZXRQcm9wZXJ0eVN1cHBvcnQ6IGZ1bmN0aW9uKHByb3BlcnRpZXMpIHtcblxuICAgICAgICB2YXIgdHJhbnNpdGlvbnMgPSBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZTtcblxuICAgICAgICAvLyBBcmUgdHJhbnNpdGlvbnMgc3VwcG9ydGVkP1xuICAgICAgICBpZiAoTW9kZXJuaXpyLmNzc3RyYW5zaXRpb25zID09PSB0cnVlKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXJlIGFuaW1hdGlvbnMgc3VwcG9ydGVkP1xuICAgICAgICBpZiAoTW9kZXJuaXpyLmNzc2FuaW1hdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgICBhbmltYXRpb25zID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgICAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgU2VxdWVuY2UncyBhbmltYXRpb25zIHdoZW4gaW4gYSBicm93c2VyIHRoYXQgZG9lc24ndCBzdXBwb3J0XG4gICAgICogQ1NTIHRyYW5zaXRpb25zXG4gICAgICovXG4gICAgc2VsZi5hbmltYXRpb25GYWxsYmFjayA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBBbmltYXRlIGFuIGVsZW1lbnQgdXNpbmcgSmF2YVNjcmlwdFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBhbmltYXRlXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3R5bGUgLSBUaGUgc3R5bGUgdG8gYmUgYW5pbWF0ZWRcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1bml0IC0gVGhlIHZhbHVlIHVuaXQgc3VjaCBhcyBcInB4XCIsIFwiJVwiIGV0Y1xuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGZyb20gLSBUaGUgc3RhcnQgdmFsdWUgb2YgdGhlIGFuaW1hdGlvblxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHRvIC0gVGhlIGVuZCB2YWx1ZSBvZiB0aGUgYW5pbWF0aW9uXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSAtIGhvdyBsb25nIHRvIGFuaW1hdGUgZm9yXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbmNlIHRoZSBhbmltYXRpb25cbiAgICAgICAqIGhhcyBmaW5pc2hlZFxuICAgICAgICovXG4gICAgICBhbmltYXRlOiBmdW5jdGlvbihlbGVtZW50LCBzdHlsZSwgdW5pdCwgZnJvbSwgdG8sIHRpbWUsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICB2YXIgc3RlcCA9IE1hdGgubWluKDEsIChuZXcgRGF0ZSgpLmdldFRpbWUoKS1zdGFydCkgLyB0aW1lKTtcblxuICAgICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVdID0gKGZyb20gKyBzdGVwICogKHRvIC0gZnJvbSkpICsgdW5pdDtcblxuICAgICAgICAgIGlmIChzdGVwID09PSAxKSB7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMjUpO1xuXG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVdID0gZnJvbSArIHVuaXQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHVwIHRoZSBjYW52YXMgcmVhZHkgZm9yIHRoZSBmYWxsYmFjayBhbmltYXRpb25cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgZmlyc3QgSWQgdGhhdCBTZXF1ZW5jZSB3aWxsIGdvIHRvXG4gICAgICAgKi9cbiAgICAgIHNldHVwQ2FudmFzOiBmdW5jdGlvbihpZCkge1xuXG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgc3RlcCxcbiAgICAgICAgICAgIHN0ZXBJZDtcblxuICAgICAgICBpZiAoc2VsZi5pc0ZhbGxiYWNrTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgLy8gQWRkIHRoZSBcInNlcS1mYWxsYmFja1wiIGNsYXNzIHRvIHRoZSBTZXF1ZW5jZSBlbGVtZW50XG4gICAgICAgICAgYWRkQ2xhc3Moc2VsZi4kY29udGFpbmVyLCBcInNlcS1mYWxsYmFja1wiKTtcblxuICAgICAgICAgIGlmIChzZWxmLiRzY3JlZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gUHJldmVudCBzdGVwcyBmcm9tIGFwcGVhcmluZyBvdXRzaWRlIG9mIHRoZSBTZXF1ZW5jZSBzY3JlZW5cbiAgICAgICAgICAgIHNlbGYuJHNjcmVlbi5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBzZWxmLiRzY3JlZW4uc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIHNlbGYuJHNjcmVlbi5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBNYWtlIHRoZSBjYW52YXMgYW5kIHNjcmVlbiAxMDAlIHdpZHRoL2hlaWdodFxuICAgICAgICAgIHNlbGYuJGNhbnZhcy5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICAgIHNlbGYuJGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXG4gICAgICAgICAgLy8gR2V0IHRoZSB3aWR0aCBvZiB0aGUgY2FudmFzXG4gICAgICAgICAgdGhpcy5jYW52YXNXaWR0aCA9IHNlbGYuJGNhbnZhcy5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgIC8vIE1ha2UgZWFjaCBzdGVwIDEwMCUgd2lkdGgvaGVpZ2h0XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGYubm9PZlN0ZXBzOyBpKyspIHtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBzdGVwIGFuZCBpdHMgSUQgKG9uZS1iYXNlZClcbiAgICAgICAgICAgIHN0ZXAgPSBzZWxmLiRzdGVwc1tpXTtcbiAgICAgICAgICAgIHN0ZXBJZCA9IGkgKyAxO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1vdmUgZWFjaCBzdGVwIHRvIGl0cyBcInNlcS1pblwiIHBvc2l0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTm90ZTogaW4gZmFsbGJhY2sgbW9kZSwgc3RlcHMgd2lsbCBhbHdheXMgcmVtYWluIGluIHRoZWlyXG4gICAgICAgICAgICAgKiBcInNlcS1pblwiIHBvc2l0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFkZENsYXNzKHN0ZXAsIFwic2VxLWluXCIpO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHRoZSBzdGVwIDEwMCUgd2lkdGgvaGVpZ2h0XG4gICAgICAgICAgICBzdGVwLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICBzdGVwLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgc3RlcC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgIHN0ZXAuc3R5bGUud2hpdGVTcGFjZSA9IFwibm9ybWFsXCI7XG5cbiAgICAgICAgICAgIC8vIE1vdmUgYWxsIHN0ZXBzIHRvIFwic2VxLW91dFwiXG4gICAgICAgICAgICBzdGVwLnN0eWxlLmxlZnQgPSBcIjEwMCVcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogTW92ZSB0aGUgY2FudmFzIHVzaW5nIGJhc2ljIGFuaW1hdGlvblxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5leHRTdGVwRWxlbWVudCAtIFRoZSBlbGVtZW50IHRoYXQgaXMgdGhlIG5leHQgc3RlcFxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY3VycmVudFN0ZXBFbGVtZW50IC0gVGhlIGVsZW1lbnQgdGhhdCBpcyB0aGUgY3VycmVudCBzdGVwXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiB0byBhbmltYXRlIGluXG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFuaW1hdGUgLSBTaG93IHRoZSBjYW52YXMgYW5pbWF0ZSBvciBzbmFwP1xuICAgICAgICovXG4gICAgICBtb3ZlQ2FudmFzOiBmdW5jdGlvbihuZXh0U3RlcEVsZW1lbnQsIGN1cnJlbnRTdGVwRWxlbWVudCwgZGlyZWN0aW9uLCBhbmltYXRlKSB7XG5cbiAgICAgICAgLy8gQW5pbWF0ZSBzdGVwc1xuICAgICAgICBpZiAoYW5pbWF0ZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgdmFyIGN1cnJlbnRGcm9tID0gMCxcbiAgICAgICAgICAgICAgY3VycmVudFRvID0gLTEwMCxcbiAgICAgICAgICAgICAgbmV4dEZyb20gPSAxMDAsXG4gICAgICAgICAgICAgIG5leHRUbyA9IDA7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgY3VycmVudFRvID0gMTAwO1xuICAgICAgICAgICAgbmV4dEZyb20gPSAtMTAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuYW5pbWF0ZShjdXJyZW50U3RlcEVsZW1lbnQsIFwibGVmdFwiLCBcIiVcIiwgY3VycmVudEZyb20sIGN1cnJlbnRUbywgc2VsZi5vcHRpb25zLmZhbGxiYWNrLnNwZWVkKTtcbiAgICAgICAgICB0aGlzLmFuaW1hdGUobmV4dFN0ZXBFbGVtZW50LCBcImxlZnRcIiwgXCIlXCIsIG5leHRGcm9tLCBuZXh0VG8sIHNlbGYub3B0aW9ucy5mYWxsYmFjay5zcGVlZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTbmFwIHN0ZXBzIGludG8gcGxhY2VcbiAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICBjdXJyZW50U3RlcEVsZW1lbnQuc3R5bGUubGVmdCA9IFwiLTEwMCVcIjtcbiAgICAgICAgICBuZXh0U3RlcEVsZW1lbnQuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdvIHRvIGEgc3RlcCB1c2luZyBiYXNpYyBhbmltYXRpb25cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgSUQgb2YgdGhlIHN0ZXAgdG8gZ28gdG9cbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjdXJyZW50U3RlcCAtIFRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHN0ZXBcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGN1cnJlbnRTdGVwRWxlbWVudCAtIFRoZSBlbGVtZW50IHRoYXQgaXMgdGhlIGN1cnJlbnQgc3RlcFxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5leHRTdGVwIC0gVGhlIG5hbWUgb2YgdGhlIG5leHQgc3RlcFxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbmV4dFN0ZXBFbGVtZW50IC0gVGhlIGVsZW1lbnQgdGhhdCBpcyB0aGUgbmV4dCBzdGVwXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiBvZiBuYXZpZ2F0aW9uXG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGhhc2hUYWdOYXYgLSBJZiBuYXZpZ2F0aW9uIGlzIHRyaWdnZXJlZCBieSB0aGUgaGFzaFRhZ1xuICAgICAgICovXG4gICAgICBnb1RvOiBmdW5jdGlvbihpZCwgY3VycmVudFN0ZXAsIGN1cnJlbnRTdGVwRWxlbWVudCwgbmV4dFN0ZXAsIG5leHRTdGVwRWxlbWVudCwgZGlyZWN0aW9uLCBoYXNoVGFnTmF2KSB7XG5cbiAgICAgICAgdmFyIGZyb207XG5cbiAgICAgICAgLy8gVGhlIG5leHQgSUQgaXMgbm93IHRoZSBjdXJyZW50IElEXG4gICAgICAgIHNlbGYucHJldlN0ZXBJZCA9IHNlbGYuY3VycmVudFN0ZXBJZDtcbiAgICAgICAgc2VsZi5jdXJyZW50U3RlcElkID0gaWQ7XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBoYXNoVGFnIGlmIGJlaW5nIHVzZWRcbiAgICAgICAgaWYgKGhhc2hUYWdOYXYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNlbGYuaGFzaFRhZ3MudXBkYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnBhZ2luYXRpb24udXBkYXRlKCk7XG5cbiAgICAgICAgLy8gV2hlbiBzaG91bGQgdGhlIFwic2VxLWluXCIgcGhhc2Ugc3RhcnQgYW5kIGhvdyBsb25nIHVudGlsIHRoZSBzdGVwXG4gICAgICAgIC8vIGNvbXBsZXRlbHkgZmluaXNoZXMgYW5pbWF0aW5nP1xuICAgICAgICBpZiAoc2VsZi5maXJzdFJ1biA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgIHRoaXMubW92ZUNhbnZhcyhuZXh0U3RlcEVsZW1lbnQsIGN1cnJlbnRTdGVwRWxlbWVudCwgZGlyZWN0aW9uLCB0cnVlKTtcblxuICAgICAgICAgIC8vIFNlcXVlbmNlIGlzIG5vdyBhbmltYXRpbmdcbiAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgc2VsZi5hbmltYXRpb25TdGFydGVkKHNlbGYuY3VycmVudFN0ZXBJZCwgc2VsZik7XG5cbiAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgc3RlcCAoYm90aCBwaGFzZXMpIHRvIGZpbmlzaCBhbmltYXRpbmdcbiAgICAgICAgICBzZWxmLnN0ZXBFbmRlZFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgc2VsZi5hbmltYXRpb24uc3RlcEVuZGVkKHNlbGYuY3VycmVudFN0ZXBJZCk7XG4gICAgICAgICAgfSwgc2VsZi5vcHRpb25zLmZhbGxiYWNrLnNwZWVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHN0ZXAgd2UncmUgZ29pbmcgdG9cbiAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICB0aGlzLm1vdmVDYW52YXMobmV4dFN0ZXBFbGVtZW50LCBjdXJyZW50U3RlcEVsZW1lbnQsIGRpcmVjdGlvbiwgZmFsc2UpO1xuICAgICAgICAgIHNlbGYuZmlyc3RSdW4gPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMuYXV0b1BsYXkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNlbGYuYXV0b1BsYXkuc3RhcnQodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1hbmFnZSBwYWdpbmF0aW9uXG4gICAgICovXG4gICAgc2VsZi5wYWdpbmF0aW9uID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgbGlua3MgZnJvbSBlYWNoIHBhZ2luYXRpb24gZWxlbWVudCAoYW55IHRvcCBsZXZlbCBlbGVtZW50cylcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIHBhZ2luYXRpb24gZWxlbWVudFxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHJlbCAtIFdoaWNoIFNlcXVlbmNlIGVsZW1lbnQgdGhlIHBhZ2luYXRpb24gcmVsYXRlc1xuICAgICAgICogdG8gKGlmIGFueSlcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpIC0gVGhlIG51bWJlciBvZiB0aGUgcGFnaW5hdGlvbiBlbGVtZW50XG4gICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IHBhZ2luYXRpb25MaW5rcyAtIEVhY2ggbGluayBpbiBhbiBhcnJheVxuICAgICAgICovXG4gICAgICBnZXRMaW5rczogZnVuY3Rpb24oZWxlbWVudCwgcmVsKSB7XG5cbiAgICAgICAgdmFyIGNoaWxkRWxlbWVudCxcbiAgICAgICAgICAgIGNoaWxkRWxlbWVudHMgPSBlbGVtZW50LmNoaWxkTm9kZXMsXG4gICAgICAgICAgICBjaGlsZEVsZW1lbnRzTGVuZ3RoID0gY2hpbGRFbGVtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBwYWdpbmF0aW9uTGlua3MgPSBbXSxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gR2V0IGVhY2ggdG9wIGxldmVsIHBhZ2luYXRpb24gbGluayBhbmQgYWRkIGl0IHRvIHRoZSBhcnJheVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRFbGVtZW50c0xlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICBjaGlsZEVsZW1lbnQgPSBjaGlsZEVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgaWYgKGNoaWxkRWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkxpbmtzLnB1c2goY2hpbGRFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnaW5hdGlvbkxpbmtzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVcGRhdGUgdGhlIHBhZ2luYXRpb24gdG8gYWN0aXZhdGUgdGhlIHJlbGV2YW50IGxpbmtcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IC0gdGhlIHBhZ2luYXRpb24gZWxlbWVudChzKSB0aGF0IGFyZSBjdXJyZW50bHkgYWN0aXZlXG4gICAgICAgKi9cbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYoc2VsZi4kcGFnaW5hdGlvbi5lbGVtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgaWQgPSBzZWxmLmN1cnJlbnRTdGVwSWQgLSAxLFxuICAgICAgICAgICAgICBjdXJyZW50UGFnaW5hdGlvbkxpbmssXG4gICAgICAgICAgICAgIGN1cnJlbnRQYWdpbmF0aW9uTGlua3NMZW5ndGgsXG4gICAgICAgICAgICAgIHBhZ2luYXRpb25MZW5ndGggPSBzZWxmLiRwYWdpbmF0aW9uLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgXCJzZXEtY3VycmVudFwiIGNsYXNzIGZyb20gYSBwcmV2aW91cyBwYWdpbmF0aW9uIGxpbmtcbiAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICBpZiAoc2VsZi4kcGFnaW5hdGlvbi5jdXJyZW50TGlua3MgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICBjdXJyZW50UGFnaW5hdGlvbkxpbmtzTGVuZ3RoID0gc2VsZi4kcGFnaW5hdGlvbi5jdXJyZW50TGlua3MubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3VycmVudFBhZ2luYXRpb25MaW5rc0xlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgY3VycmVudFBhZ2luYXRpb25MaW5rID0gc2VsZi4kcGFnaW5hdGlvbi5jdXJyZW50TGlua3NbaV07XG4gICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGN1cnJlbnRQYWdpbmF0aW9uTGluaywgXCJzZXEtY3VycmVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXaGVyZSB3ZSdsbCBzYXZlIHRoZSBjdXJyZW50IHBhZ2luYXRpb24gbGlua3NcbiAgICAgICAgICBzZWxmLiRwYWdpbmF0aW9uLmN1cnJlbnRMaW5rcyA9IFtdO1xuXG4gICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHBhZ2luYXRpb24gbGluayBmcm9tIGVhY2ggcGFnaW5hdGlvbiBlbGVtZW50LFxuICAgICAgICAgIC8vIGFkZCB0aGUgXCJzZXEtY3VycmVudFwiIGNsYXNzIHRvIHRoZW0sIHRoZW4gc2F2ZSB0aGVtIGZvciBsYXRlclxuICAgICAgICAgIC8vIGZvciB3aGVuIHRoZXkgbmVlZCB0byBoYXZlIHRoZSBcInNlcS1jdXJyZW50XCIgY2xhc3MgcmVtb3ZlZFxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBwYWdpbmF0aW9uTGVuZ3RoOyBqKyspIHtcblxuICAgICAgICAgICAgY3VycmVudFBhZ2luYXRpb25MaW5rID0gc2VsZi4kcGFnaW5hdGlvbi5saW5rc1tqXVtpZF07XG4gICAgICAgICAgICBzZWxmLiRwYWdpbmF0aW9uLmN1cnJlbnRMaW5rcy5wdXNoKGN1cnJlbnRQYWdpbmF0aW9uTGluayk7XG5cbiAgICAgICAgICAgIGFkZENsYXNzKGN1cnJlbnRQYWdpbmF0aW9uTGluaywgXCJzZXEtY3VycmVudFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZi4kcGFnaW5hdGlvbi5jdXJyZW50TGlua3M7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1hbmFnZSBTZXF1ZW5jZSBoYXNoVGFnIHN1cHBvcnRcbiAgICAgKi9cbiAgICBzZWxmLmhhc2hUYWdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFNldCB1cCBoYXNoVGFnc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZCAtIFRoZSBpZCBvZiB0aGUgZmlyc3Qgc3RlcFxuICAgICAgICogQHJldHVybnMge051bWJlcn0gaWQgLSBUaGUgaWQgb2YgdGhlIGZpcnN0IHN0ZXAgKGhhc2hUYWdzLmluaXQoKSB3aWxsXG4gICAgICAgKiBvdmVycmlkZSB0aGlzIGlmIGFuIGVudGVyaW5nIFVSTCBjb250YWlucyBhIGhhc2hUYWcgdGhhdCBjb3JyZXNwb25kc1xuICAgICAgICogdG8gYSBzdGVwKVxuICAgICAgICovXG4gICAgICBpbml0OiBmdW5jdGlvbihpZCkge1xuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuaGFzaFRhZ3MgPT09IHRydWUpIHtcblxuICAgICAgICAgIHZhciBjb3JyZXNwb25kaW5nU3RlcElkLFxuICAgICAgICAgICAgICBuZXdIYXNoVGFnO1xuXG4gICAgICAgICAgLy8gRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IHB1c2hzdGF0ZT9cbiAgICAgICAgICBzZWxmLmhhc1B1c2hzdGF0ZSA9ICEhKHdpbmRvdy5oaXN0b3J5ICYmIGhpc3RvcnkucHVzaFN0YXRlKTtcblxuICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBoYXNoVGFnXG4gICAgICAgICAgbmV3SGFzaFRhZyA9IGxvY2F0aW9uLmhhc2gucmVwbGFjZShcIiMhXCIsIFwiXCIpO1xuXG4gICAgICAgICAgLy8gR2V0IGVhY2ggc3RlcCdzIGhhc2hUYWdcbiAgICAgICAgICBzZWxmLnN0ZXBIYXNoVGFncyA9IHRoaXMuZ2V0U3RlcEhhc2hUYWdzKCk7XG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGhhc2hUYWcgYnV0IG5vIHZhbHVlLCBkb24ndCBnbyBhbnkgZnVydGhlclxuICAgICAgICAgIGlmIChuZXdIYXNoVGFnICE9PSBcIlwiKSB7XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBoYXNoVGFnJ3Mgc3RlcCBJRCdzXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRIYXNoVGFnID0gbmV3SGFzaFRhZztcbiAgICAgICAgICAgIGNvcnJlc3BvbmRpbmdTdGVwSWQgPSB0aGlzLmhhc0NvcnJlc3BvbmRpbmdTdGVwKHNlbGYuY3VycmVudEhhc2hUYWcpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZW50ZXJpbmcgVVJMIGNvbnRhaW5zIGEgaGFzaFRhZywgYW5kIHRoZSBoYXNoVGFnIHJlbGF0ZXMgdG9cbiAgICAgICAgICAgIC8vIGEgY29ycmVzcG9uZGluZyBzdGVwLCB0aGUgc3RlcCdzIElEIHdpbGwgb3ZlcnJpZGUgdGhlIHN0YXJ0U3RlcElkXG4gICAgICAgICAgICAvLyBkZWZpbmVkIGluIG9wdGlvbnNcbiAgICAgICAgICAgIGlmIChjb3JyZXNwb25kaW5nU3RlcElkID4gLTEpIHtcbiAgICAgICAgICAgICAgaWQgPSBjb3JyZXNwb25kaW5nU3RlcElkICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZWl0aGVyIHRoZSBzdGFydGluZ1N0ZXBJZCBhcyBkZWZpbmVkIGluIHNldHRpbmdzIG9yIGlmIHRoZVxuICAgICAgICAvLyBlbnRlcmluZyBVUkwgY29udGFpbmVkIGEgaGFzaFRhZyB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgc3RlcCwgcmV0dXJuXG4gICAgICAgIC8vIGl0cyBJRCBpbnN0ZWFkXG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRG9lcyBhIGhhc2hUYWcgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgc3RlcD9cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBjb3JyZXNwb25kaW5nU3RlcCAtIFRoZSBzdGVwIElEIHJlbGF0aW5nIHRvIHRoZSBoYXNoVGFnIG9yIC0xIG1lYW5pbmcgdGhlcmUgaXMgbm8gY29ycmVzcG9uZGluZ1N0ZXBcbiAgICAgICAqL1xuICAgICAgaGFzQ29ycmVzcG9uZGluZ1N0ZXA6IGZ1bmN0aW9uKGhhc2hUYWcpIHtcblxuICAgICAgICB2YXIgY29ycmVzcG9uZGluZ1N0ZXAgPSAtMSxcbiAgICAgICAgICAgIGNvcnJlc3BvbmRpbmdTdGVwSWQgPSBzZWxmLnN0ZXBIYXNoVGFncy5pbmRleE9mKGhhc2hUYWcpO1xuXG4gICAgICAgIGlmIChjb3JyZXNwb25kaW5nU3RlcElkID4gLTEpIHtcbiAgICAgICAgICBjb3JyZXNwb25kaW5nU3RlcCA9IGNvcnJlc3BvbmRpbmdTdGVwSWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29ycmVzcG9uZGluZ1N0ZXA7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBlYWNoIHN0ZXBzIGhhc2hUYWcgdG8gcmV0dXJuIGFuIGFycmF5IG9mIGhhc2hUYWdzXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge0FycmF5fSBzdGVwSGFzaFRhZ3MgLSBBbiBhcnJheSBvZiBoYXNoVGFnc1xuICAgICAgICovXG4gICAgICBnZXRTdGVwSGFzaFRhZ3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZWxlbWVudEhhc2hUYWcsXG4gICAgICAgICAgICBzdGVwSGFzaFRhZ3MgPSBbXTtcblxuICAgICAgICAvLyBHZXQgZWFjaCBzdGVwcyBoYXNodGFnXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxmLm5vT2ZTdGVwczsgaSsrKSB7XG5cbiAgICAgICAgICBlbGVtZW50SGFzaFRhZyA9IChzZWxmLm9wdGlvbnMuaGFzaERhdGFBdHRyaWJ1dGUgPT09IGZhbHNlKSA/IHNlbGYuJHN0ZXBzW2ldLmlkOiBzZWxmLiRzdGVwc1tpXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlcS1oYXNodGFnXCIpO1xuXG4gICAgICAgICAgLy8gQWRkIHRoZSBoYXNodGFnIHRvIGFuIGFycmF5XG4gICAgICAgICAgc3RlcEhhc2hUYWdzLnB1c2goZWxlbWVudEhhc2hUYWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0ZXBIYXNoVGFncztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVXBkYXRlIHRoZSBoYXNoVGFnIGlmOlxuICAgICAgICpcbiAgICAgICAqIC0gaGFzaFRhZ3MgYXJlIGJlaW5nIHVzZWQgYW5kIHRoaXMgaXNuJ3QgdGhlIGZpcnN0IHJ1blxuICAgICAgICogLSBoYXNoVGFncyBhcmUgYmVpbmcgdXNlZCwgdGhpcyBpcyB0aGUgZmlyc3QgcnVuLCBhbmQgdGhlIGZpcnN0IGhhc2hcbiAgICAgICAqICAgY2hhbmdlIGlzIGFsbG93ZWQgaW4gdGhlIG9wdGlvbnNcbiAgICAgICAqIC0gdGhlIGN1cnJlbnQgc3RlcCBoYXMgYSBoYXNoVGFnXG4gICAgICAgKi9cbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5oYXNoVGFncyA9PT0gdHJ1ZSAmJiBzZWxmLmZpcnN0UnVuID09PSBmYWxzZSB8fCAoc2VsZi5vcHRpb25zLmhhc2hUYWdzID09PSB0cnVlICYmIHNlbGYuZmlyc3RSdW4gPT09IHRydWUgJiYgc2VsZi5vcHRpb25zLmhhc2hDaGFuZ2VzT25GaXJzdFN0ZXAgPT09IHRydWUpKSB7XG5cbiAgICAgICAgICAvLyBaZXJvLWJhc2UgdGhlIGN1cnJlbnRTdGVwSWRcbiAgICAgICAgICB2YXIgaGFzaFRhZ0lkID0gc2VsZi5jdXJyZW50U3RlcElkIC0gMTtcblxuICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBoYXNoVGFnXG4gICAgICAgICAgc2VsZi5jdXJyZW50SGFzaFRhZyA9IHNlbGYuc3RlcEhhc2hUYWdzW2hhc2hUYWdJZF07XG5cbiAgICAgICAgICBpZiAoc2VsZi5jdXJyZW50SGFzaHRhZyAhPT0gXCJcIikge1xuXG4gICAgICAgICAgICAvLyBBZGQgdGhlIGhhc2hUYWcgdG8gdGhlIFVSTFxuICAgICAgICAgICAgaWYgKHNlbGYuaGFzUHVzaHN0YXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIFwiIyFcIiArIHNlbGYuY3VycmVudEhhc2hUYWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIiMhXCIgKyBzZWxmLmN1cnJlbnRIYXNoVGFnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBDcm9zcyBCcm93c2VyIGhlbHBlciBmb3IgYW4gaGFzaGNoYW5nZSBldmVudFxuICAgICAgICogU291cmNlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzkzMzk4NjUvZ2V0LXRoZS1oYXNoY2hhbmdlLWV2ZW50LXRvLXdvcmstaW4tYWxsLWJyb3dzZXJzLWluY2x1ZGluZy1pZTcvXG4gICAgICAgKi9cbiAgICAgIHNldHVwRXZlbnQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmICgnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3cpIHtcblxuICAgICAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkSGFzaENoYW5nZSA9IGZ1bmN0aW9uKGZ1bmMsIGJlZm9yZSkge1xuICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGZ1bmMsIGJlZm9yZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlSGFzaENoYW5nZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBmdW5jKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmF0dGFjaEV2ZW50KSB7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRIYXNoQ2hhbmdlID0gZnVuY3Rpb24oZnVuYykge1xuICAgICAgICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29uaGFzaGNoYW5nZScsIGZ1bmMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kZXRhY2hFdmVudCgnb25oYXNoY2hhbmdlJywgZnVuYyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhc2hDaGFuZ2VGdW5jcyA9IFtdO1xuICAgICAgICB2YXIgb2xkSHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgd2luZG93LmFkZEhhc2hDaGFuZ2UgPSBmdW5jdGlvbihmdW5jLCBiZWZvcmUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGhhc2hDaGFuZ2VGdW5jc1tiZWZvcmU/J3Vuc2hpZnQnOidwdXNoJ10oZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5yZW1vdmVIYXNoQ2hhbmdlID0gZnVuY3Rpb24oZnVuYykge1xuICAgICAgICAgIGZvciAodmFyIGk9aGFzaENoYW5nZUZ1bmNzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChoYXNoQ2hhbmdlRnVuY3NbaV0gPT09IGZ1bmMpIHtcbiAgICAgICAgICAgICAgaGFzaENoYW5nZUZ1bmNzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIG5ld0hyZWYgPSBsb2NhdGlvbi5ocmVmO1xuICAgICAgICAgIGlmIChvbGRIcmVmICE9PSBuZXdIcmVmKSB7XG4gICAgICAgICAgICB2YXIgX29sZEhyZWYgPSBvbGRIcmVmO1xuICAgICAgICAgICAgb2xkSHJlZiA9IG5ld0hyZWY7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8aGFzaENoYW5nZUZ1bmNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGhhc2hDaGFuZ2VGdW5jc1tpXS5jYWxsKHdpbmRvdywge1xuICAgICAgICAgICAgICAgICd0eXBlJzogJ2hhc2hjaGFuZ2UnLFxuICAgICAgICAgICAgICAgICduZXdVUkwnOiBuZXdIcmVmLFxuICAgICAgICAgICAgICAgICdvbGRVUkwnOiBfb2xkSHJlZlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1hbmFnZSBTZXF1ZW5jZSBwcmVsb2FkaW5nXG4gICAgICovXG4gICAgc2VsZi5wcmVsb2FkID0ge1xuXG4gICAgICAvLyBTZXF1ZW5jZSdzIGRlZmF1bHQgSFRNTCBmb3IgdGhlIHByZWxvYWRlclxuICAgICAgZGVmYXVsdEh0bWw6ICc8c3ZnIHdpZHRoPVwiMzlcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMzkgMTZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgY2xhc3M9XCJzZXEtcHJlbG9hZC1pbmRpY2F0b3JcIj48dGl0bGU+U2VxdWVuY2UuanMgUHJlbG9hZGluZyBJbmRpY2F0b3I8L3RpdGxlPjxkZXNjPlRocmVlIG9yYW5nZSBkb3RzIGluY3JlYXNpbmcgaW4gc2l6ZSBmcm9tIGxlZnQgdG8gcmlnaHQ8L2Rlc2M+PGcgZmlsbD1cIiNGOTZEMzhcIj48cGF0aCBjbGFzcz1cInNlcS1wcmVsb2FkLWNpcmNsZSBzZXEtcHJlbG9hZC1jaXJjbGUtMVwiIGQ9XCJNMy45OTkgMTIuMDEyYzIuMjA5IDAgMy45OTktMS43OTEgMy45OTktMy45OTlzLTEuNzktMy45OTktMy45OTktMy45OTktMy45OTkgMS43OTEtMy45OTkgMy45OTkgMS43OSAzLjk5OSAzLjk5OSAzLjk5OXpcIi8+PHBhdGggY2xhc3M9XCJzZXEtcHJlbG9hZC1jaXJjbGUgc2VxLXByZWxvYWQtY2lyY2xlLTJcIiBkPVwiTTE1Ljk5NiAxMy40NjhjMy4wMTggMCA1LjQ2NS0yLjQ0NyA1LjQ2NS01LjQ2NiAwLTMuMDE4LTIuNDQ3LTUuNDY1LTUuNDY1LTUuNDY1LTMuMDE5IDAtNS40NjYgMi40NDctNS40NjYgNS40NjUgMCAzLjAxOSAyLjQ0NyA1LjQ2NiA1LjQ2NiA1LjQ2NnpcIi8+PHBhdGggY2xhc3M9XCJzZXEtcHJlbG9hZC1jaXJjbGUgc2VxLXByZWxvYWQtY2lyY2xlLTNcIiBkPVwiTTMxLjMyMiAxNS4zMzRjNC4wNDkgMCA3LjMzMi0zLjI4MiA3LjMzMi03LjMzMiAwLTQuMDQ5LTMuMjgyLTcuMzMyLTcuMzMyLTcuMzMycy03LjMzMiAzLjI4My03LjMzMiA3LjMzMmMwIDQuMDUgMy4yODMgNy4zMzIgNy4zMzIgNy4zMzJ6XCIvPjwvZz48L3N2Zz4nLFxuXG4gICAgICBmYWxsYmFja0h0bWw6ICc8ZGl2IGNsYXNzPVwic2VxLXByZWxvYWQtaW5kaWNhdG9yIHNlcS1wcmVsb2FkLWluZGljYXRvci1mYWxsYmFja1wiPjxkaXYgY2xhc3M9XCJzZXEtcHJlbG9hZC1jaXJjbGUgc2VxLXByZWxvYWQtY2lyY2xlLTFcIj48L2Rpdj48ZGl2IGNsYXNzPVwic2VxLXByZWxvYWQtY2lyY2xlIHNlcS1wcmVsb2FkLWNpcmNsZS0yXCI+PC9kaXY+PGRpdiBjbGFzcz1cInNlcS1wcmVsb2FkLWNpcmNsZSBzZXEtcHJlbG9hZC1jaXJjbGUtM1wiPjwvZGl2PjwvZGl2PicsXG5cbiAgICAgIC8vIFNlcXVlbmNlJ3MgZGVmYXVsdCBwcmVsb2FkZXIgc3R5bGVzIGFuZCBhbmltYXRpb24gZm9yIHRoZSBwcmVsb2FkZXJcbiAgICAgICBkZWZhdWx0U3R5bGVzOiAnQCcrcHJlZml4VHJhbnNsYXRpb25zLmFuaW1hdGlvbltNb2Rlcm5penIucHJlZml4ZWQoXCJhbmltYXRpb25cIildKydrZXlmcmFtZXMgc2VxLXByZWxvYWRlciB7NTAlIHtvcGFjaXR5OiAxO30xMDAlIHtvcGFjaXR5OiAwO319LnNlcS1wcmVsb2FkZXIge2JhY2tncm91bmQ6IHdoaXRlO3Zpc2liaWxpdHk6IHZpc2libGU7b3BhY2l0eTogMTtwb3NpdGlvbjogYWJzb2x1dGU7ei1pbmRleDogOTk5OTtoZWlnaHQ6IDEwMCU7d2lkdGg6IDEwMCU7dG9wOiAwO2xlZnQ6IDA7cmlnaHQ6IDA7Ym90dG9tOiAwO30gLnNlcS1wcmVsb2FkZXIuc2VxLXByZWxvYWRlZCB7b3BhY2l0eTogMDt2aXNpYmlsaXR5OiBoaWRkZW47JytNb2Rlcm5penIucHJlZml4ZWQoXCJ0cmFuc2l0aW9uXCIpKyc6IHZpc2liaWxpdHkgMHMgLjVzLCBvcGFjaXR5IC41czt9LnNlcS1wcmVsb2FkLWluZGljYXRvciB7b3ZlcmZsb3c6IHZpc2libGU7cG9zaXRpb246IHJlbGF0aXZlO3RvcDogNTAlO2xlZnQ6IDUwJTstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO3RyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO30uc2VxLXByZWxvYWQtY2lyY2xlIHtkaXNwbGF5OiBpbmxpbmUtYmxvY2s7aGVpZ2h0OiAxMnB4O3dpZHRoOiAxMnB4O2ZpbGw6ICNGOTZEMzg7b3BhY2l0eTogMDsnK3ByZWZpeFRyYW5zbGF0aW9ucy5hbmltYXRpb25bTW9kZXJuaXpyLnByZWZpeGVkKFwiYW5pbWF0aW9uXCIpXSsnYW5pbWF0aW9uOiBzZXEtcHJlbG9hZGVyIDEuMjVzIGluZmluaXRlO30uc2VxLXByZWxvYWQtY2lyY2xlLTIgeycrcHJlZml4VHJhbnNsYXRpb25zLmFuaW1hdGlvbltNb2Rlcm5penIucHJlZml4ZWQoXCJhbmltYXRpb25cIildKydhbmltYXRpb24tZGVsYXk6IC4xNXM7fS5zZXEtcHJlbG9hZC1jaXJjbGUtMyB7JytwcmVmaXhUcmFuc2xhdGlvbnMuYW5pbWF0aW9uW01vZGVybml6ci5wcmVmaXhlZChcImFuaW1hdGlvblwiKV0rJ2FuaW1hdGlvbi1kZWxheTogLjNzO30uc2VxLXByZWxvYWQtaW5kaWNhdG9yLWZhbGxiYWNre3dpZHRoOiA0MnB4O21hcmdpbi1sZWZ0OiAtMjFweDtvdmVyZmxvdzogdmlzaWJsZTt9LnNlcS1wcmVsb2FkLWluZGljYXRvci1mYWxsYmFjayAuc2VxLXByZWxvYWQtY2lyY2xlIHt3aWR0aDogOHB4OyBoZWlnaHQ6OHB4O2JhY2tncm91bmQtY29sb3I6ICNGOTZEMzg7Ym9yZGVyLXJhZGl1czogMTAwJTsgb3BhY2l0eTogMTtkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7fS5zZXEtcHJlbG9hZC1pbmRpY2F0b3ItZmFsbGJhY2sgLnNlcS1wcmVsb2FkLWNpcmNsZS0ye21hcmdpbi1sZWZ0OiAzcHg7IG1hcmdpbi1yaWdodDogM3B4OyB3aWR0aDogMTJweDsgaGVpZ2h0OiAxMnB4O30uc2VxLXByZWxvYWQtaW5kaWNhdG9yLWZhbGxiYWNrIC5zZXEtcHJlbG9hZC1jaXJjbGUtM3t3aWR0aDogMTZweDsgaGVpZ2h0OiAxNnB4O30nLFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHVwIFNlcXVlbmNlIHByZWxvYWRpbmdcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiBwcmVsb2FkaW5nIGhhcyBmaW5pc2hlZFxuICAgICAgICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgcHJlbG9hZCB3YXMgaW5pdGlhdGVkXG4gICAgICAgKi9cbiAgICAgIGluaXQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5wcmVsb2FkZXIgIT09IGZhbHNlKSB7XG5cbiAgICAgICAgICB2YXIgcHJlbG9hZCA9IHRoaXMsXG4gICAgICAgICAgICAgIHN0ZXBJbWFnZXNUb1ByZWxvYWQsXG4gICAgICAgICAgICAgIGluZGl2aWR1YWxJbWFnZXNUb1ByZWxvYWQsXG4gICAgICAgICAgICAgIGltYWdlc1RvUHJlbG9hZCxcbiAgICAgICAgICAgICAgaW1nTG9hZCxcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgICAgIC8vIEFkZCBhIGNsYXNzIG9mIFwic2VxLXByZWxvYWRpbmdcIiB0byB0aGUgU2VxdWVuY2UgZWxlbWVudFxuICAgICAgICAgIGFkZENsYXNzKHNlbGYuJGNvbnRhaW5lciwgXCJzZXEtcHJlbG9hZGluZ1wiKTtcblxuICAgICAgICAgIC8vIEdldCB0aGUgcHJlbG9hZGVyXG4gICAgICAgICAgc2VsZi4kcHJlbG9hZGVyID0gc2VsZi51aS5nZXRFbGVtZW50cyhcInByZWxvYWRlclwiLCBzZWxmLm9wdGlvbnMucHJlbG9hZGVyKTtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgcHJlbG9hZGVyIGVsZW1lbnQgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgcHJlbG9hZC5hcHBlbmQoKTtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgcHJlbG9hZGVyJ3MgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgICBwcmVsb2FkLmFkZFN0eWxlcygpO1xuXG4gICAgICAgICAgLy8gSGlkZSBzdGVwcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgICBwcmVsb2FkLnRvZ2dsZVN0ZXBzVmlzaWJpbGl0eShcImhpZGVcIik7XG5cbiAgICAgICAgICAvLyBHZXQgaW1hZ2VzIGZyb20gcGFydGljdWxhciBTZXF1ZW5jZSBzdGVwcyB0byBiZSBwcmVsb2FkZWRcbiAgICAgICAgICAvLyBHZXQgaW1hZ2VzIHdpdGggc3BlY2lmaWMgc291cmNlIHZhbHVlcyB0byBiZSBwcmVsb2FkZWRcbiAgICAgICAgICBzdGVwSW1hZ2VzVG9QcmVsb2FkID0gcHJlbG9hZC5nZXRJbWFnZXNUb1ByZWxvYWQoc2VsZi5vcHRpb25zLnByZWxvYWRUaGVzZVN0ZXBzKTtcbiAgICAgICAgICBpbmRpdmlkdWFsSW1hZ2VzVG9QcmVsb2FkID0gcHJlbG9hZC5nZXRJbWFnZXNUb1ByZWxvYWQoc2VsZi5vcHRpb25zLnByZWxvYWRUaGVzZUltYWdlcywgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBDb21iaW5lIHN0ZXAgaW1hZ2VzIGFuZCBpbmRpdmlkdWFsIGltYWdlc1xuICAgICAgICAgIGltYWdlc1RvUHJlbG9hZCA9IHN0ZXBJbWFnZXNUb1ByZWxvYWQuY29uY2F0KGluZGl2aWR1YWxJbWFnZXNUb1ByZWxvYWQpO1xuXG4gICAgICAgICAgLy8gSW5pdGlhdGUgdGhlIGltYWdlc0xvYWRlZCBwbHVnaW5cbiAgICAgICAgICBpbWdMb2FkID0gaW1hZ2VzTG9hZGVkKGltYWdlc1RvUHJlbG9hZCk7XG5cbiAgICAgICAgICAvLyBXaGVuIGltYWdlc0xvYWRlZCgpIGhhcyBmaW5pc2hlZCAocmVnYXJkbGVzcyBvZiB3aGV0aGVyIGltYWdlc1xuICAgICAgICAgIC8vIGNvbXBsZXRlZCBvciBmYWlsZWQgdG8gbG9hZClcbiAgICAgICAgICBpbWdMb2FkLm9uKFwiYWx3YXlzXCIsIGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICAgICAgICBwcmVsb2FkLmNvbXBsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFRyYWNrIHRoZSBudW1iZXIgb2YgaW1hZ2VzIHRoYXQgaGF2ZSBsb2FkZWQgc28gZmFyXG4gICAgICAgICAgcHJvZ3Jlc3MgPSAxO1xuXG4gICAgICAgICAgaW1nTG9hZC5vbihcInByb2dyZXNzXCIsIGZ1bmN0aW9uKGluc3RhbmNlLCBpbWFnZSkge1xuXG4gICAgICAgICAgICAvLyBIYXMgdGhlIGltYWdlIGxvYWRlZCBvciBpcyBpdCBicm9rZW4/XG4gICAgICAgICAgICByZXN1bHQgPSBpbWFnZS5pc0xvYWRlZCA/ICdsb2FkZWQnOiAnYnJva2VuJztcblxuICAgICAgICAgICAgLy8gQ2FsbGJhY2tcbiAgICAgICAgICAgIHNlbGYucHJlbG9hZFByb2dyZXNzKHJlc3VsdCwgaW1hZ2UuaW1nLnNyYywgcHJvZ3Jlc3MrKywgaW1hZ2VzVG9QcmVsb2FkLmxlbmd0aCwgc2VsZik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBwcmVsb2FkaW5nIGhhcyBmaW5pc2hlZCwgc2hvdyB0aGUgc3RlcHMgYWdhaW4gYW5kIGhpZGUgdGhlIHByZWxvYWRlclxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHByZWxvYWRpbmcgaGFzIGZpbmlzaGVkXG4gICAgICAgKi9cbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgIHNlbGYucHJlbG9hZGVkKHNlbGYpO1xuXG4gICAgICAgIC8vIChEZWJ1Z2dpbmcgb25seSkgcHJldmVudCB0aGUgcHJlbG9hZGVyIGZyb20gaGlkaW5nIHNvIGl0J3Mgc3R5bGVzXG4gICAgICAgIC8vIGNhbiBiZSB0ZXN0ZWRcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5wYXVzZVByZWxvYWRlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgc3RlcHMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIHRoaXMudG9nZ2xlU3RlcHNWaXNpYmlsaXR5KFwic2hvd1wiKTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIFwicHJlbG9hZGluZ1wiIGNsYXNzIGFuZCBhZGQgdGhlIFwicHJlbG9hZGVkXCIgY2xhc3NcbiAgICAgICAgcmVtb3ZlQ2xhc3Moc2VsZi4kY29udGFpbmVyLCBcInNlcS1wcmVsb2FkaW5nXCIpO1xuICAgICAgICBhZGRDbGFzcyhzZWxmLiRjb250YWluZXIsIFwic2VxLXByZWxvYWRlZFwiKTtcbiAgICAgICAgYWRkQ2xhc3Moc2VsZi4kcHJlbG9hZGVyWzBdLCBcInNlcS1wcmVsb2FkZWRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMucHJlbG9hZEluZGljYXRvclRpbWVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucHJlbG9hZEluZGljYXRvclRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZmFsbGJhY2sgcHJlbG9hZGVyXG4gICAgICAgIGlmIChNb2Rlcm5penIucHJlZml4ZWQoXCJhbmltYXRpb25cIikgPT09IGZhbHNlIHx8IE1vZGVybml6ci5zdmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgc2VsZi4kcHJlbG9hZGVyWzBdLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgdGhlIHByZWxvYWRlcidzIHN0eWxlcyB0byB0aGUgPGhlYWQ+PC9oZWFkPlxuICAgICAgICovXG4gICAgICBhZGRTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMucHJlbG9hZGVyID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIDxoZWFkPiBhbmQgY3JlYXRlIHRoZSA8c3R5bGU+IGVsZW1lbnRcbiAgICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgICAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIGRlZmF1bHQgc3R5bGVzIHRvIHRoZSA8c3R5bGU+IGVsZW1lbnRcbiAgICAgICAgICB0aGlzLnN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICBpZiAodGhpcy5zdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGhpcy5kZWZhdWx0U3R5bGVzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLmRlZmF1bHRTdHlsZXMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIDxzdHlsZT4gZWxlbWVudCB0byB0aGUgPGhlYWQ+XG4gICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlRWxlbWVudCk7XG5cbiAgICAgICAgICAvLyBBbmltYXRlIHRoZSBwcmVsb2FkZXIgdXNpbmcgSmF2YVNjcmlwdCBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgU1ZHXG4gICAgICAgICAgaWYgKE1vZGVybml6ci5wcmVmaXhlZChcImFuaW1hdGlvblwiKSA9PT0gZmFsc2UgfHwgTW9kZXJuaXpyLnN2ZyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBwcmVsb2FkIGluZGljYXRvclxuICAgICAgICAgICAgdmFyIHByZWxvYWRJbmRpY2F0b3IgPSBzZWxmLiRwcmVsb2FkZXJbMF0uZmlyc3RDaGlsZDtcblxuICAgICAgICAgICAgdmFyIGluZGljYXRvckZsYXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHByZWxvYWRJbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICAgIHByZWxvYWRGbGFzaFRpbWUgPSAxMDAwO1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByZWxvYWRJbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW5kaWNhdG9yRmxhc2goKTtcblxuICAgICAgICAgICAgLy8gTWFrZSB0aGUgcHJlbG9hZCBpbmRpY2F0b3IgZmxhc2hcbiAgICAgICAgICAgIHRoaXMucHJlbG9hZEluZGljYXRvclRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGluZGljYXRvckZsYXNoKCk7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBwcmVsb2FkZXIncyBzdHlsZXMgZnJvbSB0aGUgPGhlYWQ+PC9oZWFkPlxuICAgICAgICovXG4gICAgICByZW1vdmVTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHRoaXMuc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zdHlsZUVsZW1lbnQpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgPGltZz4gZWxlbWVudHMgYW5kIHJldHVybiB0aGVtIHRvIGJlIHByZWxvYWRlZC4gRWxlbWVudHMgY2FuIGJlIGdvdFxuICAgICAgICogZWl0aGVyIHZpYSB0aGUgPGltZz4gZWxlbWVudCBpdHNlbGYgb3IgYSBzcmMgYXR0cmlidXRlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGVsZW1lbnRzIC0gQW4gaW50ZWdlciBhcnJheSBvZiBzdGVwcyB0byBnZXQgaW1hZ2VzIGZyb20gb3IgYSBzdHJpbmcgYXJyYXkgb2YgaW1hZ2Ugc291cmNlc1xuICAgICAgICogQHBhcmFtIHtCb29sZWFufSBzcmNPbmx5IC0gSXMgdGhlIGVsZW1lbnQgdG8gYmUgcmV0cmlldmVkIHZpYSB0aGUgc3JjP1xuICAgICAgICogQHJldHVybnMge0FycmF5fSBpbWFnZXNUb1ByZWxvYWQgLSBUaGUgaW1hZ2VzIHRvIHByZWxvYWQgaW4gYW4gYXJyYXlcbiAgICAgICAqL1xuICAgICAgZ2V0SW1hZ2VzVG9QcmVsb2FkOiBmdW5jdGlvbihlbGVtZW50cywgc3JjT25seSkge1xuXG4gICAgICAgIC8vIFdoZXJlIHdlJ2xsIHNhdmUgdGhlIGltYWdlc1xuICAgICAgICB2YXIgaW1hZ2VzVG9QcmVsb2FkID0gW107XG5cbiAgICAgICAgaWYgKGlzQXJyYXkoZWxlbWVudHMpID09PSB0cnVlKSB7XG5cbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgZWxlbWVudExlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgc3RlcCxcbiAgICAgICAgICAgICAgaW1hZ2VzSW5TdGVwLFxuICAgICAgICAgICAgICBpbWFnZXNJblN0ZXBMZW5ndGgsXG4gICAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgICBpbWcsXG4gICAgICAgICAgICAgIHNyYztcblxuICAgICAgICAgIC8vIEdldCBlYWNoIHN0ZXAncyA8aW1nPiBlbGVtZW50cyBhbmQgYWRkIHRoZW0gdG8gaW1hZ2VzVG9QcmVsb2FkXG4gICAgICAgICAgaWYgKHNyY09ubHkgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgLy8gR2V0IGVhY2ggc3RlcFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnRMZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgc3RlcCBhbmQgYW55IGltYWdlcyBiZWxvbmdpbmcgdG8gaXRcbiAgICAgICAgICAgICAgc3RlcCA9IHNlbGYuJHN0ZXBzW2ldO1xuICAgICAgICAgICAgICBpbWFnZXNJblN0ZXAgPSBzdGVwLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW1nXCIpO1xuICAgICAgICAgICAgICBpbWFnZXNJblN0ZXBMZW5ndGggPSBpbWFnZXNJblN0ZXAubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIC8vIEdldCBlYWNoIGltYWdlIHdpdGhpbiB0aGUgc3RlcFxuICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgaW1hZ2VzSW5TdGVwTGVuZ3RoOyBqKyspIHtcblxuICAgICAgICAgICAgICAgIGltYWdlID0gaW1hZ2VzSW5TdGVwW2pdO1xuICAgICAgICAgICAgICAgIGltYWdlc1RvUHJlbG9hZC5wdXNoKGltYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEdldCBlYWNoIHN0ZXAncyA8aW1nPiBlbGVtZW50cyB2aWEgdGhlIHNyYyBhbmQgYWRkIHRoZW0gdG8gaW1hZ2VzVG9QcmVsb2FkXG4gICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIGltZyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHNyYyA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgICAgIGltZ1tpXSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICBpbWdbaV0uc3JjID0gc3JjO1xuXG4gICAgICAgICAgICAgIGltYWdlc1RvUHJlbG9hZC5wdXNoKGltZ1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGltYWdlc1RvUHJlbG9hZDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQXBwZW5kIHRoZSBkZWZhdWx0IHByZWxvYWRlclxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB3aGV0aGVyIHRoZSBkZWZhdWx0IHByZWxvYWRlciB3YXMgYXBwZW5kZWQgb3Igbm90XG4gICAgICAgKi9cbiAgICAgIGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5wcmVsb2FkZXIgPT09IHRydWUpIHtcblxuICAgICAgICAgIC8vIFNldCB1cCB0aGUgcHJlbG9hZGVyIGNvbnRhaW5lclxuICAgICAgICAgIHNlbGYuJHByZWxvYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc2VsZi4kcHJlbG9hZGVyLmNsYXNzTmFtZSA9IFwic2VxLXByZWxvYWRlclwiO1xuXG4gICAgICAgICAgLy8gQ29udmVydCB0aGUgcHJlbG9hZGVyIHRvIGFuIGFycmF5XG4gICAgICAgICAgc2VsZi4kcHJlbG9hZGVyID0gW3NlbGYuJHByZWxvYWRlcl07XG5cbiAgICAgICAgICAvLyBVc2UgdGhlIGZhbGxiYWNrIHByZWxvYWRlciBpZiBDU1Mga2V5ZnJhbWVzIG9yIFNWRyBhcmVuJ3Qgc3VwcG9ydGVkXG4gICAgICAgICAgaWYgKE1vZGVybml6ci5wcmVmaXhlZChcImFuaW1hdGlvblwiKSAhPT0gZmFsc2UgJiYgTW9kZXJuaXpyLnN2ZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2VsZi4kcHJlbG9hZGVyWzBdLmlubmVySFRNTCA9IHNlbGYucHJlbG9hZC5kZWZhdWx0SHRtbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi4kcHJlbG9hZGVyWzBdLmlubmVySFRNTCA9IHNlbGYucHJlbG9hZC5mYWxsYmFja0h0bWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWRkIHRoZSBwcmVsb2FkZXJcbiAgICAgICAgICBzZWxmLiRjb250YWluZXIuaW5zZXJ0QmVmb3JlKHNlbGYuJHByZWxvYWRlclswXSwgbnVsbCk7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgZW5hYmxlZCwgaGlkZS9zaG93IFNlcXVlbmNlIHN0ZXBzIHVudGlsIHByZWxvYWRpbmcgaGFzIGZpbmlzaGVkXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBcInNob3dcIiBvciBcImhpZGVcIlxuICAgICAgICovXG4gICAgICB0b2dnbGVTdGVwc1Zpc2liaWxpdHk6IGZ1bmN0aW9uKHR5cGUpIHtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmhpZGVTdGVwc1VudGlsUHJlbG9hZGVkID09PSB0cnVlKSB7XG5cbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgc3RlcDtcblxuICAgICAgICAgIC8vIEhpZGUgb3Igc2hvdyBlYWNoIHN0ZXBcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZi5ub09mU3RlcHM7IGkrKykge1xuICAgICAgICAgICAgc3RlcCA9IHNlbGYuJHN0ZXBzW2ldO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJoaWRlXCIpIHtcbiAgICAgICAgICAgICAgc2VsZi51aS5oaWRlKHN0ZXAsIDApO1xuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLnVpLnNob3coc3RlcCwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkIGFuZCByZW1vdmUgU2VxdWVuY2UgZXZlbnRzXG4gICAgICovXG4gICAgc2VsZi5tYW5hZ2VFdmVudHMgPSB7XG5cbiAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGFkZGVkIGV2ZW50cyBoZXJlXG4gICAgICBsaXN0OiB7XG4gICAgICAgIFwibG9hZFwiOiBbXSxcbiAgICAgICAgXCJjbGlja1wiOiBbXSxcbiAgICAgICAgXCJ0b3VjaHN0YXJ0XCI6IFtdLFxuICAgICAgICBcIm1vdXNlbW92ZVwiOiBbXSxcbiAgICAgICAgXCJtb3VzZWxlYXZlXCI6IFtdLFxuICAgICAgICBcImhhbW1lclwiOiBbXSxcbiAgICAgICAgXCJrZXl1cFwiOiBbXSxcbiAgICAgICAgXCJoYXNoY2hhbmdlXCI6IFtdLFxuICAgICAgICBcInJlc2l6ZVwiOiBbXVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgdXAgZXZlbnRzIG9uIGluaXRcbiAgICAgICAqL1xuICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLy8gQWRkIHZpc2liaWxpdHlDaGFuZ2UgdG8gdGhlIGxpc3Qgb2YgZXZlbnRzXG4gICAgICAgIHNlbGYubWFuYWdlRXZlbnRzLmxpc3RbdmlzaWJpbGl0eUNoYW5nZV0gPSBbXTtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmhhc2hUYWdzID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5hZGQuaGFzaENoYW5nZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5zd2lwZU5hdmlnYXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmFkZC5zd2lwZU5hdmlnYXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmhhbW1lclRpbWUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMua2V5TmF2aWdhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuYWRkLmtleU5hdmlnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRocm90dGxlcyB0aGUgcmVzaXplIGV2ZW50IHRvIG9uY2UgZXZlcnkgMTAwbXNcbiAgICAgICAgdGhpcy5hZGQucmVzaXplVGhyb3R0bGUoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHN0YXJ0L3N0b3AgU2VxdWVuY2Ugd2hlbiBwYWdlIHZpc2liaWxpdHkgY2hhbmdlc1xuICAgICAgICB0aGlzLmFkZC5wYWdlVmlzaWJpbGl0eSgpO1xuXG4gICAgICAgIC8vIElmIGJlaW5nIHVzZWQsIGdldCB0aGUgbmV4dCBidXR0b24ocykgYW5kIHNldCB1cCB0aGUgZXZlbnRzXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMubmV4dEJ1dHRvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZWxmLiRuZXh0ID0gc2VsZi51aS5nZXRFbGVtZW50cyhcIm5leHRCdXR0b25cIiwgc2VsZi5vcHRpb25zLm5leHRCdXR0b24pO1xuICAgICAgICAgIHRoaXMuYWRkLmJ1dHRvbihzZWxmLiRuZXh0LCBcIm5hdlwiLCBzZWxmLm5leHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYmVpbmcgdXNlZCwgZ2V0IHRoZSBuZXh0IGJ1dHRvbihzKSBhbmQgc2V0IHVwIHRoZSBldmVudHNcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5wcmV2QnV0dG9uICE9PSBmYWxzZSkge1xuICAgICAgICAgIHNlbGYuJHByZXYgPSBzZWxmLnVpLmdldEVsZW1lbnRzKFwicHJldkJ1dHRvblwiLCBzZWxmLm9wdGlvbnMucHJldkJ1dHRvbik7XG4gICAgICAgICAgdGhpcy5hZGQuYnV0dG9uKHNlbGYuJHByZXYsIFwibmF2XCIsIHNlbGYucHJldik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBiZWluZyB1c2VkLCBnZXQgdGhlIGF1dG9QbGF5IGJ1dHRvbihzKSBhbmQgc2V0IHVwIHRoZSBldmVudHNcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5hdXRvUGxheUJ1dHRvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZWxmLiRhdXRvUGxheSA9IHNlbGYudWkuZ2V0RWxlbWVudHMoXCJhdXRvUGxheUJ1dHRvblwiLCBzZWxmLm9wdGlvbnMuYXV0b1BsYXlCdXR0b24pO1xuICAgICAgICAgIHRoaXMuYWRkLmJ1dHRvbihzZWxmLiRhdXRvUGxheSwgXCJuYXZcIiwgc2VsZi50b2dnbGVBdXRvUGxheSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBiZWluZyB1c2VkLCBzZXQgdXAgdGhlIHN0b3BPbkhvdmVyIGV2ZW50XG4gICAgICAgIHRoaXMuYWRkLnN0b3BPbkhvdmVyKCk7XG5cbiAgICAgICAgLy8gSWYgYmVpbmcgdXNlZCwgZ2V0IHRoZSBwYWdpbmF0aW9uIGVsZW1lbnQocykgYW5kIHNldCB1cCB0aGUgZXZlbnRzXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMucGFnaW5hdGlvbiAhPT0gZmFsc2UpIHtcblxuICAgICAgICAgIHNlbGYuJHBhZ2luYXRpb24gPSB7fTtcblxuICAgICAgICAgIC8vIFRoZSBTZXF1ZW5jZSBlbGVtZW50IGFuZCB0aGUgbGlua3MgdGhhdCB3aWxsIGNvbnRyb2wgaXRcbiAgICAgICAgICBzZWxmLiRwYWdpbmF0aW9uLnJlbGF0ZWRFbGVtZW50SWQgPSBpbnN0YW5jZTtcbiAgICAgICAgICBzZWxmLiRwYWdpbmF0aW9uLmxpbmtzID0gW107XG5cbiAgICAgICAgICBzZWxmLiRwYWdpbmF0aW9uLmVsZW1lbnRzID0gc2VsZi51aS5nZXRFbGVtZW50cyhcInBhZ2luYXRpb25cIiwgc2VsZi5vcHRpb25zLnBhZ2luYXRpb24pO1xuXG4gICAgICAgICAgdGhpcy5hZGQuYnV0dG9uKHNlbGYuJHBhZ2luYXRpb24uZWxlbWVudHMsIFwicGFnaW5hdGlvblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmUgYWxsIGV2ZW50cyBhdCBvbmNlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUFsbDogZnVuY3Rpb24oZXZlbnRMaXN0KSB7XG5cbiAgICAgICAgdmFyIGV2ZW50VHlwZSxcbiAgICAgICAgICAgIHRoZUV2ZW50cztcblxuICAgICAgICAvLyBSZW1vdmUgZWFjaCBldmVudFxuICAgICAgICBmb3IgKGV2ZW50VHlwZSBpbiBldmVudExpc3QpIHtcbiAgICAgICAgICBpZiAoZXZlbnRMaXN0Lmhhc093blByb3BlcnR5KGV2ZW50VHlwZSkgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdGhlRXZlbnRzID0gZXZlbnRMaXN0W2V2ZW50VHlwZV07XG5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGV2ZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSBhbiBldmVudCBmcm9tIGFsbCBvZiB0aGUgZWxlbWVudHMgaXQgaXMgYXR0YWNoZWQgdG9cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGV2ZW50IHRvIHJlbW92ZSBlZy4gXCJjbGlja1wiXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24odHlwZSkge1xuXG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudHMgdXNpbmcgdGhlIGV2ZW50IGFuZCBjb3VudCB0aGVtXG4gICAgICAgIHZhciBldmVudEVsZW1lbnRzID0gc2VsZi5tYW5hZ2VFdmVudHMubGlzdFt0eXBlXTtcbiAgICAgICAgdmFyIGV2ZW50RWxlbWVudHNMZW5ndGggPSBldmVudEVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICBzd2l0Y2godHlwZSkge1xuXG4gICAgICAgICAgY2FzZSBcImhhc2hjaGFuZ2VcIjpcbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMuaGFzaFRhZ3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlSGFzaENoYW5nZShldmVudEVsZW1lbnRzWzBdLmhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcImhhbW1lclwiOlxuXG4gICAgICAgICAgICBpZiAoc2VsZi5tYW5hZ2VFdmVudHMubGlzdC5oYW1tZXIubGVuZ3RoID4gMCAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IHNlbGYubWFuYWdlRXZlbnRzLmxpc3QuaGFtbWVyWzBdLmhhbmRsZXI7XG4gICAgICAgICAgICAgIHNlbGYuaGFtbWVyVGltZS5vZmYoXCJzd2lwZVwiLCBbaGFuZGxlcl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBldmVudCBmcm9tIGVhY2ggZWxlbWVudFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEVsZW1lbnRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50UHJvcGVydGllcyA9IGV2ZW50RWxlbWVudHNbaV07XG5cbiAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQoZXZlbnRQcm9wZXJ0aWVzLmVsZW1lbnQsIHR5cGUsIGV2ZW50UHJvcGVydGllcy5oYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgYWRkOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCB0aGUgaGFzaGNoYW5nZSBldmVudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IENvbnRhaW5pbmcgYW4gb2JqZWN0IHdpdGggdGhlIGVsZW1lbnQgYW5kIGhhbmRsZXJcbiAgICAgICAgICovXG4gICAgICAgIGhhc2hDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgLy8gU2V0dXAgdGhlIGNyb3NzLWJyb3dzZXIgaGFzaGNoYW5nZSBldmVudFxuICAgICAgICAgIHNlbGYuaGFzaFRhZ3Muc2V0dXBFdmVudCgpO1xuXG4gICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgIHZhciBuZXdIYXNoVGFnLFxuICAgICAgICAgICAgICAgIGlkO1xuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGhhc2hUYWcgZnJvbSB0aGUgVVJMXG4gICAgICAgICAgICBuZXdIYXNoVGFnID0gZS5uZXdVUkwgfHwgbG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgIG5ld0hhc2hUYWcgPSBuZXdIYXNoVGFnLnNwbGl0KFwiIyFcIilbMV07XG5cbiAgICAgICAgICAgIC8vIEdvIHRvIHRoZSBuZXcgc3RlcCBpZiB3ZSdyZSBub3QgYWxyZWFkeSBvbiBpdFxuICAgICAgICAgICAgaWYgKHNlbGYuY3VycmVudEhhc2hUYWcgIT09IG5ld0hhc2hUYWcpIHtcblxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIElEIG9mIHRoZSBuZXcgaGFzaCB0YWcgYW5kIG9uZS1iYXNlIGl0XG4gICAgICAgICAgICAgIGlkID0gc2VsZi5zdGVwSGFzaFRhZ3MuaW5kZXhPZihuZXdIYXNoVGFnKSArIDE7XG5cbiAgICAgICAgICAgICAgc2VsZi5jdXJyZW50SGFzaFRhZyA9IG5ld0hhc2hUYWc7XG5cbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIEdvIHRvIHRoZSBuZXcgc3RlcFxuICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgKiBOb3RlOiBXaGVuIHRoZSB1c2VyIGlzIG5hdmlnYXRpbmcgdGhyb3VnaCBoaXN0b3J5IHZpYSB0aGVpclxuICAgICAgICAgICAgICAgKiBicm93c2VyJ3MgYmFjay9mb3J3YXJkIGJ1dHRvbnMgZm9yIGV4YW1wbGUsIHdlIGNhbid0IHByZXZlbnRcbiAgICAgICAgICAgICAgICogZ29pbmcgdG8gYSBzdGVwIHRvIG1lZXQgdGhlIG5hdmlnYXRpb25Ta2lwVGhyZXNob2xkIG9wdGlvbi4gVG9cbiAgICAgICAgICAgICAgICogcHJldmVudCB0aGUgaGFzaFRhZyBhbmQgdGhlIGN1cnJlbnQgc3RlcCBmcm9tIGJlY29taW5nXG4gICAgICAgICAgICAgICAqIHVuc3luY2hyb25pemVkIHdlIG11c3QgaWdub3JlIHRoZSBuYXZpZ2F0aW9uU2tpcFRocmVzaG9sZFxuICAgICAgICAgICAgICAgKiBzZXR0aW5nLlxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgc2VsZi5nb1RvKGlkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGFkZEhhc2hDaGFuZ2UoaGFuZGxlcik7XG5cbiAgICAgICAgICBzZWxmLm1hbmFnZUV2ZW50cy5saXN0Lmhhc2hjaGFuZ2UucHVzaCh7XCJlbGVtZW50XCI6IHdpbmRvdywgXCJoYW5kbGVyXCI6IGhhbmRsZXJ9KTtcblxuICAgICAgICAgIHJldHVybiBzZWxmLm1hbmFnZUV2ZW50cy5saXN0Lmhhc2hjaGFuZ2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCAgYnV0dG9uc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBlbGVtZW50cyAtIFRoZSBlbGVtZW50IG9yIGVsZW1lbnRzIGFjdGluZyBhcyB0aGUgbmV4dCBidXR0b25cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBidXR0b24gYmVpbmcgYWRkZWQgLSBcIm5hdlwiIG9yIFwicGFnaW5hdGlvblwiXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IENvbnRhaW5pbmcgYW4gb2JqZWN0IHdpdGggdGhlIGVsZW1lbnQgYW5kIGhhbmRsZXJcbiAgICAgICAgICovXG4gICAgICAgIGJ1dHRvbjogZnVuY3Rpb24oZWxlbWVudHMsIHR5cGUsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgICAvLyBDb3VudCB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGJlaW5nIGFkZGVkXG4gICAgICAgICAgdmFyIGVsZW1lbnRzTGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LFxuICAgICAgICAgICAgICBidXR0b25FdmVudCxcbiAgICAgICAgICAgICAgcGFyZW50LFxuICAgICAgICAgICAgICByZWwsXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCBhIGNsaWNrIGV2ZW50IGZvciBuYXZpZ2F0aW9uIGVsZW1lbnRzXG4gICAgICAgICAgICBjYXNlIFwibmF2XCI6XG5cbiAgICAgICAgICAgICAgYnV0dG9uRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gYWRkRXZlbnQoZWxlbWVudCwgXCJjbGlja1wiLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGFjdGlvbiAtIHRoaXMgaXMgc28gPGEgaHJlZj1cIiNzdGVwMVwiPlxuICAgICAgICAgICAgICAgICAgLy8gY2FuIGFjdCBhcyBhIG5hdmlnYXRpb24gZWxlbWVudCBidXQgdGhlIGFuY2hvciBsaW5rIHdpbGxcbiAgICAgICAgICAgICAgICAgIC8vIG9ubHkgYWN0aXZhdGUgd2hlbiBKUyBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gU2V0IHVwIGEgY2xpY2sgZXZlbnQgZm9yIHBhZ2luYXRpb25cbiAgICAgICAgICAgIGNhc2UgXCJwYWdpbmF0aW9uXCI6XG5cbiAgICAgICAgICAgICAgYnV0dG9uRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50LCByZWwpIHtcblxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhZGRFdmVudChlbGVtZW50LCBcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50LCBlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIC0gdGhpcyBpcyBzbyA8YSBocmVmPVwiI3N0ZXAxXCI+XG4gICAgICAgICAgICAgICAgICAvLyBjYW4gYWN0IGFzIGEgcGFnaW5hdGlvbiBlbGVtZW50IGJ1dCB0aGUgYW5jaG9yIGxpbmsgd2lsbFxuICAgICAgICAgICAgICAgICAgLy8gb25seSBhY3RpdmF0ZSB3aGVuIEpTIGlzIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgSUQgb2YgdGhlIGNsaWNrZWQgcGFnaW5hdGlvbiBsaW5rXG4gICAgICAgICAgICAgICAgICBpZCA9IGhhc1BhcmVudChwYXJlbnQsIHRhcmdldEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBHbyB0byB0aGUgY2xpY2tlZCBwYWdpbmF0aW9uIElEXG4gICAgICAgICAgICAgICAgICBzZWxmLmdvVG8oaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcGFnaW5hdGlvbiBsaW5rc1xuICAgICAgICAgICAgICAgIHNlbGYuJHBhZ2luYXRpb24ubGlua3MucHVzaChzZWxmLnBhZ2luYXRpb24uZ2V0TGlua3MoZWxlbWVudCwgcmVsKSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEFkZCBhIGNsaWNrIGV2ZW50IGZvciBlYWNoIGVsZW1lbnRcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgICAvLyBEb2VzIHRoZSBidXR0b24gY29udHJvbCBhIHNwZWNpZmljIFNlcXVlbmNlIGluc3RhbmNlP1xuICAgICAgICAgICAgcmVsID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJyZWxcIik7XG5cbiAgICAgICAgICAgIC8vIFRoZSBidXR0b24gY29udHJvbHMgb25lIFNlcXVlbmNlIGluc3RhbmNlXG4gICAgICAgICAgICAvLyAoZGVmaW5lZCB2aWEgdGhlIHJlbCBhdHRyaWJ1dGUpXG4gICAgICAgICAgICBpZiAocmVsID09PSBzZWxmLiRjb250YWluZXIuaWQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlcS1idXR0b25cIikgPT09IG51bGwpIHtcblxuICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc2VxLWJ1dHRvblwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgYnV0dG9uRXZlbnQoZWxlbWVudCwgcmVsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIGJ1dHRvbiBjb250cm9scyBhbGwgU2VxdWVuY2UgaW5zdGFuY2VzXG4gICAgICAgICAgICBlbHNlIGlmIChyZWwgPT09IG51bGwgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlcS1idXR0b25cIikgPT09IG51bGwpIHtcblxuICAgICAgICAgICAgICBidXR0b25FdmVudChlbGVtZW50LCByZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBlbGVtZW50IGFuZCBpdHMgaGFuZGxlciBmb3IgbGF0ZXIsIHNob3VsZCBpdCBuZWVkIHRvXG4gICAgICAgICAgICAvLyBiZSByZW1vdmVkXG4gICAgICAgICAgICBzZWxmLm1hbmFnZUV2ZW50cy5saXN0LmNsaWNrLnB1c2goe1wiZWxlbWVudFwiOiBlbGVtZW50LCBcImhhbmRsZXJcIjogaGFuZGxlcn0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzZWxmLm1hbmFnZUV2ZW50cy5saXN0LmNsaWNrO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9wIGFuZCBzdGFydCBhdXRvUGxheSB3aGVuIHRoZSB1c2VyJ3MgY3Vyc29yIGVudGVycyBhbmQgbGVhdmVzXG4gICAgICAgICAqIHRoZSBTZXF1ZW5jZSBlbGVtZW50IGFjY29yZGluZ2x5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBOb3RlOiBhdXRvUGxheSB3aWxsIGJlIHN0b3BwZWQgb25seSB3aGVuIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZVxuICAgICAgICAgKiBib3VuZGFyaWVzIG9mIHRoZSBTZXF1ZW5jZSBlbGVtZW50LCBlaXRoZXIgb24gdGhlIGVsZW1lbnQgaXRzZWxmIG9yXG4gICAgICAgICAqIGl0cyBjaGlsZHJlbi4gQ2hpbGQgZWxlbWVudHMgb3ZlcmZsb3dpbmcgdGhlIFNlcXVlbmNlIGVsZW1lbnQgd2lsbFxuICAgICAgICAgKiBub3QgY2F1c2UgU2VxdWVuY2UgdG8gYmUgc3RvcHBlZC5cbiAgICAgICAgICovXG4gICAgICAgIHN0b3BPbkhvdmVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgIHZhciBwcmV2aW91c2x5SW5zaWRlID0gZmFsc2UsXG4gICAgICAgICAgICAgIHRvdWNoSGFuZGxlcixcbiAgICAgICAgICAgICAgaGFuZGxlcjtcblxuICAgICAgICAgIHNlbGYuaXNNb3VzZU92ZXIgPSBmYWxzZTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIERldGVybWluZSB3aGVuIHRoZSB1c2VyIHRvdWNoZXMgdGhlIGNvbnRhaW5lci4gVGhpcyBpcyBzbyB3ZSBjYW5cbiAgICAgICAgICAgKiBkaXNhYmxlIHRoZSB1c2Ugb2Ygc3RvcE9uSG92ZXIgZm9yIHRvdWNoZXMsIGJ1dCBub3QgZm9yIG1vdXNlbW92ZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRvdWNoSGFuZGxlciA9IGFkZEV2ZW50KHNlbGYuJGNvbnRhaW5lciwgXCJ0b3VjaHN0YXJ0XCIsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgc2VsZi5pc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU2F2ZSB0aGUgZXZlbnRcbiAgICAgICAgICBzZWxmLm1hbmFnZUV2ZW50cy5saXN0LnRvdWNoc3RhcnQucHVzaCh7XCJlbGVtZW50XCI6IHNlbGYuJGNvbnRhaW5lciwgXCJoYW5kbGVyXCI6IHRvdWNoSGFuZGxlcn0pO1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogU3RvcCBhdXRvUGxheSBvbmx5IHdoZW4gdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlXG4gICAgICAgICAgICogU2VxdWVuY2UgZWxlbWVudFxuICAgICAgICAgICAqL1xuICAgICAgICAgIGhhbmRsZXIgPSBhZGRFdmVudChzZWxmLiRjb250YWluZXIsIFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlciB0b3VjaGVkIHRoZSBjb250YWluZXIsIGRvbid0IHN0b3AgLSBzdG9wT25Ib3ZlclxuICAgICAgICAgICAgLy8gc2hvdWxkIG9ubHkgb2NjdXIgd2hlbiBhIG1vdXNlIGN1cnNvciBpcyB1c2VkXG4gICAgICAgICAgICBpZiAoc2VsZi5pc1RvdWNoZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgc2VsZi5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJcyB0aGUgY3Vyc29yIGluc2lkZSB0aGUgU2VxdWVuY2UgZWxlbWVudD9cbiAgICAgICAgICAgIGlmIChpbnNpZGVFbGVtZW50KHNlbGYuJGNvbnRhaW5lciwgZSkgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAvLyBQYXVzZSBpZiB0aGUgY3Vyc29yIHdhcyBwcmV2aW91c2x5IG91dHNpZGUgdGhlIFNlcXVlbmNlIGVsZW1lbnRcbiAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5hdXRvUGxheVBhdXNlT25Ib3ZlciA9PT0gdHJ1ZSAmJiBzZWxmLmlzTW91c2VPdmVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYXV0b1BsYXkucGF1c2UoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFdlJ3JlIG5vdyBpbnNpZGUgdGhlIFNlcXVlbmNlIGVsZW1lbnRcbiAgICAgICAgICAgICAgc2VsZi5pc01vdXNlT3ZlciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBjdXJzb3IgaXMgb3V0c2lkZSBvZiB0aGUgbWFpbiBjb250YWluZXIsIGJ1dCBvdmVyIGNoaWxkXG4gICAgICAgICAgICAvLyBlbGVtZW50cyBiZWxvbmdpbmcgdG8gdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgLy8gVW5wYXVzZSBpZiB0aGUgY3Vyc29yIHdhcyBwcmV2aW91c2x5IGluc2lkZSB0aGUgU2VxdWVuY2UgZWxlbWVudFxuICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmF1dG9QbGF5UGF1c2VPbkhvdmVyID09PSB0cnVlICYmIHNlbGYuaXNNb3VzZU92ZXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmF1dG9QbGF5LnVucGF1c2UoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFdlJ3JlIG5vdyBvdXRzaWRlIHRoZSBTZXF1ZW5jZSBlbGVtZW50XG4gICAgICAgICAgICAgIHNlbGYuaXNNb3VzZU92ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFNhdmUgdGhlIGV2ZW50XG4gICAgICAgICAgc2VsZi5tYW5hZ2VFdmVudHMubGlzdC5tb3VzZW1vdmUucHVzaCh7XCJlbGVtZW50XCI6IHNlbGYuJGNvbnRhaW5lciwgXCJoYW5kbGVyXCI6IGhhbmRsZXJ9KTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFN0YXJ0IGF1dG9QbGF5IHdoZW4gdGhlIGN1cnNvciBsZWF2ZXMgdGhlIFNlcXVlbmNlIGVsZW1lbnRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBoYW5kbGVyID0gYWRkRXZlbnQoc2VsZi4kY29udGFpbmVyLCBcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmF1dG9QbGF5UGF1c2VPbkhvdmVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHNlbGYuYXV0b1BsYXkudW5wYXVzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSdyZSBub3cgb3V0c2lkZSB0aGUgU2VxdWVuY2UgZWxlbWVudFxuICAgICAgICAgICAgc2VsZi5pc01vdXNlT3ZlciA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU2F2ZSB0aGUgZXZlbnRcbiAgICAgICAgICBzZWxmLm1hbmFnZUV2ZW50cy5saXN0Lm1vdXNlbGVhdmUucHVzaCh7XCJlbGVtZW50XCI6IHNlbGYuJGNvbnRhaW5lciwgXCJoYW5kbGVyXCI6IGhhbmRsZXJ9KTtcblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOYXZpZ2F0ZSB0byBhIHN0ZXAgd2hlbiBTZXF1ZW5jZSBpcyBzd2lwZWRcbiAgICAgICAgICovXG4gICAgICAgIHN3aXBlTmF2aWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAvLyBEb24ndCB1c2Ugc3dpcGUgbmF2aWdhdGlvbiBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnRcbiAgICAgICAgICAvLyBhZGRFdmVudExpc3RlbmVyIChIYW1tZXIuanMgbmVlZHMgaXQpXG4gICAgICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuaGFtbWVyVGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBoYW1tZXJEaXJlY3Rpb24sXG4gICAgICAgICAgICAgIGhhbmRsZXI7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIEhhbW1lciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgc3dpdGNoKGUuZGlyZWN0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBMZWZ0XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLnN3aXBlRXZlbnRzLmxlZnQoc2VsZik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvLyBSaWdodFxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5zd2lwZUV2ZW50cy5yaWdodChzZWxmKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8vIFVwXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLnN3aXBlRXZlbnRzLnVwKHNlbGYpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgLy8gRG93blxuICAgICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMuc3dpcGVFdmVudHMuZG93bihzZWxmKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gU2V0IHVwIHRoZSBzd2lwZSBldmVudFxuICAgICAgICAgICAgc2VsZi5oYW1tZXJUaW1lID0gbmV3IEhhbW1lcihzZWxmLiRjb250YWluZXIpLm9uKFwic3dpcGVcIiwgaGFuZGxlcik7XG5cbiAgICAgICAgICAgIC8vIFNldCBIYW1tZXIncyBTd2lwZSBvcHRpb25zXG4gICAgICAgICAgICBzZWxmLmhhbW1lclRpbWUuZ2V0KFwic3dpcGVcIikuc2V0KHNlbGYub3B0aW9ucy5zd2lwZUhhbW1lck9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgdGhlIEhhbW1lciBkaXJlY3Rpb24gdGhhdCBuZWVkcyB0byBiZSBzZXQgYmFzZWQgb24gdGhlXG4gICAgICAgICAgICAvLyBzd2lwZSBkaXJlY3Rpb25zIGJlaW5nIHVzZWQgKGhhbW1lcmpzLmdpdGh1Yi5pby9hcGkvI2RpcmVjdGlvbnMpXG4gICAgICAgICAgICBoYW1tZXJEaXJlY3Rpb24gPSBnZXRIYW1tZXJEaXJlY3Rpb24oc2VsZi5vcHRpb25zLnN3aXBlRXZlbnRzKTtcbiAgICAgICAgICAgIHNlbGYuaGFtbWVyVGltZS5nZXQoXCJzd2lwZVwiKS5zZXQoe2RpcmVjdGlvbjogaGFtbWVyRGlyZWN0aW9ufSk7XG5cbiAgICAgICAgICAgIHNlbGYubWFuYWdlRXZlbnRzLmxpc3QuaGFtbWVyLnB1c2goe1wiZWxlbWVudFwiOiBzZWxmLiRjb250YWluZXIsIFwiaGFuZGxlclwiOiBoYW5kbGVyfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOYXZpZ2F0ZSB0byBhIHN0ZXAgd2hlbiBjb3JyZXNwb25kaW5nIGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgICovXG4gICAgICAgIGtleU5hdmlnYXRpb246IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgdmFyIGhhbmRsZXIgPSBhZGRFdmVudChkb2N1bWVudCwgXCJrZXl1cFwiLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICAgIGV2ZW50ID0gd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGtleSBwcmVzc2VkXG4gICAgICAgICAgICB2YXIga2V5Q29kZUNoYXIgPSBwYXJzZUludChTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LmtleUNvZGUpKTtcblxuICAgICAgICAgICAgLy8gR28gdG8gdGhlIG51bWVyaWMga2V5IHByZXNzZWRcbiAgICAgICAgICAgIGlmICgoa2V5Q29kZUNoYXIgPiAwICYmIGtleUNvZGVDaGFyIDw9IHNlbGYubm9PZlN0ZXBzKSAmJiAoc2VsZi5vcHRpb25zLm51bWVyaWNLZXlzR29Ub1N0ZXBzKSkge1xuICAgICAgICAgICAgICBzZWxmLmdvVG8oa2V5Q29kZUNoYXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXaGVuIGxlZnQvcmlnaHQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZCwgZ28gdG8gcHJldi9uZXh0IHN0ZXBzXG4gICAgICAgICAgICBzd2l0Y2goZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5rZXlFdmVudHMubGVmdChzZWxmKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMua2V5RXZlbnRzLnJpZ2h0KHNlbGYpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNlbGYubWFuYWdlRXZlbnRzLmxpc3Qua2V5dXAucHVzaCh7XCJlbGVtZW50XCI6IGRvY3VtZW50LCBcImhhbmRsZXJcIjogaGFuZGxlcn0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaHJvdHRsZSB0aGUgd2luZG93IHJlc2l6ZSBldmVudCBzbyBpdCBvbmx5IG9jY3VycyBldmVyeSB4IGFtb3VudCBvZlxuICAgICAgICAgKiBtaWxsaXNlY29uZHMsIGFzIGRlZmluZWQgYnkgdGhlIHJlc2l6ZVRocmVzaG9sZCBnbG9iYWwgdmFyaWFibGUuXG4gICAgICAgICAqL1xuICAgICAgICByZXNpemVUaHJvdHRsZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAvLyBFdmVudHMgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgdGhyb3R0bGVkIHdpbmRvdyByZXNpemUgb2NjdXJzXG4gICAgICAgICAgZnVuY3Rpb24gdGhyb3R0bGVkRXZlbnRzKCkge1xuXG4gICAgICAgICAgICAvLyBVc2UgYSBkZWxheSB0byBnaXZlIHRoZSBicm93c2VyIGEgY2hhbmNlIHRvIHJlcGFpbnQgYmVmb3JlXG4gICAgICAgICAgICAvLyBnZXR0aW5nIHRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZWxmLmNhbnZhcy5nZXRUcmFuc2Zvcm1Qcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIFNuYXAgdG8gdGhlIGN1cnJlbnRseSBhY3RpdmUgc3RlcFxuICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgKiBBc3N1bWUgdGhlIGNhbnZhcyBpcyBsYWlkIG91dCBpbiBhIDIgeCAyIGdyaWQsIHRoZSBTZXF1ZW5jZVxuICAgICAgICAgICAgICAgKiBlbGVtZW50IGhhcyBhIGhlaWdodCBvZiAxMDAlLCBhbmQgdGhlIHVzZXIgaXMgdmlld2luZyB0aGUgc2Vjb25kXG4gICAgICAgICAgICAgICAqIHJvdyBvZiBzdGVwcyAtLSB3aGVuIHRoZSB1c2VyIHJlc2l6ZXMgdGhlIHdpbmRvdywgdGhlIHNlY29uZCByb3dcbiAgICAgICAgICAgICAgICogb2Ygc3RlcHMgd2lsbCBubyBsb25nZXIgYmUgcG9zaXRpb25lZCBwZXJmZWN0bHkgaW4gdGhlIHdpbmRvdy5cbiAgICAgICAgICAgICAgICogVGhpcyBldmVudCB3aWxsIGltbWVkaWF0ZWx5IHNuYXAgdGhlIGNhbnZhcyBiYWNrIGludG8gcGxhY2UuXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBpZiAoc2VsZi5wcm9wZXJ0eVN1cHBvcnQudHJhbnNpdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNhbnZhcy5tb3ZlKHNlbGYuY3VycmVudFN0ZXBJZCwgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgICAgc2VsZi50aHJvdHRsZWRSZXNpemUoc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhyb3R0bGUgdGhlIHJlc2l6ZSBldmVudCB0byBvbmx5IGV4ZWN1dGUgdGhyb3R0bGVkRXZlbnRzKCkgZXZlcnlcbiAgICAgICAgICAgKiAxMDBtcy4gVGhpcyBpcyBzbyBub3QgdG9vIG1hbnkgZXZlbnRzIG9jY3VyIGR1cmluZyBhIHJlc2l6ZS4gVGhlXG4gICAgICAgICAgICogdGhyZXNob2xkIGNhbiBiZSBjaGFuZ2VkIHVzaW5nIHRoZSByZXNpemVUaHJlc2hvbGQgZ2xvYmFsIHZhcmlhYmxlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHZhciB0aHJvdHRsZVRpbWVyLFxuICAgICAgICAgICAgICBoYW5kbGVyO1xuXG4gICAgICAgICAgaGFuZGxlciA9IGFkZEV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhyb3R0bGVUaW1lcik7XG4gICAgICAgICAgICB0aHJvdHRsZVRpbWVyID0gc2V0VGltZW91dCh0aHJvdHRsZWRFdmVudHMsIHJlc2l6ZVRocmVzaG9sZCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzZWxmLm1hbmFnZUV2ZW50cy5saXN0LnJlc2l6ZS5wdXNoKHtcImVsZW1lbnRcIjogd2luZG93LCBcImhhbmRsZXJcIjogaGFuZGxlcn0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoZSBwYWdlIGxvc2VzIHZpc2liaWxpdHksIHBhdXNlIGF1dG9QbGF5LCB0aGVuIHVucGF1c2Ugd2hlblxuICAgICAgICAgKiB0aGUgcGFnZSBnYWlucyB2aXNpYmlsaXR5IGFnYWluXG4gICAgICAgICAqL1xuICAgICAgICBwYWdlVmlzaWJpbGl0eTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGFkZEV2ZW50KGRvY3VtZW50LCB2aXNpYmlsaXR5Q2hhbmdlLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKGRvY3VtZW50W2hpZGRlbl0pIHtcblxuICAgICAgICAgICAgICBzZWxmLmF1dG9QbGF5LnBhdXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgIHNlbGYuYXV0b1BsYXkudW5wYXVzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICAgIHNlbGYubWFuYWdlRXZlbnRzLmxpc3RbdmlzaWJpbGl0eUNoYW5nZV0ucHVzaCh7XCJlbGVtZW50XCI6IGRvY3VtZW50LCBcImhhbmRsZXJcIjogaGFuZGxlcn0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCB1cCBhbiBpbnN0YW5jZSBvZiBTZXF1ZW5jZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBTZXF1ZW5jZSBpcyBhdHRhY2hlZCB0b1xuICAgICAqL1xuICAgIHNlbGYuaW5pdCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblxuICAgICAgdmFyIGlkLFxuICAgICAgICAgIHByZXZTdGVwLFxuICAgICAgICAgIHByZXZTdGVwSWQsXG4gICAgICAgICAgdHJhbnNmb3JtUHJvcGVydGllcyxcbiAgICAgICAgICBnb1RvRmlyc3RTdGVwO1xuXG4gICAgICAvLyBNZXJnZSBkZXZlbG9wZXIgb3B0aW9ucyB3aXRoIGRlZmF1bHRzXG4gICAgICBzZWxmLm9wdGlvbnMgPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBzZWxmLmlzUmVhZHkgPSBmYWxzZTtcblxuICAgICAgLy8gR2V0IHRoZSBlbGVtZW50IFNlcXVlbmNlIGlzIGF0dGFjaGVkIHRvLCB0aGUgc2NyZWVuLFxuICAgICAgLy8gdGhlIGNhbnZhcyBhbmQgaXQncyBzdGVwc1xuICAgICAgc2VsZi4kY29udGFpbmVyID0gZWxlbWVudDtcbiAgICAgIHNlbGYuJHNjcmVlbiA9IHNlbGYuJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLnNlcS1zY3JlZW5cIilbMF07XG4gICAgICBzZWxmLiRjYW52YXMgPSBzZWxmLiRjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5zZXEtY2FudmFzXCIpWzBdO1xuICAgICAgc2VsZi4kc3RlcHMgPSBzZWxmLmNhbnZhcy5nZXRTdGVwcyhzZWxmLiRjYW52YXMpO1xuXG4gICAgICAvLyBDb3VudCBudW1iZXIgb2Ygc3RlcHNcbiAgICAgIHNlbGYubm9PZlN0ZXBzID0gc2VsZi4kc3RlcHMubGVuZ3RoO1xuXG4gICAgICBzZWxmLnBoYXNlc0FuaW1hdGluZyA9IDA7XG4gICAgICBzZWxmLnBoYXNlc1NraXBwZWQgPSBbXTtcblxuICAgICAgLy8gQWRkIGNsYXNzZXMgdG8gdGhlIFNlcXVlbmNlIGNvbnRhaW5lciB0aGF0IHJlcHJlc2VudCBmZWF0dXJlcyBzdXBwb3J0ZWRcbiAgICAgIGFkZEZlYXR1cmVTdXBwb3J0Q2xhc3NlcyhzZWxmLiRjb250YWluZXIsIE1vZGVybml6cik7XG5cbiAgICAgIC8vIEdldCB0aGUgZmlyc3Qgc3RlcCdzIElEXG4gICAgICBpZCA9IHNlbGYub3B0aW9ucy5zdGFydGluZ1N0ZXBJZDtcblxuICAgICAgYWRkQ2xhc3Moc2VsZi4kY29udGFpbmVyLCBcInNlcS1hY3RpdmVcIik7XG5cbiAgICAgIC8vIEZpbmQgb3V0IHdoYXQgcHJvcGVydGllcyB0aGUgYnJvd3NlciBzdXBwb3J0c1xuICAgICAgLy8gYW5kIHdoZXRoZXIgU2VxdWVuY2Ugc2hvdWxkIGdvIGludG8gZmFsbGJhY2sgbW9kZVxuICAgICAgc2VsZi5wcm9wZXJ0eVN1cHBvcnQgPSBzZWxmLmFuaW1hdGlvbi5nZXRQcm9wZXJ0eVN1cHBvcnQoKTtcbiAgICAgIHNlbGYuaXNGYWxsYmFja01vZGUgPSBzZWxmLmFuaW1hdGlvbi5yZXF1aXJlc0ZhbGxiYWNrTW9kZShzZWxmLnByb3BlcnR5U3VwcG9ydCk7XG5cbiAgICAgIC8vIFNldCB1cCB0aGUgY2FudmFzIGFuZCBzY3JlZW4gd2l0aCB0aGUgbmVjZXNzYXJ5IENTUyBwcm9wZXJ0aWVzXG4gICAgICBzZWxmLmNhbnZhcy5pbml0KGlkKTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBuby1KUyBcInNlcS1pblwiIGNsYXNzIGZyb20gYSBzdGVwXG4gICAgICBzZWxmLmNhbnZhcy5yZW1vdmVOb0pzQ2xhc3Moc2VsZik7XG5cbiAgICAgIC8vIFNldCB1cCBldmVudHNcbiAgICAgIHNlbGYubWFuYWdlRXZlbnRzLmluaXQoKTtcblxuICAgICAgLy8gU2V0IHVwIGF1dG9QbGF5XG4gICAgICBzZWxmLmF1dG9QbGF5LmluaXQoKTtcblxuICAgICAgLy8gT24gdGhlIGZpcnN0IHJ1biwgd2UgbmVlZCB0byB0cmVhdCB0aGUgYW5pbWF0aW9uIGEgbGl0dGxlIGRpZmZlcmVudGx5XG4gICAgICBzZWxmLmZpcnN0UnVuID0gdHJ1ZTtcblxuICAgICAgLy8gU2V0IHVwIGhhc2hUYWcgc3VwcG9ydCBpZiBiZWluZyB1c2VkIGFuZCBvdmVycmlkZSB0aGUgZmlyc3QgSUQgaWYgdGhlcmVcbiAgICAgIC8vIGlzIGEgaGFzaFRhZyBpbiB0aGUgZW50ZXJpbmcgVVJMIHRoYXQgaGFzIGEgY29ycmVzcG9uZGluZyBzdGVwXG4gICAgICBpZCA9IHNlbGYuaGFzaFRhZ3MuaW5pdChpZCk7XG5cbiAgICAgIC8vIEdldCB0aGUgcHJldmlvdXMgc3RlcCBJRFxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5hdXRvUGxheURpcmVjdGlvbiA9PT0gMSkge1xuICAgICAgICBwcmV2U3RlcElkID0gaWQgLSAxO1xuICAgICAgICBzZWxmLnByZXZTdGVwSWQgPSAocHJldlN0ZXBJZCA8IDEpID8gc2VsZi5ub09mU3RlcHM6IHByZXZTdGVwSWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2U3RlcElkID0gaWQgKyAxO1xuICAgICAgICBzZWxmLnByZXZTdGVwSWQgPSAocHJldlN0ZXBJZCA+IHNlbGYubm9PZlN0ZXBzKSA/IDE6IHByZXZTdGVwSWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCB0aGUgcHJldmlvdXMgc3RlcCBhbmQgbmV4dCBzdGVwXG4gICAgICBzZWxmLmN1cnJlbnRTdGVwSWQgPSBzZWxmLnByZXZTdGVwSWQ7XG4gICAgICBwcmV2U3RlcCA9IHNlbGYucHJldlN0ZXBJZDtcblxuICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IENTUyB0cmFuc2l0aW9ucywgc2V0dXAgdGhlIGZhbGxiYWNrXG4gICAgICBzZWxmLmFuaW1hdGlvbkZhbGxiYWNrLnNldHVwQ2FudmFzKGlkKTtcblxuICAgICAgZ29Ub0ZpcnN0U3RlcCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHNlbGYuYW5pbWF0aW9uLmRvbURlbGF5KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgLy8gU25hcCB0aGUgcHJldmlvdXMgc3RlcCBpbnRvIHBvc2l0aW9uXG4gICAgICAgICAgc2VsZi5hbmltYXRpb24uZG9tRGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmFuaW1hdGlvbi5yZXNldEluaGVyaXRlZFNwZWVkKHByZXZTdGVwKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNlbGYuaXNSZWFkeSA9IHRydWU7XG5cbiAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgIHNlbGYucmVhZHkoc2VsZik7XG5cbiAgICAgICAgICAvLyBHbyB0byB0aGUgZmlyc3Qgc3RlcFxuICAgICAgICAgIHNlbGYuZ29UbyhpZCwgc2VsZi5vcHRpb25zLmF1dG9QbGF5RGlyZWN0aW9uLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICAvLyBTZXQgdXAgcHJlbG9hZGluZyBpZiByZXF1aXJlZCwgdGhlbiBnbyB0byB0aGUgZmlyc3Qgc3RlcFxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5wcmVsb2FkZXIgIT09IGZhbHNlICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgaW1hZ2VzTG9hZGVkID09PSBcImZ1bmN0aW9uXCIpIHtcblxuICAgICAgICBzZWxmLnByZWxvYWQuaW5pdChmdW5jdGlvbigpIHtcbiAgICAgICAgICBnb1RvRmlyc3RTdGVwKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ29Ub0ZpcnN0U3RlcCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGFuIGluc3RhbmNlIG9mIFNlcXVlbmNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzZWxmLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblxuICAgICAgdmFyIGksXG4gICAgICAgICAgc3RlcCxcbiAgICAgICAgICBsYXN0U3RlcDtcblxuICAgICAgLy8gU3RvcCBhdXRvUGxheVxuICAgICAgc2VsZi5hdXRvUGxheS5zdG9wKCk7XG5cbiAgICAgIC8vIFN0b3AgdGltZXJzXG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5hdXRvUGxheVRpbWVyKTtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLnBoYXNlVGhyZXNob2xkVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuc3RlcEVuZGVkVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuY3VycmVudFBoYXNlRW5kZWRUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5uZXh0UGhhc2VTdGFydGVkVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYubmV4dFBoYXNlRW5kZWRUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5mYWRlU3RlcFRpbWVyKTtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLmhpZGVUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5uYXZpZ2F0aW9uU2tpcFRocmVzaG9sZFRpbWVyKTtcblxuICAgICAgLy8gUmVtb3ZlIGFsbCBldmVudHNcbiAgICAgIHNlbGYubWFuYWdlRXZlbnRzLnJlbW92ZUFsbChzZWxmLm1hbmFnZUV2ZW50cy5saXN0KTtcblxuICAgICAgLy8gUmVtb3ZlIGNsYXNzZXNcbiAgICAgIHJlbW92ZUNsYXNzKHNlbGYuJHBhZ2luYXRpb24uY3VycmVudExpbmtzLCBcInNlcS1jdXJyZW50XCIpO1xuICAgICAgcmVtb3ZlQ2xhc3Moc2VsZi4kY29udGFpbmVyLCBcInNlcS1zdGVwXCIgKyBzZWxmLmN1cnJlbnRTdGVwSWQpO1xuICAgICAgcmVtb3ZlQ2xhc3Moc2VsZi4kY29udGFpbmVyLCBcInNlcS1hY3RpdmVcIik7XG5cbiAgICAgIC8vIFJlbW92ZSBzdHlsZXNcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICAgIGlmIChzZWxmLiRzY3JlZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZWxmLiRzY3JlZW4ucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgICB9XG4gICAgICBzZWxmLiRjYW52YXMucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG5cbiAgICAgIC8vIFJlbW92ZSBzdHlsZXMgZnJvbSBzdGVwcyBhbmQgc25hcCB0aGVtIHRvIHRoZWlyIFwic2VxLW91dFwiIHBvc2l0aW9uXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZi5ub09mU3RlcHM7IGkrKykge1xuICAgICAgICBzdGVwID0gc2VsZi4kc3RlcHNbaV07XG5cbiAgICAgICAgc3RlcC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICAgICAgc2VsZi5hbmltYXRpb24ucmVzZXRJbmhlcml0ZWRTcGVlZChpICsgMSk7XG4gICAgICAgIHJlbW92ZUNsYXNzKHN0ZXAsIFwic2VxLWluXCIpO1xuICAgICAgICByZW1vdmVDbGFzcyhzdGVwLCBcInNlcS1vdXRcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIFNuYXAgdGhlIHN0YXJ0aW5nIHN0ZXAgYmFjayBpbnRvIGl0cyBcInNlcS1pblwiIHBvc2l0aW9uXG4gICAgICBsYXN0U3RlcCA9IHNlbGYuJHN0ZXBzW3NlbGYub3B0aW9ucy5zdGFydGluZ1N0ZXBJZCAtIDFdO1xuICAgICAgc2VsZi5hbmltYXRpb24ucmVzZXRJbmhlcml0ZWRTcGVlZChzZWxmLm9wdGlvbnMuc3RhcnRpbmdTdGVwSWQpO1xuICAgICAgYWRkQ2xhc3MobGFzdFN0ZXAsIFwic2VxLWluXCIpO1xuXG4gICAgICAvLyBBbGxvdyB0aGUgc2FtZSBlbGVtZW50IHRvIGhhdmUgU2VxdWVuY2UgaW5pdGF0ZWQgb24gaXQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNlcS1lbmFibGVkXCIpO1xuXG4gICAgICAvLyBDYWxsYmFja1xuICAgICAgc2VsZi5kZXN0cm95ZWQoc2VsZik7XG5cbiAgICAgIC8vIEZpbmFsbHksIGNsZWFyIHRoZSBpbnN0YW5jZSdzIHByb3BlcnRpZXMgYW5kIG1ldGhvZHNcbiAgICAgIHNlbGYgPSBudWxsO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR28gdG8gdGhlIG5leHQgc3RlcFxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlciB8IGZhbHNlfSBUaGUgSUQgb2YgdGhlIG5leHQgc3RlcCBTZXF1ZW5jZSB3aWxsXG4gICAgICogbmF2aWdhdGUgdG8gb3IgZmFsc2UgaWYgbmV4dCgpIGlzIHByZXZlbnRlZCBiZWNhdXNlIHRoZSBjdXJyZW50IHN0ZXAgaXNcbiAgICAgKiB0aGUgbGFzdCBhbmQgdGhlIGN5Y2xlIG9wdGlvbiBpcyBkaXNhYmxlZFxuICAgICAqL1xuICAgIHNlbGYubmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICB2YXIgbmV4dFN0ZXBJZCA9IHNlbGYuY3VycmVudFN0ZXBJZCArIDE7XG5cbiAgICAgIC8vIEN5Y2xlIHRvIHRoZSBmaXJzdCBzdGVwIGlmIG9uIHRoZSBjdXJyZW50IHN0ZXAgYW5kIGN5Y2xlIGlzIGVuYWJsZWRcbiAgICAgIGlmIChuZXh0U3RlcElkID4gc2VsZi5ub09mU3RlcHMgJiYgc2VsZi5vcHRpb25zLmN5Y2xlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKG5leHRTdGVwSWQgPiBzZWxmLm5vT2ZTdGVwcykge1xuICAgICAgICBuZXh0U3RlcElkID0gMTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5nb1RvKG5leHRTdGVwSWQpO1xuXG4gICAgICByZXR1cm4gbmV4dFN0ZXBJZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR28gdG8gdGhlIHByZXZpb3VzIHN0ZXBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXIgfCBmYWxzZX0gVGhlIElEIG9mIHRoZSBwcmV2aW91cyBzdGVwIFNlcXVlbmNlIHdpbGxcbiAgICAgKiBuYXZpZ2F0ZSB0byBvciBmYWxzZSBpZiBwcmV2KCkgaXMgcHJldmVudGVkIGJlY2F1c2UgdGhlIGN1cnJlbnQgc3RlcCBpc1xuICAgICAqIHRoZSBmaXJzdCBhbmQgdGhlIGN5Y2xlIG9wdGlvbiBpcyBkaXNhYmxlZFxuICAgICAqL1xuICAgIHNlbGYucHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICB2YXIgcHJldlN0ZXBJZCA9IHNlbGYuY3VycmVudFN0ZXBJZCAtIDEsXG4gICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICBpZiAocHJldlN0ZXBJZCA8IDEgJiYgc2VsZi5vcHRpb25zLmN5Y2xlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHByZXZTdGVwSWQgPCAxKSB7XG4gICAgICAgIHByZXZTdGVwSWQgPSBzZWxmLm5vT2ZTdGVwcztcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5yZXZlcnNlV2hlbk5hdmlnYXRpbmdCYWNrd2FyZHMgPT09IHRydWUpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gLTE7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuZ29UbyhwcmV2U3RlcElkLCBkaXJlY3Rpb24pO1xuXG4gICAgICByZXR1cm4gcHJldlN0ZXBJZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RvcCBhbmQgc3RhcnQgU2VxdWVuY2UncyBhdXRvUGxheSBmZWF0dXJlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW4vTnVtYmVyfSBkZWxheSAtIFdoZXRoZXIgYSBkZWxheSBzaG91bGQgYmUgYXBwbGllZCBiZWZvcmVcbiAgICAgKiBzdGFydGluZyBhdXRvUGxheSAodHJ1ZSA9IHNhbWUgYW1vdW50IGFzIG9wdGlvbnMuYXV0b1BsYXlJbnRlcnZhbCxcbiAgICAgKiBmYWxzZSA9IG5vIGRlbGF5LCBudW1iZXIgPSBjdXN0b20gZGVsYXkgcGVyaW9kKS4gQXBwbGllZCB0b1xuICAgICAqIGF1dG9QbGF5LnN0YXJ0KClcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNBdXRvUGxheWluZyAtIHRydWUgaWYgYXV0b1BsYXkgd2FzIHN0YXJ0ZWQsIGZhbHNlIGlmIHN0b3BwZWRcbiAgICAgKi9cbiAgICBzZWxmLnRvZ2dsZUF1dG9QbGF5ID0gZnVuY3Rpb24oZGVsYXkpIHtcblxuICAgICAgaWYgKHNlbGYuaXNBdXRvUGxheWluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgc2VsZi5zdGFydChkZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnN0b3AoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuaXNBdXRvUGxheWluZztcbiAgICB9O1xuXG4gICAgc2VsZi5zdG9wID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgIHNlbGYuYXV0b1BsYXkuc3RvcCgpO1xuICAgIH07XG5cbiAgICBzZWxmLnN0YXJ0ID0gZnVuY3Rpb24oZGVsYXkpIHtcblxuICAgICAgc2VsZi5hdXRvUGxheS5zdGFydChkZWxheSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdvIHRvIGEgc3BlY2lmaWMgc3RlcFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIElEIG9mIHRoZSBzdGVwIHRvIGdvIHRvXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvbiAtIERpcmVjdGlvbiB0byBnZXQgdG8gdGhlIHN0ZXBcbiAgICAgKiAoMSA9IGZvcndhcmQsIC0xID0gcmV2ZXJzZSlcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlnbm9yZVBoYXNlVGhyZXNob2xkIC0gaWYgdHJ1ZSwgaWdub3JlIHRoZVxuICAgICAqIHRyYW5zaXRpb25UaHJlc2hvbGQgc2V0dGluZyBhbmQgaW1tZWRpYXRlbHkgZ28gdG8gdGhlIHNwZWNpZmllZCBzdGVwXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBoYXNoVGFnTmF2IC0gSWYgbmF2aWdhdGlvbiBpcyB0cmlnZ2VyZWQgYnkgdGhlIGhhc2hUYWdcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gZmFsc2Ugd2hlbiBnb1RvIHdhcyBkaXNhbGxvd2VkIHRydWUgd2hlbiBhbGxvd2VkXG4gICAgICovXG4gICAgc2VsZi5nb1RvID0gZnVuY3Rpb24oaWQsIGRpcmVjdGlvbiwgaWdub3JlUGhhc2VUaHJlc2hvbGQsIGhhc2hUYWdOYXYpIHtcblxuICAgICAgLy8gR2V0IHRoZSBkaXJlY3Rpb24gdG8gbmF2aWdhdGUgaWYgb25lIHdhc24ndCBzcGVjaWZpZWRcbiAgICAgIGRpcmVjdGlvbiA9IHNlbGYuYW5pbWF0aW9uLmdldERpcmVjdGlvbihpZCwgZGlyZWN0aW9uLCBzZWxmLmN1cnJlbnRTdGVwSWQsIHNlbGYubm9PZlN0ZXBzLCBzZWxmLmlzRmFsbGJhY2tNb2RlLCBzZWxmLm9wdGlvbnMucmV2ZXJzZVdoZW5OYXZpZ2F0aW5nQmFja3dhcmRzLCBzZWxmLm9wdGlvbnMuY3ljbGUpO1xuXG4gICAgICAvKipcbiAgICAgICAqIERvbid0IGdvIHRvIGEgc3RlcCBpZjpcbiAgICAgICAqXG4gICAgICAgKiAtIElEIGlzbid0IGRlZmluZWRcbiAgICAgICAqIC0gSXQgZG9lc24ndCBleGlzdFxuICAgICAgICogLSBJdCBpcyBhbHJlYWR5IGFuaW1hdGluZ1xuICAgICAgICogLSBuYXZpZ2F0aW9uU2tpcCBpc24ndCBhbGxvd2VkIGFuZCBhbiBhbmltYXRpb24gaXMgYWN0aXZlXG4gICAgICAgKiAtIG5hdmlnYXRpb25Ta2lwIGlzIGFsbG93ZWQgYnV0IHRoZSB0aHJlc2hvbGQgaXMgeWV0IHRvIGV4cGlyZSAodW5sZXNzXG4gICAgICAgKiAgIG5hdmlnYXRpbmcgdmlhIGZvcndhcmQvYmFjayBidXR0b24gd2l0aCBoYXNoVGFncyBlbmFibGVkIC0gc2VlXG4gICAgICAgKiAgIG1hbmFnZUV2ZW50cy5hZGQuaGFzaENoYW5nZSgpIGZvciBhbiBleHBsYW5hdGlvbiBvZiB0aGlzKVxuICAgICAgICogLSB0cmFuc2l0aW9ucyBhcmVuJ3Qgc3VwcG9ydGVkIGFuZCBTZXF1ZW5jZSBpcyBhY3RpdmUgKG5hdmlnYXRpb25cbiAgICAgICAqICAgc2tpcHBpbmcgaXNuJ3QgYWxsb3dlZCBpbiBmYWxsYmFjayBtb2RlLCB1bmxlc3MgbmF2aWdhdGluZyB2aWFcbiAgICAgICAqICAgZm9yd2FyZC9iYWNrIGJ1dHRvbnMpXG4gICAgICAgKiAtIHByZXZlbnRSZXZlcnNlU2tpcHBpbmcgaXMgZW5hYmxlZCBhbmQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIG5hdmlnYXRlXG4gICAgICAgKiAgIGluIGEgZGlmZmVyZW50IGRpcmVjdGlvbiB0byB0aGUgb25lIGFscmVhZHkgYWN0aXZlXG4gICAgICAgKi9cbiAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkIHx8IGlkIDwgMSB8fCBpZCA+IHNlbGYubm9PZlN0ZXBzIHx8IGlkID09PSBzZWxmLmN1cnJlbnRTdGVwSWQgfHwgKHNlbGYub3B0aW9ucy5uYXZpZ2F0aW9uU2tpcCA9PT0gZmFsc2UgJiYgc2VsZi5pc0FuaW1hdGluZyA9PT0gdHJ1ZSkgfHwgKHNlbGYub3B0aW9ucy5uYXZpZ2F0aW9uU2tpcCA9PT0gdHJ1ZSAmJiBzZWxmLm5hdmlnYXRpb25Ta2lwVGhyZXNob2xkQWN0aXZlID09PSB0cnVlICYmIGhhc2hUYWdOYXYgPT09IHVuZGVmaW5lZCkgfHwgKHNlbGYuaXNGYWxsYmFja01vZGUgPT09IHRydWUgJiYgc2VsZi5pc0FuaW1hdGluZyA9PT0gdHJ1ZSAmJiBoYXNoVGFnTmF2ID09PSB1bmRlZmluZWQpIHx8IChzZWxmLm9wdGlvbnMucHJldmVudFJldmVyc2VTa2lwcGluZyA9PT0gdHJ1ZSAmJiBzZWxmLmRpcmVjdGlvbiAhPT0gZGlyZWN0aW9uICYmIHNlbGYuaXNBbmltYXRpbmcgPT09IHRydWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRTdGVwRWxlbWVudCxcbiAgICAgICAgICBuZXh0U3RlcEVsZW1lbnQ7XG5cbiAgICAgIC8vIENsZWFyIHRoZSBwcmV2aW91cyBhdXRvUGxheVRpbWVyXG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5hdXRvUGxheVRpbWVyKTtcblxuICAgICAgLy8gU2F2ZSB0aGUgbGF0ZXN0IGRpcmVjdGlvblxuICAgICAgc2VsZi5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG5cbiAgICAgIC8vIEFkZCB0aGUgXCJzZXEtcmV2ZXJzZWRcIiBjbGFzcyBpZiBuYXZpZ2F0aW5nIGluIHJldmVyc2VcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgICAgLy8gQWRkIGEgXCJzZXEtcmV2ZXJzZWRcIiBjbGFzc1xuICAgICAgICByZW1vdmVDbGFzcyhzZWxmLiRjb250YWluZXIsIFwic2VxLXJldmVyc2VkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkIGEgXCJzZXEtcmV2ZXJzZWRcIiBjbGFzc1xuICAgICAgICBhZGRDbGFzcyhzZWxmLiRjb250YWluZXIsIFwic2VxLXJldmVyc2VkXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgYW5kIG5leHQgc3RlcCBlbGVtZW50c1xuICAgICAgY3VycmVudFN0ZXBFbGVtZW50ID0gc2VsZi4kc3RlcHNbc2VsZi5jdXJyZW50U3RlcElkIC0gMV07XG4gICAgICBuZXh0U3RlcEVsZW1lbnQgPSBzZWxmLiRzdGVwc1tpZCAtIDFdO1xuXG4gICAgICAvLyBNb3ZlIHRoZSBhY3RpdmUgc3RlcCB0byB0aGUgdG9wICh2aWEgYSBoaWdoZXIgei1pbmRleClcbiAgICAgIHNlbGYuYW5pbWF0aW9uLm1vdmVBY3RpdmVTdGVwVG9Ub3AoY3VycmVudFN0ZXBFbGVtZW50LCBuZXh0U3RlcEVsZW1lbnQpO1xuXG4gICAgICAvLyBDaGFuZ2UgdGhlIHN0ZXAgbnVtYmVyIG9uIHRoZSBTZXF1ZW5jZSBlbGVtZW50XG4gICAgICBzZWxmLmFuaW1hdGlvbi5jaGFuZ2VTdGVwKGlkKTtcblxuICAgICAgaWYgKHNlbGYuaXNGYWxsYmFja01vZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgLy8gUmVzZXQgdGhlIG5leHQgc3RlcCdzIGVsZW1lbnRzIGR1cmF0aW9ucyB0byAwbXMgc28gaXQgY2FuIGJlIHNuYXBwZWRcbiAgICAgICAgLy8gaW50byBwbGFjZVxuICAgICAgICBzZWxmLmFuaW1hdGlvbi5yZXNldEluaGVyaXRlZFNwZWVkKGlkKTtcblxuICAgICAgICBpZiAoc2VsZi5maXJzdFJ1biA9PT0gZmFsc2UgfHwgKHNlbGYuZmlyc3RSdW4gPT09IHRydWUgJiYgc2VsZi5vcHRpb25zLnN0YXJ0aW5nU3RlcEFuaW1hdGVzSW4gPT09IHRydWUpKSB7XG5cbiAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgIHNlbGYuYW5pbWF0aW9uU3RhcnRlZChpZCwgc2VsZik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbmltYXRlIHRoZSBjYW52YXNcbiAgICAgICAgc2VsZi5jYW52YXMubW92ZShpZCwgdHJ1ZSk7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGhvdyBvZnRlbiBnb1RvKCkgY2FuIGJlIHVzZWQgYmFzZWQgb25cbiAgICAgICAgLy8gbmF2aWdhdGlvblNraXBUaHJlc2hvbGQgYW5kIG1hbmFnZSBzdGVwIGZhZGluZyBhY2NvcmRpbmdseVxuICAgICAgICBzZWxmLmFuaW1hdGlvbi5tYW5hZ2VOYXZpZ2F0aW9uU2tpcChpZCwgbmV4dFN0ZXBFbGVtZW50KTtcblxuICAgICAgICAvLyBBcmUgd2UgbW92aW5nIHRoZSBhY3RpdmUgcGhhc2VzIGZvcndhcmQgb3IgaW4gcmV2ZXJzZT9cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMSkge1xuXG4gICAgICAgICAgc2VsZi5hbmltYXRpb24uZm9yd2FyZChpZCwgY3VycmVudFN0ZXBFbGVtZW50LCBuZXh0U3RlcEVsZW1lbnQsIGlnbm9yZVBoYXNlVGhyZXNob2xkLCBoYXNoVGFnTmF2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmFuaW1hdGlvbi5yZXZlcnNlKGlkLCBjdXJyZW50U3RlcEVsZW1lbnQsIG5leHRTdGVwRWxlbWVudCwgaWdub3JlUGhhc2VUaHJlc2hvbGQsIGhhc2hUYWdOYXYpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFVzZSBmYWxsYmFjayBhbmltYXRpb25cbiAgICAgIGVsc2Uge1xuXG4gICAgICAgIHNlbGYuYW5pbWF0aW9uRmFsbGJhY2suZ29UbyhpZCwgc2VsZi5jdXJyZW50U3RlcElkLCBjdXJyZW50U3RlcEVsZW1lbnQsIGlkLCBuZXh0U3RlcEVsZW1lbnQsIGRpcmVjdGlvbiwgaGFzaFRhZ05hdik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKiAtLS0gQ0FMTEJBQ0tTIC0tLSAqL1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiBhdXRvUGxheSBpcyBzdGFydGVkXG4gICAgICovXG4gICAgc2VsZi5zdGFydGVkID0gZnVuY3Rpb24oc2VsZikge1xuXG4gICAgICAvLyBjb25zb2xlLmxvZyhcImF1dG8gcGxheSBzdGFydGVkXCIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBleGVjdXRlZCB3aGVuIGF1dG9QbGF5IGlzIHN0b3BwZWRcbiAgICAgKi9cbiAgICBzZWxmLnN0b3BwZWQgPSBmdW5jdGlvbihzZWxmKSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiYXV0byBwbGF5IHN0b3BwZWRcIik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gYSBzdGVwIGFuaW1hdGlvbiBzdGFydHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZCAtIFRoZSBJRCBvZiB0aGUgc3RlcCB0aGF0IHdhcyBzdGFydGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGYgLSBQcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGF2YWlsYWJsZSB0byB0aGlzIGluc3RhbmNlXG4gICAgICovXG4gICAgc2VsZi5hbmltYXRpb25TdGFydGVkID0gZnVuY3Rpb24oaWQsIHNlbGYpIHtcblxuICAgICAgLy8gY29uc29sZS5sb2coXCJBbmltYXRpb24gc3RhcnRlZFwiLCBpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gYSBzdGVwIGFuaW1hdGlvbiBmaW5pc2hlc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIElEIG9mIHRoZSBzdGVwIHRoYXQgZmluaXNoZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZiAtIFByb3BlcnRpZXMgYW5kIG1ldGhvZHMgYXZhaWxhYmxlIHRvIHRoaXMgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzZWxmLmFuaW1hdGlvbkVuZGVkID0gZnVuY3Rpb24oaWQsIHNlbGYpIHtcblxuICAgICAgLy8gY29uc29sZS5sb2coXCJBbmltYXRpb24gZW5kZWRcIiwgaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBleGVjdXRlZCB3aGVuIHRoZSBjdXJyZW50IHBoYXNlIHN0YXJ0cyBhbmltYXRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYuY3VycmVudFBoYXNlU3RhcnRlZCA9IGZ1bmN0aW9uKGlkLCBzZWxmKSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ3VycmVudCBwaGFzZSBzdGFydGVkXCIsIGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiB0aGUgY3VycmVudCBwaGFzZSBmaW5pc2hlcyBhbmltYXRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYuY3VycmVudFBoYXNlRW5kZWQgPSBmdW5jdGlvbihpZCwgc2VsZikge1xuXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIkN1cnJlbnQgcGhhc2UgZW5kZWRcIiwgaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBleGVjdXRlZCB3aGVuIHRoZSBuZXh0IHBoYXNlIHN0YXJ0cyBhbmltYXRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYubmV4dFBoYXNlU3RhcnRlZCA9IGZ1bmN0aW9uKGlkLCBzZWxmKSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiTmV4dCBwaGFzZSBzdGFydGVkXCIsIGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiB0aGUgbmV4dCBwaGFzZSBmaW5pc2hlcyBhbmltYXRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYubmV4dFBoYXNlRW5kZWQgPSBmdW5jdGlvbihpZCwgc2VsZikge1xuXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIk5leHQgcGhhc2UgZW5kZWRcIiwgaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB0aHJvdHRsZWQgd2luZG93IHJlc2l6ZSBldmVudCBvY2N1cnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYudGhyb3R0bGVkUmVzaXplID0gZnVuY3Rpb24oc2VsZikge1xuXG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiBwcmVsb2FkaW5nIGhhcyBmaW5pc2hlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGYgLSBQcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGF2YWlsYWJsZSB0byB0aGlzIGluc3RhbmNlXG4gICAgICovXG4gICAgc2VsZi5wcmVsb2FkZWQgPSBmdW5jdGlvbihzZWxmKSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwicHJlbG9hZGVkXCIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBleGVjdXRlZCBldmVyeSB0aW1lIGFuIGltYWdlIHRvIGJlIHByZWxvYWRlZCByZXR1cm5zIGEgc3RhdHVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcmVzdWx0IC0gV2hldGhlciB0aGUgaW1hZ2UgaXMgXCJsb2FkZWRcIiBvciBcImJyb2tlblwiXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNyYyAtIFRoZSBzb3VyY2Ugb2YgdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb2dyZXNzIC0gVGhlIG51bWJlciBvZiBpbWFnZXMgdGhhdCBoYXZlIHJldHVybmVkIGEgcmVzdWx0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIFRoZSB0b3RhbCBudW1iZXIgb2YgaW1hZ2VzIHRoYXQgYXJlIGJlaW5nIHByZWxvYWRlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYucHJlbG9hZFByb2dyZXNzID0gZnVuY3Rpb24ocmVzdWx0LCBzcmMsIHByb2dyZXNzLCBsZW5ndGgsIHNlbGYpIHtcblxuICAgICAgLy8gY29uc29sZS5sb2cocHJvZ3Jlc3MsIGxlbmd0aCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gU2VxdWVuY2UgaXMgcmVhZHkgdG8gYmUgaW50ZXJhY3RlZCB3aXRoXG4gICAgICogPSBwcmVsb2FkaW5nICsgZG9tRGVsYXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIC0gUHJvcGVydGllcyBhbmQgbWV0aG9kcyBhdmFpbGFibGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbGYucmVhZHkgPSBmdW5jdGlvbihzZWxmKSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiUmVhZHlcIik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gU2VxdWVuY2UgaGFzIGZpbmlzaGVkIGJlaW5nIGRlc3Ryb3llZCB2aWEgLmRlc3Ryb3koKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNlbGYgLSBQcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGF2YWlsYWJsZSB0byB0aGlzIGluc3RhbmNlXG4gICAgICovXG4gICAgc2VsZi5kZXN0cm95ZWQgPSBmdW5jdGlvbihzZWxmKSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiRGVzdHJveWVkXCIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAqIE1ha2Ugc29tZSBvZiBTZXF1ZW5jZSdzIGhlbHBlciBmdW5jdGlvbnMgcHVibGljXG4gICAgKlxuICAgICogYWRkQ2xhc3MoKSAvIHJlbW92ZUNsYXNzKCkgZXRjIGNhbiBiZSB1c2VmdWwgZm9yIGN1c3RvbSB0aGVtZSBjb2RlXG4gICAgKi9cbiAgICBzZWxmLnV0aWxzID0ge1xuICAgICAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICAgICAgYWRkRXZlbnQ6IGFkZEV2ZW50LFxuICAgICAgcmVtb3ZlRXZlbnQ6IHJlbW92ZUV2ZW50XG4gICAgfTtcblxuXG4gICAgLyogLS0tIElOSVQgLS0tICovXG4gICAgc2VsZi5pbml0KGVsZW1lbnQpO1xuXG4gICAgLy8gU2F2ZSB0aGUgaW5zdGFuY2UgZ2xvYmFsbHkgc28gd2UgY2FuIHJldHVybiBpdCBpZiBhbiBpbml0IGlzIHRyaWVkIGFnYWluXG4gICAgaW5zdGFuY2VzLnB1c2goc2VsZik7XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSk7XG5cbiAgcmV0dXJuIFNlcXVlbmNlO1xufVxuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblxuICBkZWZpbmUoW1wiaW1hZ2VzTG9hZGVkXCIsIFwiSGFtbWVyXCJdLCBkZWZpbmVTZXF1ZW5jZSk7XG59IGVsc2Uge1xuXG4gIC8qIE1ha2UgZGVwZW5kZW5jaWVzIG9wdGlvbmFsICovXG4gIEhhbW1lciA9ICh0eXBlb2YgSGFtbWVyICE9PSBcImZ1bmN0aW9uXCIpID8gbnVsbDogSGFtbWVyO1xuICBpbWFnZXNMb2FkZWQgPSAodHlwZW9mIGltYWdlc0xvYWRlZCAhPT0gXCJmdW5jdGlvblwiKSA/IG51bGw6IGltYWdlc0xvYWRlZDtcblxuICB2YXIgc2VxdWVuY2UgPSBkZWZpbmVTZXF1ZW5jZShpbWFnZXNMb2FkZWQsIEhhbW1lcik7XG59XG4vKiFcbiAqIEZsaWNraXR5IFBBQ0tBR0VEIHYxLjEuMVxuICogVG91Y2gsIHJlc3BvbnNpdmUsIGZsaWNrYWJsZSBnYWxsZXJpZXNcbiAqXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4gKiBvciBGbGlja2l0eSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cDovL2ZsaWNraXR5Lm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTUgTWV0YWZpenp5XG4gKi9cblxuLyoqXG4gKiBCcmlkZ2V0IG1ha2VzIGpRdWVyeSB3aWRnZXRzXG4gKiB2MS4xLjBcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdXRpbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBkZWZpbmVCcmlkZ2V0KCAkICkge1xuXG4vLyBiYWlsIGlmIG5vIGpRdWVyeVxuaWYgKCAhJCApIHtcbiAgcmV0dXJuO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhZGRPcHRpb25NZXRob2QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBhZGRzIG9wdGlvbiBtZXRob2QgLT4gJCgpLnBsdWdpbignb3B0aW9uJywgey4uLn0pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXG4gKi9cbmZ1bmN0aW9uIGFkZE9wdGlvbk1ldGhvZCggUGx1Z2luQ2xhc3MgKSB7XG4gIC8vIGRvbid0IG92ZXJ3cml0ZSBvcmlnaW5hbCBvcHRpb24gbWV0aG9kXG4gIGlmICggUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBvcHRpb24gc2V0dGVyXG4gIFBsdWdpbkNsYXNzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgICAvLyBiYWlsIG91dCBpZiBub3QgYW4gb2JqZWN0XG4gICAgaWYgKCAhJC5pc1BsYWluT2JqZWN0KCBvcHRzICkgKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHRoaXMub3B0aW9ucywgb3B0cyApO1xuICB9O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwbHVnaW4gYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbG9nZ2luZyBlcnJvcnNcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT09ICd1bmRlZmluZWQnID8gbm9vcCA6XG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcbiAgfTtcblxuLyoqXG4gKiBqUXVlcnkgcGx1Z2luIGJyaWRnZSwgYWNjZXNzIG1ldGhvZHMgbGlrZSAkZWxlbS5wbHVnaW4oJ21ldGhvZCcpXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIC0gcGx1Z2luIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFBsdWdpbkNsYXNzIC0gY29uc3RydWN0b3IgY2xhc3NcbiAqL1xuZnVuY3Rpb24gYnJpZGdlKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICkge1xuICAvLyBhZGQgdG8galF1ZXJ5IGZuIG5hbWVzcGFjZVxuICAkLmZuWyBuYW1lc3BhY2UgXSA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICAgIGlmICggdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnICkge1xuICAgICAgLy8gY2FsbCBwbHVnaW4gbWV0aG9kIHdoZW4gZmlyc3QgYXJndW1lbnQgaXMgYSBzdHJpbmdcbiAgICAgIC8vIGdldCBhcmd1bWVudHMgZm9yIG1ldGhvZFxuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcblxuICAgICAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzW2ldO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xuICAgICAgICBpZiAoICFpbnN0YW5jZSApIHtcbiAgICAgICAgICBsb2dFcnJvciggXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiICsgbmFtZXNwYWNlICsgXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IFwiICtcbiAgICAgICAgICAgIFwiYXR0ZW1wdGVkIHRvIGNhbGwgJ1wiICsgb3B0aW9ucyArIFwiJ1wiICk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KDApID09PSAnXycgKSB7XG4gICAgICAgICAgbG9nRXJyb3IoIFwibm8gc3VjaCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJyBmb3IgXCIgKyBuYW1lc3BhY2UgKyBcIiBpbnN0YW5jZVwiICk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIGFyZ3VtZW50c1xuICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xuXG4gICAgICAgIC8vIGJyZWFrIGxvb2sgYW5kIHJldHVybiBmaXJzdCB2YWx1ZSBpZiBwcm92aWRlZFxuICAgICAgICBpZiAoIHJldHVyblZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gdGhpcyBpZiBubyByZXR1cm4gdmFsdWVcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBuYW1lc3BhY2UgKTtcbiAgICAgICAgaWYgKCBpbnN0YW5jZSApIHtcbiAgICAgICAgICAvLyBhcHBseSBvcHRpb25zICYgaW5pdFxuICAgICAgICAgIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgICAgICAgIGluc3RhbmNlLl9pbml0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaW5pdGlhbGl6ZSBuZXcgaW5zdGFuY2VcbiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBQbHVnaW5DbGFzcyggdGhpcywgb3B0aW9ucyApO1xuICAgICAgICAgICQuZGF0YSggdGhpcywgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYnJpZGdldCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGNvbnZlcnRzIGEgUHJvdG90eXBpY2FsIGNsYXNzIGludG8gYSBwcm9wZXIgalF1ZXJ5IHBsdWdpblxuICogICB0aGUgY2xhc3MgbXVzdCBoYXZlIGEgLl9pbml0IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIHBsdWdpbiBuYW1lLCB1c2VkIGluICQoKS5wbHVnaW5OYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXG4gKi9cbiQuYnJpZGdldCA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICkge1xuICBhZGRPcHRpb25NZXRob2QoIFBsdWdpbkNsYXNzICk7XG4gIGJyaWRnZSggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApO1xufTtcblxucmV0dXJuICQuYnJpZGdldDtcblxufVxuXG4vLyB0cmFuc3BvcnRcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAvLyBBTURcbiAgZGVmaW5lKCAnanF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LmJyaWRnZXQnLFsgJ2pxdWVyeScgXSwgZGVmaW5lQnJpZGdldCApO1xufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICBkZWZpbmVCcmlkZ2V0KCByZXF1aXJlKCdqcXVlcnknKSApO1xufSBlbHNlIHtcbiAgLy8gZ2V0IGpxdWVyeSBmcm9tIGJyb3dzZXIgZ2xvYmFsXG4gIGRlZmluZUJyaWRnZXQoIHdpbmRvdy5qUXVlcnkgKTtcbn1cblxufSkoIHdpbmRvdyApO1xuXG4vKiFcbiAqIGNsYXNzaWUgdjEuMC4xXG4gKiBjbGFzcyBoZWxwZXIgZnVuY3Rpb25zXG4gKiBmcm9tIGJvbnpvIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvYm9uem9cbiAqIE1JVCBsaWNlbnNlXG4gKiBcbiAqIGNsYXNzaWUuaGFzKCBlbGVtLCAnbXktY2xhc3MnICkgLT4gdHJ1ZS9mYWxzZVxuICogY2xhc3NpZS5hZGQoIGVsZW0sICdteS1uZXctY2xhc3MnIClcbiAqIGNsYXNzaWUucmVtb3ZlKCBlbGVtLCAnbXktdW53YW50ZWQtY2xhc3MnIClcbiAqIGNsYXNzaWUudG9nZ2xlKCBlbGVtLCAnbXktY2xhc3MnIClcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXG5cblxuLy8gY2xhc3MgaGVscGVyIGZ1bmN0aW9ucyBmcm9tIGJvbnpvIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvYm9uem9cblxuZnVuY3Rpb24gY2xhc3NSZWcoIGNsYXNzTmFtZSApIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoXnxcXFxccyspXCIgKyBjbGFzc05hbWUgKyBcIihcXFxccyt8JClcIik7XG59XG5cbi8vIGNsYXNzTGlzdCBzdXBwb3J0IGZvciBjbGFzcyBtYW5hZ2VtZW50XG4vLyBhbHRobyB0byBiZSBmYWlyLCB0aGUgYXBpIHN1Y2tzIGJlY2F1c2UgaXQgd29uJ3QgYWNjZXB0IG11bHRpcGxlIGNsYXNzZXMgYXQgb25jZVxudmFyIGhhc0NsYXNzLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3M7XG5cbmlmICggJ2NsYXNzTGlzdCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICkge1xuICBoYXNDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xuICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyggYyApO1xuICB9O1xuICBhZGRDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xuICAgIGVsZW0uY2xhc3NMaXN0LmFkZCggYyApO1xuICB9O1xuICByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xuICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSggYyApO1xuICB9O1xufVxuZWxzZSB7XG4gIGhhc0NsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG4gICAgcmV0dXJuIGNsYXNzUmVnKCBjICkudGVzdCggZWxlbS5jbGFzc05hbWUgKTtcbiAgfTtcbiAgYWRkQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcbiAgICBpZiAoICFoYXNDbGFzcyggZWxlbSwgYyApICkge1xuICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgJyArIGM7XG4gICAgfVxuICB9O1xuICByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xuICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUucmVwbGFjZSggY2xhc3NSZWcoIGMgKSwgJyAnICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKCBlbGVtLCBjICkge1xuICB2YXIgZm4gPSBoYXNDbGFzcyggZWxlbSwgYyApID8gcmVtb3ZlQ2xhc3MgOiBhZGRDbGFzcztcbiAgZm4oIGVsZW0sIGMgKTtcbn1cblxudmFyIGNsYXNzaWUgPSB7XG4gIC8vIGZ1bGwgbmFtZXNcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICAvLyBzaG9ydCBuYW1lc1xuICBoYXM6IGhhc0NsYXNzLFxuICBhZGQ6IGFkZENsYXNzLFxuICByZW1vdmU6IHJlbW92ZUNsYXNzLFxuICB0b2dnbGU6IHRvZ2dsZUNsYXNzXG59O1xuXG4vLyB0cmFuc3BvcnRcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAvLyBBTURcbiAgZGVmaW5lKCAnY2xhc3NpZS9jbGFzc2llJyxjbGFzc2llICk7XG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG4gIC8vIENvbW1vbkpTXG4gIG1vZHVsZS5leHBvcnRzID0gY2xhc3NpZTtcbn0gZWxzZSB7XG4gIC8vIGJyb3dzZXIgZ2xvYmFsXG4gIHdpbmRvdy5jbGFzc2llID0gY2xhc3NpZTtcbn1cblxufSkoIHdpbmRvdyApO1xuXG4vKiFcbiAqIEV2ZW50RW1pdHRlciB2NC4yLjExIC0gZ2l0LmlvL2VlXG4gKiBVbmxpY2Vuc2UgLSBodHRwOi8vdW5saWNlbnNlLm9yZy9cbiAqIE9saXZlciBDYWxkd2VsbCAtIGh0dHA6Ly9vbGkubWUudWsvXG4gKiBAcHJlc2VydmVcbiAqL1xuXG47KGZ1bmN0aW9uICgpIHtcbiAgICBcblxuICAgIC8qKlxuICAgICAqIENsYXNzIGZvciBtYW5hZ2luZyBldmVudHMuXG4gICAgICogQ2FuIGJlIGV4dGVuZGVkIHRvIHByb3ZpZGUgZXZlbnQgZnVuY3Rpb25hbGl0eSBpbiBvdGhlciBjbGFzc2VzLlxuICAgICAqXG4gICAgICogQGNsYXNzIEV2ZW50RW1pdHRlciBNYW5hZ2VzIGV2ZW50IHJlZ2lzdGVyaW5nIGFuZCBlbWl0dGluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7fVxuXG4gICAgLy8gU2hvcnRjdXRzIHRvIGltcHJvdmUgc3BlZWQgYW5kIHNpemVcbiAgICB2YXIgcHJvdG8gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlO1xuICAgIHZhciBleHBvcnRzID0gdGhpcztcbiAgICB2YXIgb3JpZ2luYWxHbG9iYWxWYWx1ZSA9IGV4cG9ydHMuRXZlbnRFbWl0dGVyO1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBsaXN0ZW5lciBmb3IgdGhlIGV2ZW50IGluIGl0cyBzdG9yYWdlIGFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBsaXN0ZW5lcnMgQXJyYXkgb2YgbGlzdGVuZXJzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBsb29rIGZvci5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEluZGV4IG9mIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIsIC0xIGlmIG5vdCBmb3VuZFxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBpID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBhIG1ldGhvZCB3aGlsZSBrZWVwaW5nIHRoZSBjb250ZXh0IGNvcnJlY3QsIHRvIGFsbG93IGZvciBvdmVyd3JpdGluZyBvZiB0YXJnZXQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhcmdldCBtZXRob2QuXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBhbGlhc2VkIG1ldGhvZFxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFsaWFzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFsaWFzQ2xvc3VyZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdGVuZXIgYXJyYXkgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogV2lsbCBpbml0aWFsaXNlIHRoZSBldmVudCBvYmplY3QgYW5kIGxpc3RlbmVyIGFycmF5cyBpZiByZXF1aXJlZC5cbiAgICAgKiBXaWxsIHJldHVybiBhbiBvYmplY3QgaWYgeW91IHVzZSBhIHJlZ2V4IHNlYXJjaC4gVGhlIG9iamVjdCBjb250YWlucyBrZXlzIGZvciBlYWNoIG1hdGNoZWQgZXZlbnQuIFNvIC9iYVtyel0vIG1pZ2h0IHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBiYXIgYW5kIGJhei4gQnV0IG9ubHkgaWYgeW91IGhhdmUgZWl0aGVyIGRlZmluZWQgdGhlbSB3aXRoIGRlZmluZUV2ZW50IG9yIGFkZGVkIHNvbWUgbGlzdGVuZXJzIHRvIHRoZW0uXG4gICAgICogRWFjaCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0IHJlc3BvbnNlIGlzIGFuIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXG4gICAgICogQHJldHVybiB7RnVuY3Rpb25bXXxPYmplY3R9IEFsbCBsaXN0ZW5lciBmdW5jdGlvbnMgZm9yIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBwcm90by5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZXZ0KSB7XG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9nZXRFdmVudHMoKTtcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIC8vIFJldHVybiBhIGNvbmNhdGVuYXRlZCBhcnJheSBvZiBhbGwgbWF0Y2hpbmcgZXZlbnRzIGlmXG4gICAgICAgIC8vIHRoZSBzZWxlY3RvciBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgICAgaWYgKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBldnQudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSBldmVudHNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGV2ZW50c1tldnRdIHx8IChldmVudHNbZXZ0XSA9IFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBsaXN0IG9mIGxpc3RlbmVyIG9iamVjdHMgYW5kIGZsYXR0ZW5zIGl0IGludG8gYSBsaXN0IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGxpc3RlbmVycyBSYXcgbGlzdGVuZXIgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfSBKdXN0IHRoZSBsaXN0ZW5lciBmdW5jdGlvbnMuXG4gICAgICovXG4gICAgcHJvdG8uZmxhdHRlbkxpc3RlbmVycyA9IGZ1bmN0aW9uIGZsYXR0ZW5MaXN0ZW5lcnMobGlzdGVuZXJzKSB7XG4gICAgICAgIHZhciBmbGF0TGlzdGVuZXJzID0gW107XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZsYXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcnNbaV0ubGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZsYXRMaXN0ZW5lcnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIHJlcXVlc3RlZCBsaXN0ZW5lcnMgdmlhIGdldExpc3RlbmVycyBidXQgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSByZXN1bHRzIGluc2lkZSBhbiBvYmplY3QuIFRoaXMgaXMgbWFpbmx5IGZvciBpbnRlcm5hbCB1c2UgYnV0IG90aGVycyBtYXkgZmluZCBpdCB1c2VmdWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZXR1cm4gdGhlIGxpc3RlbmVycyBmcm9tLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQWxsIGxpc3RlbmVyIGZ1bmN0aW9ucyBmb3IgYW4gZXZlbnQgaW4gYW4gb2JqZWN0LlxuICAgICAqL1xuICAgIHByb3RvLmdldExpc3RlbmVyc0FzT2JqZWN0ID0gZnVuY3Rpb24gZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVycyhldnQpO1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IHt9O1xuICAgICAgICAgICAgcmVzcG9uc2VbZXZ0XSA9IGxpc3RlbmVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZSB8fCBsaXN0ZW5lcnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciBmdW5jdGlvbiB0byB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIFRoZSBsaXN0ZW5lciB3aWxsIG5vdCBiZSBhZGRlZCBpZiBpdCBpcyBhIGR1cGxpY2F0ZS5cbiAgICAgKiBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGl0IGlzIGNhbGxlZC5cbiAgICAgKiBJZiB5b3UgcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhcyB0aGUgZXZlbnQgbmFtZSB0aGVuIHRoZSBsaXN0ZW5lciB3aWxsIGJlIGFkZGVkIHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGNhbGxpbmcuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcihldnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XG4gICAgICAgIHZhciBsaXN0ZW5lcklzV3JhcHBlZCA9IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ29iamVjdCc7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVyc1trZXldLCBsaXN0ZW5lcikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0ucHVzaChsaXN0ZW5lcklzV3JhcHBlZCA/IGxpc3RlbmVyIDoge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uY2U6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgYWRkTGlzdGVuZXJcbiAgICAgKi9cbiAgICBwcm90by5vbiA9IGFsaWFzKCdhZGRMaXN0ZW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogU2VtaS1hbGlhcyBvZiBhZGRMaXN0ZW5lci4gSXQgd2lsbCBhZGQgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmVcbiAgICAgKiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgYWZ0ZXIgaXRzIGZpcnN0IGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGNhbGxpbmcuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uYWRkT25jZUxpc3RlbmVyID0gZnVuY3Rpb24gYWRkT25jZUxpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZXZ0LCB7XG4gICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBhZGRPbmNlTGlzdGVuZXIuXG4gICAgICovXG4gICAgcHJvdG8ub25jZSA9IGFsaWFzKCdhZGRPbmNlTGlzdGVuZXInKTtcblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYW4gZXZlbnQgbmFtZS4gVGhpcyBpcyByZXF1aXJlZCBpZiB5b3Ugd2FudCB0byB1c2UgYSByZWdleCB0byBhZGQgYSBsaXN0ZW5lciB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gSWYgeW91IGRvbid0IGRvIHRoaXMgdGhlbiBob3cgZG8geW91IGV4cGVjdCBpdCB0byBrbm93IHdoYXQgZXZlbnQgdG8gYWRkIHRvPyBTaG91bGQgaXQganVzdCBhZGQgdG8gZXZlcnkgcG9zc2libGUgbWF0Y2ggZm9yIGEgcmVnZXg/IE5vLiBUaGF0IGlzIHNjYXJ5IGFuZCBiYWQuXG4gICAgICogWW91IG5lZWQgdG8gdGVsbCBpdCB3aGF0IGV2ZW50IG5hbWVzIHNob3VsZCBiZSBtYXRjaGVkIGJ5IGEgcmVnZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGNyZWF0ZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5kZWZpbmVFdmVudCA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50KGV2dCkge1xuICAgICAgICB0aGlzLmdldExpc3RlbmVycyhldnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlcyBkZWZpbmVFdmVudCB0byBkZWZpbmUgbXVsdGlwbGUgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmdbXX0gZXZ0cyBBbiBhcnJheSBvZiBldmVudCBuYW1lcyB0byBkZWZpbmUuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uZGVmaW5lRXZlbnRzID0gZnVuY3Rpb24gZGVmaW5lRXZlbnRzKGV2dHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZUV2ZW50KGV2dHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZnVuY3Rpb24gZnJvbSB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIFdoZW4gcGFzc2VkIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lLCBpdCB3aWxsIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbSBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIHJlbW92ZSBmcm9tIHRoZSBldmVudC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlTGlzdGVuZXJcbiAgICAgKi9cbiAgICBwcm90by5vZmYgPSBhbGlhcygncmVtb3ZlTGlzdGVuZXInKTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgbGlzdGVuZXJzIGluIGJ1bGsgdXNpbmcgdGhlIG1hbmlwdWxhdGVMaXN0ZW5lcnMgbWV0aG9kLlxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSBhZGRlZC5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBhZGQgdGhlIGFycmF5IG9mIGxpc3RlbmVycyB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICogWWVhaCwgdGhpcyBmdW5jdGlvbiBkb2VzIHF1aXRlIGEgYml0LiBUaGF0J3MgcHJvYmFibHkgYSBiYWQgdGhpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5hZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoZXZ0LCBsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRvIG1hbmlwdWxhdGVMaXN0ZW5lcnNcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyhmYWxzZSwgZXZ0LCBsaXN0ZW5lcnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxpc3RlbmVycyBpbiBidWxrIHVzaW5nIHRoZSBtYW5pcHVsYXRlTGlzdGVuZXJzIG1ldGhvZC5cbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIHJlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIHJlbW92ZWQuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgZnJvbSBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnJlbW92ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xuICAgICAgICAvLyBQYXNzIHRocm91Z2ggdG8gbWFuaXB1bGF0ZUxpc3RlbmVyc1xuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKHRydWUsIGV2dCwgbGlzdGVuZXJzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRWRpdHMgbGlzdGVuZXJzIGluIGJ1bGsuIFRoZSBhZGRMaXN0ZW5lcnMgYW5kIHJlbW92ZUxpc3RlbmVycyBtZXRob2RzIGJvdGggdXNlIHRoaXMgdG8gZG8gdGhlaXIgam9iLiBZb3Ugc2hvdWxkIHJlYWxseSB1c2UgdGhvc2UgaW5zdGVhZCwgdGhpcyBpcyBhIGxpdHRsZSBsb3dlciBsZXZlbC5cbiAgICAgKiBUaGUgZmlyc3QgYXJndW1lbnQgd2lsbCBkZXRlcm1pbmUgaWYgdGhlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCAodHJ1ZSkgb3IgYWRkZWQgKGZhbHNlKS5cbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSBhZGRlZC9yZW1vdmVkLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hbmlwdWxhdGUgdGhlIGxpc3RlbmVycyBvZiBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW92ZSBUcnVlIGlmIHlvdSB3YW50IHRvIHJlbW92ZSBsaXN0ZW5lcnMsIGZhbHNlIGlmIHlvdSB3YW50IHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIGFkZC9yZW1vdmUuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8ubWFuaXB1bGF0ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIG1hbmlwdWxhdGVMaXN0ZW5lcnMocmVtb3ZlLCBldnQsIGxpc3RlbmVycykge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICB2YXIgc2luZ2xlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lciA6IHRoaXMuYWRkTGlzdGVuZXI7XG4gICAgICAgIHZhciBtdWx0aXBsZSA9IHJlbW92ZSA/IHRoaXMucmVtb3ZlTGlzdGVuZXJzIDogdGhpcy5hZGRMaXN0ZW5lcnM7XG5cbiAgICAgICAgLy8gSWYgZXZ0IGlzIGFuIG9iamVjdCB0aGVuIHBhc3MgZWFjaCBvZiBpdHMgcHJvcGVydGllcyB0byB0aGlzIG1ldGhvZFxuICAgICAgICBpZiAodHlwZW9mIGV2dCA9PT0gJ29iamVjdCcgJiYgIShldnQgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gZXZ0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSAmJiAodmFsdWUgPSBldnRbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIHNpbmdsZSBsaXN0ZW5lciBzdHJhaWdodCB0aHJvdWdoIHRvIHRoZSBzaW5ndWxhciBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHBhc3MgYmFjayB0byB0aGUgbXVsdGlwbGUgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gU28gZXZ0IG11c3QgYmUgYSBzdHJpbmdcbiAgICAgICAgICAgIC8vIEFuZCBsaXN0ZW5lcnMgbXVzdCBiZSBhbiBhcnJheSBvZiBsaXN0ZW5lcnNcbiAgICAgICAgICAgIC8vIExvb3Agb3ZlciBpdCBhbmQgcGFzcyBlYWNoIG9uZSB0byB0aGUgbXVsdGlwbGUgbWV0aG9kXG4gICAgICAgICAgICBpID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBldnQsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gYSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IGFuIGV2ZW50IHRoZW4gYWxsIGxpc3RlbmVycyB3aWxsIGJlIHJlbW92ZWQuXG4gICAgICogVGhhdCBtZWFucyBldmVyeSBldmVudCB3aWxsIGJlIGVtcHRpZWQuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWdleCB0byByZW1vdmUgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBbZXZ0XSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuIFdpbGwgcmVtb3ZlIGZyb20gZXZlcnkgZXZlbnQgaWYgbm90IHBhc3NlZC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50KGV2dCkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBldnQ7XG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9nZXRFdmVudHMoKTtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAvLyBSZW1vdmUgZGlmZmVyZW50IHRoaW5ncyBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIGV2dFxuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50XG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW2V2dF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGV2ZW50cyBtYXRjaGluZyB0aGUgcmVnZXguXG4gICAgICAgICAgICBmb3IgKGtleSBpbiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgaW4gYWxsIGV2ZW50c1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiByZW1vdmVFdmVudC5cbiAgICAgKlxuICAgICAqIEFkZGVkIHRvIG1pcnJvciB0aGUgbm9kZSBBUEkuXG4gICAgICovXG4gICAgcHJvdG8ucmVtb3ZlQWxsTGlzdGVuZXJzID0gYWxpYXMoJ3JlbW92ZUV2ZW50Jyk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCBvZiB5b3VyIGNob2ljZS5cbiAgICAgKiBXaGVuIGVtaXR0ZWQsIGV2ZXJ5IGxpc3RlbmVyIGF0dGFjaGVkIHRvIHRoYXQgZXZlbnQgd2lsbCBiZSBleGVjdXRlZC5cbiAgICAgKiBJZiB5b3UgcGFzcyB0aGUgb3B0aW9uYWwgYXJndW1lbnQgYXJyYXkgdGhlbiB0aG9zZSBhcmd1bWVudHMgd2lsbCBiZSBwYXNzZWQgdG8gZXZlcnkgbGlzdGVuZXIgdXBvbiBleGVjdXRpb24uXG4gICAgICogQmVjYXVzZSBpdCB1c2VzIGBhcHBseWAsIHlvdXIgYXJyYXkgb2YgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIGFzIGlmIHlvdSB3cm90ZSB0aGVtIG91dCBzZXBhcmF0ZWx5LlxuICAgICAqIFNvIHRoZXkgd2lsbCBub3QgYXJyaXZlIHdpdGhpbiB0aGUgYXJyYXkgb24gdGhlIG90aGVyIHNpZGUsIHRoZXkgd2lsbCBiZSBzZXBhcmF0ZS5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnc10gT3B0aW9uYWwgYXJyYXkgb2YgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uIGVtaXRFdmVudChldnQsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcbiAgICAgICAgdmFyIGxpc3RlbmVyO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xuXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgaSA9IGxpc3RlbmVyc1trZXldLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGxpc3RlbmVyIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHNoYWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGVpdGhlciB3aXRoIGEgYmFzaWMgY2FsbCBvciBhbiBhcHBseSBpZiB0aGVyZSBpcyBhbiBhcmdzIGFycmF5XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJzW2tleV1baV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyLm9uY2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGxpc3RlbmVyLmxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3MgfHwgW10pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gdGhpcy5fZ2V0T25jZVJldHVyblZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgZW1pdEV2ZW50XG4gICAgICovXG4gICAgcHJvdG8udHJpZ2dlciA9IGFsaWFzKCdlbWl0RXZlbnQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRseSBkaWZmZXJlbnQgZnJvbSBlbWl0RXZlbnQgaW4gdGhhdCBpdCB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyBvbiB0byB0aGUgbGlzdGVuZXJzLCBhcyBvcHBvc2VkIHRvIHRha2luZyBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMgdG8gcGFzcyBvbi5cbiAgICAgKiBBcyB3aXRoIGVtaXRFdmVudCwgeW91IGNhbiBwYXNzIGEgcmVnZXggaW4gcGxhY2Ugb2YgdGhlIGV2ZW50IG5hbWUgdG8gZW1pdCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBlbWl0IGFuZCBleGVjdXRlIGxpc3RlbmVycyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4qfSBPcHRpb25hbCBhZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gZWFjaCBsaXN0ZW5lci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5lbWl0ID0gZnVuY3Rpb24gZW1pdChldnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0RXZlbnQoZXZ0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBhZ2FpbnN0IHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy4gSWYgYVxuICAgICAqIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGUgb25lIHNldCBoZXJlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkXG4gICAgICogYWZ0ZXIgZXhlY3V0aW9uLiBUaGlzIHZhbHVlIGRlZmF1bHRzIHRvIHRydWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUgdG8gY2hlY2sgZm9yIHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5zZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBzZXRPbmNlUmV0dXJuVmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb25jZVJldHVyblZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZlxuICAgICAqIHRoZSBsaXN0ZW5lcnMgcmV0dXJuIHZhbHVlIG1hdGNoZXMgdGhpcyBvbmUgdGhlbiBpdCBzaG91bGQgYmUgcmVtb3ZlZFxuICAgICAqIGF1dG9tYXRpY2FsbHkuIEl0IHdpbGwgcmV0dXJuIHRydWUgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyp8Qm9vbGVhbn0gVGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgZm9yIG9yIHRoZSBkZWZhdWx0LCB0cnVlLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHByb3RvLl9nZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBfZ2V0T25jZVJldHVyblZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnX29uY2VSZXR1cm5WYWx1ZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgZXZlbnRzIG9iamVjdCBhbmQgY3JlYXRlcyBvbmUgaWYgcmVxdWlyZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBldmVudHMgc3RvcmFnZSBvYmplY3QuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcHJvdG8uX2dldEV2ZW50cyA9IGZ1bmN0aW9uIF9nZXRFdmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IHt9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgZ2xvYmFsIHtAbGluayBFdmVudEVtaXR0ZXJ9IHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIHZlcnNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gTm9uIGNvbmZsaWN0aW5nIEV2ZW50RW1pdHRlciBjbGFzcy5cbiAgICAgKi9cbiAgICBFdmVudEVtaXR0ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gb3JpZ2luYWxHbG9iYWxWYWx1ZTtcbiAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbiAgICB9O1xuXG4gICAgLy8gRXhwb3NlIHRoZSBjbGFzcyBlaXRoZXIgdmlhIEFNRCwgQ29tbW9uSlMgb3IgdGhlIGdsb2JhbCBvYmplY3RcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZSgnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsW10sZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKXtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBleHBvcnRzLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcbiAgICB9XG59LmNhbGwodGhpcykpO1xuXG4vKiFcbiAqIGV2ZW50aWUgdjEuMC42XG4gKiBldmVudCBiaW5kaW5nIGhlbHBlclxuICogICBldmVudGllLmJpbmQoIGVsZW0sICdjbGljaycsIG15Rm4gKVxuICogICBldmVudGllLnVuYmluZCggZWxlbSwgJ2NsaWNrJywgbXlGbiApXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXG5cblxudmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbnZhciBiaW5kID0gZnVuY3Rpb24oKSB7fTtcblxuZnVuY3Rpb24gZ2V0SUVFdmVudCggb2JqICkge1xuICB2YXIgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gIC8vIGFkZCBldmVudC50YXJnZXRcbiAgZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgb2JqO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbmlmICggZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuICBiaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApO1xuICB9O1xufSBlbHNlIGlmICggZG9jRWxlbS5hdHRhY2hFdmVudCApIHtcbiAgYmluZCA9IGZ1bmN0aW9uKCBvYmosIHR5cGUsIGZuICkge1xuICAgIG9ialsgdHlwZSArIGZuIF0gPSBmbi5oYW5kbGVFdmVudCA/XG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZ2V0SUVFdmVudCggb2JqICk7XG4gICAgICAgIGZuLmhhbmRsZUV2ZW50LmNhbGwoIGZuLCBldmVudCApO1xuICAgICAgfSA6XG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZ2V0SUVFdmVudCggb2JqICk7XG4gICAgICAgIGZuLmNhbGwoIG9iaiwgZXZlbnQgKTtcbiAgICAgIH07XG4gICAgb2JqLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdICk7XG4gIH07XG59XG5cbnZhciB1bmJpbmQgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoIGRvY0VsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XG4gICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApO1xuICB9O1xufSBlbHNlIGlmICggZG9jRWxlbS5kZXRhY2hFdmVudCApIHtcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XG4gICAgb2JqLmRldGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdICk7XG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmpbIHR5cGUgKyBmbiBdO1xuICAgIH0gY2F0Y2ggKCBlcnIgKSB7XG4gICAgICAvLyBjYW4ndCBkZWxldGUgd2luZG93IG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICBvYmpbIHR5cGUgKyBmbiBdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIGV2ZW50aWUgPSB7XG4gIGJpbmQ6IGJpbmQsXG4gIHVuYmluZDogdW5iaW5kXG59O1xuXG4vLyAtLS0tLSBtb2R1bGUgZGVmaW5pdGlvbiAtLS0tLSAvL1xuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgLy8gQU1EXG4gIGRlZmluZSggJ2V2ZW50aWUvZXZlbnRpZScsZXZlbnRpZSApO1xufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICAvLyBDb21tb25KU1xuICBtb2R1bGUuZXhwb3J0cyA9IGV2ZW50aWU7XG59IGVsc2Uge1xuICAvLyBicm93c2VyIGdsb2JhbFxuICB3aW5kb3cuZXZlbnRpZSA9IGV2ZW50aWU7XG59XG5cbn0pKCB3aW5kb3cgKTtcblxuLyohXG4gKiBnZXRTdHlsZVByb3BlcnR5IHYxLjAuNFxuICogb3JpZ2luYWwgYnkga2FuZ2F4XG4gKiBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS9mZWF0dXJlLXRlc3RpbmctY3NzLXByb3BlcnRpZXMvXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUgKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIGV4cG9ydHM6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcblxuXG5cbnZhciBwcmVmaXhlcyA9ICdXZWJraXQgTW96IG1zIE1zIE8nLnNwbGl0KCcgJyk7XG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVByb3BlcnR5KCBwcm9wTmFtZSApIHtcbiAgaWYgKCAhcHJvcE5hbWUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gdGVzdCBzdGFuZGFyZCBwcm9wZXJ0eSBmaXJzdFxuICBpZiAoIHR5cGVvZiBkb2NFbGVtU3R5bGVbIHByb3BOYW1lIF0gPT09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBwcm9wTmFtZTtcbiAgfVxuXG4gIC8vIGNhcGl0YWxpemVcbiAgcHJvcE5hbWUgPSBwcm9wTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnNsaWNlKDEpO1xuXG4gIC8vIHRlc3QgdmVuZG9yIHNwZWNpZmljIHByb3BlcnRpZXNcbiAgdmFyIHByZWZpeGVkO1xuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBwcmVmaXhlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgcHJvcE5hbWU7XG4gICAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcmVmaXhlZCBdID09PSAnc3RyaW5nJyApIHtcbiAgICAgIHJldHVybiBwcmVmaXhlZDtcbiAgICB9XG4gIH1cbn1cblxuLy8gdHJhbnNwb3J0XG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgLy8gQU1EXG4gIGRlZmluZSggJ2dldC1zdHlsZS1wcm9wZXJ0eS9nZXQtc3R5bGUtcHJvcGVydHknLFtdLGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnZXRTdHlsZVByb3BlcnR5O1xuICB9KTtcbn0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcbiAgLy8gQ29tbW9uSlMgZm9yIENvbXBvbmVudFxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFN0eWxlUHJvcGVydHk7XG59IGVsc2Uge1xuICAvLyBicm93c2VyIGdsb2JhbFxuICB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSA9IGdldFN0eWxlUHJvcGVydHk7XG59XG5cbn0pKCB3aW5kb3cgKTtcblxuLyohXG4gKiBnZXRTaXplIHYxLjIuMlxuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgZXhwb3J0czogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCBjb25zb2xlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIHVuZGVmaW5lZCApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICYmICFpc05hTiggbnVtICk7XG4gIHJldHVybiBpc1ZhbGlkICYmIG51bTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnXG5dO1xuXG5mdW5jdGlvbiBnZXRaZXJvU2l6ZSgpIHtcbiAgdmFyIHNpemUgPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGlubmVyV2lkdGg6IDAsXG4gICAgaW5uZXJIZWlnaHQ6IDAsXG4gICAgb3V0ZXJXaWR0aDogMCxcbiAgICBvdXRlckhlaWdodDogMFxuICB9O1xuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBtZWFzdXJlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAwO1xuICB9XG4gIHJldHVybiBzaXplO1xufVxuXG5cblxuZnVuY3Rpb24gZGVmaW5lR2V0U2l6ZSggZ2V0U3R5bGVQcm9wZXJ0eSApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIGlzU2V0dXAgPSBmYWxzZTtcblxudmFyIGdldFN0eWxlLCBib3hTaXppbmdQcm9wLCBpc0JveFNpemVPdXRlcjtcblxuLyoqXG4gKiBzZXR1cCB2YXJzIGFuZCBmdW5jdGlvbnNcbiAqIGRvIGl0IG9uIGluaXRpYWwgZ2V0U2l6ZSgpLCByYXRoZXIgdGhhbiBvbiBzY3JpcHQgbG9hZFxuICogRm9yIEZpcmVmb3ggYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgLy8gc2V0dXAgb25jZVxuICBpZiAoIGlzU2V0dXAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzU2V0dXAgPSB0cnVlO1xuXG4gIHZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7XG4gIGdldFN0eWxlID0gKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ2V0U3R5bGVGbiA9IGdldENvbXB1dGVkU3R5bGUgP1xuICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG4gICAgICB9IDpcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0U3R5bGUoIGVsZW0gKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlRm4oIGVsZW0gKTtcbiAgICAgICAgaWYgKCAhc3R5bGUgKSB7XG4gICAgICAgICAgbG9nRXJyb3IoICdTdHlsZSByZXR1cm5lZCAnICsgc3R5bGUgK1xuICAgICAgICAgICAgJy4gQXJlIHlvdSBydW5uaW5nIHRoaXMgY29kZSBpbiBhIGhpZGRlbiBpZnJhbWUgb24gRmlyZWZveD8gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfTtcbiAgfSkoKTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgYm94U2l6aW5nUHJvcCA9IGdldFN0eWxlUHJvcGVydHkoJ2JveFNpemluZycpO1xuXG4gIC8qKlxuICAgKiBXZWJLaXQgbWVhc3VyZXMgdGhlIG91dGVyLXdpZHRoIG9uIHN0eWxlLndpZHRoIG9uIGJvcmRlci1ib3ggZWxlbXNcbiAgICogSUUgJiBGaXJlZm94IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxuICAgKi9cbiAgaWYgKCBib3hTaXppbmdQcm9wICkge1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XG4gICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcbiAgICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcbiAgICBkaXYuc3R5bGVbIGJveFNpemluZ1Byb3AgXSA9ICdib3JkZXItYm94JztcblxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgYm9keS5hcHBlbmRDaGlsZCggZGl2ICk7XG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xuXG4gICAgaXNCb3hTaXplT3V0ZXIgPSBnZXRTdHlsZVNpemUoIHN0eWxlLndpZHRoICkgPT09IDIwMDtcbiAgICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcbiAgfVxuXG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgc2V0dXAoKTtcblxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT09ICdzdHJpbmcnICkge1xuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9PSAnb2JqZWN0JyB8fCAhZWxlbS5ub2RlVHlwZSApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZWxlbSApO1xuXG4gIC8vIGlmIGhpZGRlbiwgZXZlcnl0aGluZyBpcyAwXG4gIGlmICggc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnICkge1xuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuICB9XG5cbiAgdmFyIHNpemUgPSB7fTtcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9ICEhKCBib3hTaXppbmdQcm9wICYmXG4gICAgc3R5bGVbIGJveFNpemluZ1Byb3AgXSAmJiBzdHlsZVsgYm94U2l6aW5nUHJvcCBdID09PSAnYm9yZGVyLWJveCcgKTtcblxuICAvLyBnZXQgYWxsIG1lYXN1cmVtZW50c1xuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBtZWFzdXJlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlWyBtZWFzdXJlbWVudCBdO1xuICAgIHZhbHVlID0gbXVuZ2VOb25QaXhlbCggZWxlbSwgdmFsdWUgKTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH1cblxuICB2YXIgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgdmFyIG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gSUU4IHJldHVybnMgcGVyY2VudCB2YWx1ZXMsIG5vdCBwaXhlbHNcbi8vIHRha2VuIGZyb20galF1ZXJ5J3MgY3VyQ1NTXG5mdW5jdGlvbiBtdW5nZU5vblBpeGVsKCBlbGVtLCB2YWx1ZSApIHtcbiAgLy8gSUU4IGFuZCBoYXMgcGVyY2VudCB2YWx1ZVxuICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIHx8IHZhbHVlLmluZGV4T2YoJyUnKSA9PT0gLTEgKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7XG4gIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcbiAgdmFyIGxlZnQgPSBzdHlsZS5sZWZ0O1xuICB2YXIgcnMgPSBlbGVtLnJ1bnRpbWVTdHlsZTtcbiAgdmFyIHJzTGVmdCA9IHJzICYmIHJzLmxlZnQ7XG5cbiAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuICBpZiAoIHJzTGVmdCApIHtcbiAgICBycy5sZWZ0ID0gZWxlbS5jdXJyZW50U3R5bGUubGVmdDtcbiAgfVxuICBzdHlsZS5sZWZ0ID0gdmFsdWU7XG4gIHZhbHVlID0gc3R5bGUucGl4ZWxMZWZ0O1xuXG4gIC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcbiAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gIGlmICggcnNMZWZ0ICkge1xuICAgIHJzLmxlZnQgPSByc0xlZnQ7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbnJldHVybiBnZXRTaXplO1xuXG59XG5cbi8vIHRyYW5zcG9ydFxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gIC8vIEFNRCBmb3IgUmVxdWlyZUpTXG4gIGRlZmluZSggJ2dldC1zaXplL2dldC1zaXplJyxbICdnZXQtc3R5bGUtcHJvcGVydHkvZ2V0LXN0eWxlLXByb3BlcnR5JyBdLCBkZWZpbmVHZXRTaXplICk7XG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG4gIC8vIENvbW1vbkpTIGZvciBDb21wb25lbnRcbiAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVHZXRTaXplKCByZXF1aXJlKCdkZXNhbmRyby1nZXQtc3R5bGUtcHJvcGVydHknKSApO1xufSBlbHNlIHtcbiAgLy8gYnJvd3NlciBnbG9iYWxcbiAgd2luZG93LmdldFNpemUgPSBkZWZpbmVHZXRTaXplKCB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSApO1xufVxuXG59KSggd2luZG93ICk7XG5cbi8qIVxuICogZG9jUmVhZHkgdjEuMC40XG4gKiBDcm9zcyBicm93c2VyIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgZW1pdHRlclxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUqL1xuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuLy8gY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgdG8gYmUgdHJpZ2dlcmVkIG9uIHJlYWR5XG52YXIgcXVldWUgPSBbXTtcblxuZnVuY3Rpb24gZG9jUmVhZHkoIGZuICkge1xuICAvLyB0aHJvdyBvdXQgbm9uLWZ1bmN0aW9uc1xuICBpZiAoIHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgKSB7XG4gICAgLy8gcmVhZHkgbm93LCBoaXQgaXRcbiAgICBmbigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHF1ZXVlIGZ1bmN0aW9uIHdoZW4gcmVhZHlcbiAgICBxdWV1ZS5wdXNoKCBmbiApO1xuICB9XG59XG5cbmRvY1JlYWR5LmlzUmVhZHkgPSBmYWxzZTtcblxuLy8gdHJpZ2dlcmVkIG9uIHZhcmlvdXMgZG9jIHJlYWR5IGV2ZW50c1xuZnVuY3Rpb24gb25SZWFkeSggZXZlbnQgKSB7XG4gIC8vIGJhaWwgaWYgYWxyZWFkeSB0cmlnZ2VyZWQgb3IgSUU4IGRvY3VtZW50IGlzIG5vdCByZWFkeSBqdXN0IHlldFxuICB2YXIgaXNJRThOb3RSZWFkeSA9IGV2ZW50LnR5cGUgPT09ICdyZWFkeXN0YXRlY2hhbmdlJyAmJiBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnY29tcGxldGUnO1xuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgfHwgaXNJRThOb3RSZWFkeSApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmlnZ2VyKCk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gIGRvY1JlYWR5LmlzUmVhZHkgPSB0cnVlO1xuICAvLyBwcm9jZXNzIHF1ZXVlXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHF1ZXVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2ldO1xuICAgIGZuKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lRG9jUmVhZHkoIGV2ZW50aWUgKSB7XG4gIC8vIHRyaWdnZXIgcmVhZHkgaWYgcGFnZSBpcyByZWFkeVxuICBpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgKSB7XG4gICAgdHJpZ2dlcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIGxpc3RlbiBmb3IgZXZlbnRzXG4gICAgZXZlbnRpZS5iaW5kKCBkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBvblJlYWR5ICk7XG4gICAgZXZlbnRpZS5iaW5kKCBkb2N1bWVudCwgJ3JlYWR5c3RhdGVjaGFuZ2UnLCBvblJlYWR5ICk7XG4gICAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdsb2FkJywgb25SZWFkeSApO1xuICB9XG5cbiAgcmV0dXJuIGRvY1JlYWR5O1xufVxuXG4vLyB0cmFuc3BvcnRcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAvLyBBTURcbiAgZGVmaW5lKCAnZG9jLXJlYWR5L2RvYy1yZWFkeScsWyAnZXZlbnRpZS9ldmVudGllJyBdLCBkZWZpbmVEb2NSZWFkeSApO1xufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluZURvY1JlYWR5KCByZXF1aXJlKCdldmVudGllJykgKTtcbn0gZWxzZSB7XG4gIC8vIGJyb3dzZXIgZ2xvYmFsXG4gIHdpbmRvdy5kb2NSZWFkeSA9IGRlZmluZURvY1JlYWR5KCB3aW5kb3cuZXZlbnRpZSApO1xufVxuXG59KSggd2luZG93ICk7XG5cbi8qKlxuICogbWF0Y2hlc1NlbGVjdG9yIHYxLjAuM1xuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCBFbGVtUHJvdG8gKSB7XG5cbiAgXG5cbiAgdmFyIG1hdGNoZXNNZXRob2QgPSAoIGZ1bmN0aW9uKCkge1xuICAgIC8vIGNoZWNrIGZvciB0aGUgc3RhbmRhcmQgbWV0aG9kIG5hbWUgZmlyc3RcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXNTZWxlY3Rvcic7XG4gICAgfVxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhlcyA9IFsgJ3dlYmtpdCcsICdtb3onLCAnbXMnLCAnbycgXTtcblxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IHByZWZpeGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xuICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgfVxuICAgIH1cbiAgfSkoKTtcblxuICAvLyAtLS0tLSBtYXRjaCAtLS0tLSAvL1xuXG4gIGZ1bmN0aW9uIG1hdGNoKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xuICB9XG5cbiAgLy8gLS0tLS0gYXBwZW5kVG9GcmFnbWVudCAtLS0tLSAvL1xuXG4gIGZ1bmN0aW9uIGNoZWNrUGFyZW50KCBlbGVtICkge1xuICAgIC8vIG5vdCBuZWVkZWQgaWYgYWxyZWFkeSBoYXMgcGFyZW50XG4gICAgaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApO1xuICB9XG5cbiAgLy8gLS0tLS0gcXVlcnkgLS0tLS0gLy9cblxuICAvLyBmYWxsIGJhY2sgdG8gdXNpbmcgUVNBXG4gIC8vIHRoeCBAam9uYXRoYW50bmVhbCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8zMDYyOTU1XG4gIGZ1bmN0aW9uIHF1ZXJ5KCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICAvLyBhcHBlbmQgdG8gZnJhZ21lbnQgaWYgbm8gcGFyZW50XG4gICAgY2hlY2tQYXJlbnQoIGVsZW0gKTtcblxuICAgIC8vIG1hdGNoIGVsZW0gd2l0aCBhbGwgc2VsZWN0ZWQgZWxlbXMgb2YgcGFyZW50XG4gICAgdmFyIGVsZW1zID0gZWxlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICAvLyByZXR1cm4gdHJ1ZSBpZiBtYXRjaFxuICAgICAgaWYgKCBlbGVtc1tpXSA9PT0gZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG90aGVyd2lzZSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyAtLS0tLSBtYXRjaENoaWxkIC0tLS0tIC8vXG5cbiAgZnVuY3Rpb24gbWF0Y2hDaGlsZCggZWxlbSwgc2VsZWN0b3IgKSB7XG4gICAgY2hlY2tQYXJlbnQoIGVsZW0gKTtcbiAgICByZXR1cm4gbWF0Y2goIGVsZW0sIHNlbGVjdG9yICk7XG4gIH1cblxuICAvLyAtLS0tLSBtYXRjaGVzU2VsZWN0b3IgLS0tLS0gLy9cblxuICB2YXIgbWF0Y2hlc1NlbGVjdG9yO1xuXG4gIGlmICggbWF0Y2hlc01ldGhvZCApIHtcbiAgICAvLyBJRTkgc3VwcG9ydHMgbWF0Y2hlc1NlbGVjdG9yLCBidXQgZG9lc24ndCB3b3JrIG9uIG9ycGhhbmVkIGVsZW1zXG4gICAgLy8gY2hlY2sgZm9yIHRoYXRcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHN1cHBvcnRzT3JwaGFucyA9IG1hdGNoKCBkaXYsICdkaXYnICk7XG4gICAgbWF0Y2hlc1NlbGVjdG9yID0gc3VwcG9ydHNPcnBoYW5zID8gbWF0Y2ggOiBtYXRjaENoaWxkO1xuICB9IGVsc2Uge1xuICAgIG1hdGNoZXNTZWxlY3RvciA9IHF1ZXJ5O1xuICB9XG5cbiAgLy8gdHJhbnNwb3J0XG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsW10sZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU2VsZWN0b3I7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gbWF0Y2hlc1NlbGVjdG9yO1xuICB9XG5cbn0pKCBFbGVtZW50LnByb3RvdHlwZSApO1xuXG4vKipcbiAqIEZpenp5IFVJIHV0aWxzIHYxLjAuMVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmaXp6eS11aS11dGlscy91dGlscycsW1xuICAgICAgJ2RvYy1yZWFkeS9kb2MtcmVhZHknLFxuICAgICAgJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcbiAgICBdLCBmdW5jdGlvbiggZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGRvY1JlYWR5LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkb2MtcmVhZHknKSxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5kb2NSZWFkeSxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICkge1xuXG5cblxudmFyIHV0aWxzID0ge307XG5cbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xuXG4vLyBleHRlbmRzIG9iamVjdHNcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIGlzQXJyYXkgLS0tLS0gLy9cbiAgXG52YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudXRpbHMuaXNBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gIHJldHVybiBvYmpUb1N0cmluZy5jYWxsKCBvYmogKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG51dGlscy5tYWtlQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xuICB2YXIgYXJ5ID0gW107XG4gIGlmICggdXRpbHMuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgYXJ5ID0gb2JqO1xuICB9IGVsc2UgaWYgKCBvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IG9iai5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gICAgYXJ5LnB1c2goIG9iaiApO1xuICB9XG4gIHJldHVybiBhcnk7XG59O1xuXG4vLyAtLS0tLSBpbmRleE9mIC0tLS0tIC8vXG5cbi8vIGluZGV4IG9mIGhlbHBlciBjYXVzZSBJRThcbnV0aWxzLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgICByZXR1cm4gYXJ5LmluZGV4T2YoIG9iaiApO1xuICB9IDogZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGFyeS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGlmICggYXJ5W2ldID09PSBvYmogKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbi8vIC0tLS0tIHJlbW92ZUZyb20gLS0tLS0gLy9cblxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgdmFyIGluZGV4ID0gdXRpbHMuaW5kZXhPZiggYXJ5LCBvYmogKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBpc0VsZW1lbnQgLS0tLS0gLy9cblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzg0MzgwLzE4MjE4M1xudXRpbHMuaXNFbGVtZW50ID0gKCB0eXBlb2YgSFRNTEVsZW1lbnQgPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgSFRNTEVsZW1lbnQgPT0gJ29iamVjdCcgKSA/XG4gIGZ1bmN0aW9uIGlzRWxlbWVudERPTTIoIG9iaiApIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH0gOlxuICBmdW5jdGlvbiBpc0VsZW1lbnRRdWlya3koIG9iaiApIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiZcbiAgICAgIG9iai5ub2RlVHlwZSA9PSAxICYmIHR5cGVvZiBvYmoubm9kZU5hbWUgPT0gJ3N0cmluZyc7XG4gIH07XG5cbi8vIC0tLS0tIHNldFRleHQgLS0tLS0gLy9cblxudXRpbHMuc2V0VGV4dCA9ICggZnVuY3Rpb24oKSB7XG4gIHZhciBzZXRUZXh0UHJvcGVydHk7XG4gIGZ1bmN0aW9uIHNldFRleHQoIGVsZW0sIHRleHQgKSB7XG4gICAgLy8gb25seSBjaGVjayBzZXRUZXh0UHJvcGVydHkgb25jZVxuICAgIHNldFRleHRQcm9wZXJ0eSA9IHNldFRleHRQcm9wZXJ0eSB8fCAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudCAhPT0gdW5kZWZpbmVkID8gJ3RleHRDb250ZW50JyA6ICdpbm5lclRleHQnICk7XG4gICAgZWxlbVsgc2V0VGV4dFByb3BlcnR5IF0gPSB0ZXh0O1xuICB9XG4gIHJldHVybiBzZXRUZXh0O1xufSkoKTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgZmZFbGVtcyA9IFtdO1xuXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBlbGVtID0gZWxlbXNbaV07XG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XG4gICAgaWYgKCAhdXRpbHMuaXNFbGVtZW50KCBlbGVtICkgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcbiAgICBpZiAoIHNlbGVjdG9yICkge1xuICAgICAgLy8gZmlsdGVyIHNpYmxpbmdzXG4gICAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICB9XG4gICAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgICB2YXIgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgICBmb3IgKCB2YXIgaj0wLCBqTGVuID0gY2hpbGRFbGVtcy5sZW5ndGg7IGogPCBqTGVuOyBqKysgKSB7XG4gICAgICAgIGZmRWxlbXMucHVzaCggY2hpbGRFbGVtc1tqXSApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmZFbGVtcztcbn07XG5cbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24oIF9jbGFzcywgbWV0aG9kTmFtZSwgdGhyZXNob2xkICkge1xuICAvLyBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcbiAgdmFyIHRpbWVvdXROYW1lID0gbWV0aG9kTmFtZSArICdUaW1lb3V0JztcblxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgaWYgKCB0aW1lb3V0ICkge1xuICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgX3RoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgfSwgdGhyZXNob2xkIHx8IDEwMCApO1xuICB9O1xufTtcblxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cblxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XG4gIH0pLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuLyoqXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgLmpzLW5hbWVzcGFjZSBjbGFzc1xuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbiAqIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbiBhdHRyaWJ1dGVcbiAqL1xudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcbiAgZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XG4gICAgdmFyIGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5qcy0nICsgZGFzaGVkTmFtZXNwYWNlICk7XG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZSArICctb3B0aW9ucyc7XG5cbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIHZhciBlbGVtID0gZWxlbXNbaV07XG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApO1xuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBwYXJzaW5nICcgKyBkYXRhQXR0ciArICcgb24gJyArXG4gICAgICAgICAgICBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKyAoIGVsZW0uaWQgPyAnIycgKyBlbGVtLmlkIDogJycgKSArICc6ICcgK1xuICAgICAgICAgICAgZXJyb3IgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCdsYXlvdXRuYW1lJylcbiAgICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xuICAgICAgaWYgKCBqUXVlcnkgKSB7XG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0pKTtcblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmbGlja2l0eS9qcy9jZWxsJyxbXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnXG4gICAgXSwgZnVuY3Rpb24oIGdldFNpemUgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBnZXRTaXplICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LkNlbGwgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmdldFNpemVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBnZXRTaXplICkge1xuXG5cblxuZnVuY3Rpb24gQ2VsbCggZWxlbSwgcGFyZW50ICkge1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG52YXIgaXNJRTggPSAnYXR0YWNoRXZlbnQnIGluIHdpbmRvdztcblxuQ2VsbC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIC8vIElFOCBwcmV2ZW50IGNoaWxkIGZyb20gY2hhbmdpbmcgZm9jdXMgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTc1MjUyMjMvMTgyMTgzXG4gIGlmICggaXNJRTggKSB7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ3Vuc2VsZWN0YWJsZScsICdvbicgKTtcbiAgfVxuICB0aGlzLnggPSAwO1xuICB0aGlzLnNoaWZ0ID0gMDtcbn07XG5cbkNlbGwucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVzZXQgc3R5bGVcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gIHZhciBzaWRlID0gdGhpcy5wYXJlbnQub3JpZ2luU2lkZTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlWyBzaWRlIF0gPSAnJztcbn07XG5cbkNlbGwucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5DZWxsLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnNldERlZmF1bHRUYXJnZXQoKTtcbiAgdGhpcy5yZW5kZXJQb3NpdGlvbiggeCApO1xufTtcblxuQ2VsbC5wcm90b3R5cGUuc2V0RGVmYXVsdFRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbWFyZ2luUHJvcGVydHkgPSB0aGlzLnBhcmVudC5vcmlnaW5TaWRlID09ICdsZWZ0JyA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHRoaXMudGFyZ2V0ID0gdGhpcy54ICsgdGhpcy5zaXplWyBtYXJnaW5Qcm9wZXJ0eSBdICtcbiAgICB0aGlzLnNpemUud2lkdGggKiB0aGlzLnBhcmVudC5jZWxsQWxpZ247XG59O1xuXG5DZWxsLnByb3RvdHlwZS5yZW5kZXJQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICB2YXIgc2lkZSA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGU7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgc2lkZSBdID0gdGhpcy5wYXJlbnQuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGZhY3RvciAtIDAsIDEsIG9yIC0xXG4qKi9cbkNlbGwucHJvdG90eXBlLndyYXBTaGlmdCA9IGZ1bmN0aW9uKCBzaGlmdCApIHtcbiAgdGhpcy5zaGlmdCA9IHNoaWZ0O1xuICB0aGlzLnJlbmRlclBvc2l0aW9uKCB0aGlzLnggKyB0aGlzLnBhcmVudC5zbGlkZWFibGVXaWR0aCAqIHNoaWZ0ICk7XG59O1xuXG5DZWxsLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xufTtcblxucmV0dXJuIENlbGw7XG5cbn0pKTtcblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmbGlja2l0eS9qcy9hbmltYXRlJyxbXG4gICAgICAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXG4gICAgXSwgZnVuY3Rpb24oIGdldFN0eWxlUHJvcGVydHksIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1nZXQtc3R5bGUtcHJvcGVydHknKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5nZXRTdHlsZVByb3BlcnR5LFxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGdldFN0eWxlUHJvcGVydHksIHV0aWxzICkge1xuXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE4NjY0NzRcblxudmFyIGxhc3RUaW1lID0gMDtcbnZhciBwcmVmaXhlcyA9ICd3ZWJraXQgbW96IG1zIG8nLnNwbGl0KCcgJyk7XG4vLyBnZXQgdW5wcmVmaXhlZCByQUYgYW5kIGNBRiwgaWYgcHJlc2VudFxudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG52YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4vLyBsb29wIHRocm91Z2ggdmVuZG9yIHByZWZpeGVzIGFuZCBnZXQgcHJlZml4ZWQgckFGIGFuZCBjQUZcbnZhciBwcmVmaXg7XG5mb3IoIHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xuICBpZiAoIHJlcXVlc3RBbmltYXRpb25GcmFtZSAmJiBjYW5jZWxBbmltYXRpb25GcmFtZSApIHtcbiAgICBicmVhaztcbiAgfVxuICBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvd1sgcHJlZml4ICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZScgXTtcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUgID0gY2FuY2VsQW5pbWF0aW9uRnJhbWUgIHx8IHdpbmRvd1sgcHJlZml4ICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJyBdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93WyBwcmVmaXggKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJyBdO1xufVxuXG4vLyBmYWxsYmFjayB0byBzZXRUaW1lb3V0IGFuZCBjbGVhclRpbWVvdXQgaWYgZWl0aGVyIHJlcXVlc3QvY2FuY2VsIGlzIG5vdCBzdXBwb3J0ZWRcbmlmICggIXJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAhY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSAge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG4gICAgdmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCggMCwgMTYgLSAoIGN1cnJUaW1lIC0gbGFzdFRpbWUgKSApO1xuICAgIHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrKCBjdXJyVGltZSArIHRpbWVUb0NhbGwgKTtcbiAgICB9LCB0aW1lVG9DYWxsICk7XG4gICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oIGlkICkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoIGlkICk7XG4gIH07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFuaW1hdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHByb3RvID0ge307XG5cbnByb3RvLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgdGhpcy5yZXN0aW5nRnJhbWVzID0gMDtcbiAgdGhpcy5hbmltYXRlKCk7XG59O1xuXG5wcm90by5hbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYXBwbHlEcmFnRm9yY2UoKTtcbiAgdGhpcy5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbigpO1xuXG4gIHZhciBwcmV2aW91c1ggPSB0aGlzLng7XG5cbiAgdGhpcy5pbnRlZ3JhdGVQaHlzaWNzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgdGhpcy5zZXR0bGUoIHByZXZpb3VzWCApO1xuICAvLyBhbmltYXRlIG5leHQgZnJhbWVcbiAgaWYgKCB0aGlzLmlzQW5pbWF0aW5nICkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBmdW5jdGlvbiBhbmltYXRlRnJhbWUoKSB7XG4gICAgICBfdGhpcy5hbmltYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogL1xuICAvLyBsb2cgYW5pbWF0aW9uIGZyYW1lIHJhdGVcbiAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gIGlmICggdGhpcy50aGVuICkge1xuICAgIGNvbnNvbGUubG9nKCB+figgMTAwMCAvIChub3ctdGhpcy50aGVuKSkgKyAnZnBzJyApXG4gIH1cbiAgdGhpcy50aGVuID0gbm93O1xuICAvKiovXG59O1xuXG5cbnZhciB0cmFuc2Zvcm1Qcm9wZXJ0eSA9IGdldFN0eWxlUHJvcGVydHkoJ3RyYW5zZm9ybScpO1xudmFyIGlzM2QgPSAhIWdldFN0eWxlUHJvcGVydHkoJ3BlcnNwZWN0aXZlJyk7XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gdGhpcy54O1xuICAvLyB3cmFwIHBvc2l0aW9uIGFyb3VuZFxuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIHRoaXMuY2VsbHMubGVuZ3RoID4gMSApIHtcbiAgICB4ID0gdXRpbHMubW9kdWxvKCB4LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XG4gICAgeCA9IHggLSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xuICAgIHRoaXMuc2hpZnRXcmFwQ2VsbHMoIHggKTtcbiAgfVxuXG4gIHggPSB4ICsgdGhpcy5jdXJzb3JQb3NpdGlvbjtcblxuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnQgYW5kIHVzaW5nIHRyYW5zZm9ybVxuICB4ID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICYmIHRyYW5zZm9ybVByb3BlcnR5ID8gLXggOiB4O1xuXG4gIHZhciB2YWx1ZSA9IHRoaXMuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xuXG4gIGlmICggdHJhbnNmb3JtUHJvcGVydHkgKSB7XG4gICAgLy8gdXNlIDNEIHRyYW5mb3JtcyBmb3IgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIG9uIGlPU1xuICAgIC8vIGJ1dCB1c2UgMkQgd2hlbiBzZXR0bGVkLCBmb3IgYmV0dGVyIGZvbnQtcmVuZGVyaW5nXG4gICAgdGhpcy5zbGlkZXIuc3R5bGVbIHRyYW5zZm9ybVByb3BlcnR5IF0gPSBpczNkICYmIHRoaXMuaXNBbmltYXRpbmcgP1xuICAgICAgJ3RyYW5zbGF0ZTNkKCcgKyB2YWx1ZSArICcsMCwwKScgOiAndHJhbnNsYXRlWCgnICsgdmFsdWUgKyAnKSc7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zbGlkZXIuc3R5bGVbIHRoaXMub3JpZ2luU2lkZSBdID0gdmFsdWU7XG4gIH1cbn07XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHNlbGVjdGVkQ2VsbCA9IHRoaXMuY2VsbHNbIHRoaXMuc2VsZWN0ZWRJbmRleCBdO1xuICB0aGlzLnggPSAtc2VsZWN0ZWRDZWxsLnRhcmdldDtcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xufTtcblxucHJvdG8uZ2V0UG9zaXRpb25WYWx1ZSA9IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkge1xuICAgIC8vIHBlcmNlbnQgcG9zaXRpb24sIHJvdW5kIHRvIDIgZGlnaXRzLCBsaWtlIDEyLjM0JVxuICAgIHJldHVybiAoIE1hdGgucm91bmQoICggcG9zaXRpb24gLyB0aGlzLnNpemUuaW5uZXJXaWR0aCApICogMTAwMDAgKSAqIDAuMDEgKSsgJyUnO1xuICB9IGVsc2Uge1xuICAgIC8vIHBpeGVsIHBvc2l0aW9uaW5nXG4gICAgcmV0dXJuIE1hdGgucm91bmQoIHBvc2l0aW9uICkgKyAncHgnO1xuICB9XG59O1xuXG5wcm90by5zZXR0bGUgPSBmdW5jdGlvbiggcHJldmlvdXNYICkge1xuICAvLyBrZWVwIHRyYWNrIG9mIGZyYW1lcyB3aGVyZSB4IGhhc24ndCBtb3ZlZFxuICBpZiAoICF0aGlzLmlzUG9pbnRlckRvd24gJiYgTWF0aC5yb3VuZCggdGhpcy54ICogMTAwICkgPT0gTWF0aC5yb3VuZCggcHJldmlvdXNYICogMTAwICkgKSB7XG4gICAgdGhpcy5yZXN0aW5nRnJhbWVzKys7XG4gIH1cbiAgLy8gc3RvcCBhbmltYXRpbmcgaWYgcmVzdGluZyBmb3IgMyBvciBtb3JlIGZyYW1lc1xuICBpZiAoIHRoaXMucmVzdGluZ0ZyYW1lcyA+IDIgKSB7XG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLmlzRnJlZVNjcm9sbGluZztcbiAgICAvLyByZW5kZXIgcG9zaXRpb24gd2l0aCB0cmFuc2xhdGVYIHdoZW4gc2V0dGxlZFxuICAgIGlmICggaXMzZCApIHtcbiAgICAgIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdzZXR0bGUnKTtcbiAgfVxufTtcblxucHJvdG8uc2hpZnRXcmFwQ2VsbHMgPSBmdW5jdGlvbiggeCApIHtcbiAgLy8gc2hpZnQgYmVmb3JlIGNlbGxzXG4gIHZhciBiZWZvcmVHYXAgPSB0aGlzLmN1cnNvclBvc2l0aW9uICsgeDtcbiAgdGhpcy5fc2hpZnRDZWxscyggdGhpcy5iZWZvcmVTaGlmdENlbGxzLCBiZWZvcmVHYXAsIC0xICk7XG4gIC8vIHNoaWZ0IGFmdGVyIGNlbGxzXG4gIHZhciBhZnRlckdhcCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gKCB4ICsgdGhpcy5zbGlkZWFibGVXaWR0aCArIHRoaXMuY3Vyc29yUG9zaXRpb24gKTtcbiAgdGhpcy5fc2hpZnRDZWxscyggdGhpcy5hZnRlclNoaWZ0Q2VsbHMsIGFmdGVyR2FwLCAxICk7XG59O1xuXG5wcm90by5fc2hpZnRDZWxscyA9IGZ1bmN0aW9uKCBjZWxscywgZ2FwLCBzaGlmdCApIHtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGNlbGwgPSBjZWxsc1tpXTtcbiAgICB2YXIgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcbiAgICBjZWxsLndyYXBTaGlmdCggY2VsbFNoaWZ0ICk7XG4gICAgZ2FwIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG59O1xuXG5wcm90by5fdW5zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBjZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICBjZWxsc1tpXS53cmFwU2hpZnQoIDAgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGh5c2ljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5pbnRlZ3JhdGVQaHlzaWNzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudmVsb2NpdHkgKz0gdGhpcy5hY2NlbDtcbiAgdGhpcy54ICs9IHRoaXMudmVsb2NpdHk7XG4gIHRoaXMudmVsb2NpdHkgKj0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpO1xuICAvLyByZXNldCBhY2NlbGVyYXRpb25cbiAgdGhpcy5hY2NlbCA9IDA7XG59O1xuXG5wcm90by5hcHBseUZvcmNlID0gZnVuY3Rpb24oIGZvcmNlICkge1xuICB0aGlzLmFjY2VsICs9IGZvcmNlO1xufTtcblxucHJvdG8uZ2V0RnJpY3Rpb25GYWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDEgLSB0aGlzLm9wdGlvbnNbIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID8gJ2ZyZWVTY3JvbGxGcmljdGlvbicgOiAnZnJpY3Rpb24nIF07XG59O1xuXG5cbnByb3RvLmdldFJlc3RpbmdQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBteSB0aGFua3MgdG8gU3RldmVuIFdpdHRlbnMsIHdobyBzaW1wbGlmaWVkIHRoaXMgbWF0aCBncmVhdGx5XG4gIHJldHVybiB0aGlzLnggKyB0aGlzLnZlbG9jaXR5IC8gKCAxIC0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpICk7XG59O1xuXG5wcm90by5hcHBseURyYWdGb3JjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzUG9pbnRlckRvd24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNoYW5nZSB0aGUgcG9zaXRpb24gdG8gZHJhZyBwb3NpdGlvbiBieSBhcHBseWluZyBmb3JjZVxuICB2YXIgZHJhZ1ZlbG9jaXR5ID0gdGhpcy5kcmFnWCAtIHRoaXMueDtcbiAgdmFyIGRyYWdGb3JjZSA9IGRyYWdWZWxvY2l0eSAtIHRoaXMudmVsb2NpdHk7XG4gIHRoaXMuYXBwbHlGb3JjZSggZHJhZ0ZvcmNlICk7XG59O1xuXG5wcm90by5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgYXR0cmFjdCBpZiBwb2ludGVyIGRvd24gb3Igbm8gY2VsbHNcbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICBpZiAoIHRoaXMuaXNQb2ludGVyRG93biB8fCB0aGlzLmlzRnJlZVNjcm9sbGluZyB8fCAhbGVuICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbIHRoaXMuc2VsZWN0ZWRJbmRleCBdO1xuICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDEgP1xuICAgIHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCB0aGlzLnNlbGVjdGVkSW5kZXggLyBsZW4gKSA6IDA7XG4gIHZhciBkaXN0YW5jZSA9ICggY2VsbC50YXJnZXQgKyB3cmFwICkgKiAtMSAtIHRoaXMueDtcbiAgdmFyIGZvcmNlID0gZGlzdGFuY2UgKiB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRBdHRyYWN0aW9uO1xuICB0aGlzLmFwcGx5Rm9yY2UoIGZvcmNlICk7XG59O1xuXG5yZXR1cm4gcHJvdG87XG5cbn0pKTtcblxuLyohXG4gKiBGbGlja2l0eSB2MS4xLjFcbiAqIFRvdWNoLCByZXNwb25zaXZlLCBmbGlja2FibGUgZ2FsbGVyaWVzXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgRmxpY2tpdHkgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuICpcbiAqIGh0dHA6Ly9mbGlja2l0eS5tZXRhZml6enkuY29cbiAqIENvcHlyaWdodCAyMDE1IE1ldGFmaXp6eVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvZmxpY2tpdHknLFtcbiAgICAgICdjbGFzc2llL2NsYXNzaWUnLFxuICAgICAgJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxuICAgICAgJ2V2ZW50aWUvZXZlbnRpZScsXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICAgICcuL2NlbGwnLFxuICAgICAgJy4vYW5pbWF0ZSdcbiAgICBdLCBmdW5jdGlvbiggY2xhc3NpZSwgRXZlbnRFbWl0dGVyLCBldmVudGllLCBnZXRTaXplLCB1dGlscywgQ2VsbCwgYW5pbWF0ZVByb3RvdHlwZSApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGNsYXNzaWUsIEV2ZW50RW1pdHRlciwgZXZlbnRpZSwgZ2V0U2l6ZSwgdXRpbHMsIENlbGwsIGFuaW1hdGVQcm90b3R5cGUgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1jbGFzc2llJyksXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgIHJlcXVpcmUoJy4vYW5pbWF0ZScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHZhciBfRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHk7XG5cbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmNsYXNzaWUsXG4gICAgICB3aW5kb3cuRXZlbnRFbWl0dGVyLFxuICAgICAgd2luZG93LmV2ZW50aWUsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgICBfRmxpY2tpdHkuQ2VsbCxcbiAgICAgIF9GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgY2xhc3NpZSwgRXZlbnRFbWl0dGVyLCBldmVudGllLCBnZXRTaXplLFxuICB1dGlscywgQ2VsbCwgYW5pbWF0ZVByb3RvdHlwZSApIHtcblxuXG5cbi8vIHZhcnNcbnZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xudmFyIGdldENvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZTtcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG5cbmZ1bmN0aW9uIG1vdmVFbGVtZW50cyggZWxlbXMsIHRvRWxlbSApIHtcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHdoaWxlICggZWxlbXMubGVuZ3RoICkge1xuICAgIHRvRWxlbS5hcHBlbmRDaGlsZCggZWxlbXMuc2hpZnQoKSApO1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xudmFyIEdVSUQgPSAwO1xuLy8gaW50ZXJuYWwgc3RvcmUgb2YgYWxsIEZsaWNraXR5IGludGFuY2VzXG52YXIgaW5zdGFuY2VzID0ge307XG5cbmZ1bmN0aW9uIEZsaWNraXR5KCBlbGVtZW50LCBvcHRpb25zICkge1xuICB2YXIgcXVlcnlFbGVtZW50ID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtZW50ICk7XG4gIGlmICggIXF1ZXJ5RWxlbWVudCApIHtcbiAgICBpZiAoIGNvbnNvbGUgKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCAnQmFkIGVsZW1lbnQgZm9yIEZsaWNraXR5OiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cbiAgLy8gb3B0aW9uc1xuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzICk7XG4gIHRoaXMub3B0aW9uKCBvcHRpb25zICk7XG5cbiAgLy8ga2ljayB0aGluZ3Mgb2ZmXG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG5GbGlja2l0eS5kZWZhdWx0cyA9IHtcbiAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgY2VsbEFsaWduOiAnY2VudGVyJyxcbiAgLy8gY2VsbFNlbGVjdG9yOiB1bmRlZmluZWQsXG4gIC8vIGNvbnRhaW46IGZhbHNlLFxuICBmcmVlU2Nyb2xsRnJpY3Rpb246IDAuMDc1LCAvLyBmcmljdGlvbiB3aGVuIGZyZWUtc2Nyb2xsaW5nXG4gIGZyaWN0aW9uOiAwLjI4LCAvLyBmcmljdGlvbiB3aGVuIHNlbGVjdGluZ1xuICAvLyBpbml0aWFsSW5kZXg6IDAsXG4gIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxuICBzZXRHYWxsZXJ5U2l6ZTogdHJ1ZVxuICAvLyB3YXRjaENTUzogZmFsc2UsXG4gIC8vIHdyYXBBcm91bmQ6IGZhbHNlXG59O1xuXG4vLyBoYXNoIG9mIG1ldGhvZHMgdHJpZ2dlcmVkIG9uIF9jcmVhdGUoKVxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcyA9IFtdO1xuXG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5wcm90b3R5cGUsIEV2ZW50RW1pdHRlci5wcm90b3R5cGUgKTtcblxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gYWRkIGlkIGZvciBGbGlja2l0eS5kYXRhXG4gIHZhciBpZCA9IHRoaXMuZ3VpZCA9ICsrR1VJRDtcbiAgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCA9IGlkOyAvLyBleHBhbmRvXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcbiAgLy8gaW5pdGlhbCBwcm9wZXJ0aWVzXG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHRoaXMub3B0aW9ucy5pbml0aWFsSW5kZXggfHwgMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLmFjY2VsID0gMDtcbiAgdGhpcy5vcmlnaW5TaWRlID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgLy8gY3JlYXRlIHZpZXdwb3J0ICYgc2xpZGVyXG4gIHRoaXMudmlld3BvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGhpcy52aWV3cG9ydC5jbGFzc05hbWUgPSAnZmxpY2tpdHktdmlld3BvcnQnO1xuICBGbGlja2l0eS5zZXRVbnNlbGVjdGFibGUoIHRoaXMudmlld3BvcnQgKTtcbiAgdGhpcy5fY3JlYXRlU2xpZGVyKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMucmVzaXplIHx8IHRoaXMub3B0aW9ucy53YXRjaENTUyApIHtcbiAgICBldmVudGllLmJpbmQoIHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgICB0aGlzLmlzUmVzaXplQm91bmQgPSB0cnVlO1xuICB9XG5cbiAgZm9yICggdmFyIGk9MCwgbGVuID0gRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgbWV0aG9kID0gRmxpY2tpdHkuY3JlYXRlTWV0aG9kc1tpXTtcbiAgICB0aGlzWyBtZXRob2QgXSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMud2F0Y2hDU1MgKSB7XG4gICAgdGhpcy53YXRjaENTUygpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIHNldCBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG5GbGlja2l0eS5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzQWN0aXZlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgY2xhc3NpZS5hZGQoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5LWVuYWJsZWQnICk7XG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkge1xuICAgIGNsYXNzaWUuYWRkKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eS1ydGwnICk7XG4gIH1cblxuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gbW92ZSBpbml0aWFsIGNlbGwgZWxlbWVudHMgc28gdGhleSBjYW4gYmUgbG9hZGVkIGFzIGNlbGxzXG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcbiAgbW92ZUVsZW1lbnRzKCBjZWxsRWxlbXMsIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMudmlld3BvcnQuYXBwZW5kQ2hpbGQoIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBnZXQgY2VsbHMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZENlbGxzKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50IHRvIGZvY3VzYWJsZVxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgLy8gbGlzdGVuIGZvciBrZXkgcHJlc3Nlc1xuICAgIGV2ZW50aWUuYmluZCggdGhpcy5lbGVtZW50LCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuXG4gIHRoaXMuZW1pdCgnYWN0aXZhdGUnKTtcblxuICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICk7XG59O1xuXG4vLyBzbGlkZXIgcG9zaXRpb25zIHRoZSBjZWxsc1xuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2xpZGVyIGVsZW1lbnQgZG9lcyBhbGwgdGhlIHBvc2l0aW9uaW5nXG4gIHZhciBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2xpZGVyLmNsYXNzTmFtZSA9ICdmbGlja2l0eS1zbGlkZXInO1xuICBzbGlkZXIuc3R5bGVbIHRoaXMub3JpZ2luU2lkZSBdID0gMDtcbiAgdGhpcy5zbGlkZXIgPSBzbGlkZXI7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuY2VsbFNlbGVjdG9yICk7XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuXG5GbGlja2l0eS5wcm90b3R5cGUucmVsb2FkQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gIHRoaXMuY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIHRoaXMuc2xpZGVyLmNoaWxkcmVuICk7XG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xuICB0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG59O1xuXG4vKipcbiAqIHR1cm4gZWxlbWVudHMgaW50byBGbGlja2l0eS5DZWxsc1xuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBIVE1MRWxlbWVudH0gZWxlbXNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBGbGlja2l0eSBDZWxsc1xuICovXG5GbGlja2l0eS5wcm90b3R5cGUuX21ha2VDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIGVsZW1zICk7XG5cbiAgLy8gY3JlYXRlIG5ldyBGbGlja2l0eSBmb3IgY29sbGVjdGlvblxuICB2YXIgY2VsbHMgPSBbXTtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gY2VsbEVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBlbGVtID0gY2VsbEVsZW1zW2ldO1xuICAgIHZhciBjZWxsID0gbmV3IENlbGwoIGVsZW0sIHRoaXMgKTtcbiAgICBjZWxscy5wdXNoKCBjZWxsICk7XG4gIH1cblxuICByZXR1cm4gY2VsbHM7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHNbIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSBdO1xufTtcblxuLy8gcG9zaXRpb25zIGFsbCBjZWxsc1xuRmxpY2tpdHkucHJvdG90eXBlLnBvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2l6ZSBhbGwgY2VsbHNcbiAgdGhpcy5fc2l6ZUNlbGxzKCB0aGlzLmNlbGxzICk7XG4gIC8vIHBvc2l0aW9uIGFsbCBjZWxsc1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCAwICk7XG59O1xuXG4vKipcbiAqIHBvc2l0aW9uIGNlcnRhaW4gY2VsbHNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSB3aGljaCBjZWxsIHRvIHN0YXJ0IHdpdGhcbiAqL1xuRmxpY2tpdHkucHJvdG90eXBlLl9wb3NpdGlvbkNlbGxzID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICBpbmRleCA9IGluZGV4IHx8IDA7XG4gIC8vIGFsc28gbWVhc3VyZSBtYXhDZWxsSGVpZ2h0XG4gIC8vIHN0YXJ0IDAgaWYgcG9zaXRpb25pbmcgYWxsIGNlbGxzXG4gIHRoaXMubWF4Q2VsbEhlaWdodCA9IGluZGV4ID8gdGhpcy5tYXhDZWxsSGVpZ2h0IHx8IDAgOiAwO1xuICB2YXIgY2VsbFggPSAwO1xuICAvLyBnZXQgY2VsbFhcbiAgaWYgKCBpbmRleCA+IDAgKSB7XG4gICAgdmFyIHN0YXJ0Q2VsbCA9IHRoaXMuY2VsbHNbIGluZGV4IC0gMSBdO1xuICAgIGNlbGxYID0gc3RhcnRDZWxsLnggKyBzdGFydENlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG4gIHZhciBjZWxsO1xuICBmb3IgKCB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGgsIGk9aW5kZXg7IGkgPCBsZW47IGkrKyApIHtcbiAgICBjZWxsID0gdGhpcy5jZWxsc1tpXTtcbiAgICBjZWxsLnNldFBvc2l0aW9uKCBjZWxsWCApO1xuICAgIGNlbGxYICs9IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICAgIHRoaXMubWF4Q2VsbEhlaWdodCA9IE1hdGgubWF4KCBjZWxsLnNpemUub3V0ZXJIZWlnaHQsIHRoaXMubWF4Q2VsbEhlaWdodCApO1xuICB9XG4gIC8vIGtlZXAgdHJhY2sgb2YgY2VsbFggZm9yIHdyYXAtYXJvdW5kXG4gIHRoaXMuc2xpZGVhYmxlV2lkdGggPSBjZWxsWDtcbiAgLy8gY29udGFpbiBjZWxsIHRhcmdldFxuICB0aGlzLl9jb250YWluQ2VsbHMoKTtcbn07XG5cbi8qKlxuICogY2VsbC5nZXRTaXplKCkgb24gbXVsdGlwbGUgY2VsbHNcbiAqIEBwYXJhbSB7QXJyYXl9IGNlbGxzXG4gKi9cbkZsaWNraXR5LnByb3RvdHlwZS5fc2l6ZUNlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBjZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IGNlbGxzW2ldO1xuICAgIGNlbGwuZ2V0U2l6ZSgpO1xuICB9XG59O1xuXG4vLyBhbGlhcyBfaW5pdCBmb3IgalF1ZXJ5IHBsdWdpbiAuZmxpY2tpdHkoKVxuRmxpY2tpdHkucHJvdG90eXBlLl9pbml0ID1cbkZsaWNraXR5LnByb3RvdHlwZS5yZXBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG4gIHRoaXMuc2V0Q2VsbEFsaWduKCk7XG4gIHRoaXMuY3Vyc29yUG9zaXRpb24gPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xufTtcblxudmFyIGNlbGxBbGlnblNob3J0aGFuZHMgPSB7XG4gIC8vIGNlbGwgYWxpZ24sIHRoZW4gYmFzZWQgb24gb3JpZ2luIHNpZGVcbiAgY2VudGVyOiB7XG4gICAgbGVmdDogMC41LFxuICAgIHJpZ2h0OiAwLjVcbiAgfSxcbiAgbGVmdDoge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDFcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICByaWdodDogMCxcbiAgICBsZWZ0OiAxXG4gIH1cbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5zZXRDZWxsQWxpZ24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNob3J0aGFuZCA9IGNlbGxBbGlnblNob3J0aGFuZHNbIHRoaXMub3B0aW9ucy5jZWxsQWxpZ24gXTtcbiAgdGhpcy5jZWxsQWxpZ24gPSBzaG9ydGhhbmQgPyBzaG9ydGhhbmRbIHRoaXMub3JpZ2luU2lkZSBdIDogdGhpcy5vcHRpb25zLmNlbGxBbGlnbjtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5zZXRHYWxsZXJ5U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHtcbiAgICB0aGlzLnZpZXdwb3J0LnN0eWxlLmhlaWdodCA9IHRoaXMubWF4Q2VsbEhlaWdodCArICdweCc7XG4gIH1cbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5fZ2V0V3JhcFNoaWZ0Q2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gb25seSBmb3Igd3JhcC1hcm91bmRcbiAgaWYgKCAhdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHVuc2hpZnQgcHJldmlvdXMgY2VsbHNcbiAgdGhpcy5fdW5zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgKTtcbiAgdGhpcy5fdW5zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscyApO1xuICAvLyBnZXQgYmVmb3JlIGNlbGxzXG4gIC8vIGluaXRpYWwgZ2FwXG4gIHZhciBnYXBYID0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgdmFyIGNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgdGhpcy5iZWZvcmVTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGdhcFgsIGNlbGxJbmRleCwgLTEgKTtcbiAgLy8gZ2V0IGFmdGVyIGNlbGxzXG4gIC8vIGVuZGluZyBnYXAgYmV0d2VlbiBsYXN0IGNlbGwgYW5kIGVuZCBvZiBnYWxsZXJ5IHZpZXdwb3J0XG4gIGdhcFggPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtIHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHN0YXJ0IGNsb25pbmcgYXQgZmlyc3QgY2VsbCwgd29ya2luZyBmb3J3YXJkc1xuICB0aGlzLmFmdGVyU2hpZnRDZWxscyA9IHRoaXMuX2dldEdhcENlbGxzKCBnYXBYLCAwLCAxICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xuICAvLyBrZWVwIGFkZGluZyBjZWxscyB1bnRpbCB0aGUgY292ZXIgdGhlIGluaXRpYWwgZ2FwXG4gIHZhciBjZWxscyA9IFtdO1xuICB3aGlsZSAoIGdhcFggPiAwICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCAhY2VsbCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjZWxscy5wdXNoKCBjZWxsICk7XG4gICAgY2VsbEluZGV4ICs9IGluY3JlbWVudDtcbiAgICBnYXBYIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG4gIHJldHVybiBjZWxscztcbn07XG5cbi8vIC0tLS0tIGNvbnRhaW4gLS0tLS0gLy9cblxuLy8gY29udGFpbiBjZWxsIHRhcmdldHMgc28gbm8gZXhjZXNzIHNsaWRpbmdcbkZsaWNraXR5LnByb3RvdHlwZS5fY29udGFpbkNlbGxzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5jb250YWluIHx8IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kIHx8ICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHN0YXJ0TWFyZ2luID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcbiAgdmFyIGVuZE1hcmdpbiA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHZhciBmaXJzdENlbGxTdGFydE1hcmdpbiA9IHRoaXMuY2VsbHNbMF0uc2l6ZVsgc3RhcnRNYXJnaW4gXTtcbiAgdmFyIGxhc3RDZWxsID0gdGhpcy5nZXRMYXN0Q2VsbCgpO1xuICB2YXIgY29udGVudFdpZHRoID0gdGhpcy5zbGlkZWFibGVXaWR0aCAtIGxhc3RDZWxsLnNpemVbIGVuZE1hcmdpbiBdO1xuICB2YXIgZW5kTGltaXQgPSBjb250ZW50V2lkdGggLSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqICggMSAtIHRoaXMuY2VsbEFsaWduICk7XG4gIC8vIGNvbnRlbnQgaXMgbGVzcyB0aGFuIGdhbGxlcnkgc2l6ZVxuICB2YXIgaXNDb250ZW50U21hbGxlciA9IGNvbnRlbnRXaWR0aCA8IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xuICAvLyBjb250YWluIGVhY2ggY2VsbCB0YXJnZXRcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgLy8gcmVzZXQgZGVmYXVsdCB0YXJnZXRcbiAgICBjZWxsLnNldERlZmF1bHRUYXJnZXQoKTtcbiAgICBpZiAoIGlzQ29udGVudFNtYWxsZXIgKSB7XG4gICAgICAvLyBhbGwgY2VsbHMgZml0IGluc2lkZSBnYWxsZXJ5XG4gICAgICBjZWxsLnRhcmdldCA9IGNvbnRlbnRXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb250YWluIHRvIGJvdW5kc1xuICAgICAgY2VsbC50YXJnZXQgPSBNYXRoLm1heCggY2VsbC50YXJnZXQsIHRoaXMuY3Vyc29yUG9zaXRpb24gKyBmaXJzdENlbGxTdGFydE1hcmdpbiApO1xuICAgICAgY2VsbC50YXJnZXQgPSBNYXRoLm1pbiggY2VsbC50YXJnZXQsIGVuZExpbWl0ICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuLyoqXG4gKiBlbWl0cyBldmVudHMgdmlhIGV2ZW50RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBuYW1lIG9mIGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIG9yaWdpbmFsIGV2ZW50XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXG4gKi9cbkZsaWNraXR5LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xuICB2YXIgZW1pdEFyZ3MgPSBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICk7XG4gIHRoaXMuZW1pdEV2ZW50KCB0eXBlLCBlbWl0QXJncyApO1xuXG4gIGlmICggalF1ZXJ5ICYmIHRoaXMuJGVsZW1lbnQgKSB7XG4gICAgaWYgKCBldmVudCApIHtcbiAgICAgIC8vIGNyZWF0ZSBqUXVlcnkgZXZlbnRcbiAgICAgIHZhciAkZXZlbnQgPSBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICAkZXZlbnQudHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoICRldmVudCwgYXJncyApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBqdXN0IHRyaWdnZXIgd2l0aCB0eXBlIGlmIG5vIGV2ZW50IGF2YWlsYWJsZVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCB0eXBlLCBhcmdzICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZWxlY3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2YgdGhlIGNlbGxcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXcmFwIC0gd2lsbCB3cmFwLWFyb3VuZCB0byBsYXN0L2ZpcnN0IGlmIGF0IHRoZSBlbmRcbiAqL1xuRmxpY2tpdHkucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCwgaXNXcmFwICkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB3cmFwIHBvc2l0aW9uIHNvIHNsaWRlciBpcyB3aXRoaW4gbm9ybWFsIGFyZWFcbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDEgKSB7XG4gICAgaWYgKCBpbmRleCA8IDAgKSB7XG4gICAgICB0aGlzLnggLT0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgICB9IGVsc2UgaWYgKCBpbmRleCA+PSBsZW4gKSB7XG4gICAgICB0aGlzLnggKz0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgICB9XG4gIH1cblxuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kIHx8IGlzV3JhcCApIHtcbiAgICBpbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbiApO1xuICB9XG5cbiAgaWYgKCB0aGlzLmNlbGxzWyBpbmRleCBdICkge1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgIHRoaXMuc2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnY2VsbFNlbGVjdCcpO1xuICB9XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwICkge1xuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4IC0gMSwgaXNXcmFwICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggKyAxLCBpc1dyYXAgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5zZXRTZWxlY3RlZENlbGwgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVtb3ZlU2VsZWN0ZWRDZWxsQ2xhc3MoKTtcbiAgdGhpcy5zZWxlY3RlZENlbGwgPSB0aGlzLmNlbGxzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkQ2VsbC5lbGVtZW50O1xuICBjbGFzc2llLmFkZCggdGhpcy5zZWxlY3RlZEVsZW1lbnQsICdpcy1zZWxlY3RlZCcgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5fcmVtb3ZlU2VsZWN0ZWRDZWxsQ2xhc3MgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkQ2VsbCApIHtcbiAgICBjbGFzc2llLnJlbW92ZSggdGhpcy5zZWxlY3RlZENlbGwuZWxlbWVudCwgJ2lzLXNlbGVjdGVkJyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXQgY2VsbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkuQ2VsbCwgZ2l2ZW4gYW4gRWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7RmxpY2tpdHkuQ2VsbH0gaXRlbVxuICovXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0Q2VsbCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBsb29wIHRocm91Z2ggY2VsbHMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzW2ldO1xuICAgIGlmICggY2VsbC5lbGVtZW50ID09IGVsZW0gKSB7XG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2V0IGNvbGxlY3Rpb24gb2YgRmxpY2tpdHkuQ2VsbHMsIGdpdmVuIEVsZW1lbnRzXG4gKiBAcGFyYW0ge0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdH0gZWxlbXNcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBGbGlja2l0eS5DZWxsc1xuICovXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0Q2VsbHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgY2VsbHMgPSBbXTtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcbiAgICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICAgIGlmICggY2VsbCApIHtcbiAgICAgIGNlbGxzLnB1c2goIGNlbGwgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxsRWxlbXNcbiAqL1xuRmxpY2tpdHkucHJvdG90eXBlLmdldENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2VsbEVsZW1zID0gW107XG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgY2VsbEVsZW1zLnB1c2goIHRoaXMuY2VsbHNbaV0uZWxlbWVudCApO1xuICB9XG4gIHJldHVybiBjZWxsRWxlbXM7XG59O1xuXG4vKipcbiAqIGdldCBwYXJlbnQgY2VsbCBmcm9tIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHJldHVybnMge0ZsaWNraXQuQ2VsbH0gY2VsbFxuICovXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0UGFyZW50Q2VsbCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaXJzdCBjaGVjayBpZiBlbGVtIGlzIGNlbGxcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCBjZWxsICkge1xuICAgIHJldHVybiBjZWxsO1xuICB9XG4gIC8vIHRyeSB0byBnZXQgcGFyZW50IGNlbGwgZWxlbVxuICBlbGVtID0gdXRpbHMuZ2V0UGFyZW50KCBlbGVtLCAnLmZsaWNraXR5LXNsaWRlciA+IConICk7XG4gIHJldHVybiB0aGlzLmdldENlbGwoIGVsZW0gKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGxzIGFkamFjZW50IHRvIGEgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBhZGpDb3VudCAtIG51bWJlciBvZiBhZGphY2VudCBjZWxsc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIGNlbGwgdG8gc3RhcnRcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBhcnJheSBvZiBGbGlja2l0eS5DZWxsc1xuICovXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggYWRqQ291bnQsIGluZGV4ICkge1xuICBpZiAoICFhZGpDb3VudCApIHtcbiAgICByZXR1cm4gWyB0aGlzLnNlbGVjdGVkRWxlbWVudCBdO1xuICB9XG4gIGluZGV4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuc2VsZWN0ZWRJbmRleCA6IGluZGV4O1xuXG4gIHZhciBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDtcbiAgaWYgKCAxICsgKCBhZGpDb3VudCAqIDIgKSA+PSBsZW4gKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbEVsZW1lbnRzKCk7XG4gIH1cblxuICB2YXIgY2VsbEVsZW1zID0gW107XG4gIGZvciAoIHZhciBpID0gaW5kZXggLSBhZGpDb3VudDsgaSA8PSBpbmRleCArIGFkakNvdW50IDsgaSsrICkge1xuICAgIHZhciBjZWxsSW5kZXggPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/IHV0aWxzLm1vZHVsbyggaSwgbGVuICkgOiBpO1xuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgY2VsbEVsZW1zLnB1c2goIGNlbGwuZWxlbWVudCApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2VsbEVsZW1zO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkZsaWNraXR5LnByb3RvdHlwZS51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXQoJ3VpQ2hhbmdlJyk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuY2hpbGRVSVBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmVtaXRFdmVudCggJ2NoaWxkVUlQb2ludGVyRG93bicsIFsgZXZlbnQgXSApO1xufTtcblxuLy8gLS0tLS0gcmVzaXplIC0tLS0tIC8vXG5cbkZsaWNraXR5LnByb3RvdHlwZS5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndhdGNoQ1NTKCk7XG4gIHRoaXMucmVzaXplKCk7XG59O1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCggRmxpY2tpdHksICdvbnJlc2l6ZScsIDE1MCApO1xuXG5GbGlja2l0eS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNBY3RpdmUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyB3cmFwIHZhbHVlc1xuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICkge1xuICAgIHRoaXMueCA9IHV0aWxzLm1vZHVsbyggdGhpcy54LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XG4gIH1cbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbn07XG5cbnZhciBzdXBwb3J0c0NvbmRpdGlvbmFsQ1NTID0gRmxpY2tpdHkuc3VwcG9ydHNDb25kaXRpb25hbENTUyA9ICggZnVuY3Rpb24oKSB7XG4gIHZhciBzdXBwb3J0cztcbiAgcmV0dXJuIGZ1bmN0aW9uIGNoZWNrU3VwcG9ydCgpIHtcbiAgICBpZiAoIHN1cHBvcnRzICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICByZXR1cm4gc3VwcG9ydHM7XG4gICAgfVxuICAgIGlmICggIWdldENvbXB1dGVkU3R5bGUgKSB7XG4gICAgICBzdXBwb3J0cyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzdHlsZSBib2R5J3MgOmFmdGVyIGFuZCBjaGVjayB0aGF0XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICB2YXIgY3NzVGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdib2R5OmFmdGVyIHsgY29udGVudDogXCJmb29cIjsgZGlzcGxheTogbm9uZTsgfScpO1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKCBjc3NUZXh0ICk7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc3R5bGUgKTtcbiAgICB2YXIgYWZ0ZXJDb250ZW50ID0gZ2V0Q29tcHV0ZWRTdHlsZSggZG9jdW1lbnQuYm9keSwgJzphZnRlcicgKS5jb250ZW50O1xuICAgIC8vIGNoZWNrIGlmIGFibGUgdG8gZ2V0IDphZnRlciBjb250ZW50XG4gICAgc3VwcG9ydHMgPSBhZnRlckNvbnRlbnQuaW5kZXhPZignZm9vJykgIT0gLTE7XG4gICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCggc3R5bGUgKTtcbiAgICByZXR1cm4gc3VwcG9ydHM7XG4gIH07XG59KSgpO1xuXG4vLyB3YXRjaGVzIHRoZSA6YWZ0ZXIgcHJvcGVydHksIGFjdGl2YXRlcy9kZWFjdGl2YXRlc1xuRmxpY2tpdHkucHJvdG90eXBlLndhdGNoQ1NTID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3YXRjaE9wdGlvbiA9IHRoaXMub3B0aW9ucy53YXRjaENTUztcbiAgaWYgKCAhd2F0Y2hPcHRpb24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzdXBwb3J0cyA9IHN1cHBvcnRzQ29uZGl0aW9uYWxDU1MoKTtcbiAgaWYgKCAhc3VwcG9ydHMgKSB7XG4gICAgLy8gYWN0aXZhdGUgaWYgd2F0Y2ggb3B0aW9uIGlzIGZhbGxiYWNrT25cbiAgICB2YXIgbWV0aG9kID0gd2F0Y2hPcHRpb24gPT0gJ2ZhbGxiYWNrT24nID8gJ2FjdGl2YXRlJyA6ICdkZWFjdGl2YXRlJztcbiAgICB0aGlzWyBtZXRob2QgXSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBhZnRlckNvbnRlbnQgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQsICc6YWZ0ZXInICkuY29udGVudDtcbiAgLy8gYWN0aXZhdGUgaWYgOmFmdGVyIHsgY29udGVudDogJ2ZsaWNraXR5JyB9XG4gIGlmICggYWZ0ZXJDb250ZW50LmluZGV4T2YoJ2ZsaWNraXR5JykgIT0gLTEgKSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSBrZXlkb3duIC0tLS0tIC8vXG5cbi8vIGdvIHByZXZpb3VzL25leHQgaWYgbGVmdC9yaWdodCBrZXlzIHByZXNzZWRcbkZsaWNraXR5LnByb3RvdHlwZS5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIG9ubHkgd29yayBpZiBlbGVtZW50IGlzIGluIGZvY3VzXG4gIGlmICggIXRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5IHx8XG4gICAgKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5lbGVtZW50ICkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCBldmVudC5rZXlDb2RlID09IDM3ICkge1xuICAgIC8vIGdvIGxlZnRcbiAgICB2YXIgbGVmdE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICduZXh0JyA6ICdwcmV2aW91cyc7XG4gICAgdGhpcy51aUNoYW5nZSgpO1xuICAgIHRoaXNbIGxlZnRNZXRob2QgXSgpO1xuICB9IGVsc2UgaWYgKCBldmVudC5rZXlDb2RlID09IDM5ICkge1xuICAgIC8vIGdvIHJpZ2h0XG4gICAgdmFyIHJpZ2h0TWV0aG9kID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ3ByZXZpb3VzJyA6ICduZXh0JztcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpc1sgcmlnaHRNZXRob2QgXSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZXN0cm95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRlYWN0aXZhdGUgYWxsIEZsaWNraXR5IGZ1bmN0aW9uYWxpdHksIGJ1dCBrZWVwIHN0dWZmIGF2YWlsYWJsZVxuRmxpY2tpdHkucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY2xhc3NpZS5yZW1vdmUoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5LWVuYWJsZWQnICk7XG4gIGNsYXNzaWUucmVtb3ZlKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eS1ydGwnICk7XG4gIC8vIGRlc3Ryb3kgY2VsbHNcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgY2VsbC5kZXN0cm95KCk7XG4gIH1cbiAgdGhpcy5fcmVtb3ZlU2VsZWN0ZWRDZWxsQ2xhc3MoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLnZpZXdwb3J0ICk7XG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcbiAgbW92ZUVsZW1lbnRzKCB0aGlzLnNsaWRlci5jaGlsZHJlbiwgdGhpcy5lbGVtZW50ICk7XG4gIGlmICggdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiSW5kZXgnKTtcbiAgICBldmVudGllLnVuYmluZCggdGhpcy5lbGVtZW50LCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2RlYWN0aXZhdGUnKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICBpZiAoIHRoaXMuaXNSZXNpemVCb3VuZCApIHtcbiAgICBldmVudGllLnVuYmluZCggd2luZG93LCAncmVzaXplJywgdGhpcyApO1xuICB9XG4gIHRoaXMuZW1pdCgnZGVzdHJveScpO1xuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eScgKTtcbiAgfVxuICBkZWxldGUgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRDtcbiAgZGVsZXRlIGluc3RhbmNlc1sgdGhpcy5ndWlkIF07XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5wcm90b3R5cGUsIGFuaW1hdGVQcm90b3R5cGUgKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZXh0cmFzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIHF1aWNrIGNoZWNrIGZvciBJRThcbnZhciBpc0lFOCA9ICdhdHRhY2hFdmVudCcgaW4gd2luZG93O1xuXG5GbGlja2l0eS5zZXRVbnNlbGVjdGFibGUgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgaWYgKCAhaXNJRTggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIElFOCBwcmV2ZW50IGNoaWxkIGZyb20gY2hhbmdpbmcgZm9jdXMgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTc1MjUyMjMvMTgyMTgzXG4gIGVsZW0uc2V0QXR0cmlidXRlKCAndW5zZWxlY3RhYmxlJywgJ29uJyApO1xufTtcblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEByZXR1cm5zIHtGbGlja2l0eX1cbiAqL1xuRmxpY2tpdHkuZGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XG4gIHZhciBpZCA9IGVsZW0gJiYgZWxlbS5mbGlja2l0eUdVSUQ7XG4gIHJldHVybiBpZCAmJiBpbnN0YW5jZXNbIGlkIF07XG59O1xuXG51dGlscy5odG1sSW5pdCggRmxpY2tpdHksICdmbGlja2l0eScgKTtcblxuaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XG4gIGpRdWVyeS5icmlkZ2V0KCAnZmxpY2tpdHknLCBGbGlja2l0eSApO1xufVxuXG5GbGlja2l0eS5DZWxsID0gQ2VsbDtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG5cbi8qIVxuICogVW5pcG9pbnRlciB2MS4xLjBcbiAqIGJhc2UgY2xhc3MgZm9yIGRvaW5nIG9uZSB0aGluZyB3aXRoIHBvaW50ZXIgZXZlbnRcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIFxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcicsW1xuICAgICAgJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxuICAgICAgJ2V2ZW50aWUvZXZlbnRpZSdcbiAgICBdLCBmdW5jdGlvbiggRXZlbnRFbWl0dGVyLCBldmVudGllICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBldmVudGllICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnd29sZnk4Ny1ldmVudGVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2V2ZW50aWUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuVW5pcG9pbnRlciA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuRXZlbnRFbWl0dGVyLFxuICAgICAgd2luZG93LmV2ZW50aWVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUgKSB7XG5cblxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gVW5pcG9pbnRlcigpIHt9XG5cbi8vIGluaGVyaXQgRXZlbnRFbWl0dGVyXG5Vbmlwb2ludGVyLnByb3RvdHlwZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuVW5pcG9pbnRlci5wcm90b3R5cGUuYmluZFN0YXJ0RXZlbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdGhpcy5fYmluZFN0YXJ0RXZlbnQoIGVsZW0sIHRydWUgKTtcbn07XG5cblVuaXBvaW50ZXIucHJvdG90eXBlLnVuYmluZFN0YXJ0RXZlbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdGhpcy5fYmluZFN0YXJ0RXZlbnQoIGVsZW0sIGZhbHNlICk7XG59O1xuXG4vKipcbiAqIHdvcmtzIGFzIHVuYmluZGVyLCBhcyB5b3UgY2FuIC5fYmluZFN0YXJ0KCBmYWxzZSApIHRvIHVuYmluZFxuICogQHBhcmFtIHtCb29sZWFufSBpc0JpbmQgLSB3aWxsIHVuYmluZCBpZiBmYWxzZXlcbiAqL1xuVW5pcG9pbnRlci5wcm90b3R5cGUuX2JpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIGlzQmluZCApIHtcbiAgLy8gbXVuZ2UgaXNCaW5kLCBkZWZhdWx0IHRvIHRydWVcbiAgaXNCaW5kID0gaXNCaW5kID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFpc0JpbmQ7XG4gIHZhciBiaW5kTWV0aG9kID0gaXNCaW5kID8gJ2JpbmQnIDogJ3VuYmluZCc7XG5cbiAgaWYgKCB3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkICkge1xuICAgIC8vIFczQyBQb2ludGVyIEV2ZW50cywgSUUxMS4gU2VlIGh0dHBzOi8vY29kZXJ3YWxsLmNvbS9wL21mcmVjYVxuICAgIGV2ZW50aWVbIGJpbmRNZXRob2QgXSggZWxlbSwgJ3BvaW50ZXJkb3duJywgdGhpcyApO1xuICB9IGVsc2UgaWYgKCB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgKSB7XG4gICAgLy8gSUUxMCBQb2ludGVyIEV2ZW50c1xuICAgIGV2ZW50aWVbIGJpbmRNZXRob2QgXSggZWxlbSwgJ01TUG9pbnRlckRvd24nLCB0aGlzICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbGlzdGVuIGZvciBib3RoLCBmb3IgZGV2aWNlcyBsaWtlIENocm9tZSBQaXhlbFxuICAgIGV2ZW50aWVbIGJpbmRNZXRob2QgXSggZWxlbSwgJ21vdXNlZG93bicsIHRoaXMgKTtcbiAgICBldmVudGllWyBiaW5kTWV0aG9kIF0oIGVsZW0sICd0b3VjaHN0YXJ0JywgdGhpcyApO1xuICB9XG59O1xuXG4vLyB0cmlnZ2VyIGhhbmRsZXIgbWV0aG9kcyBmb3IgZXZlbnRzXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG4vLyByZXR1cm5zIHRoZSB0b3VjaCB0aGF0IHdlJ3JlIGtlZXBpbmcgdHJhY2sgb2ZcblVuaXBvaW50ZXIucHJvdG90eXBlLmdldFRvdWNoID0gZnVuY3Rpb24oIHRvdWNoZXMgKSB7XG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRvdWNoZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIHRvdWNoID0gdG91Y2hlc1tpXTtcbiAgICBpZiAoIHRvdWNoLmlkZW50aWZpZXIgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICAgIHJldHVybiB0b3VjaDtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXG5cblVuaXBvaW50ZXIucHJvdG90eXBlLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBkaXNtaXNzIGNsaWNrcyBmcm9tIHJpZ2h0IG9yIG1pZGRsZSBidXR0b25zXG4gIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gIGlmICggYnV0dG9uICYmICggYnV0dG9uICE9PSAwICYmIGJ1dHRvbiAhPT0gMSApICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcbn07XG5cblVuaXBvaW50ZXIucHJvdG90eXBlLm9uTVNQb2ludGVyRG93biA9XG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbnBvaW50ZXJkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLl9wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG4vKipcbiAqIHBvaW50ZXIgc3RhcnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cblVuaXBvaW50ZXIucHJvdG90eXBlLl9wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gZGlzbWlzcyBvdGhlciBwb2ludGVyc1xuICBpZiAoIHRoaXMuaXNQb2ludGVyRG93biApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmlzUG9pbnRlckRvd24gPSB0cnVlO1xuICAvLyBzYXZlIHBvaW50ZXIgaWRlbnRpZmllciB0byBtYXRjaCB1cCB0b3VjaCBldmVudHNcbiAgdGhpcy5wb2ludGVySWRlbnRpZmllciA9IHBvaW50ZXIucG9pbnRlcklkICE9PSB1bmRlZmluZWQgP1xuICAgIC8vIHBvaW50ZXJJZCBmb3IgcG9pbnRlciBldmVudHMsIHRvdWNoLmluZGVudGlmaWVyIGZvciB0b3VjaCBldmVudHNcbiAgICBwb2ludGVyLnBvaW50ZXJJZCA6IHBvaW50ZXIuaWRlbnRpZmllcjtcblxuICB0aGlzLnBvaW50ZXJEb3duKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuVW5pcG9pbnRlci5wcm90b3R5cGUucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIGhhc2ggb2YgZXZlbnRzIHRvIGJlIGJvdW5kIGFmdGVyIHN0YXJ0IGV2ZW50XG52YXIgcG9zdFN0YXJ0RXZlbnRzID0ge1xuICBtb3VzZWRvd246IFsgJ21vdXNlbW92ZScsICdtb3VzZXVwJyBdLFxuICB0b3VjaHN0YXJ0OiBbICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnIF0sXG4gIHBvaW50ZXJkb3duOiBbICdwb2ludGVybW92ZScsICdwb2ludGVydXAnLCAncG9pbnRlcmNhbmNlbCcgXSxcbiAgTVNQb2ludGVyRG93bjogWyAnTVNQb2ludGVyTW92ZScsICdNU1BvaW50ZXJVcCcsICdNU1BvaW50ZXJDYW5jZWwnIF1cbn07XG5cblVuaXBvaW50ZXIucHJvdG90eXBlLl9iaW5kUG9zdFN0YXJ0RXZlbnRzID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoICFldmVudCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IHByb3BlciBldmVudHMgdG8gbWF0Y2ggc3RhcnQgZXZlbnRcbiAgdmFyIGV2ZW50cyA9IHBvc3RTdGFydEV2ZW50c1sgZXZlbnQudHlwZSBdO1xuICAvLyBJRTggbmVlZHMgdG8gYmUgYm91bmQgdG8gZG9jdW1lbnRcbiAgdmFyIG5vZGUgPSBldmVudC5wcmV2ZW50RGVmYXVsdCA/IHdpbmRvdyA6IGRvY3VtZW50O1xuICAvLyBiaW5kIGV2ZW50cyB0byBub2RlXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgZXZudCA9IGV2ZW50c1tpXTtcbiAgICBldmVudGllLmJpbmQoIG5vZGUsIGV2bnQsIHRoaXMgKTtcbiAgfVxuICAvLyBzYXZlIHRoZXNlIGFyZ3VtZW50c1xuICB0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHMgPSB7XG4gICAgZXZlbnRzOiBldmVudHMsXG4gICAgbm9kZTogbm9kZVxuICB9O1xufTtcblxuVW5pcG9pbnRlci5wcm90b3R5cGUuX3VuYmluZFBvc3RTdGFydEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXJncyA9IHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cztcbiAgLy8gSUU4IGNhbiB0cmlnZ2VyIGRyYWdFbmQgdHdpY2UsIGNoZWNrIGZvciBfYm91bmRFdmVudHNcbiAgaWYgKCAhYXJncyB8fCAhYXJncy5ldmVudHMgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICggdmFyIGk9MCwgbGVuID0gYXJncy5ldmVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGV2ZW50ID0gYXJncy5ldmVudHNbaV07XG4gICAgZXZlbnRpZS51bmJpbmQoIGFyZ3Mubm9kZSwgZXZlbnQsIHRoaXMgKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzO1xufTtcblxuLy8gLS0tLS0gbW92ZSBldmVudCAtLS0tLSAvL1xuXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xufTtcblxuVW5pcG9pbnRlci5wcm90b3R5cGUub25NU1BvaW50ZXJNb3ZlID1cblVuaXBvaW50ZXIucHJvdG90eXBlLm9ucG9pbnRlcm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbnRvdWNobW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyTW92ZSggZXZlbnQsIHRvdWNoICk7XG4gIH1cbn07XG5cbi8qKlxuICogcG9pbnRlciBtb3ZlXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICogQHByaXZhdGVcbiAqL1xuVW5pcG9pbnRlci5wcm90b3R5cGUuX3BvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLnBvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gcHVibGljXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gZW5kIGV2ZW50IC0tLS0tIC8vXG5cblxuVW5pcG9pbnRlci5wcm90b3R5cGUub25tb3VzZXVwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xufTtcblxuVW5pcG9pbnRlci5wcm90b3R5cGUub25NU1BvaW50ZXJVcCA9XG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbnBvaW50ZXJ1cCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbnRvdWNoZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJVcCggZXZlbnQsIHRvdWNoICk7XG4gIH1cbn07XG5cbi8qKlxuICogcG9pbnRlciB1cFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqIEBwcml2YXRlXG4gKi9cblVuaXBvaW50ZXIucHJvdG90eXBlLl9wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XG4gIHRoaXMucG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gcHVibGljXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBwb2ludGVyIGRvbmUgLS0tLS0gLy9cblxuLy8gdHJpZ2dlcmVkIG9uIHBvaW50ZXIgdXAgJiBwb2ludGVyIGNhbmNlbFxuVW5pcG9pbnRlci5wcm90b3R5cGUuX3BvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlc2V0IHByb3BlcnRpZXNcbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gZmFsc2U7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyO1xuICAvLyByZW1vdmUgZXZlbnRzXG4gIHRoaXMuX3VuYmluZFBvc3RTdGFydEV2ZW50cygpO1xuICB0aGlzLnBvaW50ZXJEb25lKCk7XG59O1xuXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5wb2ludGVyRG9uZSA9IG5vb3A7XG5cbi8vIC0tLS0tIHBvaW50ZXIgY2FuY2VsIC0tLS0tIC8vXG5cblVuaXBvaW50ZXIucHJvdG90eXBlLm9uTVNQb2ludGVyQ2FuY2VsID1cblVuaXBvaW50ZXIucHJvdG90eXBlLm9ucG9pbnRlcmNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyQ2FuY2VsKCBldmVudCwgZXZlbnQgKTtcbiAgfVxufTtcblxuVW5pcG9pbnRlci5wcm90b3R5cGUub250b3VjaGNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyQ2FuY2VsKCBldmVudCwgdG91Y2ggKTtcbiAgfVxufTtcblxuLyoqXG4gKiBwb2ludGVyIGNhbmNlbFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqIEBwcml2YXRlXG4gKi9cblVuaXBvaW50ZXIucHJvdG90eXBlLl9wb2ludGVyQ2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB0aGlzLnBvaW50ZXJDYW5jZWwoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBwdWJsaWNcblVuaXBvaW50ZXIucHJvdG90eXBlLnBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckNhbmNlbCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbi8vIHV0aWxpdHkgZnVuY3Rpb24gZm9yIGdldHRpbmcgeC95IGNvb3JpZGluYXRlcyBmcm9tIGV2ZW50LCBiZWNhdXNlIElFOFxuVW5pcG9pbnRlci5nZXRQb2ludGVyUG9pbnQgPSBmdW5jdGlvbiggcG9pbnRlciApIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludGVyLnBhZ2VYICE9PSB1bmRlZmluZWQgPyBwb2ludGVyLnBhZ2VYIDogcG9pbnRlci5jbGllbnRYLFxuICAgIHk6IHBvaW50ZXIucGFnZVkgIT09IHVuZGVmaW5lZCA/IHBvaW50ZXIucGFnZVkgOiBwb2ludGVyLmNsaWVudFlcbiAgfTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gVW5pcG9pbnRlcjtcblxufSkpO1xuXG4vKiFcbiAqIFVuaWRyYWdnZXIgdjEuMS41XG4gKiBEcmFnZ2FibGUgYmFzZSBjbGFzc1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICd1bmlkcmFnZ2VyL3VuaWRyYWdnZXInLFtcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxuICAgICAgJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcidcbiAgICBdLCBmdW5jdGlvbiggZXZlbnRpZSwgVW5pcG9pbnRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGV2ZW50aWUsIFVuaXBvaW50ZXIgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXG4gICAgICByZXF1aXJlKCd1bmlwb2ludGVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LlVuaWRyYWdnZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmV2ZW50aWUsXG4gICAgICB3aW5kb3cuVW5pcG9pbnRlclxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGV2ZW50aWUsIFVuaXBvaW50ZXIgKSB7XG5cblxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vIGhhbmRsZSBJRTggcHJldmVudCBkZWZhdWx0XG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wcmV2ZW50RGVmYXVsdCApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gVW5pZHJhZ2dlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBVbmlkcmFnZ2VyKCkge31cblxuLy8gaW5oZXJpdCBVbmlwb2ludGVyICYgRXZlbnRFbWl0dGVyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZSA9IG5ldyBVbmlwb2ludGVyKCk7XG5cbi8vIC0tLS0tIGJpbmQgc3RhcnQgLS0tLS0gLy9cblxuVW5pZHJhZ2dlci5wcm90b3R5cGUuYmluZEhhbmRsZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fYmluZEhhbmRsZXMoIHRydWUgKTtcbn07XG5cblVuaWRyYWdnZXIucHJvdG90eXBlLnVuYmluZEhhbmRsZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fYmluZEhhbmRsZXMoIGZhbHNlICk7XG59O1xuXG52YXIgbmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcjtcbi8qKlxuICogd29ya3MgYXMgdW5iaW5kZXIsIGFzIHlvdSBjYW4gLmJpbmRIYW5kbGVzKCBmYWxzZSApIHRvIHVuYmluZFxuICogQHBhcmFtIHtCb29sZWFufSBpc0JpbmQgLSB3aWxsIHVuYmluZCBpZiBmYWxzZXlcbiAqL1xuVW5pZHJhZ2dlci5wcm90b3R5cGUuX2JpbmRIYW5kbGVzID0gZnVuY3Rpb24oIGlzQmluZCApIHtcbiAgLy8gbXVuZ2UgaXNCaW5kLCBkZWZhdWx0IHRvIHRydWVcbiAgaXNCaW5kID0gaXNCaW5kID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFpc0JpbmQ7XG4gIC8vIGV4dHJhIGJpbmQgbG9naWNcbiAgdmFyIGJpbmRlckV4dHJhO1xuICBpZiAoIG5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCApIHtcbiAgICBiaW5kZXJFeHRyYSA9IGZ1bmN0aW9uKCBoYW5kbGUgKSB7XG4gICAgICAvLyBkaXNhYmxlIHNjcm9sbGluZyBvbiB0aGUgZWxlbWVudFxuICAgICAgaGFuZGxlLnN0eWxlLnRvdWNoQWN0aW9uID0gaXNCaW5kID8gJ25vbmUnIDogJyc7XG4gICAgfTtcbiAgfSBlbHNlIGlmICggbmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgKSB7XG4gICAgYmluZGVyRXh0cmEgPSBmdW5jdGlvbiggaGFuZGxlICkge1xuICAgICAgLy8gZGlzYWJsZSBzY3JvbGxpbmcgb24gdGhlIGVsZW1lbnRcbiAgICAgIGhhbmRsZS5zdHlsZS5tc1RvdWNoQWN0aW9uID0gaXNCaW5kID8gJ25vbmUnIDogJyc7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBiaW5kZXJFeHRyYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVE9ETyByZS1lbmFibGUgaW1nLm9uZHJhZ3N0YXJ0IHdoZW4gdW5iaW5kaW5nXG4gICAgICBpZiAoIGlzQmluZCApIHtcbiAgICAgICAgZGlzYWJsZUltZ09uZHJhZ3N0YXJ0KCBoYW5kbGUgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8vIGJpbmQgZWFjaCBoYW5kbGVcbiAgdmFyIGJpbmRNZXRob2QgPSBpc0JpbmQgPyAnYmluZCcgOiAndW5iaW5kJztcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5oYW5kbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBoYW5kbGUgPSB0aGlzLmhhbmRsZXNbaV07XG4gICAgdGhpcy5fYmluZFN0YXJ0RXZlbnQoIGhhbmRsZSwgaXNCaW5kICk7XG4gICAgYmluZGVyRXh0cmEoIGhhbmRsZSApO1xuICAgIGV2ZW50aWVbIGJpbmRNZXRob2QgXSggaGFuZGxlLCAnY2xpY2snLCB0aGlzICk7XG4gIH1cbn07XG5cbi8vIHJlbW92ZSBkZWZhdWx0IGRyYWdnaW5nIGludGVyYWN0aW9uIG9uIGFsbCBpbWFnZXMgaW4gSUU4XG4vLyBJRTggZG9lcyBpdHMgb3duIGRyYWcgdGhpbmcgb24gaW1hZ2VzLCB3aGljaCBtZXNzZXMgc3R1ZmYgdXBcblxuZnVuY3Rpb24gbm9EcmFnU3RhcnQoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gVE9ETyByZXBsYWNlIHRoaXMgd2l0aCBhIElFOCB0ZXN0XG52YXIgaXNJRTggPSAnYXR0YWNoRXZlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuLy8gSUU4IG9ubHlcbnZhciBkaXNhYmxlSW1nT25kcmFnc3RhcnQgPSAhaXNJRTggPyBub29wIDogZnVuY3Rpb24oIGhhbmRsZSApIHtcblxuICBpZiAoIGhhbmRsZS5ub2RlTmFtZSA9PSAnSU1HJyApIHtcbiAgICBoYW5kbGUub25kcmFnc3RhcnQgPSBub0RyYWdTdGFydDtcbiAgfVxuXG4gIHZhciBpbWFnZXMgPSBoYW5kbGUucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGltYWdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgaW1nID0gaW1hZ2VzW2ldO1xuICAgIGltZy5vbmRyYWdzdGFydCA9IG5vRHJhZ1N0YXJ0O1xuICB9XG59O1xuXG4vLyAtLS0tLSBzdGFydCBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIHBvaW50ZXIgc3RhcnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cblVuaWRyYWdnZXIucHJvdG90eXBlLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBkaXNtaXNzIHJhbmdlIHNsaWRlcnNcbiAgaWYgKCBldmVudC50YXJnZXQubm9kZU5hbWUgPT0gJ0lOUFVUJyAmJiBldmVudC50YXJnZXQudHlwZSA9PSAncmFuZ2UnICkge1xuICAgIC8vIHJlc2V0IHBvaW50ZXJEb3duIGxvZ2ljXG4gICAgdGhpcy5pc1BvaW50ZXJEb3duID0gZmFsc2U7XG4gICAgZGVsZXRlIHRoaXMucG9pbnRlcklkZW50aWZpZXI7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fZHJhZ1BvaW50ZXJEb3duKCBldmVudCwgcG9pbnRlciApO1xuICAvLyBrbHVkZ2UgdG8gYmx1ciBmb2N1c2VkIGlucHV0cyBpbiBkcmFnZ2VyXG4gIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgaWYgKCBmb2N1c2VkICYmIGZvY3VzZWQuYmx1ciApIHtcbiAgICBmb2N1c2VkLmJsdXIoKTtcbiAgfVxuICAvLyBiaW5kIG1vdmUgYW5kIGVuZCBldmVudHNcbiAgdGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyggZXZlbnQgKTtcbiAgLy8gdHJhY2sgc2Nyb2xsaW5nXG4gIHRoaXMucG9pbnRlckRvd25TY3JvbGwgPSBVbmlkcmFnZ2VyLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gIGV2ZW50aWUuYmluZCggd2luZG93LCAnc2Nyb2xsJywgdGhpcyApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIGJhc2UgcG9pbnRlciBkb3duIGxvZ2ljXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5fZHJhZ1BvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyB0cmFjayB0byBzZWUgd2hlbiBkcmFnZ2luZyBzdGFydHNcbiAgdGhpcy5wb2ludGVyRG93blBvaW50ID0gVW5pcG9pbnRlci5nZXRQb2ludGVyUG9pbnQoIHBvaW50ZXIgKTtcblxuICAvLyBwcmV2ZW50IGRlZmF1bHQsIHVubGVzcyB0b3VjaHN0YXJ0IG9yIDxzZWxlY3Q+XG4gIHZhciBpc1RvdWNoc3RhcnQgPSBldmVudC50eXBlID09ICd0b3VjaHN0YXJ0JztcbiAgdmFyIHRhcmdldE5vZGVOYW1lID0gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lO1xuICBpZiAoICFpc1RvdWNoc3RhcnQgJiYgdGFyZ2V0Tm9kZU5hbWUgIT0gJ1NFTEVDVCcgKSB7XG4gICAgcHJldmVudERlZmF1bHRFdmVudCggZXZlbnQgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gbW92ZSBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIGRyYWcgbW92ZVxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xuVW5pZHJhZ2dlci5wcm90b3R5cGUucG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBtb3ZlVmVjdG9yID0gdGhpcy5fZHJhZ1BvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG4gIHRoaXMuX2RyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxuLy8gYmFzZSBwb2ludGVyIG1vdmUgbG9naWNcblVuaWRyYWdnZXIucHJvdG90eXBlLl9kcmFnUG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBtb3ZlUG9pbnQgPSBVbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludCggcG9pbnRlciApO1xuICB2YXIgbW92ZVZlY3RvciA9IHtcbiAgICB4OiBtb3ZlUG9pbnQueCAtIHRoaXMucG9pbnRlckRvd25Qb2ludC54LFxuICAgIHk6IG1vdmVQb2ludC55IC0gdGhpcy5wb2ludGVyRG93blBvaW50LnlcbiAgfTtcbiAgLy8gc3RhcnQgZHJhZyBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbiAgaWYgKCAhdGhpcy5pc0RyYWdnaW5nICYmIHRoaXMuaGFzRHJhZ1N0YXJ0ZWQoIG1vdmVWZWN0b3IgKSApIHtcbiAgICB0aGlzLl9kcmFnU3RhcnQoIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbiAgcmV0dXJuIG1vdmVWZWN0b3I7XG59O1xuXG4vLyBjb25kaXRpb24gaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gMyB8fCBNYXRoLmFicyggbW92ZVZlY3Rvci55ICkgPiAzO1xufTtcblxuXG4vLyAtLS0tLSBlbmQgZXZlbnQgLS0tLS0gLy9cblxuLyoqXG4gKiBwb2ludGVyIHVwXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICovXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG4gIHRoaXMuX2RyYWdQb2ludGVyVXAoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5fZHJhZ1BvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgaWYgKCB0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgdGhpcy5fZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBwb2ludGVyIGRpZG4ndCBtb3ZlIGVub3VnaCBmb3IgZHJhZyB0byBzdGFydFxuICAgIHRoaXMuX3N0YXRpY0NsaWNrKCBldmVudCwgcG9pbnRlciApO1xuICB9XG59O1xuXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5wb2ludGVyRG9uZSA9IGZ1bmN0aW9uKCkge1xuICBldmVudGllLnVuYmluZCggd2luZG93LCAnc2Nyb2xsJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBkcmFnU3RhcnRcblVuaWRyYWdnZXIucHJvdG90eXBlLl9kcmFnU3RhcnQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gIHRoaXMuZHJhZ1N0YXJ0UG9pbnQgPSBVbmlkcmFnZ2VyLmdldFBvaW50ZXJQb2ludCggcG9pbnRlciApO1xuICAvLyBwcmV2ZW50IGNsaWNrc1xuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7XG5cbiAgdGhpcy5kcmFnU3RhcnQoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5kcmFnU3RhcnQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ1N0YXJ0JywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyBkcmFnTW92ZVxuVW5pZHJhZ2dlci5wcm90b3R5cGUuX2RyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICAvLyBkbyBub3QgZHJhZyBpZiBub3QgZHJhZ2dpbmcgeWV0XG4gIGlmICggIXRoaXMuaXNEcmFnZ2luZyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmRyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxuVW5pZHJhZ2dlci5wcm90b3R5cGUuZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIHByZXZlbnREZWZhdWx0RXZlbnQoIGV2ZW50ICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ01vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbi8vIGRyYWdFbmRcblVuaWRyYWdnZXIucHJvdG90eXBlLl9kcmFnRW5kID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gIC8vIHJlLWVuYWJsZSBjbGlja2luZyBhc3luY1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgX3RoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzO1xuICB9KTtcblxuICB0aGlzLmRyYWdFbmQoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5kcmFnRW5kID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdFbmQnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cblVuaWRyYWdnZXIucHJvdG90eXBlLnBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIGV2ZW50aWUudW5iaW5kKCB3aW5kb3csICdzY3JvbGwnLCB0aGlzICk7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsO1xufTtcblxuLy8gLS0tLS0gb25jbGljayAtLS0tLSAvL1xuXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xuVW5pZHJhZ2dlci5wcm90b3R5cGUub25jbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApIHtcbiAgICBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBzdGF0aWNDbGljayAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5fc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGlnbm9yZSBlbXVsYXRlZCBtb3VzZSB1cCBjbGlja3NcbiAgaWYgKCB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICYmIGV2ZW50LnR5cGUgPT0gJ21vdXNldXAnICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGFsbG93IGNsaWNrIGluIDxpbnB1dD5zIGFuZCA8dGV4dGFyZWE+c1xuICB2YXIgbm9kZU5hbWUgPSBldmVudC50YXJnZXQubm9kZU5hbWU7XG4gIGlmICggbm9kZU5hbWUgPT0gJ0lOUFVUJyB8fCBub2RlTmFtZSA9PSAnVEVYVEFSRUEnICkge1xuICAgIGV2ZW50LnRhcmdldC5mb2N1cygpO1xuICB9XG4gIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG5cbiAgLy8gc2V0IGZsYWcgZm9yIGVtdWxhdGVkIGNsaWNrcyAzMDBtcyBhZnRlciB0b3VjaGVuZFxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ21vdXNldXAnICkge1xuICAgIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgPSB0cnVlO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy8gcmVzZXQgZmxhZyBhZnRlciAzMDBtc1xuICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIF90aGlzLmlzSWdub3JpbmdNb3VzZVVwO1xuICAgIH0sIDQwMCApO1xuICB9XG59O1xuXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdzdGF0aWNDbGljaycsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gc2Nyb2xsIC0tLS0tIC8vXG5cblVuaWRyYWdnZXIucHJvdG90eXBlLm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzY3JvbGwgPSBVbmlkcmFnZ2VyLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gIHZhciBzY3JvbGxNb3ZlWCA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueCAtIHNjcm9sbC54O1xuICB2YXIgc2Nyb2xsTW92ZVkgPSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsLnkgLSBzY3JvbGwueTtcbiAgLy8gY2FuY2VsIGNsaWNrL3RhcCBpZiBzY3JvbGwgaXMgdG9vIG11Y2hcbiAgaWYgKCBNYXRoLmFicyggc2Nyb2xsTW92ZVggKSA+IDMgfHwgTWF0aC5hYnMoIHNjcm9sbE1vdmVZICkgPiAzICkge1xuICAgIHRoaXMuX3BvaW50ZXJEb25lKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIHV0aWxzIC0tLS0tIC8vXG5cblVuaWRyYWdnZXIuZ2V0UG9pbnRlclBvaW50ID0gZnVuY3Rpb24oIHBvaW50ZXIgKSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnRlci5wYWdlWCAhPT0gdW5kZWZpbmVkID8gcG9pbnRlci5wYWdlWCA6IHBvaW50ZXIuY2xpZW50WCxcbiAgICB5OiBwb2ludGVyLnBhZ2VZICE9PSB1bmRlZmluZWQgPyBwb2ludGVyLnBhZ2VZIDogcG9pbnRlci5jbGllbnRZXG4gIH07XG59O1xuXG52YXIgaXNQYWdlT2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQ7XG5cbi8vIGdldCBzY3JvbGwgaW4geyB4LCB5IH1cblVuaWRyYWdnZXIuZ2V0U2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBpc1BhZ2VPZmZzZXQgPyB3aW5kb3cucGFnZVhPZmZzZXQgOiBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsXG4gICAgeTogaXNQYWdlT2Zmc2V0ID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcbiAgfTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5VbmlkcmFnZ2VyLmdldFBvaW50ZXJQb2ludCA9IFVuaXBvaW50ZXIuZ2V0UG9pbnRlclBvaW50O1xuXG5yZXR1cm4gVW5pZHJhZ2dlcjtcblxufSkpO1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIFxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2ZsaWNraXR5L2pzL2RyYWcnLFtcbiAgICAgICdjbGFzc2llL2NsYXNzaWUnLFxuICAgICAgJ2V2ZW50aWUvZXZlbnRpZScsXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAndW5pZHJhZ2dlci91bmlkcmFnZ2VyJyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcbiAgICBdLCBmdW5jdGlvbiggY2xhc3NpZSwgZXZlbnRpZSwgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgY2xhc3NpZSwgZXZlbnRpZSwgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tY2xhc3NpZScpLFxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgndW5pZHJhZ2dlcicpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmNsYXNzaWUsXG4gICAgICB3aW5kb3cuZXZlbnRpZSxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5VbmlkcmFnZ2VyLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGNsYXNzaWUsIGV2ZW50aWUsIEZsaWNraXR5LCBVbmlkcmFnZ2VyLCB1dGlscyApIHtcblxuXG5cbi8vIGhhbmRsZSBJRTggcHJldmVudCBkZWZhdWx0XG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wcmV2ZW50RGVmYXVsdCApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuLy8gLS0tLS0gZGVmYXVsdHMgLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6IHRydWUsXG4gIHRvdWNoVmVydGljYWxTY3JvbGw6IHRydWVcbn0pO1xuXG4vLyAtLS0tLSBjcmVhdGUgLS0tLS0gLy9cblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlRHJhZycpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkcmFnIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG51dGlscy5leHRlbmQoIEZsaWNraXR5LnByb3RvdHlwZSwgVW5pZHJhZ2dlci5wcm90b3R5cGUgKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkZsaWNraXR5LnByb3RvdHlwZS5fY3JlYXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmJpbmREcmFnICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuX3VpQ2hhbmdlRHJhZyApO1xuICB0aGlzLm9uKCAnY2hpbGRVSVBvaW50ZXJEb3duJywgdGhpcy5fY2hpbGRVSVBvaW50ZXJEb3duRHJhZyApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMudW5iaW5kRHJhZyApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmJpbmREcmFnID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5kcmFnZ2FibGUgfHwgdGhpcy5pc0RyYWdCb3VuZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY2xhc3NpZS5hZGQoIHRoaXMuZWxlbWVudCwgJ2lzLWRyYWdnYWJsZScgKTtcbiAgdGhpcy5oYW5kbGVzID0gWyB0aGlzLnZpZXdwb3J0IF07XG4gIHRoaXMuYmluZEhhbmRsZXMoKTtcbiAgdGhpcy5pc0RyYWdCb3VuZCA9IHRydWU7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUudW5iaW5kRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ0JvdW5kICkge1xuICAgIHJldHVybjtcbiAgfVxuICBjbGFzc2llLnJlbW92ZSggdGhpcy5lbGVtZW50LCAnaXMtZHJhZ2dhYmxlJyApO1xuICB0aGlzLnVuYmluZEhhbmRsZXMoKTtcbiAgZGVsZXRlIHRoaXMuaXNEcmFnQm91bmQ7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuX3VpQ2hhbmdlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuX2NoaWxkVUlQb2ludGVyRG93bkRyYWcgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHByZXZlbnREZWZhdWx0RXZlbnQoIGV2ZW50ICk7XG4gIHRoaXMucG9pbnRlckRvd25Gb2N1cyggZXZlbnQgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHBvaW50ZXIgZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkZsaWNraXR5LnByb3RvdHlwZS5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gZGlzbWlzcyByYW5nZSBzbGlkZXJzXG4gIGlmICggZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09ICdJTlBVVCcgJiYgZXZlbnQudGFyZ2V0LnR5cGUgPT0gJ3JhbmdlJyApIHtcbiAgICAvLyByZXNldCBwb2ludGVyRG93biBsb2dpY1xuICAgIHRoaXMuaXNQb2ludGVyRG93biA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2RyYWdQb2ludGVyRG93biggZXZlbnQsIHBvaW50ZXIgKTtcblxuICAvLyBrbHVkZ2UgdG8gYmx1ciBmb2N1c2VkIGlucHV0cyBpbiBkcmFnZ2VyXG4gIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgaWYgKCBmb2N1c2VkICYmIGZvY3VzZWQuYmx1ciAmJiBmb2N1c2VkICE9IHRoaXMuZWxlbWVudCAmJlxuICAgIC8vIGRvIG5vdCBibHVyIGJvZHkgZm9yIElFOSAmIDEwLCAjMTE3XG4gICAgZm9jdXNlZCAhPSBkb2N1bWVudC5ib2R5ICkge1xuICAgIGZvY3VzZWQuYmx1cigpO1xuICB9XG4gIHRoaXMucG9pbnRlckRvd25Gb2N1cyggZXZlbnQgKTtcbiAgLy8gc3RvcCBpZiBpdCB3YXMgbW92aW5nXG4gIHRoaXMuZHJhZ1ggPSB0aGlzLng7XG4gIGNsYXNzaWUuYWRkKCB0aGlzLnZpZXdwb3J0LCAnaXMtcG9pbnRlci1kb3duJyApO1xuICAvLyBiaW5kIG1vdmUgYW5kIGVuZCBldmVudHNcbiAgdGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyggZXZlbnQgKTtcbiAgLy8gdHJhY2sgc2Nyb2xsaW5nXG4gIHRoaXMucG9pbnRlckRvd25TY3JvbGwgPSBVbmlkcmFnZ2VyLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gIGV2ZW50aWUuYmluZCggd2luZG93LCAnc2Nyb2xsJywgdGhpcyApO1xuXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJEb3duJywgZXZlbnQsIFsgcG9pbnRlciBdICk7XG59O1xuXG52YXIgdG91Y2hTdGFydEV2ZW50cyA9IHtcbiAgdG91Y2hzdGFydDogdHJ1ZSxcbiAgTVNQb2ludGVyRG93bjogdHJ1ZVxufTtcblxudmFyIGZvY3VzTm9kZXMgPSB7XG4gIElOUFVUOiB0cnVlLFxuICBTRUxFQ1Q6IHRydWVcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5wb2ludGVyRG93bkZvY3VzID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBmb2N1cyBlbGVtZW50LCBpZiBub3QgdG91Y2gsIGFuZCBpdHMgbm90IGFuIGlucHV0IG9yIHNlbGVjdFxuICBpZiAoIHRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ICYmICF0b3VjaFN0YXJ0RXZlbnRzWyBldmVudC50eXBlIF0gJiZcbiAgICAgICFmb2N1c05vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXSApIHtcbiAgICB0aGlzLmVsZW1lbnQuZm9jdXMoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5GbGlja2l0eS5wcm90b3R5cGUucG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBtb3ZlVmVjdG9yID0gdGhpcy5fZHJhZ1BvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xuICB0aGlzLnRvdWNoVmVydGljYWxTY3JvbGxNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xuICB0aGlzLl9kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAncG9pbnRlck1vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gIXRoaXMuaXNUb3VjaFNjcm9sbGluZyAmJiBNYXRoLmFicyggbW92ZVZlY3Rvci54ICkgPiAzO1xufTtcblxuLy8gLS0tLS0gdXAgLS0tLS0gLy9cblxuRmxpY2tpdHkucHJvdG90eXBlLnBvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgZGVsZXRlIHRoaXMuaXNUb3VjaFNjcm9sbGluZztcbiAgY2xhc3NpZS5yZW1vdmUoIHRoaXMudmlld3BvcnQsICdpcy1wb2ludGVyLWRvd24nICk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJVcCcsIGV2ZW50LCBbIHBvaW50ZXIgXSApO1xuICB0aGlzLl9kcmFnUG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdmVydGljYWwgc2Nyb2xsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciB0b3VjaFNjcm9sbEV2ZW50cyA9IHtcbiAgLy8gbW92ZSBldmVudHNcbiAgLy8gbW91c2Vtb3ZlOiB0cnVlLFxuICB0b3VjaG1vdmU6IHRydWUsXG4gIE1TUG9pbnRlck1vdmU6IHRydWVcbn07XG5cbi8vIHBvc2l0aW9uIG9mIHBvaW50ZXIsIHJlbGF0aXZlIHRvIHdpbmRvd1xuZnVuY3Rpb24gZ2V0UG9pbnRlcldpbmRvd1koIHBvaW50ZXIgKSB7XG4gIHZhciBwb2ludGVyUG9pbnQgPSBVbmlkcmFnZ2VyLmdldFBvaW50ZXJQb2ludCggcG9pbnRlciApO1xuICByZXR1cm4gcG9pbnRlclBvaW50LnkgLSB3aW5kb3cucGFnZVlPZmZzZXQ7XG59XG5cbkZsaWNraXR5LnByb3RvdHlwZS50b3VjaFZlcnRpY2FsU2Nyb2xsTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgLy8gZG8gbm90IHNjcm9sbCBpZiBhbHJlYWR5IGRyYWdnaW5nLCBpZiBkaXNhYmxlZFxuICB2YXIgdG91Y2hWZXJ0aWNhbFNjcm9sbCA9IHRoaXMub3B0aW9ucy50b3VjaFZlcnRpY2FsU2Nyb2xsO1xuICAvLyBpZiB0b3VjaFZlcnRpY2FsU2Nyb2xsIGlzICd3aXRoRHJhZycsIGFsbG93IHNjcm9sbGluZyBhbmQgZHJhZ2dpbmdcbiAgdmFyIGNhbk5vdFNjcm9sbCA9IHRvdWNoVmVydGljYWxTY3JvbGwgPT0gJ3dpdGhEcmFnJyA/ICF0b3VjaFZlcnRpY2FsU2Nyb2xsIDpcbiAgICB0aGlzLmlzRHJhZ2dpbmcgfHwgIXRvdWNoVmVydGljYWxTY3JvbGw7XG4gIGlmICggY2FuTm90U2Nyb2xsIHx8ICF0b3VjaFNjcm9sbEV2ZW50c1sgZXZlbnQudHlwZSBdICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBkb24ndCBzdGFydCB2ZXJ0aWNhbCBzY3JvbGxpbmcgdW50aWwgcG9pbnRlciBoYXMgbW92ZWQgMTAgcGl4ZWxzIGluIGEgZGlyZWN0aW9uXG4gIGlmICggIXRoaXMuaXNUb3VjaFNjcm9sbGluZyAmJiBNYXRoLmFicyggbW92ZVZlY3Rvci55ICkgPiAxMCApIHtcbiAgICAvLyBzdGFydCB0b3VjaCB2ZXJ0aWNhbCBzY3JvbGxpbmdcbiAgICAvLyBzY3JvbGwgJiBwb2ludGVyWSB3aGVuIHN0YXJ0ZWRcbiAgICB0aGlzLnN0YXJ0U2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICB0aGlzLnBvaW50ZXJXaW5kb3dTdGFydFkgPSBnZXRQb2ludGVyV2luZG93WSggcG9pbnRlciApO1xuICAgIC8vIHN0YXJ0IHNjcm9sbCBhbmltYXRpb25cbiAgICB0aGlzLmlzVG91Y2hTY3JvbGxpbmcgPSB0cnVlO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkcmFnZ2luZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5GbGlja2l0eS5wcm90b3R5cGUuZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmRyYWdTdGFydFBvc2l0aW9uID0gdGhpcy54O1xuICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdTdGFydCcsIGV2ZW50LCBbIHBvaW50ZXIgXSApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmRyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApO1xuXG4gIHRoaXMucHJldmlvdXNEcmFnWCA9IHRoaXMuZHJhZ1g7XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdFxuICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gLTEgOiAxO1xuICB2YXIgZHJhZ1ggPSB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICsgbW92ZVZlY3Rvci54ICogZGlyZWN0aW9uO1xuXG4gIGlmICggIXRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIHRoaXMuY2VsbHMubGVuZ3RoICkge1xuICAgIC8vIHNsb3cgZHJhZ1xuICAgIHZhciBvcmlnaW5Cb3VuZCA9IE1hdGgubWF4KCAtdGhpcy5jZWxsc1swXS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYID4gb3JpZ2luQm91bmQgPyAoIGRyYWdYICsgb3JpZ2luQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICAgIHZhciBlbmRCb3VuZCA9IE1hdGgubWluKCAtdGhpcy5nZXRMYXN0Q2VsbCgpLnRhcmdldCwgdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiApO1xuICAgIGRyYWdYID0gZHJhZ1ggPCBlbmRCb3VuZCA/ICggZHJhZ1ggKyBlbmRCb3VuZCApICogMC41IDogZHJhZ1g7XG4gIH1cblxuICB0aGlzLmRyYWdYID0gZHJhZ1g7XG5cbiAgdGhpcy5kcmFnTW92ZVRpbWUgPSBuZXcgRGF0ZSgpO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdkcmFnTW92ZScsIGV2ZW50LCBbIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICB9XG4gIC8vIHNldCBzZWxlY3RlZEluZGV4IGJhc2VkIG9uIHdoZXJlIGZsaWNrIHdpbGwgZW5kIHVwXG4gIHZhciBpbmRleCA9IHRoaXMuZHJhZ0VuZFJlc3RpbmdTZWxlY3QoKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICAvLyBpZiBmcmVlLXNjcm9sbCAmIG5vdCB3cmFwIGFyb3VuZFxuICAgIC8vIGRvIG5vdCBmcmVlLXNjcm9sbCBpZiBnb2luZyBvdXRzaWRlIG9mIGJvdW5kaW5nIGNlbGxzXG4gICAgLy8gc28gYm91bmRpbmcgY2VsbHMgY2FuIGF0dHJhY3Qgc2xpZGVyLCBhbmQga2VlcCBpdCBpbiBib3VuZHNcbiAgICB2YXIgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAgIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID0gLXJlc3RpbmdYID4gdGhpcy5jZWxsc1swXS50YXJnZXQgJiZcbiAgICAgIC1yZXN0aW5nWCA8IHRoaXMuZ2V0TGFzdENlbGwoKS50YXJnZXQ7XG4gIH0gZWxzZSBpZiAoICF0aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCAmJiBpbmRleCA9PSB0aGlzLnNlbGVjdGVkSW5kZXggKSB7XG4gICAgLy8gYm9vc3Qgc2VsZWN0aW9uIGlmIHNlbGVjdGVkIGluZGV4IGhhcyBub3QgY2hhbmdlZFxuICAgIGluZGV4ICs9IHRoaXMuZHJhZ0VuZEJvb3N0U2VsZWN0KCk7XG4gIH1cbiAgZGVsZXRlIHRoaXMucHJldmlvdXNEcmFnWDtcbiAgLy8gYXBwbHkgc2VsZWN0aW9uXG4gIC8vIFRPRE8gcmVmYWN0b3IgdGhpcywgc2VsZWN0aW5nIGhlcmUgZmVlbHMgd2VpcmRcbiAgdGhpcy5zZWxlY3QoIGluZGV4ICk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdFbmQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5kcmFnRW5kUmVzdGluZ1NlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAvLyBob3cgZmFyIGF3YXkgZnJvbSBzZWxlY3RlZCBjZWxsXG4gIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLmdldENlbGxEaXN0YW5jZSggLXJlc3RpbmdYLCB0aGlzLnNlbGVjdGVkSW5kZXggKSApO1xuICAvLyBnZXQgY2xvc2V0IHJlc3RpbmcgZ29pbmcgdXAgYW5kIGdvaW5nIGRvd25cbiAgdmFyIHBvc2l0aXZlUmVzdGluZyA9IHRoaXMuX2dldENsb3Nlc3RSZXN0aW5nKCByZXN0aW5nWCwgZGlzdGFuY2UsIDEgKTtcbiAgdmFyIG5lZ2F0aXZlUmVzdGluZyA9IHRoaXMuX2dldENsb3Nlc3RSZXN0aW5nKCByZXN0aW5nWCwgZGlzdGFuY2UsIC0xICk7XG4gIC8vIHVzZSBjbG9zZXIgcmVzdGluZyBmb3Igd3JhcC1hcm91bmRcbiAgdmFyIGluZGV4ID0gcG9zaXRpdmVSZXN0aW5nLmRpc3RhbmNlIDwgbmVnYXRpdmVSZXN0aW5nLmRpc3RhbmNlID9cbiAgICBwb3NpdGl2ZVJlc3RpbmcuaW5kZXggOiBuZWdhdGl2ZVJlc3RpbmcuaW5kZXg7XG4gIHJldHVybiBpbmRleDtcbn07XG5cbi8qKlxuICogZ2l2ZW4gcmVzdGluZyBYIGFuZCBkaXN0YW5jZSB0byBzZWxlY3RlZCBjZWxsXG4gKiBnZXQgdGhlIGRpc3RhbmNlIGFuZCBpbmRleCBvZiB0aGUgY2xvc2VzdCBjZWxsXG4gKiBAcGFyYW0ge051bWJlcn0gcmVzdGluZ1ggLSBlc3RpbWF0ZWQgcG9zdC1mbGljayByZXN0aW5nIHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2UgLSBkaXN0YW5jZSB0byBzZWxlY3RlZCBjZWxsXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluY3JlbWVudCAtICsxIG9yIC0xLCBnb2luZyB1cCBvciBkb3duXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIHsgZGlzdGFuY2U6IHtOdW1iZXJ9LCBpbmRleDoge0ludGVnZXJ9IH1cbiAqL1xuRmxpY2tpdHkucHJvdG90eXBlLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgdmFyIGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/XG4gICAgLy8gaWYgY29udGFpbiwga2VlcCBnb2luZyBpZiBkaXN0YW5jZSBpcyBlcXVhbCB0byBtaW5EaXN0YW5jZVxuICAgIGZ1bmN0aW9uKCBkLCBtZCApIHsgcmV0dXJuIGQgPD0gbWQ7IH0gOiBmdW5jdGlvbiggZCwgbWQgKSB7IHJldHVybiBkIDwgbWQ7IH07XG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcbiAgICAvLyBtZWFzdXJlIGRpc3RhbmNlIHRvIG5leHQgY2VsbFxuICAgIGluZGV4ICs9IGluY3JlbWVudDtcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGRpc3RhbmNlID0gdGhpcy5nZXRDZWxsRGlzdGFuY2UoIC1yZXN0aW5nWCwgaW5kZXggKTtcbiAgICBpZiAoIGRpc3RhbmNlID09PSBudWxsICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkaXN0YW5jZTogbWluRGlzdGFuY2UsXG4gICAgLy8gc2VsZWN0ZWQgd2FzIHByZXZpb3VzIGluZGV4XG4gICAgaW5kZXg6IGluZGV4IC0gaW5jcmVtZW50XG4gIH07XG59O1xuXG4vKipcbiAqIG1lYXN1cmUgZGlzdGFuY2UgYmV0d2VlbiB4IGFuZCBhIGNlbGwgdGFyZ2V0XG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGNlbGwgaW5kZXhcbiAqL1xuRmxpY2tpdHkucHJvdG90eXBlLmdldENlbGxEaXN0YW5jZSA9IGZ1bmN0aW9uKCB4LCBpbmRleCApIHtcbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICAvLyB3cmFwIGFyb3VuZCBpZiBhdCBsZWFzdCAyIGNlbGxzXG4gIHZhciBpc1dyYXBBcm91bmQgPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiBsZW4gPiAxO1xuICB2YXIgY2VsbEluZGV4ID0gaXNXcmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpbmRleCwgbGVuICkgOiBpbmRleDtcbiAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWyBjZWxsSW5kZXggXTtcbiAgaWYgKCAhY2VsbCApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBhZGQgZGlzdGFuY2UgZm9yIHdyYXAtYXJvdW5kIGNlbGxzXG4gIHZhciB3cmFwID0gaXNXcmFwQXJvdW5kID8gdGhpcy5zbGlkZWFibGVXaWR0aCAqIE1hdGguZmxvb3IoIGluZGV4IC8gbGVuICkgOiAwO1xuICByZXR1cm4geCAtICggY2VsbC50YXJnZXQgKyB3cmFwICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuZHJhZ0VuZEJvb3N0U2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCBib29zdCBpZiBubyBwcmV2aW91c0RyYWdYIG9yIGRyYWdNb3ZlVGltZVxuICBpZiAoIHRoaXMucHJldmlvdXNEcmFnWCA9PT0gdW5kZWZpbmVkIHx8ICF0aGlzLmRyYWdNb3ZlVGltZSB8fFxuICAgIC8vIG9yIGlmIGRyYWcgd2FzIGhlbGQgZm9yIDEwMCBtc1xuICAgIG5ldyBEYXRlKCkgLSB0aGlzLmRyYWdNb3ZlVGltZSA+IDEwMCApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBkaXN0YW5jZSA9IHRoaXMuZ2V0Q2VsbERpc3RhbmNlKCAtdGhpcy5kcmFnWCwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XG4gIGlmICggZGlzdGFuY2UgPiAwICYmIGRlbHRhID4gMCApIHtcbiAgICAvLyBib29zdCB0byBuZXh0IGlmIG1vdmluZyB0b3dhcmRzIHRoZSByaWdodCwgYW5kIHBvc2l0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoIGRpc3RhbmNlIDwgMCAmJiBkZWx0YSA8IDAgKSB7XG4gICAgLy8gYm9vc3QgdG8gcHJldmlvdXMgaWYgbW92aW5nIHRvd2FyZHMgdGhlIGxlZnQsIGFuZCBuZWdhdGl2ZSB2ZWxvY2l0eVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8vIC0tLS0tIHN0YXRpY0NsaWNrIC0tLS0tIC8vXG5cbkZsaWNraXR5LnByb3RvdHlwZS5zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gZ2V0IGNsaWNrZWRDZWxsLCBpZiBjZWxsIHdhcyBjbGlja2VkXG4gIHZhciBjbGlja2VkQ2VsbCA9IHRoaXMuZ2V0UGFyZW50Q2VsbCggZXZlbnQudGFyZ2V0ICk7XG4gIHZhciBjZWxsRWxlbSA9IGNsaWNrZWRDZWxsICYmIGNsaWNrZWRDZWxsLmVsZW1lbnQ7XG4gIHZhciBjZWxsSW5kZXggPSBjbGlja2VkQ2VsbCAmJiB1dGlscy5pbmRleE9mKCB0aGlzLmNlbGxzLCBjbGlja2VkQ2VsbCApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzdGF0aWNDbGljaycsIGV2ZW50LCBbIHBvaW50ZXIsIGNlbGxFbGVtLCBjZWxsSW5kZXggXSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSkpO1xuXG4vKiFcbiAqIFRhcCBsaXN0ZW5lciB2MS4xLjFcbiAqIGxpc3RlbnMgdG8gdGFwc1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICd0YXAtbGlzdGVuZXIvdGFwLWxpc3RlbmVyJyxbXG4gICAgICAndW5pcG9pbnRlci91bmlwb2ludGVyJ1xuICAgIF0sIGZ1bmN0aW9uKCBVbmlwb2ludGVyICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgVW5pcG9pbnRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ3VuaXBvaW50ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuVGFwTGlzdGVuZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LlVuaXBvaW50ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICkge1xuXG5cblxuLy8gaGFuZGxlIElFOCBwcmV2ZW50IGRlZmF1bHRcbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0RXZlbnQoIGV2ZW50ICkge1xuICBpZiAoIGV2ZW50LnByZXZlbnREZWZhdWx0ICkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgVGFwTGlzdGVuZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gVGFwTGlzdGVuZXIoIGVsZW0gKSB7XG4gIHRoaXMuYmluZFRhcCggZWxlbSApO1xufVxuXG4vLyBpbmhlcml0IFVuaXBvaW50ZXIgJiBFdmVudEVtaXR0ZXJcblRhcExpc3RlbmVyLnByb3RvdHlwZSA9IG5ldyBVbmlwb2ludGVyKCk7XG5cbi8qKlxuICogYmluZCB0YXAgZXZlbnQgdG8gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKi9cblRhcExpc3RlbmVyLnByb3RvdHlwZS5iaW5kVGFwID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggIWVsZW0gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMudW5iaW5kVGFwKCk7XG4gIHRoaXMudGFwRWxlbWVudCA9IGVsZW07XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCB0cnVlICk7XG59O1xuXG5UYXBMaXN0ZW5lci5wcm90b3R5cGUudW5iaW5kVGFwID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMudGFwRWxlbWVudCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fYmluZFN0YXJ0RXZlbnQoIHRoaXMudGFwRWxlbWVudCwgdHJ1ZSApO1xuICBkZWxldGUgdGhpcy50YXBFbGVtZW50O1xufTtcblxudmFyIHBvaW50ZXJEb3duID0gVGFwTGlzdGVuZXIucHJvdG90eXBlLnBvaW50ZXJEb3duO1xuXG5UYXBMaXN0ZW5lci5wcm90b3R5cGUucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIHByZXZlbnQgZGVmYXVsdCBldmVudCBmb3IgdG91Y2gsIGRpc2FibGVzIHRhcCB0aGVuIGNsaWNrXG4gIGlmICggZXZlbnQudHlwZSA9PSAndG91Y2hzdGFydCcgKSB7XG4gICAgcHJldmVudERlZmF1bHRFdmVudCggZXZlbnQgKTtcbiAgfVxuICBwb2ludGVyRG93bi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG59O1xuXG52YXIgaXNQYWdlT2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQ7XG4vKipcbiAqIHBvaW50ZXIgdXBcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cblRhcExpc3RlbmVyLnByb3RvdHlwZS5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBwb2ludGVyUG9pbnQgPSBVbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludCggcG9pbnRlciApO1xuICB2YXIgYm91bmRpbmdSZWN0ID0gdGhpcy50YXBFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAvLyBzdGFuZGFyZCBvciBJRTggc2Nyb2xsIHBvc2l0aW9uc1xuICB2YXIgc2Nyb2xsWCA9IGlzUGFnZU9mZnNldCA/IHdpbmRvdy5wYWdlWE9mZnNldCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcbiAgdmFyIHNjcm9sbFkgPSBpc1BhZ2VPZmZzZXQgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgLy8gY2FsY3VsYXRlIGlmIHBvaW50ZXIgaXMgaW5zaWRlIHRhcEVsZW1lbnRcbiAgdmFyIGlzSW5zaWRlID0gcG9pbnRlclBvaW50LnggPj0gYm91bmRpbmdSZWN0LmxlZnQgKyBzY3JvbGxYICYmXG4gICAgcG9pbnRlclBvaW50LnggPD0gYm91bmRpbmdSZWN0LnJpZ2h0ICsgc2Nyb2xsWCAmJlxuICAgIHBvaW50ZXJQb2ludC55ID49IGJvdW5kaW5nUmVjdC50b3AgKyBzY3JvbGxZICYmXG4gICAgcG9pbnRlclBvaW50LnkgPD0gYm91bmRpbmdSZWN0LmJvdHRvbSArIHNjcm9sbFk7XG4gIC8vIHRyaWdnZXIgY2FsbGJhY2sgaWYgcG9pbnRlciBpcyBpbnNpZGUgZWxlbWVudFxuICBpZiAoIGlzSW5zaWRlICkge1xuICAgIHRoaXMuZW1pdEV2ZW50KCAndGFwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG4gIH1cbn07XG5cblRhcExpc3RlbmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucG9pbnRlckRvbmUoKTtcbiAgdGhpcy51bmJpbmRUYXAoKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gVGFwTGlzdGVuZXI7XG5cbn0pKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcHJldi9uZXh0IGJ1dHRvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIFxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2ZsaWNraXR5L2pzL3ByZXYtbmV4dC1idXR0b24nLFtcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ3RhcC1saXN0ZW5lci90YXAtbGlzdGVuZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xuICAgIF0sIGZ1bmN0aW9uKCBldmVudGllLCBGbGlja2l0eSwgVGFwTGlzdGVuZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRmxpY2tpdHksIFRhcExpc3RlbmVyLCB1dGlscyApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2ZW50aWUnKSxcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgIHJlcXVpcmUoJ3RhcC1saXN0ZW5lcicpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmV2ZW50aWUsXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICB3aW5kb3cuVGFwTGlzdGVuZXIsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRmxpY2tpdHksIFRhcExpc3RlbmVyLCB1dGlscyApIHtcblxuXG5cbi8vIC0tLS0tIGlubGluZSBTVkcgc3VwcG9ydCAtLS0tLSAvL1xuXG52YXIgc3ZnVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcblxuLy8gb25seSBjaGVjayBvbiBkZW1hbmQsIG5vdCBvbiBzY3JpcHQgbG9hZFxudmFyIHN1cHBvcnRzSW5saW5lU1ZHID0gKCBmdW5jdGlvbigpIHtcbiAgdmFyIHN1cHBvcnRzO1xuICBmdW5jdGlvbiBjaGVja1N1cHBvcnQoKSB7XG4gICAgaWYgKCBzdXBwb3J0cyAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgcmV0dXJuIHN1cHBvcnRzO1xuICAgIH1cbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9ICc8c3ZnLz4nO1xuICAgIHN1cHBvcnRzID0gKCBkaXYuZmlyc3RDaGlsZCAmJiBkaXYuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkgKSA9PSBzdmdVUkk7XG4gICAgcmV0dXJuIHN1cHBvcnRzO1xuICB9XG4gIHJldHVybiBjaGVja1N1cHBvcnQ7XG59KSgpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQcmV2TmV4dEJ1dHRvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBQcmV2TmV4dEJ1dHRvbiggZGlyZWN0aW9uLCBwYXJlbnQgKSB7XG4gIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZSA9IG5ldyBUYXBMaXN0ZW5lcigpO1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBwcm9wZXJ0aWVzXG4gIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5pc1ByZXZpb3VzID0gdGhpcy5kaXJlY3Rpb24gPT0gLTE7XG4gIHZhciBsZWZ0RGlyZWN0aW9uID0gdGhpcy5wYXJlbnQub3B0aW9ucy5yaWdodFRvTGVmdCA/IDEgOiAtMTtcbiAgdGhpcy5pc0xlZnQgPSB0aGlzLmRpcmVjdGlvbiA9PSBsZWZ0RGlyZWN0aW9uO1xuXG4gIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXByZXYtbmV4dC1idXR0b24nO1xuICBlbGVtZW50LmNsYXNzTmFtZSArPSB0aGlzLmlzUHJldmlvdXMgPyAnIHByZXZpb3VzJyA6ICcgbmV4dCc7XG4gIC8vIHByZXZlbnQgYnV0dG9uIGZyb20gc3VibWl0dGluZyBmb3JtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwODM2MDc2LzE4MjE4M1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICBGbGlja2l0eS5zZXRVbnNlbGVjdGFibGUoIGVsZW1lbnQgKTtcbiAgLy8gY3JlYXRlIGFycm93XG4gIGlmICggc3VwcG9ydHNJbmxpbmVTVkcoKSApIHtcbiAgICB2YXIgc3ZnID0gdGhpcy5jcmVhdGVTVkcoKTtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKCBzdmcgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTVkcgbm90IHN1cHBvcnRlZCwgc2V0IGJ1dHRvbiB0ZXh0XG4gICAgdGhpcy5zZXRBcnJvd1RleHQoKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnIG5vLXN2Zyc7XG4gIH1cbiAgLy8gdXBkYXRlIG9uIHNlbGVjdFxuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB0aGlzLm9uQ2VsbFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLnVwZGF0ZSgpO1xuICB9O1xuICB0aGlzLnBhcmVudC5vbiggJ2NlbGxTZWxlY3QnLCB0aGlzLm9uQ2VsbFNlbGVjdCApO1xuICAvLyB0YXBcbiAgdGhpcy5vbiggJ3RhcCcsIHRoaXMub25UYXAgKTtcbiAgLy8gcG9pbnRlckRvd25cbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgZnVuY3Rpb24gb25Qb2ludGVyRG93biggYnV0dG9uLCBldmVudCApIHtcbiAgICBfdGhpcy5wYXJlbnQuY2hpbGRVSVBvaW50ZXJEb3duKCBldmVudCApO1xuICB9KTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnVwZGF0ZSgpO1xuICB0aGlzLmJpbmRUYXAoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjbGljayBldmVudHMgZnJvbSBrZXlib2FyZFxuICBldmVudGllLmJpbmQoIHRoaXMuZWxlbWVudCwgJ2NsaWNrJywgdGhpcyApO1xuICAvLyBhZGQgdG8gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAvLyBkbyByZWd1bGFyIFRhcExpc3RlbmVyIGRlc3Ryb3lcbiAgVGFwTGlzdGVuZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCggdGhpcyApO1xuICAvLyBjbGljayBldmVudHMgZnJvbSBrZXlib2FyZFxuICBldmVudGllLnVuYmluZCggdGhpcy5lbGVtZW50LCAnY2xpY2snLCB0aGlzICk7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuY3JlYXRlU1ZHID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3N2ZycpO1xuICBzdmcuc2V0QXR0cmlidXRlKCAndmlld0JveCcsICcwIDAgMTAwIDEwMCcgKTtcbiAgdmFyIHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3BhdGgnKTtcbiAgdmFyIHBhdGhNb3ZlbWVudHMgPSBnZXRBcnJvd01vdmVtZW50cyggdGhpcy5wYXJlbnQub3B0aW9ucy5hcnJvd1NoYXBlICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIHBhdGhNb3ZlbWVudHMgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdhcnJvdycgKTtcbiAgLy8gcm90YXRlIGFycm93XG4gIGlmICggIXRoaXMuaXNMZWZ0ICkge1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMDAsIDEwMCkgcm90YXRlKDE4MCkgJyApO1xuICB9XG4gIHN2Zy5hcHBlbmRDaGlsZCggcGF0aCApO1xuICByZXR1cm4gc3ZnO1xufTtcblxuLy8gZ2V0IFNWRyBwYXRoIG1vdm1lbWVudFxuZnVuY3Rpb24gZ2V0QXJyb3dNb3ZlbWVudHMoIHNoYXBlICkge1xuICAvLyB1c2Ugc2hhcGUgYXMgbW92ZW1lbnQgaWYgc3RyaW5nXG4gIGlmICggdHlwZW9mIHNoYXBlID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBzaGFwZTtcbiAgfVxuICAvLyBjcmVhdGUgbW92ZW1lbnQgc3RyaW5nXG4gIHJldHVybiAnTSAnICsgc2hhcGUueDAgKyAnLDUwJyArXG4gICAgJyBMICcgKyBzaGFwZS54MSArICcsJyArICggc2hhcGUueTEgKyA1MCApICtcbiAgICAnIEwgJyArIHNoYXBlLngyICsgJywnICsgKCBzaGFwZS55MiArIDUwICkgK1xuICAgICcgTCAnICsgc2hhcGUueDMgKyAnLDUwICcgK1xuICAgICcgTCAnICsgc2hhcGUueDIgKyAnLCcgKyAoIDUwIC0gc2hhcGUueTIgKSArXG4gICAgJyBMICcgKyBzaGFwZS54MSArICcsJyArICggNTAgLSBzaGFwZS55MSApICtcbiAgICAnIFonO1xufVxuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuc2V0QXJyb3dUZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXJlbnRPcHRpb25zID0gdGhpcy5wYXJlbnQub3B0aW9ucztcbiAgdmFyIGFycm93VGV4dCA9IHRoaXMuaXNMZWZ0ID8gcGFyZW50T3B0aW9ucy5sZWZ0QXJyb3dUZXh0IDogcGFyZW50T3B0aW9ucy5yaWdodEFycm93VGV4dDtcbiAgdXRpbHMuc2V0VGV4dCggdGhpcy5lbGVtZW50LCBhcnJvd1RleHQgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5vblRhcCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRW5hYmxlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wYXJlbnQudWlDaGFuZ2UoKTtcbiAgdmFyIG1ldGhvZCA9IHRoaXMuaXNQcmV2aW91cyA/ICdwcmV2aW91cycgOiAnbmV4dCc7XG4gIHRoaXMucGFyZW50WyBtZXRob2QgXSgpO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIG9ubHkgYWxsb3cgY2xpY2tzIGZyb20ga2V5Ym9hcmRcbiAgdmFyIGZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICBpZiAoIGZvY3VzZWQgJiYgZm9jdXNlZCA9PSB0aGlzLmVsZW1lbnQgKSB7XG4gICAgdGhpcy5vblRhcCgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNFbmFibGVkICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gIHRoaXMuaXNFbmFibGVkID0gZmFsc2U7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGluZGV4IG9mIGZpcnN0IG9yIGxhc3QgY2VsbCwgaWYgcHJldmlvdXMgb3IgbmV4dFxuICB2YXIgY2VsbHMgPSB0aGlzLnBhcmVudC5jZWxscztcbiAgLy8gZW5hYmxlIGlzIHdyYXBBcm91bmQgYW5kIGF0IGxlYXN0IDIgY2VsbHNcbiAgaWYgKCB0aGlzLnBhcmVudC5vcHRpb25zLndyYXBBcm91bmQgJiYgY2VsbHMubGVuZ3RoID4gMSApIHtcbiAgICB0aGlzLmVuYWJsZSgpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gY2VsbHMubGVuZ3RoID8gY2VsbHMubGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBib3VuZEluZGV4ID0gdGhpcy5pc1ByZXZpb3VzID8gMCA6IGxhc3RJbmRleDtcbiAgdmFyIG1ldGhvZCA9IHRoaXMucGFyZW50LnNlbGVjdGVkSW5kZXggPT0gYm91bmRJbmRleCA/ICdkaXNhYmxlJyA6ICdlbmFibGUnO1xuICB0aGlzWyBtZXRob2QgXSgpO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwcmV2TmV4dEJ1dHRvbnM6IHRydWUsXG4gIGxlZnRBcnJvd1RleHQ6ICfigLknLFxuICByaWdodEFycm93VGV4dDogJ+KAuicsXG4gIGFycm93U2hhcGU6IHtcbiAgICB4MDogMTAsXG4gICAgeDE6IDYwLCB5MTogNTAsXG4gICAgeDI6IDcwLCB5MjogNDAsXG4gICAgeDM6IDMwXG4gIH1cbn0pO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQcmV2TmV4dEJ1dHRvbnMnKTtcblxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnByZXZOZXh0QnV0dG9ucyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnByZXZCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oIC0xLCB0aGlzICk7XG4gIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggMSwgdGhpcyApO1xuXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByZXZCdXR0b24uYWN0aXZhdGUoKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmFjdGl2YXRlKCk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByZXZCdXR0b24uZGVhY3RpdmF0ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uZGVhY3RpdmF0ZSgpO1xuICB0aGlzLm9mZiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5GbGlja2l0eS5QcmV2TmV4dEJ1dHRvbiA9IFByZXZOZXh0QnV0dG9uO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0pKTtcblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmbGlja2l0eS9qcy9wYWdlLWRvdHMnLFtcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ3RhcC1saXN0ZW5lci90YXAtbGlzdGVuZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xuICAgIF0sIGZ1bmN0aW9uKCBldmVudGllLCBGbGlja2l0eSwgVGFwTGlzdGVuZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRmxpY2tpdHksIFRhcExpc3RlbmVyLCB1dGlscyApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2ZW50aWUnKSxcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgIHJlcXVpcmUoJ3RhcC1saXN0ZW5lcicpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmV2ZW50aWUsXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICB3aW5kb3cuVGFwTGlzdGVuZXIsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRmxpY2tpdHksIFRhcExpc3RlbmVyLCB1dGlscyApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGFnZURvdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuXG5cbmZ1bmN0aW9uIFBhZ2VEb3RzKCBwYXJlbnQgKSB7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuUGFnZURvdHMucHJvdG90eXBlID0gbmV3IFRhcExpc3RlbmVyKCk7XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNyZWF0ZSBob2xkZXIgZWxlbWVudFxuICB0aGlzLmhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29sJyk7XG4gIHRoaXMuaG9sZGVyLmNsYXNzTmFtZSA9ICdmbGlja2l0eS1wYWdlLWRvdHMnO1xuICBGbGlja2l0eS5zZXRVbnNlbGVjdGFibGUoIHRoaXMuaG9sZGVyICk7XG4gIC8vIGNyZWF0ZSBkb3RzLCBhcnJheSBvZiBlbGVtZW50c1xuICB0aGlzLmRvdHMgPSBbXTtcbiAgLy8gdXBkYXRlIG9uIHNlbGVjdFxuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB0aGlzLm9uQ2VsbFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gIH07XG4gIHRoaXMucGFyZW50Lm9uKCAnY2VsbFNlbGVjdCcsIHRoaXMub25DZWxsU2VsZWN0ICk7XG4gIC8vIHRhcFxuICB0aGlzLm9uKCAndGFwJywgdGhpcy5vblRhcCApO1xuICAvLyBwb2ludGVyRG93blxuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCBmdW5jdGlvbiBvblBvaW50ZXJEb3duKCBidXR0b24sIGV2ZW50ICkge1xuICAgIF90aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24oIGV2ZW50ICk7XG4gIH0pO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2V0RG90cygpO1xuICB0aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gIHRoaXMuYmluZFRhcCggdGhpcy5ob2xkZXIgKTtcbiAgLy8gYWRkIHRvIERPTVxuICB0aGlzLnBhcmVudC5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmhvbGRlciApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuaG9sZGVyICk7XG4gIFRhcExpc3RlbmVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwoIHRoaXMgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5zZXREb3RzID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBkaWZmZXJlbmNlIGJldHdlZW4gbnVtYmVyIG9mIGNlbGxzIGFuZCBudW1iZXIgb2YgZG90c1xuICB2YXIgZGVsdGEgPSB0aGlzLnBhcmVudC5jZWxscy5sZW5ndGggLSB0aGlzLmRvdHMubGVuZ3RoO1xuICBpZiAoIGRlbHRhID4gMCApIHtcbiAgICB0aGlzLmFkZERvdHMoIGRlbHRhICk7XG4gIH0gZWxzZSBpZiAoIGRlbHRhIDwgMCApIHtcbiAgICB0aGlzLnJlbW92ZURvdHMoIC1kZWx0YSApO1xuICB9XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuYWRkRG90cyA9IGZ1bmN0aW9uKCBjb3VudCApIHtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgbmV3RG90cyA9IFtdO1xuICB3aGlsZSAoIGNvdW50ICkge1xuICAgIHZhciBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGRvdC5jbGFzc05hbWUgPSAnZG90JztcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG90ICk7XG4gICAgbmV3RG90cy5wdXNoKCBkb3QgKTtcbiAgICBjb3VudC0tO1xuICB9XG4gIHRoaXMuaG9sZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xuICB0aGlzLmRvdHMgPSB0aGlzLmRvdHMuY29uY2F0KCBuZXdEb3RzICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUucmVtb3ZlRG90cyA9IGZ1bmN0aW9uKCBjb3VudCApIHtcbiAgLy8gcmVtb3ZlIGZyb20gdGhpcy5kb3RzIGNvbGxlY3Rpb25cbiAgdmFyIHJlbW92ZURvdHMgPSB0aGlzLmRvdHMuc3BsaWNlKCB0aGlzLmRvdHMubGVuZ3RoIC0gY291bnQsIGNvdW50ICk7XG4gIC8vIHJlbW92ZSBmcm9tIERPTVxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSByZW1vdmVEb3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBkb3QgPSByZW1vdmVEb3RzW2ldO1xuICAgIHRoaXMuaG9sZGVyLnJlbW92ZUNoaWxkKCBkb3QgKTtcbiAgfVxufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlbW92ZSBzZWxlY3RlZCBjbGFzcyBvbiBwcmV2aW91c1xuICBpZiAoIHRoaXMuc2VsZWN0ZWREb3QgKSB7XG4gICAgdGhpcy5zZWxlY3RlZERvdC5jbGFzc05hbWUgPSAnZG90JztcbiAgfVxuICAvLyBkb24ndCBwcm9jZWVkIGlmIG5vIGRvdHNcbiAgaWYgKCAhdGhpcy5kb3RzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5zZWxlY3RlZERvdCA9IHRoaXMuZG90c1sgdGhpcy5wYXJlbnQuc2VsZWN0ZWRJbmRleCBdO1xuICB0aGlzLnNlbGVjdGVkRG90LmNsYXNzTmFtZSA9ICdkb3QgaXMtc2VsZWN0ZWQnO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAvLyBvbmx5IGNhcmUgYWJvdXQgZG90IGNsaWNrc1xuICBpZiAoIHRhcmdldC5ub2RlTmFtZSAhPSAnTEknICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucGFyZW50LnVpQ2hhbmdlKCk7XG4gIHZhciBpbmRleCA9IHV0aWxzLmluZGV4T2YoIHRoaXMuZG90cywgdGFyZ2V0ICk7XG4gIHRoaXMucGFyZW50LnNlbGVjdCggaW5kZXggKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xufTtcblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwYWdlRG90czogdHJ1ZVxufSk7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZVBhZ2VEb3RzJyk7XG5cbkZsaWNraXR5LnByb3RvdHlwZS5fY3JlYXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhZ2VEb3RzICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnBhZ2VEb3RzID0gbmV3IFBhZ2VEb3RzKCB0aGlzICk7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnY2VsbEFkZGVkUmVtb3ZlZCcsIHRoaXMub25DZWxsQWRkZWRSZW1vdmVkUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQYWdlRG90cyApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5hY3RpdmF0ZSgpO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLm9uQ2VsbEFkZGVkUmVtb3ZlZFBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuc2V0RG90cygpO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmRlYWN0aXZhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLmRlYWN0aXZhdGUoKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0pKTtcblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmbGlja2l0eS9qcy9wbGF5ZXInLFtcbiAgICAgICdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxuICAgICAgJy4vZmxpY2tpdHknXG4gICAgXSwgZnVuY3Rpb24oIEV2ZW50RW1pdHRlciwgZXZlbnRpZSwgRmxpY2tpdHkgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggRXZlbnRFbWl0dGVyLCBldmVudGllLCBGbGlja2l0eSApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyksXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXG4gICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdy5FdmVudEVtaXR0ZXIsXG4gICAgICB3aW5kb3cuZXZlbnRpZSxcbiAgICAgIHdpbmRvdy5GbGlja2l0eVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUsIEZsaWNraXR5ICkge1xuXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGFnZSBWaXNpYmlsaXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9HdWlkZS9Vc2VyX2V4cGVyaWVuY2UvVXNpbmdfdGhlX1BhZ2VfVmlzaWJpbGl0eV9BUElcblxudmFyIGhpZGRlblByb3BlcnR5LCB2aXNpYmlsaXR5RXZlbnQ7XG5pZiAoICdoaWRkZW4nIGluIGRvY3VtZW50ICkge1xuICBoaWRkZW5Qcm9wZXJ0eSA9ICdoaWRkZW4nO1xuICB2aXNpYmlsaXR5RXZlbnQgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG59IGVsc2UgaWYgKCAnd2Via2l0SGlkZGVuJyBpbiBkb2N1bWVudCApIHtcbiAgaGlkZGVuUHJvcGVydHkgPSAnd2Via2l0SGlkZGVuJztcbiAgdmlzaWJpbGl0eUV2ZW50ID0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQbGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUGxheWVyKCBwYXJlbnQgKSB7XG4gIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAvLyB2aXNpYmlsaXR5IGNoYW5nZSBldmVudCBoYW5kbGVyXG4gIGlmICggdmlzaWJpbGl0eUV2ZW50ICkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLnZpc2liaWxpdHlDaGFuZ2UoKTtcbiAgICB9O1xuICB9XG59XG5cblBsYXllci5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbi8vIHN0YXJ0IHBsYXlcblBsYXllci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gIC8vIHBsYXlpbmcga2lsbHMgcGF1c2VzXG4gIGRlbGV0ZSB0aGlzLmlzUGF1c2VkO1xuICAvLyBsaXN0ZW4gdG8gdmlzaWJpbGl0eSBjaGFuZ2VcbiAgaWYgKCB2aXNpYmlsaXR5RXZlbnQgKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdmlzaWJpbGl0eUV2ZW50LCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UgKTtcbiAgfVxuICAvLyBzdGFydCB0aWNraW5nXG4gIHRoaXMudGljaygpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCB0aWNrIGlmIHBhdXNlZCBvciBub3QgcGxheWluZ1xuICBpZiAoICF0aGlzLmlzUGxheWluZyB8fCB0aGlzLmlzUGF1c2VkICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBrZWVwIHRyYWNrIG9mIHdoZW4gLnRpY2soKVxuICB0aGlzLnRpY2tUaW1lID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSB0aGlzLnBhcmVudC5vcHRpb25zLmF1dG9QbGF5O1xuICAvLyBkZWZhdWx0IHRvIDMgc2Vjb25kc1xuICB0aW1lID0gdHlwZW9mIHRpbWUgPT0gJ251bWJlcicgPyB0aW1lIDogMzAwMDtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgX3RoaXMucGFyZW50Lm5leHQoIHRydWUgKTtcbiAgICBfdGhpcy50aWNrKCk7XG4gIH0sIHRpbWUgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICAvLyBzdG9wcGluZyBraWxscyBwYXVzZXNcbiAgZGVsZXRlIHRoaXMuaXNQYXVzZWQ7XG4gIHRoaXMuY2xlYXIoKTtcbiAgLy8gcmVtb3ZlIHZpc2liaWxpdHkgY2hhbmdlIGV2ZW50XG4gIGlmICggdmlzaWJpbGl0eUV2ZW50ICkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHZpc2liaWxpdHlFdmVudCwgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlICk7XG4gIH1cbn07XG5cblBsYXllci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVvdXQgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzUGxheWluZyApIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cbn07XG5cblBsYXllci5wcm90b3R5cGUudW5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZS1zdGFydCBwbGF5IGlmIGluIHVucGF1c2VkIHN0YXRlXG4gIGlmICggdGhpcy5pc1BhdXNlZCApIHtcbiAgICB0aGlzLnBsYXkoKTtcbiAgfVxufTtcblxuLy8gcGF1c2UgaWYgcGFnZSB2aXNpYmlsaXR5IGlzIGhpZGRlbiwgdW5wYXVzZSBpZiB2aXNpYmxlXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlzSGlkZGVuID0gZG9jdW1lbnRbIGhpZGRlblByb3BlcnR5IF07XG4gIHRoaXNbIGlzSGlkZGVuID8gJ3BhdXNlJyA6ICd1bnBhdXNlJyBdKCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyB1dGlscy5leHRlbmQoIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4vLyAgIGF1dG9QbGF5OiBmYWxzZVxuLy8gfSk7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZVBsYXllcicpO1xuXG5GbGlja2l0eS5wcm90b3R5cGUuX2NyZWF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoIHRoaXMgKTtcblxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGxheWVyICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQbGF5ZXIgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5hY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYXV0b1BsYXkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgZXZlbnRpZS5iaW5kKCB0aGlzLmVsZW1lbnQsICdtb3VzZWVudGVyJywgdGhpcyApO1xuICB0aGlzLmlzTW91c2VlbnRlckJvdW5kID0gdHJ1ZTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5zdG9wUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5kZWFjdGl2YXRlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbiAgaWYgKCB0aGlzLmlzTW91c2VlbnRlckJvdW5kICkge1xuICAgIGV2ZW50aWUudW5iaW5kKCB0aGlzLmVsZW1lbnQsICdtb3VzZWVudGVyJywgdGhpcyApO1xuICAgIGRlbGV0ZSB0aGlzLmlzTW91c2VlbnRlckJvdW5kO1xuICB9XG59O1xuXG4vLyAtLS0tLSBtb3VzZWVudGVyL2xlYXZlIC0tLS0tIC8vXG5cbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxuRmxpY2tpdHkucHJvdG90eXBlLm9ubW91c2VlbnRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICBldmVudGllLmJpbmQoIHRoaXMuZWxlbWVudCwgJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyByZXN1bWUgYXV0by1wbGF5IG9uIGhvdmVyIG9mZlxuRmxpY2tpdHkucHJvdG90eXBlLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci51bnBhdXNlKCk7XG4gIGV2ZW50aWUudW5iaW5kKCB0aGlzLmVsZW1lbnQsICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBsYXllciA9IFBsYXllcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvYWRkLXJlbW92ZS1jZWxsJyxbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKSB7XG5cblxuXG4vLyBhcHBlbmQgY2VsbHMgdG8gYSBkb2N1bWVudCBmcmFnbWVudFxuZnVuY3Rpb24gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKSB7XG4gIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGNlbGwgPSBjZWxsc1tpXTtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggY2VsbC5lbGVtZW50ICk7XG4gIH1cbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhZGQvcmVtb3ZlIGNlbGwgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogSW5zZXJ0LCBwcmVwZW5kLCBvciBhcHBlbmQgY2VsbHNcbiAqIEBwYXJhbSB7RWxlbWVudCwgQXJyYXksIE5vZGVMaXN0fSBlbGVtc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleFxuICovXG5GbGlja2l0eS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oIGVsZW1zLCBpbmRleCApIHtcbiAgdmFyIGNlbGxzID0gdGhpcy5fbWFrZUNlbGxzKCBlbGVtcyApO1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XG4gIC8vIGRlZmF1bHQgdG8gYXBwZW5kXG4gIGluZGV4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IGxlbiA6IGluZGV4O1xuICAvLyBhZGQgY2VsbHMgd2l0aCBkb2N1bWVudCBmcmFnbWVudFxuICB2YXIgZnJhZ21lbnQgPSBnZXRDZWxsc0ZyYWdtZW50KCBjZWxscyApO1xuICAvLyBhcHBlbmQgdG8gc2xpZGVyXG4gIHZhciBpc0FwcGVuZCA9IGluZGV4ID09IGxlbjtcbiAgaWYgKCBpc0FwcGVuZCApIHtcbiAgICB0aGlzLnNsaWRlci5hcHBlbmRDaGlsZCggZnJhZ21lbnQgKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zZXJ0Q2VsbEVsZW1lbnQgPSB0aGlzLmNlbGxzWyBpbmRleCBdLmVsZW1lbnQ7XG4gICAgdGhpcy5zbGlkZXIuaW5zZXJ0QmVmb3JlKCBmcmFnbWVudCwgaW5zZXJ0Q2VsbEVsZW1lbnQgKTtcbiAgfVxuICAvLyBhZGQgdG8gdGhpcy5jZWxsc1xuICBpZiAoIGluZGV4ID09PSAwICkge1xuICAgIC8vIHByZXBlbmQsIGFkZCB0byBzdGFydFxuICAgIHRoaXMuY2VsbHMgPSBjZWxscy5jb25jYXQoIHRoaXMuY2VsbHMgKTtcbiAgfSBlbHNlIGlmICggaXNBcHBlbmQgKSB7XG4gICAgLy8gYXBwZW5kLCBhZGQgdG8gZW5kXG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApO1xuICB9IGVsc2Uge1xuICAgIC8vIGluc2VydCBpbiB0aGlzLmNlbGxzXG4gICAgdmFyIGVuZENlbGxzID0gdGhpcy5jZWxscy5zcGxpY2UoIGluZGV4LCBsZW4gLSBpbmRleCApO1xuICAgIHRoaXMuY2VsbHMgPSB0aGlzLmNlbGxzLmNvbmNhdCggY2VsbHMgKS5jb25jYXQoIGVuZENlbGxzICk7XG4gIH1cblxuICB0aGlzLl9zaXplQ2VsbHMoIGNlbGxzICk7XG5cbiAgdmFyIHNlbGVjdGVkSW5kZXhEZWx0YSA9IGluZGV4ID4gdGhpcy5zZWxlY3RlZEluZGV4ID8gMCA6IGNlbGxzLmxlbmd0aDtcbiAgdGhpcy5fY2VsbEFkZGVkUmVtb3ZlZCggaW5kZXgsIHNlbGVjdGVkSW5kZXhEZWx0YSApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdGhpcy5pbnNlcnQoIGVsZW1zLCB0aGlzLmNlbGxzLmxlbmd0aCApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgMCApO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgY2VsbHNcbiAqIEBwYXJhbSB7RWxlbWVudCwgQXJyYXksIE5vZGVMaXN0fSBlbGVtc1xuICovXG5GbGlja2l0eS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgY2VsbHMgPSB0aGlzLmdldENlbGxzKCBlbGVtcyApO1xuICB2YXIgc2VsZWN0ZWRJbmRleERlbHRhID0gMDtcbiAgdmFyIGksIGxlbiwgY2VsbDtcbiAgLy8gY2FsY3VsYXRlIHNlbGVjdGVkSW5kZXhEZWx0YSwgZWFzaWVyIGlmIGRvbmUgaW4gc2VwZXJhdGUgbG9vcFxuICBmb3IgKCBpPTAsIGxlbiA9IGNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIGNlbGwgPSBjZWxsc1tpXTtcbiAgICB2YXIgd2FzQmVmb3JlID0gdXRpbHMuaW5kZXhPZiggdGhpcy5jZWxscywgY2VsbCApIDwgdGhpcy5zZWxlY3RlZEluZGV4O1xuICAgIHNlbGVjdGVkSW5kZXhEZWx0YSAtPSB3YXNCZWZvcmUgPyAxIDogMDtcbiAgfVxuXG4gIGZvciAoIGk9MCwgbGVuID0gY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgY2VsbCA9IGNlbGxzW2ldO1xuICAgIGNlbGwucmVtb3ZlKCk7XG4gICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5jZWxscywgY2VsbCApO1xuICB9XG5cbiAgaWYgKCBjZWxscy5sZW5ndGggKSB7XG4gICAgLy8gdXBkYXRlIHN0dWZmXG4gICAgdGhpcy5fY2VsbEFkZGVkUmVtb3ZlZCggMCwgc2VsZWN0ZWRJbmRleERlbHRhICk7XG4gIH1cbn07XG5cbi8vIHVwZGF0ZXMgd2hlbiBjZWxscyBhcmUgYWRkZWQgb3IgcmVtb3ZlZFxuRmxpY2tpdHkucHJvdG90eXBlLl9jZWxsQWRkZWRSZW1vdmVkID0gZnVuY3Rpb24oIGNoYW5nZWRDZWxsSW5kZXgsIHNlbGVjdGVkSW5kZXhEZWx0YSApIHtcbiAgc2VsZWN0ZWRJbmRleERlbHRhID0gc2VsZWN0ZWRJbmRleERlbHRhIHx8IDA7XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCArPSBzZWxlY3RlZEluZGV4RGVsdGE7XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWF4KCAwLCBNYXRoLm1pbiggdGhpcy5jZWxscy5sZW5ndGggLSAxLCB0aGlzLnNlbGVjdGVkSW5kZXggKSApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnY2VsbEFkZGVkUmVtb3ZlZCcsIFsgY2hhbmdlZENlbGxJbmRleCwgc2VsZWN0ZWRJbmRleERlbHRhIF0gKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBjaGFuZ2VkQ2VsbEluZGV4LCB0cnVlICk7XG59O1xuXG4vKipcbiAqIGxvZ2ljIHRvIGJlIHJ1biBhZnRlciBhIGNlbGwncyBzaXplIGNoYW5nZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNlbGwncyBlbGVtZW50XG4gKi9cbkZsaWNraXR5LnByb3RvdHlwZS5jZWxsU2l6ZUNoYW5nZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICBpZiAoICFjZWxsICkge1xuICAgIHJldHVybjtcbiAgfVxuICBjZWxsLmdldFNpemUoKTtcblxuICB2YXIgaW5kZXggPSB1dGlscy5pbmRleE9mKCB0aGlzLmNlbGxzLCBjZWxsICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXggKTtcbn07XG5cbi8qKlxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gY2hhbmdlZENlbGxJbmRleCAtIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGNlbGwsIG9wdGlvbmFsXG4gKi9cbkZsaWNraXR5LnByb3RvdHlwZS5jZWxsQ2hhbmdlID0gZnVuY3Rpb24oIGNoYW5nZWRDZWxsSW5kZXgsIGlzUG9zaXRpb25pbmdTbGlkZXIgKSB7XG4gIHZhciBwcmV2U2xpZGVhYmxlV2lkdGggPSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCBjaGFuZ2VkQ2VsbEluZGV4ICk7XG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgLy8gcG9zaXRpb24gc2xpZGVyXG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XG4gICAgLy8gc2hpZnQgeCBieSBjaGFuZ2UgaW4gc2xpZGVhYmxlV2lkdGhcbiAgICAvLyBUT0RPIGZpeCBwb3NpdGlvbiBzaGlmdHMgd2hlbiBwcmVwZW5kaW5nIHcvIGZyZWVTY3JvbGxcbiAgICB0aGlzLnggKz0gcHJldlNsaWRlYWJsZVdpZHRoIC0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZG8gbm90IHBvc2l0aW9uIHNsaWRlciBhZnRlciBsYXp5IGxvYWRcbiAgICBpZiAoIGlzUG9zaXRpb25pbmdTbGlkZXIgKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICAgIH1cbiAgICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0pKTtcblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmbGlja2l0eS9qcy9sYXp5bG9hZCcsW1xuICAgICAgJ2NsYXNzaWUvY2xhc3NpZScsXG4gICAgICAnZXZlbnRpZS9ldmVudGllJyxcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcbiAgICBdLCBmdW5jdGlvbiggY2xhc3NpZSwgZXZlbnRpZSwgRmxpY2tpdHksIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgY2xhc3NpZSwgZXZlbnRpZSwgRmxpY2tpdHksIHV0aWxzICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tY2xhc3NpZScpLFxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmNsYXNzaWUsXG4gICAgICB3aW5kb3cuZXZlbnRpZSxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBjbGFzc2llLCBldmVudGllLCBGbGlja2l0eSwgdXRpbHMgKSB7XG5cblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlTGF6eWxvYWQnKTtcblxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVMYXp5bG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnY2VsbFNlbGVjdCcsIHRoaXMubGF6eUxvYWQgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGF6eUxvYWQgPSB0aGlzLm9wdGlvbnMubGF6eUxvYWQ7XG4gIGlmICggIWxhenlMb2FkICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBnZXQgYWRqYWNlbnQgY2VsbHMsIHVzZSBsYXp5TG9hZCBvcHRpb24gZm9yIGFkamFjZW50IGNvdW50XG4gIHZhciBhZGpDb3VudCA9IHR5cGVvZiBsYXp5TG9hZCA9PSAnbnVtYmVyJyA/IGxhenlMb2FkIDogMDtcbiAgdmFyIGNlbGxFbGVtcyA9IHRoaXMuZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHMoIGFkakNvdW50ICk7XG4gIC8vIGdldCBsYXp5IGltYWdlcyBpbiB0aG9zZSBjZWxsc1xuICB2YXIgbGF6eUltYWdlcyA9IFtdO1xuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBjZWxsRWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGNlbGxFbGVtID0gY2VsbEVsZW1zW2ldO1xuICAgIHZhciBsYXp5Q2VsbEltYWdlcyA9IGdldENlbGxMYXp5SW1hZ2VzKCBjZWxsRWxlbSApO1xuICAgIGxhenlJbWFnZXMgPSBsYXp5SW1hZ2VzLmNvbmNhdCggbGF6eUNlbGxJbWFnZXMgKTtcbiAgfVxuICAvLyBsb2FkIGxhenkgaW1hZ2VzXG4gIGZvciAoIGk9MCwgbGVuID0gbGF6eUltYWdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgaW1nID0gbGF6eUltYWdlc1tpXTtcbiAgICBuZXcgTGF6eUxvYWRlciggaW1nLCB0aGlzICk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldENlbGxMYXp5SW1hZ2VzKCBjZWxsRWxlbSApIHtcbiAgLy8gY2hlY2sgaWYgY2VsbCBlbGVtZW50IGlzIGxhenkgaW1hZ2VcbiAgaWYgKCBjZWxsRWxlbS5ub2RlTmFtZSA9PSAnSU1HJyAmJlxuICAgIGNlbGxFbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpICkge1xuICAgIHJldHVybiBbIGNlbGxFbGVtIF07XG4gIH1cbiAgLy8gc2VsZWN0IGxhenkgaW1hZ2VzIGluIGNlbGxcbiAgdmFyIGltZ3MgPSBjZWxsRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWdbZGF0YS1mbGlja2l0eS1sYXp5bG9hZF0nKTtcbiAgcmV0dXJuIHV0aWxzLm1ha2VBcnJheSggaW1ncyApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMYXp5TG9hZGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY2xhc3MgdG8gaGFuZGxlIGxvYWRpbmcgaW1hZ2VzXG4gKi9cbmZ1bmN0aW9uIExhenlMb2FkZXIoIGltZywgZmxpY2tpdHkgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xuICB0aGlzLmZsaWNraXR5ID0gZmxpY2tpdHk7XG4gIHRoaXMubG9hZCgpO1xufVxuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oKSB7XG4gIGV2ZW50aWUuYmluZCggdGhpcy5pbWcsICdsb2FkJywgdGhpcyApO1xuICBldmVudGllLmJpbmQoIHRoaXMuaW1nLCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGxvYWQgaW1hZ2VcbiAgdGhpcy5pbWcuc3JjID0gdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkJyk7XG4gIC8vIHJlbW92ZSBhdHRyXG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenlsb2FkZWQnICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29tcGxldGUoIGV2ZW50LCAnZmxpY2tpdHktbGF6eWVycm9yJyApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiggZXZlbnQsIGNsYXNzTmFtZSApIHtcbiAgLy8gdW5iaW5kIGV2ZW50c1xuICBldmVudGllLnVuYmluZCggdGhpcy5pbWcsICdsb2FkJywgdGhpcyApO1xuICBldmVudGllLnVuYmluZCggdGhpcy5pbWcsICdlcnJvcicsIHRoaXMgKTtcblxuICB2YXIgY2VsbCA9IHRoaXMuZmxpY2tpdHkuZ2V0UGFyZW50Q2VsbCggdGhpcy5pbWcgKTtcbiAgdmFyIGNlbGxFbGVtID0gY2VsbCAmJiBjZWxsLmVsZW1lbnQ7XG4gIHRoaXMuZmxpY2tpdHkuY2VsbFNpemVDaGFuZ2UoIGNlbGxFbGVtICk7XG5cbiAgY2xhc3NpZS5hZGQoIHRoaXMuaW1nLCBjbGFzc05hbWUgKTtcbiAgdGhpcy5mbGlja2l0eS5kaXNwYXRjaEV2ZW50KCAnbGF6eUxvYWQnLCBldmVudCwgY2VsbEVsZW0gKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5MYXp5TG9hZGVyID0gTGF6eUxvYWRlcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG5cbi8qKlxuICogRmxpY2tpdHkgaW5kZXhcbiAqIHVzZWQgZm9yIEFNRCBhbmQgQ29tbW9uSlMgZXhwb3J0c1xuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvaW5kZXgnLFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICcuL2RyYWcnLFxuICAgICAgJy4vcHJldi1uZXh0LWJ1dHRvbicsXG4gICAgICAnLi9wYWdlLWRvdHMnLFxuICAgICAgJy4vcGxheWVyJyxcbiAgICAgICcuL2FkZC1yZW1vdmUtY2VsbCcsXG4gICAgICAnLi9sYXp5bG9hZCdcbiAgICBdLCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnLi9kcmFnJyksXG4gICAgICByZXF1aXJlKCcuL3ByZXYtbmV4dC1idXR0b24nKSxcbiAgICAgIHJlcXVpcmUoJy4vcGFnZS1kb3RzJyksXG4gICAgICByZXF1aXJlKCcuL3BsYXllcicpLFxuICAgICAgcmVxdWlyZSgnLi9hZGQtcmVtb3ZlLWNlbGwnKSxcbiAgICAgIHJlcXVpcmUoJy4vbGF6eWxvYWQnKVxuICAgICk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHkgKSB7XG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UqL1xuICByZXR1cm4gRmxpY2tpdHk7XG59KTtcblxuLyohXG4gKiBGbGlja2l0eSBhc05hdkZvciB2MS4wLjJcbiAqIGVuYWJsZSBhc05hdkZvciBmb3IgRmxpY2tpdHlcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXG4gIFxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2ZsaWNraXR5LWFzLW5hdi1mb3IvYXMtbmF2LWZvcicsW1xuICAgICAgJ2NsYXNzaWUvY2xhc3NpZScsXG4gICAgICAnZmxpY2tpdHkvanMvaW5kZXgnLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xuICAgIF0sIGZ1bmN0aW9uKCBjbGFzc2llLCBGbGlja2l0eSwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBjbGFzc2llLCBGbGlja2l0eSwgdXRpbHMgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1jbGFzc2llJyksXG4gICAgICByZXF1aXJlKCdmbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmNsYXNzaWUsXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgY2xhc3NpZSwgRmxpY2tpdHksIHV0aWxzICkge1xuXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYXNOYXZGb3IgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIEZsaWNraXR5LmRlZmF1bHRzLmFzTmF2Rm9yID0gbnVsbDtcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlQXNOYXZGb3InKTtcblxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlQXNOYXZGb3IgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVBc05hdkZvciApO1xuICB0aGlzLm9uKCAnZGVzdHJveScsIHRoaXMuZGVzdHJveUFzTmF2Rm9yICk7XG5cbiAgdmFyIGFzTmF2Rm9yT3B0aW9uID0gdGhpcy5vcHRpb25zLmFzTmF2Rm9yO1xuICBpZiAoICFhc05hdkZvck9wdGlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gSEFDSyBkbyBhc3luYywgZ2l2ZSB0aW1lIGZvciBvdGhlciBmbGlja2l0eSB0byBiZSBpbml0YWxpemVkXG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHNldFRpbWVvdXQoIGZ1bmN0aW9uIGluaXROYXZDb21wYW5pb24oKSB7XG4gICAgX3RoaXMuc2V0TmF2Q29tcGFuaW9uKCBhc05hdkZvck9wdGlvbiApO1xuICB9KTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5zZXROYXZDb21wYW5pb24gPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xuICB2YXIgY29tcGFuaW9uID0gRmxpY2tpdHkuZGF0YSggZWxlbSApO1xuICAvLyBzdG9wIGlmIG5vIGNvbXBhbmlvbiBvciBjb21wYW5pb24gaXMgc2VsZlxuICBpZiAoICFjb21wYW5pb24gfHwgY29tcGFuaW9uID09IHRoaXMgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5uYXZDb21wYW5pb24gPSBjb21wYW5pb247XG4gIC8vIGNvbXBhbmlvbiBzZWxlY3RcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLm5hdkNvbXBhbmlvblNlbGVjdCgpO1xuICB9O1xuICBjb21wYW5pb24ub24oICdjZWxsU2VsZWN0JywgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCApO1xuICAvLyBjbGlja1xuICB0aGlzLm9uKCAnc3RhdGljQ2xpY2snLCB0aGlzLm9uTmF2U3RhdGljQ2xpY2sgKTtcblxuICB0aGlzLm5hdkNvbXBhbmlvblNlbGVjdCgpO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLm5hdkNvbXBhbmlvblNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm5hdkNvbXBhbmlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5uYXZDb21wYW5pb24uc2VsZWN0ZWRJbmRleDtcbiAgdGhpcy5zZWxlY3QoIGluZGV4ICk7XG4gIC8vIHNldCBuYXYgc2VsZWN0ZWQgY2xhc3NcbiAgdGhpcy5yZW1vdmVOYXZTZWxlY3RlZEVsZW1lbnQoKTtcbiAgLy8gc3RvcCBpZiBjb21wYW5pb24gaGFzIG1vcmUgY2VsbHMgdGhhbiB0aGlzIG9uZVxuICBpZiAoIHRoaXMuc2VsZWN0ZWRJbmRleCAhPSBpbmRleCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnQgPSB0aGlzLmNlbGxzWyBpbmRleCBdLmVsZW1lbnQ7XG4gIGNsYXNzaWUuYWRkKCB0aGlzLm5hdlNlbGVjdGVkRWxlbWVudCwgJ2lzLW5hdi1zZWxlY3RlZCcgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5hY3RpdmF0ZUFzTmF2Rm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMubmF2Q29tcGFuaW9uU2VsZWN0KCk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUucmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMubmF2U2VsZWN0ZWRFbGVtZW50ICkge1xuICAgIHJldHVybjtcbiAgfVxuICBjbGFzc2llLnJlbW92ZSggdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnQsICdpcy1uYXYtc2VsZWN0ZWQnICk7XG4gIGRlbGV0ZSB0aGlzLm5hdlNlbGVjdGVkRWxlbWVudDtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5vbk5hdlN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBjZWxsRWxlbWVudCwgY2VsbEluZGV4ICkge1xuICBpZiAoIHR5cGVvZiBjZWxsSW5kZXggPT0gJ251bWJlcicgKSB7XG4gICAgdGhpcy5uYXZDb21wYW5pb24uc2VsZWN0KCBjZWxsSW5kZXggKTtcbiAgfVxufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmRlYWN0aXZhdGVBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudCgpO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmRlc3Ryb3lBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm5hdkNvbXBhbmlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5uYXZDb21wYW5pb24ub2ZmKCAnY2VsbFNlbGVjdCcsIHRoaXMub25OYXZDb21wYW5pb25TZWxlY3QgKTtcbiAgdGhpcy5vZmYoICdzdGF0aWNDbGljaycsIHRoaXMub25OYXZTdGF0aWNDbGljayApO1xuICBkZWxldGUgdGhpcy5uYXZDb21wYW5pb247XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG5cbi8qIVxuICogaW1hZ2VzTG9hZGVkIHYzLjEuOFxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkgeyBcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkJyxbXG4gICAgICAnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsXG4gICAgICAnZXZlbnRpZS9ldmVudGllJ1xuICAgIF0sIGZ1bmN0aW9uKCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnd29sZnk4Ny1ldmVudGVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2V2ZW50aWUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdmVudEVtaXR0ZXIsXG4gICAgICB3aW5kb3cuZXZlbnRpZVxuICAgICk7XG4gIH1cblxufSkoIHdpbmRvdyxcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIGZhY3RvcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUgKSB7XG5cblxuXG52YXIgJCA9IHdpbmRvdy5qUXVlcnk7XG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xudmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZXh0ZW5kIG9iamVjdHNcbmZ1bmN0aW9uIGV4dGVuZCggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbnZhciBvYmpUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5mdW5jdGlvbiBpc0FycmF5KCBvYmogKSB7XG4gIHJldHVybiBvYmpUb1N0cmluZy5jYWxsKCBvYmogKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbmZ1bmN0aW9uIG1ha2VBcnJheSggb2JqICkge1xuICB2YXIgYXJ5ID0gW107XG4gIGlmICggaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgYXJ5ID0gb2JqO1xuICB9IGVsc2UgaWYgKCB0eXBlb2Ygb2JqLmxlbmd0aCA9PT0gJ251bWJlcicgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IG9iai5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gICAgYXJ5LnB1c2goIG9iaiApO1xuICB9XG4gIHJldHVybiBhcnk7XG59XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW1hZ2VzTG9hZGVkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmd9IGVsZW1cbiAgICogQHBhcmFtIHtPYmplY3Qgb3IgRnVuY3Rpb259IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICovXG4gIGZ1bmN0aW9uIEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKSB7XG4gICAgLy8gY29lcmNlIEltYWdlc0xvYWRlZCgpIHdpdGhvdXQgbmV3LCB0byBiZSBuZXcgSW1hZ2VzTG9hZGVkKClcbiAgICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICAgIHJldHVybiBuZXcgSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zICk7XG4gICAgfVxuICAgIC8vIHVzZSBlbGVtIGFzIHNlbGVjdG9yIHN0cmluZ1xuICAgIGlmICggdHlwZW9mIGVsZW0gPT09ICdzdHJpbmcnICkge1xuICAgICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW0gKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBlbGVtICk7XG4gICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG5cbiAgICBpZiAoIHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nICkge1xuICAgICAgb25BbHdheXMgPSBvcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHRlbmQoIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICAgIH1cblxuICAgIGlmICggb25BbHdheXMgKSB7XG4gICAgICB0aGlzLm9uKCAnYWx3YXlzJywgb25BbHdheXMgKTtcbiAgICB9XG5cbiAgICB0aGlzLmdldEltYWdlcygpO1xuXG4gICAgaWYgKCAkICkge1xuICAgICAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgICAgIHRoaXMuanFEZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG4gICAgfVxuXG4gICAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLmNoZWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEltYWdlc0xvYWRlZC5wcm90b3R5cGUub3B0aW9ucyA9IHt9O1xuXG4gIEltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbWFnZXMgPSBbXTtcblxuICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhbiBpdGVtIHNlbGVjdG9yXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIHZhciBlbGVtID0gdGhpcy5lbGVtZW50c1tpXTtcbiAgICAgIC8vIGZpbHRlciBzaWJsaW5nc1xuICAgICAgaWYgKCBlbGVtLm5vZGVOYW1lID09PSAnSU1HJyApIHtcbiAgICAgICAgdGhpcy5hZGRJbWFnZSggZWxlbSApO1xuICAgICAgfVxuICAgICAgLy8gZmluZCBjaGlsZHJlblxuICAgICAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgICAgIHZhciBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG4gICAgICBpZiAoICFub2RlVHlwZSB8fCAhKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gICAgICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICAgICAgZm9yICggdmFyIGo9MCwgakxlbiA9IGNoaWxkRWxlbXMubGVuZ3RoOyBqIDwgakxlbjsgaisrICkge1xuICAgICAgICB2YXIgaW1nID0gY2hpbGRFbGVtc1tqXTtcbiAgICAgICAgdGhpcy5hZGRJbWFnZSggaW1nICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAgICovXG4gIEltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkSW1hZ2UgPSBmdW5jdGlvbiggaW1nICkge1xuICAgIHZhciBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcbiAgfTtcblxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgY2hlY2tlZENvdW50ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5pbWFnZXMubGVuZ3RoO1xuICAgIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gICAgLy8gY29tcGxldGUgaWYgbm8gaW1hZ2VzXG4gICAgaWYgKCAhbGVuZ3RoICkge1xuICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ29uZmlybSggaW1hZ2UsIG1lc3NhZ2UgKSB7XG4gICAgICBpZiAoIF90aGlzLm9wdGlvbnMuZGVidWcgJiYgaGFzQ29uc29sZSApIHtcbiAgICAgICAgY29uc29sZS5sb2coICdjb25maXJtJywgaW1hZ2UsIG1lc3NhZ2UgKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvZ3Jlc3MoIGltYWdlICk7XG4gICAgICBjaGVja2VkQ291bnQrKztcbiAgICAgIGlmICggY2hlY2tlZENvdW50ID09PSBsZW5ndGggKSB7XG4gICAgICAgIF90aGlzLmNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gYmluZCBvbmNlXG4gICAgfVxuXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIGxvYWRpbmdJbWFnZSA9IHRoaXMuaW1hZ2VzW2ldO1xuICAgICAgbG9hZGluZ0ltYWdlLm9uKCAnY29uZmlybScsIG9uQ29uZmlybSApO1xuICAgICAgbG9hZGluZ0ltYWdlLmNoZWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIEltYWdlc0xvYWRlZC5wcm90b3R5cGUucHJvZ3Jlc3MgPSBmdW5jdGlvbiggaW1hZ2UgKSB7XG4gICAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gICAgLy8gSEFDSyAtIENocm9tZSB0cmlnZ2VycyBldmVudCBiZWZvcmUgb2JqZWN0IHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkLiAjODNcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMuZW1pdCggJ3Byb2dyZXNzJywgX3RoaXMsIGltYWdlICk7XG4gICAgICBpZiAoIF90aGlzLmpxRGVmZXJyZWQgJiYgX3RoaXMuanFEZWZlcnJlZC5ub3RpZnkgKSB7XG4gICAgICAgIF90aGlzLmpxRGVmZXJyZWQubm90aWZ5KCBfdGhpcywgaW1hZ2UgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV2ZW50TmFtZSA9IHRoaXMuaGFzQW55QnJva2VuID8gJ2ZhaWwnIDogJ2RvbmUnO1xuICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvLyBIQUNLIC0gYW5vdGhlciBzZXRUaW1lb3V0IHNvIHRoYXQgY29uZmlybSBoYXBwZW5zIGFmdGVyIHByb2dyZXNzXG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5lbWl0KCBldmVudE5hbWUsIF90aGlzICk7XG4gICAgICBfdGhpcy5lbWl0KCAnYWx3YXlzJywgX3RoaXMgKTtcbiAgICAgIGlmICggX3RoaXMuanFEZWZlcnJlZCApIHtcbiAgICAgICAgdmFyIGpxTWV0aG9kID0gX3RoaXMuaGFzQW55QnJva2VuID8gJ3JlamVjdCcgOiAncmVzb2x2ZSc7XG4gICAgICAgIF90aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIF90aGlzICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0ganF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgaWYgKCAkICkge1xuICAgICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IEltYWdlc0xvYWRlZCggdGhpcywgb3B0aW9ucywgY2FsbGJhY2sgKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQodGhpcykgKTtcbiAgICB9O1xuICB9XG5cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBmdW5jdGlvbiBMb2FkaW5nSW1hZ2UoIGltZyApIHtcbiAgICB0aGlzLmltZyA9IGltZztcbiAgfVxuXG4gIExvYWRpbmdJbWFnZS5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGZpcnN0IGNoZWNrIGNhY2hlZCBhbnkgcHJldmlvdXMgaW1hZ2VzIHRoYXQgaGF2ZSBzYW1lIHNyY1xuICAgIHZhciByZXNvdXJjZSA9IGNhY2hlWyB0aGlzLmltZy5zcmMgXSB8fCBuZXcgUmVzb3VyY2UoIHRoaXMuaW1nLnNyYyApO1xuICAgIGlmICggcmVzb3VyY2UuaXNDb25maXJtZWQgKSB7XG4gICAgICB0aGlzLmNvbmZpcm0oIHJlc291cmNlLmlzTG9hZGVkLCAnY2FjaGVkIHdhcyBjb25maXJtZWQnICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgY29tcGxldGUgaXMgdHJ1ZSBhbmQgYnJvd3NlciBzdXBwb3J0cyBuYXR1cmFsIHNpemVzLFxuICAgIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICAgIGlmICggdGhpcy5pbWcuY29tcGxldGUgJiYgdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmVzb3VyY2Uub24oICdjb25maXJtJywgZnVuY3Rpb24oIHJlc3JjLCBtZXNzYWdlICkge1xuICAgICAgX3RoaXMuY29uZmlybSggcmVzcmMuaXNMb2FkZWQsIG1lc3NhZ2UgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmVzb3VyY2UuY2hlY2soKTtcbiAgfTtcblxuICBMb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gICAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICAgIHRoaXMuZW1pdCggJ2NvbmZpcm0nLCB0aGlzLCBtZXNzYWdlICk7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUmVzb3VyY2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvLyBSZXNvdXJjZSBjaGVja3MgZWFjaCBzcmMsIG9ubHkgb25jZVxuICAvLyBzZXBhcmF0ZSBjbGFzcyBmcm9tIExvYWRpbmdJbWFnZSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4gU2VlICMxMTVcblxuICB2YXIgY2FjaGUgPSB7fTtcblxuICBmdW5jdGlvbiBSZXNvdXJjZSggc3JjICkge1xuICAgIHRoaXMuc3JjID0gc3JjO1xuICAgIC8vIGFkZCB0byBjYWNoZVxuICAgIGNhY2hlWyBzcmMgXSA9IHRoaXM7XG4gIH1cblxuICBSZXNvdXJjZS5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgUmVzb3VyY2UucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gb25seSB0cmlnZ2VyIGNoZWNraW5nIG9uY2VcbiAgICBpZiAoIHRoaXMuaXNDaGVja2VkICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnRcbiAgICB2YXIgcHJveHlJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGV2ZW50aWUuYmluZCggcHJveHlJbWFnZSwgJ2xvYWQnLCB0aGlzICk7XG4gICAgZXZlbnRpZS5iaW5kKCBwcm94eUltYWdlLCAnZXJyb3InLCB0aGlzICk7XG4gICAgcHJveHlJbWFnZS5zcmMgPSB0aGlzLnNyYztcbiAgICAvLyBzZXQgZmxhZ1xuICAgIHRoaXMuaXNDaGVja2VkID0gdHJ1ZTtcbiAgfTtcblxuICAvLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuICAvLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG4gIFJlc291cmNlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gICAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICAgIH1cbiAgfTtcblxuICBSZXNvdXJjZS5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgIHRoaXMuY29uZmlybSggdHJ1ZSwgJ29ubG9hZCcgKTtcbiAgICB0aGlzLnVuYmluZFByb3h5RXZlbnRzKCBldmVudCApO1xuICB9O1xuXG4gIFJlc291cmNlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICAgIHRoaXMudW5iaW5kUHJveHlFdmVudHMoIGV2ZW50ICk7XG4gIH07XG5cbiAgLy8gLS0tLS0gY29uZmlybSAtLS0tLSAvL1xuXG4gIFJlc291cmNlLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICAgIHRoaXMuaXNDb25maXJtZWQgPSB0cnVlO1xuICAgIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgICB0aGlzLmVtaXQoICdjb25maXJtJywgdGhpcywgbWVzc2FnZSApO1xuICB9O1xuXG4gIFJlc291cmNlLnByb3RvdHlwZS51bmJpbmRQcm94eUV2ZW50cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICBldmVudGllLnVuYmluZCggZXZlbnQudGFyZ2V0LCAnbG9hZCcsIHRoaXMgKTtcbiAgICBldmVudGllLnVuYmluZCggZXZlbnQudGFyZ2V0LCAnZXJyb3InLCB0aGlzICk7XG4gIH07XG5cbiAgLy8gLS0tLS0gIC0tLS0tIC8vXG5cbiAgcmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSk7XG5cbi8qIVxuICogRmxpY2tpdHkgaW1hZ2VzTG9hZGVkIHYxLjAuMVxuICogZW5hYmxlcyBpbWFnZXNMb2FkZWQgb3B0aW9uIGZvciBGbGlja2l0eVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXG4gIFxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2ZsaWNraXR5L2pzL2luZGV4JyxcbiAgICAgICdpbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkJ1xuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIGltYWdlc0xvYWRlZCApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2ZsaWNraXR5JyksXG4gICAgICByZXF1aXJlKCdpbWFnZXNsb2FkZWQnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgd2luZG93LmltYWdlc0xvYWRlZFxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBpbWFnZXNMb2FkZWQgKSB7XG5cblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlSW1hZ2VzTG9hZGVkJyk7XG5cbkZsaWNraXR5LnByb3RvdHlwZS5fY3JlYXRlSW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuaW1hZ2VzTG9hZGVkICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5pbWFnZXNMb2FkZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIGZ1bmN0aW9uIG9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MoIGluc3RhbmNlLCBpbWFnZSApIHtcbiAgICB2YXIgY2VsbCA9IF90aGlzLmdldFBhcmVudENlbGwoIGltYWdlLmltZyApO1xuICAgIF90aGlzLmNlbGxTaXplQ2hhbmdlKCBjZWxsICYmIGNlbGwuZWxlbWVudCApO1xuICAgIGlmICggIV90aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCApIHtcbiAgICAgIF90aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICAgIH1cbiAgfVxuICBpbWFnZXNMb2FkZWQoIHRoaXMuc2xpZGVyICkub24oICdwcm9ncmVzcycsIG9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MgKTtcbn07XG5cbnJldHVybiBGbGlja2l0eTtcblxufSkpO1xuLyohXG4gKiBJc290b3BlIFBBQ0tBR0VEIHYyLjIuMlxuICpcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuICpcbiAqIGh0dHA6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTUgTWV0YWZpenp5XG4gKi9cblxuLyoqXG4gKiBCcmlkZ2V0IG1ha2VzIGpRdWVyeSB3aWRnZXRzXG4gKiB2MS4xLjBcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdXRpbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBkZWZpbmVCcmlkZ2V0KCAkICkge1xuXG4vLyBiYWlsIGlmIG5vIGpRdWVyeVxuaWYgKCAhJCApIHtcbiAgcmV0dXJuO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhZGRPcHRpb25NZXRob2QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBhZGRzIG9wdGlvbiBtZXRob2QgLT4gJCgpLnBsdWdpbignb3B0aW9uJywgey4uLn0pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXG4gKi9cbmZ1bmN0aW9uIGFkZE9wdGlvbk1ldGhvZCggUGx1Z2luQ2xhc3MgKSB7XG4gIC8vIGRvbid0IG92ZXJ3cml0ZSBvcmlnaW5hbCBvcHRpb24gbWV0aG9kXG4gIGlmICggUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBvcHRpb24gc2V0dGVyXG4gIFBsdWdpbkNsYXNzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgICAvLyBiYWlsIG91dCBpZiBub3QgYW4gb2JqZWN0XG4gICAgaWYgKCAhJC5pc1BsYWluT2JqZWN0KCBvcHRzICkgKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHRoaXMub3B0aW9ucywgb3B0cyApO1xuICB9O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwbHVnaW4gYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbG9nZ2luZyBlcnJvcnNcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT09ICd1bmRlZmluZWQnID8gbm9vcCA6XG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcbiAgfTtcblxuLyoqXG4gKiBqUXVlcnkgcGx1Z2luIGJyaWRnZSwgYWNjZXNzIG1ldGhvZHMgbGlrZSAkZWxlbS5wbHVnaW4oJ21ldGhvZCcpXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIC0gcGx1Z2luIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFBsdWdpbkNsYXNzIC0gY29uc3RydWN0b3IgY2xhc3NcbiAqL1xuZnVuY3Rpb24gYnJpZGdlKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICkge1xuICAvLyBhZGQgdG8galF1ZXJ5IGZuIG5hbWVzcGFjZVxuICAkLmZuWyBuYW1lc3BhY2UgXSA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICAgIGlmICggdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnICkge1xuICAgICAgLy8gY2FsbCBwbHVnaW4gbWV0aG9kIHdoZW4gZmlyc3QgYXJndW1lbnQgaXMgYSBzdHJpbmdcbiAgICAgIC8vIGdldCBhcmd1bWVudHMgZm9yIG1ldGhvZFxuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcblxuICAgICAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzW2ldO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xuICAgICAgICBpZiAoICFpbnN0YW5jZSApIHtcbiAgICAgICAgICBsb2dFcnJvciggXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiICsgbmFtZXNwYWNlICsgXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IFwiICtcbiAgICAgICAgICAgIFwiYXR0ZW1wdGVkIHRvIGNhbGwgJ1wiICsgb3B0aW9ucyArIFwiJ1wiICk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KDApID09PSAnXycgKSB7XG4gICAgICAgICAgbG9nRXJyb3IoIFwibm8gc3VjaCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJyBmb3IgXCIgKyBuYW1lc3BhY2UgKyBcIiBpbnN0YW5jZVwiICk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIGFyZ3VtZW50c1xuICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xuXG4gICAgICAgIC8vIGJyZWFrIGxvb2sgYW5kIHJldHVybiBmaXJzdCB2YWx1ZSBpZiBwcm92aWRlZFxuICAgICAgICBpZiAoIHJldHVyblZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gdGhpcyBpZiBubyByZXR1cm4gdmFsdWVcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBuYW1lc3BhY2UgKTtcbiAgICAgICAgaWYgKCBpbnN0YW5jZSApIHtcbiAgICAgICAgICAvLyBhcHBseSBvcHRpb25zICYgaW5pdFxuICAgICAgICAgIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgICAgICAgIGluc3RhbmNlLl9pbml0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaW5pdGlhbGl6ZSBuZXcgaW5zdGFuY2VcbiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBQbHVnaW5DbGFzcyggdGhpcywgb3B0aW9ucyApO1xuICAgICAgICAgICQuZGF0YSggdGhpcywgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYnJpZGdldCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGNvbnZlcnRzIGEgUHJvdG90eXBpY2FsIGNsYXNzIGludG8gYSBwcm9wZXIgalF1ZXJ5IHBsdWdpblxuICogICB0aGUgY2xhc3MgbXVzdCBoYXZlIGEgLl9pbml0IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIHBsdWdpbiBuYW1lLCB1c2VkIGluICQoKS5wbHVnaW5OYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXG4gKi9cbiQuYnJpZGdldCA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICkge1xuICBhZGRPcHRpb25NZXRob2QoIFBsdWdpbkNsYXNzICk7XG4gIGJyaWRnZSggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApO1xufTtcblxucmV0dXJuICQuYnJpZGdldDtcblxufVxuXG4vLyB0cmFuc3BvcnRcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAvLyBBTURcbiAgZGVmaW5lKCAnanF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LmJyaWRnZXQnLFsgJ2pxdWVyeScgXSwgZGVmaW5lQnJpZGdldCApO1xufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICBkZWZpbmVCcmlkZ2V0KCByZXF1aXJlKCdqcXVlcnknKSApO1xufSBlbHNlIHtcbiAgLy8gZ2V0IGpxdWVyeSBmcm9tIGJyb3dzZXIgZ2xvYmFsXG4gIGRlZmluZUJyaWRnZXQoIHdpbmRvdy5qUXVlcnkgKTtcbn1cblxufSkoIHdpbmRvdyApO1xuXG4vKiFcbiAqIGV2ZW50aWUgdjEuMC42XG4gKiBldmVudCBiaW5kaW5nIGhlbHBlclxuICogICBldmVudGllLmJpbmQoIGVsZW0sICdjbGljaycsIG15Rm4gKVxuICogICBldmVudGllLnVuYmluZCggZWxlbSwgJ2NsaWNrJywgbXlGbiApXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXG5cblxudmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbnZhciBiaW5kID0gZnVuY3Rpb24oKSB7fTtcblxuZnVuY3Rpb24gZ2V0SUVFdmVudCggb2JqICkge1xuICB2YXIgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gIC8vIGFkZCBldmVudC50YXJnZXRcbiAgZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgb2JqO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbmlmICggZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuICBiaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApO1xuICB9O1xufSBlbHNlIGlmICggZG9jRWxlbS5hdHRhY2hFdmVudCApIHtcbiAgYmluZCA9IGZ1bmN0aW9uKCBvYmosIHR5cGUsIGZuICkge1xuICAgIG9ialsgdHlwZSArIGZuIF0gPSBmbi5oYW5kbGVFdmVudCA/XG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZ2V0SUVFdmVudCggb2JqICk7XG4gICAgICAgIGZuLmhhbmRsZUV2ZW50LmNhbGwoIGZuLCBldmVudCApO1xuICAgICAgfSA6XG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZ2V0SUVFdmVudCggb2JqICk7XG4gICAgICAgIGZuLmNhbGwoIG9iaiwgZXZlbnQgKTtcbiAgICAgIH07XG4gICAgb2JqLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdICk7XG4gIH07XG59XG5cbnZhciB1bmJpbmQgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoIGRvY0VsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XG4gICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApO1xuICB9O1xufSBlbHNlIGlmICggZG9jRWxlbS5kZXRhY2hFdmVudCApIHtcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XG4gICAgb2JqLmRldGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdICk7XG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmpbIHR5cGUgKyBmbiBdO1xuICAgIH0gY2F0Y2ggKCBlcnIgKSB7XG4gICAgICAvLyBjYW4ndCBkZWxldGUgd2luZG93IG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICBvYmpbIHR5cGUgKyBmbiBdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIGV2ZW50aWUgPSB7XG4gIGJpbmQ6IGJpbmQsXG4gIHVuYmluZDogdW5iaW5kXG59O1xuXG4vLyAtLS0tLSBtb2R1bGUgZGVmaW5pdGlvbiAtLS0tLSAvL1xuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgLy8gQU1EXG4gIGRlZmluZSggJ2V2ZW50aWUvZXZlbnRpZScsZXZlbnRpZSApO1xufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICAvLyBDb21tb25KU1xuICBtb2R1bGUuZXhwb3J0cyA9IGV2ZW50aWU7XG59IGVsc2Uge1xuICAvLyBicm93c2VyIGdsb2JhbFxuICB3aW5kb3cuZXZlbnRpZSA9IGV2ZW50aWU7XG59XG5cbn0pKCB3aW5kb3cgKTtcblxuLyohXG4gKiBFdmVudEVtaXR0ZXIgdjQuMi4xMSAtIGdpdC5pby9lZVxuICogVW5saWNlbnNlIC0gaHR0cDovL3VubGljZW5zZS5vcmcvXG4gKiBPbGl2ZXIgQ2FsZHdlbGwgLSBodHRwOi8vb2xpLm1lLnVrL1xuICogQHByZXNlcnZlXG4gKi9cblxuOyhmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogQ2xhc3MgZm9yIG1hbmFnaW5nIGV2ZW50cy5cbiAgICAgKiBDYW4gYmUgZXh0ZW5kZWQgdG8gcHJvdmlkZSBldmVudCBmdW5jdGlvbmFsaXR5IGluIG90aGVyIGNsYXNzZXMuXG4gICAgICpcbiAgICAgKiBAY2xhc3MgRXZlbnRFbWl0dGVyIE1hbmFnZXMgZXZlbnQgcmVnaXN0ZXJpbmcgYW5kIGVtaXR0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHt9XG5cbiAgICAvLyBTaG9ydGN1dHMgdG8gaW1wcm92ZSBzcGVlZCBhbmQgc2l6ZVxuICAgIHZhciBwcm90byA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydHMgPSB0aGlzO1xuICAgIHZhciBvcmlnaW5hbEdsb2JhbFZhbHVlID0gZXhwb3J0cy5FdmVudEVtaXR0ZXI7XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGxpc3RlbmVyIGZvciB0aGUgZXZlbnQgaW4gaXRzIHN0b3JhZ2UgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IGxpc3RlbmVycyBBcnJheSBvZiBsaXN0ZW5lcnMgdG8gc2VhcmNoIHRocm91Z2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIGxvb2sgZm9yLlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gSW5kZXggb2YgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciwgLTEgaWYgbm90IGZvdW5kXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVycywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsaWFzIGEgbWV0aG9kIHdoaWxlIGtlZXBpbmcgdGhlIGNvbnRleHQgY29ycmVjdCwgdG8gYWxsb3cgZm9yIG92ZXJ3cml0aW5nIG9mIHRhcmdldCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdGFyZ2V0IG1ldGhvZC5cbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGFsaWFzZWQgbWV0aG9kXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWxpYXMobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYWxpYXNDbG9zdXJlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbbmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0ZW5lciBhcnJheSBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cbiAgICAgKiBXaWxsIGluaXRpYWxpc2UgdGhlIGV2ZW50IG9iamVjdCBhbmQgbGlzdGVuZXIgYXJyYXlzIGlmIHJlcXVpcmVkLlxuICAgICAqIFdpbGwgcmV0dXJuIGFuIG9iamVjdCBpZiB5b3UgdXNlIGEgcmVnZXggc2VhcmNoLiBUaGUgb2JqZWN0IGNvbnRhaW5zIGtleXMgZm9yIGVhY2ggbWF0Y2hlZCBldmVudC4gU28gL2JhW3J6XS8gbWlnaHQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGJhciBhbmQgYmF6LiBCdXQgb25seSBpZiB5b3UgaGF2ZSBlaXRoZXIgZGVmaW5lZCB0aGVtIHdpdGggZGVmaW5lRXZlbnQgb3IgYWRkZWQgc29tZSBsaXN0ZW5lcnMgdG8gdGhlbS5cbiAgICAgKiBFYWNoIHByb3BlcnR5IGluIHRoZSBvYmplY3QgcmVzcG9uc2UgaXMgYW4gYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmV0dXJuIHRoZSBsaXN0ZW5lcnMgZnJvbS5cbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfE9iamVjdH0gQWxsIGxpc3RlbmVyIGZ1bmN0aW9ucyBmb3IgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIHByb3RvLmdldExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldExpc3RlbmVycyhldnQpIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgLy8gUmV0dXJuIGEgY29uY2F0ZW5hdGVkIGFycmF5IG9mIGFsbCBtYXRjaGluZyBldmVudHMgaWZcbiAgICAgICAgLy8gdGhlIHNlbGVjdG9yIGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxuICAgICAgICBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IHt9O1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2dC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Vba2V5XSA9IGV2ZW50c1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gZXZlbnRzW2V2dF0gfHwgKGV2ZW50c1tldnRdID0gW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIGxpc3Qgb2YgbGlzdGVuZXIgb2JqZWN0cyBhbmQgZmxhdHRlbnMgaXQgaW50byBhIGxpc3Qgb2YgbGlzdGVuZXIgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gbGlzdGVuZXJzIFJhdyBsaXN0ZW5lciBvYmplY3RzLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9uW119IEp1c3QgdGhlIGxpc3RlbmVyIGZ1bmN0aW9ucy5cbiAgICAgKi9cbiAgICBwcm90by5mbGF0dGVuTGlzdGVuZXJzID0gZnVuY3Rpb24gZmxhdHRlbkxpc3RlbmVycyhsaXN0ZW5lcnMpIHtcbiAgICAgICAgdmFyIGZsYXRMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgZmxhdExpc3RlbmVycy5wdXNoKGxpc3RlbmVyc1tpXS5saXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmxhdExpc3RlbmVycztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgcmVxdWVzdGVkIGxpc3RlbmVycyB2aWEgZ2V0TGlzdGVuZXJzIGJ1dCB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHJlc3VsdHMgaW5zaWRlIGFuIG9iamVjdC4gVGhpcyBpcyBtYWlubHkgZm9yIGludGVybmFsIHVzZSBidXQgb3RoZXJzIG1heSBmaW5kIGl0IHVzZWZ1bC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBpbiBhbiBvYmplY3QuXG4gICAgICovXG4gICAgcHJvdG8uZ2V0TGlzdGVuZXJzQXNPYmplY3QgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnNBc09iamVjdChldnQpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XG4gICAgICAgIHZhciByZXNwb25zZTtcblxuICAgICAgICBpZiAobGlzdGVuZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0ge307XG4gICAgICAgICAgICByZXNwb25zZVtldnRdID0gbGlzdGVuZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGxpc3RlbmVycztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogVGhlIGxpc3RlbmVyIHdpbGwgbm90IGJlIGFkZGVkIGlmIGl0IGlzIGEgZHVwbGljYXRlLlxuICAgICAqIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgaXQgaXMgY2FsbGVkLlxuICAgICAqIElmIHlvdSBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lIHRoZW4gdGhlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcbiAgICAgICAgdmFyIGxpc3RlbmVySXNXcmFwcGVkID0gdHlwZW9mIGxpc3RlbmVyID09PSAnb2JqZWN0JztcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNba2V5XS5wdXNoKGxpc3RlbmVySXNXcmFwcGVkID8gbGlzdGVuZXIgOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgICAgICAgb25jZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBhZGRMaXN0ZW5lclxuICAgICAqL1xuICAgIHByb3RvLm9uID0gYWxpYXMoJ2FkZExpc3RlbmVyJyk7XG5cbiAgICAvKipcbiAgICAgKiBTZW1pLWFsaWFzIG9mIGFkZExpc3RlbmVyLiBJdCB3aWxsIGFkZCBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZVxuICAgICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBhZnRlciBpdHMgZmlyc3QgZXhlY3V0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5hZGRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRPbmNlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMaXN0ZW5lcihldnQsIHtcbiAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFsaWFzIG9mIGFkZE9uY2VMaXN0ZW5lci5cbiAgICAgKi9cbiAgICBwcm90by5vbmNlID0gYWxpYXMoJ2FkZE9uY2VMaXN0ZW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhbiBldmVudCBuYW1lLiBUaGlzIGlzIHJlcXVpcmVkIGlmIHlvdSB3YW50IHRvIHVzZSBhIHJlZ2V4IHRvIGFkZCBhIGxpc3RlbmVyIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBJZiB5b3UgZG9uJ3QgZG8gdGhpcyB0aGVuIGhvdyBkbyB5b3UgZXhwZWN0IGl0IHRvIGtub3cgd2hhdCBldmVudCB0byBhZGQgdG8/IFNob3VsZCBpdCBqdXN0IGFkZCB0byBldmVyeSBwb3NzaWJsZSBtYXRjaCBmb3IgYSByZWdleD8gTm8uIFRoYXQgaXMgc2NhcnkgYW5kIGJhZC5cbiAgICAgKiBZb3UgbmVlZCB0byB0ZWxsIGl0IHdoYXQgZXZlbnQgbmFtZXMgc2hvdWxkIGJlIG1hdGNoZWQgYnkgYSByZWdleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gY3JlYXRlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmRlZmluZUV2ZW50ID0gZnVuY3Rpb24gZGVmaW5lRXZlbnQoZXZ0KSB7XG4gICAgICAgIHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGRlZmluZUV2ZW50IHRvIGRlZmluZSBtdWx0aXBsZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBldnRzIEFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRvIGRlZmluZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5kZWZpbmVFdmVudHMgPSBmdW5jdGlvbiBkZWZpbmVFdmVudHMoZXZ0cykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2dHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lRXZlbnQoZXZ0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmdW5jdGlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogV2hlbiBwYXNzZWQgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUsIGl0IHdpbGwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50LlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnNba2V5XSwgbGlzdGVuZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiByZW1vdmVMaXN0ZW5lclxuICAgICAqL1xuICAgIHByb3RvLm9mZiA9IGFsaWFzKCdyZW1vdmVMaXN0ZW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXG4gICAgICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgeW91IGNhbiBhZGQgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4ga2V5IHZhbHVlIHBhaXJzIG9mIGV2ZW50cyBhbmQgbGlzdGVuZXJzIG9yIGxpc3RlbmVyIGFycmF5cy4gWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIGFkZGVkLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIGFkZCB0aGUgYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKiBZZWFoLCB0aGlzIGZ1bmN0aW9uIGRvZXMgcXVpdGUgYSBiaXQuIFRoYXQncyBwcm9iYWJseSBhIGJhZCB0aGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byBhZGQgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xuICAgICAgICAvLyBQYXNzIHRocm91Z2ggdG8gbWFuaXB1bGF0ZUxpc3RlbmVyc1xuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKGZhbHNlLCBldnQsIGxpc3RlbmVycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGlzdGVuZXJzIGluIGJ1bGsgdXNpbmcgdGhlIG1hbmlwdWxhdGVMaXN0ZW5lcnMgbWV0aG9kLlxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4ga2V5IHZhbHVlIHBhaXJzIG9mIGV2ZW50cyBhbmQgbGlzdGVuZXJzIG9yIGxpc3RlbmVyIGFycmF5cy5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgcmVtb3ZlZC5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byByZW1vdmUgdGhlIGxpc3RlbmVycyBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byByZW1vdmUuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8ucmVtb3ZlTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKGV2dCwgbGlzdGVuZXJzKSB7XG4gICAgICAgIC8vIFBhc3MgdGhyb3VnaCB0byBtYW5pcHVsYXRlTGlzdGVuZXJzXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnModHJ1ZSwgZXZ0LCBsaXN0ZW5lcnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFZGl0cyBsaXN0ZW5lcnMgaW4gYnVsay4gVGhlIGFkZExpc3RlbmVycyBhbmQgcmVtb3ZlTGlzdGVuZXJzIG1ldGhvZHMgYm90aCB1c2UgdGhpcyB0byBkbyB0aGVpciBqb2IuIFlvdSBzaG91bGQgcmVhbGx5IHVzZSB0aG9zZSBpbnN0ZWFkLCB0aGlzIGlzIGEgbGl0dGxlIGxvd2VyIGxldmVsLlxuICAgICAqIFRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGRldGVybWluZSBpZiB0aGUgbGlzdGVuZXJzIGFyZSByZW1vdmVkICh0cnVlKSBvciBhZGRlZCAoZmFsc2UpLlxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIGFkZGVkL3JlbW92ZWQuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWFuaXB1bGF0ZSB0aGUgbGlzdGVuZXJzIG9mIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIFRydWUgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIGxpc3RlbmVycywgZmFsc2UgaWYgeW91IHdhbnQgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byBhZGQvcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkL3JlbW92ZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5tYW5pcHVsYXRlTGlzdGVuZXJzID0gZnVuY3Rpb24gbWFuaXB1bGF0ZUxpc3RlbmVycyhyZW1vdmUsIGV2dCwgbGlzdGVuZXJzKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIHZhciBzaW5nbGUgPSByZW1vdmUgPyB0aGlzLnJlbW92ZUxpc3RlbmVyIDogdGhpcy5hZGRMaXN0ZW5lcjtcbiAgICAgICAgdmFyIG11bHRpcGxlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lcnMgOiB0aGlzLmFkZExpc3RlbmVycztcblxuICAgICAgICAvLyBJZiBldnQgaXMgYW4gb2JqZWN0IHRoZW4gcGFzcyBlYWNoIG9mIGl0cyBwcm9wZXJ0aWVzIHRvIHRoaXMgbWV0aG9kXG4gICAgICAgIGlmICh0eXBlb2YgZXZ0ID09PSAnb2JqZWN0JyAmJiAhKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgICAgIGZvciAoaSBpbiBldnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZ0Lmhhc093blByb3BlcnR5KGkpICYmICh2YWx1ZSA9IGV2dFtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyB0aGUgc2luZ2xlIGxpc3RlbmVyIHN0cmFpZ2h0IHRocm91Z2ggdG8gdGhlIHNpbmd1bGFyIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBpLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgcGFzcyBiYWNrIHRvIHRoZSBtdWx0aXBsZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUuY2FsbCh0aGlzLCBpLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBTbyBldnQgbXVzdCBiZSBhIHN0cmluZ1xuICAgICAgICAgICAgLy8gQW5kIGxpc3RlbmVycyBtdXN0IGJlIGFuIGFycmF5IG9mIGxpc3RlbmVyc1xuICAgICAgICAgICAgLy8gTG9vcCBvdmVyIGl0IGFuZCBwYXNzIGVhY2ggb25lIHRvIHRoZSBtdWx0aXBsZSBtZXRob2RcbiAgICAgICAgICAgIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIHNpbmdsZS5jYWxsKHRoaXMsIGV2dCwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgZnJvbSBhIHNwZWNpZmllZCBldmVudC5cbiAgICAgKiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgYW4gZXZlbnQgdGhlbiBhbGwgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgKiBUaGF0IG1lYW5zIGV2ZXJ5IGV2ZW50IHdpbGwgYmUgZW1wdGllZC5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBhIHJlZ2V4IHRvIHJlbW92ZSBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IFtldnRdIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvci4gV2lsbCByZW1vdmUgZnJvbSBldmVyeSBldmVudCBpZiBub3QgcGFzc2VkLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZXZ0KSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIGV2dDtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIC8vIFJlbW92ZSBkaWZmZXJlbnQgdGhpbmdzIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgZXZ0XG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnRcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbZXZ0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldnQgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgZXZlbnRzIG1hdGNoaW5nIHRoZSByZWdleC5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBldnQudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudHNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBpbiBhbGwgZXZlbnRzXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFsaWFzIG9mIHJlbW92ZUV2ZW50LlxuICAgICAqXG4gICAgICogQWRkZWQgdG8gbWlycm9yIHRoZSBub2RlIEFQSS5cbiAgICAgKi9cbiAgICBwcm90by5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBhbGlhcygncmVtb3ZlRXZlbnQnKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IG9mIHlvdXIgY2hvaWNlLlxuICAgICAqIFdoZW4gZW1pdHRlZCwgZXZlcnkgbGlzdGVuZXIgYXR0YWNoZWQgdG8gdGhhdCBldmVudCB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgICAqIElmIHlvdSBwYXNzIHRoZSBvcHRpb25hbCBhcmd1bWVudCBhcnJheSB0aGVuIHRob3NlIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCB0byBldmVyeSBsaXN0ZW5lciB1cG9uIGV4ZWN1dGlvbi5cbiAgICAgKiBCZWNhdXNlIGl0IHVzZXMgYGFwcGx5YCwgeW91ciBhcnJheSBvZiBhcmd1bWVudHMgd2lsbCBiZSBwYXNzZWQgYXMgaWYgeW91IHdyb3RlIHRoZW0gb3V0IHNlcGFyYXRlbHkuXG4gICAgICogU28gdGhleSB3aWxsIG5vdCBhcnJpdmUgd2l0aGluIHRoZSBhcnJheSBvbiB0aGUgb3RoZXIgc2lkZSwgdGhleSB3aWxsIGJlIHNlcGFyYXRlLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIHRvIGVtaXQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdCBhbmQgZXhlY3V0ZSBsaXN0ZW5lcnMgZm9yLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXSBPcHRpb25hbCBhcnJheSBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggbGlzdGVuZXIuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24gZW1pdEV2ZW50KGV2dCwgYXJncykge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xuICAgICAgICB2YXIgbGlzdGVuZXI7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBpID0gbGlzdGVuZXJzW2tleV0ubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgc2hhbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBldmVudFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZWl0aGVyIHdpdGggYSBiYXNpYyBjYWxsIG9yIGFuIGFwcGx5IGlmIHRoZXJlIGlzIGFuIGFyZ3MgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNba2V5XVtpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIub25jZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gbGlzdGVuZXIubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyB8fCBbXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09PSB0aGlzLl9nZXRPbmNlUmV0dXJuVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBlbWl0RXZlbnRcbiAgICAgKi9cbiAgICBwcm90by50cmlnZ2VyID0gYWxpYXMoJ2VtaXRFdmVudCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidGx5IGRpZmZlcmVudCBmcm9tIGVtaXRFdmVudCBpbiB0aGF0IGl0IHdpbGwgcGFzcyBpdHMgYXJndW1lbnRzIG9uIHRvIHRoZSBsaXN0ZW5lcnMsIGFzIG9wcG9zZWQgdG8gdGFraW5nIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cyB0byBwYXNzIG9uLlxuICAgICAqIEFzIHdpdGggZW1pdEV2ZW50LCB5b3UgY2FuIHBhc3MgYSByZWdleCBpbiBwbGFjZSBvZiB0aGUgZXZlbnQgbmFtZSB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLip9IE9wdGlvbmFsIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXRFdmVudChldnQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZiBhXG4gICAgICogbGlzdGVuZXJzIHJldHVybiB2YWx1ZSBtYXRjaGVzIHRoZSBvbmUgc2V0IGhlcmUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBhZnRlciBleGVjdXRpb24uIFRoaXMgdmFsdWUgZGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIG5ldyB2YWx1ZSB0byBjaGVjayBmb3Igd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnNldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIHNldE9uY2VSZXR1cm5WYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vbmNlUmV0dXJuVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgYWdhaW5zdCB3aGVuIGV4ZWN1dGluZyBsaXN0ZW5lcnMuIElmXG4gICAgICogdGhlIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGlzIG9uZSB0aGVuIGl0IHNob3VsZCBiZSByZW1vdmVkXG4gICAgICogYXV0b21hdGljYWxseS4gSXQgd2lsbCByZXR1cm4gdHJ1ZSBieSBkZWZhdWx0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7KnxCb29sZWFufSBUaGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBmb3Igb3IgdGhlIGRlZmF1bHQsIHRydWUuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcHJvdG8uX2dldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIF9nZXRPbmNlUmV0dXJuVmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KCdfb25jZVJldHVyblZhbHVlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vbmNlUmV0dXJuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBldmVudHMgb2JqZWN0IGFuZCBjcmVhdGVzIG9uZSBpZiByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV2ZW50cyBzdG9yYWdlIG9iamVjdC5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBwcm90by5fZ2V0RXZlbnRzID0gZnVuY3Rpb24gX2dldEV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cyB8fCAodGhpcy5fZXZlbnRzID0ge30pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBnbG9iYWwge0BsaW5rIEV2ZW50RW1pdHRlcn0gdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoaXMgdmVyc2lvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBOb24gY29uZmxpY3RpbmcgRXZlbnRFbWl0dGVyIGNsYXNzLlxuICAgICAqL1xuICAgIEV2ZW50RW1pdHRlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBvcmlnaW5hbEdsb2JhbFZhbHVlO1xuICAgICAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xuICAgIH07XG5cbiAgICAvLyBFeHBvc2UgdGhlIGNsYXNzIGVpdGhlciB2aWEgQU1ELCBDb21tb25KUyBvciB0aGUgZ2xvYmFsIG9iamVjdFxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxbXSxmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuICAgIH1cbn0uY2FsbCh0aGlzKSk7XG5cbi8qIVxuICogZ2V0U3R5bGVQcm9wZXJ0eSB2MS4wLjRcbiAqIG9yaWdpbmFsIGJ5IGthbmdheFxuICogaHR0cDovL3BlcmZlY3Rpb25raWxscy5jb20vZmVhdHVyZS10ZXN0aW5nLWNzcy1wcm9wZXJ0aWVzL1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlICovXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBleHBvcnRzOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cblxuXG52YXIgcHJlZml4ZXMgPSAnV2Via2l0IE1veiBtcyBNcyBPJy5zcGxpdCgnICcpO1xudmFyIGRvY0VsZW1TdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTtcblxuZnVuY3Rpb24gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcE5hbWUgKSB7XG4gIGlmICggIXByb3BOYW1lICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHRlc3Qgc3RhbmRhcmQgcHJvcGVydHkgZmlyc3RcbiAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcm9wTmFtZSBdID09PSAnc3RyaW5nJyApIHtcbiAgICByZXR1cm4gcHJvcE5hbWU7XG4gIH1cblxuICAvLyBjYXBpdGFsaXplXG4gIHByb3BOYW1lID0gcHJvcE5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zbGljZSgxKTtcblxuICAvLyB0ZXN0IHZlbmRvciBzcGVjaWZpYyBwcm9wZXJ0aWVzXG4gIHZhciBwcmVmaXhlZDtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIHByb3BOYW1lO1xuICAgIGlmICggdHlwZW9mIGRvY0VsZW1TdHlsZVsgcHJlZml4ZWQgXSA9PT0gJ3N0cmluZycgKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWQ7XG4gICAgfVxuICB9XG59XG5cbi8vIHRyYW5zcG9ydFxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gIC8vIEFNRFxuICBkZWZpbmUoICdnZXQtc3R5bGUtcHJvcGVydHkvZ2V0LXN0eWxlLXByb3BlcnR5JyxbXSxmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0U3R5bGVQcm9wZXJ0eTtcbiAgfSk7XG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG4gIC8vIENvbW1vbkpTIGZvciBDb21wb25lbnRcbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRTdHlsZVByb3BlcnR5O1xufSBlbHNlIHtcbiAgLy8gYnJvd3NlciBnbG9iYWxcbiAgd2luZG93LmdldFN0eWxlUHJvcGVydHkgPSBnZXRTdHlsZVByb3BlcnR5O1xufVxuXG59KSggd2luZG93ICk7XG5cbi8qIVxuICogZ2V0U2l6ZSB2MS4yLjJcbiAqIG1lYXN1cmUgc2l6ZSBvZiBlbGVtZW50c1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIGV4cG9ydHM6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgY29uc29sZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCB1bmRlZmluZWQgKSB7XG5cblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGdldCBhIG51bWJlciBmcm9tIGEgc3RyaW5nLCBub3QgYSBwZXJjZW50YWdlXG5mdW5jdGlvbiBnZXRTdHlsZVNpemUoIHZhbHVlICkge1xuICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgLy8gbm90IGEgcGVyY2VudCBsaWtlICcxMDAlJywgYW5kIGEgbnVtYmVyXG4gIHZhciBpc1ZhbGlkID0gdmFsdWUuaW5kZXhPZignJScpID09PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcbiAgZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJ1xuXTtcblxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XG4gIHZhciBzaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBpbm5lcldpZHRoOiAwLFxuICAgIGlubmVySGVpZ2h0OiAwLFxuICAgIG91dGVyV2lkdGg6IDAsXG4gICAgb3V0ZXJIZWlnaHQ6IDBcbiAgfTtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuXG5cbmZ1bmN0aW9uIGRlZmluZUdldFNpemUoIGdldFN0eWxlUHJvcGVydHkgKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1NldHVwID0gZmFsc2U7XG5cbnZhciBnZXRTdHlsZSwgYm94U2l6aW5nUHJvcCwgaXNCb3hTaXplT3V0ZXI7XG5cbi8qKlxuICogc2V0dXAgdmFycyBhbmQgZnVuY3Rpb25zXG4gKiBkbyBpdCBvbiBpbml0aWFsIGdldFNpemUoKSwgcmF0aGVyIHRoYW4gb24gc2NyaXB0IGxvYWRcbiAqIEZvciBGaXJlZm94IGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAqL1xuZnVuY3Rpb24gc2V0dXAoKSB7XG4gIC8vIHNldHVwIG9uY2VcbiAgaWYgKCBpc1NldHVwICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc1NldHVwID0gdHJ1ZTtcblxuICB2YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xuICBnZXRTdHlsZSA9ICggZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdldFN0eWxlRm4gPSBnZXRDb21wdXRlZFN0eWxlID9cbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuICAgICAgfSA6XG4gICAgICBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIGVsZW0uY3VycmVudFN0eWxlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xuICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZUZuKCBlbGVtICk7XG4gICAgICAgIGlmICggIXN0eWxlICkge1xuICAgICAgICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcbiAgICAgICAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xuICAgICAgICAgICAgJ1NlZSBodHRwOi8vYml0Lmx5L2dldHNpemVidWcxJyApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG4gIH0pKCk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYm94IHNpemluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIGJveFNpemluZ1Byb3AgPSBnZXRTdHlsZVByb3BlcnR5KCdib3hTaXppbmcnKTtcblxuICAvKipcbiAgICogV2ViS2l0IG1lYXN1cmVzIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXG4gICAqIElFICYgRmlyZWZveCBtZWFzdXJlcyB0aGUgaW5uZXItd2lkdGhcbiAgICovXG4gIGlmICggYm94U2l6aW5nUHJvcCApIHtcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LnN0eWxlLndpZHRoID0gJzIwMHB4JztcbiAgICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xuICAgIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gICAgZGl2LnN0eWxlLmJvcmRlcldpZHRoID0gJzFweCAycHggM3B4IDRweCc7XG4gICAgZGl2LnN0eWxlWyBib3hTaXppbmdQcm9wIF0gPSAnYm9yZGVyLWJveCc7XG5cbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCBkaXYgKTtcblxuICAgIGlzQm94U2l6ZU91dGVyID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApID09PSAyMDA7XG4gICAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XG4gIH1cblxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XG4gIHNldHVwKCk7XG5cbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09PSAnc3RyaW5nJyApIHtcbiAgICBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xuICB9XG5cbiAgLy8gZG8gbm90IHByb2NlZWQgb24gbm9uLW9iamVjdHNcbiAgaWYgKCAhZWxlbSB8fCB0eXBlb2YgZWxlbSAhPT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcblxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJyApIHtcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcbiAgfVxuXG4gIHZhciBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSAhISggYm94U2l6aW5nUHJvcCAmJlxuICAgIHN0eWxlWyBib3hTaXppbmdQcm9wIF0gJiYgc3R5bGVbIGJveFNpemluZ1Byb3AgXSA9PT0gJ2JvcmRlci1ib3gnICk7XG5cbiAgLy8gZ2V0IGFsbCBtZWFzdXJlbWVudHNcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICB2YWx1ZSA9IG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICk7XG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gICAgLy8gYW55ICdhdXRvJywgJ21lZGl1bScgdmFsdWUgd2lsbCBiZSAwXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XG4gIHZhciBtYXJnaW5XaWR0aCA9IHNpemUubWFyZ2luTGVmdCArIHNpemUubWFyZ2luUmlnaHQ7XG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcbiAgdmFyIGJvcmRlckhlaWdodCA9IHNpemUuYm9yZGVyVG9wV2lkdGggKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xuXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcbiAgaWYgKCBzdHlsZVdpZHRoICE9PSBmYWxzZSApIHtcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIH1cblxuICB2YXIgc3R5bGVIZWlnaHQgPSBnZXRTdHlsZVNpemUoIHN0eWxlLmhlaWdodCApO1xuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuICB9XG5cbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG5cbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIElFOCByZXR1cm5zIHBlcmNlbnQgdmFsdWVzLCBub3QgcGl4ZWxzXG4vLyB0YWtlbiBmcm9tIGpRdWVyeSdzIGN1ckNTU1xuZnVuY3Rpb24gbXVuZ2VOb25QaXhlbCggZWxlbSwgdmFsdWUgKSB7XG4gIC8vIElFOCBhbmQgaGFzIHBlcmNlbnQgdmFsdWVcbiAgaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSB8fCB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgc3R5bGUgPSBlbGVtLnN0eWxlO1xuICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gIHZhciBsZWZ0ID0gc3R5bGUubGVmdDtcbiAgdmFyIHJzID0gZWxlbS5ydW50aW1lU3R5bGU7XG4gIHZhciByc0xlZnQgPSBycyAmJiBycy5sZWZ0O1xuXG4gIC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcbiAgaWYgKCByc0xlZnQgKSB7XG4gICAgcnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XG4gIH1cbiAgc3R5bGUubGVmdCA9IHZhbHVlO1xuICB2YWx1ZSA9IHN0eWxlLnBpeGVsTGVmdDtcblxuICAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG4gIHN0eWxlLmxlZnQgPSBsZWZ0O1xuICBpZiAoIHJzTGVmdCApIHtcbiAgICBycy5sZWZ0ID0gcnNMZWZ0O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5yZXR1cm4gZ2V0U2l6ZTtcblxufVxuXG4vLyB0cmFuc3BvcnRcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAvLyBBTUQgZm9yIFJlcXVpcmVKU1xuICBkZWZpbmUoICdnZXQtc2l6ZS9nZXQtc2l6ZScsWyAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScgXSwgZGVmaW5lR2V0U2l6ZSApO1xufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuICAvLyBDb21tb25KUyBmb3IgQ29tcG9uZW50XG4gIG1vZHVsZS5leHBvcnRzID0gZGVmaW5lR2V0U2l6ZSggcmVxdWlyZSgnZGVzYW5kcm8tZ2V0LXN0eWxlLXByb3BlcnR5JykgKTtcbn0gZWxzZSB7XG4gIC8vIGJyb3dzZXIgZ2xvYmFsXG4gIHdpbmRvdy5nZXRTaXplID0gZGVmaW5lR2V0U2l6ZSggd2luZG93LmdldFN0eWxlUHJvcGVydHkgKTtcbn1cblxufSkoIHdpbmRvdyApO1xuXG4vKiFcbiAqIGRvY1JlYWR5IHYxLjAuNFxuICogQ3Jvc3MgYnJvd3NlciBET01Db250ZW50TG9hZGVkIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcblxuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbi8vIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRvIGJlIHRyaWdnZXJlZCBvbiByZWFkeVxudmFyIHF1ZXVlID0gW107XG5cbmZ1bmN0aW9uIGRvY1JlYWR5KCBmbiApIHtcbiAgLy8gdGhyb3cgb3V0IG5vbi1mdW5jdGlvbnNcbiAgaWYgKCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCBkb2NSZWFkeS5pc1JlYWR5ICkge1xuICAgIC8vIHJlYWR5IG5vdywgaGl0IGl0XG4gICAgZm4oKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBxdWV1ZSBmdW5jdGlvbiB3aGVuIHJlYWR5XG4gICAgcXVldWUucHVzaCggZm4gKTtcbiAgfVxufVxuXG5kb2NSZWFkeS5pc1JlYWR5ID0gZmFsc2U7XG5cbi8vIHRyaWdnZXJlZCBvbiB2YXJpb3VzIGRvYyByZWFkeSBldmVudHNcbmZ1bmN0aW9uIG9uUmVhZHkoIGV2ZW50ICkge1xuICAvLyBiYWlsIGlmIGFscmVhZHkgdHJpZ2dlcmVkIG9yIElFOCBkb2N1bWVudCBpcyBub3QgcmVhZHkganVzdCB5ZXRcbiAgdmFyIGlzSUU4Tm90UmVhZHkgPSBldmVudC50eXBlID09PSAncmVhZHlzdGF0ZWNoYW5nZScgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJztcbiAgaWYgKCBkb2NSZWFkeS5pc1JlYWR5IHx8IGlzSUU4Tm90UmVhZHkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJpZ2dlcigpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyKCkge1xuICBkb2NSZWFkeS5pc1JlYWR5ID0gdHJ1ZTtcbiAgLy8gcHJvY2VzcyBxdWV1ZVxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBxdWV1ZS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpXTtcbiAgICBmbigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZURvY1JlYWR5KCBldmVudGllICkge1xuICAvLyB0cmlnZ2VyIHJlYWR5IGlmIHBhZ2UgaXMgcmVhZHlcbiAgaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnICkge1xuICAgIHRyaWdnZXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBsaXN0ZW4gZm9yIGV2ZW50c1xuICAgIGV2ZW50aWUuYmluZCggZG9jdW1lbnQsICdET01Db250ZW50TG9hZGVkJywgb25SZWFkeSApO1xuICAgIGV2ZW50aWUuYmluZCggZG9jdW1lbnQsICdyZWFkeXN0YXRlY2hhbmdlJywgb25SZWFkeSApO1xuICAgIGV2ZW50aWUuYmluZCggd2luZG93LCAnbG9hZCcsIG9uUmVhZHkgKTtcbiAgfVxuXG4gIHJldHVybiBkb2NSZWFkeTtcbn1cblxuLy8gdHJhbnNwb3J0XG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgLy8gQU1EXG4gIGRlZmluZSggJ2RvYy1yZWFkeS9kb2MtcmVhZHknLFsgJ2V2ZW50aWUvZXZlbnRpZScgXSwgZGVmaW5lRG9jUmVhZHkgKTtcbn0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVEb2NSZWFkeSggcmVxdWlyZSgnZXZlbnRpZScpICk7XG59IGVsc2Uge1xuICAvLyBicm93c2VyIGdsb2JhbFxuICB3aW5kb3cuZG9jUmVhZHkgPSBkZWZpbmVEb2NSZWFkeSggd2luZG93LmV2ZW50aWUgKTtcbn1cblxufSkoIHdpbmRvdyApO1xuXG4vKipcbiAqIG1hdGNoZXNTZWxlY3RvciB2MS4wLjNcbiAqIG1hdGNoZXNTZWxlY3RvciggZWxlbWVudCwgJy5zZWxlY3RvcicgKVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggRWxlbVByb3RvICkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXMgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xuICAgIH1cbiAgICAvLyBjaGVjayB1bi1wcmVmaXhlZFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xuXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgICB2YXIgbWV0aG9kID0gcHJlZml4ICsgJ01hdGNoZXNTZWxlY3Rvcic7XG4gICAgICBpZiAoIEVsZW1Qcm90b1sgbWV0aG9kIF0gKSB7XG4gICAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgICB9XG4gICAgfVxuICB9KSgpO1xuXG4gIC8vIC0tLS0tIG1hdGNoIC0tLS0tIC8vXG5cbiAgZnVuY3Rpb24gbWF0Y2goIGVsZW0sIHNlbGVjdG9yICkge1xuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XG4gIH1cblxuICAvLyAtLS0tLSBhcHBlbmRUb0ZyYWdtZW50IC0tLS0tIC8vXG5cbiAgZnVuY3Rpb24gY2hlY2tQYXJlbnQoIGVsZW0gKSB7XG4gICAgLy8gbm90IG5lZWRlZCBpZiBhbHJlYWR5IGhhcyBwYXJlbnRcbiAgICBpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICk7XG4gIH1cblxuICAvLyAtLS0tLSBxdWVyeSAtLS0tLSAvL1xuXG4gIC8vIGZhbGwgYmFjayB0byB1c2luZyBRU0FcbiAgLy8gdGh4IEBqb25hdGhhbnRuZWFsIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzMwNjI5NTVcbiAgZnVuY3Rpb24gcXVlcnkoIGVsZW0sIHNlbGVjdG9yICkge1xuICAgIC8vIGFwcGVuZCB0byBmcmFnbWVudCBpZiBubyBwYXJlbnRcbiAgICBjaGVja1BhcmVudCggZWxlbSApO1xuXG4gICAgLy8gbWF0Y2ggZWxlbSB3aXRoIGFsbCBzZWxlY3RlZCBlbGVtcyBvZiBwYXJlbnRcbiAgICB2YXIgZWxlbXMgPSBlbGVtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIC8vIHJldHVybiB0cnVlIGlmIG1hdGNoXG4gICAgICBpZiAoIGVsZW1zW2ldID09PSBlbGVtICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIC0tLS0tIG1hdGNoQ2hpbGQgLS0tLS0gLy9cblxuICBmdW5jdGlvbiBtYXRjaENoaWxkKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICBjaGVja1BhcmVudCggZWxlbSApO1xuICAgIHJldHVybiBtYXRjaCggZWxlbSwgc2VsZWN0b3IgKTtcbiAgfVxuXG4gIC8vIC0tLS0tIG1hdGNoZXNTZWxlY3RvciAtLS0tLSAvL1xuXG4gIHZhciBtYXRjaGVzU2VsZWN0b3I7XG5cbiAgaWYgKCBtYXRjaGVzTWV0aG9kICkge1xuICAgIC8vIElFOSBzdXBwb3J0cyBtYXRjaGVzU2VsZWN0b3IsIGJ1dCBkb2Vzbid0IHdvcmsgb24gb3JwaGFuZWQgZWxlbXNcbiAgICAvLyBjaGVjayBmb3IgdGhhdFxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc3VwcG9ydHNPcnBoYW5zID0gbWF0Y2goIGRpdiwgJ2RpdicgKTtcbiAgICBtYXRjaGVzU2VsZWN0b3IgPSBzdXBwb3J0c09ycGhhbnMgPyBtYXRjaCA6IG1hdGNoQ2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgbWF0Y2hlc1NlbGVjdG9yID0gcXVlcnk7XG4gIH1cblxuICAvLyB0cmFuc3BvcnRcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJyxbXSxmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzU2VsZWN0b3I7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTZWxlY3RvcjtcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBtYXRjaGVzU2VsZWN0b3I7XG4gIH1cblxufSkoIEVsZW1lbnQucHJvdG90eXBlICk7XG5cbi8qKlxuICogRml6enkgVUkgdXRpbHMgdjEuMC4xXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdmaXp6eS11aS11dGlscy91dGlscycsW1xuICAgICAgJ2RvYy1yZWFkeS9kb2MtcmVhZHknLFxuICAgICAgJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcbiAgICBdLCBmdW5jdGlvbiggZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGRvY1JlYWR5LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkb2MtcmVhZHknKSxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5kb2NSZWFkeSxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICkge1xuXG5cblxudmFyIHV0aWxzID0ge307XG5cbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xuXG4vLyBleHRlbmRzIG9iamVjdHNcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIGlzQXJyYXkgLS0tLS0gLy9cbiAgXG52YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudXRpbHMuaXNBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gIHJldHVybiBvYmpUb1N0cmluZy5jYWxsKCBvYmogKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG51dGlscy5tYWtlQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xuICB2YXIgYXJ5ID0gW107XG4gIGlmICggdXRpbHMuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgYXJ5ID0gb2JqO1xuICB9IGVsc2UgaWYgKCBvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IG9iai5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gICAgYXJ5LnB1c2goIG9iaiApO1xuICB9XG4gIHJldHVybiBhcnk7XG59O1xuXG4vLyAtLS0tLSBpbmRleE9mIC0tLS0tIC8vXG5cbi8vIGluZGV4IG9mIGhlbHBlciBjYXVzZSBJRThcbnV0aWxzLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgICByZXR1cm4gYXJ5LmluZGV4T2YoIG9iaiApO1xuICB9IDogZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGFyeS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGlmICggYXJ5W2ldID09PSBvYmogKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbi8vIC0tLS0tIHJlbW92ZUZyb20gLS0tLS0gLy9cblxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgdmFyIGluZGV4ID0gdXRpbHMuaW5kZXhPZiggYXJ5LCBvYmogKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBpc0VsZW1lbnQgLS0tLS0gLy9cblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzg0MzgwLzE4MjE4M1xudXRpbHMuaXNFbGVtZW50ID0gKCB0eXBlb2YgSFRNTEVsZW1lbnQgPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgSFRNTEVsZW1lbnQgPT0gJ29iamVjdCcgKSA/XG4gIGZ1bmN0aW9uIGlzRWxlbWVudERPTTIoIG9iaiApIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH0gOlxuICBmdW5jdGlvbiBpc0VsZW1lbnRRdWlya3koIG9iaiApIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiZcbiAgICAgIG9iai5ub2RlVHlwZSA9PSAxICYmIHR5cGVvZiBvYmoubm9kZU5hbWUgPT0gJ3N0cmluZyc7XG4gIH07XG5cbi8vIC0tLS0tIHNldFRleHQgLS0tLS0gLy9cblxudXRpbHMuc2V0VGV4dCA9ICggZnVuY3Rpb24oKSB7XG4gIHZhciBzZXRUZXh0UHJvcGVydHk7XG4gIGZ1bmN0aW9uIHNldFRleHQoIGVsZW0sIHRleHQgKSB7XG4gICAgLy8gb25seSBjaGVjayBzZXRUZXh0UHJvcGVydHkgb25jZVxuICAgIHNldFRleHRQcm9wZXJ0eSA9IHNldFRleHRQcm9wZXJ0eSB8fCAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudCAhPT0gdW5kZWZpbmVkID8gJ3RleHRDb250ZW50JyA6ICdpbm5lclRleHQnICk7XG4gICAgZWxlbVsgc2V0VGV4dFByb3BlcnR5IF0gPSB0ZXh0O1xuICB9XG4gIHJldHVybiBzZXRUZXh0O1xufSkoKTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgZmZFbGVtcyA9IFtdO1xuXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBlbGVtID0gZWxlbXNbaV07XG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XG4gICAgaWYgKCAhdXRpbHMuaXNFbGVtZW50KCBlbGVtICkgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcbiAgICBpZiAoIHNlbGVjdG9yICkge1xuICAgICAgLy8gZmlsdGVyIHNpYmxpbmdzXG4gICAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICB9XG4gICAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgICB2YXIgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgICBmb3IgKCB2YXIgaj0wLCBqTGVuID0gY2hpbGRFbGVtcy5sZW5ndGg7IGogPCBqTGVuOyBqKysgKSB7XG4gICAgICAgIGZmRWxlbXMucHVzaCggY2hpbGRFbGVtc1tqXSApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmZFbGVtcztcbn07XG5cbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24oIF9jbGFzcywgbWV0aG9kTmFtZSwgdGhyZXNob2xkICkge1xuICAvLyBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcbiAgdmFyIHRpbWVvdXROYW1lID0gbWV0aG9kTmFtZSArICdUaW1lb3V0JztcblxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgaWYgKCB0aW1lb3V0ICkge1xuICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgX3RoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgfSwgdGhyZXNob2xkIHx8IDEwMCApO1xuICB9O1xufTtcblxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cblxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XG4gIH0pLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuLyoqXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgLmpzLW5hbWVzcGFjZSBjbGFzc1xuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbiAqIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbiBhdHRyaWJ1dGVcbiAqL1xudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcbiAgZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XG4gICAgdmFyIGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5qcy0nICsgZGFzaGVkTmFtZXNwYWNlICk7XG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZSArICctb3B0aW9ucyc7XG5cbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIHZhciBlbGVtID0gZWxlbXNbaV07XG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApO1xuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBwYXJzaW5nICcgKyBkYXRhQXR0ciArICcgb24gJyArXG4gICAgICAgICAgICBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKyAoIGVsZW0uaWQgPyAnIycgKyBlbGVtLmlkIDogJycgKSArICc6ICcgK1xuICAgICAgICAgICAgZXJyb3IgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCdsYXlvdXRuYW1lJylcbiAgICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xuICAgICAgaWYgKCBqUXVlcnkgKSB7XG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0pKTtcblxuLyoqXG4gKiBPdXRsYXllciBJdGVtXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdvdXRsYXllci9pdGVtJyxbXG4gICAgICAgICdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICAgICAgJ2dldC1zdHlsZS1wcm9wZXJ0eS9nZXQtc3R5bGUtcHJvcGVydHknLFxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXG4gICAgICBdLFxuICAgICAgZnVuY3Rpb24oIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKTtcbiAgICAgIH1cbiAgICApO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnd29sZnk4Ny1ldmVudGVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1nZXQtc3R5bGUtcHJvcGVydHknKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk91dGxheWVyID0ge307XG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgd2luZG93LmdldFN0eWxlUHJvcGVydHksXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCBnZXRTdHlsZVByb3BlcnR5LCB1dGlscyApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xuXG52YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xudmFyIGdldFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSA/XG4gIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG4gIH0gOlxuICBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XG4gIH07XG5cblxuZnVuY3Rpb24gaXNFbXB0eU9iaiggb2JqICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBvYmogKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHByb3AgPSBudWxsO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ1NTMyBzdXBwb3J0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRTdHlsZVByb3BlcnR5KCd0cmFuc2l0aW9uJyk7XG52YXIgdHJhbnNmb3JtUHJvcGVydHkgPSBnZXRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nKTtcbnZhciBzdXBwb3J0c0NTUzMgPSB0cmFuc2l0aW9uUHJvcGVydHkgJiYgdHJhbnNmb3JtUHJvcGVydHk7XG52YXIgaXMzZCA9ICEhZ2V0U3R5bGVQcm9wZXJ0eSgncGVyc3BlY3RpdmUnKTtcblxudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9IHtcbiAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gIE9UcmFuc2l0aW9uOiAnb3RyYW5zaXRpb25lbmQnLFxuICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcbn1bIHRyYW5zaXRpb25Qcm9wZXJ0eSBdO1xuXG4vLyBwcm9wZXJ0aWVzIHRoYXQgY291bGQgaGF2ZSB2ZW5kb3IgcHJlZml4XG52YXIgcHJlZml4YWJsZVByb3BlcnRpZXMgPSBbXG4gICd0cmFuc2Zvcm0nLFxuICAndHJhbnNpdGlvbicsXG4gICd0cmFuc2l0aW9uRHVyYXRpb24nLFxuICAndHJhbnNpdGlvblByb3BlcnR5J1xuXTtcblxuLy8gY2FjaGUgYWxsIHZlbmRvciBwcm9wZXJ0aWVzXG52YXIgdmVuZG9yUHJvcGVydGllcyA9ICggZnVuY3Rpb24oKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBwcmVmaXhhYmxlUHJvcGVydGllcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgcHJvcCA9IHByZWZpeGFibGVQcm9wZXJ0aWVzW2ldO1xuICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcCApO1xuICAgIGlmICggc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wICkge1xuICAgICAgY2FjaGVbIHByb3AgXSA9IHN1cHBvcnRlZFByb3A7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYWNoZTtcbn0pKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gSXRlbSggZWxlbWVudCwgbGF5b3V0ICkge1xuICBpZiAoICFlbGVtZW50ICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIC8vIHBhcmVudCBsYXlvdXQgY2xhc3MsIGkuZS4gTWFzb25yeSwgSXNvdG9wZSwgb3IgUGFja2VyeVxuICB0aGlzLmxheW91dCA9IGxheW91dDtcbiAgdGhpcy5wb3NpdGlvbiA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuLy8gaW5oZXJpdCBFdmVudEVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggSXRlbS5wcm90b3R5cGUsIEV2ZW50RW1pdHRlci5wcm90b3R5cGUgKTtcblxuSXRlbS5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyB0cmFuc2l0aW9uIG9iamVjdHNcbiAgdGhpcy5fdHJhbnNuID0ge1xuICAgIGluZ1Byb3BlcnRpZXM6IHt9LFxuICAgIGNsZWFuOiB7fSxcbiAgICBvbkVuZDoge31cbiAgfTtcblxuICB0aGlzLmNzcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgfSk7XG59O1xuXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG5JdGVtLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5JdGVtLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xufTtcblxuLyoqXG4gKiBhcHBseSBDU1Mgc3R5bGVzIHRvIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICovXG5JdGVtLnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbiggc3R5bGUgKSB7XG4gIHZhciBlbGVtU3R5bGUgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XG5cbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gICAgLy8gdXNlIHZlbmRvciBwcm9wZXJ0eSBpZiBhdmFpbGFibGVcbiAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xuICAgIGVsZW1TdHlsZVsgc3VwcG9ydGVkUHJvcCBdID0gc3R5bGVbIHByb3AgXTtcbiAgfVxufTtcblxuIC8vIG1lYXN1cmUgcG9zaXRpb24sIGFuZCBzZXRzIGl0XG5JdGVtLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggdGhpcy5lbGVtZW50ICk7XG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0O1xuICB2YXIgaXNPcmlnaW5Ub3AgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luVG9wO1xuICB2YXIgeFZhbHVlID0gc3R5bGVbIGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcgXTtcbiAgdmFyIHlWYWx1ZSA9IHN0eWxlWyBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbScgXTtcbiAgLy8gY29udmVydCBwZXJjZW50IHRvIHBpeGVsc1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIHZhciB4ID0geFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSA/XG4gICAgKCBwYXJzZUZsb2F0KCB4VmFsdWUgKSAvIDEwMCApICogbGF5b3V0U2l6ZS53aWR0aCA6IHBhcnNlSW50KCB4VmFsdWUsIDEwICk7XG4gIHZhciB5ID0geVZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSA/XG4gICAgKCBwYXJzZUZsb2F0KCB5VmFsdWUgKSAvIDEwMCApICogbGF5b3V0U2l6ZS5oZWlnaHQgOiBwYXJzZUludCggeVZhbHVlLCAxMCApO1xuXG4gIC8vIGNsZWFuIHVwICdhdXRvJyBvciBvdGhlciBub24taW50ZWdlciB2YWx1ZXNcbiAgeCA9IGlzTmFOKCB4ICkgPyAwIDogeDtcbiAgeSA9IGlzTmFOKCB5ICkgPyAwIDogeTtcbiAgLy8gcmVtb3ZlIHBhZGRpbmcgZnJvbSBtZWFzdXJlbWVudFxuICB4IC09IGlzT3JpZ2luTGVmdCA/IGxheW91dFNpemUucGFkZGluZ0xlZnQgOiBsYXlvdXRTaXplLnBhZGRpbmdSaWdodDtcbiAgeSAtPSBpc09yaWdpblRvcCA/IGxheW91dFNpemUucGFkZGluZ1RvcCA6IGxheW91dFNpemUucGFkZGluZ0JvdHRvbTtcblxuICB0aGlzLnBvc2l0aW9uLnggPSB4O1xuICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xufTtcblxuLy8gc2V0IHNldHRsZWQgcG9zaXRpb24sIGFwcGx5IHBhZGRpbmdcbkl0ZW0ucHJvdG90eXBlLmxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuICB2YXIgc3R5bGUgPSB7fTtcblxuICAvLyB4XG4gIHZhciB4UGFkZGluZyA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8gJ3BhZGRpbmdMZWZ0JyA6ICdwYWRkaW5nUmlnaHQnO1xuICB2YXIgeFByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB2YXIgeFJlc2V0UHJvcGVydHkgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHhQcm9wZXJ0eSBdID0gdGhpcy5nZXRYVmFsdWUoIHggKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHhSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICAvLyB5XG4gIHZhciB5UGFkZGluZyA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3AgPyAncGFkZGluZ1RvcCcgOiAncGFkZGluZ0JvdHRvbSc7XG4gIHZhciB5UHJvcGVydHkgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luVG9wID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHlSZXNldFByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XG5cbiAgdmFyIHkgPSB0aGlzLnBvc2l0aW9uLnkgKyBsYXlvdXRTaXplWyB5UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHlQcm9wZXJ0eSBdID0gdGhpcy5nZXRZVmFsdWUoIHkgKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICB0aGlzLmNzcyggc3R5bGUgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xufTtcblxuSXRlbS5wcm90b3R5cGUuZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcbiAgcmV0dXJuIGxheW91dE9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmICFsYXlvdXRPcHRpb25zLmlzSG9yaXpvbnRhbCA/XG4gICAgKCAoIHggLyB0aGlzLmxheW91dC5zaXplLndpZHRoICkgKiAxMDAgKSArICclJyA6IHggKyAncHgnO1xufTtcblxuSXRlbS5wcm90b3R5cGUuZ2V0WVZhbHVlID0gZnVuY3Rpb24oIHkgKSB7XG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcbiAgcmV0dXJuIGxheW91dE9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmIGxheW91dE9wdGlvbnMuaXNIb3Jpem9udGFsID9cbiAgICAoICggeSAvIHRoaXMubGF5b3V0LnNpemUuaGVpZ2h0ICkgKiAxMDAgKSArICclJyA6IHkgKyAncHgnO1xufTtcblxuXG5JdGVtLnByb3RvdHlwZS5fdHJhbnNpdGlvblRvID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgLy8gZ2V0IGN1cnJlbnQgeCAmIHkgZnJvbSB0b3AvbGVmdFxuICB2YXIgY3VyWCA9IHRoaXMucG9zaXRpb24ueDtcbiAgdmFyIGN1clkgPSB0aGlzLnBvc2l0aW9uLnk7XG5cbiAgdmFyIGNvbXBhcmVYID0gcGFyc2VJbnQoIHgsIDEwICk7XG4gIHZhciBjb21wYXJlWSA9IHBhcnNlSW50KCB5LCAxMCApO1xuICB2YXIgZGlkTm90TW92ZSA9IGNvbXBhcmVYID09PSB0aGlzLnBvc2l0aW9uLnggJiYgY29tcGFyZVkgPT09IHRoaXMucG9zaXRpb24ueTtcblxuICAvLyBzYXZlIGVuZCBwb3NpdGlvblxuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XG5cbiAgLy8gaWYgZGlkIG5vdCBtb3ZlIGFuZCBub3QgdHJhbnNpdGlvbmluZywganVzdCBnbyB0byBsYXlvdXRcbiAgaWYgKCBkaWROb3RNb3ZlICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcbiAgICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRyYW5zWCA9IHggLSBjdXJYO1xuICB2YXIgdHJhbnNZID0geSAtIGN1clk7XG4gIHZhciB0cmFuc2l0aW9uU3R5bGUgPSB7fTtcbiAgdHJhbnNpdGlvblN0eWxlLnRyYW5zZm9ybSA9IHRoaXMuZ2V0VHJhbnNsYXRlKCB0cmFuc1gsIHRyYW5zWSApO1xuXG4gIHRoaXMudHJhbnNpdGlvbih7XG4gICAgdG86IHRyYW5zaXRpb25TdHlsZSxcbiAgICBvblRyYW5zaXRpb25FbmQ6IHtcbiAgICAgIHRyYW5zZm9ybTogdGhpcy5sYXlvdXRQb3NpdGlvblxuICAgIH0sXG4gICAgaXNDbGVhbmluZzogdHJ1ZVxuICB9KTtcbn07XG5cbkl0ZW0ucHJvdG90eXBlLmdldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICAvLyBmbGlwIGNvb3JpZGluYXRlcyBpZiBvcmlnaW4gb24gcmlnaHQgb3IgYm90dG9tXG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcbiAgeCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8geCA6IC14O1xuICB5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/IHkgOiAteTtcblxuICBpZiAoIGlzM2QgKSB7XG4gICAgcmV0dXJuICd0cmFuc2xhdGUzZCgnICsgeCArICdweCwgJyArIHkgKyAncHgsIDApJztcbiAgfVxuXG4gIHJldHVybiAndHJhbnNsYXRlKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCknO1xufTtcblxuLy8gbm9uIHRyYW5zaXRpb24gKyB0cmFuc2Zvcm0gc3VwcG9ydFxuSXRlbS5wcm90b3R5cGUuZ29UbyA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XG4gIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcbn07XG5cbi8vIHVzZSB0cmFuc2l0aW9uIGFuZCB0cmFuc2Zvcm1zIGlmIHN1cHBvcnRlZFxuSXRlbS5wcm90b3R5cGUubW92ZVRvID0gc3VwcG9ydHNDU1MzID9cbiAgSXRlbS5wcm90b3R5cGUuX3RyYW5zaXRpb25UbyA6IEl0ZW0ucHJvdG90eXBlLmdvVG87XG5cbkl0ZW0ucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIHRoaXMucG9zaXRpb24ueCA9IHBhcnNlSW50KCB4LCAxMCApO1xuICB0aGlzLnBvc2l0aW9uLnkgPSBwYXJzZUludCggeSwgMTAgKTtcbn07XG5cbi8vIC0tLS0tIHRyYW5zaXRpb24gLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgLSBDU1NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxuICovXG5cbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcbkl0ZW0ucHJvdG90eXBlLl9ub25UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xuICAgIHRoaXMuX3JlbW92ZVN0eWxlcyggYXJncy50byApO1xuICB9XG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xuICAgIGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF0uY2FsbCggdGhpcyApO1xuICB9XG59O1xuXG4vKipcbiAqIHByb3BlciB0cmFuc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIGFyZ3VtZW50c1xuICogICBAcGFyYW0ge09iamVjdH0gdG8gLSBzdHlsZSB0byB0cmFuc2l0aW9uIHRvXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXG4gKiAgIEBwYXJhbSB7Qm9vbGVhbn0gaXNDbGVhbmluZyAtIHJlbW92ZXMgdHJhbnNpdGlvbiBzdHlsZXMgYWZ0ZXIgdHJhbnNpdGlvblxuICogICBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmQgLSBjYWxsYmFja1xuICovXG5JdGVtLnByb3RvdHlwZS5fdHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBhcmdzICkge1xuICAvLyByZWRpcmVjdCB0byBub25UcmFuc2l0aW9uIGlmIG5vIHRyYW5zaXRpb24gZHVyYXRpb25cbiAgaWYgKCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcbiAgICB0aGlzLl9ub25UcmFuc2l0aW9uKCBhcmdzICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xuICAvLyBrZWVwIHRyYWNrIG9mIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFjayBieSBjc3MgcHJvcGVydHlcbiAgZm9yICggdmFyIHByb3AgaW4gYXJncy5vblRyYW5zaXRpb25FbmQgKSB7XG4gICAgX3RyYW5zaXRpb24ub25FbmRbIHByb3AgXSA9IGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF07XG4gIH1cbiAgLy8ga2VlcCB0cmFjayBvZiBwcm9wZXJ0aWVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcbiAgZm9yICggcHJvcCBpbiBhcmdzLnRvICkge1xuICAgIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3AgXSA9IHRydWU7XG4gICAgLy8ga2VlcCB0cmFjayBvZiBwcm9wZXJ0aWVzIHRvIGNsZWFuIHVwIHdoZW4gdHJhbnNpdGlvbiBpcyBkb25lXG4gICAgaWYgKCBhcmdzLmlzQ2xlYW5pbmcgKSB7XG4gICAgICBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcCBdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgZnJvbSBzdHlsZXNcbiAgaWYgKCBhcmdzLmZyb20gKSB7XG4gICAgdGhpcy5jc3MoIGFyZ3MuZnJvbSApO1xuICAgIC8vIGZvcmNlIHJlZHJhdy4gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICAgdmFyIGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIC8vIGhhY2sgZm9yIEpTSGludCB0byBodXNoIGFib3V0IHVudXNlZCB2YXJcbiAgICBoID0gbnVsbDtcbiAgfVxuICAvLyBlbmFibGUgdHJhbnNpdGlvblxuICB0aGlzLmVuYWJsZVRyYW5zaXRpb24oIGFyZ3MudG8gKTtcbiAgLy8gc2V0IHN0eWxlcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XG5cbiAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuXG59O1xuXG4vLyBkYXNoIGJlZm9yZSBhbGwgY2FwIGxldHRlcnMsIGluY2x1ZGluZyBmaXJzdCBmb3Jcbi8vIFdlYmtpdFRyYW5zZm9ybSA9PiAtd2Via2l0LXRyYW5zZm9ybVxuZnVuY3Rpb24gdG9EYXNoZWRBbGwoIHN0ciApIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKFtBLVpdKS9nLCBmdW5jdGlvbiggJDEgKSB7XG4gICAgcmV0dXJuICctJyArICQxLnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvblByb3BzID0gJ29wYWNpdHksJyArXG4gIHRvRGFzaGVkQWxsKCB2ZW5kb3JQcm9wZXJ0aWVzLnRyYW5zZm9ybSB8fCAndHJhbnNmb3JtJyApO1xuXG5JdGVtLnByb3RvdHlwZS5lbmFibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oLyogc3R5bGUgKi8pIHtcbiAgLy8gSEFDSyBjaGFuZ2luZyB0cmFuc2l0aW9uUHJvcGVydHkgZHVyaW5nIGEgdHJhbnNpdGlvblxuICAvLyB3aWxsIGNhdXNlIHRyYW5zaXRpb24gdG8ganVtcFxuICBpZiAoIHRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG1ha2UgYHRyYW5zaXRpb246IGZvbywgYmFyLCBiYXpgIGZyb20gc3R5bGUgb2JqZWN0XG4gIC8vIEhBQ0sgdW4tY29tbWVudCB0aGlzIHdoZW4gZW5hYmxlVHJhbnNpdGlvbiBjYW4gd29ya1xuICAvLyB3aGlsZSBhIHRyYW5zaXRpb24gaXMgaGFwcGVuaW5nXG4gIC8vIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gW107XG4gIC8vIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xuICAvLyAgIC8vIGRhc2gtaWZ5IGNhbWVsQ2FzZWQgcHJvcGVydGllcyBsaWtlIFdlYmtpdFRyYW5zaXRpb25cbiAgLy8gICBwcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XG4gIC8vICAgdHJhbnNpdGlvblZhbHVlcy5wdXNoKCB0b0Rhc2hlZEFsbCggcHJvcCApICk7XG4gIC8vIH1cbiAgLy8gZW5hYmxlIHRyYW5zaXRpb24gc3R5bGVzXG4gIHRoaXMuY3NzKHtcbiAgICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0pO1xuICAvLyBsaXN0ZW4gZm9yIHRyYW5zaXRpb24gZW5kIGV2ZW50XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XG59O1xuXG5JdGVtLnByb3RvdHlwZS50cmFuc2l0aW9uID0gSXRlbS5wcm90b3R5cGVbIHRyYW5zaXRpb25Qcm9wZXJ0eSA/ICdfdHJhbnNpdGlvbicgOiAnX25vblRyYW5zaXRpb24nIF07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG5JdGVtLnByb3RvdHlwZS5vbndlYmtpdFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xufTtcblxuSXRlbS5wcm90b3R5cGUub25vdHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XG59O1xuXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXG52YXIgZGFzaGVkVmVuZG9yUHJvcGVydGllcyA9IHtcbiAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zZm9ybScsXG4gICctbW96LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nLFxuICAnLW8tdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcbn07XG5cbkl0ZW0ucHJvdG90eXBlLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgLy8gZGlzcmVnYXJkIGJ1YmJsZWQgZXZlbnRzIGZyb20gY2hpbGRyZW5cbiAgaWYgKCBldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcbiAgdmFyIHByb3BlcnR5TmFtZSA9IGRhc2hlZFZlbmRvclByb3BlcnRpZXNbIGV2ZW50LnByb3BlcnR5TmFtZSBdIHx8IGV2ZW50LnByb3BlcnR5TmFtZTtcblxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcbiAgZGVsZXRlIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3BlcnR5TmFtZSBdO1xuICAvLyBjaGVjayBpZiBhbnkgcHJvcGVydGllcyBhcmUgc3RpbGwgdHJhbnNpdGlvbmluZ1xuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcbiAgICAvLyBhbGwgcHJvcGVydGllcyBoYXZlIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXG4gICAgdGhpcy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuICB9XG4gIC8vIGNsZWFuIHN0eWxlXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLmNsZWFuICkge1xuICAgIC8vIGNsZWFuIHVwIHN0eWxlXG4gICAgdGhpcy5lbGVtZW50LnN0eWxlWyBldmVudC5wcm9wZXJ0eU5hbWUgXSA9ICcnO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcGVydHlOYW1lIF07XG4gIH1cbiAgLy8gdHJpZ2dlciBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2tcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24ub25FbmQgKSB7XG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcbiAgICBvblRyYW5zaXRpb25FbmQuY2FsbCggdGhpcyApO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XG4gIH1cblxuICB0aGlzLmVtaXRFdmVudCggJ3RyYW5zaXRpb25FbmQnLCBbIHRoaXMgXSApO1xufTtcblxuSXRlbS5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbioqL1xuSXRlbS5wcm90b3R5cGUuX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcbiAgLy8gY2xlYW4gdXAgdHJhbnNpdGlvbiBzdHlsZXNcbiAgdmFyIGNsZWFuU3R5bGUgPSB7fTtcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gICAgY2xlYW5TdHlsZVsgcHJvcCBdID0gJyc7XG4gIH1cbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcbn07XG5cbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnJ1xufTtcblxuSXRlbS5wcm90b3R5cGUucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyByZW1vdmUgdHJhbnNpdGlvblxuICB0aGlzLmNzcyggY2xlYW5UcmFuc2l0aW9uU3R5bGUgKTtcbn07XG5cbi8vIC0tLS0tIHNob3cvaGlkZS9yZW1vdmUgLS0tLS0gLy9cblxuLy8gcmVtb3ZlIGVsZW1lbnQgZnJvbSBET01cbkl0ZW0ucHJvdG90eXBlLnJlbW92ZUVsZW0gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuICB0aGlzLmVtaXRFdmVudCggJ3JlbW92ZScsIFsgdGhpcyBdICk7XG59O1xuXG5JdGVtLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgLy8ganVzdCByZW1vdmUgZWxlbWVudCBpZiBubyB0cmFuc2l0aW9uIHN1cHBvcnQgb3Igbm8gdHJhbnNpdGlvblxuICBpZiAoICF0cmFuc2l0aW9uUHJvcGVydHkgfHwgIXBhcnNlRmxvYXQoIHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uICkgKSB7XG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc3RhcnQgdHJhbnNpdGlvblxuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB0aGlzLm9uY2UoICd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oKSB7XG4gICAgX3RoaXMucmVtb3ZlRWxlbSgpO1xuICB9KTtcbiAgdGhpcy5oaWRlKCk7XG59O1xuXG5JdGVtLnByb3RvdHlwZS5yZXZlYWwgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNIaWRkZW47XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgndmlzaWJsZVN0eWxlJyk7XG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXG4gICAgdG86IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5JdGVtLnByb3RvdHlwZS5vblJldmVhbFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgaWYgc3RpbGwgdmlzaWJsZVxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxuICBpZiAoICF0aGlzLmlzSGlkZGVuICkge1xuICAgIHRoaXMuZW1pdEV2ZW50KCdyZXZlYWwnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgc3R5bGUgcHJvcGVydHkgdXNlIGZvciBoaWRlL3JldmVhbCB0cmFuc2l0aW9uIGVuZFxuICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlUHJvcGVydHkgLSBoaWRkZW5TdHlsZS92aXNpYmxlU3R5bGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkl0ZW0ucHJvdG90eXBlLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkgPSBmdW5jdGlvbiggc3R5bGVQcm9wZXJ0eSApIHtcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xuICAvLyB1c2Ugb3BhY2l0eVxuICBpZiAoIG9wdGlvblN0eWxlLm9wYWNpdHkgKSB7XG4gICAgcmV0dXJuICdvcGFjaXR5JztcbiAgfVxuICAvLyBnZXQgZmlyc3QgcHJvcGVydHlcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbkl0ZW0ucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2V0IGZsYWdcbiAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgnaGlkZGVuU3R5bGUnKTtcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIHRvOiBvcHRpb25zLmhpZGRlblN0eWxlLFxuICAgIC8vIGtlZXAgaGlkZGVuIHN0dWZmIGhpZGRlblxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5JdGVtLnByb3RvdHlwZS5vbkhpZGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIHVuLWhpZGRlblxuICBpZiAoIHRoaXMuaXNIaWRkZW4gKSB7XG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XG4gICAgdGhpcy5lbWl0RXZlbnQoJ2hpZGUnKTtcbiAgfVxufTtcblxuSXRlbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNzcyh7XG4gICAgcG9zaXRpb246ICcnLFxuICAgIGxlZnQ6ICcnLFxuICAgIHJpZ2h0OiAnJyxcbiAgICB0b3A6ICcnLFxuICAgIGJvdHRvbTogJycsXG4gICAgdHJhbnNpdGlvbjogJycsXG4gICAgdHJhbnNmb3JtOiAnJ1xuICB9KTtcbn07XG5cbnJldHVybiBJdGVtO1xuXG59KSk7XG5cbi8qIVxuICogT3V0bGF5ZXIgdjEuNC4yXG4gKiB0aGUgYnJhaW5zIGFuZCBndXRzIG9mIGEgbGF5b3V0IGxpYnJhcnlcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcbiAgICAgICAgJ2V2ZW50aWUvZXZlbnRpZScsXG4gICAgICAgICdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICAgICAgJy4vaXRlbSdcbiAgICAgIF0sXG4gICAgICBmdW5jdGlvbiggZXZlbnRpZSwgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSk7XG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmV2ZW50aWUsXG4gICAgICB3aW5kb3cuRXZlbnRFbWl0dGVyLFxuICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICAgd2luZG93Lk91dGxheWVyLkl0ZW1cbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLSB2YXJzIC0tLS0tIC8vXG5cbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcbnZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT3V0bGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXJzXG52YXIgR1VJRCA9IDA7XG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgT3V0bGF5ZXIgaW50YW5jZXNcbnZhciBpbnN0YW5jZXMgPSB7fTtcblxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCwgU3RyaW5nfSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE91dGxheWVyKCBlbGVtZW50LCBvcHRpb25zICkge1xuICB2YXIgcXVlcnlFbGVtZW50ID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtZW50ICk7XG4gIGlmICggIXF1ZXJ5RWxlbWVudCApIHtcbiAgICBpZiAoIGNvbnNvbGUgKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCAnQmFkIGVsZW1lbnQgZm9yICcgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSArXG4gICAgICAgICc6ICcgKyAoIHF1ZXJ5RWxlbWVudCB8fCBlbGVtZW50ICkgKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcbiAgLy8gYWRkIGpRdWVyeVxuICBpZiAoIGpRdWVyeSApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcbiAgfVxuXG4gIC8vIG9wdGlvbnNcbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuZXh0ZW5kKCB7fSwgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0cyApO1xuICB0aGlzLm9wdGlvbiggb3B0aW9ucyApO1xuXG4gIC8vIGFkZCBpZCBmb3IgT3V0bGF5ZXIuZ2V0RnJvbUVsZW1lbnRcbiAgdmFyIGlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuXG4gIC8vIGtpY2sgaXQgb2ZmXG4gIHRoaXMuX2NyZWF0ZSgpO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLmlzSW5pdExheW91dCApIHtcbiAgICB0aGlzLmxheW91dCgpO1xuICB9XG59XG5cbi8vIHNldHRpbmdzIGFyZSBmb3IgaW50ZXJuYWwgdXNlIG9ubHlcbk91dGxheWVyLm5hbWVzcGFjZSA9ICdvdXRsYXllcic7XG5PdXRsYXllci5JdGVtID0gSXRlbTtcblxuLy8gZGVmYXVsdCBvcHRpb25zXG5PdXRsYXllci5kZWZhdWx0cyA9IHtcbiAgY29udGFpbmVyU3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuICBpc0luaXRMYXlvdXQ6IHRydWUsXG4gIGlzT3JpZ2luTGVmdDogdHJ1ZSxcbiAgaXNPcmlnaW5Ub3A6IHRydWUsXG4gIGlzUmVzaXplQm91bmQ6IHRydWUsXG4gIGlzUmVzaXppbmdDb250YWluZXI6IHRydWUsXG4gIC8vIGl0ZW0gb3B0aW9uc1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcbiAgaGlkZGVuU3R5bGU6IHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcbiAgfSxcbiAgdmlzaWJsZVN0eWxlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgfVxufTtcblxuLy8gaW5oZXJpdCBFdmVudEVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggT3V0bGF5ZXIucHJvdG90eXBlLCBFdmVudEVtaXR0ZXIucHJvdG90eXBlICk7XG5cbi8qKlxuICogc2V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcbn07XG5cbk91dGxheWVyLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBpdGVtcyBmcm9tIGNoaWxkcmVuXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcbiAgLy8gZWxlbWVudHMgdGhhdCBhZmZlY3QgbGF5b3V0LCBidXQgYXJlIG5vdCBsYWlkIG91dFxuICB0aGlzLnN0YW1wcyA9IFtdO1xuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcbiAgLy8gc2V0IGNvbnRhaW5lciBzdHlsZVxuICB1dGlscy5leHRlbmQoIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlICk7XG5cbiAgLy8gYmluZCByZXNpemUgbWV0aG9kXG4gIGlmICggdGhpcy5vcHRpb25zLmlzUmVzaXplQm91bmQgKSB7XG4gICAgdGhpcy5iaW5kUmVzaXplKCk7XG4gIH1cbn07XG5cbi8vIGdvZXMgdGhyb3VnaCBhbGwgY2hpbGRyZW4gYWdhaW4gYW5kIGdldHMgYnJpY2tzIGluIHByb3BlciBvcmRlclxuT3V0bGF5ZXIucHJvdG90eXBlLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XG59O1xuXG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIE91dGxheWVyLkl0ZW1zIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGNvbGxlY3Rpb24gb2YgbmV3IE91dGxheWVyIEl0ZW1zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5faXRlbWl6ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuICB2YXIgaXRlbUVsZW1zID0gdGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyggZWxlbXMgKTtcbiAgdmFyIEl0ZW0gPSB0aGlzLmNvbnN0cnVjdG9yLkl0ZW07XG5cbiAgLy8gY3JlYXRlIG5ldyBPdXRsYXllciBJdGVtcyBmb3IgY29sbGVjdGlvblxuICB2YXIgaXRlbXMgPSBbXTtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbUVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBlbGVtID0gaXRlbUVsZW1zW2ldO1xuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcbiAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gIH1cblxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIGdldCBpdGVtIGVsZW1lbnRzIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGl0ZW0gZWxlbWVudHNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICByZXR1cm4gdXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzKCBlbGVtcywgdGhpcy5vcHRpb25zLml0ZW1TZWxlY3RvciApO1xufTtcblxuLyoqXG4gKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGl0ZW0gZWxlbWVudHNcbiAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZWxlbXMgPSBbXTtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICBlbGVtcy5wdXNoKCB0aGlzLml0ZW1zW2ldLmVsZW1lbnQgKTtcbiAgfVxuICByZXR1cm4gZWxlbXM7XG59O1xuXG4vLyAtLS0tLSBpbml0ICYgbGF5b3V0IC0tLS0tIC8vXG5cbi8qKlxuICogbGF5cyBvdXQgYWxsIGl0ZW1zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVzZXRMYXlvdXQoKTtcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XG5cbiAgLy8gZG9uJ3QgYW5pbWF0ZSBmaXJzdCBsYXlvdXRcbiAgdmFyIGlzSW5zdGFudCA9IHRoaXMub3B0aW9ucy5pc0xheW91dEluc3RhbnQgIT09IHVuZGVmaW5lZCA/XG4gICAgdGhpcy5vcHRpb25zLmlzTGF5b3V0SW5zdGFudCA6ICF0aGlzLl9pc0xheW91dEluaXRlZDtcbiAgdGhpcy5sYXlvdXRJdGVtcyggdGhpcy5pdGVtcywgaXNJbnN0YW50ICk7XG5cbiAgLy8gZmxhZyBmb3IgaW5pdGFsaXplZFxuICB0aGlzLl9pc0xheW91dEluaXRlZCA9IHRydWU7XG59O1xuXG4vLyBfaW5pdCBpcyBhbGlhcyBmb3IgbGF5b3V0XG5PdXRsYXllci5wcm90b3R5cGUuX2luaXQgPSBPdXRsYXllci5wcm90b3R5cGUubGF5b3V0O1xuXG4vKipcbiAqIGxvZ2ljIGJlZm9yZSBhbnkgbmV3IGxheW91dFxuICovXG5PdXRsYXllci5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZ2V0U2l6ZSgpO1xufTtcblxuXG5PdXRsYXllci5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXG4gKiBpZiBvcHRpb24gaXMgU3RyaW5nIC0+IGdldCBlbGVtZW50IGZyb20gc2VsZWN0b3Igc3RyaW5nLCAmIGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGlmIG9wdGlvbiBpcyBFbGVtZW50IC0+IGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZWFzdXJlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcbiAqIEBwcml2YXRlXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbiggbWVhc3VyZW1lbnQsIHNpemUgKSB7XG4gIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnNbIG1lYXN1cmVtZW50IF07XG4gIHZhciBlbGVtO1xuICBpZiAoICFvcHRpb24gKSB7XG4gICAgLy8gZGVmYXVsdCB0byAwXG4gICAgdGhpc1sgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG9wdGlvbiBhcyBhbiBlbGVtZW50XG4gICAgaWYgKCB0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJyApIHtcbiAgICAgIGVsZW0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggb3B0aW9uICk7XG4gICAgfSBlbHNlIGlmICggdXRpbHMuaXNFbGVtZW50KCBvcHRpb24gKSApIHtcbiAgICAgIGVsZW0gPSBvcHRpb247XG4gICAgfVxuICAgIC8vIHVzZSBzaXplIG9mIGVsZW1lbnQsIGlmIGVsZW1lbnRcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gZWxlbSA/IGdldFNpemUoIGVsZW0gKVsgc2l6ZSBdIDogb3B0aW9uO1xuICB9XG59O1xuXG4vKipcbiAqIGxheW91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLmxheW91dEl0ZW1zID0gZnVuY3Rpb24oIGl0ZW1zLCBpc0luc3RhbnQgKSB7XG4gIGl0ZW1zID0gdGhpcy5fZ2V0SXRlbXNGb3JMYXlvdXQoIGl0ZW1zICk7XG5cbiAgdGhpcy5fbGF5b3V0SXRlbXMoIGl0ZW1zLCBpc0luc3RhbnQgKTtcblxuICB0aGlzLl9wb3N0TGF5b3V0KCk7XG59O1xuXG4vKipcbiAqIGdldCB0aGUgaXRlbXMgdG8gYmUgbGFpZCBvdXRcbiAqIHlvdSBtYXkgd2FudCB0byBza2lwIG92ZXIgc29tZSBpdGVtc1xuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgdmFyIGxheW91dEl0ZW1zID0gW107XG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG4gICAgaWYgKCAhaXRlbS5pc0lnbm9yZWQgKSB7XG4gICAgICBsYXlvdXRJdGVtcy5wdXNoKCBpdGVtICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsYXlvdXRJdGVtcztcbn07XG5cbi8qKlxuICogbGF5b3V0IGl0ZW1zXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtc1xuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnRcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAnbGF5b3V0JywgaXRlbXMgKTtcblxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIC8vIG5vIGl0ZW1zLCBlbWl0IGV2ZW50IHdpdGggZW1wdHkgYXJyYXlcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcXVldWUgPSBbXTtcblxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgIC8vIGdldCB4L3kgb2JqZWN0IGZyb20gbWV0aG9kXG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XG4gICAgLy8gZW5xdWV1ZVxuICAgIHBvc2l0aW9uLml0ZW0gPSBpdGVtO1xuICAgIHBvc2l0aW9uLmlzSW5zdGFudCA9IGlzSW5zdGFudCB8fCBpdGVtLmlzTGF5b3V0SW5zdGFudDtcbiAgICBxdWV1ZS5wdXNoKCBwb3NpdGlvbiApO1xuICB9XG5cbiAgdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKCBxdWV1ZSApO1xufTtcblxuLyoqXG4gKiBnZXQgaXRlbSBsYXlvdXQgcG9zaXRpb25cbiAqIEBwYXJhbSB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxuICogQHJldHVybnMge09iamVjdH0geCBhbmQgeSBwb3NpdGlvblxuICovXG5PdXRsYXllci5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCAvKiBpdGVtICovICkge1xuICByZXR1cm4ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufTtcblxuLyoqXG4gKiBpdGVyYXRlIG92ZXIgYXJyYXkgYW5kIHBvc2l0aW9uIGVhY2ggaXRlbVxuICogUmVhc29uIGJlaW5nIC0gc2VwYXJhdGluZyB0aGlzIGxvZ2ljIHByZXZlbnRzICdsYXlvdXQgaW52YWxpZGF0aW9uJ1xuICogdGh4IEBwYXVsX2lyaXNoXG4gKiBAcGFyYW0ge0FycmF5fSBxdWV1ZVxuICovXG5PdXRsYXllci5wcm90b3R5cGUuX3Byb2Nlc3NMYXlvdXRRdWV1ZSA9IGZ1bmN0aW9uKCBxdWV1ZSApIHtcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcXVldWUubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIG9iaiA9IHF1ZXVlW2ldO1xuICAgIHRoaXMuX3Bvc2l0aW9uSXRlbSggb2JqLml0ZW0sIG9iai54LCBvYmoueSwgb2JqLmlzSW5zdGFudCApO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgcG9zaXRpb24gb2YgaXRlbSBpbiBET01cbiAqIEBwYXJhbSB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0geSAtIHZlcnRpY2FsIHBvc2l0aW9uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudCAtIGRpc2FibGVzIHRyYW5zaXRpb25zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5fcG9zaXRpb25JdGVtID0gZnVuY3Rpb24oIGl0ZW0sIHgsIHksIGlzSW5zdGFudCApIHtcbiAgaWYgKCBpc0luc3RhbnQgKSB7XG4gICAgLy8gaWYgbm90IHRyYW5zaXRpb24sIGp1c3Qgc2V0IENTU1xuICAgIGl0ZW0uZ29UbyggeCwgeSApO1xuICB9IGVsc2Uge1xuICAgIGl0ZW0ubW92ZVRvKCB4LCB5ICk7XG4gIH1cbn07XG5cbi8qKlxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxuICogaS5lLiBzaXplIHRoZSBjb250YWluZXJcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9wb3N0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVzaXplQ29udGFpbmVyKCk7XG59O1xuXG5PdXRsYXllci5wcm90b3R5cGUucmVzaXplQ29udGFpbmVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5pc1Jlc2l6aW5nQ29udGFpbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgc2l6ZSA9IHRoaXMuX2dldENvbnRhaW5lclNpemUoKTtcbiAgaWYgKCBzaXplICkge1xuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUud2lkdGgsIHRydWUgKTtcbiAgICB0aGlzLl9zZXRDb250YWluZXJNZWFzdXJlKCBzaXplLmhlaWdodCwgZmFsc2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHdpZHRoIG9yIGhlaWdodCBvZiBjb250YWluZXIgaWYgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IHNpemVcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gKiAgIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gbm9vcDtcblxuLyoqXG4gKiBAcGFyYW0ge051bWJlcn0gbWVhc3VyZSAtIHNpemUgb2Ygd2lkdGggb3IgaGVpZ2h0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV2lkdGhcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9zZXRDb250YWluZXJNZWFzdXJlID0gZnVuY3Rpb24oIG1lYXN1cmUsIGlzV2lkdGggKSB7XG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbGVtU2l6ZSA9IHRoaXMuc2l6ZTtcbiAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB3aWR0aCBpZiBib3JkZXIgYm94XG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XG4gICAgbWVhc3VyZSArPSBpc1dpZHRoID8gZWxlbVNpemUucGFkZGluZ0xlZnQgKyBlbGVtU2l6ZS5wYWRkaW5nUmlnaHQgK1xuICAgICAgZWxlbVNpemUuYm9yZGVyTGVmdFdpZHRoICsgZWxlbVNpemUuYm9yZGVyUmlnaHRXaWR0aCA6XG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXG4gICAgICBlbGVtU2l6ZS5ib3JkZXJUb3BXaWR0aCArIGVsZW1TaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuICB9XG5cbiAgbWVhc3VyZSA9IE1hdGgubWF4KCBtZWFzdXJlLCAwICk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgaXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JyBdID0gbWVhc3VyZSArICdweCc7XG59O1xuXG4vKipcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5fZW1pdENvbXBsZXRlT25JdGVtcyA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGl0ZW1zICkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgIF90aGlzLmRpc3BhdGNoRXZlbnQoIGV2ZW50TmFtZSArICdDb21wbGV0ZScsIG51bGwsIFsgaXRlbXMgXSApO1xuICB9XG5cbiAgdmFyIGNvdW50ID0gaXRlbXMubGVuZ3RoO1xuICBpZiAoICFpdGVtcyB8fCAhY291bnQgKSB7XG4gICAgb25Db21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkb25lQ291bnQgPSAwO1xuICBmdW5jdGlvbiB0aWNrKCkge1xuICAgIGRvbmVDb3VudCsrO1xuICAgIGlmICggZG9uZUNvdW50ID09PSBjb3VudCApIHtcbiAgICAgIG9uQ29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICAvLyBiaW5kIGNhbGxiYWNrXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG4gICAgaXRlbS5vbmNlKCBldmVudE5hbWUsIHRpY2sgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBlbWl0cyBldmVudHMgdmlhIGV2ZW50RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBuYW1lIG9mIGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIG9yaWdpbmFsIGV2ZW50XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXG4gIHZhciBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XG5cbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgLy8gc2V0IHRoaXMuJGVsZW1lbnRcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xuICAgICAgJGV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8ganVzdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudCBhdmFpbGFibGVcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggdHlwZSwgYXJncyApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaWdub3JlICYgc3RhbXBzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuLyoqXG4gKiBrZWVwIGl0ZW0gaW4gY29sbGVjdGlvbiwgYnV0IGRvIG5vdCBsYXkgaXQgb3V0XG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICovXG5PdXRsYXllci5wcm90b3R5cGUuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XG4gIGlmICggaXRlbSApIHtcbiAgICBpdGVtLmlzSWdub3JlZCA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogcmV0dXJuIGl0ZW0gdG8gbGF5b3V0IGNvbGxlY3Rpb25cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICovXG5PdXRsYXllci5wcm90b3R5cGUudW5pZ25vcmUgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgaWYgKCBpdGVtICkge1xuICAgIGRlbGV0ZSBpdGVtLmlzSWdub3JlZDtcbiAgfVxufTtcblxuLyoqXG4gKiBhZGRzIGVsZW1lbnRzIHRvIHN0YW1wc1xuICogQHBhcmFtIHtOb2RlTGlzdCwgQXJyYXksIEVsZW1lbnQsIG9yIFN0cmluZ30gZWxlbXNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhbXBzID0gdGhpcy5zdGFtcHMuY29uY2F0KCBlbGVtcyApO1xuICAvLyBpZ25vcmVcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcbiAgICB0aGlzLmlnbm9yZSggZWxlbSApO1xuICB9XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgZWxlbWVudHMgdG8gc3RhbXBzXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLnVuc3RhbXAgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdGhpcy5fZmluZCggZWxlbXMgKTtcbiAgaWYgKCAhZWxlbXMgKXtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xuICAgIC8vIGZpbHRlciBvdXQgcmVtb3ZlZCBzdGFtcCBlbGVtZW50c1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuc3RhbXBzLCBlbGVtICk7XG4gICAgdGhpcy51bmlnbm9yZSggZWxlbSApO1xuICB9XG5cbn07XG5cbi8qKlxuICogZmluZHMgY2hpbGQgZWxlbWVudHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5fZmluZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgaWYgKCAhZWxlbXMgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGlmIHN0cmluZywgdXNlIGFyZ3VtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtcyA9PT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbXMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbXMgKTtcbiAgfVxuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgcmV0dXJuIGVsZW1zO1xufTtcblxuT3V0bGF5ZXIucHJvdG90eXBlLl9tYW5hZ2VTdGFtcHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKTtcblxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLnN0YW1wcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgc3RhbXAgPSB0aGlzLnN0YW1wc1tpXTtcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcCggc3RhbXAgKTtcbiAgfVxufTtcblxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRCb3VuZGluZ1JlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZ2V0IGJvdW5kaW5nIHJlY3QgZm9yIGNvbnRhaW5lciBlbGVtZW50XG4gIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzaXplID0gdGhpcy5zaXplO1xuICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgKyBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5ib3JkZXJMZWZ0V2lkdGgsXG4gICAgdG9wOiBib3VuZGluZ1JlY3QudG9wICsgc2l6ZS5wYWRkaW5nVG9wICsgc2l6ZS5ib3JkZXJUb3BXaWR0aCxcbiAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0IC0gKCBzaXplLnBhZGRpbmdSaWdodCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aCApLFxuICAgIGJvdHRvbTogYm91bmRpbmdSZWN0LmJvdHRvbSAtICggc2l6ZS5wYWRkaW5nQm90dG9tICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aCApXG4gIH07XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhbXBcbioqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9tYW5hZ2VTdGFtcCA9IG5vb3A7XG5cbi8qKlxuICogZ2V0IHgveSBwb3NpdGlvbiBvZiBlbGVtZW50IHJlbGF0aXZlIHRvIGNvbnRhaW5lciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEByZXR1cm5zIHtPYmplY3R9IG9mZnNldCAtIGhhcyBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b21cbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdGhpc1JlY3QgPSB0aGlzLl9ib3VuZGluZ1JlY3Q7XG4gIHZhciBzaXplID0gZ2V0U2l6ZSggZWxlbSApO1xuICB2YXIgb2Zmc2V0ID0ge1xuICAgIGxlZnQ6IGJvdW5kaW5nUmVjdC5sZWZ0IC0gdGhpc1JlY3QubGVmdCAtIHNpemUubWFyZ2luTGVmdCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgLSB0aGlzUmVjdC50b3AgLSBzaXplLm1hcmdpblRvcCxcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxuICAgIGJvdHRvbTogdGhpc1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LmJvdHRvbSAtIHNpemUubWFyZ2luQm90dG9tXG4gIH07XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZW5hYmxlIGV2ZW50IGhhbmRsZXJzIGZvciBsaXN0ZW5lcnNcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXG5PdXRsYXllci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBCaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgLy8gYmluZCBqdXN0IG9uZSBsaXN0ZW5lclxuICBpZiAoIHRoaXMuaXNSZXNpemVCb3VuZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IHRydWU7XG59O1xuXG4vKipcbiAqIFVuYmluZCBsYXlvdXQgdG8gd2luZG93IHJlc2l6aW5nXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS51bmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzUmVzaXplQm91bmQgKSB7XG4gICAgZXZlbnRpZS51bmJpbmQoIHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgfVxuICB0aGlzLmlzUmVzaXplQm91bmQgPSBmYWxzZTtcbn07XG5cbi8vIG9yaWdpbmFsIGRlYm91bmNlIGJ5IEpvaG4gSGFublxuLy8gaHR0cDovL3Vuc2NyaXB0YWJsZS5jb20vaW5kZXgucGhwLzIwMDkvMDMvMjAvZGVib3VuY2luZy1qYXZhc2NyaXB0LW1ldGhvZHMvXG5cbi8vIHRoaXMgZmlyZXMgZXZlcnkgcmVzaXplXG5PdXRsYXllci5wcm90b3R5cGUub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnJlc2l6ZVRpbWVvdXQgKSB7XG4gICAgY2xlYXJUaW1lb3V0KCB0aGlzLnJlc2l6ZVRpbWVvdXQgKTtcbiAgfVxuXG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIGZ1bmN0aW9uIGRlbGF5ZWQoKSB7XG4gICAgX3RoaXMucmVzaXplKCk7XG4gICAgZGVsZXRlIF90aGlzLnJlc2l6ZVRpbWVvdXQ7XG4gIH1cblxuICB0aGlzLnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCBkZWxheWVkLCAxMDAgKTtcbn07XG5cbi8vIGRlYm91bmNlZCwgbGF5b3V0IG9uIHJlc2l6ZVxuT3V0bGF5ZXIucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcbiAgaWYgKCAhdGhpcy5pc1Jlc2l6ZUJvdW5kIHx8ICF0aGlzLm5lZWRzUmVzaXplTGF5b3V0KCkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5sYXlvdXQoKTtcbn07XG5cbi8qKlxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxuICogQHJldHVybnMgQm9vbGVhblxuICovXG5PdXRsYXllci5wcm90b3R5cGUubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbiAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXG4gIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcbiAgdmFyIGhhc1NpemVzID0gdGhpcy5zaXplICYmIHNpemU7XG4gIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVyV2lkdGggIT09IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGFkZCBpdGVtcyB0byBPdXRsYXllciBpbnN0YW5jZVxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4qKi9cbk91dGxheWVyLnByb3RvdHlwZS5hZGRJdGVtcyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcbiAgLy8gYWRkIGl0ZW1zIHRvIGNvbGxlY3Rpb25cbiAgaWYgKCBpdGVtcy5sZW5ndGggKSB7XG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuY29uY2F0KCBpdGVtcyApO1xuICB9XG4gIHJldHVybiBpdGVtcztcbn07XG5cbi8qKlxuICogTGF5b3V0IG5ld2x5LWFwcGVuZGVkIGl0ZW0gZWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5PdXRsYXllci5wcm90b3R5cGUucHJlcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBpdGVtcyB0byBiZWdpbm5pbmcgb2YgY29sbGVjdGlvblxuICB2YXIgcHJldmlvdXNJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCk7XG4gIHRoaXMuaXRlbXMgPSBpdGVtcy5jb25jYXQoIHByZXZpb3VzSXRlbXMgKTtcbiAgLy8gc3RhcnQgbmV3IGxheW91dFxuICB0aGlzLl9yZXNldExheW91dCgpO1xuICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcbiAgLy8gbGF5b3V0IG5ldyBzdHVmZiB3aXRob3V0IHRyYW5zaXRpb25cbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XG4gIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xuICB0aGlzLmxheW91dEl0ZW1zKCBwcmV2aW91c0l0ZW1zICk7XG59O1xuXG4vKipcbiAqIHJldmVhbCBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5yZXZlYWwgPSBmdW5jdGlvbiggaXRlbXMgKSB7XG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZXZlYWwnLCBpdGVtcyApO1xuXG4gIHZhciBsZW4gPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGg7XG4gIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICBpdGVtLnJldmVhbCgpO1xuICB9XG59O1xuXG4vKipcbiAqIGhpZGUgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXG4gKiBAcGFyYW0ge0FycmF5IG9mIE91dGxheWVyLkl0ZW1zfSBpdGVtc1xuICovXG5PdXRsYXllci5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2hpZGUnLCBpdGVtcyApO1xuXG4gIHZhciBsZW4gPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGg7XG4gIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICBpdGVtLmhpZGUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xuICovXG5PdXRsYXllci5wcm90b3R5cGUucmV2ZWFsSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogaGlkZSBpdGVtIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXG4gKi9cbk91dGxheWVyLnByb3RvdHlwZS5oaWRlSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuICB0aGlzLmhpZGUoIGl0ZW1zICk7XG59O1xuXG4vKipcbiAqIGdldCBPdXRsYXllci5JdGVtLCBnaXZlbiBhbiBFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxuICovXG5PdXRsYXllci5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xuICAgIGlmICggaXRlbS5lbGVtZW50ID09PSBlbGVtICkge1xuICAgICAgLy8gcmV0dXJuIGl0ZW1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBPdXRsYXllci5JdGVtcywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGl0ZW1zID0gW107XG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBlbGVtID0gZWxlbXNbaV07XG4gICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgICBpZiAoIGl0ZW0gKSB7XG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZW1zO1xufTtcblxuLyoqXG4gKiByZW1vdmUgZWxlbWVudChzKSBmcm9tIGluc3RhbmNlIGFuZCBET01cbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xuT3V0bGF5ZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIHJlbW92ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcblxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmVtb3ZlJywgcmVtb3ZlSXRlbXMgKTtcblxuICAvLyBiYWlsIGlmIG5vIGl0ZW1zIHRvIHJlbW92ZVxuICBpZiAoICFyZW1vdmVJdGVtcyB8fCAhcmVtb3ZlSXRlbXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHJlbW92ZUl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBpdGVtID0gcmVtb3ZlSXRlbXNbaV07XG4gICAgaXRlbS5yZW1vdmUoKTtcbiAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLml0ZW1zLCBpdGVtICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cblxuLy8gcmVtb3ZlIGFuZCBkaXNhYmxlIE91dGxheWVyIGluc3RhbmNlXG5PdXRsYXllci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjbGVhbiB1cCBkeW5hbWljIHN0eWxlc1xuICB2YXIgc3R5bGUgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XG4gIHN0eWxlLmhlaWdodCA9ICcnO1xuICBzdHlsZS5wb3NpdGlvbiA9ICcnO1xuICBzdHlsZS53aWR0aCA9ICcnO1xuICAvLyBkZXN0cm95IGl0ZW1zXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xuICAgIGl0ZW0uZGVzdHJveSgpO1xuICB9XG5cbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcblxuICB2YXIgaWQgPSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICAvLyByZW1vdmUgZGF0YSBmb3IgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICk7XG4gIH1cblxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHJldHVybnMge091dGxheWVyfVxuICovXG5PdXRsYXllci5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcbn07XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIE91dGxheWVyIGNsYXNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY3JlYXRlIGEgbGF5b3V0IGNsYXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKi9cbk91dGxheWVyLmNyZWF0ZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIG9wdGlvbnMgKSB7XG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxuICBmdW5jdGlvbiBMYXlvdXQoKSB7XG4gICAgT3V0bGF5ZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICB9XG4gIC8vIGluaGVyaXQgT3V0bGF5ZXIgcHJvdG90eXBlLCB1c2UgT2JqZWN0LmNyZWF0ZSBpZiB0aGVyZVxuICBpZiAoIE9iamVjdC5jcmVhdGUgKSB7XG4gICAgTGF5b3V0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE91dGxheWVyLnByb3RvdHlwZSApO1xuICB9IGVsc2Uge1xuICAgIHV0aWxzLmV4dGVuZCggTGF5b3V0LnByb3RvdHlwZSwgT3V0bGF5ZXIucHJvdG90eXBlICk7XG4gIH1cbiAgLy8gc2V0IGNvbnRydWN0b3IsIHVzZWQgZm9yIG5hbWVzcGFjZSBhbmQgSXRlbVxuICBMYXlvdXQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF5b3V0O1xuXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XG4gIC8vIGFwcGx5IG5ldyBvcHRpb25zXG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XG4gIC8vIGtlZXAgcHJvdG90eXBlLnNldHRpbmdzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoUGFja2VyeSB2MS4yLjApXG4gIExheW91dC5wcm90b3R5cGUuc2V0dGluZ3MgPSB7fTtcblxuICBMYXlvdXQubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcblxuICAvLyBzdWItY2xhc3MgSXRlbVxuICBMYXlvdXQuSXRlbSA9IGZ1bmN0aW9uIExheW91dEl0ZW0oKSB7XG4gICAgSXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgTGF5b3V0Lkl0ZW0ucHJvdG90eXBlID0gbmV3IEl0ZW0oKTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZWNsYXJhdGl2ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIHV0aWxzLmh0bWxJbml0KCBMYXlvdXQsIG5hbWVzcGFjZSApO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSBicmlkZ2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvLyBtYWtlIGludG8galF1ZXJ5IHBsdWdpblxuICBpZiAoIGpRdWVyeSAmJiBqUXVlcnkuYnJpZGdldCApIHtcbiAgICBqUXVlcnkuYnJpZGdldCggbmFtZXNwYWNlLCBMYXlvdXQgKTtcbiAgfVxuXG4gIHJldHVybiBMYXlvdXQ7XG59O1xuXG4vLyAtLS0tLSBmaW4gLS0tLS0gLy9cblxuLy8gYmFjayBpbiBnbG9iYWxcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG5yZXR1cm4gT3V0bGF5ZXI7XG5cbn0pKTtcblxuXG4vKipcbiAqIElzb3RvcGUgSXRlbVxuKiovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbid1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9pdGVtJyxbXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuSXNvdG9wZSA9IHdpbmRvdy5Jc290b3BlIHx8IHt9O1xuICAgIHdpbmRvdy5Jc290b3BlLkl0ZW0gPSBmYWN0b3J5KFxuICAgICAgd2luZG93Lk91dGxheWVyXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIE91dGxheWVyICkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIHN1Yi1jbGFzcyBPdXRsYXllciBJdGVtXG5mdW5jdGlvbiBJdGVtKCkge1xuICBPdXRsYXllci5JdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbn1cblxuSXRlbS5wcm90b3R5cGUgPSBuZXcgT3V0bGF5ZXIuSXRlbSgpO1xuXG5JdGVtLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGFzc2lnbiBpZCwgdXNlZCBmb3Igb3JpZ2luYWwtb3JkZXIgc29ydGluZ1xuICB0aGlzLmlkID0gdGhpcy5sYXlvdXQuaXRlbUdVSUQrKztcbiAgT3V0bGF5ZXIuSXRlbS5wcm90b3R5cGUuX2NyZWF0ZS5jYWxsKCB0aGlzICk7XG4gIHRoaXMuc29ydERhdGEgPSB7fTtcbn07XG5cbkl0ZW0ucHJvdG90eXBlLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0lnbm9yZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGRlZmF1bHQgc29ydGVyc1xuICB0aGlzLnNvcnREYXRhLmlkID0gdGhpcy5pZDtcbiAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgdGhpcy5zb3J0RGF0YVsnb3JpZ2luYWwtb3JkZXInXSA9IHRoaXMuaWQ7XG4gIHRoaXMuc29ydERhdGEucmFuZG9tID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gZ28gdGhydSBnZXRTb3J0RGF0YSBvYmogYW5kIGFwcGx5IHRoZSBzb3J0ZXJzXG4gIHZhciBnZXRTb3J0RGF0YSA9IHRoaXMubGF5b3V0Lm9wdGlvbnMuZ2V0U29ydERhdGE7XG4gIHZhciBzb3J0ZXJzID0gdGhpcy5sYXlvdXQuX3NvcnRlcnM7XG4gIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XG4gICAgdmFyIHNvcnRlciA9IHNvcnRlcnNbIGtleSBdO1xuICAgIHRoaXMuc29ydERhdGFbIGtleSBdID0gc29ydGVyKCB0aGlzLmVsZW1lbnQsIHRoaXMgKTtcbiAgfVxufTtcblxudmFyIF9kZXN0cm95ID0gSXRlbS5wcm90b3R5cGUuZGVzdHJveTtcbkl0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2FsbCBzdXBlclxuICBfZGVzdHJveS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gIC8vIHJlc2V0IGRpc3BsYXksICM3NDFcbiAgdGhpcy5jc3Moe1xuICAgIGRpc3BsYXk6ICcnXG4gIH0pO1xufTtcblxucmV0dXJuIEl0ZW07XG5cbn0pKTtcblxuLyoqXG4gKiBJc290b3BlIExheW91dE1vZGVcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2RlJyxbXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lklzb3RvcGUgPSB3aW5kb3cuSXNvdG9wZSB8fCB7fTtcbiAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgd2luZG93Lk91dGxheWVyXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIGdldFNpemUsIE91dGxheWVyICkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gbGF5b3V0IG1vZGUgY2xhc3NcbiAgZnVuY3Rpb24gTGF5b3V0TW9kZSggaXNvdG9wZSApIHtcbiAgICB0aGlzLmlzb3RvcGUgPSBpc290b3BlO1xuICAgIC8vIGxpbmsgcHJvcGVydGllc1xuICAgIGlmICggaXNvdG9wZSApIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IGlzb3RvcGUub3B0aW9uc1sgdGhpcy5uYW1lc3BhY2UgXTtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGlzb3RvcGUuZWxlbWVudDtcbiAgICAgIHRoaXMuaXRlbXMgPSBpc290b3BlLmZpbHRlcmVkSXRlbXM7XG4gICAgICB0aGlzLnNpemUgPSBpc290b3BlLnNpemU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHNvbWUgbWV0aG9kcyBzaG91bGQganVzdCBkZWZlciB0byBkZWZhdWx0IE91dGxheWVyIG1ldGhvZFxuICAgKiBhbmQgcmVmZXJlbmNlIHRoZSBJc290b3BlIGluc3RhbmNlIGFzIGB0aGlzYFxuICAqKi9cbiAgKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmFjYWRlTWV0aG9kcyA9IFtcbiAgICAgICdfcmVzZXRMYXlvdXQnLFxuICAgICAgJ19nZXRJdGVtTGF5b3V0UG9zaXRpb24nLFxuICAgICAgJ19tYW5hZ2VTdGFtcCcsXG4gICAgICAnX2dldENvbnRhaW5lclNpemUnLFxuICAgICAgJ19nZXRFbGVtZW50T2Zmc2V0JyxcbiAgICAgICduZWVkc1Jlc2l6ZUxheW91dCdcbiAgICBdO1xuXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gZmFjYWRlTWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIHZhciBtZXRob2ROYW1lID0gZmFjYWRlTWV0aG9kc1tpXTtcbiAgICAgIExheW91dE1vZGUucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBnZXRPdXRsYXllck1ldGhvZCggbWV0aG9kTmFtZSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE91dGxheWVyTWV0aG9kKCBtZXRob2ROYW1lICkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT3V0bGF5ZXIucHJvdG90eXBlWyBtZXRob2ROYW1lIF0uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gICAgICB9O1xuICAgIH1cbiAgfSkoKTtcblxuICAvLyAtLS0tLSAgLS0tLS0gLy9cblxuICAvLyBmb3IgaG9yaXpvbnRhbCBsYXlvdXQgbW9kZXMsIGNoZWNrIHZlcnRpY2FsIHNpemVcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUubmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGRvbid0IHRyaWdnZXIgaWYgc2l6ZSBkaWQgbm90IGNoYW5nZVxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5pc290b3BlLmVsZW1lbnQgKTtcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgICAvLyBJRTggdHJpZ2dlcnMgcmVzaXplIG9uIGJvZHkgc2l6ZSBjaGFuZ2UsIHNvIHRoZXkgbWlnaHQgbm90IGJlXG4gICAgdmFyIGhhc1NpemVzID0gdGhpcy5pc290b3BlLnNpemUgJiYgc2l6ZTtcbiAgICByZXR1cm4gaGFzU2l6ZXMgJiYgc2l6ZS5pbm5lckhlaWdodCAhPSB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lckhlaWdodDtcbiAgfTtcblxuICAvLyAtLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0gLy9cblxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzb3RvcGUuX2dldE1lYXN1cmVtZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgfTtcblxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRDb2x1bW5XaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdjb2x1bW4nLCAnV2lkdGgnICk7XG4gIH07XG5cbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuZ2V0Um93SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRTZWdtZW50U2l6ZSggJ3JvdycsICdIZWlnaHQnICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGdldCBjb2x1bW5XaWR0aCBvciByb3dIZWlnaHRcbiAgICogc2VnbWVudDogJ2NvbHVtbicgb3IgJ3JvdydcbiAgICogc2l6ZSAnV2lkdGgnIG9yICdIZWlnaHQnXG4gICoqL1xuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRTZWdtZW50U2l6ZSA9IGZ1bmN0aW9uKCBzZWdtZW50LCBzaXplICkge1xuICAgIHZhciBzZWdtZW50TmFtZSA9IHNlZ21lbnQgKyBzaXplO1xuICAgIHZhciBvdXRlclNpemUgPSAnb3V0ZXInICsgc2l6ZTtcbiAgICAvLyBjb2x1bW5XaWR0aCAvIG91dGVyV2lkdGggLy8gcm93SGVpZ2h0IC8gb3V0ZXJIZWlnaHRcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggc2VnbWVudE5hbWUsIG91dGVyU2l6ZSApO1xuICAgIC8vIGdvdCByb3dIZWlnaHQgb3IgY29sdW1uV2lkdGgsIHdlIGNhbiBjaGlsbFxuICAgIGlmICggdGhpc1sgc2VnbWVudE5hbWUgXSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxuICAgIHZhciBmaXJzdEl0ZW1TaXplID0gdGhpcy5nZXRGaXJzdEl0ZW1TaXplKCk7XG4gICAgdGhpc1sgc2VnbWVudE5hbWUgXSA9IGZpcnN0SXRlbVNpemUgJiYgZmlyc3RJdGVtU2l6ZVsgb3V0ZXJTaXplIF0gfHxcbiAgICAgIC8vIG9yIHNpemUgb2YgY29udGFpbmVyXG4gICAgICB0aGlzLmlzb3RvcGUuc2l6ZVsgJ2lubmVyJyArIHNpemUgXTtcbiAgfTtcblxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRGaXJzdEl0ZW1TaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zWzBdO1xuICAgIHJldHVybiBmaXJzdEl0ZW0gJiYgZmlyc3RJdGVtLmVsZW1lbnQgJiYgZ2V0U2l6ZSggZmlyc3RJdGVtLmVsZW1lbnQgKTtcbiAgfTtcblxuICAvLyAtLS0tLSBtZXRob2RzIHRoYXQgc2hvdWxkIHJlZmVyZW5jZSBpc290b3BlIC0tLS0tIC8vXG5cbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc290b3BlLmxheW91dC5hcHBseSggdGhpcy5pc290b3BlLCBhcmd1bWVudHMgKTtcbiAgfTtcblxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc290b3BlLmdldFNpemUoKTtcbiAgICB0aGlzLnNpemUgPSB0aGlzLmlzb3RvcGUuc2l6ZTtcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjcmVhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBMYXlvdXRNb2RlLm1vZGVzID0ge307XG5cbiAgTGF5b3V0TW9kZS5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xuXG4gICAgZnVuY3Rpb24gTW9kZSgpIHtcbiAgICAgIExheW91dE1vZGUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgIH1cblxuICAgIE1vZGUucHJvdG90eXBlID0gbmV3IExheW91dE1vZGUoKTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIGlmICggb3B0aW9ucyApIHtcbiAgICAgIE1vZGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgTW9kZS5wcm90b3R5cGUubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgIC8vIHJlZ2lzdGVyIGluIElzb3RvcGVcbiAgICBMYXlvdXRNb2RlLm1vZGVzWyBuYW1lc3BhY2UgXSA9IE1vZGU7XG5cbiAgICByZXR1cm4gTW9kZTtcbiAgfTtcblxuICByZXR1cm4gTGF5b3V0TW9kZTtcblxufSkpO1xuXG4vKiFcbiAqIE1hc29ucnkgdjMuMy4xXG4gKiBDYXNjYWRpbmcgZ3JpZCBsYXlvdXQgbGlicmFyeVxuICogaHR0cDovL21hc29ucnkuZGVzYW5kcm8uY29tXG4gKiBNSVQgTGljZW5zZVxuICogYnkgRGF2aWQgRGVTYW5kcm9cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ21hc29ucnkvbWFzb25yeScsW1xuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInLFxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXG4gICAgICBdLFxuICAgICAgZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk1hc29ucnkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93Lk91dGxheWVyLFxuICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIE91dGxheWVyLCBnZXRTaXplLCB1dGlscyApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeSA9IE91dGxheWVyLmNyZWF0ZSgnbWFzb25yeScpO1xuXG4gIE1hc29ucnkucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0U2l6ZSgpO1xuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnY29sdW1uV2lkdGgnLCAnb3V0ZXJXaWR0aCcgKTtcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2d1dHRlcicsICdvdXRlcldpZHRoJyApO1xuICAgIHRoaXMubWVhc3VyZUNvbHVtbnMoKTtcblxuICAgIC8vIHJlc2V0IGNvbHVtbiBZXG4gICAgdmFyIGkgPSB0aGlzLmNvbHM7XG4gICAgdGhpcy5jb2xZcyA9IFtdO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuY29sWXMucHVzaCggMCApO1xuICAgIH1cblxuICAgIHRoaXMubWF4WSA9IDA7XG4gIH07XG5cbiAgTWFzb25yeS5wcm90b3R5cGUubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgLy8gaWYgY29sdW1uV2lkdGggaXMgMCwgZGVmYXVsdCB0byBvdXRlcldpZHRoIG9mIGZpcnN0IGl0ZW1cbiAgICBpZiAoICF0aGlzLmNvbHVtbldpZHRoICkge1xuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XG4gICAgICB2YXIgZmlyc3RJdGVtRWxlbSA9IGZpcnN0SXRlbSAmJiBmaXJzdEl0ZW0uZWxlbWVudDtcbiAgICAgIC8vIGNvbHVtbldpZHRoIGZhbGwgYmFjayB0byBpdGVtIG9mIGZpcnN0IGVsZW1lbnRcbiAgICAgIHRoaXMuY29sdW1uV2lkdGggPSBmaXJzdEl0ZW1FbGVtICYmIGdldFNpemUoIGZpcnN0SXRlbUVsZW0gKS5vdXRlcldpZHRoIHx8XG4gICAgICAgIC8vIGlmIGZpcnN0IGVsZW0gaGFzIG5vIHdpZHRoLCBkZWZhdWx0IHRvIHNpemUgb2YgY29udGFpbmVyXG4gICAgICAgIHRoaXMuY29udGFpbmVyV2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIGNvbHVtbldpZHRoID0gdGhpcy5jb2x1bW5XaWR0aCArPSB0aGlzLmd1dHRlcjtcblxuICAgIC8vIGNhbGN1bGF0ZSBjb2x1bW5zXG4gICAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xuICAgIHZhciBjb2xzID0gY29udGFpbmVyV2lkdGggLyBjb2x1bW5XaWR0aDtcbiAgICAvLyBmaXggcm91bmRpbmcgZXJyb3JzLCB0eXBpY2FsbHkgd2l0aCBndXR0ZXJzXG4gICAgdmFyIGV4Y2VzcyA9IGNvbHVtbldpZHRoIC0gY29udGFpbmVyV2lkdGggJSBjb2x1bW5XaWR0aDtcbiAgICAvLyBpZiBvdmVyc2hvb3QgaXMgbGVzcyB0aGFuIGEgcGl4ZWwsIHJvdW5kIHVwLCBvdGhlcndpc2UgZmxvb3IgaXRcbiAgICB2YXIgbWF0aE1ldGhvZCA9IGV4Y2VzcyAmJiBleGNlc3MgPCAxID8gJ3JvdW5kJyA6ICdmbG9vcic7XG4gICAgY29scyA9IE1hdGhbIG1hdGhNZXRob2QgXSggY29scyApO1xuICAgIHRoaXMuY29scyA9IE1hdGgubWF4KCBjb2xzLCAxICk7XG4gIH07XG5cbiAgTWFzb25yeS5wcm90b3R5cGUuZ2V0Q29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAvLyBjb250YWluZXIgaXMgcGFyZW50IGlmIGZpdCB3aWR0aFxuICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCA/IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIDogdGhpcy5lbGVtZW50O1xuICAgIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIGNvbnRhaW5lciApO1xuICAgIHRoaXMuY29udGFpbmVyV2lkdGggPSBzaXplICYmIHNpemUuaW5uZXJXaWR0aDtcbiAgfTtcblxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5nZXRTaXplKCk7XG4gICAgLy8gaG93IG1hbnkgY29sdW1ucyBkb2VzIHRoaXMgYnJpY2sgc3BhblxuICAgIHZhciByZW1haW5kZXIgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAlIHRoaXMuY29sdW1uV2lkdGg7XG4gICAgdmFyIG1hdGhNZXRob2QgPSByZW1haW5kZXIgJiYgcmVtYWluZGVyIDwgMSA/ICdyb3VuZCcgOiAnY2VpbCc7XG4gICAgLy8gcm91bmQgaWYgb2ZmIGJ5IDEgcGl4ZWwsIG90aGVyd2lzZSB1c2UgY2VpbFxuICAgIHZhciBjb2xTcGFuID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBpdGVtLnNpemUub3V0ZXJXaWR0aCAvIHRoaXMuY29sdW1uV2lkdGggKTtcbiAgICBjb2xTcGFuID0gTWF0aC5taW4oIGNvbFNwYW4sIHRoaXMuY29scyApO1xuXG4gICAgdmFyIGNvbEdyb3VwID0gdGhpcy5fZ2V0Q29sR3JvdXAoIGNvbFNwYW4gKTtcbiAgICAvLyBnZXQgdGhlIG1pbmltdW0gWSB2YWx1ZSBmcm9tIHRoZSBjb2x1bW5zXG4gICAgdmFyIG1pbmltdW1ZID0gTWF0aC5taW4uYXBwbHkoIE1hdGgsIGNvbEdyb3VwICk7XG4gICAgdmFyIHNob3J0Q29sSW5kZXggPSB1dGlscy5pbmRleE9mKCBjb2xHcm91cCwgbWluaW11bVkgKTtcblxuICAgIC8vIHBvc2l0aW9uIHRoZSBicmlja1xuICAgIHZhciBwb3NpdGlvbiA9IHtcbiAgICAgIHg6IHRoaXMuY29sdW1uV2lkdGggKiBzaG9ydENvbEluZGV4LFxuICAgICAgeTogbWluaW11bVlcbiAgICB9O1xuXG4gICAgLy8gYXBwbHkgc2V0SGVpZ2h0IHRvIG5lY2Vzc2FyeSBjb2x1bW5zXG4gICAgdmFyIHNldEhlaWdodCA9IG1pbmltdW1ZICsgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xuICAgIHZhciBzZXRTcGFuID0gdGhpcy5jb2xzICsgMSAtIGNvbEdyb3VwLmxlbmd0aDtcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzZXRTcGFuOyBpKysgKSB7XG4gICAgICB0aGlzLmNvbFlzWyBzaG9ydENvbEluZGV4ICsgaSBdID0gc2V0SGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbFNwYW4gLSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZWxlbWVudCBzcGFuc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IGNvbEdyb3VwXG4gICAqL1xuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0Q29sR3JvdXAgPSBmdW5jdGlvbiggY29sU3BhbiApIHtcbiAgICBpZiAoIGNvbFNwYW4gPCAyICkge1xuICAgICAgLy8gaWYgYnJpY2sgc3BhbnMgb25seSBvbmUgY29sdW1uLCB1c2UgYWxsIHRoZSBjb2x1bW4gWXNcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzO1xuICAgIH1cblxuICAgIHZhciBjb2xHcm91cCA9IFtdO1xuICAgIC8vIGhvdyBtYW55IGRpZmZlcmVudCBwbGFjZXMgY291bGQgdGhpcyBicmljayBmaXQgaG9yaXpvbnRhbGx5XG4gICAgdmFyIGdyb3VwQ291bnQgPSB0aGlzLmNvbHMgKyAxIC0gY29sU3BhbjtcbiAgICAvLyBmb3IgZWFjaCBncm91cCBwb3RlbnRpYWwgaG9yaXpvbnRhbCBwb3NpdGlvblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGdyb3VwQ291bnQ7IGkrKyApIHtcbiAgICAgIC8vIG1ha2UgYW4gYXJyYXkgb2YgY29sWSB2YWx1ZXMgZm9yIHRoYXQgb25lIGdyb3VwXG4gICAgICB2YXIgZ3JvdXBDb2xZcyA9IHRoaXMuY29sWXMuc2xpY2UoIGksIGkgKyBjb2xTcGFuICk7XG4gICAgICAvLyBhbmQgZ2V0IHRoZSBtYXggdmFsdWUgb2YgdGhlIGFycmF5XG4gICAgICBjb2xHcm91cFtpXSA9IE1hdGgubWF4LmFwcGx5KCBNYXRoLCBncm91cENvbFlzICk7XG4gICAgfVxuICAgIHJldHVybiBjb2xHcm91cDtcbiAgfTtcblxuICBNYXNvbnJ5LnByb3RvdHlwZS5fbWFuYWdlU3RhbXAgPSBmdW5jdGlvbiggc3RhbXAgKSB7XG4gICAgdmFyIHN0YW1wU2l6ZSA9IGdldFNpemUoIHN0YW1wICk7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEVsZW1lbnRPZmZzZXQoIHN0YW1wICk7XG4gICAgLy8gZ2V0IHRoZSBjb2x1bW5zIHRoYXQgdGhpcyBzdGFtcCBhZmZlY3RzXG4gICAgdmFyIGZpcnN0WCA9IHRoaXMub3B0aW9ucy5pc09yaWdpbkxlZnQgPyBvZmZzZXQubGVmdCA6IG9mZnNldC5yaWdodDtcbiAgICB2YXIgbGFzdFggPSBmaXJzdFggKyBzdGFtcFNpemUub3V0ZXJXaWR0aDtcbiAgICB2YXIgZmlyc3RDb2wgPSBNYXRoLmZsb29yKCBmaXJzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XG4gICAgZmlyc3RDb2wgPSBNYXRoLm1heCggMCwgZmlyc3RDb2wgKTtcbiAgICB2YXIgbGFzdENvbCA9IE1hdGguZmxvb3IoIGxhc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xuICAgIC8vIGxhc3RDb2wgc2hvdWxkIG5vdCBnbyBvdmVyIGlmIG11bHRpcGxlIG9mIGNvbHVtbldpZHRoICM0MjVcbiAgICBsYXN0Q29sIC09IGxhc3RYICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxO1xuICAgIGxhc3RDb2wgPSBNYXRoLm1pbiggdGhpcy5jb2xzIC0gMSwgbGFzdENvbCApO1xuICAgIC8vIHNldCBjb2xZcyB0byBib3R0b20gb2YgdGhlIHN0YW1wXG4gICAgdmFyIHN0YW1wTWF4WSA9ICggdGhpcy5vcHRpb25zLmlzT3JpZ2luVG9wID8gb2Zmc2V0LnRvcCA6IG9mZnNldC5ib3R0b20gKSArXG4gICAgICBzdGFtcFNpemUub3V0ZXJIZWlnaHQ7XG4gICAgZm9yICggdmFyIGkgPSBmaXJzdENvbDsgaSA8PSBsYXN0Q29sOyBpKysgKSB7XG4gICAgICB0aGlzLmNvbFlzW2ldID0gTWF0aC5tYXgoIHN0YW1wTWF4WSwgdGhpcy5jb2xZc1tpXSApO1xuICAgIH1cbiAgfTtcblxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubWF4WSA9IE1hdGgubWF4LmFwcGx5KCBNYXRoLCB0aGlzLmNvbFlzICk7XG4gICAgdmFyIHNpemUgPSB7XG4gICAgICBoZWlnaHQ6IHRoaXMubWF4WVxuICAgIH07XG5cbiAgICBpZiAoIHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoICkge1xuICAgICAgc2l6ZS53aWR0aCA9IHRoaXMuX2dldENvbnRhaW5lckZpdFdpZHRoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpemU7XG4gIH07XG5cbiAgTWFzb25yeS5wcm90b3R5cGUuX2dldENvbnRhaW5lckZpdFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVudXNlZENvbHMgPSAwO1xuICAgIC8vIGNvdW50IHVudXNlZCBjb2x1bW5zXG4gICAgdmFyIGkgPSB0aGlzLmNvbHM7XG4gICAgd2hpbGUgKCAtLWkgKSB7XG4gICAgICBpZiAoIHRoaXMuY29sWXNbaV0gIT09IDAgKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdW51c2VkQ29scysrO1xuICAgIH1cbiAgICAvLyBmaXQgY29udGFpbmVyIHRvIGNvbHVtbnMgdGhhdCBoYXZlIGJlZW4gdXNlZFxuICAgIHJldHVybiAoIHRoaXMuY29scyAtIHVudXNlZENvbHMgKSAqIHRoaXMuY29sdW1uV2lkdGggLSB0aGlzLmd1dHRlcjtcbiAgfTtcblxuICBNYXNvbnJ5LnByb3RvdHlwZS5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmV2aW91c1dpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aDtcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgcmV0dXJuIHByZXZpb3VzV2lkdGggIT09IHRoaXMuY29udGFpbmVyV2lkdGg7XG4gIH07XG5cbiAgcmV0dXJuIE1hc29ucnk7XG5cbn0pKTtcblxuLyohXG4gKiBNYXNvbnJ5IGxheW91dCBtb2RlXG4gKiBzdWItY2xhc3NlcyBNYXNvbnJ5XG4gKiBodHRwOi8vbWFzb25yeS5kZXNhbmRyby5jb21cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScsW1xuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnLFxuICAgICAgICAnbWFzb25yeS9tYXNvbnJ5J1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxuICAgICAgcmVxdWlyZSgnbWFzb25yeS1sYXlvdXQnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcbiAgICAgIHdpbmRvdy5NYXNvbnJ5XG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUsIE1hc29ucnkgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZXh0ZW5kIG9iamVjdHNcbmZ1bmN0aW9uIGV4dGVuZCggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xuXG4gIC8vIHNhdmUgb24gdG8gdGhlc2UgbWV0aG9kc1xuICB2YXIgX2dldEVsZW1lbnRPZmZzZXQgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUuX2dldEVsZW1lbnRPZmZzZXQ7XG4gIHZhciBsYXlvdXQgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUubGF5b3V0O1xuICB2YXIgX2dldE1lYXN1cmVtZW50ID0gTWFzb25yeU1vZGUucHJvdG90eXBlLl9nZXRNZWFzdXJlbWVudDtcblxuICAvLyBzdWItY2xhc3MgTWFzb25yeVxuICBleHRlbmQoIE1hc29ucnlNb2RlLnByb3RvdHlwZSwgTWFzb25yeS5wcm90b3R5cGUgKTtcblxuICAvLyBzZXQgYmFjaywgYXMgaXQgd2FzIG92ZXJ3cml0dGVuIGJ5IE1hc29ucnlcbiAgTWFzb25yeU1vZGUucHJvdG90eXBlLl9nZXRFbGVtZW50T2Zmc2V0ID0gX2dldEVsZW1lbnRPZmZzZXQ7XG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5sYXlvdXQgPSBsYXlvdXQ7XG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBfZ2V0TWVhc3VyZW1lbnQ7XG5cbiAgdmFyIG1lYXN1cmVDb2x1bW5zID0gTWFzb25yeU1vZGUucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zO1xuICBNYXNvbnJ5TW9kZS5wcm90b3R5cGUubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBzZXQgaXRlbXMsIHVzZWQgaWYgbWVhc3VyaW5nIGZpcnN0IGl0ZW1cbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XG4gICAgbWVhc3VyZUNvbHVtbnMuY2FsbCggdGhpcyApO1xuICB9O1xuXG4gIC8vIEhBQ0sgY29weSBvdmVyIGlzT3JpZ2luTGVmdC9Ub3Agb3B0aW9uc1xuICB2YXIgX21hbmFnZVN0YW1wID0gTWFzb25yeU1vZGUucHJvdG90eXBlLl9tYW5hZ2VTdGFtcDtcbiAgTWFzb25yeU1vZGUucHJvdG90eXBlLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3B0aW9ucy5pc09yaWdpbkxlZnQgPSB0aGlzLmlzb3RvcGUub3B0aW9ucy5pc09yaWdpbkxlZnQ7XG4gICAgdGhpcy5vcHRpb25zLmlzT3JpZ2luVG9wID0gdGhpcy5pc290b3BlLm9wdGlvbnMuaXNPcmlnaW5Ub3A7XG4gICAgX21hbmFnZVN0YW1wLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgfTtcblxuICByZXR1cm4gTWFzb25yeU1vZGU7XG5cbn0pKTtcblxuLyoqXG4gKiBmaXRSb3dzIGxheW91dCBtb2RlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxbXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlICkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRml0Um93cyA9IExheW91dE1vZGUuY3JlYXRlKCdmaXRSb3dzJyk7XG5cbkZpdFJvd3MucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnggPSAwO1xuICB0aGlzLnkgPSAwO1xuICB0aGlzLm1heFkgPSAwO1xuICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2d1dHRlcicsICdvdXRlcldpZHRoJyApO1xufTtcblxuRml0Um93cy5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xuICBpdGVtLmdldFNpemUoKTtcblxuICB2YXIgaXRlbVdpZHRoID0gaXRlbS5zaXplLm91dGVyV2lkdGggKyB0aGlzLmd1dHRlcjtcbiAgLy8gaWYgdGhpcyBlbGVtZW50IGNhbm5vdCBmaXQgaW4gdGhlIGN1cnJlbnQgcm93XG4gIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcbiAgaWYgKCB0aGlzLnggIT09IDAgJiYgaXRlbVdpZHRoICsgdGhpcy54ID4gY29udGFpbmVyV2lkdGggKSB7XG4gICAgdGhpcy54ID0gMDtcbiAgICB0aGlzLnkgPSB0aGlzLm1heFk7XG4gIH1cblxuICB2YXIgcG9zaXRpb24gPSB7XG4gICAgeDogdGhpcy54LFxuICAgIHk6IHRoaXMueVxuICB9O1xuXG4gIHRoaXMubWF4WSA9IE1hdGgubWF4KCB0aGlzLm1heFksIHRoaXMueSArIGl0ZW0uc2l6ZS5vdXRlckhlaWdodCApO1xuICB0aGlzLnggKz0gaXRlbVdpZHRoO1xuXG4gIHJldHVybiBwb3NpdGlvbjtcbn07XG5cbkZpdFJvd3MucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7IGhlaWdodDogdGhpcy5tYXhZIH07XG59O1xuXG5yZXR1cm4gRml0Um93cztcblxufSkpO1xuXG4vKipcbiAqIHZlcnRpY2FsIGxheW91dCBtb2RlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsJyxbXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlICkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVmVydGljYWwgPSBMYXlvdXRNb2RlLmNyZWF0ZSggJ3ZlcnRpY2FsJywge1xuICBob3Jpem9udGFsQWxpZ25tZW50OiAwXG59KTtcblxuVmVydGljYWwucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnkgPSAwO1xufTtcblxuVmVydGljYWwucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSApIHtcbiAgaXRlbS5nZXRTaXplKCk7XG4gIHZhciB4ID0gKCB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lcldpZHRoIC0gaXRlbS5zaXplLm91dGVyV2lkdGggKSAqXG4gICAgdGhpcy5vcHRpb25zLmhvcml6b250YWxBbGlnbm1lbnQ7XG4gIHZhciB5ID0gdGhpcy55O1xuICB0aGlzLnkgKz0gaXRlbS5zaXplLm91dGVySGVpZ2h0O1xuICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG59O1xuXG5WZXJ0aWNhbC5wcm90b3R5cGUuX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfTtcbn07XG5cbnJldHVybiBWZXJ0aWNhbDtcblxufSkpO1xuXG4vKiFcbiAqIElzb3RvcGUgdjIuMi4yXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgSXNvdG9wZSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cDovL2lzb3RvcGUubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxNSBNZXRhZml6enlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICAgICAgJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgICAgICdpc290b3BlL2pzL2l0ZW0nLFxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZScsXG4gICAgICAgIC8vIGluY2x1ZGUgZGVmYXVsdCBsYXlvdXQgbW9kZXNcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL21hc29ucnknLFxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MnLFxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnXG4gICAgICBdLFxuICAgICAgZnVuY3Rpb24oIE91dGxheWVyLCBnZXRTaXplLCBtYXRjaGVzU2VsZWN0b3IsIHV0aWxzLCBJdGVtLCBMYXlvdXRNb2RlICkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApO1xuICAgICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJyksXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgcmVxdWlyZSgnLi9pdGVtJyksXG4gICAgICByZXF1aXJlKCcuL2xheW91dC1tb2RlJyksXG4gICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXG4gICAgICByZXF1aXJlKCcuL2xheW91dC1tb2Rlcy9tYXNvbnJ5JyksXG4gICAgICByZXF1aXJlKCcuL2xheW91dC1tb2Rlcy9maXQtcm93cycpLFxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZXMvdmVydGljYWwnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuSXNvdG9wZSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICAgd2luZG93Lklzb3RvcGUuSXRlbSxcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscyxcbiAgSXRlbSwgTGF5b3V0TW9kZSApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHZhcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW0gP1xuICBmdW5jdGlvbiggc3RyICkge1xuICAgIHJldHVybiBzdHIudHJpbSgpO1xuICB9IDpcbiAgZnVuY3Rpb24oIHN0ciApIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCAnJyApO1xuICB9O1xuXG52YXIgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxudmFyIGdldFRleHQgPSBkb2NFbGVtLnRleHRDb250ZW50ID9cbiAgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG4gIH0gOlxuICBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gZWxlbS5pbm5lclRleHQ7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGlzb3RvcGVEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgSXNvdG9wZSA9IE91dGxheWVyLmNyZWF0ZSggJ2lzb3RvcGUnLCB7XG4gICAgbGF5b3V0TW9kZTogXCJtYXNvbnJ5XCIsXG4gICAgaXNKUXVlcnlGaWx0ZXJpbmc6IHRydWUsXG4gICAgc29ydEFzY2VuZGluZzogdHJ1ZVxuICB9KTtcblxuICBJc290b3BlLkl0ZW0gPSBJdGVtO1xuICBJc290b3BlLkxheW91dE1vZGUgPSBMYXlvdXRNb2RlO1xuXG4gIElzb3RvcGUucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcbiAgICAvLyBmdW5jdGlvbnMgdGhhdCBzb3J0IGl0ZW1zXG4gICAgdGhpcy5fc29ydGVycyA9IHt9O1xuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcbiAgICAvLyBjYWxsIHN1cGVyXG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9jcmVhdGUuY2FsbCggdGhpcyApO1xuXG4gICAgLy8gY3JlYXRlIGxheW91dCBtb2Rlc1xuICAgIHRoaXMubW9kZXMgPSB7fTtcbiAgICAvLyBzdGFydCBmaWx0ZXJlZEl0ZW1zIHdpdGggYWxsIGl0ZW1zXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAvLyBrZWVwIG9mIHRyYWNrIG9mIHNvcnRCeXNcbiAgICB0aGlzLnNvcnRIaXN0b3J5ID0gWyAnb3JpZ2luYWwtb3JkZXInIF07XG4gICAgLy8gY3JlYXRlIGZyb20gcmVnaXN0ZXJlZCBsYXlvdXQgbW9kZXNcbiAgICBmb3IgKCB2YXIgbmFtZSBpbiBMYXlvdXRNb2RlLm1vZGVzICkge1xuICAgICAgdGhpcy5faW5pdExheW91dE1vZGUoIG5hbWUgKTtcbiAgICB9XG4gIH07XG5cbiAgSXNvdG9wZS5wcm90b3R5cGUucmVsb2FkSXRlbXMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyByZXNldCBpdGVtIElEIGNvdW50ZXJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcbiAgICAvLyBjYWxsIHN1cGVyXG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLnJlbG9hZEl0ZW1zLmNhbGwoIHRoaXMgKTtcbiAgfTtcblxuICBJc290b3BlLnByb3RvdHlwZS5faXRlbWl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IE91dGxheWVyLnByb3RvdHlwZS5faXRlbWl6ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgLy8gYXNzaWduIElEIGZvciBvcmlnaW5hbC1vcmRlclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGl0ZW0uaWQgPSB0aGlzLml0ZW1HVUlEKys7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbGF5b3V0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgSXNvdG9wZS5wcm90b3R5cGUuX2luaXRMYXlvdXRNb2RlID0gZnVuY3Rpb24oIG5hbWUgKSB7XG4gICAgdmFyIE1vZGUgPSBMYXlvdXRNb2RlLm1vZGVzWyBuYW1lIF07XG4gICAgLy8gc2V0IG1vZGUgb3B0aW9uc1xuICAgIC8vIEhBQ0sgZXh0ZW5kIGluaXRpYWwgb3B0aW9ucywgYmFjay1maWxsIGluIGRlZmF1bHQgb3B0aW9uc1xuICAgIHZhciBpbml0aWFsT3B0cyA9IHRoaXMub3B0aW9uc1sgbmFtZSBdIHx8IHt9O1xuICAgIHRoaXMub3B0aW9uc1sgbmFtZSBdID0gTW9kZS5vcHRpb25zID9cbiAgICAgIHV0aWxzLmV4dGVuZCggTW9kZS5vcHRpb25zLCBpbml0aWFsT3B0cyApIDogaW5pdGlhbE9wdHM7XG4gICAgLy8gaW5pdCBsYXlvdXQgbW9kZSBpbnN0YW5jZVxuICAgIHRoaXMubW9kZXNbIG5hbWUgXSA9IG5ldyBNb2RlKCB0aGlzICk7XG4gIH07XG5cblxuICBJc290b3BlLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBpZiBmaXJzdCB0aW1lIGRvaW5nIGxheW91dCwgZG8gYWxsIG1hZ2ljXG4gICAgaWYgKCAhdGhpcy5faXNMYXlvdXRJbml0ZWQgJiYgdGhpcy5vcHRpb25zLmlzSW5pdExheW91dCApIHtcbiAgICAgIHRoaXMuYXJyYW5nZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9sYXlvdXQoKTtcbiAgfTtcblxuICAvLyBwcml2YXRlIG1ldGhvZCB0byBiZSB1c2VkIGluIGxheW91dCgpICYgbWFnaWMoKVxuICBJc290b3BlLnByb3RvdHlwZS5fbGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZG9uJ3QgYW5pbWF0ZSBmaXJzdCBsYXlvdXRcbiAgICB2YXIgaXNJbnN0YW50ID0gdGhpcy5fZ2V0SXNJbnN0YW50KCk7XG4gICAgLy8gbGF5b3V0IGZsb3dcbiAgICB0aGlzLl9yZXNldExheW91dCgpO1xuICAgIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuICAgIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuZmlsdGVyZWRJdGVtcywgaXNJbnN0YW50ICk7XG5cbiAgICAvLyBmbGFnIGZvciBpbml0YWxpemVkXG4gICAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xuICB9O1xuXG4gIC8vIGZpbHRlciArIHNvcnQgKyBsYXlvdXRcbiAgSXNvdG9wZS5wcm90b3R5cGUuYXJyYW5nZSA9IGZ1bmN0aW9uKCBvcHRzICkge1xuICAgIC8vIHNldCBhbnkgb3B0aW9ucyBwYXNzXG4gICAgdGhpcy5vcHRpb24oIG9wdHMgKTtcbiAgICB0aGlzLl9nZXRJc0luc3RhbnQoKTtcbiAgICAvLyBmaWx0ZXIsIHNvcnQsIGFuZCBsYXlvdXRcblxuICAgIC8vIGZpbHRlclxuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggdGhpcy5pdGVtcyApO1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkLm1hdGNoZXM7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGhpZGVSZXZlYWwoKSB7XG4gICAgICBfdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm5lZWRSZXZlYWwgKTtcbiAgICAgIF90aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XG4gICAgfVxuXG4gICAgdGhpcy5fYmluZEFycmFuZ2VDb21wbGV0ZSgpO1xuXG4gICAgaWYgKCB0aGlzLl9pc0luc3RhbnQgKSB7XG4gICAgICB0aGlzLl9ub1RyYW5zaXRpb24oIGhpZGVSZXZlYWwgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlkZVJldmVhbCgpO1xuICAgIH1cblxuICAgIHRoaXMuX3NvcnQoKTtcbiAgICB0aGlzLl9sYXlvdXQoKTtcbiAgfTtcbiAgLy8gYWxpYXMgdG8gX2luaXQgZm9yIG1haW4gcGx1Z2luIG1ldGhvZFxuICBJc290b3BlLnByb3RvdHlwZS5faW5pdCA9IElzb3RvcGUucHJvdG90eXBlLmFycmFuZ2U7XG5cbiAgLy8gSEFDS1xuICAvLyBEb24ndCBhbmltYXRlL3RyYW5zaXRpb24gZmlyc3QgbGF5b3V0XG4gIC8vIE9yIGRvbid0IGFuaW1hdGUvdHJhbnNpdGlvbiBvdGhlciBsYXlvdXRzXG4gIElzb3RvcGUucHJvdG90eXBlLl9nZXRJc0luc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXNJbnN0YW50ID0gdGhpcy5vcHRpb25zLmlzTGF5b3V0SW5zdGFudCAhPT0gdW5kZWZpbmVkID9cbiAgICAgIHRoaXMub3B0aW9ucy5pc0xheW91dEluc3RhbnQgOiAhdGhpcy5faXNMYXlvdXRJbml0ZWQ7XG4gICAgdGhpcy5faXNJbnN0YW50ID0gaXNJbnN0YW50O1xuICAgIHJldHVybiBpc0luc3RhbnQ7XG4gIH07XG5cbiAgLy8gbGlzdGVuIGZvciBsYXlvdXRDb21wbGV0ZSwgaGlkZUNvbXBsZXRlIGFuZCByZXZlYWxDb21wbGV0ZVxuICAvLyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxuICBJc290b3BlLnByb3RvdHlwZS5fYmluZEFycmFuZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGxpc3RlbiBmb3IgMyBldmVudHMgdG8gdHJpZ2dlciBhcnJhbmdlQ29tcGxldGVcbiAgICB2YXIgaXNMYXlvdXRDb21wbGV0ZSwgaXNIaWRlQ29tcGxldGUsIGlzUmV2ZWFsQ29tcGxldGU7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBmdW5jdGlvbiBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpIHtcbiAgICAgIGlmICggaXNMYXlvdXRDb21wbGV0ZSAmJiBpc0hpZGVDb21wbGV0ZSAmJiBpc1JldmVhbENvbXBsZXRlICkge1xuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCAnYXJyYW5nZUNvbXBsZXRlJywgbnVsbCwgWyBfdGhpcy5maWx0ZXJlZEl0ZW1zIF0gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5vbmNlKCAnbGF5b3V0Q29tcGxldGUnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlzTGF5b3V0Q29tcGxldGUgPSB0cnVlO1xuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcbiAgICB9KTtcbiAgICB0aGlzLm9uY2UoICdoaWRlQ29tcGxldGUnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlzSGlkZUNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XG4gICAgfSk7XG4gICAgdGhpcy5vbmNlKCAncmV2ZWFsQ29tcGxldGUnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlzUmV2ZWFsQ29tcGxldGUgPSB0cnVlO1xuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBmaWx0ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBJc290b3BlLnByb3RvdHlwZS5fZmlsdGVyID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICAgIHZhciBmaWx0ZXIgPSB0aGlzLm9wdGlvbnMuZmlsdGVyO1xuICAgIGZpbHRlciA9IGZpbHRlciB8fCAnKic7XG4gICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICB2YXIgaGlkZGVuTWF0Y2hlZCA9IFtdO1xuICAgIHZhciB2aXNpYmxlVW5tYXRjaGVkID0gW107XG5cbiAgICB2YXIgdGVzdCA9IHRoaXMuX2dldEZpbHRlclRlc3QoIGZpbHRlciApO1xuXG4gICAgLy8gdGVzdCBlYWNoIGl0ZW1cbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG4gICAgICBpZiAoIGl0ZW0uaXNJZ25vcmVkICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCBpdGVtIHRvIGVpdGhlciBtYXRjaGVkIG9yIHVubWF0Y2hlZCBncm91cFxuICAgICAgdmFyIGlzTWF0Y2hlZCA9IHRlc3QoIGl0ZW0gKTtcbiAgICAgIC8vIGl0ZW0uaXNGaWx0ZXJNYXRjaGVkID0gaXNNYXRjaGVkO1xuICAgICAgLy8gYWRkIHRvIG1hdGNoZXMgaWYgaXRzIGEgbWF0Y2hcbiAgICAgIGlmICggaXNNYXRjaGVkICkge1xuICAgICAgICBtYXRjaGVzLnB1c2goIGl0ZW0gKTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCB0byBhZGRpdGlvbmFsIGdyb3VwIGlmIGl0ZW0gbmVlZHMgdG8gYmUgaGlkZGVuIG9yIHJldmVhbGVkXG4gICAgICBpZiAoIGlzTWF0Y2hlZCAmJiBpdGVtLmlzSGlkZGVuICkge1xuICAgICAgICBoaWRkZW5NYXRjaGVkLnB1c2goIGl0ZW0gKTtcbiAgICAgIH0gZWxzZSBpZiAoICFpc01hdGNoZWQgJiYgIWl0ZW0uaXNIaWRkZW4gKSB7XG4gICAgICAgIHZpc2libGVVbm1hdGNoZWQucHVzaCggaXRlbSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJldHVybiBjb2xsZWN0aW9ucyBvZiBpdGVtcyB0byBiZSBtYW5pcHVsYXRlZFxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgbmVlZFJldmVhbDogaGlkZGVuTWF0Y2hlZCxcbiAgICAgIG5lZWRIaWRlOiB2aXNpYmxlVW5tYXRjaGVkXG4gICAgfTtcbiAgfTtcblxuICAvLyBnZXQgYSBqUXVlcnksIGZ1bmN0aW9uLCBvciBhIG1hdGNoZXNTZWxlY3RvciB0ZXN0IGdpdmVuIHRoZSBmaWx0ZXJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2dldEZpbHRlclRlc3QgPSBmdW5jdGlvbiggZmlsdGVyICkge1xuICAgIGlmICggalF1ZXJ5ICYmIHRoaXMub3B0aW9ucy5pc0pRdWVyeUZpbHRlcmluZyApIHtcbiAgICAgIC8vIHVzZSBqUXVlcnlcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcbiAgICAgICAgcmV0dXJuIGpRdWVyeSggaXRlbS5lbGVtZW50ICkuaXMoIGZpbHRlciApO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCB0eXBlb2YgZmlsdGVyID09ICdmdW5jdGlvbicgKSB7XG4gICAgICAvLyB1c2UgZmlsdGVyIGFzIGZ1bmN0aW9uXG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXIoIGl0ZW0uZWxlbWVudCApO1xuICAgICAgfTtcbiAgICB9XG4gICAgLy8gZGVmYXVsdCwgdXNlIGZpbHRlciBhcyBzZWxlY3RvciBzdHJpbmdcbiAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yKCBpdGVtLmVsZW1lbnQsIGZpbHRlciApO1xuICAgIH07XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc29ydGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gZWxlbXNcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgSXNvdG9wZS5wcm90b3R5cGUudXBkYXRlU29ydERhdGEgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gICAgLy8gZ2V0IGl0ZW1zXG4gICAgdmFyIGl0ZW1zO1xuICAgIGlmICggZWxlbXMgKSB7XG4gICAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgICAgIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlIGFsbCBpdGVtcyBpZiBubyBlbGVtcyBwcm92aWRlZFxuICAgICAgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIH1cblxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcbiAgICB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKCBpdGVtcyApO1xuICB9O1xuXG4gIElzb3RvcGUucHJvdG90eXBlLl9nZXRTb3J0ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5vcHRpb25zLmdldFNvcnREYXRhO1xuICAgIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XG4gICAgICB2YXIgc29ydGVyID0gZ2V0U29ydERhdGFbIGtleSBdO1xuICAgICAgdGhpcy5fc29ydGVyc1sga2V5IF0gPSBtdW5nZVNvcnRlciggc29ydGVyICk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gaXRlbXMgLSBvZiBJc290b3BlLkl0ZW1zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBJc290b3BlLnByb3RvdHlwZS5fdXBkYXRlSXRlbXNTb3J0RGF0YSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgICAvLyBkbyBub3QgdXBkYXRlIGlmIG5vIGl0ZW1zXG4gICAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgaXRlbS51cGRhdGVTb3J0RGF0YSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLSBtdW5nZSBzb3J0ZXIgLS0tLS0gLy9cblxuICAvLyBlbmNhcHN1bGF0ZSB0aGlzLCBhcyB3ZSBqdXN0IG5lZWQgbXVuZ2VTb3J0ZXJcbiAgLy8gb3RoZXIgZnVuY3Rpb25zIGluIGhlcmUgYXJlIGp1c3QgZm9yIG11bmdpbmdcbiAgdmFyIG11bmdlU29ydGVyID0gKCBmdW5jdGlvbigpIHtcbiAgICAvLyBhZGQgYSBtYWdpYyBsYXllciB0byBzb3J0ZXJzIGZvciBjb252aWVuZW50IHNob3J0aGFuZHNcbiAgICAvLyBgLmZvby1iYXJgIHdpbGwgdXNlIHRoZSB0ZXh0IG9mIC5mb28tYmFyIHF1ZXJ5U2VsZWN0b3JcbiAgICAvLyBgW2Zvby1iYXJdYCB3aWxsIHVzZSBhdHRyaWJ1dGVcbiAgICAvLyB5b3UgY2FuIGFsc28gYWRkIHBhcnNlclxuICAgIC8vIGAuZm9vLWJhciBwYXJzZUludGAgd2lsbCBwYXJzZSB0aGF0IGFzIGEgbnVtYmVyXG4gICAgZnVuY3Rpb24gbXVuZ2VTb3J0ZXIoIHNvcnRlciApIHtcbiAgICAgIC8vIGlmIG5vdCBhIHN0cmluZywgcmV0dXJuIGZ1bmN0aW9uIG9yIHdoYXRldmVyIGl0IGlzXG4gICAgICBpZiAoIHR5cGVvZiBzb3J0ZXIgIT0gJ3N0cmluZycgKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZXI7XG4gICAgICB9XG4gICAgICAvLyBwYXJzZSB0aGUgc29ydGVyIHN0cmluZ1xuICAgICAgdmFyIGFyZ3MgPSB0cmltKCBzb3J0ZXIgKS5zcGxpdCgnICcpO1xuICAgICAgdmFyIHF1ZXJ5ID0gYXJnc1swXTtcbiAgICAgIC8vIGNoZWNrIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2FuLWF0dHJpYnV0ZV1cbiAgICAgIHZhciBhdHRyTWF0Y2ggPSBxdWVyeS5tYXRjaCggL15cXFsoLispXFxdJC8gKTtcbiAgICAgIHZhciBhdHRyID0gYXR0ck1hdGNoICYmIGF0dHJNYXRjaFsxXTtcbiAgICAgIHZhciBnZXRWYWx1ZSA9IGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApO1xuICAgICAgLy8gdXNlIHNlY29uZCBhcmd1bWVudCBhcyBhIHBhcnNlclxuICAgICAgdmFyIHBhcnNlciA9IElzb3RvcGUuc29ydERhdGFQYXJzZXJzWyBhcmdzWzFdIF07XG4gICAgICAvLyBwYXJzZSB0aGUgdmFsdWUsIGlmIHRoZXJlIHdhcyBhIHBhcnNlclxuICAgICAgc29ydGVyID0gcGFyc2VyID8gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBlbGVtICYmIHBhcnNlciggZ2V0VmFsdWUoIGVsZW0gKSApO1xuICAgICAgfSA6XG4gICAgICAvLyBvdGhlcndpc2UganVzdCByZXR1cm4gdmFsdWVcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICByZXR1cm4gZWxlbSAmJiBnZXRWYWx1ZSggZWxlbSApO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNvcnRlcjtcbiAgICB9XG5cbiAgICAvLyBnZXQgYW4gYXR0cmlidXRlIGdldHRlciwgb3IgZ2V0IHRleHQgb2YgdGhlIHF1ZXJ5U2VsZWN0b3JcbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKSB7XG4gICAgICB2YXIgZ2V0VmFsdWU7XG4gICAgICAvLyBpZiBxdWVyeSBsb29rcyBsaWtlIFtmb28tYmFyXSwgZ2V0IGF0dHJpYnV0ZVxuICAgICAgaWYgKCBhdHRyICkge1xuICAgICAgICBnZXRWYWx1ZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggYXR0ciApO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgaXRzIGEgcXVlcnlTZWxlY3RvciwgYW5kIGdldCBpdHMgdGV4dFxuICAgICAgICBnZXRWYWx1ZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICAgIHZhciBjaGlsZCA9IGVsZW0ucXVlcnlTZWxlY3RvciggcXVlcnkgKTtcbiAgICAgICAgICByZXR1cm4gY2hpbGQgJiYgZ2V0VGV4dCggY2hpbGQgKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbXVuZ2VTb3J0ZXI7XG4gIH0pKCk7XG5cbiAgLy8gcGFyc2VycyB1c2VkIGluIGdldFNvcnREYXRhIHNob3J0Y3V0IHN0cmluZ3NcbiAgSXNvdG9wZS5zb3J0RGF0YVBhcnNlcnMgPSB7XG4gICAgJ3BhcnNlSW50JzogZnVuY3Rpb24oIHZhbCApIHtcbiAgICAgIHJldHVybiBwYXJzZUludCggdmFsLCAxMCApO1xuICAgIH0sXG4gICAgJ3BhcnNlRmxvYXQnOiBmdW5jdGlvbiggdmFsICkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoIHZhbCApO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLSBzb3J0IG1ldGhvZCAtLS0tLSAvL1xuXG4gIC8vIHNvcnQgZmlsdGVyZWRJdGVtIG9yZGVyXG4gIElzb3RvcGUucHJvdG90eXBlLl9zb3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvcnRCeU9wdCA9IHRoaXMub3B0aW9ucy5zb3J0Qnk7XG4gICAgaWYgKCAhc29ydEJ5T3B0ICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBjb25jYXQgYWxsIHNvcnRCeSBhbmQgc29ydEhpc3RvcnlcbiAgICB2YXIgc29ydEJ5cyA9IFtdLmNvbmNhdC5hcHBseSggc29ydEJ5T3B0LCB0aGlzLnNvcnRIaXN0b3J5ICk7XG4gICAgLy8gc29ydCBtYWdpY1xuICAgIHZhciBpdGVtU29ydGVyID0gZ2V0SXRlbVNvcnRlciggc29ydEJ5cywgdGhpcy5vcHRpb25zLnNvcnRBc2NlbmRpbmcgKTtcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMuc29ydCggaXRlbVNvcnRlciApO1xuICAgIC8vIGtlZXAgdHJhY2sgb2Ygc29ydEJ5IEhpc3RvcnlcbiAgICBpZiAoIHNvcnRCeU9wdCAhPSB0aGlzLnNvcnRIaXN0b3J5WzBdICkge1xuICAgICAgLy8gYWRkIHRvIGZyb250LCBvbGRlc3QgZ29lcyBpbiBsYXN0XG4gICAgICB0aGlzLnNvcnRIaXN0b3J5LnVuc2hpZnQoIHNvcnRCeU9wdCApO1xuICAgIH1cbiAgfTtcblxuICAvLyByZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCBmb3Igc29ydGluZ1xuICBmdW5jdGlvbiBnZXRJdGVtU29ydGVyKCBzb3J0QnlzLCBzb3J0QXNjICkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzb3J0ZXIoIGl0ZW1BLCBpdGVtQiApIHtcbiAgICAgIC8vIGN5Y2xlIHRocm91Z2ggYWxsIHNvcnRLZXlzXG4gICAgICBmb3IgKCB2YXIgaSA9IDAsIGxlbiA9IHNvcnRCeXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICAgIHZhciBzb3J0QnkgPSBzb3J0QnlzW2ldO1xuICAgICAgICB2YXIgYSA9IGl0ZW1BLnNvcnREYXRhWyBzb3J0QnkgXTtcbiAgICAgICAgdmFyIGIgPSBpdGVtQi5zb3J0RGF0YVsgc29ydEJ5IF07XG4gICAgICAgIGlmICggYSA+IGIgfHwgYSA8IGIgKSB7XG4gICAgICAgICAgLy8gaWYgc29ydEFzYyBpcyBhbiBvYmplY3QsIHVzZSB0aGUgdmFsdWUgZ2l2ZW4gdGhlIHNvcnRCeSBrZXlcbiAgICAgICAgICB2YXIgaXNBc2NlbmRpbmcgPSBzb3J0QXNjWyBzb3J0QnkgXSAhPT0gdW5kZWZpbmVkID8gc29ydEFzY1sgc29ydEJ5IF0gOiBzb3J0QXNjO1xuICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpc0FzY2VuZGluZyA/IDEgOiAtMTtcbiAgICAgICAgICByZXR1cm4gKCBhID4gYiA/IDEgOiAtMSApICogZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIGdldCBsYXlvdXQgbW9kZVxuICBJc290b3BlLnByb3RvdHlwZS5fbW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsYXlvdXRNb2RlID0gdGhpcy5vcHRpb25zLmxheW91dE1vZGU7XG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGVzWyBsYXlvdXRNb2RlIF07XG4gICAgaWYgKCAhbW9kZSApIHtcbiAgICAgIC8vIFRPRE8gY29uc29sZS5lcnJvclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm8gbGF5b3V0IG1vZGU6ICcgKyBsYXlvdXRNb2RlICk7XG4gICAgfVxuICAgIC8vIEhBQ0sgc3luYyBtb2RlJ3Mgb3B0aW9uc1xuICAgIC8vIGFueSBvcHRpb25zIHNldCBhZnRlciBpbml0IGZvciBsYXlvdXQgbW9kZSBuZWVkIHRvIGJlIHN5bmNlZFxuICAgIG1vZGUub3B0aW9ucyA9IHRoaXMub3B0aW9uc1sgbGF5b3V0TW9kZSBdO1xuICAgIHJldHVybiBtb2RlO1xuICB9O1xuXG4gIElzb3RvcGUucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHRyaWdnZXIgb3JpZ2luYWwgcmVzZXQgbGF5b3V0XG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dC5jYWxsKCB0aGlzICk7XG4gICAgdGhpcy5fbW9kZSgpLl9yZXNldExheW91dCgpO1xuICB9O1xuXG4gIElzb3RvcGUucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSAgKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XG4gIH07XG5cbiAgSXNvdG9wZS5wcm90b3R5cGUuX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xuICAgIHRoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAoIHN0YW1wICk7XG4gIH07XG5cbiAgSXNvdG9wZS5wcm90b3R5cGUuX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLl9nZXRDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgSXNvdG9wZS5wcm90b3R5cGUubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCk7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkaW5nICYgcmVtb3ZpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvLyBIRUFEUyBVUCBvdmVyd3JpdGVzIGRlZmF1bHQgT3V0bGF5ZXIgYXBwZW5kZWRcbiAgSXNvdG9wZS5wcm90b3R5cGUuYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZpbHRlciwgbGF5b3V0LCByZXZlYWwgbmV3IGl0ZW1zXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcbiAgICAvLyBhZGQgdG8gZmlsdGVyZWRJdGVtc1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuZmlsdGVyZWRJdGVtcy5jb25jYXQoIGZpbHRlcmVkSXRlbXMgKTtcbiAgfTtcblxuICAvLyBIRUFEUyBVUCBvdmVyd3JpdGVzIGRlZmF1bHQgT3V0bGF5ZXIgcHJlcGVuZGVkXG4gIElzb3RvcGUucHJvdG90eXBlLnByZXBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnQgbmV3IGxheW91dFxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XG4gICAgLy8gZmlsdGVyLCBsYXlvdXQsIHJldmVhbCBuZXcgaXRlbXNcbiAgICB2YXIgZmlsdGVyZWRJdGVtcyA9IHRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKCBpdGVtcyApO1xuICAgIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xuICAgIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuZmlsdGVyZWRJdGVtcyApO1xuICAgIC8vIGFkZCB0byBpdGVtcyBhbmQgZmlsdGVyZWRJdGVtc1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkSXRlbXMuY29uY2F0KCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCB0aGlzLml0ZW1zICk7XG4gIH07XG5cbiAgSXNvdG9wZS5wcm90b3R5cGUuX2ZpbHRlclJldmVhbEFkZGVkID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKTtcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XG4gICAgLy8gcmV2ZWFsIGFsbCBuZXcgaXRlbXNcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubWF0Y2hlcyApO1xuICAgIC8vIGxheW91dCBuZXcgaXRlbXMsIG5vIHRyYW5zaXRpb25cbiAgICB0aGlzLmxheW91dEl0ZW1zKCBmaWx0ZXJlZC5tYXRjaGVzLCB0cnVlICk7XG4gICAgcmV0dXJuIGZpbHRlcmVkLm1hdGNoZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZpbHRlciwgc29ydCwgYW5kIGxheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAgICovXG4gIElzb3RvcGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYXBwZW5kIGl0ZW0gZWxlbWVudHNcbiAgICB2YXIgaSwgaXRlbTtcbiAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCBpdGVtLmVsZW1lbnQgKTtcbiAgICB9XG4gICAgLy8gZmlsdGVyIG5ldyBzdHVmZlxuICAgIHZhciBmaWx0ZXJlZEluc2VydEl0ZW1zID0gdGhpcy5fZmlsdGVyKCBpdGVtcyApLm1hdGNoZXM7XG4gICAgLy8gc2V0IGZsYWdcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGl0ZW1zW2ldLmlzTGF5b3V0SW5zdGFudCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuYXJyYW5nZSgpO1xuICAgIC8vIHJlc2V0IGZsYWdcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGRlbGV0ZSBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQ7XG4gICAgfVxuICAgIHRoaXMucmV2ZWFsKCBmaWx0ZXJlZEluc2VydEl0ZW1zICk7XG4gIH07XG5cbiAgdmFyIF9yZW1vdmUgPSBJc290b3BlLnByb3RvdHlwZS5yZW1vdmU7XG4gIElzb3RvcGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuICAgIC8vIGRvIHJlZ3VsYXIgdGhpbmdcbiAgICBfcmVtb3ZlLmNhbGwoIHRoaXMsIGVsZW1zICk7XG4gICAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcbiAgICB2YXIgbGVuID0gcmVtb3ZlSXRlbXMgJiYgcmVtb3ZlSXRlbXMubGVuZ3RoO1xuICAgIGlmICggIWxlbiApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIGVsZW1zIGZyb20gZmlsdGVyZWRJdGVtc1xuICAgIGZvciAoIHZhciBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIHZhciBpdGVtID0gcmVtb3ZlSXRlbXNbaV07XG4gICAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cbiAgICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuZmlsdGVyZWRJdGVtcywgaXRlbSApO1xuICAgIH1cbiAgfTtcblxuICBJc290b3BlLnByb3RvdHlwZS5zaHVmZmxlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gdXBkYXRlIHJhbmRvbSBzb3J0RGF0YVxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XG4gICAgICBpdGVtLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucy5zb3J0QnkgPSAncmFuZG9tJztcbiAgICB0aGlzLl9zb3J0KCk7XG4gICAgdGhpcy5fbGF5b3V0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHRyaWdnZXIgZm4gd2l0aG91dCB0cmFuc2l0aW9uXG4gICAqIGtpbmQgb2YgaGFja3kgdG8gaGF2ZSB0aGlzIGluIHRoZSBmaXJzdCBwbGFjZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcmV0dXJucyByZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIElzb3RvcGUucHJvdG90eXBlLl9ub1RyYW5zaXRpb24gPSBmdW5jdGlvbiggZm4gKSB7XG4gICAgLy8gc2F2ZSB0cmFuc2l0aW9uRHVyYXRpb24gYmVmb3JlIGRpc2FibGluZ1xuICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIC8vIGRpc2FibGUgdHJhbnNpdGlvblxuICAgIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgIC8vIGRvIGl0XG4gICAgdmFyIHJldHVyblZhbHVlID0gZm4uY2FsbCggdGhpcyApO1xuICAgIC8vIHJlLWVuYWJsZSB0cmFuc2l0aW9uIGZvciByZXZlYWxcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfTtcblxuICAvLyAtLS0tLSBoZWxwZXIgbWV0aG9kcyAtLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGZpbHRlcmVkIGl0ZW0gZWxlbWVudHNcbiAgICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICAgKi9cbiAgSXNvdG9wZS5wcm90b3R5cGUuZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbXMgPSBbXTtcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmZpbHRlcmVkSXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICBlbGVtcy5wdXNoKCB0aGlzLmZpbHRlcmVkSXRlbXNbaV0uZWxlbWVudCApO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbXM7XG4gIH07XG5cbiAgLy8gLS0tLS0gIC0tLS0tIC8vXG5cbiAgcmV0dXJuIElzb3RvcGU7XG5cbn0pKTtcbi8qIVxuICogU2xpY2tOYXYgUmVzcG9uc2l2ZSBNb2JpbGUgTWVudSB2MS4wLjVcbiAqIChjKSAyMDE1IEpvc2ggQ29wZVxuICogbGljZW5zZWQgdW5kZXIgTUlUXG4gKi9cbjsoZnVuY3Rpb24gKCQsIGRvY3VtZW50LCB3aW5kb3cpIHtcbiAgICB2YXJcbiAgICAvLyBkZWZhdWx0IHNldHRpbmdzIG9iamVjdC5cbiAgICAgICAgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBsYWJlbDogJ01FTlUnLFxuICAgICAgICAgICAgZHVwbGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgZHVyYXRpb246IDIwMCxcbiAgICAgICAgICAgIGVhc2luZ09wZW46ICdzd2luZycsXG4gICAgICAgICAgICBlYXNpbmdDbG9zZTogJ3N3aW5nJyxcbiAgICAgICAgICAgIGNsb3NlZFN5bWJvbDogJyYjOTY1ODsnLFxuICAgICAgICAgICAgb3BlbmVkU3ltYm9sOiAnJiM5NjYwOycsXG4gICAgICAgICAgICBwcmVwZW5kVG86ICdib2R5JyxcbiAgICAgICAgICAgIGFwcGVuZFRvOiAnJyxcbiAgICAgICAgICAgIHBhcmVudFRhZzogJ2EnLFxuICAgICAgICAgICAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93UGFyZW50TGlua3M6IGZhbHNlLFxuICAgICAgICAgICAgbmVzdGVkUGFyZW50TGlua3M6IHRydWUsXG4gICAgICAgICAgICBzaG93Q2hpbGRyZW46IGZhbHNlLFxuICAgICAgICAgICAgcmVtb3ZlSWRzOiBmYWxzZSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXM6IGZhbHNlLFxuICAgICAgICAgICAgcmVtb3ZlU3R5bGVzOiBmYWxzZSxcblx0XHRcdGJyYW5kOiAnJyxcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICAgICAgYmVmb3JlT3BlbjogZnVuY3Rpb24gKCkge30sXG4gICAgICAgICAgICBiZWZvcmVDbG9zZTogZnVuY3Rpb24gKCkge30sXG4gICAgICAgICAgICBhZnRlck9wZW46IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICAgICAgYWZ0ZXJDbG9zZTogZnVuY3Rpb24gKCkge31cbiAgICAgICAgfSxcbiAgICAgICAgbW9iaWxlTWVudSA9ICdzbGlja25hdicsXG4gICAgICAgIHByZWZpeCA9ICdzbGlja25hdic7XG5cbiAgICBmdW5jdGlvbiBQbHVnaW4oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICAgIC8vIGpRdWVyeSBoYXMgYW4gZXh0ZW5kIG1ldGhvZCB3aGljaCBtZXJnZXMgdGhlIGNvbnRlbnRzIG9mIHR3byBvclxuICAgICAgICAvLyBtb3JlIG9iamVjdHMsIHN0b3JpbmcgdGhlIHJlc3VsdCBpbiB0aGUgZmlyc3Qgb2JqZWN0LiBUaGUgZmlyc3Qgb2JqZWN0XG4gICAgICAgIC8vIGlzIGdlbmVyYWxseSBlbXB0eSBhcyB3ZSBkb24ndCB3YW50IHRvIGFsdGVyIHRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yXG4gICAgICAgIC8vIGZ1dHVyZSBpbnN0YW5jZXMgb2YgdGhlIHBsdWdpblxuICAgICAgICB0aGlzLnNldHRpbmdzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgICAgICB0aGlzLl9uYW1lID0gbW9iaWxlTWVudTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBtZW51ID0gJCh0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgICAgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgICAgICAgaWNvbkNsYXNzLFxuICAgICAgICAgICAgbWVudUJhcjtcblxuICAgICAgICAvLyBjbG9uZSBtZW51IGlmIG5lZWRlZFxuICAgICAgICBpZiAoc2V0dGluZ3MuZHVwbGljYXRlKSB7XG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYgPSBtZW51LmNsb25lKCk7XG4gICAgICAgICAgICAvL3JlbW92ZSBpZHMgZnJvbSBjbG9uZSB0byBwcmV2ZW50IGNzcyBpc3N1ZXNcbiAgICAgICAgICAgICR0aGlzLm1vYmlsZU5hdi5yZW1vdmVBdHRyKCdpZCcpO1xuICAgICAgICAgICAgJHRoaXMubW9iaWxlTmF2LmZpbmQoJyonKS5lYWNoKGZ1bmN0aW9uIChpLCBlKSB7XG4gICAgICAgICAgICAgICAgJChlKS5yZW1vdmVBdHRyKCdpZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYgPSBtZW51O1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgaWRzIGlmIHNldFxuICAgICAgICAgICAgJHRoaXMubW9iaWxlTmF2LnJlbW92ZUF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcbiAgICAgICAgICAgICAgICAkKGUpLnJlbW92ZUF0dHIoJ2lkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBjbGFzc2VzIGlmIHNldFxuICAgICAgICBpZiAoc2V0dGluZ3MucmVtb3ZlQ2xhc3Nlcykge1xuICAgICAgICAgICAgJHRoaXMubW9iaWxlTmF2LnJlbW92ZUF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcbiAgICAgICAgICAgICAgICAkKGUpLnJlbW92ZUF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gcmVtb3ZlIHN0eWxlcyBpZiBzZXRcbiAgICAgICAgaWYgKHNldHRpbmdzLnJlbW92ZVN0eWxlcykge1xuICAgICAgICAgICAgJHRoaXMubW9iaWxlTmF2LnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcbiAgICAgICAgICAgICAgICAkKGUpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0eWxpbmcgY2xhc3MgZm9yIHRoZSBidXR0b25cbiAgICAgICAgaWNvbkNsYXNzID0gcHJlZml4ICsgJ19pY29uJztcblxuICAgICAgICBpZiAoc2V0dGluZ3MubGFiZWwgPT09ICcnKSB7XG4gICAgICAgICAgICBpY29uQ2xhc3MgKz0gJyAnICsgcHJlZml4ICsgJ19uby10ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5wYXJlbnRUYWcgPT0gJ2EnKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5wYXJlbnRUYWcgPSAnYSBocmVmPVwiI1wiJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNyZWF0ZSBtZW51IGJhclxuICAgICAgICAkdGhpcy5tb2JpbGVOYXYuYXR0cignY2xhc3MnLCBwcmVmaXggKyAnX25hdicpO1xuICAgICAgICBtZW51QmFyID0gJCgnPGRpdiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX21lbnVcIj48L2Rpdj4nKTtcblx0XHRpZiAoc2V0dGluZ3MuYnJhbmQgIT09ICcnKSB7XG5cdFx0XHR2YXIgYnJhbmQgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIHByZWZpeCArICdfYnJhbmRcIj4nK3NldHRpbmdzLmJyYW5kKyc8L2Rpdj4nKTtcblx0XHRcdCQobWVudUJhcikuYXBwZW5kKGJyYW5kKTtcblx0XHR9XG4gICAgICAgICR0aGlzLmJ0biA9ICQoXG4gICAgICAgICAgICBbJzwnICsgc2V0dGluZ3MucGFyZW50VGFnICsgJyBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwiJyArIHByZWZpeCArICdfYnRuICcgKyBwcmVmaXggKyAnX2NvbGxhcHNlZFwiPicsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIHByZWZpeCArICdfbWVudXR4dFwiPicgKyBzZXR0aW5ncy5sYWJlbCArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCInICsgaWNvbkNsYXNzICsgJ1wiPicsXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX2ljb24tYmFyXCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX2ljb24tYmFyXCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX2ljb24tYmFyXCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgJzwvJyArIHNldHRpbmdzLnBhcmVudFRhZyArICc+J1xuICAgICAgICAgICAgXS5qb2luKCcnKVxuICAgICAgICApO1xuICAgICAgICAkKG1lbnVCYXIpLmFwcGVuZCgkdGhpcy5idG4pO1xuICAgICAgICBpZihzZXR0aW5ncy5hcHBlbmRUbyAhPT0gJycpIHtcbiAgICAgICAgICAgICQoc2V0dGluZ3MuYXBwZW5kVG8pLmFwcGVuZChtZW51QmFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoc2V0dGluZ3MucHJlcGVuZFRvKS5wcmVwZW5kKG1lbnVCYXIpO1xuICAgICAgICB9XG4gICAgICAgIG1lbnVCYXIuYXBwZW5kKCR0aGlzLm1vYmlsZU5hdik7XG5cbiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHN0cnVjdHVyZSBhZGRpbmcgYWRkaXRpb25hbCBzdHJ1Y3R1cmVcbiAgICAgICAgdmFyIGl0ZW1zID0gJHRoaXMubW9iaWxlTmF2LmZpbmQoJ2xpJyk7XG4gICAgICAgICQoaXRlbXMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgIGRhdGEgPSB7fTtcbiAgICAgICAgICAgIGRhdGEuY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuKCd1bCcpLmF0dHIoJ3JvbGUnLCAnbWVudScpO1xuICAgICAgICAgICAgaXRlbS5kYXRhKCdtZW51JywgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIGlmIGEgbGlzdCBpdGVtIGhhcyBhIG5lc3RlZCBtZW51XG4gICAgICAgICAgICBpZiAoZGF0YS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYWxsIHRleHQgYmVmb3JlIHRoZSBjaGlsZCBtZW51XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGFuY2hvcnNcblxuICAgICAgICAgICAgICAgIHZhciBhID0gaXRlbS5jb250ZW50cygpLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluc0FuY2hvciA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBub2RlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgJChhKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkKHRoaXMpLmlzKCd1bCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoJCh0aGlzKS5pcyhcImFcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zQW5jaG9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBFbGVtZW50ID0gJChcbiAgICAgICAgICAgICAgICAgICAgJzwnICsgc2V0dGluZ3MucGFyZW50VGFnICsgJyByb2xlPVwibWVudWl0ZW1cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX2l0ZW1cIi8+J1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvLyB3cmFwIGl0ZW0gdGV4dCB3aXRoIHRhZyBhbmQgYWRkIGNsYXNzZXMgdW5sZXNzIHdlIGFyZSBzZXBhcmF0aW5nIHBhcmVudCBsaW5rc1xuICAgICAgICAgICAgICAgIGlmICgoIXNldHRpbmdzLmFsbG93UGFyZW50TGlua3MgfHwgc2V0dGluZ3MubmVzdGVkUGFyZW50TGlua3MpIHx8ICFjb250YWluc0FuY2hvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHdyYXAgPSAkKG5vZGVzKS53cmFwQWxsKHdyYXBFbGVtZW50KS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgJHdyYXAuYWRkQ2xhc3MocHJlZml4Kydfcm93Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICQobm9kZXMpLndyYXBBbGwoJzxzcGFuIGNsYXNzPVwiJytwcmVmaXgrJ19wYXJlbnQtbGluayAnK3ByZWZpeCsnX3Jvd1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3Muc2hvd0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYWRkQ2xhc3MocHJlZml4KydfY29sbGFwc2VkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyhwcmVmaXgrJ19vcGVuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyhwcmVmaXgrJ19wYXJlbnQnKTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBwYXJlbnQgYXJyb3cuIHdyYXAgd2l0aCBsaW5rIGlmIHBhcmVudCBsaW5rcyBhbmQgc2VwYXJhdGluZ1xuICAgICAgICAgICAgICAgIHZhciBhcnJvd0VsZW1lbnQgPSAkKCc8c3BhbiBjbGFzcz1cIicrcHJlZml4KydfYXJyb3dcIj4nKyhzZXR0aW5ncy5zaG93Q2hpbGRyZW4/c2V0dGluZ3Mub3BlbmVkU3ltYm9sOnNldHRpbmdzLmNsb3NlZFN5bWJvbCkrJzwvc3Bhbj4nKTtcblxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5hbGxvd1BhcmVudExpbmtzICYmICFzZXR0aW5ncy5uZXN0ZWRQYXJlbnRMaW5rcyAmJiBjb250YWluc0FuY2hvcilcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50LndyYXAod3JhcEVsZW1lbnQpLnBhcmVudCgpO1xuXG4gICAgICAgICAgICAgICAgLy9hcHBlbmQgYXJyb3dcbiAgICAgICAgICAgICAgICAkKG5vZGVzKS5sYXN0KCkuYWZ0ZXIoYXJyb3dFbGVtZW50KTtcblxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBpdGVtLmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgIGl0ZW0uYWRkQ2xhc3MocHJlZml4KydfdHh0bm9kZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhY2Nlc3NpYmlsaXR5IGZvciBsaW5rc1xuICAgICAgICAgICAgaXRlbS5jaGlsZHJlbignYScpLmF0dHIoJ3JvbGUnLCAnbWVudWl0ZW0nKS5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgLy9FbnN1cmUgdGhhdCBpdCdzIG5vdCBhIHBhcmVudFxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5jbG9zZU9uQ2xpY2sgJiYgISQoZXZlbnQudGFyZ2V0KS5wYXJlbnQoKS5jbG9zZXN0KCdsaScpLmhhc0NsYXNzKHByZWZpeCsnX3BhcmVudCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL0VtdWxhdGUgbWVudSBjbG9zZSBpZiBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJHRoaXMuYnRuKS5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9hbHNvIGNsb3NlIG9uIGNsaWNrIGlmIHBhcmVudCBsaW5rcyBhcmUgc2V0XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuY2xvc2VPbkNsaWNrICYmIHNldHRpbmdzLmFsbG93UGFyZW50TGlua3MpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuKCdhJykuY2hpbGRyZW4oJ2EnKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9FbXVsYXRlIG1lbnUgY2xvc2VcbiAgICAgICAgICAgICAgICAgICAgJCgkdGhpcy5idG4pLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdGVtLmZpbmQoJy4nK3ByZWZpeCsnX3BhcmVudC1saW5rIGE6bm90KC4nK3ByZWZpeCsnX2l0ZW0pJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAvL0VtdWxhdGUgbWVudSBjbG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgJCgkdGhpcy5idG4pLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHN0cnVjdHVyZSBpcyBpbiBwbGFjZSwgbm93IGhpZGUgYXBwcm9wcmlhdGUgaXRlbXNcbiAgICAgICAgJChpdGVtcykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YSgnbWVudScpO1xuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5zaG93Q2hpbGRyZW4pe1xuICAgICAgICAgICAgICAgICR0aGlzLl92aXNpYmlsaXR5VG9nZ2xlKGRhdGEuY2hpbGRyZW4sIG51bGwsIGZhbHNlLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZmluYWxseSB0b2dnbGUgZW50aXJlIG1lbnVcbiAgICAgICAgJHRoaXMuX3Zpc2liaWxpdHlUb2dnbGUoJHRoaXMubW9iaWxlTmF2LCBudWxsLCBmYWxzZSwgJ2luaXQnLCB0cnVlKTtcblxuICAgICAgICAvLyBhY2Nlc3NpYmlsaXR5IGZvciBtZW51IGJ1dHRvblxuICAgICAgICAkdGhpcy5tb2JpbGVOYXYuYXR0cigncm9sZScsJ21lbnUnKTtcblxuICAgICAgICAvLyBvdXRsaW5lIHByZXZlbnRpb24gd2hlbiB1c2luZyBtb3VzZVxuICAgICAgICAkKGRvY3VtZW50KS5tb3VzZWRvd24oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICR0aGlzLl9vdXRsaW5lcyhmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLmtleXVwKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkdGhpcy5fb3V0bGluZXModHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG1lbnUgYnV0dG9uIGNsaWNrXG4gICAgICAgICQoJHRoaXMuYnRuKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJHRoaXMuX21lbnVUb2dnbGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2xpY2sgb24gbWVudSBwYXJlbnRcbiAgICAgICAgJHRoaXMubW9iaWxlTmF2Lm9uKCdjbGljaycsICcuJyArIHByZWZpeCArICdfaXRlbScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkdGhpcy5faXRlbUNsaWNrKCQodGhpcykpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjaGVjayBmb3IgZW50ZXIga2V5IG9uIG1lbnUgYnV0dG9uIGFuZCBtZW51IHBhcmVudHNcbiAgICAgICAgJCgkdGhpcy5idG4pLmtleWRvd24oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBldiA9IGUgfHwgZXZlbnQ7XG4gICAgICAgICAgICBpZihldi5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICR0aGlzLl9tZW51VG9nZ2xlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICR0aGlzLm1vYmlsZU5hdi5vbigna2V5ZG93bicsICcuJytwcmVmaXgrJ19pdGVtJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGV2ID0gZSB8fCBldmVudDtcbiAgICAgICAgICAgIGlmKGV2LmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJHRoaXMuX2l0ZW1DbGljaygkKGUudGFyZ2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFsbG93IGxpbmtzIGNsaWNrYWJsZSB3aXRoaW4gcGFyZW50IHRhZ3MgaWYgc2V0XG4gICAgICAgIGlmIChzZXR0aW5ncy5hbGxvd1BhcmVudExpbmtzICYmIHNldHRpbmdzLm5lc3RlZFBhcmVudExpbmtzKSB7XG4gICAgICAgICAgICAkKCcuJytwcmVmaXgrJ19pdGVtIGEnKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vdG9nZ2xlIG1lbnVcbiAgICBQbHVnaW4ucHJvdG90eXBlLl9tZW51VG9nZ2xlID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBidG4gPSAkdGhpcy5idG47XG4gICAgICAgIHZhciBtb2JpbGVOYXYgPSAkdGhpcy5tb2JpbGVOYXY7XG5cbiAgICAgICAgaWYgKGJ0bi5oYXNDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKSkge1xuICAgICAgICAgICAgYnRuLnJlbW92ZUNsYXNzKHByZWZpeCsnX2NvbGxhcHNlZCcpO1xuICAgICAgICAgICAgYnRuLmFkZENsYXNzKHByZWZpeCsnX29wZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ0bi5yZW1vdmVDbGFzcyhwcmVmaXgrJ19vcGVuJyk7XG4gICAgICAgICAgICBidG4uYWRkQ2xhc3MocHJlZml4KydfY29sbGFwc2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnRuLmFkZENsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xuICAgICAgICAkdGhpcy5fdmlzaWJpbGl0eVRvZ2dsZShtb2JpbGVOYXYsIGJ0bi5wYXJlbnQoKSwgdHJ1ZSwgYnRuKTtcbiAgICB9O1xuXG4gICAgLy8gdG9nZ2xlIGNsaWNrZWQgaXRlbXNcbiAgICBQbHVnaW4ucHJvdG90eXBlLl9pdGVtQ2xpY2sgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyICR0aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNldHRpbmdzID0gJHRoaXMuc2V0dGluZ3M7XG4gICAgICAgIHZhciBkYXRhID0gZWwuZGF0YSgnbWVudScpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSB7fTtcbiAgICAgICAgICAgIGRhdGEuYXJyb3cgPSBlbC5jaGlsZHJlbignLicrcHJlZml4KydfYXJyb3cnKTtcbiAgICAgICAgICAgIGRhdGEudWwgPSBlbC5uZXh0KCd1bCcpO1xuICAgICAgICAgICAgZGF0YS5wYXJlbnQgPSBlbC5wYXJlbnQoKTtcbiAgICAgICAgICAgIC8vU2VwYXJhdGVkIHBhcmVudCBsaW5rIHN0cnVjdHVyZVxuICAgICAgICAgICAgaWYgKGRhdGEucGFyZW50Lmhhc0NsYXNzKHByZWZpeCsnX3BhcmVudC1saW5rJykpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnBhcmVudCA9IGVsLnBhcmVudCgpLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIGRhdGEudWwgPSBlbC5wYXJlbnQoKS5uZXh0KCd1bCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuZGF0YSgnbWVudScsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnBhcmVudC5oYXNDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKSkge1xuICAgICAgICAgICAgZGF0YS5hcnJvdy5odG1sKHNldHRpbmdzLm9wZW5lZFN5bWJvbCk7XG4gICAgICAgICAgICBkYXRhLnBhcmVudC5yZW1vdmVDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKTtcbiAgICAgICAgICAgIGRhdGEucGFyZW50LmFkZENsYXNzKHByZWZpeCsnX29wZW4nKTtcbiAgICAgICAgICAgIGRhdGEucGFyZW50LmFkZENsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xuICAgICAgICAgICAgJHRoaXMuX3Zpc2liaWxpdHlUb2dnbGUoZGF0YS51bCwgZGF0YS5wYXJlbnQsIHRydWUsIGVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEuYXJyb3cuaHRtbChzZXR0aW5ncy5jbG9zZWRTeW1ib2wpO1xuICAgICAgICAgICAgZGF0YS5wYXJlbnQuYWRkQ2xhc3MocHJlZml4KydfY29sbGFwc2VkJyk7XG4gICAgICAgICAgICBkYXRhLnBhcmVudC5yZW1vdmVDbGFzcyhwcmVmaXgrJ19vcGVuJyk7XG4gICAgICAgICAgICBkYXRhLnBhcmVudC5hZGRDbGFzcyhwcmVmaXgrJ19hbmltYXRpbmcnKTtcbiAgICAgICAgICAgICR0aGlzLl92aXNpYmlsaXR5VG9nZ2xlKGRhdGEudWwsIGRhdGEucGFyZW50LCB0cnVlLCBlbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gdG9nZ2xlIGFjdHVhbCB2aXNpYmlsaXR5IGFuZCBhY2Nlc3NpYmlsaXR5IHRhZ3NcbiAgICBQbHVnaW4ucHJvdG90eXBlLl92aXNpYmlsaXR5VG9nZ2xlID0gZnVuY3Rpb24oZWwsIHBhcmVudCwgYW5pbWF0ZSwgdHJpZ2dlciwgaW5pdCkge1xuICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSAkdGhpcy5zZXR0aW5ncztcbiAgICAgICAgdmFyIGl0ZW1zID0gJHRoaXMuX2dldEFjdGlvbkl0ZW1zKGVsKTtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gMDtcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gc2V0dGluZ3MuZHVyYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwuaGFzQ2xhc3MocHJlZml4KydfaGlkZGVuJykpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUNsYXNzKHByZWZpeCsnX2hpZGRlbicpO1xuICAgICAgICAgICAgIC8vRmlyZSBiZWZvcmVPcGVuIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgaWYgKCFpbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmJlZm9yZU9wZW4odHJpZ2dlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuc2xpZGVEb3duKGR1cmF0aW9uLCBzZXR0aW5ncy5lYXNpbmdPcGVuLCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5yZW1vdmVDbGFzcyhwcmVmaXgrJ19hbmltYXRpbmcnKTtcbiAgICAgICAgICAgICAgICAkKHBhcmVudCkucmVtb3ZlQ2xhc3MocHJlZml4KydfYW5pbWF0aW5nJyk7XG5cbiAgICAgICAgICAgICAgICAvL0ZpcmUgYWZ0ZXJPcGVuIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgaWYgKCFpbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmFmdGVyT3Blbih0cmlnZ2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsLmF0dHIoJ2FyaWEtaGlkZGVuJywnZmFsc2UnKTtcbiAgICAgICAgICAgIGl0ZW1zLmF0dHIoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgICAgICR0aGlzLl9zZXRWaXNBdHRyKGVsLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5hZGRDbGFzcyhwcmVmaXgrJ19oaWRkZW4nKTtcblxuICAgICAgICAgICAgLy9GaXJlIGluaXQgb3IgYmVmb3JlQ2xvc2UgY2FsbGJhY2tcbiAgICAgICAgICAgIGlmICghaW5pdCl7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuYmVmb3JlQ2xvc2UodHJpZ2dlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLnNsaWRlVXAoZHVyYXRpb24sIHRoaXMuc2V0dGluZ3MuZWFzaW5nQ2xvc2UsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsLmF0dHIoJ2FyaWEtaGlkZGVuJywndHJ1ZScpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgJHRoaXMuX3NldFZpc0F0dHIoZWwsIHRydWUpO1xuICAgICAgICAgICAgICAgIGVsLmhpZGUoKTsgLy9qUXVlcnkgMS43IGJ1ZyBmaXhcblxuICAgICAgICAgICAgICAgICQodHJpZ2dlcikucmVtb3ZlQ2xhc3MocHJlZml4KydfYW5pbWF0aW5nJyk7XG4gICAgICAgICAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xuXG4gICAgICAgICAgICAgICAgLy9GaXJlIGluaXQgb3IgYWZ0ZXJDbG9zZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmICghaW5pdCl7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmFmdGVyQ2xvc2UodHJpZ2dlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyID09ICdpbml0Jyl7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmluaXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzZXQgYXR0cmlidXRlcyBvZiBlbGVtZW50IGFuZCBjaGlsZHJlbiBiYXNlZCBvbiB2aXNpYmlsaXR5XG4gICAgUGx1Z2luLnByb3RvdHlwZS5fc2V0VmlzQXR0ciA9IGZ1bmN0aW9uKGVsLCBoaWRkZW4pIHtcbiAgICAgICAgdmFyICR0aGlzID0gdGhpcztcblxuICAgICAgICAvLyBzZWxlY3QgYWxsIHBhcmVudHMgdGhhdCBhcmVuJ3QgaGlkZGVuXG4gICAgICAgIHZhciBub25IaWRkZW4gPSBlbC5jaGlsZHJlbignbGknKS5jaGlsZHJlbigndWwnKS5ub3QoJy4nK3ByZWZpeCsnX2hpZGRlbicpO1xuXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBhbGwgaXRlbXMgc2V0dGluZyBhcHByb3ByaWF0ZSB0YWdzXG4gICAgICAgIGlmICghaGlkZGVuKSB7XG4gICAgICAgICAgICBub25IaWRkZW4uZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciB1bCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgdWwuYXR0cignYXJpYS1oaWRkZW4nLCdmYWxzZScpO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9ICR0aGlzLl9nZXRBY3Rpb25JdGVtcyh1bCk7XG4gICAgICAgICAgICAgICAgaXRlbXMuYXR0cigndGFiaW5kZXgnLCAnMCcpO1xuICAgICAgICAgICAgICAgICR0aGlzLl9zZXRWaXNBdHRyKHVsLCBoaWRkZW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub25IaWRkZW4uZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciB1bCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgdWwuYXR0cignYXJpYS1oaWRkZW4nLCd0cnVlJyk7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gJHRoaXMuX2dldEFjdGlvbkl0ZW1zKHVsKTtcbiAgICAgICAgICAgICAgICBpdGVtcy5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgICAgICAgICR0aGlzLl9zZXRWaXNBdHRyKHVsLCBoaWRkZW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZ2V0IGFsbCAxc3QgbGV2ZWwgaXRlbXMgdGhhdCBhcmUgY2xpY2thYmxlXG4gICAgUGx1Z2luLnByb3RvdHlwZS5fZ2V0QWN0aW9uSXRlbXMgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICB2YXIgZGF0YSA9IGVsLmRhdGEoXCJtZW51XCIpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSB7fTtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGVsLmNoaWxkcmVuKCdsaScpO1xuICAgICAgICAgICAgdmFyIGFuY2hvcnMgPSBpdGVtcy5maW5kKCdhJyk7XG4gICAgICAgICAgICBkYXRhLmxpbmtzID0gYW5jaG9ycy5hZGQoaXRlbXMuZmluZCgnLicrcHJlZml4KydfaXRlbScpKTtcbiAgICAgICAgICAgIGVsLmRhdGEoJ21lbnUnLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YS5saW5rcztcbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5fb3V0bGluZXMgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgICAkKCcuJytwcmVmaXgrJ19pdGVtLCAuJytwcmVmaXgrJ19idG4nKS5jc3MoJ291dGxpbmUnLCdub25lJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCcuJytwcmVmaXgrJ19pdGVtLCAuJytwcmVmaXgrJ19idG4nKS5jc3MoJ291dGxpbmUnLCcnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XG4gICAgICAgICR0aGlzLl9tZW51VG9nZ2xlKCk7XG4gICAgfTtcblxuICAgIFBsdWdpbi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICgkdGhpcy5idG4uaGFzQ2xhc3MocHJlZml4KydfY29sbGFwc2VkJykpIHtcbiAgICAgICAgICAgICR0aGlzLl9tZW51VG9nZ2xlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICgkdGhpcy5idG4uaGFzQ2xhc3MocHJlZml4Kydfb3BlbicpKSB7XG4gICAgICAgICAgICAkdGhpcy5fbWVudVRvZ2dsZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuZm5bbW9iaWxlTWVudV0gPSBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIC8vIElzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgYW4gb2JqZWN0IChvcHRpb25zKSwgb3Igd2FzIG9taXR0ZWQsIGluc3RhbnRpYXRlIGEgbmV3IGluc3RhbmNlXG4gICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgYWxsb3cgdGhlIHBsdWdpbiB0byBiZSBpbnN0YW50aWF0ZWQgb25jZSBkdWUgdG8gbWV0aG9kc1xuICAgICAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsICdwbHVnaW5fJyArIG1vYmlsZU1lbnUpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgaXQgaGFzIG5vIGluc3RhbmNlLCBjcmVhdGUgYSBuZXcgb25lLCBwYXNzIG9wdGlvbnMgdG8gb3VyIHBsdWdpbiBjb25zdHJ1Y3RvcixcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHN0b3JlIHRoZSBwbHVnaW4gaW5zdGFuY2UgaW4gdGhlIGVsZW1lbnRzIGpRdWVyeSBkYXRhIG9iamVjdC5cbiAgICAgICAgICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdwbHVnaW5fJyArIG1vYmlsZU1lbnUsIG5ldyBQbHVnaW4oIHRoaXMsIG9wdGlvbnMgKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSWYgaXMgYSBzdHJpbmcgYW5kIGRvZXNuJ3Qgc3RhcnQgd2l0aCBhbiB1bmRlcnNjb3JlIG9yICdpbml0JyBmdW5jdGlvbiwgdHJlYXQgdGhpcyBhcyBhIGNhbGwgdG8gYSBwdWJsaWMgbWV0aG9kLlxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyAmJiBvcHRpb25zWzBdICE9PSAnXycgJiYgb3B0aW9ucyAhPT0gJ2luaXQnKSB7XG5cbiAgICAgICAgICAgIC8vIENhY2hlIHRoZSBtZXRob2QgY2FsbCB0byBtYWtlIGl0IHBvc3NpYmxlIHRvIHJldHVybiBhIHZhbHVlXG4gICAgICAgICAgICB2YXIgcmV0dXJucztcblxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEodGhpcywgJ3BsdWdpbl8nICsgbW9iaWxlTWVudSk7XG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0cyB0aGF0IHRoZXJlJ3MgYWxyZWFkeSBhIHBsdWdpbi1pbnN0YW5jZSBhbmQgY2hlY2tzIHRoYXQgdGhlIHJlcXVlc3RlZCBwdWJsaWMgbWV0aG9kIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFBsdWdpbiAmJiB0eXBlb2YgaW5zdGFuY2Vbb3B0aW9uc10gPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBtZXRob2Qgb2Ygb3VyIHBsdWdpbiBpbnN0YW5jZSwgYW5kIHBhc3MgaXQgdGhlIHN1cHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJucyA9IGluc3RhbmNlW29wdGlvbnNdLmFwcGx5KCBpbnN0YW5jZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3MsIDEgKSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZWFybGllciBjYWNoZWQgbWV0aG9kIGdpdmVzIGEgdmFsdWUgYmFjayByZXR1cm4gdGhlIHZhbHVlLCBvdGhlcndpc2UgcmV0dXJuIHRoaXMgdG8gcHJlc2VydmUgY2hhaW5hYmlsaXR5LlxuICAgICAgICAgICAgcmV0dXJuIHJldHVybnMgIT09IHVuZGVmaW5lZCA/IHJldHVybnMgOiB0aGlzO1xuICAgICAgICB9XG4gICAgfTtcbn0oalF1ZXJ5LCBkb2N1bWVudCwgd2luZG93KSk7XG4vKiEgRGF0YVRhYmxlcyAxLjEwLjEwXG4gKiDCqTIwMDgtMjAxNSBTcHJ5TWVkaWEgTHRkIC0gZGF0YXRhYmxlcy5uZXQvbGljZW5zZVxuICovXG5cbi8qKlxuICogQHN1bW1hcnkgICAgIERhdGFUYWJsZXNcbiAqIEBkZXNjcmlwdGlvbiBQYWdpbmF0ZSwgc2VhcmNoIGFuZCBvcmRlciBIVE1MIHRhYmxlc1xuICogQHZlcnNpb24gICAgIDEuMTAuMTBcbiAqIEBmaWxlICAgICAgICBqcXVlcnkuZGF0YVRhYmxlcy5qc1xuICogQGF1dGhvciAgICAgIFNwcnlNZWRpYSBMdGQgKHd3dy5zcHJ5bWVkaWEuY28udWspXG4gKiBAY29udGFjdCAgICAgd3d3LnNwcnltZWRpYS5jby51ay9jb250YWN0XG4gKiBAY29weXJpZ2h0ICAgQ29weXJpZ2h0IDIwMDgtMjAxNSBTcHJ5TWVkaWEgTHRkLlxuICpcbiAqIFRoaXMgc291cmNlIGZpbGUgaXMgZnJlZSBzb2Z0d2FyZSwgYXZhaWxhYmxlIHVuZGVyIHRoZSBmb2xsb3dpbmcgbGljZW5zZTpcbiAqICAgTUlUIGxpY2Vuc2UgLSBodHRwOi8vZGF0YXRhYmxlcy5uZXQvbGljZW5zZVxuICpcbiAqIFRoaXMgc291cmNlIGZpbGUgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0XG4gKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWVxuICogb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgbGljZW5zZSBmaWxlcyBmb3IgZGV0YWlscy5cbiAqXG4gKiBGb3IgZGV0YWlscyBwbGVhc2UgcmVmZXIgdG86IGh0dHA6Ly93d3cuZGF0YXRhYmxlcy5uZXRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlLCB1bmRlZjogdHJ1ZSwgYnJvd3NlcjogdHJ1ZSAqL1xuLypnbG9iYWxzICQscmVxdWlyZSxqUXVlcnksZGVmaW5lLF9zZWxlY3Rvcl9ydW4sX3NlbGVjdG9yX29wdHMsX3NlbGVjdG9yX2ZpcnN0LF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyxfZXh0LF9BcGksX2FwaV9yZWdpc3RlcixfYXBpX3JlZ2lzdGVyUGx1cmFsLF9yZV9uZXdfbGluZXMsX3JlX2h0bWwsX3JlX2Zvcm1hdHRlZF9udW1lcmljLF9yZV9lc2NhcGVfcmVnZXgsX2VtcHR5LF9pbnRWYWwsX251bVRvRGVjaW1hbCxfaXNOdW1iZXIsX2lzSHRtbCxfaHRtbE51bWVyaWMsX3BsdWNrLF9wbHVja19vcmRlcixfcmFuZ2UsX3N0cmlwSHRtbCxfdW5pcXVlLF9mbkJ1aWxkQWpheCxfZm5BamF4VXBkYXRlLF9mbkFqYXhQYXJhbWV0ZXJzLF9mbkFqYXhVcGRhdGVEcmF3LF9mbkFqYXhEYXRhU3JjLF9mbkFkZENvbHVtbixfZm5Db2x1bW5PcHRpb25zLF9mbkFkanVzdENvbHVtblNpemluZyxfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCxfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSxfZm5WaXNibGVDb2x1bW5zLF9mbkdldENvbHVtbnMsX2ZuQ29sdW1uVHlwZXMsX2ZuQXBwbHlDb2x1bW5EZWZzLF9mbkh1bmdhcmlhbk1hcCxfZm5DYW1lbFRvSHVuZ2FyaWFuLF9mbkxhbmd1YWdlQ29tcGF0LF9mbkJyb3dzZXJEZXRlY3QsX2ZuQWRkRGF0YSxfZm5BZGRUcixfZm5Ob2RlVG9EYXRhSW5kZXgsX2ZuTm9kZVRvQ29sdW1uSW5kZXgsX2ZuR2V0Q2VsbERhdGEsX2ZuU2V0Q2VsbERhdGEsX2ZuU3BsaXRPYmpOb3RhdGlvbixfZm5HZXRPYmplY3REYXRhRm4sX2ZuU2V0T2JqZWN0RGF0YUZuLF9mbkdldERhdGFNYXN0ZXIsX2ZuQ2xlYXJUYWJsZSxfZm5EZWxldGVJbmRleCxfZm5JbnZhbGlkYXRlLF9mbkdldFJvd0VsZW1lbnRzLF9mbkNyZWF0ZVRyLF9mbkJ1aWxkSGVhZCxfZm5EcmF3SGVhZCxfZm5EcmF3LF9mblJlRHJhdyxfZm5BZGRPcHRpb25zSHRtbCxfZm5EZXRlY3RIZWFkZXIsX2ZuR2V0VW5pcXVlVGhzLF9mbkZlYXR1cmVIdG1sRmlsdGVyLF9mbkZpbHRlckNvbXBsZXRlLF9mbkZpbHRlckN1c3RvbSxfZm5GaWx0ZXJDb2x1bW4sX2ZuRmlsdGVyLF9mbkZpbHRlckNyZWF0ZVNlYXJjaCxfZm5Fc2NhcGVSZWdleCxfZm5GaWx0ZXJEYXRhLF9mbkZlYXR1cmVIdG1sSW5mbyxfZm5VcGRhdGVJbmZvLF9mbkluZm9NYWNyb3MsX2ZuSW5pdGlhbGlzZSxfZm5Jbml0Q29tcGxldGUsX2ZuTGVuZ3RoQ2hhbmdlLF9mbkZlYXR1cmVIdG1sTGVuZ3RoLF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUsX2ZuUGFnZUNoYW5nZSxfZm5GZWF0dXJlSHRtbFByb2Nlc3NpbmcsX2ZuUHJvY2Vzc2luZ0Rpc3BsYXksX2ZuRmVhdHVyZUh0bWxUYWJsZSxfZm5TY3JvbGxEcmF3LF9mbkFwcGx5VG9DaGlsZHJlbixfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMsX2ZuVGhyb3R0bGUsX2ZuQ29udmVydFRvV2lkdGgsX2ZuR2V0V2lkZXN0Tm9kZSxfZm5HZXRNYXhMZW5TdHJpbmcsX2ZuU3RyaW5nVG9Dc3MsX2ZuU29ydEZsYXR0ZW4sX2ZuU29ydCxfZm5Tb3J0QXJpYSxfZm5Tb3J0TGlzdGVuZXIsX2ZuU29ydEF0dGFjaExpc3RlbmVyLF9mblNvcnRpbmdDbGFzc2VzLF9mblNvcnREYXRhLF9mblNhdmVTdGF0ZSxfZm5Mb2FkU3RhdGUsX2ZuU2V0dGluZ3NGcm9tTm9kZSxfZm5Mb2csX2ZuTWFwLF9mbkJpbmRBY3Rpb24sX2ZuQ2FsbGJhY2tSZWcsX2ZuQ2FsbGJhY2tGaXJlLF9mbkxlbmd0aE92ZXJmbG93LF9mblJlbmRlcmVyLF9mbkRhdGFTb3VyY2UsX2ZuUm93QXR0cmlidXRlcyovXG5cbihmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKCBbJ2pxdWVyeSddLCBmdW5jdGlvbiAoICQgKSB7XG5cdFx0XHRyZXR1cm4gZmFjdG9yeSggJCwgd2luZG93LCBkb2N1bWVudCApO1xuXHRcdH0gKTtcblx0fVxuXHRlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdCwgJCkge1xuXHRcdFx0aWYgKCAhIHJvb3QgKSB7XG5cdFx0XHRcdC8vIENvbW1vbkpTIGVudmlyb25tZW50cyB3aXRob3V0IGEgd2luZG93IGdsb2JhbCBtdXN0IHBhc3MgYVxuXHRcdFx0XHQvLyByb290LiBUaGlzIHdpbGwgZ2l2ZSBhbiBlcnJvciBvdGhlcndpc2Vcblx0XHRcdFx0cm9vdCA9IHdpbmRvdztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhICQgKSB7XG5cdFx0XHRcdCQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IC8vIGpRdWVyeSdzIGZhY3RvcnkgY2hlY2tzIGZvciBhIGdsb2JhbCB3aW5kb3dcblx0XHRcdFx0XHRyZXF1aXJlKCdqcXVlcnknKSA6XG5cdFx0XHRcdFx0cmVxdWlyZSgnanF1ZXJ5JykoIHJvb3QgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhY3RvcnkoICQsIHJvb3QsIHJvb3QuZG9jdW1lbnQgKTtcblx0XHR9O1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEJyb3dzZXJcblx0XHRmYWN0b3J5KCBqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQgKTtcblx0fVxufVxuKGZ1bmN0aW9uKCAkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBEYXRhVGFibGVzIGlzIGEgcGx1Zy1pbiBmb3IgdGhlIGpRdWVyeSBKYXZhc2NyaXB0IGxpYnJhcnkuIEl0IGlzIGEgaGlnaGx5XG5cdCAqIGZsZXhpYmxlIHRvb2wsIGJhc2VkIHVwb24gdGhlIGZvdW5kYXRpb25zIG9mIHByb2dyZXNzaXZlIGVuaGFuY2VtZW50LFxuXHQgKiB3aGljaCB3aWxsIGFkZCBhZHZhbmNlZCBpbnRlcmFjdGlvbiBjb250cm9scyB0byBhbnkgSFRNTCB0YWJsZS4gRm9yIGFcblx0ICogZnVsbCBsaXN0IG9mIGZlYXR1cmVzIHBsZWFzZSByZWZlciB0b1xuXHQgKiBbRGF0YVRhYmxlcy5uZXRdKGhyZWY9XCJodHRwOi8vZGF0YXRhYmxlcy5uZXQpLlxuXHQgKlxuXHQgKiBOb3RlIHRoYXQgdGhlIGBEYXRhVGFibGVgIG9iamVjdCBpcyBub3QgYSBnbG9iYWwgdmFyaWFibGUgYnV0IGlzIGFsaWFzZWRcblx0ICogdG8gYGpRdWVyeS5mbi5EYXRhVGFibGVgIGFuZCBgalF1ZXJ5LmZuLmRhdGFUYWJsZWAgdGhyb3VnaCB3aGljaCBpdCBtYXlcblx0ICogYmUgIGFjY2Vzc2VkLlxuXHQgKlxuXHQgKiAgQGNsYXNzXG5cdCAqICBAcGFyYW0ge29iamVjdH0gW2luaXQ9e31dIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBEYXRhVGFibGVzLiBPcHRpb25zXG5cdCAqICAgIGFyZSBkZWZpbmVkIGJ5IHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9XG5cdCAqICBAcmVxdWlyZXMgalF1ZXJ5IDEuNytcblx0ICpcblx0ICogIEBleGFtcGxlXG5cdCAqICAgIC8vIEJhc2ljIGluaXRpYWxpc2F0aW9uXG5cdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiB7XG5cdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0ICogICAgfSApO1xuXHQgKlxuXHQgKiAgQGV4YW1wbGVcblx0ICogICAgLy8gSW5pdGlhbGlzYXRpb24gd2l0aCBjb25maWd1cmF0aW9uIG9wdGlvbnMgLSBpbiB0aGlzIGNhc2UsIGRpc2FibGVcblx0ICogICAgLy8gcGFnaW5hdGlvbiBhbmQgc29ydGluZy5cblx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uIHtcblx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHQgKiAgICAgICAgXCJwYWdpbmF0ZVwiOiBmYWxzZSxcblx0ICogICAgICAgIFwic29ydFwiOiBmYWxzZVxuXHQgKiAgICAgIH0gKTtcblx0ICogICAgfSApO1xuXHQgKi9cblx0dmFyIERhdGFUYWJsZTtcblxuXHRcblx0Lypcblx0ICogSXQgaXMgdXNlZnVsIHRvIGhhdmUgdmFyaWFibGVzIHdoaWNoIGFyZSBzY29wZWQgbG9jYWxseSBzbyBvbmx5IHRoZVxuXHQgKiBEYXRhVGFibGVzIGZ1bmN0aW9ucyBjYW4gYWNjZXNzIHRoZW0gYW5kIHRoZXkgZG9uJ3QgbGVhayBpbnRvIGdsb2JhbCBzcGFjZS5cblx0ICogQXQgdGhlIHNhbWUgdGltZSB0aGVzZSBmdW5jdGlvbnMgYXJlIG9mdGVuIHVzZWZ1bCBvdmVyIG11bHRpcGxlIGZpbGVzIGluIHRoZVxuXHQgKiBjb3JlIGFuZCBBUEksIHNvIHdlIGxpc3QsIG9yIGF0IGxlYXN0IGRvY3VtZW50LCBhbGwgdmFyaWFibGVzIHdoaWNoIGFyZSB1c2VkXG5cdCAqIGJ5IERhdGFUYWJsZXMgYXMgcHJpdmF0ZSB2YXJpYWJsZXMgaGVyZS4gVGhpcyBhbHNvIGVuc3VyZXMgdGhhdCB0aGVyZSBpcyBub1xuXHQgKiBjbGFzaGluZyBvZiB2YXJpYWJsZSBuYW1lcyBhbmQgdGhhdCB0aGV5IGNhbiBlYXNpbHkgcmVmZXJlbmNlZCBmb3IgcmV1c2UuXG5cdCAqL1xuXHRcblx0XG5cdC8vIERlZmluZWQgZWxzZSB3aGVyZVxuXHQvLyAgX3NlbGVjdG9yX3J1blxuXHQvLyAgX3NlbGVjdG9yX29wdHNcblx0Ly8gIF9zZWxlY3Rvcl9maXJzdFxuXHQvLyAgX3NlbGVjdG9yX3Jvd19pbmRleGVzXG5cdFxuXHR2YXIgX2V4dDsgLy8gRGF0YVRhYmxlLmV4dFxuXHR2YXIgX0FwaTsgLy8gRGF0YVRhYmxlLkFwaVxuXHR2YXIgX2FwaV9yZWdpc3RlcjsgLy8gRGF0YVRhYmxlLkFwaS5yZWdpc3RlclxuXHR2YXIgX2FwaV9yZWdpc3RlclBsdXJhbDsgLy8gRGF0YVRhYmxlLkFwaS5yZWdpc3RlclBsdXJhbFxuXHRcblx0dmFyIF9yZV9kaWMgPSB7fTtcblx0dmFyIF9yZV9uZXdfbGluZXMgPSAvW1xcclxcbl0vZztcblx0dmFyIF9yZV9odG1sID0gLzwuKj8+L2c7XG5cdHZhciBfcmVfZGF0ZV9zdGFydCA9IC9eW1xcd1xcK1xcLV0vO1xuXHR2YXIgX3JlX2RhdGVfZW5kID0gL1tcXHdcXCtcXC1dJC87XG5cdFxuXHQvLyBFc2NhcGUgcmVndWxhciBleHByZXNzaW9uIHNwZWNpYWwgY2hhcmFjdGVyc1xuXHR2YXIgX3JlX2VzY2FwZV9yZWdleCA9IG5ldyBSZWdFeHAoICcoXFxcXCcgKyBbICcvJywgJy4nLCAnKicsICcrJywgJz8nLCAnfCcsICcoJywgJyknLCAnWycsICddJywgJ3snLCAnfScsICdcXFxcJywgJyQnLCAnXicsICctJyBdLmpvaW4oJ3xcXFxcJykgKyAnKScsICdnJyApO1xuXHRcblx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Gb3JlaWduX2V4Y2hhbmdlX21hcmtldFxuXHQvLyAtIFxcdTIwQkQgLSBSdXNzaWFuIHJ1YmxlLlxuXHQvLyAtIFxcdTIwYTkgLSBTb3V0aCBLb3JlYW4gV29uXG5cdC8vIC0gXFx1MjBCQSAtIFR1cmtpc2ggTGlyYVxuXHQvLyAtIFxcdTIwQjkgLSBJbmRpYW4gUnVwZWVcblx0Ly8gLSBSIC0gQnJhemlsIChSJCkgYW5kIFNvdXRoIEFmcmljYVxuXHQvLyAtIGZyIC0gU3dpc3MgRnJhbmNcblx0Ly8gLSBrciAtIFN3ZWRpc2gga3JvbmEsIE5vcndlZ2lhbiBrcm9uZSBhbmQgRGFuaXNoIGtyb25lXG5cdC8vIC0gXFx1MjAwOSBpcyB0aGluIHNwYWNlIGFuZCBcXHUyMDJGIGlzIG5hcnJvdyBuby1icmVhayBzcGFjZSwgYm90aCB1c2VkIGluIG1hbnlcblx0Ly8gICBzdGFuZGFyZHMgYXMgdGhvdXNhbmRzIHNlcGFyYXRvcnMuXG5cdHZhciBfcmVfZm9ybWF0dGVkX251bWVyaWMgPSAvWycsJMKj4oKswqUlXFx1MjAwOVxcdTIwMkZcXHUyMEJEXFx1MjBhOVxcdTIwQkFyZmtdL2dpO1xuXHRcblx0XG5cdHZhciBfZW1wdHkgPSBmdW5jdGlvbiAoIGQgKSB7XG5cdFx0cmV0dXJuICFkIHx8IGQgPT09IHRydWUgfHwgZCA9PT0gJy0nID8gdHJ1ZSA6IGZhbHNlO1xuXHR9O1xuXHRcblx0XG5cdHZhciBfaW50VmFsID0gZnVuY3Rpb24gKCBzICkge1xuXHRcdHZhciBpbnRlZ2VyID0gcGFyc2VJbnQoIHMsIDEwICk7XG5cdFx0cmV0dXJuICFpc05hTihpbnRlZ2VyKSAmJiBpc0Zpbml0ZShzKSA/IGludGVnZXIgOiBudWxsO1xuXHR9O1xuXHRcblx0Ly8gQ29udmVydCBmcm9tIGEgZm9ybWF0dGVkIG51bWJlciB3aXRoIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBgLmAgYXMgdGhlXG5cdC8vIGRlY2ltYWwgcGxhY2UsIHRvIGEgSmF2YXNjcmlwdCBudW1iZXJcblx0dmFyIF9udW1Ub0RlY2ltYWwgPSBmdW5jdGlvbiAoIG51bSwgZGVjaW1hbFBvaW50ICkge1xuXHRcdC8vIENhY2hlIGNyZWF0ZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQgYXMgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb2Z0ZW5cblx0XHRpZiAoICEgX3JlX2RpY1sgZGVjaW1hbFBvaW50IF0gKSB7XG5cdFx0XHRfcmVfZGljWyBkZWNpbWFsUG9pbnQgXSA9IG5ldyBSZWdFeHAoIF9mbkVzY2FwZVJlZ2V4KCBkZWNpbWFsUG9pbnQgKSwgJ2cnICk7XG5cdFx0fVxuXHRcdHJldHVybiB0eXBlb2YgbnVtID09PSAnc3RyaW5nJyAmJiBkZWNpbWFsUG9pbnQgIT09ICcuJyA/XG5cdFx0XHRudW0ucmVwbGFjZSggL1xcLi9nLCAnJyApLnJlcGxhY2UoIF9yZV9kaWNbIGRlY2ltYWxQb2ludCBdLCAnLicgKSA6XG5cdFx0XHRudW07XG5cdH07XG5cdFxuXHRcblx0dmFyIF9pc051bWJlciA9IGZ1bmN0aW9uICggZCwgZGVjaW1hbFBvaW50LCBmb3JtYXR0ZWQgKSB7XG5cdFx0dmFyIHN0clR5cGUgPSB0eXBlb2YgZCA9PT0gJ3N0cmluZyc7XG5cdFxuXHRcdC8vIElmIGVtcHR5IHJldHVybiBpbW1lZGlhdGVseSBzbyB0aGVyZSBtdXN0IGJlIGEgbnVtYmVyIGlmIGl0IGlzIGFcblx0XHQvLyBmb3JtYXR0ZWQgc3RyaW5nICh0aGlzIHN0b3BzIHRoZSBzdHJpbmcgXCJrXCIsIG9yIFwia3JcIiwgZXRjIGJlaW5nIGRldGVjdGVkXG5cdFx0Ly8gYXMgYSBmb3JtYXR0ZWQgbnVtYmVyIGZvciBjdXJyZW5jeVxuXHRcdGlmICggX2VtcHR5KCBkICkgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFxuXHRcdGlmICggZGVjaW1hbFBvaW50ICYmIHN0clR5cGUgKSB7XG5cdFx0XHRkID0gX251bVRvRGVjaW1hbCggZCwgZGVjaW1hbFBvaW50ICk7XG5cdFx0fVxuXHRcblx0XHRpZiAoIGZvcm1hdHRlZCAmJiBzdHJUeXBlICkge1xuXHRcdFx0ZCA9IGQucmVwbGFjZSggX3JlX2Zvcm1hdHRlZF9udW1lcmljLCAnJyApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuICFpc05hTiggcGFyc2VGbG9hdChkKSApICYmIGlzRmluaXRlKCBkICk7XG5cdH07XG5cdFxuXHRcblx0Ly8gQSBzdHJpbmcgd2l0aG91dCBIVE1MIGluIGl0IGNhbiBiZSBjb25zaWRlcmVkIHRvIGJlIEhUTUwgc3RpbGxcblx0dmFyIF9pc0h0bWwgPSBmdW5jdGlvbiAoIGQgKSB7XG5cdFx0cmV0dXJuIF9lbXB0eSggZCApIHx8IHR5cGVvZiBkID09PSAnc3RyaW5nJztcblx0fTtcblx0XG5cdFxuXHR2YXIgX2h0bWxOdW1lcmljID0gZnVuY3Rpb24gKCBkLCBkZWNpbWFsUG9pbnQsIGZvcm1hdHRlZCApIHtcblx0XHRpZiAoIF9lbXB0eSggZCApICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcblx0XHR2YXIgaHRtbCA9IF9pc0h0bWwoIGQgKTtcblx0XHRyZXR1cm4gISBodG1sID9cblx0XHRcdG51bGwgOlxuXHRcdFx0X2lzTnVtYmVyKCBfc3RyaXBIdG1sKCBkICksIGRlY2ltYWxQb2ludCwgZm9ybWF0dGVkICkgP1xuXHRcdFx0XHR0cnVlIDpcblx0XHRcdFx0bnVsbDtcblx0fTtcblx0XG5cdFxuXHR2YXIgX3BsdWNrID0gZnVuY3Rpb24gKCBhLCBwcm9wLCBwcm9wMiApIHtcblx0XHR2YXIgb3V0ID0gW107XG5cdFx0dmFyIGk9MCwgaWVuPWEubGVuZ3RoO1xuXHRcblx0XHQvLyBDb3VsZCBoYXZlIHRoZSB0ZXN0IGluIHRoZSBsb29wIGZvciBzbGlnaHRseSBzbWFsbGVyIGNvZGUsIGJ1dCBzcGVlZFxuXHRcdC8vIGlzIGVzc2VudGlhbCBoZXJlXG5cdFx0aWYgKCBwcm9wMiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Zm9yICggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBhW2ldICYmIGFbaV1bIHByb3AgXSApIHtcblx0XHRcdFx0XHRvdXQucHVzaCggYVtpXVsgcHJvcCBdWyBwcm9wMiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRmb3IgKCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGFbaV0gKSB7XG5cdFx0XHRcdFx0b3V0LnB1c2goIGFbaV1bIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gb3V0O1xuXHR9O1xuXHRcblx0XG5cdC8vIEJhc2ljYWxseSB0aGUgc2FtZSBhcyBfcGx1Y2ssIGJ1dCByYXRoZXIgdGhhbiBsb29waW5nIG92ZXIgYGFgIHdlIHVzZSBgb3JkZXJgXG5cdC8vIGFzIHRoZSBpbmRleGVzIHRvIHBpY2sgZnJvbSBgYWBcblx0dmFyIF9wbHVja19vcmRlciA9IGZ1bmN0aW9uICggYSwgb3JkZXIsIHByb3AsIHByb3AyIClcblx0e1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XHR2YXIgaT0wLCBpZW49b3JkZXIubGVuZ3RoO1xuXHRcblx0XHQvLyBDb3VsZCBoYXZlIHRoZSB0ZXN0IGluIHRoZSBsb29wIGZvciBzbGlnaHRseSBzbWFsbGVyIGNvZGUsIGJ1dCBzcGVlZFxuXHRcdC8vIGlzIGVzc2VudGlhbCBoZXJlXG5cdFx0aWYgKCBwcm9wMiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Zm9yICggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBhWyBvcmRlcltpXSBdWyBwcm9wIF0gKSB7XG5cdFx0XHRcdFx0b3V0LnB1c2goIGFbIG9yZGVyW2ldIF1bIHByb3AgXVsgcHJvcDIgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Zm9yICggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0b3V0LnB1c2goIGFbIG9yZGVyW2ldIF1bIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG91dDtcblx0fTtcblx0XG5cdFxuXHR2YXIgX3JhbmdlID0gZnVuY3Rpb24gKCBsZW4sIHN0YXJ0IClcblx0e1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XHR2YXIgZW5kO1xuXHRcblx0XHRpZiAoIHN0YXJ0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRzdGFydCA9IDA7XG5cdFx0XHRlbmQgPSBsZW47XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0ZW5kID0gc3RhcnQ7XG5cdFx0XHRzdGFydCA9IGxlbjtcblx0XHR9XG5cdFxuXHRcdGZvciAoIHZhciBpPXN0YXJ0IDsgaTxlbmQgOyBpKysgKSB7XG5cdFx0XHRvdXQucHVzaCggaSApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG91dDtcblx0fTtcblx0XG5cdFxuXHR2YXIgX3JlbW92ZUVtcHR5ID0gZnVuY3Rpb24gKCBhIClcblx0e1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPWEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFbaV0gKSB7IC8vIGNhcmVmdWwgLSB3aWxsIHJlbW92ZSBhbGwgZmFsc3kgdmFsdWVzIVxuXHRcdFx0XHRvdXQucHVzaCggYVtpXSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG91dDtcblx0fTtcblx0XG5cdFxuXHR2YXIgX3N0cmlwSHRtbCA9IGZ1bmN0aW9uICggZCApIHtcblx0XHRyZXR1cm4gZC5yZXBsYWNlKCBfcmVfaHRtbCwgJycgKTtcblx0fTtcblx0XG5cdFxuXHQvKipcblx0ICogRmluZCB0aGUgdW5pcXVlIGVsZW1lbnRzIGluIGEgc291cmNlIGFycmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0gIHthcnJheX0gc3JjIFNvdXJjZSBhcnJheVxuXHQgKiBAcmV0dXJuIHthcnJheX0gQXJyYXkgb2YgdW5pcXVlIGl0ZW1zXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cdHZhciBfdW5pcXVlID0gZnVuY3Rpb24gKCBzcmMgKVxuXHR7XG5cdFx0Ly8gQSBmYXN0ZXIgdW5pcXVlIG1ldGhvZCBpcyB0byB1c2Ugb2JqZWN0IGtleXMgdG8gaWRlbnRpZnkgdXNlZCB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHRoaXMgZG9lc24ndCB3b3JrIHdpdGggYXJyYXlzIG9yIG9iamVjdHMsIHdoaWNoIHdlIG11c3QgYWxzb1xuXHRcdC8vIGNvbnNpZGVyLiBTZWUganNwZXJmLmNvbS9jb21wYXJlLWFycmF5LXVuaXF1ZS12ZXJzaW9ucy80IGZvciBtb3JlXG5cdFx0Ly8gaW5mb3JtYXRpb24uXG5cdFx0dmFyXG5cdFx0XHRvdXQgPSBbXSxcblx0XHRcdHZhbCxcblx0XHRcdGksIGllbj1zcmMubGVuZ3RoLFxuXHRcdFx0aiwgaz0wO1xuXHRcblx0XHRhZ2FpbjogZm9yICggaT0wIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHR2YWwgPSBzcmNbaV07XG5cdFxuXHRcdFx0Zm9yICggaj0wIDsgajxrIDsgaisrICkge1xuXHRcdFx0XHRpZiAoIG91dFtqXSA9PT0gdmFsICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlIGFnYWluO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0b3V0LnB1c2goIHZhbCApO1xuXHRcdFx0aysrO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG91dDtcblx0fTtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZSBhIG1hcHBpbmcgb2JqZWN0IHRoYXQgYWxsb3dzIGNhbWVsIGNhc2UgcGFyYW1ldGVycyB0byBiZSBsb29rZWQgdXBcblx0ICogZm9yIHRoZWlyIEh1bmdhcmlhbiBjb3VudGVycGFydHMuIFRoZSBtYXBwaW5nIGlzIHN0b3JlZCBpbiBhIHByaXZhdGVcblx0ICogcGFyYW1ldGVyIGNhbGxlZCBgX2h1bmdhcmlhbk1hcGAgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuSHVuZ2FyaWFuTWFwICggbyApXG5cdHtcblx0XHR2YXJcblx0XHRcdGh1bmdhcmlhbiA9ICdhIGFhIGFpIGFvIGFzIGIgZm4gaSBtIG8gcyAnLFxuXHRcdFx0bWF0Y2gsXG5cdFx0XHRuZXdLZXksXG5cdFx0XHRtYXAgPSB7fTtcblx0XG5cdFx0JC5lYWNoKCBvLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcblx0XHRcdG1hdGNoID0ga2V5Lm1hdGNoKC9eKFteQS1aXSs/KShbQS1aXSkvKTtcblx0XG5cdFx0XHRpZiAoIG1hdGNoICYmIGh1bmdhcmlhbi5pbmRleE9mKG1hdGNoWzFdKycgJykgIT09IC0xIClcblx0XHRcdHtcblx0XHRcdFx0bmV3S2V5ID0ga2V5LnJlcGxhY2UoIG1hdGNoWzBdLCBtYXRjaFsyXS50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRcdG1hcFsgbmV3S2V5IF0gPSBrZXk7XG5cdFxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdID09PSAnbycgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0X2ZuSHVuZ2FyaWFuTWFwKCBvW2tleV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0XG5cdFx0by5faHVuZ2FyaWFuTWFwID0gbWFwO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgZnJvbSBjYW1lbCBjYXNlIHBhcmFtZXRlcnMgdG8gSHVuZ2FyaWFuLCBiYXNlZCBvbiBhIEh1bmdhcmlhbiBtYXBcblx0ICogY3JlYXRlZCBieSBfZm5IdW5nYXJpYW5NYXAuXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc3JjIFRoZSBtb2RlbCBvYmplY3Qgd2hpY2ggaG9sZHMgYWxsIHBhcmFtZXRlcnMgdGhhdCBjYW4gYmVcblx0ICogICAgbWFwcGVkLlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHVzZXIgVGhlIG9iamVjdCB0byBjb252ZXJ0IGZyb20gY2FtZWwgY2FzZSB0byBIdW5nYXJpYW4uXG5cdCAqICBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlIFdoZW4gc2V0IHRvIGB0cnVlYCwgcHJvcGVydGllcyB3aGljaCBhbHJlYWR5IGhhdmUgYVxuXHQgKiAgICBIdW5nYXJpYW4gdmFsdWUgaW4gdGhlIGB1c2VyYCBvYmplY3Qgd2lsbCBiZSBvdmVyd3JpdHRlbi4gT3RoZXJ3aXNlIHRoZXlcblx0ICogICAgd29uJ3QgYmUuXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkNhbWVsVG9IdW5nYXJpYW4gKCBzcmMsIHVzZXIsIGZvcmNlIClcblx0e1xuXHRcdGlmICggISBzcmMuX2h1bmdhcmlhbk1hcCApIHtcblx0XHRcdF9mbkh1bmdhcmlhbk1hcCggc3JjICk7XG5cdFx0fVxuXHRcblx0XHR2YXIgaHVuZ2FyaWFuS2V5O1xuXHRcblx0XHQkLmVhY2goIHVzZXIsIGZ1bmN0aW9uIChrZXksIHZhbCkge1xuXHRcdFx0aHVuZ2FyaWFuS2V5ID0gc3JjLl9odW5nYXJpYW5NYXBbIGtleSBdO1xuXHRcblx0XHRcdGlmICggaHVuZ2FyaWFuS2V5ICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IHVzZXJbaHVuZ2FyaWFuS2V5XSA9PT0gdW5kZWZpbmVkKSApXG5cdFx0XHR7XG5cdFx0XHRcdC8vIEZvciBvYmplY3RzLCB3ZSBuZWVkIHRvIGJ1enogZG93biBpbnRvIHRoZSBvYmplY3QgdG8gY29weSBwYXJhbWV0ZXJzXG5cdFx0XHRcdGlmICggaHVuZ2FyaWFuS2V5LmNoYXJBdCgwKSA9PT0gJ28nIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vIENvcHkgdGhlIGNhbWVsQ2FzZSBvcHRpb25zIG92ZXIgdG8gdGhlIGh1bmdhcmlhblxuXHRcdFx0XHRcdGlmICggISB1c2VyWyBodW5nYXJpYW5LZXkgXSApIHtcblx0XHRcdFx0XHRcdHVzZXJbIGh1bmdhcmlhbktleSBdID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCQuZXh0ZW5kKCB0cnVlLCB1c2VyW2h1bmdhcmlhbktleV0sIHVzZXJba2V5XSApO1xuXHRcblx0XHRcdFx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuKCBzcmNbaHVuZ2FyaWFuS2V5XSwgdXNlcltodW5nYXJpYW5LZXldLCBmb3JjZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHVzZXJbaHVuZ2FyaWFuS2V5XSA9IHVzZXJbIGtleSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIExhbmd1YWdlIGNvbXBhdGliaWxpdHkgLSB3aGVuIGNlcnRhaW4gb3B0aW9ucyBhcmUgZ2l2ZW4sIGFuZCBvdGhlcnMgYXJlbid0LCB3ZVxuXHQgKiBuZWVkIHRvIGR1cGxpY2F0ZSB0aGUgdmFsdWVzIG92ZXIsIGluIG9yZGVyIHRvIHByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0ICogd2l0aCBvbGRlciBsYW5ndWFnZSBmaWxlcy5cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuTGFuZ3VhZ2VDb21wYXQoIGxhbmcgKVxuXHR7XG5cdFx0dmFyIGRlZmF1bHRzID0gRGF0YVRhYmxlLmRlZmF1bHRzLm9MYW5ndWFnZTtcblx0XHR2YXIgemVyb1JlY29yZHMgPSBsYW5nLnNaZXJvUmVjb3Jkcztcblx0XG5cdFx0LyogQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgLSBpZiB0aGVyZSBpcyBubyBzRW1wdHlUYWJsZSBnaXZlbiwgdGhlbiB1c2UgdGhlIHNhbWUgYXNcblx0XHQgKiBzWmVyb1JlY29yZHMgLSBhc3N1bWluZyB0aGF0IGlzIGdpdmVuLlxuXHRcdCAqL1xuXHRcdGlmICggISBsYW5nLnNFbXB0eVRhYmxlICYmIHplcm9SZWNvcmRzICYmXG5cdFx0XHRkZWZhdWx0cy5zRW1wdHlUYWJsZSA9PT0gXCJObyBkYXRhIGF2YWlsYWJsZSBpbiB0YWJsZVwiIClcblx0XHR7XG5cdFx0XHRfZm5NYXAoIGxhbmcsIGxhbmcsICdzWmVyb1JlY29yZHMnLCAnc0VtcHR5VGFibGUnICk7XG5cdFx0fVxuXHRcblx0XHQvKiBMaWtld2lzZSB3aXRoIGxvYWRpbmcgcmVjb3JkcyAqL1xuXHRcdGlmICggISBsYW5nLnNMb2FkaW5nUmVjb3JkcyAmJiB6ZXJvUmVjb3JkcyAmJlxuXHRcdFx0ZGVmYXVsdHMuc0xvYWRpbmdSZWNvcmRzID09PSBcIkxvYWRpbmcuLi5cIiApXG5cdFx0e1xuXHRcdFx0X2ZuTWFwKCBsYW5nLCBsYW5nLCAnc1plcm9SZWNvcmRzJywgJ3NMb2FkaW5nUmVjb3JkcycgKTtcblx0XHR9XG5cdFxuXHRcdC8vIE9sZCBwYXJhbWV0ZXIgbmFtZSBvZiB0aGUgdGhvdXNhbmRzIHNlcGFyYXRvciBtYXBwZWQgb250byB0aGUgbmV3XG5cdFx0aWYgKCBsYW5nLnNJbmZvVGhvdXNhbmRzICkge1xuXHRcdFx0bGFuZy5zVGhvdXNhbmRzID0gbGFuZy5zSW5mb1Rob3VzYW5kcztcblx0XHR9XG5cdFxuXHRcdHZhciBkZWNpbWFsID0gbGFuZy5zRGVjaW1hbDtcblx0XHRpZiAoIGRlY2ltYWwgKSB7XG5cdFx0XHRfYWRkTnVtZXJpY1NvcnQoIGRlY2ltYWwgKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogTWFwIG9uZSBwYXJhbWV0ZXIgb250byBhbm90aGVyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gbyBPYmplY3QgdG8gbWFwXG5cdCAqICBAcGFyYW0geyp9IGtuZXcgVGhlIG5ldyBwYXJhbWV0ZXIgbmFtZVxuXHQgKiAgQHBhcmFtIHsqfSBvbGQgVGhlIG9sZCBwYXJhbWV0ZXIgbmFtZVxuXHQgKi9cblx0dmFyIF9mbkNvbXBhdE1hcCA9IGZ1bmN0aW9uICggbywga25ldywgb2xkICkge1xuXHRcdGlmICggb1sga25ldyBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRvWyBvbGQgXSA9IG9bIGtuZXcgXTtcblx0XHR9XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIFByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIHRoZSBtYWluIERUIG9wdGlvbnMuIE5vdGUgdGhhdCB0aGUgbmV3XG5cdCAqIG9wdGlvbnMgYXJlIG1hcHBlZCBvbnRvIHRoZSBvbGQgcGFyYW1ldGVycywgc28gdGhpcyBpcyBhbiBleHRlcm5hbCBpbnRlcmZhY2Vcblx0ICogY2hhbmdlIG9ubHkuXG5cdCAqICBAcGFyYW0ge29iamVjdH0gaW5pdCBPYmplY3QgdG8gbWFwXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5Db21wYXRPcHRzICggaW5pdCApXG5cdHtcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlcmluZycsICAgICAgJ2JTb3J0JyApO1xuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ29yZGVyTXVsdGknLCAgICAnYlNvcnRNdWx0aScgKTtcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlckNsYXNzZXMnLCAgJ2JTb3J0Q2xhc3NlcycgKTtcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlckNlbGxzVG9wJywgJ2JTb3J0Q2VsbHNUb3AnICk7XG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXInLCAgICAgICAgICdhYVNvcnRpbmcnICk7XG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJGaXhlZCcsICAgICdhYVNvcnRpbmdGaXhlZCcgKTtcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdwYWdpbmcnLCAgICAgICAgJ2JQYWdpbmF0ZScgKTtcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdwYWdpbmdUeXBlJywgICAgJ3NQYWdpbmF0aW9uVHlwZScgKTtcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdwYWdlTGVuZ3RoJywgICAgJ2lEaXNwbGF5TGVuZ3RoJyApO1xuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ3NlYXJjaGluZycsICAgICAnYkZpbHRlcicgKTtcblx0XG5cdFx0Ly8gQm9vbGVhbiBpbml0aWFsaXNhdGlvbiBvZiB4LXNjcm9sbGluZ1xuXHRcdGlmICggdHlwZW9mIGluaXQuc1Njcm9sbFggPT09ICdib29sZWFuJyApIHtcblx0XHRcdGluaXQuc1Njcm9sbFggPSBpbml0LnNTY3JvbGxYID8gJzEwMCUnIDogJyc7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIGluaXQuc2Nyb2xsWCA9PT0gJ2Jvb2xlYW4nICkge1xuXHRcdFx0aW5pdC5zY3JvbGxYID0gaW5pdC5zY3JvbGxYID8gJzEwMCUnIDogJyc7XG5cdFx0fVxuXHRcblx0XHQvLyBDb2x1bW4gc2VhcmNoIG9iamVjdHMgYXJlIGluIGFuIGFycmF5LCBzbyBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWRcblx0XHQvLyBlbGVtZW50IGJ5IGVsZW1lbnRcblx0XHR2YXIgc2VhcmNoQ29scyA9IGluaXQuYW9TZWFyY2hDb2xzO1xuXHRcblx0XHRpZiAoIHNlYXJjaENvbHMgKSB7XG5cdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49c2VhcmNoQ29scy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBzZWFyY2hDb2xzW2ldICkge1xuXHRcdFx0XHRcdF9mbkNhbWVsVG9IdW5nYXJpYW4oIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaCwgc2VhcmNoQ29sc1tpXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIFByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIGNvbHVtbiBvcHRpb25zLiBOb3RlIHRoYXQgdGhlIG5ldyBvcHRpb25zXG5cdCAqIGFyZSBtYXBwZWQgb250byB0aGUgb2xkIHBhcmFtZXRlcnMsIHNvIHRoaXMgaXMgYW4gZXh0ZXJuYWwgaW50ZXJmYWNlIGNoYW5nZVxuXHQgKiBvbmx5LlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IGluaXQgT2JqZWN0IHRvIG1hcFxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQ29tcGF0Q29scyAoIGluaXQgKVxuXHR7XG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJhYmxlJywgICAgICdiU29ydGFibGUnICk7XG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJEYXRhJywgICAgICdhRGF0YVNvcnQnICk7XG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJTZXF1ZW5jZScsICdhc1NvcnRpbmcnICk7XG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJEYXRhVHlwZScsICdzb3J0RGF0YVR5cGUnICk7XG5cdFxuXHRcdC8vIG9yZGVyRGF0YSBjYW4gYmUgZ2l2ZW4gYXMgYW4gaW50ZWdlclxuXHRcdHZhciBkYXRhU29ydCA9IGluaXQuYURhdGFTb3J0O1xuXHRcdGlmICggZGF0YVNvcnQgJiYgISAkLmlzQXJyYXkoIGRhdGFTb3J0ICkgKSB7XG5cdFx0XHRpbml0LmFEYXRhU29ydCA9IFsgZGF0YVNvcnQgXTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogQnJvd3NlciBmZWF0dXJlIGRldGVjdGlvbiBmb3IgY2FwYWJpbGl0aWVzLCBxdWlya3Ncblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5Ccm93c2VyRGV0ZWN0KCBzZXR0aW5ncyApXG5cdHtcblx0XHQvLyBXZSBkb24ndCBuZWVkIHRvIGRvIHRoaXMgZXZlcnkgdGltZSBEYXRhVGFibGVzIGlzIGNvbnN0cnVjdGVkLCB0aGUgdmFsdWVzXG5cdFx0Ly8gY2FsY3VsYXRlZCBhcmUgc3BlY2lmaWMgdG8gdGhlIGJyb3dzZXIgYW5kIE9TIGNvbmZpZ3VyYXRpb24gd2hpY2ggd2Vcblx0XHQvLyBkb24ndCBleHBlY3QgdG8gY2hhbmdlIGJldHdlZW4gaW5pdGlhbGlzYXRpb25zXG5cdFx0aWYgKCAhIERhdGFUYWJsZS5fX2Jyb3dzZXIgKSB7XG5cdFx0XHR2YXIgYnJvd3NlciA9IHt9O1xuXHRcdFx0RGF0YVRhYmxlLl9fYnJvd3NlciA9IGJyb3dzZXI7XG5cdFxuXHRcdFx0Ly8gU2Nyb2xsaW5nIGZlYXR1cmUgLyBxdWlya3MgZGV0ZWN0aW9uXG5cdFx0XHR2YXIgbiA9ICQoJzxkaXYvPicpXG5cdFx0XHRcdC5jc3MoIHtcblx0XHRcdFx0XHRwb3NpdGlvbjogJ2ZpeGVkJyxcblx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHRoZWlnaHQ6IDEsXG5cdFx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdFx0b3ZlcmZsb3c6ICdoaWRkZW4nXG5cdFx0XHRcdH0gKVxuXHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdCQoJzxkaXYvPicpXG5cdFx0XHRcdFx0XHQuY3NzKCB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHRcdFx0XHRcdFx0XHR0b3A6IDEsXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDEsXG5cdFx0XHRcdFx0XHRcdHdpZHRoOiAxMDAsXG5cdFx0XHRcdFx0XHRcdG92ZXJmbG93OiAnc2Nyb2xsJ1xuXHRcdFx0XHRcdFx0fSApXG5cdFx0XHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdFx0XHQkKCc8ZGl2Lz4nKVxuXHRcdFx0XHRcdFx0XHRcdC5jc3MoIHtcblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoOiAnMTAwJScsXG5cdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDEwXG5cdFx0XHRcdFx0XHRcdFx0fSApXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdClcblx0XHRcdFx0LmFwcGVuZFRvKCAnYm9keScgKTtcblx0XG5cdFx0XHR2YXIgb3V0ZXIgPSBuLmNoaWxkcmVuKCk7XG5cdFx0XHR2YXIgaW5uZXIgPSBvdXRlci5jaGlsZHJlbigpO1xuXHRcblx0XHRcdC8vIE51bWJlcnMgYmVsb3csIGluIG9yZGVyLCBhcmU6XG5cdFx0XHQvLyBpbm5lci5vZmZzZXRXaWR0aCwgaW5uZXIuY2xpZW50V2lkdGgsIG91dGVyLm9mZnNldFdpZHRoLCBvdXRlci5jbGllbnRXaWR0aFxuXHRcdFx0Ly9cblx0XHRcdC8vIElFNiBYUDogICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAgMTAwIDEwMCAgODNcblx0XHRcdC8vIElFNyBWaXN0YTogICAgICAgICAgICAgICAgICAgICAgICAxMDAgMTAwIDEwMCAgODNcblx0XHRcdC8vIElFIDgrIFdpbmRvd3M6ICAgICAgICAgICAgICAgICAgICAgODMgIDgzIDEwMCAgODNcblx0XHRcdC8vIEV2ZXJncmVlbiBXaW5kb3dzOiAgICAgICAgICAgICAgICAgODMgIDgzIDEwMCAgODNcblx0XHRcdC8vIEV2ZXJncmVlbiBNYWMgd2l0aCBzY3JvbGxiYXJzOiAgICAgODUgIDg1IDEwMCAgODVcblx0XHRcdC8vIEV2ZXJncmVlbiBNYWMgd2l0aG91dCBzY3JvbGxiYXJzOiAxMDAgMTAwIDEwMCAxMDBcblx0XG5cdFx0XHQvLyBHZXQgc2Nyb2xsYmFyIHdpZHRoXG5cdFx0XHRicm93c2VyLmJhcldpZHRoID0gb3V0ZXJbMF0ub2Zmc2V0V2lkdGggLSBvdXRlclswXS5jbGllbnRXaWR0aDtcblx0XG5cdFx0XHQvLyBJRTYvNyB3aWxsIG92ZXJzaXplIGEgd2lkdGggMTAwJSBlbGVtZW50IGluc2lkZSBhIHNjcm9sbGluZyBlbGVtZW50LCB0b1xuXHRcdFx0Ly8gaW5jbHVkZSB0aGUgd2lkdGggb2YgdGhlIHNjcm9sbGJhciwgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZW5zdXJlIHRoZSBpbm5lclxuXHRcdFx0Ly8gZWxlbWVudCBpcyBjb250YWluZWQgd2l0aG91dCBmb3JjaW5nIHNjcm9sbGluZ1xuXHRcdFx0YnJvd3Nlci5iU2Nyb2xsT3ZlcnNpemUgPSBpbm5lclswXS5vZmZzZXRXaWR0aCA9PT0gMTAwICYmIG91dGVyWzBdLmNsaWVudFdpZHRoICE9PSAxMDA7XG5cdFxuXHRcdFx0Ly8gSW4gcnRsIHRleHQgbGF5b3V0LCBzb21lIGJyb3dzZXJzIChtb3N0LCBidXQgbm90IGFsbCkgd2lsbCBwbGFjZSB0aGVcblx0XHRcdC8vIHNjcm9sbGJhciBvbiB0aGUgbGVmdCwgcmF0aGVyIHRoYW4gdGhlIHJpZ2h0LlxuXHRcdFx0YnJvd3Nlci5iU2Nyb2xsYmFyTGVmdCA9IE1hdGgucm91bmQoIGlubmVyLm9mZnNldCgpLmxlZnQgKSAhPT0gMTtcblx0XG5cdFx0XHQvLyBJRTgtIGRvbid0IHByb3ZpZGUgaGVpZ2h0IGFuZCB3aWR0aCBmb3IgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRicm93c2VyLmJCb3VuZGluZyA9IG5bMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggPyB0cnVlIDogZmFsc2U7XG5cdFxuXHRcdFx0bi5yZW1vdmUoKTtcblx0XHR9XG5cdFxuXHRcdCQuZXh0ZW5kKCBzZXR0aW5ncy5vQnJvd3NlciwgRGF0YVRhYmxlLl9fYnJvd3NlciApO1xuXHRcdHNldHRpbmdzLm9TY3JvbGwuaUJhcldpZHRoID0gRGF0YVRhYmxlLl9fYnJvd3Nlci5iYXJXaWR0aDtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBcnJheS5wcm90b3R5cGUgcmVkdWNlW1JpZ2h0XSBtZXRob2QsIHVzZWQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvbid0IHN1cHBvcnRcblx0ICogSlMgMS42LiBEb25lIHRoaXMgd2F5IHRvIHJlZHVjZSBjb2RlIHNpemUsIHNpbmNlIHdlIGl0ZXJhdGUgZWl0aGVyIHdheVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblJlZHVjZSAoIHRoYXQsIGZuLCBpbml0LCBzdGFydCwgZW5kLCBpbmMgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRpID0gc3RhcnQsXG5cdFx0XHR2YWx1ZSxcblx0XHRcdGlzU2V0ID0gZmFsc2U7XG5cdFxuXHRcdGlmICggaW5pdCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsdWUgPSBpbml0O1xuXHRcdFx0aXNTZXQgPSB0cnVlO1xuXHRcdH1cblx0XG5cdFx0d2hpbGUgKCBpICE9PSBlbmQgKSB7XG5cdFx0XHRpZiAoICEgdGhhdC5oYXNPd25Qcm9wZXJ0eShpKSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFsdWUgPSBpc1NldCA/XG5cdFx0XHRcdGZuKCB2YWx1ZSwgdGhhdFtpXSwgaSwgdGhhdCApIDpcblx0XHRcdFx0dGhhdFtpXTtcblx0XG5cdFx0XHRpc1NldCA9IHRydWU7XG5cdFx0XHRpICs9IGluYztcblx0XHR9XG5cdFxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEFkZCBhIGNvbHVtbiB0byB0aGUgbGlzdCB1c2VkIGZvciB0aGUgdGFibGUgd2l0aCBkZWZhdWx0IHZhbHVlc1xuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtub2RlfSBuVGggVGhlIHRoIGVsZW1lbnQgZm9yIHRoaXMgY29sdW1uXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkFkZENvbHVtbiggb1NldHRpbmdzLCBuVGggKVxuXHR7XG5cdFx0Ly8gQWRkIGNvbHVtbiB0byBhb0NvbHVtbnMgYXJyYXlcblx0XHR2YXIgb0RlZmF1bHRzID0gRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbjtcblx0XHR2YXIgaUNvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnMubGVuZ3RoO1xuXHRcdHZhciBvQ29sID0gJC5leHRlbmQoIHt9LCBEYXRhVGFibGUubW9kZWxzLm9Db2x1bW4sIG9EZWZhdWx0cywge1xuXHRcdFx0XCJuVGhcIjogblRoID8gblRoIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKSxcblx0XHRcdFwic1RpdGxlXCI6ICAgIG9EZWZhdWx0cy5zVGl0bGUgICAgPyBvRGVmYXVsdHMuc1RpdGxlICAgIDogblRoID8gblRoLmlubmVySFRNTCA6ICcnLFxuXHRcdFx0XCJhRGF0YVNvcnRcIjogb0RlZmF1bHRzLmFEYXRhU29ydCA/IG9EZWZhdWx0cy5hRGF0YVNvcnQgOiBbaUNvbF0sXG5cdFx0XHRcIm1EYXRhXCI6IG9EZWZhdWx0cy5tRGF0YSA/IG9EZWZhdWx0cy5tRGF0YSA6IGlDb2wsXG5cdFx0XHRpZHg6IGlDb2xcblx0XHR9ICk7XG5cdFx0b1NldHRpbmdzLmFvQ29sdW1ucy5wdXNoKCBvQ29sICk7XG5cdFxuXHRcdC8vIEFkZCBzZWFyY2ggb2JqZWN0IGZvciBjb2x1bW4gc3BlY2lmaWMgc2VhcmNoLiBOb3RlIHRoYXQgdGhlIGBzZWFyY2hDb2xzWyBpQ29sIF1gXG5cdFx0Ly8gcGFzc2VkIGludG8gZXh0ZW5kIGNhbiBiZSB1bmRlZmluZWQuIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGdpdmUgYSBkZWZhdWx0XG5cdFx0Ly8gd2l0aCBvbmx5IHNvbWUgb2YgdGhlIHBhcmFtZXRlcnMgZGVmaW5lZCwgYW5kIGFsc28gbm90IGdpdmUgYSBkZWZhdWx0XG5cdFx0dmFyIHNlYXJjaENvbHMgPSBvU2V0dGluZ3MuYW9QcmVTZWFyY2hDb2xzO1xuXHRcdHNlYXJjaENvbHNbIGlDb2wgXSA9ICQuZXh0ZW5kKCB7fSwgRGF0YVRhYmxlLm1vZGVscy5vU2VhcmNoLCBzZWFyY2hDb2xzWyBpQ29sIF0gKTtcblx0XG5cdFx0Ly8gVXNlIHRoZSBkZWZhdWx0IGNvbHVtbiBvcHRpb25zIGZ1bmN0aW9uIHRvIGluaXRpYWxpc2UgY2xhc3NlcyBldGNcblx0XHRfZm5Db2x1bW5PcHRpb25zKCBvU2V0dGluZ3MsIGlDb2wsICQoblRoKS5kYXRhKCkgKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBcHBseSBvcHRpb25zIGZvciBhIGNvbHVtblxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtpbnR9IGlDb2wgY29sdW1uIGluZGV4IHRvIGNvbnNpZGVyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb09wdGlvbnMgb2JqZWN0IHdpdGggc1R5cGUsIGJWaXNpYmxlIGFuZCBiU2VhcmNoYWJsZSBldGNcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQ29sdW1uT3B0aW9ucyggb1NldHRpbmdzLCBpQ29sLCBvT3B0aW9ucyApXG5cdHtcblx0XHR2YXIgb0NvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbIGlDb2wgXTtcblx0XHR2YXIgb0NsYXNzZXMgPSBvU2V0dGluZ3Mub0NsYXNzZXM7XG5cdFx0dmFyIHRoID0gJChvQ29sLm5UaCk7XG5cdFxuXHRcdC8vIFRyeSB0byBnZXQgd2lkdGggaW5mb3JtYXRpb24gZnJvbSB0aGUgRE9NLiBXZSBjYW4ndCBnZXQgaXQgZnJvbSBDU1Ncblx0XHQvLyBhcyB3ZSdkIG5lZWQgdG8gcGFyc2UgdGhlIENTUyBzdHlsZXNoZWV0LiBgd2lkdGhgIG9wdGlvbiBjYW4gb3ZlcnJpZGVcblx0XHRpZiAoICEgb0NvbC5zV2lkdGhPcmlnICkge1xuXHRcdFx0Ly8gV2lkdGggYXR0cmlidXRlXG5cdFx0XHRvQ29sLnNXaWR0aE9yaWcgPSB0aC5hdHRyKCd3aWR0aCcpIHx8IG51bGw7XG5cdFxuXHRcdFx0Ly8gU3R5bGUgYXR0cmlidXRlXG5cdFx0XHR2YXIgdCA9ICh0aC5hdHRyKCdzdHlsZScpIHx8ICcnKS5tYXRjaCgvd2lkdGg6XFxzKihcXGQrW3B4ZW0lXSspLyk7XG5cdFx0XHRpZiAoIHQgKSB7XG5cdFx0XHRcdG9Db2wuc1dpZHRoT3JpZyA9IHRbMV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvKiBVc2VyIHNwZWNpZmllZCBjb2x1bW4gb3B0aW9ucyAqL1xuXHRcdGlmICggb09wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvT3B0aW9ucyAhPT0gbnVsbCApXG5cdFx0e1xuXHRcdFx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdF9mbkNvbXBhdENvbHMoIG9PcHRpb25zICk7XG5cdFxuXHRcdFx0Ly8gTWFwIGNhbWVsIGNhc2UgcGFyYW1ldGVycyB0byB0aGVpciBIdW5nYXJpYW4gY291bnRlcnBhcnRzXG5cdFx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuKCBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLCBvT3B0aW9ucyApO1xuXHRcblx0XHRcdC8qIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciBtRGF0YVByb3AgKi9cblx0XHRcdGlmICggb09wdGlvbnMubURhdGFQcm9wICE9PSB1bmRlZmluZWQgJiYgIW9PcHRpb25zLm1EYXRhIClcblx0XHRcdHtcblx0XHRcdFx0b09wdGlvbnMubURhdGEgPSBvT3B0aW9ucy5tRGF0YVByb3A7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBvT3B0aW9ucy5zVHlwZSApXG5cdFx0XHR7XG5cdFx0XHRcdG9Db2wuX3NNYW51YWxUeXBlID0gb09wdGlvbnMuc1R5cGU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gYGNsYXNzYCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gSmF2YXNjcmlwdCwgc28gd2UgbmVlZCB0byBwcm92aWRlXG5cdFx0XHQvLyB0aGUgYWJpbGl0eSB0byB1c2UgYSB2YWxpZCBuYW1lIGZvciB0aGUgY2FtZWwgY2FzZSBpbnB1dFxuXHRcdFx0aWYgKCBvT3B0aW9ucy5jbGFzc05hbWUgJiYgISBvT3B0aW9ucy5zQ2xhc3MgKVxuXHRcdFx0e1xuXHRcdFx0XHRvT3B0aW9ucy5zQ2xhc3MgPSBvT3B0aW9ucy5jbGFzc05hbWU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0JC5leHRlbmQoIG9Db2wsIG9PcHRpb25zICk7XG5cdFx0XHRfZm5NYXAoIG9Db2wsIG9PcHRpb25zLCBcInNXaWR0aFwiLCBcInNXaWR0aE9yaWdcIiApO1xuXHRcblx0XHRcdC8qIGlEYXRhU29ydCB0byBiZSBhcHBsaWVkIChiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSksIGJ1dCBhRGF0YVNvcnQgd2lsbCB0YWtlXG5cdFx0XHQgKiBwcmlvcml0eSBpZiBkZWZpbmVkXG5cdFx0XHQgKi9cblx0XHRcdGlmICggb09wdGlvbnMuaURhdGFTb3J0ICE9PSB1bmRlZmluZWQgKVxuXHRcdFx0e1xuXHRcdFx0XHRvQ29sLmFEYXRhU29ydCA9IFsgb09wdGlvbnMuaURhdGFTb3J0IF07XG5cdFx0XHR9XG5cdFx0XHRfZm5NYXAoIG9Db2wsIG9PcHRpb25zLCBcImFEYXRhU29ydFwiICk7XG5cdFx0fVxuXHRcblx0XHQvKiBDYWNoZSB0aGUgZGF0YSBnZXQgYW5kIHNldCBmdW5jdGlvbnMgZm9yIHNwZWVkICovXG5cdFx0dmFyIG1EYXRhU3JjID0gb0NvbC5tRGF0YTtcblx0XHR2YXIgbURhdGEgPSBfZm5HZXRPYmplY3REYXRhRm4oIG1EYXRhU3JjICk7XG5cdFx0dmFyIG1SZW5kZXIgPSBvQ29sLm1SZW5kZXIgPyBfZm5HZXRPYmplY3REYXRhRm4oIG9Db2wubVJlbmRlciApIDogbnVsbDtcblx0XG5cdFx0dmFyIGF0dHJUZXN0ID0gZnVuY3Rpb24oIHNyYyApIHtcblx0XHRcdHJldHVybiB0eXBlb2Ygc3JjID09PSAnc3RyaW5nJyAmJiBzcmMuaW5kZXhPZignQCcpICE9PSAtMTtcblx0XHR9O1xuXHRcdG9Db2wuX2JBdHRyU3JjID0gJC5pc1BsYWluT2JqZWN0KCBtRGF0YVNyYyApICYmIChcblx0XHRcdGF0dHJUZXN0KG1EYXRhU3JjLnNvcnQpIHx8IGF0dHJUZXN0KG1EYXRhU3JjLnR5cGUpIHx8IGF0dHJUZXN0KG1EYXRhU3JjLmZpbHRlcilcblx0XHQpO1xuXHRcblx0XHRvQ29sLmZuR2V0RGF0YSA9IGZ1bmN0aW9uIChyb3dEYXRhLCB0eXBlLCBtZXRhKSB7XG5cdFx0XHR2YXIgaW5uZXJEYXRhID0gbURhdGEoIHJvd0RhdGEsIHR5cGUsIHVuZGVmaW5lZCwgbWV0YSApO1xuXHRcblx0XHRcdHJldHVybiBtUmVuZGVyICYmIHR5cGUgP1xuXHRcdFx0XHRtUmVuZGVyKCBpbm5lckRhdGEsIHR5cGUsIHJvd0RhdGEsIG1ldGEgKSA6XG5cdFx0XHRcdGlubmVyRGF0YTtcblx0XHR9O1xuXHRcdG9Db2wuZm5TZXREYXRhID0gZnVuY3Rpb24gKCByb3dEYXRhLCB2YWwsIG1ldGEgKSB7XG5cdFx0XHRyZXR1cm4gX2ZuU2V0T2JqZWN0RGF0YUZuKCBtRGF0YVNyYyApKCByb3dEYXRhLCB2YWwsIG1ldGEgKTtcblx0XHR9O1xuXHRcblx0XHQvLyBJbmRpY2F0ZSBpZiBEYXRhVGFibGVzIHNob3VsZCByZWFkIERPTSBkYXRhIGFzIGFuIG9iamVjdCBvciBhcnJheVxuXHRcdC8vIFVzZWQgaW4gX2ZuR2V0Um93RWxlbWVudHNcblx0XHRpZiAoIHR5cGVvZiBtRGF0YVNyYyAhPT0gJ251bWJlcicgKSB7XG5cdFx0XHRvU2V0dGluZ3MuX3Jvd1JlYWRPYmplY3QgPSB0cnVlO1xuXHRcdH1cblx0XG5cdFx0LyogRmVhdHVyZSBzb3J0aW5nIG92ZXJyaWRlcyBjb2x1bW4gc3BlY2lmaWMgd2hlbiBvZmYgKi9cblx0XHRpZiAoICFvU2V0dGluZ3Mub0ZlYXR1cmVzLmJTb3J0IClcblx0XHR7XG5cdFx0XHRvQ29sLmJTb3J0YWJsZSA9IGZhbHNlO1xuXHRcdFx0dGguYWRkQ2xhc3MoIG9DbGFzc2VzLnNTb3J0YWJsZU5vbmUgKTsgLy8gSGF2ZSB0byBhZGQgY2xhc3MgaGVyZSBhcyBvcmRlciBldmVudCBpc24ndCBjYWxsZWRcblx0XHR9XG5cdFxuXHRcdC8qIENoZWNrIHRoYXQgdGhlIGNsYXNzIGFzc2lnbm1lbnQgaXMgY29ycmVjdCBmb3Igc29ydGluZyAqL1xuXHRcdHZhciBiQXNjID0gJC5pbkFycmF5KCdhc2MnLCBvQ29sLmFzU29ydGluZykgIT09IC0xO1xuXHRcdHZhciBiRGVzYyA9ICQuaW5BcnJheSgnZGVzYycsIG9Db2wuYXNTb3J0aW5nKSAhPT0gLTE7XG5cdFx0aWYgKCAhb0NvbC5iU29ydGFibGUgfHwgKCFiQXNjICYmICFiRGVzYykgKVxuXHRcdHtcblx0XHRcdG9Db2wuc1NvcnRpbmdDbGFzcyA9IG9DbGFzc2VzLnNTb3J0YWJsZU5vbmU7XG5cdFx0XHRvQ29sLnNTb3J0aW5nQ2xhc3NKVUkgPSBcIlwiO1xuXHRcdH1cblx0XHRlbHNlIGlmICggYkFzYyAmJiAhYkRlc2MgKVxuXHRcdHtcblx0XHRcdG9Db2wuc1NvcnRpbmdDbGFzcyA9IG9DbGFzc2VzLnNTb3J0YWJsZUFzYztcblx0XHRcdG9Db2wuc1NvcnRpbmdDbGFzc0pVSSA9IG9DbGFzc2VzLnNTb3J0SlVJQXNjQWxsb3dlZDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoICFiQXNjICYmIGJEZXNjIClcblx0XHR7XG5cdFx0XHRvQ29sLnNTb3J0aW5nQ2xhc3MgPSBvQ2xhc3Nlcy5zU29ydGFibGVEZXNjO1xuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzSlVJID0gb0NsYXNzZXMuc1NvcnRKVUlEZXNjQWxsb3dlZDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdG9Db2wuc1NvcnRpbmdDbGFzcyA9IG9DbGFzc2VzLnNTb3J0YWJsZTtcblx0XHRcdG9Db2wuc1NvcnRpbmdDbGFzc0pVSSA9IG9DbGFzc2VzLnNTb3J0SlVJO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBZGp1c3QgdGhlIHRhYmxlIGNvbHVtbiB3aWR0aHMgZm9yIG5ldyBkYXRhLiBOb3RlOiB5b3Ugd291bGQgcHJvYmFibHkgd2FudCB0b1xuXHQgKiBkbyBhIHJlZHJhdyBhZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24hXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQWRqdXN0Q29sdW1uU2l6aW5nICggc2V0dGluZ3MgKVxuXHR7XG5cdFx0LyogTm90IGludGVyZXN0ZWQgaW4gZG9pbmcgY29sdW1uIHdpZHRoIGNhbGN1bGF0aW9uIGlmIGF1dG8td2lkdGggaXMgZGlzYWJsZWQgKi9cblx0XHRpZiAoIHNldHRpbmdzLm9GZWF0dXJlcy5iQXV0b1dpZHRoICE9PSBmYWxzZSApXG5cdFx0e1xuXHRcdFx0dmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnM7XG5cdFxuXHRcdFx0X2ZuQ2FsY3VsYXRlQ29sdW1uV2lkdGhzKCBzZXR0aW5ncyApO1xuXHRcdFx0Zm9yICggdmFyIGk9MCAsIGlMZW49Y29sdW1ucy5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxuXHRcdFx0e1xuXHRcdFx0XHRjb2x1bW5zW2ldLm5UaC5zdHlsZS53aWR0aCA9IGNvbHVtbnNbaV0uc1dpZHRoO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0dmFyIHNjcm9sbCA9IHNldHRpbmdzLm9TY3JvbGw7XG5cdFx0aWYgKCBzY3JvbGwuc1kgIT09ICcnIHx8IHNjcm9sbC5zWCAhPT0gJycpXG5cdFx0e1xuXHRcdFx0X2ZuU2Nyb2xsRHJhdyggc2V0dGluZ3MgKTtcblx0XHR9XG5cdFxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdjb2x1bW4tc2l6aW5nJywgW3NldHRpbmdzXSApO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvdmVydCB0aGUgaW5kZXggb2YgYSB2aXNpYmxlIGNvbHVtbiB0byB0aGUgaW5kZXggaW4gdGhlIGRhdGEgYXJyYXkgKHRha2UgYWNjb3VudFxuXHQgKiBvZiBoaWRkZW4gY29sdW1ucylcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7aW50fSBpTWF0Y2ggVmlzaWJsZSBjb2x1bW4gaW5kZXggdG8gbG9va3VwXG5cdCAqICBAcmV0dXJucyB7aW50fSBpIHRoZSBkYXRhIGluZGV4XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblZpc2libGVUb0NvbHVtbkluZGV4KCBvU2V0dGluZ3MsIGlNYXRjaCApXG5cdHtcblx0XHR2YXIgYWlWaXMgPSBfZm5HZXRDb2x1bW5zKCBvU2V0dGluZ3MsICdiVmlzaWJsZScgKTtcblx0XG5cdFx0cmV0dXJuIHR5cGVvZiBhaVZpc1tpTWF0Y2hdID09PSAnbnVtYmVyJyA/XG5cdFx0XHRhaVZpc1tpTWF0Y2hdIDpcblx0XHRcdG51bGw7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogQ292ZXJ0IHRoZSBpbmRleCBvZiBhbiBpbmRleCBpbiB0aGUgZGF0YSBhcnJheSBhbmQgY29udmVydCBpdCB0byB0aGUgdmlzaWJsZVxuXHQgKiAgIGNvbHVtbiBpbmRleCAodGFrZSBhY2NvdW50IG9mIGhpZGRlbiBjb2x1bW5zKVxuXHQgKiAgQHBhcmFtIHtpbnR9IGlNYXRjaCBDb2x1bW4gaW5kZXggdG8gbG9va3VwXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcmV0dXJucyB7aW50fSBpIHRoZSBkYXRhIGluZGV4XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkNvbHVtbkluZGV4VG9WaXNpYmxlKCBvU2V0dGluZ3MsIGlNYXRjaCApXG5cdHtcblx0XHR2YXIgYWlWaXMgPSBfZm5HZXRDb2x1bW5zKCBvU2V0dGluZ3MsICdiVmlzaWJsZScgKTtcblx0XHR2YXIgaVBvcyA9ICQuaW5BcnJheSggaU1hdGNoLCBhaVZpcyApO1xuXHRcblx0XHRyZXR1cm4gaVBvcyAhPT0gLTEgPyBpUG9zIDogbnVsbDtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBHZXQgdGhlIG51bWJlciBvZiB2aXNpYmxlIGNvbHVtbnNcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEByZXR1cm5zIHtpbnR9IGkgdGhlIG51bWJlciBvZiB2aXNpYmxlIGNvbHVtbnNcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuVmlzYmxlQ29sdW1ucyggb1NldHRpbmdzIClcblx0e1xuXHRcdHJldHVybiBfZm5HZXRDb2x1bW5zKCBvU2V0dGluZ3MsICdiVmlzaWJsZScgKS5sZW5ndGg7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogR2V0IGFuIGFycmF5IG9mIGNvbHVtbiBpbmRleGVzIHRoYXQgbWF0Y2ggYSBnaXZlbiBwcm9wZXJ0eVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNQYXJhbSBQYXJhbWV0ZXIgaW4gYW9Db2x1bW5zIHRvIGxvb2sgZm9yIC0gdHlwaWNhbGx5XG5cdCAqICAgIGJWaXNpYmxlIG9yIGJTZWFyY2hhYmxlXG5cdCAqICBAcmV0dXJucyB7YXJyYXl9IEFycmF5IG9mIGluZGV4ZXMgd2l0aCBtYXRjaGVkIHByb3BlcnRpZXNcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuR2V0Q29sdW1ucyggb1NldHRpbmdzLCBzUGFyYW0gKVxuXHR7XG5cdFx0dmFyIGEgPSBbXTtcblx0XG5cdFx0JC5tYXAoIG9TZXR0aW5ncy5hb0NvbHVtbnMsIGZ1bmN0aW9uKHZhbCwgaSkge1xuXHRcdFx0aWYgKCB2YWxbc1BhcmFtXSApIHtcblx0XHRcdFx0YS5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcblx0XHRyZXR1cm4gYTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBDYWxjdWxhdGUgdGhlICd0eXBlJyBvZiBhIGNvbHVtblxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkNvbHVtblR5cGVzICggc2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnM7XG5cdFx0dmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XG5cdFx0dmFyIHR5cGVzID0gRGF0YVRhYmxlLmV4dC50eXBlLmRldGVjdDtcblx0XHR2YXIgaSwgaWVuLCBqLCBqZW4sIGssIGtlbjtcblx0XHR2YXIgY29sLCBjZWxsLCBkZXRlY3RlZFR5cGUsIGNhY2hlO1xuXHRcblx0XHQvLyBGb3IgZWFjaCBjb2x1bW4sIHNwaW4gb3ZlciB0aGUgXG5cdFx0Zm9yICggaT0wLCBpZW49Y29sdW1ucy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdGNvbCA9IGNvbHVtbnNbaV07XG5cdFx0XHRjYWNoZSA9IFtdO1xuXHRcblx0XHRcdGlmICggISBjb2wuc1R5cGUgJiYgY29sLl9zTWFudWFsVHlwZSApIHtcblx0XHRcdFx0Y29sLnNUeXBlID0gY29sLl9zTWFudWFsVHlwZTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCAhIGNvbC5zVHlwZSApIHtcblx0XHRcdFx0Zm9yICggaj0wLCBqZW49dHlwZXMubGVuZ3RoIDsgajxqZW4gOyBqKysgKSB7XG5cdFx0XHRcdFx0Zm9yICggaz0wLCBrZW49ZGF0YS5sZW5ndGggOyBrPGtlbiA7IGsrKyApIHtcblx0XHRcdFx0XHRcdC8vIFVzZSBhIGNhY2hlIGFycmF5IHNvIHdlIG9ubHkgbmVlZCB0byBnZXQgdGhlIHR5cGUgZGF0YVxuXHRcdFx0XHRcdFx0Ly8gZnJvbSB0aGUgZm9ybWF0dGVyIG9uY2UgKHdoZW4gdXNpbmcgbXVsdGlwbGUgZGV0ZWN0b3JzKVxuXHRcdFx0XHRcdFx0aWYgKCBjYWNoZVtrXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRjYWNoZVtrXSA9IF9mbkdldENlbGxEYXRhKCBzZXR0aW5ncywgaywgaSwgJ3R5cGUnICk7XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0ZGV0ZWN0ZWRUeXBlID0gdHlwZXNbal0oIGNhY2hlW2tdLCBzZXR0aW5ncyApO1xuXHRcblx0XHRcdFx0XHRcdC8vIElmIG51bGwsIHRoZW4gdGhpcyB0eXBlIGNhbid0IGFwcGx5IHRvIHRoaXMgY29sdW1uLCBzb1xuXHRcdFx0XHRcdFx0Ly8gcmF0aGVyIHRoYW4gdGVzdGluZyBhbGwgY2VsbHMsIGJyZWFrIG91dC4gVGhlcmUgaXMgYW5cblx0XHRcdFx0XHRcdC8vIGV4Y2VwdGlvbiBmb3IgdGhlIGxhc3QgdHlwZSB3aGljaCBpcyBgaHRtbGAuIFdlIG5lZWQgdG9cblx0XHRcdFx0XHRcdC8vIHNjYW4gYWxsIHJvd3Mgc2luY2UgaXQgaXMgcG9zc2libGUgdG8gbWl4IHN0cmluZyBhbmQgSFRNTFxuXHRcdFx0XHRcdFx0Ly8gdHlwZXNcblx0XHRcdFx0XHRcdGlmICggISBkZXRlY3RlZFR5cGUgJiYgaiAhPT0gdHlwZXMubGVuZ3RoLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIE9ubHkgYSBzaW5nbGUgbWF0Y2ggaXMgbmVlZGVkIGZvciBodG1sIHR5cGUgc2luY2UgaXQgaXNcblx0XHRcdFx0XHRcdC8vIGJvdHRvbSBvZiB0aGUgcGlsZSBhbmQgdmVyeSBzaW1pbGFyIHRvIHN0cmluZ1xuXHRcdFx0XHRcdFx0aWYgKCBkZXRlY3RlZFR5cGUgPT09ICdodG1sJyApIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBUeXBlIGlzIHZhbGlkIGZvciBhbGwgZGF0YSBwb2ludHMgaW4gdGhlIGNvbHVtbiAtIHVzZSB0aGlzXG5cdFx0XHRcdFx0Ly8gdHlwZVxuXHRcdFx0XHRcdGlmICggZGV0ZWN0ZWRUeXBlICkge1xuXHRcdFx0XHRcdFx0Y29sLnNUeXBlID0gZGV0ZWN0ZWRUeXBlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBGYWxsIGJhY2sgLSBpZiBubyB0eXBlIHdhcyBkZXRlY3RlZCwgYWx3YXlzIHVzZSBzdHJpbmdcblx0XHRcdFx0aWYgKCAhIGNvbC5zVHlwZSApIHtcblx0XHRcdFx0XHRjb2wuc1R5cGUgPSAnc3RyaW5nJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBUYWtlIHRoZSBjb2x1bW4gZGVmaW5pdGlvbnMgYW5kIHN0YXRpYyBjb2x1bW5zIGFycmF5cyBhbmQgY2FsY3VsYXRlIGhvd1xuXHQgKiB0aGV5IHJlbGF0ZSB0byBjb2x1bW4gaW5kZXhlcy4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgdGhlbiBhcHBseSB0aGVcblx0ICogZGVmaW5pdGlvbiBmb3VuZCBmb3IgYSBjb2x1bW4gdG8gYSBzdWl0YWJsZSBjb25maWd1cmF0aW9uIG9iamVjdC5cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7YXJyYXl9IGFvQ29sRGVmcyBUaGUgYW9Db2x1bW5EZWZzIGFycmF5IHRoYXQgaXMgdG8gYmUgYXBwbGllZFxuXHQgKiAgQHBhcmFtIHthcnJheX0gYW9Db2xzIFRoZSBhb0NvbHVtbnMgYXJyYXkgdGhhdCBkZWZpbmVzIGNvbHVtbnMgaW5kaXZpZHVhbGx5XG5cdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBDYWxsYmFjayBmdW5jdGlvbiAtIHRha2VzIHR3byBwYXJhbWV0ZXJzLCB0aGUgY2FsY3VsYXRlZFxuXHQgKiAgICBjb2x1bW4gaW5kZXggYW5kIHRoZSBkZWZpbml0aW9uIGZvciB0aGF0IGNvbHVtbi5cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQXBwbHlDb2x1bW5EZWZzKCBvU2V0dGluZ3MsIGFvQ29sRGVmcywgYW9Db2xzLCBmbiApXG5cdHtcblx0XHR2YXIgaSwgaUxlbiwgaiwgakxlbiwgaywga0xlbiwgZGVmO1xuXHRcdHZhciBjb2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucztcblx0XG5cdFx0Ly8gQ29sdW1uIGRlZmluaXRpb25zIHdpdGggYVRhcmdldHNcblx0XHRpZiAoIGFvQ29sRGVmcyApXG5cdFx0e1xuXHRcdFx0LyogTG9vcCBvdmVyIHRoZSBkZWZpbml0aW9ucyBhcnJheSAtIGxvb3AgaW4gcmV2ZXJzZSBzbyBmaXJzdCBpbnN0YW5jZSBoYXMgcHJpb3JpdHkgKi9cblx0XHRcdGZvciAoIGk9YW9Db2xEZWZzLmxlbmd0aC0xIDsgaT49MCA7IGktLSApXG5cdFx0XHR7XG5cdFx0XHRcdGRlZiA9IGFvQ29sRGVmc1tpXTtcblx0XG5cdFx0XHRcdC8qIEVhY2ggZGVmaW5pdGlvbiBjYW4gdGFyZ2V0IG11bHRpcGxlIGNvbHVtbnMsIGFzIGl0IGlzIGFuIGFycmF5ICovXG5cdFx0XHRcdHZhciBhVGFyZ2V0cyA9IGRlZi50YXJnZXRzICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdGRlZi50YXJnZXRzIDpcblx0XHRcdFx0XHRkZWYuYVRhcmdldHM7XG5cdFxuXHRcdFx0XHRpZiAoICEgJC5pc0FycmF5KCBhVGFyZ2V0cyApIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGFUYXJnZXRzID0gWyBhVGFyZ2V0cyBdO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRmb3IgKCBqPTAsIGpMZW49YVRhcmdldHMubGVuZ3RoIDsgajxqTGVuIDsgaisrIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICggdHlwZW9mIGFUYXJnZXRzW2pdID09PSAnbnVtYmVyJyAmJiBhVGFyZ2V0c1tqXSA+PSAwIClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHQvKiBBZGQgY29sdW1ucyB0aGF0IHdlIGRvbid0IHlldCBrbm93IGFib3V0ICovXG5cdFx0XHRcdFx0XHR3aGlsZSggY29sdW1ucy5sZW5ndGggPD0gYVRhcmdldHNbal0gKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRfZm5BZGRDb2x1bW4oIG9TZXR0aW5ncyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8qIEludGVnZXIsIGJhc2ljIGluZGV4ICovXG5cdFx0XHRcdFx0XHRmbiggYVRhcmdldHNbal0sIGRlZiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICggdHlwZW9mIGFUYXJnZXRzW2pdID09PSAnbnVtYmVyJyAmJiBhVGFyZ2V0c1tqXSA8IDAgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8qIE5lZ2F0aXZlIGludGVnZXIsIHJpZ2h0IHRvIGxlZnQgY29sdW1uIGNvdW50aW5nICovXG5cdFx0XHRcdFx0XHRmbiggY29sdW1ucy5sZW5ndGgrYVRhcmdldHNbal0sIGRlZiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICggdHlwZW9mIGFUYXJnZXRzW2pdID09PSAnc3RyaW5nJyApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0LyogQ2xhc3MgbmFtZSBtYXRjaGluZyBvbiBUSCBlbGVtZW50ICovXG5cdFx0XHRcdFx0XHRmb3IgKCBrPTAsIGtMZW49Y29sdW1ucy5sZW5ndGggOyBrPGtMZW4gOyBrKysgKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRpZiAoIGFUYXJnZXRzW2pdID09IFwiX2FsbFwiIHx8XG5cdFx0XHRcdFx0XHRcdCAgICAgJChjb2x1bW5zW2tdLm5UaCkuaGFzQ2xhc3MoIGFUYXJnZXRzW2pdICkgKVxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0Zm4oIGssIGRlZiApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBTdGF0aWNhbGx5IGRlZmluZWQgY29sdW1ucyBhcnJheVxuXHRcdGlmICggYW9Db2xzIClcblx0XHR7XG5cdFx0XHRmb3IgKCBpPTAsIGlMZW49YW9Db2xzLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0XHR7XG5cdFx0XHRcdGZuKCBpLCBhb0NvbHNbaV0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBZGQgYSBkYXRhIGFycmF5IHRvIHRoZSB0YWJsZSwgY3JlYXRpbmcgRE9NIG5vZGUgZXRjLiBUaGlzIGlzIHRoZSBwYXJhbGxlbCB0b1xuXHQgKiBfZm5HYXRoZXJEYXRhLCBidXQgZm9yIGFkZGluZyByb3dzIGZyb20gYSBKYXZhc2NyaXB0IHNvdXJjZSwgcmF0aGVyIHRoYW4gYVxuXHQgKiBET00gc291cmNlLlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHthcnJheX0gYURhdGEgZGF0YSBhcnJheSB0byBiZSBhZGRlZFxuXHQgKiAgQHBhcmFtIHtub2RlfSBbblRyXSBUUiBlbGVtZW50IHRvIGFkZCB0byB0aGUgdGFibGUgLSBvcHRpb25hbC4gSWYgbm90IGdpdmVuLFxuXHQgKiAgICBEYXRhVGFibGVzIHdpbGwgY3JlYXRlIGEgcm93IGF1dG9tYXRpY2FsbHlcblx0ICogIEBwYXJhbSB7YXJyYXl9IFthblRkc10gQXJyYXkgb2YgVER8VEggZWxlbWVudHMgZm9yIHRoZSByb3cgLSBtdXN0IGJlIGdpdmVuXG5cdCAqICAgIGlmIG5UciBpcy5cblx0ICogIEByZXR1cm5zIHtpbnR9ID49MCBpZiBzdWNjZXNzZnVsIChpbmRleCBvZiBuZXcgYW9EYXRhIGVudHJ5KSwgLTEgaWYgZmFpbGVkXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkFkZERhdGEgKCBvU2V0dGluZ3MsIGFEYXRhSW4sIG5UciwgYW5UZHMgKVxuXHR7XG5cdFx0LyogQ3JlYXRlIHRoZSBvYmplY3QgZm9yIHN0b3JpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBuZXcgcm93ICovXG5cdFx0dmFyIGlSb3cgPSBvU2V0dGluZ3MuYW9EYXRhLmxlbmd0aDtcblx0XHR2YXIgb0RhdGEgPSAkLmV4dGVuZCggdHJ1ZSwge30sIERhdGFUYWJsZS5tb2RlbHMub1Jvdywge1xuXHRcdFx0c3JjOiBuVHIgPyAnZG9tJyA6ICdkYXRhJyxcblx0XHRcdGlkeDogaVJvd1xuXHRcdH0gKTtcblx0XG5cdFx0b0RhdGEuX2FEYXRhID0gYURhdGFJbjtcblx0XHRvU2V0dGluZ3MuYW9EYXRhLnB1c2goIG9EYXRhICk7XG5cdFxuXHRcdC8qIENyZWF0ZSB0aGUgY2VsbHMgKi9cblx0XHR2YXIgblRkLCBzVGhpc1R5cGU7XG5cdFx0dmFyIGNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zO1xuXHRcblx0XHQvLyBJbnZhbGlkYXRlIHRoZSBjb2x1bW4gdHlwZXMgYXMgdGhlIG5ldyBkYXRhIG5lZWRzIHRvIGJlIHJldmFsaWRhdGVkXG5cdFx0Zm9yICggdmFyIGk9MCwgaUxlbj1jb2x1bW5zLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0e1xuXHRcdFx0Y29sdW1uc1tpXS5zVHlwZSA9IG51bGw7XG5cdFx0fVxuXHRcblx0XHQvKiBBZGQgdG8gdGhlIGRpc3BsYXkgYXJyYXkgKi9cblx0XHRvU2V0dGluZ3MuYWlEaXNwbGF5TWFzdGVyLnB1c2goIGlSb3cgKTtcblx0XG5cdFx0dmFyIGlkID0gb1NldHRpbmdzLnJvd0lkRm4oIGFEYXRhSW4gKTtcblx0XHRpZiAoIGlkICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRvU2V0dGluZ3MuYUlkc1sgaWQgXSA9IG9EYXRhO1xuXHRcdH1cblx0XG5cdFx0LyogQ3JlYXRlIHRoZSBET00gaW5mb3JtYXRpb24sIG9yIHJlZ2lzdGVyIGl0IGlmIGFscmVhZHkgcHJlc2VudCAqL1xuXHRcdGlmICggblRyIHx8ICEgb1NldHRpbmdzLm9GZWF0dXJlcy5iRGVmZXJSZW5kZXIgKVxuXHRcdHtcblx0XHRcdF9mbkNyZWF0ZVRyKCBvU2V0dGluZ3MsIGlSb3csIG5UciwgYW5UZHMgKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBpUm93O1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEFkZCBvbmUgb3IgbW9yZSBUUiBlbGVtZW50cyB0byB0aGUgdGFibGUuIEdlbmVyYWxseSB3ZSdkIGV4cGVjdCB0b1xuXHQgKiB1c2UgdGhpcyBmb3IgcmVhZGluZyBkYXRhIGZyb20gYSBET00gc291cmNlZCB0YWJsZSwgYnV0IGl0IGNvdWxkIGJlXG5cdCAqIHVzZWQgZm9yIGFuIFRSIGVsZW1lbnQuIE5vdGUgdGhhdCBpZiBhIFRSIGlzIGdpdmVuLCBpdCBpcyB1c2VkIChpLmUuXG5cdCAqIGl0IGlzIG5vdCBjbG9uZWQpLlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge2FycmF5fG5vZGV8alF1ZXJ5fSB0cnMgVGhlIFRSIGVsZW1lbnQocykgdG8gYWRkIHRvIHRoZSB0YWJsZVxuXHQgKiAgQHJldHVybnMge2FycmF5fSBBcnJheSBvZiBpbmRleGVzIGZvciB0aGUgYWRkZWQgcm93c1xuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5BZGRUciggc2V0dGluZ3MsIHRycyApXG5cdHtcblx0XHR2YXIgcm93O1xuXHRcblx0XHQvLyBBbGxvdyBhbiBpbmRpdmlkdWFsIG5vZGUgdG8gYmUgcGFzc2VkIGluXG5cdFx0aWYgKCAhICh0cnMgaW5zdGFuY2VvZiAkKSApIHtcblx0XHRcdHRycyA9ICQodHJzKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiB0cnMubWFwKCBmdW5jdGlvbiAoaSwgZWwpIHtcblx0XHRcdHJvdyA9IF9mbkdldFJvd0VsZW1lbnRzKCBzZXR0aW5ncywgZWwgKTtcblx0XHRcdHJldHVybiBfZm5BZGREYXRhKCBzZXR0aW5ncywgcm93LmRhdGEsIGVsLCByb3cuY2VsbHMgKTtcblx0XHR9ICk7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogVGFrZSBhIFRSIGVsZW1lbnQgYW5kIGNvbnZlcnQgaXQgdG8gYW4gaW5kZXggaW4gYW9EYXRhXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge25vZGV9IG4gdGhlIFRSIGVsZW1lbnQgdG8gZmluZFxuXHQgKiAgQHJldHVybnMge2ludH0gaW5kZXggaWYgdGhlIG5vZGUgaXMgZm91bmQsIG51bGwgaWYgbm90XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbk5vZGVUb0RhdGFJbmRleCggb1NldHRpbmdzLCBuIClcblx0e1xuXHRcdHJldHVybiAobi5fRFRfUm93SW5kZXghPT11bmRlZmluZWQpID8gbi5fRFRfUm93SW5kZXggOiBudWxsO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIFRha2UgYSBURCBlbGVtZW50IGFuZCBjb252ZXJ0IGl0IGludG8gYSBjb2x1bW4gZGF0YSBpbmRleCAobm90IHRoZSB2aXNpYmxlIGluZGV4KVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtpbnR9IGlSb3cgVGhlIHJvdyBudW1iZXIgdGhlIFREL1RIIGNhbiBiZSBmb3VuZCBpblxuXHQgKiAgQHBhcmFtIHtub2RlfSBuIFRoZSBURC9USCBlbGVtZW50IHRvIGZpbmRcblx0ICogIEByZXR1cm5zIHtpbnR9IGluZGV4IGlmIHRoZSBub2RlIGlzIGZvdW5kLCAtMSBpZiBub3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuTm9kZVRvQ29sdW1uSW5kZXgoIG9TZXR0aW5ncywgaVJvdywgbiApXG5cdHtcblx0XHRyZXR1cm4gJC5pbkFycmF5KCBuLCBvU2V0dGluZ3MuYW9EYXRhWyBpUm93IF0uYW5DZWxscyApO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdldCB0aGUgZGF0YSBmb3IgYSBnaXZlbiBjZWxsIGZyb20gdGhlIGludGVybmFsIGNhY2hlLCB0YWtpbmcgaW50byBhY2NvdW50IGRhdGEgbWFwcGluZ1xuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge2ludH0gcm93SWR4IGFvRGF0YSByb3cgaWRcblx0ICogIEBwYXJhbSB7aW50fSBjb2xJZHggQ29sdW1uIGluZGV4XG5cdCAqICBAcGFyYW0ge3N0cmluZ30gdHlwZSBkYXRhIGdldCB0eXBlICgnZGlzcGxheScsICd0eXBlJyAnZmlsdGVyJyAnc29ydCcpXG5cdCAqICBAcmV0dXJucyB7Kn0gQ2VsbCBkYXRhXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkdldENlbGxEYXRhKCBzZXR0aW5ncywgcm93SWR4LCBjb2xJZHgsIHR5cGUgKVxuXHR7XG5cdFx0dmFyIGRyYXcgICAgICAgICAgID0gc2V0dGluZ3MuaURyYXc7XG5cdFx0dmFyIGNvbCAgICAgICAgICAgID0gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbElkeF07XG5cdFx0dmFyIHJvd0RhdGEgICAgICAgID0gc2V0dGluZ3MuYW9EYXRhW3Jvd0lkeF0uX2FEYXRhO1xuXHRcdHZhciBkZWZhdWx0Q29udGVudCA9IGNvbC5zRGVmYXVsdENvbnRlbnQ7XG5cdFx0dmFyIGNlbGxEYXRhICAgICAgID0gY29sLmZuR2V0RGF0YSggcm93RGF0YSwgdHlwZSwge1xuXHRcdFx0c2V0dGluZ3M6IHNldHRpbmdzLFxuXHRcdFx0cm93OiAgICAgIHJvd0lkeCxcblx0XHRcdGNvbDogICAgICBjb2xJZHhcblx0XHR9ICk7XG5cdFxuXHRcdGlmICggY2VsbERhdGEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggc2V0dGluZ3MuaURyYXdFcnJvciAhPSBkcmF3ICYmIGRlZmF1bHRDb250ZW50ID09PSBudWxsICkge1xuXHRcdFx0XHRfZm5Mb2coIHNldHRpbmdzLCAwLCBcIlJlcXVlc3RlZCB1bmtub3duIHBhcmFtZXRlciBcIitcblx0XHRcdFx0XHQodHlwZW9mIGNvbC5tRGF0YT09J2Z1bmN0aW9uJyA/ICd7ZnVuY3Rpb259JyA6IFwiJ1wiK2NvbC5tRGF0YStcIidcIikrXG5cdFx0XHRcdFx0XCIgZm9yIHJvdyBcIityb3dJZHgrXCIsIGNvbHVtbiBcIitjb2xJZHgsIDQgKTtcblx0XHRcdFx0c2V0dGluZ3MuaURyYXdFcnJvciA9IGRyYXc7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZGVmYXVsdENvbnRlbnQ7XG5cdFx0fVxuXHRcblx0XHQvKiBXaGVuIHRoZSBkYXRhIHNvdXJjZSBpcyBudWxsLCB3ZSBjYW4gdXNlIGRlZmF1bHQgY29sdW1uIGRhdGEgKi9cblx0XHRpZiAoIChjZWxsRGF0YSA9PT0gcm93RGF0YSB8fCBjZWxsRGF0YSA9PT0gbnVsbCkgJiYgZGVmYXVsdENvbnRlbnQgIT09IG51bGwgKSB7XG5cdFx0XHRjZWxsRGF0YSA9IGRlZmF1bHRDb250ZW50O1xuXHRcdH1cblx0XHRlbHNlIGlmICggdHlwZW9mIGNlbGxEYXRhID09PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0Ly8gSWYgdGhlIGRhdGEgc291cmNlIGlzIGEgZnVuY3Rpb24sIHRoZW4gd2UgcnVuIGl0IGFuZCB1c2UgdGhlIHJldHVybixcblx0XHRcdC8vIGV4ZWN1dGluZyBpbiB0aGUgc2NvcGUgb2YgdGhlIGRhdGEgb2JqZWN0IChmb3IgaW5zdGFuY2VzKVxuXHRcdFx0cmV0dXJuIGNlbGxEYXRhLmNhbGwoIHJvd0RhdGEgKTtcblx0XHR9XG5cdFxuXHRcdGlmICggY2VsbERhdGEgPT09IG51bGwgJiYgdHlwZSA9PSAnZGlzcGxheScgKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcdHJldHVybiBjZWxsRGF0YTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBTZXQgdGhlIHZhbHVlIGZvciBhIHNwZWNpZmljIGNlbGwsIGludG8gdGhlIGludGVybmFsIGRhdGEgY2FjaGVcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtpbnR9IHJvd0lkeCBhb0RhdGEgcm93IGlkXG5cdCAqICBAcGFyYW0ge2ludH0gY29sSWR4IENvbHVtbiBpbmRleFxuXHQgKiAgQHBhcmFtIHsqfSB2YWwgVmFsdWUgdG8gc2V0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblNldENlbGxEYXRhKCBzZXR0aW5ncywgcm93SWR4LCBjb2xJZHgsIHZhbCApXG5cdHtcblx0XHR2YXIgY29sICAgICA9IHNldHRpbmdzLmFvQ29sdW1uc1tjb2xJZHhdO1xuXHRcdHZhciByb3dEYXRhID0gc2V0dGluZ3MuYW9EYXRhW3Jvd0lkeF0uX2FEYXRhO1xuXHRcblx0XHRjb2wuZm5TZXREYXRhKCByb3dEYXRhLCB2YWwsIHtcblx0XHRcdHNldHRpbmdzOiBzZXR0aW5ncyxcblx0XHRcdHJvdzogICAgICByb3dJZHgsXG5cdFx0XHRjb2w6ICAgICAgY29sSWR4XG5cdFx0fSAgKTtcblx0fVxuXHRcblx0XG5cdC8vIFByaXZhdGUgdmFyaWFibGUgdGhhdCBpcyB1c2VkIHRvIG1hdGNoIGFjdGlvbiBzeW50YXggaW4gdGhlIGRhdGEgcHJvcGVydHkgb2JqZWN0XG5cdHZhciBfX3JlQXJyYXkgPSAvXFxbLio/XFxdJC87XG5cdHZhciBfX3JlRm4gPSAvXFwoXFwpJC87XG5cdFxuXHQvKipcblx0ICogU3BsaXQgc3RyaW5nIG9uIHBlcmlvZHMsIHRha2luZyBpbnRvIGFjY291bnQgZXNjYXBlZCBwZXJpb2RzXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gc3RyIFN0cmluZyB0byBzcGxpdFxuXHQgKiBAcmV0dXJuIHthcnJheX0gU3BsaXQgc3RyaW5nXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5TcGxpdE9iak5vdGF0aW9uKCBzdHIgKVxuXHR7XG5cdFx0cmV0dXJuICQubWFwKCBzdHIubWF0Y2goLyhcXFxcLnxbXlxcLl0pKy9nKSB8fCBbJyddLCBmdW5jdGlvbiAoIHMgKSB7XG5cdFx0XHRyZXR1cm4gcy5yZXBsYWNlKC9cXFxcLi9nLCAnLicpO1xuXHRcdH0gKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGdldCBkYXRhIGZyb20gYSBzb3VyY2Ugb2JqZWN0LCB0YWtpbmdcblx0ICogaW50byBhY2NvdW50IHRoZSBhYmlsaXR5IHRvIHVzZSBuZXN0ZWQgb2JqZWN0cyBhcyBhIHNvdXJjZVxuXHQgKiAgQHBhcmFtIHtzdHJpbmd8aW50fGZ1bmN0aW9ufSBtU291cmNlIFRoZSBkYXRhIHNvdXJjZSBmb3IgdGhlIG9iamVjdFxuXHQgKiAgQHJldHVybnMge2Z1bmN0aW9ufSBEYXRhIGdldCBmdW5jdGlvblxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5HZXRPYmplY3REYXRhRm4oIG1Tb3VyY2UgKVxuXHR7XG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIG1Tb3VyY2UgKSApXG5cdFx0e1xuXHRcdFx0LyogQnVpbGQgYW4gb2JqZWN0IG9mIGdldCBmdW5jdGlvbnMsIGFuZCB3cmFwIHRoZW0gaW4gYSBzaW5nbGUgY2FsbCAqL1xuXHRcdFx0dmFyIG8gPSB7fTtcblx0XHRcdCQuZWFjaCggbVNvdXJjZSwgZnVuY3Rpb24gKGtleSwgdmFsKSB7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdG9ba2V5XSA9IF9mbkdldE9iamVjdERhdGFGbiggdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdywgbWV0YSkge1xuXHRcdFx0XHR2YXIgdCA9IG9bdHlwZV0gfHwgby5fO1xuXHRcdFx0XHRyZXR1cm4gdCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHR0KGRhdGEsIHR5cGUsIHJvdywgbWV0YSkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRlbHNlIGlmICggbVNvdXJjZSA9PT0gbnVsbCApXG5cdFx0e1xuXHRcdFx0LyogR2l2ZSBhbiBlbXB0eSBzdHJpbmcgZm9yIHJlbmRlcmluZyAvIHNvcnRpbmcgZXRjICovXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHsgLy8gdHlwZSwgcm93IGFuZCBtZXRhIGFsc28gcGFzc2VkLCBidXQgbm90IHVzZWRcblx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRlbHNlIGlmICggdHlwZW9mIG1Tb3VyY2UgPT09ICdmdW5jdGlvbicgKVxuXHRcdHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93LCBtZXRhKSB7XG5cdFx0XHRcdHJldHVybiBtU291cmNlKCBkYXRhLCB0eXBlLCByb3csIG1ldGEgKTtcblx0XHRcdH07XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCB0eXBlb2YgbVNvdXJjZSA9PT0gJ3N0cmluZycgJiYgKG1Tb3VyY2UuaW5kZXhPZignLicpICE9PSAtMSB8fFxuXHRcdFx0ICAgICAgbVNvdXJjZS5pbmRleE9mKCdbJykgIT09IC0xIHx8IG1Tb3VyY2UuaW5kZXhPZignKCcpICE9PSAtMSkgKVxuXHRcdHtcblx0XHRcdC8qIElmIHRoZXJlIGlzIGEgLiBpbiB0aGUgc291cmNlIHN0cmluZyB0aGVuIHRoZSBkYXRhIHNvdXJjZSBpcyBpbiBhXG5cdFx0XHQgKiBuZXN0ZWQgb2JqZWN0IHNvIHdlIGxvb3Agb3ZlciB0aGUgZGF0YSBmb3IgZWFjaCBsZXZlbCB0byBnZXQgdGhlIG5leHRcblx0XHRcdCAqIGxldmVsIGRvd24uIE9uIGVhY2ggbG9vcCB3ZSB0ZXN0IGZvciB1bmRlZmluZWQsIGFuZCBpZiBmb3VuZCBpbW1lZGlhdGVseVxuXHRcdFx0ICogcmV0dXJuLiBUaGlzIGFsbG93cyBlbnRpcmUgb2JqZWN0cyB0byBiZSBtaXNzaW5nIGFuZCBzRGVmYXVsdENvbnRlbnQgdG9cblx0XHRcdCAqIGJlIHVzZWQgaWYgZGVmaW5lZCwgcmF0aGVyIHRoYW4gdGhyb3dpbmcgYW4gZXJyb3Jcblx0XHRcdCAqL1xuXHRcdFx0dmFyIGZldGNoRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBzcmMpIHtcblx0XHRcdFx0dmFyIGFycmF5Tm90YXRpb24sIGZ1bmNOb3RhdGlvbiwgb3V0LCBpbm5lclNyYztcblx0XG5cdFx0XHRcdGlmICggc3JjICE9PSBcIlwiIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBhID0gX2ZuU3BsaXRPYmpOb3RhdGlvbiggc3JjICk7XG5cdFxuXHRcdFx0XHRcdGZvciAoIHZhciBpPTAsIGlMZW49YS5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIENoZWNrIGlmIHdlIGFyZSBkZWFsaW5nIHdpdGggc3BlY2lhbCBub3RhdGlvblxuXHRcdFx0XHRcdFx0YXJyYXlOb3RhdGlvbiA9IGFbaV0ubWF0Y2goX19yZUFycmF5KTtcblx0XHRcdFx0XHRcdGZ1bmNOb3RhdGlvbiA9IGFbaV0ubWF0Y2goX19yZUZuKTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIGFycmF5Tm90YXRpb24gKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvLyBBcnJheSBub3RhdGlvblxuXHRcdFx0XHRcdFx0XHRhW2ldID0gYVtpXS5yZXBsYWNlKF9fcmVBcnJheSwgJycpO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gQ29uZGl0aW9uIGFsbG93cyBzaW1wbHkgW10gdG8gYmUgcGFzc2VkIGluXG5cdFx0XHRcdFx0XHRcdGlmICggYVtpXSAhPT0gXCJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRkYXRhID0gZGF0YVsgYVtpXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdG91dCA9IFtdO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSByZW1haW5kZXIgb2YgdGhlIG5lc3RlZCBvYmplY3QgdG8gZ2V0XG5cdFx0XHRcdFx0XHRcdGEuc3BsaWNlKCAwLCBpKzEgKTtcblx0XHRcdFx0XHRcdFx0aW5uZXJTcmMgPSBhLmpvaW4oJy4nKTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFRyYXZlcnNlIGVhY2ggZW50cnkgaW4gdGhlIGFycmF5IGdldHRpbmcgdGhlIHByb3BlcnRpZXMgcmVxdWVzdGVkXG5cdFx0XHRcdFx0XHRcdGlmICggJC5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIGo9MCwgakxlbj1kYXRhLmxlbmd0aCA7IGo8akxlbiA7IGorKyApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dC5wdXNoKCBmZXRjaERhdGEoIGRhdGFbal0sIHR5cGUsIGlubmVyU3JjICkgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdC8vIElmIGEgc3RyaW5nIGlzIGdpdmVuIGluIGJldHdlZW4gdGhlIGFycmF5IG5vdGF0aW9uIGluZGljYXRvcnMsIHRoYXRcblx0XHRcdFx0XHRcdFx0Ly8gaXMgdXNlZCB0byBqb2luIHRoZSBzdHJpbmdzIHRvZ2V0aGVyLCBvdGhlcndpc2UgYW4gYXJyYXkgaXMgcmV0dXJuZWRcblx0XHRcdFx0XHRcdFx0dmFyIGpvaW4gPSBhcnJheU5vdGF0aW9uWzBdLnN1YnN0cmluZygxLCBhcnJheU5vdGF0aW9uWzBdLmxlbmd0aC0xKTtcblx0XHRcdFx0XHRcdFx0ZGF0YSA9IChqb2luPT09XCJcIikgPyBvdXQgOiBvdXQuam9pbihqb2luKTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFRoZSBpbm5lciBjYWxsIHRvIGZldGNoRGF0YSBoYXMgYWxyZWFkeSB0cmF2ZXJzZWQgdGhyb3VnaCB0aGUgcmVtYWluZGVyXG5cdFx0XHRcdFx0XHRcdC8vIG9mIHRoZSBzb3VyY2UgcmVxdWVzdGVkLCBzbyB3ZSBleGl0IGZyb20gdGhlIGxvb3Bcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmICggZnVuY05vdGF0aW9uIClcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly8gRnVuY3Rpb24gY2FsbFxuXHRcdFx0XHRcdFx0XHRhW2ldID0gYVtpXS5yZXBsYWNlKF9fcmVGbiwgJycpO1xuXHRcdFx0XHRcdFx0XHRkYXRhID0gZGF0YVsgYVtpXSBdKCk7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdGlmICggZGF0YSA9PT0gbnVsbCB8fCBkYXRhWyBhW2ldIF0gPT09IHVuZGVmaW5lZCApXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkYXRhID0gZGF0YVsgYVtpXSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHR9O1xuXHRcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdHlwZSkgeyAvLyByb3cgYW5kIG1ldGEgYWxzbyBwYXNzZWQsIGJ1dCBub3QgdXNlZFxuXHRcdFx0XHRyZXR1cm4gZmV0Y2hEYXRhKCBkYXRhLCB0eXBlLCBtU291cmNlICk7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0LyogQXJyYXkgb3IgZmxhdCBvYmplY3QgbWFwcGluZyAqL1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChkYXRhLCB0eXBlKSB7IC8vIHJvdyBhbmQgbWV0YSBhbHNvIHBhc3NlZCwgYnV0IG5vdCB1c2VkXG5cdFx0XHRcdHJldHVybiBkYXRhW21Tb3VyY2VdO1xuXHRcdFx0fTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBzZXQgZGF0YSBmcm9tIGEgc291cmNlIG9iamVjdCwgdGFraW5nXG5cdCAqIGludG8gYWNjb3VudCB0aGUgYWJpbGl0eSB0byB1c2UgbmVzdGVkIG9iamVjdHMgYXMgYSBzb3VyY2Vcblx0ICogIEBwYXJhbSB7c3RyaW5nfGludHxmdW5jdGlvbn0gbVNvdXJjZSBUaGUgZGF0YSBzb3VyY2UgZm9yIHRoZSBvYmplY3Rcblx0ICogIEByZXR1cm5zIHtmdW5jdGlvbn0gRGF0YSBzZXQgZnVuY3Rpb25cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuU2V0T2JqZWN0RGF0YUZuKCBtU291cmNlIClcblx0e1xuXHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBtU291cmNlICkgKVxuXHRcdHtcblx0XHRcdC8qIFVubGlrZSBnZXQsIG9ubHkgdGhlIHVuZGVyc2NvcmUgKGdsb2JhbCkgb3B0aW9uIGlzIHVzZWQgZm9yIGZvclxuXHRcdFx0ICogc2V0dGluZyBkYXRhIHNpbmNlIHdlIGRvbid0IGtub3cgdGhlIHR5cGUgaGVyZS4gVGhpcyBpcyB3aHkgYW4gb2JqZWN0XG5cdFx0XHQgKiBvcHRpb24gaXMgbm90IGRvY3VtZW50ZWQgZm9yIGBtRGF0YWAgKHdoaWNoIGlzIHJlYWQvd3JpdGUpLCBidXQgaXQgaXNcblx0XHRcdCAqIGZvciBgbVJlbmRlcmAgd2hpY2ggaXMgcmVhZCBvbmx5LlxuXHRcdFx0ICovXG5cdFx0XHRyZXR1cm4gX2ZuU2V0T2JqZWN0RGF0YUZuKCBtU291cmNlLl8gKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIG1Tb3VyY2UgPT09IG51bGwgKVxuXHRcdHtcblx0XHRcdC8qIE5vdGhpbmcgdG8gZG8gd2hlbiB0aGUgZGF0YSBzb3VyY2UgaXMgbnVsbCAqL1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuXHRcdH1cblx0XHRlbHNlIGlmICggdHlwZW9mIG1Tb3VyY2UgPT09ICdmdW5jdGlvbicgKVxuXHRcdHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdmFsLCBtZXRhKSB7XG5cdFx0XHRcdG1Tb3VyY2UoIGRhdGEsICdzZXQnLCB2YWwsIG1ldGEgKTtcblx0XHRcdH07XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCB0eXBlb2YgbVNvdXJjZSA9PT0gJ3N0cmluZycgJiYgKG1Tb3VyY2UuaW5kZXhPZignLicpICE9PSAtMSB8fFxuXHRcdFx0ICAgICAgbVNvdXJjZS5pbmRleE9mKCdbJykgIT09IC0xIHx8IG1Tb3VyY2UuaW5kZXhPZignKCcpICE9PSAtMSkgKVxuXHRcdHtcblx0XHRcdC8qIExpa2UgdGhlIGdldCwgd2UgbmVlZCB0byBnZXQgZGF0YSBmcm9tIGEgbmVzdGVkIG9iamVjdCAqL1xuXHRcdFx0dmFyIHNldERhdGEgPSBmdW5jdGlvbiAoZGF0YSwgdmFsLCBzcmMpIHtcblx0XHRcdFx0dmFyIGEgPSBfZm5TcGxpdE9iak5vdGF0aW9uKCBzcmMgKSwgYjtcblx0XHRcdFx0dmFyIGFMYXN0ID0gYVthLmxlbmd0aC0xXTtcblx0XHRcdFx0dmFyIGFycmF5Tm90YXRpb24sIGZ1bmNOb3RhdGlvbiwgbywgaW5uZXJTcmM7XG5cdFxuXHRcdFx0XHRmb3IgKCB2YXIgaT0wLCBpTGVuPWEubGVuZ3RoLTEgOyBpPGlMZW4gOyBpKysgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgaWYgd2UgYXJlIGRlYWxpbmcgd2l0aCBhbiBhcnJheSBub3RhdGlvbiByZXF1ZXN0XG5cdFx0XHRcdFx0YXJyYXlOb3RhdGlvbiA9IGFbaV0ubWF0Y2goX19yZUFycmF5KTtcblx0XHRcdFx0XHRmdW5jTm90YXRpb24gPSBhW2ldLm1hdGNoKF9fcmVGbik7XG5cdFxuXHRcdFx0XHRcdGlmICggYXJyYXlOb3RhdGlvbiApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YVtpXSA9IGFbaV0ucmVwbGFjZShfX3JlQXJyYXksICcnKTtcblx0XHRcdFx0XHRcdGRhdGFbIGFbaV0gXSA9IFtdO1xuXHRcblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgcmVtYWluZGVyIG9mIHRoZSBuZXN0ZWQgb2JqZWN0IHRvIHNldCBzbyB3ZSBjYW4gcmVjdXJzZVxuXHRcdFx0XHRcdFx0YiA9IGEuc2xpY2UoKTtcblx0XHRcdFx0XHRcdGIuc3BsaWNlKCAwLCBpKzEgKTtcblx0XHRcdFx0XHRcdGlubmVyU3JjID0gYi5qb2luKCcuJyk7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gVHJhdmVyc2UgZWFjaCBlbnRyeSBpbiB0aGUgYXJyYXkgc2V0dGluZyB0aGUgcHJvcGVydGllcyByZXF1ZXN0ZWRcblx0XHRcdFx0XHRcdGlmICggJC5pc0FycmF5KCB2YWwgKSApXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBqPTAsIGpMZW49dmFsLmxlbmd0aCA7IGo8akxlbiA7IGorKyApXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRvID0ge307XG5cdFx0XHRcdFx0XHRcdFx0c2V0RGF0YSggbywgdmFsW2pdLCBpbm5lclNyYyApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFbIGFbaV0gXS5wdXNoKCBvICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly8gV2UndmUgYmVlbiBhc2tlZCB0byBzYXZlIGRhdGEgdG8gYW4gYXJyYXksIGJ1dCBpdFxuXHRcdFx0XHRcdFx0XHQvLyBpc24ndCBhcnJheSBkYXRhIHRvIGJlIHNhdmVkLiBCZXN0IHRoYXQgY2FuIGJlIGRvbmVcblx0XHRcdFx0XHRcdFx0Ly8gaXMgdG8ganVzdCBzYXZlIHRoZSB2YWx1ZS5cblx0XHRcdFx0XHRcdFx0ZGF0YVsgYVtpXSBdID0gdmFsO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIFRoZSBpbm5lciBjYWxsIHRvIHNldERhdGEgaGFzIGFscmVhZHkgdHJhdmVyc2VkIHRocm91Z2ggdGhlIHJlbWFpbmRlclxuXHRcdFx0XHRcdFx0Ly8gb2YgdGhlIHNvdXJjZSBhbmQgaGFzIHNldCB0aGUgZGF0YSwgdGh1cyB3ZSBjYW4gZXhpdCBoZXJlXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKCBmdW5jTm90YXRpb24gKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIEZ1bmN0aW9uIGNhbGxcblx0XHRcdFx0XHRcdGFbaV0gPSBhW2ldLnJlcGxhY2UoX19yZUZuLCAnJyk7XG5cdFx0XHRcdFx0XHRkYXRhID0gZGF0YVsgYVtpXSBdKCB2YWwgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIElmIHRoZSBuZXN0ZWQgb2JqZWN0IGRvZXNuJ3QgY3VycmVudGx5IGV4aXN0IC0gc2luY2Ugd2UgYXJlXG5cdFx0XHRcdFx0Ly8gdHJ5aW5nIHRvIHNldCB0aGUgdmFsdWUgLSBjcmVhdGUgaXRcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGFbaV0gXSA9PT0gbnVsbCB8fCBkYXRhWyBhW2ldIF0gPT09IHVuZGVmaW5lZCApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZGF0YVsgYVtpXSBdID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhWyBhW2ldIF07XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIExhc3QgaXRlbSBpbiB0aGUgaW5wdXQgLSBpLmUsIHRoZSBhY3R1YWwgc2V0XG5cdFx0XHRcdGlmICggYUxhc3QubWF0Y2goX19yZUZuICkgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Ly8gRnVuY3Rpb24gY2FsbFxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhWyBhTGFzdC5yZXBsYWNlKF9fcmVGbiwgJycpIF0oIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vIElmIGFycmF5IG5vdGF0aW9uIGlzIHVzZWQsIHdlIGp1c3Qgd2FudCB0byBzdHJpcCBpdCBhbmQgdXNlIHRoZSBwcm9wZXJ0eSBuYW1lXG5cdFx0XHRcdFx0Ly8gYW5kIGFzc2lnbiB0aGUgdmFsdWUuIElmIGl0IGlzbid0IHVzZWQsIHRoZW4gd2UgZ2V0IHRoZSByZXN1bHQgd2Ugd2FudCBhbnl3YXlcblx0XHRcdFx0XHRkYXRhWyBhTGFzdC5yZXBsYWNlKF9fcmVBcnJheSwgJycpIF0gPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChkYXRhLCB2YWwpIHsgLy8gbWV0YSBpcyBhbHNvIHBhc3NlZCBpbiwgYnV0IG5vdCB1c2VkXG5cdFx0XHRcdHJldHVybiBzZXREYXRhKCBkYXRhLCB2YWwsIG1Tb3VyY2UgKTtcblx0XHRcdH07XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvKiBBcnJheSBvciBmbGF0IG9iamVjdCBtYXBwaW5nICovXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGRhdGEsIHZhbCkgeyAvLyBtZXRhIGlzIGFsc28gcGFzc2VkIGluLCBidXQgbm90IHVzZWRcblx0XHRcdFx0ZGF0YVttU291cmNlXSA9IHZhbDtcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIFJldHVybiBhbiBhcnJheSB3aXRoIHRoZSBmdWxsIHRhYmxlIGRhdGFcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEByZXR1cm5zIGFycmF5IHthcnJheX0gYURhdGEgTWFzdGVyIGRhdGEgYXJyYXlcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuR2V0RGF0YU1hc3RlciAoIHNldHRpbmdzIClcblx0e1xuXHRcdHJldHVybiBfcGx1Y2soIHNldHRpbmdzLmFvRGF0YSwgJ19hRGF0YScgKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBOdWtlIHRoZSB0YWJsZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5DbGVhclRhYmxlKCBzZXR0aW5ncyApXG5cdHtcblx0XHRzZXR0aW5ncy5hb0RhdGEubGVuZ3RoID0gMDtcblx0XHRzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXIubGVuZ3RoID0gMDtcblx0XHRzZXR0aW5ncy5haURpc3BsYXkubGVuZ3RoID0gMDtcblx0XHRzZXR0aW5ncy5hSWRzID0ge307XG5cdH1cblx0XG5cdFxuXHQgLyoqXG5cdCAqIFRha2UgYW4gYXJyYXkgb2YgaW50ZWdlcnMgKGluZGV4IGFycmF5KSBhbmQgcmVtb3ZlIGEgdGFyZ2V0IGludGVnZXIgKHZhbHVlIC0gbm90XG5cdCAqIHRoZSBrZXkhKVxuXHQgKiAgQHBhcmFtIHthcnJheX0gYSBJbmRleCBhcnJheSB0byB0YXJnZXRcblx0ICogIEBwYXJhbSB7aW50fSBpVGFyZ2V0IHZhbHVlIHRvIGZpbmRcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuRGVsZXRlSW5kZXgoIGEsIGlUYXJnZXQsIHNwbGljZSApXG5cdHtcblx0XHR2YXIgaVRhcmdldEluZGV4ID0gLTE7XG5cdFxuXHRcdGZvciAoIHZhciBpPTAsIGlMZW49YS5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxuXHRcdHtcblx0XHRcdGlmICggYVtpXSA9PSBpVGFyZ2V0IClcblx0XHRcdHtcblx0XHRcdFx0aVRhcmdldEluZGV4ID0gaTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBhW2ldID4gaVRhcmdldCApXG5cdFx0XHR7XG5cdFx0XHRcdGFbaV0tLTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGlmICggaVRhcmdldEluZGV4ICE9IC0xICYmIHNwbGljZSA9PT0gdW5kZWZpbmVkIClcblx0XHR7XG5cdFx0XHRhLnNwbGljZSggaVRhcmdldEluZGV4LCAxICk7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIE1hcmsgY2FjaGVkIGRhdGEgYXMgaW52YWxpZCBzdWNoIHRoYXQgYSByZS1yZWFkIG9mIHRoZSBkYXRhIHdpbGwgb2NjdXIgd2hlblxuXHQgKiB0aGUgY2FjaGVkIGRhdGEgaXMgbmV4dCByZXF1ZXN0ZWQuIEFsc28gdXBkYXRlIGZyb20gdGhlIGRhdGEgc291cmNlIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqIEBwYXJhbSB7aW50fSAgICByb3dJZHggICBSb3cgaW5kZXggdG8gaW52YWxpZGF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NyY10gICAgU291cmNlIHRvIGludmFsaWRhdGUgZnJvbTogdW5kZWZpbmVkLCAnYXV0bycsICdkb20nXG5cdCAqICAgICBvciAnZGF0YSdcblx0ICogQHBhcmFtIHtpbnR9ICAgIFtjb2xJZHhdIENvbHVtbiBpbmRleCB0byBpbnZhbGlkYXRlLiBJZiB1bmRlZmluZWQgdGhlIHdob2xlXG5cdCAqICAgICByb3cgd2lsbCBiZSBpbnZhbGlkYXRlZFxuXHQgKiBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICpcblx0ICogQHRvZG8gRm9yIHRoZSBtb2R1bGFyaXNhdGlvbiBvZiB2MS4xMSB0aGlzIHdpbGwgbmVlZCB0byBiZWNvbWUgYSBjYWxsYmFjaywgc29cblx0ICogICB0aGUgc29ydCBhbmQgZmlsdGVyIG1ldGhvZHMgY2FuIHN1YnNjcmliZSB0byBpdC4gVGhhdCB3aWxsIHJlcXVpcmVkXG5cdCAqICAgaW5pdGlhbGlzYXRpb24gb3B0aW9ucyBmb3Igc29ydGluZywgd2hpY2ggaXMgd2h5IGl0IGlzIG5vdCBhbHJlYWR5IGJha2VkIGluXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5JbnZhbGlkYXRlKCBzZXR0aW5ncywgcm93SWR4LCBzcmMsIGNvbElkeCApXG5cdHtcblx0XHR2YXIgcm93ID0gc2V0dGluZ3MuYW9EYXRhWyByb3dJZHggXTtcblx0XHR2YXIgaSwgaWVuO1xuXHRcdHZhciBjZWxsV3JpdGUgPSBmdW5jdGlvbiAoIGNlbGwsIGNvbCApIHtcblx0XHRcdC8vIFRoaXMgaXMgdmVyeSBmcnVzdHJhdGluZywgYnV0IGluIElFIGlmIHlvdSBqdXN0IHdyaXRlIGRpcmVjdGx5XG5cdFx0XHQvLyB0byBpbm5lckhUTUwsIGFuZCBlbGVtZW50cyB0aGF0IGFyZSBvdmVyd3JpdHRlbiBhcmUgR0MnZWQsXG5cdFx0XHQvLyBldmVuIGlmIHRoZXJlIGlzIGEgcmVmZXJlbmNlIHRvIHRoZW0gZWxzZXdoZXJlXG5cdFx0XHR3aGlsZSAoIGNlbGwuY2hpbGROb2Rlcy5sZW5ndGggKSB7XG5cdFx0XHRcdGNlbGwucmVtb3ZlQ2hpbGQoIGNlbGwuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGNlbGwuaW5uZXJIVE1MID0gX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCByb3dJZHgsIGNvbCwgJ2Rpc3BsYXknICk7XG5cdFx0fTtcblx0XG5cdFx0Ly8gQXJlIHdlIHJlYWRpbmcgbGFzdCBkYXRhIGZyb20gRE9NIG9yIHRoZSBkYXRhIG9iamVjdD9cblx0XHRpZiAoIHNyYyA9PT0gJ2RvbScgfHwgKCghIHNyYyB8fCBzcmMgPT09ICdhdXRvJykgJiYgcm93LnNyYyA9PT0gJ2RvbScpICkge1xuXHRcdFx0Ly8gUmVhZCB0aGUgZGF0YSBmcm9tIHRoZSBET01cblx0XHRcdHJvdy5fYURhdGEgPSBfZm5HZXRSb3dFbGVtZW50cyhcblx0XHRcdFx0XHRzZXR0aW5ncywgcm93LCBjb2xJZHgsIGNvbElkeCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcm93Ll9hRGF0YVxuXHRcdFx0XHQpXG5cdFx0XHRcdC5kYXRhO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdC8vIFJlYWRpbmcgZnJvbSBkYXRhIG9iamVjdCwgdXBkYXRlIHRoZSBET01cblx0XHRcdHZhciBjZWxscyA9IHJvdy5hbkNlbGxzO1xuXHRcblx0XHRcdGlmICggY2VsbHMgKSB7XG5cdFx0XHRcdGlmICggY29sSWR4ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0Y2VsbFdyaXRlKCBjZWxsc1tjb2xJZHhdLCBjb2xJZHggKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRmb3IgKCBpPTAsIGllbj1jZWxscy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNlbGxXcml0ZSggY2VsbHNbaV0sIGkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIEZvciBib3RoIHJvdyBhbmQgY2VsbCBpbnZhbGlkYXRpb24sIHRoZSBjYWNoZWQgZGF0YSBmb3Igc29ydGluZyBhbmRcblx0XHQvLyBmaWx0ZXJpbmcgaXMgbnVsbGVkIG91dFxuXHRcdHJvdy5fYVNvcnREYXRhID0gbnVsbDtcblx0XHRyb3cuX2FGaWx0ZXJEYXRhID0gbnVsbDtcblx0XG5cdFx0Ly8gSW52YWxpZGF0ZSB0aGUgdHlwZSBmb3IgYSBzcGVjaWZpYyBjb2x1bW4gKGlmIGdpdmVuKSBvciBhbGwgY29sdW1ucyBzaW5jZVxuXHRcdC8vIHRoZSBkYXRhIG1pZ2h0IGhhdmUgY2hhbmdlZFxuXHRcdHZhciBjb2xzID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xuXHRcdGlmICggY29sSWR4ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjb2xzWyBjb2xJZHggXS5zVHlwZSA9IG51bGw7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Zm9yICggaT0wLCBpZW49Y29scy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0Y29sc1tpXS5zVHlwZSA9IG51bGw7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gVXBkYXRlIERhdGFUYWJsZXMgc3BlY2lhbCBgRFRfKmAgYXR0cmlidXRlcyBmb3IgdGhlIHJvd1xuXHRcdFx0X2ZuUm93QXR0cmlidXRlcyggc2V0dGluZ3MsIHJvdyApO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBCdWlsZCBhIGRhdGEgc291cmNlIG9iamVjdCBmcm9tIGFuIEhUTUwgcm93LCByZWFkaW5nIHRoZSBjb250ZW50cyBvZiB0aGVcblx0ICogY2VsbHMgdGhhdCBhcmUgaW4gdGhlIHJvdy5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqIEBwYXJhbSB7bm9kZXxvYmplY3R9IFRSIGVsZW1lbnQgZnJvbSB3aGljaCB0byByZWFkIGRhdGEgb3IgZXhpc3Rpbmcgcm93XG5cdCAqICAgb2JqZWN0IGZyb20gd2hpY2ggdG8gcmUtcmVhZCB0aGUgZGF0YSBmcm9tIHRoZSBjZWxsc1xuXHQgKiBAcGFyYW0ge2ludH0gW2NvbElkeF0gT3B0aW9uYWwgY29sdW1uIGluZGV4XG5cdCAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSBbZF0gRGF0YSBzb3VyY2Ugb2JqZWN0LiBJZiBgY29sSWR4YCBpcyBnaXZlbiB0aGVuIHRoaXNcblx0ICogICBwYXJhbWV0ZXIgc2hvdWxkIGFsc28gYmUgZ2l2ZW4gYW5kIHdpbGwgYmUgdXNlZCB0byB3cml0ZSB0aGUgZGF0YSBpbnRvLlxuXHQgKiAgIE9ubHkgdGhlIGNvbHVtbiBpbiBxdWVzdGlvbiB3aWxsIGJlIHdyaXR0ZW5cblx0ICogQHJldHVybnMge29iamVjdH0gT2JqZWN0IHdpdGggdHdvIHBhcmFtZXRlcnM6IGBkYXRhYCB0aGUgZGF0YSByZWFkLCBpblxuXHQgKiAgIGRvY3VtZW50IG9yZGVyLCBhbmQgYGNlbGxzYCBhbmQgYXJyYXkgb2Ygbm9kZXMgKHRoZXkgY2FuIGJlIHVzZWZ1bCB0byB0aGVcblx0ICogICBjYWxsZXIsIHNvIHJhdGhlciB0aGFuIG5lZWRpbmcgYSBzZWNvbmQgdHJhdmVyc2FsIHRvIGdldCB0aGVtLCBqdXN0IHJldHVyblxuXHQgKiAgIHRoZW0gZnJvbSBoZXJlKS5cblx0ICogQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5HZXRSb3dFbGVtZW50cyggc2V0dGluZ3MsIHJvdywgY29sSWR4LCBkIClcblx0e1xuXHRcdHZhclxuXHRcdFx0dGRzID0gW10sXG5cdFx0XHR0ZCA9IHJvdy5maXJzdENoaWxkLFxuXHRcdFx0bmFtZSwgY29sLCBvLCBpPTAsIGNvbnRlbnRzLFxuXHRcdFx0Y29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucyxcblx0XHRcdG9iamVjdFJlYWQgPSBzZXR0aW5ncy5fcm93UmVhZE9iamVjdDtcblx0XG5cdFx0Ly8gQWxsb3cgdGhlIGRhdGEgb2JqZWN0IHRvIGJlIHBhc3NlZCBpbiwgb3IgY29uc3RydWN0XG5cdFx0ZCA9IGQgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRkIDpcblx0XHRcdG9iamVjdFJlYWQgP1xuXHRcdFx0XHR7fSA6XG5cdFx0XHRcdFtdO1xuXHRcblx0XHR2YXIgYXR0ciA9IGZ1bmN0aW9uICggc3RyLCB0ZCAgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnICkge1xuXHRcdFx0XHR2YXIgaWR4ID0gc3RyLmluZGV4T2YoJ0AnKTtcblx0XG5cdFx0XHRcdGlmICggaWR4ICE9PSAtMSApIHtcblx0XHRcdFx0XHR2YXIgYXR0ciA9IHN0ci5zdWJzdHJpbmcoIGlkeCsxICk7XG5cdFx0XHRcdFx0dmFyIHNldHRlciA9IF9mblNldE9iamVjdERhdGFGbiggc3RyICk7XG5cdFx0XHRcdFx0c2V0dGVyKCBkLCB0ZC5nZXRBdHRyaWJ1dGUoIGF0dHIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XG5cdFx0Ly8gUmVhZCBkYXRhIGZyb20gYSBjZWxsIGFuZCBzdG9yZSBpbnRvIHRoZSBkYXRhIG9iamVjdFxuXHRcdHZhciBjZWxsUHJvY2VzcyA9IGZ1bmN0aW9uICggY2VsbCApIHtcblx0XHRcdGlmICggY29sSWR4ID09PSB1bmRlZmluZWQgfHwgY29sSWR4ID09PSBpICkge1xuXHRcdFx0XHRjb2wgPSBjb2x1bW5zW2ldO1xuXHRcdFx0XHRjb250ZW50cyA9ICQudHJpbShjZWxsLmlubmVySFRNTCk7XG5cdFxuXHRcdFx0XHRpZiAoIGNvbCAmJiBjb2wuX2JBdHRyU3JjICkge1xuXHRcdFx0XHRcdHZhciBzZXR0ZXIgPSBfZm5TZXRPYmplY3REYXRhRm4oIGNvbC5tRGF0YS5fICk7XG5cdFx0XHRcdFx0c2V0dGVyKCBkLCBjb250ZW50cyApO1xuXHRcblx0XHRcdFx0XHRhdHRyKCBjb2wubURhdGEuc29ydCwgY2VsbCApO1xuXHRcdFx0XHRcdGF0dHIoIGNvbC5tRGF0YS50eXBlLCBjZWxsICk7XG5cdFx0XHRcdFx0YXR0ciggY29sLm1EYXRhLmZpbHRlciwgY2VsbCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdC8vIERlcGVuZGluZyBvbiB0aGUgYGRhdGFgIG9wdGlvbiBmb3IgdGhlIGNvbHVtbnMgdGhlIGRhdGEgY2FuXG5cdFx0XHRcdFx0Ly8gYmUgcmVhZCB0byBlaXRoZXIgYW4gb2JqZWN0IG9yIGFuIGFycmF5LlxuXHRcdFx0XHRcdGlmICggb2JqZWN0UmVhZCApIHtcblx0XHRcdFx0XHRcdGlmICggISBjb2wuX3NldHRlciApIHtcblx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIHNldHRlciBmdW5jdGlvblxuXHRcdFx0XHRcdFx0XHRjb2wuX3NldHRlciA9IF9mblNldE9iamVjdERhdGFGbiggY29sLm1EYXRhICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb2wuX3NldHRlciggZCwgY29udGVudHMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRkW2ldID0gY29udGVudHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0aSsrO1xuXHRcdH07XG5cdFxuXHRcdGlmICggdGQgKSB7XG5cdFx0XHQvLyBgdHJgIGVsZW1lbnQgd2FzIHBhc3NlZCBpblxuXHRcdFx0d2hpbGUgKCB0ZCApIHtcblx0XHRcdFx0bmFtZSA9IHRkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG5cdFxuXHRcdFx0XHRpZiAoIG5hbWUgPT0gXCJURFwiIHx8IG5hbWUgPT0gXCJUSFwiICkge1xuXHRcdFx0XHRcdGNlbGxQcm9jZXNzKCB0ZCApO1xuXHRcdFx0XHRcdHRkcy5wdXNoKCB0ZCApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHR0ZCA9IHRkLm5leHRTaWJsaW5nO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdC8vIEV4aXN0aW5nIHJvdyBvYmplY3QgcGFzc2VkIGluXG5cdFx0XHR0ZHMgPSByb3cuYW5DZWxscztcblx0XG5cdFx0XHRmb3IgKCB2YXIgaj0wLCBqZW49dGRzLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xuXHRcdFx0XHRjZWxsUHJvY2VzcyggdGRzW2pdICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBSZWFkIHRoZSBJRCBmcm9tIHRoZSBET00gaWYgcHJlc2VudFxuXHRcdHZhciByb3dOb2RlID0gcm93LmZpcnN0Q2hpbGQgPyByb3cgOiByb3cublRyO1xuXHRcblx0XHRpZiAoIHJvd05vZGUgKSB7XG5cdFx0XHR2YXIgaWQgPSByb3dOb2RlLmdldEF0dHJpYnV0ZSggJ2lkJyApO1xuXHRcblx0XHRcdGlmICggaWQgKSB7XG5cdFx0XHRcdF9mblNldE9iamVjdERhdGFGbiggc2V0dGluZ3Mucm93SWQgKSggZCwgaWQgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiB7XG5cdFx0XHRkYXRhOiBkLFxuXHRcdFx0Y2VsbHM6IHRkc1xuXHRcdH07XG5cdH1cblx0LyoqXG5cdCAqIENyZWF0ZSBhIG5ldyBUUiBlbGVtZW50IChhbmQgaXQncyBURCBjaGlsZHJlbikgZm9yIGEgcm93XG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge2ludH0gaVJvdyBSb3cgdG8gY29uc2lkZXJcblx0ICogIEBwYXJhbSB7bm9kZX0gW25UckluXSBUUiBlbGVtZW50IHRvIGFkZCB0byB0aGUgdGFibGUgLSBvcHRpb25hbC4gSWYgbm90IGdpdmVuLFxuXHQgKiAgICBEYXRhVGFibGVzIHdpbGwgY3JlYXRlIGEgcm93IGF1dG9tYXRpY2FsbHlcblx0ICogIEBwYXJhbSB7YXJyYXl9IFthblRkc10gQXJyYXkgb2YgVER8VEggZWxlbWVudHMgZm9yIHRoZSByb3cgLSBtdXN0IGJlIGdpdmVuXG5cdCAqICAgIGlmIG5UciBpcy5cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQ3JlYXRlVHIgKCBvU2V0dGluZ3MsIGlSb3csIG5UckluLCBhblRkcyApXG5cdHtcblx0XHR2YXJcblx0XHRcdHJvdyA9IG9TZXR0aW5ncy5hb0RhdGFbaVJvd10sXG5cdFx0XHRyb3dEYXRhID0gcm93Ll9hRGF0YSxcblx0XHRcdGNlbGxzID0gW10sXG5cdFx0XHRuVHIsIG5UZCwgb0NvbCxcblx0XHRcdGksIGlMZW47XG5cdFxuXHRcdGlmICggcm93Lm5UciA9PT0gbnVsbCApXG5cdFx0e1xuXHRcdFx0blRyID0gblRySW4gfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblx0XG5cdFx0XHRyb3cublRyID0gblRyO1xuXHRcdFx0cm93LmFuQ2VsbHMgPSBjZWxscztcblx0XG5cdFx0XHQvKiBVc2UgYSBwcml2YXRlIHByb3BlcnR5IG9uIHRoZSBub2RlIHRvIGFsbG93IHJlc2VydmUgbWFwcGluZyBmcm9tIHRoZSBub2RlXG5cdFx0XHQgKiB0byB0aGUgYW9EYXRhIGFycmF5IGZvciBmYXN0IGxvb2sgdXBcblx0XHRcdCAqL1xuXHRcdFx0blRyLl9EVF9Sb3dJbmRleCA9IGlSb3c7XG5cdFxuXHRcdFx0LyogU3BlY2lhbCBwYXJhbWV0ZXJzIGNhbiBiZSBnaXZlbiBieSB0aGUgZGF0YSBzb3VyY2UgdG8gYmUgdXNlZCBvbiB0aGUgcm93ICovXG5cdFx0XHRfZm5Sb3dBdHRyaWJ1dGVzKCBvU2V0dGluZ3MsIHJvdyApO1xuXHRcblx0XHRcdC8qIFByb2Nlc3MgZWFjaCBjb2x1bW4gKi9cblx0XHRcdGZvciAoIGk9MCwgaUxlbj1vU2V0dGluZ3MuYW9Db2x1bW5zLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0XHR7XG5cdFx0XHRcdG9Db2wgPSBvU2V0dGluZ3MuYW9Db2x1bW5zW2ldO1xuXHRcblx0XHRcdFx0blRkID0gblRySW4gPyBhblRkc1tpXSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIG9Db2wuc0NlbGxUeXBlICk7XG5cdFx0XHRcdG5UZC5fRFRfQ2VsbEluZGV4ID0ge1xuXHRcdFx0XHRcdHJvdzogaVJvdyxcblx0XHRcdFx0XHRjb2x1bW46IGlcblx0XHRcdFx0fTtcblx0XHRcdFx0XG5cdFx0XHRcdGNlbGxzLnB1c2goIG5UZCApO1xuXHRcblx0XHRcdFx0Ly8gTmVlZCB0byBjcmVhdGUgdGhlIEhUTUwgaWYgbmV3LCBvciBpZiBhIHJlbmRlcmluZyBmdW5jdGlvbiBpcyBkZWZpbmVkXG5cdFx0XHRcdGlmICggIW5UckluIHx8IG9Db2wubVJlbmRlciB8fCBvQ29sLm1EYXRhICE9PSBpIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5UZC5pbm5lckhUTUwgPSBfZm5HZXRDZWxsRGF0YSggb1NldHRpbmdzLCBpUm93LCBpLCAnZGlzcGxheScgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0LyogQWRkIHVzZXIgZGVmaW5lZCBjbGFzcyAqL1xuXHRcdFx0XHRpZiAoIG9Db2wuc0NsYXNzIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5UZC5jbGFzc05hbWUgKz0gJyAnK29Db2wuc0NsYXNzO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBWaXNpYmlsaXR5IC0gYWRkIG9yIHJlbW92ZSBhcyByZXF1aXJlZFxuXHRcdFx0XHRpZiAoIG9Db2wuYlZpc2libGUgJiYgISBuVHJJbiApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuVHIuYXBwZW5kQ2hpbGQoIG5UZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKCAhIG9Db2wuYlZpc2libGUgJiYgblRySW4gKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0blRkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5UZCApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRpZiAoIG9Db2wuZm5DcmVhdGVkQ2VsbCApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRvQ29sLmZuQ3JlYXRlZENlbGwuY2FsbCggb1NldHRpbmdzLm9JbnN0YW5jZSxcblx0XHRcdFx0XHRcdG5UZCwgX2ZuR2V0Q2VsbERhdGEoIG9TZXR0aW5ncywgaVJvdywgaSApLCByb3dEYXRhLCBpUm93LCBpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCAnYW9Sb3dDcmVhdGVkQ2FsbGJhY2snLCBudWxsLCBbblRyLCByb3dEYXRhLCBpUm93XSApO1xuXHRcdH1cblx0XG5cdFx0Ly8gUmVtb3ZlIG9uY2Ugd2Via2l0IGJ1ZyAxMzE4MTkgYW5kIENocm9taXVtIGJ1ZyAzNjU2MTkgaGF2ZSBiZWVuIHJlc29sdmVkXG5cdFx0Ly8gYW5kIGRlcGxveWVkXG5cdFx0cm93Lm5Uci5zZXRBdHRyaWJ1dGUoICdyb2xlJywgJ3JvdycgKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBZGQgYXR0cmlidXRlcyB0byBhIHJvdyBiYXNlZCBvbiB0aGUgc3BlY2lhbCBgRFRfKmAgcGFyYW1ldGVycyBpbiBhIGRhdGFcblx0ICogc291cmNlIG9iamVjdC5cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IERhdGFUYWJsZXMgcm93IG9iamVjdCBmb3IgdGhlIHJvdyB0byBiZSBtb2RpZmllZFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5Sb3dBdHRyaWJ1dGVzKCBzZXR0aW5ncywgcm93IClcblx0e1xuXHRcdHZhciB0ciA9IHJvdy5uVHI7XG5cdFx0dmFyIGRhdGEgPSByb3cuX2FEYXRhO1xuXHRcblx0XHRpZiAoIHRyICkge1xuXHRcdFx0dmFyIGlkID0gc2V0dGluZ3Mucm93SWRGbiggZGF0YSApO1xuXHRcblx0XHRcdGlmICggaWQgKSB7XG5cdFx0XHRcdHRyLmlkID0gaWQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBkYXRhLkRUX1Jvd0NsYXNzICkge1xuXHRcdFx0XHQvLyBSZW1vdmUgYW55IGNsYXNzZXMgYWRkZWQgYnkgRFRfUm93Q2xhc3MgYmVmb3JlXG5cdFx0XHRcdHZhciBhID0gZGF0YS5EVF9Sb3dDbGFzcy5zcGxpdCgnICcpO1xuXHRcdFx0XHRyb3cuX19yb3djID0gcm93Ll9fcm93YyA/XG5cdFx0XHRcdFx0X3VuaXF1ZSggcm93Ll9fcm93Yy5jb25jYXQoIGEgKSApIDpcblx0XHRcdFx0XHRhO1xuXHRcblx0XHRcdFx0JCh0cilcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHJvdy5fX3Jvd2Muam9pbignICcpIClcblx0XHRcdFx0XHQuYWRkQ2xhc3MoIGRhdGEuRFRfUm93Q2xhc3MgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGRhdGEuRFRfUm93QXR0ciApIHtcblx0XHRcdFx0JCh0cikuYXR0ciggZGF0YS5EVF9Sb3dBdHRyICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBkYXRhLkRUX1Jvd0RhdGEgKSB7XG5cdFx0XHRcdCQodHIpLmRhdGEoIGRhdGEuRFRfUm93RGF0YSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBDcmVhdGUgdGhlIEhUTUwgaGVhZGVyIGZvciB0aGUgdGFibGVcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQnVpbGRIZWFkKCBvU2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyIGksIGllbiwgY2VsbCwgcm93LCBjb2x1bW47XG5cdFx0dmFyIHRoZWFkID0gb1NldHRpbmdzLm5USGVhZDtcblx0XHR2YXIgdGZvb3QgPSBvU2V0dGluZ3MublRGb290O1xuXHRcdHZhciBjcmVhdGVIZWFkZXIgPSAkKCd0aCwgdGQnLCB0aGVhZCkubGVuZ3RoID09PSAwO1xuXHRcdHZhciBjbGFzc2VzID0gb1NldHRpbmdzLm9DbGFzc2VzO1xuXHRcdHZhciBjb2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucztcblx0XG5cdFx0aWYgKCBjcmVhdGVIZWFkZXIgKSB7XG5cdFx0XHRyb3cgPSAkKCc8dHIvPicpLmFwcGVuZFRvKCB0aGVhZCApO1xuXHRcdH1cblx0XG5cdFx0Zm9yICggaT0wLCBpZW49Y29sdW1ucy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbaV07XG5cdFx0XHRjZWxsID0gJCggY29sdW1uLm5UaCApLmFkZENsYXNzKCBjb2x1bW4uc0NsYXNzICk7XG5cdFxuXHRcdFx0aWYgKCBjcmVhdGVIZWFkZXIgKSB7XG5cdFx0XHRcdGNlbGwuYXBwZW5kVG8oIHJvdyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIDEuMTEgbW92ZSBpbnRvIHNvcnRpbmdcblx0XHRcdGlmICggb1NldHRpbmdzLm9GZWF0dXJlcy5iU29ydCApIHtcblx0XHRcdFx0Y2VsbC5hZGRDbGFzcyggY29sdW1uLnNTb3J0aW5nQ2xhc3MgKTtcblx0XG5cdFx0XHRcdGlmICggY29sdW1uLmJTb3J0YWJsZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0Y2VsbFxuXHRcdFx0XHRcdFx0LmF0dHIoICd0YWJpbmRleCcsIG9TZXR0aW5ncy5pVGFiSW5kZXggKVxuXHRcdFx0XHRcdFx0LmF0dHIoICdhcmlhLWNvbnRyb2xzJywgb1NldHRpbmdzLnNUYWJsZUlkICk7XG5cdFxuXHRcdFx0XHRcdF9mblNvcnRBdHRhY2hMaXN0ZW5lciggb1NldHRpbmdzLCBjb2x1bW4ublRoLCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGNvbHVtbi5zVGl0bGUgIT0gY2VsbFswXS5pbm5lckhUTUwgKSB7XG5cdFx0XHRcdGNlbGwuaHRtbCggY29sdW1uLnNUaXRsZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdF9mblJlbmRlcmVyKCBvU2V0dGluZ3MsICdoZWFkZXInICkoXG5cdFx0XHRcdG9TZXR0aW5ncywgY2VsbCwgY29sdW1uLCBjbGFzc2VzXG5cdFx0XHQpO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBjcmVhdGVIZWFkZXIgKSB7XG5cdFx0XHRfZm5EZXRlY3RIZWFkZXIoIG9TZXR0aW5ncy5hb0hlYWRlciwgdGhlYWQgKTtcblx0XHR9XG5cdFx0XG5cdFx0LyogQVJJQSByb2xlIGZvciB0aGUgcm93cyAqL1xuXHQgXHQkKHRoZWFkKS5maW5kKCc+dHInKS5hdHRyKCdyb2xlJywgJ3JvdycpO1xuXHRcblx0XHQvKiBEZWFsIHdpdGggdGhlIGZvb3RlciAtIGFkZCBjbGFzc2VzIGlmIHJlcXVpcmVkICovXG5cdFx0JCh0aGVhZCkuZmluZCgnPnRyPnRoLCA+dHI+dGQnKS5hZGRDbGFzcyggY2xhc3Nlcy5zSGVhZGVyVEggKTtcblx0XHQkKHRmb290KS5maW5kKCc+dHI+dGgsID50cj50ZCcpLmFkZENsYXNzKCBjbGFzc2VzLnNGb290ZXJUSCApO1xuXHRcblx0XHQvLyBDYWNoZSB0aGUgZm9vdGVyIGNlbGxzLiBOb3RlIHRoYXQgd2Ugb25seSB0YWtlIHRoZSBjZWxscyBmcm9tIHRoZSBmaXJzdFxuXHRcdC8vIHJvdyBpbiB0aGUgZm9vdGVyLiBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHJvdyB0aGUgdXNlciB3YW50cyB0b1xuXHRcdC8vIGludGVyYWN0IHdpdGgsIHRoZXkgbmVlZCB0byB1c2UgdGhlIHRhYmxlKCkuZm9vdCgpIG1ldGhvZC4gTm90ZSBhbHNvIHRoaXNcblx0XHQvLyBhbGxvd3MgY2VsbHMgdG8gYmUgdXNlZCBmb3IgbXVsdGlwbGUgY29sdW1ucyB1c2luZyBjb2xzcGFuXG5cdFx0aWYgKCB0Zm9vdCAhPT0gbnVsbCApIHtcblx0XHRcdHZhciBjZWxscyA9IG9TZXR0aW5ncy5hb0Zvb3RlclswXTtcblx0XG5cdFx0XHRmb3IgKCBpPTAsIGllbj1jZWxscy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0Y29sdW1uID0gY29sdW1uc1tpXTtcblx0XHRcdFx0Y29sdW1uLm5UZiA9IGNlbGxzW2ldLmNlbGw7XG5cdFxuXHRcdFx0XHRpZiAoIGNvbHVtbi5zQ2xhc3MgKSB7XG5cdFx0XHRcdFx0JChjb2x1bW4ublRmKS5hZGRDbGFzcyggY29sdW1uLnNDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIERyYXcgdGhlIGhlYWRlciAob3IgZm9vdGVyKSBlbGVtZW50IGJhc2VkIG9uIHRoZSBjb2x1bW4gdmlzaWJpbGl0eSBzdGF0ZXMuIFRoZVxuXHQgKiBtZXRob2RvbG9neSBoZXJlIGlzIHRvIHVzZSB0aGUgbGF5b3V0IGFycmF5IGZyb20gX2ZuRGV0ZWN0SGVhZGVyLCBtb2RpZmllZCBmb3Jcblx0ICogdGhlIGluc3RhbnRhbmVvdXMgY29sdW1uIHZpc2liaWxpdHksIHRvIGNvbnN0cnVjdCB0aGUgbmV3IGxheW91dC4gVGhlIGdyaWQgaXNcblx0ICogdHJhdmVyc2VkIG92ZXIgY2VsbCBhdCBhIHRpbWUgaW4gYSByb3dzIHggY29sdW1ucyBncmlkIGZhc2hpb24sIGFsdGhvdWdoIGVhY2hcblx0ICogY2VsbCBpbnNlcnQgY2FuIGNvdmVyIG11bHRpcGxlIGVsZW1lbnRzIGluIHRoZSBncmlkIC0gd2hpY2ggaXMgdHJhY2tzIHVzaW5nIHRoZVxuXHQgKiBhQXBwbGllZCBhcnJheS4gQ2VsbCBpbnNlcnRzIGluIHRoZSBncmlkIHdpbGwgb25seSBvY2N1ciB3aGVyZSB0aGVyZSBpc24ndFxuXHQgKiBhbHJlYWR5IGEgY2VsbCBpbiB0aGF0IHBvc2l0aW9uLlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIGFycmF5IHtvYmplY3RzfSBhb1NvdXJjZSBMYXlvdXQgYXJyYXkgZnJvbSBfZm5EZXRlY3RIZWFkZXJcblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gW2JJbmNsdWRlSGlkZGVuPWZhbHNlXSBJZiB0cnVlIHRoZW4gaW5jbHVkZSB0aGUgaGlkZGVuIGNvbHVtbnMgaW4gdGhlIGNhbGMsXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkRyYXdIZWFkKCBvU2V0dGluZ3MsIGFvU291cmNlLCBiSW5jbHVkZUhpZGRlbiApXG5cdHtcblx0XHR2YXIgaSwgaUxlbiwgaiwgakxlbiwgaywga0xlbiwgbiwgbkxvY2FsVHI7XG5cdFx0dmFyIGFvTG9jYWwgPSBbXTtcblx0XHR2YXIgYUFwcGxpZWQgPSBbXTtcblx0XHR2YXIgaUNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zLmxlbmd0aDtcblx0XHR2YXIgaVJvd3NwYW4sIGlDb2xzcGFuO1xuXHRcblx0XHRpZiAoICEgYW9Tb3VyY2UgKVxuXHRcdHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdGlmICggIGJJbmNsdWRlSGlkZGVuID09PSB1bmRlZmluZWQgKVxuXHRcdHtcblx0XHRcdGJJbmNsdWRlSGlkZGVuID0gZmFsc2U7XG5cdFx0fVxuXHRcblx0XHQvKiBNYWtlIGEgY29weSBvZiB0aGUgbWFzdGVyIGxheW91dCBhcnJheSwgYnV0IHdpdGhvdXQgdGhlIHZpc2libGUgY29sdW1ucyBpbiBpdCAqL1xuXHRcdGZvciAoIGk9MCwgaUxlbj1hb1NvdXJjZS5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxuXHRcdHtcblx0XHRcdGFvTG9jYWxbaV0gPSBhb1NvdXJjZVtpXS5zbGljZSgpO1xuXHRcdFx0YW9Mb2NhbFtpXS5uVHIgPSBhb1NvdXJjZVtpXS5uVHI7XG5cdFxuXHRcdFx0LyogUmVtb3ZlIGFueSBjb2x1bW5zIHdoaWNoIGFyZSBjdXJyZW50bHkgaGlkZGVuICovXG5cdFx0XHRmb3IgKCBqPWlDb2x1bW5zLTEgOyBqPj0wIDsgai0tIClcblx0XHRcdHtcblx0XHRcdFx0aWYgKCAhb1NldHRpbmdzLmFvQ29sdW1uc1tqXS5iVmlzaWJsZSAmJiAhYkluY2x1ZGVIaWRkZW4gKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0YW9Mb2NhbFtpXS5zcGxpY2UoIGosIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8qIFByZXAgdGhlIGFwcGxpZWQgYXJyYXkgLSBpdCBuZWVkcyBhbiBlbGVtZW50IGZvciBlYWNoIHJvdyAqL1xuXHRcdFx0YUFwcGxpZWQucHVzaCggW10gKTtcblx0XHR9XG5cdFxuXHRcdGZvciAoIGk9MCwgaUxlbj1hb0xvY2FsLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0e1xuXHRcdFx0bkxvY2FsVHIgPSBhb0xvY2FsW2ldLm5Ucjtcblx0XG5cdFx0XHQvKiBBbGwgY2VsbHMgYXJlIGdvaW5nIHRvIGJlIHJlcGxhY2VkLCBzbyBlbXB0eSBvdXQgdGhlIHJvdyAqL1xuXHRcdFx0aWYgKCBuTG9jYWxUciApXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlKCAobiA9IG5Mb2NhbFRyLmZpcnN0Q2hpbGQpIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5Mb2NhbFRyLnJlbW92ZUNoaWxkKCBuICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRmb3IgKCBqPTAsIGpMZW49YW9Mb2NhbFtpXS5sZW5ndGggOyBqPGpMZW4gOyBqKysgKVxuXHRcdFx0e1xuXHRcdFx0XHRpUm93c3BhbiA9IDE7XG5cdFx0XHRcdGlDb2xzcGFuID0gMTtcblx0XG5cdFx0XHRcdC8qIENoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgY2VsbCAocm93L2NvbHNwYW4pIGNvdmVyaW5nIG91ciB0YXJnZXRcblx0XHRcdFx0ICogaW5zZXJ0IHBvaW50LiBJZiB0aGVyZSBpcywgdGhlbiB0aGVyZSBpcyBub3RoaW5nIHRvIGRvLlxuXHRcdFx0XHQgKi9cblx0XHRcdFx0aWYgKCBhQXBwbGllZFtpXVtqXSA9PT0gdW5kZWZpbmVkIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5Mb2NhbFRyLmFwcGVuZENoaWxkKCBhb0xvY2FsW2ldW2pdLmNlbGwgKTtcblx0XHRcdFx0XHRhQXBwbGllZFtpXVtqXSA9IDE7XG5cdFxuXHRcdFx0XHRcdC8qIEV4cGFuZCB0aGUgY2VsbCB0byBjb3ZlciBhcyBtYW55IHJvd3MgYXMgbmVlZGVkICovXG5cdFx0XHRcdFx0d2hpbGUgKCBhb0xvY2FsW2kraVJvd3NwYW5dICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0XHQgICAgICAgIGFvTG9jYWxbaV1bal0uY2VsbCA9PSBhb0xvY2FsW2kraVJvd3NwYW5dW2pdLmNlbGwgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFBcHBsaWVkW2kraVJvd3NwYW5dW2pdID0gMTtcblx0XHRcdFx0XHRcdGlSb3dzcGFuKys7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvKiBFeHBhbmQgdGhlIGNlbGwgdG8gY292ZXIgYXMgbWFueSBjb2x1bW5zIGFzIG5lZWRlZCAqL1xuXHRcdFx0XHRcdHdoaWxlICggYW9Mb2NhbFtpXVtqK2lDb2xzcGFuXSAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0ICAgICAgICBhb0xvY2FsW2ldW2pdLmNlbGwgPT0gYW9Mb2NhbFtpXVtqK2lDb2xzcGFuXS5jZWxsIClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHQvKiBNdXN0IHVwZGF0ZSB0aGUgYXBwbGllZCBhcnJheSBvdmVyIHRoZSByb3dzIGZvciB0aGUgY29sdW1ucyAqL1xuXHRcdFx0XHRcdFx0Zm9yICggaz0wIDsgazxpUm93c3BhbiA7IGsrKyApXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGFBcHBsaWVkW2kra11baitpQ29sc3Bhbl0gPSAxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aUNvbHNwYW4rKztcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8qIERvIHRoZSBhY3R1YWwgZXhwYW5zaW9uIGluIHRoZSBET00gKi9cblx0XHRcdFx0XHQkKGFvTG9jYWxbaV1bal0uY2VsbClcblx0XHRcdFx0XHRcdC5hdHRyKCdyb3dzcGFuJywgaVJvd3NwYW4pXG5cdFx0XHRcdFx0XHQuYXR0cignY29sc3BhbicsIGlDb2xzcGFuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBJbnNlcnQgdGhlIHJlcXVpcmVkIFRSIG5vZGVzIGludG8gdGhlIHRhYmxlIGZvciBkaXNwbGF5XG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkRyYXcoIG9TZXR0aW5ncyApXG5cdHtcblx0XHQvKiBQcm92aWRlIGEgcHJlLWNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgZHJhdyBpcyBmYWxzZSBpcyByZXR1cm5lZCAqL1xuXHRcdHZhciBhUHJlRHJhdyA9IF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCAnYW9QcmVEcmF3Q2FsbGJhY2snLCAncHJlRHJhdycsIFtvU2V0dGluZ3NdICk7XG5cdFx0aWYgKCAkLmluQXJyYXkoIGZhbHNlLCBhUHJlRHJhdyApICE9PSAtMSApXG5cdFx0e1xuXHRcdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIG9TZXR0aW5ncywgZmFsc2UgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdHZhciBpLCBpTGVuLCBuO1xuXHRcdHZhciBhblJvd3MgPSBbXTtcblx0XHR2YXIgaVJvd0NvdW50ID0gMDtcblx0XHR2YXIgYXNTdHJpcGVDbGFzc2VzID0gb1NldHRpbmdzLmFzU3RyaXBlQ2xhc3Nlcztcblx0XHR2YXIgaVN0cmlwZXMgPSBhc1N0cmlwZUNsYXNzZXMubGVuZ3RoO1xuXHRcdHZhciBpT3BlblJvd3MgPSBvU2V0dGluZ3MuYW9PcGVuUm93cy5sZW5ndGg7XG5cdFx0dmFyIG9MYW5nID0gb1NldHRpbmdzLm9MYW5ndWFnZTtcblx0XHR2YXIgaUluaXREaXNwbGF5U3RhcnQgPSBvU2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQ7XG5cdFx0dmFyIGJTZXJ2ZXJTaWRlID0gX2ZuRGF0YVNvdXJjZSggb1NldHRpbmdzICkgPT0gJ3NzcCc7XG5cdFx0dmFyIGFpRGlzcGxheSA9IG9TZXR0aW5ncy5haURpc3BsYXk7XG5cdFxuXHRcdG9TZXR0aW5ncy5iRHJhd2luZyA9IHRydWU7XG5cdFxuXHRcdC8qIENoZWNrIGFuZCBzZWUgaWYgd2UgaGF2ZSBhbiBpbml0aWFsIGRyYXcgcG9zaXRpb24gZnJvbSBzdGF0ZSBzYXZpbmcgKi9cblx0XHRpZiAoIGlJbml0RGlzcGxheVN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgaUluaXREaXNwbGF5U3RhcnQgIT09IC0xIClcblx0XHR7XG5cdFx0XHRvU2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgPSBiU2VydmVyU2lkZSA/XG5cdFx0XHRcdGlJbml0RGlzcGxheVN0YXJ0IDpcblx0XHRcdFx0aUluaXREaXNwbGF5U3RhcnQgPj0gb1NldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSA/XG5cdFx0XHRcdFx0MCA6XG5cdFx0XHRcdFx0aUluaXREaXNwbGF5U3RhcnQ7XG5cdFxuXHRcdFx0b1NldHRpbmdzLmlJbml0RGlzcGxheVN0YXJ0ID0gLTE7XG5cdFx0fVxuXHRcblx0XHR2YXIgaURpc3BsYXlTdGFydCA9IG9TZXR0aW5ncy5faURpc3BsYXlTdGFydDtcblx0XHR2YXIgaURpc3BsYXlFbmQgPSBvU2V0dGluZ3MuZm5EaXNwbGF5RW5kKCk7XG5cdFxuXHRcdC8qIFNlcnZlci1zaWRlIHByb2Nlc3NpbmcgZHJhdyBpbnRlcmNlcHQgKi9cblx0XHRpZiAoIG9TZXR0aW5ncy5iRGVmZXJMb2FkaW5nIClcblx0XHR7XG5cdFx0XHRvU2V0dGluZ3MuYkRlZmVyTG9hZGluZyA9IGZhbHNlO1xuXHRcdFx0b1NldHRpbmdzLmlEcmF3Kys7XG5cdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggb1NldHRpbmdzLCBmYWxzZSApO1xuXHRcdH1cblx0XHRlbHNlIGlmICggIWJTZXJ2ZXJTaWRlIClcblx0XHR7XG5cdFx0XHRvU2V0dGluZ3MuaURyYXcrKztcblx0XHR9XG5cdFx0ZWxzZSBpZiAoICFvU2V0dGluZ3MuYkRlc3Ryb3lpbmcgJiYgIV9mbkFqYXhVcGRhdGUoIG9TZXR0aW5ncyApIClcblx0XHR7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHRpZiAoIGFpRGlzcGxheS5sZW5ndGggIT09IDAgKVxuXHRcdHtcblx0XHRcdHZhciBpU3RhcnQgPSBiU2VydmVyU2lkZSA/IDAgOiBpRGlzcGxheVN0YXJ0O1xuXHRcdFx0dmFyIGlFbmQgPSBiU2VydmVyU2lkZSA/IG9TZXR0aW5ncy5hb0RhdGEubGVuZ3RoIDogaURpc3BsYXlFbmQ7XG5cdFxuXHRcdFx0Zm9yICggdmFyIGo9aVN0YXJ0IDsgajxpRW5kIDsgaisrIClcblx0XHRcdHtcblx0XHRcdFx0dmFyIGlEYXRhSW5kZXggPSBhaURpc3BsYXlbal07XG5cdFx0XHRcdHZhciBhb0RhdGEgPSBvU2V0dGluZ3MuYW9EYXRhWyBpRGF0YUluZGV4IF07XG5cdFx0XHRcdGlmICggYW9EYXRhLm5UciA9PT0gbnVsbCApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRfZm5DcmVhdGVUciggb1NldHRpbmdzLCBpRGF0YUluZGV4ICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHZhciBuUm93ID0gYW9EYXRhLm5Ucjtcblx0XG5cdFx0XHRcdC8qIFJlbW92ZSB0aGUgb2xkIHN0cmlwaW5nIGNsYXNzZXMgYW5kIHRoZW4gYWRkIHRoZSBuZXcgb25lICovXG5cdFx0XHRcdGlmICggaVN0cmlwZXMgIT09IDAgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIHNTdHJpcGUgPSBhc1N0cmlwZUNsYXNzZXNbIGlSb3dDb3VudCAlIGlTdHJpcGVzIF07XG5cdFx0XHRcdFx0aWYgKCBhb0RhdGEuX3NSb3dTdHJpcGUgIT0gc1N0cmlwZSApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0JChuUm93KS5yZW1vdmVDbGFzcyggYW9EYXRhLl9zUm93U3RyaXBlICkuYWRkQ2xhc3MoIHNTdHJpcGUgKTtcblx0XHRcdFx0XHRcdGFvRGF0YS5fc1Jvd1N0cmlwZSA9IHNTdHJpcGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBSb3cgY2FsbGJhY2sgZnVuY3Rpb25zIC0gbWlnaHQgd2FudCB0byBtYW5pcHVsYXRlIHRoZSByb3dcblx0XHRcdFx0Ly8gaVJvd0NvdW50IGFuZCBqIGFyZSBub3QgY3VycmVudGx5IGRvY3VtZW50ZWQuIEFyZSB0aGV5IGF0IGFsbFxuXHRcdFx0XHQvLyB1c2VmdWw/XG5cdFx0XHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCAnYW9Sb3dDYWxsYmFjaycsIG51bGwsXG5cdFx0XHRcdFx0W25Sb3csIGFvRGF0YS5fYURhdGEsIGlSb3dDb3VudCwgal0gKTtcblx0XG5cdFx0XHRcdGFuUm93cy5wdXNoKCBuUm93ICk7XG5cdFx0XHRcdGlSb3dDb3VudCsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0LyogVGFibGUgaXMgZW1wdHkgLSBjcmVhdGUgYSByb3cgd2l0aCBhbiBlbXB0eSBtZXNzYWdlIGluIGl0ICovXG5cdFx0XHR2YXIgc1plcm8gPSBvTGFuZy5zWmVyb1JlY29yZHM7XG5cdFx0XHRpZiAoIG9TZXR0aW5ncy5pRHJhdyA9PSAxICYmICBfZm5EYXRhU291cmNlKCBvU2V0dGluZ3MgKSA9PSAnYWpheCcgKVxuXHRcdFx0e1xuXHRcdFx0XHRzWmVybyA9IG9MYW5nLnNMb2FkaW5nUmVjb3Jkcztcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBvTGFuZy5zRW1wdHlUYWJsZSAmJiBvU2V0dGluZ3MuZm5SZWNvcmRzVG90YWwoKSA9PT0gMCApXG5cdFx0XHR7XG5cdFx0XHRcdHNaZXJvID0gb0xhbmcuc0VtcHR5VGFibGU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0YW5Sb3dzWyAwIF0gPSAkKCAnPHRyLz4nLCB7ICdjbGFzcyc6IGlTdHJpcGVzID8gYXNTdHJpcGVDbGFzc2VzWzBdIDogJycgfSApXG5cdFx0XHRcdC5hcHBlbmQoICQoJzx0ZCAvPicsIHtcblx0XHRcdFx0XHQndmFsaWduJzogICd0b3AnLFxuXHRcdFx0XHRcdCdjb2xTcGFuJzogX2ZuVmlzYmxlQ29sdW1ucyggb1NldHRpbmdzICksXG5cdFx0XHRcdFx0J2NsYXNzJzogICBvU2V0dGluZ3Mub0NsYXNzZXMuc1Jvd0VtcHR5XG5cdFx0XHRcdH0gKS5odG1sKCBzWmVybyApIClbMF07XG5cdFx0fVxuXHRcblx0XHQvKiBIZWFkZXIgYW5kIGZvb3RlciBjYWxsYmFja3MgKi9cblx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvSGVhZGVyQ2FsbGJhY2snLCAnaGVhZGVyJywgWyAkKG9TZXR0aW5ncy5uVEhlYWQpLmNoaWxkcmVuKCd0cicpWzBdLFxuXHRcdFx0X2ZuR2V0RGF0YU1hc3Rlciggb1NldHRpbmdzICksIGlEaXNwbGF5U3RhcnQsIGlEaXNwbGF5RW5kLCBhaURpc3BsYXkgXSApO1xuXHRcblx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvRm9vdGVyQ2FsbGJhY2snLCAnZm9vdGVyJywgWyAkKG9TZXR0aW5ncy5uVEZvb3QpLmNoaWxkcmVuKCd0cicpWzBdLFxuXHRcdFx0X2ZuR2V0RGF0YU1hc3Rlciggb1NldHRpbmdzICksIGlEaXNwbGF5U3RhcnQsIGlEaXNwbGF5RW5kLCBhaURpc3BsYXkgXSApO1xuXHRcblx0XHR2YXIgYm9keSA9ICQob1NldHRpbmdzLm5UQm9keSk7XG5cdFxuXHRcdGJvZHkuY2hpbGRyZW4oKS5kZXRhY2goKTtcblx0XHRib2R5LmFwcGVuZCggJChhblJvd3MpICk7XG5cdFxuXHRcdC8qIENhbGwgYWxsIHJlcXVpcmVkIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgdGhlIGVuZCBvZiBhIGRyYXcgKi9cblx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvRHJhd0NhbGxiYWNrJywgJ2RyYXcnLCBbb1NldHRpbmdzXSApO1xuXHRcblx0XHQvKiBEcmF3IGlzIGNvbXBsZXRlLCBzb3J0aW5nIGFuZCBmaWx0ZXJpbmcgbXVzdCBiZSBhcyB3ZWxsICovXG5cdFx0b1NldHRpbmdzLmJTb3J0ZWQgPSBmYWxzZTtcblx0XHRvU2V0dGluZ3MuYkZpbHRlcmVkID0gZmFsc2U7XG5cdFx0b1NldHRpbmdzLmJEcmF3aW5nID0gZmFsc2U7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogUmVkcmF3IHRoZSB0YWJsZSAtIHRha2luZyBhY2NvdW50IG9mIHRoZSB2YXJpb3VzIGZlYXR1cmVzIHdoaWNoIGFyZSBlbmFibGVkXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge2Jvb2xlYW59IFtob2xkUG9zaXRpb25dIEtlZXAgdGhlIGN1cnJlbnQgcGFnaW5nIHBvc2l0aW9uLiBCeSBkZWZhdWx0XG5cdCAqICAgIHRoZSBwYWdpbmcgaXMgcmVzZXQgdG8gdGhlIGZpcnN0IHBhZ2Vcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuUmVEcmF3KCBzZXR0aW5ncywgaG9sZFBvc2l0aW9uIClcblx0e1xuXHRcdHZhclxuXHRcdFx0ZmVhdHVyZXMgPSBzZXR0aW5ncy5vRmVhdHVyZXMsXG5cdFx0XHRzb3J0ICAgICA9IGZlYXR1cmVzLmJTb3J0LFxuXHRcdFx0ZmlsdGVyICAgPSBmZWF0dXJlcy5iRmlsdGVyO1xuXHRcblx0XHRpZiAoIHNvcnQgKSB7XG5cdFx0XHRfZm5Tb3J0KCBzZXR0aW5ncyApO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBmaWx0ZXIgKSB7XG5cdFx0XHRfZm5GaWx0ZXJDb21wbGV0ZSggc2V0dGluZ3MsIHNldHRpbmdzLm9QcmV2aW91c1NlYXJjaCApO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdC8vIE5vIGZpbHRlcmluZywgc28gd2Ugd2FudCB0byBqdXN0IHVzZSB0aGUgZGlzcGxheSBtYXN0ZXJcblx0XHRcdHNldHRpbmdzLmFpRGlzcGxheSA9IHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBob2xkUG9zaXRpb24gIT09IHRydWUgKSB7XG5cdFx0XHRzZXR0aW5ncy5faURpc3BsYXlTdGFydCA9IDA7XG5cdFx0fVxuXHRcblx0XHQvLyBMZXQgYW55IG1vZHVsZXMga25vdyBhYm91dCB0aGUgZHJhdyBob2xkIHBvc2l0aW9uIHN0YXRlICh1c2VkIGJ5XG5cdFx0Ly8gc2Nyb2xsaW5nIGludGVybmFsbHkpXG5cdFx0c2V0dGluZ3MuX2RyYXdIb2xkID0gaG9sZFBvc2l0aW9uO1xuXHRcblx0XHRfZm5EcmF3KCBzZXR0aW5ncyApO1xuXHRcblx0XHRzZXR0aW5ncy5fZHJhd0hvbGQgPSBmYWxzZTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBZGQgdGhlIG9wdGlvbnMgdG8gdGhlIHBhZ2UgSFRNTCBmb3IgdGhlIHRhYmxlXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkFkZE9wdGlvbnNIdG1sICggb1NldHRpbmdzIClcblx0e1xuXHRcdHZhciBjbGFzc2VzID0gb1NldHRpbmdzLm9DbGFzc2VzO1xuXHRcdHZhciB0YWJsZSA9ICQob1NldHRpbmdzLm5UYWJsZSk7XG5cdFx0dmFyIGhvbGRpbmcgPSAkKCc8ZGl2Lz4nKS5pbnNlcnRCZWZvcmUoIHRhYmxlICk7IC8vIEhvbGRpbmcgZWxlbWVudCBmb3Igc3BlZWRcblx0XHR2YXIgZmVhdHVyZXMgPSBvU2V0dGluZ3Mub0ZlYXR1cmVzO1xuXHRcblx0XHQvLyBBbGwgRGF0YVRhYmxlcyBhcmUgd3JhcHBlZCBpbiBhIGRpdlxuXHRcdHZhciBpbnNlcnQgPSAkKCc8ZGl2Lz4nLCB7XG5cdFx0XHRpZDogICAgICBvU2V0dGluZ3Muc1RhYmxlSWQrJ193cmFwcGVyJyxcblx0XHRcdCdjbGFzcyc6IGNsYXNzZXMuc1dyYXBwZXIgKyAob1NldHRpbmdzLm5URm9vdCA/ICcnIDogJyAnK2NsYXNzZXMuc05vRm9vdGVyKVxuXHRcdH0gKTtcblx0XG5cdFx0b1NldHRpbmdzLm5Ib2xkaW5nID0gaG9sZGluZ1swXTtcblx0XHRvU2V0dGluZ3MublRhYmxlV3JhcHBlciA9IGluc2VydFswXTtcblx0XHRvU2V0dGluZ3MublRhYmxlUmVpbnNlcnRCZWZvcmUgPSBvU2V0dGluZ3MublRhYmxlLm5leHRTaWJsaW5nO1xuXHRcblx0XHQvKiBMb29wIG92ZXIgdGhlIHVzZXIgc2V0IHBvc2l0aW9uaW5nIGFuZCBwbGFjZSB0aGUgZWxlbWVudHMgYXMgbmVlZGVkICovXG5cdFx0dmFyIGFEb20gPSBvU2V0dGluZ3Muc0RvbS5zcGxpdCgnJyk7XG5cdFx0dmFyIGZlYXR1cmVOb2RlLCBjT3B0aW9uLCBuTmV3Tm9kZSwgY05leHQsIHNBdHRyLCBqO1xuXHRcdGZvciAoIHZhciBpPTAgOyBpPGFEb20ubGVuZ3RoIDsgaSsrIClcblx0XHR7XG5cdFx0XHRmZWF0dXJlTm9kZSA9IG51bGw7XG5cdFx0XHRjT3B0aW9uID0gYURvbVtpXTtcblx0XG5cdFx0XHRpZiAoIGNPcHRpb24gPT0gJzwnIClcblx0XHRcdHtcblx0XHRcdFx0LyogTmV3IGNvbnRhaW5lciBkaXYgKi9cblx0XHRcdFx0bk5ld05vZGUgPSAkKCc8ZGl2Lz4nKVswXTtcblx0XG5cdFx0XHRcdC8qIENoZWNrIHRvIHNlZSBpZiB3ZSBzaG91bGQgYXBwZW5kIGFuIGlkIGFuZC9vciBhIGNsYXNzIG5hbWUgdG8gdGhlIGNvbnRhaW5lciAqL1xuXHRcdFx0XHRjTmV4dCA9IGFEb21baSsxXTtcblx0XHRcdFx0aWYgKCBjTmV4dCA9PSBcIidcIiB8fCBjTmV4dCA9PSAnXCInIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHNBdHRyID0gXCJcIjtcblx0XHRcdFx0XHRqID0gMjtcblx0XHRcdFx0XHR3aGlsZSAoIGFEb21baStqXSAhPSBjTmV4dCApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c0F0dHIgKz0gYURvbVtpK2pdO1xuXHRcdFx0XHRcdFx0aisrO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0LyogUmVwbGFjZSBqUXVlcnkgVUkgY29uc3RhbnRzIEB0b2RvIGRlcHJlY2lhdGVkICovXG5cdFx0XHRcdFx0aWYgKCBzQXR0ciA9PSBcIkhcIiApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c0F0dHIgPSBjbGFzc2VzLnNKVUlIZWFkZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKCBzQXR0ciA9PSBcIkZcIiApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c0F0dHIgPSBjbGFzc2VzLnNKVUlGb290ZXI7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvKiBUaGUgYXR0cmlidXRlIGNhbiBiZSBpbiB0aGUgZm9ybWF0IG9mIFwiI2lkLmNsYXNzXCIsIFwiI2lkXCIgb3IgXCJjbGFzc1wiIFRoaXMgbG9naWNcblx0XHRcdFx0XHQgKiBicmVha3MgdGhlIHN0cmluZyBpbnRvIHBhcnRzIGFuZCBhcHBsaWVzIHRoZW0gYXMgbmVlZGVkXG5cdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0aWYgKCBzQXR0ci5pbmRleE9mKCcuJykgIT0gLTEgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBhU3BsaXQgPSBzQXR0ci5zcGxpdCgnLicpO1xuXHRcdFx0XHRcdFx0bk5ld05vZGUuaWQgPSBhU3BsaXRbMF0uc3Vic3RyKDEsIGFTcGxpdFswXS5sZW5ndGgtMSk7XG5cdFx0XHRcdFx0XHRuTmV3Tm9kZS5jbGFzc05hbWUgPSBhU3BsaXRbMV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKCBzQXR0ci5jaGFyQXQoMCkgPT0gXCIjXCIgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdG5OZXdOb2RlLmlkID0gc0F0dHIuc3Vic3RyKDEsIHNBdHRyLmxlbmd0aC0xKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdG5OZXdOb2RlLmNsYXNzTmFtZSA9IHNBdHRyO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0aSArPSBqOyAvKiBNb3ZlIGFsb25nIHRoZSBwb3NpdGlvbiBhcnJheSAqL1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRpbnNlcnQuYXBwZW5kKCBuTmV3Tm9kZSApO1xuXHRcdFx0XHRpbnNlcnQgPSAkKG5OZXdOb2RlKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBjT3B0aW9uID09ICc+JyApXG5cdFx0XHR7XG5cdFx0XHRcdC8qIEVuZCBjb250YWluZXIgZGl2ICovXG5cdFx0XHRcdGluc2VydCA9IGluc2VydC5wYXJlbnQoKTtcblx0XHRcdH1cblx0XHRcdC8vIEB0b2RvIE1vdmUgb3B0aW9ucyBpbnRvIHRoZWlyIG93biBwbHVnaW5zP1xuXHRcdFx0ZWxzZSBpZiAoIGNPcHRpb24gPT0gJ2wnICYmIGZlYXR1cmVzLmJQYWdpbmF0ZSAmJiBmZWF0dXJlcy5iTGVuZ3RoQ2hhbmdlIClcblx0XHRcdHtcblx0XHRcdFx0LyogTGVuZ3RoICovXG5cdFx0XHRcdGZlYXR1cmVOb2RlID0gX2ZuRmVhdHVyZUh0bWxMZW5ndGgoIG9TZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoIGNPcHRpb24gPT0gJ2YnICYmIGZlYXR1cmVzLmJGaWx0ZXIgKVxuXHRcdFx0e1xuXHRcdFx0XHQvKiBGaWx0ZXIgKi9cblx0XHRcdFx0ZmVhdHVyZU5vZGUgPSBfZm5GZWF0dXJlSHRtbEZpbHRlciggb1NldHRpbmdzICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAncicgJiYgZmVhdHVyZXMuYlByb2Nlc3NpbmcgKVxuXHRcdFx0e1xuXHRcdFx0XHQvKiBwUm9jZXNzaW5nICovXG5cdFx0XHRcdGZlYXR1cmVOb2RlID0gX2ZuRmVhdHVyZUh0bWxQcm9jZXNzaW5nKCBvU2V0dGluZ3MgKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBjT3B0aW9uID09ICd0JyApXG5cdFx0XHR7XG5cdFx0XHRcdC8qIFRhYmxlICovXG5cdFx0XHRcdGZlYXR1cmVOb2RlID0gX2ZuRmVhdHVyZUh0bWxUYWJsZSggb1NldHRpbmdzICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAgJ2knICYmIGZlYXR1cmVzLmJJbmZvIClcblx0XHRcdHtcblx0XHRcdFx0LyogSW5mbyAqL1xuXHRcdFx0XHRmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sSW5mbyggb1NldHRpbmdzICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAncCcgJiYgZmVhdHVyZXMuYlBhZ2luYXRlIClcblx0XHRcdHtcblx0XHRcdFx0LyogUGFnaW5hdGlvbiAqL1xuXHRcdFx0XHRmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUoIG9TZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoIERhdGFUYWJsZS5leHQuZmVhdHVyZS5sZW5ndGggIT09IDAgKVxuXHRcdFx0e1xuXHRcdFx0XHQvKiBQbHVnLWluIGZlYXR1cmVzICovXG5cdFx0XHRcdHZhciBhb0ZlYXR1cmVzID0gRGF0YVRhYmxlLmV4dC5mZWF0dXJlO1xuXHRcdFx0XHRmb3IgKCB2YXIgaz0wLCBrTGVuPWFvRmVhdHVyZXMubGVuZ3RoIDsgazxrTGVuIDsgaysrIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICggY09wdGlvbiA9PSBhb0ZlYXR1cmVzW2tdLmNGZWF0dXJlIClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRmZWF0dXJlTm9kZSA9IGFvRmVhdHVyZXNba10uZm5Jbml0KCBvU2V0dGluZ3MgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8qIEFkZCB0byB0aGUgMkQgZmVhdHVyZXMgYXJyYXkgKi9cblx0XHRcdGlmICggZmVhdHVyZU5vZGUgKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgYWFuRmVhdHVyZXMgPSBvU2V0dGluZ3MuYWFuRmVhdHVyZXM7XG5cdFxuXHRcdFx0XHRpZiAoICEgYWFuRmVhdHVyZXNbY09wdGlvbl0gKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0YWFuRmVhdHVyZXNbY09wdGlvbl0gPSBbXTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0YWFuRmVhdHVyZXNbY09wdGlvbl0ucHVzaCggZmVhdHVyZU5vZGUgKTtcblx0XHRcdFx0aW5zZXJ0LmFwcGVuZCggZmVhdHVyZU5vZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8qIEJ1aWx0IG91ciBET00gc3RydWN0dXJlIC0gcmVwbGFjZSB0aGUgaG9sZGluZyBkaXYgd2l0aCB3aGF0IHdlIHdhbnQgKi9cblx0XHRob2xkaW5nLnJlcGxhY2VXaXRoKCBpbnNlcnQgKTtcblx0XHRvU2V0dGluZ3MubkhvbGRpbmcgPSBudWxsO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIFVzZSB0aGUgRE9NIHNvdXJjZSB0byBjcmVhdGUgdXAgYW4gYXJyYXkgb2YgaGVhZGVyIGNlbGxzLiBUaGUgaWRlYSBoZXJlIGlzIHRvXG5cdCAqIGNyZWF0ZSBhIGxheW91dCBncmlkIChhcnJheSkgb2Ygcm93cyB4IGNvbHVtbnMsIHdoaWNoIGNvbnRhaW5zIGEgcmVmZXJlbmNlXG5cdCAqIHRvIHRoZSBjZWxsIHRoYXQgdGhhdCBwb2ludCBpbiB0aGUgZ3JpZCAocmVnYXJkbGVzcyBvZiBjb2wvcm93c3BhbiksIHN1Y2ggdGhhdFxuXHQgKiBhbnkgY29sdW1uIC8gcm93IGNvdWxkIGJlIHJlbW92ZWQgYW5kIHRoZSBuZXcgZ3JpZCBjb25zdHJ1Y3RlZFxuXHQgKiAgQHBhcmFtIGFycmF5IHtvYmplY3R9IGFMYXlvdXQgQXJyYXkgdG8gc3RvcmUgdGhlIGNhbGN1bGF0ZWQgbGF5b3V0IGluXG5cdCAqICBAcGFyYW0ge25vZGV9IG5UaGVhZCBUaGUgaGVhZGVyL2Zvb3RlciBlbGVtZW50IGZvciB0aGUgdGFibGVcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuRGV0ZWN0SGVhZGVyICggYUxheW91dCwgblRoZWFkIClcblx0e1xuXHRcdHZhciBuVHJzID0gJChuVGhlYWQpLmNoaWxkcmVuKCd0cicpO1xuXHRcdHZhciBuVHIsIG5DZWxsO1xuXHRcdHZhciBpLCBrLCBsLCBpTGVuLCBqTGVuLCBpQ29sU2hpZnRlZCwgaUNvbHVtbiwgaUNvbHNwYW4sIGlSb3dzcGFuO1xuXHRcdHZhciBiVW5pcXVlO1xuXHRcdHZhciBmblNoaWZ0Q29sID0gZnVuY3Rpb24gKCBhLCBpLCBqICkge1xuXHRcdFx0dmFyIGsgPSBhW2ldO1xuXHQgICAgICAgICAgICAgICAgd2hpbGUgKCBrW2pdICkge1xuXHRcdFx0XHRqKys7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gajtcblx0XHR9O1xuXHRcblx0XHRhTGF5b3V0LnNwbGljZSggMCwgYUxheW91dC5sZW5ndGggKTtcblx0XG5cdFx0LyogV2Uga25vdyBob3cgbWFueSByb3dzIHRoZXJlIGFyZSBpbiB0aGUgbGF5b3V0IC0gc28gcHJlcCBpdCAqL1xuXHRcdGZvciAoIGk9MCwgaUxlbj1uVHJzLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0e1xuXHRcdFx0YUxheW91dC5wdXNoKCBbXSApO1xuXHRcdH1cblx0XG5cdFx0LyogQ2FsY3VsYXRlIGEgbGF5b3V0IGFycmF5ICovXG5cdFx0Zm9yICggaT0wLCBpTGVuPW5UcnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcblx0XHR7XG5cdFx0XHRuVHIgPSBuVHJzW2ldO1xuXHRcdFx0aUNvbHVtbiA9IDA7XG5cdFxuXHRcdFx0LyogRm9yIGV2ZXJ5IGNlbGwgaW4gdGhlIHJvdy4uLiAqL1xuXHRcdFx0bkNlbGwgPSBuVHIuZmlyc3RDaGlsZDtcblx0XHRcdHdoaWxlICggbkNlbGwgKSB7XG5cdFx0XHRcdGlmICggbkNlbGwubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSBcIlREXCIgfHxcblx0XHRcdFx0ICAgICBuQ2VsbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09IFwiVEhcIiApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvKiBHZXQgdGhlIGNvbCBhbmQgcm93c3BhbiBhdHRyaWJ1dGVzIGZyb20gdGhlIERPTSBhbmQgc2FuaXRpc2UgdGhlbSAqL1xuXHRcdFx0XHRcdGlDb2xzcGFuID0gbkNlbGwuZ2V0QXR0cmlidXRlKCdjb2xzcGFuJykgKiAxO1xuXHRcdFx0XHRcdGlSb3dzcGFuID0gbkNlbGwuZ2V0QXR0cmlidXRlKCdyb3dzcGFuJykgKiAxO1xuXHRcdFx0XHRcdGlDb2xzcGFuID0gKCFpQ29sc3BhbiB8fCBpQ29sc3Bhbj09PTAgfHwgaUNvbHNwYW49PT0xKSA/IDEgOiBpQ29sc3Bhbjtcblx0XHRcdFx0XHRpUm93c3BhbiA9ICghaVJvd3NwYW4gfHwgaVJvd3NwYW49PT0wIHx8IGlSb3dzcGFuPT09MSkgPyAxIDogaVJvd3NwYW47XG5cdFxuXHRcdFx0XHRcdC8qIFRoZXJlIG1pZ2h0IGJlIGNvbHNwYW4gY2VsbHMgYWxyZWFkeSBpbiB0aGlzIHJvdywgc28gc2hpZnQgb3VyIHRhcmdldFxuXHRcdFx0XHRcdCAqIGFjY29yZGluZ2x5XG5cdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0aUNvbFNoaWZ0ZWQgPSBmblNoaWZ0Q29sKCBhTGF5b3V0LCBpLCBpQ29sdW1uICk7XG5cdFxuXHRcdFx0XHRcdC8qIENhY2hlIGNhbGN1bGF0aW9uIGZvciB1bmlxdWUgY29sdW1ucyAqL1xuXHRcdFx0XHRcdGJVbmlxdWUgPSBpQ29sc3BhbiA9PT0gMSA/IHRydWUgOiBmYWxzZTtcblx0XG5cdFx0XHRcdFx0LyogSWYgdGhlcmUgaXMgY29sIC8gcm93c3BhbiwgY29weSB0aGUgaW5mb3JtYXRpb24gaW50byB0aGUgbGF5b3V0IGdyaWQgKi9cblx0XHRcdFx0XHRmb3IgKCBsPTAgOyBsPGlDb2xzcGFuIDsgbCsrIClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRmb3IgKCBrPTAgOyBrPGlSb3dzcGFuIDsgaysrIClcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0YUxheW91dFtpK2tdW2lDb2xTaGlmdGVkK2xdID0ge1xuXHRcdFx0XHRcdFx0XHRcdFwiY2VsbFwiOiBuQ2VsbCxcblx0XHRcdFx0XHRcdFx0XHRcInVuaXF1ZVwiOiBiVW5pcXVlXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdGFMYXlvdXRbaStrXS5uVHIgPSBuVHI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG5DZWxsID0gbkNlbGwubmV4dFNpYmxpbmc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdldCBhbiBhcnJheSBvZiB1bmlxdWUgdGggZWxlbWVudHMsIG9uZSBmb3IgZWFjaCBjb2x1bW5cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7bm9kZX0gbkhlYWRlciBhdXRvbWF0aWNhbGx5IGRldGVjdCB0aGUgbGF5b3V0IGZyb20gdGhpcyBub2RlIC0gb3B0aW9uYWxcblx0ICogIEBwYXJhbSB7YXJyYXl9IGFMYXlvdXQgdGhlYWQvdGZvb3QgbGF5b3V0IGZyb20gX2ZuRGV0ZWN0SGVhZGVyIC0gb3B0aW9uYWxcblx0ICogIEByZXR1cm5zIGFycmF5IHtub2RlfSBhUmV0dXJuIGxpc3Qgb2YgdW5pcXVlIHRoJ3Ncblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuR2V0VW5pcXVlVGhzICggb1NldHRpbmdzLCBuSGVhZGVyLCBhTGF5b3V0IClcblx0e1xuXHRcdHZhciBhUmV0dXJuID0gW107XG5cdFx0aWYgKCAhYUxheW91dCApXG5cdFx0e1xuXHRcdFx0YUxheW91dCA9IG9TZXR0aW5ncy5hb0hlYWRlcjtcblx0XHRcdGlmICggbkhlYWRlciApXG5cdFx0XHR7XG5cdFx0XHRcdGFMYXlvdXQgPSBbXTtcblx0XHRcdFx0X2ZuRGV0ZWN0SGVhZGVyKCBhTGF5b3V0LCBuSGVhZGVyICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRmb3IgKCB2YXIgaT0wLCBpTGVuPWFMYXlvdXQubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcblx0XHR7XG5cdFx0XHRmb3IgKCB2YXIgaj0wLCBqTGVuPWFMYXlvdXRbaV0ubGVuZ3RoIDsgajxqTGVuIDsgaisrIClcblx0XHRcdHtcblx0XHRcdFx0aWYgKCBhTGF5b3V0W2ldW2pdLnVuaXF1ZSAmJlxuXHRcdFx0XHRcdCAoIWFSZXR1cm5bal0gfHwgIW9TZXR0aW5ncy5iU29ydENlbGxzVG9wKSApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhUmV0dXJuW2pdID0gYUxheW91dFtpXVtqXS5jZWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gYVJldHVybjtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZSBhbiBBamF4IGNhbGwgYmFzZWQgb24gdGhlIHRhYmxlJ3Mgc2V0dGluZ3MsIHRha2luZyBpbnRvIGFjY291bnQgdGhhdFxuXHQgKiBwYXJhbWV0ZXJzIGNhbiBoYXZlIG11bHRpcGxlIGZvcm1zLCBhbmQgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogQHBhcmFtIHthcnJheX0gZGF0YSBEYXRhIHRvIHNlbmQgdG8gdGhlIHNlcnZlciwgcmVxdWlyZWQgYnlcblx0ICogICAgIERhdGFUYWJsZXMgLSBtYXkgYmUgYXVnbWVudGVkIGJ5IGRldmVsb3BlciBjYWxsYmFja3Ncblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuIHdoZW4gZGF0YSBpcyBvYnRhaW5lZFxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQnVpbGRBamF4KCBvU2V0dGluZ3MsIGRhdGEsIGZuIClcblx0e1xuXHRcdC8vIENvbXBhdGliaWxpdHkgd2l0aCAxLjktLCBhbGxvdyBmblNlcnZlckRhdGEgYW5kIGV2ZW50IHRvIG1hbmlwdWxhdGVcblx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvU2VydmVyUGFyYW1zJywgJ3NlcnZlclBhcmFtcycsIFtkYXRhXSApO1xuXHRcblx0XHQvLyBDb252ZXJ0IHRvIG9iamVjdCBiYXNlZCBmb3IgMS4xMCsgaWYgdXNpbmcgdGhlIG9sZCBhcnJheSBzY2hlbWUgd2hpY2ggY2FuXG5cdFx0Ly8gY29tZSBmcm9tIHNlcnZlci1zaWRlIHByb2Nlc3Npbmcgb3Igc2VydmVyUGFyYW1zXG5cdFx0aWYgKCBkYXRhICYmICQuaXNBcnJheShkYXRhKSApIHtcblx0XHRcdHZhciB0bXAgPSB7fTtcblx0XHRcdHZhciByYnJhY2tldCA9IC8oLio/KVxcW1xcXSQvO1xuXHRcblx0XHRcdCQuZWFjaCggZGF0YSwgZnVuY3Rpb24gKGtleSwgdmFsKSB7XG5cdFx0XHRcdHZhciBtYXRjaCA9IHZhbC5uYW1lLm1hdGNoKHJicmFja2V0KTtcblx0XG5cdFx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydCBmb3IgYXJyYXlzXG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBtYXRjaFswXTtcblx0XG5cdFx0XHRcdFx0aWYgKCAhIHRtcFsgbmFtZSBdICkge1xuXHRcdFx0XHRcdFx0dG1wWyBuYW1lIF0gPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dG1wWyBuYW1lIF0ucHVzaCggdmFsLnZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0dG1wW3ZhbC5uYW1lXSA9IHZhbC52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0ZGF0YSA9IHRtcDtcblx0XHR9XG5cdFxuXHRcdHZhciBhamF4RGF0YTtcblx0XHR2YXIgYWpheCA9IG9TZXR0aW5ncy5hamF4O1xuXHRcdHZhciBpbnN0YW5jZSA9IG9TZXR0aW5ncy5vSW5zdGFuY2U7XG5cdFx0dmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCBqc29uICkge1xuXHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBvU2V0dGluZ3MsIG51bGwsICd4aHInLCBbb1NldHRpbmdzLCBqc29uLCBvU2V0dGluZ3MuanFYSFJdICk7XG5cdFx0XHRmbigganNvbiApO1xuXHRcdH07XG5cdFxuXHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBhamF4ICkgJiYgYWpheC5kYXRhIClcblx0XHR7XG5cdFx0XHRhamF4RGF0YSA9IGFqYXguZGF0YTtcblx0XG5cdFx0XHR2YXIgbmV3RGF0YSA9ICQuaXNGdW5jdGlvbiggYWpheERhdGEgKSA/XG5cdFx0XHRcdGFqYXhEYXRhKCBkYXRhLCBvU2V0dGluZ3MgKSA6ICAvLyBmbiBjYW4gbWFuaXB1bGF0ZSBkYXRhIG9yIHJldHVyblxuXHRcdFx0XHRhamF4RGF0YTsgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gb2JqZWN0IG9iamVjdCBvciBhcnJheSB0byBtZXJnZVxuXHRcblx0XHRcdC8vIElmIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBzb21ldGhpbmcsIHVzZSB0aGF0IGFsb25lXG5cdFx0XHRkYXRhID0gJC5pc0Z1bmN0aW9uKCBhamF4RGF0YSApICYmIG5ld0RhdGEgP1xuXHRcdFx0XHRuZXdEYXRhIDpcblx0XHRcdFx0JC5leHRlbmQoIHRydWUsIGRhdGEsIG5ld0RhdGEgKTtcblx0XG5cdFx0XHQvLyBSZW1vdmUgdGhlIGRhdGEgcHJvcGVydHkgYXMgd2UndmUgcmVzb2x2ZWQgaXQgYWxyZWFkeSBhbmQgZG9uJ3Qgd2FudFxuXHRcdFx0Ly8galF1ZXJ5IHRvIGRvIGl0IGFnYWluIChpdCBpcyByZXN0b3JlZCBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbilcblx0XHRcdGRlbGV0ZSBhamF4LmRhdGE7XG5cdFx0fVxuXHRcblx0XHR2YXIgYmFzZUFqYXggPSB7XG5cdFx0XHRcImRhdGFcIjogZGF0YSxcblx0XHRcdFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHR2YXIgZXJyb3IgPSBqc29uLmVycm9yIHx8IGpzb24uc0Vycm9yO1xuXHRcdFx0XHRpZiAoIGVycm9yICkge1xuXHRcdFx0XHRcdF9mbkxvZyggb1NldHRpbmdzLCAwLCBlcnJvciApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRvU2V0dGluZ3MuanNvbiA9IGpzb247XG5cdFx0XHRcdGNhbGxiYWNrKCBqc29uICk7XG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhVHlwZVwiOiBcImpzb25cIixcblx0XHRcdFwiY2FjaGVcIjogZmFsc2UsXG5cdFx0XHRcInR5cGVcIjogb1NldHRpbmdzLnNTZXJ2ZXJNZXRob2QsXG5cdFx0XHRcImVycm9yXCI6IGZ1bmN0aW9uICh4aHIsIGVycm9yLCB0aHJvd24pIHtcblx0XHRcdFx0dmFyIHJldCA9IF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCBudWxsLCAneGhyJywgW29TZXR0aW5ncywgbnVsbCwgb1NldHRpbmdzLmpxWEhSXSApO1xuXHRcblx0XHRcdFx0aWYgKCAkLmluQXJyYXkoIHRydWUsIHJldCApID09PSAtMSApIHtcblx0XHRcdFx0XHRpZiAoIGVycm9yID09IFwicGFyc2VyZXJyb3JcIiApIHtcblx0XHRcdFx0XHRcdF9mbkxvZyggb1NldHRpbmdzLCAwLCAnSW52YWxpZCBKU09OIHJlc3BvbnNlJywgMSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cdFx0XHRcdFx0XHRfZm5Mb2coIG9TZXR0aW5ncywgMCwgJ0FqYXggZXJyb3InLCA3ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggb1NldHRpbmdzLCBmYWxzZSApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdC8vIFN0b3JlIHRoZSBkYXRhIHN1Ym1pdHRlZCBmb3IgdGhlIEFQSVxuXHRcdG9TZXR0aW5ncy5vQWpheERhdGEgPSBkYXRhO1xuXHRcblx0XHQvLyBBbGxvdyBwbHVnLWlucyBhbmQgZXh0ZXJuYWwgcHJvY2Vzc2VzIHRvIG1vZGlmeSB0aGUgZGF0YVxuXHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCBudWxsLCAncHJlWGhyJywgW29TZXR0aW5ncywgZGF0YV0gKTtcblx0XG5cdFx0aWYgKCBvU2V0dGluZ3MuZm5TZXJ2ZXJEYXRhIClcblx0XHR7XG5cdFx0XHQvLyBEYXRhVGFibGVzIDEuOS0gY29tcGF0aWJpbGl0eVxuXHRcdFx0b1NldHRpbmdzLmZuU2VydmVyRGF0YS5jYWxsKCBpbnN0YW5jZSxcblx0XHRcdFx0b1NldHRpbmdzLnNBamF4U291cmNlLFxuXHRcdFx0XHQkLm1hcCggZGF0YSwgZnVuY3Rpb24gKHZhbCwga2V5KSB7IC8vIE5lZWQgdG8gY29udmVydCBiYWNrIHRvIDEuOSB0cmFkIGZvcm1hdFxuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGtleSwgdmFsdWU6IHZhbCB9O1xuXHRcdFx0XHR9ICksXG5cdFx0XHRcdGNhbGxiYWNrLFxuXHRcdFx0XHRvU2V0dGluZ3Ncblx0XHRcdCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBvU2V0dGluZ3Muc0FqYXhTb3VyY2UgfHwgdHlwZW9mIGFqYXggPT09ICdzdHJpbmcnIClcblx0XHR7XG5cdFx0XHQvLyBEYXRhVGFibGVzIDEuOS0gY29tcGF0aWJpbGl0eVxuXHRcdFx0b1NldHRpbmdzLmpxWEhSID0gJC5hamF4KCAkLmV4dGVuZCggYmFzZUFqYXgsIHtcblx0XHRcdFx0dXJsOiBhamF4IHx8IG9TZXR0aW5ncy5zQWpheFNvdXJjZVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCAkLmlzRnVuY3Rpb24oIGFqYXggKSApXG5cdFx0e1xuXHRcdFx0Ly8gSXMgYSBmdW5jdGlvbiAtIGxldCB0aGUgY2FsbGVyIGRlZmluZSB3aGF0IG5lZWRzIHRvIGJlIGRvbmVcblx0XHRcdG9TZXR0aW5ncy5qcVhIUiA9IGFqYXguY2FsbCggaW5zdGFuY2UsIGRhdGEsIGNhbGxiYWNrLCBvU2V0dGluZ3MgKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdC8vIE9iamVjdCB0byBleHRlbmQgdGhlIGJhc2Ugc2V0dGluZ3Ncblx0XHRcdG9TZXR0aW5ncy5qcVhIUiA9ICQuYWpheCggJC5leHRlbmQoIGJhc2VBamF4LCBhamF4ICkgKTtcblx0XG5cdFx0XHQvLyBSZXN0b3JlIGZvciBuZXh0IHRpbWUgYXJvdW5kXG5cdFx0XHRhamF4LmRhdGEgPSBhamF4RGF0YTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogVXBkYXRlIHRoZSB0YWJsZSB1c2luZyBhbiBBamF4IGNhbGxcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHJldHVybnMge2Jvb2xlYW59IEJsb2NrIHRoZSB0YWJsZSBkcmF3aW5nIG9yIG5vdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5BamF4VXBkYXRlKCBzZXR0aW5ncyApXG5cdHtcblx0XHRpZiAoIHNldHRpbmdzLmJBamF4RGF0YUdldCApIHtcblx0XHRcdHNldHRpbmdzLmlEcmF3Kys7XG5cdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIHRydWUgKTtcblx0XG5cdFx0XHRfZm5CdWlsZEFqYXgoXG5cdFx0XHRcdHNldHRpbmdzLFxuXHRcdFx0XHRfZm5BamF4UGFyYW1ldGVycyggc2V0dGluZ3MgKSxcblx0XHRcdFx0ZnVuY3Rpb24oanNvbikge1xuXHRcdFx0XHRcdF9mbkFqYXhVcGRhdGVEcmF3KCBzZXR0aW5ncywganNvbiApO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogQnVpbGQgdXAgdGhlIHBhcmFtZXRlcnMgaW4gYW4gb2JqZWN0IG5lZWRlZCBmb3IgYSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXG5cdCAqIHJlcXVlc3QuIE5vdGUgdGhhdCB0aGlzIGlzIGJhc2ljYWxseSBkb25lIHR3aWNlLCBpcyBkaWZmZXJlbnQgd2F5cyAtIGEgbW9kZXJuXG5cdCAqIG1ldGhvZCB3aGljaCBpcyB1c2VkIGJ5IGRlZmF1bHQgaW4gRGF0YVRhYmxlcyAxLjEwIHdoaWNoIHVzZXMgb2JqZWN0cyBhbmRcblx0ICogYXJyYXlzLCBvciB0aGUgMS45LSBtZXRob2Qgd2l0aCBpcyBuYW1lIC8gdmFsdWUgcGFpcnMuIDEuOSBtZXRob2QgaXMgdXNlZCBpZlxuXHQgKiB0aGUgc0FqYXhTb3VyY2Ugb3B0aW9uIGlzIHVzZWQgaW4gdGhlIGluaXRpYWxpc2F0aW9uLCBvciB0aGUgbGVnYWN5QWpheFxuXHQgKiBvcHRpb24gaXMgc2V0LlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHJldHVybnMge2Jvb2x9IGJsb2NrIHRoZSB0YWJsZSBkcmF3aW5nIG9yIG5vdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5BamF4UGFyYW1ldGVycyggc2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLFxuXHRcdFx0Y29sdW1uQ291bnQgPSBjb2x1bW5zLmxlbmd0aCxcblx0XHRcdGZlYXR1cmVzID0gc2V0dGluZ3Mub0ZlYXR1cmVzLFxuXHRcdFx0cHJlU2VhcmNoID0gc2V0dGluZ3Mub1ByZXZpb3VzU2VhcmNoLFxuXHRcdFx0cHJlQ29sU2VhcmNoID0gc2V0dGluZ3MuYW9QcmVTZWFyY2hDb2xzLFxuXHRcdFx0aSwgZGF0YSA9IFtdLCBkYXRhUHJvcCwgY29sdW1uLCBjb2x1bW5TZWFyY2gsXG5cdFx0XHRzb3J0ID0gX2ZuU29ydEZsYXR0ZW4oIHNldHRpbmdzICksXG5cdFx0XHRkaXNwbGF5U3RhcnQgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcblx0XHRcdGRpc3BsYXlMZW5ndGggPSBmZWF0dXJlcy5iUGFnaW5hdGUgIT09IGZhbHNlID9cblx0XHRcdFx0c2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoIDpcblx0XHRcdFx0LTE7XG5cdFxuXHRcdHZhciBwYXJhbSA9IGZ1bmN0aW9uICggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRkYXRhLnB1c2goIHsgJ25hbWUnOiBuYW1lLCAndmFsdWUnOiB2YWx1ZSB9ICk7XG5cdFx0fTtcblx0XG5cdFx0Ly8gRGF0YVRhYmxlcyAxLjktIGNvbXBhdGlibGUgbWV0aG9kXG5cdFx0cGFyYW0oICdzRWNobycsICAgICAgICAgIHNldHRpbmdzLmlEcmF3ICk7XG5cdFx0cGFyYW0oICdpQ29sdW1ucycsICAgICAgIGNvbHVtbkNvdW50ICk7XG5cdFx0cGFyYW0oICdzQ29sdW1ucycsICAgICAgIF9wbHVjayggY29sdW1ucywgJ3NOYW1lJyApLmpvaW4oJywnKSApO1xuXHRcdHBhcmFtKCAnaURpc3BsYXlTdGFydCcsICBkaXNwbGF5U3RhcnQgKTtcblx0XHRwYXJhbSggJ2lEaXNwbGF5TGVuZ3RoJywgZGlzcGxheUxlbmd0aCApO1xuXHRcblx0XHQvLyBEYXRhVGFibGVzIDEuMTArIG1ldGhvZFxuXHRcdHZhciBkID0ge1xuXHRcdFx0ZHJhdzogICAgc2V0dGluZ3MuaURyYXcsXG5cdFx0XHRjb2x1bW5zOiBbXSxcblx0XHRcdG9yZGVyOiAgIFtdLFxuXHRcdFx0c3RhcnQ6ICAgZGlzcGxheVN0YXJ0LFxuXHRcdFx0bGVuZ3RoOiAgZGlzcGxheUxlbmd0aCxcblx0XHRcdHNlYXJjaDogIHtcblx0XHRcdFx0dmFsdWU6IHByZVNlYXJjaC5zU2VhcmNoLFxuXHRcdFx0XHRyZWdleDogcHJlU2VhcmNoLmJSZWdleFxuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdGZvciAoIGk9MCA7IGk8Y29sdW1uQ291bnQgOyBpKysgKSB7XG5cdFx0XHRjb2x1bW4gPSBjb2x1bW5zW2ldO1xuXHRcdFx0Y29sdW1uU2VhcmNoID0gcHJlQ29sU2VhcmNoW2ldO1xuXHRcdFx0ZGF0YVByb3AgPSB0eXBlb2YgY29sdW1uLm1EYXRhPT1cImZ1bmN0aW9uXCIgPyAnZnVuY3Rpb24nIDogY29sdW1uLm1EYXRhIDtcblx0XG5cdFx0XHRkLmNvbHVtbnMucHVzaCgge1xuXHRcdFx0XHRkYXRhOiAgICAgICBkYXRhUHJvcCxcblx0XHRcdFx0bmFtZTogICAgICAgY29sdW1uLnNOYW1lLFxuXHRcdFx0XHRzZWFyY2hhYmxlOiBjb2x1bW4uYlNlYXJjaGFibGUsXG5cdFx0XHRcdG9yZGVyYWJsZTogIGNvbHVtbi5iU29ydGFibGUsXG5cdFx0XHRcdHNlYXJjaDogICAgIHtcblx0XHRcdFx0XHR2YWx1ZTogY29sdW1uU2VhcmNoLnNTZWFyY2gsXG5cdFx0XHRcdFx0cmVnZXg6IGNvbHVtblNlYXJjaC5iUmVnZXhcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcblx0XHRcdHBhcmFtKCBcIm1EYXRhUHJvcF9cIitpLCBkYXRhUHJvcCApO1xuXHRcblx0XHRcdGlmICggZmVhdHVyZXMuYkZpbHRlciApIHtcblx0XHRcdFx0cGFyYW0oICdzU2VhcmNoXycraSwgICAgIGNvbHVtblNlYXJjaC5zU2VhcmNoICk7XG5cdFx0XHRcdHBhcmFtKCAnYlJlZ2V4XycraSwgICAgICBjb2x1bW5TZWFyY2guYlJlZ2V4ICk7XG5cdFx0XHRcdHBhcmFtKCAnYlNlYXJjaGFibGVfJytpLCBjb2x1bW4uYlNlYXJjaGFibGUgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGZlYXR1cmVzLmJTb3J0ICkge1xuXHRcdFx0XHRwYXJhbSggJ2JTb3J0YWJsZV8nK2ksIGNvbHVtbi5iU29ydGFibGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGlmICggZmVhdHVyZXMuYkZpbHRlciApIHtcblx0XHRcdHBhcmFtKCAnc1NlYXJjaCcsIHByZVNlYXJjaC5zU2VhcmNoICk7XG5cdFx0XHRwYXJhbSggJ2JSZWdleCcsIHByZVNlYXJjaC5iUmVnZXggKTtcblx0XHR9XG5cdFxuXHRcdGlmICggZmVhdHVyZXMuYlNvcnQgKSB7XG5cdFx0XHQkLmVhY2goIHNvcnQsIGZ1bmN0aW9uICggaSwgdmFsICkge1xuXHRcdFx0XHRkLm9yZGVyLnB1c2goIHsgY29sdW1uOiB2YWwuY29sLCBkaXI6IHZhbC5kaXIgfSApO1xuXHRcblx0XHRcdFx0cGFyYW0oICdpU29ydENvbF8nK2ksIHZhbC5jb2wgKTtcblx0XHRcdFx0cGFyYW0oICdzU29ydERpcl8nK2ksIHZhbC5kaXIgKTtcblx0XHRcdH0gKTtcblx0XG5cdFx0XHRwYXJhbSggJ2lTb3J0aW5nQ29scycsIHNvcnQubGVuZ3RoICk7XG5cdFx0fVxuXHRcblx0XHQvLyBJZiB0aGUgbGVnYWN5LmFqYXggcGFyYW1ldGVyIGlzIG51bGwsIHRoZW4gd2UgYXV0b21hdGljYWxseSBkZWNpZGUgd2hpY2hcblx0XHQvLyBmb3JtIHRvIHVzZSwgYmFzZWQgb24gc0FqYXhTb3VyY2Vcblx0XHR2YXIgbGVnYWN5ID0gRGF0YVRhYmxlLmV4dC5sZWdhY3kuYWpheDtcblx0XHRpZiAoIGxlZ2FjeSA9PT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzZXR0aW5ncy5zQWpheFNvdXJjZSA/IGRhdGEgOiBkO1xuXHRcdH1cblx0XG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBsZWdhY3kgaGFzIGJlZW4gc3BlY2lmaWVkIHRoZW4gd2UgdXNlIHRoYXQgdG8gZGVjaWRlIG9uIHRoZVxuXHRcdC8vIGZvcm1cblx0XHRyZXR1cm4gbGVnYWN5ID8gZGF0YSA6IGQ7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogRGF0YSB0aGUgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgKG51a2luZyB0aGUgb2xkKSBhbmQgcmVkcmF3IHRoZSB0YWJsZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IGpzb24ganNvbiBkYXRhIHJldHVybiBmcm9tIHRoZSBzZXJ2ZXIuXG5cdCAqICBAcGFyYW0ge3N0cmluZ30ganNvbi5zRWNobyBUcmFja2luZyBmbGFnIGZvciBEYXRhVGFibGVzIHRvIG1hdGNoIHJlcXVlc3RzXG5cdCAqICBAcGFyYW0ge2ludH0ganNvbi5pVG90YWxSZWNvcmRzIE51bWJlciBvZiByZWNvcmRzIGluIHRoZSBkYXRhIHNldCwgbm90IGFjY291bnRpbmcgZm9yIGZpbHRlcmluZ1xuXHQgKiAgQHBhcmFtIHtpbnR9IGpzb24uaVRvdGFsRGlzcGxheVJlY29yZHMgTnVtYmVyIG9mIHJlY29yZHMgaW4gdGhlIGRhdGEgc2V0LCBhY2NvdW50aW5nIGZvciBmaWx0ZXJpbmdcblx0ICogIEBwYXJhbSB7YXJyYXl9IGpzb24uYWFEYXRhIFRoZSBkYXRhIHRvIGRpc3BsYXkgb24gdGhpcyBwYWdlXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gW2pzb24uc0NvbHVtbnNdIENvbHVtbiBvcmRlcmluZyAoc05hbWUsIGNvbW1hIHNlcGFyYXRlZClcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQWpheFVwZGF0ZURyYXcgKCBzZXR0aW5ncywganNvbiApXG5cdHtcblx0XHQvLyB2MS4xMCB1c2VzIGNhbWVsQ2FzZSB2YXJpYWJsZXMsIHdoaWxlIDEuOSB1c2VzIEh1bmdhcmlhbiBub3RhdGlvbi5cblx0XHQvLyBTdXBwb3J0IGJvdGhcblx0XHR2YXIgY29tcGF0ID0gZnVuY3Rpb24gKCBvbGQsIG1vZGVybiApIHtcblx0XHRcdHJldHVybiBqc29uW29sZF0gIT09IHVuZGVmaW5lZCA/IGpzb25bb2xkXSA6IGpzb25bbW9kZXJuXTtcblx0XHR9O1xuXHRcblx0XHR2YXIgZGF0YSA9IF9mbkFqYXhEYXRhU3JjKCBzZXR0aW5ncywganNvbiApO1xuXHRcdHZhciBkcmF3ICAgICAgICAgICAgPSBjb21wYXQoICdzRWNobycsICAgICAgICAgICAgICAgICdkcmF3JyApO1xuXHRcdHZhciByZWNvcmRzVG90YWwgICAgPSBjb21wYXQoICdpVG90YWxSZWNvcmRzJywgICAgICAgICdyZWNvcmRzVG90YWwnICk7XG5cdFx0dmFyIHJlY29yZHNGaWx0ZXJlZCA9IGNvbXBhdCggJ2lUb3RhbERpc3BsYXlSZWNvcmRzJywgJ3JlY29yZHNGaWx0ZXJlZCcgKTtcblx0XG5cdFx0aWYgKCBkcmF3ICkge1xuXHRcdFx0Ly8gUHJvdGVjdCBhZ2FpbnN0IG91dCBvZiBzZXF1ZW5jZSByZXR1cm5zXG5cdFx0XHRpZiAoIGRyYXcqMSA8IHNldHRpbmdzLmlEcmF3ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRzZXR0aW5ncy5pRHJhdyA9IGRyYXcgKiAxO1xuXHRcdH1cblx0XG5cdFx0X2ZuQ2xlYXJUYWJsZSggc2V0dGluZ3MgKTtcblx0XHRzZXR0aW5ncy5faVJlY29yZHNUb3RhbCAgID0gcGFyc2VJbnQocmVjb3Jkc1RvdGFsLCAxMCk7XG5cdFx0c2V0dGluZ3MuX2lSZWNvcmRzRGlzcGxheSA9IHBhcnNlSW50KHJlY29yZHNGaWx0ZXJlZCwgMTApO1xuXHRcblx0XHRmb3IgKCB2YXIgaT0wLCBpZW49ZGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdF9mbkFkZERhdGEoIHNldHRpbmdzLCBkYXRhW2ldICk7XG5cdFx0fVxuXHRcdHNldHRpbmdzLmFpRGlzcGxheSA9IHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xuXHRcblx0XHRzZXR0aW5ncy5iQWpheERhdGFHZXQgPSBmYWxzZTtcblx0XHRfZm5EcmF3KCBzZXR0aW5ncyApO1xuXHRcblx0XHRpZiAoICEgc2V0dGluZ3MuX2JJbml0Q29tcGxldGUgKSB7XG5cdFx0XHRfZm5Jbml0Q29tcGxldGUoIHNldHRpbmdzLCBqc29uICk7XG5cdFx0fVxuXHRcblx0XHRzZXR0aW5ncy5iQWpheERhdGFHZXQgPSB0cnVlO1xuXHRcdF9mblByb2Nlc3NpbmdEaXNwbGF5KCBzZXR0aW5ncywgZmFsc2UgKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBHZXQgdGhlIGRhdGEgZnJvbSB0aGUgSlNPTiBkYXRhIHNvdXJjZSB0byB1c2UgZm9yIGRyYXdpbmcgYSB0YWJsZS4gVXNpbmdcblx0ICogYF9mbkdldE9iamVjdERhdGFGbmAgYWxsb3dzIHRoZSBkYXRhIHRvIGJlIHNvdXJjZWQgZnJvbSBhIHByb3BlcnR5IG9mIHRoZVxuXHQgKiBzb3VyY2Ugb2JqZWN0LCBvciBmcm9tIGEgcHJvY2Vzc2luZyBmdW5jdGlvbi5cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSAge29iamVjdH0ganNvbiBEYXRhIHNvdXJjZSBvYmplY3QgLyBhcnJheSBmcm9tIHRoZSBzZXJ2ZXJcblx0ICogIEByZXR1cm4ge2FycmF5fSBBcnJheSBvZiBkYXRhIHRvIHVzZVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQWpheERhdGFTcmMgKCBvU2V0dGluZ3MsIGpzb24gKVxuXHR7XG5cdFx0dmFyIGRhdGFTcmMgPSAkLmlzUGxhaW5PYmplY3QoIG9TZXR0aW5ncy5hamF4ICkgJiYgb1NldHRpbmdzLmFqYXguZGF0YVNyYyAhPT0gdW5kZWZpbmVkID9cblx0XHRcdG9TZXR0aW5ncy5hamF4LmRhdGFTcmMgOlxuXHRcdFx0b1NldHRpbmdzLnNBamF4RGF0YVByb3A7IC8vIENvbXBhdGliaWxpdHkgd2l0aCAxLjktLlxuXHRcblx0XHQvLyBDb21wYXRpYmlsaXR5IHdpdGggMS45LS4gSW4gb3JkZXIgdG8gcmVhZCBmcm9tIGFhRGF0YSwgY2hlY2sgaWYgdGhlXG5cdFx0Ly8gZGVmYXVsdCBoYXMgYmVlbiBjaGFuZ2VkLCBpZiBub3QsIGNoZWNrIGZvciBhYURhdGFcblx0XHRpZiAoIGRhdGFTcmMgPT09ICdkYXRhJyApIHtcblx0XHRcdHJldHVybiBqc29uLmFhRGF0YSB8fCBqc29uW2RhdGFTcmNdO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGRhdGFTcmMgIT09IFwiXCIgP1xuXHRcdFx0X2ZuR2V0T2JqZWN0RGF0YUZuKCBkYXRhU3JjICkoIGpzb24gKSA6XG5cdFx0XHRqc29uO1xuXHR9XG5cdFxuXHQvKipcblx0ICogR2VuZXJhdGUgdGhlIG5vZGUgcmVxdWlyZWQgZm9yIGZpbHRlcmluZyB0ZXh0XG5cdCAqICBAcmV0dXJucyB7bm9kZX0gRmlsdGVyIGNvbnRyb2wgZWxlbWVudFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5GZWF0dXJlSHRtbEZpbHRlciAoIHNldHRpbmdzIClcblx0e1xuXHRcdHZhciBjbGFzc2VzID0gc2V0dGluZ3Mub0NsYXNzZXM7XG5cdFx0dmFyIHRhYmxlSWQgPSBzZXR0aW5ncy5zVGFibGVJZDtcblx0XHR2YXIgbGFuZ3VhZ2UgPSBzZXR0aW5ncy5vTGFuZ3VhZ2U7XG5cdFx0dmFyIHByZXZpb3VzU2VhcmNoID0gc2V0dGluZ3Mub1ByZXZpb3VzU2VhcmNoO1xuXHRcdHZhciBmZWF0dXJlcyA9IHNldHRpbmdzLmFhbkZlYXR1cmVzO1xuXHRcdHZhciBpbnB1dCA9ICc8aW5wdXQgdHlwZT1cInNlYXJjaFwiIGNsYXNzPVwiJytjbGFzc2VzLnNGaWx0ZXJJbnB1dCsnXCIvPic7XG5cdFxuXHRcdHZhciBzdHIgPSBsYW5ndWFnZS5zU2VhcmNoO1xuXHRcdHN0ciA9IHN0ci5tYXRjaCgvX0lOUFVUXy8pID9cblx0XHRcdHN0ci5yZXBsYWNlKCdfSU5QVVRfJywgaW5wdXQpIDpcblx0XHRcdHN0citpbnB1dDtcblx0XG5cdFx0dmFyIGZpbHRlciA9ICQoJzxkaXYvPicsIHtcblx0XHRcdFx0J2lkJzogISBmZWF0dXJlcy5mID8gdGFibGVJZCsnX2ZpbHRlcicgOiBudWxsLFxuXHRcdFx0XHQnY2xhc3MnOiBjbGFzc2VzLnNGaWx0ZXJcblx0XHRcdH0gKVxuXHRcdFx0LmFwcGVuZCggJCgnPGxhYmVsLz4nICkuYXBwZW5kKCBzdHIgKSApO1xuXHRcblx0XHR2YXIgc2VhcmNoRm4gPSBmdW5jdGlvbigpIHtcblx0XHRcdC8qIFVwZGF0ZSBhbGwgb3RoZXIgZmlsdGVyIGlucHV0IGVsZW1lbnRzIGZvciB0aGUgbmV3IGRpc3BsYXkgKi9cblx0XHRcdHZhciBuID0gZmVhdHVyZXMuZjtcblx0XHRcdHZhciB2YWwgPSAhdGhpcy52YWx1ZSA/IFwiXCIgOiB0aGlzLnZhbHVlOyAvLyBtZW50YWwgSUU4IGZpeCA6LShcblx0XG5cdFx0XHQvKiBOb3cgZG8gdGhlIGZpbHRlciAqL1xuXHRcdFx0aWYgKCB2YWwgIT0gcHJldmlvdXNTZWFyY2guc1NlYXJjaCApIHtcblx0XHRcdFx0X2ZuRmlsdGVyQ29tcGxldGUoIHNldHRpbmdzLCB7XG5cdFx0XHRcdFx0XCJzU2VhcmNoXCI6IHZhbCxcblx0XHRcdFx0XHRcImJSZWdleFwiOiBwcmV2aW91c1NlYXJjaC5iUmVnZXgsXG5cdFx0XHRcdFx0XCJiU21hcnRcIjogcHJldmlvdXNTZWFyY2guYlNtYXJ0ICxcblx0XHRcdFx0XHRcImJDYXNlSW5zZW5zaXRpdmVcIjogcHJldmlvdXNTZWFyY2guYkNhc2VJbnNlbnNpdGl2ZVxuXHRcdFx0XHR9ICk7XG5cdFxuXHRcdFx0XHQvLyBOZWVkIHRvIHJlZHJhdywgd2l0aG91dCByZXNvcnRpbmdcblx0XHRcdFx0c2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgPSAwO1xuXHRcdFx0XHRfZm5EcmF3KCBzZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdHZhciBzZWFyY2hEZWxheSA9IHNldHRpbmdzLnNlYXJjaERlbGF5ICE9PSBudWxsID9cblx0XHRcdHNldHRpbmdzLnNlYXJjaERlbGF5IDpcblx0XHRcdF9mbkRhdGFTb3VyY2UoIHNldHRpbmdzICkgPT09ICdzc3AnID9cblx0XHRcdFx0NDAwIDpcblx0XHRcdFx0MDtcblx0XG5cdFx0dmFyIGpxRmlsdGVyID0gJCgnaW5wdXQnLCBmaWx0ZXIpXG5cdFx0XHQudmFsKCBwcmV2aW91c1NlYXJjaC5zU2VhcmNoIClcblx0XHRcdC5hdHRyKCAncGxhY2Vob2xkZXInLCBsYW5ndWFnZS5zU2VhcmNoUGxhY2Vob2xkZXIgKVxuXHRcdFx0LmJpbmQoXG5cdFx0XHRcdCdrZXl1cC5EVCBzZWFyY2guRFQgaW5wdXQuRFQgcGFzdGUuRFQgY3V0LkRUJyxcblx0XHRcdFx0c2VhcmNoRGVsYXkgP1xuXHRcdFx0XHRcdF9mblRocm90dGxlKCBzZWFyY2hGbiwgc2VhcmNoRGVsYXkgKSA6XG5cdFx0XHRcdFx0c2VhcmNoRm5cblx0XHRcdClcblx0XHRcdC5iaW5kKCAna2V5cHJlc3MuRFQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdC8qIFByZXZlbnQgZm9ybSBzdWJtaXNzaW9uICovXG5cdFx0XHRcdGlmICggZS5rZXlDb2RlID09IDEzICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApXG5cdFx0XHQuYXR0cignYXJpYS1jb250cm9scycsIHRhYmxlSWQpO1xuXHRcblx0XHQvLyBVcGRhdGUgdGhlIGlucHV0IGVsZW1lbnRzIHdoZW5ldmVyIHRoZSB0YWJsZSBpcyBmaWx0ZXJlZFxuXHRcdCQoc2V0dGluZ3MublRhYmxlKS5vbiggJ3NlYXJjaC5kdC5EVCcsIGZ1bmN0aW9uICggZXYsIHMgKSB7XG5cdFx0XHRpZiAoIHNldHRpbmdzID09PSBzICkge1xuXHRcdFx0XHQvLyBJRTkgdGhyb3dzIGFuICd1bmtub3duIGVycm9yJyBpZiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlzIHVzZWRcblx0XHRcdFx0Ly8gaW5zaWRlIGFuIGlmcmFtZSBvciBmcmFtZS4uLlxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmICgganFGaWx0ZXJbMF0gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRqcUZpbHRlci52YWwoIHByZXZpb3VzU2VhcmNoLnNTZWFyY2ggKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2F0Y2ggKCBlICkge31cblx0XHRcdH1cblx0XHR9ICk7XG5cdFxuXHRcdHJldHVybiBmaWx0ZXJbMF07XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogRmlsdGVyIHRoZSB0YWJsZSB1c2luZyBib3RoIHRoZSBnbG9iYWwgZmlsdGVyIGFuZCBjb2x1bW4gYmFzZWQgZmlsdGVyaW5nXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NlYXJjaCBzZWFyY2ggaW5mb3JtYXRpb25cblx0ICogIEBwYXJhbSB7aW50fSBbaUZvcmNlXSBmb3JjZSBhIHJlc2VhcmNoIG9mIHRoZSBtYXN0ZXIgYXJyYXkgKDEpIG9yIG5vdCAodW5kZWZpbmVkIG9yIDApXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkZpbHRlckNvbXBsZXRlICggb1NldHRpbmdzLCBvSW5wdXQsIGlGb3JjZSApXG5cdHtcblx0XHR2YXIgb1ByZXZTZWFyY2ggPSBvU2V0dGluZ3Mub1ByZXZpb3VzU2VhcmNoO1xuXHRcdHZhciBhb1ByZXZTZWFyY2ggPSBvU2V0dGluZ3MuYW9QcmVTZWFyY2hDb2xzO1xuXHRcdHZhciBmblNhdmVGaWx0ZXIgPSBmdW5jdGlvbiAoIG9GaWx0ZXIgKSB7XG5cdFx0XHQvKiBTYXZlIHRoZSBmaWx0ZXJpbmcgdmFsdWVzICovXG5cdFx0XHRvUHJldlNlYXJjaC5zU2VhcmNoID0gb0ZpbHRlci5zU2VhcmNoO1xuXHRcdFx0b1ByZXZTZWFyY2guYlJlZ2V4ID0gb0ZpbHRlci5iUmVnZXg7XG5cdFx0XHRvUHJldlNlYXJjaC5iU21hcnQgPSBvRmlsdGVyLmJTbWFydDtcblx0XHRcdG9QcmV2U2VhcmNoLmJDYXNlSW5zZW5zaXRpdmUgPSBvRmlsdGVyLmJDYXNlSW5zZW5zaXRpdmU7XG5cdFx0fTtcblx0XHR2YXIgZm5SZWdleCA9IGZ1bmN0aW9uICggbyApIHtcblx0XHRcdC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGJFc2NhcGVSZWdleCBvcHRpb25cblx0XHRcdHJldHVybiBvLmJFc2NhcGVSZWdleCAhPT0gdW5kZWZpbmVkID8gIW8uYkVzY2FwZVJlZ2V4IDogby5iUmVnZXg7XG5cdFx0fTtcblx0XG5cdFx0Ly8gUmVzb2x2ZSBhbnkgY29sdW1uIHR5cGVzIHRoYXQgYXJlIHVua25vd24gZHVlIHRvIGFkZGl0aW9uIG9yIGludmFsaWRhdGlvblxuXHRcdC8vIEB0b2RvIEFzIHBlciBzb3J0IC0gY2FuIHRoaXMgYmUgbW92ZWQgaW50byBhbiBldmVudCBoYW5kbGVyP1xuXHRcdF9mbkNvbHVtblR5cGVzKCBvU2V0dGluZ3MgKTtcblx0XG5cdFx0LyogSW4gc2VydmVyLXNpZGUgcHJvY2Vzc2luZyBhbGwgZmlsdGVyaW5nIGlzIGRvbmUgYnkgdGhlIHNlcnZlciwgc28gbm8gcG9pbnQgaGFuZ2luZyBhcm91bmQgaGVyZSAqL1xuXHRcdGlmICggX2ZuRGF0YVNvdXJjZSggb1NldHRpbmdzICkgIT0gJ3NzcCcgKVxuXHRcdHtcblx0XHRcdC8qIEdsb2JhbCBmaWx0ZXIgKi9cblx0XHRcdF9mbkZpbHRlciggb1NldHRpbmdzLCBvSW5wdXQuc1NlYXJjaCwgaUZvcmNlLCBmblJlZ2V4KG9JbnB1dCksIG9JbnB1dC5iU21hcnQsIG9JbnB1dC5iQ2FzZUluc2Vuc2l0aXZlICk7XG5cdFx0XHRmblNhdmVGaWx0ZXIoIG9JbnB1dCApO1xuXHRcblx0XHRcdC8qIE5vdyBkbyB0aGUgaW5kaXZpZHVhbCBjb2x1bW4gZmlsdGVyICovXG5cdFx0XHRmb3IgKCB2YXIgaT0wIDsgaTxhb1ByZXZTZWFyY2gubGVuZ3RoIDsgaSsrIClcblx0XHRcdHtcblx0XHRcdFx0X2ZuRmlsdGVyQ29sdW1uKCBvU2V0dGluZ3MsIGFvUHJldlNlYXJjaFtpXS5zU2VhcmNoLCBpLCBmblJlZ2V4KGFvUHJldlNlYXJjaFtpXSksXG5cdFx0XHRcdFx0YW9QcmV2U2VhcmNoW2ldLmJTbWFydCwgYW9QcmV2U2VhcmNoW2ldLmJDYXNlSW5zZW5zaXRpdmUgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvKiBDdXN0b20gZmlsdGVyaW5nICovXG5cdFx0XHRfZm5GaWx0ZXJDdXN0b20oIG9TZXR0aW5ncyApO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0Zm5TYXZlRmlsdGVyKCBvSW5wdXQgKTtcblx0XHR9XG5cdFxuXHRcdC8qIFRlbGwgdGhlIGRyYXcgZnVuY3Rpb24gd2UgaGF2ZSBiZWVuIGZpbHRlcmluZyAqL1xuXHRcdG9TZXR0aW5ncy5iRmlsdGVyZWQgPSB0cnVlO1xuXHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCBudWxsLCAnc2VhcmNoJywgW29TZXR0aW5nc10gKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBcHBseSBjdXN0b20gZmlsdGVyaW5nIGZ1bmN0aW9uc1xuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5GaWx0ZXJDdXN0b20oIHNldHRpbmdzIClcblx0e1xuXHRcdHZhciBmaWx0ZXJzID0gRGF0YVRhYmxlLmV4dC5zZWFyY2g7XG5cdFx0dmFyIGRpc3BsYXlSb3dzID0gc2V0dGluZ3MuYWlEaXNwbGF5O1xuXHRcdHZhciByb3csIHJvd0lkeDtcblx0XG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPWZpbHRlcnMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHR2YXIgcm93cyA9IFtdO1xuXHRcblx0XHRcdC8vIExvb3Agb3ZlciBlYWNoIHJvdyBhbmQgc2VlIGlmIGl0IHNob3VsZCBiZSBpbmNsdWRlZFxuXHRcdFx0Zm9yICggdmFyIGo9MCwgamVuPWRpc3BsYXlSb3dzLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xuXHRcdFx0XHRyb3dJZHggPSBkaXNwbGF5Um93c1sgaiBdO1xuXHRcdFx0XHRyb3cgPSBzZXR0aW5ncy5hb0RhdGFbIHJvd0lkeCBdO1xuXHRcblx0XHRcdFx0aWYgKCBmaWx0ZXJzW2ldKCBzZXR0aW5ncywgcm93Ll9hRmlsdGVyRGF0YSwgcm93SWR4LCByb3cuX2FEYXRhLCBqICkgKSB7XG5cdFx0XHRcdFx0cm93cy5wdXNoKCByb3dJZHggKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNvIHRoZSBhcnJheSByZWZlcmVuY2UgZG9lc24ndCBicmVhayBzZXQgdGhlIHJlc3VsdHMgaW50byB0aGVcblx0XHRcdC8vIGV4aXN0aW5nIGFycmF5XG5cdFx0XHRkaXNwbGF5Um93cy5sZW5ndGggPSAwO1xuXHRcdFx0JC5tZXJnZSggZGlzcGxheVJvd3MsIHJvd3MgKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogRmlsdGVyIHRoZSB0YWJsZSBvbiBhIHBlci1jb2x1bW4gYmFzaXNcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBzSW5wdXQgc3RyaW5nIHRvIGZpbHRlciBvblxuXHQgKiAgQHBhcmFtIHtpbnR9IGlDb2x1bW4gY29sdW1uIHRvIGZpbHRlclxuXHQgKiAgQHBhcmFtIHtib29sfSBiUmVnZXggdHJlYXQgc2VhcmNoIHN0cmluZyBhcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvciBub3Rcblx0ICogIEBwYXJhbSB7Ym9vbH0gYlNtYXJ0IHVzZSBzbWFydCBmaWx0ZXJpbmcgb3Igbm90XG5cdCAqICBAcGFyYW0ge2Jvb2x9IGJDYXNlSW5zZW5zaXRpdmUgRG8gY2FzZSBpbnNlbnN0aXZlIG1hdGNoaW5nIG9yIG5vdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5GaWx0ZXJDb2x1bW4gKCBzZXR0aW5ncywgc2VhcmNoU3RyLCBjb2xJZHgsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2Vuc2l0aXZlIClcblx0e1xuXHRcdGlmICggc2VhcmNoU3RyID09PSAnJyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdHZhciBkYXRhO1xuXHRcdHZhciBkaXNwbGF5ID0gc2V0dGluZ3MuYWlEaXNwbGF5O1xuXHRcdHZhciBycFNlYXJjaCA9IF9mbkZpbHRlckNyZWF0ZVNlYXJjaCggc2VhcmNoU3RyLCByZWdleCwgc21hcnQsIGNhc2VJbnNlbnNpdGl2ZSApO1xuXHRcblx0XHRmb3IgKCB2YXIgaT1kaXNwbGF5Lmxlbmd0aC0xIDsgaT49MCA7IGktLSApIHtcblx0XHRcdGRhdGEgPSBzZXR0aW5ncy5hb0RhdGFbIGRpc3BsYXlbaV0gXS5fYUZpbHRlckRhdGFbIGNvbElkeCBdO1xuXHRcblx0XHRcdGlmICggISBycFNlYXJjaC50ZXN0KCBkYXRhICkgKSB7XG5cdFx0XHRcdGRpc3BsYXkuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEZpbHRlciB0aGUgZGF0YSB0YWJsZSBiYXNlZCBvbiB1c2VyIGlucHV0IGFuZCBkcmF3IHRoZSB0YWJsZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge3N0cmluZ30gaW5wdXQgc3RyaW5nIHRvIGZpbHRlciBvblxuXHQgKiAgQHBhcmFtIHtpbnR9IGZvcmNlIG9wdGlvbmFsIC0gZm9yY2UgYSByZXNlYXJjaCBvZiB0aGUgbWFzdGVyIGFycmF5ICgxKSBvciBub3QgKHVuZGVmaW5lZCBvciAwKVxuXHQgKiAgQHBhcmFtIHtib29sfSByZWdleCB0cmVhdCBhcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvciBub3Rcblx0ICogIEBwYXJhbSB7Ym9vbH0gc21hcnQgcGVyZm9ybSBzbWFydCBmaWx0ZXJpbmcgb3Igbm90XG5cdCAqICBAcGFyYW0ge2Jvb2x9IGNhc2VJbnNlbnNpdGl2ZSBEbyBjYXNlIGluc2Vuc3RpdmUgbWF0Y2hpbmcgb3Igbm90XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkZpbHRlciggc2V0dGluZ3MsIGlucHV0LCBmb3JjZSwgcmVnZXgsIHNtYXJ0LCBjYXNlSW5zZW5zaXRpdmUgKVxuXHR7XG5cdFx0dmFyIHJwU2VhcmNoID0gX2ZuRmlsdGVyQ3JlYXRlU2VhcmNoKCBpbnB1dCwgcmVnZXgsIHNtYXJ0LCBjYXNlSW5zZW5zaXRpdmUgKTtcblx0XHR2YXIgcHJldlNlYXJjaCA9IHNldHRpbmdzLm9QcmV2aW91c1NlYXJjaC5zU2VhcmNoO1xuXHRcdHZhciBkaXNwbGF5TWFzdGVyID0gc2V0dGluZ3MuYWlEaXNwbGF5TWFzdGVyO1xuXHRcdHZhciBkaXNwbGF5LCBpbnZhbGlkYXRlZCwgaTtcblx0XG5cdFx0Ly8gTmVlZCB0byB0YWtlIGFjY291bnQgb2YgY3VzdG9tIGZpbHRlcmluZyBmdW5jdGlvbnMgLSBhbHdheXMgZmlsdGVyXG5cdFx0aWYgKCBEYXRhVGFibGUuZXh0LnNlYXJjaC5sZW5ndGggIT09IDAgKSB7XG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0fVxuXHRcblx0XHQvLyBDaGVjayBpZiBhbnkgb2YgdGhlIHJvd3Mgd2VyZSBpbnZhbGlkYXRlZFxuXHRcdGludmFsaWRhdGVkID0gX2ZuRmlsdGVyRGF0YSggc2V0dGluZ3MgKTtcblx0XG5cdFx0Ly8gSWYgdGhlIGlucHV0IGlzIGJsYW5rIC0gd2UganVzdCB3YW50IHRoZSBmdWxsIGRhdGEgc2V0XG5cdFx0aWYgKCBpbnB1dC5sZW5ndGggPD0gMCApIHtcblx0XHRcdHNldHRpbmdzLmFpRGlzcGxheSA9IGRpc3BsYXlNYXN0ZXIuc2xpY2UoKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyBOZXcgc2VhcmNoIC0gc3RhcnQgZnJvbSB0aGUgbWFzdGVyIGFycmF5XG5cdFx0XHRpZiAoIGludmFsaWRhdGVkIHx8XG5cdFx0XHRcdCBmb3JjZSB8fFxuXHRcdFx0XHQgcHJldlNlYXJjaC5sZW5ndGggPiBpbnB1dC5sZW5ndGggfHxcblx0XHRcdFx0IGlucHV0LmluZGV4T2YocHJldlNlYXJjaCkgIT09IDAgfHxcblx0XHRcdFx0IHNldHRpbmdzLmJTb3J0ZWQgLy8gT24gcmVzb3J0LCB0aGUgZGlzcGxheSBtYXN0ZXIgbmVlZHMgdG8gYmVcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgLy8gcmUtZmlsdGVyZWQgc2luY2UgaW5kZXhlcyB3aWxsIGhhdmUgY2hhbmdlZFxuXHRcdFx0KSB7XG5cdFx0XHRcdHNldHRpbmdzLmFpRGlzcGxheSA9IGRpc3BsYXlNYXN0ZXIuc2xpY2UoKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTZWFyY2ggdGhlIGRpc3BsYXkgYXJyYXlcblx0XHRcdGRpc3BsYXkgPSBzZXR0aW5ncy5haURpc3BsYXk7XG5cdFxuXHRcdFx0Zm9yICggaT1kaXNwbGF5Lmxlbmd0aC0xIDsgaT49MCA7IGktLSApIHtcblx0XHRcdFx0aWYgKCAhIHJwU2VhcmNoLnRlc3QoIHNldHRpbmdzLmFvRGF0YVsgZGlzcGxheVtpXSBdLl9zRmlsdGVyUm93ICkgKSB7XG5cdFx0XHRcdFx0ZGlzcGxheS5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBCdWlsZCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3Qgc3VpdGFibGUgZm9yIHNlYXJjaGluZyBhIHRhYmxlXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gc1NlYXJjaCBzdHJpbmcgdG8gc2VhcmNoIGZvclxuXHQgKiAgQHBhcmFtIHtib29sfSBiUmVnZXggdHJlYXQgYXMgYSByZWd1bGFyIGV4cHJlc3Npb24gb3Igbm90XG5cdCAqICBAcGFyYW0ge2Jvb2x9IGJTbWFydCBwZXJmb3JtIHNtYXJ0IGZpbHRlcmluZyBvciBub3Rcblx0ICogIEBwYXJhbSB7Ym9vbH0gYkNhc2VJbnNlbnNpdGl2ZSBEbyBjYXNlIGluc2Vuc2l0aXZlIG1hdGNoaW5nIG9yIG5vdFxuXHQgKiAgQHJldHVybnMge1JlZ0V4cH0gY29uc3RydWN0ZWQgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkZpbHRlckNyZWF0ZVNlYXJjaCggc2VhcmNoLCByZWdleCwgc21hcnQsIGNhc2VJbnNlbnNpdGl2ZSApXG5cdHtcblx0XHRzZWFyY2ggPSByZWdleCA/XG5cdFx0XHRzZWFyY2ggOlxuXHRcdFx0X2ZuRXNjYXBlUmVnZXgoIHNlYXJjaCApO1xuXHRcdFxuXHRcdGlmICggc21hcnQgKSB7XG5cdFx0XHQvKiBGb3Igc21hcnQgZmlsdGVyaW5nIHdlIHdhbnQgdG8gYWxsb3cgdGhlIHNlYXJjaCB0byB3b3JrIHJlZ2FyZGxlc3Mgb2Zcblx0XHRcdCAqIHdvcmQgb3JkZXIuIFdlIGFsc28gd2FudCBkb3VibGUgcXVvdGVkIHRleHQgdG8gYmUgcHJlc2VydmVkLCBzbyB3b3JkXG5cdFx0XHQgKiBvcmRlciBpcyBpbXBvcnRhbnQgLSBhIGxhIGdvb2dsZS4gU28gdGhpcyBpcyB3aGF0IHdlIHdhbnQgdG9cblx0XHRcdCAqIGdlbmVyYXRlOlxuXHRcdFx0ICogXG5cdFx0XHQgKiBeKD89Lio/XFxib25lXFxiKSg/PS4qP1xcYnR3byB0aHJlZVxcYikoPz0uKj9cXGJmb3VyXFxiKS4qJFxuXHRcdFx0ICovXG5cdFx0XHR2YXIgYSA9ICQubWFwKCBzZWFyY2gubWF0Y2goIC9cIlteXCJdK1wifFteIF0rL2cgKSB8fCBbJyddLCBmdW5jdGlvbiAoIHdvcmQgKSB7XG5cdFx0XHRcdGlmICggd29yZC5jaGFyQXQoMCkgPT09ICdcIicgKSB7XG5cdFx0XHRcdFx0dmFyIG0gPSB3b3JkLm1hdGNoKCAvXlwiKC4qKVwiJC8gKTtcblx0XHRcdFx0XHR3b3JkID0gbSA/IG1bMV0gOiB3b3JkO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gd29yZC5yZXBsYWNlKCdcIicsICcnKTtcblx0XHRcdH0gKTtcblx0XG5cdFx0XHRzZWFyY2ggPSAnXig/PS4qPycrYS5qb2luKCAnKSg/PS4qPycgKSsnKS4qJCc7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gbmV3IFJlZ0V4cCggc2VhcmNoLCBjYXNlSW5zZW5zaXRpdmUgPyAnaScgOiAnJyApO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEVzY2FwZSBhIHN0cmluZyBzdWNoIHRoYXQgaXQgY2FuIGJlIHVzZWQgaW4gYSByZWd1bGFyIGV4cHJlc3Npb25cblx0ICogIEBwYXJhbSB7c3RyaW5nfSBzVmFsIHN0cmluZyB0byBlc2NhcGVcblx0ICogIEByZXR1cm5zIHtzdHJpbmd9IGVzY2FwZWQgc3RyaW5nXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkVzY2FwZVJlZ2V4ICggc1ZhbCApXG5cdHtcblx0XHRyZXR1cm4gc1ZhbC5yZXBsYWNlKCBfcmVfZXNjYXBlX3JlZ2V4LCAnXFxcXCQxJyApO1xuXHR9XG5cdFxuXHRcblx0XG5cdHZhciBfX2ZpbHRlcl9kaXYgPSAkKCc8ZGl2PicpWzBdO1xuXHR2YXIgX19maWx0ZXJfZGl2X3RleHRDb250ZW50ID0gX19maWx0ZXJfZGl2LnRleHRDb250ZW50ICE9PSB1bmRlZmluZWQ7XG5cdFxuXHQvLyBVcGRhdGUgdGhlIGZpbHRlcmluZyBkYXRhIGZvciBlYWNoIHJvdyBpZiBuZWVkZWQgKGJ5IGludmFsaWRhdGlvbiBvciBmaXJzdCBydW4pXG5cdGZ1bmN0aW9uIF9mbkZpbHRlckRhdGEgKCBzZXR0aW5ncyApXG5cdHtcblx0XHR2YXIgY29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucztcblx0XHR2YXIgY29sdW1uO1xuXHRcdHZhciBpLCBqLCBpZW4sIGplbiwgZmlsdGVyRGF0YSwgY2VsbERhdGEsIHJvdztcblx0XHR2YXIgZm9tYXR0ZXJzID0gRGF0YVRhYmxlLmV4dC50eXBlLnNlYXJjaDtcblx0XHR2YXIgd2FzSW52YWxpZGF0ZWQgPSBmYWxzZTtcblx0XG5cdFx0Zm9yICggaT0wLCBpZW49c2V0dGluZ3MuYW9EYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0cm93ID0gc2V0dGluZ3MuYW9EYXRhW2ldO1xuXHRcblx0XHRcdGlmICggISByb3cuX2FGaWx0ZXJEYXRhICkge1xuXHRcdFx0XHRmaWx0ZXJEYXRhID0gW107XG5cdFxuXHRcdFx0XHRmb3IgKCBqPTAsIGplbj1jb2x1bW5zLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xuXHRcdFx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbal07XG5cdFxuXHRcdFx0XHRcdGlmICggY29sdW1uLmJTZWFyY2hhYmxlICkge1xuXHRcdFx0XHRcdFx0Y2VsbERhdGEgPSBfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIGksIGosICdmaWx0ZXInICk7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCBmb21hdHRlcnNbIGNvbHVtbi5zVHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRjZWxsRGF0YSA9IGZvbWF0dGVyc1sgY29sdW1uLnNUeXBlIF0oIGNlbGxEYXRhICk7XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU2VhcmNoIGluIERhdGFUYWJsZXMgMS4xMCBpcyBzdHJpbmcgYmFzZWQuIEluIDEuMTEgdGhpc1xuXHRcdFx0XHRcdFx0Ly8gc2hvdWxkIGJlIGFsdGVyZWQgdG8gYWxzbyBhbGxvdyBzdHJpY3QgdHlwZSBjaGVja2luZy5cblx0XHRcdFx0XHRcdGlmICggY2VsbERhdGEgPT09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRcdGNlbGxEYXRhID0gJyc7XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgY2VsbERhdGEgIT09ICdzdHJpbmcnICYmIGNlbGxEYXRhLnRvU3RyaW5nICkge1xuXHRcdFx0XHRcdFx0XHRjZWxsRGF0YSA9IGNlbGxEYXRhLnRvU3RyaW5nKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2VsbERhdGEgPSAnJztcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIElmIGl0IGxvb2tzIGxpa2UgdGhlcmUgaXMgYW4gSFRNTCBlbnRpdHkgaW4gdGhlIHN0cmluZyxcblx0XHRcdFx0XHQvLyBhdHRlbXB0IHRvIGRlY29kZSBpdCBzbyBzb3J0aW5nIHdvcmtzIGFzIGV4cGVjdGVkLiBOb3RlIHRoYXRcblx0XHRcdFx0XHQvLyB3ZSBjb3VsZCB1c2UgYSBzaW5nbGUgbGluZSBvZiBqUXVlcnkgdG8gZG8gdGhpcywgYnV0IHRoZSBET01cblx0XHRcdFx0XHQvLyBtZXRob2QgdXNlZCBoZXJlIGlzIG11Y2ggZmFzdGVyIGh0dHA6Ly9qc3BlcmYuY29tL2h0bWwtZGVjb2RlXG5cdFx0XHRcdFx0aWYgKCBjZWxsRGF0YS5pbmRleE9mICYmIGNlbGxEYXRhLmluZGV4T2YoJyYnKSAhPT0gLTEgKSB7XG5cdFx0XHRcdFx0XHRfX2ZpbHRlcl9kaXYuaW5uZXJIVE1MID0gY2VsbERhdGE7XG5cdFx0XHRcdFx0XHRjZWxsRGF0YSA9IF9fZmlsdGVyX2Rpdl90ZXh0Q29udGVudCA/XG5cdFx0XHRcdFx0XHRcdF9fZmlsdGVyX2Rpdi50ZXh0Q29udGVudCA6XG5cdFx0XHRcdFx0XHRcdF9fZmlsdGVyX2Rpdi5pbm5lclRleHQ7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRpZiAoIGNlbGxEYXRhLnJlcGxhY2UgKSB7XG5cdFx0XHRcdFx0XHRjZWxsRGF0YSA9IGNlbGxEYXRhLnJlcGxhY2UoL1tcXHJcXG5dL2csICcnKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdGZpbHRlckRhdGEucHVzaCggY2VsbERhdGEgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cm93Ll9hRmlsdGVyRGF0YSA9IGZpbHRlckRhdGE7XG5cdFx0XHRcdHJvdy5fc0ZpbHRlclJvdyA9IGZpbHRlckRhdGEuam9pbignICAnKTtcblx0XHRcdFx0d2FzSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHdhc0ludmFsaWRhdGVkO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgZnJvbSB0aGUgaW50ZXJuYWwgSHVuZ2FyaWFuIG5vdGF0aW9uIHRvIGNhbWVsQ2FzZSBmb3IgZXh0ZXJuYWxcblx0ICogaW50ZXJhY3Rpb25cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvYmogT2JqZWN0IHRvIGNvbnZlcnRcblx0ICogIEByZXR1cm5zIHtvYmplY3R9IEludmVydGVkIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5TZWFyY2hUb0NhbWVsICggb2JqIClcblx0e1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZWFyY2g6ICAgICAgICAgIG9iai5zU2VhcmNoLFxuXHRcdFx0c21hcnQ6ICAgICAgICAgICBvYmouYlNtYXJ0LFxuXHRcdFx0cmVnZXg6ICAgICAgICAgICBvYmouYlJlZ2V4LFxuXHRcdFx0Y2FzZUluc2Vuc2l0aXZlOiBvYmouYkNhc2VJbnNlbnNpdGl2ZVxuXHRcdH07XG5cdH1cblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgZnJvbSBjYW1lbENhc2Ugbm90YXRpb24gdG8gdGhlIGludGVybmFsIEh1bmdhcmlhbi4gV2UgY291bGQgdXNlIHRoZVxuXHQgKiBIdW5nYXJpYW4gY29udmVydCBmdW5jdGlvbiBoZXJlLCBidXQgdGhpcyBpcyBjbGVhbmVyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb2JqIE9iamVjdCB0byBjb252ZXJ0XG5cdCAqICBAcmV0dXJucyB7b2JqZWN0fSBJbnZlcnRlZCBvYmplY3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuU2VhcmNoVG9IdW5nICggb2JqIClcblx0e1xuXHRcdHJldHVybiB7XG5cdFx0XHRzU2VhcmNoOiAgICAgICAgICBvYmouc2VhcmNoLFxuXHRcdFx0YlNtYXJ0OiAgICAgICAgICAgb2JqLnNtYXJ0LFxuXHRcdFx0YlJlZ2V4OiAgICAgICAgICAgb2JqLnJlZ2V4LFxuXHRcdFx0YkNhc2VJbnNlbnNpdGl2ZTogb2JqLmNhc2VJbnNlbnNpdGl2ZVxuXHRcdH07XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSB0aGUgbm9kZSByZXF1aXJlZCBmb3IgdGhlIGluZm8gZGlzcGxheVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHJldHVybnMge25vZGV9IEluZm9ybWF0aW9uIGVsZW1lbnRcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuRmVhdHVyZUh0bWxJbmZvICggc2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHR0aWQgPSBzZXR0aW5ncy5zVGFibGVJZCxcblx0XHRcdG5vZGVzID0gc2V0dGluZ3MuYWFuRmVhdHVyZXMuaSxcblx0XHRcdG4gPSAkKCc8ZGl2Lz4nLCB7XG5cdFx0XHRcdCdjbGFzcyc6IHNldHRpbmdzLm9DbGFzc2VzLnNJbmZvLFxuXHRcdFx0XHQnaWQnOiAhIG5vZGVzID8gdGlkKydfaW5mbycgOiBudWxsXG5cdFx0XHR9ICk7XG5cdFxuXHRcdGlmICggISBub2RlcyApIHtcblx0XHRcdC8vIFVwZGF0ZSBkaXNwbGF5IG9uIGVhY2ggZHJhd1xuXHRcdFx0c2V0dGluZ3MuYW9EcmF3Q2FsbGJhY2sucHVzaCgge1xuXHRcdFx0XHRcImZuXCI6IF9mblVwZGF0ZUluZm8sXG5cdFx0XHRcdFwic05hbWVcIjogXCJpbmZvcm1hdGlvblwiXG5cdFx0XHR9ICk7XG5cdFxuXHRcdFx0blxuXHRcdFx0XHQuYXR0ciggJ3JvbGUnLCAnc3RhdHVzJyApXG5cdFx0XHRcdC5hdHRyKCAnYXJpYS1saXZlJywgJ3BvbGl0ZScgKTtcblx0XG5cdFx0XHQvLyBUYWJsZSBpcyBkZXNjcmliZWQgYnkgb3VyIGluZm8gZGl2XG5cdFx0XHQkKHNldHRpbmdzLm5UYWJsZSkuYXR0ciggJ2FyaWEtZGVzY3JpYmVkYnknLCB0aWQrJ19pbmZvJyApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG5bMF07XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogVXBkYXRlIHRoZSBpbmZvcm1hdGlvbiBlbGVtZW50cyBpbiB0aGUgZGlzcGxheVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblVwZGF0ZUluZm8gKCBzZXR0aW5ncyApXG5cdHtcblx0XHQvKiBTaG93IGluZm9ybWF0aW9uIGFib3V0IHRoZSB0YWJsZSAqL1xuXHRcdHZhciBub2RlcyA9IHNldHRpbmdzLmFhbkZlYXR1cmVzLmk7XG5cdFx0aWYgKCBub2Rlcy5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHR2YXJcblx0XHRcdGxhbmcgID0gc2V0dGluZ3Mub0xhbmd1YWdlLFxuXHRcdFx0c3RhcnQgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCsxLFxuXHRcdFx0ZW5kICAgPSBzZXR0aW5ncy5mbkRpc3BsYXlFbmQoKSxcblx0XHRcdG1heCAgID0gc2V0dGluZ3MuZm5SZWNvcmRzVG90YWwoKSxcblx0XHRcdHRvdGFsID0gc2V0dGluZ3MuZm5SZWNvcmRzRGlzcGxheSgpLFxuXHRcdFx0b3V0ICAgPSB0b3RhbCA/XG5cdFx0XHRcdGxhbmcuc0luZm8gOlxuXHRcdFx0XHRsYW5nLnNJbmZvRW1wdHk7XG5cdFxuXHRcdGlmICggdG90YWwgIT09IG1heCApIHtcblx0XHRcdC8qIFJlY29yZCBzZXQgYWZ0ZXIgZmlsdGVyaW5nICovXG5cdFx0XHRvdXQgKz0gJyAnICsgbGFuZy5zSW5mb0ZpbHRlcmVkO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ29udmVydCB0aGUgbWFjcm9zXG5cdFx0b3V0ICs9IGxhbmcuc0luZm9Qb3N0Rml4O1xuXHRcdG91dCA9IF9mbkluZm9NYWNyb3MoIHNldHRpbmdzLCBvdXQgKTtcblx0XG5cdFx0dmFyIGNhbGxiYWNrID0gbGFuZy5mbkluZm9DYWxsYmFjaztcblx0XHRpZiAoIGNhbGxiYWNrICE9PSBudWxsICkge1xuXHRcdFx0b3V0ID0gY2FsbGJhY2suY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLFxuXHRcdFx0XHRzZXR0aW5ncywgc3RhcnQsIGVuZCwgbWF4LCB0b3RhbCwgb3V0XG5cdFx0XHQpO1xuXHRcdH1cblx0XG5cdFx0JChub2RlcykuaHRtbCggb3V0ICk7XG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBfZm5JbmZvTWFjcm9zICggc2V0dGluZ3MsIHN0ciApXG5cdHtcblx0XHQvLyBXaGVuIGluZmluaXRlIHNjcm9sbGluZywgd2UgYXJlIGFsd2F5cyBzdGFydGluZyBhdCAxLiBfaURpc3BsYXlTdGFydCBpcyB1c2VkIG9ubHlcblx0XHQvLyBpbnRlcm5hbGx5XG5cdFx0dmFyXG5cdFx0XHRmb3JtYXR0ZXIgID0gc2V0dGluZ3MuZm5Gb3JtYXROdW1iZXIsXG5cdFx0XHRzdGFydCAgICAgID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQrMSxcblx0XHRcdGxlbiAgICAgICAgPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXG5cdFx0XHR2aXMgICAgICAgID0gc2V0dGluZ3MuZm5SZWNvcmRzRGlzcGxheSgpLFxuXHRcdFx0YWxsICAgICAgICA9IGxlbiA9PT0gLTE7XG5cdFxuXHRcdHJldHVybiBzdHIuXG5cdFx0XHRyZXBsYWNlKC9fU1RBUlRfL2csIGZvcm1hdHRlci5jYWxsKCBzZXR0aW5ncywgc3RhcnQgKSApLlxuXHRcdFx0cmVwbGFjZSgvX0VORF8vZywgICBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIHNldHRpbmdzLmZuRGlzcGxheUVuZCgpICkgKS5cblx0XHRcdHJlcGxhY2UoL19NQVhfL2csICAgZm9ybWF0dGVyLmNhbGwoIHNldHRpbmdzLCBzZXR0aW5ncy5mblJlY29yZHNUb3RhbCgpICkgKS5cblx0XHRcdHJlcGxhY2UoL19UT1RBTF8vZywgZm9ybWF0dGVyLmNhbGwoIHNldHRpbmdzLCB2aXMgKSApLlxuXHRcdFx0cmVwbGFjZSgvX1BBR0VfL2csICBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIGFsbCA/IDEgOiBNYXRoLmNlaWwoIHN0YXJ0IC8gbGVuICkgKSApLlxuXHRcdFx0cmVwbGFjZSgvX1BBR0VTXy9nLCBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIGFsbCA/IDEgOiBNYXRoLmNlaWwoIHZpcyAvIGxlbiApICkgKTtcblx0fVxuXHRcblx0XG5cdFxuXHQvKipcblx0ICogRHJhdyB0aGUgdGFibGUgZm9yIHRoZSBmaXJzdCB0aW1lLCBhZGRpbmcgYWxsIHJlcXVpcmVkIGZlYXR1cmVzXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuSW5pdGlhbGlzZSAoIHNldHRpbmdzIClcblx0e1xuXHRcdHZhciBpLCBpTGVuLCBpQWpheFN0YXJ0PXNldHRpbmdzLmlJbml0RGlzcGxheVN0YXJ0O1xuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLCBjb2x1bW47XG5cdFx0dmFyIGZlYXR1cmVzID0gc2V0dGluZ3Mub0ZlYXR1cmVzO1xuXHRcdHZhciBkZWZlckxvYWRpbmcgPSBzZXR0aW5ncy5iRGVmZXJMb2FkaW5nOyAvLyB2YWx1ZSBtb2RpZmllZCBieSB0aGUgZHJhd1xuXHRcblx0XHQvKiBFbnN1cmUgdGhhdCB0aGUgdGFibGUgZGF0YSBpcyBmdWxseSBpbml0aWFsaXNlZCAqL1xuXHRcdGlmICggISBzZXR0aW5ncy5iSW5pdGlhbGlzZWQgKSB7XG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpeyBfZm5Jbml0aWFsaXNlKCBzZXR0aW5ncyApOyB9LCAyMDAgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdC8qIFNob3cgdGhlIGRpc3BsYXkgSFRNTCBvcHRpb25zICovXG5cdFx0X2ZuQWRkT3B0aW9uc0h0bWwoIHNldHRpbmdzICk7XG5cdFxuXHRcdC8qIEJ1aWxkIGFuZCBkcmF3IHRoZSBoZWFkZXIgLyBmb290ZXIgZm9yIHRoZSB0YWJsZSAqL1xuXHRcdF9mbkJ1aWxkSGVhZCggc2V0dGluZ3MgKTtcblx0XHRfZm5EcmF3SGVhZCggc2V0dGluZ3MsIHNldHRpbmdzLmFvSGVhZGVyICk7XG5cdFx0X2ZuRHJhd0hlYWQoIHNldHRpbmdzLCBzZXR0aW5ncy5hb0Zvb3RlciApO1xuXHRcblx0XHQvKiBPa2F5IHRvIHNob3cgdGhhdCBzb21ldGhpbmcgaXMgZ29pbmcgb24gbm93ICovXG5cdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCB0cnVlICk7XG5cdFxuXHRcdC8qIENhbGN1bGF0ZSBzaXplcyBmb3IgY29sdW1ucyAqL1xuXHRcdGlmICggZmVhdHVyZXMuYkF1dG9XaWR0aCApIHtcblx0XHRcdF9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyggc2V0dGluZ3MgKTtcblx0XHR9XG5cdFxuXHRcdGZvciAoIGk9MCwgaUxlbj1jb2x1bW5zLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApIHtcblx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbaV07XG5cdFxuXHRcdFx0aWYgKCBjb2x1bW4uc1dpZHRoICkge1xuXHRcdFx0XHRjb2x1bW4ublRoLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGNvbHVtbi5zV2lkdGggKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdwcmVJbml0JywgW3NldHRpbmdzXSApO1xuXHRcblx0XHQvLyBJZiB0aGVyZSBpcyBkZWZhdWx0IHNvcnRpbmcgcmVxdWlyZWQgLSBsZXQncyBkbyBpdC4gVGhlIHNvcnQgZnVuY3Rpb25cblx0XHQvLyB3aWxsIGRvIHRoZSBkcmF3aW5nIGZvciB1cy4gT3RoZXJ3aXNlIHdlIGRyYXcgdGhlIHRhYmxlIHJlZ2FyZGxlc3Mgb2YgdGhlXG5cdFx0Ly8gQWpheCBzb3VyY2UgLSB0aGlzIGFsbG93cyB0aGUgdGFibGUgdG8gbG9vayBpbml0aWFsaXNlZCBmb3IgQWpheCBzb3VyY2luZ1xuXHRcdC8vIGRhdGEgKHNob3cgJ2xvYWRpbmcnIG1lc3NhZ2UgcG9zc2libHkpXG5cdFx0X2ZuUmVEcmF3KCBzZXR0aW5ncyApO1xuXHRcblx0XHQvLyBTZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIGluaXQgY29tcGxldGUgaXMgZG9uZSBieSBfZm5BamF4VXBkYXRlRHJhd1xuXHRcdHZhciBkYXRhU3JjID0gX2ZuRGF0YVNvdXJjZSggc2V0dGluZ3MgKTtcblx0XHRpZiAoIGRhdGFTcmMgIT0gJ3NzcCcgfHwgZGVmZXJMb2FkaW5nICkge1xuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgYW4gYWpheCBzb3VyY2UgbG9hZCB0aGUgZGF0YVxuXHRcdFx0aWYgKCBkYXRhU3JjID09ICdhamF4JyApIHtcblx0XHRcdFx0X2ZuQnVpbGRBamF4KCBzZXR0aW5ncywgW10sIGZ1bmN0aW9uKGpzb24pIHtcblx0XHRcdFx0XHR2YXIgYURhdGEgPSBfZm5BamF4RGF0YVNyYyggc2V0dGluZ3MsIGpzb24gKTtcblx0XG5cdFx0XHRcdFx0Ly8gR290IHRoZSBkYXRhIC0gYWRkIGl0IHRvIHRoZSB0YWJsZVxuXHRcdFx0XHRcdGZvciAoIGk9MCA7IGk8YURhdGEubGVuZ3RoIDsgaSsrICkge1xuXHRcdFx0XHRcdFx0X2ZuQWRkRGF0YSggc2V0dGluZ3MsIGFEYXRhW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBSZXNldCB0aGUgaW5pdCBkaXNwbGF5IGZvciBjb29raWUgc2F2aW5nLiBXZSd2ZSBhbHJlYWR5IGRvbmVcblx0XHRcdFx0XHQvLyBhIGZpbHRlciwgYW5kIHRoZXJlZm9yZSBjbGVhcmVkIGl0IGJlZm9yZS4gU28gd2UgbmVlZCB0byBtYWtlXG5cdFx0XHRcdFx0Ly8gaXQgYXBwZWFyICdmcmVzaCdcblx0XHRcdFx0XHRzZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydCA9IGlBamF4U3RhcnQ7XG5cdFxuXHRcdFx0XHRcdF9mblJlRHJhdyggc2V0dGluZ3MgKTtcblx0XG5cdFx0XHRcdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCBmYWxzZSApO1xuXHRcdFx0XHRcdF9mbkluaXRDb21wbGV0ZSggc2V0dGluZ3MsIGpzb24gKTtcblx0XHRcdFx0fSwgc2V0dGluZ3MgKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIGZhbHNlICk7XG5cdFx0XHRcdF9mbkluaXRDb21wbGV0ZSggc2V0dGluZ3MgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogRHJhdyB0aGUgdGFibGUgZm9yIHRoZSBmaXJzdCB0aW1lLCBhZGRpbmcgYWxsIHJlcXVpcmVkIGZlYXR1cmVzXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gW2pzb25dIEpTT04gZnJvbSB0aGUgc2VydmVyIHRoYXQgY29tcGxldGVkIHRoZSB0YWJsZSwgaWYgdXNpbmcgQWpheCBzb3VyY2Vcblx0ICogICAgd2l0aCBjbGllbnQtc2lkZSBwcm9jZXNzaW5nIChvcHRpb25hbClcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuSW5pdENvbXBsZXRlICggc2V0dGluZ3MsIGpzb24gKVxuXHR7XG5cdFx0c2V0dGluZ3MuX2JJbml0Q29tcGxldGUgPSB0cnVlO1xuXHRcblx0XHQvLyBXaGVuIGRhdGEgd2FzIGFkZGVkIGFmdGVyIHRoZSBpbml0aWFsaXNhdGlvbiAoZGF0YSBvciBBamF4KSB3ZSBuZWVkIHRvXG5cdFx0Ly8gY2FsY3VsYXRlIHRoZSBjb2x1bW4gc2l6aW5nXG5cdFx0aWYgKCBqc29uIHx8IHNldHRpbmdzLm9Jbml0LmFhRGF0YSApIHtcblx0XHRcdF9mbkFkanVzdENvbHVtblNpemluZyggc2V0dGluZ3MgKTtcblx0XHR9XG5cdFxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdwbHVnaW4taW5pdCcsIFtzZXR0aW5ncywganNvbl0gKTtcblx0XHRfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCAnYW9Jbml0Q29tcGxldGUnLCAnaW5pdCcsIFtzZXR0aW5ncywganNvbl0gKTtcblx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIF9mbkxlbmd0aENoYW5nZSAoIHNldHRpbmdzLCB2YWwgKVxuXHR7XG5cdFx0dmFyIGxlbiA9IHBhcnNlSW50KCB2YWwsIDEwICk7XG5cdFx0c2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoID0gbGVuO1xuXHRcblx0XHRfZm5MZW5ndGhPdmVyZmxvdyggc2V0dGluZ3MgKTtcblx0XG5cdFx0Ly8gRmlyZSBsZW5ndGggY2hhbmdlIGV2ZW50XG5cdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgbnVsbCwgJ2xlbmd0aCcsIFtzZXR0aW5ncywgbGVuXSApO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdlbmVyYXRlIHRoZSBub2RlIHJlcXVpcmVkIGZvciB1c2VyIGRpc3BsYXkgbGVuZ3RoIGNoYW5naW5nXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEByZXR1cm5zIHtub2RlfSBEaXNwbGF5IGxlbmd0aCBmZWF0dXJlIG5vZGVcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuRmVhdHVyZUh0bWxMZW5ndGggKCBzZXR0aW5ncyApXG5cdHtcblx0XHR2YXJcblx0XHRcdGNsYXNzZXMgID0gc2V0dGluZ3Mub0NsYXNzZXMsXG5cdFx0XHR0YWJsZUlkICA9IHNldHRpbmdzLnNUYWJsZUlkLFxuXHRcdFx0bWVudSAgICAgPSBzZXR0aW5ncy5hTGVuZ3RoTWVudSxcblx0XHRcdGQyICAgICAgID0gJC5pc0FycmF5KCBtZW51WzBdICksXG5cdFx0XHRsZW5ndGhzICA9IGQyID8gbWVudVswXSA6IG1lbnUsXG5cdFx0XHRsYW5ndWFnZSA9IGQyID8gbWVudVsxXSA6IG1lbnU7XG5cdFxuXHRcdHZhciBzZWxlY3QgPSAkKCc8c2VsZWN0Lz4nLCB7XG5cdFx0XHQnbmFtZSc6ICAgICAgICAgIHRhYmxlSWQrJ19sZW5ndGgnLFxuXHRcdFx0J2FyaWEtY29udHJvbHMnOiB0YWJsZUlkLFxuXHRcdFx0J2NsYXNzJzogICAgICAgICBjbGFzc2VzLnNMZW5ndGhTZWxlY3Rcblx0XHR9ICk7XG5cdFxuXHRcdGZvciAoIHZhciBpPTAsIGllbj1sZW5ndGhzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0c2VsZWN0WzBdWyBpIF0gPSBuZXcgT3B0aW9uKCBsYW5ndWFnZVtpXSwgbGVuZ3Roc1tpXSApO1xuXHRcdH1cblx0XG5cdFx0dmFyIGRpdiA9ICQoJzxkaXY+PGxhYmVsLz48L2Rpdj4nKS5hZGRDbGFzcyggY2xhc3Nlcy5zTGVuZ3RoICk7XG5cdFx0aWYgKCAhIHNldHRpbmdzLmFhbkZlYXR1cmVzLmwgKSB7XG5cdFx0XHRkaXZbMF0uaWQgPSB0YWJsZUlkKydfbGVuZ3RoJztcblx0XHR9XG5cdFxuXHRcdGRpdi5jaGlsZHJlbigpLmFwcGVuZChcblx0XHRcdHNldHRpbmdzLm9MYW5ndWFnZS5zTGVuZ3RoTWVudS5yZXBsYWNlKCAnX01FTlVfJywgc2VsZWN0WzBdLm91dGVySFRNTCApXG5cdFx0KTtcblx0XG5cdFx0Ly8gQ2FuJ3QgdXNlIGBzZWxlY3RgIHZhcmlhYmxlIGFzIHVzZXIgbWlnaHQgcHJvdmlkZSB0aGVpciBvd24gYW5kIHRoZVxuXHRcdC8vIHJlZmVyZW5jZSBpcyBicm9rZW4gYnkgdGhlIHVzZSBvZiBvdXRlckhUTUxcblx0XHQkKCdzZWxlY3QnLCBkaXYpXG5cdFx0XHQudmFsKCBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGggKVxuXHRcdFx0LmJpbmQoICdjaGFuZ2UuRFQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdF9mbkxlbmd0aENoYW5nZSggc2V0dGluZ3MsICQodGhpcykudmFsKCkgKTtcblx0XHRcdFx0X2ZuRHJhdyggc2V0dGluZ3MgKTtcblx0XHRcdH0gKTtcblx0XG5cdFx0Ly8gVXBkYXRlIG5vZGUgdmFsdWUgd2hlbmV2ZXIgYW55dGhpbmcgY2hhbmdlcyB0aGUgdGFibGUncyBsZW5ndGhcblx0XHQkKHNldHRpbmdzLm5UYWJsZSkuYmluZCggJ2xlbmd0aC5kdC5EVCcsIGZ1bmN0aW9uIChlLCBzLCBsZW4pIHtcblx0XHRcdGlmICggc2V0dGluZ3MgPT09IHMgKSB7XG5cdFx0XHRcdCQoJ3NlbGVjdCcsIGRpdikudmFsKCBsZW4gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFxuXHRcdHJldHVybiBkaXZbMF07XG5cdH1cblx0XG5cdFxuXHRcblx0LyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcblx0ICogTm90ZSB0aGF0IG1vc3Qgb2YgdGhlIHBhZ2luZyBsb2dpYyBpcyBkb25lIGluXG5cdCAqIERhdGFUYWJsZS5leHQucGFnZXJcblx0ICovXG5cdFxuXHQvKipcblx0ICogR2VuZXJhdGUgdGhlIG5vZGUgcmVxdWlyZWQgZm9yIGRlZmF1bHQgcGFnaW5hdGlvblxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHJldHVybnMge25vZGV9IFBhZ2luYXRpb24gZmVhdHVyZSBub2RlXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUgKCBzZXR0aW5ncyApXG5cdHtcblx0XHR2YXJcblx0XHRcdHR5cGUgICA9IHNldHRpbmdzLnNQYWdpbmF0aW9uVHlwZSxcblx0XHRcdHBsdWdpbiA9IERhdGFUYWJsZS5leHQucGFnZXJbIHR5cGUgXSxcblx0XHRcdG1vZGVybiA9IHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicsXG5cdFx0XHRyZWRyYXcgPSBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0XHRcdF9mbkRyYXcoIHNldHRpbmdzICk7XG5cdFx0XHR9LFxuXHRcdFx0bm9kZSA9ICQoJzxkaXYvPicpLmFkZENsYXNzKCBzZXR0aW5ncy5vQ2xhc3Nlcy5zUGFnaW5nICsgdHlwZSApWzBdLFxuXHRcdFx0ZmVhdHVyZXMgPSBzZXR0aW5ncy5hYW5GZWF0dXJlcztcblx0XG5cdFx0aWYgKCAhIG1vZGVybiApIHtcblx0XHRcdHBsdWdpbi5mbkluaXQoIHNldHRpbmdzLCBub2RlLCByZWRyYXcgKTtcblx0XHR9XG5cdFxuXHRcdC8qIEFkZCBhIGRyYXcgY2FsbGJhY2sgZm9yIHRoZSBwYWdpbmF0aW9uIG9uIGZpcnN0IGluc3RhbmNlLCB0byB1cGRhdGUgdGhlIHBhZ2luZyBkaXNwbGF5ICovXG5cdFx0aWYgKCAhIGZlYXR1cmVzLnAgKVxuXHRcdHtcblx0XHRcdG5vZGUuaWQgPSBzZXR0aW5ncy5zVGFibGVJZCsnX3BhZ2luYXRlJztcblx0XG5cdFx0XHRzZXR0aW5ncy5hb0RyYXdDYWxsYmFjay5wdXNoKCB7XG5cdFx0XHRcdFwiZm5cIjogZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdFx0XHRcdGlmICggbW9kZXJuICkge1xuXHRcdFx0XHRcdFx0dmFyXG5cdFx0XHRcdFx0XHRcdHN0YXJ0ICAgICAgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcblx0XHRcdFx0XHRcdFx0bGVuICAgICAgICA9IHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCxcblx0XHRcdFx0XHRcdFx0dmlzUmVjb3JkcyA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSxcblx0XHRcdFx0XHRcdFx0YWxsICAgICAgICA9IGxlbiA9PT0gLTEsXG5cdFx0XHRcdFx0XHRcdHBhZ2UgPSBhbGwgPyAwIDogTWF0aC5jZWlsKCBzdGFydCAvIGxlbiApLFxuXHRcdFx0XHRcdFx0XHRwYWdlcyA9IGFsbCA/IDEgOiBNYXRoLmNlaWwoIHZpc1JlY29yZHMgLyBsZW4gKSxcblx0XHRcdFx0XHRcdFx0YnV0dG9ucyA9IHBsdWdpbihwYWdlLCBwYWdlcyksXG5cdFx0XHRcdFx0XHRcdGksIGllbjtcblx0XG5cdFx0XHRcdFx0XHRmb3IgKCBpPTAsIGllbj1mZWF0dXJlcy5wLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdFx0XHRfZm5SZW5kZXJlciggc2V0dGluZ3MsICdwYWdlQnV0dG9uJyApKFxuXHRcdFx0XHRcdFx0XHRcdHNldHRpbmdzLCBmZWF0dXJlcy5wW2ldLCBpLCBidXR0b25zLCBwYWdlLCBwYWdlc1xuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdHBsdWdpbi5mblVwZGF0ZSggc2V0dGluZ3MsIHJlZHJhdyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzTmFtZVwiOiBcInBhZ2luYXRpb25cIlxuXHRcdFx0fSApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogQWx0ZXIgdGhlIGRpc3BsYXkgc2V0dGluZ3MgdG8gY2hhbmdlIHRoZSBwYWdlXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7c3RyaW5nfGludH0gYWN0aW9uIFBhZ2luZyBhY3Rpb24gdG8gdGFrZTogXCJmaXJzdFwiLCBcInByZXZpb3VzXCIsXG5cdCAqICAgIFwibmV4dFwiIG9yIFwibGFzdFwiIG9yIHBhZ2UgbnVtYmVyIHRvIGp1bXAgdG8gKGludGVnZXIpXG5cdCAqICBAcGFyYW0gW2Jvb2xdIHJlZHJhdyBBdXRvbWF0aWNhbGx5IGRyYXcgdGhlIHVwZGF0ZSBvciBub3Rcblx0ICogIEByZXR1cm5zIHtib29sfSB0cnVlIHBhZ2UgaGFzIGNoYW5nZWQsIGZhbHNlIC0gbm8gY2hhbmdlXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblBhZ2VDaGFuZ2UgKCBzZXR0aW5ncywgYWN0aW9uLCByZWRyYXcgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRzdGFydCAgICAgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcblx0XHRcdGxlbiAgICAgICA9IHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCxcblx0XHRcdHJlY29yZHMgICA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKTtcblx0XG5cdFx0aWYgKCByZWNvcmRzID09PSAwIHx8IGxlbiA9PT0gLTEgKVxuXHRcdHtcblx0XHRcdHN0YXJ0ID0gMDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIHR5cGVvZiBhY3Rpb24gPT09IFwibnVtYmVyXCIgKVxuXHRcdHtcblx0XHRcdHN0YXJ0ID0gYWN0aW9uICogbGVuO1xuXHRcblx0XHRcdGlmICggc3RhcnQgPiByZWNvcmRzIClcblx0XHRcdHtcblx0XHRcdFx0c3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmICggYWN0aW9uID09IFwiZmlyc3RcIiApXG5cdFx0e1xuXHRcdFx0c3RhcnQgPSAwO1xuXHRcdH1cblx0XHRlbHNlIGlmICggYWN0aW9uID09IFwicHJldmlvdXNcIiApXG5cdFx0e1xuXHRcdFx0c3RhcnQgPSBsZW4gPj0gMCA/XG5cdFx0XHRcdHN0YXJ0IC0gbGVuIDpcblx0XHRcdFx0MDtcblx0XG5cdFx0XHRpZiAoIHN0YXJ0IDwgMCApXG5cdFx0XHR7XG5cdFx0XHQgIHN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoIGFjdGlvbiA9PSBcIm5leHRcIiApXG5cdFx0e1xuXHRcdFx0aWYgKCBzdGFydCArIGxlbiA8IHJlY29yZHMgKVxuXHRcdFx0e1xuXHRcdFx0XHRzdGFydCArPSBsZW47XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBhY3Rpb24gPT0gXCJsYXN0XCIgKVxuXHRcdHtcblx0XHRcdHN0YXJ0ID0gTWF0aC5mbG9vciggKHJlY29yZHMtMSkgLyBsZW4pICogbGVuO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0X2ZuTG9nKCBzZXR0aW5ncywgMCwgXCJVbmtub3duIHBhZ2luZyBhY3Rpb246IFwiK2FjdGlvbiwgNSApO1xuXHRcdH1cblx0XG5cdFx0dmFyIGNoYW5nZWQgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCAhPT0gc3RhcnQ7XG5cdFx0c2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgPSBzdGFydDtcblx0XG5cdFx0aWYgKCBjaGFuZ2VkICkge1xuXHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgbnVsbCwgJ3BhZ2UnLCBbc2V0dGluZ3NdICk7XG5cdFxuXHRcdFx0aWYgKCByZWRyYXcgKSB7XG5cdFx0XHRcdF9mbkRyYXcoIHNldHRpbmdzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gY2hhbmdlZDtcblx0fVxuXHRcblx0XG5cdFxuXHQvKipcblx0ICogR2VuZXJhdGUgdGhlIG5vZGUgcmVxdWlyZWQgZm9yIHRoZSBwcm9jZXNzaW5nIG5vZGVcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHJldHVybnMge25vZGV9IFByb2Nlc3NpbmcgZWxlbWVudFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5GZWF0dXJlSHRtbFByb2Nlc3NpbmcgKCBzZXR0aW5ncyApXG5cdHtcblx0XHRyZXR1cm4gJCgnPGRpdi8+Jywge1xuXHRcdFx0XHQnaWQnOiAhIHNldHRpbmdzLmFhbkZlYXR1cmVzLnIgPyBzZXR0aW5ncy5zVGFibGVJZCsnX3Byb2Nlc3NpbmcnIDogbnVsbCxcblx0XHRcdFx0J2NsYXNzJzogc2V0dGluZ3Mub0NsYXNzZXMuc1Byb2Nlc3Npbmdcblx0XHRcdH0gKVxuXHRcdFx0Lmh0bWwoIHNldHRpbmdzLm9MYW5ndWFnZS5zUHJvY2Vzc2luZyApXG5cdFx0XHQuaW5zZXJ0QmVmb3JlKCBzZXR0aW5ncy5uVGFibGUgKVswXTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIHByb2Nlc3NpbmcgaW5kaWNhdG9yXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7Ym9vbH0gc2hvdyBTaG93IHRoZSBwcm9jZXNzaW5nIGluZGljYXRvciAodHJ1ZSkgb3Igbm90IChmYWxzZSlcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkgKCBzZXR0aW5ncywgc2hvdyApXG5cdHtcblx0XHRpZiAoIHNldHRpbmdzLm9GZWF0dXJlcy5iUHJvY2Vzc2luZyApIHtcblx0XHRcdCQoc2V0dGluZ3MuYWFuRmVhdHVyZXMucikuY3NzKCAnZGlzcGxheScsIHNob3cgPyAnYmxvY2snIDogJ25vbmUnICk7XG5cdFx0fVxuXHRcblx0XHRfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCBudWxsLCAncHJvY2Vzc2luZycsIFtzZXR0aW5ncywgc2hvd10gKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEFkZCBhbnkgY29udHJvbCBlbGVtZW50cyBmb3IgdGhlIHRhYmxlIC0gc3BlY2lmaWNhbGx5IHNjcm9sbGluZ1xuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcmV0dXJucyB7bm9kZX0gTm9kZSB0byBhZGQgdG8gdGhlIERPTVxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5GZWF0dXJlSHRtbFRhYmxlICggc2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyIHRhYmxlID0gJChzZXR0aW5ncy5uVGFibGUpO1xuXHRcblx0XHQvLyBBZGQgdGhlIEFSSUEgZ3JpZCByb2xlIHRvIHRoZSB0YWJsZVxuXHRcdHRhYmxlLmF0dHIoICdyb2xlJywgJ2dyaWQnICk7XG5cdFxuXHRcdC8vIFNjcm9sbGluZyBmcm9tIGhlcmUgb24gaW5cblx0XHR2YXIgc2Nyb2xsID0gc2V0dGluZ3Mub1Njcm9sbDtcblx0XG5cdFx0aWYgKCBzY3JvbGwuc1ggPT09ICcnICYmIHNjcm9sbC5zWSA9PT0gJycgKSB7XG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MublRhYmxlO1xuXHRcdH1cblx0XG5cdFx0dmFyIHNjcm9sbFggPSBzY3JvbGwuc1g7XG5cdFx0dmFyIHNjcm9sbFkgPSBzY3JvbGwuc1k7XG5cdFx0dmFyIGNsYXNzZXMgPSBzZXR0aW5ncy5vQ2xhc3Nlcztcblx0XHR2YXIgY2FwdGlvbiA9IHRhYmxlLmNoaWxkcmVuKCdjYXB0aW9uJyk7XG5cdFx0dmFyIGNhcHRpb25TaWRlID0gY2FwdGlvbi5sZW5ndGggPyBjYXB0aW9uWzBdLl9jYXB0aW9uU2lkZSA6IG51bGw7XG5cdFx0dmFyIGhlYWRlckNsb25lID0gJCggdGFibGVbMF0uY2xvbmVOb2RlKGZhbHNlKSApO1xuXHRcdHZhciBmb290ZXJDbG9uZSA9ICQoIHRhYmxlWzBdLmNsb25lTm9kZShmYWxzZSkgKTtcblx0XHR2YXIgZm9vdGVyID0gdGFibGUuY2hpbGRyZW4oJ3Rmb290Jyk7XG5cdFx0dmFyIF9kaXYgPSAnPGRpdi8+Jztcblx0XHR2YXIgc2l6ZSA9IGZ1bmN0aW9uICggcyApIHtcblx0XHRcdHJldHVybiAhcyA/IG51bGwgOiBfZm5TdHJpbmdUb0NzcyggcyApO1xuXHRcdH07XG5cdFxuXHRcdGlmICggISBmb290ZXIubGVuZ3RoICkge1xuXHRcdFx0Zm9vdGVyID0gbnVsbDtcblx0XHR9XG5cdFxuXHRcdC8qXG5cdFx0ICogVGhlIEhUTUwgc3RydWN0dXJlIHRoYXQgd2Ugd2FudCB0byBnZW5lcmF0ZSBpbiB0aGlzIGZ1bmN0aW9uIGlzOlxuXHRcdCAqICBkaXYgLSBzY3JvbGxlclxuXHRcdCAqICAgIGRpdiAtIHNjcm9sbCBoZWFkXG5cdFx0ICogICAgICBkaXYgLSBzY3JvbGwgaGVhZCBpbm5lclxuXHRcdCAqICAgICAgICB0YWJsZSAtIHNjcm9sbCBoZWFkIHRhYmxlXG5cdFx0ICogICAgICAgICAgdGhlYWQgLSB0aGVhZFxuXHRcdCAqICAgIGRpdiAtIHNjcm9sbCBib2R5XG5cdFx0ICogICAgICB0YWJsZSAtIHRhYmxlIChtYXN0ZXIgdGFibGUpXG5cdFx0ICogICAgICAgIHRoZWFkIC0gdGhlYWQgY2xvbmUgZm9yIHNpemluZ1xuXHRcdCAqICAgICAgICB0Ym9keSAtIHRib2R5XG5cdFx0ICogICAgZGl2IC0gc2Nyb2xsIGZvb3Rcblx0XHQgKiAgICAgIGRpdiAtIHNjcm9sbCBmb290IGlubmVyXG5cdFx0ICogICAgICAgIHRhYmxlIC0gc2Nyb2xsIGZvb3QgdGFibGVcblx0XHQgKiAgICAgICAgICB0Zm9vdCAtIHRmb290XG5cdFx0ICovXG5cdFx0dmFyIHNjcm9sbGVyID0gJCggX2RpdiwgeyAnY2xhc3MnOiBjbGFzc2VzLnNTY3JvbGxXcmFwcGVyIH0gKVxuXHRcdFx0LmFwcGVuZChcblx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEhlYWQgfSApXG5cdFx0XHRcdFx0LmNzcygge1xuXHRcdFx0XHRcdFx0b3ZlcmZsb3c6ICdoaWRkZW4nLFxuXHRcdFx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXG5cdFx0XHRcdFx0XHRib3JkZXI6IDAsXG5cdFx0XHRcdFx0XHR3aWR0aDogc2Nyb2xsWCA/IHNpemUoc2Nyb2xsWCkgOiAnMTAwJSdcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEhlYWRJbm5lciB9IClcblx0XHRcdFx0XHRcdFx0LmNzcygge1xuXHRcdFx0XHRcdFx0XHRcdCdib3gtc2l6aW5nJzogJ2NvbnRlbnQtYm94Jyxcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDogc2Nyb2xsLnNYSW5uZXIgfHwgJzEwMCUnXG5cdFx0XHRcdFx0XHRcdH0gKVxuXHRcdFx0XHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdFx0XHRcdGhlYWRlckNsb25lXG5cdFx0XHRcdFx0XHRcdFx0XHQucmVtb3ZlQXR0cignaWQnKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmNzcyggJ21hcmdpbi1sZWZ0JywgMCApXG5cdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kKCBjYXB0aW9uU2lkZSA9PT0gJ3RvcCcgPyBjYXB0aW9uIDogbnVsbCApXG5cdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0YWJsZS5jaGlsZHJlbigndGhlYWQnKVxuXHRcdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdFx0LmFwcGVuZChcblx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEJvZHkgfSApXG5cdFx0XHRcdFx0LmNzcygge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogJ2F1dG8nLFxuXHRcdFx0XHRcdFx0d2lkdGg6IHNpemUoIHNjcm9sbFggKVxuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHRcdC5hcHBlbmQoIHRhYmxlIClcblx0XHRcdCk7XG5cdFxuXHRcdGlmICggZm9vdGVyICkge1xuXHRcdFx0c2Nyb2xsZXIuYXBwZW5kKFxuXHRcdFx0XHQkKF9kaXYsIHsgJ2NsYXNzJzogY2xhc3Nlcy5zU2Nyb2xsRm9vdCB9IClcblx0XHRcdFx0XHQuY3NzKCB7XG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXG5cdFx0XHRcdFx0XHRib3JkZXI6IDAsXG5cdFx0XHRcdFx0XHR3aWR0aDogc2Nyb2xsWCA/IHNpemUoc2Nyb2xsWCkgOiAnMTAwJSdcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEZvb3RJbm5lciB9IClcblx0XHRcdFx0XHRcdFx0LmFwcGVuZChcblx0XHRcdFx0XHRcdFx0XHRmb290ZXJDbG9uZVxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlbW92ZUF0dHIoJ2lkJylcblx0XHRcdFx0XHRcdFx0XHRcdC5jc3MoICdtYXJnaW4tbGVmdCcsIDAgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZCggY2FwdGlvblNpZGUgPT09ICdib3R0b20nID8gY2FwdGlvbiA6IG51bGwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZChcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGFibGUuY2hpbGRyZW4oJ3Rmb290Jylcblx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdCk7XG5cdFx0fVxuXHRcblx0XHR2YXIgY2hpbGRyZW4gPSBzY3JvbGxlci5jaGlsZHJlbigpO1xuXHRcdHZhciBzY3JvbGxIZWFkID0gY2hpbGRyZW5bMF07XG5cdFx0dmFyIHNjcm9sbEJvZHkgPSBjaGlsZHJlblsxXTtcblx0XHR2YXIgc2Nyb2xsRm9vdCA9IGZvb3RlciA/IGNoaWxkcmVuWzJdIDogbnVsbDtcblx0XG5cdFx0Ly8gV2hlbiB0aGUgYm9keSBpcyBzY3JvbGxlZCwgdGhlbiB3ZSBhbHNvIHdhbnQgdG8gc2Nyb2xsIHRoZSBoZWFkZXJzXG5cdFx0aWYgKCBzY3JvbGxYICkge1xuXHRcdFx0JChzY3JvbGxCb2R5KS5vbiggJ3Njcm9sbC5EVCcsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdHZhciBzY3JvbGxMZWZ0ID0gdGhpcy5zY3JvbGxMZWZ0O1xuXHRcblx0XHRcdFx0c2Nyb2xsSGVhZC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcblx0XG5cdFx0XHRcdGlmICggZm9vdGVyICkge1xuXHRcdFx0XHRcdHNjcm9sbEZvb3Quc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdCQoc2Nyb2xsQm9keSkuY3NzKFxuXHRcdFx0c2Nyb2xsWSAmJiBzY3JvbGwuYkNvbGxhcHNlID8gJ21heC1oZWlnaHQnIDogJ2hlaWdodCcsIFxuXHRcdFx0c2Nyb2xsWVxuXHRcdCk7XG5cdFxuXHRcdHNldHRpbmdzLm5TY3JvbGxIZWFkID0gc2Nyb2xsSGVhZDtcblx0XHRzZXR0aW5ncy5uU2Nyb2xsQm9keSA9IHNjcm9sbEJvZHk7XG5cdFx0c2V0dGluZ3MublNjcm9sbEZvb3QgPSBzY3JvbGxGb290O1xuXHRcblx0XHQvLyBPbiByZWRyYXcgLSBhbGlnbiBjb2x1bW5zXG5cdFx0c2V0dGluZ3MuYW9EcmF3Q2FsbGJhY2sucHVzaCgge1xuXHRcdFx0XCJmblwiOiBfZm5TY3JvbGxEcmF3LFxuXHRcdFx0XCJzTmFtZVwiOiBcInNjcm9sbGluZ1wiXG5cdFx0fSApO1xuXHRcblx0XHRyZXR1cm4gc2Nyb2xsZXJbMF07XG5cdH1cblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIFVwZGF0ZSB0aGUgaGVhZGVyLCBmb290ZXIgYW5kIGJvZHkgdGFibGVzIGZvciByZXNpemluZyAtIGkuZS4gY29sdW1uXG5cdCAqIGFsaWdubWVudC5cblx0ICpcblx0ICogV2VsY29tZSB0byB0aGUgbW9zdCBob3JyaWJsZSBmdW5jdGlvbiBEYXRhVGFibGVzLiBUaGUgcHJvY2VzcyB0aGF0IHRoaXNcblx0ICogZnVuY3Rpb24gZm9sbG93cyBpcyBiYXNpY2FsbHk6XG5cdCAqICAgMS4gUmUtY3JlYXRlIHRoZSB0YWJsZSBpbnNpZGUgdGhlIHNjcm9sbGluZyBkaXZcblx0ICogICAyLiBUYWtlIGxpdmUgbWVhc3VyZW1lbnRzIGZyb20gdGhlIERPTVxuXHQgKiAgIDMuIEFwcGx5IHRoZSBtZWFzdXJlbWVudHMgdG8gYWxpZ24gdGhlIGNvbHVtbnNcblx0ICogICA0LiBDbGVhbiB1cFxuXHQgKlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblNjcm9sbERyYXcgKCBzZXR0aW5ncyApXG5cdHtcblx0XHQvLyBHaXZlbiB0aGF0IHRoaXMgaXMgc3VjaCBhIG1vbnN0ZXIgZnVuY3Rpb24sIGEgbG90IG9mIHZhcmlhYmxlcyBhcmUgdXNlXG5cdFx0Ly8gdG8gdHJ5IGFuZCBrZWVwIHRoZSBtaW5pbWlzZWQgc2l6ZSBhcyBzbWFsbCBhcyBwb3NzaWJsZVxuXHRcdHZhclxuXHRcdFx0c2Nyb2xsICAgICAgICAgPSBzZXR0aW5ncy5vU2Nyb2xsLFxuXHRcdFx0c2Nyb2xsWCAgICAgICAgPSBzY3JvbGwuc1gsXG5cdFx0XHRzY3JvbGxYSW5uZXIgICA9IHNjcm9sbC5zWElubmVyLFxuXHRcdFx0c2Nyb2xsWSAgICAgICAgPSBzY3JvbGwuc1ksXG5cdFx0XHRiYXJXaWR0aCAgICAgICA9IHNjcm9sbC5pQmFyV2lkdGgsXG5cdFx0XHRkaXZIZWFkZXIgICAgICA9ICQoc2V0dGluZ3MublNjcm9sbEhlYWQpLFxuXHRcdFx0ZGl2SGVhZGVyU3R5bGUgPSBkaXZIZWFkZXJbMF0uc3R5bGUsXG5cdFx0XHRkaXZIZWFkZXJJbm5lciA9IGRpdkhlYWRlci5jaGlsZHJlbignZGl2JyksXG5cdFx0XHRkaXZIZWFkZXJJbm5lclN0eWxlID0gZGl2SGVhZGVySW5uZXJbMF0uc3R5bGUsXG5cdFx0XHRkaXZIZWFkZXJUYWJsZSA9IGRpdkhlYWRlcklubmVyLmNoaWxkcmVuKCd0YWJsZScpLFxuXHRcdFx0ZGl2Qm9keUVsICAgICAgPSBzZXR0aW5ncy5uU2Nyb2xsQm9keSxcblx0XHRcdGRpdkJvZHkgICAgICAgID0gJChkaXZCb2R5RWwpLFxuXHRcdFx0ZGl2Qm9keVN0eWxlICAgPSBkaXZCb2R5RWwuc3R5bGUsXG5cdFx0XHRkaXZGb290ZXIgICAgICA9ICQoc2V0dGluZ3MublNjcm9sbEZvb3QpLFxuXHRcdFx0ZGl2Rm9vdGVySW5uZXIgPSBkaXZGb290ZXIuY2hpbGRyZW4oJ2RpdicpLFxuXHRcdFx0ZGl2Rm9vdGVyVGFibGUgPSBkaXZGb290ZXJJbm5lci5jaGlsZHJlbigndGFibGUnKSxcblx0XHRcdGhlYWRlciAgICAgICAgID0gJChzZXR0aW5ncy5uVEhlYWQpLFxuXHRcdFx0dGFibGUgICAgICAgICAgPSAkKHNldHRpbmdzLm5UYWJsZSksXG5cdFx0XHR0YWJsZUVsICAgICAgICA9IHRhYmxlWzBdLFxuXHRcdFx0dGFibGVTdHlsZSAgICAgPSB0YWJsZUVsLnN0eWxlLFxuXHRcdFx0Zm9vdGVyICAgICAgICAgPSBzZXR0aW5ncy5uVEZvb3QgPyAkKHNldHRpbmdzLm5URm9vdCkgOiBudWxsLFxuXHRcdFx0YnJvd3NlciAgICAgICAgPSBzZXR0aW5ncy5vQnJvd3Nlcixcblx0XHRcdGllNjcgICAgICAgICAgID0gYnJvd3Nlci5iU2Nyb2xsT3ZlcnNpemUsXG5cdFx0XHRoZWFkZXJUcmdFbHMsIGZvb3RlclRyZ0Vscyxcblx0XHRcdGhlYWRlclNyY0VscywgZm9vdGVyU3JjRWxzLFxuXHRcdFx0aGVhZGVyQ29weSwgZm9vdGVyQ29weSxcblx0XHRcdGhlYWRlcldpZHRocz1bXSwgZm9vdGVyV2lkdGhzPVtdLFxuXHRcdFx0aGVhZGVyQ29udGVudD1bXSxcblx0XHRcdGlkeCwgY29ycmVjdGlvbiwgc2FuaXR5V2lkdGgsXG5cdFx0XHR6ZXJvT3V0ID0gZnVuY3Rpb24oblNpemVyKSB7XG5cdFx0XHRcdHZhciBzdHlsZSA9IG5TaXplci5zdHlsZTtcblx0XHRcdFx0c3R5bGUucGFkZGluZ1RvcCA9IFwiMFwiO1xuXHRcdFx0XHRzdHlsZS5wYWRkaW5nQm90dG9tID0gXCIwXCI7XG5cdFx0XHRcdHN0eWxlLmJvcmRlclRvcFdpZHRoID0gXCIwXCI7XG5cdFx0XHRcdHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gXCIwXCI7XG5cdFx0XHRcdHN0eWxlLmhlaWdodCA9IDA7XG5cdFx0XHR9O1xuXHRcblx0XHQvLyBJZiB0aGUgc2Nyb2xsYmFyIHZpc2liaWxpdHkgaGFzIGNoYW5nZWQgZnJvbSB0aGUgbGFzdCBkcmF3LCB3ZSBuZWVkIHRvXG5cdFx0Ly8gYWRqdXN0IHRoZSBjb2x1bW4gc2l6ZXMgYXMgdGhlIHRhYmxlIHdpZHRoIHdpbGwgaGF2ZSBjaGFuZ2VkIHRvIGFjY291bnRcblx0XHQvLyBmb3IgdGhlIHNjcm9sbGJhclxuXHRcdHZhciBzY3JvbGxCYXJWaXMgPSBkaXZCb2R5RWwuc2Nyb2xsSGVpZ2h0ID4gZGl2Qm9keUVsLmNsaWVudEhlaWdodDtcblx0XHRcblx0XHRpZiAoIHNldHRpbmdzLnNjcm9sbEJhclZpcyAhPT0gc2Nyb2xsQmFyVmlzICYmIHNldHRpbmdzLnNjcm9sbEJhclZpcyAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0c2V0dGluZ3Muc2Nyb2xsQmFyVmlzID0gc2Nyb2xsQmFyVmlzO1xuXHRcdFx0X2ZuQWRqdXN0Q29sdW1uU2l6aW5nKCBzZXR0aW5ncyApO1xuXHRcdFx0cmV0dXJuOyAvLyBhZGp1c3QgY29sdW1uIHNpemluZyB3aWxsIGNhbGwgdGhpcyBmdW5jdGlvbiBhZ2FpblxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHNldHRpbmdzLnNjcm9sbEJhclZpcyA9IHNjcm9sbEJhclZpcztcblx0XHR9XG5cdFxuXHRcdC8qXG5cdFx0ICogMS4gUmUtY3JlYXRlIHRoZSB0YWJsZSBpbnNpZGUgdGhlIHNjcm9sbGluZyBkaXZcblx0XHQgKi9cblx0XG5cdFx0Ly8gUmVtb3ZlIHRoZSBvbGQgbWluaW1pc2VkIHRoZWFkIGFuZCB0Zm9vdCBlbGVtZW50cyBpbiB0aGUgaW5uZXIgdGFibGVcblx0XHR0YWJsZS5jaGlsZHJlbigndGhlYWQsIHRmb290JykucmVtb3ZlKCk7XG5cdFxuXHRcdC8vIENsb25lIHRoZSBjdXJyZW50IGhlYWRlciBhbmQgZm9vdGVyIGVsZW1lbnRzIGFuZCB0aGVuIHBsYWNlIGl0IGludG8gdGhlIGlubmVyIHRhYmxlXG5cdFx0aGVhZGVyQ29weSA9IGhlYWRlci5jbG9uZSgpLnByZXBlbmRUbyggdGFibGUgKTtcblx0XHRoZWFkZXJUcmdFbHMgPSBoZWFkZXIuZmluZCgndHInKTsgLy8gb3JpZ2luYWwgaGVhZGVyIGlzIGluIGl0cyBvd24gdGFibGVcblx0XHRoZWFkZXJTcmNFbHMgPSBoZWFkZXJDb3B5LmZpbmQoJ3RyJyk7XG5cdFx0aGVhZGVyQ29weS5maW5kKCd0aCwgdGQnKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuXHRcblx0XHRpZiAoIGZvb3RlciApIHtcblx0XHRcdGZvb3RlckNvcHkgPSBmb290ZXIuY2xvbmUoKS5wcmVwZW5kVG8oIHRhYmxlICk7XG5cdFx0XHRmb290ZXJUcmdFbHMgPSBmb290ZXIuZmluZCgndHInKTsgLy8gdGhlIG9yaWdpbmFsIHRmb290IGlzIGluIGl0cyBvd24gdGFibGUgYW5kIG11c3QgYmUgc2l6ZWRcblx0XHRcdGZvb3RlclNyY0VscyA9IGZvb3RlckNvcHkuZmluZCgndHInKTtcblx0XHR9XG5cdFxuXHRcblx0XHQvKlxuXHRcdCAqIDIuIFRha2UgbGl2ZSBtZWFzdXJlbWVudHMgZnJvbSB0aGUgRE9NIC0gZG8gbm90IGFsdGVyIHRoZSBET00gaXRzZWxmIVxuXHRcdCAqL1xuXHRcblx0XHQvLyBSZW1vdmUgb2xkIHNpemluZyBhbmQgYXBwbHkgdGhlIGNhbGN1bGF0ZWQgY29sdW1uIHdpZHRoc1xuXHRcdC8vIEdldCB0aGUgdW5pcXVlIGNvbHVtbiBoZWFkZXJzIGluIHRoZSBuZXdseSBjcmVhdGVkIChjbG9uZWQpIGhlYWRlci4gV2Ugd2FudCB0byBhcHBseSB0aGVcblx0XHQvLyBjYWxjdWxhdGVkIHNpemVzIHRvIHRoaXMgaGVhZGVyXG5cdFx0aWYgKCAhIHNjcm9sbFggKVxuXHRcdHtcblx0XHRcdGRpdkJvZHlTdHlsZS53aWR0aCA9ICcxMDAlJztcblx0XHRcdGRpdkhlYWRlclswXS5zdHlsZS53aWR0aCA9ICcxMDAlJztcblx0XHR9XG5cdFxuXHRcdCQuZWFjaCggX2ZuR2V0VW5pcXVlVGhzKCBzZXR0aW5ncywgaGVhZGVyQ29weSApLCBmdW5jdGlvbiAoIGksIGVsICkge1xuXHRcdFx0aWR4ID0gX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgoIHNldHRpbmdzLCBpICk7XG5cdFx0XHRlbC5zdHlsZS53aWR0aCA9IHNldHRpbmdzLmFvQ29sdW1uc1tpZHhdLnNXaWR0aDtcblx0XHR9ICk7XG5cdFxuXHRcdGlmICggZm9vdGVyICkge1xuXHRcdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuKSB7XG5cdFx0XHRcdG4uc3R5bGUud2lkdGggPSBcIlwiO1xuXHRcdFx0fSwgZm9vdGVyU3JjRWxzICk7XG5cdFx0fVxuXHRcblx0XHQvLyBTaXplIHRoZSB0YWJsZSBhcyBhIHdob2xlXG5cdFx0c2FuaXR5V2lkdGggPSB0YWJsZS5vdXRlcldpZHRoKCk7XG5cdFx0aWYgKCBzY3JvbGxYID09PSBcIlwiICkge1xuXHRcdFx0Ly8gTm8geCBzY3JvbGxpbmdcblx0XHRcdHRhYmxlU3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XG5cdFx0XHQvLyBJRTcgd2lsbCBtYWtlIHRoZSB3aWR0aCBvZiB0aGUgdGFibGUgd2hlbiAxMDAlIGluY2x1ZGUgdGhlIHNjcm9sbGJhclxuXHRcdFx0Ly8gLSB3aGljaCBpcyBzaG91bGRuJ3QuIFdoZW4gdGhlcmUgaXMgYSBzY3JvbGxiYXIgd2UgbmVlZCB0byB0YWtlIHRoaXNcblx0XHRcdC8vIGludG8gYWNjb3VudC5cblx0XHRcdGlmICggaWU2NyAmJiAodGFibGUuZmluZCgndGJvZHknKS5oZWlnaHQoKSA+IGRpdkJvZHlFbC5vZmZzZXRIZWlnaHQgfHxcblx0XHRcdFx0ZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHRhYmxlU3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggdGFibGUub3V0ZXJXaWR0aCgpIC0gYmFyV2lkdGgpO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJlY2FsY3VsYXRlIHRoZSBzYW5pdHkgd2lkdGhcblx0XHRcdHNhbml0eVdpZHRoID0gdGFibGUub3V0ZXJXaWR0aCgpO1xuXHRcdH1cblx0XHRlbHNlIGlmICggc2Nyb2xsWElubmVyICE9PSBcIlwiICkge1xuXHRcdFx0Ly8gbGVnYWN5IHggc2Nyb2xsIGlubmVyIGhhcyBiZWVuIGdpdmVuIC0gdXNlIGl0XG5cdFx0XHR0YWJsZVN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3Moc2Nyb2xsWElubmVyKTtcblx0XG5cdFx0XHQvLyBSZWNhbGN1bGF0ZSB0aGUgc2FuaXR5IHdpZHRoXG5cdFx0XHRzYW5pdHlXaWR0aCA9IHRhYmxlLm91dGVyV2lkdGgoKTtcblx0XHR9XG5cdFxuXHRcdC8vIEhpZGRlbiBoZWFkZXIgc2hvdWxkIGhhdmUgemVybyBoZWlnaHQsIHNvIHJlbW92ZSBwYWRkaW5nIGFuZCBib3JkZXJzLiBUaGVuXG5cdFx0Ly8gc2V0IHRoZSB3aWR0aCBiYXNlZCBvbiB0aGUgcmVhbCBoZWFkZXJzXG5cdFxuXHRcdC8vIEFwcGx5IGFsbCBzdHlsZXMgaW4gb25lIHBhc3Ncblx0XHRfZm5BcHBseVRvQ2hpbGRyZW4oIHplcm9PdXQsIGhlYWRlclNyY0VscyApO1xuXHRcblx0XHQvLyBSZWFkIGFsbCB3aWR0aHMgaW4gbmV4dCBwYXNzXG5cdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuU2l6ZXIpIHtcblx0XHRcdGhlYWRlckNvbnRlbnQucHVzaCggblNpemVyLmlubmVySFRNTCApO1xuXHRcdFx0aGVhZGVyV2lkdGhzLnB1c2goIF9mblN0cmluZ1RvQ3NzKCAkKG5TaXplcikuY3NzKCd3aWR0aCcpICkgKTtcblx0XHR9LCBoZWFkZXJTcmNFbHMgKTtcblx0XG5cdFx0Ly8gQXBwbHkgYWxsIHdpZHRocyBpbiBmaW5hbCBwYXNzXG5cdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuVG9TaXplLCBpKSB7XG5cdFx0XHRuVG9TaXplLnN0eWxlLndpZHRoID0gaGVhZGVyV2lkdGhzW2ldO1xuXHRcdH0sIGhlYWRlclRyZ0VscyApO1xuXHRcblx0XHQkKGhlYWRlclNyY0VscykuaGVpZ2h0KDApO1xuXHRcblx0XHQvKiBTYW1lIGFnYWluIHdpdGggdGhlIGZvb3RlciBpZiB3ZSBoYXZlIG9uZSAqL1xuXHRcdGlmICggZm9vdGVyIClcblx0XHR7XG5cdFx0XHRfZm5BcHBseVRvQ2hpbGRyZW4oIHplcm9PdXQsIGZvb3RlclNyY0VscyApO1xuXHRcblx0XHRcdF9mbkFwcGx5VG9DaGlsZHJlbiggZnVuY3Rpb24oblNpemVyKSB7XG5cdFx0XHRcdGZvb3RlcldpZHRocy5wdXNoKCBfZm5TdHJpbmdUb0NzcyggJChuU2l6ZXIpLmNzcygnd2lkdGgnKSApICk7XG5cdFx0XHR9LCBmb290ZXJTcmNFbHMgKTtcblx0XG5cdFx0XHRfZm5BcHBseVRvQ2hpbGRyZW4oIGZ1bmN0aW9uKG5Ub1NpemUsIGkpIHtcblx0XHRcdFx0blRvU2l6ZS5zdHlsZS53aWR0aCA9IGZvb3RlcldpZHRoc1tpXTtcblx0XHRcdH0sIGZvb3RlclRyZ0VscyApO1xuXHRcblx0XHRcdCQoZm9vdGVyU3JjRWxzKS5oZWlnaHQoMCk7XG5cdFx0fVxuXHRcblx0XG5cdFx0Lypcblx0XHQgKiAzLiBBcHBseSB0aGUgbWVhc3VyZW1lbnRzXG5cdFx0ICovXG5cdFxuXHRcdC8vIFwiSGlkZVwiIHRoZSBoZWFkZXIgYW5kIGZvb3RlciB0aGF0IHdlIHVzZWQgZm9yIHRoZSBzaXppbmcuIFdlIG5lZWQgdG8ga2VlcFxuXHRcdC8vIHRoZSBjb250ZW50IG9mIHRoZSBjZWxsIHNvIHRoYXQgdGhlIHdpZHRoIGFwcGxpZWQgdG8gdGhlIGhlYWRlciBhbmQgYm9keVxuXHRcdC8vIGJvdGggbWF0Y2gsIGJ1dCB3ZSB3YW50IHRvIGhpZGUgaXQgY29tcGxldGVseS4gV2Ugd2FudCB0byBhbHNvIGZpeCB0aGVpclxuXHRcdC8vIHdpZHRoIHRvIHdoYXQgdGhleSBjdXJyZW50bHkgYXJlXG5cdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuU2l6ZXIsIGkpIHtcblx0XHRcdG5TaXplci5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfc2l6aW5nXCIgc3R5bGU9XCJoZWlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47XCI+JytoZWFkZXJDb250ZW50W2ldKyc8L2Rpdj4nO1xuXHRcdFx0blNpemVyLnN0eWxlLndpZHRoID0gaGVhZGVyV2lkdGhzW2ldO1xuXHRcdH0sIGhlYWRlclNyY0VscyApO1xuXHRcblx0XHRpZiAoIGZvb3RlciApXG5cdFx0e1xuXHRcdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuU2l6ZXIsIGkpIHtcblx0XHRcdFx0blNpemVyLmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdG5TaXplci5zdHlsZS53aWR0aCA9IGZvb3RlcldpZHRoc1tpXTtcblx0XHRcdH0sIGZvb3RlclNyY0VscyApO1xuXHRcdH1cblx0XG5cdFx0Ly8gU2FuaXR5IGNoZWNrIHRoYXQgdGhlIHRhYmxlIGlzIG9mIGEgc2Vuc2libGUgd2lkdGguIElmIG5vdCB0aGVuIHdlIGFyZSBnb2luZyB0byBnZXRcblx0XHQvLyBtaXNhbGlnbm1lbnQgLSB0cnkgdG8gcHJldmVudCB0aGlzIGJ5IG5vdCBhbGxvd2luZyB0aGUgdGFibGUgdG8gc2hyaW5rIGJlbG93IGl0cyBtaW4gd2lkdGhcblx0XHRpZiAoIHRhYmxlLm91dGVyV2lkdGgoKSA8IHNhbml0eVdpZHRoIClcblx0XHR7XG5cdFx0XHQvLyBUaGUgbWluIHdpZHRoIGRlcGVuZHMgdXBvbiBpZiB3ZSBoYXZlIGEgdmVydGljYWwgc2Nyb2xsYmFyIHZpc2libGUgb3Igbm90ICovXG5cdFx0XHRjb3JyZWN0aW9uID0gKChkaXZCb2R5RWwuc2Nyb2xsSGVpZ2h0ID4gZGl2Qm9keUVsLm9mZnNldEhlaWdodCB8fFxuXHRcdFx0XHRkaXZCb2R5LmNzcygnb3ZlcmZsb3cteScpID09IFwic2Nyb2xsXCIpKSA/XG5cdFx0XHRcdFx0c2FuaXR5V2lkdGgrYmFyV2lkdGggOlxuXHRcdFx0XHRcdHNhbml0eVdpZHRoO1xuXHRcblx0XHRcdC8vIElFNi83IGFyZSBhIGxhdyB1bnRvIHRoZW1zZWx2ZXMuLi5cblx0XHRcdGlmICggaWU2NyAmJiAoZGl2Qm9keUVsLnNjcm9sbEhlaWdodCA+XG5cdFx0XHRcdGRpdkJvZHlFbC5vZmZzZXRIZWlnaHQgfHwgZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHRhYmxlU3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggY29ycmVjdGlvbi1iYXJXaWR0aCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFuZCBnaXZlIHRoZSB1c2VyIGEgd2FybmluZyB0aGF0IHdlJ3ZlIHN0b3BwZWQgdGhlIHRhYmxlIGdldHRpbmcgdG9vIHNtYWxsXG5cdFx0XHRpZiAoIHNjcm9sbFggPT09IFwiXCIgfHwgc2Nyb2xsWElubmVyICE9PSBcIlwiICkge1xuXHRcdFx0XHRfZm5Mb2coIHNldHRpbmdzLCAxLCAnUG9zc2libGUgY29sdW1uIG1pc2FsaWdubWVudCcsIDYgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGNvcnJlY3Rpb24gPSAnMTAwJSc7XG5cdFx0fVxuXHRcblx0XHQvLyBBcHBseSB0byB0aGUgY29udGFpbmVyIGVsZW1lbnRzXG5cdFx0ZGl2Qm9keVN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGNvcnJlY3Rpb24gKTtcblx0XHRkaXZIZWFkZXJTdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKCBjb3JyZWN0aW9uICk7XG5cdFxuXHRcdGlmICggZm9vdGVyICkge1xuXHRcdFx0c2V0dGluZ3MublNjcm9sbEZvb3Quc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggY29ycmVjdGlvbiApO1xuXHRcdH1cblx0XG5cdFxuXHRcdC8qXG5cdFx0ICogNC4gQ2xlYW4gdXBcblx0XHQgKi9cblx0XHRpZiAoICEgc2Nyb2xsWSApIHtcblx0XHRcdC8qIElFNzwgcHV0cyBhIHZlcnRpY2FsIHNjcm9sbGJhciBpbiBwbGFjZSAod2hlbiBpdCBzaG91bGRuJ3QgYmUpIGR1ZSB0byBzdWJ0cmFjdGluZ1xuXHRcdFx0ICogdGhlIHNjcm9sbGJhciBoZWlnaHQgZnJvbSB0aGUgdmlzaWJsZSBkaXNwbGF5LCByYXRoZXIgdGhhbiBhZGRpbmcgaXQgb24uIFdlIG5lZWQgdG9cblx0XHRcdCAqIHNldCB0aGUgaGVpZ2h0IGluIG9yZGVyIHRvIHNvcnQgdGhpcy4gRG9uJ3Qgd2FudCB0byBkbyBpdCBpbiBhbnkgb3RoZXIgYnJvd3NlcnMuXG5cdFx0XHQgKi9cblx0XHRcdGlmICggaWU2NyApIHtcblx0XHRcdFx0ZGl2Qm9keVN0eWxlLmhlaWdodCA9IF9mblN0cmluZ1RvQ3NzKCB0YWJsZUVsLm9mZnNldEhlaWdodCtiYXJXaWR0aCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0LyogRmluYWxseSBzZXQgdGhlIHdpZHRoJ3Mgb2YgdGhlIGhlYWRlciBhbmQgZm9vdGVyIHRhYmxlcyAqL1xuXHRcdHZhciBpT3V0ZXJXaWR0aCA9IHRhYmxlLm91dGVyV2lkdGgoKTtcblx0XHRkaXZIZWFkZXJUYWJsZVswXS5zdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKCBpT3V0ZXJXaWR0aCApO1xuXHRcdGRpdkhlYWRlcklubmVyU3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggaU91dGVyV2lkdGggKTtcblx0XG5cdFx0Ly8gRmlndXJlIG91dCBpZiB0aGVyZSBhcmUgc2Nyb2xsYmFyIHByZXNlbnQgLSBpZiBzbyB0aGVuIHdlIG5lZWQgYSB0aGUgaGVhZGVyIGFuZCBmb290ZXIgdG9cblx0XHQvLyBwcm92aWRlIGEgYml0IG1vcmUgc3BhY2UgdG8gYWxsb3cgXCJvdmVyZmxvd1wiIHNjcm9sbGluZyAoaS5lLiBwYXN0IHRoZSBzY3JvbGxiYXIpXG5cdFx0dmFyIGJTY3JvbGxpbmcgPSB0YWJsZS5oZWlnaHQoKSA+IGRpdkJvZHlFbC5jbGllbnRIZWlnaHQgfHwgZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiO1xuXHRcdHZhciBwYWRkaW5nID0gJ3BhZGRpbmcnICsgKGJyb3dzZXIuYlNjcm9sbGJhckxlZnQgPyAnTGVmdCcgOiAnUmlnaHQnICk7XG5cdFx0ZGl2SGVhZGVySW5uZXJTdHlsZVsgcGFkZGluZyBdID0gYlNjcm9sbGluZyA/IGJhcldpZHRoK1wicHhcIiA6IFwiMHB4XCI7XG5cdFxuXHRcdGlmICggZm9vdGVyICkge1xuXHRcdFx0ZGl2Rm9vdGVyVGFibGVbMF0uc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggaU91dGVyV2lkdGggKTtcblx0XHRcdGRpdkZvb3RlcklubmVyWzBdLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGlPdXRlcldpZHRoICk7XG5cdFx0XHRkaXZGb290ZXJJbm5lclswXS5zdHlsZVtwYWRkaW5nXSA9IGJTY3JvbGxpbmcgPyBiYXJXaWR0aCtcInB4XCIgOiBcIjBweFwiO1xuXHRcdH1cblx0XG5cdFx0LyogQWRqdXN0IHRoZSBwb3NpdGlvbiBvZiB0aGUgaGVhZGVyIGluIGNhc2Ugd2UgbG9vc2UgdGhlIHktc2Nyb2xsYmFyICovXG5cdFx0ZGl2Qm9keS5zY3JvbGwoKTtcblx0XG5cdFx0Ly8gSWYgc29ydGluZyBvciBmaWx0ZXJpbmcgaGFzIG9jY3VycmVkLCBqdW1wIHRoZSBzY3JvbGxpbmcgYmFjayB0byB0aGUgdG9wXG5cdFx0Ly8gb25seSBpZiB3ZSBhcmVuJ3QgaG9sZGluZyB0aGUgcG9zaXRpb25cblx0XHRpZiAoIChzZXR0aW5ncy5iU29ydGVkIHx8IHNldHRpbmdzLmJGaWx0ZXJlZCkgJiYgISBzZXR0aW5ncy5fZHJhd0hvbGQgKSB7XG5cdFx0XHRkaXZCb2R5RWwuc2Nyb2xsVG9wID0gMDtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIEFwcGx5IGEgZ2l2ZW4gZnVuY3Rpb24gdG8gdGhlIGRpc3BsYXkgY2hpbGQgbm9kZXMgb2YgYW4gZWxlbWVudCBhcnJheSAodHlwaWNhbGx5XG5cdCAqIFREIGNoaWxkcmVuIG9mIFRSIHJvd3Ncblx0ICogIEBwYXJhbSB7ZnVuY3Rpb259IGZuIE1ldGhvZCB0byBhcHBseSB0byB0aGUgb2JqZWN0c1xuXHQgKiAgQHBhcmFtIGFycmF5IHtub2Rlc30gYW4xIExpc3Qgb2YgZWxlbWVudHMgdG8gbG9vayB0aHJvdWdoIGZvciBkaXNwbGF5IGNoaWxkcmVuXG5cdCAqICBAcGFyYW0gYXJyYXkge25vZGVzfSBhbjIgQW5vdGhlciBsaXN0IChpZGVudGljYWwgc3RydWN0dXJlIHRvIHRoZSBmaXJzdCkgLSBvcHRpb25hbFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5BcHBseVRvQ2hpbGRyZW4oIGZuLCBhbjEsIGFuMiApXG5cdHtcblx0XHR2YXIgaW5kZXg9MCwgaT0wLCBpTGVuPWFuMS5sZW5ndGg7XG5cdFx0dmFyIG5Ob2RlMSwgbk5vZGUyO1xuXHRcblx0XHR3aGlsZSAoIGkgPCBpTGVuICkge1xuXHRcdFx0bk5vZGUxID0gYW4xW2ldLmZpcnN0Q2hpbGQ7XG5cdFx0XHRuTm9kZTIgPSBhbjIgPyBhbjJbaV0uZmlyc3RDaGlsZCA6IG51bGw7XG5cdFxuXHRcdFx0d2hpbGUgKCBuTm9kZTEgKSB7XG5cdFx0XHRcdGlmICggbk5vZGUxLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdGlmICggYW4yICkge1xuXHRcdFx0XHRcdFx0Zm4oIG5Ob2RlMSwgbk5vZGUyLCBpbmRleCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdGZuKCBuTm9kZTEsIGluZGV4ICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRuTm9kZTEgPSBuTm9kZTEubmV4dFNpYmxpbmc7XG5cdFx0XHRcdG5Ob2RlMiA9IGFuMiA/IG5Ob2RlMi5uZXh0U2libGluZyA6IG51bGw7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aSsrO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdFxuXHR2YXIgX19yZV9odG1sX3JlbW92ZSA9IC88Lio/Pi9nO1xuXHRcblx0XG5cdC8qKlxuXHQgKiBDYWxjdWxhdGUgdGhlIHdpZHRoIG9mIGNvbHVtbnMgZm9yIHRoZSB0YWJsZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMgKCBvU2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHR0YWJsZSA9IG9TZXR0aW5ncy5uVGFibGUsXG5cdFx0XHRjb2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucyxcblx0XHRcdHNjcm9sbCA9IG9TZXR0aW5ncy5vU2Nyb2xsLFxuXHRcdFx0c2Nyb2xsWSA9IHNjcm9sbC5zWSxcblx0XHRcdHNjcm9sbFggPSBzY3JvbGwuc1gsXG5cdFx0XHRzY3JvbGxYSW5uZXIgPSBzY3JvbGwuc1hJbm5lcixcblx0XHRcdGNvbHVtbkNvdW50ID0gY29sdW1ucy5sZW5ndGgsXG5cdFx0XHR2aXNpYmxlQ29sdW1ucyA9IF9mbkdldENvbHVtbnMoIG9TZXR0aW5ncywgJ2JWaXNpYmxlJyApLFxuXHRcdFx0aGVhZGVyQ2VsbHMgPSAkKCd0aCcsIG9TZXR0aW5ncy5uVEhlYWQpLFxuXHRcdFx0dGFibGVXaWR0aEF0dHIgPSB0YWJsZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyksIC8vIGZyb20gRE9NIGVsZW1lbnRcblx0XHRcdHRhYmxlQ29udGFpbmVyID0gdGFibGUucGFyZW50Tm9kZSxcblx0XHRcdHVzZXJJbnB1dHMgPSBmYWxzZSxcblx0XHRcdGksIGNvbHVtbiwgY29sdW1uSWR4LCB3aWR0aCwgb3V0ZXJXaWR0aCxcblx0XHRcdGJyb3dzZXIgPSBvU2V0dGluZ3Mub0Jyb3dzZXIsXG5cdFx0XHRpZTY3ID0gYnJvd3Nlci5iU2Nyb2xsT3ZlcnNpemU7XG5cdFxuXHRcdHZhciBzdHlsZVdpZHRoID0gdGFibGUuc3R5bGUud2lkdGg7XG5cdFx0aWYgKCBzdHlsZVdpZHRoICYmIHN0eWxlV2lkdGguaW5kZXhPZignJScpICE9PSAtMSApIHtcblx0XHRcdHRhYmxlV2lkdGhBdHRyID0gc3R5bGVXaWR0aDtcblx0XHR9XG5cdFxuXHRcdC8qIENvbnZlcnQgYW55IHVzZXIgaW5wdXQgc2l6ZXMgaW50byBwaXhlbCBzaXplcyAqL1xuXHRcdGZvciAoIGk9MCA7IGk8dmlzaWJsZUNvbHVtbnMubGVuZ3RoIDsgaSsrICkge1xuXHRcdFx0Y29sdW1uID0gY29sdW1uc1sgdmlzaWJsZUNvbHVtbnNbaV0gXTtcblx0XG5cdFx0XHRpZiAoIGNvbHVtbi5zV2lkdGggIT09IG51bGwgKSB7XG5cdFx0XHRcdGNvbHVtbi5zV2lkdGggPSBfZm5Db252ZXJ0VG9XaWR0aCggY29sdW1uLnNXaWR0aE9yaWcsIHRhYmxlQ29udGFpbmVyICk7XG5cdFxuXHRcdFx0XHR1c2VySW5wdXRzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8qIElmIHRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgRE9NIGVxdWFscyB0aGUgbnVtYmVyIHRoYXQgd2UgaGF2ZSB0b1xuXHRcdCAqIHByb2Nlc3MgaW4gRGF0YVRhYmxlcywgdGhlbiB3ZSBjYW4gdXNlIHRoZSBvZmZzZXRzIHRoYXQgYXJlIGNyZWF0ZWQgYnlcblx0XHQgKiB0aGUgd2ViLSBicm93c2VyLiBObyBjdXN0b20gc2l6ZXMgY2FuIGJlIHNldCBpbiBvcmRlciBmb3IgdGhpcyB0byBoYXBwZW4sXG5cdFx0ICogbm9yIHNjcm9sbGluZyB1c2VkXG5cdFx0ICovXG5cdFx0aWYgKCBpZTY3IHx8ICEgdXNlcklucHV0cyAmJiAhIHNjcm9sbFggJiYgISBzY3JvbGxZICYmXG5cdFx0ICAgICBjb2x1bW5Db3VudCA9PSBfZm5WaXNibGVDb2x1bW5zKCBvU2V0dGluZ3MgKSAmJlxuXHRcdCAgICAgY29sdW1uQ291bnQgPT0gaGVhZGVyQ2VsbHMubGVuZ3RoXG5cdFx0KSB7XG5cdFx0XHRmb3IgKCBpPTAgOyBpPGNvbHVtbkNvdW50IDsgaSsrICkge1xuXHRcdFx0XHR2YXIgY29sSWR4ID0gX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgoIG9TZXR0aW5ncywgaSApO1xuXHRcblx0XHRcdFx0aWYgKCBjb2xJZHggIT09IG51bGwgKSB7XG5cdFx0XHRcdFx0Y29sdW1uc1sgY29sSWR4IF0uc1dpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGhlYWRlckNlbGxzLmVxKGkpLndpZHRoKCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0Ly8gT3RoZXJ3aXNlIGNvbnN0cnVjdCBhIHNpbmdsZSByb3csIHdvcnN0IGNhc2UsIHRhYmxlIHdpdGggdGhlIHdpZGVzdFxuXHRcdFx0Ly8gbm9kZSBpbiB0aGUgZGF0YSwgYXNzaWduIGFueSB1c2VyIGRlZmluZWQgd2lkdGhzLCB0aGVuIGluc2VydCBpdCBpbnRvXG5cdFx0XHQvLyB0aGUgRE9NIGFuZCBhbGxvdyB0aGUgYnJvd3NlciB0byBkbyBhbGwgdGhlIGhhcmQgd29yayBvZiBjYWxjdWxhdGluZ1xuXHRcdFx0Ly8gdGFibGUgd2lkdGhzXG5cdFx0XHR2YXIgdG1wVGFibGUgPSAkKHRhYmxlKS5jbG9uZSgpIC8vIGRvbid0IHVzZSBjbG9uZU5vZGUgLSBJRTggd2lsbCByZW1vdmUgZXZlbnRzIG9uIHRoZSBtYWluIHRhYmxlXG5cdFx0XHRcdC5jc3MoICd2aXNpYmlsaXR5JywgJ2hpZGRlbicgKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggJ2lkJyApO1xuXHRcblx0XHRcdC8vIENsZWFuIHVwIHRoZSB0YWJsZSBib2R5XG5cdFx0XHR0bXBUYWJsZS5maW5kKCd0Ym9keSB0cicpLnJlbW92ZSgpO1xuXHRcdFx0dmFyIHRyID0gJCgnPHRyLz4nKS5hcHBlbmRUbyggdG1wVGFibGUuZmluZCgndGJvZHknKSApO1xuXHRcblx0XHRcdC8vIENsb25lIHRoZSB0YWJsZSBoZWFkZXIgYW5kIGZvb3RlciAtIHdlIGNhbid0IHVzZSB0aGUgaGVhZGVyIC8gZm9vdGVyXG5cdFx0XHQvLyBmcm9tIHRoZSBjbG9uZWQgdGFibGUsIHNpbmNlIGlmIHNjcm9sbGluZyBpcyBhY3RpdmUsIHRoZSB0YWJsZSdzXG5cdFx0XHQvLyByZWFsIGhlYWRlciBhbmQgZm9vdGVyIGFyZSBjb250YWluZWQgaW4gZGlmZmVyZW50IHRhYmxlIHRhZ3Ncblx0XHRcdHRtcFRhYmxlLmZpbmQoJ3RoZWFkLCB0Zm9vdCcpLnJlbW92ZSgpO1xuXHRcdFx0dG1wVGFibGVcblx0XHRcdFx0LmFwcGVuZCggJChvU2V0dGluZ3MublRIZWFkKS5jbG9uZSgpIClcblx0XHRcdFx0LmFwcGVuZCggJChvU2V0dGluZ3MublRGb290KS5jbG9uZSgpICk7XG5cdFxuXHRcdFx0Ly8gUmVtb3ZlIGFueSBhc3NpZ25lZCB3aWR0aHMgZnJvbSB0aGUgZm9vdGVyIChmcm9tIHNjcm9sbGluZylcblx0XHRcdHRtcFRhYmxlLmZpbmQoJ3Rmb290IHRoLCB0Zm9vdCB0ZCcpLmNzcygnd2lkdGgnLCAnJyk7XG5cdFxuXHRcdFx0Ly8gQXBwbHkgY3VzdG9tIHNpemluZyB0byB0aGUgY2xvbmVkIGhlYWRlclxuXHRcdFx0aGVhZGVyQ2VsbHMgPSBfZm5HZXRVbmlxdWVUaHMoIG9TZXR0aW5ncywgdG1wVGFibGUuZmluZCgndGhlYWQnKVswXSApO1xuXHRcblx0XHRcdGZvciAoIGk9MCA7IGk8dmlzaWJsZUNvbHVtbnMubGVuZ3RoIDsgaSsrICkge1xuXHRcdFx0XHRjb2x1bW4gPSBjb2x1bW5zWyB2aXNpYmxlQ29sdW1uc1tpXSBdO1xuXHRcblx0XHRcdFx0aGVhZGVyQ2VsbHNbaV0uc3R5bGUud2lkdGggPSBjb2x1bW4uc1dpZHRoT3JpZyAhPT0gbnVsbCAmJiBjb2x1bW4uc1dpZHRoT3JpZyAhPT0gJycgP1xuXHRcdFx0XHRcdF9mblN0cmluZ1RvQ3NzKCBjb2x1bW4uc1dpZHRoT3JpZyApIDpcblx0XHRcdFx0XHQnJztcblx0XG5cdFx0XHRcdC8vIEZvciBzY3JvbGxYIHdlIG5lZWQgdG8gZm9yY2UgdGhlIGNvbHVtbiB3aWR0aCBvdGhlcndpc2UgdGhlXG5cdFx0XHRcdC8vIGJyb3dzZXIgd2lsbCBjb2xsYXBzZSBpdC4gSWYgdGhpcyB3aWR0aCBpcyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHRcdC8vIHdpZHRoIHRoZSBjb2x1bW4gcmVxdWlyZXMsIHRoZW4gaXQgd2lsbCBoYXZlIG5vIGVmZmVjdFxuXHRcdFx0XHRpZiAoIGNvbHVtbi5zV2lkdGhPcmlnICYmIHNjcm9sbFggKSB7XG5cdFx0XHRcdFx0JCggaGVhZGVyQ2VsbHNbaV0gKS5hcHBlbmQoICQoJzxkaXYvPicpLmNzcygge1xuXHRcdFx0XHRcdFx0d2lkdGg6IGNvbHVtbi5zV2lkdGhPcmlnLFxuXHRcdFx0XHRcdFx0bWFyZ2luOiAwLFxuXHRcdFx0XHRcdFx0cGFkZGluZzogMCxcblx0XHRcdFx0XHRcdGJvcmRlcjogMCxcblx0XHRcdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0XHRcdH0gKSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRmluZCB0aGUgd2lkZXN0IGNlbGwgZm9yIGVhY2ggY29sdW1uIGFuZCBwdXQgaXQgaW50byB0aGUgdGFibGVcblx0XHRcdGlmICggb1NldHRpbmdzLmFvRGF0YS5sZW5ndGggKSB7XG5cdFx0XHRcdGZvciAoIGk9MCA7IGk8dmlzaWJsZUNvbHVtbnMubGVuZ3RoIDsgaSsrICkge1xuXHRcdFx0XHRcdGNvbHVtbklkeCA9IHZpc2libGVDb2x1bW5zW2ldO1xuXHRcdFx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbIGNvbHVtbklkeCBdO1xuXHRcblx0XHRcdFx0XHQkKCBfZm5HZXRXaWRlc3ROb2RlKCBvU2V0dGluZ3MsIGNvbHVtbklkeCApIClcblx0XHRcdFx0XHRcdC5jbG9uZSggZmFsc2UgKVxuXHRcdFx0XHRcdFx0LmFwcGVuZCggY29sdW1uLnNDb250ZW50UGFkZGluZyApXG5cdFx0XHRcdFx0XHQuYXBwZW5kVG8oIHRyICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBUYWJsZSBoYXMgYmVlbiBidWlsdCwgYXR0YWNoIHRvIHRoZSBkb2N1bWVudCBzbyB3ZSBjYW4gd29yayB3aXRoIGl0LlxuXHRcdFx0Ly8gQSBob2xkaW5nIGVsZW1lbnQgaXMgdXNlZCwgcG9zaXRpb25lZCBhdCB0aGUgdG9wIG9mIHRoZSBjb250YWluZXJcblx0XHRcdC8vIHdpdGggbWluaW1hbCBoZWlnaHQsIHNvIGl0IGhhcyBubyBlZmZlY3Qgb24gaWYgdGhlIGNvbnRhaW5lciBzY3JvbGxzXG5cdFx0XHQvLyBvciBub3QuIE90aGVyd2lzZSBpdCBtaWdodCB0cmlnZ2VyIHNjcm9sbGluZyB3aGVuIGl0IGFjdHVhbGx5IGlzbid0XG5cdFx0XHQvLyBuZWVkZWRcblx0XHRcdHZhciBob2xkZXIgPSAkKCc8ZGl2Lz4nKS5jc3MoIHNjcm9sbFggfHwgc2Nyb2xsWSA/XG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0aGVpZ2h0OiAxLFxuXHRcdFx0XHRcdFx0cmlnaHQ6IDAsXG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogJ2hpZGRlbidcblx0XHRcdFx0XHR9IDpcblx0XHRcdFx0XHR7fVxuXHRcdFx0XHQpXG5cdFx0XHRcdC5hcHBlbmQoIHRtcFRhYmxlIClcblx0XHRcdFx0LmFwcGVuZFRvKCB0YWJsZUNvbnRhaW5lciApO1xuXHRcblx0XHRcdC8vIFdoZW4gc2Nyb2xsaW5nIChYIG9yIFkpIHdlIHdhbnQgdG8gc2V0IHRoZSB3aWR0aCBvZiB0aGUgdGFibGUgYXMgXG5cdFx0XHQvLyBhcHByb3ByaWF0ZS4gSG93ZXZlciwgd2hlbiBub3Qgc2Nyb2xsaW5nIGxlYXZlIHRoZSB0YWJsZSB3aWR0aCBhcyBpdFxuXHRcdFx0Ly8gaXMuIFRoaXMgcmVzdWx0cyBpbiBzbGlnaHRseSBkaWZmZXJlbnQsIGJ1dCBJIHRoaW5rIGNvcnJlY3QgYmVoYXZpb3VyXG5cdFx0XHRpZiAoIHNjcm9sbFggJiYgc2Nyb2xsWElubmVyICkge1xuXHRcdFx0XHR0bXBUYWJsZS53aWR0aCggc2Nyb2xsWElubmVyICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICggc2Nyb2xsWCApIHtcblx0XHRcdFx0dG1wVGFibGUuY3NzKCAnd2lkdGgnLCAnYXV0bycgKTtcblx0XHRcdFx0dG1wVGFibGUucmVtb3ZlQXR0cignd2lkdGgnKTtcblx0XG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIG5vIHdpZHRoIGF0dHJpYnV0ZSBvciBzdHlsZSwgdGhlbiBhbGxvdyB0aGUgdGFibGUgdG9cblx0XHRcdFx0Ly8gY29sbGFwc2Vcblx0XHRcdFx0aWYgKCB0bXBUYWJsZS53aWR0aCgpIDwgdGFibGVDb250YWluZXIuY2xpZW50V2lkdGggJiYgdGFibGVXaWR0aEF0dHIgKSB7XG5cdFx0XHRcdFx0dG1wVGFibGUud2lkdGgoIHRhYmxlQ29udGFpbmVyLmNsaWVudFdpZHRoICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBzY3JvbGxZICkge1xuXHRcdFx0XHR0bXBUYWJsZS53aWR0aCggdGFibGVDb250YWluZXIuY2xpZW50V2lkdGggKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCB0YWJsZVdpZHRoQXR0ciApIHtcblx0XHRcdFx0dG1wVGFibGUud2lkdGgoIHRhYmxlV2lkdGhBdHRyICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gR2V0IHRoZSB3aWR0aCBvZiBlYWNoIGNvbHVtbiBpbiB0aGUgY29uc3RydWN0ZWQgdGFibGUgLSB3ZSBuZWVkIHRvXG5cdFx0XHQvLyBrbm93IHRoZSBpbm5lciB3aWR0aCAoc28gaXQgY2FuIGJlIGFzc2lnbmVkIHRvIHRoZSBvdGhlciB0YWJsZSdzXG5cdFx0XHQvLyBjZWxscykgYW5kIHRoZSBvdXRlciB3aWR0aCBzbyB3ZSBjYW4gY2FsY3VsYXRlIHRoZSBmdWxsIHdpZHRoIG9mIHRoZVxuXHRcdFx0Ly8gdGFibGUuIFRoaXMgaXMgc2FmZSBzaW5jZSBEYXRhVGFibGVzIHJlcXVpcmVzIGEgdW5pcXVlIGNlbGwgZm9yIGVhY2hcblx0XHRcdC8vIGNvbHVtbiwgYnV0IGlmIGV2ZXIgYSBoZWFkZXIgY2FuIHNwYW4gbXVsdGlwbGUgY29sdW1ucywgdGhpcyB3aWxsXG5cdFx0XHQvLyBuZWVkIHRvIGJlIG1vZGlmaWVkLlxuXHRcdFx0dmFyIHRvdGFsID0gMDtcblx0XHRcdGZvciAoIGk9MCA7IGk8dmlzaWJsZUNvbHVtbnMubGVuZ3RoIDsgaSsrICkge1xuXHRcdFx0XHR2YXIgY2VsbCA9ICQoaGVhZGVyQ2VsbHNbaV0pO1xuXHRcdFx0XHR2YXIgYm9yZGVyID0gY2VsbC5vdXRlcldpZHRoKCkgLSBjZWxsLndpZHRoKCk7XG5cdFxuXHRcdFx0XHQvLyBVc2UgZ2V0Qm91bmRpbmcuLi4gd2hlcmUgcG9zc2libGUgKG5vdCBJRTgtKSBiZWNhdXNlIGl0IGNhbiBnaXZlXG5cdFx0XHRcdC8vIHN1Yi1waXhlbCBhY2N1cmFjeSwgd2hpY2ggd2UgdGhlbiB3YW50IHRvIHJvdW5kIHVwIVxuXHRcdFx0XHR2YXIgYm91bmRpbmcgPSBicm93c2VyLmJCb3VuZGluZyA/XG5cdFx0XHRcdFx0TWF0aC5jZWlsKCBoZWFkZXJDZWxsc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApIDpcblx0XHRcdFx0XHRjZWxsLm91dGVyV2lkdGgoKTtcblx0XG5cdFx0XHRcdC8vIFRvdGFsIGlzIHRyYWNrZWQgdG8gcmVtb3ZlIGFueSBzdWItcGl4ZWwgZXJyb3JzIGFzIHRoZSBvdXRlcldpZHRoXG5cdFx0XHRcdC8vIG9mIHRoZSB0YWJsZSBtaWdodCBub3QgZXF1YWwgdGhlIHRvdGFsIGdpdmVuIGhlcmUgKElFISkuXG5cdFx0XHRcdHRvdGFsICs9IGJvdW5kaW5nO1xuXHRcblx0XHRcdFx0Ly8gV2lkdGggZm9yIGVhY2ggY29sdW1uIHRvIHVzZVxuXHRcdFx0XHRjb2x1bW5zWyB2aXNpYmxlQ29sdW1uc1tpXSBdLnNXaWR0aCA9IF9mblN0cmluZ1RvQ3NzKCBib3VuZGluZyAtIGJvcmRlciApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHRhYmxlLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIHRvdGFsICk7XG5cdFxuXHRcdFx0Ly8gRmluaXNoZWQgd2l0aCB0aGUgdGFibGUgLSBkaXRjaCBpdFxuXHRcdFx0aG9sZGVyLnJlbW92ZSgpO1xuXHRcdH1cblx0XG5cdFx0Ly8gSWYgdGhlcmUgaXMgYSB3aWR0aCBhdHRyLCB3ZSB3YW50IHRvIGF0dGFjaCBhbiBldmVudCBsaXN0ZW5lciB3aGljaFxuXHRcdC8vIGFsbG93cyB0aGUgdGFibGUgc2l6aW5nIHRvIGF1dG9tYXRpY2FsbHkgYWRqdXN0IHdoZW4gdGhlIHdpbmRvdyBpc1xuXHRcdC8vIHJlc2l6ZWQuIFVzZSB0aGUgd2lkdGggYXR0ciByYXRoZXIgdGhhbiBDU1MsIHNpbmNlIHdlIGNhbid0IGtub3cgaWYgdGhlXG5cdFx0Ly8gQ1NTIGlzIGEgcmVsYXRpdmUgdmFsdWUgb3IgYWJzb2x1dGUgLSBET00gcmVhZCBpcyBhbHdheXMgcHguXG5cdFx0aWYgKCB0YWJsZVdpZHRoQXR0ciApIHtcblx0XHRcdHRhYmxlLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIHRhYmxlV2lkdGhBdHRyICk7XG5cdFx0fVxuXHRcblx0XHRpZiAoICh0YWJsZVdpZHRoQXR0ciB8fCBzY3JvbGxYKSAmJiAhIG9TZXR0aW5ncy5fcmVzekV2dCApIHtcblx0XHRcdHZhciBiaW5kUmVzaXplID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkKHdpbmRvdykuYmluZCgncmVzaXplLkRULScrb1NldHRpbmdzLnNJbnN0YW5jZSwgX2ZuVGhyb3R0bGUoIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRfZm5BZGp1c3RDb2x1bW5TaXppbmcoIG9TZXR0aW5ncyApO1xuXHRcdFx0XHR9ICkgKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0Ly8gSUU2Lzcgd2lsbCBjcmFzaCBpZiB3ZSBiaW5kIGEgcmVzaXplIGV2ZW50IGhhbmRsZXIgb24gcGFnZSBsb2FkLlxuXHRcdFx0Ly8gVG8gYmUgcmVtb3ZlZCBpbiAxLjExIHdoaWNoIGRyb3BzIElFNi83IHN1cHBvcnRcblx0XHRcdGlmICggaWU2NyApIHtcblx0XHRcdFx0c2V0VGltZW91dCggYmluZFJlc2l6ZSwgMTAwMCApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGJpbmRSZXNpemUoKTtcblx0XHRcdH1cblx0XG5cdFx0XHRvU2V0dGluZ3MuX3Jlc3pFdnQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBUaHJvdHRsZSB0aGUgY2FsbHMgdG8gYSBmdW5jdGlvbi4gQXJndW1lbnRzIGFuZCBjb250ZXh0IGFyZSBtYWludGFpbmVkIGZvclxuXHQgKiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG5cdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogIEBwYXJhbSB7aW50fSBbZnJlcT0yMDBdIGNhbGwgZnJlcXVlbmN5IGluIG1TXG5cdCAqICBAcmV0dXJucyB7ZnVuY3Rpb259IHdyYXBwZWQgZnVuY3Rpb25cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuVGhyb3R0bGUoIGZuLCBmcmVxICkge1xuXHRcdHZhclxuXHRcdFx0ZnJlcXVlbmN5ID0gZnJlcSAhPT0gdW5kZWZpbmVkID8gZnJlcSA6IDIwMCxcblx0XHRcdGxhc3QsXG5cdFx0XHR0aW1lcjtcblx0XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhclxuXHRcdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdFx0bm93ICA9ICtuZXcgRGF0ZSgpLFxuXHRcdFx0XHRhcmdzID0gYXJndW1lbnRzO1xuXHRcblx0XHRcdGlmICggbGFzdCAmJiBub3cgPCBsYXN0ICsgZnJlcXVlbmN5ICkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVyICk7XG5cdFxuXHRcdFx0XHR0aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRsYXN0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdGZuLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdH0sIGZyZXF1ZW5jeSApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGxhc3QgPSBub3c7XG5cdFx0XHRcdGZuLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBDb252ZXJ0IGEgQ1NTIHVuaXQgd2lkdGggdG8gcGl4ZWxzIChlLmcuIDJlbSlcblx0ICogIEBwYXJhbSB7c3RyaW5nfSB3aWR0aCB3aWR0aCB0byBiZSBjb252ZXJ0ZWRcblx0ICogIEBwYXJhbSB7bm9kZX0gcGFyZW50IHBhcmVudCB0byBnZXQgdGhlIHdpdGggZm9yIChyZXF1aXJlZCBmb3IgcmVsYXRpdmUgd2lkdGhzKSAtIG9wdGlvbmFsXG5cdCAqICBAcmV0dXJucyB7aW50fSB3aWR0aCBpbiBwaXhlbHNcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuQ29udmVydFRvV2lkdGggKCB3aWR0aCwgcGFyZW50IClcblx0e1xuXHRcdGlmICggISB3aWR0aCApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XG5cdFx0dmFyIG4gPSAkKCc8ZGl2Lz4nKVxuXHRcdFx0LmNzcyggJ3dpZHRoJywgX2ZuU3RyaW5nVG9Dc3MoIHdpZHRoICkgKVxuXHRcdFx0LmFwcGVuZFRvKCBwYXJlbnQgfHwgZG9jdW1lbnQuYm9keSApO1xuXHRcblx0XHR2YXIgdmFsID0gblswXS5vZmZzZXRXaWR0aDtcblx0XHRuLnJlbW92ZSgpO1xuXHRcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdldCB0aGUgd2lkZXN0IG5vZGVcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtpbnR9IGNvbElkeCBjb2x1bW4gb2YgaW50ZXJlc3Rcblx0ICogIEByZXR1cm5zIHtub2RlfSB3aWRlc3QgdGFibGUgbm9kZVxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5HZXRXaWRlc3ROb2RlKCBzZXR0aW5ncywgY29sSWR4IClcblx0e1xuXHRcdHZhciBpZHggPSBfZm5HZXRNYXhMZW5TdHJpbmcoIHNldHRpbmdzLCBjb2xJZHggKTtcblx0XHRpZiAoIGlkeCA8IDAgKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFxuXHRcdHZhciBkYXRhID0gc2V0dGluZ3MuYW9EYXRhWyBpZHggXTtcblx0XHRyZXR1cm4gISBkYXRhLm5UciA/IC8vIE1pZ2h0IG5vdCBoYXZlIGJlZW4gY3JlYXRlZCB3aGVuIGRlZmVycmVkIHJlbmRlcmluZ1xuXHRcdFx0JCgnPHRkLz4nKS5odG1sKCBfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIGlkeCwgY29sSWR4LCAnZGlzcGxheScgKSApWzBdIDpcblx0XHRcdGRhdGEuYW5DZWxsc1sgY29sSWR4IF07XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogR2V0IHRoZSBtYXhpbXVtIHN0cmxlbiBmb3IgZWFjaCBkYXRhIGNvbHVtblxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge2ludH0gY29sSWR4IGNvbHVtbiBvZiBpbnRlcmVzdFxuXHQgKiAgQHJldHVybnMge3N0cmluZ30gbWF4IHN0cmluZyBsZW5ndGggZm9yIGVhY2ggY29sdW1uXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkdldE1heExlblN0cmluZyggc2V0dGluZ3MsIGNvbElkeCApXG5cdHtcblx0XHR2YXIgcywgbWF4PS0xLCBtYXhJZHggPSAtMTtcblx0XG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPXNldHRpbmdzLmFvRGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdHMgPSBfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIGksIGNvbElkeCwgJ2Rpc3BsYXknICkrJyc7XG5cdFx0XHRzID0gcy5yZXBsYWNlKCBfX3JlX2h0bWxfcmVtb3ZlLCAnJyApO1xuXHRcdFx0cyA9IHMucmVwbGFjZSggLyZuYnNwOy9nLCAnICcgKTtcblx0XG5cdFx0XHRpZiAoIHMubGVuZ3RoID4gbWF4ICkge1xuXHRcdFx0XHRtYXggPSBzLmxlbmd0aDtcblx0XHRcdFx0bWF4SWR4ID0gaTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBtYXhJZHg7XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogQXBwZW5kIGEgQ1NTIHVuaXQgKG9ubHkgaWYgcmVxdWlyZWQpIHRvIGEgc3RyaW5nXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gdmFsdWUgdG8gY3NzLWlmeVxuXHQgKiAgQHJldHVybnMge3N0cmluZ30gdmFsdWUgd2l0aCBjc3MgdW5pdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5TdHJpbmdUb0NzcyggcyApXG5cdHtcblx0XHRpZiAoIHMgPT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gJzBweCc7XG5cdFx0fVxuXHRcblx0XHRpZiAoIHR5cGVvZiBzID09ICdudW1iZXInICkge1xuXHRcdFx0cmV0dXJuIHMgPCAwID9cblx0XHRcdFx0JzBweCcgOlxuXHRcdFx0XHRzKydweCc7XG5cdFx0fVxuXHRcblx0XHQvLyBDaGVjayBpdCBoYXMgYSB1bml0IGNoYXJhY3RlciBhbHJlYWR5XG5cdFx0cmV0dXJuIHMubWF0Y2goL1xcZCQvKSA/XG5cdFx0XHRzKydweCcgOlxuXHRcdFx0cztcblx0fVxuXHRcblx0XG5cdFxuXHRmdW5jdGlvbiBfZm5Tb3J0RmxhdHRlbiAoIHNldHRpbmdzIClcblx0e1xuXHRcdHZhclxuXHRcdFx0aSwgaUxlbiwgaywga0xlbixcblx0XHRcdGFTb3J0ID0gW10sXG5cdFx0XHRhaU9yaWcgPSBbXSxcblx0XHRcdGFvQ29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucyxcblx0XHRcdGFEYXRhU29ydCwgaUNvbCwgc1R5cGUsIHNyY0NvbCxcblx0XHRcdGZpeGVkID0gc2V0dGluZ3MuYWFTb3J0aW5nRml4ZWQsXG5cdFx0XHRmaXhlZE9iaiA9ICQuaXNQbGFpbk9iamVjdCggZml4ZWQgKSxcblx0XHRcdG5lc3RlZFNvcnQgPSBbXSxcblx0XHRcdGFkZCA9IGZ1bmN0aW9uICggYSApIHtcblx0XHRcdFx0aWYgKCBhLmxlbmd0aCAmJiAhICQuaXNBcnJheSggYVswXSApICkge1xuXHRcdFx0XHRcdC8vIDFEIGFycmF5XG5cdFx0XHRcdFx0bmVzdGVkU29ydC5wdXNoKCBhICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Ly8gMkQgYXJyYXlcblx0XHRcdFx0XHQkLm1lcmdlKCBuZXN0ZWRTb3J0LCBhICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFxuXHRcdC8vIEJ1aWxkIHRoZSBzb3J0IGFycmF5LCB3aXRoIHByZS1maXggYW5kIHBvc3QtZml4IG9wdGlvbnMgaWYgdGhleSBoYXZlIGJlZW5cblx0XHQvLyBzcGVjaWZpZWRcblx0XHRpZiAoICQuaXNBcnJheSggZml4ZWQgKSApIHtcblx0XHRcdGFkZCggZml4ZWQgKTtcblx0XHR9XG5cdFxuXHRcdGlmICggZml4ZWRPYmogJiYgZml4ZWQucHJlICkge1xuXHRcdFx0YWRkKCBmaXhlZC5wcmUgKTtcblx0XHR9XG5cdFxuXHRcdGFkZCggc2V0dGluZ3MuYWFTb3J0aW5nICk7XG5cdFxuXHRcdGlmIChmaXhlZE9iaiAmJiBmaXhlZC5wb3N0ICkge1xuXHRcdFx0YWRkKCBmaXhlZC5wb3N0ICk7XG5cdFx0fVxuXHRcblx0XHRmb3IgKCBpPTAgOyBpPG5lc3RlZFNvcnQubGVuZ3RoIDsgaSsrIClcblx0XHR7XG5cdFx0XHRzcmNDb2wgPSBuZXN0ZWRTb3J0W2ldWzBdO1xuXHRcdFx0YURhdGFTb3J0ID0gYW9Db2x1bW5zWyBzcmNDb2wgXS5hRGF0YVNvcnQ7XG5cdFxuXHRcdFx0Zm9yICggaz0wLCBrTGVuPWFEYXRhU29ydC5sZW5ndGggOyBrPGtMZW4gOyBrKysgKVxuXHRcdFx0e1xuXHRcdFx0XHRpQ29sID0gYURhdGFTb3J0W2tdO1xuXHRcdFx0XHRzVHlwZSA9IGFvQ29sdW1uc1sgaUNvbCBdLnNUeXBlIHx8ICdzdHJpbmcnO1xuXHRcblx0XHRcdFx0aWYgKCBuZXN0ZWRTb3J0W2ldLl9pZHggPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRuZXN0ZWRTb3J0W2ldLl9pZHggPSAkLmluQXJyYXkoIG5lc3RlZFNvcnRbaV1bMV0sIGFvQ29sdW1uc1tpQ29sXS5hc1NvcnRpbmcgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0YVNvcnQucHVzaCgge1xuXHRcdFx0XHRcdHNyYzogICAgICAgc3JjQ29sLFxuXHRcdFx0XHRcdGNvbDogICAgICAgaUNvbCxcblx0XHRcdFx0XHRkaXI6ICAgICAgIG5lc3RlZFNvcnRbaV1bMV0sXG5cdFx0XHRcdFx0aW5kZXg6ICAgICBuZXN0ZWRTb3J0W2ldLl9pZHgsXG5cdFx0XHRcdFx0dHlwZTogICAgICBzVHlwZSxcblx0XHRcdFx0XHRmb3JtYXR0ZXI6IERhdGFUYWJsZS5leHQudHlwZS5vcmRlclsgc1R5cGUrXCItcHJlXCIgXVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gYVNvcnQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIHRoZSB0YWJsZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqICBAdG9kbyBUaGlzIHJlYWxseSBuZWVkcyBzcGxpdCB1cCFcblx0ICovXG5cdGZ1bmN0aW9uIF9mblNvcnQgKCBvU2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRpLCBpZW4sIGlMZW4sIGosIGpMZW4sIGssIGtMZW4sXG5cdFx0XHRzRGF0YVR5cGUsIG5UaCxcblx0XHRcdGFpT3JpZyA9IFtdLFxuXHRcdFx0b0V4dFNvcnQgPSBEYXRhVGFibGUuZXh0LnR5cGUub3JkZXIsXG5cdFx0XHRhb0RhdGEgPSBvU2V0dGluZ3MuYW9EYXRhLFxuXHRcdFx0YW9Db2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucyxcblx0XHRcdGFEYXRhU29ydCwgZGF0YSwgaUNvbCwgc1R5cGUsIG9Tb3J0LFxuXHRcdFx0Zm9ybWF0dGVycyA9IDAsXG5cdFx0XHRzb3J0Q29sLFxuXHRcdFx0ZGlzcGxheU1hc3RlciA9IG9TZXR0aW5ncy5haURpc3BsYXlNYXN0ZXIsXG5cdFx0XHRhU29ydDtcblx0XG5cdFx0Ly8gUmVzb2x2ZSBhbnkgY29sdW1uIHR5cGVzIHRoYXQgYXJlIHVua25vd24gZHVlIHRvIGFkZGl0aW9uIG9yIGludmFsaWRhdGlvblxuXHRcdC8vIEB0b2RvIENhbiB0aGlzIGJlIG1vdmVkIGludG8gYSAnZGF0YS1yZWFkeScgaGFuZGxlciB3aGljaCBpcyBjYWxsZWQgd2hlblxuXHRcdC8vICAgZGF0YSBpcyBnb2luZyB0byBiZSB1c2VkIGluIHRoZSB0YWJsZT9cblx0XHRfZm5Db2x1bW5UeXBlcyggb1NldHRpbmdzICk7XG5cdFxuXHRcdGFTb3J0ID0gX2ZuU29ydEZsYXR0ZW4oIG9TZXR0aW5ncyApO1xuXHRcblx0XHRmb3IgKCBpPTAsIGllbj1hU29ydC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdHNvcnRDb2wgPSBhU29ydFtpXTtcblx0XG5cdFx0XHQvLyBUcmFjayBpZiB3ZSBjYW4gdXNlIHRoZSBmYXN0IHNvcnQgYWxnb3JpdGhtXG5cdFx0XHRpZiAoIHNvcnRDb2wuZm9ybWF0dGVyICkge1xuXHRcdFx0XHRmb3JtYXR0ZXJzKys7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gTG9hZCB0aGUgZGF0YSBuZWVkZWQgZm9yIHRoZSBzb3J0LCBmb3IgZWFjaCBjZWxsXG5cdFx0XHRfZm5Tb3J0RGF0YSggb1NldHRpbmdzLCBzb3J0Q29sLmNvbCApO1xuXHRcdH1cblx0XG5cdFx0LyogTm8gc29ydGluZyByZXF1aXJlZCBpZiBzZXJ2ZXItc2lkZSBvciBubyBzb3J0aW5nIGFycmF5ICovXG5cdFx0aWYgKCBfZm5EYXRhU291cmNlKCBvU2V0dGluZ3MgKSAhPSAnc3NwJyAmJiBhU29ydC5sZW5ndGggIT09IDAgKVxuXHRcdHtcblx0XHRcdC8vIENyZWF0ZSBhIHZhbHVlIC0ga2V5IGFycmF5IG9mIHRoZSBjdXJyZW50IHJvdyBwb3NpdGlvbnMgc3VjaCB0aGF0IHdlIGNhbiB1c2UgdGhlaXJcblx0XHRcdC8vIGN1cnJlbnQgcG9zaXRpb24gZHVyaW5nIHRoZSBzb3J0LCBpZiB2YWx1ZXMgbWF0Y2gsIGluIG9yZGVyIHRvIHBlcmZvcm0gc3RhYmxlIHNvcnRpbmdcblx0XHRcdGZvciAoIGk9MCwgaUxlbj1kaXNwbGF5TWFzdGVyLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApIHtcblx0XHRcdFx0YWlPcmlnWyBkaXNwbGF5TWFzdGVyW2ldIF0gPSBpO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8qIERvIHRoZSBzb3J0IC0gaGVyZSB3ZSB3YW50IG11bHRpLWNvbHVtbiBzb3J0aW5nIGJhc2VkIG9uIGEgZ2l2ZW4gZGF0YSBzb3VyY2UgKGNvbHVtbilcblx0XHRcdCAqIGFuZCBzb3J0aW5nIGZ1bmN0aW9uIChmcm9tIG9Tb3J0KSBpbiBhIGNlcnRhaW4gZGlyZWN0aW9uLiBJdCdzIHJlYXNvbmFibHkgY29tcGxleCB0b1xuXHRcdFx0ICogZm9sbG93IG9uIGl0J3Mgb3duLCBidXQgdGhpcyBpcyB3aGF0IHdlIHdhbnQgKGV4YW1wbGUgdHdvIGNvbHVtbiBzb3J0aW5nKTpcblx0XHRcdCAqICBmbkxvY2FsU29ydGluZyA9IGZ1bmN0aW9uKGEsYil7XG5cdFx0XHQgKiAgICB2YXIgaVRlc3Q7XG5cdFx0XHQgKiAgICBpVGVzdCA9IG9Tb3J0WydzdHJpbmctYXNjJ10oJ2RhdGExMScsICdkYXRhMTInKTtcblx0XHRcdCAqICAgICAgaWYgKGlUZXN0ICE9PSAwKVxuXHRcdFx0ICogICAgICAgIHJldHVybiBpVGVzdDtcblx0XHRcdCAqICAgIGlUZXN0ID0gb1NvcnRbJ251bWVyaWMtZGVzYyddKCdkYXRhMjEnLCAnZGF0YTIyJyk7XG5cdFx0XHQgKiAgICBpZiAoaVRlc3QgIT09IDApXG5cdFx0XHQgKiAgICAgIHJldHVybiBpVGVzdDtcblx0XHRcdCAqICAgIHJldHVybiBvU29ydFsnbnVtZXJpYy1hc2MnXSggYWlPcmlnW2FdLCBhaU9yaWdbYl0gKTtcblx0XHRcdCAqICB9XG5cdFx0XHQgKiBCYXNpY2FsbHkgd2UgaGF2ZSBhIHRlc3QgZm9yIGVhY2ggc29ydGluZyBjb2x1bW4sIGlmIHRoZSBkYXRhIGluIHRoYXQgY29sdW1uIGlzIGVxdWFsLFxuXHRcdFx0ICogdGVzdCB0aGUgbmV4dCBjb2x1bW4uIElmIGFsbCBjb2x1bW5zIG1hdGNoLCB0aGVuIHdlIHVzZSBhIG51bWVyaWMgc29ydCBvbiB0aGUgcm93XG5cdFx0XHQgKiBwb3NpdGlvbnMgaW4gdGhlIG9yaWdpbmFsIGRhdGEgYXJyYXkgdG8gcHJvdmlkZSBhIHN0YWJsZSBzb3J0LlxuXHRcdFx0ICpcblx0XHRcdCAqIE5vdGUgLSBJIGtub3cgaXQgc2VlbXMgZXhjZXNzaXZlIHRvIGhhdmUgdHdvIHNvcnRpbmcgbWV0aG9kcywgYnV0IHRoZSBmaXJzdCBpcyBhcm91bmRcblx0XHRcdCAqIDE1JSBmYXN0ZXIsIHNvIHRoZSBzZWNvbmQgaXMgb25seSBtYWludGFpbmVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIHNvcnRpbmdcblx0XHRcdCAqIG1ldGhvZHMgd2hpY2ggZG8gbm90IGhhdmUgYSBwcmUtc29ydCBmb3JtYXR0aW5nIGZ1bmN0aW9uLlxuXHRcdFx0ICovXG5cdFx0XHRpZiAoIGZvcm1hdHRlcnMgPT09IGFTb3J0Lmxlbmd0aCApIHtcblx0XHRcdFx0Ly8gQWxsIHNvcnQgdHlwZXMgaGF2ZSBmb3JtYXR0aW5nIGZ1bmN0aW9uc1xuXHRcdFx0XHRkaXNwbGF5TWFzdGVyLnNvcnQoIGZ1bmN0aW9uICggYSwgYiApIHtcblx0XHRcdFx0XHR2YXJcblx0XHRcdFx0XHRcdHgsIHksIGssIHRlc3QsIHNvcnQsXG5cdFx0XHRcdFx0XHRsZW49YVNvcnQubGVuZ3RoLFxuXHRcdFx0XHRcdFx0ZGF0YUEgPSBhb0RhdGFbYV0uX2FTb3J0RGF0YSxcblx0XHRcdFx0XHRcdGRhdGFCID0gYW9EYXRhW2JdLl9hU29ydERhdGE7XG5cdFxuXHRcdFx0XHRcdGZvciAoIGs9MCA7IGs8bGVuIDsgaysrICkge1xuXHRcdFx0XHRcdFx0c29ydCA9IGFTb3J0W2tdO1xuXHRcblx0XHRcdFx0XHRcdHggPSBkYXRhQVsgc29ydC5jb2wgXTtcblx0XHRcdFx0XHRcdHkgPSBkYXRhQlsgc29ydC5jb2wgXTtcblx0XG5cdFx0XHRcdFx0XHR0ZXN0ID0geDx5ID8gLTEgOiB4PnkgPyAxIDogMDtcblx0XHRcdFx0XHRcdGlmICggdGVzdCAhPT0gMCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNvcnQuZGlyID09PSAnYXNjJyA/IHRlc3QgOiAtdGVzdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHggPSBhaU9yaWdbYV07XG5cdFx0XHRcdFx0eSA9IGFpT3JpZ1tiXTtcblx0XHRcdFx0XHRyZXR1cm4geDx5ID8gLTEgOiB4PnkgPyAxIDogMDtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIERlcHJlY2lhdGVkIC0gcmVtb3ZlIGluIDEuMTEgKHByb3ZpZGluZyBhIHBsdWctaW4gb3B0aW9uKVxuXHRcdFx0XHQvLyBOb3QgYWxsIHNvcnQgdHlwZXMgaGF2ZSBmb3JtYXR0aW5nIG1ldGhvZHMsIHNvIHdlIGhhdmUgdG8gY2FsbCB0aGVpciBzb3J0aW5nXG5cdFx0XHRcdC8vIG1ldGhvZHMuXG5cdFx0XHRcdGRpc3BsYXlNYXN0ZXIuc29ydCggZnVuY3Rpb24gKCBhLCBiICkge1xuXHRcdFx0XHRcdHZhclxuXHRcdFx0XHRcdFx0eCwgeSwgaywgbCwgdGVzdCwgc29ydCwgZm4sXG5cdFx0XHRcdFx0XHRsZW49YVNvcnQubGVuZ3RoLFxuXHRcdFx0XHRcdFx0ZGF0YUEgPSBhb0RhdGFbYV0uX2FTb3J0RGF0YSxcblx0XHRcdFx0XHRcdGRhdGFCID0gYW9EYXRhW2JdLl9hU29ydERhdGE7XG5cdFxuXHRcdFx0XHRcdGZvciAoIGs9MCA7IGs8bGVuIDsgaysrICkge1xuXHRcdFx0XHRcdFx0c29ydCA9IGFTb3J0W2tdO1xuXHRcblx0XHRcdFx0XHRcdHggPSBkYXRhQVsgc29ydC5jb2wgXTtcblx0XHRcdFx0XHRcdHkgPSBkYXRhQlsgc29ydC5jb2wgXTtcblx0XG5cdFx0XHRcdFx0XHRmbiA9IG9FeHRTb3J0WyBzb3J0LnR5cGUrXCItXCIrc29ydC5kaXIgXSB8fCBvRXh0U29ydFsgXCJzdHJpbmctXCIrc29ydC5kaXIgXTtcblx0XHRcdFx0XHRcdHRlc3QgPSBmbiggeCwgeSApO1xuXHRcdFx0XHRcdFx0aWYgKCB0ZXN0ICE9PSAwICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGVzdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHggPSBhaU9yaWdbYV07XG5cdFx0XHRcdFx0eSA9IGFpT3JpZ1tiXTtcblx0XHRcdFx0XHRyZXR1cm4geDx5ID8gLTEgOiB4PnkgPyAxIDogMDtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0LyogVGVsbCB0aGUgZHJhdyBmdW5jdGlvbiB0aGF0IHdlIGhhdmUgc29ydGVkIHRoZSBkYXRhICovXG5cdFx0b1NldHRpbmdzLmJTb3J0ZWQgPSB0cnVlO1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gX2ZuU29ydEFyaWEgKCBzZXR0aW5ncyApXG5cdHtcblx0XHR2YXIgbGFiZWw7XG5cdFx0dmFyIG5leHRTb3J0O1xuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xuXHRcdHZhciBhU29ydCA9IF9mblNvcnRGbGF0dGVuKCBzZXR0aW5ncyApO1xuXHRcdHZhciBvQXJpYSA9IHNldHRpbmdzLm9MYW5ndWFnZS5vQXJpYTtcblx0XG5cdFx0Ly8gQVJJQSBhdHRyaWJ1dGVzIC0gbmVlZCB0byBsb29wIGFsbCBjb2x1bW5zLCB0byB1cGRhdGUgYWxsIChyZW1vdmluZyBvbGRcblx0XHQvLyBhdHRyaWJ1dGVzIGFzIG5lZWRlZClcblx0XHRmb3IgKCB2YXIgaT0wLCBpTGVuPWNvbHVtbnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcblx0XHR7XG5cdFx0XHR2YXIgY29sID0gY29sdW1uc1tpXTtcblx0XHRcdHZhciBhc1NvcnRpbmcgPSBjb2wuYXNTb3J0aW5nO1xuXHRcdFx0dmFyIHNUaXRsZSA9IGNvbC5zVGl0bGUucmVwbGFjZSggLzwuKj8+L2csIFwiXCIgKTtcblx0XHRcdHZhciB0aCA9IGNvbC5uVGg7XG5cdFxuXHRcdFx0Ly8gSUU3IGlzIHRocm93aW5nIGFuIGVycm9yIHdoZW4gc2V0dGluZyB0aGVzZSBwcm9wZXJ0aWVzIHdpdGggalF1ZXJ5J3Ncblx0XHRcdC8vIGF0dHIoKSBhbmQgcmVtb3ZlQXR0cigpIG1ldGhvZHMuLi5cblx0XHRcdHRoLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1zb3J0Jyk7XG5cdFxuXHRcdFx0LyogSW4gQVJJQSBvbmx5IHRoZSBmaXJzdCBzb3J0aW5nIGNvbHVtbiBjYW4gYmUgbWFya2VkIGFzIHNvcnRpbmcgLSBubyBtdWx0aS1zb3J0IG9wdGlvbiAqL1xuXHRcdFx0aWYgKCBjb2wuYlNvcnRhYmxlICkge1xuXHRcdFx0XHRpZiAoIGFTb3J0Lmxlbmd0aCA+IDAgJiYgYVNvcnRbMF0uY29sID09IGkgKSB7XG5cdFx0XHRcdFx0dGguc2V0QXR0cmlidXRlKCdhcmlhLXNvcnQnLCBhU29ydFswXS5kaXI9PVwiYXNjXCIgPyBcImFzY2VuZGluZ1wiIDogXCJkZXNjZW5kaW5nXCIgKTtcblx0XHRcdFx0XHRuZXh0U29ydCA9IGFzU29ydGluZ1sgYVNvcnRbMF0uaW5kZXgrMSBdIHx8IGFzU29ydGluZ1swXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRuZXh0U29ydCA9IGFzU29ydGluZ1swXTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0bGFiZWwgPSBzVGl0bGUgKyAoIG5leHRTb3J0ID09PSBcImFzY1wiID9cblx0XHRcdFx0XHRvQXJpYS5zU29ydEFzY2VuZGluZyA6XG5cdFx0XHRcdFx0b0FyaWEuc1NvcnREZXNjZW5kaW5nXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0bGFiZWwgPSBzVGl0bGU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dGguc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBGdW5jdGlvbiB0byBydW4gb24gdXNlciBzb3J0IHJlcXVlc3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtub2RlfSBhdHRhY2hUbyBub2RlIHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0b1xuXHQgKiAgQHBhcmFtIHtpbnR9IGNvbElkeCBjb2x1bW4gc29ydGluZyBpbmRleFxuXHQgKiAgQHBhcmFtIHtib29sZWFufSBbYXBwZW5kPWZhbHNlXSBBcHBlbmQgdGhlIHJlcXVlc3RlZCBzb3J0IHRvIHRoZSBleGlzdGluZ1xuXHQgKiAgICBzb3J0IGlmIHRydWUgKGkuZS4gbXVsdGktY29sdW1uIHNvcnQpXG5cdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblNvcnRMaXN0ZW5lciAoIHNldHRpbmdzLCBjb2xJZHgsIGFwcGVuZCwgY2FsbGJhY2sgKVxuXHR7XG5cdFx0dmFyIGNvbCA9IHNldHRpbmdzLmFvQ29sdW1uc1sgY29sSWR4IF07XG5cdFx0dmFyIHNvcnRpbmcgPSBzZXR0aW5ncy5hYVNvcnRpbmc7XG5cdFx0dmFyIGFzU29ydGluZyA9IGNvbC5hc1NvcnRpbmc7XG5cdFx0dmFyIG5leHRTb3J0SWR4O1xuXHRcdHZhciBuZXh0ID0gZnVuY3Rpb24gKCBhLCBvdmVyZmxvdyApIHtcblx0XHRcdHZhciBpZHggPSBhLl9pZHg7XG5cdFx0XHRpZiAoIGlkeCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRpZHggPSAkLmluQXJyYXkoIGFbMV0sIGFzU29ydGluZyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBpZHgrMSA8IGFzU29ydGluZy5sZW5ndGggP1xuXHRcdFx0XHRpZHgrMSA6XG5cdFx0XHRcdG92ZXJmbG93ID9cblx0XHRcdFx0XHRudWxsIDpcblx0XHRcdFx0XHQwO1xuXHRcdH07XG5cdFxuXHRcdC8vIENvbnZlcnQgdG8gMkQgYXJyYXkgaWYgbmVlZGVkXG5cdFx0aWYgKCB0eXBlb2Ygc29ydGluZ1swXSA9PT0gJ251bWJlcicgKSB7XG5cdFx0XHRzb3J0aW5nID0gc2V0dGluZ3MuYWFTb3J0aW5nID0gWyBzb3J0aW5nIF07XG5cdFx0fVxuXHRcblx0XHQvLyBJZiBhcHBlbmRpbmcgdGhlIHNvcnQgdGhlbiB3ZSBhcmUgbXVsdGktY29sdW1uIHNvcnRpbmdcblx0XHRpZiAoIGFwcGVuZCAmJiBzZXR0aW5ncy5vRmVhdHVyZXMuYlNvcnRNdWx0aSApIHtcblx0XHRcdC8vIEFyZSB3ZSBhbHJlYWR5IGRvaW5nIHNvbWUga2luZCBvZiBzb3J0IG9uIHRoaXMgY29sdW1uP1xuXHRcdFx0dmFyIHNvcnRJZHggPSAkLmluQXJyYXkoIGNvbElkeCwgX3BsdWNrKHNvcnRpbmcsICcwJykgKTtcblx0XG5cdFx0XHRpZiAoIHNvcnRJZHggIT09IC0xICkge1xuXHRcdFx0XHQvLyBZZXMsIG1vZGlmeSB0aGUgc29ydFxuXHRcdFx0XHRuZXh0U29ydElkeCA9IG5leHQoIHNvcnRpbmdbc29ydElkeF0sIHRydWUgKTtcblx0XG5cdFx0XHRcdGlmICggbmV4dFNvcnRJZHggPT09IG51bGwgJiYgc29ydGluZy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdFx0bmV4dFNvcnRJZHggPSAwOyAvLyBjYW4ndCByZW1vdmUgc29ydGluZyBjb21wbGV0ZWx5XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggbmV4dFNvcnRJZHggPT09IG51bGwgKSB7XG5cdFx0XHRcdFx0c29ydGluZy5zcGxpY2UoIHNvcnRJZHgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRzb3J0aW5nW3NvcnRJZHhdWzFdID0gYXNTb3J0aW5nWyBuZXh0U29ydElkeCBdO1xuXHRcdFx0XHRcdHNvcnRpbmdbc29ydElkeF0uX2lkeCA9IG5leHRTb3J0SWR4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gTm8gc29ydCBvbiB0aGlzIGNvbHVtbiB5ZXRcblx0XHRcdFx0c29ydGluZy5wdXNoKCBbIGNvbElkeCwgYXNTb3J0aW5nWzBdLCAwIF0gKTtcblx0XHRcdFx0c29ydGluZ1tzb3J0aW5nLmxlbmd0aC0xXS5faWR4ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoIHNvcnRpbmcubGVuZ3RoICYmIHNvcnRpbmdbMF1bMF0gPT0gY29sSWR4ICkge1xuXHRcdFx0Ly8gU2luZ2xlIGNvbHVtbiAtIGFscmVhZHkgc29ydGluZyBvbiB0aGlzIGNvbHVtbiwgbW9kaWZ5IHRoZSBzb3J0XG5cdFx0XHRuZXh0U29ydElkeCA9IG5leHQoIHNvcnRpbmdbMF0gKTtcblx0XG5cdFx0XHRzb3J0aW5nLmxlbmd0aCA9IDE7XG5cdFx0XHRzb3J0aW5nWzBdWzFdID0gYXNTb3J0aW5nWyBuZXh0U29ydElkeCBdO1xuXHRcdFx0c29ydGluZ1swXS5faWR4ID0gbmV4dFNvcnRJZHg7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Ly8gU2luZ2xlIGNvbHVtbiAtIHNvcnQgb25seSBvbiB0aGlzIGNvbHVtblxuXHRcdFx0c29ydGluZy5sZW5ndGggPSAwO1xuXHRcdFx0c29ydGluZy5wdXNoKCBbIGNvbElkeCwgYXNTb3J0aW5nWzBdIF0gKTtcblx0XHRcdHNvcnRpbmdbMF0uX2lkeCA9IDA7XG5cdFx0fVxuXHRcblx0XHQvLyBSdW4gdGhlIHNvcnQgYnkgY2FsbGluZyBhIGZ1bGwgcmVkcmF3XG5cdFx0X2ZuUmVEcmF3KCBzZXR0aW5ncyApO1xuXHRcblx0XHQvLyBjYWxsYmFjayB1c2VkIGZvciBhc3luYyB1c2VyIGludGVyYWN0aW9uXG5cdFx0aWYgKCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyApIHtcblx0XHRcdGNhbGxiYWNrKCBzZXR0aW5ncyApO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBdHRhY2ggYSBzb3J0IGhhbmRsZXIgKGNsaWNrKSB0byBhIG5vZGVcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtub2RlfSBhdHRhY2hUbyBub2RlIHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0b1xuXHQgKiAgQHBhcmFtIHtpbnR9IGNvbElkeCBjb2x1bW4gc29ydGluZyBpbmRleFxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBjYWxsYmFjayBmdW5jdGlvblxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5Tb3J0QXR0YWNoTGlzdGVuZXIgKCBzZXR0aW5ncywgYXR0YWNoVG8sIGNvbElkeCwgY2FsbGJhY2sgKVxuXHR7XG5cdFx0dmFyIGNvbCA9IHNldHRpbmdzLmFvQ29sdW1uc1sgY29sSWR4IF07XG5cdFxuXHRcdF9mbkJpbmRBY3Rpb24oIGF0dGFjaFRvLCB7fSwgZnVuY3Rpb24gKGUpIHtcblx0XHRcdC8qIElmIHRoZSBjb2x1bW4gaXMgbm90IHNvcnRhYmxlIC0gZG9uJ3QgdG8gYW55dGhpbmcgKi9cblx0XHRcdGlmICggY29sLmJTb3J0YWJsZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBJZiBwcm9jZXNzaW5nIGlzIGVuYWJsZWQgdXNlIGEgdGltZW91dCB0byBhbGxvdyB0aGUgcHJvY2Vzc2luZ1xuXHRcdFx0Ly8gZGlzcGxheSB0byBiZSBzaG93biAtIG90aGVyd2lzZSB0byBpdCBzeW5jaHJvbm91c2x5XG5cdFx0XHRpZiAoIHNldHRpbmdzLm9GZWF0dXJlcy5iUHJvY2Vzc2luZyApIHtcblx0XHRcdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCB0cnVlICk7XG5cdFxuXHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfZm5Tb3J0TGlzdGVuZXIoIHNldHRpbmdzLCBjb2xJZHgsIGUuc2hpZnRLZXksIGNhbGxiYWNrICk7XG5cdFxuXHRcdFx0XHRcdC8vIEluIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcsIHRoZSBkcmF3IGNhbGxiYWNrIHdpbGwgcmVtb3ZlIHRoZVxuXHRcdFx0XHRcdC8vIHByb2Nlc3NpbmcgZGlzcGxheVxuXHRcdFx0XHRcdGlmICggX2ZuRGF0YVNvdXJjZSggc2V0dGluZ3MgKSAhPT0gJ3NzcCcgKSB7XG5cdFx0XHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIGZhbHNlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCAwICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0X2ZuU29ydExpc3RlbmVyKCBzZXR0aW5ncywgY29sSWR4LCBlLnNoaWZ0S2V5LCBjYWxsYmFjayApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBTZXQgdGhlIHNvcnRpbmcgY2xhc3NlcyBvbiB0YWJsZSdzIGJvZHksIE5vdGU6IGl0IGlzIHNhZmUgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uXG5cdCAqIHdoZW4gYlNvcnQgYW5kIGJTb3J0Q2xhc3NlcyBhcmUgZmFsc2Vcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuU29ydGluZ0NsYXNzZXMoIHNldHRpbmdzIClcblx0e1xuXHRcdHZhciBvbGRTb3J0ID0gc2V0dGluZ3MuYUxhc3RTb3J0O1xuXHRcdHZhciBzb3J0Q2xhc3MgPSBzZXR0aW5ncy5vQ2xhc3Nlcy5zU29ydENvbHVtbjtcblx0XHR2YXIgc29ydCA9IF9mblNvcnRGbGF0dGVuKCBzZXR0aW5ncyApO1xuXHRcdHZhciBmZWF0dXJlcyA9IHNldHRpbmdzLm9GZWF0dXJlcztcblx0XHR2YXIgaSwgaWVuLCBjb2xJZHg7XG5cdFxuXHRcdGlmICggZmVhdHVyZXMuYlNvcnQgJiYgZmVhdHVyZXMuYlNvcnRDbGFzc2VzICkge1xuXHRcdFx0Ly8gUmVtb3ZlIG9sZCBzb3J0aW5nIGNsYXNzZXNcblx0XHRcdGZvciAoIGk9MCwgaWVuPW9sZFNvcnQubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRcdGNvbElkeCA9IG9sZFNvcnRbaV0uc3JjO1xuXHRcblx0XHRcdFx0Ly8gUmVtb3ZlIGNvbHVtbiBzb3J0aW5nXG5cdFx0XHRcdCQoIF9wbHVjayggc2V0dGluZ3MuYW9EYXRhLCAnYW5DZWxscycsIGNvbElkeCApIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHNvcnRDbGFzcyArIChpPDIgPyBpKzEgOiAzKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFkZCBuZXcgY29sdW1uIHNvcnRpbmdcblx0XHRcdGZvciAoIGk9MCwgaWVuPXNvcnQubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRcdGNvbElkeCA9IHNvcnRbaV0uc3JjO1xuXHRcblx0XHRcdFx0JCggX3BsdWNrKCBzZXR0aW5ncy5hb0RhdGEsICdhbkNlbGxzJywgY29sSWR4ICkgKVxuXHRcdFx0XHRcdC5hZGRDbGFzcyggc29ydENsYXNzICsgKGk8MiA/IGkrMSA6IDMpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRzZXR0aW5ncy5hTGFzdFNvcnQgPSBzb3J0O1xuXHR9XG5cdFxuXHRcblx0Ly8gR2V0IHRoZSBkYXRhIHRvIHNvcnQgYSBjb2x1bW4sIGJlIGl0IGZyb20gY2FjaGUsIGZyZXNoIChwb3B1bGF0aW5nIHRoZVxuXHQvLyBjYWNoZSksIG9yIGZyb20gYSBzb3J0IGZvcm1hdHRlclxuXHRmdW5jdGlvbiBfZm5Tb3J0RGF0YSggc2V0dGluZ3MsIGlkeCApXG5cdHtcblx0XHQvLyBDdXN0b20gc29ydGluZyBmdW5jdGlvbiAtIHByb3ZpZGVkIGJ5IHRoZSBzb3J0IGRhdGEgdHlwZVxuXHRcdHZhciBjb2x1bW4gPSBzZXR0aW5ncy5hb0NvbHVtbnNbIGlkeCBdO1xuXHRcdHZhciBjdXN0b21Tb3J0ID0gRGF0YVRhYmxlLmV4dC5vcmRlclsgY29sdW1uLnNTb3J0RGF0YVR5cGUgXTtcblx0XHR2YXIgY3VzdG9tRGF0YTtcblx0XG5cdFx0aWYgKCBjdXN0b21Tb3J0ICkge1xuXHRcdFx0Y3VzdG9tRGF0YSA9IGN1c3RvbVNvcnQuY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywgaWR4LFxuXHRcdFx0XHRfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSggc2V0dGluZ3MsIGlkeCApXG5cdFx0XHQpO1xuXHRcdH1cblx0XG5cdFx0Ly8gVXNlIC8gcG9wdWxhdGUgY2FjaGVcblx0XHR2YXIgcm93LCBjZWxsRGF0YTtcblx0XHR2YXIgZm9ybWF0dGVyID0gRGF0YVRhYmxlLmV4dC50eXBlLm9yZGVyWyBjb2x1bW4uc1R5cGUrXCItcHJlXCIgXTtcblx0XG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPXNldHRpbmdzLmFvRGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdHJvdyA9IHNldHRpbmdzLmFvRGF0YVtpXTtcblx0XG5cdFx0XHRpZiAoICEgcm93Ll9hU29ydERhdGEgKSB7XG5cdFx0XHRcdHJvdy5fYVNvcnREYXRhID0gW107XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCAhIHJvdy5fYVNvcnREYXRhW2lkeF0gfHwgY3VzdG9tU29ydCApIHtcblx0XHRcdFx0Y2VsbERhdGEgPSBjdXN0b21Tb3J0ID9cblx0XHRcdFx0XHRjdXN0b21EYXRhW2ldIDogLy8gSWYgdGhlcmUgd2FzIGEgY3VzdG9tIHNvcnQgZnVuY3Rpb24sIHVzZSBkYXRhIGZyb20gdGhlcmVcblx0XHRcdFx0XHRfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIGksIGlkeCwgJ3NvcnQnICk7XG5cdFxuXHRcdFx0XHRyb3cuX2FTb3J0RGF0YVsgaWR4IF0gPSBmb3JtYXR0ZXIgP1xuXHRcdFx0XHRcdGZvcm1hdHRlciggY2VsbERhdGEgKSA6XG5cdFx0XHRcdFx0Y2VsbERhdGE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0XG5cdC8qKlxuXHQgKiBTYXZlIHRoZSBzdGF0ZSBvZiBhIHRhYmxlXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mblNhdmVTdGF0ZSAoIHNldHRpbmdzIClcblx0e1xuXHRcdGlmICggIXNldHRpbmdzLm9GZWF0dXJlcy5iU3RhdGVTYXZlIHx8IHNldHRpbmdzLmJEZXN0cm95aW5nIClcblx0XHR7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHQvKiBTdG9yZSB0aGUgaW50ZXJlc3RpbmcgdmFyaWFibGVzICovXG5cdFx0dmFyIHN0YXRlID0ge1xuXHRcdFx0dGltZTogICAgK25ldyBEYXRlKCksXG5cdFx0XHRzdGFydDogICBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcblx0XHRcdGxlbmd0aDogIHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCxcblx0XHRcdG9yZGVyOiAgICQuZXh0ZW5kKCB0cnVlLCBbXSwgc2V0dGluZ3MuYWFTb3J0aW5nICksXG5cdFx0XHRzZWFyY2g6ICBfZm5TZWFyY2hUb0NhbWVsKCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2ggKSxcblx0XHRcdGNvbHVtbnM6ICQubWFwKCBzZXR0aW5ncy5hb0NvbHVtbnMsIGZ1bmN0aW9uICggY29sLCBpICkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHZpc2libGU6IGNvbC5iVmlzaWJsZSxcblx0XHRcdFx0XHRzZWFyY2g6IF9mblNlYXJjaFRvQ2FtZWwoIHNldHRpbmdzLmFvUHJlU2VhcmNoQ29sc1tpXSApXG5cdFx0XHRcdH07XG5cdFx0XHR9IClcblx0XHR9O1xuXHRcblx0XHRfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCBcImFvU3RhdGVTYXZlUGFyYW1zXCIsICdzdGF0ZVNhdmVQYXJhbXMnLCBbc2V0dGluZ3MsIHN0YXRlXSApO1xuXHRcblx0XHRzZXR0aW5ncy5vU2F2ZWRTdGF0ZSA9IHN0YXRlO1xuXHRcdHNldHRpbmdzLmZuU3RhdGVTYXZlQ2FsbGJhY2suY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywgc3RhdGUgKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBdHRlbXB0IHRvIGxvYWQgYSBzYXZlZCB0YWJsZSBzdGF0ZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9Jbml0IERhdGFUYWJsZXMgaW5pdCBvYmplY3Qgc28gd2UgY2FuIG92ZXJyaWRlIHNldHRpbmdzXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkxvYWRTdGF0ZSAoIHNldHRpbmdzLCBvSW5pdCApXG5cdHtcblx0XHR2YXIgaSwgaWVuO1xuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xuXHRcblx0XHRpZiAoICEgc2V0dGluZ3Mub0ZlYXR1cmVzLmJTdGF0ZVNhdmUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHR2YXIgc3RhdGUgPSBzZXR0aW5ncy5mblN0YXRlTG9hZENhbGxiYWNrLmNhbGwoIHNldHRpbmdzLm9JbnN0YW5jZSwgc2V0dGluZ3MgKTtcblx0XHRpZiAoICEgc3RhdGUgfHwgISBzdGF0ZS50aW1lICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0LyogQWxsb3cgY3VzdG9tIGFuZCBwbHVnLWluIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgdG8gYWx0ZXIgdGhlIHNhdmVkIGRhdGEgc2V0IGFuZFxuXHRcdCAqIGNhbmNlbGxpbmcgb2YgbG9hZGluZyBieSByZXR1cm5pbmcgZmFsc2Vcblx0XHQgKi9cblx0XHR2YXIgYWJTdGF0ZUxvYWQgPSBfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCAnYW9TdGF0ZUxvYWRQYXJhbXMnLCAnc3RhdGVMb2FkUGFyYW1zJywgW3NldHRpbmdzLCBzdGF0ZV0gKTtcblx0XHRpZiAoICQuaW5BcnJheSggZmFsc2UsIGFiU3RhdGVMb2FkICkgIT09IC0xICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0LyogUmVqZWN0IG9sZCBkYXRhICovXG5cdFx0dmFyIGR1cmF0aW9uID0gc2V0dGluZ3MuaVN0YXRlRHVyYXRpb247XG5cdFx0aWYgKCBkdXJhdGlvbiA+IDAgJiYgc3RhdGUudGltZSA8ICtuZXcgRGF0ZSgpIC0gKGR1cmF0aW9uKjEwMDApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0Ly8gTnVtYmVyIG9mIGNvbHVtbnMgaGF2ZSBjaGFuZ2VkIC0gYWxsIGJldHMgYXJlIG9mZiwgbm8gcmVzdG9yZSBvZiBzZXR0aW5nc1xuXHRcdGlmICggY29sdW1ucy5sZW5ndGggIT09IHN0YXRlLmNvbHVtbnMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0Ly8gU3RvcmUgdGhlIHNhdmVkIHN0YXRlIHNvIGl0IG1pZ2h0IGJlIGFjY2Vzc2VkIGF0IGFueSB0aW1lXG5cdFx0c2V0dGluZ3Mub0xvYWRlZFN0YXRlID0gJC5leHRlbmQoIHRydWUsIHt9LCBzdGF0ZSApO1xuXHRcblx0XHQvLyBSZXN0b3JlIGtleSBmZWF0dXJlcyAtIHRvZG8gLSBmb3IgMS4xMSB0aGlzIG5lZWRzIHRvIGJlIGRvbmUgYnlcblx0XHQvLyBzdWJzY3JpYmVkIGV2ZW50c1xuXHRcdGlmICggc3RhdGUuc3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ICAgID0gc3RhdGUuc3RhcnQ7XG5cdFx0XHRzZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydCA9IHN0YXRlLnN0YXJ0O1xuXHRcdH1cblx0XHRpZiAoIHN0YXRlLmxlbmd0aCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0c2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoICAgPSBzdGF0ZS5sZW5ndGg7XG5cdFx0fVxuXHRcblx0XHQvLyBPcmRlclxuXHRcdGlmICggc3RhdGUub3JkZXIgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHNldHRpbmdzLmFhU29ydGluZyA9IFtdO1xuXHRcdFx0JC5lYWNoKCBzdGF0ZS5vcmRlciwgZnVuY3Rpb24gKCBpLCBjb2wgKSB7XG5cdFx0XHRcdHNldHRpbmdzLmFhU29ydGluZy5wdXNoKCBjb2xbMF0gPj0gY29sdW1ucy5sZW5ndGggP1xuXHRcdFx0XHRcdFsgMCwgY29sWzFdIF0gOlxuXHRcdFx0XHRcdGNvbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XG5cdFx0Ly8gU2VhcmNoXG5cdFx0aWYgKCBzdGF0ZS5zZWFyY2ggIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCQuZXh0ZW5kKCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsIF9mblNlYXJjaFRvSHVuZyggc3RhdGUuc2VhcmNoICkgKTtcblx0XHR9XG5cdFxuXHRcdC8vIENvbHVtbnNcblx0XHRmb3IgKCBpPTAsIGllbj1zdGF0ZS5jb2x1bW5zLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0dmFyIGNvbCA9IHN0YXRlLmNvbHVtbnNbaV07XG5cdFxuXHRcdFx0Ly8gVmlzaWJpbGl0eVxuXHRcdFx0aWYgKCBjb2wudmlzaWJsZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRjb2x1bW5zW2ldLmJWaXNpYmxlID0gY29sLnZpc2libGU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU2VhcmNoXG5cdFx0XHRpZiAoIGNvbC5zZWFyY2ggIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0JC5leHRlbmQoIHNldHRpbmdzLmFvUHJlU2VhcmNoQ29sc1tpXSwgX2ZuU2VhcmNoVG9IdW5nKCBjb2wuc2VhcmNoICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsICdhb1N0YXRlTG9hZGVkJywgJ3N0YXRlTG9hZGVkJywgW3NldHRpbmdzLCBzdGF0ZV0gKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm4gdGhlIHNldHRpbmdzIG9iamVjdCBmb3IgYSBwYXJ0aWN1bGFyIHRhYmxlXG5cdCAqICBAcGFyYW0ge25vZGV9IHRhYmxlIHRhYmxlIHdlIGFyZSB1c2luZyBhcyBhIGRhdGFUYWJsZVxuXHQgKiAgQHJldHVybnMge29iamVjdH0gU2V0dGluZ3Mgb2JqZWN0IC0gb3IgbnVsbCBpZiBub3QgZm91bmRcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuU2V0dGluZ3NGcm9tTm9kZSAoIHRhYmxlIClcblx0e1xuXHRcdHZhciBzZXR0aW5ncyA9IERhdGFUYWJsZS5zZXR0aW5ncztcblx0XHR2YXIgaWR4ID0gJC5pbkFycmF5KCB0YWJsZSwgX3BsdWNrKCBzZXR0aW5ncywgJ25UYWJsZScgKSApO1xuXHRcblx0XHRyZXR1cm4gaWR4ICE9PSAtMSA/XG5cdFx0XHRzZXR0aW5nc1sgaWR4IF0gOlxuXHRcdFx0bnVsbDtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBMb2cgYW4gZXJyb3IgbWVzc2FnZVxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge2ludH0gbGV2ZWwgbG9nIGVycm9yIG1lc3NhZ2VzLCBvciBkaXNwbGF5IHRoZW0gdG8gdGhlIHVzZXJcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBtc2cgZXJyb3IgbWVzc2FnZVxuXHQgKiAgQHBhcmFtIHtpbnR9IHRuIFRlY2huaWNhbCBub3RlIGlkIHRvIGdldCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci5cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZuTG9nKCBzZXR0aW5ncywgbGV2ZWwsIG1zZywgdG4gKVxuXHR7XG5cdFx0bXNnID0gJ0RhdGFUYWJsZXMgd2FybmluZzogJytcblx0XHRcdChzZXR0aW5ncyA/ICd0YWJsZSBpZD0nK3NldHRpbmdzLnNUYWJsZUlkKycgLSAnIDogJycpK21zZztcblx0XG5cdFx0aWYgKCB0biApIHtcblx0XHRcdG1zZyArPSAnLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIGVycm9yLCBwbGVhc2Ugc2VlICcrXG5cdFx0XHQnaHR0cDovL2RhdGF0YWJsZXMubmV0L3RuLycrdG47XG5cdFx0fVxuXHRcblx0XHRpZiAoICEgbGV2ZWwgICkge1xuXHRcdFx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcHJlIDEuMTBcblx0XHRcdHZhciBleHQgPSBEYXRhVGFibGUuZXh0O1xuXHRcdFx0dmFyIHR5cGUgPSBleHQuc0Vyck1vZGUgfHwgZXh0LmVyck1vZGU7XG5cdFxuXHRcdFx0aWYgKCBzZXR0aW5ncyApIHtcblx0XHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgbnVsbCwgJ2Vycm9yJywgWyBzZXR0aW5ncywgdG4sIG1zZyBdICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCB0eXBlID09ICdhbGVydCcgKSB7XG5cdFx0XHRcdGFsZXJ0KCBtc2cgKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCB0eXBlID09ICd0aHJvdycgKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihtc2cpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoIHR5cGVvZiB0eXBlID09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRcdHR5cGUoIHNldHRpbmdzLCB0biwgbXNnICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZyApIHtcblx0XHRcdGNvbnNvbGUubG9nKCBtc2cgKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogU2VlIGlmIGEgcHJvcGVydHkgaXMgZGVmaW5lZCBvbiBvbmUgb2JqZWN0LCBpZiBzbyBhc3NpZ24gaXQgdG8gdGhlIG90aGVyIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHJldCB0YXJnZXQgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBvYmplY3Rcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHByb3BlcnR5XG5cdCAqICBAcGFyYW0ge3N0cmluZ30gW21hcHBlZE5hbWVdIG5hbWUgdG8gbWFwIHRvbyAtIG9wdGlvbmFsLCBuYW1lIHVzZWQgaWYgbm90IGdpdmVuXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbk1hcCggcmV0LCBzcmMsIG5hbWUsIG1hcHBlZE5hbWUgKVxuXHR7XG5cdFx0aWYgKCAkLmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdCQuZWFjaCggbmFtZSwgZnVuY3Rpb24gKGksIHZhbCkge1xuXHRcdFx0XHRpZiAoICQuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdFx0X2ZuTWFwKCByZXQsIHNyYywgdmFsWzBdLCB2YWxbMV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRfZm5NYXAoIHJldCwgc3JjLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdGlmICggbWFwcGVkTmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0bWFwcGVkTmFtZSA9IG5hbWU7XG5cdFx0fVxuXHRcblx0XHRpZiAoIHNyY1tuYW1lXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0W21hcHBlZE5hbWVdID0gc3JjW25hbWVdO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBFeHRlbmQgb2JqZWN0cyAtIHZlcnkgc2ltaWxhciB0byBqUXVlcnkuZXh0ZW5kLCBidXQgZGVlcCBjb3B5IG9iamVjdHMsIGFuZFxuXHQgKiBzaGFsbG93IGNvcHkgYXJyYXlzLiBUaGUgcmVhc29uIHdlIG5lZWQgdG8gZG8gdGhpcywgaXMgdGhhdCB3ZSBkb24ndCB3YW50IHRvXG5cdCAqIGRlZXAgY29weSBhcnJheSBpbml0IHZhbHVlcyAoc3VjaCBhcyBhYVNvcnRpbmcpIHNpbmNlIHRoZSBkZXYgd291bGRuJ3QgYmVcblx0ICogYWJsZSB0byBvdmVycmlkZSB0aGVtLCBidXQgd2UgZG8gd2FudCB0byBkZWVwIGNvcHkgYXJyYXlzLlxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG91dCBPYmplY3QgdG8gZXh0ZW5kXG5cdCAqICBAcGFyYW0ge29iamVjdH0gZXh0ZW5kZXIgT2JqZWN0IGZyb20gd2hpY2ggdGhlIHByb3BlcnRpZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG5cdCAqICAgICAgb3V0XG5cdCAqICBAcGFyYW0ge2Jvb2xlYW59IGJyZWFrUmVmcyBJZiB0cnVlLCB0aGVuIGFycmF5cyB3aWxsIGJlIHNsaWNlZCB0byB0YWtlIGFuXG5cdCAqICAgICAgaW5kZXBlbmRlbnQgY29weSB3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIGBkYXRhYCBvciBgYWFEYXRhYCBwYXJhbWV0ZXJzXG5cdCAqICAgICAgaWYgdGhleSBhcmUgcHJlc2VudC4gVGhpcyBpcyBzbyB5b3UgY2FuIHBhc3MgaW4gYSBjb2xsZWN0aW9uIHRvXG5cdCAqICAgICAgRGF0YVRhYmxlcyBhbmQgaGF2ZSB0aGF0IHVzZWQgYXMgeW91ciBkYXRhIHNvdXJjZSB3aXRob3V0IGJyZWFraW5nIHRoZVxuXHQgKiAgICAgIHJlZmVyZW5jZXNcblx0ICogIEByZXR1cm5zIHtvYmplY3R9IG91dCBSZWZlcmVuY2UsIGp1c3QgZm9yIGNvbnZlbmllbmNlIC0gb3V0ID09PSB0aGUgcmV0dXJuLlxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqICBAdG9kbyBUaGlzIGRvZXNuJ3QgdGFrZSBhY2NvdW50IG9mIGFycmF5cyBpbnNpZGUgdGhlIGRlZXAgY29waWVkIG9iamVjdHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5FeHRlbmQoIG91dCwgZXh0ZW5kZXIsIGJyZWFrUmVmcyApXG5cdHtcblx0XHR2YXIgdmFsO1xuXHRcblx0XHRmb3IgKCB2YXIgcHJvcCBpbiBleHRlbmRlciApIHtcblx0XHRcdGlmICggZXh0ZW5kZXIuaGFzT3duUHJvcGVydHkocHJvcCkgKSB7XG5cdFx0XHRcdHZhbCA9IGV4dGVuZGVyW3Byb3BdO1xuXHRcblx0XHRcdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIHZhbCApICkge1xuXHRcdFx0XHRcdGlmICggISAkLmlzUGxhaW5PYmplY3QoIG91dFtwcm9wXSApICkge1xuXHRcdFx0XHRcdFx0b3V0W3Byb3BdID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCQuZXh0ZW5kKCB0cnVlLCBvdXRbcHJvcF0sIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKCBicmVha1JlZnMgJiYgcHJvcCAhPT0gJ2RhdGEnICYmIHByb3AgIT09ICdhYURhdGEnICYmICQuaXNBcnJheSh2YWwpICkge1xuXHRcdFx0XHRcdG91dFtwcm9wXSA9IHZhbC5zbGljZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdG91dFtwcm9wXSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBCaW5kIGFuIGV2ZW50IGhhbmRlcnMgdG8gYWxsb3cgYSBjbGljayBvciByZXR1cm4ga2V5IHRvIGFjdGl2YXRlIHRoZSBjYWxsYmFjay5cblx0ICogVGhpcyBpcyBnb29kIGZvciBhY2Nlc3NpYmlsaXR5IHNpbmNlIGEgcmV0dXJuIG9uIHRoZSBrZXlib2FyZCB3aWxsIGhhdmUgdGhlXG5cdCAqIHNhbWUgZWZmZWN0IGFzIGEgY2xpY2ssIGlmIHRoZSBlbGVtZW50IGhhcyBmb2N1cy5cblx0ICogIEBwYXJhbSB7ZWxlbWVudH0gbiBFbGVtZW50IHRvIGJpbmQgdGhlIGFjdGlvbiB0b1xuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9EYXRhIERhdGEgb2JqZWN0IHRvIHBhc3MgdG8gdGhlIHRyaWdnZXJlZCBmdW5jdGlvblxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZFxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXG5cdCAqL1xuXHRmdW5jdGlvbiBfZm5CaW5kQWN0aW9uKCBuLCBvRGF0YSwgZm4gKVxuXHR7XG5cdFx0JChuKVxuXHRcdFx0LmJpbmQoICdjbGljay5EVCcsIG9EYXRhLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdG4uYmx1cigpOyAvLyBSZW1vdmUgZm9jdXMgb3V0bGluZSBmb3IgbW91c2UgdXNlcnNcblx0XHRcdFx0XHRmbihlKTtcblx0XHRcdFx0fSApXG5cdFx0XHQuYmluZCggJ2tleXByZXNzLkRUJywgb0RhdGEsIGZ1bmN0aW9uIChlKXtcblx0XHRcdFx0XHRpZiAoIGUud2hpY2ggPT09IDEzICkge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0Zm4oZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IClcblx0XHRcdC5iaW5kKCAnc2VsZWN0c3RhcnQuRFQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0LyogVGFrZSB0aGUgYnJ1dGFsIGFwcHJvYWNoIHRvIGNhbmNlbGxpbmcgdGV4dCBzZWxlY3Rpb24gKi9cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0gKTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBSZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uLiBFYXNpbHkgYWxsb3dzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgYWRkZWQgdG9cblx0ICogYW4gYXJyYXkgc3RvcmUgb2YgY2FsbGJhY2sgZnVuY3Rpb25zIHRoYXQgY2FuIHRoZW4gYWxsIGJlIGNhbGxlZCB0b2dldGhlci5cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBzU3RvcmUgTmFtZSBvZiB0aGUgYXJyYXkgc3RvcmFnZSBmb3IgdGhlIGNhbGxiYWNrcyBpbiBvU2V0dGluZ3Ncblx0ICogIEBwYXJhbSB7ZnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBiYWNrXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gc05hbWUgSWRlbnRpZnlpbmcgbmFtZSBmb3IgdGhlIGNhbGxiYWNrIChpLmUuIGEgbGFiZWwpXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsIHNTdG9yZSwgZm4sIHNOYW1lIClcblx0e1xuXHRcdGlmICggZm4gKVxuXHRcdHtcblx0XHRcdG9TZXR0aW5nc1tzU3RvcmVdLnB1c2goIHtcblx0XHRcdFx0XCJmblwiOiBmbixcblx0XHRcdFx0XCJzTmFtZVwiOiBzTmFtZVxuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBGaXJlIGNhbGxiYWNrIGZ1bmN0aW9ucyBhbmQgdHJpZ2dlciBldmVudHMuIE5vdGUgdGhhdCB0aGUgbG9vcCBvdmVyIHRoZVxuXHQgKiBjYWxsYmFjayBhcnJheSBzdG9yZSBpcyBkb25lIGJhY2t3YXJkcyEgRnVydGhlciBub3RlIHRoYXQgeW91IGRvIG5vdCB3YW50IHRvXG5cdCAqIGZpcmUgb2ZmIHRyaWdnZXJzIGluIHRpbWUgc2Vuc2l0aXZlIGFwcGxpY2F0aW9ucyAoZm9yIGV4YW1wbGUgY2VsbCBjcmVhdGlvbilcblx0ICogYXMgaXRzIHNsb3cuXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFja0FyciBOYW1lIG9mIHRoZSBhcnJheSBzdG9yYWdlIGZvciB0aGUgY2FsbGJhY2tzIGluXG5cdCAqICAgICAgb1NldHRpbmdzXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgdGhlIGpRdWVyeSBjdXN0b20gZXZlbnQgdG8gdHJpZ2dlci4gSWZcblx0ICogICAgICBudWxsIG5vIHRyaWdnZXIgaXMgZmlyZWRcblx0ICogIEBwYXJhbSB7YXJyYXl9IGFyZ3MgQXJyYXkgb2YgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIC9cblx0ICogICAgICB0cmlnZ2VyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIGNhbGxiYWNrQXJyLCBldmVudE5hbWUsIGFyZ3MgKVxuXHR7XG5cdFx0dmFyIHJldCA9IFtdO1xuXHRcblx0XHRpZiAoIGNhbGxiYWNrQXJyICkge1xuXHRcdFx0cmV0ID0gJC5tYXAoIHNldHRpbmdzW2NhbGxiYWNrQXJyXS5zbGljZSgpLnJldmVyc2UoKSwgZnVuY3Rpb24gKHZhbCwgaSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsLmZuLmFwcGx5KCBzZXR0aW5ncy5vSW5zdGFuY2UsIGFyZ3MgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdGlmICggZXZlbnROYW1lICE9PSBudWxsICkge1xuXHRcdFx0dmFyIGUgPSAkLkV2ZW50KCBldmVudE5hbWUrJy5kdCcgKTtcblx0XG5cdFx0XHQkKHNldHRpbmdzLm5UYWJsZSkudHJpZ2dlciggZSwgYXJncyApO1xuXHRcblx0XHRcdHJldC5wdXNoKCBlLnJlc3VsdCApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIF9mbkxlbmd0aE92ZXJmbG93ICggc2V0dGluZ3MgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRzdGFydCA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LFxuXHRcdFx0ZW5kID0gc2V0dGluZ3MuZm5EaXNwbGF5RW5kKCksXG5cdFx0XHRsZW4gPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGg7XG5cdFxuXHRcdC8qIElmIHdlIGhhdmUgc3BhY2UgdG8gc2hvdyBleHRyYSByb3dzIChiYWNraW5nIHVwIGZyb20gdGhlIGVuZCBwb2ludCAtIHRoZW4gZG8gc28gKi9cblx0XHRpZiAoIHN0YXJ0ID49IGVuZCApXG5cdFx0e1xuXHRcdFx0c3RhcnQgPSBlbmQgLSBsZW47XG5cdFx0fVxuXHRcblx0XHQvLyBLZWVwIHRoZSBzdGFydCByZWNvcmQgb24gdGhlIGN1cnJlbnQgcGFnZVxuXHRcdHN0YXJ0IC09IChzdGFydCAlIGxlbik7XG5cdFxuXHRcdGlmICggbGVuID09PSAtMSB8fCBzdGFydCA8IDAgKVxuXHRcdHtcblx0XHRcdHN0YXJ0ID0gMDtcblx0XHR9XG5cdFxuXHRcdHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gc3RhcnQ7XG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBfZm5SZW5kZXJlciggc2V0dGluZ3MsIHR5cGUgKVxuXHR7XG5cdFx0dmFyIHJlbmRlcmVyID0gc2V0dGluZ3MucmVuZGVyZXI7XG5cdFx0dmFyIGhvc3QgPSBEYXRhVGFibGUuZXh0LnJlbmRlcmVyW3R5cGVdO1xuXHRcblx0XHRpZiAoICQuaXNQbGFpbk9iamVjdCggcmVuZGVyZXIgKSAmJiByZW5kZXJlclt0eXBlXSApIHtcblx0XHRcdC8vIFNwZWNpZmljIHJlbmRlcmVyIGZvciB0aGlzIHR5cGUuIElmIGF2YWlsYWJsZSB1c2UgaXQsIG90aGVyd2lzZSB1c2Vcblx0XHRcdC8vIHRoZSBkZWZhdWx0LlxuXHRcdFx0cmV0dXJuIGhvc3RbcmVuZGVyZXJbdHlwZV1dIHx8IGhvc3QuXztcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIHR5cGVvZiByZW5kZXJlciA9PT0gJ3N0cmluZycgKSB7XG5cdFx0XHQvLyBDb21tb24gcmVuZGVyZXIgLSBpZiB0aGVyZSBpcyBvbmUgYXZhaWxhYmxlIGZvciB0aGlzIHR5cGUgdXNlIGl0LFxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHVzZSB0aGUgZGVmYXVsdFxuXHRcdFx0cmV0dXJuIGhvc3RbcmVuZGVyZXJdIHx8IGhvc3QuXztcblx0XHR9XG5cdFxuXHRcdC8vIFVzZSB0aGUgZGVmYXVsdFxuXHRcdHJldHVybiBob3N0Ll87XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogRGV0ZWN0IHRoZSBkYXRhIHNvdXJjZSBiZWluZyB1c2VkIGZvciB0aGUgdGFibGUuIFVzZWQgdG8gc2ltcGxpZnkgdGhlIGNvZGVcblx0ICogYSBsaXR0bGUgKGFqYXgpIGFuZCB0byBtYWtlIGl0IGNvbXByZXNzIGEgbGl0dGxlIHNtYWxsZXIuXG5cdCAqXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEByZXR1cm5zIHtzdHJpbmd9IERhdGEgc291cmNlXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkRhdGFTb3VyY2UgKCBzZXR0aW5ncyApXG5cdHtcblx0XHRpZiAoIHNldHRpbmdzLm9GZWF0dXJlcy5iU2VydmVyU2lkZSApIHtcblx0XHRcdHJldHVybiAnc3NwJztcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIHNldHRpbmdzLmFqYXggfHwgc2V0dGluZ3Muc0FqYXhTb3VyY2UgKSB7XG5cdFx0XHRyZXR1cm4gJ2FqYXgnO1xuXHRcdH1cblx0XHRyZXR1cm4gJ2RvbSc7XG5cdH1cblx0XG5cblx0RGF0YVRhYmxlID0gZnVuY3Rpb24oIG9wdGlvbnMgKVxuXHR7XG5cdFx0LyoqXG5cdFx0ICogUGVyZm9ybSBhIGpRdWVyeSBzZWxlY3RvciBhY3Rpb24gb24gdGhlIHRhYmxlJ3MgVFIgZWxlbWVudHMgKGZyb20gdGhlIHRib2R5KSBhbmRcblx0XHQgKiByZXR1cm4gdGhlIHJlc3VsdGluZyBqUXVlcnkgb2JqZWN0LlxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ3xub2RlfGpRdWVyeX0gc1NlbGVjdG9yIGpRdWVyeSBzZWxlY3RvciBvciBub2RlIGNvbGxlY3Rpb24gdG8gYWN0IG9uXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBbb09wdHNdIE9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIG1vZGlmeWluZyB0aGUgcm93cyB0byBiZSBpbmNsdWRlZFxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gW29PcHRzLmZpbHRlcj1ub25lXSBTZWxlY3QgVFIgZWxlbWVudHMgdGhhdCBtZWV0IHRoZSBjdXJyZW50IGZpbHRlclxuXHRcdCAqICAgIGNyaXRlcmlvbiAoXCJhcHBsaWVkXCIpIG9yIGFsbCBUUiBlbGVtZW50cyAoaS5lLiBubyBmaWx0ZXIpLlxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gW29PcHRzLm9yZGVyPWN1cnJlbnRdIE9yZGVyIG9mIHRoZSBUUiBlbGVtZW50cyBpbiB0aGUgcHJvY2Vzc2VkIGFycmF5LlxuXHRcdCAqICAgIENhbiBiZSBlaXRoZXIgJ2N1cnJlbnQnLCB3aGVyZWJ5IHRoZSBjdXJyZW50IHNvcnRpbmcgb2YgdGhlIHRhYmxlIGlzIHVzZWQsIG9yXG5cdFx0ICogICAgJ29yaWdpbmFsJyB3aGVyZWJ5IHRoZSBvcmlnaW5hbCBvcmRlciB0aGUgZGF0YSB3YXMgcmVhZCBpbnRvIHRoZSB0YWJsZSBpcyB1c2VkLlxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gW29PcHRzLnBhZ2U9YWxsXSBMaW1pdCB0aGUgc2VsZWN0aW9uIHRvIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHBhZ2Vcblx0XHQgKiAgICAoXCJjdXJyZW50XCIpIG9yIG5vdCAoXCJhbGxcIikuIElmICdjdXJyZW50JyBpcyBnaXZlbiwgdGhlbiBvcmRlciBpcyBhc3N1bWVkIHRvIGJlXG5cdFx0ICogICAgJ2N1cnJlbnQnIGFuZCBmaWx0ZXIgaXMgJ2FwcGxpZWQnLCByZWdhcmRsZXNzIG9mIHdoYXQgdGhleSBtaWdodCBiZSBnaXZlbiBhcy5cblx0XHQgKiAgQHJldHVybnMge29iamVjdH0galF1ZXJ5IG9iamVjdCwgZmlsdGVyZWQgYnkgdGhlIGdpdmVuIHNlbGVjdG9yLlxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBIaWdobGlnaHQgZXZlcnkgc2Vjb25kIHJvd1xuXHRcdCAqICAgICAgb1RhYmxlLiQoJ3RyOm9kZCcpLmNzcygnYmFja2dyb3VuZENvbG9yJywgJ2JsdWUnKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBGaWx0ZXIgdG8gcm93cyB3aXRoICdXZWJraXQnIGluIHRoZW0sIGFkZCBhIGJhY2tncm91bmQgY29sb3VyIGFuZCB0aGVuXG5cdFx0ICogICAgICAvLyByZW1vdmUgdGhlIGZpbHRlciwgdGh1cyBoaWdobGlnaHRpbmcgdGhlICdXZWJraXQnIHJvd3Mgb25seS5cblx0XHQgKiAgICAgIG9UYWJsZS5mbkZpbHRlcignV2Via2l0Jyk7XG5cdFx0ICogICAgICBvVGFibGUuJCgndHInLCB7XCJzZWFyY2hcIjogXCJhcHBsaWVkXCJ9KS5jc3MoJ2JhY2tncm91bmRDb2xvcicsICdibHVlJyk7XG5cdFx0ICogICAgICBvVGFibGUuZm5GaWx0ZXIoJycpO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLiQgPSBmdW5jdGlvbiAoIHNTZWxlY3Rvciwgb09wdHMgKVxuXHRcdHtcblx0XHRcdHJldHVybiB0aGlzLmFwaSh0cnVlKS4kKCBzU2VsZWN0b3IsIG9PcHRzICk7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBBbG1vc3QgaWRlbnRpY2FsIHRvICQgaW4gb3BlcmF0aW9uLCBidXQgaW4gdGhpcyBjYXNlIHJldHVybnMgdGhlIGRhdGEgZm9yIHRoZSBtYXRjaGVkXG5cdFx0ICogcm93cyAtIGFzIHN1Y2gsIHRoZSBqUXVlcnkgc2VsZWN0b3IgdXNlZCBzaG91bGQgbWF0Y2ggVFIgcm93IG5vZGVzIG9yIFREL1RIIGNlbGwgbm9kZXNcblx0XHQgKiByYXRoZXIgdGhhbiBhbnkgZGVzY2VuZGFudHMsIHNvIHRoZSBkYXRhIGNhbiBiZSBvYnRhaW5lZCBmb3IgdGhlIHJvdy9jZWxsLiBJZiBtYXRjaGluZ1xuXHRcdCAqIHJvd3MgYXJlIGZvdW5kLCB0aGUgZGF0YSByZXR1cm5lZCBpcyB0aGUgb3JpZ2luYWwgZGF0YSBhcnJheS9vYmplY3QgdGhhdCB3YXMgdXNlZCB0b1xuXHRcdCAqIGNyZWF0ZSB0aGUgcm93IChvciBhIGdlbmVyYXRlZCBhcnJheSBpZiBmcm9tIGEgRE9NIHNvdXJjZSkuXG5cdFx0ICpcblx0XHQgKiBUaGlzIG1ldGhvZCBpcyBvZnRlbiB1c2VmdWwgaW4tY29tYmluYXRpb24gd2l0aCAkIHdoZXJlIGJvdGggZnVuY3Rpb25zIGFyZSBnaXZlbiB0aGVcblx0XHQgKiBzYW1lIHBhcmFtZXRlcnMgYW5kIHRoZSBhcnJheSBpbmRleGVzIHdpbGwgbWF0Y2ggaWRlbnRpY2FsbHkuXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfG5vZGV8alF1ZXJ5fSBzU2VsZWN0b3IgalF1ZXJ5IHNlbGVjdG9yIG9yIG5vZGUgY29sbGVjdGlvbiB0byBhY3Qgb25cblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IFtvT3B0c10gT3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgbW9kaWZ5aW5nIHRoZSByb3dzIHRvIGJlIGluY2x1ZGVkXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSBbb09wdHMuZmlsdGVyPW5vbmVdIFNlbGVjdCBlbGVtZW50cyB0aGF0IG1lZXQgdGhlIGN1cnJlbnQgZmlsdGVyXG5cdFx0ICogICAgY3JpdGVyaW9uIChcImFwcGxpZWRcIikgb3IgYWxsIGVsZW1lbnRzIChpLmUuIG5vIGZpbHRlcikuXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSBbb09wdHMub3JkZXI9Y3VycmVudF0gT3JkZXIgb2YgdGhlIGRhdGEgaW4gdGhlIHByb2Nlc3NlZCBhcnJheS5cblx0XHQgKiAgICBDYW4gYmUgZWl0aGVyICdjdXJyZW50Jywgd2hlcmVieSB0aGUgY3VycmVudCBzb3J0aW5nIG9mIHRoZSB0YWJsZSBpcyB1c2VkLCBvclxuXHRcdCAqICAgICdvcmlnaW5hbCcgd2hlcmVieSB0aGUgb3JpZ2luYWwgb3JkZXIgdGhlIGRhdGEgd2FzIHJlYWQgaW50byB0aGUgdGFibGUgaXMgdXNlZC5cblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IFtvT3B0cy5wYWdlPWFsbF0gTGltaXQgdGhlIHNlbGVjdGlvbiB0byB0aGUgY3VycmVudGx5IGRpc3BsYXllZCBwYWdlXG5cdFx0ICogICAgKFwiY3VycmVudFwiKSBvciBub3QgKFwiYWxsXCIpLiBJZiAnY3VycmVudCcgaXMgZ2l2ZW4sIHRoZW4gb3JkZXIgaXMgYXNzdW1lZCB0byBiZVxuXHRcdCAqICAgICdjdXJyZW50JyBhbmQgZmlsdGVyIGlzICdhcHBsaWVkJywgcmVnYXJkbGVzcyBvZiB3aGF0IHRoZXkgbWlnaHQgYmUgZ2l2ZW4gYXMuXG5cdFx0ICogIEByZXR1cm5zIHthcnJheX0gRGF0YSBmb3IgdGhlIG1hdGNoZWQgZWxlbWVudHMuIElmIGFueSBlbGVtZW50cywgYXMgYSByZXN1bHQgb2YgdGhlXG5cdFx0ICogICAgc2VsZWN0b3IsIHdlcmUgbm90IFRSLCBURCBvciBUSCBlbGVtZW50cyBpbiB0aGUgRGF0YVRhYmxlLCB0aGV5IHdpbGwgaGF2ZSBhIG51bGxcblx0XHQgKiAgICBlbnRyeSBpbiB0aGUgYXJyYXkuXG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICpcblx0XHQgKiAgICAgIC8vIEdldCB0aGUgZGF0YSBmcm9tIHRoZSBmaXJzdCByb3cgaW4gdGhlIHRhYmxlXG5cdFx0ICogICAgICB2YXIgZGF0YSA9IG9UYWJsZS5fKCd0cjpmaXJzdCcpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBEbyBzb21ldGhpbmcgdXNlZnVsIHdpdGggdGhlIGRhdGFcblx0XHQgKiAgICAgIGFsZXJ0KCBcIkZpcnN0IGNlbGwgaXM6IFwiK2RhdGFbMF0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBGaWx0ZXIgdG8gJ1dlYmtpdCcgYW5kIGdldCBhbGwgZGF0YSBmb3Jcblx0XHQgKiAgICAgIG9UYWJsZS5mbkZpbHRlcignV2Via2l0Jyk7XG5cdFx0ICogICAgICB2YXIgZGF0YSA9IG9UYWJsZS5fKCd0cicsIHtcInNlYXJjaFwiOiBcImFwcGxpZWRcIn0pO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBEbyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YVxuXHRcdCAqICAgICAgYWxlcnQoIGRhdGEubGVuZ3RoK1wiIHJvd3MgbWF0Y2hlZCB0aGUgc2VhcmNoXCIgKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5fID0gZnVuY3Rpb24gKCBzU2VsZWN0b3IsIG9PcHRzIClcblx0XHR7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcGkodHJ1ZSkucm93cyggc1NlbGVjdG9yLCBvT3B0cyApLmRhdGEoKTtcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZSBhIERhdGFUYWJsZXMgQXBpIGluc3RhbmNlLCB3aXRoIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFibGVzIGZvclxuXHRcdCAqIHRoZSBBcGkncyBjb250ZXh0LlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3RyYWRpdGlvbmFsPWZhbHNlXSBTZXQgdGhlIEFQSSBpbnN0YW5jZSdzIGNvbnRleHQgdG8gYmVcblx0XHQgKiAgIG9ubHkgdGhlIHRhYmxlIHJlZmVycmVkIHRvIGJ5IHRoZSBgRGF0YVRhYmxlLmV4dC5pQXBpSW5kZXhgIG9wdGlvbiwgYXMgd2FzXG5cdFx0ICogICB1c2VkIGluIHRoZSBBUEkgcHJlc2VudGVkIGJ5IERhdGFUYWJsZXMgMS45LSAoaS5lLiB0aGUgdHJhZGl0aW9uYWwgbW9kZSksXG5cdFx0ICogICBvciBpZiBhbGwgdGFibGVzIGNhcHR1cmVkIGluIHRoZSBqUXVlcnkgb2JqZWN0IHNob3VsZCBiZSB1c2VkLlxuXHRcdCAqIEByZXR1cm4ge0RhdGFUYWJsZXMuQXBpfVxuXHRcdCAqL1xuXHRcdHRoaXMuYXBpID0gZnVuY3Rpb24gKCB0cmFkaXRpb25hbCApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRyYWRpdGlvbmFsID9cblx0XHRcdFx0bmV3IF9BcGkoXG5cdFx0XHRcdFx0X2ZuU2V0dGluZ3NGcm9tTm9kZSggdGhpc1sgX2V4dC5pQXBpSW5kZXggXSApXG5cdFx0XHRcdCkgOlxuXHRcdFx0XHRuZXcgX0FwaSggdGhpcyApO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogQWRkIGEgc2luZ2xlIG5ldyByb3cgb3IgbXVsdGlwbGUgcm93cyBvZiBkYXRhIHRvIHRoZSB0YWJsZS4gUGxlYXNlIG5vdGVcblx0XHQgKiB0aGF0IHRoaXMgaXMgc3VpdGFibGUgZm9yIGNsaWVudC1zaWRlIHByb2Nlc3Npbmcgb25seSAtIGlmIHlvdSBhcmUgdXNpbmdcblx0XHQgKiBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIChpLmUuIFwiYlNlcnZlclNpZGVcIjogdHJ1ZSksIHRoZW4gdG8gYWRkIGRhdGEsIHlvdVxuXHRcdCAqIG11c3QgYWRkIGl0IHRvIHRoZSBkYXRhIHNvdXJjZSwgaS5lLiB0aGUgc2VydmVyLXNpZGUsIHRocm91Z2ggYW4gQWpheCBjYWxsLlxuXHRcdCAqICBAcGFyYW0ge2FycmF5fG9iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBiZSBhZGRlZCB0byB0aGUgdGFibGUuIFRoaXMgY2FuIGJlOlxuXHRcdCAqICAgIDx1bD5cblx0XHQgKiAgICAgIDxsaT4xRCBhcnJheSBvZiBkYXRhIC0gYWRkIGEgc2luZ2xlIHJvdyB3aXRoIHRoZSBkYXRhIHByb3ZpZGVkPC9saT5cblx0XHQgKiAgICAgIDxsaT4yRCBhcnJheSBvZiBhcnJheXMgLSBhZGQgbXVsdGlwbGUgcm93cyBpbiBhIHNpbmdsZSBjYWxsPC9saT5cblx0XHQgKiAgICAgIDxsaT5vYmplY3QgLSBkYXRhIG9iamVjdCB3aGVuIHVzaW5nIDxpPm1EYXRhPC9pPjwvbGk+XG5cdFx0ICogICAgICA8bGk+YXJyYXkgb2Ygb2JqZWN0cyAtIG11bHRpcGxlIGRhdGEgb2JqZWN0cyB3aGVuIHVzaW5nIDxpPm1EYXRhPC9pPjwvbGk+XG5cdFx0ICogICAgPC91bD5cblx0XHQgKiAgQHBhcmFtIHtib29sfSBbcmVkcmF3PXRydWVdIHJlZHJhdyB0aGUgdGFibGUgb3Igbm90XG5cdFx0ICogIEByZXR1cm5zIHthcnJheX0gQW4gYXJyYXkgb2YgaW50ZWdlcnMsIHJlcHJlc2VudGluZyB0aGUgbGlzdCBvZiBpbmRleGVzIGluXG5cdFx0ICogICAgPGk+YW9EYXRhPC9pPiAoe0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfSkgdGhhdCBoYXZlIGJlZW4gYWRkZWQgdG9cblx0XHQgKiAgICB0aGUgdGFibGUuXG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIEdsb2JhbCB2YXIgZm9yIGNvdW50ZXJcblx0XHQgKiAgICB2YXIgZ2lDb3VudCA9IDI7XG5cdFx0ICpcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogICAgZnVuY3Rpb24gZm5DbGlja0FkZFJvdygpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCkuZm5BZGREYXRhKCBbXG5cdFx0ICogICAgICAgIGdpQ291bnQrXCIuMVwiLFxuXHRcdCAqICAgICAgICBnaUNvdW50K1wiLjJcIixcblx0XHQgKiAgICAgICAgZ2lDb3VudCtcIi4zXCIsXG5cdFx0ICogICAgICAgIGdpQ291bnQrXCIuNFwiIF1cblx0XHQgKiAgICAgICk7XG5cdFx0ICpcblx0XHQgKiAgICAgIGdpQ291bnQrKztcblx0XHQgKiAgICB9XG5cdFx0ICovXG5cdFx0dGhpcy5mbkFkZERhdGEgPSBmdW5jdGlvbiggZGF0YSwgcmVkcmF3IClcblx0XHR7XG5cdFx0XHR2YXIgYXBpID0gdGhpcy5hcGkoIHRydWUgKTtcblx0XHRcblx0XHRcdC8qIENoZWNrIGlmIHdlIHdhbnQgdG8gYWRkIG11bHRpcGxlIHJvd3Mgb3Igbm90ICovXG5cdFx0XHR2YXIgcm93cyA9ICQuaXNBcnJheShkYXRhKSAmJiAoICQuaXNBcnJheShkYXRhWzBdKSB8fCAkLmlzUGxhaW5PYmplY3QoZGF0YVswXSkgKSA/XG5cdFx0XHRcdGFwaS5yb3dzLmFkZCggZGF0YSApIDpcblx0XHRcdFx0YXBpLnJvdy5hZGQoIGRhdGEgKTtcblx0XHRcblx0XHRcdGlmICggcmVkcmF3ID09PSB1bmRlZmluZWQgfHwgcmVkcmF3ICkge1xuXHRcdFx0XHRhcGkuZHJhdygpO1xuXHRcdFx0fVxuXHRcdFxuXHRcdFx0cmV0dXJuIHJvd3MuZmxhdHRlbigpLnRvQXJyYXkoKTtcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBtYWtlIERhdGFUYWJsZXMgcmVjYWxjdWxhdGUgdGhlIGNvbHVtbiBzaXplcywgYmFzZWQgb24gdGhlIGRhdGFcblx0XHQgKiBjb250YWluZWQgaW4gdGhlIHRhYmxlIGFuZCB0aGUgc2l6ZXMgYXBwbGllZCB0byB0aGUgY29sdW1ucyAoaW4gdGhlIERPTSwgQ1NTIG9yXG5cdFx0ICogdGhyb3VnaCB0aGUgc1dpZHRoIHBhcmFtZXRlcikuIFRoaXMgY2FuIGJlIHVzZWZ1bCB3aGVuIHRoZSB3aWR0aCBvZiB0aGUgdGFibGUnc1xuXHRcdCAqIHBhcmVudCBlbGVtZW50IGNoYW5nZXMgKGZvciBleGFtcGxlIGEgd2luZG93IHJlc2l6ZSkuXG5cdFx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gW2JSZWRyYXc9dHJ1ZV0gUmVkcmF3IHRoZSB0YWJsZSBvciBub3QsIHlvdSB3aWxsIHR5cGljYWxseSB3YW50IHRvXG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic1Njcm9sbFlcIjogXCIyMDBweFwiLFxuXHRcdCAqICAgICAgICBcImJQYWdpbmF0ZVwiOiBmYWxzZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqXG5cdFx0ICogICAgICAkKHdpbmRvdykuYmluZCgncmVzaXplJywgZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgICBvVGFibGUuZm5BZGp1c3RDb2x1bW5TaXppbmcoKTtcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mbkFkanVzdENvbHVtblNpemluZyA9IGZ1bmN0aW9uICggYlJlZHJhdyApXG5cdFx0e1xuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICkuY29sdW1ucy5hZGp1c3QoKTtcblx0XHRcdHZhciBzZXR0aW5ncyA9IGFwaS5zZXR0aW5ncygpWzBdO1xuXHRcdFx0dmFyIHNjcm9sbCA9IHNldHRpbmdzLm9TY3JvbGw7XG5cdFx0XG5cdFx0XHRpZiAoIGJSZWRyYXcgPT09IHVuZGVmaW5lZCB8fCBiUmVkcmF3ICkge1xuXHRcdFx0XHRhcGkuZHJhdyggZmFsc2UgKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBzY3JvbGwuc1ggIT09IFwiXCIgfHwgc2Nyb2xsLnNZICE9PSBcIlwiICkge1xuXHRcdFx0XHQvKiBJZiBub3QgcmVkcmF3aW5nLCBidXQgc2Nyb2xsaW5nLCB3ZSB3YW50IHRvIGFwcGx5IHRoZSBuZXcgY29sdW1uIHNpemVzIGFueXdheSAqL1xuXHRcdFx0XHRfZm5TY3JvbGxEcmF3KCBzZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogUXVpY2tseSBhbmQgc2ltcGx5IGNsZWFyIGEgdGFibGVcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbYlJlZHJhdz10cnVlXSByZWRyYXcgdGhlIHRhYmxlIG9yIG5vdFxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBJbW1lZGlhdGVseSAnbnVrZScgdGhlIGN1cnJlbnQgcm93cyAocGVyaGFwcyB3YWl0aW5nIGZvciBhbiBBamF4IGNhbGxiYWNrLi4uKVxuXHRcdCAqICAgICAgb1RhYmxlLmZuQ2xlYXJUYWJsZSgpO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuQ2xlYXJUYWJsZSA9IGZ1bmN0aW9uKCBiUmVkcmF3IClcblx0XHR7XG5cdFx0XHR2YXIgYXBpID0gdGhpcy5hcGkoIHRydWUgKS5jbGVhcigpO1xuXHRcdFxuXHRcdFx0aWYgKCBiUmVkcmF3ID09PSB1bmRlZmluZWQgfHwgYlJlZHJhdyApIHtcblx0XHRcdFx0YXBpLmRyYXcoKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIFRoZSBleGFjdCBvcHBvc2l0ZSBvZiAnb3BlbmluZycgYSByb3csIHRoaXMgZnVuY3Rpb24gd2lsbCBjbG9zZSBhbnkgcm93cyB3aGljaFxuXHRcdCAqIGFyZSBjdXJyZW50bHkgJ29wZW4nLlxuXHRcdCAqICBAcGFyYW0ge25vZGV9IG5UciB0aGUgdGFibGUgcm93IHRvICdjbG9zZSdcblx0XHQgKiAgQHJldHVybnMge2ludH0gMCBvbiBzdWNjZXNzLCBvciAxIGlmIGZhaWxlZCAoY2FuJ3QgZmluZCB0aGUgcm93KVxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGU7XG5cdFx0ICpcblx0XHQgKiAgICAgIC8vICdvcGVuJyBhbiBpbmZvcm1hdGlvbiByb3cgd2hlbiBhIHJvdyBpcyBjbGlja2VkIG9uXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZSB0Ym9keSB0cicpLmNsaWNrKCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAgIGlmICggb1RhYmxlLmZuSXNPcGVuKHRoaXMpICkge1xuXHRcdCAqICAgICAgICAgIG9UYWJsZS5mbkNsb3NlKCB0aGlzICk7XG5cdFx0ICogICAgICAgIH0gZWxzZSB7XG5cdFx0ICogICAgICAgICAgb1RhYmxlLmZuT3BlbiggdGhpcywgXCJUZW1wb3Jhcnkgcm93IG9wZW5lZFwiLCBcImluZm9fcm93XCIgKTtcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqXG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuQ2xvc2UgPSBmdW5jdGlvbiggblRyIClcblx0XHR7XG5cdFx0XHR0aGlzLmFwaSggdHJ1ZSApLnJvdyggblRyICkuY2hpbGQuaGlkZSgpO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlIGEgcm93IGZvciB0aGUgdGFibGVcblx0XHQgKiAgQHBhcmFtIHttaXhlZH0gdGFyZ2V0IFRoZSBpbmRleCBvZiB0aGUgcm93IGZyb20gYW9EYXRhIHRvIGJlIGRlbGV0ZWQsIG9yXG5cdFx0ICogICAgdGhlIFRSIGVsZW1lbnQgeW91IHdhbnQgdG8gZGVsZXRlXG5cdFx0ICogIEBwYXJhbSB7ZnVuY3Rpb258bnVsbH0gW2NhbGxCYWNrXSBDYWxsYmFjayBmdW5jdGlvblxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtyZWRyYXc9dHJ1ZV0gUmVkcmF3IHRoZSB0YWJsZSBvciBub3Rcblx0XHQgKiAgQHJldHVybnMge2FycmF5fSBUaGUgcm93IHRoYXQgd2FzIGRlbGV0ZWRcblx0XHQgKiAgQGR0b3B0IEFQSVxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0XHQgKlxuXHRcdCAqICAgICAgLy8gSW1tZWRpYXRlbHkgcmVtb3ZlIHRoZSBmaXJzdCByb3dcblx0XHQgKiAgICAgIG9UYWJsZS5mbkRlbGV0ZVJvdyggMCApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuRGVsZXRlUm93ID0gZnVuY3Rpb24oIHRhcmdldCwgY2FsbGJhY2ssIHJlZHJhdyApXG5cdFx0e1xuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XG5cdFx0XHR2YXIgcm93cyA9IGFwaS5yb3dzKCB0YXJnZXQgKTtcblx0XHRcdHZhciBzZXR0aW5ncyA9IHJvd3Muc2V0dGluZ3MoKVswXTtcblx0XHRcdHZhciBkYXRhID0gc2V0dGluZ3MuYW9EYXRhWyByb3dzWzBdWzBdIF07XG5cdFx0XG5cdFx0XHRyb3dzLnJlbW92ZSgpO1xuXHRcdFxuXHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpcywgc2V0dGluZ3MsIGRhdGEgKTtcblx0XHRcdH1cblx0XHRcblx0XHRcdGlmICggcmVkcmF3ID09PSB1bmRlZmluZWQgfHwgcmVkcmF3ICkge1xuXHRcdFx0XHRhcGkuZHJhdygpO1xuXHRcdFx0fVxuXHRcdFxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBSZXN0b3JlIHRoZSB0YWJsZSB0byBpdCdzIG9yaWdpbmFsIHN0YXRlIGluIHRoZSBET00gYnkgcmVtb3ZpbmcgYWxsIG9mIERhdGFUYWJsZXNcblx0XHQgKiBlbmhhbmNlbWVudHMsIGFsdGVyYXRpb25zIHRvIHRoZSBET00gc3RydWN0dXJlIG9mIHRoZSB0YWJsZSBhbmQgZXZlbnQgbGlzdGVuZXJzLlxuXHRcdCAqICBAcGFyYW0ge2Jvb2xlYW59IFtyZW1vdmU9ZmFsc2VdIENvbXBsZXRlbHkgcmVtb3ZlIHRoZSB0YWJsZSBmcm9tIHRoZSBET01cblx0XHQgKiAgQGR0b3B0IEFQSVxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAvLyBUaGlzIGV4YW1wbGUgaXMgZmFpcmx5IHBvaW50bGVzcyBpbiByZWFsaXR5LCBidXQgc2hvd3MgaG93IGZuRGVzdHJveSBjYW4gYmUgdXNlZFxuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICogICAgICBvVGFibGUuZm5EZXN0cm95KCk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdHRoaXMuZm5EZXN0cm95ID0gZnVuY3Rpb24gKCByZW1vdmUgKVxuXHRcdHtcblx0XHRcdHRoaXMuYXBpKCB0cnVlICkuZGVzdHJveSggcmVtb3ZlICk7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBSZWRyYXcgdGhlIHRhYmxlXG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2NvbXBsZXRlPXRydWVdIFJlLWZpbHRlciBhbmQgcmVzb3J0IChpZiBlbmFibGVkKSB0aGUgdGFibGUgYmVmb3JlIHRoZSBkcmF3LlxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBSZS1kcmF3IHRoZSB0YWJsZSAtIHlvdSB3b3VsZG4ndCB3YW50IHRvIGRvIGl0IGhlcmUsIGJ1dCBpdCdzIGFuIGV4YW1wbGUgOi0pXG5cdFx0ICogICAgICBvVGFibGUuZm5EcmF3KCk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdHRoaXMuZm5EcmF3ID0gZnVuY3Rpb24oIGNvbXBsZXRlIClcblx0XHR7XG5cdFx0XHQvLyBOb3RlIHRoYXQgdGhpcyBpc24ndCBhbiBleGFjdCBtYXRjaCB0byB0aGUgb2xkIGNhbGwgdG8gX2ZuRHJhdyAtIGl0IHRha2VzXG5cdFx0XHQvLyBpbnRvIGFjY291bnQgdGhlIG5ldyBkYXRhLCBidXQgY2FuIGhvbGQgcG9zaXRpb24uXG5cdFx0XHR0aGlzLmFwaSggdHJ1ZSApLmRyYXcoIGNvbXBsZXRlICk7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBGaWx0ZXIgdGhlIGlucHV0IGJhc2VkIG9uIGRhdGFcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNJbnB1dCBTdHJpbmcgdG8gZmlsdGVyIHRoZSB0YWJsZSBvblxuXHRcdCAqICBAcGFyYW0ge2ludHxudWxsfSBbaUNvbHVtbl0gQ29sdW1uIHRvIGxpbWl0IGZpbHRlcmluZyB0b1xuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiUmVnZXg9ZmFsc2VdIFRyZWF0IGFzIHJlZ3VsYXIgZXhwcmVzc2lvbiBvciBub3Rcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbYlNtYXJ0PXRydWVdIFBlcmZvcm0gc21hcnQgZmlsdGVyaW5nIG9yIG5vdFxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiU2hvd0dsb2JhbD10cnVlXSBTaG93IHRoZSBpbnB1dCBnbG9iYWwgZmlsdGVyIGluIGl0J3MgaW5wdXQgYm94KGVzKVxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiQ2FzZUluc2Vuc2l0aXZlPXRydWVdIERvIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcgKHRydWUpIG9yIG5vdCAoZmFsc2UpXG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICpcblx0XHQgKiAgICAgIC8vIFNvbWV0aW1lIGxhdGVyIC0gZmlsdGVyLi4uXG5cdFx0ICogICAgICBvVGFibGUuZm5GaWx0ZXIoICd0ZXN0IHN0cmluZycgKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mbkZpbHRlciA9IGZ1bmN0aW9uKCBzSW5wdXQsIGlDb2x1bW4sIGJSZWdleCwgYlNtYXJ0LCBiU2hvd0dsb2JhbCwgYkNhc2VJbnNlbnNpdGl2ZSApXG5cdFx0e1xuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XG5cdFx0XG5cdFx0XHRpZiAoIGlDb2x1bW4gPT09IG51bGwgfHwgaUNvbHVtbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRhcGkuc2VhcmNoKCBzSW5wdXQsIGJSZWdleCwgYlNtYXJ0LCBiQ2FzZUluc2Vuc2l0aXZlICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0YXBpLmNvbHVtbiggaUNvbHVtbiApLnNlYXJjaCggc0lucHV0LCBiUmVnZXgsIGJTbWFydCwgYkNhc2VJbnNlbnNpdGl2ZSApO1xuXHRcdFx0fVxuXHRcdFxuXHRcdFx0YXBpLmRyYXcoKTtcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgZGF0YSBmb3IgdGhlIHdob2xlIHRhYmxlLCBhbiBpbmRpdmlkdWFsIHJvdyBvciBhbiBpbmRpdmlkdWFsIGNlbGwgYmFzZWQgb24gdGhlXG5cdFx0ICogcHJvdmlkZWQgcGFyYW1ldGVycy5cblx0XHQgKiAgQHBhcmFtIHtpbnR8bm9kZX0gW3NyY10gQSBUUiByb3cgbm9kZSwgVEQvVEggY2VsbCBub2RlIG9yIGFuIGludGVnZXIuIElmIGdpdmVuIGFzXG5cdFx0ICogICAgYSBUUiBub2RlIHRoZW4gdGhlIGRhdGEgc291cmNlIGZvciB0aGUgd2hvbGUgcm93IHdpbGwgYmUgcmV0dXJuZWQuIElmIGdpdmVuIGFzIGFcblx0XHQgKiAgICBURC9USCBjZWxsIG5vZGUgdGhlbiBpQ29sIHdpbGwgYmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGFuZCB0aGUgZGF0YSBmb3IgdGhlXG5cdFx0ICogICAgY2VsbCByZXR1cm5lZC4gSWYgZ2l2ZW4gYXMgYW4gaW50ZWdlciwgdGhlbiB0aGlzIGlzIHRyZWF0ZWQgYXMgdGhlIGFvRGF0YSBpbnRlcm5hbFxuXHRcdCAqICAgIGRhdGEgaW5kZXggZm9yIHRoZSByb3cgKHNlZSBmbkdldFBvc2l0aW9uKSBhbmQgdGhlIGRhdGEgZm9yIHRoYXQgcm93IHVzZWQuXG5cdFx0ICogIEBwYXJhbSB7aW50fSBbY29sXSBPcHRpb25hbCBjb2x1bW4gaW5kZXggdGhhdCB5b3Ugd2FudCB0aGUgZGF0YSBvZi5cblx0XHQgKiAgQHJldHVybnMge2FycmF5fG9iamVjdHxzdHJpbmd9IElmIG1Sb3cgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSBkYXRhIGZvciBhbGwgcm93cyBpc1xuXHRcdCAqICAgIHJldHVybmVkLiBJZiBtUm93IGlzIGRlZmluZWQsIGp1c3QgZGF0YSBmb3IgdGhhdCByb3csIGFuZCBpcyBpQ29sIGlzXG5cdFx0ICogICAgZGVmaW5lZCwgb25seSBkYXRhIGZvciB0aGUgZGVzaWduYXRlZCBjZWxsIGlzIHJldHVybmVkLlxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBSb3cgZGF0YVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0XHQgKlxuXHRcdCAqICAgICAgb1RhYmxlLiQoJ3RyJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcblx0XHQgKiAgICAgICAgdmFyIGRhdGEgPSBvVGFibGUuZm5HZXREYXRhKCB0aGlzICk7XG5cdFx0ICogICAgICAgIC8vIC4uLiBkbyBzb21ldGhpbmcgd2l0aCB0aGUgYXJyYXkgLyBvYmplY3Qgb2YgZGF0YSBmb3IgdGhlIHJvd1xuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIEluZGl2aWR1YWwgY2VsbCBkYXRhXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICBvVGFibGUuJCgndGQnKS5jbGljayggZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgICB2YXIgc0RhdGEgPSBvVGFibGUuZm5HZXREYXRhKCB0aGlzICk7XG5cdFx0ICogICAgICAgIGFsZXJ0KCAnVGhlIGNlbGwgY2xpY2tlZCBvbiBoYWQgdGhlIHZhbHVlIG9mICcrc0RhdGEgKTtcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mbkdldERhdGEgPSBmdW5jdGlvbiggc3JjLCBjb2wgKVxuXHRcdHtcblx0XHRcdHZhciBhcGkgPSB0aGlzLmFwaSggdHJ1ZSApO1xuXHRcdFxuXHRcdFx0aWYgKCBzcmMgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dmFyIHR5cGUgPSBzcmMubm9kZU5hbWUgPyBzcmMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA6ICcnO1xuXHRcdFxuXHRcdFx0XHRyZXR1cm4gY29sICE9PSB1bmRlZmluZWQgfHwgdHlwZSA9PSAndGQnIHx8IHR5cGUgPT0gJ3RoJyA/XG5cdFx0XHRcdFx0YXBpLmNlbGwoIHNyYywgY29sICkuZGF0YSgpIDpcblx0XHRcdFx0XHRhcGkucm93KCBzcmMgKS5kYXRhKCkgfHwgbnVsbDtcblx0XHRcdH1cblx0XHRcblx0XHRcdHJldHVybiBhcGkuZGF0YSgpLnRvQXJyYXkoKTtcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIEdldCBhbiBhcnJheSBvZiB0aGUgVFIgbm9kZXMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgdGFibGUncyBib2R5LiBOb3RlIHRoYXQgeW91IHdpbGxcblx0XHQgKiB0eXBpY2FsbHkgd2FudCB0byB1c2UgdGhlICckJyBBUEkgbWV0aG9kIGluIHByZWZlcmVuY2UgdG8gdGhpcyBhcyBpdCBpcyBtb3JlXG5cdFx0ICogZmxleGlibGUuXG5cdFx0ICogIEBwYXJhbSB7aW50fSBbaVJvd10gT3B0aW9uYWwgcm93IGluZGV4IGZvciB0aGUgVFIgZWxlbWVudCB5b3Ugd2FudFxuXHRcdCAqICBAcmV0dXJucyB7YXJyYXl8bm9kZX0gSWYgaVJvdyBpcyB1bmRlZmluZWQsIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIFRSIGVsZW1lbnRzXG5cdFx0ICogICAgaW4gdGhlIHRhYmxlJ3MgYm9keSwgb3IgaVJvdyBpcyBkZWZpbmVkLCBqdXN0IHRoZSBUUiBlbGVtZW50IHJlcXVlc3RlZC5cblx0XHQgKiAgQGR0b3B0IEFQSVxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0XHQgKlxuXHRcdCAqICAgICAgLy8gR2V0IHRoZSBub2RlcyBmcm9tIHRoZSB0YWJsZVxuXHRcdCAqICAgICAgdmFyIG5Ob2RlcyA9IG9UYWJsZS5mbkdldE5vZGVzKCApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuR2V0Tm9kZXMgPSBmdW5jdGlvbiggaVJvdyApXG5cdFx0e1xuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XG5cdFx0XG5cdFx0XHRyZXR1cm4gaVJvdyAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0YXBpLnJvdyggaVJvdyApLm5vZGUoKSA6XG5cdFx0XHRcdGFwaS5yb3dzKCkubm9kZXMoKS5mbGF0dGVuKCkudG9BcnJheSgpO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSBhcnJheSBpbmRleGVzIG9mIGEgcGFydGljdWxhciBjZWxsIGZyb20gaXQncyBET00gZWxlbWVudFxuXHRcdCAqIGFuZCBjb2x1bW4gaW5kZXggaW5jbHVkaW5nIGhpZGRlbiBjb2x1bW5zXG5cdFx0ICogIEBwYXJhbSB7bm9kZX0gbm9kZSB0aGlzIGNhbiBlaXRoZXIgYmUgYSBUUiwgVEQgb3IgVEggaW4gdGhlIHRhYmxlJ3MgYm9keVxuXHRcdCAqICBAcmV0dXJucyB7aW50fSBJZiBuTm9kZSBpcyBnaXZlbiBhcyBhIFRSLCB0aGVuIGEgc2luZ2xlIGluZGV4IGlzIHJldHVybmVkLCBvclxuXHRcdCAqICAgIGlmIGdpdmVuIGFzIGEgY2VsbCwgYW4gYXJyYXkgb2YgW3JvdyBpbmRleCwgY29sdW1uIGluZGV4ICh2aXNpYmxlKSxcblx0XHQgKiAgICBjb2x1bW4gaW5kZXggKGFsbCldIGlzIGdpdmVuLlxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlIHRib2R5IHRkJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcblx0XHQgKiAgICAgICAgLy8gR2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBkYXRhIGZyb20gdGhlIG5vZGVcblx0XHQgKiAgICAgICAgdmFyIGFQb3MgPSBvVGFibGUuZm5HZXRQb3NpdGlvbiggdGhpcyApO1xuXHRcdCAqXG5cdFx0ICogICAgICAgIC8vIEdldCB0aGUgZGF0YSBhcnJheSBmb3IgdGhpcyByb3dcblx0XHQgKiAgICAgICAgdmFyIGFEYXRhID0gb1RhYmxlLmZuR2V0RGF0YSggYVBvc1swXSApO1xuXHRcdCAqXG5cdFx0ICogICAgICAgIC8vIFVwZGF0ZSB0aGUgZGF0YSBhcnJheSBhbmQgcmV0dXJuIHRoZSB2YWx1ZVxuXHRcdCAqICAgICAgICBhRGF0YVsgYVBvc1sxXSBdID0gJ2NsaWNrZWQnO1xuXHRcdCAqICAgICAgICB0aGlzLmlubmVySFRNTCA9ICdjbGlja2VkJztcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICAgICAgLy8gSW5pdCBEYXRhVGFibGVzXG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuR2V0UG9zaXRpb24gPSBmdW5jdGlvbiggbm9kZSApXG5cdFx0e1xuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG5cdFx0XG5cdFx0XHRpZiAoIG5vZGVOYW1lID09ICdUUicgKSB7XG5cdFx0XHRcdHJldHVybiBhcGkucm93KCBub2RlICkuaW5kZXgoKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBub2RlTmFtZSA9PSAnVEQnIHx8IG5vZGVOYW1lID09ICdUSCcgKSB7XG5cdFx0XHRcdHZhciBjZWxsID0gYXBpLmNlbGwoIG5vZGUgKS5pbmRleCgpO1xuXHRcdFxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdGNlbGwucm93LFxuXHRcdFx0XHRcdGNlbGwuY29sdW1uVmlzaWJsZSxcblx0XHRcdFx0XHRjZWxsLmNvbHVtblxuXHRcdFx0XHRdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBDaGVjayB0byBzZWUgaWYgYSByb3cgaXMgJ29wZW4nIG9yIG5vdC5cblx0XHQgKiAgQHBhcmFtIHtub2RlfSBuVHIgdGhlIHRhYmxlIHJvdyB0byBjaGVja1xuXHRcdCAqICBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgcm93IGlzIGN1cnJlbnRseSBvcGVuLCBmYWxzZSBvdGhlcndpc2Vcblx0XHQgKiAgQGR0b3B0IEFQSVxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICB2YXIgb1RhYmxlO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyAnb3BlbicgYW4gaW5mb3JtYXRpb24gcm93IHdoZW4gYSByb3cgaXMgY2xpY2tlZCBvblxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUgdGJvZHkgdHInKS5jbGljayggZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgICBpZiAoIG9UYWJsZS5mbklzT3Blbih0aGlzKSApIHtcblx0XHQgKiAgICAgICAgICBvVGFibGUuZm5DbG9zZSggdGhpcyApO1xuXHRcdCAqICAgICAgICB9IGVsc2Uge1xuXHRcdCAqICAgICAgICAgIG9UYWJsZS5mbk9wZW4oIHRoaXMsIFwiVGVtcG9yYXJ5IHJvdyBvcGVuZWRcIiwgXCJpbmZvX3Jvd1wiICk7XG5cdFx0ICogICAgICAgIH1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICAgICAgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mbklzT3BlbiA9IGZ1bmN0aW9uKCBuVHIgKVxuXHRcdHtcblx0XHRcdHJldHVybiB0aGlzLmFwaSggdHJ1ZSApLnJvdyggblRyICkuY2hpbGQuaXNTaG93bigpO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmdW5jdGlvbiB3aWxsIHBsYWNlIGEgbmV3IHJvdyBkaXJlY3RseSBhZnRlciBhIHJvdyB3aGljaCBpcyBjdXJyZW50bHlcblx0XHQgKiBvbiBkaXNwbGF5IG9uIHRoZSBwYWdlLCB3aXRoIHRoZSBIVE1MIGNvbnRlbnRzIHRoYXQgaXMgcGFzc2VkIGludG8gdGhlXG5cdFx0ICogZnVuY3Rpb24uIFRoaXMgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlLCB0byBhc2sgZm9yIGNvbmZpcm1hdGlvbiB0aGF0IGFcblx0XHQgKiBwYXJ0aWN1bGFyIHJlY29yZCBzaG91bGQgYmUgZGVsZXRlZC5cblx0XHQgKiAgQHBhcmFtIHtub2RlfSBuVHIgVGhlIHRhYmxlIHJvdyB0byAnb3Blbidcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd8bm9kZXxqUXVlcnl9IG1IdG1sIFRoZSBIVE1MIHRvIHB1dCBpbnRvIHRoZSByb3dcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNDbGFzcyBDbGFzcyB0byBnaXZlIHRoZSBuZXcgVEQgY2VsbFxuXHRcdCAqICBAcmV0dXJucyB7bm9kZX0gVGhlIHJvdyBvcGVuZWQuIE5vdGUgdGhhdCBpZiB0aGUgdGFibGUgcm93IHBhc3NlZCBpbiBhcyB0aGVcblx0XHQgKiAgICBmaXJzdCBwYXJhbWV0ZXIsIGlzIG5vdCBmb3VuZCBpbiB0aGUgdGFibGUsIHRoaXMgbWV0aG9kIHdpbGwgc2lsZW50bHlcblx0XHQgKiAgICByZXR1cm4uXG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgdmFyIG9UYWJsZTtcblx0XHQgKlxuXHRcdCAqICAgICAgLy8gJ29wZW4nIGFuIGluZm9ybWF0aW9uIHJvdyB3aGVuIGEgcm93IGlzIGNsaWNrZWQgb25cblx0XHQgKiAgICAgICQoJyNleGFtcGxlIHRib2R5IHRyJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcblx0XHQgKiAgICAgICAgaWYgKCBvVGFibGUuZm5Jc09wZW4odGhpcykgKSB7XG5cdFx0ICogICAgICAgICAgb1RhYmxlLmZuQ2xvc2UoIHRoaXMgKTtcblx0XHQgKiAgICAgICAgfSBlbHNlIHtcblx0XHQgKiAgICAgICAgICBvVGFibGUuZm5PcGVuKCB0aGlzLCBcIlRlbXBvcmFyeSByb3cgb3BlbmVkXCIsIFwiaW5mb19yb3dcIiApO1xuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgICAgIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdHRoaXMuZm5PcGVuID0gZnVuY3Rpb24oIG5UciwgbUh0bWwsIHNDbGFzcyApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRoaXMuYXBpKCB0cnVlIClcblx0XHRcdFx0LnJvdyggblRyIClcblx0XHRcdFx0LmNoaWxkKCBtSHRtbCwgc0NsYXNzIClcblx0XHRcdFx0LnNob3coKVxuXHRcdFx0XHQuY2hpbGQoKVswXTtcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIENoYW5nZSB0aGUgcGFnaW5hdGlvbiAtIHByb3ZpZGVzIHRoZSBpbnRlcm5hbCBsb2dpYyBmb3IgcGFnaW5hdGlvbiBpbiBhIHNpbXBsZSBBUElcblx0XHQgKiBmdW5jdGlvbi4gV2l0aCB0aGlzIGZ1bmN0aW9uIHlvdSBjYW4gaGF2ZSBhIERhdGFUYWJsZXMgdGFibGUgZ28gdG8gdGhlIG5leHQsXG5cdFx0ICogcHJldmlvdXMsIGZpcnN0IG9yIGxhc3QgcGFnZXMuXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfGludH0gbUFjdGlvbiBQYWdpbmcgYWN0aW9uIHRvIHRha2U6IFwiZmlyc3RcIiwgXCJwcmV2aW91c1wiLCBcIm5leHRcIiBvciBcImxhc3RcIlxuXHRcdCAqICAgIG9yIHBhZ2UgbnVtYmVyIHRvIGp1bXAgdG8gKGludGVnZXIpLCBub3RlIHRoYXQgcGFnZSAwIGlzIHRoZSBmaXJzdCBwYWdlLlxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiUmVkcmF3PXRydWVdIFJlZHJhdyB0aGUgdGFibGUgb3Igbm90XG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICogICAgICBvVGFibGUuZm5QYWdlQ2hhbmdlKCAnbmV4dCcgKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mblBhZ2VDaGFuZ2UgPSBmdW5jdGlvbiAoIG1BY3Rpb24sIGJSZWRyYXcgKVxuXHRcdHtcblx0XHRcdHZhciBhcGkgPSB0aGlzLmFwaSggdHJ1ZSApLnBhZ2UoIG1BY3Rpb24gKTtcblx0XHRcblx0XHRcdGlmICggYlJlZHJhdyA9PT0gdW5kZWZpbmVkIHx8IGJSZWRyYXcgKSB7XG5cdFx0XHRcdGFwaS5kcmF3KGZhbHNlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIFNob3cgYSBwYXJ0aWN1bGFyIGNvbHVtblxuXHRcdCAqICBAcGFyYW0ge2ludH0gaUNvbCBUaGUgY29sdW1uIHdob3NlIGRpc3BsYXkgc2hvdWxkIGJlIGNoYW5nZWRcblx0XHQgKiAgQHBhcmFtIHtib29sfSBiU2hvdyBTaG93ICh0cnVlKSBvciBoaWRlIChmYWxzZSkgdGhlIGNvbHVtblxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiUmVkcmF3PXRydWVdIFJlZHJhdyB0aGUgdGFibGUgb3Igbm90XG5cdFx0ICogIEBkdG9wdCBBUElcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdFx0ICpcblx0XHQgKiAgICAgIC8vIEhpZGUgdGhlIHNlY29uZCBjb2x1bW4gYWZ0ZXIgaW5pdGlhbGlzYXRpb25cblx0XHQgKiAgICAgIG9UYWJsZS5mblNldENvbHVtblZpcyggMSwgZmFsc2UgKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mblNldENvbHVtblZpcyA9IGZ1bmN0aW9uICggaUNvbCwgYlNob3csIGJSZWRyYXcgKVxuXHRcdHtcblx0XHRcdHZhciBhcGkgPSB0aGlzLmFwaSggdHJ1ZSApLmNvbHVtbiggaUNvbCApLnZpc2libGUoIGJTaG93ICk7XG5cdFx0XG5cdFx0XHRpZiAoIGJSZWRyYXcgPT09IHVuZGVmaW5lZCB8fCBiUmVkcmF3ICkge1xuXHRcdFx0XHRhcGkuY29sdW1ucy5hZGp1c3QoKS5kcmF3KCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIHNldHRpbmdzIGZvciBhIHBhcnRpY3VsYXIgdGFibGUgZm9yIGV4dGVybmFsIG1hbmlwdWxhdGlvblxuXHRcdCAqICBAcmV0dXJucyB7b2JqZWN0fSBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdC4gU2VlXG5cdFx0ICogICAge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfVxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqICAgICAgdmFyIG9TZXR0aW5ncyA9IG9UYWJsZS5mblNldHRpbmdzKCk7XG5cdFx0ICpcblx0XHQgKiAgICAgIC8vIFNob3cgYW4gZXhhbXBsZSBwYXJhbWV0ZXIgZnJvbSB0aGUgc2V0dGluZ3Ncblx0XHQgKiAgICAgIGFsZXJ0KCBvU2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mblNldHRpbmdzID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHJldHVybiBfZm5TZXR0aW5nc0Zyb21Ob2RlKCB0aGlzW19leHQuaUFwaUluZGV4XSApO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogU29ydCB0aGUgdGFibGUgYnkgYSBwYXJ0aWN1bGFyIGNvbHVtblxuXHRcdCAqICBAcGFyYW0ge2ludH0gaUNvbCB0aGUgZGF0YSBpbmRleCB0byBzb3J0IG9uLiBOb3RlIHRoYXQgdGhpcyB3aWxsIG5vdCBtYXRjaCB0aGVcblx0XHQgKiAgICAnZGlzcGxheSBpbmRleCcgaWYgeW91IGhhdmUgaGlkZGVuIGRhdGEgZW50cmllc1xuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqXG5cdFx0ICogICAgICAvLyBTb3J0IGltbWVkaWF0ZWx5IHdpdGggY29sdW1ucyAwIGFuZCAxXG5cdFx0ICogICAgICBvVGFibGUuZm5Tb3J0KCBbIFswLCdhc2MnXSwgWzEsJ2FzYyddIF0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0dGhpcy5mblNvcnQgPSBmdW5jdGlvbiggYWFTb3J0IClcblx0XHR7XG5cdFx0XHR0aGlzLmFwaSggdHJ1ZSApLm9yZGVyKCBhYVNvcnQgKS5kcmF3KCk7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHQvKipcblx0XHQgKiBBdHRhY2ggYSBzb3J0IGxpc3RlbmVyIHRvIGFuIGVsZW1lbnQgZm9yIGEgZ2l2ZW4gY29sdW1uXG5cdFx0ICogIEBwYXJhbSB7bm9kZX0gbk5vZGUgdGhlIGVsZW1lbnQgdG8gYXR0YWNoIHRoZSBzb3J0IGxpc3RlbmVyIHRvXG5cdFx0ICogIEBwYXJhbSB7aW50fSBpQ29sdW1uIHRoZSBjb2x1bW4gdGhhdCBhIGNsaWNrIG9uIHRoaXMgbm9kZSB3aWxsIHNvcnQgb25cblx0XHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gW2ZuQ2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gc29ydCBpcyBydW5cblx0XHQgKiAgQGR0b3B0IEFQSVxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0XHQgKlxuXHRcdCAqICAgICAgLy8gU29ydCBvbiBjb2x1bW4gMSwgd2hlbiAnc29ydGVyJyBpcyBjbGlja2VkIG9uXG5cdFx0ICogICAgICBvVGFibGUuZm5Tb3J0TGlzdGVuZXIoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3J0ZXInKSwgMSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuU29ydExpc3RlbmVyID0gZnVuY3Rpb24oIG5Ob2RlLCBpQ29sdW1uLCBmbkNhbGxiYWNrIClcblx0XHR7XG5cdFx0XHR0aGlzLmFwaSggdHJ1ZSApLm9yZGVyLmxpc3RlbmVyKCBuTm9kZSwgaUNvbHVtbiwgZm5DYWxsYmFjayApO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlIGEgdGFibGUgY2VsbCBvciByb3cgLSB0aGlzIG1ldGhvZCB3aWxsIGFjY2VwdCBlaXRoZXIgYSBzaW5nbGUgdmFsdWUgdG9cblx0XHQgKiB1cGRhdGUgdGhlIGNlbGwgd2l0aCwgYW4gYXJyYXkgb2YgdmFsdWVzIHdpdGggb25lIGVsZW1lbnQgZm9yIGVhY2ggY29sdW1uIG9yXG5cdFx0ICogYW4gb2JqZWN0IGluIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGUgb3JpZ2luYWwgZGF0YSBzb3VyY2UuIFRoZSBmdW5jdGlvbiBpc1xuXHRcdCAqIHNlbGYtcmVmZXJlbmNpbmcgaW4gb3JkZXIgdG8gbWFrZSB0aGUgbXVsdGkgY29sdW1uIHVwZGF0ZXMgZWFzaWVyLlxuXHRcdCAqICBAcGFyYW0ge29iamVjdHxhcnJheXxzdHJpbmd9IG1EYXRhIERhdGEgdG8gdXBkYXRlIHRoZSBjZWxsL3JvdyB3aXRoXG5cdFx0ICogIEBwYXJhbSB7bm9kZXxpbnR9IG1Sb3cgVFIgZWxlbWVudCB5b3Ugd2FudCB0byB1cGRhdGUgb3IgdGhlIGFvRGF0YSBpbmRleFxuXHRcdCAqICBAcGFyYW0ge2ludH0gW2lDb2x1bW5dIFRoZSBjb2x1bW4gdG8gdXBkYXRlLCBnaXZlIGFzIG51bGwgb3IgdW5kZWZpbmVkIHRvXG5cdFx0ICogICAgdXBkYXRlIGEgd2hvbGUgcm93LlxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiUmVkcmF3PXRydWVdIFJlZHJhdyB0aGUgdGFibGUgb3Igbm90XG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2JBY3Rpb249dHJ1ZV0gUGVyZm9ybSBwcmUtZHJhdyBhY3Rpb25zIG9yIG5vdFxuXHRcdCAqICBAcmV0dXJucyB7aW50fSAwIG9uIHN1Y2Nlc3MsIDEgb24gZXJyb3Jcblx0XHQgKiAgQGR0b3B0IEFQSVxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcblx0XHQgKiAgICAgIG9UYWJsZS5mblVwZGF0ZSggJ0V4YW1wbGUgdXBkYXRlJywgMCwgMCApOyAvLyBTaW5nbGUgY2VsbFxuXHRcdCAqICAgICAgb1RhYmxlLmZuVXBkYXRlKCBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddLCAkKCd0Ym9keSB0cicpWzBdICk7IC8vIFJvd1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHR0aGlzLmZuVXBkYXRlID0gZnVuY3Rpb24oIG1EYXRhLCBtUm93LCBpQ29sdW1uLCBiUmVkcmF3LCBiQWN0aW9uIClcblx0XHR7XG5cdFx0XHR2YXIgYXBpID0gdGhpcy5hcGkoIHRydWUgKTtcblx0XHRcblx0XHRcdGlmICggaUNvbHVtbiA9PT0gdW5kZWZpbmVkIHx8IGlDb2x1bW4gPT09IG51bGwgKSB7XG5cdFx0XHRcdGFwaS5yb3coIG1Sb3cgKS5kYXRhKCBtRGF0YSApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGFwaS5jZWxsKCBtUm93LCBpQ29sdW1uICkuZGF0YSggbURhdGEgKTtcblx0XHRcdH1cblx0XHRcblx0XHRcdGlmICggYkFjdGlvbiA9PT0gdW5kZWZpbmVkIHx8IGJBY3Rpb24gKSB7XG5cdFx0XHRcdGFwaS5jb2x1bW5zLmFkanVzdCgpO1xuXHRcdFx0fVxuXHRcdFxuXHRcdFx0aWYgKCBiUmVkcmF3ID09PSB1bmRlZmluZWQgfHwgYlJlZHJhdyApIHtcblx0XHRcdFx0YXBpLmRyYXcoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAwO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogUHJvdmlkZSBhIGNvbW1vbiBtZXRob2QgZm9yIHBsdWctaW5zIHRvIGNoZWNrIHRoZSB2ZXJzaW9uIG9mIERhdGFUYWJsZXMgYmVpbmcgdXNlZCwgaW4gb3JkZXJcblx0XHQgKiB0byBlbnN1cmUgY29tcGF0aWJpbGl0eS5cblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNWZXJzaW9uIFZlcnNpb24gc3RyaW5nIHRvIGNoZWNrIGZvciwgaW4gdGhlIGZvcm1hdCBcIlguWS5aXCIuIE5vdGUgdGhhdCB0aGVcblx0XHQgKiAgICBmb3JtYXRzIFwiWFwiIGFuZCBcIlguWVwiIGFyZSBhbHNvIGFjY2VwdGFibGUuXG5cdFx0ICogIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoaXMgdmVyc2lvbiBvZiBEYXRhVGFibGVzIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIHJlcXVpcmVkXG5cdFx0ICogICAgdmVyc2lvbiwgb3IgZmFsc2UgaWYgdGhpcyB2ZXJzaW9uIG9mIERhdGFUYWxlcyBpcyBub3Qgc3VpdGFibGVcblx0XHQgKiAgQG1ldGhvZFxuXHRcdCAqICBAZHRvcHQgQVBJXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xuXHRcdCAqICAgICAgYWxlcnQoIG9UYWJsZS5mblZlcnNpb25DaGVjayggJzEuOS4wJyApICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdHRoaXMuZm5WZXJzaW9uQ2hlY2sgPSBfZXh0LmZuVmVyc2lvbkNoZWNrO1xuXHRcdFxuXG5cdFx0dmFyIF90aGF0ID0gdGhpcztcblx0XHR2YXIgZW1wdHlJbml0ID0gb3B0aW9ucyA9PT0gdW5kZWZpbmVkO1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggZW1wdHlJbml0ICkge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH1cblxuXHRcdHRoaXMub0FwaSA9IHRoaXMuaW50ZXJuYWwgPSBfZXh0LmludGVybmFsO1xuXG5cdFx0Ly8gRXh0ZW5kIHdpdGggb2xkIHN0eWxlIHBsdWctaW4gQVBJIG1ldGhvZHNcblx0XHRmb3IgKCB2YXIgZm4gaW4gRGF0YVRhYmxlLmV4dC5pbnRlcm5hbCApIHtcblx0XHRcdGlmICggZm4gKSB7XG5cdFx0XHRcdHRoaXNbZm5dID0gX2ZuRXh0ZXJuQXBpRnVuYyhmbik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRm9yIGVhY2ggaW5pdGlhbGlzYXRpb24gd2Ugd2FudCB0byBnaXZlIGl0IGEgY2xlYW4gaW5pdGlhbGlzYXRpb25cblx0XHRcdC8vIG9iamVjdCB0aGF0IGNhbiBiZSBiYXNoZWQgYXJvdW5kXG5cdFx0XHR2YXIgbyA9IHt9O1xuXHRcdFx0dmFyIG9Jbml0ID0gbGVuID4gMSA/IC8vIG9wdGltaXNhdGlvbiBmb3Igc2luZ2xlIHRhYmxlIGNhc2Vcblx0XHRcdFx0X2ZuRXh0ZW5kKCBvLCBvcHRpb25zLCB0cnVlICkgOlxuXHRcdFx0XHRvcHRpb25zO1xuXG5cdFx0XHQvKmdsb2JhbCBvSW5pdCxfdGhhdCxlbXB0eUluaXQqL1xuXHRcdFx0dmFyIGk9MCwgaUxlbiwgaiwgakxlbiwgaywga0xlbjtcblx0XHRcdHZhciBzSWQgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ2lkJyApO1xuXHRcdFx0dmFyIGJJbml0SGFuZGVkT2ZmID0gZmFsc2U7XG5cdFx0XHR2YXIgZGVmYXVsdHMgPSBEYXRhVGFibGUuZGVmYXVsdHM7XG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXHRcdFx0XG5cdFx0XHRcblx0XHRcdC8qIFNhbml0eSBjaGVjayAqL1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ3RhYmxlJyApXG5cdFx0XHR7XG5cdFx0XHRcdF9mbkxvZyggbnVsbCwgMCwgJ05vbi10YWJsZSBub2RlIGluaXRpYWxpc2F0aW9uICgnK3RoaXMubm9kZU5hbWUrJyknLCAyICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0LyogQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIHRoZSBkZWZhdWx0cyAqL1xuXHRcdFx0X2ZuQ29tcGF0T3B0cyggZGVmYXVsdHMgKTtcblx0XHRcdF9mbkNvbXBhdENvbHMoIGRlZmF1bHRzLmNvbHVtbiApO1xuXHRcdFx0XG5cdFx0XHQvKiBDb252ZXJ0IHRoZSBjYW1lbC1jYXNlIGRlZmF1bHRzIHRvIEh1bmdhcmlhbiAqL1xuXHRcdFx0X2ZuQ2FtZWxUb0h1bmdhcmlhbiggZGVmYXVsdHMsIGRlZmF1bHRzLCB0cnVlICk7XG5cdFx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuKCBkZWZhdWx0cy5jb2x1bW4sIGRlZmF1bHRzLmNvbHVtbiwgdHJ1ZSApO1xuXHRcdFx0XG5cdFx0XHQvKiBTZXR0aW5nIHVwIHRoZSBpbml0aWFsaXNhdGlvbiBvYmplY3QgKi9cblx0XHRcdF9mbkNhbWVsVG9IdW5nYXJpYW4oIGRlZmF1bHRzLCAkLmV4dGVuZCggb0luaXQsICR0aGlzLmRhdGEoKSApICk7XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHQvKiBDaGVjayB0byBzZWUgaWYgd2UgYXJlIHJlLWluaXRpYWxpc2luZyBhIHRhYmxlICovXG5cdFx0XHR2YXIgYWxsU2V0dGluZ3MgPSBEYXRhVGFibGUuc2V0dGluZ3M7XG5cdFx0XHRmb3IgKCBpPTAsIGlMZW49YWxsU2V0dGluZ3MubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcblx0XHRcdHtcblx0XHRcdFx0dmFyIHMgPSBhbGxTZXR0aW5nc1tpXTtcblx0XHRcdFxuXHRcdFx0XHQvKiBCYXNlIGNoZWNrIG9uIHRhYmxlIG5vZGUgKi9cblx0XHRcdFx0aWYgKCBzLm5UYWJsZSA9PSB0aGlzIHx8IHMublRIZWFkLnBhcmVudE5vZGUgPT0gdGhpcyB8fCAocy5uVEZvb3QgJiYgcy5uVEZvb3QucGFyZW50Tm9kZSA9PSB0aGlzKSApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgYlJldHJpZXZlID0gb0luaXQuYlJldHJpZXZlICE9PSB1bmRlZmluZWQgPyBvSW5pdC5iUmV0cmlldmUgOiBkZWZhdWx0cy5iUmV0cmlldmU7XG5cdFx0XHRcdFx0dmFyIGJEZXN0cm95ID0gb0luaXQuYkRlc3Ryb3kgIT09IHVuZGVmaW5lZCA/IG9Jbml0LmJEZXN0cm95IDogZGVmYXVsdHMuYkRlc3Ryb3k7XG5cdFx0XHRcblx0XHRcdFx0XHRpZiAoIGVtcHR5SW5pdCB8fCBiUmV0cmlldmUgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHJldHVybiBzLm9JbnN0YW5jZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoIGJEZXN0cm95IClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRzLm9JbnN0YW5jZS5mbkRlc3Ryb3koKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0X2ZuTG9nKCBzLCAwLCAnQ2Fubm90IHJlaW5pdGlhbGlzZSBEYXRhVGFibGUnLCAzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0LyogSWYgdGhlIGVsZW1lbnQgd2UgYXJlIGluaXRpYWxpc2luZyBoYXMgdGhlIHNhbWUgSUQgYXMgYSB0YWJsZSB3aGljaCB3YXMgcHJldmlvdXNseVxuXHRcdFx0XHQgKiBpbml0aWFsaXNlZCwgYnV0IHRoZSB0YWJsZSBub2RlcyBkb24ndCBtYXRjaCAoZnJvbSBiZWZvcmUpIHRoZW4gd2UgZGVzdHJveSB0aGUgb2xkXG5cdFx0XHRcdCAqIGluc3RhbmNlIGJ5IHNpbXBseSBkZWxldGluZyBpdC4gVGhpcyBpcyB1bmRlciB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoZSB0YWJsZSBoYXMgYmVlblxuXHRcdFx0XHQgKiBkZXN0cm95ZWQgYnkgb3RoZXIgbWV0aG9kcy4gQW55b25lIHVzaW5nIG5vbi1pZCBzZWxlY3RvcnMgd2lsbCBuZWVkIHRvIGRvIHRoaXMgbWFudWFsbHlcblx0XHRcdFx0ICovXG5cdFx0XHRcdGlmICggcy5zVGFibGVJZCA9PSB0aGlzLmlkIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGFsbFNldHRpbmdzLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8qIEVuc3VyZSB0aGUgdGFibGUgaGFzIGFuIElEIC0gcmVxdWlyZWQgZm9yIGFjY2Vzc2liaWxpdHkgKi9cblx0XHRcdGlmICggc0lkID09PSBudWxsIHx8IHNJZCA9PT0gXCJcIiApXG5cdFx0XHR7XG5cdFx0XHRcdHNJZCA9IFwiRGF0YVRhYmxlc19UYWJsZV9cIisoRGF0YVRhYmxlLmV4dC5fdW5pcXVlKyspO1xuXHRcdFx0XHR0aGlzLmlkID0gc0lkO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBDcmVhdGUgdGhlIHNldHRpbmdzIG9iamVjdCBmb3IgdGhpcyB0YWJsZSBhbmQgc2V0IHNvbWUgb2YgdGhlIGRlZmF1bHQgcGFyYW1ldGVycyAqL1xuXHRcdFx0dmFyIG9TZXR0aW5ncyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3MsIHtcblx0XHRcdFx0XCJzRGVzdHJveVdpZHRoXCI6ICR0aGlzWzBdLnN0eWxlLndpZHRoLFxuXHRcdFx0XHRcInNJbnN0YW5jZVwiOiAgICAgc0lkLFxuXHRcdFx0XHRcInNUYWJsZUlkXCI6ICAgICAgc0lkXG5cdFx0XHR9ICk7XG5cdFx0XHRvU2V0dGluZ3MublRhYmxlID0gdGhpcztcblx0XHRcdG9TZXR0aW5ncy5vQXBpICAgPSBfdGhhdC5pbnRlcm5hbDtcblx0XHRcdG9TZXR0aW5ncy5vSW5pdCAgPSBvSW5pdDtcblx0XHRcdFxuXHRcdFx0YWxsU2V0dGluZ3MucHVzaCggb1NldHRpbmdzICk7XG5cdFx0XHRcblx0XHRcdC8vIE5lZWQgdG8gYWRkIHRoZSBpbnN0YW5jZSBhZnRlciB0aGUgaW5zdGFuY2UgYWZ0ZXIgdGhlIHNldHRpbmdzIG9iamVjdCBoYXMgYmVlbiBhZGRlZFxuXHRcdFx0Ly8gdG8gdGhlIHNldHRpbmdzIGFycmF5LCBzbyB3ZSBjYW4gc2VsZiByZWZlcmVuY2UgdGhlIHRhYmxlIGluc3RhbmNlIGlmIG1vcmUgdGhhbiBvbmVcblx0XHRcdG9TZXR0aW5ncy5vSW5zdGFuY2UgPSAoX3RoYXQubGVuZ3RoPT09MSkgPyBfdGhhdCA6ICR0aGlzLmRhdGFUYWJsZSgpO1xuXHRcdFx0XG5cdFx0XHQvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgYmVmb3JlIHdlIGFwcGx5IGFsbCB0aGUgZGVmYXVsdHNcblx0XHRcdF9mbkNvbXBhdE9wdHMoIG9Jbml0ICk7XG5cdFx0XHRcblx0XHRcdGlmICggb0luaXQub0xhbmd1YWdlIClcblx0XHRcdHtcblx0XHRcdFx0X2ZuTGFuZ3VhZ2VDb21wYXQoIG9Jbml0Lm9MYW5ndWFnZSApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBJZiB0aGUgbGVuZ3RoIG1lbnUgaXMgZ2l2ZW4sIGJ1dCB0aGUgaW5pdCBkaXNwbGF5IGxlbmd0aCBpcyBub3QsIHVzZSB0aGUgbGVuZ3RoIG1lbnVcblx0XHRcdGlmICggb0luaXQuYUxlbmd0aE1lbnUgJiYgISBvSW5pdC5pRGlzcGxheUxlbmd0aCApXG5cdFx0XHR7XG5cdFx0XHRcdG9Jbml0LmlEaXNwbGF5TGVuZ3RoID0gJC5pc0FycmF5KCBvSW5pdC5hTGVuZ3RoTWVudVswXSApID9cblx0XHRcdFx0XHRvSW5pdC5hTGVuZ3RoTWVudVswXVswXSA6IG9Jbml0LmFMZW5ndGhNZW51WzBdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBBcHBseSB0aGUgZGVmYXVsdHMgYW5kIGluaXQgb3B0aW9ucyB0byBtYWtlIGEgc2luZ2xlIGluaXQgb2JqZWN0IHdpbGwgYWxsXG5cdFx0XHQvLyBvcHRpb25zIGRlZmluZWQgZnJvbSBkZWZhdWx0cyBhbmQgaW5zdGFuY2Ugb3B0aW9ucy5cblx0XHRcdG9Jbml0ID0gX2ZuRXh0ZW5kKCAkLmV4dGVuZCggdHJ1ZSwge30sIGRlZmF1bHRzICksIG9Jbml0ICk7XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Ly8gTWFwIHRoZSBpbml0aWFsaXNhdGlvbiBvcHRpb25zIG9udG8gdGhlIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0X2ZuTWFwKCBvU2V0dGluZ3Mub0ZlYXR1cmVzLCBvSW5pdCwgW1xuXHRcdFx0XHRcImJQYWdpbmF0ZVwiLFxuXHRcdFx0XHRcImJMZW5ndGhDaGFuZ2VcIixcblx0XHRcdFx0XCJiRmlsdGVyXCIsXG5cdFx0XHRcdFwiYlNvcnRcIixcblx0XHRcdFx0XCJiU29ydE11bHRpXCIsXG5cdFx0XHRcdFwiYkluZm9cIixcblx0XHRcdFx0XCJiUHJvY2Vzc2luZ1wiLFxuXHRcdFx0XHRcImJBdXRvV2lkdGhcIixcblx0XHRcdFx0XCJiU29ydENsYXNzZXNcIixcblx0XHRcdFx0XCJiU2VydmVyU2lkZVwiLFxuXHRcdFx0XHRcImJEZWZlclJlbmRlclwiXG5cdFx0XHRdICk7XG5cdFx0XHRfZm5NYXAoIG9TZXR0aW5ncywgb0luaXQsIFtcblx0XHRcdFx0XCJhc1N0cmlwZUNsYXNzZXNcIixcblx0XHRcdFx0XCJhamF4XCIsXG5cdFx0XHRcdFwiZm5TZXJ2ZXJEYXRhXCIsXG5cdFx0XHRcdFwiZm5Gb3JtYXROdW1iZXJcIixcblx0XHRcdFx0XCJzU2VydmVyTWV0aG9kXCIsXG5cdFx0XHRcdFwiYWFTb3J0aW5nXCIsXG5cdFx0XHRcdFwiYWFTb3J0aW5nRml4ZWRcIixcblx0XHRcdFx0XCJhTGVuZ3RoTWVudVwiLFxuXHRcdFx0XHRcInNQYWdpbmF0aW9uVHlwZVwiLFxuXHRcdFx0XHRcInNBamF4U291cmNlXCIsXG5cdFx0XHRcdFwic0FqYXhEYXRhUHJvcFwiLFxuXHRcdFx0XHRcImlTdGF0ZUR1cmF0aW9uXCIsXG5cdFx0XHRcdFwic0RvbVwiLFxuXHRcdFx0XHRcImJTb3J0Q2VsbHNUb3BcIixcblx0XHRcdFx0XCJpVGFiSW5kZXhcIixcblx0XHRcdFx0XCJmblN0YXRlTG9hZENhbGxiYWNrXCIsXG5cdFx0XHRcdFwiZm5TdGF0ZVNhdmVDYWxsYmFja1wiLFxuXHRcdFx0XHRcInJlbmRlcmVyXCIsXG5cdFx0XHRcdFwic2VhcmNoRGVsYXlcIixcblx0XHRcdFx0XCJyb3dJZFwiLFxuXHRcdFx0XHRbIFwiaUNvb2tpZUR1cmF0aW9uXCIsIFwiaVN0YXRlRHVyYXRpb25cIiBdLCAvLyBiYWNrd2FyZHMgY29tcGF0XG5cdFx0XHRcdFsgXCJvU2VhcmNoXCIsIFwib1ByZXZpb3VzU2VhcmNoXCIgXSxcblx0XHRcdFx0WyBcImFvU2VhcmNoQ29sc1wiLCBcImFvUHJlU2VhcmNoQ29sc1wiIF0sXG5cdFx0XHRcdFsgXCJpRGlzcGxheUxlbmd0aFwiLCBcIl9pRGlzcGxheUxlbmd0aFwiIF0sXG5cdFx0XHRcdFsgXCJiSlF1ZXJ5VUlcIiwgXCJiSlVJXCIgXVxuXHRcdFx0XSApO1xuXHRcdFx0X2ZuTWFwKCBvU2V0dGluZ3Mub1Njcm9sbCwgb0luaXQsIFtcblx0XHRcdFx0WyBcInNTY3JvbGxYXCIsIFwic1hcIiBdLFxuXHRcdFx0XHRbIFwic1Njcm9sbFhJbm5lclwiLCBcInNYSW5uZXJcIiBdLFxuXHRcdFx0XHRbIFwic1Njcm9sbFlcIiwgXCJzWVwiIF0sXG5cdFx0XHRcdFsgXCJiU2Nyb2xsQ29sbGFwc2VcIiwgXCJiQ29sbGFwc2VcIiBdXG5cdFx0XHRdICk7XG5cdFx0XHRfZm5NYXAoIG9TZXR0aW5ncy5vTGFuZ3VhZ2UsIG9Jbml0LCBcImZuSW5mb0NhbGxiYWNrXCIgKTtcblx0XHRcdFxuXHRcdFx0LyogQ2FsbGJhY2sgZnVuY3Rpb25zIHdoaWNoIGFyZSBhcnJheSBkcml2ZW4gKi9cblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsICAgICAgIG9Jbml0LmZuRHJhd0NhbGxiYWNrLCAgICAgICd1c2VyJyApO1xuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvU2VydmVyUGFyYW1zJywgICAgICAgb0luaXQuZm5TZXJ2ZXJQYXJhbXMsICAgICAgJ3VzZXInICk7XG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9TdGF0ZVNhdmVQYXJhbXMnLCAgICBvSW5pdC5mblN0YXRlU2F2ZVBhcmFtcywgICAndXNlcicgKTtcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb1N0YXRlTG9hZFBhcmFtcycsICAgIG9Jbml0LmZuU3RhdGVMb2FkUGFyYW1zLCAgICd1c2VyJyApO1xuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvU3RhdGVMb2FkZWQnLCAgICAgICAgb0luaXQuZm5TdGF0ZUxvYWRlZCwgICAgICAgJ3VzZXInICk7XG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9Sb3dDYWxsYmFjaycsICAgICAgICBvSW5pdC5mblJvd0NhbGxiYWNrLCAgICAgICAndXNlcicgKTtcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb1Jvd0NyZWF0ZWRDYWxsYmFjaycsIG9Jbml0LmZuQ3JlYXRlZFJvdywgICAgICAgICd1c2VyJyApO1xuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvSGVhZGVyQ2FsbGJhY2snLCAgICAgb0luaXQuZm5IZWFkZXJDYWxsYmFjaywgICAgJ3VzZXInICk7XG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9Gb290ZXJDYWxsYmFjaycsICAgICBvSW5pdC5mbkZvb3RlckNhbGxiYWNrLCAgICAndXNlcicgKTtcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb0luaXRDb21wbGV0ZScsICAgICAgIG9Jbml0LmZuSW5pdENvbXBsZXRlLCAgICAgICd1c2VyJyApO1xuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvUHJlRHJhd0NhbGxiYWNrJywgICAgb0luaXQuZm5QcmVEcmF3Q2FsbGJhY2ssICAgJ3VzZXInICk7XG5cdFx0XHRcblx0XHRcdG9TZXR0aW5ncy5yb3dJZEZuID0gX2ZuR2V0T2JqZWN0RGF0YUZuKCBvSW5pdC5yb3dJZCApO1xuXHRcdFx0XG5cdFx0XHQvKiBCcm93c2VyIHN1cHBvcnQgZGV0ZWN0aW9uICovXG5cdFx0XHRfZm5Ccm93c2VyRGV0ZWN0KCBvU2V0dGluZ3MgKTtcblx0XHRcdFxuXHRcdFx0dmFyIG9DbGFzc2VzID0gb1NldHRpbmdzLm9DbGFzc2VzO1xuXHRcdFx0XG5cdFx0XHQvLyBAdG9kbyBSZW1vdmUgaW4gMS4xMVxuXHRcdFx0aWYgKCBvSW5pdC5iSlF1ZXJ5VUkgKVxuXHRcdFx0e1xuXHRcdFx0XHQvKiBVc2UgdGhlIEpVSSBjbGFzc2VzIG9iamVjdCBmb3IgZGlzcGxheS4gWW91IGNvdWxkIGNsb25lIHRoZSBvU3RkQ2xhc3NlcyBvYmplY3QgaWZcblx0XHRcdFx0ICogeW91IHdhbnQgdG8gaGF2ZSBtdWx0aXBsZSB0YWJsZXMgd2l0aCBtdWx0aXBsZSBpbmRlcGVuZGVudCBjbGFzc2VzXG5cdFx0XHRcdCAqL1xuXHRcdFx0XHQkLmV4dGVuZCggb0NsYXNzZXMsIERhdGFUYWJsZS5leHQub0pVSUNsYXNzZXMsIG9Jbml0Lm9DbGFzc2VzICk7XG5cdFx0XHRcblx0XHRcdFx0aWYgKCBvSW5pdC5zRG9tID09PSBkZWZhdWx0cy5zRG9tICYmIGRlZmF1bHRzLnNEb20gPT09IFwibGZydGlwXCIgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0LyogU2V0IHRoZSBET00gdG8gdXNlIGEgbGF5b3V0IHN1aXRhYmxlIGZvciBqUXVlcnkgVUkncyB0aGVtaW5nICovXG5cdFx0XHRcdFx0b1NldHRpbmdzLnNEb20gPSAnPFwiSFwibGZyPnQ8XCJGXCJpcD4nO1xuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0aWYgKCAhIG9TZXR0aW5ncy5yZW5kZXJlciApIHtcblx0XHRcdFx0XHRvU2V0dGluZ3MucmVuZGVyZXIgPSAnanF1ZXJ5dWknO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKCAkLmlzUGxhaW5PYmplY3QoIG9TZXR0aW5ncy5yZW5kZXJlciApICYmICEgb1NldHRpbmdzLnJlbmRlcmVyLmhlYWRlciApIHtcblx0XHRcdFx0XHRvU2V0dGluZ3MucmVuZGVyZXIuaGVhZGVyID0gJ2pxdWVyeXVpJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQkLmV4dGVuZCggb0NsYXNzZXMsIERhdGFUYWJsZS5leHQuY2xhc3Nlcywgb0luaXQub0NsYXNzZXMgKTtcblx0XHRcdH1cblx0XHRcdCR0aGlzLmFkZENsYXNzKCBvQ2xhc3Nlcy5zVGFibGUgKTtcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRpZiAoIG9TZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydCA9PT0gdW5kZWZpbmVkIClcblx0XHRcdHtcblx0XHRcdFx0LyogRGlzcGxheSBzdGFydCBwb2ludCwgdGFraW5nIGludG8gYWNjb3VudCB0aGUgc2F2ZSBzYXZpbmcgKi9cblx0XHRcdFx0b1NldHRpbmdzLmlJbml0RGlzcGxheVN0YXJ0ID0gb0luaXQuaURpc3BsYXlTdGFydDtcblx0XHRcdFx0b1NldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gb0luaXQuaURpc3BsYXlTdGFydDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYgKCBvSW5pdC5pRGVmZXJMb2FkaW5nICE9PSBudWxsIClcblx0XHRcdHtcblx0XHRcdFx0b1NldHRpbmdzLmJEZWZlckxvYWRpbmcgPSB0cnVlO1xuXHRcdFx0XHR2YXIgdG1wID0gJC5pc0FycmF5KCBvSW5pdC5pRGVmZXJMb2FkaW5nICk7XG5cdFx0XHRcdG9TZXR0aW5ncy5faVJlY29yZHNEaXNwbGF5ID0gdG1wID8gb0luaXQuaURlZmVyTG9hZGluZ1swXSA6IG9Jbml0LmlEZWZlckxvYWRpbmc7XG5cdFx0XHRcdG9TZXR0aW5ncy5faVJlY29yZHNUb3RhbCA9IHRtcCA/IG9Jbml0LmlEZWZlckxvYWRpbmdbMV0gOiBvSW5pdC5pRGVmZXJMb2FkaW5nO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBMYW5ndWFnZSBkZWZpbml0aW9ucyAqL1xuXHRcdFx0dmFyIG9MYW5ndWFnZSA9IG9TZXR0aW5ncy5vTGFuZ3VhZ2U7XG5cdFx0XHQkLmV4dGVuZCggdHJ1ZSwgb0xhbmd1YWdlLCBvSW5pdC5vTGFuZ3VhZ2UgKTtcblx0XHRcdFxuXHRcdFx0aWYgKCBvTGFuZ3VhZ2Uuc1VybCAhPT0gXCJcIiApXG5cdFx0XHR7XG5cdFx0XHRcdC8qIEdldCB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbnMgZnJvbSBhIGZpbGUgLSBiZWNhdXNlIHRoaXMgQWpheCBjYWxsIG1ha2VzIHRoZSBsYW5ndWFnZVxuXHRcdFx0XHQgKiBnZXQgYXN5bmMgdG8gdGhlIHJlbWFpbmRlciBvZiB0aGlzIGZ1bmN0aW9uIHdlIHVzZSBiSW5pdEhhbmRlZE9mZiB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHRcdCAqIF9mbkluaXRpYWxpc2Ugd2lsbCBiZSBmaXJlZCBieSB0aGUgcmV0dXJuZWQgQWpheCBoYW5kbGVyLCByYXRoZXIgdGhhbiB0aGUgY29uc3RydWN0b3Jcblx0XHRcdFx0ICovXG5cdFx0XHRcdCQuYWpheCgge1xuXHRcdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXG5cdFx0XHRcdFx0dXJsOiBvTGFuZ3VhZ2Uuc1VybCxcblx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cdFx0XHRcdFx0XHRfZm5MYW5ndWFnZUNvbXBhdCgganNvbiApO1xuXHRcdFx0XHRcdFx0X2ZuQ2FtZWxUb0h1bmdhcmlhbiggZGVmYXVsdHMub0xhbmd1YWdlLCBqc29uICk7XG5cdFx0XHRcdFx0XHQkLmV4dGVuZCggdHJ1ZSwgb0xhbmd1YWdlLCBqc29uICk7XG5cdFx0XHRcdFx0XHRfZm5Jbml0aWFsaXNlKCBvU2V0dGluZ3MgKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHQvLyBFcnJvciBvY2N1cnJlZCBsb2FkaW5nIGxhbmd1YWdlIGZpbGUsIGNvbnRpbnVlIG9uIGFzIGJlc3Qgd2UgY2FuXG5cdFx0XHRcdFx0XHRfZm5Jbml0aWFsaXNlKCBvU2V0dGluZ3MgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0YkluaXRIYW5kZWRPZmYgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKlxuXHRcdFx0ICogU3RyaXBlc1xuXHRcdFx0ICovXG5cdFx0XHRpZiAoIG9Jbml0LmFzU3RyaXBlQ2xhc3NlcyA9PT0gbnVsbCApXG5cdFx0XHR7XG5cdFx0XHRcdG9TZXR0aW5ncy5hc1N0cmlwZUNsYXNzZXMgPVtcblx0XHRcdFx0XHRvQ2xhc3Nlcy5zU3RyaXBlT2RkLFxuXHRcdFx0XHRcdG9DbGFzc2VzLnNTdHJpcGVFdmVuXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8qIFJlbW92ZSByb3cgc3RyaXBlIGNsYXNzZXMgaWYgdGhleSBhcmUgYWxyZWFkeSBvbiB0aGUgdGFibGUgcm93ICovXG5cdFx0XHR2YXIgc3RyaXBlQ2xhc3NlcyA9IG9TZXR0aW5ncy5hc1N0cmlwZUNsYXNzZXM7XG5cdFx0XHR2YXIgcm93T25lID0gJHRoaXMuY2hpbGRyZW4oJ3Rib2R5JykuZmluZCgndHInKS5lcSgwKTtcblx0XHRcdGlmICggJC5pbkFycmF5KCB0cnVlLCAkLm1hcCggc3RyaXBlQ2xhc3NlcywgZnVuY3Rpb24oZWwsIGkpIHtcblx0XHRcdFx0cmV0dXJuIHJvd09uZS5oYXNDbGFzcyhlbCk7XG5cdFx0XHR9ICkgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdCQoJ3Rib2R5IHRyJywgdGhpcykucmVtb3ZlQ2xhc3MoIHN0cmlwZUNsYXNzZXMuam9pbignICcpICk7XG5cdFx0XHRcdG9TZXR0aW5ncy5hc0Rlc3Ryb3lTdHJpcGVzID0gc3RyaXBlQ2xhc3Nlcy5zbGljZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKlxuXHRcdFx0ICogQ29sdW1uc1xuXHRcdFx0ICogU2VlIGlmIHdlIHNob3VsZCBsb2FkIGNvbHVtbnMgYXV0b21hdGljYWxseSBvciB1c2UgZGVmaW5lZCBvbmVzXG5cdFx0XHQgKi9cblx0XHRcdHZhciBhblRocyA9IFtdO1xuXHRcdFx0dmFyIGFvQ29sdW1uc0luaXQ7XG5cdFx0XHR2YXIgblRoZWFkID0gdGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGhlYWQnKTtcblx0XHRcdGlmICggblRoZWFkLmxlbmd0aCAhPT0gMCApXG5cdFx0XHR7XG5cdFx0XHRcdF9mbkRldGVjdEhlYWRlciggb1NldHRpbmdzLmFvSGVhZGVyLCBuVGhlYWRbMF0gKTtcblx0XHRcdFx0YW5UaHMgPSBfZm5HZXRVbmlxdWVUaHMoIG9TZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBJZiBub3QgZ2l2ZW4gYSBjb2x1bW4gYXJyYXksIGdlbmVyYXRlIG9uZSB3aXRoIG51bGxzICovXG5cdFx0XHRpZiAoIG9Jbml0LmFvQ29sdW1ucyA9PT0gbnVsbCApXG5cdFx0XHR7XG5cdFx0XHRcdGFvQ29sdW1uc0luaXQgPSBbXTtcblx0XHRcdFx0Zm9yICggaT0wLCBpTGVuPWFuVGhzLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhb0NvbHVtbnNJbml0LnB1c2goIG51bGwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRhb0NvbHVtbnNJbml0ID0gb0luaXQuYW9Db2x1bW5zO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBBZGQgdGhlIGNvbHVtbnMgKi9cblx0XHRcdGZvciAoIGk9MCwgaUxlbj1hb0NvbHVtbnNJbml0Lmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0XHR7XG5cdFx0XHRcdF9mbkFkZENvbHVtbiggb1NldHRpbmdzLCBhblRocyA/IGFuVGhzW2ldIDogbnVsbCApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBBcHBseSB0aGUgY29sdW1uIGRlZmluaXRpb25zICovXG5cdFx0XHRfZm5BcHBseUNvbHVtbkRlZnMoIG9TZXR0aW5ncywgb0luaXQuYW9Db2x1bW5EZWZzLCBhb0NvbHVtbnNJbml0LCBmdW5jdGlvbiAoaUNvbCwgb0RlZikge1xuXHRcdFx0XHRfZm5Db2x1bW5PcHRpb25zKCBvU2V0dGluZ3MsIGlDb2wsIG9EZWYgKTtcblx0XHRcdH0gKTtcblx0XHRcdFxuXHRcdFx0LyogSFRNTDUgYXR0cmlidXRlIGRldGVjdGlvbiAtIGJ1aWxkIGFuIG1EYXRhIG9iamVjdCBhdXRvbWF0aWNhbGx5IGlmIHRoZVxuXHRcdFx0ICogYXR0cmlidXRlcyBhcmUgZm91bmRcblx0XHRcdCAqL1xuXHRcdFx0aWYgKCByb3dPbmUubGVuZ3RoICkge1xuXHRcdFx0XHR2YXIgYSA9IGZ1bmN0aW9uICggY2VsbCwgbmFtZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2VsbC5nZXRBdHRyaWJ1dGUoICdkYXRhLScrbmFtZSApICE9PSBudWxsID8gbmFtZSA6IG51bGw7XG5cdFx0XHRcdH07XG5cdFx0XHRcblx0XHRcdFx0JCggcm93T25lWzBdICkuY2hpbGRyZW4oJ3RoLCB0ZCcpLmVhY2goIGZ1bmN0aW9uIChpLCBjZWxsKSB7XG5cdFx0XHRcdFx0dmFyIGNvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbaV07XG5cdFx0XHRcblx0XHRcdFx0XHRpZiAoIGNvbC5tRGF0YSA9PT0gaSApIHtcblx0XHRcdFx0XHRcdHZhciBzb3J0ID0gYSggY2VsbCwgJ3NvcnQnICkgfHwgYSggY2VsbCwgJ29yZGVyJyApO1xuXHRcdFx0XHRcdFx0dmFyIGZpbHRlciA9IGEoIGNlbGwsICdmaWx0ZXInICkgfHwgYSggY2VsbCwgJ3NlYXJjaCcgKTtcblx0XHRcdFxuXHRcdFx0XHRcdFx0aWYgKCBzb3J0ICE9PSBudWxsIHx8IGZpbHRlciAhPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdFx0Y29sLm1EYXRhID0ge1xuXHRcdFx0XHRcdFx0XHRcdF86ICAgICAgaSsnLmRpc3BsYXknLFxuXHRcdFx0XHRcdFx0XHRcdHNvcnQ6ICAgc29ydCAhPT0gbnVsbCAgID8gaSsnLkBkYXRhLScrc29ydCAgIDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICAgc29ydCAhPT0gbnVsbCAgID8gaSsnLkBkYXRhLScrc29ydCAgIDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0XHRcdGZpbHRlcjogZmlsdGVyICE9PSBudWxsID8gaSsnLkBkYXRhLScrZmlsdGVyIDogdW5kZWZpbmVkXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcblx0XHRcdFx0XHRcdFx0X2ZuQ29sdW1uT3B0aW9ucyggb1NldHRpbmdzLCBpICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHZhciBmZWF0dXJlcyA9IG9TZXR0aW5ncy5vRmVhdHVyZXM7XG5cdFx0XHRcblx0XHRcdC8qIE11c3QgYmUgZG9uZSBhZnRlciBldmVyeXRoaW5nIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBzdGF0ZSBzYXZpbmchICovXG5cdFx0XHRpZiAoIG9Jbml0LmJTdGF0ZVNhdmUgKVxuXHRcdFx0e1xuXHRcdFx0XHRmZWF0dXJlcy5iU3RhdGVTYXZlID0gdHJ1ZTtcblx0XHRcdFx0X2ZuTG9hZFN0YXRlKCBvU2V0dGluZ3MsIG9Jbml0ICk7XG5cdFx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsIF9mblNhdmVTdGF0ZSwgJ3N0YXRlX3NhdmUnICk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Lypcblx0XHRcdCAqIFNvcnRpbmdcblx0XHRcdCAqIEB0b2RvIEZvciBtb2R1bGFyaXNhdGlvbiAoMS4xMSkgdGhpcyBuZWVkcyB0byBkbyBpbnRvIGEgc29ydCBzdGFydCB1cCBoYW5kbGVyXG5cdFx0XHQgKi9cblx0XHRcdFxuXHRcdFx0Ly8gSWYgYWFTb3J0aW5nIGlzIG5vdCBkZWZpbmVkLCB0aGVuIHdlIHVzZSB0aGUgZmlyc3QgaW5kaWNhdG9yIGluIGFzU29ydGluZ1xuXHRcdFx0Ly8gaW4gY2FzZSB0aGF0IGhhcyBiZWVuIGFsdGVyZWQsIHNvIHRoZSBkZWZhdWx0IHNvcnQgcmVmbGVjdHMgdGhhdCBvcHRpb25cblx0XHRcdGlmICggb0luaXQuYWFTb3J0aW5nID09PSB1bmRlZmluZWQgKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgc29ydGluZyA9IG9TZXR0aW5ncy5hYVNvcnRpbmc7XG5cdFx0XHRcdGZvciAoIGk9MCwgaUxlbj1zb3J0aW5nLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzb3J0aW5nW2ldWzFdID0gb1NldHRpbmdzLmFvQ29sdW1uc1sgaSBdLmFzU29ydGluZ1swXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBEbyBhIGZpcnN0IHBhc3Mgb24gdGhlIHNvcnRpbmcgY2xhc3NlcyAoYWxsb3dzIGFueSBzaXplIGNoYW5nZXMgdG8gYmUgdGFrZW4gaW50b1xuXHRcdFx0ICogYWNjb3VudCwgYW5kIGFsc28gd2lsbCBhcHBseSBzb3J0aW5nIGRpc2FibGVkIGNsYXNzZXMgaWYgZGlzYWJsZWRcblx0XHRcdCAqL1xuXHRcdFx0X2ZuU29ydGluZ0NsYXNzZXMoIG9TZXR0aW5ncyApO1xuXHRcdFx0XG5cdFx0XHRpZiAoIGZlYXR1cmVzLmJTb3J0IClcblx0XHRcdHtcblx0XHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvRHJhd0NhbGxiYWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICggb1NldHRpbmdzLmJTb3J0ZWQgKSB7XG5cdFx0XHRcdFx0XHR2YXIgYVNvcnQgPSBfZm5Tb3J0RmxhdHRlbiggb1NldHRpbmdzICk7XG5cdFx0XHRcdFx0XHR2YXIgc29ydGVkQ29sdW1ucyA9IHt9O1xuXHRcdFx0XG5cdFx0XHRcdFx0XHQkLmVhY2goIGFTb3J0LCBmdW5jdGlvbiAoaSwgdmFsKSB7XG5cdFx0XHRcdFx0XHRcdHNvcnRlZENvbHVtbnNbIHZhbC5zcmMgXSA9IHZhbC5kaXI7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcblx0XHRcdFx0XHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCBudWxsLCAnb3JkZXInLCBbb1NldHRpbmdzLCBhU29ydCwgc29ydGVkQ29sdW1uc10gKTtcblx0XHRcdFx0XHRcdF9mblNvcnRBcmlhKCBvU2V0dGluZ3MgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvRHJhd0NhbGxiYWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoIG9TZXR0aW5ncy5iU29ydGVkIHx8IF9mbkRhdGFTb3VyY2UoIG9TZXR0aW5ncyApID09PSAnc3NwJyB8fCBmZWF0dXJlcy5iRGVmZXJSZW5kZXIgKSB7XG5cdFx0XHRcdFx0X2ZuU29ydGluZ0NsYXNzZXMoIG9TZXR0aW5ncyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAnc2MnICk7XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Lypcblx0XHRcdCAqIEZpbmFsIGluaXRcblx0XHRcdCAqIENhY2hlIHRoZSBoZWFkZXIsIGJvZHkgYW5kIGZvb3RlciBhcyByZXF1aXJlZCwgY3JlYXRpbmcgdGhlbSBpZiBuZWVkZWRcblx0XHRcdCAqL1xuXHRcdFx0XG5cdFx0XHQvLyBXb3JrIGFyb3VuZCBmb3IgV2Via2l0IGJ1ZyA4Mzg2NyAtIHN0b3JlIHRoZSBjYXB0aW9uLXNpZGUgYmVmb3JlIHJlbW92aW5nIGZyb20gZG9jXG5cdFx0XHR2YXIgY2FwdGlvbnMgPSAkdGhpcy5jaGlsZHJlbignY2FwdGlvbicpLmVhY2goIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhpcy5fY2FwdGlvblNpZGUgPSAkdGhpcy5jc3MoJ2NhcHRpb24tc2lkZScpO1xuXHRcdFx0fSApO1xuXHRcdFx0XG5cdFx0XHR2YXIgdGhlYWQgPSAkdGhpcy5jaGlsZHJlbigndGhlYWQnKTtcblx0XHRcdGlmICggdGhlYWQubGVuZ3RoID09PSAwIClcblx0XHRcdHtcblx0XHRcdFx0dGhlYWQgPSAkKCc8dGhlYWQvPicpLmFwcGVuZFRvKHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0b1NldHRpbmdzLm5USGVhZCA9IHRoZWFkWzBdO1xuXHRcdFx0XG5cdFx0XHR2YXIgdGJvZHkgPSAkdGhpcy5jaGlsZHJlbigndGJvZHknKTtcblx0XHRcdGlmICggdGJvZHkubGVuZ3RoID09PSAwIClcblx0XHRcdHtcblx0XHRcdFx0dGJvZHkgPSAkKCc8dGJvZHkvPicpLmFwcGVuZFRvKHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0b1NldHRpbmdzLm5UQm9keSA9IHRib2R5WzBdO1xuXHRcdFx0XG5cdFx0XHR2YXIgdGZvb3QgPSAkdGhpcy5jaGlsZHJlbigndGZvb3QnKTtcblx0XHRcdGlmICggdGZvb3QubGVuZ3RoID09PSAwICYmIGNhcHRpb25zLmxlbmd0aCA+IDAgJiYgKG9TZXR0aW5ncy5vU2Nyb2xsLnNYICE9PSBcIlwiIHx8IG9TZXR0aW5ncy5vU2Nyb2xsLnNZICE9PSBcIlwiKSApXG5cdFx0XHR7XG5cdFx0XHRcdC8vIElmIHdlIGFyZSBhIHNjcm9sbGluZyB0YWJsZSwgYW5kIG5vIGZvb3RlciBoYXMgYmVlbiBnaXZlbiwgdGhlbiB3ZSBuZWVkIHRvIGNyZWF0ZVxuXHRcdFx0XHQvLyBhIHRmb290IGVsZW1lbnQgZm9yIHRoZSBjYXB0aW9uIGVsZW1lbnQgdG8gYmUgYXBwZW5kZWQgdG9cblx0XHRcdFx0dGZvb3QgPSAkKCc8dGZvb3QvPicpLmFwcGVuZFRvKHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZiAoIHRmb290Lmxlbmd0aCA9PT0gMCB8fCB0Zm9vdC5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0JHRoaXMuYWRkQ2xhc3MoIG9DbGFzc2VzLnNOb0Zvb3RlciApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoIHRmb290Lmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRcdG9TZXR0aW5ncy5uVEZvb3QgPSB0Zm9vdFswXTtcblx0XHRcdFx0X2ZuRGV0ZWN0SGVhZGVyKCBvU2V0dGluZ3MuYW9Gb290ZXIsIG9TZXR0aW5ncy5uVEZvb3QgKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0LyogQ2hlY2sgaWYgdGhlcmUgaXMgZGF0YSBwYXNzaW5nIGludG8gdGhlIGNvbnN0cnVjdG9yICovXG5cdFx0XHRpZiAoIG9Jbml0LmFhRGF0YSApXG5cdFx0XHR7XG5cdFx0XHRcdGZvciAoIGk9MCA7IGk8b0luaXQuYWFEYXRhLmxlbmd0aCA7IGkrKyApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRfZm5BZGREYXRhKCBvU2V0dGluZ3MsIG9Jbml0LmFhRGF0YVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCBvU2V0dGluZ3MuYkRlZmVyTG9hZGluZyB8fCBfZm5EYXRhU291cmNlKCBvU2V0dGluZ3MgKSA9PSAnZG9tJyApXG5cdFx0XHR7XG5cdFx0XHRcdC8qIEdyYWIgdGhlIGRhdGEgZnJvbSB0aGUgcGFnZSAtIG9ubHkgZG8gdGhpcyB3aGVuIGRlZmVycmVkIGxvYWRpbmcgb3Igbm8gQWpheFxuXHRcdFx0XHQgKiBzb3VyY2Ugc2luY2UgdGhlcmUgaXMgbm8gcG9pbnQgaW4gcmVhZGluZyB0aGUgRE9NIGRhdGEgaWYgd2UgYXJlIHRoZW4gZ29pbmdcblx0XHRcdFx0ICogdG8gcmVwbGFjZSBpdCB3aXRoIEFqYXggZGF0YVxuXHRcdFx0XHQgKi9cblx0XHRcdFx0X2ZuQWRkVHIoIG9TZXR0aW5ncywgJChvU2V0dGluZ3MublRCb2R5KS5jaGlsZHJlbigndHInKSApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKiBDb3B5IHRoZSBkYXRhIGluZGV4IGFycmF5ICovXG5cdFx0XHRvU2V0dGluZ3MuYWlEaXNwbGF5ID0gb1NldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xuXHRcdFx0XG5cdFx0XHQvKiBJbml0aWFsaXNhdGlvbiBjb21wbGV0ZSAtIHRhYmxlIGNhbiBiZSBkcmF3biAqL1xuXHRcdFx0b1NldHRpbmdzLmJJbml0aWFsaXNlZCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdC8qIENoZWNrIGlmIHdlIG5lZWQgdG8gaW5pdGlhbGlzZSB0aGUgdGFibGUgKGl0IG1pZ2h0IG5vdCBoYXZlIGJlZW4gaGFuZGVkIG9mZiB0byB0aGVcblx0XHRcdCAqIGxhbmd1YWdlIHByb2Nlc3Nvcilcblx0XHRcdCAqL1xuXHRcdFx0aWYgKCBiSW5pdEhhbmRlZE9mZiA9PT0gZmFsc2UgKVxuXHRcdFx0e1xuXHRcdFx0XHRfZm5Jbml0aWFsaXNlKCBvU2V0dGluZ3MgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0X3RoYXQgPSBudWxsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbXB1dGVkIHN0cnVjdHVyZSBvZiB0aGUgRGF0YVRhYmxlcyBBUEksIGRlZmluZWQgYnkgdGhlIG9wdGlvbnMgcGFzc2VkIHRvXG5cdCAqIGBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKClgIHdoZW4gYnVpbGRpbmcgdGhlIEFQSS5cblx0ICpcblx0ICogVGhlIHN0cnVjdHVyZSBpcyBidWlsdCBpbiBvcmRlciB0byBzcGVlZCBjcmVhdGlvbiBhbmQgZXh0ZW5zaW9uIG9mIHRoZSBBcGlcblx0ICogb2JqZWN0cyBzaW5jZSB0aGUgZXh0ZW5zaW9ucyBhcmUgZWZmZWN0aXZlbHkgcHJlLXBhcnNlZC5cblx0ICpcblx0ICogVGhlIGFycmF5IGlzIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZSwgd2hlcmUgdGhpc1xuXHQgKiBiYXNlIGFycmF5IHJlcHJlc2VudHMgdGhlIEFwaSBwcm90b3R5cGUgYmFzZTpcblx0ICpcblx0ICogICAgIFtcblx0ICogICAgICAge1xuXHQgKiAgICAgICAgIG5hbWU6ICAgICAgJ2RhdGEnICAgICAgICAgICAgICAgIC0tIHN0cmluZyAgIC0gUHJvcGVydHkgbmFtZVxuXHQgKiAgICAgICAgIHZhbDogICAgICAgZnVuY3Rpb24gKCkge30sICAgICAgIC0tIGZ1bmN0aW9uIC0gQXBpIG1ldGhvZCAob3IgdW5kZWZpbmVkIGlmIGp1c3QgYW4gb2JqZWN0XG5cdCAqICAgICAgICAgbWV0aG9kRXh0OiBbIC4uLiBdLCAgICAgICAgICAgICAgLS0gYXJyYXkgICAgLSBBcnJheSBvZiBBcGkgb2JqZWN0IGRlZmluaXRpb25zIHRvIGV4dGVuZCB0aGUgbWV0aG9kIHJlc3VsdFxuXHQgKiAgICAgICAgIHByb3BFeHQ6ICAgWyAuLi4gXSAgICAgICAgICAgICAgIC0tIGFycmF5ICAgIC0gQXJyYXkgb2YgQXBpIG9iamVjdCBkZWZpbml0aW9ucyB0byBleHRlbmQgdGhlIHByb3BlcnR5XG5cdCAqICAgICAgIH0sXG5cdCAqICAgICAgIHtcblx0ICogICAgICAgICBuYW1lOiAgICAgJ3Jvdydcblx0ICogICAgICAgICB2YWw6ICAgICAgIHt9LFxuXHQgKiAgICAgICAgIG1ldGhvZEV4dDogWyAuLi4gXSxcblx0ICogICAgICAgICBwcm9wRXh0OiAgIFtcblx0ICogICAgICAgICAgIHtcblx0ICogICAgICAgICAgICAgbmFtZTogICAgICAnZGF0YSdcblx0ICogICAgICAgICAgICAgdmFsOiAgICAgICBmdW5jdGlvbiAoKSB7fSxcblx0ICogICAgICAgICAgICAgbWV0aG9kRXh0OiBbIC4uLiBdLFxuXHQgKiAgICAgICAgICAgICBwcm9wRXh0OiAgIFsgLi4uIF1cblx0ICogICAgICAgICAgIH0sXG5cdCAqICAgICAgICAgICAuLi5cblx0ICogICAgICAgICBdXG5cdCAqICAgICAgIH1cblx0ICogICAgIF1cblx0ICpcblx0ICogQHR5cGUge0FycmF5fVxuXHQgKiBAaWdub3JlXG5cdCAqL1xuXHR2YXIgX19hcGlTdHJ1Y3QgPSBbXTtcblx0XG5cdFxuXHQvKipcblx0ICogYEFycmF5LnByb3RvdHlwZWAgcmVmZXJlbmNlLlxuXHQgKlxuXHQgKiBAdHlwZSBvYmplY3Rcblx0ICogQGlnbm9yZVxuXHQgKi9cblx0dmFyIF9fYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblx0XG5cdFxuXHQvKipcblx0ICogQWJzdHJhY3Rpb24gZm9yIGBjb250ZXh0YCBwYXJhbWV0ZXIgb2YgdGhlIGBBcGlgIGNvbnN0cnVjdG9yIHRvIGFsbG93IGl0IHRvXG5cdCAqIHRha2Ugc2V2ZXJhbCBkaWZmZXJlbnQgZm9ybXMgZm9yIGVhc2Ugb2YgdXNlLlxuXHQgKlxuXHQgKiBFYWNoIG9mIHRoZSBpbnB1dCBwYXJhbWV0ZXIgdHlwZXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBEYXRhVGFibGVzIHNldHRpbmdzXG5cdCAqIG9iamVjdCB3aGVyZSBwb3NzaWJsZS5cblx0ICpcblx0ICogQHBhcmFtICB7c3RyaW5nfG5vZGV8alF1ZXJ5fG9iamVjdH0gbWl4ZWQgRGF0YVRhYmxlIGlkZW50aWZpZXIuIENhbiBiZSBvbmVcblx0ICogICBvZjpcblx0ICpcblx0ICogICAqIGBzdHJpbmdgIC0galF1ZXJ5IHNlbGVjdG9yLiBBbnkgRGF0YVRhYmxlcycgbWF0Y2hpbmcgdGhlIGdpdmVuIHNlbGVjdG9yXG5cdCAqICAgICB3aXRoIGJlIGZvdW5kIGFuZCB1c2VkLlxuXHQgKiAgICogYG5vZGVgIC0gYFRBQkxFYCBub2RlIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gZm9ybWVkIGludG8gYSBEYXRhVGFibGUuXG5cdCAqICAgKiBgalF1ZXJ5YCAtIEEgalF1ZXJ5IG9iamVjdCBvZiBgVEFCTEVgIG5vZGVzLlxuXHQgKiAgICogYG9iamVjdGAgLSBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgICogYERhdGFUYWJsZXMuQXBpYCAtIEFQSSBpbnN0YW5jZVxuXHQgKiBAcmV0dXJuIHthcnJheXxudWxsfSBNYXRjaGluZyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdHMuIGBudWxsYCBvclxuXHQgKiAgIGB1bmRlZmluZWRgIGlzIHJldHVybmVkIGlmIG5vIG1hdGNoaW5nIERhdGFUYWJsZSBpcyBmb3VuZC5cblx0ICogQGlnbm9yZVxuXHQgKi9cblx0dmFyIF90b1NldHRpbmdzID0gZnVuY3Rpb24gKCBtaXhlZCApXG5cdHtcblx0XHR2YXIgaWR4LCBqcTtcblx0XHR2YXIgc2V0dGluZ3MgPSBEYXRhVGFibGUuc2V0dGluZ3M7XG5cdFx0dmFyIHRhYmxlcyA9ICQubWFwKCBzZXR0aW5ncywgZnVuY3Rpb24gKGVsLCBpKSB7XG5cdFx0XHRyZXR1cm4gZWwublRhYmxlO1xuXHRcdH0gKTtcblx0XG5cdFx0aWYgKCAhIG1peGVkICkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0XHRlbHNlIGlmICggbWl4ZWQublRhYmxlICYmIG1peGVkLm9BcGkgKSB7XG5cdFx0XHQvLyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0cmV0dXJuIFsgbWl4ZWQgXTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIG1peGVkLm5vZGVOYW1lICYmIG1peGVkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0YWJsZScgKSB7XG5cdFx0XHQvLyBUYWJsZSBub2RlXG5cdFx0XHRpZHggPSAkLmluQXJyYXkoIG1peGVkLCB0YWJsZXMgKTtcblx0XHRcdHJldHVybiBpZHggIT09IC0xID8gWyBzZXR0aW5nc1tpZHhdIF0gOiBudWxsO1xuXHRcdH1cblx0XHRlbHNlIGlmICggbWl4ZWQgJiYgdHlwZW9mIG1peGVkLnNldHRpbmdzID09PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0cmV0dXJuIG1peGVkLnNldHRpbmdzKCkudG9BcnJheSgpO1xuXHRcdH1cblx0XHRlbHNlIGlmICggdHlwZW9mIG1peGVkID09PSAnc3RyaW5nJyApIHtcblx0XHRcdC8vIGpRdWVyeSBzZWxlY3RvclxuXHRcdFx0anEgPSAkKG1peGVkKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIG1peGVkIGluc3RhbmNlb2YgJCApIHtcblx0XHRcdC8vIGpRdWVyeSBvYmplY3QgKGFsc28gRGF0YVRhYmxlcyBpbnN0YW5jZSlcblx0XHRcdGpxID0gbWl4ZWQ7XG5cdFx0fVxuXHRcblx0XHRpZiAoIGpxICkge1xuXHRcdFx0cmV0dXJuIGpxLm1hcCggZnVuY3Rpb24oaSkge1xuXHRcdFx0XHRpZHggPSAkLmluQXJyYXkoIHRoaXMsIHRhYmxlcyApO1xuXHRcdFx0XHRyZXR1cm4gaWR4ICE9PSAtMSA/IHNldHRpbmdzW2lkeF0gOiBudWxsO1xuXHRcdFx0fSApLnRvQXJyYXkoKTtcblx0XHR9XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIERhdGFUYWJsZXMgQVBJIGNsYXNzIC0gdXNlZCB0byBjb250cm9sIGFuZCBpbnRlcmZhY2Ugd2l0aCAgb25lIG9yIG1vcmVcblx0ICogRGF0YVRhYmxlcyBlbmhhbmNlZCB0YWJsZXMuXG5cdCAqXG5cdCAqIFRoZSBBUEkgY2xhc3MgaXMgaGVhdmlseSBiYXNlZCBvbiBqUXVlcnksIHByZXNlbnRpbmcgYSBjaGFpbmFibGUgaW50ZXJmYWNlXG5cdCAqIHRoYXQgeW91IGNhbiB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0YWJsZXMuIEVhY2ggaW5zdGFuY2Ugb2YgdGhlIEFQSSBjbGFzcyBoYXNcblx0ICogYSBcImNvbnRleHRcIiAtIGkuZS4gdGhlIHRhYmxlcyB0aGF0IGl0IHdpbGwgb3BlcmF0ZSBvbi4gVGhpcyBjb3VsZCBiZSBhIHNpbmdsZVxuXHQgKiB0YWJsZSwgYWxsIHRhYmxlcyBvbiBhIHBhZ2Ugb3IgYSBzdWItc2V0IHRoZXJlb2YuXG5cdCAqXG5cdCAqIEFkZGl0aW9uYWxseSB0aGUgQVBJIGlzIGRlc2lnbmVkIHRvIGFsbG93IHlvdSB0byBlYXNpbHkgd29yayB3aXRoIHRoZSBkYXRhIGluXG5cdCAqIHRoZSB0YWJsZXMsIHJldHJpZXZpbmcgYW5kIG1hbmlwdWxhdGluZyBpdCBhcyByZXF1aXJlZC4gVGhpcyBpcyBkb25lIGJ5XG5cdCAqIHByZXNlbnRpbmcgdGhlIEFQSSBjbGFzcyBhcyBhbiBhcnJheSBsaWtlIGludGVyZmFjZS4gVGhlIGNvbnRlbnRzIG9mIHRoZVxuXHQgKiBhcnJheSBkZXBlbmQgdXBvbiB0aGUgYWN0aW9ucyByZXF1ZXN0ZWQgYnkgZWFjaCBtZXRob2QgKGZvciBleGFtcGxlXG5cdCAqIGByb3dzKCkubm9kZXMoKWAgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2Ygbm9kZXMsIHdoaWxlIGByb3dzKCkuZGF0YSgpYCB3aWxsXG5cdCAqIHJldHVybiBhbiBhcnJheSBvZiBvYmplY3RzIG9yIGFycmF5cyBkZXBlbmRpbmcgdXBvbiB5b3VyIHRhYmxlJ3Ncblx0ICogY29uZmlndXJhdGlvbikuIFRoZSBBUEkgb2JqZWN0IGhhcyBhIG51bWJlciBvZiBhcnJheSBsaWtlIG1ldGhvZHMgKGBwdXNoYCxcblx0ICogYHBvcGAsIGByZXZlcnNlYCBldGMpIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyAoYGVhY2hgLCBgcGx1Y2tgLFxuXHQgKiBgdW5pcXVlYCBldGMpIHRvIGFzc2lzdCB5b3VyIHdvcmtpbmcgd2l0aCB0aGUgZGF0YSBoZWxkIGluIGEgdGFibGUuXG5cdCAqXG5cdCAqIE1vc3QgbWV0aG9kcyAodGhvc2Ugd2hpY2ggcmV0dXJuIGFuIEFwaSBpbnN0YW5jZSkgYXJlIGNoYWluYWJsZSwgd2hpY2ggbWVhbnNcblx0ICogdGhlIHJldHVybiBmcm9tIGEgbWV0aG9kIGNhbGwgYWxzbyBoYXMgYWxsIG9mIHRoZSBtZXRob2RzIGF2YWlsYWJsZSB0aGF0IHRoZVxuXHQgKiB0b3AgbGV2ZWwgb2JqZWN0IGhhZC4gRm9yIGV4YW1wbGUsIHRoZXNlIHR3byBjYWxscyBhcmUgZXF1aXZhbGVudDpcblx0ICpcblx0ICogICAgIC8vIE5vdCBjaGFpbmVkXG5cdCAqICAgICBhcGkucm93LmFkZCggey4uLn0gKTtcblx0ICogICAgIGFwaS5kcmF3KCk7XG5cdCAqXG5cdCAqICAgICAvLyBDaGFpbmVkXG5cdCAqICAgICBhcGkucm93LmFkZCggey4uLn0gKS5kcmF3KCk7XG5cdCAqXG5cdCAqIEBjbGFzcyBEYXRhVGFibGUuQXBpXG5cdCAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHN0cmluZ3xqUXVlcnl9IGNvbnRleHQgRGF0YVRhYmxlIGlkZW50aWZpZXIuIFRoaXMgaXNcblx0ICogICB1c2VkIHRvIGRlZmluZSB3aGljaCBEYXRhVGFibGVzIGVuaGFuY2VkIHRhYmxlcyB0aGlzIEFQSSB3aWxsIG9wZXJhdGUgb24uXG5cdCAqICAgQ2FuIGJlIG9uZSBvZjpcblx0ICpcblx0ICogICAqIGBzdHJpbmdgIC0galF1ZXJ5IHNlbGVjdG9yLiBBbnkgRGF0YVRhYmxlcycgbWF0Y2hpbmcgdGhlIGdpdmVuIHNlbGVjdG9yXG5cdCAqICAgICB3aXRoIGJlIGZvdW5kIGFuZCB1c2VkLlxuXHQgKiAgICogYG5vZGVgIC0gYFRBQkxFYCBub2RlIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gZm9ybWVkIGludG8gYSBEYXRhVGFibGUuXG5cdCAqICAgKiBgalF1ZXJ5YCAtIEEgalF1ZXJ5IG9iamVjdCBvZiBgVEFCTEVgIG5vZGVzLlxuXHQgKiAgICogYG9iamVjdGAgLSBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiBAcGFyYW0ge2FycmF5fSBbZGF0YV0gRGF0YSB0byBpbml0aWFsaXNlIHRoZSBBcGkgaW5zdGFuY2Ugd2l0aC5cblx0ICpcblx0ICogQGV4YW1wbGVcblx0ICogICAvLyBEaXJlY3QgaW5pdGlhbGlzYXRpb24gZHVyaW5nIERhdGFUYWJsZXMgY29uc3RydWN0aW9uXG5cdCAqICAgdmFyIGFwaSA9ICQoJyNleGFtcGxlJykuRGF0YVRhYmxlKCk7XG5cdCAqXG5cdCAqIEBleGFtcGxlXG5cdCAqICAgLy8gSW5pdGlhbGlzYXRpb24gdXNpbmcgYSBEYXRhVGFibGVzIGpRdWVyeSBvYmplY3Rcblx0ICogICB2YXIgYXBpID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKS5hcGkoKTtcblx0ICpcblx0ICogQGV4YW1wbGVcblx0ICogICAvLyBJbml0aWFsaXNhdGlvbiBhcyBhIGNvbnN0cnVjdG9yXG5cdCAqICAgdmFyIGFwaSA9IG5ldyAkLmZuLkRhdGFUYWJsZS5BcGkoICd0YWJsZS5kYXRhVGFibGUnICk7XG5cdCAqL1xuXHRfQXBpID0gZnVuY3Rpb24gKCBjb250ZXh0LCBkYXRhIClcblx0e1xuXHRcdGlmICggISAodGhpcyBpbnN0YW5jZW9mIF9BcGkpICkge1xuXHRcdFx0cmV0dXJuIG5ldyBfQXBpKCBjb250ZXh0LCBkYXRhICk7XG5cdFx0fVxuXHRcblx0XHR2YXIgc2V0dGluZ3MgPSBbXTtcblx0XHR2YXIgY3R4U2V0dGluZ3MgPSBmdW5jdGlvbiAoIG8gKSB7XG5cdFx0XHR2YXIgYSA9IF90b1NldHRpbmdzKCBvICk7XG5cdFx0XHRpZiAoIGEgKSB7XG5cdFx0XHRcdHNldHRpbmdzID0gc2V0dGluZ3MuY29uY2F0KCBhICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XG5cdFx0aWYgKCAkLmlzQXJyYXkoIGNvbnRleHQgKSApIHtcblx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1jb250ZXh0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRjdHhTZXR0aW5ncyggY29udGV4dFtpXSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGN0eFNldHRpbmdzKCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcblx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdHRoaXMuY29udGV4dCA9IF91bmlxdWUoIHNldHRpbmdzICk7XG5cdFxuXHRcdC8vIEluaXRpYWwgZGF0YVxuXHRcdGlmICggZGF0YSApIHtcblx0XHRcdCQubWVyZ2UoIHRoaXMsIGRhdGEgKTtcblx0XHR9XG5cdFxuXHRcdC8vIHNlbGVjdG9yXG5cdFx0dGhpcy5zZWxlY3RvciA9IHtcblx0XHRcdHJvd3M6IG51bGwsXG5cdFx0XHRjb2xzOiBudWxsLFxuXHRcdFx0b3B0czogbnVsbFxuXHRcdH07XG5cdFxuXHRcdF9BcGkuZXh0ZW5kKCB0aGlzLCB0aGlzLCBfX2FwaVN0cnVjdCApO1xuXHR9O1xuXHRcblx0RGF0YVRhYmxlLkFwaSA9IF9BcGk7XG5cdFxuXHQvLyBEb24ndCBkZXN0cm95IHRoZSBleGlzdGluZyBwcm90b3R5cGUsIGp1c3QgZXh0ZW5kIGl0LiBSZXF1aXJlZCBmb3IgalF1ZXJ5IDInc1xuXHQvLyBpc1BsYWluT2JqZWN0LlxuXHQkLmV4dGVuZCggX0FwaS5wcm90b3R5cGUsIHtcblx0XHRhbnk6IGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRoaXMuY291bnQoKSAhPT0gMDtcblx0XHR9LFxuXHRcblx0XG5cdFx0Y29uY2F0OiAgX19hcnJheVByb3RvLmNvbmNhdCxcblx0XG5cdFxuXHRcdGNvbnRleHQ6IFtdLCAvLyBhcnJheSBvZiB0YWJsZSBzZXR0aW5ncyBvYmplY3RzXG5cdFxuXHRcblx0XHRjb3VudDogZnVuY3Rpb24gKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gdGhpcy5mbGF0dGVuKCkubGVuZ3RoO1xuXHRcdH0sXG5cdFxuXHRcblx0XHRlYWNoOiBmdW5jdGlvbiAoIGZuIClcblx0XHR7XG5cdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49dGhpcy5sZW5ndGggOyBpPGllbjsgaSsrICkge1xuXHRcdFx0XHRmbi5jYWxsKCB0aGlzLCB0aGlzW2ldLCBpLCB0aGlzICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XG5cdFxuXHRcdGVxOiBmdW5jdGlvbiAoIGlkeCApXG5cdFx0e1xuXHRcdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblx0XG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCA+IGlkeCA/XG5cdFx0XHRcdG5ldyBfQXBpKCBjdHhbaWR4XSwgdGhpc1tpZHhdICkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH0sXG5cdFxuXHRcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uICggZm4gKVxuXHRcdHtcblx0XHRcdHZhciBhID0gW107XG5cdFxuXHRcdFx0aWYgKCBfX2FycmF5UHJvdG8uZmlsdGVyICkge1xuXHRcdFx0XHRhID0gX19hcnJheVByb3RvLmZpbHRlci5jYWxsKCB0aGlzLCBmbiwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIENvbXBhdGliaWxpdHkgZm9yIGJyb3dzZXJzIHdpdGhvdXQgRU1DQS0yNTItNSAoSlMgMS42KVxuXHRcdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49dGhpcy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGZuLmNhbGwoIHRoaXMsIHRoaXNbaV0sIGksIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdGEucHVzaCggdGhpc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBuZXcgX0FwaSggdGhpcy5jb250ZXh0LCBhICk7XG5cdFx0fSxcblx0XG5cdFxuXHRcdGZsYXR0ZW46IGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0dmFyIGEgPSBbXTtcblx0XHRcdHJldHVybiBuZXcgX0FwaSggdGhpcy5jb250ZXh0LCBhLmNvbmNhdC5hcHBseSggYSwgdGhpcy50b0FycmF5KCkgKSApO1xuXHRcdH0sXG5cdFxuXHRcblx0XHRqb2luOiAgICBfX2FycmF5UHJvdG8uam9pbixcblx0XG5cdFxuXHRcdGluZGV4T2Y6IF9fYXJyYXlQcm90by5pbmRleE9mIHx8IGZ1bmN0aW9uIChvYmosIHN0YXJ0KVxuXHRcdHtcblx0XHRcdGZvciAoIHZhciBpPShzdGFydCB8fCAwKSwgaWVuPXRoaXMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRcdGlmICggdGhpc1tpXSA9PT0gb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSxcblx0XG5cdFx0aXRlcmF0b3I6IGZ1bmN0aW9uICggZmxhdHRlbiwgdHlwZSwgZm4sIGFsd2F5c05ldyApIHtcblx0XHRcdHZhclxuXHRcdFx0XHRhID0gW10sIHJldCxcblx0XHRcdFx0aSwgaWVuLCBqLCBqZW4sXG5cdFx0XHRcdGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG5cdFx0XHRcdHJvd3MsIGl0ZW1zLCBpdGVtLFxuXHRcdFx0XHRzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG5cdFxuXHRcdFx0Ly8gQXJndW1lbnQgc2hpZnRpbmdcblx0XHRcdGlmICggdHlwZW9mIGZsYXR0ZW4gPT09ICdzdHJpbmcnICkge1xuXHRcdFx0XHRhbHdheXNOZXcgPSBmbjtcblx0XHRcdFx0Zm4gPSB0eXBlO1xuXHRcdFx0XHR0eXBlID0gZmxhdHRlbjtcblx0XHRcdFx0ZmxhdHRlbiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGZvciAoIGk9MCwgaWVuPWNvbnRleHQubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRcdHZhciBhcGlJbnN0ID0gbmV3IF9BcGkoIGNvbnRleHRbaV0gKTtcblx0XG5cdFx0XHRcdGlmICggdHlwZSA9PT0gJ3RhYmxlJyApIHtcblx0XHRcdFx0XHRyZXQgPSBmbi5jYWxsKCBhcGlJbnN0LCBjb250ZXh0W2ldLCBpICk7XG5cdFxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRhLnB1c2goIHJldCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmICggdHlwZSA9PT0gJ2NvbHVtbnMnIHx8IHR5cGUgPT09ICdyb3dzJyApIHtcblx0XHRcdFx0XHQvLyB0aGlzIGhhcyBzYW1lIGxlbmd0aCBhcyBjb250ZXh0IC0gb25lIGVudHJ5IGZvciBlYWNoIHRhYmxlXG5cdFx0XHRcdFx0cmV0ID0gZm4uY2FsbCggYXBpSW5zdCwgY29udGV4dFtpXSwgdGhpc1tpXSwgaSApO1xuXHRcblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0YS5wdXNoKCByZXQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoIHR5cGUgPT09ICdjb2x1bW4nIHx8IHR5cGUgPT09ICdjb2x1bW4tcm93cycgfHwgdHlwZSA9PT0gJ3JvdycgfHwgdHlwZSA9PT0gJ2NlbGwnICkge1xuXHRcdFx0XHRcdC8vIGNvbHVtbnMgYW5kIHJvd3Mgc2hhcmUgdGhlIHNhbWUgc3RydWN0dXJlLlxuXHRcdFx0XHRcdC8vICd0aGlzJyBpcyBhbiBhcnJheSBvZiBjb2x1bW4gaW5kZXhlcyBmb3IgZWFjaCBjb250ZXh0XG5cdFx0XHRcdFx0aXRlbXMgPSB0aGlzW2ldO1xuXHRcblx0XHRcdFx0XHRpZiAoIHR5cGUgPT09ICdjb2x1bW4tcm93cycgKSB7XG5cdFx0XHRcdFx0XHRyb3dzID0gX3NlbGVjdG9yX3Jvd19pbmRleGVzKCBjb250ZXh0W2ldLCBzZWxlY3Rvci5vcHRzICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRmb3IgKCBqPTAsIGplbj1pdGVtcy5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcblx0XHRcdFx0XHRcdGl0ZW0gPSBpdGVtc1tqXTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09ICdjZWxsJyApIHtcblx0XHRcdFx0XHRcdFx0cmV0ID0gZm4uY2FsbCggYXBpSW5zdCwgY29udGV4dFtpXSwgaXRlbS5yb3csIGl0ZW0uY29sdW1uLCBpLCBqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0ID0gZm4uY2FsbCggYXBpSW5zdCwgY29udGV4dFtpXSwgaXRlbSwgaSwgaiwgcm93cyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdGEucHVzaCggcmV0ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBhLmxlbmd0aCB8fCBhbHdheXNOZXcgKSB7XG5cdFx0XHRcdHZhciBhcGkgPSBuZXcgX0FwaSggY29udGV4dCwgZmxhdHRlbiA/IGEuY29uY2F0LmFwcGx5KCBbXSwgYSApIDogYSApO1xuXHRcdFx0XHR2YXIgYXBpU2VsZWN0b3IgPSBhcGkuc2VsZWN0b3I7XG5cdFx0XHRcdGFwaVNlbGVjdG9yLnJvd3MgPSBzZWxlY3Rvci5yb3dzO1xuXHRcdFx0XHRhcGlTZWxlY3Rvci5jb2xzID0gc2VsZWN0b3IuY29scztcblx0XHRcdFx0YXBpU2VsZWN0b3Iub3B0cyA9IHNlbGVjdG9yLm9wdHM7XG5cdFx0XHRcdHJldHVybiBhcGk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcblx0XG5cdFx0bGFzdEluZGV4T2Y6IF9fYXJyYXlQcm90by5sYXN0SW5kZXhPZiB8fCBmdW5jdGlvbiAob2JqLCBzdGFydClcblx0XHR7XG5cdFx0XHQvLyBCaXQgY2hlZWt5Li4uXG5cdFx0XHRyZXR1cm4gdGhpcy5pbmRleE9mLmFwcGx5KCB0aGlzLnRvQXJyYXkucmV2ZXJzZSgpLCBhcmd1bWVudHMgKTtcblx0XHR9LFxuXHRcblx0XG5cdFx0bGVuZ3RoOiAgMCxcblx0XG5cdFxuXHRcdG1hcDogZnVuY3Rpb24gKCBmbiApXG5cdFx0e1xuXHRcdFx0dmFyIGEgPSBbXTtcblx0XG5cdFx0XHRpZiAoIF9fYXJyYXlQcm90by5tYXAgKSB7XG5cdFx0XHRcdGEgPSBfX2FycmF5UHJvdG8ubWFwLmNhbGwoIHRoaXMsIGZuLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gQ29tcGF0aWJpbGl0eSBmb3IgYnJvd3NlcnMgd2l0aG91dCBFTUNBLTI1Mi01IChKUyAxLjYpXG5cdFx0XHRcdGZvciAoIHZhciBpPTAsIGllbj10aGlzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdGEucHVzaCggZm4uY2FsbCggdGhpcywgdGhpc1tpXSwgaSApICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gbmV3IF9BcGkoIHRoaXMuY29udGV4dCwgYSApO1xuXHRcdH0sXG5cdFxuXHRcblx0XHRwbHVjazogZnVuY3Rpb24gKCBwcm9wIClcblx0XHR7XG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uICggZWwgKSB7XG5cdFx0XHRcdHJldHVybiBlbFsgcHJvcCBdO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdHBvcDogICAgIF9fYXJyYXlQcm90by5wb3AsXG5cdFxuXHRcblx0XHRwdXNoOiAgICBfX2FycmF5UHJvdG8ucHVzaCxcblx0XG5cdFxuXHRcdC8vIERvZXMgbm90IHJldHVybiBhbiBBUEkgaW5zdGFuY2Vcblx0XHRyZWR1Y2U6IF9fYXJyYXlQcm90by5yZWR1Y2UgfHwgZnVuY3Rpb24gKCBmbiwgaW5pdCApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIF9mblJlZHVjZSggdGhpcywgZm4sIGluaXQsIDAsIHRoaXMubGVuZ3RoLCAxICk7XG5cdFx0fSxcblx0XG5cdFxuXHRcdHJlZHVjZVJpZ2h0OiBfX2FycmF5UHJvdG8ucmVkdWNlUmlnaHQgfHwgZnVuY3Rpb24gKCBmbiwgaW5pdCApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIF9mblJlZHVjZSggdGhpcywgZm4sIGluaXQsIHRoaXMubGVuZ3RoLTEsIC0xLCAtMSApO1xuXHRcdH0sXG5cdFxuXHRcblx0XHRyZXZlcnNlOiBfX2FycmF5UHJvdG8ucmV2ZXJzZSxcblx0XG5cdFxuXHRcdC8vIE9iamVjdCB3aXRoIHJvd3MsIGNvbHVtbnMgYW5kIG9wdHNcblx0XHRzZWxlY3RvcjogbnVsbCxcblx0XG5cdFxuXHRcdHNoaWZ0OiAgIF9fYXJyYXlQcm90by5zaGlmdCxcblx0XG5cdFxuXHRcdHNvcnQ6ICAgIF9fYXJyYXlQcm90by5zb3J0LCAvLyA/IG5hbWUgLSBvcmRlcj9cblx0XG5cdFxuXHRcdHNwbGljZTogIF9fYXJyYXlQcm90by5zcGxpY2UsXG5cdFxuXHRcblx0XHR0b0FycmF5OiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBfX2FycmF5UHJvdG8uc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH0sXG5cdFxuXHRcblx0XHR0byQ6IGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuICQoIHRoaXMgKTtcblx0XHR9LFxuXHRcblx0XG5cdFx0dG9KUXVlcnk6IGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuICQoIHRoaXMgKTtcblx0XHR9LFxuXHRcblx0XG5cdFx0dW5pcXVlOiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBuZXcgX0FwaSggdGhpcy5jb250ZXh0LCBfdW5pcXVlKHRoaXMpICk7XG5cdFx0fSxcblx0XG5cdFxuXHRcdHVuc2hpZnQ6IF9fYXJyYXlQcm90by51bnNoaWZ0XG5cdH0gKTtcblx0XG5cdFxuXHRfQXBpLmV4dGVuZCA9IGZ1bmN0aW9uICggc2NvcGUsIG9iaiwgZXh0IClcblx0e1xuXHRcdC8vIE9ubHkgZXh0ZW5kIEFQSSBpbnN0YW5jZXMgYW5kIHN0YXRpYyBwcm9wZXJ0aWVzIG9mIHRoZSBBUElcblx0XHRpZiAoICEgZXh0Lmxlbmd0aCB8fCAhIG9iaiB8fCAoICEgKG9iaiBpbnN0YW5jZW9mIF9BcGkpICYmICEgb2JqLl9fZHRfd3JhcHBlciApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0dmFyXG5cdFx0XHRpLCBpZW4sXG5cdFx0XHRqLCBqZW4sXG5cdFx0XHRzdHJ1Y3QsIGlubmVyLFxuXHRcdFx0bWV0aG9kU2NvcGluZyA9IGZ1bmN0aW9uICggc2NvcGUsIGZuLCBzdHJ1YyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YXIgcmV0ID0gZm4uYXBwbHkoIHNjb3BlLCBhcmd1bWVudHMgKTtcblx0XG5cdFx0XHRcdFx0Ly8gTWV0aG9kIGV4dGVuc2lvblxuXHRcdFx0XHRcdF9BcGkuZXh0ZW5kKCByZXQsIHJldCwgc3RydWMubWV0aG9kRXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fTtcblx0XHRcdH07XG5cdFxuXHRcdGZvciAoIGk9MCwgaWVuPWV4dC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdHN0cnVjdCA9IGV4dFtpXTtcblx0XG5cdFx0XHQvLyBWYWx1ZVxuXHRcdFx0b2JqWyBzdHJ1Y3QubmFtZSBdID0gdHlwZW9mIHN0cnVjdC52YWwgPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHRtZXRob2RTY29waW5nKCBzY29wZSwgc3RydWN0LnZhbCwgc3RydWN0ICkgOlxuXHRcdFx0XHQkLmlzUGxhaW5PYmplY3QoIHN0cnVjdC52YWwgKSA/XG5cdFx0XHRcdFx0e30gOlxuXHRcdFx0XHRcdHN0cnVjdC52YWw7XG5cdFxuXHRcdFx0b2JqWyBzdHJ1Y3QubmFtZSBdLl9fZHRfd3JhcHBlciA9IHRydWU7XG5cdFxuXHRcdFx0Ly8gUHJvcGVydHkgZXh0ZW5zaW9uXG5cdFx0XHRfQXBpLmV4dGVuZCggc2NvcGUsIG9ialsgc3RydWN0Lm5hbWUgXSwgc3RydWN0LnByb3BFeHQgKTtcblx0XHR9XG5cdH07XG5cdFxuXHRcblx0Ly8gQHRvZG8gLSBJcyB0aGVyZSBuZWVkIGZvciBhbiBhdWdtZW50IGZ1bmN0aW9uP1xuXHQvLyBfQXBpLmF1Z21lbnQgPSBmdW5jdGlvbiAoIGluc3QsIG5hbWUgKVxuXHQvLyB7XG5cdC8vIFx0Ly8gRmluZCBzcmMgb2JqZWN0IGluIHRoZSBzdHJ1Y3R1cmUgZnJvbSB0aGUgbmFtZVxuXHQvLyBcdHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoJy4nKTtcblx0XG5cdC8vIFx0X0FwaS5leHRlbmQoIGluc3QsIG9iaiApO1xuXHQvLyB9O1xuXHRcblx0XG5cdC8vICAgICBbXG5cdC8vICAgICAgIHtcblx0Ly8gICAgICAgICBuYW1lOiAgICAgICdkYXRhJyAgICAgICAgICAgICAgICAtLSBzdHJpbmcgICAtIFByb3BlcnR5IG5hbWVcblx0Ly8gICAgICAgICB2YWw6ICAgICAgIGZ1bmN0aW9uICgpIHt9LCAgICAgICAtLSBmdW5jdGlvbiAtIEFwaSBtZXRob2QgKG9yIHVuZGVmaW5lZCBpZiBqdXN0IGFuIG9iamVjdFxuXHQvLyAgICAgICAgIG1ldGhvZEV4dDogWyAuLi4gXSwgICAgICAgICAgICAgIC0tIGFycmF5ICAgIC0gQXJyYXkgb2YgQXBpIG9iamVjdCBkZWZpbml0aW9ucyB0byBleHRlbmQgdGhlIG1ldGhvZCByZXN1bHRcblx0Ly8gICAgICAgICBwcm9wRXh0OiAgIFsgLi4uIF0gICAgICAgICAgICAgICAtLSBhcnJheSAgICAtIEFycmF5IG9mIEFwaSBvYmplY3QgZGVmaW5pdGlvbnMgdG8gZXh0ZW5kIHRoZSBwcm9wZXJ0eVxuXHQvLyAgICAgICB9LFxuXHQvLyAgICAgICB7XG5cdC8vICAgICAgICAgbmFtZTogICAgICdyb3cnXG5cdC8vICAgICAgICAgdmFsOiAgICAgICB7fSxcblx0Ly8gICAgICAgICBtZXRob2RFeHQ6IFsgLi4uIF0sXG5cdC8vICAgICAgICAgcHJvcEV4dDogICBbXG5cdC8vICAgICAgICAgICB7XG5cdC8vICAgICAgICAgICAgIG5hbWU6ICAgICAgJ2RhdGEnXG5cdC8vICAgICAgICAgICAgIHZhbDogICAgICAgZnVuY3Rpb24gKCkge30sXG5cdC8vICAgICAgICAgICAgIG1ldGhvZEV4dDogWyAuLi4gXSxcblx0Ly8gICAgICAgICAgICAgcHJvcEV4dDogICBbIC4uLiBdXG5cdC8vICAgICAgICAgICB9LFxuXHQvLyAgICAgICAgICAgLi4uXG5cdC8vICAgICAgICAgXVxuXHQvLyAgICAgICB9XG5cdC8vICAgICBdXG5cdFxuXHRfQXBpLnJlZ2lzdGVyID0gX2FwaV9yZWdpc3RlciA9IGZ1bmN0aW9uICggbmFtZSwgdmFsIClcblx0e1xuXHRcdGlmICggJC5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRmb3IgKCB2YXIgaj0wLCBqZW49bmFtZS5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcblx0XHRcdFx0X0FwaS5yZWdpc3RlciggbmFtZVtqXSwgdmFsICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHR2YXJcblx0XHRcdGksIGllbixcblx0XHRcdGhlaXIgPSBuYW1lLnNwbGl0KCcuJyksXG5cdFx0XHRzdHJ1Y3QgPSBfX2FwaVN0cnVjdCxcblx0XHRcdGtleSwgbWV0aG9kO1xuXHRcblx0XHR2YXIgZmluZCA9IGZ1bmN0aW9uICggc3JjLCBuYW1lICkge1xuXHRcdFx0Zm9yICggdmFyIGk9MCwgaWVuPXNyYy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBzcmNbaV0ubmFtZSA9PT0gbmFtZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gc3JjW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXHRcblx0XHRmb3IgKCBpPTAsIGllbj1oZWlyLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0bWV0aG9kID0gaGVpcltpXS5pbmRleE9mKCcoKScpICE9PSAtMTtcblx0XHRcdGtleSA9IG1ldGhvZCA/XG5cdFx0XHRcdGhlaXJbaV0ucmVwbGFjZSgnKCknLCAnJykgOlxuXHRcdFx0XHRoZWlyW2ldO1xuXHRcblx0XHRcdHZhciBzcmMgPSBmaW5kKCBzdHJ1Y3QsIGtleSApO1xuXHRcdFx0aWYgKCAhIHNyYyApIHtcblx0XHRcdFx0c3JjID0ge1xuXHRcdFx0XHRcdG5hbWU6ICAgICAga2V5LFxuXHRcdFx0XHRcdHZhbDogICAgICAge30sXG5cdFx0XHRcdFx0bWV0aG9kRXh0OiBbXSxcblx0XHRcdFx0XHRwcm9wRXh0OiAgIFtdXG5cdFx0XHRcdH07XG5cdFx0XHRcdHN0cnVjdC5wdXNoKCBzcmMgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGkgPT09IGllbi0xICkge1xuXHRcdFx0XHRzcmMudmFsID0gdmFsO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHN0cnVjdCA9IG1ldGhvZCA/XG5cdFx0XHRcdFx0c3JjLm1ldGhvZEV4dCA6XG5cdFx0XHRcdFx0c3JjLnByb3BFeHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0XG5cdF9BcGkucmVnaXN0ZXJQbHVyYWwgPSBfYXBpX3JlZ2lzdGVyUGx1cmFsID0gZnVuY3Rpb24gKCBwbHVyYWxOYW1lLCBzaW5ndWxhck5hbWUsIHZhbCApIHtcblx0XHRfQXBpLnJlZ2lzdGVyKCBwbHVyYWxOYW1lLCB2YWwgKTtcblx0XG5cdFx0X0FwaS5yZWdpc3Rlciggc2luZ3VsYXJOYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgcmV0ID0gdmFsLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XG5cdFx0XHRpZiAoIHJldCA9PT0gdGhpcyApIHtcblx0XHRcdFx0Ly8gUmV0dXJuZWQgaXRlbSBpcyB0aGUgQVBJIGluc3RhbmNlIHRoYXQgd2FzIHBhc3NlZCBpbiwgcmV0dXJuIGl0XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoIHJldCBpbnN0YW5jZW9mIF9BcGkgKSB7XG5cdFx0XHRcdC8vIE5ldyBBUEkgaW5zdGFuY2UgcmV0dXJuZWQsIHdhbnQgdGhlIHZhbHVlIGZyb20gdGhlIGZpcnN0IGl0ZW1cblx0XHRcdFx0Ly8gaW4gdGhlIHJldHVybmVkIGFycmF5IGZvciB0aGUgc2luZ3VsYXIgcmVzdWx0LlxuXHRcdFx0XHRyZXR1cm4gcmV0Lmxlbmd0aCA/XG5cdFx0XHRcdFx0JC5pc0FycmF5KCByZXRbMF0gKSA/XG5cdFx0XHRcdFx0XHRuZXcgX0FwaSggcmV0LmNvbnRleHQsIHJldFswXSApIDogLy8gQXJyYXkgcmVzdWx0cyBhcmUgJ2VuaGFuY2VkJ1xuXHRcdFx0XHRcdFx0cmV0WzBdIDpcblx0XHRcdFx0XHR1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gTm9uLUFQSSByZXR1cm4gLSBqdXN0IGZpcmUgaXQgYmFja1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9ICk7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIFNlbGVjdG9yIGZvciBIVE1MIHRhYmxlcy4gQXBwbHkgdGhlIGdpdmVuIHNlbGVjdG9yIHRvIHRoZSBnaXZlIGFycmF5IG9mXG5cdCAqIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0cy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd8aW50ZWdlcn0gW3NlbGVjdG9yXSBqUXVlcnkgc2VsZWN0b3Igc3RyaW5nIG9yIGludGVnZXJcblx0ICogQHBhcmFtICB7YXJyYXl9IEFycmF5IG9mIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0cyB0byBiZSBmaWx0ZXJlZFxuXHQgKiBAcmV0dXJuIHthcnJheX1cblx0ICogQGlnbm9yZVxuXHQgKi9cblx0dmFyIF9fdGFibGVfc2VsZWN0b3IgPSBmdW5jdGlvbiAoIHNlbGVjdG9yLCBhIClcblx0e1xuXHRcdC8vIEludGVnZXIgaXMgdXNlZCB0byBwaWNrIG91dCBhIHRhYmxlIGJ5IGluZGV4XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICdudW1iZXInICkge1xuXHRcdFx0cmV0dXJuIFsgYVsgc2VsZWN0b3IgXSBdO1xuXHRcdH1cblx0XG5cdFx0Ly8gUGVyZm9ybSBhIGpRdWVyeSBzZWxlY3RvciBvbiB0aGUgdGFibGUgbm9kZXNcblx0XHR2YXIgbm9kZXMgPSAkLm1hcCggYSwgZnVuY3Rpb24gKGVsLCBpKSB7XG5cdFx0XHRyZXR1cm4gZWwublRhYmxlO1xuXHRcdH0gKTtcblx0XG5cdFx0cmV0dXJuICQobm9kZXMpXG5cdFx0XHQuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0XHQubWFwKCBmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHQvLyBOZWVkIHRvIHRyYW5zbGF0ZSBiYWNrIGZyb20gdGhlIHRhYmxlIG5vZGUgdG8gdGhlIHNldHRpbmdzXG5cdFx0XHRcdHZhciBpZHggPSAkLmluQXJyYXkoIHRoaXMsIG5vZGVzICk7XG5cdFx0XHRcdHJldHVybiBhWyBpZHggXTtcblx0XHRcdH0gKVxuXHRcdFx0LnRvQXJyYXkoKTtcblx0fTtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbnRleHQgc2VsZWN0b3IgZm9yIHRoZSBBUEkncyBjb250ZXh0IChpLmUuIHRoZSB0YWJsZXMgdGhlIEFQSSBpbnN0YW5jZVxuXHQgKiByZWZlcnMgdG8uXG5cdCAqXG5cdCAqIEBuYW1lICAgIERhdGFUYWJsZS5BcGkjdGFibGVzXG5cdCAqIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IFtzZWxlY3Rvcl0gU2VsZWN0b3IgdG8gcGljayB3aGljaCB0YWJsZXMgdGhlIGl0ZXJhdG9yXG5cdCAqICAgc2hvdWxkIG9wZXJhdGUgb24uIElmIG5vdCBnaXZlbiwgYWxsIHRhYmxlcyBpbiB0aGUgY3VycmVudCBjb250ZXh0IGFyZVxuXHQgKiAgIHVzZWQuIFRoaXMgY2FuIGJlIGdpdmVuIGFzIGEgalF1ZXJ5IHNlbGVjdG9yIChmb3IgZXhhbXBsZSBgJzpndCgwKSdgKSB0b1xuXHQgKiAgIHNlbGVjdCBtdWx0aXBsZSB0YWJsZXMgb3IgYXMgYW4gaW50ZWdlciB0byBzZWxlY3QgYSBzaW5nbGUgdGFibGUuXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGUuQXBpfSBSZXR1cm5zIGEgbmV3IEFQSSBpbnN0YW5jZSBpZiBhIHNlbGVjdG9yIGlzIGdpdmVuLlxuXHQgKi9cblx0X2FwaV9yZWdpc3RlciggJ3RhYmxlcygpJywgZnVuY3Rpb24gKCBzZWxlY3RvciApIHtcblx0XHQvLyBBIG5ldyBpbnN0YW5jZSBpcyBjcmVhdGVkIGlmIHRoZXJlIHdhcyBhIHNlbGVjdG9yIHNwZWNpZmllZFxuXHRcdHJldHVybiBzZWxlY3RvciA/XG5cdFx0XHRuZXcgX0FwaSggX190YWJsZV9zZWxlY3Rvciggc2VsZWN0b3IsIHRoaXMuY29udGV4dCApICkgOlxuXHRcdFx0dGhpcztcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICd0YWJsZSgpJywgZnVuY3Rpb24gKCBzZWxlY3RvciApIHtcblx0XHR2YXIgdGFibGVzID0gdGhpcy50YWJsZXMoIHNlbGVjdG9yICk7XG5cdFx0dmFyIGN0eCA9IHRhYmxlcy5jb250ZXh0O1xuXHRcblx0XHQvLyBUcnVuY2F0ZSB0byB0aGUgZmlyc3QgbWF0Y2hlZCB0YWJsZVxuXHRcdHJldHVybiBjdHgubGVuZ3RoID9cblx0XHRcdG5ldyBfQXBpKCBjdHhbMF0gKSA6XG5cdFx0XHR0YWJsZXM7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAndGFibGVzKCkubm9kZXMoKScsICd0YWJsZSgpLm5vZGUoKScgLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggY3R4ICkge1xuXHRcdFx0cmV0dXJuIGN0eC5uVGFibGU7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3RhYmxlcygpLmJvZHkoKScsICd0YWJsZSgpLmJvZHkoKScgLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggY3R4ICkge1xuXHRcdFx0cmV0dXJuIGN0eC5uVEJvZHk7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3RhYmxlcygpLmhlYWRlcigpJywgJ3RhYmxlKCkuaGVhZGVyKCknICwgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIGN0eCApIHtcblx0XHRcdHJldHVybiBjdHgublRIZWFkO1xuXHRcdH0sIDEgKTtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICd0YWJsZXMoKS5mb290ZXIoKScsICd0YWJsZSgpLmZvb3RlcigpJyAsIGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBjdHggKSB7XG5cdFx0XHRyZXR1cm4gY3R4Lm5URm9vdDtcblx0XHR9LCAxICk7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAndGFibGVzKCkuY29udGFpbmVycygpJywgJ3RhYmxlKCkuY29udGFpbmVyKCknICwgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIGN0eCApIHtcblx0XHRcdHJldHVybiBjdHgublRhYmxlV3JhcHBlcjtcblx0XHR9LCAxICk7XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIFJlZHJhdyB0aGUgdGFibGVzIGluIHRoZSBjdXJyZW50IGNvbnRleHQuXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAnZHJhdygpJywgZnVuY3Rpb24gKCBwYWdpbmcgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRpZiAoIHBhZ2luZyA9PT0gJ3BhZ2UnICkge1xuXHRcdFx0XHRfZm5EcmF3KCBzZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIHBhZ2luZyA9PT0gJ3N0cmluZycgKSB7XG5cdFx0XHRcdFx0cGFnaW5nID0gcGFnaW5nID09PSAnZnVsbC1ob2xkJyA/XG5cdFx0XHRcdFx0XHRmYWxzZSA6XG5cdFx0XHRcdFx0XHR0cnVlO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRfZm5SZURyYXcoIHNldHRpbmdzLCBwYWdpbmc9PT1mYWxzZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdFxuXHQvKipcblx0ICogR2V0IHRoZSBjdXJyZW50IHBhZ2UgaW5kZXguXG5cdCAqXG5cdCAqIEByZXR1cm4ge2ludGVnZXJ9IEN1cnJlbnQgcGFnZSBpbmRleCAoemVybyBiYXNlZClcblx0ICovLyoqXG5cdCAqIFNldCB0aGUgY3VycmVudCBwYWdlLlxuXHQgKlxuXHQgKiBOb3RlIHRoYXQgaWYgeW91IGF0dGVtcHQgdG8gc2hvdyBhIHBhZ2Ugd2hpY2ggZG9lcyBub3QgZXhpc3QsIERhdGFUYWJsZXMgd2lsbFxuXHQgKiBub3QgdGhyb3cgYW4gZXJyb3IsIGJ1dCByYXRoZXIgcmVzZXQgdGhlIHBhZ2luZy5cblx0ICpcblx0ICogQHBhcmFtIHtpbnRlZ2VyfHN0cmluZ30gYWN0aW9uIFRoZSBwYWdpbmcgYWN0aW9uIHRvIHRha2UuIFRoaXMgY2FuIGJlIG9uZSBvZjpcblx0ICogICogYGludGVnZXJgIC0gVGhlIHBhZ2UgaW5kZXggdG8ganVtcCB0b1xuXHQgKiAgKiBgc3RyaW5nYCAtIEFuIGFjdGlvbiB0byB0YWtlOlxuXHQgKiAgICAqIGBmaXJzdGAgLSBKdW1wIHRvIGZpcnN0IHBhZ2UuXG5cdCAqICAgICogYG5leHRgIC0gSnVtcCB0byB0aGUgbmV4dCBwYWdlXG5cdCAqICAgICogYHByZXZpb3VzYCAtIEp1bXAgdG8gcHJldmlvdXMgcGFnZVxuXHQgKiAgICAqIGBsYXN0YCAtIEp1bXAgdG8gdGhlIGxhc3QgcGFnZS5cblx0ICogQHJldHVybnMge0RhdGFUYWJsZXMuQXBpfSB0aGlzXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAncGFnZSgpJywgZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cdFx0aWYgKCBhY3Rpb24gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiB0aGlzLnBhZ2UuaW5mbygpLnBhZ2U7IC8vIG5vdCBhbiBleHBlbnNpdmUgY2FsbFxuXHRcdH1cblx0XG5cdFx0Ly8gZWxzZSwgaGF2ZSBhbiBhY3Rpb24gdG8gdGFrZSBvbiBhbGwgdGFibGVzXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRfZm5QYWdlQ2hhbmdlKCBzZXR0aW5ncywgYWN0aW9uICk7XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0LyoqXG5cdCAqIFBhZ2luZyBpbmZvcm1hdGlvbiBmb3IgdGhlIGZpcnN0IHRhYmxlIGluIHRoZSBjdXJyZW50IGNvbnRleHQuXG5cdCAqXG5cdCAqIElmIHlvdSByZXF1aXJlIHBhZ2luZyBpbmZvcm1hdGlvbiBmb3IgYW5vdGhlciB0YWJsZSwgdXNlIHRoZSBgdGFibGUoKWAgbWV0aG9kXG5cdCAqIHdpdGggYSBzdWl0YWJsZSBzZWxlY3Rvci5cblx0ICpcblx0ICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgc2V0OlxuXHQgKiAgKiBgcGFnZWAgLSBDdXJyZW50IHBhZ2UgaW5kZXggKHplcm8gYmFzZWQgLSBpLmUuIHRoZSBmaXJzdCBwYWdlIGlzIGAwYClcblx0ICogICogYHBhZ2VzYCAtIFRvdGFsIG51bWJlciBvZiBwYWdlc1xuXHQgKiAgKiBgc3RhcnRgIC0gRGlzcGxheSBpbmRleCBmb3IgdGhlIGZpcnN0IHJlY29yZCBzaG93biBvbiB0aGUgY3VycmVudCBwYWdlXG5cdCAqICAqIGBlbmRgIC0gRGlzcGxheSBpbmRleCBmb3IgdGhlIGxhc3QgcmVjb3JkIHNob3duIG9uIHRoZSBjdXJyZW50IHBhZ2Vcblx0ICogICogYGxlbmd0aGAgLSBEaXNwbGF5IGxlbmd0aCAobnVtYmVyIG9mIHJlY29yZHMpLiBOb3RlIHRoYXQgZ2VuZXJhbGx5IGBzdGFydFxuXHQgKiAgICArIGxlbmd0aCA9IGVuZGAsIGJ1dCB0aGlzIGlzIG5vdCBhbHdheXMgdHJ1ZSwgZm9yIGV4YW1wbGUgaWYgdGhlcmUgYXJlXG5cdCAqICAgIG9ubHkgMiByZWNvcmRzIHRvIHNob3cgb24gdGhlIGZpbmFsIHBhZ2UsIHdpdGggYSBsZW5ndGggb2YgMTAuXG5cdCAqICAqIGByZWNvcmRzVG90YWxgIC0gRnVsbCBkYXRhIHNldCBsZW5ndGhcblx0ICogICogYHJlY29yZHNEaXNwbGF5YCAtIERhdGEgc2V0IGxlbmd0aCBvbmNlIHRoZSBjdXJyZW50IGZpbHRlcmluZyBjcml0ZXJpb25cblx0ICogICAgYXJlIGFwcGxpZWQuXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAncGFnZS5pbmZvKCknLCBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblx0XHRpZiAoIHRoaXMuY29udGV4dC5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XG5cdFx0dmFyXG5cdFx0XHRzZXR0aW5ncyAgID0gdGhpcy5jb250ZXh0WzBdLFxuXHRcdFx0c3RhcnQgICAgICA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LFxuXHRcdFx0bGVuICAgICAgICA9IHNldHRpbmdzLm9GZWF0dXJlcy5iUGFnaW5hdGUgPyBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGggOiAtMSxcblx0XHRcdHZpc1JlY29yZHMgPSBzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCksXG5cdFx0XHRhbGwgICAgICAgID0gbGVuID09PSAtMTtcblx0XG5cdFx0cmV0dXJuIHtcblx0XHRcdFwicGFnZVwiOiAgICAgICAgICAgYWxsID8gMCA6IE1hdGguZmxvb3IoIHN0YXJ0IC8gbGVuICksXG5cdFx0XHRcInBhZ2VzXCI6ICAgICAgICAgIGFsbCA/IDEgOiBNYXRoLmNlaWwoIHZpc1JlY29yZHMgLyBsZW4gKSxcblx0XHRcdFwic3RhcnRcIjogICAgICAgICAgc3RhcnQsXG5cdFx0XHRcImVuZFwiOiAgICAgICAgICAgIHNldHRpbmdzLmZuRGlzcGxheUVuZCgpLFxuXHRcdFx0XCJsZW5ndGhcIjogICAgICAgICBsZW4sXG5cdFx0XHRcInJlY29yZHNUb3RhbFwiOiAgIHNldHRpbmdzLmZuUmVjb3Jkc1RvdGFsKCksXG5cdFx0XHRcInJlY29yZHNEaXNwbGF5XCI6IHZpc1JlY29yZHMsXG5cdFx0XHRcInNlcnZlclNpZGVcIjogICAgIF9mbkRhdGFTb3VyY2UoIHNldHRpbmdzICkgPT09ICdzc3AnXG5cdFx0fTtcblx0fSApO1xuXHRcblx0XG5cdC8qKlxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgcGFnZSBsZW5ndGguXG5cdCAqXG5cdCAqIEByZXR1cm4ge2ludGVnZXJ9IEN1cnJlbnQgcGFnZSBsZW5ndGguIE5vdGUgYC0xYCBpbmRpY2F0ZXMgdGhhdCBhbGwgcmVjb3Jkc1xuXHQgKiAgIGFyZSB0byBiZSBzaG93bi5cblx0ICovLyoqXG5cdCAqIFNldCB0aGUgY3VycmVudCBwYWdlIGxlbmd0aC5cblx0ICpcblx0ICogQHBhcmFtIHtpbnRlZ2VyfSBQYWdlIGxlbmd0aCB0byBzZXQuIFVzZSBgLTFgIHRvIHNob3cgYWxsIHJlY29yZHMuXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xuXHQgKi9cblx0X2FwaV9yZWdpc3RlciggJ3BhZ2UubGVuKCknLCBmdW5jdGlvbiAoIGxlbiApIHtcblx0XHQvLyBOb3RlIHRoYXQgd2UgY2FuJ3QgY2FsbCB0aGlzIGZ1bmN0aW9uICdsZW5ndGgoKScgYmVjYXVzZSBgbGVuZ3RoYFxuXHRcdC8vIGlzIGEgSmF2YXNjcmlwdCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgd2hpY2ggZGVmaW5lcyBob3cgbWFueSBhcmd1bWVudHNcblx0XHQvLyB0aGUgZnVuY3Rpb24gZXhwZWN0cy5cblx0XHRpZiAoIGxlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5sZW5ndGggIT09IDAgP1xuXHRcdFx0XHR0aGlzLmNvbnRleHRbMF0uX2lEaXNwbGF5TGVuZ3RoIDpcblx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdH1cblx0XG5cdFx0Ly8gZWxzZSwgc2V0IHRoZSBwYWdlIGxlbmd0aFxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xuXHRcdFx0X2ZuTGVuZ3RoQ2hhbmdlKCBzZXR0aW5ncywgbGVuICk7XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0XG5cdHZhciBfX3JlbG9hZCA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIGhvbGRQb3NpdGlvbiwgY2FsbGJhY2sgKSB7XG5cdFx0Ly8gVXNlIHRoZSBkcmF3IGV2ZW50IHRvIHRyaWdnZXIgYSBjYWxsYmFja1xuXHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHR2YXIgYXBpID0gbmV3IF9BcGkoIHNldHRpbmdzICk7XG5cdFxuXHRcdFx0YXBpLm9uZSggJ2RyYXcnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGNhbGxiYWNrKCBhcGkuYWpheC5qc29uKCkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdGlmICggX2ZuRGF0YVNvdXJjZSggc2V0dGluZ3MgKSA9PSAnc3NwJyApIHtcblx0XHRcdF9mblJlRHJhdyggc2V0dGluZ3MsIGhvbGRQb3NpdGlvbiApO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdF9mblByb2Nlc3NpbmdEaXNwbGF5KCBzZXR0aW5ncywgdHJ1ZSApO1xuXHRcblx0XHRcdC8vIENhbmNlbCBhbiBleGlzdGluZyByZXF1ZXN0XG5cdFx0XHR2YXIgeGhyID0gc2V0dGluZ3MuanFYSFI7XG5cdFx0XHRpZiAoIHhociAmJiB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHtcblx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gVHJpZ2dlciB4aHJcblx0XHRcdF9mbkJ1aWxkQWpheCggc2V0dGluZ3MsIFtdLCBmdW5jdGlvbigganNvbiApIHtcblx0XHRcdFx0X2ZuQ2xlYXJUYWJsZSggc2V0dGluZ3MgKTtcblx0XG5cdFx0XHRcdHZhciBkYXRhID0gX2ZuQWpheERhdGFTcmMoIHNldHRpbmdzLCBqc29uICk7XG5cdFx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1kYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdF9mbkFkZERhdGEoIHNldHRpbmdzLCBkYXRhW2ldICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdF9mblJlRHJhdyggc2V0dGluZ3MsIGhvbGRQb3NpdGlvbiApO1xuXHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIGZhbHNlICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9O1xuXHRcblx0XG5cdC8qKlxuXHQgKiBHZXQgdGhlIEpTT04gcmVzcG9uc2UgZnJvbSB0aGUgbGFzdCBBamF4IHJlcXVlc3QgdGhhdCBEYXRhVGFibGVzIG1hZGUgdG8gdGhlXG5cdCAqIHNlcnZlci4gTm90ZSB0aGF0IHRoaXMgcmV0dXJucyB0aGUgSlNPTiBmcm9tIHRoZSBmaXJzdCB0YWJsZSBpbiB0aGUgY3VycmVudFxuXHQgKiBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtvYmplY3R9IEpTT04gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuXHQgKi9cblx0X2FwaV9yZWdpc3RlciggJ2FqYXguanNvbigpJywgZnVuY3Rpb24gKCkge1xuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cdFxuXHRcdGlmICggY3R4Lmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRyZXR1cm4gY3R4WzBdLmpzb247XG5cdFx0fVxuXHRcblx0XHQvLyBlbHNlIHJldHVybiB1bmRlZmluZWQ7XG5cdH0gKTtcblx0XG5cdFxuXHQvKipcblx0ICogR2V0IHRoZSBkYXRhIHN1Ym1pdHRlZCBpbiB0aGUgbGFzdCBBamF4IHJlcXVlc3Rcblx0ICovXG5cdF9hcGlfcmVnaXN0ZXIoICdhamF4LnBhcmFtcygpJywgZnVuY3Rpb24gKCkge1xuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cdFxuXHRcdGlmICggY3R4Lmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRyZXR1cm4gY3R4WzBdLm9BamF4RGF0YTtcblx0XHR9XG5cdFxuXHRcdC8vIGVsc2UgcmV0dXJuIHVuZGVmaW5lZDtcblx0fSApO1xuXHRcblx0XG5cdC8qKlxuXHQgKiBSZWxvYWQgdGFibGVzIGZyb20gdGhlIEFqYXggZGF0YSBzb3VyY2UuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGxcblx0ICogYXV0b21hdGljYWxseSByZS1kcmF3IHRoZSB0YWJsZSB3aGVuIHRoZSByZW1vdGUgZGF0YSBoYXMgYmVlbiBsb2FkZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc2V0PXRydWVdIFJlc2V0IChkZWZhdWx0KSBvciBob2xkIHRoZSBjdXJyZW50IHBhZ2luZ1xuXHQgKiAgIHBvc2l0aW9uLiBBIGZ1bGwgcmUtc29ydCBhbmQgcmUtZmlsdGVyIGlzIHBlcmZvcm1lZCB3aGVuIHRoaXMgbWV0aG9kIGlzXG5cdCAqICAgY2FsbGVkLCB3aGljaCBpcyB3aHkgdGhlIHBhZ2luYXRpb24gcmVzZXQgaXMgdGhlIGRlZmF1bHQgYWN0aW9uLlxuXHQgKiBAcmV0dXJucyB7RGF0YVRhYmxlcy5BcGl9IHRoaXNcblx0ICovXG5cdF9hcGlfcmVnaXN0ZXIoICdhamF4LnJlbG9hZCgpJywgZnVuY3Rpb24gKCBjYWxsYmFjaywgcmVzZXRQYWdpbmcgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuXHRcdFx0X19yZWxvYWQoIHNldHRpbmdzLCByZXNldFBhZ2luZz09PWZhbHNlLCBjYWxsYmFjayApO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdC8qKlxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgQWpheCBVUkwuIE5vdGUgdGhhdCB0aGlzIHJldHVybnMgdGhlIFVSTCBmcm9tIHRoZSBmaXJzdFxuXHQgKiB0YWJsZSBpbiB0aGUgY3VycmVudCBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEN1cnJlbnQgQWpheCBzb3VyY2UgVVJMXG5cdCAqLy8qKlxuXHQgKiBTZXQgdGhlIEFqYXggVVJMLiBOb3RlIHRoYXQgdGhpcyB3aWxsIHNldCB0aGUgVVJMIGZvciBhbGwgdGFibGVzIGluIHRoZVxuXHQgKiBjdXJyZW50IGNvbnRleHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIHRvIHNldC5cblx0ICogQHJldHVybnMge0RhdGFUYWJsZXMuQXBpfSB0aGlzXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAnYWpheC51cmwoKScsIGZ1bmN0aW9uICggdXJsICkge1xuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cdFxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQvLyBnZXRcblx0XHRcdGlmICggY3R4Lmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGN0eCA9IGN0eFswXTtcblx0XG5cdFx0XHRyZXR1cm4gY3R4LmFqYXggP1xuXHRcdFx0XHQkLmlzUGxhaW5PYmplY3QoIGN0eC5hamF4ICkgP1xuXHRcdFx0XHRcdGN0eC5hamF4LnVybCA6XG5cdFx0XHRcdFx0Y3R4LmFqYXggOlxuXHRcdFx0XHRjdHguc0FqYXhTb3VyY2U7XG5cdFx0fVxuXHRcblx0XHQvLyBzZXRcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBzZXR0aW5ncy5hamF4ICkgKSB7XG5cdFx0XHRcdHNldHRpbmdzLmFqYXgudXJsID0gdXJsO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHNldHRpbmdzLmFqYXggPSB1cmw7XG5cdFx0XHR9XG5cdFx0XHQvLyBObyBuZWVkIHRvIGNvbnNpZGVyIHNBamF4U291cmNlIGhlcmUgc2luY2UgRGF0YVRhYmxlcyBnaXZlcyBwcmlvcml0eVxuXHRcdFx0Ly8gdG8gYGFqYXhgIG92ZXIgYHNBamF4U291cmNlYC4gU28gc2V0dGluZyBgYWpheGAgaGVyZSwgcmVuZGVycyBhbnlcblx0XHRcdC8vIHZhbHVlIG9mIGBzQWpheFNvdXJjZWAgcmVkdW5kYW50LlxuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdC8qKlxuXHQgKiBMb2FkIGRhdGEgZnJvbSB0aGUgbmV3bHkgc2V0IEFqYXggVVJMLiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgaXMgb25seVxuXHQgKiBhdmFpbGFibGUgd2hlbiBgYWpheC51cmwoKWAgaXMgdXNlZCB0byBzZXQgYSBVUkwuIEFkZGl0aW9uYWxseSwgdGhpcyBtZXRob2Rcblx0ICogaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBjYWxsaW5nIGBhamF4LnJlbG9hZCgpYCBidXQgaXMgcHJvdmlkZWQgZm9yXG5cdCAqIGNvbnZlbmllbmNlIHdoZW4gc2V0dGluZyBhIG5ldyBVUkwuIExpa2UgYGFqYXgucmVsb2FkKClgIGl0IHdpbGxcblx0ICogYXV0b21hdGljYWxseSByZWRyYXcgdGhlIHRhYmxlIG9uY2UgdGhlIHJlbW90ZSBkYXRhIGhhcyBiZWVuIGxvYWRlZC5cblx0ICpcblx0ICogQHJldHVybnMge0RhdGFUYWJsZXMuQXBpfSB0aGlzXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAnYWpheC51cmwoKS5sb2FkKCknLCBmdW5jdGlvbiAoIGNhbGxiYWNrLCByZXNldFBhZ2luZyApIHtcblx0XHQvLyBTYW1lIGFzIGEgcmVsb2FkLCBidXQgbWFrZXMgc2Vuc2UgdG8gcHJlc2VudCBpdCBmb3IgZWFzeSBhY2Nlc3MgYWZ0ZXIgYVxuXHRcdC8vIHVybCBjaGFuZ2Vcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBjdHggKSB7XG5cdFx0XHRfX3JlbG9hZCggY3R4LCByZXNldFBhZ2luZz09PWZhbHNlLCBjYWxsYmFjayApO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0dmFyIF9zZWxlY3Rvcl9ydW4gPSBmdW5jdGlvbiAoIHR5cGUsIHNlbGVjdG9yLCBzZWxlY3RGbiwgc2V0dGluZ3MsIG9wdHMgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRvdXQgPSBbXSwgcmVzLFxuXHRcdFx0YSwgaSwgaWVuLCBqLCBqZW4sXG5cdFx0XHRzZWxlY3RvclR5cGUgPSB0eXBlb2Ygc2VsZWN0b3I7XG5cdFxuXHRcdC8vIENhbid0IGp1c3QgY2hlY2sgZm9yIGlzQXJyYXkgaGVyZSwgYXMgYW4gQVBJIG9yIGpRdWVyeSBpbnN0YW5jZSBtaWdodCBiZVxuXHRcdC8vIGdpdmVuIHdpdGggdGhlaXIgYXJyYXkgbGlrZSBsb29rXG5cdFx0aWYgKCAhIHNlbGVjdG9yIHx8IHNlbGVjdG9yVHlwZSA9PT0gJ3N0cmluZycgfHwgc2VsZWN0b3JUeXBlID09PSAnZnVuY3Rpb24nIHx8IHNlbGVjdG9yLmxlbmd0aCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0c2VsZWN0b3IgPSBbIHNlbGVjdG9yIF07XG5cdFx0fVxuXHRcblx0XHRmb3IgKCBpPTAsIGllbj1zZWxlY3Rvci5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdGEgPSBzZWxlY3RvcltpXSAmJiBzZWxlY3RvcltpXS5zcGxpdCA/XG5cdFx0XHRcdHNlbGVjdG9yW2ldLnNwbGl0KCcsJykgOlxuXHRcdFx0XHRbIHNlbGVjdG9yW2ldIF07XG5cdFxuXHRcdFx0Zm9yICggaj0wLCBqZW49YS5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcblx0XHRcdFx0cmVzID0gc2VsZWN0Rm4oIHR5cGVvZiBhW2pdID09PSAnc3RyaW5nJyA/ICQudHJpbShhW2pdKSA6IGFbal0gKTtcblx0XG5cdFx0XHRcdGlmICggcmVzICYmIHJlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0b3V0ID0gb3V0LmNvbmNhdCggcmVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIHNlbGVjdG9yIGV4dGVuc2lvbnNcblx0XHR2YXIgZXh0ID0gX2V4dC5zZWxlY3RvclsgdHlwZSBdO1xuXHRcdGlmICggZXh0Lmxlbmd0aCApIHtcblx0XHRcdGZvciAoIGk9MCwgaWVuPWV4dC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0b3V0ID0gZXh0W2ldKCBzZXR0aW5ncywgb3B0cywgb3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gX3VuaXF1ZSggb3V0ICk7XG5cdH07XG5cdFxuXHRcblx0dmFyIF9zZWxlY3Rvcl9vcHRzID0gZnVuY3Rpb24gKCBvcHRzIClcblx0e1xuXHRcdGlmICggISBvcHRzICkge1xuXHRcdFx0b3B0cyA9IHt9O1xuXHRcdH1cblx0XG5cdFx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIDEuOS0gd2hpY2ggdXNlZCB0aGUgdGVybWlub2xvZ3kgZmlsdGVyIHJhdGhlclxuXHRcdC8vIHRoYW4gc2VhcmNoXG5cdFx0aWYgKCBvcHRzLmZpbHRlciAmJiBvcHRzLnNlYXJjaCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0b3B0cy5zZWFyY2ggPSBvcHRzLmZpbHRlcjtcblx0XHR9XG5cdFxuXHRcdHJldHVybiAkLmV4dGVuZCgge1xuXHRcdFx0c2VhcmNoOiAnbm9uZScsXG5cdFx0XHRvcmRlcjogJ2N1cnJlbnQnLFxuXHRcdFx0cGFnZTogJ2FsbCdcblx0XHR9LCBvcHRzICk7XG5cdH07XG5cdFxuXHRcblx0dmFyIF9zZWxlY3Rvcl9maXJzdCA9IGZ1bmN0aW9uICggaW5zdCApXG5cdHtcblx0XHQvLyBSZWR1Y2UgdGhlIEFQSSBpbnN0YW5jZSB0byB0aGUgZmlyc3QgaXRlbSBmb3VuZFxuXHRcdGZvciAoIHZhciBpPTAsIGllbj1pbnN0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0aWYgKCBpbnN0W2ldLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRcdC8vIEFzc2lnbiB0aGUgZmlyc3QgZWxlbWVudCB0byB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgaW5zdGFuY2Vcblx0XHRcdFx0Ly8gYW5kIHRydW5jYXRlIHRoZSBpbnN0YW5jZSBhbmQgY29udGV4dFxuXHRcdFx0XHRpbnN0WzBdID0gaW5zdFtpXTtcblx0XHRcdFx0aW5zdFswXS5sZW5ndGggPSAxO1xuXHRcdFx0XHRpbnN0Lmxlbmd0aCA9IDE7XG5cdFx0XHRcdGluc3QuY29udGV4dCA9IFsgaW5zdC5jb250ZXh0W2ldIF07XG5cdFxuXHRcdFx0XHRyZXR1cm4gaW5zdDtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIE5vdCBmb3VuZCAtIHJldHVybiBhbiBlbXB0eSBpbnN0YW5jZVxuXHRcdGluc3QubGVuZ3RoID0gMDtcblx0XHRyZXR1cm4gaW5zdDtcblx0fTtcblx0XG5cdFxuXHR2YXIgX3NlbGVjdG9yX3Jvd19pbmRleGVzID0gZnVuY3Rpb24gKCBzZXR0aW5ncywgb3B0cyApXG5cdHtcblx0XHR2YXJcblx0XHRcdGksIGllbiwgdG1wLCBhPVtdLFxuXHRcdFx0ZGlzcGxheUZpbHRlcmVkID0gc2V0dGluZ3MuYWlEaXNwbGF5LFxuXHRcdFx0ZGlzcGxheU1hc3RlciA9IHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlcjtcblx0XG5cdFx0dmFyXG5cdFx0XHRzZWFyY2ggPSBvcHRzLnNlYXJjaCwgIC8vIG5vbmUsIGFwcGxpZWQsIHJlbW92ZWRcblx0XHRcdG9yZGVyICA9IG9wdHMub3JkZXIsICAgLy8gYXBwbGllZCwgY3VycmVudCwgaW5kZXggKG9yaWdpbmFsIC0gY29tcGF0aWJpbGl0eSB3aXRoIDEuOSlcblx0XHRcdHBhZ2UgICA9IG9wdHMucGFnZTsgICAgLy8gYWxsLCBjdXJyZW50XG5cdFxuXHRcdGlmICggX2ZuRGF0YVNvdXJjZSggc2V0dGluZ3MgKSA9PSAnc3NwJyApIHtcblx0XHRcdC8vIEluIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcgbW9kZSwgbW9zdCBvcHRpb25zIGFyZSBpcnJlbGV2YW50IHNpbmNlXG5cdFx0XHQvLyByb3dzIG5vdCBzaG93biBkb24ndCBleGlzdCBhbmQgdGhlIGluZGV4IG9yZGVyIGlzIHRoZSBhcHBsaWVkIG9yZGVyXG5cdFx0XHQvLyBSZW1vdmVkIGlzIGEgc3BlY2lhbCBjYXNlIC0gZm9yIGNvbnNpc3RlbmN5IGp1c3QgcmV0dXJuIGFuIGVtcHR5XG5cdFx0XHQvLyBhcnJheVxuXHRcdFx0cmV0dXJuIHNlYXJjaCA9PT0gJ3JlbW92ZWQnID9cblx0XHRcdFx0W10gOlxuXHRcdFx0XHRfcmFuZ2UoIDAsIGRpc3BsYXlNYXN0ZXIubGVuZ3RoICk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBwYWdlID09ICdjdXJyZW50JyApIHtcblx0XHRcdC8vIEN1cnJlbnQgcGFnZSBpbXBsaWVzIHRoYXQgb3JkZXI9Y3VycmVudCBhbmQgZml0bGVyPWFwcGxpZWQsIHNpbmNlIGl0IGlzXG5cdFx0XHQvLyBmYWlybHkgc2Vuc2VsZXNzIG90aGVyd2lzZSwgcmVnYXJkbGVzcyBvZiB3aGF0IG9yZGVyIGFuZCBzZWFyY2ggYWN0dWFsbHlcblx0XHRcdC8vIGFyZVxuXHRcdFx0Zm9yICggaT1zZXR0aW5ncy5faURpc3BsYXlTdGFydCwgaWVuPXNldHRpbmdzLmZuRGlzcGxheUVuZCgpIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRcdGEucHVzaCggZGlzcGxheUZpbHRlcmVkW2ldICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBvcmRlciA9PSAnY3VycmVudCcgfHwgb3JkZXIgPT0gJ2FwcGxpZWQnICkge1xuXHRcdFx0YSA9IHNlYXJjaCA9PSAnbm9uZScgP1xuXHRcdFx0XHRkaXNwbGF5TWFzdGVyLnNsaWNlKCkgOiAgICAgICAgICAgICAgICAgICAgICAvLyBubyBzZWFyY2hcblx0XHRcdFx0c2VhcmNoID09ICdhcHBsaWVkJyA/XG5cdFx0XHRcdFx0ZGlzcGxheUZpbHRlcmVkLnNsaWNlKCkgOiAgICAgICAgICAgICAgICAvLyBhcHBsaWVkIHNlYXJjaFxuXHRcdFx0XHRcdCQubWFwKCBkaXNwbGF5TWFzdGVyLCBmdW5jdGlvbiAoZWwsIGkpIHsgLy8gcmVtb3ZlZCBzZWFyY2hcblx0XHRcdFx0XHRcdHJldHVybiAkLmluQXJyYXkoIGVsLCBkaXNwbGF5RmlsdGVyZWQgKSA9PT0gLTEgPyBlbCA6IG51bGw7XG5cdFx0XHRcdFx0fSApO1xuXHRcdH1cblx0XHRlbHNlIGlmICggb3JkZXIgPT0gJ2luZGV4JyB8fCBvcmRlciA9PSAnb3JpZ2luYWwnICkge1xuXHRcdFx0Zm9yICggaT0wLCBpZW49c2V0dGluZ3MuYW9EYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIHNlYXJjaCA9PSAnbm9uZScgKSB7XG5cdFx0XHRcdFx0YS5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7IC8vIGFwcGxpZWQgfCByZW1vdmVkXG5cdFx0XHRcdFx0dG1wID0gJC5pbkFycmF5KCBpLCBkaXNwbGF5RmlsdGVyZWQgKTtcblx0XG5cdFx0XHRcdFx0aWYgKCh0bXAgPT09IC0xICYmIHNlYXJjaCA9PSAncmVtb3ZlZCcpIHx8XG5cdFx0XHRcdFx0XHQodG1wID49IDAgICAmJiBzZWFyY2ggPT0gJ2FwcGxpZWQnKSApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YS5wdXNoKCBpICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gYTtcblx0fTtcblx0XG5cdFxuXHQvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcblx0ICogUm93c1xuXHQgKlxuXHQgKiB7fSAgICAgICAgICAtIG5vIHNlbGVjdG9yIC0gdXNlIGFsbCBhdmFpbGFibGUgcm93c1xuXHQgKiB7aW50ZWdlcn0gICAtIHJvdyBhb0RhdGEgaW5kZXhcblx0ICoge25vZGV9ICAgICAgLSBUUiBub2RlXG5cdCAqIHtzdHJpbmd9ICAgIC0galF1ZXJ5IHNlbGVjdG9yIHRvIGFwcGx5IHRvIHRoZSBUUiBlbGVtZW50c1xuXHQgKiB7YXJyYXl9ICAgICAtIGpRdWVyeSBhcnJheSBvZiBub2Rlcywgb3Igc2ltcGx5IGFuIGFycmF5IG9mIFRSIG5vZGVzXG5cdCAqXG5cdCAqL1xuXHRcblx0XG5cdHZhciBfX3Jvd19zZWxlY3RvciA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzIClcblx0e1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbiAoIHNlbCApIHtcblx0XHRcdHZhciBzZWxJbnQgPSBfaW50VmFsKCBzZWwgKTtcblx0XHRcdHZhciBpLCBpZW47XG5cdFxuXHRcdFx0Ly8gU2hvcnQgY3V0IC0gc2VsZWN0b3IgaXMgYSBudW1iZXIgYW5kIG5vIG9wdGlvbnMgcHJvdmlkZWQgKGRlZmF1bHQgaXNcblx0XHRcdC8vIGFsbCByZWNvcmRzLCBzbyBubyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBpbmRleCBpcyBpbiB0aGVyZSwgc2luY2UgaXRcblx0XHRcdC8vIG11c3QgYmUgLSBkZXYgZXJyb3IgaWYgdGhlIGluZGV4IGRvZXNuJ3QgZXhpc3QpLlxuXHRcdFx0aWYgKCBzZWxJbnQgIT09IG51bGwgJiYgISBvcHRzICkge1xuXHRcdFx0XHRyZXR1cm4gWyBzZWxJbnQgXTtcblx0XHRcdH1cblx0XG5cdFx0XHR2YXIgcm93cyA9IF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyggc2V0dGluZ3MsIG9wdHMgKTtcblx0XG5cdFx0XHRpZiAoIHNlbEludCAhPT0gbnVsbCAmJiAkLmluQXJyYXkoIHNlbEludCwgcm93cyApICE9PSAtMSApIHtcblx0XHRcdFx0Ly8gU2VsZWN0b3IgLSBpbnRlZ2VyXG5cdFx0XHRcdHJldHVybiBbIHNlbEludCBdO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoICEgc2VsICkge1xuXHRcdFx0XHQvLyBTZWxlY3RvciAtIG5vbmVcblx0XHRcdFx0cmV0dXJuIHJvd3M7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU2VsZWN0b3IgLSBmdW5jdGlvblxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsID09PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0XHRyZXR1cm4gJC5tYXAoIHJvd3MsIGZ1bmN0aW9uIChpZHgpIHtcblx0XHRcdFx0XHR2YXIgcm93ID0gc2V0dGluZ3MuYW9EYXRhWyBpZHggXTtcblx0XHRcdFx0XHRyZXR1cm4gc2VsKCBpZHgsIHJvdy5fYURhdGEsIHJvdy5uVHIgKSA/IGlkeCA6IG51bGw7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBHZXQgbm9kZXMgaW4gdGhlIG9yZGVyIGZyb20gdGhlIGByb3dzYCBhcnJheSB3aXRoIG51bGwgdmFsdWVzIHJlbW92ZWRcblx0XHRcdHZhciBub2RlcyA9IF9yZW1vdmVFbXB0eShcblx0XHRcdFx0X3BsdWNrX29yZGVyKCBzZXR0aW5ncy5hb0RhdGEsIHJvd3MsICduVHInIClcblx0XHRcdCk7XG5cdFxuXHRcdFx0Ly8gU2VsZWN0b3IgLSBub2RlXG5cdFx0XHRpZiAoIHNlbC5ub2RlTmFtZSApIHtcblx0XHRcdFx0aWYgKCAkLmluQXJyYXkoIHNlbCwgbm9kZXMgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsgc2VsLl9EVF9Sb3dJbmRleCBdOyAvLyBzZWwgaXMgYSBUUiBub2RlIHRoYXQgaXMgaW4gdGhlIHRhYmxlXG5cdFx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgRGF0YVRhYmxlcyBhZGRzIGEgcHJvcCBmb3IgZmFzdCBsb29rdXBcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIElEIHNlbGVjdG9yLiBXYW50IHRvIGFsd2F5cyBiZSBhYmxlIHRvIHNlbGVjdCByb3dzIGJ5IGlkLCByZWdhcmRsZXNzXG5cdFx0XHQvLyBvZiBpZiB0aGUgdHIgZWxlbWVudCBoYXMgYmVlbiBjcmVhdGVkIG9yIG5vdCwgc28gY2FuJ3QgcmVseSB1cG9uXG5cdFx0XHQvLyBqUXVlcnkgaGVyZSAtIGhlbmNlIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLiBUaGlzIGRvZXMgbm90IG1hdGNoXG5cdFx0XHQvLyBTaXp6bGUncyBmYXN0IHNlbGVjdG9yIG9yIEhUTUw0IC0gaW4gSFRNTDUgdGhlIElEIGNhbiBiZSBhbnl0aGluZyxcblx0XHRcdC8vIGJ1dCB0byBzZWxlY3QgaXQgdXNpbmcgYSBDU1Mgc2VsZWN0b3IgZW5naW5lIChsaWtlIFNpenpsZSBvclxuXHRcdFx0Ly8gcXVlcnlTZWxlY3QpIGl0IHdvdWxkIG5lZWQgdG8gbmVlZCB0byBiZSBlc2NhcGVkIGZvciBzb21lIGNoYXJhY3RlcnMuXG5cdFx0XHQvLyBEYXRhVGFibGVzIHNpbXBsaWZpZXMgdGhpcyBmb3Igcm93IHNlbGVjdG9ycyBzaW5jZSB5b3UgY2FuIHNlbGVjdFxuXHRcdFx0Ly8gb25seSBhIHJvdy4gQSAjIGluZGljYXRlcyBhbiBpZCBhbnkgYW55dGhpbmcgdGhhdCBmb2xsb3dzIGlzIHRoZSBpZCAtXG5cdFx0XHQvLyB1bmVzY2FwZWQuXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWwgPT09ICdzdHJpbmcnICYmIHNlbC5jaGFyQXQoMCkgPT09ICcjJyApIHtcblx0XHRcdFx0Ly8gZ2V0IHJvdyBpbmRleCBmcm9tIGlkXG5cdFx0XHRcdHZhciByb3dPYmogPSBzZXR0aW5ncy5hSWRzWyBzZWwucmVwbGFjZSggL14jLywgJycgKSBdO1xuXHRcdFx0XHRpZiAoIHJvd09iaiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBbIHJvd09iai5pZHggXTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gbmVlZCB0byBmYWxsIHRocm91Z2ggdG8galF1ZXJ5IGluIGNhc2UgdGhlcmUgaXMgRE9NIGlkIHRoYXRcblx0XHRcdFx0Ly8gbWF0Y2hlc1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNlbGVjdG9yIC0galF1ZXJ5IHNlbGVjdG9yIHN0cmluZywgYXJyYXkgb2Ygbm9kZXMgb3IgalF1ZXJ5IG9iamVjdC9cblx0XHRcdC8vIEFzIGpRdWVyeSdzIC5maWx0ZXIoKSBhbGxvd3MgalF1ZXJ5IG9iamVjdHMgdG8gYmUgcGFzc2VkIGluIGZpbHRlcixcblx0XHRcdC8vIGl0IGFsc28gYWxsb3dzIGFycmF5cywgc28gdGhpcyB3aWxsIGNvcGUgd2l0aCBhbGwgdGhyZWUgb3B0aW9uc1xuXHRcdFx0cmV0dXJuICQobm9kZXMpXG5cdFx0XHRcdC5maWx0ZXIoIHNlbCApXG5cdFx0XHRcdC5tYXAoIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fRFRfUm93SW5kZXg7XG5cdFx0XHRcdH0gKVxuXHRcdFx0XHQudG9BcnJheSgpO1xuXHRcdH07XG5cdFxuXHRcdHJldHVybiBfc2VsZWN0b3JfcnVuKCAncm93Jywgc2VsZWN0b3IsIHJ1biwgc2V0dGluZ3MsIG9wdHMgKTtcblx0fTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAncm93cygpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcblx0XHQvLyBhcmd1bWVudCBzaGlmdGluZ1xuXHRcdGlmICggc2VsZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHNlbGVjdG9yID0gJyc7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCAkLmlzUGxhaW5PYmplY3QoIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRvcHRzID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9ICcnO1xuXHRcdH1cblx0XG5cdFx0b3B0cyA9IF9zZWxlY3Rvcl9vcHRzKCBvcHRzICk7XG5cdFxuXHRcdHZhciBpbnN0ID0gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdHJldHVybiBfX3Jvd19zZWxlY3Rvciggc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzICk7XG5cdFx0fSwgMSApO1xuXHRcblx0XHQvLyBXYW50IGFyZ3VtZW50IHNoaWZ0aW5nIGhlcmUgYW5kIGluIF9fcm93X3NlbGVjdG9yP1xuXHRcdGluc3Quc2VsZWN0b3Iucm93cyA9IHNlbGVjdG9yO1xuXHRcdGluc3Quc2VsZWN0b3Iub3B0cyA9IG9wdHM7XG5cdFxuXHRcdHJldHVybiBpbnN0O1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAncm93cygpLm5vZGVzKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdyb3cnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCByb3cgKSB7XG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MuYW9EYXRhWyByb3cgXS5uVHIgfHwgdW5kZWZpbmVkO1xuXHRcdH0sIDEgKTtcblx0fSApO1xuXHRcblx0X2FwaV9yZWdpc3RlciggJ3Jvd3MoKS5kYXRhKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoIHRydWUsICdyb3dzJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93cyApIHtcblx0XHRcdHJldHVybiBfcGx1Y2tfb3JkZXIoIHNldHRpbmdzLmFvRGF0YSwgcm93cywgJ19hRGF0YScgKTtcblx0XHR9LCAxICk7XG5cdH0gKTtcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdyb3dzKCkuY2FjaGUoKScsICdyb3coKS5jYWNoZSgpJywgZnVuY3Rpb24gKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAncm93JywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93ICkge1xuXHRcdFx0dmFyIHIgPSBzZXR0aW5ncy5hb0RhdGFbIHJvdyBdO1xuXHRcdFx0cmV0dXJuIHR5cGUgPT09ICdzZWFyY2gnID8gci5fYUZpbHRlckRhdGEgOiByLl9hU29ydERhdGE7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAncm93cygpLmludmFsaWRhdGUoKScsICdyb3coKS5pbnZhbGlkYXRlKCknLCBmdW5jdGlvbiAoIHNyYyApIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3JvdycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdyApIHtcblx0XHRcdF9mbkludmFsaWRhdGUoIHNldHRpbmdzLCByb3csIHNyYyApO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3Jvd3MoKS5pbmRleGVzKCknLCAncm93KCkuaW5kZXgoKScsIGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3JvdycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdyApIHtcblx0XHRcdHJldHVybiByb3c7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAncm93cygpLmlkcygpJywgJ3JvdygpLmlkKCknLCBmdW5jdGlvbiAoIGhhc2ggKSB7XG5cdFx0dmFyIGEgPSBbXTtcblx0XHR2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcblx0XG5cdFx0Ly8gYGl0ZXJhdG9yYCB3aWxsIGRyb3AgdW5kZWZpbmVkIHZhbHVlcywgYnV0IGluIHRoaXMgY2FzZSB3ZSB3YW50IHRoZW1cblx0XHRmb3IgKCB2YXIgaT0wLCBpZW49Y29udGV4dC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdGZvciAoIHZhciBqPTAsIGplbj10aGlzW2ldLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xuXHRcdFx0XHR2YXIgaWQgPSBjb250ZXh0W2ldLnJvd0lkRm4oIGNvbnRleHRbaV0uYW9EYXRhWyB0aGlzW2ldW2pdIF0uX2FEYXRhICk7XG5cdFx0XHRcdGEucHVzaCggKGhhc2ggPT09IHRydWUgPyAnIycgOiAnJyApKyBpZCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG5ldyBfQXBpKCBjb250ZXh0LCBhICk7XG5cdH0gKTtcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdyb3dzKCkucmVtb3ZlKCknLCAncm93KCkucmVtb3ZlKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcblx0XHR0aGlzLml0ZXJhdG9yKCAncm93JywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93LCB0aGF0SWR4ICkge1xuXHRcdFx0dmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XG5cdFx0XHR2YXIgcm93RGF0YSA9IGRhdGFbIHJvdyBdO1xuXHRcdFx0dmFyIGksIGllbiwgaiwgamVuO1xuXHRcdFx0dmFyIGxvb3BSb3csIGxvb3BDZWxscztcblx0XG5cdFx0XHRkYXRhLnNwbGljZSggcm93LCAxICk7XG5cdFxuXHRcdFx0Ly8gVXBkYXRlIHRoZSBjYWNoZWQgaW5kZXhlc1xuXHRcdFx0Zm9yICggaT0wLCBpZW49ZGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0bG9vcFJvdyA9IGRhdGFbaV07XG5cdFx0XHRcdGxvb3BDZWxscyA9IGxvb3BSb3cuYW5DZWxscztcblx0XG5cdFx0XHRcdC8vIFJvd3Ncblx0XHRcdFx0aWYgKCBsb29wUm93Lm5UciAhPT0gbnVsbCApIHtcblx0XHRcdFx0XHRsb29wUm93Lm5Uci5fRFRfUm93SW5kZXggPSBpO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBDZWxsc1xuXHRcdFx0XHRpZiAoIGxvb3BDZWxscyAhPT0gbnVsbCApIHtcblx0XHRcdFx0XHRmb3IgKCBqPTAsIGplbj1sb29wQ2VsbHMubGVuZ3RoIDsgajxqZW4gOyBqKysgKSB7XG5cdFx0XHRcdFx0XHRsb29wQ2VsbHNbal0uX0RUX0NlbGxJbmRleC5yb3cgPSBpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIERlbGV0ZSBmcm9tIHRoZSBkaXNwbGF5IGFycmF5c1xuXHRcdFx0X2ZuRGVsZXRlSW5kZXgoIHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlciwgcm93ICk7XG5cdFx0XHRfZm5EZWxldGVJbmRleCggc2V0dGluZ3MuYWlEaXNwbGF5LCByb3cgKTtcblx0XHRcdF9mbkRlbGV0ZUluZGV4KCB0aGF0WyB0aGF0SWR4IF0sIHJvdywgZmFsc2UgKTsgLy8gbWFpbnRhaW4gbG9jYWwgaW5kZXhlc1xuXHRcblx0XHRcdC8vIENoZWNrIGZvciBhbiAnb3ZlcmZsb3cnIHRoZXkgY2FzZSBmb3IgZGlzcGxheWluZyB0aGUgdGFibGVcblx0XHRcdF9mbkxlbmd0aE92ZXJmbG93KCBzZXR0aW5ncyApO1xuXHRcblx0XHRcdC8vIFJlbW92ZSB0aGUgcm93J3MgSUQgcmVmZXJlbmNlIGlmIHRoZXJlIGlzIG9uZVxuXHRcdFx0dmFyIGlkID0gc2V0dGluZ3Mucm93SWRGbiggcm93RGF0YS5fYURhdGEgKTtcblx0XHRcdGlmICggaWQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZGVsZXRlIHNldHRpbmdzLmFJZHNbIGlkIF07XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcblx0XHR0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xuXHRcdFx0Zm9yICggdmFyIGk9MCwgaWVuPXNldHRpbmdzLmFvRGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0c2V0dGluZ3MuYW9EYXRhW2ldLmlkeCA9IGk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdyb3dzLmFkZCgpJywgZnVuY3Rpb24gKCByb3dzICkge1xuXHRcdHZhciBuZXdSb3dzID0gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdFx0dmFyIHJvdywgaSwgaWVuO1xuXHRcdFx0XHR2YXIgb3V0ID0gW107XG5cdFxuXHRcdFx0XHRmb3IgKCBpPTAsIGllbj1yb3dzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdHJvdyA9IHJvd3NbaV07XG5cdFxuXHRcdFx0XHRcdGlmICggcm93Lm5vZGVOYW1lICYmIHJvdy5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnVFInICkge1xuXHRcdFx0XHRcdFx0b3V0LnB1c2goIF9mbkFkZFRyKCBzZXR0aW5ncywgcm93IClbMF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRvdXQucHVzaCggX2ZuQWRkRGF0YSggc2V0dGluZ3MsIHJvdyApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gb3V0O1xuXHRcdFx0fSwgMSApO1xuXHRcblx0XHQvLyBSZXR1cm4gYW4gQXBpLnJvd3MoKSBleHRlbmRlZCBpbnN0YW5jZSwgc28gcm93cygpLm5vZGVzKCkgZXRjIGNhbiBiZSB1c2VkXG5cdFx0dmFyIG1vZFJvd3MgPSB0aGlzLnJvd3MoIC0xICk7XG5cdFx0bW9kUm93cy5wb3AoKTtcblx0XHQkLm1lcmdlKCBtb2RSb3dzLCBuZXdSb3dzICk7XG5cdFxuXHRcdHJldHVybiBtb2RSb3dzO1xuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAncm93KCknLCBmdW5jdGlvbiAoIHNlbGVjdG9yLCBvcHRzICkge1xuXHRcdHJldHVybiBfc2VsZWN0b3JfZmlyc3QoIHRoaXMucm93cyggc2VsZWN0b3IsIG9wdHMgKSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ3JvdygpLmRhdGEoKScsIGZ1bmN0aW9uICggZGF0YSApIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuXHRcblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdC8vIEdldFxuXHRcdFx0cmV0dXJuIGN0eC5sZW5ndGggJiYgdGhpcy5sZW5ndGggP1xuXHRcdFx0XHRjdHhbMF0uYW9EYXRhWyB0aGlzWzBdIF0uX2FEYXRhIDpcblx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdH1cblx0XG5cdFx0Ly8gU2V0XG5cdFx0Y3R4WzBdLmFvRGF0YVsgdGhpc1swXSBdLl9hRGF0YSA9IGRhdGE7XG5cdFxuXHRcdC8vIEF1dG9tYXRpY2FsbHkgaW52YWxpZGF0ZVxuXHRcdF9mbkludmFsaWRhdGUoIGN0eFswXSwgdGhpc1swXSwgJ2RhdGEnICk7XG5cdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ3JvdygpLm5vZGUoKScsIGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuXHRcblx0XHRyZXR1cm4gY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCA/XG5cdFx0XHRjdHhbMF0uYW9EYXRhWyB0aGlzWzBdIF0ublRyIHx8IG51bGwgOlxuXHRcdFx0bnVsbDtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdyb3cuYWRkKCknLCBmdW5jdGlvbiAoIHJvdyApIHtcblx0XHQvLyBBbGxvdyBhIGpRdWVyeSBvYmplY3QgdG8gYmUgcGFzc2VkIGluIC0gb25seSBhIHNpbmdsZSByb3cgaXMgYWRkZWQgZnJvbVxuXHRcdC8vIGl0IHRob3VnaCAtIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXRcblx0XHRpZiAoIHJvdyBpbnN0YW5jZW9mICQgJiYgcm93Lmxlbmd0aCApIHtcblx0XHRcdHJvdyA9IHJvd1swXTtcblx0XHR9XG5cdFxuXHRcdHZhciByb3dzID0gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdGlmICggcm93Lm5vZGVOYW1lICYmIHJvdy5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnVFInICkge1xuXHRcdFx0XHRyZXR1cm4gX2ZuQWRkVHIoIHNldHRpbmdzLCByb3cgKVswXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBfZm5BZGREYXRhKCBzZXR0aW5ncywgcm93ICk7XG5cdFx0fSApO1xuXHRcblx0XHQvLyBSZXR1cm4gYW4gQXBpLnJvd3MoKSBleHRlbmRlZCBpbnN0YW5jZSwgd2l0aCB0aGUgbmV3bHkgYWRkZWQgcm93IHNlbGVjdGVkXG5cdFx0cmV0dXJuIHRoaXMucm93KCByb3dzWzBdICk7XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0dmFyIF9fZGV0YWlsc19hZGQgPSBmdW5jdGlvbiAoIGN0eCwgcm93LCBkYXRhLCBrbGFzcyApXG5cdHtcblx0XHQvLyBDb252ZXJ0IHRvIGFycmF5IG9mIFRSIGVsZW1lbnRzXG5cdFx0dmFyIHJvd3MgPSBbXTtcblx0XHR2YXIgYWRkUm93ID0gZnVuY3Rpb24gKCByLCBrICkge1xuXHRcdFx0Ly8gUmVjdXJzaW9uIHRvIGFsbG93IGZvciBhcnJheXMgb2YgalF1ZXJ5IG9iamVjdHNcblx0XHRcdGlmICggJC5pc0FycmF5KCByICkgfHwgciBpbnN0YW5jZW9mICQgKSB7XG5cdFx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1yLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdGFkZFJvdyggcltpXSwgayApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBJZiB3ZSBnZXQgYSBUUiBlbGVtZW50LCB0aGVuIGp1c3QgYWRkIGl0IGRpcmVjdGx5IC0gdXAgdG8gdGhlIGRldlxuXHRcdFx0Ly8gdG8gYWRkIHRoZSBjb3JyZWN0IG51bWJlciBvZiBjb2x1bW5zIGV0Y1xuXHRcdFx0aWYgKCByLm5vZGVOYW1lICYmIHIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RyJyApIHtcblx0XHRcdFx0cm93cy5wdXNoKCByICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGNyZWF0ZSBhIHJvdyB3aXRoIGEgd3JhcHBlclxuXHRcdFx0XHR2YXIgY3JlYXRlZCA9ICQoJzx0cj48dGQvPjwvdHI+JykuYWRkQ2xhc3MoIGsgKTtcblx0XHRcdFx0JCgndGQnLCBjcmVhdGVkKVxuXHRcdFx0XHRcdC5hZGRDbGFzcyggayApXG5cdFx0XHRcdFx0Lmh0bWwoIHIgKVxuXHRcdFx0XHRcdFswXS5jb2xTcGFuID0gX2ZuVmlzYmxlQ29sdW1ucyggY3R4ICk7XG5cdFxuXHRcdFx0XHRyb3dzLnB1c2goIGNyZWF0ZWRbMF0gKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcblx0XHRhZGRSb3coIGRhdGEsIGtsYXNzICk7XG5cdFxuXHRcdGlmICggcm93Ll9kZXRhaWxzICkge1xuXHRcdFx0cm93Ll9kZXRhaWxzLnJlbW92ZSgpO1xuXHRcdH1cblx0XG5cdFx0cm93Ll9kZXRhaWxzID0gJChyb3dzKTtcblx0XG5cdFx0Ly8gSWYgdGhlIGNoaWxkcmVuIHdlcmUgYWxyZWFkeSBzaG93biwgdGhhdCBzdGF0ZSBzaG91bGQgYmUgcmV0YWluZWRcblx0XHRpZiAoIHJvdy5fZGV0YWlsc1Nob3cgKSB7XG5cdFx0XHRyb3cuX2RldGFpbHMuaW5zZXJ0QWZ0ZXIoIHJvdy5uVHIgKTtcblx0XHR9XG5cdH07XG5cdFxuXHRcblx0dmFyIF9fZGV0YWlsc19yZW1vdmUgPSBmdW5jdGlvbiAoIGFwaSwgaWR4IClcblx0e1xuXHRcdHZhciBjdHggPSBhcGkuY29udGV4dDtcblx0XG5cdFx0aWYgKCBjdHgubGVuZ3RoICkge1xuXHRcdFx0dmFyIHJvdyA9IGN0eFswXS5hb0RhdGFbIGlkeCAhPT0gdW5kZWZpbmVkID8gaWR4IDogYXBpWzBdIF07XG5cdFxuXHRcdFx0aWYgKCByb3cgJiYgcm93Ll9kZXRhaWxzICkge1xuXHRcdFx0XHRyb3cuX2RldGFpbHMucmVtb3ZlKCk7XG5cdFxuXHRcdFx0XHRyb3cuX2RldGFpbHNTaG93ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRyb3cuX2RldGFpbHMgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0XG5cdHZhciBfX2RldGFpbHNfZGlzcGxheSA9IGZ1bmN0aW9uICggYXBpLCBzaG93ICkge1xuXHRcdHZhciBjdHggPSBhcGkuY29udGV4dDtcblx0XG5cdFx0aWYgKCBjdHgubGVuZ3RoICYmIGFwaS5sZW5ndGggKSB7XG5cdFx0XHR2YXIgcm93ID0gY3R4WzBdLmFvRGF0YVsgYXBpWzBdIF07XG5cdFxuXHRcdFx0aWYgKCByb3cuX2RldGFpbHMgKSB7XG5cdFx0XHRcdHJvdy5fZGV0YWlsc1Nob3cgPSBzaG93O1xuXHRcblx0XHRcdFx0aWYgKCBzaG93ICkge1xuXHRcdFx0XHRcdHJvdy5fZGV0YWlscy5pbnNlcnRBZnRlciggcm93Lm5UciApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHJvdy5fZGV0YWlscy5kZXRhY2goKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0X19kZXRhaWxzX2V2ZW50cyggY3R4WzBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0XG5cdHZhciBfX2RldGFpbHNfZXZlbnRzID0gZnVuY3Rpb24gKCBzZXR0aW5ncyApXG5cdHtcblx0XHR2YXIgYXBpID0gbmV3IF9BcGkoIHNldHRpbmdzICk7XG5cdFx0dmFyIG5hbWVzcGFjZSA9ICcuZHQuRFRfZGV0YWlscyc7XG5cdFx0dmFyIGRyYXdFdmVudCA9ICdkcmF3JytuYW1lc3BhY2U7XG5cdFx0dmFyIGNvbHZpc0V2ZW50ID0gJ2NvbHVtbi12aXNpYmlsaXR5JytuYW1lc3BhY2U7XG5cdFx0dmFyIGRlc3Ryb3lFdmVudCA9ICdkZXN0cm95JytuYW1lc3BhY2U7XG5cdFx0dmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XG5cdFxuXHRcdGFwaS5vZmYoIGRyYXdFdmVudCArJyAnKyBjb2x2aXNFdmVudCArJyAnKyBkZXN0cm95RXZlbnQgKTtcblx0XG5cdFx0aWYgKCBfcGx1Y2soIGRhdGEsICdfZGV0YWlscycgKS5sZW5ndGggPiAwICkge1xuXHRcdFx0Ly8gT24gZWFjaCBkcmF3LCBpbnNlcnQgdGhlIHJlcXVpcmVkIGVsZW1lbnRzIGludG8gdGhlIGRvY3VtZW50XG5cdFx0XHRhcGkub24oIGRyYXdFdmVudCwgZnVuY3Rpb24gKCBlLCBjdHggKSB7XG5cdFx0XHRcdGlmICggc2V0dGluZ3MgIT09IGN0eCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGFwaS5yb3dzKCB7cGFnZTonY3VycmVudCd9ICkuZXEoMCkuZWFjaCggZnVuY3Rpb24gKGlkeCkge1xuXHRcdFx0XHRcdC8vIEludGVybmFsIGRhdGEgZ3JhYlxuXHRcdFx0XHRcdHZhciByb3cgPSBkYXRhWyBpZHggXTtcblx0XG5cdFx0XHRcdFx0aWYgKCByb3cuX2RldGFpbHNTaG93ICkge1xuXHRcdFx0XHRcdFx0cm93Ll9kZXRhaWxzLmluc2VydEFmdGVyKCByb3cublRyICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFxuXHRcdFx0Ly8gQ29sdW1uIHZpc2liaWxpdHkgY2hhbmdlIC0gdXBkYXRlIHRoZSBjb2xzcGFuXG5cdFx0XHRhcGkub24oIGNvbHZpc0V2ZW50LCBmdW5jdGlvbiAoIGUsIGN0eCwgaWR4LCB2aXMgKSB7XG5cdFx0XHRcdGlmICggc2V0dGluZ3MgIT09IGN0eCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFVwZGF0ZSB0aGUgY29sc3BhbiBmb3IgdGhlIGRldGFpbHMgcm93cyAobm90ZSwgb25seSBpZiBpdCBhbHJlYWR5IGhhc1xuXHRcdFx0XHQvLyBhIGNvbHNwYW4pXG5cdFx0XHRcdHZhciByb3csIHZpc2libGUgPSBfZm5WaXNibGVDb2x1bW5zKCBjdHggKTtcblx0XG5cdFx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1kYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdHJvdyA9IGRhdGFbaV07XG5cdFxuXHRcdFx0XHRcdGlmICggcm93Ll9kZXRhaWxzICkge1xuXHRcdFx0XHRcdFx0cm93Ll9kZXRhaWxzLmNoaWxkcmVuKCd0ZFtjb2xzcGFuXScpLmF0dHIoJ2NvbHNwYW4nLCB2aXNpYmxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFxuXHRcdFx0Ly8gVGFibGUgZGVzdHJveWVkIC0gbnVrZSBhbnkgY2hpbGQgcm93c1xuXHRcdFx0YXBpLm9uKCBkZXN0cm95RXZlbnQsIGZ1bmN0aW9uICggZSwgY3R4ICkge1xuXHRcdFx0XHRpZiAoIHNldHRpbmdzICE9PSBjdHggKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49ZGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbaV0uX2RldGFpbHMgKSB7XG5cdFx0XHRcdFx0XHRfX2RldGFpbHNfcmVtb3ZlKCBhcGksIGkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdH07XG5cdFxuXHQvLyBTdHJpbmdzIGZvciB0aGUgbWV0aG9kIG5hbWVzIHRvIGhlbHAgbWluaWZpY2F0aW9uXG5cdHZhciBfZW1wID0gJyc7XG5cdHZhciBfY2hpbGRfb2JqID0gX2VtcCsncm93KCkuY2hpbGQnO1xuXHR2YXIgX2NoaWxkX210aCA9IF9jaGlsZF9vYmorJygpJztcblx0XG5cdC8vIGRhdGEgY2FuIGJlOlxuXHQvLyAgdHJcblx0Ly8gIHN0cmluZ1xuXHQvLyAgalF1ZXJ5IG9yIGFycmF5IG9mIGFueSBvZiB0aGUgYWJvdmVcblx0X2FwaV9yZWdpc3RlciggX2NoaWxkX210aCwgZnVuY3Rpb24gKCBkYXRhLCBrbGFzcyApIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuXHRcblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdC8vIGdldFxuXHRcdFx0cmV0dXJuIGN0eC5sZW5ndGggJiYgdGhpcy5sZW5ndGggP1xuXHRcdFx0XHRjdHhbMF0uYW9EYXRhWyB0aGlzWzBdIF0uX2RldGFpbHMgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBkYXRhID09PSB0cnVlICkge1xuXHRcdFx0Ly8gc2hvd1xuXHRcdFx0dGhpcy5jaGlsZC5zaG93KCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBkYXRhID09PSBmYWxzZSApIHtcblx0XHRcdC8vIHJlbW92ZVxuXHRcdFx0X19kZXRhaWxzX3JlbW92ZSggdGhpcyApO1xuXHRcdH1cblx0XHRlbHNlIGlmICggY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCApIHtcblx0XHRcdC8vIHNldFxuXHRcdFx0X19kZXRhaWxzX2FkZCggY3R4WzBdLCBjdHhbMF0uYW9EYXRhWyB0aGlzWzBdIF0sIGRhdGEsIGtsYXNzICk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoIFtcblx0XHRfY2hpbGRfb2JqKycuc2hvdygpJyxcblx0XHRfY2hpbGRfbXRoKycuc2hvdygpJyAvLyBvbmx5IHdoZW4gYGNoaWxkKClgIHdhcyBjYWxsZWQgd2l0aCBwYXJhbWV0ZXJzICh3aXRob3V0XG5cdF0sIGZ1bmN0aW9uICggc2hvdyApIHsgICAvLyBpdCByZXR1cm5zIGFuIG9iamVjdCBhbmQgdGhpcyBtZXRob2QgaXMgbm90IGV4ZWN1dGVkKVxuXHRcdF9fZGV0YWlsc19kaXNwbGF5KCB0aGlzLCB0cnVlICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCBbXG5cdFx0X2NoaWxkX29iaisnLmhpZGUoKScsXG5cdFx0X2NoaWxkX210aCsnLmhpZGUoKScgLy8gb25seSB3aGVuIGBjaGlsZCgpYCB3YXMgY2FsbGVkIHdpdGggcGFyYW1ldGVycyAod2l0aG91dFxuXHRdLCBmdW5jdGlvbiAoKSB7ICAgICAgICAgLy8gaXQgcmV0dXJucyBhbiBvYmplY3QgYW5kIHRoaXMgbWV0aG9kIGlzIG5vdCBleGVjdXRlZClcblx0XHRfX2RldGFpbHNfZGlzcGxheSggdGhpcywgZmFsc2UgKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoIFtcblx0XHRfY2hpbGRfb2JqKycucmVtb3ZlKCknLFxuXHRcdF9jaGlsZF9tdGgrJy5yZW1vdmUoKScgLy8gb25seSB3aGVuIGBjaGlsZCgpYCB3YXMgY2FsbGVkIHdpdGggcGFyYW1ldGVycyAod2l0aG91dFxuXHRdLCBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAvLyBpdCByZXR1cm5zIGFuIG9iamVjdCBhbmQgdGhpcyBtZXRob2QgaXMgbm90IGV4ZWN1dGVkKVxuXHRcdF9fZGV0YWlsc19yZW1vdmUoIHRoaXMgKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoIF9jaGlsZF9vYmorJy5pc1Nob3duKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblx0XG5cdFx0aWYgKCBjdHgubGVuZ3RoICYmIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0Ly8gX2RldGFpbHNTaG93biBhcyBmYWxzZSBvciB1bmRlZmluZWQgd2lsbCBmYWxsIHRocm91Z2ggdG8gcmV0dXJuIGZhbHNlXG5cdFx0XHRyZXR1cm4gY3R4WzBdLmFvRGF0YVsgdGhpc1swXSBdLl9kZXRhaWxzU2hvdyB8fCBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9ICk7XG5cdFxuXHRcblx0XG5cdC8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuXHQgKiBDb2x1bW5zXG5cdCAqXG5cdCAqIHtpbnRlZ2VyfSAgICAgICAgICAgLSBjb2x1bW4gaW5kZXggKD49MCBjb3VudCBmcm9tIGxlZnQsIDwwIGNvdW50IGZyb20gcmlnaHQpXG5cdCAqIFwie2ludGVnZXJ9OnZpc0lkeFwiICAtIHZpc2libGUgY29sdW1uIGluZGV4IChpLmUuIHRyYW5zbGF0ZSB0byBjb2x1bW4gaW5kZXgpICAoPj0wIGNvdW50IGZyb20gbGVmdCwgPDAgY291bnQgZnJvbSByaWdodClcblx0ICogXCJ7aW50ZWdlcn06dmlzaWJsZVwiIC0gYWxpYXMgZm9yIHtpbnRlZ2VyfTp2aXNJZHggICg+PTAgY291bnQgZnJvbSBsZWZ0LCA8MCBjb3VudCBmcm9tIHJpZ2h0KVxuXHQgKiBcIntzdHJpbmd9Om5hbWVcIiAgICAgLSBjb2x1bW4gbmFtZVxuXHQgKiBcIntzdHJpbmd9XCIgICAgICAgICAgLSBqUXVlcnkgc2VsZWN0b3Igb24gY29sdW1uIGhlYWRlciBub2Rlc1xuXHQgKlxuXHQgKi9cblx0XG5cdC8vIGNhbiBiZSBhbiBhcnJheSBvZiB0aGVzZSBpdGVtcywgY29tbWEgc2VwYXJhdGVkIGxpc3QsIG9yIGFuIGFycmF5IG9mIGNvbW1hXG5cdC8vIHNlcGFyYXRlZCBsaXN0c1xuXHRcblx0dmFyIF9fcmVfY29sdW1uX3NlbGVjdG9yID0gL14oLispOihuYW1lfHZpc0lkeHx2aXNpYmxlKSQvO1xuXHRcblx0XG5cdC8vIHIxIGFuZCByMiBhcmUgcmVkdW5kYW50IC0gYnV0IGl0IG1lYW5zIHRoYXQgdGhlIHBhcmFtZXRlcnMgbWF0Y2ggZm9yIHRoZVxuXHQvLyBpdGVyYXRvciBjYWxsYmFjayBpbiBjb2x1bW5zKCkuZGF0YSgpXG5cdHZhciBfX2NvbHVtbkRhdGEgPSBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4sIHIxLCByMiwgcm93cyApIHtcblx0XHR2YXIgYSA9IFtdO1xuXHRcdGZvciAoIHZhciByb3c9MCwgaWVuPXJvd3MubGVuZ3RoIDsgcm93PGllbiA7IHJvdysrICkge1xuXHRcdFx0YS5wdXNoKCBfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIHJvd3Nbcm93XSwgY29sdW1uICkgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGE7XG5cdH07XG5cdFxuXHRcblx0dmFyIF9fY29sdW1uX3NlbGVjdG9yID0gZnVuY3Rpb24gKCBzZXR0aW5ncywgc2VsZWN0b3IsIG9wdHMgKVxuXHR7XG5cdFx0dmFyXG5cdFx0XHRjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLFxuXHRcdFx0bmFtZXMgPSBfcGx1Y2soIGNvbHVtbnMsICdzTmFtZScgKSxcblx0XHRcdG5vZGVzID0gX3BsdWNrKCBjb2x1bW5zLCAnblRoJyApO1xuXHRcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24gKCBzICkge1xuXHRcdFx0dmFyIHNlbEludCA9IF9pbnRWYWwoIHMgKTtcblx0XG5cdFx0XHQvLyBTZWxlY3RvciAtIGFsbFxuXHRcdFx0aWYgKCBzID09PSAnJyApIHtcblx0XHRcdFx0cmV0dXJuIF9yYW5nZSggY29sdW1ucy5sZW5ndGggKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gU2VsZWN0b3IgLSBpbmRleFxuXHRcdFx0aWYgKCBzZWxJbnQgIT09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBbIHNlbEludCA+PSAwID9cblx0XHRcdFx0XHRzZWxJbnQgOiAvLyBDb3VudCBmcm9tIGxlZnRcblx0XHRcdFx0XHRjb2x1bW5zLmxlbmd0aCArIHNlbEludCAvLyBDb3VudCBmcm9tIHJpZ2h0ICgrIGJlY2F1c2UgaXRzIGEgbmVnYXRpdmUgdmFsdWUpXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFNlbGVjdG9yID0gZnVuY3Rpb25cblx0XHRcdGlmICggdHlwZW9mIHMgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRcdHZhciByb3dzID0gX3NlbGVjdG9yX3Jvd19pbmRleGVzKCBzZXR0aW5ncywgb3B0cyApO1xuXHRcblx0XHRcdFx0cmV0dXJuICQubWFwKCBjb2x1bW5zLCBmdW5jdGlvbiAoY29sLCBpZHgpIHtcblx0XHRcdFx0XHRyZXR1cm4gcyhcblx0XHRcdFx0XHRcdFx0aWR4LFxuXHRcdFx0XHRcdFx0XHRfX2NvbHVtbkRhdGEoIHNldHRpbmdzLCBpZHgsIDAsIDAsIHJvd3MgKSxcblx0XHRcdFx0XHRcdFx0bm9kZXNbIGlkeCBdXG5cdFx0XHRcdFx0XHQpID8gaWR4IDogbnVsbDtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIGpRdWVyeSBvciBzdHJpbmcgc2VsZWN0b3Jcblx0XHRcdHZhciBtYXRjaCA9IHR5cGVvZiBzID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdHMubWF0Y2goIF9fcmVfY29sdW1uX3NlbGVjdG9yICkgOlxuXHRcdFx0XHQnJztcblx0XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHRzd2l0Y2goIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdGNhc2UgJ3Zpc0lkeCc6XG5cdFx0XHRcdFx0Y2FzZSAndmlzaWJsZSc6XG5cdFx0XHRcdFx0XHR2YXIgaWR4ID0gcGFyc2VJbnQoIG1hdGNoWzFdLCAxMCApO1xuXHRcdFx0XHRcdFx0Ly8gVmlzaWJsZSBpbmRleCBnaXZlbiwgY29udmVydCB0byBjb2x1bW4gaW5kZXhcblx0XHRcdFx0XHRcdGlmICggaWR4IDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Ly8gQ291bnRpbmcgZnJvbSB0aGUgcmlnaHRcblx0XHRcdFx0XHRcdFx0dmFyIHZpc0NvbHVtbnMgPSAkLm1hcCggY29sdW1ucywgZnVuY3Rpb24gKGNvbCxpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbC5iVmlzaWJsZSA/IGkgOiBudWxsO1xuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIHZpc0NvbHVtbnNbIHZpc0NvbHVtbnMubGVuZ3RoICsgaWR4IF0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIENvdW50aW5nIGZyb20gdGhlIGxlZnRcblx0XHRcdFx0XHRcdHJldHVybiBbIF9mblZpc2libGVUb0NvbHVtbkluZGV4KCBzZXR0aW5ncywgaWR4ICkgXTtcblx0XG5cdFx0XHRcdFx0Y2FzZSAnbmFtZSc6XG5cdFx0XHRcdFx0XHQvLyBtYXRjaCBieSBuYW1lLiBgbmFtZXNgIGlzIGNvbHVtbiBpbmRleCBjb21wbGV0ZSBhbmQgaW4gb3JkZXJcblx0XHRcdFx0XHRcdHJldHVybiAkLm1hcCggbmFtZXMsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBuYW1lID09PSBtYXRjaFsxXSA/IGkgOiBudWxsO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8galF1ZXJ5IHNlbGVjdG9yIG9uIHRoZSBUSCBlbGVtZW50cyBmb3IgdGhlIGNvbHVtbnNcblx0XHRcdFx0cmV0dXJuICQoIG5vZGVzIClcblx0XHRcdFx0XHQuZmlsdGVyKCBzIClcblx0XHRcdFx0XHQubWFwKCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJC5pbkFycmF5KCB0aGlzLCBub2RlcyApOyAvLyBgbm9kZXNgIGlzIGNvbHVtbiBpbmRleCBjb21wbGV0ZSBhbmQgaW4gb3JkZXJcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHQudG9BcnJheSgpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdHJldHVybiBfc2VsZWN0b3JfcnVuKCAnY29sdW1uJywgc2VsZWN0b3IsIHJ1biwgc2V0dGluZ3MsIG9wdHMgKTtcblx0fTtcblx0XG5cdFxuXHR2YXIgX19zZXRDb2x1bW5WaXMgPSBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4sIHZpcywgcmVjYWxjICkge1xuXHRcdHZhclxuXHRcdFx0Y29scyA9IHNldHRpbmdzLmFvQ29sdW1ucyxcblx0XHRcdGNvbCAgPSBjb2xzWyBjb2x1bW4gXSxcblx0XHRcdGRhdGEgPSBzZXR0aW5ncy5hb0RhdGEsXG5cdFx0XHRyb3csIGNlbGxzLCBpLCBpZW4sIHRyO1xuXHRcblx0XHQvLyBHZXRcblx0XHRpZiAoIHZpcyA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGNvbC5iVmlzaWJsZTtcblx0XHR9XG5cdFxuXHRcdC8vIFNldFxuXHRcdC8vIE5vIGNoYW5nZVxuXHRcdGlmICggY29sLmJWaXNpYmxlID09PSB2aXMgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHRpZiAoIHZpcyApIHtcblx0XHRcdC8vIEluc2VydCBjb2x1bW5cblx0XHRcdC8vIE5lZWQgdG8gZGVjaWRlIGlmIHdlIHNob3VsZCB1c2UgYXBwZW5kQ2hpbGQgb3IgaW5zZXJ0QmVmb3JlXG5cdFx0XHR2YXIgaW5zZXJ0QmVmb3JlID0gJC5pbkFycmF5KCB0cnVlLCBfcGx1Y2soY29scywgJ2JWaXNpYmxlJyksIGNvbHVtbisxICk7XG5cdFxuXHRcdFx0Zm9yICggaT0wLCBpZW49ZGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHRcdFx0dHIgPSBkYXRhW2ldLm5Ucjtcblx0XHRcdFx0Y2VsbHMgPSBkYXRhW2ldLmFuQ2VsbHM7XG5cdFxuXHRcdFx0XHRpZiAoIHRyICkge1xuXHRcdFx0XHRcdC8vIGluc2VydEJlZm9yZSBjYW4gYWN0IGxpa2UgYXBwZW5kQ2hpbGQgaWYgMm5kIGFyZyBpcyBudWxsXG5cdFx0XHRcdFx0dHIuaW5zZXJ0QmVmb3JlKCBjZWxsc1sgY29sdW1uIF0sIGNlbGxzWyBpbnNlcnRCZWZvcmUgXSB8fCBudWxsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyBSZW1vdmUgY29sdW1uXG5cdFx0XHQkKCBfcGx1Y2soIHNldHRpbmdzLmFvRGF0YSwgJ2FuQ2VsbHMnLCBjb2x1bW4gKSApLmRldGFjaCgpO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ29tbW9uIGFjdGlvbnNcblx0XHRjb2wuYlZpc2libGUgPSB2aXM7XG5cdFx0X2ZuRHJhd0hlYWQoIHNldHRpbmdzLCBzZXR0aW5ncy5hb0hlYWRlciApO1xuXHRcdF9mbkRyYXdIZWFkKCBzZXR0aW5ncywgc2V0dGluZ3MuYW9Gb290ZXIgKTtcblx0XG5cdFx0aWYgKCByZWNhbGMgPT09IHVuZGVmaW5lZCB8fCByZWNhbGMgKSB7XG5cdFx0XHQvLyBBdXRvbWF0aWNhbGx5IGFkanVzdCBjb2x1bW4gc2l6aW5nXG5cdFx0XHRfZm5BZGp1c3RDb2x1bW5TaXppbmcoIHNldHRpbmdzICk7XG5cdFxuXHRcdFx0Ly8gUmVhbGlnbiBjb2x1bW5zIGZvciBzY3JvbGxpbmdcblx0XHRcdGlmICggc2V0dGluZ3Mub1Njcm9sbC5zWCB8fCBzZXR0aW5ncy5vU2Nyb2xsLnNZICkge1xuXHRcdFx0XHRfZm5TY3JvbGxEcmF3KCBzZXR0aW5ncyApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgbnVsbCwgJ2NvbHVtbi12aXNpYmlsaXR5JywgW3NldHRpbmdzLCBjb2x1bW4sIHZpcywgcmVjYWxjXSApO1xuXHRcblx0XHRfZm5TYXZlU3RhdGUoIHNldHRpbmdzICk7XG5cdH07XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ2NvbHVtbnMoKScsIGZ1bmN0aW9uICggc2VsZWN0b3IsIG9wdHMgKSB7XG5cdFx0Ly8gYXJndW1lbnQgc2hpZnRpbmdcblx0XHRpZiAoIHNlbGVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRzZWxlY3RvciA9ICcnO1xuXHRcdH1cblx0XHRlbHNlIGlmICggJC5pc1BsYWluT2JqZWN0KCBzZWxlY3RvciApICkge1xuXHRcdFx0b3B0cyA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSAnJztcblx0XHR9XG5cdFxuXHRcdG9wdHMgPSBfc2VsZWN0b3Jfb3B0cyggb3B0cyApO1xuXHRcblx0XHR2YXIgaW5zdCA9IHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRyZXR1cm4gX19jb2x1bW5fc2VsZWN0b3IoIHNldHRpbmdzLCBzZWxlY3Rvciwgb3B0cyApO1xuXHRcdH0sIDEgKTtcblx0XG5cdFx0Ly8gV2FudCBhcmd1bWVudCBzaGlmdGluZyBoZXJlIGFuZCBpbiBfcm93X3NlbGVjdG9yP1xuXHRcdGluc3Quc2VsZWN0b3IuY29scyA9IHNlbGVjdG9yO1xuXHRcdGluc3Quc2VsZWN0b3Iub3B0cyA9IG9wdHM7XG5cdFxuXHRcdHJldHVybiBpbnN0O1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmhlYWRlcigpJywgJ2NvbHVtbigpLmhlYWRlcigpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NvbHVtbicsIGZ1bmN0aW9uICggc2V0dGluZ3MsIGNvbHVtbiApIHtcblx0XHRcdHJldHVybiBzZXR0aW5ncy5hb0NvbHVtbnNbY29sdW1uXS5uVGg7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmZvb3RlcigpJywgJ2NvbHVtbigpLmZvb3RlcigpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NvbHVtbicsIGZ1bmN0aW9uICggc2V0dGluZ3MsIGNvbHVtbiApIHtcblx0XHRcdHJldHVybiBzZXR0aW5ncy5hb0NvbHVtbnNbY29sdW1uXS5uVGY7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmRhdGEoKScsICdjb2x1bW4oKS5kYXRhKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjb2x1bW4tcm93cycsIF9fY29sdW1uRGF0YSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmRhdGFTcmMoKScsICdjb2x1bW4oKS5kYXRhU3JjKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjb2x1bW4nLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4gKSB7XG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbHVtbl0ubURhdGE7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmNhY2hlKCknLCAnY29sdW1uKCkuY2FjaGUoKScsIGZ1bmN0aW9uICggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NvbHVtbi1yb3dzJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uLCBpLCBqLCByb3dzICkge1xuXHRcdFx0cmV0dXJuIF9wbHVja19vcmRlciggc2V0dGluZ3MuYW9EYXRhLCByb3dzLFxuXHRcdFx0XHR0eXBlID09PSAnc2VhcmNoJyA/ICdfYUZpbHRlckRhdGEnIDogJ19hU29ydERhdGEnLCBjb2x1bW5cblx0XHRcdCk7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLm5vZGVzKCknLCAnY29sdW1uKCkubm9kZXMoKScsIGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NvbHVtbi1yb3dzJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uLCBpLCBqLCByb3dzICkge1xuXHRcdFx0cmV0dXJuIF9wbHVja19vcmRlciggc2V0dGluZ3MuYW9EYXRhLCByb3dzLCAnYW5DZWxscycsIGNvbHVtbiApIDtcblx0XHR9LCAxICk7XG5cdH0gKTtcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjb2x1bW5zKCkudmlzaWJsZSgpJywgJ2NvbHVtbigpLnZpc2libGUoKScsIGZ1bmN0aW9uICggdmlzLCBjYWxjICkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY29sdW1uJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uICkge1xuXHRcdFx0aWYgKCB2aXMgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHNldHRpbmdzLmFvQ29sdW1uc1sgY29sdW1uIF0uYlZpc2libGU7XG5cdFx0XHR9IC8vIGVsc2Vcblx0XHRcdF9fc2V0Q29sdW1uVmlzKCBzZXR0aW5ncywgY29sdW1uLCB2aXMsIGNhbGMgKTtcblx0XHR9ICk7XG5cdH0gKTtcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjb2x1bW5zKCkuaW5kZXhlcygpJywgJ2NvbHVtbigpLmluZGV4KCknLCBmdW5jdGlvbiAoIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjb2x1bW4nLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4gKSB7XG5cdFx0XHRyZXR1cm4gdHlwZSA9PT0gJ3Zpc2libGUnID9cblx0XHRcdFx0X2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUoIHNldHRpbmdzLCBjb2x1bW4gKSA6XG5cdFx0XHRcdGNvbHVtbjtcblx0XHR9LCAxICk7XG5cdH0gKTtcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdjb2x1bW5zLmFkanVzdCgpJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xuXHRcdFx0X2ZuQWRqdXN0Q29sdW1uU2l6aW5nKCBzZXR0aW5ncyApO1xuXHRcdH0sIDEgKTtcblx0fSApO1xuXHRcblx0X2FwaV9yZWdpc3RlciggJ2NvbHVtbi5pbmRleCgpJywgZnVuY3Rpb24gKCB0eXBlLCBpZHggKSB7XG5cdFx0aWYgKCB0aGlzLmNvbnRleHQubGVuZ3RoICE9PSAwICkge1xuXHRcdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dFswXTtcblx0XG5cdFx0XHRpZiAoIHR5cGUgPT09ICdmcm9tVmlzaWJsZScgfHwgdHlwZSA9PT0gJ3RvRGF0YScgKSB7XG5cdFx0XHRcdHJldHVybiBfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCggY3R4LCBpZHggKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCB0eXBlID09PSAnZnJvbURhdGEnIHx8IHR5cGUgPT09ICd0b1Zpc2libGUnICkge1xuXHRcdFx0XHRyZXR1cm4gX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUoIGN0eCwgaWR4ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnY29sdW1uKCknLCBmdW5jdGlvbiAoIHNlbGVjdG9yLCBvcHRzICkge1xuXHRcdHJldHVybiBfc2VsZWN0b3JfZmlyc3QoIHRoaXMuY29sdW1ucyggc2VsZWN0b3IsIG9wdHMgKSApO1xuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHR2YXIgX19jZWxsX3NlbGVjdG9yID0gZnVuY3Rpb24gKCBzZXR0aW5ncywgc2VsZWN0b3IsIG9wdHMgKVxuXHR7XG5cdFx0dmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XG5cdFx0dmFyIHJvd3MgPSBfc2VsZWN0b3Jfcm93X2luZGV4ZXMoIHNldHRpbmdzLCBvcHRzICk7XG5cdFx0dmFyIGNlbGxzID0gX3JlbW92ZUVtcHR5KCBfcGx1Y2tfb3JkZXIoIGRhdGEsIHJvd3MsICdhbkNlbGxzJyApICk7XG5cdFx0dmFyIGFsbENlbGxzID0gJCggW10uY29uY2F0LmFwcGx5KFtdLCBjZWxscykgKTtcblx0XHR2YXIgcm93O1xuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLmxlbmd0aDtcblx0XHR2YXIgYSwgaSwgaWVuLCBqLCBvLCBob3N0O1xuXHRcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24gKCBzICkge1xuXHRcdFx0dmFyIGZuU2VsZWN0b3IgPSB0eXBlb2YgcyA9PT0gJ2Z1bmN0aW9uJztcblx0XG5cdFx0XHRpZiAoIHMgPT09IG51bGwgfHwgcyA9PT0gdW5kZWZpbmVkIHx8IGZuU2VsZWN0b3IgKSB7XG5cdFx0XHRcdC8vIEFsbCBjZWxscyBhbmQgZnVuY3Rpb24gc2VsZWN0b3JzXG5cdFx0XHRcdGEgPSBbXTtcblx0XG5cdFx0XHRcdGZvciAoIGk9MCwgaWVuPXJvd3MubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdFx0XHRcdFx0cm93ID0gcm93c1tpXTtcblx0XG5cdFx0XHRcdFx0Zm9yICggaj0wIDsgajxjb2x1bW5zIDsgaisrICkge1xuXHRcdFx0XHRcdFx0byA9IHtcblx0XHRcdFx0XHRcdFx0cm93OiByb3csXG5cdFx0XHRcdFx0XHRcdGNvbHVtbjogalxuXHRcdFx0XHRcdFx0fTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIGZuU2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlbGVjdG9yIC0gZnVuY3Rpb25cblx0XHRcdFx0XHRcdFx0aG9zdCA9IGRhdGFbIHJvdyBdO1xuXHRcblx0XHRcdFx0XHRcdFx0aWYgKCBzKCBvLCBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgcm93LCBqKSwgaG9zdC5hbkNlbGxzID8gaG9zdC5hbkNlbGxzW2pdIDogbnVsbCApICkge1xuXHRcdFx0XHRcdFx0XHRcdGEucHVzaCggbyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gU2VsZWN0b3IgLSBhbGxcblx0XHRcdFx0XHRcdFx0YS5wdXNoKCBvICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gU2VsZWN0b3IgLSBpbmRleFxuXHRcdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIHMgKSApIHtcblx0XHRcdFx0cmV0dXJuIFtzXTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTZWxlY3RvciAtIGpRdWVyeSBmaWx0ZXJlZCBjZWxsc1xuXHRcdFx0cmV0dXJuIGFsbENlbGxzXG5cdFx0XHRcdC5maWx0ZXIoIHMgKVxuXHRcdFx0XHQubWFwKCBmdW5jdGlvbiAoaSwgZWwpIHtcblx0XHRcdFx0XHRyZXR1cm4geyAvLyB1c2UgYSBuZXcgb2JqZWN0LCBpbiBjYXNlIHNvbWVvbmUgY2hhbmdlcyB0aGUgdmFsdWVzXG5cdFx0XHRcdFx0XHRyb3c6ICAgIGVsLl9EVF9DZWxsSW5kZXgucm93LFxuXHRcdFx0XHRcdFx0Y29sdW1uOiBlbC5fRFRfQ2VsbEluZGV4LmNvbHVtblxuXHQgXHRcdFx0XHR9O1xuXHRcdFx0XHR9IClcblx0XHRcdFx0LnRvQXJyYXkoKTtcblx0XHR9O1xuXHRcblx0XHRyZXR1cm4gX3NlbGVjdG9yX3J1biggJ2NlbGwnLCBzZWxlY3RvciwgcnVuLCBzZXR0aW5ncywgb3B0cyApO1xuXHR9O1xuXHRcblx0XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ2NlbGxzKCknLCBmdW5jdGlvbiAoIHJvd1NlbGVjdG9yLCBjb2x1bW5TZWxlY3Rvciwgb3B0cyApIHtcblx0XHQvLyBBcmd1bWVudCBzaGlmdGluZ1xuXHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCByb3dTZWxlY3RvciApICkge1xuXHRcdFx0Ly8gSW5kZXhlc1xuXHRcdFx0aWYgKCByb3dTZWxlY3Rvci5yb3cgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0Ly8gU2VsZWN0b3Igb3B0aW9ucyBpbiBmaXJzdCBwYXJhbWV0ZXJcblx0XHRcdFx0b3B0cyA9IHJvd1NlbGVjdG9yO1xuXHRcdFx0XHRyb3dTZWxlY3RvciA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gQ2VsbCBpbmRleCBvYmplY3RzIGluIGZpcnN0IHBhcmFtZXRlclxuXHRcdFx0XHRvcHRzID0gY29sdW1uU2VsZWN0b3I7XG5cdFx0XHRcdGNvbHVtblNlbGVjdG9yID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIGNvbHVtblNlbGVjdG9yICkgKSB7XG5cdFx0XHRvcHRzID0gY29sdW1uU2VsZWN0b3I7XG5cdFx0XHRjb2x1bW5TZWxlY3RvciA9IG51bGw7XG5cdFx0fVxuXHRcblx0XHQvLyBDZWxsIHNlbGVjdG9yXG5cdFx0aWYgKCBjb2x1bW5TZWxlY3RvciA9PT0gbnVsbCB8fCBjb2x1bW5TZWxlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRcdHJldHVybiBfX2NlbGxfc2VsZWN0b3IoIHNldHRpbmdzLCByb3dTZWxlY3RvciwgX3NlbGVjdG9yX29wdHMoIG9wdHMgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XG5cdFx0Ly8gUm93ICsgY29sdW1uIHNlbGVjdG9yXG5cdFx0dmFyIGNvbHVtbnMgPSB0aGlzLmNvbHVtbnMoIGNvbHVtblNlbGVjdG9yLCBvcHRzICk7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLnJvd3MoIHJvd1NlbGVjdG9yLCBvcHRzICk7XG5cdFx0dmFyIGEsIGksIGllbiwgaiwgamVuO1xuXHRcblx0XHR2YXIgY2VsbHMgPSB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBpZHggKSB7XG5cdFx0XHRhID0gW107XG5cdFxuXHRcdFx0Zm9yICggaT0wLCBpZW49cm93c1tpZHhdLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBqPTAsIGplbj1jb2x1bW5zW2lkeF0ubGVuZ3RoIDsgajxqZW4gOyBqKysgKSB7XG5cdFx0XHRcdFx0YS5wdXNoKCB7XG5cdFx0XHRcdFx0XHRyb3c6ICAgIHJvd3NbaWR4XVtpXSxcblx0XHRcdFx0XHRcdGNvbHVtbjogY29sdW1uc1tpZHhdW2pdXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fSwgMSApO1xuXHRcblx0XHQkLmV4dGVuZCggY2VsbHMuc2VsZWN0b3IsIHtcblx0XHRcdGNvbHM6IGNvbHVtblNlbGVjdG9yLFxuXHRcdFx0cm93czogcm93U2VsZWN0b3IsXG5cdFx0XHRvcHRzOiBvcHRzXG5cdFx0fSApO1xuXHRcblx0XHRyZXR1cm4gY2VsbHM7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY2VsbHMoKS5ub2RlcygpJywgJ2NlbGwoKS5ub2RlKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjZWxsJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93LCBjb2x1bW4gKSB7XG5cdFx0XHR2YXIgY2VsbHMgPSBzZXR0aW5ncy5hb0RhdGFbIHJvdyBdLmFuQ2VsbHM7XG5cdFx0XHRyZXR1cm4gY2VsbHMgP1xuXHRcdFx0XHRjZWxsc1sgY29sdW1uIF0gOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ2NlbGxzKCkuZGF0YSgpJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY2VsbCcsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdywgY29sdW1uICkge1xuXHRcdFx0cmV0dXJuIF9mbkdldENlbGxEYXRhKCBzZXR0aW5ncywgcm93LCBjb2x1bW4gKTtcblx0XHR9LCAxICk7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY2VsbHMoKS5jYWNoZSgpJywgJ2NlbGwoKS5jYWNoZSgpJywgZnVuY3Rpb24gKCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlID09PSAnc2VhcmNoJyA/ICdfYUZpbHRlckRhdGEnIDogJ19hU29ydERhdGEnO1xuXHRcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NlbGwnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCByb3csIGNvbHVtbiApIHtcblx0XHRcdHJldHVybiBzZXR0aW5ncy5hb0RhdGFbIHJvdyBdWyB0eXBlIF1bIGNvbHVtbiBdO1xuXHRcdH0sIDEgKTtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjZWxscygpLnJlbmRlcigpJywgJ2NlbGwoKS5yZW5kZXIoKScsIGZ1bmN0aW9uICggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NlbGwnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCByb3csIGNvbHVtbiApIHtcblx0XHRcdHJldHVybiBfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIHJvdywgY29sdW1uLCB0eXBlICk7XG5cdFx0fSwgMSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ2NlbGxzKCkuaW5kZXhlcygpJywgJ2NlbGwoKS5pbmRleCgpJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY2VsbCcsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdywgY29sdW1uICkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0cm93OiByb3csXG5cdFx0XHRcdGNvbHVtbjogY29sdW1uLFxuXHRcdFx0XHRjb2x1bW5WaXNpYmxlOiBfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSggc2V0dGluZ3MsIGNvbHVtbiApXG5cdFx0XHR9O1xuXHRcdH0sIDEgKTtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjZWxscygpLmludmFsaWRhdGUoKScsICdjZWxsKCkuaW52YWxpZGF0ZSgpJywgZnVuY3Rpb24gKCBzcmMgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjZWxsJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93LCBjb2x1bW4gKSB7XG5cdFx0XHRfZm5JbnZhbGlkYXRlKCBzZXR0aW5ncywgcm93LCBzcmMsIGNvbHVtbiApO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnY2VsbCgpJywgZnVuY3Rpb24gKCByb3dTZWxlY3RvciwgY29sdW1uU2VsZWN0b3IsIG9wdHMgKSB7XG5cdFx0cmV0dXJuIF9zZWxlY3Rvcl9maXJzdCggdGhpcy5jZWxscyggcm93U2VsZWN0b3IsIGNvbHVtblNlbGVjdG9yLCBvcHRzICkgKTtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdjZWxsKCkuZGF0YSgpJywgZnVuY3Rpb24gKCBkYXRhICkge1xuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cdFx0dmFyIGNlbGwgPSB0aGlzWzBdO1xuXHRcblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdC8vIEdldFxuXHRcdFx0cmV0dXJuIGN0eC5sZW5ndGggJiYgY2VsbC5sZW5ndGggP1xuXHRcdFx0XHRfZm5HZXRDZWxsRGF0YSggY3R4WzBdLCBjZWxsWzBdLnJvdywgY2VsbFswXS5jb2x1bW4gKSA6XG5cdFx0XHRcdHVuZGVmaW5lZDtcblx0XHR9XG5cdFxuXHRcdC8vIFNldFxuXHRcdF9mblNldENlbGxEYXRhKCBjdHhbMF0sIGNlbGxbMF0ucm93LCBjZWxsWzBdLmNvbHVtbiwgZGF0YSApO1xuXHRcdF9mbkludmFsaWRhdGUoIGN0eFswXSwgY2VsbFswXS5yb3csICdkYXRhJywgY2VsbFswXS5jb2x1bW4gKTtcblx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdldCBjdXJyZW50IG9yZGVyaW5nIChzb3J0aW5nKSB0aGF0IGhhcyBiZWVuIGFwcGxpZWQgdG8gdGhlIHRhYmxlLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7YXJyYXl9IDJEIGFycmF5IGNvbnRhaW5pbmcgdGhlIHNvcnRpbmcgaW5mb3JtYXRpb24gZm9yIHRoZSBmaXJzdFxuXHQgKiAgIHRhYmxlIGluIHRoZSBjdXJyZW50IGNvbnRleHQuIEVhY2ggZWxlbWVudCBpbiB0aGUgcGFyZW50IGFycmF5IHJlcHJlc2VudHNcblx0ICogICBhIGNvbHVtbiBiZWluZyBzb3J0ZWQgdXBvbiAoaS5lLiBtdWx0aS1zb3J0aW5nIHdpdGggdHdvIGNvbHVtbnMgd291bGQgaGF2ZVxuXHQgKiAgIDIgaW5uZXIgYXJyYXlzKS4gVGhlIGlubmVyIGFycmF5cyBtYXkgaGF2ZSAyIG9yIDMgZWxlbWVudHMuIFRoZSBmaXJzdCBpc1xuXHQgKiAgIHRoZSBjb2x1bW4gaW5kZXggdGhhdCB0aGUgc29ydGluZyBjb25kaXRpb24gYXBwbGllcyB0bywgdGhlIHNlY29uZCBpcyB0aGVcblx0ICogICBkaXJlY3Rpb24gb2YgdGhlIHNvcnQgKGBkZXNjYCBvciBgYXNjYCkgYW5kLCBvcHRpb25hbGx5LCB0aGUgdGhpcmQgaXMgdGhlXG5cdCAqICAgaW5kZXggb2YgdGhlIHNvcnRpbmcgb3JkZXIgZnJvbSB0aGUgYGNvbHVtbi5zb3J0aW5nYCBpbml0aWFsaXNhdGlvbiBhcnJheS5cblx0ICovLyoqXG5cdCAqIFNldCB0aGUgb3JkZXJpbmcgZm9yIHRoZSB0YWJsZS5cblx0ICpcblx0ICogQHBhcmFtIHtpbnRlZ2VyfSBvcmRlciBDb2x1bW4gaW5kZXggdG8gc29ydCB1cG9uLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIERpcmVjdGlvbiBvZiB0aGUgc29ydCB0byBiZSBhcHBsaWVkIChgYXNjYCBvciBgZGVzY2ApXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xuXHQgKi8vKipcblx0ICogU2V0IHRoZSBvcmRlcmluZyBmb3IgdGhlIHRhYmxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2FycmF5fSBvcmRlciAxRCBhcnJheSBvZiBzb3J0aW5nIGluZm9ybWF0aW9uIHRvIGJlIGFwcGxpZWQuXG5cdCAqIEBwYXJhbSB7YXJyYXl9IFsuLi5dIE9wdGlvbmFsIGFkZGl0aW9uYWwgc29ydGluZyBjb25kaXRpb25zXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xuXHQgKi8vKipcblx0ICogU2V0IHRoZSBvcmRlcmluZyBmb3IgdGhlIHRhYmxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2FycmF5fSBvcmRlciAyRCBhcnJheSBvZiBzb3J0aW5nIGluZm9ybWF0aW9uIHRvIGJlIGFwcGxpZWQuXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xuXHQgKi9cblx0X2FwaV9yZWdpc3RlciggJ29yZGVyKCknLCBmdW5jdGlvbiAoIG9yZGVyLCBkaXIgKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblx0XG5cdFx0aWYgKCBvcmRlciA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Ly8gZ2V0XG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCAhPT0gMCA/XG5cdFx0XHRcdGN0eFswXS5hYVNvcnRpbmcgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cdFx0fVxuXHRcblx0XHQvLyBzZXRcblx0XHRpZiAoIHR5cGVvZiBvcmRlciA9PT0gJ251bWJlcicgKSB7XG5cdFx0XHQvLyBTaW1wbGUgY29sdW1uIC8gZGlyZWN0aW9uIHBhc3NlZCBpblxuXHRcdFx0b3JkZXIgPSBbIFsgb3JkZXIsIGRpciBdIF07XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCAhICQuaXNBcnJheSggb3JkZXJbMF0gKSApIHtcblx0XHRcdC8vIEFyZ3VtZW50cyBwYXNzZWQgaW4gKGxpc3Qgb2YgMUQgYXJyYXlzKVxuXHRcdFx0b3JkZXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0fVxuXHRcdC8vIG90aGVyd2lzZSBhIDJEIGFycmF5IHdhcyBwYXNzZWQgaW5cblx0XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRzZXR0aW5ncy5hYVNvcnRpbmcgPSBvcmRlci5zbGljZSgpO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdC8qKlxuXHQgKiBBdHRhY2ggYSBzb3J0IGxpc3RlbmVyIHRvIGFuIGVsZW1lbnQgZm9yIGEgZ2l2ZW4gY29sdW1uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bm9kZXxqUXVlcnl8c3RyaW5nfSBub2RlIElkZW50aWZpZXIgZm9yIHRoZSBlbGVtZW50KHMpIHRvIGF0dGFjaCB0aGVcblx0ICogICBsaXN0ZW5lciB0by4gVGhpcyBjYW4gdGFrZSB0aGUgZm9ybSBvZiBhIHNpbmdsZSBET00gbm9kZSwgYSBqUXVlcnlcblx0ICogICBjb2xsZWN0aW9uIG9mIG5vZGVzIG9yIGEgalF1ZXJ5IHNlbGVjdG9yIHdoaWNoIHdpbGwgaWRlbnRpZnkgdGhlIG5vZGUocykuXG5cdCAqIEBwYXJhbSB7aW50ZWdlcn0gY29sdW1uIHRoZSBjb2x1bW4gdGhhdCBhIGNsaWNrIG9uIHRoaXMgbm9kZSB3aWxsIHNvcnQgb25cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIHNvcnQgaXMgcnVuXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xuXHQgKi9cblx0X2FwaV9yZWdpc3RlciggJ29yZGVyLmxpc3RlbmVyKCknLCBmdW5jdGlvbiAoIG5vZGUsIGNvbHVtbiwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRfZm5Tb3J0QXR0YWNoTGlzdGVuZXIoIHNldHRpbmdzLCBub2RlLCBjb2x1bW4sIGNhbGxiYWNrICk7XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ29yZGVyLmZpeGVkKCknLCBmdW5jdGlvbiAoIHNldCApIHtcblx0XHRpZiAoICEgc2V0ICkge1xuXHRcdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblx0XHRcdHZhciBmaXhlZCA9IGN0eC5sZW5ndGggP1xuXHRcdFx0XHRjdHhbMF0uYWFTb3J0aW5nRml4ZWQgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cdFxuXHRcdFx0cmV0dXJuICQuaXNBcnJheSggZml4ZWQgKSA/XG5cdFx0XHRcdHsgcHJlOiBmaXhlZCB9IDpcblx0XHRcdFx0Zml4ZWQ7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdHNldHRpbmdzLmFhU29ydGluZ0ZpeGVkID0gJC5leHRlbmQoIHRydWUsIHt9LCBzZXQgKTtcblx0XHR9ICk7XG5cdH0gKTtcblx0XG5cdFxuXHQvLyBPcmRlciBieSB0aGUgc2VsZWN0ZWQgY29sdW1uKHMpXG5cdF9hcGlfcmVnaXN0ZXIoIFtcblx0XHQnY29sdW1ucygpLm9yZGVyKCknLFxuXHRcdCdjb2x1bW4oKS5vcmRlcigpJ1xuXHRdLCBmdW5jdGlvbiAoIGRpciApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBpICkge1xuXHRcdFx0dmFyIHNvcnQgPSBbXTtcblx0XG5cdFx0XHQkLmVhY2goIHRoYXRbaV0sIGZ1bmN0aW9uIChqLCBjb2wpIHtcblx0XHRcdFx0c29ydC5wdXNoKCBbIGNvbCwgZGlyIF0gKTtcblx0XHRcdH0gKTtcblx0XG5cdFx0XHRzZXR0aW5ncy5hYVNvcnRpbmcgPSBzb3J0O1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnc2VhcmNoKCknLCBmdW5jdGlvbiAoIGlucHV0LCByZWdleCwgc21hcnQsIGNhc2VJbnNlbiApIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuXHRcblx0XHRpZiAoIGlucHV0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQvLyBnZXRcblx0XHRcdHJldHVybiBjdHgubGVuZ3RoICE9PSAwID9cblx0XHRcdFx0Y3R4WzBdLm9QcmV2aW91c1NlYXJjaC5zU2VhcmNoIDpcblx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdH1cblx0XG5cdFx0Ly8gc2V0XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRpZiAoICEgc2V0dGluZ3Mub0ZlYXR1cmVzLmJGaWx0ZXIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHRfZm5GaWx0ZXJDb21wbGV0ZSggc2V0dGluZ3MsICQuZXh0ZW5kKCB7fSwgc2V0dGluZ3Mub1ByZXZpb3VzU2VhcmNoLCB7XG5cdFx0XHRcdFwic1NlYXJjaFwiOiBpbnB1dCtcIlwiLFxuXHRcdFx0XHRcImJSZWdleFwiOiAgcmVnZXggPT09IG51bGwgPyBmYWxzZSA6IHJlZ2V4LFxuXHRcdFx0XHRcImJTbWFydFwiOiAgc21hcnQgPT09IG51bGwgPyB0cnVlICA6IHNtYXJ0LFxuXHRcdFx0XHRcImJDYXNlSW5zZW5zaXRpdmVcIjogY2FzZUluc2VuID09PSBudWxsID8gdHJ1ZSA6IGNhc2VJbnNlblxuXHRcdFx0fSApLCAxICk7XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlclBsdXJhbChcblx0XHQnY29sdW1ucygpLnNlYXJjaCgpJyxcblx0XHQnY29sdW1uKCkuc2VhcmNoKCknLFxuXHRcdGZ1bmN0aW9uICggaW5wdXQsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2VuICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjb2x1bW4nLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4gKSB7XG5cdFx0XHRcdHZhciBwcmVTZWFyY2ggPSBzZXR0aW5ncy5hb1ByZVNlYXJjaENvbHM7XG5cdFxuXHRcdFx0XHRpZiAoIGlucHV0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0Ly8gZ2V0XG5cdFx0XHRcdFx0cmV0dXJuIHByZVNlYXJjaFsgY29sdW1uIF0uc1NlYXJjaDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gc2V0XG5cdFx0XHRcdGlmICggISBzZXR0aW5ncy5vRmVhdHVyZXMuYkZpbHRlciApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdCQuZXh0ZW5kKCBwcmVTZWFyY2hbIGNvbHVtbiBdLCB7XG5cdFx0XHRcdFx0XCJzU2VhcmNoXCI6IGlucHV0K1wiXCIsXG5cdFx0XHRcdFx0XCJiUmVnZXhcIjogIHJlZ2V4ID09PSBudWxsID8gZmFsc2UgOiByZWdleCxcblx0XHRcdFx0XHRcImJTbWFydFwiOiAgc21hcnQgPT09IG51bGwgPyB0cnVlICA6IHNtYXJ0LFxuXHRcdFx0XHRcdFwiYkNhc2VJbnNlbnNpdGl2ZVwiOiBjYXNlSW5zZW4gPT09IG51bGwgPyB0cnVlIDogY2FzZUluc2VuXG5cdFx0XHRcdH0gKTtcblx0XG5cdFx0XHRcdF9mbkZpbHRlckNvbXBsZXRlKCBzZXR0aW5ncywgc2V0dGluZ3Mub1ByZXZpb3VzU2VhcmNoLCAxICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHQpO1xuXHRcblx0Lypcblx0ICogU3RhdGUgQVBJIG1ldGhvZHNcblx0ICovXG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnc3RhdGUoKScsIGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0Lmxlbmd0aCA/XG5cdFx0XHR0aGlzLmNvbnRleHRbMF0ub1NhdmVkU3RhdGUgOlxuXHRcdFx0bnVsbDtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdzdGF0ZS5jbGVhcigpJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xuXHRcdFx0Ly8gU2F2ZSBhbiBlbXB0eSBvYmplY3Rcblx0XHRcdHNldHRpbmdzLmZuU3RhdGVTYXZlQ2FsbGJhY2suY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywge30gKTtcblx0XHR9ICk7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnc3RhdGUubG9hZGVkKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29udGV4dC5sZW5ndGggP1xuXHRcdFx0dGhpcy5jb250ZXh0WzBdLm9Mb2FkZWRTdGF0ZSA6XG5cdFx0XHRudWxsO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ3N0YXRlLnNhdmUoKScsIGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdF9mblNhdmVTdGF0ZSggc2V0dGluZ3MgKTtcblx0XHR9ICk7XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIFByb3ZpZGUgYSBjb21tb24gbWV0aG9kIGZvciBwbHVnLWlucyB0byBjaGVjayB0aGUgdmVyc2lvbiBvZiBEYXRhVGFibGVzIGJlaW5nXG5cdCAqIHVzZWQsIGluIG9yZGVyIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5LlxuXHQgKlxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IHZlcnNpb24gVmVyc2lvbiBzdHJpbmcgdG8gY2hlY2sgZm9yLCBpbiB0aGUgZm9ybWF0IFwiWC5ZLlpcIi5cblx0ICogICAgTm90ZSB0aGF0IHRoZSBmb3JtYXRzIFwiWFwiIGFuZCBcIlguWVwiIGFyZSBhbHNvIGFjY2VwdGFibGUuXG5cdCAqICBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIHZlcnNpb24gb2YgRGF0YVRhYmxlcyBpcyBncmVhdGVyIG9yIGVxdWFsIHRvXG5cdCAqICAgIHRoZSByZXF1aXJlZCB2ZXJzaW9uLCBvciBmYWxzZSBpZiB0aGlzIHZlcnNpb24gb2YgRGF0YVRhbGVzIGlzIG5vdFxuXHQgKiAgICBzdWl0YWJsZVxuXHQgKiAgQHN0YXRpY1xuXHQgKiAgQGR0b3B0IEFQSS1TdGF0aWNcblx0ICpcblx0ICogIEBleGFtcGxlXG5cdCAqICAgIGFsZXJ0KCAkLmZuLmRhdGFUYWJsZS52ZXJzaW9uQ2hlY2soICcxLjkuMCcgKSApO1xuXHQgKi9cblx0RGF0YVRhYmxlLnZlcnNpb25DaGVjayA9IERhdGFUYWJsZS5mblZlcnNpb25DaGVjayA9IGZ1bmN0aW9uKCB2ZXJzaW9uIClcblx0e1xuXHRcdHZhciBhVGhpcyA9IERhdGFUYWJsZS52ZXJzaW9uLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGFUaGF0ID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuXHRcdHZhciBpVGhpcywgaVRoYXQ7XG5cdFxuXHRcdGZvciAoIHZhciBpPTAsIGlMZW49YVRoYXQubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkge1xuXHRcdFx0aVRoaXMgPSBwYXJzZUludCggYVRoaXNbaV0sIDEwICkgfHwgMDtcblx0XHRcdGlUaGF0ID0gcGFyc2VJbnQoIGFUaGF0W2ldLCAxMCApIHx8IDA7XG5cdFxuXHRcdFx0Ly8gUGFydHMgYXJlIHRoZSBzYW1lLCBrZWVwIGNvbXBhcmluZ1xuXHRcdFx0aWYgKGlUaGlzID09PSBpVGhhdCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBQYXJ0cyBhcmUgZGlmZmVyZW50LCByZXR1cm4gaW1tZWRpYXRlbHlcblx0XHRcdHJldHVybiBpVGhpcyA+IGlUaGF0O1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIENoZWNrIGlmIGEgYDx0YWJsZT5gIG5vZGUgaXMgYSBEYXRhVGFibGUgdGFibGUgYWxyZWFkeSBvciBub3QuXG5cdCAqXG5cdCAqICBAcGFyYW0ge25vZGV8anF1ZXJ5fHN0cmluZ30gdGFibGUgVGFibGUgbm9kZSwgalF1ZXJ5IG9iamVjdCBvciBqUXVlcnlcblx0ICogICAgICBzZWxlY3RvciBmb3IgdGhlIHRhYmxlIHRvIHRlc3QuIE5vdGUgdGhhdCBpZiBtb3JlIHRoYW4gbW9yZSB0aGFuIG9uZVxuXHQgKiAgICAgIHRhYmxlIGlzIHBhc3NlZCBvbiwgb25seSB0aGUgZmlyc3Qgd2lsbCBiZSBjaGVja2VkXG5cdCAqICBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSB0aGUgdGFibGUgZ2l2ZW4gaXMgYSBEYXRhVGFibGUsIG9yIGZhbHNlIG90aGVyd2lzZVxuXHQgKiAgQHN0YXRpY1xuXHQgKiAgQGR0b3B0IEFQSS1TdGF0aWNcblx0ICpcblx0ICogIEBleGFtcGxlXG5cdCAqICAgIGlmICggISAkLmZuLkRhdGFUYWJsZS5pc0RhdGFUYWJsZSggJyNleGFtcGxlJyApICkge1xuXHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XG5cdCAqICAgIH1cblx0ICovXG5cdERhdGFUYWJsZS5pc0RhdGFUYWJsZSA9IERhdGFUYWJsZS5mbklzRGF0YVRhYmxlID0gZnVuY3Rpb24gKCB0YWJsZSApXG5cdHtcblx0XHR2YXIgdCA9ICQodGFibGUpLmdldCgwKTtcblx0XHR2YXIgaXMgPSBmYWxzZTtcblx0XG5cdFx0JC5lYWNoKCBEYXRhVGFibGUuc2V0dGluZ3MsIGZ1bmN0aW9uIChpLCBvKSB7XG5cdFx0XHR2YXIgaGVhZCA9IG8ublNjcm9sbEhlYWQgPyAkKCd0YWJsZScsIG8ublNjcm9sbEhlYWQpWzBdIDogbnVsbDtcblx0XHRcdHZhciBmb290ID0gby5uU2Nyb2xsRm9vdCA/ICQoJ3RhYmxlJywgby5uU2Nyb2xsRm9vdClbMF0gOiBudWxsO1xuXHRcblx0XHRcdGlmICggby5uVGFibGUgPT09IHQgfHwgaGVhZCA9PT0gdCB8fCBmb290ID09PSB0ICkge1xuXHRcdFx0XHRpcyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcblx0XHRyZXR1cm4gaXM7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdldCBhbGwgRGF0YVRhYmxlIHRhYmxlcyB0aGF0IGhhdmUgYmVlbiBpbml0aWFsaXNlZCAtIG9wdGlvbmFsbHkgeW91IGNhblxuXHQgKiBzZWxlY3QgdG8gZ2V0IG9ubHkgY3VycmVudGx5IHZpc2libGUgdGFibGVzLlxuXHQgKlxuXHQgKiAgQHBhcmFtIHtib29sZWFufSBbdmlzaWJsZT1mYWxzZV0gRmxhZyB0byBpbmRpY2F0ZSBpZiB5b3Ugd2FudCBhbGwgKGRlZmF1bHQpXG5cdCAqICAgIG9yIHZpc2libGUgdGFibGVzIG9ubHkuXG5cdCAqICBAcmV0dXJucyB7YXJyYXl9IEFycmF5IG9mIGB0YWJsZWAgbm9kZXMgKG5vdCBEYXRhVGFibGUgaW5zdGFuY2VzKSB3aGljaCBhcmVcblx0ICogICAgRGF0YVRhYmxlc1xuXHQgKiAgQHN0YXRpY1xuXHQgKiAgQGR0b3B0IEFQSS1TdGF0aWNcblx0ICpcblx0ICogIEBleGFtcGxlXG5cdCAqICAgICQuZWFjaCggJC5mbi5kYXRhVGFibGUudGFibGVzKHRydWUpLCBmdW5jdGlvbiAoKSB7XG5cdCAqICAgICAgJCh0YWJsZSkuRGF0YVRhYmxlKCkuY29sdW1ucy5hZGp1c3QoKTtcblx0ICogICAgfSApO1xuXHQgKi9cblx0RGF0YVRhYmxlLnRhYmxlcyA9IERhdGFUYWJsZS5mblRhYmxlcyA9IGZ1bmN0aW9uICggdmlzaWJsZSApXG5cdHtcblx0XHR2YXIgYXBpID0gZmFsc2U7XG5cdFxuXHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCB2aXNpYmxlICkgKSB7XG5cdFx0XHRhcGkgPSB2aXNpYmxlLmFwaTtcblx0XHRcdHZpc2libGUgPSB2aXNpYmxlLnZpc2libGU7XG5cdFx0fVxuXHRcblx0XHR2YXIgYSA9ICQubWFwKCBEYXRhVGFibGUuc2V0dGluZ3MsIGZ1bmN0aW9uIChvKSB7XG5cdFx0XHRpZiAoICF2aXNpYmxlIHx8ICh2aXNpYmxlICYmICQoby5uVGFibGUpLmlzKCc6dmlzaWJsZScpKSApIHtcblx0XHRcdFx0cmV0dXJuIG8ublRhYmxlO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XG5cdFx0cmV0dXJuIGFwaSA/XG5cdFx0XHRuZXcgX0FwaSggYSApIDpcblx0XHRcdGE7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIERhdGFUYWJsZXMgdXRpbGl0eSBtZXRob2RzXG5cdCAqIFxuXHQgKiBUaGlzIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgbWV0aG9kcyB0aGF0IERhdGFUYWJsZXMgdXNlcyBpbnRlcm5hbGx5IHRvXG5cdCAqIGNyZWF0ZSBhIERhdGFUYWJsZSwgYnV0IHdoaWNoIGFyZSBub3QgZXhjbHVzaXZlbHkgdXNlZCBvbmx5IGZvciBEYXRhVGFibGVzLlxuXHQgKiBUaGVzZSBtZXRob2RzIGNhbiBiZSB1c2VkIGJ5IGV4dGVuc2lvbiBhdXRob3JzIHRvIHNhdmUgdGhlIGR1cGxpY2F0aW9uIG9mXG5cdCAqIGNvZGUuXG5cdCAqXG5cdCAqICBAbmFtZXNwYWNlXG5cdCAqL1xuXHREYXRhVGFibGUudXRpbCA9IHtcblx0XHQvKipcblx0XHQgKiBUaHJvdHRsZSB0aGUgY2FsbHMgdG8gYSBmdW5jdGlvbi4gQXJndW1lbnRzIGFuZCBjb250ZXh0IGFyZSBtYWludGFpbmVkXG5cdFx0ICogZm9yIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0XHQgKiBAcGFyYW0ge2ludGVnZXJ9IGZyZXEgQ2FsbCBmcmVxdWVuY3kgaW4gbVNcblx0XHQgKiBAcmV0dXJuIHtmdW5jdGlvbn0gV3JhcHBlZCBmdW5jdGlvblxuXHRcdCAqL1xuXHRcdHRocm90dGxlOiBfZm5UaHJvdHRsZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVzY2FwZSBhIHN0cmluZyBzdWNoIHRoYXQgaXQgY2FuIGJlIHVzZWQgaW4gYSByZWd1bGFyIGV4cHJlc3Npb25cblx0XHQgKlxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gc1ZhbCBzdHJpbmcgdG8gZXNjYXBlXG5cdFx0ICogIEByZXR1cm5zIHtzdHJpbmd9IGVzY2FwZWQgc3RyaW5nXG5cdFx0ICovXG5cdFx0ZXNjYXBlUmVnZXg6IF9mbkVzY2FwZVJlZ2V4XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgZnJvbSBjYW1lbCBjYXNlIHBhcmFtZXRlcnMgdG8gSHVuZ2FyaWFuIG5vdGF0aW9uLiBUaGlzIGlzIG1hZGUgcHVibGljXG5cdCAqIGZvciB0aGUgZXh0ZW5zaW9ucyB0byBwcm92aWRlIHRoZSBzYW1lIGFiaWxpdHkgYXMgRGF0YVRhYmxlcyBjb3JlIHRvIGFjY2VwdFxuXHQgKiBlaXRoZXIgdGhlIDEuOSBzdHlsZSBIdW5nYXJpYW4gbm90YXRpb24sIG9yIHRoZSAxLjEwKyBzdHlsZSBjYW1lbENhc2Vcblx0ICogcGFyYW1ldGVycy5cblx0ICpcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzcmMgVGhlIG1vZGVsIG9iamVjdCB3aGljaCBob2xkcyBhbGwgcGFyYW1ldGVycyB0aGF0IGNhbiBiZVxuXHQgKiAgICBtYXBwZWQuXG5cdCAqICBAcGFyYW0ge29iamVjdH0gdXNlciBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgZnJvbSBjYW1lbCBjYXNlIHRvIEh1bmdhcmlhbi5cblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2UgV2hlbiBzZXQgdG8gYHRydWVgLCBwcm9wZXJ0aWVzIHdoaWNoIGFscmVhZHkgaGF2ZSBhXG5cdCAqICAgIEh1bmdhcmlhbiB2YWx1ZSBpbiB0aGUgYHVzZXJgIG9iamVjdCB3aWxsIGJlIG92ZXJ3cml0dGVuLiBPdGhlcndpc2UgdGhleVxuXHQgKiAgICB3b24ndCBiZS5cblx0ICovXG5cdERhdGFUYWJsZS5jYW1lbFRvSHVuZ2FyaWFuID0gX2ZuQ2FtZWxUb0h1bmdhcmlhbjtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRfYXBpX3JlZ2lzdGVyKCAnJCgpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcblx0XHR2YXJcblx0XHRcdHJvd3MgICA9IHRoaXMucm93cyggb3B0cyApLm5vZGVzKCksIC8vIEdldCBhbGwgcm93c1xuXHRcdFx0anFSb3dzID0gJChyb3dzKTtcblx0XG5cdFx0cmV0dXJuICQoIFtdLmNvbmNhdChcblx0XHRcdGpxUm93cy5maWx0ZXIoIHNlbGVjdG9yICkudG9BcnJheSgpLFxuXHRcdFx0anFSb3dzLmZpbmQoIHNlbGVjdG9yICkudG9BcnJheSgpXG5cdFx0KSApO1xuXHR9ICk7XG5cdFxuXHRcblx0Ly8galF1ZXJ5IGZ1bmN0aW9ucyB0byBvcGVyYXRlIG9uIHRoZSB0YWJsZXNcblx0JC5lYWNoKCBbICdvbicsICdvbmUnLCAnb2ZmJyBdLCBmdW5jdGlvbiAoaSwga2V5KSB7XG5cdFx0X2FwaV9yZWdpc3Rlcigga2V5KycoKScsIGZ1bmN0aW9uICggLyogZXZlbnQsIGhhbmRsZXIgKi8gKSB7XG5cdFx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFxuXHRcdFx0Ly8gQWRkIHRoZSBgZHRgIG5hbWVzcGFjZSBhdXRvbWF0aWNhbGx5IGlmIGl0IGlzbid0IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0aWYgKCAhIGFyZ3NbMF0ubWF0Y2goL1xcLmR0XFxiLykgKSB7XG5cdFx0XHRcdGFyZ3NbMF0gKz0gJy5kdCc7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIGluc3QgPSAkKCB0aGlzLnRhYmxlcygpLm5vZGVzKCkgKTtcblx0XHRcdGluc3Rba2V5XS5hcHBseSggaW5zdCwgYXJncyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0X2FwaV9yZWdpc3RlciggJ2NsZWFyKCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XG5cdFx0XHRfZm5DbGVhclRhYmxlKCBzZXR0aW5ncyApO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdzZXR0aW5ncygpJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBuZXcgX0FwaSggdGhpcy5jb250ZXh0LCB0aGlzLmNvbnRleHQgKTtcblx0fSApO1xuXHRcblx0XG5cdF9hcGlfcmVnaXN0ZXIoICdpbml0KCknLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblx0XHRyZXR1cm4gY3R4Lmxlbmd0aCA/IGN0eFswXS5vSW5pdCA6IG51bGw7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnZGF0YSgpJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xuXHRcdFx0cmV0dXJuIF9wbHVjayggc2V0dGluZ3MuYW9EYXRhLCAnX2FEYXRhJyApO1xuXHRcdH0gKS5mbGF0dGVuKCk7XG5cdH0gKTtcblx0XG5cdFxuXHRfYXBpX3JlZ2lzdGVyKCAnZGVzdHJveSgpJywgZnVuY3Rpb24gKCByZW1vdmUgKSB7XG5cdFx0cmVtb3ZlID0gcmVtb3ZlIHx8IGZhbHNlO1xuXHRcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdHZhciBvcmlnICAgICAgPSBzZXR0aW5ncy5uVGFibGVXcmFwcGVyLnBhcmVudE5vZGU7XG5cdFx0XHR2YXIgY2xhc3NlcyAgID0gc2V0dGluZ3Mub0NsYXNzZXM7XG5cdFx0XHR2YXIgdGFibGUgICAgID0gc2V0dGluZ3MublRhYmxlO1xuXHRcdFx0dmFyIHRib2R5ICAgICA9IHNldHRpbmdzLm5UQm9keTtcblx0XHRcdHZhciB0aGVhZCAgICAgPSBzZXR0aW5ncy5uVEhlYWQ7XG5cdFx0XHR2YXIgdGZvb3QgICAgID0gc2V0dGluZ3MublRGb290O1xuXHRcdFx0dmFyIGpxVGFibGUgICA9ICQodGFibGUpO1xuXHRcdFx0dmFyIGpxVGJvZHkgICA9ICQodGJvZHkpO1xuXHRcdFx0dmFyIGpxV3JhcHBlciA9ICQoc2V0dGluZ3MublRhYmxlV3JhcHBlcik7XG5cdFx0XHR2YXIgcm93cyAgICAgID0gJC5tYXAoIHNldHRpbmdzLmFvRGF0YSwgZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIublRyOyB9ICk7XG5cdFx0XHR2YXIgaSwgaWVuO1xuXHRcblx0XHRcdC8vIEZsYWcgdG8gbm90ZSB0aGF0IHRoZSB0YWJsZSBpcyBjdXJyZW50bHkgYmVpbmcgZGVzdHJveWVkIC0gbm8gYWN0aW9uXG5cdFx0XHQvLyBzaG91bGQgYmUgdGFrZW5cblx0XHRcdHNldHRpbmdzLmJEZXN0cm95aW5nID0gdHJ1ZTtcblx0XG5cdFx0XHQvLyBGaXJlIG9mZiB0aGUgZGVzdHJveSBjYWxsYmFja3MgZm9yIHBsdWctaW5zIGV0Y1xuXHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgXCJhb0Rlc3Ryb3lDYWxsYmFja1wiLCBcImRlc3Ryb3lcIiwgW3NldHRpbmdzXSApO1xuXHRcblx0XHRcdC8vIElmIG5vdCBiZWluZyByZW1vdmVkIGZyb20gdGhlIGRvY3VtZW50LCBtYWtlIGFsbCBjb2x1bW5zIHZpc2libGVcblx0XHRcdGlmICggISByZW1vdmUgKSB7XG5cdFx0XHRcdG5ldyBfQXBpKCBzZXR0aW5ncyApLmNvbHVtbnMoKS52aXNpYmxlKCB0cnVlICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQmxpdHogYWxsIGBEVGAgbmFtZXNwYWNlZCBldmVudHMgKHRoZXNlIGFyZSBpbnRlcm5hbCBldmVudHMsIHRoZVxuXHRcdFx0Ly8gbG93ZXJjYXNlLCBgZHRgIGV2ZW50cyBhcmUgdXNlciBzdWJzY3JpYmVkIGFuZCB0aGV5IGFyZSByZXNwb25zaWJsZVxuXHRcdFx0Ly8gZm9yIHJlbW92aW5nIHRoZW1cblx0XHRcdGpxV3JhcHBlci51bmJpbmQoJy5EVCcpLmZpbmQoJzpub3QodGJvZHkgKiknKS51bmJpbmQoJy5EVCcpO1xuXHRcdFx0JCh3aW5kb3cpLnVuYmluZCgnLkRULScrc2V0dGluZ3Muc0luc3RhbmNlKTtcblx0XG5cdFx0XHQvLyBXaGVuIHNjcm9sbGluZyB3ZSBoYWQgdG8gYnJlYWsgdGhlIHRhYmxlIHVwIC0gcmVzdG9yZSBpdFxuXHRcdFx0aWYgKCB0YWJsZSAhPSB0aGVhZC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRqcVRhYmxlLmNoaWxkcmVuKCd0aGVhZCcpLmRldGFjaCgpO1xuXHRcdFx0XHRqcVRhYmxlLmFwcGVuZCggdGhlYWQgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHRmb290ICYmIHRhYmxlICE9IHRmb290LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGpxVGFibGUuY2hpbGRyZW4oJ3Rmb290JykuZGV0YWNoKCk7XG5cdFx0XHRcdGpxVGFibGUuYXBwZW5kKCB0Zm9vdCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHNldHRpbmdzLmFhU29ydGluZyA9IFtdO1xuXHRcdFx0c2V0dGluZ3MuYWFTb3J0aW5nRml4ZWQgPSBbXTtcblx0XHRcdF9mblNvcnRpbmdDbGFzc2VzKCBzZXR0aW5ncyApO1xuXHRcblx0XHRcdCQoIHJvd3MgKS5yZW1vdmVDbGFzcyggc2V0dGluZ3MuYXNTdHJpcGVDbGFzc2VzLmpvaW4oJyAnKSApO1xuXHRcblx0XHRcdCQoJ3RoLCB0ZCcsIHRoZWFkKS5yZW1vdmVDbGFzcyggY2xhc3Nlcy5zU29ydGFibGUrJyAnK1xuXHRcdFx0XHRjbGFzc2VzLnNTb3J0YWJsZUFzYysnICcrY2xhc3Nlcy5zU29ydGFibGVEZXNjKycgJytjbGFzc2VzLnNTb3J0YWJsZU5vbmVcblx0XHRcdCk7XG5cdFxuXHRcdFx0aWYgKCBzZXR0aW5ncy5iSlVJICkge1xuXHRcdFx0XHQkKCd0aCBzcGFuLicrY2xhc3Nlcy5zU29ydEljb24rICcsIHRkIHNwYW4uJytjbGFzc2VzLnNTb3J0SWNvbiwgdGhlYWQpLmRldGFjaCgpO1xuXHRcdFx0XHQkKCd0aCwgdGQnLCB0aGVhZCkuZWFjaCggZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciB3cmFwcGVyID0gJCgnZGl2LicrY2xhc3Nlcy5zU29ydEpVSVdyYXBwZXIsIHRoaXMpO1xuXHRcdFx0XHRcdCQodGhpcykuYXBwZW5kKCB3cmFwcGVyLmNvbnRlbnRzKCkgKTtcblx0XHRcdFx0XHR3cmFwcGVyLmRldGFjaCgpO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQWRkIHRoZSBUUiBlbGVtZW50cyBiYWNrIGludG8gdGhlIHRhYmxlIGluIHRoZWlyIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRqcVRib2R5LmNoaWxkcmVuKCkuZGV0YWNoKCk7XG5cdFx0XHRqcVRib2R5LmFwcGVuZCggcm93cyApO1xuXHRcblx0XHRcdC8vIFJlbW92ZSB0aGUgRGF0YVRhYmxlcyBnZW5lcmF0ZWQgbm9kZXMsIGV2ZW50cyBhbmQgY2xhc3Nlc1xuXHRcdFx0dmFyIHJlbW92ZWRNZXRob2QgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdkZXRhY2gnO1xuXHRcdFx0anFUYWJsZVsgcmVtb3ZlZE1ldGhvZCBdKCk7XG5cdFx0XHRqcVdyYXBwZXJbIHJlbW92ZWRNZXRob2QgXSgpO1xuXHRcblx0XHRcdC8vIElmIHdlIG5lZWQgdG8gcmVhdHRhY2ggdGhlIHRhYmxlIHRvIHRoZSBkb2N1bWVudFxuXHRcdFx0aWYgKCAhIHJlbW92ZSAmJiBvcmlnICkge1xuXHRcdFx0XHQvLyBpbnNlcnRCZWZvcmUgYWN0cyBsaWtlIGFwcGVuZENoaWxkIGlmICFhcmdbMV1cblx0XHRcdFx0b3JpZy5pbnNlcnRCZWZvcmUoIHRhYmxlLCBzZXR0aW5ncy5uVGFibGVSZWluc2VydEJlZm9yZSApO1xuXHRcblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgd2lkdGggb2YgdGhlIG9yaWdpbmFsIHRhYmxlIC0gd2FzIHJlYWQgZnJvbSB0aGUgc3R5bGUgcHJvcGVydHksXG5cdFx0XHRcdC8vIHNvIHdlIGNhbiByZXN0b3JlIGRpcmVjdGx5IHRvIHRoYXRcblx0XHRcdFx0anFUYWJsZVxuXHRcdFx0XHRcdC5jc3MoICd3aWR0aCcsIHNldHRpbmdzLnNEZXN0cm95V2lkdGggKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggY2xhc3Nlcy5zVGFibGUgKTtcblx0XG5cdFx0XHRcdC8vIElmIHRoZSB3ZXJlIG9yaWdpbmFsbHkgc3RyaXBlIGNsYXNzZXMgLSB0aGVuIHdlIGFkZCB0aGVtIGJhY2sgaGVyZS5cblx0XHRcdFx0Ly8gTm90ZSB0aGlzIGlzIG5vdCBmb29sIHByb29mIChmb3IgZXhhbXBsZSBpZiBub3QgYWxsIHJvd3MgaGFkIHN0cmlwZVxuXHRcdFx0XHQvLyBjbGFzc2VzIC0gYnV0IGl0J3MgYSBnb29kIGVmZm9ydCB3aXRob3V0IGdldHRpbmcgY2FycmllZCBhd2F5XG5cdFx0XHRcdGllbiA9IHNldHRpbmdzLmFzRGVzdHJveVN0cmlwZXMubGVuZ3RoO1xuXHRcblx0XHRcdFx0aWYgKCBpZW4gKSB7XG5cdFx0XHRcdFx0anFUYm9keS5jaGlsZHJlbigpLmVhY2goIGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKCBzZXR0aW5ncy5hc0Rlc3Ryb3lTdHJpcGVzW2kgJSBpZW5dICk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0LyogUmVtb3ZlIHRoZSBzZXR0aW5ncyBvYmplY3QgZnJvbSB0aGUgc2V0dGluZ3MgYXJyYXkgKi9cblx0XHRcdHZhciBpZHggPSAkLmluQXJyYXkoIHNldHRpbmdzLCBEYXRhVGFibGUuc2V0dGluZ3MgKTtcblx0XHRcdGlmICggaWR4ICE9PSAtMSApIHtcblx0XHRcdFx0RGF0YVRhYmxlLnNldHRpbmdzLnNwbGljZSggaWR4LCAxICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0Ly8gQWRkIHRoZSBgZXZlcnkoKWAgbWV0aG9kIGZvciByb3dzLCBjb2x1bW5zIGFuZCBjZWxscyBpbiBhIGNvbXBhY3QgZm9ybVxuXHQkLmVhY2goIFsgJ2NvbHVtbicsICdyb3cnLCAnY2VsbCcgXSwgZnVuY3Rpb24gKCBpLCB0eXBlICkge1xuXHRcdF9hcGlfcmVnaXN0ZXIoIHR5cGUrJ3MoKS5ldmVyeSgpJywgZnVuY3Rpb24gKCBmbiApIHtcblx0XHRcdHZhciBvcHRzID0gdGhpcy5zZWxlY3Rvci5vcHRzO1xuXHRcdFx0dmFyIGFwaSA9IHRoaXM7XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoIHR5cGUsIGZ1bmN0aW9uICggc2V0dGluZ3MsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQgKSB7XG5cdFx0XHRcdC8vIFJvd3MgYW5kIGNvbHVtbnM6XG5cdFx0XHRcdC8vICBhcmcxIC0gaW5kZXhcblx0XHRcdFx0Ly8gIGFyZzIgLSB0YWJsZSBjb3VudGVyXG5cdFx0XHRcdC8vICBhcmczIC0gbG9vcCBjb3VudGVyXG5cdFx0XHRcdC8vICBhcmc0IC0gdW5kZWZpbmVkXG5cdFx0XHRcdC8vIENlbGxzOlxuXHRcdFx0XHQvLyAgYXJnMSAtIHJvdyBpbmRleFxuXHRcdFx0XHQvLyAgYXJnMiAtIGNvbHVtbiBpbmRleFxuXHRcdFx0XHQvLyAgYXJnMyAtIHRhYmxlIGNvdW50ZXJcblx0XHRcdFx0Ly8gIGFyZzQgLSBsb29wIGNvdW50ZXJcblx0XHRcdFx0Zm4uY2FsbChcblx0XHRcdFx0XHRhcGlbIHR5cGUgXShcblx0XHRcdFx0XHRcdGFyZzEsXG5cdFx0XHRcdFx0XHR0eXBlPT09J2NlbGwnID8gYXJnMiA6IG9wdHMsXG5cdFx0XHRcdFx0XHR0eXBlPT09J2NlbGwnID8gb3B0cyA6IHVuZGVmaW5lZFxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YXJnMSwgYXJnMiwgYXJnMywgYXJnNFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fSApO1xuXHRcblx0XG5cdC8vIGkxOG4gbWV0aG9kIGZvciBleHRlbnNpb25zIHRvIGJlIGFibGUgdG8gdXNlIHRoZSBsYW5ndWFnZSBvYmplY3QgZnJvbSB0aGVcblx0Ly8gRGF0YVRhYmxlXG5cdF9hcGlfcmVnaXN0ZXIoICdpMThuKCknLCBmdW5jdGlvbiAoIHRva2VuLCBkZWYsIHBsdXJhbCApIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0WzBdO1xuXHRcdHZhciByZXNvbHZlZCA9IF9mbkdldE9iamVjdERhdGFGbiggdG9rZW4gKSggY3R4Lm9MYW5ndWFnZSApO1xuXHRcblx0XHRpZiAoIHJlc29sdmVkID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXNvbHZlZCA9IGRlZjtcblx0XHR9XG5cdFxuXHRcdGlmICggcGx1cmFsICE9PSB1bmRlZmluZWQgJiYgJC5pc1BsYWluT2JqZWN0KCByZXNvbHZlZCApICkge1xuXHRcdFx0cmVzb2x2ZWQgPSByZXNvbHZlZFsgcGx1cmFsIF0gIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJlc29sdmVkWyBwbHVyYWwgXSA6XG5cdFx0XHRcdHJlc29sdmVkLl87XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gcmVzb2x2ZWQucmVwbGFjZSggJyVkJywgcGx1cmFsICk7IC8vIG5iOiBwbHVyYWwgbWlnaHQgYmUgdW5kZWZpbmVkLFxuXHR9ICk7XG5cblx0LyoqXG5cdCAqIFZlcnNpb24gc3RyaW5nIGZvciBwbHVnLWlucyB0byBjaGVjayBjb21wYXRpYmlsaXR5LiBBbGxvd2VkIGZvcm1hdCBpc1xuXHQgKiBgYS5iLmMtZGAgd2hlcmU6IGE6aW50LCBiOmludCwgYzppbnQsIGQ6c3RyaW5nKGRldnxiZXRhfGFscGhhKS4gYGRgIGlzIHVzZWRcblx0ICogb25seSBmb3Igbm9uLXJlbGVhc2UgYnVpbGRzLiBTZWUgaHR0cDovL3NlbXZlci5vcmcvIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXHQgKiAgQG1lbWJlclxuXHQgKiAgQHR5cGUgc3RyaW5nXG5cdCAqICBAZGVmYXVsdCBWZXJzaW9uIG51bWJlclxuXHQgKi9cblx0RGF0YVRhYmxlLnZlcnNpb24gPSBcIjEuMTAuMTBcIjtcblxuXHQvKipcblx0ICogUHJpdmF0ZSBkYXRhIHN0b3JlLCBjb250YWluaW5nIGFsbCBvZiB0aGUgc2V0dGluZ3Mgb2JqZWN0cyB0aGF0IGFyZVxuXHQgKiBjcmVhdGVkIGZvciB0aGUgdGFibGVzIG9uIGEgZ2l2ZW4gcGFnZS5cblx0ICpcblx0ICogTm90ZSB0aGF0IHRoZSBgRGF0YVRhYmxlLnNldHRpbmdzYCBvYmplY3QgaXMgYWxpYXNlZCB0b1xuXHQgKiBgalF1ZXJ5LmZuLmRhdGFUYWJsZUV4dGAgdGhyb3VnaCB3aGljaCBpdCBtYXkgYmUgYWNjZXNzZWQgYW5kXG5cdCAqIG1hbmlwdWxhdGVkLCBvciBgalF1ZXJ5LmZuLmRhdGFUYWJsZS5zZXR0aW5nc2AuXG5cdCAqICBAbWVtYmVyXG5cdCAqICBAdHlwZSBhcnJheVxuXHQgKiAgQGRlZmF1bHQgW11cblx0ICogIEBwcml2YXRlXG5cdCAqL1xuXHREYXRhVGFibGUuc2V0dGluZ3MgPSBbXTtcblxuXHQvKipcblx0ICogT2JqZWN0IG1vZGVscyBjb250YWluZXIsIGZvciB0aGUgdmFyaW91cyBtb2RlbHMgdGhhdCBEYXRhVGFibGVzIGhhc1xuXHQgKiBhdmFpbGFibGUgdG8gaXQuIFRoZXNlIG1vZGVscyBkZWZpbmUgdGhlIG9iamVjdHMgdGhhdCBhcmUgdXNlZCB0byBob2xkXG5cdCAqIHRoZSBhY3RpdmUgc3RhdGUgYW5kIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHRhYmxlLlxuXHQgKiAgQG5hbWVzcGFjZVxuXHQgKi9cblx0RGF0YVRhYmxlLm1vZGVscyA9IHt9O1xuXHRcblx0XG5cdFxuXHQvKipcblx0ICogVGVtcGxhdGUgb2JqZWN0IGZvciB0aGUgd2F5IGluIHdoaWNoIERhdGFUYWJsZXMgaG9sZHMgaW5mb3JtYXRpb24gYWJvdXRcblx0ICogc2VhcmNoIGluZm9ybWF0aW9uIGZvciB0aGUgZ2xvYmFsIGZpbHRlciBhbmQgaW5kaXZpZHVhbCBjb2x1bW4gZmlsdGVycy5cblx0ICogIEBuYW1lc3BhY2Vcblx0ICovXG5cdERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaCA9IHtcblx0XHQvKipcblx0XHQgKiBGbGFnIHRvIGluZGljYXRlIGlmIHRoZSBmaWx0ZXJpbmcgc2hvdWxkIGJlIGNhc2UgaW5zZW5zaXRpdmUgb3Igbm90XG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdFwiYkNhc2VJbnNlbnNpdGl2ZVwiOiB0cnVlLFxuXHRcblx0XHQvKipcblx0XHQgKiBBcHBsaWVkIHNlYXJjaCB0ZXJtXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCA8aT5FbXB0eSBzdHJpbmc8L2k+XG5cdFx0ICovXG5cdFx0XCJzU2VhcmNoXCI6IFwiXCIsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIHNlYXJjaCB0ZXJtIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhXG5cdFx0ICogcmVndWxhciBleHByZXNzaW9uICh0cnVlKSBvciBub3QgKGZhbHNlKSBhbmQgdGhlcmVmb3JlIGFuZCBzcGVjaWFsXG5cdFx0ICogcmVnZXggY2hhcmFjdGVycyBlc2NhcGVkLlxuXHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0XCJiUmVnZXhcIjogZmFsc2UsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEZsYWcgdG8gaW5kaWNhdGUgaWYgRGF0YVRhYmxlcyBpcyB0byB1c2UgaXRzIHNtYXJ0IGZpbHRlcmluZyBvciBub3QuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdFwiYlNtYXJ0XCI6IHRydWVcblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdC8qKlxuXHQgKiBUZW1wbGF0ZSBvYmplY3QgZm9yIHRoZSB3YXkgaW4gd2hpY2ggRGF0YVRhYmxlcyBob2xkcyBpbmZvcm1hdGlvbiBhYm91dFxuXHQgKiBlYWNoIGluZGl2aWR1YWwgcm93LiBUaGlzIGlzIHRoZSBvYmplY3QgZm9ybWF0IHVzZWQgZm9yIHRoZSBzZXR0aW5nc1xuXHQgKiBhb0RhdGEgYXJyYXkuXG5cdCAqICBAbmFtZXNwYWNlXG5cdCAqL1xuXHREYXRhVGFibGUubW9kZWxzLm9Sb3cgPSB7XG5cdFx0LyoqXG5cdFx0ICogVFIgZWxlbWVudCBmb3IgdGhlIHJvd1xuXHRcdCAqICBAdHlwZSBub2RlXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm5UclwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBBcnJheSBvZiBURCBlbGVtZW50cyBmb3IgZWFjaCByb3cuIFRoaXMgaXMgbnVsbCB1bnRpbCB0aGUgcm93IGhhcyBiZWVuXG5cdFx0ICogY3JlYXRlZC5cblx0XHQgKiAgQHR5cGUgYXJyYXkgbm9kZXNcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFuQ2VsbHNcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRGF0YSBvYmplY3QgZnJvbSB0aGUgb3JpZ2luYWwgZGF0YSBzb3VyY2UgZm9yIHRoZSByb3cuIFRoaXMgaXMgZWl0aGVyXG5cdFx0ICogYW4gYXJyYXkgaWYgdXNpbmcgdGhlIHRyYWRpdGlvbmFsIGZvcm0gb2YgRGF0YVRhYmxlcywgb3IgYW4gb2JqZWN0IGlmXG5cdFx0ICogdXNpbmcgbURhdGEgb3B0aW9ucy4gVGhlIGV4YWN0IHR5cGUgd2lsbCBkZXBlbmQgb24gdGhlIHBhc3NlZCBpblxuXHRcdCAqIGRhdGEgZnJvbSB0aGUgZGF0YSBzb3VyY2UsIG9yIHdpbGwgYmUgYW4gYXJyYXkgaWYgdXNpbmcgRE9NIGEgZGF0YVxuXHRcdCAqIHNvdXJjZS5cblx0XHQgKiAgQHR5cGUgYXJyYXl8b2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJfYURhdGFcIjogW10sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNvcnRpbmcgZGF0YSBjYWNoZSAtIHRoaXMgYXJyYXkgaXMgb3N0ZW5zaWJseSB0aGUgc2FtZSBsZW5ndGggYXMgdGhlXG5cdFx0ICogbnVtYmVyIG9mIGNvbHVtbnMgKGFsdGhvdWdoIGVhY2ggaW5kZXggaXMgZ2VuZXJhdGVkIG9ubHkgYXMgaXQgaXNcblx0XHQgKiBuZWVkZWQpLCBhbmQgaG9sZHMgdGhlIGRhdGEgdGhhdCBpcyB1c2VkIGZvciBzb3J0aW5nIGVhY2ggY29sdW1uIGluIHRoZVxuXHRcdCAqIHJvdy4gV2UgZG8gdGhpcyBjYWNoZSBnZW5lcmF0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgc29ydCBpbiBvcmRlciB0aGF0XG5cdFx0ICogdGhlIGZvcm1hdHRpbmcgb2YgdGhlIHNvcnQgZGF0YSBuZWVkIGJlIGRvbmUgb25seSBvbmNlIGZvciBlYWNoIGNlbGxcblx0XHQgKiBwZXIgc29ydC4gVGhpcyBhcnJheSBzaG91bGQgbm90IGJlIHJlYWQgZnJvbSBvciB3cml0dGVuIHRvIGJ5IGFueXRoaW5nXG5cdFx0ICogb3RoZXIgdGhhbiB0aGUgbWFzdGVyIHNvcnRpbmcgbWV0aG9kcy5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdFwiX2FTb3J0RGF0YVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBQZXIgY2VsbCBmaWx0ZXJpbmcgZGF0YSBjYWNoZS4gQXMgcGVyIHRoZSBzb3J0IGRhdGEgY2FjaGUsIHVzZWQgdG9cblx0XHQgKiBpbmNyZWFzZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGZpbHRlcmluZyBpbiBEYXRhVGFibGVzXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0XHRcIl9hRmlsdGVyRGF0YVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBGaWx0ZXJpbmcgZGF0YSBjYWNoZS4gVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgY2VsbCBmaWx0ZXJpbmcgY2FjaGUsIGJ1dFxuXHRcdCAqIGluIHRoaXMgY2FzZSBhIHN0cmluZyByYXRoZXIgdGhhbiBhbiBhcnJheS4gVGhpcyBpcyBlYXNpbHkgY29tcHV0ZWQgd2l0aFxuXHRcdCAqIGEgam9pbiBvbiBgX2FGaWx0ZXJEYXRhYCwgYnV0IGlzIHByb3ZpZGVkIGFzIGEgY2FjaGUgc28gdGhlIGpvaW4gaXNuJ3Rcblx0XHQgKiBuZWVkZWQgb24gZXZlcnkgc2VhcmNoIChtZW1vcnkgdHJhZGVkIGZvciBwZXJmb3JtYW5jZSlcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdFwiX3NGaWx0ZXJSb3dcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FjaGUgb2YgdGhlIGNsYXNzIG5hbWUgdGhhdCBEYXRhVGFibGVzIGhhcyBhcHBsaWVkIHRvIHRoZSByb3csIHNvIHdlXG5cdFx0ICogY2FuIHF1aWNrbHkgbG9vayBhdCB0aGlzIHZhcmlhYmxlIHJhdGhlciB0aGFuIG5lZWRpbmcgdG8gZG8gYSBET00gY2hlY2tcblx0XHQgKiBvbiBjbGFzc05hbWUgZm9yIHRoZSBuVHIgcHJvcGVydHkuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCA8aT5FbXB0eSBzdHJpbmc8L2k+XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0XCJfc1Jvd1N0cmlwZVwiOiBcIlwiLFxuXHRcblx0XHQvKipcblx0XHQgKiBEZW5vdGUgaWYgdGhlIG9yaWdpbmFsIGRhdGEgc291cmNlIHdhcyBmcm9tIHRoZSBET00sIG9yIHRoZSBkYXRhIHNvdXJjZVxuXHRcdCAqIG9iamVjdC4gVGhpcyBpcyB1c2VkIGZvciBpbnZhbGlkYXRpbmcgZGF0YSwgc28gRGF0YVRhYmxlcyBjYW5cblx0XHQgKiBhdXRvbWF0aWNhbGx5IHJlYWQgZGF0YSBmcm9tIHRoZSBvcmlnaW5hbCBzb3VyY2UsIHVubGVzcyB1bmluc3RydWN0ZWRcblx0XHQgKiBvdGhlcndpc2UuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0XCJzcmNcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogSW5kZXggaW4gdGhlIGFvRGF0YSBhcnJheS4gVGhpcyBzYXZlcyBhbiBpbmRleE9mIGxvb2t1cCB3aGVuIHdlIGhhdmUgdGhlXG5cdFx0ICogb2JqZWN0LCBidXQgd2FudCB0byBrbm93IHRoZSBpbmRleFxuXHRcdCAqICBAdHlwZSBpbnRlZ2VyXG5cdFx0ICogIEBkZWZhdWx0IC0xXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0XCJpZHhcIjogLTFcblx0fTtcblx0XG5cdFxuXHQvKipcblx0ICogVGVtcGxhdGUgb2JqZWN0IGZvciB0aGUgY29sdW1uIGluZm9ybWF0aW9uIG9iamVjdCBpbiBEYXRhVGFibGVzLiBUaGlzIG9iamVjdFxuXHQgKiBpcyBoZWxkIGluIHRoZSBzZXR0aW5ncyBhb0NvbHVtbnMgYXJyYXkgYW5kIGNvbnRhaW5zIGFsbCB0aGUgaW5mb3JtYXRpb24gdGhhdFxuXHQgKiBEYXRhVGFibGVzIG5lZWRzIGFib3V0IGVhY2ggaW5kaXZpZHVhbCBjb2x1bW4uXG5cdCAqXG5cdCAqIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBpcyByZWxhdGVkIHRvIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1ufVxuXHQgKiBidXQgdGhpcyBvbmUgaXMgdGhlIGludGVybmFsIGRhdGEgc3RvcmUgZm9yIERhdGFUYWJsZXMncyBjYWNoZSBvZiBjb2x1bW5zLlxuXHQgKiBJdCBzaG91bGQgTk9UIGJlIG1hbmlwdWxhdGVkIG91dHNpZGUgb2YgRGF0YVRhYmxlcy4gQW55IGNvbmZpZ3VyYXRpb24gc2hvdWxkXG5cdCAqIGJlIGRvbmUgdGhyb3VnaCB0aGUgaW5pdGlhbGlzYXRpb24gb3B0aW9ucy5cblx0ICogIEBuYW1lc3BhY2Vcblx0ICovXG5cdERhdGFUYWJsZS5tb2RlbHMub0NvbHVtbiA9IHtcblx0XHQvKipcblx0XHQgKiBDb2x1bW4gaW5kZXguIFRoaXMgY291bGQgYmUgd29ya2VkIG91dCBvbi10aGUtZmx5IHdpdGggJC5pbkFycmF5LCBidXQgaXRcblx0XHQgKiBpcyBmYXN0ZXIgdG8ganVzdCBob2xkIGl0IGFzIGEgdmFyaWFibGVcblx0XHQgKiAgQHR5cGUgaW50ZWdlclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJpZHhcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIHRoZSBjb2x1bW5zIHRoYXQgc29ydGluZyBzaG91bGQgb2NjdXIgb24gd2hlbiB0aGlzIGNvbHVtblxuXHRcdCAqIGlzIHNvcnRlZC4gVGhhdCB0aGlzIHByb3BlcnR5IGlzIGFuIGFycmF5IGFsbG93cyBtdWx0aS1jb2x1bW4gc29ydGluZ1xuXHRcdCAqIHRvIGJlIGRlZmluZWQgZm9yIGEgY29sdW1uIChmb3IgZXhhbXBsZSBmaXJzdCBuYW1lIC8gbGFzdCBuYW1lIGNvbHVtbnNcblx0XHQgKiB3b3VsZCBiZW5lZml0IGZyb20gdGhpcykuIFRoZSB2YWx1ZXMgYXJlIGludGVnZXJzIHBvaW50aW5nIHRvIHRoZVxuXHRcdCAqIGNvbHVtbnMgdG8gYmUgc29ydGVkIG9uICh0eXBpY2FsbHkgaXQgd2lsbCBiZSBhIHNpbmdsZSBpbnRlZ2VyIHBvaW50aW5nXG5cdFx0ICogYXQgaXRzZWxmLCBidXQgdGhhdCBkb2Vzbid0IG5lZWQgdG8gYmUgdGhlIGNhc2UpLlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqL1xuXHRcdFwiYURhdGFTb3J0XCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIERlZmluZSB0aGUgc29ydGluZyBkaXJlY3Rpb25zIHRoYXQgYXJlIGFwcGxpZWQgdG8gdGhlIGNvbHVtbiwgaW4gc2VxdWVuY2Vcblx0XHQgKiBhcyB0aGUgY29sdW1uIGlzIHJlcGVhdGVkbHkgc29ydGVkIHVwb24gLSBpLmUuIHRoZSBmaXJzdCB2YWx1ZSBpcyB1c2VkXG5cdFx0ICogYXMgdGhlIHNvcnRpbmcgZGlyZWN0aW9uIHdoZW4gdGhlIGNvbHVtbiBpZiBmaXJzdCBzb3J0ZWQgKGNsaWNrZWQgb24pLlxuXHRcdCAqIFNvcnQgaXQgYWdhaW4gKGNsaWNrIGFnYWluKSBhbmQgaXQgd2lsbCBtb3ZlIG9uIHRvIHRoZSBuZXh0IGluZGV4LlxuXHRcdCAqIFJlcGVhdCB1bnRpbCBsb29wLlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqL1xuXHRcdFwiYXNTb3J0aW5nXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIGNvbHVtbiBpcyBzZWFyY2hhYmxlLCBhbmQgdGh1cyBzaG91bGQgYmUgaW5jbHVkZWRcblx0XHQgKiBpbiB0aGUgZmlsdGVyaW5nIG9yIG5vdC5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqL1xuXHRcdFwiYlNlYXJjaGFibGVcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgY29sdW1uIGlzIHNvcnRhYmxlIG9yIG5vdC5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqL1xuXHRcdFwiYlNvcnRhYmxlXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIGNvbHVtbiBpcyBjdXJyZW50bHkgdmlzaWJsZSBpbiB0aGUgdGFibGUgb3Igbm90XG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKi9cblx0XHRcImJWaXNpYmxlXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFN0b3JlIGZvciBtYW51YWwgdHlwZSBhc3NpZ25tZW50IHVzaW5nIHRoZSBgY29sdW1uLnR5cGVgIG9wdGlvbi4gVGhpc1xuXHRcdCAqIGlzIGhlbGQgaW4gc3RvcmUgc28gd2UgY2FuIG1hbmlwdWxhdGUgdGhlIGNvbHVtbidzIGBzVHlwZWAgcHJvcGVydHkuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0XCJfc01hbnVhbFR5cGVcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiBIVE1MNSBkYXRhIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGRhdGFcblx0XHQgKiBzb3VyY2UgZm9yIGZpbHRlcmluZyBvciBzb3J0aW5nLiBUcnVlIGlzIGVpdGhlciBhcmUuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0XHRcIl9iQXR0clNyY1wiOiBmYWxzZSxcblx0XG5cdFx0LyoqXG5cdFx0ICogRGV2ZWxvcGVyIGRlZmluYWJsZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBhIGNlbGwgaXMgY3JlYXRlZCAoQWpheCBzb3VyY2UsXG5cdFx0ICogZXRjKSBvciBwcm9jZXNzZWQgZm9yIGlucHV0IChET00gc291cmNlKS4gVGhpcyBjYW4gYmUgdXNlZCBhcyBhIGNvbXBsaW1lbnQgdG8gbVJlbmRlclxuXHRcdCAqIGFsbG93aW5nIHlvdSB0byBtb2RpZnkgdGhlIERPTSBlbGVtZW50IChhZGQgYmFja2dyb3VuZCBjb2xvdXIgZm9yIGV4YW1wbGUpIHdoZW4gdGhlXG5cdFx0ICogZWxlbWVudCBpcyBhdmFpbGFibGUuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7ZWxlbWVudH0gblRkIFRoZSBURCBub2RlIHRoYXQgaGFzIGJlZW4gY3JlYXRlZFxuXHRcdCAqICBAcGFyYW0geyp9IHNEYXRhIFRoZSBEYXRhIGZvciB0aGUgY2VsbFxuXHRcdCAqICBAcGFyYW0ge2FycmF5fG9iamVjdH0gb0RhdGEgVGhlIGRhdGEgZm9yIHRoZSB3aG9sZSByb3dcblx0XHQgKiAgQHBhcmFtIHtpbnR9IGlSb3cgVGhlIHJvdyBpbmRleCBmb3IgdGhlIGFvRGF0YSBkYXRhIHN0b3JlXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcImZuQ3JlYXRlZENlbGxcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdG8gZ2V0IGRhdGEgZnJvbSBhIGNlbGwgaW4gYSBjb2x1bW4uIFlvdSBzaG91bGQgPGI+bmV2ZXI8L2I+XG5cdFx0ICogYWNjZXNzIGRhdGEgZGlyZWN0bHkgdGhyb3VnaCBfYURhdGEgaW50ZXJuYWxseSBpbiBEYXRhVGFibGVzIC0gYWx3YXlzIHVzZVxuXHRcdCAqIHRoZSBtZXRob2QgYXR0YWNoZWQgdG8gdGhpcyBwcm9wZXJ0eS4gSXQgYWxsb3dzIG1EYXRhIHRvIGZ1bmN0aW9uIGFzXG5cdFx0ICogcmVxdWlyZWQuIFRoaXMgZnVuY3Rpb24gaXMgYXV0b21hdGljYWxseSBhc3NpZ25lZCBieSB0aGUgY29sdW1uXG5cdFx0ICogaW5pdGlhbGlzYXRpb24gbWV0aG9kXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSBvRGF0YSBUaGUgZGF0YSBhcnJheS9vYmplY3QgZm9yIHRoZSBhcnJheVxuXHRcdCAqICAgIChpLmUuIGFvRGF0YVtdLl9hRGF0YSlcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNTcGVjaWZpYyBUaGUgc3BlY2lmaWMgZGF0YSB0eXBlIHlvdSB3YW50IHRvIGdldCAtXG5cdFx0ICogICAgJ2Rpc3BsYXknLCAndHlwZScgJ2ZpbHRlcicgJ3NvcnQnXG5cdFx0ICogIEByZXR1cm5zIHsqfSBUaGUgZGF0YSBmb3IgdGhlIGNlbGwgZnJvbSB0aGUgZ2l2ZW4gcm93J3MgZGF0YVxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJmbkdldERhdGFcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdG8gc2V0IGRhdGEgZm9yIGEgY2VsbCBpbiB0aGUgY29sdW1uLiBZb3Ugc2hvdWxkIDxiPm5ldmVyPC9iPlxuXHRcdCAqIHNldCB0aGUgZGF0YSBkaXJlY3RseSB0byBfYURhdGEgaW50ZXJuYWxseSBpbiBEYXRhVGFibGVzIC0gYWx3YXlzIHVzZVxuXHRcdCAqIHRoaXMgbWV0aG9kLiBJdCBhbGxvd3MgbURhdGEgdG8gZnVuY3Rpb24gYXMgcmVxdWlyZWQuIFRoaXMgZnVuY3Rpb25cblx0XHQgKiBpcyBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIGJ5IHRoZSBjb2x1bW4gaW5pdGlhbGlzYXRpb24gbWV0aG9kXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSBvRGF0YSBUaGUgZGF0YSBhcnJheS9vYmplY3QgZm9yIHRoZSBhcnJheVxuXHRcdCAqICAgIChpLmUuIGFvRGF0YVtdLl9hRGF0YSlcblx0XHQgKiAgQHBhcmFtIHsqfSBzVmFsdWUgVmFsdWUgdG8gc2V0XG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcImZuU2V0RGF0YVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBQcm9wZXJ0eSB0byByZWFkIHRoZSB2YWx1ZSBmb3IgdGhlIGNlbGxzIGluIHRoZSBjb2x1bW4gZnJvbSB0aGUgZGF0YVxuXHRcdCAqIHNvdXJjZSBhcnJheSAvIG9iamVjdC4gSWYgbnVsbCwgdGhlbiB0aGUgZGVmYXVsdCBjb250ZW50IGlzIHVzZWQsIGlmIGFcblx0XHQgKiBmdW5jdGlvbiBpcyBnaXZlbiB0aGVuIHRoZSByZXR1cm4gZnJvbSB0aGUgZnVuY3Rpb24gaXMgdXNlZC5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb258aW50fHN0cmluZ3xudWxsXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm1EYXRhXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFBhcnRuZXIgcHJvcGVydHkgdG8gbURhdGEgd2hpY2ggaXMgdXNlZCAob25seSB3aGVuIGRlZmluZWQpIHRvIGdldFxuXHRcdCAqIHRoZSBkYXRhIC0gaS5lLiBpdCBpcyBiYXNpY2FsbHkgdGhlIHNhbWUgYXMgbURhdGEsIGJ1dCB3aXRob3V0IHRoZVxuXHRcdCAqICdzZXQnIG9wdGlvbiwgYW5kIGFsc28gdGhlIGRhdGEgZmVkIHRvIGl0IGlzIHRoZSByZXN1bHQgZnJvbSBtRGF0YS5cblx0XHQgKiBUaGlzIGlzIHRoZSByZW5kZXJpbmcgbWV0aG9kIHRvIG1hdGNoIHRoZSBkYXRhIG1ldGhvZCBvZiBtRGF0YS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb258aW50fHN0cmluZ3xudWxsXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm1SZW5kZXJcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogVW5pcXVlIGhlYWRlciBUSC9URCBlbGVtZW50IGZvciB0aGlzIGNvbHVtbiAtIHRoaXMgaXMgd2hhdCB0aGUgc29ydGluZ1xuXHRcdCAqIGxpc3RlbmVyIGlzIGF0dGFjaGVkIHRvIChpZiBzb3J0aW5nIGlzIGVuYWJsZWQuKVxuXHRcdCAqICBAdHlwZSBub2RlXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm5UaFwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBVbmlxdWUgZm9vdGVyIFRIL1REIGVsZW1lbnQgZm9yIHRoaXMgY29sdW1uIChpZiB0aGVyZSBpcyBvbmUpLiBOb3QgdXNlZFxuXHRcdCAqIGluIERhdGFUYWJsZXMgYXMgc3VjaCwgYnV0IGNhbiBiZSB1c2VkIGZvciBwbHVnLWlucyB0byByZWZlcmVuY2UgdGhlXG5cdFx0ICogZm9vdGVyIGZvciBlYWNoIGNvbHVtbi5cblx0XHQgKiAgQHR5cGUgbm9kZVxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJuVGZcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsYXNzIHRvIGFwcGx5IHRvIGFsbCBURCBlbGVtZW50cyBpbiB0aGUgdGFibGUncyBUQk9EWSBmb3IgdGhlIGNvbHVtblxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwic0NsYXNzXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gRGF0YVRhYmxlcyBjYWxjdWxhdGVzIHRoZSBjb2x1bW4gd2lkdGhzIHRvIGFzc2lnbiB0byBlYWNoIGNvbHVtbixcblx0XHQgKiBpdCBmaW5kcyB0aGUgbG9uZ2VzdCBzdHJpbmcgaW4gZWFjaCBjb2x1bW4gYW5kIHRoZW4gY29uc3RydWN0cyBhXG5cdFx0ICogdGVtcG9yYXJ5IHRhYmxlIGFuZCByZWFkcyB0aGUgd2lkdGhzIGZyb20gdGhhdC4gVGhlIHByb2JsZW0gd2l0aCB0aGlzXG5cdFx0ICogaXMgdGhhdCBcIm1tbVwiIGlzIG11Y2ggd2lkZXIgdGhlbiBcImlpaWlcIiwgYnV0IHRoZSBsYXR0ZXIgaXMgYSBsb25nZXJcblx0XHQgKiBzdHJpbmcgLSB0aHVzIHRoZSBjYWxjdWxhdGlvbiBjYW4gZ28gd3JvbmcgKGRvaW5nIGl0IHByb3Blcmx5IGFuZCBwdXR0aW5nXG5cdFx0ICogaXQgaW50byBhbiBET00gb2JqZWN0IGFuZCBtZWFzdXJpbmcgdGhhdCBpcyBob3JyaWJseSghKSBzbG93KS4gVGh1cyBhc1xuXHRcdCAqIGEgXCJ3b3JrIGFyb3VuZFwiIHdlIHByb3ZpZGUgdGhpcyBvcHRpb24uIEl0IHdpbGwgYXBwZW5kIGl0cyB2YWx1ZSB0byB0aGVcblx0XHQgKiB0ZXh0IHRoYXQgaXMgZm91bmQgdG8gYmUgdGhlIGxvbmdlc3Qgc3RyaW5nIGZvciB0aGUgY29sdW1uIC0gaS5lLiBwYWRkaW5nLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKi9cblx0XHRcInNDb250ZW50UGFkZGluZ1wiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBBbGxvd3MgYSBkZWZhdWx0IHZhbHVlIHRvIGJlIGdpdmVuIGZvciBhIGNvbHVtbidzIGRhdGEsIGFuZCB3aWxsIGJlIHVzZWRcblx0XHQgKiB3aGVuZXZlciBhIG51bGwgZGF0YSBzb3VyY2UgaXMgZW5jb3VudGVyZWQgKHRoaXMgY2FuIGJlIGJlY2F1c2UgbURhdGFcblx0XHQgKiBpcyBzZXQgdG8gbnVsbCwgb3IgYmVjYXVzZSB0aGUgZGF0YSBzb3VyY2UgaXRzZWxmIGlzIG51bGwpLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwic0RlZmF1bHRDb250ZW50XCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIE5hbWUgZm9yIHRoZSBjb2x1bW4sIGFsbG93aW5nIHJlZmVyZW5jZSB0byB0aGUgY29sdW1uIGJ5IG5hbWUgYXMgd2VsbCBhc1xuXHRcdCAqIGJ5IGluZGV4IChuZWVkcyBhIGxvb2t1cCB0byB3b3JrIGJ5IG5hbWUpLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKi9cblx0XHRcInNOYW1lXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEN1c3RvbSBzb3J0aW5nIGRhdGEgdHlwZSAtIGRlZmluZXMgd2hpY2ggb2YgdGhlIGF2YWlsYWJsZSBwbHVnLWlucyBpblxuXHRcdCAqIGFmblNvcnREYXRhIHRoZSBjdXN0b20gc29ydGluZyB3aWxsIHVzZSAtIGlmIGFueSBpcyBkZWZpbmVkLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgc3RkXG5cdFx0ICovXG5cdFx0XCJzU29ydERhdGFUeXBlXCI6ICdzdGQnLFxuXHRcblx0XHQvKipcblx0XHQgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBoZWFkZXIgZWxlbWVudCB3aGVuIHNvcnRpbmcgb24gdGhpcyBjb2x1bW5cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcInNTb3J0aW5nQ2xhc3NcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2xhc3MgdG8gYmUgYXBwbGllZCB0byB0aGUgaGVhZGVyIGVsZW1lbnQgd2hlbiBzb3J0aW5nIG9uIHRoaXMgY29sdW1uIC1cblx0XHQgKiB3aGVuIGpRdWVyeSBVSSB0aGVtaW5nIGlzIHVzZWQuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJzU29ydGluZ0NsYXNzSlVJXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRpdGxlIG9mIHRoZSBjb2x1bW4gLSB3aGF0IGlzIHNlZW4gaW4gdGhlIFRIIGVsZW1lbnQgKG5UaCkuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqL1xuXHRcdFwic1RpdGxlXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIENvbHVtbiBzb3J0aW5nIGFuZCBmaWx0ZXJpbmcgdHlwZVxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwic1R5cGVcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogV2lkdGggb2YgdGhlIGNvbHVtblxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwic1dpZHRoXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFdpZHRoIG9mIHRoZSBjb2x1bW4gd2hlbiBpdCB3YXMgZmlyc3QgXCJlbmNvdW50ZXJlZFwiXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJzV2lkdGhPcmlnXCI6IG51bGxcblx0fTtcblx0XG5cdFxuXHQvKlxuXHQgKiBEZXZlbG9wZXIgbm90ZTogVGhlIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCBiZWxvdyBhcmUgZ2l2ZW4gaW4gSHVuZ2FyaWFuXG5cdCAqIG5vdGF0aW9uLCB0aGF0IHdhcyB1c2VkIGFzIHRoZSBpbnRlcmZhY2UgZm9yIERhdGFUYWJsZXMgcHJpb3IgdG8gdjEuMTAsIGhvd2V2ZXJcblx0ICogZnJvbSB2MS4xMCBvbndhcmRzIHRoZSBwcmltYXJ5IGludGVyZmFjZSBpcyBjYW1lbCBjYXNlLiBJbiBvcmRlciB0byBhdm9pZFxuXHQgKiBicmVha2luZyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB1dHRlcmx5IHdpdGggdGhpcyBjaGFuZ2UsIHRoZSBIdW5nYXJpYW5cblx0ICogdmVyc2lvbiBpcyBzdGlsbCwgaW50ZXJuYWxseSB0aGUgcHJpbWFyeSBpbnRlcmZhY2UsIGJ1dCBpcyBpcyBub3QgZG9jdW1lbnRlZFxuXHQgKiAtIGhlbmNlIHRoZSBAbmFtZSB0YWdzIGluIGVhY2ggZG9jIGNvbW1lbnQuIFRoaXMgYWxsb3dzIGEgSmF2YXNjcmlwdCBmdW5jdGlvblxuXHQgKiB0byBjcmVhdGUgYSBtYXAgZnJvbSBIdW5nYXJpYW4gbm90YXRpb24gdG8gY2FtZWwgY2FzZSAoZ29pbmcgdGhlIG90aGVyIGRpcmVjdGlvblxuXHQgKiB3b3VsZCByZXF1aXJlIGVhY2ggcHJvcGVydHkgdG8gYmUgbGlzdGVkLCB3aGljaCB3b3VsZCBhdCBhcm91bmQgM0sgdG8gdGhlIHNpemVcblx0ICogb2YgRGF0YVRhYmxlcywgd2hpbGUgdGhpcyBtZXRob2QgaXMgYWJvdXQgYSAwLjVLIGhpdC5cblx0ICpcblx0ICogVWx0aW1hdGVseSB0aGlzIGRvZXMgcGF2ZSB0aGUgd2F5IGZvciBIdW5nYXJpYW4gbm90YXRpb24gdG8gYmUgZHJvcHBlZFxuXHQgKiBjb21wbGV0ZWx5LCBidXQgdGhhdCBpcyBhIG1hc3NpdmUgYW1vdW50IG9mIHdvcmsgYW5kIHdpbGwgYnJlYWsgY3VycmVudFxuXHQgKiBpbnN0YWxscyAodGhlcmVmb3JlIGlzIG9uLWhvbGQgdW50aWwgdjIpLlxuXHQgKi9cblx0XG5cdC8qKlxuXHQgKiBJbml0aWFsaXNhdGlvbiBvcHRpb25zIHRoYXQgY2FuIGJlIGdpdmVuIHRvIERhdGFUYWJsZXMgYXQgaW5pdGlhbGlzYXRpb25cblx0ICogdGltZS5cblx0ICogIEBuYW1lc3BhY2Vcblx0ICovXG5cdERhdGFUYWJsZS5kZWZhdWx0cyA9IHtcblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiBkYXRhIHRvIHVzZSBmb3IgdGhlIHRhYmxlLCBwYXNzZWQgaW4gYXQgaW5pdGlhbGlzYXRpb24gd2hpY2hcblx0XHQgKiB3aWxsIGJlIHVzZWQgaW4gcHJlZmVyZW5jZSB0byBhbnkgZGF0YSB3aGljaCBpcyBhbHJlYWR5IGluIHRoZSBET00uIFRoaXMgaXNcblx0XHQgKiBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBjb25zdHJ1Y3RpbmcgdGFibGVzIHB1cmVseSBpbiBKYXZhc2NyaXB0LCBmb3Jcblx0XHQgKiBleGFtcGxlIHdpdGggYSBjdXN0b20gQWpheCBjYWxsLlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvblxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuZGF0YVxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYSAyRCBhcnJheSBkYXRhIHNvdXJjZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImRhdGFcIjogW1xuXHRcdCAqICAgICAgICAgIFsnVHJpZGVudCcsICdJbnRlcm5ldCBFeHBsb3JlciA0LjAnLCAnV2luIDk1KycsIDQsICdYJ10sXG5cdFx0ICogICAgICAgICAgWydUcmlkZW50JywgJ0ludGVybmV0IEV4cGxvcmVyIDUuMCcsICdXaW4gOTUrJywgNSwgJ0MnXSxcblx0XHQgKiAgICAgICAgXSxcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcblx0XHQgKiAgICAgICAgICB7IFwidGl0bGVcIjogXCJFbmdpbmVcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIkJyb3dzZXJcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIlBsYXRmb3JtXCIgfSxcblx0XHQgKiAgICAgICAgICB7IFwidGl0bGVcIjogXCJWZXJzaW9uXCIgfSxcblx0XHQgKiAgICAgICAgICB7IFwidGl0bGVcIjogXCJHcmFkZVwiIH1cblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYXMgYSBkYXRhIHNvdXJjZSAoYGRhdGFgKVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImRhdGFcIjogW1xuXHRcdCAqICAgICAgICAgIHtcblx0XHQgKiAgICAgICAgICAgIFwiZW5naW5lXCI6ICAgXCJUcmlkZW50XCIsXG5cdFx0ICogICAgICAgICAgICBcImJyb3dzZXJcIjogIFwiSW50ZXJuZXQgRXhwbG9yZXIgNC4wXCIsXG5cdFx0ICogICAgICAgICAgICBcInBsYXRmb3JtXCI6IFwiV2luIDk1K1wiLFxuXHRcdCAqICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6ICA0LFxuXHRcdCAqICAgICAgICAgICAgXCJncmFkZVwiOiAgICBcIlhcIlxuXHRcdCAqICAgICAgICAgIH0sXG5cdFx0ICogICAgICAgICAge1xuXHRcdCAqICAgICAgICAgICAgXCJlbmdpbmVcIjogICBcIlRyaWRlbnRcIixcblx0XHQgKiAgICAgICAgICAgIFwiYnJvd3NlclwiOiAgXCJJbnRlcm5ldCBFeHBsb3JlciA1LjBcIixcblx0XHQgKiAgICAgICAgICAgIFwicGxhdGZvcm1cIjogXCJXaW4gOTUrXCIsXG5cdFx0ICogICAgICAgICAgICBcInZlcnNpb25cIjogIDUsXG5cdFx0ICogICAgICAgICAgICBcImdyYWRlXCI6ICAgIFwiQ1wiXG5cdFx0ICogICAgICAgICAgfVxuXHRcdCAqICAgICAgICBdLFxuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIkVuZ2luZVwiLCAgIFwiZGF0YVwiOiBcImVuZ2luZVwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiQnJvd3NlclwiLCAgXCJkYXRhXCI6IFwiYnJvd3NlclwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiUGxhdGZvcm1cIiwgXCJkYXRhXCI6IFwicGxhdGZvcm1cIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIlZlcnNpb25cIiwgIFwiZGF0YVwiOiBcInZlcnNpb25cIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIkdyYWRlXCIsICAgIFwiZGF0YVwiOiBcImdyYWRlXCIgfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYWFEYXRhXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBJZiBvcmRlcmluZyBpcyBlbmFibGVkLCB0aGVuIERhdGFUYWJsZXMgd2lsbCBwZXJmb3JtIGEgZmlyc3QgcGFzcyBzb3J0IG9uXG5cdFx0ICogaW5pdGlhbGlzYXRpb24uIFlvdSBjYW4gZGVmaW5lIHdoaWNoIGNvbHVtbihzKSB0aGUgc29ydCBpcyBwZXJmb3JtZWRcblx0XHQgKiB1cG9uLCBhbmQgdGhlIHNvcnRpbmcgZGlyZWN0aW9uLCB3aXRoIHRoaXMgdmFyaWFibGUuIFRoZSBgc29ydGluZ2AgYXJyYXlcblx0XHQgKiBzaG91bGQgY29udGFpbiBhbiBhcnJheSBmb3IgZWFjaCBjb2x1bW4gdG8gYmUgc29ydGVkIGluaXRpYWxseSBjb250YWluaW5nXG5cdFx0ICogdGhlIGNvbHVtbidzIGluZGV4IGFuZCBhIGRpcmVjdGlvbiBzdHJpbmcgKCdhc2MnIG9yICdkZXNjJykuXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtbMCwnYXNjJ11dXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvblxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMub3JkZXJcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFNvcnQgYnkgM3JkIGNvbHVtbiBmaXJzdCwgYW5kIHRoZW4gNHRoIGNvbHVtblxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwib3JkZXJcIjogW1syLCdhc2MnXSwgWzMsJ2Rlc2MnXV1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgICAvLyBObyBpbml0aWFsIHNvcnRpbmdcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcIm9yZGVyXCI6IFtdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYWFTb3J0aW5nXCI6IFtbMCwnYXNjJ11dLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhpcyBwYXJhbWV0ZXIgaXMgYmFzaWNhbGx5IGlkZW50aWNhbCB0byB0aGUgYHNvcnRpbmdgIHBhcmFtZXRlciwgYnV0XG5cdFx0ICogY2Fubm90IGJlIG92ZXJyaWRkZW4gYnkgdXNlciBpbnRlcmFjdGlvbiB3aXRoIHRoZSB0YWJsZS4gV2hhdCB0aGlzIG1lYW5zXG5cdFx0ICogaXMgdGhhdCB5b3UgY291bGQgaGF2ZSBhIGNvbHVtbiAodmlzaWJsZSBvciBoaWRkZW4pIHdoaWNoIHRoZSBzb3J0aW5nXG5cdFx0ICogd2lsbCBhbHdheXMgYmUgZm9yY2VkIG9uIGZpcnN0IC0gYW55IHNvcnRpbmcgYWZ0ZXIgdGhhdCAoZnJvbSB0aGUgdXNlcilcblx0XHQgKiB3aWxsIHRoZW4gYmUgcGVyZm9ybWVkIGFzIHJlcXVpcmVkLiBUaGlzIGNhbiBiZSB1c2VmdWwgZm9yIGdyb3VwaW5nIHJvd3Ncblx0XHQgKiB0b2dldGhlci5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25cblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyRml4ZWRcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwib3JkZXJGaXhlZFwiOiBbWzAsJ2FzYyddXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKVxuXHRcdCAqL1xuXHRcdFwiYWFTb3J0aW5nRml4ZWRcIjogW10sXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBEYXRhVGFibGVzIGNhbiBiZSBpbnN0cnVjdGVkIHRvIGxvYWQgZGF0YSB0byBkaXNwbGF5IGluIHRoZSB0YWJsZSBmcm9tIGFcblx0XHQgKiBBamF4IHNvdXJjZS4gVGhpcyBvcHRpb24gZGVmaW5lcyBob3cgdGhhdCBBamF4IGNhbGwgaXMgbWFkZSBhbmQgd2hlcmUgdG8uXG5cdFx0ICpcblx0XHQgKiBUaGUgYGFqYXhgIHByb3BlcnR5IGhhcyB0aHJlZSBkaWZmZXJlbnQgbW9kZXMgb2Ygb3BlcmF0aW9uLCBkZXBlbmRpbmcgb25cblx0XHQgKiBob3cgaXQgaXMgZGVmaW5lZC4gVGhlc2UgYXJlOlxuXHRcdCAqXG5cdFx0ICogKiBgc3RyaW5nYCAtIFNldCB0aGUgVVJMIGZyb20gd2hlcmUgdGhlIGRhdGEgc2hvdWxkIGJlIGxvYWRlZCBmcm9tLlxuXHRcdCAqICogYG9iamVjdGAgLSBEZWZpbmUgcHJvcGVydGllcyBmb3IgYGpRdWVyeS5hamF4YC5cblx0XHQgKiAqIGBmdW5jdGlvbmAgLSBDdXN0b20gZGF0YSBnZXQgZnVuY3Rpb25cblx0XHQgKlxuXHRcdCAqIGBzdHJpbmdgXG5cdFx0ICogLS0tLS0tLS1cblx0XHQgKlxuXHRcdCAqIEFzIGEgc3RyaW5nLCB0aGUgYGFqYXhgIHByb3BlcnR5IHNpbXBseSBkZWZpbmVzIHRoZSBVUkwgZnJvbSB3aGljaFxuXHRcdCAqIERhdGFUYWJsZXMgd2lsbCBsb2FkIGRhdGEuXG5cdFx0ICpcblx0XHQgKiBgb2JqZWN0YFxuXHRcdCAqIC0tLS0tLS0tXG5cdFx0ICpcblx0XHQgKiBBcyBhbiBvYmplY3QsIHRoZSBwYXJhbWV0ZXJzIGluIHRoZSBvYmplY3QgYXJlIHBhc3NlZCB0b1xuXHRcdCAqIFtqUXVlcnkuYWpheF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS5hamF4LykgYWxsb3dpbmcgZmluZSBjb250cm9sXG5cdFx0ICogb2YgdGhlIEFqYXggcmVxdWVzdC4gRGF0YVRhYmxlcyBoYXMgYSBudW1iZXIgb2YgZGVmYXVsdCBwYXJhbWV0ZXJzIHdoaWNoXG5cdFx0ICogeW91IGNhbiBvdmVycmlkZSB1c2luZyB0aGlzIG9wdGlvbi4gUGxlYXNlIHJlZmVyIHRvIHRoZSBqUXVlcnlcblx0XHQgKiBkb2N1bWVudGF0aW9uIGZvciBhIGZ1bGwgZGVzY3JpcHRpb24gb2YgdGhlIG9wdGlvbnMgYXZhaWxhYmxlLCBhbHRob3VnaFxuXHRcdCAqIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVycyBwcm92aWRlIGFkZGl0aW9uYWwgb3B0aW9ucyBpbiBEYXRhVGFibGVzIG9yXG5cdFx0ICogcmVxdWlyZSBzcGVjaWFsIGNvbnNpZGVyYXRpb246XG5cdFx0ICpcblx0XHQgKiAqIGBkYXRhYCAtIEFzIHdpdGggalF1ZXJ5LCBgZGF0YWAgY2FuIGJlIHByb3ZpZGVkIGFzIGFuIG9iamVjdCwgYnV0IGl0XG5cdFx0ICogICBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgZnVuY3Rpb24gdG8gbWFuaXB1bGF0ZSB0aGUgZGF0YSBEYXRhVGFibGVzIHNlbmRzXG5cdFx0ICogICB0byB0aGUgc2VydmVyLiBUaGUgZnVuY3Rpb24gdGFrZXMgYSBzaW5nbGUgcGFyYW1ldGVyLCBhbiBvYmplY3Qgb2Zcblx0XHQgKiAgIHBhcmFtZXRlcnMgd2l0aCB0aGUgdmFsdWVzIHRoYXQgRGF0YVRhYmxlcyBoYXMgcmVhZGllZCBmb3Igc2VuZGluZy4gQW5cblx0XHQgKiAgIG9iamVjdCBtYXkgYmUgcmV0dXJuZWQgd2hpY2ggd2lsbCBiZSBtZXJnZWQgaW50byB0aGUgRGF0YVRhYmxlc1xuXHRcdCAqICAgZGVmYXVsdHMsIG9yIHlvdSBjYW4gYWRkIHRoZSBpdGVtcyB0byB0aGUgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBpbiBhbmRcblx0XHQgKiAgIG5vdCByZXR1cm4gYW55dGhpbmcgZnJvbSB0aGUgZnVuY3Rpb24uIFRoaXMgc3VwZXJzZWRlcyBgZm5TZXJ2ZXJQYXJhbXNgXG5cdFx0ICogICBmcm9tIERhdGFUYWJsZXMgMS45LS5cblx0XHQgKlxuXHRcdCAqICogYGRhdGFTcmNgIC0gQnkgZGVmYXVsdCBEYXRhVGFibGVzIHdpbGwgbG9vayBmb3IgdGhlIHByb3BlcnR5IGBkYXRhYCAob3Jcblx0XHQgKiAgIGBhYURhdGFgIGZvciBjb21wYXRpYmlsaXR5IHdpdGggRGF0YVRhYmxlcyAxLjktKSB3aGVuIG9idGFpbmluZyBkYXRhXG5cdFx0ICogICBmcm9tIGFuIEFqYXggc291cmNlIG9yIGZvciBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIC0gdGhpcyBwYXJhbWV0ZXJcblx0XHQgKiAgIGFsbG93cyB0aGF0IHByb3BlcnR5IHRvIGJlIGNoYW5nZWQuIFlvdSBjYW4gdXNlIEphdmFzY3JpcHQgZG90dGVkXG5cdFx0ICogICBvYmplY3Qgbm90YXRpb24gdG8gZ2V0IGEgZGF0YSBzb3VyY2UgZm9yIG11bHRpcGxlIGxldmVscyBvZiBuZXN0aW5nLCBvclxuXHRcdCAqICAgaXQgbXkgYmUgdXNlZCBhcyBhIGZ1bmN0aW9uLiBBcyBhIGZ1bmN0aW9uIGl0IHRha2VzIGEgc2luZ2xlIHBhcmFtZXRlcixcblx0XHQgKiAgIHRoZSBKU09OIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciwgd2hpY2ggY2FuIGJlIG1hbmlwdWxhdGVkIGFzXG5cdFx0ICogICByZXF1aXJlZCwgd2l0aCB0aGUgcmV0dXJuZWQgdmFsdWUgYmVpbmcgdGhhdCB1c2VkIGJ5IERhdGFUYWJsZXMgYXMgdGhlXG5cdFx0ICogICBkYXRhIHNvdXJjZSBmb3IgdGhlIHRhYmxlLiBUaGlzIHN1cGVyc2VkZXMgYHNBamF4RGF0YVByb3BgIGZyb21cblx0XHQgKiAgIERhdGFUYWJsZXMgMS45LS5cblx0XHQgKlxuXHRcdCAqICogYHN1Y2Nlc3NgIC0gU2hvdWxkIG5vdCBiZSBvdmVycmlkZGVuIGl0IGlzIHVzZWQgaW50ZXJuYWxseSBpblxuXHRcdCAqICAgRGF0YVRhYmxlcy4gVG8gbWFuaXB1bGF0ZSAvIHRyYW5zZm9ybSB0aGUgZGF0YSByZXR1cm5lZCBieSB0aGUgc2VydmVyXG5cdFx0ICogICB1c2UgYGFqYXguZGF0YVNyY2AsIG9yIHVzZSBgYWpheGAgYXMgYSBmdW5jdGlvbiAoc2VlIGJlbG93KS5cblx0XHQgKlxuXHRcdCAqIGBmdW5jdGlvbmBcblx0XHQgKiAtLS0tLS0tLS0tXG5cdFx0ICpcblx0XHQgKiBBcyBhIGZ1bmN0aW9uLCBtYWtpbmcgdGhlIEFqYXggY2FsbCBpcyBsZWZ0IHVwIHRvIHlvdXJzZWxmIGFsbG93aW5nXG5cdFx0ICogY29tcGxldGUgY29udHJvbCBvZiB0aGUgQWpheCByZXF1ZXN0LiBJbmRlZWQsIGlmIGRlc2lyZWQsIGEgbWV0aG9kIG90aGVyXG5cdFx0ICogdGhhbiBBamF4IGNvdWxkIGJlIHVzZWQgdG8gb2J0YWluIHRoZSByZXF1aXJlZCBkYXRhLCBzdWNoIGFzIFdlYiBzdG9yYWdlXG5cdFx0ICogb3IgYW4gQUlSIGRhdGFiYXNlLlxuXHRcdCAqXG5cdFx0ICogVGhlIGZ1bmN0aW9uIGlzIGdpdmVuIGZvdXIgcGFyYW1ldGVycyBhbmQgbm8gcmV0dXJuIGlzIHJlcXVpcmVkLiBUaGVcblx0XHQgKiBwYXJhbWV0ZXJzIGFyZTpcblx0XHQgKlxuXHRcdCAqIDEuIF9vYmplY3RfIC0gRGF0YSB0byBzZW5kIHRvIHRoZSBzZXJ2ZXJcblx0XHQgKiAyLiBfZnVuY3Rpb25fIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBtdXN0IGJlIGV4ZWN1dGVkIHdoZW4gdGhlIHJlcXVpcmVkXG5cdFx0ICogICAgZGF0YSBoYXMgYmVlbiBvYnRhaW5lZC4gVGhhdCBkYXRhIHNob3VsZCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2tcblx0XHQgKiAgICBhcyB0aGUgb25seSBwYXJhbWV0ZXJcblx0XHQgKiAzLiBfb2JqZWN0XyAtIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IGZvciB0aGUgdGFibGVcblx0XHQgKlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHN1cGVyc2VkZXMgYGZuU2VydmVyRGF0YWAgZnJvbSBEYXRhVGFibGVzIDEuOS0uXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgc3RyaW5nfG9iamVjdHxmdW5jdGlvblxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvblxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuYWpheFxuXHRcdCAqICBAc2luY2UgMS4xMC4wXG5cdFx0ICpcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqICAgLy8gR2V0IEpTT04gZGF0YSBmcm9tIGEgZmlsZSB2aWEgQWpheC5cblx0XHQgKiAgIC8vIE5vdGUgRGF0YVRhYmxlcyBleHBlY3RzIGRhdGEgaW4gdGhlIGZvcm0gYHsgZGF0YTogWyAuLi5kYXRhLi4uIF0gfWAgYnkgZGVmYXVsdCkuXG5cdFx0ICogICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICBcImFqYXhcIjogXCJkYXRhLmpzb25cIlxuXHRcdCAqICAgfSApO1xuXHRcdCAqXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAgIC8vIEdldCBKU09OIGRhdGEgZnJvbSBhIGZpbGUgdmlhIEFqYXgsIHVzaW5nIGBkYXRhU3JjYCB0byBjaGFuZ2Vcblx0XHQgKiAgIC8vIGBkYXRhYCB0byBgdGFibGVEYXRhYCAoaS5lLiBgeyB0YWJsZURhdGE6IFsgLi4uZGF0YS4uLiBdIH1gKVxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgXCJhamF4XCI6IHtcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxuXHRcdCAqICAgICAgIFwiZGF0YVNyY1wiOiBcInRhYmxlRGF0YVwiXG5cdFx0ICogICAgIH1cblx0XHQgKiAgIH0gKTtcblx0XHQgKlxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogICAvLyBHZXQgSlNPTiBkYXRhIGZyb20gYSBmaWxlIHZpYSBBamF4LCB1c2luZyBgZGF0YVNyY2AgdG8gcmVhZCBkYXRhXG5cdFx0ICogICAvLyBmcm9tIGEgcGxhaW4gYXJyYXkgcmF0aGVyIHRoYW4gYW4gYXJyYXkgaW4gYW4gb2JqZWN0XG5cdFx0ICogICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICBcImFqYXhcIjoge1xuXHRcdCAqICAgICAgIFwidXJsXCI6IFwiZGF0YS5qc29uXCIsXG5cdFx0ICogICAgICAgXCJkYXRhU3JjXCI6IFwiXCJcblx0XHQgKiAgICAgfVxuXHRcdCAqICAgfSApO1xuXHRcdCAqXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAgIC8vIE1hbmlwdWxhdGUgdGhlIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIC0gYWRkIGEgbGluayB0byBkYXRhXG5cdFx0ICogICAvLyAobm90ZSB0aGlzIGNhbiwgc2hvdWxkLCBiZSBkb25lIHVzaW5nIGByZW5kZXJgIGZvciB0aGUgY29sdW1uIC0gdGhpc1xuXHRcdCAqICAgLy8gaXMganVzdCBhIHNpbXBsZSBleGFtcGxlIG9mIGhvdyB0aGUgZGF0YSBjYW4gYmUgbWFuaXB1bGF0ZWQpLlxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgXCJhamF4XCI6IHtcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxuXHRcdCAqICAgICAgIFwiZGF0YVNyY1wiOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cdFx0ICogICAgICAgICBmb3IgKCB2YXIgaT0wLCBpZW49anNvbi5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcblx0XHQgKiAgICAgICAgICAganNvbltpXVswXSA9ICc8YSBocmVmPVwiL21lc3NhZ2UvJytqc29uW2ldWzBdKyc+VmlldyBtZXNzYWdlPC9hPic7XG5cdFx0ICogICAgICAgICB9XG5cdFx0ICogICAgICAgICByZXR1cm4ganNvbjtcblx0XHQgKiAgICAgICB9XG5cdFx0ICogICAgIH1cblx0XHQgKiAgIH0gKTtcblx0XHQgKlxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogICAvLyBBZGQgZGF0YSB0byB0aGUgcmVxdWVzdFxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgXCJhamF4XCI6IHtcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxuXHRcdCAqICAgICAgIFwiZGF0YVwiOiBmdW5jdGlvbiAoIGQgKSB7XG5cdFx0ICogICAgICAgICByZXR1cm4ge1xuXHRcdCAqICAgICAgICAgICBcImV4dHJhX3NlYXJjaFwiOiAkKCcjZXh0cmEnKS52YWwoKVxuXHRcdCAqICAgICAgICAgfTtcblx0XHQgKiAgICAgICB9XG5cdFx0ICogICAgIH1cblx0XHQgKiAgIH0gKTtcblx0XHQgKlxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogICAvLyBTZW5kIHJlcXVlc3QgYXMgUE9TVFxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgXCJhamF4XCI6IHtcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxuXHRcdCAqICAgICAgIFwidHlwZVwiOiBcIlBPU1RcIlxuXHRcdCAqICAgICB9XG5cdFx0ICogICB9ICk7XG5cdFx0ICpcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqICAgLy8gR2V0IHRoZSBkYXRhIGZyb20gbG9jYWxTdG9yYWdlIChjb3VsZCBpbnRlcmZhY2Ugd2l0aCBhIGZvcm0gZm9yXG5cdFx0ICogICAvLyBhZGRpbmcsIGVkaXRpbmcgYW5kIHJlbW92aW5nIHJvd3MpLlxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgXCJhamF4XCI6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaywgc2V0dGluZ3MpIHtcblx0XHQgKiAgICAgICBjYWxsYmFjayhcblx0XHQgKiAgICAgICAgIEpTT04ucGFyc2UoIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkYXRhVGFibGVzRGF0YScpIClcblx0XHQgKiAgICAgICApO1xuXHRcdCAqICAgICB9XG5cdFx0ICogICB9ICk7XG5cdFx0ICovXG5cdFx0XCJhamF4XCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGlzIHBhcmFtZXRlciBhbGxvd3MgeW91IHRvIHJlYWRpbHkgc3BlY2lmeSB0aGUgZW50cmllcyBpbiB0aGUgbGVuZ3RoIGRyb3Bcblx0XHQgKiBkb3duIG1lbnUgdGhhdCBEYXRhVGFibGVzIHNob3dzIHdoZW4gcGFnaW5hdGlvbiBpcyBlbmFibGVkLiBJdCBjYW4gYmVcblx0XHQgKiBlaXRoZXIgYSAxRCBhcnJheSBvZiBvcHRpb25zIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgYm90aCB0aGUgZGlzcGxheWVkXG5cdFx0ICogb3B0aW9uIGFuZCB0aGUgdmFsdWUsIG9yIGEgMkQgYXJyYXkgd2hpY2ggd2lsbCB1c2UgdGhlIGFycmF5IGluIHRoZSBmaXJzdFxuXHRcdCAqIHBvc2l0aW9uIGFzIHRoZSB2YWx1ZSwgYW5kIHRoZSBhcnJheSBpbiB0aGUgc2Vjb25kIHBvc2l0aW9uIGFzIHRoZVxuXHRcdCAqIGRpc3BsYXllZCBvcHRpb25zICh1c2VmdWwgZm9yIGxhbmd1YWdlIHN0cmluZ3Mgc3VjaCBhcyAnQWxsJykuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgdGhlIGBwYWdlTGVuZ3RoYCBwcm9wZXJ0eSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0IHRvIHRoZVxuXHRcdCAqIGZpcnN0IHZhbHVlIGdpdmVuIGluIHRoaXMgYXJyYXksIHVubGVzcyBgcGFnZUxlbmd0aGAgaXMgYWxzbyBwcm92aWRlZC5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgWyAxMCwgMjUsIDUwLCAxMDAgXVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25cblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxlbmd0aE1lbnVcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwibGVuZ3RoTWVudVwiOiBbWzEwLCAyNSwgNTAsIC0xXSwgWzEwLCAyNSwgNTAsIFwiQWxsXCJdXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImFMZW5ndGhNZW51XCI6IFsgMTAsIDI1LCA1MCwgMTAwIF0sXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGUgYGNvbHVtbnNgIG9wdGlvbiBpbiB0aGUgaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyIGFsbG93cyB5b3UgdG8gZGVmaW5lXG5cdFx0ICogZGV0YWlscyBhYm91dCB0aGUgd2F5IGluZGl2aWR1YWwgY29sdW1ucyBiZWhhdmUuIEZvciBhIGZ1bGwgbGlzdCBvZlxuXHRcdCAqIGNvbHVtbiBvcHRpb25zIHRoYXQgY2FuIGJlIHNldCwgcGxlYXNlIHNlZVxuXHRcdCAqIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1ufS4gTm90ZSB0aGF0IGlmIHlvdSB1c2UgYGNvbHVtbnNgIHRvXG5cdFx0ICogZGVmaW5lIHlvdXIgY29sdW1ucywgeW91IG11c3QgaGF2ZSBhbiBlbnRyeSBpbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IHNpbmdsZVxuXHRcdCAqIGNvbHVtbiB0aGF0IHlvdSBoYXZlIGluIHlvdXIgdGFibGUgKHRoZXNlIGNhbiBiZSBudWxsIGlmIHlvdSBkb24ndCB3aGljaFxuXHRcdCAqIHRvIHNwZWNpZnkgYW55IG9wdGlvbnMpLlxuXHRcdCAqICBAbWVtYmVyXG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtblxuXHRcdCAqL1xuXHRcdFwiYW9Db2x1bW5zXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFZlcnkgc2ltaWxhciB0byBgY29sdW1uc2AsIGBjb2x1bW5EZWZzYCBhbGxvd3MgeW91IHRvIHRhcmdldCBhIHNwZWNpZmljXG5cdFx0ICogY29sdW1uLCBtdWx0aXBsZSBjb2x1bW5zLCBvciBhbGwgY29sdW1ucywgdXNpbmcgdGhlIGB0YXJnZXRzYCBwcm9wZXJ0eSBvZlxuXHRcdCAqIGVhY2ggb2JqZWN0IGluIHRoZSBhcnJheS4gVGhpcyBhbGxvd3MgZ3JlYXQgZmxleGliaWxpdHkgd2hlbiBjcmVhdGluZ1xuXHRcdCAqIHRhYmxlcywgYXMgdGhlIGBjb2x1bW5EZWZzYCBhcnJheXMgY2FuIGJlIG9mIGFueSBsZW5ndGgsIHRhcmdldGluZyB0aGVcblx0XHQgKiBjb2x1bW5zIHlvdSBzcGVjaWZpY2FsbHkgd2FudC4gYGNvbHVtbkRlZnNgIG1heSB1c2UgYW55IG9mIHRoZSBjb2x1bW5cblx0XHQgKiBvcHRpb25zIGF2YWlsYWJsZToge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW59LCBidXQgaXQgX211c3RfXG5cdFx0ICogaGF2ZSBgdGFyZ2V0c2AgZGVmaW5lZCBpbiBlYWNoIG9iamVjdCBpbiB0aGUgYXJyYXkuIFZhbHVlcyBpbiB0aGUgYHRhcmdldHNgXG5cdFx0ICogYXJyYXkgbWF5IGJlOlxuXHRcdCAqICAgPHVsPlxuXHRcdCAqICAgICA8bGk+YSBzdHJpbmcgLSBjbGFzcyBuYW1lIHdpbGwgYmUgbWF0Y2hlZCBvbiB0aGUgVEggZm9yIHRoZSBjb2x1bW48L2xpPlxuXHRcdCAqICAgICA8bGk+MCBvciBhIHBvc2l0aXZlIGludGVnZXIgLSBjb2x1bW4gaW5kZXggY291bnRpbmcgZnJvbSB0aGUgbGVmdDwvbGk+XG5cdFx0ICogICAgIDxsaT5hIG5lZ2F0aXZlIGludGVnZXIgLSBjb2x1bW4gaW5kZXggY291bnRpbmcgZnJvbSB0aGUgcmlnaHQ8L2xpPlxuXHRcdCAqICAgICA8bGk+dGhlIHN0cmluZyBcIl9hbGxcIiAtIGFsbCBjb2x1bW5zIChpLmUuIGFzc2lnbiBhIGRlZmF1bHQpPC9saT5cblx0XHQgKiAgIDwvdWw+XG5cdFx0ICogIEBtZW1iZXJcblx0XHQgKlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uRGVmc1xuXHRcdCAqL1xuXHRcdFwiYW9Db2x1bW5EZWZzXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBCYXNpY2FsbHkgdGhlIHNhbWUgYXMgYHNlYXJjaGAsIHRoaXMgcGFyYW1ldGVyIGRlZmluZXMgdGhlIGluZGl2aWR1YWwgY29sdW1uXG5cdFx0ICogZmlsdGVyaW5nIHN0YXRlIGF0IGluaXRpYWxpc2F0aW9uIHRpbWUuIFRoZSBhcnJheSBtdXN0IGJlIG9mIHRoZSBzYW1lIHNpemVcblx0XHQgKiBhcyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMsIGFuZCBlYWNoIGVsZW1lbnQgYmUgYW4gb2JqZWN0IHdpdGggdGhlIHBhcmFtZXRlcnNcblx0XHQgKiBgc2VhcmNoYCBhbmQgYGVzY2FwZVJlZ2V4YCAodGhlIGxhdHRlciBpcyBvcHRpb25hbCkuICdudWxsJyBpcyBhbHNvXG5cdFx0ICogYWNjZXB0ZWQgYW5kIHRoZSBkZWZhdWx0IHdpbGwgYmUgdXNlZC5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgT3B0aW9uXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zZWFyY2hDb2xzXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNlYXJjaENvbHNcIjogW1xuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgeyBcInNlYXJjaFwiOiBcIk15IGZpbHRlclwiIH0sXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICB7IFwic2VhcmNoXCI6IFwiXlswLTldXCIsIFwiZXNjYXBlUmVnZXhcIjogZmFsc2UgfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApXG5cdFx0ICovXG5cdFx0XCJhb1NlYXJjaENvbHNcIjogW10sXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiBDU1MgY2xhc3NlcyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIGRpc3BsYXllZCByb3dzLiBUaGlzXG5cdFx0ICogYXJyYXkgbWF5IGJlIG9mIGFueSBsZW5ndGgsIGFuZCBEYXRhVGFibGVzIHdpbGwgYXBwbHkgZWFjaCBjbGFzc1xuXHRcdCAqIHNlcXVlbnRpYWxseSwgbG9vcGluZyB3aGVuIHJlcXVpcmVkLlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBudWxsIDxpPldpbGwgdGFrZSB0aGUgdmFsdWVzIGRldGVybWluZWQgYnkgdGhlIGBvQ2xhc3Nlcy5zdHJpcGUqYFxuXHRcdCAqICAgIG9wdGlvbnM8L2k+XG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvblxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RyaXBlQ2xhc3Nlc1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzdHJpcGVDbGFzc2VzXCI6IFsgJ3N0cmlwMScsICdzdHJpcDInLCAnc3RyaXAzJyBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApXG5cdFx0ICovXG5cdFx0XCJhc1N0cmlwZUNsYXNzZXNcIjogbnVsbCxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIGF1dG9tYXRpYyBjb2x1bW4gd2lkdGggY2FsY3VsYXRpb24uIFRoaXMgY2FuIGJlIGRpc2FibGVkXG5cdFx0ICogYXMgYW4gb3B0aW1pc2F0aW9uIChpdCB0YWtlcyBzb21lIHRpbWUgdG8gY2FsY3VsYXRlIHRoZSB3aWR0aHMpIGlmIHRoZVxuXHRcdCAqIHRhYmxlcyB3aWR0aHMgYXJlIHBhc3NlZCBpbiB1c2luZyBgY29sdW1uc2AuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuYXV0b1dpZHRoXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJhdXRvV2lkdGhcIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiQXV0b1dpZHRoXCI6IHRydWUsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBEZWZlcnJlZCByZW5kZXJpbmcgY2FuIHByb3ZpZGUgRGF0YVRhYmxlcyB3aXRoIGEgaHVnZSBzcGVlZCBib29zdCB3aGVuIHlvdVxuXHRcdCAqIGFyZSB1c2luZyBhbiBBamF4IG9yIEpTIGRhdGEgc291cmNlIGZvciB0aGUgdGFibGUuIFRoaXMgb3B0aW9uLCB3aGVuIHNldCB0b1xuXHRcdCAqIHRydWUsIHdpbGwgY2F1c2UgRGF0YVRhYmxlcyB0byBkZWZlciB0aGUgY3JlYXRpb24gb2YgdGhlIHRhYmxlIGVsZW1lbnRzIGZvclxuXHRcdCAqIGVhY2ggcm93IHVudGlsIHRoZXkgYXJlIG5lZWRlZCBmb3IgYSBkcmF3IC0gc2F2aW5nIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mXG5cdFx0ICogdGltZS5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuZGVmZXJSZW5kZXJcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiYWpheFwiOiBcInNvdXJjZXMvYXJyYXlzLnR4dFwiLFxuXHRcdCAqICAgICAgICBcImRlZmVyUmVuZGVyXCI6IHRydWVcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiRGVmZXJSZW5kZXJcIjogZmFsc2UsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBSZXBsYWNlIGEgRGF0YVRhYmxlIHdoaWNoIG1hdGNoZXMgdGhlIGdpdmVuIHNlbGVjdG9yIGFuZCByZXBsYWNlIGl0IHdpdGhcblx0XHQgKiBvbmUgd2hpY2ggaGFzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBuZXcgaW5pdGlhbGlzYXRpb24gb2JqZWN0IHBhc3NlZC4gSWYgbm9cblx0XHQgKiB0YWJsZSBtYXRjaGVzIHRoZSBzZWxlY3RvciwgdGhlbiB0aGUgbmV3IERhdGFUYWJsZSB3aWxsIGJlIGNvbnN0cnVjdGVkIGFzXG5cdFx0ICogcGVyIG5vcm1hbC5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5kZXN0cm95XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNyb2xsWVwiOiBcIjIwMHB4XCIsXG5cdFx0ICogICAgICAgIFwicGFnaW5hdGVcIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICAgICAgLy8gU29tZSB0aW1lIGxhdGVyLi4uLlxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJmaWx0ZXJcIjogZmFsc2UsXG5cdFx0ICogICAgICAgIFwiZGVzdHJveVwiOiB0cnVlXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYkRlc3Ryb3lcIjogZmFsc2UsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBmaWx0ZXJpbmcgb2YgZGF0YS4gRmlsdGVyaW5nIGluIERhdGFUYWJsZXMgaXMgXCJzbWFydFwiIGluXG5cdFx0ICogdGhhdCBpdCBhbGxvd3MgdGhlIGVuZCB1c2VyIHRvIGlucHV0IG11bHRpcGxlIHdvcmRzIChzcGFjZSBzZXBhcmF0ZWQpIGFuZFxuXHRcdCAqIHdpbGwgbWF0Y2ggYSByb3cgY29udGFpbmluZyB0aG9zZSB3b3JkcywgZXZlbiBpZiBub3QgaW4gdGhlIG9yZGVyIHRoYXQgd2FzXG5cdFx0ICogc3BlY2lmaWVkICh0aGlzIGFsbG93IG1hdGNoaW5nIGFjcm9zcyBtdWx0aXBsZSBjb2x1bW5zKS4gTm90ZSB0aGF0IGlmIHlvdVxuXHRcdCAqIHdpc2ggdG8gdXNlIGZpbHRlcmluZyBpbiBEYXRhVGFibGVzIHRoaXMgbXVzdCByZW1haW4gJ3RydWUnIC0gdG8gcmVtb3ZlIHRoZVxuXHRcdCAqIGRlZmF1bHQgZmlsdGVyaW5nIGlucHV0IGJveCBhbmQgcmV0YWluIGZpbHRlcmluZyBhYmlsaXRpZXMsIHBsZWFzZSB1c2Vcblx0XHQgKiB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzLmRvbX0uXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc2VhcmNoaW5nXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzZWFyY2hpbmdcIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiRmlsdGVyXCI6IHRydWUsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgdGFibGUgaW5mb3JtYXRpb24gZGlzcGxheS4gVGhpcyBzaG93cyBpbmZvcm1hdGlvblxuXHRcdCAqIGFib3V0IHRoZSBkYXRhIHRoYXQgaXMgY3VycmVudGx5IHZpc2libGUgb24gdGhlIHBhZ2UsIGluY2x1ZGluZyBpbmZvcm1hdGlvblxuXHRcdCAqIGFib3V0IGZpbHRlcmVkIGRhdGEgaWYgdGhhdCBhY3Rpb24gaXMgYmVpbmcgcGVyZm9ybWVkLlxuXHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmluZm9cblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImluZm9cIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiSW5mb1wiOiB0cnVlLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIGpRdWVyeSBVSSBUaGVtZVJvbGxlciBzdXBwb3J0IChyZXF1aXJlZCBhcyBUaGVtZVJvbGxlciByZXF1aXJlcyBzb21lXG5cdFx0ICogc2xpZ2h0bHkgZGlmZmVyZW50IGFuZCBhZGRpdGlvbmFsIG1hcmstdXAgZnJvbSB3aGF0IERhdGFUYWJsZXMgaGFzXG5cdFx0ICogdHJhZGl0aW9uYWxseSB1c2VkKS5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMualF1ZXJ5VUlcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwialF1ZXJ5VUlcIjogdHJ1ZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImJKUXVlcnlVSVwiOiBmYWxzZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEFsbG93cyB0aGUgZW5kIHVzZXIgdG8gc2VsZWN0IHRoZSBzaXplIG9mIGEgZm9ybWF0dGVkIHBhZ2UgZnJvbSBhIHNlbGVjdFxuXHRcdCAqIG1lbnUgKHNpemVzIGFyZSAxMCwgMjUsIDUwIGFuZCAxMDApLiBSZXF1aXJlcyBwYWdpbmF0aW9uIChgcGFnaW5hdGVgKS5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sZW5ndGhDaGFuZ2Vcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImxlbmd0aENoYW5nZVwiOiBmYWxzZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImJMZW5ndGhDaGFuZ2VcIjogdHJ1ZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHBhZ2luYXRpb24uXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucGFnaW5nXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJwYWdpbmdcIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiUGFnaW5hdGVcIjogdHJ1ZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHRoZSBkaXNwbGF5IG9mIGEgJ3Byb2Nlc3NpbmcnIGluZGljYXRvciB3aGVuIHRoZSB0YWJsZSBpc1xuXHRcdCAqIGJlaW5nIHByb2Nlc3NlZCAoZS5nLiBhIHNvcnQpLiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHRhYmxlcyB3aXRoXG5cdFx0ICogbGFyZ2UgYW1vdW50cyBvZiBkYXRhIHdoZXJlIGl0IGNhbiB0YWtlIGEgbm90aWNlYWJsZSBhbW91bnQgb2YgdGltZSB0byBzb3J0XG5cdFx0ICogdGhlIGVudHJpZXMuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgZmFsc2Vcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnByb2Nlc3Npbmdcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInByb2Nlc3NpbmdcIjogdHJ1ZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImJQcm9jZXNzaW5nXCI6IGZhbHNlLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIERhdGFUYWJsZXMgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gc2VsZWN0b3IuIE5vdGUgdGhhdCBpZiB0aGVcblx0XHQgKiB0YWJsZSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpc2VkLCB0aGlzIHBhcmFtZXRlciB3aWxsIGNhdXNlIERhdGFUYWJsZXNcblx0XHQgKiB0byBzaW1wbHkgcmV0dXJuIHRoZSBvYmplY3QgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIHNldCB1cCAtIGl0IHdpbGwgbm90IHRha2Vcblx0XHQgKiBhY2NvdW50IG9mIGFueSBjaGFuZ2VzIHlvdSBtaWdodCBoYXZlIG1hZGUgdG8gdGhlIGluaXRpYWxpc2F0aW9uIG9iamVjdFxuXHRcdCAqIHBhc3NlZCB0byBEYXRhVGFibGVzIChzZXR0aW5nIHRoaXMgcGFyYW1ldGVyIHRvIHRydWUgaXMgYW4gYWNrbm93bGVkZ2VtZW50XG5cdFx0ICogdGhhdCB5b3UgdW5kZXJzdGFuZCB0aGlzKS4gYGRlc3Ryb3lgIGNhbiBiZSB1c2VkIHRvIHJlaW5pdGlhbGlzZSBhIHRhYmxlIGlmXG5cdFx0ICogeW91IG5lZWQuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgZmFsc2Vcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucmV0cmlldmVcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgIGluaXRUYWJsZSgpO1xuXHRcdCAqICAgICAgdGFibGVBY3Rpb25zKCk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogICAgZnVuY3Rpb24gaW5pdFRhYmxlICgpXG5cdFx0ICogICAge1xuXHRcdCAqICAgICAgcmV0dXJuICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic2Nyb2xsWVwiOiBcIjIwMHB4XCIsXG5cdFx0ICogICAgICAgIFwicGFnaW5hdGVcIjogZmFsc2UsXG5cdFx0ICogICAgICAgIFwicmV0cmlldmVcIjogdHJ1ZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH1cblx0XHQgKlxuXHRcdCAqICAgIGZ1bmN0aW9uIHRhYmxlQWN0aW9ucyAoKVxuXHRcdCAqICAgIHtcblx0XHQgKiAgICAgIHZhciB0YWJsZSA9IGluaXRUYWJsZSgpO1xuXHRcdCAqICAgICAgLy8gcGVyZm9ybSBBUEkgb3BlcmF0aW9ucyB3aXRoIG9UYWJsZVxuXHRcdCAqICAgIH1cblx0XHQgKi9cblx0XHRcImJSZXRyaWV2ZVwiOiBmYWxzZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gdmVydGljYWwgKHkpIHNjcm9sbGluZyBpcyBlbmFibGVkLCBEYXRhVGFibGVzIHdpbGwgZm9yY2UgdGhlIGhlaWdodCBvZlxuXHRcdCAqIHRoZSB0YWJsZSdzIHZpZXdwb3J0IHRvIHRoZSBnaXZlbiBoZWlnaHQgYXQgYWxsIHRpbWVzICh1c2VmdWwgZm9yIGxheW91dCkuXG5cdFx0ICogSG93ZXZlciwgdGhpcyBjYW4gbG9vayBvZGQgd2hlbiBmaWx0ZXJpbmcgZGF0YSBkb3duIHRvIGEgc21hbGwgZGF0YSBzZXQsXG5cdFx0ICogYW5kIHRoZSBmb290ZXIgaXMgbGVmdCBcImZsb2F0aW5nXCIgZnVydGhlciBkb3duLiBUaGlzIHBhcmFtZXRlciAod2hlblxuXHRcdCAqIGVuYWJsZWQpIHdpbGwgY2F1c2UgRGF0YVRhYmxlcyB0byBjb2xsYXBzZSB0aGUgdGFibGUncyB2aWV3cG9ydCBkb3duIHdoZW5cblx0XHQgKiB0aGUgcmVzdWx0IHNldCB3aWxsIGZpdCB3aXRoaW4gdGhlIGdpdmVuIFkgaGVpZ2h0LlxuXHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNjcm9sbENvbGxhcHNlXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNjcm9sbFlcIjogXCIyMDBcIixcblx0XHQgKiAgICAgICAgXCJzY3JvbGxDb2xsYXBzZVwiOiB0cnVlXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYlNjcm9sbENvbGxhcHNlXCI6IGZhbHNlLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogQ29uZmlndXJlIERhdGFUYWJsZXMgdG8gdXNlIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcuIE5vdGUgdGhhdCB0aGVcblx0XHQgKiBgYWpheGAgcGFyYW1ldGVyIG11c3QgYWxzbyBiZSBnaXZlbiBpbiBvcmRlciB0byBnaXZlIERhdGFUYWJsZXMgYVxuXHRcdCAqIHNvdXJjZSB0byBvYnRhaW4gdGhlIHJlcXVpcmVkIGRhdGEgZm9yIGVhY2ggZHJhdy5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAZHRvcHQgU2VydmVyLXNpZGVcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlcnZlclNpZGVcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNlcnZlclNpZGVcIjogdHJ1ZSxcblx0XHQgKiAgICAgICAgXCJhamF4XCI6IFwieGhyLnBocFwiXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYlNlcnZlclNpZGVcIjogZmFsc2UsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBzb3J0aW5nIG9mIGNvbHVtbnMuIFNvcnRpbmcgb2YgaW5kaXZpZHVhbCBjb2x1bW5zIGNhbiBiZVxuXHRcdCAqIGRpc2FibGVkIGJ5IHRoZSBgc29ydGFibGVgIG9wdGlvbiBmb3IgZWFjaCBjb2x1bW4uXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMub3JkZXJpbmdcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcIm9yZGVyaW5nXCI6IGZhbHNlXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYlNvcnRcIjogdHJ1ZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNwbGF5IERhdGFUYWJsZXMnIGFiaWxpdHkgdG8gc29ydCBtdWx0aXBsZSBjb2x1bW5zIGF0IHRoZVxuXHRcdCAqIHNhbWUgdGltZSAoYWN0aXZhdGVkIGJ5IHNoaWZ0LWNsaWNrIGJ5IHRoZSB1c2VyKS5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyTXVsdGlcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIERpc2FibGUgbXVsdGlwbGUgY29sdW1uIHNvcnRpbmcgYWJpbGl0eVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcIm9yZGVyTXVsdGlcIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiU29ydE11bHRpXCI6IHRydWUsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBBbGxvd3MgY29udHJvbCBvdmVyIHdoZXRoZXIgRGF0YVRhYmxlcyBzaG91bGQgdXNlIHRoZSB0b3AgKHRydWUpIHVuaXF1ZVxuXHRcdCAqIGNlbGwgdGhhdCBpcyBmb3VuZCBmb3IgYSBzaW5nbGUgY29sdW1uLCBvciB0aGUgYm90dG9tIChmYWxzZSAtIGRlZmF1bHQpLlxuXHRcdCAqIFRoaXMgaXMgdXNlZnVsIHdoZW4gdXNpbmcgY29tcGxleCBoZWFkZXJzLlxuXHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyQ2VsbHNUb3Bcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwib3JkZXJDZWxsc1RvcFwiOiB0cnVlXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYlNvcnRDZWxsc1RvcFwiOiBmYWxzZSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHRoZSBhZGRpdGlvbiBvZiB0aGUgY2xhc3NlcyBgc29ydGluZ1xcXzFgLCBgc29ydGluZ1xcXzJgIGFuZFxuXHRcdCAqIGBzb3J0aW5nXFxfM2AgdG8gdGhlIGNvbHVtbnMgd2hpY2ggYXJlIGN1cnJlbnRseSBiZWluZyBzb3J0ZWQgb24uIFRoaXMgaXNcblx0XHQgKiBwcmVzZW50ZWQgYXMgYSBmZWF0dXJlIHN3aXRjaCBhcyBpdCBjYW4gaW5jcmVhc2UgcHJvY2Vzc2luZyB0aW1lICh3aGlsZVxuXHRcdCAqIGNsYXNzZXMgYXJlIHJlbW92ZWQgYW5kIGFkZGVkKSBzbyBmb3IgbGFyZ2UgZGF0YSBzZXRzIHlvdSBtaWdodCB3YW50IHRvXG5cdFx0ICogdHVybiB0aGlzIG9mZi5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5vcmRlckNsYXNzZXNcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcIm9yZGVyQ2xhc3Nlc1wiOiBmYWxzZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImJTb3J0Q2xhc3Nlc1wiOiB0cnVlLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIG9yIGRpc2FibGUgc3RhdGUgc2F2aW5nLiBXaGVuIGVuYWJsZWQgSFRNTDUgYGxvY2FsU3RvcmFnZWAgd2lsbCBiZVxuXHRcdCAqIHVzZWQgdG8gc2F2ZSB0YWJsZSBkaXNwbGF5IGluZm9ybWF0aW9uIHN1Y2ggYXMgcGFnaW5hdGlvbiBpbmZvcm1hdGlvbixcblx0XHQgKiBkaXNwbGF5IGxlbmd0aCwgZmlsdGVyaW5nIGFuZCBzb3J0aW5nLiBBcyBzdWNoIHdoZW4gdGhlIGVuZCB1c2VyIHJlbG9hZHNcblx0XHQgKiB0aGUgcGFnZSB0aGUgZGlzcGxheSBkaXNwbGF5IHdpbGwgbWF0Y2ggd2hhdCB0aHkgaGFkIHByZXZpb3VzbHkgc2V0IHVwLlxuXHRcdCAqXG5cdFx0ICogRHVlIHRvIHRoZSB1c2Ugb2YgYGxvY2FsU3RvcmFnZWAgdGhlIGRlZmF1bHQgc3RhdGUgc2F2aW5nIGlzIG5vdCBzdXBwb3J0ZWRcblx0XHQgKiBpbiBJRTYgb3IgNy4gSWYgc3RhdGUgc2F2aW5nIGlzIHJlcXVpcmVkIGluIHRob3NlIGJyb3dzZXJzLCB1c2Vcblx0XHQgKiBgc3RhdGVTYXZlQ2FsbGJhY2tgIHRvIHByb3ZpZGUgYSBzdG9yYWdlIHNvbHV0aW9uIHN1Y2ggYXMgY29va2llcy5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RhdGVTYXZlXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVcIjogdHJ1ZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImJTdGF0ZVNhdmVcIjogZmFsc2UsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIGEgVFIgZWxlbWVudCBpcyBjcmVhdGVkIChhbmQgYWxsIFREIGNoaWxkXG5cdFx0ICogZWxlbWVudHMgaGF2ZSBiZWVuIGluc2VydGVkKSwgb3IgcmVnaXN0ZXJlZCBpZiB1c2luZyBhIERPTSBzb3VyY2UsIGFsbG93aW5nXG5cdFx0ICogbWFuaXB1bGF0aW9uIG9mIHRoZSBUUiBlbGVtZW50IChhZGRpbmcgY2xhc3NlcyBldGMpLlxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxuXHRcdCAqICBAcGFyYW0ge25vZGV9IHJvdyBcIlRSXCIgZWxlbWVudCBmb3IgdGhlIGN1cnJlbnQgcm93XG5cdFx0ICogIEBwYXJhbSB7YXJyYXl9IGRhdGEgUmF3IGRhdGEgYXJyYXkgZm9yIHRoaXMgcm93XG5cdFx0ICogIEBwYXJhbSB7aW50fSBkYXRhSW5kZXggVGhlIGluZGV4IG9mIHRoaXMgcm93IGluIHRoZSBpbnRlcm5hbCBhb0RhdGEgYXJyYXlcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jcmVhdGVkUm93XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNyZWF0ZWRSb3dcIjogZnVuY3Rpb24oIHJvdywgZGF0YSwgZGF0YUluZGV4ICkge1xuXHRcdCAqICAgICAgICAgIC8vIEJvbGQgdGhlIGdyYWRlIGZvciBhbGwgJ0EnIGdyYWRlIGJyb3dzZXJzXG5cdFx0ICogICAgICAgICAgaWYgKCBkYXRhWzRdID09IFwiQVwiIClcblx0XHQgKiAgICAgICAgICB7XG5cdFx0ICogICAgICAgICAgICAkKCd0ZDplcSg0KScsIHJvdykuaHRtbCggJzxiPkE8L2I+JyApO1xuXHRcdCAqICAgICAgICAgIH1cblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImZuQ3JlYXRlZFJvd1wiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb24gZXZlcnkgJ2RyYXcnIGV2ZW50LCBhbmQgYWxsb3dzIHlvdSB0b1xuXHRcdCAqIGR5bmFtaWNhbGx5IG1vZGlmeSBhbnkgYXNwZWN0IHlvdSB3YW50IGFib3V0IHRoZSBjcmVhdGVkIERPTS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuZHJhd0NhbGxiYWNrXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImRyYXdDYWxsYmFja1wiOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0ICogICAgICAgICAgYWxlcnQoICdEYXRhVGFibGVzIGhhcyByZWRyYXduIHRoZSB0YWJsZScgKTtcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImZuRHJhd0NhbGxiYWNrXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBJZGVudGljYWwgdG8gZm5IZWFkZXJDYWxsYmFjaygpIGJ1dCBmb3IgdGhlIHRhYmxlIGZvb3RlciB0aGlzIGZ1bmN0aW9uXG5cdFx0ICogYWxsb3dzIHlvdSB0byBtb2RpZnkgdGhlIHRhYmxlIGZvb3RlciBvbiBldmVyeSAnZHJhdycgZXZlbnQuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7bm9kZX0gZm9vdCBcIlRSXCIgZWxlbWVudCBmb3IgdGhlIGZvb3RlclxuXHRcdCAqICBAcGFyYW0ge2FycmF5fSBkYXRhIEZ1bGwgdGFibGUgZGF0YSAoYXMgZGVyaXZlZCBmcm9tIHRoZSBvcmlnaW5hbCBIVE1MKVxuXHRcdCAqICBAcGFyYW0ge2ludH0gc3RhcnQgSW5kZXggZm9yIHRoZSBjdXJyZW50IGRpc3BsYXkgc3RhcnRpbmcgcG9pbnQgaW4gdGhlXG5cdFx0ICogICAgZGlzcGxheSBhcnJheVxuXHRcdCAqICBAcGFyYW0ge2ludH0gZW5kIEluZGV4IGZvciB0aGUgY3VycmVudCBkaXNwbGF5IGVuZGluZyBwb2ludCBpbiB0aGVcblx0XHQgKiAgICBkaXNwbGF5IGFycmF5XG5cdFx0ICogIEBwYXJhbSB7YXJyYXkgaW50fSBkaXNwbGF5IEluZGV4IGFycmF5IHRvIHRyYW5zbGF0ZSB0aGUgdmlzdWFsIHBvc2l0aW9uXG5cdFx0ICogICAgdG8gdGhlIGZ1bGwgZGF0YSBhcnJheVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3Ncblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmZvb3RlckNhbGxiYWNrXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImZvb3RlckNhbGxiYWNrXCI6IGZ1bmN0aW9uKCB0Zm9vdCwgZGF0YSwgc3RhcnQsIGVuZCwgZGlzcGxheSApIHtcblx0XHQgKiAgICAgICAgICB0Zm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGgnKVswXS5pbm5lckhUTUwgPSBcIlN0YXJ0aW5nIGluZGV4IGlzIFwiK3N0YXJ0O1xuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApXG5cdFx0ICovXG5cdFx0XCJmbkZvb3RlckNhbGxiYWNrXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBXaGVuIHJlbmRlcmluZyBsYXJnZSBudW1iZXJzIGluIHRoZSBpbmZvcm1hdGlvbiBlbGVtZW50IGZvciB0aGUgdGFibGVcblx0XHQgKiAoaS5lLiBcIlNob3dpbmcgMSB0byAxMCBvZiA1NyBlbnRyaWVzXCIpIERhdGFUYWJsZXMgd2lsbCByZW5kZXIgbGFyZ2UgbnVtYmVyc1xuXHRcdCAqIHRvIGhhdmUgYSBjb21tYSBzZXBhcmF0b3IgZm9yIHRoZSAndGhvdXNhbmRzJyB1bml0cyAoZS5nLiAxIG1pbGxpb24gaXNcblx0XHQgKiByZW5kZXJlZCBhcyBcIjEsMDAwLDAwMFwiKSB0byBoZWxwIHJlYWRhYmlsaXR5IGZvciB0aGUgZW5kIHVzZXIuIFRoaXNcblx0XHQgKiBmdW5jdGlvbiB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG1ldGhvZCBEYXRhVGFibGVzIHVzZXMuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBtZW1iZXJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IHRvRm9ybWF0IG51bWJlciB0byBiZSBmb3JtYXR0ZWRcblx0XHQgKiAgQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIHN0cmluZyBmb3IgRGF0YVRhYmxlcyB0byBzaG93IHRoZSBudW1iZXJcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5mb3JtYXROdW1iZXJcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIEZvcm1hdCBhIG51bWJlciB1c2luZyBhIHNpbmdsZSBxdW90ZSBmb3IgdGhlIHNlcGFyYXRvciAobm90ZSB0aGF0XG5cdFx0ICogICAgLy8gdGhpcyBjYW4gYWxzbyBiZSBkb25lIHdpdGggdGhlIGxhbmd1YWdlLnRob3VzYW5kcyBvcHRpb24pXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJmb3JtYXROdW1iZXJcIjogZnVuY3Rpb24gKCB0b0Zvcm1hdCApIHtcblx0XHQgKiAgICAgICAgICByZXR1cm4gdG9Gb3JtYXQudG9TdHJpbmcoKS5yZXBsYWNlKFxuXHRcdCAqICAgICAgICAgICAgL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiJ1wiXG5cdFx0ICogICAgICAgICAgKTtcblx0XHQgKiAgICAgICAgfTtcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJmbkZvcm1hdE51bWJlclwiOiBmdW5jdGlvbiAoIHRvRm9ybWF0ICkge1xuXHRcdFx0cmV0dXJuIHRvRm9ybWF0LnRvU3RyaW5nKCkucmVwbGFjZShcblx0XHRcdFx0L1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csXG5cdFx0XHRcdHRoaXMub0xhbmd1YWdlLnNUaG91c2FuZHNcblx0XHRcdCk7XG5cdFx0fSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGV2ZXJ5ICdkcmF3JyBldmVudCwgYW5kIGFsbG93cyB5b3UgdG9cblx0XHQgKiBkeW5hbWljYWxseSBtb2RpZnkgdGhlIGhlYWRlciByb3cuIFRoaXMgY2FuIGJlIHVzZWQgdG8gY2FsY3VsYXRlIGFuZFxuXHRcdCAqIGRpc3BsYXkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0YWJsZS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQHBhcmFtIHtub2RlfSBoZWFkIFwiVFJcIiBlbGVtZW50IGZvciB0aGUgaGVhZGVyXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl9IGRhdGEgRnVsbCB0YWJsZSBkYXRhIChhcyBkZXJpdmVkIGZyb20gdGhlIG9yaWdpbmFsIEhUTUwpXG5cdFx0ICogIEBwYXJhbSB7aW50fSBzdGFydCBJbmRleCBmb3IgdGhlIGN1cnJlbnQgZGlzcGxheSBzdGFydGluZyBwb2ludCBpbiB0aGVcblx0XHQgKiAgICBkaXNwbGF5IGFycmF5XG5cdFx0ICogIEBwYXJhbSB7aW50fSBlbmQgSW5kZXggZm9yIHRoZSBjdXJyZW50IGRpc3BsYXkgZW5kaW5nIHBvaW50IGluIHRoZVxuXHRcdCAqICAgIGRpc3BsYXkgYXJyYXlcblx0XHQgKiAgQHBhcmFtIHthcnJheSBpbnR9IGRpc3BsYXkgSW5kZXggYXJyYXkgdG8gdHJhbnNsYXRlIHRoZSB2aXN1YWwgcG9zaXRpb25cblx0XHQgKiAgICB0byB0aGUgZnVsbCBkYXRhIGFycmF5XG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuaGVhZGVyQ2FsbGJhY2tcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiZmhlYWRlckNhbGxiYWNrXCI6IGZ1bmN0aW9uKCBoZWFkLCBkYXRhLCBzdGFydCwgZW5kLCBkaXNwbGF5ICkge1xuXHRcdCAqICAgICAgICAgIGhlYWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RoJylbMF0uaW5uZXJIVE1MID0gXCJEaXNwbGF5aW5nIFwiKyhlbmQtc3RhcnQpK1wiIHJlY29yZHNcIjtcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKVxuXHRcdCAqL1xuXHRcdFwiZm5IZWFkZXJDYWxsYmFja1wiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhlIGluZm9ybWF0aW9uIGVsZW1lbnQgY2FuIGJlIHVzZWQgdG8gY29udmV5IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50XG5cdFx0ICogc3RhdGUgb2YgdGhlIHRhYmxlLiBBbHRob3VnaCB0aGUgaW50ZXJuYXRpb25hbGlzYXRpb24gb3B0aW9ucyBwcmVzZW50ZWQgYnlcblx0XHQgKiBEYXRhVGFibGVzIGFyZSBxdWl0ZSBjYXBhYmxlIG9mIGRlYWxpbmcgd2l0aCBtb3N0IGN1c3RvbWlzYXRpb25zLCB0aGVyZSBtYXlcblx0XHQgKiBiZSB0aW1lcyB3aGVyZSB5b3Ugd2lzaCB0byBjdXN0b21pc2UgdGhlIHN0cmluZyBmdXJ0aGVyLiBUaGlzIGNhbGxiYWNrXG5cdFx0ICogYWxsb3dzIHlvdSB0byBkbyBleGFjdGx5IHRoYXQuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0XHQgKiAgQHBhcmFtIHtpbnR9IHN0YXJ0IFN0YXJ0aW5nIHBvc2l0aW9uIGluIGRhdGEgZm9yIHRoZSBkcmF3XG5cdFx0ICogIEBwYXJhbSB7aW50fSBlbmQgRW5kIHBvc2l0aW9uIGluIGRhdGEgZm9yIHRoZSBkcmF3XG5cdFx0ICogIEBwYXJhbSB7aW50fSBtYXggVG90YWwgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHRhYmxlIChyZWdhcmRsZXNzIG9mXG5cdFx0ICogICAgZmlsdGVyaW5nKVxuXHRcdCAqICBAcGFyYW0ge2ludH0gdG90YWwgVG90YWwgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIGRhdGEgc2V0LCBhZnRlciBmaWx0ZXJpbmdcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHByZSBUaGUgc3RyaW5nIHRoYXQgRGF0YVRhYmxlcyBoYXMgZm9ybWF0dGVkIHVzaW5nIGl0J3Ncblx0XHQgKiAgICBvd24gcnVsZXNcblx0XHQgKiAgQHJldHVybnMge3N0cmluZ30gVGhlIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGluZm9ybWF0aW9uIGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuaW5mb0NhbGxiYWNrXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgXCJpbmZvQ2FsbGJhY2tcIjogZnVuY3Rpb24oIHNldHRpbmdzLCBzdGFydCwgZW5kLCBtYXgsIHRvdGFsLCBwcmUgKSB7XG5cdFx0ICogICAgICAgIHJldHVybiBzdGFydCArXCIgdG8gXCIrIGVuZDtcblx0XHQgKiAgICAgIH1cblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJmbkluZm9DYWxsYmFja1wiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsbGVkIHdoZW4gdGhlIHRhYmxlIGhhcyBiZWVuIGluaXRpYWxpc2VkLiBOb3JtYWxseSBEYXRhVGFibGVzIHdpbGxcblx0XHQgKiBpbml0aWFsaXNlIHNlcXVlbnRpYWxseSBhbmQgdGhlcmUgd2lsbCBiZSBubyBuZWVkIGZvciB0aGlzIGZ1bmN0aW9uLFxuXHRcdCAqIGhvd2V2ZXIsIHRoaXMgZG9lcyBub3QgaG9sZCB0cnVlIHdoZW4gdXNpbmcgZXh0ZXJuYWwgbGFuZ3VhZ2UgaW5mb3JtYXRpb25cblx0XHQgKiBzaW5jZSB0aGF0IGlzIG9idGFpbmVkIHVzaW5nIGFuIGFzeW5jIFhIUiBjYWxsLlxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IGpzb24gVGhlIEpTT04gb2JqZWN0IHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyIC0gb25seVxuXHRcdCAqICAgIHByZXNlbnQgaWYgY2xpZW50LXNpZGUgQWpheCBzb3VyY2VkIGRhdGEgaXMgdXNlZFxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3Ncblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmluaXRDb21wbGV0ZVxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJpbml0Q29tcGxldGVcIjogZnVuY3Rpb24oc2V0dGluZ3MsIGpzb24pIHtcblx0XHQgKiAgICAgICAgICBhbGVydCggJ0RhdGFUYWJsZXMgaGFzIGZpbmlzaGVkIGl0cyBpbml0aWFsaXNhdGlvbi4nICk7XG5cdFx0ICogICAgICAgIH1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9IClcblx0XHQgKi9cblx0XHRcImZuSW5pdENvbXBsZXRlXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBDYWxsZWQgYXQgdGhlIHZlcnkgc3RhcnQgb2YgZWFjaCB0YWJsZSBkcmF3IGFuZCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlXG5cdFx0ICogZHJhdyBieSByZXR1cm5pbmcgZmFsc2UsIGFueSBvdGhlciByZXR1cm4gKGluY2x1ZGluZyB1bmRlZmluZWQpIHJlc3VsdHMgaW5cblx0XHQgKiB0aGUgZnVsbCBkcmF3IG9jY3VycmluZykuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHRcdCAqICBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2lsbCBjYW5jZWwgdGhlIGRyYXcsIGFueXRoaW5nIGVsc2UgKGluY2x1ZGluZyBub1xuXHRcdCAqICAgIHJldHVybikgd2lsbCBhbGxvdyBpdCB0byBjb21wbGV0ZS5cblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5wcmVEcmF3Q2FsbGJhY2tcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwicHJlRHJhd0NhbGxiYWNrXCI6IGZ1bmN0aW9uKCBzZXR0aW5ncyApIHtcblx0XHQgKiAgICAgICAgICBpZiAoICQoJyN0ZXN0JykudmFsKCkgPT0gMSApIHtcblx0XHQgKiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgKiAgICAgICAgICB9XG5cdFx0ICogICAgICAgIH1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJmblByZURyYXdDYWxsYmFja1wiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvICdwb3N0IHByb2Nlc3MnIGVhY2ggcm93IGFmdGVyIGl0IGhhdmUgYmVlblxuXHRcdCAqIGdlbmVyYXRlZCBmb3IgZWFjaCB0YWJsZSBkcmF3LCBidXQgYmVmb3JlIGl0IGlzIHJlbmRlcmVkIG9uIHNjcmVlbi4gVGhpc1xuXHRcdCAqIGZ1bmN0aW9uIG1pZ2h0IGJlIHVzZWQgZm9yIHNldHRpbmcgdGhlIHJvdyBjbGFzcyBuYW1lIGV0Yy5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQHBhcmFtIHtub2RlfSByb3cgXCJUUlwiIGVsZW1lbnQgZm9yIHRoZSBjdXJyZW50IHJvd1xuXHRcdCAqICBAcGFyYW0ge2FycmF5fSBkYXRhIFJhdyBkYXRhIGFycmF5IGZvciB0aGlzIHJvd1xuXHRcdCAqICBAcGFyYW0ge2ludH0gZGlzcGxheUluZGV4IFRoZSBkaXNwbGF5IGluZGV4IGZvciB0aGUgY3VycmVudCB0YWJsZSBkcmF3XG5cdFx0ICogIEBwYXJhbSB7aW50fSBkaXNwbGF5SW5kZXhGdWxsIFRoZSBpbmRleCBvZiB0aGUgZGF0YSBpbiB0aGUgZnVsbCBsaXN0IG9mXG5cdFx0ICogICAgcm93cyAoYWZ0ZXIgZmlsdGVyaW5nKVxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3Ncblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnJvd0NhbGxiYWNrXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInJvd0NhbGxiYWNrXCI6IGZ1bmN0aW9uKCByb3csIGRhdGEsIGRpc3BsYXlJbmRleCwgZGlzcGxheUluZGV4RnVsbCApIHtcblx0XHQgKiAgICAgICAgICAvLyBCb2xkIHRoZSBncmFkZSBmb3IgYWxsICdBJyBncmFkZSBicm93c2Vyc1xuXHRcdCAqICAgICAgICAgIGlmICggZGF0YVs0XSA9PSBcIkFcIiApIHtcblx0XHQgKiAgICAgICAgICAgICQoJ3RkOmVxKDQpJywgcm93KS5odG1sKCAnPGI+QTwvYj4nICk7XG5cdFx0ICogICAgICAgICAgfVxuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiZm5Sb3dDYWxsYmFja1wiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogX19EZXByZWNhdGVkX18gVGhlIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgYnkgdGhpcyBwYXJhbWV0ZXIgaGFzIG5vdyBiZWVuXG5cdFx0ICogc3VwZXJzZWRlZCBieSB0aGF0IHByb3ZpZGVkIHRocm91Z2ggYGFqYXhgLCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBwYXJhbWV0ZXIgYWxsb3dzIHlvdSB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBmdW5jdGlvbiB3aGljaCBvYnRhaW5zXG5cdFx0ICogdGhlIGRhdGEgZnJvbSB0aGUgc2VydmVyIHNvIHNvbWV0aGluZyBtb3JlIHN1aXRhYmxlIGZvciB5b3VyIGFwcGxpY2F0aW9uLlxuXHRcdCAqIEZvciBleGFtcGxlIHlvdSBjb3VsZCB1c2UgUE9TVCBkYXRhLCBvciBwdWxsIGluZm9ybWF0aW9uIGZyb20gYSBHZWFycyBvclxuXHRcdCAqIEFJUiBkYXRhYmFzZS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQG1lbWJlclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gc291cmNlIEhUVFAgc291cmNlIHRvIG9idGFpbiB0aGUgZGF0YSBmcm9tIChgYWpheGApXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl9IGRhdGEgQSBrZXkvdmFsdWUgcGFpciBvYmplY3QgY29udGFpbmluZyB0aGUgZGF0YSB0byBzZW5kXG5cdFx0ICogICAgdG8gdGhlIHNlcnZlclxuXHRcdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gY29tcGxldGlvbiBvZiB0aGUgZGF0YSBnZXRcblx0XHQgKiAgICBwcm9jZXNzIHRoYXQgd2lsbCBkcmF3IHRoZSBkYXRhIG9uIHRoZSBwYWdlLlxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXG5cdFx0ICogIEBkdG9wdCBTZXJ2ZXItc2lkZVxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc2VydmVyRGF0YVxuXHRcdCAqXG5cdFx0ICogIEBkZXByZWNhdGVkIDEuMTAuIFBsZWFzZSB1c2UgYGFqYXhgIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHkgbm93LlxuXHRcdCAqL1xuXHRcdFwiZm5TZXJ2ZXJEYXRhXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBfX0RlcHJlY2F0ZWRfXyBUaGUgZnVuY3Rpb25hbGl0eSBwcm92aWRlZCBieSB0aGlzIHBhcmFtZXRlciBoYXMgbm93IGJlZW5cblx0XHQgKiBzdXBlcnNlZGVkIGJ5IHRoYXQgcHJvdmlkZWQgdGhyb3VnaCBgYWpheGAsIHdoaWNoIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiAgSXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIHNlbmQgZXh0cmEgZGF0YSB0byB0aGUgc2VydmVyIHdoZW4gbWFraW5nIGFuIEFqYXhcblx0XHQgKiByZXF1ZXN0IC0gZm9yIGV4YW1wbGUgY3VzdG9tIGZpbHRlcmluZyBpbmZvcm1hdGlvbiwgYW5kIHRoaXMgY2FsbGJhY2tcblx0XHQgKiBmdW5jdGlvbiBtYWtlcyBpdCB0cml2aWFsIHRvIHNlbmQgZXh0cmEgaW5mb3JtYXRpb24gdG8gdGhlIHNlcnZlci4gVGhlXG5cdFx0ICogcGFzc2VkIGluIHBhcmFtZXRlciBpcyB0aGUgZGF0YSBzZXQgdGhhdCBoYXMgYmVlbiBjb25zdHJ1Y3RlZCBieVxuXHRcdCAqIERhdGFUYWJsZXMsIGFuZCB5b3UgY2FuIGFkZCB0byB0aGlzIG9yIG1vZGlmeSBpdCBhcyB5b3UgcmVxdWlyZS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQHBhcmFtIHthcnJheX0gZGF0YSBEYXRhIGFycmF5IChhcnJheSBvZiBvYmplY3RzIHdoaWNoIGFyZSBuYW1lL3ZhbHVlXG5cdFx0ICogICAgcGFpcnMpIHRoYXQgaGFzIGJlZW4gY29uc3RydWN0ZWQgYnkgRGF0YVRhYmxlcyBhbmQgd2lsbCBiZSBzZW50IHRvIHRoZVxuXHRcdCAqICAgIHNlcnZlci4gSW4gdGhlIGNhc2Ugb2YgQWpheCBzb3VyY2VkIGRhdGEgd2l0aCBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXG5cdFx0ICogICAgdGhpcyB3aWxsIGJlIGFuIGVtcHR5IGFycmF5LCBmb3Igc2VydmVyLXNpZGUgcHJvY2Vzc2luZyB0aGVyZSB3aWxsIGJlIGFcblx0XHQgKiAgICBzaWduaWZpY2FudCBudW1iZXIgb2YgcGFyYW1ldGVycyFcblx0XHQgKiAgQHJldHVybnMge3VuZGVmaW5lZH0gRW5zdXJlIHRoYXQgeW91IG1vZGlmeSB0aGUgZGF0YSBhcnJheSBwYXNzZWQgaW4sXG5cdFx0ICogICAgYXMgdGhpcyBpcyBwYXNzZWQgYnkgcmVmZXJlbmNlLlxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3Ncblx0XHQgKiAgQGR0b3B0IFNlcnZlci1zaWRlXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zZXJ2ZXJQYXJhbXNcblx0XHQgKlxuXHRcdCAqICBAZGVwcmVjYXRlZCAxLjEwLiBQbGVhc2UgdXNlIGBhamF4YCBmb3IgdGhpcyBmdW5jdGlvbmFsaXR5IG5vdy5cblx0XHQgKi9cblx0XHRcImZuU2VydmVyUGFyYW1zXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBMb2FkIHRoZSB0YWJsZSBzdGF0ZS4gV2l0aCB0aGlzIGZ1bmN0aW9uIHlvdSBjYW4gZGVmaW5lIGZyb20gd2hlcmUsIGFuZCBob3csIHRoZVxuXHRcdCAqIHN0YXRlIG9mIGEgdGFibGUgaXMgbG9hZGVkLiBCeSBkZWZhdWx0IERhdGFUYWJsZXMgd2lsbCBsb2FkIGZyb20gYGxvY2FsU3RvcmFnZWBcblx0XHQgKiBidXQgeW91IG1pZ2h0IHdpc2ggdG8gdXNlIGEgc2VydmVyLXNpZGUgZGF0YWJhc2Ugb3IgY29va2llcy5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQG1lbWJlclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0XHQgKiAgQHJldHVybiB7b2JqZWN0fSBUaGUgRGF0YVRhYmxlcyBzdGF0ZSBvYmplY3QgdG8gYmUgbG9hZGVkXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RhdGVMb2FkQ2FsbGJhY2tcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic3RhdGVTYXZlXCI6IHRydWUsXG5cdFx0ICogICAgICAgIFwic3RhdGVMb2FkQ2FsbGJhY2tcIjogZnVuY3Rpb24gKHNldHRpbmdzKSB7XG5cdFx0ICogICAgICAgICAgdmFyIG87XG5cdFx0ICpcblx0XHQgKiAgICAgICAgICAvLyBTZW5kIGFuIEFqYXggcmVxdWVzdCB0byB0aGUgc2VydmVyIHRvIGdldCB0aGUgZGF0YS4gTm90ZSB0aGF0XG5cdFx0ICogICAgICAgICAgLy8gdGhpcyBpcyBhIHN5bmNocm9ub3VzIHJlcXVlc3QuXG5cdFx0ICogICAgICAgICAgJC5hamF4KCB7XG5cdFx0ICogICAgICAgICAgICBcInVybFwiOiBcIi9zdGF0ZV9sb2FkXCIsXG5cdFx0ICogICAgICAgICAgICBcImFzeW5jXCI6IGZhbHNlLFxuXHRcdCAqICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiBcImpzb25cIixcblx0XHQgKiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAoanNvbikge1xuXHRcdCAqICAgICAgICAgICAgICBvID0ganNvbjtcblx0XHQgKiAgICAgICAgICAgIH1cblx0XHQgKiAgICAgICAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgICAgICAgICByZXR1cm4gbztcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImZuU3RhdGVMb2FkQ2FsbGJhY2tcIjogZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKFxuXHRcdFx0XHRcdChzZXR0aW5ncy5pU3RhdGVEdXJhdGlvbiA9PT0gLTEgPyBzZXNzaW9uU3RvcmFnZSA6IGxvY2FsU3RvcmFnZSkuZ2V0SXRlbShcblx0XHRcdFx0XHRcdCdEYXRhVGFibGVzXycrc2V0dGluZ3Muc0luc3RhbmNlKydfJytsb2NhdGlvbi5wYXRobmFtZVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIHdoaWNoIGFsbG93cyBtb2RpZmljYXRpb24gb2YgdGhlIHNhdmVkIHN0YXRlIHByaW9yIHRvIGxvYWRpbmcgdGhhdCBzdGF0ZS5cblx0XHQgKiBUaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSB0YWJsZSBpcyBsb2FkaW5nIHN0YXRlIGZyb20gdGhlIHN0b3JlZCBkYXRhLCBidXRcblx0XHQgKiBwcmlvciB0byB0aGUgc2V0dGluZ3Mgb2JqZWN0IGJlaW5nIG1vZGlmaWVkIGJ5IHRoZSBzYXZlZCBzdGF0ZS4gTm90ZSB0aGF0IGZvclxuXHRcdCAqIHBsdWctaW4gYXV0aG9ycywgeW91IHNob3VsZCB1c2UgdGhlIGBzdGF0ZUxvYWRQYXJhbXNgIGV2ZW50IHRvIGxvYWQgcGFyYW1ldGVycyBmb3Jcblx0XHQgKiBhIHBsdWctaW4uXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgc3RhdGUgb2JqZWN0IHRoYXQgaXMgdG8gYmUgbG9hZGVkXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RhdGVMb2FkUGFyYW1zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBSZW1vdmUgYSBzYXZlZCBmaWx0ZXIsIHNvIGZpbHRlcmluZyBpcyBuZXZlciBsb2FkZWRcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInN0YXRlU2F2ZVwiOiB0cnVlLFxuXHRcdCAqICAgICAgICBcInN0YXRlTG9hZFBhcmFtc1wiOiBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcblx0XHQgKiAgICAgICAgICBkYXRhLm9TZWFyY2guc1NlYXJjaCA9IFwiXCI7XG5cdFx0ICogICAgICAgIH1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBEaXNhbGxvdyBzdGF0ZSBsb2FkaW5nIGJ5IHJldHVybmluZyBmYWxzZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic3RhdGVTYXZlXCI6IHRydWUsXG5cdFx0ICogICAgICAgIFwic3RhdGVMb2FkUGFyYW1zXCI6IGZ1bmN0aW9uIChzZXR0aW5ncywgZGF0YSkge1xuXHRcdCAqICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImZuU3RhdGVMb2FkUGFyYW1zXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBzdGF0ZSBoYXMgYmVlbiBsb2FkZWQgZnJvbSB0aGUgc3RhdGUgc2F2aW5nIG1ldGhvZFxuXHRcdCAqIGFuZCB0aGUgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3QgaGFzIGJlZW4gbW9kaWZpZWQgYXMgYSByZXN1bHQgb2YgdGhlIGxvYWRlZCBzdGF0ZS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFRoZSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgbG9hZGVkXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RhdGVMb2FkZWRcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFNob3cgYW4gYWxlcnQgd2l0aCB0aGUgZmlsdGVyaW5nIHZhbHVlIHRoYXQgd2FzIHNhdmVkXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVcIjogdHJ1ZSxcblx0XHQgKiAgICAgICAgXCJzdGF0ZUxvYWRlZFwiOiBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcblx0XHQgKiAgICAgICAgICBhbGVydCggJ1NhdmVkIGZpbHRlciB3YXM6ICcrZGF0YS5vU2VhcmNoLnNTZWFyY2ggKTtcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImZuU3RhdGVMb2FkZWRcIjogbnVsbCxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNhdmUgdGhlIHRhYmxlIHN0YXRlLiBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gZGVmaW5lIHdoZXJlIGFuZCBob3cgdGhlIHN0YXRlXG5cdFx0ICogaW5mb3JtYXRpb24gZm9yIHRoZSB0YWJsZSBpcyBzdG9yZWQgQnkgZGVmYXVsdCBEYXRhVGFibGVzIHdpbGwgdXNlIGBsb2NhbFN0b3JhZ2VgXG5cdFx0ICogYnV0IHlvdSBtaWdodCB3aXNoIHRvIHVzZSBhIHNlcnZlci1zaWRlIGRhdGFiYXNlIG9yIGNvb2tpZXMuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBtZW1iZXJcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFRoZSBzdGF0ZSBvYmplY3QgdG8gYmUgc2F2ZWRcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zdGF0ZVNhdmVDYWxsYmFja1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVcIjogdHJ1ZSxcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVDYWxsYmFja1wiOiBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcblx0XHQgKiAgICAgICAgICAvLyBTZW5kIGFuIEFqYXggcmVxdWVzdCB0byB0aGUgc2VydmVyIHdpdGggdGhlIHN0YXRlIG9iamVjdFxuXHRcdCAqICAgICAgICAgICQuYWpheCgge1xuXHRcdCAqICAgICAgICAgICAgXCJ1cmxcIjogXCIvc3RhdGVfc2F2ZVwiLFxuXHRcdCAqICAgICAgICAgICAgXCJkYXRhXCI6IGRhdGEsXG5cdFx0ICogICAgICAgICAgICBcImRhdGFUeXBlXCI6IFwianNvblwiLFxuXHRcdCAqICAgICAgICAgICAgXCJtZXRob2RcIjogXCJQT1NUXCJcblx0XHQgKiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAoKSB7fVxuXHRcdCAqICAgICAgICAgIH0gKTtcblx0XHQgKiAgICAgICAgfVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImZuU3RhdGVTYXZlQ2FsbGJhY2tcIjogZnVuY3Rpb24gKCBzZXR0aW5ncywgZGF0YSApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdChzZXR0aW5ncy5pU3RhdGVEdXJhdGlvbiA9PT0gLTEgPyBzZXNzaW9uU3RvcmFnZSA6IGxvY2FsU3RvcmFnZSkuc2V0SXRlbShcblx0XHRcdFx0XHQnRGF0YVRhYmxlc18nK3NldHRpbmdzLnNJbnN0YW5jZSsnXycrbG9jYXRpb24ucGF0aG5hbWUsXG5cdFx0XHRcdFx0SlNPTi5zdHJpbmdpZnkoIGRhdGEgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2sgd2hpY2ggYWxsb3dzIG1vZGlmaWNhdGlvbiBvZiB0aGUgc3RhdGUgdG8gYmUgc2F2ZWQuIENhbGxlZCB3aGVuIHRoZSB0YWJsZVxuXHRcdCAqIGhhcyBjaGFuZ2VkIHN0YXRlIGEgbmV3IHN0YXRlIHNhdmUgaXMgcmVxdWlyZWQuIFRoaXMgbWV0aG9kIGFsbG93cyBtb2RpZmljYXRpb24gb2Zcblx0XHQgKiB0aGUgc3RhdGUgc2F2aW5nIG9iamVjdCBwcmlvciB0byBhY3R1YWxseSBkb2luZyB0aGUgc2F2ZSwgaW5jbHVkaW5nIGFkZGl0aW9uIG9yXG5cdFx0ICogb3RoZXIgc3RhdGUgcHJvcGVydGllcyBvciBtb2RpZmljYXRpb24uIE5vdGUgdGhhdCBmb3IgcGx1Zy1pbiBhdXRob3JzLCB5b3Ugc2hvdWxkXG5cdFx0ICogdXNlIHRoZSBgc3RhdGVTYXZlUGFyYW1zYCBldmVudCB0byBzYXZlIHBhcmFtZXRlcnMgZm9yIGEgcGx1Zy1pbi5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFRoZSBzdGF0ZSBvYmplY3QgdG8gYmUgc2F2ZWRcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zdGF0ZVNhdmVQYXJhbXNcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFJlbW92ZSBhIHNhdmVkIGZpbHRlciwgc28gZmlsdGVyaW5nIGlzIG5ldmVyIHNhdmVkXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVcIjogdHJ1ZSxcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVQYXJhbXNcIjogZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhKSB7XG5cdFx0ICogICAgICAgICAgZGF0YS5vU2VhcmNoLnNTZWFyY2ggPSBcIlwiO1xuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiZm5TdGF0ZVNhdmVQYXJhbXNcIjogbnVsbCxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIER1cmF0aW9uIGZvciB3aGljaCB0aGUgc2F2ZWQgc3RhdGUgaW5mb3JtYXRpb24gaXMgY29uc2lkZXJlZCB2YWxpZC4gQWZ0ZXIgdGhpcyBwZXJpb2Rcblx0XHQgKiBoYXMgZWxhcHNlZCB0aGUgc3RhdGUgd2lsbCBiZSByZXR1cm5lZCB0byB0aGUgZGVmYXVsdC5cblx0XHQgKiBWYWx1ZSBpcyBnaXZlbiBpbiBzZWNvbmRzLlxuXHRcdCAqICBAdHlwZSBpbnRcblx0XHQgKiAgQGRlZmF1bHQgNzIwMCA8aT4oMiBob3Vycyk8L2k+XG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnN0YXRlRHVyYXRpb25cblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic3RhdGVEdXJhdGlvblwiOiA2MCo2MCoyNDsgLy8gMSBkYXlcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9IClcblx0XHQgKi9cblx0XHRcImlTdGF0ZUR1cmF0aW9uXCI6IDcyMDAsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBXaGVuIGVuYWJsZWQgRGF0YVRhYmxlcyB3aWxsIG5vdCBtYWtlIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIGZvciB0aGUgZmlyc3Rcblx0XHQgKiBwYWdlIGRyYXcgLSByYXRoZXIgaXQgd2lsbCB1c2UgdGhlIGRhdGEgYWxyZWFkeSBvbiB0aGUgcGFnZSAobm8gc29ydGluZyBldGNcblx0XHQgKiB3aWxsIGJlIGFwcGxpZWQgdG8gaXQpLCB0aHVzIHNhdmluZyBvbiBhbiBYSFIgYXQgbG9hZCB0aW1lLiBgZGVmZXJMb2FkaW5nYFxuXHRcdCAqIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCBkZWZlcnJlZCBsb2FkaW5nIGlzIHJlcXVpcmVkLCBidXQgaXQgaXMgYWxzbyB1c2VkXG5cdFx0ICogdG8gdGVsbCBEYXRhVGFibGVzIGhvdyBtYW55IHJlY29yZHMgdGhlcmUgYXJlIGluIHRoZSBmdWxsIHRhYmxlIChhbGxvd2luZ1xuXHRcdCAqIHRoZSBpbmZvcm1hdGlvbiBlbGVtZW50IGFuZCBwYWdpbmF0aW9uIHRvIGJlIGRpc3BsYXllZCBjb3JyZWN0bHkpLiBJbiB0aGUgY2FzZVxuXHRcdCAqIHdoZXJlIGEgZmlsdGVyaW5nIGlzIGFwcGxpZWQgdG8gdGhlIHRhYmxlIG9uIGluaXRpYWwgbG9hZCwgdGhpcyBjYW4gYmVcblx0XHQgKiBpbmRpY2F0ZWQgYnkgZ2l2aW5nIHRoZSBwYXJhbWV0ZXIgYXMgYW4gYXJyYXksIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzXG5cdFx0ICogdGhlIG51bWJlciBvZiByZWNvcmRzIGF2YWlsYWJsZSBhZnRlciBmaWx0ZXJpbmcgYW5kIHRoZSBzZWNvbmQgZWxlbWVudCBpcyB0aGVcblx0XHQgKiBudW1iZXIgb2YgcmVjb3JkcyB3aXRob3V0IGZpbHRlcmluZyAoYWxsb3dpbmcgdGhlIHRhYmxlIGluZm9ybWF0aW9uIGVsZW1lbnRcblx0XHQgKiB0byBiZSBzaG93biBjb3JyZWN0bHkpLlxuXHRcdCAqICBAdHlwZSBpbnQgfCBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmRlZmVyTG9hZGluZ1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gNTcgcmVjb3JkcyBhdmFpbGFibGUgaW4gdGhlIHRhYmxlLCBubyBmaWx0ZXJpbmcgYXBwbGllZFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic2VydmVyU2lkZVwiOiB0cnVlLFxuXHRcdCAqICAgICAgICBcImFqYXhcIjogXCJzY3JpcHRzL3NlcnZlcl9wcm9jZXNzaW5nLnBocFwiLFxuXHRcdCAqICAgICAgICBcImRlZmVyTG9hZGluZ1wiOiA1N1xuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIDU3IHJlY29yZHMgYWZ0ZXIgZmlsdGVyaW5nLCAxMDAgd2l0aG91dCBmaWx0ZXJpbmcgKGFuIGluaXRpYWwgZmlsdGVyIGFwcGxpZWQpXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzZXJ2ZXJTaWRlXCI6IHRydWUsXG5cdFx0ICogICAgICAgIFwiYWpheFwiOiBcInNjcmlwdHMvc2VydmVyX3Byb2Nlc3NpbmcucGhwXCIsXG5cdFx0ICogICAgICAgIFwiZGVmZXJMb2FkaW5nXCI6IFsgNTcsIDEwMCBdLFxuXHRcdCAqICAgICAgICBcInNlYXJjaFwiOiB7XG5cdFx0ICogICAgICAgICAgXCJzZWFyY2hcIjogXCJteV9maWx0ZXJcIlxuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiaURlZmVyTG9hZGluZ1wiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSBvbiBhIHNpbmdsZSBwYWdlIHdoZW4gdXNpbmcgcGFnaW5hdGlvbi4gSWZcblx0XHQgKiBmZWF0dXJlIGVuYWJsZWQgKGBsZW5ndGhDaGFuZ2VgKSB0aGVuIHRoZSBlbmQgdXNlciB3aWxsIGJlIGFibGUgdG8gb3ZlcnJpZGVcblx0XHQgKiB0aGlzIHRvIGEgY3VzdG9tIHNldHRpbmcgdXNpbmcgYSBwb3AtdXAgbWVudS5cblx0XHQgKiAgQHR5cGUgaW50XG5cdFx0ICogIEBkZWZhdWx0IDEwXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnBhZ2VMZW5ndGhcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwicGFnZUxlbmd0aFwiOiA1MFxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKVxuXHRcdCAqL1xuXHRcdFwiaURpc3BsYXlMZW5ndGhcIjogMTAsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBEZWZpbmUgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciBkYXRhIGRpc3BsYXkgd2hlbiB1c2luZyBEYXRhVGFibGVzIHdpdGhcblx0XHQgKiBwYWdpbmF0aW9uLiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgaXMgdGhlIG51bWJlciBvZiByZWNvcmRzLCByYXRoZXIgdGhhblxuXHRcdCAqIHRoZSBwYWdlIG51bWJlciwgc28gaWYgeW91IGhhdmUgMTAgcmVjb3JkcyBwZXIgcGFnZSBhbmQgd2FudCB0byBzdGFydCBvblxuXHRcdCAqIHRoZSB0aGlyZCBwYWdlLCBpdCBzaG91bGQgYmUgXCIyMFwiLlxuXHRcdCAqICBAdHlwZSBpbnRcblx0XHQgKiAgQGRlZmF1bHQgMFxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5kaXNwbGF5U3RhcnRcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiZGlzcGxheVN0YXJ0XCI6IDIwXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApXG5cdFx0ICovXG5cdFx0XCJpRGlzcGxheVN0YXJ0XCI6IDAsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBCeSBkZWZhdWx0IERhdGFUYWJsZXMgYWxsb3dzIGtleWJvYXJkIG5hdmlnYXRpb24gb2YgdGhlIHRhYmxlIChzb3J0aW5nLCBwYWdpbmcsXG5cdFx0ICogYW5kIGZpbHRlcmluZykgYnkgYWRkaW5nIGEgYHRhYmluZGV4YCBhdHRyaWJ1dGUgdG8gdGhlIHJlcXVpcmVkIGVsZW1lbnRzLiBUaGlzXG5cdFx0ICogYWxsb3dzIHlvdSB0byB0YWIgdGhyb3VnaCB0aGUgY29udHJvbHMgYW5kIHByZXNzIHRoZSBlbnRlciBrZXkgdG8gYWN0aXZhdGUgdGhlbS5cblx0XHQgKiBUaGUgdGFiaW5kZXggaXMgZGVmYXVsdCAwLCBtZWFuaW5nIHRoYXQgdGhlIHRhYiBmb2xsb3dzIHRoZSBmbG93IG9mIHRoZSBkb2N1bWVudC5cblx0XHQgKiBZb3UgY2FuIG92ZXJydWxlIHRoaXMgdXNpbmcgdGhpcyBwYXJhbWV0ZXIgaWYgeW91IHdpc2guIFVzZSBhIHZhbHVlIG9mIC0xIHRvXG5cdFx0ICogZGlzYWJsZSBidWlsdC1pbiBrZXlib2FyZCBuYXZpZ2F0aW9uLlxuXHRcdCAqICBAdHlwZSBpbnRcblx0XHQgKiAgQGRlZmF1bHQgMFxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy50YWJJbmRleFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJ0YWJJbmRleFwiOiAxXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiaVRhYkluZGV4XCI6IDAsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBDbGFzc2VzIHRoYXQgRGF0YVRhYmxlcyBhc3NpZ25zIHRvIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgYW5kIGZlYXR1cmVzXG5cdFx0ICogdGhhdCBpdCBhZGRzIHRvIHRoZSBIVE1MIHRhYmxlLiBUaGlzIGFsbG93cyBjbGFzc2VzIHRvIGJlIGNvbmZpZ3VyZWRcblx0XHQgKiBkdXJpbmcgaW5pdGlhbGlzYXRpb24gaW4gYWRkaXRpb24gdG8gdGhyb3VnaCB0aGUgc3RhdGljXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5leHQub1N0ZENsYXNzZXN9IG9iamVjdCkuXG5cdFx0ICogIEBuYW1lc3BhY2Vcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNsYXNzZXNcblx0XHQgKi9cblx0XHRcIm9DbGFzc2VzXCI6IHt9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogQWxsIHN0cmluZ3MgdGhhdCBEYXRhVGFibGVzIHVzZXMgaW4gdGhlIHVzZXIgaW50ZXJmYWNlIHRoYXQgaXQgY3JlYXRlc1xuXHRcdCAqIGFyZSBkZWZpbmVkIGluIHRoaXMgb2JqZWN0LCBhbGxvd2luZyB5b3UgdG8gbW9kaWZpZWQgdGhlbSBpbmRpdmlkdWFsbHkgb3Jcblx0XHQgKiBjb21wbGV0ZWx5IHJlcGxhY2UgdGhlbSBhbGwgYXMgcmVxdWlyZWQuXG5cdFx0ICogIEBuYW1lc3BhY2Vcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlXG5cdFx0ICovXG5cdFx0XCJvTGFuZ3VhZ2VcIjoge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBTdHJpbmdzIHRoYXQgYXJlIHVzZWQgZm9yIFdBSS1BUklBIGxhYmVscyBhbmQgY29udHJvbHMgb25seSAodGhlc2UgYXJlIG5vdFxuXHRcdFx0ICogYWN0dWFsbHkgdmlzaWJsZSBvbiB0aGUgcGFnZSwgYnV0IHdpbGwgYmUgcmVhZCBieSBzY3JlZW5yZWFkZXJzLCBhbmQgdGh1c1xuXHRcdFx0ICogbXVzdCBiZSBpbnRlcm5hdGlvbmFsaXNlZCBhcyB3ZWxsKS5cblx0XHRcdCAqICBAbmFtZXNwYWNlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmFyaWFcblx0XHRcdCAqL1xuXHRcdFx0XCJvQXJpYVwiOiB7XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBBUklBIGxhYmVsIHRoYXQgaXMgYWRkZWQgdG8gdGhlIHRhYmxlIGhlYWRlcnMgd2hlbiB0aGUgY29sdW1uIG1heSBiZVxuXHRcdFx0XHQgKiBzb3J0ZWQgYXNjZW5kaW5nIGJ5IGFjdGl2aW5nIHRoZSBjb2x1bW4gKGNsaWNrIG9yIHJldHVybiB3aGVuIGZvY3VzZWQpLlxuXHRcdFx0XHQgKiBOb3RlIHRoYXQgdGhlIGNvbHVtbiBoZWFkZXIgaXMgcHJlZml4ZWQgdG8gdGhpcyBzdHJpbmcuXG5cdFx0XHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHRcdFx0ICogIEBkZWZhdWx0IDogYWN0aXZhdGUgdG8gc29ydCBjb2x1bW4gYXNjZW5kaW5nXG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2Vcblx0XHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5hcmlhLnNvcnRBc2NlbmRpbmdcblx0XHRcdFx0ICpcblx0XHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHRcdCAqICAgICAgICAgIFwiYXJpYVwiOiB7XG5cdFx0XHRcdCAqICAgICAgICAgICAgXCJzb3J0QXNjZW5kaW5nXCI6IFwiIC0gY2xpY2svcmV0dXJuIHRvIHNvcnQgYXNjZW5kaW5nXCJcblx0XHRcdFx0ICogICAgICAgICAgfVxuXHRcdFx0XHQgKiAgICAgICAgfVxuXHRcdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdFx0ICogICAgfSApO1xuXHRcdFx0XHQgKi9cblx0XHRcdFx0XCJzU29ydEFzY2VuZGluZ1wiOiBcIjogYWN0aXZhdGUgdG8gc29ydCBjb2x1bW4gYXNjZW5kaW5nXCIsXG5cdFxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogQVJJQSBsYWJlbCB0aGF0IGlzIGFkZGVkIHRvIHRoZSB0YWJsZSBoZWFkZXJzIHdoZW4gdGhlIGNvbHVtbiBtYXkgYmVcblx0XHRcdFx0ICogc29ydGVkIGRlc2NlbmRpbmcgYnkgYWN0aXZpbmcgdGhlIGNvbHVtbiAoY2xpY2sgb3IgcmV0dXJuIHdoZW4gZm9jdXNlZCkuXG5cdFx0XHRcdCAqIE5vdGUgdGhhdCB0aGUgY29sdW1uIGhlYWRlciBpcyBwcmVmaXhlZCB0byB0aGlzIHN0cmluZy5cblx0XHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0XHQgKiAgQGRlZmF1bHQgOiBhY3RpdmF0ZSB0byBzb3J0IGNvbHVtbiBhc2NlbmRpbmdcblx0XHRcdFx0ICpcblx0XHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxuXHRcdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmFyaWEuc29ydERlc2NlbmRpbmdcblx0XHRcdFx0ICpcblx0XHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHRcdCAqICAgICAgICAgIFwiYXJpYVwiOiB7XG5cdFx0XHRcdCAqICAgICAgICAgICAgXCJzb3J0RGVzY2VuZGluZ1wiOiBcIiAtIGNsaWNrL3JldHVybiB0byBzb3J0IGRlc2NlbmRpbmdcIlxuXHRcdFx0XHQgKiAgICAgICAgICB9XG5cdFx0XHRcdCAqICAgICAgICB9XG5cdFx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0XHQgKiAgICB9ICk7XG5cdFx0XHRcdCAqL1xuXHRcdFx0XHRcInNTb3J0RGVzY2VuZGluZ1wiOiBcIjogYWN0aXZhdGUgdG8gc29ydCBjb2x1bW4gZGVzY2VuZGluZ1wiXG5cdFx0XHR9LFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogUGFnaW5hdGlvbiBzdHJpbmcgdXNlZCBieSBEYXRhVGFibGVzIGZvciB0aGUgYnVpbHQtaW4gcGFnaW5hdGlvblxuXHRcdFx0ICogY29udHJvbCB0eXBlcy5cblx0XHRcdCAqICBAbmFtZXNwYWNlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnBhZ2luYXRlXG5cdFx0XHQgKi9cblx0XHRcdFwib1BhZ2luYXRlXCI6IHtcblx0XHRcdFx0LyoqXG5cdFx0XHRcdCAqIFRleHQgdG8gdXNlIHdoZW4gdXNpbmcgdGhlICdmdWxsX251bWJlcnMnIHR5cGUgb2YgcGFnaW5hdGlvbiBmb3IgdGhlXG5cdFx0XHRcdCAqIGJ1dHRvbiB0byB0YWtlIHRoZSB1c2VyIHRvIHRoZSBmaXJzdCBwYWdlLlxuXHRcdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHRcdCAqICBAZGVmYXVsdCBGaXJzdFxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UucGFnaW5hdGUuZmlyc3Rcblx0XHRcdFx0ICpcblx0XHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHRcdCAqICAgICAgICAgIFwicGFnaW5hdGVcIjoge1xuXHRcdFx0XHQgKiAgICAgICAgICAgIFwiZmlyc3RcIjogXCJGaXJzdCBwYWdlXCJcblx0XHRcdFx0ICogICAgICAgICAgfVxuXHRcdFx0XHQgKiAgICAgICAgfVxuXHRcdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdFx0ICogICAgfSApO1xuXHRcdFx0XHQgKi9cblx0XHRcdFx0XCJzRmlyc3RcIjogXCJGaXJzdFwiLFxuXHRcblx0XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBUZXh0IHRvIHVzZSB3aGVuIHVzaW5nIHRoZSAnZnVsbF9udW1iZXJzJyB0eXBlIG9mIHBhZ2luYXRpb24gZm9yIHRoZVxuXHRcdFx0XHQgKiBidXR0b24gdG8gdGFrZSB0aGUgdXNlciB0byB0aGUgbGFzdCBwYWdlLlxuXHRcdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHRcdCAqICBAZGVmYXVsdCBMYXN0XG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2Vcblx0XHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5wYWdpbmF0ZS5sYXN0XG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0XHQgKiAgICAgICAgICBcInBhZ2luYXRlXCI6IHtcblx0XHRcdFx0ICogICAgICAgICAgICBcImxhc3RcIjogXCJMYXN0IHBhZ2VcIlxuXHRcdFx0XHQgKiAgICAgICAgICB9XG5cdFx0XHRcdCAqICAgICAgICB9XG5cdFx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0XHQgKiAgICB9ICk7XG5cdFx0XHRcdCAqL1xuXHRcdFx0XHRcInNMYXN0XCI6IFwiTGFzdFwiLFxuXHRcblx0XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBUZXh0IHRvIHVzZSBmb3IgdGhlICduZXh0JyBwYWdpbmF0aW9uIGJ1dHRvbiAodG8gdGFrZSB0aGUgdXNlciB0byB0aGVcblx0XHRcdFx0ICogbmV4dCBwYWdlKS5cblx0XHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0XHQgKiAgQGRlZmF1bHQgTmV4dFxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UucGFnaW5hdGUubmV4dFxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcblx0XHRcdFx0ICogICAgICAgICAgXCJwYWdpbmF0ZVwiOiB7XG5cdFx0XHRcdCAqICAgICAgICAgICAgXCJuZXh0XCI6IFwiTmV4dCBwYWdlXCJcblx0XHRcdFx0ICogICAgICAgICAgfVxuXHRcdFx0XHQgKiAgICAgICAgfVxuXHRcdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdFx0ICogICAgfSApO1xuXHRcdFx0XHQgKi9cblx0XHRcdFx0XCJzTmV4dFwiOiBcIk5leHRcIixcblx0XG5cdFxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogVGV4dCB0byB1c2UgZm9yIHRoZSAncHJldmlvdXMnIHBhZ2luYXRpb24gYnV0dG9uICh0byB0YWtlIHRoZSB1c2VyIHRvXG5cdFx0XHRcdCAqIHRoZSBwcmV2aW91cyBwYWdlKS5cblx0XHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0XHQgKiAgQGRlZmF1bHQgUHJldmlvdXNcblx0XHRcdFx0ICpcblx0XHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxuXHRcdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnBhZ2luYXRlLnByZXZpb3VzXG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0XHQgKiAgICAgICAgICBcInBhZ2luYXRlXCI6IHtcblx0XHRcdFx0ICogICAgICAgICAgICBcInByZXZpb3VzXCI6IFwiUHJldmlvdXMgcGFnZVwiXG5cdFx0XHRcdCAqICAgICAgICAgIH1cblx0XHRcdFx0ICogICAgICAgIH1cblx0XHRcdFx0ICogICAgICB9ICk7XG5cdFx0XHRcdCAqICAgIH0gKTtcblx0XHRcdFx0ICovXG5cdFx0XHRcdFwic1ByZXZpb3VzXCI6IFwiUHJldmlvdXNcIlxuXHRcdFx0fSxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFRoaXMgc3RyaW5nIGlzIHNob3duIGluIHByZWZlcmVuY2UgdG8gYHplcm9SZWNvcmRzYCB3aGVuIHRoZSB0YWJsZSBpc1xuXHRcdFx0ICogZW1wdHkgb2YgZGF0YSAocmVnYXJkbGVzcyBvZiBmaWx0ZXJpbmcpLiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBvcHRpb25hbFxuXHRcdFx0ICogcGFyYW1ldGVyIC0gaWYgaXQgaXMgbm90IGdpdmVuLCB0aGUgdmFsdWUgb2YgYHplcm9SZWNvcmRzYCB3aWxsIGJlIHVzZWRcblx0XHRcdCAqIGluc3RlYWQgKGVpdGhlciB0aGUgZGVmYXVsdCBvciBnaXZlbiB2YWx1ZSkuXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGVcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmVtcHR5VGFibGVcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcblx0XHRcdCAqICAgICAgICAgIFwiZW1wdHlUYWJsZVwiOiBcIk5vIGRhdGEgYXZhaWxhYmxlIGluIHRhYmxlXCJcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqL1xuXHRcdFx0XCJzRW1wdHlUYWJsZVwiOiBcIk5vIGRhdGEgYXZhaWxhYmxlIGluIHRhYmxlXCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogVGhpcyBzdHJpbmcgZ2l2ZXMgaW5mb3JtYXRpb24gdG8gdGhlIGVuZCB1c2VyIGFib3V0IHRoZSBpbmZvcm1hdGlvblxuXHRcdFx0ICogdGhhdCBpcyBjdXJyZW50IG9uIGRpc3BsYXkgb24gdGhlIHBhZ2UuIFRoZSBmb2xsb3dpbmcgdG9rZW5zIGNhbiBiZVxuXHRcdFx0ICogdXNlZCBpbiB0aGUgc3RyaW5nIGFuZCB3aWxsIGJlIGR5bmFtaWNhbGx5IHJlcGxhY2VkIGFzIHRoZSB0YWJsZVxuXHRcdFx0ICogZGlzcGxheSB1cGRhdGVzLiBUaGlzIHRva2VucyBjYW4gYmUgcGxhY2VkIGFueXdoZXJlIGluIHRoZSBzdHJpbmcsIG9yXG5cdFx0XHQgKiByZW1vdmVkIGFzIG5lZWRlZCBieSB0aGUgbGFuZ3VhZ2UgcmVxdWlyZXM6XG5cdFx0XHQgKlxuXHRcdFx0ICogKiBgXFxfU1RBUlRcXF9gIC0gRGlzcGxheSBpbmRleCBvZiB0aGUgZmlyc3QgcmVjb3JkIG9uIHRoZSBjdXJyZW50IHBhZ2Vcblx0XHRcdCAqICogYFxcX0VORFxcX2AgLSBEaXNwbGF5IGluZGV4IG9mIHRoZSBsYXN0IHJlY29yZCBvbiB0aGUgY3VycmVudCBwYWdlXG5cdFx0XHQgKiAqIGBcXF9UT1RBTFxcX2AgLSBOdW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgdGFibGUgYWZ0ZXIgZmlsdGVyaW5nXG5cdFx0XHQgKiAqIGBcXF9NQVhcXF9gIC0gTnVtYmVyIG9mIHJlY29yZHMgaW4gdGhlIHRhYmxlIHdpdGhvdXQgZmlsdGVyaW5nXG5cdFx0XHQgKiAqIGBcXF9QQUdFXFxfYCAtIEN1cnJlbnQgcGFnZSBudW1iZXJcblx0XHRcdCAqICogYFxcX1BBR0VTXFxfYCAtIFRvdGFsIG51bWJlciBvZiBwYWdlcyBvZiBkYXRhIGluIHRoZSB0YWJsZVxuXHRcdFx0ICpcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHRcdCAqICBAZGVmYXVsdCBTaG93aW5nIF9TVEFSVF8gdG8gX0VORF8gb2YgX1RPVEFMXyBlbnRyaWVzXG5cdFx0XHQgKlxuXHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5pbmZvXG5cdFx0XHQgKlxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHQgKiAgICAgICAgICBcImluZm9cIjogXCJTaG93aW5nIHBhZ2UgX1BBR0VfIG9mIF9QQUdFU19cIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNJbmZvXCI6IFwiU2hvd2luZyBfU1RBUlRfIHRvIF9FTkRfIG9mIF9UT1RBTF8gZW50cmllc1wiLFxuXHRcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIERpc3BsYXkgaW5mb3JtYXRpb24gc3RyaW5nIGZvciB3aGVuIHRoZSB0YWJsZSBpcyBlbXB0eS4gVHlwaWNhbGx5IHRoZVxuXHRcdFx0ICogZm9ybWF0IG9mIHRoaXMgc3RyaW5nIHNob3VsZCBtYXRjaCBgaW5mb2AuXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgU2hvd2luZyAwIHRvIDAgb2YgMCBlbnRyaWVzXG5cdFx0XHQgKlxuXHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5pbmZvRW1wdHlcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcblx0XHRcdCAqICAgICAgICAgIFwiaW5mb0VtcHR5XCI6IFwiTm8gZW50cmllcyB0byBzaG93XCJcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqL1xuXHRcdFx0XCJzSW5mb0VtcHR5XCI6IFwiU2hvd2luZyAwIHRvIDAgb2YgMCBlbnRyaWVzXCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogV2hlbiBhIHVzZXIgZmlsdGVycyB0aGUgaW5mb3JtYXRpb24gaW4gYSB0YWJsZSwgdGhpcyBzdHJpbmcgaXMgYXBwZW5kZWRcblx0XHRcdCAqIHRvIHRoZSBpbmZvcm1hdGlvbiAoYGluZm9gKSB0byBnaXZlIGFuIGlkZWEgb2YgaG93IHN0cm9uZyB0aGUgZmlsdGVyaW5nXG5cdFx0XHQgKiBpcy4gVGhlIHZhcmlhYmxlIF9NQVhfIGlzIGR5bmFtaWNhbGx5IHVwZGF0ZWQuXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgKGZpbHRlcmVkIGZyb20gX01BWF8gdG90YWwgZW50cmllcylcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmluZm9GaWx0ZXJlZFxuXHRcdFx0ICpcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0ICogICAgICAgICAgXCJpbmZvRmlsdGVyZWRcIjogXCIgLSBmaWx0ZXJpbmcgZnJvbSBfTUFYXyByZWNvcmRzXCJcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqL1xuXHRcdFx0XCJzSW5mb0ZpbHRlcmVkXCI6IFwiKGZpbHRlcmVkIGZyb20gX01BWF8gdG90YWwgZW50cmllcylcIixcblx0XG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBJZiBjYW4gYmUgdXNlZnVsIHRvIGFwcGVuZCBleHRyYSBpbmZvcm1hdGlvbiB0byB0aGUgaW5mbyBzdHJpbmcgYXQgdGltZXMsXG5cdFx0XHQgKiBhbmQgdGhpcyB2YXJpYWJsZSBkb2VzIGV4YWN0bHkgdGhhdC4gVGhpcyBpbmZvcm1hdGlvbiB3aWxsIGJlIGFwcGVuZGVkIHRvXG5cdFx0XHQgKiB0aGUgYGluZm9gIChgaW5mb0VtcHR5YCBhbmQgYGluZm9GaWx0ZXJlZGAgaW4gd2hhdGV2ZXIgY29tYmluYXRpb24gdGhleSBhcmVcblx0XHRcdCAqIGJlaW5nIHVzZWQpIGF0IGFsbCB0aW1lcy5cblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHRcdCAqICBAZGVmYXVsdCA8aT5FbXB0eSBzdHJpbmc8L2k+XG5cdFx0XHQgKlxuXHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5pbmZvUG9zdEZpeFxuXHRcdFx0ICpcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0ICogICAgICAgICAgXCJpbmZvUG9zdEZpeFwiOiBcIkFsbCByZWNvcmRzIHNob3duIGFyZSBkZXJpdmVkIGZyb20gcmVhbCBpbmZvcm1hdGlvbi5cIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNJbmZvUG9zdEZpeFwiOiBcIlwiLFxuXHRcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFRoaXMgZGVjaW1hbCBwbGFjZSBvcGVyYXRvciBpcyBhIGxpdHRsZSBkaWZmZXJlbnQgZnJvbSB0aGUgb3RoZXJcblx0XHRcdCAqIGxhbmd1YWdlIG9wdGlvbnMgc2luY2UgRGF0YVRhYmxlcyBkb2Vzbid0IG91dHB1dCBmbG9hdGluZyBwb2ludFxuXHRcdFx0ICogbnVtYmVycywgc28gaXQgd29uJ3QgZXZlciB1c2UgdGhpcyBmb3IgZGlzcGxheSBvZiBhIG51bWJlci4gUmF0aGVyLFxuXHRcdFx0ICogd2hhdCB0aGlzIHBhcmFtZXRlciBkb2VzIGlzIG1vZGlmeSB0aGUgc29ydCBtZXRob2RzIG9mIHRoZSB0YWJsZSBzb1xuXHRcdFx0ICogdGhhdCBudW1iZXJzIHdoaWNoIGFyZSBpbiBhIGZvcm1hdCB3aGljaCBoYXMgYSBjaGFyYWN0ZXIgb3RoZXIgdGhhblxuXHRcdFx0ICogYSBwZXJpb2QgKGAuYCkgYXMgYSBkZWNpbWFsIHBsYWNlIHdpbGwgYmUgc29ydGVkIG51bWVyaWNhbGx5LlxuXHRcdFx0ICpcblx0XHRcdCAqIE5vdGUgdGhhdCBudW1iZXJzIHdpdGggZGlmZmVyZW50IGRlY2ltYWwgcGxhY2VzIGNhbm5vdCBiZSBzaG93biBpblxuXHRcdFx0ICogdGhlIHNhbWUgdGFibGUgYW5kIHN0aWxsIGJlIHNvcnRhYmxlLCB0aGUgdGFibGUgbXVzdCBiZSBjb25zaXN0ZW50LlxuXHRcdFx0ICogSG93ZXZlciwgbXVsdGlwbGUgZGlmZmVyZW50IHRhYmxlcyBvbiB0aGUgcGFnZSBjYW4gdXNlIGRpZmZlcmVudFxuXHRcdFx0ICogZGVjaW1hbCBwbGFjZSBjaGFyYWN0ZXJzLlxuXHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0ICogIEBkZWZhdWx0IFxuXHRcdFx0ICpcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2Vcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UuZGVjaW1hbFxuXHRcdFx0ICpcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0ICogICAgICAgICAgXCJkZWNpbWFsXCI6IFwiLFwiXG5cdFx0XHQgKiAgICAgICAgICBcInRob3VzYW5kc1wiOiBcIi5cIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNEZWNpbWFsXCI6IFwiXCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogRGF0YVRhYmxlcyBoYXMgYSBidWlsZCBpbiBudW1iZXIgZm9ybWF0dGVyIChgZm9ybWF0TnVtYmVyYCkgd2hpY2ggaXNcblx0XHRcdCAqIHVzZWQgdG8gZm9ybWF0IGxhcmdlIG51bWJlcnMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgdGFibGUgaW5mb3JtYXRpb24uXG5cdFx0XHQgKiBCeSBkZWZhdWx0IGEgY29tbWEgaXMgdXNlZCwgYnV0IHRoaXMgY2FuIGJlIHRyaXZpYWxseSBjaGFuZ2VkIHRvIGFueVxuXHRcdFx0ICogY2hhcmFjdGVyIHlvdSB3aXNoIHdpdGggdGhpcyBwYXJhbWV0ZXIuXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgLFxuXHRcdFx0ICpcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2Vcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UudGhvdXNhbmRzXG5cdFx0XHQgKlxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHQgKiAgICAgICAgICBcInRob3VzYW5kc1wiOiBcIidcIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNUaG91c2FuZHNcIjogXCIsXCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogRGV0YWlsIHRoZSBhY3Rpb24gdGhhdCB3aWxsIGJlIHRha2VuIHdoZW4gdGhlIGRyb3AgZG93biBtZW51IGZvciB0aGVcblx0XHRcdCAqIHBhZ2luYXRpb24gbGVuZ3RoIG9wdGlvbiBpcyBjaGFuZ2VkLiBUaGUgJ19NRU5VXycgdmFyaWFibGUgaXMgcmVwbGFjZWRcblx0XHRcdCAqIHdpdGggYSBkZWZhdWx0IHNlbGVjdCBsaXN0IG9mIDEwLCAyNSwgNTAgYW5kIDEwMCwgYW5kIGNhbiBiZSByZXBsYWNlZFxuXHRcdFx0ICogd2l0aCBhIGN1c3RvbSBzZWxlY3QgYm94IGlmIHJlcXVpcmVkLlxuXHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0ICogIEBkZWZhdWx0IFNob3cgX01FTlVfIGVudHJpZXNcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmxlbmd0aE1lbnVcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgIC8vIExhbmd1YWdlIGNoYW5nZSBvbmx5XG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHQgKiAgICAgICAgICBcImxlbmd0aE1lbnVcIjogXCJEaXNwbGF5IF9NRU5VXyByZWNvcmRzXCJcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgIC8vIExhbmd1YWdlIGFuZCBvcHRpb25zIGNoYW5nZVxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0ICogICAgICAgICAgXCJsZW5ndGhNZW51XCI6ICdEaXNwbGF5IDxzZWxlY3Q+Jytcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIxMFwiPjEwPC9vcHRpb24+Jytcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIyMFwiPjIwPC9vcHRpb24+Jytcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIzMFwiPjMwPC9vcHRpb24+Jytcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCI0MFwiPjQwPC9vcHRpb24+Jytcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCI1MFwiPjUwPC9vcHRpb24+Jytcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCItMVwiPkFsbDwvb3B0aW9uPicrXG5cdFx0XHQgKiAgICAgICAgICAgICc8L3NlbGVjdD4gcmVjb3Jkcydcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqL1xuXHRcdFx0XCJzTGVuZ3RoTWVudVwiOiBcIlNob3cgX01FTlVfIGVudHJpZXNcIixcblx0XG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBXaGVuIHVzaW5nIEFqYXggc291cmNlZCBkYXRhIGFuZCBkdXJpbmcgdGhlIGZpcnN0IGRyYXcgd2hlbiBEYXRhVGFibGVzIGlzXG5cdFx0XHQgKiBnYXRoZXJpbmcgdGhlIGRhdGEsIHRoaXMgbWVzc2FnZSBpcyBzaG93biBpbiBhbiBlbXB0eSByb3cgaW4gdGhlIHRhYmxlIHRvXG5cdFx0XHQgKiBpbmRpY2F0ZSB0byB0aGUgZW5kIHVzZXIgdGhlIHRoZSBkYXRhIGlzIGJlaW5nIGxvYWRlZC4gTm90ZSB0aGF0IHRoaXNcblx0XHRcdCAqIHBhcmFtZXRlciBpcyBub3QgdXNlZCB3aGVuIGxvYWRpbmcgZGF0YSBieSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nLCBqdXN0XG5cdFx0XHQgKiBBamF4IHNvdXJjZWQgZGF0YSB3aXRoIGNsaWVudC1zaWRlIHByb2Nlc3NpbmcuXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgTG9hZGluZy4uLlxuXHRcdFx0ICpcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2Vcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UubG9hZGluZ1JlY29yZHNcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcblx0XHRcdCAqICAgICAgICAgIFwibG9hZGluZ1JlY29yZHNcIjogXCJQbGVhc2Ugd2FpdCAtIGxvYWRpbmcuLi5cIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNMb2FkaW5nUmVjb3Jkc1wiOiBcIkxvYWRpbmcuLi5cIixcblx0XG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBUZXh0IHdoaWNoIGlzIGRpc3BsYXllZCB3aGVuIHRoZSB0YWJsZSBpcyBwcm9jZXNzaW5nIGEgdXNlciBhY3Rpb25cblx0XHRcdCAqICh1c3VhbGx5IGEgc29ydCBjb21tYW5kIG9yIHNpbWlsYXIpLlxuXHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0ICogIEBkZWZhdWx0IFByb2Nlc3NpbmcuLi5cblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnByb2Nlc3Npbmdcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcblx0XHRcdCAqICAgICAgICAgIFwicHJvY2Vzc2luZ1wiOiBcIkRhdGFUYWJsZXMgaXMgY3VycmVudGx5IGJ1c3lcIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNQcm9jZXNzaW5nXCI6IFwiUHJvY2Vzc2luZy4uLlwiLFxuXHRcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIERldGFpbHMgdGhlIGFjdGlvbnMgdGhhdCB3aWxsIGJlIHRha2VuIHdoZW4gdGhlIHVzZXIgdHlwZXMgaW50byB0aGVcblx0XHRcdCAqIGZpbHRlcmluZyBpbnB1dCB0ZXh0IGJveC4gVGhlIHZhcmlhYmxlIFwiX0lOUFVUX1wiLCBpZiB1c2VkIGluIHRoZSBzdHJpbmcsXG5cdFx0XHQgKiBpcyByZXBsYWNlZCB3aXRoIHRoZSBIVE1MIHRleHQgYm94IGZvciB0aGUgZmlsdGVyaW5nIGlucHV0IGFsbG93aW5nXG5cdFx0XHQgKiBjb250cm9sIG92ZXIgd2hlcmUgaXQgYXBwZWFycyBpbiB0aGUgc3RyaW5nLiBJZiBcIl9JTlBVVF9cIiBpcyBub3QgZ2l2ZW5cblx0XHRcdCAqIHRoZW4gdGhlIGlucHV0IGJveCBpcyBhcHBlbmRlZCB0byB0aGUgc3RyaW5nIGF1dG9tYXRpY2FsbHkuXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgU2VhcmNoOlxuXHRcdFx0ICpcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2Vcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2Uuc2VhcmNoXG5cdFx0XHQgKlxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAgICAvLyBJbnB1dCB0ZXh0IGJveCB3aWxsIGJlIGFwcGVuZGVkIGF0IHRoZSBlbmQgYXV0b21hdGljYWxseVxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0ICogICAgICAgICAgXCJzZWFyY2hcIjogXCJGaWx0ZXIgcmVjb3JkczpcIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICpcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogICAgLy8gU3BlY2lmeSB3aGVyZSB0aGUgZmlsdGVyIHNob3VsZCBhcHBlYXJcblx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcblx0XHRcdCAqICAgICAgICAgIFwic2VhcmNoXCI6IFwiQXBwbHkgZmlsdGVyIF9JTlBVVF8gdG8gdGFibGVcIlxuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqICAgICAgfSApO1xuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRcInNTZWFyY2hcIjogXCJTZWFyY2g6XCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQXNzaWduIGEgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUgdG8gdGhlIHNlYXJjaCBgaW5wdXRgIGVsZW1lbnRcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHRcdCAqICBAZGVmYXVsdCBcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnNlYXJjaFBsYWNlaG9sZGVyXG5cdFx0XHQgKi9cblx0XHRcdFwic1NlYXJjaFBsYWNlaG9sZGVyXCI6IFwiXCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQWxsIG9mIHRoZSBsYW5ndWFnZSBpbmZvcm1hdGlvbiBjYW4gYmUgc3RvcmVkIGluIGEgZmlsZSBvbiB0aGVcblx0XHRcdCAqIHNlcnZlci1zaWRlLCB3aGljaCBEYXRhVGFibGVzIHdpbGwgbG9vayB1cCBpZiB0aGlzIHBhcmFtZXRlciBpcyBwYXNzZWQuXG5cdFx0XHQgKiBJdCBtdXN0IHN0b3JlIHRoZSBVUkwgb2YgdGhlIGxhbmd1YWdlIGZpbGUsIHdoaWNoIGlzIGluIGEgSlNPTiBmb3JtYXQsXG5cdFx0XHQgKiBhbmQgdGhlIG9iamVjdCBoYXMgdGhlIHNhbWUgcHJvcGVydGllcyBhcyB0aGUgb0xhbmd1YWdlIG9iamVjdCBpbiB0aGVcblx0XHRcdCAqIGluaXRpYWxpc2VyIG9iamVjdCAoaS5lLiB0aGUgYWJvdmUgcGFyYW1ldGVycykuIFBsZWFzZSByZWZlciB0byBvbmUgb2Zcblx0XHRcdCAqIHRoZSBleGFtcGxlIGxhbmd1YWdlIGZpbGVzIHRvIHNlZSBob3cgdGhpcyB3b3JrcyBpbiBhY3Rpb24uXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlZmF1bHQgPGk+RW1wdHkgc3RyaW5nIC0gaS5lLiBkaXNhYmxlZDwvaT5cblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnVybFxuXHRcdFx0ICpcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuXHRcdFx0ICogICAgICAgICAgXCJ1cmxcIjogXCJodHRwOi8vd3d3LnNwcnltZWRpYS5jby51ay9kYXRhVGFibGVzL2xhbmcudHh0XCJcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqL1xuXHRcdFx0XCJzVXJsXCI6IFwiXCIsXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogVGV4dCBzaG93biBpbnNpZGUgdGhlIHRhYmxlIHJlY29yZHMgd2hlbiB0aGUgaXMgbm8gaW5mb3JtYXRpb24gdG8gYmVcblx0XHRcdCAqIGRpc3BsYXllZCBhZnRlciBmaWx0ZXJpbmcuIGBlbXB0eVRhYmxlYCBpcyBzaG93biB3aGVuIHRoZXJlIGlzIHNpbXBseSBub1xuXHRcdFx0ICogaW5mb3JtYXRpb24gaW4gdGhlIHRhYmxlIGF0IGFsbCAocmVnYXJkbGVzcyBvZiBmaWx0ZXJpbmcpLlxuXHRcdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdFx0ICogIEBkZWZhdWx0IE5vIG1hdGNoaW5nIHJlY29yZHMgZm91bmRcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnplcm9SZWNvcmRzXG5cdFx0XHQgKlxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG5cdFx0XHQgKiAgICAgICAgICBcInplcm9SZWNvcmRzXCI6IFwiTm8gcmVjb3JkcyB0byBkaXNwbGF5XCJcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgIH0gKTtcblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqL1xuXHRcdFx0XCJzWmVyb1JlY29yZHNcIjogXCJObyBtYXRjaGluZyByZWNvcmRzIGZvdW5kXCJcblx0XHR9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhpcyBwYXJhbWV0ZXIgYWxsb3dzIHlvdSB0byBoYXZlIGRlZmluZSB0aGUgZ2xvYmFsIGZpbHRlcmluZyBzdGF0ZSBhdFxuXHRcdCAqIGluaXRpYWxpc2F0aW9uIHRpbWUuIEFzIGFuIG9iamVjdCB0aGUgYHNlYXJjaGAgcGFyYW1ldGVyIG11c3QgYmVcblx0XHQgKiBkZWZpbmVkLCBidXQgYWxsIG90aGVyIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLiBXaGVuIGByZWdleGAgaXMgdHJ1ZSxcblx0XHQgKiB0aGUgc2VhcmNoIHN0cmluZyB3aWxsIGJlIHRyZWF0ZWQgYXMgYSByZWd1bGFyIGV4cHJlc3Npb24sIHdoZW4gZmFsc2Vcblx0XHQgKiAoZGVmYXVsdCkgaXQgd2lsbCBiZSB0cmVhdGVkIGFzIGEgc3RyYWlnaHQgc3RyaW5nLiBXaGVuIGBzbWFydGBcblx0XHQgKiBEYXRhVGFibGVzIHdpbGwgdXNlIGl0J3Mgc21hcnQgZmlsdGVyaW5nIG1ldGhvZHMgKHRvIHdvcmQgbWF0Y2ggYXRcblx0XHQgKiBhbnkgcG9pbnQgaW4gdGhlIGRhdGEpLCB3aGVuIGZhbHNlIHRoaXMgd2lsbCBub3QgYmUgZG9uZS5cblx0XHQgKiAgQG5hbWVzcGFjZVxuXHRcdCAqICBAZXh0ZW5kcyBEYXRhVGFibGUubW9kZWxzLm9TZWFyY2hcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc2VhcmNoXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNlYXJjaFwiOiB7XCJzZWFyY2hcIjogXCJJbml0aWFsIHNlYXJjaFwifVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKVxuXHRcdCAqL1xuXHRcdFwib1NlYXJjaFwiOiAkLmV4dGVuZCgge30sIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaCApLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogX19EZXByZWNhdGVkX18gVGhlIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgYnkgdGhpcyBwYXJhbWV0ZXIgaGFzIG5vdyBiZWVuXG5cdFx0ICogc3VwZXJzZWRlZCBieSB0aGF0IHByb3ZpZGVkIHRocm91Z2ggYGFqYXhgLCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogQnkgZGVmYXVsdCBEYXRhVGFibGVzIHdpbGwgbG9vayBmb3IgdGhlIHByb3BlcnR5IGBkYXRhYCAob3IgYGFhRGF0YWAgZm9yXG5cdFx0ICogY29tcGF0aWJpbGl0eSB3aXRoIERhdGFUYWJsZXMgMS45LSkgd2hlbiBvYnRhaW5pbmcgZGF0YSBmcm9tIGFuIEFqYXhcblx0XHQgKiBzb3VyY2Ugb3IgZm9yIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcgLSB0aGlzIHBhcmFtZXRlciBhbGxvd3MgdGhhdFxuXHRcdCAqIHByb3BlcnR5IHRvIGJlIGNoYW5nZWQuIFlvdSBjYW4gdXNlIEphdmFzY3JpcHQgZG90dGVkIG9iamVjdCBub3RhdGlvbiB0b1xuXHRcdCAqIGdldCBhIGRhdGEgc291cmNlIGZvciBtdWx0aXBsZSBsZXZlbHMgb2YgbmVzdGluZy5cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IGRhdGFcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xuXHRcdCAqICBAZHRvcHQgU2VydmVyLXNpZGVcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmFqYXhEYXRhUHJvcFxuXHRcdCAqXG5cdFx0ICogIEBkZXByZWNhdGVkIDEuMTAuIFBsZWFzZSB1c2UgYGFqYXhgIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHkgbm93LlxuXHRcdCAqL1xuXHRcdFwic0FqYXhEYXRhUHJvcFwiOiBcImRhdGFcIixcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIF9fRGVwcmVjYXRlZF9fIFRoZSBmdW5jdGlvbmFsaXR5IHByb3ZpZGVkIGJ5IHRoaXMgcGFyYW1ldGVyIGhhcyBub3cgYmVlblxuXHRcdCAqIHN1cGVyc2VkZWQgYnkgdGhhdCBwcm92aWRlZCB0aHJvdWdoIGBhamF4YCwgd2hpY2ggc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIFlvdSBjYW4gaW5zdHJ1Y3QgRGF0YVRhYmxlcyB0byBsb2FkIGRhdGEgZnJvbSBhbiBleHRlcm5hbFxuXHRcdCAqIHNvdXJjZSB1c2luZyB0aGlzIHBhcmFtZXRlciAodXNlIGFEYXRhIGlmIHlvdSB3YW50IHRvIHBhc3MgZGF0YSBpbiB5b3Vcblx0XHQgKiBhbHJlYWR5IGhhdmUpLiBTaW1wbHkgcHJvdmlkZSBhIHVybCBhIEpTT04gb2JqZWN0IGNhbiBiZSBvYnRhaW5lZCBmcm9tLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXG5cdFx0ICogIEBkdG9wdCBTZXJ2ZXItc2lkZVxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuYWpheFNvdXJjZVxuXHRcdCAqXG5cdFx0ICogIEBkZXByZWNhdGVkIDEuMTAuIFBsZWFzZSB1c2UgYGFqYXhgIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHkgbm93LlxuXHRcdCAqL1xuXHRcdFwic0FqYXhTb3VyY2VcIjogbnVsbCxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgaW5pdGlhbGlzYXRpb24gdmFyaWFibGUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGV4YWN0bHkgd2hlcmUgaW4gdGhlXG5cdFx0ICogRE9NIHlvdSB3YW50IERhdGFUYWJsZXMgdG8gaW5qZWN0IHRoZSB2YXJpb3VzIGNvbnRyb2xzIGl0IGFkZHMgdG8gdGhlIHBhZ2Vcblx0XHQgKiAoZm9yIGV4YW1wbGUgeW91IG1pZ2h0IHdhbnQgdGhlIHBhZ2luYXRpb24gY29udHJvbHMgYXQgdGhlIHRvcCBvZiB0aGVcblx0XHQgKiB0YWJsZSkuIERJViBlbGVtZW50cyAod2l0aCBvciB3aXRob3V0IGEgY3VzdG9tIGNsYXNzKSBjYW4gYWxzbyBiZSBhZGRlZCB0b1xuXHRcdCAqIGFpZCBzdHlsaW5nLiBUaGUgZm9sbG93IHN5bnRheCBpcyB1c2VkOlxuXHRcdCAqICAgPHVsPlxuXHRcdCAqICAgICA8bGk+VGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBhbGxvd2VkOlxuXHRcdCAqICAgICAgIDx1bD5cblx0XHQgKiAgICAgICAgIDxsaT4nbCcgLSBMZW5ndGggY2hhbmdpbmc8L2xpPlxuXHRcdCAqICAgICAgICAgPGxpPidmJyAtIEZpbHRlcmluZyBpbnB1dDwvbGk+XG5cdFx0ICogICAgICAgICA8bGk+J3QnIC0gVGhlIHRhYmxlITwvbGk+XG5cdFx0ICogICAgICAgICA8bGk+J2knIC0gSW5mb3JtYXRpb248L2xpPlxuXHRcdCAqICAgICAgICAgPGxpPidwJyAtIFBhZ2luYXRpb248L2xpPlxuXHRcdCAqICAgICAgICAgPGxpPidyJyAtIHBSb2Nlc3Npbmc8L2xpPlxuXHRcdCAqICAgICAgIDwvdWw+XG5cdFx0ICogICAgIDwvbGk+XG5cdFx0ICogICAgIDxsaT5UaGUgZm9sbG93aW5nIGNvbnN0YW50cyBhcmUgYWxsb3dlZDpcblx0XHQgKiAgICAgICA8dWw+XG5cdFx0ICogICAgICAgICA8bGk+J0gnIC0galF1ZXJ5VUkgdGhlbWUgXCJoZWFkZXJcIiBjbGFzc2VzICgnZmctdG9vbGJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci10bCB1aS1jb3JuZXItdHIgdWktaGVscGVyLWNsZWFyZml4Jyk8L2xpPlxuXHRcdCAqICAgICAgICAgPGxpPidGJyAtIGpRdWVyeVVJIHRoZW1lIFwiZm9vdGVyXCIgY2xhc3NlcyAoJ2ZnLXRvb2xiYXIgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItYmwgdWktY29ybmVyLWJyIHVpLWhlbHBlci1jbGVhcmZpeCcpPC9saT5cblx0XHQgKiAgICAgICA8L3VsPlxuXHRcdCAqICAgICA8L2xpPlxuXHRcdCAqICAgICA8bGk+VGhlIGZvbGxvd2luZyBzeW50YXggaXMgZXhwZWN0ZWQ6XG5cdFx0ICogICAgICAgPHVsPlxuXHRcdCAqICAgICAgICAgPGxpPicmbHQ7JyBhbmQgJyZndDsnIC0gZGl2IGVsZW1lbnRzPC9saT5cblx0XHQgKiAgICAgICAgIDxsaT4nJmx0O1wiY2xhc3NcIiBhbmQgJyZndDsnIC0gZGl2IHdpdGggYSBjbGFzczwvbGk+XG5cdFx0ICogICAgICAgICA8bGk+JyZsdDtcIiNpZFwiIGFuZCAnJmd0OycgLSBkaXYgd2l0aCBhbiBJRDwvbGk+XG5cdFx0ICogICAgICAgPC91bD5cblx0XHQgKiAgICAgPC9saT5cblx0XHQgKiAgICAgPGxpPkV4YW1wbGVzOlxuXHRcdCAqICAgICAgIDx1bD5cblx0XHQgKiAgICAgICAgIDxsaT4nJmx0O1wid3JhcHBlclwiZmxpcHQmZ3Q7JzwvbGk+XG5cdFx0ICogICAgICAgICA8bGk+JyZsdDtsZiZsdDt0Jmd0O2lwJmd0Oyc8L2xpPlxuXHRcdCAqICAgICAgIDwvdWw+XG5cdFx0ICogICAgIDwvbGk+XG5cdFx0ICogICA8L3VsPlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbGZydGlwIDxpPih3aGVuIGBqUXVlcnlVSWAgaXMgZmFsc2UpPC9pPiA8Yj5vcjwvYj5cblx0XHQgKiAgICA8XCJIXCJsZnI+dDxcIkZcImlwPiA8aT4od2hlbiBgalF1ZXJ5VUlgIGlzIHRydWUpPC9pPlxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5kb21cblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiZG9tXCI6ICcmbHQ7XCJ0b3BcImkmZ3Q7cnQmbHQ7XCJib3R0b21cImZscCZndDsmbHQ7XCJjbGVhclwiJmd0Oydcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJzRG9tXCI6IFwibGZydGlwXCIsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBTZWFyY2ggZGVsYXkgb3B0aW9uLiBUaGlzIHdpbGwgdGhyb3R0bGUgZnVsbCB0YWJsZSBzZWFyY2hlcyB0aGF0IHVzZSB0aGVcblx0XHQgKiBEYXRhVGFibGVzIHByb3ZpZGVkIHNlYXJjaCBpbnB1dCBlbGVtZW50IChpdCBkb2VzIG5vdCBlZmZlY3QgY2FsbHMgdG9cblx0XHQgKiBgZHQtYXBpIHNlYXJjaCgpYCwgcHJvdmlkaW5nIGEgZGVsYXkgYmVmb3JlIHRoZSBzZWFyY2ggaXMgbWFkZS5cblx0XHQgKiAgQHR5cGUgaW50ZWdlclxuXHRcdCAqICBAZGVmYXVsdCAwXG5cdFx0ICpcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlYXJjaERlbGF5XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNlYXJjaERlbGF5XCI6IDIwMFxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKVxuXHRcdCAqL1xuXHRcdFwic2VhcmNoRGVsYXlcIjogbnVsbCxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIERhdGFUYWJsZXMgZmVhdHVyZXMgZm91ciBkaWZmZXJlbnQgYnVpbHQtaW4gb3B0aW9ucyBmb3IgdGhlIGJ1dHRvbnMgdG9cblx0XHQgKiBkaXNwbGF5IGZvciBwYWdpbmF0aW9uIGNvbnRyb2w6XG5cdFx0ICpcblx0XHQgKiAqIGBzaW1wbGVgIC0gJ1ByZXZpb3VzJyBhbmQgJ05leHQnIGJ1dHRvbnMgb25seVxuXHRcdCAqICogJ3NpbXBsZV9udW1iZXJzYCAtICdQcmV2aW91cycgYW5kICdOZXh0JyBidXR0b25zLCBwbHVzIHBhZ2UgbnVtYmVyc1xuXHRcdCAqICogYGZ1bGxgIC0gJ0ZpcnN0JywgJ1ByZXZpb3VzJywgJ05leHQnIGFuZCAnTGFzdCcgYnV0dG9uc1xuXHRcdCAqICogYGZ1bGxfbnVtYmVyc2AgLSAnRmlyc3QnLCAnUHJldmlvdXMnLCAnTmV4dCcgYW5kICdMYXN0JyBidXR0b25zLCBwbHVzXG5cdFx0ICogICBwYWdlIG51bWJlcnNcblx0XHQgKiAgXG5cdFx0ICogRnVydGhlciBtZXRob2RzIGNhbiBiZSBhZGRlZCB1c2luZyB7QGxpbmsgRGF0YVRhYmxlLmV4dC5vUGFnaW5hdGlvbn0uXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBzaW1wbGVfbnVtYmVyc1xuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5wYWdpbmdUeXBlXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInBhZ2luZ1R5cGVcIjogXCJmdWxsX251bWJlcnNcIlxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKVxuXHRcdCAqL1xuXHRcdFwic1BhZ2luYXRpb25UeXBlXCI6IFwic2ltcGxlX251bWJlcnNcIixcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBob3Jpem9udGFsIHNjcm9sbGluZy4gV2hlbiBhIHRhYmxlIGlzIHRvbyB3aWRlIHRvIGZpdCBpbnRvIGFcblx0XHQgKiBjZXJ0YWluIGxheW91dCwgb3IgeW91IGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgdGFibGUsIHlvdVxuXHRcdCAqIGNhbiBlbmFibGUgeC1zY3JvbGxpbmcgdG8gc2hvdyB0aGUgdGFibGUgaW4gYSB2aWV3cG9ydCwgd2hpY2ggY2FuIGJlXG5cdFx0ICogc2Nyb2xsZWQuIFRoaXMgcHJvcGVydHkgY2FuIGJlIGB0cnVlYCB3aGljaCB3aWxsIGFsbG93IHRoZSB0YWJsZSB0b1xuXHRcdCAqIHNjcm9sbCBob3Jpem9udGFsbHkgd2hlbiBuZWVkZWQsIG9yIGFueSBDU1MgdW5pdCwgb3IgYSBudW1iZXIgKGluIHdoaWNoXG5cdFx0ICogY2FzZSBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBwaXhlbCBtZWFzdXJlbWVudCkuIFNldHRpbmcgYXMgc2ltcGx5IGB0cnVlYFxuXHRcdCAqIGlzIHJlY29tbWVuZGVkLlxuXHRcdCAqICBAdHlwZSBib29sZWFufHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCA8aT5ibGFuayBzdHJpbmcgLSBpLmUuIGRpc2FibGVkPC9pPlxuXHRcdCAqXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc2Nyb2xsWFxuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJzY3JvbGxYXCI6IHRydWUsXG5cdFx0ICogICAgICAgIFwic2Nyb2xsQ29sbGFwc2VcIjogdHJ1ZVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNTY3JvbGxYXCI6IFwiXCIsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIGZvcmNlIGEgRGF0YVRhYmxlIHRvIHVzZSBtb3JlIHdpZHRoIHRoYW4gaXRcblx0XHQgKiBtaWdodCBvdGhlcndpc2UgZG8gd2hlbiB4LXNjcm9sbGluZyBpcyBlbmFibGVkLiBGb3IgZXhhbXBsZSBpZiB5b3UgaGF2ZSBhXG5cdFx0ICogdGFibGUgd2hpY2ggcmVxdWlyZXMgdG8gYmUgd2VsbCBzcGFjZWQsIHRoaXMgcGFyYW1ldGVyIGlzIHVzZWZ1bCBmb3Jcblx0XHQgKiBcIm92ZXItc2l6aW5nXCIgdGhlIHRhYmxlLCBhbmQgdGh1cyBmb3JjaW5nIHNjcm9sbGluZy4gVGhpcyBwcm9wZXJ0eSBjYW4gYnlcblx0XHQgKiBhbnkgQ1NTIHVuaXQsIG9yIGEgbnVtYmVyIChpbiB3aGljaCBjYXNlIGl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHBpeGVsXG5cdFx0ICogbWVhc3VyZW1lbnQpLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgPGk+Ymxhbmsgc3RyaW5nIC0gaS5lLiBkaXNhYmxlZDwvaT5cblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc2Nyb2xsWElubmVyXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcInNjcm9sbFhcIjogXCIxMDAlXCIsXG5cdFx0ICogICAgICAgIFwic2Nyb2xsWElubmVyXCI6IFwiMTEwJVwiXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwic1Njcm9sbFhJbm5lclwiOiBcIlwiLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIHZlcnRpY2FsIHNjcm9sbGluZy4gVmVydGljYWwgc2Nyb2xsaW5nIHdpbGwgY29uc3RyYWluIHRoZSBEYXRhVGFibGVcblx0XHQgKiB0byB0aGUgZ2l2ZW4gaGVpZ2h0LCBhbmQgZW5hYmxlIHNjcm9sbGluZyBmb3IgYW55IGRhdGEgd2hpY2ggb3ZlcmZsb3dzIHRoZVxuXHRcdCAqIGN1cnJlbnQgdmlld3BvcnQuIFRoaXMgY2FuIGJlIHVzZWQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gcGFnaW5nIHRvIGRpc3BsYXlcblx0XHQgKiBhIGxvdCBvZiBkYXRhIGluIGEgc21hbGwgYXJlYSAoYWx0aG91Z2ggcGFnaW5nIGFuZCBzY3JvbGxpbmcgY2FuIGJvdGggYmVcblx0XHQgKiBlbmFibGVkIGF0IHRoZSBzYW1lIHRpbWUpLiBUaGlzIHByb3BlcnR5IGNhbiBiZSBhbnkgQ1NTIHVuaXQsIG9yIGEgbnVtYmVyXG5cdFx0ICogKGluIHdoaWNoIGNhc2UgaXQgd2lsbCBiZSB0cmVhdGVkIGFzIGEgcGl4ZWwgbWVhc3VyZW1lbnQpLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgPGk+Ymxhbmsgc3RyaW5nIC0gaS5lLiBkaXNhYmxlZDwvaT5cblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNjcm9sbFlcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwic2Nyb2xsWVwiOiBcIjIwMHB4XCIsXG5cdFx0ICogICAgICAgIFwicGFnaW5hdGVcIjogZmFsc2Vcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJzU2Nyb2xsWVwiOiBcIlwiLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogX19EZXByZWNhdGVkX18gVGhlIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgYnkgdGhpcyBwYXJhbWV0ZXIgaGFzIG5vdyBiZWVuXG5cdFx0ICogc3VwZXJzZWRlZCBieSB0aGF0IHByb3ZpZGVkIHRocm91Z2ggYGFqYXhgLCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogU2V0IHRoZSBIVFRQIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gbWFrZSB0aGUgQWpheCBjYWxsIGZvciBzZXJ2ZXItc2lkZVxuXHRcdCAqIHByb2Nlc3Npbmcgb3IgQWpheCBzb3VyY2VkIGRhdGEuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBHRVRcblx0XHQgKlxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xuXHRcdCAqICBAZHRvcHQgU2VydmVyLXNpZGVcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlcnZlck1ldGhvZFxuXHRcdCAqXG5cdFx0ICogIEBkZXByZWNhdGVkIDEuMTAuIFBsZWFzZSB1c2UgYGFqYXhgIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHkgbm93LlxuXHRcdCAqL1xuXHRcdFwic1NlcnZlck1ldGhvZFwiOiBcIkdFVFwiLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRGF0YVRhYmxlcyBtYWtlcyB1c2Ugb2YgcmVuZGVyZXJzIHdoZW4gZGlzcGxheWluZyBIVE1MIGVsZW1lbnRzIGZvclxuXHRcdCAqIGEgdGFibGUuIFRoZXNlIHJlbmRlcmVycyBjYW4gYmUgYWRkZWQgb3IgbW9kaWZpZWQgYnkgcGx1Zy1pbnMgdG9cblx0XHQgKiBnZW5lcmF0ZSBzdWl0YWJsZSBtYXJrLXVwIGZvciBhIHNpdGUuIEZvciBleGFtcGxlIHRoZSBCb290c3RyYXBcblx0XHQgKiBpbnRlZ3JhdGlvbiBwbHVnLWluIGZvciBEYXRhVGFibGVzIHVzZXMgYSBwYWdpbmcgYnV0dG9uIHJlbmRlcmVyIHRvXG5cdFx0ICogZGlzcGxheSBwYWdpbmF0aW9uIGJ1dHRvbnMgaW4gdGhlIG1hcmstdXAgcmVxdWlyZWQgYnkgQm9vdHN0cmFwLlxuXHRcdCAqXG5cdFx0ICogRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlbmRlcmVycyBhdmFpbGFibGUgc2VlXG5cdFx0ICogRGF0YVRhYmxlLmV4dC5yZW5kZXJlclxuXHRcdCAqICBAdHlwZSBzdHJpbmd8b2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucmVuZGVyZXJcblx0XHQgKlxuXHRcdCAqL1xuXHRcdFwicmVuZGVyZXJcIjogbnVsbCxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNldCB0aGUgZGF0YSBwcm9wZXJ0eSBuYW1lIHRoYXQgRGF0YVRhYmxlcyBzaG91bGQgdXNlIHRvIGdldCBhIHJvdydzIGlkXG5cdFx0ICogdG8gc2V0IGFzIHRoZSBgaWRgIHByb3BlcnR5IGluIHRoZSBub2RlLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgRFRfUm93SWRcblx0XHQgKlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucm93SWRcblx0XHQgKi9cblx0XHRcInJvd0lkXCI6IFwiRFRfUm93SWRcIlxuXHR9O1xuXHRcblx0X2ZuSHVuZ2FyaWFuTWFwKCBEYXRhVGFibGUuZGVmYXVsdHMgKTtcblx0XG5cdFxuXHRcblx0Lypcblx0ICogRGV2ZWxvcGVyIG5vdGUgLSBTZWUgbm90ZSBpbiBtb2RlbC5kZWZhdWx0cy5qcyBhYm91dCB0aGUgdXNlIG9mIEh1bmdhcmlhblxuXHQgKiBub3RhdGlvbiBhbmQgY2FtZWwgY2FzZS5cblx0ICovXG5cdFxuXHQvKipcblx0ICogQ29sdW1uIG9wdGlvbnMgdGhhdCBjYW4gYmUgZ2l2ZW4gdG8gRGF0YVRhYmxlcyBhdCBpbml0aWFsaXNhdGlvbiB0aW1lLlxuXHQgKiAgQG5hbWVzcGFjZVxuXHQgKi9cblx0RGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbiA9IHtcblx0XHQvKipcblx0XHQgKiBEZWZpbmUgd2hpY2ggY29sdW1uKHMpIGFuIG9yZGVyIHdpbGwgb2NjdXIgb24gZm9yIHRoaXMgY29sdW1uLiBUaGlzXG5cdFx0ICogYWxsb3dzIGEgY29sdW1uJ3Mgb3JkZXJpbmcgdG8gdGFrZSBtdWx0aXBsZSBjb2x1bW5zIGludG8gYWNjb3VudCB3aGVuXG5cdFx0ICogZG9pbmcgYSBzb3J0IG9yIHVzZSB0aGUgZGF0YSBmcm9tIGEgZGlmZmVyZW50IGNvbHVtbi4gRm9yIGV4YW1wbGUgZmlyc3Rcblx0XHQgKiBuYW1lIC8gbGFzdCBuYW1lIGNvbHVtbnMgbWFrZSBzZW5zZSB0byBkbyBhIG11bHRpLWNvbHVtbiBzb3J0IG92ZXIgdGhlXG5cdFx0ICogdHdvIGNvbHVtbnMuXG5cdFx0ICogIEB0eXBlIGFycmF5fGludFxuXHRcdCAqICBAZGVmYXVsdCBudWxsIDxpPlRha2VzIHRoZSB2YWx1ZSBvZiB0aGUgY29sdW1uIGluZGV4IGF1dG9tYXRpY2FsbHk8L2k+XG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5vcmRlckRhdGFcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVwiOiBbIDAsIDEgXSwgXCJ0YXJnZXRzXCI6IFsgMCBdIH0sXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVwiOiBbIDEsIDAgXSwgXCJ0YXJnZXRzXCI6IFsgMSBdIH0sXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVwiOiAyLCBcInRhcmdldHNcIjogWyAyIF0gfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhXCI6IFsgMCwgMSBdIH0sXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVwiOiBbIDEsIDAgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlckRhdGFcIjogMiB9LFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbFxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYURhdGFTb3J0XCI6IG51bGwsXG5cdFx0XCJpRGF0YVNvcnRcIjogLTEsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBZb3UgY2FuIGNvbnRyb2wgdGhlIGRlZmF1bHQgb3JkZXJpbmcgZGlyZWN0aW9uLCBhbmQgZXZlbiBhbHRlciB0aGVcblx0XHQgKiBiZWhhdmlvdXIgb2YgdGhlIHNvcnQgaGFuZGxlciAoaS5lLiBvbmx5IGFsbG93IGFzY2VuZGluZyBvcmRlcmluZyBldGMpXG5cdFx0ICogdXNpbmcgdGhpcyBwYXJhbWV0ZXIuXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFsgJ2FzYycsICdkZXNjJyBdXG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5vcmRlclNlcXVlbmNlXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJhc2NcIiBdLCBcInRhcmdldHNcIjogWyAxIF0gfSxcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJTZXF1ZW5jZVwiOiBbIFwiZGVzY1wiLCBcImFzY1wiLCBcImFzY1wiIF0sIFwidGFyZ2V0c1wiOiBbIDIgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJkZXNjXCIgXSwgXCJ0YXJnZXRzXCI6IFsgMyBdIH1cblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJTZXF1ZW5jZVwiOiBbIFwiYXNjXCIgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJkZXNjXCIsIFwiYXNjXCIsIFwiYXNjXCIgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJkZXNjXCIgXSB9LFxuXHRcdCAqICAgICAgICAgIG51bGxcblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcImFzU29ydGluZ1wiOiBbICdhc2MnLCAnZGVzYycgXSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIGZpbHRlcmluZyBvbiB0aGUgZGF0YSBpbiB0aGlzIGNvbHVtbi5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5zZWFyY2hhYmxlXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJzZWFyY2hhYmxlXCI6IGZhbHNlLCBcInRhcmdldHNcIjogWyAwIF0gfVxuXHRcdCAqICAgICAgICBdIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJzZWFyY2hhYmxlXCI6IGZhbHNlIH0sXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbFxuXHRcdCAqICAgICAgICBdIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiU2VhcmNoYWJsZVwiOiB0cnVlLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIG9yIGRpc2FibGUgb3JkZXJpbmcgb24gdGhpcyBjb2x1bW4uXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4ub3JkZXJhYmxlXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlcmFibGVcIjogZmFsc2UsIFwidGFyZ2V0c1wiOiBbIDAgXSB9XG5cdFx0ICogICAgICAgIF0gfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyYWJsZVwiOiBmYWxzZSB9LFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGxcblx0XHQgKiAgICAgICAgXSB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwiYlNvcnRhYmxlXCI6IHRydWUsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgZGlzcGxheSBvZiB0aGlzIGNvbHVtbi5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi52aXNpYmxlXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJ2aXNpYmxlXCI6IGZhbHNlLCBcInRhcmdldHNcIjogWyAwIF0gfVxuXHRcdCAqICAgICAgICBdIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJ2aXNpYmxlXCI6IGZhbHNlIH0sXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbFxuXHRcdCAqICAgICAgICBdIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJiVmlzaWJsZVwiOiB0cnVlLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRGV2ZWxvcGVyIGRlZmluYWJsZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBhIGNlbGwgaXMgY3JlYXRlZCAoQWpheCBzb3VyY2UsXG5cdFx0ICogZXRjKSBvciBwcm9jZXNzZWQgZm9yIGlucHV0IChET00gc291cmNlKS4gVGhpcyBjYW4gYmUgdXNlZCBhcyBhIGNvbXBsaW1lbnQgdG8gbVJlbmRlclxuXHRcdCAqIGFsbG93aW5nIHlvdSB0byBtb2RpZnkgdGhlIERPTSBlbGVtZW50IChhZGQgYmFja2dyb3VuZCBjb2xvdXIgZm9yIGV4YW1wbGUpIHdoZW4gdGhlXG5cdFx0ICogZWxlbWVudCBpcyBhdmFpbGFibGUuXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBwYXJhbSB7ZWxlbWVudH0gdGQgVGhlIFREIG5vZGUgdGhhdCBoYXMgYmVlbiBjcmVhdGVkXG5cdFx0ICogIEBwYXJhbSB7Kn0gY2VsbERhdGEgVGhlIERhdGEgZm9yIHRoZSBjZWxsXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSByb3dEYXRhIFRoZSBkYXRhIGZvciB0aGUgd2hvbGUgcm93XG5cdFx0ICogIEBwYXJhbSB7aW50fSByb3cgVGhlIHJvdyBpbmRleCBmb3IgdGhlIGFvRGF0YSBkYXRhIHN0b3JlXG5cdFx0ICogIEBwYXJhbSB7aW50fSBjb2wgVGhlIGNvbHVtbiBpbmRleCBmb3IgYW9Db2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5jcmVhdGVkQ2VsbFxuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xuXHRcdCAqICAgICAgICAgIFwidGFyZ2V0c1wiOiBbM10sXG5cdFx0ICogICAgICAgICAgXCJjcmVhdGVkQ2VsbFwiOiBmdW5jdGlvbiAodGQsIGNlbGxEYXRhLCByb3dEYXRhLCByb3csIGNvbCkge1xuXHRcdCAqICAgICAgICAgICAgaWYgKCBjZWxsRGF0YSA9PSBcIjEuN1wiICkge1xuXHRcdCAqICAgICAgICAgICAgICAkKHRkKS5jc3MoJ2NvbG9yJywgJ2JsdWUnKVxuXHRcdCAqICAgICAgICAgICAgfVxuXHRcdCAqICAgICAgICAgIH1cblx0XHQgKiAgICAgICAgfSBdXG5cdFx0ICogICAgICB9KTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJmbkNyZWF0ZWRDZWxsXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGlzIHBhcmFtZXRlciBoYXMgYmVlbiByZXBsYWNlZCBieSBgZGF0YWAgaW4gRGF0YVRhYmxlcyB0byBlbnN1cmUgbmFtaW5nXG5cdFx0ICogY29uc2lzdGVuY3kuIGBkYXRhUHJvcGAgY2FuIHN0aWxsIGJlIHVzZWQsIGFzIHRoZXJlIGlzIGJhY2t3YXJkc1xuXHRcdCAqIGNvbXBhdGliaWxpdHkgaW4gRGF0YVRhYmxlcyBmb3IgdGhpcyBvcHRpb24sIGJ1dCBpdCBpcyBzdHJvbmdseVxuXHRcdCAqIHJlY29tbWVuZGVkIHRoYXQgeW91IHVzZSBgZGF0YWAgaW4gcHJlZmVyZW5jZSB0byBgZGF0YVByb3BgLlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLmRhdGFQcm9wXG5cdFx0ICovXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHJlYWQgZGF0YSBmcm9tIGFueSBkYXRhIHNvdXJjZSBwcm9wZXJ0eSxcblx0XHQgKiBpbmNsdWRpbmcgZGVlcGx5IG5lc3RlZCBvYmplY3RzIC8gcHJvcGVydGllcy4gYGRhdGFgIGNhbiBiZSBnaXZlbiBpbiBhXG5cdFx0ICogbnVtYmVyIG9mIGRpZmZlcmVudCB3YXlzIHdoaWNoIGVmZmVjdCBpdHMgYmVoYXZpb3VyOlxuXHRcdCAqXG5cdFx0ICogKiBgaW50ZWdlcmAgLSB0cmVhdGVkIGFzIGFuIGFycmF5IGluZGV4IGZvciB0aGUgZGF0YSBzb3VyY2UuIFRoaXMgaXMgdGhlXG5cdFx0ICogICBkZWZhdWx0IHRoYXQgRGF0YVRhYmxlcyB1c2VzIChpbmNyZW1lbnRhbGx5IGluY3JlYXNlZCBmb3IgZWFjaCBjb2x1bW4pLlxuXHRcdCAqICogYHN0cmluZ2AgLSByZWFkIGFuIG9iamVjdCBwcm9wZXJ0eSBmcm9tIHRoZSBkYXRhIHNvdXJjZS4gVGhlcmUgYXJlXG5cdFx0ICogICB0aHJlZSAnc3BlY2lhbCcgb3B0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIGluIHRoZSBzdHJpbmcgdG8gYWx0ZXIgaG93XG5cdFx0ICogICBEYXRhVGFibGVzIHJlYWRzIHRoZSBkYXRhIGZyb20gdGhlIHNvdXJjZSBvYmplY3Q6XG5cdFx0ICogICAgKiBgLmAgLSBEb3R0ZWQgSmF2YXNjcmlwdCBub3RhdGlvbi4gSnVzdCBhcyB5b3UgdXNlIGEgYC5gIGluXG5cdFx0ICogICAgICBKYXZhc2NyaXB0IHRvIHJlYWQgZnJvbSBuZXN0ZWQgb2JqZWN0cywgc28gdG8gY2FuIHRoZSBvcHRpb25zXG5cdFx0ICogICAgICBzcGVjaWZpZWQgaW4gYGRhdGFgLiBGb3IgZXhhbXBsZTogYGJyb3dzZXIudmVyc2lvbmAgb3Jcblx0XHQgKiAgICAgIGBicm93c2VyLm5hbWVgLiBJZiB5b3VyIG9iamVjdCBwYXJhbWV0ZXIgbmFtZSBjb250YWlucyBhIHBlcmlvZCwgdXNlXG5cdFx0ICogICAgICBgXFxcXGAgdG8gZXNjYXBlIGl0IC0gaS5lLiBgZmlyc3RcXFxcLm5hbWVgLlxuXHRcdCAqICAgICogYFtdYCAtIEFycmF5IG5vdGF0aW9uLiBEYXRhVGFibGVzIGNhbiBhdXRvbWF0aWNhbGx5IGNvbWJpbmUgZGF0YVxuXHRcdCAqICAgICAgZnJvbSBhbmQgYXJyYXkgc291cmNlLCBqb2luaW5nIHRoZSBkYXRhIHdpdGggdGhlIGNoYXJhY3RlcnMgcHJvdmlkZWRcblx0XHQgKiAgICAgIGJldHdlZW4gdGhlIHR3byBicmFja2V0cy4gRm9yIGV4YW1wbGU6IGBuYW1lWywgXWAgd291bGQgcHJvdmlkZSBhXG5cdFx0ICogICAgICBjb21tYS1zcGFjZSBzZXBhcmF0ZWQgbGlzdCBmcm9tIHRoZSBzb3VyY2UgYXJyYXkuIElmIG5vIGNoYXJhY3RlcnNcblx0XHQgKiAgICAgIGFyZSBwcm92aWRlZCBiZXR3ZWVuIHRoZSBicmFja2V0cywgdGhlIG9yaWdpbmFsIGFycmF5IHNvdXJjZSBpc1xuXHRcdCAqICAgICAgcmV0dXJuZWQuXG5cdFx0ICogICAgKiBgKClgIC0gRnVuY3Rpb24gbm90YXRpb24uIEFkZGluZyBgKClgIHRvIHRoZSBlbmQgb2YgYSBwYXJhbWV0ZXIgd2lsbFxuXHRcdCAqICAgICAgZXhlY3V0ZSBhIGZ1bmN0aW9uIG9mIHRoZSBuYW1lIGdpdmVuLiBGb3IgZXhhbXBsZTogYGJyb3dzZXIoKWAgZm9yIGFcblx0XHQgKiAgICAgIHNpbXBsZSBmdW5jdGlvbiBvbiB0aGUgZGF0YSBzb3VyY2UsIGBicm93c2VyLnZlcnNpb24oKWAgZm9yIGFcblx0XHQgKiAgICAgIGZ1bmN0aW9uIGluIGEgbmVzdGVkIHByb3BlcnR5IG9yIGV2ZW4gYGJyb3dzZXIoKS52ZXJzaW9uYCB0byBnZXQgYW5cblx0XHQgKiAgICAgIG9iamVjdCBwcm9wZXJ0eSBpZiB0aGUgZnVuY3Rpb24gY2FsbGVkIHJldHVybnMgYW4gb2JqZWN0LiBOb3RlIHRoYXRcblx0XHQgKiAgICAgIGZ1bmN0aW9uIG5vdGF0aW9uIGlzIHJlY29tbWVuZGVkIGZvciB1c2UgaW4gYHJlbmRlcmAgcmF0aGVyIHRoYW5cblx0XHQgKiAgICAgIGBkYXRhYCBhcyBpdCBpcyBtdWNoIHNpbXBsZXIgdG8gdXNlIGFzIGEgcmVuZGVyZXIuXG5cdFx0ICogKiBgbnVsbGAgLSB1c2UgdGhlIG9yaWdpbmFsIGRhdGEgc291cmNlIGZvciB0aGUgcm93IHJhdGhlciB0aGFuIHBsdWNraW5nXG5cdFx0ICogICBkYXRhIGRpcmVjdGx5IGZyb20gaXQuIFRoaXMgYWN0aW9uIGhhcyBlZmZlY3RzIG9uIHR3byBvdGhlclxuXHRcdCAqICAgaW5pdGlhbGlzYXRpb24gb3B0aW9uczpcblx0XHQgKiAgICAqIGBkZWZhdWx0Q29udGVudGAgLSBXaGVuIG51bGwgaXMgZ2l2ZW4gYXMgdGhlIGBkYXRhYCBvcHRpb24gYW5kXG5cdFx0ICogICAgICBgZGVmYXVsdENvbnRlbnRgIGlzIHNwZWNpZmllZCBmb3IgdGhlIGNvbHVtbiwgdGhlIHZhbHVlIGRlZmluZWQgYnlcblx0XHQgKiAgICAgIGBkZWZhdWx0Q29udGVudGAgd2lsbCBiZSB1c2VkIGZvciB0aGUgY2VsbC5cblx0XHQgKiAgICAqIGByZW5kZXJgIC0gV2hlbiBudWxsIGlzIHVzZWQgZm9yIHRoZSBgZGF0YWAgb3B0aW9uIGFuZCB0aGUgYHJlbmRlcmBcblx0XHQgKiAgICAgIG9wdGlvbiBpcyBzcGVjaWZpZWQgZm9yIHRoZSBjb2x1bW4sIHRoZSB3aG9sZSBkYXRhIHNvdXJjZSBmb3IgdGhlXG5cdFx0ICogICAgICByb3cgaXMgdXNlZCBmb3IgdGhlIHJlbmRlcmVyLlxuXHRcdCAqICogYGZ1bmN0aW9uYCAtIHRoZSBmdW5jdGlvbiBnaXZlbiB3aWxsIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIERhdGFUYWJsZXNcblx0XHQgKiAgIG5lZWRzIHRvIHNldCBvciBnZXQgdGhlIGRhdGEgZm9yIGEgY2VsbCBpbiB0aGUgY29sdW1uLiBUaGUgZnVuY3Rpb25cblx0XHQgKiAgIHRha2VzIHRocmVlIHBhcmFtZXRlcnM6XG5cdFx0ICogICAgKiBQYXJhbWV0ZXJzOlxuXHRcdCAqICAgICAgKiBge2FycmF5fG9iamVjdH1gIFRoZSBkYXRhIHNvdXJjZSBmb3IgdGhlIHJvd1xuXHRcdCAqICAgICAgKiBge3N0cmluZ31gIFRoZSB0eXBlIGNhbGwgZGF0YSByZXF1ZXN0ZWQgLSB0aGlzIHdpbGwgYmUgJ3NldCcgd2hlblxuXHRcdCAqICAgICAgICBzZXR0aW5nIGRhdGEgb3IgJ2ZpbHRlcicsICdkaXNwbGF5JywgJ3R5cGUnLCAnc29ydCcgb3IgdW5kZWZpbmVkXG5cdFx0ICogICAgICAgIHdoZW4gZ2F0aGVyaW5nIGRhdGEuIE5vdGUgdGhhdCB3aGVuIGB1bmRlZmluZWRgIGlzIGdpdmVuIGZvciB0aGVcblx0XHQgKiAgICAgICAgdHlwZSBEYXRhVGFibGVzIGV4cGVjdHMgdG8gZ2V0IHRoZSByYXcgZGF0YSBmb3IgdGhlIG9iamVjdCBiYWNrPFxuXHRcdCAqICAgICAgKiBgeyp9YCBEYXRhIHRvIHNldCB3aGVuIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzICdzZXQnLlxuXHRcdCAqICAgICogUmV0dXJuOlxuXHRcdCAqICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uIGlzIG5vdCByZXF1aXJlZCB3aGVuICdzZXQnIGlzXG5cdFx0ICogICAgICAgIHRoZSB0eXBlIG9mIGNhbGwsIGJ1dCBvdGhlcndpc2UgdGhlIHJldHVybiBpcyB3aGF0IHdpbGwgYmUgdXNlZFxuXHRcdCAqICAgICAgICBmb3IgdGhlIGRhdGEgcmVxdWVzdGVkLlxuXHRcdCAqXG5cdFx0ICogTm90ZSB0aGF0IGBkYXRhYCBpcyBhIGdldHRlciBhbmQgc2V0dGVyIG9wdGlvbi4gSWYgeW91IGp1c3QgcmVxdWlyZVxuXHRcdCAqIGZvcm1hdHRpbmcgb2YgZGF0YSBmb3Igb3V0cHV0LCB5b3Ugd2lsbCBsaWtlbHkgd2FudCB0byB1c2UgYHJlbmRlcmAgd2hpY2hcblx0XHQgKiBpcyBzaW1wbHkgYSBnZXR0ZXIgYW5kIHRodXMgc2ltcGxlciB0byB1c2UuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgcHJpb3IgdG8gRGF0YVRhYmxlcyAxLjkuMiBgZGF0YWAgd2FzIGNhbGxlZCBgbURhdGFQcm9wYC4gVGhlXG5cdFx0ICogbmFtZSBjaGFuZ2UgcmVmbGVjdHMgdGhlIGZsZXhpYmlsaXR5IG9mIHRoaXMgcHJvcGVydHkgYW5kIGlzIGNvbnNpc3RlbnRcblx0XHQgKiB3aXRoIHRoZSBuYW1pbmcgb2YgbVJlbmRlci4gSWYgJ21EYXRhUHJvcCcgaXMgZ2l2ZW4sIHRoZW4gaXQgd2lsbCBzdGlsbFxuXHRcdCAqIGJlIHVzZWQgYnkgRGF0YVRhYmxlcywgYXMgaXQgYXV0b21hdGljYWxseSBtYXBzIHRoZSBvbGQgbmFtZSB0byB0aGUgbmV3XG5cdFx0ICogaWYgcmVxdWlyZWQuXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgc3RyaW5nfGludHxmdW5jdGlvbnxudWxsXG5cdFx0ICogIEBkZWZhdWx0IG51bGwgPGk+VXNlIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBjb2x1bW4gaW5kZXg8L2k+XG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5kYXRhXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBSZWFkIHRhYmxlIGRhdGEgZnJvbSBvYmplY3RzXG5cdFx0ICogICAgLy8gSlNPTiBzdHJ1Y3R1cmUgZm9yIGVhY2ggcm93OlxuXHRcdCAqICAgIC8vICAge1xuXHRcdCAqICAgIC8vICAgICAgXCJlbmdpbmVcIjoge3ZhbHVlfSxcblx0XHQgKiAgICAvLyAgICAgIFwiYnJvd3NlclwiOiB7dmFsdWV9LFxuXHRcdCAqICAgIC8vICAgICAgXCJwbGF0Zm9ybVwiOiB7dmFsdWV9LFxuXHRcdCAqICAgIC8vICAgICAgXCJ2ZXJzaW9uXCI6IHt2YWx1ZX0sXG5cdFx0ICogICAgLy8gICAgICBcImdyYWRlXCI6IHt2YWx1ZX1cblx0XHQgKiAgICAvLyAgIH1cblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImFqYXhTb3VyY2VcIjogXCJzb3VyY2VzL29iamVjdHMudHh0XCIsXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJlbmdpbmVcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJkYXRhXCI6IFwiYnJvd3NlclwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJwbGF0Zm9ybVwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJ2ZXJzaW9uXCIgfSxcblx0XHQgKiAgICAgICAgICB7IFwiZGF0YVwiOiBcImdyYWRlXCIgfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gUmVhZCBpbmZvcm1hdGlvbiBmcm9tIGRlZXBseSBuZXN0ZWQgb2JqZWN0c1xuXHRcdCAqICAgIC8vIEpTT04gc3RydWN0dXJlIGZvciBlYWNoIHJvdzpcblx0XHQgKiAgICAvLyAgIHtcblx0XHQgKiAgICAvLyAgICAgIFwiZW5naW5lXCI6IHt2YWx1ZX0sXG5cdFx0ICogICAgLy8gICAgICBcImJyb3dzZXJcIjoge3ZhbHVlfSxcblx0XHQgKiAgICAvLyAgICAgIFwicGxhdGZvcm1cIjoge1xuXHRcdCAqICAgIC8vICAgICAgICAgXCJpbm5lclwiOiB7dmFsdWV9XG5cdFx0ICogICAgLy8gICAgICB9LFxuXHRcdCAqICAgIC8vICAgICAgXCJkZXRhaWxzXCI6IFtcblx0XHQgKiAgICAvLyAgICAgICAgIHt2YWx1ZX0sIHt2YWx1ZX1cblx0XHQgKiAgICAvLyAgICAgIF1cblx0XHQgKiAgICAvLyAgIH1cblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImFqYXhTb3VyY2VcIjogXCJzb3VyY2VzL2RlZXAudHh0XCIsXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJlbmdpbmVcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJkYXRhXCI6IFwiYnJvd3NlclwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJwbGF0Zm9ybS5pbm5lclwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJwbGF0Zm9ybS5kZXRhaWxzLjBcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJkYXRhXCI6IFwicGxhdGZvcm0uZGV0YWlscy4xXCIgfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGRhdGFgIGFzIGEgZnVuY3Rpb24gdG8gcHJvdmlkZSBkaWZmZXJlbnQgaW5mb3JtYXRpb24gZm9yXG5cdFx0ICogICAgLy8gc29ydGluZywgZmlsdGVyaW5nIGFuZCBkaXNwbGF5LiBJbiB0aGlzIGNhc2UsIGN1cnJlbmN5IChwcmljZSlcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxuXHRcdCAqICAgICAgICAgIFwiZGF0YVwiOiBmdW5jdGlvbiAoIHNvdXJjZSwgdHlwZSwgdmFsICkge1xuXHRcdCAqICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdzZXQnKSB7XG5cdFx0ICogICAgICAgICAgICAgIHNvdXJjZS5wcmljZSA9IHZhbDtcblx0XHQgKiAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGNvbXB1dGVkIGRpc2xheSBhbmQgZmlsdGVyIHZhbHVlcyBmb3IgZWZmaWNpZW5jeVxuXHRcdCAqICAgICAgICAgICAgICBzb3VyY2UucHJpY2VfZGlzcGxheSA9IHZhbD09XCJcIiA/IFwiXCIgOiBcIiRcIitudW1iZXJGb3JtYXQodmFsKTtcblx0XHQgKiAgICAgICAgICAgICAgc291cmNlLnByaWNlX2ZpbHRlciAgPSB2YWw9PVwiXCIgPyBcIlwiIDogXCIkXCIrbnVtYmVyRm9ybWF0KHZhbCkrXCIgXCIrdmFsO1xuXHRcdCAqICAgICAgICAgICAgICByZXR1cm47XG5cdFx0ICogICAgICAgICAgICB9XG5cdFx0ICogICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnZGlzcGxheScpIHtcblx0XHQgKiAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5wcmljZV9kaXNwbGF5O1xuXHRcdCAqICAgICAgICAgICAgfVxuXHRcdCAqICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ2ZpbHRlcicpIHtcblx0XHQgKiAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5wcmljZV9maWx0ZXI7XG5cdFx0ICogICAgICAgICAgICB9XG5cdFx0ICogICAgICAgICAgICAvLyAnc29ydCcsICd0eXBlJyBhbmQgdW5kZWZpbmVkIGFsbCBqdXN0IHVzZSB0aGUgaW50ZWdlclxuXHRcdCAqICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5wcmljZTtcblx0XHQgKiAgICAgICAgICB9XG5cdFx0ICogICAgICAgIH0gXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGRlZmF1bHQgY29udGVudFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbIHtcblx0XHQgKiAgICAgICAgICBcInRhcmdldHNcIjogWyAwIF0sXG5cdFx0ICogICAgICAgICAgXCJkYXRhXCI6IG51bGwsXG5cdFx0ICogICAgICAgICAgXCJkZWZhdWx0Q29udGVudFwiOiBcIkNsaWNrIHRvIGVkaXRcIlxuXHRcdCAqICAgICAgICB9IF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBhcnJheSBub3RhdGlvbiAtIG91dHB1dHRpbmcgYSBsaXN0IGZyb20gYW4gYXJyYXlcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxuXHRcdCAqICAgICAgICAgIFwiZGF0YVwiOiBcIm5hbWVbLCBdXCJcblx0XHQgKiAgICAgICAgfSBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICovXG5cdFx0XCJtRGF0YVwiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhpcyBwcm9wZXJ0eSBpcyB0aGUgcmVuZGVyaW5nIHBhcnRuZXIgdG8gYGRhdGFgIGFuZCBpdCBpcyBzdWdnZXN0ZWQgdGhhdFxuXHRcdCAqIHdoZW4geW91IHdhbnQgdG8gbWFuaXB1bGF0ZSBkYXRhIGZvciBkaXNwbGF5IChpbmNsdWRpbmcgZmlsdGVyaW5nLFxuXHRcdCAqIHNvcnRpbmcgZXRjKSB3aXRob3V0IGFsdGVyaW5nIHRoZSB1bmRlcmx5aW5nIGRhdGEgZm9yIHRoZSB0YWJsZSwgdXNlIHRoaXNcblx0XHQgKiBwcm9wZXJ0eS4gYHJlbmRlcmAgY2FuIGJlIGNvbnNpZGVyZWQgdG8gYmUgdGhlIHRoZSByZWFkIG9ubHkgY29tcGFuaW9uIHRvXG5cdFx0ICogYGRhdGFgIHdoaWNoIGlzIHJlYWQgLyB3cml0ZSAodGhlbiBhcyBzdWNoIG1vcmUgY29tcGxleCkuIExpa2UgYGRhdGFgXG5cdFx0ICogdGhpcyBvcHRpb24gY2FuIGJlIGdpdmVuIGluIGEgbnVtYmVyIG9mIGRpZmZlcmVudCB3YXlzIHRvIGVmZmVjdCBpdHNcblx0XHQgKiBiZWhhdmlvdXI6XG5cdFx0ICpcblx0XHQgKiAqIGBpbnRlZ2VyYCAtIHRyZWF0ZWQgYXMgYW4gYXJyYXkgaW5kZXggZm9yIHRoZSBkYXRhIHNvdXJjZS4gVGhpcyBpcyB0aGVcblx0XHQgKiAgIGRlZmF1bHQgdGhhdCBEYXRhVGFibGVzIHVzZXMgKGluY3JlbWVudGFsbHkgaW5jcmVhc2VkIGZvciBlYWNoIGNvbHVtbikuXG5cdFx0ICogKiBgc3RyaW5nYCAtIHJlYWQgYW4gb2JqZWN0IHByb3BlcnR5IGZyb20gdGhlIGRhdGEgc291cmNlLiBUaGVyZSBhcmVcblx0XHQgKiAgIHRocmVlICdzcGVjaWFsJyBvcHRpb25zIHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIHN0cmluZyB0byBhbHRlciBob3dcblx0XHQgKiAgIERhdGFUYWJsZXMgcmVhZHMgdGhlIGRhdGEgZnJvbSB0aGUgc291cmNlIG9iamVjdDpcblx0XHQgKiAgICAqIGAuYCAtIERvdHRlZCBKYXZhc2NyaXB0IG5vdGF0aW9uLiBKdXN0IGFzIHlvdSB1c2UgYSBgLmAgaW5cblx0XHQgKiAgICAgIEphdmFzY3JpcHQgdG8gcmVhZCBmcm9tIG5lc3RlZCBvYmplY3RzLCBzbyB0byBjYW4gdGhlIG9wdGlvbnNcblx0XHQgKiAgICAgIHNwZWNpZmllZCBpbiBgZGF0YWAuIEZvciBleGFtcGxlOiBgYnJvd3Nlci52ZXJzaW9uYCBvclxuXHRcdCAqICAgICAgYGJyb3dzZXIubmFtZWAuIElmIHlvdXIgb2JqZWN0IHBhcmFtZXRlciBuYW1lIGNvbnRhaW5zIGEgcGVyaW9kLCB1c2Vcblx0XHQgKiAgICAgIGBcXFxcYCB0byBlc2NhcGUgaXQgLSBpLmUuIGBmaXJzdFxcXFwubmFtZWAuXG5cdFx0ICogICAgKiBgW11gIC0gQXJyYXkgbm90YXRpb24uIERhdGFUYWJsZXMgY2FuIGF1dG9tYXRpY2FsbHkgY29tYmluZSBkYXRhXG5cdFx0ICogICAgICBmcm9tIGFuZCBhcnJheSBzb3VyY2UsIGpvaW5pbmcgdGhlIGRhdGEgd2l0aCB0aGUgY2hhcmFjdGVycyBwcm92aWRlZFxuXHRcdCAqICAgICAgYmV0d2VlbiB0aGUgdHdvIGJyYWNrZXRzLiBGb3IgZXhhbXBsZTogYG5hbWVbLCBdYCB3b3VsZCBwcm92aWRlIGFcblx0XHQgKiAgICAgIGNvbW1hLXNwYWNlIHNlcGFyYXRlZCBsaXN0IGZyb20gdGhlIHNvdXJjZSBhcnJheS4gSWYgbm8gY2hhcmFjdGVyc1xuXHRcdCAqICAgICAgYXJlIHByb3ZpZGVkIGJldHdlZW4gdGhlIGJyYWNrZXRzLCB0aGUgb3JpZ2luYWwgYXJyYXkgc291cmNlIGlzXG5cdFx0ICogICAgICByZXR1cm5lZC5cblx0XHQgKiAgICAqIGAoKWAgLSBGdW5jdGlvbiBub3RhdGlvbi4gQWRkaW5nIGAoKWAgdG8gdGhlIGVuZCBvZiBhIHBhcmFtZXRlciB3aWxsXG5cdFx0ICogICAgICBleGVjdXRlIGEgZnVuY3Rpb24gb2YgdGhlIG5hbWUgZ2l2ZW4uIEZvciBleGFtcGxlOiBgYnJvd3NlcigpYCBmb3IgYVxuXHRcdCAqICAgICAgc2ltcGxlIGZ1bmN0aW9uIG9uIHRoZSBkYXRhIHNvdXJjZSwgYGJyb3dzZXIudmVyc2lvbigpYCBmb3IgYVxuXHRcdCAqICAgICAgZnVuY3Rpb24gaW4gYSBuZXN0ZWQgcHJvcGVydHkgb3IgZXZlbiBgYnJvd3NlcigpLnZlcnNpb25gIHRvIGdldCBhblxuXHRcdCAqICAgICAgb2JqZWN0IHByb3BlcnR5IGlmIHRoZSBmdW5jdGlvbiBjYWxsZWQgcmV0dXJucyBhbiBvYmplY3QuXG5cdFx0ICogKiBgb2JqZWN0YCAtIHVzZSBkaWZmZXJlbnQgZGF0YSBmb3IgdGhlIGRpZmZlcmVudCBkYXRhIHR5cGVzIHJlcXVlc3RlZCBieVxuXHRcdCAqICAgRGF0YVRhYmxlcyAoJ2ZpbHRlcicsICdkaXNwbGF5JywgJ3R5cGUnIG9yICdzb3J0JykuIFRoZSBwcm9wZXJ0eSBuYW1lc1xuXHRcdCAqICAgb2YgdGhlIG9iamVjdCBpcyB0aGUgZGF0YSB0eXBlIHRoZSBwcm9wZXJ0eSByZWZlcnMgdG8gYW5kIHRoZSB2YWx1ZSBjYW5cblx0XHQgKiAgIGRlZmluZWQgdXNpbmcgYW4gaW50ZWdlciwgc3RyaW5nIG9yIGZ1bmN0aW9uIHVzaW5nIHRoZSBzYW1lIHJ1bGVzIGFzXG5cdFx0ICogICBgcmVuZGVyYCBub3JtYWxseSBkb2VzLiBOb3RlIHRoYXQgYW4gYF9gIG9wdGlvbiBfbXVzdF8gYmUgc3BlY2lmaWVkLlxuXHRcdCAqICAgVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSB0byB1c2UgaWYgeW91IGhhdmVuJ3Qgc3BlY2lmaWVkIGEgdmFsdWUgZm9yXG5cdFx0ICogICB0aGUgZGF0YSB0eXBlIHJlcXVlc3RlZCBieSBEYXRhVGFibGVzLlxuXHRcdCAqICogYGZ1bmN0aW9uYCAtIHRoZSBmdW5jdGlvbiBnaXZlbiB3aWxsIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIERhdGFUYWJsZXNcblx0XHQgKiAgIG5lZWRzIHRvIHNldCBvciBnZXQgdGhlIGRhdGEgZm9yIGEgY2VsbCBpbiB0aGUgY29sdW1uLiBUaGUgZnVuY3Rpb25cblx0XHQgKiAgIHRha2VzIHRocmVlIHBhcmFtZXRlcnM6XG5cdFx0ICogICAgKiBQYXJhbWV0ZXJzOlxuXHRcdCAqICAgICAgKiB7YXJyYXl8b2JqZWN0fSBUaGUgZGF0YSBzb3VyY2UgZm9yIHRoZSByb3cgKGJhc2VkIG9uIGBkYXRhYClcblx0XHQgKiAgICAgICoge3N0cmluZ30gVGhlIHR5cGUgY2FsbCBkYXRhIHJlcXVlc3RlZCAtIHRoaXMgd2lsbCBiZSAnZmlsdGVyJyxcblx0XHQgKiAgICAgICAgJ2Rpc3BsYXknLCAndHlwZScgb3IgJ3NvcnQnLlxuXHRcdCAqICAgICAgKiB7YXJyYXl8b2JqZWN0fSBUaGUgZnVsbCBkYXRhIHNvdXJjZSBmb3IgdGhlIHJvdyAobm90IGJhc2VkIG9uXG5cdFx0ICogICAgICAgIGBkYXRhYClcblx0XHQgKiAgICAqIFJldHVybjpcblx0XHQgKiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBmdW5jdGlvbiBpcyB3aGF0IHdpbGwgYmUgdXNlZCBmb3IgdGhlXG5cdFx0ICogICAgICAgIGRhdGEgcmVxdWVzdGVkLlxuXHRcdCAqXG5cdFx0ICogIEB0eXBlIHN0cmluZ3xpbnR8ZnVuY3Rpb258b2JqZWN0fG51bGxcblx0XHQgKiAgQGRlZmF1bHQgbnVsbCBVc2UgdGhlIGRhdGEgc291cmNlIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4ucmVuZGVyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBDcmVhdGUgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBmcm9tIGFuIGFycmF5IG9mIG9iamVjdHNcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImFqYXhTb3VyY2VcIjogXCJzb3VyY2VzL2RlZXAudHh0XCIsXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJlbmdpbmVcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJkYXRhXCI6IFwiYnJvd3NlclwiIH0sXG5cdFx0ICogICAgICAgICAge1xuXHRcdCAqICAgICAgICAgICAgXCJkYXRhXCI6IFwicGxhdGZvcm1cIixcblx0XHQgKiAgICAgICAgICAgIFwicmVuZGVyXCI6IFwiWywgXS5uYW1lXCJcblx0XHQgKiAgICAgICAgICB9XG5cdFx0ICogICAgICAgIF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBFeGVjdXRlIGEgZnVuY3Rpb24gdG8gb2J0YWluIGRhdGFcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxuXHRcdCAqICAgICAgICAgIFwiZGF0YVwiOiBudWxsLCAvLyBVc2UgdGhlIGZ1bGwgZGF0YSBzb3VyY2Ugb2JqZWN0IGZvciB0aGUgcmVuZGVyZXIncyBzb3VyY2Vcblx0XHQgKiAgICAgICAgICBcInJlbmRlclwiOiBcImJyb3dzZXJOYW1lKClcIlxuXHRcdCAqICAgICAgICB9IF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBBcyBhbiBvYmplY3QsIGV4dHJhY3RpbmcgZGlmZmVyZW50IGRhdGEgZm9yIHRoZSBkaWZmZXJlbnQgdHlwZXNcblx0XHQgKiAgICAvLyBUaGlzIHdvdWxkIGJlIHVzZWQgd2l0aCBhIGRhdGEgc291cmNlIHN1Y2ggYXM6XG5cdFx0ICogICAgLy8gICB7IFwicGhvbmVcIjogNTU1MjM2OCwgXCJwaG9uZV9maWx0ZXJcIjogXCI1NTUyMzY4IDU1NS0yMzY4XCIsIFwicGhvbmVfZGlzcGxheVwiOiBcIjU1NS0yMzY4XCIgfVxuXHRcdCAqICAgIC8vIEhlcmUgdGhlIGBwaG9uZWAgaW50ZWdlciBpcyB1c2VkIGZvciBzb3J0aW5nIGFuZCB0eXBlIGRldGVjdGlvbiwgd2hpbGUgYHBob25lX2ZpbHRlcmBcblx0XHQgKiAgICAvLyAod2hpY2ggaGFzIGJvdGggZm9ybXMpIGlzIHVzZWQgZm9yIGZpbHRlcmluZyBmb3IgaWYgYSB1c2VyIGlucHV0cyBlaXRoZXIgZm9ybWF0LCB3aGlsZVxuXHRcdCAqICAgIC8vIHRoZSBmb3JtYXR0ZWQgcGhvbmUgbnVtYmVyIGlzIHRoZSBvbmUgdGhhdCBpcyBzaG93biBpbiB0aGUgdGFibGUuXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xuXHRcdCAqICAgICAgICAgIFwidGFyZ2V0c1wiOiBbIDAgXSxcblx0XHQgKiAgICAgICAgICBcImRhdGFcIjogbnVsbCwgLy8gVXNlIHRoZSBmdWxsIGRhdGEgc291cmNlIG9iamVjdCBmb3IgdGhlIHJlbmRlcmVyJ3Mgc291cmNlXG5cdFx0ICogICAgICAgICAgXCJyZW5kZXJcIjoge1xuXHRcdCAqICAgICAgICAgICAgXCJfXCI6IFwicGhvbmVcIixcblx0XHQgKiAgICAgICAgICAgIFwiZmlsdGVyXCI6IFwicGhvbmVfZmlsdGVyXCIsXG5cdFx0ICogICAgICAgICAgICBcImRpc3BsYXlcIjogXCJwaG9uZV9kaXNwbGF5XCJcblx0XHQgKiAgICAgICAgICB9XG5cdFx0ICogICAgICAgIH0gXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzZSBhcyBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGxpbmsgZnJvbSB0aGUgZGF0YSBzb3VyY2Vcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxuXHRcdCAqICAgICAgICAgIFwiZGF0YVwiOiBcImRvd25sb2FkX2xpbmtcIixcblx0XHQgKiAgICAgICAgICBcInJlbmRlclwiOiBmdW5jdGlvbiAoIGRhdGEsIHR5cGUsIGZ1bGwgKSB7XG5cdFx0ICogICAgICAgICAgICByZXR1cm4gJzxhIGhyZWY9XCInK2RhdGErJ1wiPkRvd25sb2FkPC9hPic7XG5cdFx0ICogICAgICAgICAgfVxuXHRcdCAqICAgICAgICB9IF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJtUmVuZGVyXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBDaGFuZ2UgdGhlIGNlbGwgdHlwZSBjcmVhdGVkIGZvciB0aGUgY29sdW1uIC0gZWl0aGVyIFREIGNlbGxzIG9yIFRIIGNlbGxzLiBUaGlzXG5cdFx0ICogY2FuIGJlIHVzZWZ1bCBhcyBUSCBjZWxscyBoYXZlIHNlbWFudGljIG1lYW5pbmcgaW4gdGhlIHRhYmxlIGJvZHksIGFsbG93aW5nIHRoZW1cblx0XHQgKiB0byBhY3QgYXMgYSBoZWFkZXIgZm9yIGEgcm93ICh5b3UgbWF5IHdpc2ggdG8gYWRkIHNjb3BlPSdyb3cnIHRvIHRoZSBUSCBlbGVtZW50cykuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCB0ZFxuXHRcdCAqXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4uY2VsbFR5cGVcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIE1ha2UgdGhlIGZpcnN0IGNvbHVtbiB1c2UgVEggY2VsbHNcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxuXHRcdCAqICAgICAgICAgIFwiY2VsbFR5cGVcIjogXCJ0aFwiXG5cdFx0ICogICAgICAgIH0gXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNDZWxsVHlwZVwiOiBcInRkXCIsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBDbGFzcyB0byBnaXZlIHRvIGVhY2ggY2VsbCBpbiB0aGlzIGNvbHVtbi5cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IDxpPkVtcHR5IHN0cmluZzwvaT5cblx0XHQgKlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLmNsYXNzXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJjbGFzc1wiOiBcIm15X2NsYXNzXCIsIFwidGFyZ2V0c1wiOiBbIDAgXSB9XG5cdFx0ICogICAgICAgIF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJjbGFzc1wiOiBcIm15X2NsYXNzXCIgfSxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsXG5cdFx0ICogICAgICAgIF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJzQ2xhc3NcIjogXCJcIixcblx0XG5cdFx0LyoqXG5cdFx0ICogV2hlbiBEYXRhVGFibGVzIGNhbGN1bGF0ZXMgdGhlIGNvbHVtbiB3aWR0aHMgdG8gYXNzaWduIHRvIGVhY2ggY29sdW1uLFxuXHRcdCAqIGl0IGZpbmRzIHRoZSBsb25nZXN0IHN0cmluZyBpbiBlYWNoIGNvbHVtbiBhbmQgdGhlbiBjb25zdHJ1Y3RzIGFcblx0XHQgKiB0ZW1wb3JhcnkgdGFibGUgYW5kIHJlYWRzIHRoZSB3aWR0aHMgZnJvbSB0aGF0LiBUaGUgcHJvYmxlbSB3aXRoIHRoaXNcblx0XHQgKiBpcyB0aGF0IFwibW1tXCIgaXMgbXVjaCB3aWRlciB0aGVuIFwiaWlpaVwiLCBidXQgdGhlIGxhdHRlciBpcyBhIGxvbmdlclxuXHRcdCAqIHN0cmluZyAtIHRodXMgdGhlIGNhbGN1bGF0aW9uIGNhbiBnbyB3cm9uZyAoZG9pbmcgaXQgcHJvcGVybHkgYW5kIHB1dHRpbmdcblx0XHQgKiBpdCBpbnRvIGFuIERPTSBvYmplY3QgYW5kIG1lYXN1cmluZyB0aGF0IGlzIGhvcnJpYmx5KCEpIHNsb3cpLiBUaHVzIGFzXG5cdFx0ICogYSBcIndvcmsgYXJvdW5kXCIgd2UgcHJvdmlkZSB0aGlzIG9wdGlvbi4gSXQgd2lsbCBhcHBlbmQgaXRzIHZhbHVlIHRvIHRoZVxuXHRcdCAqIHRleHQgdGhhdCBpcyBmb3VuZCB0byBiZSB0aGUgbG9uZ2VzdCBzdHJpbmcgZm9yIHRoZSBjb2x1bW4gLSBpLmUuIHBhZGRpbmcuXG5cdFx0ICogR2VuZXJhbGx5IHlvdSBzaG91bGRuJ3QgbmVlZCB0aGlzIVxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgPGk+RW1wdHkgc3RyaW5nPGk+XG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5jb250ZW50UGFkZGluZ1xuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICB7XG5cdFx0ICogICAgICAgICAgICBcImNvbnRlbnRQYWRkaW5nXCI6IFwibW1tXCJcblx0XHQgKiAgICAgICAgICB9XG5cdFx0ICogICAgICAgIF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICovXG5cdFx0XCJzQ29udGVudFBhZGRpbmdcIjogXCJcIixcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEFsbG93cyBhIGRlZmF1bHQgdmFsdWUgdG8gYmUgZ2l2ZW4gZm9yIGEgY29sdW1uJ3MgZGF0YSwgYW5kIHdpbGwgYmUgdXNlZFxuXHRcdCAqIHdoZW5ldmVyIGEgbnVsbCBkYXRhIHNvdXJjZSBpcyBlbmNvdW50ZXJlZCAodGhpcyBjYW4gYmUgYmVjYXVzZSBgZGF0YWBcblx0XHQgKiBpcyBzZXQgdG8gbnVsbCwgb3IgYmVjYXVzZSB0aGUgZGF0YSBzb3VyY2UgaXRzZWxmIGlzIG51bGwpLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4uZGVmYXVsdENvbnRlbnRcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXG5cdFx0ICogICAgICAgICAge1xuXHRcdCAqICAgICAgICAgICAgXCJkYXRhXCI6IG51bGwsXG5cdFx0ICogICAgICAgICAgICBcImRlZmF1bHRDb250ZW50XCI6IFwiRWRpdFwiLFxuXHRcdCAqICAgICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgLTEgXVxuXHRcdCAqICAgICAgICAgIH1cblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAge1xuXHRcdCAqICAgICAgICAgICAgXCJkYXRhXCI6IG51bGwsXG5cdFx0ICogICAgICAgICAgICBcImRlZmF1bHRDb250ZW50XCI6IFwiRWRpdFwiXG5cdFx0ICogICAgICAgICAgfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdFwic0RlZmF1bHRDb250ZW50XCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGlzIHBhcmFtZXRlciBpcyBvbmx5IHVzZWQgaW4gRGF0YVRhYmxlcycgc2VydmVyLXNpZGUgcHJvY2Vzc2luZy4gSXQgY2FuXG5cdFx0ICogYmUgZXhjZXB0aW9uYWxseSB1c2VmdWwgdG8ga25vdyB3aGF0IGNvbHVtbnMgYXJlIGJlaW5nIGRpc3BsYXllZCBvbiB0aGVcblx0XHQgKiBjbGllbnQgc2lkZSwgYW5kIHRvIG1hcCB0aGVzZSB0byBkYXRhYmFzZSBmaWVsZHMuIFdoZW4gZGVmaW5lZCwgdGhlIG5hbWVzXG5cdFx0ICogYWxzbyBhbGxvdyBEYXRhVGFibGVzIHRvIHJlb3JkZXIgaW5mb3JtYXRpb24gZnJvbSB0aGUgc2VydmVyIGlmIGl0IGNvbWVzXG5cdFx0ICogYmFjayBpbiBhbiB1bmV4cGVjdGVkIG9yZGVyIChpLmUuIGlmIHlvdSBzd2l0Y2ggeW91ciBjb2x1bW5zIGFyb3VuZCBvbiB0aGVcblx0XHQgKiBjbGllbnQtc2lkZSwgeW91ciBzZXJ2ZXItc2lkZSBjb2RlIGRvZXMgbm90IGFsc28gbmVlZCB1cGRhdGluZykuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCA8aT5FbXB0eSBzdHJpbmc8L2k+XG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5uYW1lXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwiZW5naW5lXCIsIFwidGFyZ2V0c1wiOiBbIDAgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwiYnJvd3NlclwiLCBcInRhcmdldHNcIjogWyAxIF0gfSxcblx0XHQgKiAgICAgICAgICB7IFwibmFtZVwiOiBcInBsYXRmb3JtXCIsIFwidGFyZ2V0c1wiOiBbIDIgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwidmVyc2lvblwiLCBcInRhcmdldHNcIjogWyAzIF0gfSxcblx0XHQgKiAgICAgICAgICB7IFwibmFtZVwiOiBcImdyYWRlXCIsIFwidGFyZ2V0c1wiOiBbIDQgXSB9XG5cdFx0ICogICAgICAgIF1cblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9ICk7XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwiZW5naW5lXCIgfSxcblx0XHQgKiAgICAgICAgICB7IFwibmFtZVwiOiBcImJyb3dzZXJcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwicGxhdGZvcm1cIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwidmVyc2lvblwiIH0sXG5cdFx0ICogICAgICAgICAgeyBcIm5hbWVcIjogXCJncmFkZVwiIH1cblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNOYW1lXCI6IFwiXCIsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIGEgZGF0YSBzb3VyY2UgdHlwZSBmb3IgdGhlIG9yZGVyaW5nIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlYWRcblx0XHQgKiByZWFsLXRpbWUgaW5mb3JtYXRpb24gZnJvbSB0aGUgdGFibGUgKHVwZGF0aW5nIHRoZSBpbnRlcm5hbGx5IGNhY2hlZFxuXHRcdCAqIHZlcnNpb24pIHByaW9yIHRvIG9yZGVyaW5nLiBUaGlzIGFsbG93cyBvcmRlcmluZyB0byBvY2N1ciBvbiB1c2VyXG5cdFx0ICogZWRpdGFibGUgZWxlbWVudHMgc3VjaCBhcyBmb3JtIGlucHV0cy5cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IHN0ZFxuXHRcdCAqXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4ub3JkZXJEYXRhVHlwZVxuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbkRlZnNgXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFtcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhVHlwZVwiOiBcImRvbS10ZXh0XCIsIFwidGFyZ2V0c1wiOiBbIDIsIDMgXSB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJ0eXBlXCI6IFwibnVtZXJpY1wiLCBcInRhcmdldHNcIjogWyAzIF0gfSxcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhVHlwZVwiOiBcImRvbS1zZWxlY3RcIiwgXCJ0YXJnZXRzXCI6IFsgNCBdIH0sXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVR5cGVcIjogXCJkb20tY2hlY2tib3hcIiwgXCJ0YXJnZXRzXCI6IFsgNSBdIH1cblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlckRhdGFUeXBlXCI6IFwiZG9tLXRleHRcIiB9LFxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlckRhdGFUeXBlXCI6IFwiZG9tLXRleHRcIiwgXCJ0eXBlXCI6IFwibnVtZXJpY1wiIH0sXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVR5cGVcIjogXCJkb20tc2VsZWN0XCIgfSxcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhVHlwZVwiOiBcImRvbS1jaGVja2JveFwiIH1cblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNTb3J0RGF0YVR5cGVcIjogXCJzdGRcIixcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0aXRsZSBvZiB0aGlzIGNvbHVtbi5cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IG51bGwgPGk+RGVyaXZlZCBmcm9tIHRoZSAnVEgnIHZhbHVlIGZvciB0aGlzIGNvbHVtbiBpbiB0aGVcblx0XHQgKiAgICBvcmlnaW5hbCBIVE1MIHRhYmxlLjwvaT5cblx0XHQgKlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLnRpdGxlXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIk15IGNvbHVtbiB0aXRsZVwiLCBcInRhcmdldHNcIjogWyAwIF0gfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcblx0XHQgKiAgICAgICAgICB7IFwidGl0bGVcIjogXCJNeSBjb2x1bW4gdGl0bGVcIiB9LFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGxcblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNUaXRsZVwiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGhvdyB0aGUgZGF0YSBmb3IgdGhpcyBjb2x1bW4gd2lsbCBiZVxuXHRcdCAqIG9yZGVyZWQuIEZvdXIgdHlwZXMgKHN0cmluZywgbnVtZXJpYywgZGF0ZSBhbmQgaHRtbCAod2hpY2ggd2lsbCBzdHJpcFxuXHRcdCAqIEhUTUwgdGFncyBiZWZvcmUgb3JkZXJpbmcpKSBhcmUgY3VycmVudGx5IGF2YWlsYWJsZS4gTm90ZSB0aGF0IG9ubHkgZGF0ZVxuXHRcdCAqIGZvcm1hdHMgdW5kZXJzdG9vZCBieSBKYXZhc2NyaXB0J3MgRGF0ZSgpIG9iamVjdCB3aWxsIGJlIGFjY2VwdGVkIGFzIHR5cGVcblx0XHQgKiBkYXRlLiBGb3IgZXhhbXBsZTogXCJNYXIgMjYsIDIwMDggNTowMyBQTVwiLiBNYXkgdGFrZSB0aGUgdmFsdWVzOiAnc3RyaW5nJyxcblx0XHQgKiAnbnVtZXJpYycsICdkYXRlJyBvciAnaHRtbCcgKGJ5IGRlZmF1bHQpLiBGdXJ0aGVyIHR5cGVzIGNhbiBiZSBhZGRpbmdcblx0XHQgKiB0aHJvdWdoIHBsdWctaW5zLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbCA8aT5BdXRvLWRldGVjdGVkIGZyb20gcmF3IGRhdGE8L2k+XG5cdFx0ICpcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi50eXBlXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJ0eXBlXCI6IFwiaHRtbFwiLCBcInRhcmdldHNcIjogWyAwIF0gfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcblx0XHQgKiAgICAgICAgICB7IFwidHlwZVwiOiBcImh0bWxcIiB9LFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGxcblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNUeXBlXCI6IG51bGwsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBEZWZpbmluZyB0aGUgd2lkdGggb2YgdGhlIGNvbHVtbiwgdGhpcyBwYXJhbWV0ZXIgbWF5IHRha2UgYW55IENTUyB2YWx1ZVxuXHRcdCAqICgzZW0sIDIwcHggZXRjKS4gRGF0YVRhYmxlcyBhcHBsaWVzICdzbWFydCcgd2lkdGhzIHRvIGNvbHVtbnMgd2hpY2ggaGF2ZSBub3Rcblx0XHQgKiBiZWVuIGdpdmVuIGEgc3BlY2lmaWMgd2lkdGggdGhyb3VnaCB0aGlzIGludGVyZmFjZSBlbnN1cmluZyB0aGF0IHRoZSB0YWJsZVxuXHRcdCAqIHJlbWFpbnMgcmVhZGFibGUuXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsIDxpPkF1dG9tYXRpYzwvaT5cblx0XHQgKlxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLndpZHRoXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2Bcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xuXHRcdCAqICAgICAgICAgIHsgXCJ3aWR0aFwiOiBcIjIwJVwiLCBcInRhcmdldHNcIjogWyAwIF0gfVxuXHRcdCAqICAgICAgICBdXG5cdFx0ICogICAgICB9ICk7XG5cdFx0ICogICAgfSApO1xuXHRcdCAqXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcblx0XHQgKiAgICAgICAgICB7IFwid2lkdGhcIjogXCIyMCVcIiB9LFxuXHRcdCAqICAgICAgICAgIG51bGwsXG5cdFx0ICogICAgICAgICAgbnVsbCxcblx0XHQgKiAgICAgICAgICBudWxsLFxuXHRcdCAqICAgICAgICAgIG51bGxcblx0XHQgKiAgICAgICAgXVxuXHRcdCAqICAgICAgfSApO1xuXHRcdCAqICAgIH0gKTtcblx0XHQgKi9cblx0XHRcInNXaWR0aFwiOiBudWxsXG5cdH07XG5cdFxuXHRfZm5IdW5nYXJpYW5NYXAoIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4gKTtcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IC0gdGhpcyBob2xkcyBhbGwgdGhlIGluZm9ybWF0aW9uIG5lZWRlZCBmb3IgYVxuXHQgKiBnaXZlbiB0YWJsZSwgaW5jbHVkaW5nIGNvbmZpZ3VyYXRpb24sIGRhdGEgYW5kIGN1cnJlbnQgYXBwbGljYXRpb24gb2YgdGhlXG5cdCAqIHRhYmxlIG9wdGlvbnMuIERhdGFUYWJsZXMgZG9lcyBub3QgaGF2ZSBhIHNpbmdsZSBpbnN0YW5jZSBmb3IgZWFjaCBEYXRhVGFibGVcblx0ICogd2l0aCB0aGUgc2V0dGluZ3MgYXR0YWNoZWQgdG8gdGhhdCBpbnN0YW5jZSwgYnV0IHJhdGhlciBpbnN0YW5jZXMgb2YgdGhlXG5cdCAqIERhdGFUYWJsZSBcImNsYXNzXCIgYXJlIGNyZWF0ZWQgb24tdGhlLWZseSBhcyBuZWVkZWQgKHR5cGljYWxseSBieSBhXG5cdCAqICQoKS5kYXRhVGFibGUoKSBjYWxsKSBhbmQgdGhlIHNldHRpbmdzIG9iamVjdCBpcyB0aGVuIGFwcGxpZWQgdG8gdGhhdFxuXHQgKiBpbnN0YW5jZS5cblx0ICpcblx0ICogTm90ZSB0aGF0IHRoaXMgb2JqZWN0IGlzIHJlbGF0ZWQgdG8ge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30gYnV0IHRoaXNcblx0ICogb25lIGlzIHRoZSBpbnRlcm5hbCBkYXRhIHN0b3JlIGZvciBEYXRhVGFibGVzJ3MgY2FjaGUgb2YgY29sdW1ucy4gSXQgc2hvdWxkXG5cdCAqIE5PVCBiZSBtYW5pcHVsYXRlZCBvdXRzaWRlIG9mIERhdGFUYWJsZXMuIEFueSBjb25maWd1cmF0aW9uIHNob3VsZCBiZSBkb25lXG5cdCAqIHRocm91Z2ggdGhlIGluaXRpYWxpc2F0aW9uIG9wdGlvbnMuXG5cdCAqICBAbmFtZXNwYWNlXG5cdCAqICBAdG9kbyBSZWFsbHkgc2hvdWxkIGF0dGFjaCB0aGUgc2V0dGluZ3Mgb2JqZWN0IHRvIGluZGl2aWR1YWwgaW5zdGFuY2VzIHNvIHdlXG5cdCAqICAgIGRvbid0IG5lZWQgdG8gY3JlYXRlIG5ldyBpbnN0YW5jZXMgb24gZWFjaCAkKCkuZGF0YVRhYmxlKCkgY2FsbCAoaWYgdGhlXG5cdCAqICAgIHRhYmxlIGFscmVhZHkgZXhpc3RzKS4gSXQgd291bGQgYWxzbyBzYXZlIHBhc3Npbmcgb1NldHRpbmdzIGFyb3VuZCBhbmRcblx0ICogICAgaW50byBldmVyeSBzaW5nbGUgZnVuY3Rpb24uIEhvd2V2ZXIsIHRoaXMgaXMgYSB2ZXJ5IHNpZ25pZmljYW50XG5cdCAqICAgIGFyY2hpdGVjdHVyZSBjaGFuZ2UgZm9yIERhdGFUYWJsZXMgYW5kIHdpbGwgYWxtb3N0IGNlcnRhaW5seSBicmVha1xuXHQgKiAgICBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGluc3RhbGxhdGlvbnMuIFRoaXMgaXMgc29tZXRoaW5nIHRoYXRcblx0ICogICAgd2lsbCBiZSBkb25lIGluIDIuMC5cblx0ICovXG5cdERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzID0ge1xuXHRcdC8qKlxuXHRcdCAqIFByaW1hcnkgZmVhdHVyZXMgb2YgRGF0YVRhYmxlcyBhbmQgdGhlaXIgZW5hYmxlbWVudCBzdGF0ZS5cblx0XHQgKiAgQG5hbWVzcGFjZVxuXHRcdCAqL1xuXHRcdFwib0ZlYXR1cmVzXCI6IHtcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIEZsYWcgdG8gc2F5IGlmIERhdGFUYWJsZXMgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJ5IHRvIGNhbGN1bGF0ZSB0aGVcblx0XHRcdCAqIG9wdGltdW0gdGFibGUgYW5kIGNvbHVtbnMgd2lkdGhzICh0cnVlKSBvciBub3QgKGZhbHNlKS5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiQXV0b1dpZHRoXCI6IG51bGwsXG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBEZWxheSB0aGUgY3JlYXRpb24gb2YgVFIgYW5kIFREIGVsZW1lbnRzIHVudGlsIHRoZXkgYXJlIGFjdHVhbGx5XG5cdFx0XHQgKiBuZWVkZWQgYnkgYSBkcml2ZW4gcGFnZSBkcmF3LiBUaGlzIGNhbiBnaXZlIGEgc2lnbmlmaWNhbnQgc3BlZWRcblx0XHRcdCAqIGluY3JlYXNlIGZvciBBamF4IHNvdXJjZSBhbmQgSmF2YXNjcmlwdCBzb3VyY2UgZGF0YSwgYnV0IG1ha2VzIG5vXG5cdFx0XHQgKiBkaWZmZXJlbmNlIGF0IGFsbCBmcm8gRE9NIGFuZCBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIHRhYmxlcy5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiRGVmZXJSZW5kZXJcIjogbnVsbCxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIEVuYWJsZSBmaWx0ZXJpbmcgb24gdGhlIHRhYmxlIG9yIG5vdC4gTm90ZSB0aGF0IGlmIHRoaXMgaXMgZGlzYWJsZWRcblx0XHRcdCAqIHRoZW4gdGhlcmUgaXMgbm8gZmlsdGVyaW5nIGF0IGFsbCBvbiB0aGUgdGFibGUsIGluY2x1ZGluZyBmbkZpbHRlci5cblx0XHRcdCAqIFRvIGp1c3QgcmVtb3ZlIHRoZSBmaWx0ZXJpbmcgaW5wdXQgdXNlIHNEb20gYW5kIHJlbW92ZSB0aGUgJ2YnIG9wdGlvbi5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiRmlsdGVyXCI6IG51bGwsXG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBUYWJsZSBpbmZvcm1hdGlvbiBlbGVtZW50ICh0aGUgJ1Nob3dpbmcgeCBvZiB5IHJlY29yZHMnIGRpdikgZW5hYmxlXG5cdFx0XHQgKiBmbGFnLlxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdFx0ICovXG5cdFx0XHRcImJJbmZvXCI6IG51bGwsXG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBQcmVzZW50IGEgdXNlciBjb250cm9sIGFsbG93aW5nIHRoZSBlbmQgdXNlciB0byBjaGFuZ2UgdGhlIHBhZ2Ugc2l6ZVxuXHRcdFx0ICogd2hlbiBwYWdpbmF0aW9uIGlzIGVuYWJsZWQuXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0XHQgKi9cblx0XHRcdFwiYkxlbmd0aENoYW5nZVwiOiBudWxsLFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogUGFnaW5hdGlvbiBlbmFibGVkIG9yIG5vdC4gTm90ZSB0aGF0IGlmIHRoaXMgaXMgZGlzYWJsZWQgdGhlbiBsZW5ndGhcblx0XHRcdCAqIGNoYW5naW5nIG11c3QgYWxzbyBiZSBkaXNhYmxlZC5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiUGFnaW5hdGVcIjogbnVsbCxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFByb2Nlc3NpbmcgaW5kaWNhdG9yIGVuYWJsZSBmbGFnIHdoZW5ldmVyIERhdGFUYWJsZXMgaXMgZW5hY3RpbmcgYVxuXHRcdFx0ICogdXNlciByZXF1ZXN0IC0gdHlwaWNhbGx5IGFuIEFqYXggcmVxdWVzdCBmb3Igc2VydmVyLXNpZGUgcHJvY2Vzc2luZy5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiUHJvY2Vzc2luZ1wiOiBudWxsLFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogU2VydmVyLXNpZGUgcHJvY2Vzc2luZyBlbmFibGVkIGZsYWcgLSB3aGVuIGVuYWJsZWQgRGF0YVRhYmxlcyB3aWxsXG5cdFx0XHQgKiBnZXQgYWxsIGRhdGEgZnJvbSB0aGUgc2VydmVyIGZvciBldmVyeSBkcmF3IC0gdGhlcmUgaXMgbm8gZmlsdGVyaW5nLFxuXHRcdFx0ICogc29ydGluZyBvciBwYWdpbmcgZG9uZSBvbiB0aGUgY2xpZW50LXNpZGUuXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0XHQgKi9cblx0XHRcdFwiYlNlcnZlclNpZGVcIjogbnVsbCxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFNvcnRpbmcgZW5hYmxlbWVudCBmbGFnLlxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdFx0ICovXG5cdFx0XHRcImJTb3J0XCI6IG51bGwsXG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBNdWx0aS1jb2x1bW4gc29ydGluZ1xuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdFx0ICovXG5cdFx0XHRcImJTb3J0TXVsdGlcIjogbnVsbCxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIEFwcGx5IGEgY2xhc3MgdG8gdGhlIGNvbHVtbnMgd2hpY2ggYXJlIGJlaW5nIHNvcnRlZCB0byBwcm92aWRlIGFcblx0XHRcdCAqIHZpc3VhbCBoaWdobGlnaHQgb3Igbm90LiBUaGlzIGNhbiBzbG93IHRoaW5ncyBkb3duIHdoZW4gZW5hYmxlZCBzaW5jZVxuXHRcdFx0ICogdGhlcmUgaXMgYSBsb3Qgb2YgRE9NIGludGVyYWN0aW9uLlxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdFx0ICovXG5cdFx0XHRcImJTb3J0Q2xhc3Nlc1wiOiBudWxsLFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogU3RhdGUgc2F2aW5nIGVuYWJsZW1lbnQgZmxhZy5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiU3RhdGVTYXZlXCI6IG51bGxcblx0XHR9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogU2Nyb2xsaW5nIHNldHRpbmdzIGZvciBhIHRhYmxlLlxuXHRcdCAqICBAbmFtZXNwYWNlXG5cdFx0ICovXG5cdFx0XCJvU2Nyb2xsXCI6IHtcblx0XHRcdC8qKlxuXHRcdFx0ICogV2hlbiB0aGUgdGFibGUgaXMgc2hvcnRlciBpbiBoZWlnaHQgdGhhbiBzU2Nyb2xsWSwgY29sbGFwc2UgdGhlXG5cdFx0XHQgKiB0YWJsZSBjb250YWluZXIgZG93biB0byB0aGUgaGVpZ2h0IG9mIHRoZSB0YWJsZSAod2hlbiB0cnVlKS5cblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqL1xuXHRcdFx0XCJiQ29sbGFwc2VcIjogbnVsbCxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFdpZHRoIG9mIHRoZSBzY3JvbGxiYXIgZm9yIHRoZSB3ZWItYnJvd3NlcidzIHBsYXRmb3JtLiBDYWxjdWxhdGVkXG5cdFx0XHQgKiBkdXJpbmcgdGFibGUgaW5pdGlhbGlzYXRpb24uXG5cdFx0XHQgKiAgQHR5cGUgaW50XG5cdFx0XHQgKiAgQGRlZmF1bHQgMFxuXHRcdFx0ICovXG5cdFx0XHRcImlCYXJXaWR0aFwiOiAwLFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogVmlld3BvcnQgd2lkdGggZm9yIGhvcml6b250YWwgc2Nyb2xsaW5nLiBIb3Jpem9udGFsIHNjcm9sbGluZyBpc1xuXHRcdFx0ICogZGlzYWJsZWQgaWYgYW4gZW1wdHkgc3RyaW5nLlxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKi9cblx0XHRcdFwic1hcIjogbnVsbCxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFdpZHRoIHRvIGV4cGFuZCB0aGUgdGFibGUgdG8gd2hlbiB1c2luZyB4LXNjcm9sbGluZy4gVHlwaWNhbGx5IHlvdVxuXHRcdFx0ICogc2hvdWxkIG5vdCBuZWVkIHRvIHVzZSB0aGlzLlxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0XHQgKiAgQGRlcHJlY2F0ZWRcblx0XHRcdCAqL1xuXHRcdFx0XCJzWElubmVyXCI6IG51bGwsXG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBWaWV3cG9ydCBoZWlnaHQgZm9yIHZlcnRpY2FsIHNjcm9sbGluZy4gVmVydGljYWwgc2Nyb2xsaW5nIGlzIGRpc2FibGVkXG5cdFx0XHQgKiBpZiBhbiBlbXB0eSBzdHJpbmcuXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHRcdCAqL1xuXHRcdFx0XCJzWVwiOiBudWxsXG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogTGFuZ3VhZ2UgaW5mb3JtYXRpb24gZm9yIHRoZSB0YWJsZS5cblx0XHQgKiAgQG5hbWVzcGFjZVxuXHRcdCAqICBAZXh0ZW5kcyBEYXRhVGFibGUuZGVmYXVsdHMub0xhbmd1YWdlXG5cdFx0ICovXG5cdFx0XCJvTGFuZ3VhZ2VcIjoge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBJbmZvcm1hdGlvbiBjYWxsYmFjayBmdW5jdGlvbi4gU2VlXG5cdFx0XHQgKiB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzLmZuSW5mb0NhbGxiYWNrfVxuXHRcdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdFx0ICovXG5cdFx0XHRcImZuSW5mb0NhbGxiYWNrXCI6IG51bGxcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBCcm93c2VyIHN1cHBvcnQgcGFyYW1ldGVyc1xuXHRcdCAqICBAbmFtZXNwYWNlXG5cdFx0ICovXG5cdFx0XCJvQnJvd3NlclwiOiB7XG5cdFx0XHQvKipcblx0XHRcdCAqIEluZGljYXRlIGlmIHRoZSBicm93c2VyIGluY29ycmVjdGx5IGNhbGN1bGF0ZXMgd2lkdGg6MTAwJSBpbnNpZGUgYVxuXHRcdFx0ICogc2Nyb2xsaW5nIGVsZW1lbnQgKElFNi83KVxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdFx0ICovXG5cdFx0XHRcImJTY3JvbGxPdmVyc2l6ZVwiOiBmYWxzZSxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIERldGVybWluZSBpZiB0aGUgdmVydGljYWwgc2Nyb2xsYmFyIGlzIG9uIHRoZSByaWdodCBvciBsZWZ0IG9mIHRoZVxuXHRcdFx0ICogc2Nyb2xsaW5nIGNvbnRhaW5lciAtIG5lZWRlZCBmb3IgcnRsIGxhbmd1YWdlIGxheW91dCwgYWx0aG91Z2ggbm90XG5cdFx0XHQgKiBhbGwgYnJvd3NlcnMgbW92ZSB0aGUgc2Nyb2xsYmFyIChTYWZhcmkpLlxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdFx0ICovXG5cdFx0XHRcImJTY3JvbGxiYXJMZWZ0XCI6IGZhbHNlLFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogRmxhZyBmb3IgaWYgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgaXMgZnVsbHkgc3VwcG9ydGVkIG9yIG5vdFxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdFx0ICovXG5cdFx0XHRcImJCb3VuZGluZ1wiOiBmYWxzZSxcblx0XG5cdFx0XHQvKipcblx0XHRcdCAqIEJyb3dzZXIgc2Nyb2xsYmFyIHdpZHRoXG5cdFx0XHQgKiAgQHR5cGUgaW50ZWdlclxuXHRcdFx0ICogIEBkZWZhdWx0IDBcblx0XHRcdCAqL1xuXHRcdFx0XCJiYXJXaWR0aFwiOiAwXG5cdFx0fSxcblx0XG5cdFxuXHRcdFwiYWpheFwiOiBudWxsLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgcmVmZXJlbmNpbmcgdGhlIG5vZGVzIHdoaWNoIGFyZSB1c2VkIGZvciB0aGUgZmVhdHVyZXMuIFRoZVxuXHRcdCAqIHBhcmFtZXRlcnMgb2YgdGhpcyBvYmplY3QgbWF0Y2ggd2hhdCBpcyBhbGxvd2VkIGJ5IHNEb20gLSBpLmUuXG5cdFx0ICogICA8dWw+XG5cdFx0ICogICAgIDxsaT4nbCcgLSBMZW5ndGggY2hhbmdpbmc8L2xpPlxuXHRcdCAqICAgICA8bGk+J2YnIC0gRmlsdGVyaW5nIGlucHV0PC9saT5cblx0XHQgKiAgICAgPGxpPid0JyAtIFRoZSB0YWJsZSE8L2xpPlxuXHRcdCAqICAgICA8bGk+J2knIC0gSW5mb3JtYXRpb248L2xpPlxuXHRcdCAqICAgICA8bGk+J3AnIC0gUGFnaW5hdGlvbjwvbGk+XG5cdFx0ICogICAgIDxsaT4ncicgLSBwUm9jZXNzaW5nPC9saT5cblx0XHQgKiAgIDwvdWw+XG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhYW5GZWF0dXJlc1wiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogU3RvcmUgZGF0YSBpbmZvcm1hdGlvbiAtIHNlZSB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vUm93fSBmb3IgZGV0YWlsZWRcblx0XHQgKiBpbmZvcm1hdGlvbi5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvRGF0YVwiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgb2YgaW5kZXhlcyB3aGljaCBhcmUgaW4gdGhlIGN1cnJlbnQgZGlzcGxheSAoYWZ0ZXIgZmlsdGVyaW5nIGV0Yylcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFpRGlzcGxheVwiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgb2YgaW5kZXhlcyBmb3IgZGlzcGxheSAtIG5vIGZpbHRlcmluZ1xuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYWlEaXNwbGF5TWFzdGVyXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBNYXAgb2Ygcm93IGlkcyB0byBkYXRhIGluZGV4ZXNcblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IHt9XG5cdFx0ICovXG5cdFx0XCJhSWRzXCI6IHt9LFxuXHRcblx0XHQvKipcblx0XHQgKiBTdG9yZSBpbmZvcm1hdGlvbiBhYm91dCBlYWNoIGNvbHVtbiB0aGF0IGlzIGluIHVzZVxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYW9Db2x1bW5zXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBTdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGFibGUncyBoZWFkZXJcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvSGVhZGVyXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBTdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGFibGUncyBmb290ZXJcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvRm9vdGVyXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBTdG9yZSB0aGUgYXBwbGllZCBnbG9iYWwgc2VhcmNoIGluZm9ybWF0aW9uIGluIGNhc2Ugd2Ugd2FudCB0byBmb3JjZSBhXG5cdFx0ICogcmVzZWFyY2ggb3IgY29tcGFyZSB0aGUgb2xkIHNlYXJjaCB0byBhIG5ldyBvbmUuXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdCAqICBAbmFtZXNwYWNlXG5cdFx0ICogIEBleHRlbmRzIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaFxuXHRcdCAqL1xuXHRcdFwib1ByZXZpb3VzU2VhcmNoXCI6IHt9LFxuXHRcblx0XHQvKipcblx0XHQgKiBTdG9yZSB0aGUgYXBwbGllZCBzZWFyY2ggZm9yIGVhY2ggY29sdW1uIC0gc2VlXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaH0gZm9yIHRoZSBmb3JtYXQgdGhhdCBpcyB1c2VkIGZvciB0aGVcblx0XHQgKiBmaWx0ZXJpbmcgaW5mb3JtYXRpb24gZm9yIGVhY2ggY29sdW1uLlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYW9QcmVTZWFyY2hDb2xzXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBTb3J0aW5nIHRoYXQgaXMgYXBwbGllZCB0byB0aGUgdGFibGUuIE5vdGUgdGhhdCB0aGUgaW5uZXIgYXJyYXlzIGFyZVxuXHRcdCAqIHVzZWQgaW4gdGhlIGZvbGxvd2luZyBtYW5uZXI6XG5cdFx0ICogPHVsPlxuXHRcdCAqICAgPGxpPkluZGV4IDAgLSBjb2x1bW4gbnVtYmVyPC9saT5cblx0XHQgKiAgIDxsaT5JbmRleCAxIC0gY3VycmVudCBzb3J0aW5nIGRpcmVjdGlvbjwvbGk+XG5cdFx0ICogPC91bD5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEB0b2RvIFRoZXNlIGlubmVyIGFycmF5cyBzaG91bGQgcmVhbGx5IGJlIG9iamVjdHNcblx0XHQgKi9cblx0XHRcImFhU29ydGluZ1wiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBTb3J0aW5nIHRoYXQgaXMgYWx3YXlzIGFwcGxpZWQgdG8gdGhlIHRhYmxlIChpLmUuIHByZWZpeGVkIGluIGZyb250IG9mXG5cdFx0ICogYWFTb3J0aW5nKS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhYVNvcnRpbmdGaXhlZFwiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2xhc3NlcyB0byB1c2UgZm9yIHRoZSBzdHJpcGluZyBvZiBhIHRhYmxlLlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFzU3RyaXBlQ2xhc3Nlc1wiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBJZiByZXN0b3JpbmcgYSB0YWJsZSAtIHdlIHNob3VsZCByZXN0b3JlIGl0cyBzdHJpcGluZyBjbGFzc2VzIGFzIHdlbGxcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFzRGVzdHJveVN0cmlwZXNcIjogW10sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIElmIHJlc3RvcmluZyBhIHRhYmxlIC0gd2Ugc2hvdWxkIHJlc3RvcmUgaXRzIHdpZHRoXG5cdFx0ICogIEB0eXBlIGludFxuXHRcdCAqICBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0XCJzRGVzdHJveVdpZHRoXCI6IDAsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9ucyBhcnJheSBmb3IgZXZlcnkgdGltZSBhIHJvdyBpcyBpbnNlcnRlZCAoaS5lLiBvbiBhIGRyYXcpLlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYW9Sb3dDYWxsYmFja1wiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2sgZnVuY3Rpb25zIGZvciB0aGUgaGVhZGVyIG9uIGVhY2ggZHJhdy5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvSGVhZGVyQ2FsbGJhY2tcIjogW10sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgZm9vdGVyIG9uIGVhY2ggZHJhdy5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvRm9vdGVyQ2FsbGJhY2tcIjogW10sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEFycmF5IG9mIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgZHJhdyBjYWxsYmFjayBmdW5jdGlvbnNcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvRHJhd0NhbGxiYWNrXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBBcnJheSBvZiBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIHJvdyBjcmVhdGVkIGZ1bmN0aW9uXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhb1Jvd0NyZWF0ZWRDYWxsYmFja1wiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2sgZnVuY3Rpb25zIGZvciBqdXN0IGJlZm9yZSB0aGUgdGFibGUgaXMgcmVkcmF3bi4gQSByZXR1cm4gb2Zcblx0XHQgKiBmYWxzZSB3aWxsIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBkcmF3LlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYW9QcmVEcmF3Q2FsbGJhY2tcIjogW10sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9ucyBmb3Igd2hlbiB0aGUgdGFibGUgaGFzIGJlZW4gaW5pdGlhbGlzZWQuXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhb0luaXRDb21wbGV0ZVwiOiBbXSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrcyBmb3IgbW9kaWZ5aW5nIHRoZSBzZXR0aW5ncyB0byBiZSBzdG9yZWQgZm9yIHN0YXRlIHNhdmluZywgcHJpb3IgdG9cblx0XHQgKiBzYXZpbmcgc3RhdGUuXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhb1N0YXRlU2F2ZVBhcmFtc1wiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2tzIGZvciBtb2RpZnlpbmcgdGhlIHNldHRpbmdzIHRoYXQgaGF2ZSBiZWVuIHN0b3JlZCBmb3Igc3RhdGUgc2F2aW5nXG5cdFx0ICogcHJpb3IgdG8gdXNpbmcgdGhlIHN0b3JlZCB2YWx1ZXMgdG8gcmVzdG9yZSB0aGUgc3RhdGUuXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhb1N0YXRlTG9hZFBhcmFtc1wiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2tzIGZvciBvcGVyYXRpbmcgb24gdGhlIHNldHRpbmdzIG9iamVjdCBvbmNlIHRoZSBzYXZlZCBzdGF0ZSBoYXMgYmVlblxuXHRcdCAqIGxvYWRlZFxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYW9TdGF0ZUxvYWRlZFwiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FjaGUgdGhlIHRhYmxlIElEIGZvciBxdWljayBhY2Nlc3Ncblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IDxpPkVtcHR5IHN0cmluZzwvaT5cblx0XHQgKi9cblx0XHRcInNUYWJsZUlkXCI6IFwiXCIsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoZSBUQUJMRSBub2RlIGZvciB0aGUgbWFpbiB0YWJsZVxuXHRcdCAqICBAdHlwZSBub2RlXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm5UYWJsZVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBQZXJtYW5lbnQgcmVmIHRvIHRoZSB0aGVhZCBlbGVtZW50XG5cdFx0ICogIEB0eXBlIG5vZGVcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwiblRIZWFkXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFBlcm1hbmVudCByZWYgdG8gdGhlIHRmb290IGVsZW1lbnQgLSBpZiBpdCBleGlzdHNcblx0XHQgKiAgQHR5cGUgbm9kZVxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJuVEZvb3RcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogUGVybWFuZW50IHJlZiB0byB0aGUgdGJvZHkgZWxlbWVudFxuXHRcdCAqICBAdHlwZSBub2RlXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm5UQm9keVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBDYWNoZSB0aGUgd3JhcHBlciBub2RlIChjb250YWlucyBhbGwgRGF0YVRhYmxlcyBjb250cm9sbGVkIGVsZW1lbnRzKVxuXHRcdCAqICBAdHlwZSBub2RlXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm5UYWJsZVdyYXBwZXJcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGUgaWYgd2hlbiB1c2luZyBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIHRoZSBsb2FkaW5nIG9mIGRhdGFcblx0XHQgKiBzaG91bGQgYmUgZGVmZXJyZWQgdW50aWwgdGhlIHNlY29uZCBkcmF3LlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdFwiYkRlZmVyTG9hZGluZ1wiOiBmYWxzZSxcblx0XG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGUgaWYgYWxsIHJlcXVpcmVkIGluZm9ybWF0aW9uIGhhcyBiZWVuIHJlYWQgaW5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdFwiYkluaXRpYWxpc2VkXCI6IGZhbHNlLFxuXHRcblx0XHQvKipcblx0XHQgKiBJbmZvcm1hdGlvbiBhYm91dCBvcGVuIHJvd3MuIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheSBoYXMgdGhlIHBhcmFtZXRlcnNcblx0XHQgKiAnblRyJyBhbmQgJ25QYXJlbnQnXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhb09wZW5Sb3dzXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBEaWN0YXRlIHRoZSBwb3NpdGlvbmluZyBvZiBEYXRhVGFibGVzJyBjb250cm9sIGVsZW1lbnRzIC0gc2VlXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5tb2RlbC5vSW5pdC5zRG9tfS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJzRG9tXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNlYXJjaCBkZWxheSAoaW4gbVMpXG5cdFx0ICogIEB0eXBlIGludGVnZXJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwic2VhcmNoRGVsYXlcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogV2hpY2ggdHlwZSBvZiBwYWdpbmF0aW9uIHNob3VsZCBiZSB1c2VkLlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZWZhdWx0IHR3b19idXR0b25cblx0XHQgKi9cblx0XHRcInNQYWdpbmF0aW9uVHlwZVwiOiBcInR3b19idXR0b25cIixcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhlIHN0YXRlIGR1cmF0aW9uIChmb3IgYHN0YXRlU2F2ZWApIGluIHNlY29uZHMuXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdCAqICBAdHlwZSBpbnRcblx0XHQgKiAgQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdFwiaVN0YXRlRHVyYXRpb25cIjogMCxcblx0XG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgb2YgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciBzdGF0ZSBzYXZpbmcuIEVhY2ggYXJyYXkgZWxlbWVudCBpcyBhblxuXHRcdCAqIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcblx0XHQgKiAgIDx1bD5cblx0XHQgKiAgICAgPGxpPmZ1bmN0aW9uOmZuIC0gZnVuY3Rpb24gdG8gY2FsbC4gVGFrZXMgdHdvIHBhcmFtZXRlcnMsIG9TZXR0aW5nc1xuXHRcdCAqICAgICAgIGFuZCB0aGUgSlNPTiBzdHJpbmcgdG8gc2F2ZSB0aGF0IGhhcyBiZWVuIHRodXMgZmFyIGNyZWF0ZWQuIFJldHVybnNcblx0XHQgKiAgICAgICBhIEpTT04gc3RyaW5nIHRvIGJlIGluc2VydGVkIGludG8gYSBqc29uIG9iamVjdFxuXHRcdCAqICAgICAgIChpLmUuICdcInBhcmFtXCI6IFsgMCwgMSwgMl0nKTwvbGk+XG5cdFx0ICogICAgIDxsaT5zdHJpbmc6c05hbWUgLSBuYW1lIG9mIGNhbGxiYWNrPC9saT5cblx0XHQgKiAgIDwvdWw+XG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhb1N0YXRlU2F2ZVwiOiBbXSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgb2YgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciBzdGF0ZSBsb2FkaW5nLiBFYWNoIGFycmF5IGVsZW1lbnQgaXMgYW5cblx0XHQgKiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG5cdFx0ICogICA8dWw+XG5cdFx0ICogICAgIDxsaT5mdW5jdGlvbjpmbiAtIGZ1bmN0aW9uIHRvIGNhbGwuIFRha2VzIHR3byBwYXJhbWV0ZXJzLCBvU2V0dGluZ3Ncblx0XHQgKiAgICAgICBhbmQgdGhlIG9iamVjdCBzdG9yZWQuIE1heSByZXR1cm4gZmFsc2UgdG8gY2FuY2VsIHN0YXRlIGxvYWRpbmc8L2xpPlxuXHRcdCAqICAgICA8bGk+c3RyaW5nOnNOYW1lIC0gbmFtZSBvZiBjYWxsYmFjazwvbGk+XG5cdFx0ICogICA8L3VsPlxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYW9TdGF0ZUxvYWRcIjogW10sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFN0YXRlIHRoYXQgd2FzIHNhdmVkLiBVc2VmdWwgZm9yIGJhY2sgcmVmZXJlbmNlXG5cdFx0ICogIEB0eXBlIG9iamVjdFxuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJvU2F2ZWRTdGF0ZVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBTdGF0ZSB0aGF0IHdhcyBsb2FkZWQuIFVzZWZ1bCBmb3IgYmFjayByZWZlcmVuY2Vcblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcIm9Mb2FkZWRTdGF0ZVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBTb3VyY2UgdXJsIGZvciBBSkFYIGRhdGEgZm9yIHRoZSB0YWJsZS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJzQWpheFNvdXJjZVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBQcm9wZXJ0eSBmcm9tIGEgZ2l2ZW4gb2JqZWN0IGZyb20gd2hpY2ggdG8gcmVhZCB0aGUgdGFibGUgZGF0YSBmcm9tLiBUaGlzXG5cdFx0ICogY2FuIGJlIGFuIGVtcHR5IHN0cmluZyAod2hlbiBub3Qgc2VydmVyLXNpZGUgcHJvY2Vzc2luZyksIGluIHdoaWNoIGNhc2Vcblx0XHQgKiBpdCBpcyAgYXNzdW1lZCBhbiBhbiBhcnJheSBpcyBnaXZlbiBkaXJlY3RseS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqL1xuXHRcdFwic0FqYXhEYXRhUHJvcFwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBOb3RlIGlmIGRyYXcgc2hvdWxkIGJlIGJsb2NrZWQgd2hpbGUgZ2V0dGluZyBkYXRhXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdFwiYkFqYXhEYXRhR2V0XCI6IHRydWUsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsYXN0IGpRdWVyeSBYSFIgb2JqZWN0IHRoYXQgd2FzIHVzZWQgZm9yIHNlcnZlci1zaWRlIGRhdGEgZ2F0aGVyaW5nLlxuXHRcdCAqIFRoaXMgY2FuIGJlIHVzZWQgZm9yIHdvcmtpbmcgd2l0aCB0aGUgWEhSIGluZm9ybWF0aW9uIGluIG9uZSBvZiB0aGVcblx0XHQgKiBjYWxsYmFja3Ncblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcImpxWEhSXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEpTT04gcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGluIHRoZSBsYXN0IEFqYXggcmVxdWVzdFxuXHRcdCAqICBAdHlwZSBvYmplY3Rcblx0XHQgKiAgQGRlZmF1bHQgdW5kZWZpbmVkXG5cdFx0ICovXG5cdFx0XCJqc29uXCI6IHVuZGVmaW5lZCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRGF0YSBzdWJtaXR0ZWQgYXMgcGFydCBvZiB0aGUgbGFzdCBBamF4IHJlcXVlc3Rcblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IHVuZGVmaW5lZFxuXHRcdCAqL1xuXHRcdFwib0FqYXhEYXRhXCI6IHVuZGVmaW5lZCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdG8gZ2V0IHRoZSBzZXJ2ZXItc2lkZSBkYXRhLlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKi9cblx0XHRcImZuU2VydmVyRGF0YVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbnMgd2hpY2ggYXJlIGNhbGxlZCBwcmlvciB0byBzZW5kaW5nIGFuIEFqYXggcmVxdWVzdCBzbyBleHRyYVxuXHRcdCAqIHBhcmFtZXRlcnMgY2FuIGVhc2lseSBiZSBzZW50IHRvIHRoZSBzZXJ2ZXJcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvU2VydmVyUGFyYW1zXCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBTZW5kIHRoZSBYSFIgSFRUUCBtZXRob2QgLSBHRVQgb3IgUE9TVCAoY291bGQgYmUgUFVUIG9yIERFTEVURSBpZlxuXHRcdCAqIHJlcXVpcmVkKS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqL1xuXHRcdFwic1NlcnZlck1ldGhvZFwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBGb3JtYXQgbnVtYmVycyBmb3IgZGlzcGxheS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICovXG5cdFx0XCJmbkZvcm1hdE51bWJlclwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBMaXN0IG9mIG9wdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgdGhlIHVzZXIgc2VsZWN0YWJsZSBsZW5ndGggbWVudS5cblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICogIEBkZWZhdWx0IFtdXG5cdFx0ICovXG5cdFx0XCJhTGVuZ3RoTWVudVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBDb3VudGVyIGZvciB0aGUgZHJhd3MgdGhhdCB0aGUgdGFibGUgZG9lcy4gQWxzbyB1c2VkIGFzIGEgdHJhY2tlciBmb3Jcblx0XHQgKiBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXG5cdFx0ICogIEB0eXBlIGludFxuXHRcdCAqICBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0XCJpRHJhd1wiOiAwLFxuXHRcblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZSBpZiBhIHJlZHJhdyBpcyBiZWluZyBkb25lIC0gdXNlZnVsIGZvciBBamF4XG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHRcImJEcmF3aW5nXCI6IGZhbHNlLFxuXHRcblx0XHQvKipcblx0XHQgKiBEcmF3IGluZGV4IChpRHJhdykgb2YgdGhlIGxhc3QgZXJyb3Igd2hlbiBwYXJzaW5nIHRoZSByZXR1cm5lZCBkYXRhXG5cdFx0ICogIEB0eXBlIGludFxuXHRcdCAqICBAZGVmYXVsdCAtMVxuXHRcdCAqL1xuXHRcdFwiaURyYXdFcnJvclwiOiAtMSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUGFnaW5nIGRpc3BsYXkgbGVuZ3RoXG5cdFx0ICogIEB0eXBlIGludFxuXHRcdCAqICBAZGVmYXVsdCAxMFxuXHRcdCAqL1xuXHRcdFwiX2lEaXNwbGF5TGVuZ3RoXCI6IDEwLFxuXHRcblx0XHQvKipcblx0XHQgKiBQYWdpbmcgc3RhcnQgcG9pbnQgLSBhaURpc3BsYXkgaW5kZXhcblx0XHQgKiAgQHR5cGUgaW50XG5cdFx0ICogIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHRcIl9pRGlzcGxheVN0YXJ0XCI6IDAsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNlcnZlci1zaWRlIHByb2Nlc3NpbmcgLSBudW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgcmVzdWx0IHNldFxuXHRcdCAqIChpLmUuIGJlZm9yZSBmaWx0ZXJpbmcpLCBVc2UgZm5SZWNvcmRzVG90YWwgcmF0aGVyIHRoYW5cblx0XHQgKiB0aGlzIHByb3BlcnR5IHRvIGdldCB0aGUgdmFsdWUgb2YgdGhlIG51bWJlciBvZiByZWNvcmRzLCByZWdhcmRsZXNzIG9mXG5cdFx0ICogdGhlIHNlcnZlci1zaWRlIHByb2Nlc3Npbmcgc2V0dGluZy5cblx0XHQgKiAgQHR5cGUgaW50XG5cdFx0ICogIEBkZWZhdWx0IDBcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0XHRcIl9pUmVjb3Jkc1RvdGFsXCI6IDAsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNlcnZlci1zaWRlIHByb2Nlc3NpbmcgLSBudW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgY3VycmVudCBkaXNwbGF5IHNldFxuXHRcdCAqIChpLmUuIGFmdGVyIGZpbHRlcmluZykuIFVzZSBmblJlY29yZHNEaXNwbGF5IHJhdGhlciB0aGFuXG5cdFx0ICogdGhpcyBwcm9wZXJ0eSB0byBnZXQgdGhlIHZhbHVlIG9mIHRoZSBudW1iZXIgb2YgcmVjb3JkcywgcmVnYXJkbGVzcyBvZlxuXHRcdCAqIHRoZSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIHNldHRpbmcuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgMFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdFwiX2lSZWNvcmRzRGlzcGxheVwiOiAwLFxuXHRcblx0XHQvKipcblx0XHQgKiBGbGFnIHRvIGluZGljYXRlIGlmIGpRdWVyeSBVSSBtYXJraW5nIGFuZCBjbGFzc2VzIHNob3VsZCBiZSB1c2VkLlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqL1xuXHRcdFwiYkpVSVwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBUaGUgY2xhc3NlcyB0byB1c2UgZm9yIHRoZSB0YWJsZVxuXHRcdCAqICBAdHlwZSBvYmplY3Rcblx0XHQgKiAgQGRlZmF1bHQge31cblx0XHQgKi9cblx0XHRcIm9DbGFzc2VzXCI6IHt9LFxuXHRcblx0XHQvKipcblx0XHQgKiBGbGFnIGF0dGFjaGVkIHRvIHRoZSBzZXR0aW5ncyBvYmplY3Qgc28geW91IGNhbiBjaGVjayBpbiB0aGUgZHJhd1xuXHRcdCAqIGNhbGxiYWNrIGlmIGZpbHRlcmluZyBoYXMgYmVlbiBkb25lIGluIHRoZSBkcmF3LiBEZXByZWNhdGVkIGluIGZhdm91ciBvZlxuXHRcdCAqIGV2ZW50cy5cblx0XHQgKiAgQHR5cGUgYm9vbGVhblxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqICBAZGVwcmVjYXRlZFxuXHRcdCAqL1xuXHRcdFwiYkZpbHRlcmVkXCI6IGZhbHNlLFxuXHRcblx0XHQvKipcblx0XHQgKiBGbGFnIGF0dGFjaGVkIHRvIHRoZSBzZXR0aW5ncyBvYmplY3Qgc28geW91IGNhbiBjaGVjayBpbiB0aGUgZHJhd1xuXHRcdCAqIGNhbGxiYWNrIGlmIHNvcnRpbmcgaGFzIGJlZW4gZG9uZSBpbiB0aGUgZHJhdy4gRGVwcmVjYXRlZCBpbiBmYXZvdXIgb2Zcblx0XHQgKiBldmVudHMuXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cblx0XHQgKiAgQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiAgQGRlcHJlY2F0ZWRcblx0XHQgKi9cblx0XHRcImJTb3J0ZWRcIjogZmFsc2UsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlIHRoYXQgaWYgbXVsdGlwbGUgcm93cyBhcmUgaW4gdGhlIGhlYWRlciBhbmQgdGhlcmUgaXMgbW9yZSB0aGFuXG5cdFx0ICogb25lIHVuaXF1ZSBjZWxsIHBlciBjb2x1bW4sIGlmIHRoZSB0b3Agb25lICh0cnVlKSBvciBib3R0b20gb25lIChmYWxzZSlcblx0XHQgKiBzaG91bGQgYmUgdXNlZCBmb3Igc29ydGluZyAvIHRpdGxlIGJ5IERhdGFUYWJsZXMuXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxuXHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0ICovXG5cdFx0XCJiU29ydENlbGxzVG9wXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpc2F0aW9uIG9iamVjdCB0aGF0IGlzIHVzZWQgZm9yIHRoZSB0YWJsZVxuXHRcdCAqICBAdHlwZSBvYmplY3Rcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwib0luaXRcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRGVzdHJveSBjYWxsYmFjayBmdW5jdGlvbnMgLSBmb3IgcGx1Zy1pbnMgdG8gYXR0YWNoIHRoZW1zZWx2ZXMgdG8gdGhlXG5cdFx0ICogZGVzdHJveSBzbyB0aGV5IGNhbiBjbGVhbiB1cCBtYXJrdXAgYW5kIGV2ZW50cy5cblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHRcImFvRGVzdHJveUNhbGxiYWNrXCI6IFtdLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgY3VycmVudCByZWNvcmQgc2V0LCBiZWZvcmUgZmlsdGVyaW5nXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICovXG5cdFx0XCJmblJlY29yZHNUb3RhbFwiOiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBfZm5EYXRhU291cmNlKCB0aGlzICkgPT0gJ3NzcCcgP1xuXHRcdFx0XHR0aGlzLl9pUmVjb3Jkc1RvdGFsICogMSA6XG5cdFx0XHRcdHRoaXMuYWlEaXNwbGF5TWFzdGVyLmxlbmd0aDtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIG51bWJlciBvZiByZWNvcmRzIGluIHRoZSBjdXJyZW50IHJlY29yZCBzZXQsIGFmdGVyIGZpbHRlcmluZ1xuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxuXHRcdCAqL1xuXHRcdFwiZm5SZWNvcmRzRGlzcGxheVwiOiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBfZm5EYXRhU291cmNlKCB0aGlzICkgPT0gJ3NzcCcgP1xuXHRcdFx0XHR0aGlzLl9pUmVjb3Jkc0Rpc3BsYXkgKiAxIDpcblx0XHRcdFx0dGhpcy5haURpc3BsYXkubGVuZ3RoO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgZGlzcGxheSBlbmQgcG9pbnQgLSBhaURpc3BsYXkgaW5kZXhcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKi9cblx0XHRcImZuRGlzcGxheUVuZFwiOiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHZhclxuXHRcdFx0XHRsZW4gICAgICA9IHRoaXMuX2lEaXNwbGF5TGVuZ3RoLFxuXHRcdFx0XHRzdGFydCAgICA9IHRoaXMuX2lEaXNwbGF5U3RhcnQsXG5cdFx0XHRcdGNhbGMgICAgID0gc3RhcnQgKyBsZW4sXG5cdFx0XHRcdHJlY29yZHMgID0gdGhpcy5haURpc3BsYXkubGVuZ3RoLFxuXHRcdFx0XHRmZWF0dXJlcyA9IHRoaXMub0ZlYXR1cmVzLFxuXHRcdFx0XHRwYWdpbmF0ZSA9IGZlYXR1cmVzLmJQYWdpbmF0ZTtcblx0XG5cdFx0XHRpZiAoIGZlYXR1cmVzLmJTZXJ2ZXJTaWRlICkge1xuXHRcdFx0XHRyZXR1cm4gcGFnaW5hdGUgPT09IGZhbHNlIHx8IGxlbiA9PT0gLTEgP1xuXHRcdFx0XHRcdHN0YXJ0ICsgcmVjb3JkcyA6XG5cdFx0XHRcdFx0TWF0aC5taW4oIHN0YXJ0K2xlbiwgdGhpcy5faVJlY29yZHNEaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuICEgcGFnaW5hdGUgfHwgY2FsYz5yZWNvcmRzIHx8IGxlbj09PS0xID9cblx0XHRcdFx0XHRyZWNvcmRzIDpcblx0XHRcdFx0XHRjYWxjO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoZSBEYXRhVGFibGVzIG9iamVjdCBmb3IgdGhpcyB0YWJsZVxuXHRcdCAqICBAdHlwZSBvYmplY3Rcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwib0luc3RhbmNlXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciBlYWNoIGluc3RhbmNlIG9mIHRoZSBEYXRhVGFibGVzIG9iamVjdC4gSWYgdGhlcmVcblx0XHQgKiBpcyBhbiBJRCBvbiB0aGUgdGFibGUgbm9kZSwgdGhlbiBpdCB0YWtlcyB0aGF0IHZhbHVlLCBvdGhlcndpc2UgYW5cblx0XHQgKiBpbmNyZW1lbnRpbmcgaW50ZXJuYWwgY291bnRlciBpcyB1c2VkLlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdFwic0luc3RhbmNlXCI6IG51bGwsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIHRhYmluZGV4IGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGlzIGFkZGVkIHRvIERhdGFUYWJsZXMgY29udHJvbCBlbGVtZW50cywgYWxsb3dpbmdcblx0XHQgKiBrZXlib2FyZCBuYXZpZ2F0aW9uIG9mIHRoZSB0YWJsZSBhbmQgaXRzIGNvbnRyb2xzLlxuXHRcdCAqL1xuXHRcdFwiaVRhYkluZGV4XCI6IDAsXG5cdFxuXHRcdC8qKlxuXHRcdCAqIERJViBjb250YWluZXIgZm9yIHRoZSBmb290ZXIgc2Nyb2xsaW5nIHRhYmxlIGlmIHNjcm9sbGluZ1xuXHRcdCAqL1xuXHRcdFwiblNjcm9sbEhlYWRcIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRElWIGNvbnRhaW5lciBmb3IgdGhlIGZvb3RlciBzY3JvbGxpbmcgdGFibGUgaWYgc2Nyb2xsaW5nXG5cdFx0ICovXG5cdFx0XCJuU2Nyb2xsRm9vdFwiOiBudWxsLFxuXHRcblx0XHQvKipcblx0XHQgKiBMYXN0IGFwcGxpZWQgc29ydFxuXHRcdCAqICBAdHlwZSBhcnJheVxuXHRcdCAqICBAZGVmYXVsdCBbXVxuXHRcdCAqL1xuXHRcdFwiYUxhc3RTb3J0XCI6IFtdLFxuXHRcblx0XHQvKipcblx0XHQgKiBTdG9yZWQgcGx1Zy1pbiBpbnN0YW5jZXNcblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IHt9XG5cdFx0ICovXG5cdFx0XCJvUGx1Z2luc1wiOiB7fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdXNlZCB0byBnZXQgYSByb3cncyBpZCBmcm9tIHRoZSByb3cncyBkYXRhXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHRcInJvd0lkRm5cIjogbnVsbCxcblx0XG5cdFx0LyoqXG5cdFx0ICogRGF0YSBsb2NhdGlvbiB3aGVyZSB0byBzdG9yZSBhIHJvdydzIGlkXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xuXHRcdCAqICBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0XCJyb3dJZFwiOiBudWxsXG5cdH07XG5cblx0LyoqXG5cdCAqIEV4dGVuc2lvbiBvYmplY3QgZm9yIERhdGFUYWJsZXMgdGhhdCBpcyB1c2VkIHRvIHByb3ZpZGUgYWxsIGV4dGVuc2lvblxuXHQgKiBvcHRpb25zLlxuXHQgKlxuXHQgKiBOb3RlIHRoYXQgdGhlIGBEYXRhVGFibGUuZXh0YCBvYmplY3QgaXMgYXZhaWxhYmxlIHRocm91Z2hcblx0ICogYGpRdWVyeS5mbi5kYXRhVGFibGUuZXh0YCB3aGVyZSBpdCBtYXkgYmUgYWNjZXNzZWQgYW5kIG1hbmlwdWxhdGVkLiBJdCBpc1xuXHQgKiBhbHNvIGFsaWFzZWQgdG8gYGpRdWVyeS5mbi5kYXRhVGFibGVFeHRgIGZvciBoaXN0b3JpYyByZWFzb25zLlxuXHQgKiAgQG5hbWVzcGFjZVxuXHQgKiAgQGV4dGVuZHMgRGF0YVRhYmxlLm1vZGVscy5leHRcblx0ICovXG5cdFxuXHRcblx0LyoqXG5cdCAqIERhdGFUYWJsZXMgZXh0ZW5zaW9uc1xuXHQgKiBcblx0ICogVGhpcyBuYW1lc3BhY2UgYWN0cyBhcyBhIGNvbGxlY3Rpb24gYXJlYSBmb3IgcGx1Zy1pbnMgdGhhdCBjYW4gYmUgdXNlZCB0b1xuXHQgKiBleHRlbmQgRGF0YVRhYmxlcyBjYXBhYmlsaXRpZXMuIEluZGVlZCBtYW55IG9mIHRoZSBidWlsZCBpbiBtZXRob2RzXG5cdCAqIHVzZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIHRoZWlyIG93biBjYXBhYmlsaXRpZXMgKHNvcnRpbmcgbWV0aG9kcyBmb3Jcblx0ICogZXhhbXBsZSkuXG5cdCAqXG5cdCAqIE5vdGUgdGhhdCB0aGlzIG5hbWVzcGFjZSBpcyBhbGlhc2VkIHRvIGBqUXVlcnkuZm4uZGF0YVRhYmxlRXh0YCBmb3IgbGVnYWN5XG5cdCAqIHJlYXNvbnNcblx0ICpcblx0ICogIEBuYW1lc3BhY2Vcblx0ICovXG5cdERhdGFUYWJsZS5leHQgPSBfZXh0ID0ge1xuXHRcdC8qKlxuXHRcdCAqIEJ1dHRvbnMuIEZvciB1c2Ugd2l0aCB0aGUgQnV0dG9ucyBleHRlbnNpb24gZm9yIERhdGFUYWJsZXMuIFRoaXMgaXNcblx0XHQgKiBkZWZpbmVkIGhlcmUgc28gb3RoZXIgZXh0ZW5zaW9ucyBjYW4gZGVmaW5lIGJ1dHRvbnMgcmVnYXJkbGVzcyBvZiBsb2FkXG5cdFx0ICogb3JkZXIuIEl0IGlzIF9ub3RfIHVzZWQgYnkgRGF0YVRhYmxlcyBjb3JlLlxuXHRcdCAqXG5cdFx0ICogIEB0eXBlIG9iamVjdFxuXHRcdCAqICBAZGVmYXVsdCB7fVxuXHRcdCAqL1xuXHRcdGJ1dHRvbnM6IHt9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRWxlbWVudCBjbGFzcyBuYW1lc1xuXHRcdCAqXG5cdFx0ICogIEB0eXBlIG9iamVjdFxuXHRcdCAqICBAZGVmYXVsdCB7fVxuXHRcdCAqL1xuXHRcdGNsYXNzZXM6IHt9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRGF0YVRhYmxlcyBidWlsZCB0eXBlIChleHBhbmRlZCBieSB0aGUgZG93bmxvYWQgYnVpbGRlcilcblx0XHQgKlxuXHRcdCAqICBAdHlwZSBzdHJpbmdcblx0XHQgKi9cblx0XHRidWlsZGVyOiBcIi1zb3VyY2UtXCIsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBFcnJvciByZXBvcnRpbmcuXG5cdFx0ICogXG5cdFx0ICogSG93IHNob3VsZCBEYXRhVGFibGVzIHJlcG9ydCBhbiBlcnJvci4gQ2FuIHRha2UgdGhlIHZhbHVlICdhbGVydCcsXG5cdFx0ICogJ3Rocm93JywgJ25vbmUnIG9yIGEgZnVuY3Rpb24uXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgc3RyaW5nfGZ1bmN0aW9uXG5cdFx0ICogIEBkZWZhdWx0IGFsZXJ0XG5cdFx0ICovXG5cdFx0ZXJyTW9kZTogXCJhbGVydFwiLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogRmVhdHVyZSBwbHVnLWlucy5cblx0XHQgKiBcblx0XHQgKiBUaGlzIGlzIGFuIGFycmF5IG9mIG9iamVjdHMgd2hpY2ggZGVzY3JpYmUgdGhlIGZlYXR1cmUgcGx1Zy1pbnMgdGhhdCBhcmVcblx0XHQgKiBhdmFpbGFibGUgdG8gRGF0YVRhYmxlcy4gVGhlc2UgZmVhdHVyZSBwbHVnLWlucyBhcmUgdGhlbiBhdmFpbGFibGUgZm9yXG5cdFx0ICogdXNlIHRocm91Z2ggdGhlIGBkb21gIGluaXRpYWxpc2F0aW9uIG9wdGlvbi5cblx0XHQgKiBcblx0XHQgKiBFYWNoIGZlYXR1cmUgcGx1Zy1pbiBpcyBkZXNjcmliZWQgYnkgYW4gb2JqZWN0IHdoaWNoIG11c3QgaGF2ZSB0aGVcblx0XHQgKiBmb2xsb3dpbmcgcHJvcGVydGllczpcblx0XHQgKiBcblx0XHQgKiAqIGBmbkluaXRgIC0gZnVuY3Rpb24gdGhhdCBpcyB1c2VkIHRvIGluaXRpYWxpc2UgdGhlIHBsdWctaW4sXG5cdFx0ICogKiBgY0ZlYXR1cmVgIC0gYSBjaGFyYWN0ZXIgc28gdGhlIGZlYXR1cmUgY2FuIGJlIGVuYWJsZWQgYnkgdGhlIGBkb21gXG5cdFx0ICogICBpbnN0aWxsYXRpb24gb3B0aW9uLiBUaGlzIGlzIGNhc2Ugc2Vuc2l0aXZlLlxuXHRcdCAqXG5cdFx0ICogVGhlIGBmbkluaXRgIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nIGlucHV0IHBhcmFtZXRlcnM6XG5cdFx0ICpcblx0XHQgKiAxLiBge29iamVjdH1gIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0OiBzZWVcblx0XHQgKiAgICB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XG5cdFx0ICpcblx0XHQgKiBBbmQgdGhlIGZvbGxvd2luZyByZXR1cm4gaXMgZXhwZWN0ZWQ6XG5cdFx0ICogXG5cdFx0ICogKiB7bm9kZXxudWxsfSBUaGUgZWxlbWVudCB3aGljaCBjb250YWlucyB5b3VyIGZlYXR1cmUuIE5vdGUgdGhhdCB0aGVcblx0XHQgKiAgIHJldHVybiBtYXkgYWxzbyBiZSB2b2lkIGlmIHlvdXIgcGx1Zy1pbiBkb2VzIG5vdCByZXF1aXJlIHRvIGluamVjdCBhbnlcblx0XHQgKiAgIERPTSBlbGVtZW50cyBpbnRvIERhdGFUYWJsZXMgY29udHJvbCAoYGRvbWApIC0gZm9yIGV4YW1wbGUgdGhpcyBtaWdodFxuXHRcdCAqICAgYmUgdXNlZnVsIHdoZW4gZGV2ZWxvcGluZyBhIHBsdWctaW4gd2hpY2ggYWxsb3dzIHRhYmxlIGNvbnRyb2wgdmlhXG5cdFx0ICogICBrZXlib2FyZCBlbnRyeVxuXHRcdCAqXG5cdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgICAkLmZuLmRhdGFUYWJsZS5leHQuZmVhdHVyZXMucHVzaCgge1xuXHRcdCAqICAgICAgXCJmbkluaXRcIjogZnVuY3Rpb24oIG9TZXR0aW5ncyApIHtcblx0XHQgKiAgICAgICAgcmV0dXJuIG5ldyBUYWJsZVRvb2xzKCB7IFwib0RUU2V0dGluZ3NcIjogb1NldHRpbmdzIH0gKTtcblx0XHQgKiAgICAgIH0sXG5cdFx0ICogICAgICBcImNGZWF0dXJlXCI6IFwiVFwiXG5cdFx0ICogICAgfSApO1xuXHRcdCAqL1xuXHRcdGZlYXR1cmU6IFtdLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogUm93IHNlYXJjaGluZy5cblx0XHQgKiBcblx0XHQgKiBUaGlzIG1ldGhvZCBvZiBzZWFyY2hpbmcgaXMgY29tcGxpbWVudGFyeSB0byB0aGUgZGVmYXVsdCB0eXBlIGJhc2VkXG5cdFx0ICogc2VhcmNoaW5nLCBhbmQgYSBsb3QgbW9yZSBjb21wcmVoZW5zaXZlIGFzIGl0IGFsbG93cyB5b3UgY29tcGxldGUgY29udHJvbFxuXHRcdCAqIG92ZXIgdGhlIHNlYXJjaGluZyBsb2dpYy4gRWFjaCBlbGVtZW50IGluIHRoaXMgYXJyYXkgaXMgYSBmdW5jdGlvblxuXHRcdCAqIChwYXJhbWV0ZXJzIGRlc2NyaWJlZCBiZWxvdykgdGhhdCBpcyBjYWxsZWQgZm9yIGV2ZXJ5IHJvdyBpbiB0aGUgdGFibGUsXG5cdFx0ICogYW5kIHlvdXIgbG9naWMgZGVjaWRlcyBpZiBpdCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIHNlYXJjaGluZyBkYXRhIHNldFxuXHRcdCAqIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIFNlYXJjaGluZyBmdW5jdGlvbnMgaGF2ZSB0aGUgZm9sbG93aW5nIGlucHV0IHBhcmFtZXRlcnM6XG5cdFx0ICpcblx0XHQgKiAxLiBge29iamVjdH1gIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0OiBzZWVcblx0XHQgKiAgICB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XG5cdFx0ICogMi4gYHthcnJheXxvYmplY3R9YCBEYXRhIGZvciB0aGUgcm93IHRvIGJlIHByb2Nlc3NlZCAoc2FtZSBhcyB0aGVcblx0XHQgKiAgICBvcmlnaW5hbCBmb3JtYXQgdGhhdCB3YXMgcGFzc2VkIGluIGFzIHRoZSBkYXRhIHNvdXJjZSwgb3IgYW4gYXJyYXlcblx0XHQgKiAgICBmcm9tIGEgRE9NIGRhdGEgc291cmNlXG5cdFx0ICogMy4gYHtpbnR9YCBSb3cgaW5kZXggKHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5ncy5hb0RhdGF9KSwgd2hpY2hcblx0XHQgKiAgICBjYW4gYmUgdXNlZnVsIHRvIHJldHJpZXZlIHRoZSBgVFJgIGVsZW1lbnQgaWYgeW91IG5lZWQgRE9NIGludGVyYWN0aW9uLlxuXHRcdCAqXG5cdFx0ICogQW5kIHRoZSBmb2xsb3dpbmcgcmV0dXJuIGlzIGV4cGVjdGVkOlxuXHRcdCAqXG5cdFx0ICogKiB7Ym9vbGVhbn0gSW5jbHVkZSB0aGUgcm93IGluIHRoZSBzZWFyY2hlZCByZXN1bHQgc2V0ICh0cnVlKSBvciBub3Rcblx0XHQgKiAgIChmYWxzZSlcblx0XHQgKlxuXHRcdCAqIE5vdGUgdGhhdCBhcyB3aXRoIHRoZSBtYWluIHNlYXJjaCBhYmlsaXR5IGluIERhdGFUYWJsZXMsIHRlY2huaWNhbGx5IHRoaXNcblx0XHQgKiBpcyBcImZpbHRlcmluZ1wiLCBzaW5jZSBpdCBpcyBzdWJ0cmFjdGl2ZS4gSG93ZXZlciwgZm9yIGNvbnNpc3RlbmN5IGluXG5cdFx0ICogbmFtaW5nIHdlIGNhbGwgaXQgc2VhcmNoaW5nIGhlcmUuXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKiAgQGRlZmF1bHQgW11cblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBjdXN0b20gc2VhcmNoIGJlaW5nIGFwcGxpZWQgdG8gdGhlXG5cdFx0ICogICAgLy8gZm91cnRoIGNvbHVtbiAoaS5lLiB0aGUgZGF0YVszXSBpbmRleCkgYmFzZWQgb24gdHdvIGlucHV0IHZhbHVlc1xuXHRcdCAqICAgIC8vIGZyb20gdGhlIGVuZC11c2VyLCBtYXRjaGluZyB0aGUgZGF0YSBpbiBhIGNlcnRhaW4gcmFuZ2UuXG5cdFx0ICogICAgJC5mbi5kYXRhVGFibGUuZXh0LnNlYXJjaC5wdXNoKFxuXHRcdCAqICAgICAgZnVuY3Rpb24oIHNldHRpbmdzLCBkYXRhLCBkYXRhSW5kZXggKSB7XG5cdFx0ICogICAgICAgIHZhciBtaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWluJykudmFsdWUgKiAxO1xuXHRcdCAqICAgICAgICB2YXIgbWF4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21heCcpLnZhbHVlICogMTtcblx0XHQgKiAgICAgICAgdmFyIHZlcnNpb24gPSBkYXRhWzNdID09IFwiLVwiID8gMCA6IGRhdGFbM10qMTtcblx0XHQgKlxuXHRcdCAqICAgICAgICBpZiAoIG1pbiA9PSBcIlwiICYmIG1heCA9PSBcIlwiICkge1xuXHRcdCAqICAgICAgICAgIHJldHVybiB0cnVlO1xuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICAgIGVsc2UgaWYgKCBtaW4gPT0gXCJcIiAmJiB2ZXJzaW9uIDwgbWF4ICkge1xuXHRcdCAqICAgICAgICAgIHJldHVybiB0cnVlO1xuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICAgIGVsc2UgaWYgKCBtaW4gPCB2ZXJzaW9uICYmIFwiXCIgPT0gbWF4ICkge1xuXHRcdCAqICAgICAgICAgIHJldHVybiB0cnVlO1xuXHRcdCAqICAgICAgICB9XG5cdFx0ICogICAgICAgIGVsc2UgaWYgKCBtaW4gPCB2ZXJzaW9uICYmIHZlcnNpb24gPCBtYXggKSB7XG5cdFx0ICogICAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICogICAgICAgIH1cblx0XHQgKiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAqICAgICAgfVxuXHRcdCAqICAgICk7XG5cdFx0ICovXG5cdFx0c2VhcmNoOiBbXSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNlbGVjdG9yIGV4dGVuc2lvbnNcblx0XHQgKlxuXHRcdCAqIFRoZSBgc2VsZWN0b3JgIG9wdGlvbiBjYW4gYmUgdXNlZCB0byBleHRlbmQgdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGVcblx0XHQgKiBzZWxlY3RvciBtb2RpZmllciBvcHRpb25zIChgc2VsZWN0b3ItbW9kaWZpZXJgIG9iamVjdCBkYXRhIHR5cGUpIHRoYXRcblx0XHQgKiBlYWNoIG9mIHRoZSB0aHJlZSBidWlsdCBpbiBzZWxlY3RvciB0eXBlcyBvZmZlciAocm93LCBjb2x1bW4gYW5kIGNlbGwgK1xuXHRcdCAqIHRoZWlyIHBsdXJhbCBjb3VudGVycGFydHMpLiBGb3IgZXhhbXBsZSB0aGUgU2VsZWN0IGV4dGVuc2lvbiB1c2VzIHRoaXNcblx0XHQgKiBtZWNoYW5pc20gdG8gcHJvdmlkZSBhbiBvcHRpb24gdG8gc2VsZWN0IG9ubHkgcm93cywgY29sdW1ucyBhbmQgY2VsbHNcblx0XHQgKiB0aGF0IGhhdmUgYmVlbiBtYXJrZWQgYXMgc2VsZWN0ZWQgYnkgdGhlIGVuZCB1c2VyIChge3NlbGVjdGVkOiB0cnVlfWApLFxuXHRcdCAqIHdoaWNoIGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGV4aXN0aW5nIGJ1aWx0IGluIHNlbGVjdG9yXG5cdFx0ICogb3B0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEVhY2ggcHJvcGVydHkgaXMgYW4gYXJyYXkgdG8gd2hpY2ggZnVuY3Rpb25zIGNhbiBiZSBwdXNoZWQuIFRoZSBmdW5jdGlvbnNcblx0XHQgKiB0YWtlIHRocmVlIGF0dHJpYnV0ZXM6XG5cdFx0ICpcblx0XHQgKiAqIFNldHRpbmdzIG9iamVjdCBmb3IgdGhlIGhvc3QgdGFibGVcblx0XHQgKiAqIE9wdGlvbnMgb2JqZWN0IChgc2VsZWN0b3ItbW9kaWZpZXJgIG9iamVjdCB0eXBlKVxuXHRcdCAqICogQXJyYXkgb2Ygc2VsZWN0ZWQgaXRlbSBpbmRleGVzXG5cdFx0ICpcblx0XHQgKiBUaGUgcmV0dXJuIGlzIGFuIGFycmF5IG9mIHRoZSByZXN1bHRpbmcgaXRlbSBpbmRleGVzIGFmdGVyIHRoZSBjdXN0b21cblx0XHQgKiBzZWxlY3RvciBoYXMgYmVlbiBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogIEB0eXBlIG9iamVjdFxuXHRcdCAqL1xuXHRcdHNlbGVjdG9yOiB7XG5cdFx0XHRjZWxsOiBbXSxcblx0XHRcdGNvbHVtbjogW10sXG5cdFx0XHRyb3c6IFtdXG5cdFx0fSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEludGVybmFsIGZ1bmN0aW9ucywgZXhwb3NlZCBmb3IgdXNlZCBpbiBwbHVnLWlucy5cblx0XHQgKiBcblx0XHQgKiBQbGVhc2Ugbm90ZSB0aGF0IHlvdSBzaG91bGQgbm90IG5lZWQgdG8gdXNlIHRoZSBpbnRlcm5hbCBtZXRob2RzIGZvclxuXHRcdCAqIGFueXRoaW5nIG90aGVyIHRoYW4gYSBwbHVnLWluIChhbmQgZXZlbiB0aGVuLCB0cnkgdG8gYXZvaWQgaWYgcG9zc2libGUpLlxuXHRcdCAqIFRoZSBpbnRlcm5hbCBmdW5jdGlvbiBtYXkgY2hhbmdlIGJldHdlZW4gcmVsZWFzZXMuXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICogIEBkZWZhdWx0IHt9XG5cdFx0ICovXG5cdFx0aW50ZXJuYWw6IHt9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogTGVnYWN5IGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4gRW5hYmxlIGFuZCBkaXNhYmxlIGxlZ2FjeSBvcHRpb25zIHRoYXRcblx0XHQgKiBhcmUgYXZhaWxhYmxlIGluIERhdGFUYWJsZXMuXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0ICovXG5cdFx0bGVnYWN5OiB7XG5cdFx0XHQvKipcblx0XHRcdCAqIEVuYWJsZSAvIGRpc2FibGUgRGF0YVRhYmxlcyAxLjkgY29tcGF0aWJsZSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXG5cdFx0XHQgKiByZXF1ZXN0c1xuXHRcdFx0ICpcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXG5cdFx0XHQgKiAgQGRlZmF1bHQgbnVsbFxuXHRcdFx0ICovXG5cdFx0XHRhamF4OiBudWxsXG5cdFx0fSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFBhZ2luYXRpb24gcGx1Zy1pbiBtZXRob2RzLlxuXHRcdCAqIFxuXHRcdCAqIEVhY2ggZW50cnkgaW4gdGhpcyBvYmplY3QgaXMgYSBmdW5jdGlvbiBhbmQgZGVmaW5lcyB3aGljaCBidXR0b25zIHNob3VsZFxuXHRcdCAqIGJlIHNob3duIGJ5IHRoZSBwYWdpbmF0aW9uIHJlbmRlcmluZyBtZXRob2QgdGhhdCBpcyB1c2VkIGZvciB0aGUgdGFibGU6XG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5leHQucmVuZGVyZXIucGFnZUJ1dHRvbn0uIFRoZSByZW5kZXJlciBhZGRyZXNzZXMgaG93IHRoZVxuXHRcdCAqIGJ1dHRvbnMgYXJlIGRpc3BsYXllZCBpbiB0aGUgZG9jdW1lbnQsIHdoaWxlIHRoZSBmdW5jdGlvbnMgaGVyZSB0ZWxsIGl0XG5cdFx0ICogd2hhdCBidXR0b25zIHRvIGRpc3BsYXkuIFRoaXMgaXMgZG9uZSBieSByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYnV0dG9uXG5cdFx0ICogZGVzY3JpcHRpb25zICh3aGF0IGVhY2ggYnV0dG9uIHdpbGwgZG8pLlxuXHRcdCAqXG5cdFx0ICogUGFnaW5hdGlvbiB0eXBlcyAodGhlIGZvdXIgYnVpbHQgaW4gb3B0aW9ucyBhbmQgYW55IGFkZGl0aW9uYWwgcGx1Zy1pblxuXHRcdCAqIG9wdGlvbnMgZGVmaW5lZCBoZXJlKSBjYW4gYmUgdXNlZCB0aHJvdWdoIHRoZSBgcGFnaW5hdGlvblR5cGVgXG5cdFx0ICogaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyLlxuXHRcdCAqXG5cdFx0ICogVGhlIGZ1bmN0aW9ucyBkZWZpbmVkIHRha2UgdHdvIHBhcmFtZXRlcnM6XG5cdFx0ICpcblx0XHQgKiAxLiBge2ludH0gcGFnZWAgVGhlIGN1cnJlbnQgcGFnZSBpbmRleFxuXHRcdCAqIDIuIGB7aW50fSBwYWdlc2AgVGhlIG51bWJlciBvZiBwYWdlcyBpbiB0aGUgdGFibGVcblx0XHQgKlxuXHRcdCAqIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGFuIGFycmF5IHdoZXJlIGVhY2ggZWxlbWVudCBvZiB0aGVcblx0XHQgKiBhcnJheSBjYW4gYmUgb25lIG9mOlxuXHRcdCAqXG5cdFx0ICogKiBgZmlyc3RgIC0gSnVtcCB0byBmaXJzdCBwYWdlIHdoZW4gYWN0aXZhdGVkXG5cdFx0ICogKiBgbGFzdGAgLSBKdW1wIHRvIGxhc3QgcGFnZSB3aGVuIGFjdGl2YXRlZFxuXHRcdCAqICogYHByZXZpb3VzYCAtIFNob3cgcHJldmlvdXMgcGFnZSB3aGVuIGFjdGl2YXRlZFxuXHRcdCAqICogYG5leHRgIC0gU2hvdyBuZXh0IHBhZ2Ugd2hlbiBhY3RpdmF0ZWRcblx0XHQgKiAqIGB7aW50fWAgLSBTaG93IHBhZ2Ugb2YgdGhlIGluZGV4IGdpdmVuXG5cdFx0ICogKiBge2FycmF5fWAgLSBBIG5lc3RlZCBhcnJheSBjb250YWluaW5nIHRoZSBhYm92ZSBlbGVtZW50cyB0byBhZGQgYVxuXHRcdCAqICAgY29udGFpbmluZyAnRElWJyBlbGVtZW50IChtaWdodCBiZSB1c2VmdWwgZm9yIHN0eWxpbmcpLlxuXHRcdCAqXG5cdFx0ICogTm90ZSB0aGF0IERhdGFUYWJsZXMgdjEuOS0gdXNlZCB0aGlzIG9iamVjdCBzbGlnaHRseSBkaWZmZXJlbnRseSB3aGVyZWJ5XG5cdFx0ICogYW4gb2JqZWN0IHdpdGggdHdvIGZ1bmN0aW9ucyB3b3VsZCBiZSBkZWZpbmVkIGZvciBlYWNoIHBsdWctaW4uIFRoYXRcblx0XHQgKiBhYmlsaXR5IGlzIHN0aWxsIHN1cHBvcnRlZCBieSBEYXRhVGFibGVzIDEuMTArIHRvIHByb3ZpZGUgYmFja3dhcmRzXG5cdFx0ICogY29tcGF0aWJpbGl0eSwgYnV0IHRoaXMgb3B0aW9uIG9mIHVzZSBpcyBub3cgZGVjcmVtZW50ZWQgYW5kIG5vIGxvbmdlclxuXHRcdCAqIGRvY3VtZW50ZWQgaW4gRGF0YVRhYmxlcyAxLjEwKy5cblx0XHQgKlxuXHRcdCAqICBAdHlwZSBvYmplY3Rcblx0XHQgKiAgQGRlZmF1bHQge31cblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIFNob3cgcHJldmlvdXMsIG5leHQgYW5kIGN1cnJlbnQgcGFnZSBidXR0b25zIG9ubHlcblx0XHQgKiAgICAkLmZuLmRhdGFUYWJsZUV4dC5vUGFnaW5hdGlvbi5jdXJyZW50ID0gZnVuY3Rpb24gKCBwYWdlLCBwYWdlcyApIHtcblx0XHQgKiAgICAgIHJldHVybiBbICdwcmV2aW91cycsIHBhZ2UsICduZXh0JyBdO1xuXHRcdCAqICAgIH07XG5cdFx0ICovXG5cdFx0cGFnZXI6IHt9LFxuXHRcblx0XG5cdFx0cmVuZGVyZXI6IHtcblx0XHRcdHBhZ2VCdXR0b246IHt9LFxuXHRcdFx0aGVhZGVyOiB7fVxuXHRcdH0sXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBPcmRlcmluZyBwbHVnLWlucyAtIGN1c3RvbSBkYXRhIHNvdXJjZVxuXHRcdCAqIFxuXHRcdCAqIFRoZSBleHRlbnNpb24gb3B0aW9ucyBmb3Igb3JkZXJpbmcgb2YgZGF0YSBhdmFpbGFibGUgaGVyZSBpcyBjb21wbGltZW50YXJ5XG5cdFx0ICogdG8gdGhlIGRlZmF1bHQgdHlwZSBiYXNlZCBvcmRlcmluZyB0aGF0IERhdGFUYWJsZXMgdHlwaWNhbGx5IHVzZXMuIEl0XG5cdFx0ICogYWxsb3dzIG11Y2ggZ3JlYXRlciBjb250cm9sIG92ZXIgdGhlIHRoZSBkYXRhIHRoYXQgaXMgYmVpbmcgdXNlZCB0b1xuXHRcdCAqIG9yZGVyIGEgY29sdW1uLCBidXQgaXMgbmVjZXNzYXJpbHkgdGhlcmVmb3JlIG1vcmUgY29tcGxleC5cblx0XHQgKiBcblx0XHQgKiBUaGlzIHR5cGUgb2Ygb3JkZXJpbmcgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHRvIGRvIG9yZGVyaW5nIGJhc2VkIG9uIGRhdGFcblx0XHQgKiBsaXZlIGZyb20gdGhlIERPTSAoZm9yIGV4YW1wbGUgdGhlIGNvbnRlbnRzIG9mIGFuICdpbnB1dCcgZWxlbWVudCkgcmF0aGVyXG5cdFx0ICogdGhhbiBqdXN0IHRoZSBzdGF0aWMgc3RyaW5nIHRoYXQgRGF0YVRhYmxlcyBrbm93cyBvZi5cblx0XHQgKiBcblx0XHQgKiBUaGUgd2F5IHRoZXNlIHBsdWctaW5zIHdvcmsgaXMgdGhhdCB5b3UgY3JlYXRlIGFuIGFycmF5IG9mIHRoZSB2YWx1ZXMgeW91XG5cdFx0ICogd2lzaCB0byBiZSBvcmRlcmluZyBmb3IgdGhlIGNvbHVtbiBpbiBxdWVzdGlvbiBhbmQgdGhlbiByZXR1cm4gdGhhdFxuXHRcdCAqIGFycmF5LiBUaGUgZGF0YSBpbiB0aGUgYXJyYXkgbXVjaCBiZSBpbiB0aGUgaW5kZXggb3JkZXIgb2YgdGhlIHJvd3MgaW5cblx0XHQgKiB0aGUgdGFibGUgKG5vdCB0aGUgY3VycmVudGx5IG9yZGVyaW5nIG9yZGVyISkuIFdoaWNoIG9yZGVyIGRhdGEgZ2F0aGVyaW5nXG5cdFx0ICogZnVuY3Rpb24gaXMgcnVuIGhlcmUgZGVwZW5kcyBvbiB0aGUgYGR0LWluaXQgY29sdW1ucy5vcmRlckRhdGFUeXBlYFxuXHRcdCAqIHBhcmFtZXRlciB0aGF0IGlzIHVzZWQgZm9yIHRoZSBjb2x1bW4gKGlmIGFueSkuXG5cdFx0ICpcblx0XHQgKiBUaGUgZnVuY3Rpb25zIGRlZmluZWQgdGFrZSB0d28gcGFyYW1ldGVyczpcblx0XHQgKlxuXHRcdCAqIDEuIGB7b2JqZWN0fWAgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Q6IHNlZVxuXHRcdCAqICAgIHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cblx0XHQgKiAyLiBge2ludH1gIFRhcmdldCBjb2x1bW4gaW5kZXhcblx0XHQgKlxuXHRcdCAqIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGFuIGFycmF5OlxuXHRcdCAqXG5cdFx0ICogKiBge2FycmF5fWAgRGF0YSBmb3IgdGhlIGNvbHVtbiB0byBiZSBvcmRlcmluZyB1cG9uXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUgYXJyYXlcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICAgIC8vIE9yZGVyaW5nIHVzaW5nIGBpbnB1dGAgbm9kZSB2YWx1ZXNcblx0XHQgKiAgICAkLmZuLmRhdGFUYWJsZS5leHQub3JkZXJbJ2RvbS10ZXh0J10gPSBmdW5jdGlvbiAgKCBzZXR0aW5ncywgY29sIClcblx0XHQgKiAgICB7XG5cdFx0ICogICAgICByZXR1cm4gdGhpcy5hcGkoKS5jb2x1bW4oIGNvbCwge29yZGVyOidpbmRleCd9ICkubm9kZXMoKS5tYXAoIGZ1bmN0aW9uICggdGQsIGkgKSB7XG5cdFx0ICogICAgICAgIHJldHVybiAkKCdpbnB1dCcsIHRkKS52YWwoKTtcblx0XHQgKiAgICAgIH0gKTtcblx0XHQgKiAgICB9XG5cdFx0ICovXG5cdFx0b3JkZXI6IHt9LFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogVHlwZSBiYXNlZCBwbHVnLWlucy5cblx0XHQgKlxuXHRcdCAqIEVhY2ggY29sdW1uIGluIERhdGFUYWJsZXMgaGFzIGEgdHlwZSBhc3NpZ25lZCB0byBpdCwgZWl0aGVyIGJ5IGF1dG9tYXRpY1xuXHRcdCAqIGRldGVjdGlvbiBvciBieSBkaXJlY3QgYXNzaWdubWVudCB1c2luZyB0aGUgYHR5cGVgIG9wdGlvbiBmb3IgdGhlIGNvbHVtbi5cblx0XHQgKiBUaGUgdHlwZSBvZiBhIGNvbHVtbiB3aWxsIGVmZmVjdCBob3cgaXQgaXMgb3JkZXJpbmcgYW5kIHNlYXJjaCAocGx1Zy1pbnNcblx0XHQgKiBjYW4gYWxzbyBtYWtlIHVzZSBvZiB0aGUgY29sdW1uIHR5cGUgaWYgcmVxdWlyZWQpLlxuXHRcdCAqXG5cdFx0ICogQG5hbWVzcGFjZVxuXHRcdCAqL1xuXHRcdHR5cGU6IHtcblx0XHRcdC8qKlxuXHRcdFx0ICogVHlwZSBkZXRlY3Rpb24gZnVuY3Rpb25zLlxuXHRcdFx0ICpcblx0XHRcdCAqIFRoZSBmdW5jdGlvbnMgZGVmaW5lZCBpbiB0aGlzIG9iamVjdCBhcmUgdXNlZCB0byBhdXRvbWF0aWNhbGx5IGRldGVjdFxuXHRcdFx0ICogYSBjb2x1bW4ncyB0eXBlLCBtYWtpbmcgaW5pdGlhbGlzYXRpb24gb2YgRGF0YVRhYmxlcyBzdXBlciBlYXN5LCBldmVuXG5cdFx0XHQgKiB3aGVuIGNvbXBsZXggZGF0YSBpcyBpbiB0aGUgdGFibGUuXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhlIGZ1bmN0aW9ucyBkZWZpbmVkIHRha2UgdHdvIHBhcmFtZXRlcnM6XG5cdFx0XHQgKlxuXHRcdCAgICAgKiAgMS4gYHsqfWAgRGF0YSBmcm9tIHRoZSBjb2x1bW4gY2VsbCB0byBiZSBhbmFseXNlZFxuXHRcdCAgICAgKiAgMi4gYHtzZXR0aW5nc31gIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VkIHRvXG5cdFx0ICAgICAqICAgICBwZXJmb3JtIGNvbnRleHQgc3BlY2lmaWMgdHlwZSBkZXRlY3Rpb24gLSBmb3IgZXhhbXBsZSBkZXRlY3Rpb25cblx0XHQgICAgICogICAgIGJhc2VkIG9uIGxhbmd1YWdlIHNldHRpbmdzIHN1Y2ggYXMgdXNpbmcgYSBjb21tYSBmb3IgYSBkZWNpbWFsXG5cdFx0ICAgICAqICAgICBwbGFjZS4gR2VuZXJhbGx5IHNwZWFraW5nIHRoZSBvcHRpb25zIGZyb20gdGhlIHNldHRpbmdzIHdpbGwgbm90XG5cdFx0ICAgICAqICAgICBiZSByZXF1aXJlZFxuXHRcdFx0ICpcblx0XHRcdCAqIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuOlxuXHRcdFx0ICpcblx0XHRcdCAqICogYHtzdHJpbmd8bnVsbH1gIERhdGEgdHlwZSBkZXRlY3RlZCwgb3IgbnVsbCBpZiB1bmtub3duIChhbmQgdGh1c1xuXHRcdFx0ICogICBwYXNzIGl0IG9uIHRvIHRoZSBvdGhlciB0eXBlIGRldGVjdGlvbiBmdW5jdGlvbnMuXG5cdFx0XHQgKlxuXHRcdFx0ICogIEB0eXBlIGFycmF5XG5cdFx0XHQgKlxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAgICAvLyBDdXJyZW5jeSB0eXBlIGRldGVjdGlvbiBwbHVnLWluOlxuXHRcdFx0ICogICAgJC5mbi5kYXRhVGFibGUuZXh0LnR5cGUuZGV0ZWN0LnB1c2goXG5cdFx0XHQgKiAgICAgIGZ1bmN0aW9uICggZGF0YSwgc2V0dGluZ3MgKSB7XG5cdFx0XHQgKiAgICAgICAgLy8gQ2hlY2sgdGhlIG51bWVyaWMgcGFydFxuXHRcdFx0ICogICAgICAgIGlmICggISAkLmlzTnVtZXJpYyggZGF0YS5zdWJzdHJpbmcoMSkgKSApIHtcblx0XHRcdCAqICAgICAgICAgIHJldHVybiBudWxsO1xuXHRcdFx0ICogICAgICAgIH1cblx0XHRcdCAqXG5cdFx0XHQgKiAgICAgICAgLy8gQ2hlY2sgcHJlZml4ZWQgYnkgY3VycmVuY3lcblx0XHRcdCAqICAgICAgICBpZiAoIGRhdGEuY2hhckF0KDApID09ICckJyB8fCBkYXRhLmNoYXJBdCgwKSA9PSAnJnBvdW5kOycgKSB7XG5cdFx0XHQgKiAgICAgICAgICByZXR1cm4gJ2N1cnJlbmN5Jztcblx0XHRcdCAqICAgICAgICB9XG5cdFx0XHQgKiAgICAgICAgcmV0dXJuIG51bGw7XG5cdFx0XHQgKiAgICAgIH1cblx0XHRcdCAqICAgICk7XG5cdFx0XHQgKi9cblx0XHRcdGRldGVjdDogW10sXG5cdFxuXHRcblx0XHRcdC8qKlxuXHRcdFx0ICogVHlwZSBiYXNlZCBzZWFyY2ggZm9ybWF0dGluZy5cblx0XHRcdCAqXG5cdFx0XHQgKiBUaGUgdHlwZSBiYXNlZCBzZWFyY2hpbmcgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIHRvIHByZS1mb3JtYXQgdGhlXG5cdFx0XHQgKiBkYXRhIHRvIGJlIHNlYXJjaCBvbi4gRm9yIGV4YW1wbGUsIGl0IGNhbiBiZSB1c2VkIHRvIHN0cmlwIEhUTUxcblx0XHRcdCAqIHRhZ3Mgb3IgdG8gZGUtZm9ybWF0IHRlbGVwaG9uZSBudW1iZXJzIGZvciBudW1lcmljIG9ubHkgc2VhcmNoaW5nLlxuXHRcdFx0ICpcblx0XHRcdCAqIE5vdGUgdGhhdCBpcyBhIHNlYXJjaCBpcyBub3QgZGVmaW5lZCBmb3IgYSBjb2x1bW4gb2YgYSBnaXZlbiB0eXBlLFxuXHRcdFx0ICogbm8gc2VhcmNoIGZvcm1hdHRpbmcgd2lsbCBiZSBwZXJmb3JtZWQuXG5cdFx0XHQgKiBcblx0XHRcdCAqIFByZS1wcm9jZXNzaW5nIG9mIHNlYXJjaGluZyBkYXRhIHBsdWctaW5zIC0gV2hlbiB5b3UgYXNzaWduIHRoZSBzVHlwZVxuXHRcdFx0ICogZm9yIGEgY29sdW1uIChvciBoYXZlIGl0IGF1dG9tYXRpY2FsbHkgZGV0ZWN0ZWQgZm9yIHlvdSBieSBEYXRhVGFibGVzXG5cdFx0XHQgKiBvciBhIHR5cGUgZGV0ZWN0aW9uIHBsdWctaW4pLCB5b3Ugd2lsbCB0eXBpY2FsbHkgYmUgdXNpbmcgdGhpcyBmb3Jcblx0XHRcdCAqIGN1c3RvbSBzb3J0aW5nLCBidXQgaXQgY2FuIGFsc28gYmUgdXNlZCB0byBwcm92aWRlIGN1c3RvbSBzZWFyY2hpbmdcblx0XHRcdCAqIGJ5IGFsbG93aW5nIHlvdSB0byBwcmUtcHJvY2Vzc2luZyB0aGUgZGF0YSBhbmQgcmV0dXJuaW5nIHRoZSBkYXRhIGluXG5cdFx0XHQgKiB0aGUgZm9ybWF0IHRoYXQgc2hvdWxkIGJlIHNlYXJjaGVkIHVwb24uIFRoaXMgaXMgZG9uZSBieSBhZGRpbmdcblx0XHRcdCAqIGZ1bmN0aW9ucyB0aGlzIG9iamVjdCB3aXRoIGEgcGFyYW1ldGVyIG5hbWUgd2hpY2ggbWF0Y2hlcyB0aGUgc1R5cGVcblx0XHRcdCAqIGZvciB0aGF0IHRhcmdldCBjb2x1bW4uIFRoaXMgaXMgdGhlIGNvcm9sbGFyeSBvZiA8aT5hZm5Tb3J0RGF0YTwvaT5cblx0XHRcdCAqIGZvciBzZWFyY2hpbmcgZGF0YS5cblx0XHRcdCAqXG5cdFx0XHQgKiBUaGUgZnVuY3Rpb25zIGRlZmluZWQgdGFrZSBhIHNpbmdsZSBwYXJhbWV0ZXI6XG5cdFx0XHQgKlxuXHRcdCAgICAgKiAgMS4gYHsqfWAgRGF0YSBmcm9tIHRoZSBjb2x1bW4gY2VsbCB0byBiZSBwcmVwYXJlZCBmb3Igc2VhcmNoaW5nXG5cdFx0XHQgKlxuXHRcdFx0ICogRWFjaCBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byByZXR1cm46XG5cdFx0XHQgKlxuXHRcdFx0ICogKiBge3N0cmluZ3xudWxsfWAgRm9ybWF0dGVkIHN0cmluZyB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgdGhlIHNlYXJjaGluZy5cblx0XHRcdCAqXG5cdFx0XHQgKiAgQHR5cGUgb2JqZWN0XG5cdFx0XHQgKiAgQGRlZmF1bHQge31cblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgICQuZm4uZGF0YVRhYmxlLmV4dC50eXBlLnNlYXJjaFsndGl0bGUtbnVtZXJpYyddID0gZnVuY3Rpb24gKCBkICkge1xuXHRcdFx0ICogICAgICByZXR1cm4gZC5yZXBsYWNlKC9cXG4vZyxcIiBcIikucmVwbGFjZSggLzwuKj8+L2csIFwiXCIgKTtcblx0XHRcdCAqICAgIH1cblx0XHRcdCAqL1xuXHRcdFx0c2VhcmNoOiB7fSxcblx0XG5cdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBUeXBlIGJhc2VkIG9yZGVyaW5nLlxuXHRcdFx0ICpcblx0XHRcdCAqIFRoZSBjb2x1bW4gdHlwZSB0ZWxscyBEYXRhVGFibGVzIHdoYXQgb3JkZXJpbmcgdG8gYXBwbHkgdG8gdGhlIHRhYmxlXG5cdFx0XHQgKiB3aGVuIGEgY29sdW1uIGlzIHNvcnRlZCB1cG9uLiBUaGUgb3JkZXIgZm9yIGVhY2ggdHlwZSB0aGF0IGlzIGRlZmluZWQsXG5cdFx0XHQgKiBpcyBkZWZpbmVkIGJ5IHRoZSBmdW5jdGlvbnMgYXZhaWxhYmxlIGluIHRoaXMgb2JqZWN0LlxuXHRcdFx0ICpcblx0XHRcdCAqIEVhY2ggb3JkZXJpbmcgb3B0aW9uIGNhbiBiZSBkZXNjcmliZWQgYnkgdGhyZWUgcHJvcGVydGllcyBhZGRlZCB0b1xuXHRcdFx0ICogdGhpcyBvYmplY3Q6XG5cdFx0XHQgKlxuXHRcdFx0ICogKiBge3R5cGV9LXByZWAgLSBQcmUtZm9ybWF0dGluZyBmdW5jdGlvblxuXHRcdFx0ICogKiBge3R5cGV9LWFzY2AgLSBBc2NlbmRpbmcgb3JkZXIgZnVuY3Rpb25cblx0XHRcdCAqICogYHt0eXBlfS1kZXNjYCAtIERlc2NlbmRpbmcgb3JkZXIgZnVuY3Rpb25cblx0XHRcdCAqXG5cdFx0XHQgKiBBbGwgdGhyZWUgY2FuIGJlIHVzZWQgdG9nZXRoZXIsIG9ubHkgYHt0eXBlfS1wcmVgIG9yIG9ubHlcblx0XHRcdCAqIGB7dHlwZX0tYXNjYCBhbmQgYHt0eXBlfS1kZXNjYCB0b2dldGhlci4gSXQgaXMgZ2VuZXJhbGx5IHJlY29tbWVuZGVkXG5cdFx0XHQgKiB0aGF0IG9ubHkgYHt0eXBlfS1wcmVgIGlzIHVzZWQsIGFzIHRoaXMgcHJvdmlkZXMgdGhlIG9wdGltYWxcblx0XHRcdCAqIGltcGxlbWVudGF0aW9uIGluIHRlcm1zIG9mIHNwZWVkLCBhbHRob3VnaCB0aGUgb3RoZXJzIGFyZSBwcm92aWRlZFxuXHRcdFx0ICogZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBleGlzdGluZyBKYXZhc2NyaXB0IHNvcnQgZnVuY3Rpb25zLlxuXHRcdFx0ICpcblx0XHRcdCAqIGB7dHlwZX0tcHJlYDogRnVuY3Rpb25zIGRlZmluZWQgdGFrZSBhIHNpbmdsZSBwYXJhbWV0ZXI6XG5cdFx0XHQgKlxuXHRcdCAgICAgKiAgMS4gYHsqfWAgRGF0YSBmcm9tIHRoZSBjb2x1bW4gY2VsbCB0byBiZSBwcmVwYXJlZCBmb3Igb3JkZXJpbmdcblx0XHRcdCAqXG5cdFx0XHQgKiBBbmQgcmV0dXJuOlxuXHRcdFx0ICpcblx0XHRcdCAqICogYHsqfWAgRGF0YSB0byBiZSBzb3J0ZWQgdXBvblxuXHRcdFx0ICpcblx0XHRcdCAqIGB7dHlwZX0tYXNjYCBhbmQgYHt0eXBlfS1kZXNjYDogRnVuY3Rpb25zIGFyZSB0eXBpY2FsIEphdmFzY3JpcHQgc29ydFxuXHRcdFx0ICogZnVuY3Rpb25zLCB0YWtpbmcgdHdvIHBhcmFtZXRlcnM6XG5cdFx0XHQgKlxuXHRcdCAgICAgKiAgMS4gYHsqfWAgRGF0YSB0byBjb21wYXJlIHRvIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG5cdFx0ICAgICAqICAyLiBgeyp9YCBEYXRhIHRvIGNvbXBhcmUgdG8gdGhlIGZpcnN0IHBhcmFtZXRlclxuXHRcdFx0ICpcblx0XHRcdCAqIEFuZCByZXR1cm5pbmc6XG5cdFx0XHQgKlxuXHRcdFx0ICogKiBgeyp9YCBPcmRlcmluZyBtYXRjaDogPDAgaWYgZmlyc3QgcGFyYW1ldGVyIHNob3VsZCBiZSBzb3J0ZWQgbG93ZXJcblx0XHRcdCAqICAgdGhhbiB0aGUgc2Vjb25kIHBhcmFtZXRlciwgPT09MCBpZiB0aGUgdHdvIHBhcmFtZXRlcnMgYXJlIGVxdWFsIGFuZFxuXHRcdFx0ICogICA+MCBpZiB0aGUgZmlyc3QgcGFyYW1ldGVyIHNob3VsZCBiZSBzb3J0ZWQgaGVpZ2h0IHRoYW4gdGhlIHNlY29uZFxuXHRcdFx0ICogICBwYXJhbWV0ZXIuXG5cdFx0XHQgKiBcblx0XHRcdCAqICBAdHlwZSBvYmplY3Rcblx0XHRcdCAqICBAZGVmYXVsdCB7fVxuXHRcdFx0ICpcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogICAgLy8gTnVtZXJpYyBvcmRlcmluZyBvZiBmb3JtYXR0ZWQgbnVtYmVycyB3aXRoIGEgcHJlLWZvcm1hdHRlclxuXHRcdFx0ICogICAgJC5leHRlbmQoICQuZm4uZGF0YVRhYmxlLmV4dC50eXBlLm9yZGVyLCB7XG5cdFx0XHQgKiAgICAgIFwic3RyaW5nLXByZVwiOiBmdW5jdGlvbih4KSB7XG5cdFx0XHQgKiAgICAgICAgYSA9IChhID09PSBcIi1cIiB8fCBhID09PSBcIlwiKSA/IDAgOiBhLnJlcGxhY2UoIC9bXlxcZFxcLVxcLl0vZywgXCJcIiApO1xuXHRcdFx0ICogICAgICAgIHJldHVybiBwYXJzZUZsb2F0KCBhICk7XG5cdFx0XHQgKiAgICAgIH1cblx0XHRcdCAqICAgIH0gKTtcblx0XHRcdCAqXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqICAgIC8vIENhc2Utc2Vuc2l0aXZlIHN0cmluZyBvcmRlcmluZywgd2l0aCBubyBwcmUtZm9ybWF0dGluZyBtZXRob2Rcblx0XHRcdCAqICAgICQuZXh0ZW5kKCAkLmZuLmRhdGFUYWJsZS5leHQub3JkZXIsIHtcblx0XHRcdCAqICAgICAgXCJzdHJpbmctY2FzZS1hc2NcIjogZnVuY3Rpb24oeCx5KSB7XG5cdFx0XHQgKiAgICAgICAgcmV0dXJuICgoeCA8IHkpID8gLTEgOiAoKHggPiB5KSA/IDEgOiAwKSk7XG5cdFx0XHQgKiAgICAgIH0sXG5cdFx0XHQgKiAgICAgIFwic3RyaW5nLWNhc2UtZGVzY1wiOiBmdW5jdGlvbih4LHkpIHtcblx0XHRcdCAqICAgICAgICByZXR1cm4gKCh4IDwgeSkgPyAxIDogKCh4ID4geSkgPyAtMSA6IDApKTtcblx0XHRcdCAqICAgICAgfVxuXHRcdFx0ICogICAgfSApO1xuXHRcdFx0ICovXG5cdFx0XHRvcmRlcjoge31cblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBVbmlxdWUgRGF0YVRhYmxlcyBpbnN0YW5jZSBjb3VudGVyXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBpbnRcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdF91bmlxdWU6IDAsXG5cdFxuXHRcblx0XHQvL1xuXHRcdC8vIERlcHJlY2lhdGVkXG5cdFx0Ly8gVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSByZXRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGlibGl0eSBvbmx5LlxuXHRcdC8vIFRoZSBzaG91bGQgbm90IGJlIHVzZWQgaW4gbmV3IHByb2plY3RzIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmVcblx0XHQvLyB2ZXJzaW9uXG5cdFx0Ly9cblx0XG5cdFx0LyoqXG5cdFx0ICogVmVyc2lvbiBjaGVjayBmdW5jdGlvbi5cblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cblx0XHQgKiAgQGRlcHJlY2lhdGVkIFNpbmNlIDEuMTBcblx0XHQgKi9cblx0XHRmblZlcnNpb25DaGVjazogRGF0YVRhYmxlLmZuVmVyc2lvbkNoZWNrLFxuXHRcblx0XG5cdFx0LyoqXG5cdFx0ICogSW5kZXggZm9yIHdoYXQgJ3RoaXMnIGluZGV4IEFQSSBmdW5jdGlvbnMgc2hvdWxkIHVzZVxuXHRcdCAqICBAdHlwZSBpbnRcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcblx0XHQgKi9cblx0XHRpQXBpSW5kZXg6IDAsXG5cdFxuXHRcblx0XHQvKipcblx0XHQgKiBqUXVlcnkgVUkgY2xhc3MgY29udGFpbmVyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxuXHRcdCAqL1xuXHRcdG9KVUlDbGFzc2VzOiB7fSxcblx0XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNvZnR3YXJlIHZlcnNpb25cblx0XHQgKiAgQHR5cGUgc3RyaW5nXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXG5cdFx0ICovXG5cdFx0c1ZlcnNpb246IERhdGFUYWJsZS52ZXJzaW9uXG5cdH07XG5cdFxuXHRcblx0Ly9cblx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEFsaWFzIHRvIHByZSAxLjEwIEh1bmdhcmlhbiBub3RhdGlvbiBjb3VudGVyIHBhcnRzXG5cdC8vXG5cdCQuZXh0ZW5kKCBfZXh0LCB7XG5cdFx0YWZuRmlsdGVyaW5nOiBfZXh0LnNlYXJjaCxcblx0XHRhVHlwZXM6ICAgICAgIF9leHQudHlwZS5kZXRlY3QsXG5cdFx0b2ZuU2VhcmNoOiAgICBfZXh0LnR5cGUuc2VhcmNoLFxuXHRcdG9Tb3J0OiAgICAgICAgX2V4dC50eXBlLm9yZGVyLFxuXHRcdGFmblNvcnREYXRhOiAgX2V4dC5vcmRlcixcblx0XHRhb0ZlYXR1cmVzOiAgIF9leHQuZmVhdHVyZSxcblx0XHRvQXBpOiAgICAgICAgIF9leHQuaW50ZXJuYWwsXG5cdFx0b1N0ZENsYXNzZXM6ICBfZXh0LmNsYXNzZXMsXG5cdFx0b1BhZ2luYXRpb246ICBfZXh0LnBhZ2VyXG5cdH0gKTtcblx0XG5cdFxuXHQkLmV4dGVuZCggRGF0YVRhYmxlLmV4dC5jbGFzc2VzLCB7XG5cdFx0XCJzVGFibGVcIjogXCJkYXRhVGFibGVcIixcblx0XHRcInNOb0Zvb3RlclwiOiBcIm5vLWZvb3RlclwiLFxuXHRcblx0XHQvKiBQYWdpbmcgYnV0dG9ucyAqL1xuXHRcdFwic1BhZ2VCdXR0b25cIjogXCJwYWdpbmF0ZV9idXR0b25cIixcblx0XHRcInNQYWdlQnV0dG9uQWN0aXZlXCI6IFwiY3VycmVudFwiLFxuXHRcdFwic1BhZ2VCdXR0b25EaXNhYmxlZFwiOiBcImRpc2FibGVkXCIsXG5cdFxuXHRcdC8qIFN0cmlwaW5nIGNsYXNzZXMgKi9cblx0XHRcInNTdHJpcGVPZGRcIjogXCJvZGRcIixcblx0XHRcInNTdHJpcGVFdmVuXCI6IFwiZXZlblwiLFxuXHRcblx0XHQvKiBFbXB0eSByb3cgKi9cblx0XHRcInNSb3dFbXB0eVwiOiBcImRhdGFUYWJsZXNfZW1wdHlcIixcblx0XG5cdFx0LyogRmVhdHVyZXMgKi9cblx0XHRcInNXcmFwcGVyXCI6IFwiZGF0YVRhYmxlc193cmFwcGVyXCIsXG5cdFx0XCJzRmlsdGVyXCI6IFwiZGF0YVRhYmxlc19maWx0ZXJcIixcblx0XHRcInNJbmZvXCI6IFwiZGF0YVRhYmxlc19pbmZvXCIsXG5cdFx0XCJzUGFnaW5nXCI6IFwiZGF0YVRhYmxlc19wYWdpbmF0ZSBwYWdpbmdfXCIsIC8qIE5vdGUgdGhhdCB0aGUgdHlwZSBpcyBwb3N0Zml4ZWQgKi9cblx0XHRcInNMZW5ndGhcIjogXCJkYXRhVGFibGVzX2xlbmd0aFwiLFxuXHRcdFwic1Byb2Nlc3NpbmdcIjogXCJkYXRhVGFibGVzX3Byb2Nlc3NpbmdcIixcblx0XG5cdFx0LyogU29ydGluZyAqL1xuXHRcdFwic1NvcnRBc2NcIjogXCJzb3J0aW5nX2FzY1wiLFxuXHRcdFwic1NvcnREZXNjXCI6IFwic29ydGluZ19kZXNjXCIsXG5cdFx0XCJzU29ydGFibGVcIjogXCJzb3J0aW5nXCIsIC8qIFNvcnRhYmxlIGluIGJvdGggZGlyZWN0aW9ucyAqL1xuXHRcdFwic1NvcnRhYmxlQXNjXCI6IFwic29ydGluZ19hc2NfZGlzYWJsZWRcIixcblx0XHRcInNTb3J0YWJsZURlc2NcIjogXCJzb3J0aW5nX2Rlc2NfZGlzYWJsZWRcIixcblx0XHRcInNTb3J0YWJsZU5vbmVcIjogXCJzb3J0aW5nX2Rpc2FibGVkXCIsXG5cdFx0XCJzU29ydENvbHVtblwiOiBcInNvcnRpbmdfXCIsIC8qIE5vdGUgdGhhdCBhbiBpbnQgaXMgcG9zdGZpeGVkIGZvciB0aGUgc29ydGluZyBvcmRlciAqL1xuXHRcblx0XHQvKiBGaWx0ZXJpbmcgKi9cblx0XHRcInNGaWx0ZXJJbnB1dFwiOiBcIlwiLFxuXHRcblx0XHQvKiBQYWdlIGxlbmd0aCAqL1xuXHRcdFwic0xlbmd0aFNlbGVjdFwiOiBcIlwiLFxuXHRcblx0XHQvKiBTY3JvbGxpbmcgKi9cblx0XHRcInNTY3JvbGxXcmFwcGVyXCI6IFwiZGF0YVRhYmxlc19zY3JvbGxcIixcblx0XHRcInNTY3JvbGxIZWFkXCI6IFwiZGF0YVRhYmxlc19zY3JvbGxIZWFkXCIsXG5cdFx0XCJzU2Nyb2xsSGVhZElubmVyXCI6IFwiZGF0YVRhYmxlc19zY3JvbGxIZWFkSW5uZXJcIixcblx0XHRcInNTY3JvbGxCb2R5XCI6IFwiZGF0YVRhYmxlc19zY3JvbGxCb2R5XCIsXG5cdFx0XCJzU2Nyb2xsRm9vdFwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsRm9vdFwiLFxuXHRcdFwic1Njcm9sbEZvb3RJbm5lclwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsRm9vdElubmVyXCIsXG5cdFxuXHRcdC8qIE1pc2MgKi9cblx0XHRcInNIZWFkZXJUSFwiOiBcIlwiLFxuXHRcdFwic0Zvb3RlclRIXCI6IFwiXCIsXG5cdFxuXHRcdC8vIERlcHJlY2F0ZWRcblx0XHRcInNTb3J0SlVJQXNjXCI6IFwiXCIsXG5cdFx0XCJzU29ydEpVSURlc2NcIjogXCJcIixcblx0XHRcInNTb3J0SlVJXCI6IFwiXCIsXG5cdFx0XCJzU29ydEpVSUFzY0FsbG93ZWRcIjogXCJcIixcblx0XHRcInNTb3J0SlVJRGVzY0FsbG93ZWRcIjogXCJcIixcblx0XHRcInNTb3J0SlVJV3JhcHBlclwiOiBcIlwiLFxuXHRcdFwic1NvcnRJY29uXCI6IFwiXCIsXG5cdFx0XCJzSlVJSGVhZGVyXCI6IFwiXCIsXG5cdFx0XCJzSlVJRm9vdGVyXCI6IFwiXCJcblx0fSApO1xuXHRcblx0XG5cdChmdW5jdGlvbigpIHtcblx0XG5cdC8vIFJldXNlZCBzdHJpbmdzIGZvciBiZXR0ZXIgY29tcHJlc3Npb24uIENsb3N1cmUgY29tcGlsZXIgYXBwZWFycyB0byBoYXZlIGFcblx0Ly8gd2VpcmQgZWRnZSBjYXNlIHdoZXJlIGl0IGlzIHRyeWluZyB0byBleHBhbmQgc3RyaW5ncyByYXRoZXIgdGhhbiB1c2UgdGhlXG5cdC8vIHZhcmlhYmxlIHZlcnNpb24uIFRoaXMgcmVzdWx0cyBpbiBhYm91dCAyMDAgYnl0ZXMgYmVpbmcgYWRkZWQsIGZvciB2ZXJ5XG5cdC8vIGxpdHRsZSBwcmVmZXJlbmNlIGJlbmVmaXQgc2luY2UgaXQgdGhpcyBydW4gb24gc2NyaXB0IGxvYWQgb25seS5cblx0dmFyIF9lbXB0eSA9ICcnO1xuXHRfZW1wdHkgPSAnJztcblx0XG5cdHZhciBfc3RhdGVEZWZhdWx0ID0gX2VtcHR5ICsgJ3VpLXN0YXRlLWRlZmF1bHQnO1xuXHR2YXIgX3NvcnRJY29uICAgICA9IF9lbXB0eSArICdjc3NfcmlnaHQgdWktaWNvbiB1aS1pY29uLSc7XG5cdHZhciBfaGVhZGVyRm9vdGVyID0gX2VtcHR5ICsgJ2ZnLXRvb2xiYXIgdWktdG9vbGJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeCc7XG5cdFxuXHQkLmV4dGVuZCggRGF0YVRhYmxlLmV4dC5vSlVJQ2xhc3NlcywgRGF0YVRhYmxlLmV4dC5jbGFzc2VzLCB7XG5cdFx0LyogRnVsbCBudW1iZXJzIHBhZ2luZyBidXR0b25zICovXG5cdFx0XCJzUGFnZUJ1dHRvblwiOiAgICAgICAgIFwiZmctYnV0dG9uIHVpLWJ1dHRvbiBcIitfc3RhdGVEZWZhdWx0LFxuXHRcdFwic1BhZ2VCdXR0b25BY3RpdmVcIjogICBcInVpLXN0YXRlLWRpc2FibGVkXCIsXG5cdFx0XCJzUGFnZUJ1dHRvbkRpc2FibGVkXCI6IFwidWktc3RhdGUtZGlzYWJsZWRcIixcblx0XG5cdFx0LyogRmVhdHVyZXMgKi9cblx0XHRcInNQYWdpbmdcIjogXCJkYXRhVGFibGVzX3BhZ2luYXRlIGZnLWJ1dHRvbnNldCB1aS1idXR0b25zZXQgZmctYnV0dG9uc2V0LW11bHRpIFwiK1xuXHRcdFx0XCJ1aS1idXR0b25zZXQtbXVsdGkgcGFnaW5nX1wiLCAvKiBOb3RlIHRoYXQgdGhlIHR5cGUgaXMgcG9zdGZpeGVkICovXG5cdFxuXHRcdC8qIFNvcnRpbmcgKi9cblx0XHRcInNTb3J0QXNjXCI6ICAgICAgICAgICAgX3N0YXRlRGVmYXVsdCtcIiBzb3J0aW5nX2FzY1wiLFxuXHRcdFwic1NvcnREZXNjXCI6ICAgICAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdfZGVzY1wiLFxuXHRcdFwic1NvcnRhYmxlXCI6ICAgICAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdcIixcblx0XHRcInNTb3J0YWJsZUFzY1wiOiAgICAgICAgX3N0YXRlRGVmYXVsdCtcIiBzb3J0aW5nX2FzY19kaXNhYmxlZFwiLFxuXHRcdFwic1NvcnRhYmxlRGVzY1wiOiAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdfZGVzY19kaXNhYmxlZFwiLFxuXHRcdFwic1NvcnRhYmxlTm9uZVwiOiAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdfZGlzYWJsZWRcIixcblx0XHRcInNTb3J0SlVJQXNjXCI6ICAgICAgICAgX3NvcnRJY29uK1widHJpYW5nbGUtMS1uXCIsXG5cdFx0XCJzU29ydEpVSURlc2NcIjogICAgICAgIF9zb3J0SWNvbitcInRyaWFuZ2xlLTEtc1wiLFxuXHRcdFwic1NvcnRKVUlcIjogICAgICAgICAgICBfc29ydEljb24rXCJjYXJhdC0yLW4tc1wiLFxuXHRcdFwic1NvcnRKVUlBc2NBbGxvd2VkXCI6ICBfc29ydEljb24rXCJjYXJhdC0xLW5cIixcblx0XHRcInNTb3J0SlVJRGVzY0FsbG93ZWRcIjogX3NvcnRJY29uK1wiY2FyYXQtMS1zXCIsXG5cdFx0XCJzU29ydEpVSVdyYXBwZXJcIjogICAgIFwiRGF0YVRhYmxlc19zb3J0X3dyYXBwZXJcIixcblx0XHRcInNTb3J0SWNvblwiOiAgICAgICAgICAgXCJEYXRhVGFibGVzX3NvcnRfaWNvblwiLFxuXHRcblx0XHQvKiBTY3JvbGxpbmcgKi9cblx0XHRcInNTY3JvbGxIZWFkXCI6IFwiZGF0YVRhYmxlc19zY3JvbGxIZWFkIFwiK19zdGF0ZURlZmF1bHQsXG5cdFx0XCJzU2Nyb2xsRm9vdFwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsRm9vdCBcIitfc3RhdGVEZWZhdWx0LFxuXHRcblx0XHQvKiBNaXNjICovXG5cdFx0XCJzSGVhZGVyVEhcIjogIF9zdGF0ZURlZmF1bHQsXG5cdFx0XCJzRm9vdGVyVEhcIjogIF9zdGF0ZURlZmF1bHQsXG5cdFx0XCJzSlVJSGVhZGVyXCI6IF9oZWFkZXJGb290ZXIrXCIgdWktY29ybmVyLXRsIHVpLWNvcm5lci10clwiLFxuXHRcdFwic0pVSUZvb3RlclwiOiBfaGVhZGVyRm9vdGVyK1wiIHVpLWNvcm5lci1ibCB1aS1jb3JuZXItYnJcIlxuXHR9ICk7XG5cdFxuXHR9KCkpO1xuXHRcblx0XG5cdFxuXHR2YXIgZXh0UGFnaW5hdGlvbiA9IERhdGFUYWJsZS5leHQucGFnZXI7XG5cdFxuXHRmdW5jdGlvbiBfbnVtYmVycyAoIHBhZ2UsIHBhZ2VzICkge1xuXHRcdHZhclxuXHRcdFx0bnVtYmVycyA9IFtdLFxuXHRcdFx0YnV0dG9ucyA9IGV4dFBhZ2luYXRpb24ubnVtYmVyc19sZW5ndGgsXG5cdFx0XHRoYWxmID0gTWF0aC5mbG9vciggYnV0dG9ucyAvIDIgKSxcblx0XHRcdGkgPSAxO1xuXHRcblx0XHRpZiAoIHBhZ2VzIDw9IGJ1dHRvbnMgKSB7XG5cdFx0XHRudW1iZXJzID0gX3JhbmdlKCAwLCBwYWdlcyApO1xuXHRcdH1cblx0XHRlbHNlIGlmICggcGFnZSA8PSBoYWxmICkge1xuXHRcdFx0bnVtYmVycyA9IF9yYW5nZSggMCwgYnV0dG9ucy0yICk7XG5cdFx0XHRudW1iZXJzLnB1c2goICdlbGxpcHNpcycgKTtcblx0XHRcdG51bWJlcnMucHVzaCggcGFnZXMtMSApO1xuXHRcdH1cblx0XHRlbHNlIGlmICggcGFnZSA+PSBwYWdlcyAtIDEgLSBoYWxmICkge1xuXHRcdFx0bnVtYmVycyA9IF9yYW5nZSggcGFnZXMtKGJ1dHRvbnMtMiksIHBhZ2VzICk7XG5cdFx0XHRudW1iZXJzLnNwbGljZSggMCwgMCwgJ2VsbGlwc2lzJyApOyAvLyBubyB1bnNoaWZ0IGluIGllNlxuXHRcdFx0bnVtYmVycy5zcGxpY2UoIDAsIDAsIDAgKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRudW1iZXJzID0gX3JhbmdlKCBwYWdlLWhhbGYrMiwgcGFnZStoYWxmLTEgKTtcblx0XHRcdG51bWJlcnMucHVzaCggJ2VsbGlwc2lzJyApO1xuXHRcdFx0bnVtYmVycy5wdXNoKCBwYWdlcy0xICk7XG5cdFx0XHRudW1iZXJzLnNwbGljZSggMCwgMCwgJ2VsbGlwc2lzJyApO1xuXHRcdFx0bnVtYmVycy5zcGxpY2UoIDAsIDAsIDAgKTtcblx0XHR9XG5cdFxuXHRcdG51bWJlcnMuRFRfZWwgPSAnc3Bhbic7XG5cdFx0cmV0dXJuIG51bWJlcnM7XG5cdH1cblx0XG5cdFxuXHQkLmV4dGVuZCggZXh0UGFnaW5hdGlvbiwge1xuXHRcdHNpbXBsZTogZnVuY3Rpb24gKCBwYWdlLCBwYWdlcyApIHtcblx0XHRcdHJldHVybiBbICdwcmV2aW91cycsICduZXh0JyBdO1xuXHRcdH0sXG5cdFxuXHRcdGZ1bGw6IGZ1bmN0aW9uICggcGFnZSwgcGFnZXMgKSB7XG5cdFx0XHRyZXR1cm4gWyAgJ2ZpcnN0JywgJ3ByZXZpb3VzJywgJ25leHQnLCAnbGFzdCcgXTtcblx0XHR9LFxuXHRcblx0XHRudW1iZXJzOiBmdW5jdGlvbiAoIHBhZ2UsIHBhZ2VzICkge1xuXHRcdFx0cmV0dXJuIFsgX251bWJlcnMocGFnZSwgcGFnZXMpIF07XG5cdFx0fSxcblx0XG5cdFx0c2ltcGxlX251bWJlcnM6IGZ1bmN0aW9uICggcGFnZSwgcGFnZXMgKSB7XG5cdFx0XHRyZXR1cm4gWyAncHJldmlvdXMnLCBfbnVtYmVycyhwYWdlLCBwYWdlcyksICduZXh0JyBdO1xuXHRcdH0sXG5cdFxuXHRcdGZ1bGxfbnVtYmVyczogZnVuY3Rpb24gKCBwYWdlLCBwYWdlcyApIHtcblx0XHRcdHJldHVybiBbICdmaXJzdCcsICdwcmV2aW91cycsIF9udW1iZXJzKHBhZ2UsIHBhZ2VzKSwgJ25leHQnLCAnbGFzdCcgXTtcblx0XHR9LFxuXHRcblx0XHQvLyBGb3IgdGVzdGluZyBhbmQgcGx1Zy1pbnMgdG8gdXNlXG5cdFx0X251bWJlcnM6IF9udW1iZXJzLFxuXHRcblx0XHQvLyBOdW1iZXIgb2YgbnVtYmVyIGJ1dHRvbnMgKGluY2x1ZGluZyBlbGxpcHNpcykgdG8gc2hvdy4gX011c3QgYmUgb2RkIV9cblx0XHRudW1iZXJzX2xlbmd0aDogN1xuXHR9ICk7XG5cdFxuXHRcblx0JC5leHRlbmQoIHRydWUsIERhdGFUYWJsZS5leHQucmVuZGVyZXIsIHtcblx0XHRwYWdlQnV0dG9uOiB7XG5cdFx0XHRfOiBmdW5jdGlvbiAoIHNldHRpbmdzLCBob3N0LCBpZHgsIGJ1dHRvbnMsIHBhZ2UsIHBhZ2VzICkge1xuXHRcdFx0XHR2YXIgY2xhc3NlcyA9IHNldHRpbmdzLm9DbGFzc2VzO1xuXHRcdFx0XHR2YXIgbGFuZyA9IHNldHRpbmdzLm9MYW5ndWFnZS5vUGFnaW5hdGU7XG5cdFx0XHRcdHZhciBhcmlhID0gc2V0dGluZ3Mub0xhbmd1YWdlLm9BcmlhLnBhZ2luYXRlIHx8IHt9O1xuXHRcdFx0XHR2YXIgYnRuRGlzcGxheSwgYnRuQ2xhc3MsIGNvdW50ZXI9MDtcblx0XG5cdFx0XHRcdHZhciBhdHRhY2ggPSBmdW5jdGlvbiggY29udGFpbmVyLCBidXR0b25zICkge1xuXHRcdFx0XHRcdHZhciBpLCBpZW4sIG5vZGUsIGJ1dHRvbjtcblx0XHRcdFx0XHR2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKCBlICkge1xuXHRcdFx0XHRcdFx0X2ZuUGFnZUNoYW5nZSggc2V0dGluZ3MsIGUuZGF0YS5hY3Rpb24sIHRydWUgKTtcblx0XHRcdFx0XHR9O1xuXHRcblx0XHRcdFx0XHRmb3IgKCBpPTAsIGllbj1idXR0b25zLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xuXHRcdFx0XHRcdFx0YnV0dG9uID0gYnV0dG9uc1tpXTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoICQuaXNBcnJheSggYnV0dG9uICkgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBpbm5lciA9ICQoICc8JysoYnV0dG9uLkRUX2VsIHx8ICdkaXYnKSsnLz4nIClcblx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kVG8oIGNvbnRhaW5lciApO1xuXHRcdFx0XHRcdFx0XHRhdHRhY2goIGlubmVyLCBidXR0b24gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRidG5EaXNwbGF5ID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0YnRuQ2xhc3MgPSAnJztcblx0XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoIGJ1dHRvbiApIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlICdlbGxpcHNpcyc6XG5cdFx0XHRcdFx0XHRcdFx0XHRjb250YWluZXIuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImVsbGlwc2lzXCI+JiN4MjAyNjs8L3NwYW4+Jyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnZmlyc3QnOlxuXHRcdFx0XHRcdFx0XHRcdFx0YnRuRGlzcGxheSA9IGxhbmcuc0ZpcnN0O1xuXHRcdFx0XHRcdFx0XHRcdFx0YnRuQ2xhc3MgPSBidXR0b24gKyAocGFnZSA+IDAgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQnJyA6ICcgJytjbGFzc2VzLnNQYWdlQnV0dG9uRGlzYWJsZWQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3ByZXZpb3VzJzpcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkRpc3BsYXkgPSBsYW5nLnNQcmV2aW91cztcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkNsYXNzID0gYnV0dG9uICsgKHBhZ2UgPiAwID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0JycgOiAnICcrY2xhc3Nlcy5zUGFnZUJ1dHRvbkRpc2FibGVkKTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRjYXNlICduZXh0Jzpcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkRpc3BsYXkgPSBsYW5nLnNOZXh0O1xuXHRcdFx0XHRcdFx0XHRcdFx0YnRuQ2xhc3MgPSBidXR0b24gKyAocGFnZSA8IHBhZ2VzLTEgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQnJyA6ICcgJytjbGFzc2VzLnNQYWdlQnV0dG9uRGlzYWJsZWQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2xhc3QnOlxuXHRcdFx0XHRcdFx0XHRcdFx0YnRuRGlzcGxheSA9IGxhbmcuc0xhc3Q7XG5cdFx0XHRcdFx0XHRcdFx0XHRidG5DbGFzcyA9IGJ1dHRvbiArIChwYWdlIDwgcGFnZXMtMSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCcnIDogJyAnK2NsYXNzZXMuc1BhZ2VCdXR0b25EaXNhYmxlZCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkRpc3BsYXkgPSBidXR0b24gKyAxO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnRuQ2xhc3MgPSBwYWdlID09PSBidXR0b24gP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNQYWdlQnV0dG9uQWN0aXZlIDogJyc7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0aWYgKCBidG5EaXNwbGF5ICE9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSAkKCc8YT4nLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCdjbGFzcyc6IGNsYXNzZXMuc1BhZ2VCdXR0b24rJyAnK2J0bkNsYXNzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnYXJpYS1jb250cm9scyc6IHNldHRpbmdzLnNUYWJsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnYXJpYS1sYWJlbCc6IGFyaWFbIGJ1dHRvbiBdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnZGF0YS1kdC1pZHgnOiBjb3VudGVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQndGFiaW5kZXgnOiBzZXR0aW5ncy5pVGFiSW5kZXgsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCdpZCc6IGlkeCA9PT0gMCAmJiB0eXBlb2YgYnV0dG9uID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2V0dGluZ3Muc1RhYmxlSWQgKydfJysgYnV0dG9uIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRudWxsXG5cdFx0XHRcdFx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHRcdFx0XHRcdC5odG1sKCBidG5EaXNwbGF5IClcblx0XHRcdFx0XHRcdFx0XHRcdC5hcHBlbmRUbyggY29udGFpbmVyICk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdF9mbkJpbmRBY3Rpb24oXG5cdFx0XHRcdFx0XHRcdFx0XHRub2RlLCB7YWN0aW9uOiBidXR0b259LCBjbGlja0hhbmRsZXJcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFxuXHRcdFx0XHQvLyBJRTkgdGhyb3dzIGFuICd1bmtub3duIGVycm9yJyBpZiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlzIHVzZWRcblx0XHRcdFx0Ly8gaW5zaWRlIGFuIGlmcmFtZSBvciBmcmFtZS4gVHJ5IC8gY2F0Y2ggdGhlIGVycm9yLiBOb3QgZ29vZCBmb3Jcblx0XHRcdFx0Ly8gYWNjZXNzaWJpbGl0eSwgYnV0IG5laXRoZXIgYXJlIGZyYW1lcy5cblx0XHRcdFx0dmFyIGFjdGl2ZUVsO1xuXHRcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBCZWNhdXNlIHRoaXMgYXBwcm9hY2ggaXMgZGVzdHJveWluZyBhbmQgcmVjcmVhdGluZyB0aGUgcGFnaW5nXG5cdFx0XHRcdFx0Ly8gZWxlbWVudHMsIGZvY3VzIGlzIGxvc3Qgb24gdGhlIHNlbGVjdCBidXR0b24gd2hpY2ggaXMgYmFkIGZvclxuXHRcdFx0XHRcdC8vIGFjY2Vzc2liaWxpdHkuIFNvIHdlIHdhbnQgdG8gcmVzdG9yZSBmb2N1cyBvbmNlIHRoZSBkcmF3IGhhc1xuXHRcdFx0XHRcdC8vIGNvbXBsZXRlZFxuXHRcdFx0XHRcdGFjdGl2ZUVsID0gJChob3N0KS5maW5kKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmRhdGEoJ2R0LWlkeCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNhdGNoIChlKSB7fVxuXHRcblx0XHRcdFx0YXR0YWNoKCAkKGhvc3QpLmVtcHR5KCksIGJ1dHRvbnMgKTtcblx0XG5cdFx0XHRcdGlmICggYWN0aXZlRWwgKSB7XG5cdFx0XHRcdFx0JChob3N0KS5maW5kKCAnW2RhdGEtZHQtaWR4PScrYWN0aXZlRWwrJ10nICkuZm9jdXMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdFxuXHQvLyBCdWlsdCBpbiB0eXBlIGRldGVjdGlvbi4gU2VlIG1vZGVsLmV4dC5hVHlwZXMgZm9yIGluZm9ybWF0aW9uIGFib3V0XG5cdC8vIHdoYXQgaXMgcmVxdWlyZWQgZnJvbSB0aGlzIG1ldGhvZHMuXG5cdCQuZXh0ZW5kKCBEYXRhVGFibGUuZXh0LnR5cGUuZGV0ZWN0LCBbXG5cdFx0Ly8gUGxhaW4gbnVtYmVycyAtIGZpcnN0IHNpbmNlIFY4IGRldGVjdHMgc29tZSBwbGFpbiBudW1iZXJzIGFzIGRhdGVzXG5cdFx0Ly8gZS5nLiBEYXRlLnBhcnNlKCc1NScpIChidXQgbm90IGFsbCwgZS5nLiBEYXRlLnBhcnNlKCcyMicpLi4uKS5cblx0XHRmdW5jdGlvbiAoIGQsIHNldHRpbmdzIClcblx0XHR7XG5cdFx0XHR2YXIgZGVjaW1hbCA9IHNldHRpbmdzLm9MYW5ndWFnZS5zRGVjaW1hbDtcblx0XHRcdHJldHVybiBfaXNOdW1iZXIoIGQsIGRlY2ltYWwgKSA/ICdudW0nK2RlY2ltYWwgOiBudWxsO1xuXHRcdH0sXG5cdFxuXHRcdC8vIERhdGVzIChvbmx5IHRob3NlIHJlY29nbmlzZWQgYnkgdGhlIGJyb3dzZXIncyBEYXRlLnBhcnNlKVxuXHRcdGZ1bmN0aW9uICggZCwgc2V0dGluZ3MgKVxuXHRcdHtcblx0XHRcdC8vIFY4IHdpbGwgcmVtb3ZlIGFueSB1bmtub3duIGNoYXJhY3RlcnMgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlXG5cdFx0XHQvLyBleHByZXNzaW9uLCBsZWFkaW5nIHRvIGZhbHNlIG1hdGNoZXMgc3VjaCBhcyBgJDI0NS4xMmAgb3IgYDEwJWAgYmVpbmdcblx0XHRcdC8vIGEgdmFsaWQgZGF0ZS4gU2VlIGZvcnVtIHRocmVhZCAxODk0MSBmb3IgZGV0YWlsLlxuXHRcdFx0aWYgKCBkICYmICEoZCBpbnN0YW5jZW9mIERhdGUpICYmICggISBfcmVfZGF0ZV9zdGFydC50ZXN0KGQpIHx8ICEgX3JlX2RhdGVfZW5kLnRlc3QoZCkgKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcGFyc2VkID0gRGF0ZS5wYXJzZShkKTtcblx0XHRcdHJldHVybiAocGFyc2VkICE9PSBudWxsICYmICFpc05hTihwYXJzZWQpKSB8fCBfZW1wdHkoZCkgPyAnZGF0ZScgOiBudWxsO1xuXHRcdH0sXG5cdFxuXHRcdC8vIEZvcm1hdHRlZCBudW1iZXJzXG5cdFx0ZnVuY3Rpb24gKCBkLCBzZXR0aW5ncyApXG5cdFx0e1xuXHRcdFx0dmFyIGRlY2ltYWwgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uuc0RlY2ltYWw7XG5cdFx0XHRyZXR1cm4gX2lzTnVtYmVyKCBkLCBkZWNpbWFsLCB0cnVlICkgPyAnbnVtLWZtdCcrZGVjaW1hbCA6IG51bGw7XG5cdFx0fSxcblx0XG5cdFx0Ly8gSFRNTCBudW1lcmljXG5cdFx0ZnVuY3Rpb24gKCBkLCBzZXR0aW5ncyApXG5cdFx0e1xuXHRcdFx0dmFyIGRlY2ltYWwgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uuc0RlY2ltYWw7XG5cdFx0XHRyZXR1cm4gX2h0bWxOdW1lcmljKCBkLCBkZWNpbWFsICkgPyAnaHRtbC1udW0nK2RlY2ltYWwgOiBudWxsO1xuXHRcdH0sXG5cdFxuXHRcdC8vIEhUTUwgbnVtZXJpYywgZm9ybWF0dGVkXG5cdFx0ZnVuY3Rpb24gKCBkLCBzZXR0aW5ncyApXG5cdFx0e1xuXHRcdFx0dmFyIGRlY2ltYWwgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uuc0RlY2ltYWw7XG5cdFx0XHRyZXR1cm4gX2h0bWxOdW1lcmljKCBkLCBkZWNpbWFsLCB0cnVlICkgPyAnaHRtbC1udW0tZm10JytkZWNpbWFsIDogbnVsbDtcblx0XHR9LFxuXHRcblx0XHQvLyBIVE1MICh0aGlzIGlzIHN0cmljdCBjaGVja2luZyAtIHRoZXJlIG11c3QgYmUgaHRtbClcblx0XHRmdW5jdGlvbiAoIGQsIHNldHRpbmdzIClcblx0XHR7XG5cdFx0XHRyZXR1cm4gX2VtcHR5KCBkICkgfHwgKHR5cGVvZiBkID09PSAnc3RyaW5nJyAmJiBkLmluZGV4T2YoJzwnKSAhPT0gLTEpID9cblx0XHRcdFx0J2h0bWwnIDogbnVsbDtcblx0XHR9XG5cdF0gKTtcblx0XG5cdFxuXHRcblx0Ly8gRmlsdGVyIGZvcm1hdHRpbmcgZnVuY3Rpb25zLiBTZWUgbW9kZWwuZXh0Lm9mblNlYXJjaCBmb3IgaW5mb3JtYXRpb24gYWJvdXRcblx0Ly8gd2hhdCBpcyByZXF1aXJlZCBmcm9tIHRoZXNlIG1ldGhvZHMuXG5cdC8vIFxuXHQvLyBOb3RlIHRoYXQgYWRkaXRpb25hbCBzZWFyY2ggbWV0aG9kcyBhcmUgYWRkZWQgZm9yIHRoZSBodG1sIG51bWJlcnMgYW5kXG5cdC8vIGh0bWwgZm9ybWF0dGVkIG51bWJlcnMgYnkgYF9hZGROdW1lcmljU29ydCgpYCB3aGVuIHdlIGtub3cgd2hhdCB0aGUgZGVjaW1hbFxuXHQvLyBwbGFjZSBpc1xuXHRcblx0XG5cdCQuZXh0ZW5kKCBEYXRhVGFibGUuZXh0LnR5cGUuc2VhcmNoLCB7XG5cdFx0aHRtbDogZnVuY3Rpb24gKCBkYXRhICkge1xuXHRcdFx0cmV0dXJuIF9lbXB0eShkYXRhKSA/XG5cdFx0XHRcdGRhdGEgOlxuXHRcdFx0XHR0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRcdGRhdGFcblx0XHRcdFx0XHRcdC5yZXBsYWNlKCBfcmVfbmV3X2xpbmVzLCBcIiBcIiApXG5cdFx0XHRcdFx0XHQucmVwbGFjZSggX3JlX2h0bWwsIFwiXCIgKSA6XG5cdFx0XHRcdFx0Jyc7XG5cdFx0fSxcblx0XG5cdFx0c3RyaW5nOiBmdW5jdGlvbiAoIGRhdGEgKSB7XG5cdFx0XHRyZXR1cm4gX2VtcHR5KGRhdGEpID9cblx0XHRcdFx0ZGF0YSA6XG5cdFx0XHRcdHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdFx0ZGF0YS5yZXBsYWNlKCBfcmVfbmV3X2xpbmVzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRkYXRhO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdFxuXHR2YXIgX19udW1lcmljUmVwbGFjZSA9IGZ1bmN0aW9uICggZCwgZGVjaW1hbFBsYWNlLCByZTEsIHJlMiApIHtcblx0XHRpZiAoIGQgIT09IDAgJiYgKCFkIHx8IGQgPT09ICctJykgKSB7XG5cdFx0XHRyZXR1cm4gLUluZmluaXR5O1xuXHRcdH1cblx0XG5cdFx0Ly8gSWYgYSBkZWNpbWFsIHBsYWNlIG90aGVyIHRoYW4gYC5gIGlzIHVzZWQsIGl0IG5lZWRzIHRvIGJlIGdpdmVuIHRvIHRoZVxuXHRcdC8vIGZ1bmN0aW9uIHNvIHdlIGNhbiBkZXRlY3QgaXQgYW5kIHJlcGxhY2Ugd2l0aCBhIGAuYCB3aGljaCBpcyB0aGUgb25seVxuXHRcdC8vIGRlY2ltYWwgcGxhY2UgSmF2YXNjcmlwdCByZWNvZ25pc2VzIC0gaXQgaXMgbm90IGxvY2FsZSBhd2FyZS5cblx0XHRpZiAoIGRlY2ltYWxQbGFjZSApIHtcblx0XHRcdGQgPSBfbnVtVG9EZWNpbWFsKCBkLCBkZWNpbWFsUGxhY2UgKTtcblx0XHR9XG5cdFxuXHRcdGlmICggZC5yZXBsYWNlICkge1xuXHRcdFx0aWYgKCByZTEgKSB7XG5cdFx0XHRcdGQgPSBkLnJlcGxhY2UoIHJlMSwgJycgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHJlMiApIHtcblx0XHRcdFx0ZCA9IGQucmVwbGFjZSggcmUyLCAnJyApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGQgKiAxO1xuXHR9O1xuXHRcblx0XG5cdC8vIEFkZCB0aGUgbnVtZXJpYyAnZGVmb3JtYXR0aW5nJyBmdW5jdGlvbnMgZm9yIHNvcnRpbmcgYW5kIHNlYXJjaC4gVGhpcyBpcyBkb25lXG5cdC8vIGluIGEgZnVuY3Rpb24gdG8gcHJvdmlkZSBhbiBlYXN5IGFiaWxpdHkgZm9yIHRoZSBsYW5ndWFnZSBvcHRpb25zIHRvIGFkZFxuXHQvLyBhZGRpdGlvbmFsIG1ldGhvZHMgaWYgYSBub24tcGVyaW9kIGRlY2ltYWwgcGxhY2UgaXMgdXNlZC5cblx0ZnVuY3Rpb24gX2FkZE51bWVyaWNTb3J0ICggZGVjaW1hbFBsYWNlICkge1xuXHRcdCQuZWFjaChcblx0XHRcdHtcblx0XHRcdFx0Ly8gUGxhaW4gbnVtYmVyc1xuXHRcdFx0XHRcIm51bVwiOiBmdW5jdGlvbiAoIGQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9fbnVtZXJpY1JlcGxhY2UoIGQsIGRlY2ltYWxQbGFjZSApO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gRm9ybWF0dGVkIG51bWJlcnNcblx0XHRcdFx0XCJudW0tZm10XCI6IGZ1bmN0aW9uICggZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gX19udW1lcmljUmVwbGFjZSggZCwgZGVjaW1hbFBsYWNlLCBfcmVfZm9ybWF0dGVkX251bWVyaWMgKTtcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIEhUTUwgbnVtZXJpY1xuXHRcdFx0XHRcImh0bWwtbnVtXCI6IGZ1bmN0aW9uICggZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gX19udW1lcmljUmVwbGFjZSggZCwgZGVjaW1hbFBsYWNlLCBfcmVfaHRtbCApO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gSFRNTCBudW1lcmljLCBmb3JtYXR0ZWRcblx0XHRcdFx0XCJodG1sLW51bS1mbXRcIjogZnVuY3Rpb24gKCBkICkge1xuXHRcdFx0XHRcdHJldHVybiBfX251bWVyaWNSZXBsYWNlKCBkLCBkZWNpbWFsUGxhY2UsIF9yZV9odG1sLCBfcmVfZm9ybWF0dGVkX251bWVyaWMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGZ1bmN0aW9uICgga2V5LCBmbiApIHtcblx0XHRcdFx0Ly8gQWRkIHRoZSBvcmRlcmluZyBtZXRob2Rcblx0XHRcdFx0X2V4dC50eXBlLm9yZGVyWyBrZXkrZGVjaW1hbFBsYWNlKyctcHJlJyBdID0gZm47XG5cdFxuXHRcdFx0XHQvLyBGb3IgSFRNTCB0eXBlcyBhZGQgYSBzZWFyY2ggZm9ybWF0dGVyIHRoYXQgd2lsbCBzdHJpcCB0aGUgSFRNTFxuXHRcdFx0XHRpZiAoIGtleS5tYXRjaCgvXmh0bWxcXC0vKSApIHtcblx0XHRcdFx0XHRfZXh0LnR5cGUuc2VhcmNoWyBrZXkrZGVjaW1hbFBsYWNlIF0gPSBfZXh0LnR5cGUuc2VhcmNoLmh0bWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHR9XG5cdFxuXHRcblx0Ly8gRGVmYXVsdCBzb3J0IG1ldGhvZHNcblx0JC5leHRlbmQoIF9leHQudHlwZS5vcmRlciwge1xuXHRcdC8vIERhdGVzXG5cdFx0XCJkYXRlLXByZVwiOiBmdW5jdGlvbiAoIGQgKSB7XG5cdFx0XHRyZXR1cm4gRGF0ZS5wYXJzZSggZCApIHx8IDA7XG5cdFx0fSxcblx0XG5cdFx0Ly8gaHRtbFxuXHRcdFwiaHRtbC1wcmVcIjogZnVuY3Rpb24gKCBhICkge1xuXHRcdFx0cmV0dXJuIF9lbXB0eShhKSA/XG5cdFx0XHRcdCcnIDpcblx0XHRcdFx0YS5yZXBsYWNlID9cblx0XHRcdFx0XHRhLnJlcGxhY2UoIC88Lio/Pi9nLCBcIlwiICkudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0YSsnJztcblx0XHR9LFxuXHRcblx0XHQvLyBzdHJpbmdcblx0XHRcInN0cmluZy1wcmVcIjogZnVuY3Rpb24gKCBhICkge1xuXHRcdFx0Ly8gVGhpcyBpcyBhIGxpdHRsZSBjb21wbGV4LCBidXQgZmFzdGVyIHRoYW4gYWx3YXlzIGNhbGxpbmcgdG9TdHJpbmcsXG5cdFx0XHQvLyBodHRwOi8vanNwZXJmLmNvbS90b3N0cmluZy12LWNoZWNrXG5cdFx0XHRyZXR1cm4gX2VtcHR5KGEpID9cblx0XHRcdFx0JycgOlxuXHRcdFx0XHR0eXBlb2YgYSA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRcdGEudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0ISBhLnRvU3RyaW5nID9cblx0XHRcdFx0XHRcdCcnIDpcblx0XHRcdFx0XHRcdGEudG9TdHJpbmcoKTtcblx0XHR9LFxuXHRcblx0XHQvLyBzdHJpbmctYXNjIGFuZCAtZGVzYyBhcmUgcmV0YWluZWQgb25seSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBvbGRcblx0XHQvLyBzb3J0IG1ldGhvZHNcblx0XHRcInN0cmluZy1hc2NcIjogZnVuY3Rpb24gKCB4LCB5ICkge1xuXHRcdFx0cmV0dXJuICgoeCA8IHkpID8gLTEgOiAoKHggPiB5KSA/IDEgOiAwKSk7XG5cdFx0fSxcblx0XG5cdFx0XCJzdHJpbmctZGVzY1wiOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cdFx0XHRyZXR1cm4gKCh4IDwgeSkgPyAxIDogKCh4ID4geSkgPyAtMSA6IDApKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHQvLyBOdW1lcmljIHNvcnRpbmcgdHlwZXMgLSBvcmRlciBkb2Vzbid0IG1hdHRlciBoZXJlXG5cdF9hZGROdW1lcmljU29ydCggJycgKTtcblx0XG5cdFxuXHQkLmV4dGVuZCggdHJ1ZSwgRGF0YVRhYmxlLmV4dC5yZW5kZXJlciwge1xuXHRcdGhlYWRlcjoge1xuXHRcdFx0XzogZnVuY3Rpb24gKCBzZXR0aW5ncywgY2VsbCwgY29sdW1uLCBjbGFzc2VzICkge1xuXHRcdFx0XHQvLyBObyBhZGRpdGlvbmFsIG1hcmstdXAgcmVxdWlyZWRcblx0XHRcdFx0Ly8gQXR0YWNoIGEgc29ydCBsaXN0ZW5lciB0byB1cGRhdGUgb24gc29ydCAtIG5vdGUgdGhhdCB1c2luZyB0aGVcblx0XHRcdFx0Ly8gYERUYCBuYW1lc3BhY2Ugd2lsbCBhbGxvdyB0aGUgZXZlbnQgdG8gYmUgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5XG5cdFx0XHRcdC8vIG9uIGRlc3Ryb3ksIHdoaWxlIHRoZSBgZHRgIG5hbWVzcGFjZWQgZXZlbnQgaXMgdGhlIG9uZSB3ZSBhcmVcblx0XHRcdFx0Ly8gbGlzdGVuaW5nIGZvclxuXHRcdFx0XHQkKHNldHRpbmdzLm5UYWJsZSkub24oICdvcmRlci5kdC5EVCcsIGZ1bmN0aW9uICggZSwgY3R4LCBzb3J0aW5nLCBjb2x1bW5zICkge1xuXHRcdFx0XHRcdGlmICggc2V0dGluZ3MgIT09IGN0eCApIHsgLy8gbmVlZCB0byBjaGVjayB0aGlzIHRoaXMgaXMgdGhlIGhvc3Rcblx0XHRcdFx0XHRcdHJldHVybjsgICAgICAgICAgICAgICAvLyB0YWJsZSwgbm90IGEgbmVzdGVkIG9uZVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0dmFyIGNvbElkeCA9IGNvbHVtbi5pZHg7XG5cdFxuXHRcdFx0XHRcdGNlbGxcblx0XHRcdFx0XHRcdC5yZW1vdmVDbGFzcyhcblx0XHRcdFx0XHRcdFx0Y29sdW1uLnNTb3J0aW5nQ2xhc3MgKycgJytcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEFzYyArJyAnK1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0RGVzY1xuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0LmFkZENsYXNzKCBjb2x1bW5zWyBjb2xJZHggXSA9PSAnYXNjJyA/XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnRBc2MgOiBjb2x1bW5zWyBjb2xJZHggXSA9PSAnZGVzYycgP1xuXHRcdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnREZXNjIDpcblx0XHRcdFx0XHRcdFx0XHRjb2x1bW4uc1NvcnRpbmdDbGFzc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRqcXVlcnl1aTogZnVuY3Rpb24gKCBzZXR0aW5ncywgY2VsbCwgY29sdW1uLCBjbGFzc2VzICkge1xuXHRcdFx0XHQkKCc8ZGl2Lz4nKVxuXHRcdFx0XHRcdC5hZGRDbGFzcyggY2xhc3Nlcy5zU29ydEpVSVdyYXBwZXIgKVxuXHRcdFx0XHRcdC5hcHBlbmQoIGNlbGwuY29udGVudHMoKSApXG5cdFx0XHRcdFx0LmFwcGVuZCggJCgnPHNwYW4vPicpXG5cdFx0XHRcdFx0XHQuYWRkQ2xhc3MoIGNsYXNzZXMuc1NvcnRJY29uKycgJytjb2x1bW4uc1NvcnRpbmdDbGFzc0pVSSApXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHRcdC5hcHBlbmRUbyggY2VsbCApO1xuXHRcblx0XHRcdFx0Ly8gQXR0YWNoIGEgc29ydCBsaXN0ZW5lciB0byB1cGRhdGUgb24gc29ydFxuXHRcdFx0XHQkKHNldHRpbmdzLm5UYWJsZSkub24oICdvcmRlci5kdC5EVCcsIGZ1bmN0aW9uICggZSwgY3R4LCBzb3J0aW5nLCBjb2x1bW5zICkge1xuXHRcdFx0XHRcdGlmICggc2V0dGluZ3MgIT09IGN0eCApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHZhciBjb2xJZHggPSBjb2x1bW4uaWR4O1xuXHRcblx0XHRcdFx0XHRjZWxsXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIGNsYXNzZXMuc1NvcnRBc2MgK1wiIFwiK2NsYXNzZXMuc1NvcnREZXNjIClcblx0XHRcdFx0XHRcdC5hZGRDbGFzcyggY29sdW1uc1sgY29sSWR4IF0gPT0gJ2FzYycgP1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0QXNjIDogY29sdW1uc1sgY29sSWR4IF0gPT0gJ2Rlc2MnID9cblx0XHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0RGVzYyA6XG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uLnNTb3J0aW5nQ2xhc3Ncblx0XHRcdFx0XHRcdCk7XG5cdFxuXHRcdFx0XHRcdGNlbGxcblx0XHRcdFx0XHRcdC5maW5kKCAnc3Bhbi4nK2NsYXNzZXMuc1NvcnRJY29uIClcblx0XHRcdFx0XHRcdC5yZW1vdmVDbGFzcyhcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSUFzYyArXCIgXCIrXG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnRKVUlEZXNjICtcIiBcIitcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSSArXCIgXCIrXG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnRKVUlBc2NBbGxvd2VkICtcIiBcIitcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSURlc2NBbGxvd2VkXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQuYWRkQ2xhc3MoIGNvbHVtbnNbIGNvbElkeCBdID09ICdhc2MnID9cblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSUFzYyA6IGNvbHVtbnNbIGNvbElkeCBdID09ICdkZXNjJyA/XG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSURlc2MgOlxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbi5zU29ydGluZ0NsYXNzSlVJXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHQvKlxuXHQgKiBQdWJsaWMgaGVscGVyIGZ1bmN0aW9ucy4gVGhlc2UgYXJlbid0IHVzZWQgaW50ZXJuYWxseSBieSBEYXRhVGFibGVzLCBvclxuXHQgKiBjYWxsZWQgYnkgYW55IG9mIHRoZSBvcHRpb25zIHBhc3NlZCBpbnRvIERhdGFUYWJsZXMsIGJ1dCB0aGV5IGNhbiBiZSB1c2VkXG5cdCAqIGV4dGVybmFsbHkgYnkgZGV2ZWxvcGVycyB3b3JraW5nIHdpdGggRGF0YVRhYmxlcy4gVGhleSBhcmUgaGVscGVyIGZ1bmN0aW9uc1xuXHQgKiB0byBtYWtlIHdvcmtpbmcgd2l0aCBEYXRhVGFibGVzIGEgbGl0dGxlIGJpdCBlYXNpZXIuXG5cdCAqL1xuXHRcblx0LyoqXG5cdCAqIEhlbHBlcnMgZm9yIGBjb2x1bW5zLnJlbmRlcmAuXG5cdCAqXG5cdCAqIFRoZSBvcHRpb25zIGRlZmluZWQgaGVyZSBjYW4gYmUgdXNlZCB3aXRoIHRoZSBgY29sdW1ucy5yZW5kZXJgIGluaXRpYWxpc2F0aW9uXG5cdCAqIG9wdGlvbiB0byBwcm92aWRlIGEgZGlzcGxheSByZW5kZXJlci4gVGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgYXJlIGRlZmluZWQ6XG5cdCAqXG5cdCAqICogYG51bWJlcmAgLSBXaWxsIGZvcm1hdCBudW1lcmljIGRhdGEgKGRlZmluZWQgYnkgYGNvbHVtbnMuZGF0YWApIGZvclxuXHQgKiAgIGRpc3BsYXksIHJldGFpbmluZyB0aGUgb3JpZ2luYWwgdW5mb3JtYXR0ZWQgZGF0YSBmb3Igc29ydGluZyBhbmQgZmlsdGVyaW5nLlxuXHQgKiAgIEl0IHRha2VzIDUgcGFyYW1ldGVyczpcblx0ICogICAqIGBzdHJpbmdgIC0gVGhvdXNhbmRzIGdyb3VwaW5nIHNlcGFyYXRvclxuXHQgKiAgICogYHN0cmluZ2AgLSBEZWNpbWFsIHBvaW50IGluZGljYXRvclxuXHQgKiAgICogYGludGVnZXJgIC0gTnVtYmVyIG9mIGRlY2ltYWwgcG9pbnRzIHRvIHNob3dcblx0ICogICAqIGBzdHJpbmdgIChvcHRpb25hbCkgLSBQcmVmaXguXG5cdCAqICAgKiBgc3RyaW5nYCAob3B0aW9uYWwpIC0gUG9zdGZpeCAoL3N1ZmZpeCkuXG5cdCAqICogYHRleHRgIC0gRXNjYXBlIEhUTUwgdG8gaGVscCBwcmV2ZW50IFhTUyBhdHRhY2tzLiBJdCBoYXMgbm8gb3B0aW9uYWxcblx0ICogICBwYXJhbWV0ZXJzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZVxuXHQgKiAgIC8vIENvbHVtbiBkZWZpbml0aW9uIHVzaW5nIHRoZSBudW1iZXIgcmVuZGVyZXJcblx0ICogICB7XG5cdCAqICAgICBkYXRhOiBcInNhbGFyeVwiLFxuXHQgKiAgICAgcmVuZGVyOiAkLmZuLmRhdGFUYWJsZS5yZW5kZXIubnVtYmVyKCAnXFwnJywgJy4nLCAwLCAnJCcgKVxuXHQgKiAgIH1cblx0ICpcblx0ICogQG5hbWVzcGFjZVxuXHQgKi9cblx0RGF0YVRhYmxlLnJlbmRlciA9IHtcblx0XHRudW1iZXI6IGZ1bmN0aW9uICggdGhvdXNhbmRzLCBkZWNpbWFsLCBwcmVjaXNpb24sIHByZWZpeCwgcG9zdGZpeCApIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRpc3BsYXk6IGZ1bmN0aW9uICggZCApIHtcblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBkICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgZCAhPT0gJ3N0cmluZycgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZDtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHZhciBuZWdhdGl2ZSA9IGQgPCAwID8gJy0nIDogJyc7XG5cdFx0XHRcdFx0dmFyIGZsbyA9IHBhcnNlRmxvYXQoIGQgKTtcblx0XG5cdFx0XHRcdFx0Ly8gSWYgTmFOIHRoZW4gdGhlcmUgaXNuJ3QgbXVjaCBmb3JtYXR0aW5nIHRoYXQgd2UgY2FuIGRvIC0ganVzdFxuXHRcdFx0XHRcdC8vIHJldHVybiBpbW1lZGlhdGVseVxuXHRcdFx0XHRcdGlmICggaXNOYU4oIGZsbyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGQ7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRkID0gTWF0aC5hYnMoIGZsbyApO1xuXHRcblx0XHRcdFx0XHR2YXIgaW50UGFydCA9IHBhcnNlSW50KCBkLCAxMCApO1xuXHRcdFx0XHRcdHZhciBmbG9hdFBhcnQgPSBwcmVjaXNpb24gP1xuXHRcdFx0XHRcdFx0ZGVjaW1hbCsoZCAtIGludFBhcnQpLnRvRml4ZWQoIHByZWNpc2lvbiApLnN1YnN0cmluZyggMiApOlxuXHRcdFx0XHRcdFx0Jyc7XG5cdFxuXHRcdFx0XHRcdHJldHVybiBuZWdhdGl2ZSArIChwcmVmaXh8fCcnKSArXG5cdFx0XHRcdFx0XHRpbnRQYXJ0LnRvU3RyaW5nKCkucmVwbGFjZShcblx0XHRcdFx0XHRcdFx0L1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIHRob3VzYW5kc1xuXHRcdFx0XHRcdFx0KSArXG5cdFx0XHRcdFx0XHRmbG9hdFBhcnQgK1xuXHRcdFx0XHRcdFx0KHBvc3RmaXh8fCcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcblx0XHR0ZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkaXNwbGF5OiBmdW5jdGlvbiAoIGQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiBkID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdFx0XHRkLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpIDpcblx0XHRcdFx0XHRcdGQ7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9O1xuXHRcblx0XG5cdC8qXG5cdCAqIFRoaXMgaXMgcmVhbGx5IGEgZ29vZCBiaXQgcnViYmlzaCB0aGlzIG1ldGhvZCBvZiBleHBvc2luZyB0aGUgaW50ZXJuYWwgbWV0aG9kc1xuXHQgKiBwdWJsaWNseS4uLiAtIFRvIGJlIGZpeGVkIGluIDIuMCB1c2luZyBtZXRob2RzIG9uIHRoZSBwcm90b3R5cGVcblx0ICovXG5cdFxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZSBhIHdyYXBwZXIgZnVuY3Rpb24gZm9yIGV4cG9ydGluZyBhbiBpbnRlcm5hbCBmdW5jdGlvbnMgdG8gYW4gZXh0ZXJuYWwgQVBJLlxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IGZuIEFQSSBmdW5jdGlvbiBuYW1lXG5cdCAqICBAcmV0dXJucyB7ZnVuY3Rpb259IHdyYXBwZWQgZnVuY3Rpb25cblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjaW50ZXJuYWxcblx0ICovXG5cdGZ1bmN0aW9uIF9mbkV4dGVybkFwaUZ1bmMgKGZuKVxuXHR7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGFyZ3MgPSBbX2ZuU2V0dGluZ3NGcm9tTm9kZSggdGhpc1tEYXRhVGFibGUuZXh0LmlBcGlJbmRleF0gKV0uY29uY2F0KFxuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIERhdGFUYWJsZS5leHQuaW50ZXJuYWxbZm5dLmFwcGx5KCB0aGlzLCBhcmdzICk7XG5cdFx0fTtcblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBSZWZlcmVuY2UgdG8gaW50ZXJuYWwgZnVuY3Rpb25zIGZvciB1c2UgYnkgcGx1Zy1pbiBkZXZlbG9wZXJzLiBOb3RlIHRoYXRcblx0ICogdGhlc2UgbWV0aG9kcyBhcmUgcmVmZXJlbmNlcyB0byBpbnRlcm5hbCBmdW5jdGlvbnMgYW5kIGFyZSBjb25zaWRlcmVkIHRvIGJlXG5cdCAqIHByaXZhdGUuIElmIHlvdSB1c2UgdGhlc2UgbWV0aG9kcywgYmUgYXdhcmUgdGhhdCB0aGV5IGFyZSBsaWFibGUgdG8gY2hhbmdlXG5cdCAqIGJldHdlZW4gdmVyc2lvbnMuXG5cdCAqICBAbmFtZXNwYWNlXG5cdCAqL1xuXHQkLmV4dGVuZCggRGF0YVRhYmxlLmV4dC5pbnRlcm5hbCwge1xuXHRcdF9mbkV4dGVybkFwaUZ1bmM6IF9mbkV4dGVybkFwaUZ1bmMsXG5cdFx0X2ZuQnVpbGRBamF4OiBfZm5CdWlsZEFqYXgsXG5cdFx0X2ZuQWpheFVwZGF0ZTogX2ZuQWpheFVwZGF0ZSxcblx0XHRfZm5BamF4UGFyYW1ldGVyczogX2ZuQWpheFBhcmFtZXRlcnMsXG5cdFx0X2ZuQWpheFVwZGF0ZURyYXc6IF9mbkFqYXhVcGRhdGVEcmF3LFxuXHRcdF9mbkFqYXhEYXRhU3JjOiBfZm5BamF4RGF0YVNyYyxcblx0XHRfZm5BZGRDb2x1bW46IF9mbkFkZENvbHVtbixcblx0XHRfZm5Db2x1bW5PcHRpb25zOiBfZm5Db2x1bW5PcHRpb25zLFxuXHRcdF9mbkFkanVzdENvbHVtblNpemluZzogX2ZuQWRqdXN0Q29sdW1uU2l6aW5nLFxuXHRcdF9mblZpc2libGVUb0NvbHVtbkluZGV4OiBfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCxcblx0XHRfZm5Db2x1bW5JbmRleFRvVmlzaWJsZTogX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUsXG5cdFx0X2ZuVmlzYmxlQ29sdW1uczogX2ZuVmlzYmxlQ29sdW1ucyxcblx0XHRfZm5HZXRDb2x1bW5zOiBfZm5HZXRDb2x1bW5zLFxuXHRcdF9mbkNvbHVtblR5cGVzOiBfZm5Db2x1bW5UeXBlcyxcblx0XHRfZm5BcHBseUNvbHVtbkRlZnM6IF9mbkFwcGx5Q29sdW1uRGVmcyxcblx0XHRfZm5IdW5nYXJpYW5NYXA6IF9mbkh1bmdhcmlhbk1hcCxcblx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuOiBfZm5DYW1lbFRvSHVuZ2FyaWFuLFxuXHRcdF9mbkxhbmd1YWdlQ29tcGF0OiBfZm5MYW5ndWFnZUNvbXBhdCxcblx0XHRfZm5Ccm93c2VyRGV0ZWN0OiBfZm5Ccm93c2VyRGV0ZWN0LFxuXHRcdF9mbkFkZERhdGE6IF9mbkFkZERhdGEsXG5cdFx0X2ZuQWRkVHI6IF9mbkFkZFRyLFxuXHRcdF9mbk5vZGVUb0RhdGFJbmRleDogX2ZuTm9kZVRvRGF0YUluZGV4LFxuXHRcdF9mbk5vZGVUb0NvbHVtbkluZGV4OiBfZm5Ob2RlVG9Db2x1bW5JbmRleCxcblx0XHRfZm5HZXRDZWxsRGF0YTogX2ZuR2V0Q2VsbERhdGEsXG5cdFx0X2ZuU2V0Q2VsbERhdGE6IF9mblNldENlbGxEYXRhLFxuXHRcdF9mblNwbGl0T2JqTm90YXRpb246IF9mblNwbGl0T2JqTm90YXRpb24sXG5cdFx0X2ZuR2V0T2JqZWN0RGF0YUZuOiBfZm5HZXRPYmplY3REYXRhRm4sXG5cdFx0X2ZuU2V0T2JqZWN0RGF0YUZuOiBfZm5TZXRPYmplY3REYXRhRm4sXG5cdFx0X2ZuR2V0RGF0YU1hc3RlcjogX2ZuR2V0RGF0YU1hc3Rlcixcblx0XHRfZm5DbGVhclRhYmxlOiBfZm5DbGVhclRhYmxlLFxuXHRcdF9mbkRlbGV0ZUluZGV4OiBfZm5EZWxldGVJbmRleCxcblx0XHRfZm5JbnZhbGlkYXRlOiBfZm5JbnZhbGlkYXRlLFxuXHRcdF9mbkdldFJvd0VsZW1lbnRzOiBfZm5HZXRSb3dFbGVtZW50cyxcblx0XHRfZm5DcmVhdGVUcjogX2ZuQ3JlYXRlVHIsXG5cdFx0X2ZuQnVpbGRIZWFkOiBfZm5CdWlsZEhlYWQsXG5cdFx0X2ZuRHJhd0hlYWQ6IF9mbkRyYXdIZWFkLFxuXHRcdF9mbkRyYXc6IF9mbkRyYXcsXG5cdFx0X2ZuUmVEcmF3OiBfZm5SZURyYXcsXG5cdFx0X2ZuQWRkT3B0aW9uc0h0bWw6IF9mbkFkZE9wdGlvbnNIdG1sLFxuXHRcdF9mbkRldGVjdEhlYWRlcjogX2ZuRGV0ZWN0SGVhZGVyLFxuXHRcdF9mbkdldFVuaXF1ZVRoczogX2ZuR2V0VW5pcXVlVGhzLFxuXHRcdF9mbkZlYXR1cmVIdG1sRmlsdGVyOiBfZm5GZWF0dXJlSHRtbEZpbHRlcixcblx0XHRfZm5GaWx0ZXJDb21wbGV0ZTogX2ZuRmlsdGVyQ29tcGxldGUsXG5cdFx0X2ZuRmlsdGVyQ3VzdG9tOiBfZm5GaWx0ZXJDdXN0b20sXG5cdFx0X2ZuRmlsdGVyQ29sdW1uOiBfZm5GaWx0ZXJDb2x1bW4sXG5cdFx0X2ZuRmlsdGVyOiBfZm5GaWx0ZXIsXG5cdFx0X2ZuRmlsdGVyQ3JlYXRlU2VhcmNoOiBfZm5GaWx0ZXJDcmVhdGVTZWFyY2gsXG5cdFx0X2ZuRXNjYXBlUmVnZXg6IF9mbkVzY2FwZVJlZ2V4LFxuXHRcdF9mbkZpbHRlckRhdGE6IF9mbkZpbHRlckRhdGEsXG5cdFx0X2ZuRmVhdHVyZUh0bWxJbmZvOiBfZm5GZWF0dXJlSHRtbEluZm8sXG5cdFx0X2ZuVXBkYXRlSW5mbzogX2ZuVXBkYXRlSW5mbyxcblx0XHRfZm5JbmZvTWFjcm9zOiBfZm5JbmZvTWFjcm9zLFxuXHRcdF9mbkluaXRpYWxpc2U6IF9mbkluaXRpYWxpc2UsXG5cdFx0X2ZuSW5pdENvbXBsZXRlOiBfZm5Jbml0Q29tcGxldGUsXG5cdFx0X2ZuTGVuZ3RoQ2hhbmdlOiBfZm5MZW5ndGhDaGFuZ2UsXG5cdFx0X2ZuRmVhdHVyZUh0bWxMZW5ndGg6IF9mbkZlYXR1cmVIdG1sTGVuZ3RoLFxuXHRcdF9mbkZlYXR1cmVIdG1sUGFnaW5hdGU6IF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUsXG5cdFx0X2ZuUGFnZUNoYW5nZTogX2ZuUGFnZUNoYW5nZSxcblx0XHRfZm5GZWF0dXJlSHRtbFByb2Nlc3Npbmc6IF9mbkZlYXR1cmVIdG1sUHJvY2Vzc2luZyxcblx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheTogX2ZuUHJvY2Vzc2luZ0Rpc3BsYXksXG5cdFx0X2ZuRmVhdHVyZUh0bWxUYWJsZTogX2ZuRmVhdHVyZUh0bWxUYWJsZSxcblx0XHRfZm5TY3JvbGxEcmF3OiBfZm5TY3JvbGxEcmF3LFxuXHRcdF9mbkFwcGx5VG9DaGlsZHJlbjogX2ZuQXBwbHlUb0NoaWxkcmVuLFxuXHRcdF9mbkNhbGN1bGF0ZUNvbHVtbldpZHRoczogX2ZuQ2FsY3VsYXRlQ29sdW1uV2lkdGhzLFxuXHRcdF9mblRocm90dGxlOiBfZm5UaHJvdHRsZSxcblx0XHRfZm5Db252ZXJ0VG9XaWR0aDogX2ZuQ29udmVydFRvV2lkdGgsXG5cdFx0X2ZuR2V0V2lkZXN0Tm9kZTogX2ZuR2V0V2lkZXN0Tm9kZSxcblx0XHRfZm5HZXRNYXhMZW5TdHJpbmc6IF9mbkdldE1heExlblN0cmluZyxcblx0XHRfZm5TdHJpbmdUb0NzczogX2ZuU3RyaW5nVG9Dc3MsXG5cdFx0X2ZuU29ydEZsYXR0ZW46IF9mblNvcnRGbGF0dGVuLFxuXHRcdF9mblNvcnQ6IF9mblNvcnQsXG5cdFx0X2ZuU29ydEFyaWE6IF9mblNvcnRBcmlhLFxuXHRcdF9mblNvcnRMaXN0ZW5lcjogX2ZuU29ydExpc3RlbmVyLFxuXHRcdF9mblNvcnRBdHRhY2hMaXN0ZW5lcjogX2ZuU29ydEF0dGFjaExpc3RlbmVyLFxuXHRcdF9mblNvcnRpbmdDbGFzc2VzOiBfZm5Tb3J0aW5nQ2xhc3Nlcyxcblx0XHRfZm5Tb3J0RGF0YTogX2ZuU29ydERhdGEsXG5cdFx0X2ZuU2F2ZVN0YXRlOiBfZm5TYXZlU3RhdGUsXG5cdFx0X2ZuTG9hZFN0YXRlOiBfZm5Mb2FkU3RhdGUsXG5cdFx0X2ZuU2V0dGluZ3NGcm9tTm9kZTogX2ZuU2V0dGluZ3NGcm9tTm9kZSxcblx0XHRfZm5Mb2c6IF9mbkxvZyxcblx0XHRfZm5NYXA6IF9mbk1hcCxcblx0XHRfZm5CaW5kQWN0aW9uOiBfZm5CaW5kQWN0aW9uLFxuXHRcdF9mbkNhbGxiYWNrUmVnOiBfZm5DYWxsYmFja1JlZyxcblx0XHRfZm5DYWxsYmFja0ZpcmU6IF9mbkNhbGxiYWNrRmlyZSxcblx0XHRfZm5MZW5ndGhPdmVyZmxvdzogX2ZuTGVuZ3RoT3ZlcmZsb3csXG5cdFx0X2ZuUmVuZGVyZXI6IF9mblJlbmRlcmVyLFxuXHRcdF9mbkRhdGFTb3VyY2U6IF9mbkRhdGFTb3VyY2UsXG5cdFx0X2ZuUm93QXR0cmlidXRlczogX2ZuUm93QXR0cmlidXRlcyxcblx0XHRfZm5DYWxjdWxhdGVFbmQ6IGZ1bmN0aW9uICgpIHt9IC8vIFVzZWQgYnkgYSBsb3Qgb2YgcGx1Zy1pbnMsIGJ1dCByZWR1bmRhbnRcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIDEuMTAsIHNvIHRoaXMgZGVhZC1lbmQgZnVuY3Rpb24gaXNcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZGVkIHRvIHByZXZlbnQgZXJyb3JzXG5cdH0gKTtcblx0XG5cblx0Ly8galF1ZXJ5IGFjY2Vzc1xuXHQkLmZuLmRhdGFUYWJsZSA9IERhdGFUYWJsZTtcblxuXHQvLyBQcm92aWRlIGFjY2VzcyB0byB0aGUgaG9zdCBqUXVlcnkgb2JqZWN0IChjaXJjdWxhciByZWZlcmVuY2UpXG5cdERhdGFUYWJsZS4kID0gJDtcblxuXHQvLyBMZWdhY3kgYWxpYXNlc1xuXHQkLmZuLmRhdGFUYWJsZVNldHRpbmdzID0gRGF0YVRhYmxlLnNldHRpbmdzO1xuXHQkLmZuLmRhdGFUYWJsZUV4dCA9IERhdGFUYWJsZS5leHQ7XG5cblx0Ly8gV2l0aCBhIGNhcGl0YWwgYERgIHdlIHJldHVybiBhIERhdGFUYWJsZXMgQVBJIGluc3RhbmNlIHJhdGhlciB0aGFuIGFcblx0Ly8galF1ZXJ5IG9iamVjdFxuXHQkLmZuLkRhdGFUYWJsZSA9IGZ1bmN0aW9uICggb3B0cyApIHtcblx0XHRyZXR1cm4gJCh0aGlzKS5kYXRhVGFibGUoIG9wdHMgKS5hcGkoKTtcblx0fTtcblxuXHQvLyBBbGwgcHJvcGVydGllcyB0aGF0IGFyZSBhdmFpbGFibGUgdG8gJC5mbi5kYXRhVGFibGUgc2hvdWxkIGFsc28gYmVcblx0Ly8gYXZhaWxhYmxlIG9uICQuZm4uRGF0YVRhYmxlXG5cdCQuZWFjaCggRGF0YVRhYmxlLCBmdW5jdGlvbiAoIHByb3AsIHZhbCApIHtcblx0XHQkLmZuLkRhdGFUYWJsZVsgcHJvcCBdID0gdmFsO1xuXHR9ICk7XG5cblxuXHQvLyBJbmZvcm1hdGlvbiBhYm91dCBldmVudHMgZmlyZWQgYnkgRGF0YVRhYmxlcyAtIGZvciBkb2N1bWVudGF0aW9uLlxuXHQvKipcblx0ICogRHJhdyBldmVudCwgZmlyZWQgd2hlbmV2ZXIgdGhlIHRhYmxlIGlzIHJlZHJhd24gb24gdGhlIHBhZ2UsIGF0IHRoZSBzYW1lXG5cdCAqIHBvaW50IGFzIGZuRHJhd0NhbGxiYWNrLiBUaGlzIG1heSBiZSB1c2VmdWwgZm9yIGJpbmRpbmcgZXZlbnRzIG9yXG5cdCAqIHBlcmZvcm1pbmcgY2FsY3VsYXRpb25zIHdoZW4gdGhlIHRhYmxlIGlzIGFsdGVyZWQgYXQgYWxsLlxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI2RyYXcuZHRcblx0ICogIEBldmVudFxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gbyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdCB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBTZWFyY2ggZXZlbnQsIGZpcmVkIHdoZW4gdGhlIHNlYXJjaGluZyBhcHBsaWVkIHRvIHRoZSB0YWJsZSAodXNpbmcgdGhlXG5cdCAqIGJ1aWx0LWluIGdsb2JhbCBzZWFyY2gsIG9yIGNvbHVtbiBmaWx0ZXJzKSBpcyBhbHRlcmVkLlxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI3NlYXJjaC5kdFxuXHQgKiAgQGV2ZW50XG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cblx0ICovXG5cblx0LyoqXG5cdCAqIFBhZ2UgY2hhbmdlIGV2ZW50LCBmaXJlZCB3aGVuIHRoZSBwYWdpbmcgb2YgdGhlIHRhYmxlIGlzIGFsdGVyZWQuXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjcGFnZS5kdFxuXHQgKiAgQGV2ZW50XG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cblx0ICovXG5cblx0LyoqXG5cdCAqIE9yZGVyIGV2ZW50LCBmaXJlZCB3aGVuIHRoZSBvcmRlcmluZyBhcHBsaWVkIHRvIHRoZSB0YWJsZSBpcyBhbHRlcmVkLlxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI29yZGVyLmR0XG5cdCAqICBAZXZlbnRcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG8gRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Qge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfVxuXHQgKi9cblxuXHQvKipcblx0ICogRGF0YVRhYmxlcyBpbml0aWFsaXNhdGlvbiBjb21wbGV0ZSBldmVudCwgZmlyZWQgd2hlbiB0aGUgdGFibGUgaXMgZnVsbHlcblx0ICogZHJhd24sIGluY2x1ZGluZyBBamF4IGRhdGEgbG9hZGVkLCBpZiBBamF4IGRhdGEgaXMgcmVxdWlyZWQuXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjaW5pdC5kdFxuXHQgKiAgQGV2ZW50XG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBqc29uIFRoZSBKU09OIG9iamVjdCByZXF1ZXN0IGZyb20gdGhlIHNlcnZlciAtIG9ubHlcblx0ICogICAgcHJlc2VudCBpZiBjbGllbnQtc2lkZSBBamF4IHNvdXJjZWQgZGF0YSBpcyB1c2VkPC9saT48L29sPlxuXHQgKi9cblxuXHQvKipcblx0ICogU3RhdGUgc2F2ZSBldmVudCwgZmlyZWQgd2hlbiB0aGUgdGFibGUgaGFzIGNoYW5nZWQgc3RhdGUgYSBuZXcgc3RhdGUgc2F2ZVxuXHQgKiBpcyByZXF1aXJlZC4gVGhpcyBldmVudCBhbGxvd3MgbW9kaWZpY2F0aW9uIG9mIHRoZSBzdGF0ZSBzYXZpbmcgb2JqZWN0XG5cdCAqIHByaW9yIHRvIGFjdHVhbGx5IGRvaW5nIHRoZSBzYXZlLCBpbmNsdWRpbmcgYWRkaXRpb24gb3Igb3RoZXIgc3RhdGVcblx0ICogcHJvcGVydGllcyAoZm9yIHBsdWctaW5zKSBvciBtb2RpZmljYXRpb24gb2YgYSBEYXRhVGFibGVzIGNvcmUgcHJvcGVydHkuXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjc3RhdGVTYXZlUGFyYW1zLmR0XG5cdCAqICBAZXZlbnRcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IGpzb24gVGhlIHN0YXRlIGluZm9ybWF0aW9uIHRvIGJlIHNhdmVkXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBTdGF0ZSBsb2FkIGV2ZW50LCBmaXJlZCB3aGVuIHRoZSB0YWJsZSBpcyBsb2FkaW5nIHN0YXRlIGZyb20gdGhlIHN0b3JlZFxuXHQgKiBkYXRhLCBidXQgcHJpb3IgdG8gdGhlIHNldHRpbmdzIG9iamVjdCBiZWluZyBtb2RpZmllZCBieSB0aGUgc2F2ZWQgc3RhdGVcblx0ICogLSBhbGxvd2luZyBtb2RpZmljYXRpb24gb2YgdGhlIHNhdmVkIHN0YXRlIGlzIHJlcXVpcmVkIG9yIGxvYWRpbmcgb2Zcblx0ICogc3RhdGUgZm9yIGEgcGx1Zy1pbi5cblx0ICogIEBuYW1lIERhdGFUYWJsZSNzdGF0ZUxvYWRQYXJhbXMuZHRcblx0ICogIEBldmVudFxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0ganNvbiBUaGUgc2F2ZWQgc3RhdGUgaW5mb3JtYXRpb25cblx0ICovXG5cblx0LyoqXG5cdCAqIFN0YXRlIGxvYWRlZCBldmVudCwgZmlyZWQgd2hlbiBzdGF0ZSBoYXMgYmVlbiBsb2FkZWQgZnJvbSBzdG9yZWQgZGF0YSBhbmRcblx0ICogdGhlIHNldHRpbmdzIG9iamVjdCBoYXMgYmVlbiBtb2RpZmllZCBieSB0aGUgbG9hZGVkIGRhdGEuXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjc3RhdGVMb2FkZWQuZHRcblx0ICogIEBldmVudFxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0ganNvbiBUaGUgc2F2ZWQgc3RhdGUgaW5mb3JtYXRpb25cblx0ICovXG5cblx0LyoqXG5cdCAqIFByb2Nlc3NpbmcgZXZlbnQsIGZpcmVkIHdoZW4gRGF0YVRhYmxlcyBpcyBkb2luZyBzb21lIGtpbmQgb2YgcHJvY2Vzc2luZ1xuXHQgKiAoYmUgaXQsIG9yZGVyLCBzZWFyY2cgb3IgYW55dGhpbmcgZWxzZSkuIEl0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRvXG5cdCAqIHRoZSBlbmQgdXNlciB0aGF0IHRoZXJlIGlzIHNvbWV0aGluZyBoYXBwZW5pbmcsIG9yIHRoYXQgc29tZXRoaW5nIGhhc1xuXHQgKiBmaW5pc2hlZC5cblx0ICogIEBuYW1lIERhdGFUYWJsZSNwcm9jZXNzaW5nLmR0XG5cdCAqICBAZXZlbnRcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxuXHQgKiAgQHBhcmFtIHtib29sZWFufSBiU2hvdyBGbGFnIGZvciBpZiBEYXRhVGFibGVzIGlzIGRvaW5nIHByb2Nlc3Npbmcgb3Igbm90XG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBBamF4IChYSFIpIGV2ZW50LCBmaXJlZCB3aGVuZXZlciBhbiBBamF4IHJlcXVlc3QgaXMgY29tcGxldGVkIGZyb20gYVxuXHQgKiByZXF1ZXN0IHRvIG1hZGUgdG8gdGhlIHNlcnZlciBmb3IgbmV3IGRhdGEuIFRoaXMgZXZlbnQgaXMgY2FsbGVkIGJlZm9yZVxuXHQgKiBEYXRhVGFibGVzIHByb2Nlc3NlZCB0aGUgcmV0dXJuZWQgZGF0YSwgc28gaXQgY2FuIGFsc28gYmUgdXNlZCB0byBwcmUtXG5cdCAqIHByb2Nlc3MgdGhlIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyLCBpZiBuZWVkZWQuXG5cdCAqXG5cdCAqIE5vdGUgdGhhdCB0aGlzIHRyaWdnZXIgaXMgY2FsbGVkIGluIGBmblNlcnZlckRhdGFgLCBpZiB5b3Ugb3ZlcnJpZGVcblx0ICogYGZuU2VydmVyRGF0YWAgYW5kIHdoaWNoIHRvIHVzZSB0aGlzIGV2ZW50LCB5b3UgbmVlZCB0byB0cmlnZ2VyIGl0IGluIHlvdVxuXHQgKiBzdWNjZXNzIGZ1bmN0aW9uLlxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI3hoci5kdFxuXHQgKiAgQGV2ZW50XG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cblx0ICogIEBwYXJhbSB7b2JqZWN0fSBqc29uIEpTT04gcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyXG5cdCAqXG5cdCAqICBAZXhhbXBsZVxuXHQgKiAgICAgLy8gVXNlIGEgY3VzdG9tIHByb3BlcnR5IHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBpbiBhbm90aGVyIERPTSBlbGVtZW50XG5cdCAqICAgICAkKCcjdGFibGUnKS5kYXRhVGFibGUoKS5vbigneGhyLmR0JywgZnVuY3Rpb24gKGUsIHNldHRpbmdzLCBqc29uKSB7XG5cdCAqICAgICAgICQoJyNzdGF0dXMnKS5odG1sKCBqc29uLnN0YXR1cyApO1xuXHQgKiAgICAgfSApO1xuXHQgKlxuXHQgKiAgQGV4YW1wbGVcblx0ICogICAgIC8vIFByZS1wcm9jZXNzIHRoZSBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlclxuXHQgKiAgICAgJCgnI3RhYmxlJykuZGF0YVRhYmxlKCkub24oJ3hoci5kdCcsIGZ1bmN0aW9uIChlLCBzZXR0aW5ncywganNvbikge1xuXHQgKiAgICAgICBmb3IgKCB2YXIgaT0wLCBpZW49anNvbi5hYURhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XG5cdCAqICAgICAgICAganNvbi5hYURhdGFbaV0uc3VtID0ganNvbi5hYURhdGFbaV0ub25lICsganNvbi5hYURhdGFbaV0udHdvO1xuXHQgKiAgICAgICB9XG5cdCAqICAgICAgIC8vIE5vdGUgbm8gcmV0dXJuIC0gbWFuaXB1bGF0ZSB0aGUgZGF0YSBkaXJlY3RseSBpbiB0aGUgSlNPTiBvYmplY3QuXG5cdCAqICAgICB9ICk7XG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95IGV2ZW50LCBmaXJlZCB3aGVuIHRoZSBEYXRhVGFibGUgaXMgZGVzdHJveWVkIGJ5IGNhbGxpbmcgZm5EZXN0cm95XG5cdCAqIG9yIHBhc3NpbmcgdGhlIGJEZXN0cm95OnRydWUgcGFyYW1ldGVyIGluIHRoZSBpbml0aWFsaXNhdGlvbiBvYmplY3QuIFRoaXNcblx0ICogY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGJvdW5kIGV2ZW50cywgYWRkZWQgRE9NIG5vZGVzLCBldGMuXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjZGVzdHJveS5kdFxuXHQgKiAgQGV2ZW50XG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cblx0ICovXG5cblx0LyoqXG5cdCAqIFBhZ2UgbGVuZ3RoIGNoYW5nZSBldmVudCwgZmlyZWQgd2hlbiBudW1iZXIgb2YgcmVjb3JkcyB0byBzaG93IG9uIGVhY2hcblx0ICogcGFnZSAodGhlIGxlbmd0aCkgaXMgY2hhbmdlZC5cblx0ICogIEBuYW1lIERhdGFUYWJsZSNsZW5ndGguZHRcblx0ICogIEBldmVudFxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gbyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdCB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XG5cdCAqICBAcGFyYW0ge2ludGVnZXJ9IGxlbiBOZXcgbGVuZ3RoXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDb2x1bW4gc2l6aW5nIGhhcyBjaGFuZ2VkLlxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI2NvbHVtbi1zaXppbmcuZHRcblx0ICogIEBldmVudFxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XG5cdCAqICBAcGFyYW0ge29iamVjdH0gbyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdCB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDb2x1bW4gdmlzaWJpbGl0eSBoYXMgY2hhbmdlZC5cblx0ICogIEBuYW1lIERhdGFUYWJsZSNjb2x1bW4tdmlzaWJpbGl0eS5kdFxuXHQgKiAgQGV2ZW50XG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3Rcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cblx0ICogIEBwYXJhbSB7aW50fSBjb2x1bW4gQ29sdW1uIGluZGV4XG5cdCAqICBAcGFyYW0ge2Jvb2x9IHZpcyBgZmFsc2VgIGlmIGNvbHVtbiBub3cgaGlkZGVuLCBvciBgdHJ1ZWAgaWYgdmlzaWJsZVxuXHQgKi9cblxuXHRyZXR1cm4gJC5mbi5kYXRhVGFibGU7XG59KSk7XG4vKiFcbiAqIFNlbGVjdDIgNC4wLjFcbiAqIGh0dHBzOi8vc2VsZWN0Mi5naXRodWIuaW9cbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxlY3QyL3NlbGVjdDIvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gTm9kZS9Db21tb25KU1xuICAgIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufShmdW5jdGlvbiAoalF1ZXJ5KSB7XG4gIC8vIFRoaXMgaXMgbmVlZGVkIHNvIHdlIGNhbiBjYXRjaCB0aGUgQU1EIGxvYWRlciBjb25maWd1cmF0aW9uIGFuZCB1c2UgaXRcbiAgLy8gVGhlIGlubmVyIGZpbGUgc2hvdWxkIGJlIHdyYXBwZWQgKGJ5IGBiYW5uZXIuc3RhcnQuanNgKSBpbiBhIGZ1bmN0aW9uIHRoYXRcbiAgLy8gcmV0dXJucyB0aGUgQU1EIGxvYWRlciByZWZlcmVuY2VzLlxuICB2YXIgUzIgPVxuKGZ1bmN0aW9uICgpIHtcbiAgLy8gUmVzdG9yZSB0aGUgU2VsZWN0MiBBTUQgbG9hZGVyIHNvIGl0IGNhbiBiZSB1c2VkXG4gIC8vIE5lZWRlZCBtb3N0bHkgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLCB3aGVyZSB0aGUgbG9hZGVyIGlzIG5vdCBpbnNlcnRlZFxuICBpZiAoalF1ZXJ5ICYmIGpRdWVyeS5mbiAmJiBqUXVlcnkuZm4uc2VsZWN0MiAmJiBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQpIHtcbiAgICB2YXIgUzIgPSBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQ7XG4gIH1cbnZhciBTMjsoZnVuY3Rpb24gKCkgeyBpZiAoIVMyIHx8ICFTMi5yZXF1aXJlanMpIHtcbmlmICghUzIpIHsgUzIgPSB7fTsgfSBlbHNlIHsgcmVxdWlyZSA9IFMyOyB9XG4vKipcbiAqIEBsaWNlbnNlIGFsbW9uZCAwLjMuMSBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNCwgVGhlIERvam8gRm91bmRhdGlvbiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogQXZhaWxhYmxlIHZpYSB0aGUgTUlUIG9yIG5ldyBCU0QgbGljZW5zZS5cbiAqIHNlZTogaHR0cDovL2dpdGh1Yi5jb20vanJidXJrZS9hbG1vbmQgZm9yIGRldGFpbHNcbiAqL1xuLy9Hb2luZyBzbG9wcHkgdG8gYXZvaWQgJ3VzZSBzdHJpY3QnIHN0cmluZyBjb3N0LCBidXQgc3RyaWN0IHByYWN0aWNlcyBzaG91bGRcbi8vYmUgZm9sbG93ZWQuXG4vKmpzbGludCBzbG9wcHk6IHRydWUgKi9cbi8qZ2xvYmFsIHNldFRpbWVvdXQ6IGZhbHNlICovXG5cbnZhciByZXF1aXJlanMsIHJlcXVpcmUsIGRlZmluZTtcbihmdW5jdGlvbiAodW5kZWYpIHtcbiAgICB2YXIgbWFpbiwgcmVxLCBtYWtlTWFwLCBoYW5kbGVycyxcbiAgICAgICAgZGVmaW5lZCA9IHt9LFxuICAgICAgICB3YWl0aW5nID0ge30sXG4gICAgICAgIGNvbmZpZyA9IHt9LFxuICAgICAgICBkZWZpbmluZyA9IHt9LFxuICAgICAgICBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICAgICAgICBhcHMgPSBbXS5zbGljZSxcbiAgICAgICAganNTdWZmaXhSZWdFeHAgPSAvXFwuanMkLztcblxuICAgIGZ1bmN0aW9uIGhhc1Byb3Aob2JqLCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBoYXNPd24uY2FsbChvYmosIHByb3ApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcmVsYXRpdmUgbW9kdWxlIG5hbWUsIGxpa2UgLi9zb21ldGhpbmcsIG5vcm1hbGl6ZSBpdCB0b1xuICAgICAqIGEgcmVhbCBuYW1lIHRoYXQgY2FuIGJlIG1hcHBlZCB0byBhIHBhdGguXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIHJlbGF0aXZlIG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYmFzZU5hbWUgYSByZWFsIG5hbWUgdGhhdCB0aGUgbmFtZSBhcmcgaXMgcmVsYXRpdmVcbiAgICAgKiB0by5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBub3JtYWxpemVkIG5hbWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub3JtYWxpemUobmFtZSwgYmFzZU5hbWUpIHtcbiAgICAgICAgdmFyIG5hbWVQYXJ0cywgbmFtZVNlZ21lbnQsIG1hcFZhbHVlLCBmb3VuZE1hcCwgbGFzdEluZGV4LFxuICAgICAgICAgICAgZm91bmRJLCBmb3VuZFN0YXJNYXAsIHN0YXJJLCBpLCBqLCBwYXJ0LFxuICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZU5hbWUgJiYgYmFzZU5hbWUuc3BsaXQoXCIvXCIpLFxuICAgICAgICAgICAgbWFwID0gY29uZmlnLm1hcCxcbiAgICAgICAgICAgIHN0YXJNYXAgPSAobWFwICYmIG1hcFsnKiddKSB8fCB7fTtcblxuICAgICAgICAvL0FkanVzdCBhbnkgcmVsYXRpdmUgcGF0aHMuXG4gICAgICAgIGlmIChuYW1lICYmIG5hbWUuY2hhckF0KDApID09PSBcIi5cIikge1xuICAgICAgICAgICAgLy9JZiBoYXZlIGEgYmFzZSBuYW1lLCB0cnkgdG8gbm9ybWFsaXplIGFnYWluc3QgaXQsXG4gICAgICAgICAgICAvL290aGVyd2lzZSwgYXNzdW1lIGl0IGlzIGEgdG9wLWxldmVsIHJlcXVpcmUgdGhhdCB3aWxsXG4gICAgICAgICAgICAvL2JlIHJlbGF0aXZlIHRvIGJhc2VVcmwgaW4gdGhlIGVuZC5cbiAgICAgICAgICAgIGlmIChiYXNlTmFtZSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gbmFtZS5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgLy8gTm9kZSAuanMgYWxsb3dhbmNlOlxuICAgICAgICAgICAgICAgIGlmIChjb25maWcubm9kZUlkQ29tcGF0ICYmIGpzU3VmZml4UmVnRXhwLnRlc3QobmFtZVtsYXN0SW5kZXhdKSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lW2xhc3RJbmRleF0gPSBuYW1lW2xhc3RJbmRleF0ucmVwbGFjZShqc1N1ZmZpeFJlZ0V4cCwgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vTG9wIG9mZiB0aGUgbGFzdCBwYXJ0IG9mIGJhc2VQYXJ0cywgc28gdGhhdCAuIG1hdGNoZXMgdGhlXG4gICAgICAgICAgICAgICAgLy9cImRpcmVjdG9yeVwiIGFuZCBub3QgbmFtZSBvZiB0aGUgYmFzZU5hbWUncyBtb2R1bGUuIEZvciBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAvL2Jhc2VOYW1lIG9mIFwib25lL3R3by90aHJlZVwiLCBtYXBzIHRvIFwib25lL3R3by90aHJlZS5qc1wiLCBidXQgd2VcbiAgICAgICAgICAgICAgICAvL3dhbnQgdGhlIGRpcmVjdG9yeSwgXCJvbmUvdHdvXCIgZm9yIHRoaXMgbm9ybWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgICBuYW1lID0gYmFzZVBhcnRzLnNsaWNlKDAsIGJhc2VQYXJ0cy5sZW5ndGggLSAxKS5jb25jYXQobmFtZSk7XG5cbiAgICAgICAgICAgICAgICAvL3N0YXJ0IHRyaW1Eb3RzXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydCA9IG5hbWVbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09PSBcIi5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gXCIuLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMSAmJiAobmFtZVsyXSA9PT0gJy4uJyB8fCBuYW1lWzBdID09PSAnLi4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRW5kIG9mIHRoZSBsaW5lLiBLZWVwIGF0IGxlYXN0IG9uZSBub24tZG90XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wYXRoIHNlZ21lbnQgYXQgdGhlIGZyb250IHNvIGl0IGNhbiBiZSBtYXBwZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3RseSB0byBkaXNrLiBPdGhlcndpc2UsIHRoZXJlIGlzIGxpa2VseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm8gcGF0aCBtYXBwaW5nIGZvciBhIHBhdGggc3RhcnRpbmcgd2l0aCAnLi4nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVGhpcyBjYW4gc3RpbGwgZmFpbCwgYnV0IGNhdGNoZXMgdGhlIG1vc3QgcmVhc29uYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXNlcyBvZiAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc3BsaWNlKGkgLSAxLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpIC09IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9lbmQgdHJpbURvdHNcblxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lLmluZGV4T2YoJy4vJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBObyBiYXNlTmFtZSwgc28gdGhpcyBpcyBJRCBpcyByZXNvbHZlZCByZWxhdGl2ZVxuICAgICAgICAgICAgICAgIC8vIHRvIGJhc2VVcmwsIHB1bGwgb2ZmIHRoZSBsZWFkaW5nIGRvdC5cbiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL0FwcGx5IG1hcCBjb25maWcgaWYgYXZhaWxhYmxlLlxuICAgICAgICBpZiAoKGJhc2VQYXJ0cyB8fCBzdGFyTWFwKSAmJiBtYXApIHtcbiAgICAgICAgICAgIG5hbWVQYXJ0cyA9IG5hbWUuc3BsaXQoJy8nKTtcblxuICAgICAgICAgICAgZm9yIChpID0gbmFtZVBhcnRzLmxlbmd0aDsgaSA+IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgIG5hbWVTZWdtZW50ID0gbmFtZVBhcnRzLnNsaWNlKDAsIGkpLmpvaW4oXCIvXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJhc2VQYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICAvL0ZpbmQgdGhlIGxvbmdlc3QgYmFzZU5hbWUgc2VnbWVudCBtYXRjaCBpbiB0aGUgY29uZmlnLlxuICAgICAgICAgICAgICAgICAgICAvL1NvLCBkbyBqb2lucyBvbiB0aGUgYmlnZ2VzdCB0byBzbWFsbGVzdCBsZW5ndGhzIG9mIGJhc2VQYXJ0cy5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gYmFzZVBhcnRzLmxlbmd0aDsgaiA+IDA7IGogLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwVmFsdWUgPSBtYXBbYmFzZVBhcnRzLnNsaWNlKDAsIGopLmpvaW4oJy8nKV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYmFzZU5hbWUgc2VnbWVudCBoYXMgIGNvbmZpZywgZmluZCBpZiBpdCBoYXMgb25lIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIG5hbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZSA9IG1hcFZhbHVlW25hbWVTZWdtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9NYXRjaCwgdXBkYXRlIG5hbWUgdG8gdGhlIG5ldyB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRNYXAgPSBtYXBWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRJID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vQ2hlY2sgZm9yIGEgc3RhciBtYXAgbWF0Y2gsIGJ1dCBqdXN0IGhvbGQgb24gdG8gaXQsXG4gICAgICAgICAgICAgICAgLy9pZiB0aGVyZSBpcyBhIHNob3J0ZXIgc2VnbWVudCBtYXRjaCBsYXRlciBpbiBhIG1hdGNoaW5nXG4gICAgICAgICAgICAgICAgLy9jb25maWcsIHRoZW4gZmF2b3Igb3ZlciB0aGlzIHN0YXIgbWFwLlxuICAgICAgICAgICAgICAgIGlmICghZm91bmRTdGFyTWFwICYmIHN0YXJNYXAgJiYgc3Rhck1hcFtuYW1lU2VnbWVudF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRTdGFyTWFwID0gc3Rhck1hcFtuYW1lU2VnbWVudF07XG4gICAgICAgICAgICAgICAgICAgIHN0YXJJID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZm91bmRNYXAgJiYgZm91bmRTdGFyTWFwKSB7XG4gICAgICAgICAgICAgICAgZm91bmRNYXAgPSBmb3VuZFN0YXJNYXA7XG4gICAgICAgICAgICAgICAgZm91bmRJID0gc3Rhckk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3VuZE1hcCkge1xuICAgICAgICAgICAgICAgIG5hbWVQYXJ0cy5zcGxpY2UoMCwgZm91bmRJLCBmb3VuZE1hcCk7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWVQYXJ0cy5qb2luKCcvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlUmVxdWlyZShyZWxOYW1lLCBmb3JjZVN5bmMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vQSB2ZXJzaW9uIG9mIGEgcmVxdWlyZSBmdW5jdGlvbiB0aGF0IHBhc3NlcyBhIG1vZHVsZU5hbWVcbiAgICAgICAgICAgIC8vdmFsdWUgZm9yIGl0ZW1zIHRoYXQgbWF5IG5lZWQgdG9cbiAgICAgICAgICAgIC8vbG9vayB1cCBwYXRocyByZWxhdGl2ZSB0byB0aGUgbW9kdWxlTmFtZVxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcHMuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgICAgICAvL0lmIGZpcnN0IGFyZyBpcyBub3QgcmVxdWlyZSgnc3RyaW5nJyksIGFuZCB0aGVyZSBpcyBvbmx5XG4gICAgICAgICAgICAvL29uZSBhcmcsIGl0IGlzIHRoZSBhcnJheSBmb3JtIHdpdGhvdXQgYSBjYWxsYmFjay4gSW5zZXJ0XG4gICAgICAgICAgICAvL2EgbnVsbCBzbyB0aGF0IHRoZSBmb2xsb3dpbmcgY29uY2F0IGlzIGNvcnJlY3QuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnICYmIGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcS5hcHBseSh1bmRlZiwgYXJncy5jb25jYXQoW3JlbE5hbWUsIGZvcmNlU3luY10pKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlTm9ybWFsaXplKHJlbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKG5hbWUsIHJlbE5hbWUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VMb2FkKGRlcE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgZGVmaW5lZFtkZXBOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxEZXAobmFtZSkge1xuICAgICAgICBpZiAoaGFzUHJvcCh3YWl0aW5nLCBuYW1lKSkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSB3YWl0aW5nW25hbWVdO1xuICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdbbmFtZV07XG4gICAgICAgICAgICBkZWZpbmluZ1tuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICBtYWluLmFwcGx5KHVuZGVmLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzUHJvcChkZWZpbmVkLCBuYW1lKSAmJiAhaGFzUHJvcChkZWZpbmluZywgbmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gJyArIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZpbmVkW25hbWVdO1xuICAgIH1cblxuICAgIC8vVHVybnMgYSBwbHVnaW4hcmVzb3VyY2UgdG8gW3BsdWdpbiwgcmVzb3VyY2VdXG4gICAgLy93aXRoIHRoZSBwbHVnaW4gYmVpbmcgdW5kZWZpbmVkIGlmIHRoZSBuYW1lXG4gICAgLy9kaWQgbm90IGhhdmUgYSBwbHVnaW4gcHJlZml4LlxuICAgIGZ1bmN0aW9uIHNwbGl0UHJlZml4KG5hbWUpIHtcbiAgICAgICAgdmFyIHByZWZpeCxcbiAgICAgICAgICAgIGluZGV4ID0gbmFtZSA/IG5hbWUuaW5kZXhPZignIScpIDogLTE7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBwcmVmaXggPSBuYW1lLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoaW5kZXggKyAxLCBuYW1lLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtwcmVmaXgsIG5hbWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGEgbmFtZSBtYXAsIG5vcm1hbGl6aW5nIHRoZSBuYW1lLCBhbmQgdXNpbmcgYSBwbHVnaW5cbiAgICAgKiBmb3Igbm9ybWFsaXphdGlvbiBpZiBuZWNlc3NhcnkuIEdyYWJzIGEgcmVmIHRvIHBsdWdpblxuICAgICAqIHRvbywgYXMgYW4gb3B0aW1pemF0aW9uLlxuICAgICAqL1xuICAgIG1ha2VNYXAgPSBmdW5jdGlvbiAobmFtZSwgcmVsTmFtZSkge1xuICAgICAgICB2YXIgcGx1Z2luLFxuICAgICAgICAgICAgcGFydHMgPSBzcGxpdFByZWZpeChuYW1lKSxcbiAgICAgICAgICAgIHByZWZpeCA9IHBhcnRzWzBdO1xuXG4gICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcblxuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICBwcmVmaXggPSBub3JtYWxpemUocHJlZml4LCByZWxOYW1lKTtcbiAgICAgICAgICAgIHBsdWdpbiA9IGNhbGxEZXAocHJlZml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vTm9ybWFsaXplIGFjY29yZGluZ1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5ub3JtYWxpemUpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gcGx1Z2luLm5vcm1hbGl6ZShuYW1lLCBtYWtlTm9ybWFsaXplKHJlbE5hbWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZShuYW1lLCByZWxOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7XG4gICAgICAgICAgICBwYXJ0cyA9IHNwbGl0UHJlZml4KG5hbWUpO1xuICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF07XG4gICAgICAgICAgICBuYW1lID0gcGFydHNbMV07XG4gICAgICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9Vc2luZyByaWRpY3Vsb3VzIHByb3BlcnR5IG5hbWVzIGZvciBzcGFjZSByZWFzb25zXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmOiBwcmVmaXggPyBwcmVmaXggKyAnIScgKyBuYW1lIDogbmFtZSwgLy9mdWxsTmFtZVxuICAgICAgICAgICAgbjogbmFtZSxcbiAgICAgICAgICAgIHByOiBwcmVmaXgsXG4gICAgICAgICAgICBwOiBwbHVnaW5cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWFrZUNvbmZpZyhuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKGNvbmZpZyAmJiBjb25maWcuY29uZmlnICYmIGNvbmZpZy5jb25maWdbbmFtZV0pIHx8IHt9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGhhbmRsZXJzID0ge1xuICAgICAgICByZXF1aXJlOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VSZXF1aXJlKG5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBleHBvcnRzOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdmFyIGUgPSBkZWZpbmVkW25hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRlZmluZWRbbmFtZV0gPSB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vZHVsZTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IG5hbWUsXG4gICAgICAgICAgICAgICAgdXJpOiAnJyxcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBkZWZpbmVkW25hbWVdLFxuICAgICAgICAgICAgICAgIGNvbmZpZzogbWFrZUNvbmZpZyhuYW1lKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBtYWluID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKSB7XG4gICAgICAgIHZhciBjanNNb2R1bGUsIGRlcE5hbWUsIHJldCwgbWFwLCBpLFxuICAgICAgICAgICAgYXJncyA9IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tUeXBlID0gdHlwZW9mIGNhbGxiYWNrLFxuICAgICAgICAgICAgdXNpbmdFeHBvcnRzO1xuXG4gICAgICAgIC8vVXNlIG5hbWUgaWYgbm8gcmVsTmFtZVxuICAgICAgICByZWxOYW1lID0gcmVsTmFtZSB8fCBuYW1lO1xuXG4gICAgICAgIC8vQ2FsbCB0aGUgY2FsbGJhY2sgdG8gZGVmaW5lIHRoZSBtb2R1bGUsIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgaWYgKGNhbGxiYWNrVHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgY2FsbGJhY2tUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvL1B1bGwgb3V0IHRoZSBkZWZpbmVkIGRlcGVuZGVuY2llcyBhbmQgcGFzcyB0aGUgb3JkZXJlZFxuICAgICAgICAgICAgLy92YWx1ZXMgdG8gdGhlIGNhbGxiYWNrLlxuICAgICAgICAgICAgLy9EZWZhdWx0IHRvIFtyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGVdIGlmIG5vIGRlcHNcbiAgICAgICAgICAgIGRlcHMgPSAhZGVwcy5sZW5ndGggJiYgY2FsbGJhY2subGVuZ3RoID8gWydyZXF1aXJlJywgJ2V4cG9ydHMnLCAnbW9kdWxlJ10gOiBkZXBzO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtYXAgPSBtYWtlTWFwKGRlcHNbaV0sIHJlbE5hbWUpO1xuICAgICAgICAgICAgICAgIGRlcE5hbWUgPSBtYXAuZjtcblxuICAgICAgICAgICAgICAgIC8vRmFzdCBwYXRoIENvbW1vbkpTIHN0YW5kYXJkIGRlcGVuZGVuY2llcy5cbiAgICAgICAgICAgICAgICBpZiAoZGVwTmFtZSA9PT0gXCJyZXF1aXJlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGhhbmRsZXJzLnJlcXVpcmUobmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXBOYW1lID09PSBcImV4cG9ydHNcIikge1xuICAgICAgICAgICAgICAgICAgICAvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMVxuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gaGFuZGxlcnMuZXhwb3J0cyhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdXNpbmdFeHBvcnRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09IFwibW9kdWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9Db21tb25KUyBtb2R1bGUgc3BlYyAxLjFcbiAgICAgICAgICAgICAgICAgICAgY2pzTW9kdWxlID0gYXJnc1tpXSA9IGhhbmRsZXJzLm1vZHVsZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc1Byb3AoZGVmaW5lZCwgZGVwTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Byb3Aod2FpdGluZywgZGVwTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Byb3AoZGVmaW5pbmcsIGRlcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBjYWxsRGVwKGRlcE5hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwLnApIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLnAubG9hZChtYXAubiwgbWFrZVJlcXVpcmUocmVsTmFtZSwgdHJ1ZSksIG1ha2VMb2FkKGRlcE5hbWUpLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBkZWZpbmVkW2RlcE5hbWVdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihuYW1lICsgJyBtaXNzaW5nICcgKyBkZXBOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldCA9IGNhbGxiYWNrID8gY2FsbGJhY2suYXBwbHkoZGVmaW5lZFtuYW1lXSwgYXJncykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgLy9JZiBzZXR0aW5nIGV4cG9ydHMgdmlhIFwibW9kdWxlXCIgaXMgaW4gcGxheSxcbiAgICAgICAgICAgICAgICAvL2Zhdm9yIHRoYXQgb3ZlciByZXR1cm4gdmFsdWUgYW5kIGV4cG9ydHMuIEFmdGVyIHRoYXQsXG4gICAgICAgICAgICAgICAgLy9mYXZvciBhIG5vbi11bmRlZmluZWQgcmV0dXJuIHZhbHVlIG92ZXIgZXhwb3J0cyB1c2UuXG4gICAgICAgICAgICAgICAgaWYgKGNqc01vZHVsZSAmJiBjanNNb2R1bGUuZXhwb3J0cyAhPT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZS5leHBvcnRzICE9PSBkZWZpbmVkW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSBjanNNb2R1bGUuZXhwb3J0cztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJldCAhPT0gdW5kZWYgfHwgIXVzaW5nRXhwb3J0cykge1xuICAgICAgICAgICAgICAgICAgICAvL1VzZSB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBkZWZpbmVkW25hbWVdID0gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAvL01heSBqdXN0IGJlIGFuIG9iamVjdCBkZWZpbml0aW9uIGZvciB0aGUgbW9kdWxlLiBPbmx5XG4gICAgICAgICAgICAvL3dvcnJ5IGFib3V0IGRlZmluaW5nIGlmIGhhdmUgYSBtb2R1bGUgbmFtZS5cbiAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSBjYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXF1aXJlanMgPSByZXF1aXJlID0gcmVxID0gZnVuY3Rpb24gKGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lLCBmb3JjZVN5bmMsIGFsdCkge1xuICAgICAgICBpZiAodHlwZW9mIGRlcHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyc1tkZXBzXSkge1xuICAgICAgICAgICAgICAgIC8vY2FsbGJhY2sgaW4gdGhpcyBjYXNlIGlzIHJlYWxseSByZWxOYW1lXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJzW2RlcHNdKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vSnVzdCByZXR1cm4gdGhlIG1vZHVsZSB3YW50ZWQuIEluIHRoaXMgc2NlbmFyaW8sIHRoZVxuICAgICAgICAgICAgLy9kZXBzIGFyZyBpcyB0aGUgbW9kdWxlIG5hbWUsIGFuZCBzZWNvbmQgYXJnIChpZiBwYXNzZWQpXG4gICAgICAgICAgICAvL2lzIGp1c3QgdGhlIHJlbE5hbWUuXG4gICAgICAgICAgICAvL05vcm1hbGl6ZSBtb2R1bGUgbmFtZSwgaWYgaXQgY29udGFpbnMgLiBvciAuLlxuICAgICAgICAgICAgcmV0dXJuIGNhbGxEZXAobWFrZU1hcChkZXBzLCBjYWxsYmFjaykuZik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWRlcHMuc3BsaWNlKSB7XG4gICAgICAgICAgICAvL2RlcHMgaXMgYSBjb25maWcgb2JqZWN0LCBub3QgYW4gYXJyYXkuXG4gICAgICAgICAgICBjb25maWcgPSBkZXBzO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kZXBzKSB7XG4gICAgICAgICAgICAgICAgcmVxKGNvbmZpZy5kZXBzLCBjb25maWcuY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLnNwbGljZSkge1xuICAgICAgICAgICAgICAgIC8vY2FsbGJhY2sgaXMgYW4gYXJyYXksIHdoaWNoIG1lYW5zIGl0IGlzIGEgZGVwZW5kZW5jeSBsaXN0LlxuICAgICAgICAgICAgICAgIC8vQWRqdXN0IGFyZ3MgaWYgdGhlcmUgYXJlIGRlcGVuZGVuY2llc1xuICAgICAgICAgICAgICAgIGRlcHMgPSBjYWxsYmFjaztcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHJlbE5hbWU7XG4gICAgICAgICAgICAgICAgcmVsTmFtZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlcHMgPSB1bmRlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vU3VwcG9ydCByZXF1aXJlKFsnYSddKVxuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIC8vSWYgcmVsTmFtZSBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBhbiBlcnJiYWNrIGhhbmRsZXIsXG4gICAgICAgIC8vc28gcmVtb3ZlIGl0LlxuICAgICAgICBpZiAodHlwZW9mIHJlbE5hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlbE5hbWUgPSBmb3JjZVN5bmM7XG4gICAgICAgICAgICBmb3JjZVN5bmMgPSBhbHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvL1NpbXVsYXRlIGFzeW5jIGNhbGxiYWNrO1xuICAgICAgICBpZiAoZm9yY2VTeW5jKSB7XG4gICAgICAgICAgICBtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL1VzaW5nIGEgbm9uLXplcm8gdmFsdWUgYmVjYXVzZSBvZiBjb25jZXJuIGZvciB3aGF0IG9sZCBicm93c2Vyc1xuICAgICAgICAgICAgLy9kbywgYW5kIGxhdGVzdCBicm93c2VycyBcInVwZ3JhZGVcIiB0byA0IGlmIGxvd2VyIHZhbHVlIGlzIHVzZWQ6XG4gICAgICAgICAgICAvL2h0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RpbWVycy5odG1sI2RvbS13aW5kb3d0aW1lcnMtc2V0dGltZW91dDpcbiAgICAgICAgICAgIC8vSWYgd2FudCBhIHZhbHVlIGltbWVkaWF0ZWx5LCB1c2UgcmVxdWlyZSgnaWQnKSBpbnN0ZWFkIC0tIHNvbWV0aGluZ1xuICAgICAgICAgICAgLy90aGF0IHdvcmtzIGluIGFsbW9uZCBvbiB0aGUgZ2xvYmFsIGxldmVsLCBidXQgbm90IGd1YXJhbnRlZWQgYW5kXG4gICAgICAgICAgICAvL3VubGlrZWx5IHRvIHdvcmsgaW4gb3RoZXIgQU1EIGltcGxlbWVudGF0aW9ucy5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG1haW4odW5kZWYsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKTtcbiAgICAgICAgICAgIH0sIDQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSnVzdCBkcm9wcyB0aGUgY29uZmlnIG9uIHRoZSBmbG9vciwgYnV0IHJldHVybnMgcmVxIGluIGNhc2VcbiAgICAgKiB0aGUgY29uZmlnIHJldHVybiB2YWx1ZSBpcyB1c2VkLlxuICAgICAqL1xuICAgIHJlcS5jb25maWcgPSBmdW5jdGlvbiAoY2ZnKSB7XG4gICAgICAgIHJldHVybiByZXEoY2ZnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXhwb3NlIG1vZHVsZSByZWdpc3RyeSBmb3IgZGVidWdnaW5nIGFuZCB0b29saW5nXG4gICAgICovXG4gICAgcmVxdWlyZWpzLl9kZWZpbmVkID0gZGVmaW5lZDtcblxuICAgIGRlZmluZSA9IGZ1bmN0aW9uIChuYW1lLCBkZXBzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlZSBhbG1vbmQgUkVBRE1FOiBpbmNvcnJlY3QgbW9kdWxlIGJ1aWxkLCBubyBtb2R1bGUgbmFtZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9UaGlzIG1vZHVsZSBtYXkgbm90IGhhdmUgZGVwZW5kZW5jaWVzXG4gICAgICAgIGlmICghZGVwcy5zcGxpY2UpIHtcbiAgICAgICAgICAgIC8vZGVwcyBpcyBub3QgYW4gYXJyYXksIHNvIHByb2JhYmx5IG1lYW5zXG4gICAgICAgICAgICAvL2FuIG9iamVjdCBsaXRlcmFsIG9yIGZhY3RvcnkgZnVuY3Rpb24gZm9yXG4gICAgICAgICAgICAvL3RoZSB2YWx1ZS4gQWRqdXN0IGFyZ3MuXG4gICAgICAgICAgICBjYWxsYmFjayA9IGRlcHM7XG4gICAgICAgICAgICBkZXBzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhhc1Byb3AoZGVmaW5lZCwgbmFtZSkgJiYgIWhhc1Byb3Aod2FpdGluZywgbmFtZSkpIHtcbiAgICAgICAgICAgIHdhaXRpbmdbbmFtZV0gPSBbbmFtZSwgZGVwcywgY2FsbGJhY2tdO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZS5hbWQgPSB7XG4gICAgICAgIGpRdWVyeTogdHJ1ZVxuICAgIH07XG59KCkpO1xuXG5TMi5yZXF1aXJlanMgPSByZXF1aXJlanM7UzIucmVxdWlyZSA9IHJlcXVpcmU7UzIuZGVmaW5lID0gZGVmaW5lO1xufVxufSgpKTtcblMyLmRlZmluZShcImFsbW9uZFwiLCBmdW5jdGlvbigpe30pO1xuXG4vKiBnbG9iYWwgalF1ZXJ5OmZhbHNlLCAkOmZhbHNlICovXG5TMi5kZWZpbmUoJ2pxdWVyeScsW10sZnVuY3Rpb24gKCkge1xuICB2YXIgXyQgPSBqUXVlcnkgfHwgJDtcblxuICBpZiAoXyQgPT0gbnVsbCAmJiBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgJ1NlbGVjdDI6IEFuIGluc3RhbmNlIG9mIGpRdWVyeSBvciBhIGpRdWVyeS1jb21wYXRpYmxlIGxpYnJhcnkgd2FzIG5vdCAnICtcbiAgICAgICdmb3VuZC4gTWFrZSBzdXJlIHRoYXQgeW91IGFyZSBpbmNsdWRpbmcgalF1ZXJ5IGJlZm9yZSBTZWxlY3QyIG9uIHlvdXIgJyArXG4gICAgICAnd2ViIHBhZ2UuJ1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gXyQ7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3V0aWxzJyxbXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoJCkge1xuICB2YXIgVXRpbHMgPSB7fTtcblxuICBVdGlscy5FeHRlbmQgPSBmdW5jdGlvbiAoQ2hpbGRDbGFzcywgU3VwZXJDbGFzcykge1xuICAgIHZhciBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIGZ1bmN0aW9uIEJhc2VDb25zdHJ1Y3RvciAoKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQ2hpbGRDbGFzcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gU3VwZXJDbGFzcykge1xuICAgICAgaWYgKF9faGFzUHJvcC5jYWxsKFN1cGVyQ2xhc3MsIGtleSkpIHtcbiAgICAgICAgQ2hpbGRDbGFzc1trZXldID0gU3VwZXJDbGFzc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIEJhc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcbiAgICBDaGlsZENsYXNzLnByb3RvdHlwZSA9IG5ldyBCYXNlQ29uc3RydWN0b3IoKTtcbiAgICBDaGlsZENsYXNzLl9fc3VwZXJfXyA9IFN1cGVyQ2xhc3MucHJvdG90eXBlO1xuXG4gICAgcmV0dXJuIENoaWxkQ2xhc3M7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0TWV0aG9kcyAodGhlQ2xhc3MpIHtcbiAgICB2YXIgcHJvdG8gPSB0aGVDbGFzcy5wcm90b3R5cGU7XG5cbiAgICB2YXIgbWV0aG9kcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBwcm90bykge1xuICAgICAgdmFyIG0gPSBwcm90b1ttZXRob2ROYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBtICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbWV0aG9kcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXRob2RzO1xuICB9XG5cbiAgVXRpbHMuRGVjb3JhdGUgPSBmdW5jdGlvbiAoU3VwZXJDbGFzcywgRGVjb3JhdG9yQ2xhc3MpIHtcbiAgICB2YXIgZGVjb3JhdGVkTWV0aG9kcyA9IGdldE1ldGhvZHMoRGVjb3JhdG9yQ2xhc3MpO1xuICAgIHZhciBzdXBlck1ldGhvZHMgPSBnZXRNZXRob2RzKFN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gRGVjb3JhdGVkQ2xhc3MgKCkge1xuICAgICAgdmFyIHVuc2hpZnQgPSBBcnJheS5wcm90b3R5cGUudW5zaGlmdDtcblxuICAgICAgdmFyIGFyZ0NvdW50ID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yLmxlbmd0aDtcblxuICAgICAgdmFyIGNhbGxlZENvbnN0cnVjdG9yID0gU3VwZXJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbiAgICAgIGlmIChhcmdDb3VudCA+IDApIHtcbiAgICAgICAgdW5zaGlmdC5jYWxsKGFyZ3VtZW50cywgU3VwZXJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IpO1xuXG4gICAgICAgIGNhbGxlZENvbnN0cnVjdG9yID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgICAgfVxuXG4gICAgICBjYWxsZWRDb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIERlY29yYXRvckNsYXNzLmRpc3BsYXlOYW1lID0gU3VwZXJDbGFzcy5kaXNwbGF5TmFtZTtcblxuICAgIGZ1bmN0aW9uIGN0ciAoKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gRGVjb3JhdGVkQ2xhc3M7XG4gICAgfVxuXG4gICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlID0gbmV3IGN0cigpO1xuXG4gICAgZm9yICh2YXIgbSA9IDA7IG0gPCBzdXBlck1ldGhvZHMubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgdmFyIHN1cGVyTWV0aG9kID0gc3VwZXJNZXRob2RzW21dO1xuXG4gICAgICAgIERlY29yYXRlZENsYXNzLnByb3RvdHlwZVtzdXBlck1ldGhvZF0gPVxuICAgICAgICAgIFN1cGVyQ2xhc3MucHJvdG90eXBlW3N1cGVyTWV0aG9kXTtcbiAgICB9XG5cbiAgICB2YXIgY2FsbGVkTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAgIC8vIFN0dWIgb3V0IHRoZSBvcmlnaW5hbCBtZXRob2QgaWYgaXQncyBub3QgZGVjb3JhdGluZyBhbiBhY3R1YWwgbWV0aG9kXG4gICAgICB2YXIgb3JpZ2luYWxNZXRob2QgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgaWYgKG1ldGhvZE5hbWUgaW4gRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlKSB7XG4gICAgICAgIG9yaWdpbmFsTWV0aG9kID0gRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVjb3JhdGVkTWV0aG9kID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdW5zaGlmdCA9IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0O1xuXG4gICAgICAgIHVuc2hpZnQuY2FsbChhcmd1bWVudHMsIG9yaWdpbmFsTWV0aG9kKTtcblxuICAgICAgICByZXR1cm4gZGVjb3JhdGVkTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRlY29yYXRlZE1ldGhvZHMubGVuZ3RoOyBkKyspIHtcbiAgICAgIHZhciBkZWNvcmF0ZWRNZXRob2QgPSBkZWNvcmF0ZWRNZXRob2RzW2RdO1xuXG4gICAgICBEZWNvcmF0ZWRDbGFzcy5wcm90b3R5cGVbZGVjb3JhdGVkTWV0aG9kXSA9IGNhbGxlZE1ldGhvZChkZWNvcmF0ZWRNZXRob2QpO1xuICAgIH1cblxuICAgIHJldHVybiBEZWNvcmF0ZWRDbGFzcztcbiAgfTtcblxuICB2YXIgT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICB9O1xuXG4gIE9ic2VydmFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XG5cbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gIH07XG5cbiAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XG5cbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuaW52b2tlKHRoaXMubGlzdGVuZXJzW2V2ZW50XSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICBpZiAoJyonIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLmludm9rZSh0aGlzLmxpc3RlbmVyc1snKiddLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobGlzdGVuZXJzLCBwYXJhbXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgcGFyYW1zKTtcbiAgICB9XG4gIH07XG5cbiAgVXRpbHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG5cbiAgVXRpbHMuZ2VuZXJhdGVDaGFycyA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICB2YXIgY2hhcnMgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByYW5kb21DaGFyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYpO1xuICAgICAgY2hhcnMgKz0gcmFuZG9tQ2hhci50b1N0cmluZygzNik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJzO1xuICB9O1xuXG4gIFV0aWxzLmJpbmQgPSBmdW5jdGlvbiAoZnVuYywgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICBVdGlscy5fY29udmVydERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGZvciAodmFyIG9yaWdpbmFsS2V5IGluIGRhdGEpIHtcbiAgICAgIHZhciBrZXlzID0gb3JpZ2luYWxLZXkuc3BsaXQoJy0nKTtcblxuICAgICAgdmFyIGRhdGFMZXZlbCA9IGRhdGE7XG5cbiAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xuXG4gICAgICAgIC8vIExvd2VyY2FzZSB0aGUgZmlyc3QgbGV0dGVyXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGRhc2gtc2VwYXJhdGVkIGJlY29tZXMgY2FtZWxDYXNlXG4gICAgICAgIGtleSA9IGtleS5zdWJzdHJpbmcoMCwgMSkudG9Mb3dlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG5cbiAgICAgICAgaWYgKCEoa2V5IGluIGRhdGFMZXZlbCkpIHtcbiAgICAgICAgICBkYXRhTGV2ZWxba2V5XSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGsgPT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgZGF0YUxldmVsW2tleV0gPSBkYXRhW29yaWdpbmFsS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFMZXZlbCA9IGRhdGFMZXZlbFtrZXldO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgZGF0YVtvcmlnaW5hbEtleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgVXRpbHMuaGFzU2Nyb2xsID0gZnVuY3Rpb24gKGluZGV4LCBlbCkge1xuICAgIC8vIEFkYXB0ZWQgZnJvbSB0aGUgZnVuY3Rpb24gY3JlYXRlZCBieSBAU2hhZG93U2NyaXB0ZXJcbiAgICAvLyBhbmQgYWRhcHRlZCBieSBAQmlsbEJhcnJ5IG9uIHRoZSBTdGFjayBFeGNoYW5nZSBDb2RlIFJldmlldyB3ZWJzaXRlLlxuICAgIC8vIFRoZSBvcmlnaW5hbCBjb2RlIGNhbiBiZSBmb3VuZCBhdFxuICAgIC8vIGh0dHA6Ly9jb2RlcmV2aWV3LnN0YWNrZXhjaGFuZ2UuY29tL3EvMTMzMzhcbiAgICAvLyBhbmQgd2FzIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCB0aGUgU2l6emxlIHNlbGVjdG9yIGVuZ2luZS5cblxuICAgIHZhciAkZWwgPSAkKGVsKTtcbiAgICB2YXIgb3ZlcmZsb3dYID0gZWwuc3R5bGUub3ZlcmZsb3dYO1xuICAgIHZhciBvdmVyZmxvd1kgPSBlbC5zdHlsZS5vdmVyZmxvd1k7XG5cbiAgICAvL0NoZWNrIGJvdGggeCBhbmQgeSBkZWNsYXJhdGlvbnNcbiAgICBpZiAob3ZlcmZsb3dYID09PSBvdmVyZmxvd1kgJiZcbiAgICAgICAgKG92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgb3ZlcmZsb3dZID09PSAndmlzaWJsZScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93WCA9PT0gJ3Njcm9sbCcgfHwgb3ZlcmZsb3dZID09PSAnc2Nyb2xsJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICgkZWwuaW5uZXJIZWlnaHQoKSA8IGVsLnNjcm9sbEhlaWdodCB8fFxuICAgICAgJGVsLmlubmVyV2lkdGgoKSA8IGVsLnNjcm9sbFdpZHRoKTtcbiAgfTtcblxuICBVdGlscy5lc2NhcGVNYXJrdXAgPSBmdW5jdGlvbiAobWFya3VwKSB7XG4gICAgdmFyIHJlcGxhY2VNYXAgPSB7XG4gICAgICAnXFxcXCc6ICcmIzkyOycsXG4gICAgICAnJic6ICcmYW1wOycsXG4gICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICc+JzogJyZndDsnLFxuICAgICAgJ1wiJzogJyZxdW90OycsXG4gICAgICAnXFwnJzogJyYjMzk7JyxcbiAgICAgICcvJzogJyYjNDc7J1xuICAgIH07XG5cbiAgICAvLyBEbyBub3QgdHJ5IHRvIGVzY2FwZSB0aGUgbWFya3VwIGlmIGl0J3Mgbm90IGEgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBtYXJrdXAgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcobWFya3VwKS5yZXBsYWNlKC9bJjw+XCInXFwvXFxcXF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gcmVwbGFjZU1hcFttYXRjaF07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQXBwZW5kIGFuIGFycmF5IG9mIGpRdWVyeSBub2RlcyB0byBhIGdpdmVuIGVsZW1lbnQuXG4gIFV0aWxzLmFwcGVuZE1hbnkgPSBmdW5jdGlvbiAoJGVsZW1lbnQsICRub2Rlcykge1xuICAgIC8vIGpRdWVyeSAxLjcueCBkb2VzIG5vdCBzdXBwb3J0ICQuZm4uYXBwZW5kKCkgd2l0aCBhbiBhcnJheVxuICAgIC8vIEZhbGwgYmFjayB0byBhIGpRdWVyeSBvYmplY3QgY29sbGVjdGlvbiB1c2luZyAkLmZuLmFkZCgpXG4gICAgaWYgKCQuZm4uanF1ZXJ5LnN1YnN0cigwLCAzKSA9PT0gJzEuNycpIHtcbiAgICAgIHZhciAkanFOb2RlcyA9ICQoKTtcblxuICAgICAgJC5tYXAoJG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAkanFOb2RlcyA9ICRqcU5vZGVzLmFkZChub2RlKTtcbiAgICAgIH0pO1xuXG4gICAgICAkbm9kZXMgPSAkanFOb2RlcztcbiAgICB9XG5cbiAgICAkZWxlbWVudC5hcHBlbmQoJG5vZGVzKTtcbiAgfTtcblxuICByZXR1cm4gVXRpbHM7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3Jlc3VsdHMnLFtcbiAgJ2pxdWVyeScsXG4gICcuL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIFJlc3VsdHMgKCRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcikge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhQWRhcHRlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgUmVzdWx0cy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIFV0aWxzLkV4dGVuZChSZXN1bHRzLCBVdGlscy5PYnNlcnZhYmxlKTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRyZXN1bHRzID0gJChcbiAgICAgICc8dWwgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnNcIiByb2xlPVwidHJlZVwiPjwvdWw+J1xuICAgICk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnbXVsdGlwbGUnKSkge1xuICAgICAgJHJlc3VsdHMuYXR0cignYXJpYS1tdWx0aXNlbGVjdGFibGUnLCAndHJ1ZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHJlc3VsdHMgPSAkcmVzdWx0cztcblxuICAgIHJldHVybiAkcmVzdWx0cztcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRyZXN1bHRzLmVtcHR5KCk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuZGlzcGxheU1lc3NhZ2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xuXG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcblxuICAgIHZhciAkbWVzc2FnZSA9ICQoXG4gICAgICAnPGxpIHJvbGU9XCJ0cmVlaXRlbVwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiJyArXG4gICAgICAnIGNsYXNzPVwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb25cIj48L2xpPidcbiAgICApO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0cmFuc2xhdGlvbnMnKS5nZXQocGFyYW1zLm1lc3NhZ2UpO1xuXG4gICAgJG1lc3NhZ2UuYXBwZW5kKFxuICAgICAgZXNjYXBlTWFya3VwKFxuICAgICAgICBtZXNzYWdlKHBhcmFtcy5hcmdzKVxuICAgICAgKVxuICAgICk7XG5cbiAgICAkbWVzc2FnZVswXS5jbGFzc05hbWUgKz0gJyBzZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnO1xuXG4gICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQoJG1lc3NhZ2UpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmhpZGVNZXNzYWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnKS5yZW1vdmUoKTtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcblxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xuXG4gICAgaWYgKGRhdGEucmVzdWx0cyA9PSBudWxsIHx8IGRhdGEucmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICh0aGlzLiRyZXN1bHRzLmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzdWx0czptZXNzYWdlJywge1xuICAgICAgICAgIG1lc3NhZ2U6ICdub1Jlc3VsdHMnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5yZXN1bHRzID0gdGhpcy5zb3J0KGRhdGEucmVzdWx0cyk7XG5cbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEucmVzdWx0cy5sZW5ndGg7IGQrKykge1xuICAgICAgdmFyIGl0ZW0gPSBkYXRhLnJlc3VsdHNbZF07XG5cbiAgICAgIHZhciAkb3B0aW9uID0gdGhpcy5vcHRpb24oaXRlbSk7XG5cbiAgICAgICRvcHRpb25zLnB1c2goJG9wdGlvbik7XG4gICAgfVxuXG4gICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQoJG9wdGlvbnMpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRyZXN1bHRzLCAkZHJvcGRvd24pIHtcbiAgICB2YXIgJHJlc3VsdHNDb250YWluZXIgPSAkZHJvcGRvd24uZmluZCgnLnNlbGVjdDItcmVzdWx0cycpO1xuICAgICRyZXN1bHRzQ29udGFpbmVyLmFwcGVuZCgkcmVzdWx0cyk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHNvcnRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ3NvcnRlcicpO1xuXG4gICAgcmV0dXJuIHNvcnRlcihkYXRhKTtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5zZXRDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuZGF0YS5jdXJyZW50KGZ1bmN0aW9uIChzZWxlY3RlZCkge1xuICAgICAgdmFyIHNlbGVjdGVkSWRzID0gJC5tYXAoc2VsZWN0ZWQsIGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzLmlkLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcblxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0c1xuICAgICAgICAuZmluZCgnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyk7XG5cbiAgICAgICRvcHRpb25zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XG5cbiAgICAgICAgdmFyIGl0ZW0gPSAkLmRhdGEodGhpcywgJ2RhdGEnKTtcblxuICAgICAgICAvLyBpZCBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcgd2hlbiBjb21wYXJpbmdcbiAgICAgICAgdmFyIGlkID0gJycgKyBpdGVtLmlkO1xuXG4gICAgICAgIGlmICgoaXRlbS5lbGVtZW50ICE9IG51bGwgJiYgaXRlbS5lbGVtZW50LnNlbGVjdGVkKSB8fFxuICAgICAgICAgICAgKGl0ZW0uZWxlbWVudCA9PSBudWxsICYmICQuaW5BcnJheShpZCwgc2VsZWN0ZWRJZHMpID4gLTEpKSB7XG4gICAgICAgICAgJG9wdGlvbi5hdHRyKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciAkc2VsZWN0ZWQgPSAkb3B0aW9ucy5maWx0ZXIoJ1thcmlhLXNlbGVjdGVkPXRydWVdJyk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgc2VsZWN0ZWQgb3B0aW9uc1xuICAgICAgaWYgKCRzZWxlY3RlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBzZWxlY3RlZCBvcHRpb25zLCBoaWdobGlnaHQgdGhlIGZpcnN0XG4gICAgICAgICRzZWxlY3RlZC5maXJzdCgpLnRyaWdnZXIoJ21vdXNlZW50ZXInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBzZWxlY3RlZCBvcHRpb25zLCBoaWdobGlnaHQgdGhlIGZpcnN0IG9wdGlvblxuICAgICAgICAvLyBpbiB0aGUgZHJvcGRvd25cbiAgICAgICAgJG9wdGlvbnMuZmlyc3QoKS50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuc2hvd0xvYWRpbmcgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdGhpcy5oaWRlTG9hZGluZygpO1xuXG4gICAgdmFyIGxvYWRpbmdNb3JlID0gdGhpcy5vcHRpb25zLmdldCgndHJhbnNsYXRpb25zJykuZ2V0KCdzZWFyY2hpbmcnKTtcblxuICAgIHZhciBsb2FkaW5nID0ge1xuICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgdGV4dDogbG9hZGluZ01vcmUocGFyYW1zKVxuICAgIH07XG4gICAgdmFyICRsb2FkaW5nID0gdGhpcy5vcHRpb24obG9hZGluZyk7XG4gICAgJGxvYWRpbmcuY2xhc3NOYW1lICs9ICcgbG9hZGluZy1yZXN1bHRzJztcblxuICAgIHRoaXMuJHJlc3VsdHMucHJlcGVuZCgkbG9hZGluZyk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuaGlkZUxvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kcmVzdWx0cy5maW5kKCcubG9hZGluZy1yZXN1bHRzJykucmVtb3ZlKCk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBvcHRpb24uY2xhc3NOYW1lID0gJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uJztcblxuICAgIHZhciBhdHRycyA9IHtcbiAgICAgICdyb2xlJzogJ3RyZWVpdGVtJyxcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogJ2ZhbHNlJ1xuICAgIH07XG5cbiAgICBpZiAoZGF0YS5kaXNhYmxlZCkge1xuICAgICAgZGVsZXRlIGF0dHJzWydhcmlhLXNlbGVjdGVkJ107XG4gICAgICBhdHRyc1snYXJpYS1kaXNhYmxlZCddID0gJ3RydWUnO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmlkID09IG51bGwpIHtcbiAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1zZWxlY3RlZCddO1xuICAgIH1cblxuICAgIGlmIChkYXRhLl9yZXN1bHRJZCAhPSBudWxsKSB7XG4gICAgICBvcHRpb24uaWQgPSBkYXRhLl9yZXN1bHRJZDtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS50aXRsZSkge1xuICAgICAgb3B0aW9uLnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xuICAgICAgYXR0cnMucm9sZSA9ICdncm91cCc7XG4gICAgICBhdHRyc1snYXJpYS1sYWJlbCddID0gZGF0YS50ZXh0O1xuICAgICAgZGVsZXRlIGF0dHJzWydhcmlhLXNlbGVjdGVkJ107XG4gICAgfVxuXG4gICAgZm9yICh2YXIgYXR0ciBpbiBhdHRycykge1xuICAgICAgdmFyIHZhbCA9IGF0dHJzW2F0dHJdO1xuXG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKGF0dHIsIHZhbCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcbiAgICAgIHZhciAkb3B0aW9uID0gJChvcHRpb24pO1xuXG4gICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcbiAgICAgIGxhYmVsLmNsYXNzTmFtZSA9ICdzZWxlY3QyLXJlc3VsdHNfX2dyb3VwJztcblxuICAgICAgdmFyICRsYWJlbCA9ICQobGFiZWwpO1xuICAgICAgdGhpcy50ZW1wbGF0ZShkYXRhLCBsYWJlbCk7XG5cbiAgICAgIHZhciAkY2hpbGRyZW4gPSBbXTtcblxuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBkYXRhLmNoaWxkcmVuLmxlbmd0aDsgYysrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGRhdGEuY2hpbGRyZW5bY107XG5cbiAgICAgICAgdmFyICRjaGlsZCA9IHRoaXMub3B0aW9uKGNoaWxkKTtcblxuICAgICAgICAkY2hpbGRyZW4ucHVzaCgkY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgJGNoaWxkcmVuQ29udGFpbmVyID0gJCgnPHVsPjwvdWw+Jywge1xuICAgICAgICAnY2xhc3MnOiAnc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25zIHNlbGVjdDItcmVzdWx0c19fb3B0aW9ucy0tbmVzdGVkJ1xuICAgICAgfSk7XG5cbiAgICAgICRjaGlsZHJlbkNvbnRhaW5lci5hcHBlbmQoJGNoaWxkcmVuKTtcblxuICAgICAgJG9wdGlvbi5hcHBlbmQobGFiZWwpO1xuICAgICAgJG9wdGlvbi5hcHBlbmQoJGNoaWxkcmVuQ29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZW1wbGF0ZShkYXRhLCBvcHRpb24pO1xuICAgIH1cblxuICAgICQuZGF0YShvcHRpb24sICdkYXRhJywgZGF0YSk7XG5cbiAgICByZXR1cm4gb3B0aW9uO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcblxuICAgIHRoaXMuJHJlc3VsdHMuYXR0cignaWQnLCBpZCk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YWxsJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5jbGVhcigpO1xuICAgICAgc2VsZi5hcHBlbmQocGFyYW1zLmRhdGEpO1xuXG4gICAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XG4gICAgICAgIHNlbGYuc2V0Q2xhc3NlcygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFwcGVuZCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYuYXBwZW5kKHBhcmFtcy5kYXRhKTtcblxuICAgICAgaWYgKGNvbnRhaW5lci5pc09wZW4oKSkge1xuICAgICAgICBzZWxmLnNldENsYXNzZXMoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncXVlcnknLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLmhpZGVNZXNzYWdlcygpO1xuICAgICAgc2VsZi5zaG93TG9hZGluZyhwYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNvbnRhaW5lci5pc09wZW4oKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuc2V0Q2xhc3NlcygpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCd1bnNlbGVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY29udGFpbmVyLmlzT3BlbigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5zZXRDbGFzc2VzKCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBvcGVuLCBhcmlhLWV4cGVuZGVkPVwidHJ1ZVwiXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgc2VsZi4kcmVzdWx0cy5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcbiAgICAgIHNlbGYuZW5zdXJlSGlnaGxpZ2h0VmlzaWJsZSgpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgYXJpYS1leHBlbmRlZD1cImZhbHNlXCJcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgc2VsZi4kcmVzdWx0cy5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICBzZWxmLiRyZXN1bHRzLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOnRvZ2dsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xuXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRoaWdobGlnaHRlZC50cmlnZ2VyKCdtb3VzZXVwJyk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6c2VsZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRoaWdobGlnaHRlZCA9IHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XG5cbiAgICAgIGlmICgkaGlnaGxpZ2h0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSAkaGlnaGxpZ2h0ZWQuZGF0YSgnZGF0YScpO1xuXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnKSA9PSAndHJ1ZScpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdjbG9zZScsIHt9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6cHJldmlvdXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGhpZ2hsaWdodGVkID0gc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcblxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcblxuICAgICAgdmFyIGN1cnJlbnRJbmRleCA9ICRvcHRpb25zLmluZGV4KCRoaWdobGlnaHRlZCk7XG5cbiAgICAgIC8vIElmIHdlIGFyZSBhbHJlYWR5IGF0IHRlIHRvcCwgZG9uJ3QgbW92ZSBmdXJ0aGVyXG4gICAgICBpZiAoY3VycmVudEluZGV4ID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG5cbiAgICAgIC8vIElmIG5vbmUgYXJlIGhpZ2hsaWdodGVkLCBoaWdobGlnaHQgdGhlIGZpcnN0XG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0SW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG5leHQgPSAkb3B0aW9ucy5lcShuZXh0SW5kZXgpO1xuXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XG5cbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5vZmZzZXQoKS50b3A7XG4gICAgICB2YXIgbmV4dFRvcCA9ICRuZXh0Lm9mZnNldCgpLnRvcDtcbiAgICAgIHZhciBuZXh0T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoKSArIChuZXh0VG9wIC0gY3VycmVudE9mZnNldCk7XG5cbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0IDwgMCkge1xuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcChuZXh0T2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpuZXh0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRoaWdobGlnaHRlZCA9IHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XG5cbiAgICAgIHZhciAkb3B0aW9ucyA9IHNlbGYuJHJlc3VsdHMuZmluZCgnW2FyaWEtc2VsZWN0ZWRdJyk7XG5cbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xuXG4gICAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcblxuICAgICAgLy8gSWYgd2UgYXJlIGF0IHRoZSBsYXN0IG9wdGlvbiwgc3RheSB0aGVyZVxuICAgICAgaWYgKG5leHRJbmRleCA+PSAkb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG5leHQgPSAkb3B0aW9ucy5lcShuZXh0SW5kZXgpO1xuXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XG5cbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5vZmZzZXQoKS50b3AgK1xuICAgICAgICBzZWxmLiRyZXN1bHRzLm91dGVySGVpZ2h0KGZhbHNlKTtcbiAgICAgIHZhciBuZXh0Qm90dG9tID0gJG5leHQub2Zmc2V0KCkudG9wICsgJG5leHQub3V0ZXJIZWlnaHQoZmFsc2UpO1xuICAgICAgdmFyIG5leHRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpICsgbmV4dEJvdHRvbSAtIGN1cnJlbnRPZmZzZXQ7XG5cbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRCb3R0b20gPiBjdXJyZW50T2Zmc2V0KSB7XG4gICAgICAgIHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKG5leHRPZmZzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmZvY3VzJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgcGFyYW1zLmVsZW1lbnQuYWRkQ2xhc3MoJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOm1lc3NhZ2UnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLmRpc3BsYXlNZXNzYWdlKHBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICBpZiAoJC5mbi5tb3VzZXdoZWVsKSB7XG4gICAgICB0aGlzLiRyZXN1bHRzLm9uKCdtb3VzZXdoZWVsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvcCA9IHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCk7XG5cbiAgICAgICAgdmFyIGJvdHRvbSA9IChcbiAgICAgICAgICBzZWxmLiRyZXN1bHRzLmdldCgwKS5zY3JvbGxIZWlnaHQgLVxuICAgICAgICAgIHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgK1xuICAgICAgICAgIGUuZGVsdGFZXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIGlzQXRUb3AgPSBlLmRlbHRhWSA+IDAgJiYgdG9wIC0gZS5kZWx0YVkgPD0gMDtcbiAgICAgICAgdmFyIGlzQXRCb3R0b20gPSBlLmRlbHRhWSA8IDAgJiYgYm90dG9tIDw9IHNlbGYuJHJlc3VsdHMuaGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKGlzQXRUb3ApIHtcbiAgICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcblxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXRCb3R0b20pIHtcbiAgICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcChcbiAgICAgICAgICAgIHNlbGYuJHJlc3VsdHMuZ2V0KDApLnNjcm9sbEhlaWdodCAtIHNlbGYuJHJlc3VsdHMuaGVpZ2h0KClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNldXAnLCAnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyxcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YSgnZGF0YScpO1xuXG4gICAgICBpZiAoJHRoaXMuYXR0cignYXJpYS1zZWxlY3RlZCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5nZXQoJ211bHRpcGxlJykpIHtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3Vuc2VsZWN0Jywge1xuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYudHJpZ2dlcignY2xvc2UnLCB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnQsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kcmVzdWx0cy5vbignbW91c2VlbnRlcicsICcuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25bYXJpYS1zZWxlY3RlZF0nLFxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoJ2RhdGEnKTtcblxuICAgICAgc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWhpZ2hsaWdodGVkJyk7XG5cbiAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpmb2N1cycsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZWxlbWVudDogJCh0aGlzKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSB0aGlzLiRyZXN1bHRzXG4gICAgLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0taGlnaGxpZ2h0ZWQnKTtcblxuICAgIHJldHVybiAkaGlnaGxpZ2h0ZWQ7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRyZXN1bHRzLnJlbW92ZSgpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmVuc3VyZUhpZ2hsaWdodFZpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRoaWdobGlnaHRlZCA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XG5cbiAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkb3B0aW9ucyA9IHRoaXMuJHJlc3VsdHMuZmluZCgnW2FyaWEtc2VsZWN0ZWRdJyk7XG5cbiAgICB2YXIgY3VycmVudEluZGV4ID0gJG9wdGlvbnMuaW5kZXgoJGhpZ2hsaWdodGVkKTtcblxuICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy4kcmVzdWx0cy5vZmZzZXQoKS50b3A7XG4gICAgdmFyIG5leHRUb3AgPSAkaGlnaGxpZ2h0ZWQub2Zmc2V0KCkudG9wO1xuICAgIHZhciBuZXh0T2Zmc2V0ID0gdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AoKSArIChuZXh0VG9wIC0gY3VycmVudE9mZnNldCk7XG5cbiAgICB2YXIgb2Zmc2V0RGVsdGEgPSBuZXh0VG9wIC0gY3VycmVudE9mZnNldDtcbiAgICBuZXh0T2Zmc2V0IC09ICRoaWdobGlnaHRlZC5vdXRlckhlaWdodChmYWxzZSkgKiAyO1xuXG4gICAgaWYgKGN1cnJlbnRJbmRleCA8PSAyKSB7XG4gICAgICB0aGlzLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcbiAgICB9IGVsc2UgaWYgKG9mZnNldERlbHRhID4gdGhpcy4kcmVzdWx0cy5vdXRlckhlaWdodCgpIHx8IG9mZnNldERlbHRhIDwgMCkge1xuICAgICAgdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AobmV4dE9mZnNldCk7XG4gICAgfVxuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLnRlbXBsYXRlID0gZnVuY3Rpb24gKHJlc3VsdCwgY29udGFpbmVyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLmdldCgndGVtcGxhdGVSZXN1bHQnKTtcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XG5cbiAgICB2YXIgY29udGVudCA9IHRlbXBsYXRlKHJlc3VsdCwgY29udGFpbmVyKTtcblxuICAgIGlmIChjb250ZW50ID09IG51bGwpIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gZXNjYXBlTWFya3VwKGNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKGNvbnRhaW5lcikuYXBwZW5kKGNvbnRlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVzdWx0cztcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIva2V5cycsW1xuXG5dLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBLRVlTID0ge1xuICAgIEJBQ0tTUEFDRTogOCxcbiAgICBUQUI6IDksXG4gICAgRU5URVI6IDEzLFxuICAgIFNISUZUOiAxNixcbiAgICBDVFJMOiAxNyxcbiAgICBBTFQ6IDE4LFxuICAgIEVTQzogMjcsXG4gICAgU1BBQ0U6IDMyLFxuICAgIFBBR0VfVVA6IDMzLFxuICAgIFBBR0VfRE9XTjogMzQsXG4gICAgRU5EOiAzNSxcbiAgICBIT01FOiAzNixcbiAgICBMRUZUOiAzNyxcbiAgICBVUDogMzgsXG4gICAgUklHSFQ6IDM5LFxuICAgIERPV046IDQwLFxuICAgIERFTEVURTogNDZcbiAgfTtcblxuICByZXR1cm4gS0VZUztcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL2Jhc2UnLFtcbiAgJ2pxdWVyeScsXG4gICcuLi91dGlscycsXG4gICcuLi9rZXlzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzLCBLRVlTKSB7XG4gIGZ1bmN0aW9uIEJhc2VTZWxlY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBCYXNlU2VsZWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICB9XG5cbiAgVXRpbHMuRXh0ZW5kKEJhc2VTZWxlY3Rpb24sIFV0aWxzLk9ic2VydmFibGUpO1xuXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHNlbGVjdGlvbiA9ICQoXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvblwiIHJvbGU9XCJjb21ib2JveFwiICcgK1xuICAgICAgJyBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPicgK1xuICAgICAgJzwvc3Bhbj4nXG4gICAgKTtcblxuICAgIHRoaXMuX3RhYmluZGV4ID0gMDtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmRhdGEoJ29sZC10YWJpbmRleCcpICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3RhYmluZGV4ID0gdGhpcy4kZWxlbWVudC5kYXRhKCdvbGQtdGFiaW5kZXgnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl90YWJpbmRleCA9IHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKTtcbiAgICB9XG5cbiAgICAkc2VsZWN0aW9uLmF0dHIoJ3RpdGxlJywgdGhpcy4kZWxlbWVudC5hdHRyKCd0aXRsZScpKTtcbiAgICAkc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgdGhpcy5fdGFiaW5kZXgpO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uID0gJHNlbGVjdGlvbjtcblxuICAgIHJldHVybiAkc2VsZWN0aW9uO1xuICB9O1xuXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1jb250YWluZXInO1xuICAgIHZhciByZXN1bHRzSWQgPSBjb250YWluZXIuaWQgKyAnLXJlc3VsdHMnO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi50cmlnZ2VyKCdmb2N1cycsIGV2dCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2JsdXInLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLl9oYW5kbGVCbHVyKGV2dCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLnRyaWdnZXIoJ2tleXByZXNzJywgZXZ0KTtcblxuICAgICAgaWYgKGV2dC53aGljaCA9PT0gS0VZUy5TUEFDRSkge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBwYXJhbXMuZGF0YS5fcmVzdWx0SWQpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3Rpb246dXBkYXRlJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi51cGRhdGUocGFyYW1zLmRhdGEpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gV2hlbiB0aGUgZHJvcGRvd24gaXMgb3BlbiwgYXJpYS1leHBhbmRlZD1cInRydWVcIlxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtb3ducycsIHJlc3VsdHNJZCk7XG5cbiAgICAgIHNlbGYuX2F0dGFjaENsb3NlSGFuZGxlcihjb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgYXJpYS1leHBhbmRlZD1cImZhbHNlXCJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICBzZWxmLiRzZWxlY3Rpb24ucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XG4gICAgICBzZWxmLiRzZWxlY3Rpb24ucmVtb3ZlQXR0cignYXJpYS1vd25zJyk7XG5cbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5mb2N1cygpO1xuXG4gICAgICBzZWxmLl9kZXRhY2hDbG9zZUhhbmRsZXIoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignZW5hYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4Jywgc2VsZi5fdGFiaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdkaXNhYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuX2hhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gVGhpcyBuZWVkcyB0byBiZSBkZWxheWVkIGFzIHRoZSBhY3RpdmUgZWxlbWVudCBpcyB0aGUgYm9keSB3aGVuIHRoZSB0YWJcbiAgICAvLyBrZXkgaXMgcHJlc3NlZCwgcG9zc2libHkgYWxvbmcgd2l0aCBvdGhlcnMuXG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBgYmx1cmAgaWYgdGhlIGZvY3VzIGlzIHN0aWxsIGluIHRoZSBzZWxlY3Rpb25cbiAgICAgIGlmIChcbiAgICAgICAgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT0gc2VsZi4kc2VsZWN0aW9uWzBdKSB8fFxuICAgICAgICAoJC5jb250YWlucyhzZWxmLiRzZWxlY3Rpb25bMF0sIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi50cmlnZ2VyKCdibHVyJywgZXZ0KTtcbiAgICB9LCAxKTtcbiAgfTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5fYXR0YWNoQ2xvc2VIYW5kbGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICQoZG9jdW1lbnQuYm9keSkub24oJ21vdXNlZG93bi5zZWxlY3QyLicgKyBjb250YWluZXIuaWQsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpO1xuXG4gICAgICB2YXIgJHNlbGVjdCA9ICR0YXJnZXQuY2xvc2VzdCgnLnNlbGVjdDInKTtcblxuICAgICAgdmFyICRhbGwgPSAkKCcuc2VsZWN0Mi5zZWxlY3QyLWNvbnRhaW5lci0tb3BlbicpO1xuXG4gICAgICAkYWxsLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzID09ICRzZWxlY3RbMF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkdGhpcy5kYXRhKCdlbGVtZW50Jyk7XG5cbiAgICAgICAgJGVsZW1lbnQuc2VsZWN0MignY2xvc2UnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLl9kZXRhY2hDbG9zZUhhbmRsZXIgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJ21vdXNlZG93bi5zZWxlY3QyLicgKyBjb250YWluZXIuaWQpO1xuICB9O1xuXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRzZWxlY3Rpb24sICRjb250YWluZXIpIHtcbiAgICB2YXIgJHNlbGVjdGlvbkNvbnRhaW5lciA9ICRjb250YWluZXIuZmluZCgnLnNlbGVjdGlvbicpO1xuICAgICRzZWxlY3Rpb25Db250YWluZXIuYXBwZW5kKCRzZWxlY3Rpb24pO1xuICB9O1xuXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fZGV0YWNoQ2xvc2VIYW5kbGVyKHRoaXMuY29udGFpbmVyKTtcbiAgfTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGB1cGRhdGVgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy4nKTtcbiAgfTtcblxuICByZXR1cm4gQmFzZVNlbGVjdGlvbjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL3NpbmdsZScsW1xuICAnanF1ZXJ5JyxcbiAgJy4vYmFzZScsXG4gICcuLi91dGlscycsXG4gICcuLi9rZXlzJ1xuXSwgZnVuY3Rpb24gKCQsIEJhc2VTZWxlY3Rpb24sIFV0aWxzLCBLRVlTKSB7XG4gIGZ1bmN0aW9uIFNpbmdsZVNlbGVjdGlvbiAoKSB7XG4gICAgU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgVXRpbHMuRXh0ZW5kKFNpbmdsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XG5cbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRzZWxlY3Rpb24gPSBTaW5nbGVTZWxlY3Rpb24uX19zdXBlcl9fLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gICAgJHNlbGVjdGlvbi5hZGRDbGFzcygnc2VsZWN0Mi1zZWxlY3Rpb24tLXNpbmdsZScpO1xuXG4gICAgJHNlbGVjdGlvbi5odG1sKFxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkXCI+PC9zcGFuPicgK1xuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93XCIgcm9sZT1cInByZXNlbnRhdGlvblwiPicgK1xuICAgICAgICAnPGIgcm9sZT1cInByZXNlbnRhdGlvblwiPjwvYj4nICtcbiAgICAgICc8L3NwYW4+J1xuICAgICk7XG5cbiAgICByZXR1cm4gJHNlbGVjdGlvbjtcbiAgfTtcblxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5iaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgaWQgPSBjb250YWluZXIuaWQgKyAnLWNvbnRhaW5lcic7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLmF0dHIoJ2lkJywgaWQpO1xuICAgIHRoaXMuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWxhYmVsbGVkYnknLCBpZCk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIC8vIE9ubHkgcmVzcG9uZCB0byBsZWZ0IGNsaWNrc1xuICAgICAgaWYgKGV2dC53aGljaCAhPT0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYudHJpZ2dlcigndG9nZ2xlJywge1xuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIC8vIFVzZXIgZm9jdXNlcyBvbiB0aGUgY29udGFpbmVyXG4gICAgfSk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2JsdXInLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAvLyBVc2VyIGV4aXRzIHRoZSBjb250YWluZXJcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0aW9uOnVwZGF0ZScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYudXBkYXRlKHBhcmFtcy5kYXRhKTtcbiAgICB9KTtcbiAgfTtcblxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJykuZW1wdHkoKTtcbiAgfTtcblxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmRpc3BsYXkgPSBmdW5jdGlvbiAoZGF0YSwgY29udGFpbmVyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLmdldCgndGVtcGxhdGVTZWxlY3Rpb24nKTtcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XG5cbiAgICByZXR1cm4gZXNjYXBlTWFya3VwKHRlbXBsYXRlKGRhdGEsIGNvbnRhaW5lcikpO1xuICB9O1xuXG4gIFNpbmdsZVNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0aW9uQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKCc8c3Bhbj48L3NwYW4+Jyk7XG4gIH07XG5cbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZWxlY3Rpb24gPSBkYXRhWzBdO1xuXG4gICAgdmFyICRyZW5kZXJlZCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJyk7XG4gICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZGlzcGxheShzZWxlY3Rpb24sICRyZW5kZXJlZCk7XG5cbiAgICAkcmVuZGVyZWQuZW1wdHkoKS5hcHBlbmQoZm9ybWF0dGVkKTtcbiAgICAkcmVuZGVyZWQucHJvcCgndGl0bGUnLCBzZWxlY3Rpb24udGl0bGUgfHwgc2VsZWN0aW9uLnRleHQpO1xuICB9O1xuXG4gIHJldHVybiBTaW5nbGVTZWxlY3Rpb247XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9tdWx0aXBsZScsW1xuICAnanF1ZXJ5JyxcbiAgJy4vYmFzZScsXG4gICcuLi91dGlscydcbl0sIGZ1bmN0aW9uICgkLCBCYXNlU2VsZWN0aW9uLCBVdGlscykge1xuICBmdW5jdGlvbiBNdWx0aXBsZVNlbGVjdGlvbiAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFV0aWxzLkV4dGVuZChNdWx0aXBsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XG5cbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHNlbGVjdGlvbiA9IE11bHRpcGxlU2VsZWN0aW9uLl9fc3VwZXJfXy5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICRzZWxlY3Rpb24uYWRkQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uLS1tdWx0aXBsZScpO1xuXG4gICAgJHNlbGVjdGlvbi5odG1sKFxuICAgICAgJzx1bCBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiPjwvdWw+J1xuICAgICk7XG5cbiAgICByZXR1cm4gJHNlbGVjdGlvbjtcbiAgfTtcblxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18uYmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYudHJpZ2dlcigndG9nZ2xlJywge1xuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlJyxcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCBpcyBkaXNhYmxlZFxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciAkcmVtb3ZlID0gJCh0aGlzKTtcbiAgICAgICAgdmFyICRzZWxlY3Rpb24gPSAkcmVtb3ZlLnBhcmVudCgpO1xuXG4gICAgICAgIHZhciBkYXRhID0gJHNlbGVjdGlvbi5kYXRhKCdkYXRhJyk7XG5cbiAgICAgICAgc2VsZi50cmlnZ2VyKCd1bnNlbGVjdCcsIHtcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnQsXG4gICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLmVtcHR5KCk7XG4gIH07XG5cbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLmRpc3BsYXkgPSBmdW5jdGlvbiAoZGF0YSwgY29udGFpbmVyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLmdldCgndGVtcGxhdGVTZWxlY3Rpb24nKTtcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XG5cbiAgICByZXR1cm4gZXNjYXBlTWFya3VwKHRlbXBsYXRlKGRhdGEsIGNvbnRhaW5lcikpO1xuICB9O1xuXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5zZWxlY3Rpb25Db250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRjb250YWluZXIgPSAkKFxuICAgICAgJzxsaSBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VcIj4nICtcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPicgK1xuICAgICAgICAgICcmdGltZXM7JyArXG4gICAgICAgICc8L3NwYW4+JyArXG4gICAgICAnPC9saT4nXG4gICAgKTtcblxuICAgIHJldHVybiAkY29udGFpbmVyO1xuICB9O1xuXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkc2VsZWN0aW9ucyA9IFtdO1xuXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gZGF0YVtkXTtcblxuICAgICAgdmFyICRzZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvbkNvbnRhaW5lcigpO1xuICAgICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZGlzcGxheShzZWxlY3Rpb24sICRzZWxlY3Rpb24pO1xuXG4gICAgICAkc2VsZWN0aW9uLmFwcGVuZChmb3JtYXR0ZWQpO1xuICAgICAgJHNlbGVjdGlvbi5wcm9wKCd0aXRsZScsIHNlbGVjdGlvbi50aXRsZSB8fCBzZWxlY3Rpb24udGV4dCk7XG5cbiAgICAgICRzZWxlY3Rpb24uZGF0YSgnZGF0YScsIHNlbGVjdGlvbik7XG5cbiAgICAgICRzZWxlY3Rpb25zLnB1c2goJHNlbGVjdGlvbik7XG4gICAgfVxuXG4gICAgdmFyICRyZW5kZXJlZCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJyk7XG5cbiAgICBVdGlscy5hcHBlbmRNYW55KCRyZW5kZXJlZCwgJHNlbGVjdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBNdWx0aXBsZVNlbGVjdGlvbjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL3BsYWNlaG9sZGVyJyxbXG4gICcuLi91dGlscydcbl0sIGZ1bmN0aW9uIChVdGlscykge1xuICBmdW5jdGlvbiBQbGFjZWhvbGRlciAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLm5vcm1hbGl6ZVBsYWNlaG9sZGVyKG9wdGlvbnMuZ2V0KCdwbGFjZWhvbGRlcicpKTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcbiAgfVxuXG4gIFBsYWNlaG9sZGVyLnByb3RvdHlwZS5ub3JtYWxpemVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChfLCBwbGFjZWhvbGRlcikge1xuICAgIGlmICh0eXBlb2YgcGxhY2Vob2xkZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbGFjZWhvbGRlciA9IHtcbiAgICAgICAgaWQ6ICcnLFxuICAgICAgICB0ZXh0OiBwbGFjZWhvbGRlclxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH07XG5cbiAgUGxhY2Vob2xkZXIucHJvdG90eXBlLmNyZWF0ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgJHBsYWNlaG9sZGVyID0gdGhpcy5zZWxlY3Rpb25Db250YWluZXIoKTtcblxuICAgICRwbGFjZWhvbGRlci5odG1sKHRoaXMuZGlzcGxheShwbGFjZWhvbGRlcikpO1xuICAgICRwbGFjZWhvbGRlci5hZGRDbGFzcygnc2VsZWN0Mi1zZWxlY3Rpb25fX3BsYWNlaG9sZGVyJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uX19jaG9pY2UnKTtcblxuICAgIHJldHVybiAkcGxhY2Vob2xkZXI7XG4gIH07XG5cbiAgUGxhY2Vob2xkZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcbiAgICB2YXIgc2luZ2xlUGxhY2Vob2xkZXIgPSAoXG4gICAgICBkYXRhLmxlbmd0aCA9PSAxICYmIGRhdGFbMF0uaWQgIT0gdGhpcy5wbGFjZWhvbGRlci5pZFxuICAgICk7XG4gICAgdmFyIG11bHRpcGxlU2VsZWN0aW9ucyA9IGRhdGEubGVuZ3RoID4gMTtcblxuICAgIGlmIChtdWx0aXBsZVNlbGVjdGlvbnMgfHwgc2luZ2xlUGxhY2Vob2xkZXIpIHtcbiAgICAgIHJldHVybiBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICB2YXIgJHBsYWNlaG9sZGVyID0gdGhpcy5jcmVhdGVQbGFjZWhvbGRlcih0aGlzLnBsYWNlaG9sZGVyKTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJykuYXBwZW5kKCRwbGFjZWhvbGRlcik7XG4gIH07XG5cbiAgcmV0dXJuIFBsYWNlaG9sZGVyO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vYWxsb3dDbGVhcicsW1xuICAnanF1ZXJ5JyxcbiAgJy4uL2tleXMnXG5dLCBmdW5jdGlvbiAoJCwgS0VZUykge1xuICBmdW5jdGlvbiBBbGxvd0NsZWFyICgpIHsgfVxuXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xuXG4gICAgaWYgKHRoaXMucGxhY2Vob2xkZXIgPT0gbnVsbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGFsbG93Q2xlYXJgIG9wdGlvbiBzaG91bGQgYmUgdXNlZCBpbiBjb21iaW5hdGlvbiAnICtcbiAgICAgICAgICAnd2l0aCB0aGUgYHBsYWNlaG9sZGVyYCBvcHRpb24uJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignbW91c2Vkb3duJywgJy5zZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXInLFxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLl9oYW5kbGVDbGVhcihldnQpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYuX2hhbmRsZUtleWJvYXJkQ2xlYXIoZXZ0LCBjb250YWluZXIpO1xuICAgIH0pO1xuICB9O1xuXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLl9oYW5kbGVDbGVhciA9IGZ1bmN0aW9uIChfLCBldnQpIHtcbiAgICAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIGl0IGlzIGRpc2FibGVkXG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgJGNsZWFyID0gdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXInKTtcblxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgbm90aGluZyBoYXMgYmVlbiBzZWxlY3RlZFxuICAgIGlmICgkY2xlYXIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdmFyIGRhdGEgPSAkY2xlYXIuZGF0YSgnZGF0YScpO1xuXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XG4gICAgICB2YXIgdW5zZWxlY3REYXRhID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2RdXG4gICAgICB9O1xuXG4gICAgICAvLyBUcmlnZ2VyIHRoZSBgdW5zZWxlY3RgIGV2ZW50LCBzbyBwZW9wbGUgY2FuIHByZXZlbnQgaXQgZnJvbSBiZWluZ1xuICAgICAgLy8gY2xlYXJlZC5cbiAgICAgIHRoaXMudHJpZ2dlcigndW5zZWxlY3QnLCB1bnNlbGVjdERhdGEpO1xuXG4gICAgICAvLyBJZiB0aGUgZXZlbnQgd2FzIHByZXZlbnRlZCwgZG9uJ3QgY2xlYXIgaXQgb3V0LlxuICAgICAgaWYgKHVuc2VsZWN0RGF0YS5wcmV2ZW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQudmFsKHRoaXMucGxhY2Vob2xkZXIuaWQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuXG4gICAgdGhpcy50cmlnZ2VyKCd0b2dnbGUnLCB7fSk7XG4gIH07XG5cbiAgQWxsb3dDbGVhci5wcm90b3R5cGUuX2hhbmRsZUtleWJvYXJkQ2xlYXIgPSBmdW5jdGlvbiAoXywgZXZ0LCBjb250YWluZXIpIHtcbiAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2dC53aGljaCA9PSBLRVlTLkRFTEVURSB8fCBldnQud2hpY2ggPT0gS0VZUy5CQUNLU1BBQ0UpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUNsZWFyKGV2dCk7XG4gICAgfVxuICB9O1xuXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcblxuICAgIGlmICh0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19wbGFjZWhvbGRlcicpLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgJHJlbW92ZSA9ICQoXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXJcIj4nICtcbiAgICAgICAgJyZ0aW1lczsnICtcbiAgICAgICc8L3NwYW4+J1xuICAgICk7XG4gICAgJHJlbW92ZS5kYXRhKCdkYXRhJywgZGF0YSk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLnByZXBlbmQoJHJlbW92ZSk7XG4gIH07XG5cbiAgcmV0dXJuIEFsbG93Q2xlYXI7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9zZWFyY2gnLFtcbiAgJ2pxdWVyeScsXG4gICcuLi91dGlscycsXG4gICcuLi9rZXlzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzLCBLRVlTKSB7XG4gIGZ1bmN0aW9uIFNlYXJjaCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcbiAgfVxuXG4gIFNlYXJjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xuICAgIHZhciAkc2VhcmNoID0gJChcbiAgICAgICc8bGkgY2xhc3M9XCJzZWxlY3QyLXNlYXJjaCBzZWxlY3QyLXNlYXJjaC0taW5saW5lXCI+JyArXG4gICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZWxlY3QyLXNlYXJjaF9fZmllbGRcIiB0eXBlPVwic2VhcmNoXCIgdGFiaW5kZXg9XCItMVwiJyArXG4gICAgICAgICcgYXV0b2NvbXBsZXRlPVwib2ZmXCIgYXV0b2NvcnJlY3Q9XCJvZmZcIiBhdXRvY2FwaXRhbGl6ZT1cIm9mZlwiJyArXG4gICAgICAgICcgc3BlbGxjaGVjaz1cImZhbHNlXCIgcm9sZT1cInRleHRib3hcIiBhcmlhLWF1dG9jb21wbGV0ZT1cImxpc3RcIiAvPicgK1xuICAgICAgJzwvbGk+J1xuICAgICk7XG5cbiAgICB0aGlzLiRzZWFyY2hDb250YWluZXIgPSAkc2VhcmNoO1xuICAgIHRoaXMuJHNlYXJjaCA9ICRzZWFyY2guZmluZCgnaW5wdXQnKTtcblxuICAgIHZhciAkcmVuZGVyZWQgPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuX3RyYW5zZmVyVGFiSW5kZXgoKTtcblxuICAgIHJldHVybiAkcmVuZGVyZWQ7XG4gIH07XG5cbiAgU2VhcmNoLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJHNlYXJjaC52YWwoJycpO1xuICAgICAgc2VsZi4kc2VhcmNoLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2VuYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJHNlYXJjaC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcblxuICAgICAgc2VsZi5fdHJhbnNmZXJUYWJJbmRleCgpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdkaXNhYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLiRzZWFyY2guYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgcGFyYW1zLmlkKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignZm9jdXNpbicsICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYudHJpZ2dlcignZm9jdXMnLCBldnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1c291dCcsICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYuX2hhbmRsZUJsdXIoZXZ0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbigna2V5ZG93bicsICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XG5cbiAgICAgIHNlbGYuX2tleVVwUHJldmVudGVkID0gZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuXG4gICAgICB2YXIga2V5ID0gZXZ0LndoaWNoO1xuXG4gICAgICBpZiAoa2V5ID09PSBLRVlTLkJBQ0tTUEFDRSAmJiBzZWxmLiRzZWFyY2gudmFsKCkgPT09ICcnKSB7XG4gICAgICAgIHZhciAkcHJldmlvdXNDaG9pY2UgPSBzZWxmLiRzZWFyY2hDb250YWluZXJcbiAgICAgICAgICAucHJldignLnNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2UnKTtcblxuICAgICAgICBpZiAoJHByZXZpb3VzQ2hvaWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgaXRlbSA9ICRwcmV2aW91c0Nob2ljZS5kYXRhKCdkYXRhJyk7XG5cbiAgICAgICAgICBzZWxmLnNlYXJjaFJlbW92ZUNob2ljZShpdGVtKTtcblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUcnkgdG8gZGV0ZWN0IHRoZSBJRSB2ZXJzaW9uIHNob3VsZCB0aGUgYGRvY3VtZW50TW9kZWAgcHJvcGVydHkgdGhhdFxuICAgIC8vIGlzIHN0b3JlZCBvbiB0aGUgZG9jdW1lbnQuIFRoaXMgaXMgb25seSBpbXBsZW1lbnRlZCBpbiBJRSBhbmQgaXNcbiAgICAvLyBzbGlnaHRseSBjbGVhbmVyIHRoYW4gZG9pbmcgYSB1c2VyIGFnZW50IGNoZWNrLlxuICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZSBpbiBFZGdlLCBidXQgRWRnZSBhbHNvIGRvZXNuJ3QgaGF2ZVxuICAgIC8vIHRoaXMgYnVnLlxuICAgIHZhciBtc2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICAgIHZhciBkaXNhYmxlSW5wdXRFdmVudHMgPSBtc2llICYmIG1zaWUgPD0gMTE7XG5cbiAgICAvLyBXb3JrYXJvdW5kIGZvciBicm93c2VycyB3aGljaCBkbyBub3Qgc3VwcG9ydCB0aGUgYGlucHV0YCBldmVudFxuICAgIC8vIFRoaXMgd2lsbCBwcmV2ZW50IGRvdWJsZS10cmlnZ2VyaW5nIG9mIGV2ZW50cyBmb3IgYnJvd3NlcnMgd2hpY2ggc3VwcG9ydFxuICAgIC8vIGJvdGggdGhlIGBrZXl1cGAgYW5kIGBpbnB1dGAgZXZlbnRzLlxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbihcbiAgICAgICdpbnB1dC5zZWFyY2hjaGVjaycsXG4gICAgICAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLFxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAvLyBJRSB3aWxsIHRyaWdnZXIgdGhlIGBpbnB1dGAgZXZlbnQgd2hlbiBhIHBsYWNlaG9sZGVyIGlzIHVzZWQgb24gYVxuICAgICAgICAvLyBzZWFyY2ggYm94LiBUbyBnZXQgYXJvdW5kIHRoaXMgaXNzdWUsIHdlIGFyZSBmb3JjZWQgdG8gaWdub3JlIGFsbFxuICAgICAgICAvLyBgaW5wdXRgIGV2ZW50cyBpbiBJRSBhbmQga2VlcCB1c2luZyBga2V5dXBgLlxuICAgICAgICBpZiAoZGlzYWJsZUlucHV0RXZlbnRzKSB7XG4gICAgICAgICAgc2VsZi4kc2VsZWN0aW9uLm9mZignaW5wdXQuc2VhcmNoIGlucHV0LnNlYXJjaGNoZWNrJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVW5iaW5kIHRoZSBkdXBsaWNhdGVkIGBrZXl1cGAgZXZlbnRcbiAgICAgICAgc2VsZi4kc2VsZWN0aW9uLm9mZigna2V5dXAuc2VhcmNoJyk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbihcbiAgICAgICdrZXl1cC5zZWFyY2ggaW5wdXQuc2VhcmNoJyxcbiAgICAgICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIC8vIElFIHdpbGwgdHJpZ2dlciB0aGUgYGlucHV0YCBldmVudCB3aGVuIGEgcGxhY2Vob2xkZXIgaXMgdXNlZCBvbiBhXG4gICAgICAgIC8vIHNlYXJjaCBib3guIFRvIGdldCBhcm91bmQgdGhpcyBpc3N1ZSwgd2UgYXJlIGZvcmNlZCB0byBpZ25vcmUgYWxsXG4gICAgICAgIC8vIGBpbnB1dGAgZXZlbnRzIGluIElFIGFuZCBrZWVwIHVzaW5nIGBrZXl1cGAuXG4gICAgICAgIGlmIChkaXNhYmxlSW5wdXRFdmVudHMgJiYgZXZ0LnR5cGUgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgICBzZWxmLiRzZWxlY3Rpb24ub2ZmKCdpbnB1dC5zZWFyY2ggaW5wdXQuc2VhcmNoY2hlY2snKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5ID0gZXZ0LndoaWNoO1xuXG4gICAgICAgIC8vIFdlIGNhbiBmcmVlbHkgaWdub3JlIGV2ZW50cyBmcm9tIG1vZGlmaWVyIGtleXNcbiAgICAgICAgaWYgKGtleSA9PSBLRVlTLlNISUZUIHx8IGtleSA9PSBLRVlTLkNUUkwgfHwga2V5ID09IEtFWVMuQUxUKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGFiYmluZyB3aWxsIGJlIGhhbmRsZWQgZHVyaW5nIHRoZSBga2V5ZG93bmAgcGhhc2VcbiAgICAgICAgaWYgKGtleSA9PSBLRVlTLlRBQikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaGFuZGxlU2VhcmNoKGV2dCk7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCB0cmFuc2ZlciB0aGUgdGFiaW5kZXggYXR0cmlidXRlIGZyb20gdGhlIHJlbmRlcmVkXG4gICAqIHNlbGVjdGlvbiB0byB0aGUgc2VhcmNoIGJveC4gVGhpcyBhbGxvd3MgZm9yIHRoZSBzZWFyY2ggYm94IHRvIGJlIHVzZWQgYXNcbiAgICogdGhlIHByaW1hcnkgZm9jdXMgaW5zdGVhZCBvZiB0aGUgc2VsZWN0aW9uIGNvbnRhaW5lci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIFNlYXJjaC5wcm90b3R5cGUuX3RyYW5zZmVyVGFiSW5kZXggPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XG4gICAgdGhpcy4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgdGhpcy4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JykpO1xuICAgIHRoaXMuJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICB9O1xuXG4gIFNlYXJjaC5wcm90b3R5cGUuY3JlYXRlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwbGFjZWhvbGRlcikge1xuICAgIHRoaXMuJHNlYXJjaC5hdHRyKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyLnRleHQpO1xuICB9O1xuXG4gIFNlYXJjaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xuICAgIHZhciBzZWFyY2hIYWRGb2N1cyA9IHRoaXMuJHNlYXJjaFswXSA9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgdGhpcy4kc2VhcmNoLmF0dHIoJ3BsYWNlaG9sZGVyJywgJycpO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpXG4gICAgICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLiRzZWFyY2hDb250YWluZXIpO1xuXG4gICAgdGhpcy5yZXNpemVTZWFyY2goKTtcbiAgICBpZiAoc2VhcmNoSGFkRm9jdXMpIHtcbiAgICAgIHRoaXMuJHNlYXJjaC5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBTZWFyY2gucHJvdG90eXBlLmhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2l6ZVNlYXJjaCgpO1xuXG4gICAgaWYgKCF0aGlzLl9rZXlVcFByZXZlbnRlZCkge1xuICAgICAgdmFyIGlucHV0ID0gdGhpcy4kc2VhcmNoLnZhbCgpO1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3F1ZXJ5Jywge1xuICAgICAgICB0ZXJtOiBpbnB1dFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fa2V5VXBQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBTZWFyY2gucHJvdG90eXBlLnNlYXJjaFJlbW92ZUNob2ljZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGl0ZW0pIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3Vuc2VsZWN0Jywge1xuICAgICAgZGF0YTogaXRlbVxuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VhcmNoLnZhbChpdGVtLnRleHQpO1xuICAgIHRoaXMuaGFuZGxlU2VhcmNoKCk7XG4gIH07XG5cbiAgU2VhcmNoLnByb3RvdHlwZS5yZXNpemVTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kc2VhcmNoLmNzcygnd2lkdGgnLCAnMjVweCcpO1xuXG4gICAgdmFyIHdpZHRoID0gJyc7XG5cbiAgICBpZiAodGhpcy4kc2VhcmNoLmF0dHIoJ3BsYWNlaG9sZGVyJykgIT09ICcnKSB7XG4gICAgICB3aWR0aCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJykuaW5uZXJXaWR0aCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWluaW11bVdpZHRoID0gdGhpcy4kc2VhcmNoLnZhbCgpLmxlbmd0aCArIDE7XG5cbiAgICAgIHdpZHRoID0gKG1pbmltdW1XaWR0aCAqIDAuNzUpICsgJ2VtJztcbiAgICB9XG5cbiAgICB0aGlzLiRzZWFyY2guY3NzKCd3aWR0aCcsIHdpZHRoKTtcbiAgfTtcblxuICByZXR1cm4gU2VhcmNoO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vZXZlbnRSZWxheScsW1xuICAnanF1ZXJ5J1xuXSwgZnVuY3Rpb24gKCQpIHtcbiAgZnVuY3Rpb24gRXZlbnRSZWxheSAoKSB7IH1cblxuICBFdmVudFJlbGF5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciByZWxheUV2ZW50cyA9IFtcbiAgICAgICdvcGVuJywgJ29wZW5pbmcnLFxuICAgICAgJ2Nsb3NlJywgJ2Nsb3NpbmcnLFxuICAgICAgJ3NlbGVjdCcsICdzZWxlY3RpbmcnLFxuICAgICAgJ3Vuc2VsZWN0JywgJ3Vuc2VsZWN0aW5nJ1xuICAgIF07XG5cbiAgICB2YXIgcHJldmVudGFibGVFdmVudHMgPSBbJ29wZW5pbmcnLCAnY2xvc2luZycsICdzZWxlY3RpbmcnLCAndW5zZWxlY3RpbmcnXTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XG5cbiAgICBjb250YWluZXIub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XG4gICAgICAvLyBJZ25vcmUgZXZlbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSByZWxheWVkXG4gICAgICBpZiAoJC5pbkFycmF5KG5hbWUsIHJlbGF5RXZlbnRzKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcGFyYW1ldGVycyBzaG91bGQgYWx3YXlzIGJlIGFuIG9iamVjdFxuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuXG4gICAgICAvLyBHZW5lcmF0ZSB0aGUgalF1ZXJ5IGV2ZW50IGZvciB0aGUgU2VsZWN0MiBldmVudFxuICAgICAgdmFyIGV2dCA9ICQuRXZlbnQoJ3NlbGVjdDI6JyArIG5hbWUsIHtcbiAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgIH0pO1xuXG4gICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoZXZ0KTtcblxuICAgICAgLy8gT25seSBoYW5kbGUgcHJldmVudGFibGUgZXZlbnRzIGlmIGl0IHdhcyBvbmVcbiAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgcHJldmVudGFibGVFdmVudHMpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBhcmFtcy5wcmV2ZW50ZWQgPSBldnQuaXNEZWZhdWx0UHJldmVudGVkKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEV2ZW50UmVsYXk7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3RyYW5zbGF0aW9uJyxbXG4gICdqcXVlcnknLFxuICAncmVxdWlyZSdcbl0sIGZ1bmN0aW9uICgkLCByZXF1aXJlKSB7XG4gIGZ1bmN0aW9uIFRyYW5zbGF0aW9uIChkaWN0KSB7XG4gICAgdGhpcy5kaWN0ID0gZGljdCB8fCB7fTtcbiAgfVxuXG4gIFRyYW5zbGF0aW9uLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGljdDtcbiAgfTtcblxuICBUcmFuc2xhdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLmRpY3Rba2V5XTtcbiAgfTtcblxuICBUcmFuc2xhdGlvbi5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAgdGhpcy5kaWN0ID0gJC5leHRlbmQoe30sIHRyYW5zbGF0aW9uLmFsbCgpLCB0aGlzLmRpY3QpO1xuICB9O1xuXG4gIC8vIFN0YXRpYyBmdW5jdGlvbnNcblxuICBUcmFuc2xhdGlvbi5fY2FjaGUgPSB7fTtcblxuICBUcmFuc2xhdGlvbi5sb2FkUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgaWYgKCEocGF0aCBpbiBUcmFuc2xhdGlvbi5fY2FjaGUpKSB7XG4gICAgICB2YXIgdHJhbnNsYXRpb25zID0gcmVxdWlyZShwYXRoKTtcblxuICAgICAgVHJhbnNsYXRpb24uX2NhY2hlW3BhdGhdID0gdHJhbnNsYXRpb25zO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNsYXRpb24oVHJhbnNsYXRpb24uX2NhY2hlW3BhdGhdKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNsYXRpb247XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RpYWNyaXRpY3MnLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICB2YXIgZGlhY3JpdGljcyA9IHtcbiAgICAnXFx1MjRCNic6ICdBJyxcbiAgICAnXFx1RkYyMSc6ICdBJyxcbiAgICAnXFx1MDBDMCc6ICdBJyxcbiAgICAnXFx1MDBDMSc6ICdBJyxcbiAgICAnXFx1MDBDMic6ICdBJyxcbiAgICAnXFx1MUVBNic6ICdBJyxcbiAgICAnXFx1MUVBNCc6ICdBJyxcbiAgICAnXFx1MUVBQSc6ICdBJyxcbiAgICAnXFx1MUVBOCc6ICdBJyxcbiAgICAnXFx1MDBDMyc6ICdBJyxcbiAgICAnXFx1MDEwMCc6ICdBJyxcbiAgICAnXFx1MDEwMic6ICdBJyxcbiAgICAnXFx1MUVCMCc6ICdBJyxcbiAgICAnXFx1MUVBRSc6ICdBJyxcbiAgICAnXFx1MUVCNCc6ICdBJyxcbiAgICAnXFx1MUVCMic6ICdBJyxcbiAgICAnXFx1MDIyNic6ICdBJyxcbiAgICAnXFx1MDFFMCc6ICdBJyxcbiAgICAnXFx1MDBDNCc6ICdBJyxcbiAgICAnXFx1MDFERSc6ICdBJyxcbiAgICAnXFx1MUVBMic6ICdBJyxcbiAgICAnXFx1MDBDNSc6ICdBJyxcbiAgICAnXFx1MDFGQSc6ICdBJyxcbiAgICAnXFx1MDFDRCc6ICdBJyxcbiAgICAnXFx1MDIwMCc6ICdBJyxcbiAgICAnXFx1MDIwMic6ICdBJyxcbiAgICAnXFx1MUVBMCc6ICdBJyxcbiAgICAnXFx1MUVBQyc6ICdBJyxcbiAgICAnXFx1MUVCNic6ICdBJyxcbiAgICAnXFx1MUUwMCc6ICdBJyxcbiAgICAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDIzQSc6ICdBJyxcbiAgICAnXFx1MkM2Ric6ICdBJyxcbiAgICAnXFx1QTczMic6ICdBQScsXG4gICAgJ1xcdTAwQzYnOiAnQUUnLFxuICAgICdcXHUwMUZDJzogJ0FFJyxcbiAgICAnXFx1MDFFMic6ICdBRScsXG4gICAgJ1xcdUE3MzQnOiAnQU8nLFxuICAgICdcXHVBNzM2JzogJ0FVJyxcbiAgICAnXFx1QTczOCc6ICdBVicsXG4gICAgJ1xcdUE3M0EnOiAnQVYnLFxuICAgICdcXHVBNzNDJzogJ0FZJyxcbiAgICAnXFx1MjRCNyc6ICdCJyxcbiAgICAnXFx1RkYyMic6ICdCJyxcbiAgICAnXFx1MUUwMic6ICdCJyxcbiAgICAnXFx1MUUwNCc6ICdCJyxcbiAgICAnXFx1MUUwNic6ICdCJyxcbiAgICAnXFx1MDI0Myc6ICdCJyxcbiAgICAnXFx1MDE4Mic6ICdCJyxcbiAgICAnXFx1MDE4MSc6ICdCJyxcbiAgICAnXFx1MjRCOCc6ICdDJyxcbiAgICAnXFx1RkYyMyc6ICdDJyxcbiAgICAnXFx1MDEwNic6ICdDJyxcbiAgICAnXFx1MDEwOCc6ICdDJyxcbiAgICAnXFx1MDEwQSc6ICdDJyxcbiAgICAnXFx1MDEwQyc6ICdDJyxcbiAgICAnXFx1MDBDNyc6ICdDJyxcbiAgICAnXFx1MUUwOCc6ICdDJyxcbiAgICAnXFx1MDE4Nyc6ICdDJyxcbiAgICAnXFx1MDIzQic6ICdDJyxcbiAgICAnXFx1QTczRSc6ICdDJyxcbiAgICAnXFx1MjRCOSc6ICdEJyxcbiAgICAnXFx1RkYyNCc6ICdEJyxcbiAgICAnXFx1MUUwQSc6ICdEJyxcbiAgICAnXFx1MDEwRSc6ICdEJyxcbiAgICAnXFx1MUUwQyc6ICdEJyxcbiAgICAnXFx1MUUxMCc6ICdEJyxcbiAgICAnXFx1MUUxMic6ICdEJyxcbiAgICAnXFx1MUUwRSc6ICdEJyxcbiAgICAnXFx1MDExMCc6ICdEJyxcbiAgICAnXFx1MDE4Qic6ICdEJyxcbiAgICAnXFx1MDE4QSc6ICdEJyxcbiAgICAnXFx1MDE4OSc6ICdEJyxcbiAgICAnXFx1QTc3OSc6ICdEJyxcbiAgICAnXFx1MDFGMSc6ICdEWicsXG4gICAgJ1xcdTAxQzQnOiAnRFonLFxuICAgICdcXHUwMUYyJzogJ0R6JyxcbiAgICAnXFx1MDFDNSc6ICdEeicsXG4gICAgJ1xcdTI0QkEnOiAnRScsXG4gICAgJ1xcdUZGMjUnOiAnRScsXG4gICAgJ1xcdTAwQzgnOiAnRScsXG4gICAgJ1xcdTAwQzknOiAnRScsXG4gICAgJ1xcdTAwQ0EnOiAnRScsXG4gICAgJ1xcdTFFQzAnOiAnRScsXG4gICAgJ1xcdTFFQkUnOiAnRScsXG4gICAgJ1xcdTFFQzQnOiAnRScsXG4gICAgJ1xcdTFFQzInOiAnRScsXG4gICAgJ1xcdTFFQkMnOiAnRScsXG4gICAgJ1xcdTAxMTInOiAnRScsXG4gICAgJ1xcdTFFMTQnOiAnRScsXG4gICAgJ1xcdTFFMTYnOiAnRScsXG4gICAgJ1xcdTAxMTQnOiAnRScsXG4gICAgJ1xcdTAxMTYnOiAnRScsXG4gICAgJ1xcdTAwQ0InOiAnRScsXG4gICAgJ1xcdTFFQkEnOiAnRScsXG4gICAgJ1xcdTAxMUEnOiAnRScsXG4gICAgJ1xcdTAyMDQnOiAnRScsXG4gICAgJ1xcdTAyMDYnOiAnRScsXG4gICAgJ1xcdTFFQjgnOiAnRScsXG4gICAgJ1xcdTFFQzYnOiAnRScsXG4gICAgJ1xcdTAyMjgnOiAnRScsXG4gICAgJ1xcdTFFMUMnOiAnRScsXG4gICAgJ1xcdTAxMTgnOiAnRScsXG4gICAgJ1xcdTFFMTgnOiAnRScsXG4gICAgJ1xcdTFFMUEnOiAnRScsXG4gICAgJ1xcdTAxOTAnOiAnRScsXG4gICAgJ1xcdTAxOEUnOiAnRScsXG4gICAgJ1xcdTI0QkInOiAnRicsXG4gICAgJ1xcdUZGMjYnOiAnRicsXG4gICAgJ1xcdTFFMUUnOiAnRicsXG4gICAgJ1xcdTAxOTEnOiAnRicsXG4gICAgJ1xcdUE3N0InOiAnRicsXG4gICAgJ1xcdTI0QkMnOiAnRycsXG4gICAgJ1xcdUZGMjcnOiAnRycsXG4gICAgJ1xcdTAxRjQnOiAnRycsXG4gICAgJ1xcdTAxMUMnOiAnRycsXG4gICAgJ1xcdTFFMjAnOiAnRycsXG4gICAgJ1xcdTAxMUUnOiAnRycsXG4gICAgJ1xcdTAxMjAnOiAnRycsXG4gICAgJ1xcdTAxRTYnOiAnRycsXG4gICAgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxRTQnOiAnRycsXG4gICAgJ1xcdTAxOTMnOiAnRycsXG4gICAgJ1xcdUE3QTAnOiAnRycsXG4gICAgJ1xcdUE3N0QnOiAnRycsXG4gICAgJ1xcdUE3N0UnOiAnRycsXG4gICAgJ1xcdTI0QkQnOiAnSCcsXG4gICAgJ1xcdUZGMjgnOiAnSCcsXG4gICAgJ1xcdTAxMjQnOiAnSCcsXG4gICAgJ1xcdTFFMjInOiAnSCcsXG4gICAgJ1xcdTFFMjYnOiAnSCcsXG4gICAgJ1xcdTAyMUUnOiAnSCcsXG4gICAgJ1xcdTFFMjQnOiAnSCcsXG4gICAgJ1xcdTFFMjgnOiAnSCcsXG4gICAgJ1xcdTFFMkEnOiAnSCcsXG4gICAgJ1xcdTAxMjYnOiAnSCcsXG4gICAgJ1xcdTJDNjcnOiAnSCcsXG4gICAgJ1xcdTJDNzUnOiAnSCcsXG4gICAgJ1xcdUE3OEQnOiAnSCcsXG4gICAgJ1xcdTI0QkUnOiAnSScsXG4gICAgJ1xcdUZGMjknOiAnSScsXG4gICAgJ1xcdTAwQ0MnOiAnSScsXG4gICAgJ1xcdTAwQ0QnOiAnSScsXG4gICAgJ1xcdTAwQ0UnOiAnSScsXG4gICAgJ1xcdTAxMjgnOiAnSScsXG4gICAgJ1xcdTAxMkEnOiAnSScsXG4gICAgJ1xcdTAxMkMnOiAnSScsXG4gICAgJ1xcdTAxMzAnOiAnSScsXG4gICAgJ1xcdTAwQ0YnOiAnSScsXG4gICAgJ1xcdTFFMkUnOiAnSScsXG4gICAgJ1xcdTFFQzgnOiAnSScsXG4gICAgJ1xcdTAxQ0YnOiAnSScsXG4gICAgJ1xcdTAyMDgnOiAnSScsXG4gICAgJ1xcdTAyMEEnOiAnSScsXG4gICAgJ1xcdTFFQ0EnOiAnSScsXG4gICAgJ1xcdTAxMkUnOiAnSScsXG4gICAgJ1xcdTFFMkMnOiAnSScsXG4gICAgJ1xcdTAxOTcnOiAnSScsXG4gICAgJ1xcdTI0QkYnOiAnSicsXG4gICAgJ1xcdUZGMkEnOiAnSicsXG4gICAgJ1xcdTAxMzQnOiAnSicsXG4gICAgJ1xcdTAyNDgnOiAnSicsXG4gICAgJ1xcdTI0QzAnOiAnSycsXG4gICAgJ1xcdUZGMkInOiAnSycsXG4gICAgJ1xcdTFFMzAnOiAnSycsXG4gICAgJ1xcdTAxRTgnOiAnSycsXG4gICAgJ1xcdTFFMzInOiAnSycsXG4gICAgJ1xcdTAxMzYnOiAnSycsXG4gICAgJ1xcdTFFMzQnOiAnSycsXG4gICAgJ1xcdTAxOTgnOiAnSycsXG4gICAgJ1xcdTJDNjknOiAnSycsXG4gICAgJ1xcdUE3NDAnOiAnSycsXG4gICAgJ1xcdUE3NDInOiAnSycsXG4gICAgJ1xcdUE3NDQnOiAnSycsXG4gICAgJ1xcdUE3QTInOiAnSycsXG4gICAgJ1xcdTI0QzEnOiAnTCcsXG4gICAgJ1xcdUZGMkMnOiAnTCcsXG4gICAgJ1xcdTAxM0YnOiAnTCcsXG4gICAgJ1xcdTAxMzknOiAnTCcsXG4gICAgJ1xcdTAxM0QnOiAnTCcsXG4gICAgJ1xcdTFFMzYnOiAnTCcsXG4gICAgJ1xcdTFFMzgnOiAnTCcsXG4gICAgJ1xcdTAxM0InOiAnTCcsXG4gICAgJ1xcdTFFM0MnOiAnTCcsXG4gICAgJ1xcdTFFM0EnOiAnTCcsXG4gICAgJ1xcdTAxNDEnOiAnTCcsXG4gICAgJ1xcdTAyM0QnOiAnTCcsXG4gICAgJ1xcdTJDNjInOiAnTCcsXG4gICAgJ1xcdTJDNjAnOiAnTCcsXG4gICAgJ1xcdUE3NDgnOiAnTCcsXG4gICAgJ1xcdUE3NDYnOiAnTCcsXG4gICAgJ1xcdUE3ODAnOiAnTCcsXG4gICAgJ1xcdTAxQzcnOiAnTEonLFxuICAgICdcXHUwMUM4JzogJ0xqJyxcbiAgICAnXFx1MjRDMic6ICdNJyxcbiAgICAnXFx1RkYyRCc6ICdNJyxcbiAgICAnXFx1MUUzRSc6ICdNJyxcbiAgICAnXFx1MUU0MCc6ICdNJyxcbiAgICAnXFx1MUU0Mic6ICdNJyxcbiAgICAnXFx1MkM2RSc6ICdNJyxcbiAgICAnXFx1MDE5Qyc6ICdNJyxcbiAgICAnXFx1MjRDMyc6ICdOJyxcbiAgICAnXFx1RkYyRSc6ICdOJyxcbiAgICAnXFx1MDFGOCc6ICdOJyxcbiAgICAnXFx1MDE0Myc6ICdOJyxcbiAgICAnXFx1MDBEMSc6ICdOJyxcbiAgICAnXFx1MUU0NCc6ICdOJyxcbiAgICAnXFx1MDE0Nyc6ICdOJyxcbiAgICAnXFx1MUU0Nic6ICdOJyxcbiAgICAnXFx1MDE0NSc6ICdOJyxcbiAgICAnXFx1MUU0QSc6ICdOJyxcbiAgICAnXFx1MUU0OCc6ICdOJyxcbiAgICAnXFx1MDIyMCc6ICdOJyxcbiAgICAnXFx1MDE5RCc6ICdOJyxcbiAgICAnXFx1QTc5MCc6ICdOJyxcbiAgICAnXFx1QTdBNCc6ICdOJyxcbiAgICAnXFx1MDFDQSc6ICdOSicsXG4gICAgJ1xcdTAxQ0InOiAnTmonLFxuICAgICdcXHUyNEM0JzogJ08nLFxuICAgICdcXHVGRjJGJzogJ08nLFxuICAgICdcXHUwMEQyJzogJ08nLFxuICAgICdcXHUwMEQzJzogJ08nLFxuICAgICdcXHUwMEQ0JzogJ08nLFxuICAgICdcXHUxRUQyJzogJ08nLFxuICAgICdcXHUxRUQwJzogJ08nLFxuICAgICdcXHUxRUQ2JzogJ08nLFxuICAgICdcXHUxRUQ0JzogJ08nLFxuICAgICdcXHUwMEQ1JzogJ08nLFxuICAgICdcXHUxRTRDJzogJ08nLFxuICAgICdcXHUwMjJDJzogJ08nLFxuICAgICdcXHUxRTRFJzogJ08nLFxuICAgICdcXHUwMTRDJzogJ08nLFxuICAgICdcXHUxRTUwJzogJ08nLFxuICAgICdcXHUxRTUyJzogJ08nLFxuICAgICdcXHUwMTRFJzogJ08nLFxuICAgICdcXHUwMjJFJzogJ08nLFxuICAgICdcXHUwMjMwJzogJ08nLFxuICAgICdcXHUwMEQ2JzogJ08nLFxuICAgICdcXHUwMjJBJzogJ08nLFxuICAgICdcXHUxRUNFJzogJ08nLFxuICAgICdcXHUwMTUwJzogJ08nLFxuICAgICdcXHUwMUQxJzogJ08nLFxuICAgICdcXHUwMjBDJzogJ08nLFxuICAgICdcXHUwMjBFJzogJ08nLFxuICAgICdcXHUwMUEwJzogJ08nLFxuICAgICdcXHUxRURDJzogJ08nLFxuICAgICdcXHUxRURBJzogJ08nLFxuICAgICdcXHUxRUUwJzogJ08nLFxuICAgICdcXHUxRURFJzogJ08nLFxuICAgICdcXHUxRUUyJzogJ08nLFxuICAgICdcXHUxRUNDJzogJ08nLFxuICAgICdcXHUxRUQ4JzogJ08nLFxuICAgICdcXHUwMUVBJzogJ08nLFxuICAgICdcXHUwMUVDJzogJ08nLFxuICAgICdcXHUwMEQ4JzogJ08nLFxuICAgICdcXHUwMUZFJzogJ08nLFxuICAgICdcXHUwMTg2JzogJ08nLFxuICAgICdcXHUwMTlGJzogJ08nLFxuICAgICdcXHVBNzRBJzogJ08nLFxuICAgICdcXHVBNzRDJzogJ08nLFxuICAgICdcXHUwMUEyJzogJ09JJyxcbiAgICAnXFx1QTc0RSc6ICdPTycsXG4gICAgJ1xcdTAyMjInOiAnT1UnLFxuICAgICdcXHUyNEM1JzogJ1AnLFxuICAgICdcXHVGRjMwJzogJ1AnLFxuICAgICdcXHUxRTU0JzogJ1AnLFxuICAgICdcXHUxRTU2JzogJ1AnLFxuICAgICdcXHUwMUE0JzogJ1AnLFxuICAgICdcXHUyQzYzJzogJ1AnLFxuICAgICdcXHVBNzUwJzogJ1AnLFxuICAgICdcXHVBNzUyJzogJ1AnLFxuICAgICdcXHVBNzU0JzogJ1AnLFxuICAgICdcXHUyNEM2JzogJ1EnLFxuICAgICdcXHVGRjMxJzogJ1EnLFxuICAgICdcXHVBNzU2JzogJ1EnLFxuICAgICdcXHVBNzU4JzogJ1EnLFxuICAgICdcXHUwMjRBJzogJ1EnLFxuICAgICdcXHUyNEM3JzogJ1InLFxuICAgICdcXHVGRjMyJzogJ1InLFxuICAgICdcXHUwMTU0JzogJ1InLFxuICAgICdcXHUxRTU4JzogJ1InLFxuICAgICdcXHUwMTU4JzogJ1InLFxuICAgICdcXHUwMjEwJzogJ1InLFxuICAgICdcXHUwMjEyJzogJ1InLFxuICAgICdcXHUxRTVBJzogJ1InLFxuICAgICdcXHUxRTVDJzogJ1InLFxuICAgICdcXHUwMTU2JzogJ1InLFxuICAgICdcXHUxRTVFJzogJ1InLFxuICAgICdcXHUwMjRDJzogJ1InLFxuICAgICdcXHUyQzY0JzogJ1InLFxuICAgICdcXHVBNzVBJzogJ1InLFxuICAgICdcXHVBN0E2JzogJ1InLFxuICAgICdcXHVBNzgyJzogJ1InLFxuICAgICdcXHUyNEM4JzogJ1MnLFxuICAgICdcXHVGRjMzJzogJ1MnLFxuICAgICdcXHUxRTlFJzogJ1MnLFxuICAgICdcXHUwMTVBJzogJ1MnLFxuICAgICdcXHUxRTY0JzogJ1MnLFxuICAgICdcXHUwMTVDJzogJ1MnLFxuICAgICdcXHUxRTYwJzogJ1MnLFxuICAgICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUxRTY2JzogJ1MnLFxuICAgICdcXHUxRTYyJzogJ1MnLFxuICAgICdcXHUxRTY4JzogJ1MnLFxuICAgICdcXHUwMjE4JzogJ1MnLFxuICAgICdcXHUwMTVFJzogJ1MnLFxuICAgICdcXHUyQzdFJzogJ1MnLFxuICAgICdcXHVBN0E4JzogJ1MnLFxuICAgICdcXHVBNzg0JzogJ1MnLFxuICAgICdcXHUyNEM5JzogJ1QnLFxuICAgICdcXHVGRjM0JzogJ1QnLFxuICAgICdcXHUxRTZBJzogJ1QnLFxuICAgICdcXHUwMTY0JzogJ1QnLFxuICAgICdcXHUxRTZDJzogJ1QnLFxuICAgICdcXHUwMjFBJzogJ1QnLFxuICAgICdcXHUwMTYyJzogJ1QnLFxuICAgICdcXHUxRTcwJzogJ1QnLFxuICAgICdcXHUxRTZFJzogJ1QnLFxuICAgICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMUFDJzogJ1QnLFxuICAgICdcXHUwMUFFJzogJ1QnLFxuICAgICdcXHUwMjNFJzogJ1QnLFxuICAgICdcXHVBNzg2JzogJ1QnLFxuICAgICdcXHVBNzI4JzogJ1RaJyxcbiAgICAnXFx1MjRDQSc6ICdVJyxcbiAgICAnXFx1RkYzNSc6ICdVJyxcbiAgICAnXFx1MDBEOSc6ICdVJyxcbiAgICAnXFx1MDBEQSc6ICdVJyxcbiAgICAnXFx1MDBEQic6ICdVJyxcbiAgICAnXFx1MDE2OCc6ICdVJyxcbiAgICAnXFx1MUU3OCc6ICdVJyxcbiAgICAnXFx1MDE2QSc6ICdVJyxcbiAgICAnXFx1MUU3QSc6ICdVJyxcbiAgICAnXFx1MDE2Qyc6ICdVJyxcbiAgICAnXFx1MDBEQyc6ICdVJyxcbiAgICAnXFx1MDFEQic6ICdVJyxcbiAgICAnXFx1MDFENyc6ICdVJyxcbiAgICAnXFx1MDFENSc6ICdVJyxcbiAgICAnXFx1MDFEOSc6ICdVJyxcbiAgICAnXFx1MUVFNic6ICdVJyxcbiAgICAnXFx1MDE2RSc6ICdVJyxcbiAgICAnXFx1MDE3MCc6ICdVJyxcbiAgICAnXFx1MDFEMyc6ICdVJyxcbiAgICAnXFx1MDIxNCc6ICdVJyxcbiAgICAnXFx1MDIxNic6ICdVJyxcbiAgICAnXFx1MDFBRic6ICdVJyxcbiAgICAnXFx1MUVFQSc6ICdVJyxcbiAgICAnXFx1MUVFOCc6ICdVJyxcbiAgICAnXFx1MUVFRSc6ICdVJyxcbiAgICAnXFx1MUVFQyc6ICdVJyxcbiAgICAnXFx1MUVGMCc6ICdVJyxcbiAgICAnXFx1MUVFNCc6ICdVJyxcbiAgICAnXFx1MUU3Mic6ICdVJyxcbiAgICAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MUU3Nic6ICdVJyxcbiAgICAnXFx1MUU3NCc6ICdVJyxcbiAgICAnXFx1MDI0NCc6ICdVJyxcbiAgICAnXFx1MjRDQic6ICdWJyxcbiAgICAnXFx1RkYzNic6ICdWJyxcbiAgICAnXFx1MUU3Qyc6ICdWJyxcbiAgICAnXFx1MUU3RSc6ICdWJyxcbiAgICAnXFx1MDFCMic6ICdWJyxcbiAgICAnXFx1QTc1RSc6ICdWJyxcbiAgICAnXFx1MDI0NSc6ICdWJyxcbiAgICAnXFx1QTc2MCc6ICdWWScsXG4gICAgJ1xcdTI0Q0MnOiAnVycsXG4gICAgJ1xcdUZGMzcnOiAnVycsXG4gICAgJ1xcdTFFODAnOiAnVycsXG4gICAgJ1xcdTFFODInOiAnVycsXG4gICAgJ1xcdTAxNzQnOiAnVycsXG4gICAgJ1xcdTFFODYnOiAnVycsXG4gICAgJ1xcdTFFODQnOiAnVycsXG4gICAgJ1xcdTFFODgnOiAnVycsXG4gICAgJ1xcdTJDNzInOiAnVycsXG4gICAgJ1xcdTI0Q0QnOiAnWCcsXG4gICAgJ1xcdUZGMzgnOiAnWCcsXG4gICAgJ1xcdTFFOEEnOiAnWCcsXG4gICAgJ1xcdTFFOEMnOiAnWCcsXG4gICAgJ1xcdTI0Q0UnOiAnWScsXG4gICAgJ1xcdUZGMzknOiAnWScsXG4gICAgJ1xcdTFFRjInOiAnWScsXG4gICAgJ1xcdTAwREQnOiAnWScsXG4gICAgJ1xcdTAxNzYnOiAnWScsXG4gICAgJ1xcdTFFRjgnOiAnWScsXG4gICAgJ1xcdTAyMzInOiAnWScsXG4gICAgJ1xcdTFFOEUnOiAnWScsXG4gICAgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTFFRjYnOiAnWScsXG4gICAgJ1xcdTFFRjQnOiAnWScsXG4gICAgJ1xcdTAxQjMnOiAnWScsXG4gICAgJ1xcdTAyNEUnOiAnWScsXG4gICAgJ1xcdTFFRkUnOiAnWScsXG4gICAgJ1xcdTI0Q0YnOiAnWicsXG4gICAgJ1xcdUZGM0EnOiAnWicsXG4gICAgJ1xcdTAxNzknOiAnWicsXG4gICAgJ1xcdTFFOTAnOiAnWicsXG4gICAgJ1xcdTAxN0InOiAnWicsXG4gICAgJ1xcdTAxN0QnOiAnWicsXG4gICAgJ1xcdTFFOTInOiAnWicsXG4gICAgJ1xcdTFFOTQnOiAnWicsXG4gICAgJ1xcdTAxQjUnOiAnWicsXG4gICAgJ1xcdTAyMjQnOiAnWicsXG4gICAgJ1xcdTJDN0YnOiAnWicsXG4gICAgJ1xcdTJDNkInOiAnWicsXG4gICAgJ1xcdUE3NjInOiAnWicsXG4gICAgJ1xcdTI0RDAnOiAnYScsXG4gICAgJ1xcdUZGNDEnOiAnYScsXG4gICAgJ1xcdTFFOUEnOiAnYScsXG4gICAgJ1xcdTAwRTAnOiAnYScsXG4gICAgJ1xcdTAwRTEnOiAnYScsXG4gICAgJ1xcdTAwRTInOiAnYScsXG4gICAgJ1xcdTFFQTcnOiAnYScsXG4gICAgJ1xcdTFFQTUnOiAnYScsXG4gICAgJ1xcdTFFQUInOiAnYScsXG4gICAgJ1xcdTFFQTknOiAnYScsXG4gICAgJ1xcdTAwRTMnOiAnYScsXG4gICAgJ1xcdTAxMDEnOiAnYScsXG4gICAgJ1xcdTAxMDMnOiAnYScsXG4gICAgJ1xcdTFFQjEnOiAnYScsXG4gICAgJ1xcdTFFQUYnOiAnYScsXG4gICAgJ1xcdTFFQjUnOiAnYScsXG4gICAgJ1xcdTFFQjMnOiAnYScsXG4gICAgJ1xcdTAyMjcnOiAnYScsXG4gICAgJ1xcdTAxRTEnOiAnYScsXG4gICAgJ1xcdTAwRTQnOiAnYScsXG4gICAgJ1xcdTAxREYnOiAnYScsXG4gICAgJ1xcdTFFQTMnOiAnYScsXG4gICAgJ1xcdTAwRTUnOiAnYScsXG4gICAgJ1xcdTAxRkInOiAnYScsXG4gICAgJ1xcdTAxQ0UnOiAnYScsXG4gICAgJ1xcdTAyMDEnOiAnYScsXG4gICAgJ1xcdTAyMDMnOiAnYScsXG4gICAgJ1xcdTFFQTEnOiAnYScsXG4gICAgJ1xcdTFFQUQnOiAnYScsXG4gICAgJ1xcdTFFQjcnOiAnYScsXG4gICAgJ1xcdTFFMDEnOiAnYScsXG4gICAgJ1xcdTAxMDUnOiAnYScsXG4gICAgJ1xcdTJDNjUnOiAnYScsXG4gICAgJ1xcdTAyNTAnOiAnYScsXG4gICAgJ1xcdUE3MzMnOiAnYWEnLFxuICAgICdcXHUwMEU2JzogJ2FlJyxcbiAgICAnXFx1MDFGRCc6ICdhZScsXG4gICAgJ1xcdTAxRTMnOiAnYWUnLFxuICAgICdcXHVBNzM1JzogJ2FvJyxcbiAgICAnXFx1QTczNyc6ICdhdScsXG4gICAgJ1xcdUE3MzknOiAnYXYnLFxuICAgICdcXHVBNzNCJzogJ2F2JyxcbiAgICAnXFx1QTczRCc6ICdheScsXG4gICAgJ1xcdTI0RDEnOiAnYicsXG4gICAgJ1xcdUZGNDInOiAnYicsXG4gICAgJ1xcdTFFMDMnOiAnYicsXG4gICAgJ1xcdTFFMDUnOiAnYicsXG4gICAgJ1xcdTFFMDcnOiAnYicsXG4gICAgJ1xcdTAxODAnOiAnYicsXG4gICAgJ1xcdTAxODMnOiAnYicsXG4gICAgJ1xcdTAyNTMnOiAnYicsXG4gICAgJ1xcdTI0RDInOiAnYycsXG4gICAgJ1xcdUZGNDMnOiAnYycsXG4gICAgJ1xcdTAxMDcnOiAnYycsXG4gICAgJ1xcdTAxMDknOiAnYycsXG4gICAgJ1xcdTAxMEInOiAnYycsXG4gICAgJ1xcdTAxMEQnOiAnYycsXG4gICAgJ1xcdTAwRTcnOiAnYycsXG4gICAgJ1xcdTFFMDknOiAnYycsXG4gICAgJ1xcdTAxODgnOiAnYycsXG4gICAgJ1xcdTAyM0MnOiAnYycsXG4gICAgJ1xcdUE3M0YnOiAnYycsXG4gICAgJ1xcdTIxODQnOiAnYycsXG4gICAgJ1xcdTI0RDMnOiAnZCcsXG4gICAgJ1xcdUZGNDQnOiAnZCcsXG4gICAgJ1xcdTFFMEInOiAnZCcsXG4gICAgJ1xcdTAxMEYnOiAnZCcsXG4gICAgJ1xcdTFFMEQnOiAnZCcsXG4gICAgJ1xcdTFFMTEnOiAnZCcsXG4gICAgJ1xcdTFFMTMnOiAnZCcsXG4gICAgJ1xcdTFFMEYnOiAnZCcsXG4gICAgJ1xcdTAxMTEnOiAnZCcsXG4gICAgJ1xcdTAxOEMnOiAnZCcsXG4gICAgJ1xcdTAyNTYnOiAnZCcsXG4gICAgJ1xcdTAyNTcnOiAnZCcsXG4gICAgJ1xcdUE3N0EnOiAnZCcsXG4gICAgJ1xcdTAxRjMnOiAnZHonLFxuICAgICdcXHUwMUM2JzogJ2R6JyxcbiAgICAnXFx1MjRENCc6ICdlJyxcbiAgICAnXFx1RkY0NSc6ICdlJyxcbiAgICAnXFx1MDBFOCc6ICdlJyxcbiAgICAnXFx1MDBFOSc6ICdlJyxcbiAgICAnXFx1MDBFQSc6ICdlJyxcbiAgICAnXFx1MUVDMSc6ICdlJyxcbiAgICAnXFx1MUVCRic6ICdlJyxcbiAgICAnXFx1MUVDNSc6ICdlJyxcbiAgICAnXFx1MUVDMyc6ICdlJyxcbiAgICAnXFx1MUVCRCc6ICdlJyxcbiAgICAnXFx1MDExMyc6ICdlJyxcbiAgICAnXFx1MUUxNSc6ICdlJyxcbiAgICAnXFx1MUUxNyc6ICdlJyxcbiAgICAnXFx1MDExNSc6ICdlJyxcbiAgICAnXFx1MDExNyc6ICdlJyxcbiAgICAnXFx1MDBFQic6ICdlJyxcbiAgICAnXFx1MUVCQic6ICdlJyxcbiAgICAnXFx1MDExQic6ICdlJyxcbiAgICAnXFx1MDIwNSc6ICdlJyxcbiAgICAnXFx1MDIwNyc6ICdlJyxcbiAgICAnXFx1MUVCOSc6ICdlJyxcbiAgICAnXFx1MUVDNyc6ICdlJyxcbiAgICAnXFx1MDIyOSc6ICdlJyxcbiAgICAnXFx1MUUxRCc6ICdlJyxcbiAgICAnXFx1MDExOSc6ICdlJyxcbiAgICAnXFx1MUUxOSc6ICdlJyxcbiAgICAnXFx1MUUxQic6ICdlJyxcbiAgICAnXFx1MDI0Nyc6ICdlJyxcbiAgICAnXFx1MDI1Qic6ICdlJyxcbiAgICAnXFx1MDFERCc6ICdlJyxcbiAgICAnXFx1MjRENSc6ICdmJyxcbiAgICAnXFx1RkY0Nic6ICdmJyxcbiAgICAnXFx1MUUxRic6ICdmJyxcbiAgICAnXFx1MDE5Mic6ICdmJyxcbiAgICAnXFx1QTc3Qyc6ICdmJyxcbiAgICAnXFx1MjRENic6ICdnJyxcbiAgICAnXFx1RkY0Nyc6ICdnJyxcbiAgICAnXFx1MDFGNSc6ICdnJyxcbiAgICAnXFx1MDExRCc6ICdnJyxcbiAgICAnXFx1MUUyMSc6ICdnJyxcbiAgICAnXFx1MDExRic6ICdnJyxcbiAgICAnXFx1MDEyMSc6ICdnJyxcbiAgICAnXFx1MDFFNyc6ICdnJyxcbiAgICAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDFFNSc6ICdnJyxcbiAgICAnXFx1MDI2MCc6ICdnJyxcbiAgICAnXFx1QTdBMSc6ICdnJyxcbiAgICAnXFx1MUQ3OSc6ICdnJyxcbiAgICAnXFx1QTc3Ric6ICdnJyxcbiAgICAnXFx1MjRENyc6ICdoJyxcbiAgICAnXFx1RkY0OCc6ICdoJyxcbiAgICAnXFx1MDEyNSc6ICdoJyxcbiAgICAnXFx1MUUyMyc6ICdoJyxcbiAgICAnXFx1MUUyNyc6ICdoJyxcbiAgICAnXFx1MDIxRic6ICdoJyxcbiAgICAnXFx1MUUyNSc6ICdoJyxcbiAgICAnXFx1MUUyOSc6ICdoJyxcbiAgICAnXFx1MUUyQic6ICdoJyxcbiAgICAnXFx1MUU5Nic6ICdoJyxcbiAgICAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MkM2OCc6ICdoJyxcbiAgICAnXFx1MkM3Nic6ICdoJyxcbiAgICAnXFx1MDI2NSc6ICdoJyxcbiAgICAnXFx1MDE5NSc6ICdodicsXG4gICAgJ1xcdTI0RDgnOiAnaScsXG4gICAgJ1xcdUZGNDknOiAnaScsXG4gICAgJ1xcdTAwRUMnOiAnaScsXG4gICAgJ1xcdTAwRUQnOiAnaScsXG4gICAgJ1xcdTAwRUUnOiAnaScsXG4gICAgJ1xcdTAxMjknOiAnaScsXG4gICAgJ1xcdTAxMkInOiAnaScsXG4gICAgJ1xcdTAxMkQnOiAnaScsXG4gICAgJ1xcdTAwRUYnOiAnaScsXG4gICAgJ1xcdTFFMkYnOiAnaScsXG4gICAgJ1xcdTFFQzknOiAnaScsXG4gICAgJ1xcdTAxRDAnOiAnaScsXG4gICAgJ1xcdTAyMDknOiAnaScsXG4gICAgJ1xcdTAyMEInOiAnaScsXG4gICAgJ1xcdTFFQ0InOiAnaScsXG4gICAgJ1xcdTAxMkYnOiAnaScsXG4gICAgJ1xcdTFFMkQnOiAnaScsXG4gICAgJ1xcdTAyNjgnOiAnaScsXG4gICAgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTI0RDknOiAnaicsXG4gICAgJ1xcdUZGNEEnOiAnaicsXG4gICAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxRjAnOiAnaicsXG4gICAgJ1xcdTAyNDknOiAnaicsXG4gICAgJ1xcdTI0REEnOiAnaycsXG4gICAgJ1xcdUZGNEInOiAnaycsXG4gICAgJ1xcdTFFMzEnOiAnaycsXG4gICAgJ1xcdTAxRTknOiAnaycsXG4gICAgJ1xcdTFFMzMnOiAnaycsXG4gICAgJ1xcdTAxMzcnOiAnaycsXG4gICAgJ1xcdTFFMzUnOiAnaycsXG4gICAgJ1xcdTAxOTknOiAnaycsXG4gICAgJ1xcdTJDNkEnOiAnaycsXG4gICAgJ1xcdUE3NDEnOiAnaycsXG4gICAgJ1xcdUE3NDMnOiAnaycsXG4gICAgJ1xcdUE3NDUnOiAnaycsXG4gICAgJ1xcdUE3QTMnOiAnaycsXG4gICAgJ1xcdTI0REInOiAnbCcsXG4gICAgJ1xcdUZGNEMnOiAnbCcsXG4gICAgJ1xcdTAxNDAnOiAnbCcsXG4gICAgJ1xcdTAxM0EnOiAnbCcsXG4gICAgJ1xcdTAxM0UnOiAnbCcsXG4gICAgJ1xcdTFFMzcnOiAnbCcsXG4gICAgJ1xcdTFFMzknOiAnbCcsXG4gICAgJ1xcdTAxM0MnOiAnbCcsXG4gICAgJ1xcdTFFM0QnOiAnbCcsXG4gICAgJ1xcdTFFM0InOiAnbCcsXG4gICAgJ1xcdTAxN0YnOiAnbCcsXG4gICAgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxOUEnOiAnbCcsXG4gICAgJ1xcdTAyNkInOiAnbCcsXG4gICAgJ1xcdTJDNjEnOiAnbCcsXG4gICAgJ1xcdUE3NDknOiAnbCcsXG4gICAgJ1xcdUE3ODEnOiAnbCcsXG4gICAgJ1xcdUE3NDcnOiAnbCcsXG4gICAgJ1xcdTAxQzknOiAnbGonLFxuICAgICdcXHUyNERDJzogJ20nLFxuICAgICdcXHVGRjREJzogJ20nLFxuICAgICdcXHUxRTNGJzogJ20nLFxuICAgICdcXHUxRTQxJzogJ20nLFxuICAgICdcXHUxRTQzJzogJ20nLFxuICAgICdcXHUwMjcxJzogJ20nLFxuICAgICdcXHUwMjZGJzogJ20nLFxuICAgICdcXHUyNEREJzogJ24nLFxuICAgICdcXHVGRjRFJzogJ24nLFxuICAgICdcXHUwMUY5JzogJ24nLFxuICAgICdcXHUwMTQ0JzogJ24nLFxuICAgICdcXHUwMEYxJzogJ24nLFxuICAgICdcXHUxRTQ1JzogJ24nLFxuICAgICdcXHUwMTQ4JzogJ24nLFxuICAgICdcXHUxRTQ3JzogJ24nLFxuICAgICdcXHUwMTQ2JzogJ24nLFxuICAgICdcXHUxRTRCJzogJ24nLFxuICAgICdcXHUxRTQ5JzogJ24nLFxuICAgICdcXHUwMTlFJzogJ24nLFxuICAgICdcXHUwMjcyJzogJ24nLFxuICAgICdcXHUwMTQ5JzogJ24nLFxuICAgICdcXHVBNzkxJzogJ24nLFxuICAgICdcXHVBN0E1JzogJ24nLFxuICAgICdcXHUwMUNDJzogJ25qJyxcbiAgICAnXFx1MjRERSc6ICdvJyxcbiAgICAnXFx1RkY0Ric6ICdvJyxcbiAgICAnXFx1MDBGMic6ICdvJyxcbiAgICAnXFx1MDBGMyc6ICdvJyxcbiAgICAnXFx1MDBGNCc6ICdvJyxcbiAgICAnXFx1MUVEMyc6ICdvJyxcbiAgICAnXFx1MUVEMSc6ICdvJyxcbiAgICAnXFx1MUVENyc6ICdvJyxcbiAgICAnXFx1MUVENSc6ICdvJyxcbiAgICAnXFx1MDBGNSc6ICdvJyxcbiAgICAnXFx1MUU0RCc6ICdvJyxcbiAgICAnXFx1MDIyRCc6ICdvJyxcbiAgICAnXFx1MUU0Ric6ICdvJyxcbiAgICAnXFx1MDE0RCc6ICdvJyxcbiAgICAnXFx1MUU1MSc6ICdvJyxcbiAgICAnXFx1MUU1Myc6ICdvJyxcbiAgICAnXFx1MDE0Ric6ICdvJyxcbiAgICAnXFx1MDIyRic6ICdvJyxcbiAgICAnXFx1MDIzMSc6ICdvJyxcbiAgICAnXFx1MDBGNic6ICdvJyxcbiAgICAnXFx1MDIyQic6ICdvJyxcbiAgICAnXFx1MUVDRic6ICdvJyxcbiAgICAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDFEMic6ICdvJyxcbiAgICAnXFx1MDIwRCc6ICdvJyxcbiAgICAnXFx1MDIwRic6ICdvJyxcbiAgICAnXFx1MDFBMSc6ICdvJyxcbiAgICAnXFx1MUVERCc6ICdvJyxcbiAgICAnXFx1MUVEQic6ICdvJyxcbiAgICAnXFx1MUVFMSc6ICdvJyxcbiAgICAnXFx1MUVERic6ICdvJyxcbiAgICAnXFx1MUVFMyc6ICdvJyxcbiAgICAnXFx1MUVDRCc6ICdvJyxcbiAgICAnXFx1MUVEOSc6ICdvJyxcbiAgICAnXFx1MDFFQic6ICdvJyxcbiAgICAnXFx1MDFFRCc6ICdvJyxcbiAgICAnXFx1MDBGOCc6ICdvJyxcbiAgICAnXFx1MDFGRic6ICdvJyxcbiAgICAnXFx1MDI1NCc6ICdvJyxcbiAgICAnXFx1QTc0Qic6ICdvJyxcbiAgICAnXFx1QTc0RCc6ICdvJyxcbiAgICAnXFx1MDI3NSc6ICdvJyxcbiAgICAnXFx1MDFBMyc6ICdvaScsXG4gICAgJ1xcdTAyMjMnOiAnb3UnLFxuICAgICdcXHVBNzRGJzogJ29vJyxcbiAgICAnXFx1MjRERic6ICdwJyxcbiAgICAnXFx1RkY1MCc6ICdwJyxcbiAgICAnXFx1MUU1NSc6ICdwJyxcbiAgICAnXFx1MUU1Nyc6ICdwJyxcbiAgICAnXFx1MDFBNSc6ICdwJyxcbiAgICAnXFx1MUQ3RCc6ICdwJyxcbiAgICAnXFx1QTc1MSc6ICdwJyxcbiAgICAnXFx1QTc1Myc6ICdwJyxcbiAgICAnXFx1QTc1NSc6ICdwJyxcbiAgICAnXFx1MjRFMCc6ICdxJyxcbiAgICAnXFx1RkY1MSc6ICdxJyxcbiAgICAnXFx1MDI0Qic6ICdxJyxcbiAgICAnXFx1QTc1Nyc6ICdxJyxcbiAgICAnXFx1QTc1OSc6ICdxJyxcbiAgICAnXFx1MjRFMSc6ICdyJyxcbiAgICAnXFx1RkY1Mic6ICdyJyxcbiAgICAnXFx1MDE1NSc6ICdyJyxcbiAgICAnXFx1MUU1OSc6ICdyJyxcbiAgICAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDIxMSc6ICdyJyxcbiAgICAnXFx1MDIxMyc6ICdyJyxcbiAgICAnXFx1MUU1Qic6ICdyJyxcbiAgICAnXFx1MUU1RCc6ICdyJyxcbiAgICAnXFx1MDE1Nyc6ICdyJyxcbiAgICAnXFx1MUU1Ric6ICdyJyxcbiAgICAnXFx1MDI0RCc6ICdyJyxcbiAgICAnXFx1MDI3RCc6ICdyJyxcbiAgICAnXFx1QTc1Qic6ICdyJyxcbiAgICAnXFx1QTdBNyc6ICdyJyxcbiAgICAnXFx1QTc4Myc6ICdyJyxcbiAgICAnXFx1MjRFMic6ICdzJyxcbiAgICAnXFx1RkY1Myc6ICdzJyxcbiAgICAnXFx1MDBERic6ICdzJyxcbiAgICAnXFx1MDE1Qic6ICdzJyxcbiAgICAnXFx1MUU2NSc6ICdzJyxcbiAgICAnXFx1MDE1RCc6ICdzJyxcbiAgICAnXFx1MUU2MSc6ICdzJyxcbiAgICAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MUU2Nyc6ICdzJyxcbiAgICAnXFx1MUU2Myc6ICdzJyxcbiAgICAnXFx1MUU2OSc6ICdzJyxcbiAgICAnXFx1MDIxOSc6ICdzJyxcbiAgICAnXFx1MDE1Ric6ICdzJyxcbiAgICAnXFx1MDIzRic6ICdzJyxcbiAgICAnXFx1QTdBOSc6ICdzJyxcbiAgICAnXFx1QTc4NSc6ICdzJyxcbiAgICAnXFx1MUU5Qic6ICdzJyxcbiAgICAnXFx1MjRFMyc6ICd0JyxcbiAgICAnXFx1RkY1NCc6ICd0JyxcbiAgICAnXFx1MUU2Qic6ICd0JyxcbiAgICAnXFx1MUU5Nyc6ICd0JyxcbiAgICAnXFx1MDE2NSc6ICd0JyxcbiAgICAnXFx1MUU2RCc6ICd0JyxcbiAgICAnXFx1MDIxQic6ICd0JyxcbiAgICAnXFx1MDE2Myc6ICd0JyxcbiAgICAnXFx1MUU3MSc6ICd0JyxcbiAgICAnXFx1MUU2Ric6ICd0JyxcbiAgICAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDFBRCc6ICd0JyxcbiAgICAnXFx1MDI4OCc6ICd0JyxcbiAgICAnXFx1MkM2Nic6ICd0JyxcbiAgICAnXFx1QTc4Nyc6ICd0JyxcbiAgICAnXFx1QTcyOSc6ICd0eicsXG4gICAgJ1xcdTI0RTQnOiAndScsXG4gICAgJ1xcdUZGNTUnOiAndScsXG4gICAgJ1xcdTAwRjknOiAndScsXG4gICAgJ1xcdTAwRkEnOiAndScsXG4gICAgJ1xcdTAwRkInOiAndScsXG4gICAgJ1xcdTAxNjknOiAndScsXG4gICAgJ1xcdTFFNzknOiAndScsXG4gICAgJ1xcdTAxNkInOiAndScsXG4gICAgJ1xcdTFFN0InOiAndScsXG4gICAgJ1xcdTAxNkQnOiAndScsXG4gICAgJ1xcdTAwRkMnOiAndScsXG4gICAgJ1xcdTAxREMnOiAndScsXG4gICAgJ1xcdTAxRDgnOiAndScsXG4gICAgJ1xcdTAxRDYnOiAndScsXG4gICAgJ1xcdTAxREEnOiAndScsXG4gICAgJ1xcdTFFRTcnOiAndScsXG4gICAgJ1xcdTAxNkYnOiAndScsXG4gICAgJ1xcdTAxNzEnOiAndScsXG4gICAgJ1xcdTAxRDQnOiAndScsXG4gICAgJ1xcdTAyMTUnOiAndScsXG4gICAgJ1xcdTAyMTcnOiAndScsXG4gICAgJ1xcdTAxQjAnOiAndScsXG4gICAgJ1xcdTFFRUInOiAndScsXG4gICAgJ1xcdTFFRTknOiAndScsXG4gICAgJ1xcdTFFRUYnOiAndScsXG4gICAgJ1xcdTFFRUQnOiAndScsXG4gICAgJ1xcdTFFRjEnOiAndScsXG4gICAgJ1xcdTFFRTUnOiAndScsXG4gICAgJ1xcdTFFNzMnOiAndScsXG4gICAgJ1xcdTAxNzMnOiAndScsXG4gICAgJ1xcdTFFNzcnOiAndScsXG4gICAgJ1xcdTFFNzUnOiAndScsXG4gICAgJ1xcdTAyODknOiAndScsXG4gICAgJ1xcdTI0RTUnOiAndicsXG4gICAgJ1xcdUZGNTYnOiAndicsXG4gICAgJ1xcdTFFN0QnOiAndicsXG4gICAgJ1xcdTFFN0YnOiAndicsXG4gICAgJ1xcdTAyOEInOiAndicsXG4gICAgJ1xcdUE3NUYnOiAndicsXG4gICAgJ1xcdTAyOEMnOiAndicsXG4gICAgJ1xcdUE3NjEnOiAndnknLFxuICAgICdcXHUyNEU2JzogJ3cnLFxuICAgICdcXHVGRjU3JzogJ3cnLFxuICAgICdcXHUxRTgxJzogJ3cnLFxuICAgICdcXHUxRTgzJzogJ3cnLFxuICAgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUxRTg3JzogJ3cnLFxuICAgICdcXHUxRTg1JzogJ3cnLFxuICAgICdcXHUxRTk4JzogJ3cnLFxuICAgICdcXHUxRTg5JzogJ3cnLFxuICAgICdcXHUyQzczJzogJ3cnLFxuICAgICdcXHUyNEU3JzogJ3gnLFxuICAgICdcXHVGRjU4JzogJ3gnLFxuICAgICdcXHUxRThCJzogJ3gnLFxuICAgICdcXHUxRThEJzogJ3gnLFxuICAgICdcXHUyNEU4JzogJ3knLFxuICAgICdcXHVGRjU5JzogJ3knLFxuICAgICdcXHUxRUYzJzogJ3knLFxuICAgICdcXHUwMEZEJzogJ3knLFxuICAgICdcXHUwMTc3JzogJ3knLFxuICAgICdcXHUxRUY5JzogJ3knLFxuICAgICdcXHUwMjMzJzogJ3knLFxuICAgICdcXHUxRThGJzogJ3knLFxuICAgICdcXHUwMEZGJzogJ3knLFxuICAgICdcXHUxRUY3JzogJ3knLFxuICAgICdcXHUxRTk5JzogJ3knLFxuICAgICdcXHUxRUY1JzogJ3knLFxuICAgICdcXHUwMUI0JzogJ3knLFxuICAgICdcXHUwMjRGJzogJ3knLFxuICAgICdcXHUxRUZGJzogJ3knLFxuICAgICdcXHUyNEU5JzogJ3onLFxuICAgICdcXHVGRjVBJzogJ3onLFxuICAgICdcXHUwMTdBJzogJ3onLFxuICAgICdcXHUxRTkxJzogJ3onLFxuICAgICdcXHUwMTdDJzogJ3onLFxuICAgICdcXHUwMTdFJzogJ3onLFxuICAgICdcXHUxRTkzJzogJ3onLFxuICAgICdcXHUxRTk1JzogJ3onLFxuICAgICdcXHUwMUI2JzogJ3onLFxuICAgICdcXHUwMjI1JzogJ3onLFxuICAgICdcXHUwMjQwJzogJ3onLFxuICAgICdcXHUyQzZDJzogJ3onLFxuICAgICdcXHVBNzYzJzogJ3onLFxuICAgICdcXHUwMzg2JzogJ1xcdTAzOTEnLFxuICAgICdcXHUwMzg4JzogJ1xcdTAzOTUnLFxuICAgICdcXHUwMzg5JzogJ1xcdTAzOTcnLFxuICAgICdcXHUwMzhBJzogJ1xcdTAzOTknLFxuICAgICdcXHUwM0FBJzogJ1xcdTAzOTknLFxuICAgICdcXHUwMzhDJzogJ1xcdTAzOUYnLFxuICAgICdcXHUwMzhFJzogJ1xcdTAzQTUnLFxuICAgICdcXHUwM0FCJzogJ1xcdTAzQTUnLFxuICAgICdcXHUwMzhGJzogJ1xcdTAzQTknLFxuICAgICdcXHUwM0FDJzogJ1xcdTAzQjEnLFxuICAgICdcXHUwM0FEJzogJ1xcdTAzQjUnLFxuICAgICdcXHUwM0FFJzogJ1xcdTAzQjcnLFxuICAgICdcXHUwM0FGJzogJ1xcdTAzQjknLFxuICAgICdcXHUwM0NBJzogJ1xcdTAzQjknLFxuICAgICdcXHUwMzkwJzogJ1xcdTAzQjknLFxuICAgICdcXHUwM0NDJzogJ1xcdTAzQkYnLFxuICAgICdcXHUwM0NEJzogJ1xcdTAzQzUnLFxuICAgICdcXHUwM0NCJzogJ1xcdTAzQzUnLFxuICAgICdcXHUwM0IwJzogJ1xcdTAzQzUnLFxuICAgICdcXHUwM0M5JzogJ1xcdTAzQzknLFxuICAgICdcXHUwM0MyJzogJ1xcdTAzQzMnXG4gIH07XG5cbiAgcmV0dXJuIGRpYWNyaXRpY3M7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvYmFzZScsW1xuICAnLi4vdXRpbHMnXG5dLCBmdW5jdGlvbiAoVXRpbHMpIHtcbiAgZnVuY3Rpb24gQmFzZUFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgQmFzZUFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gIH1cblxuICBVdGlscy5FeHRlbmQoQmFzZUFkYXB0ZXIsIFV0aWxzLk9ic2VydmFibGUpO1xuXG4gIEJhc2VBZGFwdGVyLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYGN1cnJlbnRgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy4nKTtcbiAgfTtcblxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBxdWVyeWAgbWV0aG9kIG11c3QgYmUgZGVmaW5lZCBpbiBjaGlsZCBjbGFzc2VzLicpO1xuICB9O1xuXG4gIEJhc2VBZGFwdGVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIC8vIENhbiBiZSBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc2VzXG4gIH07XG5cbiAgQmFzZUFkYXB0ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ2FuIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcbiAgfTtcblxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuZ2VuZXJhdGVSZXN1bHRJZCA9IGZ1bmN0aW9uIChjb250YWluZXIsIGRhdGEpIHtcbiAgICB2YXIgaWQgPSBjb250YWluZXIuaWQgKyAnLXJlc3VsdC0nO1xuXG4gICAgaWQgKz0gVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcblxuICAgIGlmIChkYXRhLmlkICE9IG51bGwpIHtcbiAgICAgIGlkICs9ICctJyArIGRhdGEuaWQudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgKz0gJy0nICsgVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIHJldHVybiBCYXNlQWRhcHRlcjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9zZWxlY3QnLFtcbiAgJy4vYmFzZScsXG4gICcuLi91dGlscycsXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoQmFzZUFkYXB0ZXIsIFV0aWxzLCAkKSB7XG4gIGZ1bmN0aW9uIFNlbGVjdEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBTZWxlY3RBZGFwdGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICB9XG5cbiAgVXRpbHMuRXh0ZW5kKFNlbGVjdEFkYXB0ZXIsIEJhc2VBZGFwdGVyKTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIGRhdGEgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJzpzZWxlY3RlZCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRvcHRpb24gPSAkKHRoaXMpO1xuXG4gICAgICB2YXIgb3B0aW9uID0gc2VsZi5pdGVtKCRvcHRpb24pO1xuXG4gICAgICBkYXRhLnB1c2gob3B0aW9uKTtcbiAgICB9KTtcblxuICAgIGNhbGxiYWNrKGRhdGEpO1xuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGF0YS5zZWxlY3RlZCA9IHRydWU7XG5cbiAgICAvLyBJZiBkYXRhLmVsZW1lbnQgaXMgYSBET00gbm9kZSwgdXNlIGl0IGluc3RlYWRcbiAgICBpZiAoJChkYXRhLmVsZW1lbnQpLmlzKCdvcHRpb24nKSkge1xuICAgICAgZGF0YS5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UnKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50LnByb3AoJ211bHRpcGxlJykpIHtcbiAgICAgIHRoaXMuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcbiAgICAgICAgdmFyIHZhbCA9IFtdO1xuXG4gICAgICAgIGRhdGEgPSBbZGF0YV07XG4gICAgICAgIGRhdGEucHVzaC5hcHBseShkYXRhLCBjdXJyZW50RGF0YSk7XG5cbiAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgdmFyIGlkID0gZGF0YVtkXS5pZDtcblxuICAgICAgICAgIGlmICgkLmluQXJyYXkoaWQsIHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICB2YWwucHVzaChpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi4kZWxlbWVudC52YWwodmFsKTtcbiAgICAgICAgc2VsZi4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmFsID0gZGF0YS5pZDtcblxuICAgICAgdGhpcy4kZWxlbWVudC52YWwodmFsKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfVxuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLnVuc2VsZWN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQucHJvcCgnbXVsdGlwbGUnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRhdGEuc2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgIGlmICgkKGRhdGEuZWxlbWVudCkuaXMoJ29wdGlvbicpKSB7XG4gICAgICBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UnKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcbiAgICAgIHZhciB2YWwgPSBbXTtcblxuICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBjdXJyZW50RGF0YS5sZW5ndGg7IGQrKykge1xuICAgICAgICB2YXIgaWQgPSBjdXJyZW50RGF0YVtkXS5pZDtcblxuICAgICAgICBpZiAoaWQgIT09IGRhdGEuaWQgJiYgJC5pbkFycmF5KGlkLCB2YWwpID09PSAtMSkge1xuICAgICAgICAgIHZhbC5wdXNoKGlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLiRlbGVtZW50LnZhbCh2YWwpO1xuXG4gICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgICBjb250YWluZXIub24oJ3NlbGVjdCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYuc2VsZWN0KHBhcmFtcy5kYXRhKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLnVuc2VsZWN0KHBhcmFtcy5kYXRhKTtcbiAgICB9KTtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFJlbW92ZSBhbnl0aGluZyBhZGRlZCB0byBjaGlsZCBlbGVtZW50c1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgLy8gUmVtb3ZlIGFueSBjdXN0b20gZGF0YSBzZXQgYnkgU2VsZWN0MlxuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMsICdkYXRhJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBkYXRhID0gW107XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyICRvcHRpb25zID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbigpO1xuXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XG5cbiAgICAgIGlmICghJG9wdGlvbi5pcygnb3B0aW9uJykgJiYgISRvcHRpb24uaXMoJ29wdGdyb3VwJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3B0aW9uID0gc2VsZi5pdGVtKCRvcHRpb24pO1xuXG4gICAgICB2YXIgbWF0Y2hlcyA9IHNlbGYubWF0Y2hlcyhwYXJhbXMsIG9wdGlvbik7XG5cbiAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgICAgIGRhdGEucHVzaChtYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNhbGxiYWNrKHtcbiAgICAgIHJlc3VsdHM6IGRhdGFcbiAgICB9KTtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5hZGRPcHRpb25zID0gZnVuY3Rpb24gKCRvcHRpb25zKSB7XG4gICAgVXRpbHMuYXBwZW5kTWFueSh0aGlzLiRlbGVtZW50LCAkb3B0aW9ucyk7XG4gIH07XG5cbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgb3B0aW9uO1xuXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcbiAgICAgIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJyk7XG4gICAgICBvcHRpb24ubGFiZWwgPSBkYXRhLnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuXG4gICAgICBpZiAob3B0aW9uLnRleHRDb250ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gZGF0YS50ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uLmlubmVyVGV4dCA9IGRhdGEudGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5pZCkge1xuICAgICAgb3B0aW9uLnZhbHVlID0gZGF0YS5pZDtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5kaXNhYmxlZCkge1xuICAgICAgb3B0aW9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5zZWxlY3RlZCkge1xuICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS50aXRsZSkge1xuICAgICAgb3B0aW9uLnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICB9XG5cbiAgICB2YXIgJG9wdGlvbiA9ICQob3B0aW9uKTtcblxuICAgIHZhciBub3JtYWxpemVkRGF0YSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0oZGF0YSk7XG4gICAgbm9ybWFsaXplZERhdGEuZWxlbWVudCA9IG9wdGlvbjtcblxuICAgIC8vIE92ZXJyaWRlIHRoZSBvcHRpb24ncyBkYXRhIHdpdGggdGhlIGNvbWJpbmVkIGRhdGFcbiAgICAkLmRhdGEob3B0aW9uLCAnZGF0YScsIG5vcm1hbGl6ZWREYXRhKTtcblxuICAgIHJldHVybiAkb3B0aW9uO1xuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbiAoJG9wdGlvbikge1xuICAgIHZhciBkYXRhID0ge307XG5cbiAgICBkYXRhID0gJC5kYXRhKCRvcHRpb25bMF0sICdkYXRhJyk7XG5cbiAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoJG9wdGlvbi5pcygnb3B0aW9uJykpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIGlkOiAkb3B0aW9uLnZhbCgpLFxuICAgICAgICB0ZXh0OiAkb3B0aW9uLnRleHQoKSxcbiAgICAgICAgZGlzYWJsZWQ6ICRvcHRpb24ucHJvcCgnZGlzYWJsZWQnKSxcbiAgICAgICAgc2VsZWN0ZWQ6ICRvcHRpb24ucHJvcCgnc2VsZWN0ZWQnKSxcbiAgICAgICAgdGl0bGU6ICRvcHRpb24ucHJvcCgndGl0bGUnKVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCRvcHRpb24uaXMoJ29wdGdyb3VwJykpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIHRleHQ6ICRvcHRpb24ucHJvcCgnbGFiZWwnKSxcbiAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICB0aXRsZTogJG9wdGlvbi5wcm9wKCd0aXRsZScpXG4gICAgICB9O1xuXG4gICAgICB2YXIgJGNoaWxkcmVuID0gJG9wdGlvbi5jaGlsZHJlbignb3B0aW9uJyk7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcblxuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCAkY2hpbGRyZW4ubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgdmFyICRjaGlsZCA9ICQoJGNoaWxkcmVuW2NdKTtcblxuICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLml0ZW0oJGNoaWxkKTtcblxuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIGRhdGEgPSB0aGlzLl9ub3JtYWxpemVJdGVtKGRhdGEpO1xuICAgIGRhdGEuZWxlbWVudCA9ICRvcHRpb25bMF07XG5cbiAgICAkLmRhdGEoJG9wdGlvblswXSwgJ2RhdGEnLCBkYXRhKTtcblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLl9ub3JtYWxpemVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoISQuaXNQbGFpbk9iamVjdChpdGVtKSkge1xuICAgICAgaXRlbSA9IHtcbiAgICAgICAgaWQ6IGl0ZW0sXG4gICAgICAgIHRleHQ6IGl0ZW1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaXRlbSA9ICQuZXh0ZW5kKHt9LCB7XG4gICAgICB0ZXh0OiAnJ1xuICAgIH0sIGl0ZW0pO1xuXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIGlmIChpdGVtLmlkICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uaWQgPSBpdGVtLmlkLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0udGV4dCAhPSBudWxsKSB7XG4gICAgICBpdGVtLnRleHQgPSBpdGVtLnRleHQudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5fcmVzdWx0SWQgPT0gbnVsbCAmJiBpdGVtLmlkICYmIHRoaXMuY29udGFpbmVyICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uX3Jlc3VsdElkID0gdGhpcy5nZW5lcmF0ZVJlc3VsdElkKHRoaXMuY29udGFpbmVyLCBpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBpdGVtKTtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKHBhcmFtcywgZGF0YSkge1xuICAgIHZhciBtYXRjaGVyID0gdGhpcy5vcHRpb25zLmdldCgnbWF0Y2hlcicpO1xuXG4gICAgcmV0dXJuIG1hdGNoZXIocGFyYW1zLCBkYXRhKTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0QWRhcHRlcjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9hcnJheScsW1xuICAnLi9zZWxlY3QnLFxuICAnLi4vdXRpbHMnLFxuICAnanF1ZXJ5J1xuXSwgZnVuY3Rpb24gKFNlbGVjdEFkYXB0ZXIsIFV0aWxzLCAkKSB7XG4gIGZ1bmN0aW9uIEFycmF5QWRhcHRlciAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZ2V0KCdkYXRhJykgfHwgW107XG5cbiAgICBBcnJheUFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5hZGRPcHRpb25zKHRoaXMuY29udmVydFRvT3B0aW9ucyhkYXRhKSk7XG4gIH1cblxuICBVdGlscy5FeHRlbmQoQXJyYXlBZGFwdGVyLCBTZWxlY3RBZGFwdGVyKTtcblxuICBBcnJheUFkYXB0ZXIucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyICRvcHRpb24gPSB0aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpLmZpbHRlcihmdW5jdGlvbiAoaSwgZWxtKSB7XG4gICAgICByZXR1cm4gZWxtLnZhbHVlID09IGRhdGEuaWQudG9TdHJpbmcoKTtcbiAgICB9KTtcblxuICAgIGlmICgkb3B0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGRhdGEpO1xuXG4gICAgICB0aGlzLmFkZE9wdGlvbnMoJG9wdGlvbik7XG4gICAgfVxuXG4gICAgQXJyYXlBZGFwdGVyLl9fc3VwZXJfXy5zZWxlY3QuY2FsbCh0aGlzLCBkYXRhKTtcbiAgfTtcblxuICBBcnJheUFkYXB0ZXIucHJvdG90eXBlLmNvbnZlcnRUb09wdGlvbnMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciAkZXhpc3RpbmcgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpO1xuICAgIHZhciBleGlzdGluZ0lkcyA9ICRleGlzdGluZy5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNlbGYuaXRlbSgkKHRoaXMpKS5pZDtcbiAgICB9KS5nZXQoKTtcblxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xuXG4gICAgLy8gRmlsdGVyIG91dCBhbGwgaXRlbXMgZXhjZXB0IGZvciB0aGUgb25lIHBhc3NlZCBpbiB0aGUgYXJndW1lbnRcbiAgICBmdW5jdGlvbiBvbmx5SXRlbSAoaXRlbSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykudmFsKCkgPT0gaXRlbS5pZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0oZGF0YVtkXSk7XG5cbiAgICAgIC8vIFNraXAgaXRlbXMgd2hpY2ggd2VyZSBwcmUtbG9hZGVkLCBvbmx5IG1lcmdlIHRoZSBkYXRhXG4gICAgICBpZiAoJC5pbkFycmF5KGl0ZW0uaWQsIGV4aXN0aW5nSWRzKSA+PSAwKSB7XG4gICAgICAgIHZhciAkZXhpc3RpbmdPcHRpb24gPSAkZXhpc3RpbmcuZmlsdGVyKG9ubHlJdGVtKGl0ZW0pKTtcblxuICAgICAgICB2YXIgZXhpc3RpbmdEYXRhID0gdGhpcy5pdGVtKCRleGlzdGluZ09wdGlvbik7XG4gICAgICAgIHZhciBuZXdEYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGV4aXN0aW5nRGF0YSwgaXRlbSk7XG5cbiAgICAgICAgdmFyICRuZXdPcHRpb24gPSB0aGlzLm9wdGlvbihuZXdEYXRhKTtcblxuICAgICAgICAkZXhpc3RpbmdPcHRpb24ucmVwbGFjZVdpdGgoJG5ld09wdGlvbik7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciAkb3B0aW9uID0gdGhpcy5vcHRpb24oaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIHZhciAkY2hpbGRyZW4gPSB0aGlzLmNvbnZlcnRUb09wdGlvbnMoaXRlbS5jaGlsZHJlbik7XG5cbiAgICAgICAgVXRpbHMuYXBwZW5kTWFueSgkb3B0aW9uLCAkY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICAkb3B0aW9ucy5wdXNoKCRvcHRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiAkb3B0aW9ucztcbiAgfTtcblxuICByZXR1cm4gQXJyYXlBZGFwdGVyO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL2FqYXgnLFtcbiAgJy4vYXJyYXknLFxuICAnLi4vdXRpbHMnLFxuICAnanF1ZXJ5J1xuXSwgZnVuY3Rpb24gKEFycmF5QWRhcHRlciwgVXRpbHMsICQpIHtcbiAgZnVuY3Rpb24gQWpheEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5hamF4T3B0aW9ucyA9IHRoaXMuX2FwcGx5RGVmYXVsdHMob3B0aW9ucy5nZXQoJ2FqYXgnKSk7XG5cbiAgICBpZiAodGhpcy5hamF4T3B0aW9ucy5wcm9jZXNzUmVzdWx0cyAhPSBudWxsKSB7XG4gICAgICB0aGlzLnByb2Nlc3NSZXN1bHRzID0gdGhpcy5hamF4T3B0aW9ucy5wcm9jZXNzUmVzdWx0cztcbiAgICB9XG5cbiAgICBBamF4QWRhcHRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBVdGlscy5FeHRlbmQoQWpheEFkYXB0ZXIsIEFycmF5QWRhcHRlcik7XG5cbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLl9hcHBseURlZmF1bHRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICBkYXRhOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgcTogcGFyYW1zLnRlcm1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgdHJhbnNwb3J0OiBmdW5jdGlvbiAocGFyYW1zLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgIHZhciAkcmVxdWVzdCA9ICQuYWpheChwYXJhbXMpO1xuXG4gICAgICAgICRyZXF1ZXN0LnRoZW4oc3VjY2Vzcyk7XG4gICAgICAgICRyZXF1ZXN0LmZhaWwoZmFpbHVyZSk7XG5cbiAgICAgICAgcmV0dXJuICRyZXF1ZXN0O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zLCB0cnVlKTtcbiAgfTtcblxuICBBamF4QWRhcHRlci5wcm90b3R5cGUucHJvY2Vzc1Jlc3VsdHMgPSBmdW5jdGlvbiAocmVzdWx0cykge1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIEFqYXhBZGFwdGVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5fcmVxdWVzdCAhPSBudWxsKSB7XG4gICAgICAvLyBKU09OUCByZXF1ZXN0cyBjYW5ub3QgYWx3YXlzIGJlIGFib3J0ZWRcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24odGhpcy5fcmVxdWVzdC5hYm9ydCkpIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIHR5cGU6ICdHRVQnXG4gICAgfSwgdGhpcy5hamF4T3B0aW9ucyk7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudXJsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsLmNhbGwodGhpcy4kZWxlbWVudCwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0aW9ucy5kYXRhID0gb3B0aW9ucy5kYXRhLmNhbGwodGhpcy4kZWxlbWVudCwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0ICgpIHtcbiAgICAgIHZhciAkcmVxdWVzdCA9IG9wdGlvbnMudHJhbnNwb3J0KG9wdGlvbnMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gc2VsZi5wcm9jZXNzUmVzdWx0cyhkYXRhLCBwYXJhbXMpO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcmVzcG9uc2UgaW5jbHVkZWQgYSBgcmVzdWx0c2Aga2V5LlxuICAgICAgICAgIGlmICghcmVzdWx0cyB8fCAhcmVzdWx0cy5yZXN1bHRzIHx8ICEkLmlzQXJyYXkocmVzdWx0cy5yZXN1bHRzKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgJ1NlbGVjdDI6IFRoZSBBSkFYIHJlc3VsdHMgZGlkIG5vdCByZXR1cm4gYW4gYXJyYXkgaW4gdGhlICcgK1xuICAgICAgICAgICAgICAnYHJlc3VsdHNgIGtleSBvZiB0aGUgcmVzcG9uc2UuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETzogSGFuZGxlIEFKQVggZXJyb3JzXG4gICAgICB9KTtcblxuICAgICAgc2VsZi5fcmVxdWVzdCA9ICRyZXF1ZXN0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFqYXhPcHRpb25zLmRlbGF5ICYmIHBhcmFtcy50ZXJtICE9PSAnJykge1xuICAgICAgaWYgKHRoaXMuX3F1ZXJ5VGltZW91dCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3F1ZXJ5VGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3F1ZXJ5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlcXVlc3QsIHRoaXMuYWpheE9wdGlvbnMuZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBamF4QWRhcHRlcjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS90YWdzJyxbXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoJCkge1xuICBmdW5jdGlvbiBUYWdzIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdmFyIHRhZ3MgPSBvcHRpb25zLmdldCgndGFncycpO1xuXG4gICAgdmFyIGNyZWF0ZVRhZyA9IG9wdGlvbnMuZ2V0KCdjcmVhdGVUYWcnKTtcblxuICAgIGlmIChjcmVhdGVUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5jcmVhdGVUYWcgPSBjcmVhdGVUYWc7XG4gICAgfVxuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCQuaXNBcnJheSh0YWdzKSkge1xuICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0YWdzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgIHZhciB0YWcgPSB0YWdzW3RdO1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0odGFnKTtcblxuICAgICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXBwZW5kKCRvcHRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFRhZ3MucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuX3JlbW92ZU9sZFRhZ3MoKTtcblxuICAgIGlmIChwYXJhbXMudGVybSA9PSBudWxsIHx8IHBhcmFtcy5wYWdlICE9IG51bGwpIHtcbiAgICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBwZXIgKG9iaiwgY2hpbGQpIHtcbiAgICAgIHZhciBkYXRhID0gb2JqLnJlc3VsdHM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb3B0aW9uID0gZGF0YVtpXTtcblxuICAgICAgICB2YXIgY2hlY2tDaGlsZHJlbiA9IChcbiAgICAgICAgICBvcHRpb24uY2hpbGRyZW4gIT0gbnVsbCAmJlxuICAgICAgICAgICF3cmFwcGVyKHtcbiAgICAgICAgICAgIHJlc3VsdHM6IG9wdGlvbi5jaGlsZHJlblxuICAgICAgICAgIH0sIHRydWUpXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIGNoZWNrVGV4dCA9IG9wdGlvbi50ZXh0ID09PSBwYXJhbXMudGVybTtcblxuICAgICAgICBpZiAoY2hlY2tUZXh0IHx8IGNoZWNrQ2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYmouZGF0YSA9IGRhdGE7XG4gICAgICAgICAgY2FsbGJhY2sob2JqKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciB0YWcgPSBzZWxmLmNyZWF0ZVRhZyhwYXJhbXMpO1xuXG4gICAgICBpZiAodGFnICE9IG51bGwpIHtcbiAgICAgICAgdmFyICRvcHRpb24gPSBzZWxmLm9wdGlvbih0YWcpO1xuICAgICAgICAkb3B0aW9uLmF0dHIoJ2RhdGEtc2VsZWN0Mi10YWcnLCB0cnVlKTtcblxuICAgICAgICBzZWxmLmFkZE9wdGlvbnMoWyRvcHRpb25dKTtcblxuICAgICAgICBzZWxmLmluc2VydFRhZyhkYXRhLCB0YWcpO1xuICAgICAgfVxuXG4gICAgICBvYmoucmVzdWx0cyA9IGRhdGE7XG5cbiAgICAgIGNhbGxiYWNrKG9iaik7XG4gICAgfVxuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCB3cmFwcGVyKTtcbiAgfTtcblxuICBUYWdzLnByb3RvdHlwZS5jcmVhdGVUYWcgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMpIHtcbiAgICB2YXIgdGVybSA9ICQudHJpbShwYXJhbXMudGVybSk7XG5cbiAgICBpZiAodGVybSA9PT0gJycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpZDogdGVybSxcbiAgICAgIHRleHQ6IHRlcm1cbiAgICB9O1xuICB9O1xuXG4gIFRhZ3MucHJvdG90eXBlLmluc2VydFRhZyA9IGZ1bmN0aW9uIChfLCBkYXRhLCB0YWcpIHtcbiAgICBkYXRhLnVuc2hpZnQodGFnKTtcbiAgfTtcblxuICBUYWdzLnByb3RvdHlwZS5fcmVtb3ZlT2xkVGFncyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMuX2xhc3RUYWc7XG5cbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbltkYXRhLXNlbGVjdDItdGFnXScpO1xuXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhZ3M7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvdG9rZW5pemVyJyxbXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoJCkge1xuICBmdW5jdGlvbiBUb2tlbml6ZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgdG9rZW5pemVyID0gb3B0aW9ucy5nZXQoJ3Rva2VuaXplcicpO1xuXG4gICAgaWYgKHRva2VuaXplciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICB9XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBUb2tlbml6ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xuXG4gICAgdGhpcy4kc2VhcmNoID0gIGNvbnRhaW5lci5kcm9wZG93bi4kc2VhcmNoIHx8IGNvbnRhaW5lci5zZWxlY3Rpb24uJHNlYXJjaCB8fFxuICAgICAgJGNvbnRhaW5lci5maW5kKCcuc2VsZWN0Mi1zZWFyY2hfX2ZpZWxkJyk7XG4gIH07XG5cbiAgVG9rZW5pemVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZWxlY3QgKGRhdGEpIHtcbiAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJhbXMudGVybSA9IHBhcmFtcy50ZXJtIHx8ICcnO1xuXG4gICAgdmFyIHRva2VuRGF0YSA9IHRoaXMudG9rZW5pemVyKHBhcmFtcywgdGhpcy5vcHRpb25zLCBzZWxlY3QpO1xuXG4gICAgaWYgKHRva2VuRGF0YS50ZXJtICE9PSBwYXJhbXMudGVybSkge1xuICAgICAgLy8gUmVwbGFjZSB0aGUgc2VhcmNoIHRlcm0gaWYgd2UgaGF2ZSB0aGUgc2VhcmNoIGJveFxuICAgICAgaWYgKHRoaXMuJHNlYXJjaC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kc2VhcmNoLnZhbCh0b2tlbkRhdGEudGVybSk7XG4gICAgICAgIHRoaXMuJHNlYXJjaC5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICBwYXJhbXMudGVybSA9IHRva2VuRGF0YS50ZXJtO1xuICAgIH1cblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xuICB9O1xuXG4gIFRva2VuaXplci5wcm90b3R5cGUudG9rZW5pemVyID0gZnVuY3Rpb24gKF8sIHBhcmFtcywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VwYXJhdG9ycyA9IG9wdGlvbnMuZ2V0KCd0b2tlblNlcGFyYXRvcnMnKSB8fCBbXTtcbiAgICB2YXIgdGVybSA9IHBhcmFtcy50ZXJtO1xuICAgIHZhciBpID0gMDtcblxuICAgIHZhciBjcmVhdGVUYWcgPSB0aGlzLmNyZWF0ZVRhZyB8fCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogcGFyYW1zLnRlcm0sXG4gICAgICAgIHRleHQ6IHBhcmFtcy50ZXJtXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB3aGlsZSAoaSA8IHRlcm0ubGVuZ3RoKSB7XG4gICAgICB2YXIgdGVybUNoYXIgPSB0ZXJtW2ldO1xuXG4gICAgICBpZiAoJC5pbkFycmF5KHRlcm1DaGFyLCBzZXBhcmF0b3JzKSA9PT0gLTEpIHtcbiAgICAgICAgaSsrO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFydCA9IHRlcm0uc3Vic3RyKDAsIGkpO1xuICAgICAgdmFyIHBhcnRQYXJhbXMgPSAkLmV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgIHRlcm06IHBhcnRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZGF0YSA9IGNyZWF0ZVRhZyhwYXJ0UGFyYW1zKTtcblxuICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICBpKys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhkYXRhKTtcblxuICAgICAgLy8gUmVzZXQgdGhlIHRlcm0gdG8gbm90IGluY2x1ZGUgdGhlIHRva2VuaXplZCBwb3J0aW9uXG4gICAgICB0ZXJtID0gdGVybS5zdWJzdHIoaSArIDEpIHx8ICcnO1xuICAgICAgaSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRlcm06IHRlcm1cbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBUb2tlbml6ZXI7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvbWluaW11bUlucHV0TGVuZ3RoJyxbXG5cbl0sIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWluaW11bUlucHV0TGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5taW5pbXVtSW5wdXRMZW5ndGggPSBvcHRpb25zLmdldCgnbWluaW11bUlucHV0TGVuZ3RoJyk7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZSwgb3B0aW9ucyk7XG4gIH1cblxuICBNaW5pbXVtSW5wdXRMZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHBhcmFtcy50ZXJtID0gcGFyYW1zLnRlcm0gfHwgJyc7XG5cbiAgICBpZiAocGFyYW1zLnRlcm0ubGVuZ3RoIDwgdGhpcy5taW5pbXVtSW5wdXRMZW5ndGgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcigncmVzdWx0czptZXNzYWdlJywge1xuICAgICAgICBtZXNzYWdlOiAnaW5wdXRUb29TaG9ydCcsXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBtaW5pbXVtOiB0aGlzLm1pbmltdW1JbnB1dExlbmd0aCxcbiAgICAgICAgICBpbnB1dDogcGFyYW1zLnRlcm0sXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gTWluaW11bUlucHV0TGVuZ3RoO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL21heGltdW1JbnB1dExlbmd0aCcsW1xuXG5dLCBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1heGltdW1JbnB1dExlbmd0aCAoZGVjb3JhdGVkLCAkZSwgb3B0aW9ucykge1xuICAgIHRoaXMubWF4aW11bUlucHV0TGVuZ3RoID0gb3B0aW9ucy5nZXQoJ21heGltdW1JbnB1dExlbmd0aCcpO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgTWF4aW11bUlucHV0TGVuZ3RoLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBwYXJhbXMudGVybSA9IHBhcmFtcy50ZXJtIHx8ICcnO1xuXG4gICAgaWYgKHRoaXMubWF4aW11bUlucHV0TGVuZ3RoID4gMCAmJlxuICAgICAgICBwYXJhbXMudGVybS5sZW5ndGggPiB0aGlzLm1heGltdW1JbnB1dExlbmd0aCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdpbnB1dFRvb0xvbmcnLFxuICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgbWF4aW11bTogdGhpcy5tYXhpbXVtSW5wdXRMZW5ndGgsXG4gICAgICAgICAgaW5wdXQ6IHBhcmFtcy50ZXJtLFxuICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgcmV0dXJuIE1heGltdW1JbnB1dExlbmd0aDtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyxbXG5cbl0sIGZ1bmN0aW9uICgpe1xuICBmdW5jdGlvbiBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoID0gb3B0aW9ucy5nZXQoJ21heGltdW1TZWxlY3Rpb25MZW5ndGgnKTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcbiAgfVxuXG4gIE1heGltdW1TZWxlY3Rpb25MZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID1cbiAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gY3VycmVudERhdGEgIT0gbnVsbCA/IGN1cnJlbnREYXRhLmxlbmd0aCA6IDA7XG4gICAgICAgIGlmIChzZWxmLm1heGltdW1TZWxlY3Rpb25MZW5ndGggPiAwICYmXG4gICAgICAgICAgY291bnQgPj0gc2VsZi5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoKSB7XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnbWF4aW11bVNlbGVjdGVkJyxcbiAgICAgICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICAgICAgbWF4aW11bTogc2VsZi5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlY29yYXRlZC5jYWxsKHNlbGYsIHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1heGltdW1TZWxlY3Rpb25MZW5ndGg7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duJyxbXG4gICdqcXVlcnknLFxuICAnLi91dGlscydcbl0sIGZ1bmN0aW9uICgkLCBVdGlscykge1xuICBmdW5jdGlvbiBEcm9wZG93biAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIERyb3Bkb3duLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICB9XG5cbiAgVXRpbHMuRXh0ZW5kKERyb3Bkb3duLCBVdGlscy5PYnNlcnZhYmxlKTtcblxuICBEcm9wZG93bi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZHJvcGRvd24gPSAkKFxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1kcm9wZG93blwiPicgK1xuICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNcIj48L3NwYW4+JyArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuXG4gICAgJGRyb3Bkb3duLmF0dHIoJ2RpcicsIHRoaXMub3B0aW9ucy5nZXQoJ2RpcicpKTtcblxuICAgIHRoaXMuJGRyb3Bkb3duID0gJGRyb3Bkb3duO1xuXG4gICAgcmV0dXJuICRkcm9wZG93bjtcbiAgfTtcblxuICBEcm9wZG93bi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3Nlc1xuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uICgkZHJvcGRvd24sICRjb250YWluZXIpIHtcbiAgICAvLyBTaG91bGQgYmUgaW1wbG1lbnRlZCBpbiBzdWJjbGFzc2VzXG4gIH07XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBkcm9wZG93biBmcm9tIHRoZSBET01cbiAgICB0aGlzLiRkcm9wZG93bi5yZW1vdmUoKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd247XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL3NlYXJjaCcsW1xuICAnanF1ZXJ5JyxcbiAgJy4uL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIFNlYXJjaCAoKSB7IH1cblxuICBTZWFyY2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB2YXIgJHJlbmRlcmVkID0gZGVjb3JhdGVkLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgJHNlYXJjaCA9ICQoXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlYXJjaCBzZWxlY3QyLXNlYXJjaC0tZHJvcGRvd25cIj4nICtcbiAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlbGVjdDItc2VhcmNoX19maWVsZFwiIHR5cGU9XCJzZWFyY2hcIiB0YWJpbmRleD1cIi0xXCInICtcbiAgICAgICAgJyBhdXRvY29tcGxldGU9XCJvZmZcIiBhdXRvY29ycmVjdD1cIm9mZlwiIGF1dG9jYXBpdGFsaXplPVwib2ZmXCInICtcbiAgICAgICAgJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiByb2xlPVwidGV4dGJveFwiIC8+JyArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuXG4gICAgdGhpcy4kc2VhcmNoQ29udGFpbmVyID0gJHNlYXJjaDtcbiAgICB0aGlzLiRzZWFyY2ggPSAkc2VhcmNoLmZpbmQoJ2lucHV0Jyk7XG5cbiAgICAkcmVuZGVyZWQucHJlcGVuZCgkc2VhcmNoKTtcblxuICAgIHJldHVybiAkcmVuZGVyZWQ7XG4gIH07XG5cbiAgU2VhcmNoLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIHRoaXMuJHNlYXJjaC5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYudHJpZ2dlcigna2V5cHJlc3MnLCBldnQpO1xuXG4gICAgICBzZWxmLl9rZXlVcFByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcbiAgICB9KTtcblxuICAgIC8vIFdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50XG4gICAgLy8gVGhpcyB3aWxsIHByZXZlbnQgZG91YmxlLXRyaWdnZXJpbmcgb2YgZXZlbnRzIGZvciBicm93c2VycyB3aGljaCBzdXBwb3J0XG4gICAgLy8gYm90aCB0aGUgYGtleXVwYCBhbmQgYGlucHV0YCBldmVudHMuXG4gICAgdGhpcy4kc2VhcmNoLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIC8vIFVuYmluZCB0aGUgZHVwbGljYXRlZCBga2V5dXBgIGV2ZW50XG4gICAgICAkKHRoaXMpLm9mZigna2V5dXAnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHNlYXJjaC5vbigna2V5dXAgaW5wdXQnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLmhhbmRsZVNlYXJjaChldnQpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgMCk7XG5cbiAgICAgIHNlbGYuJHNlYXJjaC5mb2N1cygpO1xuXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuJHNlYXJjaC5mb2N1cygpO1xuICAgICAgfSwgMCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgLTEpO1xuXG4gICAgICBzZWxmLiRzZWFyY2gudmFsKCcnKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphbGwnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBpZiAocGFyYW1zLnF1ZXJ5LnRlcm0gPT0gbnVsbCB8fCBwYXJhbXMucXVlcnkudGVybSA9PT0gJycpIHtcbiAgICAgICAgdmFyIHNob3dTZWFyY2ggPSBzZWxmLnNob3dTZWFyY2gocGFyYW1zKTtcblxuICAgICAgICBpZiAoc2hvd1NlYXJjaCkge1xuICAgICAgICAgIHNlbGYuJHNlYXJjaENvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0Mi1zZWFyY2gtLWhpZGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLiRzZWFyY2hDb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItc2VhcmNoLS1oaWRlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBTZWFyY2gucHJvdG90eXBlLmhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoIXRoaXMuX2tleVVwUHJldmVudGVkKSB7XG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLiRzZWFyY2gudmFsKCk7XG5cbiAgICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7XG4gICAgICAgIHRlcm06IGlucHV0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9rZXlVcFByZXZlbnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFNlYXJjaC5wcm90b3R5cGUuc2hvd1NlYXJjaCA9IGZ1bmN0aW9uIChfLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gU2VhcmNoO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9oaWRlUGxhY2Vob2xkZXInLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBIaWRlUGxhY2Vob2xkZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKSB7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMubm9ybWFsaXplUGxhY2Vob2xkZXIob3B0aW9ucy5nZXQoJ3BsYWNlaG9sZGVyJykpO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKTtcbiAgfVxuXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xuICAgIGRhdGEucmVzdWx0cyA9IHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoZGF0YS5yZXN1bHRzKTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGRhdGEpO1xuICB9O1xuXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUubm9ybWFsaXplUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgcGxhY2Vob2xkZXIpIHtcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgcGxhY2Vob2xkZXIgPSB7XG4gICAgICAgIGlkOiAnJyxcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9O1xuXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUucmVtb3ZlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgZGF0YSkge1xuICAgIHZhciBtb2RpZmllZERhdGEgPSBkYXRhLnNsaWNlKDApO1xuXG4gICAgZm9yICh2YXIgZCA9IGRhdGEubGVuZ3RoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgIHZhciBpdGVtID0gZGF0YVtkXTtcblxuICAgICAgaWYgKHRoaXMucGxhY2Vob2xkZXIuaWQgPT09IGl0ZW0uaWQpIHtcbiAgICAgICAgbW9kaWZpZWREYXRhLnNwbGljZShkLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW9kaWZpZWREYXRhO1xuICB9O1xuXG4gIHJldHVybiBIaWRlUGxhY2Vob2xkZXI7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2luZmluaXRlU2Nyb2xsJyxbXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoJCkge1xuICBmdW5jdGlvbiBJbmZpbml0ZVNjcm9sbCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcbiAgICB0aGlzLmxhc3RQYXJhbXMgPSB7fTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XG5cbiAgICB0aGlzLiRsb2FkaW5nTW9yZSA9IHRoaXMuY3JlYXRlTG9hZGluZ01vcmUoKTtcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XG4gICAgdGhpcy4kbG9hZGluZ01vcmUucmVtb3ZlKCk7XG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcblxuICAgIGlmICh0aGlzLnNob3dMb2FkaW5nTW9yZShkYXRhKSkge1xuICAgICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQodGhpcy4kbG9hZGluZ01vcmUpO1xuICAgIH1cbiAgfTtcblxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XG5cbiAgICBjb250YWluZXIub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5sYXN0UGFyYW1zID0gcGFyYW1zO1xuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5sYXN0UGFyYW1zID0gcGFyYW1zO1xuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHJlc3VsdHMub24oJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc0xvYWRNb3JlVmlzaWJsZSA9ICQuY29udGFpbnMoXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgc2VsZi4kbG9hZGluZ01vcmVbMF1cbiAgICAgICk7XG5cbiAgICAgIGlmIChzZWxmLmxvYWRpbmcgfHwgIWlzTG9hZE1vcmVWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLm9mZnNldCgpLnRvcCArXG4gICAgICAgIHNlbGYuJHJlc3VsdHMub3V0ZXJIZWlnaHQoZmFsc2UpO1xuICAgICAgdmFyIGxvYWRpbmdNb3JlT2Zmc2V0ID0gc2VsZi4kbG9hZGluZ01vcmUub2Zmc2V0KCkudG9wICtcbiAgICAgICAgc2VsZi4kbG9hZGluZ01vcmUub3V0ZXJIZWlnaHQoZmFsc2UpO1xuXG4gICAgICBpZiAoY3VycmVudE9mZnNldCArIDUwID49IGxvYWRpbmdNb3JlT2Zmc2V0KSB7XG4gICAgICAgIHNlbGYubG9hZE1vcmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUubG9hZE1vcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcblxuICAgIHZhciBwYXJhbXMgPSAkLmV4dGVuZCh7fSwge3BhZ2U6IDF9LCB0aGlzLmxhc3RQYXJhbXMpO1xuXG4gICAgcGFyYW1zLnBhZ2UrKztcblxuICAgIHRoaXMudHJpZ2dlcigncXVlcnk6YXBwZW5kJywgcGFyYW1zKTtcbiAgfTtcblxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUuc2hvd0xvYWRpbmdNb3JlID0gZnVuY3Rpb24gKF8sIGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5wYWdpbmF0aW9uICYmIGRhdGEucGFnaW5hdGlvbi5tb3JlO1xuICB9O1xuXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5jcmVhdGVMb2FkaW5nTW9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJG9wdGlvbiA9ICQoXG4gICAgICAnPGxpICcgK1xuICAgICAgJ2NsYXNzPVwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb24gc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWxvYWQtbW9yZVwiJyArXG4gICAgICAncm9sZT1cInRyZWVpdGVtXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIj48L2xpPidcbiAgICApO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0cmFuc2xhdGlvbnMnKS5nZXQoJ2xvYWRpbmdNb3JlJyk7XG5cbiAgICAkb3B0aW9uLmh0bWwobWVzc2FnZSh0aGlzLmxhc3RQYXJhbXMpKTtcblxuICAgIHJldHVybiAkb3B0aW9uO1xuICB9O1xuXG4gIHJldHVybiBJbmZpbml0ZVNjcm9sbDtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vYXR0YWNoQm9keScsW1xuICAnanF1ZXJ5JyxcbiAgJy4uL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIEF0dGFjaEJvZHkgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRkcm9wZG93blBhcmVudCA9IG9wdGlvbnMuZ2V0KCdkcm9wZG93blBhcmVudCcpIHx8ICQoZG9jdW1lbnQuYm9keSk7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHNldHVwUmVzdWx0c0V2ZW50cyA9IGZhbHNlO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuX3Nob3dEcm9wZG93bigpO1xuICAgICAgc2VsZi5fYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyKGNvbnRhaW5lcik7XG5cbiAgICAgIGlmICghc2V0dXBSZXN1bHRzRXZlbnRzKSB7XG4gICAgICAgIHNldHVwUmVzdWx0c0V2ZW50cyA9IHRydWU7XG5cbiAgICAgICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFsbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFwcGVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5faGlkZURyb3Bkb3duKCk7XG4gICAgICBzZWxmLl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLnJlbW92ZSgpO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgJGRyb3Bkb3duLCAkY29udGFpbmVyKSB7XG4gICAgLy8gQ2xvbmUgYWxsIG9mIHRoZSBjb250YWluZXIgY2xhc3Nlc1xuICAgICRkcm9wZG93bi5hdHRyKCdjbGFzcycsICRjb250YWluZXIuYXR0cignY2xhc3MnKSk7XG5cbiAgICAkZHJvcGRvd24ucmVtb3ZlQ2xhc3MoJ3NlbGVjdDInKTtcbiAgICAkZHJvcGRvd24uYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XG5cbiAgICAkZHJvcGRvd24uY3NzKHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAtOTk5OTk5XG4gICAgfSk7XG5cbiAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB2YXIgJGNvbnRhaW5lciA9ICQoJzxzcGFuPjwvc3Bhbj4nKTtcblxuICAgIHZhciAkZHJvcGRvd24gPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcbiAgICAkY29udGFpbmVyLmFwcGVuZCgkZHJvcGRvd24pO1xuXG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIgPSAkY29udGFpbmVyO1xuXG4gICAgcmV0dXJuICRjb250YWluZXI7XG4gIH07XG5cbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX2hpZGVEcm9wZG93biA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5kZXRhY2goKTtcbiAgfTtcblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyID1cbiAgICAgIGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBzY3JvbGxFdmVudCA9ICdzY3JvbGwuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xuICAgIHZhciByZXNpemVFdmVudCA9ICdyZXNpemUuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xuICAgIHZhciBvcmllbnRhdGlvbkV2ZW50ID0gJ29yaWVudGF0aW9uY2hhbmdlLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcblxuICAgIHZhciAkd2F0Y2hlcnMgPSB0aGlzLiRjb250YWluZXIucGFyZW50cygpLmZpbHRlcihVdGlscy5oYXNTY3JvbGwpO1xuICAgICR3YXRjaGVycy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykuZGF0YSgnc2VsZWN0Mi1zY3JvbGwtcG9zaXRpb24nLCB7XG4gICAgICAgIHg6ICQodGhpcykuc2Nyb2xsTGVmdCgpLFxuICAgICAgICB5OiAkKHRoaXMpLnNjcm9sbFRvcCgpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgICR3YXRjaGVycy5vbihzY3JvbGxFdmVudCwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAkKHRoaXMpLmRhdGEoJ3NlbGVjdDItc2Nyb2xsLXBvc2l0aW9uJyk7XG4gICAgICAkKHRoaXMpLnNjcm9sbFRvcChwb3NpdGlvbi55KTtcbiAgICB9KTtcblxuICAgICQod2luZG93KS5vbihzY3JvbGxFdmVudCArICcgJyArIHJlc2l6ZUV2ZW50ICsgJyAnICsgb3JpZW50YXRpb25FdmVudCxcbiAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xuICAgIH0pO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIgPVxuICAgICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyKSB7XG4gICAgdmFyIHNjcm9sbEV2ZW50ID0gJ3Njcm9sbC5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XG4gICAgdmFyIHJlc2l6ZUV2ZW50ID0gJ3Jlc2l6ZS5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XG4gICAgdmFyIG9yaWVudGF0aW9uRXZlbnQgPSAnb3JpZW50YXRpb25jaGFuZ2Uuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xuXG4gICAgdmFyICR3YXRjaGVycyA9IHRoaXMuJGNvbnRhaW5lci5wYXJlbnRzKCkuZmlsdGVyKFV0aWxzLmhhc1Njcm9sbCk7XG4gICAgJHdhdGNoZXJzLm9mZihzY3JvbGxFdmVudCk7XG5cbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbEV2ZW50ICsgJyAnICsgcmVzaXplRXZlbnQgKyAnICcgKyBvcmllbnRhdGlvbkV2ZW50KTtcbiAgfTtcblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fcG9zaXRpb25Ecm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHdpbmRvdyA9ICQod2luZG93KTtcblxuICAgIHZhciBpc0N1cnJlbnRseUFib3ZlID0gdGhpcy4kZHJvcGRvd24uaGFzQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWFib3ZlJyk7XG4gICAgdmFyIGlzQ3VycmVudGx5QmVsb3cgPSB0aGlzLiRkcm9wZG93bi5oYXNDbGFzcygnc2VsZWN0Mi1kcm9wZG93bi0tYmVsb3cnKTtcblxuICAgIHZhciBuZXdEaXJlY3Rpb24gPSBudWxsO1xuXG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy4kY29udGFpbmVyLnBvc2l0aW9uKCk7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKTtcblxuICAgIG9mZnNldC5ib3R0b20gPSBvZmZzZXQudG9wICsgdGhpcy4kY29udGFpbmVyLm91dGVySGVpZ2h0KGZhbHNlKTtcblxuICAgIHZhciBjb250YWluZXIgPSB7XG4gICAgICBoZWlnaHQ6IHRoaXMuJGNvbnRhaW5lci5vdXRlckhlaWdodChmYWxzZSlcbiAgICB9O1xuXG4gICAgY29udGFpbmVyLnRvcCA9IG9mZnNldC50b3A7XG4gICAgY29udGFpbmVyLmJvdHRvbSA9IG9mZnNldC50b3AgKyBjb250YWluZXIuaGVpZ2h0O1xuXG4gICAgdmFyIGRyb3Bkb3duID0ge1xuICAgICAgaGVpZ2h0OiB0aGlzLiRkcm9wZG93bi5vdXRlckhlaWdodChmYWxzZSlcbiAgICB9O1xuXG4gICAgdmFyIHZpZXdwb3J0ID0ge1xuICAgICAgdG9wOiAkd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgYm90dG9tOiAkd2luZG93LnNjcm9sbFRvcCgpICsgJHdpbmRvdy5oZWlnaHQoKVxuICAgIH07XG5cbiAgICB2YXIgZW5vdWdoUm9vbUFib3ZlID0gdmlld3BvcnQudG9wIDwgKG9mZnNldC50b3AgLSBkcm9wZG93bi5oZWlnaHQpO1xuICAgIHZhciBlbm91Z2hSb29tQmVsb3cgPSB2aWV3cG9ydC5ib3R0b20gPiAob2Zmc2V0LmJvdHRvbSArIGRyb3Bkb3duLmhlaWdodCk7XG5cbiAgICB2YXIgY3NzID0ge1xuICAgICAgbGVmdDogb2Zmc2V0LmxlZnQsXG4gICAgICB0b3A6IGNvbnRhaW5lci5ib3R0b21cbiAgICB9O1xuXG4gICAgLy8gRml4IHBvc2l0aW9uaW5nIHdpdGggc3RhdGljIHBhcmVudHNcbiAgICBpZiAodGhpcy4kZHJvcGRvd25QYXJlbnRbMF0uc3R5bGUucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICB2YXIgcGFyZW50T2Zmc2V0ID0gdGhpcy4kZHJvcGRvd25QYXJlbnQub2Zmc2V0KCk7XG5cbiAgICAgIGNzcy50b3AgLT0gcGFyZW50T2Zmc2V0LnRvcDtcbiAgICAgIGNzcy5sZWZ0IC09IHBhcmVudE9mZnNldC5sZWZ0O1xuICAgIH1cblxuICAgIGlmICghaXNDdXJyZW50bHlBYm92ZSAmJiAhaXNDdXJyZW50bHlCZWxvdykge1xuICAgICAgbmV3RGlyZWN0aW9uID0gJ2JlbG93JztcbiAgICB9XG5cbiAgICBpZiAoIWVub3VnaFJvb21CZWxvdyAmJiBlbm91Z2hSb29tQWJvdmUgJiYgIWlzQ3VycmVudGx5QWJvdmUpIHtcbiAgICAgIG5ld0RpcmVjdGlvbiA9ICdhYm92ZSc7XG4gICAgfSBlbHNlIGlmICghZW5vdWdoUm9vbUFib3ZlICYmIGVub3VnaFJvb21CZWxvdyAmJiBpc0N1cnJlbnRseUFib3ZlKSB7XG4gICAgICBuZXdEaXJlY3Rpb24gPSAnYmVsb3cnO1xuICAgIH1cblxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT0gJ2Fib3ZlJyB8fFxuICAgICAgKGlzQ3VycmVudGx5QWJvdmUgJiYgbmV3RGlyZWN0aW9uICE9PSAnYmVsb3cnKSkge1xuICAgICAgY3NzLnRvcCA9IGNvbnRhaW5lci50b3AgLSBkcm9wZG93bi5oZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKG5ld0RpcmVjdGlvbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLiRkcm9wZG93blxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWJlbG93IHNlbGVjdDItZHJvcGRvd24tLWFib3ZlJylcbiAgICAgICAgLmFkZENsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS0nICsgbmV3RGlyZWN0aW9uKTtcbiAgICAgIHRoaXMuJGNvbnRhaW5lclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1iZWxvdyBzZWxlY3QyLWNvbnRhaW5lci0tYWJvdmUnKVxuICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS0nICsgbmV3RGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5jc3MoY3NzKTtcbiAgfTtcblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fcmVzaXplRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNzcyA9IHtcbiAgICAgIHdpZHRoOiB0aGlzLiRjb250YWluZXIub3V0ZXJXaWR0aChmYWxzZSkgKyAncHgnXG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkcm9wZG93bkF1dG9XaWR0aCcpKSB7XG4gICAgICBjc3MubWluV2lkdGggPSBjc3Mud2lkdGg7XG4gICAgICBjc3Mud2lkdGggPSAnYXV0byc7XG4gICAgfVxuXG4gICAgdGhpcy4kZHJvcGRvd24uY3NzKGNzcyk7XG4gIH07XG5cbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX3Nob3dEcm9wZG93biA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmRUbyh0aGlzLiRkcm9wZG93blBhcmVudCk7XG5cbiAgICB0aGlzLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgdGhpcy5fcmVzaXplRHJvcGRvd24oKTtcbiAgfTtcblxuICByZXR1cm4gQXR0YWNoQm9keTtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBjb3VudFJlc3VsdHMgKGRhdGEpIHtcbiAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGRhdGFbZF07XG5cbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIGNvdW50ICs9IGNvdW50UmVzdWx0cyhpdGVtLmNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgZnVuY3Rpb24gTWluaW11bVJlc3VsdHNGb3JTZWFyY2ggKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKSB7XG4gICAgdGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA9IG9wdGlvbnMuZ2V0KCdtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCcpO1xuXG4gICAgaWYgKHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggPCAwKSB7XG4gICAgICB0aGlzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoID0gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKTtcbiAgfVxuXG4gIE1pbmltdW1SZXN1bHRzRm9yU2VhcmNoLnByb3RvdHlwZS5zaG93U2VhcmNoID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zKSB7XG4gICAgaWYgKGNvdW50UmVzdWx0cyhwYXJhbXMuZGF0YS5yZXN1bHRzKSA8IHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2gpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgfTtcblxuICByZXR1cm4gTWluaW11bVJlc3VsdHNGb3JTZWFyY2g7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL3NlbGVjdE9uQ2xvc2UnLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZWxlY3RPbkNsb3NlICgpIHsgfVxuXG4gIFNlbGVjdE9uQ2xvc2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xuXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuX2hhbmRsZVNlbGVjdE9uQ2xvc2UoKTtcbiAgICB9KTtcbiAgfTtcblxuICBTZWxlY3RPbkNsb3NlLnByb3RvdHlwZS5faGFuZGxlU2VsZWN0T25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGhpZ2hsaWdodGVkUmVzdWx0cyA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XG5cbiAgICAvLyBPbmx5IHNlbGVjdCBoaWdobGlnaHRlZCByZXN1bHRzXG4gICAgaWYgKCRoaWdobGlnaHRlZFJlc3VsdHMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gJGhpZ2hsaWdodGVkUmVzdWx0cy5kYXRhKCdkYXRhJyk7XG5cbiAgICAvLyBEb24ndCByZS1zZWxlY3QgYWxyZWFkeSBzZWxlY3RlZCByZXN1bHRlXG4gICAgaWYgKFxuICAgICAgKGRhdGEuZWxlbWVudCAhPSBudWxsICYmIGRhdGEuZWxlbWVudC5zZWxlY3RlZCkgfHxcbiAgICAgIChkYXRhLmVsZW1lbnQgPT0gbnVsbCAmJiBkYXRhLnNlbGVjdGVkKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignc2VsZWN0Jywge1xuICAgICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdE9uQ2xvc2U7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2Nsb3NlT25TZWxlY3QnLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDbG9zZU9uU2VsZWN0ICgpIHsgfVxuXG4gIENsb3NlT25TZWxlY3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xuXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLl9zZWxlY3RUcmlnZ2VyZWQoZXZ0KTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLl9zZWxlY3RUcmlnZ2VyZWQoZXZ0KTtcbiAgICB9KTtcbiAgfTtcblxuICBDbG9zZU9uU2VsZWN0LnByb3RvdHlwZS5fc2VsZWN0VHJpZ2dlcmVkID0gZnVuY3Rpb24gKF8sIGV2dCkge1xuICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gZXZ0Lm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAvLyBEb24ndCBjbG9zZSBpZiB0aGUgY29udHJvbCBrZXkgaXMgYmVpbmcgaGVsZFxuICAgIGlmIChvcmlnaW5hbEV2ZW50ICYmIG9yaWdpbmFsRXZlbnQuY3RybEtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignY2xvc2UnLCB7fSk7XG4gIH07XG5cbiAgcmV0dXJuIENsb3NlT25TZWxlY3Q7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2kxOG4vZW4nLFtdLGZ1bmN0aW9uICgpIHtcbiAgLy8gRW5nbGlzaFxuICByZXR1cm4ge1xuICAgIGVycm9yTG9hZGluZzogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICdUaGUgcmVzdWx0cyBjb3VsZCBub3QgYmUgbG9hZGVkLic7XG4gICAgfSxcbiAgICBpbnB1dFRvb0xvbmc6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICB2YXIgb3ZlckNoYXJzID0gYXJncy5pbnB1dC5sZW5ndGggLSBhcmdzLm1heGltdW07XG5cbiAgICAgIHZhciBtZXNzYWdlID0gJ1BsZWFzZSBkZWxldGUgJyArIG92ZXJDaGFycyArICcgY2hhcmFjdGVyJztcblxuICAgICAgaWYgKG92ZXJDaGFycyAhPSAxKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJ3MnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGlucHV0VG9vU2hvcnQ6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICB2YXIgcmVtYWluaW5nQ2hhcnMgPSBhcmdzLm1pbmltdW0gLSBhcmdzLmlucHV0Lmxlbmd0aDtcblxuICAgICAgdmFyIG1lc3NhZ2UgPSAnUGxlYXNlIGVudGVyICcgKyByZW1haW5pbmdDaGFycyArICcgb3IgbW9yZSBjaGFyYWN0ZXJzJztcblxuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBsb2FkaW5nTW9yZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICdMb2FkaW5nIG1vcmUgcmVzdWx0c+KApic7XG4gICAgfSxcbiAgICBtYXhpbXVtU2VsZWN0ZWQ6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdZb3UgY2FuIG9ubHkgc2VsZWN0ICcgKyBhcmdzLm1heGltdW0gKyAnIGl0ZW0nO1xuXG4gICAgICBpZiAoYXJncy5tYXhpbXVtICE9IDEpIHtcbiAgICAgICAgbWVzc2FnZSArPSAncyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgbm9SZXN1bHRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ05vIHJlc3VsdHMgZm91bmQnO1xuICAgIH0sXG4gICAgc2VhcmNoaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ1NlYXJjaGluZ+KApic7XG4gICAgfVxuICB9O1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kZWZhdWx0cycsW1xuICAnanF1ZXJ5JyxcbiAgJ3JlcXVpcmUnLFxuXG4gICcuL3Jlc3VsdHMnLFxuXG4gICcuL3NlbGVjdGlvbi9zaW5nbGUnLFxuICAnLi9zZWxlY3Rpb24vbXVsdGlwbGUnLFxuICAnLi9zZWxlY3Rpb24vcGxhY2Vob2xkZXInLFxuICAnLi9zZWxlY3Rpb24vYWxsb3dDbGVhcicsXG4gICcuL3NlbGVjdGlvbi9zZWFyY2gnLFxuICAnLi9zZWxlY3Rpb24vZXZlbnRSZWxheScsXG5cbiAgJy4vdXRpbHMnLFxuICAnLi90cmFuc2xhdGlvbicsXG4gICcuL2RpYWNyaXRpY3MnLFxuXG4gICcuL2RhdGEvc2VsZWN0JyxcbiAgJy4vZGF0YS9hcnJheScsXG4gICcuL2RhdGEvYWpheCcsXG4gICcuL2RhdGEvdGFncycsXG4gICcuL2RhdGEvdG9rZW5pemVyJyxcbiAgJy4vZGF0YS9taW5pbXVtSW5wdXRMZW5ndGgnLFxuICAnLi9kYXRhL21heGltdW1JbnB1dExlbmd0aCcsXG4gICcuL2RhdGEvbWF4aW11bVNlbGVjdGlvbkxlbmd0aCcsXG5cbiAgJy4vZHJvcGRvd24nLFxuICAnLi9kcm9wZG93bi9zZWFyY2gnLFxuICAnLi9kcm9wZG93bi9oaWRlUGxhY2Vob2xkZXInLFxuICAnLi9kcm9wZG93bi9pbmZpbml0ZVNjcm9sbCcsXG4gICcuL2Ryb3Bkb3duL2F0dGFjaEJvZHknLFxuICAnLi9kcm9wZG93bi9taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCcsXG4gICcuL2Ryb3Bkb3duL3NlbGVjdE9uQ2xvc2UnLFxuICAnLi9kcm9wZG93bi9jbG9zZU9uU2VsZWN0JyxcblxuICAnLi9pMThuL2VuJ1xuXSwgZnVuY3Rpb24gKCQsIHJlcXVpcmUsXG5cbiAgICAgICAgICAgICBSZXN1bHRzTGlzdCxcblxuICAgICAgICAgICAgIFNpbmdsZVNlbGVjdGlvbiwgTXVsdGlwbGVTZWxlY3Rpb24sIFBsYWNlaG9sZGVyLCBBbGxvd0NsZWFyLFxuICAgICAgICAgICAgIFNlbGVjdGlvblNlYXJjaCwgRXZlbnRSZWxheSxcblxuICAgICAgICAgICAgIFV0aWxzLCBUcmFuc2xhdGlvbiwgRElBQ1JJVElDUyxcblxuICAgICAgICAgICAgIFNlbGVjdERhdGEsIEFycmF5RGF0YSwgQWpheERhdGEsIFRhZ3MsIFRva2VuaXplcixcbiAgICAgICAgICAgICBNaW5pbXVtSW5wdXRMZW5ndGgsIE1heGltdW1JbnB1dExlbmd0aCwgTWF4aW11bVNlbGVjdGlvbkxlbmd0aCxcblxuICAgICAgICAgICAgIERyb3Bkb3duLCBEcm9wZG93blNlYXJjaCwgSGlkZVBsYWNlaG9sZGVyLCBJbmZpbml0ZVNjcm9sbCxcbiAgICAgICAgICAgICBBdHRhY2hCb2R5LCBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCwgU2VsZWN0T25DbG9zZSwgQ2xvc2VPblNlbGVjdCxcblxuICAgICAgICAgICAgIEVuZ2xpc2hUcmFuc2xhdGlvbikge1xuICBmdW5jdGlvbiBEZWZhdWx0cyAoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgRGVmYXVsdHMucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YUFkYXB0ZXIgPT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuYWpheCAhPSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBBamF4RGF0YTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IEFycmF5RGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBTZWxlY3REYXRhO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5taW5pbXVtSW5wdXRMZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxuICAgICAgICAgIE1pbmltdW1JbnB1dExlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5tYXhpbXVtSW5wdXRMZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxuICAgICAgICAgIE1heGltdW1JbnB1dExlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoID4gMCkge1xuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcbiAgICAgICAgICBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRhZ3MpIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKG9wdGlvbnMuZGF0YUFkYXB0ZXIsIFRhZ3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50b2tlblNlcGFyYXRvcnMgIT0gbnVsbCB8fCBvcHRpb25zLnRva2VuaXplciAhPSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxuICAgICAgICAgIFRva2VuaXplclxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5xdWVyeSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBRdWVyeSA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9xdWVyeScpO1xuXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxuICAgICAgICAgIFF1ZXJ5XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmluaXRTZWxlY3Rpb24gIT0gbnVsbCkge1xuICAgICAgICB2YXIgSW5pdFNlbGVjdGlvbiA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9pbml0U2VsZWN0aW9uJyk7XG5cbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXG4gICAgICAgICAgSW5pdFNlbGVjdGlvblxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJlc3VsdHNBZGFwdGVyID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBSZXN1bHRzTGlzdDtcblxuICAgICAgaWYgKG9wdGlvbnMuYWpheCAhPSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyLFxuICAgICAgICAgIEluZmluaXRlU2Nyb2xsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIsXG4gICAgICAgICAgSGlkZVBsYWNlaG9sZGVyXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnNlbGVjdE9uQ2xvc2UpIHtcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIsXG4gICAgICAgICAgU2VsZWN0T25DbG9zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9PSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5tdWx0aXBsZSkge1xuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IERyb3Bkb3duO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIFNlYXJjaGFibGVEcm9wZG93biA9IFV0aWxzLkRlY29yYXRlKERyb3Bkb3duLCBEcm9wZG93blNlYXJjaCk7XG5cbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBTZWFyY2hhYmxlRHJvcGRvd247XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoICE9PSAwKSB7XG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXG4gICAgICAgICAgTWluaW11bVJlc3VsdHNGb3JTZWFyY2hcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPblNlbGVjdCkge1xuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyLFxuICAgICAgICAgIENsb3NlT25TZWxlY3RcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQ3NzQ2xhc3MgIT0gbnVsbCB8fFxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQ3NzICE9IG51bGwgfHxcbiAgICAgICAgb3B0aW9ucy5hZGFwdERyb3Bkb3duQ3NzQ2xhc3MgIT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHZhciBEcm9wZG93bkNTUyA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9kcm9wZG93bkNzcycpO1xuXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXG4gICAgICAgICAgRHJvcGRvd25DU1NcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXG4gICAgICAgIEF0dGFjaEJvZHlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9PSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5tdWx0aXBsZSkge1xuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBNdWx0aXBsZVNlbGVjdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFNpbmdsZVNlbGVjdGlvbjtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHRoZSBwbGFjZWhvbGRlciBtaXhpbiBpZiBhIHBsYWNlaG9sZGVyIHdhcyBzcGVjaWZpZWRcbiAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxuICAgICAgICAgIFBsYWNlaG9sZGVyXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmFsbG93Q2xlYXIpIHtcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxuICAgICAgICAgIEFsbG93Q2xlYXJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUpIHtcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxuICAgICAgICAgIFNlbGVjdGlvblNlYXJjaFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG9wdGlvbnMuY29udGFpbmVyQ3NzQ2xhc3MgIT0gbnVsbCB8fFxuICAgICAgICBvcHRpb25zLmNvbnRhaW5lckNzcyAhPSBudWxsIHx8XG4gICAgICAgIG9wdGlvbnMuYWRhcHRDb250YWluZXJDc3NDbGFzcyAhPSBudWxsXG4gICAgICApIHtcbiAgICAgICAgdmFyIENvbnRhaW5lckNTUyA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9jb250YWluZXJDc3MnKTtcblxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXG4gICAgICAgICAgQ29udGFpbmVyQ1NTXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXG4gICAgICAgIEV2ZW50UmVsYXlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmxhbmd1YWdlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGxhbmd1YWdlIGlzIHNwZWNpZmllZCB3aXRoIGEgcmVnaW9uXG4gICAgICBpZiAob3B0aW9ucy5sYW5ndWFnZS5pbmRleE9mKCctJykgPiAwKSB7XG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIHJlZ2lvbiBpbmZvcm1hdGlvbiBpZiBpdCBpcyBpbmNsdWRlZFxuICAgICAgICB2YXIgbGFuZ3VhZ2VQYXJ0cyA9IG9wdGlvbnMubGFuZ3VhZ2Uuc3BsaXQoJy0nKTtcbiAgICAgICAgdmFyIGJhc2VMYW5ndWFnZSA9IGxhbmd1YWdlUGFydHNbMF07XG5cbiAgICAgICAgb3B0aW9ucy5sYW5ndWFnZSA9IFtvcHRpb25zLmxhbmd1YWdlLCBiYXNlTGFuZ3VhZ2VdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5sYW5ndWFnZSA9IFtvcHRpb25zLmxhbmd1YWdlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJC5pc0FycmF5KG9wdGlvbnMubGFuZ3VhZ2UpKSB7XG4gICAgICB2YXIgbGFuZ3VhZ2VzID0gbmV3IFRyYW5zbGF0aW9uKCk7XG4gICAgICBvcHRpb25zLmxhbmd1YWdlLnB1c2goJ2VuJyk7XG5cbiAgICAgIHZhciBsYW5ndWFnZU5hbWVzID0gb3B0aW9ucy5sYW5ndWFnZTtcblxuICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBsYW5ndWFnZU5hbWVzLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gbGFuZ3VhZ2VOYW1lc1tsXTtcbiAgICAgICAgdmFyIGxhbmd1YWdlID0ge307XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUcnkgdG8gbG9hZCBpdCB3aXRoIHRoZSBvcmlnaW5hbCBuYW1lXG4gICAgICAgICAgbGFuZ3VhZ2UgPSBUcmFuc2xhdGlvbi5sb2FkUGF0aChuYW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBjb3VsZG4ndCBsb2FkIGl0LCBjaGVjayBpZiBpdCB3YXNuJ3QgdGhlIGZ1bGwgcGF0aFxuICAgICAgICAgICAgbmFtZSA9IHRoaXMuZGVmYXVsdHMuYW1kTGFuZ3VhZ2VCYXNlICsgbmFtZTtcbiAgICAgICAgICAgIGxhbmd1YWdlID0gVHJhbnNsYXRpb24ubG9hZFBhdGgobmFtZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0cmFuc2xhdGlvbiBjb3VsZCBub3QgYmUgbG9hZGVkIGF0IGFsbC4gU29tZXRpbWVzIHRoaXMgaXNcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgYSBjb25maWd1cmF0aW9uIHByb2JsZW0sIG90aGVyIHRpbWVzIHRoaXMgY2FuIGJlXG4gICAgICAgICAgICAvLyBiZWNhdXNlIG9mIGhvdyBTZWxlY3QyIGhlbHBzIGxvYWQgYWxsIHBvc3NpYmxlIHRyYW5zbGF0aW9uIGZpbGVzLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAnU2VsZWN0MjogVGhlIGxhbmd1YWdlIGZpbGUgZm9yIFwiJyArIG5hbWUgKyAnXCIgY291bGQgbm90IGJlICcgK1xuICAgICAgICAgICAgICAgICdhdXRvbWF0aWNhbGx5IGxvYWRlZC4gQSBmYWxsYmFjayB3aWxsIGJlIHVzZWQgaW5zdGVhZC4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxhbmd1YWdlcy5leHRlbmQobGFuZ3VhZ2UpO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zLnRyYW5zbGF0aW9ucyA9IGxhbmd1YWdlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJhc2VUcmFuc2xhdGlvbiA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKFxuICAgICAgICB0aGlzLmRlZmF1bHRzLmFtZExhbmd1YWdlQmFzZSArICdlbidcbiAgICAgICk7XG4gICAgICB2YXIgY3VzdG9tVHJhbnNsYXRpb24gPSBuZXcgVHJhbnNsYXRpb24ob3B0aW9ucy5sYW5ndWFnZSk7XG5cbiAgICAgIGN1c3RvbVRyYW5zbGF0aW9uLmV4dGVuZChiYXNlVHJhbnNsYXRpb24pO1xuXG4gICAgICBvcHRpb25zLnRyYW5zbGF0aW9ucyA9IGN1c3RvbVRyYW5zbGF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIERlZmF1bHRzLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3MgKHRleHQpIHtcbiAgICAgIC8vIFVzZWQgJ3VuaSByYW5nZSArIG5hbWVkIGZ1bmN0aW9uJyBmcm9tIGh0dHA6Ly9qc3BlcmYuY29tL2RpYWNyaXRpY3MvMThcbiAgICAgIGZ1bmN0aW9uIG1hdGNoKGEpIHtcbiAgICAgICAgcmV0dXJuIERJQUNSSVRJQ1NbYV0gfHwgYTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvW15cXHUwMDAwLVxcdTAwN0VdL2csIG1hdGNoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaGVyIChwYXJhbXMsIGRhdGEpIHtcbiAgICAgIC8vIEFsd2F5cyByZXR1cm4gdGhlIG9iamVjdCBpZiB0aGVyZSBpcyBub3RoaW5nIHRvIGNvbXBhcmVcbiAgICAgIGlmICgkLnRyaW0ocGFyYW1zLnRlcm0pID09PSAnJykge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cblxuICAgICAgLy8gRG8gYSByZWN1cnNpdmUgY2hlY2sgZm9yIG9wdGlvbnMgd2l0aCBjaGlsZHJlblxuICAgICAgaWYgKGRhdGEuY2hpbGRyZW4gJiYgZGF0YS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIENsb25lIHRoZSBkYXRhIG9iamVjdCBpZiB0aGVyZSBhcmUgY2hpbGRyZW5cbiAgICAgICAgLy8gVGhpcyBpcyByZXF1aXJlZCBhcyB3ZSBtb2RpZnkgdGhlIG9iamVjdCB0byByZW1vdmUgYW55IG5vbi1tYXRjaGVzXG4gICAgICAgIHZhciBtYXRjaCA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkYXRhKTtcblxuICAgICAgICAvLyBDaGVjayBlYWNoIGNoaWxkIG9mIHRoZSBvcHRpb25cbiAgICAgICAgZm9yICh2YXIgYyA9IGRhdGEuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgYyA+PSAwOyBjLS0pIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBkYXRhLmNoaWxkcmVuW2NdO1xuXG4gICAgICAgICAgdmFyIG1hdGNoZXMgPSBtYXRjaGVyKHBhcmFtcywgY2hpbGQpO1xuXG4gICAgICAgICAgLy8gSWYgdGhlcmUgd2Fzbid0IGEgbWF0Y2gsIHJlbW92ZSB0aGUgb2JqZWN0IGluIHRoZSBhcnJheVxuICAgICAgICAgIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIG1hdGNoLmNoaWxkcmVuLnNwbGljZShjLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhbnkgY2hpbGRyZW4gbWF0Y2hlZCwgcmV0dXJuIHRoZSBuZXcgb2JqZWN0XG4gICAgICAgIGlmIChtYXRjaC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgd2VyZSBubyBtYXRjaGluZyBjaGlsZHJlbiwgY2hlY2sganVzdCB0aGUgcGxhaW4gb2JqZWN0XG4gICAgICAgIHJldHVybiBtYXRjaGVyKHBhcmFtcywgbWF0Y2gpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3JpZ2luYWwgPSBzdHJpcERpYWNyaXRpY3MoZGF0YS50ZXh0KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgdmFyIHRlcm0gPSBzdHJpcERpYWNyaXRpY3MocGFyYW1zLnRlcm0pLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSB0ZXh0IGNvbnRhaW5zIHRoZSB0ZXJtXG4gICAgICBpZiAob3JpZ2luYWwuaW5kZXhPZih0ZXJtKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBpdCBkb2Vzbid0IGNvbnRhaW4gdGhlIHRlcm0sIGRvbid0IHJldHVybiBhbnl0aGluZ1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIGFtZEJhc2U6ICcuLycsXG4gICAgICBhbWRMYW5ndWFnZUJhc2U6ICcuL2kxOG4vJyxcbiAgICAgIGNsb3NlT25TZWxlY3Q6IHRydWUsXG4gICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICBkcm9wZG93bkF1dG9XaWR0aDogZmFsc2UsXG4gICAgICBlc2NhcGVNYXJrdXA6IFV0aWxzLmVzY2FwZU1hcmt1cCxcbiAgICAgIGxhbmd1YWdlOiBFbmdsaXNoVHJhbnNsYXRpb24sXG4gICAgICBtYXRjaGVyOiBtYXRjaGVyLFxuICAgICAgbWluaW11bUlucHV0TGVuZ3RoOiAwLFxuICAgICAgbWF4aW11bUlucHV0TGVuZ3RoOiAwLFxuICAgICAgbWF4aW11bVNlbGVjdGlvbkxlbmd0aDogMCxcbiAgICAgIG1pbmltdW1SZXN1bHRzRm9yU2VhcmNoOiAwLFxuICAgICAgc2VsZWN0T25DbG9zZTogZmFsc2UsXG4gICAgICBzb3J0ZXI6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlUmVzdWx0OiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudGV4dDtcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVNlbGVjdGlvbjogZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnRleHQ7XG4gICAgICB9LFxuICAgICAgdGhlbWU6ICdkZWZhdWx0JyxcbiAgICAgIHdpZHRoOiAncmVzb2x2ZSdcbiAgICB9O1xuICB9O1xuXG4gIERlZmF1bHRzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBjYW1lbEtleSA9ICQuY2FtZWxDYXNlKGtleSk7XG5cbiAgICB2YXIgZGF0YSA9IHt9O1xuICAgIGRhdGFbY2FtZWxLZXldID0gdmFsdWU7XG5cbiAgICB2YXIgY29udmVydGVkRGF0YSA9IFV0aWxzLl9jb252ZXJ0RGF0YShkYXRhKTtcblxuICAgICQuZXh0ZW5kKHRoaXMuZGVmYXVsdHMsIGNvbnZlcnRlZERhdGEpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cygpO1xuXG4gIHJldHVybiBkZWZhdWx0cztcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvb3B0aW9ucycsW1xuICAncmVxdWlyZScsXG4gICdqcXVlcnknLFxuICAnLi9kZWZhdWx0cycsXG4gICcuL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKHJlcXVpcmUsICQsIERlZmF1bHRzLCBVdGlscykge1xuICBmdW5jdGlvbiBPcHRpb25zIChvcHRpb25zLCAkZWxlbWVudCkge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBpZiAoJGVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5mcm9tRWxlbWVudCgkZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zID0gRGVmYXVsdHMuYXBwbHkodGhpcy5vcHRpb25zKTtcblxuICAgIGlmICgkZWxlbWVudCAmJiAkZWxlbWVudC5pcygnaW5wdXQnKSkge1xuICAgICAgdmFyIElucHV0Q29tcGF0ID0gcmVxdWlyZSh0aGlzLmdldCgnYW1kQmFzZScpICsgJ2NvbXBhdC9pbnB1dERhdGEnKTtcblxuICAgICAgdGhpcy5vcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgIHRoaXMub3B0aW9ucy5kYXRhQWRhcHRlcixcbiAgICAgICAgSW5wdXRDb21wYXRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgT3B0aW9ucy5wcm90b3R5cGUuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbiAoJGUpIHtcbiAgICB2YXIgZXhjbHVkZWREYXRhID0gWydzZWxlY3QyJ107XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm11bHRpcGxlID09IG51bGwpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5tdWx0aXBsZSA9ICRlLnByb3AoJ211bHRpcGxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9PSBudWxsKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSAkZS5wcm9wKCdkaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMubGFuZ3VhZ2UgPT0gbnVsbCkge1xuICAgICAgaWYgKCRlLnByb3AoJ2xhbmcnKSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubGFuZ3VhZ2UgPSAkZS5wcm9wKCdsYW5nJykudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0gZWxzZSBpZiAoJGUuY2xvc2VzdCgnW2xhbmddJykucHJvcCgnbGFuZycpKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5sYW5ndWFnZSA9ICRlLmNsb3Nlc3QoJ1tsYW5nXScpLnByb3AoJ2xhbmcnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRpciA9PSBudWxsKSB7XG4gICAgICBpZiAoJGUucHJvcCgnZGlyJykpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICRlLnByb3AoJ2RpcicpO1xuICAgICAgfSBlbHNlIGlmICgkZS5jbG9zZXN0KCdbZGlyXScpLnByb3AoJ2RpcicpKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kaXIgPSAkZS5jbG9zZXN0KCdbZGlyXScpLnByb3AoJ2RpcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICdsdHInO1xuICAgICAgfVxuICAgIH1cblxuICAgICRlLnByb3AoJ2Rpc2FibGVkJywgdGhpcy5vcHRpb25zLmRpc2FibGVkKTtcbiAgICAkZS5wcm9wKCdtdWx0aXBsZScsIHRoaXMub3B0aW9ucy5tdWx0aXBsZSk7XG5cbiAgICBpZiAoJGUuZGF0YSgnc2VsZWN0MlRhZ3MnKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGRhdGEtc2VsZWN0Mi10YWdzYCBhdHRyaWJ1dGUgaGFzIGJlZW4gY2hhbmdlZCB0byAnICtcbiAgICAgICAgICAndXNlIHRoZSBgZGF0YS1kYXRhYCBhbmQgYGRhdGEtdGFncz1cInRydWVcImAgYXR0cmlidXRlcyBhbmQgd2lsbCBiZSAnICtcbiAgICAgICAgICAncmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgU2VsZWN0Mi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgICRlLmRhdGEoJ2RhdGEnLCAkZS5kYXRhKCdzZWxlY3QyVGFncycpKTtcbiAgICAgICRlLmRhdGEoJ3RhZ3MnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoJGUuZGF0YSgnYWpheFVybCcpKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1NlbGVjdDI6IFRoZSBgZGF0YS1hamF4LXVybGAgYXR0cmlidXRlIGhhcyBiZWVuIGNoYW5nZWQgdG8gJyArXG4gICAgICAgICAgJ2BkYXRhLWFqYXgtLXVybGAgYW5kIHN1cHBvcnQgZm9yIHRoZSBvbGQgYXR0cmlidXRlIHdpbGwgYmUgcmVtb3ZlZCcgK1xuICAgICAgICAgICcgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFNlbGVjdDIuJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAkZS5hdHRyKCdhamF4LS11cmwnLCAkZS5kYXRhKCdhamF4VXJsJykpO1xuICAgICAgJGUuZGF0YSgnYWpheC0tdXJsJywgJGUuZGF0YSgnYWpheFVybCcpKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YXNldCA9IHt9O1xuXG4gICAgLy8gUHJlZmVyIHRoZSBlbGVtZW50J3MgYGRhdGFzZXRgIGF0dHJpYnV0ZSBpZiBpdCBleGlzdHNcbiAgICAvLyBqUXVlcnkgMS54IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgZGF0YSBhdHRyaWJ1dGVzIHdpdGggbXVsdGlwbGUgZGFzaGVzXG4gICAgaWYgKCQuZm4uanF1ZXJ5ICYmICQuZm4uanF1ZXJ5LnN1YnN0cigwLCAyKSA9PSAnMS4nICYmICRlWzBdLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzZXQgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJGVbMF0uZGF0YXNldCwgJGUuZGF0YSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YXNldCA9ICRlLmRhdGEoKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkYXRhc2V0KTtcblxuICAgIGRhdGEgPSBVdGlscy5fY29udmVydERhdGEoZGF0YSk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgaWYgKCQuaW5BcnJheShrZXksIGV4Y2x1ZGVkRGF0YSkgPiAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdCh0aGlzLm9wdGlvbnNba2V5XSkpIHtcbiAgICAgICAgJC5leHRlbmQodGhpcy5vcHRpb25zW2tleV0sIGRhdGFba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBPcHRpb25zLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc1trZXldO1xuICB9O1xuXG4gIE9wdGlvbnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsO1xuICB9O1xuXG4gIHJldHVybiBPcHRpb25zO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9jb3JlJyxbXG4gICdqcXVlcnknLFxuICAnLi9vcHRpb25zJyxcbiAgJy4vdXRpbHMnLFxuICAnLi9rZXlzJ1xuXSwgZnVuY3Rpb24gKCQsIE9wdGlvbnMsIFV0aWxzLCBLRVlTKSB7XG4gIHZhciBTZWxlY3QyID0gZnVuY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKCRlbGVtZW50LmRhdGEoJ3NlbGVjdDInKSAhPSBudWxsKSB7XG4gICAgICAkZWxlbWVudC5kYXRhKCdzZWxlY3QyJykuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcblxuICAgIHRoaXMuaWQgPSB0aGlzLl9nZW5lcmF0ZUlkKCRlbGVtZW50KTtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdGhpcy5vcHRpb25zID0gbmV3IE9wdGlvbnMob3B0aW9ucywgJGVsZW1lbnQpO1xuXG4gICAgU2VsZWN0Mi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcblxuICAgIC8vIFNldCB1cCB0aGUgdGFiaW5kZXhcblxuICAgIHZhciB0YWJpbmRleCA9ICRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgfHwgMDtcbiAgICAkZWxlbWVudC5kYXRhKCdvbGQtdGFiaW5kZXgnLCB0YWJpbmRleCk7XG4gICAgJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcblxuICAgIC8vIFNldCB1cCBjb250YWluZXJzIGFuZCBhZGFwdGVyc1xuXG4gICAgdmFyIERhdGFBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnZGF0YUFkYXB0ZXInKTtcbiAgICB0aGlzLmRhdGFBZGFwdGVyID0gbmV3IERhdGFBZGFwdGVyKCRlbGVtZW50LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgdmFyICRjb250YWluZXIgPSB0aGlzLnJlbmRlcigpO1xuXG4gICAgdGhpcy5fcGxhY2VDb250YWluZXIoJGNvbnRhaW5lcik7XG5cbiAgICB2YXIgU2VsZWN0aW9uQWRhcHRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ3NlbGVjdGlvbkFkYXB0ZXInKTtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IG5ldyBTZWxlY3Rpb25BZGFwdGVyKCRlbGVtZW50LCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuJHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uLnJlbmRlcigpO1xuXG4gICAgdGhpcy5zZWxlY3Rpb24ucG9zaXRpb24odGhpcy4kc2VsZWN0aW9uLCAkY29udGFpbmVyKTtcblxuICAgIHZhciBEcm9wZG93bkFkYXB0ZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdkcm9wZG93bkFkYXB0ZXInKTtcbiAgICB0aGlzLmRyb3Bkb3duID0gbmV3IERyb3Bkb3duQWRhcHRlcigkZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLiRkcm9wZG93biA9IHRoaXMuZHJvcGRvd24ucmVuZGVyKCk7XG5cbiAgICB0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKHRoaXMuJGRyb3Bkb3duLCAkY29udGFpbmVyKTtcblxuICAgIHZhciBSZXN1bHRzQWRhcHRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ3Jlc3VsdHNBZGFwdGVyJyk7XG4gICAgdGhpcy5yZXN1bHRzID0gbmV3IFJlc3VsdHNBZGFwdGVyKCRlbGVtZW50LCB0aGlzLm9wdGlvbnMsIHRoaXMuZGF0YUFkYXB0ZXIpO1xuICAgIHRoaXMuJHJlc3VsdHMgPSB0aGlzLnJlc3VsdHMucmVuZGVyKCk7XG5cbiAgICB0aGlzLnJlc3VsdHMucG9zaXRpb24odGhpcy4kcmVzdWx0cywgdGhpcy4kZHJvcGRvd24pO1xuXG4gICAgLy8gQmluZCBldmVudHNcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIEJpbmQgdGhlIGNvbnRhaW5lciB0byBhbGwgb2YgdGhlIGFkYXB0ZXJzXG4gICAgdGhpcy5fYmluZEFkYXB0ZXJzKCk7XG5cbiAgICAvLyBSZWdpc3RlciBhbnkgRE9NIGV2ZW50IGhhbmRsZXJzXG4gICAgdGhpcy5fcmVnaXN0ZXJEb21FdmVudHMoKTtcblxuICAgIC8vIFJlZ2lzdGVyIGFueSBpbnRlcm5hbCBldmVudCBoYW5kbGVyc1xuICAgIHRoaXMuX3JlZ2lzdGVyRGF0YUV2ZW50cygpO1xuICAgIHRoaXMuX3JlZ2lzdGVyU2VsZWN0aW9uRXZlbnRzKCk7XG4gICAgdGhpcy5fcmVnaXN0ZXJEcm9wZG93bkV2ZW50cygpO1xuICAgIHRoaXMuX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cygpO1xuICAgIHRoaXMuX3JlZ2lzdGVyRXZlbnRzKCk7XG5cbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgc3RhdGVcbiAgICB0aGlzLmRhdGFBZGFwdGVyLmN1cnJlbnQoZnVuY3Rpb24gKGluaXRpYWxEYXRhKSB7XG4gICAgICBzZWxmLnRyaWdnZXIoJ3NlbGVjdGlvbjp1cGRhdGUnLCB7XG4gICAgICAgIGRhdGE6IGluaXRpYWxEYXRhXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEhpZGUgdGhlIG9yaWdpbmFsIHNlbGVjdFxuICAgICRlbGVtZW50LmFkZENsYXNzKCdzZWxlY3QyLWhpZGRlbi1hY2Nlc3NpYmxlJyk7XG4gICAgJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgLy8gU3luY2hyb25pemUgYW55IG1vbml0b3JlZCBhdHRyaWJ1dGVzXG4gICAgdGhpcy5fc3luY0F0dHJpYnV0ZXMoKTtcblxuICAgICRlbGVtZW50LmRhdGEoJ3NlbGVjdDInLCB0aGlzKTtcbiAgfTtcblxuICBVdGlscy5FeHRlbmQoU2VsZWN0MiwgVXRpbHMuT2JzZXJ2YWJsZSk7XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX2dlbmVyYXRlSWQgPSBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICB2YXIgaWQgPSAnJztcblxuICAgIGlmICgkZWxlbWVudC5hdHRyKCdpZCcpICE9IG51bGwpIHtcbiAgICAgIGlkID0gJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICB9IGVsc2UgaWYgKCRlbGVtZW50LmF0dHIoJ25hbWUnKSAhPSBudWxsKSB7XG4gICAgICBpZCA9ICRlbGVtZW50LmF0dHIoJ25hbWUnKSArICctJyArIFV0aWxzLmdlbmVyYXRlQ2hhcnMoMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkID0gVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcbiAgICB9XG5cbiAgICBpZCA9ICdzZWxlY3QyLScgKyBpZDtcblxuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fcGxhY2VDb250YWluZXIgPSBmdW5jdGlvbiAoJGNvbnRhaW5lcikge1xuICAgICRjb250YWluZXIuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudCk7XG5cbiAgICB2YXIgd2lkdGggPSB0aGlzLl9yZXNvbHZlV2lkdGgodGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmdldCgnd2lkdGgnKSk7XG5cbiAgICBpZiAod2lkdGggIT0gbnVsbCkge1xuICAgICAgJGNvbnRhaW5lci5jc3MoJ3dpZHRoJywgd2lkdGgpO1xuICAgIH1cbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVzb2x2ZVdpZHRoID0gZnVuY3Rpb24gKCRlbGVtZW50LCBtZXRob2QpIHtcbiAgICB2YXIgV0lEVEggPSAvXndpZHRoOigoWy0rXT8oWzAtOV0qXFwuKT9bMC05XSspKHB4fGVtfGV4fCV8aW58Y218bW18cHR8cGMpKS9pO1xuXG4gICAgaWYgKG1ldGhvZCA9PSAncmVzb2x2ZScpIHtcbiAgICAgIHZhciBzdHlsZVdpZHRoID0gdGhpcy5fcmVzb2x2ZVdpZHRoKCRlbGVtZW50LCAnc3R5bGUnKTtcblxuICAgICAgaWYgKHN0eWxlV2lkdGggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3R5bGVXaWR0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVXaWR0aCgkZWxlbWVudCwgJ2VsZW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAobWV0aG9kID09ICdlbGVtZW50Jykge1xuICAgICAgdmFyIGVsZW1lbnRXaWR0aCA9ICRlbGVtZW50Lm91dGVyV2lkdGgoZmFsc2UpO1xuXG4gICAgICBpZiAoZWxlbWVudFdpZHRoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW1lbnRXaWR0aCArICdweCc7XG4gICAgfVxuXG4gICAgaWYgKG1ldGhvZCA9PSAnc3R5bGUnKSB7XG4gICAgICB2YXIgc3R5bGUgPSAkZWxlbWVudC5hdHRyKCdzdHlsZScpO1xuXG4gICAgICBpZiAodHlwZW9mKHN0eWxlKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdHRycyA9IHN0eWxlLnNwbGl0KCc7Jyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSA9IGkgKyAxKSB7XG4gICAgICAgIHZhciBhdHRyID0gYXR0cnNbaV0ucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBhdHRyLm1hdGNoKFdJRFRIKTtcblxuICAgICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCAmJiBtYXRjaGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXNbMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ldGhvZDtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fYmluZEFkYXB0ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGF0YUFkYXB0ZXIuYmluZCh0aGlzLCB0aGlzLiRjb250YWluZXIpO1xuICAgIHRoaXMuc2VsZWN0aW9uLmJpbmQodGhpcywgdGhpcy4kY29udGFpbmVyKTtcblxuICAgIHRoaXMuZHJvcGRvd24uYmluZCh0aGlzLCB0aGlzLiRjb250YWluZXIpO1xuICAgIHRoaXMucmVzdWx0cy5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRG9tRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NoYW5nZS5zZWxlY3QyJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0aW9uOnVwZGF0ZScsIHtcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zeW5jID0gVXRpbHMuYmluZCh0aGlzLl9zeW5jQXR0cmlidXRlcywgdGhpcyk7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5hdHRhY2hFdmVudCkge1xuICAgICAgdGhpcy4kZWxlbWVudFswXS5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIHRoaXMuX3N5bmMpO1xuICAgIH1cblxuICAgIHZhciBvYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8XG4gICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgd2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXJcbiAgICA7XG5cbiAgICBpZiAob2JzZXJ2ZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgb2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAkLmVhY2gobXV0YXRpb25zLCBzZWxmLl9zeW5jKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLiRlbGVtZW50WzBdLCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdET01BdHRyTW9kaWZpZWQnLCBzZWxmLl9zeW5jLCBmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckRhdGFFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5kYXRhQWRhcHRlci5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG5vblJlbGF5RXZlbnRzID0gWyd0b2dnbGUnLCAnZm9jdXMnXTtcblxuICAgIHRoaXMuc2VsZWN0aW9uLm9uKCd0b2dnbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLnRvZ2dsZURyb3Bkb3duKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNlbGVjdGlvbi5vbignZm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLmZvY3VzKHBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNlbGVjdGlvbi5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcbiAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgbm9uUmVsYXlFdmVudHMpICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuZHJvcGRvd24ub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XG4gICAgICBzZWxmLnRyaWdnZXIobmFtZSwgcGFyYW1zKTtcbiAgICB9KTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJSZXN1bHRzRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMucmVzdWx0cy5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tb3BlbicpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1kaXNhYmxlZCcpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignZGlzYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWRpc2FibGVkJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgaWYgKCFzZWxmLmlzT3BlbigpKSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcignb3BlbicsIHt9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kYXRhQWRhcHRlci5xdWVyeShwYXJhbXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czphbGwnLCB7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBxdWVyeTogcGFyYW1zXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdxdWVyeTphcHBlbmQnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB0aGlzLmRhdGFBZGFwdGVyLnF1ZXJ5KHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOmFwcGVuZCcsIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIHF1ZXJ5OiBwYXJhbXNcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2tleXByZXNzJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgdmFyIGtleSA9IGV2dC53aGljaDtcblxuICAgICAgaWYgKHNlbGYuaXNPcGVuKCkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gS0VZUy5FU0MgfHwga2V5ID09PSBLRVlTLlRBQiB8fFxuICAgICAgICAgICAgKGtleSA9PT0gS0VZUy5VUCAmJiBldnQuYWx0S2V5KSkge1xuICAgICAgICAgIHNlbGYuY2xvc2UoKTtcblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS0VZUy5FTlRFUikge1xuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpzZWxlY3QnLCB7fSk7XG5cbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmICgoa2V5ID09PSBLRVlTLlNQQUNFICYmIGV2dC5jdHJsS2V5KSkge1xuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czp0b2dnbGUnLCB7fSk7XG5cbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtFWVMuVVApIHtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6cHJldmlvdXMnLCB7fSk7XG5cbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtFWVMuRE9XTikge1xuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpuZXh0Jywge30pO1xuXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXkgPT09IEtFWVMuRU5URVIgfHwga2V5ID09PSBLRVlTLlNQQUNFIHx8XG4gICAgICAgICAgICAoa2V5ID09PSBLRVlTLkRPV04gJiYgZXZ0LmFsdEtleSkpIHtcbiAgICAgICAgICBzZWxmLm9wZW4oKTtcblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3N5bmNBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoJ2Rpc2FibGVkJywgdGhpcy4kZWxlbWVudC5wcm9wKCdkaXNhYmxlZCcpKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkaXNhYmxlZCcpKSB7XG4gICAgICBpZiAodGhpcy5pc09wZW4oKSkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHJpZ2dlcignZGlzYWJsZScsIHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmlnZ2VyKCdlbmFibGUnLCB7fSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgdHJpZ2dlciBtZXRob2QgdG8gYXV0b21hdGljYWxseSB0cmlnZ2VyIHByZS1ldmVudHMgd2hlblxuICAgKiB0aGVyZSBhcmUgZXZlbnRzIHRoYXQgY2FuIGJlIHByZXZlbnRlZC5cbiAgICovXG4gIFNlbGVjdDIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgIHZhciBhY3R1YWxUcmlnZ2VyID0gU2VsZWN0Mi5fX3N1cGVyX18udHJpZ2dlcjtcbiAgICB2YXIgcHJlVHJpZ2dlck1hcCA9IHtcbiAgICAgICdvcGVuJzogJ29wZW5pbmcnLFxuICAgICAgJ2Nsb3NlJzogJ2Nsb3NpbmcnLFxuICAgICAgJ3NlbGVjdCc6ICdzZWxlY3RpbmcnLFxuICAgICAgJ3Vuc2VsZWN0JzogJ3Vuc2VsZWN0aW5nJ1xuICAgIH07XG5cbiAgICBpZiAoYXJncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhcmdzID0ge307XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgaW4gcHJlVHJpZ2dlck1hcCkge1xuICAgICAgdmFyIHByZVRyaWdnZXJOYW1lID0gcHJlVHJpZ2dlck1hcFtuYW1lXTtcbiAgICAgIHZhciBwcmVUcmlnZ2VyQXJncyA9IHtcbiAgICAgICAgcHJldmVudGVkOiBmYWxzZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgYXJnczogYXJnc1xuICAgICAgfTtcblxuICAgICAgYWN0dWFsVHJpZ2dlci5jYWxsKHRoaXMsIHByZVRyaWdnZXJOYW1lLCBwcmVUcmlnZ2VyQXJncyk7XG5cbiAgICAgIGlmIChwcmVUcmlnZ2VyQXJncy5wcmV2ZW50ZWQpIHtcbiAgICAgICAgYXJncy5wcmV2ZW50ZWQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3R1YWxUcmlnZ2VyLmNhbGwodGhpcywgbmFtZSwgYXJncyk7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUudG9nZ2xlRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc09wZW4oKSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc09wZW4oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7fSk7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzT3BlbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdjbG9zZScsIHt9KTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5pc09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRhaW5lci5oYXNDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5oYXNGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGFpbmVyLmhhc0NsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgLy8gTm8gbmVlZCB0byByZS10cmlnZ2VyIGZvY3VzIGV2ZW50cyBpZiB3ZSBhcmUgYWxyZWFkeSBmb2N1c2VkXG4gICAgaWYgKHRoaXMuaGFzRm9jdXMoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWZvY3VzJyk7XG4gICAgdGhpcy50cmlnZ2VyKCdmb2N1cycsIHt9KTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU2VsZWN0MjogVGhlIGBzZWxlY3QyKFwiZW5hYmxlXCIpYCBtZXRob2QgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCcgK1xuICAgICAgICAnIGJlIHJlbW92ZWQgaW4gbGF0ZXIgU2VsZWN0MiB2ZXJzaW9ucy4gVXNlICRlbGVtZW50LnByb3AoXCJkaXNhYmxlZFwiKScgK1xuICAgICAgICAnIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncyA9PSBudWxsIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBhcmdzID0gW3RydWVdO1xuICAgIH1cblxuICAgIHZhciBkaXNhYmxlZCA9ICFhcmdzWzBdO1xuXG4gICAgdGhpcy4kZWxlbWVudC5wcm9wKCdkaXNhYmxlZCcsIGRpc2FibGVkKTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU2VsZWN0MjogRGF0YSBjYW4gbm8gbG9uZ2VyIGJlIHNldCB1c2luZyBgc2VsZWN0MihcImRhdGFcIilgLiBZb3UgJyArXG4gICAgICAgICdzaG91bGQgY29uc2lkZXIgc2V0dGluZyB0aGUgdmFsdWUgaW5zdGVhZCB1c2luZyBgJGVsZW1lbnQudmFsKClgLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBbXTtcblxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcbiAgICAgIGRhdGEgPSBjdXJyZW50RGF0YTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLnZhbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTZWxlY3QyOiBUaGUgYHNlbGVjdDIoXCJ2YWxcIilgIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlJyArXG4gICAgICAgICcgcmVtb3ZlZCBpbiBsYXRlciBTZWxlY3QyIHZlcnNpb25zLiBVc2UgJGVsZW1lbnQudmFsKCkgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50LnZhbCgpO1xuICAgIH1cblxuICAgIHZhciBuZXdWYWwgPSBhcmdzWzBdO1xuXG4gICAgaWYgKCQuaXNBcnJheShuZXdWYWwpKSB7XG4gICAgICBuZXdWYWwgPSAkLm1hcChuZXdWYWwsIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iai50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC52YWwobmV3VmFsKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLmRldGFjaEV2ZW50KSB7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgdGhpcy5fc3luYyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29ic2VydmVyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy4kZWxlbWVudFswXVxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQXR0ck1vZGlmaWVkJywgdGhpcy5fc3luYywgZmFsc2UpO1xuICAgIH1cblxuICAgIHRoaXMuX3N5bmMgPSBudWxsO1xuXG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy5zZWxlY3QyJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIHRoaXMuJGVsZW1lbnQuZGF0YSgnb2xkLXRhYmluZGV4JykpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnc2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ3NlbGVjdDInKTtcblxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuc2VsZWN0aW9uLmRlc3Ryb3koKTtcbiAgICB0aGlzLmRyb3Bkb3duLmRlc3Ryb3koKTtcbiAgICB0aGlzLnJlc3VsdHMuZGVzdHJveSgpO1xuXG4gICAgdGhpcy5kYXRhQWRhcHRlciA9IG51bGw7XG4gICAgdGhpcy5zZWxlY3Rpb24gPSBudWxsO1xuICAgIHRoaXMuZHJvcGRvd24gPSBudWxsO1xuICAgIHRoaXMucmVzdWx0cyA9IG51bGw7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkY29udGFpbmVyID0gJChcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDIgc2VsZWN0Mi1jb250YWluZXJcIj4nICtcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0aW9uXCI+PC9zcGFuPicgK1xuICAgICAgICAnPHNwYW4gY2xhc3M9XCJkcm9wZG93bi13cmFwcGVyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPicgK1xuICAgICAgJzwvc3Bhbj4nXG4gICAgKTtcblxuICAgICRjb250YWluZXIuYXR0cignZGlyJywgdGhpcy5vcHRpb25zLmdldCgnZGlyJykpO1xuXG4gICAgdGhpcy4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcblxuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLScgKyB0aGlzLm9wdGlvbnMuZ2V0KCd0aGVtZScpKTtcblxuICAgICRjb250YWluZXIuZGF0YSgnZWxlbWVudCcsIHRoaXMuJGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuICRjb250YWluZXI7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdDI7XG59KTtcblxuUzIuZGVmaW5lKCdqcXVlcnktbW91c2V3aGVlbCcsW1xuICAnanF1ZXJ5J1xuXSwgZnVuY3Rpb24gKCQpIHtcbiAgLy8gVXNlZCB0byBzaGltIGpRdWVyeS5tb3VzZXdoZWVsIGZvciBub24tZnVsbCBidWlsZHMuXG4gIHJldHVybiAkO1xufSk7XG5cblMyLmRlZmluZSgnanF1ZXJ5LnNlbGVjdDInLFtcbiAgJ2pxdWVyeScsXG4gICdqcXVlcnktbW91c2V3aGVlbCcsXG5cbiAgJy4vc2VsZWN0Mi9jb3JlJyxcbiAgJy4vc2VsZWN0Mi9kZWZhdWx0cydcbl0sIGZ1bmN0aW9uICgkLCBfLCBTZWxlY3QyLCBEZWZhdWx0cykge1xuICBpZiAoJC5mbi5zZWxlY3QyID09IG51bGwpIHtcbiAgICAvLyBBbGwgbWV0aG9kcyB0aGF0IHNob3VsZCByZXR1cm4gdGhlIGVsZW1lbnRcbiAgICB2YXIgdGhpc01ldGhvZHMgPSBbJ29wZW4nLCAnY2xvc2UnLCAnZGVzdHJveSddO1xuXG4gICAgJC5mbi5zZWxlY3QyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGluc3RhbmNlT3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBTZWxlY3QyKCQodGhpcyksIGluc3RhbmNlT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHJldDtcblxuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9ICQodGhpcykuZGF0YSgnc2VsZWN0MicpO1xuXG4gICAgICAgICAgaWYgKGluc3RhbmNlID09IG51bGwgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgJ1RoZSBzZWxlY3QyKFxcJycgKyBvcHRpb25zICsgJ1xcJykgbWV0aG9kIHdhcyBjYWxsZWQgb24gYW4gJyArXG4gICAgICAgICAgICAgICdlbGVtZW50IHRoYXQgaXMgbm90IHVzaW5nIFNlbGVjdDIuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICAgICAgICByZXQgPSBpbnN0YW5jZVtvcHRpb25zXS5hcHBseShpbnN0YW5jZSwgYXJncyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIHNob3VsZCBiZSByZXR1cm5pbmcgYHRoaXNgXG4gICAgICAgIGlmICgkLmluQXJyYXkob3B0aW9ucywgdGhpc01ldGhvZHMpID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzIGZvciBTZWxlY3QyOiAnICsgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmICgkLmZuLnNlbGVjdDIuZGVmYXVsdHMgPT0gbnVsbCkge1xuICAgICQuZm4uc2VsZWN0Mi5kZWZhdWx0cyA9IERlZmF1bHRzO1xuICB9XG5cbiAgcmV0dXJuIFNlbGVjdDI7XG59KTtcblxuICAvLyBSZXR1cm4gdGhlIEFNRCBsb2FkZXIgY29uZmlndXJhdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoaXMgZmlsZVxuICByZXR1cm4ge1xuICAgIGRlZmluZTogUzIuZGVmaW5lLFxuICAgIHJlcXVpcmU6IFMyLnJlcXVpcmVcbiAgfTtcbn0oKSk7XG5cbiAgLy8gQXV0b2xvYWQgdGhlIGpRdWVyeSBiaW5kaW5nc1xuICAvLyBXZSBrbm93IHRoYXQgYWxsIG9mIHRoZSBtb2R1bGVzIGV4aXN0IGFib3ZlIHRoaXMsIHNvIHdlJ3JlIHNhZmVcbiAgdmFyIHNlbGVjdDIgPSBTMi5yZXF1aXJlKCdqcXVlcnkuc2VsZWN0MicpO1xuXG4gIC8vIEhvbGQgdGhlIEFNRCBtb2R1bGUgcmVmZXJlbmNlcyBvbiB0aGUgalF1ZXJ5IGZ1bmN0aW9uIHRoYXQgd2FzIGp1c3QgbG9hZGVkXG4gIC8vIFRoaXMgYWxsb3dzIFNlbGVjdDIgdG8gdXNlIHRoZSBpbnRlcm5hbCBsb2FkZXIgb3V0c2lkZSBvZiB0aGlzIGZpbGUsIHN1Y2hcbiAgLy8gYXMgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLlxuICBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQgPSBTMjtcblxuICAvLyBSZXR1cm4gdGhlIFNlbGVjdDIgaW5zdGFuY2UgZm9yIGFueW9uZSB3aG8gaXMgaW1wb3J0aW5nIGl0LlxuICByZXR1cm4gc2VsZWN0Mjtcbn0pKTtcbi8qISBTZWxlY3QyIDQuMC4xIHwgaHR0cHM6Ly9naXRodWIuY29tL3NlbGVjdDIvc2VsZWN0Mi9ibG9iL21hc3Rlci9MSUNFTlNFLm1kICovXG5cbihmdW5jdGlvbigpe2lmKGpRdWVyeSYmalF1ZXJ5LmZuJiZqUXVlcnkuZm4uc2VsZWN0MiYmalF1ZXJ5LmZuLnNlbGVjdDIuYW1kKXZhciBlPWpRdWVyeS5mbi5zZWxlY3QyLmFtZDtyZXR1cm4gZS5kZWZpbmUoXCJzZWxlY3QyL2kxOG4vcnVcIixbXSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4scil7cmV0dXJuIGUlMTA8NSYmZSUxMD4wJiZlJTEwMDw1fHxlJTEwMD4yMD9lJTEwPjE/bjp0OnJ9cmV0dXJue2Vycm9yTG9hZGluZzpmdW5jdGlvbigpe3JldHVyblwi0J3QtdCy0L7Qt9C80L7QttC90L4g0LfQsNCz0YDRg9C30LjRgtGMINGA0LXQt9GD0LvRjNGC0LDRgtGLXCJ9LGlucHV0VG9vTG9uZzpmdW5jdGlvbih0KXt2YXIgbj10LmlucHV0Lmxlbmd0aC10Lm1heGltdW0scj1cItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQvdCwIFwiK24rXCIg0YHQuNC80LLQvtC7XCI7cmV0dXJuIHIrPWUobixcIlwiLFwiYVwiLFwi0L7QslwiKSxyKz1cIiDQvNC10L3RjNGI0LVcIixyfSxpbnB1dFRvb1Nob3J0OmZ1bmN0aW9uKHQpe3ZhciBuPXQubWluaW11bS10LmlucHV0Lmxlbmd0aCxyPVwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC10YnQtSDRhdC+0YLRjyDQsdGLIFwiK24rXCIg0YHQuNC80LLQvtC7XCI7cmV0dXJuIHIrPWUobixcIlwiLFwiYVwiLFwi0L7QslwiKSxyfSxsb2FkaW5nTW9yZTpmdW5jdGlvbigpe3JldHVyblwi0JfQsNCz0YDRg9C30LrQsCDQtNCw0L3QvdGL0YXigKZcIn0sbWF4aW11bVNlbGVjdGVkOmZ1bmN0aW9uKHQpe3ZhciBuPVwi0JLRiyDQvNC+0LbQtdGC0LUg0LLRi9Cx0YDQsNGC0Ywg0L3QtSDQsdC+0LvQtdC1IFwiK3QubWF4aW11bStcIiDRjdC70LXQvNC10L3RglwiO3JldHVybiBuKz1lKHQubWF4aW11bSxcIlwiLFwiYVwiLFwi0L7QslwiKSxufSxub1Jlc3VsdHM6ZnVuY3Rpb24oKXtyZXR1cm5cItCh0L7QstC/0LDQtNC10L3QuNC5INC90LUg0L3QsNC50LTQtdC90L5cIn0sc2VhcmNoaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCLQn9C+0LjRgdC64oCmXCJ9fX0pLHtkZWZpbmU6ZS5kZWZpbmUscmVxdWlyZTplLnJlcXVpcmV9fSkoKTtcbi8qIE5pZnR5LkpTIHYwLjFcbiAqXG4gKiBBdXRob3I6IEpvaG4tQWxhbiBTaW1tb25zIFxuICpcbiAqIEEgSlF1ZXJ5IG1vZGFsIHN5c3RlbSBiYXNlZCBmcm9tIGh0dHA6Ly90eW1wYW51cy5uZXQvY29kcm9wcy8yMDEzLzA2LzI1L25pZnR5LW1vZGFsLXdpbmRvdy1lZmZlY3RzL1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogMjAxNSBDb25mZXJlbmNlQ2xvdWQgSW5jLlxuICovXG4oZnVuY3Rpb24oICQgKSB7XG5cblx0JChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIltkYXRhLXRyaWdnZXI9J21vZGFsJ10sIFtkYXRhLXRyaWdnZXI9J25pZnR5J11cIiwgZnVuY3Rpb24oKSB7XG4gIFx0XHR2YXIgdGFyZ2V0ID0gJCh0aGlzKS5kYXRhKFwidGFyZ2V0XCIpXG5cdFx0JCh0YXJnZXQpLm5pZnR5KFwic2hvd1wiKVxuICBcdH0pXG5cbiAgXHQkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLm1kLW92ZXJsYXlcIiwgZnVuY3Rpb24oKSB7XG4gIFx0XHQkKFwiLm5pZnR5LW1vZGFsLm1kLXNob3dcIikubmlmdHkoXCJoaWRlXCIpXG4gIFx0fSlcblxuICBcdCQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIubmlmdHktbW9kYWwubWQtc2hvdyAubWQtY2xvc2VcIiwgZnVuY3Rpb24oKSB7XG4gIFx0XHQkKHRoaXMpLmNsb3Nlc3QoXCIubmlmdHktbW9kYWwubWQtc2hvd1wiKS5uaWZ0eShcImhpZGVcIilcbiAgXHR9KVxuXG4gICBcdCQuZm4uZXh0ZW5kKHtcbiAgIFx0XHRuaWZ0eTogZnVuY3Rpb24oY21kKSB7XG5cdFx0ICAgXHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0ICAgXHR2YXIgdHJhbnNpdGlvbkVuZEV2ZW50cyA9IFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiXG5cdFx0ICAgIFxuXHRcdCAgICB2YXIgc2hvd0hhbmRsZXIgPSBmdW5jdGlvbihhbmltYXRpb24pIHtcblx0ICAgIFx0XHR2YXIgaGFuZGxlZFRyYW5zaXRpb25FbmQgPSBmYWxzZTtcblx0ICAgIFx0XHRcblx0ICAgIFx0XHQvLyBDaGVjayB0byBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG8gY29udGludWUgc2hvd2luZyB0aGUgbW9kYWxcblx0ICAgIFx0XHRpZiAoIWZpcmUoJChzZWxmKSwgXCJzaG93Lm5pZnR5Lm1vZGFsXCIpKVxuXHQgICAgXHRcdFx0cmV0dXJuXG5cblx0ICAgIFx0XHQkKHNlbGYpLm9uZSh0cmFuc2l0aW9uRW5kRXZlbnRzLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgXHRcdFx0aWYgKCFoYW5kbGVkVHJhbnNpdGlvbkVuZCkge1xuXHQgICAgXHRcdFx0XHRoYW5kbGVkVHJhbnNpdGlvbkVuZCA9IHRydWU7XG5cdCAgICBcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0ICAgIFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdCAgICBcdFx0XHQkKHNlbGYpLnRyaWdnZXIoXCJzaG93bi5uaWZ0eS5tb2RhbFwiKVxuXHQgICAgXHRcdFx0fVxuXHQgICAgXHRcdH0pXG5cdCAgICBcdFx0dmFyIHhjZW50ZXIgPSBNYXRoLmZsb29yKCQoc2VsZikud2lkdGgoKS8yKVxuXHQgICAgXHRcdHZhciB5Y2VudGVyID0gTWF0aC5mbG9vcigkKHNlbGYpLmhlaWdodCgpLzIpXG5cdCAgICBcdFx0JChcIi5uaWZ0eS1tb2RhbFwiKS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVYKC1cIiArIHhjZW50ZXIgKyBcInB4KSB0cmFuc2xhdGVZKC1cIiArIHljZW50ZXIgKyBcInB4KVwiKVxuXHQgICAgXHRcdCQoc2VsZikuYWRkQ2xhc3MoXCJtZC1zaG93XCIpXG5cdCAgICBcdH1cblxuXHQgICAgXHR2YXIgaGlkZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHR2YXIgaGFuZGxlZFRyYW5zaXRpb25FbmQgPSBmYWxzZTtcblx0ICAgIFx0XHRcblx0ICAgIFx0XHQvLyBDaGVjayB0byBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG8gY29udGludWUgc2hvd2luZyB0aGUgbW9kYWxcblx0ICAgIFx0XHRpZiAoIWZpcmUoJChzZWxmKSwgXCJoaWRlLm5pZnR5Lm1vZGFsXCIpKVxuXHQgICAgXHRcdFx0cmV0dXJuXG5cblx0ICAgIFx0XHQkKHNlbGYpLm9uZSh0cmFuc2l0aW9uRW5kRXZlbnRzLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgXHRcdFx0aWYgKCFoYW5kbGVkVHJhbnNpdGlvbkVuZCkge1xuXHQgICAgXHRcdFx0XHRoYW5kbGVkVHJhbnNpdGlvbkVuZCA9IHRydWU7XG5cdCAgICBcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0ICAgIFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdCAgICBcdFx0XHQkKHNlbGYpLnRyaWdnZXIoXCJoaWRkZW4ubmlmdHkubW9kYWxcIilcblx0ICAgIFx0XHRcdH1cblx0ICAgIFx0XHR9KVxuXHQgICAgXHRcdCQoc2VsZikucmVtb3ZlQ2xhc3MoXCJtZC1zaG93XCIpXG5cdCAgICBcdH1cblxuXHRcdCAgICBpZiAoY21kID09IFwic2hvd1wiKSB7XG5cdFx0ICAgIFx0c2hvd0hhbmRsZXIoKTtcblx0XHQgICAgfSBlbHNlIGlmIChjbWQgPT0gXCJoaWRlXCIpIHtcblx0XHQgICAgXHRoaWRlSGFuZGxlcigpO1xuXHRcdCAgICB9XG5cblx0ICAgIFx0cmV0dXJuIHRoaXM7XG5cdCAgIFx0fVxuXHR9KVx0XG5cdFxuXHRmdW5jdGlvbiBzZXRWZW5kb3IoZWxlbWVudCwgcHJvcGVydHksIHZhbHVlKSB7XG5cdFx0ZWxlbWVudC5zdHlsZVtcIndlYmtpdFwiICsgcHJvcGVydHldID0gdmFsdWU7XG5cdFx0ZWxlbWVudC5zdHlsZVtcIm1velwiICsgcHJvcGVydHldID0gdmFsdWU7XG5cdFx0ZWxlbWVudC5zdHlsZVtcIm1zXCIgKyBwcm9wZXJ0eV0gPSB2YWx1ZTtcblx0XHRlbGVtZW50LnN0eWxlW1wib1wiICsgcHJvcGVydHldID0gdmFsdWU7XG5cdH1cblxuXHRmdW5jdGlvbiBmaXJlKG9iaiwgbmFtZSwgZGF0YSkge1xuICAgICAgdmFyIGV2ZW50ID0gJC5FdmVudChuYW1lKTtcbiAgICAgIG9iai50cmlnZ2VyKGV2ZW50LCBkYXRhKTtcbiAgICAgIHJldHVybiBldmVudC5yZXN1bHQgIT09IGZhbHNlO1xuICAgIH1cblx0XG59KSggalF1ZXJ5ICk7XG4vLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBJbnN0YWZlZWQ7XG5cbiAgSW5zdGFmZWVkID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEluc3RhZmVlZChwYXJhbXMsIGNvbnRleHQpIHtcbiAgICAgIHZhciBvcHRpb24sIHZhbHVlO1xuICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICB0YXJnZXQ6ICdpbnN0YWZlZWQnLFxuICAgICAgICBnZXQ6ICdwb3B1bGFyJyxcbiAgICAgICAgcmVzb2x1dGlvbjogJ3RodW1ibmFpbCcsXG4gICAgICAgIHNvcnRCeTogJ25vbmUnLFxuICAgICAgICBsaW5rczogdHJ1ZSxcbiAgICAgICAgbW9jazogZmFsc2UsXG4gICAgICAgIHVzZUh0dHA6IGZhbHNlXG4gICAgICB9O1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAob3B0aW9uIGluIHBhcmFtcykge1xuICAgICAgICAgIHZhbHVlID0gcGFyYW1zW29wdGlvbl07XG4gICAgICAgICAgdGhpcy5vcHRpb25zW29wdGlvbl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCAhPSBudWxsID8gY29udGV4dCA6IHRoaXM7XG4gICAgICB0aGlzLnVuaXF1ZSA9IHRoaXMuX2dlbktleSgpO1xuICAgIH1cblxuICAgIEluc3RhZmVlZC5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmNvbnRleHQubmV4dFVybCA9PT0gJ3N0cmluZycgJiYgdGhpcy5jb250ZXh0Lm5leHRVcmwubGVuZ3RoID4gMDtcbiAgICB9O1xuXG4gICAgSW5zdGFmZWVkLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzTmV4dCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJ1bih0aGlzLmNvbnRleHQubmV4dFVybCk7XG4gICAgfTtcblxuICAgIEluc3RhZmVlZC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICB2YXIgaGVhZGVyLCBpbnN0YW5jZU5hbWUsIHNjcmlwdDtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsaWVudElkICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5hY2Nlc3NUb2tlbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNsaWVudElkIG9yIGFjY2Vzc1Rva2VuLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsaWVudElkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgY2xpZW50SWQgb3IgYWNjZXNzVG9rZW4uXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKHRoaXMub3B0aW9ucy5iZWZvcmUgIT0gbnVsbCkgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5iZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmJlZm9yZS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudCAhPT0gbnVsbCkge1xuICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LmlkID0gJ2luc3RhZmVlZC1mZXRjaGVyJztcbiAgICAgICAgc2NyaXB0LnNyYyA9IHVybCB8fCB0aGlzLl9idWlsZFVybCgpO1xuICAgICAgICBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpO1xuICAgICAgICBoZWFkZXJbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgaW5zdGFuY2VOYW1lID0gXCJpbnN0YWZlZWRDYWNoZVwiICsgdGhpcy51bmlxdWU7XG4gICAgICAgIHdpbmRvd1tpbnN0YW5jZU5hbWVdID0gbmV3IEluc3RhZmVlZCh0aGlzLm9wdGlvbnMsIHRoaXMpO1xuICAgICAgICB3aW5kb3dbaW5zdGFuY2VOYW1lXS51bmlxdWUgPSB0aGlzLnVuaXF1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHZhciBhbmNob3IsIGNoaWxkTm9kZUNvdW50LCBjaGlsZE5vZGVJbmRleCwgY2hpbGROb2Rlc0FyciwgZSwgZU1zZywgZnJhZ21lbnQsIGhlYWRlciwgaHRtbFN0cmluZywgaHR0cFByb3RvY29sLCBpLCBpbWFnZSwgaW1hZ2VPYmosIGltYWdlU3RyaW5nLCBpbWFnZVVybCwgaW1hZ2VzLCBpbWcsIGltZ0hlaWdodCwgaW1nT3JpZW50LCBpbWdVcmwsIGltZ1dpZHRoLCBpbnN0YW5jZU5hbWUsIGosIGssIGxlbiwgbGVuMSwgbGVuMiwgbm9kZSwgcGFyc2VkTGltaXQsIHJldmVyc2UsIHNvcnRTZXR0aW5ncywgdGFyZ2V0RWwsIHRtcEVsO1xuICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMuZXJyb3IgIT0gbnVsbCkgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5lcnJvci5jYWxsKHRoaXMsICdJbnZhbGlkIEpTT04gZGF0YScpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlNPTiByZXNwb25zZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzcG9uc2UubWV0YS5jb2RlICE9PSAyMDApIHtcbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMuZXJyb3IgIT0gbnVsbCkgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5lcnJvci5jYWxsKHRoaXMsIHJlc3BvbnNlLm1ldGEuZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGZyb20gSW5zdGFncmFtOiBcIiArIHJlc3BvbnNlLm1ldGEuZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoKHRoaXMub3B0aW9ucy5lcnJvciAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmVycm9yLmNhbGwodGhpcywgJ05vIGltYWdlcyB3ZXJlIHJldHVybmVkIGZyb20gSW5zdGFncmFtJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW1hZ2VzIHdlcmUgcmV0dXJuZWQgZnJvbSBJbnN0YWdyYW0nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCh0aGlzLm9wdGlvbnMuc3VjY2VzcyAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLnN1Y2Nlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN1Y2Nlc3MuY2FsbCh0aGlzLCByZXNwb25zZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRleHQubmV4dFVybCA9ICcnO1xuICAgICAgaWYgKHJlc3BvbnNlLnBhZ2luYXRpb24gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNvbnRleHQubmV4dFVybCA9IHJlc3BvbnNlLnBhZ2luYXRpb24ubmV4dF91cmw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnRCeSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc29ydEJ5ID09PSAncmFuZG9tJykge1xuICAgICAgICAgIHNvcnRTZXR0aW5ncyA9IFsnJywgJ3JhbmRvbSddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNvcnRTZXR0aW5ncyA9IHRoaXMub3B0aW9ucy5zb3J0Qnkuc3BsaXQoJy0nKTtcbiAgICAgICAgfVxuICAgICAgICByZXZlcnNlID0gc29ydFNldHRpbmdzWzBdID09PSAnbGVhc3QnID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKHNvcnRTZXR0aW5nc1sxXSkge1xuICAgICAgICAgIGNhc2UgJ3JhbmRvbSc6XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhLnNvcnQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAwLjUgLSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyZWNlbnQnOlxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHRoaXMuX3NvcnRCeShyZXNwb25zZS5kYXRhLCAnY3JlYXRlZF90aW1lJywgcmV2ZXJzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdsaWtlZCc6XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhID0gdGhpcy5fc29ydEJ5KHJlc3BvbnNlLmRhdGEsICdsaWtlcy5jb3VudCcsIHJldmVyc2UpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY29tbWVudGVkJzpcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEgPSB0aGlzLl9zb3J0QnkocmVzcG9uc2UuZGF0YSwgJ2NvbW1lbnRzLmNvdW50JywgcmV2ZXJzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBvcHRpb24gZm9yIHNvcnRCeTogJ1wiICsgdGhpcy5vcHRpb25zLnNvcnRCeSArIFwiJy5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50ICE9PSBudWxsKSAmJiB0aGlzLm9wdGlvbnMubW9jayA9PT0gZmFsc2UpIHtcbiAgICAgICAgaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgcGFyc2VkTGltaXQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMubGltaXQsIDEwKTtcbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMubGltaXQgIT0gbnVsbCkgJiYgaW1hZ2VzLmxlbmd0aCA+IHBhcnNlZExpbWl0KSB7XG4gICAgICAgICAgaW1hZ2VzID0gaW1hZ2VzLnNsaWNlKDAsIHBhcnNlZExpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMuZmlsdGVyICE9IG51bGwpICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaW1hZ2VzID0gdGhpcy5fZmlsdGVyKGltYWdlcywgdGhpcy5vcHRpb25zLmZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMudGVtcGxhdGUgIT0gbnVsbCkgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy50ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBodG1sU3RyaW5nID0gJyc7XG4gICAgICAgICAgaW1hZ2VTdHJpbmcgPSAnJztcbiAgICAgICAgICBpbWdVcmwgPSAnJztcbiAgICAgICAgICB0bXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGltYWdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaW1hZ2UgPSBpbWFnZXNbaV07XG4gICAgICAgICAgICBpbWFnZU9iaiA9IGltYWdlLmltYWdlc1t0aGlzLm9wdGlvbnMucmVzb2x1dGlvbl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGltYWdlT2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICBlTXNnID0gXCJObyBpbWFnZSBmb3VuZCBmb3IgcmVzb2x1dGlvbjogXCIgKyB0aGlzLm9wdGlvbnMucmVzb2x1dGlvbiArIFwiLlwiO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZU1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbWdXaWR0aCA9IGltYWdlT2JqLndpZHRoO1xuICAgICAgICAgICAgaW1nSGVpZ2h0ID0gaW1hZ2VPYmouaGVpZ2h0O1xuICAgICAgICAgICAgaW1nT3JpZW50ID0gXCJzcXVhcmVcIjtcbiAgICAgICAgICAgIGlmIChpbWdXaWR0aCA+IGltZ0hlaWdodCkge1xuICAgICAgICAgICAgICBpbWdPcmllbnQgPSBcImxhbmRzY2FwZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGltZ1dpZHRoIDwgaW1nSGVpZ2h0KSB7XG4gICAgICAgICAgICAgIGltZ09yaWVudCA9IFwicG9ydHJhaXRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltYWdlVXJsID0gaW1hZ2VPYmoudXJsO1xuICAgICAgICAgICAgaHR0cFByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID49IDA7XG4gICAgICAgICAgICBpZiAoaHR0cFByb3RvY29sICYmICF0aGlzLm9wdGlvbnMudXNlSHR0cCkge1xuICAgICAgICAgICAgICBpbWFnZVVybCA9IGltYWdlVXJsLnJlcGxhY2UoL2h0dHBzPzpcXC9cXC8vLCAnLy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltYWdlU3RyaW5nID0gdGhpcy5fbWFrZVRlbXBsYXRlKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSwge1xuICAgICAgICAgICAgICBtb2RlbDogaW1hZ2UsXG4gICAgICAgICAgICAgIGlkOiBpbWFnZS5pZCxcbiAgICAgICAgICAgICAgbGluazogaW1hZ2UubGluayxcbiAgICAgICAgICAgICAgdHlwZTogaW1hZ2UudHlwZSxcbiAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlVXJsLFxuICAgICAgICAgICAgICB3aWR0aDogaW1nV2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodDogaW1nSGVpZ2h0LFxuICAgICAgICAgICAgICBvcmllbnRhdGlvbjogaW1nT3JpZW50LFxuICAgICAgICAgICAgICBjYXB0aW9uOiB0aGlzLl9nZXRPYmplY3RQcm9wZXJ0eShpbWFnZSwgJ2NhcHRpb24udGV4dCcpLFxuICAgICAgICAgICAgICBsaWtlczogaW1hZ2UubGlrZXMuY291bnQsXG4gICAgICAgICAgICAgIGNvbW1lbnRzOiBpbWFnZS5jb21tZW50cy5jb3VudCxcbiAgICAgICAgICAgICAgbG9jYXRpb246IHRoaXMuX2dldE9iamVjdFByb3BlcnR5KGltYWdlLCAnbG9jYXRpb24ubmFtZScpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGh0bWxTdHJpbmcgKz0gaW1hZ2VTdHJpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRtcEVsLmlubmVySFRNTCA9IGh0bWxTdHJpbmc7XG4gICAgICAgICAgY2hpbGROb2Rlc0FyciA9IFtdO1xuICAgICAgICAgIGNoaWxkTm9kZUluZGV4ID0gMDtcbiAgICAgICAgICBjaGlsZE5vZGVDb3VudCA9IHRtcEVsLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChjaGlsZE5vZGVJbmRleCA8IGNoaWxkTm9kZUNvdW50KSB7XG4gICAgICAgICAgICBjaGlsZE5vZGVzQXJyLnB1c2godG1wRWwuY2hpbGROb2Rlc1tjaGlsZE5vZGVJbmRleF0pO1xuICAgICAgICAgICAgY2hpbGROb2RlSW5kZXggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IGNoaWxkTm9kZXNBcnIubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICBub2RlID0gY2hpbGROb2Rlc0FycltqXTtcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4yID0gaW1hZ2VzLmxlbmd0aDsgayA8IGxlbjI7IGsrKykge1xuICAgICAgICAgICAgaW1hZ2UgPSBpbWFnZXNba107XG4gICAgICAgICAgICBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgIGltYWdlT2JqID0gaW1hZ2UuaW1hZ2VzW3RoaXMub3B0aW9ucy5yZXNvbHV0aW9uXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW1hZ2VPYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGVNc2cgPSBcIk5vIGltYWdlIGZvdW5kIGZvciByZXNvbHV0aW9uOiBcIiArIHRoaXMub3B0aW9ucy5yZXNvbHV0aW9uICsgXCIuXCI7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltYWdlVXJsID0gaW1hZ2VPYmoudXJsO1xuICAgICAgICAgICAgaHR0cFByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID49IDA7XG4gICAgICAgICAgICBpZiAoaHR0cFByb3RvY29sICYmICF0aGlzLm9wdGlvbnMudXNlSHR0cCkge1xuICAgICAgICAgICAgICBpbWFnZVVybCA9IGltYWdlVXJsLnJlcGxhY2UoL2h0dHBzPzpcXC9cXC8vLCAnLy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltZy5zcmMgPSBpbWFnZVVybDtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGlua3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICBhbmNob3IuaHJlZiA9IGltYWdlLmxpbms7XG4gICAgICAgICAgICAgIGFuY2hvci5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChhbmNob3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0RWwgPSB0aGlzLm9wdGlvbnMudGFyZ2V0O1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldEVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRhcmdldEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0RWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJnZXRFbCA9PSBudWxsKSB7XG4gICAgICAgICAgZU1zZyA9IFwiTm8gZWxlbWVudCB3aXRoIGlkPVxcXCJcIiArIHRoaXMub3B0aW9ucy50YXJnZXQgKyBcIlxcXCIgb24gcGFnZS5cIjtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZU1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0RWwuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICAgICAgICBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICBoZWFkZXIucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc3RhZmVlZC1mZXRjaGVyJykpO1xuICAgICAgICBpbnN0YW5jZU5hbWUgPSBcImluc3RhZmVlZENhY2hlXCIgKyB0aGlzLnVuaXF1ZTtcbiAgICAgICAgd2luZG93W2luc3RhbmNlTmFtZV0gPSB2b2lkIDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVsZXRlIHdpbmRvd1tpbnN0YW5jZU5hbWVdO1xuICAgICAgICB9IGNhdGNoIChfZXJyb3IpIHtcbiAgICAgICAgICBlID0gX2Vycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKHRoaXMub3B0aW9ucy5hZnRlciAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5hZnRlci5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIEluc3RhZmVlZC5wcm90b3R5cGUuX2J1aWxkVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmFzZSwgZW5kcG9pbnQsIGZpbmFsO1xuICAgICAgYmFzZSA9IFwiaHR0cHM6Ly9hcGkuaW5zdGFncmFtLmNvbS92MVwiO1xuICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMuZ2V0KSB7XG4gICAgICAgIGNhc2UgXCJwb3B1bGFyXCI6XG4gICAgICAgICAgZW5kcG9pbnQgPSBcIm1lZGlhL3BvcHVsYXJcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRhZ2dlZFwiOlxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHRhZyBuYW1lIHNwZWNpZmllZC4gVXNlIHRoZSAndGFnTmFtZScgb3B0aW9uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5kcG9pbnQgPSBcInRhZ3MvXCIgKyB0aGlzLm9wdGlvbnMudGFnTmFtZSArIFwiL21lZGlhL3JlY2VudFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibG9jYXRpb25cIjpcbiAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5sb2NhdGlvbklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBsb2NhdGlvbiBzcGVjaWZpZWQuIFVzZSB0aGUgJ2xvY2F0aW9uSWQnIG9wdGlvbi5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVuZHBvaW50ID0gXCJsb2NhdGlvbnMvXCIgKyB0aGlzLm9wdGlvbnMubG9jYXRpb25JZCArIFwiL21lZGlhL3JlY2VudFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXNlclwiOlxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnVzZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdXNlciBzcGVjaWZpZWQuIFVzZSB0aGUgJ3VzZXJJZCcgb3B0aW9uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5kcG9pbnQgPSBcInVzZXJzL1wiICsgdGhpcy5vcHRpb25zLnVzZXJJZCArIFwiL21lZGlhL3JlY2VudFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3B0aW9uIGZvciBnZXQ6ICdcIiArIHRoaXMub3B0aW9ucy5nZXQgKyBcIicuXCIpO1xuICAgICAgfVxuICAgICAgZmluYWwgPSBiYXNlICsgXCIvXCIgKyBlbmRwb2ludDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW4gIT0gbnVsbCkge1xuICAgICAgICBmaW5hbCArPSBcIj9hY2Nlc3NfdG9rZW49XCIgKyB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaW5hbCArPSBcIj9jbGllbnRfaWQ9XCIgKyB0aGlzLm9wdGlvbnMuY2xpZW50SWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxpbWl0ICE9IG51bGwpIHtcbiAgICAgICAgZmluYWwgKz0gXCImY291bnQ9XCIgKyB0aGlzLm9wdGlvbnMubGltaXQ7XG4gICAgICB9XG4gICAgICBmaW5hbCArPSBcIiZjYWxsYmFjaz1pbnN0YWZlZWRDYWNoZVwiICsgdGhpcy51bmlxdWUgKyBcIi5wYXJzZVwiO1xuICAgICAgcmV0dXJuIGZpbmFsO1xuICAgIH07XG5cbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9nZW5LZXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBTNDtcbiAgICAgIFM0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFwiXCIgKyAoUzQoKSkgKyAoUzQoKSkgKyAoUzQoKSkgKyAoUzQoKSk7XG4gICAgfTtcblxuICAgIEluc3RhZmVlZC5wcm90b3R5cGUuX21ha2VUZW1wbGF0ZSA9IGZ1bmN0aW9uKHRlbXBsYXRlLCBkYXRhKSB7XG4gICAgICB2YXIgb3V0cHV0LCBwYXR0ZXJuLCByZWYsIHZhck5hbWUsIHZhclZhbHVlO1xuICAgICAgcGF0dGVybiA9IC8oPzpcXHt7Mn0pKFtcXHdcXFtcXF1cXC5dKykoPzpcXH17Mn0pLztcbiAgICAgIG91dHB1dCA9IHRlbXBsYXRlO1xuICAgICAgd2hpbGUgKHBhdHRlcm4udGVzdChvdXRwdXQpKSB7XG4gICAgICAgIHZhck5hbWUgPSBvdXRwdXQubWF0Y2gocGF0dGVybilbMV07XG4gICAgICAgIHZhclZhbHVlID0gKHJlZiA9IHRoaXMuX2dldE9iamVjdFByb3BlcnR5KGRhdGEsIHZhck5hbWUpKSAhPSBudWxsID8gcmVmIDogJyc7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKHBhdHRlcm4sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBcIlwiICsgdmFyVmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgSW5zdGFmZWVkLnByb3RvdHlwZS5fZ2V0T2JqZWN0UHJvcGVydHkgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICB2YXIgcGllY2UsIHBpZWNlcztcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICcuJDEnKTtcbiAgICAgIHBpZWNlcyA9IHByb3BlcnR5LnNwbGl0KCcuJyk7XG4gICAgICB3aGlsZSAocGllY2VzLmxlbmd0aCkge1xuICAgICAgICBwaWVjZSA9IHBpZWNlcy5zaGlmdCgpO1xuICAgICAgICBpZiAoKG9iamVjdCAhPSBudWxsKSAmJiBwaWVjZSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBvYmplY3QgPSBvYmplY3RbcGllY2VdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9zb3J0QnkgPSBmdW5jdGlvbihkYXRhLCBwcm9wZXJ0eSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIHNvcnRlcjtcbiAgICAgIHNvcnRlciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgdmFyIHZhbHVlQSwgdmFsdWVCO1xuICAgICAgICB2YWx1ZUEgPSB0aGlzLl9nZXRPYmplY3RQcm9wZXJ0eShhLCBwcm9wZXJ0eSk7XG4gICAgICAgIHZhbHVlQiA9IHRoaXMuX2dldE9iamVjdFByb3BlcnR5KGIsIHByb3BlcnR5KTtcbiAgICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgICBpZiAodmFsdWVBID4gdmFsdWVCKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVBIDwgdmFsdWVCKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZGF0YS5zb3J0KHNvcnRlci5iaW5kKHRoaXMpKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG5cbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9maWx0ZXIgPSBmdW5jdGlvbihpbWFnZXMsIGZpbHRlcikge1xuICAgICAgdmFyIGZpbHRlcmVkSW1hZ2VzLCBmbiwgaSwgaW1hZ2UsIGxlbjtcbiAgICAgIGZpbHRlcmVkSW1hZ2VzID0gW107XG4gICAgICBmbiA9IGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgICAgIGlmIChmaWx0ZXIoaW1hZ2UpKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbHRlcmVkSW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gaW1hZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGltYWdlID0gaW1hZ2VzW2ldO1xuICAgICAgICBmbihpbWFnZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWRJbWFnZXM7XG4gICAgfTtcblxuICAgIHJldHVybiBJbnN0YWZlZWQ7XG5cbiAgfSkoKTtcblxuICAoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgIHJldHVybiBkZWZpbmUoW10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvb3QuSW5zdGFmZWVkID0gZmFjdG9yeSgpO1xuICAgIH1cbiAgfSkodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEluc3RhZmVlZDtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4hZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiOyFmdW5jdGlvbiBvKGUsdCxuKXtmdW5jdGlvbiBhKHMsbCl7aWYoIXRbc10pe2lmKCFlW3NdKXt2YXIgaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFsJiZpKXJldHVybiBpKHMsITApO2lmKHIpcmV0dXJuIHIocywhMCk7dmFyIHU9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitzK1wiJ1wiKTt0aHJvdyB1LmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsdX12YXIgYz10W3NdPXtleHBvcnRzOnt9fTtlW3NdWzBdLmNhbGwoYy5leHBvcnRzLGZ1bmN0aW9uKHQpe3ZhciBuPWVbc11bMV1bdF07cmV0dXJuIGEobj9uOnQpfSxjLGMuZXhwb3J0cyxvLGUsdCxuKX1yZXR1cm4gdFtzXS5leHBvcnRzfWZvcih2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLHM9MDtzPG4ubGVuZ3RoO3MrKylhKG5bc10pO3JldHVybiBhfSh7MTpbZnVuY3Rpb24obyxhLHIpe3ZhciBzPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBsLGksdSxjLGQ9byhcIi4vbW9kdWxlcy9oYW5kbGUtZG9tXCIpLGY9byhcIi4vbW9kdWxlcy91dGlsc1wiKSxwPW8oXCIuL21vZHVsZXMvaGFuZGxlLXN3YWwtZG9tXCIpLG09byhcIi4vbW9kdWxlcy9oYW5kbGUtY2xpY2tcIiksdj1vKFwiLi9tb2R1bGVzL2hhbmRsZS1rZXlcIikseT1zKHYpLGg9byhcIi4vbW9kdWxlcy9kZWZhdWx0LXBhcmFtc1wiKSxiPXMoaCksZz1vKFwiLi9tb2R1bGVzL3NldC1wYXJhbXNcIiksdz1zKGcpO3JbXCJkZWZhdWx0XCJdPXU9Yz1mdW5jdGlvbigpe2Z1bmN0aW9uIG8oZSl7dmFyIHQ9YTtyZXR1cm4gdFtlXT09PW4/YltcImRlZmF1bHRcIl1bZV06dFtlXX12YXIgYT1hcmd1bWVudHNbMF07aWYoZC5hZGRDbGFzcyh0LmJvZHksXCJzdG9wLXNjcm9sbGluZ1wiKSxwLnJlc2V0SW5wdXQoKSxhPT09bilyZXR1cm4gZi5sb2dTdHIoXCJTd2VldEFsZXJ0IGV4cGVjdHMgYXQgbGVhc3QgMSBhdHRyaWJ1dGUhXCIpLCExO3ZhciByPWYuZXh0ZW5kKHt9LGJbXCJkZWZhdWx0XCJdKTtzd2l0Y2godHlwZW9mIGEpe2Nhc2VcInN0cmluZ1wiOnIudGl0bGU9YSxyLnRleHQ9YXJndW1lbnRzWzFdfHxcIlwiLHIudHlwZT1hcmd1bWVudHNbMl18fFwiXCI7YnJlYWs7Y2FzZVwib2JqZWN0XCI6aWYoYS50aXRsZT09PW4pcmV0dXJuIGYubG9nU3RyKCdNaXNzaW5nIFwidGl0bGVcIiBhcmd1bWVudCEnKSwhMTtyLnRpdGxlPWEudGl0bGU7Zm9yKHZhciBzIGluIGJbXCJkZWZhdWx0XCJdKXJbc109byhzKTtyLmNvbmZpcm1CdXR0b25UZXh0PXIuc2hvd0NhbmNlbEJ1dHRvbj9cIkNvbmZpcm1cIjpiW1wiZGVmYXVsdFwiXS5jb25maXJtQnV0dG9uVGV4dCxyLmNvbmZpcm1CdXR0b25UZXh0PW8oXCJjb25maXJtQnV0dG9uVGV4dFwiKSxyLmRvbmVGdW5jdGlvbj1hcmd1bWVudHNbMV18fG51bGw7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gZi5sb2dTdHIoJ1VuZXhwZWN0ZWQgdHlwZSBvZiBhcmd1bWVudCEgRXhwZWN0ZWQgXCJzdHJpbmdcIiBvciBcIm9iamVjdFwiLCBnb3QgJyt0eXBlb2YgYSksITF9d1tcImRlZmF1bHRcIl0ocikscC5maXhWZXJ0aWNhbFBvc2l0aW9uKCkscC5vcGVuTW9kYWwoYXJndW1lbnRzWzFdKTtmb3IodmFyIHU9cC5nZXRNb2RhbCgpLHY9dS5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uXCIpLGg9W1wib25jbGlja1wiLFwib25tb3VzZW92ZXJcIixcIm9ubW91c2VvdXRcIixcIm9ubW91c2Vkb3duXCIsXCJvbm1vdXNldXBcIixcIm9uZm9jdXNcIl0sZz1mdW5jdGlvbihlKXtyZXR1cm4gbS5oYW5kbGVCdXR0b24oZSxyLHUpfSxDPTA7Qzx2Lmxlbmd0aDtDKyspZm9yKHZhciBTPTA7UzxoLmxlbmd0aDtTKyspe3ZhciB4PWhbU107dltDXVt4XT1nfXAuZ2V0T3ZlcmxheSgpLm9uY2xpY2s9ZyxsPWUub25rZXlkb3duO3ZhciBrPWZ1bmN0aW9uKGUpe3JldHVybiB5W1wiZGVmYXVsdFwiXShlLHIsdSl9O2Uub25rZXlkb3duPWssZS5vbmZvY3VzPWZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe2khPT1uJiYoaS5mb2N1cygpLGk9bil9LDApfSxjLmVuYWJsZUJ1dHRvbnMoKX0sdS5zZXREZWZhdWx0cz1jLnNldERlZmF1bHRzPWZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcInVzZXJQYXJhbXMgaXMgcmVxdWlyZWRcIik7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwidXNlclBhcmFtcyBoYXMgdG8gYmUgYSBvYmplY3RcIik7Zi5leHRlbmQoYltcImRlZmF1bHRcIl0sZSl9LHUuY2xvc2U9Yy5jbG9zZT1mdW5jdGlvbigpe3ZhciBvPXAuZ2V0TW9kYWwoKTtkLmZhZGVPdXQocC5nZXRPdmVybGF5KCksNSksZC5mYWRlT3V0KG8sNSksZC5yZW1vdmVDbGFzcyhvLFwic2hvd1N3ZWV0QWxlcnRcIiksZC5hZGRDbGFzcyhvLFwiaGlkZVN3ZWV0QWxlcnRcIiksZC5yZW1vdmVDbGFzcyhvLFwidmlzaWJsZVwiKTt2YXIgYT1vLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtaWNvbi5zYS1zdWNjZXNzXCIpO2QucmVtb3ZlQ2xhc3MoYSxcImFuaW1hdGVcIiksZC5yZW1vdmVDbGFzcyhhLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtdGlwXCIpLFwiYW5pbWF0ZVN1Y2Nlc3NUaXBcIiksZC5yZW1vdmVDbGFzcyhhLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtbG9uZ1wiKSxcImFuaW1hdGVTdWNjZXNzTG9uZ1wiKTt2YXIgcj1vLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtaWNvbi5zYS1lcnJvclwiKTtkLnJlbW92ZUNsYXNzKHIsXCJhbmltYXRlRXJyb3JJY29uXCIpLGQucmVtb3ZlQ2xhc3Moci5xdWVyeVNlbGVjdG9yKFwiLnNhLXgtbWFya1wiKSxcImFuaW1hdGVYTWFya1wiKTt2YXIgcz1vLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtaWNvbi5zYS13YXJuaW5nXCIpO3JldHVybiBkLnJlbW92ZUNsYXNzKHMsXCJwdWxzZVdhcm5pbmdcIiksZC5yZW1vdmVDbGFzcyhzLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtYm9keVwiKSxcInB1bHNlV2FybmluZ0luc1wiKSxkLnJlbW92ZUNsYXNzKHMucXVlcnlTZWxlY3RvcihcIi5zYS1kb3RcIiksXCJwdWxzZVdhcm5pbmdJbnNcIiksc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBlPW8uZ2V0QXR0cmlidXRlKFwiZGF0YS1jdXN0b20tY2xhc3NcIik7ZC5yZW1vdmVDbGFzcyhvLGUpfSwzMDApLGQucmVtb3ZlQ2xhc3ModC5ib2R5LFwic3RvcC1zY3JvbGxpbmdcIiksZS5vbmtleWRvd249bCxlLnByZXZpb3VzQWN0aXZlRWxlbWVudCYmZS5wcmV2aW91c0FjdGl2ZUVsZW1lbnQuZm9jdXMoKSxpPW4sY2xlYXJUaW1lb3V0KG8udGltZW91dCksITB9LHUuc2hvd0lucHV0RXJyb3I9Yy5zaG93SW5wdXRFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1wLmdldE1vZGFsKCksbj10LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtaW5wdXQtZXJyb3JcIik7ZC5hZGRDbGFzcyhuLFwic2hvd1wiKTt2YXIgbz10LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtZXJyb3ItY29udGFpbmVyXCIpO2QuYWRkQ2xhc3MobyxcInNob3dcIiksby5xdWVyeVNlbGVjdG9yKFwicFwiKS5pbm5lckhUTUw9ZSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dS5lbmFibGVCdXR0b25zKCl9LDEpLHQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpLmZvY3VzKCl9LHUucmVzZXRJbnB1dEVycm9yPWMucmVzZXRJbnB1dEVycm9yPWZ1bmN0aW9uKGUpe2lmKGUmJjEzPT09ZS5rZXlDb2RlKXJldHVybiExO3ZhciB0PXAuZ2V0TW9kYWwoKSxuPXQucXVlcnlTZWxlY3RvcihcIi5zYS1pbnB1dC1lcnJvclwiKTtkLnJlbW92ZUNsYXNzKG4sXCJzaG93XCIpO3ZhciBvPXQucXVlcnlTZWxlY3RvcihcIi5zYS1lcnJvci1jb250YWluZXJcIik7ZC5yZW1vdmVDbGFzcyhvLFwic2hvd1wiKX0sdS5kaXNhYmxlQnV0dG9ucz1jLmRpc2FibGVCdXR0b25zPWZ1bmN0aW9uKCl7dmFyIGU9cC5nZXRNb2RhbCgpLHQ9ZS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNvbmZpcm1cIiksbj1lLnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uY2FuY2VsXCIpO3QuZGlzYWJsZWQ9ITAsbi5kaXNhYmxlZD0hMH0sdS5lbmFibGVCdXR0b25zPWMuZW5hYmxlQnV0dG9ucz1mdW5jdGlvbigpe3ZhciBlPXAuZ2V0TW9kYWwoKSx0PWUucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jb25maXJtXCIpLG49ZS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNhbmNlbFwiKTt0LmRpc2FibGVkPSExLG4uZGlzYWJsZWQ9ITF9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBlP2Uuc3dlZXRBbGVydD1lLnN3YWw9dTpmLmxvZ1N0cihcIlN3ZWV0QWxlcnQgaXMgYSBmcm9udGVuZCBtb2R1bGUhXCIpLGEuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiLi9tb2R1bGVzL2RlZmF1bHQtcGFyYW1zXCI6MixcIi4vbW9kdWxlcy9oYW5kbGUtY2xpY2tcIjozLFwiLi9tb2R1bGVzL2hhbmRsZS1kb21cIjo0LFwiLi9tb2R1bGVzL2hhbmRsZS1rZXlcIjo1LFwiLi9tb2R1bGVzL2hhbmRsZS1zd2FsLWRvbVwiOjYsXCIuL21vZHVsZXMvc2V0LXBhcmFtc1wiOjgsXCIuL21vZHVsZXMvdXRpbHNcIjo5fV0sMjpbZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXt0aXRsZTpcIlwiLHRleHQ6XCJcIix0eXBlOm51bGwsYWxsb3dPdXRzaWRlQ2xpY2s6ITEsc2hvd0NvbmZpcm1CdXR0b246ITAsc2hvd0NhbmNlbEJ1dHRvbjohMSxjbG9zZU9uQ29uZmlybTohMCxjbG9zZU9uQ2FuY2VsOiEwLGNvbmZpcm1CdXR0b25UZXh0OlwiT0tcIixjb25maXJtQnV0dG9uQ29sb3I6XCIjOENENEY1XCIsY2FuY2VsQnV0dG9uVGV4dDpcIkNhbmNlbFwiLGltYWdlVXJsOm51bGwsaW1hZ2VTaXplOm51bGwsdGltZXI6bnVsbCxjdXN0b21DbGFzczpcIlwiLGh0bWw6ITEsYW5pbWF0aW9uOiEwLGFsbG93RXNjYXBlS2V5OiEwLGlucHV0VHlwZTpcInRleHRcIixpbnB1dFBsYWNlaG9sZGVyOlwiXCIsaW5wdXRWYWx1ZTpcIlwiLHNob3dMb2FkZXJPbkNvbmZpcm06ITF9O25bXCJkZWZhdWx0XCJdPW8sdC5leHBvcnRzPW5bXCJkZWZhdWx0XCJdfSx7fV0sMzpbZnVuY3Rpb24odCxuLG8pe09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXQoXCIuL3V0aWxzXCIpLHI9KHQoXCIuL2hhbmRsZS1zd2FsLWRvbVwiKSx0KFwiLi9oYW5kbGUtZG9tXCIpKSxzPWZ1bmN0aW9uKHQsbixvKXtmdW5jdGlvbiBzKGUpe20mJm4uY29uZmlybUJ1dHRvbkNvbG9yJiYocC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9ZSl9dmFyIHUsYyxkLGY9dHx8ZS5ldmVudCxwPWYudGFyZ2V0fHxmLnNyY0VsZW1lbnQsbT0tMSE9PXAuY2xhc3NOYW1lLmluZGV4T2YoXCJjb25maXJtXCIpLHY9LTEhPT1wLmNsYXNzTmFtZS5pbmRleE9mKFwic3dlZXQtb3ZlcmxheVwiKSx5PXIuaGFzQ2xhc3MobyxcInZpc2libGVcIiksaD1uLmRvbmVGdW5jdGlvbiYmXCJ0cnVlXCI9PT1vLmdldEF0dHJpYnV0ZShcImRhdGEtaGFzLWRvbmUtZnVuY3Rpb25cIik7c3dpdGNoKG0mJm4uY29uZmlybUJ1dHRvbkNvbG9yJiYodT1uLmNvbmZpcm1CdXR0b25Db2xvcixjPWEuY29sb3JMdW1pbmFuY2UodSwtLjA0KSxkPWEuY29sb3JMdW1pbmFuY2UodSwtLjE0KSksZi50eXBlKXtjYXNlXCJtb3VzZW92ZXJcIjpzKGMpO2JyZWFrO2Nhc2VcIm1vdXNlb3V0XCI6cyh1KTticmVhaztjYXNlXCJtb3VzZWRvd25cIjpzKGQpO2JyZWFrO2Nhc2VcIm1vdXNldXBcIjpzKGMpO2JyZWFrO2Nhc2VcImZvY3VzXCI6dmFyIGI9by5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNvbmZpcm1cIiksZz1vLnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uY2FuY2VsXCIpO20/Zy5zdHlsZS5ib3hTaGFkb3c9XCJub25lXCI6Yi5zdHlsZS5ib3hTaGFkb3c9XCJub25lXCI7YnJlYWs7Y2FzZVwiY2xpY2tcIjp2YXIgdz1vPT09cCxDPXIuaXNEZXNjZW5kYW50KG8scCk7aWYoIXcmJiFDJiZ5JiYhbi5hbGxvd091dHNpZGVDbGljaylicmVhazttJiZoJiZ5P2wobyxuKTpoJiZ5fHx2P2kobyxuKTpyLmlzRGVzY2VuZGFudChvLHApJiZcIkJVVFRPTlwiPT09cC50YWdOYW1lJiZzd2VldEFsZXJ0LmNsb3NlKCl9fSxsPWZ1bmN0aW9uKGUsdCl7dmFyIG49ITA7ci5oYXNDbGFzcyhlLFwic2hvdy1pbnB1dFwiKSYmKG49ZS5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIikudmFsdWUsbnx8KG49XCJcIikpLHQuZG9uZUZ1bmN0aW9uKG4pLHQuY2xvc2VPbkNvbmZpcm0mJnN3ZWV0QWxlcnQuY2xvc2UoKSx0LnNob3dMb2FkZXJPbkNvbmZpcm0mJnN3ZWV0QWxlcnQuZGlzYWJsZUJ1dHRvbnMoKX0saT1mdW5jdGlvbihlLHQpe3ZhciBuPVN0cmluZyh0LmRvbmVGdW5jdGlvbikucmVwbGFjZSgvXFxzL2csXCJcIiksbz1cImZ1bmN0aW9uKFwiPT09bi5zdWJzdHJpbmcoMCw5KSYmXCIpXCIhPT1uLnN1YnN0cmluZyg5LDEwKTtvJiZ0LmRvbmVGdW5jdGlvbighMSksdC5jbG9zZU9uQ2FuY2VsJiZzd2VldEFsZXJ0LmNsb3NlKCl9O29bXCJkZWZhdWx0XCJdPXtoYW5kbGVCdXR0b246cyxoYW5kbGVDb25maXJtOmwsaGFuZGxlQ2FuY2VsOml9LG4uZXhwb3J0cz1vW1wiZGVmYXVsdFwiXX0se1wiLi9oYW5kbGUtZG9tXCI6NCxcIi4vaGFuZGxlLXN3YWwtZG9tXCI6NixcIi4vdXRpbHNcIjo5fV0sNDpbZnVuY3Rpb24obixvLGEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBSZWdFeHAoXCIgXCIrdCtcIiBcIikudGVzdChcIiBcIitlLmNsYXNzTmFtZStcIiBcIil9LHM9ZnVuY3Rpb24oZSx0KXtyKGUsdCl8fChlLmNsYXNzTmFtZSs9XCIgXCIrdCl9LGw9ZnVuY3Rpb24oZSx0KXt2YXIgbj1cIiBcIitlLmNsYXNzTmFtZS5yZXBsYWNlKC9bXFx0XFxyXFxuXS9nLFwiIFwiKStcIiBcIjtpZihyKGUsdCkpe2Zvcig7bi5pbmRleE9mKFwiIFwiK3QrXCIgXCIpPj0wOyluPW4ucmVwbGFjZShcIiBcIit0K1wiIFwiLFwiIFwiKTtlLmNsYXNzTmFtZT1uLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9fSxpPWZ1bmN0aW9uKGUpe3ZhciBuPXQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gbi5hcHBlbmRDaGlsZCh0LmNyZWF0ZVRleHROb2RlKGUpKSxuLmlubmVySFRNTH0sdT1mdW5jdGlvbihlKXtlLnN0eWxlLm9wYWNpdHk9XCJcIixlLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifSxjPWZ1bmN0aW9uKGUpe2lmKGUmJiFlLmxlbmd0aClyZXR1cm4gdShlKTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoOysrdCl1KGVbdF0pfSxkPWZ1bmN0aW9uKGUpe2Uuc3R5bGUub3BhY2l0eT1cIlwiLGUuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0sZj1mdW5jdGlvbihlKXtpZihlJiYhZS5sZW5ndGgpcmV0dXJuIGQoZSk7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDsrK3QpZChlW3RdKX0scD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10LnBhcmVudE5vZGU7bnVsbCE9PW47KXtpZihuPT09ZSlyZXR1cm4hMDtuPW4ucGFyZW50Tm9kZX1yZXR1cm4hMX0sbT1mdW5jdGlvbihlKXtlLnN0eWxlLmxlZnQ9XCItOTk5OXB4XCIsZS5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIjt2YXIgdCxuPWUuY2xpZW50SGVpZ2h0O3JldHVybiB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnZXRDb21wdXRlZFN0eWxlP3BhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoZSkuZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctdG9wXCIpLDEwKTpwYXJzZUludChlLmN1cnJlbnRTdHlsZS5wYWRkaW5nKSxlLnN0eWxlLmxlZnQ9XCJcIixlLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsXCItXCIrcGFyc2VJbnQoKG4rdCkvMikrXCJweFwifSx2PWZ1bmN0aW9uKGUsdCl7aWYoK2Uuc3R5bGUub3BhY2l0eTwxKXt0PXR8fDE2LGUuc3R5bGUub3BhY2l0eT0wLGUuc3R5bGUuZGlzcGxheT1cImJsb2NrXCI7dmFyIG49K25ldyBEYXRlLG89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBlLnRvU3RyaW5nKCl9LHR9KGZ1bmN0aW9uKCl7ZS5zdHlsZS5vcGFjaXR5PStlLnN0eWxlLm9wYWNpdHkrKG5ldyBEYXRlLW4pLzEwMCxuPStuZXcgRGF0ZSwrZS5zdHlsZS5vcGFjaXR5PDEmJnNldFRpbWVvdXQobyx0KX0pO28oKX1lLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifSx5PWZ1bmN0aW9uKGUsdCl7dD10fHwxNixlLnN0eWxlLm9wYWNpdHk9MTt2YXIgbj0rbmV3IERhdGUsbz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGUudG9TdHJpbmcoKX0sdH0oZnVuY3Rpb24oKXtlLnN0eWxlLm9wYWNpdHk9K2Uuc3R5bGUub3BhY2l0eS0obmV3IERhdGUtbikvMTAwLG49K25ldyBEYXRlLCtlLnN0eWxlLm9wYWNpdHk+MD9zZXRUaW1lb3V0KG8sdCk6ZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwifSk7bygpfSxoPWZ1bmN0aW9uKG4pe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIE1vdXNlRXZlbnQpe3ZhciBvPW5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIix7dmlldzplLGJ1YmJsZXM6ITEsY2FuY2VsYWJsZTohMH0pO24uZGlzcGF0Y2hFdmVudChvKX1lbHNlIGlmKHQuY3JlYXRlRXZlbnQpe3ZhciBhPXQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTthLmluaXRFdmVudChcImNsaWNrXCIsITEsITEpLG4uZGlzcGF0Y2hFdmVudChhKX1lbHNlIHQuY3JlYXRlRXZlbnRPYmplY3Q/bi5maXJlRXZlbnQoXCJvbmNsaWNrXCIpOlwiZnVuY3Rpb25cIj09dHlwZW9mIG4ub25jbGljayYmbi5vbmNsaWNrKCl9LGI9ZnVuY3Rpb24odCl7XCJmdW5jdGlvblwiPT10eXBlb2YgdC5zdG9wUHJvcGFnYXRpb24/KHQuc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpKTplLmV2ZW50JiZlLmV2ZW50Lmhhc093blByb3BlcnR5KFwiY2FuY2VsQnViYmxlXCIpJiYoZS5ldmVudC5jYW5jZWxCdWJibGU9ITApfTthLmhhc0NsYXNzPXIsYS5hZGRDbGFzcz1zLGEucmVtb3ZlQ2xhc3M9bCxhLmVzY2FwZUh0bWw9aSxhLl9zaG93PXUsYS5zaG93PWMsYS5faGlkZT1kLGEuaGlkZT1mLGEuaXNEZXNjZW5kYW50PXAsYS5nZXRUb3BNYXJnaW49bSxhLmZhZGVJbj12LGEuZmFkZU91dD15LGEuZmlyZUNsaWNrPWgsYS5zdG9wRXZlbnRQcm9wYWdhdGlvbj1ifSx7fV0sNTpbZnVuY3Rpb24odCxvLGEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPXQoXCIuL2hhbmRsZS1kb21cIikscz10KFwiLi9oYW5kbGUtc3dhbC1kb21cIiksbD1mdW5jdGlvbih0LG8sYSl7dmFyIGw9dHx8ZS5ldmVudCxpPWwua2V5Q29kZXx8bC53aGljaCx1PWEucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jb25maXJtXCIpLGM9YS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNhbmNlbFwiKSxkPWEucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblt0YWJpbmRleF1cIik7aWYoLTEhPT1bOSwxMywzMiwyN10uaW5kZXhPZihpKSl7Zm9yKHZhciBmPWwudGFyZ2V0fHxsLnNyY0VsZW1lbnQscD0tMSxtPTA7bTxkLmxlbmd0aDttKyspaWYoZj09PWRbbV0pe3A9bTticmVha305PT09aT8oZj0tMT09PXA/dTpwPT09ZC5sZW5ndGgtMT9kWzBdOmRbcCsxXSxyLnN0b3BFdmVudFByb3BhZ2F0aW9uKGwpLGYuZm9jdXMoKSxvLmNvbmZpcm1CdXR0b25Db2xvciYmcy5zZXRGb2N1c1N0eWxlKGYsby5jb25maXJtQnV0dG9uQ29sb3IpKToxMz09PWk/KFwiSU5QVVRcIj09PWYudGFnTmFtZSYmKGY9dSx1LmZvY3VzKCkpLGY9LTE9PT1wP3U6bik6Mjc9PT1pJiZvLmFsbG93RXNjYXBlS2V5PT09ITA/KGY9YyxyLmZpcmVDbGljayhmLGwpKTpmPW59fTthW1wiZGVmYXVsdFwiXT1sLG8uZXhwb3J0cz1hW1wiZGVmYXVsdFwiXX0se1wiLi9oYW5kbGUtZG9tXCI6NCxcIi4vaGFuZGxlLXN3YWwtZG9tXCI6Nn1dLDY6W2Z1bmN0aW9uKG4sbyxhKXt2YXIgcj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1uKFwiLi91dGlsc1wiKSxsPW4oXCIuL2hhbmRsZS1kb21cIiksaT1uKFwiLi9kZWZhdWx0LXBhcmFtc1wiKSx1PXIoaSksYz1uKFwiLi9pbmplY3RlZC1odG1sXCIpLGQ9cihjKSxmPVwiLnN3ZWV0LWFsZXJ0XCIscD1cIi5zd2VldC1vdmVybGF5XCIsbT1mdW5jdGlvbigpe3ZhciBlPXQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoZS5pbm5lckhUTUw9ZFtcImRlZmF1bHRcIl07ZS5maXJzdENoaWxkOyl0LmJvZHkuYXBwZW5kQ2hpbGQoZS5maXJzdENoaWxkKX0sdj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGUudG9TdHJpbmcoKX0sdH0oZnVuY3Rpb24oKXt2YXIgZT10LnF1ZXJ5U2VsZWN0b3IoZik7cmV0dXJuIGV8fChtKCksZT12KCkpLGV9KSx5PWZ1bmN0aW9uKCl7dmFyIGU9digpO3JldHVybiBlP2UucXVlcnlTZWxlY3RvcihcImlucHV0XCIpOnZvaWQgMH0saD1mdW5jdGlvbigpe3JldHVybiB0LnF1ZXJ5U2VsZWN0b3IocCl9LGI9ZnVuY3Rpb24oZSx0KXt2YXIgbj1zLmhleFRvUmdiKHQpO2Uuc3R5bGUuYm94U2hhZG93PVwiMCAwIDJweCByZ2JhKFwiK24rXCIsIDAuOCksIGluc2V0IDAgMCAwIDFweCByZ2JhKDAsIDAsIDAsIDAuMDUpXCJ9LGc9ZnVuY3Rpb24obil7dmFyIG89digpO2wuZmFkZUluKGgoKSwxMCksbC5zaG93KG8pLGwuYWRkQ2xhc3MobyxcInNob3dTd2VldEFsZXJ0XCIpLGwucmVtb3ZlQ2xhc3MobyxcImhpZGVTd2VldEFsZXJ0XCIpLGUucHJldmlvdXNBY3RpdmVFbGVtZW50PXQuYWN0aXZlRWxlbWVudDt2YXIgYT1vLnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uY29uZmlybVwiKTthLmZvY3VzKCksc2V0VGltZW91dChmdW5jdGlvbigpe2wuYWRkQ2xhc3MobyxcInZpc2libGVcIil9LDUwMCk7dmFyIHI9by5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpbWVyXCIpO2lmKFwibnVsbFwiIT09ciYmXCJcIiE9PXIpe3ZhciBzPW47by50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgZT0oc3x8bnVsbCkmJlwidHJ1ZVwiPT09by5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1kb25lLWZ1bmN0aW9uXCIpO2U/cyhudWxsKTpzd2VldEFsZXJ0LmNsb3NlKCl9LHIpfX0sdz1mdW5jdGlvbigpe3ZhciBlPXYoKSx0PXkoKTtsLnJlbW92ZUNsYXNzKGUsXCJzaG93LWlucHV0XCIpLHQudmFsdWU9dVtcImRlZmF1bHRcIl0uaW5wdXRWYWx1ZSx0LnNldEF0dHJpYnV0ZShcInR5cGVcIix1W1wiZGVmYXVsdFwiXS5pbnB1dFR5cGUpLHQuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIix1W1wiZGVmYXVsdFwiXS5pbnB1dFBsYWNlaG9sZGVyKSxDKCl9LEM9ZnVuY3Rpb24oZSl7aWYoZSYmMTM9PT1lLmtleUNvZGUpcmV0dXJuITE7dmFyIHQ9digpLG49dC5xdWVyeVNlbGVjdG9yKFwiLnNhLWlucHV0LWVycm9yXCIpO2wucmVtb3ZlQ2xhc3MobixcInNob3dcIik7dmFyIG89dC5xdWVyeVNlbGVjdG9yKFwiLnNhLWVycm9yLWNvbnRhaW5lclwiKTtsLnJlbW92ZUNsYXNzKG8sXCJzaG93XCIpfSxTPWZ1bmN0aW9uKCl7dmFyIGU9digpO2Uuc3R5bGUubWFyZ2luVG9wPWwuZ2V0VG9wTWFyZ2luKHYoKSl9O2Euc3dlZXRBbGVydEluaXRpYWxpemU9bSxhLmdldE1vZGFsPXYsYS5nZXRPdmVybGF5PWgsYS5nZXRJbnB1dD15LGEuc2V0Rm9jdXNTdHlsZT1iLGEub3Blbk1vZGFsPWcsYS5yZXNldElucHV0PXcsYS5yZXNldElucHV0RXJyb3I9QyxhLmZpeFZlcnRpY2FsUG9zaXRpb249U30se1wiLi9kZWZhdWx0LXBhcmFtc1wiOjIsXCIuL2hhbmRsZS1kb21cIjo0LFwiLi9pbmplY3RlZC1odG1sXCI6NyxcIi4vdXRpbHNcIjo5fV0sNzpbZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPSc8ZGl2IGNsYXNzPVwic3dlZXQtb3ZlcmxheVwiIHRhYkluZGV4PVwiLTFcIj48L2Rpdj48ZGl2IGNsYXNzPVwic3dlZXQtYWxlcnRcIj48ZGl2IGNsYXNzPVwic2EtaWNvbiBzYS1lcnJvclwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwic2EteC1tYXJrXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cInNhLWxpbmUgc2EtbGVmdFwiPjwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwic2EtbGluZSBzYS1yaWdodFwiPjwvc3Bhbj5cXG4gICAgICA8L3NwYW4+XFxuICAgIDwvZGl2PjxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLXdhcm5pbmdcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cInNhLWJvZHlcIj48L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJzYS1kb3RcIj48L3NwYW4+XFxuICAgIDwvZGl2PjxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLWluZm9cIj48L2Rpdj48ZGl2IGNsYXNzPVwic2EtaWNvbiBzYS1zdWNjZXNzXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJzYS1saW5lIHNhLXRpcFwiPjwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cInNhLWxpbmUgc2EtbG9uZ1wiPjwvc3Bhbj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVwic2EtcGxhY2Vob2xkZXJcIj48L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVwic2EtZml4XCI+PC9kaXY+XFxuICAgIDwvZGl2PjxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLWN1c3RvbVwiPjwvZGl2PjxoMj5UaXRsZTwvaDI+XFxuICAgIDxwPlRleHQ8L3A+XFxuICAgIDxmaWVsZHNldD5cXG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB0YWJJbmRleD1cIjNcIiAvPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJzYS1pbnB1dC1lcnJvclwiPjwvZGl2PlxcbiAgICA8L2ZpZWxkc2V0PjxkaXYgY2xhc3M9XCJzYS1lcnJvci1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiaWNvblwiPiE8L2Rpdj5cXG4gICAgICA8cD5Ob3QgdmFsaWQhPC9wPlxcbiAgICA8L2Rpdj48ZGl2IGNsYXNzPVwic2EtYnV0dG9uLWNvbnRhaW5lclwiPlxcbiAgICAgIDxidXR0b24gY2xhc3M9XCJjYW5jZWxcIiB0YWJJbmRleD1cIjJcIj5DYW5jZWw8L2J1dHRvbj5cXG4gICAgICA8ZGl2IGNsYXNzPVwic2EtY29uZmlybS1idXR0b24tY29udGFpbmVyXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY29uZmlybVwiIHRhYkluZGV4PVwiMVwiPk9LPC9idXR0b24+PGRpdiBjbGFzcz1cImxhLWJhbGwtZmFsbFwiPlxcbiAgICAgICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PjwvZGl2Pic7bltcImRlZmF1bHRcIl09byx0LmV4cG9ydHM9bltcImRlZmF1bHRcIl19LHt9XSw4OltmdW5jdGlvbihlLHQsbyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9ZShcIi4vdXRpbHNcIikscj1lKFwiLi9oYW5kbGUtc3dhbC1kb21cIikscz1lKFwiLi9oYW5kbGUtZG9tXCIpLGw9W1wiZXJyb3JcIixcIndhcm5pbmdcIixcImluZm9cIixcInN1Y2Nlc3NcIixcImlucHV0XCIsXCJwcm9tcHRcIl0saT1mdW5jdGlvbihlKXt2YXIgdD1yLmdldE1vZGFsKCksbz10LnF1ZXJ5U2VsZWN0b3IoXCJoMlwiKSxpPXQucXVlcnlTZWxlY3RvcihcInBcIiksdT10LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uY2FuY2VsXCIpLGM9dC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNvbmZpcm1cIik7aWYoby5pbm5lckhUTUw9ZS5odG1sP2UudGl0bGU6cy5lc2NhcGVIdG1sKGUudGl0bGUpLnNwbGl0KFwiXFxuXCIpLmpvaW4oXCI8YnI+XCIpLGkuaW5uZXJIVE1MPWUuaHRtbD9lLnRleHQ6cy5lc2NhcGVIdG1sKGUudGV4dHx8XCJcIikuc3BsaXQoXCJcXG5cIikuam9pbihcIjxicj5cIiksZS50ZXh0JiZzLnNob3coaSksZS5jdXN0b21DbGFzcylzLmFkZENsYXNzKHQsZS5jdXN0b21DbGFzcyksdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWN1c3RvbS1jbGFzc1wiLGUuY3VzdG9tQ2xhc3MpO2Vsc2V7dmFyIGQ9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWN1c3RvbS1jbGFzc1wiKTtzLnJlbW92ZUNsYXNzKHQsZCksdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWN1c3RvbS1jbGFzc1wiLFwiXCIpfWlmKHMuaGlkZSh0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2EtaWNvblwiKSksZS50eXBlJiYhYS5pc0lFOCgpKXt2YXIgZj1mdW5jdGlvbigpe2Zvcih2YXIgbz0hMSxhPTA7YTxsLmxlbmd0aDthKyspaWYoZS50eXBlPT09bFthXSl7bz0hMDticmVha31pZighbylyZXR1cm4gbG9nU3RyKFwiVW5rbm93biBhbGVydCB0eXBlOiBcIitlLnR5cGUpLHt2OiExfTt2YXIgaT1bXCJzdWNjZXNzXCIsXCJlcnJvclwiLFwid2FybmluZ1wiLFwiaW5mb1wiXSx1PW47LTEhPT1pLmluZGV4T2YoZS50eXBlKSYmKHU9dC5xdWVyeVNlbGVjdG9yKFwiLnNhLWljb24uc2EtXCIrZS50eXBlKSxzLnNob3codSkpO3ZhciBjPXIuZ2V0SW5wdXQoKTtzd2l0Y2goZS50eXBlKXtjYXNlXCJzdWNjZXNzXCI6cy5hZGRDbGFzcyh1LFwiYW5pbWF0ZVwiKSxzLmFkZENsYXNzKHUucXVlcnlTZWxlY3RvcihcIi5zYS10aXBcIiksXCJhbmltYXRlU3VjY2Vzc1RpcFwiKSxzLmFkZENsYXNzKHUucXVlcnlTZWxlY3RvcihcIi5zYS1sb25nXCIpLFwiYW5pbWF0ZVN1Y2Nlc3NMb25nXCIpO2JyZWFrO2Nhc2VcImVycm9yXCI6cy5hZGRDbGFzcyh1LFwiYW5pbWF0ZUVycm9ySWNvblwiKSxzLmFkZENsYXNzKHUucXVlcnlTZWxlY3RvcihcIi5zYS14LW1hcmtcIiksXCJhbmltYXRlWE1hcmtcIik7YnJlYWs7Y2FzZVwid2FybmluZ1wiOnMuYWRkQ2xhc3ModSxcInB1bHNlV2FybmluZ1wiKSxzLmFkZENsYXNzKHUucXVlcnlTZWxlY3RvcihcIi5zYS1ib2R5XCIpLFwicHVsc2VXYXJuaW5nSW5zXCIpLHMuYWRkQ2xhc3ModS5xdWVyeVNlbGVjdG9yKFwiLnNhLWRvdFwiKSxcInB1bHNlV2FybmluZ0luc1wiKTticmVhaztjYXNlXCJpbnB1dFwiOmNhc2VcInByb21wdFwiOmMuc2V0QXR0cmlidXRlKFwidHlwZVwiLGUuaW5wdXRUeXBlKSxjLnZhbHVlPWUuaW5wdXRWYWx1ZSxjLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsZS5pbnB1dFBsYWNlaG9sZGVyKSxzLmFkZENsYXNzKHQsXCJzaG93LWlucHV0XCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtjLmZvY3VzKCksYy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIixzd2FsLnJlc2V0SW5wdXRFcnJvcil9LDQwMCl9fSgpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBmKXJldHVybiBmLnZ9aWYoZS5pbWFnZVVybCl7dmFyIHA9dC5xdWVyeVNlbGVjdG9yKFwiLnNhLWljb24uc2EtY3VzdG9tXCIpO3Auc3R5bGUuYmFja2dyb3VuZEltYWdlPVwidXJsKFwiK2UuaW1hZ2VVcmwrXCIpXCIscy5zaG93KHApO3ZhciBtPTgwLHY9ODA7aWYoZS5pbWFnZVNpemUpe3ZhciB5PWUuaW1hZ2VTaXplLnRvU3RyaW5nKCkuc3BsaXQoXCJ4XCIpLGg9eVswXSxiPXlbMV07aCYmYj8obT1oLHY9Yik6bG9nU3RyKFwiUGFyYW1ldGVyIGltYWdlU2l6ZSBleHBlY3RzIHZhbHVlIHdpdGggZm9ybWF0IFdJRFRIeEhFSUdIVCwgZ290IFwiK2UuaW1hZ2VTaXplKX1wLnNldEF0dHJpYnV0ZShcInN0eWxlXCIscC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKStcIndpZHRoOlwiK20rXCJweDsgaGVpZ2h0OlwiK3YrXCJweFwiKX10LnNldEF0dHJpYnV0ZShcImRhdGEtaGFzLWNhbmNlbC1idXR0b25cIixlLnNob3dDYW5jZWxCdXR0b24pLGUuc2hvd0NhbmNlbEJ1dHRvbj91LnN0eWxlLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIjpzLmhpZGUodSksdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1jb25maXJtLWJ1dHRvblwiLGUuc2hvd0NvbmZpcm1CdXR0b24pLGUuc2hvd0NvbmZpcm1CdXR0b24/Yy5zdHlsZS5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCI6cy5oaWRlKGMpLGUuY2FuY2VsQnV0dG9uVGV4dCYmKHUuaW5uZXJIVE1MPXMuZXNjYXBlSHRtbChlLmNhbmNlbEJ1dHRvblRleHQpKSxlLmNvbmZpcm1CdXR0b25UZXh0JiYoYy5pbm5lckhUTUw9cy5lc2NhcGVIdG1sKGUuY29uZmlybUJ1dHRvblRleHQpKSxlLmNvbmZpcm1CdXR0b25Db2xvciYmKGMuc3R5bGUuYmFja2dyb3VuZENvbG9yPWUuY29uZmlybUJ1dHRvbkNvbG9yLGMuc3R5bGUuYm9yZGVyTGVmdENvbG9yPWUuY29uZmlybUxvYWRpbmdCdXR0b25Db2xvcixjLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3I9ZS5jb25maXJtTG9hZGluZ0J1dHRvbkNvbG9yLHIuc2V0Rm9jdXNTdHlsZShjLGUuY29uZmlybUJ1dHRvbkNvbG9yKSksdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFsbG93LW91dHNpZGUtY2xpY2tcIixlLmFsbG93T3V0c2lkZUNsaWNrKTt2YXIgZz1lLmRvbmVGdW5jdGlvbj8hMDohMTt0LnNldEF0dHJpYnV0ZShcImRhdGEtaGFzLWRvbmUtZnVuY3Rpb25cIixnKSxlLmFuaW1hdGlvbj9cInN0cmluZ1wiPT10eXBlb2YgZS5hbmltYXRpb24/dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFuaW1hdGlvblwiLGUuYW5pbWF0aW9uKTp0LnNldEF0dHJpYnV0ZShcImRhdGEtYW5pbWF0aW9uXCIsXCJwb3BcIik6dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFuaW1hdGlvblwiLFwibm9uZVwiKSx0LnNldEF0dHJpYnV0ZShcImRhdGEtdGltZXJcIixlLnRpbWVyKX07b1tcImRlZmF1bHRcIl09aSx0LmV4cG9ydHM9b1tcImRlZmF1bHRcIl19LHtcIi4vaGFuZGxlLWRvbVwiOjQsXCIuL2hhbmRsZS1zd2FsLWRvbVwiOjYsXCIuL3V0aWxzXCI6OX1dLDk6W2Z1bmN0aW9uKHQsbixvKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJihlW25dPXRbbl0pO3JldHVybiBlfSxyPWZ1bmN0aW9uKGUpe3ZhciB0PS9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhlKTtyZXR1cm4gdD9wYXJzZUludCh0WzFdLDE2KStcIiwgXCIrcGFyc2VJbnQodFsyXSwxNikrXCIsIFwiK3BhcnNlSW50KHRbM10sMTYpOm51bGx9LHM9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hdHRhY2hFdmVudCYmIWUuYWRkRXZlbnRMaXN0ZW5lcn0sbD1mdW5jdGlvbih0KXtlLmNvbnNvbGUmJmUuY29uc29sZS5sb2coXCJTd2VldEFsZXJ0OiBcIit0KX0saT1mdW5jdGlvbihlLHQpe2U9U3RyaW5nKGUpLnJlcGxhY2UoL1teMC05YS1mXS9naSxcIlwiKSxlLmxlbmd0aDw2JiYoZT1lWzBdK2VbMF0rZVsxXStlWzFdK2VbMl0rZVsyXSksdD10fHwwO3ZhciBuLG8sYT1cIiNcIjtmb3Iobz0wOzM+bztvKyspbj1wYXJzZUludChlLnN1YnN0cigyKm8sMiksMTYpLG49TWF0aC5yb3VuZChNYXRoLm1pbihNYXRoLm1heCgwLG4rbip0KSwyNTUpKS50b1N0cmluZygxNiksYSs9KFwiMDBcIituKS5zdWJzdHIobi5sZW5ndGgpO3JldHVybiBhfTtvLmV4dGVuZD1hLG8uaGV4VG9SZ2I9cixvLmlzSUU4PXMsby5sb2dTdHI9bCxvLmNvbG9yTHVtaW5hbmNlPWl9LHt9XX0se30sWzFdKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIHN3ZWV0QWxlcnR9KTpcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmKG1vZHVsZS5leHBvcnRzPXN3ZWV0QWxlcnQpfSh3aW5kb3csZG9jdW1lbnQpO1xuXG4vKmdsb2JhbCAkKi9cbi8qanNoaW50IHVudXNlZDpmYWxzZSxmb3JpbjpmYWxzZSovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpb3NPdmVybGF5ID0gZnVuY3Rpb24ocGFyYW1zKSB7XG5cblxuXHR2YXIgb3ZlcmxheURPTTtcblx0dmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXHR2YXIgZGVmYXVsdHMgPSB7XG5cdFx0b25iZWZvcmVzaG93OiBub29wLFxuXHRcdG9uc2hvdzogbm9vcCxcblx0XHRvbmJlZm9yZWhpZGU6IG5vb3AsXG5cdFx0b25oaWRlOiBub29wLFxuXHRcdHRleHQ6IFwiXCIsXG5cdFx0aWNvbjogbnVsbCxcblx0XHRzcGlubmVyOiBudWxsLFxuXHRcdGR1cmF0aW9uOiBudWxsLFxuXHRcdGlkOiBudWxsLFxuXHRcdHBhcmVudEVsOiBudWxsXG5cdH07XG5cblx0Ly8gaGVscGVyIC0gbWVyZ2UgdHdvIG9iamVjdHMgdG9nZXRoZXIsIHdpdGhvdXQgdXNpbmcgJC5leHRlbmRcblx0dmFyIG1lcmdlID0gZnVuY3Rpb24ob2JqMSwgb2JqMikge1xuXHRcdHZhciBvYmozID0ge307XG5cdFx0Zm9yICh2YXIgYXR0ck9uZSBpbiBvYmoxKSB7XG5cdFx0XHRvYmozW2F0dHJPbmVdID0gb2JqMVthdHRyT25lXTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgYXR0clR3byBpbiBvYmoyKSB7XG5cdFx0XHRvYmozW2F0dHJUd29dID0gb2JqMlthdHRyVHdvXTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iajM7XG5cdH07XG5cblx0Ly8gaGVscGVyIC0gZG9lcyBpdCBzdXBwb3J0IENTUzMgdHJhbnNpdGlvbnMvYW5pbWF0aW9uXG5cdHZhciBkb2VzVHJhbnNpdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGIgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0XHR2YXIgcyA9IGIuc3R5bGU7XG5cdFx0dmFyIHAgPSAndHJhbnNpdGlvbic7XG5cdFx0aWYgKHR5cGVvZiBzW3BdID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gVGVzdHMgZm9yIHZlbmRvciBzcGVjaWZpYyBwcm9wXG5cdFx0dmFyIHYgPSBbJ01veicsICdXZWJraXQnLCAnS2h0bWwnLCAnTycsICdtcyddO1xuXHRcdHAgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAodHlwZW9mIHNbdltpXSArIHBdID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXG5cdC8vIHNldHVwIG92ZXJsYXkgc2V0dGluZ3Ncblx0dmFyIHNldHRpbmdzID0gbWVyZ2UoZGVmYXVsdHMsIHBhcmFtcyk7XG5cblx0Ly9cblx0dmFyIGhhbmRsZUFuaW0gPSBmdW5jdGlvbihhbmltKSB7XG5cdFx0aWYgKGFuaW0uYW5pbWF0aW9uTmFtZSA9PT0gXCJpb3Mtb3ZlcmxheS1zaG93XCIpIHtcblx0XHRcdHNldHRpbmdzLm9uc2hvdygpO1xuXHRcdH1cblx0XHRpZiAoYW5pbS5hbmltYXRpb25OYW1lID09PSBcImlvcy1vdmVybGF5LWhpZGVcIikge1xuXHRcdFx0ZGVzdHJveSgpO1xuXHRcdFx0c2V0dGluZ3Mub25oaWRlKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIElJRkVcblx0dmFyIGNyZWF0ZSA9IChmdW5jdGlvbigpIHtcblxuXHRcdC8vIGluaXRpYWwgRE9NIGNyZWF0aW9uIGFuZCBldmVudCBiaW5kaW5nXG5cdFx0b3ZlcmxheURPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0b3ZlcmxheURPTS5jbGFzc05hbWUgPSBcInVpLWlvcy1vdmVybGF5XCI7XG5cdFx0b3ZlcmxheURPTS5pbm5lckhUTUwgKz0gJzxzcGFuIGNsYXNzPVwidGl0bGVcIj4nICsgc2V0dGluZ3MudGV4dCArICc8L3NwYW4nO1xuXHRcdGlmIChwYXJhbXMuaWNvbikge1xuXHRcdFx0b3ZlcmxheURPTS5pbm5lckhUTUwgKz0gJzxpbWcgc3JjPVwiJyArIHBhcmFtcy5pY29uICsgJ1wiPic7XG5cdFx0fSBlbHNlIGlmIChwYXJhbXMuc3Bpbm5lcikge1xuXHRcdFx0b3ZlcmxheURPTS5hcHBlbmRDaGlsZChwYXJhbXMuc3Bpbm5lci5lbCk7XG5cdFx0fVxuXHRcdGlmIChkb2VzVHJhbnNpdGlvbnMpIHtcblx0XHRcdG92ZXJsYXlET00uYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdEFuaW1hdGlvbkVuZFwiLCBoYW5kbGVBbmltLCBmYWxzZSk7XG5cdFx0XHRvdmVybGF5RE9NLmFkZEV2ZW50TGlzdGVuZXIoXCJtc0FuaW1hdGlvbkVuZFwiLCBoYW5kbGVBbmltLCBmYWxzZSk7XG5cdFx0XHRvdmVybGF5RE9NLmFkZEV2ZW50TGlzdGVuZXIoXCJvQW5pbWF0aW9uRW5kXCIsIGhhbmRsZUFuaW0sIGZhbHNlKTtcblx0XHRcdG92ZXJsYXlET00uYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLCBoYW5kbGVBbmltLCBmYWxzZSk7XG5cdFx0fVxuXHRcdGlmIChwYXJhbXMucGFyZW50RWwpIHtcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmFtcy5wYXJlbnRFbCkuYXBwZW5kQ2hpbGQob3ZlcmxheURPTSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheURPTSk7XG5cdFx0fVxuXG5cdFx0c2V0dGluZ3Mub25iZWZvcmVzaG93KCk7XG5cdFx0Ly8gYmVnaW4gZmFkZSBpblxuXHRcdGlmIChkb2VzVHJhbnNpdGlvbnMpIHtcblx0XHRcdG92ZXJsYXlET00uY2xhc3NOYW1lICs9IFwiIGlvcy1vdmVybGF5LXNob3dcIjtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiAkID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdCQob3ZlcmxheURPTSkuZmFkZUluKHtcblx0XHRcdFx0ZHVyYXRpb246IDIwMFxuXHRcdFx0fSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNldHRpbmdzLm9uc2hvdygpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHNldHRpbmdzLmR1cmF0aW9uKSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0aGlkZSgpO1xuXHRcdFx0fSwgc2V0dGluZ3MuZHVyYXRpb24pO1xuXHRcdH1cblxuXHR9KCkpO1xuXG5cdHZhciBoaWRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gcHJlLWNhbGxiYWNrXG5cdFx0c2V0dGluZ3Mub25iZWZvcmVoaWRlKCk7XG5cdFx0Ly8gZmFkZSBvdXRcblx0XHRpZiAoZG9lc1RyYW5zaXRpb25zKSB7XG5cdFx0XHQvLyBDU1MgYW5pbWF0aW9uIGJvdW5kIHRvIGNsYXNzZXNcblx0XHRcdG92ZXJsYXlET00uY2xhc3NOYW1lID0gb3ZlcmxheURPTS5jbGFzc05hbWUucmVwbGFjZShcInNob3dcIiwgXCJoaWRlXCIpO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mICQgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0Ly8gcG9seWZpbGwgcmVxdWlyZXMgalF1ZXJ5XG5cdFx0XHQkKG92ZXJsYXlET00pLmZhZGVPdXQoe1xuXHRcdFx0XHRkdXJhdGlvbjogMjAwXG5cdFx0XHR9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVzdHJveSgpO1xuXHRcdFx0XHRzZXR0aW5ncy5vbmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmIChwYXJhbXMucGFyZW50RWwpIHtcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmFtcy5wYXJlbnRFbCkucmVtb3ZlQ2hpbGQob3ZlcmxheURPTSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheURPTSk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciB1cGRhdGUgPSBmdW5jdGlvbihwYXJhbXMpIHtcblx0XHRpZiAocGFyYW1zLnRleHQpIHtcblx0XHRcdG92ZXJsYXlET00uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpWzBdLmlubmVySFRNTCA9IHBhcmFtcy50ZXh0O1xuXHRcdH1cblx0XHRpZiAocGFyYW1zLmljb24pIHtcblx0XHRcdGlmIChzZXR0aW5ncy5zcGlubmVyKSB7XG5cdFx0XHRcdC8vIFVubGVzcyB3ZSBzZXQgc3Bpbm5lciB0byBudWxsLCB0aGlzIHdpbGwgdGhyb3cgb24gdGhlIHNlY29uZCB1cGRhdGVcblx0XHRcdFx0c2V0dGluZ3Muc3Bpbm5lci5lbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNldHRpbmdzLnNwaW5uZXIuZWwpO1xuXHRcdFx0XHRzZXR0aW5ncy5zcGlubmVyID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdG92ZXJsYXlET00uaW5uZXJIVE1MICs9ICc8aW1nIHNyYz1cIicgKyBwYXJhbXMuaWNvbiArICdcIj4nO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGhpZGU6IGhpZGUsXG5cdFx0ZGVzdHJveTogZGVzdHJveSxcblx0XHR1cGRhdGU6IHVwZGF0ZVxuXHR9O1xuXG59O1xuXG4vL0FkZGVkIHN1cHBvcnQgZm9yIHJlcXVpcmVqc1xuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRkZWZpbmUoW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBpb3NPdmVybGF5O1xuXHR9KTtcbn1cbi8qKlxuICogQ3JlYXRlZCBieSBzZXJkaW1vYSBvbiAwMi4xMS4xNS5cbiAqL1xuaWYgKCQoJy5pbmRleF9wYWdlJykubGVuZ3RoKSB7XG4gICAgdmFyIGNhcnQgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcnQnKTtcblxuICAgIHZhciBjYXJ0SXRlbXMgPSBjYXJ0LnF1ZXJ5U2VsZWN0b3IoJy5jYXJ0X19jb3VudCcpO1xufVxudmFyIGRlbGl2ZXJ5ID0gJC5jb29raWUoJ2RlbGl2ZXJ5Jyk7XG5cblxudmFyIHN1bW07XG52YXIgZGF0YVRhYmxlID0gJCgnI3RhYmxlT3JkZXInKS5EYXRhVGFibGUoe1xuICAgIFwibGFuZ3VhZ2VcIjoge1xuICAgICAgICBcImVtcHR5VGFibGVcIjogXCLQmtC+0YDQt9C40L3QsCDQv9GD0YHRgtCwXCJcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gZGVsaXZlcnlfZnVuYygpIHtcbiAgICAgICAgaWYgKGRlbGl2ZXJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICQoXCIjc2VsZWN0X2RlbGl2ZXJ5XCIpLm5pZnR5KFwic2hvd1wiKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChcImlucHV0OnJhZGlvW25hbWU9Z3JvdXAyXVt2YWx1ZT0nXCIgKyAkLmNvb2tpZSgnZGVsaXZlcnknKSArIFwiJ11cIikucHJvcCh7XCJjaGVja2VkXCI6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5mdW5jdGlvbiBpbml0SWZoYXZlU2Vzc2lvbigpIHtcbiAgICB2YXIgY2FydFZhbHVlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImNhcnRcIik7XG4gICAgdmFyIGNhcnRPYmogPSBKU09OLnBhcnNlKGNhcnRWYWx1ZSk7XG4gICAgaWYgKGNhcnRPYmpbMF0ucm93WzBdICE9IFwi0JrQvtGA0LfQuNC90LAg0L/Rg9GB0YLQsFwiKSB7XG4gICAgICAgIGNhcnRPYmouZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVudHJ5LnJvd1swXSk7XG4gICAgICAgICAgICBpZiAoZW50cnkucm93WzFdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhVGFibGUucm93LmFkZChbXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnJvd1swXSxcbiAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCI8aW5wdXQgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nXCIgKyBlbnRyeS5yb3dbMl0gKyBcIicgZGF0YS1wcmljZT0nXCIgKyBlbnRyeS5yb3dbM10gKyBcIicgbWluPScxJyBtYXg9Jzk5OScgY2xhc3M9J2Zvcm0tY29udHJvbCcgYXJpYS1sYWJlbD0nVGV4dCBpbnB1dCB3aXRoIG11bHRpcGxlIGJ1dHRvbnMnPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjxzcGFuIGNsYXNzPSdjZW5hJz5cIiArIGVudHJ5LnJvd1szXSArIFwiIDxpIGNsYXNzPSdmYSBmYS1ydWInPjwvaT48L3NwYW4+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPGEgaHJlZj0nIzAnIGlkPSdcIiArIGVudHJ5LnJvd1s0XSArIFwiJyBjbGFzcz0nZGVsZXRlJz48aSBjbGFzcz0nZmEgZmEtdGltZXMnPjwvaT48L2E+XCJcbiAgICAgICAgICAgICAgICBdKS5kcmF3KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAkKFwiLmNoZWNrT3V0IGlucHV0W3R5cGU9bnVtYmVyXVwiKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YVRhYmxlLnJvdy5hZGQoW1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5yb3dbMF0sXG4gICAgICAgICAgICAgICAgICAgIFwiPHNlbGVjdCBjbGFzcz0nYmFzaWMnPjxvcHRpb24gdmFsdWU9Jyc+0JLRi9Cx0LXRgNC40YLQtSDRgdC+0YPRgTwvb3B0aW9uPjxvcHRpb24+0JDRgNGA0LDQsdC40LDRgtCwPC9vcHRpb24+PG9wdGlvbj7QodC70LjQstC+0YfQvdGL0Lk8L29wdGlvbj48b3B0aW9uPtCf0LXRgdGC0L48L29wdGlvbj48b3B0aW9uPtCT0YDQuNCx0L3QvtC5PC9vcHRpb24+PG9wdGlvbj7QkdC10YjQsNC80LXQu9GMPC9vcHRpb24+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPGlucHV0IHR5cGU9J251bWJlcicgdmFsdWU9J1wiICsgZW50cnkucm93WzJdICsgXCInIGRhdGEtcHJpY2U9J1wiICsgZW50cnkucm93WzNdICsgXCInIG1pbj0nMScgbWF4PSc5OTknIGNsYXNzPSdmb3JtLWNvbnRyb2wnIGFyaWEtbGFiZWw9J1RleHQgaW5wdXQgd2l0aCBtdWx0aXBsZSBidXR0b25zJz5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0nY2VuYSc+XCIgKyBlbnRyeS5yb3dbM10gKyBcIiA8aSBjbGFzcz0nZmEgZmEtcnViJz48L2k+PC9zcGFuPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjxhIGhyZWY9JyMwJyBpZD0nXCIgKyBlbnRyeS5yb3dbNF0gKyBcIicgY2xhc3M9J2RlbGV0ZSc+PGkgY2xhc3M9J2ZhIGZhLXRpbWVzJz48L2k+PC9hPlwiXG4gICAgICAgICAgICAgICAgXSkuZHJhdyhmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAkKCcuYmFzaWMnKS5mYW5jeVNlbGVjdCgpO1xuXG4gICAgICAgICAgICAgICAgJCgnLmZhbmNpZmllZCA6Y29udGFpbnMoJyArIGVudHJ5LnJvd1sxXSArICcpJykucHJvcChcInNlbGVjdGVkXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgJChcIi5jaGVja091dCBpbnB1dFt0eXBlPW51bWJlcl1cIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5iYXNpYycpLnRyaWdnZXIoJ3VwZGF0ZS5mcycpO1xuICAgIH1cblxuICAgIC8vY29uc29sZS5sb2coY2FydE9iaik7XG4gICAgLy9kYXRhVGFibGUuYWRkLnJvd1xufVxuXG5cbmlmICgkKCcudXNlcklzQXVjaCAuZnVsbF9wcmljZScpLmxlbmd0aCkge1xuICAgIHZhciBmdWxsX3ByaWNlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImNhcnRfcHJpY2VcIik7XG4gICAgY29uc29sZS5sb2coZnVsbF9wcmljZSk7XG4gICAgJCgnLmZ1bGxfcHJpY2UnKS50ZXh0KGZ1bGxfcHJpY2UpO1xuICAgIGluaXRJZmhhdmVTZXNzaW9uKCk7XG4gICAgZGVsaXZlcnlfZnVuYygpO1xuICAgICQoXCIjYWRyZXNzQXVjaFwiKS5zZWxlY3QyKHtcbiAgICAgICAgICAgIG1heGltdW1TZWxlY3Rpb25MZW5ndGg6IDEsXG4gICAgICAgICAgICB0YWdzOiB0cnVlLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9KTtcbn1cbiQoJy51c2VySXNBdWNoIGgyJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICQoJy5jaGVja091dCcpLmFkZENsYXNzKCdpc1VwJyk7XG59KTtcblxudmFyIHRhYmxlT3JkZXIgPSAkKCcjdGFibGVPcmRlciB0Ym9keScpO1xuXG5mdW5jdGlvbiBkYXRhRnJvbVRhYmxlKCkge1xuICAgIHZhciBUYWJsZURhdGEgPSBuZXcgQXJyYXkoKTtcbiAgICAkKCcjdGFibGVPcmRlciB0cicpLmVhY2goZnVuY3Rpb24gKHJvdywgdHIpIHtcbiAgICAgICAgVGFibGVEYXRhW3Jvd10gPSB7XG4gICAgICAgICAgICByb3c6IFtcbiAgICAgICAgICAgICAgICAkKHRyKS5maW5kKCd0ZDplcSgwKScpLmh0bWwoKSxcbiAgICAgICAgICAgICAgICAkKHRyKS5maW5kKCd0ZDplcSgxKScpLmZpbmQoJy5mYW5jaWZpZWQgb3B0aW9uOnNlbGVjdGVkJykudmFsKCksXG4gICAgICAgICAgICAgICAgJCh0cikuZmluZCgndGQ6ZXEoMiknKS5maW5kKFwiaW5wdXRcIikudmFsKCksXG4gICAgICAgICAgICAgICAgJCh0cikuZmluZCgndGQ6ZXEoMyknKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgJCh0cikuZmluZCgndGQ6ZXEoNCknKS5maW5kKCdhJykuYXR0cignaWQnKVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgVGFibGVEYXRhLnNoaWZ0KCk7XG4gICAgcmV0dXJuIFRhYmxlRGF0YTtcbn1cblxudGFibGVPcmRlci5vbignbW91c2VlbnRlcicsICd0cicsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFUYWJsZS4kKCd0ci5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgIH1cbn0pO1xuXG4kKFwiLmFjdGlvbi0tbGlrZVwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgIHZhciBwYWdlID0gJCh0aGlzKTtcbiAgICAkLmdldEpTT04oJy9saWtlX2FkZCcsIHtsaWtlOiAkKHRoaXMpLnZhbCgpfSxcbiAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdCA9PSBcImFkZFwiKSB7XG4gICAgICAgICAgICAgICAgcGFnZS5maW5kKFwiaVwiKS5hZGRDbGFzcygnZmEtaGVhcnQnKTtcbiAgICAgICAgICAgICAgICBwYWdlLmZpbmQoXCJpXCIpLnJlbW92ZUNsYXNzKCdmYS1oZWFydC1vJyk7XG4gICAgICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQo9GA0LAhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcItCU0L7QsdCw0LLQu9C10L3QviDQsiDQuNC30LHRgNCw0L3QvdC+0LUhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcjogMTUwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnJlc3VsdCA9PSBcImRlbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgcGFnZS5maW5kKFwiaVwiKS5hZGRDbGFzcygnZmEtaGVhcnQtbycpO1xuICAgICAgICAgICAgICAgIHBhZ2UuZmluZChcImlcIikucmVtb3ZlQ2xhc3MoJ2ZhLWhlYXJ0Jyk7XG4gICAgICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQo9C/0YEhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcItCj0LTQsNC70LXQvdC+INC40Lcg0LjQt9Cx0YDQsNC90L3QvtCz0L4hXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcjogMTUwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEucmVzdWx0ID09IDApIHtcbiAgICAgICAgICAgICAgICBzd2FsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcItCj0L/RgSFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi0KfRgtC+LdGC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQuiFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG5cbn0pO1xuXG4kKCcjYXVjaC1tZW51LWJ0bicpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICQuZ2V0SlNPTignL2F1Y2gnLCB7XG4gICAgICAgICAgICBsb2dpbjogJCgnI2lucHV0UGhvbmUnKS52YWwoKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiAkKCcjaW5wdXRQYXNzd29yZCcpLnZhbCgpXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLnJlc3VsdCk7XG4gICAgICAgICAgICBpZiAoZGF0YS5yZXN1bHQgPT0gMSkge1xuICAgICAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi0KPRgNCwIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLQktGF0L7QtCDQstGL0L/QvtC70L3QtdC9INGD0YHQv9C10YjQvdC+IVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQo9C/0YEhXCIsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi0KLQsNC60L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDQtdC70Y8g0L3QtSDRgdGD0YnQtdGB0YLQstGD0LXRgiwg0LvQuNCx0L4g0L/QsNGA0L7Qu9GMINCy0LLQtdC00LXQvSDQvdC10L/RgNCw0LLQuNC70YzQvdC+XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuXG59KTtcblxuJCgnaW5wdXQ6cmFkaW9bbmFtZT1ncm91cDJdJykuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAkLmNvb2tpZSgnZGVsaXZlcnknLCB0aGlzLnZhbHVlLCB7XG4gICAgICAgIGV4cGlyZXM6IDdcbiAgICB9KTtcbiAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xufSk7XG5cbiQoJ2lucHV0OnJhZGlvW25hbWU9Z3JvdXAxXScpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgJC5jb29raWUoJ2RlbGl2ZXJ5JywgdGhpcy52YWx1ZSwge1xuICAgICAgICBleHBpcmVzOiA3XG4gICAgfSk7XG5cbiAgICAkKFwiI3NlbGVjdF9kZWxpdmVyeVwiKS5uaWZ0eShcImhpZGVcIik7XG4gICAgJChcImlucHV0OnJhZGlvW25hbWU9Z3JvdXAyXVt2YWx1ZT0nXCIgKyAkLmNvb2tpZSgnZGVsaXZlcnknKSArIFwiJ11cIikucHJvcCh7XCJjaGVja2VkXCI6IHRydWV9KTtcblxuICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG59KTtcblxudGFibGVPcmRlci5vbignbW91c2VsZWF2ZScsICd0cicsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFUYWJsZS4kKCd0ci5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBmbkdldFNlbGVjdGVkKG9UYWJsZUxvY2FsKSB7XG4gICAgcmV0dXJuIG9UYWJsZUxvY2FsLiQoJ3RyLnNlbGVjdGVkJyk7XG59XG5cbiQoJy5wdy1yZXNldCBhLCAjcmVzdG9yZVBhc3MnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxvZ2luID0gJCgnI2lucHV0UGhvbmUnKTtcbiAgICBpZiAobG9naW4udmFsKCkgIT0gXCJcIikge1xuICAgICAgICAkLmdldEpTT04oJy9wd3Jlc2V0Jywge2xvZ2luOiBsb2dpbi52YWwoKX0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdCA9PSBcInNlbnRcIikge1xuICAgICAgICAgICAgICAgICAgICBzd2FsKFwi0J/QsNGA0L7Qu9GMINCy0L7RgdGC0LDQvdC+0LLQu9C10L0hXCIsIFwi0J3QvtCy0YvQuSDQv9Cw0YDQvtC70Ywg0L7RgtC/0YDQsNCy0LvQtdC9INC90LAg0LLQsNGI0YMg0L/QvtGH0YLRgyFcIiwgXCJzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhLnJlc3VsdCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwoXCLQo9C/0YEhXCIsIFwi0KLQsNC60L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC10YIhXCIsIFwiZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEucmVzdWx0ID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhbCh7dGl0bGU6IFwi0KPQv9GBIVwiLCB0ZXh0OiBcItCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0LohXCIsIHRpbWVyOiAyMDAwLCBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzd2FsKFwi0KPQv9GBIVwiLCBcItCd0LXQvtCx0YXQvtC00LjQvNC+INCy0LLQtdGB0YLQuCDRgtC10LvQtdGE0L7QvSFcIiwgXCJ3YXJuaW5nXCIpO1xuICAgIH1cblxufSk7XG5mdW5jdGlvbiBjYWxjdWxhdGVTdW1tKCkge1xuICAgIHN1bW0gPSAwO1xuICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzdW1tICs9IHBhcnNlSW50KCQodGhpcykudmFsKCkgKiAkKHRoaXMpLmF0dHIoXCJkYXRhLXByaWNlXCIpKTtcbiAgICB9KTtcbiAgICBpZiAoc3VtbSAhPSAwKSB7XG5cbiAgICAgICAgaWYgKCQuY29va2llKCdkZWxpdmVyeScpID09IFwibm9fZGVsaXZlcnlcIikge1xuICAgICAgICAgICAgc3VtbSA9IHN1bW0gLSBzdW1tICogMTAgLyAxMDA7XG5cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoJCgnLnVzZXJJc0F1Y2ggLmZ1bGxfcHJpY2UnKS5sZW5ndGgpe1xuICAgICAgICAkKCcuZnVsbF9wcmljZScpLnRleHQoc3VtbSk7XG4gICAgfVxuXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImNhcnRcIiwgSlNPTi5zdHJpbmdpZnkoZGF0YUZyb21UYWJsZSgpKSk7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImNhcnRfcHJpY2VcIiwgc3VtbSk7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImRlbGl2ZXJ5XCIsICQuY29va2llKCdkZWxpdmVyeScpKTtcbiAgICByZXR1cm4gc3VtbTtcblxufVxuXG5mdW5jdGlvbiB1bmlxdWUoYXJyKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0ciA9IGFycltpXTtcbiAgICAgICAgb2JqW3N0cl0gPSB0cnVlOyAvLyDQt9Cw0L/QvtC80L3QuNGC0Ywg0YHRgtGA0L7QutGDINCyINCy0LjQtNC1INGB0LLQvtC50YHRgtCy0LAg0L7QsdGK0LXQutGC0LBcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKTsgLy8g0LjQu9C4INGB0L7QsdGA0LDRgtGMINC60LvRjtGH0Lgg0L/QtdGA0LXQsdC+0YDQvtC8INC00LvRjyBJRTgtXG59XG4kKFwiLmNoZWNrT3V0IGlucHV0W3R5cGU9bnVtYmVyXVwiKS5rZXlwcmVzcyhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcblxuICAgIGlmIChldmVudC5jaGFyQ29kZSAmJiAoZXZlbnQuY2hhckNvZGUgPCA0OCB8fCBldmVudC5jaGFyQ29kZSA+IDU3KSkgeyAvLyDQv9GA0L7QstC10YDQutCwINC90LAgZXZlbnQuY2hhckNvZGUgLSDRh9GC0L7QsdGLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvNC+0LMg0L3QsNC20LDRgtGMIGJhY2tzcGFjZSwgZW50ZXIsINGB0YLRgNC10LvQvtGH0LrRgyDQvdCw0LfQsNC0Li4uXG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG5cblxufSk7XG5cblxuLy/Qo9C00LDQu9C10L3QuNC1INC40Lcg0LzQsNGB0LjQstCwINC30L3QsNGH0LXQvdC40LVcbmZ1bmN0aW9uIHJlbW92ZUEoYXJyKSB7XG4gICAgdmFyIHdoYXQsIGEgPSBhcmd1bWVudHMsXG4gICAgICAgIEwgPSBhLmxlbmd0aCxcbiAgICAgICAgYXg7XG4gICAgd2hpbGUgKEwgPiAxICYmIGFyci5sZW5ndGgpIHtcbiAgICAgICAgd2hhdCA9IGFbLS1MXTtcbiAgICAgICAgd2hpbGUgKChheCA9IGFyci5pbmRleE9mKHdoYXQpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFyci5zcGxpY2UoYXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5cbiQoZG9jdW1lbnQpLmtleXVwKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PSAyNykgeyAvLyBlc2NhcGUga2V5IG1hcHMgdG8ga2V5Y29kZSBgMjdgXG4gICAgICAgICQoJy5wb3BVcCcpLnJlbW92ZUNsYXNzKCdpc1VwJyk7XG5cbiAgICB9XG59KTtcblxuXG5cblxuJChcIi5vbmUtLWJ1eVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRhdGFfaXRlbXMgPSBqUXVlcnkucGFyc2VKU09OKCQodGhpcykuYXR0cihcImRhdGEtaXRlbXNcIikpO1xuICAgIGlmIChkYXRhX2l0ZW1zWydpdGVtX2NhdGVnb3J5J10gPT0gMSkgeyAvLyB0b2RvOiBzZXQgbmFtZVxuICAgICAgICBkYXRhVGFibGUucm93LmFkZChbXG4gICAgICAgICAgICBcIjxoMz5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fbmFtZSddICsgXCI8L2gzPjxzbWFsbD5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fY29tcG9uZW50J10gKyBcIjwvc21hbGw+XCIsXG4gICAgICAgICAgICBcIjxzZWxlY3QgY2xhc3M9J2Jhc2ljJz48b3B0aW9uIHZhbHVlPScnPtCS0YvQsdC10YDQuNGC0LUg0YHQvtGD0YE8L29wdGlvbj48b3B0aW9uPtCQ0YDRgNCw0LHQuNCw0YLQsDwvb3B0aW9uPjxvcHRpb24+0KHQu9C40LLQvtGH0L3Ri9C5PC9vcHRpb24+PG9wdGlvbj7Qn9C10YHRgtC+PC9vcHRpb24+PG9wdGlvbj7Qk9GA0LjQsdC90L7QuTwvb3B0aW9uPjxvcHRpb24+0JHQtdGI0LDQvNC10LvRjDwvb3B0aW9uPlwiLFxuICAgICAgICAgICAgXCI8aW5wdXQgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nMScgZGF0YS1wcmljZT0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIicgbWluPScxJyBtYXg9Jzk5OScgY2xhc3M9J2Zvcm0tY29udHJvbCcgYXJpYS1sYWJlbD0nVGV4dCBpbnB1dCB3aXRoIG11bHRpcGxlIGJ1dHRvbnMnPlwiLFxuICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0nY2VuYSc+XCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIiA8aSBjbGFzcz0nZmEgZmEtcnViJz48L2k+PC9zcGFuPlwiLFxuICAgICAgICAgICAgXCI8YSBocmVmPScjMCcgaWQ9J1wiICsgZGF0YV9pdGVtc1snaXRlbV9pZCddICsgXCInIGNsYXNzPSdkZWxldGUnPjxpIGNsYXNzPSdmYSBmYS10aW1lcyc+PC9pPjwvYT5cIlxuICAgICAgICBdKS5kcmF3KGZhbHNlKTtcbiAgICAgICAgJCgnLmJhc2ljJykuZmFuY3lTZWxlY3QoKTtcbiAgICAgICAgJChcIi5jaGVja091dCBpbnB1dFt0eXBlPW51bWJlcl1cIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG5cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFUYWJsZS5yb3cuYWRkKFtcbiAgICAgICAgICAgIFwiPGgzPlwiICsgZGF0YV9pdGVtc1snaXRlbV9uYW1lJ10gKyBcIjwvaDM+PHNtYWxsPlwiICsgZGF0YV9pdGVtc1snaXRlbV9jb21wb25lbnQnXSArIFwiPC9zbWFsbD5cIixcbiAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgXCI8aW5wdXQgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nMScgZGF0YS1wcmljZT0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIicgbWluPScxJyBtYXg9Jzk5OScgY2xhc3M9J2Zvcm0tY29udHJvbCcgYXJpYS1sYWJlbD0nVGV4dCBpbnB1dCB3aXRoIG11bHRpcGxlIGJ1dHRvbnMnPlwiLFxuICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0nY2VuYSc+XCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIiA8aSBjbGFzcz0nZmEgZmEtcnViJz48L2k+PC9zcGFuPlwiLFxuICAgICAgICAgICAgXCI8YSBocmVmPScjMCcgaWQ9J1wiICsgZGF0YV9pdGVtc1snaXRlbV9pZCddICsgXCInIGNsYXNzPSdkZWxldGUnPjxpIGNsYXNzPSdmYSBmYS10aW1lcyc+PC9pPjwvYT5cIlxuICAgICAgICBdKS5kcmF3KGZhbHNlKTtcbiAgICAgICAgJChcIi5jaGVja091dCBpbnB1dFt0eXBlPW51bWJlcl1cIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XG4gICAgfVxuICAgIGNhcnRJdGVtcy5pbm5lckhUTUwgPSBOdW1iZXIoY2FydEl0ZW1zLmlubmVySFRNTCkgKyAxO1xuICAgIGlvc092ZXJsYXkoe1xuICAgICAgICB0ZXh0OiBcItCU0L7QsdCw0LLQu9C10L3QviFcIixcbiAgICAgICAgZHVyYXRpb246IDJlMyxcbiAgICAgICAgaWNvbjogXCJzdGF0aWMvaW1nL2NoZWNrLnBuZ1wiXG4gICAgfSk7XG59KTtcblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCQoJy5pbmRleF9wYWdlJykubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzZXF1ZW5jZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlcXVlbmNlXCIpLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRlQ2FudmFzOiAhMSxcbiAgICAgICAgICAgICAgICBwaGFzZVRocmVzaG9sZDogITEsXG4gICAgICAgICAgICAgICAgcHJlbG9hZGVyOiAhMCxcbiAgICAgICAgICAgICAgICByZXZlcnNlV2hlbk5hdmlnYXRpbmdCYWNrd2FyZHM6ICEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXlTZXF1ZW5jZSA9IHNlcXVlbmNlKHNlcXVlbmNlRWxlbWVudCwgb3B0aW9ucyk7XG5cblxuICAgICAgICB2YXIgdGFibGVPcmRlciA9ICQoJyN0YWJsZU9yZGVyJyk7XG4gICAgICAgIHRhYmxlT3JkZXIub24oJ2NsaWNrJywgJy5kZWxldGUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZGF0YVRhYmxlLnJvdygnLnNlbGVjdGVkJykucmVtb3ZlKCkuZHJhdyhmYWxzZSk7XG4gICAgICAgICAgICBjYXJ0SXRlbXMuaW5uZXJIVE1MID0gTnVtYmVyKGNhcnRJdGVtcy5pbm5lckhUTUwpIC0gMTtcblxuICAgICAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbn0pOyAvL3JlYWR5XG5cbiQoJyNvcmRlck5vdycpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvb3JkZXJcIjtcbn0pO1xudmFyIGRhdGEgPSBbe1xuICAgIGlkOiAxLFxuICAgIHRleHQ6ICfQsy7QndC40LbQvdC10LLQsNGA0YLQvtCy0YHQuidcbn0sIHtcbiAgICBpZDogMixcbiAgICB0ZXh0OiAn0LMu0JzQtdCz0LjQvtC9J1xufSwge1xuICAgIGlkOiAzLFxuICAgIHRleHQ6ICfQsy7Qm9Cw0L3Qs9C10L/QsNGBJ1xufV07XG4kKCcjcmVzdG9yZVBhc3MnKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoJChcIiNhdWNoUGhvbmVcIikudmFsKCkgPT0gXCJcIikge1xuICAgICAgICAkKFwiLndyb25nUGhvbmVcIikuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIub3JkZXJNb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAkKFwiLmF1Y2hVc2Vyc1wiKS5lbXB0eSgpO1xuICAgICAgICAkKFwiI3NlbmRBdWNoTm9uZVwiKS5hdHRyKHtcbiAgICAgICAgICAgIGRpc2FibGVkOiAnZGlzYWJsZWQnXG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiLnVzZXJJc0F1Y2hcIikuc2hvdygpO1xuICAgICAgICAkKFwiI2FkcmVzc0F1Y2hcIikuc2VsZWN0Mih7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCLQktGL0LHQtdGA0LjRgtC1INCy0LDRiCDQsNC00YDQtdGBXCIsXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuXG4gICAgfVxuICAgIDtcbn0pO1xuXG4kKCcuc2xpZGVyX19pdGVtJykuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgJChcIi5wcmVsb2FkZXJcIikuc2hvdygpO1xuICAgICQoJy5wb3BVcCcpLmFkZENsYXNzKCdpc1VwJyk7XG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAvLyBQcm92aWRlIGNvcnJlY3QgQ29udGVudC1UeXBlLCBzbyB0aGF0IEZsYXNrIHdpbGwga25vdyBob3cgdG8gcHJvY2VzcyBpdC5cbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgLy8gRW5jb2RlIHlvdXIgZGF0YSBhcyBKU09OLlxuICAgICAgICAvLyBUaGlzIGlzIHRoZSB0eXBlIG9mIGRhdGEgeW91J3JlIGV4cGVjdGluZyBiYWNrIGZyb20gdGhlIHNlcnZlci5cbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgdXJsOiAnL2dldF9vbmVfaXRlbS8nICsgJCh0aGlzKS5hdHRyKFwiZGF0YS1pZC1pdGVtXCIpLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgJChcIiNvbmVfaW1nXCIpLmF0dHIoe1xuICAgICAgICAgICAgICAgIFwic3JjXCI6ICdzdGF0aWMvdXBsb2FkLycgKyBlLnJlc3VsdC5pbWdzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpdGVtX3Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICBpdGVtX2lkOiBlLnJlc3VsdC5pdGVtX2lkLFxuICAgICAgICAgICAgICAgIGl0ZW1fbmFtZTogZS5yZXN1bHQubmFtZSxcbiAgICAgICAgICAgICAgICBpdGVtX3ByaWNlOiBlLnJlc3VsdC5wcmljZSxcbiAgICAgICAgICAgICAgICBpdGVtX2NvbXBvbmVudDogZS5yZXN1bHQuY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICBpdGVtX3dlaWdodDogZS5yZXN1bHQud2VpZ2h0LFxuICAgICAgICAgICAgICAgIGl0ZW1fY2F0ZWdvcnk6IGUucmVzdWx0LmNhdGVnb3J5XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgICQoXCIuYWJvdXRQcm9kdWN0IC5hY3Rpb24tLWJ1eVwiKS5hdHRyKHtcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IGUucmVzdWx0LmlkLFxuICAgICAgICAgICAgICAgIFwiZGF0YS1pdGVtc1wiOiBKU09OLnN0cmluZ2lmeShpdGVtX3Jlc3VsdClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhcnJheXNfb25lID0gKGUucmVzdWx0LmNvbXBvbmVudHMpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICQoXCIjb25lX2FycmF5XCIpLmVtcHR5KCk7XG4gICAgICAgICAgICAkLmVhY2goYXJyYXlzX29uZSwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGkgPSAkKCc8bGkvPicpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KGFycmF5c19vbmVbaV0pXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkKFwiI29uZV9hcnJheVwiKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoXCIjb25lX3dlaWdodFwiKS50ZXh0KGUucmVzdWx0LndlaWdodCk7XG4gICAgICAgICAgICAkKFwiI29uZV9uYW1lXCIpLnRleHQoZS5yZXN1bHQubmFtZSk7XG4gICAgICAgICAgICAkKFwiLnByZWxvYWRlclwiKS5oaWRlKCk7XG5cbiAgICAgICAgICAgIC8vZm9yICh2YXIgaXRlbV9yZXNwIGluIGUucmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvL31cblxuICAgICAgICB9XG4gICAgfSk7XG5cblxufSk7XG4kKCcuY2xvc2VidG4nKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAkKCcucG9wVXAnKS5yZW1vdmVDbGFzcygnaXNVcCcpO1xuXG59KTtcblxuJCgnLmNhcnQsIC5zaG93Q2FydCcpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vZGF0YVRhYmxlLmNsZWFyKCkuZHJhdygpO1xuICAgIC8vJC5hamF4KHtcbiAgICAvLyAgICB0eXBlOiAnUE9TVCcsXG4gICAgLy8vLyBQcm92aWRlIGNvcnJlY3QgQ29udGVudC1UeXBlLCBzbyB0aGF0IEZsYXNrIHdpbGwga25vdyBob3cgdG8gcHJvY2VzcyBpdC5cbiAgICAvLyAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIC8vLy8gRW5jb2RlIHlvdXIgZGF0YSBhcyBKU09OLlxuICAgIC8vICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KCQucGFyc2VKU09OKCQuY29va2llKCdvcmRlcicpKS52YWx1ZXMpLFxuICAgIC8vLy8gVGhpcyBpcyB0aGUgdHlwZSBvZiBkYXRhIHlvdSdyZSBleHBlY3RpbmcgYmFjayBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgLy8gICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAvLyAgICB1cmw6ICcvZ2V0X29yZGVyJyxcbiAgICAvLyAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZSkge1xuICAgIC8vICAgICAgICBzdW1tPTA7XG4gICAgLy8gICAgICAgIC8vZm9yICh2YXIgaXRlbV9yZXNwIGluIGUucmVzcG9uc2Upe1xuICAgIC8vICAgICAgICAvLyAgICBkYXRhVGFibGUucm93LmFkZChbXG4gICAgLy8gICAgICAgIC8vICAgICAgICBcIjxoMz5cIisgZS5yZXNwb25zZVtpdGVtX3Jlc3BdLml0ZW1fbmFtZStcIjwvaDM+PHNtYWxsPlwiK2UucmVzcG9uc2VbaXRlbV9yZXNwXS5pdGVtX2NvbXBvbmVudCtcIjwvc21hbGw+XCIsXG4gICAgLy8gICAgICAgIC8vICAgICAgICBcIjxpbnB1dCB0eXBlPSdudW1iZXInIHZhbHVlPScxJyBkYXRhLXByaWNlPSdcIitlLnJlc3BvbnNlW2l0ZW1fcmVzcF0ucHJpY2UrXCInIG1pbj0nMScgbWF4PSc5OTknIGNsYXNzPSdmb3JtLWNvbnRyb2wnIGFyaWEtbGFiZWw9J1RleHQgaW5wdXQgd2l0aCBtdWx0aXBsZSBidXR0b25zJz5cIixcbiAgICAvLyAgICAgICAgLy8gICAgICAgIFwiPHNwYW4gY2xhc3M9J2NlbmEnPlwiK2UucmVzcG9uc2VbaXRlbV9yZXNwXS5wcmljZStcIiA8aSBjbGFzcz0nZmEgZmEtcnViJz48L2k+PC9zcGFuPlwiLFxuICAgIC8vICAgICAgICAvLyAgICAgICAgXCI8YSBocmVmPScjMCcgaWQ9J1wiK2UucmVzcG9uc2VbaXRlbV9yZXNwXS5pZCtcIicgY2xhc3M9J2RlbGV0ZSc+PGkgY2xhc3M9J2ZhIGZhLXRpbWVzJz48L2k+PC9hPlwiXVxuICAgIC8vICAgICAgICAvLyAgICApLmRyYXcoIGZhbHNlICk7XG4gICAgLy8gICAgICAgIC8vICAgICAgICBzdW1tICs9IHBhcnNlSW50KGUucmVzcG9uc2VbaXRlbV9yZXNwXS5wcmljZSk7XG4gICAgLy8gICAgICAgIC8vICAgICAgICAkKFwiLmZ1bGwgc3BhblwiKS50ZXh0KHN1bW0pO1xuICAgIC8vXG4gICAgLy9cbiAgICAvLyAgICAgICAgJChcIi5jaGVja091dCBpbnB1dFt0eXBlPW51bWJlcl1cIikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgICAgICAgICQoXCIuZnVsbCBzcGFuXCIpLnRleHQoY2FsY3VsYXRlU3VtbSgpKVxuICAgIC8vICAgICAgICB9KTtcbiAgICAvLyAgICB9XG4gICAgLy99KTtcbiAgICBpZiAoY2FsY3VsYXRlU3VtbSgpID09IDApIHtcbiAgICAgICAgaW9zT3ZlcmxheSh7XG4gICAgICAgICAgICB0ZXh0OiBcItCa0L7RgNC30LjQvdCwINC/0YPRgdGC0LBcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyZTMsXG4gICAgICAgICAgICBpY29uOiBcInN0YXRpYy9pbWcvY3Jvc3MucG5nXCJcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcblxuICAgICAgICAkKCcuY2hlY2tPdXQnKS5hZGRDbGFzcygnaXNVcCcpO1xuICAgIH1cbiAgICA7XG59KTtcblxuJCgnLmNsb3NlemFrYXpidG4nKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAkKCcuY2hlY2tPdXQnKS5yZW1vdmVDbGFzcygnaXNVcCcpO1xuXG59KTtcbi8qKlxuIFByb2R1Y3QgUGFnZVxuICoqL1xuLy9GdW5jdGlvbiBmb3IgZml4aW4gc2lkZWJhclxuJChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCQoJy5pbmRleF9wYWdlJykubGVuZ3RoKSB7XG5cbiAgICAgICAgdmFyIHNpZGViYXIgPSAkKCcjYmFyJyk7XG4gICAgICAgIHZhciBib2R5d2l0aHNpZGViYXIgPSAkKFwiLnZpZXdcIik7XG4gICAgICAgIHZhciBjYXJ0ID0gJChcIi5jYXJ0XCIpO1xuICAgICAgICB2YXIgdG9wID0gc2lkZWJhci5vZmZzZXQoKS50b3AgLSBwYXJzZUZsb2F0KHNpZGViYXIuY3NzKCdtYXJnaW4tdG9wJykpO1xuXG4gICAgICAgICQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgeSA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICBpZiAoeSA+PSB0b3ApIHtcbiAgICAgICAgICAgICAgICBzaWRlYmFyLmFkZENsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgICAgIGJvZHl3aXRoc2lkZWJhci5hZGRDbGFzcygnY29sLW1kLW9mZnNldC0yJyk7XG4gICAgICAgICAgICAgICAgY2FydC5hZGRDbGFzcyhcImNhcnRBYnNvbHV0ZSBjYXJ0UGVyY1wiKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaWRlYmFyLnJlbW92ZUNsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgICAgIGJvZHl3aXRoc2lkZWJhci5yZW1vdmVDbGFzcygnY29sLW1kLW9mZnNldC0yJyk7XG4gICAgICAgICAgICAgICAgY2FydC5yZW1vdmVDbGFzcygnY2FydEFic29sdXRlIGNhcnRQZXJjJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5cbihmdW5jdGlvbiAod2luZG93KSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgc3VwcG9ydCA9IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IE1vZGVybml6ci5jc3NhbmltYXRpb25zXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1FbmRFdmVudE5hbWVzID0ge1xuICAgICAgICAgICAgJ1dlYmtpdEFuaW1hdGlvbic6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgJ09BbmltYXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICAnbXNBbmltYXRpb24nOiAnTVNBbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb25lbmQnXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1FbmRFdmVudE5hbWUgPSBhbmltRW5kRXZlbnROYW1lc1tNb2Rlcm5penIucHJlZml4ZWQoJ2FuaW1hdGlvbicpXSxcbiAgICAgICAgb25FbmRBbmltYXRpb24gPSBmdW5jdGlvbiAoZWwsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgb25FbmRDYWxsYmFja0ZuID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1cHBvcnQuYW5pbWF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXYudGFyZ2V0ICE9IHRoaXMpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGFuaW1FbmRFdmVudE5hbWUsIG9uRW5kQ2FsbGJhY2tGbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc3VwcG9ydC5hbmltYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihhbmltRW5kRXZlbnROYW1lLCBvbkVuZENhbGxiYWNrRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvbkVuZENhbGxiYWNrRm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIC8vIGZyb20gaHR0cDovL3d3dy5zYmVycnkubWUvYXJ0aWNsZXMvamF2YXNjcmlwdC1ldmVudC10aHJvdHRsaW5nLWRlYm91bmNpbmdcbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmbiwgZGVsYXkpIHtcbiAgICAgICAgdmFyIGFsbG93U2FtcGxlID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChhbGxvd1NhbXBsZSkge1xuICAgICAgICAgICAgICAgIGFsbG93U2FtcGxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93U2FtcGxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgZm4oZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gc2xpZGVycyAtIGZsaWNraXR5XG4gICAgaWYgKCQoJy5pbmRleF9wYWdlJykubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzbGlkZXJzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyJykpLFxuICAgICAgICAvLyBhcnJheSB3aGVyZSB0aGUgZmxpY2tpdHkgaW5zdGFuY2VzIGFyZSBnb2luZyB0byBiZSBzdG9yZWRcbiAgICAgICAgICAgIGZsa3RpZXMgPSBbXSxcbiAgICAgICAgLy8gZ3JpZCBlbGVtZW50XG4gICAgICAgICAgICBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdyaWQnKSxcbiAgICAgICAgLy8gaXNvdG9wZSBpbnN0YW5jZVxuICAgICAgICAgICAgaXNvLFxuICAgICAgICAvLyBmaWx0ZXIgY3RybHNcbiAgICAgICAgICAgIGZpbHRlckN0cmxzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmlsdGVyID4gYnV0dG9uJykpLFxuICAgICAgICAvLyBjYXJ0XG4gICAgICAgICAgICBjYXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcnQnKSxcbiAgICAgICAgICAgIGNhcnRJdGVtcyA9IGNhcnQucXVlcnlTZWxlY3RvcignLmNhcnRfX2NvdW50Jyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAvLyBwcmVsb2FkIGltYWdlc1xuICAgICAgICBpZiAoJCgnLmluZGV4X3BhZ2UnKS5sZW5ndGgpIHtcblxuICAgICAgICAgICAgaW1hZ2VzTG9hZGVkKGdyaWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBiYXJXaWR0aCgpO1xuICAgICAgICAgICAgICAgIC8vIGluaXRGbGlja2l0eSgpO1xuICAgICAgICAgICAgICAgIGluaXRJc290b3BlKCk7XG4gICAgICAgICAgICAgICAgaW5pdEV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgZGVsaXZlcnlfZnVuYygpO1xuICAgICAgICAgICAgICAgIGluaXRJZmhhdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgY2xhc3NpZS5yZW1vdmUoZ3JpZCwgJ2dyaWQtLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAkKFwiLnByZWxvYWRlclwiKS5oaWRlKCk7XG5cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYmFyV2lkdGgoKSB7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdEZsaWNraXR5KCkge1xuICAgICAgICBzbGlkZXJzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlcikge1xuICAgICAgICAgICAgdmFyIGZsa3R5ID0gbmV3IEZsaWNraXR5KHNsaWRlciwge1xuICAgICAgICAgICAgICAgIHByZXZOZXh0QnV0dG9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JhcEFyb3VuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjZWxsQWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICBjb250YWluOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlc2l6ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFnZURvdHM6IGZhbHNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gc3RvcmUgZmxpY2tpdHkgaW5zdGFuY2VzXG4gICAgICAgICAgICBmbGt0aWVzLnB1c2goZmxrdHkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0SXNvdG9wZSgpIHtcbiAgICAgICAgaXNvID0gbmV3IElzb3RvcGUoZ3JpZCwge1xuICAgICAgICAgICAgaXNSZXNpemVCb3VuZDogZmFsc2UsXG4gICAgICAgICAgICBpdGVtU2VsZWN0b3I6ICcuZ3JpZF9faXRlbScsXG4gICAgICAgICAgICBwZXJjZW50UG9zaXRpb246IHRydWUsXG4gICAgICAgICAgICBtYXNvbnJ5OiB7XG4gICAgICAgICAgICAgICAgLy8gdXNlIG91dGVyIHdpZHRoIG9mIGdyaWQtc2l6ZXIgZm9yIGNvbHVtbldpZHRoXG4gICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6ICcuZ3JpZF9fc2l6ZXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnMC42cydcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuXG4gICAgZnVuY3Rpb24gaW5pdEV2ZW50cygpIHtcbiAgICAgICAgZmlsdGVyQ3RybHMuZm9yRWFjaChmdW5jdGlvbiAoZmlsdGVyQ3RybCkge1xuICAgICAgICAgICAgZmlsdGVyQ3RybC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2llLnJlbW92ZShmaWx0ZXJDdHJsLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbHRlcl9faXRlbS0tc2VsZWN0ZWQnKSwgJ2ZpbHRlcl9faXRlbS0tc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBjbGFzc2llLmFkZChmaWx0ZXJDdHJsLCAnZmlsdGVyX19pdGVtLS1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGlzby5hcnJhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXJDdHJsLmdldEF0dHJpYnV0ZSgnZGF0YS1maWx0ZXInKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlY2FsY0ZsaWNraXRpZXMoKTtcbiAgICAgICAgICAgICAgICBpc28ubGF5b3V0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gd2luZG93IHJlc2l6ZSAvIHJlY2FsY3VsYXRlIHNpemVzIGZvciBib3RoIGZsaWNraXR5IGFuZCBpc290b3BlL21hc29ucnkgbGF5b3V0c1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhyb3R0bGUoZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICByZWNhbGNGbGlja2l0aWVzKCk7XG4gICAgICAgICAgICBpc28ubGF5b3V0KCk7XG4gICAgICAgIH0sIDUwKSk7XG5cbiAgICAgICAgLy8gYWRkIHRvIGNhcnRcbiAgICAgICAgW10uc2xpY2UuY2FsbChncmlkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5ncmlkX19pdGVtJykpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcignLml0ZW1zLWJ1eScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkVG9DYXJ0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vZGF0YVRhYmxlLlxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkVG9DYXJ0KCkge1xuXG5cbiAgICAgICAgdmFyIGRhdGFfaXRlbXMgPSBqUXVlcnkucGFyc2VKU09OKCQodGhpcykuYXR0cihcImRhdGEtaXRlbXNcIikpO1xuICAgICAgICBpZiAoZGF0YV9pdGVtc1snaXRlbV9jYXRlZ29yeSddID09IFwi0JLRgtC+0YDQsNGPXCIpIHsgLy8gdG9kbzogc2V0IG5hbWVcbiAgICAgICAgICAgIGRhdGFUYWJsZS5yb3cuYWRkKFtcbiAgICAgICAgICAgICAgICBcIjxoMz5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fbmFtZSddICsgXCI8L2gzPjxzbWFsbD5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fY29tcG9uZW50J10gKyBcIjwvc21hbGw+XCIsXG4gICAgICAgICAgICAgICAgXCI8c2VsZWN0IGNsYXNzPSdiYXNpYyc+PG9wdGlvbiB2YWx1ZT0nJz7QktGL0LHQtdGA0LjRgtC1INGB0L7Rg9GBPC9vcHRpb24+PG9wdGlvbj7QkNGA0YDQsNCx0LjQsNGC0LA8L29wdGlvbj48b3B0aW9uPtCh0LvQuNCy0L7Rh9C90YvQuTwvb3B0aW9uPjxvcHRpb24+0J/QtdGB0YLQvjwvb3B0aW9uPjxvcHRpb24+0JPRgNC40LHQvdC+0Lk8L29wdGlvbj48b3B0aW9uPtCR0LXRiNCw0LzQtdC70Yw8L29wdGlvbj5cIixcbiAgICAgICAgICAgICAgICBcIjxpbnB1dCB0eXBlPSdudW1iZXInIHZhbHVlPScxJyBkYXRhLXByaWNlPSdcIiArIGRhdGFfaXRlbXNbJ2l0ZW1fcHJpY2UnXSArIFwiJyBtaW49JzEnIG1heD0nOTk5JyBjbGFzcz0nZm9ybS1jb250cm9sJyBhcmlhLWxhYmVsPSdUZXh0IGlucHV0IHdpdGggbXVsdGlwbGUgYnV0dG9ucyc+XCIsXG4gICAgICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0nY2VuYSc+XCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIiA8aSBjbGFzcz0nZmEgZmEtcnViJz48L2k+PC9zcGFuPlwiLFxuICAgICAgICAgICAgICAgIFwiPGEgaHJlZj0nIzAnIGlkPSdcIiArIGRhdGFfaXRlbXNbJ2l0ZW1faWQnXSArIFwiJyBjbGFzcz0nZGVsZXRlJz48aSBjbGFzcz0nZmEgZmEtdGltZXMnPjwvaT48L2E+XCJcbiAgICAgICAgICAgIF0pLmRyYXcoZmFsc2UpO1xuICAgICAgICAgICAgJCgnLmJhc2ljJykuZmFuY3lTZWxlY3QoKTtcbiAgICAgICAgICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xuXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFUYWJsZS5yb3cuYWRkKFtcbiAgICAgICAgICAgICAgICBcIjxoMz5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fbmFtZSddICsgXCI8L2gzPjxzbWFsbD5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fY29tcG9uZW50J10gKyBcIjwvc21hbGw+XCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCI8aW5wdXQgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nMScgZGF0YS1wcmljZT0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIicgbWluPScxJyBtYXg9Jzk5OScgY2xhc3M9J2Zvcm0tY29udHJvbCcgYXJpYS1sYWJlbD0nVGV4dCBpbnB1dCB3aXRoIG11bHRpcGxlIGJ1dHRvbnMnPlwiLFxuICAgICAgICAgICAgICAgIFwiPHNwYW4gY2xhc3M9J2NlbmEnPlwiICsgZGF0YV9pdGVtc1snaXRlbV9wcmljZSddICsgXCIgPGkgY2xhc3M9J2ZhIGZhLXJ1Yic+PC9pPjwvc3Bhbj5cIixcbiAgICAgICAgICAgICAgICBcIjxhIGhyZWY9JyMwJyBpZD0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX2lkJ10gKyBcIicgY2xhc3M9J2RlbGV0ZSc+PGkgY2xhc3M9J2ZhIGZhLXRpbWVzJz48L2k+PC9hPlwiXG4gICAgICAgICAgICBdKS5kcmF3KGZhbHNlKTtcbiAgICAgICAgICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xuXG5cbiAgICAgICAgfVxuICAgICAgICBpb3NPdmVybGF5KHtcbiAgICAgICAgICAgIHRleHQ6IFwi0JTQvtCx0LDQstC70LXQvdC+IVwiLFxuICAgICAgICAgICAgZHVyYXRpb246IDJlMyxcbiAgICAgICAgICAgIGljb246IFwic3RhdGljL2ltZy9jaGVjay5wbmdcIlxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGNsYXNzaWUuYWRkKGNhcnQsICdjYXJ0LS1hbmltYXRlJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FydEl0ZW1zLmlubmVySFRNTCA9IE51bWJlcihjYXJ0SXRlbXMuaW5uZXJIVE1MKSArIDE7XG4gICAgICAgIH0sIDIwMCk7XG4gICAgICAgIG9uRW5kQW5pbWF0aW9uKGNhcnRJdGVtcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xhc3NpZS5yZW1vdmUoY2FydCwgJ2NhcnQtLWFuaW1hdGUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVjYWxjRmxpY2tpdGllcygpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZsa3RpZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGZsa3RpZXNbaV0ucmVzaXplKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0KCk7XG5cbn0pKHdpbmRvdyk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
