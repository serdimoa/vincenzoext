function uniqId(){return"uniqId"+Math.round((new Date).getTime()+1e3*Math.random())}function sous_select(e){var t=cache_for_datatable,n=uniqId();dataTable.row.add(["<h3>"+t.item_name+"</h3><small>"+t.item_component+"</small>","<select id='"+n+"' class='basic' ><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input type='number'  value='1' data-price='"+t.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+t.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+t.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect().on("change.fs",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable()))}),thiss=$(this),$("#"+n+" :contains("+e+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"/static/img/check.png"}),$(".basic").trigger("update.fs")}function delivery_func(){"undefined"===delivery||null==delivery?$("#select_delivery").nifty("show"):$("input:radio[name=group2][value='"+sessionStorage.getItem("delivery")+"']").prop({checked:!0})}function loadList(e){if($(".addrList li").remove(),e.length>0)for(var t=0;t<e.length;t++)$("ul.addrList").append('<li class= "list-group-item" data-toggle="modal" data-target="#editModal">'+e[t]+'<span class="fa fa-close"></span</li>')}function storeToLocal(e,t){var n=JSON.stringify(t);localStorage[e]=n}function getFromLocal(e){return localStorage[e]?JSON.parse(localStorage[e]):[]}function initIfhaveSession(){var e=localStorage.getItem("cart");if(null!=e){var t=JSON.parse(e);"Корзина пуста"!=t[0].row[0]&&(t.forEach(function(e){if(null==e.row[1])dataTable.row.add([e.row[0],"","<input type='number' data-category='"+e.row[5]+"' value='"+e.row[2]+"' data-price='"+e.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm());else{var t=uniqId();dataTable.row.add([e.row[0],"<select id='"+t+"' class='basic'><option value=''>Выберите соус</option><option>Аррабиата</option><option>Сливочный</option><option>Песто</option><option>Грибной</option><option>Бешамель</option>","<input  type='number' data-category='"+e.row[5]+"' value='"+e.row[2]+"' data-price='"+e.row[3]+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.row[3]+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.row[4]+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".basic").fancySelect().on("change.fs",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable()))}),$(".fancified").on("change",function(){localStorage.setItem("cart",JSON.stringify(dataFromTable())),console.log("basic change ")}),$("#"+t+" :contains("+e.row[1]+")").prop("selected",!0),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm())}}),$(".basic").trigger("update.fs"))}}function dataFromTable(){var e=new Array;return $("#tableOrder tr").each(function(t,n){e[t]={row:[$(n).find("td:eq(0)").html(),$(n).find("td:eq(1)").find(".fancified option:selected").val(),$(n).find("td:eq(2)").find("input").val(),$(n).find("td:eq(3)").text(),$(n).find("td:eq(4)").find("a").attr("id"),$(n).find("td:eq(2)").find("input").attr("data-category")]}}),e.shift(),e}function fnGetSelected(e){return e.$("tr.selected")}function calculateSumm(){summ=0;var e=0,t=0;return $(".checkOut input[type=number]").each(function(){"Пицца"==$(this).data("category")?(e+=parseInt($(this).val()*$(this).attr("data-price")),console.log(e)):summ+=parseInt($(this).val()*$(this).attr("data-price"))}),$(".checkOut input[type=number]").each(function(){"Пицца"==$(this).data("category")&&(t+=parseInt($(this).val()))}),4==t?(e-=5*e/100,$("#beri").remove(),$(".allaboutorder").append("<p id='beri' style='color:#FF5252;'>Акция.Бери четко:<strong>-5%</strong></p>")):6==t?(e-=7*e/100,$("#beri").remove(),$(".allaboutorder").append("<p id='beri' style='color:#FF5252;'>Акция.Бери четко:<strong>-7%</strong></p>")):8==t?(e-=10*e/100,$("#beri").remove(),$(".allaboutorder").append("<p id='beri' style='color:#FF5252;'>Акция.Бери четко:<strong>-10%</strong></p>")):$("#beri").remove(),summ+=e,summ=summ-summ*global_sale/100-summ*global_inTime/100,$(".userIsAuch .full_price").length&&$(".full_price").text(summ),$(".borderLeft .full_price").length&&$(".full_price").text(summ),$.cookie("cart",JSON.stringify(dataFromTable())),$.cookie("cart_price",summ),$("#hidden_table").val(JSON.stringify(dataFromTable())),$("#hidden_full_cost").val(summ),$("#hidden_allaboutorder").val($(".allaboutorder").html()),localStorage.setItem("cart",JSON.stringify(dataFromTable())),localStorage.setItem("cart_price",summ),summ}function unique(e){for(var t={},n=0;n<e.length;n++){var i=e[n];t[i]=!0}return Object.keys(t)}function removeA(e){for(var t,n,i=arguments,r=i.length;r>1&&e.length;)for(t=i[--r],$(".slider").anyslider();(n=e.indexOf(t))!==-1;)e.splice(n,1);return e}function closePopup(){null!=magnificPopup&&magnificPopup.close()}function warning(){$.cookie("localLinkClicked")?(console.log("window page"),$.removeCookie("localLinkClicked")):(console.log("window reload"),$.removeCookie("localLinkClicked"),$("#select_delivery").nifty("show"))}function getWeekDay(e){var t=["вс","пн","вт","ср","чт","пт","сб"];return t[e.getDay()]}function in_date(){var e=new Date,t=1,n=5,i=12,r=15,a=30;e.getDay()>=t&&e.getDay()<=n&&(console.log("in_date 1"),e.getHours()>=i&&e.getHours()<=r&&(console.log("in_date 2"),e.getHours()==r?e.getMinutes()<=a&&($(".allaboutorder").append("<p style='color:#FF5252;'>Акция.Обед в Vincenzo:<strong>-15%</strong></p>"),global_inTime=15):e.getHours()<r&&($(".allaboutorder").append("<p style='color:#FF5252;'>Акция.Обед в Vincenzo:<strong>-15%</strong></p>"),global_inTime=15)))}(function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),-1!==i&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o,s=this.getListenersAsObject(e);for(a in s)if(s.hasOwnProperty(a))for(n=s[a].slice(0),r=n.length;r--;)i=n[r],i.once===!0&&this.removeListener(e,i.listener),o=i.listener.apply(this,t||[]),o===this._getOnceReturnValue()&&this.removeListener(e,i.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}).call(this),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("wolfy87-eventemitter")):e.imagesLoaded=t(e,e.EventEmitter)}(window,function(e,t){function n(e,t){for(var n in t)e[n]=t[n];return e}function i(e){var t=[];if(Array.isArray(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function r(e,t,a){return this instanceof r?("string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=i(e),this.options=n({},this.options),"function"==typeof t?a=t:n(this.options,t),a&&this.on("always",a),this.getImages(),s&&(this.jqDeferred=new s.Deferred),void setTimeout(function(){this.check()}.bind(this))):new r(e,t,a)}function a(e){this.img=e}function o(e,t){this.url=e,this.element=t,this.img=new Image}var s=e.jQuery,l=e.console;r.prototype=Object.create(t.prototype),r.prototype.options={},r.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},r.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&d[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var a=e.querySelectorAll(this.options.background);for(i=0;i<a.length;i++){var o=a[i];this.addElementBackgroundImages(o)}}}};var d={1:!0,9:!0,11:!0};return r.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[2];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}},r.prototype.addImage=function(e){var t=new a(e);this.images.push(t)},r.prototype.addBackground=function(e,t){var n=new o(e,t);this.images.push(n)},r.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},r.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emit("progress",this,e,t),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&l&&l.log("progress: "+n,e,t)},r.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emit(e,this),this.emit("always",this),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},a.prototype=Object.create(t.prototype),a.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},a.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},a.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.img,t)},a.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},a.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},a.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},a.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},o.prototype=Object.create(a.prototype),o.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},o.prototype.unbindEvents=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this)},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.element,t)},r.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(s=t,s.fn.imagesLoaded=function(e,t){var n=new r(this,e,t);return n.jqDeferred.promise(s(this))})},r.makeJQueryPlugin(),r}),function(){"use strict";function e(i){if(!i)throw new Error("No options passed to Waypoint constructor");if(!i.element)throw new Error("No element option passed to Waypoint constructor");if(!i.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,i),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=i.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,t+=1}var t=0,n={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var i in n)t.push(n[i]);for(var r=0,a=t.length;r<a;r++)t[r][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.invokeAll("enable")},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){"use strict";function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=r.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,i[e.waypointContextKey]=this,n+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,i={},r=window.Waypoint,a=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical);e&&t&&(this.adapter.off(".waypoints"),delete i[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,r.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){t.didScroll&&!r.isTouch||(t.didScroll=!0,r.requestAnimationFrame(e))})},t.prototype.handleResize=function(){r.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in t){var i=t[n],r=i.newScroll>i.oldScroll,a=r?i.forward:i.backward;for(var o in this.waypoints[n]){var s=this.waypoints[n][o],l=i.oldScroll<s.triggerPoint,d=i.newScroll>=s.triggerPoint,u=l&&d,c=!l&&!d;(u||c)&&(s.queueTrigger(a),e[s.group.id]=s.group)}}for(var h in e)e[h].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?r.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?r.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var n in this.waypoints[t])e.push(this.waypoints[t][n]);for(var i=0,r=e.length;i<r;i++)e[i].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,n=t?void 0:this.adapter.offset(),i={};this.handleScroll(),e={horizontal:{contextOffset:t?0:n.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:n.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var a in e){var o=e[a];for(var s in this.waypoints[a]){var l,d,u,c,h,p=this.waypoints[a][s],m=p.options.offset,f=p.triggerPoint,_=0,y=null==f;p.element!==p.element.window&&(_=p.adapter.offset()[o.offsetProp]),"function"==typeof m?m=m.apply(p):"string"==typeof m&&(m=parseFloat(m),p.options.offset.indexOf("%")>-1&&(m=Math.ceil(o.contextDimension*m/100))),l=o.contextScroll-o.contextOffset,p.triggerPoint=_+l-m,d=f<o.oldScroll,u=p.triggerPoint>=o.oldScroll,c=d&&u,h=!d&&!u,!y&&c?(p.queueTrigger(o.backward),i[p.group.id]=p.group):!y&&h?(p.queueTrigger(o.forward),i[p.group.id]=p.group):y&&o.oldScroll>=p.triggerPoint&&(p.queueTrigger(o.forward),i[p.group.id]=p.group)}}return r.requestAnimationFrame(function(){for(var e in i)i[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in i)i[e].refresh()},t.findByElement=function(e){return i[e.waypointContextKey]},window.onload=function(){a&&a(),t.refreshAll()},r.requestAnimationFrame=function(t){var n=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e;n.call(window,t)},r.Context=t}(),function(){"use strict";function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function n(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}var i={vertical:{},horizontal:{}},r=window.Waypoint;n.prototype.add=function(e){this.waypoints.push(e)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var i=this.triggerQueues[n],r="up"===n||"left"===n;i.sort(r?t:e);for(var a=0,o=i.length;a<o;a+=1){var s=i[a];(s.options.continuous||a===i.length-1)&&s.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints),i=n===this.waypoints.length-1;return i?null:this.waypoints[n+1]},n.prototype.previous=function(t){this.waypoints.sort(e);var n=r.Adapter.inArray(t,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},n.prototype.remove=function(e){var t=r.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(e){return i[e.axis][e.name]||new n(e)},r.Group=n}(),function(){"use strict";function e(e){return e===e.window}function t(t){return e(t)?t:t.defaultView}function n(e){this.element=e,this.handlers={}}var i=window.Waypoint;n.prototype.innerHeight=function(){var t=e(this.element);return t?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){var t=e(this.element);return t?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(e,t){function n(e,t,n){for(var i=0,r=t.length-1;i<r;i++){var a=t[i];n&&n!==a||e.removeEventListener(a)}}var i=e.split("."),r=i[0],a=i[1],o=this.element;if(a&&this.handlers[a]&&r)n(o,this.handlers[a][r],t),this.handlers[a][r]=[];else if(r)for(var s in this.handlers)n(o,this.handlers[s][r]||[],t),this.handlers[s][r]=[];else if(a&&this.handlers[a]){for(var l in this.handlers[a])n(o,this.handlers[a][l],t);this.handlers[a]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var e=this.element.ownerDocument.documentElement,n=t(this.element.ownerDocument),i={top:0,left:0};return this.element.getBoundingClientRect&&(i=this.element.getBoundingClientRect()),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}},n.prototype.on=function(e,t){var n=e.split("."),i=n[0],r=n[1]||"__default",a=this.handlers[r]=this.handlers[r]||{},o=a[i]=a[i]||[];o.push(t),this.element.addEventListener(i,t)},n.prototype.outerHeight=function(t){var n,i=this.innerHeight();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginTop,10),i+=parseInt(n.marginBottom,10)),i},n.prototype.outerWidth=function(t){var n,i=this.innerWidth();return t&&!e(this.element)&&(n=window.getComputedStyle(this.element),i+=parseInt(n.marginLeft,10),i+=parseInt(n.marginRight,10)),i},n.prototype.scrollLeft=function(){var e=t(this.element);return e?e.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var e=t(this.element);return e?e.pageYOffset:this.element.scrollTop},n.extend=function(){function e(e,t){if("object"==typeof e&&"object"==typeof t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}for(var t=Array.prototype.slice.call(arguments),n=1,i=t.length;n<i;n++)e(t[0],t[n]);return t[0]},n.inArray=function(e,t,n){return null==t?-1:t.indexOf(e,n)},n.isEmptyObject=function(e){for(var t in e)return!1;return!0},i.adapters.push({name:"noframework",Adapter:n}),i.Adapter=n}(),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){function t(e){return s.raw?e:encodeURIComponent(e)}function n(e){return s.raw?e:decodeURIComponent(e)}function i(e){return t(s.json?JSON.stringify(e):String(e))}function r(e){0===e.indexOf('"')&&(e=e.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return e=decodeURIComponent(e.replace(o," ")),s.json?JSON.parse(e):e}catch(t){}}function a(t,n){var i=s.raw?t:r(t);return e.isFunction(n)?n(i):i}var o=/\+/g,s=e.cookie=function(r,o,l){if(void 0!==o&&!e.isFunction(o)){if(l=e.extend({},s.defaults,l),"number"==typeof l.expires){var d=l.expires,u=l.expires=new Date;u.setTime(+u+864e5*d)}return document.cookie=[t(r),"=",i(o),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var c=r?void 0:{},h=document.cookie?document.cookie.split("; "):[],p=0,m=h.length;p<m;p++){var f=h[p].split("="),_=n(f.shift()),y=f.join("=");if(r&&r===_){c=a(y,o);break}r||void 0===(y=a(y))||(c[_]=y)}return c};s.defaults={},e.removeCookie=function(t,n){return void 0!==e.cookie(t)&&(e.cookie(t,"",e.extend({},n,{expires:-1})),!e.cookie(t))}}),function(e,t,n,i){"use strict";function r(e,t,n){return setTimeout(u(e,n),t)}function a(e,t,n){return!!Array.isArray(e)&&(o(e,n[t],n),!0)}function o(e,t,n){var r;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==i)for(r=0;r<e.length;)t.call(n,e[r],r,e),r++;else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e)}function s(e,t,n){for(var r=Object.keys(t),a=0;a<r.length;)(!n||n&&e[r[a]]===i)&&(e[r[a]]=t[r[a]]),a++;return e}function l(e,t){return s(e,t,!0)}function d(e,t,n){var i,r=t.prototype;i=e.prototype=Object.create(r),i.constructor=e,i._super=r,n&&s(i,n)}function u(e,t){return function(){return e.apply(t,arguments)}}function c(e,t){return typeof e==ue?e.apply(t?t[0]||i:i,t):e}function h(e,t){return e===i?t:e}function p(e,t,n){o(y(t),function(t){e.addEventListener(t,n,!1)})}function m(e,t,n){o(y(t),function(t){e.removeEventListener(t,n,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function _(e,t){return e.indexOf(t)>-1}function y(e){return e.trim().split(/\s+/g)}function g(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function v(e){return Array.prototype.slice.call(e,0)}function M(e,t,n){for(var i=[],r=[],a=0;a<e.length;){var o=t?e[a][t]:e[a];g(r,o)<0&&i.push(e[a]),r[a]=o,a++}return n&&(i=t?i.sort(function(e,n){return e[t]>n[t]}):i.sort()),i}function w(e,t){for(var n,r,a=t[0].toUpperCase()+t.slice(1),o=0;o<le.length;){if(n=le[o],r=n?n+a:t,r in e)return r;o++}return i}function b(){return me++}function L(e){var t=e.ownerDocument;return t.defaultView||t.parentWindow}function D(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){c(e.options.enable,[e])&&n.handler(t)},this.init()}function k(e){var t,n=e.options.inputClass;return new(t=n?n:ye?F:ge?R:_e?q:z)(e,T)}function T(e,t,n){var i=n.pointers.length,r=n.changedPointers.length,a=t&De&&i-r===0,o=t&(Te|Se)&&i-r===0;n.isFirst=!!a,n.isFinal=!!o,a&&(e.session={}),n.eventType=t,S(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function S(e,t){var n=e.session,i=t.pointers,r=i.length;n.firstInput||(n.firstInput=C(t)),r>1&&!n.firstMultiple?n.firstMultiple=C(t):1===r&&(n.firstMultiple=!1);var a=n.firstInput,o=n.firstMultiple,s=o?o.center:a.center,l=t.center=E(i);t.timeStamp=pe(),t.deltaTime=t.timeStamp-a.timeStamp,t.angle=j(s,l),t.distance=P(s,l),Y(n,t),t.offsetDirection=A(t.deltaX,t.deltaY),t.scale=o?O(o.pointers,i):1,t.rotation=o?I(o.pointers,i):0,x(n,t);var d=e.element;f(t.srcEvent.target,d)&&(d=t.srcEvent.target),t.target=d}function Y(e,t){var n=t.center,i=e.offsetDelta||{},r=e.prevDelta||{},a=e.prevInput||{};t.eventType!==De&&a.eventType!==Te||(r=e.prevDelta={x:a.deltaX||0,y:a.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=r.x+(n.x-i.x),t.deltaY=r.y+(n.y-i.y)}function x(e,t){var n,r,a,o,s=e.lastInterval||t,l=t.timeStamp-s.timeStamp;if(t.eventType!=Se&&(l>Le||s.velocity===i)){var d=s.deltaX-t.deltaX,u=s.deltaY-t.deltaY,c=H(l,d,u);r=c.x,a=c.y,n=he(c.x)>he(c.y)?c.x:c.y,o=A(d,u),e.lastInterval=t}else n=s.velocity,r=s.velocityX,a=s.velocityY,o=s.direction;t.velocity=n,t.velocityX=r,t.velocityY=a,t.direction=o}function C(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:ce(e.pointers[n].clientX),clientY:ce(e.pointers[n].clientY)},n++;return{timeStamp:pe(),pointers:t,center:E(t),deltaX:e.deltaX,deltaY:e.deltaY}}function E(e){var t=e.length;if(1===t)return{x:ce(e[0].clientX),y:ce(e[0].clientY)};for(var n=0,i=0,r=0;r<t;)n+=e[r].clientX,i+=e[r].clientY,r++;return{x:ce(n/t),y:ce(i/t)}}function H(e,t,n){return{x:t/e||0,y:n/e||0}}function A(e,t){return e===t?Ye:he(e)>=he(t)?e>0?xe:Ce:t>0?Ee:He}function P(e,t,n){n||(n=Ie);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return Math.sqrt(i*i+r*r)}function j(e,t,n){n||(n=Ie);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return 180*Math.atan2(r,i)/Math.PI}function I(e,t){return j(t[1],t[0],Oe)-j(e[1],e[0],Oe)}function O(e,t){return P(t[0],t[1],Oe)/P(e[0],e[1],Oe)}function z(){this.evEl=Fe,this.evWin=We,this.allow=!0,this.pressed=!1,D.apply(this,arguments)}function F(){this.evEl=Ne,this.evWin=qe,D.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function W(){this.evTarget=Ue,this.evWin=Je,this.started=!1,D.apply(this,arguments)}function $(e,t){var n=v(e.touches),i=v(e.changedTouches);return t&(Te|Se)&&(n=M(n.concat(i),"identifier",!0)),[n,i]}function R(){this.evTarget=Ge,this.targetIds={},D.apply(this,arguments)}function N(e,t){var n=v(e.touches),i=this.targetIds;if(t&(De|ke)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,a,o=v(e.changedTouches),s=[],l=this.target;if(a=n.filter(function(e){return f(e.target,l)}),t===De)for(r=0;r<a.length;)i[a[r].identifier]=!0,r++;for(r=0;r<o.length;)i[o[r].identifier]&&s.push(o[r]),t&(Te|Se)&&delete i[o[r].identifier],r++;return s.length?[M(a.concat(s),"identifier",!0),s]:void 0}function q(){D.apply(this,arguments);var e=u(this.handler,this);this.touch=new R(this.manager,e),this.mouse=new z(this.manager,e)}function B(e,t){this.manager=e,this.set(t)}function U(e){if(_(e,tt))return tt;var t=_(e,nt),n=_(e,it);return t&&n?nt+" "+it:t||n?t?nt:it:_(e,et)?et:Ke}function J(e){this.id=b(),this.manager=null,this.options=l(e||{},this.defaults),this.options.enable=h(this.options.enable,!0),this.state=rt,this.simultaneous={},this.requireFail=[]}function V(e){return e&dt?"cancel":e&st?"end":e&ot?"move":e&at?"start":""}function G(e){return e==He?"down":e==Ee?"up":e==xe?"left":e==Ce?"right":""}function X(e,t){var n=t.manager;return n?n.get(e):e}function Q(){J.apply(this,arguments)}function Z(){Q.apply(this,arguments),this.pX=null,this.pY=null}function K(){Q.apply(this,arguments)}function ee(){J.apply(this,arguments),this._timer=null,this._input=null}function te(){Q.apply(this,arguments)}function ne(){Q.apply(this,arguments)}function ie(){J.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function re(e,t){return t=t||{},t.recognizers=h(t.recognizers,re.defaults.preset),new ae(e,t)}function ae(e,t){t=t||{},this.options=l(t,re.defaults),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.element=e,this.input=k(this),this.touchAction=new B(this,this.options.touchAction),oe(this,!0),o(t.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function oe(e,t){var n=e.element;o(e.options.cssProps,function(e,i){n.style[w(n.style,i)]=t?e:""})}function se(e,n){var i=t.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var le=["","webkit","moz","MS","ms","o"],de=t.createElement("div"),ue="function",ce=Math.round,he=Math.abs,pe=Date.now,me=1,fe=/mobile|tablet|ip(ad|hone|od)|android/i,_e="ontouchstart"in e,ye=w(e,"PointerEvent")!==i,ge=_e&&fe.test(navigator.userAgent),ve="touch",Me="pen",we="mouse",be="kinect",Le=25,De=1,ke=2,Te=4,Se=8,Ye=1,xe=2,Ce=4,Ee=8,He=16,Ae=xe|Ce,Pe=Ee|He,je=Ae|Pe,Ie=["x","y"],Oe=["clientX","clientY"];
D.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(L(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(L(this.element),this.evWin,this.domHandler)}};var ze={mousedown:De,mousemove:ke,mouseup:Te},Fe="mousedown",We="mousemove mouseup";d(z,D,{handler:function(e){var t=ze[e.type];t&De&&0===e.button&&(this.pressed=!0),t&ke&&1!==e.which&&(t=Te),this.pressed&&this.allow&&(t&Te&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:we,srcEvent:e}))}});var $e={pointerdown:De,pointermove:ke,pointerup:Te,pointercancel:Se,pointerout:Se},Re={2:ve,3:Me,4:we,5:be},Ne="pointerdown",qe="pointermove pointerup pointercancel";e.MSPointerEvent&&(Ne="MSPointerDown",qe="MSPointerMove MSPointerUp MSPointerCancel"),d(F,D,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),r=$e[i],a=Re[e.pointerType]||e.pointerType,o=a==ve,s=g(t,e.pointerId,"pointerId");r&De&&(0===e.button||o)?s<0&&(t.push(e),s=t.length-1):r&(Te|Se)&&(n=!0),s<0||(t[s]=e,this.callback(this.manager,r,{pointers:t,changedPointers:[e],pointerType:a,srcEvent:e}),n&&t.splice(s,1))}});var Be={touchstart:De,touchmove:ke,touchend:Te,touchcancel:Se},Ue="touchstart",Je="touchstart touchmove touchend touchcancel";d(W,D,{handler:function(e){var t=Be[e.type];if(t===De&&(this.started=!0),this.started){var n=$.call(this,e,t);t&(Te|Se)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:ve,srcEvent:e})}}});var Ve={touchstart:De,touchmove:ke,touchend:Te,touchcancel:Se},Ge="touchstart touchmove touchend touchcancel";d(R,D,{handler:function(e){var t=Ve[e.type],n=N.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:ve,srcEvent:e})}}),d(q,D,{handler:function(e,t,n){var i=n.pointerType==ve,r=n.pointerType==we;if(i)this.mouse.allow=!1;else if(r&&!this.mouse.allow)return;t&(Te|Se)&&(this.mouse.allow=!0),this.callback(e,t,n)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Xe=w(de.style,"touchAction"),Qe=Xe!==i,Ze="compute",Ke="auto",et="manipulation",tt="none",nt="pan-x",it="pan-y";B.prototype={set:function(e){e==Ze&&(e=this.compute()),Qe&&(this.manager.element.style[Xe]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return o(this.manager.recognizers,function(t){c(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),U(e.join(" "))},preventDefaults:function(e){if(!Qe){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)return void t.preventDefault();var i=this.actions,r=_(i,tt),a=_(i,it),o=_(i,nt);return r||a&&n&Ae||o&&n&Pe?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var rt=1,at=2,ot=4,st=8,lt=st,dt=16,ut=32;J.prototype={defaults:{},set:function(e){return s(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(a(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=X(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return a(e,"dropRecognizeWith",this)?this:(e=X(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(a(e,"requireFailure",this))return this;var t=this.requireFail;return e=X(e,this),g(t,e)===-1&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(a(e,"dropRequireFailure",this))return this;e=X(e,this);var t=g(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(n.options.event+(t?V(i):""),e)}var n=this,i=this.state;i<st&&t(!0),t(),i>=st&&t(!0)},tryEmit:function(e){return this.canEmit()?this.emit(e):void(this.state=ut)},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(ut|rt)))return!1;e++}return!0},recognize:function(e){var t=s({},e);return c(this.options.enable,[this,t])?(this.state&(lt|dt|ut)&&(this.state=rt),this.state=this.process(t),void(this.state&(at|ot|st|dt)&&this.tryEmit(t))):(this.reset(),void(this.state=ut))},process:function(e){},getTouchAction:function(){},reset:function(){}},d(Q,J,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=t&(at|ot),r=this.attrTest(e);return i&&(n&Se||!r)?t|dt:i||r?n&Te?t|st:t&at?t|ot:at:ut}}),d(Z,Q,{defaults:{event:"pan",threshold:10,pointers:1,direction:je},getTouchAction:function(){var e=this.options.direction,t=[];return e&Ae&&t.push(it),e&Pe&&t.push(nt),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,r=e.direction,a=e.deltaX,o=e.deltaY;return r&t.direction||(t.direction&Ae?(r=0===a?Ye:a<0?xe:Ce,n=a!=this.pX,i=Math.abs(e.deltaX)):(r=0===o?Ye:o<0?Ee:He,n=o!=this.pY,i=Math.abs(e.deltaY))),e.direction=r,n&&i>t.threshold&&r&t.direction},attrTest:function(e){return Q.prototype.attrTest.call(this,e)&&(this.state&at||!(this.state&at)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=G(e.direction);t&&this.manager.emit(this.options.event+t,e),this._super.emit.call(this,e)}}),d(K,Q,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[tt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&at)},emit:function(e){if(this._super.emit.call(this,e),1!==e.scale){var t=e.scale<1?"in":"out";this.manager.emit(this.options.event+t,e)}}}),d(ee,J,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return[Ke]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,a=e.deltaTime>t.time;if(this._input=e,!i||!n||e.eventType&(Te|Se)&&!a)this.reset();else if(e.eventType&De)this.reset(),this._timer=r(function(){this.state=lt,this.tryEmit()},t.time,this);else if(e.eventType&Te)return lt;return ut},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===lt&&(e&&e.eventType&Te?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=pe(),this.manager.emit(this.options.event,this._input)))}}),d(te,Q,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[tt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&at)}}),d(ne,Q,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:Ae|Pe,pointers:1},getTouchAction:function(){return Z.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(Ae|Pe)?t=e.velocity:n&Ae?t=e.velocityX:n&Pe&&(t=e.velocityY),this._super.attrTest.call(this,e)&&n&e.direction&&e.distance>this.options.threshold&&he(t)>this.options.velocity&&e.eventType&Te},emit:function(e){var t=G(e.direction);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),d(ie,J,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[et]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,a=e.deltaTime<t.time;if(this.reset(),e.eventType&De&&0===this.count)return this.failTimeout();if(i&&a&&n){if(e.eventType!=Te)return this.failTimeout();var o=!this.pTime||e.timeStamp-this.pTime<t.interval,s=!this.pCenter||P(this.pCenter,e.center)<t.posThreshold;this.pTime=e.timeStamp,this.pCenter=e.center,s&&o?this.count+=1:this.count=1,this._input=e;var l=this.count%t.taps;if(0===l)return this.hasRequireFailures()?(this._timer=r(function(){this.state=lt,this.tryEmit()},t.interval,this),at):lt}return ut},failTimeout:function(){return this._timer=r(function(){this.state=ut},this.options.interval,this),ut},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==lt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),re.VERSION="2.0.4",re.defaults={domEvents:!1,touchAction:Ze,enable:!0,inputTarget:null,inputClass:null,preset:[[te,{enable:!1}],[K,{enable:!1},["rotate"]],[ne,{direction:Ae}],[Z,{direction:Ae},["swipe"]],[ie],[ie,{event:"doubletap",taps:2},["tap"]],[ee]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var ct=1,ht=2;ae.prototype={set:function(e){return s(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?ht:ct},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,i=this.recognizers,r=t.curRecognizer;(!r||r&&r.state&lt)&&(r=t.curRecognizer=null);for(var a=0;a<i.length;)n=i[a],t.stopped===ht||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(e),!r&&n.state&(at|ot|st)&&(r=t.curRecognizer=n),a++}},get:function(e){if(e instanceof J)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(a(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(a(e,"remove",this))return this;var t=this.recognizers;return e=this.get(e),t.splice(g(t,e),1),this.touchAction.update(),this},on:function(e,t){var n=this.handlers;return o(y(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this},off:function(e,t){var n=this.handlers;return o(y(e),function(e){t?n[e].splice(g(n[e],t),1):delete n[e]}),this},emit:function(e,t){this.options.domEvents&&se(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&oe(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},s(re,{INPUT_START:De,INPUT_MOVE:ke,INPUT_END:Te,INPUT_CANCEL:Se,STATE_POSSIBLE:rt,STATE_BEGAN:at,STATE_CHANGED:ot,STATE_ENDED:st,STATE_RECOGNIZED:lt,STATE_CANCELLED:dt,STATE_FAILED:ut,DIRECTION_NONE:Ye,DIRECTION_LEFT:xe,DIRECTION_RIGHT:Ce,DIRECTION_UP:Ee,DIRECTION_DOWN:He,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:Pe,DIRECTION_ALL:je,Manager:ae,Input:D,TouchAction:B,TouchInput:R,MouseInput:z,PointerEventInput:F,TouchMouseInput:q,SingleTouchInput:W,Recognizer:J,AttrRecognizer:Q,Tap:ie,Pan:Z,Swipe:ne,Pinch:K,Rotate:te,Press:ee,on:p,off:m,each:o,merge:l,extend:s,inherit:d,bindFn:u,prefixed:w}),typeof define==ue&&define.amd?define(function(){return re}):"undefined"!=typeof module&&module.exports?module.exports=re:e[n]=re}(window,document,"Hammer"),function(e,t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?t(require("jquery"),window,document):t(e.jQuery||e.Zepto,window,document)}(this,function(e,t,n){"use strict";var i=function(i,r){function a(){w=M,0===M?(w=y,"fade"!==r.animation&&m.css("left",-w*v)):M===g-1&&(w=1,"fade"!==r.animation&&m.css("left",-v)),"fade"===r.animation&&_.eq(w).show(),r.showBullets&&i.next(".as-nav").find("a").removeClass("as-active").eq(w-1).addClass("as-active"),b=!1,r.afterChange.call(i[0])}function o(){b||y<=1||(b=!0,r.beforeChange.call(i[0]),"fade"===r.animation?_.css("z-index",1).fadeOut(r.speed).eq(M).css("z-index",2).fadeIn(r.speed,a):m.animate({left:-M*v},r.speed,r.easing,a),s())}function s(){clearTimeout(f),r.interval&&y>1&&(f=setTimeout(function(){r.reverse?p():u()},r.interval))}function l(){return w}function d(e){M=e,o()}function u(){M=w+1,o()}function c(){clearTimeout(f)}function h(){s()}function p(){M=w-1,o()}var m,f,_=i.children(),y=_.length,g=y,v=i.width(),M=0,w=0,b=!1,L={afterChange:function(){},afterSetup:function(){},animation:"slide",beforeChange:function(){},easing:"swing",interval:5e3,keyboard:!0,nextLabel:"Next slide",pauseOnHover:!0,prevLabel:"Previous slide",reverse:!1,showBullets:!0,showControls:!0,speed:400,startSlide:1,touch:!0};if(r=e.extend(L,r),y>1&&(_.eq(0).clone().addClass("clone").appendTo(i),_.eq(g-1).clone().addClass("clone").prependTo(i),r.startSlide<y&&(w=r.startSlide)),_=i.children(),g=_.length,_.wrapAll('<div class="as-slide-inner"></div>').css("width",v),m=i.css("overflow","hidden").find(".as-slide-inner"),"fade"===r.animation?(_.css({display:"none",left:0,position:"absolute",top:0}).eq(w).show(),m.css("width",v)):(_.css({"float":"left",position:"relative"}),m.css({left:-w*v,width:g*v})),m.css({"float":"left",position:"relative"}),r.showControls&&y>1&&(i.prepend('<a href="#" class="as-prev-arrow" title="LABEL">LABEL</a>'.replace(/LABEL/g,r.prevLabel)),i.append('<a href="#" class="as-next-arrow" title="LABEL">LABEL</a>'.replace(/LABEL/g,r.nextLabel)),i.on("click.as",".as-prev-arrow, .as-next-arrow",function(t){t.preventDefault(),b||(e(this).hasClass("as-prev-arrow")?p():u())})),r.showBullets&&y>1){var D,k,T='<div class="as-nav"></div>',S=e(T);for(k=1;k<=y;k++)D="",k===w&&(D=' class="as-active"'),S.append('<a href="#"'+D+">"+k+"</a>");S.on("click.as","a",function(t){var n=e(this).index();t.preventDefault(),e(this).hasClass("as-active")||b||(S.find("a").removeClass("as-active").eq(n).addClass("as-active"),d(n+1))}),i.after(S)}if(r.keyboard&&e(n).on("keydown.as",function(e){var t=e.keyCode;37!==t&&39!==t||y<=1||(37===t?p():u())}),r.pauseOnHover&&i.on("mouseenter",function(){c()}).on("mouseleave",function(){h()}),e(t).resize(function(){b||(v=i.width(),m.css("width",v),_.css("width",v),"fade"!==r.animation&&m.css({left:-w*v,width:g*v}))}),r.touch&&"ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints>0){var Y,x;i.on("touchstart.as pointerdown.as MSPointerDown.as",function(e){Y=e.timeStamp,x=e.originalEvent?e.originalEvent.pageX||e.originalEvent.touches[0].pageX:e.pageX||e.touches[0].pageX}).on("touchmove.as pointermove.as MSPointerMove.as",function(e){var t,n=e.timeStamp,r=0;t=e.originalEvent?e.originalEvent.pageX||e.originalEvent.touches[0].pageX:e.pageX||e.touches[0].pageX,0!==x&&(r=Math.abs(t-x)),0!==Y&&n-Y<1e3&&r>200&&(e.preventDefault(),t<x?u():t>x&&p(),Y=0,x=0,i.trigger("touchend.as"))}).on("touchend.as pointerup.as MSPointerUp.as",function(){Y=0,x=0})}return s(),r.afterSetup.call(i[0]),{currentSlide:l,goTo:d,next:u,pause:c,play:h,prev:p}};e.fn.anyslider=function(t){return this.each(function(){var n,r=e(this);return r.data("anyslider")?r.data("anyslider"):(n=new i(r,t),void r.data("anyslider",n))})}}),function(e){function t(){}function n(e){function n(t){t.prototype.option||(t.prototype.option=function(t){e.isPlainObject(t)&&(this.options=e.extend(!0,this.options,t))})}function r(t,n){e.fn[t]=function(r){if("string"==typeof r){for(var o=i.call(arguments,1),s=0,l=this.length;s<l;s++){var d=this[s],u=e.data(d,t);if(u)if(e.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,o);if(void 0!==c)return c}else a("no such method '"+r+"' for "+t+" instance");else a("cannot call methods on "+t+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=e.data(this,t);i?(i.option(r),i._init()):(i=new n(this,r),e.data(this,t,i))})}}if(e){var a="undefined"==typeof console?t:function(e){console.error(e)};return e.bridget=function(e,t){n(t),r(e,t)},e.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):e.jQuery)}(window),function(e){function t(e){return new RegExp("(^|\\s+)"+e+"(\\s+|$)")}function n(e,t){var n=i(e,t)?a:r;n(e,t)}var i,r,a;"classList"in document.documentElement?(i=function(e,t){return e.classList.contains(t)},r=function(e,t){e.classList.add(t)},a=function(e,t){e.classList.remove(t)}):(i=function(e,n){return t(n).test(e.className)},r=function(e,t){i(e,t)||(e.className=e.className+" "+t)},a=function(e,n){e.className=e.className.replace(t(n)," ")});var o={hasClass:i,addClass:r,removeClass:a,toggleClass:n,has:i,add:r,remove:a,toggle:n};"function"==typeof define&&define.amd?define("classie/classie",o):"object"==typeof exports?module.exports=o:e.classie=o}(window),function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&t(r[i],n)===-1&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),i!==-1&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}.call(this),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):"object"==typeof exports?module.exports=a:e.eventie=a}(window),function(e){function t(e){if(e){if("string"==typeof i[e])return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var t,r=0,a=n.length;r<a;r++)if(t=n[r]+e,"string"==typeof i[t])return t}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return t}):"object"==typeof exports?module.exports=t:e.getStyleProperty=t}(window),function(e,t){function n(e){var t=parseFloat(e),n=e.indexOf("%")===-1&&!isNaN(t);return n&&t}function i(){}function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0,n=s.length;t<n;t++){var i=s[t];e[i]=0}return e}function a(t){function i(){if(!h){h=!0;var i=e.getComputedStyle;if(d=function(){var e=i?function(e){return i(e,null)}:function(e){return e.currentStyle};return function(t){var n=e(t);return n||o("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),u=t("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[u]="border-box";var a=document.body||document.documentElement;a.appendChild(r);var s=d(r);c=200===n(s.width),a.removeChild(r)}}}function a(e){if(i(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=d(e);if("none"===t.display)return r();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var o=a.isBorderBox=!(!u||!t[u]||"border-box"!==t[u]),h=0,p=s.length;h<p;h++){var m=s[h],f=t[m];f=l(e,f);var _=parseFloat(f);a[m]=isNaN(_)?0:_}var y=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,v=a.marginLeft+a.marginRight,M=a.marginTop+a.marginBottom,w=a.borderLeftWidth+a.borderRightWidth,b=a.borderTopWidth+a.borderBottomWidth,L=o&&c,D=n(t.width);D!==!1&&(a.width=D+(L?0:y+w));var k=n(t.height);return k!==!1&&(a.height=k+(L?0:g+b)),a.innerWidth=a.width-(y+w),a.innerHeight=a.height-(g+b),a.outerWidth=a.width+v,a.outerHeight=a.height+M,a}}function l(t,n){if(e.getComputedStyle||n.indexOf("%")===-1)return n;var i=t.style,r=i.left,a=t.runtimeStyle,o=a&&a.left;return o&&(a.left=t.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,o&&(a.left=o),n}var d,u,c,h=!1;return a}var o="undefined"==typeof console?i:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],a):"object"==typeof exports?module.exports=a(require("desandro-get-style-property")):e.getSize=a(e.getStyleProperty)}(window),function(e){function t(e){"function"==typeof e&&(t.isReady?e():o.push(e))}function n(e){var n="readystatechange"===e.type&&"complete"!==a.readyState;t.isReady||n||i()}function i(){t.isReady=!0;for(var e=0,n=o.length;e<n;e++){var i=o[e];i()}}function r(r){return"complete"===a.readyState?i():(r.bind(a,"DOMContentLoaded",n),r.bind(a,"readystatechange",n),r.bind(e,"load",n)),t}var a=e.document,o=[];t.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):e.docReady=r(e.eventie)}(window),function(e){"use strict";function t(e,t){return e[o](t)}function n(e){if(!e.parentNode){var t=document.createDocumentFragment();t.appendChild(e)}}function i(e,t){n(e);for(var i=e.parentNode.querySelectorAll(t),r=0,a=i.length;r<a;r++)if(i[r]===e)return!0;return!1}function r(e,i){return n(e),t(e,i)}var a,o=function(){if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0,i=t.length;n<i;n++){var r=t[n],a=r+"MatchesSelector";if(e[a])return a}}();if(o){var s=document.createElement("div"),l=t(s,"div");a=l?t:r}else a=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return a}):"object"==typeof exports?module.exports=a:window.matchesSelector=a}(Element.prototype),function(e,t){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("doc-ready"),require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.docReady,e.matchesSelector)}(window,function(e,t,n){var i={};i.extend=function(e,t){for(var n in t)e[n]=t[n];return e},i.modulo=function(e,t){return(e%t+t)%t};var r=Object.prototype.toString;i.isArray=function(e){return"[object Array]"==r.call(e)},i.makeArray=function(e){var t=[];if(i.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0,r=e.length;n<r;n++)t.push(e[n]);else t.push(e);return t},i.indexOf=Array.prototype.indexOf?function(e,t){return e.indexOf(t)}:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},i.removeFrom=function(e,t){var n=i.indexOf(e,t);n!=-1&&e.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(e){return e instanceof HTMLElement}:function(e){return e&&"object"==typeof e&&1==e.nodeType&&"string"==typeof e.nodeName},i.setText=function(){function e(e,n){t=t||(void 0!==document.documentElement.textContent?"textContent":"innerText"),e[t]=n}var t;return e}(),i.getParent=function(e,t){for(;e!=document.body;)if(e=e.parentNode,n(e,t))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,t){e=i.makeArray(e);for(var r=[],a=0,o=e.length;a<o;a++){var s=e[a];if(i.isElement(s))if(t){n(s,t)&&r.push(s);for(var l=s.querySelectorAll(t),d=0,u=l.length;d<u;d++)r.push(l[d])}else r.push(s)}return r},i.debounceMethod=function(e,t,n){var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];e&&clearTimeout(e);var t=arguments,a=this;this[r]=setTimeout(function(){i.apply(a,t),delete a[r]},n||100)}},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var a=e.console;return i.htmlInit=function(n,r){t(function(){for(var t=i.toDashed(r),o=document.querySelectorAll(".js-"+t),s="data-"+t+"-options",l=0,d=o.length;l<d;l++){var u,c=o[l],h=c.getAttribute(s);try{u=h&&JSON.parse(h)}catch(p){a&&a.error("Error parsing "+s+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+p);continue}var m=new n(c,u),f=e.jQuery;f&&f.data(c,r,m)}})},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/cell",["get-size/get-size"],function(n){return t(e,n)}):"object"==typeof exports?module.exports=t(e,require("get-size")):(e.Flickity=e.Flickity||{},e.Flickity.Cell=t(e,e.getSize))}(window,function(e,t){function n(e,t){this.element=e,this.parent=t,this.create()}var i="attachEvent"in e;return n.prototype.create=function(){this.element.style.position="absolute",i&&this.element.setAttribute("unselectable","on"),this.x=0,this.shift=0},n.prototype.destroy=function(){this.element.style.position="";var e=this.parent.originSide;this.element.style[e]=""},n.prototype.getSize=function(){this.size=t(this.element)},n.prototype.setPosition=function(e){this.x=e,this.setDefaultTarget(),this.renderPosition(e)},n.prototype.setDefaultTarget=function(){var e="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[e]+this.size.width*this.parent.cellAlign},n.prototype.renderPosition=function(e){var t=this.parent.originSide;this.element.style[t]=this.parent.getPositionValue(e)},n.prototype.wrapShift=function(e){this.shift=e,this.renderPosition(this.x+this.parent.slideableWidth*e)},n.prototype.remove=function(){this.element.parentNode.removeChild(this.element)},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/animate",["get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("desandro-get-style-property"),require("fizzy-ui-utils")):(e.Flickity=e.Flickity||{},e.Flickity.animatePrototype=t(e,e.getStyleProperty,e.fizzyUIUtils))}(window,function(e,t,n){for(var i,r=0,a="webkit moz ms o".split(" "),o=e.requestAnimationFrame,s=e.cancelAnimationFrame,l=0;l<a.length&&(!o||!s);l++)i=a[l],o=o||e[i+"RequestAnimationFrame"],s=s||e[i+"CancelAnimationFrame"]||e[i+"CancelRequestAnimationFrame"];o&&s||(o=function(t){var n=(new Date).getTime(),i=Math.max(0,16-(n-r)),a=e.setTimeout(function(){t(n+i)},i);return r=n+i,a},s=function(t){e.clearTimeout(t)});var d={};d.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},d.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var e=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating){var t=this;o(function(){t.animate()})}};var u=t("transform"),c=!!t("perspective");return d.positionSlider=function(){var e=this.x;this.options.wrapAround&&this.cells.length>1&&(e=n.modulo(e,this.slideableWidth),e-=this.slideableWidth,this.shiftWrapCells(e)),e+=this.cursorPosition,e=this.options.rightToLeft&&u?-e:e;var t=this.getPositionValue(e);u?this.slider.style[u]=c&&this.isAnimating?"translate3d("+t+",0,0)":"translateX("+t+")":this.slider.style[this.originSide]=t},d.positionSliderAtSelected=function(){if(this.cells.length){var e=this.cells[this.selectedIndex];this.x=-e.target,this.positionSlider()}},d.getPositionValue=function(e){return this.options.percentPosition?.01*Math.round(e/this.size.innerWidth*1e4)+"%":Math.round(e)+"px"},d.settle=function(e){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*e)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,c&&this.positionSlider(),this.dispatchEvent("settle"))},d.shiftWrapCells=function(e){var t=this.cursorPosition+e;this._shiftCells(this.beforeShiftCells,t,-1);var n=this.size.innerWidth-(e+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},d._shiftCells=function(e,t,n){for(var i=0,r=e.length;i<r;i++){var a=e[i],o=t>0?n:0;a.wrapShift(o),t-=a.size.outerWidth}},d._unshiftCells=function(e){if(e&&e.length)for(var t=0,n=e.length;t<n;t++)e[t].wrapShift(0)},d.integratePhysics=function(){this.velocity+=this.accel,this.x+=this.velocity,this.velocity*=this.getFrictionFactor(),this.accel=0},d.applyForce=function(e){this.accel+=e},d.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},d.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},d.applyDragForce=function(){if(this.isPointerDown){var e=this.dragX-this.x,t=e-this.velocity;this.applyForce(t)}},d.applySelectedAttraction=function(){var e=this.cells.length;if(!this.isPointerDown&&!this.isFreeScrolling&&e){var t=this.cells[this.selectedIndex],n=this.options.wrapAround&&e>1?this.slideableWidth*Math.floor(this.selectedIndex/e):0,i=(t.target+n)*-1-this.x,r=i*this.options.selectedAttraction;this.applyForce(r)}},d}),function(e,t){"use strict";if("function"==typeof define&&define.amd)define("flickity/js/flickity",["classie/classie","eventEmitter/EventEmitter","eventie/eventie","get-size/get-size","fizzy-ui-utils/utils","./cell","./animate"],function(n,i,r,a,o,s,l){return t(e,n,i,r,a,o,s,l)});else if("object"==typeof exports)module.exports=t(e,require("desandro-classie"),require("wolfy87-eventemitter"),require("eventie"),require("get-size"),require("fizzy-ui-utils"),require("./cell"),require("./animate"));else{var n=e.Flickity;e.Flickity=t(e,e.classie,e.EventEmitter,e.eventie,e.getSize,e.fizzyUIUtils,n.Cell,n.animatePrototype)}}(window,function(e,t,n,i,r,a,o,s){function l(e,t){for(e=a.makeArray(e);e.length;)t.appendChild(e.shift());
}function d(e,t){var n=a.getQueryElement(e);return n?(this.element=n,u&&(this.$element=u(this.element)),this.options=a.extend({},this.constructor.defaults),this.option(t),void this._create()):void(h&&h.error("Bad element for Flickity: "+(n||e)))}var u=e.jQuery,c=e.getComputedStyle,h=e.console,p=0,m={};d.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},d.createMethods=[],a.extend(d.prototype,n.prototype),d.prototype._create=function(){var t=this.guid=++p;this.element.flickityGUID=t,m[t]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.accel=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",d.setUnselectable(this.viewport),this._createSlider(),(this.options.resize||this.options.watchCSS)&&(i.bind(e,"resize",this),this.isResizeBound=!0);for(var n=0,r=d.createMethods.length;n<r;n++){var a=d.createMethods[n];this[a]()}this.options.watchCSS?this.watchCSS():this.activate()},d.prototype.option=function(e){a.extend(this.options,e)},d.prototype.activate=function(){if(!this.isActive){this.isActive=!0,t.add(this.element,"flickity-enabled"),this.options.rightToLeft&&t.add(this.element,"flickity-rtl"),this.getSize();var e=this._filterFindCellElements(this.element.children);l(e,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,i.bind(this.element,"keydown",this)),this.emit("activate");var n,r=this.options.initialIndex;n=this.isInitActivated?this.selectedIndex:void 0!==r&&this.cells[r]?r:0,this.select(n,!1,!0),this.isInitActivated=!0}},d.prototype._createSlider=function(){var e=document.createElement("div");e.className="flickity-slider",e.style[this.originSide]=0,this.slider=e},d.prototype._filterFindCellElements=function(e){return a.filterFindElements(e,this.options.cellSelector)},d.prototype.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},d.prototype._makeCells=function(e){for(var t=this._filterFindCellElements(e),n=[],i=0,r=t.length;i<r;i++){var a=t[i],s=new o(a,this);n.push(s)}return n},d.prototype.getLastCell=function(){return this.cells[this.cells.length-1]},d.prototype.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},d.prototype._positionCells=function(e){e=e||0,this.maxCellHeight=e?this.maxCellHeight||0:0;var t=0;if(e>0){var n=this.cells[e-1];t=n.x+n.size.outerWidth}for(var i,r=this.cells.length,a=e;a<r;a++)i=this.cells[a],i.setPosition(t),t+=i.size.outerWidth,this.maxCellHeight=Math.max(i.size.outerHeight,this.maxCellHeight);this.slideableWidth=t,this._containCells()},d.prototype._sizeCells=function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t];i.getSize()}},d.prototype._init=d.prototype.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},d.prototype.getSize=function(){this.size=r(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var f={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};d.prototype.setCellAlign=function(){var e=f[this.options.cellAlign];this.cellAlign=e?e[this.originSide]:this.options.cellAlign},d.prototype.setGallerySize=function(){this.options.setGallerySize&&(this.viewport.style.height=this.maxCellHeight+"px")},d.prototype._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var e=this.cursorPosition,t=this.cells.length-1;this.beforeShiftCells=this._getGapCells(e,t,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1)}},d.prototype._getGapCells=function(e,t,n){for(var i=[];e>0;){var r=this.cells[t];if(!r)break;i.push(r),t+=n,e-=r.size.outerWidth}return i},d.prototype._containCells=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length)for(var e=this.options.rightToLeft?"marginRight":"marginLeft",t=this.options.rightToLeft?"marginLeft":"marginRight",n=this.cells[0].size[e],i=this.getLastCell(),r=this.slideableWidth-i.size[t],a=r-this.size.innerWidth*(1-this.cellAlign),o=r<this.size.innerWidth,s=0,l=this.cells.length;s<l;s++){var d=this.cells[s];d.setDefaultTarget(),o?d.target=r*this.cellAlign:(d.target=Math.max(d.target,this.cursorPosition+n),d.target=Math.min(d.target,a))}},d.prototype.dispatchEvent=function(e,t,n){var i=[t].concat(n);if(this.emitEvent(e,i),u&&this.$element)if(t){var r=u.Event(t);r.type=e,this.$element.trigger(r,n)}else this.$element.trigger(e,n)},d.prototype.select=function(e,t,n){if(this.isActive){e=parseInt(e,10);var i=this.cells.length;this.options.wrapAround&&i>1&&(e<0?this.x-=this.slideableWidth:e>=i&&(this.x+=this.slideableWidth)),(this.options.wrapAround||t)&&(e=a.modulo(e,i)),this.cells[e]&&(this.selectedIndex=e,this.setSelectedCell(),n?this.positionSliderAtSelected():this.startAnimation(),this.dispatchEvent("cellSelect"))}},d.prototype.previous=function(e){this.select(this.selectedIndex-1,e)},d.prototype.next=function(e){this.select(this.selectedIndex+1,e)},d.prototype.setSelectedCell=function(){this._removeSelectedCellClass(),this.selectedCell=this.cells[this.selectedIndex],this.selectedElement=this.selectedCell.element,t.add(this.selectedElement,"is-selected")},d.prototype._removeSelectedCellClass=function(){this.selectedCell&&t.remove(this.selectedCell.element,"is-selected")},d.prototype.getCell=function(e){for(var t=0,n=this.cells.length;t<n;t++){var i=this.cells[t];if(i.element==e)return i}},d.prototype.getCells=function(e){e=a.makeArray(e);for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n],o=this.getCell(r);o&&t.push(o)}return t},d.prototype.getCellElements=function(){for(var e=[],t=0,n=this.cells.length;t<n;t++)e.push(this.cells[t].element);return e},d.prototype.getParentCell=function(e){var t=this.getCell(e);return t?t:(e=a.getParent(e,".flickity-slider > *"),this.getCell(e))},d.prototype.getAdjacentCellElements=function(e,t){if(!e)return[this.selectedElement];t=void 0===t?this.selectedIndex:t;var n=this.cells.length;if(1+2*e>=n)return this.getCellElements();for(var i=[],r=t-e;r<=t+e;r++){var o=this.options.wrapAround?a.modulo(r,n):r,s=this.cells[o];s&&i.push(s.element)}return i},d.prototype.uiChange=function(){this.emit("uiChange")},d.prototype.childUIPointerDown=function(e){this.emitEvent("childUIPointerDown",[e])},d.prototype.onresize=function(){this.watchCSS(),this.resize()},a.debounceMethod(d,"onresize",150),d.prototype.resize=function(){this.isActive&&(this.getSize(),this.options.wrapAround&&(this.x=a.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.positionSliderAtSelected())};var _=d.supportsConditionalCSS=function(){var e;return function(){if(void 0!==e)return e;if(!c)return void(e=!1);var t=document.createElement("style"),n=document.createTextNode('body:after { content: "foo"; display: none; }');t.appendChild(n),document.head.appendChild(t);var i=c(document.body,":after").content;return e=i.indexOf("foo")!=-1,document.head.removeChild(t),e}}();d.prototype.watchCSS=function(){var e=this.options.watchCSS;if(e){var t=_();if(!t){var n="fallbackOn"==e?"activate":"deactivate";return void this[n]()}var i=c(this.element,":after").content;i.indexOf("flickity")!=-1?this.activate():this.deactivate()}},d.prototype.onkeydown=function(e){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==e.keyCode){var t=this.options.rightToLeft?"next":"previous";this.uiChange(),this[t]()}else if(39==e.keyCode){var n=this.options.rightToLeft?"previous":"next";this.uiChange(),this[n]()}},d.prototype.deactivate=function(){if(this.isActive){t.remove(this.element,"flickity-enabled"),t.remove(this.element,"flickity-rtl");for(var e=0,n=this.cells.length;e<n;e++){var r=this.cells[e];r.destroy()}this._removeSelectedCellClass(),this.element.removeChild(this.viewport),l(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),i.unbind(this.element,"keydown",this)),this.isActive=!1,this.emit("deactivate")}},d.prototype.destroy=function(){this.deactivate(),this.isResizeBound&&i.unbind(e,"resize",this),this.emit("destroy"),u&&this.$element&&u.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete m[this.guid]},a.extend(d.prototype,s);var y="attachEvent"in e;return d.setUnselectable=function(e){y&&e.setAttribute("unselectable","on")},d.data=function(e){e=a.getQueryElement(e);var t=e&&e.flickityGUID;return t&&m[t]},a.htmlInit(d,"flickity"),u&&u.bridget&&u.bridget("flickity",d),d.Cell=o,d}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("unipointer/unipointer",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.Unipointer=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(){}function r(){}r.prototype=new t,r.prototype.bindStartEvent=function(e){this._bindStartEvent(e,!0)},r.prototype.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},r.prototype._bindStartEvent=function(t,i){i=void 0===i||!!i;var r=i?"bind":"unbind";e.navigator.pointerEnabled?n[r](t,"pointerdown",this):e.navigator.msPointerEnabled?n[r](t,"MSPointerDown",this):(n[r](t,"mousedown",this),n[r](t,"touchstart",this))},r.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},r.prototype.getTouch=function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t];if(i.identifier==this.pointerIdentifier)return i}},r.prototype.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},r.prototype.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},r.prototype.onMSPointerDown=r.prototype.onpointerdown=function(e){this._pointerDown(e,e)},r.prototype._pointerDown=function(e,t){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},r.prototype.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var a={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return r.prototype._bindPostStartEvents=function(t){if(t){for(var i=a[t.type],r=t.preventDefault?e:document,o=0,s=i.length;o<s;o++){var l=i[o];n.bind(r,l,this)}this._boundPointerEvents={events:i,node:r}}},r.prototype._unbindPostStartEvents=function(){var e=this._boundPointerEvents;if(e&&e.events){for(var t=0,i=e.events.length;t<i;t++){var r=e.events[t];n.unbind(e.node,r,this)}delete this._boundPointerEvents}},r.prototype.onmousemove=function(e){this._pointerMove(e,e)},r.prototype.onMSPointerMove=r.prototype.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},r.prototype.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},r.prototype._pointerMove=function(e,t){this.pointerMove(e,t)},r.prototype.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},r.prototype.onmouseup=function(e){this._pointerUp(e,e)},r.prototype.onMSPointerUp=r.prototype.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},r.prototype.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},r.prototype._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},r.prototype.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},r.prototype._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},r.prototype.pointerDone=i,r.prototype.onMSPointerCancel=r.prototype.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},r.prototype.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},r.prototype._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},r.prototype.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},r.getPointerPoint=function(e){return{x:void 0!==e.pageX?e.pageX:e.clientX,y:void 0!==e.pageY?e.pageY:e.clientY}},r}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("unidragger/unidragger",["eventie/eventie","unipointer/unipointer"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("unipointer")):e.Unidragger=t(e,e.eventie,e.Unipointer)}(window,function(e,t,n){function i(){}function r(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function a(){}function o(){return!1}a.prototype=new n,a.prototype.bindHandles=function(){this._bindHandles(!0)},a.prototype.unbindHandles=function(){this._bindHandles(!1)};var s=e.navigator;a.prototype._bindHandles=function(e){e=void 0===e||!!e;var n;n=s.pointerEnabled?function(t){t.style.touchAction=e?"none":""}:s.msPointerEnabled?function(t){t.style.msTouchAction=e?"none":""}:function(){e&&d(o)};for(var i=e?"bind":"unbind",r=0,a=this.handles.length;r<a;r++){var o=this.handles[r];this._bindStartEvent(o,e),n(o),t[i](o,"click",this)}};var l="attachEvent"in document.documentElement,d=l?function(e){"IMG"==e.nodeName&&(e.ondragstart=o);for(var t=e.querySelectorAll("img"),n=0,i=t.length;n<i;n++){var r=t[n];r.ondragstart=o}}:i;a.prototype.pointerDown=function(n,i){if("INPUT"==n.target.nodeName&&"range"==n.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(n,i);var r=document.activeElement;r&&r.blur&&r.blur(),this._bindPostStartEvents(n),this.pointerDownScroll=a.getScrollPosition(),t.bind(e,"scroll",this),this.emitEvent("pointerDown",[n,i])},a.prototype._dragPointerDown=function(e,t){this.pointerDownPoint=n.getPointerPoint(t);var i="touchstart"==e.type,a=e.target.nodeName;i||"SELECT"==a||r(e)},a.prototype.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,n]),this._dragMove(e,t,n)},a.prototype._dragPointerMove=function(e,t){var i=n.getPointerPoint(t),r={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(r)&&this._dragStart(e,t),r},a.prototype.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},a.prototype.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},a.prototype._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},a.prototype.pointerDone=function(){t.unbind(e,"scroll",this)},a.prototype._dragStart=function(e,t){this.isDragging=!0,this.dragStartPoint=a.getPointerPoint(t),this.isPreventingClicks=!0,this.dragStart(e,t)},a.prototype.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},a.prototype._dragMove=function(e,t,n){this.isDragging&&this.dragMove(e,t,n)},a.prototype.dragMove=function(e,t,n){r(e),this.emitEvent("dragMove",[e,t,n])},a.prototype._dragEnd=function(e,t){this.isDragging=!1;var n=this;setTimeout(function(){delete n.isPreventingClicks}),this.dragEnd(e,t)},a.prototype.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},a.prototype.pointerDone=function(){t.unbind(e,"scroll",this),delete this.pointerDownScroll},a.prototype.onclick=function(e){this.isPreventingClicks&&r(e)},a.prototype._staticClick=function(e,t){if(!this.isIgnoringMouseUp||"mouseup"!=e.type){var n=e.target.nodeName;if("INPUT"!=n&&"TEXTAREA"!=n||e.target.focus(),this.staticClick(e,t),"mouseup"!=e.type){this.isIgnoringMouseUp=!0;var i=this;setTimeout(function(){delete i.isIgnoringMouseUp},400)}}},a.prototype.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},a.prototype.onscroll=function(){var e=a.getScrollPosition(),t=this.pointerDownScroll.x-e.x,n=this.pointerDownScroll.y-e.y;(Math.abs(t)>3||Math.abs(n)>3)&&this._pointerDone()},a.getPointerPoint=function(e){return{x:void 0!==e.pageX?e.pageX:e.clientX,y:void 0!==e.pageY?e.pageY:e.clientY}};var u=void 0!==e.pageYOffset;return a.getScrollPosition=function(){return{x:u?e.pageXOffset:document.body.scrollLeft,y:u?e.pageYOffset:document.body.scrollTop}},a.getPointerPoint=n.getPointerPoint,a}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/drag",["classie/classie","eventie/eventie","./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(n,i,r,a,o){return t(e,n,i,r,a,o)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("eventie"),require("./flickity"),require("unidragger"),require("fizzy-ui-utils")):e.Flickity=t(e,e.classie,e.eventie,e.Flickity,e.Unidragger,e.fizzyUIUtils)}(window,function(e,t,n,i,r,a){function o(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function s(t){var n=r.getPointerPoint(t);return n.y-e.pageYOffset}a.extend(i.defaults,{draggable:!0,touchVerticalScroll:!0}),i.createMethods.push("_createDrag"),a.extend(i.prototype,r.prototype),i.prototype._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag)},i.prototype.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(t.add(this.element,"is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},i.prototype.unbindDrag=function(){this.isDragBound&&(t.remove(this.element,"is-draggable"),this.unbindHandles(),delete this.isDragBound)},i.prototype._uiChangeDrag=function(){delete this.isFreeScrolling},i.prototype._childUIPointerDownDrag=function(e){o(e),this.pointerDownFocus(e)},i.prototype.pointerDown=function(i,a){if("INPUT"==i.target.nodeName&&"range"==i.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(i,a);var o=document.activeElement;o&&o.blur&&o!=this.element&&o!=document.body&&o.blur(),this.pointerDownFocus(i),this.dragX=this.x,t.add(this.viewport,"is-pointer-down"),this._bindPostStartEvents(i),this.pointerDownScroll=r.getScrollPosition(),n.bind(e,"scroll",this),this.dispatchEvent("pointerDown",i,[a])};var l={touchstart:!0,MSPointerDown:!0},d={INPUT:!0,SELECT:!0};i.prototype.pointerDownFocus=function(t){if(this.options.accessibility&&!l[t.type]&&!d[t.target.nodeName]){var n=e.pageYOffset;this.element.focus(),e.pageYOffset!=n&&e.scrollTo(e.pageXOffset,n)}},i.prototype.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.touchVerticalScrollMove(e,t,n),this._dragMove(e,t,n),this.dispatchEvent("pointerMove",e,[t,n])},i.prototype.hasDragStarted=function(e){return!this.isTouchScrolling&&Math.abs(e.x)>3},i.prototype.pointerUp=function(e,n){delete this.isTouchScrolling,t.remove(this.viewport,"is-pointer-down"),this.dispatchEvent("pointerUp",e,[n]),this._dragPointerUp(e,n)};var u={touchmove:!0,MSPointerMove:!0};return i.prototype.touchVerticalScrollMove=function(t,n,i){var r=this.options.touchVerticalScroll,a="withDrag"==r?!r:this.isDragging||!r;!a&&u[t.type]&&!this.isTouchScrolling&&Math.abs(i.y)>10&&(this.startScrollY=e.pageYOffset,this.pointerWindowStartY=s(n),this.isTouchScrolling=!0)},i.prototype.dragStart=function(e,t){this.dragStartPosition=this.x,this.startAnimation(),this.dispatchEvent("dragStart",e,[t])},i.prototype.dragMove=function(e,t,n){o(e),this.previousDragX=this.dragX;var i=this.options.rightToLeft?-1:1,r=this.dragStartPosition+n.x*i;if(!this.options.wrapAround&&this.cells.length){var a=Math.max(-this.cells[0].target,this.dragStartPosition);r=r>a?.5*(r+a):r;var s=Math.min(-this.getLastCell().target,this.dragStartPosition);r=r<s?.5*(r+s):r}this.dragX=r,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",e,[t,n])},i.prototype.dragEnd=function(e,t){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var i=this.getRestingPosition();this.isFreeScrolling=-i>this.cells[0].target&&-i<this.getLastCell().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.select(n),this.dispatchEvent("dragEnd",e,[t])},i.prototype.dragEndRestingSelect=function(){var e=this.getRestingPosition(),t=Math.abs(this.getCellDistance(-e,this.selectedIndex)),n=this._getClosestResting(e,t,1),i=this._getClosestResting(e,t,-1),r=n.distance<i.distance?n.index:i.index;return r},i.prototype._getClosestResting=function(e,t,n){for(var i=this.selectedIndex,r=1/0,a=this.options.contain&&!this.options.wrapAround?function(e,t){return e<=t}:function(e,t){return e<t};a(t,r)&&(i+=n,r=t,t=this.getCellDistance(-e,i),null!==t);)t=Math.abs(t);return{distance:r,index:i-n}},i.prototype.getCellDistance=function(e,t){var n=this.cells.length,i=this.options.wrapAround&&n>1,r=i?a.modulo(t,n):t,o=this.cells[r];if(!o)return null;var s=i?this.slideableWidth*Math.floor(t/n):0;return e-(o.target+s)},i.prototype.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var e=this.getCellDistance(-this.dragX,this.selectedIndex),t=this.previousDragX-this.dragX;return e>0&&t>0?1:e<0&&t<0?-1:0},i.prototype.staticClick=function(e,t){var n=this.getParentCell(e.target),i=n&&n.element,r=n&&a.indexOf(this.cells,n);this.dispatchEvent("staticClick",e,[t,i,r])},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("tap-listener/tap-listener",["unipointer/unipointer"],function(n){return t(e,n)}):"object"==typeof exports?module.exports=t(e,require("unipointer")):e.TapListener=t(e,e.Unipointer)}(window,function(e,t){function n(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function i(e){this.bindTap(e)}i.prototype=new t,i.prototype.bindTap=function(e){e&&(this.unbindTap(),this.tapElement=e,this._bindStartEvent(e,!0))},i.prototype.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)};var r=i.prototype.pointerDown;i.prototype.pointerDown=function(e){"touchstart"==e.type&&n(e),r.apply(this,arguments)};var a=void 0!==e.pageYOffset;return i.prototype.pointerUp=function(n,i){var r=t.getPointerPoint(i),o=this.tapElement.getBoundingClientRect(),s=a?e.pageXOffset:document.body.scrollLeft,l=a?e.pageYOffset:document.body.scrollTop,d=r.x>=o.left+s&&r.x<=o.right+s&&r.y>=o.top+l&&r.y<=o.bottom+l;d&&this.emitEvent("tap",[n,i])},i.prototype.destroy=function(){this.pointerDone(),this.unbindTap()},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/prev-next-button",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):t(e,e.eventie,e.Flickity,e.TapListener,e.fizzyUIUtils)}(window,function(e,t,n,i,r){function a(e,t){this.direction=e,this.parent=t,this._create()}function o(e){return"string"==typeof e?e:"M "+e.x0+",50 L "+e.x1+","+(e.y1+50)+" L "+e.x2+","+(e.y2+50)+" L "+e.x3+",50  L "+e.x2+","+(50-e.y2)+" L "+e.x1+","+(50-e.y1)+" Z"}var s="http://www.w3.org/2000/svg",l=function(){function e(){if(void 0!==t)return t;var e=document.createElement("div");return e.innerHTML="<svg/>",t=(e.firstChild&&e.firstChild.namespaceURI)==s}var t;return e}();return a.prototype=new i,a.prototype._create=function(){this.isEnabled=!0,this.isPrevious=this.direction==-1;var e=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==e;var t=this.element=document.createElement("button");if(t.className="flickity-prev-next-button",t.className+=this.isPrevious?" previous":" next",t.setAttribute("type","button"),this.disable(),n.setUnselectable(t),l()){var i=this.createSVG();t.appendChild(i)}else this.setArrowText(),t.className+=" no-svg";var r=this;this.onCellSelect=function(){r.update()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(e,t){r.parent.childUIPointerDown(t)})},a.prototype.activate=function(){this.bindTap(this.element),t.bind(this.element,"click",this),this.parent.element.appendChild(this.element)},a.prototype.deactivate=function(){this.parent.element.removeChild(this.element),i.prototype.destroy.call(this),t.unbind(this.element,"click",this)},a.prototype.createSVG=function(){var e=document.createElementNS(s,"svg");e.setAttribute("viewBox","0 0 100 100");var t=document.createElementNS(s,"path"),n=o(this.parent.options.arrowShape);return t.setAttribute("d",n),t.setAttribute("class","arrow"),this.isLeft||t.setAttribute("transform","translate(100, 100) rotate(180) "),e.appendChild(t),e},a.prototype.setArrowText=function(){var e=this.parent.options,t=this.isLeft?e.leftArrowText:e.rightArrowText;r.setText(this.element,t)},a.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var e=this.isPrevious?"previous":"next";this.parent[e]()}},a.prototype.handleEvent=r.handleEvent,a.prototype.onclick=function(){var e=document.activeElement;e&&e==this.element&&this.onTap()},a.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},a.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},a.prototype.update=function(){var e=this.parent.cells;if(this.parent.options.wrapAround&&e.length>1)return void this.enable();var t=e.length?e.length-1:0,n=this.isPrevious?0:t,i=this.parent.selectedIndex==n?"disable":"enable";this[i]()},a.prototype.destroy=function(){this.deactivate()},r.extend(n.defaults,{prevNextButtons:!0,leftArrowText:"‹",rightArrowText:"›",arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),n.createMethods.push("_createPrevNextButtons"),n.prototype._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new a((-1),this),this.nextButton=new a(1,this),this.on("activate",this.activatePrevNextButtons))},n.prototype.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},n.prototype.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},n.PrevNextButton=a,n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/page-dots",["eventie/eventie","./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):t(e,e.eventie,e.Flickity,e.TapListener,e.fizzyUIUtils)}(window,function(e,t,n,i,r){function a(e){this.parent=e,this._create()}return a.prototype=new i,a.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",n.setUnselectable(this.holder),this.dots=[];var e=this;this.onCellSelect=function(){e.updateSelected()},this.parent.on("cellSelect",this.onCellSelect),this.on("tap",this.onTap),this.on("pointerDown",function(t,n){e.parent.childUIPointerDown(n)})},a.prototype.activate=function(){this.setDots(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},a.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),i.prototype.destroy.call(this)},a.prototype.setDots=function(){var e=this.parent.cells.length-this.dots.length;e>0?this.addDots(e):e<0&&this.removeDots(-e)},a.prototype.addDots=function(e){for(var t=document.createDocumentFragment(),n=[];e;){var i=document.createElement("li");i.className="dot",t.appendChild(i),n.push(i),e--}this.holder.appendChild(t),this.dots=this.dots.concat(n)},a.prototype.removeDots=function(e){for(var t=this.dots.splice(this.dots.length-e,e),n=0,i=t.length;n<i;n++){var r=t[n];this.holder.removeChild(r)}},a.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},a.prototype.onTap=function(e){var t=e.target;if("LI"==t.nodeName){this.parent.uiChange();var n=r.indexOf(this.dots,t);this.parent.select(n)}},a.prototype.destroy=function(){this.deactivate()},n.PageDots=a,r.extend(n.defaults,{pageDots:!0}),n.createMethods.push("_createPageDots"),n.prototype._createPageDots=function(){this.options.pageDots&&(this.pageDots=new a(this),this.on("activate",this.activatePageDots),this.on("cellAddedRemoved",this.onCellAddedRemovedPageDots),this.on("deactivate",this.deactivatePageDots))},n.prototype.activatePageDots=function(){this.pageDots.activate()},n.prototype.onCellAddedRemovedPageDots=function(){this.pageDots.setDots()},n.prototype.deactivatePageDots=function(){this.pageDots.deactivate()},n.PageDots=a,n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/player",["eventEmitter/EventEmitter","eventie/eventie","fizzy-ui-utils/utils","./flickity"],function(e,n,i,r){return t(e,n,i,r)}):"object"==typeof exports?module.exports=t(require("wolfy87-eventemitter"),require("eventie"),require("fizzy-ui-utils"),require("./flickity")):t(e.EventEmitter,e.eventie,e.fizzyUIUtils,e.Flickity)}(window,function(e,t,n,i){function r(e){if(this.isPlaying=!1,this.parent=e,o){var t=this;this.onVisibilityChange=function(){t.visibilityChange()}}}var a,o;return"hidden"in document?(a="hidden",o="visibilitychange"):"webkitHidden"in document&&(a="webkitHidden",o="webkitvisibilitychange"),r.prototype=new e,r.prototype.play=function(){this.isPlaying=!0,delete this.isPaused,o&&document.addEventListener(o,this.onVisibilityChange,!1),this.tick()},r.prototype.tick=function(){if(this.isPlaying&&!this.isPaused){this.tickTime=new Date;var e=this.parent.options.autoPlay;e="number"==typeof e?e:3e3;var t=this;this.timeout=setTimeout(function(){t.parent.next(!0),t.tick()},e)}},r.prototype.stop=function(){this.isPlaying=!1,delete this.isPaused,this.clear(),o&&document.removeEventListener(o,this.onVisibilityChange,!1)},r.prototype.clear=function(){clearTimeout(this.timeout)},r.prototype.pause=function(){this.isPlaying&&(this.isPaused=!0,this.clear())},r.prototype.unpause=function(){this.isPaused&&this.play()},r.prototype.visibilityChange=function(){var e=document[a];this[e?"pause":"unpause"]()},n.extend(i.defaults,{pauseAutoPlayOnHover:!0}),i.createMethods.push("_createPlayer"),i.prototype._createPlayer=function(){this.player=new r(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},i.prototype.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),t.bind(this.element,"mouseenter",this),this.isMouseenterBound=!0)},i.prototype.stopPlayer=function(){this.player.stop()},i.prototype.deactivatePlayer=function(){this.player.stop(),this.isMouseenterBound&&(t.unbind(this.element,"mouseenter",this),delete this.isMouseenterBound)},i.prototype.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),t.bind(this.element,"mouseleave",this))},i.prototype.onmouseleave=function(){this.player.unpause(),t.unbind(this.element,"mouseleave",this)},i.Player=r,i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/add-remove-cell",["./flickity","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("./flickity"),require("fizzy-ui-utils")):t(e,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n){function i(e){for(var t=document.createDocumentFragment(),n=0,i=e.length;n<i;n++){var r=e[n];t.appendChild(r.element)}return t}return t.prototype.insert=function(e,t){var n=this._makeCells(e);if(n&&n.length){var r=this.cells.length;t=void 0===t?r:t;var a=i(n),o=t==r;if(o)this.slider.appendChild(a);else{
var s=this.cells[t].element;this.slider.insertBefore(a,s)}if(0===t)this.cells=n.concat(this.cells);else if(o)this.cells=this.cells.concat(n);else{var l=this.cells.splice(t,r-t);this.cells=this.cells.concat(n).concat(l)}this._sizeCells(n);var d=t>this.selectedIndex?0:n.length;this._cellAddedRemoved(t,d)}},t.prototype.append=function(e){this.insert(e,this.cells.length)},t.prototype.prepend=function(e){this.insert(e,0)},t.prototype.remove=function(e){var t,i,r,a=this.getCells(e),o=0;for(t=0,i=a.length;t<i;t++){r=a[t];var s=n.indexOf(this.cells,r)<this.selectedIndex;o-=s?1:0}for(t=0,i=a.length;t<i;t++)r=a[t],r.remove(),n.removeFrom(this.cells,r);a.length&&this._cellAddedRemoved(0,o)},t.prototype._cellAddedRemoved=function(e,t){t=t||0,this.selectedIndex+=t,this.selectedIndex=Math.max(0,Math.min(this.cells.length-1,this.selectedIndex)),this.emitEvent("cellAddedRemoved",[e,t]),this.cellChange(e,!0)},t.prototype.cellSizeChange=function(e){var t=this.getCell(e);if(t){t.getSize();var i=n.indexOf(this.cells,t);this.cellChange(i)}},t.prototype.cellChange=function(e,t){var n=this.slideableWidth;this._positionCells(e),this._getWrapShiftCells(),this.setGallerySize(),this.options.freeScroll?(this.x+=n-this.slideableWidth,this.positionSlider()):(t&&this.positionSliderAtSelected(),this.select(this.selectedIndex))},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/lazyload",["classie/classie","eventie/eventie","./flickity","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("eventie"),require("./flickity"),require("fizzy-ui-utils")):t(e,e.classie,e.eventie,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n,i,r){"use strict";function a(e){if("IMG"==e.nodeName&&e.getAttribute("data-flickity-lazyload"))return[e];var t=e.querySelectorAll("img[data-flickity-lazyload]");return r.makeArray(t)}function o(e,t){this.img=e,this.flickity=t,this.load()}return i.createMethods.push("_createLazyload"),i.prototype._createLazyload=function(){this.on("cellSelect",this.lazyLoad)},i.prototype.lazyLoad=function(){var e=this.options.lazyLoad;if(e){for(var t="number"==typeof e?e:0,n=this.getAdjacentCellElements(t),i=[],r=0,s=n.length;r<s;r++){var l=n[r],d=a(l);i=i.concat(d)}for(r=0,s=i.length;r<s;r++){var u=i[r];new o(u,this)}}},o.prototype.handleEvent=r.handleEvent,o.prototype.load=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},o.prototype.onload=function(e){this.complete(e,"flickity-lazyloaded")},o.prototype.onerror=function(e){this.complete(e,"flickity-lazyerror")},o.prototype.complete=function(e,i){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this);var r=this.flickity.getParentCell(this.img),a=r&&r.element;this.flickity.cellSizeChange(a),t.add(this.img,i),this.flickity.dispatchEvent("lazyLoad",e,a)},i.LazyLoader=o,i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity/js/index",["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],t):"object"==typeof exports&&(module.exports=t(require("./flickity"),require("./drag"),require("./prev-next-button"),require("./page-dots"),require("./player"),require("./add-remove-cell"),require("./lazyload")))}(window,function(e){return e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("flickity-as-nav-for/as-nav-for",["classie/classie","flickity/js/index","fizzy-ui-utils/utils"],function(n,i,r){return t(e,n,i,r)}):"object"==typeof exports?module.exports=t(e,require("desandro-classie"),require("flickity"),require("fizzy-ui-utils")):e.Flickity=t(e,e.classie,e.Flickity,e.fizzyUIUtils)}(window,function(e,t,n,i){return n.createMethods.push("_createAsNavFor"),n.prototype._createAsNavFor=function(){this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor);var e=this.options.asNavFor;if(e){var t=this;setTimeout(function(){t.setNavCompanion(e)})}},n.prototype.setNavCompanion=function(e){e=i.getQueryElement(e);var t=n.data(e);if(t&&t!=this){this.navCompanion=t;var r=this;this.onNavCompanionSelect=function(){r.navCompanionSelect()},t.on("cellSelect",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect()}},n.prototype.navCompanionSelect=function(){if(this.navCompanion){var e=this.navCompanion.selectedIndex;this.select(e),this.removeNavSelectedElement(),this.selectedIndex==e&&(this.navSelectedElement=this.cells[e].element,t.add(this.navSelectedElement,"is-nav-selected"))}},n.prototype.activateAsNavFor=function(){this.navCompanionSelect()},n.prototype.removeNavSelectedElement=function(){this.navSelectedElement&&(t.remove(this.navSelectedElement,"is-nav-selected"),delete this.navSelectedElement)},n.prototype.onNavStaticClick=function(e,t,n,i){"number"==typeof i&&this.navCompanion.select(i)},n.prototype.deactivateAsNavFor=function(){this.removeNavSelectedElement()},n.prototype.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("cellSelect",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.imagesLoaded=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(e,t){for(var n in t)e[n]=t[n];return e}function r(e){return"[object Array]"==c.call(e)}function a(e){var t=[];if(r(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);"string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=a(e),this.options=i({},this.options),"function"==typeof t?n=t:i(this.options,t),n&&this.on("always",n),this.getImages(),d&&(this.jqDeferred=new d.Deferred);var r=this;setTimeout(function(){r.check()})}function s(e){this.img=e}function l(e,t){this.url=e,this.element=t,this.img=new Image}var d=e.jQuery,u=e.console,c=Object.prototype.toString;o.prototype=new t,o.prototype.options={},o.prototype.getImages=function(){this.images=[];for(var e=0;e<this.elements.length;e++){var t=this.elements[e];this.addElementImages(t)}},o.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&h[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var a=e.querySelectorAll(this.options.background);for(i=0;i<a.length;i++){var o=a[i];this.addElementBackgroundImages(o)}}}};var h={1:!0,9:!0,11:!0};o.prototype.addElementBackgroundImages=function(e){for(var t=p(e),n=/url\(['"]*([^'"\)]+)['"]*\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[1];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}};var p=e.getComputedStyle||function(e){return e.currentStyle};return o.prototype.addImage=function(e){var t=new s(e);this.images.push(t)},o.prototype.addBackground=function(e,t){var n=new l(e,t);this.images.push(n)},o.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;if(this.progressedCount=0,this.hasAnyBroken=!1,!this.images.length)return void this.complete();for(var n=0;n<this.images.length;n++){var i=this.images[n];i.once("progress",e),i.check()}},o.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emit("progress",this,e,t),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&u&&u.log("progress: "+n,e,t)},o.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emit(e,this),this.emit("always",this),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},s.prototype=new t,s.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,n.bind(this.proxyImage,"load",this),n.bind(this.proxyImage,"error",this),n.bind(this.img,"load",this),n.bind(this.img,"error",this),void(this.proxyImage.src=this.img.src))},s.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.img,t)},s.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},s.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},s.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},s.prototype.unbindEvents=function(){n.unbind(this.proxyImage,"load",this),n.unbind(this.proxyImage,"error",this),n.unbind(this.img,"load",this),n.unbind(this.img,"error",this)},l.prototype=new s,l.prototype.check=function(){n.bind(this.img,"load",this),n.bind(this.img,"error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},l.prototype.unbindEvents=function(){n.unbind(this.img,"load",this),n.unbind(this.img,"error",this)},l.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("progress",this,this.element,t)},o.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(d=t,d.fn.imagesLoaded=function(e,t){var n=new o(this,e,t);return n.jqDeferred.promise(d(this))})},o.makeJQueryPlugin(),o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("flickity"),require("imagesloaded")):e.Flickity=t(e,e.Flickity,e.imagesLoaded)}(window,function(e,t,n){"use strict";return t.createMethods.push("_createImagesLoaded"),t.prototype._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},t.prototype.imagesLoaded=function(){function e(e,n){var i=t.getParentCell(n.img);t.cellSizeChange(i&&i.element),t.options.freeScroll||t.positionSliderAtSelected()}if(this.options.imagesLoaded){var t=this;n(this.slider).on("progress",e)}},t}),function(e){function t(){}function n(e){function n(t){t.prototype.option||(t.prototype.option=function(t){e.isPlainObject(t)&&(this.options=e.extend(!0,this.options,t))})}function r(t,n){e.fn[t]=function(r){if("string"==typeof r){for(var o=i.call(arguments,1),s=0,l=this.length;s<l;s++){var d=this[s],u=e.data(d,t);if(u)if(e.isFunction(u[r])&&"_"!==r.charAt(0)){var c=u[r].apply(u,o);if(void 0!==c)return c}else a("no such method '"+r+"' for "+t+" instance");else a("cannot call methods on "+t+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=e.data(this,t);i?(i.option(r),i._init()):(i=new n(this,r),e.data(this,t,i))})}}if(e){var a="undefined"==typeof console?t:function(e){console.error(e)};return e.bridget=function(e,t){n(t),r(e,t)},e.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):e.jQuery)}(window),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var a={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",a):"object"==typeof exports?module.exports=a:e.eventie=a}(window),function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,a=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if(e instanceof RegExp){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),a="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&t(r[i],n)===-1&&r[i].push(a?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,a=this.getListenersAsObject(e);for(r in a)a.hasOwnProperty(r)&&(i=t(a[r],n),i!==-1&&a[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,a=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)a.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if(e instanceof RegExp)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,a,o=this.getListenersAsObject(e);for(r in o)if(o.hasOwnProperty(r))for(i=o[r].length;i--;)n=o[r][i],n.once===!0&&this.removeListener(e,n.listener),a=n.listener.apply(this,t||[]),a===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=a,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:r.EventEmitter=e}.call(this),function(e){function t(e){if(e){if("string"==typeof i[e])return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var t,r=0,a=n.length;r<a;r++)if(t=n[r]+e,"string"==typeof i[t])return t}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return t}):"object"==typeof exports?module.exports=t:e.getStyleProperty=t}(window),function(e,t){function n(e){var t=parseFloat(e),n=e.indexOf("%")===-1&&!isNaN(t);return n&&t}function i(){}function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0,n=s.length;t<n;t++){var i=s[t];e[i]=0}return e}function a(t){function i(){if(!h){h=!0;var i=e.getComputedStyle;if(d=function(){var e=i?function(e){return i(e,null)}:function(e){return e.currentStyle};return function(t){var n=e(t);return n||o("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),u=t("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[u]="border-box";var a=document.body||document.documentElement;a.appendChild(r);var s=d(r);c=200===n(s.width),a.removeChild(r)}}}function a(e){if(i(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=d(e);if("none"===t.display)return r();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var o=a.isBorderBox=!(!u||!t[u]||"border-box"!==t[u]),h=0,p=s.length;h<p;h++){var m=s[h],f=t[m];f=l(e,f);var _=parseFloat(f);a[m]=isNaN(_)?0:_}var y=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,v=a.marginLeft+a.marginRight,M=a.marginTop+a.marginBottom,w=a.borderLeftWidth+a.borderRightWidth,b=a.borderTopWidth+a.borderBottomWidth,L=o&&c,D=n(t.width);D!==!1&&(a.width=D+(L?0:y+w));var k=n(t.height);return k!==!1&&(a.height=k+(L?0:g+b)),a.innerWidth=a.width-(y+w),a.innerHeight=a.height-(g+b),a.outerWidth=a.width+v,a.outerHeight=a.height+M,a}}function l(t,n){if(e.getComputedStyle||n.indexOf("%")===-1)return n;var i=t.style,r=i.left,a=t.runtimeStyle,o=a&&a.left;return o&&(a.left=t.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,o&&(a.left=o),n}var d,u,c,h=!1;return a}var o="undefined"==typeof console?i:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],a):"object"==typeof exports?module.exports=a(require("desandro-get-style-property")):e.getSize=a(e.getStyleProperty)}(window),function(e){function t(e){"function"==typeof e&&(t.isReady?e():o.push(e))}function n(e){var n="readystatechange"===e.type&&"complete"!==a.readyState;t.isReady||n||i()}function i(){t.isReady=!0;for(var e=0,n=o.length;e<n;e++){var i=o[e];i()}}function r(r){return"complete"===a.readyState?i():(r.bind(a,"DOMContentLoaded",n),r.bind(a,"readystatechange",n),r.bind(e,"load",n)),t}var a=e.document,o=[];t.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):e.docReady=r(e.eventie)}(window),function(e){"use strict";function t(e,t){return e[o](t)}function n(e){if(!e.parentNode){var t=document.createDocumentFragment();t.appendChild(e)}}function i(e,t){n(e);for(var i=e.parentNode.querySelectorAll(t),r=0,a=i.length;r<a;r++)if(i[r]===e)return!0;return!1}function r(e,i){return n(e),t(e,i)}var a,o=function(){if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0,i=t.length;n<i;n++){var r=t[n],a=r+"MatchesSelector";if(e[a])return a}}();if(o){var s=document.createElement("div"),l=t(s,"div");a=l?t:r}else a=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return a}):"object"==typeof exports?module.exports=a:window.matchesSelector=a}(Element.prototype),function(e,t){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("doc-ready"),require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.docReady,e.matchesSelector)}(window,function(e,t,n){var i={};i.extend=function(e,t){for(var n in t)e[n]=t[n];return e},i.modulo=function(e,t){return(e%t+t)%t};var r=Object.prototype.toString;i.isArray=function(e){return"[object Array]"==r.call(e)},i.makeArray=function(e){var t=[];if(i.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0,r=e.length;n<r;n++)t.push(e[n]);else t.push(e);return t},i.indexOf=Array.prototype.indexOf?function(e,t){return e.indexOf(t)}:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},i.removeFrom=function(e,t){var n=i.indexOf(e,t);n!=-1&&e.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(e){return e instanceof HTMLElement}:function(e){return e&&"object"==typeof e&&1==e.nodeType&&"string"==typeof e.nodeName},i.setText=function(){function e(e,n){t=t||(void 0!==document.documentElement.textContent?"textContent":"innerText"),e[t]=n}var t;return e}(),i.getParent=function(e,t){for(;e!=document.body;)if(e=e.parentNode,n(e,t))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,t){e=i.makeArray(e);for(var r=[],a=0,o=e.length;a<o;a++){var s=e[a];if(i.isElement(s))if(t){n(s,t)&&r.push(s);for(var l=s.querySelectorAll(t),d=0,u=l.length;d<u;d++)r.push(l[d])}else r.push(s)}return r},i.debounceMethod=function(e,t,n){var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];e&&clearTimeout(e);var t=arguments,a=this;this[r]=setTimeout(function(){i.apply(a,t),delete a[r]},n||100)}},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var a=e.console;return i.htmlInit=function(n,r){t(function(){for(var t=i.toDashed(r),o=document.querySelectorAll(".js-"+t),s="data-"+t+"-options",l=0,d=o.length;l<d;l++){var u,c=o[l],h=c.getAttribute(s);try{u=h&&JSON.parse(h)}catch(p){a&&a.error("Error parsing "+s+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+p);continue}var m=new n(c,u),f=e.jQuery;f&&f.data(c,r,m)}})},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,a){return t(e,n,i,r,a)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(e.Outlayer={},e.Outlayer.Item=t(e,e.EventEmitter,e.getSize,e.getStyleProperty,e.fizzyUIUtils))}(window,function(e,t,n,i,r){"use strict";function a(e){for(var t in e)return!1;return t=null,!0}function o(e,t){e&&(this.element=e,this.layout=t,this.position={x:0,y:0},this._create())}function s(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}var l=e.getComputedStyle,d=l?function(e){return l(e,null)}:function(e){return e.currentStyle},u=i("transition"),c=i("transform"),h=u&&c,p=!!i("perspective"),m={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[u],f=["transform","transition","transitionDuration","transitionProperty"],_=function(){for(var e={},t=0,n=f.length;t<n;t++){var r=f[t],a=i(r);a&&a!==r&&(e[r]=a)}return e}();r.extend(o.prototype,t.prototype),o.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.getSize=function(){this.size=n(this.element)},o.prototype.css=function(e){var t=this.element.style;for(var n in e){var i=_[n]||n;t[i]=e[n]}},o.prototype.getPosition=function(){var e=d(this.element),t=this.layout.options,n=t.isOriginLeft,i=t.isOriginTop,r=e[n?"left":"right"],a=e[i?"top":"bottom"],o=this.layout.size,s=r.indexOf("%")!=-1?parseFloat(r)/100*o.width:parseInt(r,10),l=a.indexOf("%")!=-1?parseFloat(a)/100*o.height:parseInt(a,10);s=isNaN(s)?0:s,l=isNaN(l)?0:l,s-=n?o.paddingLeft:o.paddingRight,l-=i?o.paddingTop:o.paddingBottom,this.position.x=s,this.position.y=l},o.prototype.layoutPosition=function(){var e=this.layout.size,t=this.layout.options,n={},i=t.isOriginLeft?"paddingLeft":"paddingRight",r=t.isOriginLeft?"left":"right",a=t.isOriginLeft?"right":"left",o=this.position.x+e[i];n[r]=this.getXValue(o),n[a]="";var s=t.isOriginTop?"paddingTop":"paddingBottom",l=t.isOriginTop?"top":"bottom",d=t.isOriginTop?"bottom":"top",u=this.position.y+e[s];n[l]=this.getYValue(u),n[d]="",this.css(n),this.emitEvent("layout",[this])},o.prototype.getXValue=function(e){var t=this.layout.options;return t.percentPosition&&!t.isHorizontal?e/this.layout.size.width*100+"%":e+"px"},o.prototype.getYValue=function(e){var t=this.layout.options;return t.percentPosition&&t.isHorizontal?e/this.layout.size.height*100+"%":e+"px"},o.prototype._transitionTo=function(e,t){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(e,10),a=parseInt(t,10),o=r===this.position.x&&a===this.position.y;if(this.setPosition(e,t),o&&!this.isTransitioning)return void this.layoutPosition();var s=e-n,l=t-i,d={};d.transform=this.getTranslate(s,l),this.transition({to:d,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},o.prototype.getTranslate=function(e,t){var n=this.layout.options;return e=n.isOriginLeft?e:-e,t=n.isOriginTop?t:-t,p?"translate3d("+e+"px, "+t+"px, 0)":"translate("+e+"px, "+t+"px)"},o.prototype.goTo=function(e,t){this.setPosition(e,t),this.layoutPosition()},o.prototype.moveTo=h?o.prototype._transitionTo:o.prototype.goTo,o.prototype.setPosition=function(e,t){this.position.x=parseInt(e,10),this.position.y=parseInt(t,10)},o.prototype._nonTransition=function(e){this.css(e.to),e.isCleaning&&this._removeStyles(e.to);for(var t in e.onTransitionEnd)e.onTransitionEnd[t].call(this)},o.prototype._transition=function(e){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(e);var t=this._transn;for(var n in e.onTransitionEnd)t.onEnd[n]=e.onTransitionEnd[n];for(n in e.to)t.ingProperties[n]=!0,e.isCleaning&&(t.clean[n]=!0);if(e.from){this.css(e.from);var i=this.element.offsetHeight;i=null}this.enableTransition(e.to),this.css(e.to),this.isTransitioning=!0};var y="opacity,"+s(_.transform||"transform");o.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:y,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(m,this,!1))},o.prototype.transition=o.prototype[u?"_transition":"_nonTransition"],o.prototype.onwebkitTransitionEnd=function(e){this.ontransitionend(e)},o.prototype.onotransitionend=function(e){this.ontransitionend(e)};var g={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};o.prototype.ontransitionend=function(e){if(e.target===this.element){var t=this._transn,n=g[e.propertyName]||e.propertyName;if(delete t.ingProperties[n],a(t.ingProperties)&&this.disableTransition(),n in t.clean&&(this.element.style[e.propertyName]="",delete t.clean[n]),n in t.onEnd){var i=t.onEnd[n];i.call(this),delete t.onEnd[n]}this.emitEvent("transitionEnd",[this])}},o.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(m,this,!1),this.isTransitioning=!1},o.prototype._removeStyles=function(e){var t={};for(var n in e)t[n]="";this.css(t)};var v={transitionProperty:"",transitionDuration:""};return o.prototype.removeTransitionStyles=function(){this.css(v)},o.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},o.prototype.remove=function(){if(!u||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var e=this;this.once("transitionEnd",function(){e.removeElem()}),this.hide()},o.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var e=this.layout.options,t={},n=this.getHideRevealTransitionEndProperty("visibleStyle");t[n]=this.onRevealTransitionEnd,this.transition({from:e.hiddenStyle,to:e.visibleStyle,isCleaning:!0,onTransitionEnd:t})},o.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},o.prototype.getHideRevealTransitionEndProperty=function(e){var t=this.layout.options[e];if(t.opacity)return"opacity";for(var n in t)return n},o.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var e=this.layout.options,t={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");t[n]=this.onHideTransitionEnd,this.transition({from:e.visibleStyle,to:e.hiddenStyle,isCleaning:!0,onTransitionEnd:t})},o.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},o.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,a,o){return t(e,n,i,r,a,o)}):"object"==typeof exports?module.exports=t(e,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):e.Outlayer=t(e,e.eventie,e.EventEmitter,e.getSize,e.fizzyUIUtils,e.Outlayer.Item)}(window,function(e,t,n,i,r,a){"use strict";function o(e,t){var n=r.getQueryElement(e);if(!n)return void(s&&s.error("Bad element for "+this.constructor.namespace+": "+(n||e)));this.element=n,l&&(this.$element=l(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(t);var i=++u;this.element.outlayerGUID=i,c[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var s=e.console,l=e.jQuery,d=function(){},u=0,c={};return o.namespace="outlayer",o.Item=a,o.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(o.prototype,n.prototype),o.prototype.option=function(e){r.extend(this.options,e)},o.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},o.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},o.prototype._itemize=function(e){for(var t=this._filterFindItemElements(e),n=this.constructor.Item,i=[],r=0,a=t.length;r<a;r++){var o=t[r],s=new n(o,this);i.push(s)}return i},o.prototype._filterFindItemElements=function(e){return r.filterFindElements(e,this.options.itemSelector)},o.prototype.getItemElements=function(){for(var e=[],t=0,n=this.items.length;t<n;t++)e.push(this.items[t].element);return e},o.prototype.layout=function(){this._resetLayout(),this._manageStamps();var e=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},o.prototype._init=o.prototype.layout,o.prototype._resetLayout=function(){this.getSize()},o.prototype.getSize=function(){this.size=i(this.element)},o.prototype._getMeasurement=function(e,t){var n,a=this.options[e];a?("string"==typeof a?n=this.element.querySelector(a):r.isElement(a)&&(n=a),this[e]=n?i(n)[t]:a):this[e]=0},o.prototype.layoutItems=function(e,t){e=this._getItemsForLayout(e),this._layoutItems(e,t),this._postLayout()},o.prototype._getItemsForLayout=function(e){for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n];r.isIgnored||t.push(r)}return t},o.prototype._layoutItems=function(e,t){if(this._emitCompleteOnItems("layout",e),e&&e.length){for(var n=[],i=0,r=e.length;i<r;i++){var a=e[i],o=this._getItemLayoutPosition(a);o.item=a,o.isInstant=t||a.isLayoutInstant,n.push(o)}this._processLayoutQueue(n)}},o.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},o.prototype._processLayoutQueue=function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t];this._positionItem(i.item,i.x,i.y,i.isInstant)}},o.prototype._positionItem=function(e,t,n,i){i?e.goTo(t,n):e.moveTo(t,n)},o.prototype._postLayout=function(){this.resizeContainer()},o.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1));
}},o.prototype._getContainerSize=d,o.prototype._setContainerMeasure=function(e,t){if(void 0!==e){var n=this.size;n.isBorderBox&&(e+=t?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),e=Math.max(e,0),this.element.style[t?"width":"height"]=e+"px"}},o.prototype._emitCompleteOnItems=function(e,t){function n(){r.dispatchEvent(e+"Complete",null,[t])}function i(){o++,o===a&&n()}var r=this,a=t.length;if(!t||!a)return void n();for(var o=0,s=0,l=t.length;s<l;s++){var d=t[s];d.once(e,i)}},o.prototype.dispatchEvent=function(e,t,n){var i=t?[t].concat(n):n;if(this.emitEvent(e,i),l)if(this.$element=this.$element||l(this.element),t){var r=l.Event(t);r.type=e,this.$element.trigger(r,n)}else this.$element.trigger(e,n)},o.prototype.ignore=function(e){var t=this.getItem(e);t&&(t.isIgnored=!0)},o.prototype.unignore=function(e){var t=this.getItem(e);t&&delete t.isIgnored},o.prototype.stamp=function(e){if(e=this._find(e)){this.stamps=this.stamps.concat(e);for(var t=0,n=e.length;t<n;t++){var i=e[t];this.ignore(i)}}},o.prototype.unstamp=function(e){if(e=this._find(e))for(var t=0,n=e.length;t<n;t++){var i=e[t];r.removeFrom(this.stamps,i),this.unignore(i)}},o.prototype._find=function(e){if(e)return"string"==typeof e&&(e=this.element.querySelectorAll(e)),e=r.makeArray(e)},o.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var e=0,t=this.stamps.length;e<t;e++){var n=this.stamps[e];this._manageStamp(n)}}},o.prototype._getBoundingRect=function(){var e=this.element.getBoundingClientRect(),t=this.size;this._boundingRect={left:e.left+t.paddingLeft+t.borderLeftWidth,top:e.top+t.paddingTop+t.borderTopWidth,right:e.right-(t.paddingRight+t.borderRightWidth),bottom:e.bottom-(t.paddingBottom+t.borderBottomWidth)}},o.prototype._manageStamp=d,o.prototype._getElementOffset=function(e){var t=e.getBoundingClientRect(),n=this._boundingRect,r=i(e),a={left:t.left-n.left-r.marginLeft,top:t.top-n.top-r.marginTop,right:n.right-t.right-r.marginRight,bottom:n.bottom-t.bottom-r.marginBottom};return a},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.bindResize=function(){this.isResizeBound||(t.bind(e,"resize",this),this.isResizeBound=!0)},o.prototype.unbindResize=function(){this.isResizeBound&&t.unbind(e,"resize",this),this.isResizeBound=!1},o.prototype.onresize=function(){function e(){t.resize(),delete t.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var t=this;this.resizeTimeout=setTimeout(e,100)},o.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},o.prototype.needsResizeLayout=function(){var e=i(this.element),t=this.size&&e;return t&&e.innerWidth!==this.size.innerWidth},o.prototype.addItems=function(e){var t=this._itemize(e);return t.length&&(this.items=this.items.concat(t)),t},o.prototype.appended=function(e){var t=this.addItems(e);t.length&&(this.layoutItems(t,!0),this.reveal(t))},o.prototype.prepended=function(e){var t=this._itemize(e);if(t.length){var n=this.items.slice(0);this.items=t.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(t,!0),this.reveal(t),this.layoutItems(n)}},o.prototype.reveal=function(e){this._emitCompleteOnItems("reveal",e);for(var t=e&&e.length,n=0;t&&n<t;n++){var i=e[n];i.reveal()}},o.prototype.hide=function(e){this._emitCompleteOnItems("hide",e);for(var t=e&&e.length,n=0;t&&n<t;n++){var i=e[n];i.hide()}},o.prototype.revealItemElements=function(e){var t=this.getItems(e);this.reveal(t)},o.prototype.hideItemElements=function(e){var t=this.getItems(e);this.hide(t)},o.prototype.getItem=function(e){for(var t=0,n=this.items.length;t<n;t++){var i=this.items[t];if(i.element===e)return i}},o.prototype.getItems=function(e){e=r.makeArray(e);for(var t=[],n=0,i=e.length;n<i;n++){var a=e[n],o=this.getItem(a);o&&t.push(o)}return t},o.prototype.remove=function(e){var t=this.getItems(e);if(this._emitCompleteOnItems("remove",t),t&&t.length)for(var n=0,i=t.length;n<i;n++){var a=t[n];a.remove(),r.removeFrom(this.items,a)}},o.prototype.destroy=function(){var e=this.element.style;e.height="",e.position="",e.width="";for(var t=0,n=this.items.length;t<n;t++){var i=this.items[t];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete c[r],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},o.data=function(e){e=r.getQueryElement(e);var t=e&&e.outlayerGUID;return t&&c[t]},o.create=function(e,t){function n(){o.apply(this,arguments)}return Object.create?n.prototype=Object.create(o.prototype):r.extend(n.prototype,o.prototype),n.prototype.constructor=n,n.defaults=r.extend({},o.defaults),r.extend(n.defaults,t),n.prototype.settings={},n.namespace=e,n.data=o.data,n.Item=function(){a.apply(this,arguments)},n.Item.prototype=new a,r.htmlInit(n,e),l&&l.bridget&&l.bridget(e,n),n},o.Item=a,o}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],t):"object"==typeof exports?module.exports=t(require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.Item=t(e.Outlayer))}(window,function(e){"use strict";function t(){e.Item.apply(this,arguments)}t.prototype=new e.Item,t.prototype._create=function(){this.id=this.layout.itemGUID++,e.Item.prototype._create.call(this),this.sortData={}},t.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var e=this.layout.options.getSortData,t=this.layout._sorters;for(var n in e){var i=t[n];this.sortData[n]=i(this.element,this)}}};var n=t.prototype.destroy;return t.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],t):"object"==typeof exports?module.exports=t(require("get-size"),require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.LayoutMode=t(e.getSize,e.Outlayer))}(window,function(e,t){"use strict";function n(e){this.isotope=e,e&&(this.options=e.options[this.namespace],this.element=e.element,this.items=e.filteredItems,this.size=e.size)}return function(){function e(e){return function(){return t.prototype[e].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,a=i.length;r<a;r++){var o=i[r];n.prototype[o]=e(o)}}(),n.prototype.needsVerticalResizeLayout=function(){var t=e(this.isotope.element),n=this.isotope.size&&t;return n&&t.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(e,t){var n=e+t,i="outer"+t;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+t]}},n.prototype.getFirstItemSize=function(){var t=this.isotope.filteredItems[0];return t&&t.element&&e(t.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(e,t){function i(){n.apply(this,arguments)}return i.prototype=new n,t&&(i.options=t),i.prototype.namespace=e,n.modes[e]=i,i},n}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],t):"object"==typeof exports?module.exports=t(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):e.Masonry=t(e.Outlayer,e.getSize,e.fizzyUIUtils)}(window,function(e,t,n){var i=e.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var e=this.cols;for(this.colYs=[];e--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var e=this.items[0],n=e&&e.element;this.columnWidth=n&&t(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,a=r/i,o=i-r%i,s=o&&o<1?"round":"floor";a=Math[s](a),this.cols=Math.max(a,1)},i.prototype.getContainerWidth=function(){var e=this.options.isFitWidth?this.element.parentNode:this.element,n=t(e);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth%this.columnWidth,i=t&&t<1?"round":"ceil",r=Math[i](e.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var a=this._getColGroup(r),o=Math.min.apply(Math,a),s=n.indexOf(a,o),l={x:this.columnWidth*s,y:o},d=o+e.size.outerHeight,u=this.cols+1-a.length,c=0;c<u;c++)this.colYs[s+c]=d;return l},i.prototype._getColGroup=function(e){if(e<2)return this.colYs;for(var t=[],n=this.cols+1-e,i=0;i<n;i++){var r=this.colYs.slice(i,i+e);t[i]=Math.max.apply(Math,r)}return t},i.prototype._manageStamp=function(e){var n=t(e),i=this._getElementOffset(e),r=this.options.isOriginLeft?i.left:i.right,a=r+n.outerWidth,o=Math.floor(r/this.columnWidth);o=Math.max(0,o);var s=Math.floor(a/this.columnWidth);s-=a%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var l=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,d=o;d<=s;d++)this.colYs[d]=Math.max(l,this.colYs[d])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var e={height:this.maxY};return this.options.isFitWidth&&(e.width=this._getContainerFitWidth()),e},i.prototype._getContainerFitWidth=function(){for(var e=0,t=this.cols;--t&&0===this.colYs[t];)e++;return(this.cols-e)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var e=this.containerWidth;return this.getContainerWidth(),e!==this.containerWidth},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],t):"object"==typeof exports?module.exports=t(require("../layout-mode"),require("masonry-layout")):t(e.Isotope.LayoutMode,e.Masonry)}(window,function(e,t){"use strict";function n(e,t){for(var n in t)e[n]=t[n];return e}var i=e.create("masonry"),r=i.prototype._getElementOffset,a=i.prototype.layout,o=i.prototype._getMeasurement;n(i.prototype,t.prototype),i.prototype._getElementOffset=r,i.prototype.layout=a,i.prototype._getMeasurement=o;var s=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var l=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,l.apply(this,arguments)},i}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("fitRows");return t.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},t.prototype._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&t+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+e.size.outerHeight),this.x+=t,i},t.prototype._getContainerSize=function(){return{height:this.maxY}},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("vertical",{horizontalAlignment:0});return t.prototype._resetLayout=function(){this.y=0},t.prototype._getItemLayoutPosition=function(e){e.getSize();var t=(this.isotope.size.innerWidth-e.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=e.size.outerHeight,{x:t,y:n}},t.prototype._getContainerSize=function(){return{height:this.y}},t}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,a,o,s){return t(e,n,i,r,a,o,s)}):"object"==typeof exports?module.exports=t(e,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):e.Isotope=t(e,e.Outlayer,e.getSize,e.matchesSelector,e.fizzyUIUtils,e.Isotope.Item,e.Isotope.LayoutMode)}(window,function(e,t,n,i,r,a,o){function s(e,t){return function(n,i){for(var r=0,a=e.length;r<a;r++){var o=e[r],s=n.sortData[o],l=i.sortData[o];if(s>l||s<l){var d=void 0!==t[o]?t[o]:t,u=d?1:-1;return(s>l?1:-1)*u}}return 0}}var l=e.jQuery,d=String.prototype.trim?function(e){return e.trim()}:function(e){return e.replace(/^\s+|\s+$/g,"")},u=document.documentElement,c=u.textContent?function(e){return e.textContent}:function(e){return e.innerText},h=t.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=a,h.LayoutMode=o,h.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),t.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var e in o.modes)this._initLayoutMode(e)},h.prototype.reloadItems=function(){this.itemGUID=0,t.prototype.reloadItems.call(this)},h.prototype._itemize=function(){for(var e=t.prototype._itemize.apply(this,arguments),n=0,i=e.length;n<i;n++){var r=e[n];r.id=this.itemGUID++}return this._updateItemsSortData(e),e},h.prototype._initLayoutMode=function(e){var t=o.modes[e],n=this.options[e]||{};this.options[e]=t.options?r.extend(t.options,n):n,this.modes[e]=new t(this)},h.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},h.prototype._layout=function(){var e=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,e),this._isLayoutInited=!0},h.prototype.arrange=function(e){function t(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(e),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(t):t(),this._sort(),this._layout()},h.prototype._init=h.prototype.arrange,h.prototype._getIsInstant=function(){var e=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=e,e},h.prototype._bindArrangeComplete=function(){function e(){t&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var t,n,i,r=this;this.once("layoutComplete",function(){t=!0,e()}),this.once("hideComplete",function(){n=!0,e()}),this.once("revealComplete",function(){i=!0,e()})},h.prototype._filter=function(e){var t=this.options.filter;t=t||"*";for(var n=[],i=[],r=[],a=this._getFilterTest(t),o=0,s=e.length;o<s;o++){var l=e[o];if(!l.isIgnored){var d=a(l);d&&n.push(l),d&&l.isHidden?i.push(l):d||l.isHidden||r.push(l)}}return{matches:n,needReveal:i,needHide:r}},h.prototype._getFilterTest=function(e){return l&&this.options.isJQueryFiltering?function(t){return l(t.element).is(e)}:"function"==typeof e?function(t){return e(t.element)}:function(t){return i(t.element,e)}},h.prototype.updateSortData=function(e){var t;e?(e=r.makeArray(e),t=this.getItems(e)):t=this.items,this._getSorters(),this._updateItemsSortData(t)},h.prototype._getSorters=function(){var e=this.options.getSortData;for(var t in e){var n=e[t];this._sorters[t]=p(n)}},h.prototype._updateItemsSortData=function(e){for(var t=e&&e.length,n=0;t&&n<t;n++){var i=e[n];i.updateSortData()}};var p=function(){function e(e){if("string"!=typeof e)return e;var n=d(e).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),a=r&&r[1],o=t(a,i),s=h.sortDataParsers[n[1]];return e=s?function(e){return e&&s(o(e))}:function(e){return e&&o(e)}}function t(e,t){var n;return n=e?function(t){return t.getAttribute(e)}:function(e){var n=e.querySelector(t);return n&&c(n)}}return e}();h.sortDataParsers={parseInt:function(e){return parseInt(e,10)},parseFloat:function(e){return parseFloat(e)}},h.prototype._sort=function(){var e=this.options.sortBy;if(e){var t=[].concat.apply(e,this.sortHistory),n=s(t,this.options.sortAscending);this.filteredItems.sort(n),e!=this.sortHistory[0]&&this.sortHistory.unshift(e)}},h.prototype._mode=function(){var e=this.options.layoutMode,t=this.modes[e];if(!t)throw new Error("No layout mode: "+e);return t.options=this.options[e],t},h.prototype._resetLayout=function(){t.prototype._resetLayout.call(this),this._mode()._resetLayout()},h.prototype._getItemLayoutPosition=function(e){return this._mode()._getItemLayoutPosition(e)},h.prototype._manageStamp=function(e){this._mode()._manageStamp(e)},h.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},h.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.prototype.appended=function(e){var t=this.addItems(e);if(t.length){var n=this._filterRevealAdded(t);this.filteredItems=this.filteredItems.concat(n)}},h.prototype.prepended=function(e){var t=this._itemize(e);if(t.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(t);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=t.concat(this.items)}},h.prototype._filterRevealAdded=function(e){var t=this._filter(e);return this.hide(t.needHide),this.reveal(t.matches),this.layoutItems(t.matches,!0),t.matches},h.prototype.insert=function(e){var t=this.addItems(e);if(t.length){var n,i,r=t.length;for(n=0;n<r;n++)i=t[n],this.element.appendChild(i.element);var a=this._filter(t).matches;for(n=0;n<r;n++)t[n].isLayoutInstant=!0;for(this.arrange(),n=0;n<r;n++)delete t[n].isLayoutInstant;this.reveal(a)}};var m=h.prototype.remove;return h.prototype.remove=function(e){e=r.makeArray(e);var t=this.getItems(e);m.call(this,e);var n=t&&t.length;if(n)for(var i=0;i<n;i++){var a=t[i];r.removeFrom(this.filteredItems,a)}},h.prototype.shuffle=function(){for(var e=0,t=this.items.length;e<t;e++){var n=this.items[e];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h.prototype._noTransition=function(e){var t=this.options.transitionDuration;this.options.transitionDuration=0;var n=e.call(this);return this.options.transitionDuration=t,n},h.prototype.getFilteredItemElements=function(){for(var e=[],t=0,n=this.filteredItems.length;t<n;t++)e.push(this.filteredItems[t].element);return e},h}),function(e,t,n){function i(t,n){this.element=t,this.settings=e.extend({},r,n),this.settings.duplicate||n.hasOwnProperty("removeIds")||(this.settings.removeIds=!1),this._defaults=r,this._name=a,this.init()}var r={label:"MENU",duplicate:!0,duration:200,easingOpen:"swing",easingClose:"swing",closedSymbol:"&#9658;",openedSymbol:"&#9660;",prependTo:"body",appendTo:"",parentTag:"a",closeOnClick:!1,allowParentLinks:!1,nestedParentLinks:!0,showChildren:!1,removeIds:!0,removeClasses:!1,removeStyles:!1,brand:"",init:function(){},beforeOpen:function(){},beforeClose:function(){},afterOpen:function(){},afterClose:function(){}},a="slicknav",o="slicknav";i.prototype.init=function(){var n,i,r=this,a=e(this.element),s=this.settings;if(s.duplicate?r.mobileNav=a.clone():r.mobileNav=a,s.removeIds&&(r.mobileNav.removeAttr("id"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("id")})),s.removeClasses&&(r.mobileNav.removeAttr("class"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("class")})),s.removeStyles&&(r.mobileNav.removeAttr("style"),r.mobileNav.find("*").each(function(t,n){e(n).removeAttr("style")})),n=o+"_icon",""===s.label&&(n+=" "+o+"_no-text"),"a"==s.parentTag&&(s.parentTag='a href="#"'),r.mobileNav.attr("class",o+"_nav"),i=e('<div class="'+o+'_menu"></div>'),""!==s.brand){var l=e('<div class="'+o+'_brand">'+s.brand+"</div>");e(i).append(l)}r.btn=e(["<"+s.parentTag+' aria-haspopup="true" tabindex="0" class="'+o+"_btn "+o+'_collapsed">','<span class="'+o+'_menutxt">'+s.label+"</span>",'<span class="'+n+'">','<span class="'+o+'_icon-bar"></span>','<span class="'+o+'_icon-bar"></span>','<span class="'+o+'_icon-bar"></span>',"</span>","</"+s.parentTag+">"].join("")),e(i).append(r.btn),""!==s.appendTo?e(s.appendTo).append(i):e(s.prependTo).prepend(i),i.append(r.mobileNav);var d=r.mobileNav.find("li");e(d).each(function(){var t=e(this),n={};if(n.children=t.children("ul").attr("role","menu"),t.data("menu",n),n.children.length>0){var i=t.contents(),a=!1,l=[];e(i).each(function(){return!e(this).is("ul")&&(l.push(this),void(e(this).is("a")&&(a=!0)))});var d=e("<"+s.parentTag+' role="menuitem" aria-haspopup="true" tabindex="-1" class="'+o+'_item"/>');if(s.allowParentLinks&&!s.nestedParentLinks&&a)e(l).wrapAll('<span class="'+o+"_parent-link "+o+'_row"/>').parent();else{var u=e(l).wrapAll(d).parent();u.addClass(o+"_row")}s.showChildren?t.addClass(o+"_open"):t.addClass(o+"_collapsed"),t.addClass(o+"_parent");var c=e('<span class="'+o+'_arrow">'+(s.showChildren?s.openedSymbol:s.closedSymbol)+"</span>");s.allowParentLinks&&!s.nestedParentLinks&&a&&(c=c.wrap(d).parent()),e(l).last().after(c)}else 0===t.children().length&&t.addClass(o+"_txtnode");t.children("a").attr("role","menuitem").click(function(t){s.closeOnClick&&!e(t.target).parent().closest("li").hasClass(o+"_parent")&&e(r.btn).click()}),s.closeOnClick&&s.allowParentLinks&&(t.children("a").children("a").click(function(t){e(r.btn).click()}),t.find("."+o+"_parent-link a:not(."+o+"_item)").click(function(t){e(r.btn).click()}))}),e(d).each(function(){var t=e(this).data("menu");s.showChildren||r._visibilityToggle(t.children,null,!1,null,!0)}),r._visibilityToggle(r.mobileNav,null,!1,"init",!0),r.mobileNav.attr("role","menu"),e(t).mousedown(function(){r._outlines(!1)}),e(t).keyup(function(){r._outlines(!0)}),e(r.btn).click(function(e){e.preventDefault(),r._menuToggle()}),r.mobileNav.on("click","."+o+"_item",function(t){t.preventDefault(),r._itemClick(e(this))}),e(r.btn).keydown(function(e){var t=e||event;13==t.keyCode&&(e.preventDefault(),r._menuToggle())}),r.mobileNav.on("keydown","."+o+"_item",function(t){var n=t||event;13==n.keyCode&&(t.preventDefault(),r._itemClick(e(t.target)))}),s.allowParentLinks&&s.nestedParentLinks&&e("."+o+"_item a").click(function(e){e.stopImmediatePropagation()})},i.prototype._menuToggle=function(e){var t=this,n=t.btn,i=t.mobileNav;n.hasClass(o+"_collapsed")?(n.removeClass(o+"_collapsed"),n.addClass(o+"_open")):(n.removeClass(o+"_open"),n.addClass(o+"_collapsed")),n.addClass(o+"_animating"),t._visibilityToggle(i,n.parent(),!0,n)},i.prototype._itemClick=function(e){var t=this,n=t.settings,i=e.data("menu");i||(i={},i.arrow=e.children("."+o+"_arrow"),i.ul=e.next("ul"),i.parent=e.parent(),i.parent.hasClass(o+"_parent-link")&&(i.parent=e.parent().parent(),i.ul=e.parent().next("ul")),e.data("menu",i)),i.parent.hasClass(o+"_collapsed")?(i.arrow.html(n.openedSymbol),i.parent.removeClass(o+"_collapsed"),i.parent.addClass(o+"_open"),i.parent.addClass(o+"_animating"),t._visibilityToggle(i.ul,i.parent,!0,e)):(i.arrow.html(n.closedSymbol),i.parent.addClass(o+"_collapsed"),i.parent.removeClass(o+"_open"),i.parent.addClass(o+"_animating"),t._visibilityToggle(i.ul,i.parent,!0,e))},i.prototype._visibilityToggle=function(t,n,i,r,a){var s=this,l=s.settings,d=s._getActionItems(t),u=0;i&&(u=l.duration),t.hasClass(o+"_hidden")?(t.removeClass(o+"_hidden"),a||l.beforeOpen(r),t.slideDown(u,l.easingOpen,function(){e(r).removeClass(o+"_animating"),e(n).removeClass(o+"_animating"),a||l.afterOpen(r)}),t.attr("aria-hidden","false"),d.attr("tabindex","0"),s._setVisAttr(t,!1)):(t.addClass(o+"_hidden"),a||l.beforeClose(r),t.slideUp(u,this.settings.easingClose,function(){t.attr("aria-hidden","true"),d.attr("tabindex","-1"),s._setVisAttr(t,!0),t.hide(),e(r).removeClass(o+"_animating"),e(n).removeClass(o+"_animating"),a?"init"==r&&l.init():l.afterClose(r)}))},i.prototype._setVisAttr=function(t,n){var i=this,r=t.children("li").children("ul").not("."+o+"_hidden");n?r.each(function(){var t=e(this);t.attr("aria-hidden","true");var r=i._getActionItems(t);r.attr("tabindex","-1"),i._setVisAttr(t,n)}):r.each(function(){var t=e(this);t.attr("aria-hidden","false");var r=i._getActionItems(t);r.attr("tabindex","0"),i._setVisAttr(t,n)})},i.prototype._getActionItems=function(e){var t=e.data("menu");if(!t){t={};var n=e.children("li"),i=n.find("a");t.links=i.add(n.find("."+o+"_item")),e.data("menu",t)}return t.links},i.prototype._outlines=function(t){t?e("."+o+"_item, ."+o+"_btn").css("outline",""):e("."+o+"_item, ."+o+"_btn").css("outline","none")},i.prototype.toggle=function(){var e=this;e._menuToggle()},i.prototype.open=function(){var e=this;e.btn.hasClass(o+"_collapsed")&&e._menuToggle()},i.prototype.close=function(){var e=this;e.btn.hasClass(o+"_open")&&e._menuToggle()},e.fn[a]=function(t){var n=arguments;if(void 0===t||"object"==typeof t)return this.each(function(){e.data(this,"plugin_"+a)||e.data(this,"plugin_"+a,new i(this,t))});if("string"==typeof t&&"_"!==t[0]&&"init"!==t){var r;return this.each(function(){var o=e.data(this,"plugin_"+a);o instanceof i&&"function"==typeof o[t]&&(r=o[t].apply(o,Array.prototype.slice.call(n,1)))}),void 0!==r?r:this}}}(jQuery,document,window),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(t){return e(t,window,document)}):"object"==typeof exports?module.exports=function(t,n){return t||(t=window),n||(n="undefined"!=typeof window?require("jquery"):require("jquery")(t)),e(n,t,t.document)}:e(jQuery,window,document)}(function(e,t,n,i){"use strict";function r(t){var n,i,a="a aa ai ao as b fn i m o s ",o={};e.each(t,function(e,s){n=e.match(/^([^A-Z]+?)([A-Z])/),n&&a.indexOf(n[1]+" ")!==-1&&(i=e.replace(n[0],n[2].toLowerCase()),o[i]=e,"o"===n[1]&&r(t[e]))}),t._hungarianMap=o}function a(t,n,o){t._hungarianMap||r(t);var s;e.each(n,function(r,l){s=t._hungarianMap[r],s===i||!o&&n[s]!==i||("o"===s.charAt(0)?(n[s]||(n[s]={}),e.extend(!0,n[s],n[r]),a(t[s],n[s],o)):n[s]=n[r])})}function o(e){var t=Ve.defaults.oLanguage,n=e.sZeroRecords;!e.sEmptyTable&&n&&"No data available in table"===t.sEmptyTable&&Ae(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&n&&"Loading..."===t.sLoadingRecords&&Ae(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var i=e.sDecimal;i&&Re(i)}function s(e){mt(e,"ordering","bSort"),mt(e,"orderMulti","bSortMulti"),mt(e,"orderClasses","bSortClasses"),mt(e,"orderCellsTop","bSortCellsTop"),mt(e,"order","aaSorting"),mt(e,"orderFixed","aaSortingFixed"),mt(e,"paging","bPaginate"),mt(e,"pagingType","sPaginationType"),mt(e,"pageLength","iDisplayLength"),mt(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,i=t.length;n<i;n++)t[n]&&a(Ve.models.oSearch,t[n])}function l(t){mt(t,"orderable","bSortable"),mt(t,"orderData","aDataSort"),mt(t,"orderSequence","asSorting"),mt(t,"orderDataType","sortDataType");var n=t.aDataSort;n&&!e.isArray(n)&&(t.aDataSort=[n])}function d(t){if(!Ve.__browser){var n={};Ve.__browser=n;var i=e("<div/>").css({position:"fixed",top:0,left:0,height:1,width:1,overflow:"hidden"}).append(e("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(e("<div/>").css({width:"100%",height:10}))).appendTo("body"),r=i.children(),a=r.children();n.barWidth=r[0].offsetWidth-r[0].clientWidth,n.bScrollOversize=100===a[0].offsetWidth&&100!==r[0].clientWidth,n.bScrollbarLeft=1!==Math.round(a.offset().left),n.bBounding=!!i[0].getBoundingClientRect().width,i.remove()}e.extend(t.oBrowser,Ve.__browser),t.oScroll.iBarWidth=Ve.__browser.barWidth}function u(e,t,n,r,a,o){var s,l=r,d=!1;for(n!==i&&(s=n,d=!0);l!==a;)e.hasOwnProperty(l)&&(s=d?t(s,e[l],l,e):e[l],d=!0,l+=o);return s}function c(t,i){var r=Ve.defaults.column,a=t.aoColumns.length,o=e.extend({},Ve.models.oColumn,r,{nTh:i?i:n.createElement("th"),sTitle:r.sTitle?r.sTitle:i?i.innerHTML:"",aDataSort:r.aDataSort?r.aDataSort:[a],mData:r.mData?r.mData:a,idx:a});t.aoColumns.push(o);var s=t.aoPreSearchCols;s[a]=e.extend({},Ve.models.oSearch,s[a]),h(t,a,e(i).data())}function h(t,n,r){var o=t.aoColumns[n],s=t.oClasses,d=e(o.nTh);if(!o.sWidthOrig){o.sWidthOrig=d.attr("width")||null;var u=(d.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);u&&(o.sWidthOrig=u[1])}r!==i&&null!==r&&(l(r),a(Ve.defaults.column,r),r.mDataProp===i||r.mData||(r.mData=r.mDataProp),r.sType&&(o._sManualType=r.sType),r.className&&!r.sClass&&(r.sClass=r.className),e.extend(o,r),Ae(o,r,"sWidth","sWidthOrig"),r.iDataSort!==i&&(o.aDataSort=[r.iDataSort]),Ae(o,r,"aDataSort"));var c=o.mData,h=S(c),p=o.mRender?S(o.mRender):null,m=function(e){return"string"==typeof e&&e.indexOf("@")!==-1};o._bAttrSrc=e.isPlainObject(c)&&(m(c.sort)||m(c.type)||m(c.filter)),o._setter=null,o.fnGetData=function(e,t,n){var r=h(e,t,i,n);return p&&t?p(r,t,e,n):r},o.fnSetData=function(e,t,n){return Y(c)(e,t,n)},"number"!=typeof c&&(t._rowReadObject=!0),t.oFeatures.bSort||(o.bSortable=!1,d.addClass(s.sSortableNone));var f=e.inArray("asc",o.asSorting)!==-1,_=e.inArray("desc",o.asSorting)!==-1;o.bSortable&&(f||_)?f&&!_?(o.sSortingClass=s.sSortableAsc,o.sSortingClassJUI=s.sSortJUIAscAllowed):!f&&_?(o.sSortingClass=s.sSortableDesc,o.sSortingClassJUI=s.sSortJUIDescAllowed):(o.sSortingClass=s.sSortable,o.sSortingClassJUI=s.sSortJUI):(o.sSortingClass=s.sSortableNone,o.sSortingClassJUI="")}function p(e){if(e.oFeatures.bAutoWidth!==!1){var t=e.aoColumns;ye(e);for(var n=0,i=t.length;n<i;n++)t[n].nTh.style.width=t[n].sWidth}var r=e.oScroll;""===r.sY&&""===r.sX||fe(e),Oe(e,null,"column-sizing",[e])}function m(e,t){var n=y(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function f(t,n){var i=y(t,"bVisible"),r=e.inArray(n,i);return r!==-1?r:null}function _(t){var n=0;return e.each(t.aoColumns,function(t,i){i.bVisible&&"none"!==e(i.nTh).css("display")&&n++}),n}function y(t,n){var i=[];return e.map(t.aoColumns,function(e,t){e[n]&&i.push(t)}),i}function g(e){var t,n,r,a,o,s,l,d,u,c=e.aoColumns,h=e.aoData,p=Ve.ext.type.detect;for(t=0,n=c.length;t<n;t++)if(l=c[t],u=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(r=0,a=p.length;r<a;r++){for(o=0,s=h.length;o<s&&(u[o]===i&&(u[o]=D(e,o,t,"type")),d=p[r](u[o],e),d||r===p.length-1)&&"html"!==d;o++);if(d){l.sType=d;break}}l.sType||(l.sType="string")}}function v(t,n,r,a){var o,s,l,d,u,h,p,m=t.aoColumns;if(n)for(o=n.length-1;o>=0;o--){p=n[o];var f=p.targets!==i?p.targets:p.aTargets;for(e.isArray(f)||(f=[f]),l=0,d=f.length;l<d;l++)if("number"==typeof f[l]&&f[l]>=0){for(;m.length<=f[l];)c(t);a(f[l],p)}else if("number"==typeof f[l]&&f[l]<0)a(m.length+f[l],p);else if("string"==typeof f[l])for(u=0,h=m.length;u<h;u++)("_all"==f[l]||e(m[u].nTh).hasClass(f[l]))&&a(u,p)}if(r)for(o=0,s=r.length;o<s;o++)a(o,r[o])}function M(t,n,r,a){var o=t.aoData.length,s=e.extend(!0,{},Ve.models.oRow,{src:r?"dom":"data",idx:o});s._aData=n,t.aoData.push(s);for(var l=t.aoColumns,d=0,u=l.length;d<u;d++)l[d].sType=null;t.aiDisplayMaster.push(o);var c=t.rowIdFn(n);return c!==i&&(t.aIds[c]=s),!r&&t.oFeatures.bDeferRender||P(t,o,r,a),o}function w(t,n){var i;return n instanceof e||(n=e(n)),n.map(function(e,n){return i=A(t,n),M(t,i.data,n,i.cells)})}function b(e,t){return t._DT_RowIndex!==i?t._DT_RowIndex:null}function L(t,n,i){return e.inArray(i,t.aoData[n].anCells);
}function D(e,t,n,r){var a=e.iDraw,o=e.aoColumns[n],s=e.aoData[t]._aData,l=o.sDefaultContent,d=o.fnGetData(s,r,{settings:e,row:t,col:n});if(d===i)return e.iDrawError!=a&&null===l&&(He(e,0,"Requested unknown parameter "+("function"==typeof o.mData?"{function}":"'"+o.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=a),l;if(d!==s&&null!==d||null===l||r===i){if("function"==typeof d)return d.call(s)}else d=l;return null===d&&"display"==r?"":d}function k(e,t,n,i){var r=e.aoColumns[n],a=e.aoData[t]._aData;r.fnSetData(a,i,{settings:e,row:t,col:n})}function T(t){return e.map(t.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\./g,".")})}function S(t){if(e.isPlainObject(t)){var n={};return e.each(t,function(e,t){t&&(n[e]=S(t))}),function(e,t,r,a){var o=n[t]||n._;return o!==i?o(e,t,r,a):e}}if(null===t)return function(e){return e};if("function"==typeof t)return function(e,n,i,r){return t(e,n,i,r)};if("string"!=typeof t||t.indexOf(".")===-1&&t.indexOf("[")===-1&&t.indexOf("(")===-1)return function(e,n){return e[t]};var r=function(t,n,a){var o,s,l,d;if(""!==a)for(var u=T(a),c=0,h=u.length;c<h;c++){if(o=u[c].match(ft),s=u[c].match(_t),o){if(u[c]=u[c].replace(ft,""),""!==u[c]&&(t=t[u[c]]),l=[],u.splice(0,c+1),d=u.join("."),e.isArray(t))for(var p=0,m=t.length;p<m;p++)l.push(r(t[p],n,d));var f=o[0].substring(1,o[0].length-1);t=""===f?l:l.join(f);break}if(s)u[c]=u[c].replace(_t,""),t=t[u[c]]();else{if(null===t||t[u[c]]===i)return i;t=t[u[c]]}}return t};return function(e,n){return r(e,n,t)}}function Y(t){if(e.isPlainObject(t))return Y(t._);if(null===t)return function(){};if("function"==typeof t)return function(e,n,i){t(e,"set",n,i)};if("string"!=typeof t||t.indexOf(".")===-1&&t.indexOf("[")===-1&&t.indexOf("(")===-1)return function(e,n){e[t]=n};var n=function(t,r,a){for(var o,s,l,d,u,c=T(a),h=c[c.length-1],p=0,m=c.length-1;p<m;p++){if(s=c[p].match(ft),l=c[p].match(_t),s){if(c[p]=c[p].replace(ft,""),t[c[p]]=[],o=c.slice(),o.splice(0,p+1),u=o.join("."),e.isArray(r))for(var f=0,_=r.length;f<_;f++)d={},n(d,r[f],u),t[c[p]].push(d);else t[c[p]]=r;return}l&&(c[p]=c[p].replace(_t,""),t=t[c[p]](r)),null!==t[c[p]]&&t[c[p]]!==i||(t[c[p]]={}),t=t[c[p]]}h.match(_t)?t=t[h.replace(_t,"")](r):t[h.replace(ft,"")]=r};return function(e,i){return n(e,i,t)}}function x(e){return lt(e.aoData,"_aData")}function C(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function E(e,t,n){for(var r=-1,a=0,o=e.length;a<o;a++)e[a]==t?r=a:e[a]>t&&e[a]--;r!=-1&&n===i&&e.splice(r,1)}function H(e,t,n,r){var a,o,s=e.aoData[t],l=function(n,i){for(;n.childNodes.length;)n.removeChild(n.firstChild);n.innerHTML=D(e,t,i,"display")};if("dom"!==n&&(n&&"auto"!==n||"dom"!==s.src)){var d=s.anCells;if(d)if(r!==i)l(d[r],r);else for(a=0,o=d.length;a<o;a++)l(d[a],a)}else s._aData=A(e,s,r,r===i?i:s._aData).data;s._aSortData=null,s._aFilterData=null;var u=e.aoColumns;if(r!==i)u[r].sType=null;else{for(a=0,o=u.length;a<o;a++)u[a].sType=null;j(e,s)}}function A(t,n,r,a){var o,s,l,d=[],u=n.firstChild,c=0,h=t.aoColumns,p=t._rowReadObject;a=a!==i?a:p?{}:[];var m=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(n!==-1){var i=e.substring(n+1),r=Y(e);r(a,t.getAttribute(i))}}},f=function(t){if(r===i||r===c)if(s=h[c],l=e.trim(t.innerHTML),s&&s._bAttrSrc){var n=Y(s.mData._);n(a,l),m(s.mData.sort,t),m(s.mData.type,t),m(s.mData.filter,t)}else p?(s._setter||(s._setter=Y(s.mData)),s._setter(a,l)):a[c]=l;c++};if(u)for(;u;)o=u.nodeName.toUpperCase(),"TD"!=o&&"TH"!=o||(f(u),d.push(u)),u=u.nextSibling;else{d=n.anCells;for(var _=0,y=d.length;_<y;_++)f(d[_])}var g=n.firstChild?n:n.nTr;if(g){var v=g.getAttribute("id");v&&Y(t.rowId)(a,v)}return{data:a,cells:d}}function P(t,i,r,a){var o,s,l,d,u,c=t.aoData[i],h=c._aData,p=[];if(null===c.nTr){for(o=r||n.createElement("tr"),c.nTr=o,c.anCells=p,o._DT_RowIndex=i,j(t,c),d=0,u=t.aoColumns.length;d<u;d++)l=t.aoColumns[d],s=r?a[d]:n.createElement(l.sCellType),s._DT_CellIndex={row:i,column:d},p.push(s),r&&!l.mRender&&l.mData===d||e.isPlainObject(l.mData)&&l.mData._===d+".display"||(s.innerHTML=D(t,i,d,"display")),l.sClass&&(s.className+=" "+l.sClass),l.bVisible&&!r?o.appendChild(s):!l.bVisible&&r&&s.parentNode.removeChild(s),l.fnCreatedCell&&l.fnCreatedCell.call(t.oInstance,s,D(t,i,d),h,i,d);Oe(t,"aoRowCreatedCallback",null,[o,h,i])}c.nTr.setAttribute("role","row")}function j(t,n){var i=n.nTr,r=n._aData;if(i){var a=t.rowIdFn(r);if(a&&(i.id=a),r.DT_RowClass){var o=r.DT_RowClass.split(" ");n.__rowc=n.__rowc?pt(n.__rowc.concat(o)):o,e(i).removeClass(n.__rowc.join(" ")).addClass(r.DT_RowClass)}r.DT_RowAttr&&e(i).attr(r.DT_RowAttr),r.DT_RowData&&e(i).data(r.DT_RowData)}}function I(t){var n,i,r,a,o,s=t.nTHead,l=t.nTFoot,d=0===e("th, td",s).length,u=t.oClasses,c=t.aoColumns;for(d&&(a=e("<tr/>").appendTo(s)),n=0,i=c.length;n<i;n++)o=c[n],r=e(o.nTh).addClass(o.sClass),d&&r.appendTo(a),t.oFeatures.bSort&&(r.addClass(o.sSortingClass),o.bSortable!==!1&&(r.attr("tabindex",t.iTabIndex).attr("aria-controls",t.sTableId),Te(t,o.nTh,n))),o.sTitle!=r[0].innerHTML&&r.html(o.sTitle),Fe(t,"header")(t,r,o,u);if(d&&$(t.aoHeader,s),e(s).find(">tr").attr("role","row"),e(s).find(">tr>th, >tr>td").addClass(u.sHeaderTH),e(l).find(">tr>th, >tr>td").addClass(u.sFooterTH),null!==l){var h=t.aoFooter[0];for(n=0,i=h.length;n<i;n++)o=c[n],o.nTf=h[n].cell,o.sClass&&e(o.nTf).addClass(o.sClass)}}function O(t,n,r){var a,o,s,l,d,u,c,h,p,m=[],f=[],_=t.aoColumns.length;if(n){for(r===i&&(r=!1),a=0,o=n.length;a<o;a++){for(m[a]=n[a].slice(),m[a].nTr=n[a].nTr,s=_-1;s>=0;s--)t.aoColumns[s].bVisible||r||m[a].splice(s,1);f.push([])}for(a=0,o=m.length;a<o;a++){if(c=m[a].nTr)for(;u=c.firstChild;)c.removeChild(u);for(s=0,l=m[a].length;s<l;s++)if(h=1,p=1,f[a][s]===i){for(c.appendChild(m[a][s].cell),f[a][s]=1;m[a+h]!==i&&m[a][s].cell==m[a+h][s].cell;)f[a+h][s]=1,h++;for(;m[a][s+p]!==i&&m[a][s].cell==m[a][s+p].cell;){for(d=0;d<h;d++)f[a+d][s+p]=1;p++}e(m[a][s].cell).attr("rowspan",h).attr("colspan",p)}}}}function z(t){var n=Oe(t,"aoPreDrawCallback","preDraw",[t]);if(e.inArray(!1,n)!==-1)return void pe(t,!1);var r=[],a=0,o=t.asStripeClasses,s=o.length,l=(t.aoOpenRows.length,t.oLanguage),d=t.iInitDisplayStart,u="ssp"==We(t),c=t.aiDisplay;t.bDrawing=!0,d!==i&&d!==-1&&(t._iDisplayStart=u?d:d>=t.fnRecordsDisplay()?0:d,t.iInitDisplayStart=-1);var h=t._iDisplayStart,p=t.fnDisplayEnd();if(t.bDeferLoading)t.bDeferLoading=!1,t.iDraw++,pe(t,!1);else if(u){if(!t.bDestroying&&!q(t))return}else t.iDraw++;if(0!==c.length)for(var m=u?0:h,f=u?t.aoData.length:p,y=m;y<f;y++){var g=c[y],v=t.aoData[g];null===v.nTr&&P(t,g);var M=v.nTr;if(0!==s){var w=o[a%s];v._sRowStripe!=w&&(e(M).removeClass(v._sRowStripe).addClass(w),v._sRowStripe=w)}Oe(t,"aoRowCallback",null,[M,v._aData,a,y]),r.push(M),a++}else{var b=l.sZeroRecords;1==t.iDraw&&"ajax"==We(t)?b=l.sLoadingRecords:l.sEmptyTable&&0===t.fnRecordsTotal()&&(b=l.sEmptyTable),r[0]=e("<tr/>",{"class":s?o[0]:""}).append(e("<td />",{valign:"top",colSpan:_(t),"class":t.oClasses.sRowEmpty}).html(b))[0]}Oe(t,"aoHeaderCallback","header",[e(t.nTHead).children("tr")[0],x(t),h,p,c]),Oe(t,"aoFooterCallback","footer",[e(t.nTFoot).children("tr")[0],x(t),h,p,c]);var L=e(t.nTBody);L.children().detach(),L.append(e(r)),Oe(t,"aoDrawCallback","draw",[t]),t.bSorted=!1,t.bFiltered=!1,t.bDrawing=!1}function F(e,t){var n=e.oFeatures,i=n.bSort,r=n.bFilter;i&&Le(e),r?G(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),t!==!0&&(e._iDisplayStart=0),e._drawHold=t,z(e),e._drawHold=!1}function W(t){var n=t.oClasses,i=e(t.nTable),r=e("<div/>").insertBefore(i),a=t.oFeatures,o=e("<div/>",{id:t.sTableId+"_wrapper","class":n.sWrapper+(t.nTFoot?"":" "+n.sNoFooter)});t.nHolding=r[0],t.nTableWrapper=o[0],t.nTableReinsertBefore=t.nTable.nextSibling;for(var s,l,d,u,c,h,p=t.sDom.split(""),m=0;m<p.length;m++){if(s=null,l=p[m],"<"==l){if(d=e("<div/>")[0],u=p[m+1],"'"==u||'"'==u){for(c="",h=2;p[m+h]!=u;)c+=p[m+h],h++;if("H"==c?c=n.sJUIHeader:"F"==c&&(c=n.sJUIFooter),c.indexOf(".")!=-1){var f=c.split(".");d.id=f[0].substr(1,f[0].length-1),d.className=f[1]}else"#"==c.charAt(0)?d.id=c.substr(1,c.length-1):d.className=c;m+=h}o.append(d),o=e(d)}else if(">"==l)o=o.parent();else if("l"==l&&a.bPaginate&&a.bLengthChange)s=de(t);else if("f"==l&&a.bFilter)s=V(t);else if("r"==l&&a.bProcessing)s=he(t);else if("t"==l)s=me(t);else if("i"==l&&a.bInfo)s=ie(t);else if("p"==l&&a.bPaginate)s=ue(t);else if(0!==Ve.ext.feature.length)for(var _=Ve.ext.feature,y=0,g=_.length;y<g;y++)if(l==_[y].cFeature){s=_[y].fnInit(t);break}if(s){var v=t.aanFeatures;v[l]||(v[l]=[]),v[l].push(s),o.append(s)}}r.replaceWith(o),t.nHolding=null}function $(t,n){var i,r,a,o,s,l,d,u,c,h,p,m=e(n).children("tr"),f=function(e,t,n){for(var i=e[t];i[n];)n++;return n};for(t.splice(0,t.length),a=0,l=m.length;a<l;a++)t.push([]);for(a=0,l=m.length;a<l;a++)for(i=m[a],u=0,r=i.firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(c=1*r.getAttribute("colspan"),h=1*r.getAttribute("rowspan"),c=c&&0!==c&&1!==c?c:1,h=h&&0!==h&&1!==h?h:1,d=f(t,a,u),p=1===c,s=0;s<c;s++)for(o=0;o<h;o++)t[a+o][d+s]={cell:r,unique:p},t[a+o].nTr=i;r=r.nextSibling}}function R(e,t,n){var i=[];n||(n=e.aoHeader,t&&(n=[],$(n,t)));for(var r=0,a=n.length;r<a;r++)for(var o=0,s=n[r].length;o<s;o++)!n[r][o].unique||i[o]&&e.bSortCellsTop||(i[o]=n[r][o].cell);return i}function N(t,n,i){if(Oe(t,"aoServerParams","serverParams",[n]),n&&e.isArray(n)){var r={},a=/(.*?)\[\]$/;e.each(n,function(e,t){var n=t.name.match(a);if(n){var i=n[0];r[i]||(r[i]=[]),r[i].push(t.value)}else r[t.name]=t.value}),n=r}var o,s=t.ajax,l=t.oInstance,d=function(e){Oe(t,null,"xhr",[t,e,t.jqXHR]),i(e)};if(e.isPlainObject(s)&&s.data){o=s.data;var u=e.isFunction(o)?o(n,t):o;n=e.isFunction(o)&&u?u:e.extend(!0,n,u),delete s.data}var c={data:n,success:function(e){var n=e.error||e.sError;n&&He(t,0,n),t.json=e,d(e)},dataType:"json",cache:!1,type:t.sServerMethod,error:function(n,i,r){var a=Oe(t,null,"xhr",[t,null,t.jqXHR]);e.inArray(!0,a)===-1&&("parsererror"==i?He(t,0,"Invalid JSON response",1):4===n.readyState&&He(t,0,"Ajax error",7)),pe(t,!1)}};t.oAjaxData=n,Oe(t,null,"preXhr",[t,n]),t.fnServerData?t.fnServerData.call(l,t.sAjaxSource,e.map(n,function(e,t){return{name:t,value:e}}),d,t):t.sAjaxSource||"string"==typeof s?t.jqXHR=e.ajax(e.extend(c,{url:s||t.sAjaxSource})):e.isFunction(s)?t.jqXHR=s.call(l,n,d,t):(t.jqXHR=e.ajax(e.extend(c,s)),s.data=o)}function q(e){return!e.bAjaxDataGet||(e.iDraw++,pe(e,!0),N(e,B(e),function(t){U(e,t)}),!1)}function B(t){var n,i,r,a,o=t.aoColumns,s=o.length,l=t.oFeatures,d=t.oPreviousSearch,u=t.aoPreSearchCols,c=[],h=be(t),p=t._iDisplayStart,m=l.bPaginate!==!1?t._iDisplayLength:-1,f=function(e,t){c.push({name:e,value:t})};f("sEcho",t.iDraw),f("iColumns",s),f("sColumns",lt(o,"sName").join(",")),f("iDisplayStart",p),f("iDisplayLength",m);var _={draw:t.iDraw,columns:[],order:[],start:p,length:m,search:{value:d.sSearch,regex:d.bRegex}};for(n=0;n<s;n++)r=o[n],a=u[n],i="function"==typeof r.mData?"function":r.mData,_.columns.push({data:i,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:a.sSearch,regex:a.bRegex}}),f("mDataProp_"+n,i),l.bFilter&&(f("sSearch_"+n,a.sSearch),f("bRegex_"+n,a.bRegex),f("bSearchable_"+n,r.bSearchable)),l.bSort&&f("bSortable_"+n,r.bSortable);l.bFilter&&(f("sSearch",d.sSearch),f("bRegex",d.bRegex)),l.bSort&&(e.each(h,function(e,t){_.order.push({column:t.col,dir:t.dir}),f("iSortCol_"+e,t.col),f("sSortDir_"+e,t.dir)}),f("iSortingCols",h.length));var y=Ve.ext.legacy.ajax;return null===y?t.sAjaxSource?c:_:y?c:_}function U(e,t){var n=function(e,n){return t[e]!==i?t[e]:t[n]},r=J(e,t),a=n("sEcho","draw"),o=n("iTotalRecords","recordsTotal"),s=n("iTotalDisplayRecords","recordsFiltered");if(a){if(1*a<e.iDraw)return;e.iDraw=1*a}C(e),e._iRecordsTotal=parseInt(o,10),e._iRecordsDisplay=parseInt(s,10);for(var l=0,d=r.length;l<d;l++)M(e,r[l]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,z(e),e._bInitComplete||se(e,t),e.bAjaxDataGet=!0,pe(e,!1)}function J(t,n){var r=e.isPlainObject(t.ajax)&&t.ajax.dataSrc!==i?t.ajax.dataSrc:t.sAjaxDataProp;return"data"===r?n.aaData||n[r]:""!==r?S(r)(n):n}function V(t){var i=t.oClasses,r=t.sTableId,a=t.oLanguage,o=t.oPreviousSearch,s=t.aanFeatures,l='<input type="search" class="'+i.sFilterInput+'"/>',d=a.sSearch;d=d.match(/_INPUT_/)?d.replace("_INPUT_",l):d+l;var u=e("<div/>",{id:s.f?null:r+"_filter","class":i.sFilter}).append(e("<label/>").append(d)),c=function(){var e=(s.f,this.value?this.value:"");e!=o.sSearch&&(G(t,{sSearch:e,bRegex:o.bRegex,bSmart:o.bSmart,bCaseInsensitive:o.bCaseInsensitive}),t._iDisplayStart=0,z(t))},h=null!==t.searchDelay?t.searchDelay:"ssp"===We(t)?400:0,p=e("input",u).val(o.sSearch).attr("placeholder",a.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT",h?wt(c,h):c).bind("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",r);return e(t.nTable).on("search.dt.DT",function(e,i){if(t===i)try{p[0]!==n.activeElement&&p.val(o.sSearch)}catch(r){}}),u[0]}function G(e,t,n){var r=e.oPreviousSearch,a=e.aoPreSearchCols,o=function(e){r.sSearch=e.sSearch,r.bRegex=e.bRegex,r.bSmart=e.bSmart,r.bCaseInsensitive=e.bCaseInsensitive},s=function(e){return e.bEscapeRegex!==i?!e.bEscapeRegex:e.bRegex};if(g(e),"ssp"!=We(e)){Z(e,t.sSearch,n,s(t),t.bSmart,t.bCaseInsensitive),o(t);for(var l=0;l<a.length;l++)Q(e,a[l].sSearch,l,s(a[l]),a[l].bSmart,a[l].bCaseInsensitive);X(e)}else o(t);e.bFiltered=!0,Oe(e,null,"search",[e])}function X(t){for(var n,i,r=Ve.ext.search,a=t.aiDisplay,o=0,s=r.length;o<s;o++){for(var l=[],d=0,u=a.length;d<u;d++)i=a[d],n=t.aoData[i],r[o](t,n._aFilterData,i,n._aData,d)&&l.push(i);a.length=0,e.merge(a,l)}}function Q(e,t,n,i,r,a){if(""!==t)for(var o,s=e.aiDisplay,l=K(t,i,r,a),d=s.length-1;d>=0;d--)o=e.aoData[s[d]]._aFilterData[n],l.test(o)||s.splice(d,1)}function Z(e,t,n,i,r,a){var o,s,l,d=K(t,i,r,a),u=e.oPreviousSearch.sSearch,c=e.aiDisplayMaster;if(0!==Ve.ext.search.length&&(n=!0),s=ee(e),t.length<=0)e.aiDisplay=c.slice();else for((s||n||u.length>t.length||0!==t.indexOf(u)||e.bSorted)&&(e.aiDisplay=c.slice()),o=e.aiDisplay,l=o.length-1;l>=0;l--)d.test(e.aoData[o[l]]._sFilterRow)||o.splice(l,1)}function K(t,n,i,r){if(t=n?t:yt(t),i){var a=e.map(t.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")});t="^(?=.*?"+a.join(")(?=.*?")+").*$"}return new RegExp(t,r?"i":"")}function ee(e){var t,n,i,r,a,o,s,l,d=e.aoColumns,u=Ve.ext.type.search,c=!1;for(n=0,r=e.aoData.length;n<r;n++)if(l=e.aoData[n],!l._aFilterData){for(o=[],i=0,a=d.length;i<a;i++)t=d[i],t.bSearchable?(s=D(e,n,i,"filter"),u[t.sType]&&(s=u[t.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&s.indexOf("&")!==-1&&(gt.innerHTML=s,s=vt?gt.textContent:gt.innerText),s.replace&&(s=s.replace(/[\r\n]/g,"")),o.push(s);l._aFilterData=o,l._sFilterRow=o.join("  "),c=!0}return c}function te(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function ne(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function ie(t){var n=t.sTableId,i=t.aanFeatures.i,r=e("<div/>",{"class":t.oClasses.sInfo,id:i?null:n+"_info"});return i||(t.aoDrawCallback.push({fn:re,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),e(t.nTable).attr("aria-describedby",n+"_info")),r[0]}function re(t){var n=t.aanFeatures.i;if(0!==n.length){var i=t.oLanguage,r=t._iDisplayStart+1,a=t.fnDisplayEnd(),o=t.fnRecordsTotal(),s=t.fnRecordsDisplay(),l=s?i.sInfo:i.sInfoEmpty;s!==o&&(l+=" "+i.sInfoFiltered),l+=i.sInfoPostFix,l=ae(t,l);var d=i.fnInfoCallback;null!==d&&(l=d.call(t.oInstance,t,r,a,o,s,l)),e(n).html(l)}}function ae(e,t){var n=e.fnFormatNumber,i=e._iDisplayStart+1,r=e._iDisplayLength,a=e.fnRecordsDisplay(),o=r===-1;return t.replace(/_START_/g,n.call(e,i)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,a)).replace(/_PAGE_/g,n.call(e,o?1:Math.ceil(i/r))).replace(/_PAGES_/g,n.call(e,o?1:Math.ceil(a/r)))}function oe(e){var t,n,i,r=e.iInitDisplayStart,a=e.aoColumns,o=e.oFeatures,s=e.bDeferLoading;if(!e.bInitialised)return void setTimeout(function(){oe(e)},200);for(W(e),I(e),O(e,e.aoHeader),O(e,e.aoFooter),pe(e,!0),o.bAutoWidth&&ye(e),t=0,n=a.length;t<n;t++)i=a[t],i.sWidth&&(i.nTh.style.width=we(i.sWidth));Oe(e,null,"preInit",[e]),F(e);var l=We(e);("ssp"!=l||s)&&("ajax"==l?N(e,[],function(n){var i=J(e,n);for(t=0;t<i.length;t++)M(e,i[t]);e.iInitDisplayStart=r,F(e),pe(e,!1),se(e,n)},e):(pe(e,!1),se(e)))}function se(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&p(e),Oe(e,null,"plugin-init",[e,t]),Oe(e,"aoInitComplete","init",[e,t])}function le(e,t){var n=parseInt(t,10);e._iDisplayLength=n,ze(e),Oe(e,null,"length",[e,n])}function de(t){for(var n=t.oClasses,i=t.sTableId,r=t.aLengthMenu,a=e.isArray(r[0]),o=a?r[0]:r,s=a?r[1]:r,l=e("<select/>",{name:i+"_length","aria-controls":i,"class":n.sLengthSelect}),d=0,u=o.length;d<u;d++)l[0][d]=new Option(s[d],o[d]);var c=e("<div><label/></div>").addClass(n.sLength);return t.aanFeatures.l||(c[0].id=i+"_length"),c.children().append(t.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),e("select",c).val(t._iDisplayLength).bind("change.DT",function(n){le(t,e(this).val()),z(t)}),e(t.nTable).bind("length.dt.DT",function(n,i,r){t===i&&e("select",c).val(r)}),c[0]}function ue(t){var n=t.sPaginationType,i=Ve.ext.pager[n],r="function"==typeof i,a=function(e){z(e)},o=e("<div/>").addClass(t.oClasses.sPaging+n)[0],s=t.aanFeatures;return r||i.fnInit(t,o,a),s.p||(o.id=t.sTableId+"_paginate",t.aoDrawCallback.push({fn:function(e){if(r){var t,n,o=e._iDisplayStart,l=e._iDisplayLength,d=e.fnRecordsDisplay(),u=l===-1,c=u?0:Math.ceil(o/l),h=u?1:Math.ceil(d/l),p=i(c,h);for(t=0,n=s.p.length;t<n;t++)Fe(e,"pageButton")(e,s.p[t],t,p,c,h)}else i.fnUpdate(e,a)},sName:"pagination"})),o}function ce(e,t,n){var i=e._iDisplayStart,r=e._iDisplayLength,a=e.fnRecordsDisplay();0===a||r===-1?i=0:"number"==typeof t?(i=t*r,i>a&&(i=0)):"first"==t?i=0:"previous"==t?(i=r>=0?i-r:0,i<0&&(i=0)):"next"==t?i+r<a&&(i+=r):"last"==t?i=Math.floor((a-1)/r)*r:He(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==i;return e._iDisplayStart=i,o&&(Oe(e,null,"page",[e]),n&&z(e)),o}function he(t){return e("<div/>",{id:t.aanFeatures.r?null:t.sTableId+"_processing","class":t.oClasses.sProcessing}).html(t.oLanguage.sProcessing).insertBefore(t.nTable)[0]}function pe(t,n){t.oFeatures.bProcessing&&e(t.aanFeatures.r).css("display",n?"block":"none"),Oe(t,null,"processing",[t,n])}function me(t){var n=e(t.nTable);n.attr("role","grid");var i=t.oScroll;if(""===i.sX&&""===i.sY)return t.nTable;var r=i.sX,a=i.sY,o=t.oClasses,s=n.children("caption"),l=s.length?s[0]._captionSide:null,d=e(n[0].cloneNode(!1)),u=e(n[0].cloneNode(!1)),c=n.children("tfoot"),h="<div/>",p=function(e){return e?we(e):null};c.length||(c=null);var m=e(h,{"class":o.sScrollWrapper}).append(e(h,{"class":o.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?p(r):"100%"}).append(e(h,{"class":o.sScrollHeadInner}).css({"box-sizing":"content-box",width:i.sXInner||"100%"}).append(d.removeAttr("id").css("margin-left",0).append("top"===l?s:null).append(n.children("thead"))))).append(e(h,{"class":o.sScrollBody}).css({position:"relative",overflow:"auto",width:p(r)}).append(n));c&&m.append(e(h,{"class":o.sScrollFoot}).css({overflow:"hidden",border:0,width:r?p(r):"100%"}).append(e(h,{"class":o.sScrollFootInner}).append(u.removeAttr("id").css("margin-left",0).append("bottom"===l?s:null).append(n.children("tfoot")))));var f=m.children(),_=f[0],y=f[1],g=c?f[2]:null;return r&&e(y).on("scroll.DT",function(e){var t=this.scrollLeft;_.scrollLeft=t,c&&(g.scrollLeft=t)}),e(y).css(a&&i.bCollapse?"max-height":"height",a),t.nScrollHead=_,t.nScrollBody=y,t.nScrollFoot=g,t.aoDrawCallback.push({fn:fe,sName:"scrolling"}),m[0]}function fe(t){var n,r,a,o,s,l,d,u,c,h=t.oScroll,f=h.sX,_=h.sXInner,y=h.sY,g=h.iBarWidth,v=e(t.nScrollHead),M=v[0].style,w=v.children("div"),b=w[0].style,L=w.children("table"),D=t.nScrollBody,k=e(D),T=D.style,S=e(t.nScrollFoot),Y=S.children("div"),x=Y.children("table"),C=e(t.nTHead),E=e(t.nTable),H=E[0],A=H.style,P=t.nTFoot?e(t.nTFoot):null,j=t.oBrowser,I=j.bScrollOversize,O=lt(t.aoColumns,"nTh"),z=[],F=[],W=[],$=[],N=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},q=D.scrollHeight>D.clientHeight;if(t.scrollBarVis!==q&&t.scrollBarVis!==i)return t.scrollBarVis=q,void p(t);t.scrollBarVis=q,E.children("thead, tfoot").remove(),P&&(l=P.clone().prependTo(E),r=P.find("tr"),o=l.find("tr")),s=C.clone().prependTo(E),n=C.find("tr"),a=s.find("tr"),s.find("th, td").removeAttr("tabindex"),f||(T.width="100%",v[0].style.width="100%"),e.each(R(t,s),function(e,n){d=m(t,e),n.style.width=t.aoColumns[d].sWidth}),P&&_e(function(e){e.style.width=""},o),c=E.outerWidth(),""===f?(A.width="100%",I&&(E.find("tbody").height()>D.offsetHeight||"scroll"==k.css("overflow-y"))&&(A.width=we(E.outerWidth()-g)),c=E.outerWidth()):""!==_&&(A.width=we(_),c=E.outerWidth()),_e(N,a),_e(function(t){W.push(t.innerHTML),z.push(we(e(t).css("width")))},a),_e(function(t,n){e.inArray(t,O)!==-1&&(t.style.width=z[n])},n),e(a).height(0),P&&(_e(N,o),_e(function(t){$.push(t.innerHTML),F.push(we(e(t).css("width")))},o),_e(function(e,t){e.style.width=F[t]},r),e(o).height(0)),_e(function(e,t){e.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+W[t]+"</div>",e.style.width=z[t]},a),P&&_e(function(e,t){e.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+$[t]+"</div>",e.style.width=F[t]},o),E.outerWidth()<c?(u=D.scrollHeight>D.offsetHeight||"scroll"==k.css("overflow-y")?c+g:c,I&&(D.scrollHeight>D.offsetHeight||"scroll"==k.css("overflow-y"))&&(A.width=we(u-g)),""!==f&&""===_||He(t,1,"Possible column misalignment",6)):u="100%",T.width=we(u),M.width=we(u),P&&(t.nScrollFoot.style.width=we(u)),y||I&&(T.height=we(H.offsetHeight+g));var B=E.outerWidth();L[0].style.width=we(B),b.width=we(B);var U=E.height()>D.clientHeight||"scroll"==k.css("overflow-y"),J="padding"+(j.bScrollbarLeft?"Left":"Right");b[J]=U?g+"px":"0px",P&&(x[0].style.width=we(B),Y[0].style.width=we(B),Y[0].style[J]=U?g+"px":"0px"),E.children("colgroup").insertBefore(E.children("thead")),k.scroll(),!t.bSorted&&!t.bFiltered||t._drawHold||(D.scrollTop=0)}function _e(e,t,n){for(var i,r,a=0,o=0,s=t.length;o<s;){for(i=t[o].firstChild,r=n?n[o].firstChild:null;i;)1===i.nodeType&&(n?e(i,r,a):e(i,a),a++),i=i.nextSibling,r=n?r.nextSibling:null;o++}}function ye(n){var i,r,a,o=n.nTable,s=n.aoColumns,l=n.oScroll,d=l.sY,u=l.sX,c=l.sXInner,h=s.length,f=y(n,"bVisible"),g=e("th",n.nTHead),v=o.getAttribute("width"),M=o.parentNode,w=!1,b=n.oBrowser,L=b.bScrollOversize,D=o.style.width;for(D&&D.indexOf("%")!==-1&&(v=D),i=0;i<f.length;i++)r=s[f[i]],null!==r.sWidth&&(r.sWidth=ge(r.sWidthOrig,M),w=!0);if(L||!w&&!u&&!d&&h==_(n)&&h==g.length)for(i=0;i<h;i++){var k=m(n,i);null!==k&&(s[k].sWidth=we(g.eq(i).width()))}else{var T=e(o).clone().css("visibility","hidden").removeAttr("id");T.find("tbody tr").remove();var S=e("<tr/>").appendTo(T.find("tbody"));for(T.find("thead, tfoot").remove(),T.append(e(n.nTHead).clone()).append(e(n.nTFoot).clone()),T.find("tfoot th, tfoot td").css("width",""),g=R(n,T.find("thead")[0]),i=0;i<f.length;i++)r=s[f[i]],g[i].style.width=null!==r.sWidthOrig&&""!==r.sWidthOrig?we(r.sWidthOrig):"",r.sWidthOrig&&u&&e(g[i]).append(e("<div/>").css({width:r.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(n.aoData.length)for(i=0;i<f.length;i++)a=f[i],r=s[a],e(ve(n,a)).clone(!1).append(r.sContentPadding).appendTo(S);e("[name]",T).removeAttr("name");var Y=e("<div/>").css(u||d?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(T).appendTo(M);u&&c?T.width(c):u?(T.css("width","auto"),T.removeAttr("width"),T.width()<M.clientWidth&&v&&T.width(M.clientWidth)):d?T.width(M.clientWidth):v&&T.width(v);var x=0;for(i=0;i<f.length;i++){var C=e(g[i]),E=C.outerWidth()-C.width(),H=b.bBounding?Math.ceil(g[i].getBoundingClientRect().width):C.outerWidth();x+=H,s[f[i]].sWidth=we(H-E)}o.style.width=we(x),Y.remove()}if(v&&(o.style.width=we(v)),(v||u)&&!n._reszEvt){var A=function(){e(t).bind("resize.DT-"+n.sInstance,wt(function(){p(n)}))};L?setTimeout(A,1e3):A(),n._reszEvt=!0}}function ge(t,i){if(!t)return 0;var r=e("<div/>").css("width",we(t)).appendTo(i||n.body),a=r[0].offsetWidth;return r.remove(),a}function ve(t,n){var i=Me(t,n);if(i<0)return null;var r=t.aoData[i];return r.nTr?r.anCells[n]:e("<td/>").html(D(t,i,n,"display"))[0]}function Me(e,t){for(var n,i=-1,r=-1,a=0,o=e.aoData.length;a<o;a++)n=D(e,a,t,"display")+"",n=n.replace(Mt,""),n=n.replace(/&nbsp;/g," "),n.length>i&&(i=n.length,r=a);return r}function we(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function be(t){var n,r,a,o,s,l,d,u=[],c=t.aoColumns,h=t.aaSortingFixed,p=e.isPlainObject(h),m=[],f=function(t){t.length&&!e.isArray(t[0])?m.push(t):e.merge(m,t)};for(e.isArray(h)&&f(h),p&&h.pre&&f(h.pre),f(t.aaSorting),p&&h.post&&f(h.post),n=0;n<m.length;n++)for(d=m[n][0],o=c[d].aDataSort,r=0,a=o.length;r<a;r++)s=o[r],l=c[s].sType||"string",m[n]._idx===i&&(m[n]._idx=e.inArray(m[n][1],c[s].asSorting)),u.push({src:d,col:s,dir:m[n][1],index:m[n]._idx,type:l,formatter:Ve.ext.type.order[l+"-pre"]});return u}function Le(e){var t,n,i,r,a,o=[],s=Ve.ext.type.order,l=e.aoData,d=(e.aoColumns,0),u=e.aiDisplayMaster;for(g(e),a=be(e),t=0,n=a.length;t<n;t++)r=a[t],r.formatter&&d++,Ye(e,r.col);if("ssp"!=We(e)&&0!==a.length){for(t=0,i=u.length;t<i;t++)o[u[t]]=t;d===a.length?u.sort(function(e,t){var n,i,r,s,d,u=a.length,c=l[e]._aSortData,h=l[t]._aSortData;for(r=0;r<u;r++)if(d=a[r],n=c[d.col],i=h[d.col],s=n<i?-1:n>i?1:0,0!==s)return"asc"===d.dir?s:-s;return n=o[e],i=o[t],n<i?-1:n>i?1:0}):u.sort(function(e,t){var n,i,r,d,u,c,h=a.length,p=l[e]._aSortData,m=l[t]._aSortData;for(r=0;r<h;r++)if(u=a[r],n=p[u.col],i=m[u.col],c=s[u.type+"-"+u.dir]||s["string-"+u.dir],d=c(n,i),0!==d)return d;return n=o[e],i=o[t],n<i?-1:n>i?1:0})}e.bSorted=!0}function De(e){for(var t,n,i=e.aoColumns,r=be(e),a=e.oLanguage.oAria,o=0,s=i.length;o<s;o++){var l=i[o],d=l.asSorting,u=l.sTitle.replace(/<.*?>/g,""),c=l.nTh;c.removeAttribute("aria-sort"),l.bSortable?(r.length>0&&r[0].col==o?(c.setAttribute("aria-sort","asc"==r[0].dir?"ascending":"descending"),n=d[r[0].index+1]||d[0]):n=d[0],t=u+("asc"===n?a.sSortAscending:a.sSortDescending)):t=u,c.setAttribute("aria-label",t)}}function ke(t,n,r,a){var o,s=t.aoColumns[n],l=t.aaSorting,d=s.asSorting,u=function(t,n){var r=t._idx;return r===i&&(r=e.inArray(t[1],d)),r+1<d.length?r+1:n?null:0};if("number"==typeof l[0]&&(l=t.aaSorting=[l]),r&&t.oFeatures.bSortMulti){var c=e.inArray(n,lt(l,"0"));c!==-1?(o=u(l[c],!0),null===o&&1===l.length&&(o=0),null===o?l.splice(c,1):(l[c][1]=d[o],l[c]._idx=o)):(l.push([n,d[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==n?(o=u(l[0]),l.length=1,l[0][1]=d[o],l[0]._idx=o):(l.length=0,l.push([n,d[0]]),l[0]._idx=0);F(t),"function"==typeof a&&a(t)}function Te(e,t,n,i){var r=e.aoColumns[n];je(t,{},function(t){r.bSortable!==!1&&(e.oFeatures.bProcessing?(pe(e,!0),setTimeout(function(){ke(e,n,t.shiftKey,i),"ssp"!==We(e)&&pe(e,!1)},0)):ke(e,n,t.shiftKey,i))})}function Se(t){var n,i,r,a=t.aLastSort,o=t.oClasses.sSortColumn,s=be(t),l=t.oFeatures;if(l.bSort&&l.bSortClasses){for(n=0,i=a.length;n<i;n++)r=a[n].src,e(lt(t.aoData,"anCells",r)).removeClass(o+(n<2?n+1:3));for(n=0,i=s.length;n<i;n++)r=s[n].src,e(lt(t.aoData,"anCells",r)).addClass(o+(n<2?n+1:3))}t.aLastSort=s}function Ye(e,t){var n,i=e.aoColumns[t],r=Ve.ext.order[i.sSortDataType];r&&(n=r.call(e.oInstance,e,t,f(e,t)));for(var a,o,s=Ve.ext.type.order[i.sType+"-pre"],l=0,d=e.aoData.length;l<d;l++)a=e.aoData[l],a._aSortData||(a._aSortData=[]),a._aSortData[t]&&!r||(o=r?n[l]:D(e,l,t,"sort"),a._aSortData[t]=s?s(o):o)}function xe(t){if(t.oFeatures.bStateSave&&!t.bDestroying){var n={time:+new Date,start:t._iDisplayStart,length:t._iDisplayLength,order:e.extend(!0,[],t.aaSorting),search:te(t.oPreviousSearch),columns:e.map(t.aoColumns,function(e,n){return{visible:e.bVisible,search:te(t.aoPreSearchCols[n])}})};Oe(t,"aoStateSaveParams","stateSaveParams",[t,n]),t.oSavedState=n,t.fnStateSaveCallback.call(t.oInstance,t,n)}}function Ce(t,n){var r,a,o=t.aoColumns;if(t.oFeatures.bStateSave){var s=t.fnStateLoadCallback.call(t.oInstance,t);if(s&&s.time){var l=Oe(t,"aoStateLoadParams","stateLoadParams",[t,s]);if(e.inArray(!1,l)===-1){var d=t.iStateDuration;if(!(d>0&&s.time<+new Date-1e3*d)&&o.length===s.columns.length){for(t.oLoadedState=e.extend(!0,{},s),s.start!==i&&(t._iDisplayStart=s.start,t.iInitDisplayStart=s.start),s.length!==i&&(t._iDisplayLength=s.length),s.order!==i&&(t.aaSorting=[],e.each(s.order,function(e,n){t.aaSorting.push(n[0]>=o.length?[0,n[1]]:n)})),s.search!==i&&e.extend(t.oPreviousSearch,ne(s.search)),r=0,a=s.columns.length;r<a;r++){var u=s.columns[r];u.visible!==i&&(o[r].bVisible=u.visible),u.search!==i&&e.extend(t.aoPreSearchCols[r],ne(u.search))}Oe(t,"aoStateLoaded","stateLoaded",[t,s])}}}}}function Ee(t){var n=Ve.settings,i=e.inArray(t,lt(n,"nTable"));return i!==-1?n[i]:null}function He(e,n,i,r){if(i="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+i,r&&(i+=". For more information about this error, please see http://datatables.net/tn/"+r),n)t.console&&console.log&&console.log(i);else{var a=Ve.ext,o=a.sErrMode||a.errMode;if(e&&Oe(e,null,"error",[e,r,i]),"alert"==o)alert(i);else{if("throw"==o)throw new Error(i);"function"==typeof o&&o(e,r,i)}}}function Ae(t,n,r,a){return e.isArray(r)?void e.each(r,function(i,r){e.isArray(r)?Ae(t,n,r[0],r[1]):Ae(t,n,r)}):(a===i&&(a=r),void(n[r]!==i&&(t[a]=n[r])))}function Pe(t,n,i){var r;for(var a in n)n.hasOwnProperty(a)&&(r=n[a],e.isPlainObject(r)?(e.isPlainObject(t[a])||(t[a]={}),e.extend(!0,t[a],r)):i&&"data"!==a&&"aaData"!==a&&e.isArray(r)?t[a]=r.slice():t[a]=r);return t}function je(t,n,i){e(t).bind("click.DT",n,function(e){t.blur(),i(e)}).bind("keypress.DT",n,function(e){13===e.which&&(e.preventDefault(),i(e))}).bind("selectstart.DT",function(){return!1})}function Ie(e,t,n,i){n&&e[t].push({fn:n,sName:i})}function Oe(t,n,i,r){var a=[];if(n&&(a=e.map(t[n].slice().reverse(),function(e,n){return e.fn.apply(t.oInstance,r)})),null!==i){var o=e.Event(i+".dt");e(t.nTable).trigger(o,r),a.push(o.result)}return a}function ze(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),i=e._iDisplayLength;t>=n&&(t=n-i),t-=t%i,(i===-1||t<0)&&(t=0),e._iDisplayStart=t}function Fe(t,n){var i=t.renderer,r=Ve.ext.renderer[n];return e.isPlainObject(i)&&i[n]?r[i[n]]||r._:"string"==typeof i?r[i]||r._:r._}function We(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}function $e(e,t){var n=[],i=qt.numbers_length,r=Math.floor(i/2);return t<=i?n=ut(0,t):e<=r?(n=ut(0,i-2),n.push("ellipsis"),n.push(t-1)):e>=t-1-r?(n=ut(t-(i-2),t),n.splice(0,0,"ellipsis"),n.splice(0,0,0)):(n=ut(e-r+2,e+r-1),n.push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis"),n.splice(0,0,0)),n.DT_el="span",n}function Re(t){e.each({num:function(e){return Bt(e,t)},"num-fmt":function(e){return Bt(e,t,tt)},"html-num":function(e){return Bt(e,t,Qe)},"html-num-fmt":function(e){return Bt(e,t,Qe,tt)}},function(e,n){qe.type.order[e+t+"-pre"]=n,e.match(/^html\-/)&&(qe.type.search[e+t]=qe.type.search.html)})}function Ne(e){return function(){var t=[Ee(this[Ve.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Ve.ext.internal[e].apply(this,t)}}var qe,Be,Ue,Je,Ve=function(t){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new Be(e?Ee(this[qe.iApiIndex]):this)},this.fnAddData=function(t,n){var r=this.api(!0),a=e.isArray(t)&&(e.isArray(t[0])||e.isPlainObject(t[0]))?r.rows.add(t):r.row.add(t);return(n===i||n)&&r.draw(),a.flatten().toArray()},this.fnAdjustColumnSizing=function(e){
var t=this.api(!0).columns.adjust(),n=t.settings()[0],r=n.oScroll;e===i||e?t.draw(!1):""===r.sX&&""===r.sY||fe(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===i||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var r=this.api(!0),a=r.rows(e),o=a.settings()[0],s=o.aoData[a[0][0]];return a.remove(),t&&t.call(this,o,s),(n===i||n)&&r.draw(),s},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,r,a,o){var s=this.api(!0);null===t||t===i?s.search(e,n,r,o):s.column(t).search(e,n,r,o),s.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e!==i){var r=e.nodeName?e.nodeName.toLowerCase():"";return t!==i||"td"==r||"th"==r?n.cell(e,t).data():n.row(e).data()||null}return n.data().toArray()},this.fnGetNodes=function(e){var t=this.api(!0);return e!==i?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"==n||"TH"==n){var i=t.cell(e).index();return[i.row,i.columnVisible,i.column]}return null},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===i||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var r=this.api(!0).column(e).visible(t);(n===i||n)&&r.columns.adjust().draw()},this.fnSettings=function(){return Ee(this[qe.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,r,a){var o=this.api(!0);return n===i||null===n?o.row(t).data(e):o.cell(t,n).data(e),(a===i||a)&&o.columns.adjust(),(r===i||r)&&o.draw(),0},this.fnVersionCheck=qe.fnVersionCheck;var n=this,r=t===i,u=this.length;r&&(t={}),this.oApi=this.internal=qe.internal;for(var p in Ve.ext.internal)p&&(this[p]=Ne(p));return this.each(function(){var p,m={},f=u>1?Pe(m,t,!0):t,_=0,y=this.getAttribute("id"),g=!1,b=Ve.defaults,L=e(this);if("table"!=this.nodeName.toLowerCase())return void He(null,0,"Non-table node initialisation ("+this.nodeName+")",2);s(b),l(b.column),a(b,b,!0),a(b.column,b.column,!0),a(b,e.extend(f,L.data()));var D=Ve.settings;for(_=0,p=D.length;_<p;_++){var k=D[_];if(k.nTable==this||k.nTHead.parentNode==this||k.nTFoot&&k.nTFoot.parentNode==this){var T=f.bRetrieve!==i?f.bRetrieve:b.bRetrieve,Y=f.bDestroy!==i?f.bDestroy:b.bDestroy;if(r||T)return k.oInstance;if(Y){k.oInstance.fnDestroy();break}return void He(k,0,"Cannot reinitialise DataTable",3)}if(k.sTableId==this.id){D.splice(_,1);break}}null!==y&&""!==y||(y="DataTables_Table_"+Ve.ext._unique++,this.id=y);var x=e.extend(!0,{},Ve.models.oSettings,{sDestroyWidth:L[0].style.width,sInstance:y,sTableId:y});x.nTable=this,x.oApi=n.internal,x.oInit=f,D.push(x),x.oInstance=1===n.length?n:L.dataTable(),s(f),f.oLanguage&&o(f.oLanguage),f.aLengthMenu&&!f.iDisplayLength&&(f.iDisplayLength=e.isArray(f.aLengthMenu[0])?f.aLengthMenu[0][0]:f.aLengthMenu[0]),f=Pe(e.extend(!0,{},b),f),Ae(x.oFeatures,f,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),Ae(x,f,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),Ae(x.oScroll,f,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),Ae(x.oLanguage,f,"fnInfoCallback"),Ie(x,"aoDrawCallback",f.fnDrawCallback,"user"),Ie(x,"aoServerParams",f.fnServerParams,"user"),Ie(x,"aoStateSaveParams",f.fnStateSaveParams,"user"),Ie(x,"aoStateLoadParams",f.fnStateLoadParams,"user"),Ie(x,"aoStateLoaded",f.fnStateLoaded,"user"),Ie(x,"aoRowCallback",f.fnRowCallback,"user"),Ie(x,"aoRowCreatedCallback",f.fnCreatedRow,"user"),Ie(x,"aoHeaderCallback",f.fnHeaderCallback,"user"),Ie(x,"aoFooterCallback",f.fnFooterCallback,"user"),Ie(x,"aoInitComplete",f.fnInitComplete,"user"),Ie(x,"aoPreDrawCallback",f.fnPreDrawCallback,"user"),x.rowIdFn=S(f.rowId),d(x);var C=x.oClasses;if(f.bJQueryUI?(e.extend(C,Ve.ext.oJUIClasses,f.oClasses),f.sDom===b.sDom&&"lfrtip"===b.sDom&&(x.sDom='<"H"lfr>t<"F"ip>'),x.renderer?e.isPlainObject(x.renderer)&&!x.renderer.header&&(x.renderer.header="jqueryui"):x.renderer="jqueryui"):e.extend(C,Ve.ext.classes,f.oClasses),L.addClass(C.sTable),x.iInitDisplayStart===i&&(x.iInitDisplayStart=f.iDisplayStart,x._iDisplayStart=f.iDisplayStart),null!==f.iDeferLoading){x.bDeferLoading=!0;var E=e.isArray(f.iDeferLoading);x._iRecordsDisplay=E?f.iDeferLoading[0]:f.iDeferLoading,x._iRecordsTotal=E?f.iDeferLoading[1]:f.iDeferLoading}var H=x.oLanguage;e.extend(!0,H,f.oLanguage),""!==H.sUrl&&(e.ajax({dataType:"json",url:H.sUrl,success:function(t){o(t),a(b.oLanguage,t),e.extend(!0,H,t),oe(x)},error:function(){oe(x)}}),g=!0),null===f.asStripeClasses&&(x.asStripeClasses=[C.sStripeOdd,C.sStripeEven]);var A=x.asStripeClasses,P=L.children("tbody").find("tr").eq(0);e.inArray(!0,e.map(A,function(e,t){return P.hasClass(e)}))!==-1&&(e("tbody tr",this).removeClass(A.join(" ")),x.asDestroyStripes=A.slice());var j,I=[],O=this.getElementsByTagName("thead");if(0!==O.length&&($(x.aoHeader,O[0]),I=R(x)),null===f.aoColumns)for(j=[],_=0,p=I.length;_<p;_++)j.push(null);else j=f.aoColumns;for(_=0,p=j.length;_<p;_++)c(x,I?I[_]:null);if(v(x,f.aoColumnDefs,j,function(e,t){h(x,e,t)}),P.length){var z=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};e(P[0]).children("th, td").each(function(e,t){var n=x.aoColumns[e];if(n.mData===e){var r=z(t,"sort")||z(t,"order"),a=z(t,"filter")||z(t,"search");null===r&&null===a||(n.mData={_:e+".display",sort:null!==r?e+".@data-"+r:i,type:null!==r?e+".@data-"+r:i,filter:null!==a?e+".@data-"+a:i},h(x,e))}})}var F=x.oFeatures;if(f.bStateSave&&(F.bStateSave=!0,Ce(x,f),Ie(x,"aoDrawCallback",xe,"state_save")),f.aaSorting===i){var W=x.aaSorting;for(_=0,p=W.length;_<p;_++)W[_][1]=x.aoColumns[_].asSorting[0]}Se(x),F.bSort&&Ie(x,"aoDrawCallback",function(){if(x.bSorted){var t=be(x),n={};e.each(t,function(e,t){n[t.src]=t.dir}),Oe(x,null,"order",[x,t,n]),De(x)}}),Ie(x,"aoDrawCallback",function(){(x.bSorted||"ssp"===We(x)||F.bDeferRender)&&Se(x)},"sc");var N=L.children("caption").each(function(){this._captionSide=L.css("caption-side")}),q=L.children("thead");0===q.length&&(q=e("<thead/>").appendTo(this)),x.nTHead=q[0];var B=L.children("tbody");0===B.length&&(B=e("<tbody/>").appendTo(this)),x.nTBody=B[0];var U=L.children("tfoot");if(0===U.length&&N.length>0&&(""!==x.oScroll.sX||""!==x.oScroll.sY)&&(U=e("<tfoot/>").appendTo(this)),0===U.length||0===U.children().length?L.addClass(C.sNoFooter):U.length>0&&(x.nTFoot=U[0],$(x.aoFooter,x.nTFoot)),f.aaData)for(_=0;_<f.aaData.length;_++)M(x,f.aaData[_]);else(x.bDeferLoading||"dom"==We(x))&&w(x,e(x.nTBody).children("tr"));x.aiDisplay=x.aiDisplayMaster.slice(),x.bInitialised=!0,g===!1&&oe(x)}),n=null,this},Ge={},Xe=/[\r\n]/g,Qe=/<.*?>/g,Ze=/^[\w\+\-]/,Ke=/[\w\+\-]$/,et=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),tt=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi,nt=function(e){return!e||e===!0||"-"===e},it=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},rt=function(e,t){return Ge[t]||(Ge[t]=new RegExp(yt(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(Ge[t],"."):e},at=function(e,t,n){var i="string"==typeof e;return!!nt(e)||(t&&i&&(e=rt(e,t)),n&&i&&(e=e.replace(tt,"")),!isNaN(parseFloat(e))&&isFinite(e))},ot=function(e){return nt(e)||"string"==typeof e},st=function(e,t,n){if(nt(e))return!0;var i=ot(e);return i?!!at(ht(e),t,n)||null:null},lt=function(e,t,n){var r=[],a=0,o=e.length;if(n!==i)for(;a<o;a++)e[a]&&e[a][t]&&r.push(e[a][t][n]);else for(;a<o;a++)e[a]&&r.push(e[a][t]);return r},dt=function(e,t,n,r){var a=[],o=0,s=t.length;if(r!==i)for(;o<s;o++)e[t[o]][n]&&a.push(e[t[o]][n][r]);else for(;o<s;o++)a.push(e[t[o]][n]);return a},ut=function(e,t){var n,r=[];t===i?(t=0,n=e):(n=t,t=e);for(var a=t;a<n;a++)r.push(a);return r},ct=function(e){for(var t=[],n=0,i=e.length;n<i;n++)e[n]&&t.push(e[n]);return t},ht=function(e){return e.replace(Qe,"")},pt=function(e){var t,n,i,r=[],a=e.length,o=0;e:for(n=0;n<a;n++){for(t=e[n],i=0;i<o;i++)if(r[i]===t)continue e;r.push(t),o++}return r};Ve.util={throttle:function(e,t){var n,r,a=t!==i?t:200;return function(){var t=this,o=+new Date,s=arguments;n&&o<n+a?(clearTimeout(r),r=setTimeout(function(){n=i,e.apply(t,s)},a)):(n=o,e.apply(t,s))}},escapeRegex:function(e){return e.replace(et,"\\$1")}};var mt=function(e,t,n){e[t]!==i&&(e[n]=e[t])},ft=/\[.*?\]$/,_t=/\(\)$/,yt=Ve.util.escapeRegex,gt=e("<div>")[0],vt=gt.textContent!==i,Mt=/<.*?>/g,wt=Ve.util.throttle,bt=[],Lt=Array.prototype,Dt=function(t){var n,i,r=Ve.settings,a=e.map(r,function(e,t){return e.nTable});return t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?(n=e.inArray(t,a),n!==-1?[r[n]]:null):t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?i=e(t):t instanceof e&&(i=t),i?i.map(function(t){return n=e.inArray(this,a),n!==-1?r[n]:null}).toArray():void 0):[]};Be=function(t,n){if(!(this instanceof Be))return new Be(t,n);var i=[],r=function(e){var t=Dt(e);t&&(i=i.concat(t))};if(e.isArray(t))for(var a=0,o=t.length;a<o;a++)r(t[a]);else r(t);this.context=pt(i),n&&e.merge(this,n),this.selector={rows:null,cols:null,opts:null},Be.extend(this,this,bt)},Ve.Api=Be,e.extend(Be.prototype,{any:function(){return 0!==this.count()},concat:Lt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;t<n;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new Be(t[e],this[e]):null},filter:function(e){var t=[];if(Lt.filter)t=Lt.filter.call(this,e,this);else for(var n=0,i=this.length;n<i;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new Be(this.context,t)},flatten:function(){var e=[];return new Be(this.context,e.concat.apply(e,this.toArray()))},join:Lt.join,indexOf:Lt.indexOf||function(e,t){for(var n=t||0,i=this.length;n<i;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,r){var a,o,s,l,d,u,c,h,p=[],m=this.context,f=this.selector;for("string"==typeof e&&(r=n,n=t,t=e,e=!1),o=0,s=m.length;o<s;o++){var _=new Be(m[o]);if("table"===t)a=n.call(_,m[o],o),a!==i&&p.push(a);else if("columns"===t||"rows"===t)a=n.call(_,m[o],this[o],o),a!==i&&p.push(a);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(c=this[o],"column-rows"===t&&(u=Ct(m[o],f.opts)),l=0,d=c.length;l<d;l++)h=c[l],a="cell"===t?n.call(_,m[o],h.row,h.column,o,l):n.call(_,m[o],h,o,l,u),a!==i&&p.push(a)}if(p.length||r){var y=new Be(m,e?p.concat.apply([],p):p),g=y.selector;return g.rows=f.rows,g.cols=f.cols,g.opts=f.opts,y}return this},lastIndexOf:Lt.lastIndexOf||function(e,t){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(Lt.map)t=Lt.map.call(this,e,this);else for(var n=0,i=this.length;n<i;n++)t.push(e.call(this,this[n],n));return new Be(this.context,t)},pluck:function(e){return this.map(function(t){return t[e]})},pop:Lt.pop,push:Lt.push,reduce:Lt.reduce||function(e,t){return u(this,e,t,0,this.length,1)},reduceRight:Lt.reduceRight||function(e,t){return u(this,e,t,this.length-1,-1,-1)},reverse:Lt.reverse,selector:null,shift:Lt.shift,sort:Lt.sort,splice:Lt.splice,toArray:function(){return Lt.slice.call(this)},to$:function(){return e(this)},toJQuery:function(){return e(this)},unique:function(){return new Be(this.context,pt(this))},unshift:Lt.unshift}),Be.extend=function(t,n,i){if(i.length&&n&&(n instanceof Be||n.__dt_wrapper)){var r,a,o,s=function(e,t,n){return function(){var i=t.apply(e,arguments);return Be.extend(i,i,n.methodExt),i}};for(r=0,a=i.length;r<a;r++)o=i[r],n[o.name]="function"==typeof o.val?s(t,o.val,o):e.isPlainObject(o.val)?{}:o.val,n[o.name].__dt_wrapper=!0,Be.extend(t,n[o.name],o.propExt)}},Be.register=Ue=function(t,n){if(e.isArray(t))for(var i=0,r=t.length;i<r;i++)Be.register(t[i],n);else{var a,o,s,l,d=t.split("."),u=bt,c=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n].name===t)return e[n];return null};for(a=0,o=d.length;a<o;a++){l=d[a].indexOf("()")!==-1,s=l?d[a].replace("()",""):d[a];var h=c(u,s);h||(h={name:s,val:{},methodExt:[],propExt:[]},u.push(h)),a===o-1?h.val=n:u=l?h.methodExt:h.propExt}}},Be.registerPlural=Je=function(t,n,r){Be.register(t,r),Be.register(n,function(){var t=r.apply(this,arguments);return t===this?this:t instanceof Be?t.length?e.isArray(t[0])?new Be(t.context,t[0]):t[0]:i:t})};var kt=function(t,n){if("number"==typeof t)return[n[t]];var i=e.map(n,function(e,t){return e.nTable});return e(i).filter(t).map(function(t){var r=e.inArray(this,i);return n[r]}).toArray()};Ue("tables()",function(e){return e?new Be(kt(e,this.context)):this}),Ue("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new Be(n[0]):t}),Je("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),Je("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),Je("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),Je("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),Je("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),Ue("draw()",function(e){return this.iterator("table",function(t){"page"===e?z(t):("string"==typeof e&&(e="full-hold"!==e),F(t,e===!1))})}),Ue("page()",function(e){return e===i?this.page.info().page:this.iterator("table",function(t){ce(t,e)})}),Ue("page.info()",function(e){if(0===this.context.length)return i;var t=this.context[0],n=t._iDisplayStart,r=t.oFeatures.bPaginate?t._iDisplayLength:-1,a=t.fnRecordsDisplay(),o=r===-1;return{page:o?0:Math.floor(n/r),pages:o?1:Math.ceil(a/r),start:n,end:t.fnDisplayEnd(),length:r,recordsTotal:t.fnRecordsTotal(),recordsDisplay:a,serverSide:"ssp"===We(t)}}),Ue("page.len()",function(e){return e===i?0!==this.context.length?this.context[0]._iDisplayLength:i:this.iterator("table",function(t){le(t,e)})});var Tt=function(e,t,n){if(n){var i=new Be(e);i.one("draw",function(){n(i.ajax.json())})}if("ssp"==We(e))F(e,t);else{pe(e,!0);var r=e.jqXHR;r&&4!==r.readyState&&r.abort(),N(e,[],function(n){C(e);for(var i=J(e,n),r=0,a=i.length;r<a;r++)M(e,i[r]);F(e,t),pe(e,!1)})}};Ue("ajax.json()",function(){var e=this.context;if(e.length>0)return e[0].json}),Ue("ajax.params()",function(){var e=this.context;if(e.length>0)return e[0].oAjaxData}),Ue("ajax.reload()",function(e,t){return this.iterator("table",function(n){Tt(n,t===!1,e)})}),Ue("ajax.url()",function(t){var n=this.context;return t===i?0===n.length?i:(n=n[0],n.ajax?e.isPlainObject(n.ajax)?n.ajax.url:n.ajax:n.sAjaxSource):this.iterator("table",function(n){e.isPlainObject(n.ajax)?n.ajax.url=t:n.ajax=t})}),Ue("ajax.url().load()",function(e,t){return this.iterator("table",function(n){Tt(n,t===!1,e)})});var St=function(t,n,r,a,o){var s,l,d,u,c,h,p=[],m=typeof n;for(n&&"string"!==m&&"function"!==m&&n.length!==i||(n=[n]),d=0,u=n.length;d<u;d++)for(l=n[d]&&n[d].split?n[d].split(","):[n[d]],c=0,h=l.length;c<h;c++)s=r("string"==typeof l[c]?e.trim(l[c]):l[c]),s&&s.length&&(p=p.concat(s));var f=qe.selector[t];if(f.length)for(d=0,u=f.length;d<u;d++)p=f[d](a,o,p);return pt(p)},Yt=function(t){return t||(t={}),t.filter&&t.search===i&&(t.search=t.filter),e.extend({search:"none",order:"current",page:"all"},t)},xt=function(e){for(var t=0,n=e.length;t<n;t++)if(e[t].length>0)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},Ct=function(t,n){var i,r,a,o=[],s=t.aiDisplay,l=t.aiDisplayMaster,d=n.search,u=n.order,c=n.page;if("ssp"==We(t))return"removed"===d?[]:ut(0,l.length);if("current"==c)for(i=t._iDisplayStart,r=t.fnDisplayEnd();i<r;i++)o.push(s[i]);else if("current"==u||"applied"==u)o="none"==d?l.slice():"applied"==d?s.slice():e.map(l,function(t,n){return e.inArray(t,s)===-1?t:null});else if("index"==u||"original"==u)for(i=0,r=t.aoData.length;i<r;i++)"none"==d?o.push(i):(a=e.inArray(i,s),(a===-1&&"removed"==d||a>=0&&"applied"==d)&&o.push(i));return o},Et=function(t,n,r){var a=function(n){var a=it(n);if(null!==a&&!r)return[a];var o=Ct(t,r);if(null!==a&&e.inArray(a,o)!==-1)return[a];if(!n)return o;if("function"==typeof n)return e.map(o,function(e){var i=t.aoData[e];return n(e,i._aData,i.nTr)?e:null});var s=ct(dt(t.aoData,o,"nTr"));if(n.nodeName){if(n._DT_RowIndex!==i)return[n._DT_RowIndex];if(n._DT_CellIndex)return[n._DT_CellIndex.row];var l=e(n).closest("*[data-dt-row]");return l.length?[l.data("dt-row")]:[]}if("string"==typeof n&&"#"===n.charAt(0)){var d=t.aIds[n.replace(/^#/,"")];if(d!==i)return[d.idx]}return e(s).filter(n).map(function(){return this._DT_RowIndex}).toArray()};return St("row",n,a,t,r)};Ue("rows()",function(t,n){t===i?t="":e.isPlainObject(t)&&(n=t,t=""),n=Yt(n);var r=this.iterator("table",function(e){return Et(e,t,n)},1);return r.selector.rows=t,r.selector.opts=n,r}),Ue("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||i},1)}),Ue("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return dt(e.aoData,t,"_aData")},1)}),Je("rows().cache()","row().cache()",function(e){return this.iterator("row",function(t,n){var i=t.aoData[n];return"search"===e?i._aFilterData:i._aSortData},1)}),Je("rows().invalidate()","row().invalidate()",function(e){return this.iterator("row",function(t,n){H(t,n,e)})}),Je("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),Je("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,i=0,r=n.length;i<r;i++)for(var a=0,o=this[i].length;a<o;a++){var s=n[i].rowIdFn(n[i].aoData[this[i][a]]._aData);t.push((e===!0?"#":"")+s)}return new Be(n,t)}),Je("rows().remove()","row().remove()",function(){var e=this;return this.iterator("row",function(t,n,r){var a,o,s,l,d,u,c=t.aoData,h=c[n];for(c.splice(n,1),a=0,o=c.length;a<o;a++)if(d=c[a],u=d.anCells,null!==d.nTr&&(d.nTr._DT_RowIndex=a),null!==u)for(s=0,l=u.length;s<l;s++)u[s]._DT_CellIndex.row=a;E(t.aiDisplayMaster,n),E(t.aiDisplay,n),E(e[r],n,!1),ze(t);var p=t.rowIdFn(h._aData);p!==i&&delete t.aIds[p]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;t<n;t++)e.aoData[t].idx=t}),this}),Ue("rows.add()",function(t){var n=this.iterator("table",function(e){var n,i,r,a=[];for(i=0,r=t.length;i<r;i++)n=t[i],n.nodeName&&"TR"===n.nodeName.toUpperCase()?a.push(w(e,n)[0]):a.push(M(e,n));return a},1),i=this.rows(-1);return i.pop(),e.merge(i,n),i}),Ue("row()",function(e,t){return xt(this.rows(e,t))}),Ue("row().data()",function(e){var t=this.context;return e===i?t.length&&this.length?t[0].aoData[this[0]]._aData:i:(t[0].aoData[this[0]]._aData=e,H(t[0],this[0],"data"),this)}),Ue("row().node()",function(){var e=this.context;return e.length&&this.length?e[0].aoData[this[0]].nTr||null:null}),Ue("row.add()",function(t){t instanceof e&&t.length&&(t=t[0]);var n=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?w(e,t)[0]:M(e,t)});return this.row(n[0])});var Ht=function(t,n,i,r){var a=[],o=function(n,i){if(e.isArray(n)||n instanceof e)for(var r=0,s=n.length;r<s;r++)o(n[r],i);else if(n.nodeName&&"tr"===n.nodeName.toLowerCase())a.push(n);else{var l=e("<tr><td/></tr>").addClass(i);e("td",l).addClass(i).html(n)[0].colSpan=_(t),a.push(l[0])}};o(i,r),n._details&&n._details.remove(),n._details=e(a),n._detailsShow&&n._details.insertAfter(n.nTr)},At=function(e,t){var n=e.context;if(n.length){var r=n[0].aoData[t!==i?t:e[0]];r&&r._details&&(r._details.remove(),r._detailsShow=i,r._details=i)}},Pt=function(e,t){var n=e.context;if(n.length&&e.length){var i=n[0].aoData[e[0]];i._details&&(i._detailsShow=t,t?i._details.insertAfter(i.nTr):i._details.detach(),jt(n[0]))}},jt=function(e){var t=new Be(e),n=".dt.DT_details",i="draw"+n,r="column-visibility"+n,a="destroy"+n,o=e.aoData;t.off(i+" "+r+" "+a),lt(o,"_details").length>0&&(t.on(i,function(n,i){e===i&&t.rows({page:"current"}).eq(0).each(function(e){var t=o[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),t.on(r,function(t,n,i,r){if(e===n)for(var a,s=_(n),l=0,d=o.length;l<d;l++)a=o[l],a._details&&a._details.children("td[colspan]").attr("colspan",s)}),t.on(a,function(n,i){if(e===i)for(var r=0,a=o.length;r<a;r++)o[r]._details&&At(t,r)}))},It="",Ot=It+"row().child",zt=Ot+"()";Ue(zt,function(e,t){var n=this.context;return e===i?n.length&&this.length?n[0].aoData[this[0]]._details:i:(e===!0?this.child.show():e===!1?At(this):n.length&&this.length&&Ht(n[0],n[0].aoData[this[0]],e,t),this)}),Ue([Ot+".show()",zt+".show()"],function(e){return Pt(this,!0),this}),Ue([Ot+".hide()",zt+".hide()"],function(){return Pt(this,!1),this}),Ue([Ot+".remove()",zt+".remove()"],function(){return At(this),this}),Ue(Ot+".isShown()",function(){var e=this.context;return!(!e.length||!this.length)&&(e[0].aoData[this[0]]._detailsShow||!1)});var Ft=/^(.+):(name|visIdx|visible)$/,Wt=function(e,t,n,i,r){for(var a=[],o=0,s=r.length;o<s;o++)a.push(D(e,r[o],t));return a},$t=function(t,n,i){var r=t.aoColumns,a=lt(r,"sName"),o=lt(r,"nTh"),s=function(n){var s=it(n);if(""===n)return ut(r.length);if(null!==s)return[s>=0?s:r.length+s];if("function"==typeof n){var l=Ct(t,i);return e.map(r,function(e,i){return n(i,Wt(t,i,0,0,l),o[i])?i:null})}var d="string"==typeof n?n.match(Ft):"";if(d)switch(d[2]){case"visIdx":case"visible":var u=parseInt(d[1],10);if(u<0){var c=e.map(r,function(e,t){return e.bVisible?t:null});return[c[c.length+u]]}return[m(t,u)];case"name":return e.map(a,function(e,t){return e===d[1]?t:null});default:return[]}if(n.nodeName&&n._DT_CellIndex)return[n._DT_CellIndex.column];var h=e(o).filter(n).map(function(){return e.inArray(this,o)}).toArray();if(h.length||!n.nodeName)return h;var p=e(n).closest("*[data-dt-column]");return p.length?[p.data("dt-column")]:[]};return St("column",n,s,t,i)},Rt=function(t,n,r){var a,o,s,l,d=t.aoColumns,u=d[n],c=t.aoData;if(r===i)return u.bVisible;if(u.bVisible!==r){if(r){var h=e.inArray(!0,lt(d,"bVisible"),n+1);for(o=0,s=c.length;o<s;o++)l=c[o].nTr,a=c[o].anCells,l&&l.insertBefore(a[n],a[h]||null)}else e(lt(t.aoData,"anCells",n)).detach();u.bVisible=r,O(t,t.aoHeader),O(t,t.aoFooter),xe(t)}};Ue("columns()",function(t,n){t===i?t="":e.isPlainObject(t)&&(n=t,t=""),n=Yt(n);var r=this.iterator("table",function(e){return $t(e,t,n)},1);return r.selector.cols=t,r.selector.opts=n,r}),Je("columns().header()","column().header()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),Je("columns().footer()","column().footer()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),Je("columns().data()","column().data()",function(){return this.iterator("column-rows",Wt,1)}),Je("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),Je("columns().cache()","column().cache()",function(e){return this.iterator("column-rows",function(t,n,i,r,a){return dt(t.aoData,a,"search"===e?"_aFilterData":"_aSortData",n)},1)}),Je("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,i,r){return dt(e.aoData,r,"anCells",t)},1)}),Je("columns().visible()","column().visible()",function(e,t){var n=this.iterator("column",function(t,n){return e===i?t.aoColumns[n].bVisible:void Rt(t,n,e)});return e!==i&&(this.iterator("column",function(n,i){Oe(n,null,"column-visibility",[n,i,e,t])}),(t===i||t)&&this.columns.adjust()),n}),Je("columns().indexes()","column().index()",function(e){return this.iterator("column",function(t,n){return"visible"===e?f(t,n):n},1)}),Ue("columns.adjust()",function(){return this.iterator("table",function(e){p(e)},1)}),Ue("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return m(n,t);if("fromData"===e||"toVisible"===e)return f(n,t)}}),Ue("column()",function(e,t){return xt(this.columns(e,t))});var Nt=function(t,n,r){var a,o,s,l,d,u,c,h=t.aoData,p=Ct(t,r),m=ct(dt(h,p,"anCells")),f=e([].concat.apply([],m)),_=t.aoColumns.length,y=function(n){var r="function"==typeof n;if(null===n||n===i||r){for(o=[],s=0,l=p.length;s<l;s++)for(a=p[s],d=0;d<_;d++)u={row:a,column:d},r?(c=h[a],n(u,D(t,a,d),c.anCells?c.anCells[d]:null)&&o.push(u)):o.push(u);return o}if(e.isPlainObject(n))return[n];var m=f.filter(n).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return m.length||!n.nodeName?m:(c=e(n).closest("*[data-dt-row]"),c.length?[{row:c.data("dt-row"),column:c.data("dt-column")}]:[])};return St("cell",n,y,t,r)};Ue("cells()",function(t,n,r){if(e.isPlainObject(t)&&(t.row===i?(r=t,t=null):(r=n,n=null)),e.isPlainObject(n)&&(r=n,n=null),null===n||n===i)return this.iterator("table",function(e){return Nt(e,t,Yt(r))});var a,o,s,l,d,u=this.columns(n,r),c=this.rows(t,r),h=this.iterator("table",function(e,t){for(a=[],o=0,s=c[t].length;o<s;o++)for(l=0,d=u[t].length;l<d;l++)a.push({row:c[t][o],column:u[t][l]});return a},1);return e.extend(h.selector,{cols:n,rows:t,opts:r}),h}),Je("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var r=e.aoData[t];return r&&r.anCells?r.anCells[n]:i},1)}),Ue("cells().data()",function(){return this.iterator("cell",function(e,t,n){return D(e,t,n)},1)}),Je("cells().cache()","cell().cache()",function(e){return e="search"===e?"_aFilterData":"_aSortData",this.iterator("cell",function(t,n,i){return t.aoData[n][e][i]},1)}),Je("cells().render()","cell().render()",function(e){return this.iterator("cell",function(t,n,i){return D(t,n,i,e)},1)}),Je("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:f(e,n)}},1)}),Je("cells().invalidate()","cell().invalidate()",function(e){return this.iterator("cell",function(t,n,i){H(t,n,e,i)})}),Ue("cell()",function(e,t,n){return xt(this.cells(e,t,n))}),Ue("cell().data()",function(e){var t=this.context,n=this[0];return e===i?t.length&&n.length?D(t[0],n[0].row,n[0].column):i:(k(t[0],n[0].row,n[0].column,e),H(t[0],n[0].row,"data",n[0].column),this)}),Ue("order()",function(t,n){var r=this.context;return t===i?0!==r.length?r[0].aaSorting:i:("number"==typeof t?t=[[t,n]]:t.length&&!e.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Ue("order.listener()",function(e,t,n){return this.iterator("table",function(i){Te(i,e,t,n)})}),Ue("order.fixed()",function(t){if(!t){var n=this.context,r=n.length?n[0].aaSortingFixed:i;return e.isArray(r)?{pre:r}:r}return this.iterator("table",function(n){n.aaSortingFixed=e.extend(!0,{},t)})}),Ue(["columns().order()","column().order()"],function(t){var n=this;return this.iterator("table",function(i,r){var a=[];e.each(n[r],function(e,n){a.push([n,t])}),i.aaSorting=a})}),Ue("search()",function(t,n,r,a){var o=this.context;return t===i?0!==o.length?o[0].oPreviousSearch.sSearch:i:this.iterator("table",function(i){i.oFeatures.bFilter&&G(i,e.extend({},i.oPreviousSearch,{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===r||r,bCaseInsensitive:null===a||a}),1)})}),Je("columns().search()","column().search()",function(t,n,r,a){return this.iterator("column",function(o,s){var l=o.aoPreSearchCols;return t===i?l[s].sSearch:void(o.oFeatures.bFilter&&(e.extend(l[s],{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===r||r,bCaseInsensitive:null===a||a}),G(o,o.oPreviousSearch,1)))})}),Ue("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Ue("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),Ue("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Ue("state.save()",function(){return this.iterator("table",function(e){xe(e)})}),Ve.versionCheck=Ve.fnVersionCheck=function(e){for(var t,n,i=Ve.version.split("."),r=e.split("."),a=0,o=r.length;a<o;a++)if(t=parseInt(i[a],10)||0,n=parseInt(r[a],10)||0,t!==n)return t>n;return!0},Ve.isDataTable=Ve.fnIsDataTable=function(t){var n=e(t).get(0),i=!1;return e.each(Ve.settings,function(t,r){var a=r.nScrollHead?e("table",r.nScrollHead)[0]:null,o=r.nScrollFoot?e("table",r.nScrollFoot)[0]:null;r.nTable!==n&&a!==n&&o!==n||(i=!0)}),i},Ve.tables=Ve.fnTables=function(t){var n=!1;e.isPlainObject(t)&&(n=t.api,t=t.visible);var i=e.map(Ve.settings,function(n){if(!t||t&&e(n.nTable).is(":visible"))return n.nTable});return n?new Be(i):i},Ve.camelToHungarian=a,Ue("$()",function(t,n){var i=this.rows(n).nodes(),r=e(i);return e([].concat(r.filter(t).toArray(),r.find(t).toArray()))}),e.each(["on","one","off"],function(t,n){Ue(n+"()",function(){var t=Array.prototype.slice.call(arguments);t[0].match(/\.dt\b/)||(t[0]+=".dt");var i=e(this.tables().nodes());return i[n].apply(i,t),this})}),Ue("clear()",function(){return this.iterator("table",function(e){C(e)})}),Ue("settings()",function(){return new Be(this.context,this.context)}),Ue("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),Ue("data()",function(){return this.iterator("table",function(e){return lt(e.aoData,"_aData")}).flatten()}),Ue("destroy()",function(n){return n=n||!1,this.iterator("table",function(i){var r,a=i.nTableWrapper.parentNode,o=i.oClasses,s=i.nTable,l=i.nTBody,d=i.nTHead,u=i.nTFoot,c=e(s),h=e(l),p=e(i.nTableWrapper),m=e.map(i.aoData,function(e){return e.nTr});i.bDestroying=!0,Oe(i,"aoDestroyCallback","destroy",[i]),n||new Be(i).columns().visible(!0),p.unbind(".DT").find(":not(tbody *)").unbind(".DT"),e(t).unbind(".DT-"+i.sInstance),s!=d.parentNode&&(c.children("thead").detach(),c.append(d)),u&&s!=u.parentNode&&(c.children("tfoot").detach(),c.append(u)),i.aaSorting=[],i.aaSortingFixed=[],Se(i),e(m).removeClass(i.asStripeClasses.join(" ")),e("th, td",d).removeClass(o.sSortable+" "+o.sSortableAsc+" "+o.sSortableDesc+" "+o.sSortableNone),i.bJUI&&(e("th span."+o.sSortIcon+", td span."+o.sSortIcon,d).detach(),e("th, td",d).each(function(){var t=e("div."+o.sSortJUIWrapper,this);e(this).append(t.contents()),t.detach()})),h.children().detach(),h.append(m);var f=n?"remove":"detach";c[f](),p[f](),!n&&a&&(a.insertBefore(s,i.nTableReinsertBefore),c.css("width",i.sDestroyWidth).removeClass(o.sTable),r=i.asDestroyStripes.length,r&&h.children().each(function(t){e(this).addClass(i.asDestroyStripes[t%r])}));var _=e.inArray(i,Ve.settings);_!==-1&&Ve.settings.splice(_,1)})}),e.each(["column","row","cell"],function(e,t){Ue(t+"s().every()",function(e){var n=this.selector.opts,r=this;return this.iterator(t,function(a,o,s,l,d){e.call(r[t](o,"cell"===t?s:n,"cell"===t?n:i),o,s,l,d)})})}),Ue("i18n()",function(t,n,r){var a=this.context[0],o=S(t)(a.oLanguage);return o===i&&(o=n),r!==i&&e.isPlainObject(o)&&(o=o[r]!==i?o[r]:o._),o.replace("%d",r)}),Ve.version="1.10.12",Ve.settings=[],Ve.models={},Ve.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Ve.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Ve.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",
sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Ve.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((e.iStateDuration===-1?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(t){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(e.iStateDuration===-1?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:e.extend({},Ve.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},r(Ve.defaults),Ve.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},r(Ve.defaults.column),Ve.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:i,oAjaxData:i,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==We(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==We(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,i=this.aiDisplay.length,r=this.oFeatures,a=r.bPaginate;return r.bServerSide?a===!1||e===-1?t+i:Math.min(t+e,this._iRecordsDisplay):!a||n>i||e===-1?i:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Ve.ext=qe={buttons:{},classes:{},builder:"-source-",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Ve.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Ve.version},e.extend(qe,{afnFiltering:qe.search,aTypes:qe.type.detect,ofnSearch:qe.type.search,oSort:qe.type.order,afnSortData:qe.order,aoFeatures:qe.feature,oApi:qe.internal,oStdClasses:qe.classes,oPagination:qe.pager}),e.extend(Ve.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var t="";t="";var n=t+"ui-state-default",i=t+"css_right ui-icon ui-icon-",r=t+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";e.extend(Ve.ext.oJUIClasses,Ve.ext.classes,{sPageButton:"fg-button ui-button "+n,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:n+" sorting_asc",sSortDesc:n+" sorting_desc",sSortable:n+" sorting",sSortableAsc:n+" sorting_asc_disabled",sSortableDesc:n+" sorting_desc_disabled",sSortableNone:n+" sorting_disabled",sSortJUIAsc:i+"triangle-1-n",sSortJUIDesc:i+"triangle-1-s",sSortJUI:i+"carat-2-n-s",sSortJUIAscAllowed:i+"carat-1-n",sSortJUIDescAllowed:i+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+n,sScrollFoot:"dataTables_scrollFoot "+n,sHeaderTH:n,sFooterTH:n,sJUIHeader:r+" ui-corner-tl ui-corner-tr",sJUIFooter:r+" ui-corner-bl ui-corner-br"})}();var qt=Ve.ext.pager;e.extend(qt,{simple:function(e,t){return["previous","next"]},full:function(e,t){return["first","previous","next","last"]},numbers:function(e,t){return[$e(e,t)]},simple_numbers:function(e,t){return["previous",$e(e,t),"next"]},full_numbers:function(e,t){return["first","previous",$e(e,t),"next","last"]},_numbers:$e,numbers_length:7}),e.extend(!0,Ve.ext.renderer,{pageButton:{_:function(t,i,r,a,o,s){var l,d,u,c=t.oClasses,h=t.oLanguage.oPaginate,p=t.oLanguage.oAria.paginate||{},m=0,f=function(n,i){var a,u,_,y,g=function(e){ce(t,e.data.action,!0)};for(a=0,u=i.length;a<u;a++)if(y=i[a],e.isArray(y)){var v=e("<"+(y.DT_el||"div")+"/>").appendTo(n);f(v,y)}else{switch(l=null,d="",y){case"ellipsis":n.append('<span class="ellipsis">&#x2026;</span>');break;case"first":l=h.sFirst,d=y+(o>0?"":" "+c.sPageButtonDisabled);break;case"previous":l=h.sPrevious,d=y+(o>0?"":" "+c.sPageButtonDisabled);break;case"next":l=h.sNext,d=y+(o<s-1?"":" "+c.sPageButtonDisabled);break;case"last":l=h.sLast,d=y+(o<s-1?"":" "+c.sPageButtonDisabled);break;default:l=y+1,d=o===y?c.sPageButtonActive:""}null!==l&&(_=e("<a>",{"class":c.sPageButton+" "+d,"aria-controls":t.sTableId,"aria-label":p[y],"data-dt-idx":m,tabindex:t.iTabIndex,id:0===r&&"string"==typeof y?t.sTableId+"_"+y:null}).html(l).appendTo(n),je(_,{action:y},g),m++)}};try{u=e(i).find(n.activeElement).data("dt-idx")}catch(_){}f(e(i).empty(),a),u&&e(i).find("[data-dt-idx="+u+"]").focus()}}}),e.extend(Ve.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return at(e,n)?"num"+n:null},function(e,t){if(e&&!(e instanceof Date)&&(!Ze.test(e)||!Ke.test(e)))return null;var n=Date.parse(e);return null!==n&&!isNaN(n)||nt(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return at(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return st(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return st(e,n,!0)?"html-num-fmt"+n:null},function(e,t){return nt(e)||"string"==typeof e&&e.indexOf("<")!==-1?"html":null}]),e.extend(Ve.ext.type.search,{html:function(e){return nt(e)?e:"string"==typeof e?e.replace(Xe," ").replace(Qe,""):""},string:function(e){return nt(e)?e:"string"==typeof e?e.replace(Xe," "):e}});var Bt=function(e,t,n,i){return 0===e||e&&"-"!==e?(t&&(e=rt(e,t)),e.replace&&(n&&(e=e.replace(n,"")),i&&(e=e.replace(i,""))),1*e):-(1/0)};e.extend(qe.type.order,{"date-pre":function(e){return Date.parse(e)||0},"html-pre":function(e){return nt(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return nt(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:e>t?1:0},"string-desc":function(e,t){return e<t?1:e>t?-1:0}}),Re(""),e.extend(!0,Ve.ext.renderer,{header:{_:function(t,n,i,r){e(t.nTable).on("order.dt.DT",function(e,a,o,s){if(t===a){var l=i.idx;n.removeClass(i.sSortingClass+" "+r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:i.sSortingClass)}})},jqueryui:function(t,n,i,r){e("<div/>").addClass(r.sSortJUIWrapper).append(n.contents()).append(e("<span/>").addClass(r.sSortIcon+" "+i.sSortingClassJUI)).appendTo(n),e(t.nTable).on("order.dt.DT",function(e,a,o,s){if(t===a){var l=i.idx;n.removeClass(r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:i.sSortingClass),n.find("span."+r.sSortIcon).removeClass(r.sSortJUIAsc+" "+r.sSortJUIDesc+" "+r.sSortJUI+" "+r.sSortJUIAscAllowed+" "+r.sSortJUIDescAllowed).addClass("asc"==s[l]?r.sSortJUIAsc:"desc"==s[l]?r.sSortJUIDesc:i.sSortingClassJUI)}})}}});var Ut=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};return Ve.render={number:function(e,t,n,i,r){return{display:function(a){if("number"!=typeof a&&"string"!=typeof a)return a;var o=a<0?"-":"",s=parseFloat(a);if(isNaN(s))return Ut(a);a=Math.abs(s);var l=parseInt(a,10),d=n?t+(a-l).toFixed(n).substring(2):"";return o+(i||"")+l.toString().replace(/\B(?=(\d{3})+(?!\d))/g,e)+d+(r||"")}}},text:function(){return{display:Ut}}},e.extend(Ve.ext.internal,{_fnExternApiFunc:Ne,_fnBuildAjax:N,_fnAjaxUpdate:q,_fnAjaxParameters:B,_fnAjaxUpdateDraw:U,_fnAjaxDataSrc:J,_fnAddColumn:c,_fnColumnOptions:h,_fnAdjustColumnSizing:p,_fnVisibleToColumnIndex:m,_fnColumnIndexToVisible:f,_fnVisbleColumns:_,_fnGetColumns:y,_fnColumnTypes:g,_fnApplyColumnDefs:v,_fnHungarianMap:r,_fnCamelToHungarian:a,_fnLanguageCompat:o,_fnBrowserDetect:d,_fnAddData:M,_fnAddTr:w,_fnNodeToDataIndex:b,_fnNodeToColumnIndex:L,_fnGetCellData:D,_fnSetCellData:k,_fnSplitObjNotation:T,_fnGetObjectDataFn:S,_fnSetObjectDataFn:Y,_fnGetDataMaster:x,_fnClearTable:C,_fnDeleteIndex:E,_fnInvalidate:H,_fnGetRowElements:A,_fnCreateTr:P,_fnBuildHead:I,_fnDrawHead:O,_fnDraw:z,_fnReDraw:F,_fnAddOptionsHtml:W,_fnDetectHeader:$,_fnGetUniqueThs:R,_fnFeatureHtmlFilter:V,_fnFilterComplete:G,_fnFilterCustom:X,_fnFilterColumn:Q,_fnFilter:Z,_fnFilterCreateSearch:K,_fnEscapeRegex:yt,_fnFilterData:ee,_fnFeatureHtmlInfo:ie,_fnUpdateInfo:re,_fnInfoMacros:ae,_fnInitialise:oe,_fnInitComplete:se,_fnLengthChange:le,_fnFeatureHtmlLength:de,_fnFeatureHtmlPaginate:ue,_fnPageChange:ce,_fnFeatureHtmlProcessing:he,_fnProcessingDisplay:pe,_fnFeatureHtmlTable:me,_fnScrollDraw:fe,_fnApplyToChildren:_e,_fnCalculateColumnWidths:ye,_fnThrottle:wt,_fnConvertToWidth:ge,_fnGetWidestNode:ve,_fnGetMaxLenString:Me,_fnStringToCss:we,_fnSortFlatten:be,_fnSort:Le,_fnSortAria:De,_fnSortListener:ke,_fnSortAttachListener:Te,_fnSortingClasses:Se,_fnSortData:Ye,_fnSaveState:xe,_fnLoadState:Ce,_fnSettingsFromNode:Ee,_fnLog:He,_fnMap:Ae,_fnBindAction:je,_fnCallbackReg:Ie,_fnCallbackFire:Oe,_fnLengthOverflow:ze,_fnRenderer:Fe,_fnDataSource:We,_fnRowAttributes:j,_fnCalculateEnd:function(){}}),e.fn.dataTable=Ve,Ve.$=e,e.fn.dataTableSettings=Ve.settings,e.fn.dataTableExt=Ve.ext,e.fn.DataTable=function(t){return e(this).dataTable(t).api()},e.each(Ve,function(t,n){e.fn.DataTable[t]=n}),e.fn.dataTable}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd)var t=e.fn.select2.amd;var t;return function(){if(!t||!t.requirejs){t?n=t:t={};var e,n,i;!function(t){function r(e,t){return M.call(e,t)}function a(e,t){var n,i,r,a,o,s,l,d,u,c,h,p=t&&t.split("/"),m=g.map,f=m&&m["*"]||{};if(e&&"."===e.charAt(0))if(t){for(e=e.split("/"),o=e.length-1,g.nodeIdCompat&&b.test(e[o])&&(e[o]=e[o].replace(b,"")),e=p.slice(0,p.length-1).concat(e),u=0;u<e.length;u+=1)if(h=e[u],"."===h)e.splice(u,1),u-=1;else if(".."===h){if(1===u&&(".."===e[2]||".."===e[0]))break;u>0&&(e.splice(u-1,2),u-=2)}e=e.join("/")}else 0===e.indexOf("./")&&(e=e.substring(2));if((p||f)&&m){for(n=e.split("/"),u=n.length;u>0;u-=1){if(i=n.slice(0,u).join("/"),p)for(c=p.length;c>0;c-=1)if(r=m[p.slice(0,c).join("/")],r&&(r=r[i])){a=r,s=u;break}if(a)break;!l&&f&&f[i]&&(l=f[i],d=u)}!a&&l&&(a=l,s=d),a&&(n.splice(0,s,a),e=n.join("/"))}return e}function o(e,n){return function(){var i=w.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),p.apply(t,i.concat([e,n]))}}function s(e){return function(t){return a(t,e)}}function l(e){return function(t){_[e]=t}}function d(e){if(r(y,e)){var n=y[e];delete y[e],v[e]=!0,h.apply(t,n)}if(!r(_,e)&&!r(v,e))throw new Error("No "+e);return _[e]}function u(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function c(e){return function(){return g&&g.config&&g.config[e]||{}}}var h,p,m,f,_={},y={},g={},v={},M=Object.prototype.hasOwnProperty,w=[].slice,b=/\.js$/;m=function(e,t){var n,i=u(e),r=i[0];return e=i[1],r&&(r=a(r,t),n=d(r)),r?e=n&&n.normalize?n.normalize(e,s(t)):a(e,t):(e=a(e,t),i=u(e),r=i[0],e=i[1],r&&(n=d(r))),{f:r?r+"!"+e:e,n:e,pr:r,p:n}},f={require:function(e){return o(e)},exports:function(e){var t=_[e];return"undefined"!=typeof t?t:_[e]={}},module:function(e){return{id:e,uri:"",exports:_[e],config:c(e)}}},h=function(e,n,i,a){var s,u,c,h,p,g,M=[],w=typeof i;if(a=a||e,"undefined"===w||"function"===w){for(n=!n.length&&i.length?["require","exports","module"]:n,p=0;p<n.length;p+=1)if(h=m(n[p],a),u=h.f,"require"===u)M[p]=f.require(e);else if("exports"===u)M[p]=f.exports(e),g=!0;else if("module"===u)s=M[p]=f.module(e);else if(r(_,u)||r(y,u)||r(v,u))M[p]=d(u);else{if(!h.p)throw new Error(e+" missing "+u);h.p.load(h.n,o(a,!0),l(u),{}),M[p]=_[u]}c=i?i.apply(_[e],M):void 0,e&&(s&&s.exports!==t&&s.exports!==_[e]?_[e]=s.exports:c===t&&g||(_[e]=c))}else e&&(_[e]=i)},e=n=p=function(e,n,i,r,a){if("string"==typeof e)return f[e]?f[e](n):d(m(e,n).f);if(!e.splice){if(g=e,g.deps&&p(g.deps,g.callback),!n)return;n.splice?(e=n,n=i,i=null):e=t}return n=n||function(){},"function"==typeof i&&(i=r,r=a),r?h(t,e,n,i):setTimeout(function(){h(t,e,n,i)},4),p},p.config=function(e){return p(e)},e._defined=_,i=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),r(_,e)||r(y,e)||(y[e]=[e,t,n])},i.amd={jQuery:!0}}(),t.requirejs=e,t.require=n,t.define=i}}(),t.define("almond",function(){}),t.define("jquery",[],function(){var t=e||$;return null==t&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),t}),t.define("select2/utils",["jquery"],function(e){function t(e){var t=e.prototype,n=[];for(var i in t){var r=t[i];"function"==typeof r&&"constructor"!==i&&n.push(i)}return n}var n={};n.Extend=function(e,t){function n(){this.constructor=e}var i={}.hasOwnProperty;for(var r in t)i.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},n.Decorate=function(e,n){function i(){var t=Array.prototype.unshift,i=n.prototype.constructor.length,r=e.prototype.constructor;i>0&&(t.call(arguments,e.prototype.constructor),r=n.prototype.constructor),r.apply(this,arguments)}function r(){this.constructor=i}var a=t(n),o=t(e);n.displayName=e.displayName,i.prototype=new r;for(var s=0;s<o.length;s++){var l=o[s];i.prototype[l]=e.prototype[l]}for(var d=(function(e){var t=function(){};e in i.prototype&&(t=i.prototype[e]);var r=n.prototype[e];return function(){var e=Array.prototype.unshift;return e.call(arguments,t),r.apply(this,arguments)}}),u=0;u<a.length;u++){var c=a[u];i.prototype[c]=d(c)}return i};var i=function(){this.listeners={}};return i.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},i.prototype.trigger=function(e){var t=Array.prototype.slice,n=t.call(arguments,1);this.listeners=this.listeners||{},null==n&&(n=[]),0===n.length&&n.push({}),n[0]._type=e,e in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(e,t){for(var n=0,i=e.length;n<i;n++)e[n].apply(this,t)},n.Observable=i,n.generateChars=function(e){for(var t="",n=0;n<e;n++){var i=Math.floor(36*Math.random());t+=i.toString(36)}return t},n.bind=function(e,t){return function(){e.apply(t,arguments)}},n._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var r=0;r<n.length;r++){var a=n[r];a=a.substring(0,1).toLowerCase()+a.substring(1),a in i||(i[a]={}),r==n.length-1&&(i[a]=e[t]),i=i[a]}delete e[t]}}return e},n.hasScroll=function(t,n){var i=e(n),r=n.style.overflowX,a=n.style.overflowY;return(r!==a||"hidden"!==a&&"visible"!==a)&&("scroll"===r||"scroll"===a||(i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth))},n.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},n.appendMany=function(t,n){if("1.7"===e.fn.jquery.substr(0,3)){var i=e();e.map(n,function(e){i=i.add(e)}),n=i}t.append(n)},n}),t.define("select2/results",["jquery","./utils"],function(e,t){function n(e,t,i){this.$element=e,this.data=i,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&t.attr("aria-multiselectable","true"),this.$results=t,t},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(t){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=e('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),r=this.options.get("translations").get(t.message);i.append(n(r(t.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(e){this.hideLoading();var t=[];if(null==e.results||0===e.results.length)return void(0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"}));e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],r=this.option(i);t.push(r)}this.$results.append(t)},n.prototype.position=function(e,t){var n=t.find(".select2-results");n.append(e)},n.prototype.sort=function(e){var t=this.options.get("sorter");return t(e)},n.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]"),t=e.filter("[aria-selected=true]");t.length>0?t.first().trigger("mouseenter"):e.first().trigger("mouseenter"),this.ensureHighlightVisible()},n.prototype.setClasses=function(){var t=this;this.data.current(function(n){var i=e.map(n,function(e){return e.id.toString()}),r=t.$results.find(".select2-results__option[aria-selected]");r.each(function(){var t=e(this),n=e.data(this,"data"),r=""+n.id;null!=n.element&&n.element.selected||null==n.element&&e.inArray(r,i)>-1?t.attr("aria-selected","true"):t.attr("aria-selected","false")})})},n.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:t(e)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(t){var n=document.createElement("li");n.className="select2-results__option";var i={role:"treeitem","aria-selected":"false"};t.disabled&&(delete i["aria-selected"],i["aria-disabled"]="true"),null==t.id&&delete i["aria-selected"],null!=t._resultId&&(n.id=t._resultId),t.title&&(n.title=t.title),t.children&&(i.role="group",i["aria-label"]=t.text,delete i["aria-selected"]);for(var r in i){var a=i[r];n.setAttribute(r,a)}if(t.children){var o=e(n),s=document.createElement("strong");s.className="select2-results__group";e(s);this.template(t,s);for(var l=[],d=0;d<t.children.length;d++){var u=t.children[d],c=this.option(u);l.push(c)}var h=e("<ul></ul>",{"class":"select2-results__options select2-results__options--nested"});h.append(l),o.append(s),o.append(h)}else this.template(t,n);return e.data(n,"data",t),n},n.prototype.bind=function(t,n){var i=this,r=t.id+"-results";this.$results.attr("id",r),t.on("results:all",function(e){i.clear(),i.append(e.data),t.isOpen()&&(i.setClasses(),i.highlightFirstItem())}),t.on("results:append",function(e){i.append(e.data),t.isOpen()&&i.setClasses()}),t.on("query",function(e){i.hideMessages(),i.showLoading(e)}),t.on("select",function(){t.isOpen()&&(i.setClasses(),i.highlightFirstItem())}),t.on("unselect",function(){t.isOpen()&&(i.setClasses(),i.highlightFirstItem())}),t.on("open",function(){i.$results.attr("aria-expanded","true"),i.$results.attr("aria-hidden","false"),i.setClasses(),i.ensureHighlightVisible()}),t.on("close",function(){i.$results.attr("aria-expanded","false"),i.$results.attr("aria-hidden","true"),i.$results.removeAttr("aria-activedescendant")}),t.on("results:toggle",function(){var e=i.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),t.on("results:select",function(){var e=i.getHighlightedResults();if(0!==e.length){var t=e.data("data");"true"==e.attr("aria-selected")?i.trigger("close",{}):i.trigger("select",{data:t})}}),t.on("results:previous",function(){var e=i.getHighlightedResults(),t=i.$results.find("[aria-selected]"),n=t.index(e);if(0!==n){var r=n-1;0===e.length&&(r=0);var a=t.eq(r);a.trigger("mouseenter");var o=i.$results.offset().top,s=a.offset().top,l=i.$results.scrollTop()+(s-o);0===r?i.$results.scrollTop(0):s-o<0&&i.$results.scrollTop(l)}}),t.on("results:next",function(){var e=i.getHighlightedResults(),t=i.$results.find("[aria-selected]"),n=t.index(e),r=n+1;if(!(r>=t.length)){var a=t.eq(r);a.trigger("mouseenter");var o=i.$results.offset().top+i.$results.outerHeight(!1),s=a.offset().top+a.outerHeight(!1),l=i.$results.scrollTop()+s-o;0===r?i.$results.scrollTop(0):s>o&&i.$results.scrollTop(l)}}),t.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")}),t.on("results:message",function(e){i.displayMessage(e)}),e.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=i.$results.scrollTop(),n=i.$results.get(0).scrollHeight-t+e.deltaY,r=e.deltaY>0&&t-e.deltaY<=0,a=e.deltaY<0&&n<=i.$results.height();r?(i.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):a&&(i.$results.scrollTop(i.$results.get(0).scrollHeight-i.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(t){var n=e(this),r=n.data("data");return"true"===n.attr("aria-selected")?void(i.options.get("multiple")?i.trigger("unselect",{originalEvent:t,data:r}):i.trigger("close",{})):void i.trigger("select",{originalEvent:t,data:r})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(t){var n=e(this).data("data");i.getHighlightedResults().removeClass("select2-results__option--highlighted"),i.trigger("results:focus",{data:n,element:e(this)})})},n.prototype.getHighlightedResults=function(){var e=this.$results.find(".select2-results__option--highlighted");return e},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(0!==e.length){var t=this.$results.find("[aria-selected]"),n=t.index(e),i=this.$results.offset().top,r=e.offset().top,a=this.$results.scrollTop()+(r-i),o=r-i;a-=2*e.outerHeight(!1),n<=2?this.$results.scrollTop(0):(o>this.$results.outerHeight()||o<0)&&this.$results.scrollTop(a)}},n.prototype.template=function(t,n){var i=this.options.get("templateResult"),r=this.options.get("escapeMarkup"),a=i(t,n);null==a?n.style.display="none":"string"==typeof a?n.innerHTML=r(a):e(n).append(a)},n}),t.define("select2/keys",[],function(){var e={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return e}),t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,t.Observable),i.prototype.render=function(){var t=e('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=this.$element.data("old-tabindex")?this._tabindex=this.$element.data("old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),t.attr("title",this.$element.attr("title")),t.attr("tabindex",this._tabindex),this.$selection=t,t},i.prototype.bind=function(e,t){var i=this,r=(e.id+"-container",e.id+"-results");this.container=e,this.$selection.on("focus",function(e){i.trigger("focus",e)}),this.$selection.on("blur",function(e){i._handleBlur(e)}),this.$selection.on("keydown",function(e){i.trigger("keypress",e),e.which===n.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){i.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){i.update(e.data)}),e.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",r),i._attachCloseHandler(e)}),e.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.focus(),i._detachCloseHandler(e)}),e.on("enable",function(){i.$selection.attr("tabindex",i._tabindex)}),e.on("disable",function(){i.$selection.attr("tabindex","-1")})},i.prototype._handleBlur=function(t){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||e.contains(n.$selection[0],document.activeElement)||n.trigger("blur",t)},1)},i.prototype._attachCloseHandler=function(t){e(document.body).on("mousedown.select2."+t.id,function(t){var n=e(t.target),i=n.closest(".select2"),r=e(".select2.select2-container--open");r.each(function(){var t=e(this);if(this!=i[0]){var n=t.data("element");n.select2("close")}})})},i.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)},i.prototype.position=function(e,t){var n=t.find(".selection");n.append(e)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},i}),t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function r(){r.__super__.constructor.apply(this,arguments)}return n.Extend(r,t),r.prototype.render=function(){var e=r.__super__.render.call(this);return e.addClass("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},r.prototype.bind=function(e,t){var n=this;r.__super__.bind.apply(this,arguments);var i=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),e.on("focus",function(t){e.isOpen()||n.$selection.focus()}),e.on("selection:update",function(e){n.update(e.data)})},r.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},r.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},r.prototype.selectionContainer=function(){return e("<span></span>")},r.prototype.update=function(e){if(0===e.length)return void this.clear();var t=e[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(t,n);n.empty().append(i),n.prop("title",t.title||t.text)},r}),t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,n){function i(e,t){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,t),i.prototype.render=function(){var e=i.__super__.render.call(this);return e.addClass("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},i.prototype.bind=function(t,n){var r=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(e){r.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(t){if(!r.options.get("disabled")){var n=e(this),i=n.parent(),a=i.data("data");r.trigger("unselect",{originalEvent:t,data:a})}})},i.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()},i.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},i.prototype.selectionContainer=function(){var t=e('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');return t},i.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],i=0;i<e.length;i++){var r=e[i],a=this.selectionContainer(),o=this.display(r,a);a.append(o),a.prop("title",r.title||r.text),a.data("data",r),t.push(a)}var s=this.$selection.find(".select2-selection__rendered");n.appendMany(s,t)}},i}),t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return t.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},t.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},t.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id,i=t.length>1;if(i||n)return e.call(this,t);this.clear();var r=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r);
},t}),t.define("select2/selection/allowClear",["jquery","../keys"],function(e,t){function n(){}return n.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},n.prototype._handleClear=function(e,t){if(!this.options.get("disabled")){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){t.stopPropagation();for(var i=n.data("data"),r=0;r<i.length;r++){var a={data:i[r]};if(this.trigger("unselect",a),a.prevented)return}this.$element.val(this.placeholder.id).trigger("change"),this.trigger("toggle",{})}}},n.prototype._handleKeyboardClear=function(e,n,i){i.isOpen()||n.which!=t.DELETE&&n.which!=t.BACKSPACE||this._handleClear(n)},n.prototype.update=function(t,n){if(t.call(this,n),!(this.$selection.find(".select2-selection__placeholder").length>0||0===n.length)){var i=e('<span class="select2-selection__clear">&times;</span>');i.data("data",n),this.$selection.find(".select2-selection__rendered").prepend(i)}},n}),t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,n){function i(e,t,n){e.call(this,t,n)}return i.prototype.render=function(t){var n=e('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=t.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(e,t,i){var r=this;e.call(this,t,i),t.on("open",function(){r.$search.trigger("focus")}),t.on("close",function(){r.$search.val(""),r.$search.removeAttr("aria-activedescendant"),r.$search.trigger("focus")}),t.on("enable",function(){r.$search.prop("disabled",!1),r._transferTabIndex()}),t.on("disable",function(){r.$search.prop("disabled",!0)}),t.on("focus",function(e){r.$search.trigger("focus")}),t.on("results:focus",function(e){r.$search.attr("aria-activedescendant",e.id)}),this.$selection.on("focusin",".select2-search--inline",function(e){r.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){r._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){e.stopPropagation(),r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented();var t=e.which;if(t===n.BACKSPACE&&""===r.$search.val()){var i=r.$searchContainer.prev(".select2-selection__choice");if(i.length>0){var a=i.data("data");r.searchRemoveChoice(a),e.preventDefault()}}});var a=document.documentMode,o=a&&a<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){return o?void r.$selection.off("input.search input.searchcheck"):void r.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(o&&"input"===e.type)return void r.$selection.off("input.search input.searchcheck");var t=e.which;t!=n.SHIFT&&t!=n.CTRL&&t!=n.ALT&&t!=n.TAB&&r.handleSearch(e)})},i.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},i.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),e.call(this,t),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.focus()},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(""!==this.$search.attr("placeholder"))e=this.$selection.find(".select2-selection__rendered").innerWidth();else{var t=this.$search.val().length+1;e=.75*t+"em"}this.$search.css("width",e)},i}),t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}return t.prototype.bind=function(t,n,i){var r=this,a=["open","opening","close","closing","select","selecting","unselect","unselecting"],o=["opening","closing","selecting","unselecting"];t.call(this,n,i),n.on("*",function(t,n){if(e.inArray(t,a)!==-1){n=n||{};var i=e.Event("select2:"+t,{params:n});r.$element.trigger(i),e.inArray(t,o)!==-1&&(n.prevented=i.isDefaultPrevented())}})},t}),t.define("select2/translation",["jquery","require"],function(e,t){function n(e){this.dict=e||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(e){return this.dict[e]},n.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)},n._cache={},n.loadPath=function(e){if(!(e in n._cache)){var i=t(e);n._cache[e]=i}return new n(n._cache[e])},n}),t.define("select2/diacritics",[],function(){var e={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};return e}),t.define("select2/data/base",["../utils"],function(e){function t(e,n){t.__super__.constructor.call(this)}return e.Extend(t,e.Observable),t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},t.prototype.bind=function(e,t){},t.prototype.destroy=function(){},t.prototype.generateResultId=function(t,n){var i=t.id+"-result-";return i+=e.generateChars(4),i+=null!=n.id?"-"+n.id.toString():"-"+e.generateChars(4)},t}),t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,e),i.prototype.current=function(e){var t=[],i=this;this.$element.find(":selected").each(function(){var e=n(this),r=i.item(e);t.push(r)}),e(t)},i.prototype.select=function(e){var t=this;if(e.selected=!0,n(e.element).is("option"))return e.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var r=[];e=[e],e.push.apply(e,i);for(var a=0;a<e.length;a++){var o=e[a].id;n.inArray(o,r)===-1&&r.push(o)}t.$element.val(r),t.$element.trigger("change")});else{var i=e.id;this.$element.val(i),this.$element.trigger("change")}},i.prototype.unselect=function(e){var t=this;if(this.$element.prop("multiple"))return e.selected=!1,n(e.element).is("option")?(e.element.selected=!1,void this.$element.trigger("change")):void this.current(function(i){for(var r=[],a=0;a<i.length;a++){var o=i[a].id;o!==e.id&&n.inArray(o,r)===-1&&r.push(o)}t.$element.val(r),t.$element.trigger("change")})},i.prototype.bind=function(e,t){var n=this;this.container=e,e.on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){n.removeData(this,"data")})},i.prototype.query=function(e,t){var i=[],r=this,a=this.$element.children();a.each(function(){var t=n(this);if(t.is("option")||t.is("optgroup")){var a=r.item(t),o=r.matches(e,a);null!==o&&i.push(o)}}),t({results:i})},i.prototype.addOptions=function(e){t.appendMany(this.$element,e)},i.prototype.option=function(e){var t;e.children?(t=document.createElement("optgroup"),t.label=e.text):(t=document.createElement("option"),void 0!==t.textContent?t.textContent=e.text:t.innerText=e.text),e.id&&(t.value=e.id),e.disabled&&(t.disabled=!0),e.selected&&(t.selected=!0),e.title&&(t.title=e.title);var i=n(t),r=this._normalizeItem(e);return r.element=t,n.data(t,"data",r),i},i.prototype.item=function(e){var t={};if(t=n.data(e[0],"data"),null!=t)return t;if(e.is("option"))t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if(e.is("optgroup")){t={text:e.prop("label"),children:[],title:e.prop("title")};for(var i=e.children("option"),r=[],a=0;a<i.length;a++){var o=n(i[a]),s=this.item(o);r.push(s)}t.children=r}return t=this._normalizeItem(t),t.element=e[0],n.data(e[0],"data",t),t},i.prototype._normalizeItem=function(e){n.isPlainObject(e)||(e={id:e,text:e}),e=n.extend({},{text:""},e);var t={selected:!1,disabled:!1};return null!=e.id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),n.extend({},t,e)},i.prototype.matches=function(e,t){var n=this.options.get("matcher");return n(e,t)},i}),t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,n){function i(e,t){var n=t.get("data")||[];i.__super__.constructor.call(this,e,t),this.addOptions(this.convertToOptions(n))}return t.Extend(i,e),i.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,n){return n.value==e.id.toString()});0===t.length&&(t=this.option(e),this.addOptions(t)),i.__super__.select.call(this,e)},i.prototype.convertToOptions=function(e){function i(e){return function(){return n(this).val()==e.id}}for(var r=this,a=this.$element.find("option"),o=a.map(function(){return r.item(n(this)).id}).get(),s=[],l=0;l<e.length;l++){var d=this._normalizeItem(e[l]);if(n.inArray(d.id,o)>=0){var u=a.filter(i(d)),c=this.item(u),h=n.extend(!0,{},d,c),p=this.option(h);u.replaceWith(p)}else{var m=this.option(d);if(d.children){var f=this.convertToOptions(d.children);t.appendMany(m,f)}s.push(m)}}return s},i}),t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,n){function i(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype._applyDefaults=function(e){var t={data:function(e){return n.extend({},e,{q:e.term})},transport:function(e,t,i){var r=n.ajax(e);return r.then(t),r.fail(i),r}};return n.extend({},t,e,!0)},i.prototype.processResults=function(e){return e},i.prototype.query=function(e,t){function i(){var i=a.transport(a,function(i){var a=r.processResults(i,e);r.options.get("debug")&&window.console&&console.error&&(a&&a.results&&n.isArray(a.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),t(a)},function(){i.status&&"0"===i.status||r.trigger("results:message",{message:"errorLoading"})});r._request=i}var r=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var a=n.extend({type:"GET"},this.ajaxOptions);"function"==typeof a.url&&(a.url=a.url.call(this.$element,e)),"function"==typeof a.data&&(a.data=a.data.call(this.$element,e)),this.ajaxOptions.delay&&null!=e.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},i}),t.define("select2/data/tags",["jquery"],function(e){function t(t,n,i){var r=i.get("tags"),a=i.get("createTag");void 0!==a&&(this.createTag=a);var o=i.get("insertTag");if(void 0!==o&&(this.insertTag=o),t.call(this,n,i),e.isArray(r))for(var s=0;s<r.length;s++){var l=r[s],d=this._normalizeItem(l),u=this.option(d);this.$element.append(u)}}return t.prototype.query=function(e,t,n){function i(e,a){for(var o=e.results,s=0;s<o.length;s++){var l=o[s],d=null!=l.children&&!i({results:l.children},!0),u=l.text===t.term;if(u||d)return!a&&(e.data=o,void n(e))}if(a)return!0;var c=r.createTag(t);if(null!=c){var h=r.option(c);h.attr("data-select2-tag",!0),r.addOptions([h]),r.insertTag(o,c)}e.results=o,n(e)}var r=this;return this._removeOldTags(),null==t.term||null!=t.page?void e.call(this,t,n):void e.call(this,t,i)},t.prototype.createTag=function(t,n){var i=e.trim(n.term);return""===i?null:{id:i,text:i}},t.prototype.insertTag=function(e,t,n){t.unshift(n)},t.prototype._removeOldTags=function(t){var n=(this._lastTag,this.$element.find("option[data-select2-tag]"));n.each(function(){this.selected||e(this).remove()})},t}),t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return t.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},t.prototype.query=function(t,n,i){function r(t){var n=o._normalizeItem(t),i=o.$element.find("option").filter(function(){return e(this).val()===n.id});if(!i.length){var r=o.option(n);r.attr("data-select2-tag",!0),o._removeOldTags(),o.addOptions([r])}a(n)}function a(e){o.trigger("select",{data:e})}var o=this;n.term=n.term||"";var s=this.tokenizer(n,this.options,r);s.term!==n.term&&(this.$search.length&&(this.$search.val(s.term),this.$search.focus()),n.term=s.term),t.call(this,n,i)},t.prototype.tokenizer=function(t,n,i,r){for(var a=i.get("tokenSeparators")||[],o=n.term,s=0,l=this.createTag||function(e){return{id:e.term,text:e.term}};s<o.length;){var d=o[s];if(e.inArray(d,a)!==-1){var u=o.substr(0,s),c=e.extend({},n,{term:u}),h=l(c);null!=h?(r(h),o=o.substr(s+1)||"",s=0):s++}else s++}return{term:o}},t}),t.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){return t.term=t.term||"",t.term.length<this.minimumInputLength?void this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}}):void e.call(this,t,n)},e}),t.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){return t.term=t.term||"",this.maximumInputLength>0&&t.term.length>this.maximumInputLength?void this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}}):void e.call(this,t,n)},e}),t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){var i=this;this.current(function(r){var a=null!=r?r.length:0;return i.maximumSelectionLength>0&&a>=i.maximumSelectionLength?void i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):void e.call(i,t,n)})},e}),t.define("select2/dropdown",["jquery","./utils"],function(e,t){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<span class="select2-dropdown"><span class="select2-results"></span></span>');return t.attr("dir",this.options.get("dir")),this.$dropdown=t,t},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function n(){}return n.prototype.render=function(t){var n=t.call(this),i=e('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),this.$search.on("keydown",function(e){r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(t){e(this).off("keyup")}),this.$search.on("keyup input",function(e){r.handleSearch(e)}),n.on("open",function(){r.$search.attr("tabindex",0),r.$search.focus(),window.setTimeout(function(){r.$search.focus()},0)}),n.on("close",function(){r.$search.attr("tabindex",-1),r.$search.val("")}),n.on("focus",function(){n.isOpen()&&r.$search.focus()}),n.on("results:all",function(e){if(null==e.query.term||""===e.query.term){var t=r.showSearch(e);t?r.$searchContainer.removeClass("select2-search--hide"):r.$searchContainer.addClass("select2-search--hide")}})},n.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.showSearch=function(e,t){return!0},n}),t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;i>=0;i--){var r=t[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},e}),t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return t.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&this.$results.append(this.$loadingMore)},t.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),n.on("query",function(e){r.lastParams=e,r.loading=!0}),n.on("query:append",function(e){r.lastParams=e,r.loading=!0}),this.$results.on("scroll",function(){var t=e.contains(document.documentElement,r.$loadingMore[0]);if(!r.loading&&t){var n=r.$results.offset().top+r.$results.outerHeight(!1),i=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(!1);n+50>=i&&r.loadMore()}})},t.prototype.loadMore=function(){this.loading=!0;var t=e.extend({},{page:1},this.lastParams);t.page++,this.trigger("query:append",t)},t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},t.prototype.createLoadingMore=function(){var t=e('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return t.html(n(this.lastParams)),t},t}),t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function n(t,n,i){this.$dropdownParent=i.get("dropdownParent")||e(document.body),t.call(this,n,i)}return n.prototype.bind=function(e,t,n){var i=this,r=!1;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),r||(r=!0,t.on("results:all",function(){i._positionDropdown(),i._resizeDropdown()}),t.on("results:append",function(){i._positionDropdown(),i._resizeDropdown()}))}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},n.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t.removeClass("select2"),t.addClass("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(t){var n=e("<span></span>"),i=t.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},n.prototype._attachPositioningHandler=function(n,i){var r=this,a="scroll.select2."+i.id,o="resize.select2."+i.id,s="orientationchange.select2."+i.id,l=this.$container.parents().filter(t.hasScroll);l.each(function(){e(this).data("select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})}),l.on(a,function(t){var n=e(this).data("select2-scroll-position");e(this).scrollTop(n.y)}),e(window).on(a+" "+o+" "+s,function(e){r._positionDropdown(),r._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var r="scroll.select2."+i.id,a="resize.select2."+i.id,o="orientationchange.select2."+i.id,s=this.$container.parents().filter(t.hasScroll);s.off(r),e(window).off(r+" "+a+" "+o)},n.prototype._positionDropdown=function(){var t=e(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),r=null,a=this.$container.offset();a.bottom=a.top+this.$container.outerHeight(!1);var o={height:this.$container.outerHeight(!1)};o.top=a.top,o.bottom=a.top+o.height;var s={height:this.$dropdown.outerHeight(!1)},l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()},d=l.top<a.top-s.height,u=l.bottom>a.bottom+s.height,c={left:a.left,top:o.bottom},h=this.$dropdownParent;"static"===h.css("position")&&(h=h.offsetParent());var p=h.offset();c.top-=p.top,c.left-=p.left,n||i||(r="below"),u||!d||n?!d&&u&&n&&(r="below"):r="above",("above"==r||n&&"below"!==r)&&(c.top=o.top-p.top-s.height),null!=r&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)),this.$dropdownContainer.css(c)},n.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.position="relative",e.width="auto"),this.$dropdown.css(e)},n.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(t){for(var n=0,i=0;i<t.length;i++){var r=t[i];r.children?n+=e(r.children):n++}return n}function t(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return t.prototype.showSearch=function(t,n){return!(e(n.data.results)<this.minimumResultsForSearch)&&t.call(this,n)},t}),t.define("select2/dropdown/selectOnClose",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(e){i._handleSelectOnClose(e)})},e.prototype._handleSelectOnClose=function(e,t){if(t&&null!=t.originalSelect2Event){var n=t.originalSelect2Event;if("select"===n._type||"unselect"===n._type)return}var i=this.getHighlightedResults();if(!(i.length<1)){var r=i.data("data");null!=r.element&&r.element.selected||null==r.element&&r.selected||this.trigger("select",{data:r})}},e}),t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&n.ctrlKey||this.trigger("close",{originalEvent:n,originalSelect2Event:t})},e}),t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,n="Please delete "+t+" character";return 1!=t&&(n+="s"),n},inputTooShort:function(e){var t=e.minimum-e.input.length,n="Please enter "+t+" or more characters";return n},loadingMore:function(){return"Loading more results…"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searching…"}}}),t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,n,i,r,a,o,s,l,d,u,c,h,p,m,f,_,y,g,v,M,w,b,L,D,k,T,S,Y){function x(){this.reset()}x.prototype.apply=function(c){if(c=e.extend(!0,{},this.defaults,c),null==c.dataAdapter){if(null!=c.ajax?c.dataAdapter=m:null!=c.data?c.dataAdapter=p:c.dataAdapter=h,c.minimumInputLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,y)),c.maximumInputLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,g)),c.maximumSelectionLength>0&&(c.dataAdapter=d.Decorate(c.dataAdapter,v)),c.tags&&(c.dataAdapter=d.Decorate(c.dataAdapter,f)),null==c.tokenSeparators&&null==c.tokenizer||(c.dataAdapter=d.Decorate(c.dataAdapter,_)),null!=c.query){var Y=t(c.amdBase+"compat/query");c.dataAdapter=d.Decorate(c.dataAdapter,Y)}if(null!=c.initSelection){var x=t(c.amdBase+"compat/initSelection");c.dataAdapter=d.Decorate(c.dataAdapter,x)}}if(null==c.resultsAdapter&&(c.resultsAdapter=n,null!=c.ajax&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,L)),null!=c.placeholder&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,b)),c.selectOnClose&&(c.resultsAdapter=d.Decorate(c.resultsAdapter,T))),null==c.dropdownAdapter){if(c.multiple)c.dropdownAdapter=M;else{var C=d.Decorate(M,w);c.dropdownAdapter=C}if(0!==c.minimumResultsForSearch&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,k)),c.closeOnSelect&&(c.dropdownAdapter=d.Decorate(c.dropdownAdapter,S)),
null!=c.dropdownCssClass||null!=c.dropdownCss||null!=c.adaptDropdownCssClass){var E=t(c.amdBase+"compat/dropdownCss");c.dropdownAdapter=d.Decorate(c.dropdownAdapter,E)}c.dropdownAdapter=d.Decorate(c.dropdownAdapter,D)}if(null==c.selectionAdapter){if(c.multiple?c.selectionAdapter=r:c.selectionAdapter=i,null!=c.placeholder&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,a)),c.allowClear&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,o)),c.multiple&&(c.selectionAdapter=d.Decorate(c.selectionAdapter,s)),null!=c.containerCssClass||null!=c.containerCss||null!=c.adaptContainerCssClass){var H=t(c.amdBase+"compat/containerCss");c.selectionAdapter=d.Decorate(c.selectionAdapter,H)}c.selectionAdapter=d.Decorate(c.selectionAdapter,l)}if("string"==typeof c.language)if(c.language.indexOf("-")>0){var A=c.language.split("-"),P=A[0];c.language=[c.language,P]}else c.language=[c.language];if(e.isArray(c.language)){var j=new u;c.language.push("en");for(var I=c.language,O=0;O<I.length;O++){var z=I[O],F={};try{F=u.loadPath(z)}catch(W){try{z=this.defaults.amdLanguageBase+z,F=u.loadPath(z)}catch($){c.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+z+'" could not be automatically loaded. A fallback will be used instead.');continue}}j.extend(F)}c.translations=j}else{var R=u.loadPath(this.defaults.amdLanguageBase+"en"),N=new u(c.language);N.extend(R),c.translations=N}return c},x.prototype.reset=function(){function t(e){function t(e){return c[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function n(i,r){if(""===e.trim(i.term))return r;if(r.children&&r.children.length>0){for(var a=e.extend(!0,{},r),o=r.children.length-1;o>=0;o--){var s=r.children[o],l=n(i,s);null==l&&a.children.splice(o,1)}return a.children.length>0?a:n(i,a)}var d=t(r.text).toUpperCase(),u=t(i.term).toUpperCase();return d.indexOf(u)>-1?r:null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:d.escapeMarkup,language:Y,matcher:n,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},x.prototype.set=function(t,n){var i=e.camelCase(t),r={};r[i]=n;var a=d._convertData(r);e.extend(this.defaults,a)};var C=new x;return C}),t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,n,i){function r(t,r){if(this.options=t,null!=r&&this.fromElement(r),this.options=n.apply(this.options),r&&r.is("input")){var a=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,a)}}return r.prototype.fromElement=function(e){var n=["select2"];null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.language&&(e.prop("lang")?this.options.language=e.prop("lang").toLowerCase():e.closest("[lang]").prop("lang")&&(this.options.language=e.closest("[lang]").prop("lang"))),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),e.data("select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),e.data("data",e.data("select2Tags")),e.data("tags",!0)),e.data("ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",e.data("ajaxUrl")),e.data("ajax--url",e.data("ajaxUrl")));var r={};r=t.fn.jquery&&"1."==t.fn.jquery.substr(0,2)&&e[0].dataset?t.extend(!0,{},e[0].dataset,e.data()):e.data();var a=t.extend(!0,{},r);a=i._convertData(a);for(var o in a)t.inArray(o,n)>-1||(t.isPlainObject(this.options[o])?t.extend(this.options[o],a[o]):this.options[o]=a[o]);return this},r.prototype.get=function(e){return this.options[e]},r.prototype.set=function(e,t){this.options[e]=t},r}),t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,n,i){var r=function(e,n){null!=e.data("select2")&&e.data("select2").destroy(),this.$element=e,this.id=this._generateId(e),n=n||{},this.options=new t(n,e),r.__super__.constructor.call(this);var i=e.attr("tabindex")||0;e.data("old-tabindex",i),e.attr("tabindex","-1");var a=this.options.get("dataAdapter");this.dataAdapter=new a(e,this.options);var o=this.render();this._placeContainer(o);var s=this.options.get("selectionAdapter");this.selection=new s(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,o);var l=this.options.get("dropdownAdapter");this.dropdown=new l(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,o);var d=this.options.get("resultsAdapter");this.results=new d(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){u.trigger("selection:update",{data:e})}),e.addClass("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),e.data("select2",this)};return n.Extend(r,n.Observable),r.prototype._generateId=function(e){var t="";return t=null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+n.generateChars(2):n.generateChars(4),t=t.replace(/(:|\.|\[|\]|,)/g,""),t="select2-"+t},r.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},r.prototype._resolveWidth=function(e,t){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t){var i=this._resolveWidth(e,"style");return null!=i?i:this._resolveWidth(e,"element")}if("element"==t){var r=e.outerWidth(!1);return r<=0?"auto":r+"px"}if("style"==t){var a=e.attr("style");if("string"!=typeof a)return null;for(var o=a.split(";"),s=0,l=o.length;s<l;s+=1){var d=o[s].replace(/\s/g,""),u=d.match(n);if(null!==u&&u.length>=1)return u[1]}return null}return t},r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},r.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})}),this.$element.on("focus.select2",function(e){t.trigger("focus",e)}),this._syncA=n.bind(this._syncAttributes,this),this._syncS=n.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var i=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=i?(this._observer=new i(function(n){e.each(n,t._syncA),e.each(n,t._syncS)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",t._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",t._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,!1))},r.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerSelectionEvents=function(){var t=this,n=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()}),this.selection.on("focus",function(e){t.focus(e)}),this.selection.on("*",function(i,r){e.inArray(i,n)===-1&&t.trigger(i,r)})},r.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")}),this.on("close",function(){e.$container.removeClass("select2-container--open")}),this.on("enable",function(){e.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){e.$container.addClass("select2-container--disabled")}),this.on("blur",function(){e.$container.removeClass("select2-container--focus")}),this.on("query",function(t){e.isOpen()||e.trigger("open",{}),this.dataAdapter.query(t,function(n){e.trigger("results:all",{data:n,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(n){e.trigger("results:append",{data:n,query:t})})}),this.on("keypress",function(t){var n=t.which;e.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&t.altKey?(e.close(),t.preventDefault()):n===i.ENTER?(e.trigger("results:select",{}),t.preventDefault()):n===i.SPACE&&t.ctrlKey?(e.trigger("results:toggle",{}),t.preventDefault()):n===i.UP?(e.trigger("results:previous",{}),t.preventDefault()):n===i.DOWN&&(e.trigger("results:next",{}),t.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&t.altKey)&&(e.open(),t.preventDefault())})},r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},r.prototype._syncSubtree=function(e,t){var n=!1,i=this;if(!e||!e.target||"OPTION"===e.target.nodeName||"OPTGROUP"===e.target.nodeName){if(t)if(t.addedNodes&&t.addedNodes.length>0)for(var r=0;r<t.addedNodes.length;r++){var a=t.addedNodes[r];a.selected&&(n=!0)}else t.removedNodes&&t.removedNodes.length>0&&(n=!0);else n=!0;n&&this.dataAdapter.current(function(e){i.trigger("selection:update",{data:e})})}},r.prototype.trigger=function(e,t){var n=r.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(void 0===t&&(t={}),e in i){var a=i[e],o={prevented:!1,name:e,args:t};if(n.call(this,a,o),o.prevented)return void(t.prevented=!0)}n.call(this,e,t)},r.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},r.prototype.open=function(){this.isOpen()||this.trigger("query",{})},r.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},r.prototype.focus=function(e){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},r.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=e&&0!==e.length||(e=[!0]);var t=!e[0];this.$element.prop("disabled",t)},r.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var e=[];return this.dataAdapter.current(function(t){e=t}),e},r.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==t||0===t.length)return this.$element.val();var n=t[0];e.isArray(n)&&(n=e.map(n,function(e){return e.toString()})),this.$element.val(n).trigger("change")},r.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",this.$element.data("old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},r.prototype.render=function(){var t=e('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return t.attr("dir",this.options.get("dir")),this.$container=t,this.$container.addClass("select2-container--"+this.options.get("theme")),t.data("element",this.$element),t},r}),t.define("jquery-mousewheel",["jquery"],function(e){return e}),t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(e,t,n,i){if(null==e.fn.select2){var r=["open","close","destroy"];e.fn.select2=function(t){if(t=t||{},"object"==typeof t)return this.each(function(){var i=e.extend(!0,{},t);new n(e(this),i)}),this;if("string"==typeof t){var i,a=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=e(this).data("select2");null==n&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2."),i=n[t].apply(n,a)}),e.inArray(t,r)>-1?this:i}throw new Error("Invalid arguments for Select2: "+t)}}return null==e.fn.select2.defaults&&(e.fn.select2.defaults=i),n}),{define:t.define,require:t.require}}(),n=t.require("jquery.select2");return e.fn.select2.amd=t,n}),function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var e=jQuery.fn.select2.amd;return e.define("select2/i18n/ru",[],function(){function e(e,t,n,i){return e%10<5&&e%10>0&&e%100<5||e%100>20?e%10>1?n:t:i}return{errorLoading:function(){return"Невозможно загрузить результаты"},inputTooLong:function(t){var n=t.input.length-t.maximum,i="Пожалуйста, введите на "+n+" символ";return i+=e(n,"","a","ов"),i+=" меньше"},inputTooShort:function(t){var n=t.minimum-t.input.length,i="Пожалуйста, введите еще хотя бы "+n+" символ";return i+=e(n,"","a","ов")},loadingMore:function(){return"Загрузка данных…"},maximumSelected:function(t){var n="Вы можете выбрать не более "+t.maximum+" элемент";return n+=e(t.maximum,"","a","ов")},noResults:function(){return"Совпадений не найдено"},searching:function(){return"Поиск…"}}}),{define:e.define,require:e.require}}(),function(e){function t(t,n,i){var r=e.Event(n);return t.trigger(r,i),r.result!==!1}e(document).on("click","[data-trigger='modal'], [data-trigger='nifty']",function(){var t=e(this).data("target");e(t).nifty("show")}),e(document).on("click",".md-overlay",function(){e(".nifty-modal.md-show").nifty("hide")}),e(document).on("click",".nifty-modal.md-show .md-close",function(){e(this).closest(".nifty-modal.md-show").nifty("hide")}),e.fn.extend({nifty:function(n){var i=this,r="transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",a=function(n){var a=!1;if(t(e(i),"show.nifty.modal")){e(i).one(r,function(t){a||(a=!0,t.preventDefault(),t.stopPropagation(),e(i).trigger("shown.nifty.modal"))});var o=Math.floor(e(i).width()/2),s=Math.floor(e(i).height()/2);e(".nifty-modal").css("transform","translateX(-"+o+"px) translateY(-"+s+"px)"),e(i).addClass("md-show")}},o=function(){var n=!1;t(e(i),"hide.nifty.modal")&&(e(i).one(r,function(t){n||(n=!0,t.preventDefault(),t.stopPropagation(),e(i).trigger("hidden.nifty.modal"))}),e(i).removeClass("md-show"))};return"show"==n?a():"hide"==n&&o(),this}})}(jQuery),function(){var e;e=function(){function e(e,t){var n,i;if(this.options={target:"instafeed",get:"popular",resolution:"thumbnail",sortBy:"none",links:!0,mock:!1,useHttp:!1},"object"==typeof e)for(n in e)i=e[n],this.options[n]=i;this.context=null!=t?t:this,this.unique=this._genKey()}return e.prototype.hasNext=function(){return"string"==typeof this.context.nextUrl&&this.context.nextUrl.length>0},e.prototype.next=function(){return!!this.hasNext()&&this.run(this.context.nextUrl)},e.prototype.run=function(t){var n,i,r;if("string"!=typeof this.options.clientId&&"string"!=typeof this.options.accessToken)throw new Error("Missing clientId or accessToken.");if("string"!=typeof this.options.accessToken&&"string"!=typeof this.options.clientId)throw new Error("Missing clientId or accessToken.");return null!=this.options.before&&"function"==typeof this.options.before&&this.options.before.call(this),"undefined"!=typeof document&&null!==document&&(r=document.createElement("script"),r.id="instafeed-fetcher",r.src=t||this._buildUrl(),n=document.getElementsByTagName("head"),n[0].appendChild(r),i="instafeedCache"+this.unique,window[i]=new e(this.options,this),window[i].unique=this.unique),!0},e.prototype.parse=function(e){var t,n,i,r,a,o,s,l,d,u,c,h,p,m,f,_,y,g,v,M,w,b,L,D,k,T,S,Y,x,C,E,H,A;if("object"!=typeof e){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"Invalid JSON data"),!1;throw new Error("Invalid JSON response")}if(200!==e.meta.code){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,e.meta.error_message),!1;throw new Error("Error from Instagram: "+e.meta.error_message)}if(0===e.data.length){if(null!=this.options.error&&"function"==typeof this.options.error)return this.options.error.call(this,"No images were returned from Instagram"),!1;throw new Error("No images were returned from Instagram")}if(null!=this.options.success&&"function"==typeof this.options.success&&this.options.success.call(this,e),this.context.nextUrl="",null!=e.pagination&&(this.context.nextUrl=e.pagination.next_url),"none"!==this.options.sortBy)switch(E="random"===this.options.sortBy?["","random"]:this.options.sortBy.split("-"),C="least"===E[0],E[1]){case"random":e.data.sort(function(){return.5-Math.random()});break;case"recent":e.data=this._sortBy(e.data,"created_time",C);break;case"liked":e.data=this._sortBy(e.data,"likes.count",C);break;case"commented":e.data=this._sortBy(e.data,"comments.count",C);break;default:throw new Error("Invalid option for sortBy: '"+this.options.sortBy+"'.")}if("undefined"!=typeof document&&null!==document&&this.options.mock===!1){if(_=e.data,x=parseInt(this.options.limit,10),null!=this.options.limit&&_.length>x&&(_=_.slice(0,x)),s=document.createDocumentFragment(),null!=this.options.filter&&"function"==typeof this.options.filter&&(_=this._filter(_,this.options.filter)),null!=this.options.template&&"string"==typeof this.options.template){for(d="",m="",M="",A=document.createElement("div"),c=0,k=_.length;c<k;c++){if(h=_[c],p=h.images[this.options.resolution],"object"!=typeof p)throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);w=p.width,g=p.height,v="square",w>g&&(v="landscape"),w<g&&(v="portrait"),f=p.url,u=window.location.protocol.indexOf("http")>=0,u&&!this.options.useHttp&&(f=f.replace(/https?:\/\//,"//")),m=this._makeTemplate(this.options.template,{model:h,id:h.id,link:h.link,type:h.type,image:f,width:w,height:g,orientation:v,caption:this._getObjectProperty(h,"caption.text"),likes:h.likes.count,comments:h.comments.count,location:this._getObjectProperty(h,"location.name")}),d+=m}for(A.innerHTML=d,r=[],i=0,n=A.childNodes.length;i<n;)r.push(A.childNodes[i]),i+=1;for(L=0,T=r.length;L<T;L++)Y=r[L],s.appendChild(Y)}else for(D=0,S=_.length;D<S;D++){if(h=_[D],y=document.createElement("img"),p=h.images[this.options.resolution],"object"!=typeof p)throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);f=p.url,u=window.location.protocol.indexOf("http")>=0,u&&!this.options.useHttp&&(f=f.replace(/https?:\/\//,"//")),y.src=f,this.options.links===!0?(t=document.createElement("a"),t.href=h.link,t.appendChild(y),s.appendChild(t)):s.appendChild(y)}if(H=this.options.target,"string"==typeof H&&(H=document.getElementById(H)),null==H)throw o='No element with id="'+this.options.target+'" on page.',new Error(o);H.appendChild(s),l=document.getElementsByTagName("head")[0],l.removeChild(document.getElementById("instafeed-fetcher")),b="instafeedCache"+this.unique,window[b]=void 0;try{delete window[b]}catch(P){a=P}}return null!=this.options.after&&"function"==typeof this.options.after&&this.options.after.call(this),!0},e.prototype._buildUrl=function(){var e,t,n;switch(e="https://api.instagram.com/v1",this.options.get){case"popular":t="media/popular";break;case"tagged":if(!this.options.tagName)throw new Error("No tag name specified. Use the 'tagName' option.");t="tags/"+this.options.tagName+"/media/recent";break;case"location":if(!this.options.locationId)throw new Error("No location specified. Use the 'locationId' option.");t="locations/"+this.options.locationId+"/media/recent";break;case"user":if(!this.options.userId)throw new Error("No user specified. Use the 'userId' option.");t="users/"+this.options.userId+"/media/recent";break;default:throw new Error("Invalid option for get: '"+this.options.get+"'.")}return n=e+"/"+t,n+=null!=this.options.accessToken?"?access_token="+this.options.accessToken:"?client_id="+this.options.clientId,null!=this.options.limit&&(n+="&count="+this.options.limit),n+="&callback=instafeedCache"+this.unique+".parse"},e.prototype._genKey=function(){var e;return e=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)},""+e()+e()+e()+e()},e.prototype._makeTemplate=function(e,t){var n,i,r,a,o;for(i=/(?:\{{2})([\w\[\]\.]+)(?:\}{2})/,n=e;i.test(n);)a=n.match(i)[1],o=null!=(r=this._getObjectProperty(t,a))?r:"",n=n.replace(i,function(){return""+o});return n},e.prototype._getObjectProperty=function(e,t){var n,i;for(t=t.replace(/\[(\w+)\]/g,".$1"),i=t.split(".");i.length;){if(n=i.shift(),!(null!=e&&n in e))return null;e=e[n]}return e},e.prototype._sortBy=function(e,t,n){var i;return i=function(e,i){var r,a;return r=this._getObjectProperty(e,t),a=this._getObjectProperty(i,t),n?r>a?1:-1:r<a?1:-1},e.sort(i.bind(this)),e},e.prototype._filter=function(e,t){var n,i,r,a,o;for(n=[],i=function(e){if(t(e))return n.push(e)},r=0,o=e.length;r<o;r++)a=e[r],i(a);return n},e}(),function(e,t){return"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&module.exports?module.exports=t():e.Instafeed=t()}(this,function(){return e})}.call(this),!function(e,t,n){"use strict";!function i(e,t,n){function r(o,s){if(!t[o]){if(!e[o]){var l="function"==typeof require&&require;if(!s&&l)return l(o,!0);if(a)return a(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var u=t[o]={exports:{}};e[o][0].call(u.exports,function(t){var n=e[o][1][t];return r(n?n:t)},u,u.exports,i,e,t,n)}return t[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(i,r,a){var o=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(a,"__esModule",{value:!0});var s,l,d,u,c=i("./modules/handle-dom"),h=i("./modules/utils"),p=i("./modules/handle-swal-dom"),m=i("./modules/handle-click"),f=i("./modules/handle-key"),_=o(f),y=i("./modules/default-params"),g=o(y),v=i("./modules/set-params"),M=o(v);a["default"]=d=u=function(){function i(e){var t=r;return t[e]===n?g["default"][e]:t[e]}var r=arguments[0];if(c.addClass(t.body,"stop-scrolling"),p.resetInput(),r===n)return h.logStr("SweetAlert expects at least 1 attribute!"),!1;var a=h.extend({},g["default"]);switch(typeof r){case"string":a.title=r,a.text=arguments[1]||"",a.type=arguments[2]||"";break;case"object":if(r.title===n)return h.logStr('Missing "title" argument!'),!1;a.title=r.title;for(var o in g["default"])a[o]=i(o);a.confirmButtonText=a.showCancelButton?"Confirm":g["default"].confirmButtonText,a.confirmButtonText=i("confirmButtonText"),a.doneFunction=arguments[1]||null;break;default:return h.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof r),!1}M["default"](a),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var d=p.getModal(),f=d.querySelectorAll("button"),y=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],v=function(e){return m.handleButton(e,a,d)},w=0;w<f.length;w++)for(var b=0;b<y.length;b++){var L=y[b];f[w][L]=v}p.getOverlay().onclick=v,s=e.onkeydown;var D=function(e){return _["default"](e,a,d)};e.onkeydown=D,e.onfocus=function(){setTimeout(function(){l!==n&&(l.focus(),l=n)},0)},u.enableButtons()},d.setDefaults=u.setDefaults=function(e){if(!e)throw new Error("userParams is required");if("object"!=typeof e)throw new Error("userParams has to be a object");h.extend(g["default"],e)},d.close=u.close=function(){var i=p.getModal();c.fadeOut(p.getOverlay(),5),c.fadeOut(i,5),c.removeClass(i,"showSweetAlert"),c.addClass(i,"hideSweetAlert"),c.removeClass(i,"visible");var r=i.querySelector(".sa-icon.sa-success");c.removeClass(r,"animate"),c.removeClass(r.querySelector(".sa-tip"),"animateSuccessTip"),c.removeClass(r.querySelector(".sa-long"),"animateSuccessLong");var a=i.querySelector(".sa-icon.sa-error");c.removeClass(a,"animateErrorIcon"),c.removeClass(a.querySelector(".sa-x-mark"),"animateXMark");var o=i.querySelector(".sa-icon.sa-warning");return c.removeClass(o,"pulseWarning"),c.removeClass(o.querySelector(".sa-body"),"pulseWarningIns"),c.removeClass(o.querySelector(".sa-dot"),"pulseWarningIns"),setTimeout(function(){var e=i.getAttribute("data-custom-class");c.removeClass(i,e)},300),c.removeClass(t.body,"stop-scrolling"),e.onkeydown=s,e.previousActiveElement&&e.previousActiveElement.focus(),l=n,clearTimeout(i.timeout),!0},d.showInputError=u.showInputError=function(e){var t=p.getModal(),n=t.querySelector(".sa-input-error");c.addClass(n,"show");var i=t.querySelector(".sa-error-container");c.addClass(i,"show"),i.querySelector("p").innerHTML=e,setTimeout(function(){d.enableButtons()},1),t.querySelector("input").focus()},d.resetInputError=u.resetInputError=function(e){if(e&&13===e.keyCode)return!1;var t=p.getModal(),n=t.querySelector(".sa-input-error");c.removeClass(n,"show");var i=t.querySelector(".sa-error-container");c.removeClass(i,"show")},d.disableButtons=u.disableButtons=function(){var e=p.getModal(),t=e.querySelector("button.confirm"),n=e.querySelector("button.cancel");t.disabled=!0,n.disabled=!0},d.enableButtons=u.enableButtons=function(){var e=p.getModal(),t=e.querySelector("button.confirm"),n=e.querySelector("button.cancel");t.disabled=!1,n.disabled=!1},"undefined"!=typeof e?e.sweetAlert=e.swal=d:h.logStr("SweetAlert is a frontend module!"),r.exports=a["default"]},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};n["default"]=i,t.exports=n["default"]},{}],3:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=t("./utils"),a=(t("./handle-swal-dom"),t("./handle-dom")),o=function(t,n,i){function o(e){m&&n.confirmButtonColor&&(p.style.backgroundColor=e)}var d,u,c,h=t||e.event,p=h.target||h.srcElement,m=-1!==p.className.indexOf("confirm"),f=-1!==p.className.indexOf("sweet-overlay"),_=a.hasClass(i,"visible"),y=n.doneFunction&&"true"===i.getAttribute("data-has-done-function");switch(m&&n.confirmButtonColor&&(d=n.confirmButtonColor,u=r.colorLuminance(d,-.04),c=r.colorLuminance(d,-.14)),h.type){case"mouseover":o(u);break;case"mouseout":o(d);break;case"mousedown":o(c);break;case"mouseup":o(u);break;case"focus":var g=i.querySelector("button.confirm"),v=i.querySelector("button.cancel");m?v.style.boxShadow="none":g.style.boxShadow="none";break;case"click":var M=i===p,w=a.isDescendant(i,p);if(!M&&!w&&_&&!n.allowOutsideClick)break;m&&y&&_?s(i,n):y&&_||f?l(i,n):a.isDescendant(i,p)&&"BUTTON"===p.tagName&&sweetAlert.close()}},s=function(e,t){var n=!0;a.hasClass(e,"show-input")&&(n=e.querySelector("input").value,n||(n="")),t.doneFunction(n),t.closeOnConfirm&&sweetAlert.close(),t.showLoaderOnConfirm&&sweetAlert.disableButtons()},l=function(e,t){var n=String(t.doneFunction).replace(/\s/g,""),i="function("===n.substring(0,9)&&")"!==n.substring(9,10);i&&t.doneFunction(!1),t.closeOnCancel&&sweetAlert.close()};i["default"]={handleButton:o,handleConfirm:s,handleCancel:l},n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(n,i,r){Object.defineProperty(r,"__esModule",{value:!0});var a=function(e,t){return new RegExp(" "+t+" ").test(" "+e.className+" ")},o=function(e,t){a(e,t)||(e.className+=" "+t)},s=function(e,t){var n=" "+e.className.replace(/[\t\r\n]/g," ")+" ";if(a(e,t)){for(;n.indexOf(" "+t+" ")>=0;)n=n.replace(" "+t+" "," ");e.className=n.replace(/^\s+|\s+$/g,"")}},l=function(e){var n=t.createElement("div");return n.appendChild(t.createTextNode(e)),n.innerHTML},d=function(e){e.style.opacity="",e.style.display="block"},u=function(e){if(e&&!e.length)return d(e);for(var t=0;t<e.length;++t)d(e[t])},c=function(e){e.style.opacity="",e.style.display="none"},h=function(e){if(e&&!e.length)return c(e);for(var t=0;t<e.length;++t)c(e[t])},p=function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},m=function(e){e.style.left="-9999px",e.style.display="block";var t,n=e.clientHeight;return t="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(e).getPropertyValue("padding-top"),10):parseInt(e.currentStyle.padding),e.style.left="",e.style.display="none","-"+parseInt((n+t)/2)+"px"},f=function(e,t){if(+e.style.opacity<1){t=t||16,e.style.opacity=0,e.style.display="block";var n=+new Date,i=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity+(new Date-n)/100,n=+new Date,+e.style.opacity<1&&setTimeout(i,t)});i()}e.style.display="block"},_=function(e,t){t=t||16,e.style.opacity=1;var n=+new Date,i=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity-(new Date-n)/100,n=+new Date,+e.style.opacity>0?setTimeout(i,t):e.style.display="none"});i()},y=function(n){if("function"==typeof MouseEvent){var i=new MouseEvent("click",{view:e,bubbles:!1,cancelable:!0});n.dispatchEvent(i)}else if(t.createEvent){var r=t.createEvent("MouseEvents");r.initEvent("click",!1,!1),n.dispatchEvent(r)}else t.createEventObject?n.fireEvent("onclick"):"function"==typeof n.onclick&&n.onclick()},g=function(t){"function"==typeof t.stopPropagation?(t.stopPropagation(),t.preventDefault()):e.event&&e.event.hasOwnProperty("cancelBubble")&&(e.event.cancelBubble=!0)};r.hasClass=a,r.addClass=o,r.removeClass=s,r.escapeHtml=l,r._show=d,r.show=u,r._hide=c,r.hide=h,r.isDescendant=p,r.getTopMargin=m,r.fadeIn=f,r.fadeOut=_,r.fireClick=y,r.stopEventPropagation=g},{}],5:[function(t,i,r){Object.defineProperty(r,"__esModule",{value:!0});var a=t("./handle-dom"),o=t("./handle-swal-dom"),s=function(t,i,r){var s=t||e.event,l=s.keyCode||s.which,d=r.querySelector("button.confirm"),u=r.querySelector("button.cancel"),c=r.querySelectorAll("button[tabindex]");
if(-1!==[9,13,32,27].indexOf(l)){for(var h=s.target||s.srcElement,p=-1,m=0;m<c.length;m++)if(h===c[m]){p=m;break}9===l?(h=-1===p?d:p===c.length-1?c[0]:c[p+1],a.stopEventPropagation(s),h.focus(),i.confirmButtonColor&&o.setFocusStyle(h,i.confirmButtonColor)):13===l?("INPUT"===h.tagName&&(h=d,d.focus()),h=-1===p?d:n):27===l&&i.allowEscapeKey===!0?(h=u,a.fireClick(h,s)):h=n}};r["default"]=s,i.exports=r["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(n,i,r){var a=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(r,"__esModule",{value:!0});var o=n("./utils"),s=n("./handle-dom"),l=n("./default-params"),d=a(l),u=n("./injected-html"),c=a(u),h=".sweet-alert",p=".sweet-overlay",m=function(){var e=t.createElement("div");for(e.innerHTML=c["default"];e.firstChild;)t.body.appendChild(e.firstChild)},f=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=t.querySelector(h);return e||(m(),e=f()),e}),_=function(){var e=f();return e?e.querySelector("input"):void 0},y=function(){return t.querySelector(p)},g=function(e,t){var n=o.hexToRgb(t);e.style.boxShadow="0 0 2px rgba("+n+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},v=function(n){var i=f();s.fadeIn(y(),10),s.show(i),s.addClass(i,"showSweetAlert"),s.removeClass(i,"hideSweetAlert"),e.previousActiveElement=t.activeElement;var r=i.querySelector("button.confirm");r.focus(),setTimeout(function(){s.addClass(i,"visible")},500);var a=i.getAttribute("data-timer");if("null"!==a&&""!==a){var o=n;i.timeout=setTimeout(function(){var e=(o||null)&&"true"===i.getAttribute("data-has-done-function");e?o(null):sweetAlert.close()},a)}},M=function(){var e=f(),t=_();s.removeClass(e,"show-input"),t.value=d["default"].inputValue,t.setAttribute("type",d["default"].inputType),t.setAttribute("placeholder",d["default"].inputPlaceholder),w()},w=function(e){if(e&&13===e.keyCode)return!1;var t=f(),n=t.querySelector(".sa-input-error");s.removeClass(n,"show");var i=t.querySelector(".sa-error-container");s.removeClass(i,"show")},b=function(){var e=f();e.style.marginTop=s.getTopMargin(f())};r.sweetAlertInitialize=m,r.getModal=f,r.getOverlay=y,r.getInput=_,r.setFocusStyle=g,r.openModal=v,r.resetInput=M,r.resetInputError=w,r.fixVerticalPosition=b},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"]=i,t.exports=n["default"]},{}],8:[function(e,t,i){Object.defineProperty(i,"__esModule",{value:!0});var r=e("./utils"),a=e("./handle-swal-dom"),o=e("./handle-dom"),s=["error","warning","info","success","input","prompt"],l=function(e){var t=a.getModal(),i=t.querySelector("h2"),l=t.querySelector("p"),d=t.querySelector("button.cancel"),u=t.querySelector("button.confirm");if(i.innerHTML=e.html?e.title:o.escapeHtml(e.title).split("\n").join("<br>"),l.innerHTML=e.html?e.text:o.escapeHtml(e.text||"").split("\n").join("<br>"),e.text&&o.show(l),e.customClass)o.addClass(t,e.customClass),t.setAttribute("data-custom-class",e.customClass);else{var c=t.getAttribute("data-custom-class");o.removeClass(t,c),t.setAttribute("data-custom-class","")}if(o.hide(t.querySelectorAll(".sa-icon")),e.type&&!r.isIE8()){var h=function(){for(var i=!1,r=0;r<s.length;r++)if(e.type===s[r]){i=!0;break}if(!i)return logStr("Unknown alert type: "+e.type),{v:!1};var l=["success","error","warning","info"],d=n;-1!==l.indexOf(e.type)&&(d=t.querySelector(".sa-icon.sa-"+e.type),o.show(d));var u=a.getInput();switch(e.type){case"success":o.addClass(d,"animate"),o.addClass(d.querySelector(".sa-tip"),"animateSuccessTip"),o.addClass(d.querySelector(".sa-long"),"animateSuccessLong");break;case"error":o.addClass(d,"animateErrorIcon"),o.addClass(d.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":o.addClass(d,"pulseWarning"),o.addClass(d.querySelector(".sa-body"),"pulseWarningIns"),o.addClass(d.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":u.setAttribute("type",e.inputType),u.value=e.inputValue,u.setAttribute("placeholder",e.inputPlaceholder),o.addClass(t,"show-input"),setTimeout(function(){u.focus(),u.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof h)return h.v}if(e.imageUrl){var p=t.querySelector(".sa-icon.sa-custom");p.style.backgroundImage="url("+e.imageUrl+")",o.show(p);var m=80,f=80;if(e.imageSize){var _=e.imageSize.toString().split("x"),y=_[0],g=_[1];y&&g?(m=y,f=g):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+e.imageSize)}p.setAttribute("style",p.getAttribute("style")+"width:"+m+"px; height:"+f+"px")}t.setAttribute("data-has-cancel-button",e.showCancelButton),e.showCancelButton?d.style.display="inline-block":o.hide(d),t.setAttribute("data-has-confirm-button",e.showConfirmButton),e.showConfirmButton?u.style.display="inline-block":o.hide(u),e.cancelButtonText&&(d.innerHTML=o.escapeHtml(e.cancelButtonText)),e.confirmButtonText&&(u.innerHTML=o.escapeHtml(e.confirmButtonText)),e.confirmButtonColor&&(u.style.backgroundColor=e.confirmButtonColor,u.style.borderLeftColor=e.confirmLoadingButtonColor,u.style.borderRightColor=e.confirmLoadingButtonColor,a.setFocusStyle(u,e.confirmButtonColor)),t.setAttribute("data-allow-outside-click",e.allowOutsideClick);var v=!!e.doneFunction;t.setAttribute("data-has-done-function",v),e.animation?"string"==typeof e.animation?t.setAttribute("data-animation",e.animation):t.setAttribute("data-animation","pop"):t.setAttribute("data-animation","none"),t.setAttribute("data-timer",e.timer)};i["default"]=l,t.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},a=function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?parseInt(t[1],16)+", "+parseInt(t[2],16)+", "+parseInt(t[3],16):null},o=function(){return e.attachEvent&&!e.addEventListener},s=function(t){e.console&&e.console.log("SweetAlert: "+t)},l=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,""),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;var n,i,r="#";for(i=0;3>i;i++)n=parseInt(e.substr(2*i,2),16),n=Math.round(Math.min(Math.max(0,n+n*t),255)).toString(16),r+=("00"+n).substr(n.length);return r};i.extend=r,i.hexToRgb=a,i.isIE8=o,i.logStr=s,i.colorLuminance=l},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document),function(e){e.fn.fitText=function(t,n){var i=t||1,r=e.extend({minFontSize:Number.NEGATIVE_INFINITY,maxFontSize:Number.POSITIVE_INFINITY},n);return this.each(function(){var t=e(this),n=function(){t.css("font-size",Math.max(Math.min(t.width()/(10*i),parseFloat(r.maxFontSize)),parseFloat(r.minFontSize)))};n(),e(window).on("resize.fittext orientationchange.fittext",n)})}}(jQuery),!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t,n=navigator.userAgent,i=/iphone/i.test(n),r=/chrome/i.test(n),a=/android/i.test(n);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(n,o){var s,l,d,u,c,h,p,m;if(!n&&this.length>0){s=e(this[0]);var f=s.data(e.mask.dataName);return f?f():void 0}return o=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},o),l=e.mask.definitions,d=[],u=p=n.length,c=null,e.each(n.split(""),function(e,t){"?"==t?(p--,u=e):l[t]?(d.push(new RegExp(l[t])),null===c&&(c=d.length-1),u>e&&(h=d.length-1)):d.push(null)}),this.trigger("unmask").each(function(){function s(){if(o.completed){for(var e=c;h>=e;e++)if(d[e]&&Y[e]===f(e))return;o.completed.call(S)}}function f(e){return o.placeholder.charAt(e<o.placeholder.length?e:0)}function _(e){for(;++e<p&&!d[e];);return e}function y(e){for(;--e>=0&&!d[e];);return e}function g(e,t){var n,i;if(!(0>e)){for(n=e,i=_(t);p>n;n++)if(d[n]){if(!(p>i&&d[n].test(Y[i])))break;Y[n]=Y[i],Y[i]=f(i),i=_(i)}k(),S.caret(Math.max(c,e))}}function v(e){var t,n,i,r;for(t=e,n=f(e);p>t;t++)if(d[t]){if(i=_(t),r=Y[t],Y[t]=n,!(p>i&&d[i].test(r)))break;n=r}}function M(){var e=S.val(),t=S.caret();if(m&&m.length&&m.length>e.length){for(T(!0);t.begin>0&&!d[t.begin-1];)t.begin--;if(0===t.begin)for(;t.begin<c&&!d[t.begin];)t.begin++;S.caret(t.begin,t.begin)}else{for(T(!0);t.begin<p&&!d[t.begin];)t.begin++;S.caret(t.begin,t.begin)}s()}function w(){T(),S.val()!=C&&S.change()}function b(e){if(!S.prop("readonly")){var t,n,r,a=e.which||e.keyCode;m=S.val(),8===a||46===a||i&&127===a?(t=S.caret(),n=t.begin,r=t.end,r-n===0&&(n=46!==a?y(n):r=_(n-1),r=46===a?_(r):r),D(n,r),g(n,r-1),e.preventDefault()):13===a?w.call(this,e):27===a&&(S.val(C),S.caret(0,T()),e.preventDefault())}}function L(t){if(!S.prop("readonly")){var n,i,r,o=t.which||t.keyCode,l=S.caret();if(!(t.ctrlKey||t.altKey||t.metaKey||32>o)&&o&&13!==o){if(l.end-l.begin!==0&&(D(l.begin,l.end),g(l.begin,l.end-1)),n=_(l.begin-1),p>n&&(i=String.fromCharCode(o),d[n].test(i))){if(v(n),Y[n]=i,k(),r=_(n),a){var u=function(){e.proxy(e.fn.caret,S,r)()};setTimeout(u,0)}else S.caret(r);l.begin<=h&&s()}t.preventDefault()}}}function D(e,t){var n;for(n=e;t>n&&p>n;n++)d[n]&&(Y[n]=f(n))}function k(){S.val(Y.join(""))}function T(e){var t,n,i,r=S.val(),a=-1;for(t=0,i=0;p>t;t++)if(d[t]){for(Y[t]=f(t);i++<r.length;)if(n=r.charAt(i-1),d[t].test(n)){Y[t]=n,a=t;break}if(i>r.length){D(t+1,p);break}}else Y[t]===r.charAt(i)&&i++,u>t&&(a=t);return e?k():u>a+1?o.autoclear||Y.join("")===x?(S.val()&&S.val(""),D(0,p)):k():(k(),S.val(S.val().substring(0,a+1))),u?t:c}var S=e(this),Y=e.map(n.split(""),function(e,t){return"?"!=e?l[e]?f(t):e:void 0}),x=Y.join(""),C=S.val();S.data(e.mask.dataName,function(){return e.map(Y,function(e,t){return d[t]&&e!=f(t)?e:null}).join("")}),S.one("unmask",function(){S.off(".mask").removeData(e.mask.dataName)}).on("focus.mask",function(){if(!S.prop("readonly")){clearTimeout(t);var e;C=S.val(),e=T(),t=setTimeout(function(){S.get(0)===document.activeElement&&(k(),e==n.replace("?","").length?S.caret(0,e):S.caret(e))},10)}}).on("blur.mask",w).on("keydown.mask",b).on("keypress.mask",L).on("input.mask paste.mask",function(){S.prop("readonly")||setTimeout(function(){var e=T(!0);S.caret(e),s()},0)}),r&&a&&S.off("input.mask").on("input.mask",M),T()})}})}),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return ur.apply(null,arguments)}function t(e){ur=e}function n(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return"[object Object]"===Object.prototype.toString.call(e)}function r(e){var t;for(t in e)return!1;return!0}function a(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function o(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function l(e,t){for(var n in t)s(t,n)&&(e[n]=t[n]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function d(e,t,n,i){return _t(e,t,n,i,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function c(e){return null==e._pf&&(e._pf=u()),e._pf}function h(e){if(null==e._isValid){var t=c(e),n=cr.call(t.parsedDateParts,function(e){return null!=e});e._isValid=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function p(e){var t=d(NaN);return null!=e?l(c(t),e):c(t).userInvalidated=!0,t}function m(e){return void 0===e}function f(e,t){var n,i,r;if(m(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),m(t._i)||(e._i=t._i),m(t._f)||(e._f=t._f),m(t._l)||(e._l=t._l),m(t._strict)||(e._strict=t._strict),m(t._tzm)||(e._tzm=t._tzm),m(t._isUTC)||(e._isUTC=t._isUTC),m(t._offset)||(e._offset=t._offset),m(t._pf)||(e._pf=c(t)),m(t._locale)||(e._locale=t._locale),hr.length>0)for(n in hr)i=hr[n],r=t[i],m(r)||(e[i]=r);return e}function _(t){f(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),pr===!1&&(pr=!0,e.updateOffset(this),pr=!1)}function y(e){return e instanceof _||null!=e&&null!=e._isAMomentObject}function g(e){return 0>e?Math.ceil(e)||0:Math.floor(e)}function v(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=g(t)),n}function M(e,t,n){var i,r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),o=0;for(i=0;r>i;i++)(n&&e[i]!==t[i]||!n&&v(e[i])!==v(t[i]))&&o++;return o+a}function w(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function b(t,n){var i=!0;return l(function(){return null!=e.deprecationHandler&&e.deprecationHandler(null,t),i&&(w(t+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),i=!1),n.apply(this,arguments)},n)}function L(t,n){null!=e.deprecationHandler&&e.deprecationHandler(t,n),mr[t]||(w(n),mr[t]=!0)}function D(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function k(e){var t,n;for(n in e)t=e[n],D(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function T(e,t){var n,r=l({},e);for(n in t)s(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},l(r[n],e[n]),l(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)s(e,n)&&!s(t,n)&&i(e[n])&&(r[n]=l({},r[n]));return r}function S(e){null!=e&&this.set(e)}function Y(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return D(i)?i.call(t,n):i}function x(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function C(){return this._invalidDate}function E(e){return this._ordinal.replace("%d",e)}function H(e,t,n,i){var r=this._relativeTime[n];return D(r)?r(e,t,n,i):r.replace(/%d/i,e)}function A(e,t){var n=this._relativeTime[e>0?"future":"past"];return D(n)?n(t):n.replace(/%s/i,t)}function P(e,t){var n=e.toLowerCase();Lr[n]=Lr[n+"s"]=Lr[t]=e}function j(e){return"string"==typeof e?Lr[e]||Lr[e.toLowerCase()]:void 0}function I(e){var t,n,i={};for(n in e)s(e,n)&&(t=j(n),t&&(i[t]=e[n]));return i}function O(e,t){Dr[e]=t}function z(e){var t=[];for(var n in e)t.push({unit:n,priority:Dr[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function F(t,n){return function(i){return null!=i?($(this,t,i),e.updateOffset(this,n),this):W(this,t)}}function W(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function $(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function R(e){return e=j(e),D(this[e])?this[e]():this}function N(e,t){if("object"==typeof e){e=I(e);for(var n=z(e),i=0;i<n.length;i++)this[n[i].unit](e[n[i].unit])}else if(e=j(e),D(this[e]))return this[e](t);return this}function q(e,t,n){var i=""+Math.abs(e),r=t-i.length,a=e>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function B(e,t,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),e&&(Yr[e]=r),t&&(Yr[t[0]]=function(){return q(r.apply(this,arguments),t[1],t[2])}),n&&(Yr[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function U(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function J(e){var t,n,i=e.match(kr);for(t=0,n=i.length;n>t;t++)Yr[i[t]]?i[t]=Yr[i[t]]:i[t]=U(i[t]);return function(t){var r,a="";for(r=0;n>r;r++)a+=i[r]instanceof Function?i[r].call(t,e):i[r];return a}}function V(e,t){return e.isValid()?(t=G(t,e.localeData()),Sr[t]=Sr[t]||J(t),Sr[t](e)):e.localeData().invalidDate()}function G(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(Tr.lastIndex=0;i>=0&&Tr.test(e);)e=e.replace(Tr,n),Tr.lastIndex=0,i-=1;return e}function X(e,t,n){Ur[e]=D(t)?t:function(e,i){return e&&n?n:t}}function Q(e,t){return s(Ur,e)?Ur[e](t._strict,t._locale):new RegExp(Z(e))}function Z(e){return K(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r}))}function K(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ee(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(i=function(e,n){n[t]=v(e)}),n=0;n<e.length;n++)Jr[e[n]]=i}function te(e,t){ee(e,function(e,n,i,r){i._w=i._w||{},t(e,i._w,i,r)})}function ne(e,t,n){null!=t&&s(Jr,e)&&Jr[e](t,n._a,n,e)}function ie(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function re(e,t){return n(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ia).test(t)?"format":"standalone"][e.month()]}function ae(e,t){return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ia.test(t)?"format":"standalone"][e.month()]}function oe(e,t,n){var i,r,a,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;12>i;++i)a=d([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?(r=_r.call(this._shortMonthsParse,o),-1!==r?r:null):(r=_r.call(this._longMonthsParse,o),-1!==r?r:null):"MMM"===t?(r=_r.call(this._shortMonthsParse,o),-1!==r?r:(r=_r.call(this._longMonthsParse,o),-1!==r?r:null)):(r=_r.call(this._longMonthsParse,o),-1!==r?r:(r=_r.call(this._shortMonthsParse,o),-1!==r?r:null))}function se(e,t,n){var i,r,a;if(this._monthsParseExact)return oe.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=d([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function le(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=v(t);else if(t=e.localeData().monthsParse(t),"number"!=typeof t)return e;return n=Math.min(e.date(),ie(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function de(t){return null!=t?(le(this,t),e.updateOffset(this,!0),this):W(this,"Month")}function ue(){return ie(this.year(),this.month())}function ce(e){return this._monthsParseExact?(s(this,"_monthsRegex")||pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=oa),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function he(e){return this._monthsParseExact?(s(this,"_monthsRegex")||pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=sa),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function pe(){function e(e,t){return t.length-e.length}var t,n,i=[],r=[],a=[];for(t=0;12>t;t++)n=d([2e3,t]),i.push(this.monthsShort(n,"")),r.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(i.sort(e),r.sort(e),a.sort(e),t=0;12>t;t++)i[t]=K(i[t]),r[t]=K(r[t]);for(t=0;24>t;t++)a[t]=K(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function me(e){return fe(e)?366:365}function fe(e){return e%4===0&&e%100!==0||e%400===0}function _e(){return fe(this.year())}function ye(e,t,n,i,r,a,o){var s=new Date(e,t,n,i,r,a,o);return 100>e&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function ge(e){var t=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ve(e,t,n){var i=7+t-n,r=(7+ge(e,0,i).getUTCDay()-t)%7;return-r+i-1}function Me(e,t,n,i,r){var a,o,s=(7+n-i)%7,l=ve(e,i,r),d=1+7*(t-1)+s+l;return 0>=d?(a=e-1,o=me(a)+d):d>me(e)?(a=e+1,o=d-me(e)):(a=e,o=d),{year:a,dayOfYear:o}}function we(e,t,n){var i,r,a=ve(e.year(),t,n),o=Math.floor((e.dayOfYear()-a-1)/7)+1;return 1>o?(r=e.year()-1,i=o+be(r,t,n)):o>be(e.year(),t,n)?(i=o-be(e.year(),t,n),r=e.year()+1):(r=e.year(),i=o),{week:i,year:r}}function be(e,t,n){var i=ve(e,t,n),r=ve(e+1,t,n);return(me(e)-i+r)/7}function Le(e){return we(e,this._week.dow,this._week.doy).week}function De(){return this._week.dow}function ke(){return this._week.doy}function Te(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Se(e){var t=we(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function Ye(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function xe(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Ce(e,t){return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}function Ee(e){return this._weekdaysShort[e.day()]}function He(e){return this._weekdaysMin[e.day()]}function Ae(e,t,n){var i,r,a,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;7>i;++i)a=d([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?(r=_r.call(this._weekdaysParse,o),-1!==r?r:null):"ddd"===t?(r=_r.call(this._shortWeekdaysParse,o),-1!==r?r:null):(r=_r.call(this._minWeekdaysParse,o),-1!==r?r:null):"dddd"===t?(r=_r.call(this._weekdaysParse,o),-1!==r?r:(r=_r.call(this._shortWeekdaysParse,o),-1!==r?r:(r=_r.call(this._minWeekdaysParse,o),-1!==r?r:null))):"ddd"===t?(r=_r.call(this._shortWeekdaysParse,o),-1!==r?r:(r=_r.call(this._weekdaysParse,o),-1!==r?r:(r=_r.call(this._minWeekdaysParse,o),-1!==r?r:null))):(r=_r.call(this._minWeekdaysParse,o),-1!==r?r:(r=_r.call(this._weekdaysParse,o),-1!==r?r:(r=_r.call(this._shortWeekdaysParse,o),-1!==r?r:null)))}function Pe(e,t,n){var i,r,a;if(this._weekdaysParseExact)return Ae.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;7>i;i++){if(r=d([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function je(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Ye(e,this.localeData()),this.add(e-t,"d")):t}function Ie(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function Oe(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=xe(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function ze(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=pa),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function Fe(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=ma),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function We(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=fa),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function $e(){function e(e,t){return t.length-e.length}var t,n,i,r,a,o=[],s=[],l=[],u=[];for(t=0;7>t;t++)n=d([2e3,1]).day(t),i=this.weekdaysMin(n,""),r=this.weekdaysShort(n,""),a=this.weekdays(n,""),o.push(i),s.push(r),l.push(a),u.push(i),u.push(r),u.push(a);for(o.sort(e),s.sort(e),l.sort(e),u.sort(e),t=0;7>t;t++)s[t]=K(s[t]),l[t]=K(l[t]),u[t]=K(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Re(){return this.hours()%12||12}function Ne(){return this.hours()||24}function qe(e,t){B(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Be(e,t){return t._meridiemParse}function Ue(e){return"p"===(e+"").toLowerCase().charAt(0)}function Je(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Ve(e){return e?e.toLowerCase().replace("_","-"):e}function Ge(e){for(var t,n,i,r,a=0;a<e.length;){for(r=Ve(e[a]).split("-"),t=r.length,n=Ve(e[a+1]),n=n?n.split("-"):null;t>0;){if(i=Xe(r.slice(0,t).join("-")))return i;if(n&&n.length>=t&&M(r,n,!0)>=t-1)break;t--}a++}return null}function Xe(e){var t=null;if(!Ma[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=_a._abbr,require("./locale/"+e),Qe(t)}catch(n){}return Ma[e]}function Qe(e,t){var n;return e&&(n=m(t)?et(e):Ze(e,t),n&&(_a=n)),_a._abbr}function Ze(e,t){if(null!==t){var n=va;return t.abbr=e,null!=Ma[e]?(L("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Ma[e]._config):null!=t.parentLocale&&(null!=Ma[t.parentLocale]?n=Ma[t.parentLocale]._config:L("parentLocaleUndefined","specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/")),Ma[e]=new S(T(n,t)),Qe(e),Ma[e]}return delete Ma[e],null}function Ke(e,t){if(null!=t){var n,i=va;null!=Ma[e]&&(i=Ma[e]._config),t=T(i,t),n=new S(t),n.parentLocale=Ma[e],Ma[e]=n,Qe(e)}else null!=Ma[e]&&(null!=Ma[e].parentLocale?Ma[e]=Ma[e].parentLocale:null!=Ma[e]&&delete Ma[e]);return Ma[e]}function et(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return _a;if(!n(e)){if(t=Xe(e))return t;e=[e]}return Ge(e)}function tt(){return fr(Ma)}function nt(e){var t,n=e._a;return n&&-2===c(e).overflow&&(t=n[Gr]<0||n[Gr]>11?Gr:n[Xr]<1||n[Xr]>ie(n[Vr],n[Gr])?Xr:n[Qr]<0||n[Qr]>24||24===n[Qr]&&(0!==n[Zr]||0!==n[Kr]||0!==n[ea])?Qr:n[Zr]<0||n[Zr]>59?Zr:n[Kr]<0||n[Kr]>59?Kr:n[ea]<0||n[ea]>999?ea:-1,c(e)._overflowDayOfYear&&(Vr>t||t>Xr)&&(t=Xr),c(e)._overflowWeeks&&-1===t&&(t=ta),c(e)._overflowWeekday&&-1===t&&(t=na),c(e).overflow=t),e}function it(e){var t,n,i,r,a,o,s=e._i,l=wa.exec(s)||ba.exec(s);if(l){for(c(e).iso=!0,t=0,n=Da.length;n>t;t++)if(Da[t][1].exec(l[1])){r=Da[t][0],i=Da[t][2]!==!1;break}if(null==r)return void(e._isValid=!1);if(l[3]){for(t=0,n=ka.length;n>t;t++)if(ka[t][1].exec(l[3])){a=(l[2]||" ")+ka[t][0];break}if(null==a)return void(e._isValid=!1)}if(!i&&null!=a)return void(e._isValid=!1);if(l[4]){if(!La.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=r+(a||"")+(o||""),dt(e)}else e._isValid=!1}function rt(t){var n=Ta.exec(t._i);return null!==n?void(t._d=new Date((+n[1]))):(it(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function at(e,t,n){return null!=e?e:null!=t?t:n}function ot(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function st(e){var t,n,i,r,a=[];if(!e._d){for(i=ot(e),e._w&&null==e._a[Xr]&&null==e._a[Gr]&&lt(e),e._dayOfYear&&(r=at(e._a[Vr],i[Vr]),e._dayOfYear>me(r)&&(c(e)._overflowDayOfYear=!0),n=ge(r,0,e._dayOfYear),e._a[Gr]=n.getUTCMonth(),e._a[Xr]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=a[t]=i[t];for(;7>t;t++)e._a[t]=a[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Qr]&&0===e._a[Zr]&&0===e._a[Kr]&&0===e._a[ea]&&(e._nextDay=!0,e._a[Qr]=0),e._d=(e._useUTC?ge:ye).apply(null,a),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Qr]=24)}}function lt(e){var t,n,i,r,a,o,s,l;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(a=1,o=4,n=at(t.GG,e._a[Vr],we(yt(),1,4).year),i=at(t.W,1),r=at(t.E,1),(1>r||r>7)&&(l=!0)):(a=e._locale._week.dow,o=e._locale._week.doy,n=at(t.gg,e._a[Vr],we(yt(),a,o).year),i=at(t.w,1),null!=t.d?(r=t.d,(0>r||r>6)&&(l=!0)):null!=t.e?(r=t.e+a,(t.e<0||t.e>6)&&(l=!0)):r=a),1>i||i>be(n,a,o)?c(e)._overflowWeeks=!0:null!=l?c(e)._overflowWeekday=!0:(s=Me(n,i,r,a,o),e._a[Vr]=s.year,e._dayOfYear=s.dayOfYear)}function dt(t){if(t._f===e.ISO_8601)return void it(t);t._a=[],c(t).empty=!0;var n,i,r,a,o,s=""+t._i,l=s.length,d=0;for(r=G(t._f,t._locale).match(kr)||[],n=0;n<r.length;n++)a=r[n],i=(s.match(Q(a,t))||[])[0],i&&(o=s.substr(0,s.indexOf(i)),o.length>0&&c(t).unusedInput.push(o),s=s.slice(s.indexOf(i)+i.length),
d+=i.length),Yr[a]?(i?c(t).empty=!1:c(t).unusedTokens.push(a),ne(a,i,t)):t._strict&&!i&&c(t).unusedTokens.push(a);c(t).charsLeftOver=l-d,s.length>0&&c(t).unusedInput.push(s),t._a[Qr]<=12&&c(t).bigHour===!0&&t._a[Qr]>0&&(c(t).bigHour=void 0),c(t).parsedDateParts=t._a.slice(0),c(t).meridiem=t._meridiem,t._a[Qr]=ut(t._locale,t._a[Qr],t._meridiem),st(t),nt(t)}function ut(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(i=e.isPM(n),i&&12>t&&(t+=12),i||12!==t||(t=0),t):t}function ct(e){var t,n,i,r,a;if(0===e._f.length)return c(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)a=0,t=f({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],dt(t),h(t)&&(a+=c(t).charsLeftOver,a+=10*c(t).unusedTokens.length,c(t).score=a,(null==i||i>a)&&(i=a,n=t));l(e,n||t)}function ht(e){if(!e._d){var t=I(e._i);e._a=o([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),st(e)}}function pt(e){var t=new _(nt(mt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function mt(e){var t=e._i,i=e._f;return e._locale=e._locale||et(e._l),null===t||void 0===i&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),y(t)?new _(nt(t)):(n(i)?ct(e):a(t)?e._d=t:i?dt(e):ft(e),h(e)||(e._d=null),e))}function ft(t){var i=t._i;void 0===i?t._d=new Date(e.now()):a(i)?t._d=new Date(i.valueOf()):"string"==typeof i?rt(t):n(i)?(t._a=o(i.slice(0),function(e){return parseInt(e,10)}),st(t)):"object"==typeof i?ht(t):"number"==typeof i?t._d=new Date(i):e.createFromInputFallback(t)}function _t(e,t,a,o,s){var l={};return"boolean"==typeof a&&(o=a,a=void 0),(i(e)&&r(e)||n(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=s,l._l=a,l._i=e,l._f=t,l._strict=o,pt(l)}function yt(e,t,n,i){return _t(e,t,n,i,!1)}function gt(e,t){var i,r;if(1===t.length&&n(t[0])&&(t=t[0]),!t.length)return yt();for(i=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](i)||(i=t[r]);return i}function vt(){var e=[].slice.call(arguments,0);return gt("isBefore",e)}function Mt(){var e=[].slice.call(arguments,0);return gt("isAfter",e)}function wt(e){var t=I(e),n=t.year||0,i=t.quarter||0,r=t.month||0,a=t.week||0,o=t.day||0,s=t.hour||0,l=t.minute||0,d=t.second||0,u=t.millisecond||0;this._milliseconds=+u+1e3*d+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+r+3*i+12*n,this._data={},this._locale=et(),this._bubble()}function bt(e){return e instanceof wt}function Lt(e,t){B(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+q(~~(e/60),2)+t+q(~~e%60,2)})}function Dt(e,t){var n=(t||"").match(e)||[],i=n[n.length-1]||[],r=(i+"").match(Ca)||["-",0,0],a=+(60*r[1])+v(r[2]);return"+"===r[0]?a:-a}function kt(t,n){var i,r;return n._isUTC?(i=n.clone(),r=(y(t)||a(t)?t.valueOf():yt(t).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+r),e.updateOffset(i,!1),i):yt(t).local()}function Tt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function St(t,n){var i,r=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Dt(Nr,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&n&&(i=Tt(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!n||this._changeInProgress?qt(this,zt(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:Tt(this):null!=t?this:NaN}function Yt(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function xt(e){return this.utcOffset(0,e)}function Ct(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Tt(this),"m")),this}function Et(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Dt(Rr,this._i)),this}function Ht(e){return!!this.isValid()&&(e=e?yt(e).utcOffset():0,(this.utcOffset()-e)%60===0)}function At(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Pt(){if(!m(this._isDSTShifted))return this._isDSTShifted;var e={};if(f(e,this),e=mt(e),e._a){var t=e._isUTC?d(e._a):yt(e._a);this._isDSTShifted=this.isValid()&&M(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function jt(){return!!this.isValid()&&!this._isUTC}function It(){return!!this.isValid()&&this._isUTC}function Ot(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function zt(e,t){var n,i,r,a=e,o=null;return bt(e)?a={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(a={},t?a[t]=e:a.milliseconds=e):(o=Ea.exec(e))?(n="-"===o[1]?-1:1,a={y:0,d:v(o[Xr])*n,h:v(o[Qr])*n,m:v(o[Zr])*n,s:v(o[Kr])*n,ms:v(o[ea])*n}):(o=Ha.exec(e))?(n="-"===o[1]?-1:1,a={y:Ft(o[2],n),M:Ft(o[3],n),w:Ft(o[4],n),d:Ft(o[5],n),h:Ft(o[6],n),m:Ft(o[7],n),s:Ft(o[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(r=$t(yt(a.from),yt(a.to)),a={},a.ms=r.milliseconds,a.M=r.months),i=new wt(a),bt(e)&&s(e,"_locale")&&(i._locale=e._locale),i}function Ft(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Wt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(e,t){var n;return e.isValid()&&t.isValid()?(t=kt(t,e),e.isBefore(t)?n=Wt(e,t):(n=Wt(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Rt(e){return 0>e?-1*Math.round(-1*e):Math.round(e)}function Nt(e,t){return function(n,i){var r,a;return null===i||isNaN(+i)||(L(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=i,i=a),n="string"==typeof n?+n:n,r=zt(n,i),qt(this,r,e),this}}function qt(t,n,i,r){var a=n._milliseconds,o=Rt(n._days),s=Rt(n._months);t.isValid()&&(r=null==r||r,a&&t._d.setTime(t._d.valueOf()+a*i),o&&$(t,"Date",W(t,"Date")+o*i),s&&le(t,W(t,"Month")+s*i),r&&e.updateOffset(t,o||s))}function Bt(e,t){var n=e.diff(t,"days",!0);return-6>n?"sameElse":-1>n?"lastWeek":0>n?"lastDay":1>n?"sameDay":2>n?"nextDay":7>n?"nextWeek":"sameElse"}function Ut(t,n){var i=t||yt(),r=kt(i,this).startOf("day"),a=e.calendarFormat(this,r)||"sameElse",o=n&&(D(n[a])?n[a].call(this,i):n[a]);return this.format(o||this.localeData().calendar(a,this,yt(i)))}function Jt(){return new _(this)}function Vt(e,t){var n=y(e)?e:yt(e);return!(!this.isValid()||!n.isValid())&&(t=j(m(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function Gt(e,t){var n=y(e)?e:yt(e);return!(!this.isValid()||!n.isValid())&&(t=j(m(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function Xt(e,t,n,i){return i=i||"()",("("===i[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===i[1]?this.isBefore(t,n):!this.isAfter(t,n))}function Qt(e,t){var n,i=y(e)?e:yt(e);return!(!this.isValid()||!i.isValid())&&(t=j(t||"millisecond"),"millisecond"===t?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function Zt(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function Kt(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function en(e,t,n){var i,r,a,o;return this.isValid()?(i=kt(e,this),i.isValid()?(r=6e4*(i.utcOffset()-this.utcOffset()),t=j(t),"year"===t||"month"===t||"quarter"===t?(o=tn(this,i),"quarter"===t?o/=3:"year"===t&&(o/=12)):(a=this-i,o="second"===t?a/1e3:"minute"===t?a/6e4:"hour"===t?a/36e5:"day"===t?(a-r)/864e5:"week"===t?(a-r)/6048e5:a),n?o:g(o)):NaN):NaN}function tn(e,t){var n,i,r=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(r,"months");return 0>t-a?(n=e.clone().add(r-1,"months"),i=(t-a)/(a-n)):(n=e.clone().add(r+1,"months"),i=(t-a)/(n-a)),-(r+i)||0}function nn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function rn(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?D(Date.prototype.toISOString)?this.toDate().toISOString():V(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):V(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function an(t){t||(t=this.isUtc()?e.defaultFormatUtc:e.defaultFormat);var n=V(this,t);return this.localeData().postformat(n)}function on(e,t){return this.isValid()&&(y(e)&&e.isValid()||yt(e).isValid())?zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function sn(e){return this.from(yt(),e)}function ln(e,t){return this.isValid()&&(y(e)&&e.isValid()||yt(e).isValid())?zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function dn(e){return this.to(yt(),e)}function un(e){var t;return void 0===e?this._locale._abbr:(t=et(e),null!=t&&(this._locale=t),this)}function cn(){return this._locale}function hn(e){switch(e=j(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function pn(e){return e=j(e),void 0===e||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function mn(){return this._d.valueOf()-6e4*(this._offset||0)}function fn(){return Math.floor(this.valueOf()/1e3)}function _n(){return new Date(this.valueOf())}function yn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function gn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function vn(){return this.isValid()?this.toISOString():null}function Mn(){return h(this)}function wn(){return l({},c(this))}function bn(){return c(this).overflow}function Ln(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Dn(e,t){B(0,[e,e.length],0,t)}function kn(e){return xn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Tn(e){return xn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Sn(){return be(this.year(),1,4)}function Yn(){var e=this.localeData()._week;return be(this.year(),e.dow,e.doy)}function xn(e,t,n,i,r){var a;return null==e?we(this,i,r).year:(a=be(e,i,r),t>a&&(t=a),Cn.call(this,e,t,n,i,r))}function Cn(e,t,n,i,r){var a=Me(e,t,n,i,r),o=ge(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function En(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Hn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function An(e,t){t[ea]=v(1e3*("0."+e))}function Pn(){return this._isUTC?"UTC":""}function jn(){return this._isUTC?"Coordinated Universal Time":""}function In(e){return yt(1e3*e)}function On(){return yt.apply(null,arguments).parseZone()}function zn(e){return e}function Fn(e,t,n,i){var r=et(),a=d().set(i,t);return r[n](a,e)}function Wn(e,t,n){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return Fn(e,t,n,"month");var i,r=[];for(i=0;12>i;i++)r[i]=Fn(e,i,n,"month");return r}function $n(e,t,n,i){"boolean"==typeof e?("number"==typeof t&&(n=t,t=void 0),t=t||""):(t=e,n=t,e=!1,"number"==typeof t&&(n=t,t=void 0),t=t||"");var r=et(),a=e?r._week.dow:0;if(null!=n)return Fn(t,(n+a)%7,i,"day");var o,s=[];for(o=0;7>o;o++)s[o]=Fn(t,(o+a)%7,i,"day");return s}function Rn(e,t){return Wn(e,t,"months")}function Nn(e,t){return Wn(e,t,"monthsShort")}function qn(e,t,n){return $n(e,t,n,"weekdays")}function Bn(e,t,n){return $n(e,t,n,"weekdaysShort")}function Un(e,t,n){return $n(e,t,n,"weekdaysMin")}function Jn(){var e=this._data;return this._milliseconds=qa(this._milliseconds),this._days=qa(this._days),this._months=qa(this._months),e.milliseconds=qa(e.milliseconds),e.seconds=qa(e.seconds),e.minutes=qa(e.minutes),e.hours=qa(e.hours),e.months=qa(e.months),e.years=qa(e.years),this}function Vn(e,t,n,i){var r=zt(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function Gn(e,t){return Vn(this,e,t,1)}function Xn(e,t){return Vn(this,e,t,-1)}function Qn(e){return 0>e?Math.floor(e):Math.ceil(e)}function Zn(){var e,t,n,i,r,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||0>=a&&0>=o&&0>=s||(a+=864e5*Qn(ei(s)+o),o=0,s=0),l.milliseconds=a%1e3,e=g(a/1e3),l.seconds=e%60,t=g(e/60),l.minutes=t%60,n=g(t/60),l.hours=n%24,o+=g(n/24),r=g(Kn(o)),s+=r,o-=Qn(ei(r)),i=g(s/12),s%=12,l.days=o,l.months=s,l.years=i,this}function Kn(e){return 4800*e/146097}function ei(e){return 146097*e/4800}function ti(e){var t,n,i=this._milliseconds;if(e=j(e),"month"===e||"year"===e)return t=this._days+i/864e5,n=this._months+Kn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(ei(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function ni(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*v(this._months/12)}function ii(e){return function(){return this.as(e)}}function ri(e){return e=j(e),this[e+"s"]()}function ai(e){return function(){return this._data[e]}}function oi(){return g(this.days()/7)}function si(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}function li(e,t,n){var i=zt(e).abs(),r=oo(i.as("s")),a=oo(i.as("m")),o=oo(i.as("h")),s=oo(i.as("d")),l=oo(i.as("M")),d=oo(i.as("y")),u=r<so.s&&["s",r]||1>=a&&["m"]||a<so.m&&["mm",a]||1>=o&&["h"]||o<so.h&&["hh",o]||1>=s&&["d"]||s<so.d&&["dd",s]||1>=l&&["M"]||l<so.M&&["MM",l]||1>=d&&["y"]||["yy",d];return u[2]=t,u[3]=+e>0,u[4]=n,si.apply(null,u)}function di(e){return void 0===e?oo:"function"==typeof e&&(oo=e,!0)}function ui(e,t){return void 0!==so[e]&&(void 0===t?so[e]:(so[e]=t,!0))}function ci(e){var t=this.localeData(),n=li(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function hi(){var e,t,n,i=lo(this._milliseconds)/1e3,r=lo(this._days),a=lo(this._months);e=g(i/60),t=g(e/60),i%=60,e%=60,n=g(a/12),a%=12;var o=n,s=a,l=r,d=t,u=e,c=i,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(o?o+"Y":"")+(s?s+"M":"")+(l?l+"D":"")+(d||u||c?"T":"")+(d?d+"H":"")+(u?u+"M":"")+(c?c+"S":""):"P0D"}function pi(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?n[1]:n[2]}function mi(e,t,n){var i={mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+pi(i[n],+e)}function fi(e,t,n){var i={mm:"munutenn",MM:"miz",dd:"devezh"};return e+" "+gi(i[n],e)}function _i(e){switch(yi(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}function yi(e){return e>9?yi(e%10):e}function gi(e,t){return 2===t?vi(e):e}function vi(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}function Mi(e,t,n){var i=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return i+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return i+=1===e?"dan":"dana";case"MM":return i+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return i+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}function wi(e){return e>1&&5>e&&1!==~~(e/10)}function bi(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekund":"pár sekundami";case"m":return t?"minuta":i?"minutu":"minutou";case"mm":return t||i?r+(wi(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(wi(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||i?"den":"dnem";case"dd":return t||i?r+(wi(e)?"dny":"dní"):r+"dny";case"M":return t||i?"měsíc":"měsícem";case"MM":return t||i?r+(wi(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||i?"rok":"rokem";case"yy":return t||i?r+(wi(e)?"roky":"let"):r+"lety"}}function Li(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function Di(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function ki(e,t,n,i){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:i?r[n][0]:r[n][1]}function Ti(e,t,n,i){var r="";switch(n){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"m":return i?"minuutin":"minuutti";case"mm":r=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":r=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":r=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":r=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":r=i?"vuoden":"vuotta"}return r=Si(e,i)+" "+r}function Si(e,t){return 10>e?t?Io[e]:jo[e]:e}function Yi(e,t,n){var i=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return i+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return i+=1===e?"dan":"dana";case"MM":return i+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return i+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}function xi(e,t,n,i){var r=e;switch(n){case"s":return i||t?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(i||t?" perc":" perce");case"mm":return r+(i||t?" perc":" perce");case"h":return"egy"+(i||t?" óra":" órája");case"hh":return r+(i||t?" óra":" órája");case"d":return"egy"+(i||t?" nap":" napja");case"dd":return r+(i||t?" nap":" napja");case"M":return"egy"+(i||t?" hónap":" hónapja");case"MM":return r+(i||t?" hónap":" hónapja");case"y":return"egy"+(i||t?" év":" éve");case"yy":return r+(i||t?" év":" éve")}return""}function Ci(e){return(e?"":"[múlt] ")+"["+Uo[this.day()]+"] LT[-kor]"}function Ei(e){return e%100===11||e%10!==1}function Hi(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return t?"mínúta":"mínútu";case"mm":return Ei(e)?r+(t||i?"mínútur":"mínútum"):t?r+"mínúta":r+"mínútu";case"hh":return Ei(e)?r+(t||i?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return t?"dagur":i?"dag":"degi";case"dd":return Ei(e)?t?r+"dagar":r+(i?"daga":"dögum"):t?r+"dagur":r+(i?"dag":"degi");case"M":return t?"mánuður":i?"mánuð":"mánuði";case"MM":return Ei(e)?t?r+"mánuðir":r+(i?"mánuði":"mánuðum"):t?r+"mánuður":r+(i?"mánuð":"mánuði");case"y":return t||i?"ár":"ári";case"yy":return Ei(e)?r+(t||i?"ár":"árum"):r+(t||i?"ár":"ári")}}function Ai(e,t,n,i){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function Pi(e){var t=e.substr(0,e.indexOf(" "));return Ii(t)?"a "+e:"an "+e}function ji(e){var t=e.substr(0,e.indexOf(" "));return Ii(t)?"viru "+e:"virun "+e}function Ii(e){if(e=parseInt(e,10),isNaN(e))return!1;if(0>e)return!0;if(10>e)return e>=4&&7>=e;if(100>e){var t=e%10,n=e/10;return Ii(0===t?n:t)}if(1e4>e){for(;e>=10;)e/=10;return Ii(e)}return e/=1e3,Ii(e)}function Oi(e,t,n,i){return t?"kelios sekundės":i?"kelių sekundžių":"kelias sekundes"}function zi(e,t,n,i){return t?Wi(n)[0]:i?Wi(n)[1]:Wi(n)[2]}function Fi(e){return e%10===0||e>10&&20>e}function Wi(e){return Go[e].split("_")}function $i(e,t,n,i){var r=e+" ";return 1===e?r+zi(e,t,n[0],i):t?r+(Fi(e)?Wi(n)[1]:Wi(n)[0]):i?r+Wi(n)[1]:r+(Fi(e)?Wi(n)[1]:Wi(n)[2])}function Ri(e,t,n){return n?t%10===1&&t%100!==11?e[2]:e[3]:t%10===1&&t%100!==11?e[0]:e[1]}function Ni(e,t,n){return e+" "+Ri(Xo[n],e,t)}function qi(e,t,n){return Ri(Xo[n],e,t)}function Bi(e,t){return t?"dažas sekundes":"dažām sekundēm"}function Ui(e,t,n,i){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}function Ji(e){return 5>e%10&&e%10>1&&~~(e/10)%10!==1}function Vi(e,t,n){var i=e+" ";switch(n){case"m":return t?"minuta":"minutę";case"mm":return i+(Ji(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return i+(Ji(e)?"godziny":"godzin");case"MM":return i+(Ji(e)?"miesiące":"miesięcy");case"yy":return i+(Ji(e)?"lata":"lat")}}function Gi(e,t,n){var i={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},r=" ";return(e%100>=20||e>=100&&e%100===0)&&(r=" de "),e+r+i[n]}function Xi(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?n[1]:n[2]}function Qi(e,t,n){var i={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+Xi(i[n],+e)}function Zi(e){return e>1&&5>e}function Ki(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekúnd":"pár sekundami";case"m":return t?"minúta":i?"minútu":"minútou";case"mm":return t||i?r+(Zi(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(Zi(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||i?"deň":"dňom";case"dd":return t||i?r+(Zi(e)?"dni":"dní"):r+"dňami";case"M":return t||i?"mesiac":"mesiacom";case"MM":return t||i?r+(Zi(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||i?"rok":"rokom";case"yy":return t||i?r+(Zi(e)?"roky":"rokov"):r+"rokmi"}}function er(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nekaj sekund":"nekaj sekundami";case"m":return t?"ena minuta":"eno minuto";case"mm":return r+=1===e?t?"minuta":"minuto":2===e?t||i?"minuti":"minutama":5>e?t||i?"minute":"minutami":t||i?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return r+=1===e?t?"ura":"uro":2===e?t||i?"uri":"urama":5>e?t||i?"ure":"urami":t||i?"ur":"urami";case"d":return t||i?"en dan":"enim dnem";case"dd":return r+=1===e?t||i?"dan":"dnem":2===e?t||i?"dni":"dnevoma":t||i?"dni":"dnevi";case"M":return t||i?"en mesec":"enim mesecem";case"MM":return r+=1===e?t||i?"mesec":"mesecem":2===e?t||i?"meseca":"mesecema":5>e?t||i?"mesece":"meseci":t||i?"mesecev":"meseci";case"y":return t||i?"eno leto":"enim letom";case"yy":return r+=1===e?t||i?"leto":"letom":2===e?t||i?"leti":"letoma":5>e?t||i?"leta":"leti":t||i?"let":"leti"}}function tr(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"}function nr(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"}function ir(e,t,n,i){var r=rr(e);switch(n){case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}function rr(e){var t=Math.floor(e%1e3/100),n=Math.floor(e%100/10),i=e%10,r="";return t>0&&(r+=ys[t]+"vatlh"),n>0&&(r+=(""!==r?" ":"")+ys[n]+"maH"),i>0&&(r+=(""!==r?" ":"")+ys[i]),""===r?"pagh":r}function ar(e,t,n,i){var r={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",""+e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",""+e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",""+e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",""+e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",""+e+" ars"]};return i?r[n][0]:t?r[n][0]:r[n][1]}function or(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?n[1]:n[2]}function sr(e,t,n){var i={mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+or(i[n],+e)}function lr(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},i=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[i][e.day()]}function dr(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}var ur,cr;cr=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,i=0;n>i;i++)if(i in t&&e.call(this,t[i],i,t))return!0;return!1};var hr=e.momentProperties=[],pr=!1,mr={};e.suppressDeprecationWarnings=!1,e.deprecationHandler=null;var fr;fr=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)s(e,t)&&n.push(t);return n};var _r,yr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},gr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},vr="Invalid date",Mr="%d",wr=/\d{1,2}/,br={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Lr={},Dr={},kr=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Tr=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Sr={},Yr={},xr=/\d/,Cr=/\d\d/,Er=/\d{3}/,Hr=/\d{4}/,Ar=/[+-]?\d{6}/,Pr=/\d\d?/,jr=/\d\d\d\d?/,Ir=/\d\d\d\d\d\d?/,Or=/\d{1,3}/,zr=/\d{1,4}/,Fr=/[+-]?\d{1,6}/,Wr=/\d+/,$r=/[+-]?\d+/,Rr=/Z|[+-]\d\d:?\d\d/gi,Nr=/Z|[+-]\d\d(?::?\d\d)?/gi,qr=/[+-]?\d+(\.\d{1,3})?/,Br=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ur={},Jr={},Vr=0,Gr=1,Xr=2,Qr=3,Zr=4,Kr=5,ea=6,ta=7,na=8;_r=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},B("M",["MM",2],"Mo",function(){return this.month()+1}),B("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),B("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),O("month",8),X("M",Pr),X("MM",Pr,Cr),X("MMM",function(e,t){return t.monthsShortRegex(e)}),X("MMMM",function(e,t){return t.monthsRegex(e)}),ee(["M","MM"],function(e,t){t[Gr]=v(e)-1}),ee(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[Gr]=r:c(n).invalidMonth=e});var ia=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,ra="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),aa="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),oa=Br,sa=Br;B("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),B(0,["YY",2],0,function(){return this.year()%100}),B(0,["YYYY",4],0,"year"),B(0,["YYYYY",5],0,"year"),B(0,["YYYYYY",6,!0],0,"year"),P("year","y"),O("year",1),X("Y",$r),X("YY",Pr,Cr),X("YYYY",zr,Hr),X("YYYYY",Fr,Ar),X("YYYYYY",Fr,Ar),ee(["YYYYY","YYYYYY"],Vr),ee("YYYY",function(t,n){n[Vr]=2===t.length?e.parseTwoDigitYear(t):v(t)}),ee("YY",function(t,n){n[Vr]=e.parseTwoDigitYear(t)}),ee("Y",function(e,t){t[Vr]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return v(e)+(v(e)>68?1900:2e3)};var la=F("FullYear",!0);B("w",["ww",2],"wo","week"),B("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),O("week",5),O("isoWeek",5),X("w",Pr),X("ww",Pr,Cr),X("W",Pr),X("WW",Pr,Cr),te(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=v(e)});var da={dow:0,doy:6};B("d",0,"do","day"),B("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),B("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),B("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),B("e",0,0,"weekday"),B("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),O("day",11),O("weekday",11),O("isoWeekday",11),X("d",Pr),X("e",Pr),X("E",Pr),X("dd",function(e,t){return t.weekdaysMinRegex(e)}),X("ddd",function(e,t){return t.weekdaysShortRegex(e)}),X("dddd",function(e,t){return t.weekdaysRegex(e)}),te(["dd","ddd","dddd"],function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);null!=r?t.d=r:c(n).invalidWeekday=e}),te(["d","e","E"],function(e,t,n,i){t[i]=v(e)});var ua="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ca="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ha="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),pa=Br,ma=Br,fa=Br;B("H",["HH",2],0,"hour"),B("h",["hh",2],0,Re),B("k",["kk",2],0,Ne),B("hmm",0,0,function(){return""+Re.apply(this)+q(this.minutes(),2)}),B("hmmss",0,0,function(){return""+Re.apply(this)+q(this.minutes(),2)+q(this.seconds(),2)}),B("Hmm",0,0,function(){return""+this.hours()+q(this.minutes(),2)}),B("Hmmss",0,0,function(){return""+this.hours()+q(this.minutes(),2)+q(this.seconds(),2)}),qe("a",!0),qe("A",!1),P("hour","h"),O("hour",13),X("a",Be),X("A",Be),X("H",Pr),X("h",Pr),X("HH",Pr,Cr),X("hh",Pr,Cr),X("hmm",jr),X("hmmss",Ir),X("Hmm",jr),X("Hmmss",Ir),ee(["H","HH"],Qr),ee(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ee(["h","hh"],function(e,t,n){t[Qr]=v(e),c(n).bigHour=!0}),ee("hmm",function(e,t,n){var i=e.length-2;t[Qr]=v(e.substr(0,i)),t[Zr]=v(e.substr(i)),c(n).bigHour=!0}),ee("hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Qr]=v(e.substr(0,i)),t[Zr]=v(e.substr(i,2)),t[Kr]=v(e.substr(r)),c(n).bigHour=!0}),ee("Hmm",function(e,t,n){var i=e.length-2;t[Qr]=v(e.substr(0,i)),t[Zr]=v(e.substr(i))}),ee("Hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Qr]=v(e.substr(0,i)),t[Zr]=v(e.substr(i,2)),t[Kr]=v(e.substr(r))});var _a,ya=/[ap]\.?m?\.?/i,ga=F("Hours",!0),va={calendar:yr,longDateFormat:gr,invalidDate:vr,ordinal:Mr,ordinalParse:wr,relativeTime:br,months:ra,monthsShort:aa,week:da,weekdays:ua,weekdaysMin:ha,weekdaysShort:ca,meridiemParse:ya},Ma={},wa=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,ba=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,La=/Z|[+-]\d\d(?::?\d\d)?/,Da=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],ka=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ta=/^\/?Date\((\-?\d+)/i;
e.createFromInputFallback=b("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),e.ISO_8601=function(){};var Sa=b("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=yt.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:p()}),Ya=b("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=yt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()}),xa=function(){return Date.now?Date.now():+new Date};Lt("Z",":"),Lt("ZZ",""),X("Z",Nr),X("ZZ",Nr),ee(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Dt(Nr,e)});var Ca=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Ea=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,Ha=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;zt.fn=wt.prototype;var Aa=Nt(1,"add"),Pa=Nt(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",e.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ja=b("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});B(0,["gg",2],0,function(){return this.weekYear()%100}),B(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Dn("gggg","weekYear"),Dn("ggggg","weekYear"),Dn("GGGG","isoWeekYear"),Dn("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),O("weekYear",1),O("isoWeekYear",1),X("G",$r),X("g",$r),X("GG",Pr,Cr),X("gg",Pr,Cr),X("GGGG",zr,Hr),X("gggg",zr,Hr),X("GGGGG",Fr,Ar),X("ggggg",Fr,Ar),te(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=v(e)}),te(["gg","GG"],function(t,n,i,r){n[r]=e.parseTwoDigitYear(t)}),B("Q",0,"Qo","quarter"),P("quarter","Q"),O("quarter",7),X("Q",xr),ee("Q",function(e,t){t[Gr]=3*(v(e)-1)}),B("D",["DD",2],"Do","date"),P("date","D"),O("date",9),X("D",Pr),X("DD",Pr,Cr),X("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),ee(["D","DD"],Xr),ee("Do",function(e,t){t[Xr]=v(e.match(Pr)[0],10)});var Ia=F("Date",!0);B("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),O("dayOfYear",4),X("DDD",Or),X("DDDD",Er),ee(["DDD","DDDD"],function(e,t,n){n._dayOfYear=v(e)}),B("m",["mm",2],0,"minute"),P("minute","m"),O("minute",14),X("m",Pr),X("mm",Pr,Cr),ee(["m","mm"],Zr);var Oa=F("Minutes",!1);B("s",["ss",2],0,"second"),P("second","s"),O("second",15),X("s",Pr),X("ss",Pr,Cr),ee(["s","ss"],Kr);var za=F("Seconds",!1);B("S",0,0,function(){return~~(this.millisecond()/100)}),B(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),B(0,["SSS",3],0,"millisecond"),B(0,["SSSS",4],0,function(){return 10*this.millisecond()}),B(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),B(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),B(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),B(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),B(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),O("millisecond",16),X("S",Or,xr),X("SS",Or,Cr),X("SSS",Or,Er);var Fa;for(Fa="SSSS";Fa.length<=9;Fa+="S")X(Fa,Wr);for(Fa="S";Fa.length<=9;Fa+="S")ee(Fa,An);var Wa=F("Milliseconds",!1);B("z",0,0,"zoneAbbr"),B("zz",0,0,"zoneName");var $a=_.prototype;$a.add=Aa,$a.calendar=Ut,$a.clone=Jt,$a.diff=en,$a.endOf=pn,$a.format=an,$a.from=on,$a.fromNow=sn,$a.to=ln,$a.toNow=dn,$a.get=R,$a.invalidAt=bn,$a.isAfter=Vt,$a.isBefore=Gt,$a.isBetween=Xt,$a.isSame=Qt,$a.isSameOrAfter=Zt,$a.isSameOrBefore=Kt,$a.isValid=Mn,$a.lang=ja,$a.locale=un,$a.localeData=cn,$a.max=Ya,$a.min=Sa,$a.parsingFlags=wn,$a.set=N,$a.startOf=hn,$a.subtract=Pa,$a.toArray=yn,$a.toObject=gn,$a.toDate=_n,$a.toISOString=rn,$a.toJSON=vn,$a.toString=nn,$a.unix=fn,$a.valueOf=mn,$a.creationData=Ln,$a.year=la,$a.isLeapYear=_e,$a.weekYear=kn,$a.isoWeekYear=Tn,$a.quarter=$a.quarters=En,$a.month=de,$a.daysInMonth=ue,$a.week=$a.weeks=Te,$a.isoWeek=$a.isoWeeks=Se,$a.weeksInYear=Yn,$a.isoWeeksInYear=Sn,$a.date=Ia,$a.day=$a.days=je,$a.weekday=Ie,$a.isoWeekday=Oe,$a.dayOfYear=Hn,$a.hour=$a.hours=ga,$a.minute=$a.minutes=Oa,$a.second=$a.seconds=za,$a.millisecond=$a.milliseconds=Wa,$a.utcOffset=St,$a.utc=xt,$a.local=Ct,$a.parseZone=Et,$a.hasAlignedHourOffset=Ht,$a.isDST=At,$a.isLocal=jt,$a.isUtcOffset=It,$a.isUtc=Ot,$a.isUTC=Ot,$a.zoneAbbr=Pn,$a.zoneName=jn,$a.dates=b("dates accessor is deprecated. Use date instead.",Ia),$a.months=b("months accessor is deprecated. Use month instead",de),$a.years=b("years accessor is deprecated. Use year instead",la),$a.zone=b("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Yt),$a.isDSTShifted=b("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Pt);var Ra=$a,Na=S.prototype;Na.calendar=Y,Na.longDateFormat=x,Na.invalidDate=C,Na.ordinal=E,Na.preparse=zn,Na.postformat=zn,Na.relativeTime=H,Na.pastFuture=A,Na.set=k,Na.months=re,Na.monthsShort=ae,Na.monthsParse=se,Na.monthsRegex=he,Na.monthsShortRegex=ce,Na.week=Le,Na.firstDayOfYear=ke,Na.firstDayOfWeek=De,Na.weekdays=Ce,Na.weekdaysMin=He,Na.weekdaysShort=Ee,Na.weekdaysParse=Pe,Na.weekdaysRegex=ze,Na.weekdaysShortRegex=Fe,Na.weekdaysMinRegex=We,Na.isPM=Ue,Na.meridiem=Je,Qe("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===v(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=b("moment.lang is deprecated. Use moment.locale instead.",Qe),e.langData=b("moment.langData is deprecated. Use moment.localeData instead.",et);var qa=Math.abs,Ba=ii("ms"),Ua=ii("s"),Ja=ii("m"),Va=ii("h"),Ga=ii("d"),Xa=ii("w"),Qa=ii("M"),Za=ii("y"),Ka=ai("milliseconds"),eo=ai("seconds"),to=ai("minutes"),no=ai("hours"),io=ai("days"),ro=ai("months"),ao=ai("years"),oo=Math.round,so={s:45,m:45,h:22,d:26,M:11},lo=Math.abs,uo=wt.prototype;uo.abs=Jn,uo.add=Gn,uo.subtract=Xn,uo.as=ti,uo.asMilliseconds=Ba,uo.asSeconds=Ua,uo.asMinutes=Ja,uo.asHours=Va,uo.asDays=Ga,uo.asWeeks=Xa,uo.asMonths=Qa,uo.asYears=Za,uo.valueOf=ni,uo._bubble=Zn,uo.get=ri,uo.milliseconds=Ka,uo.seconds=eo,uo.minutes=to,uo.hours=no,uo.days=io,uo.weeks=oi,uo.months=ro,uo.years=ao,uo.humanize=ci,uo.toISOString=hi,uo.toString=hi,uo.toJSON=hi,uo.locale=un,uo.localeData=cn,uo.toIsoString=b("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",hi),uo.lang=ja,B("X",0,0,"unix"),B("x",0,0,"valueOf"),X("x",$r),X("X",qr),ee("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ee("x",function(e,t,n){n._d=new Date(v(e))}),e.version="2.14.1",t(yt),e.fn=Ra,e.min=vt,e.max=Mt,e.now=xa,e.utc=d,e.unix=In,e.months=Rn,e.isDate=a,e.locale=Qe,e.invalid=p,e.duration=zt,e.isMoment=y,e.weekdays=qn,e.parseZone=On,e.localeData=et,e.isDuration=bt,e.monthsShort=Nn,e.weekdaysMin=Un,e.defineLocale=Ze,e.updateLocale=Ke,e.locales=tt,e.weekdaysShort=Bn,e.normalizeUnits=j,e.relativeTimeRounding=di,e.relativeTimeThreshold=ui,e.calendarFormat=Bt,e.prototype=Ra;var co=e,ho=(co.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return 12>e?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),co.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}}),{1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"}),po={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},mo=(co.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return 12>e?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return po[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return ho[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),co.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}}),{1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"}),fo={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},_o=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&10>=e%100?3:e%100>=11?4:5},yo={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},go=function(e){return function(t,n,i,r){var a=_o(t),o=yo[e][_o(t)];return 2===a&&(o=o[n?0:1]),o.replace(/%d/i,t)}},vo=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"],Mo=(co.defineLocale("ar",{months:vo,monthsShort:vo,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return 12>e?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:go("s"),m:go("m"),mm:go("m"),h:go("h"),hh:go("h"),d:go("d"),dd:go("d"),M:go("M"),MM:go("M"),y:go("y"),yy:go("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return fo[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return mo[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),{1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"}),wo=(co.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return 4>e?"gecə":12>e?"səhər":17>e?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var t=e%10,n=e%100-t,i=e>=100?100:null;return e+(Mo[t]||Mo[n]||Mo[i])},week:{dow:1,doy:7}}),co.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:mi,mm:mi,h:mi,hh:mi,d:"дзень",dd:mi,M:"месяц",MM:mi,y:"год",yy:mi},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return 4>e?"ночы":12>e?"раніцы":17>e?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!==2&&e%10!==3||e%100===12||e%100===13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}}),co.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&20>n?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}}),{1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"}),bo={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"},Lo=(co.defineLocale("bn",{months:"জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি".split("_"),weekdaysMin:"রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return bo[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return wo[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&5>e||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return 4>e?"রাত":10>e?"সকাল":17>e?"দুপুর":20>e?"বিকাল":"রাত"},week:{dow:0,doy:6}}),{1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"}),Do={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"},ko=(co.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return Do[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Lo[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&5>e||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return 4>e?"མཚན་མོ":10>e?"ཞོགས་ཀས":17>e?"ཉིན་གུང":20>e?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}}),co.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:fi,h:"un eur",hh:"%d eur",d:"un devezh",dd:fi,M:"ur miz",MM:fi,y:"ur bloaz",yy:_i},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}}),co.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:Mi,mm:Mi,h:Mi,hh:Mi,d:"dan",dd:Mi,M:"mjesec",MM:Mi,y:"godinu",yy:Mi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),co.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}}),"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_")),To="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),So=(co.defineLocale("cs",{months:ko,monthsShort:To,monthsParse:function(e,t){var n,i=[];for(n=0;12>n;n++)i[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return i}(ko,To),shortMonthsParse:function(e){var t,n=[];for(t=0;12>t;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(To),longMonthsParse:function(e){var t,n=[];for(t=0;12>t;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(ko),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:bi,m:bi,mm:bi,h:bi,hh:bi,d:bi,dd:bi,M:bi,MM:bi,y:bi,yy:bi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},ordinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}}),co.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="",i=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=i[t]),e+n},week:{dow:1,doy:4}}),co.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:Li,mm:"%d Minuten",h:Li,hh:"%d Stunden",d:Li,dd:Li,M:Li,MM:Li,y:Li,yy:Li},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:Di,mm:"%d Minuten",h:Di,hh:"%d Stunden",d:Di,dd:Di,M:Di,MM:Di,y:Di,yy:Di},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"]),Yo=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"],xo=(co.defineLocale("dv",{months:So,monthsShort:So,weekdays:Yo,weekdaysShort:Yo,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return 12>e?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{
future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}}),co.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n=this._calendarEl[e],i=t&&t.hours();return D(n)&&(n=n.apply(t)),n.replace("{}",i%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}}),co.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),co.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),co.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),co.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),co.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),co.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-an de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}}),"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),Co="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),Eo=(co.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?Co[e.month()]:xo[e.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),Ho="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),Ao=(co.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?Ho[e.month()]:Eo[e.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),co.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:ki,m:ki,mm:ki,h:ki,hh:ki,d:ki,dd:"%d päeva",M:ki,MM:ki,y:ki,yy:ki},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),{1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"}),Po={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"},jo=(co.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return 12>e?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return Po[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return Ao[e]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}}),"nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" ")),Io=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",jo[7],jo[8],jo[9]],Oo=(co.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:Ti,m:Ti,mm:Ti,h:Ti,hh:Ti,d:Ti,dd:Ti,M:Ti,MM:Ti,y:Ti,yy:Ti},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")}}),co.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")},week:{dow:1,doy:4}}),co.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?"er":"")},week:{dow:1,doy:4}}),"jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_")),zo="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),Fo=(co.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?zo[e.month()]:Oo[e.month()]},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"]),Wo=["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],$o=["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],Ro=["Did","Dil","Dim","Dic","Dia","Dih","Dis"],No=["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],qo=(co.defineLocale("gd",{months:Fo,monthsShort:Wo,monthsParseExact:!0,weekdays:$o,weekdaysShort:Ro,weekdaysMin:No,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},ordinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10===2?"na":"mh";return e+t},week:{dow:1,doy:4}}),co.defineLocale("gl",{months:"Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),monthsShort:"Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),monthsParseExact:!0,weekdays:"Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),weekdaysShort:"Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return"uns segundos"===e?"nuns segundos":"en "+e},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:7}}),co.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10===0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return 5>e?"לפנות בוקר":10>e?"בבוקר":12>e?n?'לפנה"צ':"לפני הצהריים":18>e?n?'אחה"צ':"א��רי הצהריים":"בערב"}}),{1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"}),Bo={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},Uo=(co.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return Bo[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return qo[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?4>e?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"रात":10>e?"सुबह":17>e?"दोपहर":20>e?"शाम":"रात"},week:{dow:0,doy:6}}),co.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:Yi,mm:Yi,h:Yi,hh:Yi,d:"dan",dd:Yi,M:"mjesec",MM:Yi,y:"godinu",yy:Yi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),"vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ")),Jo=(co.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return 12>e?n===!0?"de":"DE":n===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return Ci.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return Ci.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:xi,m:xi,mm:xi,h:xi,hh:xi,d:xi,dd:xi,M:xi,MM:xi,y:xi,yy:xi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),co.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return 4>e?"գիշերվա":12>e?"առավոտվա":17>e?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}}),co.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"pagi":15>e?"siang":19>e?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),co.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:Hi,m:Hi,mm:Hi,h:"klukkustund",hh:Hi,d:Hi,dd:Hi,M:Hi,MM:Hi,y:Hi,yy:Hi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),co.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return 12>e?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},ordinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),co.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"enjing":15>e?"siyang":19>e?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}}),co.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":20>e||100>=e&&e%20===0||e%100===0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}}),{0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"}),Vo=(co.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var t=e%10,n=e>=100?100:null;return e+(Jo[e]||Jo[t]||Jo[n])},week:{dow:1,doy:7}}),co.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}}),co.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"일분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return 12>e?"오전":"오후"}}),{0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"}),Go=(co.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var t=e%10,n=e>=100?100:null;return e+(Vo[e]||Vo[t]||Vo[n])},week:{dow:1,doy:7}}),co.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:Pi,past:ji,s:"e puer Sekonnen",m:Ai,mm:"%d Minutten",h:Ai,hh:"%d Stonnen",d:Ai,dd:"%d Deeg",M:Ai,MM:"%d Méint",y:Ai,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return 12>e?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},ordinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}}),{m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"}),Xo=(co.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?|MMMM?(\[[^\[\]]*\]|\s+)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:Oi,m:zi,mm:$i,h:zi,hh:$i,d:zi,dd:$i,M:zi,MM:$i,y:zi,yy:$i},ordinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}}),{m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")}),Qo=(co.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:Bi,m:qi,mm:Ni,h:qi,hh:Ni,d:qi,dd:Ni,M:qi,MM:Ni,y:qi,yy:Ni},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{words:{m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var i=Qo.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+Qo.correctGrammaticalCase(e,i)}}),Zo=(co.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:Qo.translate,mm:Qo.translate,h:Qo.translate,hh:Qo.translate,d:"dan",dd:Qo.translate,M:"mjesec",MM:Qo.translate,y:"godinu",yy:Qo.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),co.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&20>n?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}}),co.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return 4>e?"രാത്രി":12>e?"രാവിലെ":17>e?"ഉച്ച കഴിഞ്ഞ്":20>e?"വൈകുന്നേരം":"രാത്രി"}}),{1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"}),Ko={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},es=(co.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:Ui,m:Ui,mm:Ui,h:Ui,hh:Ui,d:Ui,dd:Ui,M:Ui,MM:Ui,y:Ui,yy:Ui},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return Ko[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Zo[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?4>e?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"रात्री":10>e?"सकाळी":17>e?"दुपारी":20>e?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}}),co.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"pagi":15>e?"tengahari":19>e?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),co.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return 11>e?"pagi":15>e?"tengahari":19>e?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),{1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"}),ts={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"},ns=(co.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return ts[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return es[e]})},week:{dow:1,doy:4}}),co.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"}),is={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},rs=(co.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return is[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return ns[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?4>e?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return 3>e?"राति":12>e?"बिहान":16>e?"दिउँसो":20>e?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}}),"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),as="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),os=(co.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?as[e.month()]:rs[e.month()]},monthsParseExact:!0,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),co.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"}),ss={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"},ls=(co.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return ss[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return os[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?4>e?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"ਰਾਤ":10>e?"ਸਵੇਰ":17>e?"ਦੁਪਹਿਰ":20>e?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}}),"styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_")),ds="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),us=(co.defineLocale("pl",{months:function(e,t){return""===t?"("+ds[e.month()]+"|"+ls[e.month()]+")":/D MMMM/.test(t)?ds[e.month()]:ls[e.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:Vi,mm:Vi,h:Vi,hh:Vi,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:Vi,y:"rok",yy:Vi},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),co.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",
LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),co.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:Gi,h:"o oră",hh:Gi,d:"o zi",dd:Gi,M:"o lună",MM:Gi,y:"un an",yy:Gi},week:{dow:1,doy:7}}),[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i]),cs=(co.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:us,longMonthsParse:us,shortMonthsParse:us,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:Qi,mm:Qi,h:"час",hh:Qi,d:"день",dd:Qi,M:"месяц",MM:Qi,y:"год",yy:Qi},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return 4>e?"ночи":12>e?"утра":17>e?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:7}}),co.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},ordinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}}),"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_")),hs="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),ps=(co.defineLocale("sk",{months:cs,monthsShort:hs,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:Ki,m:Ki,mm:Ki,h:Ki,hh:Ki,d:Ki,dd:Ki,M:Ki,MM:Ki,y:Ki,yy:Ki},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:er,m:er,mm:er,h:er,hh:er,d:er,dd:er,M:er,MM:er,y:er,yy:er},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),co.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return 12>e?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var i=ps.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+ps.correctGrammaticalCase(e,i)}}),ms=(co.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var e=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:ps.translate,mm:ps.translate,h:ps.translate,hh:ps.translate,d:"дан",dd:ps.translate,M:"месец",MM:ps.translate,y:"годину",yy:ps.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),{words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var i=ms.words[n];return 1===n.length?t?i[0]:i[1]:e+" "+ms.correctGrammaticalCase(e,i)}}),fs=(co.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:ms.translate,mm:ms.translate,h:ms.translate,hh:ms.translate,d:"dan",dd:ms.translate,M:"mesec",MM:ms.translate,y:"godinu",yy:ms.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),co.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return 11>e?"ekuseni":15>e?"emini":19>e?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},ordinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}}),co.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}}),co.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}}),{1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"}),_s={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"},ys=(co.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return _s[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return fs[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return 2>e?" யாமம்":6>e?" வைகறை":10>e?" காலை":14>e?" நண்பகல்":18>e?" எற்பாடு":22>e?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?2>e?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}}),co.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},ordinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?4>e?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return 4>e?"రాత్రి":10>e?"ఉదయం":17>e?"మధ్యాహ్నం":20>e?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}}),co.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"H นาฬิกา m นาที s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H นาฬิกา m นาที",LLLL:"วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return 12>e?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),co.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"[Ngayon sa] LT",nextDay:"[Bukas sa] LT",nextWeek:"dddd [sa] LT",lastDay:"[Kahapon sa] LT",lastWeek:"dddd [huling linggo] LT",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),"pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_")),gs=(co.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:tr,past:nr,s:"puS lup",m:"wa’ tup",mm:ir,h:"wa’ rep",hh:ir,d:"wa’ jaj",dd:ir,M:"wa’ jar",MM:ir,y:"wa’ DIS",yy:ir},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"}),vs=(co.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+"'ıncı";var t=e%10,n=e%100-t,i=e>=100?100:null;return e+(gs[t]||gs[n]||gs[i])},week:{dow:1,doy:7}}),co.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:ar,m:ar,mm:ar,h:ar,hh:ar,d:ar,dd:ar,M:ar,MM:ar,y:ar,yy:ar},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),co.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}}),co.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}}),co.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:lr,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:dr("[Сьогодні "),nextDay:dr("[Завтра "),lastDay:dr("[Вчора "),nextWeek:dr("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return dr("[Минулої] dddd [").call(this);case 1:case 2:case 4:return dr("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:sr,mm:sr,h:"годину",hh:sr,d:"день",dd:sr,M:"місяць",MM:sr,y:"рік",yy:sr},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return 4>e?"ночі":12>e?"ранку":17>e?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}}),co.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}}),co.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return 12>e?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),co.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}}),co.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),
weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return 600>i?"凌晨":900>i?"早上":1130>i?"上午":1230>i?"中午":1800>i?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var e,t;return e=co().startOf("week"),t=this.diff(e,"days")>=7?"[下]":"[本]",0===this.minutes()?t+"dddAh点整":t+"dddAh点mm"},lastWeek:function(){var e,t;return e=co().startOf("week"),t=this.unix()<e.unix()?"[上]":"[本]",0===this.minutes()?t+"dddAh点整":t+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}}),co.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return 600>i?"凌晨":900>i?"早上":1130>i?"上午":1230>i?"中午":1800>i?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}}),co);return vs.locale("en"),vs}),!function(e){"use strict";if("function"==typeof define&&define.amd)define(["jquery","moment"],e);else if("object"==typeof exports)e(require("jquery"),require("moment"));else{if("undefined"==typeof jQuery)throw"bootstrap-datetimepicker requires jQuery to be loaded first";if("undefined"==typeof moment)throw"bootstrap-datetimepicker requires Moment.js to be loaded first";e(jQuery,moment)}}(function(e,t){"use strict";if(!t)throw new Error("bootstrap-datetimepicker requires Moment.js to be loaded first");var n=function(n,i){var r,a,o,s,l,d,u,c={},h=!0,p=!1,m=!1,f=0,_=[{clsName:"days",navFnc:"M",navStep:1},{clsName:"months",navFnc:"y",navStep:1},{clsName:"years",navFnc:"y",navStep:10},{clsName:"decades",navFnc:"y",navStep:100}],y=["days","months","years","decades"],g=["top","bottom","auto"],v=["left","right","auto"],M=["default","top","bottom"],w={up:38,38:"up",down:40,40:"down",left:37,37:"left",right:39,39:"right",tab:9,9:"tab",escape:27,27:"escape",enter:13,13:"enter",pageUp:33,33:"pageUp",pageDown:34,34:"pageDown",shift:16,16:"shift",control:17,17:"control",space:32,32:"space",t:84,84:"t","delete":46,46:"delete"},b={},L=function(e){var n,r,a,o,s,l=!1;return void 0!==t.tz&&void 0!==i.timeZone&&null!==i.timeZone&&""!==i.timeZone&&(l=!0),void 0===e||null===e?n=l?t().tz(i.timeZone).startOf("d"):t().startOf("d"):l?(r=t().tz(i.timeZone).utcOffset(),a=t(e,d,i.useStrict).utcOffset(),a!==r?(o=t().tz(i.timeZone).format("Z"),s=t(e,d,i.useStrict).format("YYYY-MM-DD[T]HH:mm:ss")+o,n=t(s,d,i.useStrict).tz(i.timeZone)):n=t(e,d,i.useStrict).tz(i.timeZone)):n=t(e,d,i.useStrict),n},D=function(e){if("string"!=typeof e||e.length>1)throw new TypeError("isEnabled expects a single character string parameter");switch(e){case"y":return-1!==l.indexOf("Y");case"M":return-1!==l.indexOf("M");case"d":return-1!==l.toLowerCase().indexOf("d");case"h":case"H":return-1!==l.toLowerCase().indexOf("h");case"m":return-1!==l.indexOf("m");case"s":return-1!==l.indexOf("s");default:return!1}},k=function(){return D("h")||D("m")||D("s")},T=function(){return D("y")||D("M")||D("d")},S=function(){var t=e("<thead>").append(e("<tr>").append(e("<th>").addClass("prev").attr("data-action","previous").append(e("<span>").addClass(i.icons.previous))).append(e("<th>").addClass("picker-switch").attr("data-action","pickerSwitch").attr("colspan",i.calendarWeeks?"6":"5")).append(e("<th>").addClass("next").attr("data-action","next").append(e("<span>").addClass(i.icons.next)))),n=e("<tbody>").append(e("<tr>").append(e("<td>").attr("colspan",i.calendarWeeks?"8":"7")));return[e("<div>").addClass("datepicker-days").append(e("<table>").addClass("table-condensed").append(t).append(e("<tbody>"))),e("<div>").addClass("datepicker-months").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone())),e("<div>").addClass("datepicker-years").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone())),e("<div>").addClass("datepicker-decades").append(e("<table>").addClass("table-condensed").append(t.clone()).append(n.clone()))]},Y=function(){var t=e("<tr>"),n=e("<tr>"),r=e("<tr>");return D("h")&&(t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementHour}).addClass("btn").attr("data-action","incrementHours").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-hour").attr({"data-time-component":"hours",title:i.tooltips.pickHour}).attr("data-action","showHours"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementHour}).addClass("btn").attr("data-action","decrementHours").append(e("<span>").addClass(i.icons.down))))),D("m")&&(D("h")&&(t.append(e("<td>").addClass("separator")),n.append(e("<td>").addClass("separator").html(":")),r.append(e("<td>").addClass("separator"))),t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementMinute}).addClass("btn").attr("data-action","incrementMinutes").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-minute").attr({"data-time-component":"minutes",title:i.tooltips.pickMinute}).attr("data-action","showMinutes"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementMinute}).addClass("btn").attr("data-action","decrementMinutes").append(e("<span>").addClass(i.icons.down))))),D("s")&&(D("m")&&(t.append(e("<td>").addClass("separator")),n.append(e("<td>").addClass("separator").html(":")),r.append(e("<td>").addClass("separator"))),t.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.incrementSecond}).addClass("btn").attr("data-action","incrementSeconds").append(e("<span>").addClass(i.icons.up)))),n.append(e("<td>").append(e("<span>").addClass("timepicker-second").attr({"data-time-component":"seconds",title:i.tooltips.pickSecond}).attr("data-action","showSeconds"))),r.append(e("<td>").append(e("<a>").attr({href:"#",tabindex:"-1",title:i.tooltips.decrementSecond}).addClass("btn").attr("data-action","decrementSeconds").append(e("<span>").addClass(i.icons.down))))),s||(t.append(e("<td>").addClass("separator")),n.append(e("<td>").append(e("<button>").addClass("btn btn-primary").attr({"data-action":"togglePeriod",tabindex:"-1",title:i.tooltips.togglePeriod}))),r.append(e("<td>").addClass("separator"))),e("<div>").addClass("timepicker-picker").append(e("<table>").addClass("table-condensed").append([t,n,r]))},x=function(){var t=e("<div>").addClass("timepicker-hours").append(e("<table>").addClass("table-condensed")),n=e("<div>").addClass("timepicker-minutes").append(e("<table>").addClass("table-condensed")),i=e("<div>").addClass("timepicker-seconds").append(e("<table>").addClass("table-condensed")),r=[Y()];return D("h")&&r.push(t),D("m")&&r.push(n),D("s")&&r.push(i),r},C=function(){var t=[];return i.showTodayButton&&t.push(e("<td>").append(e("<a>").attr({"data-action":"today",title:i.tooltips.today}).append(e("<span>").addClass(i.icons.today)))),!i.sideBySide&&T()&&k()&&t.push(e("<td>").append(e("<a>").attr({"data-action":"togglePicker",title:i.tooltips.selectTime}).append(e("<span>").addClass(i.icons.time)))),i.showClear&&t.push(e("<td>").append(e("<a>").attr({"data-action":"clear",title:i.tooltips.clear}).append(e("<span>").addClass(i.icons.clear)))),i.showClose&&t.push(e("<td>").append(e("<a>").attr({"data-action":"close",title:i.tooltips.close}).append(e("<span>").addClass(i.icons.close)))),e("<table>").addClass("table-condensed").append(e("<tbody>").append(e("<tr>").append(t)))},E=function(){var t=e("<div>").addClass("bootstrap-datetimepicker-widget dropdown-menu"),n=e("<div>").addClass("datepicker").append(S()),r=e("<div>").addClass("timepicker").append(x()),a=e("<ul>").addClass("list-unstyled"),o=e("<li>").addClass("picker-switch"+(i.collapse?" accordion-toggle":"")).append(C());return i.inline&&t.removeClass("dropdown-menu"),s&&t.addClass("usetwentyfour"),D("s")&&!s&&t.addClass("wider"),i.sideBySide&&T()&&k()?(t.addClass("timepicker-sbs"),"top"===i.toolbarPlacement&&t.append(o),t.append(e("<div>").addClass("row").append(n.addClass("col-md-6")).append(r.addClass("col-md-6"))),"bottom"===i.toolbarPlacement&&t.append(o),t):("top"===i.toolbarPlacement&&a.append(o),T()&&a.append(e("<li>").addClass(i.collapse&&k()?"collapse in":"").append(n)),"default"===i.toolbarPlacement&&a.append(o),k()&&a.append(e("<li>").addClass(i.collapse&&T()?"collapse":"").append(r)),"bottom"===i.toolbarPlacement&&a.append(o),t.append(a))},H=function(){var t,r={};return t=n.is("input")||i.inline?n.data():n.find("input").data(),t.dateOptions&&t.dateOptions instanceof Object&&(r=e.extend(!0,r,t.dateOptions)),e.each(i,function(e){var n="date"+e.charAt(0).toUpperCase()+e.slice(1);void 0!==t[n]&&(r[e]=t[n])}),r},A=function(){var t,r=(p||n).position(),a=(p||n).offset(),o=i.widgetPositioning.vertical,s=i.widgetPositioning.horizontal;if(i.widgetParent)t=i.widgetParent.append(m);else if(n.is("input"))t=n.after(m).parent();else{if(i.inline)return void(t=n.append(m));t=n,n.children().first().after(m)}if("auto"===o&&(o=a.top+1.5*m.height()>=e(window).height()+e(window).scrollTop()&&m.height()+n.outerHeight()<a.top?"top":"bottom"),"auto"===s&&(s=t.width()<a.left+m.outerWidth()/2&&a.left+m.outerWidth()>e(window).width()?"right":"left"),"top"===o?m.addClass("top").removeClass("bottom"):m.addClass("bottom").removeClass("top"),"right"===s?m.addClass("pull-right"):m.removeClass("pull-right"),"relative"!==t.css("position")&&(t=t.parents().filter(function(){return"relative"===e(this).css("position")}).first()),0===t.length)throw new Error("datetimepicker component should be placed within a relative positioned container");m.css({top:"top"===o?"auto":r.top+n.outerHeight(),bottom:"top"===o?r.top+n.outerHeight():"auto",left:"left"===s?t===n?0:r.left:"auto",right:"left"===s?"auto":t.outerWidth()-n.outerWidth()-(t===n?0:r.left)})},P=function(e){"dp.change"===e.type&&(e.date&&e.date.isSame(e.oldDate)||!e.date&&!e.oldDate)||n.trigger(e)},j=function(e){"y"===e&&(e="YYYY"),P({type:"dp.update",change:e,viewDate:a.clone()})},I=function(e){m&&(e&&(u=Math.max(f,Math.min(3,u+e))),m.find(".datepicker > div").hide().filter(".datepicker-"+_[u].clsName).show())},O=function(){var t=e("<tr>"),n=a.clone().startOf("w").startOf("d");for(i.calendarWeeks===!0&&t.append(e("<th>").addClass("cw").text("#"));n.isBefore(a.clone().endOf("w"));)t.append(e("<th>").addClass("dow").text(n.format("dd"))),n.add(1,"d");m.find(".datepicker-days thead").append(t)},z=function(e){return i.disabledDates[e.format("YYYY-MM-DD")]===!0},F=function(e){return i.enabledDates[e.format("YYYY-MM-DD")]===!0},W=function(e){return i.disabledHours[e.format("H")]===!0},$=function(e){return i.enabledHours[e.format("H")]===!0},R=function(t,n){if(!t.isValid())return!1;if(i.disabledDates&&"d"===n&&z(t))return!1;if(i.enabledDates&&"d"===n&&!F(t))return!1;if(i.minDate&&t.isBefore(i.minDate,n))return!1;if(i.maxDate&&t.isAfter(i.maxDate,n))return!1;if(i.daysOfWeekDisabled&&"d"===n&&-1!==i.daysOfWeekDisabled.indexOf(t.day()))return!1;if(i.disabledHours&&("h"===n||"m"===n||"s"===n)&&W(t))return!1;if(i.enabledHours&&("h"===n||"m"===n||"s"===n)&&!$(t))return!1;if(i.disabledTimeIntervals&&("h"===n||"m"===n||"s"===n)){var r=!1;if(e.each(i.disabledTimeIntervals,function(){return t.isBetween(this[0],this[1])?(r=!0,!1):void 0}),r)return!1}return!0},N=function(){for(var t=[],n=a.clone().startOf("y").startOf("d");n.isSame(a,"y");)t.push(e("<span>").attr("data-action","selectMonth").addClass("month").text(n.format("MMM"))),n.add(1,"M");m.find(".datepicker-months td").empty().append(t)},q=function(){var t=m.find(".datepicker-months"),n=t.find("th"),o=t.find("tbody").find("span");n.eq(0).find("span").attr("title",i.tooltips.prevYear),n.eq(1).attr("title",i.tooltips.selectYear),n.eq(2).find("span").attr("title",i.tooltips.nextYear),t.find(".disabled").removeClass("disabled"),R(a.clone().subtract(1,"y"),"y")||n.eq(0).addClass("disabled"),n.eq(1).text(a.year()),R(a.clone().add(1,"y"),"y")||n.eq(2).addClass("disabled"),o.removeClass("active"),r.isSame(a,"y")&&!h&&o.eq(r.month()).addClass("active"),o.each(function(t){R(a.clone().month(t),"M")||e(this).addClass("disabled")})},B=function(){var e=m.find(".datepicker-years"),t=e.find("th"),n=a.clone().subtract(5,"y"),o=a.clone().add(6,"y"),s="";for(t.eq(0).find("span").attr("title",i.tooltips.prevDecade),t.eq(1).attr("title",i.tooltips.selectDecade),t.eq(2).find("span").attr("title",i.tooltips.nextDecade),e.find(".disabled").removeClass("disabled"),i.minDate&&i.minDate.isAfter(n,"y")&&t.eq(0).addClass("disabled"),t.eq(1).text(n.year()+"-"+o.year()),i.maxDate&&i.maxDate.isBefore(o,"y")&&t.eq(2).addClass("disabled");!n.isAfter(o,"y");)s+='<span data-action="selectYear" class="year'+(n.isSame(r,"y")&&!h?" active":"")+(R(n,"y")?"":" disabled")+'">'+n.year()+"</span>",n.add(1,"y");e.find("td").html(s)},U=function(){var e=m.find(".datepicker-decades"),n=e.find("th"),o=t({y:a.year()-a.year()%100-1}),s=o.clone().add(100,"y"),l=o.clone(),d="";for(n.eq(0).find("span").attr("title",i.tooltips.prevCentury),n.eq(2).find("span").attr("title",i.tooltips.nextCentury),e.find(".disabled").removeClass("disabled"),(o.isSame(t({y:1900}))||i.minDate&&i.minDate.isAfter(o,"y"))&&n.eq(0).addClass("disabled"),n.eq(1).text(o.year()+"-"+s.year()),(o.isSame(t({y:2e3}))||i.maxDate&&i.maxDate.isBefore(s,"y"))&&n.eq(2).addClass("disabled");!o.isAfter(s,"y");)d+='<span data-action="selectDecade" class="decade'+(o.isSame(r,"y")?" active":"")+(R(o,"y")?"":" disabled")+'" data-selection="'+(o.year()+6)+'">'+(o.year()+1)+" - "+(o.year()+12)+"</span>",o.add(12,"y");d+="<span></span><span></span><span></span>",e.find("td").html(d),n.eq(1).text(l.year()+1+"-"+o.year())},J=function(){var t,n,o,s,l=m.find(".datepicker-days"),d=l.find("th"),u=[];if(T()){for(d.eq(0).find("span").attr("title",i.tooltips.prevMonth),d.eq(1).attr("title",i.tooltips.selectMonth),d.eq(2).find("span").attr("title",i.tooltips.nextMonth),l.find(".disabled").removeClass("disabled"),d.eq(1).text(a.format(i.dayViewHeaderFormat)),R(a.clone().subtract(1,"M"),"M")||d.eq(0).addClass("disabled"),R(a.clone().add(1,"M"),"M")||d.eq(2).addClass("disabled"),t=a.clone().startOf("M").startOf("w").startOf("d"),s=0;42>s;s++)0===t.weekday()&&(n=e("<tr>"),i.calendarWeeks&&n.append('<td class="cw">'+t.week()+"</td>"),u.push(n)),o="",t.isBefore(a,"M")&&(o+=" old"),t.isAfter(a,"M")&&(o+=" new"),t.isSame(r,"d")&&!h&&(o+=" active"),R(t,"d")||(o+=" disabled"),t.isSame(L(),"d")&&(o+=" today"),(0===t.day()||6===t.day())&&(o+=" weekend"),n.append('<td data-action="selectDay" data-day="'+t.format("L")+'" class="day'+o+'">'+t.date()+"</td>"),t.add(1,"d");l.find("tbody").empty().append(u),q(),B(),U()}},V=function(){var t=m.find(".timepicker-hours table"),n=a.clone().startOf("d"),i=[],r=e("<tr>");for(a.hour()>11&&!s&&n.hour(12);n.isSame(a,"d")&&(s||a.hour()<12&&n.hour()<12||a.hour()>11);)n.hour()%4===0&&(r=e("<tr>"),i.push(r)),r.append('<td data-action="selectHour" class="hour'+(R(n,"h")?"":" disabled")+'">'+n.format(s?"HH":"hh")+"</td>"),n.add(1,"h");t.empty().append(i)},G=function(){for(var t=m.find(".timepicker-minutes table"),n=a.clone().startOf("h"),r=[],o=e("<tr>"),s=1===i.stepping?5:i.stepping;a.isSame(n,"h");)n.minute()%(4*s)===0&&(o=e("<tr>"),r.push(o)),o.append('<td data-action="selectMinute" class="minute'+(R(n,"m")?"":" disabled")+'">'+n.format("mm")+"</td>"),n.add(s,"m");t.empty().append(r)},X=function(){for(var t=m.find(".timepicker-seconds table"),n=a.clone().startOf("m"),i=[],r=e("<tr>");a.isSame(n,"m");)n.second()%20===0&&(r=e("<tr>"),i.push(r)),r.append('<td data-action="selectSecond" class="second'+(R(n,"s")?"":" disabled")+'">'+n.format("ss")+"</td>"),n.add(5,"s");t.empty().append(i)},Q=function(){var e,t,n=m.find(".timepicker span[data-time-component]");s||(e=m.find(".timepicker [data-action=togglePeriod]"),t=r.clone().add(r.hours()>=12?-12:12,"h"),e.text(r.format("A")),R(t,"h")?e.removeClass("disabled"):e.addClass("disabled")),n.filter("[data-time-component=hours]").text(r.format(s?"HH":"hh")),n.filter("[data-time-component=minutes]").text(r.format("mm")),n.filter("[data-time-component=seconds]").text(r.format("ss")),V(),G(),X()},Z=function(){m&&(J(),Q())},K=function(e){var t=h?null:r;return e?(e=e.clone().locale(i.locale),1!==i.stepping&&e.minutes(Math.round(e.minutes()/i.stepping)*i.stepping%60).seconds(0),void(R(e)?(r=e,a=r.clone(),o.val(r.format(l)),n.data("date",r.format(l)),h=!1,Z(),P({type:"dp.change",date:r.clone(),oldDate:t})):(i.keepInvalid||o.val(h?"":r.format(l)),P({type:"dp.error",date:e})))):(h=!0,o.val(""),n.data("date",""),P({type:"dp.change",date:!1,oldDate:t}),void Z())},ee=function(){var t=!1;return m?(m.find(".collapse").each(function(){var n=e(this).data("collapse");return!n||!n.transitioning||(t=!0,!1)}),t?c:(p&&p.hasClass("btn")&&p.toggleClass("active"),m.hide(),e(window).off("resize",A),m.off("click","[data-action]"),m.off("mousedown",!1),m.remove(),m=!1,P({type:"dp.hide",date:r.clone()}),o.blur(),c)):c},te=function(){K(null)},ne={next:function(){var e=_[u].navFnc;a.add(_[u].navStep,e),J(),j(e)},previous:function(){var e=_[u].navFnc;a.subtract(_[u].navStep,e),J(),j(e)},pickerSwitch:function(){I(1)},selectMonth:function(t){var n=e(t.target).closest("tbody").find("span").index(e(t.target));a.month(n),u===f?(K(r.clone().year(a.year()).month(a.month())),i.inline||ee()):(I(-1),J()),j("M")},selectYear:function(t){var n=parseInt(e(t.target).text(),10)||0;a.year(n),u===f?(K(r.clone().year(a.year())),i.inline||ee()):(I(-1),J()),j("YYYY")},selectDecade:function(t){var n=parseInt(e(t.target).data("selection"),10)||0;a.year(n),u===f?(K(r.clone().year(a.year())),i.inline||ee()):(I(-1),J()),j("YYYY")},selectDay:function(t){var n=a.clone();e(t.target).is(".old")&&n.subtract(1,"M"),e(t.target).is(".new")&&n.add(1,"M"),K(n.date(parseInt(e(t.target).text(),10))),k()||i.keepOpen||i.inline||ee()},incrementHours:function(){var e=r.clone().add(1,"h");R(e,"h")&&K(e)},incrementMinutes:function(){var e=r.clone().add(i.stepping,"m");R(e,"m")&&K(e)},incrementSeconds:function(){var e=r.clone().add(1,"s");R(e,"s")&&K(e)},decrementHours:function(){var e=r.clone().subtract(1,"h");R(e,"h")&&K(e)},decrementMinutes:function(){var e=r.clone().subtract(i.stepping,"m");R(e,"m")&&K(e)},decrementSeconds:function(){var e=r.clone().subtract(1,"s");R(e,"s")&&K(e)},togglePeriod:function(){K(r.clone().add(r.hours()>=12?-12:12,"h"))},togglePicker:function(t){var n,r=e(t.target),a=r.closest("ul"),o=a.find(".in"),s=a.find(".collapse:not(.in)");if(o&&o.length){if(n=o.data("collapse"),n&&n.transitioning)return;o.collapse?(o.collapse("hide"),s.collapse("show")):(o.removeClass("in"),s.addClass("in")),r.is("span")?r.toggleClass(i.icons.time+" "+i.icons.date):r.find("span").toggleClass(i.icons.time+" "+i.icons.date)}},showPicker:function(){m.find(".timepicker > div:not(.timepicker-picker)").hide(),m.find(".timepicker .timepicker-picker").show()},showHours:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-hours").show()},showMinutes:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-minutes").show()},showSeconds:function(){m.find(".timepicker .timepicker-picker").hide(),m.find(".timepicker .timepicker-seconds").show()},selectHour:function(t){var n=parseInt(e(t.target).text(),10);s||(r.hours()>=12?12!==n&&(n+=12):12===n&&(n=0)),K(r.clone().hours(n)),ne.showPicker.call(c)},selectMinute:function(t){K(r.clone().minutes(parseInt(e(t.target).text(),10))),ne.showPicker.call(c)},selectSecond:function(t){K(r.clone().seconds(parseInt(e(t.target).text(),10))),ne.showPicker.call(c)},clear:te,today:function(){var e=L();R(e,"d")&&K(e)},close:ee},ie=function(t){return!e(t.currentTarget).is(".disabled")&&(ne[e(t.currentTarget).data("action")].apply(c,arguments),!1)},re=function(){var t,n={year:function(e){return e.month(0).date(1).hours(0).seconds(0).minutes(0)},month:function(e){return e.date(1).hours(0).seconds(0).minutes(0)},day:function(e){return e.hours(0).seconds(0).minutes(0)},hour:function(e){return e.seconds(0).minutes(0)},minute:function(e){return e.seconds(0)}};return o.prop("disabled")||!i.ignoreReadonly&&o.prop("readonly")||m?c:(void 0!==o.val()&&0!==o.val().trim().length?K(oe(o.val().trim())):i.useCurrent&&h&&(o.is("input")&&0===o.val().trim().length||i.inline)&&(t=L(),"string"==typeof i.useCurrent&&(t=n[i.useCurrent](t)),K(t)),m=E(),O(),N(),m.find(".timepicker-hours").hide(),m.find(".timepicker-minutes").hide(),m.find(".timepicker-seconds").hide(),Z(),I(),e(window).on("resize",A),m.on("click","[data-action]",ie),m.on("mousedown",!1),p&&p.hasClass("btn")&&p.toggleClass("active"),m.show(),A(),i.focusOnShow&&!o.is(":focus")&&o.focus(),P({type:"dp.show"}),c)},ae=function(){return m?ee():re()},oe=function(e){return e=void 0===i.parseInputDate?t.isMoment(e)||e instanceof Date?t(e):L(e):i.parseInputDate(e),e.locale(i.locale),e},se=function(e){var t,n,r,a,o=null,s=[],l={},d=e.which,u="p";b[d]=u;for(t in b)b.hasOwnProperty(t)&&b[t]===u&&(s.push(t),parseInt(t,10)!==d&&(l[t]=!0));for(t in i.keyBinds)if(i.keyBinds.hasOwnProperty(t)&&"function"==typeof i.keyBinds[t]&&(r=t.split(" "),r.length===s.length&&w[d]===r[r.length-1])){for(a=!0,n=r.length-2;n>=0;n--)if(!(w[r[n]]in l)){a=!1;break}if(a){o=i.keyBinds[t];break}}o&&(o.call(c,m),e.stopPropagation(),e.preventDefault())},le=function(e){b[e.which]="r",e.stopPropagation(),e.preventDefault()},de=function(t){var n=e(t.target).val().trim(),i=n?oe(n):null;return K(i),t.stopImmediatePropagation(),!1},ue=function(){o.on({change:de,blur:i.debug?"":ee,keydown:se,keyup:le,focus:i.allowInputToggle?re:""}),n.is("input")?o.on({focus:re}):p&&(p.on("click",ae),p.on("mousedown",!1))},ce=function(){o.off({change:de,blur:blur,keydown:se,keyup:le,focus:i.allowInputToggle?ee:""}),n.is("input")?o.off({focus:re}):p&&(p.off("click",ae),p.off("mousedown",!1))},he=function(t){var n={};return e.each(t,function(){var e=oe(this);e.isValid()&&(n[e.format("YYYY-MM-DD")]=!0)}),!!Object.keys(n).length&&n},pe=function(t){var n={};return e.each(t,function(){n[this]=!0}),!!Object.keys(n).length&&n},me=function(){var e=i.format||"L LT";l=e.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,function(e){var t=r.localeData().longDateFormat(e)||e;return t.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,function(e){return r.localeData().longDateFormat(e)||e})}),d=i.extraFormats?i.extraFormats.slice():[],d.indexOf(e)<0&&d.indexOf(l)<0&&d.push(l),s=l.toLowerCase().indexOf("a")<1&&l.replace(/\[.*?\]/g,"").indexOf("h")<1,D("y")&&(f=2),D("M")&&(f=1),D("d")&&(f=0),u=Math.max(f,u),h||K(r)};if(c.destroy=function(){ee(),ce(),n.removeData("DateTimePicker"),n.removeData("date")},c.toggle=ae,c.show=re,c.hide=ee,c.disable=function(){return ee(),p&&p.hasClass("btn")&&p.addClass("disabled"),o.prop("disabled",!0),c},c.enable=function(){return p&&p.hasClass("btn")&&p.removeClass("disabled"),o.prop("disabled",!1),c},c.ignoreReadonly=function(e){if(0===arguments.length)return i.ignoreReadonly;if("boolean"!=typeof e)throw new TypeError("ignoreReadonly () expects a boolean parameter");return i.ignoreReadonly=e,c},c.options=function(t){if(0===arguments.length)return e.extend(!0,{},i);if(!(t instanceof Object))throw new TypeError("options() options parameter should be an object");return e.extend(!0,i,t),e.each(i,function(e,t){if(void 0===c[e])throw new TypeError("option "+e+" is not recognized!");c[e](t)}),c},c.date=function(e){if(0===arguments.length)return h?null:r.clone();if(!(null===e||"string"==typeof e||t.isMoment(e)||e instanceof Date))throw new TypeError("date() parameter must be one of [null, string, moment or Date]");return K(null===e?null:oe(e)),c},c.format=function(e){if(0===arguments.length)return i.format;if("string"!=typeof e&&("boolean"!=typeof e||e!==!1))throw new TypeError("format() expects a sting or boolean:false parameter "+e);return i.format=e,l&&me(),c},c.timeZone=function(e){return 0===arguments.length?i.timeZone:(i.timeZone=e,c)},c.dayViewHeaderFormat=function(e){if(0===arguments.length)return i.dayViewHeaderFormat;if("string"!=typeof e)throw new TypeError("dayViewHeaderFormat() expects a string parameter");return i.dayViewHeaderFormat=e,c},c.extraFormats=function(e){if(0===arguments.length)return i.extraFormats;if(e!==!1&&!(e instanceof Array))throw new TypeError("extraFormats() expects an array or false parameter");return i.extraFormats=e,d&&me(),c},c.disabledDates=function(t){if(0===arguments.length)return i.disabledDates?e.extend({},i.disabledDates):i.disabledDates;if(!t)return i.disabledDates=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledDates() expects an array parameter");return i.disabledDates=he(t),i.enabledDates=!1,Z(),c},c.enabledDates=function(t){if(0===arguments.length)return i.enabledDates?e.extend({},i.enabledDates):i.enabledDates;if(!t)return i.enabledDates=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("enabledDates() expects an array parameter");return i.enabledDates=he(t),i.disabledDates=!1,Z(),c},c.daysOfWeekDisabled=function(e){if(0===arguments.length)return i.daysOfWeekDisabled.splice(0);if("boolean"==typeof e&&!e)return i.daysOfWeekDisabled=!1,Z(),c;if(!(e instanceof Array))throw new TypeError("daysOfWeekDisabled() expects an array parameter");if(i.daysOfWeekDisabled=e.reduce(function(e,t){return t=parseInt(t,10),t>6||0>t||isNaN(t)?e:(-1===e.indexOf(t)&&e.push(t),e)},[]).sort(),i.useCurrent&&!i.keepInvalid){for(var t=0;!R(r,"d");){if(r.add(1,"d"),7===t)throw"Tried 7 times to find a valid date";t++}K(r)}return Z(),c},c.maxDate=function(e){if(0===arguments.length)return i.maxDate?i.maxDate.clone():i.maxDate;if("boolean"==typeof e&&e===!1)return i.maxDate=!1,Z(),c;"string"==typeof e&&("now"===e||"moment"===e)&&(e=L());var t=oe(e);if(!t.isValid())throw new TypeError("maxDate() Could not parse date parameter: "+e);if(i.minDate&&t.isBefore(i.minDate))throw new TypeError("maxDate() date parameter is before options.minDate: "+t.format(l));return i.maxDate=t,i.useCurrent&&!i.keepInvalid&&r.isAfter(e)&&K(i.maxDate),a.isAfter(t)&&(a=t.clone().subtract(i.stepping,"m")),Z(),c},c.minDate=function(e){if(0===arguments.length)return i.minDate?i.minDate.clone():i.minDate;if("boolean"==typeof e&&e===!1)return i.minDate=!1,Z(),c;"string"==typeof e&&("now"===e||"moment"===e)&&(e=L());var t=oe(e);if(!t.isValid())throw new TypeError("minDate() Could not parse date parameter: "+e);if(i.maxDate&&t.isAfter(i.maxDate))throw new TypeError("minDate() date parameter is after options.maxDate: "+t.format(l));return i.minDate=t,i.useCurrent&&!i.keepInvalid&&r.isBefore(e)&&K(i.minDate),a.isBefore(t)&&(a=t.clone().add(i.stepping,"m")),Z(),c},c.defaultDate=function(e){if(0===arguments.length)return i.defaultDate?i.defaultDate.clone():i.defaultDate;if(!e)return i.defaultDate=!1,c;"string"==typeof e&&("now"===e||"moment"===e)&&(e=L());var t=oe(e);if(!t.isValid())throw new TypeError("defaultDate() Could not parse date parameter: "+e);if(!R(t))throw new TypeError("defaultDate() date passed is invalid according to component setup validations");return i.defaultDate=t,(i.defaultDate&&i.inline||""===o.val().trim())&&K(i.defaultDate),c},c.locale=function(e){if(0===arguments.length)return i.locale;if(!t.localeData(e))throw new TypeError("locale() locale "+e+" is not loaded from moment locales!");return i.locale=e,r.locale(i.locale),a.locale(i.locale),l&&me(),m&&(ee(),re()),c},c.stepping=function(e){return 0===arguments.length?i.stepping:(e=parseInt(e,10),(isNaN(e)||1>e)&&(e=1),i.stepping=e,c)},c.useCurrent=function(e){var t=["year","month","day","hour","minute"];if(0===arguments.length)return i.useCurrent;if("boolean"!=typeof e&&"string"!=typeof e)throw new TypeError("useCurrent() expects a boolean or string parameter");if("string"==typeof e&&-1===t.indexOf(e.toLowerCase()))throw new TypeError("useCurrent() expects a string parameter of "+t.join(", "));return i.useCurrent=e,c},c.collapse=function(e){if(0===arguments.length)return i.collapse;if("boolean"!=typeof e)throw new TypeError("collapse() expects a boolean parameter");return i.collapse===e?c:(i.collapse=e,m&&(ee(),re()),c)},c.icons=function(t){if(0===arguments.length)return e.extend({},i.icons);if(!(t instanceof Object))throw new TypeError("icons() expects parameter to be an Object");return e.extend(i.icons,t),m&&(ee(),re()),c},c.tooltips=function(t){if(0===arguments.length)return e.extend({},i.tooltips);if(!(t instanceof Object))throw new TypeError("tooltips() expects parameter to be an Object");return e.extend(i.tooltips,t),m&&(ee(),re()),c},c.useStrict=function(e){if(0===arguments.length)return i.useStrict;if("boolean"!=typeof e)throw new TypeError("useStrict() expects a boolean parameter");return i.useStrict=e,c},c.sideBySide=function(e){if(0===arguments.length)return i.sideBySide;if("boolean"!=typeof e)throw new TypeError("sideBySide() expects a boolean parameter");return i.sideBySide=e,m&&(ee(),re()),c},c.viewMode=function(e){if(0===arguments.length)return i.viewMode;if("string"!=typeof e)throw new TypeError("viewMode() expects a string parameter");if(-1===y.indexOf(e))throw new TypeError("viewMode() parameter must be one of ("+y.join(", ")+") value");return i.viewMode=e,u=Math.max(y.indexOf(e),f),I(),c},c.toolbarPlacement=function(e){if(0===arguments.length)return i.toolbarPlacement;if("string"!=typeof e)throw new TypeError("toolbarPlacement() expects a string parameter");if(-1===M.indexOf(e))throw new TypeError("toolbarPlacement() parameter must be one of ("+M.join(", ")+") value");return i.toolbarPlacement=e,m&&(ee(),re()),c},c.widgetPositioning=function(t){if(0===arguments.length)return e.extend({},i.widgetPositioning);if("[object Object]"!=={}.toString.call(t))throw new TypeError("widgetPositioning() expects an object variable");if(t.horizontal){if("string"!=typeof t.horizontal)throw new TypeError("widgetPositioning() horizontal variable must be a string");if(t.horizontal=t.horizontal.toLowerCase(),-1===v.indexOf(t.horizontal))throw new TypeError("widgetPositioning() expects horizontal parameter to be one of ("+v.join(", ")+")");i.widgetPositioning.horizontal=t.horizontal}if(t.vertical){if("string"!=typeof t.vertical)throw new TypeError("widgetPositioning() vertical variable must be a string");if(t.vertical=t.vertical.toLowerCase(),-1===g.indexOf(t.vertical))throw new TypeError("widgetPositioning() expects vertical parameter to be one of ("+g.join(", ")+")");
i.widgetPositioning.vertical=t.vertical}return Z(),c},c.calendarWeeks=function(e){if(0===arguments.length)return i.calendarWeeks;if("boolean"!=typeof e)throw new TypeError("calendarWeeks() expects parameter to be a boolean value");return i.calendarWeeks=e,Z(),c},c.showTodayButton=function(e){if(0===arguments.length)return i.showTodayButton;if("boolean"!=typeof e)throw new TypeError("showTodayButton() expects a boolean parameter");return i.showTodayButton=e,m&&(ee(),re()),c},c.showClear=function(e){if(0===arguments.length)return i.showClear;if("boolean"!=typeof e)throw new TypeError("showClear() expects a boolean parameter");return i.showClear=e,m&&(ee(),re()),c},c.widgetParent=function(t){if(0===arguments.length)return i.widgetParent;if("string"==typeof t&&(t=e(t)),null!==t&&"string"!=typeof t&&!(t instanceof e))throw new TypeError("widgetParent() expects a string or a jQuery object parameter");return i.widgetParent=t,m&&(ee(),re()),c},c.keepOpen=function(e){if(0===arguments.length)return i.keepOpen;if("boolean"!=typeof e)throw new TypeError("keepOpen() expects a boolean parameter");return i.keepOpen=e,c},c.focusOnShow=function(e){if(0===arguments.length)return i.focusOnShow;if("boolean"!=typeof e)throw new TypeError("focusOnShow() expects a boolean parameter");return i.focusOnShow=e,c},c.inline=function(e){if(0===arguments.length)return i.inline;if("boolean"!=typeof e)throw new TypeError("inline() expects a boolean parameter");return i.inline=e,c},c.clear=function(){return te(),c},c.keyBinds=function(e){return i.keyBinds=e,c},c.getMoment=function(e){return L(e)},c.debug=function(e){if("boolean"!=typeof e)throw new TypeError("debug() expects a boolean parameter");return i.debug=e,c},c.allowInputToggle=function(e){if(0===arguments.length)return i.allowInputToggle;if("boolean"!=typeof e)throw new TypeError("allowInputToggle() expects a boolean parameter");return i.allowInputToggle=e,c},c.showClose=function(e){if(0===arguments.length)return i.showClose;if("boolean"!=typeof e)throw new TypeError("showClose() expects a boolean parameter");return i.showClose=e,c},c.keepInvalid=function(e){if(0===arguments.length)return i.keepInvalid;if("boolean"!=typeof e)throw new TypeError("keepInvalid() expects a boolean parameter");return i.keepInvalid=e,c},c.datepickerInput=function(e){if(0===arguments.length)return i.datepickerInput;if("string"!=typeof e)throw new TypeError("datepickerInput() expects a string parameter");return i.datepickerInput=e,c},c.parseInputDate=function(e){if(0===arguments.length)return i.parseInputDate;if("function"!=typeof e)throw new TypeError("parseInputDate() sholud be as function");return i.parseInputDate=e,c},c.disabledTimeIntervals=function(t){if(0===arguments.length)return i.disabledTimeIntervals?e.extend({},i.disabledTimeIntervals):i.disabledTimeIntervals;if(!t)return i.disabledTimeIntervals=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledTimeIntervals() expects an array parameter");return i.disabledTimeIntervals=t,Z(),c},c.disabledHours=function(t){if(0===arguments.length)return i.disabledHours?e.extend({},i.disabledHours):i.disabledHours;if(!t)return i.disabledHours=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("disabledHours() expects an array parameter");if(i.disabledHours=pe(t),i.enabledHours=!1,i.useCurrent&&!i.keepInvalid){for(var n=0;!R(r,"h");){if(r.add(1,"h"),24===n)throw"Tried 24 times to find a valid date";n++}K(r)}return Z(),c},c.enabledHours=function(t){if(0===arguments.length)return i.enabledHours?e.extend({},i.enabledHours):i.enabledHours;if(!t)return i.enabledHours=!1,Z(),c;if(!(t instanceof Array))throw new TypeError("enabledHours() expects an array parameter");if(i.enabledHours=pe(t),i.disabledHours=!1,i.useCurrent&&!i.keepInvalid){for(var n=0;!R(r,"h");){if(r.add(1,"h"),24===n)throw"Tried 24 times to find a valid date";n++}K(r)}return Z(),c},c.viewDate=function(e){if(0===arguments.length)return a.clone();if(!e)return a=r.clone(),c;if(!("string"==typeof e||t.isMoment(e)||e instanceof Date))throw new TypeError("viewDate() parameter must be one of [string, moment or Date]");return a=oe(e),j(),c},n.is("input"))o=n;else if(o=n.find(i.datepickerInput),0===o.size())o=n.find("input");else if(!o.is("input"))throw new Error('CSS class "'+i.datepickerInput+'" cannot be applied to non input element');if(n.hasClass("input-group")&&(p=0===n.find(".datepickerbutton").size()?n.find(".input-group-addon"):n.find(".datepickerbutton")),!i.inline&&!o.is("input"))throw new Error("Could not initialize DateTimePicker without an input element");return r=L(),a=r.clone(),e.extend(!0,i,H()),c.options(i),me(),ue(),o.prop("disabled")&&c.disable(),o.is("input")&&0!==o.val().trim().length?K(oe(o.val().trim())):i.defaultDate&&void 0===o.attr("placeholder")&&K(i.defaultDate),i.inline&&re(),c};e.fn.datetimepicker=function(t){return this.each(function(){var i=e(this);i.data("DateTimePicker")||(t=e.extend(!0,{},e.fn.datetimepicker.defaults,t),i.data("DateTimePicker",n(i,t)))})},e.fn.datetimepicker.defaults={timeZone:"Etc/UTC",format:!1,dayViewHeaderFormat:"MMMM YYYY",extraFormats:!1,stepping:1,minDate:!1,maxDate:!1,useCurrent:!0,collapse:!0,locale:t.locale(),defaultDate:!1,disabledDates:!1,enabledDates:!1,icons:{time:"glyphicon glyphicon-time",date:"glyphicon glyphicon-calendar",up:"glyphicon glyphicon-chevron-up",down:"glyphicon glyphicon-chevron-down",previous:"glyphicon glyphicon-chevron-left",next:"glyphicon glyphicon-chevron-right",today:"glyphicon glyphicon-screenshot",clear:"glyphicon glyphicon-trash",close:"glyphicon glyphicon-remove"},tooltips:{today:"Go to today",clear:"Clear selection",close:"Close the picker",selectMonth:"Select Month",prevMonth:"Previous Month",nextMonth:"Next Month",selectYear:"Select Year",prevYear:"Previous Year",nextYear:"Next Year",selectDecade:"Select Decade",prevDecade:"Previous Decade",nextDecade:"Next Decade",prevCentury:"Previous Century",nextCentury:"Next Century",pickHour:"Pick Hour",incrementHour:"Increment Hour",decrementHour:"Decrement Hour",pickMinute:"Pick Minute",incrementMinute:"Increment Minute",decrementMinute:"Decrement Minute",pickSecond:"Pick Second",incrementSecond:"Increment Second",decrementSecond:"Decrement Second",togglePeriod:"Toggle Period",selectTime:"Select Time"},useStrict:!1,sideBySide:!1,daysOfWeekDisabled:!1,calendarWeeks:!1,viewMode:"days",toolbarPlacement:"default",showTodayButton:!1,showClear:!1,showClose:!1,widgetPositioning:{horizontal:"auto",vertical:"auto"},widgetParent:null,ignoreReadonly:!1,keepOpen:!1,focusOnShow:!0,inline:!1,keepInvalid:!1,datepickerInput:".datepickerinput",keyBinds:{up:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().subtract(7,"d")):this.date(t.clone().add(this.stepping(),"m"))}},down:function(e){if(!e)return void this.show();var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().add(7,"d")):this.date(t.clone().subtract(this.stepping(),"m"))},"control up":function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().subtract(1,"y")):this.date(t.clone().add(1,"h"))}},"control down":function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")?this.date(t.clone().add(1,"y")):this.date(t.clone().subtract(1,"h"))}},left:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().subtract(1,"d"))}},right:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().add(1,"d"))}},pageUp:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().subtract(1,"M"))}},pageDown:function(e){if(e){var t=this.date()||this.getMoment();e.find(".datepicker").is(":visible")&&this.date(t.clone().add(1,"M"))}},enter:function(){this.hide()},escape:function(){this.hide()},"control space":function(e){e.find(".timepicker").is(":visible")&&e.find('.btn[data-action="togglePeriod"]').click()},t:function(){this.date(this.getMoment())},"delete":function(){this.clear()}},debug:!1,allowInputToggle:!1,disabledTimeIntervals:!1,disabledHours:!1,enabledHours:!1,viewDate:!1}});var iosOverlay=function(e){var t,n=function(){},i={onbeforeshow:n,onshow:n,onbeforehide:n,onhide:n,text:"",icon:null,spinner:null,duration:null,id:null,parentEl:null},r=function(e,t){var n={};for(var i in e)n[i]=e[i];for(var r in t)n[r]=t[r];return n},a=function(){var e=document.body||document.documentElement,t=e.style,n="transition";if("string"==typeof t[n])return!0;var i=["Moz","Webkit","Khtml","O","ms"];n=n.charAt(0).toUpperCase()+n.substr(1);for(var r=0;r<i.length;r++)if("string"==typeof t[i[r]+n])return!0;return!1}(),o=r(i,e),s=function(e){"ios-overlay-show"===e.animationName&&o.onshow(),"ios-overlay-hide"===e.animationName&&(d(),o.onhide())},l=(function(){t=document.createElement("div"),t.className="ui-ios-overlay",t.innerHTML+='<span class="title">'+o.text+"</span",e.icon?t.innerHTML+='<img src="'+e.icon+'">':e.spinner&&t.appendChild(e.spinner.el),a&&(t.addEventListener("webkitAnimationEnd",s,!1),t.addEventListener("msAnimationEnd",s,!1),t.addEventListener("oAnimationEnd",s,!1),t.addEventListener("animationend",s,!1)),e.parentEl?document.getElementById(e.parentEl).appendChild(t):document.body.appendChild(t),o.onbeforeshow(),a?t.className+=" ios-overlay-show":"function"==typeof $&&$(t).fadeIn({duration:200},function(){o.onshow()}),o.duration&&window.setTimeout(function(){l()},o.duration)}(),function(){o.onbeforehide(),a?t.className=t.className.replace("show","hide"):"function"==typeof $&&$(t).fadeOut({duration:200},function(){d(),o.onhide()})}),d=function(){e.parentEl?document.getElementById(e.parentEl).removeChild(t):document.body.removeChild(t)},u=function(e){e.text&&(t.getElementsByTagName("span")[0].innerHTML=e.text),e.icon&&(o.spinner&&(o.spinner.el.parentNode.removeChild(o.spinner.el),o.spinner=null),t.innerHTML+='<img src="'+e.icon+'">')};return{hide:l,destroy:d,update:u}};"function"==typeof define&&define.amd&&define([],function(){return iosOverlay}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):window.jQuery||window.Zepto)}(function(e){var t,n,i,r,a,o,s="Close",l="BeforeClose",d="AfterClose",u="BeforeAppend",c="MarkupParse",h="Open",p="Change",m="mfp",f="."+m,_="mfp-ready",y="mfp-removing",g="mfp-prevent-close",v=function(){},M=!!window.jQuery,w=e(window),b=function(e,n){t.ev.on(m+e+f,n)},L=function(t,n,i,r){var a=document.createElement("div");return a.className="mfp-"+t,i&&(a.innerHTML=i),r?n&&n.appendChild(a):(a=e(a),n&&a.appendTo(n)),a},D=function(n,i){t.ev.triggerHandler(m+n,i),t.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),t.st.callbacks[n]&&t.st.callbacks[n].apply(t,e.isArray(i)?i:[i]))},k=function(n){return n===o&&t.currTemplate.closeBtn||(t.currTemplate.closeBtn=e(t.st.closeMarkup.replace("%title%",t.st.tClose)),o=n),t.currTemplate.closeBtn},T=function(){e.magnificPopup.instance||(t=new v,t.init(),e.magnificPopup.instance=t)},S=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1};v.prototype={constructor:v,init:function(){var n=navigator.appVersion;t.isLowIE=t.isIE8=document.all&&!document.addEventListener,t.isAndroid=/android/gi.test(n),t.isIOS=/iphone|ipad|ipod/gi.test(n),t.supportsTransition=S(),t.probablyMobile=t.isAndroid||t.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=e(document),t.popupsCache={}},open:function(n){var r;if(n.isObj===!1){t.items=n.items.toArray(),t.index=0;var o,s=n.items;for(r=0;r<s.length;r++)if(o=s[r],o.parsed&&(o=o.el[0]),o===n.el[0]){t.index=r;break}}else t.items=e.isArray(n.items)?n.items:[n.items],t.index=n.index||0;if(t.isOpen)return void t.updateItemHTML();t.types=[],a="",n.mainEl&&n.mainEl.length?t.ev=n.mainEl.eq(0):t.ev=i,n.key?(t.popupsCache[n.key]||(t.popupsCache[n.key]={}),t.currTemplate=t.popupsCache[n.key]):t.currTemplate={},t.st=e.extend(!0,{},e.magnificPopup.defaults,n),t.fixedContentPos="auto"===t.st.fixedContentPos?!t.probablyMobile:t.st.fixedContentPos,t.st.modal&&(t.st.closeOnContentClick=!1,t.st.closeOnBgClick=!1,t.st.showCloseBtn=!1,t.st.enableEscapeKey=!1),t.bgOverlay||(t.bgOverlay=L("bg").on("click"+f,function(){t.close()}),t.wrap=L("wrap").attr("tabindex",-1).on("click"+f,function(e){t._checkIfClose(e.target)&&t.close()}),t.container=L("container",t.wrap)),t.contentContainer=L("content"),t.st.preloader&&(t.preloader=L("preloader",t.container,t.st.tLoading));var l=e.magnificPopup.modules;for(r=0;r<l.length;r++){var d=l[r];d=d.charAt(0).toUpperCase()+d.slice(1),t["init"+d].call(t)}D("BeforeOpen"),t.st.showCloseBtn&&(t.st.closeBtnInside?(b(c,function(e,t,n,i){n.close_replaceWith=k(i.type)}),a+=" mfp-close-btn-in"):t.wrap.append(k())),t.st.alignTop&&(a+=" mfp-align-top"),t.fixedContentPos?t.wrap.css({overflow:t.st.overflowY,overflowX:"hidden",overflowY:t.st.overflowY}):t.wrap.css({top:w.scrollTop(),position:"absolute"}),(t.st.fixedBgPos===!1||"auto"===t.st.fixedBgPos&&!t.fixedContentPos)&&t.bgOverlay.css({height:i.height(),position:"absolute"}),t.st.enableEscapeKey&&i.on("keyup"+f,function(e){27===e.keyCode&&t.close()}),w.on("resize"+f,function(){t.updateSize()}),t.st.closeOnContentClick||(a+=" mfp-auto-cursor"),a&&t.wrap.addClass(a);var u=t.wH=w.height(),p={};if(t.fixedContentPos&&t._hasScrollBar(u)){var m=t._getScrollbarSize();m&&(p.marginRight=m)}t.fixedContentPos&&(t.isIE7?e("body, html").css("overflow","hidden"):p.overflow="hidden");var y=t.st.mainClass;return t.isIE7&&(y+=" mfp-ie7"),y&&t._addClassToMFP(y),t.updateItemHTML(),D("BuildControls"),e("html").css(p),t.bgOverlay.add(t.wrap).prependTo(t.st.prependTo||e(document.body)),t._lastFocusedEl=document.activeElement,setTimeout(function(){t.content?(t._addClassToMFP(_),t._setFocus()):t.bgOverlay.addClass(_),i.on("focusin"+f,t._onFocusIn)},16),t.isOpen=!0,t.updateSize(u),D(h),n},close:function(){t.isOpen&&(D(l),t.isOpen=!1,t.st.removalDelay&&!t.isLowIE&&t.supportsTransition?(t._addClassToMFP(y),setTimeout(function(){t._close()},t.st.removalDelay)):t._close())},_close:function(){D(s);var n=y+" "+_+" ";if(t.bgOverlay.detach(),t.wrap.detach(),t.container.empty(),t.st.mainClass&&(n+=t.st.mainClass+" "),t._removeClassFromMFP(n),t.fixedContentPos){var r={marginRight:""};t.isIE7?e("body, html").css("overflow",""):r.overflow="",e("html").css(r)}i.off("keyup"+f+" focusin"+f),t.ev.off(f),t.wrap.attr("class","mfp-wrap").removeAttr("style"),t.bgOverlay.attr("class","mfp-bg"),t.container.attr("class","mfp-container"),t.st.showCloseBtn&&(!t.st.closeBtnInside||t.currTemplate[t.currItem.type]===!0)&&t.currTemplate.closeBtn&&t.currTemplate.closeBtn.detach(),t.st.autoFocusLast&&t._lastFocusedEl&&e(t._lastFocusedEl).focus(),t.currItem=null,t.content=null,t.currTemplate=null,t.prevHeight=0,D(d)},updateSize:function(e){if(t.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;t.wrap.css("height",i),t.wH=i}else t.wH=e||w.height();t.fixedContentPos||t.wrap.css("height",t.wH),D("Resize")},updateItemHTML:function(){var n=t.items[t.index];t.contentContainer.detach(),t.content&&t.content.detach(),n.parsed||(n=t.parseEl(t.index));var i=n.type;if(D("BeforeChange",[t.currItem?t.currItem.type:"",i]),t.currItem=n,!t.currTemplate[i]){var a=!!t.st[i]&&t.st[i].markup;D("FirstMarkupParse",a),a?t.currTemplate[i]=e(a):t.currTemplate[i]=!0}r&&r!==n.type&&t.container.removeClass("mfp-"+r+"-holder");var o=t["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,t.currTemplate[i]);t.appendContent(o,i),n.preloaded=!0,D(p,n),r=n.type,t.container.prepend(t.contentContainer),D("AfterChange")},appendContent:function(e,n){t.content=e,e?t.st.showCloseBtn&&t.st.closeBtnInside&&t.currTemplate[n]===!0?t.content.find(".mfp-close").length||t.content.append(k()):t.content=e:t.content="",D(u),t.container.addClass("mfp-"+n+"-holder"),t.contentContainer.append(t.content)},parseEl:function(n){var i,r=t.items[n];if(r.tagName?r={el:e(r)}:(i=r.type,r={data:r,src:r.src}),r.el){for(var a=t.types,o=0;o<a.length;o++)if(r.el.hasClass("mfp-"+a[o])){i=a[o];break}r.src=r.el.attr("data-mfp-src"),r.src||(r.src=r.el.attr("href"))}return r.type=i||t.st.type||"inline",r.index=n,r.parsed=!0,t.items[n]=r,D("ElementParse",r),t.items[n]},addGroup:function(e,n){var i=function(i){i.mfpEl=this,t._openClick(i,e,n)};n||(n={});var r="click.magnificPopup";n.mainEl=e,n.items?(n.isObj=!0,e.off(r).on(r,i)):(n.isObj=!1,n.delegate?e.off(r).on(r,n.delegate,i):(n.items=e,e.off(r).on(r,i)))},_openClick:function(n,i,r){var a=void 0!==r.midClick?r.midClick:e.magnificPopup.defaults.midClick;if(a||!(2===n.which||n.ctrlKey||n.metaKey||n.altKey||n.shiftKey)){var o=void 0!==r.disableOn?r.disableOn:e.magnificPopup.defaults.disableOn;if(o)if(e.isFunction(o)){if(!o.call(t))return!0}else if(w.width()<o)return!0;n.type&&(n.preventDefault(),t.isOpen&&n.stopPropagation()),r.el=e(n.mfpEl),r.delegate&&(r.items=i.find(r.delegate)),t.open(r)}},updateStatus:function(e,i){if(t.preloader){n!==e&&t.container.removeClass("mfp-s-"+n),!i&&"loading"===e&&(i=t.st.tLoading);var r={status:e,text:i};D("UpdateStatus",r),e=r.status,i=r.text,t.preloader.html(i),t.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),t.container.addClass("mfp-s-"+e),n=e}},_checkIfClose:function(n){if(!e(n).hasClass(g)){var i=t.st.closeOnContentClick,r=t.st.closeOnBgClick;if(i&&r)return!0;if(!t.content||e(n).hasClass("mfp-close")||t.preloader&&n===t.preloader[0])return!0;if(n===t.content[0]||e.contains(t.content[0],n)){if(i)return!0}else if(r&&e.contains(document,n))return!0;return!1}},_addClassToMFP:function(e){t.bgOverlay.addClass(e),t.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),t.wrap.removeClass(e)},_hasScrollBar:function(e){return(t.isIE7?i.height():document.body.scrollHeight)>(e||w.height())},_setFocus:function(){(t.st.focus?t.content.find(t.st.focus).eq(0):t.wrap).focus()},_onFocusIn:function(n){if(n.target!==t.wrap[0]&&!e.contains(t.wrap[0],n.target))return t._setFocus(),!1},_parseMarkup:function(t,n,i){var r;i.data&&(n=e.extend(i.data,n)),D(c,[t,n,i]),e.each(n,function(n,i){if(void 0===i||i===!1)return!0;if(r=n.split("_"),r.length>1){var a=t.find(f+"-"+r[0]);if(a.length>0){var o=r[1];"replaceWith"===o?a[0]!==i[0]&&a.replaceWith(i):"img"===o?a.is("img")?a.attr("src",i):a.replaceWith(e("<img>").attr("src",i).attr("class",a.attr("class"))):a.attr(r[1],i)}}else t.find(f+"-"+n).html(i)})},_getScrollbarSize:function(){if(void 0===t.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),t.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return t.scrollbarSize}},e.magnificPopup={instance:null,proto:v.prototype,modules:[],open:function(t,n){return T(),t=t?e.extend(!0,{},t):{},t.isObj=!0,t.index=n||0,this.instance.open(t)},close:function(){return e.magnificPopup.instance&&e.magnificPopup.instance.close()},registerModule:function(t,n){n.options&&(e.magnificPopup.defaults[t]=n.options),e.extend(this.proto,n.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},e.fn.magnificPopup=function(n){T();var i=e(this);if("string"==typeof n)if("open"===n){var r,a=M?i.data("magnificPopup"):i[0].magnificPopup,o=parseInt(arguments[1],10)||0;a.items?r=a.items[o]:(r=i,a.delegate&&(r=r.find(a.delegate)),r=r.eq(o)),t._openClick({mfpEl:r},i,a)}else t.isOpen&&t[n].apply(t,Array.prototype.slice.call(arguments,1));else n=e.extend(!0,{},n),M?i.data("magnificPopup",n):i[0].magnificPopup=n,t.addGroup(i,n);return i};var Y,x,C,E="inline",H=function(){C&&(x.after(C.addClass(Y)).detach(),C=null)};e.magnificPopup.registerModule(E,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){t.types.push(E),b(s+"."+E,function(){H()})},getInline:function(n,i){if(H(),n.src){var r=t.st.inline,a=e(n.src);if(a.length){var o=a[0].parentNode;o&&o.tagName&&(x||(Y=r.hiddenClass,x=L(Y),Y="mfp-"+Y),C=a.after(x).detach().removeClass(Y)),t.updateStatus("ready")}else t.updateStatus("error",r.tNotFound),a=e("<div>");return n.inlineElement=a,a}return t.updateStatus("ready"),t._parseMarkup(i,{},n),i}}});var A,P="ajax",j=function(){A&&e(document.body).removeClass(A)},I=function(){j(),t.req&&t.req.abort()};e.magnificPopup.registerModule(P,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){t.types.push(P),A=t.st.ajax.cursor,b(s+"."+P,I),b("BeforeChange."+P,I)},getAjax:function(n){A&&e(document.body).addClass(A),t.updateStatus("loading");var i=e.extend({url:n.src,success:function(i,r,a){var o={data:i,xhr:a};D("ParseAjax",o),t.appendContent(e(o.data),P),n.finished=!0,j(),t._setFocus(),setTimeout(function(){t.wrap.addClass(_)},16),t.updateStatus("ready"),D("AjaxContentAdded")},error:function(){j(),n.finished=n.loadError=!0,t.updateStatus("error",t.st.ajax.tError.replace("%url%",n.src))}},t.st.ajax.settings);return t.req=e.ajax(i),""}}});var O,z=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=t.st.image.titleSrc;if(i){if(e.isFunction(i))return i.call(t,n);if(n.el)return n.el.attr(i)||""}return""};e.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var n=t.st.image,i=".image";t.types.push("image"),b(h+i,function(){"image"===t.currItem.type&&n.cursor&&e(document.body).addClass(n.cursor)}),b(s+i,function(){n.cursor&&e(document.body).removeClass(n.cursor),w.off("resize"+f)}),b("Resize"+i,t.resizeImage),t.isLowIE&&b("AfterChange",t.resizeImage)},resizeImage:function(){var e=t.currItem;if(e&&e.img&&t.st.image.verticalFit){var n=0;t.isLowIE&&(n=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",t.wH-n)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,O&&clearInterval(O),e.isCheckingImgSize=!1,D("ImageHasSize",e),e.imgHidden&&(t.content&&t.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(e){var n=0,i=e.img[0],r=function(a){O&&clearInterval(O),O=setInterval(function(){return i.naturalWidth>0?void t._onImageHasSize(e):(n>200&&clearInterval(O),n++,3===n?r(10):40===n?r(50):100===n&&r(500),void 0)},a)};r(1)},getImage:function(n,i){var r=0,a=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,D("ImageLoadComplete")):(r++,r<200?setTimeout(a,100):o()))},o=function(){n&&(n.img.off(".mfploader"),n===t.currItem&&(t._onImageHasSize(n),t.updateStatus("error",s.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},s=t.st.image,l=i.find(".mfp-img");if(l.length){var d=document.createElement("img");d.className="mfp-img",n.el&&n.el.find("img").length&&(d.alt=n.el.find("img").attr("alt")),n.img=e(d).on("load.mfploader",a).on("error.mfploader",o),d.src=n.src,l.is("img")&&(n.img=n.img.clone()),d=n.img[0],d.naturalWidth>0?n.hasSize=!0:d.width||(n.hasSize=!1)}return t._parseMarkup(i,{title:z(n),img_replaceWith:n.img},n),t.resizeImage(),n.hasSize?(O&&clearInterval(O),n.loadError?(i.addClass("mfp-loading"),t.updateStatus("error",s.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),t.updateStatus("ready")),i):(t.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),t.findImageSize(n)),i)}}});var F,W=function(){return void 0===F&&(F=void 0!==document.createElement("p").style.MozTransform),F};e.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,n=t.st.zoom,i=".zoom";if(n.enabled&&t.supportsTransition){var r,a,o=n.duration,d=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,r={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},a="transition";return r["-webkit-"+a]=r["-moz-"+a]=r["-o-"+a]=r[a]=i,t.css(r),t},u=function(){t.content.css("visibility","visible")};b("BuildControls"+i,function(){if(t._allowZoom()){if(clearTimeout(r),t.content.css("visibility","hidden"),e=t._getItemToZoom(),!e)return void u();a=d(e),a.css(t._getOffset()),t.wrap.append(a),r=setTimeout(function(){a.css(t._getOffset(!0)),r=setTimeout(function(){u(),setTimeout(function(){a.remove(),e=a=null,D("ZoomAnimationEnded")},16)},o)},16)}}),b(l+i,function(){if(t._allowZoom()){if(clearTimeout(r),t.st.removalDelay=o,!e){if(e=t._getItemToZoom(),!e)return;a=d(e)}a.css(t._getOffset(!0)),t.wrap.append(a),t.content.css("visibility","hidden"),setTimeout(function(){a.css(t._getOffset())},16)}}),b(s+i,function(){t._allowZoom()&&(u(),a&&a.remove(),e=null)})}},_allowZoom:function(){return"image"===t.currItem.type},_getItemToZoom:function(){return!!t.currItem.hasSize&&t.currItem.img},_getOffset:function(n){var i;i=n?t.currItem.img:t.st.zoom.opener(t.currItem.el||t.currItem);var r=i.offset(),a=parseInt(i.css("padding-top"),10),o=parseInt(i.css("padding-bottom"),10);r.top-=e(window).scrollTop()-a;var s={width:i.width(),height:(M?i.innerHeight():i[0].offsetHeight)-o-a};return W()?s["-moz-transform"]=s.transform="translate("+r.left+"px,"+r.top+"px)":(s.left=r.left,s.top=r.top),s}}});var $="iframe",R="//about:blank",N=function(e){if(t.currTemplate[$]){var n=t.currTemplate[$].find("iframe");n.length&&(e||(n[0].src=R),t.isIE8&&n.css("display",e?"block":"none"))}};e.magnificPopup.registerModule($,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){t.types.push($),b("BeforeChange",function(e,t,n){t!==n&&(t===$?N():n===$&&N(!0))}),b(s+"."+$,function(){N()})},getIframe:function(n,i){var r=n.src,a=t.st.iframe;e.each(a.patterns,function(){if(r.indexOf(this.index)>-1)return this.id&&(r="string"==typeof this.id?r.substr(r.lastIndexOf(this.id)+this.id.length,r.length):this.id.call(this,r)),r=this.src.replace("%id%",r),!1});var o={};return a.srcAction&&(o[a.srcAction]=r),t._parseMarkup(i,o,n),t.updateStatus("ready"),i}}});var q=function(e){var n=t.items.length;return e>n-1?e-n:e<0?n+e:e},B=function(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)};e.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=t.st.gallery,r=".mfp-gallery";return t.direction=!0,!(!n||!n.enabled)&&(a+=" mfp-gallery",b(h+r,function(){n.navigateByImgClick&&t.wrap.on("click"+r,".mfp-img",function(){if(t.items.length>1)return t.next(),!1}),i.on("keydown"+r,function(e){37===e.keyCode?t.prev():39===e.keyCode&&t.next()})}),b("UpdateStatus"+r,function(e,n){n.text&&(n.text=B(n.text,t.currItem.index,t.items.length))}),b(c+r,function(e,i,r,a){var o=t.items.length;r.counter=o>1?B(n.tCounter,a.index,o):""}),b("BuildControls"+r,function(){if(t.items.length>1&&n.arrows&&!t.arrowLeft){var i=n.arrowMarkup,r=t.arrowLeft=e(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(g),a=t.arrowRight=e(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(g);r.click(function(){t.prev()}),a.click(function(){t.next()}),t.container.append(r.add(a))}}),b(p+r,function(){t._preloadTimeout&&clearTimeout(t._preloadTimeout),t._preloadTimeout=setTimeout(function(){t.preloadNearbyImages(),t._preloadTimeout=null},16)}),b(s+r,function(){i.off(r),t.wrap.off("click"+r),t.arrowRight=t.arrowLeft=null}),void 0)},next:function(){t.direction=!0,t.index=q(t.index+1),t.updateItemHTML()},prev:function(){t.direction=!1,t.index=q(t.index-1),t.updateItemHTML()},goTo:function(e){t.direction=e>=t.index,t.index=e,t.updateItemHTML()},preloadNearbyImages:function(){var e,n=t.st.gallery.preload,i=Math.min(n[0],t.items.length),r=Math.min(n[1],t.items.length);for(e=1;e<=(t.direction?r:i);e++)t._preloadItem(t.index+e);for(e=1;e<=(t.direction?i:r);e++)t._preloadItem(t.index-e)},_preloadItem:function(n){if(n=q(n),!t.items[n].preloaded){var i=t.items[n];i.parsed||(i=t.parseEl(n)),D("LazyLoad",i),"image"===i.type&&(i.img=e('<img class="mfp-img" />').on("load.mfploader",function(){i.hasSize=!0}).on("error.mfploader",function(){i.hasSize=!0,i.loadError=!0,D("LazyLoadError",i)}).attr("src",i.src)),i.preloaded=!0}}}});var U="retina";e.magnificPopup.registerModule(U,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var e=t.st.retina,n=e.ratio;n=isNaN(n)?n():n,n>1&&(b("ImageHasSize."+U,function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/n,width:"100%"})}),b("ElementParse."+U,function(t,i){i.src=e.replaceSrc(i,n)}))}}}}),T()}),function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.Blazy=t()}(this,function(){"use strict";function e(e){var n=e._util;n.elements=o(e.options.selector),n.count=n.elements.length,n.destroyed&&(n.destroyed=!1,e.options.container&&u(e.options.container,function(e){l(e,"scroll",n.validateT)}),l(window,"resize",n.saveViewportOffsetT),l(window,"resize",n.validateT),l(window,"scroll",n.validateT)),t(e)}function t(e){for(var t=e._util,i=0;i<t.count;i++){var a=t.elements[i];(n(a)||r(a,e.options.successClass))&&(e.load(a),t.elements.splice(i,1),t.count--,i--)}0===t.count&&e.destroy()}function n(e){var t=e.getBoundingClientRect();return t.right>=p.left&&t.bottom>=p.top&&t.left<=p.right&&t.top<=p.bottom}function i(e,t,n){if(!r(e,n.successClass)&&(t||n.loadInvisible||e.offsetWidth>0&&e.offsetHeight>0)){var i=e.getAttribute(h)||e.getAttribute(n.src);if(i){var o=i.split(n.separator),s=o[m&&o.length>1?1:0],l="img"===e.nodeName.toLowerCase();if(u(n.breakpoints,function(t){e.removeAttribute(t.src)}),e.removeAttribute(n.src),l||void 0===e.src){var d=new Image;d.onerror=function(){n.error&&n.error(e,"invalid"),a(e,n.errorClass)},d.onload=function(){l?e.src=s:e.style.backgroundImage='url("'+s+'")',a(e,n.successClass),n.success&&n.success(e)},d.src=s}else e.src=s,a(e,n.successClass)}else n.error&&n.error(e,"missing"),r(e,n.errorClass)||a(e,n.errorClass)}}function r(e,t){return(" "+e.className+" ").indexOf(" "+t+" ")!==-1}function a(e,t){e.className=e.className+" "+t}function o(e){for(var t=[],n=document.querySelectorAll(e),i=n.length;i--;t.unshift(n[i]));return t}function s(e){p.bottom=(window.innerHeight||document.documentElement.clientHeight)+e,p.right=(window.innerWidth||document.documentElement.clientWidth)+e}function l(e,t,n){
e.attachEvent?e.attachEvent&&e.attachEvent("on"+t,n):e.addEventListener(t,n,!1)}function d(e,t,n){e.detachEvent?e.detachEvent&&e.detachEvent("on"+t,n):e.removeEventListener(t,n,!1)}function u(e,t){if(e&&t)for(var n=e.length,i=0;i<n&&t(e[i],i)!==!1;i++);}function c(e,t,n){var i=0;return function(){var r=+new Date;r-i<t||(i=r,e.apply(n,arguments))}}var h,p,m;return function(n){if(!document.querySelectorAll){var r=document.createStyleSheet();document.querySelectorAll=function(e,t,n,i,a){for(a=document.all,t=[],e=e.replace(/\[for\b/gi,"[htmlFor").split(","),n=e.length;n--;){for(r.addRule(e[n],"k:v"),i=a.length;i--;)a[i].currentStyle.k&&t.push(a[i]);r.removeRule(0)}return t}}var a=this,o=a._util={};o.elements=[],o.destroyed=!0,a.options=n||{},a.options.error=a.options.error||!1,a.options.offset=a.options.offset||100,a.options.success=a.options.success||!1,a.options.selector=a.options.selector||".b-lazy",a.options.separator=a.options.separator||"|",a.options.container=!!a.options.container&&document.querySelectorAll(a.options.container),a.options.errorClass=a.options.errorClass||"b-error",a.options.breakpoints=a.options.breakpoints||!1,a.options.loadInvisible=a.options.loadInvisible||!1,a.options.successClass=a.options.successClass||"b-loaded",a.options.validateDelay=a.options.validateDelay||25,a.options.saveViewportOffsetDelay=a.options.saveViewportOffsetDelay||50,a.options.src=h=a.options.src||"data-src",m=window.devicePixelRatio>1,p={},p.top=0-a.options.offset,p.left=0-a.options.offset,a.revalidate=function(){e(this)},a.load=function(e,t){var n=this.options;void 0===e.length?i(e,t,n):u(e,function(e){i(e,t,n)})},a.destroy=function(){var e=this,t=e._util;e.options.container&&u(e.options.container,function(e){d(e,"scroll",t.validateT)}),d(window,"scroll",t.validateT),d(window,"resize",t.validateT),d(window,"resize",t.saveViewportOffsetT),t.count=0,t.elements.length=0,t.destroyed=!0},o.validateT=c(function(){t(a)},a.options.validateDelay,a),o.saveViewportOffsetT=c(function(){s(a.options.offset)},a.options.saveViewportOffsetDelay,a),s(a.options.offset),u(a.options.breakpoints,function(e){if(e.width>=window.screen.width)return h=e.src,!1}),e(a)}});var global_inTime=0;if($(".index_page").length)var cart=window.document.querySelector(".cart"),cartItems=cart.querySelector(".cart__count");if(settingsr&&$.inArray("delete_buy_button",settingsr)>-1&&$("#orderNow").hide(),$("#instafeed").length){var feed=new Instafeed({get:"user",limit:9,userId:"563190999",accessToken:"323833101.1677ed0.fcc5482509e845148f0636e980328400"});feed.run()}var delivery=sessionStorage.getItem("delivery");$("#inputPhone").length&&$("#inputPhone").mask("+79999999999",{autoclear:!1}),$("#form_auch-login").length&&$("#form_auch-login").mask("+79999999999",{autoclear:!1}),$("#form-phone").length&&$("#form-phone").mask("+79999999999",{autoclear:!1}),$("#phone").length&&$("#phone").mask("+79999999999",{autoclear:!1});var summ,dataTable=$("#tableOrder").DataTable({language:{emptyTable:"Корзина пуста"}}),cache_for_datatable,thiss;if($(".sous_select_box a").click(function(e){var t=$(this).data("text");sous_select(t),$("#select_sous").nifty("hide")}),$(".settings, .sale, .aboutus").length&&delivery_func(),$(".settings").length){var items=getFromLocal("memos"),index;loadList(items),$("#main-button").prop("disabled",!0),$("#main-input").keyup(function(){0!==$(this).val().length?$("#main-button").prop("disabled",!1):$("#main-button").prop("disabled",!0)}),$("#main-input").keypress(function(e){13===e.which&&0!==$("#main-input").val().length&&$("#main-button").click()}),$("#main-button").click(function(){var e=$("#main-input").val();items.push(e),$("#main-input").val(""),loadList(items),storeToLocal("memos",items),$("button").prop("disabled",!0)}),$("ul.addrList").delegate("span","click",function(e){e.stopPropagation(),index=$("span").index(this),$(".addrList li").eq(index).remove(),items.splice(index,1),storeToLocal("memos",items)}),$("ul.addrList").delegate("li","click",function(){index=$(".addrList li").index(this);var e=items[index];$("#edit-input").val(e)}),$("#edit-button").click(function(){items[index]=$("#edit-input").val(),loadList(items),storeToLocal("memos",items)})}$(".userIsAuch .full_price, .borderLeft .full_price").length&&$("#delivery_time").datetimepicker({sideBySide:!0,locale:"ru",useCurrent:!1,widgetPositioning:{vertical:"bottom"}}),$(".userIsAuch h2, .borderLeft  h2 ").click(function(){$(".checkOut").addClass("isUp")});var tableOrder=$("#tableOrder tbody");tableOrder.on("mouseenter","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".action--like.haslogin").click(function(e){var t=$(this);console.log(t),$.getJSON("/like_add",{like:$(this).val()},function(e){"adfavorited"==e.result?(t.find("i").addClass("fa-heart"),t.find("i").removeClass("fa-heart-o"),swal({title:"Ура!",text:"Добавлено в избранное!",timer:1500,type:"success",showConfirmButton:!1})):"delete"==e.result?(t.find("i").addClass("fa-heart-o"),t.find("i").removeClass("fa-heart"),swal({title:"Упс!",text:"Удалено из избранного!",timer:1500,type:"error",showConfirmButton:!1})):0==e.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:1500,type:"error",showConfirmButton:!1})})}),$("#auch-menu-btn").click(function(e){$.getJSON("/auch",{login:$("#inputPhone").val(),password:$("#inputPassword").val()},function(e){1==e.result?swal({title:"Ура!",text:"Вход выполнен успешно!",timer:2e3,type:"success",showConfirmButton:!1},function(){location.reload()}):swal({title:"Упс!",text:"Такого пользоваеля не существует, либо пароль введен неправильно",type:"error",showConfirmButton:!0})})}),$(".select_it").click(function(){$.cookie("delivery",$("input:radio[name=delivery]:checked").val()),sessionStorage.setItem("delivery",$("input:radio[name=delivery]:checked").val()),$.cookie("localLinkClicked",!0),window.location.reload()}),tableOrder.on("mouseleave","tr",function(){$(this).hasClass("selected")?$(this).removeClass("selected"):(dataTable.$("tr.selected").removeClass("selected"),$(this).addClass("selected"))}),$(".like_no_admin").click(function(){swal({title:"Эта функция доступна только для зарегистрированых пользователей<br> <h3 class='swal'>Зарегистрируйся и получи скидку 10%</h3>",confirmButtonColor:"#4CAF50",text:"",type:"info",html:!0,showConfirmButton:!0,showCancelButton:!0,confirmButtonText:"Регистрация/Авторизация",cancelButtonText:"Позже",closeOnConfirm:!1},function(){$.cookie("localLinkClicked",!0),document.location="/site_auch"})}),$(".backbtn").click(function(){$.cookie("localLinkClicked",!0),window.history.back()}),$(".pw-reset a, #restorePass").click(function(){var e=$("#inputPhone");""!=e.val()?$.getJSON("/pwreset",{login:e.val()},function(e){console.log(e),"sent"==e.result?swal("Пароль востановлен!","Новый пароль отправлен на вашу почту!","success"):0==e.result?swal("Упс!","Такого пользователя нет!","error"):2==e.result&&swal({title:"Упс!",text:"Что-то пошло не так!",timer:2e3,showConfirmButton:!0})}):swal("Упс!","Необходимо ввести телефон!","warning")}),$(".checkOut input[type=number]").keypress(function(e){return e=e||window.event,(!e.charCode||!(e.charCode<48||e.charCode>57))&&void $(".full span").text(calculateSumm())}),$(document).keyup(function(e){27==e.keyCode&&closePopup()}),$(".cantbuy").click(function(){swal({title:"Ой!",text:"Данный товар доступн только в кафе",type:"error",html:!0,showConfirmButton:!0,confirmButtonText:"Я понял"})}),$(".one--buy").click(function(){var e=jQuery.parseJSON($(this).attr("data-items"));console.log(e),1==e.sous?(cache_for_datatable=e,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+e.item_name+"</h3><small>"+e.item_component+"</small>"," ","<input data-category='"+e.item_category+"' type='number' value='1' data-price='"+e.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"})),cartItems.innerHTML=Number(cartItems.innerHTML)+1}),jQuery(document).ready(function(){var e=$("#tableOrder");e.on("click",".delete",function(e){dataTable.row(".selected").remove().draw(!1),$(".index_page").length&&(cartItems.innerHTML=Number(cartItems.innerHTML)-1),$(".full span").text(calculateSumm())})}),$("#orderNow").click(function(e){calculateSumm()<500&&"deliveryincafe"!=$.cookie("delivery")?swal({title:"Ой!",text:"Для доставки минимальная сумма заказа составляет 500 рублей",type:"error",html:!0,showConfirmButton:!0,confirmButtonText:"Я понял"}):($.cookie("localLinkClicked",!0),window.location.href="/order")});var magnificPopup=null;$(".simple-ajax-popup").magnificPopup({type:"ajax",preloader:!0,enableEscapeKey:!0,showCloseBtn:!0,closeBtnInside:!1,midClick:!0,callbacks:{open:function(){History.Adapter.bind(window,"statechange",closePopup),History.pushState({url:document.location.href},document.title,"?large"),$(window).on("resize",closePopup),magnificPopup=this},close:function(){$(window).unbind("statechange",closePopup).off("resize",closePopup);var e=History.getState();History.replaceState(null,document.title,e.data.url),magnificPopup=null}}}),$(".cart, .showCart, .userIsAuch h2,.borderLeft h2").click(function(e){0==calculateSumm()?iosOverlay({text:"Корзина пуста",duration:2e3,icon:"/static/img/cross.png"}):($(".full span").text(calculateSumm()),$("html").toggleClass("overflowbody"),$(".checkOut").addClass("isUp"))}),$(".closezakazbtn").click(function(e){$(".checkOut").removeClass("isUp"),$("html").toggleClass("overflowbody")}),$(function(){if($(".index_page").length){var e=$("#bar"),t=$(".view"),n=$(".cart"),i=e.offset().top-parseFloat(e.css("margin-top"));$(window).scroll(function(r){var a=$(this).scrollTop();a>=i?(e.addClass("fixed"),t.addClass("col-md-offset-2"),t.addClass("col-sm-offset-2"),n.addClass("cartAbsolute cartPerc")):(e.removeClass("fixed"),t.removeClass("col-md-offset-2"),t.removeClass("col-sm-offset-2"),n.removeClass("cartAbsolute cartPerc"))})}}),window.localLinkClicked=!1,window.onload=warning,$("a").on("click",function(){var e=$(this).attr("href");/^http?:\/\/./.test(e)&&!/http?:\/\/127.0.0.1\:5000/.test(e)||$.cookie("localLinkClicked",!0)}),$(".logoa").click(function(e){window.location.reload(),$.removeCookie("localLinkClicked")}),function(e){"use strict";function t(e,t){var n=!0;return function(i){n&&(n=!1,setTimeout(function(){n=!0},t),e(i))}}function n(){p.revalidate()}function i(){if("deliveryincafe"==$.cookie("delivery")&&in_date(),jQuery("#scrollup img").mouseover(function(){jQuery(this).animate({opacity:.65},100)}).mouseout(function(){jQuery(this).animate({opacity:1},100)}).click(function(){return $("html,body").animate({scrollTop:0},"slow"),!1}),jQuery(e).scroll(function(){jQuery(document).scrollTop()>0?jQuery("#scrollup").fadeIn("fast"):jQuery("#scrollup").fadeOut("fast")}),$(".index_page").length){r(),a();$(e);p=new Blazy({offset:200,success:function(){h.layout()}}),h.on("arrangeComplete",n),delivery_func(),classie.remove(f,"grid--loading"),$("#owl-demo").owlCarousel({autoPlay:7300,stopOnHover:!1,navigation:!1,paginationSpeed:1e3,goToFirstSpeed:2e3,singleItem:!0,autoHeight:!0,transitionStyle:"fade",navigationText:["Предыдущая","Следующая"]});var t=$("#owl-demo").data("owlCarousel");$(".owl-pagination").prepend("<div class='prev-slide fa fa-arrow-left'><span></span></div>"),$(".owl-pagination").append("<div class='next-slide fa fa-arrow-right'><span></span></div>"),$(".prev-slide").click(function(){t.prev()}),$(".next-slide").click(function(){t.next()}),$(".preloader").hide()}initIfhaveSession()}function r(){h=new Isotope(f,{isResizeBound:!1,itemSelector:".grid__item",percentPosition:!0,masonry:{columnWidth:".grid__sizer"},transitionDuration:"0.5s"})}function a(){_.forEach(function(e){e.addEventListener("click",function(){classie.remove(e.parentNode.querySelector(".filter__item--selected"),"filter__item--selected"),classie.add(e,"filter__item--selected"),h.arrange({filter:e.getAttribute("data-filter")}),s(),h.layout(),$("html, body").animate({scrollTop:$("#allCatalog").offset().top},1e3),p.revalidate()})}),e.addEventListener("resize",t(function(e){s(),h.layout()},50)),[].slice.call(f.querySelectorAll(".grid__item")).forEach(function(e){e.querySelector(".items-buy").addEventListener("click",o)})}function o(){var e=jQuery.parseJSON($(this).attr("data-items"));"True"==e.sous?(cache_for_datatable=e,$("#select_sous").nifty("show")):(dataTable.row.add(["<h3>"+e.item_name+"</h3><small>"+e.item_component+"</small>"," ","<input type='number' data-category='"+e.item_category+"' value='1' data-price='"+e.item_price+"' min='1' max='999' class='form-control' aria-label='Text input with multiple buttons'>","<span class='cena'>"+e.item_price+" <i class='fa fa-rub'></i></span>","<a href='#0' id='"+e.item_id+"' class='delete'><i class='fa fa-times'></i></a>"]).draw(!1),$(".checkOut input[type=number]").on("change",function(e){$(".full span").text(calculateSumm())}),$(".full span").text(calculateSumm()),iosOverlay({text:"Добавлено!",duration:2e3,icon:"static/img/check.png"}),classie.add(y,"cart--animate"),setTimeout(function(){g.innerHTML=Number(g.innerHTML)+1},200),c(g,function(){classie.remove(y,"cart--animate")}))}function s(){for(var e=0,t=m.length;e<t;++e)m[e].resize()}var l={animations:Modernizr.cssanimations},d={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd",animation:"animationend"},u=d[Modernizr.prefixed("animation")],c=function(e,t){var n=function(e){if(l.animations){if(e.target!=this)return;this.removeEventListener(u,n)}t&&"function"==typeof t&&t.call()};l.animations?e.addEventListener(u,n):n()};if($(".index_page").length)var h,p,m=([].slice.call(document.querySelectorAll(".slider")),[]),f=document.querySelector(".grid"),_=[].slice.call(document.querySelectorAll(".filter > button")),y=document.querySelector(".cart"),g=y.querySelector(".cart__count");i()}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsidW5pcUlkIiwiTWF0aCIsInJvdW5kIiwiRGF0ZSIsImdldFRpbWUiLCJyYW5kb20iLCJzb3VzX3NlbGVjdCIsIm5hbWUiLCJkYXRhX2l0ZW1zIiwiY2FjaGVfZm9yX2RhdGF0YWJsZSIsImlkcyIsImRhdGFUYWJsZSIsInJvdyIsImFkZCIsImRyYXciLCIkIiwiZmFuY3lTZWxlY3QiLCJvbiIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YUZyb21UYWJsZSIsInRoaXNzIiwidGhpcyIsInByb3AiLCJlIiwidGV4dCIsImNhbGN1bGF0ZVN1bW0iLCJpb3NPdmVybGF5IiwiZHVyYXRpb24iLCJpY29uIiwidHJpZ2dlciIsImRlbGl2ZXJ5X2Z1bmMiLCJkZWxpdmVyeSIsIm5pZnR5Iiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiY2hlY2tlZCIsImxvYWRMaXN0IiwiaXRlbXMiLCJyZW1vdmUiLCJsZW5ndGgiLCJpIiwiYXBwZW5kIiwic3RvcmVUb0xvY2FsIiwia2V5IiwiYWxsQWRkcmVzcyIsImdldEZyb21Mb2NhbCIsInBhcnNlIiwiaW5pdElmaGF2ZVNlc3Npb24iLCJjYXJ0VmFsdWUiLCJjYXJ0T2JqIiwiZm9yRWFjaCIsImVudHJ5IiwiY29uc29sZSIsImxvZyIsIlRhYmxlRGF0YSIsIkFycmF5IiwiZWFjaCIsInRyIiwiZmluZCIsImh0bWwiLCJ2YWwiLCJhdHRyIiwic2hpZnQiLCJmbkdldFNlbGVjdGVkIiwib1RhYmxlTG9jYWwiLCJzdW1tIiwicGl6emEiLCJjaGVja3MiLCJkYXRhIiwicGFyc2VJbnQiLCJnbG9iYWxfc2FsZSIsImdsb2JhbF9pblRpbWUiLCJjb29raWUiLCJ1bmlxdWUiLCJhcnIiLCJvYmoiLCJzdHIiLCJPYmplY3QiLCJrZXlzIiwicmVtb3ZlQSIsIndoYXQiLCJheCIsImEiLCJhcmd1bWVudHMiLCJMIiwiYW55c2xpZGVyIiwiaW5kZXhPZiIsInNwbGljZSIsImNsb3NlUG9wdXAiLCJtYWduaWZpY1BvcHVwIiwiY2xvc2UiLCJ3YXJuaW5nIiwicmVtb3ZlQ29va2llIiwiZ2V0V2Vla0RheSIsImRhdGUiLCJkYXlzIiwiZ2V0RGF5IiwiaW5fZGF0ZSIsImRhdGVfaW4iLCJtaW5fRGF5IiwibWF4X0RheSIsIm1pbkhvdXJzIiwibWF4SG91cnMiLCJpbk1pbnV0ZXMiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJ0IiwibiIsImxpc3RlbmVyIiwiYXBwbHkiLCJwcm90b3R5cGUiLCJyIiwicyIsIkV2ZW50RW1pdHRlciIsImdldExpc3RlbmVycyIsIl9nZXRFdmVudHMiLCJSZWdFeHAiLCJoYXNPd25Qcm9wZXJ0eSIsInRlc3QiLCJmbGF0dGVuTGlzdGVuZXJzIiwicHVzaCIsImdldExpc3RlbmVyc0FzT2JqZWN0IiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwiYWRkT25jZUxpc3RlbmVyIiwiZGVmaW5lRXZlbnQiLCJkZWZpbmVFdmVudHMiLCJyZW1vdmVMaXN0ZW5lciIsIm9mZiIsImFkZExpc3RlbmVycyIsIm1hbmlwdWxhdGVMaXN0ZW5lcnMiLCJyZW1vdmVMaXN0ZW5lcnMiLCJvIiwiY2FsbCIsInJlbW92ZUV2ZW50IiwiX2V2ZW50cyIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXRFdmVudCIsImgiLCJzbGljZSIsIl9nZXRPbmNlUmV0dXJuVmFsdWUiLCJlbWl0Iiwic2V0T25jZVJldHVyblZhbHVlIiwiX29uY2VSZXR1cm5WYWx1ZSIsIm5vQ29uZmxpY3QiLCJkZWZpbmUiLCJhbWQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsImltYWdlc0xvYWRlZCIsIndpbmRvdyIsImlzQXJyYXkiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtZW50cyIsIm9wdGlvbnMiLCJnZXRJbWFnZXMiLCJqcURlZmVycmVkIiwiRGVmZXJyZWQiLCJzZXRUaW1lb3V0IiwiY2hlY2siLCJiaW5kIiwiaW1nIiwidXJsIiwiZWxlbWVudCIsIkltYWdlIiwialF1ZXJ5IiwiY3JlYXRlIiwiaW1hZ2VzIiwiYWRkRWxlbWVudEltYWdlcyIsIm5vZGVOYW1lIiwiYWRkSW1hZ2UiLCJiYWNrZ3JvdW5kIiwiYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMiLCJub2RlVHlwZSIsInUiLCIxIiwiOSIsIjExIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImV4ZWMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhZGRCYWNrZ3JvdW5kIiwicHJvZ3Jlc3MiLCJwcm9ncmVzc2VkQ291bnQiLCJoYXNBbnlCcm9rZW4iLCJjb21wbGV0ZSIsImlzTG9hZGVkIiwibm90aWZ5IiwiZGVidWciLCJpc0NvbXBsZXRlIiwiZ2V0SXNJbWFnZUNvbXBsZXRlIiwiY29uZmlybSIsIm5hdHVyYWxXaWR0aCIsInByb3h5SW1hZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwic3JjIiwiaGFuZGxlRXZlbnQiLCJ0eXBlIiwib25sb2FkIiwidW5iaW5kRXZlbnRzIiwib25lcnJvciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwiZm4iLCJwcm9taXNlIiwiV2F5cG9pbnQiLCJFcnJvciIsImhhbmRsZXIiLCJrZXlDb3VudGVyIiwiQWRhcHRlciIsImV4dGVuZCIsImRlZmF1bHRzIiwiYWRhcHRlciIsImNhbGxiYWNrIiwiYXhpcyIsImhvcml6b250YWwiLCJlbmFibGVkIiwidHJpZ2dlclBvaW50IiwiZ3JvdXAiLCJHcm91cCIsImZpbmRPckNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiZmluZE9yQ3JlYXRlQnlFbGVtZW50Iiwib2Zmc2V0QWxpYXNlcyIsIm9mZnNldCIsImFsbFdheXBvaW50cyIsInF1ZXVlVHJpZ2dlciIsImRpcmVjdGlvbiIsImFyZ3MiLCJkZXN0cm95IiwiZGlzYWJsZSIsImVuYWJsZSIsInJlZnJlc2giLCJuZXh0IiwicHJldmlvdXMiLCJpbnZva2VBbGwiLCJtZXRob2QiLCJhbGxXYXlwb2ludHNBcnJheSIsIndheXBvaW50S2V5IiwiZW5kIiwiZGVzdHJveUFsbCIsImRpc2FibGVBbGwiLCJlbmFibGVBbGwiLCJyZWZyZXNoQWxsIiwidmlld3BvcnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsInZpZXdwb3J0V2lkdGgiLCJjbGllbnRXaWR0aCIsImFkYXB0ZXJzIiwiY29udGludW91cyIsImJvdHRvbS1pbi12aWV3Iiwib3V0ZXJIZWlnaHQiLCJyaWdodC1pbi12aWV3IiwiaW5uZXJXaWR0aCIsIm91dGVyV2lkdGgiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVTaGltIiwiZGlkU2Nyb2xsIiwiZGlkUmVzaXplIiwib2xkU2Nyb2xsIiwieCIsInNjcm9sbExlZnQiLCJ5Iiwic2Nyb2xsVG9wIiwid2F5cG9pbnRzIiwidmVydGljYWwiLCJ3YXlwb2ludENvbnRleHRLZXkiLCJjb250ZXh0cyIsImNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIiLCJjcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyIiwib2xkV2luZG93TG9hZCIsIndheXBvaW50IiwiY2hlY2tFbXB0eSIsImhvcml6b250YWxFbXB0eSIsImlzRW1wdHlPYmplY3QiLCJ2ZXJ0aWNhbEVtcHR5IiwicmVzaXplSGFuZGxlciIsInNlbGYiLCJoYW5kbGVSZXNpemUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxIYW5kbGVyIiwiaGFuZGxlU2Nyb2xsIiwiaXNUb3VjaCIsInRyaWdnZXJlZEdyb3VwcyIsImF4ZXMiLCJuZXdTY3JvbGwiLCJmb3J3YXJkIiwiYmFja3dhcmQiLCJheGlzS2V5IiwiaXNGb3J3YXJkIiwid2FzQmVmb3JlVHJpZ2dlclBvaW50Iiwibm93QWZ0ZXJUcmlnZ2VyUG9pbnQiLCJjcm9zc2VkRm9yd2FyZCIsImNyb3NzZWRCYWNrd2FyZCIsImlkIiwiZ3JvdXBLZXkiLCJmbHVzaFRyaWdnZXJzIiwiaXNXaW5kb3ciLCJjb250ZXh0T2Zmc2V0IiwidW5kZWZpbmVkIiwibGVmdCIsImNvbnRleHRTY3JvbGwiLCJjb250ZXh0RGltZW5zaW9uIiwib2Zmc2V0UHJvcCIsInRvcCIsImNvbnRleHRNb2RpZmllciIsIndhc0JlZm9yZVNjcm9sbCIsIm5vd0FmdGVyU2Nyb2xsIiwidHJpZ2dlcmVkQmFja3dhcmQiLCJ0cmlnZ2VyZWRGb3J3YXJkIiwiYWRqdXN0bWVudCIsIm9sZFRyaWdnZXJQb2ludCIsImVsZW1lbnRPZmZzZXQiLCJmcmVzaFdheXBvaW50IiwicGFyc2VGbG9hdCIsImNlaWwiLCJmaW5kQnlFbGVtZW50IiwiY29udGV4dElkIiwicmVxdWVzdEZuIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYnlUcmlnZ2VyUG9pbnQiLCJiIiwiYnlSZXZlcnNlVHJpZ2dlclBvaW50IiwiY2xlYXJUcmlnZ2VyUXVldWVzIiwiZ3JvdXBzIiwidHJpZ2dlclF1ZXVlcyIsInVwIiwiZG93biIsInJpZ2h0IiwicmV2ZXJzZSIsInNvcnQiLCJpbmRleCIsImluQXJyYXkiLCJpc0xhc3QiLCJmaXJzdCIsImxhc3QiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsIk5vRnJhbWV3b3JrQWRhcHRlciIsImhhbmRsZXJzIiwiaXNXaW4iLCJldmVudCIsImxpc3RlbmVycyIsImV2ZW50UGFydHMiLCJzcGxpdCIsImV2ZW50VHlwZSIsIm5hbWVzcGFjZSIsIm5zIiwib3duZXJEb2N1bWVudCIsIndpbiIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0IiwiY2xpZW50TGVmdCIsIm5zSGFuZGxlcnMiLCJuc1R5cGVMaXN0IiwiaW5jbHVkZU1hcmdpbiIsImNvbXB1dGVkU3R5bGUiLCJoZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJ3aWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1lcmdlIiwidGFyZ2V0IiwiYXJyYXkiLCJmYWN0b3J5IiwiZW5jb2RlIiwiY29uZmlnIiwicmF3IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3RyaW5naWZ5Q29va2llVmFsdWUiLCJ2YWx1ZSIsImpzb24iLCJTdHJpbmciLCJwYXJzZUNvb2tpZVZhbHVlIiwicmVwbGFjZSIsInBsdXNlcyIsInJlYWQiLCJjb252ZXJ0ZXIiLCJpc0Z1bmN0aW9uIiwiZXhwaXJlcyIsInNldFRpbWUiLCJ0b1VUQ1N0cmluZyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJqb2luIiwicmVzdWx0IiwiY29va2llcyIsImwiLCJwYXJ0cyIsImV4cG9ydE5hbWUiLCJzZXRUaW1lb3V0Q29udGV4dCIsInRpbWVvdXQiLCJiaW5kRm4iLCJpbnZva2VBcnJheUFyZyIsImFyZyIsIml0ZXJhdG9yIiwiZGVzdCIsImluaGVyaXQiLCJjaGlsZCIsImJhc2UiLCJwcm9wZXJ0aWVzIiwiY2hpbGRQIiwiYmFzZVAiLCJjb25zdHJ1Y3RvciIsIl9zdXBlciIsImJvb2xPckZuIiwiVFlQRV9GVU5DVElPTiIsImlmVW5kZWZpbmVkIiwidmFsMSIsInZhbDIiLCJhZGRFdmVudExpc3RlbmVycyIsInR5cGVzIiwic3BsaXRTdHIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsImhhc1BhcmVudCIsIm5vZGUiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiaW5TdHIiLCJ0cmltIiwiZmluZEJ5S2V5IiwidG9BcnJheSIsInVuaXF1ZUFycmF5IiwicmVzdWx0cyIsInZhbHVlcyIsInByZWZpeGVkIiwicHJvcGVydHkiLCJwcmVmaXgiLCJjYW1lbFByb3AiLCJ0b1VwcGVyQ2FzZSIsIlZFTkRPUl9QUkVGSVhFUyIsInVuaXF1ZUlkIiwiX3VuaXF1ZUlkIiwiZ2V0V2luZG93Rm9yRWxlbWVudCIsImRvYyIsInBhcmVudFdpbmRvdyIsIklucHV0IiwibWFuYWdlciIsImlucHV0VGFyZ2V0IiwiZG9tSGFuZGxlciIsImV2IiwiaW5pdCIsImNyZWF0ZUlucHV0SW5zdGFuY2UiLCJUeXBlIiwiaW5wdXRDbGFzcyIsIlNVUFBPUlRfUE9JTlRFUl9FVkVOVFMiLCJQb2ludGVyRXZlbnRJbnB1dCIsIlNVUFBPUlRfT05MWV9UT1VDSCIsIlRvdWNoSW5wdXQiLCJTVVBQT1JUX1RPVUNIIiwiVG91Y2hNb3VzZUlucHV0IiwiTW91c2VJbnB1dCIsImlucHV0SGFuZGxlciIsImlucHV0IiwicG9pbnRlcnNMZW4iLCJwb2ludGVycyIsImNoYW5nZWRQb2ludGVyc0xlbiIsImNoYW5nZWRQb2ludGVycyIsImlzRmlyc3QiLCJJTlBVVF9TVEFSVCIsImlzRmluYWwiLCJJTlBVVF9FTkQiLCJJTlBVVF9DQU5DRUwiLCJzZXNzaW9uIiwiY29tcHV0ZUlucHV0RGF0YSIsInJlY29nbml6ZSIsInByZXZJbnB1dCIsInBvaW50ZXJzTGVuZ3RoIiwiZmlyc3RJbnB1dCIsInNpbXBsZUNsb25lSW5wdXREYXRhIiwiZmlyc3RNdWx0aXBsZSIsIm9mZnNldENlbnRlciIsImNlbnRlciIsImdldENlbnRlciIsInRpbWVTdGFtcCIsIm5vdyIsImRlbHRhVGltZSIsImFuZ2xlIiwiZ2V0QW5nbGUiLCJkaXN0YW5jZSIsImdldERpc3RhbmNlIiwiY29tcHV0ZURlbHRhWFkiLCJvZmZzZXREaXJlY3Rpb24iLCJnZXREaXJlY3Rpb24iLCJkZWx0YVgiLCJkZWx0YVkiLCJzY2FsZSIsImdldFNjYWxlIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsImNvbXB1dGVJbnRlcnZhbElucHV0RGF0YSIsInNyY0V2ZW50Iiwib2Zmc2V0RGVsdGEiLCJwcmV2RGVsdGEiLCJ2ZWxvY2l0eSIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImxhc3RJbnRlcnZhbCIsIkNPTVBVVEVfSU5URVJWQUwiLCJ2IiwiZ2V0VmVsb2NpdHkiLCJhYnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIkRJUkVDVElPTl9OT05FIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJESVJFQ1RJT05fVVAiLCJESVJFQ1RJT05fRE9XTiIsInAxIiwicDIiLCJwcm9wcyIsIlBST1BTX1hZIiwic3FydCIsImF0YW4yIiwiUEkiLCJzdGFydCIsIlBST1BTX0NMSUVOVF9YWSIsImV2RWwiLCJNT1VTRV9FTEVNRU5UX0VWRU5UUyIsImV2V2luIiwiTU9VU0VfV0lORE9XX0VWRU5UUyIsImFsbG93IiwicHJlc3NlZCIsIlBPSU5URVJfRUxFTUVOVF9FVkVOVFMiLCJQT0lOVEVSX1dJTkRPV19FVkVOVFMiLCJzdG9yZSIsInBvaW50ZXJFdmVudHMiLCJTaW5nbGVUb3VjaElucHV0IiwiZXZUYXJnZXQiLCJTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyIsIlNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTIiwic3RhcnRlZCIsIm5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMiLCJhbGwiLCJ0b3VjaGVzIiwiY2hhbmdlZCIsImNoYW5nZWRUb3VjaGVzIiwiY29uY2F0IiwiVE9VQ0hfVEFSR0VUX0VWRU5UUyIsInRhcmdldElkcyIsImdldFRvdWNoZXMiLCJhbGxUb3VjaGVzIiwiSU5QVVRfTU9WRSIsImlkZW50aWZpZXIiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRhcmdldFRvdWNoZXMiLCJmaWx0ZXIiLCJ0b3VjaCIsIm1vdXNlIiwiVG91Y2hBY3Rpb24iLCJzZXQiLCJjbGVhblRvdWNoQWN0aW9ucyIsImFjdGlvbnMiLCJUT1VDSF9BQ1RJT05fTk9ORSIsImhhc1BhblgiLCJUT1VDSF9BQ1RJT05fUEFOX1giLCJoYXNQYW5ZIiwiVE9VQ0hfQUNUSU9OX1BBTl9ZIiwiVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiIsIlRPVUNIX0FDVElPTl9BVVRPIiwiUmVjb2duaXplciIsInN0YXRlIiwiU1RBVEVfUE9TU0lCTEUiLCJzaW11bHRhbmVvdXMiLCJyZXF1aXJlRmFpbCIsInN0YXRlU3RyIiwiU1RBVEVfQ0FOQ0VMTEVEIiwiU1RBVEVfRU5ERUQiLCJTVEFURV9DSEFOR0VEIiwiU1RBVEVfQkVHQU4iLCJkaXJlY3Rpb25TdHIiLCJnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyIiwib3RoZXJSZWNvZ25pemVyIiwicmVjb2duaXplciIsImdldCIsIkF0dHJSZWNvZ25pemVyIiwiUGFuUmVjb2duaXplciIsInBYIiwicFkiLCJQaW5jaFJlY29nbml6ZXIiLCJQcmVzc1JlY29nbml6ZXIiLCJfdGltZXIiLCJfaW5wdXQiLCJSb3RhdGVSZWNvZ25pemVyIiwiU3dpcGVSZWNvZ25pemVyIiwiVGFwUmVjb2duaXplciIsInBUaW1lIiwicENlbnRlciIsImNvdW50IiwiSGFtbWVyIiwicmVjb2duaXplcnMiLCJwcmVzZXQiLCJNYW5hZ2VyIiwidG91Y2hBY3Rpb24iLCJ0b2dnbGVDc3NQcm9wcyIsIml0ZW0iLCJyZWNvZ25pemVXaXRoIiwicmVxdWlyZUZhaWx1cmUiLCJjc3NQcm9wcyIsInN0eWxlIiwidHJpZ2dlckRvbUV2ZW50IiwiZ2VzdHVyZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJnZXN0dXJlIiwiZGlzcGF0Y2hFdmVudCIsIlRFU1RfRUxFTUVOVCIsImNyZWF0ZUVsZW1lbnQiLCJNT0JJTEVfUkVHRVgiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJJTlBVVF9UWVBFX1RPVUNIIiwiSU5QVVRfVFlQRV9QRU4iLCJJTlBVVF9UWVBFX01PVVNFIiwiSU5QVVRfVFlQRV9LSU5FQ1QiLCJESVJFQ1RJT05fSE9SSVpPTlRBTCIsIkRJUkVDVElPTl9WRVJUSUNBTCIsIkRJUkVDVElPTl9BTEwiLCJNT1VTRV9JTlBVVF9NQVAiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwiYnV0dG9uIiwid2hpY2giLCJwb2ludGVyVHlwZSIsIlBPSU5URVJfSU5QVVRfTUFQIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3V0IiwiSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSIsIjIiLCIzIiwiNCIsIjUiLCJNU1BvaW50ZXJFdmVudCIsInJlbW92ZVBvaW50ZXIiLCJldmVudFR5cGVOb3JtYWxpemVkIiwidG9Mb3dlckNhc2UiLCJzdG9yZUluZGV4IiwicG9pbnRlcklkIiwiU0lOR0xFX1RPVUNIX0lOUFVUX01BUCIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInRvdWNoY2FuY2VsIiwiVE9VQ0hfSU5QVVRfTUFQIiwiaW5wdXRFdmVudCIsImlucHV0RGF0YSIsImlzTW91c2UiLCJQUkVGSVhFRF9UT1VDSF9BQ1RJT04iLCJOQVRJVkVfVE9VQ0hfQUNUSU9OIiwiVE9VQ0hfQUNUSU9OX0NPTVBVVEUiLCJjb21wdXRlIiwidXBkYXRlIiwiZ2V0VG91Y2hBY3Rpb24iLCJwcmV2ZW50RGVmYXVsdHMiLCJwcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsImhhc05vbmUiLCJwcmV2ZW50U3JjIiwiU1RBVEVfUkVDT0dOSVpFRCIsIlNUQVRFX0ZBSUxFRCIsImRyb3BSZWNvZ25pemVXaXRoIiwiZHJvcFJlcXVpcmVGYWlsdXJlIiwiaGFzUmVxdWlyZUZhaWx1cmVzIiwiY2FuUmVjb2duaXplV2l0aCIsIndpdGhTdGF0ZSIsInRyeUVtaXQiLCJjYW5FbWl0IiwiaW5wdXREYXRhQ2xvbmUiLCJwcm9jZXNzIiwicmVzZXQiLCJhdHRyVGVzdCIsIm9wdGlvblBvaW50ZXJzIiwiaXNSZWNvZ25pemVkIiwiaXNWYWxpZCIsInRocmVzaG9sZCIsImRpcmVjdGlvblRlc3QiLCJoYXNNb3ZlZCIsImluT3V0IiwidGltZSIsInZhbGlkUG9pbnRlcnMiLCJ2YWxpZE1vdmVtZW50IiwidmFsaWRUaW1lIiwiY2xlYXJUaW1lb3V0IiwidGFwcyIsImludGVydmFsIiwicG9zVGhyZXNob2xkIiwidmFsaWRUb3VjaFRpbWUiLCJmYWlsVGltZW91dCIsInZhbGlkSW50ZXJ2YWwiLCJ2YWxpZE11bHRpVGFwIiwidGFwQ291bnQiLCJWRVJTSU9OIiwiZG9tRXZlbnRzIiwidXNlclNlbGVjdCIsInRvdWNoU2VsZWN0IiwidG91Y2hDYWxsb3V0IiwiY29udGVudFpvb21pbmciLCJ1c2VyRHJhZyIsInRhcEhpZ2hsaWdodENvbG9yIiwiU1RPUCIsIkZPUkNFRF9TVE9QIiwic3RvcCIsImZvcmNlIiwic3RvcHBlZCIsImN1clJlY29nbml6ZXIiLCJleGlzdGluZyIsImV2ZW50cyIsIlRhcCIsIlBhbiIsIlN3aXBlIiwiUGluY2giLCJSb3RhdGUiLCJQcmVzcyIsInJvb3QiLCJaZXB0byIsIkFueVNsaWRlciIsInNsaWRlciIsImFuaW1hdGlvbkNhbGxiYWNrIiwiY3VycmVudCIsIm5leHRTbGlkZSIsIm9yZ051bVNsaWRlcyIsImFuaW1hdGlvbiIsImlubmVyIiwiY3NzIiwibnVtU2xpZGVzIiwic2xpZGVzIiwiZXEiLCJzaG93Iiwic2hvd0J1bGxldHMiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwicnVubmluZyIsImFmdGVyQ2hhbmdlIiwicnVuIiwiYmVmb3JlQ2hhbmdlIiwiZmFkZU91dCIsInNwZWVkIiwiZmFkZUluIiwiYW5pbWF0ZSIsImVhc2luZyIsInRpY2siLCJ0aW1lciIsInByZXYiLCJjdXJyZW50U2xpZGUiLCJnb1RvIiwic2xpZGUiLCJwYXVzZSIsInBsYXkiLCJjaGlsZHJlbiIsImFmdGVyU2V0dXAiLCJrZXlib2FyZCIsIm5leHRMYWJlbCIsInBhdXNlT25Ib3ZlciIsInByZXZMYWJlbCIsInNob3dDb250cm9scyIsInN0YXJ0U2xpZGUiLCJjbG9uZSIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwid3JhcEFsbCIsImRpc3BsYXkiLCJwb3NpdGlvbiIsImZsb2F0IiwicHJlcGVuZCIsImhhc0NsYXNzIiwiYWN0aXZlIiwib3V0IiwibmF2IiwiYWZ0ZXIiLCJrZXlDb2RlIiwicmVzaXplIiwibXNNYXhUb3VjaFBvaW50cyIsIm1heFRvdWNoUG9pbnRzIiwic3RhcnRUaW1lIiwic3RhcnRYIiwib3JpZ2luYWxFdmVudCIsInBhZ2VYIiwiY3VycmVudFgiLCJjdXJyZW50VGltZSIsImN1cnJlbnREaXN0YW5jZSIsIm5vb3AiLCJkZWZpbmVCcmlkZ2V0IiwiYWRkT3B0aW9uTWV0aG9kIiwiUGx1Z2luQ2xhc3MiLCJvcHRpb24iLCJvcHRzIiwiaXNQbGFpbk9iamVjdCIsImJyaWRnZSIsImxlbiIsImVsZW0iLCJpbnN0YW5jZSIsImNoYXJBdCIsInJldHVyblZhbHVlIiwibG9nRXJyb3IiLCJfaW5pdCIsIm1lc3NhZ2UiLCJlcnJvciIsImJyaWRnZXQiLCJjbGFzc1JlZyIsImNsYXNzTmFtZSIsInRvZ2dsZUNsYXNzIiwiYyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY2xhc3NpZSIsImhhcyIsInRvZ2dsZSIsImluZGV4T2ZMaXN0ZW5lciIsImFsaWFzIiwicHJvdG8iLCJvcmlnaW5hbEdsb2JhbFZhbHVlIiwiZXZ0IiwicmVzcG9uc2UiLCJmbGF0TGlzdGVuZXJzIiwibGlzdGVuZXJJc1dyYXBwZWQiLCJldnRzIiwic2luZ2xlIiwibXVsdGlwbGUiLCJnZXRJRUV2ZW50Iiwic3JjRWxlbWVudCIsImRvY0VsZW0iLCJhdHRhY2hFdmVudCIsInVuYmluZCIsImRldGFjaEV2ZW50IiwiZXJyIiwiZXZlbnRpZSIsImdldFN0eWxlUHJvcGVydHkiLCJwcm9wTmFtZSIsImRvY0VsZW1TdHlsZSIsInByZWZpeGVzIiwiZ2V0U3R5bGVTaXplIiwibnVtIiwiaXNOYU4iLCJnZXRaZXJvU2l6ZSIsInNpemUiLCJtZWFzdXJlbWVudHMiLCJtZWFzdXJlbWVudCIsImRlZmluZUdldFNpemUiLCJzZXR1cCIsImlzU2V0dXAiLCJnZXRTdHlsZSIsImdldFN0eWxlRm4iLCJjdXJyZW50U3R5bGUiLCJib3hTaXppbmdQcm9wIiwiZGl2IiwicGFkZGluZyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJpc0JveFNpemVPdXRlciIsInJlbW92ZUNoaWxkIiwiZ2V0U2l6ZSIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImlzQm9yZGVyQm94IiwibXVuZ2VOb25QaXhlbCIsInBhZGRpbmdXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0hlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWFyZ2luV2lkdGgiLCJtYXJnaW5IZWlnaHQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVySGVpZ2h0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImlzQm9yZGVyQm94U2l6ZU91dGVyIiwic3R5bGVXaWR0aCIsInN0eWxlSGVpZ2h0IiwicnMiLCJydW50aW1lU3R5bGUiLCJyc0xlZnQiLCJwaXhlbExlZnQiLCJkb2NSZWFkeSIsImlzUmVhZHkiLCJxdWV1ZSIsIm9uUmVhZHkiLCJpc0lFOE5vdFJlYWR5IiwicmVhZHlTdGF0ZSIsImRlZmluZURvY1JlYWR5IiwiRWxlbVByb3RvIiwibWF0Y2giLCJzZWxlY3RvciIsIm1hdGNoZXNNZXRob2QiLCJjaGVja1BhcmVudCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInF1ZXJ5IiwiZWxlbXMiLCJtYXRjaENoaWxkIiwibWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlcyIsInN1cHBvcnRzT3JwaGFucyIsIkVsZW1lbnQiLCJmaXp6eVVJVXRpbHMiLCJ1dGlscyIsIm1vZHVsbyIsIm9ialRvU3RyaW5nIiwidG9TdHJpbmciLCJtYWtlQXJyYXkiLCJhcnkiLCJyZW1vdmVGcm9tIiwiaXNFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJzZXRUZXh0Iiwic2V0VGV4dFByb3BlcnR5IiwidGV4dENvbnRlbnQiLCJnZXRQYXJlbnQiLCJnZXRRdWVyeUVsZW1lbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJmZkVsZW1zIiwiY2hpbGRFbGVtcyIsImoiLCJqTGVuIiwiZGVib3VuY2VNZXRob2QiLCJfY2xhc3MiLCJtZXRob2ROYW1lIiwidGltZW91dE5hbWUiLCJfdGhpcyIsInRvRGFzaGVkIiwiJDEiLCIkMiIsImh0bWxJbml0IiwiV2lkZ2V0Q2xhc3MiLCJkYXNoZWROYW1lc3BhY2UiLCJkYXRhQXR0ciIsImdldEF0dHJpYnV0ZSIsIkZsaWNraXR5IiwiQ2VsbCIsImlzSUU4Iiwic2V0QXR0cmlidXRlIiwic2lkZSIsIm9yaWdpblNpZGUiLCJzZXRQb3NpdGlvbiIsInNldERlZmF1bHRUYXJnZXQiLCJyZW5kZXJQb3NpdGlvbiIsIm1hcmdpblByb3BlcnR5IiwiY2VsbEFsaWduIiwiZ2V0UG9zaXRpb25WYWx1ZSIsIndyYXBTaGlmdCIsInNsaWRlYWJsZVdpZHRoIiwiYW5pbWF0ZVByb3RvdHlwZSIsImxhc3RUaW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjdXJyVGltZSIsInRpbWVUb0NhbGwiLCJtYXgiLCJzdGFydEFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwicmVzdGluZ0ZyYW1lcyIsImFwcGx5RHJhZ0ZvcmNlIiwiYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb24iLCJwcmV2aW91c1giLCJpbnRlZ3JhdGVQaHlzaWNzIiwicG9zaXRpb25TbGlkZXIiLCJzZXR0bGUiLCJ0cmFuc2Zvcm1Qcm9wZXJ0eSIsImlzM2QiLCJ3cmFwQXJvdW5kIiwiY2VsbHMiLCJzaGlmdFdyYXBDZWxscyIsImN1cnNvclBvc2l0aW9uIiwicmlnaHRUb0xlZnQiLCJwb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQiLCJzZWxlY3RlZENlbGwiLCJzZWxlY3RlZEluZGV4IiwicGVyY2VudFBvc2l0aW9uIiwiaXNQb2ludGVyRG93biIsImlzRnJlZVNjcm9sbGluZyIsImJlZm9yZUdhcCIsIl9zaGlmdENlbGxzIiwiYmVmb3JlU2hpZnRDZWxscyIsImFmdGVyR2FwIiwiYWZ0ZXJTaGlmdENlbGxzIiwiZ2FwIiwiY2VsbCIsImNlbGxTaGlmdCIsIl91bnNoaWZ0Q2VsbHMiLCJhY2NlbCIsImdldEZyaWN0aW9uRmFjdG9yIiwiYXBwbHlGb3JjZSIsImdldFJlc3RpbmdQb3NpdGlvbiIsImRyYWdWZWxvY2l0eSIsImRyYWdYIiwiZHJhZ0ZvcmNlIiwid3JhcCIsImZsb29yIiwic2VsZWN0ZWRBdHRyYWN0aW9uIiwiX0ZsaWNraXR5IiwibW92ZUVsZW1lbnRzIiwidG9FbGVtIiwicXVlcnlFbGVtZW50IiwiJGVsZW1lbnQiLCJfY3JlYXRlIiwiR1VJRCIsImluc3RhbmNlcyIsImFjY2Vzc2liaWxpdHkiLCJmcmVlU2Nyb2xsRnJpY3Rpb24iLCJmcmljdGlvbiIsInNldEdhbGxlcnlTaXplIiwiY3JlYXRlTWV0aG9kcyIsImd1aWQiLCJmbGlja2l0eUdVSUQiLCJ2aWV3cG9ydCIsInNldFVuc2VsZWN0YWJsZSIsIl9jcmVhdGVTbGlkZXIiLCJ3YXRjaENTUyIsImlzUmVzaXplQm91bmQiLCJhY3RpdmF0ZSIsImlzQWN0aXZlIiwiY2VsbEVsZW1zIiwiX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMiLCJyZWxvYWRDZWxscyIsInRhYkluZGV4IiwiaW5pdGlhbEluZGV4IiwiaXNJbml0QWN0aXZhdGVkIiwic2VsZWN0IiwiY2VsbFNlbGVjdG9yIiwiX21ha2VDZWxscyIsInBvc2l0aW9uQ2VsbHMiLCJfZ2V0V3JhcFNoaWZ0Q2VsbHMiLCJnZXRMYXN0Q2VsbCIsIl9zaXplQ2VsbHMiLCJfcG9zaXRpb25DZWxscyIsIm1heENlbGxIZWlnaHQiLCJjZWxsWCIsInN0YXJ0Q2VsbCIsIl9jb250YWluQ2VsbHMiLCJyZXBvc2l0aW9uIiwic2V0Q2VsbEFsaWduIiwiY2VsbEFsaWduU2hvcnRoYW5kcyIsInNob3J0aGFuZCIsImdhcFgiLCJjZWxsSW5kZXgiLCJfZ2V0R2FwQ2VsbHMiLCJpbmNyZW1lbnQiLCJjb250YWluIiwic3RhcnRNYXJnaW4iLCJlbmRNYXJnaW4iLCJmaXJzdENlbGxTdGFydE1hcmdpbiIsImxhc3RDZWxsIiwiY29udGVudFdpZHRoIiwiZW5kTGltaXQiLCJpc0NvbnRlbnRTbWFsbGVyIiwibWluIiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJFdmVudCIsImlzV3JhcCIsImlzSW5zdGFudCIsInNldFNlbGVjdGVkQ2VsbCIsIl9yZW1vdmVTZWxlY3RlZENlbGxDbGFzcyIsInNlbGVjdGVkRWxlbWVudCIsImdldENlbGwiLCJnZXRDZWxscyIsImdldENlbGxFbGVtZW50cyIsImdldFBhcmVudENlbGwiLCJnZXRBZGphY2VudENlbGxFbGVtZW50cyIsImFkakNvdW50IiwidWlDaGFuZ2UiLCJjaGlsZFVJUG9pbnRlckRvd24iLCJvbnJlc2l6ZSIsInN1cHBvcnRzQ29uZGl0aW9uYWxDU1MiLCJzdXBwb3J0cyIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJhZnRlckNvbnRlbnQiLCJjb250ZW50Iiwid2F0Y2hPcHRpb24iLCJkZWFjdGl2YXRlIiwib25rZXlkb3duIiwiYWN0aXZlRWxlbWVudCIsImxlZnRNZXRob2QiLCJyaWdodE1ldGhvZCIsInJlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZURhdGEiLCJVbmlwb2ludGVyIiwiYmluZFN0YXJ0RXZlbnQiLCJfYmluZFN0YXJ0RXZlbnQiLCJ1bmJpbmRTdGFydEV2ZW50IiwiaXNCaW5kIiwiYmluZE1ldGhvZCIsInBvaW50ZXJFbmFibGVkIiwibXNQb2ludGVyRW5hYmxlZCIsImdldFRvdWNoIiwicG9pbnRlcklkZW50aWZpZXIiLCJvbm1vdXNlZG93biIsIl9wb2ludGVyRG93biIsIm9udG91Y2hzdGFydCIsIm9uTVNQb2ludGVyRG93biIsIm9ucG9pbnRlcmRvd24iLCJwb2ludGVyIiwicG9pbnRlckRvd24iLCJfYmluZFBvc3RTdGFydEV2ZW50cyIsInBvc3RTdGFydEV2ZW50cyIsIk1TUG9pbnRlckRvd24iLCJldm50IiwiX2JvdW5kUG9pbnRlckV2ZW50cyIsIl91bmJpbmRQb3N0U3RhcnRFdmVudHMiLCJvbm1vdXNlbW92ZSIsIl9wb2ludGVyTW92ZSIsIm9uTVNQb2ludGVyTW92ZSIsIm9ucG9pbnRlcm1vdmUiLCJvbnRvdWNobW92ZSIsInBvaW50ZXJNb3ZlIiwib25tb3VzZXVwIiwiX3BvaW50ZXJVcCIsIm9uTVNQb2ludGVyVXAiLCJvbnBvaW50ZXJ1cCIsIm9udG91Y2hlbmQiLCJfcG9pbnRlckRvbmUiLCJwb2ludGVyVXAiLCJwb2ludGVyRG9uZSIsIm9uTVNQb2ludGVyQ2FuY2VsIiwib25wb2ludGVyY2FuY2VsIiwiX3BvaW50ZXJDYW5jZWwiLCJvbnRvdWNoY2FuY2VsIiwicG9pbnRlckNhbmNlbCIsImdldFBvaW50ZXJQb2ludCIsInBhZ2VZIiwiVW5pZHJhZ2dlciIsInByZXZlbnREZWZhdWx0RXZlbnQiLCJub0RyYWdTdGFydCIsImJpbmRIYW5kbGVzIiwiX2JpbmRIYW5kbGVzIiwidW5iaW5kSGFuZGxlcyIsImJpbmRlckV4dHJhIiwiaGFuZGxlIiwibXNUb3VjaEFjdGlvbiIsImRpc2FibGVJbWdPbmRyYWdzdGFydCIsImhhbmRsZXMiLCJvbmRyYWdzdGFydCIsIl9kcmFnUG9pbnRlckRvd24iLCJmb2N1c2VkIiwiYmx1ciIsInBvaW50ZXJEb3duU2Nyb2xsIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJwb2ludGVyRG93blBvaW50IiwiaXNUb3VjaHN0YXJ0IiwidGFyZ2V0Tm9kZU5hbWUiLCJtb3ZlVmVjdG9yIiwiX2RyYWdQb2ludGVyTW92ZSIsIl9kcmFnTW92ZSIsIm1vdmVQb2ludCIsImlzRHJhZ2dpbmciLCJoYXNEcmFnU3RhcnRlZCIsIl9kcmFnU3RhcnQiLCJfZHJhZ1BvaW50ZXJVcCIsIl9kcmFnRW5kIiwiX3N0YXRpY0NsaWNrIiwiZHJhZ1N0YXJ0UG9pbnQiLCJpc1ByZXZlbnRpbmdDbGlja3MiLCJkcmFnU3RhcnQiLCJkcmFnTW92ZSIsImRyYWdFbmQiLCJvbmNsaWNrIiwiaXNJZ25vcmluZ01vdXNlVXAiLCJmb2N1cyIsInN0YXRpY0NsaWNrIiwib25zY3JvbGwiLCJzY3JvbGwiLCJzY3JvbGxNb3ZlWCIsInNjcm9sbE1vdmVZIiwiaXNQYWdlT2Zmc2V0IiwiZ2V0UG9pbnRlcldpbmRvd1kiLCJwb2ludGVyUG9pbnQiLCJkcmFnZ2FibGUiLCJ0b3VjaFZlcnRpY2FsU2Nyb2xsIiwiX2NyZWF0ZURyYWciLCJiaW5kRHJhZyIsIl91aUNoYW5nZURyYWciLCJfY2hpbGRVSVBvaW50ZXJEb3duRHJhZyIsInVuYmluZERyYWciLCJpc0RyYWdCb3VuZCIsInBvaW50ZXJEb3duRm9jdXMiLCJ0b3VjaFN0YXJ0RXZlbnRzIiwiZm9jdXNOb2RlcyIsIklOUFVUIiwiU0VMRUNUIiwicHJldlNjcm9sbFkiLCJzY3JvbGxUbyIsInRvdWNoVmVydGljYWxTY3JvbGxNb3ZlIiwiaXNUb3VjaFNjcm9sbGluZyIsInRvdWNoU2Nyb2xsRXZlbnRzIiwiTVNQb2ludGVyTW92ZSIsImNhbk5vdFNjcm9sbCIsInN0YXJ0U2Nyb2xsWSIsInBvaW50ZXJXaW5kb3dTdGFydFkiLCJkcmFnU3RhcnRQb3NpdGlvbiIsInByZXZpb3VzRHJhZ1giLCJvcmlnaW5Cb3VuZCIsImVuZEJvdW5kIiwiZHJhZ01vdmVUaW1lIiwiZnJlZVNjcm9sbCIsImRyYWdFbmRSZXN0aW5nU2VsZWN0IiwicmVzdGluZ1giLCJkcmFnRW5kQm9vc3RTZWxlY3QiLCJnZXRDZWxsRGlzdGFuY2UiLCJwb3NpdGl2ZVJlc3RpbmciLCJfZ2V0Q2xvc2VzdFJlc3RpbmciLCJuZWdhdGl2ZVJlc3RpbmciLCJtaW5EaXN0YW5jZSIsIkluZmluaXR5IiwiY29uZGl0aW9uIiwiZCIsIm1kIiwiaXNXcmFwQXJvdW5kIiwiZGVsdGEiLCJjbGlja2VkQ2VsbCIsImNlbGxFbGVtIiwiVGFwTGlzdGVuZXIiLCJiaW5kVGFwIiwidW5iaW5kVGFwIiwidGFwRWxlbWVudCIsImJvdW5kaW5nUmVjdCIsInNjcm9sbFgiLCJzY3JvbGxZIiwiaXNJbnNpZGUiLCJib3R0b20iLCJQcmV2TmV4dEJ1dHRvbiIsImdldEFycm93TW92ZW1lbnRzIiwic2hhcGUiLCJ4MCIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJzdmdVUkkiLCJzdXBwb3J0c0lubGluZVNWRyIsImNoZWNrU3VwcG9ydCIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJuYW1lc3BhY2VVUkkiLCJpc0VuYWJsZWQiLCJpc1ByZXZpb3VzIiwibGVmdERpcmVjdGlvbiIsImlzTGVmdCIsInN2ZyIsImNyZWF0ZVNWRyIsInNldEFycm93VGV4dCIsIm9uQ2VsbFNlbGVjdCIsIm9uVGFwIiwiY3JlYXRlRWxlbWVudE5TIiwicGF0aE1vdmVtZW50cyIsImFycm93U2hhcGUiLCJwYXJlbnRPcHRpb25zIiwiYXJyb3dUZXh0IiwibGVmdEFycm93VGV4dCIsInJpZ2h0QXJyb3dUZXh0IiwiZGlzYWJsZWQiLCJsYXN0SW5kZXgiLCJib3VuZEluZGV4IiwicHJldk5leHRCdXR0b25zIiwiX2NyZWF0ZVByZXZOZXh0QnV0dG9ucyIsInByZXZCdXR0b24iLCJuZXh0QnV0dG9uIiwiYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMiLCJkZWFjdGl2YXRlUHJldk5leHRCdXR0b25zIiwiUGFnZURvdHMiLCJob2xkZXIiLCJkb3RzIiwidXBkYXRlU2VsZWN0ZWQiLCJzZXREb3RzIiwiYWRkRG90cyIsInJlbW92ZURvdHMiLCJuZXdEb3RzIiwiZG90Iiwic2VsZWN0ZWREb3QiLCJwYWdlRG90cyIsIl9jcmVhdGVQYWdlRG90cyIsImFjdGl2YXRlUGFnZURvdHMiLCJvbkNlbGxBZGRlZFJlbW92ZWRQYWdlRG90cyIsImRlYWN0aXZhdGVQYWdlRG90cyIsIlBsYXllciIsImlzUGxheWluZyIsInZpc2liaWxpdHlFdmVudCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJoaWRkZW5Qcm9wZXJ0eSIsImlzUGF1c2VkIiwidGlja1RpbWUiLCJhdXRvUGxheSIsImNsZWFyIiwidW5wYXVzZSIsImlzSGlkZGVuIiwicGF1c2VBdXRvUGxheU9uSG92ZXIiLCJfY3JlYXRlUGxheWVyIiwicGxheWVyIiwiYWN0aXZhdGVQbGF5ZXIiLCJzdG9wUGxheWVyIiwiZGVhY3RpdmF0ZVBsYXllciIsImlzTW91c2VlbnRlckJvdW5kIiwib25tb3VzZWVudGVyIiwib25tb3VzZWxlYXZlIiwiZ2V0Q2VsbHNGcmFnbWVudCIsImluc2VydCIsImlzQXBwZW5kIiwiaW5zZXJ0Q2VsbEVsZW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJlbmRDZWxscyIsInNlbGVjdGVkSW5kZXhEZWx0YSIsIl9jZWxsQWRkZWRSZW1vdmVkIiwid2FzQmVmb3JlIiwiY2hhbmdlZENlbGxJbmRleCIsImNlbGxDaGFuZ2UiLCJjZWxsU2l6ZUNoYW5nZSIsImlzUG9zaXRpb25pbmdTbGlkZXIiLCJwcmV2U2xpZGVhYmxlV2lkdGgiLCJnZXRDZWxsTGF6eUltYWdlcyIsImltZ3MiLCJMYXp5TG9hZGVyIiwiZmxpY2tpdHkiLCJsb2FkIiwiX2NyZWF0ZUxhenlsb2FkIiwibGF6eUxvYWQiLCJsYXp5SW1hZ2VzIiwibGF6eUNlbGxJbWFnZXMiLCJfY3JlYXRlQXNOYXZGb3IiLCJhY3RpdmF0ZUFzTmF2Rm9yIiwiZGVhY3RpdmF0ZUFzTmF2Rm9yIiwiZGVzdHJveUFzTmF2Rm9yIiwiYXNOYXZGb3JPcHRpb24iLCJhc05hdkZvciIsInNldE5hdkNvbXBhbmlvbiIsImNvbXBhbmlvbiIsIm5hdkNvbXBhbmlvbiIsIm9uTmF2Q29tcGFuaW9uU2VsZWN0IiwibmF2Q29tcGFuaW9uU2VsZWN0Iiwib25OYXZTdGF0aWNDbGljayIsInJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudCIsIm5hdlNlbGVjdGVkRWxlbWVudCIsImNlbGxFbGVtZW50IiwiSW1hZ2VzTG9hZGVkIiwib25BbHdheXMiLCJMb2FkaW5nSW1hZ2UiLCJCYWNrZ3JvdW5kIiwiZWxlbWVudE5vZGVUeXBlcyIsImNoaWxkSW1ncyIsInJlVVJMIiwibG9hZGluZ0ltYWdlIiwib25Qcm9ncmVzcyIsImltYWdlIiwiZXZlbnROYW1lIiwianFNZXRob2QiLCJfY3JlYXRlSW1hZ2VzTG9hZGVkIiwib25JbWFnZXNMb2FkZWRQcm9ncmVzcyIsIk91dGxheWVyIiwiSXRlbSIsImlzRW1wdHlPYmoiLCJsYXlvdXQiLCJ0b0Rhc2hlZEFsbCIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsInN1cHBvcnRzQ1NTMyIsInRyYW5zaXRpb25FbmRFdmVudCIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwicHJlZml4YWJsZVByb3BlcnRpZXMiLCJ2ZW5kb3JQcm9wZXJ0aWVzIiwiY2FjaGUiLCJzdXBwb3J0ZWRQcm9wIiwiX3RyYW5zbiIsImluZ1Byb3BlcnRpZXMiLCJjbGVhbiIsIm9uRW5kIiwiZWxlbVN0eWxlIiwiZ2V0UG9zaXRpb24iLCJsYXlvdXRPcHRpb25zIiwiaXNPcmlnaW5MZWZ0IiwiaXNPcmlnaW5Ub3AiLCJ4VmFsdWUiLCJ5VmFsdWUiLCJsYXlvdXRTaXplIiwibGF5b3V0UG9zaXRpb24iLCJ4UGFkZGluZyIsInhQcm9wZXJ0eSIsInhSZXNldFByb3BlcnR5IiwiZ2V0WFZhbHVlIiwieVBhZGRpbmciLCJ5UHJvcGVydHkiLCJ5UmVzZXRQcm9wZXJ0eSIsImdldFlWYWx1ZSIsImlzSG9yaXpvbnRhbCIsIl90cmFuc2l0aW9uVG8iLCJjdXJYIiwiY3VyWSIsImNvbXBhcmVYIiwiY29tcGFyZVkiLCJkaWROb3RNb3ZlIiwiaXNUcmFuc2l0aW9uaW5nIiwidHJhbnNYIiwidHJhbnNZIiwidHJhbnNpdGlvblN0eWxlIiwidHJhbnNmb3JtIiwiZ2V0VHJhbnNsYXRlIiwidG8iLCJvblRyYW5zaXRpb25FbmQiLCJpc0NsZWFuaW5nIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiX3RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJmcm9tIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsIm9ud2Via2l0VHJhbnNpdGlvbkVuZCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ub3RyYW5zaXRpb25lbmQiLCJkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCItbW96LXRyYW5zZm9ybSIsIi1vLXRyYW5zZm9ybSIsInByb3BlcnR5TmFtZSIsImRpc2FibGVUcmFuc2l0aW9uIiwicmVtb3ZlVHJhbnNpdGlvblN0eWxlcyIsImNsZWFuU3R5bGUiLCJjbGVhblRyYW5zaXRpb25TdHlsZSIsInJlbW92ZUVsZW0iLCJoaWRlIiwicmV2ZWFsIiwidHJhbnNpdGlvbkVuZFByb3BlcnR5IiwiZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSIsIm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCIsImhpZGRlblN0eWxlIiwidmlzaWJsZVN0eWxlIiwic3R5bGVQcm9wZXJ0eSIsIm9wdGlvblN0eWxlIiwib3BhY2l0eSIsIm9uSGlkZVRyYW5zaXRpb25FbmQiLCJvdXRsYXllckdVSUQiLCJpc0luaXRMYXlvdXQiLCJjb250YWluZXJTdHlsZSIsImlzUmVzaXppbmdDb250YWluZXIiLCJyZWxvYWRJdGVtcyIsInN0YW1wcyIsInN0YW1wIiwiYmluZFJlc2l6ZSIsIl9pdGVtaXplIiwiaXRlbUVsZW1zIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtU2VsZWN0b3IiLCJnZXRJdGVtRWxlbWVudHMiLCJfcmVzZXRMYXlvdXQiLCJfbWFuYWdlU3RhbXBzIiwiaXNMYXlvdXRJbnN0YW50IiwiX2lzTGF5b3V0SW5pdGVkIiwibGF5b3V0SXRlbXMiLCJfZ2V0TWVhc3VyZW1lbnQiLCJfZ2V0SXRlbXNGb3JMYXlvdXQiLCJfbGF5b3V0SXRlbXMiLCJfcG9zdExheW91dCIsImlzSWdub3JlZCIsIl9lbWl0Q29tcGxldGVPbkl0ZW1zIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsIl9wcm9jZXNzTGF5b3V0UXVldWUiLCJfcG9zaXRpb25JdGVtIiwicmVzaXplQ29udGFpbmVyIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsIm1lYXN1cmUiLCJpc1dpZHRoIiwiZWxlbVNpemUiLCJvbkNvbXBsZXRlIiwiZG9uZUNvdW50IiwiaWdub3JlIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJ1bmJpbmRSZXNpemUiLCJkZWxheWVkIiwicmVzaXplVGltZW91dCIsIm5lZWRzUmVzaXplTGF5b3V0IiwiaGFzU2l6ZXMiLCJhZGRJdGVtcyIsImFwcGVuZGVkIiwicHJlcGVuZGVkIiwicHJldmlvdXNJdGVtcyIsInJldmVhbEl0ZW1FbGVtZW50cyIsImdldEl0ZW1zIiwiaGlkZUl0ZW1FbGVtZW50cyIsInJlbW92ZUl0ZW1zIiwiTGF5b3V0Iiwic2V0dGluZ3MiLCJJc290b3BlIiwiaXRlbUdVSUQiLCJzb3J0RGF0YSIsInVwZGF0ZVNvcnREYXRhIiwiZ2V0U29ydERhdGEiLCJzb3J0ZXJzIiwiX3NvcnRlcnMiLCJzb3J0ZXIiLCJfZGVzdHJveSIsIkxheW91dE1vZGUiLCJpc290b3BlIiwiZmlsdGVyZWRJdGVtcyIsImdldE91dGxheWVyTWV0aG9kIiwiZmFjYWRlTWV0aG9kcyIsIm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQiLCJnZXRDb2x1bW5XaWR0aCIsImdldFNlZ21lbnRTaXplIiwiZ2V0Um93SGVpZ2h0Iiwic2VnbWVudCIsInNlZ21lbnROYW1lIiwib3V0ZXJTaXplIiwiZmlyc3RJdGVtU2l6ZSIsImdldEZpcnN0SXRlbVNpemUiLCJmaXJzdEl0ZW0iLCJtb2RlcyIsIk1vZGUiLCJNYXNvbnJ5IiwibWVhc3VyZUNvbHVtbnMiLCJjb2xzIiwiY29sWXMiLCJtYXhZIiwiZ2V0Q29udGFpbmVyV2lkdGgiLCJjb2x1bW5XaWR0aCIsImZpcnN0SXRlbUVsZW0iLCJjb250YWluZXJXaWR0aCIsImd1dHRlciIsImV4Y2VzcyIsIm1hdGhNZXRob2QiLCJjb250YWluZXIiLCJpc0ZpdFdpZHRoIiwicmVtYWluZGVyIiwiY29sU3BhbiIsImNvbEdyb3VwIiwiX2dldENvbEdyb3VwIiwibWluaW11bVkiLCJzaG9ydENvbEluZGV4Iiwic2V0SGVpZ2h0Iiwic2V0U3BhbiIsImdyb3VwQ291bnQiLCJncm91cENvbFlzIiwic3RhbXBTaXplIiwiZmlyc3RYIiwibGFzdFgiLCJmaXJzdENvbCIsImxhc3RDb2wiLCJzdGFtcE1heFkiLCJfZ2V0Q29udGFpbmVyRml0V2lkdGgiLCJ1bnVzZWRDb2xzIiwicHJldmlvdXNXaWR0aCIsIk1hc29ucnlNb2RlIiwiRml0Um93cyIsIml0ZW1XaWR0aCIsIlZlcnRpY2FsIiwiaG9yaXpvbnRhbEFsaWdubWVudCIsImdldEl0ZW1Tb3J0ZXIiLCJzb3J0QnlzIiwic29ydEFzYyIsIml0ZW1BIiwiaXRlbUIiLCJzb3J0QnkiLCJpc0FzY2VuZGluZyIsImdldFRleHQiLCJpbm5lclRleHQiLCJsYXlvdXRNb2RlIiwiaXNKUXVlcnlGaWx0ZXJpbmciLCJzb3J0QXNjZW5kaW5nIiwiX2dldFNvcnRlcnMiLCJzb3J0SGlzdG9yeSIsIl9pbml0TGF5b3V0TW9kZSIsIl91cGRhdGVJdGVtc1NvcnREYXRhIiwiaW5pdGlhbE9wdHMiLCJhcnJhbmdlIiwiX2xheW91dCIsIl9nZXRJc0luc3RhbnQiLCJoaWRlUmV2ZWFsIiwiZmlsdGVyZWQiLCJuZWVkUmV2ZWFsIiwibmVlZEhpZGUiLCJfZmlsdGVyIiwiX2JpbmRBcnJhbmdlQ29tcGxldGUiLCJfaXNJbnN0YW50IiwiX25vVHJhbnNpdGlvbiIsIl9zb3J0IiwiYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2siLCJpc0xheW91dENvbXBsZXRlIiwiaXNIaWRlQ29tcGxldGUiLCJpc1JldmVhbENvbXBsZXRlIiwiaGlkZGVuTWF0Y2hlZCIsInZpc2libGVVbm1hdGNoZWQiLCJfZ2V0RmlsdGVyVGVzdCIsImlzTWF0Y2hlZCIsImlzIiwibXVuZ2VTb3J0ZXIiLCJhdHRyTWF0Y2giLCJnZXRWYWx1ZSIsImdldFZhbHVlR2V0dGVyIiwicGFyc2VyIiwic29ydERhdGFQYXJzZXJzIiwic29ydEJ5T3B0IiwiaXRlbVNvcnRlciIsInVuc2hpZnQiLCJfbW9kZSIsIm1vZGUiLCJfZmlsdGVyUmV2ZWFsQWRkZWQiLCJmaWx0ZXJlZEluc2VydEl0ZW1zIiwiX3JlbW92ZSIsInNodWZmbGUiLCJnZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyIsIlBsdWdpbiIsImR1cGxpY2F0ZSIsInJlbW92ZUlkcyIsIl9kZWZhdWx0cyIsIl9uYW1lIiwibW9iaWxlTWVudSIsImxhYmVsIiwiZWFzaW5nT3BlbiIsImVhc2luZ0Nsb3NlIiwiY2xvc2VkU3ltYm9sIiwib3BlbmVkU3ltYm9sIiwicGFyZW50VGFnIiwiY2xvc2VPbkNsaWNrIiwiYWxsb3dQYXJlbnRMaW5rcyIsIm5lc3RlZFBhcmVudExpbmtzIiwic2hvd0NoaWxkcmVuIiwicmVtb3ZlQ2xhc3NlcyIsInJlbW92ZVN0eWxlcyIsImJyYW5kIiwiYmVmb3JlT3BlbiIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJPcGVuIiwiYWZ0ZXJDbG9zZSIsImljb25DbGFzcyIsIm1lbnVCYXIiLCIkdGhpcyIsIm1lbnUiLCJtb2JpbGVOYXYiLCJyZW1vdmVBdHRyIiwiYnRuIiwiY29udGVudHMiLCJjb250YWluc0FuY2hvciIsIm5vZGVzIiwid3JhcEVsZW1lbnQiLCIkd3JhcCIsImFycm93RWxlbWVudCIsImNsaWNrIiwiY2xvc2VzdCIsIl92aXNpYmlsaXR5VG9nZ2xlIiwiX291dGxpbmVzIiwia2V5dXAiLCJfbWVudVRvZ2dsZSIsIl9pdGVtQ2xpY2siLCJrZXlkb3duIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZWwiLCJhcnJvdyIsInVsIiwiX2dldEFjdGlvbkl0ZW1zIiwic2xpZGVEb3duIiwiX3NldFZpc0F0dHIiLCJzbGlkZVVwIiwiaGlkZGVuIiwibm9uSGlkZGVuIiwibm90IiwiYW5jaG9ycyIsImxpbmtzIiwib3BlbiIsInJldHVybnMiLCJfZm5IdW5nYXJpYW5NYXAiLCJuZXdLZXkiLCJodW5nYXJpYW4iLCJtYXAiLCJfaHVuZ2FyaWFuTWFwIiwiX2ZuQ2FtZWxUb0h1bmdhcmlhbiIsInVzZXIiLCJodW5nYXJpYW5LZXkiLCJfZm5MYW5ndWFnZUNvbXBhdCIsImxhbmciLCJEYXRhVGFibGUiLCJvTGFuZ3VhZ2UiLCJ6ZXJvUmVjb3JkcyIsInNaZXJvUmVjb3JkcyIsInNFbXB0eVRhYmxlIiwiX2ZuTWFwIiwic0xvYWRpbmdSZWNvcmRzIiwic0luZm9UaG91c2FuZHMiLCJzVGhvdXNhbmRzIiwiZGVjaW1hbCIsInNEZWNpbWFsIiwiX2FkZE51bWVyaWNTb3J0IiwiX2ZuQ29tcGF0T3B0cyIsIl9mbkNvbXBhdE1hcCIsInNTY3JvbGxYIiwic2VhcmNoQ29scyIsImFvU2VhcmNoQ29scyIsImllbiIsIm1vZGVscyIsIm9TZWFyY2giLCJfZm5Db21wYXRDb2xzIiwiZGF0YVNvcnQiLCJhRGF0YVNvcnQiLCJfZm5Ccm93c2VyRGV0ZWN0IiwiX19icm93c2VyIiwiYnJvd3NlciIsIm92ZXJmbG93Iiwib3V0ZXIiLCJiYXJXaWR0aCIsImJTY3JvbGxPdmVyc2l6ZSIsImJTY3JvbGxiYXJMZWZ0IiwiYkJvdW5kaW5nIiwib0Jyb3dzZXIiLCJvU2Nyb2xsIiwiaUJhcldpZHRoIiwiX2ZuUmVkdWNlIiwidGhhdCIsImluYyIsImlzU2V0IiwiX2ZuQWRkQ29sdW1uIiwib1NldHRpbmdzIiwiblRoIiwib0RlZmF1bHRzIiwiY29sdW1uIiwiaUNvbCIsImFvQ29sdW1ucyIsIm9Db2wiLCJvQ29sdW1uIiwic1RpdGxlIiwibURhdGEiLCJpZHgiLCJhb1ByZVNlYXJjaENvbHMiLCJfZm5Db2x1bW5PcHRpb25zIiwib09wdGlvbnMiLCJvQ2xhc3NlcyIsInRoIiwic1dpZHRoT3JpZyIsIm1EYXRhUHJvcCIsInNUeXBlIiwiX3NNYW51YWxUeXBlIiwic0NsYXNzIiwiaURhdGFTb3J0IiwibURhdGFTcmMiLCJfZm5HZXRPYmplY3REYXRhRm4iLCJtUmVuZGVyIiwiX2JBdHRyU3JjIiwiX3NldHRlciIsImZuR2V0RGF0YSIsInJvd0RhdGEiLCJtZXRhIiwiaW5uZXJEYXRhIiwiZm5TZXREYXRhIiwiX2ZuU2V0T2JqZWN0RGF0YUZuIiwiX3Jvd1JlYWRPYmplY3QiLCJvRmVhdHVyZXMiLCJiU29ydCIsImJTb3J0YWJsZSIsInNTb3J0YWJsZU5vbmUiLCJiQXNjIiwiYXNTb3J0aW5nIiwiYkRlc2MiLCJzU29ydGluZ0NsYXNzIiwic1NvcnRhYmxlQXNjIiwic1NvcnRpbmdDbGFzc0pVSSIsInNTb3J0SlVJQXNjQWxsb3dlZCIsInNTb3J0YWJsZURlc2MiLCJzU29ydEpVSURlc2NBbGxvd2VkIiwic1NvcnRhYmxlIiwic1NvcnRKVUkiLCJfZm5BZGp1c3RDb2x1bW5TaXppbmciLCJiQXV0b1dpZHRoIiwiY29sdW1ucyIsIl9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyIsImlMZW4iLCJzV2lkdGgiLCJzWSIsInNYIiwiX2ZuU2Nyb2xsRHJhdyIsIl9mbkNhbGxiYWNrRmlyZSIsIl9mblZpc2libGVUb0NvbHVtbkluZGV4IiwiaU1hdGNoIiwiYWlWaXMiLCJfZm5HZXRDb2x1bW5zIiwiX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUiLCJpUG9zIiwiX2ZuVmlzYmxlQ29sdW1ucyIsInZpcyIsImNvbCIsImJWaXNpYmxlIiwic1BhcmFtIiwiX2ZuQ29sdW1uVHlwZXMiLCJqZW4iLCJrIiwia2VuIiwiZGV0ZWN0ZWRUeXBlIiwiYW9EYXRhIiwiZXh0IiwiZGV0ZWN0IiwiX2ZuR2V0Q2VsbERhdGEiLCJfZm5BcHBseUNvbHVtbkRlZnMiLCJhb0NvbERlZnMiLCJhb0NvbHMiLCJrTGVuIiwiZGVmIiwiYVRhcmdldHMiLCJ0YXJnZXRzIiwiX2ZuQWRkRGF0YSIsImFEYXRhSW4iLCJuVHIiLCJhblRkcyIsImlSb3ciLCJvRGF0YSIsIm9Sb3ciLCJfYURhdGEiLCJhaURpc3BsYXlNYXN0ZXIiLCJyb3dJZEZuIiwiYUlkcyIsImJEZWZlclJlbmRlciIsIl9mbkNyZWF0ZVRyIiwiX2ZuQWRkVHIiLCJ0cnMiLCJfZm5HZXRSb3dFbGVtZW50cyIsIl9mbk5vZGVUb0RhdGFJbmRleCIsIl9EVF9Sb3dJbmRleCIsIl9mbk5vZGVUb0NvbHVtbkluZGV4IiwiYW5DZWxscyIsInJvd0lkeCIsImNvbElkeCIsImlEcmF3IiwiZGVmYXVsdENvbnRlbnQiLCJzRGVmYXVsdENvbnRlbnQiLCJjZWxsRGF0YSIsImlEcmF3RXJyb3IiLCJfZm5Mb2ciLCJfZm5TZXRDZWxsRGF0YSIsIl9mblNwbGl0T2JqTm90YXRpb24iLCJtU291cmNlIiwiXyIsImZldGNoRGF0YSIsImFycmF5Tm90YXRpb24iLCJmdW5jTm90YXRpb24iLCJpbm5lclNyYyIsIl9fcmVBcnJheSIsIl9fcmVGbiIsInN1YnN0cmluZyIsInNldERhdGEiLCJhTGFzdCIsIl9mbkdldERhdGFNYXN0ZXIiLCJfcGx1Y2siLCJfZm5DbGVhclRhYmxlIiwiYWlEaXNwbGF5IiwiX2ZuRGVsZXRlSW5kZXgiLCJpVGFyZ2V0IiwiaVRhcmdldEluZGV4IiwiX2ZuSW52YWxpZGF0ZSIsImNlbGxXcml0ZSIsImNoaWxkTm9kZXMiLCJfYVNvcnREYXRhIiwiX2FGaWx0ZXJEYXRhIiwiX2ZuUm93QXR0cmlidXRlcyIsInRkcyIsInRkIiwib2JqZWN0UmVhZCIsInNldHRlciIsImNlbGxQcm9jZXNzIiwibmV4dFNpYmxpbmciLCJyb3dOb2RlIiwicm93SWQiLCJuVHJJbiIsIm5UZCIsInNDZWxsVHlwZSIsIl9EVF9DZWxsSW5kZXgiLCJmbkNyZWF0ZWRDZWxsIiwib0luc3RhbmNlIiwiRFRfUm93Q2xhc3MiLCJfX3Jvd2MiLCJfdW5pcXVlIiwiRFRfUm93QXR0ciIsIkRUX1Jvd0RhdGEiLCJfZm5CdWlsZEhlYWQiLCJ0aGVhZCIsIm5USGVhZCIsInRmb290IiwiblRGb290IiwiY3JlYXRlSGVhZGVyIiwiY2xhc3NlcyIsImlUYWJJbmRleCIsInNUYWJsZUlkIiwiX2ZuU29ydEF0dGFjaExpc3RlbmVyIiwiX2ZuUmVuZGVyZXIiLCJfZm5EZXRlY3RIZWFkZXIiLCJhb0hlYWRlciIsInNIZWFkZXJUSCIsInNGb290ZXJUSCIsImFvRm9vdGVyIiwiblRmIiwiX2ZuRHJhd0hlYWQiLCJhb1NvdXJjZSIsImJJbmNsdWRlSGlkZGVuIiwibkxvY2FsVHIiLCJpUm93c3BhbiIsImlDb2xzcGFuIiwiYW9Mb2NhbCIsImFBcHBsaWVkIiwiaUNvbHVtbnMiLCJfZm5EcmF3IiwiYVByZURyYXciLCJfZm5Qcm9jZXNzaW5nRGlzcGxheSIsImFuUm93cyIsImlSb3dDb3VudCIsImFzU3RyaXBlQ2xhc3NlcyIsImlTdHJpcGVzIiwib0xhbmciLCJhb09wZW5Sb3dzIiwiaUluaXREaXNwbGF5U3RhcnQiLCJiU2VydmVyU2lkZSIsIl9mbkRhdGFTb3VyY2UiLCJiRHJhd2luZyIsIl9pRGlzcGxheVN0YXJ0IiwiZm5SZWNvcmRzRGlzcGxheSIsImlEaXNwbGF5U3RhcnQiLCJpRGlzcGxheUVuZCIsImZuRGlzcGxheUVuZCIsImJEZWZlckxvYWRpbmciLCJiRGVzdHJveWluZyIsIl9mbkFqYXhVcGRhdGUiLCJpU3RhcnQiLCJpRW5kIiwiaURhdGFJbmRleCIsIm5Sb3ciLCJzU3RyaXBlIiwiX3NSb3dTdHJpcGUiLCJzWmVybyIsImZuUmVjb3Jkc1RvdGFsIiwiY2xhc3MiLCJ2YWxpZ24iLCJzUm93RW1wdHkiLCJuVEJvZHkiLCJkZXRhY2giLCJiU29ydGVkIiwiYkZpbHRlcmVkIiwiX2ZuUmVEcmF3IiwiaG9sZFBvc2l0aW9uIiwiZmVhdHVyZXMiLCJiRmlsdGVyIiwiX2ZuU29ydCIsIl9mbkZpbHRlckNvbXBsZXRlIiwib1ByZXZpb3VzU2VhcmNoIiwiX2RyYXdIb2xkIiwiX2ZuQWRkT3B0aW9uc0h0bWwiLCJ0YWJsZSIsIm5UYWJsZSIsImhvbGRpbmciLCJzV3JhcHBlciIsInNOb0Zvb3RlciIsIm5Ib2xkaW5nIiwiblRhYmxlV3JhcHBlciIsIm5UYWJsZVJlaW5zZXJ0QmVmb3JlIiwiZmVhdHVyZU5vZGUiLCJjT3B0aW9uIiwibk5ld05vZGUiLCJjTmV4dCIsInNBdHRyIiwiYURvbSIsInNEb20iLCJzSlVJSGVhZGVyIiwic0pVSUZvb3RlciIsImFTcGxpdCIsInN1YnN0ciIsImJQYWdpbmF0ZSIsImJMZW5ndGhDaGFuZ2UiLCJfZm5GZWF0dXJlSHRtbExlbmd0aCIsIl9mbkZlYXR1cmVIdG1sRmlsdGVyIiwiYlByb2Nlc3NpbmciLCJfZm5GZWF0dXJlSHRtbFByb2Nlc3NpbmciLCJfZm5GZWF0dXJlSHRtbFRhYmxlIiwiYkluZm8iLCJfZm5GZWF0dXJlSHRtbEluZm8iLCJfZm5GZWF0dXJlSHRtbFBhZ2luYXRlIiwiZmVhdHVyZSIsImFvRmVhdHVyZXMiLCJjRmVhdHVyZSIsImZuSW5pdCIsImFhbkZlYXR1cmVzIiwicmVwbGFjZVdpdGgiLCJhTGF5b3V0IiwiblRoZWFkIiwibkNlbGwiLCJpQ29sU2hpZnRlZCIsImlDb2x1bW4iLCJiVW5pcXVlIiwiblRycyIsImZuU2hpZnRDb2wiLCJfZm5HZXRVbmlxdWVUaHMiLCJuSGVhZGVyIiwiYVJldHVybiIsImJTb3J0Q2VsbHNUb3AiLCJfZm5CdWlsZEFqYXgiLCJ0bXAiLCJyYnJhY2tldCIsImFqYXhEYXRhIiwiYWpheCIsImpxWEhSIiwibmV3RGF0YSIsImJhc2VBamF4Iiwic3VjY2VzcyIsInNFcnJvciIsImRhdGFUeXBlIiwic1NlcnZlck1ldGhvZCIsInhociIsInRocm93biIsInJldCIsIm9BamF4RGF0YSIsImZuU2VydmVyRGF0YSIsInNBamF4U291cmNlIiwiYkFqYXhEYXRhR2V0IiwiX2ZuQWpheFBhcmFtZXRlcnMiLCJfZm5BamF4VXBkYXRlRHJhdyIsImRhdGFQcm9wIiwiY29sdW1uU2VhcmNoIiwiY29sdW1uQ291bnQiLCJwcmVTZWFyY2giLCJwcmVDb2xTZWFyY2giLCJfZm5Tb3J0RmxhdHRlbiIsImRpc3BsYXlTdGFydCIsImRpc3BsYXlMZW5ndGgiLCJfaURpc3BsYXlMZW5ndGgiLCJwYXJhbSIsIm9yZGVyIiwic2VhcmNoIiwic1NlYXJjaCIsInJlZ2V4IiwiYlJlZ2V4Iiwic05hbWUiLCJzZWFyY2hhYmxlIiwiYlNlYXJjaGFibGUiLCJvcmRlcmFibGUiLCJkaXIiLCJsZWdhY3kiLCJjb21wYXQiLCJvbGQiLCJtb2Rlcm4iLCJfZm5BamF4RGF0YVNyYyIsInJlY29yZHNUb3RhbCIsInJlY29yZHNGaWx0ZXJlZCIsIl9pUmVjb3Jkc1RvdGFsIiwiX2lSZWNvcmRzRGlzcGxheSIsIl9iSW5pdENvbXBsZXRlIiwiX2ZuSW5pdENvbXBsZXRlIiwiZGF0YVNyYyIsInNBamF4RGF0YVByb3AiLCJhYURhdGEiLCJ0YWJsZUlkIiwibGFuZ3VhZ2UiLCJwcmV2aW91c1NlYXJjaCIsInNGaWx0ZXJJbnB1dCIsImYiLCJzRmlsdGVyIiwic2VhcmNoRm4iLCJiU21hcnQiLCJiQ2FzZUluc2Vuc2l0aXZlIiwic2VhcmNoRGVsYXkiLCJqcUZpbHRlciIsInNTZWFyY2hQbGFjZWhvbGRlciIsIl9mblRocm90dGxlIiwib0lucHV0IiwiaUZvcmNlIiwib1ByZXZTZWFyY2giLCJhb1ByZXZTZWFyY2giLCJmblNhdmVGaWx0ZXIiLCJvRmlsdGVyIiwiZm5SZWdleCIsImJFc2NhcGVSZWdleCIsIl9mbkZpbHRlciIsIl9mbkZpbHRlckNvbHVtbiIsIl9mbkZpbHRlckN1c3RvbSIsImZpbHRlcnMiLCJkaXNwbGF5Um93cyIsInJvd3MiLCJzZWFyY2hTdHIiLCJzbWFydCIsImNhc2VJbnNlbnNpdGl2ZSIsInJwU2VhcmNoIiwiX2ZuRmlsdGVyQ3JlYXRlU2VhcmNoIiwiaW52YWxpZGF0ZWQiLCJwcmV2U2VhcmNoIiwiZGlzcGxheU1hc3RlciIsIl9mbkZpbHRlckRhdGEiLCJfc0ZpbHRlclJvdyIsIl9mbkVzY2FwZVJlZ2V4Iiwid29yZCIsIm0iLCJmaWx0ZXJEYXRhIiwiZm9tYXR0ZXJzIiwid2FzSW52YWxpZGF0ZWQiLCJfX2ZpbHRlcl9kaXYiLCJfX2ZpbHRlcl9kaXZfdGV4dENvbnRlbnQiLCJfZm5TZWFyY2hUb0NhbWVsIiwiX2ZuU2VhcmNoVG9IdW5nIiwidGlkIiwic0luZm8iLCJhb0RyYXdDYWxsYmFjayIsIl9mblVwZGF0ZUluZm8iLCJ0b3RhbCIsInNJbmZvRW1wdHkiLCJzSW5mb0ZpbHRlcmVkIiwic0luZm9Qb3N0Rml4IiwiX2ZuSW5mb01hY3JvcyIsImZuSW5mb0NhbGxiYWNrIiwiZm9ybWF0dGVyIiwiZm5Gb3JtYXROdW1iZXIiLCJfZm5Jbml0aWFsaXNlIiwiaUFqYXhTdGFydCIsImRlZmVyTG9hZGluZyIsImJJbml0aWFsaXNlZCIsIl9mblN0cmluZ1RvQ3NzIiwiYURhdGEiLCJvSW5pdCIsIl9mbkxlbmd0aENoYW5nZSIsIl9mbkxlbmd0aE92ZXJmbG93IiwiYUxlbmd0aE1lbnUiLCJkMiIsImxlbmd0aHMiLCJhcmlhLWNvbnRyb2xzIiwic0xlbmd0aFNlbGVjdCIsIk9wdGlvbiIsInNMZW5ndGgiLCJzTGVuZ3RoTWVudSIsIm91dGVySFRNTCIsInNQYWdpbmF0aW9uVHlwZSIsInBsdWdpbiIsInBhZ2VyIiwicmVkcmF3Iiwic1BhZ2luZyIsInAiLCJ2aXNSZWNvcmRzIiwicGFnZSIsInBhZ2VzIiwiYnV0dG9ucyIsImZuVXBkYXRlIiwiX2ZuUGFnZUNoYW5nZSIsImFjdGlvbiIsInJlY29yZHMiLCJzUHJvY2Vzc2luZyIsImNhcHRpb24iLCJjYXB0aW9uU2lkZSIsIl9jYXB0aW9uU2lkZSIsImhlYWRlckNsb25lIiwiY2xvbmVOb2RlIiwiZm9vdGVyQ2xvbmUiLCJmb290ZXIiLCJfZGl2Iiwic2Nyb2xsZXIiLCJzU2Nyb2xsV3JhcHBlciIsInNTY3JvbGxIZWFkIiwiYm9yZGVyIiwic1Njcm9sbEhlYWRJbm5lciIsImJveC1zaXppbmciLCJzWElubmVyIiwic1Njcm9sbEJvZHkiLCJzU2Nyb2xsRm9vdCIsInNTY3JvbGxGb290SW5uZXIiLCJzY3JvbGxIZWFkIiwic2Nyb2xsQm9keSIsInNjcm9sbEZvb3QiLCJiQ29sbGFwc2UiLCJuU2Nyb2xsSGVhZCIsIm5TY3JvbGxCb2R5IiwiblNjcm9sbEZvb3QiLCJoZWFkZXJUcmdFbHMiLCJmb290ZXJUcmdFbHMiLCJoZWFkZXJTcmNFbHMiLCJmb290ZXJTcmNFbHMiLCJoZWFkZXJDb3B5IiwiZm9vdGVyQ29weSIsImNvcnJlY3Rpb24iLCJzYW5pdHlXaWR0aCIsInNjcm9sbFhJbm5lciIsImRpdkhlYWRlciIsImRpdkhlYWRlclN0eWxlIiwiZGl2SGVhZGVySW5uZXIiLCJkaXZIZWFkZXJJbm5lclN0eWxlIiwiZGl2SGVhZGVyVGFibGUiLCJkaXZCb2R5RWwiLCJkaXZCb2R5IiwiZGl2Qm9keVN0eWxlIiwiZGl2Rm9vdGVyIiwiZGl2Rm9vdGVySW5uZXIiLCJkaXZGb290ZXJUYWJsZSIsImhlYWRlciIsInRhYmxlRWwiLCJ0YWJsZVN0eWxlIiwiaWU2NyIsImR0SGVhZGVyQ2VsbHMiLCJoZWFkZXJXaWR0aHMiLCJmb290ZXJXaWR0aHMiLCJoZWFkZXJDb250ZW50IiwiZm9vdGVyQ29udGVudCIsInplcm9PdXQiLCJuU2l6ZXIiLCJzY3JvbGxCYXJWaXMiLCJzY3JvbGxIZWlnaHQiLCJfZm5BcHBseVRvQ2hpbGRyZW4iLCJuVG9TaXplIiwiaU91dGVyV2lkdGgiLCJiU2Nyb2xsaW5nIiwiYW4xIiwiYW4yIiwibk5vZGUxIiwibk5vZGUyIiwiY29sdW1uSWR4IiwidmlzaWJsZUNvbHVtbnMiLCJoZWFkZXJDZWxscyIsInRhYmxlV2lkdGhBdHRyIiwidGFibGVDb250YWluZXIiLCJ1c2VySW5wdXRzIiwiX2ZuQ29udmVydFRvV2lkdGgiLCJ0bXBUYWJsZSIsIm1hcmdpbiIsIl9mbkdldFdpZGVzdE5vZGUiLCJzQ29udGVudFBhZGRpbmciLCJib3VuZGluZyIsIl9yZXN6RXZ0Iiwic0luc3RhbmNlIiwiX2ZuR2V0TWF4TGVuU3RyaW5nIiwibWF4SWR4IiwiX19yZV9odG1sX3JlbW92ZSIsInNyY0NvbCIsImFTb3J0IiwiZml4ZWQiLCJhYVNvcnRpbmdGaXhlZCIsImZpeGVkT2JqIiwibmVzdGVkU29ydCIsInByZSIsImFhU29ydGluZyIsInBvc3QiLCJfaWR4Iiwic29ydENvbCIsImFpT3JpZyIsIm9FeHRTb3J0IiwiZm9ybWF0dGVycyIsIl9mblNvcnREYXRhIiwiZGF0YUEiLCJkYXRhQiIsIl9mblNvcnRBcmlhIiwibmV4dFNvcnQiLCJvQXJpYSIsInNTb3J0QXNjZW5kaW5nIiwic1NvcnREZXNjZW5kaW5nIiwiX2ZuU29ydExpc3RlbmVyIiwibmV4dFNvcnRJZHgiLCJzb3J0aW5nIiwiYlNvcnRNdWx0aSIsInNvcnRJZHgiLCJhdHRhY2hUbyIsIl9mbkJpbmRBY3Rpb24iLCJzaGlmdEtleSIsIl9mblNvcnRpbmdDbGFzc2VzIiwib2xkU29ydCIsImFMYXN0U29ydCIsInNvcnRDbGFzcyIsInNTb3J0Q29sdW1uIiwiYlNvcnRDbGFzc2VzIiwiY3VzdG9tRGF0YSIsImN1c3RvbVNvcnQiLCJzU29ydERhdGFUeXBlIiwiX2ZuU2F2ZVN0YXRlIiwiYlN0YXRlU2F2ZSIsInZpc2libGUiLCJvU2F2ZWRTdGF0ZSIsImZuU3RhdGVTYXZlQ2FsbGJhY2siLCJfZm5Mb2FkU3RhdGUiLCJmblN0YXRlTG9hZENhbGxiYWNrIiwiYWJTdGF0ZUxvYWQiLCJpU3RhdGVEdXJhdGlvbiIsIm9Mb2FkZWRTdGF0ZSIsIl9mblNldHRpbmdzRnJvbU5vZGUiLCJsZXZlbCIsIm1zZyIsInRuIiwic0Vyck1vZGUiLCJlcnJNb2RlIiwiYWxlcnQiLCJtYXBwZWROYW1lIiwiX2ZuRXh0ZW5kIiwiZXh0ZW5kZXIiLCJicmVha1JlZnMiLCJfZm5DYWxsYmFja1JlZyIsInNTdG9yZSIsImNhbGxiYWNrQXJyIiwicmVuZGVyZXIiLCJob3N0IiwiX251bWJlcnMiLCJudW1iZXJzIiwiZXh0UGFnaW5hdGlvbiIsIm51bWJlcnNfbGVuZ3RoIiwiaGFsZiIsIl9yYW5nZSIsIkRUX2VsIiwiZGVjaW1hbFBsYWNlIiwiX19udW1lcmljUmVwbGFjZSIsIm51bS1mbXQiLCJfcmVfZm9ybWF0dGVkX251bWVyaWMiLCJodG1sLW51bSIsIl9yZV9odG1sIiwiaHRtbC1udW0tZm10IiwiX2V4dCIsIl9mbkV4dGVybkFwaUZ1bmMiLCJpQXBpSW5kZXgiLCJpbnRlcm5hbCIsIl9BcGkiLCJfYXBpX3JlZ2lzdGVyIiwiX2FwaV9yZWdpc3RlclBsdXJhbCIsInNTZWxlY3RvciIsIm9PcHRzIiwiYXBpIiwidHJhZGl0aW9uYWwiLCJmbkFkZERhdGEiLCJmbGF0dGVuIiwiZm5BZGp1c3RDb2x1bW5TaXppbmciLCJiUmVkcmF3IiwiYWRqdXN0IiwiZm5DbGVhclRhYmxlIiwiZm5DbG9zZSIsImZuRGVsZXRlUm93IiwiZm5EZXN0cm95IiwiZm5EcmF3IiwiZm5GaWx0ZXIiLCJzSW5wdXQiLCJiU2hvd0dsb2JhbCIsImZuR2V0Tm9kZXMiLCJmbkdldFBvc2l0aW9uIiwiY29sdW1uVmlzaWJsZSIsImZuSXNPcGVuIiwiaXNTaG93biIsImZuT3BlbiIsIm1IdG1sIiwiZm5QYWdlQ2hhbmdlIiwibUFjdGlvbiIsImZuU2V0Q29sdW1uVmlzIiwiYlNob3ciLCJmblNldHRpbmdzIiwiZm5Tb3J0IiwiYWFTb3J0IiwiZm5Tb3J0TGlzdGVuZXIiLCJuTm9kZSIsImZuQ2FsbGJhY2siLCJtUm93IiwiYkFjdGlvbiIsImZuVmVyc2lvbkNoZWNrIiwiX3RoYXQiLCJlbXB0eUluaXQiLCJvQXBpIiwic0lkIiwiYkluaXRIYW5kZWRPZmYiLCJhbGxTZXR0aW5ncyIsImJSZXRyaWV2ZSIsImJEZXN0cm95Iiwic0Rlc3Ryb3lXaWR0aCIsImlEaXNwbGF5TGVuZ3RoIiwiZm5EcmF3Q2FsbGJhY2siLCJmblNlcnZlclBhcmFtcyIsImZuU3RhdGVTYXZlUGFyYW1zIiwiZm5TdGF0ZUxvYWRQYXJhbXMiLCJmblN0YXRlTG9hZGVkIiwiZm5Sb3dDYWxsYmFjayIsImZuQ3JlYXRlZFJvdyIsImZuSGVhZGVyQ2FsbGJhY2siLCJmbkZvb3RlckNhbGxiYWNrIiwiZm5Jbml0Q29tcGxldGUiLCJmblByZURyYXdDYWxsYmFjayIsImJKUXVlcnlVSSIsIm9KVUlDbGFzc2VzIiwic1RhYmxlIiwiaURlZmVyTG9hZGluZyIsInNVcmwiLCJzU3RyaXBlT2RkIiwic1N0cmlwZUV2ZW4iLCJzdHJpcGVDbGFzc2VzIiwicm93T25lIiwiYXNEZXN0cm95U3RyaXBlcyIsImFvQ29sdW1uc0luaXQiLCJhblRocyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYW9Db2x1bW5EZWZzIiwib0RlZiIsInNvcnRlZENvbHVtbnMiLCJjYXB0aW9ucyIsInRib2R5IiwiX3JlX2RpYyIsIl9yZV9uZXdfbGluZXMiLCJfcmVfZGF0ZV9zdGFydCIsIl9yZV9kYXRlX2VuZCIsIl9yZV9lc2NhcGVfcmVnZXgiLCJfZW1wdHkiLCJfaW50VmFsIiwiaW50ZWdlciIsImlzRmluaXRlIiwiX251bVRvRGVjaW1hbCIsImRlY2ltYWxQb2ludCIsIl9pc051bWJlciIsImZvcm1hdHRlZCIsInN0clR5cGUiLCJfaXNIdG1sIiwiX2h0bWxOdW1lcmljIiwiX3N0cmlwSHRtbCIsInByb3AyIiwiX3BsdWNrX29yZGVyIiwiX3JlbW92ZUVtcHR5IiwiYWdhaW4iLCJ1dGlsIiwidGhyb3R0bGUiLCJmcmVxIiwiZnJlcXVlbmN5IiwiZXNjYXBlUmVnZXgiLCJrbmV3IiwiX19hcGlTdHJ1Y3QiLCJfX2FycmF5UHJvdG8iLCJfdG9TZXR0aW5ncyIsIm1peGVkIiwianEiLCJ0YWJsZXMiLCJjdHhTZXR0aW5ncyIsIkFwaSIsImFueSIsImN0eCIsImFsd2F5c05ldyIsImFwaUluc3QiLCJfc2VsZWN0b3Jfcm93X2luZGV4ZXMiLCJhcGlTZWxlY3RvciIsImxhc3RJbmRleE9mIiwicGx1Y2siLCJwb3AiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsInRvJCIsInRvSlF1ZXJ5Iiwic2NvcGUiLCJfX2R0X3dyYXBwZXIiLCJzdHJ1Y3QiLCJtZXRob2RTY29waW5nIiwic3RydWMiLCJtZXRob2RFeHQiLCJwcm9wRXh0IiwicmVnaXN0ZXIiLCJoZWlyIiwicmVnaXN0ZXJQbHVyYWwiLCJwbHVyYWxOYW1lIiwic2luZ3VsYXJOYW1lIiwiX190YWJsZV9zZWxlY3RvciIsInBhZ2luZyIsImluZm8iLCJyZWNvcmRzRGlzcGxheSIsInNlcnZlclNpZGUiLCJfX3JlbG9hZCIsIm9uZSIsImFib3J0IiwicmVzZXRQYWdpbmciLCJfc2VsZWN0b3JfcnVuIiwic2VsZWN0Rm4iLCJyZXMiLCJzZWxlY3RvclR5cGUiLCJfc2VsZWN0b3Jfb3B0cyIsIl9zZWxlY3Rvcl9maXJzdCIsImluc3QiLCJkaXNwbGF5RmlsdGVyZWQiLCJfX3Jvd19zZWxlY3RvciIsInNlbCIsInNlbEludCIsInJvd09iaiIsImhhc2giLCJ0aGF0SWR4IiwibG9vcFJvdyIsImxvb3BDZWxscyIsIm5ld1Jvd3MiLCJtb2RSb3dzIiwiX19kZXRhaWxzX2FkZCIsImtsYXNzIiwiYWRkUm93IiwiY3JlYXRlZCIsIl9kZXRhaWxzIiwiX2RldGFpbHNTaG93IiwiaW5zZXJ0QWZ0ZXIiLCJfX2RldGFpbHNfcmVtb3ZlIiwiX19kZXRhaWxzX2Rpc3BsYXkiLCJfX2RldGFpbHNfZXZlbnRzIiwiZHJhd0V2ZW50IiwiY29sdmlzRXZlbnQiLCJkZXN0cm95RXZlbnQiLCJfZW1wIiwiX2NoaWxkX29iaiIsIl9jaGlsZF9tdGgiLCJfX3JlX2NvbHVtbl9zZWxlY3RvciIsIl9fY29sdW1uRGF0YSIsInIxIiwicjIiLCJfX2NvbHVtbl9zZWxlY3RvciIsIm5hbWVzIiwidmlzQ29sdW1ucyIsImpxUmVzdWx0IiwiX19zZXRDb2x1bW5WaXMiLCJjYWxjIiwiX19jZWxsX3NlbGVjdG9yIiwiYWxsQ2VsbHMiLCJmblNlbGVjdG9yIiwicm93U2VsZWN0b3IiLCJjb2x1bW5TZWxlY3RvciIsImNhc2VJbnNlbiIsInZlcnNpb25DaGVjayIsInZlcnNpb24iLCJpVGhpcyIsImlUaGF0IiwiYVRoaXMiLCJhVGhhdCIsImlzRGF0YVRhYmxlIiwiZm5Jc0RhdGFUYWJsZSIsImZvb3QiLCJmblRhYmxlcyIsImNhbWVsVG9IdW5nYXJpYW4iLCJqcVJvd3MiLCJvcmlnIiwianFUYWJsZSIsImpxVGJvZHkiLCJqcVdyYXBwZXIiLCJiSlVJIiwic1NvcnRJY29uIiwid3JhcHBlciIsInNTb3J0SlVJV3JhcHBlciIsInJlbW92ZWRNZXRob2QiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJhcmc0IiwidG9rZW4iLCJwbHVyYWwiLCJyZXNvbHZlZCIsImJTY3JvbGxDb2xsYXBzZSIsInRvRm9ybWF0IiwibG9jYXRpb24iLCJwYXRobmFtZSIsIm9QYWdpbmF0ZSIsInNGaXJzdCIsInNMYXN0Iiwic05leHQiLCJzUHJldmlvdXMiLCJzU2Nyb2xsWElubmVyIiwic1Njcm9sbFkiLCJhb1Jvd0NhbGxiYWNrIiwiYW9IZWFkZXJDYWxsYmFjayIsImFvRm9vdGVyQ2FsbGJhY2siLCJhb1Jvd0NyZWF0ZWRDYWxsYmFjayIsImFvUHJlRHJhd0NhbGxiYWNrIiwiYW9Jbml0Q29tcGxldGUiLCJhb1N0YXRlU2F2ZVBhcmFtcyIsImFvU3RhdGVMb2FkUGFyYW1zIiwiYW9TdGF0ZUxvYWRlZCIsImFvU3RhdGVTYXZlIiwiYW9TdGF0ZUxvYWQiLCJhb1NlcnZlclBhcmFtcyIsImFvRGVzdHJveUNhbGxiYWNrIiwicGFnaW5hdGUiLCJvUGx1Z2lucyIsImJ1aWxkZXIiLCJwYWdlQnV0dG9uIiwic1ZlcnNpb24iLCJhZm5GaWx0ZXJpbmciLCJhVHlwZXMiLCJvZm5TZWFyY2giLCJvU29ydCIsImFmblNvcnREYXRhIiwib1N0ZENsYXNzZXMiLCJvUGFnaW5hdGlvbiIsInNQYWdlQnV0dG9uIiwic1BhZ2VCdXR0b25BY3RpdmUiLCJzUGFnZUJ1dHRvbkRpc2FibGVkIiwic1NvcnRBc2MiLCJzU29ydERlc2MiLCJzU29ydEpVSUFzYyIsInNTb3J0SlVJRGVzYyIsIl9zdGF0ZURlZmF1bHQiLCJfc29ydEljb24iLCJfaGVhZGVyRm9vdGVyIiwic2ltcGxlIiwiZnVsbCIsInNpbXBsZV9udW1iZXJzIiwiZnVsbF9udW1iZXJzIiwiYnRuRGlzcGxheSIsImJ0bkNsYXNzIiwiYWN0aXZlRWwiLCJhcmlhIiwiY291bnRlciIsImF0dGFjaCIsImNsaWNrSGFuZGxlciIsImFyaWEtbGFiZWwiLCJkYXRhLWR0LWlkeCIsInRhYmluZGV4IiwiZW1wdHkiLCJwYXJzZWQiLCJzdHJpbmciLCJyZTEiLCJyZTIiLCJkYXRlLXByZSIsImh0bWwtcHJlIiwic3RyaW5nLXByZSIsInN0cmluZy1hc2MiLCJzdHJpbmctZGVzYyIsImpxdWVyeXVpIiwiX19odG1sRXNjYXBlRW50aXRpZXMiLCJyZW5kZXIiLCJudW1iZXIiLCJ0aG91c2FuZHMiLCJwcmVjaXNpb24iLCJwb3N0Zml4IiwibmVnYXRpdmUiLCJmbG8iLCJpbnRQYXJ0IiwiZmxvYXRQYXJ0IiwidG9GaXhlZCIsIl9mbkNhbGN1bGF0ZUVuZCIsImRhdGFUYWJsZVNldHRpbmdzIiwiZGF0YVRhYmxlRXh0IiwiUzIiLCJzZWxlY3QyIiwicmVxdWlyZWpzIiwidW5kZWYiLCJoYXNQcm9wIiwiaGFzT3duIiwibm9ybWFsaXplIiwiYmFzZU5hbWUiLCJuYW1lUGFydHMiLCJuYW1lU2VnbWVudCIsIm1hcFZhbHVlIiwiZm91bmRNYXAiLCJmb3VuZEkiLCJmb3VuZFN0YXJNYXAiLCJzdGFySSIsInBhcnQiLCJiYXNlUGFydHMiLCJzdGFyTWFwIiwibm9kZUlkQ29tcGF0IiwianNTdWZmaXhSZWdFeHAiLCJtYWtlUmVxdWlyZSIsInJlbE5hbWUiLCJmb3JjZVN5bmMiLCJhcHMiLCJyZXEiLCJtYWtlTm9ybWFsaXplIiwibWFrZUxvYWQiLCJkZXBOYW1lIiwiZGVmaW5lZCIsImNhbGxEZXAiLCJ3YWl0aW5nIiwiZGVmaW5pbmciLCJtYWluIiwic3BsaXRQcmVmaXgiLCJtYWtlQ29uZmlnIiwibWFrZU1hcCIsInByIiwidXJpIiwiZGVwcyIsImNqc01vZHVsZSIsInVzaW5nRXhwb3J0cyIsImNhbGxiYWNrVHlwZSIsImFsdCIsImNmZyIsIl9kZWZpbmVkIiwiXyQiLCJnZXRNZXRob2RzIiwidGhlQ2xhc3MiLCJtZXRob2RzIiwiVXRpbHMiLCJFeHRlbmQiLCJDaGlsZENsYXNzIiwiU3VwZXJDbGFzcyIsIkJhc2VDb25zdHJ1Y3RvciIsIl9faGFzUHJvcCIsIl9fc3VwZXJfXyIsIkRlY29yYXRlIiwiRGVjb3JhdG9yQ2xhc3MiLCJEZWNvcmF0ZWRDbGFzcyIsImFyZ0NvdW50IiwiY2FsbGVkQ29uc3RydWN0b3IiLCJjdHIiLCJkZWNvcmF0ZWRNZXRob2RzIiwic3VwZXJNZXRob2RzIiwiZGlzcGxheU5hbWUiLCJzdXBlck1ldGhvZCIsImNhbGxlZE1ldGhvZCIsIm9yaWdpbmFsTWV0aG9kIiwiZGVjb3JhdGVkTWV0aG9kIiwiT2JzZXJ2YWJsZSIsInBhcmFtcyIsIl90eXBlIiwiaW52b2tlIiwiZ2VuZXJhdGVDaGFycyIsImNoYXJzIiwicmFuZG9tQ2hhciIsImZ1bmMiLCJfY29udmVydERhdGEiLCJvcmlnaW5hbEtleSIsImRhdGFMZXZlbCIsImhhc1Njcm9sbCIsIiRlbCIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInNjcm9sbFdpZHRoIiwiZXNjYXBlTWFya3VwIiwibWFya3VwIiwicmVwbGFjZU1hcCIsIlxcIiwiJiIsIjwiLCI+IiwiXCIiLCInIiwiLyIsImFwcGVuZE1hbnkiLCIkbm9kZXMiLCJqcXVlcnkiLCIkanFOb2RlcyIsIlJlc3VsdHMiLCJkYXRhQWRhcHRlciIsIiRyZXN1bHRzIiwiZGlzcGxheU1lc3NhZ2UiLCJoaWRlTG9hZGluZyIsIiRtZXNzYWdlIiwiaGlkZU1lc3NhZ2VzIiwiJG9wdGlvbnMiLCIkb3B0aW9uIiwiJGRyb3Bkb3duIiwiJHJlc3VsdHNDb250YWluZXIiLCJoaWdobGlnaHRGaXJzdEl0ZW0iLCIkc2VsZWN0ZWQiLCJlbnN1cmVIaWdobGlnaHRWaXNpYmxlIiwic2V0Q2xhc3NlcyIsInNlbGVjdGVkIiwic2VsZWN0ZWRJZHMiLCJzaG93TG9hZGluZyIsImxvYWRpbmdNb3JlIiwibG9hZGluZyIsIiRsb2FkaW5nIiwiYXR0cnMiLCJyb2xlIiwiYXJpYS1zZWxlY3RlZCIsIl9yZXN1bHRJZCIsInRpdGxlIiwidGVtcGxhdGUiLCIkY2hpbGRyZW4iLCIkY2hpbGQiLCIkY2hpbGRyZW5Db250YWluZXIiLCIkY29udGFpbmVyIiwiaXNPcGVuIiwiJGhpZ2hsaWdodGVkIiwiZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzIiwiY3VycmVudEluZGV4IiwibmV4dEluZGV4IiwiJG5leHQiLCJjdXJyZW50T2Zmc2V0IiwibmV4dFRvcCIsIm5leHRPZmZzZXQiLCJuZXh0Qm90dG9tIiwibW91c2V3aGVlbCIsImlzQXRUb3AiLCJpc0F0Qm90dG9tIiwic3RvcFByb3BhZ2F0aW9uIiwiS0VZUyIsIkJBQ0tTUEFDRSIsIlRBQiIsIkVOVEVSIiwiU0hJRlQiLCJDVFJMIiwiQUxUIiwiRVNDIiwiU1BBQ0UiLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiRU5EIiwiSE9NRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsIkRFTEVURSIsIkJhc2VTZWxlY3Rpb24iLCIkc2VsZWN0aW9uIiwiX3RhYmluZGV4IiwicmVzdWx0c0lkIiwiX2hhbmRsZUJsdXIiLCJfYXR0YWNoQ2xvc2VIYW5kbGVyIiwiX2RldGFjaENsb3NlSGFuZGxlciIsIiR0YXJnZXQiLCIkc2VsZWN0IiwiJGFsbCIsIiRzZWxlY3Rpb25Db250YWluZXIiLCJTaW5nbGVTZWxlY3Rpb24iLCJzZWxlY3Rpb25Db250YWluZXIiLCJzZWxlY3Rpb24iLCIkcmVuZGVyZWQiLCJNdWx0aXBsZVNlbGVjdGlvbiIsIiRyZW1vdmUiLCIkc2VsZWN0aW9ucyIsIlBsYWNlaG9sZGVyIiwiZGVjb3JhdGVkIiwicGxhY2Vob2xkZXIiLCJub3JtYWxpemVQbGFjZWhvbGRlciIsImNyZWF0ZVBsYWNlaG9sZGVyIiwiJHBsYWNlaG9sZGVyIiwic2luZ2xlUGxhY2Vob2xkZXIiLCJtdWx0aXBsZVNlbGVjdGlvbnMiLCJBbGxvd0NsZWFyIiwiX2hhbmRsZUNsZWFyIiwiX2hhbmRsZUtleWJvYXJkQ2xlYXIiLCIkY2xlYXIiLCJ1bnNlbGVjdERhdGEiLCJTZWFyY2giLCIkc2VhcmNoIiwiJHNlYXJjaENvbnRhaW5lciIsIl90cmFuc2ZlclRhYkluZGV4IiwiX2tleVVwUHJldmVudGVkIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiJHByZXZpb3VzQ2hvaWNlIiwic2VhcmNoUmVtb3ZlQ2hvaWNlIiwibXNpZSIsImRvY3VtZW50TW9kZSIsImRpc2FibGVJbnB1dEV2ZW50cyIsImhhbmRsZVNlYXJjaCIsInNlYXJjaEhhZEZvY3VzIiwicmVzaXplU2VhcmNoIiwidGVybSIsIm1pbmltdW1XaWR0aCIsIkV2ZW50UmVsYXkiLCJyZWxheUV2ZW50cyIsInByZXZlbnRhYmxlRXZlbnRzIiwiVHJhbnNsYXRpb24iLCJkaWN0IiwidHJhbnNsYXRpb24iLCJfY2FjaGUiLCJsb2FkUGF0aCIsInRyYW5zbGF0aW9ucyIsImRpYWNyaXRpY3MiLCLikrYiLCLvvKEiLCLDgCIsIsOBIiwiw4IiLCLhuqYiLCLhuqQiLCLhuqoiLCLhuqgiLCLDgyIsIsSAIiwixIIiLCLhurAiLCLhuq4iLCLhurQiLCLhurIiLCLIpiIsIsegIiwiw4QiLCLHniIsIuG6oiIsIsOFIiwix7oiLCLHjSIsIsiAIiwiyIIiLCLhuqAiLCLhuqwiLCLhurYiLCLhuIAiLCLEhCIsIsi6Iiwi4rGvIiwi6pyyIiwiw4YiLCLHvCIsIseiIiwi6py0Iiwi6py2Iiwi6py4Iiwi6py6Iiwi6py8Iiwi4pK3Iiwi77yiIiwi4biCIiwi4biEIiwi4biGIiwiyYMiLCLGgiIsIsaBIiwi4pK4Iiwi77yjIiwixIYiLCLEiCIsIsSKIiwixIwiLCLDhyIsIuG4iCIsIsaHIiwiyLsiLCLqnL4iLCLikrkiLCLvvKQiLCLhuIoiLCLEjiIsIuG4jCIsIuG4kCIsIuG4kiIsIuG4jiIsIsSQIiwixosiLCLGiiIsIsaJIiwi6p25Iiwix7EiLCLHhCIsIseyIiwix4UiLCLikroiLCLvvKUiLCLDiCIsIsOJIiwiw4oiLCLhu4AiLCLhur4iLCLhu4QiLCLhu4IiLCLhurwiLCLEkiIsIuG4lCIsIuG4liIsIsSUIiwixJYiLCLDiyIsIuG6uiIsIsSaIiwiyIQiLCLIhiIsIuG6uCIsIuG7hiIsIsioIiwi4bicIiwixJgiLCLhuJgiLCLhuJoiLCLGkCIsIsaOIiwi4pK7Iiwi77ymIiwi4bieIiwixpEiLCLqnbsiLCLikrwiLCLvvKciLCLHtCIsIsScIiwi4bigIiwixJ4iLCLEoCIsIsemIiwixKIiLCLHpCIsIsaTIiwi6p6gIiwi6p29Iiwi6p2+Iiwi4pK9Iiwi77yoIiwixKQiLCLhuKIiLCLhuKYiLCLIniIsIuG4pCIsIuG4qCIsIuG4qiIsIsSmIiwi4rGnIiwi4rG1Iiwi6p6NIiwi4pK+Iiwi77ypIiwiw4wiLCLDjSIsIsOOIiwixKgiLCLEqiIsIsSsIiwixLAiLCLDjyIsIuG4riIsIuG7iCIsIsePIiwiyIgiLCLIiiIsIuG7iiIsIsSuIiwi4bisIiwixpciLCLikr8iLCLvvKoiLCLEtCIsIsmIIiwi4pOAIiwi77yrIiwi4biwIiwix6giLCLhuLIiLCLEtiIsIuG4tCIsIsaYIiwi4rGpIiwi6p2AIiwi6p2CIiwi6p2EIiwi6p6iIiwi4pOBIiwi77ysIiwixL8iLCLEuSIsIsS9Iiwi4bi2Iiwi4bi4IiwixLsiLCLhuLwiLCLhuLoiLCLFgSIsIsi9Iiwi4rGiIiwi4rGgIiwi6p2IIiwi6p2GIiwi6p6AIiwix4ciLCLHiCIsIuKTgiIsIu+8rSIsIuG4viIsIuG5gCIsIuG5giIsIuKxriIsIsacIiwi4pODIiwi77yuIiwix7giLCLFgyIsIsORIiwi4bmEIiwixYciLCLhuYYiLCLFhSIsIuG5iiIsIuG5iCIsIsigIiwixp0iLCLqnpAiLCLqnqQiLCLHiiIsIseLIiwi4pOEIiwi77yvIiwiw5IiLCLDkyIsIsOUIiwi4buSIiwi4buQIiwi4buWIiwi4buUIiwiw5UiLCLhuYwiLCLIrCIsIuG5jiIsIsWMIiwi4bmQIiwi4bmSIiwixY4iLCLIriIsIsiwIiwiw5YiLCLIqiIsIuG7jiIsIsWQIiwix5EiLCLIjCIsIsiOIiwixqAiLCLhu5wiLCLhu5oiLCLhu6AiLCLhu54iLCLhu6IiLCLhu4wiLCLhu5giLCLHqiIsIsesIiwiw5giLCLHviIsIsaGIiwixp8iLCLqnYoiLCLqnYwiLCLGoiIsIuqdjiIsIsiiIiwi4pOFIiwi77ywIiwi4bmUIiwi4bmWIiwixqQiLCLisaMiLCLqnZAiLCLqnZIiLCLqnZQiLCLik4YiLCLvvLEiLCLqnZYiLCLqnZgiLCLJiiIsIuKThyIsIu+8siIsIsWUIiwi4bmYIiwixZgiLCLIkCIsIsiSIiwi4bmaIiwi4bmcIiwixZYiLCLhuZ4iLCLJjCIsIuKxpCIsIuqdmiIsIuqepiIsIuqegiIsIuKTiCIsIu+8syIsIuG6niIsIsWaIiwi4bmkIiwixZwiLCLhuaAiLCLFoCIsIuG5piIsIuG5oiIsIuG5qCIsIsiYIiwixZ4iLCLisb4iLCLqnqgiLCLqnoQiLCLik4kiLCLvvLQiLCLhuaoiLCLFpCIsIuG5rCIsIsiaIiwixaIiLCLhubAiLCLhua4iLCLFpiIsIsasIiwixq4iLCLIviIsIuqehiIsIuqcqCIsIuKTiiIsIu+8tSIsIsOZIiwiw5oiLCLDmyIsIsWoIiwi4bm4IiwixaoiLCLhuboiLCLFrCIsIsOcIiwix5siLCLHlyIsIseVIiwix5kiLCLhu6YiLCLFriIsIsWwIiwix5MiLCLIlCIsIsiWIiwixq8iLCLhu6oiLCLhu6giLCLhu64iLCLhu6wiLCLhu7AiLCLhu6QiLCLhubIiLCLFsiIsIuG5tiIsIuG5tCIsIsmEIiwi4pOLIiwi77y2Iiwi4bm8Iiwi4bm+IiwixrIiLCLqnZ4iLCLJhSIsIuqdoCIsIuKTjCIsIu+8tyIsIuG6gCIsIuG6giIsIsW0Iiwi4bqGIiwi4bqEIiwi4bqIIiwi4rGyIiwi4pONIiwi77y4Iiwi4bqKIiwi4bqMIiwi4pOOIiwi77y5Iiwi4buyIiwiw50iLCLFtiIsIuG7uCIsIsiyIiwi4bqOIiwixbgiLCLhu7YiLCLhu7QiLCLGsyIsIsmOIiwi4bu+Iiwi4pOPIiwi77y6IiwixbkiLCLhupAiLCLFuyIsIsW9Iiwi4bqSIiwi4bqUIiwixrUiLCLIpCIsIuKxvyIsIuKxqyIsIuqdoiIsIuKTkCIsIu+9gSIsIuG6miIsIsOgIiwiw6EiLCLDoiIsIuG6pyIsIuG6pSIsIuG6qyIsIuG6qSIsIsOjIiwixIEiLCLEgyIsIuG6sSIsIuG6ryIsIuG6tSIsIuG6syIsIsinIiwix6EiLCLDpCIsIsefIiwi4bqjIiwiw6UiLCLHuyIsIseOIiwiyIEiLCLIgyIsIuG6oSIsIuG6rSIsIuG6tyIsIuG4gSIsIsSFIiwi4rGlIiwiyZAiLCLqnLMiLCLDpiIsIse9Iiwix6MiLCLqnLUiLCLqnLciLCLqnLkiLCLqnLsiLCLqnL0iLCLik5EiLCLvvYIiLCLhuIMiLCLhuIUiLCLhuIciLCLGgCIsIsaDIiwiyZMiLCLik5IiLCLvvYMiLCLEhyIsIsSJIiwixIsiLCLEjSIsIsOnIiwi4biJIiwixogiLCLIvCIsIuqcvyIsIuKGhCIsIuKTkyIsIu+9hCIsIuG4iyIsIsSPIiwi4biNIiwi4biRIiwi4biTIiwi4biPIiwixJEiLCLGjCIsIsmWIiwiyZciLCLqnboiLCLHsyIsIseGIiwi4pOUIiwi772FIiwiw6giLCLDqSIsIsOqIiwi4buBIiwi4bq/Iiwi4buFIiwi4buDIiwi4bq9IiwixJMiLCLhuJUiLCLhuJciLCLElSIsIsSXIiwiw6siLCLhursiLCLEmyIsIsiFIiwiyIciLCLhurkiLCLhu4ciLCLIqSIsIuG4nSIsIsSZIiwi4biZIiwi4bibIiwiyYciLCLJmyIsIsedIiwi4pOVIiwi772GIiwi4bifIiwixpIiLCLqnbwiLCLik5YiLCLvvYciLCLHtSIsIsSdIiwi4bihIiwixJ8iLCLEoSIsIsenIiwixKMiLCLHpSIsIsmgIiwi6p6hIiwi4bW5Iiwi6p2/Iiwi4pOXIiwi772IIiwixKUiLCLhuKMiLCLhuKciLCLInyIsIuG4pSIsIuG4qSIsIuG4qyIsIuG6liIsIsSnIiwi4rGoIiwi4rG2IiwiyaUiLCLGlSIsIuKTmCIsIu+9iSIsIsOsIiwiw60iLCLDriIsIsSpIiwixKsiLCLErSIsIsOvIiwi4bivIiwi4buJIiwix5AiLCLIiSIsIsiLIiwi4buLIiwixK8iLCLhuK0iLCLJqCIsIsSxIiwi4pOZIiwi772KIiwixLUiLCLHsCIsIsmJIiwi4pOaIiwi772LIiwi4bixIiwix6kiLCLhuLMiLCLEtyIsIuG4tSIsIsaZIiwi4rGqIiwi6p2BIiwi6p2DIiwi6p2FIiwi6p6jIiwi4pObIiwi772MIiwixYAiLCLEuiIsIsS+Iiwi4bi3Iiwi4bi5IiwixLwiLCLhuL0iLCLhuLsiLCLFvyIsIsWCIiwixpoiLCLJqyIsIuKxoSIsIuqdiSIsIuqegSIsIuqdhyIsIseJIiwi4pOcIiwi772NIiwi4bi/Iiwi4bmBIiwi4bmDIiwiybEiLCLJryIsIuKTnSIsIu+9jiIsIse5IiwixYQiLCLDsSIsIuG5hSIsIsWIIiwi4bmHIiwixYYiLCLhuYsiLCLhuYkiLCLGniIsIsmyIiwixYkiLCLqnpEiLCLqnqUiLCLHjCIsIuKTniIsIu+9jyIsIsOyIiwiw7MiLCLDtCIsIuG7kyIsIuG7kSIsIuG7lyIsIuG7lSIsIsO1Iiwi4bmNIiwiyK0iLCLhuY8iLCLFjSIsIuG5kSIsIuG5kyIsIsWPIiwiyK8iLCLIsSIsIsO2IiwiyKsiLCLhu48iLCLFkSIsIseSIiwiyI0iLCLIjyIsIsahIiwi4budIiwi4bubIiwi4buhIiwi4bufIiwi4bujIiwi4buNIiwi4buZIiwix6siLCLHrSIsIsO4Iiwix78iLCLJlCIsIuqdiyIsIuqdjSIsIsm1IiwixqMiLCLIoyIsIuqdjyIsIuKTnyIsIu+9kCIsIuG5lSIsIuG5lyIsIsalIiwi4bW9Iiwi6p2RIiwi6p2TIiwi6p2VIiwi4pOgIiwi772RIiwiyYsiLCLqnZciLCLqnZkiLCLik6EiLCLvvZIiLCLFlSIsIuG5mSIsIsWZIiwiyJEiLCLIkyIsIuG5myIsIuG5nSIsIsWXIiwi4bmfIiwiyY0iLCLJvSIsIuqdmyIsIuqepyIsIuqegyIsIuKToiIsIu+9kyIsIsOfIiwixZsiLCLhuaUiLCLFnSIsIuG5oSIsIsWhIiwi4bmnIiwi4bmjIiwi4bmpIiwiyJkiLCLFnyIsIsi/Iiwi6p6pIiwi6p6FIiwi4bqbIiwi4pOjIiwi772UIiwi4bmrIiwi4bqXIiwixaUiLCLhua0iLCLImyIsIsWjIiwi4bmxIiwi4bmvIiwixaciLCLGrSIsIsqIIiwi4rGmIiwi6p6HIiwi6pypIiwi4pOkIiwi772VIiwiw7kiLCLDuiIsIsO7IiwixakiLCLhubkiLCLFqyIsIuG5uyIsIsWtIiwiw7wiLCLHnCIsIseYIiwix5YiLCLHmiIsIuG7pyIsIsWvIiwixbEiLCLHlCIsIsiVIiwiyJciLCLGsCIsIuG7qyIsIuG7qSIsIuG7ryIsIuG7rSIsIuG7sSIsIuG7pSIsIuG5syIsIsWzIiwi4bm3Iiwi4bm1IiwiyokiLCLik6UiLCLvvZYiLCLhub0iLCLhub8iLCLKiyIsIuqdnyIsIsqMIiwi6p2hIiwi4pOmIiwi772XIiwi4bqBIiwi4bqDIiwixbUiLCLhuociLCLhuoUiLCLhupgiLCLhuokiLCLisbMiLCLik6ciLCLvvZgiLCLhuosiLCLhuo0iLCLik6giLCLvvZkiLCLhu7MiLCLDvSIsIsW3Iiwi4bu5IiwiyLMiLCLhuo8iLCLDvyIsIuG7tyIsIuG6mSIsIuG7tSIsIsa0IiwiyY8iLCLhu78iLCLik6kiLCLvvZoiLCLFuiIsIuG6kSIsIsW8Iiwixb4iLCLhupMiLCLhupUiLCLGtiIsIsilIiwiyYAiLCLisawiLCLqnaMiLCLOhiIsIs6IIiwizokiLCLOiiIsIs6qIiwizowiLCLOjiIsIs6rIiwizo8iLCLOrCIsIs6tIiwizq4iLCLOryIsIs+KIiwizpAiLCLPjCIsIs+NIiwiz4siLCLOsCIsIs+JIiwiz4IiLCJCYXNlQWRhcHRlciIsImdlbmVyYXRlUmVzdWx0SWQiLCJTZWxlY3RBZGFwdGVyIiwiY3VycmVudERhdGEiLCJ1bnNlbGVjdCIsImFkZE9wdGlvbnMiLCJub3JtYWxpemVkRGF0YSIsIl9ub3JtYWxpemVJdGVtIiwibWF0Y2hlciIsIkFycmF5QWRhcHRlciIsImNvbnZlcnRUb09wdGlvbnMiLCJlbG0iLCJvbmx5SXRlbSIsIiRleGlzdGluZyIsImV4aXN0aW5nSWRzIiwiJGV4aXN0aW5nT3B0aW9uIiwiZXhpc3RpbmdEYXRhIiwiJG5ld09wdGlvbiIsIkFqYXhBZGFwdGVyIiwiYWpheE9wdGlvbnMiLCJfYXBwbHlEZWZhdWx0cyIsInByb2Nlc3NSZXN1bHRzIiwicSIsInRyYW5zcG9ydCIsImZhaWx1cmUiLCIkcmVxdWVzdCIsInRoZW4iLCJmYWlsIiwicmVxdWVzdCIsInN0YXR1cyIsIl9yZXF1ZXN0IiwiZGVsYXkiLCJfcXVlcnlUaW1lb3V0IiwiVGFncyIsInRhZ3MiLCJjcmVhdGVUYWciLCJpbnNlcnRUYWciLCJ0YWciLCJjaGVja0NoaWxkcmVuIiwiY2hlY2tUZXh0IiwiX3JlbW92ZU9sZFRhZ3MiLCJfbGFzdFRhZyIsIlRva2VuaXplciIsInRva2VuaXplciIsImRyb3Bkb3duIiwiY3JlYXRlQW5kU2VsZWN0IiwiJGV4aXN0aW5nT3B0aW9ucyIsInRva2VuRGF0YSIsInNlcGFyYXRvcnMiLCJ0ZXJtQ2hhciIsInBhcnRQYXJhbXMiLCJNaW5pbXVtSW5wdXRMZW5ndGgiLCIkZSIsIm1pbmltdW1JbnB1dExlbmd0aCIsIm1pbmltdW0iLCJNYXhpbXVtSW5wdXRMZW5ndGgiLCJtYXhpbXVtSW5wdXRMZW5ndGgiLCJtYXhpbXVtIiwiTWF4aW11bVNlbGVjdGlvbkxlbmd0aCIsIm1heGltdW1TZWxlY3Rpb25MZW5ndGgiLCJEcm9wZG93biIsInNob3dTZWFyY2giLCJIaWRlUGxhY2Vob2xkZXIiLCJyZW1vdmVQbGFjZWhvbGRlciIsIm1vZGlmaWVkRGF0YSIsIkluZmluaXRlU2Nyb2xsIiwibGFzdFBhcmFtcyIsIiRsb2FkaW5nTW9yZSIsImNyZWF0ZUxvYWRpbmdNb3JlIiwic2hvd0xvYWRpbmdNb3JlIiwiaXNMb2FkTW9yZVZpc2libGUiLCJsb2FkaW5nTW9yZU9mZnNldCIsImxvYWRNb3JlIiwicGFnaW5hdGlvbiIsIm1vcmUiLCJBdHRhY2hCb2R5IiwiJGRyb3Bkb3duUGFyZW50Iiwic2V0dXBSZXN1bHRzRXZlbnRzIiwiX3Nob3dEcm9wZG93biIsIl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIiLCJfcG9zaXRpb25Ecm9wZG93biIsIl9yZXNpemVEcm9wZG93biIsIl9oaWRlRHJvcGRvd24iLCJfZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyIiwiJGRyb3Bkb3duQ29udGFpbmVyIiwic2Nyb2xsRXZlbnQiLCJyZXNpemVFdmVudCIsIm9yaWVudGF0aW9uRXZlbnQiLCIkd2F0Y2hlcnMiLCJwYXJlbnRzIiwiJHdpbmRvdyIsImlzQ3VycmVudGx5QWJvdmUiLCJpc0N1cnJlbnRseUJlbG93IiwibmV3RGlyZWN0aW9uIiwiZW5vdWdoUm9vbUFib3ZlIiwiZW5vdWdoUm9vbUJlbG93IiwiJG9mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsIm1pbldpZHRoIiwiY291bnRSZXN1bHRzIiwiTWluaW11bVJlc3VsdHNGb3JTZWFyY2giLCJtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCIsIlNlbGVjdE9uQ2xvc2UiLCJfaGFuZGxlU2VsZWN0T25DbG9zZSIsIm9yaWdpbmFsU2VsZWN0MkV2ZW50IiwiJGhpZ2hsaWdodGVkUmVzdWx0cyIsIkNsb3NlT25TZWxlY3QiLCJfc2VsZWN0VHJpZ2dlcmVkIiwiY3RybEtleSIsImVycm9yTG9hZGluZyIsImlucHV0VG9vTG9uZyIsIm92ZXJDaGFycyIsImlucHV0VG9vU2hvcnQiLCJyZW1haW5pbmdDaGFycyIsIm1heGltdW1TZWxlY3RlZCIsIm5vUmVzdWx0cyIsInNlYXJjaGluZyIsIlJlc3VsdHNMaXN0IiwiU2VsZWN0aW9uU2VhcmNoIiwiRElBQ1JJVElDUyIsIlNlbGVjdERhdGEiLCJBcnJheURhdGEiLCJBamF4RGF0YSIsIkRyb3Bkb3duU2VhcmNoIiwiRW5nbGlzaFRyYW5zbGF0aW9uIiwiRGVmYXVsdHMiLCJ0b2tlblNlcGFyYXRvcnMiLCJRdWVyeSIsImFtZEJhc2UiLCJpbml0U2VsZWN0aW9uIiwiSW5pdFNlbGVjdGlvbiIsInJlc3VsdHNBZGFwdGVyIiwic2VsZWN0T25DbG9zZSIsImRyb3Bkb3duQWRhcHRlciIsIlNlYXJjaGFibGVEcm9wZG93biIsImNsb3NlT25TZWxlY3QiLCJkcm9wZG93bkNzc0NsYXNzIiwiZHJvcGRvd25Dc3MiLCJhZGFwdERyb3Bkb3duQ3NzQ2xhc3MiLCJEcm9wZG93bkNTUyIsInNlbGVjdGlvbkFkYXB0ZXIiLCJhbGxvd0NsZWFyIiwiY29udGFpbmVyQ3NzQ2xhc3MiLCJjb250YWluZXJDc3MiLCJhZGFwdENvbnRhaW5lckNzc0NsYXNzIiwiQ29udGFpbmVyQ1NTIiwibGFuZ3VhZ2VQYXJ0cyIsImJhc2VMYW5ndWFnZSIsImxhbmd1YWdlcyIsImxhbmd1YWdlTmFtZXMiLCJhbWRMYW5ndWFnZUJhc2UiLCJleCIsIndhcm4iLCJiYXNlVHJhbnNsYXRpb24iLCJjdXN0b21UcmFuc2xhdGlvbiIsInN0cmlwRGlhY3JpdGljcyIsIm9yaWdpbmFsIiwiZHJvcGRvd25BdXRvV2lkdGgiLCJ0ZW1wbGF0ZVJlc3VsdCIsInRlbXBsYXRlU2VsZWN0aW9uIiwidGhlbWUiLCJjYW1lbEtleSIsImNhbWVsQ2FzZSIsImNvbnZlcnRlZERhdGEiLCJPcHRpb25zIiwiZnJvbUVsZW1lbnQiLCJJbnB1dENvbXBhdCIsImV4Y2x1ZGVkRGF0YSIsImRhdGFzZXQiLCJTZWxlY3QyIiwiX2dlbmVyYXRlSWQiLCJEYXRhQWRhcHRlciIsIl9wbGFjZUNvbnRhaW5lciIsIlNlbGVjdGlvbkFkYXB0ZXIiLCJEcm9wZG93bkFkYXB0ZXIiLCJSZXN1bHRzQWRhcHRlciIsIl9iaW5kQWRhcHRlcnMiLCJfcmVnaXN0ZXJEb21FdmVudHMiLCJfcmVnaXN0ZXJEYXRhRXZlbnRzIiwiX3JlZ2lzdGVyU2VsZWN0aW9uRXZlbnRzIiwiX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMiLCJfcmVnaXN0ZXJSZXN1bHRzRXZlbnRzIiwiX3JlZ2lzdGVyRXZlbnRzIiwiaW5pdGlhbERhdGEiLCJfc3luY0F0dHJpYnV0ZXMiLCJfcmVzb2x2ZVdpZHRoIiwiV0lEVEgiLCJlbGVtZW50V2lkdGgiLCJfc3luY0EiLCJfc3luY1MiLCJfc3luY1N1YnRyZWUiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsIl9vYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIm5vblJlbGF5RXZlbnRzIiwidG9nZ2xlRHJvcGRvd24iLCJhbHRLZXkiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiYWN0dWFsVHJpZ2dlciIsInByZVRyaWdnZXJNYXAiLCJwcmVUcmlnZ2VyTmFtZSIsInByZVRyaWdnZXJBcmdzIiwiaGFzRm9jdXMiLCJuZXdWYWwiLCJkaXNjb25uZWN0IiwidGhpc01ldGhvZHMiLCJpbnN0YW5jZU9wdGlvbnMiLCJmaXJlIiwiY21kIiwidHJhbnNpdGlvbkVuZEV2ZW50cyIsInNob3dIYW5kbGVyIiwiaGFuZGxlZFRyYW5zaXRpb25FbmQiLCJ4Y2VudGVyIiwieWNlbnRlciIsImhpZGVIYW5kbGVyIiwiSW5zdGFmZWVkIiwicmVzb2x1dGlvbiIsIm1vY2siLCJ1c2VIdHRwIiwiX2dlbktleSIsImhhc05leHQiLCJuZXh0VXJsIiwiaW5zdGFuY2VOYW1lIiwic2NyaXB0IiwiY2xpZW50SWQiLCJhY2Nlc3NUb2tlbiIsImJlZm9yZSIsIl9idWlsZFVybCIsImFuY2hvciIsImNoaWxkTm9kZUNvdW50IiwiY2hpbGROb2RlSW5kZXgiLCJjaGlsZE5vZGVzQXJyIiwiZU1zZyIsImh0bWxTdHJpbmciLCJodHRwUHJvdG9jb2wiLCJpbWFnZU9iaiIsImltYWdlU3RyaW5nIiwiaW1hZ2VVcmwiLCJpbWdIZWlnaHQiLCJpbWdPcmllbnQiLCJpbWdVcmwiLCJpbWdXaWR0aCIsImxlbjEiLCJsZW4yIiwicGFyc2VkTGltaXQiLCJzb3J0U2V0dGluZ3MiLCJ0YXJnZXRFbCIsInRtcEVsIiwiY29kZSIsImVycm9yX21lc3NhZ2UiLCJuZXh0X3VybCIsIl9zb3J0QnkiLCJsaW1pdCIsInByb3RvY29sIiwiX21ha2VUZW1wbGF0ZSIsIm1vZGVsIiwibGluayIsIm9yaWVudGF0aW9uIiwiX2dldE9iamVjdFByb3BlcnR5IiwibGlrZXMiLCJjb21tZW50cyIsImhyZWYiLCJnZXRFbGVtZW50QnlJZCIsIl9lcnJvciIsImVuZHBvaW50IiwiZmluYWwiLCJ0YWdOYW1lIiwibG9jYXRpb25JZCIsInVzZXJJZCIsIlM0Iiwib3V0cHV0IiwicGF0dGVybiIsInJlZiIsInZhck5hbWUiLCJ2YXJWYWx1ZSIsIm9iamVjdCIsInBpZWNlIiwicGllY2VzIiwidmFsdWVBIiwidmFsdWVCIiwiZmlsdGVyZWRJbWFnZXMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlZmluZVByb3BlcnR5IiwiZyIsInciLCJyZXNldElucHV0IiwibG9nU3RyIiwiY29uZmlybUJ1dHRvblRleHQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiZG9uZUZ1bmN0aW9uIiwiZml4VmVydGljYWxQb3NpdGlvbiIsIm9wZW5Nb2RhbCIsImdldE1vZGFsIiwiaGFuZGxlQnV0dG9uIiwiQyIsIlMiLCJnZXRPdmVybGF5Iiwib25mb2N1cyIsImVuYWJsZUJ1dHRvbnMiLCJzZXREZWZhdWx0cyIsInByZXZpb3VzQWN0aXZlRWxlbWVudCIsInNob3dJbnB1dEVycm9yIiwicmVzZXRJbnB1dEVycm9yIiwiZGlzYWJsZUJ1dHRvbnMiLCJzd2VldEFsZXJ0Iiwic3dhbCIsIi4vbW9kdWxlcy9kZWZhdWx0LXBhcmFtcyIsIi4vbW9kdWxlcy9oYW5kbGUtY2xpY2siLCIuL21vZHVsZXMvaGFuZGxlLWRvbSIsIi4vbW9kdWxlcy9oYW5kbGUta2V5IiwiLi9tb2R1bGVzL2hhbmRsZS1zd2FsLWRvbSIsIi4vbW9kdWxlcy9zZXQtcGFyYW1zIiwiLi9tb2R1bGVzL3V0aWxzIiwiYWxsb3dPdXRzaWRlQ2xpY2siLCJzaG93Q29uZmlybUJ1dHRvbiIsImNsb3NlT25Db25maXJtIiwiY2xvc2VPbkNhbmNlbCIsImNvbmZpcm1CdXR0b25Db2xvciIsImNhbmNlbEJ1dHRvblRleHQiLCJpbWFnZVNpemUiLCJjdXN0b21DbGFzcyIsImFsbG93RXNjYXBlS2V5IiwiaW5wdXRUeXBlIiwiaW5wdXRQbGFjZWhvbGRlciIsImlucHV0VmFsdWUiLCJzaG93TG9hZGVyT25Db25maXJtIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3JMdW1pbmFuY2UiLCJib3hTaGFkb3ciLCJpc0Rlc2NlbmRhbnQiLCJoYW5kbGVDb25maXJtIiwiaGFuZGxlQ2FuY2VsIiwiLi9oYW5kbGUtZG9tIiwiLi9oYW5kbGUtc3dhbC1kb20iLCIuL3V0aWxzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIk1vdXNlRXZlbnQiLCJ2aWV3IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjcmVhdGVFdmVudE9iamVjdCIsImZpcmVFdmVudCIsImNhbmNlbEJ1YmJsZSIsImVzY2FwZUh0bWwiLCJfc2hvdyIsIl9oaWRlIiwiZ2V0VG9wTWFyZ2luIiwiZmlyZUNsaWNrIiwic3RvcEV2ZW50UHJvcGFnYXRpb24iLCJzZXRGb2N1c1N0eWxlIiwiNiIsImhleFRvUmdiIiwic3dlZXRBbGVydEluaXRpYWxpemUiLCJnZXRJbnB1dCIsIi4vZGVmYXVsdC1wYXJhbXMiLCIuL2luamVjdGVkLWh0bWwiLCI3IiwiOCIsImJvcmRlckxlZnRDb2xvciIsImNvbmZpcm1Mb2FkaW5nQnV0dG9uQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiZml0VGV4dCIsImtvbXByZXNzb3IiLCJjb21wcmVzc29yIiwibWluRm9udFNpemUiLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsIm1heEZvbnRTaXplIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJyZXNpemVyIiwiY2FyZXRUaW1lb3V0SWQiLCJ1YSIsImlQaG9uZSIsImNocm9tZSIsImFuZHJvaWQiLCJtYXNrIiwiZGVmaW5pdGlvbnMiLCIqIiwiYXV0b2NsZWFyIiwiZGF0YU5hbWUiLCJjYXJldCIsImJlZ2luIiwicmFuZ2UiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsImNvbGxhcHNlIiwibW92ZUVuZCIsIm1vdmVTdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiY3JlYXRlUmFuZ2UiLCJ1bm1hc2siLCJkZWZzIiwidGVzdHMiLCJwYXJ0aWFsUG9zaXRpb24iLCJmaXJzdE5vbk1hc2tQb3MiLCJsYXN0UmVxdWlyZWROb25NYXNrUG9zIiwib2xkVmFsIiwiY29tcGxldGVkIiwidHJ5RmlyZUNvbXBsZXRlZCIsImJ1ZmZlciIsImdldFBsYWNlaG9sZGVyIiwic2Vla05leHQiLCJwb3MiLCJzZWVrUHJldiIsInNoaWZ0TCIsIndyaXRlQnVmZmVyIiwic2hpZnRSIiwiYW5kcm9pZElucHV0RXZlbnQiLCJjdXJWYWwiLCJjaGVja1ZhbCIsImJsdXJFdmVudCIsImZvY3VzVGV4dCIsImNoYW5nZSIsImtleWRvd25FdmVudCIsImNsZWFyQnVmZmVyIiwia2V5cHJlc3NFdmVudCIsIm1ldGFLZXkiLCJmcm9tQ2hhckNvZGUiLCJwcm94eSIsImxhc3RNYXRjaCIsImRlZmF1bHRCdWZmZXIiLCJtb21lbnQiLCJqZSIsInZhbHVlT2YiLCJxYiIsInV0YyIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsIl9wZiIsIl9pc1ZhbGlkIiwia2UiLCJfZCIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsImJpZ0hvdXIiLCJOYU4iLCJfaXNBTW9tZW50T2JqZWN0IiwiX2kiLCJfZiIsIl9sIiwiX3R6bSIsIl9pc1VUQyIsIl9vZmZzZXQiLCJfbG9jYWxlIiwibGUiLCJtZSIsInVwZGF0ZU9mZnNldCIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImRlcHJlY2F0aW9uSGFuZGxlciIsInN0YWNrIiwibmUiLCJGdW5jdGlvbiIsInoiLCJfY29uZmlnIiwiX29yZGluYWxQYXJzZUxlbmllbnQiLCJfb3JkaW5hbFBhcnNlIiwic291cmNlIiwiQSIsIkIiLCJfY2FsZW5kYXIiLCJzYW1lRWxzZSIsIkQiLCJfbG9uZ0RhdGVGb3JtYXQiLCJFIiwiX2ludmFsaWREYXRlIiwiRiIsIl9vcmRpbmFsIiwiRyIsIl9yZWxhdGl2ZVRpbWUiLCJIIiwiSSIsIndlIiwiSiIsIksiLCJ4ZSIsIk0iLCJ1bml0IiwicHJpb3JpdHkiLCJOIiwiUCIsIk8iLCJRIiwiUiIsInBvdyIsIlQiLCJCZSIsImxvY2FsZURhdGEiLCJvcmRpbmFsIiwiVSIsIlYiLCJ5ZSIsIlciLCJYIiwiQWUiLCJpbnZhbGlkRGF0ZSIsImxvbmdEYXRlRm9ybWF0IiwiemUiLCJZIiwiVGUiLCJaIiwiYWEiLCJVZSIsImJhIiwiX3ciLCJjYSIsIl9hIiwiZGEiLCJVVEMiLCJnZXRVVENEYXRlIiwiZWEiLCJfbW9udGhzIiwibW9udGgiLCJpc0Zvcm1hdCIsImNmIiwiZmEiLCJfbW9udGhzU2hvcnQiLCJnYSIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX21vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwibW9udGhzU2hvcnQiLCJtb250aHMiLCJwZSIsImhhIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJpYSIsIm1vbnRoc1BhcnNlIiwieWVhciIsImphIiwia2EiLCJsYSIsIm5hIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsImZmIiwibWEiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJnZiIsIm9hIiwicGEiLCJxYSIsInJhIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInNhIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsInRhIiwiZ2V0VVRDRGF5IiwiZGF5T2ZZZWFyIiwidmEiLCJ3YSIsIndlZWsiLCJ4YSIsIl93ZWVrIiwiZG93IiwiZG95IiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIndlZWtkYXlzUGFyc2UiLCJEYSIsIkVhIiwiX3dlZWtkYXlzIiwiZGF5IiwiRmEiLCJfd2Vla2RheXNTaG9ydCIsIkdhIiwiX3dlZWtkYXlzTWluIiwiSGEiLCJfd2Vla2RheXNQYXJzZSIsIl9zaG9ydFdlZWtkYXlzUGFyc2UiLCJfbWluV2Vla2RheXNQYXJzZSIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwiSWEiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJQYSIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzUmVnZXgiLCJuZiIsIk5hIiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJvZiIsIk9hIiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsInBmIiwiUWEiLCJob3VycyIsIlJhIiwiU2EiLCJtaW51dGVzIiwiVGEiLCJfbWVyaWRpZW1QYXJzZSIsIlVhIiwiVmEiLCJXYSIsIlhhIiwiWWEiLCJ1ZiIsInFmIiwiX2FiYnIiLCJaYSIsImFiIiwiJGEiLCJ0ZiIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJiYiIsIm9lIiwiY2IiLCJXZSIsIlhlIiwiVmUiLCJZZSIsIlplIiwiX2UiLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsImFmIiwiX292ZXJmbG93V2Vla2RheSIsImJmIiwiZGIiLCJ2ZiIsIndmIiwieWYiLCJ6ZiIsInhmIiwiamIiLCJlYiIsIkFmIiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJmYiIsImdiIiwiX3VzZVVUQyIsImdldFVUQ01vbnRoIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiaGIiLCJpYiIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwiR0ciLCJyYiIsImdnIiwiSVNPXzg2MDEiLCJfbWVyaWRpZW0iLCJrYiIsIm1lcmlkaWVtSG91ciIsImlzUE0iLCJsYiIsInNjb3JlIiwibWIiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJuYiIsIm9iIiwicHJlcGFyc2UiLCJwYiIsInNiIiwidGIiLCJ1YiIsInZiIiwicXVhcnRlciIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9kYXRhIiwiX2J1YmJsZSIsIndiIiwieGIiLCJ1dGNPZmZzZXQiLCJ5YiIsIkVmIiwiemIiLCJsb2NhbCIsIkFiIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJCYiIsIlFlIiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJTYiIsIk1iIiwiQ2IiLCJEYiIsIkViIiwic3VidHJhY3QiLCJGYiIsIlBlIiwiR2IiLCJIYiIsIkliIiwiX2lzRFNUU2hpZnRlZCIsIkpiIiwiS2IiLCJMYiIsIm1zIiwibWlsbGlzZWNvbmRzIiwiRmYiLCJHZiIsIk5iIiwiUGIiLCJPYiIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsIlFiIiwiUmIiLCJUYiIsImRpZmYiLCJVYiIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImZvcm1hdCIsImNhbGVuZGFyIiwiVmIiLCJXYiIsIlhiIiwiZW5kT2YiLCJZYiIsIlpiIiwiJGIiLCJpc1NhbWUiLCJfYiIsImFjIiwiYmMiLCJjYyIsImxvY2FsZSIsImRjIiwidG9JU09TdHJpbmciLCJ0b0RhdGUiLCJlYyIsImlzVXRjIiwiZGVmYXVsdEZvcm1hdFV0YyIsImRlZmF1bHRGb3JtYXQiLCJwb3N0Zm9ybWF0IiwiZmMiLCJodW1hbml6ZSIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsInNlY29uZHMiLCJ3ZWVrZGF5IiwiaXNvV2Vla2RheSIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInllYXJzIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ3YyIsImlzVVRDIiwic3RyaWN0IiwieGMiLCJ5YyIsIkNjIiwiemMiLCJpc29XZWVrIiwiQWMiLCJCYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJwYXJzZVpvbmUiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlNmIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIl9jIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJhcyIsImRkIiwiZWQiLCJmZCIsImdkIiwicmVsYXRpdmVUaW1lIiwiaGQiLCJoZyIsImpkIiwia2QiLCJwYXN0RnV0dXJlIiwibGQiLCJpZyIsImFzU2Vjb25kcyIsIm5kIiwibW0iLCJoaCIsIk1NIiwieXkiLCJvZCIsInJkIiwicGQiLCJxZCIsInNkIiwidWQiLCJ2ZCIsIndkIiwieGQiLCJ5ZCIsInpkIiwiQWQiLCJKZyIsIklnIiwiQmQiLCJDZCIsIkRkIiwiVGciLCJFZCIsIkZkIiwiR2QiLCJIZCIsIkpkIiwiSWQiLCJLZCIsIkxkIiwiTmQiLCJNZCIsIldnIiwiT2QiLCJQZCIsIlFkIiwiWGciLCJSZCIsIlNkIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwicWgiLCJlZSIsImZlIiwiZ2UiLCJoZSIsIm5vbWluYXRpdmUiLCJhY2N1c2F0aXZlIiwiZ2VuaXRpdmUiLCJpZSIsInNvbWUiLCJtb21lbnRQcm9wZXJ0aWVzIiwicWUiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwicmUiLCJMVFMiLCJMVCIsIkxMIiwiTExMIiwiTExMTCIsInNlIiwidGUiLCJ1ZSIsInZlIiwiZnV0dXJlIiwicGFzdCIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUmUiLCJTZSIsIm1vbnRoc1Nob3J0UmVnZXgiLCJtb250aHNSZWdleCIsImRmIiwiZWYiLCJwYXJzZVR3b0RpZ2l0WWVhciIsImhmIiwiamYiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsImtmIiwibGYiLCJtZiIsIl9pc1BtIiwicmYiLCJzZiIsIm9yZGluYWxQYXJzZSIsIm1lcmlkaWVtUGFyc2UiLCJCZiIsIkNmIiwiRGYiLCJIZiIsIklmIiwiSmYiLCJ3ZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiZnJvbU5vdyIsInRvTm93IiwiaW52YWxpZEF0IiwiaXNCZXR3ZWVuIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwicGFyc2luZ0ZsYWdzIiwidG9PYmplY3QiLCJ0b0pTT04iLCJ1bml4IiwiY3JlYXRpb25EYXRhIiwiaXNMZWFwWWVhciIsInF1YXJ0ZXJzIiwiZGF5c0luTW9udGgiLCJ3ZWVrcyIsImlzb1dlZWtzIiwid2Vla3NJblllYXIiLCJpc29XZWVrc0luWWVhciIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEU1QiLCJpc0xvY2FsIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJ6b25lIiwiaXNEU1RTaGlmdGVkIiwiUWYiLCJSZiIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJsYW5nRGF0YSIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJqZyIsImFzTWlsbGlzZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzWWVhcnMiLCJ0b0lzb1N0cmluZyIsImlzRGF0ZSIsImludmFsaWQiLCJpc01vbWVudCIsImlzRHVyYXRpb24iLCJkZWZpbmVMb2NhbGUiLCJ1cGRhdGVMb2NhbGUiLCJsb2NhbGVzIiwibm9ybWFsaXplVW5pdHMiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJlbGF0aXZlVGltZVRocmVzaG9sZCIsImtnIiwibGciLCJ3ZWVrZGF5c1BhcnNlRXhhY3QiLCIwIiwibWciLCLZoSIsItmiIiwi2aMiLCLZpCIsItmlIiwi2aYiLCLZpyIsItmoIiwi2akiLCLZoCIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwiNzAiLCI4MCIsIjIwIiwiNTAiLCIxMDAiLCIxMCIsIjMwIiwiNjAiLCI5MCIsInVnIiwic3RhbmRhbG9uZSIsInZnIiwi4KenIiwi4KeoIiwi4KepIiwi4KeqIiwi4KerIiwi4KesIiwi4KetIiwi4KeuIiwi4KevIiwi4KemIiwid2ciLCJ4ZyIsIuC8oSIsIuC8oiIsIuC8oyIsIuC8pCIsIuC8pSIsIuC8piIsIuC8pyIsIuC8qCIsIuC8qSIsIuC8oCIsInlnIiwibW9udGhzUGFyc2VFeGFjdCIsInpnIiwiQWciLCJzaG9ydE1vbnRoc1BhcnNlIiwibG9uZ01vbnRoc1BhcnNlIiwiQmciLCJDZyIsIm1vbnRoc05vbWluYXRpdmVFbCIsIm1vbnRoc0dlbml0aXZlRWwiLCJfbW9udGhzR2VuaXRpdmVFbCIsIl9tb250aHNOb21pbmF0aXZlRWwiLCJjYWxlbmRhckVsIiwiX2NhbGVuZGFyRWwiLCJEZyIsIkVnIiwiRmciLCJHZyIsImxsIiwibGxsIiwibGxsbCIsIkhnIiwi27EiLCLbsiIsItuzIiwi27QiLCLbtSIsItu2Iiwi27ciLCLbuCIsItu5Iiwi27AiLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCLgpaciLCLgpagiLCLgpakiLCLgpaoiLCLgpasiLCLgpawiLCLgpa0iLCLgpa4iLCLgpa8iLCLgpaYiLCJVZyIsIjQwIiwiVmciLCJzcyIsIllnIiwid29yZHMiLCJjb3JyZWN0R3JhbW1hdGljYWxDYXNlIiwidHJhbnNsYXRlIiwiWmciLCIkZyIsIl9nIiwiYWgiLCLhgYEiLCLhgYIiLCLhgYMiLCLhgYQiLCLhgYUiLCLhgYYiLCLhgYciLCLhgYgiLCLhgYkiLCLhgYAiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCLgqaciLCLgqagiLCLgqakiLCLgqaoiLCLgqasiLCLgqawiLCLgqa0iLCLgqa4iLCLgqa8iLCLgqaYiLCJpaCIsImpoIiwia2giLCJtb250aHNTdHJpY3RSZWdleCIsIm1vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwi4K+nIiwi4K+oIiwi4K+pIiwi4K+qIiwi4K+rIiwi4K+sIiwi4K+tIiwi4K+uIiwi4K+vIiwi4K+mIiwicmgiLCJzaCIsImNsc05hbWUiLCJuYXZGbmMiLCJuYXZTdGVwIiwiMzgiLCIzNyIsIjM5IiwidGFiIiwiZXNjYXBlIiwiMjciLCJlbnRlciIsIjEzIiwicGFnZVVwIiwiMzMiLCJwYWdlRG93biIsIjM0IiwiMTYiLCJjb250cm9sIiwiMTciLCJzcGFjZSIsIjMyIiwiODQiLCJkZWxldGUiLCI0NiIsInR6IiwidGltZVpvbmUiLCJ1c2VTdHJpY3QiLCJUeXBlRXJyb3IiLCJpY29ucyIsImNhbGVuZGFyV2Vla3MiLCJ0b29sdGlwcyIsImluY3JlbWVudEhvdXIiLCJkYXRhLXRpbWUtY29tcG9uZW50IiwicGlja0hvdXIiLCJkZWNyZW1lbnRIb3VyIiwiaW5jcmVtZW50TWludXRlIiwicGlja01pbnV0ZSIsImRlY3JlbWVudE1pbnV0ZSIsImluY3JlbWVudFNlY29uZCIsInBpY2tTZWNvbmQiLCJkZWNyZW1lbnRTZWNvbmQiLCJkYXRhLWFjdGlvbiIsInRvZ2dsZVBlcmlvZCIsInNob3dUb2RheUJ1dHRvbiIsInRvZGF5Iiwic2lkZUJ5U2lkZSIsInNlbGVjdFRpbWUiLCJzaG93Q2xlYXIiLCJzaG93Q2xvc2UiLCJpbmxpbmUiLCJ0b29sYmFyUGxhY2VtZW50IiwiZGF0ZU9wdGlvbnMiLCJ3aWRnZXRQb3NpdGlvbmluZyIsIndpZGdldFBhcmVudCIsIm9sZERhdGUiLCJ2aWV3RGF0ZSIsImRpc2FibGVkRGF0ZXMiLCJlbmFibGVkRGF0ZXMiLCJkaXNhYmxlZEhvdXJzIiwiZW5hYmxlZEhvdXJzIiwibWluRGF0ZSIsIm1heERhdGUiLCJkYXlzT2ZXZWVrRGlzYWJsZWQiLCJkaXNhYmxlZFRpbWVJbnRlcnZhbHMiLCJwcmV2WWVhciIsInNlbGVjdFllYXIiLCJuZXh0WWVhciIsInByZXZEZWNhZGUiLCJzZWxlY3REZWNhZGUiLCJuZXh0RGVjYWRlIiwicHJldkNlbnR1cnkiLCJuZXh0Q2VudHVyeSIsInByZXZNb250aCIsInNlbGVjdE1vbnRoIiwibmV4dE1vbnRoIiwiZGF5Vmlld0hlYWRlckZvcm1hdCIsInN0ZXBwaW5nIiwia2VlcEludmFsaWQiLCJ0cmFuc2l0aW9uaW5nIiwicGlja2VyU3dpdGNoIiwic2VsZWN0RGF5Iiwia2VlcE9wZW4iLCJpbmNyZW1lbnRIb3VycyIsImluY3JlbWVudE1pbnV0ZXMiLCJpbmNyZW1lbnRTZWNvbmRzIiwiZGVjcmVtZW50SG91cnMiLCJkZWNyZW1lbnRNaW51dGVzIiwiZGVjcmVtZW50U2Vjb25kcyIsInRvZ2dsZVBpY2tlciIsInNob3dQaWNrZXIiLCJzaG93SG91cnMiLCJzaG93TWludXRlcyIsInNob3dTZWNvbmRzIiwic2VsZWN0SG91ciIsInNlbGVjdE1pbnV0ZSIsInNlbGVjdFNlY29uZCIsImN1cnJlbnRUYXJnZXQiLCJpZ25vcmVSZWFkb25seSIsInVzZUN1cnJlbnQiLCJmb2N1c09uU2hvdyIsInBhcnNlSW5wdXREYXRlIiwia2V5QmluZHMiLCJhbGxvd0lucHV0VG9nZ2xlIiwiZXh0cmFGb3JtYXRzIiwiZGVmYXVsdERhdGUiLCJ2aWV3TW9kZSIsImdldE1vbWVudCIsImRhdGVwaWNrZXJJbnB1dCIsImRhdGV0aW1lcGlja2VyIiwiY29udHJvbCB1cCIsImNvbnRyb2wgZG93biIsImNvbnRyb2wgc3BhY2UiLCJvdmVybGF5RE9NIiwib25iZWZvcmVzaG93Iiwib25zaG93Iiwib25iZWZvcmVoaWRlIiwib25oaWRlIiwic3Bpbm5lciIsInBhcmVudEVsIiwib2JqMSIsIm9iajIiLCJvYmozIiwiYXR0ck9uZSIsImF0dHJUd28iLCJkb2VzVHJhbnNpdGlvbnMiLCJoYW5kbGVBbmltIiwiYW5pbSIsImFuaW1hdGlvbk5hbWUiLCJ0cmlnZ2VySGFuZGxlciIsInN0IiwiY2FsbGJhY2tzIiwiY3VyclRlbXBsYXRlIiwiY2xvc2VCdG4iLCJjbG9zZU1hcmt1cCIsInRDbG9zZSIsImFwcFZlcnNpb24iLCJpc0xvd0lFIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJzdXBwb3J0c1RyYW5zaXRpb24iLCJwcm9iYWJseU1vYmlsZSIsInBvcHVwc0NhY2hlIiwiaXNPYmoiLCJ1cGRhdGVJdGVtSFRNTCIsIm1haW5FbCIsImZpeGVkQ29udGVudFBvcyIsIm1vZGFsIiwiY2xvc2VPbkNvbnRlbnRDbGljayIsImNsb3NlT25CZ0NsaWNrIiwic2hvd0Nsb3NlQnRuIiwiZW5hYmxlRXNjYXBlS2V5IiwiYmdPdmVybGF5IiwiX2NoZWNrSWZDbG9zZSIsImNvbnRlbnRDb250YWluZXIiLCJwcmVsb2FkZXIiLCJ0TG9hZGluZyIsIm1vZHVsZXMiLCJjbG9zZUJ0bkluc2lkZSIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJmaXhlZEJnUG9zIiwidXBkYXRlU2l6ZSIsIndIIiwiX2hhc1Njcm9sbEJhciIsIl9nZXRTY3JvbGxiYXJTaXplIiwiaXNJRTciLCJtYWluQ2xhc3MiLCJfYWRkQ2xhc3NUb01GUCIsIl9sYXN0Rm9jdXNlZEVsIiwiX3NldEZvY3VzIiwiX29uRm9jdXNJbiIsInJlbW92YWxEZWxheSIsIl9jbG9zZSIsIl9yZW1vdmVDbGFzc0Zyb21NRlAiLCJjdXJySXRlbSIsImF1dG9Gb2N1c0xhc3QiLCJwcmV2SGVpZ2h0IiwicGFyc2VFbCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJhZGRHcm91cCIsIm1mcEVsIiwiX29wZW5DbGljayIsImRlbGVnYXRlIiwibWlkQ2xpY2siLCJkaXNhYmxlT24iLCJ1cGRhdGVTdGF0dXMiLCJfcGFyc2VNYXJrdXAiLCJzY3JvbGxiYXJTaXplIiwicmVnaXN0ZXJNb2R1bGUiLCJoaWRkZW5DbGFzcyIsInROb3RGb3VuZCIsImluaXRJbmxpbmUiLCJnZXRJbmxpbmUiLCJpbmxpbmVFbGVtZW50IiwiY3Vyc29yIiwidEVycm9yIiwiaW5pdEFqYXgiLCJnZXRBamF4IiwiZmluaXNoZWQiLCJsb2FkRXJyb3IiLCJ0aXRsZVNyYyIsInZlcnRpY2FsRml0IiwiaW5pdEltYWdlIiwicmVzaXplSW1hZ2UiLCJfb25JbWFnZUhhc1NpemUiLCJoYXNTaXplIiwiY2xlYXJJbnRlcnZhbCIsImlzQ2hlY2tpbmdJbWdTaXplIiwiaW1nSGlkZGVuIiwiZmluZEltYWdlU2l6ZSIsInNldEludGVydmFsIiwiZ2V0SW1hZ2UiLCJsb2FkZWQiLCJpbWdfcmVwbGFjZVdpdGgiLCJNb3pUcmFuc2Zvcm0iLCJvcGVuZXIiLCJpbml0Wm9vbSIsInpvb20iLCJ6SW5kZXgiLCItd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHkiLCJfYWxsb3dab29tIiwiX2dldEl0ZW1Ub1pvb20iLCJfZ2V0T2Zmc2V0Iiwic3JjQWN0aW9uIiwicGF0dGVybnMiLCJ5b3V0dWJlIiwidmltZW8iLCJnbWFwcyIsImluaXRJZnJhbWUiLCJnZXRJZnJhbWUiLCJpZnJhbWUiLCJhcnJvd01hcmt1cCIsInByZWxvYWQiLCJuYXZpZ2F0ZUJ5SW1nQ2xpY2siLCJhcnJvd3MiLCJ0UHJldiIsInROZXh0IiwidENvdW50ZXIiLCJpbml0R2FsbGVyeSIsImdhbGxlcnkiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiX3ByZWxvYWRUaW1lb3V0IiwicHJlbG9hZE5lYXJieUltYWdlcyIsIl9wcmVsb2FkSXRlbSIsInJlcGxhY2VTcmMiLCJyYXRpbyIsImluaXRSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwicmV0aW5hIiwibWF4LXdpZHRoIiwiYmxhenkiLCJCbGF6eSIsImluaXRpYWxpemUiLCJfdXRpbCIsImRlc3Ryb3llZCIsImJpbmRFdmVudCIsInZhbGlkYXRlVCIsInNhdmVWaWV3cG9ydE9mZnNldFQiLCJ2YWxpZGF0ZSIsImVsZW1lbnRJblZpZXciLCJzdWNjZXNzQ2xhc3MiLCJlbGUiLCJsb2FkRWxlbWVudCIsImxvYWRJbnZpc2libGUiLCJkYXRhU3JjU3BsaXR0ZWQiLCJzZXBhcmF0b3IiLCJpc1JldGluYSIsImlzSW1hZ2UiLCJicmVha3BvaW50cyIsImVycm9yQ2xhc3MiLCJub2RlbGlzdCIsInNhdmVWaWV3cG9ydE9mZnNldCIsInVuYmluZEV2ZW50IiwibWluRGVsYXkiLCJsYXN0Q2FsbCIsImNyZWF0ZVN0eWxlU2hlZXQiLCJhZGRSdWxlIiwicmVtb3ZlUnVsZSIsInZhbGlkYXRlRGVsYXkiLCJzYXZlVmlld3BvcnRPZmZzZXREZWxheSIsInJldmFsaWRhdGUiLCJvcHQiLCJzY3JlZW4iLCJjYXJ0IiwiY2FydEl0ZW1zIiwic2V0dGluZ3NyIiwiZmVlZCIsImVtcHR5VGFibGUiLCJkYXRhX25hbWUiLCJrZXlwcmVzcyIsInRhYmxlT3JkZXIiLCJnZXRKU09OIiwibGlrZSIsImxvZ2luIiwicGFzc3dvcmQiLCJyZWxvYWQiLCJoaXN0b3J5IiwiYmFjayIsImNoYXJDb2RlIiwicGFyc2VKU09OIiwicmVhZHkiLCJIaXN0b3J5IiwicHVzaFN0YXRlIiwiU3RhdGUiLCJnZXRTdGF0ZSIsInJlcGxhY2VTdGF0ZSIsInNpZGViYXIiLCJib2R5d2l0aHNpZGViYXIiLCJsb2NhbExpbmtDbGlja2VkIiwiYWxsb3dTYW1wbGUiLCJvbkFycmFuZ2UiLCJiTGF6eSIsIm1vdXNlb3ZlciIsIm1vdXNlb3V0IiwiaW5pdElzb3RvcGUiLCJpbml0RXZlbnRzIiwiZ3JpZCIsIm93bENhcm91c2VsIiwic3RvcE9uSG92ZXIiLCJuYXZpZ2F0aW9uIiwicGFnaW5hdGlvblNwZWVkIiwiZ29Ub0ZpcnN0U3BlZWQiLCJzaW5nbGVJdGVtIiwiYXV0b0hlaWdodCIsIm5hdmlnYXRpb25UZXh0Iiwib3dsIiwibWFzb25yeSIsImZpbHRlckN0cmxzIiwiZmlsdGVyQ3RybCIsInJlY2FsY0ZsaWNraXRpZXMiLCJhZGRUb0NhcnQiLCJvbkVuZEFuaW1hdGlvbiIsImZsa3RpZXMiLCJzdXBwb3J0IiwiYW5pbWF0aW9ucyIsIk1vZGVybml6ciIsImNzc2FuaW1hdGlvbnMiLCJhbmltRW5kRXZlbnROYW1lcyIsIldlYmtpdEFuaW1hdGlvbiIsIk9BbmltYXRpb24iLCJtc0FuaW1hdGlvbiIsImFuaW1FbmRFdmVudE5hbWUiLCJvbkVuZENhbGxiYWNrRm4iXSwibWFwcGluZ3MiOiJBQTQzbkNBLFFBQVNBLFVBQ0wsTUFBTyxTQUFXQyxLQUFLQyxPQUFNLEdBQUlDLE9BQU9DLFVBQTZCLElBQWhCSCxLQUFLSSxVQVE5RCxRQUFTQyxhQUFZQyxHQUNqQixHQUFJQyxHQUFhQyxvQkFDYkMsRUFBTVYsUUFDVlcsV0FBVUMsSUFBSUMsS0FDVixPQUFTTCxFQUFzQixVQUFJLGVBQWlCQSxFQUEyQixlQUFJLFdBQ25GLGVBQWlCRSxFQUFNLHNMQUN2QiwrQ0FBaURGLEVBQXVCLFdBQUksMEZBQzVFLHNCQUF3QkEsRUFBdUIsV0FBSSxvQ0FDbkQsb0JBQXNCQSxFQUFvQixRQUFJLHFEQUMvQ00sTUFBSyxHQUVSQyxFQUFFLFVBQVVDLGNBQWNDLEdBQUcsWUFBYSxXQUN0Q0MsYUFBYUMsUUFBUSxPQUFRQyxLQUFLQyxVQUFVQyxvQkFFaERDLE1BQVFSLEVBQUVTLE1BQ1ZULEVBQUUsSUFBTUwsRUFBTSxjQUFnQkgsRUFBTyxLQUFLa0IsS0FBSyxZQUFZLEdBRTNEVixFQUFFLGdDQUFnQ0UsR0FBRyxTQUFVLFNBQVVTLEdBQ3JEWCxFQUFF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QyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElB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LEdBRXRDQSxJQW9CWixJQUFJcm5LLEVBQUUsZUFBZTJCLE9BQ2pCLEdBTUkwZ0ksR0FDQWlqQyxFQUxBcUIsTUFGYTUrSixNQUFNTixLQUFLb0IsU0FBU0MsaUJBQWlCLGdCQUlsRDY4SixFQUFPOThKLFNBQVM4c0IsY0FBYyxTQUs5QjJ3SSxLQUFpQnYrSixNQUFNTixLQUFLb0IsU0FBU0MsaUJBQWlCLHFCQUV0RDQ2SixFQUFPNzZKLFNBQVM4c0IsY0FBYyxTQUM5Qmd1SSxFQUFZRCxFQUFLL3RJLGNBQWMsZUErTHZDamEsTUFFRC9TIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBzZXJkaW1vYSBvbiAxNC4xMi4xNS5cclxuICovXHJcblxyXG4vKiFcclxuICogaW1hZ2VzTG9hZGVkIFBBQ0tBR0VEIHY0LjAuMFxyXG4gKiBKYXZhU2NyaXB0IGlzIGFsbCBsaWtlIFwiWW91IGltYWdlcyBhcmUgZG9uZSB5ZXQgb3Igd2hhdD9cIlxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUoKXt9ZnVuY3Rpb24gdChlLHQpe2Zvcih2YXIgbj1lLmxlbmd0aDtuLS07KWlmKGVbbl0ubGlzdGVuZXI9PT10KXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpfX12YXIgaT1lLnByb3RvdHlwZSxyPXRoaXMscz1yLkV2ZW50RW1pdHRlcjtpLmdldExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxuLGk9dGhpcy5fZ2V0RXZlbnRzKCk7aWYoZSBpbnN0YW5jZW9mIFJlZ0V4cCl7dD17fTtmb3IobiBpbiBpKWkuaGFzT3duUHJvcGVydHkobikmJmUudGVzdChuKSYmKHRbbl09aVtuXSl9ZWxzZSB0PWlbZV18fChpW2VdPVtdKTtyZXR1cm4gdH0saS5mbGF0dGVuTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG49W107Zm9yKHQ9MDt0PGUubGVuZ3RoO3QrPTEpbi5wdXNoKGVbdF0ubGlzdGVuZXIpO3JldHVybiBufSxpLmdldExpc3RlbmVyc0FzT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcy5nZXRMaXN0ZW5lcnMoZSk7cmV0dXJuIG4gaW5zdGFuY2VvZiBBcnJheSYmKHQ9e30sdFtlXT1uKSx0fHxufSxpLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsbil7dmFyIGkscj10aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGUpLHM9XCJvYmplY3RcIj09dHlwZW9mIG47Zm9yKGkgaW4gcilyLmhhc093blByb3BlcnR5KGkpJiYtMT09PXQocltpXSxuKSYmcltpXS5wdXNoKHM/bjp7bGlzdGVuZXI6bixvbmNlOiExfSk7cmV0dXJuIHRoaXN9LGkub249bihcImFkZExpc3RlbmVyXCIpLGkuYWRkT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZSx7bGlzdGVuZXI6dCxvbmNlOiEwfSl9LGkub25jZT1uKFwiYWRkT25jZUxpc3RlbmVyXCIpLGkuZGVmaW5lRXZlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0TGlzdGVuZXJzKGUpLHRoaXN9LGkuZGVmaW5lRXZlbnRzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl0aGlzLmRlZmluZUV2ZW50KGVbdF0pO3JldHVybiB0aGlzfSxpLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsbil7dmFyIGkscixzPXRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZSk7Zm9yKHIgaW4gcylzLmhhc093blByb3BlcnR5KHIpJiYoaT10KHNbcl0sbiksLTEhPT1pJiZzW3JdLnNwbGljZShpLDEpKTtyZXR1cm4gdGhpc30saS5vZmY9bihcInJlbW92ZUxpc3RlbmVyXCIpLGkuYWRkTGlzdGVuZXJzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyghMSxlLHQpfSxpLnJlbW92ZUxpc3RlbmVycz1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnMoITAsZSx0KX0saS5tYW5pcHVsYXRlTGlzdGVuZXJzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyLHM9ZT90aGlzLnJlbW92ZUxpc3RlbmVyOnRoaXMuYWRkTGlzdGVuZXIsbz1lP3RoaXMucmVtb3ZlTGlzdGVuZXJzOnRoaXMuYWRkTGlzdGVuZXJzO2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0fHx0IGluc3RhbmNlb2YgUmVnRXhwKWZvcihpPW4ubGVuZ3RoO2ktLTspcy5jYWxsKHRoaXMsdCxuW2ldKTtlbHNlIGZvcihpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmKHI9dFtpXSkmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiByP3MuY2FsbCh0aGlzLGkscik6by5jYWxsKHRoaXMsaSxyKSk7cmV0dXJuIHRoaXN9LGkucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj10eXBlb2YgZSxpPXRoaXMuX2dldEV2ZW50cygpO2lmKFwic3RyaW5nXCI9PT1uKWRlbGV0ZSBpW2VdO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIFJlZ0V4cClmb3IodCBpbiBpKWkuaGFzT3duUHJvcGVydHkodCkmJmUudGVzdCh0KSYmZGVsZXRlIGlbdF07ZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzO3JldHVybiB0aGlzfSxpLnJlbW92ZUFsbExpc3RlbmVycz1uKFwicmVtb3ZlRXZlbnRcIiksaS5lbWl0RXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixpLHIscyxvLGg9dGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChlKTtmb3IocyBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkocykpZm9yKG49aFtzXS5zbGljZSgwKSxyPW4ubGVuZ3RoO3ItLTspaT1uW3JdLGkub25jZT09PSEwJiZ0aGlzLnJlbW92ZUxpc3RlbmVyKGUsaS5saXN0ZW5lciksbz1pLmxpc3RlbmVyLmFwcGx5KHRoaXMsdHx8W10pLG89PT10aGlzLl9nZXRPbmNlUmV0dXJuVmFsdWUoKSYmdGhpcy5yZW1vdmVMaXN0ZW5lcihlLGkubGlzdGVuZXIpO3JldHVybiB0aGlzfSxpLnRyaWdnZXI9bihcImVtaXRFdmVudFwiKSxpLmVtaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiB0aGlzLmVtaXRFdmVudChlLHQpfSxpLnNldE9uY2VSZXR1cm5WYWx1ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlPWUsdGhpc30saS5fZ2V0T25jZVJldHVyblZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzT3duUHJvcGVydHkoXCJfb25jZVJldHVyblZhbHVlXCIpP3RoaXMuX29uY2VSZXR1cm5WYWx1ZTohMH0saS5fZ2V0RXZlbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz17fSl9LGUubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiByLkV2ZW50RW1pdHRlcj1zLGV9LFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyXCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gZX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWU6ci5FdmVudEVtaXR0ZXI9ZX0pLmNhbGwodGhpcyksZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXJcIl0sZnVuY3Rpb24obil7cmV0dXJuIHQoZSxuKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXQoZSxyZXF1aXJlKFwid29sZnk4Ny1ldmVudGVtaXR0ZXJcIikpOmUuaW1hZ2VzTG9hZGVkPXQoZSxlLkV2ZW50RW1pdHRlcil9KHdpbmRvdyxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIG4gaW4gdCllW25dPXRbbl07cmV0dXJuIGV9ZnVuY3Rpb24gaShlKXt2YXIgdD1bXTtpZihBcnJheS5pc0FycmF5KGUpKXQ9ZTtlbHNlIGlmKFwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl0LnB1c2goZVtuXSk7ZWxzZSB0LnB1c2goZSk7cmV0dXJuIHR9ZnVuY3Rpb24gcihlLHQscyl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiByPyhcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlKSksdGhpcy5lbGVtZW50cz1pKGUpLHRoaXMub3B0aW9ucz1uKHt9LHRoaXMub3B0aW9ucyksXCJmdW5jdGlvblwiPT10eXBlb2YgdD9zPXQ6bih0aGlzLm9wdGlvbnMsdCkscyYmdGhpcy5vbihcImFsd2F5c1wiLHMpLHRoaXMuZ2V0SW1hZ2VzKCksaCYmKHRoaXMuanFEZWZlcnJlZD1uZXcgaC5EZWZlcnJlZCksdm9pZCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhpcy5jaGVjaygpfS5iaW5kKHRoaXMpKSk6bmV3IHIoZSx0LHMpfWZ1bmN0aW9uIHMoZSl7dGhpcy5pbWc9ZX1mdW5jdGlvbiBvKGUsdCl7dGhpcy51cmw9ZSx0aGlzLmVsZW1lbnQ9dCx0aGlzLmltZz1uZXcgSW1hZ2V9dmFyIGg9ZS5qUXVlcnksYT1lLmNvbnNvbGU7ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksci5wcm90b3R5cGUub3B0aW9ucz17fSxyLnByb3RvdHlwZS5nZXRJbWFnZXM9ZnVuY3Rpb24oKXt0aGlzLmltYWdlcz1bXSx0aGlzLmVsZW1lbnRzLmZvckVhY2godGhpcy5hZGRFbGVtZW50SW1hZ2VzLHRoaXMpfSxyLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzPWZ1bmN0aW9uKGUpe1wiSU1HXCI9PWUubm9kZU5hbWUmJnRoaXMuYWRkSW1hZ2UoZSksdGhpcy5vcHRpb25zLmJhY2tncm91bmQ9PT0hMCYmdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyhlKTt2YXIgdD1lLm5vZGVUeXBlO2lmKHQmJnVbdF0pe2Zvcih2YXIgbj1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdcIiksaT0wO2k8bi5sZW5ndGg7aSsrKXt2YXIgcj1uW2ldO3RoaXMuYWRkSW1hZ2Uocil9aWYoXCJzdHJpbmdcIj09dHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kKXt2YXIgcz1lLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5vcHRpb25zLmJhY2tncm91bmQpO2ZvcihpPTA7aTxzLmxlbmd0aDtpKyspe3ZhciBvPXNbaV07dGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyhvKX19fX07dmFyIHU9ezE6ITAsOTohMCwxMTohMH07cmV0dXJuIHIucHJvdG90eXBlLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzPWZ1bmN0aW9uKGUpe3ZhciB0PWdldENvbXB1dGVkU3R5bGUoZSk7aWYodClmb3IodmFyIG49L3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2ksaT1uLmV4ZWModC5iYWNrZ3JvdW5kSW1hZ2UpO251bGwhPT1pOyl7dmFyIHI9aSYmaVsyXTtyJiZ0aGlzLmFkZEJhY2tncm91bmQocixlKSxpPW4uZXhlYyh0LmJhY2tncm91bmRJbWFnZSl9fSxyLnByb3RvdHlwZS5hZGRJbWFnZT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcyhlKTt0aGlzLmltYWdlcy5wdXNoKHQpfSxyLnByb3RvdHlwZS5hZGRCYWNrZ3JvdW5kPWZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IG8oZSx0KTt0aGlzLmltYWdlcy5wdXNoKG4pfSxyLnByb3RvdHlwZS5jaGVjaz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxuLGkpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnByb2dyZXNzKGUsbixpKX0pfXZhciB0PXRoaXM7cmV0dXJuIHRoaXMucHJvZ3Jlc3NlZENvdW50PTAsdGhpcy5oYXNBbnlCcm9rZW49ITEsdGhpcy5pbWFnZXMubGVuZ3RoP3ZvaWQgdGhpcy5pbWFnZXMuZm9yRWFjaChmdW5jdGlvbih0KXt0Lm9uY2UoXCJwcm9ncmVzc1wiLGUpLHQuY2hlY2soKX0pOnZvaWQgdGhpcy5jb21wbGV0ZSgpfSxyLnByb3RvdHlwZS5wcm9ncmVzcz1mdW5jdGlvbihlLHQsbil7dGhpcy5wcm9ncmVzc2VkQ291bnQrKyx0aGlzLmhhc0FueUJyb2tlbj10aGlzLmhhc0FueUJyb2tlbnx8IWUuaXNMb2FkZWQsdGhpcy5lbWl0KFwicHJvZ3Jlc3NcIix0aGlzLGUsdCksdGhpcy5qcURlZmVycmVkJiZ0aGlzLmpxRGVmZXJyZWQubm90aWZ5JiZ0aGlzLmpxRGVmZXJyZWQubm90aWZ5KHRoaXMsZSksdGhpcy5wcm9ncmVzc2VkQ291bnQ9PXRoaXMuaW1hZ2VzLmxlbmd0aCYmdGhpcy5jb21wbGV0ZSgpLHRoaXMub3B0aW9ucy5kZWJ1ZyYmYSYmYS5sb2coXCJwcm9ncmVzczogXCIrbixlLHQpfSxyLnByb3RvdHlwZS5jb21wbGV0ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaGFzQW55QnJva2VuP1wiZmFpbFwiOlwiZG9uZVwiO2lmKHRoaXMuaXNDb21wbGV0ZT0hMCx0aGlzLmVtaXQoZSx0aGlzKSx0aGlzLmVtaXQoXCJhbHdheXNcIix0aGlzKSx0aGlzLmpxRGVmZXJyZWQpe3ZhciB0PXRoaXMuaGFzQW55QnJva2VuP1wicmVqZWN0XCI6XCJyZXNvbHZlXCI7dGhpcy5qcURlZmVycmVkW3RdKHRoaXMpfX0scy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSkscy5wcm90b3R5cGUuY2hlY2s9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO3JldHVybiBlP3ZvaWQgdGhpcy5jb25maXJtKDAhPT10aGlzLmltZy5uYXR1cmFsV2lkdGgsXCJuYXR1cmFsV2lkdGhcIik6KHRoaXMucHJveHlJbWFnZT1uZXcgSW1hZ2UsdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyksdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpLHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyksdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsdGhpcyksdm9pZCh0aGlzLnByb3h5SW1hZ2Uuc3JjPXRoaXMuaW1nLnNyYykpfSxzLnByb3RvdHlwZS5nZXRJc0ltYWdlQ29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbWcuY29tcGxldGUmJnZvaWQgMCE9PXRoaXMuaW1nLm5hdHVyYWxXaWR0aH0scy5wcm90b3R5cGUuY29uZmlybT1mdW5jdGlvbihlLHQpe3RoaXMuaXNMb2FkZWQ9ZSx0aGlzLmVtaXQoXCJwcm9ncmVzc1wiLHRoaXMsdGhpcy5pbWcsdCl9LHMucHJvdG90eXBlLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKGUpe3ZhciB0PVwib25cIitlLnR5cGU7dGhpc1t0XSYmdGhpc1t0XShlKX0scy5wcm90b3R5cGUub25sb2FkPWZ1bmN0aW9uKCl7dGhpcy5jb25maXJtKCEwLFwib25sb2FkXCIpLHRoaXMudW5iaW5kRXZlbnRzKCl9LHMucHJvdG90eXBlLm9uZXJyb3I9ZnVuY3Rpb24oKXt0aGlzLmNvbmZpcm0oITEsXCJvbmVycm9yXCIpLHRoaXMudW5iaW5kRXZlbnRzKCl9LHMucHJvdG90eXBlLnVuYmluZEV2ZW50cz1mdW5jdGlvbigpe3RoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpLHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzKSx0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpLHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpfSxvLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHMucHJvdG90eXBlKSxvLnByb3RvdHlwZS5jaGVjaz1mdW5jdGlvbigpe3RoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcyksdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsdGhpcyksdGhpcy5pbWcuc3JjPXRoaXMudXJsO3ZhciBlPXRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7ZSYmKHRoaXMuY29uZmlybSgwIT09dGhpcy5pbWcubmF0dXJhbFdpZHRoLFwibmF0dXJhbFdpZHRoXCIpLHRoaXMudW5iaW5kRXZlbnRzKCkpfSxvLnByb3RvdHlwZS51bmJpbmRFdmVudHM9ZnVuY3Rpb24oKXt0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMpLHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLHRoaXMpfSxvLnByb3RvdHlwZS5jb25maXJtPWZ1bmN0aW9uKGUsdCl7dGhpcy5pc0xvYWRlZD1lLHRoaXMuZW1pdChcInByb2dyZXNzXCIsdGhpcyx0aGlzLmVsZW1lbnQsdCl9LHIubWFrZUpRdWVyeVBsdWdpbj1mdW5jdGlvbih0KXt0PXR8fGUualF1ZXJ5LHQmJihoPXQsaC5mbi5pbWFnZXNMb2FkZWQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgcih0aGlzLGUsdCk7cmV0dXJuIG4uanFEZWZlcnJlZC5wcm9taXNlKGgodGhpcykpfSl9LHIubWFrZUpRdWVyeVBsdWdpbigpLHJ9KTtcclxuLyohXHJcbldheXBvaW50cyAtIDMuMS4xXHJcbkNvcHlyaWdodCDCqSAyMDExLTIwMTUgQ2FsZWIgVHJvdWdodG9uXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuaHR0cHM6Ly9naXRodWIuY29tL2ltYWtld2VidGhpbmdzL3dheXBvaW50cy9ibG9nL21hc3Rlci9saWNlbnNlcy50eHRcclxuKi9cclxuKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0J1xyXG5cclxuICB2YXIga2V5Q291bnRlciA9IDBcclxuICB2YXIgYWxsV2F5cG9pbnRzID0ge31cclxuXHJcbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3dheXBvaW50ICovXHJcbiAgZnVuY3Rpb24gV2F5cG9pbnQob3B0aW9ucykge1xyXG4gICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gb3B0aW9ucyBwYXNzZWQgdG8gV2F5cG9pbnQgY29uc3RydWN0b3InKVxyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb25zLmVsZW1lbnQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IG9wdGlvbiBwYXNzZWQgdG8gV2F5cG9pbnQgY29uc3RydWN0b3InKVxyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb25zLmhhbmRsZXIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBoYW5kbGVyIG9wdGlvbiBwYXNzZWQgdG8gV2F5cG9pbnQgY29uc3RydWN0b3InKVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMua2V5ID0gJ3dheXBvaW50LScgKyBrZXlDb3VudGVyXHJcbiAgICB0aGlzLm9wdGlvbnMgPSBXYXlwb2ludC5BZGFwdGVyLmV4dGVuZCh7fSwgV2F5cG9pbnQuZGVmYXVsdHMsIG9wdGlvbnMpXHJcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuZWxlbWVudFxyXG4gICAgdGhpcy5hZGFwdGVyID0gbmV3IFdheXBvaW50LkFkYXB0ZXIodGhpcy5lbGVtZW50KVxyXG4gICAgdGhpcy5jYWxsYmFjayA9IG9wdGlvbnMuaGFuZGxlclxyXG4gICAgdGhpcy5heGlzID0gdGhpcy5vcHRpb25zLmhvcml6b250YWwgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnXHJcbiAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZW5hYmxlZFxyXG4gICAgdGhpcy50cmlnZ2VyUG9pbnQgPSBudWxsXHJcbiAgICB0aGlzLmdyb3VwID0gV2F5cG9pbnQuR3JvdXAuZmluZE9yQ3JlYXRlKHtcclxuICAgICAgbmFtZTogdGhpcy5vcHRpb25zLmdyb3VwLFxyXG4gICAgICBheGlzOiB0aGlzLmF4aXNcclxuICAgIH0pXHJcbiAgICB0aGlzLmNvbnRleHQgPSBXYXlwb2ludC5Db250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCh0aGlzLm9wdGlvbnMuY29udGV4dClcclxuXHJcbiAgICBpZiAoV2F5cG9pbnQub2Zmc2V0QWxpYXNlc1t0aGlzLm9wdGlvbnMub2Zmc2V0XSkge1xyXG4gICAgICB0aGlzLm9wdGlvbnMub2Zmc2V0ID0gV2F5cG9pbnQub2Zmc2V0QWxpYXNlc1t0aGlzLm9wdGlvbnMub2Zmc2V0XVxyXG4gICAgfVxyXG4gICAgdGhpcy5ncm91cC5hZGQodGhpcylcclxuICAgIHRoaXMuY29udGV4dC5hZGQodGhpcylcclxuICAgIGFsbFdheXBvaW50c1t0aGlzLmtleV0gPSB0aGlzXHJcbiAgICBrZXlDb3VudGVyICs9IDFcclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBXYXlwb2ludC5wcm90b3R5cGUucXVldWVUcmlnZ2VyID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XHJcbiAgICB0aGlzLmdyb3VwLnF1ZXVlVHJpZ2dlcih0aGlzLCBkaXJlY3Rpb24pXHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgV2F5cG9pbnQucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihhcmdzKSB7XHJcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGlmICh0aGlzLmNhbGxiYWNrKSB7XHJcbiAgICAgIHRoaXMuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qIFB1YmxpYyAqL1xyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kZXN0cm95ICovXHJcbiAgV2F5cG9pbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuY29udGV4dC5yZW1vdmUodGhpcylcclxuICAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpXHJcbiAgICBkZWxldGUgYWxsV2F5cG9pbnRzW3RoaXMua2V5XVxyXG4gIH1cclxuXHJcbiAgLyogUHVibGljICovXHJcbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rpc2FibGUgKi9cclxuICBXYXlwb2ludC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKiBQdWJsaWMgKi9cclxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZW5hYmxlICovXHJcbiAgV2F5cG9pbnQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LnJlZnJlc2goKVxyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qIFB1YmxpYyAqL1xyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9uZXh0ICovXHJcbiAgV2F5cG9pbnQucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmdyb3VwLm5leHQodGhpcylcclxuICB9XHJcblxyXG4gIC8qIFB1YmxpYyAqL1xyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9wcmV2aW91cyAqL1xyXG4gIFdheXBvaW50LnByb3RvdHlwZS5wcmV2aW91cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAucHJldmlvdXModGhpcylcclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBXYXlwb2ludC5pbnZva2VBbGwgPSBmdW5jdGlvbihtZXRob2QpIHtcclxuICAgIHZhciBhbGxXYXlwb2ludHNBcnJheSA9IFtdXHJcbiAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiBhbGxXYXlwb2ludHMpIHtcclxuICAgICAgYWxsV2F5cG9pbnRzQXJyYXkucHVzaChhbGxXYXlwb2ludHNbd2F5cG9pbnRLZXldKVxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50c0FycmF5Lmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgIGFsbFdheXBvaW50c0FycmF5W2ldW21ldGhvZF0oKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogUHVibGljICovXHJcbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rlc3Ryb3ktYWxsICovXHJcbiAgV2F5cG9pbnQuZGVzdHJveUFsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgV2F5cG9pbnQuaW52b2tlQWxsKCdkZXN0cm95JylcclxuICB9XHJcblxyXG4gIC8qIFB1YmxpYyAqL1xyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kaXNhYmxlLWFsbCAqL1xyXG4gIFdheXBvaW50LmRpc2FibGVBbGwgPSBmdW5jdGlvbigpIHtcclxuICAgIFdheXBvaW50Lmludm9rZUFsbCgnZGlzYWJsZScpXHJcbiAgfVxyXG5cclxuICAvKiBQdWJsaWMgKi9cclxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZW5hYmxlLWFsbCAqL1xyXG4gIFdheXBvaW50LmVuYWJsZUFsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgV2F5cG9pbnQuaW52b2tlQWxsKCdlbmFibGUnKVxyXG4gIH1cclxuXHJcbiAgLyogUHVibGljICovXHJcbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3JlZnJlc2gtYWxsICovXHJcbiAgV2F5cG9pbnQucmVmcmVzaEFsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcclxuICB9XHJcblxyXG4gIC8qIFB1YmxpYyAqL1xyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS92aWV3cG9ydC1oZWlnaHQgKi9cclxuICBXYXlwb2ludC52aWV3cG9ydEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XHJcbiAgfVxyXG5cclxuICAvKiBQdWJsaWMgKi9cclxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvdmlld3BvcnQtd2lkdGggKi9cclxuICBXYXlwb2ludC52aWV3cG9ydFdpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXHJcbiAgfVxyXG5cclxuICBXYXlwb2ludC5hZGFwdGVycyA9IFtdXHJcblxyXG4gIFdheXBvaW50LmRlZmF1bHRzID0ge1xyXG4gICAgY29udGV4dDogd2luZG93LFxyXG4gICAgY29udGludW91czogdHJ1ZSxcclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICBncm91cDogJ2RlZmF1bHQnLFxyXG4gICAgaG9yaXpvbnRhbDogZmFsc2UsXHJcbiAgICBvZmZzZXQ6IDBcclxuICB9XHJcblxyXG4gIFdheXBvaW50Lm9mZnNldEFsaWFzZXMgPSB7XHJcbiAgICAnYm90dG9tLWluLXZpZXcnOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pbm5lckhlaWdodCgpIC0gdGhpcy5hZGFwdGVyLm91dGVySGVpZ2h0KClcclxuICAgIH0sXHJcbiAgICAncmlnaHQtaW4tdmlldyc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmlubmVyV2lkdGgoKSAtIHRoaXMuYWRhcHRlci5vdXRlcldpZHRoKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdpbmRvdy5XYXlwb2ludCA9IFdheXBvaW50XHJcbn0oKSlcclxuOyhmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCdcclxuXHJcbiAgZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lU2hpbShjYWxsYmFjaykge1xyXG4gICAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MClcclxuICB9XHJcblxyXG4gIHZhciBrZXlDb3VudGVyID0gMFxyXG4gIHZhciBjb250ZXh0cyA9IHt9XHJcbiAgdmFyIFdheXBvaW50ID0gd2luZG93LldheXBvaW50XHJcbiAgdmFyIG9sZFdpbmRvd0xvYWQgPSB3aW5kb3cub25sb2FkXHJcblxyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9jb250ZXh0ICovXHJcbiAgZnVuY3Rpb24gQ29udGV4dChlbGVtZW50KSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XHJcbiAgICB0aGlzLkFkYXB0ZXIgPSBXYXlwb2ludC5BZGFwdGVyXHJcbiAgICB0aGlzLmFkYXB0ZXIgPSBuZXcgdGhpcy5BZGFwdGVyKGVsZW1lbnQpXHJcbiAgICB0aGlzLmtleSA9ICd3YXlwb2ludC1jb250ZXh0LScgKyBrZXlDb3VudGVyXHJcbiAgICB0aGlzLmRpZFNjcm9sbCA9IGZhbHNlXHJcbiAgICB0aGlzLmRpZFJlc2l6ZSA9IGZhbHNlXHJcbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcclxuICAgICAgeDogdGhpcy5hZGFwdGVyLnNjcm9sbExlZnQoKSxcclxuICAgICAgeTogdGhpcy5hZGFwdGVyLnNjcm9sbFRvcCgpXHJcbiAgICB9XHJcbiAgICB0aGlzLndheXBvaW50cyA9IHtcclxuICAgICAgdmVydGljYWw6IHt9LFxyXG4gICAgICBob3Jpem9udGFsOiB7fVxyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnQud2F5cG9pbnRDb250ZXh0S2V5ID0gdGhpcy5rZXlcclxuICAgIGNvbnRleHRzW2VsZW1lbnQud2F5cG9pbnRDb250ZXh0S2V5XSA9IHRoaXNcclxuICAgIGtleUNvdW50ZXIgKz0gMVxyXG5cclxuICAgIHRoaXMuY3JlYXRlVGhyb3R0bGVkU2Nyb2xsSGFuZGxlcigpXHJcbiAgICB0aGlzLmNyZWF0ZVRocm90dGxlZFJlc2l6ZUhhbmRsZXIoKVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIENvbnRleHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XHJcbiAgICB2YXIgYXhpcyA9IHdheXBvaW50Lm9wdGlvbnMuaG9yaXpvbnRhbCA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCdcclxuICAgIHRoaXMud2F5cG9pbnRzW2F4aXNdW3dheXBvaW50LmtleV0gPSB3YXlwb2ludFxyXG4gICAgdGhpcy5yZWZyZXNoKClcclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBDb250ZXh0LnByb3RvdHlwZS5jaGVja0VtcHR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaG9yaXpvbnRhbEVtcHR5ID0gdGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMuaG9yaXpvbnRhbClcclxuICAgIHZhciB2ZXJ0aWNhbEVtcHR5ID0gdGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMudmVydGljYWwpXHJcbiAgICBpZiAoaG9yaXpvbnRhbEVtcHR5ICYmIHZlcnRpY2FsRW1wdHkpIHtcclxuICAgICAgdGhpcy5hZGFwdGVyLm9mZignLndheXBvaW50cycpXHJcbiAgICAgIGRlbGV0ZSBjb250ZXh0c1t0aGlzLmtleV1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXNcclxuXHJcbiAgICBmdW5jdGlvbiByZXNpemVIYW5kbGVyKCkge1xyXG4gICAgICBzZWxmLmhhbmRsZVJlc2l6ZSgpXHJcbiAgICAgIHNlbGYuZGlkUmVzaXplID0gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFkYXB0ZXIub24oJ3Jlc2l6ZS53YXlwb2ludHMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKCFzZWxmLmRpZFJlc2l6ZSkge1xyXG4gICAgICAgIHNlbGYuZGlkUmVzaXplID0gdHJ1ZVxyXG4gICAgICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNpemVIYW5kbGVyKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIENvbnRleHQucHJvdG90eXBlLmNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBzZWxmID0gdGhpc1xyXG4gICAgZnVuY3Rpb24gc2Nyb2xsSGFuZGxlcigpIHtcclxuICAgICAgc2VsZi5oYW5kbGVTY3JvbGwoKVxyXG4gICAgICBzZWxmLmRpZFNjcm9sbCA9IGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5hZGFwdGVyLm9uKCdzY3JvbGwud2F5cG9pbnRzJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghc2VsZi5kaWRTY3JvbGwgfHwgV2F5cG9pbnQuaXNUb3VjaCkge1xyXG4gICAgICAgIHNlbGYuZGlkU2Nyb2xsID0gdHJ1ZVxyXG4gICAgICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY3JvbGxIYW5kbGVyKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIENvbnRleHQucHJvdG90eXBlLmhhbmRsZVJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBDb250ZXh0LnByb3RvdHlwZS5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciB0cmlnZ2VyZWRHcm91cHMgPSB7fVxyXG4gICAgdmFyIGF4ZXMgPSB7XHJcbiAgICAgIGhvcml6b250YWw6IHtcclxuICAgICAgICBuZXdTY3JvbGw6IHRoaXMuYWRhcHRlci5zY3JvbGxMZWZ0KCksXHJcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC54LFxyXG4gICAgICAgIGZvcndhcmQ6ICdyaWdodCcsXHJcbiAgICAgICAgYmFja3dhcmQ6ICdsZWZ0J1xyXG4gICAgICB9LFxyXG4gICAgICB2ZXJ0aWNhbDoge1xyXG4gICAgICAgIG5ld1Njcm9sbDogdGhpcy5hZGFwdGVyLnNjcm9sbFRvcCgpLFxyXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueSxcclxuICAgICAgICBmb3J3YXJkOiAnZG93bicsXHJcbiAgICAgICAgYmFja3dhcmQ6ICd1cCdcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xyXG4gICAgICB2YXIgYXhpcyA9IGF4ZXNbYXhpc0tleV1cclxuICAgICAgdmFyIGlzRm9yd2FyZCA9IGF4aXMubmV3U2Nyb2xsID4gYXhpcy5vbGRTY3JvbGxcclxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRm9yd2FyZCA/IGF4aXMuZm9yd2FyZCA6IGF4aXMuYmFja3dhcmRcclxuXHJcbiAgICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIHRoaXMud2F5cG9pbnRzW2F4aXNLZXldKSB7XHJcbiAgICAgICAgdmFyIHdheXBvaW50ID0gdGhpcy53YXlwb2ludHNbYXhpc0tleV1bd2F5cG9pbnRLZXldXHJcbiAgICAgICAgdmFyIHdhc0JlZm9yZVRyaWdnZXJQb2ludCA9IGF4aXMub2xkU2Nyb2xsIDwgd2F5cG9pbnQudHJpZ2dlclBvaW50XHJcbiAgICAgICAgdmFyIG5vd0FmdGVyVHJpZ2dlclBvaW50ID0gYXhpcy5uZXdTY3JvbGwgPj0gd2F5cG9pbnQudHJpZ2dlclBvaW50XHJcbiAgICAgICAgdmFyIGNyb3NzZWRGb3J3YXJkID0gd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmIG5vd0FmdGVyVHJpZ2dlclBvaW50XHJcbiAgICAgICAgdmFyIGNyb3NzZWRCYWNrd2FyZCA9ICF3YXNCZWZvcmVUcmlnZ2VyUG9pbnQgJiYgIW5vd0FmdGVyVHJpZ2dlclBvaW50XHJcbiAgICAgICAgaWYgKGNyb3NzZWRGb3J3YXJkIHx8IGNyb3NzZWRCYWNrd2FyZCkge1xyXG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGRpcmVjdGlvbilcclxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xyXG4gICAgICB0cmlnZ2VyZWRHcm91cHNbZ3JvdXBLZXldLmZsdXNoVHJpZ2dlcnMoKVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMub2xkU2Nyb2xsID0ge1xyXG4gICAgICB4OiBheGVzLmhvcml6b250YWwubmV3U2Nyb2xsLFxyXG4gICAgICB5OiBheGVzLnZlcnRpY2FsLm5ld1Njcm9sbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIENvbnRleHQucHJvdG90eXBlLmlubmVySGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xyXG4gICAgaWYgKHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93KSB7XHJcbiAgICAgIHJldHVybiBXYXlwb2ludC52aWV3cG9ydEhlaWdodCgpXHJcbiAgICB9XHJcbiAgICAvKmVzbGludC1lbmFibGUgZXFlcWVxICovXHJcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlubmVySGVpZ2h0KClcclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBDb250ZXh0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih3YXlwb2ludCkge1xyXG4gICAgZGVsZXRlIHRoaXMud2F5cG9pbnRzW3dheXBvaW50LmF4aXNdW3dheXBvaW50LmtleV1cclxuICAgIHRoaXMuY2hlY2tFbXB0eSgpXHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLyplc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cclxuICAgIGlmICh0aGlzLmVsZW1lbnQgPT0gdGhpcy5lbGVtZW50LndpbmRvdykge1xyXG4gICAgICByZXR1cm4gV2F5cG9pbnQudmlld3BvcnRXaWR0aCgpXHJcbiAgICB9XHJcbiAgICAvKmVzbGludC1lbmFibGUgZXFlcWVxICovXHJcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlubmVyV2lkdGgoKVxyXG4gIH1cclxuXHJcbiAgLyogUHVibGljICovXHJcbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2NvbnRleHQtZGVzdHJveSAqL1xyXG4gIENvbnRleHQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBhbGxXYXlwb2ludHMgPSBbXVxyXG4gICAgZm9yICh2YXIgYXhpcyBpbiB0aGlzLndheXBvaW50cykge1xyXG4gICAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiB0aGlzLndheXBvaW50c1theGlzXSkge1xyXG4gICAgICAgIGFsbFdheXBvaW50cy5wdXNoKHRoaXMud2F5cG9pbnRzW2F4aXNdW3dheXBvaW50S2V5XSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xyXG4gICAgICBhbGxXYXlwb2ludHNbaV0uZGVzdHJveSgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBQdWJsaWMgKi9cclxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dC1yZWZyZXNoICovXHJcbiAgQ29udGV4dC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLyplc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cclxuICAgIHZhciBpc1dpbmRvdyA9IHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93XHJcbiAgICAvKmVzbGludC1lbmFibGUgZXFlcWVxICovXHJcbiAgICB2YXIgY29udGV4dE9mZnNldCA9IGlzV2luZG93ID8gdW5kZWZpbmVkIDogdGhpcy5hZGFwdGVyLm9mZnNldCgpXHJcbiAgICB2YXIgdHJpZ2dlcmVkR3JvdXBzID0ge31cclxuICAgIHZhciBheGVzXHJcblxyXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKVxyXG4gICAgYXhlcyA9IHtcclxuICAgICAgaG9yaXpvbnRhbDoge1xyXG4gICAgICAgIGNvbnRleHRPZmZzZXQ6IGlzV2luZG93ID8gMCA6IGNvbnRleHRPZmZzZXQubGVmdCxcclxuICAgICAgICBjb250ZXh0U2Nyb2xsOiBpc1dpbmRvdyA/IDAgOiB0aGlzLm9sZFNjcm9sbC54LFxyXG4gICAgICAgIGNvbnRleHREaW1lbnNpb246IHRoaXMuaW5uZXJXaWR0aCgpLFxyXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueCxcclxuICAgICAgICBmb3J3YXJkOiAncmlnaHQnLFxyXG4gICAgICAgIGJhY2t3YXJkOiAnbGVmdCcsXHJcbiAgICAgICAgb2Zmc2V0UHJvcDogJ2xlZnQnXHJcbiAgICAgIH0sXHJcbiAgICAgIHZlcnRpY2FsOiB7XHJcbiAgICAgICAgY29udGV4dE9mZnNldDogaXNXaW5kb3cgPyAwIDogY29udGV4dE9mZnNldC50b3AsXHJcbiAgICAgICAgY29udGV4dFNjcm9sbDogaXNXaW5kb3cgPyAwIDogdGhpcy5vbGRTY3JvbGwueSxcclxuICAgICAgICBjb250ZXh0RGltZW5zaW9uOiB0aGlzLmlubmVySGVpZ2h0KCksXHJcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC55LFxyXG4gICAgICAgIGZvcndhcmQ6ICdkb3duJyxcclxuICAgICAgICBiYWNrd2FyZDogJ3VwJyxcclxuICAgICAgICBvZmZzZXRQcm9wOiAndG9wJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgYXhpc0tleSBpbiBheGVzKSB7XHJcbiAgICAgIHZhciBheGlzID0gYXhlc1theGlzS2V5XVxyXG4gICAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiB0aGlzLndheXBvaW50c1theGlzS2V5XSkge1xyXG4gICAgICAgIHZhciB3YXlwb2ludCA9IHRoaXMud2F5cG9pbnRzW2F4aXNLZXldW3dheXBvaW50S2V5XVxyXG4gICAgICAgIHZhciBhZGp1c3RtZW50ID0gd2F5cG9pbnQub3B0aW9ucy5vZmZzZXRcclxuICAgICAgICB2YXIgb2xkVHJpZ2dlclBvaW50ID0gd2F5cG9pbnQudHJpZ2dlclBvaW50XHJcbiAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXQgPSAwXHJcbiAgICAgICAgdmFyIGZyZXNoV2F5cG9pbnQgPSBvbGRUcmlnZ2VyUG9pbnQgPT0gbnVsbFxyXG4gICAgICAgIHZhciBjb250ZXh0TW9kaWZpZXIsIHdhc0JlZm9yZVNjcm9sbCwgbm93QWZ0ZXJTY3JvbGxcclxuICAgICAgICB2YXIgdHJpZ2dlcmVkQmFja3dhcmQsIHRyaWdnZXJlZEZvcndhcmRcclxuXHJcbiAgICAgICAgaWYgKHdheXBvaW50LmVsZW1lbnQgIT09IHdheXBvaW50LmVsZW1lbnQud2luZG93KSB7XHJcbiAgICAgICAgICBlbGVtZW50T2Zmc2V0ID0gd2F5cG9pbnQuYWRhcHRlci5vZmZzZXQoKVtheGlzLm9mZnNldFByb3BdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGFkanVzdG1lbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIGFkanVzdG1lbnQgPSBhZGp1c3RtZW50LmFwcGx5KHdheXBvaW50KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYWRqdXN0bWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGFkanVzdG1lbnQgPSBwYXJzZUZsb2F0KGFkanVzdG1lbnQpXHJcbiAgICAgICAgICBpZiAod2F5cG9pbnQub3B0aW9ucy5vZmZzZXQuaW5kZXhPZignJScpID4gLSAxKSB7XHJcbiAgICAgICAgICAgIGFkanVzdG1lbnQgPSBNYXRoLmNlaWwoYXhpcy5jb250ZXh0RGltZW5zaW9uICogYWRqdXN0bWVudCAvIDEwMClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRNb2RpZmllciA9IGF4aXMuY29udGV4dFNjcm9sbCAtIGF4aXMuY29udGV4dE9mZnNldFxyXG4gICAgICAgIHdheXBvaW50LnRyaWdnZXJQb2ludCA9IGVsZW1lbnRPZmZzZXQgKyBjb250ZXh0TW9kaWZpZXIgLSBhZGp1c3RtZW50XHJcbiAgICAgICAgd2FzQmVmb3JlU2Nyb2xsID0gb2xkVHJpZ2dlclBvaW50IDwgYXhpcy5vbGRTY3JvbGxcclxuICAgICAgICBub3dBZnRlclNjcm9sbCA9IHdheXBvaW50LnRyaWdnZXJQb2ludCA+PSBheGlzLm9sZFNjcm9sbFxyXG4gICAgICAgIHRyaWdnZXJlZEJhY2t3YXJkID0gd2FzQmVmb3JlU2Nyb2xsICYmIG5vd0FmdGVyU2Nyb2xsXHJcbiAgICAgICAgdHJpZ2dlcmVkRm9yd2FyZCA9ICF3YXNCZWZvcmVTY3JvbGwgJiYgIW5vd0FmdGVyU2Nyb2xsXHJcblxyXG4gICAgICAgIGlmICghZnJlc2hXYXlwb2ludCAmJiB0cmlnZ2VyZWRCYWNrd2FyZCkge1xyXG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuYmFja3dhcmQpXHJcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWZyZXNoV2F5cG9pbnQgJiYgdHJpZ2dlcmVkRm9yd2FyZCkge1xyXG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuZm9yd2FyZClcclxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChmcmVzaFdheXBvaW50ICYmIGF4aXMub2xkU2Nyb2xsID49IHdheXBvaW50LnRyaWdnZXJQb2ludCkge1xyXG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuZm9yd2FyZClcclxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcclxuICAgICAgZm9yICh2YXIgZ3JvdXBLZXkgaW4gdHJpZ2dlcmVkR3JvdXBzKSB7XHJcbiAgICAgICAgdHJpZ2dlcmVkR3JvdXBzW2dyb3VwS2V5XS5mbHVzaFRyaWdnZXJzKClcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIENvbnRleHQuZmluZE9yQ3JlYXRlQnlFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIENvbnRleHQuZmluZEJ5RWxlbWVudChlbGVtZW50KSB8fCBuZXcgQ29udGV4dChlbGVtZW50KVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIENvbnRleHQucmVmcmVzaEFsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yICh2YXIgY29udGV4dElkIGluIGNvbnRleHRzKSB7XHJcbiAgICAgIGNvbnRleHRzW2NvbnRleHRJZF0ucmVmcmVzaCgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBQdWJsaWMgKi9cclxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dC1maW5kLWJ5LWVsZW1lbnQgKi9cclxuICBDb250ZXh0LmZpbmRCeUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gY29udGV4dHNbZWxlbWVudC53YXlwb2ludENvbnRleHRLZXldXHJcbiAgfVxyXG5cclxuICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAob2xkV2luZG93TG9hZCkge1xyXG4gICAgICBvbGRXaW5kb3dMb2FkKClcclxuICAgIH1cclxuICAgIENvbnRleHQucmVmcmVzaEFsbCgpXHJcbiAgfVxyXG5cclxuICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgdmFyIHJlcXVlc3RGbiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZVNoaW1cclxuICAgIHJlcXVlc3RGbi5jYWxsKHdpbmRvdywgY2FsbGJhY2spXHJcbiAgfVxyXG4gIFdheXBvaW50LkNvbnRleHQgPSBDb250ZXh0XHJcbn0oKSlcclxuOyhmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCdcclxuXHJcbiAgZnVuY3Rpb24gYnlUcmlnZ2VyUG9pbnQoYSwgYikge1xyXG4gICAgcmV0dXJuIGEudHJpZ2dlclBvaW50IC0gYi50cmlnZ2VyUG9pbnRcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJ5UmV2ZXJzZVRyaWdnZXJQb2ludChhLCBiKSB7XHJcbiAgICByZXR1cm4gYi50cmlnZ2VyUG9pbnQgLSBhLnRyaWdnZXJQb2ludFxyXG4gIH1cclxuXHJcbiAgdmFyIGdyb3VwcyA9IHtcclxuICAgIHZlcnRpY2FsOiB7fSxcclxuICAgIGhvcml6b250YWw6IHt9XHJcbiAgfVxyXG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxyXG5cclxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZ3JvdXAgKi9cclxuICBmdW5jdGlvbiBHcm91cChvcHRpb25zKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWVcclxuICAgIHRoaXMuYXhpcyA9IG9wdGlvbnMuYXhpc1xyXG4gICAgdGhpcy5pZCA9IHRoaXMubmFtZSArICctJyArIHRoaXMuYXhpc1xyXG4gICAgdGhpcy53YXlwb2ludHMgPSBbXVxyXG4gICAgdGhpcy5jbGVhclRyaWdnZXJRdWV1ZXMoKVxyXG4gICAgZ3JvdXBzW3RoaXMuYXhpc11bdGhpcy5uYW1lXSA9IHRoaXNcclxuICB9XHJcblxyXG4gIC8qIFByaXZhdGUgKi9cclxuICBHcm91cC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24od2F5cG9pbnQpIHtcclxuICAgIHRoaXMud2F5cG9pbnRzLnB1c2god2F5cG9pbnQpXHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgR3JvdXAucHJvdG90eXBlLmNsZWFyVHJpZ2dlclF1ZXVlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy50cmlnZ2VyUXVldWVzID0ge1xyXG4gICAgICB1cDogW10sXHJcbiAgICAgIGRvd246IFtdLFxyXG4gICAgICBsZWZ0OiBbXSxcclxuICAgICAgcmlnaHQ6IFtdXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgR3JvdXAucHJvdG90eXBlLmZsdXNoVHJpZ2dlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgIGZvciAodmFyIGRpcmVjdGlvbiBpbiB0aGlzLnRyaWdnZXJRdWV1ZXMpIHtcclxuICAgICAgdmFyIHdheXBvaW50cyA9IHRoaXMudHJpZ2dlclF1ZXVlc1tkaXJlY3Rpb25dXHJcbiAgICAgIHZhciByZXZlcnNlID0gZGlyZWN0aW9uID09PSAndXAnIHx8IGRpcmVjdGlvbiA9PT0gJ2xlZnQnXHJcbiAgICAgIHdheXBvaW50cy5zb3J0KHJldmVyc2UgPyBieVJldmVyc2VUcmlnZ2VyUG9pbnQgOiBieVRyaWdnZXJQb2ludClcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkgKz0gMSkge1xyXG4gICAgICAgIHZhciB3YXlwb2ludCA9IHdheXBvaW50c1tpXVxyXG4gICAgICAgIGlmICh3YXlwb2ludC5vcHRpb25zLmNvbnRpbnVvdXMgfHwgaSA9PT0gd2F5cG9pbnRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIHdheXBvaW50LnRyaWdnZXIoW2RpcmVjdGlvbl0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmNsZWFyVHJpZ2dlclF1ZXVlcygpXHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgR3JvdXAucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbih3YXlwb2ludCkge1xyXG4gICAgdGhpcy53YXlwb2ludHMuc29ydChieVRyaWdnZXJQb2ludClcclxuICAgIHZhciBpbmRleCA9IFdheXBvaW50LkFkYXB0ZXIuaW5BcnJheSh3YXlwb2ludCwgdGhpcy53YXlwb2ludHMpXHJcbiAgICB2YXIgaXNMYXN0ID0gaW5kZXggPT09IHRoaXMud2F5cG9pbnRzLmxlbmd0aCAtIDFcclxuICAgIHJldHVybiBpc0xhc3QgPyBudWxsIDogdGhpcy53YXlwb2ludHNbaW5kZXggKyAxXVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIEdyb3VwLnByb3RvdHlwZS5wcmV2aW91cyA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XHJcbiAgICB0aGlzLndheXBvaW50cy5zb3J0KGJ5VHJpZ2dlclBvaW50KVxyXG4gICAgdmFyIGluZGV4ID0gV2F5cG9pbnQuQWRhcHRlci5pbkFycmF5KHdheXBvaW50LCB0aGlzLndheXBvaW50cylcclxuICAgIHJldHVybiBpbmRleCA/IHRoaXMud2F5cG9pbnRzW2luZGV4IC0gMV0gOiBudWxsXHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgR3JvdXAucHJvdG90eXBlLnF1ZXVlVHJpZ2dlciA9IGZ1bmN0aW9uKHdheXBvaW50LCBkaXJlY3Rpb24pIHtcclxuICAgIHRoaXMudHJpZ2dlclF1ZXVlc1tkaXJlY3Rpb25dLnB1c2god2F5cG9pbnQpXHJcbiAgfVxyXG5cclxuICAvKiBQcml2YXRlICovXHJcbiAgR3JvdXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XHJcbiAgICB2YXIgaW5kZXggPSBXYXlwb2ludC5BZGFwdGVyLmluQXJyYXkod2F5cG9pbnQsIHRoaXMud2F5cG9pbnRzKVxyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdGhpcy53YXlwb2ludHMuc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogUHVibGljICovXHJcbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2ZpcnN0ICovXHJcbiAgR3JvdXAucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy53YXlwb2ludHNbMF1cclxuICB9XHJcblxyXG4gIC8qIFB1YmxpYyAqL1xyXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9sYXN0ICovXHJcbiAgR3JvdXAucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLndheXBvaW50c1t0aGlzLndheXBvaW50cy5sZW5ndGggLSAxXVxyXG4gIH1cclxuXHJcbiAgLyogUHJpdmF0ZSAqL1xyXG4gIEdyb3VwLmZpbmRPckNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBncm91cHNbb3B0aW9ucy5heGlzXVtvcHRpb25zLm5hbWVdIHx8IG5ldyBHcm91cChvcHRpb25zKVxyXG4gIH1cclxuXHJcbiAgV2F5cG9pbnQuR3JvdXAgPSBHcm91cFxyXG59KCkpXHJcbjsoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnXHJcblxyXG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxyXG5cclxuICBmdW5jdGlvbiBpc1dpbmRvdyhlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gZWxlbWVudCA9PT0gZWxlbWVudC53aW5kb3dcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XHJcbiAgICBpZiAoaXNXaW5kb3coZWxlbWVudCkpIHtcclxuICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgIH1cclxuICAgIHJldHVybiBlbGVtZW50LmRlZmF1bHRWaWV3XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBOb0ZyYW1ld29ya0FkYXB0ZXIoZWxlbWVudCkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxyXG4gICAgdGhpcy5oYW5kbGVycyA9IHt9XHJcbiAgfVxyXG5cclxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLmlubmVySGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaXNXaW4gPSBpc1dpbmRvdyh0aGlzLmVsZW1lbnQpXHJcbiAgICByZXR1cm4gaXNXaW4gPyB0aGlzLmVsZW1lbnQuaW5uZXJIZWlnaHQgOiB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0XHJcbiAgfVxyXG5cclxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLmlubmVyV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpc1dpbiA9IGlzV2luZG93KHRoaXMuZWxlbWVudClcclxuICAgIHJldHVybiBpc1dpbiA/IHRoaXMuZWxlbWVudC5pbm5lcldpZHRoIDogdGhpcy5lbGVtZW50LmNsaWVudFdpZHRoXHJcbiAgfVxyXG5cclxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoZWxlbWVudCwgbGlzdGVuZXJzLCBoYW5kbGVyKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlbmQgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldXHJcbiAgICAgICAgaWYgKCFoYW5kbGVyIHx8IGhhbmRsZXIgPT09IGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobGlzdGVuZXIpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGV2ZW50UGFydHMgPSBldmVudC5zcGxpdCgnLicpXHJcbiAgICB2YXIgZXZlbnRUeXBlID0gZXZlbnRQYXJ0c1swXVxyXG4gICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50UGFydHNbMV1cclxuICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50XHJcblxyXG4gICAgaWYgKG5hbWVzcGFjZSAmJiB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV0gJiYgZXZlbnRUeXBlKSB7XHJcbiAgICAgIHJlbW92ZUxpc3RlbmVycyhlbGVtZW50LCB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV1bZXZlbnRUeXBlXSwgaGFuZGxlcilcclxuICAgICAgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdW2V2ZW50VHlwZV0gPSBbXVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXZlbnRUeXBlKSB7XHJcbiAgICAgIGZvciAodmFyIG5zIGluIHRoaXMuaGFuZGxlcnMpIHtcclxuICAgICAgICByZW1vdmVMaXN0ZW5lcnMoZWxlbWVudCwgdGhpcy5oYW5kbGVyc1tuc11bZXZlbnRUeXBlXSB8fCBbXSwgaGFuZGxlcilcclxuICAgICAgICB0aGlzLmhhbmRsZXJzW25zXVtldmVudFR5cGVdID0gW11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobmFtZXNwYWNlICYmIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSkge1xyXG4gICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMuaGFuZGxlcnNbbmFtZXNwYWNlXSkge1xyXG4gICAgICAgIHJlbW92ZUxpc3RlbmVycyhlbGVtZW50LCB0aGlzLmhhbmRsZXJzW25hbWVzcGFjZV1bdHlwZV0sIGhhbmRsZXIpXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdID0ge31cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qIEFkYXB0ZWQgZnJvbSBqUXVlcnkgMS54IG9mZnNldCgpICovXHJcbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5vZmZzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICghdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XHJcbiAgICB2YXIgd2luID0gZ2V0V2luZG93KHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50KVxyXG4gICAgdmFyIHJlY3QgPSB7XHJcbiAgICAgIHRvcDogMCxcclxuICAgICAgbGVmdDogMFxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XHJcbiAgICAgIHJlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcCxcclxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jdW1lbnRFbGVtZW50LmNsaWVudExlZnRcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldmVudCwgaGFuZGxlcikge1xyXG4gICAgdmFyIGV2ZW50UGFydHMgPSBldmVudC5zcGxpdCgnLicpXHJcbiAgICB2YXIgZXZlbnRUeXBlID0gZXZlbnRQYXJ0c1swXVxyXG4gICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50UGFydHNbMV0gfHwgJ19fZGVmYXVsdCdcclxuICAgIHZhciBuc0hhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdID0gdGhpcy5oYW5kbGVyc1tuYW1lc3BhY2VdIHx8IHt9XHJcbiAgICB2YXIgbnNUeXBlTGlzdCA9IG5zSGFuZGxlcnNbZXZlbnRUeXBlXSA9IG5zSGFuZGxlcnNbZXZlbnRUeXBlXSB8fCBbXVxyXG5cclxuICAgIG5zVHlwZUxpc3QucHVzaChoYW5kbGVyKVxyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyKVxyXG4gIH1cclxuXHJcbiAgTm9GcmFtZXdvcmtBZGFwdGVyLnByb3RvdHlwZS5vdXRlckhlaWdodCA9IGZ1bmN0aW9uKGluY2x1ZGVNYXJnaW4pIHtcclxuICAgIHZhciBoZWlnaHQgPSB0aGlzLmlubmVySGVpZ2h0KClcclxuICAgIHZhciBjb21wdXRlZFN0eWxlXHJcblxyXG4gICAgaWYgKGluY2x1ZGVNYXJnaW4gJiYgIWlzV2luZG93KHRoaXMuZWxlbWVudCkpIHtcclxuICAgICAgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudClcclxuICAgICAgaGVpZ2h0ICs9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUubWFyZ2luVG9wLCAxMClcclxuICAgICAgaGVpZ2h0ICs9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLCAxMClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGVpZ2h0XHJcbiAgfVxyXG5cclxuICBOb0ZyYW1ld29ya0FkYXB0ZXIucHJvdG90eXBlLm91dGVyV2lkdGggPSBmdW5jdGlvbihpbmNsdWRlTWFyZ2luKSB7XHJcbiAgICB2YXIgd2lkdGggPSB0aGlzLmlubmVyV2lkdGgoKVxyXG4gICAgdmFyIGNvbXB1dGVkU3R5bGVcclxuXHJcbiAgICBpZiAoaW5jbHVkZU1hcmdpbiAmJiAhaXNXaW5kb3codGhpcy5lbGVtZW50KSkge1xyXG4gICAgICBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50KVxyXG4gICAgICB3aWR0aCArPSBwYXJzZUludChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQsIDEwKVxyXG4gICAgICB3aWR0aCArPSBwYXJzZUludChjb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LCAxMClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gd2lkdGhcclxuICB9XHJcblxyXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUuc2Nyb2xsTGVmdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0aGlzLmVsZW1lbnQpXHJcbiAgICByZXR1cm4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogdGhpcy5lbGVtZW50LnNjcm9sbExlZnRcclxuICB9XHJcblxyXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5wcm90b3R5cGUuc2Nyb2xsVG9wID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgd2luID0gZ2V0V2luZG93KHRoaXMuZWxlbWVudClcclxuICAgIHJldHVybiB3aW4gPyB3aW4ucGFnZVlPZmZzZXQgOiB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wXHJcbiAgfVxyXG5cclxuICBOb0ZyYW1ld29ya0FkYXB0ZXIuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcclxuXHJcbiAgICBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIG9iaikge1xyXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBvYmpba2V5XVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRhcmdldFxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGkgPSAxLCBlbmQgPSBhcmdzLmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgIG1lcmdlKGFyZ3NbMF0sIGFyZ3NbaV0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJnc1swXVxyXG4gIH1cclxuXHJcbiAgTm9GcmFtZXdvcmtBZGFwdGVyLmluQXJyYXkgPSBmdW5jdGlvbihlbGVtZW50LCBhcnJheSwgaSkge1xyXG4gICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAtMSA6IGFycmF5LmluZGV4T2YoZWxlbWVudCwgaSlcclxuICB9XHJcblxyXG4gIE5vRnJhbWV3b3JrQWRhcHRlci5pc0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IDAgKi9cclxuICAgIGZvciAodmFyIG5hbWUgaW4gb2JqKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIFdheXBvaW50LmFkYXB0ZXJzLnB1c2goe1xyXG4gICAgbmFtZTogJ25vZnJhbWV3b3JrJyxcclxuICAgIEFkYXB0ZXI6IE5vRnJhbWV3b3JrQWRhcHRlclxyXG4gIH0pXHJcbiAgV2F5cG9pbnQuQWRhcHRlciA9IE5vRnJhbWV3b3JrQWRhcHRlclxyXG59KCkpXHJcbjtcclxuLyohXHJcbiAqIGpRdWVyeSBDb29raWUgUGx1Z2luIHYxLjQuMVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2FyaGFydGwvanF1ZXJ5LWNvb2tpZVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxMyBLbGF1cyBIYXJ0bFxyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICovXHJcbihmdW5jdGlvbiAoZmFjdG9yeSkge1xyXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuXHRcdC8vIEFNRFxyXG5cdFx0ZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcblx0XHQvLyBDb21tb25KU1xyXG5cdFx0ZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xyXG5cdFx0ZmFjdG9yeShqUXVlcnkpO1xyXG5cdH1cclxufShmdW5jdGlvbiAoJCkge1xyXG5cclxuXHR2YXIgcGx1c2VzID0gL1xcKy9nO1xyXG5cclxuXHRmdW5jdGlvbiBlbmNvZGUocykge1xyXG5cdFx0cmV0dXJuIGNvbmZpZy5yYXcgPyBzIDogZW5jb2RlVVJJQ29tcG9uZW50KHMpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZGVjb2RlKHMpIHtcclxuXHRcdHJldHVybiBjb25maWcucmF3ID8gcyA6IGRlY29kZVVSSUNvbXBvbmVudChzKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHN0cmluZ2lmeUNvb2tpZVZhbHVlKHZhbHVlKSB7XHJcblx0XHRyZXR1cm4gZW5jb2RlKGNvbmZpZy5qc29uID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogU3RyaW5nKHZhbHVlKSk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwYXJzZUNvb2tpZVZhbHVlKHMpIHtcclxuXHRcdGlmIChzLmluZGV4T2YoJ1wiJykgPT09IDApIHtcclxuXHRcdFx0Ly8gVGhpcyBpcyBhIHF1b3RlZCBjb29raWUgYXMgYWNjb3JkaW5nIHRvIFJGQzIwNjgsIHVuZXNjYXBlLi4uXHJcblx0XHRcdHMgPSBzLnNsaWNlKDEsIC0xKS5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykucmVwbGFjZSgvXFxcXFxcXFwvZywgJ1xcXFwnKTtcclxuXHRcdH1cclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBSZXBsYWNlIHNlcnZlci1zaWRlIHdyaXR0ZW4gcGx1c2VzIHdpdGggc3BhY2VzLlxyXG5cdFx0XHQvLyBJZiB3ZSBjYW4ndCBkZWNvZGUgdGhlIGNvb2tpZSwgaWdub3JlIGl0LCBpdCdzIHVudXNhYmxlLlxyXG5cdFx0XHQvLyBJZiB3ZSBjYW4ndCBwYXJzZSB0aGUgY29va2llLCBpZ25vcmUgaXQsIGl0J3MgdW51c2FibGUuXHJcblx0XHRcdHMgPSBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKHBsdXNlcywgJyAnKSk7XHJcblx0XHRcdHJldHVybiBjb25maWcuanNvbiA/IEpTT04ucGFyc2UocykgOiBzO1xyXG5cdFx0fSBjYXRjaChlKSB7fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVhZChzLCBjb252ZXJ0ZXIpIHtcclxuXHRcdHZhciB2YWx1ZSA9IGNvbmZpZy5yYXcgPyBzIDogcGFyc2VDb29raWVWYWx1ZShzKTtcclxuXHRcdHJldHVybiAkLmlzRnVuY3Rpb24oY29udmVydGVyKSA/IGNvbnZlcnRlcih2YWx1ZSkgOiB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdHZhciBjb25maWcgPSAkLmNvb2tpZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBvcHRpb25zKSB7XHJcblxyXG5cdFx0Ly8gV3JpdGVcclxuXHJcblx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQoe30sIGNvbmZpZy5kZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG5cdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMuZXhwaXJlcyA9PT0gJ251bWJlcicpIHtcclxuXHRcdFx0XHR2YXIgZGF5cyA9IG9wdGlvbnMuZXhwaXJlcywgdCA9IG9wdGlvbnMuZXhwaXJlcyA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0dC5zZXRUaW1lKCt0ICsgZGF5cyAqIDg2NGUrNSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0gW1xyXG5cdFx0XHRcdGVuY29kZShrZXkpLCAnPScsIHN0cmluZ2lmeUNvb2tpZVZhbHVlKHZhbHVlKSxcclxuXHRcdFx0XHRvcHRpb25zLmV4cGlyZXMgPyAnOyBleHBpcmVzPScgKyBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnLCAvLyB1c2UgZXhwaXJlcyBhdHRyaWJ1dGUsIG1heC1hZ2UgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxyXG5cdFx0XHRcdG9wdGlvbnMucGF0aCAgICA/ICc7IHBhdGg9JyArIG9wdGlvbnMucGF0aCA6ICcnLFxyXG5cdFx0XHRcdG9wdGlvbnMuZG9tYWluICA/ICc7IGRvbWFpbj0nICsgb3B0aW9ucy5kb21haW4gOiAnJyxcclxuXHRcdFx0XHRvcHRpb25zLnNlY3VyZSAgPyAnOyBzZWN1cmUnIDogJydcclxuXHRcdFx0XS5qb2luKCcnKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVhZFxyXG5cclxuXHRcdHZhciByZXN1bHQgPSBrZXkgPyB1bmRlZmluZWQgOiB7fTtcclxuXHJcblx0XHQvLyBUbyBwcmV2ZW50IHRoZSBmb3IgbG9vcCBpbiB0aGUgZmlyc3QgcGxhY2UgYXNzaWduIGFuIGVtcHR5IGFycmF5XHJcblx0XHQvLyBpbiBjYXNlIHRoZXJlIGFyZSBubyBjb29raWVzIGF0IGFsbC4gQWxzbyBwcmV2ZW50cyBvZGQgcmVzdWx0IHdoZW5cclxuXHRcdC8vIGNhbGxpbmcgJC5jb29raWUoKS5cclxuXHRcdHZhciBjb29raWVzID0gZG9jdW1lbnQuY29va2llID8gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpIDogW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjb29raWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdFx0XHR2YXIgcGFydHMgPSBjb29raWVzW2ldLnNwbGl0KCc9Jyk7XHJcblx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xyXG5cdFx0XHR2YXIgY29va2llID0gcGFydHMuam9pbignPScpO1xyXG5cclxuXHRcdFx0aWYgKGtleSAmJiBrZXkgPT09IG5hbWUpIHtcclxuXHRcdFx0XHQvLyBJZiBzZWNvbmQgYXJndW1lbnQgKHZhbHVlKSBpcyBhIGZ1bmN0aW9uIGl0J3MgYSBjb252ZXJ0ZXIuLi5cclxuXHRcdFx0XHRyZXN1bHQgPSByZWFkKGNvb2tpZSwgdmFsdWUpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBQcmV2ZW50IHN0b3JpbmcgYSBjb29raWUgdGhhdCB3ZSBjb3VsZG4ndCBkZWNvZGUuXHJcblx0XHRcdGlmICgha2V5ICYmIChjb29raWUgPSByZWFkKGNvb2tpZSkpICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRyZXN1bHRbbmFtZV0gPSBjb29raWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH07XHJcblxyXG5cdGNvbmZpZy5kZWZhdWx0cyA9IHt9O1xyXG5cclxuXHQkLnJlbW92ZUNvb2tpZSA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMpIHtcclxuXHRcdGlmICgkLmNvb2tpZShrZXkpID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE11c3Qgbm90IGFsdGVyIG9wdGlvbnMsIHRodXMgZXh0ZW5kaW5nIGEgZnJlc2ggb2JqZWN0Li4uXHJcblx0XHQkLmNvb2tpZShrZXksICcnLCAkLmV4dGVuZCh7fSwgb3B0aW9ucywgeyBleHBpcmVzOiAtMSB9KSk7XHJcblx0XHRyZXR1cm4gISQuY29va2llKGtleSk7XHJcblx0fTtcclxuXHJcbn0pKTtcclxuLyohIEhhbW1lci5KUyAtIHYyLjAuNCAtIDIwMTQtMDktMjhcclxuICogaHR0cDovL2hhbW1lcmpzLmdpdGh1Yi5pby9cclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDE0IEpvcmlrIFRhbmdlbGRlcjtcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlICovXHJcbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCBleHBvcnROYW1lLCB1bmRlZmluZWQpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG52YXIgVkVORE9SX1BSRUZJWEVTID0gWycnLCAnd2Via2l0JywgJ21veicsICdNUycsICdtcycsICdvJ107XHJcbnZhciBURVNUX0VMRU1FTlQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbnZhciBUWVBFX0ZVTkNUSU9OID0gJ2Z1bmN0aW9uJztcclxuXHJcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XHJcbnZhciBhYnMgPSBNYXRoLmFicztcclxudmFyIG5vdyA9IERhdGUubm93O1xyXG5cclxuLyoqXHJcbiAqIHNldCBhIHRpbWVvdXQgd2l0aCBhIGdpdmVuIHNjb3BlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRUaW1lb3V0Q29udGV4dChmbiwgdGltZW91dCwgY29udGV4dCkge1xyXG4gICAgcmV0dXJuIHNldFRpbWVvdXQoYmluZEZuKGZuLCBjb250ZXh0KSwgdGltZW91dCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIHdlIHdhbnQgdG8gZXhlY3V0ZSB0aGUgZm4gb24gZWFjaCBlbnRyeVxyXG4gKiBpZiBpdCBhaW50IGFuIGFycmF5IHdlIGRvbid0IHdhbnQgdG8gZG8gYSB0aGluZy5cclxuICogdGhpcyBpcyB1c2VkIGJ5IGFsbCB0aGUgbWV0aG9kcyB0aGF0IGFjY2VwdCBhIHNpbmdsZSBhbmQgYXJyYXkgYXJndW1lbnQuXHJcbiAqIEBwYXJhbSB7KnxBcnJheX0gYXJnXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmblxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaW52b2tlQXJyYXlBcmcoYXJnLCBmbiwgY29udGV4dCkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xyXG4gICAgICAgIGVhY2goYXJnLCBjb250ZXh0W2ZuXSwgY29udGV4dCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiB3YWxrIG9iamVjdHMgYW5kIGFycmF5c1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XHJcbiAqL1xyXG5mdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcclxuICAgIHZhciBpO1xyXG5cclxuICAgIGlmICghb2JqKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvYmouZm9yRWFjaCkge1xyXG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcclxuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCBvYmoubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShpKSAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBleHRlbmQgb2JqZWN0LlxyXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgaW4gZGVzdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBvbmVzIGluIHNyYy5cclxuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcclxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFttZXJnZV1cclxuICogQHJldHVybnMge09iamVjdH0gZGVzdFxyXG4gKi9cclxuZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYywgbWVyZ2UpIHtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3JjKTtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHdoaWxlIChpIDwga2V5cy5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoIW1lcmdlIHx8IChtZXJnZSAmJiBkZXN0W2tleXNbaV1dID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgIGRlc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIHJldHVybiBkZXN0O1xyXG59XHJcblxyXG4vKipcclxuICogbWVyZ2UgdGhlIHZhbHVlcyBmcm9tIHNyYyBpbiB0aGUgZGVzdC5cclxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIHRoYXQgZXhpc3QgaW4gZGVzdCB3aWxsIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzcmNcclxuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcclxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZShkZXN0LCBzcmMpIHtcclxuICAgIHJldHVybiBleHRlbmQoZGVzdCwgc3JjLCB0cnVlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGlsZFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBiYXNlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc11cclxuICovXHJcbmZ1bmN0aW9uIGluaGVyaXQoY2hpbGQsIGJhc2UsIHByb3BlcnRpZXMpIHtcclxuICAgIHZhciBiYXNlUCA9IGJhc2UucHJvdG90eXBlLFxyXG4gICAgICAgIGNoaWxkUDtcclxuXHJcbiAgICBjaGlsZFAgPSBjaGlsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGJhc2VQKTtcclxuICAgIGNoaWxkUC5jb25zdHJ1Y3RvciA9IGNoaWxkO1xyXG4gICAgY2hpbGRQLl9zdXBlciA9IGJhc2VQO1xyXG5cclxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgZXh0ZW5kKGNoaWxkUCwgcHJvcGVydGllcyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBzaW1wbGUgZnVuY3Rpb24gYmluZFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiAqL1xyXG5mdW5jdGlvbiBiaW5kRm4oZm4sIGNvbnRleHQpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBib3VuZEZuKCkge1xyXG4gICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGxldCBhIGJvb2xlYW4gdmFsdWUgYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgbXVzdCByZXR1cm4gYSBib29sZWFuXHJcbiAqIHRoaXMgZmlyc3QgaXRlbSBpbiBhcmdzIHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGV4dFxyXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IHZhbFxyXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnc11cclxuICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAqL1xyXG5mdW5jdGlvbiBib29sT3JGbih2YWwsIGFyZ3MpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsID09IFRZUEVfRlVOQ1RJT04pIHtcclxuICAgICAgICByZXR1cm4gdmFsLmFwcGx5KGFyZ3MgPyBhcmdzWzBdIHx8IHVuZGVmaW5lZCA6IHVuZGVmaW5lZCwgYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsO1xyXG59XHJcblxyXG4vKipcclxuICogdXNlIHRoZSB2YWwyIHdoZW4gdmFsMSBpcyB1bmRlZmluZWRcclxuICogQHBhcmFtIHsqfSB2YWwxXHJcbiAqIEBwYXJhbSB7Kn0gdmFsMlxyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbmZ1bmN0aW9uIGlmVW5kZWZpbmVkKHZhbDEsIHZhbDIpIHtcclxuICAgIHJldHVybiAodmFsMSA9PT0gdW5kZWZpbmVkKSA/IHZhbDIgOiB2YWwxO1xyXG59XHJcblxyXG4vKipcclxuICogYWRkRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXHJcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZXNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxyXG4gKi9cclxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xyXG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIHJlbW92ZUV2ZW50TGlzdGVuZXIgd2l0aCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxyXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRhcmdldCwgdHlwZXMsIGhhbmRsZXIpIHtcclxuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XHJcbiAqIEBtZXRob2QgaGFzUGFyZW50XHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGZvdW5kXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNQYXJlbnQobm9kZSwgcGFyZW50KSB7XHJcbiAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICAgIGlmIChub2RlID09IHBhcmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIHNtYWxsIGluZGV4T2Ygd3JhcHBlclxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBmb3VuZFxyXG4gKi9cclxuZnVuY3Rpb24gaW5TdHIoc3RyLCBmaW5kKSB7XHJcbiAgICByZXR1cm4gc3RyLmluZGV4T2YoZmluZCkgPiAtMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIHNwbGl0IHN0cmluZyBvbiB3aGl0ZXNwYWNlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcclxuICogQHJldHVybnMge0FycmF5fSB3b3Jkc1xyXG4gKi9cclxuZnVuY3Rpb24gc3BsaXRTdHIoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLnRyaW0oKS5zcGxpdCgvXFxzKy9nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGZpbmQgaWYgYSBhcnJheSBjb250YWlucyB0aGUgb2JqZWN0IHVzaW5nIGluZGV4T2Ygb3IgYSBzaW1wbGUgcG9seUZpbGxcclxuICogQHBhcmFtIHtBcnJheX0gc3JjXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZmluZEJ5S2V5XVxyXG4gKiBAcmV0dXJuIHtCb29sZWFufE51bWJlcn0gZmFsc2Ugd2hlbiBub3QgZm91bmQsIG9yIHRoZSBpbmRleFxyXG4gKi9cclxuZnVuY3Rpb24gaW5BcnJheShzcmMsIGZpbmQsIGZpbmRCeUtleSkge1xyXG4gICAgaWYgKHNyYy5pbmRleE9mICYmICFmaW5kQnlLZXkpIHtcclxuICAgICAgICByZXR1cm4gc3JjLmluZGV4T2YoZmluZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IHNyYy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKChmaW5kQnlLZXkgJiYgc3JjW2ldW2ZpbmRCeUtleV0gPT0gZmluZCkgfHwgKCFmaW5kQnlLZXkgJiYgc3JjW2ldID09PSBmaW5kKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBjb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byByZWFsIGFycmF5c1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm5zIHtBcnJheX1cclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XHJcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqLCAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIHVuaXF1ZSBhcnJheSB3aXRoIG9iamVjdHMgYmFzZWQgb24gYSBrZXkgKGxpa2UgJ2lkJykgb3IganVzdCBieSB0aGUgYXJyYXkncyB2YWx1ZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBzcmMgW3tpZDoxfSx7aWQ6Mn0se2lkOjF9XVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW2tleV1cclxuICogQHBhcmFtIHtCb29sZWFufSBbc29ydD1GYWxzZV1cclxuICogQHJldHVybnMge0FycmF5fSBbe2lkOjF9LHtpZDoyfV1cclxuICovXHJcbmZ1bmN0aW9uIHVuaXF1ZUFycmF5KHNyYywga2V5LCBzb3J0KSB7XHJcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xyXG4gICAgdmFyIGkgPSAwO1xyXG5cclxuICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciB2YWwgPSBrZXkgPyBzcmNbaV1ba2V5XSA6IHNyY1tpXTtcclxuICAgICAgICBpZiAoaW5BcnJheSh2YWx1ZXMsIHZhbCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzcmNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWx1ZXNbaV0gPSB2YWw7XHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzb3J0KSB7XHJcbiAgICAgICAgaWYgKCFrZXkpIHtcclxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoZnVuY3Rpb24gc29ydFVuaXF1ZUFycmF5KGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhW2tleV0gPiBiW2tleV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIGdldCB0aGUgcHJlZml4ZWQgcHJvcGVydHlcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcclxuICogQHJldHVybnMge1N0cmluZ3xVbmRlZmluZWR9IHByZWZpeGVkXHJcbiAqL1xyXG5mdW5jdGlvbiBwcmVmaXhlZChvYmosIHByb3BlcnR5KSB7XHJcbiAgICB2YXIgcHJlZml4LCBwcm9wO1xyXG4gICAgdmFyIGNhbWVsUHJvcCA9IHByb3BlcnR5WzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcclxuXHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB3aGlsZSAoaSA8IFZFTkRPUl9QUkVGSVhFUy5sZW5ndGgpIHtcclxuICAgICAgICBwcmVmaXggPSBWRU5ET1JfUFJFRklYRVNbaV07XHJcbiAgICAgICAgcHJvcCA9IChwcmVmaXgpID8gcHJlZml4ICsgY2FtZWxQcm9wIDogcHJvcGVydHk7XHJcblxyXG4gICAgICAgIGlmIChwcm9wIGluIG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIGdldCBhIHVuaXF1ZSBpZFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB1bmlxdWVJZFxyXG4gKi9cclxudmFyIF91bmlxdWVJZCA9IDE7XHJcbmZ1bmN0aW9uIHVuaXF1ZUlkKCkge1xyXG4gICAgcmV0dXJuIF91bmlxdWVJZCsrO1xyXG59XHJcblxyXG4vKipcclxuICogZ2V0IHRoZSB3aW5kb3cgb2JqZWN0IG9mIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxyXG4gKiBAcmV0dXJucyB7RG9jdW1lbnRWaWV3fFdpbmRvd31cclxuICovXHJcbmZ1bmN0aW9uIGdldFdpbmRvd0ZvckVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcclxuICAgIHJldHVybiAoZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3cpO1xyXG59XHJcblxyXG52YXIgTU9CSUxFX1JFR0VYID0gL21vYmlsZXx0YWJsZXR8aXAoYWR8aG9uZXxvZCl8YW5kcm9pZC9pO1xyXG5cclxudmFyIFNVUFBPUlRfVE9VQ0ggPSAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KTtcclxudmFyIFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMgPSBwcmVmaXhlZCh3aW5kb3csICdQb2ludGVyRXZlbnQnKSAhPT0gdW5kZWZpbmVkO1xyXG52YXIgU1VQUE9SVF9PTkxZX1RPVUNIID0gU1VQUE9SVF9UT1VDSCAmJiBNT0JJTEVfUkVHRVgudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbnZhciBJTlBVVF9UWVBFX1RPVUNIID0gJ3RvdWNoJztcclxudmFyIElOUFVUX1RZUEVfUEVOID0gJ3Blbic7XHJcbnZhciBJTlBVVF9UWVBFX01PVVNFID0gJ21vdXNlJztcclxudmFyIElOUFVUX1RZUEVfS0lORUNUID0gJ2tpbmVjdCc7XHJcblxyXG52YXIgQ09NUFVURV9JTlRFUlZBTCA9IDI1O1xyXG5cclxudmFyIElOUFVUX1NUQVJUID0gMTtcclxudmFyIElOUFVUX01PVkUgPSAyO1xyXG52YXIgSU5QVVRfRU5EID0gNDtcclxudmFyIElOUFVUX0NBTkNFTCA9IDg7XHJcblxyXG52YXIgRElSRUNUSU9OX05PTkUgPSAxO1xyXG52YXIgRElSRUNUSU9OX0xFRlQgPSAyO1xyXG52YXIgRElSRUNUSU9OX1JJR0hUID0gNDtcclxudmFyIERJUkVDVElPTl9VUCA9IDg7XHJcbnZhciBESVJFQ1RJT05fRE9XTiA9IDE2O1xyXG5cclxudmFyIERJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XHJcbnZhciBESVJFQ1RJT05fVkVSVElDQUwgPSBESVJFQ1RJT05fVVAgfCBESVJFQ1RJT05fRE9XTjtcclxudmFyIERJUkVDVElPTl9BTEwgPSBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTDtcclxuXHJcbnZhciBQUk9QU19YWSA9IFsneCcsICd5J107XHJcbnZhciBQUk9QU19DTElFTlRfWFkgPSBbJ2NsaWVudFgnLCAnY2xpZW50WSddO1xyXG5cclxuLyoqXHJcbiAqIGNyZWF0ZSBuZXcgaW5wdXQgdHlwZSBtYW5hZ2VyXHJcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyB7SW5wdXR9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gSW5wdXQobWFuYWdlciwgY2FsbGJhY2spIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XHJcbiAgICB0aGlzLnRhcmdldCA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dFRhcmdldDtcclxuXHJcbiAgICAvLyBzbWFsbGVyIHdyYXBwZXIgYXJvdW5kIHRoZSBoYW5kbGVyLCBmb3IgdGhlIHNjb3BlIGFuZCB0aGUgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgbWFuYWdlcixcclxuICAgIC8vIHNvIHdoZW4gZGlzYWJsZWQgdGhlIGlucHV0IGV2ZW50cyBhcmUgY29tcGxldGVseSBieXBhc3NlZC5cclxuICAgIHRoaXMuZG9tSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgaWYgKGJvb2xPckZuKG1hbmFnZXIub3B0aW9ucy5lbmFibGUsIFttYW5hZ2VyXSkpIHtcclxuICAgICAgICAgICAgc2VsZi5oYW5kbGVyKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaW5pdCgpO1xyXG5cclxufVxyXG5cclxuSW5wdXQucHJvdG90eXBlID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBzaG91bGQgaGFuZGxlIHRoZSBpbnB1dEV2ZW50IGRhdGEgYW5kIHRyaWdnZXIgdGhlIGNhbGxiYWNrXHJcbiAgICAgKiBAdmlydHVhbFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHsgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIGJpbmQgdGhlIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmV2RWwgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcclxuICAgICAgICB0aGlzLmV2V2luICYmIGFkZEV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB1bmJpbmQgdGhlIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmV2RWwgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcclxuICAgICAgICB0aGlzLmV2V2luICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxyXG4gKiBjYWxsZWQgYnkgdGhlIE1hbmFnZXIgY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcclxuICogQHJldHVybnMge0lucHV0fVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSW5wdXRJbnN0YW5jZShtYW5hZ2VyKSB7XHJcbiAgICB2YXIgVHlwZTtcclxuICAgIHZhciBpbnB1dENsYXNzID0gbWFuYWdlci5vcHRpb25zLmlucHV0Q2xhc3M7XHJcblxyXG4gICAgaWYgKGlucHV0Q2xhc3MpIHtcclxuICAgICAgICBUeXBlID0gaW5wdXRDbGFzcztcclxuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9QT0lOVEVSX0VWRU5UUykge1xyXG4gICAgICAgIFR5cGUgPSBQb2ludGVyRXZlbnRJbnB1dDtcclxuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9PTkxZX1RPVUNIKSB7XHJcbiAgICAgICAgVHlwZSA9IFRvdWNoSW5wdXQ7XHJcbiAgICB9IGVsc2UgaWYgKCFTVVBQT1JUX1RPVUNIKSB7XHJcbiAgICAgICAgVHlwZSA9IE1vdXNlSW5wdXQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIFR5cGUgPSBUb3VjaE1vdXNlSW5wdXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IChUeXBlKShtYW5hZ2VyLCBpbnB1dEhhbmRsZXIpO1xyXG59XHJcblxyXG4vKipcclxuICogaGFuZGxlIGlucHV0IGV2ZW50c1xyXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcclxuICovXHJcbmZ1bmN0aW9uIGlucHV0SGFuZGxlcihtYW5hZ2VyLCBldmVudFR5cGUsIGlucHV0KSB7XHJcbiAgICB2YXIgcG9pbnRlcnNMZW4gPSBpbnB1dC5wb2ludGVycy5sZW5ndGg7XHJcbiAgICB2YXIgY2hhbmdlZFBvaW50ZXJzTGVuID0gaW5wdXQuY2hhbmdlZFBvaW50ZXJzLmxlbmd0aDtcclxuICAgIHZhciBpc0ZpcnN0ID0gKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xyXG4gICAgdmFyIGlzRmluYWwgPSAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XHJcblxyXG4gICAgaW5wdXQuaXNGaXJzdCA9ICEhaXNGaXJzdDtcclxuICAgIGlucHV0LmlzRmluYWwgPSAhIWlzRmluYWw7XHJcblxyXG4gICAgaWYgKGlzRmlyc3QpIHtcclxuICAgICAgICBtYW5hZ2VyLnNlc3Npb24gPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzb3VyY2UgZXZlbnQgaXMgdGhlIG5vcm1hbGl6ZWQgdmFsdWUgb2YgdGhlIGRvbUV2ZW50c1xyXG4gICAgLy8gbGlrZSAndG91Y2hzdGFydCwgbW91c2V1cCwgcG9pbnRlcmRvd24nXHJcbiAgICBpbnB1dC5ldmVudFR5cGUgPSBldmVudFR5cGU7XHJcblxyXG4gICAgLy8gY29tcHV0ZSBzY2FsZSwgcm90YXRpb24gZXRjXHJcbiAgICBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KTtcclxuXHJcbiAgICAvLyBlbWl0IHNlY3JldCBldmVudFxyXG4gICAgbWFuYWdlci5lbWl0KCdoYW1tZXIuaW5wdXQnLCBpbnB1dCk7XHJcblxyXG4gICAgbWFuYWdlci5yZWNvZ25pemUoaW5wdXQpO1xyXG4gICAgbWFuYWdlci5zZXNzaW9uLnByZXZJbnB1dCA9IGlucHV0O1xyXG59XHJcblxyXG4vKipcclxuICogZXh0ZW5kIHRoZSBkYXRhIHdpdGggc29tZSB1c2FibGUgcHJvcGVydGllcyBsaWtlIHNjYWxlLCByb3RhdGUsIHZlbG9jaXR5IGV0Y1xyXG4gKiBAcGFyYW0ge09iamVjdH0gbWFuYWdlclxyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcclxuICovXHJcbmZ1bmN0aW9uIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpIHtcclxuICAgIHZhciBzZXNzaW9uID0gbWFuYWdlci5zZXNzaW9uO1xyXG4gICAgdmFyIHBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnM7XHJcbiAgICB2YXIgcG9pbnRlcnNMZW5ndGggPSBwb2ludGVycy5sZW5ndGg7XHJcblxyXG4gICAgLy8gc3RvcmUgdGhlIGZpcnN0IGlucHV0IHRvIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYW5kIGRpcmVjdGlvblxyXG4gICAgaWYgKCFzZXNzaW9uLmZpcnN0SW5wdXQpIHtcclxuICAgICAgICBzZXNzaW9uLmZpcnN0SW5wdXQgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdG8gY29tcHV0ZSBzY2FsZSBhbmQgcm90YXRpb24gd2UgbmVlZCB0byBzdG9yZSB0aGUgbXVsdGlwbGUgdG91Y2hlc1xyXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID4gMSAmJiAhc2Vzc2lvbi5maXJzdE11bHRpcGxlKSB7XHJcbiAgICAgICAgc2Vzc2lvbi5maXJzdE11bHRpcGxlID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xyXG4gICAgfSBlbHNlIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBmaXJzdElucHV0ID0gc2Vzc2lvbi5maXJzdElucHV0O1xyXG4gICAgdmFyIGZpcnN0TXVsdGlwbGUgPSBzZXNzaW9uLmZpcnN0TXVsdGlwbGU7XHJcbiAgICB2YXIgb2Zmc2V0Q2VudGVyID0gZmlyc3RNdWx0aXBsZSA/IGZpcnN0TXVsdGlwbGUuY2VudGVyIDogZmlyc3RJbnB1dC5jZW50ZXI7XHJcblxyXG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlciA9IGdldENlbnRlcihwb2ludGVycyk7XHJcbiAgICBpbnB1dC50aW1lU3RhbXAgPSBub3coKTtcclxuICAgIGlucHV0LmRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGZpcnN0SW5wdXQudGltZVN0YW1wO1xyXG5cclxuICAgIGlucHV0LmFuZ2xlID0gZ2V0QW5nbGUob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xyXG4gICAgaW5wdXQuZGlzdGFuY2UgPSBnZXREaXN0YW5jZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XHJcblxyXG4gICAgY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpO1xyXG4gICAgaW5wdXQub2Zmc2V0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcclxuXHJcbiAgICBpbnB1dC5zY2FsZSA9IGZpcnN0TXVsdGlwbGUgPyBnZXRTY2FsZShmaXJzdE11bHRpcGxlLnBvaW50ZXJzLCBwb2ludGVycykgOiAxO1xyXG4gICAgaW5wdXQucm90YXRpb24gPSBmaXJzdE11bHRpcGxlID8gZ2V0Um90YXRpb24oZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMDtcclxuXHJcbiAgICBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpO1xyXG5cclxuICAgIC8vIGZpbmQgdGhlIGNvcnJlY3QgdGFyZ2V0XHJcbiAgICB2YXIgdGFyZ2V0ID0gbWFuYWdlci5lbGVtZW50O1xyXG4gICAgaWYgKGhhc1BhcmVudChpbnB1dC5zcmNFdmVudC50YXJnZXQsIHRhcmdldCkpIHtcclxuICAgICAgICB0YXJnZXQgPSBpbnB1dC5zcmNFdmVudC50YXJnZXQ7XHJcbiAgICB9XHJcbiAgICBpbnB1dC50YXJnZXQgPSB0YXJnZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KSB7XHJcbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyO1xyXG4gICAgdmFyIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgfHwge307XHJcbiAgICB2YXIgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgfHwge307XHJcbiAgICB2YXIgcHJldklucHV0ID0gc2Vzc2lvbi5wcmV2SW5wdXQgfHwge307XHJcblxyXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfU1RBUlQgfHwgcHJldklucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfRU5EKSB7XHJcbiAgICAgICAgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgPSB7XHJcbiAgICAgICAgICAgIHg6IHByZXZJbnB1dC5kZWx0YVggfHwgMCxcclxuICAgICAgICAgICAgeTogcHJldklucHV0LmRlbHRhWSB8fCAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSA9IHtcclxuICAgICAgICAgICAgeDogY2VudGVyLngsXHJcbiAgICAgICAgICAgIHk6IGNlbnRlci55XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBpbnB1dC5kZWx0YVggPSBwcmV2RGVsdGEueCArIChjZW50ZXIueCAtIG9mZnNldC54KTtcclxuICAgIGlucHV0LmRlbHRhWSA9IHByZXZEZWx0YS55ICsgKGNlbnRlci55IC0gb2Zmc2V0LnkpO1xyXG59XHJcblxyXG4vKipcclxuICogdmVsb2NpdHkgaXMgY2FsY3VsYXRlZCBldmVyeSB4IG1zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXNzaW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxyXG4gKi9cclxuZnVuY3Rpb24gY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KSB7XHJcbiAgICB2YXIgbGFzdCA9IHNlc3Npb24ubGFzdEludGVydmFsIHx8IGlucHV0LFxyXG4gICAgICAgIGRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGxhc3QudGltZVN0YW1wLFxyXG4gICAgICAgIHZlbG9jaXR5LCB2ZWxvY2l0eVgsIHZlbG9jaXR5WSwgZGlyZWN0aW9uO1xyXG5cclxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfQ0FOQ0VMICYmIChkZWx0YVRpbWUgPiBDT01QVVRFX0lOVEVSVkFMIHx8IGxhc3QudmVsb2NpdHkgPT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICB2YXIgZGVsdGFYID0gbGFzdC5kZWx0YVggLSBpbnB1dC5kZWx0YVg7XHJcbiAgICAgICAgdmFyIGRlbHRhWSA9IGxhc3QuZGVsdGFZIC0gaW5wdXQuZGVsdGFZO1xyXG5cclxuICAgICAgICB2YXIgdiA9IGdldFZlbG9jaXR5KGRlbHRhVGltZSwgZGVsdGFYLCBkZWx0YVkpO1xyXG4gICAgICAgIHZlbG9jaXR5WCA9IHYueDtcclxuICAgICAgICB2ZWxvY2l0eVkgPSB2Lnk7XHJcbiAgICAgICAgdmVsb2NpdHkgPSAoYWJzKHYueCkgPiBhYnModi55KSkgPyB2LnggOiB2Lnk7XHJcbiAgICAgICAgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGRlbHRhWCwgZGVsdGFZKTtcclxuXHJcbiAgICAgICAgc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgPSBpbnB1dDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gdXNlIGxhdGVzdCB2ZWxvY2l0eSBpbmZvIGlmIGl0IGRvZXNuJ3Qgb3ZlcnRha2UgYSBtaW5pbXVtIHBlcmlvZFxyXG4gICAgICAgIHZlbG9jaXR5ID0gbGFzdC52ZWxvY2l0eTtcclxuICAgICAgICB2ZWxvY2l0eVggPSBsYXN0LnZlbG9jaXR5WDtcclxuICAgICAgICB2ZWxvY2l0eVkgPSBsYXN0LnZlbG9jaXR5WTtcclxuICAgICAgICBkaXJlY3Rpb24gPSBsYXN0LmRpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBpbnB1dC52ZWxvY2l0eSA9IHZlbG9jaXR5O1xyXG4gICAgaW5wdXQudmVsb2NpdHlYID0gdmVsb2NpdHlYO1xyXG4gICAgaW5wdXQudmVsb2NpdHlZID0gdmVsb2NpdHlZO1xyXG4gICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogY3JlYXRlIGEgc2ltcGxlIGNsb25lIGZyb20gdGhlIGlucHV0IHVzZWQgZm9yIHN0b3JhZ2Ugb2YgZmlyc3RJbnB1dCBhbmQgZmlyc3RNdWx0aXBsZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcclxuICogQHJldHVybnMge09iamVjdH0gY2xvbmVkSW5wdXREYXRhXHJcbiAqL1xyXG5mdW5jdGlvbiBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCkge1xyXG4gICAgLy8gbWFrZSBhIHNpbXBsZSBjb3B5IG9mIHRoZSBwb2ludGVycyBiZWNhdXNlIHdlIHdpbGwgZ2V0IGEgcmVmZXJlbmNlIGlmIHdlIGRvbid0XHJcbiAgICAvLyB3ZSBvbmx5IG5lZWQgY2xpZW50WFkgZm9yIHRoZSBjYWxjdWxhdGlvbnNcclxuICAgIHZhciBwb2ludGVycyA9IFtdO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBpbnB1dC5wb2ludGVycy5sZW5ndGgpIHtcclxuICAgICAgICBwb2ludGVyc1tpXSA9IHtcclxuICAgICAgICAgICAgY2xpZW50WDogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WCksXHJcbiAgICAgICAgICAgIGNsaWVudFk6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFkpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0aW1lU3RhbXA6IG5vdygpLFxyXG4gICAgICAgIHBvaW50ZXJzOiBwb2ludGVycyxcclxuICAgICAgICBjZW50ZXI6IGdldENlbnRlcihwb2ludGVycyksXHJcbiAgICAgICAgZGVsdGFYOiBpbnB1dC5kZWx0YVgsXHJcbiAgICAgICAgZGVsdGFZOiBpbnB1dC5kZWx0YVlcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnZXQgdGhlIGNlbnRlciBvZiBhbGwgdGhlIHBvaW50ZXJzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHBvaW50ZXJzXHJcbiAqIEByZXR1cm4ge09iamVjdH0gY2VudGVyIGNvbnRhaW5zIGB4YCBhbmQgYHlgIHByb3BlcnRpZXNcclxuICovXHJcbmZ1bmN0aW9uIGdldENlbnRlcihwb2ludGVycykge1xyXG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xyXG5cclxuICAgIC8vIG5vIG5lZWQgdG8gbG9vcCB3aGVuIG9ubHkgb25lIHRvdWNoXHJcbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRYKSxcclxuICAgICAgICAgICAgeTogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB4ID0gMCwgeSA9IDAsIGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBwb2ludGVyc0xlbmd0aCkge1xyXG4gICAgICAgIHggKz0gcG9pbnRlcnNbaV0uY2xpZW50WDtcclxuICAgICAgICB5ICs9IHBvaW50ZXJzW2ldLmNsaWVudFk7XHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgeDogcm91bmQoeCAvIHBvaW50ZXJzTGVuZ3RoKSxcclxuICAgICAgICB5OiByb3VuZCh5IC8gcG9pbnRlcnNMZW5ndGgpXHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogY2FsY3VsYXRlIHRoZSB2ZWxvY2l0eSBiZXR3ZWVuIHR3byBwb2ludHMuIHVuaXQgaXMgaW4gcHggcGVyIG1zLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFUaW1lXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XHJcbiAqIEByZXR1cm4ge09iamVjdH0gdmVsb2NpdHkgYHhgIGFuZCBgeWBcclxuICovXHJcbmZ1bmN0aW9uIGdldFZlbG9jaXR5KGRlbHRhVGltZSwgeCwgeSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB4OiB4IC8gZGVsdGFUaW1lIHx8IDAsXHJcbiAgICAgICAgeTogeSAvIGRlbHRhVGltZSB8fCAwXHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogZ2V0IHRoZSBkaXJlY3Rpb24gYmV0d2VlbiB0d28gcG9pbnRzXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XHJcbiAqIEByZXR1cm4ge051bWJlcn0gZGlyZWN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXREaXJlY3Rpb24oeCwgeSkge1xyXG4gICAgaWYgKHggPT09IHkpIHtcclxuICAgICAgICByZXR1cm4gRElSRUNUSU9OX05PTkU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFicyh4KSA+PSBhYnMoeSkpIHtcclxuICAgICAgICByZXR1cm4geCA+IDAgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcclxuICAgIH1cclxuICAgIHJldHVybiB5ID4gMCA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xyXG59XHJcblxyXG4vKipcclxuICogY2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHNcclxuICogQHBhcmFtIHtPYmplY3R9IHAxIHt4LCB5fVxyXG4gKiBAcGFyYW0ge09iamVjdH0gcDIge3gsIHl9XHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcclxuICogQHJldHVybiB7TnVtYmVyfSBkaXN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyLCBwcm9wcykge1xyXG4gICAgaWYgKCFwcm9wcykge1xyXG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XHJcbiAgICB9XHJcbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcclxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xyXG5cclxuICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xyXG59XHJcblxyXG4vKipcclxuICogY2FsY3VsYXRlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gcDFcclxuICogQHBhcmFtIHtPYmplY3R9IHAyXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcclxuICogQHJldHVybiB7TnVtYmVyfSBhbmdsZVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QW5nbGUocDEsIHAyLCBwcm9wcykge1xyXG4gICAgaWYgKCFwcm9wcykge1xyXG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XHJcbiAgICB9XHJcbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcclxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xyXG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJO1xyXG59XHJcblxyXG4vKipcclxuICogY2FsY3VsYXRlIHRoZSByb3RhdGlvbiBkZWdyZWVzIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGVuZCBhcnJheSBvZiBwb2ludGVyc1xyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHJvdGF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRSb3RhdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gZ2V0QW5nbGUoZW5kWzFdLCBlbmRbMF0sIFBST1BTX0NMSUVOVF9YWSkgLSBnZXRBbmdsZShzdGFydFsxXSwgc3RhcnRbMF0sIFBST1BTX0NMSUVOVF9YWSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBjYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvciBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xyXG4gKiBubyBzY2FsZSBpcyAxLCBhbmQgZ29lcyBkb3duIHRvIDAgd2hlbiBwaW5jaGVkIHRvZ2V0aGVyLCBhbmQgYmlnZ2VyIHdoZW4gcGluY2hlZCBvdXRcclxuICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcclxuICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXHJcbiAqIEByZXR1cm4ge051bWJlcn0gc2NhbGVcclxuICovXHJcbmZ1bmN0aW9uIGdldFNjYWxlKHN0YXJ0LCBlbmQpIHtcclxuICAgIHJldHVybiBnZXREaXN0YW5jZShlbmRbMF0sIGVuZFsxXSwgUFJPUFNfQ0xJRU5UX1hZKSAvIGdldERpc3RhbmNlKHN0YXJ0WzBdLCBzdGFydFsxXSwgUFJPUFNfQ0xJRU5UX1hZKTtcclxufVxyXG5cclxudmFyIE1PVVNFX0lOUFVUX01BUCA9IHtcclxuICAgIG1vdXNlZG93bjogSU5QVVRfU1RBUlQsXHJcbiAgICBtb3VzZW1vdmU6IElOUFVUX01PVkUsXHJcbiAgICBtb3VzZXVwOiBJTlBVVF9FTkRcclxufTtcclxuXHJcbnZhciBNT1VTRV9FTEVNRU5UX0VWRU5UUyA9ICdtb3VzZWRvd24nO1xyXG52YXIgTU9VU0VfV0lORE9XX0VWRU5UUyA9ICdtb3VzZW1vdmUgbW91c2V1cCc7XHJcblxyXG4vKipcclxuICogTW91c2UgZXZlbnRzIGlucHV0XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyBJbnB1dFxyXG4gKi9cclxuZnVuY3Rpb24gTW91c2VJbnB1dCgpIHtcclxuICAgIHRoaXMuZXZFbCA9IE1PVVNFX0VMRU1FTlRfRVZFTlRTO1xyXG4gICAgdGhpcy5ldldpbiA9IE1PVVNFX1dJTkRPV19FVkVOVFM7XHJcblxyXG4gICAgdGhpcy5hbGxvdyA9IHRydWU7IC8vIHVzZWQgYnkgSW5wdXQuVG91Y2hNb3VzZSB0byBkaXNhYmxlIG1vdXNlIGV2ZW50c1xyXG4gICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7IC8vIG1vdXNlZG93biBzdGF0ZVxyXG5cclxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmluaGVyaXQoTW91c2VJbnB1dCwgSW5wdXQsIHtcclxuICAgIC8qKlxyXG4gICAgICogaGFuZGxlIG1vdXNlIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIE1FaGFuZGxlcihldikge1xyXG4gICAgICAgIHZhciBldmVudFR5cGUgPSBNT1VTRV9JTlBVVF9NQVBbZXYudHlwZV07XHJcblxyXG4gICAgICAgIC8vIG9uIHN0YXJ0IHdlIHdhbnQgdG8gaGF2ZSB0aGUgbGVmdCBtb3VzZSBidXR0b24gZG93blxyXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiBldi5idXR0b24gPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9NT1ZFICYmIGV2LndoaWNoICE9PSAxKSB7XHJcbiAgICAgICAgICAgIGV2ZW50VHlwZSA9IElOUFVUX0VORDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG1vdXNlIG11c3QgYmUgZG93biwgYW5kIG1vdXNlIGV2ZW50cyBhcmUgYWxsb3dlZCAoc2VlIHRoZSBUb3VjaE1vdXNlIGlucHV0KVxyXG4gICAgICAgIGlmICghdGhpcy5wcmVzc2VkIHx8ICF0aGlzLmFsbG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XHJcbiAgICAgICAgICAgIHBvaW50ZXJzOiBbZXZdLFxyXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXHJcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX01PVVNFLFxyXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgUE9JTlRFUl9JTlBVVF9NQVAgPSB7XHJcbiAgICBwb2ludGVyZG93bjogSU5QVVRfU1RBUlQsXHJcbiAgICBwb2ludGVybW92ZTogSU5QVVRfTU9WRSxcclxuICAgIHBvaW50ZXJ1cDogSU5QVVRfRU5ELFxyXG4gICAgcG9pbnRlcmNhbmNlbDogSU5QVVRfQ0FOQ0VMLFxyXG4gICAgcG9pbnRlcm91dDogSU5QVVRfQ0FOQ0VMXHJcbn07XHJcblxyXG4vLyBpbiBJRTEwIHRoZSBwb2ludGVyIHR5cGVzIGlzIGRlZmluZWQgYXMgYW4gZW51bVxyXG52YXIgSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSA9IHtcclxuICAgIDI6IElOUFVUX1RZUEVfVE9VQ0gsXHJcbiAgICAzOiBJTlBVVF9UWVBFX1BFTixcclxuICAgIDQ6IElOUFVUX1RZUEVfTU9VU0UsXHJcbiAgICA1OiBJTlBVVF9UWVBFX0tJTkVDVCAvLyBzZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWNvYnJvc3NpL3N0YXR1cy80ODA1OTY0Mzg0ODk4OTA4MTZcclxufTtcclxuXHJcbnZhciBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ3BvaW50ZXJkb3duJztcclxudmFyIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdwb2ludGVybW92ZSBwb2ludGVydXAgcG9pbnRlcmNhbmNlbCc7XHJcblxyXG4vLyBJRTEwIGhhcyBwcmVmaXhlZCBzdXBwb3J0LCBhbmQgY2FzZS1zZW5zaXRpdmVcclxuaWYgKHdpbmRvdy5NU1BvaW50ZXJFdmVudCkge1xyXG4gICAgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdNU1BvaW50ZXJEb3duJztcclxuICAgIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdNU1BvaW50ZXJNb3ZlIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQb2ludGVyIGV2ZW50cyBpbnB1dFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgSW5wdXRcclxuICovXHJcbmZ1bmN0aW9uIFBvaW50ZXJFdmVudElucHV0KCkge1xyXG4gICAgdGhpcy5ldkVsID0gUE9JTlRFUl9FTEVNRU5UX0VWRU5UUztcclxuICAgIHRoaXMuZXZXaW4gPSBQT0lOVEVSX1dJTkRPV19FVkVOVFM7XHJcblxyXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgICB0aGlzLnN0b3JlID0gKHRoaXMubWFuYWdlci5zZXNzaW9uLnBvaW50ZXJFdmVudHMgPSBbXSk7XHJcbn1cclxuXHJcbmluaGVyaXQoUG9pbnRlckV2ZW50SW5wdXQsIElucHV0LCB7XHJcbiAgICAvKipcclxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldlxyXG4gICAgICovXHJcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBQRWhhbmRsZXIoZXYpIHtcclxuICAgICAgICB2YXIgc3RvcmUgPSB0aGlzLnN0b3JlO1xyXG4gICAgICAgIHZhciByZW1vdmVQb2ludGVyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBldmVudFR5cGVOb3JtYWxpemVkID0gZXYudHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ21zJywgJycpO1xyXG4gICAgICAgIHZhciBldmVudFR5cGUgPSBQT0lOVEVSX0lOUFVUX01BUFtldmVudFR5cGVOb3JtYWxpemVkXTtcclxuICAgICAgICB2YXIgcG9pbnRlclR5cGUgPSBJRTEwX1BPSU5URVJfVFlQRV9FTlVNW2V2LnBvaW50ZXJUeXBlXSB8fCBldi5wb2ludGVyVHlwZTtcclxuXHJcbiAgICAgICAgdmFyIGlzVG91Y2ggPSAocG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCk7XHJcblxyXG4gICAgICAgIC8vIGdldCBpbmRleCBvZiB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXHJcbiAgICAgICAgdmFyIHN0b3JlSW5kZXggPSBpbkFycmF5KHN0b3JlLCBldi5wb2ludGVySWQsICdwb2ludGVySWQnKTtcclxuXHJcbiAgICAgICAgLy8gc3RhcnQgYW5kIG1vdXNlIG11c3QgYmUgZG93blxyXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAoZXYuYnV0dG9uID09PSAwIHx8IGlzVG91Y2gpKSB7XHJcbiAgICAgICAgICAgIGlmIChzdG9yZUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgc3RvcmUucHVzaChldik7XHJcbiAgICAgICAgICAgICAgICBzdG9yZUluZGV4ID0gc3RvcmUubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcclxuICAgICAgICAgICAgcmVtb3ZlUG9pbnRlciA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpdCBub3QgZm91bmQsIHNvIHRoZSBwb2ludGVyIGhhc24ndCBiZWVuIGRvd24gKHNvIGl0J3MgcHJvYmFibHkgYSBob3ZlcilcclxuICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcclxuICAgICAgICBzdG9yZVtzdG9yZUluZGV4XSA9IGV2O1xyXG5cclxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XHJcbiAgICAgICAgICAgIHBvaW50ZXJzOiBzdG9yZSxcclxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxyXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogcG9pbnRlclR5cGUsXHJcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAocmVtb3ZlUG9pbnRlcikge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgZnJvbSB0aGUgc3RvcmVcclxuICAgICAgICAgICAgc3RvcmUuc3BsaWNlKHN0b3JlSW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgU0lOR0xFX1RPVUNIX0lOUFVUX01BUCA9IHtcclxuICAgIHRvdWNoc3RhcnQ6IElOUFVUX1NUQVJULFxyXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxyXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcclxuICAgIHRvdWNoY2FuY2VsOiBJTlBVVF9DQU5DRUxcclxufTtcclxuXHJcbnZhciBTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyA9ICd0b3VjaHN0YXJ0JztcclxudmFyIFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcclxuXHJcbi8qKlxyXG4gKiBUb3VjaCBldmVudHMgaW5wdXRcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIElucHV0XHJcbiAqL1xyXG5mdW5jdGlvbiBTaW5nbGVUb3VjaElucHV0KCkge1xyXG4gICAgdGhpcy5ldlRhcmdldCA9IFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTO1xyXG4gICAgdGhpcy5ldldpbiA9IFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTO1xyXG4gICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcblxyXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuaW5oZXJpdChTaW5nbGVUb3VjaElucHV0LCBJbnB1dCwge1xyXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVEVoYW5kbGVyKGV2KSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xyXG5cclxuICAgICAgICAvLyBzaG91bGQgd2UgaGFuZGxlIHRoZSB0b3VjaCBldmVudHM/XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdG91Y2hlcyA9IG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XHJcblxyXG4gICAgICAgIC8vIHdoZW4gZG9uZSwgcmVzZXQgdGhlIHN0YXJ0ZWQgc3RhdGVcclxuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIHRvdWNoZXNbMF0ubGVuZ3RoIC0gdG91Y2hlc1sxXS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgdHlwZSwge1xyXG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcclxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxyXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9UT1VDSCxcclxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxyXG4gKiBAcGFyYW0ge09iamVjdH0gZXZcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxyXG4gKi9cclxuZnVuY3Rpb24gbm9ybWFsaXplU2luZ2xlVG91Y2hlcyhldiwgdHlwZSkge1xyXG4gICAgdmFyIGFsbCA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XHJcbiAgICB2YXIgY2hhbmdlZCA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpO1xyXG5cclxuICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcclxuICAgICAgICBhbGwgPSB1bmlxdWVBcnJheShhbGwuY29uY2F0KGNoYW5nZWQpLCAnaWRlbnRpZmllcicsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbYWxsLCBjaGFuZ2VkXTtcclxufVxyXG5cclxudmFyIFRPVUNIX0lOUFVUX01BUCA9IHtcclxuICAgIHRvdWNoc3RhcnQ6IElOUFVUX1NUQVJULFxyXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxyXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcclxuICAgIHRvdWNoY2FuY2VsOiBJTlBVVF9DQU5DRUxcclxufTtcclxuXHJcbnZhciBUT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcclxuXHJcbi8qKlxyXG4gKiBNdWx0aS11c2VyIHRvdWNoIGV2ZW50cyBpbnB1dFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgSW5wdXRcclxuICovXHJcbmZ1bmN0aW9uIFRvdWNoSW5wdXQoKSB7XHJcbiAgICB0aGlzLmV2VGFyZ2V0ID0gVE9VQ0hfVEFSR0VUX0VWRU5UUztcclxuICAgIHRoaXMudGFyZ2V0SWRzID0ge307XHJcblxyXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuaW5oZXJpdChUb3VjaElucHV0LCBJbnB1dCwge1xyXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTVRFaGFuZGxlcihldikge1xyXG4gICAgICAgIHZhciB0eXBlID0gVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xyXG4gICAgICAgIHZhciB0b3VjaGVzID0gZ2V0VG91Y2hlcy5jYWxsKHRoaXMsIGV2LCB0eXBlKTtcclxuICAgICAgICBpZiAoIXRvdWNoZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcclxuICAgICAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXHJcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcclxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXHJcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAdGhpcyB7VG91Y2hJbnB1dH1cclxuICogQHBhcmFtIHtPYmplY3R9IGV2XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcclxuICogQHJldHVybnMge3VuZGVmaW5lZHxBcnJheX0gW2FsbCwgY2hhbmdlZF1cclxuICovXHJcbmZ1bmN0aW9uIGdldFRvdWNoZXMoZXYsIHR5cGUpIHtcclxuICAgIHZhciBhbGxUb3VjaGVzID0gdG9BcnJheShldi50b3VjaGVzKTtcclxuICAgIHZhciB0YXJnZXRJZHMgPSB0aGlzLnRhcmdldElkcztcclxuXHJcbiAgICAvLyB3aGVuIHRoZXJlIGlzIG9ubHkgb25lIHRvdWNoLCB0aGUgcHJvY2VzcyBjYW4gYmUgc2ltcGxpZmllZFxyXG4gICAgaWYgKHR5cGUgJiAoSU5QVVRfU1RBUlQgfCBJTlBVVF9NT1ZFKSAmJiBhbGxUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHRhcmdldElkc1thbGxUb3VjaGVzWzBdLmlkZW50aWZpZXJdID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gW2FsbFRvdWNoZXMsIGFsbFRvdWNoZXNdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpLFxyXG4gICAgICAgIHRhcmdldFRvdWNoZXMsXHJcbiAgICAgICAgY2hhbmdlZFRvdWNoZXMgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKSxcclxuICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcyA9IFtdLFxyXG4gICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xyXG5cclxuICAgIC8vIGdldCB0YXJnZXQgdG91Y2hlcyBmcm9tIHRvdWNoZXNcclxuICAgIHRhcmdldFRvdWNoZXMgPSBhbGxUb3VjaGVzLmZpbHRlcihmdW5jdGlvbih0b3VjaCkge1xyXG4gICAgICAgIHJldHVybiBoYXNQYXJlbnQodG91Y2gudGFyZ2V0LCB0YXJnZXQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gY29sbGVjdCB0b3VjaGVzXHJcbiAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcclxuICAgICAgICBpID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IHRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRhcmdldElkc1t0YXJnZXRUb3VjaGVzW2ldLmlkZW50aWZpZXJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBmaWx0ZXIgY2hhbmdlZCB0b3VjaGVzIHRvIG9ubHkgY29udGFpbiB0b3VjaGVzIHRoYXQgZXhpc3QgaW4gdGhlIGNvbGxlY3RlZCB0YXJnZXQgaWRzXHJcbiAgICBpID0gMDtcclxuICAgIHdoaWxlIChpIDwgY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xyXG4gICAgICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5wdXNoKGNoYW5nZWRUb3VjaGVzW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNsZWFudXAgcmVtb3ZlZCB0b3VjaGVzXHJcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICAvLyBtZXJnZSB0YXJnZXRUb3VjaGVzIHdpdGggY2hhbmdlZFRhcmdldFRvdWNoZXMgc28gaXQgY29udGFpbnMgQUxMIHRvdWNoZXMsIGluY2x1ZGluZyAnZW5kJyBhbmQgJ2NhbmNlbCdcclxuICAgICAgICB1bmlxdWVBcnJheSh0YXJnZXRUb3VjaGVzLmNvbmNhdChjaGFuZ2VkVGFyZ2V0VG91Y2hlcyksICdpZGVudGlmaWVyJywgdHJ1ZSksXHJcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXNcclxuICAgIF07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lZCB0b3VjaCBhbmQgbW91c2UgaW5wdXRcclxuICpcclxuICogVG91Y2ggaGFzIGEgaGlnaGVyIHByaW9yaXR5IHRoZW4gbW91c2UsIGFuZCB3aGlsZSB0b3VjaGluZyBubyBtb3VzZSBldmVudHMgYXJlIGFsbG93ZWQuXHJcbiAqIFRoaXMgYmVjYXVzZSB0b3VjaCBkZXZpY2VzIGFsc28gZW1pdCBtb3VzZSBldmVudHMgd2hpbGUgZG9pbmcgYSB0b3VjaC5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIElucHV0XHJcbiAqL1xyXG5mdW5jdGlvbiBUb3VjaE1vdXNlSW5wdXQoKSB7XHJcbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgIHZhciBoYW5kbGVyID0gYmluZEZuKHRoaXMuaGFuZGxlciwgdGhpcyk7XHJcbiAgICB0aGlzLnRvdWNoID0gbmV3IFRvdWNoSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcclxuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2VJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xyXG59XHJcblxyXG5pbmhlcml0KFRvdWNoTW91c2VJbnB1dCwgSW5wdXQsIHtcclxuICAgIC8qKlxyXG4gICAgICogaGFuZGxlIG1vdXNlIGFuZCB0b3VjaCBldmVudHNcclxuICAgICAqIEBwYXJhbSB7SGFtbWVyfSBtYW5hZ2VyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRFdmVudFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxyXG4gICAgICovXHJcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBUTUVoYW5kbGVyKG1hbmFnZXIsIGlucHV0RXZlbnQsIGlucHV0RGF0YSkge1xyXG4gICAgICAgIHZhciBpc1RvdWNoID0gKGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNIKSxcclxuICAgICAgICAgICAgaXNNb3VzZSA9IChpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9NT1VTRSk7XHJcblxyXG4gICAgICAgIC8vIHdoZW4gd2UncmUgaW4gYSB0b3VjaCBldmVudCwgc28gIGJsb2NrIGFsbCB1cGNvbWluZyBtb3VzZSBldmVudHNcclxuICAgICAgICAvLyBtb3N0IG1vYmlsZSBicm93c2VyIGFsc28gZW1pdCBtb3VzZWV2ZW50cywgcmlnaHQgYWZ0ZXIgdG91Y2hzdGFydFxyXG4gICAgICAgIGlmIChpc1RvdWNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2UuYWxsb3cgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzTW91c2UgJiYgIXRoaXMubW91c2UuYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmVzZXQgdGhlIGFsbG93TW91c2Ugd2hlbiB3ZSdyZSBkb25lXHJcbiAgICAgICAgaWYgKGlucHV0RXZlbnQgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlLmFsbG93ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMudG91Y2guZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMubW91c2UuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnZhciBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gPSBwcmVmaXhlZChURVNUX0VMRU1FTlQuc3R5bGUsICd0b3VjaEFjdGlvbicpO1xyXG52YXIgTkFUSVZFX1RPVUNIX0FDVElPTiA9IFBSRUZJWEVEX1RPVUNIX0FDVElPTiAhPT0gdW5kZWZpbmVkO1xyXG5cclxuLy8gbWFnaWNhbCB0b3VjaEFjdGlvbiB2YWx1ZVxyXG52YXIgVE9VQ0hfQUNUSU9OX0NPTVBVVEUgPSAnY29tcHV0ZSc7XHJcbnZhciBUT1VDSF9BQ1RJT05fQVVUTyA9ICdhdXRvJztcclxudmFyIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04gPSAnbWFuaXB1bGF0aW9uJzsgLy8gbm90IGltcGxlbWVudGVkXHJcbnZhciBUT1VDSF9BQ1RJT05fTk9ORSA9ICdub25lJztcclxudmFyIFRPVUNIX0FDVElPTl9QQU5fWCA9ICdwYW4teCc7XHJcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1kgPSAncGFuLXknO1xyXG5cclxuLyoqXHJcbiAqIFRvdWNoIEFjdGlvblxyXG4gKiBzZXRzIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBvciB1c2VzIHRoZSBqcyBhbHRlcm5hdGl2ZVxyXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gVG91Y2hBY3Rpb24obWFuYWdlciwgdmFsdWUpIHtcclxuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XHJcbiAgICB0aGlzLnNldCh2YWx1ZSk7XHJcbn1cclxuXHJcblRvdWNoQWN0aW9uLnByb3RvdHlwZSA9IHtcclxuICAgIC8qKlxyXG4gICAgICogc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZSBvbiB0aGUgZWxlbWVudCBvciBlbmFibGUgdGhlIHBvbHlmaWxsXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIC8vIGZpbmQgb3V0IHRoZSB0b3VjaC1hY3Rpb24gYnkgdGhlIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgaWYgKHZhbHVlID09IFRPVUNIX0FDVElPTl9DT01QVVRFKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb21wdXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoTkFUSVZFX1RPVUNIX0FDVElPTikge1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZVtQUkVGSVhFRF9UT1VDSF9BQ1RJT05dID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIGp1c3QgcmUtc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZVxyXG4gICAgICovXHJcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuc2V0KHRoaXMubWFuYWdlci5vcHRpb25zLnRvdWNoQWN0aW9uKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb21wdXRlIHRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IGJhc2VkIG9uIHRoZSByZWNvZ25pemVyJ3Mgc2V0dGluZ3NcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGNvbXB1dGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XHJcbiAgICAgICAgZWFjaCh0aGlzLm1hbmFnZXIucmVjb2duaXplcnMsIGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcclxuICAgICAgICAgICAgaWYgKGJvb2xPckZuKHJlY29nbml6ZXIub3B0aW9ucy5lbmFibGUsIFtyZWNvZ25pemVyXSkpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zLmNvbmNhdChyZWNvZ25pemVyLmdldFRvdWNoQWN0aW9uKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMuam9pbignICcpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgb24gZWFjaCBpbnB1dCBjeWNsZSBhbmQgcHJvdmlkZXMgdGhlIHByZXZlbnRpbmcgb2YgdGhlIGJyb3dzZXIgYmVoYXZpb3JcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxyXG4gICAgICovXHJcbiAgICBwcmV2ZW50RGVmYXVsdHM6IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgICAgLy8gbm90IG5lZWRlZCB3aXRoIG5hdGl2ZSBzdXBwb3J0IGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHlcclxuICAgICAgICBpZiAoTkFUSVZFX1RPVUNIX0FDVElPTikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc3JjRXZlbnQgPSBpbnB1dC5zcmNFdmVudDtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQub2Zmc2V0RGlyZWN0aW9uO1xyXG5cclxuICAgICAgICAvLyBpZiB0aGUgdG91Y2ggYWN0aW9uIGRpZCBwcmV2ZW50ZWQgb25jZSB0aGlzIHNlc3Npb25cclxuICAgICAgICBpZiAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucHJldmVudGVkKSB7XHJcbiAgICAgICAgICAgIHNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xyXG4gICAgICAgIHZhciBoYXNOb25lID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpO1xyXG4gICAgICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcclxuICAgICAgICB2YXIgaGFzUGFuWCA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWCk7XHJcblxyXG4gICAgICAgIGlmIChoYXNOb25lIHx8XHJcbiAgICAgICAgICAgIChoYXNQYW5ZICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB8fFxyXG4gICAgICAgICAgICAoaGFzUGFuWCAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXZlbnRTcmMoc3JjRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzcmNFdmVudFxyXG4gICAgICovXHJcbiAgICBwcmV2ZW50U3JjOiBmdW5jdGlvbihzcmNFdmVudCkge1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCA9IHRydWU7XHJcbiAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiB3aGVuIHRoZSB0b3VjaEFjdGlvbnMgYXJlIGNvbGxlY3RlZCB0aGV5IGFyZSBub3QgYSB2YWxpZCB2YWx1ZSwgc28gd2UgbmVlZCB0byBjbGVhbiB0aGluZ3MgdXAuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbnNcclxuICogQHJldHVybnMgeyp9XHJcbiAqL1xyXG5mdW5jdGlvbiBjbGVhblRvdWNoQWN0aW9ucyhhY3Rpb25zKSB7XHJcbiAgICAvLyBub25lXHJcbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpKSB7XHJcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKTtcclxuICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcclxuXHJcbiAgICAvLyBwYW4teCBhbmQgcGFuLXkgY2FuIGJlIGNvbWJpbmVkXHJcbiAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XHJcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9QQU5fWCArICcgJyArIFRPVUNIX0FDVElPTl9QQU5fWTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwYW4teCBPUiBwYW4teVxyXG4gICAgaWYgKGhhc1BhblggfHwgaGFzUGFuWSkge1xyXG4gICAgICAgIHJldHVybiBoYXNQYW5YID8gVE9VQ0hfQUNUSU9OX1BBTl9YIDogVE9VQ0hfQUNUSU9OX1BBTl9ZO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1hbmlwdWxhdGlvblxyXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04pKSB7XHJcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT047XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFRPVUNIX0FDVElPTl9BVVRPO1xyXG59XHJcblxyXG4vKipcclxuICogUmVjb2duaXplciBmbG93IGV4cGxhaW5lZDsgKlxyXG4gKiBBbGwgcmVjb2duaXplcnMgaGF2ZSB0aGUgaW5pdGlhbCBzdGF0ZSBvZiBQT1NTSUJMRSB3aGVuIGEgaW5wdXQgc2Vzc2lvbiBzdGFydHMuXHJcbiAqIFRoZSBkZWZpbml0aW9uIG9mIGEgaW5wdXQgc2Vzc2lvbiBpcyBmcm9tIHRoZSBmaXJzdCBpbnB1dCB1bnRpbCB0aGUgbGFzdCBpbnB1dCwgd2l0aCBhbGwgaXQncyBtb3ZlbWVudCBpbiBpdC4gKlxyXG4gKiBFeGFtcGxlIHNlc3Npb24gZm9yIG1vdXNlLWlucHV0OiBtb3VzZWRvd24gLT4gbW91c2Vtb3ZlIC0+IG1vdXNldXBcclxuICpcclxuICogT24gZWFjaCByZWNvZ25pemluZyBjeWNsZSAoc2VlIE1hbmFnZXIucmVjb2duaXplKSB0aGUgLnJlY29nbml6ZSgpIG1ldGhvZCBpcyBleGVjdXRlZFxyXG4gKiB3aGljaCBkZXRlcm1pbmVzIHdpdGggc3RhdGUgaXQgc2hvdWxkIGJlLlxyXG4gKlxyXG4gKiBJZiB0aGUgcmVjb2duaXplciBoYXMgdGhlIHN0YXRlIEZBSUxFRCwgQ0FOQ0VMTEVEIG9yIFJFQ09HTklaRUQgKGVxdWFscyBFTkRFRCksIGl0IGlzIHJlc2V0IHRvXHJcbiAqIFBPU1NJQkxFIHRvIGdpdmUgaXQgYW5vdGhlciBjaGFuZ2Ugb24gdGhlIG5leHQgY3ljbGUuXHJcbiAqXHJcbiAqICAgICAgICAgICAgICAgUG9zc2libGVcclxuICogICAgICAgICAgICAgICAgICB8XHJcbiAqICAgICAgICAgICAgKy0tLS0tKy0tLS0tLS0tLS0tLS0tLStcclxuICogICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgICstLS0tLSstLS0tLSsgICAgICAgICAgICAgICB8XHJcbiAqICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgICAgIHxcclxuICogICBGYWlsZWQgICAgICBDYW5jZWxsZWQgICAgICAgICAgfFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0rLS0tLS0tK1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgfFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICBSZWNvZ25pemVkICAgICAgIEJlZ2FuXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2VkXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuZGVkL1JlY29nbml6ZWRcclxuICovXHJcbnZhciBTVEFURV9QT1NTSUJMRSA9IDE7XHJcbnZhciBTVEFURV9CRUdBTiA9IDI7XHJcbnZhciBTVEFURV9DSEFOR0VEID0gNDtcclxudmFyIFNUQVRFX0VOREVEID0gODtcclxudmFyIFNUQVRFX1JFQ09HTklaRUQgPSBTVEFURV9FTkRFRDtcclxudmFyIFNUQVRFX0NBTkNFTExFRCA9IDE2O1xyXG52YXIgU1RBVEVfRkFJTEVEID0gMzI7XHJcblxyXG4vKipcclxuICogUmVjb2duaXplclxyXG4gKiBFdmVyeSByZWNvZ25pemVyIG5lZWRzIHRvIGV4dGVuZCBmcm9tIHRoaXMgY2xhc3MuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gUmVjb2duaXplcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLmlkID0gdW5pcXVlSWQoKTtcclxuXHJcbiAgICB0aGlzLm1hbmFnZXIgPSBudWxsO1xyXG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2Uob3B0aW9ucyB8fCB7fSwgdGhpcy5kZWZhdWx0cyk7XHJcblxyXG4gICAgLy8gZGVmYXVsdCBpcyBlbmFibGUgdHJ1ZVxyXG4gICAgdGhpcy5vcHRpb25zLmVuYWJsZSA9IGlmVW5kZWZpbmVkKHRoaXMub3B0aW9ucy5lbmFibGUsIHRydWUpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcclxuXHJcbiAgICB0aGlzLnNpbXVsdGFuZW91cyA9IHt9O1xyXG4gICAgdGhpcy5yZXF1aXJlRmFpbCA9IFtdO1xyXG59XHJcblxyXG5SZWNvZ25pemVyLnByb3RvdHlwZSA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQHZpcnR1YWxcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGRlZmF1bHRzOiB7fSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAgICogQHJldHVybiB7UmVjb2duaXplcn1cclxuICAgICAqL1xyXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vIGFsc28gdXBkYXRlIHRoZSB0b3VjaEFjdGlvbiwgaW4gY2FzZSBzb21ldGhpbmcgY2hhbmdlZCBhYm91dCB0aGUgZGlyZWN0aW9ucy9lbmFibGVkIHN0YXRlXHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyICYmIHRoaXMubWFuYWdlci50b3VjaEFjdGlvbi51cGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplci5cclxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXHJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xyXG4gICAgICovXHJcbiAgICByZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcclxuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNpbXVsdGFuZW91cyA9IHRoaXMuc2ltdWx0YW5lb3VzO1xyXG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcclxuICAgICAgICBpZiAoIXNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdKSB7XHJcbiAgICAgICAgICAgIHNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdID0gb3RoZXJSZWNvZ25pemVyO1xyXG4gICAgICAgICAgICBvdGhlclJlY29nbml6ZXIucmVjb2duaXplV2l0aCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZHJvcCB0aGUgc2ltdWx0YW5lb3VzIGxpbmsuIGl0IGRvZXNudCByZW1vdmUgdGhlIGxpbmsgb24gdGhlIG90aGVyIHJlY29nbml6ZXIuXHJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcclxuICAgICAqL1xyXG4gICAgZHJvcFJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xyXG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlY29nbml6ZXIgY2FuIG9ubHkgcnVuIHdoZW4gYW4gb3RoZXIgaXMgZmFpbGluZ1xyXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXHJcbiAgICAgKi9cclxuICAgIHJlcXVpcmVGYWlsdXJlOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcclxuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByZXF1aXJlRmFpbCA9IHRoaXMucmVxdWlyZUZhaWw7XHJcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xyXG4gICAgICAgIGlmIChpbkFycmF5KHJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXF1aXJlRmFpbC5wdXNoKG90aGVyUmVjb2duaXplcik7XHJcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZXF1aXJlRmFpbHVyZSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZHJvcCB0aGUgcmVxdWlyZUZhaWx1cmUgbGluay4gaXQgZG9lcyBub3QgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxyXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXHJcbiAgICAgKi9cclxuICAgIGRyb3BSZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XHJcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZXF1aXJlRmFpbHVyZScsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xyXG4gICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkodGhpcy5yZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlcXVpcmVGYWlsLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIGhhcyByZXF1aXJlIGZhaWx1cmVzIGJvb2xlYW5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBoYXNSZXF1aXJlRmFpbHVyZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCA+IDA7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaWYgdGhlIHJlY29nbml6ZXIgY2FuIHJlY29nbml6ZSBzaW11bHRhbmVvdXMgd2l0aCBhbiBvdGhlciByZWNvZ25pemVyXHJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGNhblJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogWW91IHNob3VsZCB1c2UgYHRyeUVtaXRgIGluc3RlYWQgb2YgYGVtaXRgIGRpcmVjdGx5IHRvIGNoZWNrXHJcbiAgICAgKiB0aGF0IGFsbCB0aGUgbmVlZGVkIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQgYmVmb3JlIGVtaXR0aW5nLlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XHJcbiAgICAgKi9cclxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGVtaXQod2l0aFN0YXRlKSB7XHJcbiAgICAgICAgICAgIHNlbGYubWFuYWdlci5lbWl0KHNlbGYub3B0aW9ucy5ldmVudCArICh3aXRoU3RhdGUgPyBzdGF0ZVN0cihzdGF0ZSkgOiAnJyksIGlucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICdwYW5zdGFydCcgYW5kICdwYW5tb3ZlJ1xyXG4gICAgICAgIGlmIChzdGF0ZSA8IFNUQVRFX0VOREVEKSB7XHJcbiAgICAgICAgICAgIGVtaXQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbWl0KCk7IC8vIHNpbXBsZSAnZXZlbnROYW1lJyBldmVudHNcclxuXHJcbiAgICAgICAgLy8gcGFuZW5kIGFuZCBwYW5jYW5jZWxcclxuICAgICAgICBpZiAoc3RhdGUgPj0gU1RBVEVfRU5ERUQpIHtcclxuICAgICAgICAgICAgZW1pdCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgdGhhdCBhbGwgdGhlIHJlcXVpcmUgZmFpbHVyZSByZWNvZ25pemVycyBoYXMgZmFpbGVkLFxyXG4gICAgICogaWYgdHJ1ZSwgaXQgZW1pdHMgYSBnZXN0dXJlIGV2ZW50LFxyXG4gICAgICogb3RoZXJ3aXNlLCBzZXR1cCB0aGUgc3RhdGUgdG8gRkFJTEVELlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XHJcbiAgICAgKi9cclxuICAgIHRyeUVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuRW1pdCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpdCdzIGZhaWxpbmcgYW55d2F5XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYW4gd2UgZW1pdD9cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBjYW5FbWl0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoISh0aGlzLnJlcXVpcmVGYWlsW2ldLnN0YXRlICYgKFNUQVRFX0ZBSUxFRCB8IFNUQVRFX1BPU1NJQkxFKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIHVwZGF0ZSB0aGUgcmVjb2duaXplclxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxyXG4gICAgICovXHJcbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uKGlucHV0RGF0YSkge1xyXG4gICAgICAgIC8vIG1ha2UgYSBuZXcgY29weSBvZiB0aGUgaW5wdXREYXRhXHJcbiAgICAgICAgLy8gc28gd2UgY2FuIGNoYW5nZSB0aGUgaW5wdXREYXRhIHdpdGhvdXQgbWVzc2luZyB1cCB0aGUgb3RoZXIgcmVjb2duaXplcnNcclxuICAgICAgICB2YXIgaW5wdXREYXRhQ2xvbmUgPSBleHRlbmQoe30sIGlucHV0RGF0YSk7XHJcblxyXG4gICAgICAgIC8vIGlzIGlzIGVuYWJsZWQgYW5kIGFsbG93IHJlY29nbml6aW5nP1xyXG4gICAgICAgIGlmICghYm9vbE9yRm4odGhpcy5vcHRpb25zLmVuYWJsZSwgW3RoaXMsIGlucHV0RGF0YUNsb25lXSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZXNldCB3aGVuIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZFxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX1JFQ09HTklaRUQgfCBTVEFURV9DQU5DRUxMRUQgfCBTVEFURV9GQUlMRUQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb2Nlc3MoaW5wdXREYXRhQ2xvbmUpO1xyXG5cclxuICAgICAgICAvLyB0aGUgcmVjb2duaXplciBoYXMgcmVjb2duaXplZCBhIGdlc3R1cmVcclxuICAgICAgICAvLyBzbyB0cmlnZ2VyIGFuIGV2ZW50XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQgfCBTVEFURV9DQU5DRUxMRUQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJ5RW1pdChpbnB1dERhdGFDbG9uZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybiB0aGUgc3RhdGUgb2YgdGhlIHJlY29nbml6ZXJcclxuICAgICAqIHRoZSBhY3R1YWwgcmVjb2duaXppbmcgaGFwcGVucyBpbiB0aGlzIG1ldGhvZFxyXG4gICAgICogQHZpcnR1YWxcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcclxuICAgICAqIEByZXR1cm5zIHtDb25zdH0gU1RBVEVcclxuICAgICAqL1xyXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXREYXRhKSB7IH0sIC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJuIHRoZSBwcmVmZXJyZWQgdG91Y2gtYWN0aW9uXHJcbiAgICAgKiBAdmlydHVhbFxyXG4gICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICovXHJcbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7IH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxsZWQgd2hlbiB0aGUgZ2VzdHVyZSBpc24ndCBhbGxvd2VkIHRvIHJlY29nbml6ZVxyXG4gICAgICogbGlrZSB3aGVuIGFub3RoZXIgaXMgYmVpbmcgcmVjb2duaXplZCBvciBpdCBpcyBkaXNhYmxlZFxyXG4gICAgICogQHZpcnR1YWxcclxuICAgICAqL1xyXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkgeyB9XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGEgdXNhYmxlIHN0cmluZywgdXNlZCBhcyBldmVudCBwb3N0Zml4XHJcbiAqIEBwYXJhbSB7Q29uc3R9IHN0YXRlXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBzdGF0ZVN0cihzdGF0ZSkge1xyXG4gICAgaWYgKHN0YXRlICYgU1RBVEVfQ0FOQ0VMTEVEKSB7XHJcbiAgICAgICAgcmV0dXJuICdjYW5jZWwnO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0VOREVEKSB7XHJcbiAgICAgICAgcmV0dXJuICdlbmQnO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0NIQU5HRUQpIHtcclxuICAgICAgICByZXR1cm4gJ21vdmUnO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0JFR0FOKSB7XHJcbiAgICAgICAgcmV0dXJuICdzdGFydCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBkaXJlY3Rpb24gY29ucyB0byBzdHJpbmdcclxuICogQHBhcmFtIHtDb25zdH0gZGlyZWN0aW9uXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBkaXJlY3Rpb25TdHIoZGlyZWN0aW9uKSB7XHJcbiAgICBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9ET1dOKSB7XHJcbiAgICAgICAgcmV0dXJuICdkb3duJztcclxuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9VUCkge1xyXG4gICAgICAgIHJldHVybiAndXAnO1xyXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0xFRlQpIHtcclxuICAgICAgICByZXR1cm4gJ2xlZnQnO1xyXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1JJR0hUKSB7XHJcbiAgICAgICAgcmV0dXJuICdyaWdodCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnZXQgYSByZWNvZ25pemVyIGJ5IG5hbWUgaWYgaXQgaXMgYm91bmQgdG8gYSBtYW5hZ2VyXHJcbiAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IG90aGVyUmVjb2duaXplclxyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcclxuICogQHJldHVybnMge1JlY29nbml6ZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgcmVjb2duaXplcikge1xyXG4gICAgdmFyIG1hbmFnZXIgPSByZWNvZ25pemVyLm1hbmFnZXI7XHJcbiAgICBpZiAobWFuYWdlcikge1xyXG4gICAgICAgIHJldHVybiBtYW5hZ2VyLmdldChvdGhlclJlY29nbml6ZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG90aGVyUmVjb2duaXplcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgcmVjb2duaXplciBpcyBqdXN0IHVzZWQgYXMgYSBiYXNlIGZvciB0aGUgc2ltcGxlIGF0dHJpYnV0ZSByZWNvZ25pemVycy5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcclxuICovXHJcbmZ1bmN0aW9uIEF0dHJSZWNvZ25pemVyKCkge1xyXG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5pbmhlcml0KEF0dHJSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XHJcbiAgICAvKipcclxuICAgICAqIEBuYW1lc3BhY2VcclxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxyXG4gICAgICovXHJcbiAgICBkZWZhdWx0czoge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgICAgICogQGRlZmF1bHQgMVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvaW50ZXJzOiAxXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBjaGVjayBpZiBpdCB0aGUgcmVjb2duaXplciByZWNlaXZlcyB2YWxpZCBpbnB1dCwgbGlrZSBpbnB1dC5kaXN0YW5jZSA+IDEwLlxyXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSByZWNvZ25pemVkXHJcbiAgICAgKi9cclxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIHZhciBvcHRpb25Qb2ludGVycyA9IHRoaXMub3B0aW9ucy5wb2ludGVycztcclxuICAgICAgICByZXR1cm4gb3B0aW9uUG9pbnRlcnMgPT09IDAgfHwgaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25Qb2ludGVycztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBpbnB1dCBhbmQgcmV0dXJuIHRoZSBzdGF0ZSBmb3IgdGhlIHJlY29nbml6ZXJcclxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gU3RhdGVcclxuICAgICAqL1xyXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIHZhciBldmVudFR5cGUgPSBpbnB1dC5ldmVudFR5cGU7XHJcblxyXG4gICAgICAgIHZhciBpc1JlY29nbml6ZWQgPSBzdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQpO1xyXG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5hdHRyVGVzdChpbnB1dCk7XHJcblxyXG4gICAgICAgIC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcclxuICAgICAgICBpZiAoaXNSZWNvZ25pemVkICYmIChldmVudFR5cGUgJiBJTlBVVF9DQU5DRUwgfHwgIWlzVmFsaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NBTkNFTExFRDtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0VOREVEO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBQYW5cclxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvd24gYW5kIG1vdmVkIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXHJcbiAqL1xyXG5mdW5jdGlvbiBQYW5SZWNvZ25pemVyKCkge1xyXG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgICB0aGlzLnBYID0gbnVsbDtcclxuICAgIHRoaXMucFkgPSBudWxsO1xyXG59XHJcblxyXG5pbmhlcml0KFBhblJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XHJcbiAgICAvKipcclxuICAgICAqIEBuYW1lc3BhY2VcclxuICAgICAqIEBtZW1iZXJvZiBQYW5SZWNvZ25pemVyXHJcbiAgICAgKi9cclxuICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgZXZlbnQ6ICdwYW4nLFxyXG4gICAgICAgIHRocmVzaG9sZDogMTAsXHJcbiAgICAgICAgcG9pbnRlcnM6IDEsXHJcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fQUxMXHJcbiAgICB9LFxyXG5cclxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcclxuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xyXG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xyXG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9YKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbnM7XHJcbiAgICB9LFxyXG5cclxuICAgIGRpcmVjdGlvblRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgdmFyIGhhc01vdmVkID0gdHJ1ZTtcclxuICAgICAgICB2YXIgZGlzdGFuY2UgPSBpbnB1dC5kaXN0YW5jZTtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQuZGlyZWN0aW9uO1xyXG4gICAgICAgIHZhciB4ID0gaW5wdXQuZGVsdGFYO1xyXG4gICAgICAgIHZhciB5ID0gaW5wdXQuZGVsdGFZO1xyXG5cclxuICAgICAgICAvLyBsb2NrIHRvIGF4aXM/XHJcbiAgICAgICAgaWYgKCEoZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAoeCA9PT0gMCkgPyBESVJFQ1RJT05fTk9ORSA6ICh4IDwgMCkgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcclxuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geCAhPSB0aGlzLnBYO1xyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gKHkgPT09IDApID8gRElSRUNUSU9OX05PTkUgOiAoeSA8IDApID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XHJcbiAgICAgICAgICAgICAgICBoYXNNb3ZlZCA9IHkgIT0gdGhpcy5wWTtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFZKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICAgICAgcmV0dXJuIGhhc01vdmVkICYmIGRpc3RhbmNlID4gb3B0aW9ucy50aHJlc2hvbGQgJiYgZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb247XHJcbiAgICB9LFxyXG5cclxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBBdHRyUmVjb2duaXplci5wcm90b3R5cGUuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTiB8fCAoISh0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pICYmIHRoaXMuZGlyZWN0aW9uVGVzdChpbnB1dCkpKTtcclxuICAgIH0sXHJcblxyXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgICB0aGlzLnBYID0gaW5wdXQuZGVsdGFYO1xyXG4gICAgICAgIHRoaXMucFkgPSBpbnB1dC5kZWx0YVk7XHJcblxyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbiwgaW5wdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcclxuICAgIH1cclxufSk7XHJcblxyXG4vKipcclxuICogUGluY2hcclxuICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXJzIGFyZSBtb3ZpbmcgdG93YXJkICh6b29tLWluKSBvciBhd2F5IGZyb20gZWFjaCBvdGhlciAoem9vbS1vdXQpLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcclxuICovXHJcbmZ1bmN0aW9uIFBpbmNoUmVjb2duaXplcigpIHtcclxuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmluaGVyaXQoUGluY2hSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAbmFtZXNwYWNlXHJcbiAgICAgKiBAbWVtYmVyb2YgUGluY2hSZWNvZ25pemVyXHJcbiAgICAgKi9cclxuICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgZXZlbnQ6ICdwaW5jaCcsXHJcbiAgICAgICAgdGhyZXNob2xkOiAwLFxyXG4gICAgICAgIHBvaW50ZXJzOiAyXHJcbiAgICB9LFxyXG5cclxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcclxuICAgIH0sXHJcblxyXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXHJcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5zY2FsZSAtIDEpID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xyXG4gICAgfSxcclxuXHJcbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIHRoaXMuX3N1cGVyLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XHJcbiAgICAgICAgaWYgKGlucHV0LnNjYWxlICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHZhciBpbk91dCA9IGlucHV0LnNjYWxlIDwgMSA/ICdpbicgOiAnb3V0JztcclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgaW5PdXQsIGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFByZXNzXHJcbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGZvciB4IG1zIHdpdGhvdXQgYW55IG1vdmVtZW50LlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgUmVjb2duaXplclxyXG4gKi9cclxuZnVuY3Rpb24gUHJlc3NSZWNvZ25pemVyKCkge1xyXG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcclxuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcclxufVxyXG5cclxuaW5oZXJpdChQcmVzc1JlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcclxuICAgIC8qKlxyXG4gICAgICogQG5hbWVzcGFjZVxyXG4gICAgICogQG1lbWJlcm9mIFByZXNzUmVjb2duaXplclxyXG4gICAgICovXHJcbiAgICBkZWZhdWx0czoge1xyXG4gICAgICAgIGV2ZW50OiAncHJlc3MnLFxyXG4gICAgICAgIHBvaW50ZXJzOiAxLFxyXG4gICAgICAgIHRpbWU6IDUwMCwgLy8gbWluaW1hbCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIHByZXNzZWRcclxuICAgICAgICB0aHJlc2hvbGQ6IDUgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX0FVVE9dO1xyXG4gICAgfSxcclxuXHJcbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25zLnBvaW50ZXJzO1xyXG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcclxuICAgICAgICB2YXIgdmFsaWRUaW1lID0gaW5wdXQuZGVsdGFUaW1lID4gb3B0aW9ucy50aW1lO1xyXG5cclxuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xyXG5cclxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxyXG4gICAgICAgIC8vIGFuZCB3ZSd2ZSByZWFjaGVkIGFuIGVuZCBldmVudCwgc28gYSB0YXAgaXMgcG9zc2libGVcclxuICAgICAgICBpZiAoIXZhbGlkTW92ZW1lbnQgfHwgIXZhbGlkUG9pbnRlcnMgfHwgKGlucHV0LmV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmICF2YWxpZFRpbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9SRUNPR05JWkVEO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XHJcbiAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZSwgdGhpcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTVEFURV9SRUNPR05JWkVEKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbnB1dCAmJiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EKSkge1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyAndXAnLCBpbnB1dCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faW5wdXQudGltZVN0YW1wID0gbm93KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG4vKipcclxuICogUm90YXRlXHJcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVyIGFyZSBtb3ZpbmcgaW4gYSBjaXJjdWxhciBtb3Rpb24uXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxyXG4gKi9cclxuZnVuY3Rpb24gUm90YXRlUmVjb2duaXplcigpIHtcclxuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmluaGVyaXQoUm90YXRlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcclxuICAgIC8qKlxyXG4gICAgICogQG5hbWVzcGFjZVxyXG4gICAgICogQG1lbWJlcm9mIFJvdGF0ZVJlY29nbml6ZXJcclxuICAgICAqL1xyXG4gICAgZGVmYXVsdHM6IHtcclxuICAgICAgICBldmVudDogJ3JvdGF0ZScsXHJcbiAgICAgICAgdGhyZXNob2xkOiAwLFxyXG4gICAgICAgIHBvaW50ZXJzOiAyXHJcbiAgICB9LFxyXG5cclxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcclxuICAgIH0sXHJcblxyXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXHJcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5yb3RhdGlvbikgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTik7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFN3aXBlXHJcbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBtb3ZpbmcgZmFzdCAodmVsb2NpdHkpLCB3aXRoIGVub3VnaCBkaXN0YW5jZSBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxyXG4gKi9cclxuZnVuY3Rpb24gU3dpcGVSZWNvZ25pemVyKCkge1xyXG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuaW5oZXJpdChTd2lwZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XHJcbiAgICAvKipcclxuICAgICAqIEBuYW1lc3BhY2VcclxuICAgICAqIEBtZW1iZXJvZiBTd2lwZVJlY29nbml6ZXJcclxuICAgICAqL1xyXG4gICAgZGVmYXVsdHM6IHtcclxuICAgICAgICBldmVudDogJ3N3aXBlJyxcclxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxyXG4gICAgICAgIHZlbG9jaXR5OiAwLjY1LFxyXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwsXHJcbiAgICAgICAgcG9pbnRlcnM6IDFcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQYW5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRUb3VjaEFjdGlvbi5jYWxsKHRoaXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcclxuICAgICAgICB2YXIgdmVsb2NpdHk7XHJcblxyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiAoRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwpKSB7XHJcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQudmVsb2NpdHk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xyXG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0LnZlbG9jaXR5WDtcclxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xyXG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0LnZlbG9jaXR5WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxyXG4gICAgICAgICAgICBkaXJlY3Rpb24gJiBpbnB1dC5kaXJlY3Rpb24gJiZcclxuICAgICAgICAgICAgaW5wdXQuZGlzdGFuY2UgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkICYmXHJcbiAgICAgICAgICAgIGFicyh2ZWxvY2l0eSkgPiB0aGlzLm9wdGlvbnMudmVsb2NpdHkgJiYgaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EO1xyXG4gICAgfSxcclxuXHJcbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbiwgaW5wdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCBpbnB1dCk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEEgdGFwIGlzIGVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvaW5nIGEgc21hbGwgdGFwL2NsaWNrLiBNdWx0aXBsZSB0YXBzIGFyZSByZWNvZ25pemVkIGlmIHRoZXkgb2NjdXJcclxuICogYmV0d2VlbiB0aGUgZ2l2ZW4gaW50ZXJ2YWwgYW5kIHBvc2l0aW9uLiBUaGUgZGVsYXkgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBtdWx0aS10YXBzIHdpdGhvdXQgZmlyaW5nXHJcbiAqIGEgc2luZ2xlIHRhcC5cclxuICpcclxuICogVGhlIGV2ZW50RGF0YSBmcm9tIHRoZSBlbWl0dGVkIGV2ZW50IGNvbnRhaW5zIHRoZSBwcm9wZXJ0eSBgdGFwQ291bnRgLCB3aGljaCBjb250YWlucyB0aGUgYW1vdW50IG9mXHJcbiAqIG11bHRpLXRhcHMgYmVpbmcgcmVjb2duaXplZC5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcclxuICovXHJcbmZ1bmN0aW9uIFRhcFJlY29nbml6ZXIoKSB7XHJcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgLy8gcHJldmlvdXMgdGltZSBhbmQgY2VudGVyLFxyXG4gICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXHJcbiAgICB0aGlzLnBUaW1lID0gZmFsc2U7XHJcbiAgICB0aGlzLnBDZW50ZXIgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl90aW1lciA9IG51bGw7XHJcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XHJcbiAgICB0aGlzLmNvdW50ID0gMDtcclxufVxyXG5cclxuaW5oZXJpdChUYXBSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XHJcbiAgICAvKipcclxuICAgICAqIEBuYW1lc3BhY2VcclxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcclxuICAgICAqL1xyXG4gICAgZGVmYXVsdHM6IHtcclxuICAgICAgICBldmVudDogJ3RhcCcsXHJcbiAgICAgICAgcG9pbnRlcnM6IDEsXHJcbiAgICAgICAgdGFwczogMSxcclxuICAgICAgICBpbnRlcnZhbDogMzAwLCAvLyBtYXggdGltZSBiZXR3ZWVuIHRoZSBtdWx0aS10YXAgdGFwc1xyXG4gICAgICAgIHRpbWU6IDI1MCwgLy8gbWF4IHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgZG93biAobGlrZSBmaW5nZXIgb24gdGhlIHNjcmVlbilcclxuICAgICAgICB0aHJlc2hvbGQ6IDIsIC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XHJcbiAgICAgICAgcG9zVGhyZXNob2xkOiAxMCAvLyBhIG11bHRpLXRhcCBjYW4gYmUgYSBiaXQgb2ZmIHRoZSBpbml0aWFsIHBvc2l0aW9uXHJcbiAgICB9LFxyXG5cclxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9NQU5JUFVMQVRJT05dO1xyXG4gICAgfSxcclxuXHJcbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG5cclxuICAgICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcclxuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XHJcbiAgICAgICAgdmFyIHZhbGlkVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgb3B0aW9ucy50aW1lO1xyXG5cclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblxyXG4gICAgICAgIGlmICgoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpICYmICh0aGlzLmNvdW50ID09PSAwKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsVGltZW91dCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcclxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXHJcbiAgICAgICAgaWYgKHZhbGlkTW92ZW1lbnQgJiYgdmFsaWRUb3VjaFRpbWUgJiYgdmFsaWRQb2ludGVycykge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0VORCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHZhbGlkSW50ZXJ2YWwgPSB0aGlzLnBUaW1lID8gKGlucHV0LnRpbWVTdGFtcCAtIHRoaXMucFRpbWUgPCBvcHRpb25zLmludGVydmFsKSA6IHRydWU7XHJcbiAgICAgICAgICAgIHZhciB2YWxpZE11bHRpVGFwID0gIXRoaXMucENlbnRlciB8fCBnZXREaXN0YW5jZSh0aGlzLnBDZW50ZXIsIGlucHV0LmNlbnRlcikgPCBvcHRpb25zLnBvc1RocmVzaG9sZDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucFRpbWUgPSBpbnB1dC50aW1lU3RhbXA7XHJcbiAgICAgICAgICAgIHRoaXMucENlbnRlciA9IGlucHV0LmNlbnRlcjtcclxuXHJcbiAgICAgICAgICAgIGlmICghdmFsaWRNdWx0aVRhcCB8fCAhdmFsaWRJbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB0YXAgY291bnQgbWF0Y2hlcyB3ZSBoYXZlIHJlY29nbml6ZWQgaXQsXHJcbiAgICAgICAgICAgIC8vIGVsc2UgaXQgaGFzIGJlZ2FuIHJlY29nbml6aW5nLi4uXHJcbiAgICAgICAgICAgIHZhciB0YXBDb3VudCA9IHRoaXMuY291bnQgJSBvcHRpb25zLnRhcHM7XHJcbiAgICAgICAgICAgIGlmICh0YXBDb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gbm8gZmFpbGluZyByZXF1aXJlbWVudHMsIGltbWVkaWF0ZWx5IHRyaWdnZXIgdGhlIHRhcCBldmVudFxyXG4gICAgICAgICAgICAgICAgLy8gb3Igd2FpdCBhcyBsb25nIGFzIHRoZSBtdWx0aXRhcCBpbnRlcnZhbCB0byB0cmlnZ2VyXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzUmVxdWlyZUZhaWx1cmVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5RW1pdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuaW50ZXJ2YWwsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xyXG4gICAgfSxcclxuXHJcbiAgICBmYWlsVGltZW91dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcclxuICAgICAgICB9LCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwsIHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBlbWl0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSBTVEFURV9SRUNPR05JWkVEICkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnB1dC50YXBDb3VudCA9IHRoaXMuY291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG4vKipcclxuICogU2ltcGxlIHdheSB0byBjcmVhdGUgYW4gbWFuYWdlciB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgcmVjb2duaXplcnMuXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEhhbW1lcihlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIG9wdGlvbnMucmVjb2duaXplcnMgPSBpZlVuZGVmaW5lZChvcHRpb25zLnJlY29nbml6ZXJzLCBIYW1tZXIuZGVmYXVsdHMucHJlc2V0KTtcclxuICAgIHJldHVybiBuZXcgTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBjb25zdCB7c3RyaW5nfVxyXG4gKi9cclxuSGFtbWVyLlZFUlNJT04gPSAnMi4wLjQnO1xyXG5cclxuLyoqXHJcbiAqIGRlZmF1bHQgc2V0dGluZ3NcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxuSGFtbWVyLmRlZmF1bHRzID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgaWYgRE9NIGV2ZW50cyBhcmUgYmVpbmcgdHJpZ2dlcmVkLlxyXG4gICAgICogQnV0IHRoaXMgaXMgc2xvd2VyIGFuZCB1bnVzZWQgYnkgc2ltcGxlIGltcGxlbWVudGF0aW9ucywgc28gZGlzYWJsZWQgYnkgZGVmYXVsdC5cclxuICAgICAqIEB0eXBlIHtCb29sZWFufVxyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAqL1xyXG4gICAgZG9tRXZlbnRzOiBmYWxzZSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5L2ZhbGxiYWNrLlxyXG4gICAgICogV2hlbiBzZXQgdG8gYGNvbXB1dGVgIGl0IHdpbGwgbWFnaWNhbGx5IHNldCB0aGUgY29ycmVjdCB2YWx1ZSBiYXNlZCBvbiB0aGUgYWRkZWQgcmVjb2duaXplcnMuXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICogQGRlZmF1bHQgY29tcHV0ZVxyXG4gICAgICovXHJcbiAgICB0b3VjaEFjdGlvbjogVE9VQ0hfQUNUSU9OX0NPTVBVVEUsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAqIEBkZWZhdWx0IHRydWVcclxuICAgICAqL1xyXG4gICAgZW5hYmxlOiB0cnVlLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRVhQRVJJTUVOVEFMIEZFQVRVUkUgLS0gY2FuIGJlIHJlbW92ZWQvY2hhbmdlZFxyXG4gICAgICogQ2hhbmdlIHRoZSBwYXJlbnQgaW5wdXQgdGFyZ2V0IGVsZW1lbnQuXHJcbiAgICAgKiBJZiBOdWxsLCB0aGVuIGl0IGlzIGJlaW5nIHNldCB0aGUgdG8gbWFpbiBlbGVtZW50LlxyXG4gICAgICogQHR5cGUge051bGx8RXZlbnRUYXJnZXR9XHJcbiAgICAgKiBAZGVmYXVsdCBudWxsXHJcbiAgICAgKi9cclxuICAgIGlucHV0VGFyZ2V0OiBudWxsLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZm9yY2UgYW4gaW5wdXQgY2xhc3NcclxuICAgICAqIEB0eXBlIHtOdWxsfEZ1bmN0aW9ufVxyXG4gICAgICogQGRlZmF1bHQgbnVsbFxyXG4gICAgICovXHJcbiAgICBpbnB1dENsYXNzOiBudWxsLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCByZWNvZ25pemVyIHNldHVwIHdoZW4gY2FsbGluZyBgSGFtbWVyKClgXHJcbiAgICAgKiBXaGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIgdGhlc2Ugd2lsbCBiZSBza2lwcGVkLlxyXG4gICAgICogQHR5cGUge0FycmF5fVxyXG4gICAgICovXHJcbiAgICBwcmVzZXQ6IFtcclxuICAgICAgICAvLyBSZWNvZ25pemVyQ2xhc3MsIG9wdGlvbnMsIFtyZWNvZ25pemVXaXRoLCAuLi5dLCBbcmVxdWlyZUZhaWx1cmUsIC4uLl1cclxuICAgICAgICBbUm90YXRlUmVjb2duaXplciwgeyBlbmFibGU6IGZhbHNlIH1dLFxyXG4gICAgICAgIFtQaW5jaFJlY29nbml6ZXIsIHsgZW5hYmxlOiBmYWxzZSB9LCBbJ3JvdGF0ZSddXSxcclxuICAgICAgICBbU3dpcGVSZWNvZ25pemVyLHsgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTCB9XSxcclxuICAgICAgICBbUGFuUmVjb2duaXplciwgeyBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMIH0sIFsnc3dpcGUnXV0sXHJcbiAgICAgICAgW1RhcFJlY29nbml6ZXJdLFxyXG4gICAgICAgIFtUYXBSZWNvZ25pemVyLCB7IGV2ZW50OiAnZG91YmxldGFwJywgdGFwczogMiB9LCBbJ3RhcCddXSxcclxuICAgICAgICBbUHJlc3NSZWNvZ25pemVyXVxyXG4gICAgXSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNvbWUgQ1NTIHByb3BlcnRpZXMgY2FuIGJlIHVzZWQgdG8gaW1wcm92ZSB0aGUgd29ya2luZyBvZiBIYW1tZXIuXHJcbiAgICAgKiBBZGQgdGhlbSB0byB0aGlzIG1ldGhvZCBhbmQgdGhleSB3aWxsIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIuXHJcbiAgICAgKiBAbmFtZXNwYWNlXHJcbiAgICAgKi9cclxuICAgIGNzc1Byb3BzOiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGlzYWJsZXMgdGV4dCBzZWxlY3Rpb24gdG8gaW1wcm92ZSB0aGUgZHJhZ2dpbmcgZ2VzdHVyZS4gTWFpbmx5IGZvciBkZXNrdG9wIGJyb3dzZXJzLlxyXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEaXNhYmxlIHRoZSBXaW5kb3dzIFBob25lIGdyaXBwZXJzIHdoZW4gcHJlc3NpbmcgYW4gZWxlbWVudC5cclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvdWNoU2VsZWN0OiAnbm9uZScsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERpc2FibGVzIHRoZSBkZWZhdWx0IGNhbGxvdXQgc2hvd24gd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQuXHJcbiAgICAgICAgICogT24gaU9TLCB3aGVuIHlvdSB0b3VjaCBhbmQgaG9sZCBhIHRvdWNoIHRhcmdldCBzdWNoIGFzIGEgbGluaywgU2FmYXJpIGRpc3BsYXlzXHJcbiAgICAgICAgICogYSBjYWxsb3V0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxpbmsuIFRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBkaXNhYmxlIHRoYXQgY2FsbG91dC5cclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvdWNoQ2FsbG91dDogJ25vbmUnLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB6b29taW5nIGlzIGVuYWJsZWQuIFVzZWQgYnkgSUUxMD5cclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRlbnRab29taW5nOiAnbm9uZScsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGF0IGFuIGVudGlyZSBlbGVtZW50IHNob3VsZCBiZSBkcmFnZ2FibGUgaW5zdGVhZCBvZiBpdHMgY29udGVudHMuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVzZXJEcmFnOiAnbm9uZScsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyB0aGUgaGlnaGxpZ2h0IGNvbG9yIHNob3duIHdoZW4gdGhlIHVzZXIgdGFwcyBhIGxpbmsgb3IgYSBKYXZhU2NyaXB0XHJcbiAgICAgICAgICogY2xpY2thYmxlIGVsZW1lbnQgaW4gaU9TLiBUaGlzIHByb3BlcnR5IG9iZXlzIHRoZSBhbHBoYSB2YWx1ZSwgaWYgc3BlY2lmaWVkLlxyXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgICAgICogQGRlZmF1bHQgJ3JnYmEoMCwwLDAsMCknXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJ1xyXG4gICAgfVxyXG59O1xyXG5cclxudmFyIFNUT1AgPSAxO1xyXG52YXIgRk9SQ0VEX1NUT1AgPSAyO1xyXG5cclxuLyoqXHJcbiAqIE1hbmFnZXJcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCBIYW1tZXIuZGVmYXVsdHMpO1xyXG4gICAgdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0ID0gdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0IHx8IGVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy5oYW5kbGVycyA9IHt9O1xyXG4gICAgdGhpcy5zZXNzaW9uID0ge307XHJcbiAgICB0aGlzLnJlY29nbml6ZXJzID0gW107XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuaW5wdXQgPSBjcmVhdGVJbnB1dEluc3RhbmNlKHRoaXMpO1xyXG4gICAgdGhpcy50b3VjaEFjdGlvbiA9IG5ldyBUb3VjaEFjdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xyXG5cclxuICAgIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIHRydWUpO1xyXG5cclxuICAgIGVhY2gob3B0aW9ucy5yZWNvZ25pemVycywgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIHZhciByZWNvZ25pemVyID0gdGhpcy5hZGQobmV3IChpdGVtWzBdKShpdGVtWzFdKSk7XHJcbiAgICAgICAgaXRlbVsyXSAmJiByZWNvZ25pemVyLnJlY29nbml6ZVdpdGgoaXRlbVsyXSk7XHJcbiAgICAgICAgaXRlbVszXSAmJiByZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKGl0ZW1bM10pO1xyXG4gICAgfSwgdGhpcyk7XHJcbn1cclxuXHJcbk1hbmFnZXIucHJvdG90eXBlID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgb3B0aW9uc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxyXG4gICAgICovXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBleHRlbmQodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gT3B0aW9ucyB0aGF0IG5lZWQgYSBsaXR0bGUgbW9yZSBzZXR1cFxyXG4gICAgICAgIGlmIChvcHRpb25zLnRvdWNoQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmlucHV0VGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIGV2ZW50IGxpc3RlbmVycyBhbmQgcmVpbml0aWFsaXplXHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0LnRhcmdldCA9IG9wdGlvbnMuaW5wdXRUYXJnZXQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzdG9wIHJlY29nbml6aW5nIGZvciB0aGlzIHNlc3Npb24uXHJcbiAgICAgKiBUaGlzIHNlc3Npb24gd2lsbCBiZSBkaXNjYXJkZWQsIHdoZW4gYSBuZXcgW2lucHV0XXN0YXJ0IGV2ZW50IGlzIGZpcmVkLlxyXG4gICAgICogV2hlbiBmb3JjZWQsIHRoZSByZWNvZ25pemVyIGN5Y2xlIGlzIHN0b3BwZWQgaW1tZWRpYXRlbHkuXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZV1cclxuICAgICAqL1xyXG4gICAgc3RvcDogZnVuY3Rpb24oZm9yY2UpIHtcclxuICAgICAgICB0aGlzLnNlc3Npb24uc3RvcHBlZCA9IGZvcmNlID8gRk9SQ0VEX1NUT1AgOiBTVE9QO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJ1biB0aGUgcmVjb2duaXplcnMhXHJcbiAgICAgKiBjYWxsZWQgYnkgdGhlIGlucHV0SGFuZGxlciBmdW5jdGlvbiBvbiBldmVyeSBtb3ZlbWVudCBvZiB0aGUgcG9pbnRlcnMgKHRvdWNoZXMpXHJcbiAgICAgKiBpdCB3YWxrcyB0aHJvdWdoIGFsbCB0aGUgcmVjb2duaXplcnMgYW5kIHRyaWVzIHRvIGRldGVjdCB0aGUgZ2VzdHVyZSB0aGF0IGlzIGJlaW5nIG1hZGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcclxuICAgICAqL1xyXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcclxuICAgICAgICB2YXIgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbjtcclxuICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJ1biB0aGUgdG91Y2gtYWN0aW9uIHBvbHlmaWxsXHJcbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi5wcmV2ZW50RGVmYXVsdHMoaW5wdXREYXRhKTtcclxuXHJcbiAgICAgICAgdmFyIHJlY29nbml6ZXI7XHJcbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcclxuXHJcbiAgICAgICAgLy8gdGhpcyBob2xkcyB0aGUgcmVjb2duaXplciB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXHJcbiAgICAgICAgLy8gc28gdGhlIHJlY29nbml6ZXIncyBzdGF0ZSBuZWVkcyB0byBiZSBCRUdBTiwgQ0hBTkdFRCwgRU5ERUQgb3IgUkVDT0dOSVpFRFxyXG4gICAgICAgIC8vIGlmIG5vIHJlY29nbml6ZXIgaXMgZGV0ZWN0aW5nIGEgdGhpbmcsIGl0IGlzIHNldCB0byBgbnVsbGBcclxuICAgICAgICB2YXIgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplcjtcclxuXHJcbiAgICAgICAgLy8gcmVzZXQgd2hlbiB0aGUgbGFzdCByZWNvZ25pemVyIGlzIHJlY29nbml6ZWRcclxuICAgICAgICAvLyBvciB3aGVuIHdlJ3JlIGluIGEgbmV3IHNlc3Npb25cclxuICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgfHwgKGN1clJlY29nbml6ZXIgJiYgY3VyUmVjb2duaXplci5zdGF0ZSAmIFNUQVRFX1JFQ09HTklaRUQpKSB7XHJcbiAgICAgICAgICAgIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgcmVjb2duaXplcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJlY29nbml6ZXIgPSByZWNvZ25pemVyc1tpXTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpbmQgb3V0IGlmIHdlIGFyZSBhbGxvd2VkIHRyeSB0byByZWNvZ25pemUgdGhlIGlucHV0IGZvciB0aGlzIG9uZS5cclxuICAgICAgICAgICAgLy8gMS4gICBhbGxvdyBpZiB0aGUgc2Vzc2lvbiBpcyBOT1QgZm9yY2VkIHN0b3BwZWQgKHNlZSB0aGUgLnN0b3AoKSBtZXRob2QpXHJcbiAgICAgICAgICAgIC8vIDIuICAgYWxsb3cgaWYgd2Ugc3RpbGwgaGF2ZW4ndCByZWNvZ25pemVkIGEgZ2VzdHVyZSBpbiB0aGlzIHNlc3Npb24sIG9yIHRoZSB0aGlzIHJlY29nbml6ZXIgaXMgdGhlIG9uZVxyXG4gICAgICAgICAgICAvLyAgICAgIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cclxuICAgICAgICAgICAgLy8gMy4gICBhbGxvdyBpZiB0aGUgcmVjb2duaXplciBpcyBhbGxvd2VkIHRvIHJ1biBzaW11bHRhbmVvdXMgd2l0aCB0aGUgY3VycmVudCByZWNvZ25pemVkIHJlY29nbml6ZXIuXHJcbiAgICAgICAgICAgIC8vICAgICAgdGhpcyBjYW4gYmUgc2V0dXAgd2l0aCB0aGUgYHJlY29nbml6ZVdpdGgoKWAgbWV0aG9kIG9uIHRoZSByZWNvZ25pemVyLlxyXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkICE9PSBGT1JDRURfU1RPUCAmJiAoIC8vIDFcclxuICAgICAgICAgICAgICAgICAgICAhY3VyUmVjb2duaXplciB8fCByZWNvZ25pemVyID09IGN1clJlY29nbml6ZXIgfHwgLy8gMlxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29nbml6ZXIuY2FuUmVjb2duaXplV2l0aChjdXJSZWNvZ25pemVyKSkpIHsgLy8gM1xyXG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZWNvZ25pemUoaW5wdXREYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlY29nbml6ZXIucmVzZXQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgdGhlIHJlY29nbml6ZXIgaGFzIGJlZW4gcmVjb2duaXppbmcgdGhlIGlucHV0IGFzIGEgdmFsaWQgZ2VzdHVyZSwgd2Ugd2FudCB0byBzdG9yZSB0aGlzIG9uZSBhcyB0aGVcclxuICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgcmVjb2duaXplci4gYnV0IG9ubHkgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIGFuIGFjdGl2ZSByZWNvZ25pemVyXHJcbiAgICAgICAgICAgIGlmICghY3VyUmVjb2duaXplciAmJiByZWNvZ25pemVyLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEKSkge1xyXG4gICAgICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IHJlY29nbml6ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQgYSByZWNvZ25pemVyIGJ5IGl0cyBldmVudCBuYW1lLlxyXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ8TnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0OiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XHJcbiAgICAgICAgaWYgKHJlY29nbml6ZXIgaW5zdGFuY2VvZiBSZWNvZ25pemVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY29nbml6ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWNvZ25pemVyc1tpXS5vcHRpb25zLmV2ZW50ID09IHJlY29nbml6ZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgYSByZWNvZ25pemVyIHRvIHRoZSBtYW5hZ2VyXHJcbiAgICAgKiBleGlzdGluZyByZWNvZ25pemVycyB3aXRoIHRoZSBzYW1lIGV2ZW50IG5hbWUgd2lsbCBiZSByZW1vdmVkXHJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE1hbmFnZXJ9XHJcbiAgICAgKi9cclxuICAgIGFkZDogZnVuY3Rpb24ocmVjb2duaXplcikge1xyXG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhyZWNvZ25pemVyLCAnYWRkJywgdGhpcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmdcclxuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldChyZWNvZ25pemVyLm9wdGlvbnMuZXZlbnQpO1xyXG4gICAgICAgIGlmIChleGlzdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShleGlzdGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlY29nbml6ZXJzLnB1c2gocmVjb2duaXplcik7XHJcbiAgICAgICAgcmVjb2duaXplci5tYW5hZ2VyID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZW1vdmUgYSByZWNvZ25pemVyIGJ5IG5hbWUgb3IgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxyXG4gICAgICovXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcclxuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ3JlbW92ZScsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcclxuICAgICAgICByZWNvZ25pemVyID0gdGhpcy5nZXQocmVjb2duaXplcik7XHJcbiAgICAgICAgcmVjb2duaXplcnMuc3BsaWNlKGluQXJyYXkocmVjb2duaXplcnMsIHJlY29nbml6ZXIpLCAxKTtcclxuXHJcbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBiaW5kIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXHJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xyXG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcnNbZXZlbnRdIHx8IFtdO1xyXG4gICAgICAgICAgICBoYW5kbGVyc1tldmVudF0ucHVzaChoYW5kbGVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB1bmJpbmQgZXZlbnQsIGxlYXZlIGVtaXQgYmxhbmsgdG8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2hhbmRsZXJdXHJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXHJcbiAgICAgKi9cclxuICAgIG9mZjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcclxuICAgICAgICBlYWNoKHNwbGl0U3RyKGV2ZW50cyksIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGhhbmRsZXJzW2V2ZW50XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XS5zcGxpY2UoaW5BcnJheShoYW5kbGVyc1tldmVudF0sIGhhbmRsZXIpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIGVtaXQgZXZlbnQgdG8gdGhlIGxpc3RlbmVyc1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxyXG4gICAgICovXHJcbiAgICBlbWl0OiBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgIC8vIHdlIGFsc28gd2FudCB0byB0cmlnZ2VyIGRvbSBldmVudHNcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRvbUV2ZW50cykge1xyXG4gICAgICAgICAgICB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm8gaGFuZGxlcnMsIHNvIHNraXAgaXQgYWxsXHJcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF0gJiYgdGhpcy5oYW5kbGVyc1tldmVudF0uc2xpY2UoKTtcclxuICAgICAgICBpZiAoIWhhbmRsZXJzIHx8ICFoYW5kbGVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YS50eXBlID0gZXZlbnQ7XHJcbiAgICAgICAgZGF0YS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBkYXRhLnNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgaGFuZGxlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzW2ldKGRhdGEpO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIGRlc3Ryb3kgdGhlIG1hbmFnZXIgYW5kIHVuYmluZHMgYWxsIGV2ZW50c1xyXG4gICAgICogaXQgZG9lc24ndCB1bmJpbmQgZG9tIGV2ZW50cywgdGhhdCBpcyB0aGUgdXNlciBvd24gcmVzcG9uc2liaWxpdHlcclxuICAgICAqL1xyXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ICYmIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogYWRkL3JlbW92ZSB0aGUgY3NzIHByb3BlcnRpZXMgYXMgZGVmaW5lZCBpbiBtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHNcclxuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYWRkXHJcbiAqL1xyXG5mdW5jdGlvbiB0b2dnbGVDc3NQcm9wcyhtYW5hZ2VyLCBhZGQpIHtcclxuICAgIHZhciBlbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xyXG4gICAgZWFjaChtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZVtwcmVmaXhlZChlbGVtZW50LnN0eWxlLCBuYW1lKV0gPSBhZGQgPyB2YWx1ZSA6ICcnO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiB0cmlnZ2VyIGRvbSBldmVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcclxuICovXHJcbmZ1bmN0aW9uIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSkge1xyXG4gICAgdmFyIGdlc3R1cmVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xyXG4gICAgZ2VzdHVyZUV2ZW50LmluaXRFdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICBnZXN0dXJlRXZlbnQuZ2VzdHVyZSA9IGRhdGE7XHJcbiAgICBkYXRhLnRhcmdldC5kaXNwYXRjaEV2ZW50KGdlc3R1cmVFdmVudCk7XHJcbn1cclxuXHJcbmV4dGVuZChIYW1tZXIsIHtcclxuICAgIElOUFVUX1NUQVJUOiBJTlBVVF9TVEFSVCxcclxuICAgIElOUFVUX01PVkU6IElOUFVUX01PVkUsXHJcbiAgICBJTlBVVF9FTkQ6IElOUFVUX0VORCxcclxuICAgIElOUFVUX0NBTkNFTDogSU5QVVRfQ0FOQ0VMLFxyXG5cclxuICAgIFNUQVRFX1BPU1NJQkxFOiBTVEFURV9QT1NTSUJMRSxcclxuICAgIFNUQVRFX0JFR0FOOiBTVEFURV9CRUdBTixcclxuICAgIFNUQVRFX0NIQU5HRUQ6IFNUQVRFX0NIQU5HRUQsXHJcbiAgICBTVEFURV9FTkRFRDogU1RBVEVfRU5ERUQsXHJcbiAgICBTVEFURV9SRUNPR05JWkVEOiBTVEFURV9SRUNPR05JWkVELFxyXG4gICAgU1RBVEVfQ0FOQ0VMTEVEOiBTVEFURV9DQU5DRUxMRUQsXHJcbiAgICBTVEFURV9GQUlMRUQ6IFNUQVRFX0ZBSUxFRCxcclxuXHJcbiAgICBESVJFQ1RJT05fTk9ORTogRElSRUNUSU9OX05PTkUsXHJcbiAgICBESVJFQ1RJT05fTEVGVDogRElSRUNUSU9OX0xFRlQsXHJcbiAgICBESVJFQ1RJT05fUklHSFQ6IERJUkVDVElPTl9SSUdIVCxcclxuICAgIERJUkVDVElPTl9VUDogRElSRUNUSU9OX1VQLFxyXG4gICAgRElSRUNUSU9OX0RPV046IERJUkVDVElPTl9ET1dOLFxyXG4gICAgRElSRUNUSU9OX0hPUklaT05UQUw6IERJUkVDVElPTl9IT1JJWk9OVEFMLFxyXG4gICAgRElSRUNUSU9OX1ZFUlRJQ0FMOiBESVJFQ1RJT05fVkVSVElDQUwsXHJcbiAgICBESVJFQ1RJT05fQUxMOiBESVJFQ1RJT05fQUxMLFxyXG5cclxuICAgIE1hbmFnZXI6IE1hbmFnZXIsXHJcbiAgICBJbnB1dDogSW5wdXQsXHJcbiAgICBUb3VjaEFjdGlvbjogVG91Y2hBY3Rpb24sXHJcblxyXG4gICAgVG91Y2hJbnB1dDogVG91Y2hJbnB1dCxcclxuICAgIE1vdXNlSW5wdXQ6IE1vdXNlSW5wdXQsXHJcbiAgICBQb2ludGVyRXZlbnRJbnB1dDogUG9pbnRlckV2ZW50SW5wdXQsXHJcbiAgICBUb3VjaE1vdXNlSW5wdXQ6IFRvdWNoTW91c2VJbnB1dCxcclxuICAgIFNpbmdsZVRvdWNoSW5wdXQ6IFNpbmdsZVRvdWNoSW5wdXQsXHJcblxyXG4gICAgUmVjb2duaXplcjogUmVjb2duaXplcixcclxuICAgIEF0dHJSZWNvZ25pemVyOiBBdHRyUmVjb2duaXplcixcclxuICAgIFRhcDogVGFwUmVjb2duaXplcixcclxuICAgIFBhbjogUGFuUmVjb2duaXplcixcclxuICAgIFN3aXBlOiBTd2lwZVJlY29nbml6ZXIsXHJcbiAgICBQaW5jaDogUGluY2hSZWNvZ25pemVyLFxyXG4gICAgUm90YXRlOiBSb3RhdGVSZWNvZ25pemVyLFxyXG4gICAgUHJlc3M6IFByZXNzUmVjb2duaXplcixcclxuXHJcbiAgICBvbjogYWRkRXZlbnRMaXN0ZW5lcnMsXHJcbiAgICBvZmY6IHJlbW92ZUV2ZW50TGlzdGVuZXJzLFxyXG4gICAgZWFjaDogZWFjaCxcclxuICAgIG1lcmdlOiBtZXJnZSxcclxuICAgIGV4dGVuZDogZXh0ZW5kLFxyXG4gICAgaW5oZXJpdDogaW5oZXJpdCxcclxuICAgIGJpbmRGbjogYmluZEZuLFxyXG4gICAgcHJlZml4ZWQ6IHByZWZpeGVkXHJcbn0pO1xyXG5cclxuaWYgKHR5cGVvZiBkZWZpbmUgPT0gVFlQRV9GVU5DVElPTiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIEhhbW1lcjtcclxuICAgIH0pO1xyXG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gSGFtbWVyO1xyXG59IGVsc2Uge1xyXG4gICAgd2luZG93W2V4cG9ydE5hbWVdID0gSGFtbWVyO1xyXG59XHJcblxyXG59KSh3aW5kb3csIGRvY3VtZW50LCAnSGFtbWVyJyk7XHJcbi8qISBqUXVlcnkgQW55U2xpZGVyIDIuMS4wLWJldGEgfCBDb3B5cmlnaHQgMjAxNCBKb25hdGhhbiBXaWxzc29uIGFuZCBjb250cmlidXRvcnMgKi9cclxuXHJcbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICAvLyBBTURcclxuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIC8vIENvbW1vbkpTXHJcbiAgICAgICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgd2luZG93LCBkb2N1bWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3Rvcnkocm9vdC5qUXVlcnkgfHwgcm9vdC5aZXB0bywgd2luZG93LCBkb2N1bWVudCk7XHJcbiAgICB9XHJcbn0odGhpcywgZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgQW55U2xpZGVyID0gZnVuY3Rpb24gKHNsaWRlciwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBzbGlkZXMgPSBzbGlkZXIuY2hpbGRyZW4oKTtcclxuICAgICAgICB2YXIgb3JnTnVtU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcclxuICAgICAgICB2YXIgbnVtU2xpZGVzID0gb3JnTnVtU2xpZGVzO1xyXG4gICAgICAgIHZhciB3aWR0aCA9IHNsaWRlci53aWR0aCgpO1xyXG4gICAgICAgIHZhciBuZXh0U2xpZGUgPSAwO1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gMDtcclxuICAgICAgICB2YXIgaW5uZXI7XHJcbiAgICAgICAgdmFyIHRpbWVyO1xyXG4gICAgICAgIHZhciBydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICAgICAgICAgICAgYWZ0ZXJTZXR1cDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZScsXHJcbiAgICAgICAgICAgICAgICBiZWZvcmVDaGFuZ2U6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnc3dpbmcnLFxyXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDUwMDAsXHJcbiAgICAgICAgICAgICAgICBrZXlib2FyZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG5leHRMYWJlbDogJ05leHQgc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcHJldkxhYmVsOiAnUHJldmlvdXMgc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93QnVsbGV0czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNob3dDb250cm9sczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiA0MDAsXHJcbiAgICAgICAgICAgICAgICBzdGFydFNsaWRlOiAxLFxyXG4gICAgICAgICAgICAgICAgdG91Y2g6IHRydWVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gU2V0dXAgdGhlIHNsaWRlc1xyXG4gICAgICAgIGlmIChvcmdOdW1TbGlkZXMgPiAxKSB7XHJcbiAgICAgICAgICAgIHNsaWRlcy5lcSgwKS5jbG9uZSgpLmFkZENsYXNzKCdjbG9uZScpLmFwcGVuZFRvKHNsaWRlcik7XHJcbiAgICAgICAgICAgIHNsaWRlcy5lcShudW1TbGlkZXMgLSAxKS5jbG9uZSgpLmFkZENsYXNzKCdjbG9uZScpLnByZXBlbmRUbyhzbGlkZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnRTbGlkZSA8IG9yZ051bVNsaWRlcykge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG9wdGlvbnMuc3RhcnRTbGlkZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2xpZGVzID0gc2xpZGVyLmNoaWxkcmVuKCk7XHJcbiAgICAgICAgbnVtU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gQ1NTIHNldHVwXHJcbiAgICAgICAgc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJhcy1zbGlkZS1pbm5lclwiPjwvZGl2PicpLmNzcygnd2lkdGgnLCB3aWR0aCk7XHJcbiAgICAgICAgaW5uZXIgPSBzbGlkZXIuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKS5maW5kKCcuYXMtc2xpZGUtaW5uZXInKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uID09PSAnZmFkZScpIHtcclxuICAgICAgICAgICAgLy8gUHJvcGVydGllcyBhcmUgcXVvdGVkIGZvciBjb25zaXN0ZW5jeSBzaW5jZSBcImZsb2F0XCIgd2lsbCB0cmlnZ2VyIGFuIGVycm9yIHdoZW4gdGhlIHNjcmlwdCBpcyBtaW5pZmllZCAoaWYgdW5xdW90ZWQpXHJcbiAgICAgICAgICAgIHNsaWRlcy5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAnbGVmdCc6IDAsXHJcbiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgJ3RvcCc6IDBcclxuICAgICAgICAgICAgfSkuZXEoY3VycmVudCkuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgaW5uZXIuY3NzKCd3aWR0aCcsIHdpZHRoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzbGlkZXMuY3NzKHtcclxuICAgICAgICAgICAgICAgICdmbG9hdCc6ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZSdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpbm5lci5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJ2xlZnQnOiAtY3VycmVudCAqIHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogbnVtU2xpZGVzICogd2lkdGhcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbm5lci5jc3Moe1xyXG4gICAgICAgICAgICAnZmxvYXQnOiAnbGVmdCcsXHJcbiAgICAgICAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSBhcnJvd3NcclxuICAgICAgICBpZiAob3B0aW9ucy5zaG93Q29udHJvbHMgJiYgb3JnTnVtU2xpZGVzID4gMSkge1xyXG4gICAgICAgICAgICBzbGlkZXIucHJlcGVuZCgnPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFzLXByZXYtYXJyb3dcIiB0aXRsZT1cIkxBQkVMXCI+TEFCRUw8L2E+Jy5yZXBsYWNlKC9MQUJFTC9nLCBvcHRpb25zLnByZXZMYWJlbCkpO1xyXG4gICAgICAgICAgICBzbGlkZXIuYXBwZW5kKCc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYXMtbmV4dC1hcnJvd1wiIHRpdGxlPVwiTEFCRUxcIj5MQUJFTDwvYT4nLnJlcGxhY2UoL0xBQkVML2csIG9wdGlvbnMubmV4dExhYmVsKSk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZXIub24oJ2NsaWNrLmFzJywgJy5hcy1wcmV2LWFycm93LCAuYXMtbmV4dC1hcnJvdycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2FzLXByZXYtYXJyb3cnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXYoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCBuYXZpZ2F0aW9uIGJ1bGxldHNcclxuICAgICAgICBpZiAob3B0aW9ucy5zaG93QnVsbGV0cyAmJiBvcmdOdW1TbGlkZXMgPiAxKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXQgPSAnPGRpdiBjbGFzcz1cImFzLW5hdlwiPjwvZGl2Pic7XHJcbiAgICAgICAgICAgIHZhciBuYXYgPSAkKG91dCk7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmU7XHJcbiAgICAgICAgICAgIHZhciBpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8PSBvcmdOdW1TbGlkZXM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSAnIGNsYXNzPVwiYXMtYWN0aXZlXCInO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG5hdi5hcHBlbmQoJzxhIGhyZWY9XCIjXCInICsgYWN0aXZlICsgJz4nICsgaSArICc8L2E+Jyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5hdi5vbignY2xpY2suYXMnLCAnYScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmluZGV4KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhcy1hY3RpdmUnKSB8fCBydW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG5hdi5maW5kKCdhJykucmVtb3ZlQ2xhc3MoJ2FzLWFjdGl2ZScpLmVxKGluZGV4KS5hZGRDbGFzcygnYXMtYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZ29UbyhpbmRleCArIDEpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlci5hZnRlcihuYXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRW5hYmxlIGtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZCkge1xyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5ZG93bi5hcycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZS5rZXlDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNlZSBpZiB0aGUgbGVmdCBvciByaWdodCBhcnJvdyBpcyBwcmVzc2VkXHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAzNyAmJiBrZXkgIT09IDM5IHx8IG9yZ051bVNsaWRlcyA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IDM3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XHJcbiAgICAgICAgICAgIHNsaWRlci5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHBhdXNlKCk7XHJcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcGxheSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVuYWJsZSByZXNwb25zaXZlIHN1cHBvcnRcclxuICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFydW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHNsaWRlci53aWR0aCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlubmVyLmNzcygnd2lkdGgnLCB3aWR0aCk7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXMuY3NzKCd3aWR0aCcsIHdpZHRoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24gIT09ICdmYWRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogLWN1cnJlbnQgKiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogbnVtU2xpZGVzICogd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFbmFibGUgc3dpcGUgc3VwcG9ydC4gKERvbid0IGJvdGhlciBpZiBub3Qgd2FudGVkIG9yIHN1cHBvcnRlZClcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFJlc291cmNlczpcclxuICAgICAgICAgKiBodHRwOi8vd293bW90dHkuYmxvZ3Nwb3QuY29tLzIwMTEvMTAvYWRkaW5nLXN3aXBlLXN1cHBvcnQuaHRtbFxyXG4gICAgICAgICAqIGh0dHBzOi8vYmxvZ3Mud2luZG93cy5jb20vYnVpbGRpbmdhcHBzLzIwMTIvMTEvMTUvYWRhcHRpbmcteW91ci13ZWJraXQtb3B0aW1pemVkLXNpdGUtZm9yLWludGVybmV0LWV4cGxvcmVyLTEwLyNzdGVwNFxyXG4gICAgICAgICAqIGh0dHBzOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMy8wNC9kZXRlY3RpbmctdG91Y2gtaXRzLXRoZS13aHktbm90LXRoZS1ob3cvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKG9wdGlvbnMudG91Y2ggJiYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgKG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkgfHwgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFRpbWU7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFg7XHJcblxyXG4gICAgICAgICAgICBzbGlkZXIub24oJ3RvdWNoc3RhcnQuYXMgcG9pbnRlcmRvd24uYXMgTVNQb2ludGVyRG93bi5hcycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBlLnRpbWVTdGFtcDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRYID0gZS5vcmlnaW5hbEV2ZW50LnBhZ2VYIHx8IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFggPSBlLnBhZ2VYIHx8IGUudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkub24oJ3RvdWNobW92ZS5hcyBwb2ludGVybW92ZS5hcyBNU1BvaW50ZXJNb3ZlLmFzJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IGUudGltZVN0YW1wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREaXN0YW5jZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRYID0gZS5vcmlnaW5hbEV2ZW50LnBhZ2VYIHx8IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50WCA9IGUucGFnZVggfHwgZS50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGFydFggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGlzdGFuY2UgPSBNYXRoLmFicyhjdXJyZW50WCAtIHN0YXJ0WCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gT25seSBhbGxvdyBpZiBtb3ZlbWVudCA8IDEgc2VjIGFuZCBkaXN0YW5jZSBpcyBsb25nIGVub3VnaFxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZSAhPT0gMCAmJiBjdXJyZW50VGltZSAtIHN0YXJ0VGltZSA8IDEwMDAgJiYgY3VycmVudERpc3RhbmNlID4gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFggPCBzdGFydFgpIHsgLy8gU3dpcGluZyB0byB0aGUgbGVmdCwgaS5lLiBuZXh0IHNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRYID4gc3RhcnRYKSB7IC8vIFN3aXBpbmcgdG8gdGhlIHJpZ2h0LCBpLmUuIHByZXZpb3VzIHNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRYID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQW5kcm9pZCBkb2Vzbid0IGFsd2F5cyBmaXJlIHRvdWNoZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyLnRyaWdnZXIoJ3RvdWNoZW5kLmFzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLm9uKCd0b3VjaGVuZC5hcyBwb2ludGVydXAuYXMgTVNQb2ludGVyVXAuYXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgc3RhcnRYID0gMDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFbmFibGUgYXV0b3BsYXlcclxuICAgICAgICB0aWNrKCk7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYWZ0ZXJTZXR1cC5jYWxsKHNsaWRlclswXSk7XHJcblxyXG4gICAgICAgIC8vIFByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIC8vIEFuaW1hdGlvbiBjb21wbGV0ZSBjYWxsYmFja1xyXG4gICAgICAgIGZ1bmN0aW9uIGFuaW1hdGlvbkNhbGxiYWNrICgpIHtcclxuICAgICAgICAgICAgY3VycmVudCA9IG5leHRTbGlkZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZXh0U2xpZGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBvcmdOdW1TbGlkZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICE9PSAnZmFkZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbm5lci5jc3MoJ2xlZnQnLCAtY3VycmVudCAqIHdpZHRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0U2xpZGUgPT09IG51bVNsaWRlcyAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbiAhPT0gJ2ZhZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXIuY3NzKCdsZWZ0JywgLXdpZHRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRml4IGZvciBaZXB0byBoaWRpbmcgdGhlIHNsaWRlXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbiA9PT0gJ2ZhZGUnKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXMuZXEoY3VycmVudCkuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93QnVsbGV0cykge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyLm5leHQoJy5hcy1uYXYnKS5maW5kKCdhJykucmVtb3ZlQ2xhc3MoJ2FzLWFjdGl2ZScpLmVxKGN1cnJlbnQgLSAxKS5hZGRDbGFzcygnYXMtYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXJDaGFuZ2UuY2FsbChzbGlkZXJbMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhlIG1haW4gYW5pbWF0aW9uIGZ1bmN0aW9uXHJcbiAgICAgICAgZnVuY3Rpb24gcnVuICgpIHtcclxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcgfHwgb3JnTnVtU2xpZGVzIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcnVubmluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zLmJlZm9yZUNoYW5nZS5jYWxsKHNsaWRlclswXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24gPT09ICdmYWRlJykge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVzLmNzcygnei1pbmRleCcsIDEpLmZhZGVPdXQob3B0aW9ucy5zcGVlZCkuZXEobmV4dFNsaWRlKS5jc3MoJ3otaW5kZXgnLCAyKS5mYWRlSW4ob3B0aW9ucy5zcGVlZCwgYW5pbWF0aW9uQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW5uZXIuYW5pbWF0ZSh7J2xlZnQnOiAtbmV4dFNsaWRlICogd2lkdGh9LCBvcHRpb25zLnNwZWVkLCBvcHRpb25zLmVhc2luZywgYW5pbWF0aW9uQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aWNrKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgdGhlIGF1dG9wbGF5IHRpbWVyXHJcbiAgICAgICAgZnVuY3Rpb24gdGljayAoKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhdXRvcGxheSBpcyBlbmFibGVkXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmludGVydmFsICYmIG9yZ051bVNsaWRlcyA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgICAgIGZ1bmN0aW9uIGN1cnJlbnRTbGlkZSAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ29UbyAoc2xpZGUpIHtcclxuICAgICAgICAgICAgbmV4dFNsaWRlID0gc2xpZGU7XHJcblxyXG4gICAgICAgICAgICBydW4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG5leHQgKCkge1xyXG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBjdXJyZW50ICsgMTtcclxuXHJcbiAgICAgICAgICAgIHJ1bigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcGF1c2UgKCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcGxheSAoKSB7XHJcbiAgICAgICAgICAgIHRpY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHByZXYgKCkge1xyXG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBjdXJyZW50IC0gMTtcclxuXHJcbiAgICAgICAgICAgIHJ1bigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUsXHJcbiAgICAgICAgICAgIGdvVG86IGdvVG8sXHJcbiAgICAgICAgICAgIG5leHQ6IG5leHQsXHJcbiAgICAgICAgICAgIHBhdXNlOiBwYXVzZSxcclxuICAgICAgICAgICAgcGxheTogcGxheSxcclxuICAgICAgICAgICAgcHJldjogcHJldlxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgICQuZm4uYW55c2xpZGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNsaWRlciA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBhbnlzbGlkZXI7XHJcblxyXG4gICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHBsdWdpbiBpbnN0YW5jZSBmb3IgdGhpcyBlbGVtZW50XHJcbiAgICAgICAgICAgIGlmIChzbGlkZXIuZGF0YSgnYW55c2xpZGVyJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzbGlkZXIuZGF0YSgnYW55c2xpZGVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFueXNsaWRlciA9IG5ldyBBbnlTbGlkZXIoc2xpZGVyLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlci5kYXRhKCdhbnlzbGlkZXInLCBhbnlzbGlkZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufSkpO1xyXG4vKiFcclxuICogRmxpY2tpdHkgUEFDS0FHRUQgdjEuMS4xXHJcbiAqIFRvdWNoLCByZXNwb25zaXZlLCBmbGlja2FibGUgZ2FsbGVyaWVzXHJcbiAqXHJcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcclxuICogb3IgRmxpY2tpdHkgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwOi8vZmxpY2tpdHkubWV0YWZpenp5LmNvXHJcbiAqIENvcHlyaWdodCAyMDE1IE1ldGFmaXp6eVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBCcmlkZ2V0IG1ha2VzIGpRdWVyeSB3aWRnZXRzXHJcbiAqIHYxLjEuMFxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdXRpbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcclxuXHJcbmZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gZGVmaW5lQnJpZGdldCggJCApIHtcclxuXHJcbi8vIGJhaWwgaWYgbm8galF1ZXJ5XHJcbmlmICggISQgKSB7XHJcbiAgcmV0dXJuO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhZGRPcHRpb25NZXRob2QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBhZGRzIG9wdGlvbiBtZXRob2QgLT4gJCgpLnBsdWdpbignb3B0aW9uJywgey4uLn0pXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFBsdWdpbkNsYXNzIC0gY29uc3RydWN0b3IgY2xhc3NcclxuICovXHJcbmZ1bmN0aW9uIGFkZE9wdGlvbk1ldGhvZCggUGx1Z2luQ2xhc3MgKSB7XHJcbiAgLy8gZG9uJ3Qgb3ZlcndyaXRlIG9yaWdpbmFsIG9wdGlvbiBtZXRob2RcclxuICBpZiAoIFBsdWdpbkNsYXNzLnByb3RvdHlwZS5vcHRpb24gKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBvcHRpb24gc2V0dGVyXHJcbiAgUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gICAgLy8gYmFpbCBvdXQgaWYgbm90IGFuIG9iamVjdFxyXG4gICAgaWYgKCAhJC5pc1BsYWluT2JqZWN0KCBvcHRzICkgKXtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHRoaXMub3B0aW9ucywgb3B0cyApO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHBsdWdpbiBicmlkZ2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbG9nZ2luZyBlcnJvcnNcclxuLy8gJC5lcnJvciBicmVha3MgalF1ZXJ5IGNoYWluaW5nXHJcbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vKipcclxuICogalF1ZXJ5IHBsdWdpbiBicmlkZ2UsIGFjY2VzcyBtZXRob2RzIGxpa2UgJGVsZW0ucGx1Z2luKCdtZXRob2QnKVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIC0gcGx1Z2luIG5hbWVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gUGx1Z2luQ2xhc3MgLSBjb25zdHJ1Y3RvciBjbGFzc1xyXG4gKi9cclxuZnVuY3Rpb24gYnJpZGdlKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICkge1xyXG4gIC8vIGFkZCB0byBqUXVlcnkgZm4gbmFtZXNwYWNlXHJcbiAgJC5mblsgbmFtZXNwYWNlIF0gPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuICAgIGlmICggdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICAvLyBjYWxsIHBsdWdpbiBtZXRob2Qgd2hlbiBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZ1xyXG4gICAgICAvLyBnZXQgYXJndW1lbnRzIGZvciBtZXRob2RcclxuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcclxuXHJcbiAgICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzW2ldO1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICQuZGF0YSggZWxlbSwgbmFtZXNwYWNlICk7XHJcbiAgICAgICAgaWYgKCAhaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICBsb2dFcnJvciggXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiICsgbmFtZXNwYWNlICsgXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IFwiICtcclxuICAgICAgICAgICAgXCJhdHRlbXB0ZWQgdG8gY2FsbCAnXCIgKyBvcHRpb25zICsgXCInXCIgKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoICEkLmlzRnVuY3Rpb24oIGluc3RhbmNlW29wdGlvbnNdICkgfHwgb3B0aW9ucy5jaGFyQXQoMCkgPT09ICdfJyApIHtcclxuICAgICAgICAgIGxvZ0Vycm9yKCBcIm5vIHN1Y2ggbWV0aG9kICdcIiArIG9wdGlvbnMgKyBcIicgZm9yIFwiICsgbmFtZXNwYWNlICsgXCIgaW5zdGFuY2VcIiApO1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIGFyZ3VtZW50c1xyXG4gICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGluc3RhbmNlWyBvcHRpb25zIF0uYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XHJcblxyXG4gICAgICAgIC8vIGJyZWFrIGxvb2sgYW5kIHJldHVybiBmaXJzdCB2YWx1ZSBpZiBwcm92aWRlZFxyXG4gICAgICAgIGlmICggcmV0dXJuVmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLy8gcmV0dXJuIHRoaXMgaWYgbm8gcmV0dXJuIHZhbHVlXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBuYW1lc3BhY2UgKTtcclxuICAgICAgICBpZiAoIGluc3RhbmNlICkge1xyXG4gICAgICAgICAgLy8gYXBwbHkgb3B0aW9ucyAmIGluaXRcclxuICAgICAgICAgIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xyXG4gICAgICAgICAgaW5zdGFuY2UuX2luaXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gaW5pdGlhbGl6ZSBuZXcgaW5zdGFuY2VcclxuICAgICAgICAgIGluc3RhbmNlID0gbmV3IFBsdWdpbkNsYXNzKCB0aGlzLCBvcHRpb25zICk7XHJcbiAgICAgICAgICAkLmRhdGEoIHRoaXMsIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBicmlkZ2V0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vKipcclxuICogY29udmVydHMgYSBQcm90b3R5cGljYWwgY2xhc3MgaW50byBhIHByb3BlciBqUXVlcnkgcGx1Z2luXHJcbiAqICAgdGhlIGNsYXNzIG11c3QgaGF2ZSBhIC5faW5pdCBtZXRob2RcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIHBsdWdpbiBuYW1lLCB1c2VkIGluICQoKS5wbHVnaW5OYW1lXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFBsdWdpbkNsYXNzIC0gY29uc3RydWN0b3IgY2xhc3NcclxuICovXHJcbiQuYnJpZGdldCA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICkge1xyXG4gIGFkZE9wdGlvbk1ldGhvZCggUGx1Z2luQ2xhc3MgKTtcclxuICBicmlkZ2UoIG5hbWVzcGFjZSwgUGx1Z2luQ2xhc3MgKTtcclxufTtcclxuXHJcbnJldHVybiAkLmJyaWRnZXQ7XHJcblxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnanF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LmJyaWRnZXQnLFsgJ2pxdWVyeScgXSwgZGVmaW5lQnJpZGdldCApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgZGVmaW5lQnJpZGdldCggcmVxdWlyZSgnanF1ZXJ5JykgKTtcclxufSBlbHNlIHtcclxuICAvLyBnZXQganF1ZXJ5IGZyb20gYnJvd3NlciBnbG9iYWxcclxuICBkZWZpbmVCcmlkZ2V0KCB3aW5kb3cualF1ZXJ5ICk7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBjbGFzc2llIHYxLjAuMVxyXG4gKiBjbGFzcyBoZWxwZXIgZnVuY3Rpb25zXHJcbiAqIGZyb20gYm9uem8gaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib256b1xyXG4gKiBNSVQgbGljZW5zZVxyXG4gKiBcclxuICogY2xhc3NpZS5oYXMoIGVsZW0sICdteS1jbGFzcycgKSAtPiB0cnVlL2ZhbHNlXHJcbiAqIGNsYXNzaWUuYWRkKCBlbGVtLCAnbXktbmV3LWNsYXNzJyApXHJcbiAqIGNsYXNzaWUucmVtb3ZlKCBlbGVtLCAnbXktdW53YW50ZWQtY2xhc3MnIClcclxuICogY2xhc3NpZS50b2dnbGUoIGVsZW0sICdteS1jbGFzcycgKVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbi8vIGNsYXNzIGhlbHBlciBmdW5jdGlvbnMgZnJvbSBib256byBodHRwczovL2dpdGh1Yi5jb20vZGVkL2JvbnpvXHJcblxyXG5mdW5jdGlvbiBjbGFzc1JlZyggY2xhc3NOYW1lICkge1xyXG4gIHJldHVybiBuZXcgUmVnRXhwKFwiKF58XFxcXHMrKVwiICsgY2xhc3NOYW1lICsgXCIoXFxcXHMrfCQpXCIpO1xyXG59XHJcblxyXG4vLyBjbGFzc0xpc3Qgc3VwcG9ydCBmb3IgY2xhc3MgbWFuYWdlbWVudFxyXG4vLyBhbHRobyB0byBiZSBmYWlyLCB0aGUgYXBpIHN1Y2tzIGJlY2F1c2UgaXQgd29uJ3QgYWNjZXB0IG11bHRpcGxlIGNsYXNzZXMgYXQgb25jZVxyXG52YXIgaGFzQ2xhc3MsIGFkZENsYXNzLCByZW1vdmVDbGFzcztcclxuXHJcbmlmICggJ2NsYXNzTGlzdCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICkge1xyXG4gIGhhc0NsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XHJcbiAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoIGMgKTtcclxuICB9O1xyXG4gIGFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XHJcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoIGMgKTtcclxuICB9O1xyXG4gIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XHJcbiAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoIGMgKTtcclxuICB9O1xyXG59XHJcbmVsc2Uge1xyXG4gIGhhc0NsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XHJcbiAgICByZXR1cm4gY2xhc3NSZWcoIGMgKS50ZXN0KCBlbGVtLmNsYXNzTmFtZSApO1xyXG4gIH07XHJcbiAgYWRkQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcclxuICAgIGlmICggIWhhc0NsYXNzKCBlbGVtLCBjICkgKSB7XHJcbiAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnICcgKyBjO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcclxuICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUucmVwbGFjZSggY2xhc3NSZWcoIGMgKSwgJyAnICk7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoIGVsZW0sIGMgKSB7XHJcbiAgdmFyIGZuID0gaGFzQ2xhc3MoIGVsZW0sIGMgKSA/IHJlbW92ZUNsYXNzIDogYWRkQ2xhc3M7XHJcbiAgZm4oIGVsZW0sIGMgKTtcclxufVxyXG5cclxudmFyIGNsYXNzaWUgPSB7XHJcbiAgLy8gZnVsbCBuYW1lc1xyXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcclxuICBhZGRDbGFzczogYWRkQ2xhc3MsXHJcbiAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxyXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcclxuICAvLyBzaG9ydCBuYW1lc1xyXG4gIGhhczogaGFzQ2xhc3MsXHJcbiAgYWRkOiBhZGRDbGFzcyxcclxuICByZW1vdmU6IHJlbW92ZUNsYXNzLFxyXG4gIHRvZ2dsZTogdG9nZ2xlQ2xhc3NcclxufTtcclxuXHJcbi8vIHRyYW5zcG9ydFxyXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAvLyBBTURcclxuICBkZWZpbmUoICdjbGFzc2llL2NsYXNzaWUnLGNsYXNzaWUgKTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIC8vIENvbW1vbkpTXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBjbGFzc2llO1xyXG59IGVsc2Uge1xyXG4gIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgd2luZG93LmNsYXNzaWUgPSBjbGFzc2llO1xyXG59XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG4vKiFcclxuICogRXZlbnRFbWl0dGVyIHY0LjIuMTEgLSBnaXQuaW8vZWVcclxuICogVW5saWNlbnNlIC0gaHR0cDovL3VubGljZW5zZS5vcmcvXHJcbiAqIE9saXZlciBDYWxkd2VsbCAtIGh0dHA6Ly9vbGkubWUudWsvXHJcbiAqIEBwcmVzZXJ2ZVxyXG4gKi9cclxuXHJcbjsoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3MgZm9yIG1hbmFnaW5nIGV2ZW50cy5cclxuICAgICAqIENhbiBiZSBleHRlbmRlZCB0byBwcm92aWRlIGV2ZW50IGZ1bmN0aW9uYWxpdHkgaW4gb3RoZXIgY2xhc3Nlcy5cclxuICAgICAqXHJcbiAgICAgKiBAY2xhc3MgRXZlbnRFbWl0dGVyIE1hbmFnZXMgZXZlbnQgcmVnaXN0ZXJpbmcgYW5kIGVtaXR0aW5nLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7fVxyXG5cclxuICAgIC8vIFNob3J0Y3V0cyB0byBpbXByb3ZlIHNwZWVkIGFuZCBzaXplXHJcbiAgICB2YXIgcHJvdG8gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlO1xyXG4gICAgdmFyIGV4cG9ydHMgPSB0aGlzO1xyXG4gICAgdmFyIG9yaWdpbmFsR2xvYmFsVmFsdWUgPSBleHBvcnRzLkV2ZW50RW1pdHRlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgbGlzdGVuZXIgZm9yIHRoZSBldmVudCBpbiBpdHMgc3RvcmFnZSBhcnJheS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IGxpc3RlbmVycyBBcnJheSBvZiBsaXN0ZW5lcnMgdG8gc2VhcmNoIHRocm91Z2guXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gbG9vayBmb3IuXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEluZGV4IG9mIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIsIC0xIGlmIG5vdCBmb3VuZFxyXG4gICAgICogQGFwaSBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnMsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdmFyIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBhIG1ldGhvZCB3aGlsZSBrZWVwaW5nIHRoZSBjb250ZXh0IGNvcnJlY3QsIHRvIGFsbG93IGZvciBvdmVyd3JpdGluZyBvZiB0YXJnZXQgbWV0aG9kLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgbWV0aG9kLlxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBhbGlhc2VkIG1ldGhvZFxyXG4gICAgICogQGFwaSBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFsaWFzKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYWxpYXNDbG9zdXJlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1tuYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0ZW5lciBhcnJheSBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cclxuICAgICAqIFdpbGwgaW5pdGlhbGlzZSB0aGUgZXZlbnQgb2JqZWN0IGFuZCBsaXN0ZW5lciBhcnJheXMgaWYgcmVxdWlyZWQuXHJcbiAgICAgKiBXaWxsIHJldHVybiBhbiBvYmplY3QgaWYgeW91IHVzZSBhIHJlZ2V4IHNlYXJjaC4gVGhlIG9iamVjdCBjb250YWlucyBrZXlzIGZvciBlYWNoIG1hdGNoZWQgZXZlbnQuIFNvIC9iYVtyel0vIG1pZ2h0IHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBiYXIgYW5kIGJhei4gQnV0IG9ubHkgaWYgeW91IGhhdmUgZWl0aGVyIGRlZmluZWQgdGhlbSB3aXRoIGRlZmluZUV2ZW50IG9yIGFkZGVkIHNvbWUgbGlzdGVuZXJzIHRvIHRoZW0uXHJcbiAgICAgKiBFYWNoIHByb3BlcnR5IGluIHRoZSBvYmplY3QgcmVzcG9uc2UgaXMgYW4gYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfE9iamVjdH0gQWxsIGxpc3RlbmVyIGZ1bmN0aW9ucyBmb3IgdGhlIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICBwcm90by5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZXZ0KSB7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xyXG4gICAgICAgIHZhciByZXNwb25zZTtcclxuICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYSBjb25jYXRlbmF0ZWQgYXJyYXkgb2YgYWxsIG1hdGNoaW5nIGV2ZW50cyBpZlxyXG4gICAgICAgIC8vIHRoZSBzZWxlY3RvciBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cclxuICAgICAgICBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0ge307XHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2dC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldID0gZXZlbnRzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gZXZlbnRzW2V2dF0gfHwgKGV2ZW50c1tldnRdID0gW10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgbGlzdCBvZiBsaXN0ZW5lciBvYmplY3RzIGFuZCBmbGF0dGVucyBpdCBpbnRvIGEgbGlzdCBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gbGlzdGVuZXJzIFJhdyBsaXN0ZW5lciBvYmplY3RzLlxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb25bXX0gSnVzdCB0aGUgbGlzdGVuZXIgZnVuY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBwcm90by5mbGF0dGVuTGlzdGVuZXJzID0gZnVuY3Rpb24gZmxhdHRlbkxpc3RlbmVycyhsaXN0ZW5lcnMpIHtcclxuICAgICAgICB2YXIgZmxhdExpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIHZhciBpO1xyXG5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGZsYXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcnNbaV0ubGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZsYXRMaXN0ZW5lcnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2hlcyB0aGUgcmVxdWVzdGVkIGxpc3RlbmVycyB2aWEgZ2V0TGlzdGVuZXJzIGJ1dCB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHJlc3VsdHMgaW5zaWRlIGFuIG9iamVjdC4gVGhpcyBpcyBtYWlubHkgZm9yIGludGVybmFsIHVzZSBidXQgb3RoZXJzIG1heSBmaW5kIGl0IHVzZWZ1bC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZXR1cm4gdGhlIGxpc3RlbmVycyBmcm9tLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBpbiBhbiBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmdldExpc3RlbmVyc0FzT2JqZWN0ID0gZnVuY3Rpb24gZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICBpZiAobGlzdGVuZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcclxuICAgICAgICAgICAgcmVzcG9uc2VbZXZ0XSA9IGxpc3RlbmVycztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXNwb25zZSB8fCBsaXN0ZW5lcnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAgICAgKiBUaGUgbGlzdGVuZXIgd2lsbCBub3QgYmUgYWRkZWQgaWYgaXQgaXMgYSBkdXBsaWNhdGUuXHJcbiAgICAgKiBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGl0IGlzIGNhbGxlZC5cclxuICAgICAqIElmIHlvdSBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lIHRoZW4gdGhlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcklzV3JhcHBlZCA9IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ29iamVjdCc7XHJcbiAgICAgICAgdmFyIGtleTtcclxuXHJcbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1trZXldLnB1c2gobGlzdGVuZXJJc1dyYXBwZWQgPyBsaXN0ZW5lciA6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgb25jZTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiBhZGRMaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBwcm90by5vbiA9IGFsaWFzKCdhZGRMaXN0ZW5lcicpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VtaS1hbGlhcyBvZiBhZGRMaXN0ZW5lci4gSXQgd2lsbCBhZGQgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmVcclxuICAgICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBhZnRlciBpdHMgZmlyc3QgZXhlY3V0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5hZGRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRPbmNlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZExpc3RlbmVyKGV2dCwge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICAgICAgICAgIG9uY2U6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiBhZGRPbmNlTGlzdGVuZXIuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLm9uY2UgPSBhbGlhcygnYWRkT25jZUxpc3RlbmVyJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIGFuIGV2ZW50IG5hbWUuIFRoaXMgaXMgcmVxdWlyZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgcmVnZXggdG8gYWRkIGEgbGlzdGVuZXIgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIElmIHlvdSBkb24ndCBkbyB0aGlzIHRoZW4gaG93IGRvIHlvdSBleHBlY3QgaXQgdG8ga25vdyB3aGF0IGV2ZW50IHRvIGFkZCB0bz8gU2hvdWxkIGl0IGp1c3QgYWRkIHRvIGV2ZXJ5IHBvc3NpYmxlIG1hdGNoIGZvciBhIHJlZ2V4PyBOby4gVGhhdCBpcyBzY2FyeSBhbmQgYmFkLlxyXG4gICAgICogWW91IG5lZWQgdG8gdGVsbCBpdCB3aGF0IGV2ZW50IG5hbWVzIHNob3VsZCBiZSBtYXRjaGVkIGJ5IGEgcmVnZXguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBjcmVhdGUuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZGVmaW5lRXZlbnQgPSBmdW5jdGlvbiBkZWZpbmVFdmVudChldnQpIHtcclxuICAgICAgICB0aGlzLmdldExpc3RlbmVycyhldnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZXMgZGVmaW5lRXZlbnQgdG8gZGVmaW5lIG11bHRpcGxlIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBldnRzIEFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRvIGRlZmluZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5kZWZpbmVFdmVudHMgPSBmdW5jdGlvbiBkZWZpbmVFdmVudHMoZXZ0cykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZ0cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlZmluZUV2ZW50KGV2dHNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZnVuY3Rpb24gZnJvbSB0aGUgc3BlY2lmaWVkIGV2ZW50LlxyXG4gICAgICogV2hlbiBwYXNzZWQgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUsIGl0IHdpbGwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50LlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XHJcbiAgICAgICAgdmFyIGluZGV4O1xyXG4gICAgICAgIHZhciBrZXk7XHJcblxyXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVyc1trZXldLCBsaXN0ZW5lcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1trZXldLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIHJlbW92ZUxpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHByb3RvLm9mZiA9IGFsaWFzKCdyZW1vdmVMaXN0ZW5lcicpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXHJcbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZCB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBhZGQgdGhlIGFycmF5IG9mIGxpc3RlbmVycyB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKiBZZWFoLCB0aGlzIGZ1bmN0aW9uIGRvZXMgcXVpdGUgYSBiaXQuIFRoYXQncyBwcm9iYWJseSBhIGJhZCB0aGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xyXG4gICAgICAgIC8vIFBhc3MgdGhyb3VnaCB0byBtYW5pcHVsYXRlTGlzdGVuZXJzXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyhmYWxzZSwgZXZ0LCBsaXN0ZW5lcnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgbGlzdGVuZXJzIGluIGJ1bGsgdXNpbmcgdGhlIG1hbmlwdWxhdGVMaXN0ZW5lcnMgbWV0aG9kLlxyXG4gICAgICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgeW91IGNhbiByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIHJlbW92ZWQuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byByZW1vdmUgdGhlIGxpc3RlbmVycyBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byByZW1vdmUuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKGV2dCwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRvIG1hbmlwdWxhdGVMaXN0ZW5lcnNcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKHRydWUsIGV2dCwgbGlzdGVuZXJzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFZGl0cyBsaXN0ZW5lcnMgaW4gYnVsay4gVGhlIGFkZExpc3RlbmVycyBhbmQgcmVtb3ZlTGlzdGVuZXJzIG1ldGhvZHMgYm90aCB1c2UgdGhpcyB0byBkbyB0aGVpciBqb2IuIFlvdSBzaG91bGQgcmVhbGx5IHVzZSB0aG9zZSBpbnN0ZWFkLCB0aGlzIGlzIGEgbGl0dGxlIGxvd2VyIGxldmVsLlxyXG4gICAgICogVGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgZGV0ZXJtaW5lIGlmIHRoZSBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgKHRydWUpIG9yIGFkZGVkIChmYWxzZSkuXHJcbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIGFkZGVkL3JlbW92ZWQuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYW5pcHVsYXRlIHRoZSBsaXN0ZW5lcnMgb2YgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIFRydWUgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIGxpc3RlbmVycywgZmFsc2UgaWYgeW91IHdhbnQgdG8gYWRkLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gZXZ0IEFuIGV2ZW50IG5hbWUgaWYgeW91IHdpbGwgcGFzcyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgbmV4dC4gQW4gb2JqZWN0IGlmIHlvdSB3aXNoIHRvIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIGFkZC9yZW1vdmUuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ubWFuaXB1bGF0ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIG1hbmlwdWxhdGVMaXN0ZW5lcnMocmVtb3ZlLCBldnQsIGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICB2YXIgc2luZ2xlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lciA6IHRoaXMuYWRkTGlzdGVuZXI7XHJcbiAgICAgICAgdmFyIG11bHRpcGxlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lcnMgOiB0aGlzLmFkZExpc3RlbmVycztcclxuXHJcbiAgICAgICAgLy8gSWYgZXZ0IGlzIGFuIG9iamVjdCB0aGVuIHBhc3MgZWFjaCBvZiBpdHMgcHJvcGVydGllcyB0byB0aGlzIG1ldGhvZFxyXG4gICAgICAgIGlmICh0eXBlb2YgZXZ0ID09PSAnb2JqZWN0JyAmJiAhKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgICAgICAgICAgZm9yIChpIGluIGV2dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSAmJiAodmFsdWUgPSBldnRbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyB0aGUgc2luZ2xlIGxpc3RlbmVyIHN0cmFpZ2h0IHRocm91Z2ggdG8gdGhlIHNpbmd1bGFyIG1ldGhvZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHBhc3MgYmFjayB0byB0aGUgbXVsdGlwbGUgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUuY2FsbCh0aGlzLCBpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTbyBldnQgbXVzdCBiZSBhIHN0cmluZ1xyXG4gICAgICAgICAgICAvLyBBbmQgbGlzdGVuZXJzIG11c3QgYmUgYW4gYXJyYXkgb2YgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgIC8vIExvb3Agb3ZlciBpdCBhbmQgcGFzcyBlYWNoIG9uZSB0byB0aGUgbXVsdGlwbGUgbWV0aG9kXHJcbiAgICAgICAgICAgIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBldnQsIGxpc3RlbmVyc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIGEgc3BlY2lmaWVkIGV2ZW50LlxyXG4gICAgICogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IGFuIGV2ZW50IHRoZW4gYWxsIGxpc3RlbmVycyB3aWxsIGJlIHJlbW92ZWQuXHJcbiAgICAgKiBUaGF0IG1lYW5zIGV2ZXJ5IGV2ZW50IHdpbGwgYmUgZW1wdGllZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVnZXggdG8gcmVtb3ZlIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IFtldnRdIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvci4gV2lsbCByZW1vdmUgZnJvbSBldmVyeSBldmVudCBpZiBub3QgcGFzc2VkLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZXZ0KSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgZXZ0O1xyXG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9nZXRFdmVudHMoKTtcclxuICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgZGlmZmVyZW50IHRoaW5ncyBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIGV2dFxyXG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFxyXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW2V2dF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGV2ZW50cyBtYXRjaGluZyB0aGUgcmVnZXguXHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2dC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGluIGFsbCBldmVudHNcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIHJlbW92ZUV2ZW50LlxyXG4gICAgICpcclxuICAgICAqIEFkZGVkIHRvIG1pcnJvciB0aGUgbm9kZSBBUEkuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbW92ZUFsbExpc3RlbmVycyA9IGFsaWFzKCdyZW1vdmVFdmVudCcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgYW4gZXZlbnQgb2YgeW91ciBjaG9pY2UuXHJcbiAgICAgKiBXaGVuIGVtaXR0ZWQsIGV2ZXJ5IGxpc3RlbmVyIGF0dGFjaGVkIHRvIHRoYXQgZXZlbnQgd2lsbCBiZSBleGVjdXRlZC5cclxuICAgICAqIElmIHlvdSBwYXNzIHRoZSBvcHRpb25hbCBhcmd1bWVudCBhcnJheSB0aGVuIHRob3NlIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCB0byBldmVyeSBsaXN0ZW5lciB1cG9uIGV4ZWN1dGlvbi5cclxuICAgICAqIEJlY2F1c2UgaXQgdXNlcyBgYXBwbHlgLCB5b3VyIGFycmF5IG9mIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCBhcyBpZiB5b3Ugd3JvdGUgdGhlbSBvdXQgc2VwYXJhdGVseS5cclxuICAgICAqIFNvIHRoZXkgd2lsbCBub3QgYXJyaXZlIHdpdGhpbiB0aGUgYXJyYXkgb24gdGhlIG90aGVyIHNpZGUsIHRoZXkgd2lsbCBiZSBzZXBhcmF0ZS5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIHRvIGVtaXQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXSBPcHRpb25hbCBhcnJheSBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggbGlzdGVuZXIuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24gZW1pdEV2ZW50KGV2dCwgYXJncykge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVyO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpID0gbGlzdGVuZXJzW2tleV0ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgc2hhbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCBlaXRoZXIgd2l0aCBhIGJhc2ljIGNhbGwgb3IgYW4gYXBwbHkgaWYgdGhlcmUgaXMgYW4gYXJncyBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJzW2tleV1baV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lci5vbmNlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGxpc3RlbmVyLmxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3MgfHwgW10pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IHRoaXMuX2dldE9uY2VSZXR1cm5WYWx1ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiBlbWl0RXZlbnRcclxuICAgICAqL1xyXG4gICAgcHJvdG8udHJpZ2dlciA9IGFsaWFzKCdlbWl0RXZlbnQnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1YnRseSBkaWZmZXJlbnQgZnJvbSBlbWl0RXZlbnQgaW4gdGhhdCBpdCB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyBvbiB0byB0aGUgbGlzdGVuZXJzLCBhcyBvcHBvc2VkIHRvIHRha2luZyBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMgdG8gcGFzcyBvbi5cclxuICAgICAqIEFzIHdpdGggZW1pdEV2ZW50LCB5b3UgY2FuIHBhc3MgYSByZWdleCBpbiBwbGFjZSBvZiB0aGUgZXZlbnQgbmFtZSB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBlbWl0IGFuZCBleGVjdXRlIGxpc3RlbmVycyBmb3IuXHJcbiAgICAgKiBAcGFyYW0gey4uLip9IE9wdGlvbmFsIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbWl0RXZlbnQoZXZ0LCBhcmdzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZiBhXHJcbiAgICAgKiBsaXN0ZW5lcnMgcmV0dXJuIHZhbHVlIG1hdGNoZXMgdGhlIG9uZSBzZXQgaGVyZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZFxyXG4gICAgICogYWZ0ZXIgZXhlY3V0aW9uLiBUaGlzIHZhbHVlIGRlZmF1bHRzIHRvIHRydWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlIHRvIGNoZWNrIGZvciB3aGVuIGV4ZWN1dGluZyBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc2V0T25jZVJldHVyblZhbHVlID0gZnVuY3Rpb24gc2V0T25jZVJldHVyblZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fb25jZVJldHVyblZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2hlcyB0aGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBhZ2FpbnN0IHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy4gSWZcclxuICAgICAqIHRoZSBsaXN0ZW5lcnMgcmV0dXJuIHZhbHVlIG1hdGNoZXMgdGhpcyBvbmUgdGhlbiBpdCBzaG91bGQgYmUgcmVtb3ZlZFxyXG4gICAgICogYXV0b21hdGljYWxseS4gSXQgd2lsbCByZXR1cm4gdHJ1ZSBieSBkZWZhdWx0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4geyp8Qm9vbGVhbn0gVGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgZm9yIG9yIHRoZSBkZWZhdWx0LCB0cnVlLlxyXG4gICAgICogQGFwaSBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHByb3RvLl9nZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBfZ2V0T25jZVJldHVyblZhbHVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KCdfb25jZVJldHVyblZhbHVlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uY2VSZXR1cm5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBldmVudHMgb2JqZWN0IGFuZCBjcmVhdGVzIG9uZSBpZiByZXF1aXJlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBldmVudHMgc3RvcmFnZSBvYmplY3QuXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcHJvdG8uX2dldEV2ZW50cyA9IGZ1bmN0aW9uIF9nZXRFdmVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cyB8fCAodGhpcy5fZXZlbnRzID0ge30pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldmVydHMgdGhlIGdsb2JhbCB7QGxpbmsgRXZlbnRFbWl0dGVyfSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhpcyB2ZXJzaW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBOb24gY29uZmxpY3RpbmcgRXZlbnRFbWl0dGVyIGNsYXNzLlxyXG4gICAgICovXHJcbiAgICBFdmVudEVtaXR0ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XHJcbiAgICAgICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBvcmlnaW5hbEdsb2JhbFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEV4cG9zZSB0aGUgY2xhc3MgZWl0aGVyIHZpYSBBTUQsIENvbW1vbkpTIG9yIHRoZSBnbG9iYWwgb2JqZWN0XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKCdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxbXSxmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBleHBvcnRzLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcclxuICAgIH1cclxufS5jYWxsKHRoaXMpKTtcclxuXHJcbi8qIVxyXG4gKiBldmVudGllIHYxLjAuNlxyXG4gKiBldmVudCBiaW5kaW5nIGhlbHBlclxyXG4gKiAgIGV2ZW50aWUuYmluZCggZWxlbSwgJ2NsaWNrJywgbXlGbiApXHJcbiAqICAgZXZlbnRpZS51bmJpbmQoIGVsZW0sICdjbGljaycsIG15Rm4gKVxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuXHJcblxyXG52YXIgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbnZhciBiaW5kID0gZnVuY3Rpb24oKSB7fTtcclxuXHJcbmZ1bmN0aW9uIGdldElFRXZlbnQoIG9iaiApIHtcclxuICB2YXIgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XHJcbiAgLy8gYWRkIGV2ZW50LnRhcmdldFxyXG4gIGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50IHx8IG9iajtcclxuICByZXR1cm4gZXZlbnQ7XHJcbn1cclxuXHJcbmlmICggZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xyXG4gIGJpbmQgPSBmdW5jdGlvbiggb2JqLCB0eXBlLCBmbiApIHtcclxuICAgIG9iai5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBmbiwgZmFsc2UgKTtcclxuICB9O1xyXG59IGVsc2UgaWYgKCBkb2NFbGVtLmF0dGFjaEV2ZW50ICkge1xyXG4gIGJpbmQgPSBmdW5jdGlvbiggb2JqLCB0eXBlLCBmbiApIHtcclxuICAgIG9ialsgdHlwZSArIGZuIF0gPSBmbi5oYW5kbGVFdmVudCA/XHJcbiAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBldmVudCA9IGdldElFRXZlbnQoIG9iaiApO1xyXG4gICAgICAgIGZuLmhhbmRsZUV2ZW50LmNhbGwoIGZuLCBldmVudCApO1xyXG4gICAgICB9IDpcclxuICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gZ2V0SUVFdmVudCggb2JqICk7XHJcbiAgICAgICAgZm4uY2FsbCggb2JqLCBldmVudCApO1xyXG4gICAgICB9O1xyXG4gICAgb2JqLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdICk7XHJcbiAgfTtcclxufVxyXG5cclxudmFyIHVuYmluZCA9IGZ1bmN0aW9uKCkge307XHJcblxyXG5pZiAoIGRvY0VsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcclxuICB1bmJpbmQgPSBmdW5jdGlvbiggb2JqLCB0eXBlLCBmbiApIHtcclxuICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBmbiwgZmFsc2UgKTtcclxuICB9O1xyXG59IGVsc2UgaWYgKCBkb2NFbGVtLmRldGFjaEV2ZW50ICkge1xyXG4gIHVuYmluZCA9IGZ1bmN0aW9uKCBvYmosIHR5cGUsIGZuICkge1xyXG4gICAgb2JqLmRldGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdICk7XHJcbiAgICB0cnkge1xyXG4gICAgICBkZWxldGUgb2JqWyB0eXBlICsgZm4gXTtcclxuICAgIH0gY2F0Y2ggKCBlcnIgKSB7XHJcbiAgICAgIC8vIGNhbid0IGRlbGV0ZSB3aW5kb3cgb2JqZWN0IHByb3BlcnRpZXNcclxuICAgICAgb2JqWyB0eXBlICsgZm4gXSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG52YXIgZXZlbnRpZSA9IHtcclxuICBiaW5kOiBiaW5kLFxyXG4gIHVuYmluZDogdW5iaW5kXHJcbn07XHJcblxyXG4vLyAtLS0tLSBtb2R1bGUgZGVmaW5pdGlvbiAtLS0tLSAvL1xyXG5cclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZXZlbnRpZS9ldmVudGllJyxldmVudGllICk7XHJcbn0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcclxuICAvLyBDb21tb25KU1xyXG4gIG1vZHVsZS5leHBvcnRzID0gZXZlbnRpZTtcclxufSBlbHNlIHtcclxuICAvLyBicm93c2VyIGdsb2JhbFxyXG4gIHdpbmRvdy5ldmVudGllID0gZXZlbnRpZTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyohXHJcbiAqIGdldFN0eWxlUHJvcGVydHkgdjEuMC40XHJcbiAqIG9yaWdpbmFsIGJ5IGthbmdheFxyXG4gKiBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS9mZWF0dXJlLXRlc3RpbmctY3NzLXByb3BlcnRpZXMvXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSAqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBleHBvcnRzOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuXHJcblxyXG52YXIgcHJlZml4ZXMgPSAnV2Via2l0IE1veiBtcyBNcyBPJy5zcGxpdCgnICcpO1xyXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cclxuZnVuY3Rpb24gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcE5hbWUgKSB7XHJcbiAgaWYgKCAhcHJvcE5hbWUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyB0ZXN0IHN0YW5kYXJkIHByb3BlcnR5IGZpcnN0XHJcbiAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcm9wTmFtZSBdID09PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiBwcm9wTmFtZTtcclxuICB9XHJcblxyXG4gIC8vIGNhcGl0YWxpemVcclxuICBwcm9wTmFtZSA9IHByb3BOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc2xpY2UoMSk7XHJcblxyXG4gIC8vIHRlc3QgdmVuZG9yIHNwZWNpZmljIHByb3BlcnRpZXNcclxuICB2YXIgcHJlZml4ZWQ7XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgcHJvcE5hbWU7XHJcbiAgICBpZiAoIHR5cGVvZiBkb2NFbGVtU3R5bGVbIHByZWZpeGVkIF0gPT09ICdzdHJpbmcnICkge1xyXG4gICAgICByZXR1cm4gcHJlZml4ZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScsW10sZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZ2V0U3R5bGVQcm9wZXJ0eTtcclxuICB9KTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIC8vIENvbW1vbkpTIGZvciBDb21wb25lbnRcclxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFN0eWxlUHJvcGVydHk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSA9IGdldFN0eWxlUHJvcGVydHk7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBnZXRTaXplIHYxLjIuMlxyXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgZXhwb3J0czogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCBjb25zb2xlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCB1bmRlZmluZWQgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdldCBhIG51bWJlciBmcm9tIGEgc3RyaW5nLCBub3QgYSBwZXJjZW50YWdlXHJcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XHJcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgLy8gbm90IGEgcGVyY2VudCBsaWtlICcxMDAlJywgYW5kIGEgbnVtYmVyXHJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICYmICFpc05hTiggbnVtICk7XHJcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBtZWFzdXJlbWVudHMgPSBbXHJcbiAgJ3BhZGRpbmdMZWZ0JyxcclxuICAncGFkZGluZ1JpZ2h0JyxcclxuICAncGFkZGluZ1RvcCcsXHJcbiAgJ3BhZGRpbmdCb3R0b20nLFxyXG4gICdtYXJnaW5MZWZ0JyxcclxuICAnbWFyZ2luUmlnaHQnLFxyXG4gICdtYXJnaW5Ub3AnLFxyXG4gICdtYXJnaW5Cb3R0b20nLFxyXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxyXG4gICdib3JkZXJSaWdodFdpZHRoJyxcclxuICAnYm9yZGVyVG9wV2lkdGgnLFxyXG4gICdib3JkZXJCb3R0b21XaWR0aCdcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xyXG4gIHZhciBzaXplID0ge1xyXG4gICAgd2lkdGg6IDAsXHJcbiAgICBoZWlnaHQ6IDAsXHJcbiAgICBpbm5lcldpZHRoOiAwLFxyXG4gICAgaW5uZXJIZWlnaHQ6IDAsXHJcbiAgICBvdXRlcldpZHRoOiAwLFxyXG4gICAgb3V0ZXJIZWlnaHQ6IDBcclxuICB9O1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gIH1cclxuICByZXR1cm4gc2l6ZTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBkZWZpbmVHZXRTaXplKCBnZXRTdHlsZVByb3BlcnR5ICkge1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBpc1NldHVwID0gZmFsc2U7XHJcblxyXG52YXIgZ2V0U3R5bGUsIGJveFNpemluZ1Byb3AsIGlzQm94U2l6ZU91dGVyO1xyXG5cclxuLyoqXHJcbiAqIHNldHVwIHZhcnMgYW5kIGZ1bmN0aW9uc1xyXG4gKiBkbyBpdCBvbiBpbml0aWFsIGdldFNpemUoKSwgcmF0aGVyIHRoYW4gb24gc2NyaXB0IGxvYWRcclxuICogRm9yIEZpcmVmb3ggYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xyXG4gKi9cclxuZnVuY3Rpb24gc2V0dXAoKSB7XHJcbiAgLy8gc2V0dXAgb25jZVxyXG4gIGlmICggaXNTZXR1cCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaXNTZXR1cCA9IHRydWU7XHJcblxyXG4gIHZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7XHJcbiAgZ2V0U3R5bGUgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGdldFN0eWxlRm4gPSBnZXRDb21wdXRlZFN0eWxlID9cclxuICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgIHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcclxuICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZUZuKCBlbGVtICk7XHJcbiAgICAgICAgaWYgKCAhc3R5bGUgKSB7XHJcbiAgICAgICAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXHJcbiAgICAgICAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xyXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHlsZTtcclxuICAgICAgfTtcclxuICB9KSgpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIGJveFNpemluZ1Byb3AgPSBnZXRTdHlsZVByb3BlcnR5KCdib3hTaXppbmcnKTtcclxuXHJcbiAgLyoqXHJcbiAgICogV2ViS2l0IG1lYXN1cmVzIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXHJcbiAgICogSUUgJiBGaXJlZm94IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxyXG4gICAqL1xyXG4gIGlmICggYm94U2l6aW5nUHJvcCApIHtcclxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XHJcbiAgICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gICAgZGl2LnN0eWxlWyBib3hTaXppbmdQcm9wIF0gPSAnYm9yZGVyLWJveCc7XHJcblxyXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xyXG5cclxuICAgIGlzQm94U2l6ZU91dGVyID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApID09PSAyMDA7XHJcbiAgICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBnZXRTaXplKCBlbGVtICkge1xyXG4gIHNldHVwKCk7XHJcblxyXG4gIC8vIHVzZSBxdWVyeVNlbGV0b3IgaWYgZWxlbSBpcyBzdHJpbmdcclxuICBpZiAoIHR5cGVvZiBlbGVtID09PSAnc3RyaW5nJyApIHtcclxuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG5cclxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xyXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT09ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcclxuXHJcbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcclxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJyApIHtcclxuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNpemUgPSB7fTtcclxuICBzaXplLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcclxuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICB2YXIgaXNCb3JkZXJCb3ggPSBzaXplLmlzQm9yZGVyQm94ID0gISEoIGJveFNpemluZ1Byb3AgJiZcclxuICAgIHN0eWxlWyBib3hTaXppbmdQcm9wIF0gJiYgc3R5bGVbIGJveFNpemluZ1Byb3AgXSA9PT0gJ2JvcmRlci1ib3gnICk7XHJcblxyXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XHJcbiAgICB2YWx1ZSA9IG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICk7XHJcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcclxuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcclxuICB2YXIgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xyXG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xyXG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xyXG4gIHZhciBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XHJcblxyXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxyXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xyXG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXHJcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcclxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcclxuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcclxuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xyXG4gIH1cclxuXHJcbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuXHJcbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xyXG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcclxuXHJcbiAgcmV0dXJuIHNpemU7XHJcbn1cclxuXHJcbi8vIElFOCByZXR1cm5zIHBlcmNlbnQgdmFsdWVzLCBub3QgcGl4ZWxzXHJcbi8vIHRha2VuIGZyb20galF1ZXJ5J3MgY3VyQ1NTXHJcbmZ1bmN0aW9uIG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICkge1xyXG4gIC8vIElFOCBhbmQgaGFzIHBlcmNlbnQgdmFsdWVcclxuICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIHx8IHZhbHVlLmluZGV4T2YoJyUnKSA9PT0gLTEgKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG4gIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7XHJcbiAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG4gIHZhciBsZWZ0ID0gc3R5bGUubGVmdDtcclxuICB2YXIgcnMgPSBlbGVtLnJ1bnRpbWVTdHlsZTtcclxuICB2YXIgcnNMZWZ0ID0gcnMgJiYgcnMubGVmdDtcclxuXHJcbiAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG4gIGlmICggcnNMZWZ0ICkge1xyXG4gICAgcnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XHJcbiAgfVxyXG4gIHN0eWxlLmxlZnQgPSB2YWx1ZTtcclxuICB2YWx1ZSA9IHN0eWxlLnBpeGVsTGVmdDtcclxuXHJcbiAgLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG4gIHN0eWxlLmxlZnQgPSBsZWZ0O1xyXG4gIGlmICggcnNMZWZ0ICkge1xyXG4gICAgcnMubGVmdCA9IHJzTGVmdDtcclxuICB9XHJcblxyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxucmV0dXJuIGdldFNpemU7XHJcblxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EIGZvciBSZXF1aXJlSlNcclxuICBkZWZpbmUoICdnZXQtc2l6ZS9nZXQtc2l6ZScsWyAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScgXSwgZGVmaW5lR2V0U2l6ZSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgLy8gQ29tbW9uSlMgZm9yIENvbXBvbmVudFxyXG4gIG1vZHVsZS5leHBvcnRzID0gZGVmaW5lR2V0U2l6ZSggcmVxdWlyZSgnZGVzYW5kcm8tZ2V0LXN0eWxlLXByb3BlcnR5JykgKTtcclxufSBlbHNlIHtcclxuICAvLyBicm93c2VyIGdsb2JhbFxyXG4gIHdpbmRvdy5nZXRTaXplID0gZGVmaW5lR2V0U2l6ZSggd2luZG93LmdldFN0eWxlUHJvcGVydHkgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyohXHJcbiAqIGRvY1JlYWR5IHYxLjAuNFxyXG4gKiBDcm9zcyBicm93c2VyIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgZW1pdHRlclxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcclxuLy8gY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgdG8gYmUgdHJpZ2dlcmVkIG9uIHJlYWR5XHJcbnZhciBxdWV1ZSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gZG9jUmVhZHkoIGZuICkge1xyXG4gIC8vIHRocm93IG91dCBub24tZnVuY3Rpb25zXHJcbiAgaWYgKCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgKSB7XHJcbiAgICAvLyByZWFkeSBub3csIGhpdCBpdFxyXG4gICAgZm4oKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gcXVldWUgZnVuY3Rpb24gd2hlbiByZWFkeVxyXG4gICAgcXVldWUucHVzaCggZm4gKTtcclxuICB9XHJcbn1cclxuXHJcbmRvY1JlYWR5LmlzUmVhZHkgPSBmYWxzZTtcclxuXHJcbi8vIHRyaWdnZXJlZCBvbiB2YXJpb3VzIGRvYyByZWFkeSBldmVudHNcclxuZnVuY3Rpb24gb25SZWFkeSggZXZlbnQgKSB7XHJcbiAgLy8gYmFpbCBpZiBhbHJlYWR5IHRyaWdnZXJlZCBvciBJRTggZG9jdW1lbnQgaXMgbm90IHJlYWR5IGp1c3QgeWV0XHJcbiAgdmFyIGlzSUU4Tm90UmVhZHkgPSBldmVudC50eXBlID09PSAncmVhZHlzdGF0ZWNoYW5nZScgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJztcclxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgfHwgaXNJRThOb3RSZWFkeSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRyaWdnZXIoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJpZ2dlcigpIHtcclxuICBkb2NSZWFkeS5pc1JlYWR5ID0gdHJ1ZTtcclxuICAvLyBwcm9jZXNzIHF1ZXVlXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcXVldWUubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZm4gPSBxdWV1ZVtpXTtcclxuICAgIGZuKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZpbmVEb2NSZWFkeSggZXZlbnRpZSApIHtcclxuICAvLyB0cmlnZ2VyIHJlYWR5IGlmIHBhZ2UgaXMgcmVhZHlcclxuICBpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgKSB7XHJcbiAgICB0cmlnZ2VyKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGxpc3RlbiBmb3IgZXZlbnRzXHJcbiAgICBldmVudGllLmJpbmQoIGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIG9uUmVhZHkgKTtcclxuICAgIGV2ZW50aWUuYmluZCggZG9jdW1lbnQsICdyZWFkeXN0YXRlY2hhbmdlJywgb25SZWFkeSApO1xyXG4gICAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdsb2FkJywgb25SZWFkeSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRvY1JlYWR5O1xyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZG9jLXJlYWR5L2RvYy1yZWFkeScsWyAnZXZlbnRpZS9ldmVudGllJyBdLCBkZWZpbmVEb2NSZWFkeSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVEb2NSZWFkeSggcmVxdWlyZSgnZXZlbnRpZScpICk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZG9jUmVhZHkgPSBkZWZpbmVEb2NSZWFkeSggd2luZG93LmV2ZW50aWUgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyoqXHJcbiAqIG1hdGNoZXNTZWxlY3RvciB2MS4wLjNcclxuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIEVsZW1Qcm90byApIHtcclxuXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xyXG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcclxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXHJcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XHJcblxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcclxuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgICBpZiAoIEVsZW1Qcm90b1sgbWV0aG9kIF0gKSB7XHJcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pKCk7XHJcblxyXG4gIC8vIC0tLS0tIG1hdGNoIC0tLS0tIC8vXHJcblxyXG4gIGZ1bmN0aW9uIG1hdGNoKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLSBhcHBlbmRUb0ZyYWdtZW50IC0tLS0tIC8vXHJcblxyXG4gIGZ1bmN0aW9uIGNoZWNrUGFyZW50KCBlbGVtICkge1xyXG4gICAgLy8gbm90IG5lZWRlZCBpZiBhbHJlYWR5IGhhcyBwYXJlbnRcclxuICAgIGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gcXVlcnkgLS0tLS0gLy9cclxuXHJcbiAgLy8gZmFsbCBiYWNrIHRvIHVzaW5nIFFTQVxyXG4gIC8vIHRoeCBAam9uYXRoYW50bmVhbCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8zMDYyOTU1XHJcbiAgZnVuY3Rpb24gcXVlcnkoIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gICAgLy8gYXBwZW5kIHRvIGZyYWdtZW50IGlmIG5vIHBhcmVudFxyXG4gICAgY2hlY2tQYXJlbnQoIGVsZW0gKTtcclxuXHJcbiAgICAvLyBtYXRjaCBlbGVtIHdpdGggYWxsIHNlbGVjdGVkIGVsZW1zIG9mIHBhcmVudFxyXG4gICAgdmFyIGVsZW1zID0gZWxlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgLy8gcmV0dXJuIHRydWUgaWYgbWF0Y2hcclxuICAgICAgaWYgKCBlbGVtc1tpXSA9PT0gZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gb3RoZXJ3aXNlIHJldHVybiBmYWxzZVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gbWF0Y2hDaGlsZCAtLS0tLSAvL1xyXG5cclxuICBmdW5jdGlvbiBtYXRjaENoaWxkKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIGNoZWNrUGFyZW50KCBlbGVtICk7XHJcbiAgICByZXR1cm4gbWF0Y2goIGVsZW0sIHNlbGVjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLSBtYXRjaGVzU2VsZWN0b3IgLS0tLS0gLy9cclxuXHJcbiAgdmFyIG1hdGNoZXNTZWxlY3RvcjtcclxuXHJcbiAgaWYgKCBtYXRjaGVzTWV0aG9kICkge1xyXG4gICAgLy8gSUU5IHN1cHBvcnRzIG1hdGNoZXNTZWxlY3RvciwgYnV0IGRvZXNuJ3Qgd29yayBvbiBvcnBoYW5lZCBlbGVtc1xyXG4gICAgLy8gY2hlY2sgZm9yIHRoYXRcclxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzdXBwb3J0c09ycGhhbnMgPSBtYXRjaCggZGl2LCAnZGl2JyApO1xyXG4gICAgbWF0Y2hlc1NlbGVjdG9yID0gc3VwcG9ydHNPcnBoYW5zID8gbWF0Y2ggOiBtYXRjaENoaWxkO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXRjaGVzU2VsZWN0b3IgPSBxdWVyeTtcclxuICB9XHJcblxyXG4gIC8vIHRyYW5zcG9ydFxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdtYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InLFtdLGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU2VsZWN0b3I7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBtYXRjaGVzU2VsZWN0b3I7XHJcbiAgfVxyXG5cclxufSkoIEVsZW1lbnQucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogRml6enkgVUkgdXRpbHMgdjEuMC4xXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxbXHJcbiAgICAgICdkb2MtcmVhZHkvZG9jLXJlYWR5JyxcclxuICAgICAgJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcclxuICAgIF0sIGZ1bmN0aW9uKCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZG9jLXJlYWR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5maXp6eVVJVXRpbHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5kb2NSZWFkeSxcclxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApIHtcclxuXHJcblxyXG5cclxudmFyIHV0aWxzID0ge307XHJcblxyXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cclxuXHJcbi8vIGV4dGVuZHMgb2JqZWN0c1xyXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xyXG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xyXG4gIH1cclxuICByZXR1cm4gYTtcclxufTtcclxuXHJcbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xyXG5cclxudXRpbHMubW9kdWxvID0gZnVuY3Rpb24oIG51bSwgZGl2ICkge1xyXG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcclxufTtcclxuXHJcbi8vIC0tLS0tIGlzQXJyYXkgLS0tLS0gLy9cclxuICBcclxudmFyIG9ialRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxudXRpbHMuaXNBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgcmV0dXJuIG9ialRvU3RyaW5nLmNhbGwoIG9iaiApID09ICdbb2JqZWN0IEFycmF5XSc7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cclxuXHJcbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XHJcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgdmFyIGFyeSA9IFtdO1xyXG4gIGlmICggdXRpbHMuaXNBcnJheSggb2JqICkgKSB7XHJcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcclxuICAgIGFyeSA9IG9iajtcclxuICB9IGVsc2UgaWYgKCBvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgKSB7XHJcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XHJcbiAgICBhcnkucHVzaCggb2JqICk7XHJcbiAgfVxyXG4gIHJldHVybiBhcnk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBpbmRleE9mIC0tLS0tIC8vXHJcblxyXG4vLyBpbmRleCBvZiBoZWxwZXIgY2F1c2UgSUU4XHJcbnV0aWxzLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICAgIHJldHVybiBhcnkuaW5kZXhPZiggb2JqICk7XHJcbiAgfSA6IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGFyeS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaWYgKCBhcnlbaV0gPT09IG9iaiApIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXHJcblxyXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xyXG4gIHZhciBpbmRleCA9IHV0aWxzLmluZGV4T2YoIGFyeSwgb2JqICk7XHJcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcclxuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gaXNFbGVtZW50IC0tLS0tIC8vXHJcblxyXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zODQzODAvMTgyMTgzXHJcbnV0aWxzLmlzRWxlbWVudCA9ICggdHlwZW9mIEhUTUxFbGVtZW50ID09ICdmdW5jdGlvbicgfHwgdHlwZW9mIEhUTUxFbGVtZW50ID09ICdvYmplY3QnICkgP1xyXG4gIGZ1bmN0aW9uIGlzRWxlbWVudERPTTIoIG9iaiApIHtcclxuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcclxuICB9IDpcclxuICBmdW5jdGlvbiBpc0VsZW1lbnRRdWlya3koIG9iaiApIHtcclxuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJlxyXG4gICAgICBvYmoubm9kZVR5cGUgPT0gMSAmJiB0eXBlb2Ygb2JqLm5vZGVOYW1lID09ICdzdHJpbmcnO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSBzZXRUZXh0IC0tLS0tIC8vXHJcblxyXG51dGlscy5zZXRUZXh0ID0gKCBmdW5jdGlvbigpIHtcclxuICB2YXIgc2V0VGV4dFByb3BlcnR5O1xyXG4gIGZ1bmN0aW9uIHNldFRleHQoIGVsZW0sIHRleHQgKSB7XHJcbiAgICAvLyBvbmx5IGNoZWNrIHNldFRleHRQcm9wZXJ0eSBvbmNlXHJcbiAgICBzZXRUZXh0UHJvcGVydHkgPSBzZXRUZXh0UHJvcGVydHkgfHwgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JyApO1xyXG4gICAgZWxlbVsgc2V0VGV4dFByb3BlcnR5IF0gPSB0ZXh0O1xyXG4gIH1cclxuICByZXR1cm4gc2V0VGV4dDtcclxufSkoKTtcclxuXHJcbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gIHdoaWxlICggZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xyXG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICByZXR1cm4gZWxlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cclxuXHJcbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxyXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xyXG5cclxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcclxuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGZmRWxlbXMgPSBbXTtcclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XHJcbiAgICBpZiAoICF1dGlscy5pc0VsZW1lbnQoIGVsZW0gKSApIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxyXG4gICAgaWYgKCBzZWxlY3RvciApIHtcclxuICAgICAgLy8gZmlsdGVyIHNpYmxpbmdzXHJcbiAgICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGZpbmQgY2hpbGRyZW5cclxuICAgICAgdmFyIGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XHJcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XHJcbiAgICAgIGZvciAoIHZhciBqPTAsIGpMZW4gPSBjaGlsZEVsZW1zLmxlbmd0aDsgaiA8IGpMZW47IGorKyApIHtcclxuICAgICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbal0gKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmZFbGVtcztcclxufTtcclxuXHJcbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXHJcblxyXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcclxuICAvLyBvcmlnaW5hbCBtZXRob2RcclxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xyXG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XHJcblxyXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgaWYgKCB0aW1lb3V0ICkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuICAgIH1cclxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgIG1ldGhvZC5hcHBseSggX3RoaXMsIGFyZ3MgKTtcclxuICAgICAgZGVsZXRlIF90aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgfSwgdGhyZXNob2xkIHx8IDEwMCApO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xyXG5cclxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXHJcbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xyXG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XHJcbiAgfSkudG9Mb3dlckNhc2UoKTtcclxufTtcclxuXHJcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XHJcbi8qKlxyXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgLmpzLW5hbWVzcGFjZSBjbGFzc1xyXG4gKiBodG1sSW5pdCggV2lkZ2V0LCAnd2lkZ2V0TmFtZScgKVxyXG4gKiBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb24gYXR0cmlidXRlXHJcbiAqL1xyXG51dGlscy5odG1sSW5pdCA9IGZ1bmN0aW9uKCBXaWRnZXRDbGFzcywgbmFtZXNwYWNlICkge1xyXG4gIGRvY1JlYWR5KCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XHJcbiAgICB2YXIgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLmpzLScgKyBkYXNoZWROYW1lc3BhY2UgKTtcclxuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2UgKyAnLW9wdGlvbnMnO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApO1xyXG4gICAgICB2YXIgb3B0aW9ucztcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XHJcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcclxuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXHJcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgJyArIGRhdGFBdHRyICsgJyBvbiAnICtcclxuICAgICAgICAgICAgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICsgKCBlbGVtLmlkID8gJyMnICsgZWxlbS5pZCA6ICcnICkgKyAnOiAnICtcclxuICAgICAgICAgICAgZXJyb3IgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgLy8gaW5pdGlhbGl6ZVxyXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcclxuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCdsYXlvdXRuYW1lJylcclxuICAgICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcbiAgICAgIGlmICggalF1ZXJ5ICkge1xyXG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxucmV0dXJuIHV0aWxzO1xyXG5cclxufSkpO1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvY2VsbCcsW1xyXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnXHJcbiAgICBdLCBmdW5jdGlvbiggZ2V0U2l6ZSApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZ2V0U2l6ZSApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XHJcbiAgICB3aW5kb3cuRmxpY2tpdHkuQ2VsbCA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LmdldFNpemVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGdldFNpemUgKSB7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIENlbGwoIGVsZW0sIHBhcmVudCApIHtcclxuICB0aGlzLmVsZW1lbnQgPSBlbGVtO1xyXG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG5cclxuICB0aGlzLmNyZWF0ZSgpO1xyXG59XHJcblxyXG52YXIgaXNJRTggPSAnYXR0YWNoRXZlbnQnIGluIHdpbmRvdztcclxuXHJcbkNlbGwucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgLy8gSUU4IHByZXZlbnQgY2hpbGQgZnJvbSBjaGFuZ2luZyBmb2N1cyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNzUyNTIyMy8xODIxODNcclxuICBpZiAoIGlzSUU4ICkge1xyXG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ3Vuc2VsZWN0YWJsZScsICdvbicgKTtcclxuICB9XHJcbiAgdGhpcy54ID0gMDtcclxuICB0aGlzLnNoaWZ0ID0gMDtcclxufTtcclxuXHJcbkNlbGwucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAvLyByZXNldCBzdHlsZVxyXG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xyXG4gIHZhciBzaWRlID0gdGhpcy5wYXJlbnQub3JpZ2luU2lkZTtcclxuICB0aGlzLmVsZW1lbnQuc3R5bGVbIHNpZGUgXSA9ICcnO1xyXG59O1xyXG5cclxuQ2VsbC5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG59O1xyXG5cclxuQ2VsbC5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiggeCApIHtcclxuICB0aGlzLnggPSB4O1xyXG4gIHRoaXMuc2V0RGVmYXVsdFRhcmdldCgpO1xyXG4gIHRoaXMucmVuZGVyUG9zaXRpb24oIHggKTtcclxufTtcclxuXHJcbkNlbGwucHJvdG90eXBlLnNldERlZmF1bHRUYXJnZXQgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgbWFyZ2luUHJvcGVydHkgPSB0aGlzLnBhcmVudC5vcmlnaW5TaWRlID09ICdsZWZ0JyA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XHJcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLnNpemVbIG1hcmdpblByb3BlcnR5IF0gK1xyXG4gICAgdGhpcy5zaXplLndpZHRoICogdGhpcy5wYXJlbnQuY2VsbEFsaWduO1xyXG59O1xyXG5cclxuQ2VsbC5wcm90b3R5cGUucmVuZGVyUG9zaXRpb24gPSBmdW5jdGlvbiggeCApIHtcclxuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxyXG4gIHZhciBzaWRlID0gdGhpcy5wYXJlbnQub3JpZ2luU2lkZTtcclxuICB0aGlzLmVsZW1lbnQuc3R5bGVbIHNpZGUgXSA9IHRoaXMucGFyZW50LmdldFBvc2l0aW9uVmFsdWUoIHggKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGZhY3RvciAtIDAsIDEsIG9yIC0xXHJcbioqL1xyXG5DZWxsLnByb3RvdHlwZS53cmFwU2hpZnQgPSBmdW5jdGlvbiggc2hpZnQgKSB7XHJcbiAgdGhpcy5zaGlmdCA9IHNoaWZ0O1xyXG4gIHRoaXMucmVuZGVyUG9zaXRpb24oIHRoaXMueCArIHRoaXMucGFyZW50LnNsaWRlYWJsZVdpZHRoICogc2hpZnQgKTtcclxufTtcclxuXHJcbkNlbGwucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcbnJldHVybiBDZWxsO1xyXG5cclxufSkpO1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvYW5pbWF0ZScsW1xyXG4gICAgICAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScsXHJcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcclxuICAgIF0sIGZ1bmN0aW9uKCBnZXRTdHlsZVByb3BlcnR5LCB1dGlscyApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1nZXQtc3R5bGUtcHJvcGVydHknKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcclxuICAgIHdpbmRvdy5GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSxcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHJlcXVlc3RBbmltYXRpb25GcmFtZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTg2NjQ3NFxyXG5cclxudmFyIGxhc3RUaW1lID0gMDtcclxudmFyIHByZWZpeGVzID0gJ3dlYmtpdCBtb3ogbXMgbycuc3BsaXQoJyAnKTtcclxuLy8gZ2V0IHVucHJlZml4ZWQgckFGIGFuZCBjQUYsIGlmIHByZXNlbnRcclxudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcbnZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcclxuLy8gbG9vcCB0aHJvdWdoIHZlbmRvciBwcmVmaXhlcyBhbmQgZ2V0IHByZWZpeGVkIHJBRiBhbmQgY0FGXHJcbnZhciBwcmVmaXg7XHJcbmZvciggdmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgaWYgKCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSB7XHJcbiAgICBicmVhaztcclxuICB9XHJcbiAgcHJlZml4ID0gcHJlZml4ZXNbaV07XHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvd1sgcHJlZml4ICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZScgXTtcclxuICBjYW5jZWxBbmltYXRpb25GcmFtZSAgPSBjYW5jZWxBbmltYXRpb25GcmFtZSAgfHwgd2luZG93WyBwcmVmaXggKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnIF0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1sgcHJlZml4ICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZScgXTtcclxufVxyXG5cclxuLy8gZmFsbGJhY2sgdG8gc2V0VGltZW91dCBhbmQgY2xlYXJUaW1lb3V0IGlmIGVpdGhlciByZXF1ZXN0L2NhbmNlbCBpcyBub3Qgc3VwcG9ydGVkXHJcbmlmICggIXJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAhY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSAge1xyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcclxuICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCggMCwgMTYgLSAoIGN1cnJUaW1lIC0gbGFzdFRpbWUgKSApO1xyXG4gICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICBjYWxsYmFjayggY3VyclRpbWUgKyB0aW1lVG9DYWxsICk7XHJcbiAgICB9LCB0aW1lVG9DYWxsICk7XHJcbiAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcclxuICAgIHJldHVybiBpZDtcclxuICB9O1xyXG5cclxuICBjYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKCBpZCApIHtcclxuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoIGlkICk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYW5pbWF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIHByb3RvID0ge307XHJcblxyXG5wcm90by5zdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XHJcbiAgdGhpcy5hbmltYXRlKCk7XHJcbn07XHJcblxyXG5wcm90by5hbmltYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5hcHBseURyYWdGb3JjZSgpO1xyXG4gIHRoaXMuYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb24oKTtcclxuXHJcbiAgdmFyIHByZXZpb3VzWCA9IHRoaXMueDtcclxuXHJcbiAgdGhpcy5pbnRlZ3JhdGVQaHlzaWNzKCk7XHJcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xyXG4gIHRoaXMuc2V0dGxlKCBwcmV2aW91c1ggKTtcclxuICAvLyBhbmltYXRlIG5leHQgZnJhbWVcclxuICBpZiAoIHRoaXMuaXNBbmltYXRpbmcgKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBmdW5jdGlvbiBhbmltYXRlRnJhbWUoKSB7XHJcbiAgICAgIF90aGlzLmFuaW1hdGUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIC9cclxuICAvLyBsb2cgYW5pbWF0aW9uIGZyYW1lIHJhdGVcclxuICB2YXIgbm93ID0gbmV3IERhdGUoKTtcclxuICBpZiAoIHRoaXMudGhlbiApIHtcclxuICAgIGNvbnNvbGUubG9nKCB+figgMTAwMCAvIChub3ctdGhpcy50aGVuKSkgKyAnZnBzJyApXHJcbiAgfVxyXG4gIHRoaXMudGhlbiA9IG5vdztcclxuICAvKiovXHJcbn07XHJcblxyXG5cclxudmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gZ2V0U3R5bGVQcm9wZXJ0eSgndHJhbnNmb3JtJyk7XHJcbnZhciBpczNkID0gISFnZXRTdHlsZVByb3BlcnR5KCdwZXJzcGVjdGl2ZScpO1xyXG5cclxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgeCA9IHRoaXMueDtcclxuICAvLyB3cmFwIHBvc2l0aW9uIGFyb3VuZFxyXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgdGhpcy5jZWxscy5sZW5ndGggPiAxICkge1xyXG4gICAgeCA9IHV0aWxzLm1vZHVsbyggeCwgdGhpcy5zbGlkZWFibGVXaWR0aCApO1xyXG4gICAgeCA9IHggLSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xyXG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xyXG4gIH1cclxuXHJcbiAgeCA9IHggKyB0aGlzLmN1cnNvclBvc2l0aW9uO1xyXG5cclxuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnQgYW5kIHVzaW5nIHRyYW5zZm9ybVxyXG4gIHggPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgJiYgdHJhbnNmb3JtUHJvcGVydHkgPyAteCA6IHg7XHJcblxyXG4gIHZhciB2YWx1ZSA9IHRoaXMuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xyXG5cclxuICBpZiAoIHRyYW5zZm9ybVByb3BlcnR5ICkge1xyXG4gICAgLy8gdXNlIDNEIHRyYW5mb3JtcyBmb3IgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIG9uIGlPU1xyXG4gICAgLy8gYnV0IHVzZSAyRCB3aGVuIHNldHRsZWQsIGZvciBiZXR0ZXIgZm9udC1yZW5kZXJpbmdcclxuICAgIHRoaXMuc2xpZGVyLnN0eWxlWyB0cmFuc2Zvcm1Qcm9wZXJ0eSBdID0gaXMzZCAmJiB0aGlzLmlzQW5pbWF0aW5nID9cclxuICAgICAgJ3RyYW5zbGF0ZTNkKCcgKyB2YWx1ZSArICcsMCwwKScgOiAndHJhbnNsYXRlWCgnICsgdmFsdWUgKyAnKSc7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuc2xpZGVyLnN0eWxlWyB0aGlzLm9yaWdpblNpZGUgXSA9IHZhbHVlO1xyXG4gIH1cclxufTtcclxuXHJcbnByb3RvLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgc2VsZWN0ZWRDZWxsID0gdGhpcy5jZWxsc1sgdGhpcy5zZWxlY3RlZEluZGV4IF07XHJcbiAgdGhpcy54ID0gLXNlbGVjdGVkQ2VsbC50YXJnZXQ7XHJcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xyXG59O1xyXG5cclxucHJvdG8uZ2V0UG9zaXRpb25WYWx1ZSA9IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcclxuICBpZiAoIHRoaXMub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gKSB7XHJcbiAgICAvLyBwZXJjZW50IHBvc2l0aW9uLCByb3VuZCB0byAyIGRpZ2l0cywgbGlrZSAxMi4zNCVcclxuICAgIHJldHVybiAoIE1hdGgucm91bmQoICggcG9zaXRpb24gLyB0aGlzLnNpemUuaW5uZXJXaWR0aCApICogMTAwMDAgKSAqIDAuMDEgKSsgJyUnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBwaXhlbCBwb3NpdGlvbmluZ1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoIHBvc2l0aW9uICkgKyAncHgnO1xyXG4gIH1cclxufTtcclxuXHJcbnByb3RvLnNldHRsZSA9IGZ1bmN0aW9uKCBwcmV2aW91c1ggKSB7XHJcbiAgLy8ga2VlcCB0cmFjayBvZiBmcmFtZXMgd2hlcmUgeCBoYXNuJ3QgbW92ZWRcclxuICBpZiAoICF0aGlzLmlzUG9pbnRlckRvd24gJiYgTWF0aC5yb3VuZCggdGhpcy54ICogMTAwICkgPT0gTWF0aC5yb3VuZCggcHJldmlvdXNYICogMTAwICkgKSB7XHJcbiAgICB0aGlzLnJlc3RpbmdGcmFtZXMrKztcclxuICB9XHJcbiAgLy8gc3RvcCBhbmltYXRpbmcgaWYgcmVzdGluZyBmb3IgMyBvciBtb3JlIGZyYW1lc1xyXG4gIGlmICggdGhpcy5yZXN0aW5nRnJhbWVzID4gMiApIHtcclxuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgIGRlbGV0ZSB0aGlzLmlzRnJlZVNjcm9sbGluZztcclxuICAgIC8vIHJlbmRlciBwb3NpdGlvbiB3aXRoIHRyYW5zbGF0ZVggd2hlbiBzZXR0bGVkXHJcbiAgICBpZiAoIGlzM2QgKSB7XHJcbiAgICAgIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnc2V0dGxlJyk7XHJcbiAgfVxyXG59O1xyXG5cclxucHJvdG8uc2hpZnRXcmFwQ2VsbHMgPSBmdW5jdGlvbiggeCApIHtcclxuICAvLyBzaGlmdCBiZWZvcmUgY2VsbHNcclxuICB2YXIgYmVmb3JlR2FwID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHg7XHJcbiAgdGhpcy5fc2hpZnRDZWxscyggdGhpcy5iZWZvcmVTaGlmdENlbGxzLCBiZWZvcmVHYXAsIC0xICk7XHJcbiAgLy8gc2hpZnQgYWZ0ZXIgY2VsbHNcclxuICB2YXIgYWZ0ZXJHYXAgPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtICggeCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKyB0aGlzLmN1cnNvclBvc2l0aW9uICk7XHJcbiAgdGhpcy5fc2hpZnRDZWxscyggdGhpcy5hZnRlclNoaWZ0Q2VsbHMsIGFmdGVyR2FwLCAxICk7XHJcbn07XHJcblxyXG5wcm90by5fc2hpZnRDZWxscyA9IGZ1bmN0aW9uKCBjZWxscywgZ2FwLCBzaGlmdCApIHtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBjZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBjZWxsID0gY2VsbHNbaV07XHJcbiAgICB2YXIgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcclxuICAgIGNlbGwud3JhcFNoaWZ0KCBjZWxsU2hpZnQgKTtcclxuICAgIGdhcCAtPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcclxuICB9XHJcbn07XHJcblxyXG5wcm90by5fdW5zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xyXG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgY2VsbHNbaV0ud3JhcFNoaWZ0KCAwICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGh5c2ljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxucHJvdG8uaW50ZWdyYXRlUGh5c2ljcyA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMudmVsb2NpdHkgKz0gdGhpcy5hY2NlbDtcclxuICB0aGlzLnggKz0gdGhpcy52ZWxvY2l0eTtcclxuICB0aGlzLnZlbG9jaXR5ICo9IHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKTtcclxuICAvLyByZXNldCBhY2NlbGVyYXRpb25cclxuICB0aGlzLmFjY2VsID0gMDtcclxufTtcclxuXHJcbnByb3RvLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiggZm9yY2UgKSB7XHJcbiAgdGhpcy5hY2NlbCArPSBmb3JjZTtcclxufTtcclxuXHJcbnByb3RvLmdldEZyaWN0aW9uRmFjdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIDEgLSB0aGlzLm9wdGlvbnNbIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID8gJ2ZyZWVTY3JvbGxGcmljdGlvbicgOiAnZnJpY3Rpb24nIF07XHJcbn07XHJcblxyXG5cclxucHJvdG8uZ2V0UmVzdGluZ1Bvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gbXkgdGhhbmtzIHRvIFN0ZXZlbiBXaXR0ZW5zLCB3aG8gc2ltcGxpZmllZCB0aGlzIG1hdGggZ3JlYXRseVxyXG4gIHJldHVybiB0aGlzLnggKyB0aGlzLnZlbG9jaXR5IC8gKCAxIC0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpICk7XHJcbn07XHJcblxyXG5wcm90by5hcHBseURyYWdGb3JjZSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMuaXNQb2ludGVyRG93biApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiB0byBkcmFnIHBvc2l0aW9uIGJ5IGFwcGx5aW5nIGZvcmNlXHJcbiAgdmFyIGRyYWdWZWxvY2l0eSA9IHRoaXMuZHJhZ1ggLSB0aGlzLng7XHJcbiAgdmFyIGRyYWdGb3JjZSA9IGRyYWdWZWxvY2l0eSAtIHRoaXMudmVsb2NpdHk7XHJcbiAgdGhpcy5hcHBseUZvcmNlKCBkcmFnRm9yY2UgKTtcclxufTtcclxuXHJcbnByb3RvLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZG8gbm90IGF0dHJhY3QgaWYgcG9pbnRlciBkb3duIG9yIG5vIGNlbGxzXHJcbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xyXG4gIGlmICggdGhpcy5pc1BvaW50ZXJEb3duIHx8IHRoaXMuaXNGcmVlU2Nyb2xsaW5nIHx8ICFsZW4gKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBjZWxsID0gdGhpcy5jZWxsc1sgdGhpcy5zZWxlY3RlZEluZGV4IF07XHJcbiAgdmFyIHdyYXAgPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiBsZW4gPiAxID9cclxuICAgIHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCB0aGlzLnNlbGVjdGVkSW5kZXggLyBsZW4gKSA6IDA7XHJcbiAgdmFyIGRpc3RhbmNlID0gKCBjZWxsLnRhcmdldCArIHdyYXAgKSAqIC0xIC0gdGhpcy54O1xyXG4gIHZhciBmb3JjZSA9IGRpc3RhbmNlICogdGhpcy5vcHRpb25zLnNlbGVjdGVkQXR0cmFjdGlvbjtcclxuICB0aGlzLmFwcGx5Rm9yY2UoIGZvcmNlICk7XHJcbn07XHJcblxyXG5yZXR1cm4gcHJvdG87XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogRmxpY2tpdHkgbWFpblxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2ZsaWNraXR5L2pzL2ZsaWNraXR5JyxbXHJcbiAgICAgICdjbGFzc2llL2NsYXNzaWUnLFxyXG4gICAgICAnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsXHJcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxyXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAnLi9jZWxsJyxcclxuICAgICAgJy4vYW5pbWF0ZSdcclxuICAgIF0sIGZ1bmN0aW9uKCBjbGFzc2llLCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBhbmltYXRlUHJvdG90eXBlICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBjbGFzc2llLCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBhbmltYXRlUHJvdG90eXBlICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tY2xhc3NpZScpLFxyXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxyXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vY2VsbCcpLFxyXG4gICAgICByZXF1aXJlKCcuL2FuaW1hdGUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHZhciBfRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHk7XHJcblxyXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuY2xhc3NpZSxcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmV2ZW50aWUsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxyXG4gICAgICBfRmxpY2tpdHkuQ2VsbCxcclxuICAgICAgX0ZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGNsYXNzaWUsIEV2ZW50RW1pdHRlciwgZXZlbnRpZSwgZ2V0U2l6ZSxcclxuICB1dGlscywgQ2VsbCwgYW5pbWF0ZVByb3RvdHlwZSApIHtcclxuXHJcblxyXG5cclxuLy8gdmFyc1xyXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcclxudmFyIGdldENvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZTtcclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxuXHJcbmZ1bmN0aW9uIG1vdmVFbGVtZW50cyggZWxlbXMsIHRvRWxlbSApIHtcclxuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICB3aGlsZSAoIGVsZW1zLmxlbmd0aCApIHtcclxuICAgIHRvRWxlbS5hcHBlbmRDaGlsZCggZWxlbXMuc2hpZnQoKSApO1xyXG4gIH1cclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xyXG52YXIgR1VJRCA9IDA7XHJcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBGbGlja2l0eSBpbnRhbmNlc1xyXG52YXIgaW5zdGFuY2VzID0ge307XHJcblxyXG5mdW5jdGlvbiBGbGlja2l0eSggZWxlbWVudCwgb3B0aW9ucyApIHtcclxuICB2YXIgcXVlcnlFbGVtZW50ID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtZW50ICk7XHJcbiAgaWYgKCAhcXVlcnlFbGVtZW50ICkge1xyXG4gICAgaWYgKCBjb25zb2xlICkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCAnQmFkIGVsZW1lbnQgZm9yIEZsaWNraXR5OiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcclxuICAvLyBhZGQgalF1ZXJ5XHJcbiAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcclxuICB9XHJcbiAgLy8gb3B0aW9uc1xyXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcclxuICB0aGlzLm9wdGlvbiggb3B0aW9ucyApO1xyXG5cclxuICAvLyBraWNrIHRoaW5ncyBvZmZcclxuICB0aGlzLl9jcmVhdGUoKTtcclxufVxyXG5cclxuRmxpY2tpdHkuZGVmYXVsdHMgPSB7XHJcbiAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcclxuICBjZWxsQWxpZ246ICdjZW50ZXInLFxyXG4gIC8vIGNlbGxTZWxlY3RvcjogdW5kZWZpbmVkLFxyXG4gIC8vIGNvbnRhaW46IGZhbHNlLFxyXG4gIGZyZWVTY3JvbGxGcmljdGlvbjogMC4wNzUsIC8vIGZyaWN0aW9uIHdoZW4gZnJlZS1zY3JvbGxpbmdcclxuICBmcmljdGlvbjogMC4yOCwgLy8gZnJpY3Rpb24gd2hlbiBzZWxlY3RpbmdcclxuICAvLyBpbml0aWFsSW5kZXg6IDAsXHJcbiAgcGVyY2VudFBvc2l0aW9uOiB0cnVlLFxyXG4gIHJlc2l6ZTogdHJ1ZSxcclxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxyXG4gIHNldEdhbGxlcnlTaXplOiB0cnVlXHJcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxyXG4gIC8vIHdyYXBBcm91bmQ6IGZhbHNlXHJcbn07XHJcblxyXG4vLyBoYXNoIG9mIG1ldGhvZHMgdHJpZ2dlcmVkIG9uIF9jcmVhdGUoKVxyXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzID0gW107XHJcblxyXG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxyXG51dGlscy5leHRlbmQoIEZsaWNraXR5LnByb3RvdHlwZSwgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSApO1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcclxuICB2YXIgaWQgPSB0aGlzLmd1aWQgPSArK0dVSUQ7XHJcbiAgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCA9IGlkOyAvLyBleHBhbmRvXHJcbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxyXG4gIC8vIGluaXRpYWwgcHJvcGVydGllc1xyXG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXHJcbiAgdGhpcy5yZXN0aW5nRnJhbWVzID0gMDtcclxuICAvLyBpbml0aWFsIHBoeXNpY3MgcHJvcGVydGllc1xyXG4gIHRoaXMueCA9IDA7XHJcbiAgdGhpcy52ZWxvY2l0eSA9IDA7XHJcbiAgdGhpcy5hY2NlbCA9IDA7XHJcbiAgdGhpcy5vcmlnaW5TaWRlID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcclxuICAvLyBjcmVhdGUgdmlld3BvcnQgJiBzbGlkZXJcclxuICB0aGlzLnZpZXdwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgdGhpcy52aWV3cG9ydC5jbGFzc05hbWUgPSAnZmxpY2tpdHktdmlld3BvcnQnO1xyXG4gIEZsaWNraXR5LnNldFVuc2VsZWN0YWJsZSggdGhpcy52aWV3cG9ydCApO1xyXG4gIHRoaXMuX2NyZWF0ZVNsaWRlcigpO1xyXG5cclxuICBpZiAoIHRoaXMub3B0aW9ucy5yZXNpemUgfHwgdGhpcy5vcHRpb25zLndhdGNoQ1NTICkge1xyXG4gICAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdyZXNpemUnLCB0aGlzICk7XHJcbiAgICB0aGlzLmlzUmVzaXplQm91bmQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBtZXRob2QgPSBGbGlja2l0eS5jcmVhdGVNZXRob2RzW2ldO1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oKTtcclxuICB9XHJcblxyXG4gIGlmICggdGhpcy5vcHRpb25zLndhdGNoQ1NTICkge1xyXG4gICAgdGhpcy53YXRjaENTUygpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLmFjdGl2YXRlKCk7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBzZXQgb3B0aW9uc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gKi9cclxuRmxpY2tpdHkucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoIHRoaXMuaXNBY3RpdmUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gIGNsYXNzaWUuYWRkKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eS1lbmFibGVkJyApO1xyXG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkge1xyXG4gICAgY2xhc3NpZS5hZGQoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5LXJ0bCcgKTtcclxuICB9XHJcblxyXG4gIHRoaXMuZ2V0U2l6ZSgpO1xyXG4gIC8vIG1vdmUgaW5pdGlhbCBjZWxsIGVsZW1lbnRzIHNvIHRoZXkgY2FuIGJlIGxvYWRlZCBhcyBjZWxsc1xyXG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcclxuICBtb3ZlRWxlbWVudHMoIGNlbGxFbGVtcywgdGhpcy5zbGlkZXIgKTtcclxuICB0aGlzLnZpZXdwb3J0LmFwcGVuZENoaWxkKCB0aGlzLnNsaWRlciApO1xyXG4gIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy52aWV3cG9ydCApO1xyXG4gIC8vIGdldCBjZWxscyBmcm9tIGNoaWxkcmVuXHJcbiAgdGhpcy5yZWxvYWRDZWxscygpO1xyXG5cclxuICBpZiAoIHRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ICkge1xyXG4gICAgLy8gYWxsb3cgZWxlbWVudCB0byBmb2N1c2FibGVcclxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XHJcbiAgICAvLyBsaXN0ZW4gZm9yIGtleSBwcmVzc2VzXHJcbiAgICBldmVudGllLmJpbmQoIHRoaXMuZWxlbWVudCwgJ2tleWRvd24nLCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmVtaXQoJ2FjdGl2YXRlJyk7XHJcblxyXG4gIHZhciBpbmRleDtcclxuICB2YXIgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcclxuICBpZiAoIHRoaXMuaXNJbml0QWN0aXZhdGVkICkge1xyXG4gICAgaW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXg7XHJcbiAgfSBlbHNlIGlmICggaW5pdGlhbEluZGV4ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICBpbmRleCA9IHRoaXMuY2VsbHNbIGluaXRpYWxJbmRleCBdID8gaW5pdGlhbEluZGV4IDogMDtcclxuICB9IGVsc2Uge1xyXG4gICAgaW5kZXggPSAwO1xyXG4gIH1cclxuICAvLyBzZWxlY3QgaW5zdGFudGx5XHJcbiAgdGhpcy5zZWxlY3QoIGluZGV4LCBmYWxzZSwgdHJ1ZSApO1xyXG4gIC8vIGZsYWcgZm9yIGluaXRpYWwgYWN0aXZhdGlvbiwgZm9yIHVzaW5nIGluaXRpYWxJbmRleFxyXG4gIHRoaXMuaXNJbml0QWN0aXZhdGVkID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIHNsaWRlciBwb3NpdGlvbnMgdGhlIGNlbGxzXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fY3JlYXRlU2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gc2xpZGVyIGVsZW1lbnQgZG9lcyBhbGwgdGhlIHBvc2l0aW9uaW5nXHJcbiAgdmFyIHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIHNsaWRlci5jbGFzc05hbWUgPSAnZmxpY2tpdHktc2xpZGVyJztcclxuICBzbGlkZXIuc3R5bGVbIHRoaXMub3JpZ2luU2lkZSBdID0gMDtcclxuICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fZmlsdGVyRmluZENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICByZXR1cm4gdXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzKCBlbGVtcywgdGhpcy5vcHRpb25zLmNlbGxTZWxlY3RvciApO1xyXG59O1xyXG5cclxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlblxyXG5GbGlja2l0eS5wcm90b3R5cGUucmVsb2FkQ2VsbHMgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICB0aGlzLmNlbGxzID0gdGhpcy5fbWFrZUNlbGxzKCB0aGlzLnNsaWRlci5jaGlsZHJlbiApO1xyXG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xyXG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XHJcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHR1cm4gZWxlbWVudHMgaW50byBGbGlja2l0eS5DZWxsc1xyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgRmxpY2tpdHkgQ2VsbHNcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fbWFrZUNlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzKCBlbGVtcyApO1xyXG5cclxuICAvLyBjcmVhdGUgbmV3IEZsaWNraXR5IGZvciBjb2xsZWN0aW9uXHJcbiAgdmFyIGNlbGxzID0gW107XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gY2VsbEVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBjZWxsRWxlbXNbaV07XHJcbiAgICB2YXIgY2VsbCA9IG5ldyBDZWxsKCBlbGVtLCB0aGlzICk7XHJcbiAgICBjZWxscy5wdXNoKCBjZWxsICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2VsbHM7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5jZWxsc1sgdGhpcy5jZWxscy5sZW5ndGggLSAxIF07XHJcbn07XHJcblxyXG4vLyBwb3NpdGlvbnMgYWxsIGNlbGxzXHJcbkZsaWNraXR5LnByb3RvdHlwZS5wb3NpdGlvbkNlbGxzID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gc2l6ZSBhbGwgY2VsbHNcclxuICB0aGlzLl9zaXplQ2VsbHMoIHRoaXMuY2VsbHMgKTtcclxuICAvLyBwb3NpdGlvbiBhbGwgY2VsbHNcclxuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCAwICk7XHJcbn07XHJcblxyXG4vKipcclxuICogcG9zaXRpb24gY2VydGFpbiBjZWxsc1xyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gd2hpY2ggY2VsbCB0byBzdGFydCB3aXRoXHJcbiAqL1xyXG5GbGlja2l0eS5wcm90b3R5cGUuX3Bvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbiggaW5kZXggKSB7XHJcbiAgaW5kZXggPSBpbmRleCB8fCAwO1xyXG4gIC8vIGFsc28gbWVhc3VyZSBtYXhDZWxsSGVpZ2h0XHJcbiAgLy8gc3RhcnQgMCBpZiBwb3NpdGlvbmluZyBhbGwgY2VsbHNcclxuICB0aGlzLm1heENlbGxIZWlnaHQgPSBpbmRleCA/IHRoaXMubWF4Q2VsbEhlaWdodCB8fCAwIDogMDtcclxuICB2YXIgY2VsbFggPSAwO1xyXG4gIC8vIGdldCBjZWxsWFxyXG4gIGlmICggaW5kZXggPiAwICkge1xyXG4gICAgdmFyIHN0YXJ0Q2VsbCA9IHRoaXMuY2VsbHNbIGluZGV4IC0gMSBdO1xyXG4gICAgY2VsbFggPSBzdGFydENlbGwueCArIHN0YXJ0Q2VsbC5zaXplLm91dGVyV2lkdGg7XHJcbiAgfVxyXG4gIHZhciBjZWxsO1xyXG4gIGZvciAoIHZhciBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aCwgaT1pbmRleDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgY2VsbCA9IHRoaXMuY2VsbHNbaV07XHJcbiAgICBjZWxsLnNldFBvc2l0aW9uKCBjZWxsWCApO1xyXG4gICAgY2VsbFggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XHJcbiAgICB0aGlzLm1heENlbGxIZWlnaHQgPSBNYXRoLm1heCggY2VsbC5zaXplLm91dGVySGVpZ2h0LCB0aGlzLm1heENlbGxIZWlnaHQgKTtcclxuICB9XHJcbiAgLy8ga2VlcCB0cmFjayBvZiBjZWxsWCBmb3Igd3JhcC1hcm91bmRcclxuICB0aGlzLnNsaWRlYWJsZVdpZHRoID0gY2VsbFg7XHJcbiAgLy8gY29udGFpbiBjZWxsIHRhcmdldFxyXG4gIHRoaXMuX2NvbnRhaW5DZWxscygpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGNlbGwuZ2V0U2l6ZSgpIG9uIG11bHRpcGxlIGNlbGxzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGNlbGxzXHJcbiAqL1xyXG5GbGlja2l0eS5wcm90b3R5cGUuX3NpemVDZWxscyA9IGZ1bmN0aW9uKCBjZWxscyApIHtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBjZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBjZWxsID0gY2VsbHNbaV07XHJcbiAgICBjZWxsLmdldFNpemUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBhbGlhcyBfaW5pdCBmb3IgalF1ZXJ5IHBsdWdpbiAuZmxpY2tpdHkoKVxyXG5GbGlja2l0eS5wcm90b3R5cGUuX2luaXQgPVxyXG5GbGlja2l0eS5wcm90b3R5cGUucmVwb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xyXG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG4gIHRoaXMuc2V0Q2VsbEFsaWduKCk7XHJcbiAgdGhpcy5jdXJzb3JQb3NpdGlvbiA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoICogdGhpcy5jZWxsQWxpZ247XHJcbn07XHJcblxyXG52YXIgY2VsbEFsaWduU2hvcnRoYW5kcyA9IHtcclxuICAvLyBjZWxsIGFsaWduLCB0aGVuIGJhc2VkIG9uIG9yaWdpbiBzaWRlXHJcbiAgY2VudGVyOiB7XHJcbiAgICBsZWZ0OiAwLjUsXHJcbiAgICByaWdodDogMC41XHJcbiAgfSxcclxuICBsZWZ0OiB7XHJcbiAgICBsZWZ0OiAwLFxyXG4gICAgcmlnaHQ6IDFcclxuICB9LFxyXG4gIHJpZ2h0OiB7XHJcbiAgICByaWdodDogMCxcclxuICAgIGxlZnQ6IDFcclxuICB9XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuc2V0Q2VsbEFsaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHNob3J0aGFuZCA9IGNlbGxBbGlnblNob3J0aGFuZHNbIHRoaXMub3B0aW9ucy5jZWxsQWxpZ24gXTtcclxuICB0aGlzLmNlbGxBbGlnbiA9IHNob3J0aGFuZCA/IHNob3J0aGFuZFsgdGhpcy5vcmlnaW5TaWRlIF0gOiB0aGlzLm9wdGlvbnMuY2VsbEFsaWduO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLnNldEdhbGxlcnlTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLm9wdGlvbnMuc2V0R2FsbGVyeVNpemUgKSB7XHJcbiAgICB0aGlzLnZpZXdwb3J0LnN0eWxlLmhlaWdodCA9IHRoaXMubWF4Q2VsbEhlaWdodCArICdweCc7XHJcbiAgfVxyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLl9nZXRXcmFwU2hpZnRDZWxscyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIG9ubHkgZm9yIHdyYXAtYXJvdW5kXHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIHVuc2hpZnQgcHJldmlvdXMgY2VsbHNcclxuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscyApO1xyXG4gIHRoaXMuX3Vuc2hpZnRDZWxscyggdGhpcy5hZnRlclNoaWZ0Q2VsbHMgKTtcclxuICAvLyBnZXQgYmVmb3JlIGNlbGxzXHJcbiAgLy8gaW5pdGlhbCBnYXBcclxuICB2YXIgZ2FwWCA9IHRoaXMuY3Vyc29yUG9zaXRpb247XHJcbiAgdmFyIGNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcclxuICB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggZ2FwWCwgY2VsbEluZGV4LCAtMSApO1xyXG4gIC8vIGdldCBhZnRlciBjZWxsc1xyXG4gIC8vIGVuZGluZyBnYXAgYmV0d2VlbiBsYXN0IGNlbGwgYW5kIGVuZCBvZiBnYWxsZXJ5IHZpZXdwb3J0XHJcbiAgZ2FwWCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcclxuICAvLyBzdGFydCBjbG9uaW5nIGF0IGZpcnN0IGNlbGwsIHdvcmtpbmcgZm9yd2FyZHNcclxuICB0aGlzLmFmdGVyU2hpZnRDZWxscyA9IHRoaXMuX2dldEdhcENlbGxzKCBnYXBYLCAwLCAxICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xyXG4gIC8vIGtlZXAgYWRkaW5nIGNlbGxzIHVudGlsIHRoZSBjb3ZlciB0aGUgaW5pdGlhbCBnYXBcclxuICB2YXIgY2VsbHMgPSBbXTtcclxuICB3aGlsZSAoIGdhcFggPiAwICkge1xyXG4gICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWyBjZWxsSW5kZXggXTtcclxuICAgIGlmICggIWNlbGwgKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgY2VsbHMucHVzaCggY2VsbCApO1xyXG4gICAgY2VsbEluZGV4ICs9IGluY3JlbWVudDtcclxuICAgIGdhcFggLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XHJcbiAgfVxyXG4gIHJldHVybiBjZWxscztcclxufTtcclxuXHJcbi8vIC0tLS0tIGNvbnRhaW4gLS0tLS0gLy9cclxuXHJcbi8vIGNvbnRhaW4gY2VsbCB0YXJnZXRzIHNvIG5vIGV4Y2VzcyBzbGlkaW5nXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fY29udGFpbkNlbGxzID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmNvbnRhaW4gfHwgdGhpcy5vcHRpb25zLndyYXBBcm91bmQgfHwgIXRoaXMuY2VsbHMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgc3RhcnRNYXJnaW4gPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xyXG4gIHZhciBlbmRNYXJnaW4gPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAnbWFyZ2luTGVmdCcgOiAnbWFyZ2luUmlnaHQnO1xyXG4gIHZhciBmaXJzdENlbGxTdGFydE1hcmdpbiA9IHRoaXMuY2VsbHNbMF0uc2l6ZVsgc3RhcnRNYXJnaW4gXTtcclxuICB2YXIgbGFzdENlbGwgPSB0aGlzLmdldExhc3RDZWxsKCk7XHJcbiAgdmFyIGNvbnRlbnRXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGggLSBsYXN0Q2VsbC5zaXplWyBlbmRNYXJnaW4gXTtcclxuICB2YXIgZW5kTGltaXQgPSBjb250ZW50V2lkdGggLSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqICggMSAtIHRoaXMuY2VsbEFsaWduICk7XHJcbiAgLy8gY29udGVudCBpcyBsZXNzIHRoYW4gZ2FsbGVyeSBzaXplXHJcbiAgdmFyIGlzQ29udGVudFNtYWxsZXIgPSBjb250ZW50V2lkdGggPCB0aGlzLnNpemUuaW5uZXJXaWR0aDtcclxuICAvLyBjb250YWluIGVhY2ggY2VsbCB0YXJnZXRcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzW2ldO1xyXG4gICAgLy8gcmVzZXQgZGVmYXVsdCB0YXJnZXRcclxuICAgIGNlbGwuc2V0RGVmYXVsdFRhcmdldCgpO1xyXG4gICAgaWYgKCBpc0NvbnRlbnRTbWFsbGVyICkge1xyXG4gICAgICAvLyBhbGwgY2VsbHMgZml0IGluc2lkZSBnYWxsZXJ5XHJcbiAgICAgIGNlbGwudGFyZ2V0ID0gY29udGVudFdpZHRoICogdGhpcy5jZWxsQWxpZ247XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBjb250YWluIHRvIGJvdW5kc1xyXG4gICAgICBjZWxsLnRhcmdldCA9IE1hdGgubWF4KCBjZWxsLnRhcmdldCwgdGhpcy5jdXJzb3JQb3NpdGlvbiArIGZpcnN0Q2VsbFN0YXJ0TWFyZ2luICk7XHJcbiAgICAgIGNlbGwudGFyZ2V0ID0gTWF0aC5taW4oIGNlbGwudGFyZ2V0LCBlbmRMaW1pdCApO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGVtaXRzIGV2ZW50cyB2aWEgZXZlbnRFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gbmFtZSBvZiBldmVudFxyXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIG9yaWdpbmFsIGV2ZW50XHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xyXG4gIHZhciBlbWl0QXJncyA9IFsgZXZlbnQgXS5jb25jYXQoIGFyZ3MgKTtcclxuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcclxuXHJcbiAgaWYgKCBqUXVlcnkgJiYgdGhpcy4kZWxlbWVudCApIHtcclxuICAgIGlmICggZXZlbnQgKSB7XHJcbiAgICAgIC8vIGNyZWF0ZSBqUXVlcnkgZXZlbnRcclxuICAgICAgdmFyICRldmVudCA9IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcclxuICAgICAgJGV2ZW50LnR5cGUgPSB0eXBlO1xyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoICRldmVudCwgYXJncyApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8ganVzdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudCBhdmFpbGFibGVcclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCB0eXBlLCBhcmdzICk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2VsZWN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBjZWxsXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXcmFwIC0gd2lsbCB3cmFwLWFyb3VuZCB0byBsYXN0L2ZpcnN0IGlmIGF0IHRoZSBlbmRcclxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSB3aWxsIGltbWVkaWF0ZWx5IHNldCBwb3NpdGlvbiBhdCBzZWxlY3RlZCBjZWxsXHJcbiAqL1xyXG5GbGlja2l0eS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oIGluZGV4LCBpc1dyYXAsIGlzSW5zdGFudCApIHtcclxuICBpZiAoICF0aGlzLmlzQWN0aXZlICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpbmRleCA9IHBhcnNlSW50KCBpbmRleCwgMTAgKTtcclxuICAvLyB3cmFwIHBvc2l0aW9uIHNvIHNsaWRlciBpcyB3aXRoaW4gbm9ybWFsIGFyZWFcclxuICB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XHJcbiAgaWYgKCB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiBsZW4gPiAxICkge1xyXG4gICAgaWYgKCBpbmRleCA8IDAgKSB7XHJcbiAgICAgIHRoaXMueCAtPSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xyXG4gICAgfSBlbHNlIGlmICggaW5kZXggPj0gbGVuICkge1xyXG4gICAgICB0aGlzLnggKz0gdGhpcy5zbGlkZWFibGVXaWR0aDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgfHwgaXNXcmFwICkge1xyXG4gICAgaW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW4gKTtcclxuICB9XHJcbiAgLy8gYmFpbCBpZiBpbnZhbGlkIGluZGV4XHJcbiAgaWYgKCAhdGhpcy5jZWxsc1sgaW5kZXggXSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XHJcbiAgdGhpcy5zZXRTZWxlY3RlZENlbGwoKTtcclxuICBpZiAoIGlzSW5zdGFudCApIHtcclxuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuc3RhcnRBbmltYXRpb24oKTtcclxuICB9XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCdjZWxsU2VsZWN0Jyk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwICkge1xyXG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAgKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oIGlzV3JhcCApIHtcclxuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICsgMSwgaXNXcmFwICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuc2V0U2VsZWN0ZWRDZWxsID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5fcmVtb3ZlU2VsZWN0ZWRDZWxsQ2xhc3MoKTtcclxuICB0aGlzLnNlbGVjdGVkQ2VsbCA9IHRoaXMuY2VsbHNbIHRoaXMuc2VsZWN0ZWRJbmRleCBdO1xyXG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZENlbGwuZWxlbWVudDtcclxuICBjbGFzc2llLmFkZCggdGhpcy5zZWxlY3RlZEVsZW1lbnQsICdpcy1zZWxlY3RlZCcgKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fcmVtb3ZlU2VsZWN0ZWRDZWxsQ2xhc3MgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoIHRoaXMuc2VsZWN0ZWRDZWxsICkge1xyXG4gICAgY2xhc3NpZS5yZW1vdmUoIHRoaXMuc2VsZWN0ZWRDZWxsLmVsZW1lbnQsICdpcy1zZWxlY3RlZCcgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXQgY2VsbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBnZXQgRmxpY2tpdHkuQ2VsbCwgZ2l2ZW4gYW4gRWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHJldHVybnMge0ZsaWNraXR5LkNlbGx9IGl0ZW1cclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5nZXRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgLy8gbG9vcCB0aHJvdWdoIGNlbGxzIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XHJcbiAgICBpZiAoIGNlbGwuZWxlbWVudCA9PSBlbGVtICkge1xyXG4gICAgICByZXR1cm4gY2VsbDtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGNvbGxlY3Rpb24gb2YgRmxpY2tpdHkuQ2VsbHMsIGdpdmVuIEVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7RWxlbWVudCwgQXJyYXksIE5vZGVMaXN0fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxzIC0gRmxpY2tpdHkuQ2VsbHNcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5nZXRDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICB2YXIgY2VsbHMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBlbGVtID0gZWxlbXNbaV07XHJcbiAgICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xyXG4gICAgaWYgKCBjZWxsICkge1xyXG4gICAgICBjZWxscy5wdXNoKCBjZWxsICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjZWxscztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxFbGVtc1xyXG4gKi9cclxuRmxpY2tpdHkucHJvdG90eXBlLmdldENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjZWxsRWxlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgY2VsbEVsZW1zLnB1c2goIHRoaXMuY2VsbHNbaV0uZWxlbWVudCApO1xyXG4gIH1cclxuICByZXR1cm4gY2VsbEVsZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBwYXJlbnQgY2VsbCBmcm9tIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEByZXR1cm5zIHtGbGlja2l0LkNlbGx9IGNlbGxcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5nZXRQYXJlbnRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgLy8gZmlyc3QgY2hlY2sgaWYgZWxlbSBpcyBjZWxsXHJcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcclxuICBpZiAoIGNlbGwgKSB7XHJcbiAgICByZXR1cm4gY2VsbDtcclxuICB9XHJcbiAgLy8gdHJ5IHRvIGdldCBwYXJlbnQgY2VsbCBlbGVtXHJcbiAgZWxlbSA9IHV0aWxzLmdldFBhcmVudCggZWxlbSwgJy5mbGlja2l0eS1zbGlkZXIgPiAqJyApO1xyXG4gIHJldHVybiB0aGlzLmdldENlbGwoIGVsZW0gKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgY2VsbHMgYWRqYWNlbnQgdG8gYSBjZWxsXHJcbiAqIEBwYXJhbSB7SW50ZWdlcn0gYWRqQ291bnQgLSBudW1iZXIgb2YgYWRqYWNlbnQgY2VsbHNcclxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIGNlbGwgdG8gc3RhcnRcclxuICogQHJldHVybnMge0FycmF5fSBjZWxscyAtIGFycmF5IG9mIEZsaWNraXR5LkNlbGxzXHJcbiAqL1xyXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggYWRqQ291bnQsIGluZGV4ICkge1xyXG4gIGlmICggIWFkakNvdW50ICkge1xyXG4gICAgcmV0dXJuIFsgdGhpcy5zZWxlY3RlZEVsZW1lbnQgXTtcclxuICB9XHJcbiAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5zZWxlY3RlZEluZGV4IDogaW5kZXg7XHJcblxyXG4gIHZhciBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDtcclxuICBpZiAoIDEgKyAoIGFkakNvdW50ICogMiApID49IGxlbiApIHtcclxuICAgIHJldHVybiB0aGlzLmdldENlbGxFbGVtZW50cygpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGNlbGxFbGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpID0gaW5kZXggLSBhZGpDb3VudDsgaSA8PSBpbmRleCArIGFkakNvdW50IDsgaSsrICkge1xyXG4gICAgdmFyIGNlbGxJbmRleCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpLCBsZW4gKSA6IGk7XHJcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbIGNlbGxJbmRleCBdO1xyXG4gICAgaWYgKCBjZWxsICkge1xyXG4gICAgICBjZWxsRWxlbXMucHVzaCggY2VsbC5lbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjZWxsRWxlbXM7XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZW1pdCgndWlDaGFuZ2UnKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5jaGlsZFVJUG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdjaGlsZFVJUG9pbnRlckRvd24nLCBbIGV2ZW50IF0gKTtcclxufTtcclxuXHJcbi8vIC0tLS0tIHJlc2l6ZSAtLS0tLSAvL1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy53YXRjaENTUygpO1xyXG4gIHRoaXMucmVzaXplKCk7XHJcbn07XHJcblxyXG51dGlscy5kZWJvdW5jZU1ldGhvZCggRmxpY2tpdHksICdvbnJlc2l6ZScsIDE1MCApO1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMuaXNBY3RpdmUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZ2V0U2l6ZSgpO1xyXG4gIC8vIHdyYXAgdmFsdWVzXHJcbiAgaWYgKCB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcclxuICAgIHRoaXMueCA9IHV0aWxzLm1vZHVsbyggdGhpcy54LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XHJcbiAgfVxyXG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xyXG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XHJcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xyXG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XHJcbn07XHJcblxyXG52YXIgc3VwcG9ydHNDb25kaXRpb25hbENTUyA9IEZsaWNraXR5LnN1cHBvcnRzQ29uZGl0aW9uYWxDU1MgPSAoIGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzdXBwb3J0cztcclxuICByZXR1cm4gZnVuY3Rpb24gY2hlY2tTdXBwb3J0KCkge1xyXG4gICAgaWYgKCBzdXBwb3J0cyAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICByZXR1cm4gc3VwcG9ydHM7XHJcbiAgICB9XHJcbiAgICBpZiAoICFnZXRDb21wdXRlZFN0eWxlICkge1xyXG4gICAgICBzdXBwb3J0cyA9IGZhbHNlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBzdHlsZSBib2R5J3MgOmFmdGVyIGFuZCBjaGVjayB0aGF0XHJcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgdmFyIGNzc1RleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnYm9keTphZnRlciB7IGNvbnRlbnQ6IFwiZm9vXCI7IGRpc3BsYXk6IG5vbmU7IH0nKTtcclxuICAgIHN0eWxlLmFwcGVuZENoaWxkKCBjc3NUZXh0ICk7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzdHlsZSApO1xyXG4gICAgdmFyIGFmdGVyQ29udGVudCA9IGdldENvbXB1dGVkU3R5bGUoIGRvY3VtZW50LmJvZHksICc6YWZ0ZXInICkuY29udGVudDtcclxuICAgIC8vIGNoZWNrIGlmIGFibGUgdG8gZ2V0IDphZnRlciBjb250ZW50XHJcbiAgICBzdXBwb3J0cyA9IGFmdGVyQ29udGVudC5pbmRleE9mKCdmb28nKSAhPSAtMTtcclxuICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoIHN0eWxlICk7XHJcbiAgICByZXR1cm4gc3VwcG9ydHM7XHJcbiAgfTtcclxufSkoKTtcclxuXHJcbi8vIHdhdGNoZXMgdGhlIDphZnRlciBwcm9wZXJ0eSwgYWN0aXZhdGVzL2RlYWN0aXZhdGVzXHJcbkZsaWNraXR5LnByb3RvdHlwZS53YXRjaENTUyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3YXRjaE9wdGlvbiA9IHRoaXMub3B0aW9ucy53YXRjaENTUztcclxuICBpZiAoICF3YXRjaE9wdGlvbiApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHN1cHBvcnRzID0gc3VwcG9ydHNDb25kaXRpb25hbENTUygpO1xyXG4gIGlmICggIXN1cHBvcnRzICkge1xyXG4gICAgLy8gYWN0aXZhdGUgaWYgd2F0Y2ggb3B0aW9uIGlzIGZhbGxiYWNrT25cclxuICAgIHZhciBtZXRob2QgPSB3YXRjaE9wdGlvbiA9PSAnZmFsbGJhY2tPbicgPyAnYWN0aXZhdGUnIDogJ2RlYWN0aXZhdGUnO1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBhZnRlckNvbnRlbnQgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQsICc6YWZ0ZXInICkuY29udGVudDtcclxuICAvLyBhY3RpdmF0ZSBpZiA6YWZ0ZXIgeyBjb250ZW50OiAnZmxpY2tpdHknIH1cclxuICBpZiAoIGFmdGVyQ29udGVudC5pbmRleE9mKCdmbGlja2l0eScpICE9IC0xICkge1xyXG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBrZXlkb3duIC0tLS0tIC8vXHJcblxyXG4vLyBnbyBwcmV2aW91cy9uZXh0IGlmIGxlZnQvcmlnaHQga2V5cyBwcmVzc2VkXHJcbkZsaWNraXR5LnByb3RvdHlwZS5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgLy8gb25seSB3b3JrIGlmIGVsZW1lbnQgaXMgaW4gZm9jdXNcclxuICBpZiAoICF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSB8fFxyXG4gICAgKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5lbGVtZW50ICkgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIGV2ZW50LmtleUNvZGUgPT0gMzcgKSB7XHJcbiAgICAvLyBnbyBsZWZ0XHJcbiAgICB2YXIgbGVmdE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICduZXh0JyA6ICdwcmV2aW91cyc7XHJcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XHJcbiAgICB0aGlzWyBsZWZ0TWV0aG9kIF0oKTtcclxuICB9IGVsc2UgaWYgKCBldmVudC5rZXlDb2RlID09IDM5ICkge1xyXG4gICAgLy8gZ28gcmlnaHRcclxuICAgIHZhciByaWdodE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICdwcmV2aW91cycgOiAnbmV4dCc7XHJcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XHJcbiAgICB0aGlzWyByaWdodE1ldGhvZCBdKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVzdHJveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZGVhY3RpdmF0ZSBhbGwgRmxpY2tpdHkgZnVuY3Rpb25hbGl0eSwgYnV0IGtlZXAgc3R1ZmYgYXZhaWxhYmxlXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY2xhc3NpZS5yZW1vdmUoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5LWVuYWJsZWQnICk7XHJcbiAgY2xhc3NpZS5yZW1vdmUoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5LXJ0bCcgKTtcclxuICAvLyBkZXN0cm95IGNlbGxzXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1tpXTtcclxuICAgIGNlbGwuZGVzdHJveSgpO1xyXG4gIH1cclxuICB0aGlzLl9yZW1vdmVTZWxlY3RlZENlbGxDbGFzcygpO1xyXG4gIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCggdGhpcy52aWV3cG9ydCApO1xyXG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcclxuICBtb3ZlRWxlbWVudHMoIHRoaXMuc2xpZGVyLmNoaWxkcmVuLCB0aGlzLmVsZW1lbnQgKTtcclxuICBpZiAoIHRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ICkge1xyXG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiSW5kZXgnKTtcclxuICAgIGV2ZW50aWUudW5iaW5kKCB0aGlzLmVsZW1lbnQsICdrZXlkb3duJywgdGhpcyApO1xyXG4gIH1cclxuICAvLyBzZXQgZmxhZ3NcclxuICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgdGhpcy5lbWl0KCdkZWFjdGl2YXRlJyk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xyXG4gIGlmICggdGhpcy5pc1Jlc2l6ZUJvdW5kICkge1xyXG4gICAgZXZlbnRpZS51bmJpbmQoIHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMgKTtcclxuICB9XHJcbiAgdGhpcy5lbWl0KCdkZXN0cm95Jyk7XHJcbiAgaWYgKCBqUXVlcnkgJiYgdGhpcy4kZWxlbWVudCApIHtcclxuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eScgKTtcclxuICB9XHJcbiAgZGVsZXRlIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQ7XHJcbiAgZGVsZXRlIGluc3RhbmNlc1sgdGhpcy5ndWlkIF07XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkucHJvdG90eXBlLCBhbmltYXRlUHJvdG90eXBlICk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBleHRyYXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIHF1aWNrIGNoZWNrIGZvciBJRThcclxudmFyIGlzSUU4ID0gJ2F0dGFjaEV2ZW50JyBpbiB3aW5kb3c7XHJcblxyXG5GbGlja2l0eS5zZXRVbnNlbGVjdGFibGUgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBpZiAoICFpc0lFOCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gSUU4IHByZXZlbnQgY2hpbGQgZnJvbSBjaGFuZ2luZyBmb2N1cyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNzUyNTIyMy8xODIxODNcclxuICBlbGVtLnNldEF0dHJpYnV0ZSggJ3Vuc2VsZWN0YWJsZScsICdvbicgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcmV0dXJucyB7RmxpY2tpdHl9XHJcbiAqL1xyXG5GbGlja2l0eS5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xyXG4gIHZhciBpZCA9IGVsZW0gJiYgZWxlbS5mbGlja2l0eUdVSUQ7XHJcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcclxufTtcclxuXHJcbnV0aWxzLmh0bWxJbml0KCBGbGlja2l0eSwgJ2ZsaWNraXR5JyApO1xyXG5cclxuaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XHJcbiAgalF1ZXJ5LmJyaWRnZXQoICdmbGlja2l0eScsIEZsaWNraXR5ICk7XHJcbn1cclxuXHJcbkZsaWNraXR5LkNlbGwgPSBDZWxsO1xyXG5cclxucmV0dXJuIEZsaWNraXR5O1xyXG5cclxufSkpO1xyXG5cclxuLyohXHJcbiAqIFVuaXBvaW50ZXIgdjEuMS4wXHJcbiAqIGJhc2UgY2xhc3MgZm9yIGRvaW5nIG9uZSB0aGluZyB3aXRoIHBvaW50ZXIgZXZlbnRcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcicsW1xyXG4gICAgICAnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsXHJcbiAgICAgICdldmVudGllL2V2ZW50aWUnXHJcbiAgICBdLCBmdW5jdGlvbiggRXZlbnRFbWl0dGVyLCBldmVudGllICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxyXG4gICAgICByZXF1aXJlKCdldmVudGllJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuVW5pcG9pbnRlciA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmV2ZW50aWVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2ZW50RW1pdHRlciwgZXZlbnRpZSApIHtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbm9vcCgpIHt9XHJcblxyXG5mdW5jdGlvbiBVbmlwb2ludGVyKCkge31cclxuXHJcbi8vIGluaGVyaXQgRXZlbnRFbWl0dGVyXHJcblVuaXBvaW50ZXIucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUuYmluZFN0YXJ0RXZlbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICB0aGlzLl9iaW5kU3RhcnRFdmVudCggZWxlbSwgdHJ1ZSApO1xyXG59O1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUudW5iaW5kU3RhcnRFdmVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCBmYWxzZSApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHdvcmtzIGFzIHVuYmluZGVyLCBhcyB5b3UgY2FuIC5fYmluZFN0YXJ0KCBmYWxzZSApIHRvIHVuYmluZFxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQmluZCAtIHdpbGwgdW5iaW5kIGlmIGZhbHNleVxyXG4gKi9cclxuVW5pcG9pbnRlci5wcm90b3R5cGUuX2JpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIGlzQmluZCApIHtcclxuICAvLyBtdW5nZSBpc0JpbmQsIGRlZmF1bHQgdG8gdHJ1ZVxyXG4gIGlzQmluZCA9IGlzQmluZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhaXNCaW5kO1xyXG4gIHZhciBiaW5kTWV0aG9kID0gaXNCaW5kID8gJ2JpbmQnIDogJ3VuYmluZCc7XHJcblxyXG4gIGlmICggd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCApIHtcclxuICAgIC8vIFczQyBQb2ludGVyIEV2ZW50cywgSUUxMS4gU2VlIGh0dHBzOi8vY29kZXJ3YWxsLmNvbS9wL21mcmVjYVxyXG4gICAgZXZlbnRpZVsgYmluZE1ldGhvZCBdKCBlbGVtLCAncG9pbnRlcmRvd24nLCB0aGlzICk7XHJcbiAgfSBlbHNlIGlmICggd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkICkge1xyXG4gICAgLy8gSUUxMCBQb2ludGVyIEV2ZW50c1xyXG4gICAgZXZlbnRpZVsgYmluZE1ldGhvZCBdKCBlbGVtLCAnTVNQb2ludGVyRG93bicsIHRoaXMgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gbGlzdGVuIGZvciBib3RoLCBmb3IgZGV2aWNlcyBsaWtlIENocm9tZSBQaXhlbFxyXG4gICAgZXZlbnRpZVsgYmluZE1ldGhvZCBdKCBlbGVtLCAnbW91c2Vkb3duJywgdGhpcyApO1xyXG4gICAgZXZlbnRpZVsgYmluZE1ldGhvZCBdKCBlbGVtLCAndG91Y2hzdGFydCcsIHRoaXMgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyB0cmlnZ2VyIGhhbmRsZXIgbWV0aG9kcyBmb3IgZXZlbnRzXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcclxuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gcmV0dXJucyB0aGUgdG91Y2ggdGhhdCB3ZSdyZSBrZWVwaW5nIHRyYWNrIG9mXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLmdldFRvdWNoID0gZnVuY3Rpb24oIHRvdWNoZXMgKSB7XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciB0b3VjaCA9IHRvdWNoZXNbaV07XHJcbiAgICBpZiAoIHRvdWNoLmlkZW50aWZpZXIgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcclxuICAgICAgcmV0dXJuIHRvdWNoO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXHJcblxyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICAvLyBkaXNtaXNzIGNsaWNrcyBmcm9tIHJpZ2h0IG9yIG1pZGRsZSBidXR0b25zXHJcbiAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcclxuICBpZiAoIGJ1dHRvbiAmJiAoIGJ1dHRvbiAhPT0gMCAmJiBidXR0b24gIT09IDEgKSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdGhpcy5fcG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xyXG59O1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcclxufTtcclxuXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9uTVNQb2ludGVyRG93biA9XHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9ucG9pbnRlcmRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5fcG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHBvaW50ZXIgc3RhcnRcclxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcclxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxyXG4gKi9cclxuVW5pcG9pbnRlci5wcm90b3R5cGUuX3BvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIC8vIGRpc21pc3Mgb3RoZXIgcG9pbnRlcnNcclxuICBpZiAoIHRoaXMuaXNQb2ludGVyRG93biApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IHRydWU7XHJcbiAgLy8gc2F2ZSBwb2ludGVyIGlkZW50aWZpZXIgdG8gbWF0Y2ggdXAgdG91Y2ggZXZlbnRzXHJcbiAgdGhpcy5wb2ludGVySWRlbnRpZmllciA9IHBvaW50ZXIucG9pbnRlcklkICE9PSB1bmRlZmluZWQgP1xyXG4gICAgLy8gcG9pbnRlcklkIGZvciBwb2ludGVyIGV2ZW50cywgdG91Y2guaW5kZW50aWZpZXIgZm9yIHRvdWNoIGV2ZW50c1xyXG4gICAgcG9pbnRlci5wb2ludGVySWQgOiBwb2ludGVyLmlkZW50aWZpZXI7XHJcblxyXG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBwb2ludGVyICk7XHJcbn07XHJcblxyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcclxuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcclxufTtcclxuXHJcbi8vIGhhc2ggb2YgZXZlbnRzIHRvIGJlIGJvdW5kIGFmdGVyIHN0YXJ0IGV2ZW50XHJcbnZhciBwb3N0U3RhcnRFdmVudHMgPSB7XHJcbiAgbW91c2Vkb3duOiBbICdtb3VzZW1vdmUnLCAnbW91c2V1cCcgXSxcclxuICB0b3VjaHN0YXJ0OiBbICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnIF0sXHJcbiAgcG9pbnRlcmRvd246IFsgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCcsICdwb2ludGVyY2FuY2VsJyBdLFxyXG4gIE1TUG9pbnRlckRvd246IFsgJ01TUG9pbnRlck1vdmUnLCAnTVNQb2ludGVyVXAnLCAnTVNQb2ludGVyQ2FuY2VsJyBdXHJcbn07XHJcblxyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5fYmluZFBvc3RTdGFydEV2ZW50cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICBpZiAoICFldmVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gZ2V0IHByb3BlciBldmVudHMgdG8gbWF0Y2ggc3RhcnQgZXZlbnRcclxuICB2YXIgZXZlbnRzID0gcG9zdFN0YXJ0RXZlbnRzWyBldmVudC50eXBlIF07XHJcbiAgLy8gSUU4IG5lZWRzIHRvIGJlIGJvdW5kIHRvIGRvY3VtZW50XHJcbiAgdmFyIG5vZGUgPSBldmVudC5wcmV2ZW50RGVmYXVsdCA/IHdpbmRvdyA6IGRvY3VtZW50O1xyXG4gIC8vIGJpbmQgZXZlbnRzIHRvIG5vZGVcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBldmVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZXZudCA9IGV2ZW50c1tpXTtcclxuICAgIGV2ZW50aWUuYmluZCggbm9kZSwgZXZudCwgdGhpcyApO1xyXG4gIH1cclxuICAvLyBzYXZlIHRoZXNlIGFyZ3VtZW50c1xyXG4gIHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyA9IHtcclxuICAgIGV2ZW50czogZXZlbnRzLFxyXG4gICAgbm9kZTogbm9kZVxyXG4gIH07XHJcbn07XHJcblxyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5fdW5iaW5kUG9zdFN0YXJ0RXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGFyZ3MgPSB0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHM7XHJcbiAgLy8gSUU4IGNhbiB0cmlnZ2VyIGRyYWdFbmQgdHdpY2UsIGNoZWNrIGZvciBfYm91bmRFdmVudHNcclxuICBpZiAoICFhcmdzIHx8ICFhcmdzLmV2ZW50cyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGFyZ3MuZXZlbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGV2ZW50ID0gYXJncy5ldmVudHNbaV07XHJcbiAgICBldmVudGllLnVuYmluZCggYXJncy5ub2RlLCBldmVudCwgdGhpcyApO1xyXG4gIH1cclxuICBkZWxldGUgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gbW92ZSBldmVudCAtLS0tLSAvL1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUub25tb3VzZW1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xyXG59O1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUub25NU1BvaW50ZXJNb3ZlID1cclxuVW5pcG9pbnRlci5wcm90b3R5cGUub25wb2ludGVybW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICBpZiAoIGV2ZW50LnBvaW50ZXJJZCA9PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xyXG4gICAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciB0b3VjaCA9IHRoaXMuZ2V0VG91Y2goIGV2ZW50LmNoYW5nZWRUb3VjaGVzICk7XHJcbiAgaWYgKCB0b3VjaCApIHtcclxuICAgIHRoaXMuX3BvaW50ZXJNb3ZlKCBldmVudCwgdG91Y2ggKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogcG9pbnRlciBtb3ZlXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcclxuICogQHByaXZhdGVcclxuICovXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLl9wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcclxuICB0aGlzLnBvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xyXG59O1xyXG5cclxuLy8gcHVibGljXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlck1vdmUnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcclxufTtcclxuXHJcbi8vIC0tLS0tIGVuZCBldmVudCAtLS0tLSAvL1xyXG5cclxuXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9ubW91c2V1cCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xyXG59O1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUub25NU1BvaW50ZXJVcCA9XHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9ucG9pbnRlcnVwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIGlmICggZXZlbnQucG9pbnRlcklkID09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XHJcbiAgICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9udG91Y2hlbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcclxuICBpZiAoIHRvdWNoICkge1xyXG4gICAgdGhpcy5fcG9pbnRlclVwKCBldmVudCwgdG91Y2ggKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogcG9pbnRlciB1cFxyXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxyXG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5fcG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XHJcbiAgdGhpcy5wb2ludGVyVXAoIGV2ZW50LCBwb2ludGVyICk7XHJcbn07XHJcblxyXG4vLyBwdWJsaWNcclxuVW5pcG9pbnRlci5wcm90b3R5cGUucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBwb2ludGVyIGRvbmUgLS0tLS0gLy9cclxuXHJcbi8vIHRyaWdnZXJlZCBvbiBwb2ludGVyIHVwICYgcG9pbnRlciBjYW5jZWxcclxuVW5pcG9pbnRlci5wcm90b3R5cGUuX3BvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gcmVzZXQgcHJvcGVydGllc1xyXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IGZhbHNlO1xyXG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyO1xyXG4gIC8vIHJlbW92ZSBldmVudHNcclxuICB0aGlzLl91bmJpbmRQb3N0U3RhcnRFdmVudHMoKTtcclxuICB0aGlzLnBvaW50ZXJEb25lKCk7XHJcbn07XHJcblxyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5wb2ludGVyRG9uZSA9IG5vb3A7XHJcblxyXG4vLyAtLS0tLSBwb2ludGVyIGNhbmNlbCAtLS0tLSAvL1xyXG5cclxuVW5pcG9pbnRlci5wcm90b3R5cGUub25NU1BvaW50ZXJDYW5jZWwgPVxyXG5Vbmlwb2ludGVyLnByb3RvdHlwZS5vbnBvaW50ZXJjYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcclxuICAgIHRoaXMuX3BvaW50ZXJDYW5jZWwoIGV2ZW50LCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLm9udG91Y2hjYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcclxuICBpZiAoIHRvdWNoICkge1xyXG4gICAgdGhpcy5fcG9pbnRlckNhbmNlbCggZXZlbnQsIHRvdWNoICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHBvaW50ZXIgY2FuY2VsXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcclxuICogQHByaXZhdGVcclxuICovXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLl9wb2ludGVyQ2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XHJcbiAgdGhpcy5wb2ludGVyQ2FuY2VsKCBldmVudCwgcG9pbnRlciApO1xyXG59O1xyXG5cclxuLy8gcHVibGljXHJcblVuaXBvaW50ZXIucHJvdG90eXBlLnBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyQ2FuY2VsJywgWyBldmVudCwgcG9pbnRlciBdICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbi8vIHV0aWxpdHkgZnVuY3Rpb24gZm9yIGdldHRpbmcgeC95IGNvb3JpZGluYXRlcyBmcm9tIGV2ZW50LCBiZWNhdXNlIElFOFxyXG5Vbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludCA9IGZ1bmN0aW9uKCBwb2ludGVyICkge1xyXG4gIHJldHVybiB7XHJcbiAgICB4OiBwb2ludGVyLnBhZ2VYICE9PSB1bmRlZmluZWQgPyBwb2ludGVyLnBhZ2VYIDogcG9pbnRlci5jbGllbnRYLFxyXG4gICAgeTogcG9pbnRlci5wYWdlWSAhPT0gdW5kZWZpbmVkID8gcG9pbnRlci5wYWdlWSA6IHBvaW50ZXIuY2xpZW50WVxyXG4gIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbnJldHVybiBVbmlwb2ludGVyO1xyXG5cclxufSkpO1xyXG5cclxuLyohXHJcbiAqIFVuaWRyYWdnZXIgdjEuMS42XHJcbiAqIERyYWdnYWJsZSBiYXNlIGNsYXNzXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ3VuaWRyYWdnZXIvdW5pZHJhZ2dlcicsW1xyXG4gICAgICAnZXZlbnRpZS9ldmVudGllJyxcclxuICAgICAgJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcidcclxuICAgIF0sIGZ1bmN0aW9uKCBldmVudGllLCBVbmlwb2ludGVyICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBVbmlwb2ludGVyICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxyXG4gICAgICByZXF1aXJlKCd1bmlwb2ludGVyJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuVW5pZHJhZ2dlciA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LmV2ZW50aWUsXHJcbiAgICAgIHdpbmRvdy5Vbmlwb2ludGVyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBVbmlwb2ludGVyICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbmZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxuLy8gaGFuZGxlIElFOCBwcmV2ZW50IGRlZmF1bHRcclxuZnVuY3Rpb24gcHJldmVudERlZmF1bHRFdmVudCggZXZlbnQgKSB7XHJcbiAgaWYgKCBldmVudC5wcmV2ZW50RGVmYXVsdCApIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBVbmlkcmFnZ2VyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBVbmlkcmFnZ2VyKCkge31cclxuXHJcbi8vIGluaGVyaXQgVW5pcG9pbnRlciAmIEV2ZW50RW1pdHRlclxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZSA9IG5ldyBVbmlwb2ludGVyKCk7XHJcblxyXG4vLyAtLS0tLSBiaW5kIHN0YXJ0IC0tLS0tIC8vXHJcblxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuX2JpbmRIYW5kbGVzKCB0cnVlICk7XHJcbn07XHJcblxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS51bmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5fYmluZEhhbmRsZXMoIGZhbHNlICk7XHJcbn07XHJcblxyXG52YXIgbmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcjtcclxuLyoqXHJcbiAqIHdvcmtzIGFzIHVuYmluZGVyLCBhcyB5b3UgY2FuIC5iaW5kSGFuZGxlcyggZmFsc2UgKSB0byB1bmJpbmRcclxuICogQHBhcmFtIHtCb29sZWFufSBpc0JpbmQgLSB3aWxsIHVuYmluZCBpZiBmYWxzZXlcclxuICovXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLl9iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCBpc0JpbmQgKSB7XHJcbiAgLy8gbXVuZ2UgaXNCaW5kLCBkZWZhdWx0IHRvIHRydWVcclxuICBpc0JpbmQgPSBpc0JpbmQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIWlzQmluZDtcclxuICAvLyBleHRyYSBiaW5kIGxvZ2ljXHJcbiAgdmFyIGJpbmRlckV4dHJhO1xyXG4gIGlmICggbmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkICkge1xyXG4gICAgYmluZGVyRXh0cmEgPSBmdW5jdGlvbiggaGFuZGxlICkge1xyXG4gICAgICAvLyBkaXNhYmxlIHNjcm9sbGluZyBvbiB0aGUgZWxlbWVudFxyXG4gICAgICBoYW5kbGUuc3R5bGUudG91Y2hBY3Rpb24gPSBpc0JpbmQgPyAnbm9uZScgOiAnJztcclxuICAgIH07XHJcbiAgfSBlbHNlIGlmICggbmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgKSB7XHJcbiAgICBiaW5kZXJFeHRyYSA9IGZ1bmN0aW9uKCBoYW5kbGUgKSB7XHJcbiAgICAgIC8vIGRpc2FibGUgc2Nyb2xsaW5nIG9uIHRoZSBlbGVtZW50XHJcbiAgICAgIGhhbmRsZS5zdHlsZS5tc1RvdWNoQWN0aW9uID0gaXNCaW5kID8gJ25vbmUnIDogJyc7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBiaW5kZXJFeHRyYSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBUT0RPIHJlLWVuYWJsZSBpbWcub25kcmFnc3RhcnQgd2hlbiB1bmJpbmRpbmdcclxuICAgICAgaWYgKCBpc0JpbmQgKSB7XHJcbiAgICAgICAgZGlzYWJsZUltZ09uZHJhZ3N0YXJ0KCBoYW5kbGUgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgLy8gYmluZCBlYWNoIGhhbmRsZVxyXG4gIHZhciBiaW5kTWV0aG9kID0gaXNCaW5kID8gJ2JpbmQnIDogJ3VuYmluZCc7XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5oYW5kbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuaGFuZGxlc1tpXTtcclxuICAgIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBoYW5kbGUsIGlzQmluZCApO1xyXG4gICAgYmluZGVyRXh0cmEoIGhhbmRsZSApO1xyXG4gICAgZXZlbnRpZVsgYmluZE1ldGhvZCBdKCBoYW5kbGUsICdjbGljaycsIHRoaXMgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyByZW1vdmUgZGVmYXVsdCBkcmFnZ2luZyBpbnRlcmFjdGlvbiBvbiBhbGwgaW1hZ2VzIGluIElFOFxyXG4vLyBJRTggZG9lcyBpdHMgb3duIGRyYWcgdGhpbmcgb24gaW1hZ2VzLCB3aGljaCBtZXNzZXMgc3R1ZmYgdXBcclxuXHJcbmZ1bmN0aW9uIG5vRHJhZ1N0YXJ0KCkge1xyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLy8gVE9ETyByZXBsYWNlIHRoaXMgd2l0aCBhIElFOCB0ZXN0XHJcbnZhciBpc0lFOCA9ICdhdHRhY2hFdmVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuLy8gSUU4IG9ubHlcclxudmFyIGRpc2FibGVJbWdPbmRyYWdzdGFydCA9ICFpc0lFOCA/IG5vb3AgOiBmdW5jdGlvbiggaGFuZGxlICkge1xyXG5cclxuICBpZiAoIGhhbmRsZS5ub2RlTmFtZSA9PSAnSU1HJyApIHtcclxuICAgIGhhbmRsZS5vbmRyYWdzdGFydCA9IG5vRHJhZ1N0YXJ0O1xyXG4gIH1cclxuXHJcbiAgdmFyIGltYWdlcyA9IGhhbmRsZS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpbWFnZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaW1nID0gaW1hZ2VzW2ldO1xyXG4gICAgaW1nLm9uZHJhZ3N0YXJ0ID0gbm9EcmFnU3RhcnQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gc3RhcnQgZXZlbnQgLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBwb2ludGVyIHN0YXJ0XHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcclxuICovXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIC8vIGRpc21pc3MgcmFuZ2Ugc2xpZGVyc1xyXG4gIGlmICggZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09ICdJTlBVVCcgJiYgZXZlbnQudGFyZ2V0LnR5cGUgPT0gJ3JhbmdlJyApIHtcclxuICAgIC8vIHJlc2V0IHBvaW50ZXJEb3duIGxvZ2ljXHJcbiAgICB0aGlzLmlzUG9pbnRlckRvd24gPSBmYWxzZTtcclxuICAgIGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fZHJhZ1BvaW50ZXJEb3duKCBldmVudCwgcG9pbnRlciApO1xyXG4gIC8vIGtsdWRnZSB0byBibHVyIGZvY3VzZWQgaW5wdXRzIGluIGRyYWdnZXJcclxuICB2YXIgZm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcbiAgaWYgKCBmb2N1c2VkICYmIGZvY3VzZWQuYmx1ciApIHtcclxuICAgIGZvY3VzZWQuYmx1cigpO1xyXG4gIH1cclxuICAvLyBiaW5kIG1vdmUgYW5kIGVuZCBldmVudHNcclxuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xyXG4gIC8vIHRyYWNrIHNjcm9sbGluZ1xyXG4gIHRoaXMucG9pbnRlckRvd25TY3JvbGwgPSBVbmlkcmFnZ2VyLmdldFNjcm9sbFBvc2l0aW9uKCk7XHJcbiAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdzY3JvbGwnLCB0aGlzICk7XHJcblxyXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcclxufTtcclxuXHJcbi8vIGJhc2UgcG9pbnRlciBkb3duIGxvZ2ljXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLl9kcmFnUG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgLy8gdHJhY2sgdG8gc2VlIHdoZW4gZHJhZ2dpbmcgc3RhcnRzXHJcbiAgdGhpcy5wb2ludGVyRG93blBvaW50ID0gVW5pcG9pbnRlci5nZXRQb2ludGVyUG9pbnQoIHBvaW50ZXIgKTtcclxuXHJcbiAgLy8gcHJldmVudCBkZWZhdWx0LCB1bmxlc3MgdG91Y2hzdGFydCBvciA8c2VsZWN0PlxyXG4gIHZhciBpc1RvdWNoc3RhcnQgPSBldmVudC50eXBlID09ICd0b3VjaHN0YXJ0JztcclxuICB2YXIgdGFyZ2V0Tm9kZU5hbWUgPSBldmVudC50YXJnZXQubm9kZU5hbWU7XHJcbiAgaWYgKCAhaXNUb3VjaHN0YXJ0ICYmIHRhcmdldE5vZGVOYW1lICE9ICdTRUxFQ1QnICkge1xyXG4gICAgcHJldmVudERlZmF1bHRFdmVudCggZXZlbnQgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtb3ZlIGV2ZW50IC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogZHJhZyBtb3ZlXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcclxuICovXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHZhciBtb3ZlVmVjdG9yID0gdGhpcy5fZHJhZ1BvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlck1vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcclxuICB0aGlzLl9kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcclxufTtcclxuXHJcbi8vIGJhc2UgcG9pbnRlciBtb3ZlIGxvZ2ljXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLl9kcmFnUG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgdmFyIG1vdmVQb2ludCA9IFVuaXBvaW50ZXIuZ2V0UG9pbnRlclBvaW50KCBwb2ludGVyICk7XHJcbiAgdmFyIG1vdmVWZWN0b3IgPSB7XHJcbiAgICB4OiBtb3ZlUG9pbnQueCAtIHRoaXMucG9pbnRlckRvd25Qb2ludC54LFxyXG4gICAgeTogbW92ZVBvaW50LnkgLSB0aGlzLnBvaW50ZXJEb3duUG9pbnQueVxyXG4gIH07XHJcbiAgLy8gc3RhcnQgZHJhZyBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcclxuICBpZiAoICF0aGlzLmlzRHJhZ2dpbmcgJiYgdGhpcy5oYXNEcmFnU3RhcnRlZCggbW92ZVZlY3RvciApICkge1xyXG4gICAgdGhpcy5fZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xyXG4gIH1cclxuICByZXR1cm4gbW92ZVZlY3RvcjtcclxufTtcclxuXHJcbi8vIGNvbmRpdGlvbiBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcclxuVW5pZHJhZ2dlci5wcm90b3R5cGUuaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcclxuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gMyB8fCBNYXRoLmFicyggbW92ZVZlY3Rvci55ICkgPiAzO1xyXG59O1xyXG5cclxuXHJcbi8vIC0tLS0tIGVuZCBldmVudCAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIHBvaW50ZXIgdXBcclxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcclxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxyXG4gKi9cclxuVW5pZHJhZ2dlci5wcm90b3R5cGUucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XHJcbiAgdGhpcy5fZHJhZ1BvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcclxufTtcclxuXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLl9kcmFnUG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIGlmICggdGhpcy5pc0RyYWdnaW5nICkge1xyXG4gICAgdGhpcy5fZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gcG9pbnRlciBkaWRuJ3QgbW92ZSBlbm91Z2ggZm9yIGRyYWcgdG8gc3RhcnRcclxuICAgIHRoaXMuX3N0YXRpY0NsaWNrKCBldmVudCwgcG9pbnRlciApO1xyXG4gIH1cclxufTtcclxuXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLnBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgZXZlbnRpZS51bmJpbmQoIHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMgKTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGRyYWdTdGFydFxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5fZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XHJcbiAgdGhpcy5kcmFnU3RhcnRQb2ludCA9IFVuaWRyYWdnZXIuZ2V0UG9pbnRlclBvaW50KCBwb2ludGVyICk7XHJcbiAgLy8gcHJldmVudCBjbGlja3NcclxuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7XHJcblxyXG4gIHRoaXMuZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xyXG59O1xyXG5cclxuVW5pZHJhZ2dlci5wcm90b3R5cGUuZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ1N0YXJ0JywgWyBldmVudCwgcG9pbnRlciBdICk7XHJcbn07XHJcblxyXG4vLyBkcmFnTW92ZVxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5fZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XHJcbiAgLy8gZG8gbm90IGRyYWcgaWYgbm90IGRyYWdnaW5nIHlldFxyXG4gIGlmICggIXRoaXMuaXNEcmFnZ2luZyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuZHJhZ01vdmUoIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICk7XHJcbn07XHJcblxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcclxuICBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ01vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcclxufTtcclxuXHJcbi8vIGRyYWdFbmRcclxuVW5pZHJhZ2dlci5wcm90b3R5cGUuX2RyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgLy8gc2V0IGZsYWdzXHJcbiAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgLy8gcmUtZW5hYmxlIGNsaWNraW5nIGFzeW5jXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgIGRlbGV0ZSBfdGhpcy5pc1ByZXZlbnRpbmdDbGlja3M7XHJcbiAgfSk7XHJcblxyXG4gIHRoaXMuZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcclxufTtcclxuXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdkcmFnRW5kJywgWyBldmVudCwgcG9pbnRlciBdICk7XHJcbn07XHJcblxyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5wb2ludGVyRG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gIGV2ZW50aWUudW5iaW5kKCB3aW5kb3csICdzY3JvbGwnLCB0aGlzICk7XHJcbiAgZGVsZXRlIHRoaXMucG9pbnRlckRvd25TY3JvbGw7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBvbmNsaWNrIC0tLS0tIC8vXHJcblxyXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xyXG5VbmlkcmFnZ2VyLnByb3RvdHlwZS5vbmNsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIGlmICggdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgKSB7XHJcbiAgICBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIHN0YXRpY0NsaWNrIC0tLS0tIC8vXHJcblxyXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XHJcblVuaWRyYWdnZXIucHJvdG90eXBlLl9zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcclxuICAvLyBpZ25vcmUgZW11bGF0ZWQgbW91c2UgdXAgY2xpY2tzXHJcbiAgaWYgKCB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICYmIGV2ZW50LnR5cGUgPT0gJ21vdXNldXAnICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gYWxsb3cgY2xpY2sgaW4gPGlucHV0PnMgYW5kIDx0ZXh0YXJlYT5zXHJcbiAgdmFyIG5vZGVOYW1lID0gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lO1xyXG4gIGlmICggbm9kZU5hbWUgPT0gJ0lOUFVUJyB8fCBub2RlTmFtZSA9PSAnVEVYVEFSRUEnICkge1xyXG4gICAgZXZlbnQudGFyZ2V0LmZvY3VzKCk7XHJcbiAgfVxyXG4gIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XHJcblxyXG4gIC8vIHNldCBmbGFnIGZvciBlbXVsYXRlZCBjbGlja3MgMzAwbXMgYWZ0ZXIgdG91Y2hlbmRcclxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ21vdXNldXAnICkge1xyXG4gICAgdGhpcy5pc0lnbm9yaW5nTW91c2VVcCA9IHRydWU7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgLy8gcmVzZXQgZmxhZyBhZnRlciAzMDBtc1xyXG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRlbGV0ZSBfdGhpcy5pc0lnbm9yaW5nTW91c2VVcDtcclxuICAgIH0sIDQwMCApO1xyXG4gIH1cclxufTtcclxuXHJcblVuaWRyYWdnZXIucHJvdG90eXBlLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAnc3RhdGljQ2xpY2snLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcclxufTtcclxuXHJcbi8vIC0tLS0tIHNjcm9sbCAtLS0tLSAvL1xyXG5cclxuVW5pZHJhZ2dlci5wcm90b3R5cGUub25zY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc2Nyb2xsID0gVW5pZHJhZ2dlci5nZXRTY3JvbGxQb3NpdGlvbigpO1xyXG4gIHZhciBzY3JvbGxNb3ZlWCA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueCAtIHNjcm9sbC54O1xyXG4gIHZhciBzY3JvbGxNb3ZlWSA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueSAtIHNjcm9sbC55O1xyXG4gIC8vIGNhbmNlbCBjbGljay90YXAgaWYgc2Nyb2xsIGlzIHRvbyBtdWNoXHJcbiAgaWYgKCBNYXRoLmFicyggc2Nyb2xsTW92ZVggKSA+IDMgfHwgTWF0aC5hYnMoIHNjcm9sbE1vdmVZICkgPiAzICkge1xyXG4gICAgdGhpcy5fcG9pbnRlckRvbmUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xyXG5cclxuVW5pZHJhZ2dlci5nZXRQb2ludGVyUG9pbnQgPSBmdW5jdGlvbiggcG9pbnRlciApIHtcclxuICByZXR1cm4ge1xyXG4gICAgeDogcG9pbnRlci5wYWdlWCAhPT0gdW5kZWZpbmVkID8gcG9pbnRlci5wYWdlWCA6IHBvaW50ZXIuY2xpZW50WCxcclxuICAgIHk6IHBvaW50ZXIucGFnZVkgIT09IHVuZGVmaW5lZCA/IHBvaW50ZXIucGFnZVkgOiBwb2ludGVyLmNsaWVudFlcclxuICB9O1xyXG59O1xyXG5cclxudmFyIGlzUGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWU9mZnNldCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuLy8gZ2V0IHNjcm9sbCBpbiB7IHgsIHkgfVxyXG5VbmlkcmFnZ2VyLmdldFNjcm9sbFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IGlzUGFnZU9mZnNldCA/IHdpbmRvdy5wYWdlWE9mZnNldCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCxcclxuICAgIHk6IGlzUGFnZU9mZnNldCA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wXHJcbiAgfTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuVW5pZHJhZ2dlci5nZXRQb2ludGVyUG9pbnQgPSBVbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludDtcclxuXHJcbnJldHVybiBVbmlkcmFnZ2VyO1xyXG5cclxufSkpO1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvZHJhZycsW1xyXG4gICAgICAnY2xhc3NpZS9jbGFzc2llJyxcclxuICAgICAgJ2V2ZW50aWUvZXZlbnRpZScsXHJcbiAgICAgICcuL2ZsaWNraXR5JyxcclxuICAgICAgJ3VuaWRyYWdnZXIvdW5pZHJhZ2dlcicsXHJcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcclxuICAgIF0sIGZ1bmN0aW9uKCBjbGFzc2llLCBldmVudGllLCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGNsYXNzaWUsIGV2ZW50aWUsIEZsaWNraXR5LCBVbmlkcmFnZ2VyLCB1dGlscyApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLWNsYXNzaWUnKSxcclxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxyXG4gICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ3VuaWRyYWdnZXInKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LmNsYXNzaWUsXHJcbiAgICAgIHdpbmRvdy5ldmVudGllLFxyXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXHJcbiAgICAgIHdpbmRvdy5VbmlkcmFnZ2VyLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBjbGFzc2llLCBldmVudGllLCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XHJcblxyXG5cclxuXHJcbi8vIGhhbmRsZSBJRTggcHJldmVudCBkZWZhdWx0XHJcbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0RXZlbnQoIGV2ZW50ICkge1xyXG4gIGlmICggZXZlbnQucHJldmVudERlZmF1bHQgKSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gLS0tLS0gZGVmYXVsdHMgLS0tLS0gLy9cclxuXHJcbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcclxuICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgdG91Y2hWZXJ0aWNhbFNjcm9sbDogdHJ1ZVxyXG59KTtcclxuXHJcbi8vIC0tLS0tIGNyZWF0ZSAtLS0tLSAvL1xyXG5cclxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlRHJhZycpO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZyBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkucHJvdG90eXBlLCBVbmlkcmFnZ2VyLnByb3RvdHlwZSApO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuX2NyZWF0ZURyYWcgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmJpbmREcmFnICk7XHJcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5fdWlDaGFuZ2VEcmFnICk7XHJcbiAgdGhpcy5vbiggJ2NoaWxkVUlQb2ludGVyRG93bicsIHRoaXMuX2NoaWxkVUlQb2ludGVyRG93bkRyYWcgKTtcclxuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMudW5iaW5kRHJhZyApO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmJpbmREcmFnID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmRyYWdnYWJsZSB8fCB0aGlzLmlzRHJhZ0JvdW5kICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjbGFzc2llLmFkZCggdGhpcy5lbGVtZW50LCAnaXMtZHJhZ2dhYmxlJyApO1xyXG4gIHRoaXMuaGFuZGxlcyA9IFsgdGhpcy52aWV3cG9ydCBdO1xyXG4gIHRoaXMuYmluZEhhbmRsZXMoKTtcclxuICB0aGlzLmlzRHJhZ0JvdW5kID0gdHJ1ZTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS51bmJpbmREcmFnID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5pc0RyYWdCb3VuZCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY2xhc3NpZS5yZW1vdmUoIHRoaXMuZWxlbWVudCwgJ2lzLWRyYWdnYWJsZScgKTtcclxuICB0aGlzLnVuYmluZEhhbmRsZXMoKTtcclxuICBkZWxldGUgdGhpcy5pc0RyYWdCb3VuZDtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fdWlDaGFuZ2VEcmFnID0gZnVuY3Rpb24oKSB7XHJcbiAgZGVsZXRlIHRoaXMuaXNGcmVlU2Nyb2xsaW5nO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLl9jaGlsZFVJUG9pbnRlckRvd25EcmFnID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHByZXZlbnREZWZhdWx0RXZlbnQoIGV2ZW50ICk7XHJcbiAgdGhpcy5wb2ludGVyRG93bkZvY3VzKCBldmVudCApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcG9pbnRlciBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcclxuICAvLyBkaXNtaXNzIHJhbmdlIHNsaWRlcnNcclxuICBpZiAoIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PSAnSU5QVVQnICYmIGV2ZW50LnRhcmdldC50eXBlID09ICdyYW5nZScgKSB7XHJcbiAgICAvLyByZXNldCBwb2ludGVyRG93biBsb2dpY1xyXG4gICAgdGhpcy5pc1BvaW50ZXJEb3duID0gZmFsc2U7XHJcbiAgICBkZWxldGUgdGhpcy5wb2ludGVySWRlbnRpZmllcjtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuX2RyYWdQb2ludGVyRG93biggZXZlbnQsIHBvaW50ZXIgKTtcclxuXHJcbiAgLy8ga2x1ZGdlIHRvIGJsdXIgZm9jdXNlZCBpbnB1dHMgaW4gZHJhZ2dlclxyXG4gIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuICBpZiAoIGZvY3VzZWQgJiYgZm9jdXNlZC5ibHVyICYmIGZvY3VzZWQgIT0gdGhpcy5lbGVtZW50ICYmXHJcbiAgICAvLyBkbyBub3QgYmx1ciBib2R5IGZvciBJRTkgJiAxMCwgIzExN1xyXG4gICAgZm9jdXNlZCAhPSBkb2N1bWVudC5ib2R5ICkge1xyXG4gICAgZm9jdXNlZC5ibHVyKCk7XHJcbiAgfVxyXG4gIHRoaXMucG9pbnRlckRvd25Gb2N1cyggZXZlbnQgKTtcclxuICAvLyBzdG9wIGlmIGl0IHdhcyBtb3ZpbmdcclxuICB0aGlzLmRyYWdYID0gdGhpcy54O1xyXG4gIGNsYXNzaWUuYWRkKCB0aGlzLnZpZXdwb3J0LCAnaXMtcG9pbnRlci1kb3duJyApO1xyXG4gIC8vIGJpbmQgbW92ZSBhbmQgZW5kIGV2ZW50c1xyXG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XHJcbiAgLy8gdHJhY2sgc2Nyb2xsaW5nXHJcbiAgdGhpcy5wb2ludGVyRG93blNjcm9sbCA9IFVuaWRyYWdnZXIuZ2V0U2Nyb2xsUG9zaXRpb24oKTtcclxuICBldmVudGllLmJpbmQoIHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMgKTtcclxuXHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAncG9pbnRlckRvd24nLCBldmVudCwgWyBwb2ludGVyIF0gKTtcclxufTtcclxuXHJcbnZhciB0b3VjaFN0YXJ0RXZlbnRzID0ge1xyXG4gIHRvdWNoc3RhcnQ6IHRydWUsXHJcbiAgTVNQb2ludGVyRG93bjogdHJ1ZVxyXG59O1xyXG5cclxudmFyIGZvY3VzTm9kZXMgPSB7XHJcbiAgSU5QVVQ6IHRydWUsXHJcbiAgU0VMRUNUOiB0cnVlXHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUucG9pbnRlckRvd25Gb2N1cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICAvLyBmb2N1cyBlbGVtZW50LCBpZiBub3QgdG91Y2gsIGFuZCBpdHMgbm90IGFuIGlucHV0IG9yIHNlbGVjdFxyXG4gIGlmICggIXRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5IHx8IHRvdWNoU3RhcnRFdmVudHNbIGV2ZW50LnR5cGUgXSB8fFxyXG4gICAgICBmb2N1c05vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHByZXZTY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gIHRoaXMuZWxlbWVudC5mb2N1cygpO1xyXG4gIC8vIGhhY2sgdG8gZml4IHNjcm9sbCBqdW1wIGFmdGVyIGZvY3VzLCAjNzZcclxuICBpZiAoIHdpbmRvdy5wYWdlWU9mZnNldCAhPSBwcmV2U2Nyb2xsWSApIHtcclxuICAgIHdpbmRvdy5zY3JvbGxUbyggd2luZG93LnBhZ2VYT2Zmc2V0LCBwcmV2U2Nyb2xsWSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIG1vdmUgLS0tLS0gLy9cclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcclxuICB2YXIgbW92ZVZlY3RvciA9IHRoaXMuX2RyYWdQb2ludGVyTW92ZSggZXZlbnQsIHBvaW50ZXIgKTtcclxuICB0aGlzLnRvdWNoVmVydGljYWxTY3JvbGxNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xyXG4gIHRoaXMuX2RyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xyXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJNb3ZlJywgZXZlbnQsIFsgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcclxuICByZXR1cm4gIXRoaXMuaXNUb3VjaFNjcm9sbGluZyAmJiBNYXRoLmFicyggbW92ZVZlY3Rvci54ICkgPiAzO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gdXAgLS0tLS0gLy9cclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgZGVsZXRlIHRoaXMuaXNUb3VjaFNjcm9sbGluZztcclxuICBjbGFzc2llLnJlbW92ZSggdGhpcy52aWV3cG9ydCwgJ2lzLXBvaW50ZXItZG93bicgKTtcclxuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdwb2ludGVyVXAnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcclxuICB0aGlzLl9kcmFnUG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdmVydGljYWwgc2Nyb2xsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgdG91Y2hTY3JvbGxFdmVudHMgPSB7XHJcbiAgLy8gbW92ZSBldmVudHNcclxuICAvLyBtb3VzZW1vdmU6IHRydWUsXHJcbiAgdG91Y2htb3ZlOiB0cnVlLFxyXG4gIE1TUG9pbnRlck1vdmU6IHRydWVcclxufTtcclxuXHJcbi8vIHBvc2l0aW9uIG9mIHBvaW50ZXIsIHJlbGF0aXZlIHRvIHdpbmRvd1xyXG5mdW5jdGlvbiBnZXRQb2ludGVyV2luZG93WSggcG9pbnRlciApIHtcclxuICB2YXIgcG9pbnRlclBvaW50ID0gVW5pZHJhZ2dlci5nZXRQb2ludGVyUG9pbnQoIHBvaW50ZXIgKTtcclxuICByZXR1cm4gcG9pbnRlclBvaW50LnkgLSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbn1cclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS50b3VjaFZlcnRpY2FsU2Nyb2xsTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcclxuICAvLyBkbyBub3Qgc2Nyb2xsIGlmIGFscmVhZHkgZHJhZ2dpbmcsIGlmIGRpc2FibGVkXHJcbiAgdmFyIHRvdWNoVmVydGljYWxTY3JvbGwgPSB0aGlzLm9wdGlvbnMudG91Y2hWZXJ0aWNhbFNjcm9sbDtcclxuICAvLyBpZiB0b3VjaFZlcnRpY2FsU2Nyb2xsIGlzICd3aXRoRHJhZycsIGFsbG93IHNjcm9sbGluZyBhbmQgZHJhZ2dpbmdcclxuICB2YXIgY2FuTm90U2Nyb2xsID0gdG91Y2hWZXJ0aWNhbFNjcm9sbCA9PSAnd2l0aERyYWcnID8gIXRvdWNoVmVydGljYWxTY3JvbGwgOlxyXG4gICAgdGhpcy5pc0RyYWdnaW5nIHx8ICF0b3VjaFZlcnRpY2FsU2Nyb2xsO1xyXG4gIGlmICggY2FuTm90U2Nyb2xsIHx8ICF0b3VjaFNjcm9sbEV2ZW50c1sgZXZlbnQudHlwZSBdICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBkb24ndCBzdGFydCB2ZXJ0aWNhbCBzY3JvbGxpbmcgdW50aWwgcG9pbnRlciBoYXMgbW92ZWQgMTAgcGl4ZWxzIGluIGEgZGlyZWN0aW9uXHJcbiAgaWYgKCAhdGhpcy5pc1RvdWNoU2Nyb2xsaW5nICYmIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnkgKSA+IDEwICkge1xyXG4gICAgLy8gc3RhcnQgdG91Y2ggdmVydGljYWwgc2Nyb2xsaW5nXHJcbiAgICAvLyBzY3JvbGwgJiBwb2ludGVyWSB3aGVuIHN0YXJ0ZWRcclxuICAgIHRoaXMuc3RhcnRTY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gICAgdGhpcy5wb2ludGVyV2luZG93U3RhcnRZID0gZ2V0UG9pbnRlcldpbmRvd1koIHBvaW50ZXIgKTtcclxuICAgIC8vIHN0YXJ0IHNjcm9sbCBhbmltYXRpb25cclxuICAgIHRoaXMuaXNUb3VjaFNjcm9sbGluZyA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZ2dpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kcmFnU3RhcnQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XHJcbiAgdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiA9IHRoaXMueDtcclxuICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ1N0YXJ0JywgZXZlbnQsIFsgcG9pbnRlciBdICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XHJcbiAgcHJldmVudERlZmF1bHRFdmVudCggZXZlbnQgKTtcclxuXHJcbiAgdGhpcy5wcmV2aW91c0RyYWdYID0gdGhpcy5kcmFnWDtcclxuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnRcclxuICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gLTEgOiAxO1xyXG4gIHZhciBkcmFnWCA9IHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKyBtb3ZlVmVjdG9yLnggKiBkaXJlY3Rpb247XHJcblxyXG4gIGlmICggIXRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIHRoaXMuY2VsbHMubGVuZ3RoICkge1xyXG4gICAgLy8gc2xvdyBkcmFnXHJcbiAgICB2YXIgb3JpZ2luQm91bmQgPSBNYXRoLm1heCggLXRoaXMuY2VsbHNbMF0udGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XHJcbiAgICBkcmFnWCA9IGRyYWdYID4gb3JpZ2luQm91bmQgPyAoIGRyYWdYICsgb3JpZ2luQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xyXG4gICAgdmFyIGVuZEJvdW5kID0gTWF0aC5taW4oIC10aGlzLmdldExhc3RDZWxsKCkudGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XHJcbiAgICBkcmFnWCA9IGRyYWdYIDwgZW5kQm91bmQgPyAoIGRyYWdYICsgZW5kQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5kcmFnWCA9IGRyYWdYO1xyXG5cclxuICB0aGlzLmRyYWdNb3ZlVGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ01vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kcmFnRW5kID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XHJcbiAgICB0aGlzLmlzRnJlZVNjcm9sbGluZyA9IHRydWU7XHJcbiAgfVxyXG4gIC8vIHNldCBzZWxlY3RlZEluZGV4IGJhc2VkIG9uIHdoZXJlIGZsaWNrIHdpbGwgZW5kIHVwXHJcbiAgdmFyIGluZGV4ID0gdGhpcy5kcmFnRW5kUmVzdGluZ1NlbGVjdCgpO1xyXG5cclxuICBpZiAoIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcclxuICAgIC8vIGlmIGZyZWUtc2Nyb2xsICYgbm90IHdyYXAgYXJvdW5kXHJcbiAgICAvLyBkbyBub3QgZnJlZS1zY3JvbGwgaWYgZ29pbmcgb3V0c2lkZSBvZiBib3VuZGluZyBjZWxsc1xyXG4gICAgLy8gc28gYm91bmRpbmcgY2VsbHMgY2FuIGF0dHJhY3Qgc2xpZGVyLCBhbmQga2VlcCBpdCBpbiBib3VuZHNcclxuICAgIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XHJcbiAgICB0aGlzLmlzRnJlZVNjcm9sbGluZyA9IC1yZXN0aW5nWCA+IHRoaXMuY2VsbHNbMF0udGFyZ2V0ICYmXHJcbiAgICAgIC1yZXN0aW5nWCA8IHRoaXMuZ2V0TGFzdENlbGwoKS50YXJnZXQ7XHJcbiAgfSBlbHNlIGlmICggIXRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmIGluZGV4ID09IHRoaXMuc2VsZWN0ZWRJbmRleCApIHtcclxuICAgIC8vIGJvb3N0IHNlbGVjdGlvbiBpZiBzZWxlY3RlZCBpbmRleCBoYXMgbm90IGNoYW5nZWRcclxuICAgIGluZGV4ICs9IHRoaXMuZHJhZ0VuZEJvb3N0U2VsZWN0KCk7XHJcbiAgfVxyXG4gIGRlbGV0ZSB0aGlzLnByZXZpb3VzRHJhZ1g7XHJcbiAgLy8gYXBwbHkgc2VsZWN0aW9uXHJcbiAgLy8gVE9ETyByZWZhY3RvciB0aGlzLCBzZWxlY3RpbmcgaGVyZSBmZWVscyB3ZWlyZFxyXG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xyXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdFbmQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kcmFnRW5kUmVzdGluZ1NlbGVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XHJcbiAgLy8gaG93IGZhciBhd2F5IGZyb20gc2VsZWN0ZWQgY2VsbFxyXG4gIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLmdldENlbGxEaXN0YW5jZSggLXJlc3RpbmdYLCB0aGlzLnNlbGVjdGVkSW5kZXggKSApO1xyXG4gIC8vIGdldCBjbG9zZXQgcmVzdGluZyBnb2luZyB1cCBhbmQgZ29pbmcgZG93blxyXG4gIHZhciBwb3NpdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAxICk7XHJcbiAgdmFyIG5lZ2F0aXZlUmVzdGluZyA9IHRoaXMuX2dldENsb3Nlc3RSZXN0aW5nKCByZXN0aW5nWCwgZGlzdGFuY2UsIC0xICk7XHJcbiAgLy8gdXNlIGNsb3NlciByZXN0aW5nIGZvciB3cmFwLWFyb3VuZFxyXG4gIHZhciBpbmRleCA9IHBvc2l0aXZlUmVzdGluZy5kaXN0YW5jZSA8IG5lZ2F0aXZlUmVzdGluZy5kaXN0YW5jZSA/XHJcbiAgICBwb3NpdGl2ZVJlc3RpbmcuaW5kZXggOiBuZWdhdGl2ZVJlc3RpbmcuaW5kZXg7XHJcbiAgcmV0dXJuIGluZGV4O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxyXG4gKiBnZXQgdGhlIGRpc3RhbmNlIGFuZCBpbmRleCBvZiB0aGUgY2xvc2VzdCBjZWxsXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByZXN0aW5nWCAtIGVzdGltYXRlZCBwb3N0LWZsaWNrIHJlc3RpbmcgcG9zaXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluY3JlbWVudCAtICsxIG9yIC0xLCBnb2luZyB1cCBvciBkb3duXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IC0geyBkaXN0YW5jZToge051bWJlcn0sIGluZGV4OiB7SW50ZWdlcn0gfVxyXG4gKi9cclxuRmxpY2tpdHkucHJvdG90eXBlLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcclxuICB2YXIgaW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXg7XHJcbiAgdmFyIG1pbkRpc3RhbmNlID0gSW5maW5pdHk7XHJcbiAgdmFyIGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/XHJcbiAgICAvLyBpZiBjb250YWluLCBrZWVwIGdvaW5nIGlmIGRpc3RhbmNlIGlzIGVxdWFsIHRvIG1pbkRpc3RhbmNlXHJcbiAgICBmdW5jdGlvbiggZCwgbWQgKSB7IHJldHVybiBkIDw9IG1kOyB9IDogZnVuY3Rpb24oIGQsIG1kICkgeyByZXR1cm4gZCA8IG1kOyB9O1xyXG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcclxuICAgIC8vIG1lYXN1cmUgZGlzdGFuY2UgdG8gbmV4dCBjZWxsXHJcbiAgICBpbmRleCArPSBpbmNyZW1lbnQ7XHJcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgZGlzdGFuY2UgPSB0aGlzLmdldENlbGxEaXN0YW5jZSggLXJlc3RpbmdYLCBpbmRleCApO1xyXG4gICAgaWYgKCBkaXN0YW5jZSA9PT0gbnVsbCApIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBkaXN0YW5jZSA9IE1hdGguYWJzKCBkaXN0YW5jZSApO1xyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgZGlzdGFuY2U6IG1pbkRpc3RhbmNlLFxyXG4gICAgLy8gc2VsZWN0ZWQgd2FzIHByZXZpb3VzIGluZGV4XHJcbiAgICBpbmRleDogaW5kZXggLSBpbmNyZW1lbnRcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIG1lYXN1cmUgZGlzdGFuY2UgYmV0d2VlbiB4IGFuZCBhIGNlbGwgdGFyZ2V0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XHJcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBjZWxsIGluZGV4XHJcbiAqL1xyXG5GbGlja2l0eS5wcm90b3R5cGUuZ2V0Q2VsbERpc3RhbmNlID0gZnVuY3Rpb24oIHgsIGluZGV4ICkge1xyXG4gIHZhciBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDtcclxuICAvLyB3cmFwIGFyb3VuZCBpZiBhdCBsZWFzdCAyIGNlbGxzXHJcbiAgdmFyIGlzV3JhcEFyb3VuZCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XHJcbiAgdmFyIGNlbGxJbmRleCA9IGlzV3JhcEFyb3VuZCA/IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbiApIDogaW5kZXg7XHJcbiAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWyBjZWxsSW5kZXggXTtcclxuICBpZiAoICFjZWxsICkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8vIGFkZCBkaXN0YW5jZSBmb3Igd3JhcC1hcm91bmQgY2VsbHNcclxuICB2YXIgd3JhcCA9IGlzV3JhcEFyb3VuZCA/IHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCBpbmRleCAvIGxlbiApIDogMDtcclxuICByZXR1cm4geCAtICggY2VsbC50YXJnZXQgKyB3cmFwICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuZHJhZ0VuZEJvb3N0U2VsZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZG8gbm90IGJvb3N0IGlmIG5vIHByZXZpb3VzRHJhZ1ggb3IgZHJhZ01vdmVUaW1lXHJcbiAgaWYgKCB0aGlzLnByZXZpb3VzRHJhZ1ggPT09IHVuZGVmaW5lZCB8fCAhdGhpcy5kcmFnTW92ZVRpbWUgfHxcclxuICAgIC8vIG9yIGlmIGRyYWcgd2FzIGhlbGQgZm9yIDEwMCBtc1xyXG4gICAgbmV3IERhdGUoKSAtIHRoaXMuZHJhZ01vdmVUaW1lID4gMTAwICkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICB2YXIgZGlzdGFuY2UgPSB0aGlzLmdldENlbGxEaXN0YW5jZSggLXRoaXMuZHJhZ1gsIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xyXG4gIHZhciBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XHJcbiAgaWYgKCBkaXN0YW5jZSA+IDAgJiYgZGVsdGEgPiAwICkge1xyXG4gICAgLy8gYm9vc3QgdG8gbmV4dCBpZiBtb3ZpbmcgdG93YXJkcyB0aGUgcmlnaHQsIGFuZCBwb3NpdGl2ZSB2ZWxvY2l0eVxyXG4gICAgcmV0dXJuIDE7XHJcbiAgfSBlbHNlIGlmICggZGlzdGFuY2UgPCAwICYmIGRlbHRhIDwgMCApIHtcclxuICAgIC8vIGJvb3N0IHRvIHByZXZpb3VzIGlmIG1vdmluZyB0b3dhcmRzIHRoZSBsZWZ0LCBhbmQgbmVnYXRpdmUgdmVsb2NpdHlcclxuICAgIHJldHVybiAtMTtcclxuICB9XHJcbiAgcmV0dXJuIDA7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzdGF0aWNDbGljayAtLS0tLSAvL1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIC8vIGdldCBjbGlja2VkQ2VsbCwgaWYgY2VsbCB3YXMgY2xpY2tlZFxyXG4gIHZhciBjbGlja2VkQ2VsbCA9IHRoaXMuZ2V0UGFyZW50Q2VsbCggZXZlbnQudGFyZ2V0ICk7XHJcbiAgdmFyIGNlbGxFbGVtID0gY2xpY2tlZENlbGwgJiYgY2xpY2tlZENlbGwuZWxlbWVudDtcclxuICB2YXIgY2VsbEluZGV4ID0gY2xpY2tlZENlbGwgJiYgdXRpbHMuaW5kZXhPZiggdGhpcy5jZWxscywgY2xpY2tlZENlbGwgKTtcclxuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzdGF0aWNDbGljaycsIGV2ZW50LCBbIHBvaW50ZXIsIGNlbGxFbGVtLCBjZWxsSW5kZXggXSApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG5yZXR1cm4gRmxpY2tpdHk7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogVGFwIGxpc3RlbmVyIHYxLjEuMVxyXG4gKiBsaXN0ZW5zIHRvIHRhcHNcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAndGFwLWxpc3RlbmVyL3RhcC1saXN0ZW5lcicsW1xyXG4gICAgICAndW5pcG9pbnRlci91bmlwb2ludGVyJ1xyXG4gICAgXSwgZnVuY3Rpb24oIFVuaXBvaW50ZXIgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIFVuaXBvaW50ZXIgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCd1bmlwb2ludGVyJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuVGFwTGlzdGVuZXIgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5Vbmlwb2ludGVyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICkge1xyXG5cclxuXHJcblxyXG4vLyBoYW5kbGUgSUU4IHByZXZlbnQgZGVmYXVsdFxyXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEV2ZW50KCBldmVudCApIHtcclxuICBpZiAoIGV2ZW50LnByZXZlbnREZWZhdWx0ICkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBUYXBMaXN0ZW5lciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gVGFwTGlzdGVuZXIoIGVsZW0gKSB7XHJcbiAgdGhpcy5iaW5kVGFwKCBlbGVtICk7XHJcbn1cclxuXHJcbi8vIGluaGVyaXQgVW5pcG9pbnRlciAmIEV2ZW50RW1pdHRlclxyXG5UYXBMaXN0ZW5lci5wcm90b3R5cGUgPSBuZXcgVW5pcG9pbnRlcigpO1xyXG5cclxuLyoqXHJcbiAqIGJpbmQgdGFwIGV2ZW50IHRvIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5UYXBMaXN0ZW5lci5wcm90b3R5cGUuYmluZFRhcCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIGlmICggIWVsZW0gKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMudW5iaW5kVGFwKCk7XHJcbiAgdGhpcy50YXBFbGVtZW50ID0gZWxlbTtcclxuICB0aGlzLl9iaW5kU3RhcnRFdmVudCggZWxlbSwgdHJ1ZSApO1xyXG59O1xyXG5cclxuVGFwTGlzdGVuZXIucHJvdG90eXBlLnVuYmluZFRhcCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMudGFwRWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdGhpcy5fYmluZFN0YXJ0RXZlbnQoIHRoaXMudGFwRWxlbWVudCwgdHJ1ZSApO1xyXG4gIGRlbGV0ZSB0aGlzLnRhcEVsZW1lbnQ7XHJcbn07XHJcblxyXG52YXIgcG9pbnRlckRvd24gPSBUYXBMaXN0ZW5lci5wcm90b3R5cGUucG9pbnRlckRvd247XHJcblxyXG5UYXBMaXN0ZW5lci5wcm90b3R5cGUucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgLy8gcHJldmVudCBkZWZhdWx0IGV2ZW50IGZvciB0b3VjaCwgZGlzYWJsZXMgdGFwIHRoZW4gY2xpY2tcclxuICBpZiAoIGV2ZW50LnR5cGUgPT0gJ3RvdWNoc3RhcnQnICkge1xyXG4gICAgcHJldmVudERlZmF1bHRFdmVudCggZXZlbnQgKTtcclxuICB9XHJcbiAgcG9pbnRlckRvd24uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG59O1xyXG5cclxudmFyIGlzUGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWU9mZnNldCAhPT0gdW5kZWZpbmVkO1xyXG4vKipcclxuICogcG9pbnRlciB1cFxyXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxyXG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXHJcbiAqL1xyXG5UYXBMaXN0ZW5lci5wcm90b3R5cGUucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xyXG4gIHZhciBwb2ludGVyUG9pbnQgPSBVbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludCggcG9pbnRlciApO1xyXG4gIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLnRhcEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgLy8gc3RhbmRhcmQgb3IgSUU4IHNjcm9sbCBwb3NpdGlvbnNcclxuICB2YXIgc2Nyb2xsWCA9IGlzUGFnZU9mZnNldCA/IHdpbmRvdy5wYWdlWE9mZnNldCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcclxuICB2YXIgc2Nyb2xsWSA9IGlzUGFnZU9mZnNldCA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xyXG4gIC8vIGNhbGN1bGF0ZSBpZiBwb2ludGVyIGlzIGluc2lkZSB0YXBFbGVtZW50XHJcbiAgdmFyIGlzSW5zaWRlID0gcG9pbnRlclBvaW50LnggPj0gYm91bmRpbmdSZWN0LmxlZnQgKyBzY3JvbGxYICYmXHJcbiAgICBwb2ludGVyUG9pbnQueCA8PSBib3VuZGluZ1JlY3QucmlnaHQgKyBzY3JvbGxYICYmXHJcbiAgICBwb2ludGVyUG9pbnQueSA+PSBib3VuZGluZ1JlY3QudG9wICsgc2Nyb2xsWSAmJlxyXG4gICAgcG9pbnRlclBvaW50LnkgPD0gYm91bmRpbmdSZWN0LmJvdHRvbSArIHNjcm9sbFk7XHJcbiAgLy8gdHJpZ2dlciBjYWxsYmFjayBpZiBwb2ludGVyIGlzIGluc2lkZSBlbGVtZW50XHJcbiAgaWYgKCBpc0luc2lkZSApIHtcclxuICAgIHRoaXMuZW1pdEV2ZW50KCAndGFwJywgWyBldmVudCwgcG9pbnRlciBdICk7XHJcbiAgfVxyXG59O1xyXG5cclxuVGFwTGlzdGVuZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnBvaW50ZXJEb25lKCk7XHJcbiAgdGhpcy51bmJpbmRUYXAoKTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxucmV0dXJuIFRhcExpc3RlbmVyO1xyXG5cclxufSkpO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcHJldi9uZXh0IGJ1dHRvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvcHJldi1uZXh0LWJ1dHRvbicsW1xyXG4gICAgICAnZXZlbnRpZS9ldmVudGllJyxcclxuICAgICAgJy4vZmxpY2tpdHknLFxyXG4gICAgICAndGFwLWxpc3RlbmVyL3RhcC1saXN0ZW5lcicsXHJcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcclxuICAgIF0sIGZ1bmN0aW9uKCBldmVudGllLCBGbGlja2l0eSwgVGFwTGlzdGVuZXIsIHV0aWxzICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBGbGlja2l0eSwgVGFwTGlzdGVuZXIsIHV0aWxzICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxyXG4gICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ3RhcC1saXN0ZW5lcicpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuZXZlbnRpZSxcclxuICAgICAgd2luZG93LkZsaWNraXR5LFxyXG4gICAgICB3aW5kb3cuVGFwTGlzdGVuZXIsXHJcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGV2ZW50aWUsIEZsaWNraXR5LCBUYXBMaXN0ZW5lciwgdXRpbHMgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tIGlubGluZSBTVkcgc3VwcG9ydCAtLS0tLSAvL1xyXG5cclxudmFyIHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XHJcblxyXG4vLyBvbmx5IGNoZWNrIG9uIGRlbWFuZCwgbm90IG9uIHNjcmlwdCBsb2FkXHJcbnZhciBzdXBwb3J0c0lubGluZVNWRyA9ICggZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHN1cHBvcnRzO1xyXG4gIGZ1bmN0aW9uIGNoZWNrU3VwcG9ydCgpIHtcclxuICAgIGlmICggc3VwcG9ydHMgIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgcmV0dXJuIHN1cHBvcnRzO1xyXG4gICAgfVxyXG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmlubmVySFRNTCA9ICc8c3ZnLz4nO1xyXG4gICAgc3VwcG9ydHMgPSAoIGRpdi5maXJzdENoaWxkICYmIGRpdi5maXJzdENoaWxkLm5hbWVzcGFjZVVSSSApID09IHN2Z1VSSTtcclxuICAgIHJldHVybiBzdXBwb3J0cztcclxuICB9XHJcbiAgcmV0dXJuIGNoZWNrU3VwcG9ydDtcclxufSkoKTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBQcmV2TmV4dEJ1dHRvbiggZGlyZWN0aW9uLCBwYXJlbnQgKSB7XHJcbiAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcbn1cclxuXHJcblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZSA9IG5ldyBUYXBMaXN0ZW5lcigpO1xyXG5cclxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBwcm9wZXJ0aWVzXHJcbiAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlO1xyXG4gIHRoaXMuaXNQcmV2aW91cyA9IHRoaXMuZGlyZWN0aW9uID09IC0xO1xyXG4gIHZhciBsZWZ0RGlyZWN0aW9uID0gdGhpcy5wYXJlbnQub3B0aW9ucy5yaWdodFRvTGVmdCA/IDEgOiAtMTtcclxuICB0aGlzLmlzTGVmdCA9IHRoaXMuZGlyZWN0aW9uID09IGxlZnREaXJlY3Rpb247XHJcblxyXG4gIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgZWxlbWVudC5jbGFzc05hbWUgPSAnZmxpY2tpdHktcHJldi1uZXh0LWJ1dHRvbic7XHJcbiAgZWxlbWVudC5jbGFzc05hbWUgKz0gdGhpcy5pc1ByZXZpb3VzID8gJyBwcmV2aW91cycgOiAnIG5leHQnO1xyXG4gIC8vIHByZXZlbnQgYnV0dG9uIGZyb20gc3VibWl0dGluZyBmb3JtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwODM2MDc2LzE4MjE4M1xyXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XHJcbiAgLy8gaW5pdCBhcyBkaXNhYmxlZFxyXG4gIHRoaXMuZGlzYWJsZSgpO1xyXG5cclxuICBGbGlja2l0eS5zZXRVbnNlbGVjdGFibGUoIGVsZW1lbnQgKTtcclxuICAvLyBjcmVhdGUgYXJyb3dcclxuICBpZiAoIHN1cHBvcnRzSW5saW5lU1ZHKCkgKSB7XHJcbiAgICB2YXIgc3ZnID0gdGhpcy5jcmVhdGVTVkcoKTtcclxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoIHN2ZyApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBTVkcgbm90IHN1cHBvcnRlZCwgc2V0IGJ1dHRvbiB0ZXh0XHJcbiAgICB0aGlzLnNldEFycm93VGV4dCgpO1xyXG4gICAgZWxlbWVudC5jbGFzc05hbWUgKz0gJyBuby1zdmcnO1xyXG4gIH1cclxuICAvLyB1cGRhdGUgb24gc2VsZWN0XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICB0aGlzLm9uQ2VsbFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX3RoaXMudXBkYXRlKCk7XHJcbiAgfTtcclxuICB0aGlzLnBhcmVudC5vbiggJ2NlbGxTZWxlY3QnLCB0aGlzLm9uQ2VsbFNlbGVjdCApO1xyXG4gIC8vIHRhcFxyXG4gIHRoaXMub24oICd0YXAnLCB0aGlzLm9uVGFwICk7XHJcbiAgLy8gcG9pbnRlckRvd25cclxuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCBmdW5jdGlvbiBvblBvaW50ZXJEb3duKCBidXR0b24sIGV2ZW50ICkge1xyXG4gICAgX3RoaXMucGFyZW50LmNoaWxkVUlQb2ludGVyRG93biggZXZlbnQgKTtcclxuICB9KTtcclxufTtcclxuXHJcblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYmluZFRhcCggdGhpcy5lbGVtZW50ICk7XHJcbiAgLy8gY2xpY2sgZXZlbnRzIGZyb20ga2V5Ym9hcmRcclxuICBldmVudGllLmJpbmQoIHRoaXMuZWxlbWVudCwgJ2NsaWNrJywgdGhpcyApO1xyXG4gIC8vIGFkZCB0byBET01cclxuICB0aGlzLnBhcmVudC5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXHJcbiAgdGhpcy5wYXJlbnQuZWxlbWVudC5yZW1vdmVDaGlsZCggdGhpcy5lbGVtZW50ICk7XHJcbiAgLy8gZG8gcmVndWxhciBUYXBMaXN0ZW5lciBkZXN0cm95XHJcbiAgVGFwTGlzdGVuZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCggdGhpcyApO1xyXG4gIC8vIGNsaWNrIGV2ZW50cyBmcm9tIGtleWJvYXJkXHJcbiAgZXZlbnRpZS51bmJpbmQoIHRoaXMuZWxlbWVudCwgJ2NsaWNrJywgdGhpcyApO1xyXG59O1xyXG5cclxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmNyZWF0ZVNWRyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3N2ZycpO1xyXG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyApO1xyXG4gIHZhciBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdwYXRoJyk7XHJcbiAgdmFyIHBhdGhNb3ZlbWVudHMgPSBnZXRBcnJvd01vdmVtZW50cyggdGhpcy5wYXJlbnQub3B0aW9ucy5hcnJvd1NoYXBlICk7XHJcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdkJywgcGF0aE1vdmVtZW50cyApO1xyXG4gIHBhdGguc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnYXJyb3cnICk7XHJcbiAgLy8gcm90YXRlIGFycm93XHJcbiAgaWYgKCAhdGhpcy5pc0xlZnQgKSB7XHJcbiAgICBwYXRoLnNldEF0dHJpYnV0ZSggJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMTAwLCAxMDApIHJvdGF0ZSgxODApICcgKTtcclxuICB9XHJcbiAgc3ZnLmFwcGVuZENoaWxkKCBwYXRoICk7XHJcbiAgcmV0dXJuIHN2ZztcclxufTtcclxuXHJcbi8vIGdldCBTVkcgcGF0aCBtb3ZtZW1lbnRcclxuZnVuY3Rpb24gZ2V0QXJyb3dNb3ZlbWVudHMoIHNoYXBlICkge1xyXG4gIC8vIHVzZSBzaGFwZSBhcyBtb3ZlbWVudCBpZiBzdHJpbmdcclxuICBpZiAoIHR5cGVvZiBzaGFwZSA9PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiBzaGFwZTtcclxuICB9XHJcbiAgLy8gY3JlYXRlIG1vdmVtZW50IHN0cmluZ1xyXG4gIHJldHVybiAnTSAnICsgc2hhcGUueDAgKyAnLDUwJyArXHJcbiAgICAnIEwgJyArIHNoYXBlLngxICsgJywnICsgKCBzaGFwZS55MSArIDUwICkgK1xyXG4gICAgJyBMICcgKyBzaGFwZS54MiArICcsJyArICggc2hhcGUueTIgKyA1MCApICtcclxuICAgICcgTCAnICsgc2hhcGUueDMgKyAnLDUwICcgK1xyXG4gICAgJyBMICcgKyBzaGFwZS54MiArICcsJyArICggNTAgLSBzaGFwZS55MiApICtcclxuICAgICcgTCAnICsgc2hhcGUueDEgKyAnLCcgKyAoIDUwIC0gc2hhcGUueTEgKSArXHJcbiAgICAnIFonO1xyXG59XHJcblxyXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuc2V0QXJyb3dUZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHBhcmVudE9wdGlvbnMgPSB0aGlzLnBhcmVudC5vcHRpb25zO1xyXG4gIHZhciBhcnJvd1RleHQgPSB0aGlzLmlzTGVmdCA/IHBhcmVudE9wdGlvbnMubGVmdEFycm93VGV4dCA6IHBhcmVudE9wdGlvbnMucmlnaHRBcnJvd1RleHQ7XHJcbiAgdXRpbHMuc2V0VGV4dCggdGhpcy5lbGVtZW50LCBhcnJvd1RleHQgKTtcclxufTtcclxuXHJcblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5vblRhcCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMuaXNFbmFibGVkICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLnBhcmVudC51aUNoYW5nZSgpO1xyXG4gIHZhciBtZXRob2QgPSB0aGlzLmlzUHJldmlvdXMgPyAncHJldmlvdXMnIDogJ25leHQnO1xyXG4gIHRoaXMucGFyZW50WyBtZXRob2QgXSgpO1xyXG59O1xyXG5cclxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XHJcblxyXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIG9ubHkgYWxsb3cgY2xpY2tzIGZyb20ga2V5Ym9hcmRcclxuICB2YXIgZm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcbiAgaWYgKCBmb2N1c2VkICYmIGZvY3VzZWQgPT0gdGhpcy5lbGVtZW50ICkge1xyXG4gICAgdGhpcy5vblRhcCgpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggdGhpcy5pc0VuYWJsZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTtcclxufTtcclxuXHJcblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5pc0VuYWJsZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTtcclxufTtcclxuXHJcblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBpbmRleCBvZiBmaXJzdCBvciBsYXN0IGNlbGwsIGlmIHByZXZpb3VzIG9yIG5leHRcclxuICB2YXIgY2VsbHMgPSB0aGlzLnBhcmVudC5jZWxscztcclxuICAvLyBlbmFibGUgaXMgd3JhcEFyb3VuZCBhbmQgYXQgbGVhc3QgMiBjZWxsc1xyXG4gIGlmICggdGhpcy5wYXJlbnQub3B0aW9ucy53cmFwQXJvdW5kICYmIGNlbGxzLmxlbmd0aCA+IDEgKSB7XHJcbiAgICB0aGlzLmVuYWJsZSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbGFzdEluZGV4ID0gY2VsbHMubGVuZ3RoID8gY2VsbHMubGVuZ3RoIC0gMSA6IDA7XHJcbiAgdmFyIGJvdW5kSW5kZXggPSB0aGlzLmlzUHJldmlvdXMgPyAwIDogbGFzdEluZGV4O1xyXG4gIHZhciBtZXRob2QgPSB0aGlzLnBhcmVudC5zZWxlY3RlZEluZGV4ID09IGJvdW5kSW5kZXggPyAnZGlzYWJsZScgOiAnZW5hYmxlJztcclxuICB0aGlzWyBtZXRob2QgXSgpO1xyXG59O1xyXG5cclxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmRlYWN0aXZhdGUoKTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xyXG4gIHByZXZOZXh0QnV0dG9uczogdHJ1ZSxcclxuICBsZWZ0QXJyb3dUZXh0OiAn4oC5JyxcclxuICByaWdodEFycm93VGV4dDogJ+KAuicsXHJcbiAgYXJyb3dTaGFwZToge1xyXG4gICAgeDA6IDEwLFxyXG4gICAgeDE6IDYwLCB5MTogNTAsXHJcbiAgICB4MjogNzAsIHkyOiA0MCxcclxuICAgIHgzOiAzMFxyXG4gIH1cclxufSk7XHJcblxyXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQcmV2TmV4dEJ1dHRvbnMnKTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fY3JlYXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnByZXZOZXh0QnV0dG9ucyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMucHJldkJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggLTEsIHRoaXMgKTtcclxuICB0aGlzLm5leHRCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oIDEsIHRoaXMgKTtcclxuXHJcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5wcmV2QnV0dG9uLmFjdGl2YXRlKCk7XHJcbiAgdGhpcy5uZXh0QnV0dG9uLmFjdGl2YXRlKCk7XHJcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5wcmV2QnV0dG9uLmRlYWN0aXZhdGUoKTtcclxuICB0aGlzLm5leHRCdXR0b24uZGVhY3RpdmF0ZSgpO1xyXG4gIHRoaXMub2ZmKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5GbGlja2l0eS5QcmV2TmV4dEJ1dHRvbiA9IFByZXZOZXh0QnV0dG9uO1xyXG5cclxucmV0dXJuIEZsaWNraXR5O1xyXG5cclxufSkpO1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvcGFnZS1kb3RzJyxbXHJcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxyXG4gICAgICAnLi9mbGlja2l0eScsXHJcbiAgICAgICd0YXAtbGlzdGVuZXIvdGFwLWxpc3RlbmVyJyxcclxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xyXG4gICAgXSwgZnVuY3Rpb24oIGV2ZW50aWUsIEZsaWNraXR5LCBUYXBMaXN0ZW5lciwgdXRpbHMgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGV2ZW50aWUsIEZsaWNraXR5LCBUYXBMaXN0ZW5lciwgdXRpbHMgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcclxuICAgICAgcmVxdWlyZSgndGFwLWxpc3RlbmVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5ldmVudGllLFxyXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXHJcbiAgICAgIHdpbmRvdy5UYXBMaXN0ZW5lcixcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRmxpY2tpdHksIFRhcExpc3RlbmVyLCB1dGlscyApIHtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBhZ2VEb3RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIFBhZ2VEb3RzKCBwYXJlbnQgKSB7XHJcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcbn1cclxuXHJcblBhZ2VEb3RzLnByb3RvdHlwZSA9IG5ldyBUYXBMaXN0ZW5lcigpO1xyXG5cclxuUGFnZURvdHMucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjcmVhdGUgaG9sZGVyIGVsZW1lbnRcclxuICB0aGlzLmhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29sJyk7XHJcbiAgdGhpcy5ob2xkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXBhZ2UtZG90cyc7XHJcbiAgRmxpY2tpdHkuc2V0VW5zZWxlY3RhYmxlKCB0aGlzLmhvbGRlciApO1xyXG4gIC8vIGNyZWF0ZSBkb3RzLCBhcnJheSBvZiBlbGVtZW50c1xyXG4gIHRoaXMuZG90cyA9IFtdO1xyXG4gIC8vIHVwZGF0ZSBvbiBzZWxlY3RcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gIHRoaXMub25DZWxsU2VsZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfdGhpcy51cGRhdGVTZWxlY3RlZCgpO1xyXG4gIH07XHJcbiAgdGhpcy5wYXJlbnQub24oICdjZWxsU2VsZWN0JywgdGhpcy5vbkNlbGxTZWxlY3QgKTtcclxuICAvLyB0YXBcclxuICB0aGlzLm9uKCAndGFwJywgdGhpcy5vblRhcCApO1xyXG4gIC8vIHBvaW50ZXJEb3duXHJcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgZnVuY3Rpb24gb25Qb2ludGVyRG93biggYnV0dG9uLCBldmVudCApIHtcclxuICAgIF90aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24oIGV2ZW50ICk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5QYWdlRG90cy5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnNldERvdHMoKTtcclxuICB0aGlzLmJpbmRUYXAoIHRoaXMuaG9sZGVyICk7XHJcbiAgLy8gYWRkIHRvIERPTVxyXG4gIHRoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuaG9sZGVyICk7XHJcbn07XHJcblxyXG5QYWdlRG90cy5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlbW92ZSBmcm9tIERPTVxyXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuaG9sZGVyICk7XHJcbiAgVGFwTGlzdGVuZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCggdGhpcyApO1xyXG59O1xyXG5cclxuUGFnZURvdHMucHJvdG90eXBlLnNldERvdHMgPSBmdW5jdGlvbigpIHtcclxuICAvLyBnZXQgZGlmZmVyZW5jZSBiZXR3ZWVuIG51bWJlciBvZiBjZWxscyBhbmQgbnVtYmVyIG9mIGRvdHNcclxuICB2YXIgZGVsdGEgPSB0aGlzLnBhcmVudC5jZWxscy5sZW5ndGggLSB0aGlzLmRvdHMubGVuZ3RoO1xyXG4gIGlmICggZGVsdGEgPiAwICkge1xyXG4gICAgdGhpcy5hZGREb3RzKCBkZWx0YSApO1xyXG4gIH0gZWxzZSBpZiAoIGRlbHRhIDwgMCApIHtcclxuICAgIHRoaXMucmVtb3ZlRG90cyggLWRlbHRhICk7XHJcbiAgfVxyXG59O1xyXG5cclxuUGFnZURvdHMucHJvdG90eXBlLmFkZERvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XHJcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gIHZhciBuZXdEb3RzID0gW107XHJcbiAgd2hpbGUgKCBjb3VudCApIHtcclxuICAgIHZhciBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgZG90LmNsYXNzTmFtZSA9ICdkb3QnO1xyXG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvdCApO1xyXG4gICAgbmV3RG90cy5wdXNoKCBkb3QgKTtcclxuICAgIGNvdW50LS07XHJcbiAgfVxyXG4gIHRoaXMuaG9sZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xyXG4gIHRoaXMuZG90cyA9IHRoaXMuZG90cy5jb25jYXQoIG5ld0RvdHMgKTtcclxufTtcclxuXHJcblBhZ2VEb3RzLnByb3RvdHlwZS5yZW1vdmVEb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xyXG4gIC8vIHJlbW92ZSBmcm9tIHRoaXMuZG90cyBjb2xsZWN0aW9uXHJcbiAgdmFyIHJlbW92ZURvdHMgPSB0aGlzLmRvdHMuc3BsaWNlKCB0aGlzLmRvdHMubGVuZ3RoIC0gY291bnQsIGNvdW50ICk7XHJcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcmVtb3ZlRG90cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBkb3QgPSByZW1vdmVEb3RzW2ldO1xyXG4gICAgdGhpcy5ob2xkZXIucmVtb3ZlQ2hpbGQoIGRvdCApO1xyXG4gIH1cclxufTtcclxuXHJcblBhZ2VEb3RzLnByb3RvdHlwZS51cGRhdGVTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlbW92ZSBzZWxlY3RlZCBjbGFzcyBvbiBwcmV2aW91c1xyXG4gIGlmICggdGhpcy5zZWxlY3RlZERvdCApIHtcclxuICAgIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NOYW1lID0gJ2RvdCc7XHJcbiAgfVxyXG4gIC8vIGRvbid0IHByb2NlZWQgaWYgbm8gZG90c1xyXG4gIGlmICggIXRoaXMuZG90cy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuc2VsZWN0ZWREb3QgPSB0aGlzLmRvdHNbIHRoaXMucGFyZW50LnNlbGVjdGVkSW5kZXggXTtcclxuICB0aGlzLnNlbGVjdGVkRG90LmNsYXNzTmFtZSA9ICdkb3QgaXMtc2VsZWN0ZWQnO1xyXG59O1xyXG5cclxuUGFnZURvdHMucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgLy8gb25seSBjYXJlIGFib3V0IGRvdCBjbGlja3NcclxuICBpZiAoIHRhcmdldC5ub2RlTmFtZSAhPSAnTEknICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5wYXJlbnQudWlDaGFuZ2UoKTtcclxuICB2YXIgaW5kZXggPSB1dGlscy5pbmRleE9mKCB0aGlzLmRvdHMsIHRhcmdldCApO1xyXG4gIHRoaXMucGFyZW50LnNlbGVjdCggaW5kZXggKTtcclxufTtcclxuXHJcblBhZ2VEb3RzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcclxuICBwYWdlRG90czogdHJ1ZVxyXG59KTtcclxuXHJcbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZVBhZ2VEb3RzJyk7XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuX2NyZWF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhZ2VEb3RzICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLnBhZ2VEb3RzID0gbmV3IFBhZ2VEb3RzKCB0aGlzICk7XHJcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVBhZ2VEb3RzICk7XHJcbiAgdGhpcy5vbiggJ2NlbGxBZGRlZFJlbW92ZWQnLCB0aGlzLm9uQ2VsbEFkZGVkUmVtb3ZlZFBhZ2VEb3RzICk7XHJcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQYWdlRG90cyApO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnBhZ2VEb3RzLmFjdGl2YXRlKCk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUub25DZWxsQWRkZWRSZW1vdmVkUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnBhZ2VEb3RzLnNldERvdHMoKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kZWFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnBhZ2VEb3RzLmRlYWN0aXZhdGUoKTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcclxuXHJcbnJldHVybiBGbGlja2l0eTtcclxuXHJcbn0pKTtcclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2ZsaWNraXR5L2pzL3BsYXllcicsW1xyXG4gICAgICAnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsXHJcbiAgICAgICdldmVudGllL2V2ZW50aWUnLFxyXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAnLi9mbGlja2l0eSdcclxuICAgIF0sIGZ1bmN0aW9uKCBFdmVudEVtaXR0ZXIsIGV2ZW50aWUsIHV0aWxzLCBGbGlja2l0eSApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIEV2ZW50RW1pdHRlciwgZXZlbnRpZSwgdXRpbHMsIEZsaWNraXR5ICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2V2ZW50aWUnKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcclxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmV2ZW50aWUsXHJcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXHJcbiAgICAgIHdpbmRvdy5GbGlja2l0eVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2ZW50RW1pdHRlciwgZXZlbnRpZSwgdXRpbHMsIEZsaWNraXR5ICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQYWdlIFZpc2liaWxpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvVXNlcl9leHBlcmllbmNlL1VzaW5nX3RoZV9QYWdlX1Zpc2liaWxpdHlfQVBJXHJcblxyXG52YXIgaGlkZGVuUHJvcGVydHksIHZpc2liaWxpdHlFdmVudDtcclxuaWYgKCAnaGlkZGVuJyBpbiBkb2N1bWVudCApIHtcclxuICBoaWRkZW5Qcm9wZXJ0eSA9ICdoaWRkZW4nO1xyXG4gIHZpc2liaWxpdHlFdmVudCA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcclxufSBlbHNlIGlmICggJ3dlYmtpdEhpZGRlbicgaW4gZG9jdW1lbnQgKSB7XHJcbiAgaGlkZGVuUHJvcGVydHkgPSAnd2Via2l0SGlkZGVuJztcclxuICB2aXNpYmlsaXR5RXZlbnQgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBsYXllciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gUGxheWVyKCBwYXJlbnQgKSB7XHJcbiAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcclxuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAvLyB2aXNpYmlsaXR5IGNoYW5nZSBldmVudCBoYW5kbGVyXHJcbiAgaWYgKCB2aXNpYmlsaXR5RXZlbnQgKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgX3RoaXMudmlzaWJpbGl0eUNoYW5nZSgpO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcblBsYXllci5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4vLyBzdGFydCBwbGF5XHJcblBsYXllci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTtcclxuICAvLyBwbGF5aW5nIGtpbGxzIHBhdXNlc1xyXG4gIGRlbGV0ZSB0aGlzLmlzUGF1c2VkO1xyXG4gIC8vIGxpc3RlbiB0byB2aXNpYmlsaXR5IGNoYW5nZVxyXG4gIGlmICggdmlzaWJpbGl0eUV2ZW50ICkge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdmlzaWJpbGl0eUV2ZW50LCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UgKTtcclxuICB9XHJcbiAgLy8gc3RhcnQgdGlja2luZ1xyXG4gIHRoaXMudGljaygpO1xyXG59O1xyXG5cclxuUGxheWVyLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZG8gbm90IHRpY2sgaWYgcGF1c2VkIG9yIG5vdCBwbGF5aW5nXHJcbiAgaWYgKCAhdGhpcy5pc1BsYXlpbmcgfHwgdGhpcy5pc1BhdXNlZCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8ga2VlcCB0cmFjayBvZiB3aGVuIC50aWNrKClcclxuICB0aGlzLnRpY2tUaW1lID0gbmV3IERhdGUoKTtcclxuICB2YXIgdGltZSA9IHRoaXMucGFyZW50Lm9wdGlvbnMuYXV0b1BsYXk7XHJcbiAgLy8gZGVmYXVsdCB0byAzIHNlY29uZHNcclxuICB0aW1lID0gdHlwZW9mIHRpbWUgPT0gJ251bWJlcicgPyB0aW1lIDogMzAwMDtcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgX3RoaXMucGFyZW50Lm5leHQoIHRydWUgKTtcclxuICAgIF90aGlzLnRpY2soKTtcclxuICB9LCB0aW1lICk7XHJcbn07XHJcblxyXG5QbGF5ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG4gIC8vIHN0b3BwaW5nIGtpbGxzIHBhdXNlc1xyXG4gIGRlbGV0ZSB0aGlzLmlzUGF1c2VkO1xyXG4gIHRoaXMuY2xlYXIoKTtcclxuICAvLyByZW1vdmUgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRcclxuICBpZiAoIHZpc2liaWxpdHlFdmVudCApIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHZpc2liaWxpdHlFdmVudCwgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlICk7XHJcbiAgfVxyXG59O1xyXG5cclxuUGxheWVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xyXG4gIGNsZWFyVGltZW91dCggdGhpcy50aW1lb3V0ICk7XHJcbn07XHJcblxyXG5QbGF5ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLmlzUGxheWluZyApIHtcclxuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5jbGVhcigpO1xyXG4gIH1cclxufTtcclxuXHJcblBsYXllci5wcm90b3R5cGUudW5wYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlLXN0YXJ0IHBsYXkgaWYgaW4gdW5wYXVzZWQgc3RhdGVcclxuICBpZiAoIHRoaXMuaXNQYXVzZWQgKSB7XHJcbiAgICB0aGlzLnBsYXkoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBwYXVzZSBpZiBwYWdlIHZpc2liaWxpdHkgaXMgaGlkZGVuLCB1bnBhdXNlIGlmIHZpc2libGVcclxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGlzSGlkZGVuID0gZG9jdW1lbnRbIGhpZGRlblByb3BlcnR5IF07XHJcbiAgdGhpc1sgaXNIaWRkZW4gPyAncGF1c2UnIDogJ3VucGF1c2UnIF0oKTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG51dGlscy5leHRlbmQoIEZsaWNraXR5LmRlZmF1bHRzLCB7XHJcbiAgcGF1c2VBdXRvUGxheU9uSG92ZXI6IHRydWVcclxufSk7XHJcblxyXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQbGF5ZXInKTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fY3JlYXRlUGxheWVyID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKCB0aGlzICk7XHJcblxyXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQbGF5ZXIgKTtcclxuICB0aGlzLm9uKCAndWlDaGFuZ2UnLCB0aGlzLnN0b3BQbGF5ZXIgKTtcclxuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnN0b3BQbGF5ZXIgKTtcclxuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVBsYXllciApO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmFjdGl2YXRlUGxheWVyID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmF1dG9QbGF5ICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLnBsYXllci5wbGF5KCk7XHJcbiAgZXZlbnRpZS5iaW5kKCB0aGlzLmVsZW1lbnQsICdtb3VzZWVudGVyJywgdGhpcyApO1xyXG4gIHRoaXMuaXNNb3VzZWVudGVyQm91bmQgPSB0cnVlO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLnN0b3BQbGF5ZXIgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnBsYXllci5zdG9wKCk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuZGVhY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucGxheWVyLnN0b3AoKTtcclxuICBpZiAoIHRoaXMuaXNNb3VzZWVudGVyQm91bmQgKSB7XHJcbiAgICBldmVudGllLnVuYmluZCggdGhpcy5lbGVtZW50LCAnbW91c2VlbnRlcicsIHRoaXMgKTtcclxuICAgIGRlbGV0ZSB0aGlzLmlzTW91c2VlbnRlckJvdW5kO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIG1vdXNlZW50ZXIvbGVhdmUgLS0tLS0gLy9cclxuXHJcbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxyXG5GbGlja2l0eS5wcm90b3R5cGUub25tb3VzZWVudGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhdXNlQXV0b1BsYXlPbkhvdmVyICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLnBsYXllci5wYXVzZSgpO1xyXG4gIGV2ZW50aWUuYmluZCggdGhpcy5lbGVtZW50LCAnbW91c2VsZWF2ZScsIHRoaXMgKTtcclxufTtcclxuXHJcbi8vIHJlc3VtZSBhdXRvLXBsYXkgb24gaG92ZXIgb2ZmXHJcbkZsaWNraXR5LnByb3RvdHlwZS5vbm1vdXNlbGVhdmUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnBsYXllci51bnBhdXNlKCk7XHJcbiAgZXZlbnRpZS51bmJpbmQoIHRoaXMuZWxlbWVudCwgJ21vdXNlbGVhdmUnLCB0aGlzICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbkZsaWNraXR5LlBsYXllciA9IFBsYXllcjtcclxuXHJcbnJldHVybiBGbGlja2l0eTtcclxuXHJcbn0pKTtcclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2ZsaWNraXR5L2pzL2FkZC1yZW1vdmUtY2VsbCcsW1xyXG4gICAgICAnLi9mbGlja2l0eScsXHJcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcclxuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgdXRpbHMgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LkZsaWNraXR5LFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKSB7XHJcblxyXG5cclxuXHJcbi8vIGFwcGVuZCBjZWxscyB0byBhIGRvY3VtZW50IGZyYWdtZW50XHJcbmZ1bmN0aW9uIGdldENlbGxzRnJhZ21lbnQoIGNlbGxzICkge1xyXG4gIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBjZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBjZWxsID0gY2VsbHNbaV07XHJcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggY2VsbC5lbGVtZW50ICk7XHJcbiAgfVxyXG4gIHJldHVybiBmcmFnbWVudDtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkL3JlbW92ZSBjZWxsIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIEluc2VydCwgcHJlcGVuZCwgb3IgYXBwZW5kIGNlbGxzXHJcbiAqIEBwYXJhbSB7RWxlbWVudCwgQXJyYXksIE5vZGVMaXN0fSBlbGVtc1xyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4XHJcbiAqL1xyXG5GbGlja2l0eS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oIGVsZW1zLCBpbmRleCApIHtcclxuICB2YXIgY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIGVsZW1zICk7XHJcbiAgaWYgKCAhY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xyXG4gIC8vIGRlZmF1bHQgdG8gYXBwZW5kXHJcbiAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gbGVuIDogaW5kZXg7XHJcbiAgLy8gYWRkIGNlbGxzIHdpdGggZG9jdW1lbnQgZnJhZ21lbnRcclxuICB2YXIgZnJhZ21lbnQgPSBnZXRDZWxsc0ZyYWdtZW50KCBjZWxscyApO1xyXG4gIC8vIGFwcGVuZCB0byBzbGlkZXJcclxuICB2YXIgaXNBcHBlbmQgPSBpbmRleCA9PSBsZW47XHJcbiAgaWYgKCBpc0FwcGVuZCApIHtcclxuICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgaW5zZXJ0Q2VsbEVsZW1lbnQgPSB0aGlzLmNlbGxzWyBpbmRleCBdLmVsZW1lbnQ7XHJcbiAgICB0aGlzLnNsaWRlci5pbnNlcnRCZWZvcmUoIGZyYWdtZW50LCBpbnNlcnRDZWxsRWxlbWVudCApO1xyXG4gIH1cclxuICAvLyBhZGQgdG8gdGhpcy5jZWxsc1xyXG4gIGlmICggaW5kZXggPT09IDAgKSB7XHJcbiAgICAvLyBwcmVwZW5kLCBhZGQgdG8gc3RhcnRcclxuICAgIHRoaXMuY2VsbHMgPSBjZWxscy5jb25jYXQoIHRoaXMuY2VsbHMgKTtcclxuICB9IGVsc2UgaWYgKCBpc0FwcGVuZCApIHtcclxuICAgIC8vIGFwcGVuZCwgYWRkIHRvIGVuZFxyXG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBpbnNlcnQgaW4gdGhpcy5jZWxsc1xyXG4gICAgdmFyIGVuZENlbGxzID0gdGhpcy5jZWxscy5zcGxpY2UoIGluZGV4LCBsZW4gLSBpbmRleCApO1xyXG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApLmNvbmNhdCggZW5kQ2VsbHMgKTtcclxuICB9XHJcblxyXG4gIHRoaXMuX3NpemVDZWxscyggY2VsbHMgKTtcclxuXHJcbiAgdmFyIHNlbGVjdGVkSW5kZXhEZWx0YSA9IGluZGV4ID4gdGhpcy5zZWxlY3RlZEluZGV4ID8gMCA6IGNlbGxzLmxlbmd0aDtcclxuICB0aGlzLl9jZWxsQWRkZWRSZW1vdmVkKCBpbmRleCwgc2VsZWN0ZWRJbmRleERlbHRhICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgdGhpcy5jZWxscy5sZW5ndGggKTtcclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgMCApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBjZWxsc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdH0gZWxlbXNcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGNlbGxzID0gdGhpcy5nZXRDZWxscyggZWxlbXMgKTtcclxuICB2YXIgc2VsZWN0ZWRJbmRleERlbHRhID0gMDtcclxuICB2YXIgaSwgbGVuLCBjZWxsO1xyXG4gIC8vIGNhbGN1bGF0ZSBzZWxlY3RlZEluZGV4RGVsdGEsIGVhc2llciBpZiBkb25lIGluIHNlcGVyYXRlIGxvb3BcclxuICBmb3IgKCBpPTAsIGxlbiA9IGNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgY2VsbCA9IGNlbGxzW2ldO1xyXG4gICAgdmFyIHdhc0JlZm9yZSA9IHV0aWxzLmluZGV4T2YoIHRoaXMuY2VsbHMsIGNlbGwgKSA8IHRoaXMuc2VsZWN0ZWRJbmRleDtcclxuICAgIHNlbGVjdGVkSW5kZXhEZWx0YSAtPSB3YXNCZWZvcmUgPyAxIDogMDtcclxuICB9XHJcblxyXG4gIGZvciAoIGk9MCwgbGVuID0gY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICBjZWxsID0gY2VsbHNbaV07XHJcbiAgICBjZWxsLnJlbW92ZSgpO1xyXG4gICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXHJcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLmNlbGxzLCBjZWxsICk7XHJcbiAgfVxyXG5cclxuICBpZiAoIGNlbGxzLmxlbmd0aCApIHtcclxuICAgIC8vIHVwZGF0ZSBzdHVmZlxyXG4gICAgdGhpcy5fY2VsbEFkZGVkUmVtb3ZlZCggMCwgc2VsZWN0ZWRJbmRleERlbHRhICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gdXBkYXRlcyB3aGVuIGNlbGxzIGFyZSBhZGRlZCBvciByZW1vdmVkXHJcbkZsaWNraXR5LnByb3RvdHlwZS5fY2VsbEFkZGVkUmVtb3ZlZCA9IGZ1bmN0aW9uKCBjaGFuZ2VkQ2VsbEluZGV4LCBzZWxlY3RlZEluZGV4RGVsdGEgKSB7XHJcbiAgc2VsZWN0ZWRJbmRleERlbHRhID0gc2VsZWN0ZWRJbmRleERlbHRhIHx8IDA7XHJcbiAgdGhpcy5zZWxlY3RlZEluZGV4ICs9IHNlbGVjdGVkSW5kZXhEZWx0YTtcclxuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBNYXRoLm1heCggMCwgTWF0aC5taW4oIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSwgdGhpcy5zZWxlY3RlZEluZGV4ICkgKTtcclxuXHJcbiAgdGhpcy5lbWl0RXZlbnQoICdjZWxsQWRkZWRSZW1vdmVkJywgWyBjaGFuZ2VkQ2VsbEluZGV4LCBzZWxlY3RlZEluZGV4RGVsdGEgXSApO1xyXG4gIHRoaXMuY2VsbENoYW5nZSggY2hhbmdlZENlbGxJbmRleCwgdHJ1ZSApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGxvZ2ljIHRvIGJlIHJ1biBhZnRlciBhIGNlbGwncyBzaXplIGNoYW5nZXNcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtIC0gY2VsbCdzIGVsZW1lbnRcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5jZWxsU2l6ZUNoYW5nZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XHJcbiAgaWYgKCAhY2VsbCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY2VsbC5nZXRTaXplKCk7XHJcblxyXG4gIHZhciBpbmRleCA9IHV0aWxzLmluZGV4T2YoIHRoaXMuY2VsbHMsIGNlbGwgKTtcclxuICB0aGlzLmNlbGxDaGFuZ2UoIGluZGV4ICk7XHJcbn07XHJcblxyXG4vKipcclxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcclxuICogQHBhcmFtIHtJbnRlZ2VyfSBjaGFuZ2VkQ2VsbEluZGV4IC0gaW5kZXggb2YgdGhlIGNoYW5nZWQgY2VsbCwgb3B0aW9uYWxcclxuICovXHJcbkZsaWNraXR5LnByb3RvdHlwZS5jZWxsQ2hhbmdlID0gZnVuY3Rpb24oIGNoYW5nZWRDZWxsSW5kZXgsIGlzUG9zaXRpb25pbmdTbGlkZXIgKSB7XHJcbiAgdmFyIHByZXZTbGlkZWFibGVXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGg7XHJcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggY2hhbmdlZENlbGxJbmRleCApO1xyXG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XHJcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xyXG4gIC8vIHBvc2l0aW9uIHNsaWRlclxyXG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XHJcbiAgICAvLyBzaGlmdCB4IGJ5IGNoYW5nZSBpbiBzbGlkZWFibGVXaWR0aFxyXG4gICAgLy8gVE9ETyBmaXggcG9zaXRpb24gc2hpZnRzIHdoZW4gcHJlcGVuZGluZyB3LyBmcmVlU2Nyb2xsXHJcbiAgICB0aGlzLnggKz0gcHJldlNsaWRlYWJsZVdpZHRoIC0gdGhpcy5zbGlkZWFibGVXaWR0aDtcclxuICAgIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gZG8gbm90IHBvc2l0aW9uIHNsaWRlciBhZnRlciBsYXp5IGxvYWRcclxuICAgIGlmICggaXNQb3NpdGlvbmluZ1NsaWRlciApIHtcclxuICAgICAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbnJldHVybiBGbGlja2l0eTtcclxuXHJcbn0pKTtcclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2ZsaWNraXR5L2pzL2xhenlsb2FkJyxbXHJcbiAgICAgICdjbGFzc2llL2NsYXNzaWUnLFxyXG4gICAgICAnZXZlbnRpZS9ldmVudGllJyxcclxuICAgICAgJy4vZmxpY2tpdHknLFxyXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXHJcbiAgICBdLCBmdW5jdGlvbiggY2xhc3NpZSwgZXZlbnRpZSwgRmxpY2tpdHksIHV0aWxzICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBjbGFzc2llLCBldmVudGllLCBGbGlja2l0eSwgdXRpbHMgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1jbGFzc2llJyksXHJcbiAgICAgIHJlcXVpcmUoJ2V2ZW50aWUnKSxcclxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuY2xhc3NpZSxcclxuICAgICAgd2luZG93LmV2ZW50aWUsXHJcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgY2xhc3NpZSwgZXZlbnRpZSwgRmxpY2tpdHksIHV0aWxzICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVMYXp5bG9hZCcpO1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVMYXp5bG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMub24oICdjZWxsU2VsZWN0JywgdGhpcy5sYXp5TG9hZCApO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGxhenlMb2FkID0gdGhpcy5vcHRpb25zLmxhenlMb2FkO1xyXG4gIGlmICggIWxhenlMb2FkICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBnZXQgYWRqYWNlbnQgY2VsbHMsIHVzZSBsYXp5TG9hZCBvcHRpb24gZm9yIGFkamFjZW50IGNvdW50XHJcbiAgdmFyIGFkakNvdW50ID0gdHlwZW9mIGxhenlMb2FkID09ICdudW1iZXInID8gbGF6eUxvYWQgOiAwO1xyXG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKCBhZGpDb3VudCApO1xyXG4gIC8vIGdldCBsYXp5IGltYWdlcyBpbiB0aG9zZSBjZWxsc1xyXG4gIHZhciBsYXp5SW1hZ2VzID0gW107XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gY2VsbEVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGNlbGxFbGVtID0gY2VsbEVsZW1zW2ldO1xyXG4gICAgdmFyIGxhenlDZWxsSW1hZ2VzID0gZ2V0Q2VsbExhenlJbWFnZXMoIGNlbGxFbGVtICk7XHJcbiAgICBsYXp5SW1hZ2VzID0gbGF6eUltYWdlcy5jb25jYXQoIGxhenlDZWxsSW1hZ2VzICk7XHJcbiAgfVxyXG4gIC8vIGxvYWQgbGF6eSBpbWFnZXNcclxuICBmb3IgKCBpPTAsIGxlbiA9IGxhenlJbWFnZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaW1nID0gbGF6eUltYWdlc1tpXTtcclxuICAgIG5ldyBMYXp5TG9hZGVyKCBpbWcsIHRoaXMgKTtcclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKSB7XHJcbiAgLy8gY2hlY2sgaWYgY2VsbCBlbGVtZW50IGlzIGxhenkgaW1hZ2VcclxuICBpZiAoIGNlbGxFbGVtLm5vZGVOYW1lID09ICdJTUcnICYmXHJcbiAgICBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnKSApIHtcclxuICAgIHJldHVybiBbIGNlbGxFbGVtIF07XHJcbiAgfVxyXG4gIC8vIHNlbGVjdCBsYXp5IGltYWdlcyBpbiBjZWxsXHJcbiAgdmFyIGltZ3MgPSBjZWxsRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWdbZGF0YS1mbGlja2l0eS1sYXp5bG9hZF0nKTtcclxuICByZXR1cm4gdXRpbHMubWFrZUFycmF5KCBpbWdzICk7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExhenlMb2FkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBjbGFzcyB0byBoYW5kbGUgbG9hZGluZyBpbWFnZXNcclxuICovXHJcbmZ1bmN0aW9uIExhenlMb2FkZXIoIGltZywgZmxpY2tpdHkgKSB7XHJcbiAgdGhpcy5pbWcgPSBpbWc7XHJcbiAgdGhpcy5mbGlja2l0eSA9IGZsaWNraXR5O1xyXG4gIHRoaXMubG9hZCgpO1xyXG59XHJcblxyXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xyXG5cclxuTGF6eUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGV2ZW50aWUuYmluZCggdGhpcy5pbWcsICdsb2FkJywgdGhpcyApO1xyXG4gIGV2ZW50aWUuYmluZCggdGhpcy5pbWcsICdlcnJvcicsIHRoaXMgKTtcclxuICAvLyBsb2FkIGltYWdlXHJcbiAgdGhpcy5pbWcuc3JjID0gdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkJyk7XHJcbiAgLy8gcmVtb3ZlIGF0dHJcclxuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnKTtcclxufTtcclxuXHJcbkxhenlMb2FkZXIucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenlsb2FkZWQnICk7XHJcbn07XHJcblxyXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHRoaXMuY29tcGxldGUoIGV2ZW50LCAnZmxpY2tpdHktbGF6eWVycm9yJyApO1xyXG59O1xyXG5cclxuTGF6eUxvYWRlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiggZXZlbnQsIGNsYXNzTmFtZSApIHtcclxuICAvLyB1bmJpbmQgZXZlbnRzXHJcbiAgZXZlbnRpZS51bmJpbmQoIHRoaXMuaW1nLCAnbG9hZCcsIHRoaXMgKTtcclxuICBldmVudGllLnVuYmluZCggdGhpcy5pbWcsICdlcnJvcicsIHRoaXMgKTtcclxuXHJcbiAgdmFyIGNlbGwgPSB0aGlzLmZsaWNraXR5LmdldFBhcmVudENlbGwoIHRoaXMuaW1nICk7XHJcbiAgdmFyIGNlbGxFbGVtID0gY2VsbCAmJiBjZWxsLmVsZW1lbnQ7XHJcbiAgdGhpcy5mbGlja2l0eS5jZWxsU2l6ZUNoYW5nZSggY2VsbEVsZW0gKTtcclxuXHJcbiAgY2xhc3NpZS5hZGQoIHRoaXMuaW1nLCBjbGFzc05hbWUgKTtcclxuICB0aGlzLmZsaWNraXR5LmRpc3BhdGNoRXZlbnQoICdsYXp5TG9hZCcsIGV2ZW50LCBjZWxsRWxlbSApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG5GbGlja2l0eS5MYXp5TG9hZGVyID0gTGF6eUxvYWRlcjtcclxuXHJcbnJldHVybiBGbGlja2l0eTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBGbGlja2l0eSB2MS4xLjFcclxuICogVG91Y2gsIHJlc3BvbnNpdmUsIGZsaWNrYWJsZSBnYWxsZXJpZXNcclxuICpcclxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxyXG4gKiBvciBGbGlja2l0eSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXHJcbiAqXHJcbiAqIGh0dHA6Ly9mbGlja2l0eS5tZXRhZml6enkuY29cclxuICogQ29weXJpZ2h0IDIwMTUgTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHkvanMvaW5kZXgnLFtcclxuICAgICAgJy4vZmxpY2tpdHknLFxyXG4gICAgICAnLi9kcmFnJyxcclxuICAgICAgJy4vcHJldi1uZXh0LWJ1dHRvbicsXHJcbiAgICAgICcuL3BhZ2UtZG90cycsXHJcbiAgICAgICcuL3BsYXllcicsXHJcbiAgICAgICcuL2FkZC1yZW1vdmUtY2VsbCcsXHJcbiAgICAgICcuL2xhenlsb2FkJ1xyXG4gICAgXSwgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxyXG4gICAgICByZXF1aXJlKCcuL2RyYWcnKSxcclxuICAgICAgcmVxdWlyZSgnLi9wcmV2LW5leHQtYnV0dG9uJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vcGFnZS1kb3RzJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vcGxheWVyJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vYWRkLXJlbW92ZS1jZWxsJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vbGF6eWxvYWQnKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcclxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlKi9cclxuICByZXR1cm4gRmxpY2tpdHk7XHJcbn0pO1xyXG5cclxuLyohXHJcbiAqIEZsaWNraXR5IGFzTmF2Rm9yIHYxLjAuMlxyXG4gKiBlbmFibGUgYXNOYXZGb3IgZm9yIEZsaWNraXR5XHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZmxpY2tpdHktYXMtbmF2LWZvci9hcy1uYXYtZm9yJyxbXHJcbiAgICAgICdjbGFzc2llL2NsYXNzaWUnLFxyXG4gICAgICAnZmxpY2tpdHkvanMvaW5kZXgnLFxyXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXHJcbiAgICBdLCBmdW5jdGlvbiggY2xhc3NpZSwgRmxpY2tpdHksIHV0aWxzICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBjbGFzc2llLCBGbGlja2l0eSwgdXRpbHMgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1jbGFzc2llJyksXHJcbiAgICAgIHJlcXVpcmUoJ2ZsaWNraXR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5jbGFzc2llLFxyXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXHJcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGNsYXNzaWUsIEZsaWNraXR5LCB1dGlscyApIHtcclxuXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYXNOYXZGb3IgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBGbGlja2l0eS5kZWZhdWx0cy5hc05hdkZvciA9IG51bGw7XHJcblxyXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVBc05hdkZvcicpO1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVBc05hdkZvciApO1xyXG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlQXNOYXZGb3IgKTtcclxuICB0aGlzLm9uKCAnZGVzdHJveScsIHRoaXMuZGVzdHJveUFzTmF2Rm9yICk7XHJcblxyXG4gIHZhciBhc05hdkZvck9wdGlvbiA9IHRoaXMub3B0aW9ucy5hc05hdkZvcjtcclxuICBpZiAoICFhc05hdkZvck9wdGlvbiApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gSEFDSyBkbyBhc3luYywgZ2l2ZSB0aW1lIGZvciBvdGhlciBmbGlja2l0eSB0byBiZSBpbml0YWxpemVkXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBzZXRUaW1lb3V0KCBmdW5jdGlvbiBpbml0TmF2Q29tcGFuaW9uKCkge1xyXG4gICAgX3RoaXMuc2V0TmF2Q29tcGFuaW9uKCBhc05hdkZvck9wdGlvbiApO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLnNldE5hdkNvbXBhbmlvbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcclxuICB2YXIgY29tcGFuaW9uID0gRmxpY2tpdHkuZGF0YSggZWxlbSApO1xyXG4gIC8vIHN0b3AgaWYgbm8gY29tcGFuaW9uIG9yIGNvbXBhbmlvbiBpcyBzZWxmXHJcbiAgaWYgKCAhY29tcGFuaW9uIHx8IGNvbXBhbmlvbiA9PSB0aGlzICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5uYXZDb21wYW5pb24gPSBjb21wYW5pb247XHJcbiAgLy8gY29tcGFuaW9uIHNlbGVjdFxyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX3RoaXMubmF2Q29tcGFuaW9uU2VsZWN0KCk7XHJcbiAgfTtcclxuICBjb21wYW5pb24ub24oICdjZWxsU2VsZWN0JywgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCApO1xyXG4gIC8vIGNsaWNrXHJcbiAgdGhpcy5vbiggJ3N0YXRpY0NsaWNrJywgdGhpcy5vbk5hdlN0YXRpY0NsaWNrICk7XHJcblxyXG4gIHRoaXMubmF2Q29tcGFuaW9uU2VsZWN0KCk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUubmF2Q29tcGFuaW9uU2VsZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5uYXZDb21wYW5pb24gKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBpbmRleCA9IHRoaXMubmF2Q29tcGFuaW9uLnNlbGVjdGVkSW5kZXg7XHJcbiAgdGhpcy5zZWxlY3QoIGluZGV4ICk7XHJcbiAgLy8gc2V0IG5hdiBzZWxlY3RlZCBjbGFzc1xyXG4gIHRoaXMucmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50KCk7XHJcbiAgLy8gc3RvcCBpZiBjb21wYW5pb24gaGFzIG1vcmUgY2VsbHMgdGhhbiB0aGlzIG9uZVxyXG4gIGlmICggdGhpcy5zZWxlY3RlZEluZGV4ICE9IGluZGV4ICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLm5hdlNlbGVjdGVkRWxlbWVudCA9IHRoaXMuY2VsbHNbIGluZGV4IF0uZWxlbWVudDtcclxuICBjbGFzc2llLmFkZCggdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnQsICdpcy1uYXYtc2VsZWN0ZWQnICk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUuYWN0aXZhdGVBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMubmF2Q29tcGFuaW9uU2VsZWN0KCk7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUucmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNsYXNzaWUucmVtb3ZlKCB0aGlzLm5hdlNlbGVjdGVkRWxlbWVudCwgJ2lzLW5hdi1zZWxlY3RlZCcgKTtcclxuICBkZWxldGUgdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnQ7XHJcbn07XHJcblxyXG5GbGlja2l0eS5wcm90b3R5cGUub25OYXZTdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgY2VsbEVsZW1lbnQsIGNlbGxJbmRleCApIHtcclxuICBpZiAoIHR5cGVvZiBjZWxsSW5kZXggPT0gJ251bWJlcicgKSB7XHJcbiAgICB0aGlzLm5hdkNvbXBhbmlvbi5zZWxlY3QoIGNlbGxJbmRleCApO1xyXG4gIH1cclxufTtcclxuXHJcbkZsaWNraXR5LnByb3RvdHlwZS5kZWFjdGl2YXRlQXNOYXZGb3IgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudCgpO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmRlc3Ryb3lBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMubmF2Q29tcGFuaW9uICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLm5hdkNvbXBhbmlvbi5vZmYoICdjZWxsU2VsZWN0JywgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCApO1xyXG4gIHRoaXMub2ZmKCAnc3RhdGljQ2xpY2snLCB0aGlzLm9uTmF2U3RhdGljQ2xpY2sgKTtcclxuICBkZWxldGUgdGhpcy5uYXZDb21wYW5pb247XHJcbn07XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbnJldHVybiBGbGlja2l0eTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBpbWFnZXNMb2FkZWQgdjMuMi4wXHJcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXHJcbiAqIE1JVCBMaWNlbnNlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkgeyAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQnLFtcclxuICAgICAgJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxyXG4gICAgICAnZXZlbnRpZS9ldmVudGllJ1xyXG4gICAgXSwgZnVuY3Rpb24oIEV2ZW50RW1pdHRlciwgZXZlbnRpZSApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBldmVudGllICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxyXG4gICAgICByZXF1aXJlKCdldmVudGllJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuRXZlbnRFbWl0dGVyLFxyXG4gICAgICB3aW5kb3cuZXZlbnRpZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KSggd2luZG93LFxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIGZhY3RvcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbmZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBldmVudGllICkge1xyXG5cclxuXHJcblxyXG52YXIgJCA9IHdpbmRvdy5qUXVlcnk7XHJcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBleHRlbmQgb2JqZWN0c1xyXG5mdW5jdGlvbiBleHRlbmQoIGEsIGIgKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcclxuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcclxuICB9XHJcbiAgcmV0dXJuIGE7XHJcbn1cclxuXHJcbnZhciBvYmpUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmZ1bmN0aW9uIGlzQXJyYXkoIG9iaiApIHtcclxuICByZXR1cm4gb2JqVG9TdHJpbmcuY2FsbCggb2JqICkgPT0gJ1tvYmplY3QgQXJyYXldJztcclxufVxyXG5cclxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcclxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XHJcbiAgdmFyIGFyeSA9IFtdO1xyXG4gIGlmICggaXNBcnJheSggb2JqICkgKSB7XHJcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcclxuICAgIGFyeSA9IG9iajtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJyApIHtcclxuICAgIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBvYmoubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XHJcbiAgICBhcnkucHVzaCggb2JqICk7XHJcbiAgfVxyXG4gIHJldHVybiBhcnk7XHJcbn1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW1hZ2VzTG9hZGVkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmd9IGVsZW1cclxuICAgKiBAcGFyYW0ge09iamVjdCBvciBGdW5jdGlvbn0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFsd2F5cyAtIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApIHtcclxuICAgIC8vIGNvZXJjZSBJbWFnZXNMb2FkZWQoKSB3aXRob3V0IG5ldywgdG8gYmUgbmV3IEltYWdlc0xvYWRlZCgpXHJcbiAgICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcclxuICAgICAgcmV0dXJuIG5ldyBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICk7XHJcbiAgICB9XHJcbiAgICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcclxuICAgIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lbGVtZW50cyA9IG1ha2VBcnJheSggZWxlbSApO1xyXG4gICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XHJcblxyXG4gICAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICBvbkFsd2F5cyA9IG9wdGlvbnM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBleHRlbmQoIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggb25BbHdheXMgKSB7XHJcbiAgICAgIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2V0SW1hZ2VzKCk7XHJcblxyXG4gICAgaWYgKCAkICkge1xyXG4gICAgICAvLyBhZGQgalF1ZXJ5IERlZmVycmVkIG9iamVjdFxyXG4gICAgICB0aGlzLmpxRGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhBQ0sgY2hlY2sgYXN5bmMgdG8gYWxsb3cgdGltZSB0byBiaW5kIGxpc3RlbmVyc1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICBfdGhpcy5jaGVjaygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5nZXRJbWFnZXMgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaW1hZ2VzID0gW107XHJcblxyXG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICB2YXIgZWxlbSA9IHRoaXMuZWxlbWVudHNbaV07XHJcbiAgICAgIHRoaXMuYWRkRWxlbWVudEltYWdlcyggZWxlbSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxyXG4gICAqL1xyXG4gIEltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgLy8gZmlsdGVyIHNpYmxpbmdzXHJcbiAgICBpZiAoIGVsZW0ubm9kZU5hbWUgPT0gJ0lNRycgKSB7XHJcbiAgICAgIHRoaXMuYWRkSW1hZ2UoIGVsZW0gKTtcclxuICAgIH1cclxuICAgIC8vIGdldCBiYWNrZ3JvdW5kIGltYWdlIG9uIGVsZW1lbnRcclxuICAgIGlmICggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT09IHRydWUgKSB7XHJcbiAgICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmaW5kIGNoaWxkcmVuXHJcbiAgICAvLyBubyBub24tZWxlbWVudCBub2RlcywgIzE0M1xyXG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuICAgIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzWyBub2RlVHlwZSBdICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgY2hpbGRJbWdzID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcclxuICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRJbWdzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICB2YXIgaW1nID0gY2hpbGRJbWdzW2ldO1xyXG4gICAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgY2hpbGQgYmFja2dyb3VuZCBpbWFnZXNcclxuICAgIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09ICdzdHJpbmcnICkge1xyXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XHJcbiAgICAgIGZvciAoIGk9MDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGNoaWxkICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgZWxlbWVudE5vZGVUeXBlcyA9IHtcclxuICAgIDE6IHRydWUsXHJcbiAgICA5OiB0cnVlLFxyXG4gICAgMTE6IHRydWVcclxuICB9O1xyXG5cclxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZWxlbSApO1xyXG4gICAgLy8gZ2V0IHVybCBpbnNpZGUgdXJsKFwiLi4uXCIpXHJcbiAgICB2YXIgcmVVUkwgPSAvdXJsXFwoWydcIl0qKFteJ1wiXFwpXSspWydcIl0qXFwpL2dpO1xyXG4gICAgdmFyIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcclxuICAgIHdoaWxlICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcclxuICAgICAgdmFyIHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXTtcclxuICAgICAgaWYgKCB1cmwgKSB7XHJcbiAgICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcclxuICAgICAgfVxyXG4gICAgICBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gSUU4XHJcbiAgdmFyIGdldFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgfHwgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJbWFnZX0gaW1nXHJcbiAgICovXHJcbiAgSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XHJcbiAgICB2YXIgbG9hZGluZ0ltYWdlID0gbmV3IExvYWRpbmdJbWFnZSggaW1nICk7XHJcbiAgICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcclxuICB9O1xyXG5cclxuICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xyXG4gICAgdmFyIGJhY2tncm91bmQgPSBuZXcgQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XHJcbiAgICB0aGlzLmltYWdlcy5wdXNoKCBiYWNrZ3JvdW5kICk7XHJcbiAgfTtcclxuXHJcbiAgSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHRoaXMucHJvZ3Jlc3NlZENvdW50ID0gMDtcclxuICAgIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XHJcbiAgICAvLyBjb21wbGV0ZSBpZiBubyBpbWFnZXNcclxuICAgIGlmICggIXRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcclxuICAgICAgdGhpcy5jb21wbGV0ZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25Qcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSB7XHJcbiAgICAgIC8vIEhBQ0sgLSBDaHJvbWUgdHJpZ2dlcnMgZXZlbnQgYmVmb3JlIG9iamVjdCBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZC4gIzgzXHJcbiAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF90aGlzLnByb2dyZXNzKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5pbWFnZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHZhciBsb2FkaW5nSW1hZ2UgPSB0aGlzLmltYWdlc1tpXTtcclxuICAgICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcclxuICAgICAgbG9hZGluZ0ltYWdlLmNoZWNrKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcclxuICAgIHRoaXMucHJvZ3Jlc3NlZENvdW50Kys7XHJcbiAgICB0aGlzLmhhc0FueUJyb2tlbiA9IHRoaXMuaGFzQW55QnJva2VuIHx8ICFpbWFnZS5pc0xvYWRlZDtcclxuICAgIC8vIHByb2dyZXNzIGV2ZW50XHJcbiAgICB0aGlzLmVtaXQoICdwcm9ncmVzcycsIHRoaXMsIGltYWdlLCBlbGVtICk7XHJcbiAgICBpZiAoIHRoaXMuanFEZWZlcnJlZCAmJiB0aGlzLmpxRGVmZXJyZWQubm90aWZ5ICkge1xyXG4gICAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgaWYgY29tcGxldGVkXHJcbiAgICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09IHRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcclxuICAgICAgdGhpcy5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggdGhpcy5vcHRpb25zLmRlYnVnICYmIGNvbnNvbGUgKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCAncHJvZ3Jlc3M6ICcgKyBtZXNzYWdlLCBpbWFnZSwgZWxlbSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIEltYWdlc0xvYWRlZC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcclxuICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XHJcbiAgICB0aGlzLmVtaXQoIGV2ZW50TmFtZSwgdGhpcyApO1xyXG4gICAgdGhpcy5lbWl0KCAnYWx3YXlzJywgdGhpcyApO1xyXG4gICAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XHJcbiAgICAgIHZhciBqcU1ldGhvZCA9IHRoaXMuaGFzQW55QnJva2VuID8gJ3JlamVjdCcgOiAncmVzb2x2ZSc7XHJcbiAgICAgIHRoaXMuanFEZWZlcnJlZFsganFNZXRob2QgXSggdGhpcyApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBmdW5jdGlvbiBMb2FkaW5nSW1hZ2UoIGltZyApIHtcclxuICAgIHRoaXMuaW1nID0gaW1nO1xyXG4gIH1cclxuXHJcbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gSWYgY29tcGxldGUgaXMgdHJ1ZSBhbmQgYnJvd3NlciBzdXBwb3J0cyBuYXR1cmFsIHNpemVzLFxyXG4gICAgLy8gdHJ5IHRvIGNoZWNrIGZvciBpbWFnZSBzdGF0dXMgbWFudWFsbHkuXHJcbiAgICB2YXIgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XHJcbiAgICBpZiAoIGlzQ29tcGxldGUgKSB7XHJcbiAgICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcclxuICAgICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxyXG4gICAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICBldmVudGllLmJpbmQoIHRoaXMucHJveHlJbWFnZSwgJ2xvYWQnLCB0aGlzICk7XHJcbiAgICBldmVudGllLmJpbmQoIHRoaXMucHJveHlJbWFnZSwgJ2Vycm9yJywgdGhpcyApO1xyXG4gICAgLy8gYmluZCB0byBpbWFnZSBhcyB3ZWxsIGZvciBGaXJlZm94LiAjMTkxXHJcbiAgICBldmVudGllLmJpbmQoIHRoaXMuaW1nLCAnbG9hZCcsIHRoaXMgKTtcclxuICAgIGV2ZW50aWUuYmluZCggdGhpcy5pbWcsICdlcnJvcicsIHRoaXMgKTtcclxuICAgIHRoaXMucHJveHlJbWFnZS5zcmMgPSB0aGlzLmltZy5zcmM7XHJcbiAgfTtcclxuXHJcbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5nZXRJc0ltYWdlQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IHVuZGVmaW5lZDtcclxuICB9O1xyXG5cclxuICBMb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XHJcbiAgICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XHJcbiAgICB0aGlzLmVtaXQoICdwcm9ncmVzcycsIHRoaXMsIHRoaXMuaW1nLCBtZXNzYWdlICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXHJcblxyXG4gIC8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcclxuICBMb2FkaW5nSW1hZ2UucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gICAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xyXG4gICAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuY29uZmlybSggdHJ1ZSwgJ29ubG9hZCcgKTtcclxuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XHJcbiAgfTtcclxuXHJcbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmNvbmZpcm0oIGZhbHNlLCAnb25lcnJvcicgKTtcclxuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XHJcbiAgfTtcclxuXHJcbiAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcclxuICAgIGV2ZW50aWUudW5iaW5kKCB0aGlzLnByb3h5SW1hZ2UsICdsb2FkJywgdGhpcyApO1xyXG4gICAgZXZlbnRpZS51bmJpbmQoIHRoaXMucHJveHlJbWFnZSwgJ2Vycm9yJywgdGhpcyApO1xyXG4gICAgZXZlbnRpZS51bmJpbmQoIHRoaXMuaW1nLCAnbG9hZCcsIHRoaXMgKTtcclxuICAgIGV2ZW50aWUudW5iaW5kKCB0aGlzLmltZywgJ2Vycm9yJywgdGhpcyApO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJhY2tncm91bmQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgZnVuY3Rpb24gQmFja2dyb3VuZCggdXJsLCBlbGVtZW50ICkge1xyXG4gICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICB9XHJcblxyXG4gIC8vIGluaGVyaXQgTG9hZGluZ0ltYWdlIHByb3RvdHlwZVxyXG4gIEJhY2tncm91bmQucHJvdG90eXBlID0gbmV3IExvYWRpbmdJbWFnZSgpO1xyXG5cclxuICBCYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZXZlbnRpZS5iaW5kKCB0aGlzLmltZywgJ2xvYWQnLCB0aGlzICk7XHJcbiAgICBldmVudGllLmJpbmQoIHRoaXMuaW1nLCAnZXJyb3InLCB0aGlzICk7XHJcbiAgICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcclxuICAgIC8vIGNoZWNrIGlmIGltYWdlIGlzIGFscmVhZHkgY29tcGxldGVcclxuICAgIHZhciBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcclxuICAgIGlmICggaXNDb21wbGV0ZSApIHtcclxuICAgICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XHJcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgQmFja2dyb3VuZC5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBldmVudGllLnVuYmluZCggdGhpcy5pbWcsICdsb2FkJywgdGhpcyApO1xyXG4gICAgZXZlbnRpZS51bmJpbmQoIHRoaXMuaW1nLCAnZXJyb3InLCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgQmFja2dyb3VuZC5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcclxuICAgIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcclxuICAgIHRoaXMuZW1pdCggJ3Byb2dyZXNzJywgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIEltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oIGpRdWVyeSApIHtcclxuICAgIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xyXG4gICAgaWYgKCAhalF1ZXJ5ICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBzZXQgbG9jYWwgdmFyaWFibGVcclxuICAgICQgPSBqUXVlcnk7XHJcbiAgICAvLyAkKCkuaW1hZ2VzTG9hZGVkKClcclxuICAgICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIGNhbGxiYWNrICkge1xyXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBjYWxsYmFjayApO1xyXG4gICAgICByZXR1cm4gaW5zdGFuY2UuanFEZWZlcnJlZC5wcm9taXNlKCAkKHRoaXMpICk7XHJcbiAgICB9O1xyXG4gIH07XHJcbiAgLy8gdHJ5IG1ha2luZyBwbHVnaW5cclxuICBJbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgcmV0dXJuIEltYWdlc0xvYWRlZDtcclxuXHJcbn0pO1xyXG5cclxuLyohXHJcbiAqIEZsaWNraXR5IGltYWdlc0xvYWRlZCB2MS4wLjJcclxuICogZW5hYmxlcyBpbWFnZXNMb2FkZWQgb3B0aW9uIGZvciBGbGlja2l0eVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG5cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoIFtcclxuICAgICAgJ2ZsaWNraXR5L2pzL2luZGV4JyxcclxuICAgICAgJ2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQnXHJcbiAgICBdLCBmdW5jdGlvbiggRmxpY2tpdHksIGltYWdlc0xvYWRlZCApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIGltYWdlc0xvYWRlZCApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2ZsaWNraXR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ2ltYWdlc2xvYWRlZCcpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXHJcbiAgICAgIHdpbmRvdy5pbWFnZXNMb2FkZWRcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBpbWFnZXNMb2FkZWQgKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZUltYWdlc0xvYWRlZCcpO1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLl9jcmVhdGVJbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmltYWdlc0xvYWRlZCApO1xyXG59O1xyXG5cclxuRmxpY2tpdHkucHJvdG90eXBlLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMub3B0aW9ucy5pbWFnZXNMb2FkZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgZnVuY3Rpb24gb25JbWFnZXNMb2FkZWRQcm9ncmVzcyggaW5zdGFuY2UsIGltYWdlICkge1xyXG4gICAgdmFyIGNlbGwgPSBfdGhpcy5nZXRQYXJlbnRDZWxsKCBpbWFnZS5pbWcgKTtcclxuICAgIF90aGlzLmNlbGxTaXplQ2hhbmdlKCBjZWxsICYmIGNlbGwuZWxlbWVudCApO1xyXG4gICAgaWYgKCAhX3RoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICkge1xyXG4gICAgICBfdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcclxuICAgIH1cclxuICB9XHJcbiAgaW1hZ2VzTG9hZGVkKCB0aGlzLnNsaWRlciApLm9uKCAncHJvZ3Jlc3MnLCBvbkltYWdlc0xvYWRlZFByb2dyZXNzICk7XHJcbn07XHJcblxyXG5yZXR1cm4gRmxpY2tpdHk7XHJcblxyXG59KSk7XHJcbi8qIVxyXG4gKiBJc290b3BlIFBBQ0tBR0VEIHYyLjIuMlxyXG4gKlxyXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXHJcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwOi8vaXNvdG9wZS5tZXRhZml6enkuY29cclxuICogQ29weXJpZ2h0IDIwMTUgTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEJyaWRnZXQgbWFrZXMgalF1ZXJ5IHdpZGdldHNcclxuICogdjEuMS4wXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB1dGlscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG5cclxuZnVuY3Rpb24gbm9vcCgpIHt9XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBkZWZpbmVCcmlkZ2V0KCAkICkge1xyXG5cclxuLy8gYmFpbCBpZiBubyBqUXVlcnlcclxuaWYgKCAhJCApIHtcclxuICByZXR1cm47XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZE9wdGlvbk1ldGhvZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGFkZHMgb3B0aW9uIG1ldGhvZCAtPiAkKCkucGx1Z2luKCdvcHRpb24nLCB7Li4ufSlcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gUGx1Z2luQ2xhc3MgLSBjb25zdHJ1Y3RvciBjbGFzc1xyXG4gKi9cclxuZnVuY3Rpb24gYWRkT3B0aW9uTWV0aG9kKCBQbHVnaW5DbGFzcyApIHtcclxuICAvLyBkb24ndCBvdmVyd3JpdGUgb3JpZ2luYWwgb3B0aW9uIG1ldGhvZFxyXG4gIGlmICggUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIG9wdGlvbiBzZXR0ZXJcclxuICBQbHVnaW5DbGFzcy5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XHJcbiAgICAvLyBiYWlsIG91dCBpZiBub3QgYW4gb2JqZWN0XHJcbiAgICBpZiAoICEkLmlzUGxhaW5PYmplY3QoIG9wdHMgKSApe1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCggdHJ1ZSwgdGhpcy5vcHRpb25zLCBvcHRzICk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGx1Z2luIGJyaWRnZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBsb2dnaW5nIGVycm9yc1xyXG4vLyAkLmVycm9yIGJyZWFrcyBqUXVlcnkgY2hhaW5pbmdcclxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT09ICd1bmRlZmluZWQnID8gbm9vcCA6XHJcbiAgZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XHJcbiAgfTtcclxuXHJcbi8qKlxyXG4gKiBqUXVlcnkgcGx1Z2luIGJyaWRnZSwgYWNjZXNzIG1ldGhvZHMgbGlrZSAkZWxlbS5wbHVnaW4oJ21ldGhvZCcpXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBwbHVnaW4gbmFtZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXHJcbiAqL1xyXG5mdW5jdGlvbiBicmlkZ2UoIG5hbWVzcGFjZSwgUGx1Z2luQ2xhc3MgKSB7XHJcbiAgLy8gYWRkIHRvIGpRdWVyeSBmbiBuYW1lc3BhY2VcclxuICAkLmZuWyBuYW1lc3BhY2UgXSA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG4gICAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIC8vIGNhbGwgcGx1Z2luIG1ldGhvZCB3aGVuIGZpcnN0IGFyZ3VtZW50IGlzIGEgc3RyaW5nXHJcbiAgICAgIC8vIGdldCBhcmd1bWVudHMgZm9yIG1ldGhvZFxyXG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApO1xyXG5cclxuICAgICAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgICB2YXIgZWxlbSA9IHRoaXNbaV07XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UgKTtcclxuICAgICAgICBpZiAoICFpbnN0YW5jZSApIHtcclxuICAgICAgICAgIGxvZ0Vycm9yKCBcImNhbm5vdCBjYWxsIG1ldGhvZHMgb24gXCIgKyBuYW1lc3BhY2UgKyBcIiBwcmlvciB0byBpbml0aWFsaXphdGlvbjsgXCIgK1xyXG4gICAgICAgICAgICBcImF0dGVtcHRlZCB0byBjYWxsICdcIiArIG9wdGlvbnMgKyBcIidcIiApO1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggISQuaXNGdW5jdGlvbiggaW5zdGFuY2Vbb3B0aW9uc10gKSB8fCBvcHRpb25zLmNoYXJBdCgwKSA9PT0gJ18nICkge1xyXG4gICAgICAgICAgbG9nRXJyb3IoIFwibm8gc3VjaCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJyBmb3IgXCIgKyBuYW1lc3BhY2UgKyBcIiBpbnN0YW5jZVwiICk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRyaWdnZXIgbWV0aG9kIHdpdGggYXJndW1lbnRzXHJcbiAgICAgICAgdmFyIHJldHVyblZhbHVlID0gaW5zdGFuY2VbIG9wdGlvbnMgXS5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKTtcclxuXHJcbiAgICAgICAgLy8gYnJlYWsgbG9vayBhbmQgcmV0dXJuIGZpcnN0IHZhbHVlIGlmIHByb3ZpZGVkXHJcbiAgICAgICAgaWYgKCByZXR1cm5WYWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyByZXR1cm4gdGhpcyBpZiBubyByZXR1cm4gdmFsdWVcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIHRoaXMsIG5hbWVzcGFjZSApO1xyXG4gICAgICAgIGlmICggaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAvLyBhcHBseSBvcHRpb25zICYgaW5pdFxyXG4gICAgICAgICAgaW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zICk7XHJcbiAgICAgICAgICBpbnN0YW5jZS5faW5pdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBpbml0aWFsaXplIG5ldyBpbnN0YW5jZVxyXG4gICAgICAgICAgaW5zdGFuY2UgPSBuZXcgUGx1Z2luQ2xhc3MoIHRoaXMsIG9wdGlvbnMgKTtcclxuICAgICAgICAgICQuZGF0YSggdGhpcywgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGJyaWRnZXQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBjb252ZXJ0cyBhIFByb3RvdHlwaWNhbCBjbGFzcyBpbnRvIGEgcHJvcGVyIGpRdWVyeSBwbHVnaW5cclxuICogICB0aGUgY2xhc3MgbXVzdCBoYXZlIGEgLl9pbml0IG1ldGhvZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIC0gcGx1Z2luIG5hbWUsIHVzZWQgaW4gJCgpLnBsdWdpbk5hbWVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gUGx1Z2luQ2xhc3MgLSBjb25zdHJ1Y3RvciBjbGFzc1xyXG4gKi9cclxuJC5icmlkZ2V0ID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgUGx1Z2luQ2xhc3MgKSB7XHJcbiAgYWRkT3B0aW9uTWV0aG9kKCBQbHVnaW5DbGFzcyApO1xyXG4gIGJyaWRnZSggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApO1xyXG59O1xyXG5cclxucmV0dXJuICQuYnJpZGdldDtcclxuXHJcbn1cclxuXHJcbi8vIHRyYW5zcG9ydFxyXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAvLyBBTURcclxuICBkZWZpbmUoICdqcXVlcnktYnJpZGdldC9qcXVlcnkuYnJpZGdldCcsWyAnanF1ZXJ5JyBdLCBkZWZpbmVCcmlkZ2V0ICk7XHJcbn0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcclxuICBkZWZpbmVCcmlkZ2V0KCByZXF1aXJlKCdqcXVlcnknKSApO1xyXG59IGVsc2Uge1xyXG4gIC8vIGdldCBqcXVlcnkgZnJvbSBicm93c2VyIGdsb2JhbFxyXG4gIGRlZmluZUJyaWRnZXQoIHdpbmRvdy5qUXVlcnkgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyohXHJcbiAqIGV2ZW50aWUgdjEuMC42XHJcbiAqIGV2ZW50IGJpbmRpbmcgaGVscGVyXHJcbiAqICAgZXZlbnRpZS5iaW5kKCBlbGVtLCAnY2xpY2snLCBteUZuIClcclxuICogICBldmVudGllLnVuYmluZCggZWxlbSwgJ2NsaWNrJywgbXlGbiApXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbnZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxudmFyIGJpbmQgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuZnVuY3Rpb24gZ2V0SUVFdmVudCggb2JqICkge1xyXG4gIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcclxuICAvLyBhZGQgZXZlbnQudGFyZ2V0XHJcbiAgZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgb2JqO1xyXG4gIHJldHVybiBldmVudDtcclxufVxyXG5cclxuaWYgKCBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcbiAgYmluZCA9IGZ1bmN0aW9uKCBvYmosIHR5cGUsIGZuICkge1xyXG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApO1xyXG4gIH07XHJcbn0gZWxzZSBpZiAoIGRvY0VsZW0uYXR0YWNoRXZlbnQgKSB7XHJcbiAgYmluZCA9IGZ1bmN0aW9uKCBvYmosIHR5cGUsIGZuICkge1xyXG4gICAgb2JqWyB0eXBlICsgZm4gXSA9IGZuLmhhbmRsZUV2ZW50ID9cclxuICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gZ2V0SUVFdmVudCggb2JqICk7XHJcbiAgICAgICAgZm4uaGFuZGxlRXZlbnQuY2FsbCggZm4sIGV2ZW50ICk7XHJcbiAgICAgIH0gOlxyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZXZlbnQgPSBnZXRJRUV2ZW50KCBvYmogKTtcclxuICAgICAgICBmbi5jYWxsKCBvYmosIGV2ZW50ICk7XHJcbiAgICAgIH07XHJcbiAgICBvYmouYXR0YWNoRXZlbnQoIFwib25cIiArIHR5cGUsIG9ialsgdHlwZSArIGZuIF0gKTtcclxuICB9O1xyXG59XHJcblxyXG52YXIgdW5iaW5kID0gZnVuY3Rpb24oKSB7fTtcclxuXHJcbmlmICggZG9jRWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xyXG4gIHVuYmluZCA9IGZ1bmN0aW9uKCBvYmosIHR5cGUsIGZuICkge1xyXG4gICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApO1xyXG4gIH07XHJcbn0gZWxzZSBpZiAoIGRvY0VsZW0uZGV0YWNoRXZlbnQgKSB7XHJcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmouZGV0YWNoRXZlbnQoIFwib25cIiArIHR5cGUsIG9ialsgdHlwZSArIGZuIF0gKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGRlbGV0ZSBvYmpbIHR5cGUgKyBmbiBdO1xyXG4gICAgfSBjYXRjaCAoIGVyciApIHtcclxuICAgICAgLy8gY2FuJ3QgZGVsZXRlIHdpbmRvdyBvYmplY3QgcHJvcGVydGllc1xyXG4gICAgICBvYmpbIHR5cGUgKyBmbiBdID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbnZhciBldmVudGllID0ge1xyXG4gIGJpbmQ6IGJpbmQsXHJcbiAgdW5iaW5kOiB1bmJpbmRcclxufTtcclxuXHJcbi8vIC0tLS0tIG1vZHVsZSBkZWZpbml0aW9uIC0tLS0tIC8vXHJcblxyXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAvLyBBTURcclxuICBkZWZpbmUoICdldmVudGllL2V2ZW50aWUnLGV2ZW50aWUgKTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIC8vIENvbW1vbkpTXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBldmVudGllO1xyXG59IGVsc2Uge1xyXG4gIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgd2luZG93LmV2ZW50aWUgPSBldmVudGllO1xyXG59XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG4vKiFcclxuICogRXZlbnRFbWl0dGVyIHY0LjIuMTEgLSBnaXQuaW8vZWVcclxuICogVW5saWNlbnNlIC0gaHR0cDovL3VubGljZW5zZS5vcmcvXHJcbiAqIE9saXZlciBDYWxkd2VsbCAtIGh0dHA6Ly9vbGkubWUudWsvXHJcbiAqIEBwcmVzZXJ2ZVxyXG4gKi9cclxuXHJcbjsoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3MgZm9yIG1hbmFnaW5nIGV2ZW50cy5cclxuICAgICAqIENhbiBiZSBleHRlbmRlZCB0byBwcm92aWRlIGV2ZW50IGZ1bmN0aW9uYWxpdHkgaW4gb3RoZXIgY2xhc3Nlcy5cclxuICAgICAqXHJcbiAgICAgKiBAY2xhc3MgRXZlbnRFbWl0dGVyIE1hbmFnZXMgZXZlbnQgcmVnaXN0ZXJpbmcgYW5kIGVtaXR0aW5nLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7fVxyXG5cclxuICAgIC8vIFNob3J0Y3V0cyB0byBpbXByb3ZlIHNwZWVkIGFuZCBzaXplXHJcbiAgICB2YXIgcHJvdG8gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlO1xyXG4gICAgdmFyIGV4cG9ydHMgPSB0aGlzO1xyXG4gICAgdmFyIG9yaWdpbmFsR2xvYmFsVmFsdWUgPSBleHBvcnRzLkV2ZW50RW1pdHRlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgbGlzdGVuZXIgZm9yIHRoZSBldmVudCBpbiBpdHMgc3RvcmFnZSBhcnJheS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IGxpc3RlbmVycyBBcnJheSBvZiBsaXN0ZW5lcnMgdG8gc2VhcmNoIHRocm91Z2guXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gbG9vayBmb3IuXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEluZGV4IG9mIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIsIC0xIGlmIG5vdCBmb3VuZFxyXG4gICAgICogQGFwaSBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnMsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdmFyIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBhIG1ldGhvZCB3aGlsZSBrZWVwaW5nIHRoZSBjb250ZXh0IGNvcnJlY3QsIHRvIGFsbG93IGZvciBvdmVyd3JpdGluZyBvZiB0YXJnZXQgbWV0aG9kLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgbWV0aG9kLlxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBhbGlhc2VkIG1ldGhvZFxyXG4gICAgICogQGFwaSBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFsaWFzKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYWxpYXNDbG9zdXJlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1tuYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0ZW5lciBhcnJheSBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cclxuICAgICAqIFdpbGwgaW5pdGlhbGlzZSB0aGUgZXZlbnQgb2JqZWN0IGFuZCBsaXN0ZW5lciBhcnJheXMgaWYgcmVxdWlyZWQuXHJcbiAgICAgKiBXaWxsIHJldHVybiBhbiBvYmplY3QgaWYgeW91IHVzZSBhIHJlZ2V4IHNlYXJjaC4gVGhlIG9iamVjdCBjb250YWlucyBrZXlzIGZvciBlYWNoIG1hdGNoZWQgZXZlbnQuIFNvIC9iYVtyel0vIG1pZ2h0IHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBiYXIgYW5kIGJhei4gQnV0IG9ubHkgaWYgeW91IGhhdmUgZWl0aGVyIGRlZmluZWQgdGhlbSB3aXRoIGRlZmluZUV2ZW50IG9yIGFkZGVkIHNvbWUgbGlzdGVuZXJzIHRvIHRoZW0uXHJcbiAgICAgKiBFYWNoIHByb3BlcnR5IGluIHRoZSBvYmplY3QgcmVzcG9uc2UgaXMgYW4gYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfE9iamVjdH0gQWxsIGxpc3RlbmVyIGZ1bmN0aW9ucyBmb3IgdGhlIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICBwcm90by5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZXZ0KSB7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xyXG4gICAgICAgIHZhciByZXNwb25zZTtcclxuICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYSBjb25jYXRlbmF0ZWQgYXJyYXkgb2YgYWxsIG1hdGNoaW5nIGV2ZW50cyBpZlxyXG4gICAgICAgIC8vIHRoZSBzZWxlY3RvciBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cclxuICAgICAgICBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0ge307XHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2dC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldID0gZXZlbnRzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gZXZlbnRzW2V2dF0gfHwgKGV2ZW50c1tldnRdID0gW10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgbGlzdCBvZiBsaXN0ZW5lciBvYmplY3RzIGFuZCBmbGF0dGVucyBpdCBpbnRvIGEgbGlzdCBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gbGlzdGVuZXJzIFJhdyBsaXN0ZW5lciBvYmplY3RzLlxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb25bXX0gSnVzdCB0aGUgbGlzdGVuZXIgZnVuY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBwcm90by5mbGF0dGVuTGlzdGVuZXJzID0gZnVuY3Rpb24gZmxhdHRlbkxpc3RlbmVycyhsaXN0ZW5lcnMpIHtcclxuICAgICAgICB2YXIgZmxhdExpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIHZhciBpO1xyXG5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGZsYXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcnNbaV0ubGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZsYXRMaXN0ZW5lcnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2hlcyB0aGUgcmVxdWVzdGVkIGxpc3RlbmVycyB2aWEgZ2V0TGlzdGVuZXJzIGJ1dCB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHJlc3VsdHMgaW5zaWRlIGFuIG9iamVjdC4gVGhpcyBpcyBtYWlubHkgZm9yIGludGVybmFsIHVzZSBidXQgb3RoZXJzIG1heSBmaW5kIGl0IHVzZWZ1bC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZXR1cm4gdGhlIGxpc3RlbmVycyBmcm9tLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBpbiBhbiBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmdldExpc3RlbmVyc0FzT2JqZWN0ID0gZnVuY3Rpb24gZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICBpZiAobGlzdGVuZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcclxuICAgICAgICAgICAgcmVzcG9uc2VbZXZ0XSA9IGxpc3RlbmVycztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXNwb25zZSB8fCBsaXN0ZW5lcnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAgICAgKiBUaGUgbGlzdGVuZXIgd2lsbCBub3QgYmUgYWRkZWQgaWYgaXQgaXMgYSBkdXBsaWNhdGUuXHJcbiAgICAgKiBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGl0IGlzIGNhbGxlZC5cclxuICAgICAqIElmIHlvdSBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lIHRoZW4gdGhlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcklzV3JhcHBlZCA9IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ29iamVjdCc7XHJcbiAgICAgICAgdmFyIGtleTtcclxuXHJcbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1trZXldLnB1c2gobGlzdGVuZXJJc1dyYXBwZWQgPyBsaXN0ZW5lciA6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgb25jZTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiBhZGRMaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBwcm90by5vbiA9IGFsaWFzKCdhZGRMaXN0ZW5lcicpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VtaS1hbGlhcyBvZiBhZGRMaXN0ZW5lci4gSXQgd2lsbCBhZGQgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmVcclxuICAgICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBhZnRlciBpdHMgZmlyc3QgZXhlY3V0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5hZGRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRPbmNlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZExpc3RlbmVyKGV2dCwge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICAgICAgICAgIG9uY2U6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiBhZGRPbmNlTGlzdGVuZXIuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLm9uY2UgPSBhbGlhcygnYWRkT25jZUxpc3RlbmVyJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIGFuIGV2ZW50IG5hbWUuIFRoaXMgaXMgcmVxdWlyZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgcmVnZXggdG8gYWRkIGEgbGlzdGVuZXIgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIElmIHlvdSBkb24ndCBkbyB0aGlzIHRoZW4gaG93IGRvIHlvdSBleHBlY3QgaXQgdG8ga25vdyB3aGF0IGV2ZW50IHRvIGFkZCB0bz8gU2hvdWxkIGl0IGp1c3QgYWRkIHRvIGV2ZXJ5IHBvc3NpYmxlIG1hdGNoIGZvciBhIHJlZ2V4PyBOby4gVGhhdCBpcyBzY2FyeSBhbmQgYmFkLlxyXG4gICAgICogWW91IG5lZWQgdG8gdGVsbCBpdCB3aGF0IGV2ZW50IG5hbWVzIHNob3VsZCBiZSBtYXRjaGVkIGJ5IGEgcmVnZXguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBjcmVhdGUuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZGVmaW5lRXZlbnQgPSBmdW5jdGlvbiBkZWZpbmVFdmVudChldnQpIHtcclxuICAgICAgICB0aGlzLmdldExpc3RlbmVycyhldnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZXMgZGVmaW5lRXZlbnQgdG8gZGVmaW5lIG11bHRpcGxlIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBldnRzIEFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRvIGRlZmluZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5kZWZpbmVFdmVudHMgPSBmdW5jdGlvbiBkZWZpbmVFdmVudHMoZXZ0cykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZ0cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlZmluZUV2ZW50KGV2dHNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZnVuY3Rpb24gZnJvbSB0aGUgc3BlY2lmaWVkIGV2ZW50LlxyXG4gICAgICogV2hlbiBwYXNzZWQgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUsIGl0IHdpbGwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50LlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XHJcbiAgICAgICAgdmFyIGluZGV4O1xyXG4gICAgICAgIHZhciBrZXk7XHJcblxyXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVyc1trZXldLCBsaXN0ZW5lcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1trZXldLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIHJlbW92ZUxpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHByb3RvLm9mZiA9IGFsaWFzKCdyZW1vdmVMaXN0ZW5lcicpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXHJcbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZCB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBhZGQgdGhlIGFycmF5IG9mIGxpc3RlbmVycyB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKiBZZWFoLCB0aGlzIGZ1bmN0aW9uIGRvZXMgcXVpdGUgYSBiaXQuIFRoYXQncyBwcm9iYWJseSBhIGJhZCB0aGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xyXG4gICAgICAgIC8vIFBhc3MgdGhyb3VnaCB0byBtYW5pcHVsYXRlTGlzdGVuZXJzXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyhmYWxzZSwgZXZ0LCBsaXN0ZW5lcnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgbGlzdGVuZXJzIGluIGJ1bGsgdXNpbmcgdGhlIG1hbmlwdWxhdGVMaXN0ZW5lcnMgbWV0aG9kLlxyXG4gICAgICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgeW91IGNhbiByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIHJlbW92ZWQuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byByZW1vdmUgdGhlIGxpc3RlbmVycyBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byByZW1vdmUuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKGV2dCwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRvIG1hbmlwdWxhdGVMaXN0ZW5lcnNcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKHRydWUsIGV2dCwgbGlzdGVuZXJzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFZGl0cyBsaXN0ZW5lcnMgaW4gYnVsay4gVGhlIGFkZExpc3RlbmVycyBhbmQgcmVtb3ZlTGlzdGVuZXJzIG1ldGhvZHMgYm90aCB1c2UgdGhpcyB0byBkbyB0aGVpciBqb2IuIFlvdSBzaG91bGQgcmVhbGx5IHVzZSB0aG9zZSBpbnN0ZWFkLCB0aGlzIGlzIGEgbGl0dGxlIGxvd2VyIGxldmVsLlxyXG4gICAgICogVGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgZGV0ZXJtaW5lIGlmIHRoZSBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgKHRydWUpIG9yIGFkZGVkIChmYWxzZSkuXHJcbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIGFkZGVkL3JlbW92ZWQuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYW5pcHVsYXRlIHRoZSBsaXN0ZW5lcnMgb2YgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIFRydWUgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIGxpc3RlbmVycywgZmFsc2UgaWYgeW91IHdhbnQgdG8gYWRkLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gZXZ0IEFuIGV2ZW50IG5hbWUgaWYgeW91IHdpbGwgcGFzcyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgbmV4dC4gQW4gb2JqZWN0IGlmIHlvdSB3aXNoIHRvIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIGFkZC9yZW1vdmUuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ubWFuaXB1bGF0ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIG1hbmlwdWxhdGVMaXN0ZW5lcnMocmVtb3ZlLCBldnQsIGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICB2YXIgc2luZ2xlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lciA6IHRoaXMuYWRkTGlzdGVuZXI7XHJcbiAgICAgICAgdmFyIG11bHRpcGxlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lcnMgOiB0aGlzLmFkZExpc3RlbmVycztcclxuXHJcbiAgICAgICAgLy8gSWYgZXZ0IGlzIGFuIG9iamVjdCB0aGVuIHBhc3MgZWFjaCBvZiBpdHMgcHJvcGVydGllcyB0byB0aGlzIG1ldGhvZFxyXG4gICAgICAgIGlmICh0eXBlb2YgZXZ0ID09PSAnb2JqZWN0JyAmJiAhKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgICAgICAgICAgZm9yIChpIGluIGV2dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSAmJiAodmFsdWUgPSBldnRbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyB0aGUgc2luZ2xlIGxpc3RlbmVyIHN0cmFpZ2h0IHRocm91Z2ggdG8gdGhlIHNpbmd1bGFyIG1ldGhvZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHBhc3MgYmFjayB0byB0aGUgbXVsdGlwbGUgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUuY2FsbCh0aGlzLCBpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTbyBldnQgbXVzdCBiZSBhIHN0cmluZ1xyXG4gICAgICAgICAgICAvLyBBbmQgbGlzdGVuZXJzIG11c3QgYmUgYW4gYXJyYXkgb2YgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgIC8vIExvb3Agb3ZlciBpdCBhbmQgcGFzcyBlYWNoIG9uZSB0byB0aGUgbXVsdGlwbGUgbWV0aG9kXHJcbiAgICAgICAgICAgIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBldnQsIGxpc3RlbmVyc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIGEgc3BlY2lmaWVkIGV2ZW50LlxyXG4gICAgICogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IGFuIGV2ZW50IHRoZW4gYWxsIGxpc3RlbmVycyB3aWxsIGJlIHJlbW92ZWQuXHJcbiAgICAgKiBUaGF0IG1lYW5zIGV2ZXJ5IGV2ZW50IHdpbGwgYmUgZW1wdGllZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVnZXggdG8gcmVtb3ZlIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IFtldnRdIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvci4gV2lsbCByZW1vdmUgZnJvbSBldmVyeSBldmVudCBpZiBub3QgcGFzc2VkLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZXZ0KSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgZXZ0O1xyXG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9nZXRFdmVudHMoKTtcclxuICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgZGlmZmVyZW50IHRoaW5ncyBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIGV2dFxyXG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFxyXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW2V2dF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGV2ZW50cyBtYXRjaGluZyB0aGUgcmVnZXguXHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2dC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGluIGFsbCBldmVudHNcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIHJlbW92ZUV2ZW50LlxyXG4gICAgICpcclxuICAgICAqIEFkZGVkIHRvIG1pcnJvciB0aGUgbm9kZSBBUEkuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbW92ZUFsbExpc3RlbmVycyA9IGFsaWFzKCdyZW1vdmVFdmVudCcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgYW4gZXZlbnQgb2YgeW91ciBjaG9pY2UuXHJcbiAgICAgKiBXaGVuIGVtaXR0ZWQsIGV2ZXJ5IGxpc3RlbmVyIGF0dGFjaGVkIHRvIHRoYXQgZXZlbnQgd2lsbCBiZSBleGVjdXRlZC5cclxuICAgICAqIElmIHlvdSBwYXNzIHRoZSBvcHRpb25hbCBhcmd1bWVudCBhcnJheSB0aGVuIHRob3NlIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCB0byBldmVyeSBsaXN0ZW5lciB1cG9uIGV4ZWN1dGlvbi5cclxuICAgICAqIEJlY2F1c2UgaXQgdXNlcyBgYXBwbHlgLCB5b3VyIGFycmF5IG9mIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCBhcyBpZiB5b3Ugd3JvdGUgdGhlbSBvdXQgc2VwYXJhdGVseS5cclxuICAgICAqIFNvIHRoZXkgd2lsbCBub3QgYXJyaXZlIHdpdGhpbiB0aGUgYXJyYXkgb24gdGhlIG90aGVyIHNpZGUsIHRoZXkgd2lsbCBiZSBzZXBhcmF0ZS5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIHRvIGVtaXQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXSBPcHRpb25hbCBhcnJheSBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggbGlzdGVuZXIuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24gZW1pdEV2ZW50KGV2dCwgYXJncykge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVyO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpID0gbGlzdGVuZXJzW2tleV0ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJucyB0cnVlIHRoZW4gaXQgc2hhbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCBlaXRoZXIgd2l0aCBhIGJhc2ljIGNhbGwgb3IgYW4gYXBwbHkgaWYgdGhlcmUgaXMgYW4gYXJncyBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJzW2tleV1baV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lci5vbmNlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGxpc3RlbmVyLmxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3MgfHwgW10pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IHRoaXMuX2dldE9uY2VSZXR1cm5WYWx1ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lci5saXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiBlbWl0RXZlbnRcclxuICAgICAqL1xyXG4gICAgcHJvdG8udHJpZ2dlciA9IGFsaWFzKCdlbWl0RXZlbnQnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1YnRseSBkaWZmZXJlbnQgZnJvbSBlbWl0RXZlbnQgaW4gdGhhdCBpdCB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyBvbiB0byB0aGUgbGlzdGVuZXJzLCBhcyBvcHBvc2VkIHRvIHRha2luZyBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMgdG8gcGFzcyBvbi5cclxuICAgICAqIEFzIHdpdGggZW1pdEV2ZW50LCB5b3UgY2FuIHBhc3MgYSByZWdleCBpbiBwbGFjZSBvZiB0aGUgZXZlbnQgbmFtZSB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBlbWl0IGFuZCBleGVjdXRlIGxpc3RlbmVycyBmb3IuXHJcbiAgICAgKiBAcGFyYW0gey4uLip9IE9wdGlvbmFsIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbWl0RXZlbnQoZXZ0LCBhcmdzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZiBhXHJcbiAgICAgKiBsaXN0ZW5lcnMgcmV0dXJuIHZhbHVlIG1hdGNoZXMgdGhlIG9uZSBzZXQgaGVyZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZFxyXG4gICAgICogYWZ0ZXIgZXhlY3V0aW9uLiBUaGlzIHZhbHVlIGRlZmF1bHRzIHRvIHRydWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlIHRvIGNoZWNrIGZvciB3aGVuIGV4ZWN1dGluZyBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc2V0T25jZVJldHVyblZhbHVlID0gZnVuY3Rpb24gc2V0T25jZVJldHVyblZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fb25jZVJldHVyblZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2hlcyB0aGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBhZ2FpbnN0IHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy4gSWZcclxuICAgICAqIHRoZSBsaXN0ZW5lcnMgcmV0dXJuIHZhbHVlIG1hdGNoZXMgdGhpcyBvbmUgdGhlbiBpdCBzaG91bGQgYmUgcmVtb3ZlZFxyXG4gICAgICogYXV0b21hdGljYWxseS4gSXQgd2lsbCByZXR1cm4gdHJ1ZSBieSBkZWZhdWx0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4geyp8Qm9vbGVhbn0gVGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgZm9yIG9yIHRoZSBkZWZhdWx0LCB0cnVlLlxyXG4gICAgICogQGFwaSBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHByb3RvLl9nZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBfZ2V0T25jZVJldHVyblZhbHVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KCdfb25jZVJldHVyblZhbHVlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uY2VSZXR1cm5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBldmVudHMgb2JqZWN0IGFuZCBjcmVhdGVzIG9uZSBpZiByZXF1aXJlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBldmVudHMgc3RvcmFnZSBvYmplY3QuXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcHJvdG8uX2dldEV2ZW50cyA9IGZ1bmN0aW9uIF9nZXRFdmVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cyB8fCAodGhpcy5fZXZlbnRzID0ge30pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldmVydHMgdGhlIGdsb2JhbCB7QGxpbmsgRXZlbnRFbWl0dGVyfSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhpcyB2ZXJzaW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBOb24gY29uZmxpY3RpbmcgRXZlbnRFbWl0dGVyIGNsYXNzLlxyXG4gICAgICovXHJcbiAgICBFdmVudEVtaXR0ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XHJcbiAgICAgICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBvcmlnaW5hbEdsb2JhbFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEV4cG9zZSB0aGUgY2xhc3MgZWl0aGVyIHZpYSBBTUQsIENvbW1vbkpTIG9yIHRoZSBnbG9iYWwgb2JqZWN0XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKCdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxbXSxmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBleHBvcnRzLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcclxuICAgIH1cclxufS5jYWxsKHRoaXMpKTtcclxuXHJcbi8qIVxyXG4gKiBnZXRTdHlsZVByb3BlcnR5IHYxLjAuNFxyXG4gKiBvcmlnaW5hbCBieSBrYW5nYXhcclxuICogaHR0cDovL3BlcmZlY3Rpb25raWxscy5jb20vZmVhdHVyZS10ZXN0aW5nLWNzcy1wcm9wZXJ0aWVzL1xyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgZXhwb3J0czogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcblxyXG5cclxudmFyIHByZWZpeGVzID0gJ1dlYmtpdCBNb3ogbXMgTXMgTycuc3BsaXQoJyAnKTtcclxudmFyIGRvY0VsZW1TdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTtcclxuXHJcbmZ1bmN0aW9uIGdldFN0eWxlUHJvcGVydHkoIHByb3BOYW1lICkge1xyXG4gIGlmICggIXByb3BOYW1lICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gdGVzdCBzdGFuZGFyZCBwcm9wZXJ0eSBmaXJzdFxyXG4gIGlmICggdHlwZW9mIGRvY0VsZW1TdHlsZVsgcHJvcE5hbWUgXSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICByZXR1cm4gcHJvcE5hbWU7XHJcbiAgfVxyXG5cclxuICAvLyBjYXBpdGFsaXplXHJcbiAgcHJvcE5hbWUgPSBwcm9wTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnNsaWNlKDEpO1xyXG5cclxuICAvLyB0ZXN0IHZlbmRvciBzcGVjaWZpYyBwcm9wZXJ0aWVzXHJcbiAgdmFyIHByZWZpeGVkO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHByZWZpeGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIHByb3BOYW1lO1xyXG4gICAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcmVmaXhlZCBdID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgcmV0dXJuIHByZWZpeGVkO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gdHJhbnNwb3J0XHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggJ2dldC1zdHlsZS1wcm9wZXJ0eS9nZXQtc3R5bGUtcHJvcGVydHknLFtdLGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGdldFN0eWxlUHJvcGVydHk7XHJcbiAgfSk7XHJcbn0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcclxuICAvLyBDb21tb25KUyBmb3IgQ29tcG9uZW50XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRTdHlsZVByb3BlcnR5O1xyXG59IGVsc2Uge1xyXG4gIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgd2luZG93LmdldFN0eWxlUHJvcGVydHkgPSBnZXRTdHlsZVByb3BlcnR5O1xyXG59XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG4vKiFcclxuICogZ2V0U2l6ZSB2MS4yLjJcclxuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIGV4cG9ydHM6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgY29uc29sZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgdW5kZWZpbmVkICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxyXG5mdW5jdGlvbiBnZXRTdHlsZVNpemUoIHZhbHVlICkge1xyXG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xyXG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxyXG4gIHZhciBpc1ZhbGlkID0gdmFsdWUuaW5kZXhPZignJScpID09PSAtMSAmJiAhaXNOYU4oIG51bSApO1xyXG4gIHJldHVybiBpc1ZhbGlkICYmIG51bTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9vcCgpIHt9XHJcblxyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcclxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcclxuICB9O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWVhc3VyZW1lbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgbWVhc3VyZW1lbnRzID0gW1xyXG4gICdwYWRkaW5nTGVmdCcsXHJcbiAgJ3BhZGRpbmdSaWdodCcsXHJcbiAgJ3BhZGRpbmdUb3AnLFxyXG4gICdwYWRkaW5nQm90dG9tJyxcclxuICAnbWFyZ2luTGVmdCcsXHJcbiAgJ21hcmdpblJpZ2h0JyxcclxuICAnbWFyZ2luVG9wJyxcclxuICAnbWFyZ2luQm90dG9tJyxcclxuICAnYm9yZGVyTGVmdFdpZHRoJyxcclxuICAnYm9yZGVyUmlnaHRXaWR0aCcsXHJcbiAgJ2JvcmRlclRvcFdpZHRoJyxcclxuICAnYm9yZGVyQm90dG9tV2lkdGgnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBnZXRaZXJvU2l6ZSgpIHtcclxuICB2YXIgc2l6ZSA9IHtcclxuICAgIHdpZHRoOiAwLFxyXG4gICAgaGVpZ2h0OiAwLFxyXG4gICAgaW5uZXJXaWR0aDogMCxcclxuICAgIGlubmVySGVpZ2h0OiAwLFxyXG4gICAgb3V0ZXJXaWR0aDogMCxcclxuICAgIG91dGVySGVpZ2h0OiAwXHJcbiAgfTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBtZWFzdXJlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XHJcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcclxuICB9XHJcbiAgcmV0dXJuIHNpemU7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZGVmaW5lR2V0U2l6ZSggZ2V0U3R5bGVQcm9wZXJ0eSApIHtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgaXNTZXR1cCA9IGZhbHNlO1xyXG5cclxudmFyIGdldFN0eWxlLCBib3hTaXppbmdQcm9wLCBpc0JveFNpemVPdXRlcjtcclxuXHJcbi8qKlxyXG4gKiBzZXR1cCB2YXJzIGFuZCBmdW5jdGlvbnNcclxuICogZG8gaXQgb24gaW5pdGlhbCBnZXRTaXplKCksIHJhdGhlciB0aGFuIG9uIHNjcmlwdCBsb2FkXHJcbiAqIEZvciBGaXJlZm94IGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcclxuICovXHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gIC8vIHNldHVwIG9uY2VcclxuICBpZiAoIGlzU2V0dXAgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlzU2V0dXAgPSB0cnVlO1xyXG5cclxuICB2YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xyXG4gIGdldFN0eWxlID0gKCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBnZXRTdHlsZUZuID0gZ2V0Q29tcHV0ZWRTdHlsZSA/XHJcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XHJcbiAgICAgIH0gOlxyXG4gICAgICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0U3R5bGUoIGVsZW0gKSB7XHJcbiAgICAgICAgdmFyIHN0eWxlID0gZ2V0U3R5bGVGbiggZWxlbSApO1xyXG4gICAgICAgIGlmICggIXN0eWxlICkge1xyXG4gICAgICAgICAgbG9nRXJyb3IoICdTdHlsZSByZXR1cm5lZCAnICsgc3R5bGUgK1xyXG4gICAgICAgICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcclxuICAgICAgICAgICAgJ1NlZSBodHRwOi8vYml0Lmx5L2dldHNpemVidWcxJyApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3R5bGU7XHJcbiAgICAgIH07XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYm94IHNpemluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBib3hTaXppbmdQcm9wID0gZ2V0U3R5bGVQcm9wZXJ0eSgnYm94U2l6aW5nJyk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdlYktpdCBtZWFzdXJlcyB0aGUgb3V0ZXItd2lkdGggb24gc3R5bGUud2lkdGggb24gYm9yZGVyLWJveCBlbGVtc1xyXG4gICAqIElFICYgRmlyZWZveCBtZWFzdXJlcyB0aGUgaW5uZXItd2lkdGhcclxuICAgKi9cclxuICBpZiAoIGJveFNpemluZ1Byb3AgKSB7XHJcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xyXG4gICAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMXB4IDJweCAzcHggNHB4JztcclxuICAgIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XHJcbiAgICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcclxuICAgIGRpdi5zdHlsZVsgYm94U2l6aW5nUHJvcCBdID0gJ2JvcmRlci1ib3gnO1xyXG5cclxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcclxuICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCBkaXYgKTtcclxuXHJcbiAgICBpc0JveFNpemVPdXRlciA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKSA9PT0gMjAwO1xyXG4gICAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcclxuICBzZXR1cCgpO1xyXG5cclxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xyXG4gIH1cclxuXHJcbiAgLy8gZG8gbm90IHByb2NlZWQgb24gbm9uLW9iamVjdHNcclxuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9PSAnb2JqZWN0JyB8fCAhZWxlbS5ub2RlVHlwZSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCBlbGVtICk7XHJcblxyXG4gIC8vIGlmIGhpZGRlbiwgZXZlcnl0aGluZyBpcyAwXHJcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgKSB7XHJcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcclxuICB9XHJcblxyXG4gIHZhciBzaXplID0ge307XHJcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XHJcbiAgc2l6ZS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9ICEhKCBib3hTaXppbmdQcm9wICYmXHJcbiAgICBzdHlsZVsgYm94U2l6aW5nUHJvcCBdICYmIHN0eWxlWyBib3hTaXppbmdQcm9wIF0gPT09ICdib3JkZXItYm94JyApO1xyXG5cclxuICAvLyBnZXQgYWxsIG1lYXN1cmVtZW50c1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgIHZhciB2YWx1ZSA9IHN0eWxlWyBtZWFzdXJlbWVudCBdO1xyXG4gICAgdmFsdWUgPSBtdW5nZU5vblBpeGVsKCBlbGVtLCB2YWx1ZSApO1xyXG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcclxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAhaXNOYU4oIG51bSApID8gbnVtIDogMDtcclxuICB9XHJcblxyXG4gIHZhciBwYWRkaW5nV2lkdGggPSBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5wYWRkaW5nUmlnaHQ7XHJcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XHJcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcclxuICB2YXIgbWFyZ2luSGVpZ2h0ID0gc2l6ZS5tYXJnaW5Ub3AgKyBzaXplLm1hcmdpbkJvdHRvbTtcclxuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcclxuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XHJcblxyXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xyXG5cclxuICAvLyBvdmVyd3JpdGUgd2lkdGggYW5kIGhlaWdodCBpZiB3ZSBjYW4gZ2V0IGl0IGZyb20gc3R5bGVcclxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcclxuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xyXG4gICAgc2l6ZS53aWR0aCA9IHN0eWxlV2lkdGggK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICB9XHJcblxyXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XHJcbiAgaWYgKCBzdHlsZUhlaWdodCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcclxuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxyXG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuICB9XHJcblxyXG4gIHNpemUuaW5uZXJXaWR0aCA9IHNpemUud2lkdGggLSAoIHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XHJcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XHJcblxyXG4gIHNpemUub3V0ZXJXaWR0aCA9IHNpemUud2lkdGggKyBtYXJnaW5XaWR0aDtcclxuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XHJcblxyXG4gIHJldHVybiBzaXplO1xyXG59XHJcblxyXG4vLyBJRTggcmV0dXJucyBwZXJjZW50IHZhbHVlcywgbm90IHBpeGVsc1xyXG4vLyB0YWtlbiBmcm9tIGpRdWVyeSdzIGN1ckNTU1xyXG5mdW5jdGlvbiBtdW5nZU5vblBpeGVsKCBlbGVtLCB2YWx1ZSApIHtcclxuICAvLyBJRTggYW5kIGhhcyBwZXJjZW50IHZhbHVlXHJcbiAgaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSB8fCB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuICB2YXIgc3R5bGUgPSBlbGVtLnN0eWxlO1xyXG4gIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcclxuICB2YXIgbGVmdCA9IHN0eWxlLmxlZnQ7XHJcbiAgdmFyIHJzID0gZWxlbS5ydW50aW1lU3R5bGU7XHJcbiAgdmFyIHJzTGVmdCA9IHJzICYmIHJzLmxlZnQ7XHJcblxyXG4gIC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcclxuICBpZiAoIHJzTGVmdCApIHtcclxuICAgIHJzLmxlZnQgPSBlbGVtLmN1cnJlbnRTdHlsZS5sZWZ0O1xyXG4gIH1cclxuICBzdHlsZS5sZWZ0ID0gdmFsdWU7XHJcbiAgdmFsdWUgPSBzdHlsZS5waXhlbExlZnQ7XHJcblxyXG4gIC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcclxuICBzdHlsZS5sZWZ0ID0gbGVmdDtcclxuICBpZiAoIHJzTGVmdCApIHtcclxuICAgIHJzLmxlZnQgPSByc0xlZnQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbnJldHVybiBnZXRTaXplO1xyXG5cclxufVxyXG5cclxuLy8gdHJhbnNwb3J0XHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRCBmb3IgUmVxdWlyZUpTXHJcbiAgZGVmaW5lKCAnZ2V0LXNpemUvZ2V0LXNpemUnLFsgJ2dldC1zdHlsZS1wcm9wZXJ0eS9nZXQtc3R5bGUtcHJvcGVydHknIF0sIGRlZmluZUdldFNpemUgKTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIC8vIENvbW1vbkpTIGZvciBDb21wb25lbnRcclxuICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluZUdldFNpemUoIHJlcXVpcmUoJ2Rlc2FuZHJvLWdldC1zdHlsZS1wcm9wZXJ0eScpICk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZ2V0U2l6ZSA9IGRlZmluZUdldFNpemUoIHdpbmRvdy5nZXRTdHlsZVByb3BlcnR5ICk7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBkb2NSZWFkeSB2MS4wLjRcclxuICogQ3Jvc3MgYnJvd3NlciBET01Db250ZW50TG9hZGVkIGV2ZW50IGVtaXR0ZXJcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuXHJcblxyXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XHJcbi8vIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRvIGJlIHRyaWdnZXJlZCBvbiByZWFkeVxyXG52YXIgcXVldWUgPSBbXTtcclxuXHJcbmZ1bmN0aW9uIGRvY1JlYWR5KCBmbiApIHtcclxuICAvLyB0aHJvdyBvdXQgbm9uLWZ1bmN0aW9uc1xyXG4gIGlmICggdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgaWYgKCBkb2NSZWFkeS5pc1JlYWR5ICkge1xyXG4gICAgLy8gcmVhZHkgbm93LCBoaXQgaXRcclxuICAgIGZuKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHF1ZXVlIGZ1bmN0aW9uIHdoZW4gcmVhZHlcclxuICAgIHF1ZXVlLnB1c2goIGZuICk7XHJcbiAgfVxyXG59XHJcblxyXG5kb2NSZWFkeS5pc1JlYWR5ID0gZmFsc2U7XHJcblxyXG4vLyB0cmlnZ2VyZWQgb24gdmFyaW91cyBkb2MgcmVhZHkgZXZlbnRzXHJcbmZ1bmN0aW9uIG9uUmVhZHkoIGV2ZW50ICkge1xyXG4gIC8vIGJhaWwgaWYgYWxyZWFkeSB0cmlnZ2VyZWQgb3IgSUU4IGRvY3VtZW50IGlzIG5vdCByZWFkeSBqdXN0IHlldFxyXG4gIHZhciBpc0lFOE5vdFJlYWR5ID0gZXZlbnQudHlwZSA9PT0gJ3JlYWR5c3RhdGVjaGFuZ2UnICYmIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZSc7XHJcbiAgaWYgKCBkb2NSZWFkeS5pc1JlYWR5IHx8IGlzSUU4Tm90UmVhZHkgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0cmlnZ2VyKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyaWdnZXIoKSB7XHJcbiAgZG9jUmVhZHkuaXNSZWFkeSA9IHRydWU7XHJcbiAgLy8gcHJvY2VzcyBxdWV1ZVxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHF1ZXVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGZuID0gcXVldWVbaV07XHJcbiAgICBmbigpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVmaW5lRG9jUmVhZHkoIGV2ZW50aWUgKSB7XHJcbiAgLy8gdHJpZ2dlciByZWFkeSBpZiBwYWdlIGlzIHJlYWR5XHJcbiAgaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnICkge1xyXG4gICAgdHJpZ2dlcigpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBsaXN0ZW4gZm9yIGV2ZW50c1xyXG4gICAgZXZlbnRpZS5iaW5kKCBkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBvblJlYWR5ICk7XHJcbiAgICBldmVudGllLmJpbmQoIGRvY3VtZW50LCAncmVhZHlzdGF0ZWNoYW5nZScsIG9uUmVhZHkgKTtcclxuICAgIGV2ZW50aWUuYmluZCggd2luZG93LCAnbG9hZCcsIG9uUmVhZHkgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBkb2NSZWFkeTtcclxufVxyXG5cclxuLy8gdHJhbnNwb3J0XHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggJ2RvYy1yZWFkeS9kb2MtcmVhZHknLFsgJ2V2ZW50aWUvZXZlbnRpZScgXSwgZGVmaW5lRG9jUmVhZHkgKTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gZGVmaW5lRG9jUmVhZHkoIHJlcXVpcmUoJ2V2ZW50aWUnKSApO1xyXG59IGVsc2Uge1xyXG4gIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgd2luZG93LmRvY1JlYWR5ID0gZGVmaW5lRG9jUmVhZHkoIHdpbmRvdy5ldmVudGllICk7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qKlxyXG4gKiBtYXRjaGVzU2VsZWN0b3IgdjEuMC4zXHJcbiAqIG1hdGNoZXNTZWxlY3RvciggZWxlbWVudCwgJy5zZWxlY3RvcicgKVxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCBFbGVtUHJvdG8gKSB7XHJcblxyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgdmFyIG1hdGNoZXNNZXRob2QgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxyXG4gICAgaWYgKCBFbGVtUHJvdG8ubWF0Y2hlcyApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzJztcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIHVuLXByZWZpeGVkXHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XHJcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xyXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IHByZWZpeGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XHJcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcclxuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xyXG4gICAgICAgIHJldHVybiBtZXRob2Q7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KSgpO1xyXG5cclxuICAvLyAtLS0tLSBtYXRjaCAtLS0tLSAvL1xyXG5cclxuICBmdW5jdGlvbiBtYXRjaCggZWxlbSwgc2VsZWN0b3IgKSB7XHJcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gYXBwZW5kVG9GcmFnbWVudCAtLS0tLSAvL1xyXG5cclxuICBmdW5jdGlvbiBjaGVja1BhcmVudCggZWxlbSApIHtcclxuICAgIC8vIG5vdCBuZWVkZWQgaWYgYWxyZWFkeSBoYXMgcGFyZW50XHJcbiAgICBpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLS0tIHF1ZXJ5IC0tLS0tIC8vXHJcblxyXG4gIC8vIGZhbGwgYmFjayB0byB1c2luZyBRU0FcclxuICAvLyB0aHggQGpvbmF0aGFudG5lYWwgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMzA2Mjk1NVxyXG4gIGZ1bmN0aW9uIHF1ZXJ5KCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIC8vIGFwcGVuZCB0byBmcmFnbWVudCBpZiBubyBwYXJlbnRcclxuICAgIGNoZWNrUGFyZW50KCBlbGVtICk7XHJcblxyXG4gICAgLy8gbWF0Y2ggZWxlbSB3aXRoIGFsbCBzZWxlY3RlZCBlbGVtcyBvZiBwYXJlbnRcclxuICAgIHZhciBlbGVtcyA9IGVsZW0ucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIC8vIHJldHVybiB0cnVlIGlmIG1hdGNoXHJcbiAgICAgIGlmICggZWxlbXNbaV0gPT09IGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG90aGVyd2lzZSByZXR1cm4gZmFsc2VcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIC0tLS0tIG1hdGNoQ2hpbGQgLS0tLS0gLy9cclxuXHJcbiAgZnVuY3Rpb24gbWF0Y2hDaGlsZCggZWxlbSwgc2VsZWN0b3IgKSB7XHJcbiAgICBjaGVja1BhcmVudCggZWxlbSApO1xyXG4gICAgcmV0dXJuIG1hdGNoKCBlbGVtLCBzZWxlY3RvciApO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gbWF0Y2hlc1NlbGVjdG9yIC0tLS0tIC8vXHJcblxyXG4gIHZhciBtYXRjaGVzU2VsZWN0b3I7XHJcblxyXG4gIGlmICggbWF0Y2hlc01ldGhvZCApIHtcclxuICAgIC8vIElFOSBzdXBwb3J0cyBtYXRjaGVzU2VsZWN0b3IsIGJ1dCBkb2Vzbid0IHdvcmsgb24gb3JwaGFuZWQgZWxlbXNcclxuICAgIC8vIGNoZWNrIGZvciB0aGF0XHJcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc3VwcG9ydHNPcnBoYW5zID0gbWF0Y2goIGRpdiwgJ2RpdicgKTtcclxuICAgIG1hdGNoZXNTZWxlY3RvciA9IHN1cHBvcnRzT3JwaGFucyA/IG1hdGNoIDogbWF0Y2hDaGlsZDtcclxuICB9IGVsc2Uge1xyXG4gICAgbWF0Y2hlc1NlbGVjdG9yID0gcXVlcnk7XHJcbiAgfVxyXG5cclxuICAvLyB0cmFuc3BvcnRcclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJyxbXSxmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIG1hdGNoZXNTZWxlY3RvcjtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1NlbGVjdG9yO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gbWF0Y2hlc1NlbGVjdG9yO1xyXG4gIH1cclxuXHJcbn0pKCBFbGVtZW50LnByb3RvdHlwZSApO1xyXG5cclxuLyoqXHJcbiAqIEZpenp5IFVJIHV0aWxzIHYxLjAuMVxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG5cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdmaXp6eS11aS11dGlscy91dGlscycsW1xyXG4gICAgICAnZG9jLXJlYWR5L2RvYy1yZWFkeScsXHJcbiAgICAgICdtYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InXHJcbiAgICBdLCBmdW5jdGlvbiggZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2RvYy1yZWFkeScpLFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuZG9jUmVhZHksXHJcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGRvY1JlYWR5LCBtYXRjaGVzU2VsZWN0b3IgKSB7XHJcblxyXG5cclxuXHJcbnZhciB1dGlscyA9IHt9O1xyXG5cclxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXHJcblxyXG4vLyBleHRlbmRzIG9iamVjdHNcclxudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcclxuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcclxuICB9XHJcbiAgcmV0dXJuIGE7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtb2R1bG8gLS0tLS0gLy9cclxuXHJcbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcclxuICByZXR1cm4gKCAoIG51bSAlIGRpdiApICsgZGl2ICkgJSBkaXY7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBpc0FycmF5IC0tLS0tIC8vXHJcbiAgXHJcbnZhciBvYmpUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbnV0aWxzLmlzQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xyXG4gIHJldHVybiBvYmpUb1N0cmluZy5jYWxsKCBvYmogKSA9PSAnW29iamVjdCBBcnJheV0nO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXHJcblxyXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxyXG51dGlscy5tYWtlQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xyXG4gIHZhciBhcnkgPSBbXTtcclxuICBpZiAoIHV0aWxzLmlzQXJyYXkoIG9iaiApICkge1xyXG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XHJcbiAgICBhcnkgPSBvYmo7XHJcbiAgfSBlbHNlIGlmICggb2JqICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInICkge1xyXG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBhcnkucHVzaCggb2JqW2ldICk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxyXG4gICAgYXJ5LnB1c2goIG9iaiApO1xyXG4gIH1cclxuICByZXR1cm4gYXJ5O1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaW5kZXhPZiAtLS0tLSAvL1xyXG5cclxuLy8gaW5kZXggb2YgaGVscGVyIGNhdXNlIElFOFxyXG51dGlscy5pbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPyBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XHJcbiAgICByZXR1cm4gYXJ5LmluZGV4T2YoIG9iaiApO1xyXG4gIH0gOiBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBhcnkubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGlmICggYXJ5W2ldID09PSBvYmogKSB7XHJcbiAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxuICB9O1xyXG5cclxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xyXG5cclxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICB2YXIgaW5kZXggPSB1dGlscy5pbmRleE9mKCBhcnksIG9iaiApO1xyXG4gIGlmICggaW5kZXggIT0gLTEgKSB7XHJcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGlzRWxlbWVudCAtLS0tLSAvL1xyXG5cclxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzg0MzgwLzE4MjE4M1xyXG51dGlscy5pc0VsZW1lbnQgPSAoIHR5cGVvZiBIVE1MRWxlbWVudCA9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBIVE1MRWxlbWVudCA9PSAnb2JqZWN0JyApID9cclxuICBmdW5jdGlvbiBpc0VsZW1lbnRET00yKCBvYmogKSB7XHJcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XHJcbiAgfSA6XHJcbiAgZnVuY3Rpb24gaXNFbGVtZW50UXVpcmt5KCBvYmogKSB7XHJcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiZcclxuICAgICAgb2JqLm5vZGVUeXBlID09IDEgJiYgdHlwZW9mIG9iai5ub2RlTmFtZSA9PSAnc3RyaW5nJztcclxuICB9O1xyXG5cclxuLy8gLS0tLS0gc2V0VGV4dCAtLS0tLSAvL1xyXG5cclxudXRpbHMuc2V0VGV4dCA9ICggZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHNldFRleHRQcm9wZXJ0eTtcclxuICBmdW5jdGlvbiBzZXRUZXh0KCBlbGVtLCB0ZXh0ICkge1xyXG4gICAgLy8gb25seSBjaGVjayBzZXRUZXh0UHJvcGVydHkgb25jZVxyXG4gICAgc2V0VGV4dFByb3BlcnR5ID0gc2V0VGV4dFByb3BlcnR5IHx8ICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50ICE9PSB1bmRlZmluZWQgPyAndGV4dENvbnRlbnQnIDogJ2lubmVyVGV4dCcgKTtcclxuICAgIGVsZW1bIHNldFRleHRQcm9wZXJ0eSBdID0gdGV4dDtcclxuICB9XHJcbiAgcmV0dXJuIHNldFRleHQ7XHJcbn0pKCk7XHJcblxyXG4vLyAtLS0tLSBnZXRQYXJlbnQgLS0tLS0gLy9cclxuXHJcbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICB3aGlsZSAoIGVsZW0gIT0gZG9jdW1lbnQuYm9keSApIHtcclxuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XHJcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcclxuICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXHJcblxyXG4vLyB1c2UgZWxlbWVudCBhcyBzZWxlY3RvciBzdHJpbmdcclxudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG4gIHJldHVybiBlbGVtO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaGFuZGxlRXZlbnQgLS0tLS0gLy9cclxuXHJcbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcclxudXRpbHMuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xyXG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XHJcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBmaWx0ZXJGaW5kRWxlbWVudHMgLS0tLS0gLy9cclxuXHJcbnV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcywgc2VsZWN0b3IgKSB7XHJcbiAgLy8gbWFrZSBhcnJheSBvZiBlbGVtc1xyXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gIHZhciBmZkVsZW1zID0gW107XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgIC8vIGNoZWNrIHRoYXQgZWxlbSBpcyBhbiBhY3R1YWwgZWxlbWVudFxyXG4gICAgaWYgKCAhdXRpbHMuaXNFbGVtZW50KCBlbGVtICkgKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcclxuICAgIGlmICggc2VsZWN0b3IgKSB7XHJcbiAgICAgIC8vIGZpbHRlciBzaWJsaW5nc1xyXG4gICAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcclxuICAgICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBmaW5kIGNoaWxkcmVuXHJcbiAgICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xyXG4gICAgICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxyXG4gICAgICBmb3IgKCB2YXIgaj0wLCBqTGVuID0gY2hpbGRFbGVtcy5sZW5ndGg7IGogPCBqTGVuOyBqKysgKSB7XHJcbiAgICAgICAgZmZFbGVtcy5wdXNoKCBjaGlsZEVsZW1zW2pdICk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZmRWxlbXM7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XHJcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXHJcbiAgdmFyIG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcclxuICB2YXIgdGltZW91dE5hbWUgPSBtZXRob2ROYW1lICsgJ1RpbWVvdXQnO1xyXG5cclxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciB0aW1lb3V0ID0gdGhpc1sgdGltZW91dE5hbWUgXTtcclxuICAgIGlmICggdGltZW91dCApIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XHJcbiAgICB9XHJcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XHJcbiAgICAgIGRlbGV0ZSBfdGhpc1sgdGltZW91dE5hbWUgXTtcclxuICAgIH0sIHRocmVzaG9sZCB8fCAxMDAgKTtcclxuICB9O1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cclxuXHJcbi8vIGh0dHA6Ly9qYW1lc3JvYmVydHMubmFtZS9ibG9nLzIwMTAvMDIvMjIvc3RyaW5nLWZ1bmN0aW9ucy1mb3ItamF2YXNjcmlwdC10cmltLXRvLWNhbWVsLWNhc2UtdG8tZGFzaGVkLWFuZC10by11bmRlcnNjb3JlL1xyXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XHJcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKC4pKFtBLVpdKS9nLCBmdW5jdGlvbiggbWF0Y2gsICQxLCAkMiApIHtcclxuICAgIHJldHVybiAkMSArICctJyArICQyO1xyXG4gIH0pLnRvTG93ZXJDYXNlKCk7XHJcbn07XHJcblxyXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG4vKipcclxuICogYWxsb3cgdXNlciB0byBpbml0aWFsaXplIGNsYXNzZXMgdmlhIC5qcy1uYW1lc3BhY2UgY2xhc3NcclxuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcclxuICogb3B0aW9ucyBhcmUgcGFyc2VkIGZyb20gZGF0YS1uYW1lc3BhY2Utb3B0aW9uIGF0dHJpYnV0ZVxyXG4gKi9cclxudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcclxuICBkb2NSZWFkeSggZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xyXG4gICAgdmFyIGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5qcy0nICsgZGFzaGVkTmFtZXNwYWNlICk7XHJcbiAgICB2YXIgZGF0YUF0dHIgPSAnZGF0YS0nICsgZGFzaGVkTmFtZXNwYWNlICsgJy1vcHRpb25zJztcclxuXHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgICAgdmFyIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YUF0dHIgKTtcclxuICAgICAgdmFyIG9wdGlvbnM7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IGF0dHIgJiYgSlNPTi5wYXJzZSggYXR0ciApO1xyXG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XHJcbiAgICAgICAgLy8gbG9nIGVycm9yLCBkbyBub3QgaW5pdGlhbGl6ZVxyXG4gICAgICAgIGlmICggY29uc29sZSApIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBwYXJzaW5nICcgKyBkYXRhQXR0ciArICcgb24gJyArXHJcbiAgICAgICAgICAgIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSArICggZWxlbS5pZCA/ICcjJyArIGVsZW0uaWQgOiAnJyApICsgJzogJyArXHJcbiAgICAgICAgICAgIGVycm9yICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGluaXRpYWxpemVcclxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XHJcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbGF5b3V0bmFtZScpXHJcbiAgICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xyXG4gICAgICBpZiAoIGpRdWVyeSApIHtcclxuICAgICAgICBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbnJldHVybiB1dGlscztcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBPdXRsYXllciBJdGVtXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvaXRlbScsW1xyXG4gICAgICAgICdldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAgICdnZXQtc3R5bGUtcHJvcGVydHkvZ2V0LXN0eWxlLXByb3BlcnR5JyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIGdldFN0eWxlUHJvcGVydHksIHV0aWxzICkge1xyXG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1nZXQtc3R5bGUtcHJvcGVydHknKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5PdXRsYXllciA9IHt9O1xyXG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5FdmVudEVtaXR0ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSxcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCBnZXRTdHlsZVByb3BlcnR5LCB1dGlscyApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xyXG5cclxudmFyIGdldENvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZTtcclxudmFyIGdldFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSA/XHJcbiAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xyXG4gIH0gOlxyXG4gIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgcmV0dXJuIGVsZW0uY3VycmVudFN0eWxlO1xyXG4gIH07XHJcblxyXG5cclxuZnVuY3Rpb24gaXNFbXB0eU9iaiggb2JqICkge1xyXG4gIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcHJvcCA9IG51bGw7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENTUzMgc3VwcG9ydCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldFN0eWxlUHJvcGVydHkoJ3RyYW5zaXRpb24nKTtcclxudmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gZ2V0U3R5bGVQcm9wZXJ0eSgndHJhbnNmb3JtJyk7XHJcbnZhciBzdXBwb3J0c0NTUzMgPSB0cmFuc2l0aW9uUHJvcGVydHkgJiYgdHJhbnNmb3JtUHJvcGVydHk7XHJcbnZhciBpczNkID0gISFnZXRTdHlsZVByb3BlcnR5KCdwZXJzcGVjdGl2ZScpO1xyXG5cclxudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9IHtcclxuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXHJcbiAgTW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxyXG4gIE9UcmFuc2l0aW9uOiAnb3RyYW5zaXRpb25lbmQnLFxyXG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xyXG59WyB0cmFuc2l0aW9uUHJvcGVydHkgXTtcclxuXHJcbi8vIHByb3BlcnRpZXMgdGhhdCBjb3VsZCBoYXZlIHZlbmRvciBwcmVmaXhcclxudmFyIHByZWZpeGFibGVQcm9wZXJ0aWVzID0gW1xyXG4gICd0cmFuc2Zvcm0nLFxyXG4gICd0cmFuc2l0aW9uJyxcclxuICAndHJhbnNpdGlvbkR1cmF0aW9uJyxcclxuICAndHJhbnNpdGlvblByb3BlcnR5J1xyXG5dO1xyXG5cclxuLy8gY2FjaGUgYWxsIHZlbmRvciBwcm9wZXJ0aWVzXHJcbnZhciB2ZW5kb3JQcm9wZXJ0aWVzID0gKCBmdW5jdGlvbigpIHtcclxuICB2YXIgY2FjaGUgPSB7fTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBwcmVmaXhhYmxlUHJvcGVydGllcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBwcm9wID0gcHJlZml4YWJsZVByb3BlcnRpZXNbaV07XHJcbiAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IGdldFN0eWxlUHJvcGVydHkoIHByb3AgKTtcclxuICAgIGlmICggc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wICkge1xyXG4gICAgICBjYWNoZVsgcHJvcCBdID0gc3VwcG9ydGVkUHJvcDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGNhY2hlO1xyXG59KSgpO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gSXRlbSggZWxlbWVudCwgbGF5b3V0ICkge1xyXG4gIGlmICggIWVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gIC8vIHBhcmVudCBsYXlvdXQgY2xhc3MsIGkuZS4gTWFzb25yeSwgSXNvdG9wZSwgb3IgUGFja2VyeVxyXG4gIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xyXG4gIHRoaXMucG9zaXRpb24gPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcblxyXG4gIHRoaXMuX2NyZWF0ZSgpO1xyXG59XHJcblxyXG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxyXG51dGlscy5leHRlbmQoIEl0ZW0ucHJvdG90eXBlLCBFdmVudEVtaXR0ZXIucHJvdG90eXBlICk7XHJcblxyXG5JdGVtLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gdHJhbnNpdGlvbiBvYmplY3RzXHJcbiAgdGhpcy5fdHJhbnNuID0ge1xyXG4gICAgaW5nUHJvcGVydGllczoge30sXHJcbiAgICBjbGVhbjoge30sXHJcbiAgICBvbkVuZDoge31cclxuICB9O1xyXG5cclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxyXG5JdGVtLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBhcHBseSBDU1Mgc3R5bGVzIHRvIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXHJcbiAqL1xyXG5JdGVtLnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbiggc3R5bGUgKSB7XHJcbiAgdmFyIGVsZW1TdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuXHJcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgICAvLyB1c2UgdmVuZG9yIHByb3BlcnR5IGlmIGF2YWlsYWJsZVxyXG4gICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcclxuICAgIGVsZW1TdHlsZVsgc3VwcG9ydGVkUHJvcCBdID0gc3R5bGVbIHByb3AgXTtcclxuICB9XHJcbn07XHJcblxyXG4gLy8gbWVhc3VyZSBwb3NpdGlvbiwgYW5kIHNldHMgaXRcclxuSXRlbS5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggdGhpcy5lbGVtZW50ICk7XHJcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xyXG4gIHZhciBpc09yaWdpbkxlZnQgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luTGVmdDtcclxuICB2YXIgaXNPcmlnaW5Ub3AgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luVG9wO1xyXG4gIHZhciB4VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JyBdO1xyXG4gIHZhciB5VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nIF07XHJcbiAgLy8gY29udmVydCBwZXJjZW50IHRvIHBpeGVsc1xyXG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcclxuICB2YXIgeCA9IHhWYWx1ZS5pbmRleE9mKCclJykgIT0gLTEgP1xyXG4gICAgKCBwYXJzZUZsb2F0KCB4VmFsdWUgKSAvIDEwMCApICogbGF5b3V0U2l6ZS53aWR0aCA6IHBhcnNlSW50KCB4VmFsdWUsIDEwICk7XHJcbiAgdmFyIHkgPSB5VmFsdWUuaW5kZXhPZignJScpICE9IC0xID9cclxuICAgICggcGFyc2VGbG9hdCggeVZhbHVlICkgLyAxMDAgKSAqIGxheW91dFNpemUuaGVpZ2h0IDogcGFyc2VJbnQoIHlWYWx1ZSwgMTAgKTtcclxuXHJcbiAgLy8gY2xlYW4gdXAgJ2F1dG8nIG9yIG90aGVyIG5vbi1pbnRlZ2VyIHZhbHVlc1xyXG4gIHggPSBpc05hTiggeCApID8gMCA6IHg7XHJcbiAgeSA9IGlzTmFOKCB5ICkgPyAwIDogeTtcclxuICAvLyByZW1vdmUgcGFkZGluZyBmcm9tIG1lYXN1cmVtZW50XHJcbiAgeCAtPSBpc09yaWdpbkxlZnQgPyBsYXlvdXRTaXplLnBhZGRpbmdMZWZ0IDogbGF5b3V0U2l6ZS5wYWRkaW5nUmlnaHQ7XHJcbiAgeSAtPSBpc09yaWdpblRvcCA/IGxheW91dFNpemUucGFkZGluZ1RvcCA6IGxheW91dFNpemUucGFkZGluZ0JvdHRvbTtcclxuXHJcbiAgdGhpcy5wb3NpdGlvbi54ID0geDtcclxuICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xyXG59O1xyXG5cclxuLy8gc2V0IHNldHRsZWQgcG9zaXRpb24sIGFwcGx5IHBhZGRpbmdcclxuSXRlbS5wcm90b3R5cGUubGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XHJcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xyXG4gIHZhciBzdHlsZSA9IHt9O1xyXG5cclxuICAvLyB4XHJcbiAgdmFyIHhQYWRkaW5nID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpbkxlZnQgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCc7XHJcbiAgdmFyIHhQcm9wZXJ0eSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JztcclxuICB2YXIgeFJlc2V0UHJvcGVydHkgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XHJcblxyXG4gIHZhciB4ID0gdGhpcy5wb3NpdGlvbi54ICsgbGF5b3V0U2l6ZVsgeFBhZGRpbmcgXTtcclxuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcclxuICBzdHlsZVsgeFByb3BlcnR5IF0gPSB0aGlzLmdldFhWYWx1ZSggeCApO1xyXG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XHJcbiAgc3R5bGVbIHhSZXNldFByb3BlcnR5IF0gPSAnJztcclxuXHJcbiAgLy8geVxyXG4gIHZhciB5UGFkZGluZyA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3AgPyAncGFkZGluZ1RvcCcgOiAncGFkZGluZ0JvdHRvbSc7XHJcbiAgdmFyIHlQcm9wZXJ0eSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nO1xyXG4gIHZhciB5UmVzZXRQcm9wZXJ0eSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3AgPyAnYm90dG9tJyA6ICd0b3AnO1xyXG5cclxuICB2YXIgeSA9IHRoaXMucG9zaXRpb24ueSArIGxheW91dFNpemVbIHlQYWRkaW5nIF07XHJcbiAgLy8gc2V0IGluIHBlcmNlbnRhZ2Ugb3IgcGl4ZWxzXHJcbiAgc3R5bGVbIHlQcm9wZXJ0eSBdID0gdGhpcy5nZXRZVmFsdWUoIHkgKTtcclxuICAvLyByZXNldCBvdGhlciBwcm9wZXJ0eVxyXG4gIHN0eWxlWyB5UmVzZXRQcm9wZXJ0eSBdID0gJyc7XHJcblxyXG4gIHRoaXMuY3NzKCBzdHlsZSApO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAnbGF5b3V0JywgWyB0aGlzIF0gKTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmdldFhWYWx1ZSA9IGZ1bmN0aW9uKCB4ICkge1xyXG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuICByZXR1cm4gbGF5b3V0T3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgIWxheW91dE9wdGlvbnMuaXNIb3Jpem9udGFsID9cclxuICAgICggKCB4IC8gdGhpcy5sYXlvdXQuc2l6ZS53aWR0aCApICogMTAwICkgKyAnJScgOiB4ICsgJ3B4JztcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmdldFlWYWx1ZSA9IGZ1bmN0aW9uKCB5ICkge1xyXG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuICByZXR1cm4gbGF5b3V0T3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgbGF5b3V0T3B0aW9ucy5pc0hvcml6b250YWwgP1xyXG4gICAgKCAoIHkgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCApICogMTAwICkgKyAnJScgOiB5ICsgJ3B4JztcclxufTtcclxuXHJcblxyXG5JdGVtLnByb3RvdHlwZS5fdHJhbnNpdGlvblRvID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgdGhpcy5nZXRQb3NpdGlvbigpO1xyXG4gIC8vIGdldCBjdXJyZW50IHggJiB5IGZyb20gdG9wL2xlZnRcclxuICB2YXIgY3VyWCA9IHRoaXMucG9zaXRpb24ueDtcclxuICB2YXIgY3VyWSA9IHRoaXMucG9zaXRpb24ueTtcclxuXHJcbiAgdmFyIGNvbXBhcmVYID0gcGFyc2VJbnQoIHgsIDEwICk7XHJcbiAgdmFyIGNvbXBhcmVZID0gcGFyc2VJbnQoIHksIDEwICk7XHJcbiAgdmFyIGRpZE5vdE1vdmUgPSBjb21wYXJlWCA9PT0gdGhpcy5wb3NpdGlvbi54ICYmIGNvbXBhcmVZID09PSB0aGlzLnBvc2l0aW9uLnk7XHJcblxyXG4gIC8vIHNhdmUgZW5kIHBvc2l0aW9uXHJcbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xyXG5cclxuICAvLyBpZiBkaWQgbm90IG1vdmUgYW5kIG5vdCB0cmFuc2l0aW9uaW5nLCBqdXN0IGdvIHRvIGxheW91dFxyXG4gIGlmICggZGlkTm90TW92ZSAmJiAhdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XHJcbiAgICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgdHJhbnNYID0geCAtIGN1clg7XHJcbiAgdmFyIHRyYW5zWSA9IHkgLSBjdXJZO1xyXG4gIHZhciB0cmFuc2l0aW9uU3R5bGUgPSB7fTtcclxuICB0cmFuc2l0aW9uU3R5bGUudHJhbnNmb3JtID0gdGhpcy5nZXRUcmFuc2xhdGUoIHRyYW5zWCwgdHJhbnNZICk7XHJcblxyXG4gIHRoaXMudHJhbnNpdGlvbih7XHJcbiAgICB0bzogdHJhbnNpdGlvblN0eWxlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiB7XHJcbiAgICAgIHRyYW5zZm9ybTogdGhpcy5sYXlvdXRQb3NpdGlvblxyXG4gICAgfSxcclxuICAgIGlzQ2xlYW5pbmc6IHRydWVcclxuICB9KTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmdldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIC8vIGZsaXAgY29vcmlkaW5hdGVzIGlmIG9yaWdpbiBvbiByaWdodCBvciBib3R0b21cclxuICB2YXIgbGF5b3V0T3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcbiAgeCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8geCA6IC14O1xyXG4gIHkgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luVG9wID8geSA6IC15O1xyXG5cclxuICBpZiAoIGlzM2QgKSB7XHJcbiAgICByZXR1cm4gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCwgMCknO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHggKyAncHgsICcgKyB5ICsgJ3B4KSc7XHJcbn07XHJcblxyXG4vLyBub24gdHJhbnNpdGlvbiArIHRyYW5zZm9ybSBzdXBwb3J0XHJcbkl0ZW0ucHJvdG90eXBlLmdvVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XHJcbiAgdGhpcy5sYXlvdXRQb3NpdGlvbigpO1xyXG59O1xyXG5cclxuLy8gdXNlIHRyYW5zaXRpb24gYW5kIHRyYW5zZm9ybXMgaWYgc3VwcG9ydGVkXHJcbkl0ZW0ucHJvdG90eXBlLm1vdmVUbyA9IHN1cHBvcnRzQ1NTMyA/XHJcbiAgSXRlbS5wcm90b3R5cGUuX3RyYW5zaXRpb25UbyA6IEl0ZW0ucHJvdG90eXBlLmdvVG87XHJcblxyXG5JdGVtLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIHRoaXMucG9zaXRpb24ueCA9IHBhcnNlSW50KCB4LCAxMCApO1xyXG4gIHRoaXMucG9zaXRpb24ueSA9IHBhcnNlSW50KCB5LCAxMCApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gdHJhbnNpdGlvbiAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZSAtIENTU1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmRcclxuICovXHJcblxyXG4vLyBub24gdHJhbnNpdGlvbiwganVzdCB0cmlnZ2VyIGNhbGxiYWNrXHJcbkl0ZW0ucHJvdG90eXBlLl9ub25UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XHJcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcclxuICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcclxuICAgIHRoaXMuX3JlbW92ZVN0eWxlcyggYXJncy50byApO1xyXG4gIH1cclxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcclxuICAgIGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF0uY2FsbCggdGhpcyApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBwcm9wZXIgdHJhbnNpdGlvblxyXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIGFyZ3VtZW50c1xyXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSB0byAtIHN0eWxlIHRvIHRyYW5zaXRpb24gdG9cclxuICogICBAcGFyYW0ge09iamVjdH0gZnJvbSAtIHN0eWxlIHRvIHN0YXJ0IHRyYW5zaXRpb24gZnJvbVxyXG4gKiAgIEBwYXJhbSB7Qm9vbGVhbn0gaXNDbGVhbmluZyAtIHJlbW92ZXMgdHJhbnNpdGlvbiBzdHlsZXMgYWZ0ZXIgdHJhbnNpdGlvblxyXG4gKiAgIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZCAtIGNhbGxiYWNrXHJcbiAqL1xyXG5JdGVtLnByb3RvdHlwZS5fdHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBhcmdzICkge1xyXG4gIC8vIHJlZGlyZWN0IHRvIG5vblRyYW5zaXRpb24gaWYgbm8gdHJhbnNpdGlvbiBkdXJhdGlvblxyXG4gIGlmICggIXBhcnNlRmxvYXQoIHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uICkgKSB7XHJcbiAgICB0aGlzLl9ub25UcmFuc2l0aW9uKCBhcmdzICk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgX3RyYW5zaXRpb24gPSB0aGlzLl90cmFuc247XHJcbiAgLy8ga2VlcCB0cmFjayBvZiBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2sgYnkgY3NzIHByb3BlcnR5XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYXJncy5vblRyYW5zaXRpb25FbmQgKSB7XHJcbiAgICBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcCBdID0gYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXTtcclxuICB9XHJcbiAgLy8ga2VlcCB0cmFjayBvZiBwcm9wZXJ0aWVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcclxuICBmb3IgKCBwcm9wIGluIGFyZ3MudG8gKSB7XHJcbiAgICBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzWyBwcm9wIF0gPSB0cnVlO1xyXG4gICAgLy8ga2VlcCB0cmFjayBvZiBwcm9wZXJ0aWVzIHRvIGNsZWFuIHVwIHdoZW4gdHJhbnNpdGlvbiBpcyBkb25lXHJcbiAgICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcclxuICAgICAgX3RyYW5zaXRpb24uY2xlYW5bIHByb3AgXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBzZXQgZnJvbSBzdHlsZXNcclxuICBpZiAoIGFyZ3MuZnJvbSApIHtcclxuICAgIHRoaXMuY3NzKCBhcmdzLmZyb20gKTtcclxuICAgIC8vIGZvcmNlIHJlZHJhdy4gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXHJcbiAgICB2YXIgaCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAvLyBoYWNrIGZvciBKU0hpbnQgdG8gaHVzaCBhYm91dCB1bnVzZWQgdmFyXHJcbiAgICBoID0gbnVsbDtcclxuICB9XHJcbiAgLy8gZW5hYmxlIHRyYW5zaXRpb25cclxuICB0aGlzLmVuYWJsZVRyYW5zaXRpb24oIGFyZ3MudG8gKTtcclxuICAvLyBzZXQgc3R5bGVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcclxuICB0aGlzLmNzcyggYXJncy50byApO1xyXG5cclxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcblxyXG59O1xyXG5cclxuLy8gZGFzaCBiZWZvcmUgYWxsIGNhcCBsZXR0ZXJzLCBpbmNsdWRpbmcgZmlyc3QgZm9yXHJcbi8vIFdlYmtpdFRyYW5zZm9ybSA9PiAtd2Via2l0LXRyYW5zZm9ybVxyXG5mdW5jdGlvbiB0b0Rhc2hlZEFsbCggc3RyICkge1xyXG4gIHJldHVybiBzdHIucmVwbGFjZSggLyhbQS1aXSkvZywgZnVuY3Rpb24oICQxICkge1xyXG4gICAgcmV0dXJuICctJyArICQxLnRvTG93ZXJDYXNlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbnZhciB0cmFuc2l0aW9uUHJvcHMgPSAnb3BhY2l0eSwnICtcclxuICB0b0Rhc2hlZEFsbCggdmVuZG9yUHJvcGVydGllcy50cmFuc2Zvcm0gfHwgJ3RyYW5zZm9ybScgKTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmVuYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigvKiBzdHlsZSAqLykge1xyXG4gIC8vIEhBQ0sgY2hhbmdpbmcgdHJhbnNpdGlvblByb3BlcnR5IGR1cmluZyBhIHRyYW5zaXRpb25cclxuICAvLyB3aWxsIGNhdXNlIHRyYW5zaXRpb24gdG8ganVtcFxyXG4gIGlmICggdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBtYWtlIGB0cmFuc2l0aW9uOiBmb28sIGJhciwgYmF6YCBmcm9tIHN0eWxlIG9iamVjdFxyXG4gIC8vIEhBQ0sgdW4tY29tbWVudCB0aGlzIHdoZW4gZW5hYmxlVHJhbnNpdGlvbiBjYW4gd29ya1xyXG4gIC8vIHdoaWxlIGEgdHJhbnNpdGlvbiBpcyBoYXBwZW5pbmdcclxuICAvLyB2YXIgdHJhbnNpdGlvblZhbHVlcyA9IFtdO1xyXG4gIC8vIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xyXG4gIC8vICAgLy8gZGFzaC1pZnkgY2FtZWxDYXNlZCBwcm9wZXJ0aWVzIGxpa2UgV2Via2l0VHJhbnNpdGlvblxyXG4gIC8vICAgcHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xyXG4gIC8vICAgdHJhbnNpdGlvblZhbHVlcy5wdXNoKCB0b0Rhc2hlZEFsbCggcHJvcCApICk7XHJcbiAgLy8gfVxyXG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uIHN0eWxlc1xyXG4gIHRoaXMuY3NzKHtcclxuICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJhbnNpdGlvblByb3BzLFxyXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvblxyXG4gIH0pO1xyXG4gIC8vIGxpc3RlbiBmb3IgdHJhbnNpdGlvbiBlbmQgZXZlbnRcclxuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHJhbnNpdGlvbkVuZEV2ZW50LCB0aGlzLCBmYWxzZSApO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUudHJhbnNpdGlvbiA9IEl0ZW0ucHJvdG90eXBlWyB0cmFuc2l0aW9uUHJvcGVydHkgPyAnX3RyYW5zaXRpb24nIDogJ19ub25UcmFuc2l0aW9uJyBdO1xyXG5cclxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXHJcblxyXG5JdGVtLnByb3RvdHlwZS5vbndlYmtpdFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5vbm90cmFuc2l0aW9uZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xyXG59O1xyXG5cclxuLy8gcHJvcGVydGllcyB0aGF0IEkgbXVuZ2UgdG8gbWFrZSBteSBsaWZlIGVhc2llclxyXG52YXIgZGFzaGVkVmVuZG9yUHJvcGVydGllcyA9IHtcclxuICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNmb3JtJyxcclxuICAnLW1vei10cmFuc2Zvcm0nOiAndHJhbnNmb3JtJyxcclxuICAnLW8tdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICAvLyBkaXNyZWdhcmQgYnViYmxlZCBldmVudHMgZnJvbSBjaGlsZHJlblxyXG4gIGlmICggZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcclxuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcclxuICB2YXIgcHJvcGVydHlOYW1lID0gZGFzaGVkVmVuZG9yUHJvcGVydGllc1sgZXZlbnQucHJvcGVydHlOYW1lIF0gfHwgZXZlbnQucHJvcGVydHlOYW1lO1xyXG5cclxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcclxuICBkZWxldGUgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcGVydHlOYW1lIF07XHJcbiAgLy8gY2hlY2sgaWYgYW55IHByb3BlcnRpZXMgYXJlIHN0aWxsIHRyYW5zaXRpb25pbmdcclxuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcclxuICAgIC8vIGFsbCBwcm9wZXJ0aWVzIGhhdmUgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcclxuICAgIHRoaXMuZGlzYWJsZVRyYW5zaXRpb24oKTtcclxuICB9XHJcbiAgLy8gY2xlYW4gc3R5bGVcclxuICBpZiAoIHByb3BlcnR5TmFtZSBpbiBfdHJhbnNpdGlvbi5jbGVhbiApIHtcclxuICAgIC8vIGNsZWFuIHVwIHN0eWxlXHJcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGVbIGV2ZW50LnByb3BlcnR5TmFtZSBdID0gJyc7XHJcbiAgICBkZWxldGUgX3RyYW5zaXRpb24uY2xlYW5bIHByb3BlcnR5TmFtZSBdO1xyXG4gIH1cclxuICAvLyB0cmlnZ2VyIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFja1xyXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLm9uRW5kICkge1xyXG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcclxuICAgIG9uVHJhbnNpdGlvbkVuZC5jYWxsKCB0aGlzICk7XHJcbiAgICBkZWxldGUgX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5lbWl0RXZlbnQoICd0cmFuc2l0aW9uRW5kJywgWyB0aGlzIF0gKTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XHJcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcclxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxyXG4qKi9cclxuSXRlbS5wcm90b3R5cGUuX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcclxuICAvLyBjbGVhbiB1cCB0cmFuc2l0aW9uIHN0eWxlc1xyXG4gIHZhciBjbGVhblN0eWxlID0ge307XHJcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgICBjbGVhblN0eWxlWyBwcm9wIF0gPSAnJztcclxuICB9XHJcbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcclxufTtcclxuXHJcbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcclxuICB0cmFuc2l0aW9uUHJvcGVydHk6ICcnLFxyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJydcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMgPSBmdW5jdGlvbigpIHtcclxuICAvLyByZW1vdmUgdHJhbnNpdGlvblxyXG4gIHRoaXMuY3NzKCBjbGVhblRyYW5zaXRpb25TdHlsZSApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gc2hvdy9oaWRlL3JlbW92ZSAtLS0tLSAvL1xyXG5cclxuLy8gcmVtb3ZlIGVsZW1lbnQgZnJvbSBET01cclxuSXRlbS5wcm90b3R5cGUucmVtb3ZlRWxlbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdyZW1vdmUnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8ganVzdCByZW1vdmUgZWxlbWVudCBpZiBubyB0cmFuc2l0aW9uIHN1cHBvcnQgb3Igbm8gdHJhbnNpdGlvblxyXG4gIGlmICggIXRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcclxuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gc3RhcnQgdHJhbnNpdGlvblxyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgdGhpcy5vbmNlKCAndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgX3RoaXMucmVtb3ZlRWxlbSgpO1xyXG4gIH0pO1xyXG4gIHRoaXMuaGlkZSgpO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUucmV2ZWFsID0gZnVuY3Rpb24oKSB7XHJcbiAgZGVsZXRlIHRoaXMuaXNIaWRkZW47XHJcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcclxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xyXG5cclxuICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcblxyXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcclxuICB2YXIgdHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KCd2aXNpYmxlU3R5bGUnKTtcclxuICBvblRyYW5zaXRpb25FbmRbIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSBdID0gdGhpcy5vblJldmVhbFRyYW5zaXRpb25FbmQ7XHJcblxyXG4gIHRoaXMudHJhbnNpdGlvbih7XHJcbiAgICBmcm9tOiBvcHRpb25zLmhpZGRlblN0eWxlLFxyXG4gICAgdG86IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxyXG4gICAgaXNDbGVhbmluZzogdHJ1ZSxcclxuICAgIG9uVHJhbnNpdGlvbkVuZDogb25UcmFuc2l0aW9uRW5kXHJcbiAgfSk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5vblJldmVhbFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjaGVjayBpZiBzdGlsbCB2aXNpYmxlXHJcbiAgLy8gZHVyaW5nIHRyYW5zaXRpb24sIGl0ZW0gbWF5IGhhdmUgYmVlbiBoaWRkZW5cclxuICBpZiAoICF0aGlzLmlzSGlkZGVuICkge1xyXG4gICAgdGhpcy5lbWl0RXZlbnQoJ3JldmVhbCcpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgc3R5bGUgcHJvcGVydHkgdXNlIGZvciBoaWRlL3JldmVhbCB0cmFuc2l0aW9uIGVuZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3R5bGVQcm9wZXJ0eSAtIGhpZGRlblN0eWxlL3Zpc2libGVTdHlsZVxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gKi9cclxuSXRlbS5wcm90b3R5cGUuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uKCBzdHlsZVByb3BlcnR5ICkge1xyXG4gIHZhciBvcHRpb25TdHlsZSA9IHRoaXMubGF5b3V0Lm9wdGlvbnNbIHN0eWxlUHJvcGVydHkgXTtcclxuICAvLyB1c2Ugb3BhY2l0eVxyXG4gIGlmICggb3B0aW9uU3R5bGUub3BhY2l0eSApIHtcclxuICAgIHJldHVybiAnb3BhY2l0eSc7XHJcbiAgfVxyXG4gIC8vIGdldCBmaXJzdCBwcm9wZXJ0eVxyXG4gIGZvciAoIHZhciBwcm9wIGluIG9wdGlvblN0eWxlICkge1xyXG4gICAgcmV0dXJuIHByb3A7XHJcbiAgfVxyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHNldCBmbGFnXHJcbiAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XHJcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcclxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xyXG5cclxuICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcblxyXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcclxuICB2YXIgdHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KCdoaWRkZW5TdHlsZScpO1xyXG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uSGlkZVRyYW5zaXRpb25FbmQ7XHJcblxyXG4gIHRoaXMudHJhbnNpdGlvbih7XHJcbiAgICBmcm9tOiBvcHRpb25zLnZpc2libGVTdHlsZSxcclxuICAgIHRvOiBvcHRpb25zLmhpZGRlblN0eWxlLFxyXG4gICAgLy8ga2VlcCBoaWRkZW4gc3R1ZmYgaGlkZGVuXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcclxuICB9KTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9uSGlkZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjaGVjayBpZiBzdGlsbCBoaWRkZW5cclxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIHVuLWhpZGRlblxyXG4gIGlmICggdGhpcy5pc0hpZGRlbiApIHtcclxuICAgIHRoaXMuY3NzKHsgZGlzcGxheTogJ25vbmUnIH0pO1xyXG4gICAgdGhpcy5lbWl0RXZlbnQoJ2hpZGUnKTtcclxuICB9XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5jc3Moe1xyXG4gICAgcG9zaXRpb246ICcnLFxyXG4gICAgbGVmdDogJycsXHJcbiAgICByaWdodDogJycsXHJcbiAgICB0b3A6ICcnLFxyXG4gICAgYm90dG9tOiAnJyxcclxuICAgIHRyYW5zaXRpb246ICcnLFxyXG4gICAgdHJhbnNmb3JtOiAnJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxucmV0dXJuIEl0ZW07XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogT3V0bGF5ZXIgdjEuNC4yXHJcbiAqIHRoZSBicmFpbnMgYW5kIGd1dHMgb2YgYSBsYXlvdXQgbGlicmFyeVxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ291dGxheWVyL291dGxheWVyJyxbXHJcbiAgICAgICAgJ2V2ZW50aWUvZXZlbnRpZScsXHJcbiAgICAgICAgJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXHJcbiAgICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcclxuICAgICAgICAnLi9pdGVtJ1xyXG4gICAgICBdLFxyXG4gICAgICBmdW5jdGlvbiggZXZlbnRpZSwgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcclxuICAgICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZXZlbnRpZScpLFxyXG4gICAgICByZXF1aXJlKCd3b2xmeTg3LWV2ZW50ZW1pdHRlcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxyXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5PdXRsYXllciA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LmV2ZW50aWUsXHJcbiAgICAgIHdpbmRvdy5FdmVudEVtaXR0ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZXZlbnRpZSwgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gdmFycyAtLS0tLSAvL1xyXG5cclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcbnZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE91dGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcclxudmFyIEdVSUQgPSAwO1xyXG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgT3V0bGF5ZXIgaW50YW5jZXNcclxudmFyIGluc3RhbmNlcyA9IHt9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnQsIFN0cmluZ30gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIE91dGxheWVyKCBlbGVtZW50LCBvcHRpb25zICkge1xyXG4gIHZhciBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcclxuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XHJcbiAgICBpZiAoIGNvbnNvbGUgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgJyArIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICtcclxuICAgICAgICAnOiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcclxuICAvLyBhZGQgalF1ZXJ5XHJcbiAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIC8vIG9wdGlvbnNcclxuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzICk7XHJcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcclxuXHJcbiAgLy8gYWRkIGlkIGZvciBPdXRsYXllci5nZXRGcm9tRWxlbWVudFxyXG4gIHZhciBpZCA9ICsrR1VJRDtcclxuICB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEID0gaWQ7IC8vIGV4cGFuZG9cclxuICBpbnN0YW5jZXNbIGlkIF0gPSB0aGlzOyAvLyBhc3NvY2lhdGUgdmlhIGlkXHJcblxyXG4gIC8vIGtpY2sgaXQgb2ZmXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcblxyXG4gIGlmICggdGhpcy5vcHRpb25zLmlzSW5pdExheW91dCApIHtcclxuICAgIHRoaXMubGF5b3V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBzZXR0aW5ncyBhcmUgZm9yIGludGVybmFsIHVzZSBvbmx5XHJcbk91dGxheWVyLm5hbWVzcGFjZSA9ICdvdXRsYXllcic7XHJcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xyXG5cclxuLy8gZGVmYXVsdCBvcHRpb25zXHJcbk91dGxheWVyLmRlZmF1bHRzID0ge1xyXG4gIGNvbnRhaW5lclN0eWxlOiB7XHJcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xyXG4gIH0sXHJcbiAgaXNJbml0TGF5b3V0OiB0cnVlLFxyXG4gIGlzT3JpZ2luTGVmdDogdHJ1ZSxcclxuICBpc09yaWdpblRvcDogdHJ1ZSxcclxuICBpc1Jlc2l6ZUJvdW5kOiB0cnVlLFxyXG4gIGlzUmVzaXppbmdDb250YWluZXI6IHRydWUsXHJcbiAgLy8gaXRlbSBvcHRpb25zXHJcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnMC40cycsXHJcbiAgaGlkZGVuU3R5bGU6IHtcclxuICAgIG9wYWNpdHk6IDAsXHJcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjAwMSknXHJcbiAgfSxcclxuICB2aXNpYmxlU3R5bGU6IHtcclxuICAgIG9wYWNpdHk6IDEsXHJcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcclxuICB9XHJcbn07XHJcblxyXG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxyXG51dGlscy5leHRlbmQoIE91dGxheWVyLnByb3RvdHlwZSwgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSApO1xyXG5cclxuLyoqXHJcbiAqIHNldCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XHJcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcclxufTtcclxuXHJcbk91dGxheWVyLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZ2V0IGl0ZW1zIGZyb20gY2hpbGRyZW5cclxuICB0aGlzLnJlbG9hZEl0ZW1zKCk7XHJcbiAgLy8gZWxlbWVudHMgdGhhdCBhZmZlY3QgbGF5b3V0LCBidXQgYXJlIG5vdCBsYWlkIG91dFxyXG4gIHRoaXMuc3RhbXBzID0gW107XHJcbiAgdGhpcy5zdGFtcCggdGhpcy5vcHRpb25zLnN0YW1wICk7XHJcbiAgLy8gc2V0IGNvbnRhaW5lciBzdHlsZVxyXG4gIHV0aWxzLmV4dGVuZCggdGhpcy5lbGVtZW50LnN0eWxlLCB0aGlzLm9wdGlvbnMuY29udGFpbmVyU3R5bGUgKTtcclxuXHJcbiAgLy8gYmluZCByZXNpemUgbWV0aG9kXHJcbiAgaWYgKCB0aGlzLm9wdGlvbnMuaXNSZXNpemVCb3VuZCApIHtcclxuICAgIHRoaXMuYmluZFJlc2l6ZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIGdvZXMgdGhyb3VnaCBhbGwgY2hpbGRyZW4gYWdhaW4gYW5kIGdldHMgYnJpY2tzIGluIHByb3BlciBvcmRlclxyXG5PdXRsYXllci5wcm90b3R5cGUucmVsb2FkSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHR1cm4gZWxlbWVudHMgaW50byBPdXRsYXllci5JdGVtcyB0byBiZSB1c2VkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgT3V0bGF5ZXIgSXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5faXRlbWl6ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHJcbiAgdmFyIGl0ZW1FbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMoIGVsZW1zICk7XHJcbiAgdmFyIEl0ZW0gPSB0aGlzLmNvbnN0cnVjdG9yLkl0ZW07XHJcblxyXG4gIC8vIGNyZWF0ZSBuZXcgT3V0bGF5ZXIgSXRlbXMgZm9yIGNvbGxlY3Rpb25cclxuICB2YXIgaXRlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtRWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGl0ZW1FbGVtc1tpXTtcclxuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcclxuICAgIGl0ZW1zLnB1c2goIGl0ZW0gKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBpdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgaXRlbSBlbGVtZW50cyB0byBiZSB1c2VkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gaXRlbSBlbGVtZW50c1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuaXRlbVNlbGVjdG9yICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0dGVyIG1ldGhvZCBmb3IgZ2V0dGluZyBpdGVtIGVsZW1lbnRzXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5nZXRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgZWxlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLml0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgZWxlbXMucHVzaCggdGhpcy5pdGVtc1tpXS5lbGVtZW50ICk7XHJcbiAgfVxyXG4gIHJldHVybiBlbGVtcztcclxufTtcclxuXHJcbi8vIC0tLS0tIGluaXQgJiBsYXlvdXQgLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBsYXlzIG91dCBhbGwgaXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG5cclxuICAvLyBkb24ndCBhbmltYXRlIGZpcnN0IGxheW91dFxyXG4gIHZhciBpc0luc3RhbnQgPSB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xyXG4gICAgdGhpcy5vcHRpb25zLmlzTGF5b3V0SW5zdGFudCA6ICF0aGlzLl9pc0xheW91dEluaXRlZDtcclxuICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLml0ZW1zLCBpc0luc3RhbnQgKTtcclxuXHJcbiAgLy8gZmxhZyBmb3IgaW5pdGFsaXplZFxyXG4gIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIF9pbml0IGlzIGFsaWFzIGZvciBsYXlvdXRcclxuT3V0bGF5ZXIucHJvdG90eXBlLl9pbml0ID0gT3V0bGF5ZXIucHJvdG90eXBlLmxheW91dDtcclxuXHJcbi8qKlxyXG4gKiBsb2dpYyBiZWZvcmUgYW55IG5ldyBsYXlvdXRcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmdldFNpemUoKTtcclxufTtcclxuXHJcblxyXG5PdXRsYXllci5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBtZWFzdXJlbWVudCBmcm9tIG9wdGlvbiwgZm9yIGNvbHVtbldpZHRoLCByb3dIZWlnaHQsIGd1dHRlclxyXG4gKiBpZiBvcHRpb24gaXMgU3RyaW5nIC0+IGdldCBlbGVtZW50IGZyb20gc2VsZWN0b3Igc3RyaW5nLCAmIGdldCBzaXplIG9mIGVsZW1lbnRcclxuICogaWYgb3B0aW9uIGlzIEVsZW1lbnQgLT4gZ2V0IHNpemUgb2YgZWxlbWVudFxyXG4gKiBlbHNlIHVzZSBvcHRpb24gYXMgYSBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IG1lYXN1cmVtZW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gd2lkdGggb3IgaGVpZ2h0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oIG1lYXN1cmVtZW50LCBzaXplICkge1xyXG4gIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnNbIG1lYXN1cmVtZW50IF07XHJcbiAgdmFyIGVsZW07XHJcbiAgaWYgKCAhb3B0aW9uICkge1xyXG4gICAgLy8gZGVmYXVsdCB0byAwXHJcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gdXNlIG9wdGlvbiBhcyBhbiBlbGVtZW50XHJcbiAgICBpZiAoIHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnICkge1xyXG4gICAgICBlbGVtID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIG9wdGlvbiApO1xyXG4gICAgfSBlbHNlIGlmICggdXRpbHMuaXNFbGVtZW50KCBvcHRpb24gKSApIHtcclxuICAgICAgZWxlbSA9IG9wdGlvbjtcclxuICAgIH1cclxuICAgIC8vIHVzZSBzaXplIG9mIGVsZW1lbnQsIGlmIGVsZW1lbnRcclxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSBlbGVtID8gZ2V0U2l6ZSggZWxlbSApWyBzaXplIF0gOiBvcHRpb247XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGxheW91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmxheW91dEl0ZW1zID0gZnVuY3Rpb24oIGl0ZW1zLCBpc0luc3RhbnQgKSB7XHJcbiAgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0ZvckxheW91dCggaXRlbXMgKTtcclxuXHJcbiAgdGhpcy5fbGF5b3V0SXRlbXMoIGl0ZW1zLCBpc0luc3RhbnQgKTtcclxuXHJcbiAgdGhpcy5fcG9zdExheW91dCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCB0aGUgaXRlbXMgdG8gYmUgbGFpZCBvdXRcclxuICogeW91IG1heSB3YW50IHRvIHNraXAgb3ZlciBzb21lIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0SXRlbXNGb3JMYXlvdXQgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgdmFyIGxheW91dEl0ZW1zID0gW107XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgaWYgKCAhaXRlbS5pc0lnbm9yZWQgKSB7XHJcbiAgICAgIGxheW91dEl0ZW1zLnB1c2goIGl0ZW0gKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGxheW91dEl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGxheW91dCBpdGVtc1xyXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtc1xyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdsYXlvdXQnLCBpdGVtcyApO1xyXG5cclxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgLy8gbm8gaXRlbXMsIGVtaXQgZXZlbnQgd2l0aCBlbXB0eSBhcnJheVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHF1ZXVlID0gW107XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgIC8vIGdldCB4L3kgb2JqZWN0IGZyb20gbWV0aG9kXHJcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24oIGl0ZW0gKTtcclxuICAgIC8vIGVucXVldWVcclxuICAgIHBvc2l0aW9uLml0ZW0gPSBpdGVtO1xyXG4gICAgcG9zaXRpb24uaXNJbnN0YW50ID0gaXNJbnN0YW50IHx8IGl0ZW0uaXNMYXlvdXRJbnN0YW50O1xyXG4gICAgcXVldWUucHVzaCggcG9zaXRpb24gKTtcclxuICB9XHJcblxyXG4gIHRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZSggcXVldWUgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgaXRlbSBsYXlvdXQgcG9zaXRpb25cclxuICogQHBhcmFtIHtPdXRsYXllci5JdGVtfSBpdGVtXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHggYW5kIHkgcG9zaXRpb25cclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIC8qIGl0ZW0gKi8gKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBpdGVyYXRlIG92ZXIgYXJyYXkgYW5kIHBvc2l0aW9uIGVhY2ggaXRlbVxyXG4gKiBSZWFzb24gYmVpbmcgLSBzZXBhcmF0aW5nIHRoaXMgbG9naWMgcHJldmVudHMgJ2xheW91dCBpbnZhbGlkYXRpb24nXHJcbiAqIHRoeCBAcGF1bF9pcmlzaFxyXG4gKiBAcGFyYW0ge0FycmF5fSBxdWV1ZVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9wcm9jZXNzTGF5b3V0UXVldWUgPSBmdW5jdGlvbiggcXVldWUgKSB7XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcXVldWUubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgb2JqID0gcXVldWVbaV07XHJcbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW0oIG9iai5pdGVtLCBvYmoueCwgb2JqLnksIG9iai5pc0luc3RhbnQgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyBwb3NpdGlvbiBvZiBpdGVtIGluIERPTVxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gdmVydGljYWwgcG9zaXRpb25cclxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyB0cmFuc2l0aW9uc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9wb3NpdGlvbkl0ZW0gPSBmdW5jdGlvbiggaXRlbSwgeCwgeSwgaXNJbnN0YW50ICkge1xyXG4gIGlmICggaXNJbnN0YW50ICkge1xyXG4gICAgLy8gaWYgbm90IHRyYW5zaXRpb24sIGp1c3Qgc2V0IENTU1xyXG4gICAgaXRlbS5nb1RvKCB4LCB5ICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGl0ZW0ubW92ZVRvKCB4LCB5ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFueSBsb2dpYyB5b3Ugd2FudCB0byBkbyBhZnRlciBlYWNoIGxheW91dCxcclxuICogaS5lLiBzaXplIHRoZSBjb250YWluZXJcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fcG9zdExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucmVzaXplQ29udGFpbmVyKCk7XHJcbn07XHJcblxyXG5PdXRsYXllci5wcm90b3R5cGUucmVzaXplQ29udGFpbmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmlzUmVzaXppbmdDb250YWluZXIgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBzaXplID0gdGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xyXG4gIGlmICggc2l6ZSApIHtcclxuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUud2lkdGgsIHRydWUgKTtcclxuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUuaGVpZ2h0LCBmYWxzZSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHdpZHRoIG9yIGhlaWdodCBvZiBjb250YWluZXIgaWYgcmV0dXJuZWRcclxuICogQHJldHVybnMge09iamVjdH0gc2l6ZVxyXG4gKiAgIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxyXG4gKiAgIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IG5vb3A7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtOdW1iZXJ9IG1lYXN1cmUgLSBzaXplIG9mIHdpZHRoIG9yIGhlaWdodFxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV2lkdGhcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fc2V0Q29udGFpbmVyTWVhc3VyZSA9IGZ1bmN0aW9uKCBtZWFzdXJlLCBpc1dpZHRoICkge1xyXG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIGVsZW1TaXplID0gdGhpcy5zaXplO1xyXG4gIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgd2lkdGggaWYgYm9yZGVyIGJveFxyXG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XHJcbiAgICBtZWFzdXJlICs9IGlzV2lkdGggPyBlbGVtU2l6ZS5wYWRkaW5nTGVmdCArIGVsZW1TaXplLnBhZGRpbmdSaWdodCArXHJcbiAgICAgIGVsZW1TaXplLmJvcmRlckxlZnRXaWR0aCArIGVsZW1TaXplLmJvcmRlclJpZ2h0V2lkdGggOlxyXG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXHJcbiAgICAgIGVsZW1TaXplLmJvcmRlclRvcFdpZHRoICsgZWxlbVNpemUuYm9yZGVyQm90dG9tV2lkdGg7XHJcbiAgfVxyXG5cclxuICBtZWFzdXJlID0gTWF0aC5tYXgoIG1lYXN1cmUsIDAgKTtcclxuICB0aGlzLmVsZW1lbnQuc3R5bGVbIGlzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCcgXSA9IG1lYXN1cmUgKyAncHgnO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9lbWl0Q29tcGxldGVPbkl0ZW1zID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgaXRlbXMgKSB7XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xyXG4gICAgX3RoaXMuZGlzcGF0Y2hFdmVudCggZXZlbnROYW1lICsgJ0NvbXBsZXRlJywgbnVsbCwgWyBpdGVtcyBdICk7XHJcbiAgfVxyXG5cclxuICB2YXIgY291bnQgPSBpdGVtcy5sZW5ndGg7XHJcbiAgaWYgKCAhaXRlbXMgfHwgIWNvdW50ICkge1xyXG4gICAgb25Db21wbGV0ZSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIGRvbmVDb3VudCA9IDA7XHJcbiAgZnVuY3Rpb24gdGljaygpIHtcclxuICAgIGRvbmVDb3VudCsrO1xyXG4gICAgaWYgKCBkb25lQ291bnQgPT09IGNvdW50ICkge1xyXG4gICAgICBvbkNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBiaW5kIGNhbGxiYWNrXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgaXRlbS5vbmNlKCBldmVudE5hbWUsIHRpY2sgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogZW1pdHMgZXZlbnRzIHZpYSBldmVudEVtaXR0ZXIgYW5kIGpRdWVyeSBldmVudHNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBuYW1lIG9mIGV2ZW50XHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcclxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGV4dHJhIGFyZ3VtZW50c1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGFyZ3MgKSB7XHJcbiAgLy8gYWRkIG9yaWdpbmFsIGV2ZW50IHRvIGFyZ3VtZW50c1xyXG4gIHZhciBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcclxuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcclxuXHJcbiAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICAvLyBzZXQgdGhpcy4kZWxlbWVudFxyXG4gICAgdGhpcy4kZWxlbWVudCA9IHRoaXMuJGVsZW1lbnQgfHwgalF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcclxuICAgIGlmICggZXZlbnQgKSB7XHJcbiAgICAgIC8vIGNyZWF0ZSBqUXVlcnkgZXZlbnRcclxuICAgICAgdmFyICRldmVudCA9IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcclxuICAgICAgJGV2ZW50LnR5cGUgPSB0eXBlO1xyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoICRldmVudCwgYXJncyApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8ganVzdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudCBhdmFpbGFibGVcclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCB0eXBlLCBhcmdzICk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaWdub3JlICYgc3RhbXBzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuLyoqXHJcbiAqIGtlZXAgaXRlbSBpbiBjb2xsZWN0aW9uLCBidXQgZG8gbm90IGxheSBpdCBvdXRcclxuICogaWdub3JlZCBpdGVtcyBkbyBub3QgZ2V0IHNraXBwZWQgaW4gbGF5b3V0XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmlnbm9yZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgaWYgKCBpdGVtICkge1xyXG4gICAgaXRlbS5pc0lnbm9yZWQgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXR1cm4gaXRlbSB0byBsYXlvdXQgY29sbGVjdGlvblxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS51bmlnbm9yZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgaWYgKCBpdGVtICkge1xyXG4gICAgZGVsZXRlIGl0ZW0uaXNJZ25vcmVkO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBhZGRzIGVsZW1lbnRzIHRvIHN0YW1wc1xyXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIGVsZW1zID0gdGhpcy5fZmluZCggZWxlbXMgKTtcclxuICBpZiAoICFlbGVtcyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuc3RhbXBzID0gdGhpcy5zdGFtcHMuY29uY2F0KCBlbGVtcyApO1xyXG4gIC8vIGlnbm9yZVxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgIHRoaXMuaWdub3JlKCBlbGVtICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZXMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnVuc3RhbXAgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xyXG4gIGlmICggIWVsZW1zICl7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBlbGVtID0gZWxlbXNbaV07XHJcbiAgICAvLyBmaWx0ZXIgb3V0IHJlbW92ZWQgc3RhbXAgZWxlbWVudHNcclxuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuc3RhbXBzLCBlbGVtICk7XHJcbiAgICB0aGlzLnVuaWdub3JlKCBlbGVtICk7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBmaW5kcyBjaGlsZCBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2ZpbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgaWYgKCAhZWxlbXMgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGlmIHN0cmluZywgdXNlIGFyZ3VtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG4gIGlmICggdHlwZW9mIGVsZW1zID09PSAnc3RyaW5nJyApIHtcclxuICAgIGVsZW1zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW1zICk7XHJcbiAgfVxyXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gIHJldHVybiBlbGVtcztcclxufTtcclxuXHJcbk91dGxheWVyLnByb3RvdHlwZS5fbWFuYWdlU3RhbXBzID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuX2dldEJvdW5kaW5nUmVjdCgpO1xyXG5cclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLnN0YW1wcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBzdGFtcCA9IHRoaXMuc3RhbXBzW2ldO1xyXG4gICAgdGhpcy5fbWFuYWdlU3RhbXAoIHN0YW1wICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxyXG5PdXRsYXllci5wcm90b3R5cGUuX2dldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGdldCBib3VuZGluZyByZWN0IGZvciBjb250YWluZXIgZWxlbWVudFxyXG4gIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgdmFyIHNpemUgPSB0aGlzLnNpemU7XHJcbiAgdGhpcy5fYm91bmRpbmdSZWN0ID0ge1xyXG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgKyBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5ib3JkZXJMZWZ0V2lkdGgsXHJcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgKyBzaXplLnBhZGRpbmdUb3AgKyBzaXplLmJvcmRlclRvcFdpZHRoLFxyXG4gICAgcmlnaHQ6IGJvdW5kaW5nUmVjdC5yaWdodCAtICggc2l6ZS5wYWRkaW5nUmlnaHQgKyBzaXplLmJvcmRlclJpZ2h0V2lkdGggKSxcclxuICAgIGJvdHRvbTogYm91bmRpbmdSZWN0LmJvdHRvbSAtICggc2l6ZS5wYWRkaW5nQm90dG9tICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aCApXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN0YW1wXHJcbioqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX21hbmFnZVN0YW1wID0gbm9vcDtcclxuXHJcbi8qKlxyXG4gKiBnZXQgeC95IHBvc2l0aW9uIG9mIGVsZW1lbnQgcmVsYXRpdmUgdG8gY29udGFpbmVyIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9mZnNldCAtIGhhcyBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b21cclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0RWxlbWVudE9mZnNldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIHZhciB0aGlzUmVjdCA9IHRoaXMuX2JvdW5kaW5nUmVjdDtcclxuICB2YXIgc2l6ZSA9IGdldFNpemUoIGVsZW0gKTtcclxuICB2YXIgb2Zmc2V0ID0ge1xyXG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgLSB0aGlzUmVjdC5sZWZ0IC0gc2l6ZS5tYXJnaW5MZWZ0LFxyXG4gICAgdG9wOiBib3VuZGluZ1JlY3QudG9wIC0gdGhpc1JlY3QudG9wIC0gc2l6ZS5tYXJnaW5Ub3AsXHJcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxyXG4gICAgYm90dG9tOiB0aGlzUmVjdC5ib3R0b20gLSBib3VuZGluZ1JlY3QuYm90dG9tIC0gc2l6ZS5tYXJnaW5Cb3R0b21cclxuICB9O1xyXG4gIHJldHVybiBvZmZzZXQ7XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGVuYWJsZSBldmVudCBoYW5kbGVycyBmb3IgbGlzdGVuZXJzXHJcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXHJcbk91dGxheWVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBCaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gYmluZCBqdXN0IG9uZSBsaXN0ZW5lclxyXG4gIGlmICggdGhpcy5pc1Jlc2l6ZUJvdW5kICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBldmVudGllLmJpbmQoIHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMgKTtcclxuICB0aGlzLmlzUmVzaXplQm91bmQgPSB0cnVlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVuYmluZCBsYXlvdXQgdG8gd2luZG93IHJlc2l6aW5nXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUudW5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLmlzUmVzaXplQm91bmQgKSB7XHJcbiAgICBldmVudGllLnVuYmluZCggd2luZG93LCAncmVzaXplJywgdGhpcyApO1xyXG4gIH1cclxuICB0aGlzLmlzUmVzaXplQm91bmQgPSBmYWxzZTtcclxufTtcclxuXHJcbi8vIG9yaWdpbmFsIGRlYm91bmNlIGJ5IEpvaG4gSGFublxyXG4vLyBodHRwOi8vdW5zY3JpcHRhYmxlLmNvbS9pbmRleC5waHAvMjAwOS8wMy8yMC9kZWJvdW5jaW5nLWphdmFzY3JpcHQtbWV0aG9kcy9cclxuXHJcbi8vIHRoaXMgZmlyZXMgZXZlcnkgcmVzaXplXHJcbk91dGxheWVyLnByb3RvdHlwZS5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggdGhpcy5yZXNpemVUaW1lb3V0ICkge1xyXG4gICAgY2xlYXJUaW1lb3V0KCB0aGlzLnJlc2l6ZVRpbWVvdXQgKTtcclxuICB9XHJcblxyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgZnVuY3Rpb24gZGVsYXllZCgpIHtcclxuICAgIF90aGlzLnJlc2l6ZSgpO1xyXG4gICAgZGVsZXRlIF90aGlzLnJlc2l6ZVRpbWVvdXQ7XHJcbiAgfVxyXG5cclxuICB0aGlzLnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCBkZWxheWVkLCAxMDAgKTtcclxufTtcclxuXHJcbi8vIGRlYm91bmNlZCwgbGF5b3V0IG9uIHJlc2l6ZVxyXG5PdXRsYXllci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZG9uJ3QgdHJpZ2dlciBpZiBzaXplIGRpZCBub3QgY2hhbmdlXHJcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcclxuICBpZiAoICF0aGlzLmlzUmVzaXplQm91bmQgfHwgIXRoaXMubmVlZHNSZXNpemVMYXlvdXQoKSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMubGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxyXG4gKiBAcmV0dXJucyBCb29sZWFuXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG4gIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxyXG4gIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICB2YXIgaGFzU2l6ZXMgPSB0aGlzLnNpemUgJiYgc2l6ZTtcclxuICByZXR1cm4gaGFzU2l6ZXMgJiYgc2l6ZS5pbm5lcldpZHRoICE9PSB0aGlzLnNpemUuaW5uZXJXaWR0aDtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBhZGQgaXRlbXMgdG8gT3V0bGF5ZXIgaW5zdGFuY2VcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcclxuKiovXHJcbk91dGxheWVyLnByb3RvdHlwZS5hZGRJdGVtcyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xyXG4gIC8vIGFkZCBpdGVtcyB0byBjb2xsZWN0aW9uXHJcbiAgaWYgKCBpdGVtcy5sZW5ndGggKSB7XHJcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoIGl0ZW1zICk7XHJcbiAgfVxyXG4gIHJldHVybiBpdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMYXlvdXQgbmV3bHktYXBwZW5kZWQgaXRlbSBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIGl0ZW1zLCB0cnVlICk7XHJcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUucHJlcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBhZGQgaXRlbXMgdG8gYmVnaW5uaW5nIG9mIGNvbGxlY3Rpb25cclxuICB2YXIgcHJldmlvdXNJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCk7XHJcbiAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggcHJldmlvdXNJdGVtcyApO1xyXG4gIC8vIHN0YXJ0IG5ldyBsYXlvdXRcclxuICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG4gIC8vIGxheW91dCBuZXcgc3R1ZmYgd2l0aG91dCB0cmFuc2l0aW9uXHJcbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcclxuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcclxuICAvLyBsYXlvdXQgcHJldmlvdXMgaXRlbXNcclxuICB0aGlzLmxheW91dEl0ZW1zKCBwcmV2aW91c0l0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogcmV2ZWFsIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xyXG4gKiBAcGFyYW0ge0FycmF5IG9mIE91dGxheWVyLkl0ZW1zfSBpdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnJldmVhbCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmV2ZWFsJywgaXRlbXMgKTtcclxuXHJcbiAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcclxuICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgIGl0ZW0ucmV2ZWFsKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGhpZGUgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAnaGlkZScsIGl0ZW1zICk7XHJcblxyXG4gIHZhciBsZW4gPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGg7XHJcbiAgZm9yICggdmFyIGk9MDsgbGVuICYmIGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICBpdGVtLmhpZGUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogcmV2ZWFsIGl0ZW0gZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnJldmVhbEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGhpZGUgaXRlbSBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuaGlkZUl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gIHRoaXMuaGlkZSggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgT3V0bGF5ZXIuSXRlbSwgZ2l2ZW4gYW4gRWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICogQHJldHVybnMge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgLy8gbG9vcCB0aHJvdWdoIGl0ZW1zIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICBpZiAoIGl0ZW0uZWxlbWVudCA9PT0gZWxlbSApIHtcclxuICAgICAgLy8gcmV0dXJuIGl0ZW1cclxuICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBjb2xsZWN0aW9uIG9mIE91dGxheWVyLkl0ZW1zLCBnaXZlbiBFbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICB2YXIgaXRlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBlbGVtID0gZWxlbXNbaV07XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbSggZWxlbSApO1xyXG4gICAgaWYgKCBpdGVtICkge1xyXG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlIGVsZW1lbnQocykgZnJvbSBpbnN0YW5jZSBhbmQgRE9NXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIHJlbW92ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuXHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ3JlbW92ZScsIHJlbW92ZUl0ZW1zICk7XHJcblxyXG4gIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXHJcbiAgaWYgKCAhcmVtb3ZlSXRlbXMgfHwgIXJlbW92ZUl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHJlbW92ZUl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGl0ZW0gPSByZW1vdmVJdGVtc1tpXTtcclxuICAgIGl0ZW0ucmVtb3ZlKCk7XHJcbiAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cclxuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuaXRlbXMsIGl0ZW0gKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBkZXN0cm95IC0tLS0tIC8vXHJcblxyXG4vLyByZW1vdmUgYW5kIGRpc2FibGUgT3V0bGF5ZXIgaW5zdGFuY2VcclxuT3V0bGF5ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjbGVhbiB1cCBkeW5hbWljIHN0eWxlc1xyXG4gIHZhciBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuICBzdHlsZS5oZWlnaHQgPSAnJztcclxuICBzdHlsZS5wb3NpdGlvbiA9ICcnO1xyXG4gIHN0eWxlLndpZHRoID0gJyc7XHJcbiAgLy8gZGVzdHJveSBpdGVtc1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICBpdGVtLmRlc3Ryb3koKTtcclxuICB9XHJcblxyXG4gIHRoaXMudW5iaW5kUmVzaXplKCk7XHJcblxyXG4gIHZhciBpZCA9IHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7XHJcbiAgZGVsZXRlIGluc3RhbmNlc1sgaWQgXTsgLy8gcmVtb3ZlIHJlZmVyZW5jZSB0byBpbnN0YW5jZSBieSBpZFxyXG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xyXG4gIC8vIHJlbW92ZSBkYXRhIGZvciBqUXVlcnlcclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICk7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRhdGEgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBnZXQgT3V0bGF5ZXIgaW5zdGFuY2UgZnJvbSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcmV0dXJucyB7T3V0bGF5ZXJ9XHJcbiAqL1xyXG5PdXRsYXllci5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xyXG4gIHZhciBpZCA9IGVsZW0gJiYgZWxlbS5vdXRsYXllckdVSUQ7XHJcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcclxufTtcclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjcmVhdGUgT3V0bGF5ZXIgY2xhc3MgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBjcmVhdGUgYSBsYXlvdXQgY2xhc3NcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxyXG4gKi9cclxuT3V0bGF5ZXIuY3JlYXRlID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgb3B0aW9ucyApIHtcclxuICAvLyBzdWItY2xhc3MgT3V0bGF5ZXJcclxuICBmdW5jdGlvbiBMYXlvdXQoKSB7XHJcbiAgICBPdXRsYXllci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgfVxyXG4gIC8vIGluaGVyaXQgT3V0bGF5ZXIgcHJvdG90eXBlLCB1c2UgT2JqZWN0LmNyZWF0ZSBpZiB0aGVyZVxyXG4gIGlmICggT2JqZWN0LmNyZWF0ZSApIHtcclxuICAgIExheW91dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPdXRsYXllci5wcm90b3R5cGUgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdXRpbHMuZXh0ZW5kKCBMYXlvdXQucHJvdG90eXBlLCBPdXRsYXllci5wcm90b3R5cGUgKTtcclxuICB9XHJcbiAgLy8gc2V0IGNvbnRydWN0b3IsIHVzZWQgZm9yIG5hbWVzcGFjZSBhbmQgSXRlbVxyXG4gIExheW91dC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXlvdXQ7XHJcblxyXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XHJcbiAgLy8gYXBwbHkgbmV3IG9wdGlvbnNcclxuICB1dGlscy5leHRlbmQoIExheW91dC5kZWZhdWx0cywgb3B0aW9ucyApO1xyXG4gIC8vIGtlZXAgcHJvdG90eXBlLnNldHRpbmdzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoUGFja2VyeSB2MS4yLjApXHJcbiAgTGF5b3V0LnByb3RvdHlwZS5zZXR0aW5ncyA9IHt9O1xyXG5cclxuICBMYXlvdXQubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xyXG5cclxuICBMYXlvdXQuZGF0YSA9IE91dGxheWVyLmRhdGE7XHJcblxyXG4gIC8vIHN1Yi1jbGFzcyBJdGVtXHJcbiAgTGF5b3V0Lkl0ZW0gPSBmdW5jdGlvbiBMYXlvdXRJdGVtKCkge1xyXG4gICAgSXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgfTtcclxuXHJcbiAgTGF5b3V0Lkl0ZW0ucHJvdG90eXBlID0gbmV3IEl0ZW0oKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVjbGFyYXRpdmUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgdXRpbHMuaHRtbEluaXQoIExheW91dCwgbmFtZXNwYWNlICk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSBicmlkZ2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gbWFrZSBpbnRvIGpRdWVyeSBwbHVnaW5cclxuICBpZiAoIGpRdWVyeSAmJiBqUXVlcnkuYnJpZGdldCApIHtcclxuICAgIGpRdWVyeS5icmlkZ2V0KCBuYW1lc3BhY2UsIExheW91dCApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIExheW91dDtcclxufTtcclxuXHJcbi8vIC0tLS0tIGZpbiAtLS0tLSAvL1xyXG5cclxuLy8gYmFjayBpbiBnbG9iYWxcclxuT3V0bGF5ZXIuSXRlbSA9IEl0ZW07XHJcblxyXG5yZXR1cm4gT3V0bGF5ZXI7XHJcblxyXG59KSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIElzb3RvcGUgSXRlbVxyXG4qKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2lzb3RvcGUvanMvaXRlbScsW1xyXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5Jc290b3BlID0gd2luZG93Lklzb3RvcGUgfHwge307XHJcbiAgICB3aW5kb3cuSXNvdG9wZS5JdGVtID0gZmFjdG9yeShcclxuICAgICAgd2luZG93Lk91dGxheWVyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIgKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIHN1Yi1jbGFzcyBPdXRsYXllciBJdGVtXHJcbmZ1bmN0aW9uIEl0ZW0oKSB7XHJcbiAgT3V0bGF5ZXIuSXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbn1cclxuXHJcbkl0ZW0ucHJvdG90eXBlID0gbmV3IE91dGxheWVyLkl0ZW0oKTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBhc3NpZ24gaWQsIHVzZWQgZm9yIG9yaWdpbmFsLW9yZGVyIHNvcnRpbmdcclxuICB0aGlzLmlkID0gdGhpcy5sYXlvdXQuaXRlbUdVSUQrKztcclxuICBPdXRsYXllci5JdGVtLnByb3RvdHlwZS5fY3JlYXRlLmNhbGwoIHRoaXMgKTtcclxuICB0aGlzLnNvcnREYXRhID0ge307XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS51cGRhdGVTb3J0RGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggdGhpcy5pc0lnbm9yZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGRlZmF1bHQgc29ydGVyc1xyXG4gIHRoaXMuc29ydERhdGEuaWQgPSB0aGlzLmlkO1xyXG4gIC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbiAgdGhpcy5zb3J0RGF0YVsnb3JpZ2luYWwtb3JkZXInXSA9IHRoaXMuaWQ7XHJcbiAgdGhpcy5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gIC8vIGdvIHRocnUgZ2V0U29ydERhdGEgb2JqIGFuZCBhcHBseSB0aGUgc29ydGVyc1xyXG4gIHZhciBnZXRTb3J0RGF0YSA9IHRoaXMubGF5b3V0Lm9wdGlvbnMuZ2V0U29ydERhdGE7XHJcbiAgdmFyIHNvcnRlcnMgPSB0aGlzLmxheW91dC5fc29ydGVycztcclxuICBmb3IgKCB2YXIga2V5IGluIGdldFNvcnREYXRhICkge1xyXG4gICAgdmFyIHNvcnRlciA9IHNvcnRlcnNbIGtleSBdO1xyXG4gICAgdGhpcy5zb3J0RGF0YVsga2V5IF0gPSBzb3J0ZXIoIHRoaXMuZWxlbWVudCwgdGhpcyApO1xyXG4gIH1cclxufTtcclxuXHJcbnZhciBfZGVzdHJveSA9IEl0ZW0ucHJvdG90eXBlLmRlc3Ryb3k7XHJcbkl0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjYWxsIHN1cGVyXHJcbiAgX2Rlc3Ryb3kuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gIC8vIHJlc2V0IGRpc3BsYXksICM3NDFcclxuICB0aGlzLmNzcyh7XHJcbiAgICBkaXNwbGF5OiAnJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxucmV0dXJuIEl0ZW07XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogSXNvdG9wZSBMYXlvdXRNb2RlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZScsW1xyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lklzb3RvcGUgPSB3aW5kb3cuSXNvdG9wZSB8fCB7fTtcclxuICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGUgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcclxuICAgICAgd2luZG93Lk91dGxheWVyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggZ2V0U2l6ZSwgT3V0bGF5ZXIgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBsYXlvdXQgbW9kZSBjbGFzc1xyXG4gIGZ1bmN0aW9uIExheW91dE1vZGUoIGlzb3RvcGUgKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUgPSBpc290b3BlO1xyXG4gICAgLy8gbGluayBwcm9wZXJ0aWVzXHJcbiAgICBpZiAoIGlzb3RvcGUgKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucyA9IGlzb3RvcGUub3B0aW9uc1sgdGhpcy5uYW1lc3BhY2UgXTtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gaXNvdG9wZS5lbGVtZW50O1xyXG4gICAgICB0aGlzLml0ZW1zID0gaXNvdG9wZS5maWx0ZXJlZEl0ZW1zO1xyXG4gICAgICB0aGlzLnNpemUgPSBpc290b3BlLnNpemU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBzb21lIG1ldGhvZHMgc2hvdWxkIGp1c3QgZGVmZXIgdG8gZGVmYXVsdCBPdXRsYXllciBtZXRob2RcclxuICAgKiBhbmQgcmVmZXJlbmNlIHRoZSBJc290b3BlIGluc3RhbmNlIGFzIGB0aGlzYFxyXG4gICoqL1xyXG4gICggZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmFjYWRlTWV0aG9kcyA9IFtcclxuICAgICAgJ19yZXNldExheW91dCcsXHJcbiAgICAgICdfZ2V0SXRlbUxheW91dFBvc2l0aW9uJyxcclxuICAgICAgJ19tYW5hZ2VTdGFtcCcsXHJcbiAgICAgICdfZ2V0Q29udGFpbmVyU2l6ZScsXHJcbiAgICAgICdfZ2V0RWxlbWVudE9mZnNldCcsXHJcbiAgICAgICduZWVkc1Jlc2l6ZUxheW91dCdcclxuICAgIF07XHJcblxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gZmFjYWRlTWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIG1ldGhvZE5hbWUgPSBmYWNhZGVNZXRob2RzW2ldO1xyXG4gICAgICBMYXlvdXRNb2RlLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdID0gZ2V0T3V0bGF5ZXJNZXRob2QoIG1ldGhvZE5hbWUgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRPdXRsYXllck1ldGhvZCggbWV0aG9kTmFtZSApIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBPdXRsYXllci5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXS5hcHBseSggdGhpcy5pc290b3BlLCBhcmd1bWVudHMgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9KSgpO1xyXG5cclxuICAvLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbiAgLy8gZm9yIGhvcml6b250YWwgbGF5b3V0IG1vZGVzLCBjaGVjayB2ZXJ0aWNhbCBzaXplXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUubmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gZG9uJ3QgdHJpZ2dlciBpZiBzaXplIGRpZCBub3QgY2hhbmdlXHJcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuaXNvdG9wZS5lbGVtZW50ICk7XHJcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcclxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICAgIHZhciBoYXNTaXplcyA9IHRoaXMuaXNvdG9wZS5zaXplICYmIHNpemU7XHJcbiAgICByZXR1cm4gaGFzU2l6ZXMgJiYgc2l6ZS5pbm5lckhlaWdodCAhPSB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lckhlaWdodDtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0gLy9cclxuXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUuX2dldE1lYXN1cmVtZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRDb2x1bW5XaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRTZWdtZW50U2l6ZSggJ2NvbHVtbicsICdXaWR0aCcgKTtcclxuICB9O1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRSb3dIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdyb3cnLCAnSGVpZ2h0JyApO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldCBjb2x1bW5XaWR0aCBvciByb3dIZWlnaHRcclxuICAgKiBzZWdtZW50OiAnY29sdW1uJyBvciAncm93J1xyXG4gICAqIHNpemUgJ1dpZHRoJyBvciAnSGVpZ2h0J1xyXG4gICoqL1xyXG4gIExheW91dE1vZGUucHJvdG90eXBlLmdldFNlZ21lbnRTaXplID0gZnVuY3Rpb24oIHNlZ21lbnQsIHNpemUgKSB7XHJcbiAgICB2YXIgc2VnbWVudE5hbWUgPSBzZWdtZW50ICsgc2l6ZTtcclxuICAgIHZhciBvdXRlclNpemUgPSAnb3V0ZXInICsgc2l6ZTtcclxuICAgIC8vIGNvbHVtbldpZHRoIC8gb3V0ZXJXaWR0aCAvLyByb3dIZWlnaHQgLyBvdXRlckhlaWdodFxyXG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoIHNlZ21lbnROYW1lLCBvdXRlclNpemUgKTtcclxuICAgIC8vIGdvdCByb3dIZWlnaHQgb3IgY29sdW1uV2lkdGgsIHdlIGNhbiBjaGlsbFxyXG4gICAgaWYgKCB0aGlzWyBzZWdtZW50TmFtZSBdICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XHJcbiAgICB2YXIgZmlyc3RJdGVtU2l6ZSA9IHRoaXMuZ2V0Rmlyc3RJdGVtU2l6ZSgpO1xyXG4gICAgdGhpc1sgc2VnbWVudE5hbWUgXSA9IGZpcnN0SXRlbVNpemUgJiYgZmlyc3RJdGVtU2l6ZVsgb3V0ZXJTaXplIF0gfHxcclxuICAgICAgLy8gb3Igc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgdGhpcy5pc290b3BlLnNpemVbICdpbm5lcicgKyBzaXplIF07XHJcbiAgfTtcclxuXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuZ2V0Rmlyc3RJdGVtU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zWzBdO1xyXG4gICAgcmV0dXJuIGZpcnN0SXRlbSAmJiBmaXJzdEl0ZW0uZWxlbWVudCAmJiBnZXRTaXplKCBmaXJzdEl0ZW0uZWxlbWVudCApO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIG1ldGhvZHMgdGhhdCBzaG91bGQgcmVmZXJlbmNlIGlzb3RvcGUgLS0tLS0gLy9cclxuXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUubGF5b3V0LmFwcGx5KCB0aGlzLmlzb3RvcGUsIGFyZ3VtZW50cyApO1xyXG4gIH07XHJcblxyXG4gIExheW91dE1vZGUucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXNvdG9wZS5nZXRTaXplKCk7XHJcbiAgICB0aGlzLnNpemUgPSB0aGlzLmlzb3RvcGUuc2l6ZTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjcmVhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgTGF5b3V0TW9kZS5tb2RlcyA9IHt9O1xyXG5cclxuICBMYXlvdXRNb2RlLmNyZWF0ZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gTW9kZSgpIHtcclxuICAgICAgTGF5b3V0TW9kZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgICB9XHJcblxyXG4gICAgTW9kZS5wcm90b3R5cGUgPSBuZXcgTGF5b3V0TW9kZSgpO1xyXG5cclxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgaWYgKCBvcHRpb25zICkge1xyXG4gICAgICBNb2RlLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIE1vZGUucHJvdG90eXBlLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcclxuICAgIC8vIHJlZ2lzdGVyIGluIElzb3RvcGVcclxuICAgIExheW91dE1vZGUubW9kZXNbIG5hbWVzcGFjZSBdID0gTW9kZTtcclxuXHJcbiAgICByZXR1cm4gTW9kZTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTGF5b3V0TW9kZTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBNYXNvbnJ5IHYzLjMuMVxyXG4gKiBDYXNjYWRpbmcgZ3JpZCBsYXlvdXQgbGlicmFyeVxyXG4gKiBodHRwOi8vbWFzb25yeS5kZXNhbmRyby5jb21cclxuICogTUlUIExpY2Vuc2VcclxuICogYnkgRGF2aWQgRGVTYW5kcm9cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdtYXNvbnJ5L21hc29ucnknLFtcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXHJcbiAgICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5NYXNvbnJ5ID0gZmFjdG9yeShcclxuICAgICAgd2luZG93Lk91dGxheWVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIE91dGxheWVyLCBnZXRTaXplLCB1dGlscyApIHtcclxuXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWFzb25yeURlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xyXG4gIHZhciBNYXNvbnJ5ID0gT3V0bGF5ZXIuY3JlYXRlKCdtYXNvbnJ5Jyk7XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRTaXplKCk7XHJcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2NvbHVtbldpZHRoJywgJ291dGVyV2lkdGgnICk7XHJcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2d1dHRlcicsICdvdXRlcldpZHRoJyApO1xyXG4gICAgdGhpcy5tZWFzdXJlQ29sdW1ucygpO1xyXG5cclxuICAgIC8vIHJlc2V0IGNvbHVtbiBZXHJcbiAgICB2YXIgaSA9IHRoaXMuY29scztcclxuICAgIHRoaXMuY29sWXMgPSBbXTtcclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgdGhpcy5jb2xZcy5wdXNoKCAwICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5tYXhZID0gMDtcclxuICB9O1xyXG5cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRDb250YWluZXJXaWR0aCgpO1xyXG4gICAgLy8gaWYgY29sdW1uV2lkdGggaXMgMCwgZGVmYXVsdCB0byBvdXRlcldpZHRoIG9mIGZpcnN0IGl0ZW1cclxuICAgIGlmICggIXRoaXMuY29sdW1uV2lkdGggKSB7XHJcbiAgICAgIHZhciBmaXJzdEl0ZW0gPSB0aGlzLml0ZW1zWzBdO1xyXG4gICAgICB2YXIgZmlyc3RJdGVtRWxlbSA9IGZpcnN0SXRlbSAmJiBmaXJzdEl0ZW0uZWxlbWVudDtcclxuICAgICAgLy8gY29sdW1uV2lkdGggZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxyXG4gICAgICB0aGlzLmNvbHVtbldpZHRoID0gZmlyc3RJdGVtRWxlbSAmJiBnZXRTaXplKCBmaXJzdEl0ZW1FbGVtICkub3V0ZXJXaWR0aCB8fFxyXG4gICAgICAgIC8vIGlmIGZpcnN0IGVsZW0gaGFzIG5vIHdpZHRoLCBkZWZhdWx0IHRvIHNpemUgb2YgY29udGFpbmVyXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY29sdW1uV2lkdGggPSB0aGlzLmNvbHVtbldpZHRoICs9IHRoaXMuZ3V0dGVyO1xyXG5cclxuICAgIC8vIGNhbGN1bGF0ZSBjb2x1bW5zXHJcbiAgICB2YXIgY29udGFpbmVyV2lkdGggPSB0aGlzLmNvbnRhaW5lcldpZHRoICsgdGhpcy5ndXR0ZXI7XHJcbiAgICB2YXIgY29scyA9IGNvbnRhaW5lcldpZHRoIC8gY29sdW1uV2lkdGg7XHJcbiAgICAvLyBmaXggcm91bmRpbmcgZXJyb3JzLCB0eXBpY2FsbHkgd2l0aCBndXR0ZXJzXHJcbiAgICB2YXIgZXhjZXNzID0gY29sdW1uV2lkdGggLSBjb250YWluZXJXaWR0aCAlIGNvbHVtbldpZHRoO1xyXG4gICAgLy8gaWYgb3ZlcnNob290IGlzIGxlc3MgdGhhbiBhIHBpeGVsLCByb3VuZCB1cCwgb3RoZXJ3aXNlIGZsb29yIGl0XHJcbiAgICB2YXIgbWF0aE1ldGhvZCA9IGV4Y2VzcyAmJiBleGNlc3MgPCAxID8gJ3JvdW5kJyA6ICdmbG9vcic7XHJcbiAgICBjb2xzID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBjb2xzICk7XHJcbiAgICB0aGlzLmNvbHMgPSBNYXRoLm1heCggY29scywgMSApO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLmdldENvbnRhaW5lcldpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb250YWluZXIgaXMgcGFyZW50IGlmIGZpdCB3aWR0aFxyXG4gICAgdmFyIGNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoID8gdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgOiB0aGlzLmVsZW1lbnQ7XHJcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcclxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggY29udGFpbmVyICk7XHJcbiAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gc2l6ZSAmJiBzaXplLmlubmVyV2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5nZXRTaXplKCk7XHJcbiAgICAvLyBob3cgbWFueSBjb2x1bW5zIGRvZXMgdGhpcyBicmljayBzcGFuXHJcbiAgICB2YXIgcmVtYWluZGVyID0gaXRlbS5zaXplLm91dGVyV2lkdGggJSB0aGlzLmNvbHVtbldpZHRoO1xyXG4gICAgdmFyIG1hdGhNZXRob2QgPSByZW1haW5kZXIgJiYgcmVtYWluZGVyIDwgMSA/ICdyb3VuZCcgOiAnY2VpbCc7XHJcbiAgICAvLyByb3VuZCBpZiBvZmYgYnkgMSBwaXhlbCwgb3RoZXJ3aXNlIHVzZSBjZWlsXHJcbiAgICB2YXIgY29sU3BhbiA9IE1hdGhbIG1hdGhNZXRob2QgXSggaXRlbS5zaXplLm91dGVyV2lkdGggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICBjb2xTcGFuID0gTWF0aC5taW4oIGNvbFNwYW4sIHRoaXMuY29scyApO1xyXG5cclxuICAgIHZhciBjb2xHcm91cCA9IHRoaXMuX2dldENvbEdyb3VwKCBjb2xTcGFuICk7XHJcbiAgICAvLyBnZXQgdGhlIG1pbmltdW0gWSB2YWx1ZSBmcm9tIHRoZSBjb2x1bW5zXHJcbiAgICB2YXIgbWluaW11bVkgPSBNYXRoLm1pbi5hcHBseSggTWF0aCwgY29sR3JvdXAgKTtcclxuICAgIHZhciBzaG9ydENvbEluZGV4ID0gdXRpbHMuaW5kZXhPZiggY29sR3JvdXAsIG1pbmltdW1ZICk7XHJcblxyXG4gICAgLy8gcG9zaXRpb24gdGhlIGJyaWNrXHJcbiAgICB2YXIgcG9zaXRpb24gPSB7XHJcbiAgICAgIHg6IHRoaXMuY29sdW1uV2lkdGggKiBzaG9ydENvbEluZGV4LFxyXG4gICAgICB5OiBtaW5pbXVtWVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBhcHBseSBzZXRIZWlnaHQgdG8gbmVjZXNzYXJ5IGNvbHVtbnNcclxuICAgIHZhciBzZXRIZWlnaHQgPSBtaW5pbXVtWSArIGl0ZW0uc2l6ZS5vdXRlckhlaWdodDtcclxuICAgIHZhciBzZXRTcGFuID0gdGhpcy5jb2xzICsgMSAtIGNvbEdyb3VwLmxlbmd0aDtcclxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNldFNwYW47IGkrKyApIHtcclxuICAgICAgdGhpcy5jb2xZc1sgc2hvcnRDb2xJbmRleCArIGkgXSA9IHNldEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbFNwYW4gLSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZWxlbWVudCBzcGFuc1xyXG4gICAqIEByZXR1cm5zIHtBcnJheX0gY29sR3JvdXBcclxuICAgKi9cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0Q29sR3JvdXAgPSBmdW5jdGlvbiggY29sU3BhbiApIHtcclxuICAgIGlmICggY29sU3BhbiA8IDIgKSB7XHJcbiAgICAgIC8vIGlmIGJyaWNrIHNwYW5zIG9ubHkgb25lIGNvbHVtbiwgdXNlIGFsbCB0aGUgY29sdW1uIFlzXHJcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb2xHcm91cCA9IFtdO1xyXG4gICAgLy8gaG93IG1hbnkgZGlmZmVyZW50IHBsYWNlcyBjb3VsZCB0aGlzIGJyaWNrIGZpdCBob3Jpem9udGFsbHlcclxuICAgIHZhciBncm91cENvdW50ID0gdGhpcy5jb2xzICsgMSAtIGNvbFNwYW47XHJcbiAgICAvLyBmb3IgZWFjaCBncm91cCBwb3RlbnRpYWwgaG9yaXpvbnRhbCBwb3NpdGlvblxyXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZ3JvdXBDb3VudDsgaSsrICkge1xyXG4gICAgICAvLyBtYWtlIGFuIGFycmF5IG9mIGNvbFkgdmFsdWVzIGZvciB0aGF0IG9uZSBncm91cFxyXG4gICAgICB2YXIgZ3JvdXBDb2xZcyA9IHRoaXMuY29sWXMuc2xpY2UoIGksIGkgKyBjb2xTcGFuICk7XHJcbiAgICAgIC8vIGFuZCBnZXQgdGhlIG1heCB2YWx1ZSBvZiB0aGUgYXJyYXlcclxuICAgICAgY29sR3JvdXBbaV0gPSBNYXRoLm1heC5hcHBseSggTWF0aCwgZ3JvdXBDb2xZcyApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbEdyb3VwO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcclxuICAgIHZhciBzdGFtcFNpemUgPSBnZXRTaXplKCBzdGFtcCApO1xyXG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEVsZW1lbnRPZmZzZXQoIHN0YW1wICk7XHJcbiAgICAvLyBnZXQgdGhlIGNvbHVtbnMgdGhhdCB0aGlzIHN0YW1wIGFmZmVjdHNcclxuICAgIHZhciBmaXJzdFggPSB0aGlzLm9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8gb2Zmc2V0LmxlZnQgOiBvZmZzZXQucmlnaHQ7XHJcbiAgICB2YXIgbGFzdFggPSBmaXJzdFggKyBzdGFtcFNpemUub3V0ZXJXaWR0aDtcclxuICAgIHZhciBmaXJzdENvbCA9IE1hdGguZmxvb3IoIGZpcnN0WCAvIHRoaXMuY29sdW1uV2lkdGggKTtcclxuICAgIGZpcnN0Q29sID0gTWF0aC5tYXgoIDAsIGZpcnN0Q29sICk7XHJcbiAgICB2YXIgbGFzdENvbCA9IE1hdGguZmxvb3IoIGxhc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgLy8gbGFzdENvbCBzaG91bGQgbm90IGdvIG92ZXIgaWYgbXVsdGlwbGUgb2YgY29sdW1uV2lkdGggIzQyNVxyXG4gICAgbGFzdENvbCAtPSBsYXN0WCAlIHRoaXMuY29sdW1uV2lkdGggPyAwIDogMTtcclxuICAgIGxhc3RDb2wgPSBNYXRoLm1pbiggdGhpcy5jb2xzIC0gMSwgbGFzdENvbCApO1xyXG4gICAgLy8gc2V0IGNvbFlzIHRvIGJvdHRvbSBvZiB0aGUgc3RhbXBcclxuICAgIHZhciBzdGFtcE1heFkgPSAoIHRoaXMub3B0aW9ucy5pc09yaWdpblRvcCA/IG9mZnNldC50b3AgOiBvZmZzZXQuYm90dG9tICkgK1xyXG4gICAgICBzdGFtcFNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICBmb3IgKCB2YXIgaSA9IGZpcnN0Q29sOyBpIDw9IGxhc3RDb2w7IGkrKyApIHtcclxuICAgICAgdGhpcy5jb2xZc1tpXSA9IE1hdGgubWF4KCBzdGFtcE1heFksIHRoaXMuY29sWXNbaV0gKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5tYXhZID0gTWF0aC5tYXguYXBwbHkoIE1hdGgsIHRoaXMuY29sWXMgKTtcclxuICAgIHZhciBzaXplID0ge1xyXG4gICAgICBoZWlnaHQ6IHRoaXMubWF4WVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoICkge1xyXG4gICAgICBzaXplLndpZHRoID0gdGhpcy5fZ2V0Q29udGFpbmVyRml0V2lkdGgoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2l6ZTtcclxuICB9O1xyXG5cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyRml0V2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciB1bnVzZWRDb2xzID0gMDtcclxuICAgIC8vIGNvdW50IHVudXNlZCBjb2x1bW5zXHJcbiAgICB2YXIgaSA9IHRoaXMuY29scztcclxuICAgIHdoaWxlICggLS1pICkge1xyXG4gICAgICBpZiAoIHRoaXMuY29sWXNbaV0gIT09IDAgKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgdW51c2VkQ29scysrO1xyXG4gICAgfVxyXG4gICAgLy8gZml0IGNvbnRhaW5lciB0byBjb2x1bW5zIHRoYXQgaGF2ZSBiZWVuIHVzZWRcclxuICAgIHJldHVybiAoIHRoaXMuY29scyAtIHVudXNlZENvbHMgKSAqIHRoaXMuY29sdW1uV2lkdGggLSB0aGlzLmd1dHRlcjtcclxuICB9O1xyXG5cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHByZXZpb3VzV2lkdGggPSB0aGlzLmNvbnRhaW5lcldpZHRoO1xyXG4gICAgdGhpcy5nZXRDb250YWluZXJXaWR0aCgpO1xyXG4gICAgcmV0dXJuIHByZXZpb3VzV2lkdGggIT09IHRoaXMuY29udGFpbmVyV2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1hc29ucnk7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogTWFzb25yeSBsYXlvdXQgbW9kZVxyXG4gKiBzdWItY2xhc3NlcyBNYXNvbnJ5XHJcbiAqIGh0dHA6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScsW1xyXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZScsXHJcbiAgICAgICAgJ21hc29ucnkvbWFzb25yeSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKSxcclxuICAgICAgcmVxdWlyZSgnbWFzb25yeS1sYXlvdXQnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGUsXHJcbiAgICAgIHdpbmRvdy5NYXNvbnJ5XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSwgTWFzb25yeSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZXh0ZW5kIG9iamVjdHNcclxuZnVuY3Rpb24gZXh0ZW5kKCBhLCBiICkge1xyXG4gIGZvciAoIHZhciBwcm9wIGluIGIgKSB7XHJcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XHJcbiAgfVxyXG4gIHJldHVybiBhO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtYXNvbnJ5RGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIE1hc29ucnlNb2RlID0gTGF5b3V0TW9kZS5jcmVhdGUoJ21hc29ucnknKTtcclxuXHJcbiAgLy8gc2F2ZSBvbiB0byB0aGVzZSBtZXRob2RzXHJcbiAgdmFyIF9nZXRFbGVtZW50T2Zmc2V0ID0gTWFzb25yeU1vZGUucHJvdG90eXBlLl9nZXRFbGVtZW50T2Zmc2V0O1xyXG4gIHZhciBsYXlvdXQgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUubGF5b3V0O1xyXG4gIHZhciBfZ2V0TWVhc3VyZW1lbnQgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUuX2dldE1lYXN1cmVtZW50O1xyXG5cclxuICAvLyBzdWItY2xhc3MgTWFzb25yeVxyXG4gIGV4dGVuZCggTWFzb25yeU1vZGUucHJvdG90eXBlLCBNYXNvbnJ5LnByb3RvdHlwZSApO1xyXG5cclxuICAvLyBzZXQgYmFjaywgYXMgaXQgd2FzIG92ZXJ3cml0dGVuIGJ5IE1hc29ucnlcclxuICBNYXNvbnJ5TW9kZS5wcm90b3R5cGUuX2dldEVsZW1lbnRPZmZzZXQgPSBfZ2V0RWxlbWVudE9mZnNldDtcclxuICBNYXNvbnJ5TW9kZS5wcm90b3R5cGUubGF5b3V0ID0gbGF5b3V0O1xyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBfZ2V0TWVhc3VyZW1lbnQ7XHJcblxyXG4gIHZhciBtZWFzdXJlQ29sdW1ucyA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5tZWFzdXJlQ29sdW1ucztcclxuICBNYXNvbnJ5TW9kZS5wcm90b3R5cGUubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHNldCBpdGVtcywgdXNlZCBpZiBtZWFzdXJpbmcgZmlyc3QgaXRlbVxyXG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zO1xyXG4gICAgbWVhc3VyZUNvbHVtbnMuY2FsbCggdGhpcyApO1xyXG4gIH07XHJcblxyXG4gIC8vIEhBQ0sgY29weSBvdmVyIGlzT3JpZ2luTGVmdC9Ub3Agb3B0aW9uc1xyXG4gIHZhciBfbWFuYWdlU3RhbXAgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUuX21hbmFnZVN0YW1wO1xyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5fbWFuYWdlU3RhbXAgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMub3B0aW9ucy5pc09yaWdpbkxlZnQgPSB0aGlzLmlzb3RvcGUub3B0aW9ucy5pc09yaWdpbkxlZnQ7XHJcbiAgICB0aGlzLm9wdGlvbnMuaXNPcmlnaW5Ub3AgPSB0aGlzLmlzb3RvcGUub3B0aW9ucy5pc09yaWdpblRvcDtcclxuICAgIF9tYW5hZ2VTdGFtcC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1hc29ucnlNb2RlO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIGZpdFJvd3MgbGF5b3V0IG1vZGVcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxbXHJcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUgKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBGaXRSb3dzID0gTGF5b3V0TW9kZS5jcmVhdGUoJ2ZpdFJvd3MnKTtcclxuXHJcbkZpdFJvd3MucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMueCA9IDA7XHJcbiAgdGhpcy55ID0gMDtcclxuICB0aGlzLm1heFkgPSAwO1xyXG4gIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XHJcbn07XHJcblxyXG5GaXRSb3dzLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgaXRlbS5nZXRTaXplKCk7XHJcblxyXG4gIHZhciBpdGVtV2lkdGggPSBpdGVtLnNpemUub3V0ZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xyXG4gIC8vIGlmIHRoaXMgZWxlbWVudCBjYW5ub3QgZml0IGluIHRoZSBjdXJyZW50IHJvd1xyXG4gIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICBpZiAoIHRoaXMueCAhPT0gMCAmJiBpdGVtV2lkdGggKyB0aGlzLnggPiBjb250YWluZXJXaWR0aCApIHtcclxuICAgIHRoaXMueCA9IDA7XHJcbiAgICB0aGlzLnkgPSB0aGlzLm1heFk7XHJcbiAgfVxyXG5cclxuICB2YXIgcG9zaXRpb24gPSB7XHJcbiAgICB4OiB0aGlzLngsXHJcbiAgICB5OiB0aGlzLnlcclxuICB9O1xyXG5cclxuICB0aGlzLm1heFkgPSBNYXRoLm1heCggdGhpcy5tYXhZLCB0aGlzLnkgKyBpdGVtLnNpemUub3V0ZXJIZWlnaHQgKTtcclxuICB0aGlzLnggKz0gaXRlbVdpZHRoO1xyXG5cclxuICByZXR1cm4gcG9zaXRpb247XHJcbn07XHJcblxyXG5GaXRSb3dzLnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7IGhlaWdodDogdGhpcy5tYXhZIH07XHJcbn07XHJcblxyXG5yZXR1cm4gRml0Um93cztcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiB2ZXJ0aWNhbCBsYXlvdXQgbW9kZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnLFtcclxuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFZlcnRpY2FsID0gTGF5b3V0TW9kZS5jcmVhdGUoICd2ZXJ0aWNhbCcsIHtcclxuICBob3Jpem9udGFsQWxpZ25tZW50OiAwXHJcbn0pO1xyXG5cclxuVmVydGljYWwucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMueSA9IDA7XHJcbn07XHJcblxyXG5WZXJ0aWNhbC5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gIGl0ZW0uZ2V0U2l6ZSgpO1xyXG4gIHZhciB4ID0gKCB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lcldpZHRoIC0gaXRlbS5zaXplLm91dGVyV2lkdGggKSAqXHJcbiAgICB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbEFsaWdubWVudDtcclxuICB2YXIgeSA9IHRoaXMueTtcclxuICB0aGlzLnkgKz0gaXRlbS5zaXplLm91dGVySGVpZ2h0O1xyXG4gIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcclxufTtcclxuXHJcblZlcnRpY2FsLnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7IGhlaWdodDogdGhpcy55IH07XHJcbn07XHJcblxyXG5yZXR1cm4gVmVydGljYWw7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogSXNvdG9wZSB2Mi4yLjJcclxuICpcclxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxyXG4gKiBvciBJc290b3BlIENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcclxuICpcclxuICogaHR0cDovL2lzb3RvcGUubWV0YWZpenp5LmNvXHJcbiAqIENvcHlyaWdodCAyMDE1IE1ldGFmaXp6eVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggW1xyXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAgICdpc290b3BlL2pzL2l0ZW0nLFxyXG4gICAgICAgICdpc290b3BlL2pzL2xheW91dC1tb2RlJyxcclxuICAgICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL21hc29ucnknLFxyXG4gICAgICAgICdpc290b3BlL2pzL2xheW91dC1tb2Rlcy9maXQtcm93cycsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsJ1xyXG4gICAgICBdLFxyXG4gICAgICBmdW5jdGlvbiggT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsIEl0ZW0sIExheW91dE1vZGUgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsIEl0ZW0sIExheW91dE1vZGUgKTtcclxuICAgICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcclxuICAgICAgcmVxdWlyZSgnLi9pdGVtJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vbGF5b3V0LW1vZGUnKSxcclxuICAgICAgLy8gaW5jbHVkZSBkZWZhdWx0IGxheW91dCBtb2Rlc1xyXG4gICAgICByZXF1aXJlKCcuL2xheW91dC1tb2Rlcy9tYXNvbnJ5JyksXHJcbiAgICAgIHJlcXVpcmUoJy4vbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vbGF5b3V0LW1vZGVzL3ZlcnRpY2FsJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuSXNvdG9wZSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93Lk91dGxheWVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcclxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvcixcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcclxuICAgICAgd2luZG93Lklzb3RvcGUuSXRlbSxcclxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsXHJcbiAgSXRlbSwgTGF5b3V0TW9kZSApIHtcclxuXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdmFycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgdHJpbSA9IFN0cmluZy5wcm90b3R5cGUudHJpbSA/XHJcbiAgZnVuY3Rpb24oIHN0ciApIHtcclxuICAgIHJldHVybiBzdHIudHJpbSgpO1xyXG4gIH0gOlxyXG4gIGZ1bmN0aW9uKCBzdHIgKSB7XHJcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCAnJyApO1xyXG4gIH07XHJcblxyXG52YXIgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbnZhciBnZXRUZXh0ID0gZG9jRWxlbS50ZXh0Q29udGVudCA/XHJcbiAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICByZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcclxuICB9IDpcclxuICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgIHJldHVybiBlbGVtLmlubmVyVGV4dDtcclxuICB9O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaXNvdG9wZURlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xyXG4gIHZhciBJc290b3BlID0gT3V0bGF5ZXIuY3JlYXRlKCAnaXNvdG9wZScsIHtcclxuICAgIGxheW91dE1vZGU6IFwibWFzb25yeVwiLFxyXG4gICAgaXNKUXVlcnlGaWx0ZXJpbmc6IHRydWUsXHJcbiAgICBzb3J0QXNjZW5kaW5nOiB0cnVlXHJcbiAgfSk7XHJcblxyXG4gIElzb3RvcGUuSXRlbSA9IEl0ZW07XHJcbiAgSXNvdG9wZS5MYXlvdXRNb2RlID0gTGF5b3V0TW9kZTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5pdGVtR1VJRCA9IDA7XHJcbiAgICAvLyBmdW5jdGlvbnMgdGhhdCBzb3J0IGl0ZW1zXHJcbiAgICB0aGlzLl9zb3J0ZXJzID0ge307XHJcbiAgICB0aGlzLl9nZXRTb3J0ZXJzKCk7XHJcbiAgICAvLyBjYWxsIHN1cGVyXHJcbiAgICBPdXRsYXllci5wcm90b3R5cGUuX2NyZWF0ZS5jYWxsKCB0aGlzICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGxheW91dCBtb2Rlc1xyXG4gICAgdGhpcy5tb2RlcyA9IHt9O1xyXG4gICAgLy8gc3RhcnQgZmlsdGVyZWRJdGVtcyB3aXRoIGFsbCBpdGVtc1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5pdGVtcztcclxuICAgIC8vIGtlZXAgb2YgdHJhY2sgb2Ygc29ydEJ5c1xyXG4gICAgdGhpcy5zb3J0SGlzdG9yeSA9IFsgJ29yaWdpbmFsLW9yZGVyJyBdO1xyXG4gICAgLy8gY3JlYXRlIGZyb20gcmVnaXN0ZXJlZCBsYXlvdXQgbW9kZXNcclxuICAgIGZvciAoIHZhciBuYW1lIGluIExheW91dE1vZGUubW9kZXMgKSB7XHJcbiAgICAgIHRoaXMuX2luaXRMYXlvdXRNb2RlKCBuYW1lICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUucmVsb2FkSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHJlc2V0IGl0ZW0gSUQgY291bnRlclxyXG4gICAgdGhpcy5pdGVtR1VJRCA9IDA7XHJcbiAgICAvLyBjYWxsIHN1cGVyXHJcbiAgICBPdXRsYXllci5wcm90b3R5cGUucmVsb2FkSXRlbXMuY2FsbCggdGhpcyApO1xyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9pdGVtaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaXRlbXMgPSBPdXRsYXllci5wcm90b3R5cGUuX2l0ZW1pemUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gICAgLy8gYXNzaWduIElEIGZvciBvcmlnaW5hbC1vcmRlclxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0uaWQgPSB0aGlzLml0ZW1HVUlEKys7XHJcbiAgICB9XHJcbiAgICB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKCBpdGVtcyApO1xyXG4gICAgcmV0dXJuIGl0ZW1zO1xyXG4gIH07XHJcblxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBsYXlvdXQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2luaXRMYXlvdXRNb2RlID0gZnVuY3Rpb24oIG5hbWUgKSB7XHJcbiAgICB2YXIgTW9kZSA9IExheW91dE1vZGUubW9kZXNbIG5hbWUgXTtcclxuICAgIC8vIHNldCBtb2RlIG9wdGlvbnNcclxuICAgIC8vIEhBQ0sgZXh0ZW5kIGluaXRpYWwgb3B0aW9ucywgYmFjay1maWxsIGluIGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGluaXRpYWxPcHRzID0gdGhpcy5vcHRpb25zWyBuYW1lIF0gfHwge307XHJcbiAgICB0aGlzLm9wdGlvbnNbIG5hbWUgXSA9IE1vZGUub3B0aW9ucyA/XHJcbiAgICAgIHV0aWxzLmV4dGVuZCggTW9kZS5vcHRpb25zLCBpbml0aWFsT3B0cyApIDogaW5pdGlhbE9wdHM7XHJcbiAgICAvLyBpbml0IGxheW91dCBtb2RlIGluc3RhbmNlXHJcbiAgICB0aGlzLm1vZGVzWyBuYW1lIF0gPSBuZXcgTW9kZSggdGhpcyApO1xyXG4gIH07XHJcblxyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGlmIGZpcnN0IHRpbWUgZG9pbmcgbGF5b3V0LCBkbyBhbGwgbWFnaWNcclxuICAgIGlmICggIXRoaXMuX2lzTGF5b3V0SW5pdGVkICYmIHRoaXMub3B0aW9ucy5pc0luaXRMYXlvdXQgKSB7XHJcbiAgICAgIHRoaXMuYXJyYW5nZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9sYXlvdXQoKTtcclxuICB9O1xyXG5cclxuICAvLyBwcml2YXRlIG1ldGhvZCB0byBiZSB1c2VkIGluIGxheW91dCgpICYgbWFnaWMoKVxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XHJcbiAgICB2YXIgaXNJbnN0YW50ID0gdGhpcy5fZ2V0SXNJbnN0YW50KCk7XHJcbiAgICAvLyBsYXlvdXQgZmxvd1xyXG4gICAgdGhpcy5fcmVzZXRMYXlvdXQoKTtcclxuICAgIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggdGhpcy5maWx0ZXJlZEl0ZW1zLCBpc0luc3RhbnQgKTtcclxuXHJcbiAgICAvLyBmbGFnIGZvciBpbml0YWxpemVkXHJcbiAgICB0aGlzLl9pc0xheW91dEluaXRlZCA9IHRydWU7XHJcbiAgfTtcclxuXHJcbiAgLy8gZmlsdGVyICsgc29ydCArIGxheW91dFxyXG4gIElzb3RvcGUucHJvdG90eXBlLmFycmFuZ2UgPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICAgIC8vIHNldCBhbnkgb3B0aW9ucyBwYXNzXHJcbiAgICB0aGlzLm9wdGlvbiggb3B0cyApO1xyXG4gICAgdGhpcy5fZ2V0SXNJbnN0YW50KCk7XHJcbiAgICAvLyBmaWx0ZXIsIHNvcnQsIGFuZCBsYXlvdXRcclxuXHJcbiAgICAvLyBmaWx0ZXJcclxuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggdGhpcy5pdGVtcyApO1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gZmlsdGVyZWQubWF0Y2hlcztcclxuXHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgZnVuY3Rpb24gaGlkZVJldmVhbCgpIHtcclxuICAgICAgX3RoaXMucmV2ZWFsKCBmaWx0ZXJlZC5uZWVkUmV2ZWFsICk7XHJcbiAgICAgIF90aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fYmluZEFycmFuZ2VDb21wbGV0ZSgpO1xyXG5cclxuICAgIGlmICggdGhpcy5faXNJbnN0YW50ICkge1xyXG4gICAgICB0aGlzLl9ub1RyYW5zaXRpb24oIGhpZGVSZXZlYWwgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhpZGVSZXZlYWwoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zb3J0KCk7XHJcbiAgICB0aGlzLl9sYXlvdXQoKTtcclxuICB9O1xyXG4gIC8vIGFsaWFzIHRvIF9pbml0IGZvciBtYWluIHBsdWdpbiBtZXRob2RcclxuICBJc290b3BlLnByb3RvdHlwZS5faW5pdCA9IElzb3RvcGUucHJvdG90eXBlLmFycmFuZ2U7XHJcblxyXG4gIC8vIEhBQ0tcclxuICAvLyBEb24ndCBhbmltYXRlL3RyYW5zaXRpb24gZmlyc3QgbGF5b3V0XHJcbiAgLy8gT3IgZG9uJ3QgYW5pbWF0ZS90cmFuc2l0aW9uIG90aGVyIGxheW91dHNcclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0SXNJbnN0YW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaXNJbnN0YW50ID0gdGhpcy5vcHRpb25zLmlzTGF5b3V0SW5zdGFudCAhPT0gdW5kZWZpbmVkID9cclxuICAgICAgdGhpcy5vcHRpb25zLmlzTGF5b3V0SW5zdGFudCA6ICF0aGlzLl9pc0xheW91dEluaXRlZDtcclxuICAgIHRoaXMuX2lzSW5zdGFudCA9IGlzSW5zdGFudDtcclxuICAgIHJldHVybiBpc0luc3RhbnQ7XHJcbiAgfTtcclxuXHJcbiAgLy8gbGlzdGVuIGZvciBsYXlvdXRDb21wbGV0ZSwgaGlkZUNvbXBsZXRlIGFuZCByZXZlYWxDb21wbGV0ZVxyXG4gIC8vIHRvIHRyaWdnZXIgYXJyYW5nZUNvbXBsZXRlXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2JpbmRBcnJhbmdlQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGxpc3RlbiBmb3IgMyBldmVudHMgdG8gdHJpZ2dlciBhcnJhbmdlQ29tcGxldGVcclxuICAgIHZhciBpc0xheW91dENvbXBsZXRlLCBpc0hpZGVDb21wbGV0ZSwgaXNSZXZlYWxDb21wbGV0ZTtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBmdW5jdGlvbiBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpIHtcclxuICAgICAgaWYgKCBpc0xheW91dENvbXBsZXRlICYmIGlzSGlkZUNvbXBsZXRlICYmIGlzUmV2ZWFsQ29tcGxldGUgKSB7XHJcbiAgICAgICAgX3RoaXMuZGlzcGF0Y2hFdmVudCggJ2FycmFuZ2VDb21wbGV0ZScsIG51bGwsIFsgX3RoaXMuZmlsdGVyZWRJdGVtcyBdICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMub25jZSggJ2xheW91dENvbXBsZXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlzTGF5b3V0Q29tcGxldGUgPSB0cnVlO1xyXG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm9uY2UoICdoaWRlQ29tcGxldGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgaXNIaWRlQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm9uY2UoICdyZXZlYWxDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpc1JldmVhbENvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGZpbHRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZmlsdGVyID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gICAgdmFyIGZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XHJcbiAgICBmaWx0ZXIgPSBmaWx0ZXIgfHwgJyonO1xyXG4gICAgdmFyIG1hdGNoZXMgPSBbXTtcclxuICAgIHZhciBoaWRkZW5NYXRjaGVkID0gW107XHJcbiAgICB2YXIgdmlzaWJsZVVubWF0Y2hlZCA9IFtdO1xyXG5cclxuICAgIHZhciB0ZXN0ID0gdGhpcy5fZ2V0RmlsdGVyVGVzdCggZmlsdGVyICk7XHJcblxyXG4gICAgLy8gdGVzdCBlYWNoIGl0ZW1cclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICBpZiAoIGl0ZW0uaXNJZ25vcmVkICkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGFkZCBpdGVtIHRvIGVpdGhlciBtYXRjaGVkIG9yIHVubWF0Y2hlZCBncm91cFxyXG4gICAgICB2YXIgaXNNYXRjaGVkID0gdGVzdCggaXRlbSApO1xyXG4gICAgICAvLyBpdGVtLmlzRmlsdGVyTWF0Y2hlZCA9IGlzTWF0Y2hlZDtcclxuICAgICAgLy8gYWRkIHRvIG1hdGNoZXMgaWYgaXRzIGEgbWF0Y2hcclxuICAgICAgaWYgKCBpc01hdGNoZWQgKSB7XHJcbiAgICAgICAgbWF0Y2hlcy5wdXNoKCBpdGVtICk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gYWRkIHRvIGFkZGl0aW9uYWwgZ3JvdXAgaWYgaXRlbSBuZWVkcyB0byBiZSBoaWRkZW4gb3IgcmV2ZWFsZWRcclxuICAgICAgaWYgKCBpc01hdGNoZWQgJiYgaXRlbS5pc0hpZGRlbiApIHtcclxuICAgICAgICBoaWRkZW5NYXRjaGVkLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfSBlbHNlIGlmICggIWlzTWF0Y2hlZCAmJiAhaXRlbS5pc0hpZGRlbiApIHtcclxuICAgICAgICB2aXNpYmxlVW5tYXRjaGVkLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiBjb2xsZWN0aW9ucyBvZiBpdGVtcyB0byBiZSBtYW5pcHVsYXRlZFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcclxuICAgICAgbmVlZFJldmVhbDogaGlkZGVuTWF0Y2hlZCxcclxuICAgICAgbmVlZEhpZGU6IHZpc2libGVVbm1hdGNoZWRcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgLy8gZ2V0IGEgalF1ZXJ5LCBmdW5jdGlvbiwgb3IgYSBtYXRjaGVzU2VsZWN0b3IgdGVzdCBnaXZlbiB0aGUgZmlsdGVyXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2dldEZpbHRlclRlc3QgPSBmdW5jdGlvbiggZmlsdGVyICkge1xyXG4gICAgaWYgKCBqUXVlcnkgJiYgdGhpcy5vcHRpb25zLmlzSlF1ZXJ5RmlsdGVyaW5nICkge1xyXG4gICAgICAvLyB1c2UgalF1ZXJ5XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgICAgICByZXR1cm4galF1ZXJ5KCBpdGVtLmVsZW1lbnQgKS5pcyggZmlsdGVyICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoIHR5cGVvZiBmaWx0ZXIgPT0gJ2Z1bmN0aW9uJyApIHtcclxuICAgICAgLy8gdXNlIGZpbHRlciBhcyBmdW5jdGlvblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlciggaXRlbS5lbGVtZW50ICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBkZWZhdWx0LCB1c2UgZmlsdGVyIGFzIHNlbGVjdG9yIHN0cmluZ1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yKCBpdGVtLmVsZW1lbnQsIGZpbHRlciApO1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzb3J0aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbXMge0FycmF5fSBlbGVtc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBJc290b3BlLnByb3RvdHlwZS51cGRhdGVTb3J0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIC8vIGdldCBpdGVtc1xyXG4gICAgdmFyIGl0ZW1zO1xyXG4gICAgaWYgKCBlbGVtcyApIHtcclxuICAgICAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgICAgIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHVwZGF0ZSBhbGwgaXRlbXMgaWYgbm8gZWxlbXMgcHJvdmlkZWRcclxuICAgICAgaXRlbXMgPSB0aGlzLml0ZW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcclxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2dldFNvcnRlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBnZXRTb3J0RGF0YSA9IHRoaXMub3B0aW9ucy5nZXRTb3J0RGF0YTtcclxuICAgIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XHJcbiAgICAgIHZhciBzb3J0ZXIgPSBnZXRTb3J0RGF0YVsga2V5IF07XHJcbiAgICAgIHRoaXMuX3NvcnRlcnNbIGtleSBdID0gbXVuZ2VTb3J0ZXIoIHNvcnRlciApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbXMge0FycmF5fSBpdGVtcyAtIG9mIElzb3RvcGUuSXRlbXNcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIElzb3RvcGUucHJvdG90eXBlLl91cGRhdGVJdGVtc1NvcnREYXRhID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gICAgLy8gZG8gbm90IHVwZGF0ZSBpZiBubyBpdGVtc1xyXG4gICAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICBpdGVtLnVwZGF0ZVNvcnREYXRhKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gbXVuZ2Ugc29ydGVyIC0tLS0tIC8vXHJcblxyXG4gIC8vIGVuY2Fwc3VsYXRlIHRoaXMsIGFzIHdlIGp1c3QgbmVlZCBtdW5nZVNvcnRlclxyXG4gIC8vIG90aGVyIGZ1bmN0aW9ucyBpbiBoZXJlIGFyZSBqdXN0IGZvciBtdW5naW5nXHJcbiAgdmFyIG11bmdlU29ydGVyID0gKCBmdW5jdGlvbigpIHtcclxuICAgIC8vIGFkZCBhIG1hZ2ljIGxheWVyIHRvIHNvcnRlcnMgZm9yIGNvbnZpZW5lbnQgc2hvcnRoYW5kc1xyXG4gICAgLy8gYC5mb28tYmFyYCB3aWxsIHVzZSB0aGUgdGV4dCBvZiAuZm9vLWJhciBxdWVyeVNlbGVjdG9yXHJcbiAgICAvLyBgW2Zvby1iYXJdYCB3aWxsIHVzZSBhdHRyaWJ1dGVcclxuICAgIC8vIHlvdSBjYW4gYWxzbyBhZGQgcGFyc2VyXHJcbiAgICAvLyBgLmZvby1iYXIgcGFyc2VJbnRgIHdpbGwgcGFyc2UgdGhhdCBhcyBhIG51bWJlclxyXG4gICAgZnVuY3Rpb24gbXVuZ2VTb3J0ZXIoIHNvcnRlciApIHtcclxuICAgICAgLy8gaWYgbm90IGEgc3RyaW5nLCByZXR1cm4gZnVuY3Rpb24gb3Igd2hhdGV2ZXIgaXQgaXNcclxuICAgICAgaWYgKCB0eXBlb2Ygc29ydGVyICE9ICdzdHJpbmcnICkge1xyXG4gICAgICAgIHJldHVybiBzb3J0ZXI7XHJcbiAgICAgIH1cclxuICAgICAgLy8gcGFyc2UgdGhlIHNvcnRlciBzdHJpbmdcclxuICAgICAgdmFyIGFyZ3MgPSB0cmltKCBzb3J0ZXIgKS5zcGxpdCgnICcpO1xyXG4gICAgICB2YXIgcXVlcnkgPSBhcmdzWzBdO1xyXG4gICAgICAvLyBjaGVjayBpZiBxdWVyeSBsb29rcyBsaWtlIFthbi1hdHRyaWJ1dGVdXHJcbiAgICAgIHZhciBhdHRyTWF0Y2ggPSBxdWVyeS5tYXRjaCggL15cXFsoLispXFxdJC8gKTtcclxuICAgICAgdmFyIGF0dHIgPSBhdHRyTWF0Y2ggJiYgYXR0ck1hdGNoWzFdO1xyXG4gICAgICB2YXIgZ2V0VmFsdWUgPSBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKTtcclxuICAgICAgLy8gdXNlIHNlY29uZCBhcmd1bWVudCBhcyBhIHBhcnNlclxyXG4gICAgICB2YXIgcGFyc2VyID0gSXNvdG9wZS5zb3J0RGF0YVBhcnNlcnNbIGFyZ3NbMV0gXTtcclxuICAgICAgLy8gcGFyc2UgdGhlIHZhbHVlLCBpZiB0aGVyZSB3YXMgYSBwYXJzZXJcclxuICAgICAgc29ydGVyID0gcGFyc2VyID8gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW0gJiYgcGFyc2VyKCBnZXRWYWx1ZSggZWxlbSApICk7XHJcbiAgICAgIH0gOlxyXG4gICAgICAvLyBvdGhlcndpc2UganVzdCByZXR1cm4gdmFsdWVcclxuICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW0gJiYgZ2V0VmFsdWUoIGVsZW0gKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBzb3J0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0IGFuIGF0dHJpYnV0ZSBnZXR0ZXIsIG9yIGdldCB0ZXh0IG9mIHRoZSBxdWVyeVNlbGVjdG9yXHJcbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKSB7XHJcbiAgICAgIHZhciBnZXRWYWx1ZTtcclxuICAgICAgLy8gaWYgcXVlcnkgbG9va3MgbGlrZSBbZm9vLWJhcl0sIGdldCBhdHRyaWJ1dGVcclxuICAgICAgaWYgKCBhdHRyICkge1xyXG4gICAgICAgIGdldFZhbHVlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIGF0dHIgKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIG90aGVyd2lzZSwgYXNzdW1lIGl0cyBhIHF1ZXJ5U2VsZWN0b3IsIGFuZCBnZXQgaXRzIHRleHRcclxuICAgICAgICBnZXRWYWx1ZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgICAgdmFyIGNoaWxkID0gZWxlbS5xdWVyeVNlbGVjdG9yKCBxdWVyeSApO1xyXG4gICAgICAgICAgcmV0dXJuIGNoaWxkICYmIGdldFRleHQoIGNoaWxkICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZ2V0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG11bmdlU29ydGVyO1xyXG4gIH0pKCk7XHJcblxyXG4gIC8vIHBhcnNlcnMgdXNlZCBpbiBnZXRTb3J0RGF0YSBzaG9ydGN1dCBzdHJpbmdzXHJcbiAgSXNvdG9wZS5zb3J0RGF0YVBhcnNlcnMgPSB7XHJcbiAgICAncGFyc2VJbnQnOiBmdW5jdGlvbiggdmFsICkge1xyXG4gICAgICByZXR1cm4gcGFyc2VJbnQoIHZhbCwgMTAgKTtcclxuICAgIH0sXHJcbiAgICAncGFyc2VGbG9hdCc6IGZ1bmN0aW9uKCB2YWwgKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KCB2YWwgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBzb3J0IG1ldGhvZCAtLS0tLSAvL1xyXG5cclxuICAvLyBzb3J0IGZpbHRlcmVkSXRlbSBvcmRlclxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9zb3J0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc29ydEJ5T3B0ID0gdGhpcy5vcHRpb25zLnNvcnRCeTtcclxuICAgIGlmICggIXNvcnRCeU9wdCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gY29uY2F0IGFsbCBzb3J0QnkgYW5kIHNvcnRIaXN0b3J5XHJcbiAgICB2YXIgc29ydEJ5cyA9IFtdLmNvbmNhdC5hcHBseSggc29ydEJ5T3B0LCB0aGlzLnNvcnRIaXN0b3J5ICk7XHJcbiAgICAvLyBzb3J0IG1hZ2ljXHJcbiAgICB2YXIgaXRlbVNvcnRlciA9IGdldEl0ZW1Tb3J0ZXIoIHNvcnRCeXMsIHRoaXMub3B0aW9ucy5zb3J0QXNjZW5kaW5nICk7XHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMuc29ydCggaXRlbVNvcnRlciApO1xyXG4gICAgLy8ga2VlcCB0cmFjayBvZiBzb3J0QnkgSGlzdG9yeVxyXG4gICAgaWYgKCBzb3J0QnlPcHQgIT0gdGhpcy5zb3J0SGlzdG9yeVswXSApIHtcclxuICAgICAgLy8gYWRkIHRvIGZyb250LCBvbGRlc3QgZ29lcyBpbiBsYXN0XHJcbiAgICAgIHRoaXMuc29ydEhpc3RvcnkudW5zaGlmdCggc29ydEJ5T3B0ICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gcmV0dXJucyBhIGZ1bmN0aW9uIHVzZWQgZm9yIHNvcnRpbmdcclxuICBmdW5jdGlvbiBnZXRJdGVtU29ydGVyKCBzb3J0QnlzLCBzb3J0QXNjICkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNvcnRlciggaXRlbUEsIGl0ZW1CICkge1xyXG4gICAgICAvLyBjeWNsZSB0aHJvdWdoIGFsbCBzb3J0S2V5c1xyXG4gICAgICBmb3IgKCB2YXIgaSA9IDAsIGxlbiA9IHNvcnRCeXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgICAgdmFyIHNvcnRCeSA9IHNvcnRCeXNbaV07XHJcbiAgICAgICAgdmFyIGEgPSBpdGVtQS5zb3J0RGF0YVsgc29ydEJ5IF07XHJcbiAgICAgICAgdmFyIGIgPSBpdGVtQi5zb3J0RGF0YVsgc29ydEJ5IF07XHJcbiAgICAgICAgaWYgKCBhID4gYiB8fCBhIDwgYiApIHtcclxuICAgICAgICAgIC8vIGlmIHNvcnRBc2MgaXMgYW4gb2JqZWN0LCB1c2UgdGhlIHZhbHVlIGdpdmVuIHRoZSBzb3J0Qnkga2V5XHJcbiAgICAgICAgICB2YXIgaXNBc2NlbmRpbmcgPSBzb3J0QXNjWyBzb3J0QnkgXSAhPT0gdW5kZWZpbmVkID8gc29ydEFzY1sgc29ydEJ5IF0gOiBzb3J0QXNjO1xyXG4gICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzQXNjZW5kaW5nID8gMSA6IC0xO1xyXG4gICAgICAgICAgcmV0dXJuICggYSA+IGIgPyAxIDogLTEgKSAqIGRpcmVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBnZXQgbGF5b3V0IG1vZGVcclxuICBJc290b3BlLnByb3RvdHlwZS5fbW9kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGxheW91dE1vZGUgPSB0aGlzLm9wdGlvbnMubGF5b3V0TW9kZTtcclxuICAgIHZhciBtb2RlID0gdGhpcy5tb2Rlc1sgbGF5b3V0TW9kZSBdO1xyXG4gICAgaWYgKCAhbW9kZSApIHtcclxuICAgICAgLy8gVE9ETyBjb25zb2xlLmVycm9yXHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ05vIGxheW91dCBtb2RlOiAnICsgbGF5b3V0TW9kZSApO1xyXG4gICAgfVxyXG4gICAgLy8gSEFDSyBzeW5jIG1vZGUncyBvcHRpb25zXHJcbiAgICAvLyBhbnkgb3B0aW9ucyBzZXQgYWZ0ZXIgaW5pdCBmb3IgbGF5b3V0IG1vZGUgbmVlZCB0byBiZSBzeW5jZWRcclxuICAgIG1vZGUub3B0aW9ucyA9IHRoaXMub3B0aW9uc1sgbGF5b3V0TW9kZSBdO1xyXG4gICAgcmV0dXJuIG1vZGU7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyB0cmlnZ2VyIG9yaWdpbmFsIHJlc2V0IGxheW91dFxyXG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dC5jYWxsKCB0aGlzICk7XHJcbiAgICB0aGlzLl9tb2RlKCkuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICApIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlKCkuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcclxuICAgIHRoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAoIHN0YW1wICk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlKCkuX2dldENvbnRhaW5lclNpemUoKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5uZWVkc1Jlc2l6ZUxheW91dCgpO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZGluZyAmIHJlbW92aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIEhFQURTIFVQIG92ZXJ3cml0ZXMgZGVmYXVsdCBPdXRsYXllciBhcHBlbmRlZFxyXG4gIElzb3RvcGUucHJvdG90eXBlLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gZmlsdGVyLCBsYXlvdXQsIHJldmVhbCBuZXcgaXRlbXNcclxuICAgIHZhciBmaWx0ZXJlZEl0ZW1zID0gdGhpcy5fZmlsdGVyUmV2ZWFsQWRkZWQoIGl0ZW1zICk7XHJcbiAgICAvLyBhZGQgdG8gZmlsdGVyZWRJdGVtc1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5maWx0ZXJlZEl0ZW1zLmNvbmNhdCggZmlsdGVyZWRJdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIC8vIEhFQURTIFVQIG92ZXJ3cml0ZXMgZGVmYXVsdCBPdXRsYXllciBwcmVwZW5kZWRcclxuICBJc290b3BlLnByb3RvdHlwZS5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xyXG4gICAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBzdGFydCBuZXcgbGF5b3V0XHJcbiAgICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgICAvLyBmaWx0ZXIsIGxheW91dCwgcmV2ZWFsIG5ldyBpdGVtc1xyXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcclxuICAgIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggdGhpcy5maWx0ZXJlZEl0ZW1zICk7XHJcbiAgICAvLyBhZGQgdG8gaXRlbXMgYW5kIGZpbHRlcmVkSXRlbXNcclxuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkSXRlbXMuY29uY2F0KCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcclxuICAgIHRoaXMuaXRlbXMgPSBpdGVtcy5jb25jYXQoIHRoaXMuaXRlbXMgKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZmlsdGVyUmV2ZWFsQWRkZWQgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICB2YXIgZmlsdGVyZWQgPSB0aGlzLl9maWx0ZXIoIGl0ZW1zICk7XHJcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XHJcbiAgICAvLyByZXZlYWwgYWxsIG5ldyBpdGVtc1xyXG4gICAgdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm1hdGNoZXMgKTtcclxuICAgIC8vIGxheW91dCBuZXcgaXRlbXMsIG5vIHRyYW5zaXRpb25cclxuICAgIHRoaXMubGF5b3V0SXRlbXMoIGZpbHRlcmVkLm1hdGNoZXMsIHRydWUgKTtcclxuICAgIHJldHVybiBmaWx0ZXJlZC5tYXRjaGVzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpbHRlciwgc29ydCwgYW5kIGxheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXHJcbiAgICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gICAqL1xyXG4gIElzb3RvcGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIHZhciBpdGVtcyA9IHRoaXMuYWRkSXRlbXMoIGVsZW1zICk7XHJcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGFwcGVuZCBpdGVtIGVsZW1lbnRzXHJcbiAgICB2YXIgaSwgaXRlbTtcclxuICAgIHZhciBsZW4gPSBpdGVtcy5sZW5ndGg7XHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoIGl0ZW0uZWxlbWVudCApO1xyXG4gICAgfVxyXG4gICAgLy8gZmlsdGVyIG5ldyBzdHVmZlxyXG4gICAgdmFyIGZpbHRlcmVkSW5zZXJ0SXRlbXMgPSB0aGlzLl9maWx0ZXIoIGl0ZW1zICkubWF0Y2hlcztcclxuICAgIC8vIHNldCBmbGFnXHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaXRlbXNbaV0uaXNMYXlvdXRJbnN0YW50ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuYXJyYW5nZSgpO1xyXG4gICAgLy8gcmVzZXQgZmxhZ1xyXG4gICAgZm9yICggaT0wOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGRlbGV0ZSBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWRJbnNlcnRJdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIHZhciBfcmVtb3ZlID0gSXNvdG9wZS5wcm90b3R5cGUucmVtb3ZlO1xyXG4gIElzb3RvcGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gICAgdmFyIHJlbW92ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICAgIC8vIGRvIHJlZ3VsYXIgdGhpbmdcclxuICAgIF9yZW1vdmUuY2FsbCggdGhpcywgZWxlbXMgKTtcclxuICAgIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXHJcbiAgICB2YXIgbGVuID0gcmVtb3ZlSXRlbXMgJiYgcmVtb3ZlSXRlbXMubGVuZ3RoO1xyXG4gICAgaWYgKCAhbGVuICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyByZW1vdmUgZWxlbXMgZnJvbSBmaWx0ZXJlZEl0ZW1zXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gcmVtb3ZlSXRlbXNbaV07XHJcbiAgICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY29sbGVjdGlvblxyXG4gICAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLmZpbHRlcmVkSXRlbXMsIGl0ZW0gKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5zaHVmZmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyB1cGRhdGUgcmFuZG9tIHNvcnREYXRhXHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLml0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0uc29ydERhdGEucmFuZG9tID0gTWF0aC5yYW5kb20oKTtcclxuICAgIH1cclxuICAgIHRoaXMub3B0aW9ucy5zb3J0QnkgPSAncmFuZG9tJztcclxuICAgIHRoaXMuX3NvcnQoKTtcclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIHRyaWdnZXIgZm4gd2l0aG91dCB0cmFuc2l0aW9uXHJcbiAgICoga2luZCBvZiBoYWNreSB0byBoYXZlIHRoaXMgaW4gdGhlIGZpcnN0IHBsYWNlXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICAgKiBAcmV0dXJucyByZXRcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIElzb3RvcGUucHJvdG90eXBlLl9ub1RyYW5zaXRpb24gPSBmdW5jdGlvbiggZm4gKSB7XHJcbiAgICAvLyBzYXZlIHRyYW5zaXRpb25EdXJhdGlvbiBiZWZvcmUgZGlzYWJsaW5nXHJcbiAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbjtcclxuICAgIC8vIGRpc2FibGUgdHJhbnNpdGlvblxyXG4gICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XHJcbiAgICAvLyBkbyBpdFxyXG4gICAgdmFyIHJldHVyblZhbHVlID0gZm4uY2FsbCggdGhpcyApO1xyXG4gICAgLy8gcmUtZW5hYmxlIHRyYW5zaXRpb24gZm9yIHJldmVhbFxyXG4gICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcclxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBoZWxwZXIgbWV0aG9kcyAtLS0tLSAvL1xyXG5cclxuICAvKipcclxuICAgKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGZpbHRlcmVkIGl0ZW0gZWxlbWVudHNcclxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zIC0gY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBlbGVtcyA9IFtdO1xyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5maWx0ZXJlZEl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBlbGVtcy5wdXNoKCB0aGlzLmZpbHRlcmVkSXRlbXNbaV0uZWxlbWVudCApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVsZW1zO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuICByZXR1cm4gSXNvdG9wZTtcclxuXHJcbn0pKTtcclxuLyohXHJcbiAqIFNsaWNrTmF2IFJlc3BvbnNpdmUgTW9iaWxlIE1lbnUgdjEuMC43XHJcbiAqIChjKSAyMDE2IEpvc2ggQ29wZVxyXG4gKiBsaWNlbnNlZCB1bmRlciBNSVRcclxuICovXHJcbjsoZnVuY3Rpb24gKCQsIGRvY3VtZW50LCB3aW5kb3cpIHtcclxuICAgIHZhclxyXG4gICAgLy8gZGVmYXVsdCBzZXR0aW5ncyBvYmplY3QuXHJcbiAgICAgICAgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnTUVOVScsXHJcbiAgICAgICAgICAgIGR1cGxpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgZHVyYXRpb246IDIwMCxcclxuICAgICAgICAgICAgZWFzaW5nT3BlbjogJ3N3aW5nJyxcclxuICAgICAgICAgICAgZWFzaW5nQ2xvc2U6ICdzd2luZycsXHJcbiAgICAgICAgICAgIGNsb3NlZFN5bWJvbDogJyYjOTY1ODsnLFxyXG4gICAgICAgICAgICBvcGVuZWRTeW1ib2w6ICcmIzk2NjA7JyxcclxuICAgICAgICAgICAgcHJlcGVuZFRvOiAnYm9keScsXHJcbiAgICAgICAgICAgIGFwcGVuZFRvOiAnJyxcclxuICAgICAgICAgICAgcGFyZW50VGFnOiAnYScsXHJcbiAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXHJcbiAgICAgICAgICAgIGFsbG93UGFyZW50TGlua3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBuZXN0ZWRQYXJlbnRMaW5rczogdHJ1ZSxcclxuICAgICAgICAgICAgc2hvd0NoaWxkcmVuOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVtb3ZlSWRzOiB0cnVlLFxyXG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVtb3ZlU3R5bGVzOiBmYWxzZSxcclxuXHRcdFx0YnJhbmQ6ICcnLFxyXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgICAgICAgYmVmb3JlT3BlbjogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgICAgICAgIGJlZm9yZUNsb3NlOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgICAgICAgYWZ0ZXJPcGVuOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgICAgICAgYWZ0ZXJDbG9zZTogZnVuY3Rpb24gKCkge31cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vYmlsZU1lbnUgPSAnc2xpY2tuYXYnLFxyXG4gICAgICAgIHByZWZpeCA9ICdzbGlja25hdic7XHJcblxyXG4gICAgZnVuY3Rpb24gUGx1Z2luKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG5cclxuICAgICAgICAvLyBqUXVlcnkgaGFzIGFuIGV4dGVuZCBtZXRob2Qgd2hpY2ggbWVyZ2VzIHRoZSBjb250ZW50cyBvZiB0d28gb3JcclxuICAgICAgICAvLyBtb3JlIG9iamVjdHMsIHN0b3JpbmcgdGhlIHJlc3VsdCBpbiB0aGUgZmlyc3Qgb2JqZWN0LiBUaGUgZmlyc3Qgb2JqZWN0XHJcbiAgICAgICAgLy8gaXMgZ2VuZXJhbGx5IGVtcHR5IGFzIHdlIGRvbid0IHdhbnQgdG8gYWx0ZXIgdGhlIGRlZmF1bHQgb3B0aW9ucyBmb3JcclxuICAgICAgICAvLyBmdXR1cmUgaW5zdGFuY2VzIG9mIHRoZSBwbHVnaW5cclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gRG9uJ3QgcmVtb3ZlIElEcyBieSBkZWZhdWx0IGlmIGR1cGxpY2F0ZSBpcyBmYWxzZVxyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5kdXBsaWNhdGUgJiYgIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoXCJyZW1vdmVJZHNcIikpIHtcclxuICAgICAgICAgIHRoaXMuc2V0dGluZ3MucmVtb3ZlSWRzID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kZWZhdWx0cyA9IGRlZmF1bHRzO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBtb2JpbGVNZW51O1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgbWVudSA9ICQodGhpcy5lbGVtZW50KSxcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxyXG4gICAgICAgICAgICBpY29uQ2xhc3MsXHJcbiAgICAgICAgICAgIG1lbnVCYXI7XHJcblxyXG4gICAgICAgIC8vIGNsb25lIG1lbnUgaWYgbmVlZGVkXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmR1cGxpY2F0ZSkge1xyXG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYgPSBtZW51LmNsb25lKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHRoaXMubW9iaWxlTmF2ID0gbWVudTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBJRHMgaWYgc2V0XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLnJlbW92ZUlkcykge1xyXG4gICAgICAgICAgJHRoaXMubW9iaWxlTmF2LnJlbW92ZUF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcclxuICAgICAgICAgICAgICAkKGUpLnJlbW92ZUF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBjbGFzc2VzIGlmIHNldFxyXG4gICAgICAgIGlmIChzZXR0aW5ncy5yZW1vdmVDbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICR0aGlzLm1vYmlsZU5hdi5yZW1vdmVBdHRyKCdjbGFzcycpO1xyXG4gICAgICAgICAgICAkdGhpcy5tb2JpbGVOYXYuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcclxuICAgICAgICAgICAgICAgICQoZSkucmVtb3ZlQXR0cignY2xhc3MnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmUgc3R5bGVzIGlmIHNldFxyXG4gICAgICAgIGlmIChzZXR0aW5ncy5yZW1vdmVTdHlsZXMpIHtcclxuICAgICAgICAgICAgJHRoaXMubW9iaWxlTmF2LnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICR0aGlzLm1vYmlsZU5hdi5maW5kKCcqJykuZWFjaChmdW5jdGlvbiAoaSwgZSkge1xyXG4gICAgICAgICAgICAgICAgJChlKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0eWxpbmcgY2xhc3MgZm9yIHRoZSBidXR0b25cclxuICAgICAgICBpY29uQ2xhc3MgPSBwcmVmaXggKyAnX2ljb24nO1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MubGFiZWwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIGljb25DbGFzcyArPSAnICcgKyBwcmVmaXggKyAnX25vLXRleHQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLnBhcmVudFRhZyA9PSAnYScpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MucGFyZW50VGFnID0gJ2EgaHJlZj1cIiNcIic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjcmVhdGUgbWVudSBiYXJcclxuICAgICAgICAkdGhpcy5tb2JpbGVOYXYuYXR0cignY2xhc3MnLCBwcmVmaXggKyAnX25hdicpO1xyXG4gICAgICAgIG1lbnVCYXIgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIHByZWZpeCArICdfbWVudVwiPjwvZGl2PicpO1xyXG5cdFx0aWYgKHNldHRpbmdzLmJyYW5kICE9PSAnJykge1xyXG5cdFx0XHR2YXIgYnJhbmQgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIHByZWZpeCArICdfYnJhbmRcIj4nK3NldHRpbmdzLmJyYW5kKyc8L2Rpdj4nKTtcclxuXHRcdFx0JChtZW51QmFyKS5hcHBlbmQoYnJhbmQpO1xyXG5cdFx0fVxyXG4gICAgICAgICR0aGlzLmJ0biA9ICQoXHJcbiAgICAgICAgICAgIFsnPCcgKyBzZXR0aW5ncy5wYXJlbnRUYWcgKyAnIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCInICsgcHJlZml4ICsgJ19idG4gJyArIHByZWZpeCArICdfY29sbGFwc2VkXCI+JyxcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX21lbnV0eHRcIj4nICsgc2V0dGluZ3MubGFiZWwgKyAnPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCInICsgaWNvbkNsYXNzICsgJ1wiPicsXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIHByZWZpeCArICdfaWNvbi1iYXJcIj48L3NwYW4+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCInICsgcHJlZml4ICsgJ19pY29uLWJhclwiPjwvc3Bhbj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBwcmVmaXggKyAnX2ljb24tYmFyXCI+PC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAnPC9zcGFuPicsXHJcbiAgICAgICAgICAgICc8LycgKyBzZXR0aW5ncy5wYXJlbnRUYWcgKyAnPidcclxuICAgICAgICAgICAgXS5qb2luKCcnKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgJChtZW51QmFyKS5hcHBlbmQoJHRoaXMuYnRuKTtcclxuICAgICAgICBpZihzZXR0aW5ncy5hcHBlbmRUbyAhPT0gJycpIHtcclxuICAgICAgICAgICAgJChzZXR0aW5ncy5hcHBlbmRUbykuYXBwZW5kKG1lbnVCYXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoc2V0dGluZ3MucHJlcGVuZFRvKS5wcmVwZW5kKG1lbnVCYXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZW51QmFyLmFwcGVuZCgkdGhpcy5tb2JpbGVOYXYpO1xyXG5cclxuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgc3RydWN0dXJlIGFkZGluZyBhZGRpdGlvbmFsIHN0cnVjdHVyZVxyXG4gICAgICAgIHZhciBpdGVtcyA9ICR0aGlzLm1vYmlsZU5hdi5maW5kKCdsaScpO1xyXG4gICAgICAgICQoaXRlbXMpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICBkYXRhID0ge307XHJcbiAgICAgICAgICAgIGRhdGEuY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuKCd1bCcpLmF0dHIoJ3JvbGUnLCAnbWVudScpO1xyXG4gICAgICAgICAgICBpdGVtLmRhdGEoJ21lbnUnLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGEgbGlzdCBpdGVtIGhhcyBhIG5lc3RlZCBtZW51XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYWxsIHRleHQgYmVmb3JlIHRoZSBjaGlsZCBtZW51XHJcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgYW5jaG9yc1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhID0gaXRlbS5jb250ZW50cygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zQW5jaG9yID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKGEpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJCh0aGlzKS5pcygndWwnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCQodGhpcykuaXMoXCJhXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zQW5jaG9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd3JhcEVsZW1lbnQgPSAkKFxyXG4gICAgICAgICAgICAgICAgICAgICc8JyArIHNldHRpbmdzLnBhcmVudFRhZyArICcgcm9sZT1cIm1lbnVpdGVtXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCInICsgcHJlZml4ICsgJ19pdGVtXCIvPidcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gd3JhcCBpdGVtIHRleHQgd2l0aCB0YWcgYW5kIGFkZCBjbGFzc2VzIHVubGVzcyB3ZSBhcmUgc2VwYXJhdGluZyBwYXJlbnQgbGlua3NcclxuICAgICAgICAgICAgICAgIGlmICgoIXNldHRpbmdzLmFsbG93UGFyZW50TGlua3MgfHwgc2V0dGluZ3MubmVzdGVkUGFyZW50TGlua3MpIHx8ICFjb250YWluc0FuY2hvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkd3JhcCA9ICQobm9kZXMpLndyYXBBbGwod3JhcEVsZW1lbnQpLnBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICR3cmFwLmFkZENsYXNzKHByZWZpeCsnX3JvdycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgJChub2Rlcykud3JhcEFsbCgnPHNwYW4gY2xhc3M9XCInK3ByZWZpeCsnX3BhcmVudC1saW5rICcrcHJlZml4Kydfcm93XCIvPicpLnBhcmVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3Muc2hvd0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyhwcmVmaXgrJ19vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyhwcmVmaXgrJ19wYXJlbnQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgcGFyZW50IGFycm93LiB3cmFwIHdpdGggbGluayBpZiBwYXJlbnQgbGlua3MgYW5kIHNlcGFyYXRpbmdcclxuICAgICAgICAgICAgICAgIHZhciBhcnJvd0VsZW1lbnQgPSAkKCc8c3BhbiBjbGFzcz1cIicrcHJlZml4KydfYXJyb3dcIj4nKyhzZXR0aW5ncy5zaG93Q2hpbGRyZW4/c2V0dGluZ3Mub3BlbmVkU3ltYm9sOnNldHRpbmdzLmNsb3NlZFN5bWJvbCkrJzwvc3Bhbj4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MuYWxsb3dQYXJlbnRMaW5rcyAmJiAhc2V0dGluZ3MubmVzdGVkUGFyZW50TGlua3MgJiYgY29udGFpbnNBbmNob3IpXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50LndyYXAod3JhcEVsZW1lbnQpLnBhcmVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vYXBwZW5kIGFycm93XHJcbiAgICAgICAgICAgICAgICAkKG5vZGVzKS5sYXN0KCkuYWZ0ZXIoYXJyb3dFbGVtZW50KTtcclxuXHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBpdGVtLmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyhwcmVmaXgrJ190eHRub2RlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFjY2Vzc2liaWxpdHkgZm9yIGxpbmtzXHJcbiAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4oJ2EnKS5hdHRyKCdyb2xlJywgJ21lbnVpdGVtJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICAgICAgLy9FbnN1cmUgdGhhdCBpdCdzIG5vdCBhIHBhcmVudFxyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmNsb3NlT25DbGljayAmJiAhJChldmVudC50YXJnZXQpLnBhcmVudCgpLmNsb3Nlc3QoJ2xpJykuaGFzQ2xhc3MocHJlZml4KydfcGFyZW50JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9FbXVsYXRlIG1lbnUgY2xvc2UgaWYgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJHRoaXMuYnRuKS5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2Fsc28gY2xvc2Ugb24gY2xpY2sgaWYgcGFyZW50IGxpbmtzIGFyZSBzZXRcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmNsb3NlT25DbGljayAmJiBzZXR0aW5ncy5hbGxvd1BhcmVudExpbmtzKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuKCdhJykuY2hpbGRyZW4oJ2EnKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0VtdWxhdGUgbWVudSBjbG9zZVxyXG4gICAgICAgICAgICAgICAgICAgICQoJHRoaXMuYnRuKS5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaXRlbS5maW5kKCcuJytwcmVmaXgrJ19wYXJlbnQtbGluayBhOm5vdCguJytwcmVmaXgrJ19pdGVtKScpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICAgICAgICAgICAgICAvL0VtdWxhdGUgbWVudSBjbG9zZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCR0aGlzLmJ0bikuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHN0cnVjdHVyZSBpcyBpbiBwbGFjZSwgbm93IGhpZGUgYXBwcm9wcmlhdGUgaXRlbXNcclxuICAgICAgICAkKGl0ZW1zKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoJ21lbnUnKTtcclxuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5zaG93Q2hpbGRyZW4pe1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuX3Zpc2liaWxpdHlUb2dnbGUoZGF0YS5jaGlsZHJlbiwgbnVsbCwgZmFsc2UsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGZpbmFsbHkgdG9nZ2xlIGVudGlyZSBtZW51XHJcbiAgICAgICAgJHRoaXMuX3Zpc2liaWxpdHlUb2dnbGUoJHRoaXMubW9iaWxlTmF2LCBudWxsLCBmYWxzZSwgJ2luaXQnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gYWNjZXNzaWJpbGl0eSBmb3IgbWVudSBidXR0b25cclxuICAgICAgICAkdGhpcy5tb2JpbGVOYXYuYXR0cigncm9sZScsJ21lbnUnKTtcclxuXHJcbiAgICAgICAgLy8gb3V0bGluZSBwcmV2ZW50aW9uIHdoZW4gdXNpbmcgbW91c2VcclxuICAgICAgICAkKGRvY3VtZW50KS5tb3VzZWRvd24oZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgJHRoaXMuX291dGxpbmVzKGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkua2V5dXAoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgJHRoaXMuX291dGxpbmVzKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBtZW51IGJ1dHRvbiBjbGlja1xyXG4gICAgICAgICQoJHRoaXMuYnRuKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICR0aGlzLl9tZW51VG9nZ2xlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGNsaWNrIG9uIG1lbnUgcGFyZW50XHJcbiAgICAgICAgJHRoaXMubW9iaWxlTmF2Lm9uKCdjbGljaycsICcuJyArIHByZWZpeCArICdfaXRlbScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgJHRoaXMuX2l0ZW1DbGljaygkKHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIGVudGVyIGtleSBvbiBtZW51IGJ1dHRvbiBhbmQgbWVudSBwYXJlbnRzXHJcbiAgICAgICAgJCgkdGhpcy5idG4pLmtleWRvd24oZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIGV2ID0gZSB8fCBldmVudDtcclxuICAgICAgICAgICAgaWYoZXYua2V5Q29kZSA9PSAxMykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuX21lbnVUb2dnbGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkdGhpcy5tb2JpbGVOYXYub24oJ2tleWRvd24nLCAnLicrcHJlZml4KydfaXRlbScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdmFyIGV2ID0gZSB8fCBldmVudDtcclxuICAgICAgICAgICAgaWYoZXYua2V5Q29kZSA9PSAxMykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuX2l0ZW1DbGljaygkKGUudGFyZ2V0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gYWxsb3cgbGlua3MgY2xpY2thYmxlIHdpdGhpbiBwYXJlbnQgdGFncyBpZiBzZXRcclxuICAgICAgICBpZiAoc2V0dGluZ3MuYWxsb3dQYXJlbnRMaW5rcyAmJiBzZXR0aW5ncy5uZXN0ZWRQYXJlbnRMaW5rcykge1xyXG4gICAgICAgICAgICAkKCcuJytwcmVmaXgrJ19pdGVtIGEnKS5jbGljayhmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vdG9nZ2xlIG1lbnVcclxuICAgIFBsdWdpbi5wcm90b3R5cGUuX21lbnVUb2dnbGUgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBidG4gPSAkdGhpcy5idG47XHJcbiAgICAgICAgdmFyIG1vYmlsZU5hdiA9ICR0aGlzLm1vYmlsZU5hdjtcclxuXHJcbiAgICAgICAgaWYgKGJ0bi5oYXNDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKSkge1xyXG4gICAgICAgICAgICBidG4ucmVtb3ZlQ2xhc3MocHJlZml4KydfY29sbGFwc2VkJyk7XHJcbiAgICAgICAgICAgIGJ0bi5hZGRDbGFzcyhwcmVmaXgrJ19vcGVuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnRuLnJlbW92ZUNsYXNzKHByZWZpeCsnX29wZW4nKTtcclxuICAgICAgICAgICAgYnRuLmFkZENsYXNzKHByZWZpeCsnX2NvbGxhcHNlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBidG4uYWRkQ2xhc3MocHJlZml4KydfYW5pbWF0aW5nJyk7XHJcbiAgICAgICAgJHRoaXMuX3Zpc2liaWxpdHlUb2dnbGUobW9iaWxlTmF2LCBidG4ucGFyZW50KCksIHRydWUsIGJ0bik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHRvZ2dsZSBjbGlja2VkIGl0ZW1zXHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLl9pdGVtQ2xpY2sgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9ICR0aGlzLnNldHRpbmdzO1xyXG4gICAgICAgIHZhciBkYXRhID0gZWwuZGF0YSgnbWVudScpO1xyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhID0ge307XHJcbiAgICAgICAgICAgIGRhdGEuYXJyb3cgPSBlbC5jaGlsZHJlbignLicrcHJlZml4KydfYXJyb3cnKTtcclxuICAgICAgICAgICAgZGF0YS51bCA9IGVsLm5leHQoJ3VsJyk7XHJcbiAgICAgICAgICAgIGRhdGEucGFyZW50ID0gZWwucGFyZW50KCk7XHJcbiAgICAgICAgICAgIC8vU2VwYXJhdGVkIHBhcmVudCBsaW5rIHN0cnVjdHVyZVxyXG4gICAgICAgICAgICBpZiAoZGF0YS5wYXJlbnQuaGFzQ2xhc3MocHJlZml4KydfcGFyZW50LWxpbmsnKSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wYXJlbnQgPSBlbC5wYXJlbnQoKS5wYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIGRhdGEudWwgPSBlbC5wYXJlbnQoKS5uZXh0KCd1bCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsLmRhdGEoJ21lbnUnLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGEucGFyZW50Lmhhc0NsYXNzKHByZWZpeCsnX2NvbGxhcHNlZCcpKSB7XHJcbiAgICAgICAgICAgIGRhdGEuYXJyb3cuaHRtbChzZXR0aW5ncy5vcGVuZWRTeW1ib2wpO1xyXG4gICAgICAgICAgICBkYXRhLnBhcmVudC5yZW1vdmVDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKTtcclxuICAgICAgICAgICAgZGF0YS5wYXJlbnQuYWRkQ2xhc3MocHJlZml4Kydfb3BlbicpO1xyXG4gICAgICAgICAgICBkYXRhLnBhcmVudC5hZGRDbGFzcyhwcmVmaXgrJ19hbmltYXRpbmcnKTtcclxuICAgICAgICAgICAgJHRoaXMuX3Zpc2liaWxpdHlUb2dnbGUoZGF0YS51bCwgZGF0YS5wYXJlbnQsIHRydWUsIGVsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhLmFycm93Lmh0bWwoc2V0dGluZ3MuY2xvc2VkU3ltYm9sKTtcclxuICAgICAgICAgICAgZGF0YS5wYXJlbnQuYWRkQ2xhc3MocHJlZml4KydfY29sbGFwc2VkJyk7XHJcbiAgICAgICAgICAgIGRhdGEucGFyZW50LnJlbW92ZUNsYXNzKHByZWZpeCsnX29wZW4nKTtcclxuICAgICAgICAgICAgZGF0YS5wYXJlbnQuYWRkQ2xhc3MocHJlZml4KydfYW5pbWF0aW5nJyk7XHJcbiAgICAgICAgICAgICR0aGlzLl92aXNpYmlsaXR5VG9nZ2xlKGRhdGEudWwsIGRhdGEucGFyZW50LCB0cnVlLCBlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyB0b2dnbGUgYWN0dWFsIHZpc2liaWxpdHkgYW5kIGFjY2Vzc2liaWxpdHkgdGFnc1xyXG4gICAgUGx1Z2luLnByb3RvdHlwZS5fdmlzaWJpbGl0eVRvZ2dsZSA9IGZ1bmN0aW9uKGVsLCBwYXJlbnQsIGFuaW1hdGUsIHRyaWdnZXIsIGluaXQpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9ICR0aGlzLnNldHRpbmdzO1xyXG4gICAgICAgIHZhciBpdGVtcyA9ICR0aGlzLl9nZXRBY3Rpb25JdGVtcyhlbCk7XHJcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gMDtcclxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHNldHRpbmdzLmR1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVsLmhhc0NsYXNzKHByZWZpeCsnX2hpZGRlbicpKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUNsYXNzKHByZWZpeCsnX2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgLy9GaXJlIGJlZm9yZU9wZW4gY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGlmICghaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmJlZm9yZU9wZW4odHJpZ2dlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsLnNsaWRlRG93bihkdXJhdGlvbiwgc2V0dGluZ3MuZWFzaW5nT3BlbiwgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAkKHRyaWdnZXIpLnJlbW92ZUNsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xyXG4gICAgICAgICAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vRmlyZSBhZnRlck9wZW4gY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGlmICghaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmFmdGVyT3Blbih0cmlnZ2VyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGVsLmF0dHIoJ2FyaWEtaGlkZGVuJywnZmFsc2UnKTtcclxuICAgICAgICAgICAgaXRlbXMuYXR0cigndGFiaW5kZXgnLCAnMCcpO1xyXG4gICAgICAgICAgICAkdGhpcy5fc2V0VmlzQXR0cihlbCwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLmFkZENsYXNzKHByZWZpeCsnX2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgLy9GaXJlIGluaXQgb3IgYmVmb3JlQ2xvc2UgY2FsbGJhY2tcclxuICAgICAgICAgICAgaWYgKCFpbml0KXtcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzLmJlZm9yZUNsb3NlKHRyaWdnZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbC5zbGlkZVVwKGR1cmF0aW9uLCB0aGlzLnNldHRpbmdzLmVhc2luZ0Nsb3NlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGVsLmF0dHIoJ2FyaWEtaGlkZGVuJywndHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgaXRlbXMuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLl9zZXRWaXNBdHRyKGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGVsLmhpZGUoKTsgLy9qUXVlcnkgMS43IGJ1ZyBmaXhcclxuXHJcbiAgICAgICAgICAgICAgICAkKHRyaWdnZXIpLnJlbW92ZUNsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xyXG4gICAgICAgICAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKHByZWZpeCsnX2FuaW1hdGluZycpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vRmlyZSBpbml0IG9yIGFmdGVyQ2xvc2UgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGlmICghaW5pdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuYWZ0ZXJDbG9zZSh0cmlnZ2VyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciA9PSAnaW5pdCcpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmluaXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBzZXQgYXR0cmlidXRlcyBvZiBlbGVtZW50IGFuZCBjaGlsZHJlbiBiYXNlZCBvbiB2aXNpYmlsaXR5XHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLl9zZXRWaXNBdHRyID0gZnVuY3Rpb24oZWwsIGhpZGRlbikge1xyXG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgIC8vIHNlbGVjdCBhbGwgcGFyZW50cyB0aGF0IGFyZW4ndCBoaWRkZW5cclxuICAgICAgICB2YXIgbm9uSGlkZGVuID0gZWwuY2hpbGRyZW4oJ2xpJykuY2hpbGRyZW4oJ3VsJykubm90KCcuJytwcmVmaXgrJ19oaWRkZW4nKTtcclxuXHJcbiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGFsbCBpdGVtcyBzZXR0aW5nIGFwcHJvcHJpYXRlIHRhZ3NcclxuICAgICAgICBpZiAoIWhpZGRlbikge1xyXG4gICAgICAgICAgICBub25IaWRkZW4uZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHVsID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHVsLmF0dHIoJ2FyaWEtaGlkZGVuJywnZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9ICR0aGlzLl9nZXRBY3Rpb25JdGVtcyh1bCk7XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5hdHRyKCd0YWJpbmRleCcsICcwJyk7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5fc2V0VmlzQXR0cih1bCwgaGlkZGVuKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbm9uSGlkZGVuLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciB1bCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB1bC5hdHRyKCdhcmlhLWhpZGRlbicsJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9ICR0aGlzLl9nZXRBY3Rpb25JdGVtcyh1bCk7XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5hdHRyKCd0YWJpbmRleCcsICctMScpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuX3NldFZpc0F0dHIodWwsIGhpZGRlbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gZ2V0IGFsbCAxc3QgbGV2ZWwgaXRlbXMgdGhhdCBhcmUgY2xpY2thYmxlXHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLl9nZXRBY3Rpb25JdGVtcyA9IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBlbC5kYXRhKFwibWVudVwiKTtcclxuICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBlbC5jaGlsZHJlbignbGknKTtcclxuICAgICAgICAgICAgdmFyIGFuY2hvcnMgPSBpdGVtcy5maW5kKCdhJyk7XHJcbiAgICAgICAgICAgIGRhdGEubGlua3MgPSBhbmNob3JzLmFkZChpdGVtcy5maW5kKCcuJytwcmVmaXgrJ19pdGVtJykpO1xyXG4gICAgICAgICAgICBlbC5kYXRhKCdtZW51JywgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhLmxpbmtzO1xyXG4gICAgfTtcclxuXHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLl9vdXRsaW5lcyA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAgICAgICAkKCcuJytwcmVmaXgrJ19pdGVtLCAuJytwcmVmaXgrJ19idG4nKS5jc3MoJ291dGxpbmUnLCdub25lJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLicrcHJlZml4KydfaXRlbSwgLicrcHJlZml4KydfYnRuJykuY3NzKCdvdXRsaW5lJywnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuICAgICAgICAkdGhpcy5fbWVudVRvZ2dsZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBQbHVnaW4ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCR0aGlzLmJ0bi5oYXNDbGFzcyhwcmVmaXgrJ19jb2xsYXBzZWQnKSkge1xyXG4gICAgICAgICAgICAkdGhpcy5fbWVudVRvZ2dsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgUGx1Z2luLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoJHRoaXMuYnRuLmhhc0NsYXNzKHByZWZpeCsnX29wZW4nKSkge1xyXG4gICAgICAgICAgICAkdGhpcy5fbWVudVRvZ2dsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5mblttb2JpbGVNZW51XSA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcclxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgLy8gSXMgdGhlIGZpcnN0IHBhcmFtZXRlciBhbiBvYmplY3QgKG9wdGlvbnMpLCBvciB3YXMgb21pdHRlZCwgaW5zdGFudGlhdGUgYSBuZXcgaW5zdGFuY2VcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGFsbG93IHRoZSBwbHVnaW4gdG8gYmUgaW5zdGFudGlhdGVkIG9uY2UgZHVlIHRvIG1ldGhvZHNcclxuICAgICAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsICdwbHVnaW5fJyArIG1vYmlsZU1lbnUpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0IGhhcyBubyBpbnN0YW5jZSwgY3JlYXRlIGEgbmV3IG9uZSwgcGFzcyBvcHRpb25zIHRvIG91ciBwbHVnaW4gY29uc3RydWN0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHN0b3JlIHRoZSBwbHVnaW4gaW5zdGFuY2UgaW4gdGhlIGVsZW1lbnRzIGpRdWVyeSBkYXRhIG9iamVjdC5cclxuICAgICAgICAgICAgICAgICAgICAkLmRhdGEodGhpcywgJ3BsdWdpbl8nICsgbW9iaWxlTWVudSwgbmV3IFBsdWdpbiggdGhpcywgb3B0aW9ucyApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIElmIGlzIGEgc3RyaW5nIGFuZCBkb2Vzbid0IHN0YXJ0IHdpdGggYW4gdW5kZXJzY29yZSBvciAnaW5pdCcgZnVuY3Rpb24sIHRyZWF0IHRoaXMgYXMgYSBjYWxsIHRvIGEgcHVibGljIG1ldGhvZC5cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyAmJiBvcHRpb25zWzBdICE9PSAnXycgJiYgb3B0aW9ucyAhPT0gJ2luaXQnKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBDYWNoZSB0aGUgbWV0aG9kIGNhbGwgdG8gbWFrZSBpdCBwb3NzaWJsZSB0byByZXR1cm4gYSB2YWx1ZVxyXG4gICAgICAgICAgICB2YXIgcmV0dXJucztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEodGhpcywgJ3BsdWdpbl8nICsgbW9iaWxlTWVudSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGVzdHMgdGhhdCB0aGVyZSdzIGFscmVhZHkgYSBwbHVnaW4taW5zdGFuY2UgYW5kIGNoZWNrcyB0aGF0IHRoZSByZXF1ZXN0ZWQgcHVibGljIG1ldGhvZCBleGlzdHNcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFBsdWdpbiAmJiB0eXBlb2YgaW5zdGFuY2Vbb3B0aW9uc10gPT09ICdmdW5jdGlvbicpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgbWV0aG9kIG9mIG91ciBwbHVnaW4gaW5zdGFuY2UsIGFuZCBwYXNzIGl0IHRoZSBzdXBwbGllZCBhcmd1bWVudHMuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJucyA9IGluc3RhbmNlW29wdGlvbnNdLmFwcGx5KCBpbnN0YW5jZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3MsIDEgKSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBlYXJsaWVyIGNhY2hlZCBtZXRob2QgZ2l2ZXMgYSB2YWx1ZSBiYWNrIHJldHVybiB0aGUgdmFsdWUsIG90aGVyd2lzZSByZXR1cm4gdGhpcyB0byBwcmVzZXJ2ZSBjaGFpbmFiaWxpdHkuXHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5zICE9PSB1bmRlZmluZWQgPyByZXR1cm5zIDogdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KGpRdWVyeSwgZG9jdW1lbnQsIHdpbmRvdykpO1xyXG4vKiEgRGF0YVRhYmxlcyAxLjEwLjEyXHJcbiAqIMKpMjAwOC0yMDE1IFNwcnlNZWRpYSBMdGQgLSBkYXRhdGFibGVzLm5ldC9saWNlbnNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBzdW1tYXJ5ICAgICBEYXRhVGFibGVzXHJcbiAqIEBkZXNjcmlwdGlvbiBQYWdpbmF0ZSwgc2VhcmNoIGFuZCBvcmRlciBIVE1MIHRhYmxlc1xyXG4gKiBAdmVyc2lvbiAgICAgMS4xMC4xMlxyXG4gKiBAZmlsZSAgICAgICAganF1ZXJ5LmRhdGFUYWJsZXMuanNcclxuICogQGF1dGhvciAgICAgIFNwcnlNZWRpYSBMdGQgKHd3dy5zcHJ5bWVkaWEuY28udWspXHJcbiAqIEBjb250YWN0ICAgICB3d3cuc3ByeW1lZGlhLmNvLnVrL2NvbnRhY3RcclxuICogQGNvcHlyaWdodCAgIENvcHlyaWdodCAyMDA4LTIwMTUgU3ByeU1lZGlhIEx0ZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgZmlsZSBpcyBmcmVlIHNvZnR3YXJlLCBhdmFpbGFibGUgdW5kZXIgdGhlIGZvbGxvd2luZyBsaWNlbnNlOlxyXG4gKiAgIE1JVCBsaWNlbnNlIC0gaHR0cDovL2RhdGF0YWJsZXMubmV0L2xpY2Vuc2VcclxuICpcclxuICogVGhpcyBzb3VyY2UgZmlsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXRcclxuICogV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFlcclxuICogb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgbGljZW5zZSBmaWxlcyBmb3IgZGV0YWlscy5cclxuICpcclxuICogRm9yIGRldGFpbHMgcGxlYXNlIHJlZmVyIHRvOiBodHRwOi8vd3d3LmRhdGF0YWJsZXMubmV0XHJcbiAqL1xyXG5cclxuLypqc2xpbnQgZXZpbDogdHJ1ZSwgdW5kZWY6IHRydWUsIGJyb3dzZXI6IHRydWUgKi9cclxuLypnbG9iYWxzICQscmVxdWlyZSxqUXVlcnksZGVmaW5lLF9zZWxlY3Rvcl9ydW4sX3NlbGVjdG9yX29wdHMsX3NlbGVjdG9yX2ZpcnN0LF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyxfZXh0LF9BcGksX2FwaV9yZWdpc3RlcixfYXBpX3JlZ2lzdGVyUGx1cmFsLF9yZV9uZXdfbGluZXMsX3JlX2h0bWwsX3JlX2Zvcm1hdHRlZF9udW1lcmljLF9yZV9lc2NhcGVfcmVnZXgsX2VtcHR5LF9pbnRWYWwsX251bVRvRGVjaW1hbCxfaXNOdW1iZXIsX2lzSHRtbCxfaHRtbE51bWVyaWMsX3BsdWNrLF9wbHVja19vcmRlcixfcmFuZ2UsX3N0cmlwSHRtbCxfdW5pcXVlLF9mbkJ1aWxkQWpheCxfZm5BamF4VXBkYXRlLF9mbkFqYXhQYXJhbWV0ZXJzLF9mbkFqYXhVcGRhdGVEcmF3LF9mbkFqYXhEYXRhU3JjLF9mbkFkZENvbHVtbixfZm5Db2x1bW5PcHRpb25zLF9mbkFkanVzdENvbHVtblNpemluZyxfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCxfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSxfZm5WaXNibGVDb2x1bW5zLF9mbkdldENvbHVtbnMsX2ZuQ29sdW1uVHlwZXMsX2ZuQXBwbHlDb2x1bW5EZWZzLF9mbkh1bmdhcmlhbk1hcCxfZm5DYW1lbFRvSHVuZ2FyaWFuLF9mbkxhbmd1YWdlQ29tcGF0LF9mbkJyb3dzZXJEZXRlY3QsX2ZuQWRkRGF0YSxfZm5BZGRUcixfZm5Ob2RlVG9EYXRhSW5kZXgsX2ZuTm9kZVRvQ29sdW1uSW5kZXgsX2ZuR2V0Q2VsbERhdGEsX2ZuU2V0Q2VsbERhdGEsX2ZuU3BsaXRPYmpOb3RhdGlvbixfZm5HZXRPYmplY3REYXRhRm4sX2ZuU2V0T2JqZWN0RGF0YUZuLF9mbkdldERhdGFNYXN0ZXIsX2ZuQ2xlYXJUYWJsZSxfZm5EZWxldGVJbmRleCxfZm5JbnZhbGlkYXRlLF9mbkdldFJvd0VsZW1lbnRzLF9mbkNyZWF0ZVRyLF9mbkJ1aWxkSGVhZCxfZm5EcmF3SGVhZCxfZm5EcmF3LF9mblJlRHJhdyxfZm5BZGRPcHRpb25zSHRtbCxfZm5EZXRlY3RIZWFkZXIsX2ZuR2V0VW5pcXVlVGhzLF9mbkZlYXR1cmVIdG1sRmlsdGVyLF9mbkZpbHRlckNvbXBsZXRlLF9mbkZpbHRlckN1c3RvbSxfZm5GaWx0ZXJDb2x1bW4sX2ZuRmlsdGVyLF9mbkZpbHRlckNyZWF0ZVNlYXJjaCxfZm5Fc2NhcGVSZWdleCxfZm5GaWx0ZXJEYXRhLF9mbkZlYXR1cmVIdG1sSW5mbyxfZm5VcGRhdGVJbmZvLF9mbkluZm9NYWNyb3MsX2ZuSW5pdGlhbGlzZSxfZm5Jbml0Q29tcGxldGUsX2ZuTGVuZ3RoQ2hhbmdlLF9mbkZlYXR1cmVIdG1sTGVuZ3RoLF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUsX2ZuUGFnZUNoYW5nZSxfZm5GZWF0dXJlSHRtbFByb2Nlc3NpbmcsX2ZuUHJvY2Vzc2luZ0Rpc3BsYXksX2ZuRmVhdHVyZUh0bWxUYWJsZSxfZm5TY3JvbGxEcmF3LF9mbkFwcGx5VG9DaGlsZHJlbixfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMsX2ZuVGhyb3R0bGUsX2ZuQ29udmVydFRvV2lkdGgsX2ZuR2V0V2lkZXN0Tm9kZSxfZm5HZXRNYXhMZW5TdHJpbmcsX2ZuU3RyaW5nVG9Dc3MsX2ZuU29ydEZsYXR0ZW4sX2ZuU29ydCxfZm5Tb3J0QXJpYSxfZm5Tb3J0TGlzdGVuZXIsX2ZuU29ydEF0dGFjaExpc3RlbmVyLF9mblNvcnRpbmdDbGFzc2VzLF9mblNvcnREYXRhLF9mblNhdmVTdGF0ZSxfZm5Mb2FkU3RhdGUsX2ZuU2V0dGluZ3NGcm9tTm9kZSxfZm5Mb2csX2ZuTWFwLF9mbkJpbmRBY3Rpb24sX2ZuQ2FsbGJhY2tSZWcsX2ZuQ2FsbGJhY2tGaXJlLF9mbkxlbmd0aE92ZXJmbG93LF9mblJlbmRlcmVyLF9mbkRhdGFTb3VyY2UsX2ZuUm93QXR0cmlidXRlcyovXHJcblxyXG4oZnVuY3Rpb24oIGZhY3RvcnkgKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG5cdFx0Ly8gQU1EXHJcblx0XHRkZWZpbmUoIFsnanF1ZXJ5J10sIGZ1bmN0aW9uICggJCApIHtcclxuXHRcdFx0cmV0dXJuIGZhY3RvcnkoICQsIHdpbmRvdywgZG9jdW1lbnQgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblx0ZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcclxuXHRcdC8vIENvbW1vbkpTXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290LCAkKSB7XHJcblx0XHRcdGlmICggISByb290ICkge1xyXG5cdFx0XHRcdC8vIENvbW1vbkpTIGVudmlyb25tZW50cyB3aXRob3V0IGEgd2luZG93IGdsb2JhbCBtdXN0IHBhc3MgYVxyXG5cdFx0XHRcdC8vIHJvb3QuIFRoaXMgd2lsbCBnaXZlIGFuIGVycm9yIG90aGVyd2lzZVxyXG5cdFx0XHRcdHJvb3QgPSB3aW5kb3c7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggISAkICkge1xyXG5cdFx0XHRcdCQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IC8vIGpRdWVyeSdzIGZhY3RvcnkgY2hlY2tzIGZvciBhIGdsb2JhbCB3aW5kb3dcclxuXHRcdFx0XHRcdHJlcXVpcmUoJ2pxdWVyeScpIDpcclxuXHRcdFx0XHRcdHJlcXVpcmUoJ2pxdWVyeScpKCByb290ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmYWN0b3J5KCAkLCByb290LCByb290LmRvY3VtZW50ICk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdC8vIEJyb3dzZXJcclxuXHRcdGZhY3RvcnkoIGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCApO1xyXG5cdH1cclxufVxyXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCApIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0LyoqXHJcblx0ICogRGF0YVRhYmxlcyBpcyBhIHBsdWctaW4gZm9yIHRoZSBqUXVlcnkgSmF2YXNjcmlwdCBsaWJyYXJ5LiBJdCBpcyBhIGhpZ2hseVxyXG5cdCAqIGZsZXhpYmxlIHRvb2wsIGJhc2VkIHVwb24gdGhlIGZvdW5kYXRpb25zIG9mIHByb2dyZXNzaXZlIGVuaGFuY2VtZW50LFxyXG5cdCAqIHdoaWNoIHdpbGwgYWRkIGFkdmFuY2VkIGludGVyYWN0aW9uIGNvbnRyb2xzIHRvIGFueSBIVE1MIHRhYmxlLiBGb3IgYVxyXG5cdCAqIGZ1bGwgbGlzdCBvZiBmZWF0dXJlcyBwbGVhc2UgcmVmZXIgdG9cclxuXHQgKiBbRGF0YVRhYmxlcy5uZXRdKGhyZWY9XCJodHRwOi8vZGF0YXRhYmxlcy5uZXQpLlxyXG5cdCAqXHJcblx0ICogTm90ZSB0aGF0IHRoZSBgRGF0YVRhYmxlYCBvYmplY3QgaXMgbm90IGEgZ2xvYmFsIHZhcmlhYmxlIGJ1dCBpcyBhbGlhc2VkXHJcblx0ICogdG8gYGpRdWVyeS5mbi5EYXRhVGFibGVgIGFuZCBgalF1ZXJ5LmZuLmRhdGFUYWJsZWAgdGhyb3VnaCB3aGljaCBpdCBtYXlcclxuXHQgKiBiZSAgYWNjZXNzZWQuXHJcblx0ICpcclxuXHQgKiAgQGNsYXNzXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBbaW5pdD17fV0gQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIERhdGFUYWJsZXMuIE9wdGlvbnNcclxuXHQgKiAgICBhcmUgZGVmaW5lZCBieSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfVxyXG5cdCAqICBAcmVxdWlyZXMgalF1ZXJ5IDEuNytcclxuXHQgKlxyXG5cdCAqICBAZXhhbXBsZVxyXG5cdCAqICAgIC8vIEJhc2ljIGluaXRpYWxpc2F0aW9uXHJcblx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uIHtcclxuXHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XHJcblx0ICogICAgfSApO1xyXG5cdCAqXHJcblx0ICogIEBleGFtcGxlXHJcblx0ICogICAgLy8gSW5pdGlhbGlzYXRpb24gd2l0aCBjb25maWd1cmF0aW9uIG9wdGlvbnMgLSBpbiB0aGlzIGNhc2UsIGRpc2FibGVcclxuXHQgKiAgICAvLyBwYWdpbmF0aW9uIGFuZCBzb3J0aW5nLlxyXG5cdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiB7XHJcblx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdCAqICAgICAgICBcInBhZ2luYXRlXCI6IGZhbHNlLFxyXG5cdCAqICAgICAgICBcInNvcnRcIjogZmFsc2VcclxuXHQgKiAgICAgIH0gKTtcclxuXHQgKiAgICB9ICk7XHJcblx0ICovXHJcblx0dmFyIERhdGFUYWJsZSA9IGZ1bmN0aW9uICggb3B0aW9ucyApXHJcblx0e1xyXG5cdFx0LyoqXHJcblx0XHQgKiBQZXJmb3JtIGEgalF1ZXJ5IHNlbGVjdG9yIGFjdGlvbiBvbiB0aGUgdGFibGUncyBUUiBlbGVtZW50cyAoZnJvbSB0aGUgdGJvZHkpIGFuZFxyXG5cdFx0ICogcmV0dXJuIHRoZSByZXN1bHRpbmcgalF1ZXJ5IG9iamVjdC5cclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ3xub2RlfGpRdWVyeX0gc1NlbGVjdG9yIGpRdWVyeSBzZWxlY3RvciBvciBub2RlIGNvbGxlY3Rpb24gdG8gYWN0IG9uXHJcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IFtvT3B0c10gT3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgbW9kaWZ5aW5nIHRoZSByb3dzIHRvIGJlIGluY2x1ZGVkXHJcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IFtvT3B0cy5maWx0ZXI9bm9uZV0gU2VsZWN0IFRSIGVsZW1lbnRzIHRoYXQgbWVldCB0aGUgY3VycmVudCBmaWx0ZXJcclxuXHRcdCAqICAgIGNyaXRlcmlvbiAoXCJhcHBsaWVkXCIpIG9yIGFsbCBUUiBlbGVtZW50cyAoaS5lLiBubyBmaWx0ZXIpLlxyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSBbb09wdHMub3JkZXI9Y3VycmVudF0gT3JkZXIgb2YgdGhlIFRSIGVsZW1lbnRzIGluIHRoZSBwcm9jZXNzZWQgYXJyYXkuXHJcblx0XHQgKiAgICBDYW4gYmUgZWl0aGVyICdjdXJyZW50Jywgd2hlcmVieSB0aGUgY3VycmVudCBzb3J0aW5nIG9mIHRoZSB0YWJsZSBpcyB1c2VkLCBvclxyXG5cdFx0ICogICAgJ29yaWdpbmFsJyB3aGVyZWJ5IHRoZSBvcmlnaW5hbCBvcmRlciB0aGUgZGF0YSB3YXMgcmVhZCBpbnRvIHRoZSB0YWJsZSBpcyB1c2VkLlxyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSBbb09wdHMucGFnZT1hbGxdIExpbWl0IHRoZSBzZWxlY3Rpb24gdG8gdGhlIGN1cnJlbnRseSBkaXNwbGF5ZWQgcGFnZVxyXG5cdFx0ICogICAgKFwiY3VycmVudFwiKSBvciBub3QgKFwiYWxsXCIpLiBJZiAnY3VycmVudCcgaXMgZ2l2ZW4sIHRoZW4gb3JkZXIgaXMgYXNzdW1lZCB0byBiZVxyXG5cdFx0ICogICAgJ2N1cnJlbnQnIGFuZCBmaWx0ZXIgaXMgJ2FwcGxpZWQnLCByZWdhcmRsZXNzIG9mIHdoYXQgdGhleSBtaWdodCBiZSBnaXZlbiBhcy5cclxuXHRcdCAqICBAcmV0dXJucyB7b2JqZWN0fSBqUXVlcnkgb2JqZWN0LCBmaWx0ZXJlZCBieSB0aGUgZ2l2ZW4gc2VsZWN0b3IuXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBIaWdobGlnaHQgZXZlcnkgc2Vjb25kIHJvd1xyXG5cdFx0ICogICAgICBvVGFibGUuJCgndHI6b2RkJykuY3NzKCdiYWNrZ3JvdW5kQ29sb3InLCAnYmx1ZScpO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgLy8gRmlsdGVyIHRvIHJvd3Mgd2l0aCAnV2Via2l0JyBpbiB0aGVtLCBhZGQgYSBiYWNrZ3JvdW5kIGNvbG91ciBhbmQgdGhlblxyXG5cdFx0ICogICAgICAvLyByZW1vdmUgdGhlIGZpbHRlciwgdGh1cyBoaWdobGlnaHRpbmcgdGhlICdXZWJraXQnIHJvd3Mgb25seS5cclxuXHRcdCAqICAgICAgb1RhYmxlLmZuRmlsdGVyKCdXZWJraXQnKTtcclxuXHRcdCAqICAgICAgb1RhYmxlLiQoJ3RyJywge1wic2VhcmNoXCI6IFwiYXBwbGllZFwifSkuY3NzKCdiYWNrZ3JvdW5kQ29sb3InLCAnYmx1ZScpO1xyXG5cdFx0ICogICAgICBvVGFibGUuZm5GaWx0ZXIoJycpO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLiQgPSBmdW5jdGlvbiAoIHNTZWxlY3Rvciwgb09wdHMgKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hcGkodHJ1ZSkuJCggc1NlbGVjdG9yLCBvT3B0cyApO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFsbW9zdCBpZGVudGljYWwgdG8gJCBpbiBvcGVyYXRpb24sIGJ1dCBpbiB0aGlzIGNhc2UgcmV0dXJucyB0aGUgZGF0YSBmb3IgdGhlIG1hdGNoZWRcclxuXHRcdCAqIHJvd3MgLSBhcyBzdWNoLCB0aGUgalF1ZXJ5IHNlbGVjdG9yIHVzZWQgc2hvdWxkIG1hdGNoIFRSIHJvdyBub2RlcyBvciBURC9USCBjZWxsIG5vZGVzXHJcblx0XHQgKiByYXRoZXIgdGhhbiBhbnkgZGVzY2VuZGFudHMsIHNvIHRoZSBkYXRhIGNhbiBiZSBvYnRhaW5lZCBmb3IgdGhlIHJvdy9jZWxsLiBJZiBtYXRjaGluZ1xyXG5cdFx0ICogcm93cyBhcmUgZm91bmQsIHRoZSBkYXRhIHJldHVybmVkIGlzIHRoZSBvcmlnaW5hbCBkYXRhIGFycmF5L29iamVjdCB0aGF0IHdhcyB1c2VkIHRvXHJcblx0XHQgKiBjcmVhdGUgdGhlIHJvdyAob3IgYSBnZW5lcmF0ZWQgYXJyYXkgaWYgZnJvbSBhIERPTSBzb3VyY2UpLlxyXG5cdFx0ICpcclxuXHRcdCAqIFRoaXMgbWV0aG9kIGlzIG9mdGVuIHVzZWZ1bCBpbi1jb21iaW5hdGlvbiB3aXRoICQgd2hlcmUgYm90aCBmdW5jdGlvbnMgYXJlIGdpdmVuIHRoZVxyXG5cdFx0ICogc2FtZSBwYXJhbWV0ZXJzIGFuZCB0aGUgYXJyYXkgaW5kZXhlcyB3aWxsIG1hdGNoIGlkZW50aWNhbGx5LlxyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfG5vZGV8alF1ZXJ5fSBzU2VsZWN0b3IgalF1ZXJ5IHNlbGVjdG9yIG9yIG5vZGUgY29sbGVjdGlvbiB0byBhY3Qgb25cclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gW29PcHRzXSBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBtb2RpZnlpbmcgdGhlIHJvd3MgdG8gYmUgaW5jbHVkZWRcclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gW29PcHRzLmZpbHRlcj1ub25lXSBTZWxlY3QgZWxlbWVudHMgdGhhdCBtZWV0IHRoZSBjdXJyZW50IGZpbHRlclxyXG5cdFx0ICogICAgY3JpdGVyaW9uIChcImFwcGxpZWRcIikgb3IgYWxsIGVsZW1lbnRzIChpLmUuIG5vIGZpbHRlcikuXHJcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IFtvT3B0cy5vcmRlcj1jdXJyZW50XSBPcmRlciBvZiB0aGUgZGF0YSBpbiB0aGUgcHJvY2Vzc2VkIGFycmF5LlxyXG5cdFx0ICogICAgQ2FuIGJlIGVpdGhlciAnY3VycmVudCcsIHdoZXJlYnkgdGhlIGN1cnJlbnQgc29ydGluZyBvZiB0aGUgdGFibGUgaXMgdXNlZCwgb3JcclxuXHRcdCAqICAgICdvcmlnaW5hbCcgd2hlcmVieSB0aGUgb3JpZ2luYWwgb3JkZXIgdGhlIGRhdGEgd2FzIHJlYWQgaW50byB0aGUgdGFibGUgaXMgdXNlZC5cclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gW29PcHRzLnBhZ2U9YWxsXSBMaW1pdCB0aGUgc2VsZWN0aW9uIHRvIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHBhZ2VcclxuXHRcdCAqICAgIChcImN1cnJlbnRcIikgb3Igbm90IChcImFsbFwiKS4gSWYgJ2N1cnJlbnQnIGlzIGdpdmVuLCB0aGVuIG9yZGVyIGlzIGFzc3VtZWQgdG8gYmVcclxuXHRcdCAqICAgICdjdXJyZW50JyBhbmQgZmlsdGVyIGlzICdhcHBsaWVkJywgcmVnYXJkbGVzcyBvZiB3aGF0IHRoZXkgbWlnaHQgYmUgZ2l2ZW4gYXMuXHJcblx0XHQgKiAgQHJldHVybnMge2FycmF5fSBEYXRhIGZvciB0aGUgbWF0Y2hlZCBlbGVtZW50cy4gSWYgYW55IGVsZW1lbnRzLCBhcyBhIHJlc3VsdCBvZiB0aGVcclxuXHRcdCAqICAgIHNlbGVjdG9yLCB3ZXJlIG5vdCBUUiwgVEQgb3IgVEggZWxlbWVudHMgaW4gdGhlIERhdGFUYWJsZSwgdGhleSB3aWxsIGhhdmUgYSBudWxsXHJcblx0XHQgKiAgICBlbnRyeSBpbiB0aGUgYXJyYXkuXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBHZXQgdGhlIGRhdGEgZnJvbSB0aGUgZmlyc3Qgcm93IGluIHRoZSB0YWJsZVxyXG5cdFx0ICogICAgICB2YXIgZGF0YSA9IG9UYWJsZS5fKCd0cjpmaXJzdCcpO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgLy8gRG8gc29tZXRoaW5nIHVzZWZ1bCB3aXRoIHRoZSBkYXRhXHJcblx0XHQgKiAgICAgIGFsZXJ0KCBcIkZpcnN0IGNlbGwgaXM6IFwiK2RhdGFbMF0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vIEZpbHRlciB0byAnV2Via2l0JyBhbmQgZ2V0IGFsbCBkYXRhIGZvclxyXG5cdFx0ICogICAgICBvVGFibGUuZm5GaWx0ZXIoJ1dlYmtpdCcpO1xyXG5cdFx0ICogICAgICB2YXIgZGF0YSA9IG9UYWJsZS5fKCd0cicsIHtcInNlYXJjaFwiOiBcImFwcGxpZWRcIn0pO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgLy8gRG8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGFcclxuXHRcdCAqICAgICAgYWxlcnQoIGRhdGEubGVuZ3RoK1wiIHJvd3MgbWF0Y2hlZCB0aGUgc2VhcmNoXCIgKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fID0gZnVuY3Rpb24gKCBzU2VsZWN0b3IsIG9PcHRzIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYXBpKHRydWUpLnJvd3MoIHNTZWxlY3Rvciwgb09wdHMgKS5kYXRhKCk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ3JlYXRlIGEgRGF0YVRhYmxlcyBBcGkgaW5zdGFuY2UsIHdpdGggdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWJsZXMgZm9yXHJcblx0XHQgKiB0aGUgQXBpJ3MgY29udGV4dC5cclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3RyYWRpdGlvbmFsPWZhbHNlXSBTZXQgdGhlIEFQSSBpbnN0YW5jZSdzIGNvbnRleHQgdG8gYmVcclxuXHRcdCAqICAgb25seSB0aGUgdGFibGUgcmVmZXJyZWQgdG8gYnkgdGhlIGBEYXRhVGFibGUuZXh0LmlBcGlJbmRleGAgb3B0aW9uLCBhcyB3YXNcclxuXHRcdCAqICAgdXNlZCBpbiB0aGUgQVBJIHByZXNlbnRlZCBieSBEYXRhVGFibGVzIDEuOS0gKGkuZS4gdGhlIHRyYWRpdGlvbmFsIG1vZGUpLFxyXG5cdFx0ICogICBvciBpZiBhbGwgdGFibGVzIGNhcHR1cmVkIGluIHRoZSBqUXVlcnkgb2JqZWN0IHNob3VsZCBiZSB1c2VkLlxyXG5cdFx0ICogQHJldHVybiB7RGF0YVRhYmxlcy5BcGl9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuYXBpID0gZnVuY3Rpb24gKCB0cmFkaXRpb25hbCApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB0cmFkaXRpb25hbCA/XHJcblx0XHRcdFx0bmV3IF9BcGkoXHJcblx0XHRcdFx0XHRfZm5TZXR0aW5nc0Zyb21Ob2RlKCB0aGlzWyBfZXh0LmlBcGlJbmRleCBdIClcclxuXHRcdFx0XHQpIDpcclxuXHRcdFx0XHRuZXcgX0FwaSggdGhpcyApO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFkZCBhIHNpbmdsZSBuZXcgcm93IG9yIG11bHRpcGxlIHJvd3Mgb2YgZGF0YSB0byB0aGUgdGFibGUuIFBsZWFzZSBub3RlXHJcblx0XHQgKiB0aGF0IHRoaXMgaXMgc3VpdGFibGUgZm9yIGNsaWVudC1zaWRlIHByb2Nlc3Npbmcgb25seSAtIGlmIHlvdSBhcmUgdXNpbmdcclxuXHRcdCAqIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcgKGkuZS4gXCJiU2VydmVyU2lkZVwiOiB0cnVlKSwgdGhlbiB0byBhZGQgZGF0YSwgeW91XHJcblx0XHQgKiBtdXN0IGFkZCBpdCB0byB0aGUgZGF0YSBzb3VyY2UsIGkuZS4gdGhlIHNlcnZlci1zaWRlLCB0aHJvdWdoIGFuIEFqYXggY2FsbC5cclxuXHRcdCAqICBAcGFyYW0ge2FycmF5fG9iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBiZSBhZGRlZCB0byB0aGUgdGFibGUuIFRoaXMgY2FuIGJlOlxyXG5cdFx0ICogICAgPHVsPlxyXG5cdFx0ICogICAgICA8bGk+MUQgYXJyYXkgb2YgZGF0YSAtIGFkZCBhIHNpbmdsZSByb3cgd2l0aCB0aGUgZGF0YSBwcm92aWRlZDwvbGk+XHJcblx0XHQgKiAgICAgIDxsaT4yRCBhcnJheSBvZiBhcnJheXMgLSBhZGQgbXVsdGlwbGUgcm93cyBpbiBhIHNpbmdsZSBjYWxsPC9saT5cclxuXHRcdCAqICAgICAgPGxpPm9iamVjdCAtIGRhdGEgb2JqZWN0IHdoZW4gdXNpbmcgPGk+bURhdGE8L2k+PC9saT5cclxuXHRcdCAqICAgICAgPGxpPmFycmF5IG9mIG9iamVjdHMgLSBtdWx0aXBsZSBkYXRhIG9iamVjdHMgd2hlbiB1c2luZyA8aT5tRGF0YTwvaT48L2xpPlxyXG5cdFx0ICogICAgPC91bD5cclxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtyZWRyYXc9dHJ1ZV0gcmVkcmF3IHRoZSB0YWJsZSBvciBub3RcclxuXHRcdCAqICBAcmV0dXJucyB7YXJyYXl9IEFuIGFycmF5IG9mIGludGVnZXJzLCByZXByZXNlbnRpbmcgdGhlIGxpc3Qgb2YgaW5kZXhlcyBpblxyXG5cdFx0ICogICAgPGk+YW9EYXRhPC9pPiAoe0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfSkgdGhhdCBoYXZlIGJlZW4gYWRkZWQgdG9cclxuXHRcdCAqICAgIHRoZSB0YWJsZS5cclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIEdsb2JhbCB2YXIgZm9yIGNvdW50ZXJcclxuXHRcdCAqICAgIHZhciBnaUNvdW50ID0gMjtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICBmdW5jdGlvbiBmbkNsaWNrQWRkUm93KCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpLmZuQWRkRGF0YSggW1xyXG5cdFx0ICogICAgICAgIGdpQ291bnQrXCIuMVwiLFxyXG5cdFx0ICogICAgICAgIGdpQ291bnQrXCIuMlwiLFxyXG5cdFx0ICogICAgICAgIGdpQ291bnQrXCIuM1wiLFxyXG5cdFx0ICogICAgICAgIGdpQ291bnQrXCIuNFwiIF1cclxuXHRcdCAqICAgICAgKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIGdpQ291bnQrKztcclxuXHRcdCAqICAgIH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mbkFkZERhdGEgPSBmdW5jdGlvbiggZGF0YSwgcmVkcmF3IClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XHJcblx0XHRcclxuXHRcdFx0LyogQ2hlY2sgaWYgd2Ugd2FudCB0byBhZGQgbXVsdGlwbGUgcm93cyBvciBub3QgKi9cclxuXHRcdFx0dmFyIHJvd3MgPSAkLmlzQXJyYXkoZGF0YSkgJiYgKCAkLmlzQXJyYXkoZGF0YVswXSkgfHwgJC5pc1BsYWluT2JqZWN0KGRhdGFbMF0pICkgP1xyXG5cdFx0XHRcdGFwaS5yb3dzLmFkZCggZGF0YSApIDpcclxuXHRcdFx0XHRhcGkucm93LmFkZCggZGF0YSApO1xyXG5cdFx0XHJcblx0XHRcdGlmICggcmVkcmF3ID09PSB1bmRlZmluZWQgfHwgcmVkcmF3ICkge1xyXG5cdFx0XHRcdGFwaS5kcmF3KCk7XHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRyZXR1cm4gcm93cy5mbGF0dGVuKCkudG9BcnJheSgpO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBtYWtlIERhdGFUYWJsZXMgcmVjYWxjdWxhdGUgdGhlIGNvbHVtbiBzaXplcywgYmFzZWQgb24gdGhlIGRhdGFcclxuXHRcdCAqIGNvbnRhaW5lZCBpbiB0aGUgdGFibGUgYW5kIHRoZSBzaXplcyBhcHBsaWVkIHRvIHRoZSBjb2x1bW5zIChpbiB0aGUgRE9NLCBDU1Mgb3JcclxuXHRcdCAqIHRocm91Z2ggdGhlIHNXaWR0aCBwYXJhbWV0ZXIpLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB0aGUgd2lkdGggb2YgdGhlIHRhYmxlJ3NcclxuXHRcdCAqIHBhcmVudCBlbGVtZW50IGNoYW5nZXMgKGZvciBleGFtcGxlIGEgd2luZG93IHJlc2l6ZSkuXHJcblx0XHQgKiAgQHBhcmFtIHtib29sZWFufSBbYlJlZHJhdz10cnVlXSBSZWRyYXcgdGhlIHRhYmxlIG9yIG5vdCwgeW91IHdpbGwgdHlwaWNhbGx5IHdhbnQgdG9cclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInNTY3JvbGxZXCI6IFwiMjAwcHhcIixcclxuXHRcdCAqICAgICAgICBcImJQYWdpbmF0ZVwiOiBmYWxzZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAkKHdpbmRvdykuYmluZCgncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0ICogICAgICAgIG9UYWJsZS5mbkFkanVzdENvbHVtblNpemluZygpO1xyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZm5BZGp1c3RDb2x1bW5TaXppbmcgPSBmdW5jdGlvbiAoIGJSZWRyYXcgKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgYXBpID0gdGhpcy5hcGkoIHRydWUgKS5jb2x1bW5zLmFkanVzdCgpO1xyXG5cdFx0XHR2YXIgc2V0dGluZ3MgPSBhcGkuc2V0dGluZ3MoKVswXTtcclxuXHRcdFx0dmFyIHNjcm9sbCA9IHNldHRpbmdzLm9TY3JvbGw7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBiUmVkcmF3ID09PSB1bmRlZmluZWQgfHwgYlJlZHJhdyApIHtcclxuXHRcdFx0XHRhcGkuZHJhdyggZmFsc2UgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggc2Nyb2xsLnNYICE9PSBcIlwiIHx8IHNjcm9sbC5zWSAhPT0gXCJcIiApIHtcclxuXHRcdFx0XHQvKiBJZiBub3QgcmVkcmF3aW5nLCBidXQgc2Nyb2xsaW5nLCB3ZSB3YW50IHRvIGFwcGx5IHRoZSBuZXcgY29sdW1uIHNpemVzIGFueXdheSAqL1xyXG5cdFx0XHRcdF9mblNjcm9sbERyYXcoIHNldHRpbmdzICk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBRdWlja2x5IGFuZCBzaW1wbHkgY2xlYXIgYSB0YWJsZVxyXG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2JSZWRyYXc9dHJ1ZV0gcmVkcmF3IHRoZSB0YWJsZSBvciBub3RcclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vIEltbWVkaWF0ZWx5ICdudWtlJyB0aGUgY3VycmVudCByb3dzIChwZXJoYXBzIHdhaXRpbmcgZm9yIGFuIEFqYXggY2FsbGJhY2suLi4pXHJcblx0XHQgKiAgICAgIG9UYWJsZS5mbkNsZWFyVGFibGUoKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mbkNsZWFyVGFibGUgPSBmdW5jdGlvbiggYlJlZHJhdyApXHJcblx0XHR7XHJcblx0XHRcdHZhciBhcGkgPSB0aGlzLmFwaSggdHJ1ZSApLmNsZWFyKCk7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBiUmVkcmF3ID09PSB1bmRlZmluZWQgfHwgYlJlZHJhdyApIHtcclxuXHRcdFx0XHRhcGkuZHJhdygpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGV4YWN0IG9wcG9zaXRlIG9mICdvcGVuaW5nJyBhIHJvdywgdGhpcyBmdW5jdGlvbiB3aWxsIGNsb3NlIGFueSByb3dzIHdoaWNoXHJcblx0XHQgKiBhcmUgY3VycmVudGx5ICdvcGVuJy5cclxuXHRcdCAqICBAcGFyYW0ge25vZGV9IG5UciB0aGUgdGFibGUgcm93IHRvICdjbG9zZSdcclxuXHRcdCAqICBAcmV0dXJucyB7aW50fSAwIG9uIHN1Y2Nlc3MsIG9yIDEgaWYgZmFpbGVkIChjYW4ndCBmaW5kIHRoZSByb3cpXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vICdvcGVuJyBhbiBpbmZvcm1hdGlvbiByb3cgd2hlbiBhIHJvdyBpcyBjbGlja2VkIG9uXHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlIHRib2R5IHRyJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgICBpZiAoIG9UYWJsZS5mbklzT3Blbih0aGlzKSApIHtcclxuXHRcdCAqICAgICAgICAgIG9UYWJsZS5mbkNsb3NlKCB0aGlzICk7XHJcblx0XHQgKiAgICAgICAgfSBlbHNlIHtcclxuXHRcdCAqICAgICAgICAgIG9UYWJsZS5mbk9wZW4oIHRoaXMsIFwiVGVtcG9yYXJ5IHJvdyBvcGVuZWRcIiwgXCJpbmZvX3Jvd1wiICk7XHJcblx0XHQgKiAgICAgICAgfVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuQ2xvc2UgPSBmdW5jdGlvbiggblRyIClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5hcGkoIHRydWUgKS5yb3coIG5UciApLmNoaWxkLmhpZGUoKTtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmUgYSByb3cgZm9yIHRoZSB0YWJsZVxyXG5cdFx0ICogIEBwYXJhbSB7bWl4ZWR9IHRhcmdldCBUaGUgaW5kZXggb2YgdGhlIHJvdyBmcm9tIGFvRGF0YSB0byBiZSBkZWxldGVkLCBvclxyXG5cdFx0ICogICAgdGhlIFRSIGVsZW1lbnQgeW91IHdhbnQgdG8gZGVsZXRlXHJcblx0XHQgKiAgQHBhcmFtIHtmdW5jdGlvbnxudWxsfSBbY2FsbEJhY2tdIENhbGxiYWNrIGZ1bmN0aW9uXHJcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbcmVkcmF3PXRydWVdIFJlZHJhdyB0aGUgdGFibGUgb3Igbm90XHJcblx0XHQgKiAgQHJldHVybnMge2FycmF5fSBUaGUgcm93IHRoYXQgd2FzIGRlbGV0ZWRcclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vIEltbWVkaWF0ZWx5IHJlbW92ZSB0aGUgZmlyc3Qgcm93XHJcblx0XHQgKiAgICAgIG9UYWJsZS5mbkRlbGV0ZVJvdyggMCApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuRGVsZXRlUm93ID0gZnVuY3Rpb24oIHRhcmdldCwgY2FsbGJhY2ssIHJlZHJhdyApXHJcblx0XHR7XHJcblx0XHRcdHZhciBhcGkgPSB0aGlzLmFwaSggdHJ1ZSApO1xyXG5cdFx0XHR2YXIgcm93cyA9IGFwaS5yb3dzKCB0YXJnZXQgKTtcclxuXHRcdFx0dmFyIHNldHRpbmdzID0gcm93cy5zZXR0aW5ncygpWzBdO1xyXG5cdFx0XHR2YXIgZGF0YSA9IHNldHRpbmdzLmFvRGF0YVsgcm93c1swXVswXSBdO1xyXG5cdFx0XHJcblx0XHRcdHJvd3MucmVtb3ZlKCk7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCB0aGlzLCBzZXR0aW5ncywgZGF0YSApO1xyXG5cdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0aWYgKCByZWRyYXcgPT09IHVuZGVmaW5lZCB8fCByZWRyYXcgKSB7XHJcblx0XHRcdFx0YXBpLmRyYXcoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFJlc3RvcmUgdGhlIHRhYmxlIHRvIGl0J3Mgb3JpZ2luYWwgc3RhdGUgaW4gdGhlIERPTSBieSByZW1vdmluZyBhbGwgb2YgRGF0YVRhYmxlc1xyXG5cdFx0ICogZW5oYW5jZW1lbnRzLCBhbHRlcmF0aW9ucyB0byB0aGUgRE9NIHN0cnVjdHVyZSBvZiB0aGUgdGFibGUgYW5kIGV2ZW50IGxpc3RlbmVycy5cclxuXHRcdCAqICBAcGFyYW0ge2Jvb2xlYW59IFtyZW1vdmU9ZmFsc2VdIENvbXBsZXRlbHkgcmVtb3ZlIHRoZSB0YWJsZSBmcm9tIHRoZSBET01cclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAvLyBUaGlzIGV4YW1wbGUgaXMgZmFpcmx5IHBvaW50bGVzcyBpbiByZWFsaXR5LCBidXQgc2hvd3MgaG93IGZuRGVzdHJveSBjYW4gYmUgdXNlZFxyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqICAgICAgb1RhYmxlLmZuRGVzdHJveSgpO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuRGVzdHJveSA9IGZ1bmN0aW9uICggcmVtb3ZlIClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5hcGkoIHRydWUgKS5kZXN0cm95KCByZW1vdmUgKTtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWRyYXcgdGhlIHRhYmxlXHJcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbY29tcGxldGU9dHJ1ZV0gUmUtZmlsdGVyIGFuZCByZXNvcnQgKGlmIGVuYWJsZWQpIHRoZSB0YWJsZSBiZWZvcmUgdGhlIGRyYXcuXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBSZS1kcmF3IHRoZSB0YWJsZSAtIHlvdSB3b3VsZG4ndCB3YW50IHRvIGRvIGl0IGhlcmUsIGJ1dCBpdCdzIGFuIGV4YW1wbGUgOi0pXHJcblx0XHQgKiAgICAgIG9UYWJsZS5mbkRyYXcoKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mbkRyYXcgPSBmdW5jdGlvbiggY29tcGxldGUgKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBOb3RlIHRoYXQgdGhpcyBpc24ndCBhbiBleGFjdCBtYXRjaCB0byB0aGUgb2xkIGNhbGwgdG8gX2ZuRHJhdyAtIGl0IHRha2VzXHJcblx0XHRcdC8vIGludG8gYWNjb3VudCB0aGUgbmV3IGRhdGEsIGJ1dCBjYW4gaG9sZCBwb3NpdGlvbi5cclxuXHRcdFx0dGhpcy5hcGkoIHRydWUgKS5kcmF3KCBjb21wbGV0ZSApO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZpbHRlciB0aGUgaW5wdXQgYmFzZWQgb24gZGF0YVxyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSBzSW5wdXQgU3RyaW5nIHRvIGZpbHRlciB0aGUgdGFibGUgb25cclxuXHRcdCAqICBAcGFyYW0ge2ludHxudWxsfSBbaUNvbHVtbl0gQ29sdW1uIHRvIGxpbWl0IGZpbHRlcmluZyB0b1xyXG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2JSZWdleD1mYWxzZV0gVHJlYXQgYXMgcmVndWxhciBleHByZXNzaW9uIG9yIG5vdFxyXG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2JTbWFydD10cnVlXSBQZXJmb3JtIHNtYXJ0IGZpbHRlcmluZyBvciBub3RcclxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IFtiU2hvd0dsb2JhbD10cnVlXSBTaG93IHRoZSBpbnB1dCBnbG9iYWwgZmlsdGVyIGluIGl0J3MgaW5wdXQgYm94KGVzKVxyXG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2JDYXNlSW5zZW5zaXRpdmU9dHJ1ZV0gRG8gY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaGluZyAodHJ1ZSkgb3Igbm90IChmYWxzZSlcclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vIFNvbWV0aW1lIGxhdGVyIC0gZmlsdGVyLi4uXHJcblx0XHQgKiAgICAgIG9UYWJsZS5mbkZpbHRlciggJ3Rlc3Qgc3RyaW5nJyApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuRmlsdGVyID0gZnVuY3Rpb24oIHNJbnB1dCwgaUNvbHVtbiwgYlJlZ2V4LCBiU21hcnQsIGJTaG93R2xvYmFsLCBiQ2FzZUluc2Vuc2l0aXZlIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBpQ29sdW1uID09PSBudWxsIHx8IGlDb2x1bW4gPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRhcGkuc2VhcmNoKCBzSW5wdXQsIGJSZWdleCwgYlNtYXJ0LCBiQ2FzZUluc2Vuc2l0aXZlICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0YXBpLmNvbHVtbiggaUNvbHVtbiApLnNlYXJjaCggc0lucHV0LCBiUmVnZXgsIGJTbWFydCwgYkNhc2VJbnNlbnNpdGl2ZSApO1xyXG5cdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0YXBpLmRyYXcoKTtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgdGhlIGRhdGEgZm9yIHRoZSB3aG9sZSB0YWJsZSwgYW4gaW5kaXZpZHVhbCByb3cgb3IgYW4gaW5kaXZpZHVhbCBjZWxsIGJhc2VkIG9uIHRoZVxyXG5cdFx0ICogcHJvdmlkZWQgcGFyYW1ldGVycy5cclxuXHRcdCAqICBAcGFyYW0ge2ludHxub2RlfSBbc3JjXSBBIFRSIHJvdyBub2RlLCBURC9USCBjZWxsIG5vZGUgb3IgYW4gaW50ZWdlci4gSWYgZ2l2ZW4gYXNcclxuXHRcdCAqICAgIGEgVFIgbm9kZSB0aGVuIHRoZSBkYXRhIHNvdXJjZSBmb3IgdGhlIHdob2xlIHJvdyB3aWxsIGJlIHJldHVybmVkLiBJZiBnaXZlbiBhcyBhXHJcblx0XHQgKiAgICBURC9USCBjZWxsIG5vZGUgdGhlbiBpQ29sIHdpbGwgYmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGFuZCB0aGUgZGF0YSBmb3IgdGhlXHJcblx0XHQgKiAgICBjZWxsIHJldHVybmVkLiBJZiBnaXZlbiBhcyBhbiBpbnRlZ2VyLCB0aGVuIHRoaXMgaXMgdHJlYXRlZCBhcyB0aGUgYW9EYXRhIGludGVybmFsXHJcblx0XHQgKiAgICBkYXRhIGluZGV4IGZvciB0aGUgcm93IChzZWUgZm5HZXRQb3NpdGlvbikgYW5kIHRoZSBkYXRhIGZvciB0aGF0IHJvdyB1c2VkLlxyXG5cdFx0ICogIEBwYXJhbSB7aW50fSBbY29sXSBPcHRpb25hbCBjb2x1bW4gaW5kZXggdGhhdCB5b3Ugd2FudCB0aGUgZGF0YSBvZi5cclxuXHRcdCAqICBAcmV0dXJucyB7YXJyYXl8b2JqZWN0fHN0cmluZ30gSWYgbVJvdyBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIGRhdGEgZm9yIGFsbCByb3dzIGlzXHJcblx0XHQgKiAgICByZXR1cm5lZC4gSWYgbVJvdyBpcyBkZWZpbmVkLCBqdXN0IGRhdGEgZm9yIHRoYXQgcm93LCBhbmQgaXMgaUNvbCBpc1xyXG5cdFx0ICogICAgZGVmaW5lZCwgb25seSBkYXRhIGZvciB0aGUgZGVzaWduYXRlZCBjZWxsIGlzIHJldHVybmVkLlxyXG5cdFx0ICogIEBkdG9wdCBBUElcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gUm93IGRhdGFcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgb1RhYmxlLiQoJ3RyJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgICB2YXIgZGF0YSA9IG9UYWJsZS5mbkdldERhdGEoIHRoaXMgKTtcclxuXHRcdCAqICAgICAgICAvLyAuLi4gZG8gc29tZXRoaW5nIHdpdGggdGhlIGFycmF5IC8gb2JqZWN0IG9mIGRhdGEgZm9yIHRoZSByb3dcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gSW5kaXZpZHVhbCBjZWxsIGRhdGFcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgb1RhYmxlLiQoJ3RkJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgICB2YXIgc0RhdGEgPSBvVGFibGUuZm5HZXREYXRhKCB0aGlzICk7XHJcblx0XHQgKiAgICAgICAgYWxlcnQoICdUaGUgY2VsbCBjbGlja2VkIG9uIGhhZCB0aGUgdmFsdWUgb2YgJytzRGF0YSApO1xyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZm5HZXREYXRhID0gZnVuY3Rpb24oIHNyYywgY29sIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBzcmMgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHR2YXIgdHlwZSA9IHNyYy5ub2RlTmFtZSA/IHNyYy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogJyc7XHJcblx0XHRcclxuXHRcdFx0XHRyZXR1cm4gY29sICE9PSB1bmRlZmluZWQgfHwgdHlwZSA9PSAndGQnIHx8IHR5cGUgPT0gJ3RoJyA/XHJcblx0XHRcdFx0XHRhcGkuY2VsbCggc3JjLCBjb2wgKS5kYXRhKCkgOlxyXG5cdFx0XHRcdFx0YXBpLnJvdyggc3JjICkuZGF0YSgpIHx8IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRyZXR1cm4gYXBpLmRhdGEoKS50b0FycmF5KCk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0IGFuIGFycmF5IG9mIHRoZSBUUiBub2RlcyB0aGF0IGFyZSB1c2VkIGluIHRoZSB0YWJsZSdzIGJvZHkuIE5vdGUgdGhhdCB5b3Ugd2lsbFxyXG5cdFx0ICogdHlwaWNhbGx5IHdhbnQgdG8gdXNlIHRoZSAnJCcgQVBJIG1ldGhvZCBpbiBwcmVmZXJlbmNlIHRvIHRoaXMgYXMgaXQgaXMgbW9yZVxyXG5cdFx0ICogZmxleGlibGUuXHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IFtpUm93XSBPcHRpb25hbCByb3cgaW5kZXggZm9yIHRoZSBUUiBlbGVtZW50IHlvdSB3YW50XHJcblx0XHQgKiAgQHJldHVybnMge2FycmF5fG5vZGV9IElmIGlSb3cgaXMgdW5kZWZpbmVkLCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCBUUiBlbGVtZW50c1xyXG5cdFx0ICogICAgaW4gdGhlIHRhYmxlJ3MgYm9keSwgb3IgaVJvdyBpcyBkZWZpbmVkLCBqdXN0IHRoZSBUUiBlbGVtZW50IHJlcXVlc3RlZC5cclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vIEdldCB0aGUgbm9kZXMgZnJvbSB0aGUgdGFibGVcclxuXHRcdCAqICAgICAgdmFyIG5Ob2RlcyA9IG9UYWJsZS5mbkdldE5vZGVzKCApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuR2V0Tm9kZXMgPSBmdW5jdGlvbiggaVJvdyApXHJcblx0XHR7XHJcblx0XHRcdHZhciBhcGkgPSB0aGlzLmFwaSggdHJ1ZSApO1xyXG5cdFx0XHJcblx0XHRcdHJldHVybiBpUm93ICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGFwaS5yb3coIGlSb3cgKS5ub2RlKCkgOlxyXG5cdFx0XHRcdGFwaS5yb3dzKCkubm9kZXMoKS5mbGF0dGVuKCkudG9BcnJheSgpO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEdldCB0aGUgYXJyYXkgaW5kZXhlcyBvZiBhIHBhcnRpY3VsYXIgY2VsbCBmcm9tIGl0J3MgRE9NIGVsZW1lbnRcclxuXHRcdCAqIGFuZCBjb2x1bW4gaW5kZXggaW5jbHVkaW5nIGhpZGRlbiBjb2x1bW5zXHJcblx0XHQgKiAgQHBhcmFtIHtub2RlfSBub2RlIHRoaXMgY2FuIGVpdGhlciBiZSBhIFRSLCBURCBvciBUSCBpbiB0aGUgdGFibGUncyBib2R5XHJcblx0XHQgKiAgQHJldHVybnMge2ludH0gSWYgbk5vZGUgaXMgZ2l2ZW4gYXMgYSBUUiwgdGhlbiBhIHNpbmdsZSBpbmRleCBpcyByZXR1cm5lZCwgb3JcclxuXHRcdCAqICAgIGlmIGdpdmVuIGFzIGEgY2VsbCwgYW4gYXJyYXkgb2YgW3JvdyBpbmRleCwgY29sdW1uIGluZGV4ICh2aXNpYmxlKSxcclxuXHRcdCAqICAgIGNvbHVtbiBpbmRleCAoYWxsKV0gaXMgZ2l2ZW4uXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUgdGJvZHkgdGQnKS5jbGljayggZnVuY3Rpb24gKCkge1xyXG5cdFx0ICogICAgICAgIC8vIEdldCB0aGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgZGF0YSBmcm9tIHRoZSBub2RlXHJcblx0XHQgKiAgICAgICAgdmFyIGFQb3MgPSBvVGFibGUuZm5HZXRQb3NpdGlvbiggdGhpcyApO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgICAvLyBHZXQgdGhlIGRhdGEgYXJyYXkgZm9yIHRoaXMgcm93XHJcblx0XHQgKiAgICAgICAgdmFyIGFEYXRhID0gb1RhYmxlLmZuR2V0RGF0YSggYVBvc1swXSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgICAvLyBVcGRhdGUgdGhlIGRhdGEgYXJyYXkgYW5kIHJldHVybiB0aGUgdmFsdWVcclxuXHRcdCAqICAgICAgICBhRGF0YVsgYVBvc1sxXSBdID0gJ2NsaWNrZWQnO1xyXG5cdFx0ICogICAgICAgIHRoaXMuaW5uZXJIVE1MID0gJ2NsaWNrZWQnO1xyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBJbml0IERhdGFUYWJsZXNcclxuXHRcdCAqICAgICAgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mbkdldFBvc2l0aW9uID0gZnVuY3Rpb24oIG5vZGUgKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgYXBpID0gdGhpcy5hcGkoIHRydWUgKTtcclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0XHJcblx0XHRcdGlmICggbm9kZU5hbWUgPT0gJ1RSJyApIHtcclxuXHRcdFx0XHRyZXR1cm4gYXBpLnJvdyggbm9kZSApLmluZGV4KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoIG5vZGVOYW1lID09ICdURCcgfHwgbm9kZU5hbWUgPT0gJ1RIJyApIHtcclxuXHRcdFx0XHR2YXIgY2VsbCA9IGFwaS5jZWxsKCBub2RlICkuaW5kZXgoKTtcclxuXHRcdFxyXG5cdFx0XHRcdHJldHVybiBbXHJcblx0XHRcdFx0XHRjZWxsLnJvdyxcclxuXHRcdFx0XHRcdGNlbGwuY29sdW1uVmlzaWJsZSxcclxuXHRcdFx0XHRcdGNlbGwuY29sdW1uXHJcblx0XHRcdFx0XTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVjayB0byBzZWUgaWYgYSByb3cgaXMgJ29wZW4nIG9yIG5vdC5cclxuXHRcdCAqICBAcGFyYW0ge25vZGV9IG5UciB0aGUgdGFibGUgcm93IHRvIGNoZWNrXHJcblx0XHQgKiAgQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIHJvdyBpcyBjdXJyZW50bHkgb3BlbiwgZmFsc2Ugb3RoZXJ3aXNlXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vICdvcGVuJyBhbiBpbmZvcm1hdGlvbiByb3cgd2hlbiBhIHJvdyBpcyBjbGlja2VkIG9uXHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlIHRib2R5IHRyJykuY2xpY2soIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgICBpZiAoIG9UYWJsZS5mbklzT3Blbih0aGlzKSApIHtcclxuXHRcdCAqICAgICAgICAgIG9UYWJsZS5mbkNsb3NlKCB0aGlzICk7XHJcblx0XHQgKiAgICAgICAgfSBlbHNlIHtcclxuXHRcdCAqICAgICAgICAgIG9UYWJsZS5mbk9wZW4oIHRoaXMsIFwiVGVtcG9yYXJ5IHJvdyBvcGVuZWRcIiwgXCJpbmZvX3Jvd1wiICk7XHJcblx0XHQgKiAgICAgICAgfVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuSXNPcGVuID0gZnVuY3Rpb24oIG5UciApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB0aGlzLmFwaSggdHJ1ZSApLnJvdyggblRyICkuY2hpbGQuaXNTaG93bigpO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBwbGFjZSBhIG5ldyByb3cgZGlyZWN0bHkgYWZ0ZXIgYSByb3cgd2hpY2ggaXMgY3VycmVudGx5XHJcblx0XHQgKiBvbiBkaXNwbGF5IG9uIHRoZSBwYWdlLCB3aXRoIHRoZSBIVE1MIGNvbnRlbnRzIHRoYXQgaXMgcGFzc2VkIGludG8gdGhlXHJcblx0XHQgKiBmdW5jdGlvbi4gVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIHRvIGFzayBmb3IgY29uZmlybWF0aW9uIHRoYXQgYVxyXG5cdFx0ICogcGFydGljdWxhciByZWNvcmQgc2hvdWxkIGJlIGRlbGV0ZWQuXHJcblx0XHQgKiAgQHBhcmFtIHtub2RlfSBuVHIgVGhlIHRhYmxlIHJvdyB0byAnb3BlbidcclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ3xub2RlfGpRdWVyeX0gbUh0bWwgVGhlIEhUTUwgdG8gcHV0IGludG8gdGhlIHJvd1xyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSBzQ2xhc3MgQ2xhc3MgdG8gZ2l2ZSB0aGUgbmV3IFREIGNlbGxcclxuXHRcdCAqICBAcmV0dXJucyB7bm9kZX0gVGhlIHJvdyBvcGVuZWQuIE5vdGUgdGhhdCBpZiB0aGUgdGFibGUgcm93IHBhc3NlZCBpbiBhcyB0aGVcclxuXHRcdCAqICAgIGZpcnN0IHBhcmFtZXRlciwgaXMgbm90IGZvdW5kIGluIHRoZSB0YWJsZSwgdGhpcyBtZXRob2Qgd2lsbCBzaWxlbnRseVxyXG5cdFx0ICogICAgcmV0dXJuLlxyXG5cdFx0ICogIEBkdG9wdCBBUElcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgIHZhciBvVGFibGU7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyAnb3BlbicgYW4gaW5mb3JtYXRpb24gcm93IHdoZW4gYSByb3cgaXMgY2xpY2tlZCBvblxyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZSB0Ym9keSB0cicpLmNsaWNrKCBmdW5jdGlvbiAoKSB7XHJcblx0XHQgKiAgICAgICAgaWYgKCBvVGFibGUuZm5Jc09wZW4odGhpcykgKSB7XHJcblx0XHQgKiAgICAgICAgICBvVGFibGUuZm5DbG9zZSggdGhpcyApO1xyXG5cdFx0ICogICAgICAgIH0gZWxzZSB7XHJcblx0XHQgKiAgICAgICAgICBvVGFibGUuZm5PcGVuKCB0aGlzLCBcIlRlbXBvcmFyeSByb3cgb3BlbmVkXCIsIFwiaW5mb19yb3dcIiApO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mbk9wZW4gPSBmdW5jdGlvbiggblRyLCBtSHRtbCwgc0NsYXNzIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYXBpKCB0cnVlIClcclxuXHRcdFx0XHQucm93KCBuVHIgKVxyXG5cdFx0XHRcdC5jaGlsZCggbUh0bWwsIHNDbGFzcyApXHJcblx0XHRcdFx0LnNob3coKVxyXG5cdFx0XHRcdC5jaGlsZCgpWzBdO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIENoYW5nZSB0aGUgcGFnaW5hdGlvbiAtIHByb3ZpZGVzIHRoZSBpbnRlcm5hbCBsb2dpYyBmb3IgcGFnaW5hdGlvbiBpbiBhIHNpbXBsZSBBUElcclxuXHRcdCAqIGZ1bmN0aW9uLiBXaXRoIHRoaXMgZnVuY3Rpb24geW91IGNhbiBoYXZlIGEgRGF0YVRhYmxlcyB0YWJsZSBnbyB0byB0aGUgbmV4dCxcclxuXHRcdCAqIHByZXZpb3VzLCBmaXJzdCBvciBsYXN0IHBhZ2VzLlxyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfGludH0gbUFjdGlvbiBQYWdpbmcgYWN0aW9uIHRvIHRha2U6IFwiZmlyc3RcIiwgXCJwcmV2aW91c1wiLCBcIm5leHRcIiBvciBcImxhc3RcIlxyXG5cdFx0ICogICAgb3IgcGFnZSBudW1iZXIgdG8ganVtcCB0byAoaW50ZWdlciksIG5vdGUgdGhhdCBwYWdlIDAgaXMgdGhlIGZpcnN0IHBhZ2UuXHJcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbYlJlZHJhdz10cnVlXSBSZWRyYXcgdGhlIHRhYmxlIG9yIG5vdFxyXG5cdFx0ICogIEBkdG9wdCBBUElcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICogICAgICBvVGFibGUuZm5QYWdlQ2hhbmdlKCAnbmV4dCcgKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mblBhZ2VDaGFuZ2UgPSBmdW5jdGlvbiAoIG1BY3Rpb24sIGJSZWRyYXcgKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgYXBpID0gdGhpcy5hcGkoIHRydWUgKS5wYWdlKCBtQWN0aW9uICk7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBiUmVkcmF3ID09PSB1bmRlZmluZWQgfHwgYlJlZHJhdyApIHtcclxuXHRcdFx0XHRhcGkuZHJhdyhmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG93IGEgcGFydGljdWxhciBjb2x1bW5cclxuXHRcdCAqICBAcGFyYW0ge2ludH0gaUNvbCBUaGUgY29sdW1uIHdob3NlIGRpc3BsYXkgc2hvdWxkIGJlIGNoYW5nZWRcclxuXHRcdCAqICBAcGFyYW0ge2Jvb2x9IGJTaG93IFNob3cgKHRydWUpIG9yIGhpZGUgKGZhbHNlKSB0aGUgY29sdW1uXHJcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbYlJlZHJhdz10cnVlXSBSZWRyYXcgdGhlIHRhYmxlIG9yIG5vdFxyXG5cdFx0ICogIEBkdG9wdCBBUElcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgLy8gSGlkZSB0aGUgc2Vjb25kIGNvbHVtbiBhZnRlciBpbml0aWFsaXNhdGlvblxyXG5cdFx0ICogICAgICBvVGFibGUuZm5TZXRDb2x1bW5WaXMoIDEsIGZhbHNlICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZm5TZXRDb2x1bW5WaXMgPSBmdW5jdGlvbiAoIGlDb2wsIGJTaG93LCBiUmVkcmF3IClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICkuY29sdW1uKCBpQ29sICkudmlzaWJsZSggYlNob3cgKTtcclxuXHRcdFxyXG5cdFx0XHRpZiAoIGJSZWRyYXcgPT09IHVuZGVmaW5lZCB8fCBiUmVkcmF3ICkge1xyXG5cdFx0XHRcdGFwaS5jb2x1bW5zLmFkanVzdCgpLmRyYXcoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEdldCB0aGUgc2V0dGluZ3MgZm9yIGEgcGFydGljdWxhciB0YWJsZSBmb3IgZXh0ZXJuYWwgbWFuaXB1bGF0aW9uXHJcblx0XHQgKiAgQHJldHVybnMge29iamVjdH0gRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3QuIFNlZVxyXG5cdFx0ICogICAge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfVxyXG5cdFx0ICogIEBkdG9wdCBBUElcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICogICAgICB2YXIgb1NldHRpbmdzID0gb1RhYmxlLmZuU2V0dGluZ3MoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgIC8vIFNob3cgYW4gZXhhbXBsZSBwYXJhbWV0ZXIgZnJvbSB0aGUgc2V0dGluZ3NcclxuXHRcdCAqICAgICAgYWxlcnQoIG9TZXR0aW5ncy5faURpc3BsYXlTdGFydCApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuU2V0dGluZ3MgPSBmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBfZm5TZXR0aW5nc0Zyb21Ob2RlKCB0aGlzW19leHQuaUFwaUluZGV4XSApO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNvcnQgdGhlIHRhYmxlIGJ5IGEgcGFydGljdWxhciBjb2x1bW5cclxuXHRcdCAqICBAcGFyYW0ge2ludH0gaUNvbCB0aGUgZGF0YSBpbmRleCB0byBzb3J0IG9uLiBOb3RlIHRoYXQgdGhpcyB3aWxsIG5vdCBtYXRjaCB0aGVcclxuXHRcdCAqICAgICdkaXNwbGF5IGluZGV4JyBpZiB5b3UgaGF2ZSBoaWRkZW4gZGF0YSBlbnRyaWVzXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBTb3J0IGltbWVkaWF0ZWx5IHdpdGggY29sdW1ucyAwIGFuZCAxXHJcblx0XHQgKiAgICAgIG9UYWJsZS5mblNvcnQoIFsgWzAsJ2FzYyddLCBbMSwnYXNjJ10gXSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuU29ydCA9IGZ1bmN0aW9uKCBhYVNvcnQgKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmFwaSggdHJ1ZSApLm9yZGVyKCBhYVNvcnQgKS5kcmF3KCk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQXR0YWNoIGEgc29ydCBsaXN0ZW5lciB0byBhbiBlbGVtZW50IGZvciBhIGdpdmVuIGNvbHVtblxyXG5cdFx0ICogIEBwYXJhbSB7bm9kZX0gbk5vZGUgdGhlIGVsZW1lbnQgdG8gYXR0YWNoIHRoZSBzb3J0IGxpc3RlbmVyIHRvXHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IGlDb2x1bW4gdGhlIGNvbHVtbiB0aGF0IGEgY2xpY2sgb24gdGhpcyBub2RlIHdpbGwgc29ydCBvblxyXG5cdFx0ICogIEBwYXJhbSB7ZnVuY3Rpb259IFtmbkNhbGxiYWNrXSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIHNvcnQgaXMgcnVuXHJcblx0XHQgKiAgQGR0b3B0IEFQSVxyXG5cdFx0ICogIEBkZXByZWNhdGVkIFNpbmNlIHYxLjEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgdmFyIG9UYWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBTb3J0IG9uIGNvbHVtbiAxLCB3aGVuICdzb3J0ZXInIGlzIGNsaWNrZWQgb25cclxuXHRcdCAqICAgICAgb1RhYmxlLmZuU29ydExpc3RlbmVyKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc29ydGVyJyksIDEgKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5mblNvcnRMaXN0ZW5lciA9IGZ1bmN0aW9uKCBuTm9kZSwgaUNvbHVtbiwgZm5DYWxsYmFjayApXHJcblx0XHR7XHJcblx0XHRcdHRoaXMuYXBpKCB0cnVlICkub3JkZXIubGlzdGVuZXIoIG5Ob2RlLCBpQ29sdW1uLCBmbkNhbGxiYWNrICk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlIGEgdGFibGUgY2VsbCBvciByb3cgLSB0aGlzIG1ldGhvZCB3aWxsIGFjY2VwdCBlaXRoZXIgYSBzaW5nbGUgdmFsdWUgdG9cclxuXHRcdCAqIHVwZGF0ZSB0aGUgY2VsbCB3aXRoLCBhbiBhcnJheSBvZiB2YWx1ZXMgd2l0aCBvbmUgZWxlbWVudCBmb3IgZWFjaCBjb2x1bW4gb3JcclxuXHRcdCAqIGFuIG9iamVjdCBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIG9yaWdpbmFsIGRhdGEgc291cmNlLiBUaGUgZnVuY3Rpb24gaXNcclxuXHRcdCAqIHNlbGYtcmVmZXJlbmNpbmcgaW4gb3JkZXIgdG8gbWFrZSB0aGUgbXVsdGkgY29sdW1uIHVwZGF0ZXMgZWFzaWVyLlxyXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fGFycmF5fHN0cmluZ30gbURhdGEgRGF0YSB0byB1cGRhdGUgdGhlIGNlbGwvcm93IHdpdGhcclxuXHRcdCAqICBAcGFyYW0ge25vZGV8aW50fSBtUm93IFRSIGVsZW1lbnQgeW91IHdhbnQgdG8gdXBkYXRlIG9yIHRoZSBhb0RhdGEgaW5kZXhcclxuXHRcdCAqICBAcGFyYW0ge2ludH0gW2lDb2x1bW5dIFRoZSBjb2x1bW4gdG8gdXBkYXRlLCBnaXZlIGFzIG51bGwgb3IgdW5kZWZpbmVkIHRvXHJcblx0XHQgKiAgICB1cGRhdGUgYSB3aG9sZSByb3cuXHJcblx0XHQgKiAgQHBhcmFtIHtib29sfSBbYlJlZHJhdz10cnVlXSBSZWRyYXcgdGhlIHRhYmxlIG9yIG5vdFxyXG5cdFx0ICogIEBwYXJhbSB7Ym9vbH0gW2JBY3Rpb249dHJ1ZV0gUGVyZm9ybSBwcmUtZHJhdyBhY3Rpb25zIG9yIG5vdFxyXG5cdFx0ICogIEByZXR1cm5zIHtpbnR9IDAgb24gc3VjY2VzcywgMSBvbiBlcnJvclxyXG5cdFx0ICogIEBkdG9wdCBBUElcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgIHZhciBvVGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdFx0ICogICAgICBvVGFibGUuZm5VcGRhdGUoICdFeGFtcGxlIHVwZGF0ZScsIDAsIDAgKTsgLy8gU2luZ2xlIGNlbGxcclxuXHRcdCAqICAgICAgb1RhYmxlLmZuVXBkYXRlKCBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddLCAkKCd0Ym9keSB0cicpWzBdICk7IC8vIFJvd1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLmZuVXBkYXRlID0gZnVuY3Rpb24oIG1EYXRhLCBtUm93LCBpQ29sdW1uLCBiUmVkcmF3LCBiQWN0aW9uIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGFwaSA9IHRoaXMuYXBpKCB0cnVlICk7XHJcblx0XHRcclxuXHRcdFx0aWYgKCBpQ29sdW1uID09PSB1bmRlZmluZWQgfHwgaUNvbHVtbiA9PT0gbnVsbCApIHtcclxuXHRcdFx0XHRhcGkucm93KCBtUm93ICkuZGF0YSggbURhdGEgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRhcGkuY2VsbCggbVJvdywgaUNvbHVtbiApLmRhdGEoIG1EYXRhICk7XHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRpZiAoIGJBY3Rpb24gPT09IHVuZGVmaW5lZCB8fCBiQWN0aW9uICkge1xyXG5cdFx0XHRcdGFwaS5jb2x1bW5zLmFkanVzdCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0aWYgKCBiUmVkcmF3ID09PSB1bmRlZmluZWQgfHwgYlJlZHJhdyApIHtcclxuXHRcdFx0XHRhcGkuZHJhdygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFByb3ZpZGUgYSBjb21tb24gbWV0aG9kIGZvciBwbHVnLWlucyB0byBjaGVjayB0aGUgdmVyc2lvbiBvZiBEYXRhVGFibGVzIGJlaW5nIHVzZWQsIGluIG9yZGVyXHJcblx0XHQgKiB0byBlbnN1cmUgY29tcGF0aWJpbGl0eS5cclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gc1ZlcnNpb24gVmVyc2lvbiBzdHJpbmcgdG8gY2hlY2sgZm9yLCBpbiB0aGUgZm9ybWF0IFwiWC5ZLlpcIi4gTm90ZSB0aGF0IHRoZVxyXG5cdFx0ICogICAgZm9ybWF0cyBcIlhcIiBhbmQgXCJYLllcIiBhcmUgYWxzbyBhY2NlcHRhYmxlLlxyXG5cdFx0ICogIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoaXMgdmVyc2lvbiBvZiBEYXRhVGFibGVzIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIHJlcXVpcmVkXHJcblx0XHQgKiAgICB2ZXJzaW9uLCBvciBmYWxzZSBpZiB0aGlzIHZlcnNpb24gb2YgRGF0YVRhbGVzIGlzIG5vdCBzdWl0YWJsZVxyXG5cdFx0ICogIEBtZXRob2RcclxuXHRcdCAqICBAZHRvcHQgQVBJXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgU2luY2UgdjEuMTBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICB2YXIgb1RhYmxlID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKTtcclxuXHRcdCAqICAgICAgYWxlcnQoIG9UYWJsZS5mblZlcnNpb25DaGVjayggJzEuOS4wJyApICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZm5WZXJzaW9uQ2hlY2sgPSBfZXh0LmZuVmVyc2lvbkNoZWNrO1xyXG5cdFx0XHJcblxyXG5cdFx0dmFyIF90aGF0ID0gdGhpcztcclxuXHRcdHZhciBlbXB0eUluaXQgPSBvcHRpb25zID09PSB1bmRlZmluZWQ7XHJcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKCBlbXB0eUluaXQgKSB7XHJcblx0XHRcdG9wdGlvbnMgPSB7fTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm9BcGkgPSB0aGlzLmludGVybmFsID0gX2V4dC5pbnRlcm5hbDtcclxuXHJcblx0XHQvLyBFeHRlbmQgd2l0aCBvbGQgc3R5bGUgcGx1Zy1pbiBBUEkgbWV0aG9kc1xyXG5cdFx0Zm9yICggdmFyIGZuIGluIERhdGFUYWJsZS5leHQuaW50ZXJuYWwgKSB7XHJcblx0XHRcdGlmICggZm4gKSB7XHJcblx0XHRcdFx0dGhpc1tmbl0gPSBfZm5FeHRlcm5BcGlGdW5jKGZuKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gRm9yIGVhY2ggaW5pdGlhbGlzYXRpb24gd2Ugd2FudCB0byBnaXZlIGl0IGEgY2xlYW4gaW5pdGlhbGlzYXRpb25cclxuXHRcdFx0Ly8gb2JqZWN0IHRoYXQgY2FuIGJlIGJhc2hlZCBhcm91bmRcclxuXHRcdFx0dmFyIG8gPSB7fTtcclxuXHRcdFx0dmFyIG9Jbml0ID0gbGVuID4gMSA/IC8vIG9wdGltaXNhdGlvbiBmb3Igc2luZ2xlIHRhYmxlIGNhc2VcclxuXHRcdFx0XHRfZm5FeHRlbmQoIG8sIG9wdGlvbnMsIHRydWUgKSA6XHJcblx0XHRcdFx0b3B0aW9ucztcclxuXHJcblx0XHRcdC8qZ2xvYmFsIG9Jbml0LF90aGF0LGVtcHR5SW5pdCovXHJcblx0XHRcdHZhciBpPTAsIGlMZW4sIGosIGpMZW4sIGssIGtMZW47XHJcblx0XHRcdHZhciBzSWQgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ2lkJyApO1xyXG5cdFx0XHR2YXIgYkluaXRIYW5kZWRPZmYgPSBmYWxzZTtcclxuXHRcdFx0dmFyIGRlZmF1bHRzID0gRGF0YVRhYmxlLmRlZmF1bHRzO1xyXG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8qIFNhbml0eSBjaGVjayAqL1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPSAndGFibGUnIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdF9mbkxvZyggbnVsbCwgMCwgJ05vbi10YWJsZSBub2RlIGluaXRpYWxpc2F0aW9uICgnK3RoaXMubm9kZU5hbWUrJyknLCAyICk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgdGhlIGRlZmF1bHRzICovXHJcblx0XHRcdF9mbkNvbXBhdE9wdHMoIGRlZmF1bHRzICk7XHJcblx0XHRcdF9mbkNvbXBhdENvbHMoIGRlZmF1bHRzLmNvbHVtbiApO1xyXG5cdFx0XHRcclxuXHRcdFx0LyogQ29udmVydCB0aGUgY2FtZWwtY2FzZSBkZWZhdWx0cyB0byBIdW5nYXJpYW4gKi9cclxuXHRcdFx0X2ZuQ2FtZWxUb0h1bmdhcmlhbiggZGVmYXVsdHMsIGRlZmF1bHRzLCB0cnVlICk7XHJcblx0XHRcdF9mbkNhbWVsVG9IdW5nYXJpYW4oIGRlZmF1bHRzLmNvbHVtbiwgZGVmYXVsdHMuY29sdW1uLCB0cnVlICk7XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBTZXR0aW5nIHVwIHRoZSBpbml0aWFsaXNhdGlvbiBvYmplY3QgKi9cclxuXHRcdFx0X2ZuQ2FtZWxUb0h1bmdhcmlhbiggZGVmYXVsdHMsICQuZXh0ZW5kKCBvSW5pdCwgJHRoaXMuZGF0YSgpICkgKTtcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0LyogQ2hlY2sgdG8gc2VlIGlmIHdlIGFyZSByZS1pbml0aWFsaXNpbmcgYSB0YWJsZSAqL1xyXG5cdFx0XHR2YXIgYWxsU2V0dGluZ3MgPSBEYXRhVGFibGUuc2V0dGluZ3M7XHJcblx0XHRcdGZvciAoIGk9MCwgaUxlbj1hbGxTZXR0aW5ncy5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIHMgPSBhbGxTZXR0aW5nc1tpXTtcclxuXHRcdFx0XHJcblx0XHRcdFx0LyogQmFzZSBjaGVjayBvbiB0YWJsZSBub2RlICovXHJcblx0XHRcdFx0aWYgKCBzLm5UYWJsZSA9PSB0aGlzIHx8IHMublRIZWFkLnBhcmVudE5vZGUgPT0gdGhpcyB8fCAocy5uVEZvb3QgJiYgcy5uVEZvb3QucGFyZW50Tm9kZSA9PSB0aGlzKSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJSZXRyaWV2ZSA9IG9Jbml0LmJSZXRyaWV2ZSAhPT0gdW5kZWZpbmVkID8gb0luaXQuYlJldHJpZXZlIDogZGVmYXVsdHMuYlJldHJpZXZlO1xyXG5cdFx0XHRcdFx0dmFyIGJEZXN0cm95ID0gb0luaXQuYkRlc3Ryb3kgIT09IHVuZGVmaW5lZCA/IG9Jbml0LmJEZXN0cm95IDogZGVmYXVsdHMuYkRlc3Ryb3k7XHJcblx0XHRcdFxyXG5cdFx0XHRcdFx0aWYgKCBlbXB0eUluaXQgfHwgYlJldHJpZXZlIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHMub0luc3RhbmNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiAoIGJEZXN0cm95IClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0cy5vSW5zdGFuY2UuZm5EZXN0cm95KCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRfZm5Mb2coIHMsIDAsICdDYW5ub3QgcmVpbml0aWFsaXNlIERhdGFUYWJsZScsIDMgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFx0LyogSWYgdGhlIGVsZW1lbnQgd2UgYXJlIGluaXRpYWxpc2luZyBoYXMgdGhlIHNhbWUgSUQgYXMgYSB0YWJsZSB3aGljaCB3YXMgcHJldmlvdXNseVxyXG5cdFx0XHRcdCAqIGluaXRpYWxpc2VkLCBidXQgdGhlIHRhYmxlIG5vZGVzIGRvbid0IG1hdGNoIChmcm9tIGJlZm9yZSkgdGhlbiB3ZSBkZXN0cm95IHRoZSBvbGRcclxuXHRcdFx0XHQgKiBpbnN0YW5jZSBieSBzaW1wbHkgZGVsZXRpbmcgaXQuIFRoaXMgaXMgdW5kZXIgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGUgdGFibGUgaGFzIGJlZW5cclxuXHRcdFx0XHQgKiBkZXN0cm95ZWQgYnkgb3RoZXIgbWV0aG9kcy4gQW55b25lIHVzaW5nIG5vbi1pZCBzZWxlY3RvcnMgd2lsbCBuZWVkIHRvIGRvIHRoaXMgbWFudWFsbHlcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRpZiAoIHMuc1RhYmxlSWQgPT0gdGhpcy5pZCApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YWxsU2V0dGluZ3Muc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8qIEVuc3VyZSB0aGUgdGFibGUgaGFzIGFuIElEIC0gcmVxdWlyZWQgZm9yIGFjY2Vzc2liaWxpdHkgKi9cclxuXHRcdFx0aWYgKCBzSWQgPT09IG51bGwgfHwgc0lkID09PSBcIlwiIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNJZCA9IFwiRGF0YVRhYmxlc19UYWJsZV9cIisoRGF0YVRhYmxlLmV4dC5fdW5pcXVlKyspO1xyXG5cdFx0XHRcdHRoaXMuaWQgPSBzSWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8qIENyZWF0ZSB0aGUgc2V0dGluZ3Mgb2JqZWN0IGZvciB0aGlzIHRhYmxlIGFuZCBzZXQgc29tZSBvZiB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzICovXHJcblx0XHRcdHZhciBvU2V0dGluZ3MgPSAkLmV4dGVuZCggdHJ1ZSwge30sIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzLCB7XHJcblx0XHRcdFx0XCJzRGVzdHJveVdpZHRoXCI6ICR0aGlzWzBdLnN0eWxlLndpZHRoLFxyXG5cdFx0XHRcdFwic0luc3RhbmNlXCI6ICAgICBzSWQsXHJcblx0XHRcdFx0XCJzVGFibGVJZFwiOiAgICAgIHNJZFxyXG5cdFx0XHR9ICk7XHJcblx0XHRcdG9TZXR0aW5ncy5uVGFibGUgPSB0aGlzO1xyXG5cdFx0XHRvU2V0dGluZ3Mub0FwaSAgID0gX3RoYXQuaW50ZXJuYWw7XHJcblx0XHRcdG9TZXR0aW5ncy5vSW5pdCAgPSBvSW5pdDtcclxuXHRcdFx0XHJcblx0XHRcdGFsbFNldHRpbmdzLnB1c2goIG9TZXR0aW5ncyApO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gTmVlZCB0byBhZGQgdGhlIGluc3RhbmNlIGFmdGVyIHRoZSBpbnN0YW5jZSBhZnRlciB0aGUgc2V0dGluZ3Mgb2JqZWN0IGhhcyBiZWVuIGFkZGVkXHJcblx0XHRcdC8vIHRvIHRoZSBzZXR0aW5ncyBhcnJheSwgc28gd2UgY2FuIHNlbGYgcmVmZXJlbmNlIHRoZSB0YWJsZSBpbnN0YW5jZSBpZiBtb3JlIHRoYW4gb25lXHJcblx0XHRcdG9TZXR0aW5ncy5vSW5zdGFuY2UgPSAoX3RoYXQubGVuZ3RoPT09MSkgPyBfdGhhdCA6ICR0aGlzLmRhdGFUYWJsZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGJlZm9yZSB3ZSBhcHBseSBhbGwgdGhlIGRlZmF1bHRzXHJcblx0XHRcdF9mbkNvbXBhdE9wdHMoIG9Jbml0ICk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAoIG9Jbml0Lm9MYW5ndWFnZSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRfZm5MYW5ndWFnZUNvbXBhdCggb0luaXQub0xhbmd1YWdlICk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vIElmIHRoZSBsZW5ndGggbWVudSBpcyBnaXZlbiwgYnV0IHRoZSBpbml0IGRpc3BsYXkgbGVuZ3RoIGlzIG5vdCwgdXNlIHRoZSBsZW5ndGggbWVudVxyXG5cdFx0XHRpZiAoIG9Jbml0LmFMZW5ndGhNZW51ICYmICEgb0luaXQuaURpc3BsYXlMZW5ndGggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0b0luaXQuaURpc3BsYXlMZW5ndGggPSAkLmlzQXJyYXkoIG9Jbml0LmFMZW5ndGhNZW51WzBdICkgP1xyXG5cdFx0XHRcdFx0b0luaXQuYUxlbmd0aE1lbnVbMF1bMF0gOiBvSW5pdC5hTGVuZ3RoTWVudVswXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gQXBwbHkgdGhlIGRlZmF1bHRzIGFuZCBpbml0IG9wdGlvbnMgdG8gbWFrZSBhIHNpbmdsZSBpbml0IG9iamVjdCB3aWxsIGFsbFxyXG5cdFx0XHQvLyBvcHRpb25zIGRlZmluZWQgZnJvbSBkZWZhdWx0cyBhbmQgaW5zdGFuY2Ugb3B0aW9ucy5cclxuXHRcdFx0b0luaXQgPSBfZm5FeHRlbmQoICQuZXh0ZW5kKCB0cnVlLCB7fSwgZGVmYXVsdHMgKSwgb0luaXQgKTtcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBNYXAgdGhlIGluaXRpYWxpc2F0aW9uIG9wdGlvbnMgb250byB0aGUgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHRcdF9mbk1hcCggb1NldHRpbmdzLm9GZWF0dXJlcywgb0luaXQsIFtcclxuXHRcdFx0XHRcImJQYWdpbmF0ZVwiLFxyXG5cdFx0XHRcdFwiYkxlbmd0aENoYW5nZVwiLFxyXG5cdFx0XHRcdFwiYkZpbHRlclwiLFxyXG5cdFx0XHRcdFwiYlNvcnRcIixcclxuXHRcdFx0XHRcImJTb3J0TXVsdGlcIixcclxuXHRcdFx0XHRcImJJbmZvXCIsXHJcblx0XHRcdFx0XCJiUHJvY2Vzc2luZ1wiLFxyXG5cdFx0XHRcdFwiYkF1dG9XaWR0aFwiLFxyXG5cdFx0XHRcdFwiYlNvcnRDbGFzc2VzXCIsXHJcblx0XHRcdFx0XCJiU2VydmVyU2lkZVwiLFxyXG5cdFx0XHRcdFwiYkRlZmVyUmVuZGVyXCJcclxuXHRcdFx0XSApO1xyXG5cdFx0XHRfZm5NYXAoIG9TZXR0aW5ncywgb0luaXQsIFtcclxuXHRcdFx0XHRcImFzU3RyaXBlQ2xhc3Nlc1wiLFxyXG5cdFx0XHRcdFwiYWpheFwiLFxyXG5cdFx0XHRcdFwiZm5TZXJ2ZXJEYXRhXCIsXHJcblx0XHRcdFx0XCJmbkZvcm1hdE51bWJlclwiLFxyXG5cdFx0XHRcdFwic1NlcnZlck1ldGhvZFwiLFxyXG5cdFx0XHRcdFwiYWFTb3J0aW5nXCIsXHJcblx0XHRcdFx0XCJhYVNvcnRpbmdGaXhlZFwiLFxyXG5cdFx0XHRcdFwiYUxlbmd0aE1lbnVcIixcclxuXHRcdFx0XHRcInNQYWdpbmF0aW9uVHlwZVwiLFxyXG5cdFx0XHRcdFwic0FqYXhTb3VyY2VcIixcclxuXHRcdFx0XHRcInNBamF4RGF0YVByb3BcIixcclxuXHRcdFx0XHRcImlTdGF0ZUR1cmF0aW9uXCIsXHJcblx0XHRcdFx0XCJzRG9tXCIsXHJcblx0XHRcdFx0XCJiU29ydENlbGxzVG9wXCIsXHJcblx0XHRcdFx0XCJpVGFiSW5kZXhcIixcclxuXHRcdFx0XHRcImZuU3RhdGVMb2FkQ2FsbGJhY2tcIixcclxuXHRcdFx0XHRcImZuU3RhdGVTYXZlQ2FsbGJhY2tcIixcclxuXHRcdFx0XHRcInJlbmRlcmVyXCIsXHJcblx0XHRcdFx0XCJzZWFyY2hEZWxheVwiLFxyXG5cdFx0XHRcdFwicm93SWRcIixcclxuXHRcdFx0XHRbIFwiaUNvb2tpZUR1cmF0aW9uXCIsIFwiaVN0YXRlRHVyYXRpb25cIiBdLCAvLyBiYWNrd2FyZHMgY29tcGF0XHJcblx0XHRcdFx0WyBcIm9TZWFyY2hcIiwgXCJvUHJldmlvdXNTZWFyY2hcIiBdLFxyXG5cdFx0XHRcdFsgXCJhb1NlYXJjaENvbHNcIiwgXCJhb1ByZVNlYXJjaENvbHNcIiBdLFxyXG5cdFx0XHRcdFsgXCJpRGlzcGxheUxlbmd0aFwiLCBcIl9pRGlzcGxheUxlbmd0aFwiIF0sXHJcblx0XHRcdFx0WyBcImJKUXVlcnlVSVwiLCBcImJKVUlcIiBdXHJcblx0XHRcdF0gKTtcclxuXHRcdFx0X2ZuTWFwKCBvU2V0dGluZ3Mub1Njcm9sbCwgb0luaXQsIFtcclxuXHRcdFx0XHRbIFwic1Njcm9sbFhcIiwgXCJzWFwiIF0sXHJcblx0XHRcdFx0WyBcInNTY3JvbGxYSW5uZXJcIiwgXCJzWElubmVyXCIgXSxcclxuXHRcdFx0XHRbIFwic1Njcm9sbFlcIiwgXCJzWVwiIF0sXHJcblx0XHRcdFx0WyBcImJTY3JvbGxDb2xsYXBzZVwiLCBcImJDb2xsYXBzZVwiIF1cclxuXHRcdFx0XSApO1xyXG5cdFx0XHRfZm5NYXAoIG9TZXR0aW5ncy5vTGFuZ3VhZ2UsIG9Jbml0LCBcImZuSW5mb0NhbGxiYWNrXCIgKTtcclxuXHRcdFx0XHJcblx0XHRcdC8qIENhbGxiYWNrIGZ1bmN0aW9ucyB3aGljaCBhcmUgYXJyYXkgZHJpdmVuICovXHJcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsICAgICAgIG9Jbml0LmZuRHJhd0NhbGxiYWNrLCAgICAgICd1c2VyJyApO1xyXG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9TZXJ2ZXJQYXJhbXMnLCAgICAgICBvSW5pdC5mblNlcnZlclBhcmFtcywgICAgICAndXNlcicgKTtcclxuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvU3RhdGVTYXZlUGFyYW1zJywgICAgb0luaXQuZm5TdGF0ZVNhdmVQYXJhbXMsICAgJ3VzZXInICk7XHJcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb1N0YXRlTG9hZFBhcmFtcycsICAgIG9Jbml0LmZuU3RhdGVMb2FkUGFyYW1zLCAgICd1c2VyJyApO1xyXG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9TdGF0ZUxvYWRlZCcsICAgICAgICBvSW5pdC5mblN0YXRlTG9hZGVkLCAgICAgICAndXNlcicgKTtcclxuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvUm93Q2FsbGJhY2snLCAgICAgICAgb0luaXQuZm5Sb3dDYWxsYmFjaywgICAgICAgJ3VzZXInICk7XHJcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb1Jvd0NyZWF0ZWRDYWxsYmFjaycsIG9Jbml0LmZuQ3JlYXRlZFJvdywgICAgICAgICd1c2VyJyApO1xyXG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9IZWFkZXJDYWxsYmFjaycsICAgICBvSW5pdC5mbkhlYWRlckNhbGxiYWNrLCAgICAndXNlcicgKTtcclxuXHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvRm9vdGVyQ2FsbGJhY2snLCAgICAgb0luaXQuZm5Gb290ZXJDYWxsYmFjaywgICAgJ3VzZXInICk7XHJcblx0XHRcdF9mbkNhbGxiYWNrUmVnKCBvU2V0dGluZ3MsICdhb0luaXRDb21wbGV0ZScsICAgICAgIG9Jbml0LmZuSW5pdENvbXBsZXRlLCAgICAgICd1c2VyJyApO1xyXG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9QcmVEcmF3Q2FsbGJhY2snLCAgICBvSW5pdC5mblByZURyYXdDYWxsYmFjaywgICAndXNlcicgKTtcclxuXHRcdFx0XHJcblx0XHRcdG9TZXR0aW5ncy5yb3dJZEZuID0gX2ZuR2V0T2JqZWN0RGF0YUZuKCBvSW5pdC5yb3dJZCApO1xyXG5cdFx0XHRcclxuXHRcdFx0LyogQnJvd3NlciBzdXBwb3J0IGRldGVjdGlvbiAqL1xyXG5cdFx0XHRfZm5Ccm93c2VyRGV0ZWN0KCBvU2V0dGluZ3MgKTtcclxuXHRcdFx0XHJcblx0XHRcdHZhciBvQ2xhc3NlcyA9IG9TZXR0aW5ncy5vQ2xhc3NlcztcclxuXHRcdFx0XHJcblx0XHRcdC8vIEB0b2RvIFJlbW92ZSBpbiAxLjExXHJcblx0XHRcdGlmICggb0luaXQuYkpRdWVyeVVJIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8qIFVzZSB0aGUgSlVJIGNsYXNzZXMgb2JqZWN0IGZvciBkaXNwbGF5LiBZb3UgY291bGQgY2xvbmUgdGhlIG9TdGRDbGFzc2VzIG9iamVjdCBpZlxyXG5cdFx0XHRcdCAqIHlvdSB3YW50IHRvIGhhdmUgbXVsdGlwbGUgdGFibGVzIHdpdGggbXVsdGlwbGUgaW5kZXBlbmRlbnQgY2xhc3Nlc1xyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdCQuZXh0ZW5kKCBvQ2xhc3NlcywgRGF0YVRhYmxlLmV4dC5vSlVJQ2xhc3Nlcywgb0luaXQub0NsYXNzZXMgKTtcclxuXHRcdFx0XHJcblx0XHRcdFx0aWYgKCBvSW5pdC5zRG9tID09PSBkZWZhdWx0cy5zRG9tICYmIGRlZmF1bHRzLnNEb20gPT09IFwibGZydGlwXCIgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdC8qIFNldCB0aGUgRE9NIHRvIHVzZSBhIGxheW91dCBzdWl0YWJsZSBmb3IgalF1ZXJ5IFVJJ3MgdGhlbWluZyAqL1xyXG5cdFx0XHRcdFx0b1NldHRpbmdzLnNEb20gPSAnPFwiSFwibGZyPnQ8XCJGXCJpcD4nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFx0aWYgKCAhIG9TZXR0aW5ncy5yZW5kZXJlciApIHtcclxuXHRcdFx0XHRcdG9TZXR0aW5ncy5yZW5kZXJlciA9ICdqcXVlcnl1aSc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKCAkLmlzUGxhaW5PYmplY3QoIG9TZXR0aW5ncy5yZW5kZXJlciApICYmICEgb1NldHRpbmdzLnJlbmRlcmVyLmhlYWRlciApIHtcclxuXHRcdFx0XHRcdG9TZXR0aW5ncy5yZW5kZXJlci5oZWFkZXIgPSAnanF1ZXJ5dWknO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkLmV4dGVuZCggb0NsYXNzZXMsIERhdGFUYWJsZS5leHQuY2xhc3Nlcywgb0luaXQub0NsYXNzZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQkdGhpcy5hZGRDbGFzcyggb0NsYXNzZXMuc1RhYmxlICk7XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0aWYgKCBvU2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQgPT09IHVuZGVmaW5lZCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvKiBEaXNwbGF5IHN0YXJ0IHBvaW50LCB0YWtpbmcgaW50byBhY2NvdW50IHRoZSBzYXZlIHNhdmluZyAqL1xyXG5cdFx0XHRcdG9TZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydCA9IG9Jbml0LmlEaXNwbGF5U3RhcnQ7XHJcblx0XHRcdFx0b1NldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gb0luaXQuaURpc3BsYXlTdGFydDtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aWYgKCBvSW5pdC5pRGVmZXJMb2FkaW5nICE9PSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG9TZXR0aW5ncy5iRGVmZXJMb2FkaW5nID0gdHJ1ZTtcclxuXHRcdFx0XHR2YXIgdG1wID0gJC5pc0FycmF5KCBvSW5pdC5pRGVmZXJMb2FkaW5nICk7XHJcblx0XHRcdFx0b1NldHRpbmdzLl9pUmVjb3Jkc0Rpc3BsYXkgPSB0bXAgPyBvSW5pdC5pRGVmZXJMb2FkaW5nWzBdIDogb0luaXQuaURlZmVyTG9hZGluZztcclxuXHRcdFx0XHRvU2V0dGluZ3MuX2lSZWNvcmRzVG90YWwgPSB0bXAgPyBvSW5pdC5pRGVmZXJMb2FkaW5nWzFdIDogb0luaXQuaURlZmVyTG9hZGluZztcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LyogTGFuZ3VhZ2UgZGVmaW5pdGlvbnMgKi9cclxuXHRcdFx0dmFyIG9MYW5ndWFnZSA9IG9TZXR0aW5ncy5vTGFuZ3VhZ2U7XHJcblx0XHRcdCQuZXh0ZW5kKCB0cnVlLCBvTGFuZ3VhZ2UsIG9Jbml0Lm9MYW5ndWFnZSApO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKCBvTGFuZ3VhZ2Uuc1VybCAhPT0gXCJcIiApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvKiBHZXQgdGhlIGxhbmd1YWdlIGRlZmluaXRpb25zIGZyb20gYSBmaWxlIC0gYmVjYXVzZSB0aGlzIEFqYXggY2FsbCBtYWtlcyB0aGUgbGFuZ3VhZ2VcclxuXHRcdFx0XHQgKiBnZXQgYXN5bmMgdG8gdGhlIHJlbWFpbmRlciBvZiB0aGlzIGZ1bmN0aW9uIHdlIHVzZSBiSW5pdEhhbmRlZE9mZiB0byBpbmRpY2F0ZSB0aGF0XHJcblx0XHRcdFx0ICogX2ZuSW5pdGlhbGlzZSB3aWxsIGJlIGZpcmVkIGJ5IHRoZSByZXR1cm5lZCBBamF4IGhhbmRsZXIsIHJhdGhlciB0aGFuIHRoZSBjb25zdHJ1Y3RvclxyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdCQuYWpheCgge1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRcdHVybDogb0xhbmd1YWdlLnNVcmwsXHJcblx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoIGpzb24gKSB7XHJcblx0XHRcdFx0XHRcdF9mbkxhbmd1YWdlQ29tcGF0KCBqc29uICk7XHJcblx0XHRcdFx0XHRcdF9mbkNhbWVsVG9IdW5nYXJpYW4oIGRlZmF1bHRzLm9MYW5ndWFnZSwganNvbiApO1xyXG5cdFx0XHRcdFx0XHQkLmV4dGVuZCggdHJ1ZSwgb0xhbmd1YWdlLCBqc29uICk7XHJcblx0XHRcdFx0XHRcdF9mbkluaXRpYWxpc2UoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdC8vIEVycm9yIG9jY3VycmVkIGxvYWRpbmcgbGFuZ3VhZ2UgZmlsZSwgY29udGludWUgb24gYXMgYmVzdCB3ZSBjYW5cclxuXHRcdFx0XHRcdFx0X2ZuSW5pdGlhbGlzZSggb1NldHRpbmdzICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdGJJbml0SGFuZGVkT2ZmID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LypcclxuXHRcdFx0ICogU3RyaXBlc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0aWYgKCBvSW5pdC5hc1N0cmlwZUNsYXNzZXMgPT09IG51bGwgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0b1NldHRpbmdzLmFzU3RyaXBlQ2xhc3NlcyA9W1xyXG5cdFx0XHRcdFx0b0NsYXNzZXMuc1N0cmlwZU9kZCxcclxuXHRcdFx0XHRcdG9DbGFzc2VzLnNTdHJpcGVFdmVuXHJcblx0XHRcdFx0XTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LyogUmVtb3ZlIHJvdyBzdHJpcGUgY2xhc3NlcyBpZiB0aGV5IGFyZSBhbHJlYWR5IG9uIHRoZSB0YWJsZSByb3cgKi9cclxuXHRcdFx0dmFyIHN0cmlwZUNsYXNzZXMgPSBvU2V0dGluZ3MuYXNTdHJpcGVDbGFzc2VzO1xyXG5cdFx0XHR2YXIgcm93T25lID0gJHRoaXMuY2hpbGRyZW4oJ3Rib2R5JykuZmluZCgndHInKS5lcSgwKTtcclxuXHRcdFx0aWYgKCAkLmluQXJyYXkoIHRydWUsICQubWFwKCBzdHJpcGVDbGFzc2VzLCBmdW5jdGlvbihlbCwgaSkge1xyXG5cdFx0XHRcdHJldHVybiByb3dPbmUuaGFzQ2xhc3MoZWwpO1xyXG5cdFx0XHR9ICkgKSAhPT0gLTEgKSB7XHJcblx0XHRcdFx0JCgndGJvZHkgdHInLCB0aGlzKS5yZW1vdmVDbGFzcyggc3RyaXBlQ2xhc3Nlcy5qb2luKCcgJykgKTtcclxuXHRcdFx0XHRvU2V0dGluZ3MuYXNEZXN0cm95U3RyaXBlcyA9IHN0cmlwZUNsYXNzZXMuc2xpY2UoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LypcclxuXHRcdFx0ICogQ29sdW1uc1xyXG5cdFx0XHQgKiBTZWUgaWYgd2Ugc2hvdWxkIGxvYWQgY29sdW1ucyBhdXRvbWF0aWNhbGx5IG9yIHVzZSBkZWZpbmVkIG9uZXNcclxuXHRcdFx0ICovXHJcblx0XHRcdHZhciBhblRocyA9IFtdO1xyXG5cdFx0XHR2YXIgYW9Db2x1bW5zSW5pdDtcclxuXHRcdFx0dmFyIG5UaGVhZCA9IHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RoZWFkJyk7XHJcblx0XHRcdGlmICggblRoZWFkLmxlbmd0aCAhPT0gMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRfZm5EZXRlY3RIZWFkZXIoIG9TZXR0aW5ncy5hb0hlYWRlciwgblRoZWFkWzBdICk7XHJcblx0XHRcdFx0YW5UaHMgPSBfZm5HZXRVbmlxdWVUaHMoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBJZiBub3QgZ2l2ZW4gYSBjb2x1bW4gYXJyYXksIGdlbmVyYXRlIG9uZSB3aXRoIG51bGxzICovXHJcblx0XHRcdGlmICggb0luaXQuYW9Db2x1bW5zID09PSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGFvQ29sdW1uc0luaXQgPSBbXTtcclxuXHRcdFx0XHRmb3IgKCBpPTAsIGlMZW49YW5UaHMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRhb0NvbHVtbnNJbml0LnB1c2goIG51bGwgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YW9Db2x1bW5zSW5pdCA9IG9Jbml0LmFvQ29sdW1ucztcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LyogQWRkIHRoZSBjb2x1bW5zICovXHJcblx0XHRcdGZvciAoIGk9MCwgaUxlbj1hb0NvbHVtbnNJbml0Lmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRfZm5BZGRDb2x1bW4oIG9TZXR0aW5ncywgYW5UaHMgPyBhblRoc1tpXSA6IG51bGwgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LyogQXBwbHkgdGhlIGNvbHVtbiBkZWZpbml0aW9ucyAqL1xyXG5cdFx0XHRfZm5BcHBseUNvbHVtbkRlZnMoIG9TZXR0aW5ncywgb0luaXQuYW9Db2x1bW5EZWZzLCBhb0NvbHVtbnNJbml0LCBmdW5jdGlvbiAoaUNvbCwgb0RlZikge1xyXG5cdFx0XHRcdF9mbkNvbHVtbk9wdGlvbnMoIG9TZXR0aW5ncywgaUNvbCwgb0RlZiApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBIVE1MNSBhdHRyaWJ1dGUgZGV0ZWN0aW9uIC0gYnVpbGQgYW4gbURhdGEgb2JqZWN0IGF1dG9tYXRpY2FsbHkgaWYgdGhlXHJcblx0XHRcdCAqIGF0dHJpYnV0ZXMgYXJlIGZvdW5kXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpZiAoIHJvd09uZS5sZW5ndGggKSB7XHJcblx0XHRcdFx0dmFyIGEgPSBmdW5jdGlvbiAoIGNlbGwsIG5hbWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gY2VsbC5nZXRBdHRyaWJ1dGUoICdkYXRhLScrbmFtZSApICE9PSBudWxsID8gbmFtZSA6IG51bGw7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdFx0JCggcm93T25lWzBdICkuY2hpbGRyZW4oJ3RoLCB0ZCcpLmVhY2goIGZ1bmN0aW9uIChpLCBjZWxsKSB7XHJcblx0XHRcdFx0XHR2YXIgY29sID0gb1NldHRpbmdzLmFvQ29sdW1uc1tpXTtcclxuXHRcdFx0XHJcblx0XHRcdFx0XHRpZiAoIGNvbC5tRGF0YSA9PT0gaSApIHtcclxuXHRcdFx0XHRcdFx0dmFyIHNvcnQgPSBhKCBjZWxsLCAnc29ydCcgKSB8fCBhKCBjZWxsLCAnb3JkZXInICk7XHJcblx0XHRcdFx0XHRcdHZhciBmaWx0ZXIgPSBhKCBjZWxsLCAnZmlsdGVyJyApIHx8IGEoIGNlbGwsICdzZWFyY2gnICk7XHJcblx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAoIHNvcnQgIT09IG51bGwgfHwgZmlsdGVyICE9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbC5tRGF0YSA9IHtcclxuXHRcdFx0XHRcdFx0XHRcdF86ICAgICAgaSsnLmRpc3BsYXknLFxyXG5cdFx0XHRcdFx0XHRcdFx0c29ydDogICBzb3J0ICE9PSBudWxsICAgPyBpKycuQGRhdGEtJytzb3J0ICAgOiB1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAgIHNvcnQgIT09IG51bGwgICA/IGkrJy5AZGF0YS0nK3NvcnQgICA6IHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0XHRcdGZpbHRlcjogZmlsdGVyICE9PSBudWxsID8gaSsnLkBkYXRhLScrZmlsdGVyIDogdW5kZWZpbmVkXHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0X2ZuQ29sdW1uT3B0aW9ucyggb1NldHRpbmdzLCBpICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHZhciBmZWF0dXJlcyA9IG9TZXR0aW5ncy5vRmVhdHVyZXM7XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBNdXN0IGJlIGRvbmUgYWZ0ZXIgZXZlcnl0aGluZyB3aGljaCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgc3RhdGUgc2F2aW5nISAqL1xyXG5cdFx0XHRpZiAoIG9Jbml0LmJTdGF0ZVNhdmUgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmVhdHVyZXMuYlN0YXRlU2F2ZSA9IHRydWU7XHJcblx0XHRcdFx0X2ZuTG9hZFN0YXRlKCBvU2V0dGluZ3MsIG9Jbml0ICk7XHJcblx0XHRcdFx0X2ZuQ2FsbGJhY2tSZWcoIG9TZXR0aW5ncywgJ2FvRHJhd0NhbGxiYWNrJywgX2ZuU2F2ZVN0YXRlLCAnc3RhdGVfc2F2ZScgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8qXHJcblx0XHRcdCAqIFNvcnRpbmdcclxuXHRcdFx0ICogQHRvZG8gRm9yIG1vZHVsYXJpc2F0aW9uICgxLjExKSB0aGlzIG5lZWRzIHRvIGRvIGludG8gYSBzb3J0IHN0YXJ0IHVwIGhhbmRsZXJcclxuXHRcdFx0ICovXHJcblx0XHRcdFxyXG5cdFx0XHQvLyBJZiBhYVNvcnRpbmcgaXMgbm90IGRlZmluZWQsIHRoZW4gd2UgdXNlIHRoZSBmaXJzdCBpbmRpY2F0b3IgaW4gYXNTb3J0aW5nXHJcblx0XHRcdC8vIGluIGNhc2UgdGhhdCBoYXMgYmVlbiBhbHRlcmVkLCBzbyB0aGUgZGVmYXVsdCBzb3J0IHJlZmxlY3RzIHRoYXQgb3B0aW9uXHJcblx0XHRcdGlmICggb0luaXQuYWFTb3J0aW5nID09PSB1bmRlZmluZWQgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIHNvcnRpbmcgPSBvU2V0dGluZ3MuYWFTb3J0aW5nO1xyXG5cdFx0XHRcdGZvciAoIGk9MCwgaUxlbj1zb3J0aW5nLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c29ydGluZ1tpXVsxXSA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbIGkgXS5hc1NvcnRpbmdbMF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBEbyBhIGZpcnN0IHBhc3Mgb24gdGhlIHNvcnRpbmcgY2xhc3NlcyAoYWxsb3dzIGFueSBzaXplIGNoYW5nZXMgdG8gYmUgdGFrZW4gaW50b1xyXG5cdFx0XHQgKiBhY2NvdW50LCBhbmQgYWxzbyB3aWxsIGFwcGx5IHNvcnRpbmcgZGlzYWJsZWQgY2xhc3NlcyBpZiBkaXNhYmxlZFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0X2ZuU29ydGluZ0NsYXNzZXMoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKCBmZWF0dXJlcy5iU29ydCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9EcmF3Q2FsbGJhY2snLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRpZiAoIG9TZXR0aW5ncy5iU29ydGVkICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgYVNvcnQgPSBfZm5Tb3J0RmxhdHRlbiggb1NldHRpbmdzICk7XHJcblx0XHRcdFx0XHRcdHZhciBzb3J0ZWRDb2x1bW5zID0ge307XHJcblx0XHRcdFxyXG5cdFx0XHRcdFx0XHQkLmVhY2goIGFTb3J0LCBmdW5jdGlvbiAoaSwgdmFsKSB7XHJcblx0XHRcdFx0XHRcdFx0c29ydGVkQ29sdW1uc1sgdmFsLnNyYyBdID0gdmFsLmRpcjtcclxuXHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcclxuXHRcdFx0XHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBvU2V0dGluZ3MsIG51bGwsICdvcmRlcicsIFtvU2V0dGluZ3MsIGFTb3J0LCBzb3J0ZWRDb2x1bW5zXSApO1xyXG5cdFx0XHRcdFx0XHRfZm5Tb3J0QXJpYSggb1NldHRpbmdzICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCAnYW9EcmF3Q2FsbGJhY2snLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKCBvU2V0dGluZ3MuYlNvcnRlZCB8fCBfZm5EYXRhU291cmNlKCBvU2V0dGluZ3MgKSA9PT0gJ3NzcCcgfHwgZmVhdHVyZXMuYkRlZmVyUmVuZGVyICkge1xyXG5cdFx0XHRcdFx0X2ZuU29ydGluZ0NsYXNzZXMoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgJ3NjJyApO1xyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8qXHJcblx0XHRcdCAqIEZpbmFsIGluaXRcclxuXHRcdFx0ICogQ2FjaGUgdGhlIGhlYWRlciwgYm9keSBhbmQgZm9vdGVyIGFzIHJlcXVpcmVkLCBjcmVhdGluZyB0aGVtIGlmIG5lZWRlZFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0XHJcblx0XHRcdC8vIFdvcmsgYXJvdW5kIGZvciBXZWJraXQgYnVnIDgzODY3IC0gc3RvcmUgdGhlIGNhcHRpb24tc2lkZSBiZWZvcmUgcmVtb3ZpbmcgZnJvbSBkb2NcclxuXHRcdFx0dmFyIGNhcHRpb25zID0gJHRoaXMuY2hpbGRyZW4oJ2NhcHRpb24nKS5lYWNoKCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dGhpcy5fY2FwdGlvblNpZGUgPSAkdGhpcy5jc3MoJ2NhcHRpb24tc2lkZScpO1xyXG5cdFx0XHR9ICk7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgdGhlYWQgPSAkdGhpcy5jaGlsZHJlbigndGhlYWQnKTtcclxuXHRcdFx0aWYgKCB0aGVhZC5sZW5ndGggPT09IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhlYWQgPSAkKCc8dGhlYWQvPicpLmFwcGVuZFRvKHRoaXMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdG9TZXR0aW5ncy5uVEhlYWQgPSB0aGVhZFswXTtcclxuXHRcdFx0XHJcblx0XHRcdHZhciB0Ym9keSA9ICR0aGlzLmNoaWxkcmVuKCd0Ym9keScpO1xyXG5cdFx0XHRpZiAoIHRib2R5Lmxlbmd0aCA9PT0gMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0Ym9keSA9ICQoJzx0Ym9keS8+JykuYXBwZW5kVG8odGhpcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0b1NldHRpbmdzLm5UQm9keSA9IHRib2R5WzBdO1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIHRmb290ID0gJHRoaXMuY2hpbGRyZW4oJ3Rmb290Jyk7XHJcblx0XHRcdGlmICggdGZvb3QubGVuZ3RoID09PSAwICYmIGNhcHRpb25zLmxlbmd0aCA+IDAgJiYgKG9TZXR0aW5ncy5vU2Nyb2xsLnNYICE9PSBcIlwiIHx8IG9TZXR0aW5ncy5vU2Nyb2xsLnNZICE9PSBcIlwiKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyBJZiB3ZSBhcmUgYSBzY3JvbGxpbmcgdGFibGUsIGFuZCBubyBmb290ZXIgaGFzIGJlZW4gZ2l2ZW4sIHRoZW4gd2UgbmVlZCB0byBjcmVhdGVcclxuXHRcdFx0XHQvLyBhIHRmb290IGVsZW1lbnQgZm9yIHRoZSBjYXB0aW9uIGVsZW1lbnQgdG8gYmUgYXBwZW5kZWQgdG9cclxuXHRcdFx0XHR0Zm9vdCA9ICQoJzx0Zm9vdC8+JykuYXBwZW5kVG8odGhpcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGlmICggdGZvb3QubGVuZ3RoID09PSAwIHx8IHRmb290LmNoaWxkcmVuKCkubGVuZ3RoID09PSAwICkge1xyXG5cdFx0XHRcdCR0aGlzLmFkZENsYXNzKCBvQ2xhc3Nlcy5zTm9Gb290ZXIgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggdGZvb3QubGVuZ3RoID4gMCApIHtcclxuXHRcdFx0XHRvU2V0dGluZ3MublRGb290ID0gdGZvb3RbMF07XHJcblx0XHRcdFx0X2ZuRGV0ZWN0SGVhZGVyKCBvU2V0dGluZ3MuYW9Gb290ZXIsIG9TZXR0aW5ncy5uVEZvb3QgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LyogQ2hlY2sgaWYgdGhlcmUgaXMgZGF0YSBwYXNzaW5nIGludG8gdGhlIGNvbnN0cnVjdG9yICovXHJcblx0XHRcdGlmICggb0luaXQuYWFEYXRhIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZvciAoIGk9MCA7IGk8b0luaXQuYWFEYXRhLmxlbmd0aCA7IGkrKyApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0X2ZuQWRkRGF0YSggb1NldHRpbmdzLCBvSW5pdC5hYURhdGFbIGkgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggb1NldHRpbmdzLmJEZWZlckxvYWRpbmcgfHwgX2ZuRGF0YVNvdXJjZSggb1NldHRpbmdzICkgPT0gJ2RvbScgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0LyogR3JhYiB0aGUgZGF0YSBmcm9tIHRoZSBwYWdlIC0gb25seSBkbyB0aGlzIHdoZW4gZGVmZXJyZWQgbG9hZGluZyBvciBubyBBamF4XHJcblx0XHRcdFx0ICogc291cmNlIHNpbmNlIHRoZXJlIGlzIG5vIHBvaW50IGluIHJlYWRpbmcgdGhlIERPTSBkYXRhIGlmIHdlIGFyZSB0aGVuIGdvaW5nXHJcblx0XHRcdFx0ICogdG8gcmVwbGFjZSBpdCB3aXRoIEFqYXggZGF0YVxyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdF9mbkFkZFRyKCBvU2V0dGluZ3MsICQob1NldHRpbmdzLm5UQm9keSkuY2hpbGRyZW4oJ3RyJykgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0LyogQ29weSB0aGUgZGF0YSBpbmRleCBhcnJheSAqL1xyXG5cdFx0XHRvU2V0dGluZ3MuYWlEaXNwbGF5ID0gb1NldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0LyogSW5pdGlhbGlzYXRpb24gY29tcGxldGUgLSB0YWJsZSBjYW4gYmUgZHJhd24gKi9cclxuXHRcdFx0b1NldHRpbmdzLmJJbml0aWFsaXNlZCA9IHRydWU7XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBDaGVjayBpZiB3ZSBuZWVkIHRvIGluaXRpYWxpc2UgdGhlIHRhYmxlIChpdCBtaWdodCBub3QgaGF2ZSBiZWVuIGhhbmRlZCBvZmYgdG8gdGhlXHJcblx0XHRcdCAqIGxhbmd1YWdlIHByb2Nlc3NvcilcclxuXHRcdFx0ICovXHJcblx0XHRcdGlmICggYkluaXRIYW5kZWRPZmYgPT09IGZhbHNlIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdF9mbkluaXRpYWxpc2UoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0XHRfdGhhdCA9IG51bGw7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRcclxuXHQvKlxyXG5cdCAqIEl0IGlzIHVzZWZ1bCB0byBoYXZlIHZhcmlhYmxlcyB3aGljaCBhcmUgc2NvcGVkIGxvY2FsbHkgc28gb25seSB0aGVcclxuXHQgKiBEYXRhVGFibGVzIGZ1bmN0aW9ucyBjYW4gYWNjZXNzIHRoZW0gYW5kIHRoZXkgZG9uJ3QgbGVhayBpbnRvIGdsb2JhbCBzcGFjZS5cclxuXHQgKiBBdCB0aGUgc2FtZSB0aW1lIHRoZXNlIGZ1bmN0aW9ucyBhcmUgb2Z0ZW4gdXNlZnVsIG92ZXIgbXVsdGlwbGUgZmlsZXMgaW4gdGhlXHJcblx0ICogY29yZSBhbmQgQVBJLCBzbyB3ZSBsaXN0LCBvciBhdCBsZWFzdCBkb2N1bWVudCwgYWxsIHZhcmlhYmxlcyB3aGljaCBhcmUgdXNlZFxyXG5cdCAqIGJ5IERhdGFUYWJsZXMgYXMgcHJpdmF0ZSB2YXJpYWJsZXMgaGVyZS4gVGhpcyBhbHNvIGVuc3VyZXMgdGhhdCB0aGVyZSBpcyBub1xyXG5cdCAqIGNsYXNoaW5nIG9mIHZhcmlhYmxlIG5hbWVzIGFuZCB0aGF0IHRoZXkgY2FuIGVhc2lseSByZWZlcmVuY2VkIGZvciByZXVzZS5cclxuXHQgKi9cclxuXHRcclxuXHRcclxuXHQvLyBEZWZpbmVkIGVsc2Ugd2hlcmVcclxuXHQvLyAgX3NlbGVjdG9yX3J1blxyXG5cdC8vICBfc2VsZWN0b3Jfb3B0c1xyXG5cdC8vICBfc2VsZWN0b3JfZmlyc3RcclxuXHQvLyAgX3NlbGVjdG9yX3Jvd19pbmRleGVzXHJcblx0XHJcblx0dmFyIF9leHQ7IC8vIERhdGFUYWJsZS5leHRcclxuXHR2YXIgX0FwaTsgLy8gRGF0YVRhYmxlLkFwaVxyXG5cdHZhciBfYXBpX3JlZ2lzdGVyOyAvLyBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyXHJcblx0dmFyIF9hcGlfcmVnaXN0ZXJQbHVyYWw7IC8vIERhdGFUYWJsZS5BcGkucmVnaXN0ZXJQbHVyYWxcclxuXHRcclxuXHR2YXIgX3JlX2RpYyA9IHt9O1xyXG5cdHZhciBfcmVfbmV3X2xpbmVzID0gL1tcXHJcXG5dL2c7XHJcblx0dmFyIF9yZV9odG1sID0gLzwuKj8+L2c7XHJcblx0dmFyIF9yZV9kYXRlX3N0YXJ0ID0gL15bXFx3XFwrXFwtXS87XHJcblx0dmFyIF9yZV9kYXRlX2VuZCA9IC9bXFx3XFwrXFwtXSQvO1xyXG5cdFxyXG5cdC8vIEVzY2FwZSByZWd1bGFyIGV4cHJlc3Npb24gc3BlY2lhbCBjaGFyYWN0ZXJzXHJcblx0dmFyIF9yZV9lc2NhcGVfcmVnZXggPSBuZXcgUmVnRXhwKCAnKFxcXFwnICsgWyAnLycsICcuJywgJyonLCAnKycsICc/JywgJ3wnLCAnKCcsICcpJywgJ1snLCAnXScsICd7JywgJ30nLCAnXFxcXCcsICckJywgJ14nLCAnLScgXS5qb2luKCd8XFxcXCcpICsgJyknLCAnZycgKTtcclxuXHRcclxuXHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ZvcmVpZ25fZXhjaGFuZ2VfbWFya2V0XHJcblx0Ly8gLSBcXHUyMEJEIC0gUnVzc2lhbiBydWJsZS5cclxuXHQvLyAtIFxcdTIwYTkgLSBTb3V0aCBLb3JlYW4gV29uXHJcblx0Ly8gLSBcXHUyMEJBIC0gVHVya2lzaCBMaXJhXHJcblx0Ly8gLSBcXHUyMEI5IC0gSW5kaWFuIFJ1cGVlXHJcblx0Ly8gLSBSIC0gQnJhemlsIChSJCkgYW5kIFNvdXRoIEFmcmljYVxyXG5cdC8vIC0gZnIgLSBTd2lzcyBGcmFuY1xyXG5cdC8vIC0ga3IgLSBTd2VkaXNoIGtyb25hLCBOb3J3ZWdpYW4ga3JvbmUgYW5kIERhbmlzaCBrcm9uZVxyXG5cdC8vIC0gXFx1MjAwOSBpcyB0aGluIHNwYWNlIGFuZCBcXHUyMDJGIGlzIG5hcnJvdyBuby1icmVhayBzcGFjZSwgYm90aCB1c2VkIGluIG1hbnlcclxuXHQvLyAgIHN0YW5kYXJkcyBhcyB0aG91c2FuZHMgc2VwYXJhdG9ycy5cclxuXHR2YXIgX3JlX2Zvcm1hdHRlZF9udW1lcmljID0gL1snLCTCo+KCrMKlJVxcdTIwMDlcXHUyMDJGXFx1MjBCRFxcdTIwYTlcXHUyMEJBcmZrXS9naTtcclxuXHRcclxuXHRcclxuXHR2YXIgX2VtcHR5ID0gZnVuY3Rpb24gKCBkICkge1xyXG5cdFx0cmV0dXJuICFkIHx8IGQgPT09IHRydWUgfHwgZCA9PT0gJy0nID8gdHJ1ZSA6IGZhbHNlO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0dmFyIF9pbnRWYWwgPSBmdW5jdGlvbiAoIHMgKSB7XHJcblx0XHR2YXIgaW50ZWdlciA9IHBhcnNlSW50KCBzLCAxMCApO1xyXG5cdFx0cmV0dXJuICFpc05hTihpbnRlZ2VyKSAmJiBpc0Zpbml0ZShzKSA/IGludGVnZXIgOiBudWxsO1xyXG5cdH07XHJcblx0XHJcblx0Ly8gQ29udmVydCBmcm9tIGEgZm9ybWF0dGVkIG51bWJlciB3aXRoIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBgLmAgYXMgdGhlXHJcblx0Ly8gZGVjaW1hbCBwbGFjZSwgdG8gYSBKYXZhc2NyaXB0IG51bWJlclxyXG5cdHZhciBfbnVtVG9EZWNpbWFsID0gZnVuY3Rpb24gKCBudW0sIGRlY2ltYWxQb2ludCApIHtcclxuXHRcdC8vIENhY2hlIGNyZWF0ZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQgYXMgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb2Z0ZW5cclxuXHRcdGlmICggISBfcmVfZGljWyBkZWNpbWFsUG9pbnQgXSApIHtcclxuXHRcdFx0X3JlX2RpY1sgZGVjaW1hbFBvaW50IF0gPSBuZXcgUmVnRXhwKCBfZm5Fc2NhcGVSZWdleCggZGVjaW1hbFBvaW50ICksICdnJyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHR5cGVvZiBudW0gPT09ICdzdHJpbmcnICYmIGRlY2ltYWxQb2ludCAhPT0gJy4nID9cclxuXHRcdFx0bnVtLnJlcGxhY2UoIC9cXC4vZywgJycgKS5yZXBsYWNlKCBfcmVfZGljWyBkZWNpbWFsUG9pbnQgXSwgJy4nICkgOlxyXG5cdFx0XHRudW07XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHR2YXIgX2lzTnVtYmVyID0gZnVuY3Rpb24gKCBkLCBkZWNpbWFsUG9pbnQsIGZvcm1hdHRlZCApIHtcclxuXHRcdHZhciBzdHJUeXBlID0gdHlwZW9mIGQgPT09ICdzdHJpbmcnO1xyXG5cdFxyXG5cdFx0Ly8gSWYgZW1wdHkgcmV0dXJuIGltbWVkaWF0ZWx5IHNvIHRoZXJlIG11c3QgYmUgYSBudW1iZXIgaWYgaXQgaXMgYVxyXG5cdFx0Ly8gZm9ybWF0dGVkIHN0cmluZyAodGhpcyBzdG9wcyB0aGUgc3RyaW5nIFwia1wiLCBvciBcImtyXCIsIGV0YyBiZWluZyBkZXRlY3RlZFxyXG5cdFx0Ly8gYXMgYSBmb3JtYXR0ZWQgbnVtYmVyIGZvciBjdXJyZW5jeVxyXG5cdFx0aWYgKCBfZW1wdHkoIGQgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGRlY2ltYWxQb2ludCAmJiBzdHJUeXBlICkge1xyXG5cdFx0XHRkID0gX251bVRvRGVjaW1hbCggZCwgZGVjaW1hbFBvaW50ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGZvcm1hdHRlZCAmJiBzdHJUeXBlICkge1xyXG5cdFx0XHRkID0gZC5yZXBsYWNlKCBfcmVfZm9ybWF0dGVkX251bWVyaWMsICcnICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gIWlzTmFOKCBwYXJzZUZsb2F0KGQpICkgJiYgaXNGaW5pdGUoIGQgKTtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdC8vIEEgc3RyaW5nIHdpdGhvdXQgSFRNTCBpbiBpdCBjYW4gYmUgY29uc2lkZXJlZCB0byBiZSBIVE1MIHN0aWxsXHJcblx0dmFyIF9pc0h0bWwgPSBmdW5jdGlvbiAoIGQgKSB7XHJcblx0XHRyZXR1cm4gX2VtcHR5KCBkICkgfHwgdHlwZW9mIGQgPT09ICdzdHJpbmcnO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0dmFyIF9odG1sTnVtZXJpYyA9IGZ1bmN0aW9uICggZCwgZGVjaW1hbFBvaW50LCBmb3JtYXR0ZWQgKSB7XHJcblx0XHRpZiAoIF9lbXB0eSggZCApICkge1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBodG1sID0gX2lzSHRtbCggZCApO1xyXG5cdFx0cmV0dXJuICEgaHRtbCA/XHJcblx0XHRcdG51bGwgOlxyXG5cdFx0XHRfaXNOdW1iZXIoIF9zdHJpcEh0bWwoIGQgKSwgZGVjaW1hbFBvaW50LCBmb3JtYXR0ZWQgKSA/XHJcblx0XHRcdFx0dHJ1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfcGx1Y2sgPSBmdW5jdGlvbiAoIGEsIHByb3AsIHByb3AyICkge1xyXG5cdFx0dmFyIG91dCA9IFtdO1xyXG5cdFx0dmFyIGk9MCwgaWVuPWEubGVuZ3RoO1xyXG5cdFxyXG5cdFx0Ly8gQ291bGQgaGF2ZSB0aGUgdGVzdCBpbiB0aGUgbG9vcCBmb3Igc2xpZ2h0bHkgc21hbGxlciBjb2RlLCBidXQgc3BlZWRcclxuXHRcdC8vIGlzIGVzc2VudGlhbCBoZXJlXHJcblx0XHRpZiAoIHByb3AyICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGZvciAoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBhW2ldICYmIGFbaV1bIHByb3AgXSApIHtcclxuXHRcdFx0XHRcdG91dC5wdXNoKCBhW2ldWyBwcm9wIF1bIHByb3AyIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRmb3IgKCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggYVtpXSApIHtcclxuXHRcdFx0XHRcdG91dC5wdXNoKCBhW2ldWyBwcm9wIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiBvdXQ7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHQvLyBCYXNpY2FsbHkgdGhlIHNhbWUgYXMgX3BsdWNrLCBidXQgcmF0aGVyIHRoYW4gbG9vcGluZyBvdmVyIGBhYCB3ZSB1c2UgYG9yZGVyYFxyXG5cdC8vIGFzIHRoZSBpbmRleGVzIHRvIHBpY2sgZnJvbSBgYWBcclxuXHR2YXIgX3BsdWNrX29yZGVyID0gZnVuY3Rpb24gKCBhLCBvcmRlciwgcHJvcCwgcHJvcDIgKVxyXG5cdHtcclxuXHRcdHZhciBvdXQgPSBbXTtcclxuXHRcdHZhciBpPTAsIGllbj1vcmRlci5sZW5ndGg7XHJcblx0XHJcblx0XHQvLyBDb3VsZCBoYXZlIHRoZSB0ZXN0IGluIHRoZSBsb29wIGZvciBzbGlnaHRseSBzbWFsbGVyIGNvZGUsIGJ1dCBzcGVlZFxyXG5cdFx0Ly8gaXMgZXNzZW50aWFsIGhlcmVcclxuXHRcdGlmICggcHJvcDIgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Zm9yICggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGFbIG9yZGVyW2ldIF1bIHByb3AgXSApIHtcclxuXHRcdFx0XHRcdG91dC5wdXNoKCBhWyBvcmRlcltpXSBdWyBwcm9wIF1bIHByb3AyIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRmb3IgKCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdG91dC5wdXNoKCBhWyBvcmRlcltpXSBdWyBwcm9wIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIG91dDtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfcmFuZ2UgPSBmdW5jdGlvbiAoIGxlbiwgc3RhcnQgKVxyXG5cdHtcclxuXHRcdHZhciBvdXQgPSBbXTtcclxuXHRcdHZhciBlbmQ7XHJcblx0XHJcblx0XHRpZiAoIHN0YXJ0ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHN0YXJ0ID0gMDtcclxuXHRcdFx0ZW5kID0gbGVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGVuZCA9IHN0YXJ0O1xyXG5cdFx0XHRzdGFydCA9IGxlbjtcclxuXHRcdH1cclxuXHRcclxuXHRcdGZvciAoIHZhciBpPXN0YXJ0IDsgaTxlbmQgOyBpKysgKSB7XHJcblx0XHRcdG91dC5wdXNoKCBpICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gb3V0O1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0dmFyIF9yZW1vdmVFbXB0eSA9IGZ1bmN0aW9uICggYSApXHJcblx0e1xyXG5cdFx0dmFyIG91dCA9IFtdO1xyXG5cdFxyXG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPWEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdGlmICggYVtpXSApIHsgLy8gY2FyZWZ1bCAtIHdpbGwgcmVtb3ZlIGFsbCBmYWxzeSB2YWx1ZXMhXHJcblx0XHRcdFx0b3V0LnB1c2goIGFbaV0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIG91dDtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfc3RyaXBIdG1sID0gZnVuY3Rpb24gKCBkICkge1xyXG5cdFx0cmV0dXJuIGQucmVwbGFjZSggX3JlX2h0bWwsICcnICk7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaW5kIHRoZSB1bmlxdWUgZWxlbWVudHMgaW4gYSBzb3VyY2UgYXJyYXkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gIHthcnJheX0gc3JjIFNvdXJjZSBhcnJheVxyXG5cdCAqIEByZXR1cm4ge2FycmF5fSBBcnJheSBvZiB1bmlxdWUgaXRlbXNcclxuXHQgKiBAaWdub3JlXHJcblx0ICovXHJcblx0dmFyIF91bmlxdWUgPSBmdW5jdGlvbiAoIHNyYyApXHJcblx0e1xyXG5cdFx0Ly8gQSBmYXN0ZXIgdW5pcXVlIG1ldGhvZCBpcyB0byB1c2Ugb2JqZWN0IGtleXMgdG8gaWRlbnRpZnkgdXNlZCB2YWx1ZXMsXHJcblx0XHQvLyBidXQgdGhpcyBkb2Vzbid0IHdvcmsgd2l0aCBhcnJheXMgb3Igb2JqZWN0cywgd2hpY2ggd2UgbXVzdCBhbHNvXHJcblx0XHQvLyBjb25zaWRlci4gU2VlIGpzcGVyZi5jb20vY29tcGFyZS1hcnJheS11bmlxdWUtdmVyc2lvbnMvNCBmb3IgbW9yZVxyXG5cdFx0Ly8gaW5mb3JtYXRpb24uXHJcblx0XHR2YXJcclxuXHRcdFx0b3V0ID0gW10sXHJcblx0XHRcdHZhbCxcclxuXHRcdFx0aSwgaWVuPXNyYy5sZW5ndGgsXHJcblx0XHRcdGosIGs9MDtcclxuXHRcclxuXHRcdGFnYWluOiBmb3IgKCBpPTAgOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0dmFsID0gc3JjW2ldO1xyXG5cdFxyXG5cdFx0XHRmb3IgKCBqPTAgOyBqPGsgOyBqKysgKSB7XHJcblx0XHRcdFx0aWYgKCBvdXRbal0gPT09IHZhbCApIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlIGFnYWluO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRvdXQucHVzaCggdmFsICk7XHJcblx0XHRcdGsrKztcclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiBvdXQ7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBEYXRhVGFibGVzIHV0aWxpdHkgbWV0aG9kc1xyXG5cdCAqIFxyXG5cdCAqIFRoaXMgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBtZXRob2RzIHRoYXQgRGF0YVRhYmxlcyB1c2VzIGludGVybmFsbHkgdG9cclxuXHQgKiBjcmVhdGUgYSBEYXRhVGFibGUsIGJ1dCB3aGljaCBhcmUgbm90IGV4Y2x1c2l2ZWx5IHVzZWQgb25seSBmb3IgRGF0YVRhYmxlcy5cclxuXHQgKiBUaGVzZSBtZXRob2RzIGNhbiBiZSB1c2VkIGJ5IGV4dGVuc2lvbiBhdXRob3JzIHRvIHNhdmUgdGhlIGR1cGxpY2F0aW9uIG9mXHJcblx0ICogY29kZS5cclxuXHQgKlxyXG5cdCAqICBAbmFtZXNwYWNlXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLnV0aWwgPSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFRocm90dGxlIHRoZSBjYWxscyB0byBhIGZ1bmN0aW9uLiBBcmd1bWVudHMgYW5kIGNvbnRleHQgYXJlIG1haW50YWluZWRcclxuXHRcdCAqIGZvciB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxyXG5cdFx0ICogQHBhcmFtIHtpbnRlZ2VyfSBmcmVxIENhbGwgZnJlcXVlbmN5IGluIG1TXHJcblx0XHQgKiBAcmV0dXJuIHtmdW5jdGlvbn0gV3JhcHBlZCBmdW5jdGlvblxyXG5cdFx0ICovXHJcblx0XHR0aHJvdHRsZTogZnVuY3Rpb24gKCBmbiwgZnJlcSApIHtcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0ZnJlcXVlbmN5ID0gZnJlcSAhPT0gdW5kZWZpbmVkID8gZnJlcSA6IDIwMCxcclxuXHRcdFx0XHRsYXN0LFxyXG5cdFx0XHRcdHRpbWVyO1xyXG5cdFxyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0dGhhdCA9IHRoaXMsXHJcblx0XHRcdFx0XHRub3cgID0gK25ldyBEYXRlKCksXHJcblx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzO1xyXG5cdFxyXG5cdFx0XHRcdGlmICggbGFzdCAmJiBub3cgPCBsYXN0ICsgZnJlcXVlbmN5ICkge1xyXG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lciApO1xyXG5cdFxyXG5cdFx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdGxhc3QgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdGZuLmFwcGx5KCB0aGF0LCBhcmdzICk7XHJcblx0XHRcdFx0XHR9LCBmcmVxdWVuY3kgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRsYXN0ID0gbm93O1xyXG5cdFx0XHRcdFx0Zm4uYXBwbHkoIHRoYXQsIGFyZ3MgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFc2NhcGUgYSBzdHJpbmcgc3VjaCB0aGF0IGl0IGNhbiBiZSB1c2VkIGluIGEgcmVndWxhciBleHByZXNzaW9uXHJcblx0XHQgKlxyXG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSB2YWwgc3RyaW5nIHRvIGVzY2FwZVxyXG5cdFx0ICogIEByZXR1cm5zIHtzdHJpbmd9IGVzY2FwZWQgc3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdGVzY2FwZVJlZ2V4OiBmdW5jdGlvbiAoIHZhbCApIHtcclxuXHRcdFx0cmV0dXJuIHZhbC5yZXBsYWNlKCBfcmVfZXNjYXBlX3JlZ2V4LCAnXFxcXCQxJyApO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIGEgbWFwcGluZyBvYmplY3QgdGhhdCBhbGxvd3MgY2FtZWwgY2FzZSBwYXJhbWV0ZXJzIHRvIGJlIGxvb2tlZCB1cFxyXG5cdCAqIGZvciB0aGVpciBIdW5nYXJpYW4gY291bnRlcnBhcnRzLiBUaGUgbWFwcGluZyBpcyBzdG9yZWQgaW4gYSBwcml2YXRlXHJcblx0ICogcGFyYW1ldGVyIGNhbGxlZCBgX2h1bmdhcmlhbk1hcGAgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1xyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5IdW5nYXJpYW5NYXAgKCBvIClcclxuXHR7XHJcblx0XHR2YXJcclxuXHRcdFx0aHVuZ2FyaWFuID0gJ2EgYWEgYWkgYW8gYXMgYiBmbiBpIG0gbyBzICcsXHJcblx0XHRcdG1hdGNoLFxyXG5cdFx0XHRuZXdLZXksXHJcblx0XHRcdG1hcCA9IHt9O1xyXG5cdFxyXG5cdFx0JC5lYWNoKCBvLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcclxuXHRcdFx0bWF0Y2ggPSBrZXkubWF0Y2goL14oW15BLVpdKz8pKFtBLVpdKS8pO1xyXG5cdFxyXG5cdFx0XHRpZiAoIG1hdGNoICYmIGh1bmdhcmlhbi5pbmRleE9mKG1hdGNoWzFdKycgJykgIT09IC0xIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5ld0tleSA9IGtleS5yZXBsYWNlKCBtYXRjaFswXSwgbWF0Y2hbMl0udG9Mb3dlckNhc2UoKSApO1xyXG5cdFx0XHRcdG1hcFsgbmV3S2V5IF0gPSBrZXk7XHJcblx0XHJcblx0XHRcdFx0aWYgKCBtYXRjaFsxXSA9PT0gJ28nIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRfZm5IdW5nYXJpYW5NYXAoIG9ba2V5XSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdFxyXG5cdFx0by5faHVuZ2FyaWFuTWFwID0gbWFwO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBDb252ZXJ0IGZyb20gY2FtZWwgY2FzZSBwYXJhbWV0ZXJzIHRvIEh1bmdhcmlhbiwgYmFzZWQgb24gYSBIdW5nYXJpYW4gbWFwXHJcblx0ICogY3JlYXRlZCBieSBfZm5IdW5nYXJpYW5NYXAuXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzcmMgVGhlIG1vZGVsIG9iamVjdCB3aGljaCBob2xkcyBhbGwgcGFyYW1ldGVycyB0aGF0IGNhbiBiZVxyXG5cdCAqICAgIG1hcHBlZC5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHVzZXIgVGhlIG9iamVjdCB0byBjb252ZXJ0IGZyb20gY2FtZWwgY2FzZSB0byBIdW5nYXJpYW4uXHJcblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2UgV2hlbiBzZXQgdG8gYHRydWVgLCBwcm9wZXJ0aWVzIHdoaWNoIGFscmVhZHkgaGF2ZSBhXHJcblx0ICogICAgSHVuZ2FyaWFuIHZhbHVlIGluIHRoZSBgdXNlcmAgb2JqZWN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uIE90aGVyd2lzZSB0aGV5XHJcblx0ICogICAgd29uJ3QgYmUuXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkNhbWVsVG9IdW5nYXJpYW4gKCBzcmMsIHVzZXIsIGZvcmNlIClcclxuXHR7XHJcblx0XHRpZiAoICEgc3JjLl9odW5nYXJpYW5NYXAgKSB7XHJcblx0XHRcdF9mbkh1bmdhcmlhbk1hcCggc3JjICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgaHVuZ2FyaWFuS2V5O1xyXG5cdFxyXG5cdFx0JC5lYWNoKCB1c2VyLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcclxuXHRcdFx0aHVuZ2FyaWFuS2V5ID0gc3JjLl9odW5nYXJpYW5NYXBbIGtleSBdO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGh1bmdhcmlhbktleSAhPT0gdW5kZWZpbmVkICYmIChmb3JjZSB8fCB1c2VyW2h1bmdhcmlhbktleV0gPT09IHVuZGVmaW5lZCkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly8gRm9yIG9iamVjdHMsIHdlIG5lZWQgdG8gYnV6eiBkb3duIGludG8gdGhlIG9iamVjdCB0byBjb3B5IHBhcmFtZXRlcnNcclxuXHRcdFx0XHRpZiAoIGh1bmdhcmlhbktleS5jaGFyQXQoMCkgPT09ICdvJyApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Ly8gQ29weSB0aGUgY2FtZWxDYXNlIG9wdGlvbnMgb3ZlciB0byB0aGUgaHVuZ2FyaWFuXHJcblx0XHRcdFx0XHRpZiAoICEgdXNlclsgaHVuZ2FyaWFuS2V5IF0gKSB7XHJcblx0XHRcdFx0XHRcdHVzZXJbIGh1bmdhcmlhbktleSBdID0ge307XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQkLmV4dGVuZCggdHJ1ZSwgdXNlcltodW5nYXJpYW5LZXldLCB1c2VyW2tleV0gKTtcclxuXHRcclxuXHRcdFx0XHRcdF9mbkNhbWVsVG9IdW5nYXJpYW4oIHNyY1todW5nYXJpYW5LZXldLCB1c2VyW2h1bmdhcmlhbktleV0sIGZvcmNlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0dXNlcltodW5nYXJpYW5LZXldID0gdXNlclsga2V5IF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIExhbmd1YWdlIGNvbXBhdGliaWxpdHkgLSB3aGVuIGNlcnRhaW4gb3B0aW9ucyBhcmUgZ2l2ZW4sIGFuZCBvdGhlcnMgYXJlbid0LCB3ZVxyXG5cdCAqIG5lZWQgdG8gZHVwbGljYXRlIHRoZSB2YWx1ZXMgb3ZlciwgaW4gb3JkZXIgdG8gcHJvdmlkZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxyXG5cdCAqIHdpdGggb2xkZXIgbGFuZ3VhZ2UgZmlsZXMuXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuTGFuZ3VhZ2VDb21wYXQoIGxhbmcgKVxyXG5cdHtcclxuXHRcdHZhciBkZWZhdWx0cyA9IERhdGFUYWJsZS5kZWZhdWx0cy5vTGFuZ3VhZ2U7XHJcblx0XHR2YXIgemVyb1JlY29yZHMgPSBsYW5nLnNaZXJvUmVjb3JkcztcclxuXHRcclxuXHRcdC8qIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IC0gaWYgdGhlcmUgaXMgbm8gc0VtcHR5VGFibGUgZ2l2ZW4sIHRoZW4gdXNlIHRoZSBzYW1lIGFzXHJcblx0XHQgKiBzWmVyb1JlY29yZHMgLSBhc3N1bWluZyB0aGF0IGlzIGdpdmVuLlxyXG5cdFx0ICovXHJcblx0XHRpZiAoICEgbGFuZy5zRW1wdHlUYWJsZSAmJiB6ZXJvUmVjb3JkcyAmJlxyXG5cdFx0XHRkZWZhdWx0cy5zRW1wdHlUYWJsZSA9PT0gXCJObyBkYXRhIGF2YWlsYWJsZSBpbiB0YWJsZVwiIClcclxuXHRcdHtcclxuXHRcdFx0X2ZuTWFwKCBsYW5nLCBsYW5nLCAnc1plcm9SZWNvcmRzJywgJ3NFbXB0eVRhYmxlJyApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyogTGlrZXdpc2Ugd2l0aCBsb2FkaW5nIHJlY29yZHMgKi9cclxuXHRcdGlmICggISBsYW5nLnNMb2FkaW5nUmVjb3JkcyAmJiB6ZXJvUmVjb3JkcyAmJlxyXG5cdFx0XHRkZWZhdWx0cy5zTG9hZGluZ1JlY29yZHMgPT09IFwiTG9hZGluZy4uLlwiIClcclxuXHRcdHtcclxuXHRcdFx0X2ZuTWFwKCBsYW5nLCBsYW5nLCAnc1plcm9SZWNvcmRzJywgJ3NMb2FkaW5nUmVjb3JkcycgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIE9sZCBwYXJhbWV0ZXIgbmFtZSBvZiB0aGUgdGhvdXNhbmRzIHNlcGFyYXRvciBtYXBwZWQgb250byB0aGUgbmV3XHJcblx0XHRpZiAoIGxhbmcuc0luZm9UaG91c2FuZHMgKSB7XHJcblx0XHRcdGxhbmcuc1Rob3VzYW5kcyA9IGxhbmcuc0luZm9UaG91c2FuZHM7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgZGVjaW1hbCA9IGxhbmcuc0RlY2ltYWw7XHJcblx0XHRpZiAoIGRlY2ltYWwgKSB7XHJcblx0XHRcdF9hZGROdW1lcmljU29ydCggZGVjaW1hbCApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBNYXAgb25lIHBhcmFtZXRlciBvbnRvIGFub3RoZXJcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG8gT2JqZWN0IHRvIG1hcFxyXG5cdCAqICBAcGFyYW0geyp9IGtuZXcgVGhlIG5ldyBwYXJhbWV0ZXIgbmFtZVxyXG5cdCAqICBAcGFyYW0geyp9IG9sZCBUaGUgb2xkIHBhcmFtZXRlciBuYW1lXHJcblx0ICovXHJcblx0dmFyIF9mbkNvbXBhdE1hcCA9IGZ1bmN0aW9uICggbywga25ldywgb2xkICkge1xyXG5cdFx0aWYgKCBvWyBrbmV3IF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0b1sgb2xkIF0gPSBvWyBrbmV3IF07XHJcblx0XHR9XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBQcm92aWRlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciB0aGUgbWFpbiBEVCBvcHRpb25zLiBOb3RlIHRoYXQgdGhlIG5ld1xyXG5cdCAqIG9wdGlvbnMgYXJlIG1hcHBlZCBvbnRvIHRoZSBvbGQgcGFyYW1ldGVycywgc28gdGhpcyBpcyBhbiBleHRlcm5hbCBpbnRlcmZhY2VcclxuXHQgKiBjaGFuZ2Ugb25seS5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IGluaXQgT2JqZWN0IHRvIG1hcFxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkNvbXBhdE9wdHMgKCBpbml0IClcclxuXHR7XHJcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlcmluZycsICAgICAgJ2JTb3J0JyApO1xyXG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJNdWx0aScsICAgICdiU29ydE11bHRpJyApO1xyXG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJDbGFzc2VzJywgICdiU29ydENsYXNzZXMnICk7XHJcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlckNlbGxzVG9wJywgJ2JTb3J0Q2VsbHNUb3AnICk7XHJcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlcicsICAgICAgICAgJ2FhU29ydGluZycgKTtcclxuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ29yZGVyRml4ZWQnLCAgICAnYWFTb3J0aW5nRml4ZWQnICk7XHJcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdwYWdpbmcnLCAgICAgICAgJ2JQYWdpbmF0ZScgKTtcclxuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ3BhZ2luZ1R5cGUnLCAgICAnc1BhZ2luYXRpb25UeXBlJyApO1xyXG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAncGFnZUxlbmd0aCcsICAgICdpRGlzcGxheUxlbmd0aCcgKTtcclxuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ3NlYXJjaGluZycsICAgICAnYkZpbHRlcicgKTtcclxuXHRcclxuXHRcdC8vIEJvb2xlYW4gaW5pdGlhbGlzYXRpb24gb2YgeC1zY3JvbGxpbmdcclxuXHRcdGlmICggdHlwZW9mIGluaXQuc1Njcm9sbFggPT09ICdib29sZWFuJyApIHtcclxuXHRcdFx0aW5pdC5zU2Nyb2xsWCA9IGluaXQuc1Njcm9sbFggPyAnMTAwJScgOiAnJztcclxuXHRcdH1cclxuXHRcdGlmICggdHlwZW9mIGluaXQuc2Nyb2xsWCA9PT0gJ2Jvb2xlYW4nICkge1xyXG5cdFx0XHRpbml0LnNjcm9sbFggPSBpbml0LnNjcm9sbFggPyAnMTAwJScgOiAnJztcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIENvbHVtbiBzZWFyY2ggb2JqZWN0cyBhcmUgaW4gYW4gYXJyYXksIHNvIGl0IG5lZWRzIHRvIGJlIGNvbnZlcnRlZFxyXG5cdFx0Ly8gZWxlbWVudCBieSBlbGVtZW50XHJcblx0XHR2YXIgc2VhcmNoQ29scyA9IGluaXQuYW9TZWFyY2hDb2xzO1xyXG5cdFxyXG5cdFx0aWYgKCBzZWFyY2hDb2xzICkge1xyXG5cdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49c2VhcmNoQ29scy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIHNlYXJjaENvbHNbaV0gKSB7XHJcblx0XHRcdFx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuKCBEYXRhVGFibGUubW9kZWxzLm9TZWFyY2gsIHNlYXJjaENvbHNbaV0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogUHJvdmlkZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgY29sdW1uIG9wdGlvbnMuIE5vdGUgdGhhdCB0aGUgbmV3IG9wdGlvbnNcclxuXHQgKiBhcmUgbWFwcGVkIG9udG8gdGhlIG9sZCBwYXJhbWV0ZXJzLCBzbyB0aGlzIGlzIGFuIGV4dGVybmFsIGludGVyZmFjZSBjaGFuZ2VcclxuXHQgKiBvbmx5LlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gaW5pdCBPYmplY3QgdG8gbWFwXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQ29tcGF0Q29scyAoIGluaXQgKVxyXG5cdHtcclxuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ29yZGVyYWJsZScsICAgICAnYlNvcnRhYmxlJyApO1xyXG5cdFx0X2ZuQ29tcGF0TWFwKCBpbml0LCAnb3JkZXJEYXRhJywgICAgICdhRGF0YVNvcnQnICk7XHJcblx0XHRfZm5Db21wYXRNYXAoIGluaXQsICdvcmRlclNlcXVlbmNlJywgJ2FzU29ydGluZycgKTtcclxuXHRcdF9mbkNvbXBhdE1hcCggaW5pdCwgJ29yZGVyRGF0YVR5cGUnLCAnc29ydERhdGFUeXBlJyApO1xyXG5cdFxyXG5cdFx0Ly8gb3JkZXJEYXRhIGNhbiBiZSBnaXZlbiBhcyBhbiBpbnRlZ2VyXHJcblx0XHR2YXIgZGF0YVNvcnQgPSBpbml0LmFEYXRhU29ydDtcclxuXHRcdGlmICggZGF0YVNvcnQgJiYgISAkLmlzQXJyYXkoIGRhdGFTb3J0ICkgKSB7XHJcblx0XHRcdGluaXQuYURhdGFTb3J0ID0gWyBkYXRhU29ydCBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBCcm93c2VyIGZlYXR1cmUgZGV0ZWN0aW9uIGZvciBjYXBhYmlsaXRpZXMsIHF1aXJrc1xyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQnJvd3NlckRldGVjdCggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gdGhpcyBldmVyeSB0aW1lIERhdGFUYWJsZXMgaXMgY29uc3RydWN0ZWQsIHRoZSB2YWx1ZXNcclxuXHRcdC8vIGNhbGN1bGF0ZWQgYXJlIHNwZWNpZmljIHRvIHRoZSBicm93c2VyIGFuZCBPUyBjb25maWd1cmF0aW9uIHdoaWNoIHdlXHJcblx0XHQvLyBkb24ndCBleHBlY3QgdG8gY2hhbmdlIGJldHdlZW4gaW5pdGlhbGlzYXRpb25zXHJcblx0XHRpZiAoICEgRGF0YVRhYmxlLl9fYnJvd3NlciApIHtcclxuXHRcdFx0dmFyIGJyb3dzZXIgPSB7fTtcclxuXHRcdFx0RGF0YVRhYmxlLl9fYnJvd3NlciA9IGJyb3dzZXI7XHJcblx0XHJcblx0XHRcdC8vIFNjcm9sbGluZyBmZWF0dXJlIC8gcXVpcmtzIGRldGVjdGlvblxyXG5cdFx0XHR2YXIgbiA9ICQoJzxkaXYvPicpXHJcblx0XHRcdFx0LmNzcygge1xyXG5cdFx0XHRcdFx0cG9zaXRpb246ICdmaXhlZCcsXHJcblx0XHRcdFx0XHR0b3A6IDAsXHJcblx0XHRcdFx0XHRsZWZ0OiAwLFxyXG5cdFx0XHRcdFx0aGVpZ2h0OiAxLFxyXG5cdFx0XHRcdFx0d2lkdGg6IDEsXHJcblx0XHRcdFx0XHRvdmVyZmxvdzogJ2hpZGRlbidcclxuXHRcdFx0XHR9IClcclxuXHRcdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdFx0JCgnPGRpdi8+JylcclxuXHRcdFx0XHRcdFx0LmNzcygge1xyXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG5cdFx0XHRcdFx0XHRcdHRvcDogMSxcclxuXHRcdFx0XHRcdFx0XHRsZWZ0OiAxLFxyXG5cdFx0XHRcdFx0XHRcdHdpZHRoOiAxMDAsXHJcblx0XHRcdFx0XHRcdFx0b3ZlcmZsb3c6ICdzY3JvbGwnXHJcblx0XHRcdFx0XHRcdH0gKVxyXG5cdFx0XHRcdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdFx0XHRcdCQoJzxkaXYvPicpXHJcblx0XHRcdFx0XHRcdFx0XHQuY3NzKCB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoOiAnMTAwJScsXHJcblx0XHRcdFx0XHRcdFx0XHRcdGhlaWdodDogMTBcclxuXHRcdFx0XHRcdFx0XHRcdH0gKVxyXG5cdFx0XHRcdFx0XHQpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHRcdC5hcHBlbmRUbyggJ2JvZHknICk7XHJcblx0XHJcblx0XHRcdHZhciBvdXRlciA9IG4uY2hpbGRyZW4oKTtcclxuXHRcdFx0dmFyIGlubmVyID0gb3V0ZXIuY2hpbGRyZW4oKTtcclxuXHRcclxuXHRcdFx0Ly8gTnVtYmVycyBiZWxvdywgaW4gb3JkZXIsIGFyZTpcclxuXHRcdFx0Ly8gaW5uZXIub2Zmc2V0V2lkdGgsIGlubmVyLmNsaWVudFdpZHRoLCBvdXRlci5vZmZzZXRXaWR0aCwgb3V0ZXIuY2xpZW50V2lkdGhcclxuXHRcdFx0Ly9cclxuXHRcdFx0Ly8gSUU2IFhQOiAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMCAxMDAgMTAwICA4M1xyXG5cdFx0XHQvLyBJRTcgVmlzdGE6ICAgICAgICAgICAgICAgICAgICAgICAgMTAwIDEwMCAxMDAgIDgzXHJcblx0XHRcdC8vIElFIDgrIFdpbmRvd3M6ICAgICAgICAgICAgICAgICAgICAgODMgIDgzIDEwMCAgODNcclxuXHRcdFx0Ly8gRXZlcmdyZWVuIFdpbmRvd3M6ICAgICAgICAgICAgICAgICA4MyAgODMgMTAwICA4M1xyXG5cdFx0XHQvLyBFdmVyZ3JlZW4gTWFjIHdpdGggc2Nyb2xsYmFyczogICAgIDg1ICA4NSAxMDAgIDg1XHJcblx0XHRcdC8vIEV2ZXJncmVlbiBNYWMgd2l0aG91dCBzY3JvbGxiYXJzOiAxMDAgMTAwIDEwMCAxMDBcclxuXHRcclxuXHRcdFx0Ly8gR2V0IHNjcm9sbGJhciB3aWR0aFxyXG5cdFx0XHRicm93c2VyLmJhcldpZHRoID0gb3V0ZXJbMF0ub2Zmc2V0V2lkdGggLSBvdXRlclswXS5jbGllbnRXaWR0aDtcclxuXHRcclxuXHRcdFx0Ly8gSUU2Lzcgd2lsbCBvdmVyc2l6ZSBhIHdpZHRoIDEwMCUgZWxlbWVudCBpbnNpZGUgYSBzY3JvbGxpbmcgZWxlbWVudCwgdG9cclxuXHRcdFx0Ly8gaW5jbHVkZSB0aGUgd2lkdGggb2YgdGhlIHNjcm9sbGJhciwgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZW5zdXJlIHRoZSBpbm5lclxyXG5cdFx0XHQvLyBlbGVtZW50IGlzIGNvbnRhaW5lZCB3aXRob3V0IGZvcmNpbmcgc2Nyb2xsaW5nXHJcblx0XHRcdGJyb3dzZXIuYlNjcm9sbE92ZXJzaXplID0gaW5uZXJbMF0ub2Zmc2V0V2lkdGggPT09IDEwMCAmJiBvdXRlclswXS5jbGllbnRXaWR0aCAhPT0gMTAwO1xyXG5cdFxyXG5cdFx0XHQvLyBJbiBydGwgdGV4dCBsYXlvdXQsIHNvbWUgYnJvd3NlcnMgKG1vc3QsIGJ1dCBub3QgYWxsKSB3aWxsIHBsYWNlIHRoZVxyXG5cdFx0XHQvLyBzY3JvbGxiYXIgb24gdGhlIGxlZnQsIHJhdGhlciB0aGFuIHRoZSByaWdodC5cclxuXHRcdFx0YnJvd3Nlci5iU2Nyb2xsYmFyTGVmdCA9IE1hdGgucm91bmQoIGlubmVyLm9mZnNldCgpLmxlZnQgKSAhPT0gMTtcclxuXHRcclxuXHRcdFx0Ly8gSUU4LSBkb24ndCBwcm92aWRlIGhlaWdodCBhbmQgd2lkdGggZm9yIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxyXG5cdFx0XHRicm93c2VyLmJCb3VuZGluZyA9IG5bMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggPyB0cnVlIDogZmFsc2U7XHJcblx0XHJcblx0XHRcdG4ucmVtb3ZlKCk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQkLmV4dGVuZCggc2V0dGluZ3Mub0Jyb3dzZXIsIERhdGFUYWJsZS5fX2Jyb3dzZXIgKTtcclxuXHRcdHNldHRpbmdzLm9TY3JvbGwuaUJhcldpZHRoID0gRGF0YVRhYmxlLl9fYnJvd3Nlci5iYXJXaWR0aDtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXJyYXkucHJvdG90eXBlIHJlZHVjZVtSaWdodF0gbWV0aG9kLCB1c2VkIGZvciBicm93c2VycyB3aGljaCBkb24ndCBzdXBwb3J0XHJcblx0ICogSlMgMS42LiBEb25lIHRoaXMgd2F5IHRvIHJlZHVjZSBjb2RlIHNpemUsIHNpbmNlIHdlIGl0ZXJhdGUgZWl0aGVyIHdheVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuUmVkdWNlICggdGhhdCwgZm4sIGluaXQsIHN0YXJ0LCBlbmQsIGluYyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdGkgPSBzdGFydCxcclxuXHRcdFx0dmFsdWUsXHJcblx0XHRcdGlzU2V0ID0gZmFsc2U7XHJcblx0XHJcblx0XHRpZiAoIGluaXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dmFsdWUgPSBpbml0O1xyXG5cdFx0XHRpc1NldCA9IHRydWU7XHJcblx0XHR9XHJcblx0XHJcblx0XHR3aGlsZSAoIGkgIT09IGVuZCApIHtcclxuXHRcdFx0aWYgKCAhIHRoYXQuaGFzT3duUHJvcGVydHkoaSkgKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0dmFsdWUgPSBpc1NldCA/XHJcblx0XHRcdFx0Zm4oIHZhbHVlLCB0aGF0W2ldLCBpLCB0aGF0ICkgOlxyXG5cdFx0XHRcdHRoYXRbaV07XHJcblx0XHJcblx0XHRcdGlzU2V0ID0gdHJ1ZTtcclxuXHRcdFx0aSArPSBpbmM7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZCBhIGNvbHVtbiB0byB0aGUgbGlzdCB1c2VkIGZvciB0aGUgdGFibGUgd2l0aCBkZWZhdWx0IHZhbHVlc1xyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7bm9kZX0gblRoIFRoZSB0aCBlbGVtZW50IGZvciB0aGlzIGNvbHVtblxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5BZGRDb2x1bW4oIG9TZXR0aW5ncywgblRoIClcclxuXHR7XHJcblx0XHQvLyBBZGQgY29sdW1uIHRvIGFvQ29sdW1ucyBhcnJheVxyXG5cdFx0dmFyIG9EZWZhdWx0cyA9IERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW47XHJcblx0XHR2YXIgaUNvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnMubGVuZ3RoO1xyXG5cdFx0dmFyIG9Db2wgPSAkLmV4dGVuZCgge30sIERhdGFUYWJsZS5tb2RlbHMub0NvbHVtbiwgb0RlZmF1bHRzLCB7XHJcblx0XHRcdFwiblRoXCI6IG5UaCA/IG5UaCA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyksXHJcblx0XHRcdFwic1RpdGxlXCI6ICAgIG9EZWZhdWx0cy5zVGl0bGUgICAgPyBvRGVmYXVsdHMuc1RpdGxlICAgIDogblRoID8gblRoLmlubmVySFRNTCA6ICcnLFxyXG5cdFx0XHRcImFEYXRhU29ydFwiOiBvRGVmYXVsdHMuYURhdGFTb3J0ID8gb0RlZmF1bHRzLmFEYXRhU29ydCA6IFtpQ29sXSxcclxuXHRcdFx0XCJtRGF0YVwiOiBvRGVmYXVsdHMubURhdGEgPyBvRGVmYXVsdHMubURhdGEgOiBpQ29sLFxyXG5cdFx0XHRpZHg6IGlDb2xcclxuXHRcdH0gKTtcclxuXHRcdG9TZXR0aW5ncy5hb0NvbHVtbnMucHVzaCggb0NvbCApO1xyXG5cdFxyXG5cdFx0Ly8gQWRkIHNlYXJjaCBvYmplY3QgZm9yIGNvbHVtbiBzcGVjaWZpYyBzZWFyY2guIE5vdGUgdGhhdCB0aGUgYHNlYXJjaENvbHNbIGlDb2wgXWBcclxuXHRcdC8vIHBhc3NlZCBpbnRvIGV4dGVuZCBjYW4gYmUgdW5kZWZpbmVkLiBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBnaXZlIGEgZGVmYXVsdFxyXG5cdFx0Ly8gd2l0aCBvbmx5IHNvbWUgb2YgdGhlIHBhcmFtZXRlcnMgZGVmaW5lZCwgYW5kIGFsc28gbm90IGdpdmUgYSBkZWZhdWx0XHJcblx0XHR2YXIgc2VhcmNoQ29scyA9IG9TZXR0aW5ncy5hb1ByZVNlYXJjaENvbHM7XHJcblx0XHRzZWFyY2hDb2xzWyBpQ29sIF0gPSAkLmV4dGVuZCgge30sIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaCwgc2VhcmNoQ29sc1sgaUNvbCBdICk7XHJcblx0XHJcblx0XHQvLyBVc2UgdGhlIGRlZmF1bHQgY29sdW1uIG9wdGlvbnMgZnVuY3Rpb24gdG8gaW5pdGlhbGlzZSBjbGFzc2VzIGV0Y1xyXG5cdFx0X2ZuQ29sdW1uT3B0aW9ucyggb1NldHRpbmdzLCBpQ29sLCAkKG5UaCkuZGF0YSgpICk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFwcGx5IG9wdGlvbnMgZm9yIGEgY29sdW1uXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtpbnR9IGlDb2wgY29sdW1uIGluZGV4IHRvIGNvbnNpZGVyXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvT3B0aW9ucyBvYmplY3Qgd2l0aCBzVHlwZSwgYlZpc2libGUgYW5kIGJTZWFyY2hhYmxlIGV0Y1xyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Db2x1bW5PcHRpb25zKCBvU2V0dGluZ3MsIGlDb2wsIG9PcHRpb25zIClcclxuXHR7XHJcblx0XHR2YXIgb0NvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbIGlDb2wgXTtcclxuXHRcdHZhciBvQ2xhc3NlcyA9IG9TZXR0aW5ncy5vQ2xhc3NlcztcclxuXHRcdHZhciB0aCA9ICQob0NvbC5uVGgpO1xyXG5cdFxyXG5cdFx0Ly8gVHJ5IHRvIGdldCB3aWR0aCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBET00uIFdlIGNhbid0IGdldCBpdCBmcm9tIENTU1xyXG5cdFx0Ly8gYXMgd2UnZCBuZWVkIHRvIHBhcnNlIHRoZSBDU1Mgc3R5bGVzaGVldC4gYHdpZHRoYCBvcHRpb24gY2FuIG92ZXJyaWRlXHJcblx0XHRpZiAoICEgb0NvbC5zV2lkdGhPcmlnICkge1xyXG5cdFx0XHQvLyBXaWR0aCBhdHRyaWJ1dGVcclxuXHRcdFx0b0NvbC5zV2lkdGhPcmlnID0gdGguYXR0cignd2lkdGgnKSB8fCBudWxsO1xyXG5cdFxyXG5cdFx0XHQvLyBTdHlsZSBhdHRyaWJ1dGVcclxuXHRcdFx0dmFyIHQgPSAodGguYXR0cignc3R5bGUnKSB8fCAnJykubWF0Y2goL3dpZHRoOlxccyooXFxkK1tweGVtJV0rKS8pO1xyXG5cdFx0XHRpZiAoIHQgKSB7XHJcblx0XHRcdFx0b0NvbC5zV2lkdGhPcmlnID0gdFsxXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyogVXNlciBzcGVjaWZpZWQgY29sdW1uIG9wdGlvbnMgKi9cclxuXHRcdGlmICggb09wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvT3B0aW9ucyAhPT0gbnVsbCApXHJcblx0XHR7XHJcblx0XHRcdC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcblx0XHRcdF9mbkNvbXBhdENvbHMoIG9PcHRpb25zICk7XHJcblx0XHJcblx0XHRcdC8vIE1hcCBjYW1lbCBjYXNlIHBhcmFtZXRlcnMgdG8gdGhlaXIgSHVuZ2FyaWFuIGNvdW50ZXJwYXJ0c1xyXG5cdFx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuKCBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLCBvT3B0aW9ucyApO1xyXG5cdFxyXG5cdFx0XHQvKiBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgbURhdGFQcm9wICovXHJcblx0XHRcdGlmICggb09wdGlvbnMubURhdGFQcm9wICE9PSB1bmRlZmluZWQgJiYgIW9PcHRpb25zLm1EYXRhIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG9PcHRpb25zLm1EYXRhID0gb09wdGlvbnMubURhdGFQcm9wO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdGlmICggb09wdGlvbnMuc1R5cGUgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0b0NvbC5fc01hbnVhbFR5cGUgPSBvT3B0aW9ucy5zVHlwZTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBgY2xhc3NgIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBKYXZhc2NyaXB0LCBzbyB3ZSBuZWVkIHRvIHByb3ZpZGVcclxuXHRcdFx0Ly8gdGhlIGFiaWxpdHkgdG8gdXNlIGEgdmFsaWQgbmFtZSBmb3IgdGhlIGNhbWVsIGNhc2UgaW5wdXRcclxuXHRcdFx0aWYgKCBvT3B0aW9ucy5jbGFzc05hbWUgJiYgISBvT3B0aW9ucy5zQ2xhc3MgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0b09wdGlvbnMuc0NsYXNzID0gb09wdGlvbnMuY2xhc3NOYW1lO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdCQuZXh0ZW5kKCBvQ29sLCBvT3B0aW9ucyApO1xyXG5cdFx0XHRfZm5NYXAoIG9Db2wsIG9PcHRpb25zLCBcInNXaWR0aFwiLCBcInNXaWR0aE9yaWdcIiApO1xyXG5cdFxyXG5cdFx0XHQvKiBpRGF0YVNvcnQgdG8gYmUgYXBwbGllZCAoYmFja3dhcmRzIGNvbXBhdGliaWxpdHkpLCBidXQgYURhdGFTb3J0IHdpbGwgdGFrZVxyXG5cdFx0XHQgKiBwcmlvcml0eSBpZiBkZWZpbmVkXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpZiAoIG9PcHRpb25zLmlEYXRhU29ydCAhPT0gdW5kZWZpbmVkIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG9Db2wuYURhdGFTb3J0ID0gWyBvT3B0aW9ucy5pRGF0YVNvcnQgXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRfZm5NYXAoIG9Db2wsIG9PcHRpb25zLCBcImFEYXRhU29ydFwiICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBDYWNoZSB0aGUgZGF0YSBnZXQgYW5kIHNldCBmdW5jdGlvbnMgZm9yIHNwZWVkICovXHJcblx0XHR2YXIgbURhdGFTcmMgPSBvQ29sLm1EYXRhO1xyXG5cdFx0dmFyIG1EYXRhID0gX2ZuR2V0T2JqZWN0RGF0YUZuKCBtRGF0YVNyYyApO1xyXG5cdFx0dmFyIG1SZW5kZXIgPSBvQ29sLm1SZW5kZXIgPyBfZm5HZXRPYmplY3REYXRhRm4oIG9Db2wubVJlbmRlciApIDogbnVsbDtcclxuXHRcclxuXHRcdHZhciBhdHRyVGVzdCA9IGZ1bmN0aW9uKCBzcmMgKSB7XHJcblx0XHRcdHJldHVybiB0eXBlb2Ygc3JjID09PSAnc3RyaW5nJyAmJiBzcmMuaW5kZXhPZignQCcpICE9PSAtMTtcclxuXHRcdH07XHJcblx0XHRvQ29sLl9iQXR0clNyYyA9ICQuaXNQbGFpbk9iamVjdCggbURhdGFTcmMgKSAmJiAoXHJcblx0XHRcdGF0dHJUZXN0KG1EYXRhU3JjLnNvcnQpIHx8IGF0dHJUZXN0KG1EYXRhU3JjLnR5cGUpIHx8IGF0dHJUZXN0KG1EYXRhU3JjLmZpbHRlcilcclxuXHRcdCk7XHJcblx0XHRvQ29sLl9zZXR0ZXIgPSBudWxsO1xyXG5cdFxyXG5cdFx0b0NvbC5mbkdldERhdGEgPSBmdW5jdGlvbiAocm93RGF0YSwgdHlwZSwgbWV0YSkge1xyXG5cdFx0XHR2YXIgaW5uZXJEYXRhID0gbURhdGEoIHJvd0RhdGEsIHR5cGUsIHVuZGVmaW5lZCwgbWV0YSApO1xyXG5cdFxyXG5cdFx0XHRyZXR1cm4gbVJlbmRlciAmJiB0eXBlID9cclxuXHRcdFx0XHRtUmVuZGVyKCBpbm5lckRhdGEsIHR5cGUsIHJvd0RhdGEsIG1ldGEgKSA6XHJcblx0XHRcdFx0aW5uZXJEYXRhO1xyXG5cdFx0fTtcclxuXHRcdG9Db2wuZm5TZXREYXRhID0gZnVuY3Rpb24gKCByb3dEYXRhLCB2YWwsIG1ldGEgKSB7XHJcblx0XHRcdHJldHVybiBfZm5TZXRPYmplY3REYXRhRm4oIG1EYXRhU3JjICkoIHJvd0RhdGEsIHZhbCwgbWV0YSApO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIEluZGljYXRlIGlmIERhdGFUYWJsZXMgc2hvdWxkIHJlYWQgRE9NIGRhdGEgYXMgYW4gb2JqZWN0IG9yIGFycmF5XHJcblx0XHQvLyBVc2VkIGluIF9mbkdldFJvd0VsZW1lbnRzXHJcblx0XHRpZiAoIHR5cGVvZiBtRGF0YVNyYyAhPT0gJ251bWJlcicgKSB7XHJcblx0XHRcdG9TZXR0aW5ncy5fcm93UmVhZE9iamVjdCA9IHRydWU7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBGZWF0dXJlIHNvcnRpbmcgb3ZlcnJpZGVzIGNvbHVtbiBzcGVjaWZpYyB3aGVuIG9mZiAqL1xyXG5cdFx0aWYgKCAhb1NldHRpbmdzLm9GZWF0dXJlcy5iU29ydCApXHJcblx0XHR7XHJcblx0XHRcdG9Db2wuYlNvcnRhYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoLmFkZENsYXNzKCBvQ2xhc3Nlcy5zU29ydGFibGVOb25lICk7IC8vIEhhdmUgdG8gYWRkIGNsYXNzIGhlcmUgYXMgb3JkZXIgZXZlbnQgaXNuJ3QgY2FsbGVkXHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBDaGVjayB0aGF0IHRoZSBjbGFzcyBhc3NpZ25tZW50IGlzIGNvcnJlY3QgZm9yIHNvcnRpbmcgKi9cclxuXHRcdHZhciBiQXNjID0gJC5pbkFycmF5KCdhc2MnLCBvQ29sLmFzU29ydGluZykgIT09IC0xO1xyXG5cdFx0dmFyIGJEZXNjID0gJC5pbkFycmF5KCdkZXNjJywgb0NvbC5hc1NvcnRpbmcpICE9PSAtMTtcclxuXHRcdGlmICggIW9Db2wuYlNvcnRhYmxlIHx8ICghYkFzYyAmJiAhYkRlc2MpIClcclxuXHRcdHtcclxuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzID0gb0NsYXNzZXMuc1NvcnRhYmxlTm9uZTtcclxuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzSlVJID0gXCJcIjtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBiQXNjICYmICFiRGVzYyApXHJcblx0XHR7XHJcblx0XHRcdG9Db2wuc1NvcnRpbmdDbGFzcyA9IG9DbGFzc2VzLnNTb3J0YWJsZUFzYztcclxuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzSlVJID0gb0NsYXNzZXMuc1NvcnRKVUlBc2NBbGxvd2VkO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoICFiQXNjICYmIGJEZXNjIClcclxuXHRcdHtcclxuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzID0gb0NsYXNzZXMuc1NvcnRhYmxlRGVzYztcclxuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzSlVJID0gb0NsYXNzZXMuc1NvcnRKVUlEZXNjQWxsb3dlZDtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0b0NvbC5zU29ydGluZ0NsYXNzID0gb0NsYXNzZXMuc1NvcnRhYmxlO1xyXG5cdFx0XHRvQ29sLnNTb3J0aW5nQ2xhc3NKVUkgPSBvQ2xhc3Nlcy5zU29ydEpVSTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWRqdXN0IHRoZSB0YWJsZSBjb2x1bW4gd2lkdGhzIGZvciBuZXcgZGF0YS4gTm90ZTogeW91IHdvdWxkIHByb2JhYmx5IHdhbnQgdG9cclxuXHQgKiBkbyBhIHJlZHJhdyBhZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24hXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5BZGp1c3RDb2x1bW5TaXppbmcgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0LyogTm90IGludGVyZXN0ZWQgaW4gZG9pbmcgY29sdW1uIHdpZHRoIGNhbGN1bGF0aW9uIGlmIGF1dG8td2lkdGggaXMgZGlzYWJsZWQgKi9cclxuXHRcdGlmICggc2V0dGluZ3Mub0ZlYXR1cmVzLmJBdXRvV2lkdGggIT09IGZhbHNlIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnM7XHJcblx0XHJcblx0XHRcdF9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyggc2V0dGluZ3MgKTtcclxuXHRcdFx0Zm9yICggdmFyIGk9MCAsIGlMZW49Y29sdW1ucy5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29sdW1uc1tpXS5uVGguc3R5bGUud2lkdGggPSBjb2x1bW5zW2ldLnNXaWR0aDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dmFyIHNjcm9sbCA9IHNldHRpbmdzLm9TY3JvbGw7XHJcblx0XHRpZiAoIHNjcm9sbC5zWSAhPT0gJycgfHwgc2Nyb2xsLnNYICE9PSAnJylcclxuXHRcdHtcclxuXHRcdFx0X2ZuU2Nyb2xsRHJhdyggc2V0dGluZ3MgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdjb2x1bW4tc2l6aW5nJywgW3NldHRpbmdzXSApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBDb3ZlcnQgdGhlIGluZGV4IG9mIGEgdmlzaWJsZSBjb2x1bW4gdG8gdGhlIGluZGV4IGluIHRoZSBkYXRhIGFycmF5ICh0YWtlIGFjY291bnRcclxuXHQgKiBvZiBoaWRkZW4gY29sdW1ucylcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge2ludH0gaU1hdGNoIFZpc2libGUgY29sdW1uIGluZGV4IHRvIGxvb2t1cFxyXG5cdCAqICBAcmV0dXJucyB7aW50fSBpIHRoZSBkYXRhIGluZGV4XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mblZpc2libGVUb0NvbHVtbkluZGV4KCBvU2V0dGluZ3MsIGlNYXRjaCApXHJcblx0e1xyXG5cdFx0dmFyIGFpVmlzID0gX2ZuR2V0Q29sdW1ucyggb1NldHRpbmdzLCAnYlZpc2libGUnICk7XHJcblx0XHJcblx0XHRyZXR1cm4gdHlwZW9mIGFpVmlzW2lNYXRjaF0gPT09ICdudW1iZXInID9cclxuXHRcdFx0YWlWaXNbaU1hdGNoXSA6XHJcblx0XHRcdG51bGw7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENvdmVydCB0aGUgaW5kZXggb2YgYW4gaW5kZXggaW4gdGhlIGRhdGEgYXJyYXkgYW5kIGNvbnZlcnQgaXQgdG8gdGhlIHZpc2libGVcclxuXHQgKiAgIGNvbHVtbiBpbmRleCAodGFrZSBhY2NvdW50IG9mIGhpZGRlbiBjb2x1bW5zKVxyXG5cdCAqICBAcGFyYW0ge2ludH0gaU1hdGNoIENvbHVtbiBpbmRleCB0byBsb29rdXBcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcmV0dXJucyB7aW50fSBpIHRoZSBkYXRhIGluZGV4XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkNvbHVtbkluZGV4VG9WaXNpYmxlKCBvU2V0dGluZ3MsIGlNYXRjaCApXHJcblx0e1xyXG5cdFx0dmFyIGFpVmlzID0gX2ZuR2V0Q29sdW1ucyggb1NldHRpbmdzLCAnYlZpc2libGUnICk7XHJcblx0XHR2YXIgaVBvcyA9ICQuaW5BcnJheSggaU1hdGNoLCBhaVZpcyApO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGlQb3MgIT09IC0xID8gaVBvcyA6IG51bGw7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEdldCB0aGUgbnVtYmVyIG9mIHZpc2libGUgY29sdW1uc1xyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEByZXR1cm5zIHtpbnR9IGkgdGhlIG51bWJlciBvZiB2aXNpYmxlIGNvbHVtbnNcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuVmlzYmxlQ29sdW1ucyggb1NldHRpbmdzIClcclxuXHR7XHJcblx0XHR2YXIgdmlzID0gMDtcclxuXHRcclxuXHRcdC8vIE5vIHJlZHVjZSBpbiBJRTgsIHVzZSBhIGxvb3AgZm9yIG5vd1xyXG5cdFx0JC5lYWNoKCBvU2V0dGluZ3MuYW9Db2x1bW5zLCBmdW5jdGlvbiAoIGksIGNvbCApIHtcclxuXHRcdFx0aWYgKCBjb2wuYlZpc2libGUgJiYgJChjb2wublRoKS5jc3MoJ2Rpc3BsYXknKSAhPT0gJ25vbmUnICkge1xyXG5cdFx0XHRcdHZpcysrO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHRyZXR1cm4gdmlzO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBHZXQgYW4gYXJyYXkgb2YgY29sdW1uIGluZGV4ZXMgdGhhdCBtYXRjaCBhIGdpdmVuIHByb3BlcnR5XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNQYXJhbSBQYXJhbWV0ZXIgaW4gYW9Db2x1bW5zIHRvIGxvb2sgZm9yIC0gdHlwaWNhbGx5XHJcblx0ICogICAgYlZpc2libGUgb3IgYlNlYXJjaGFibGVcclxuXHQgKiAgQHJldHVybnMge2FycmF5fSBBcnJheSBvZiBpbmRleGVzIHdpdGggbWF0Y2hlZCBwcm9wZXJ0aWVzXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkdldENvbHVtbnMoIG9TZXR0aW5ncywgc1BhcmFtIClcclxuXHR7XHJcblx0XHR2YXIgYSA9IFtdO1xyXG5cdFxyXG5cdFx0JC5tYXAoIG9TZXR0aW5ncy5hb0NvbHVtbnMsIGZ1bmN0aW9uKHZhbCwgaSkge1xyXG5cdFx0XHRpZiAoIHZhbFtzUGFyYW1dICkge1xyXG5cdFx0XHRcdGEucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHRyZXR1cm4gYTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ2FsY3VsYXRlIHRoZSAndHlwZScgb2YgYSBjb2x1bW5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkNvbHVtblR5cGVzICggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xyXG5cdFx0dmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XHJcblx0XHR2YXIgdHlwZXMgPSBEYXRhVGFibGUuZXh0LnR5cGUuZGV0ZWN0O1xyXG5cdFx0dmFyIGksIGllbiwgaiwgamVuLCBrLCBrZW47XHJcblx0XHR2YXIgY29sLCBjZWxsLCBkZXRlY3RlZFR5cGUsIGNhY2hlO1xyXG5cdFxyXG5cdFx0Ly8gRm9yIGVhY2ggY29sdW1uLCBzcGluIG92ZXIgdGhlIFxyXG5cdFx0Zm9yICggaT0wLCBpZW49Y29sdW1ucy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0Y29sID0gY29sdW1uc1tpXTtcclxuXHRcdFx0Y2FjaGUgPSBbXTtcclxuXHRcclxuXHRcdFx0aWYgKCAhIGNvbC5zVHlwZSAmJiBjb2wuX3NNYW51YWxUeXBlICkge1xyXG5cdFx0XHRcdGNvbC5zVHlwZSA9IGNvbC5fc01hbnVhbFR5cGU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoICEgY29sLnNUeXBlICkge1xyXG5cdFx0XHRcdGZvciAoIGo9MCwgamVuPXR5cGVzLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xyXG5cdFx0XHRcdFx0Zm9yICggaz0wLCBrZW49ZGF0YS5sZW5ndGggOyBrPGtlbiA7IGsrKyApIHtcclxuXHRcdFx0XHRcdFx0Ly8gVXNlIGEgY2FjaGUgYXJyYXkgc28gd2Ugb25seSBuZWVkIHRvIGdldCB0aGUgdHlwZSBkYXRhXHJcblx0XHRcdFx0XHRcdC8vIGZyb20gdGhlIGZvcm1hdHRlciBvbmNlICh3aGVuIHVzaW5nIG11bHRpcGxlIGRldGVjdG9ycylcclxuXHRcdFx0XHRcdFx0aWYgKCBjYWNoZVtrXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRcdGNhY2hlW2tdID0gX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCBrLCBpLCAndHlwZScgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0XHRkZXRlY3RlZFR5cGUgPSB0eXBlc1tqXSggY2FjaGVba10sIHNldHRpbmdzICk7XHJcblx0XHJcblx0XHRcdFx0XHRcdC8vIElmIG51bGwsIHRoZW4gdGhpcyB0eXBlIGNhbid0IGFwcGx5IHRvIHRoaXMgY29sdW1uLCBzb1xyXG5cdFx0XHRcdFx0XHQvLyByYXRoZXIgdGhhbiB0ZXN0aW5nIGFsbCBjZWxscywgYnJlYWsgb3V0LiBUaGVyZSBpcyBhblxyXG5cdFx0XHRcdFx0XHQvLyBleGNlcHRpb24gZm9yIHRoZSBsYXN0IHR5cGUgd2hpY2ggaXMgYGh0bWxgLiBXZSBuZWVkIHRvXHJcblx0XHRcdFx0XHRcdC8vIHNjYW4gYWxsIHJvd3Mgc2luY2UgaXQgaXMgcG9zc2libGUgdG8gbWl4IHN0cmluZyBhbmQgSFRNTFxyXG5cdFx0XHRcdFx0XHQvLyB0eXBlc1xyXG5cdFx0XHRcdFx0XHRpZiAoICEgZGV0ZWN0ZWRUeXBlICYmIGogIT09IHR5cGVzLmxlbmd0aC0xICkge1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRcdC8vIE9ubHkgYSBzaW5nbGUgbWF0Y2ggaXMgbmVlZGVkIGZvciBodG1sIHR5cGUgc2luY2UgaXQgaXNcclxuXHRcdFx0XHRcdFx0Ly8gYm90dG9tIG9mIHRoZSBwaWxlIGFuZCB2ZXJ5IHNpbWlsYXIgdG8gc3RyaW5nXHJcblx0XHRcdFx0XHRcdGlmICggZGV0ZWN0ZWRUeXBlID09PSAnaHRtbCcgKSB7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRcdC8vIFR5cGUgaXMgdmFsaWQgZm9yIGFsbCBkYXRhIHBvaW50cyBpbiB0aGUgY29sdW1uIC0gdXNlIHRoaXNcclxuXHRcdFx0XHRcdC8vIHR5cGVcclxuXHRcdFx0XHRcdGlmICggZGV0ZWN0ZWRUeXBlICkge1xyXG5cdFx0XHRcdFx0XHRjb2wuc1R5cGUgPSBkZXRlY3RlZFR5cGU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHQvLyBGYWxsIGJhY2sgLSBpZiBubyB0eXBlIHdhcyBkZXRlY3RlZCwgYWx3YXlzIHVzZSBzdHJpbmdcclxuXHRcdFx0XHRpZiAoICEgY29sLnNUeXBlICkge1xyXG5cdFx0XHRcdFx0Y29sLnNUeXBlID0gJ3N0cmluZyc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRha2UgdGhlIGNvbHVtbiBkZWZpbml0aW9ucyBhbmQgc3RhdGljIGNvbHVtbnMgYXJyYXlzIGFuZCBjYWxjdWxhdGUgaG93XHJcblx0ICogdGhleSByZWxhdGUgdG8gY29sdW1uIGluZGV4ZXMuIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIHRoZW4gYXBwbHkgdGhlXHJcblx0ICogZGVmaW5pdGlvbiBmb3VuZCBmb3IgYSBjb2x1bW4gdG8gYSBzdWl0YWJsZSBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge2FycmF5fSBhb0NvbERlZnMgVGhlIGFvQ29sdW1uRGVmcyBhcnJheSB0aGF0IGlzIHRvIGJlIGFwcGxpZWRcclxuXHQgKiAgQHBhcmFtIHthcnJheX0gYW9Db2xzIFRoZSBhb0NvbHVtbnMgYXJyYXkgdGhhdCBkZWZpbmVzIGNvbHVtbnMgaW5kaXZpZHVhbGx5XHJcblx0ICogIEBwYXJhbSB7ZnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uIC0gdGFrZXMgdHdvIHBhcmFtZXRlcnMsIHRoZSBjYWxjdWxhdGVkXHJcblx0ICogICAgY29sdW1uIGluZGV4IGFuZCB0aGUgZGVmaW5pdGlvbiBmb3IgdGhhdCBjb2x1bW4uXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkFwcGx5Q29sdW1uRGVmcyggb1NldHRpbmdzLCBhb0NvbERlZnMsIGFvQ29scywgZm4gKVxyXG5cdHtcclxuXHRcdHZhciBpLCBpTGVuLCBqLCBqTGVuLCBrLCBrTGVuLCBkZWY7XHJcblx0XHR2YXIgY29sdW1ucyA9IG9TZXR0aW5ncy5hb0NvbHVtbnM7XHJcblx0XHJcblx0XHQvLyBDb2x1bW4gZGVmaW5pdGlvbnMgd2l0aCBhVGFyZ2V0c1xyXG5cdFx0aWYgKCBhb0NvbERlZnMgKVxyXG5cdFx0e1xyXG5cdFx0XHQvKiBMb29wIG92ZXIgdGhlIGRlZmluaXRpb25zIGFycmF5IC0gbG9vcCBpbiByZXZlcnNlIHNvIGZpcnN0IGluc3RhbmNlIGhhcyBwcmlvcml0eSAqL1xyXG5cdFx0XHRmb3IgKCBpPWFvQ29sRGVmcy5sZW5ndGgtMSA7IGk+PTAgOyBpLS0gKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGVmID0gYW9Db2xEZWZzW2ldO1xyXG5cdFxyXG5cdFx0XHRcdC8qIEVhY2ggZGVmaW5pdGlvbiBjYW4gdGFyZ2V0IG11bHRpcGxlIGNvbHVtbnMsIGFzIGl0IGlzIGFuIGFycmF5ICovXHJcblx0XHRcdFx0dmFyIGFUYXJnZXRzID0gZGVmLnRhcmdldHMgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0XHRkZWYudGFyZ2V0cyA6XHJcblx0XHRcdFx0XHRkZWYuYVRhcmdldHM7XHJcblx0XHJcblx0XHRcdFx0aWYgKCAhICQuaXNBcnJheSggYVRhcmdldHMgKSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YVRhcmdldHMgPSBbIGFUYXJnZXRzIF07XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdGZvciAoIGo9MCwgakxlbj1hVGFyZ2V0cy5sZW5ndGggOyBqPGpMZW4gOyBqKysgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmICggdHlwZW9mIGFUYXJnZXRzW2pdID09PSAnbnVtYmVyJyAmJiBhVGFyZ2V0c1tqXSA+PSAwIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0LyogQWRkIGNvbHVtbnMgdGhhdCB3ZSBkb24ndCB5ZXQga25vdyBhYm91dCAqL1xyXG5cdFx0XHRcdFx0XHR3aGlsZSggY29sdW1ucy5sZW5ndGggPD0gYVRhcmdldHNbal0gKVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0X2ZuQWRkQ29sdW1uKCBvU2V0dGluZ3MgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0XHQvKiBJbnRlZ2VyLCBiYXNpYyBpbmRleCAqL1xyXG5cdFx0XHRcdFx0XHRmbiggYVRhcmdldHNbal0sIGRlZiApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiAoIHR5cGVvZiBhVGFyZ2V0c1tqXSA9PT0gJ251bWJlcicgJiYgYVRhcmdldHNbal0gPCAwIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0LyogTmVnYXRpdmUgaW50ZWdlciwgcmlnaHQgdG8gbGVmdCBjb2x1bW4gY291bnRpbmcgKi9cclxuXHRcdFx0XHRcdFx0Zm4oIGNvbHVtbnMubGVuZ3RoK2FUYXJnZXRzW2pdLCBkZWYgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYgKCB0eXBlb2YgYVRhcmdldHNbal0gPT09ICdzdHJpbmcnIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0LyogQ2xhc3MgbmFtZSBtYXRjaGluZyBvbiBUSCBlbGVtZW50ICovXHJcblx0XHRcdFx0XHRcdGZvciAoIGs9MCwga0xlbj1jb2x1bW5zLmxlbmd0aCA7IGs8a0xlbiA7IGsrKyApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGFUYXJnZXRzW2pdID09IFwiX2FsbFwiIHx8XHJcblx0XHRcdFx0XHRcdFx0ICAgICAkKGNvbHVtbnNba10ublRoKS5oYXNDbGFzcyggYVRhcmdldHNbal0gKSApXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm4oIGssIGRlZiApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gU3RhdGljYWxseSBkZWZpbmVkIGNvbHVtbnMgYXJyYXlcclxuXHRcdGlmICggYW9Db2xzIClcclxuXHRcdHtcclxuXHRcdFx0Zm9yICggaT0wLCBpTGVuPWFvQ29scy5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zm4oIGksIGFvQ29sc1tpXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZCBhIGRhdGEgYXJyYXkgdG8gdGhlIHRhYmxlLCBjcmVhdGluZyBET00gbm9kZSBldGMuIFRoaXMgaXMgdGhlIHBhcmFsbGVsIHRvXHJcblx0ICogX2ZuR2F0aGVyRGF0YSwgYnV0IGZvciBhZGRpbmcgcm93cyBmcm9tIGEgSmF2YXNjcmlwdCBzb3VyY2UsIHJhdGhlciB0aGFuIGFcclxuXHQgKiBET00gc291cmNlLlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7YXJyYXl9IGFEYXRhIGRhdGEgYXJyYXkgdG8gYmUgYWRkZWRcclxuXHQgKiAgQHBhcmFtIHtub2RlfSBbblRyXSBUUiBlbGVtZW50IHRvIGFkZCB0byB0aGUgdGFibGUgLSBvcHRpb25hbC4gSWYgbm90IGdpdmVuLFxyXG5cdCAqICAgIERhdGFUYWJsZXMgd2lsbCBjcmVhdGUgYSByb3cgYXV0b21hdGljYWxseVxyXG5cdCAqICBAcGFyYW0ge2FycmF5fSBbYW5UZHNdIEFycmF5IG9mIFREfFRIIGVsZW1lbnRzIGZvciB0aGUgcm93IC0gbXVzdCBiZSBnaXZlblxyXG5cdCAqICAgIGlmIG5UciBpcy5cclxuXHQgKiAgQHJldHVybnMge2ludH0gPj0wIGlmIHN1Y2Nlc3NmdWwgKGluZGV4IG9mIG5ldyBhb0RhdGEgZW50cnkpLCAtMSBpZiBmYWlsZWRcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQWRkRGF0YSAoIG9TZXR0aW5ncywgYURhdGFJbiwgblRyLCBhblRkcyApXHJcblx0e1xyXG5cdFx0LyogQ3JlYXRlIHRoZSBvYmplY3QgZm9yIHN0b3JpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBuZXcgcm93ICovXHJcblx0XHR2YXIgaVJvdyA9IG9TZXR0aW5ncy5hb0RhdGEubGVuZ3RoO1xyXG5cdFx0dmFyIG9EYXRhID0gJC5leHRlbmQoIHRydWUsIHt9LCBEYXRhVGFibGUubW9kZWxzLm9Sb3csIHtcclxuXHRcdFx0c3JjOiBuVHIgPyAnZG9tJyA6ICdkYXRhJyxcclxuXHRcdFx0aWR4OiBpUm93XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHRvRGF0YS5fYURhdGEgPSBhRGF0YUluO1xyXG5cdFx0b1NldHRpbmdzLmFvRGF0YS5wdXNoKCBvRGF0YSApO1xyXG5cdFxyXG5cdFx0LyogQ3JlYXRlIHRoZSBjZWxscyAqL1xyXG5cdFx0dmFyIG5UZCwgc1RoaXNUeXBlO1xyXG5cdFx0dmFyIGNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zO1xyXG5cdFxyXG5cdFx0Ly8gSW52YWxpZGF0ZSB0aGUgY29sdW1uIHR5cGVzIGFzIHRoZSBuZXcgZGF0YSBuZWVkcyB0byBiZSByZXZhbGlkYXRlZFxyXG5cdFx0Zm9yICggdmFyIGk9MCwgaUxlbj1jb2x1bW5zLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHR7XHJcblx0XHRcdGNvbHVtbnNbaV0uc1R5cGUgPSBudWxsO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyogQWRkIHRvIHRoZSBkaXNwbGF5IGFycmF5ICovXHJcblx0XHRvU2V0dGluZ3MuYWlEaXNwbGF5TWFzdGVyLnB1c2goIGlSb3cgKTtcclxuXHRcclxuXHRcdHZhciBpZCA9IG9TZXR0aW5ncy5yb3dJZEZuKCBhRGF0YUluICk7XHJcblx0XHRpZiAoIGlkICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdG9TZXR0aW5ncy5hSWRzWyBpZCBdID0gb0RhdGE7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBDcmVhdGUgdGhlIERPTSBpbmZvcm1hdGlvbiwgb3IgcmVnaXN0ZXIgaXQgaWYgYWxyZWFkeSBwcmVzZW50ICovXHJcblx0XHRpZiAoIG5UciB8fCAhIG9TZXR0aW5ncy5vRmVhdHVyZXMuYkRlZmVyUmVuZGVyIClcclxuXHRcdHtcclxuXHRcdFx0X2ZuQ3JlYXRlVHIoIG9TZXR0aW5ncywgaVJvdywgblRyLCBhblRkcyApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIGlSb3c7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZCBvbmUgb3IgbW9yZSBUUiBlbGVtZW50cyB0byB0aGUgdGFibGUuIEdlbmVyYWxseSB3ZSdkIGV4cGVjdCB0b1xyXG5cdCAqIHVzZSB0aGlzIGZvciByZWFkaW5nIGRhdGEgZnJvbSBhIERPTSBzb3VyY2VkIHRhYmxlLCBidXQgaXQgY291bGQgYmVcclxuXHQgKiB1c2VkIGZvciBhbiBUUiBlbGVtZW50LiBOb3RlIHRoYXQgaWYgYSBUUiBpcyBnaXZlbiwgaXQgaXMgdXNlZCAoaS5lLlxyXG5cdCAqIGl0IGlzIG5vdCBjbG9uZWQpLlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHthcnJheXxub2RlfGpRdWVyeX0gdHJzIFRoZSBUUiBlbGVtZW50KHMpIHRvIGFkZCB0byB0aGUgdGFibGVcclxuXHQgKiAgQHJldHVybnMge2FycmF5fSBBcnJheSBvZiBpbmRleGVzIGZvciB0aGUgYWRkZWQgcm93c1xyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5BZGRUciggc2V0dGluZ3MsIHRycyApXHJcblx0e1xyXG5cdFx0dmFyIHJvdztcclxuXHRcclxuXHRcdC8vIEFsbG93IGFuIGluZGl2aWR1YWwgbm9kZSB0byBiZSBwYXNzZWQgaW5cclxuXHRcdGlmICggISAodHJzIGluc3RhbmNlb2YgJCkgKSB7XHJcblx0XHRcdHRycyA9ICQodHJzKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiB0cnMubWFwKCBmdW5jdGlvbiAoaSwgZWwpIHtcclxuXHRcdFx0cm93ID0gX2ZuR2V0Um93RWxlbWVudHMoIHNldHRpbmdzLCBlbCApO1xyXG5cdFx0XHRyZXR1cm4gX2ZuQWRkRGF0YSggc2V0dGluZ3MsIHJvdy5kYXRhLCBlbCwgcm93LmNlbGxzICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRha2UgYSBUUiBlbGVtZW50IGFuZCBjb252ZXJ0IGl0IHRvIGFuIGluZGV4IGluIGFvRGF0YVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7bm9kZX0gbiB0aGUgVFIgZWxlbWVudCB0byBmaW5kXHJcblx0ICogIEByZXR1cm5zIHtpbnR9IGluZGV4IGlmIHRoZSBub2RlIGlzIGZvdW5kLCBudWxsIGlmIG5vdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Ob2RlVG9EYXRhSW5kZXgoIG9TZXR0aW5ncywgbiApXHJcblx0e1xyXG5cdFx0cmV0dXJuIChuLl9EVF9Sb3dJbmRleCE9PXVuZGVmaW5lZCkgPyBuLl9EVF9Sb3dJbmRleCA6IG51bGw7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRha2UgYSBURCBlbGVtZW50IGFuZCBjb252ZXJ0IGl0IGludG8gYSBjb2x1bW4gZGF0YSBpbmRleCAobm90IHRoZSB2aXNpYmxlIGluZGV4KVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7aW50fSBpUm93IFRoZSByb3cgbnVtYmVyIHRoZSBURC9USCBjYW4gYmUgZm91bmQgaW5cclxuXHQgKiAgQHBhcmFtIHtub2RlfSBuIFRoZSBURC9USCBlbGVtZW50IHRvIGZpbmRcclxuXHQgKiAgQHJldHVybnMge2ludH0gaW5kZXggaWYgdGhlIG5vZGUgaXMgZm91bmQsIC0xIGlmIG5vdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Ob2RlVG9Db2x1bW5JbmRleCggb1NldHRpbmdzLCBpUm93LCBuIClcclxuXHR7XHJcblx0XHRyZXR1cm4gJC5pbkFycmF5KCBuLCBvU2V0dGluZ3MuYW9EYXRhWyBpUm93IF0uYW5DZWxscyApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIGRhdGEgZm9yIGEgZ2l2ZW4gY2VsbCBmcm9tIHRoZSBpbnRlcm5hbCBjYWNoZSwgdGFraW5nIGludG8gYWNjb3VudCBkYXRhIG1hcHBpbmdcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7aW50fSByb3dJZHggYW9EYXRhIHJvdyBpZFxyXG5cdCAqICBAcGFyYW0ge2ludH0gY29sSWR4IENvbHVtbiBpbmRleFxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gdHlwZSBkYXRhIGdldCB0eXBlICgnZGlzcGxheScsICd0eXBlJyAnZmlsdGVyJyAnc29ydCcpXHJcblx0ICogIEByZXR1cm5zIHsqfSBDZWxsIGRhdGFcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCByb3dJZHgsIGNvbElkeCwgdHlwZSApXHJcblx0e1xyXG5cdFx0dmFyIGRyYXcgICAgICAgICAgID0gc2V0dGluZ3MuaURyYXc7XHJcblx0XHR2YXIgY29sICAgICAgICAgICAgPSBzZXR0aW5ncy5hb0NvbHVtbnNbY29sSWR4XTtcclxuXHRcdHZhciByb3dEYXRhICAgICAgICA9IHNldHRpbmdzLmFvRGF0YVtyb3dJZHhdLl9hRGF0YTtcclxuXHRcdHZhciBkZWZhdWx0Q29udGVudCA9IGNvbC5zRGVmYXVsdENvbnRlbnQ7XHJcblx0XHR2YXIgY2VsbERhdGEgICAgICAgPSBjb2wuZm5HZXREYXRhKCByb3dEYXRhLCB0eXBlLCB7XHJcblx0XHRcdHNldHRpbmdzOiBzZXR0aW5ncyxcclxuXHRcdFx0cm93OiAgICAgIHJvd0lkeCxcclxuXHRcdFx0Y29sOiAgICAgIGNvbElkeFxyXG5cdFx0fSApO1xyXG5cdFxyXG5cdFx0aWYgKCBjZWxsRGF0YSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHNldHRpbmdzLmlEcmF3RXJyb3IgIT0gZHJhdyAmJiBkZWZhdWx0Q29udGVudCA9PT0gbnVsbCApIHtcclxuXHRcdFx0XHRfZm5Mb2coIHNldHRpbmdzLCAwLCBcIlJlcXVlc3RlZCB1bmtub3duIHBhcmFtZXRlciBcIitcclxuXHRcdFx0XHRcdCh0eXBlb2YgY29sLm1EYXRhPT0nZnVuY3Rpb24nID8gJ3tmdW5jdGlvbn0nIDogXCInXCIrY29sLm1EYXRhK1wiJ1wiKStcclxuXHRcdFx0XHRcdFwiIGZvciByb3cgXCIrcm93SWR4K1wiLCBjb2x1bW4gXCIrY29sSWR4LCA0ICk7XHJcblx0XHRcdFx0c2V0dGluZ3MuaURyYXdFcnJvciA9IGRyYXc7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGRlZmF1bHRDb250ZW50O1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gV2hlbiB0aGUgZGF0YSBzb3VyY2UgaXMgbnVsbCBhbmQgYSBzcGVjaWZpYyBkYXRhIHR5cGUgaXMgcmVxdWVzdGVkIChpLmUuXHJcblx0XHQvLyBub3QgdGhlIG9yaWdpbmFsIGRhdGEpLCB3ZSBjYW4gdXNlIGRlZmF1bHQgY29sdW1uIGRhdGFcclxuXHRcdGlmICggKGNlbGxEYXRhID09PSByb3dEYXRhIHx8IGNlbGxEYXRhID09PSBudWxsKSAmJiBkZWZhdWx0Q29udGVudCAhPT0gbnVsbCAmJiB0eXBlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGNlbGxEYXRhID0gZGVmYXVsdENvbnRlbnQ7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggdHlwZW9mIGNlbGxEYXRhID09PSAnZnVuY3Rpb24nICkge1xyXG5cdFx0XHQvLyBJZiB0aGUgZGF0YSBzb3VyY2UgaXMgYSBmdW5jdGlvbiwgdGhlbiB3ZSBydW4gaXQgYW5kIHVzZSB0aGUgcmV0dXJuLFxyXG5cdFx0XHQvLyBleGVjdXRpbmcgaW4gdGhlIHNjb3BlIG9mIHRoZSBkYXRhIG9iamVjdCAoZm9yIGluc3RhbmNlcylcclxuXHRcdFx0cmV0dXJuIGNlbGxEYXRhLmNhbGwoIHJvd0RhdGEgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggY2VsbERhdGEgPT09IG51bGwgJiYgdHlwZSA9PSAnZGlzcGxheScgKSB7XHJcblx0XHRcdHJldHVybiAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiBjZWxsRGF0YTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogU2V0IHRoZSB2YWx1ZSBmb3IgYSBzcGVjaWZpYyBjZWxsLCBpbnRvIHRoZSBpbnRlcm5hbCBkYXRhIGNhY2hlXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge2ludH0gcm93SWR4IGFvRGF0YSByb3cgaWRcclxuXHQgKiAgQHBhcmFtIHtpbnR9IGNvbElkeCBDb2x1bW4gaW5kZXhcclxuXHQgKiAgQHBhcmFtIHsqfSB2YWwgVmFsdWUgdG8gc2V0XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mblNldENlbGxEYXRhKCBzZXR0aW5ncywgcm93SWR4LCBjb2xJZHgsIHZhbCApXHJcblx0e1xyXG5cdFx0dmFyIGNvbCAgICAgPSBzZXR0aW5ncy5hb0NvbHVtbnNbY29sSWR4XTtcclxuXHRcdHZhciByb3dEYXRhID0gc2V0dGluZ3MuYW9EYXRhW3Jvd0lkeF0uX2FEYXRhO1xyXG5cdFxyXG5cdFx0Y29sLmZuU2V0RGF0YSggcm93RGF0YSwgdmFsLCB7XHJcblx0XHRcdHNldHRpbmdzOiBzZXR0aW5ncyxcclxuXHRcdFx0cm93OiAgICAgIHJvd0lkeCxcclxuXHRcdFx0Y29sOiAgICAgIGNvbElkeFxyXG5cdFx0fSAgKTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0Ly8gUHJpdmF0ZSB2YXJpYWJsZSB0aGF0IGlzIHVzZWQgdG8gbWF0Y2ggYWN0aW9uIHN5bnRheCBpbiB0aGUgZGF0YSBwcm9wZXJ0eSBvYmplY3RcclxuXHR2YXIgX19yZUFycmF5ID0gL1xcWy4qP1xcXSQvO1xyXG5cdHZhciBfX3JlRm4gPSAvXFwoXFwpJC87XHJcblx0XHJcblx0LyoqXHJcblx0ICogU3BsaXQgc3RyaW5nIG9uIHBlcmlvZHMsIHRha2luZyBpbnRvIGFjY291bnQgZXNjYXBlZCBwZXJpb2RzXHJcblx0ICogQHBhcmFtICB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNwbGl0XHJcblx0ICogQHJldHVybiB7YXJyYXl9IFNwbGl0IHN0cmluZ1xyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mblNwbGl0T2JqTm90YXRpb24oIHN0ciApXHJcblx0e1xyXG5cdFx0cmV0dXJuICQubWFwKCBzdHIubWF0Y2goLyhcXFxcLnxbXlxcLl0pKy9nKSB8fCBbJyddLCBmdW5jdGlvbiAoIHMgKSB7XHJcblx0XHRcdHJldHVybiBzLnJlcGxhY2UoL1xcXFwuL2csICcuJyk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGRhdGEgZnJvbSBhIHNvdXJjZSBvYmplY3QsIHRha2luZ1xyXG5cdCAqIGludG8gYWNjb3VudCB0aGUgYWJpbGl0eSB0byB1c2UgbmVzdGVkIG9iamVjdHMgYXMgYSBzb3VyY2VcclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd8aW50fGZ1bmN0aW9ufSBtU291cmNlIFRoZSBkYXRhIHNvdXJjZSBmb3IgdGhlIG9iamVjdFxyXG5cdCAqICBAcmV0dXJucyB7ZnVuY3Rpb259IERhdGEgZ2V0IGZ1bmN0aW9uXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkdldE9iamVjdERhdGFGbiggbVNvdXJjZSApXHJcblx0e1xyXG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIG1Tb3VyY2UgKSApXHJcblx0XHR7XHJcblx0XHRcdC8qIEJ1aWxkIGFuIG9iamVjdCBvZiBnZXQgZnVuY3Rpb25zLCBhbmQgd3JhcCB0aGVtIGluIGEgc2luZ2xlIGNhbGwgKi9cclxuXHRcdFx0dmFyIG8gPSB7fTtcclxuXHRcdFx0JC5lYWNoKCBtU291cmNlLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcclxuXHRcdFx0XHRpZiAoIHZhbCApIHtcclxuXHRcdFx0XHRcdG9ba2V5XSA9IF9mbkdldE9iamVjdERhdGFGbiggdmFsICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93LCBtZXRhKSB7XHJcblx0XHRcdFx0dmFyIHQgPSBvW3R5cGVdIHx8IG8uXztcclxuXHRcdFx0XHRyZXR1cm4gdCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRcdHQoZGF0YSwgdHlwZSwgcm93LCBtZXRhKSA6XHJcblx0XHRcdFx0XHRkYXRhO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIG1Tb3VyY2UgPT09IG51bGwgKVxyXG5cdFx0e1xyXG5cdFx0XHQvKiBHaXZlIGFuIGVtcHR5IHN0cmluZyBmb3IgcmVuZGVyaW5nIC8gc29ydGluZyBldGMgKi9cclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7IC8vIHR5cGUsIHJvdyBhbmQgbWV0YSBhbHNvIHBhc3NlZCwgYnV0IG5vdCB1c2VkXHJcblx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggdHlwZW9mIG1Tb3VyY2UgPT09ICdmdW5jdGlvbicgKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdywgbWV0YSkge1xyXG5cdFx0XHRcdHJldHVybiBtU291cmNlKCBkYXRhLCB0eXBlLCByb3csIG1ldGEgKTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCB0eXBlb2YgbVNvdXJjZSA9PT0gJ3N0cmluZycgJiYgKG1Tb3VyY2UuaW5kZXhPZignLicpICE9PSAtMSB8fFxyXG5cdFx0XHQgICAgICBtU291cmNlLmluZGV4T2YoJ1snKSAhPT0gLTEgfHwgbVNvdXJjZS5pbmRleE9mKCcoJykgIT09IC0xKSApXHJcblx0XHR7XHJcblx0XHRcdC8qIElmIHRoZXJlIGlzIGEgLiBpbiB0aGUgc291cmNlIHN0cmluZyB0aGVuIHRoZSBkYXRhIHNvdXJjZSBpcyBpbiBhXHJcblx0XHRcdCAqIG5lc3RlZCBvYmplY3Qgc28gd2UgbG9vcCBvdmVyIHRoZSBkYXRhIGZvciBlYWNoIGxldmVsIHRvIGdldCB0aGUgbmV4dFxyXG5cdFx0XHQgKiBsZXZlbCBkb3duLiBPbiBlYWNoIGxvb3Agd2UgdGVzdCBmb3IgdW5kZWZpbmVkLCBhbmQgaWYgZm91bmQgaW1tZWRpYXRlbHlcclxuXHRcdFx0ICogcmV0dXJuLiBUaGlzIGFsbG93cyBlbnRpcmUgb2JqZWN0cyB0byBiZSBtaXNzaW5nIGFuZCBzRGVmYXVsdENvbnRlbnQgdG9cclxuXHRcdFx0ICogYmUgdXNlZCBpZiBkZWZpbmVkLCByYXRoZXIgdGhhbiB0aHJvd2luZyBhbiBlcnJvclxyXG5cdFx0XHQgKi9cclxuXHRcdFx0dmFyIGZldGNoRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBzcmMpIHtcclxuXHRcdFx0XHR2YXIgYXJyYXlOb3RhdGlvbiwgZnVuY05vdGF0aW9uLCBvdXQsIGlubmVyU3JjO1xyXG5cdFxyXG5cdFx0XHRcdGlmICggc3JjICE9PSBcIlwiIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgYSA9IF9mblNwbGl0T2JqTm90YXRpb24oIHNyYyApO1xyXG5cdFxyXG5cdFx0XHRcdFx0Zm9yICggdmFyIGk9MCwgaUxlbj1hLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdC8vIENoZWNrIGlmIHdlIGFyZSBkZWFsaW5nIHdpdGggc3BlY2lhbCBub3RhdGlvblxyXG5cdFx0XHRcdFx0XHRhcnJheU5vdGF0aW9uID0gYVtpXS5tYXRjaChfX3JlQXJyYXkpO1xyXG5cdFx0XHRcdFx0XHRmdW5jTm90YXRpb24gPSBhW2ldLm1hdGNoKF9fcmVGbik7XHJcblx0XHJcblx0XHRcdFx0XHRcdGlmICggYXJyYXlOb3RhdGlvbiApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHQvLyBBcnJheSBub3RhdGlvblxyXG5cdFx0XHRcdFx0XHRcdGFbaV0gPSBhW2ldLnJlcGxhY2UoX19yZUFycmF5LCAnJyk7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0Ly8gQ29uZGl0aW9uIGFsbG93cyBzaW1wbHkgW10gdG8gYmUgcGFzc2VkIGluXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBhW2ldICE9PSBcIlwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YSA9IGRhdGFbIGFbaV0gXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0b3V0ID0gW107XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSByZW1haW5kZXIgb2YgdGhlIG5lc3RlZCBvYmplY3QgdG8gZ2V0XHJcblx0XHRcdFx0XHRcdFx0YS5zcGxpY2UoIDAsIGkrMSApO1xyXG5cdFx0XHRcdFx0XHRcdGlubmVyU3JjID0gYS5qb2luKCcuJyk7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0Ly8gVHJhdmVyc2UgZWFjaCBlbnRyeSBpbiB0aGUgYXJyYXkgZ2V0dGluZyB0aGUgcHJvcGVydGllcyByZXF1ZXN0ZWRcclxuXHRcdFx0XHRcdFx0XHRpZiAoICQuaXNBcnJheSggZGF0YSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIGo9MCwgakxlbj1kYXRhLmxlbmd0aCA7IGo8akxlbiA7IGorKyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b3V0LnB1c2goIGZldGNoRGF0YSggZGF0YVtqXSwgdHlwZSwgaW5uZXJTcmMgKSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRcdFx0XHQvLyBJZiBhIHN0cmluZyBpcyBnaXZlbiBpbiBiZXR3ZWVuIHRoZSBhcnJheSBub3RhdGlvbiBpbmRpY2F0b3JzLCB0aGF0XHJcblx0XHRcdFx0XHRcdFx0Ly8gaXMgdXNlZCB0byBqb2luIHRoZSBzdHJpbmdzIHRvZ2V0aGVyLCBvdGhlcndpc2UgYW4gYXJyYXkgaXMgcmV0dXJuZWRcclxuXHRcdFx0XHRcdFx0XHR2YXIgam9pbiA9IGFycmF5Tm90YXRpb25bMF0uc3Vic3RyaW5nKDEsIGFycmF5Tm90YXRpb25bMF0ubGVuZ3RoLTEpO1xyXG5cdFx0XHRcdFx0XHRcdGRhdGEgPSAoam9pbj09PVwiXCIpID8gb3V0IDogb3V0LmpvaW4oam9pbik7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0Ly8gVGhlIGlubmVyIGNhbGwgdG8gZmV0Y2hEYXRhIGhhcyBhbHJlYWR5IHRyYXZlcnNlZCB0aHJvdWdoIHRoZSByZW1haW5kZXJcclxuXHRcdFx0XHRcdFx0XHQvLyBvZiB0aGUgc291cmNlIHJlcXVlc3RlZCwgc28gd2UgZXhpdCBmcm9tIHRoZSBsb29wXHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAoIGZ1bmNOb3RhdGlvbiApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHQvLyBGdW5jdGlvbiBjYWxsXHJcblx0XHRcdFx0XHRcdFx0YVtpXSA9IGFbaV0ucmVwbGFjZShfX3JlRm4sICcnKTtcclxuXHRcdFx0XHRcdFx0XHRkYXRhID0gZGF0YVsgYVtpXSBdKCk7XHJcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhID09PSBudWxsIHx8IGRhdGFbIGFbaV0gXSA9PT0gdW5kZWZpbmVkIClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZGF0YSA9IGRhdGFbIGFbaV0gXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdH07XHJcblx0XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdHlwZSkgeyAvLyByb3cgYW5kIG1ldGEgYWxzbyBwYXNzZWQsIGJ1dCBub3QgdXNlZFxyXG5cdFx0XHRcdHJldHVybiBmZXRjaERhdGEoIGRhdGEsIHR5cGUsIG1Tb3VyY2UgKTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0LyogQXJyYXkgb3IgZmxhdCBvYmplY3QgbWFwcGluZyAqL1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGRhdGEsIHR5cGUpIHsgLy8gcm93IGFuZCBtZXRhIGFsc28gcGFzc2VkLCBidXQgbm90IHVzZWRcclxuXHRcdFx0XHRyZXR1cm4gZGF0YVttU291cmNlXTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBzZXQgZGF0YSBmcm9tIGEgc291cmNlIG9iamVjdCwgdGFraW5nXHJcblx0ICogaW50byBhY2NvdW50IHRoZSBhYmlsaXR5IHRvIHVzZSBuZXN0ZWQgb2JqZWN0cyBhcyBhIHNvdXJjZVxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ3xpbnR8ZnVuY3Rpb259IG1Tb3VyY2UgVGhlIGRhdGEgc291cmNlIGZvciB0aGUgb2JqZWN0XHJcblx0ICogIEByZXR1cm5zIHtmdW5jdGlvbn0gRGF0YSBzZXQgZnVuY3Rpb25cclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuU2V0T2JqZWN0RGF0YUZuKCBtU291cmNlIClcclxuXHR7XHJcblx0XHRpZiAoICQuaXNQbGFpbk9iamVjdCggbVNvdXJjZSApIClcclxuXHRcdHtcclxuXHRcdFx0LyogVW5saWtlIGdldCwgb25seSB0aGUgdW5kZXJzY29yZSAoZ2xvYmFsKSBvcHRpb24gaXMgdXNlZCBmb3IgZm9yXHJcblx0XHRcdCAqIHNldHRpbmcgZGF0YSBzaW5jZSB3ZSBkb24ndCBrbm93IHRoZSB0eXBlIGhlcmUuIFRoaXMgaXMgd2h5IGFuIG9iamVjdFxyXG5cdFx0XHQgKiBvcHRpb24gaXMgbm90IGRvY3VtZW50ZWQgZm9yIGBtRGF0YWAgKHdoaWNoIGlzIHJlYWQvd3JpdGUpLCBidXQgaXQgaXNcclxuXHRcdFx0ICogZm9yIGBtUmVuZGVyYCB3aGljaCBpcyByZWFkIG9ubHkuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRyZXR1cm4gX2ZuU2V0T2JqZWN0RGF0YUZuKCBtU291cmNlLl8gKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBtU291cmNlID09PSBudWxsIClcclxuXHRcdHtcclxuXHRcdFx0LyogTm90aGluZyB0byBkbyB3aGVuIHRoZSBkYXRhIHNvdXJjZSBpcyBudWxsICovXHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7fTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCB0eXBlb2YgbVNvdXJjZSA9PT0gJ2Z1bmN0aW9uJyApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdmFsLCBtZXRhKSB7XHJcblx0XHRcdFx0bVNvdXJjZSggZGF0YSwgJ3NldCcsIHZhbCwgbWV0YSApO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIHR5cGVvZiBtU291cmNlID09PSAnc3RyaW5nJyAmJiAobVNvdXJjZS5pbmRleE9mKCcuJykgIT09IC0xIHx8XHJcblx0XHRcdCAgICAgIG1Tb3VyY2UuaW5kZXhPZignWycpICE9PSAtMSB8fCBtU291cmNlLmluZGV4T2YoJygnKSAhPT0gLTEpIClcclxuXHRcdHtcclxuXHRcdFx0LyogTGlrZSB0aGUgZ2V0LCB3ZSBuZWVkIHRvIGdldCBkYXRhIGZyb20gYSBuZXN0ZWQgb2JqZWN0ICovXHJcblx0XHRcdHZhciBzZXREYXRhID0gZnVuY3Rpb24gKGRhdGEsIHZhbCwgc3JjKSB7XHJcblx0XHRcdFx0dmFyIGEgPSBfZm5TcGxpdE9iak5vdGF0aW9uKCBzcmMgKSwgYjtcclxuXHRcdFx0XHR2YXIgYUxhc3QgPSBhW2EubGVuZ3RoLTFdO1xyXG5cdFx0XHRcdHZhciBhcnJheU5vdGF0aW9uLCBmdW5jTm90YXRpb24sIG8sIGlubmVyU3JjO1xyXG5cdFxyXG5cdFx0XHRcdGZvciAoIHZhciBpPTAsIGlMZW49YS5sZW5ndGgtMSA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgaWYgd2UgYXJlIGRlYWxpbmcgd2l0aCBhbiBhcnJheSBub3RhdGlvbiByZXF1ZXN0XHJcblx0XHRcdFx0XHRhcnJheU5vdGF0aW9uID0gYVtpXS5tYXRjaChfX3JlQXJyYXkpO1xyXG5cdFx0XHRcdFx0ZnVuY05vdGF0aW9uID0gYVtpXS5tYXRjaChfX3JlRm4pO1xyXG5cdFxyXG5cdFx0XHRcdFx0aWYgKCBhcnJheU5vdGF0aW9uIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0YVtpXSA9IGFbaV0ucmVwbGFjZShfX3JlQXJyYXksICcnKTtcclxuXHRcdFx0XHRcdFx0ZGF0YVsgYVtpXSBdID0gW107XHJcblx0XHJcblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgcmVtYWluZGVyIG9mIHRoZSBuZXN0ZWQgb2JqZWN0IHRvIHNldCBzbyB3ZSBjYW4gcmVjdXJzZVxyXG5cdFx0XHRcdFx0XHRiID0gYS5zbGljZSgpO1xyXG5cdFx0XHRcdFx0XHRiLnNwbGljZSggMCwgaSsxICk7XHJcblx0XHRcdFx0XHRcdGlubmVyU3JjID0gYi5qb2luKCcuJyk7XHJcblx0XHJcblx0XHRcdFx0XHRcdC8vIFRyYXZlcnNlIGVhY2ggZW50cnkgaW4gdGhlIGFycmF5IHNldHRpbmcgdGhlIHByb3BlcnRpZXMgcmVxdWVzdGVkXHJcblx0XHRcdFx0XHRcdGlmICggJC5pc0FycmF5KCB2YWwgKSApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaj0wLCBqTGVuPXZhbC5sZW5ndGggOyBqPGpMZW4gOyBqKysgKVxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdG8gPSB7fTtcclxuXHRcdFx0XHRcdFx0XHRcdHNldERhdGEoIG8sIHZhbFtqXSwgaW5uZXJTcmMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGFbIGFbaV0gXS5wdXNoKCBvICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdC8vIFdlJ3ZlIGJlZW4gYXNrZWQgdG8gc2F2ZSBkYXRhIHRvIGFuIGFycmF5LCBidXQgaXRcclxuXHRcdFx0XHRcdFx0XHQvLyBpc24ndCBhcnJheSBkYXRhIHRvIGJlIHNhdmVkLiBCZXN0IHRoYXQgY2FuIGJlIGRvbmVcclxuXHRcdFx0XHRcdFx0XHQvLyBpcyB0byBqdXN0IHNhdmUgdGhlIHZhbHVlLlxyXG5cdFx0XHRcdFx0XHRcdGRhdGFbIGFbaV0gXSA9IHZhbDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0XHQvLyBUaGUgaW5uZXIgY2FsbCB0byBzZXREYXRhIGhhcyBhbHJlYWR5IHRyYXZlcnNlZCB0aHJvdWdoIHRoZSByZW1haW5kZXJcclxuXHRcdFx0XHRcdFx0Ly8gb2YgdGhlIHNvdXJjZSBhbmQgaGFzIHNldCB0aGUgZGF0YSwgdGh1cyB3ZSBjYW4gZXhpdCBoZXJlXHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYgKCBmdW5jTm90YXRpb24gKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHQvLyBGdW5jdGlvbiBjYWxsXHJcblx0XHRcdFx0XHRcdGFbaV0gPSBhW2ldLnJlcGxhY2UoX19yZUZuLCAnJyk7XHJcblx0XHRcdFx0XHRcdGRhdGEgPSBkYXRhWyBhW2ldIF0oIHZhbCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIG5lc3RlZCBvYmplY3QgZG9lc24ndCBjdXJyZW50bHkgZXhpc3QgLSBzaW5jZSB3ZSBhcmVcclxuXHRcdFx0XHRcdC8vIHRyeWluZyB0byBzZXQgdGhlIHZhbHVlIC0gY3JlYXRlIGl0XHJcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGFbaV0gXSA9PT0gbnVsbCB8fCBkYXRhWyBhW2ldIF0gPT09IHVuZGVmaW5lZCApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGRhdGFbIGFbaV0gXSA9IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFbIGFbaV0gXTtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Ly8gTGFzdCBpdGVtIGluIHRoZSBpbnB1dCAtIGkuZSwgdGhlIGFjdHVhbCBzZXRcclxuXHRcdFx0XHRpZiAoIGFMYXN0Lm1hdGNoKF9fcmVGbiApIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHQvLyBGdW5jdGlvbiBjYWxsXHJcblx0XHRcdFx0XHRkYXRhID0gZGF0YVsgYUxhc3QucmVwbGFjZShfX3JlRm4sICcnKSBdKCB2YWwgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdC8vIElmIGFycmF5IG5vdGF0aW9uIGlzIHVzZWQsIHdlIGp1c3Qgd2FudCB0byBzdHJpcCBpdCBhbmQgdXNlIHRoZSBwcm9wZXJ0eSBuYW1lXHJcblx0XHRcdFx0XHQvLyBhbmQgYXNzaWduIHRoZSB2YWx1ZS4gSWYgaXQgaXNuJ3QgdXNlZCwgdGhlbiB3ZSBnZXQgdGhlIHJlc3VsdCB3ZSB3YW50IGFueXdheVxyXG5cdFx0XHRcdFx0ZGF0YVsgYUxhc3QucmVwbGFjZShfX3JlQXJyYXksICcnKSBdID0gdmFsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChkYXRhLCB2YWwpIHsgLy8gbWV0YSBpcyBhbHNvIHBhc3NlZCBpbiwgYnV0IG5vdCB1c2VkXHJcblx0XHRcdFx0cmV0dXJuIHNldERhdGEoIGRhdGEsIHZhbCwgbVNvdXJjZSApO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHQvKiBBcnJheSBvciBmbGF0IG9iamVjdCBtYXBwaW5nICovXHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdmFsKSB7IC8vIG1ldGEgaXMgYWxzbyBwYXNzZWQgaW4sIGJ1dCBub3QgdXNlZFxyXG5cdFx0XHRcdGRhdGFbbVNvdXJjZV0gPSB2YWw7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybiBhbiBhcnJheSB3aXRoIHRoZSBmdWxsIHRhYmxlIGRhdGFcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcmV0dXJucyBhcnJheSB7YXJyYXl9IGFEYXRhIE1hc3RlciBkYXRhIGFycmF5XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkdldERhdGFNYXN0ZXIgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0cmV0dXJuIF9wbHVjayggc2V0dGluZ3MuYW9EYXRhLCAnX2FEYXRhJyApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBOdWtlIHRoZSB0YWJsZVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkNsZWFyVGFibGUoIHNldHRpbmdzIClcclxuXHR7XHJcblx0XHRzZXR0aW5ncy5hb0RhdGEubGVuZ3RoID0gMDtcclxuXHRcdHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5sZW5ndGggPSAwO1xyXG5cdFx0c2V0dGluZ3MuYWlEaXNwbGF5Lmxlbmd0aCA9IDA7XHJcblx0XHRzZXR0aW5ncy5hSWRzID0ge307XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdCAvKipcclxuXHQgKiBUYWtlIGFuIGFycmF5IG9mIGludGVnZXJzIChpbmRleCBhcnJheSkgYW5kIHJlbW92ZSBhIHRhcmdldCBpbnRlZ2VyICh2YWx1ZSAtIG5vdFxyXG5cdCAqIHRoZSBrZXkhKVxyXG5cdCAqICBAcGFyYW0ge2FycmF5fSBhIEluZGV4IGFycmF5IHRvIHRhcmdldFxyXG5cdCAqICBAcGFyYW0ge2ludH0gaVRhcmdldCB2YWx1ZSB0byBmaW5kXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkRlbGV0ZUluZGV4KCBhLCBpVGFyZ2V0LCBzcGxpY2UgKVxyXG5cdHtcclxuXHRcdHZhciBpVGFyZ2V0SW5kZXggPSAtMTtcclxuXHRcclxuXHRcdGZvciAoIHZhciBpPTAsIGlMZW49YS5sZW5ndGggOyBpPGlMZW4gOyBpKysgKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiAoIGFbaV0gPT0gaVRhcmdldCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpVGFyZ2V0SW5kZXggPSBpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKCBhW2ldID4gaVRhcmdldCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRhW2ldLS07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggaVRhcmdldEluZGV4ICE9IC0xICYmIHNwbGljZSA9PT0gdW5kZWZpbmVkIClcclxuXHRcdHtcclxuXHRcdFx0YS5zcGxpY2UoIGlUYXJnZXRJbmRleCwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBNYXJrIGNhY2hlZCBkYXRhIGFzIGludmFsaWQgc3VjaCB0aGF0IGEgcmUtcmVhZCBvZiB0aGUgZGF0YSB3aWxsIG9jY3VyIHdoZW5cclxuXHQgKiB0aGUgY2FjaGVkIGRhdGEgaXMgbmV4dCByZXF1ZXN0ZWQuIEFsc28gdXBkYXRlIGZyb20gdGhlIGRhdGEgc291cmNlIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqIEBwYXJhbSB7aW50fSAgICByb3dJZHggICBSb3cgaW5kZXggdG8gaW52YWxpZGF0ZVxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc3JjXSAgICBTb3VyY2UgdG8gaW52YWxpZGF0ZSBmcm9tOiB1bmRlZmluZWQsICdhdXRvJywgJ2RvbSdcclxuXHQgKiAgICAgb3IgJ2RhdGEnXHJcblx0ICogQHBhcmFtIHtpbnR9ICAgIFtjb2xJZHhdIENvbHVtbiBpbmRleCB0byBpbnZhbGlkYXRlLiBJZiB1bmRlZmluZWQgdGhlIHdob2xlXHJcblx0ICogICAgIHJvdyB3aWxsIGJlIGludmFsaWRhdGVkXHJcblx0ICogQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICpcclxuXHQgKiBAdG9kbyBGb3IgdGhlIG1vZHVsYXJpc2F0aW9uIG9mIHYxLjExIHRoaXMgd2lsbCBuZWVkIHRvIGJlY29tZSBhIGNhbGxiYWNrLCBzb1xyXG5cdCAqICAgdGhlIHNvcnQgYW5kIGZpbHRlciBtZXRob2RzIGNhbiBzdWJzY3JpYmUgdG8gaXQuIFRoYXQgd2lsbCByZXF1aXJlZFxyXG5cdCAqICAgaW5pdGlhbGlzYXRpb24gb3B0aW9ucyBmb3Igc29ydGluZywgd2hpY2ggaXMgd2h5IGl0IGlzIG5vdCBhbHJlYWR5IGJha2VkIGluXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuSW52YWxpZGF0ZSggc2V0dGluZ3MsIHJvd0lkeCwgc3JjLCBjb2xJZHggKVxyXG5cdHtcclxuXHRcdHZhciByb3cgPSBzZXR0aW5ncy5hb0RhdGFbIHJvd0lkeCBdO1xyXG5cdFx0dmFyIGksIGllbjtcclxuXHRcdHZhciBjZWxsV3JpdGUgPSBmdW5jdGlvbiAoIGNlbGwsIGNvbCApIHtcclxuXHRcdFx0Ly8gVGhpcyBpcyB2ZXJ5IGZydXN0cmF0aW5nLCBidXQgaW4gSUUgaWYgeW91IGp1c3Qgd3JpdGUgZGlyZWN0bHlcclxuXHRcdFx0Ly8gdG8gaW5uZXJIVE1MLCBhbmQgZWxlbWVudHMgdGhhdCBhcmUgb3ZlcndyaXR0ZW4gYXJlIEdDJ2VkLFxyXG5cdFx0XHQvLyBldmVuIGlmIHRoZXJlIGlzIGEgcmVmZXJlbmNlIHRvIHRoZW0gZWxzZXdoZXJlXHJcblx0XHRcdHdoaWxlICggY2VsbC5jaGlsZE5vZGVzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRjZWxsLnJlbW92ZUNoaWxkKCBjZWxsLmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRjZWxsLmlubmVySFRNTCA9IF9mbkdldENlbGxEYXRhKCBzZXR0aW5ncywgcm93SWR4LCBjb2wsICdkaXNwbGF5JyApO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIEFyZSB3ZSByZWFkaW5nIGxhc3QgZGF0YSBmcm9tIERPTSBvciB0aGUgZGF0YSBvYmplY3Q/XHJcblx0XHRpZiAoIHNyYyA9PT0gJ2RvbScgfHwgKCghIHNyYyB8fCBzcmMgPT09ICdhdXRvJykgJiYgcm93LnNyYyA9PT0gJ2RvbScpICkge1xyXG5cdFx0XHQvLyBSZWFkIHRoZSBkYXRhIGZyb20gdGhlIERPTVxyXG5cdFx0XHRyb3cuX2FEYXRhID0gX2ZuR2V0Um93RWxlbWVudHMoXHJcblx0XHRcdFx0XHRzZXR0aW5ncywgcm93LCBjb2xJZHgsIGNvbElkeCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcm93Ll9hRGF0YVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHQuZGF0YTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHQvLyBSZWFkaW5nIGZyb20gZGF0YSBvYmplY3QsIHVwZGF0ZSB0aGUgRE9NXHJcblx0XHRcdHZhciBjZWxscyA9IHJvdy5hbkNlbGxzO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGNlbGxzICkge1xyXG5cdFx0XHRcdGlmICggY29sSWR4ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRjZWxsV3JpdGUoIGNlbGxzW2NvbElkeF0sIGNvbElkeCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdGZvciAoIGk9MCwgaWVuPWNlbGxzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRjZWxsV3JpdGUoIGNlbGxzW2ldLCBpICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBGb3IgYm90aCByb3cgYW5kIGNlbGwgaW52YWxpZGF0aW9uLCB0aGUgY2FjaGVkIGRhdGEgZm9yIHNvcnRpbmcgYW5kXHJcblx0XHQvLyBmaWx0ZXJpbmcgaXMgbnVsbGVkIG91dFxyXG5cdFx0cm93Ll9hU29ydERhdGEgPSBudWxsO1xyXG5cdFx0cm93Ll9hRmlsdGVyRGF0YSA9IG51bGw7XHJcblx0XHJcblx0XHQvLyBJbnZhbGlkYXRlIHRoZSB0eXBlIGZvciBhIHNwZWNpZmljIGNvbHVtbiAoaWYgZ2l2ZW4pIG9yIGFsbCBjb2x1bW5zIHNpbmNlXHJcblx0XHQvLyB0aGUgZGF0YSBtaWdodCBoYXZlIGNoYW5nZWRcclxuXHRcdHZhciBjb2xzID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xyXG5cdFx0aWYgKCBjb2xJZHggIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Y29sc1sgY29sSWR4IF0uc1R5cGUgPSBudWxsO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGZvciAoIGk9MCwgaWVuPWNvbHMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0Y29sc1tpXS5zVHlwZSA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gVXBkYXRlIERhdGFUYWJsZXMgc3BlY2lhbCBgRFRfKmAgYXR0cmlidXRlcyBmb3IgdGhlIHJvd1xyXG5cdFx0XHRfZm5Sb3dBdHRyaWJ1dGVzKCBzZXR0aW5ncywgcm93ICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEJ1aWxkIGEgZGF0YSBzb3VyY2Ugb2JqZWN0IGZyb20gYW4gSFRNTCByb3csIHJlYWRpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZVxyXG5cdCAqIGNlbGxzIHRoYXQgYXJlIGluIHRoZSByb3cuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiBAcGFyYW0ge25vZGV8b2JqZWN0fSBUUiBlbGVtZW50IGZyb20gd2hpY2ggdG8gcmVhZCBkYXRhIG9yIGV4aXN0aW5nIHJvd1xyXG5cdCAqICAgb2JqZWN0IGZyb20gd2hpY2ggdG8gcmUtcmVhZCB0aGUgZGF0YSBmcm9tIHRoZSBjZWxsc1xyXG5cdCAqIEBwYXJhbSB7aW50fSBbY29sSWR4XSBPcHRpb25hbCBjb2x1bW4gaW5kZXhcclxuXHQgKiBAcGFyYW0ge2FycmF5fG9iamVjdH0gW2RdIERhdGEgc291cmNlIG9iamVjdC4gSWYgYGNvbElkeGAgaXMgZ2l2ZW4gdGhlbiB0aGlzXHJcblx0ICogICBwYXJhbWV0ZXIgc2hvdWxkIGFsc28gYmUgZ2l2ZW4gYW5kIHdpbGwgYmUgdXNlZCB0byB3cml0ZSB0aGUgZGF0YSBpbnRvLlxyXG5cdCAqICAgT25seSB0aGUgY29sdW1uIGluIHF1ZXN0aW9uIHdpbGwgYmUgd3JpdHRlblxyXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IE9iamVjdCB3aXRoIHR3byBwYXJhbWV0ZXJzOiBgZGF0YWAgdGhlIGRhdGEgcmVhZCwgaW5cclxuXHQgKiAgIGRvY3VtZW50IG9yZGVyLCBhbmQgYGNlbGxzYCBhbmQgYXJyYXkgb2Ygbm9kZXMgKHRoZXkgY2FuIGJlIHVzZWZ1bCB0byB0aGVcclxuXHQgKiAgIGNhbGxlciwgc28gcmF0aGVyIHRoYW4gbmVlZGluZyBhIHNlY29uZCB0cmF2ZXJzYWwgdG8gZ2V0IHRoZW0sIGp1c3QgcmV0dXJuXHJcblx0ICogICB0aGVtIGZyb20gaGVyZSkuXHJcblx0ICogQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuR2V0Um93RWxlbWVudHMoIHNldHRpbmdzLCByb3csIGNvbElkeCwgZCApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdHRkcyA9IFtdLFxyXG5cdFx0XHR0ZCA9IHJvdy5maXJzdENoaWxkLFxyXG5cdFx0XHRuYW1lLCBjb2wsIG8sIGk9MCwgY29udGVudHMsXHJcblx0XHRcdGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnMsXHJcblx0XHRcdG9iamVjdFJlYWQgPSBzZXR0aW5ncy5fcm93UmVhZE9iamVjdDtcclxuXHRcclxuXHRcdC8vIEFsbG93IHRoZSBkYXRhIG9iamVjdCB0byBiZSBwYXNzZWQgaW4sIG9yIGNvbnN0cnVjdFxyXG5cdFx0ZCA9IGQgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdGQgOlxyXG5cdFx0XHRvYmplY3RSZWFkID9cclxuXHRcdFx0XHR7fSA6XHJcblx0XHRcdFx0W107XHJcblx0XHJcblx0XHR2YXIgYXR0ciA9IGZ1bmN0aW9uICggc3RyLCB0ZCAgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgKSB7XHJcblx0XHRcdFx0dmFyIGlkeCA9IHN0ci5pbmRleE9mKCdAJyk7XHJcblx0XHJcblx0XHRcdFx0aWYgKCBpZHggIT09IC0xICkge1xyXG5cdFx0XHRcdFx0dmFyIGF0dHIgPSBzdHIuc3Vic3RyaW5nKCBpZHgrMSApO1xyXG5cdFx0XHRcdFx0dmFyIHNldHRlciA9IF9mblNldE9iamVjdERhdGFGbiggc3RyICk7XHJcblx0XHRcdFx0XHRzZXR0ZXIoIGQsIHRkLmdldEF0dHJpYnV0ZSggYXR0ciApICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0Ly8gUmVhZCBkYXRhIGZyb20gYSBjZWxsIGFuZCBzdG9yZSBpbnRvIHRoZSBkYXRhIG9iamVjdFxyXG5cdFx0dmFyIGNlbGxQcm9jZXNzID0gZnVuY3Rpb24gKCBjZWxsICkge1xyXG5cdFx0XHRpZiAoIGNvbElkeCA9PT0gdW5kZWZpbmVkIHx8IGNvbElkeCA9PT0gaSApIHtcclxuXHRcdFx0XHRjb2wgPSBjb2x1bW5zW2ldO1xyXG5cdFx0XHRcdGNvbnRlbnRzID0gJC50cmltKGNlbGwuaW5uZXJIVE1MKTtcclxuXHRcclxuXHRcdFx0XHRpZiAoIGNvbCAmJiBjb2wuX2JBdHRyU3JjICkge1xyXG5cdFx0XHRcdFx0dmFyIHNldHRlciA9IF9mblNldE9iamVjdERhdGFGbiggY29sLm1EYXRhLl8gKTtcclxuXHRcdFx0XHRcdHNldHRlciggZCwgY29udGVudHMgKTtcclxuXHRcclxuXHRcdFx0XHRcdGF0dHIoIGNvbC5tRGF0YS5zb3J0LCBjZWxsICk7XHJcblx0XHRcdFx0XHRhdHRyKCBjb2wubURhdGEudHlwZSwgY2VsbCApO1xyXG5cdFx0XHRcdFx0YXR0ciggY29sLm1EYXRhLmZpbHRlciwgY2VsbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdC8vIERlcGVuZGluZyBvbiB0aGUgYGRhdGFgIG9wdGlvbiBmb3IgdGhlIGNvbHVtbnMgdGhlIGRhdGEgY2FuXHJcblx0XHRcdFx0XHQvLyBiZSByZWFkIHRvIGVpdGhlciBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuXHJcblx0XHRcdFx0XHRpZiAoIG9iamVjdFJlYWQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggISBjb2wuX3NldHRlciApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgc2V0dGVyIGZ1bmN0aW9uXHJcblx0XHRcdFx0XHRcdFx0Y29sLl9zZXR0ZXIgPSBfZm5TZXRPYmplY3REYXRhRm4oIGNvbC5tRGF0YSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGNvbC5fc2V0dGVyKCBkLCBjb250ZW50cyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdGRbaV0gPSBjb250ZW50cztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0aSsrO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdGlmICggdGQgKSB7XHJcblx0XHRcdC8vIGB0cmAgZWxlbWVudCB3YXMgcGFzc2VkIGluXHJcblx0XHRcdHdoaWxlICggdGQgKSB7XHJcblx0XHRcdFx0bmFtZSA9IHRkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XHJcblx0XHJcblx0XHRcdFx0aWYgKCBuYW1lID09IFwiVERcIiB8fCBuYW1lID09IFwiVEhcIiApIHtcclxuXHRcdFx0XHRcdGNlbGxQcm9jZXNzKCB0ZCApO1xyXG5cdFx0XHRcdFx0dGRzLnB1c2goIHRkICk7XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdHRkID0gdGQubmV4dFNpYmxpbmc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHQvLyBFeGlzdGluZyByb3cgb2JqZWN0IHBhc3NlZCBpblxyXG5cdFx0XHR0ZHMgPSByb3cuYW5DZWxscztcclxuXHRcclxuXHRcdFx0Zm9yICggdmFyIGo9MCwgamVuPXRkcy5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcclxuXHRcdFx0XHRjZWxsUHJvY2VzcyggdGRzW2pdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFJlYWQgdGhlIElEIGZyb20gdGhlIERPTSBpZiBwcmVzZW50XHJcblx0XHR2YXIgcm93Tm9kZSA9IHJvdy5maXJzdENoaWxkID8gcm93IDogcm93Lm5UcjtcclxuXHRcclxuXHRcdGlmICggcm93Tm9kZSApIHtcclxuXHRcdFx0dmFyIGlkID0gcm93Tm9kZS5nZXRBdHRyaWJ1dGUoICdpZCcgKTtcclxuXHRcclxuXHRcdFx0aWYgKCBpZCApIHtcclxuXHRcdFx0XHRfZm5TZXRPYmplY3REYXRhRm4oIHNldHRpbmdzLnJvd0lkICkoIGQsIGlkICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGRhdGE6IGQsXHJcblx0XHRcdGNlbGxzOiB0ZHNcclxuXHRcdH07XHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBhIG5ldyBUUiBlbGVtZW50IChhbmQgaXQncyBURCBjaGlsZHJlbikgZm9yIGEgcm93XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtpbnR9IGlSb3cgUm93IHRvIGNvbnNpZGVyXHJcblx0ICogIEBwYXJhbSB7bm9kZX0gW25UckluXSBUUiBlbGVtZW50IHRvIGFkZCB0byB0aGUgdGFibGUgLSBvcHRpb25hbC4gSWYgbm90IGdpdmVuLFxyXG5cdCAqICAgIERhdGFUYWJsZXMgd2lsbCBjcmVhdGUgYSByb3cgYXV0b21hdGljYWxseVxyXG5cdCAqICBAcGFyYW0ge2FycmF5fSBbYW5UZHNdIEFycmF5IG9mIFREfFRIIGVsZW1lbnRzIGZvciB0aGUgcm93IC0gbXVzdCBiZSBnaXZlblxyXG5cdCAqICAgIGlmIG5UciBpcy5cclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQ3JlYXRlVHIgKCBvU2V0dGluZ3MsIGlSb3csIG5UckluLCBhblRkcyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdHJvdyA9IG9TZXR0aW5ncy5hb0RhdGFbaVJvd10sXHJcblx0XHRcdHJvd0RhdGEgPSByb3cuX2FEYXRhLFxyXG5cdFx0XHRjZWxscyA9IFtdLFxyXG5cdFx0XHRuVHIsIG5UZCwgb0NvbCxcclxuXHRcdFx0aSwgaUxlbjtcclxuXHRcclxuXHRcdGlmICggcm93Lm5UciA9PT0gbnVsbCApXHJcblx0XHR7XHJcblx0XHRcdG5UciA9IG5UckluIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblx0XHJcblx0XHRcdHJvdy5uVHIgPSBuVHI7XHJcblx0XHRcdHJvdy5hbkNlbGxzID0gY2VsbHM7XHJcblx0XHJcblx0XHRcdC8qIFVzZSBhIHByaXZhdGUgcHJvcGVydHkgb24gdGhlIG5vZGUgdG8gYWxsb3cgcmVzZXJ2ZSBtYXBwaW5nIGZyb20gdGhlIG5vZGVcclxuXHRcdFx0ICogdG8gdGhlIGFvRGF0YSBhcnJheSBmb3IgZmFzdCBsb29rIHVwXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRuVHIuX0RUX1Jvd0luZGV4ID0gaVJvdztcclxuXHRcclxuXHRcdFx0LyogU3BlY2lhbCBwYXJhbWV0ZXJzIGNhbiBiZSBnaXZlbiBieSB0aGUgZGF0YSBzb3VyY2UgdG8gYmUgdXNlZCBvbiB0aGUgcm93ICovXHJcblx0XHRcdF9mblJvd0F0dHJpYnV0ZXMoIG9TZXR0aW5ncywgcm93ICk7XHJcblx0XHJcblx0XHRcdC8qIFByb2Nlc3MgZWFjaCBjb2x1bW4gKi9cclxuXHRcdFx0Zm9yICggaT0wLCBpTGVuPW9TZXR0aW5ncy5hb0NvbHVtbnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG9Db2wgPSBvU2V0dGluZ3MuYW9Db2x1bW5zW2ldO1xyXG5cdFxyXG5cdFx0XHRcdG5UZCA9IG5UckluID8gYW5UZHNbaV0gOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBvQ29sLnNDZWxsVHlwZSApO1xyXG5cdFx0XHRcdG5UZC5fRFRfQ2VsbEluZGV4ID0ge1xyXG5cdFx0XHRcdFx0cm93OiBpUm93LFxyXG5cdFx0XHRcdFx0Y29sdW1uOiBpXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjZWxscy5wdXNoKCBuVGQgKTtcclxuXHRcclxuXHRcdFx0XHQvLyBOZWVkIHRvIGNyZWF0ZSB0aGUgSFRNTCBpZiBuZXcsIG9yIGlmIGEgcmVuZGVyaW5nIGZ1bmN0aW9uIGlzIGRlZmluZWRcclxuXHRcdFx0XHRpZiAoICghblRySW4gfHwgb0NvbC5tUmVuZGVyIHx8IG9Db2wubURhdGEgIT09IGkpICYmXHJcblx0XHRcdFx0XHQgKCEkLmlzUGxhaW5PYmplY3Qob0NvbC5tRGF0YSkgfHwgb0NvbC5tRGF0YS5fICE9PSBpKycuZGlzcGxheScpXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRuVGQuaW5uZXJIVE1MID0gX2ZuR2V0Q2VsbERhdGEoIG9TZXR0aW5ncywgaVJvdywgaSwgJ2Rpc3BsYXknICk7XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdC8qIEFkZCB1c2VyIGRlZmluZWQgY2xhc3MgKi9cclxuXHRcdFx0XHRpZiAoIG9Db2wuc0NsYXNzIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRuVGQuY2xhc3NOYW1lICs9ICcgJytvQ29sLnNDbGFzcztcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Ly8gVmlzaWJpbGl0eSAtIGFkZCBvciByZW1vdmUgYXMgcmVxdWlyZWRcclxuXHRcdFx0XHRpZiAoIG9Db2wuYlZpc2libGUgJiYgISBuVHJJbiApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0blRyLmFwcGVuZENoaWxkKCBuVGQgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoICEgb0NvbC5iVmlzaWJsZSAmJiBuVHJJbiApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0blRkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5UZCApO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRpZiAoIG9Db2wuZm5DcmVhdGVkQ2VsbCApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0b0NvbC5mbkNyZWF0ZWRDZWxsLmNhbGwoIG9TZXR0aW5ncy5vSW5zdGFuY2UsXHJcblx0XHRcdFx0XHRcdG5UZCwgX2ZuR2V0Q2VsbERhdGEoIG9TZXR0aW5ncywgaVJvdywgaSApLCByb3dEYXRhLCBpUm93LCBpXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvUm93Q3JlYXRlZENhbGxiYWNrJywgbnVsbCwgW25Uciwgcm93RGF0YSwgaVJvd10gKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFJlbW92ZSBvbmNlIHdlYmtpdCBidWcgMTMxODE5IGFuZCBDaHJvbWl1bSBidWcgMzY1NjE5IGhhdmUgYmVlbiByZXNvbHZlZFxyXG5cdFx0Ly8gYW5kIGRlcGxveWVkXHJcblx0XHRyb3cublRyLnNldEF0dHJpYnV0ZSggJ3JvbGUnLCAncm93JyApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGQgYXR0cmlidXRlcyB0byBhIHJvdyBiYXNlZCBvbiB0aGUgc3BlY2lhbCBgRFRfKmAgcGFyYW1ldGVycyBpbiBhIGRhdGFcclxuXHQgKiBzb3VyY2Ugb2JqZWN0LlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IERhdGFUYWJsZXMgcm93IG9iamVjdCBmb3IgdGhlIHJvdyB0byBiZSBtb2RpZmllZFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Sb3dBdHRyaWJ1dGVzKCBzZXR0aW5ncywgcm93IClcclxuXHR7XHJcblx0XHR2YXIgdHIgPSByb3cublRyO1xyXG5cdFx0dmFyIGRhdGEgPSByb3cuX2FEYXRhO1xyXG5cdFxyXG5cdFx0aWYgKCB0ciApIHtcclxuXHRcdFx0dmFyIGlkID0gc2V0dGluZ3Mucm93SWRGbiggZGF0YSApO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGlkICkge1xyXG5cdFx0XHRcdHRyLmlkID0gaWQ7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0aWYgKCBkYXRhLkRUX1Jvd0NsYXNzICkge1xyXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgY2xhc3NlcyBhZGRlZCBieSBEVF9Sb3dDbGFzcyBiZWZvcmVcclxuXHRcdFx0XHR2YXIgYSA9IGRhdGEuRFRfUm93Q2xhc3Muc3BsaXQoJyAnKTtcclxuXHRcdFx0XHRyb3cuX19yb3djID0gcm93Ll9fcm93YyA/XHJcblx0XHRcdFx0XHRfdW5pcXVlKCByb3cuX19yb3djLmNvbmNhdCggYSApICkgOlxyXG5cdFx0XHRcdFx0YTtcclxuXHRcclxuXHRcdFx0XHQkKHRyKVxyXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCByb3cuX19yb3djLmpvaW4oJyAnKSApXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoIGRhdGEuRFRfUm93Q2xhc3MgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRpZiAoIGRhdGEuRFRfUm93QXR0ciApIHtcclxuXHRcdFx0XHQkKHRyKS5hdHRyKCBkYXRhLkRUX1Jvd0F0dHIgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRpZiAoIGRhdGEuRFRfUm93RGF0YSApIHtcclxuXHRcdFx0XHQkKHRyKS5kYXRhKCBkYXRhLkRUX1Jvd0RhdGEgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGUgdGhlIEhUTUwgaGVhZGVyIGZvciB0aGUgdGFibGVcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5CdWlsZEhlYWQoIG9TZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyIGksIGllbiwgY2VsbCwgcm93LCBjb2x1bW47XHJcblx0XHR2YXIgdGhlYWQgPSBvU2V0dGluZ3MublRIZWFkO1xyXG5cdFx0dmFyIHRmb290ID0gb1NldHRpbmdzLm5URm9vdDtcclxuXHRcdHZhciBjcmVhdGVIZWFkZXIgPSAkKCd0aCwgdGQnLCB0aGVhZCkubGVuZ3RoID09PSAwO1xyXG5cdFx0dmFyIGNsYXNzZXMgPSBvU2V0dGluZ3Mub0NsYXNzZXM7XHJcblx0XHR2YXIgY29sdW1ucyA9IG9TZXR0aW5ncy5hb0NvbHVtbnM7XHJcblx0XHJcblx0XHRpZiAoIGNyZWF0ZUhlYWRlciApIHtcclxuXHRcdFx0cm93ID0gJCgnPHRyLz4nKS5hcHBlbmRUbyggdGhlYWQgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdGZvciAoIGk9MCwgaWVuPWNvbHVtbnMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbaV07XHJcblx0XHRcdGNlbGwgPSAkKCBjb2x1bW4ublRoICkuYWRkQ2xhc3MoIGNvbHVtbi5zQ2xhc3MgKTtcclxuXHRcclxuXHRcdFx0aWYgKCBjcmVhdGVIZWFkZXIgKSB7XHJcblx0XHRcdFx0Y2VsbC5hcHBlbmRUbyggcm93ICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gMS4xMSBtb3ZlIGludG8gc29ydGluZ1xyXG5cdFx0XHRpZiAoIG9TZXR0aW5ncy5vRmVhdHVyZXMuYlNvcnQgKSB7XHJcblx0XHRcdFx0Y2VsbC5hZGRDbGFzcyggY29sdW1uLnNTb3J0aW5nQ2xhc3MgKTtcclxuXHRcclxuXHRcdFx0XHRpZiAoIGNvbHVtbi5iU29ydGFibGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0Y2VsbFxyXG5cdFx0XHRcdFx0XHQuYXR0ciggJ3RhYmluZGV4Jywgb1NldHRpbmdzLmlUYWJJbmRleCApXHJcblx0XHRcdFx0XHRcdC5hdHRyKCAnYXJpYS1jb250cm9scycsIG9TZXR0aW5ncy5zVGFibGVJZCApO1xyXG5cdFxyXG5cdFx0XHRcdFx0X2ZuU29ydEF0dGFjaExpc3RlbmVyKCBvU2V0dGluZ3MsIGNvbHVtbi5uVGgsIGkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0aWYgKCBjb2x1bW4uc1RpdGxlICE9IGNlbGxbMF0uaW5uZXJIVE1MICkge1xyXG5cdFx0XHRcdGNlbGwuaHRtbCggY29sdW1uLnNUaXRsZSApO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdF9mblJlbmRlcmVyKCBvU2V0dGluZ3MsICdoZWFkZXInICkoXHJcblx0XHRcdFx0b1NldHRpbmdzLCBjZWxsLCBjb2x1bW4sIGNsYXNzZXNcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggY3JlYXRlSGVhZGVyICkge1xyXG5cdFx0XHRfZm5EZXRlY3RIZWFkZXIoIG9TZXR0aW5ncy5hb0hlYWRlciwgdGhlYWQgKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0LyogQVJJQSByb2xlIGZvciB0aGUgcm93cyAqL1xyXG5cdCBcdCQodGhlYWQpLmZpbmQoJz50cicpLmF0dHIoJ3JvbGUnLCAncm93Jyk7XHJcblx0XHJcblx0XHQvKiBEZWFsIHdpdGggdGhlIGZvb3RlciAtIGFkZCBjbGFzc2VzIGlmIHJlcXVpcmVkICovXHJcblx0XHQkKHRoZWFkKS5maW5kKCc+dHI+dGgsID50cj50ZCcpLmFkZENsYXNzKCBjbGFzc2VzLnNIZWFkZXJUSCApO1xyXG5cdFx0JCh0Zm9vdCkuZmluZCgnPnRyPnRoLCA+dHI+dGQnKS5hZGRDbGFzcyggY2xhc3Nlcy5zRm9vdGVyVEggKTtcclxuXHRcclxuXHRcdC8vIENhY2hlIHRoZSBmb290ZXIgY2VsbHMuIE5vdGUgdGhhdCB3ZSBvbmx5IHRha2UgdGhlIGNlbGxzIGZyb20gdGhlIGZpcnN0XHJcblx0XHQvLyByb3cgaW4gdGhlIGZvb3Rlci4gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSByb3cgdGhlIHVzZXIgd2FudHMgdG9cclxuXHRcdC8vIGludGVyYWN0IHdpdGgsIHRoZXkgbmVlZCB0byB1c2UgdGhlIHRhYmxlKCkuZm9vdCgpIG1ldGhvZC4gTm90ZSBhbHNvIHRoaXNcclxuXHRcdC8vIGFsbG93cyBjZWxscyB0byBiZSB1c2VkIGZvciBtdWx0aXBsZSBjb2x1bW5zIHVzaW5nIGNvbHNwYW5cclxuXHRcdGlmICggdGZvb3QgIT09IG51bGwgKSB7XHJcblx0XHRcdHZhciBjZWxscyA9IG9TZXR0aW5ncy5hb0Zvb3RlclswXTtcclxuXHRcclxuXHRcdFx0Zm9yICggaT0wLCBpZW49Y2VsbHMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0Y29sdW1uID0gY29sdW1uc1tpXTtcclxuXHRcdFx0XHRjb2x1bW4ublRmID0gY2VsbHNbaV0uY2VsbDtcclxuXHRcclxuXHRcdFx0XHRpZiAoIGNvbHVtbi5zQ2xhc3MgKSB7XHJcblx0XHRcdFx0XHQkKGNvbHVtbi5uVGYpLmFkZENsYXNzKCBjb2x1bW4uc0NsYXNzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIERyYXcgdGhlIGhlYWRlciAob3IgZm9vdGVyKSBlbGVtZW50IGJhc2VkIG9uIHRoZSBjb2x1bW4gdmlzaWJpbGl0eSBzdGF0ZXMuIFRoZVxyXG5cdCAqIG1ldGhvZG9sb2d5IGhlcmUgaXMgdG8gdXNlIHRoZSBsYXlvdXQgYXJyYXkgZnJvbSBfZm5EZXRlY3RIZWFkZXIsIG1vZGlmaWVkIGZvclxyXG5cdCAqIHRoZSBpbnN0YW50YW5lb3VzIGNvbHVtbiB2aXNpYmlsaXR5LCB0byBjb25zdHJ1Y3QgdGhlIG5ldyBsYXlvdXQuIFRoZSBncmlkIGlzXHJcblx0ICogdHJhdmVyc2VkIG92ZXIgY2VsbCBhdCBhIHRpbWUgaW4gYSByb3dzIHggY29sdW1ucyBncmlkIGZhc2hpb24sIGFsdGhvdWdoIGVhY2hcclxuXHQgKiBjZWxsIGluc2VydCBjYW4gY292ZXIgbXVsdGlwbGUgZWxlbWVudHMgaW4gdGhlIGdyaWQgLSB3aGljaCBpcyB0cmFja3MgdXNpbmcgdGhlXHJcblx0ICogYUFwcGxpZWQgYXJyYXkuIENlbGwgaW5zZXJ0cyBpbiB0aGUgZ3JpZCB3aWxsIG9ubHkgb2NjdXIgd2hlcmUgdGhlcmUgaXNuJ3RcclxuXHQgKiBhbHJlYWR5IGEgY2VsbCBpbiB0aGF0IHBvc2l0aW9uLlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSBhcnJheSB7b2JqZWN0c30gYW9Tb3VyY2UgTGF5b3V0IGFycmF5IGZyb20gX2ZuRGV0ZWN0SGVhZGVyXHJcblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gW2JJbmNsdWRlSGlkZGVuPWZhbHNlXSBJZiB0cnVlIHRoZW4gaW5jbHVkZSB0aGUgaGlkZGVuIGNvbHVtbnMgaW4gdGhlIGNhbGMsXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkRyYXdIZWFkKCBvU2V0dGluZ3MsIGFvU291cmNlLCBiSW5jbHVkZUhpZGRlbiApXHJcblx0e1xyXG5cdFx0dmFyIGksIGlMZW4sIGosIGpMZW4sIGssIGtMZW4sIG4sIG5Mb2NhbFRyO1xyXG5cdFx0dmFyIGFvTG9jYWwgPSBbXTtcclxuXHRcdHZhciBhQXBwbGllZCA9IFtdO1xyXG5cdFx0dmFyIGlDb2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucy5sZW5ndGg7XHJcblx0XHR2YXIgaVJvd3NwYW4sIGlDb2xzcGFuO1xyXG5cdFxyXG5cdFx0aWYgKCAhIGFvU291cmNlIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYgKCAgYkluY2x1ZGVIaWRkZW4gPT09IHVuZGVmaW5lZCApXHJcblx0XHR7XHJcblx0XHRcdGJJbmNsdWRlSGlkZGVuID0gZmFsc2U7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBNYWtlIGEgY29weSBvZiB0aGUgbWFzdGVyIGxheW91dCBhcnJheSwgYnV0IHdpdGhvdXQgdGhlIHZpc2libGUgY29sdW1ucyBpbiBpdCAqL1xyXG5cdFx0Zm9yICggaT0wLCBpTGVuPWFvU291cmNlLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHR7XHJcblx0XHRcdGFvTG9jYWxbaV0gPSBhb1NvdXJjZVtpXS5zbGljZSgpO1xyXG5cdFx0XHRhb0xvY2FsW2ldLm5UciA9IGFvU291cmNlW2ldLm5UcjtcclxuXHRcclxuXHRcdFx0LyogUmVtb3ZlIGFueSBjb2x1bW5zIHdoaWNoIGFyZSBjdXJyZW50bHkgaGlkZGVuICovXHJcblx0XHRcdGZvciAoIGo9aUNvbHVtbnMtMSA7IGo+PTAgOyBqLS0gKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYgKCAhb1NldHRpbmdzLmFvQ29sdW1uc1tqXS5iVmlzaWJsZSAmJiAhYkluY2x1ZGVIaWRkZW4gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGFvTG9jYWxbaV0uc3BsaWNlKCBqLCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8qIFByZXAgdGhlIGFwcGxpZWQgYXJyYXkgLSBpdCBuZWVkcyBhbiBlbGVtZW50IGZvciBlYWNoIHJvdyAqL1xyXG5cdFx0XHRhQXBwbGllZC5wdXNoKCBbXSApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Zm9yICggaT0wLCBpTGVuPWFvTG9jYWwubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcclxuXHRcdHtcclxuXHRcdFx0bkxvY2FsVHIgPSBhb0xvY2FsW2ldLm5UcjtcclxuXHRcclxuXHRcdFx0LyogQWxsIGNlbGxzIGFyZSBnb2luZyB0byBiZSByZXBsYWNlZCwgc28gZW1wdHkgb3V0IHRoZSByb3cgKi9cclxuXHRcdFx0aWYgKCBuTG9jYWxUciApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR3aGlsZSggKG4gPSBuTG9jYWxUci5maXJzdENoaWxkKSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bkxvY2FsVHIucmVtb3ZlQ2hpbGQoIG4gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Zm9yICggaj0wLCBqTGVuPWFvTG9jYWxbaV0ubGVuZ3RoIDsgajxqTGVuIDsgaisrIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlSb3dzcGFuID0gMTtcclxuXHRcdFx0XHRpQ29sc3BhbiA9IDE7XHJcblx0XHJcblx0XHRcdFx0LyogQ2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBjZWxsIChyb3cvY29sc3BhbikgY292ZXJpbmcgb3VyIHRhcmdldFxyXG5cdFx0XHRcdCAqIGluc2VydCBwb2ludC4gSWYgdGhlcmUgaXMsIHRoZW4gdGhlcmUgaXMgbm90aGluZyB0byBkby5cclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRpZiAoIGFBcHBsaWVkW2ldW2pdID09PSB1bmRlZmluZWQgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG5Mb2NhbFRyLmFwcGVuZENoaWxkKCBhb0xvY2FsW2ldW2pdLmNlbGwgKTtcclxuXHRcdFx0XHRcdGFBcHBsaWVkW2ldW2pdID0gMTtcclxuXHRcclxuXHRcdFx0XHRcdC8qIEV4cGFuZCB0aGUgY2VsbCB0byBjb3ZlciBhcyBtYW55IHJvd3MgYXMgbmVlZGVkICovXHJcblx0XHRcdFx0XHR3aGlsZSAoIGFvTG9jYWxbaStpUm93c3Bhbl0gIT09IHVuZGVmaW5lZCAmJlxyXG5cdFx0XHRcdFx0ICAgICAgICBhb0xvY2FsW2ldW2pdLmNlbGwgPT0gYW9Mb2NhbFtpK2lSb3dzcGFuXVtqXS5jZWxsIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0YUFwcGxpZWRbaStpUm93c3Bhbl1bal0gPSAxO1xyXG5cdFx0XHRcdFx0XHRpUm93c3BhbisrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0LyogRXhwYW5kIHRoZSBjZWxsIHRvIGNvdmVyIGFzIG1hbnkgY29sdW1ucyBhcyBuZWVkZWQgKi9cclxuXHRcdFx0XHRcdHdoaWxlICggYW9Mb2NhbFtpXVtqK2lDb2xzcGFuXSAhPT0gdW5kZWZpbmVkICYmXHJcblx0XHRcdFx0XHQgICAgICAgIGFvTG9jYWxbaV1bal0uY2VsbCA9PSBhb0xvY2FsW2ldW2oraUNvbHNwYW5dLmNlbGwgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHQvKiBNdXN0IHVwZGF0ZSB0aGUgYXBwbGllZCBhcnJheSBvdmVyIHRoZSByb3dzIGZvciB0aGUgY29sdW1ucyAqL1xyXG5cdFx0XHRcdFx0XHRmb3IgKCBrPTAgOyBrPGlSb3dzcGFuIDsgaysrIClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdGFBcHBsaWVkW2kra11baitpQ29sc3Bhbl0gPSAxO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlDb2xzcGFuKys7XHJcblx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHQvKiBEbyB0aGUgYWN0dWFsIGV4cGFuc2lvbiBpbiB0aGUgRE9NICovXHJcblx0XHRcdFx0XHQkKGFvTG9jYWxbaV1bal0uY2VsbClcclxuXHRcdFx0XHRcdFx0LmF0dHIoJ3Jvd3NwYW4nLCBpUm93c3BhbilcclxuXHRcdFx0XHRcdFx0LmF0dHIoJ2NvbHNwYW4nLCBpQ29sc3Bhbik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluc2VydCB0aGUgcmVxdWlyZWQgVFIgbm9kZXMgaW50byB0aGUgdGFibGUgZm9yIGRpc3BsYXlcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5EcmF3KCBvU2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdC8qIFByb3ZpZGUgYSBwcmUtY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBkcmF3IGlzIGZhbHNlIGlzIHJldHVybmVkICovXHJcblx0XHR2YXIgYVByZURyYXcgPSBfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvUHJlRHJhd0NhbGxiYWNrJywgJ3ByZURyYXcnLCBbb1NldHRpbmdzXSApO1xyXG5cdFx0aWYgKCAkLmluQXJyYXkoIGZhbHNlLCBhUHJlRHJhdyApICE9PSAtMSApXHJcblx0XHR7XHJcblx0XHRcdF9mblByb2Nlc3NpbmdEaXNwbGF5KCBvU2V0dGluZ3MsIGZhbHNlICk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBpLCBpTGVuLCBuO1xyXG5cdFx0dmFyIGFuUm93cyA9IFtdO1xyXG5cdFx0dmFyIGlSb3dDb3VudCA9IDA7XHJcblx0XHR2YXIgYXNTdHJpcGVDbGFzc2VzID0gb1NldHRpbmdzLmFzU3RyaXBlQ2xhc3NlcztcclxuXHRcdHZhciBpU3RyaXBlcyA9IGFzU3RyaXBlQ2xhc3Nlcy5sZW5ndGg7XHJcblx0XHR2YXIgaU9wZW5Sb3dzID0gb1NldHRpbmdzLmFvT3BlblJvd3MubGVuZ3RoO1xyXG5cdFx0dmFyIG9MYW5nID0gb1NldHRpbmdzLm9MYW5ndWFnZTtcclxuXHRcdHZhciBpSW5pdERpc3BsYXlTdGFydCA9IG9TZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydDtcclxuXHRcdHZhciBiU2VydmVyU2lkZSA9IF9mbkRhdGFTb3VyY2UoIG9TZXR0aW5ncyApID09ICdzc3AnO1xyXG5cdFx0dmFyIGFpRGlzcGxheSA9IG9TZXR0aW5ncy5haURpc3BsYXk7XHJcblx0XHJcblx0XHRvU2V0dGluZ3MuYkRyYXdpbmcgPSB0cnVlO1xyXG5cdFxyXG5cdFx0LyogQ2hlY2sgYW5kIHNlZSBpZiB3ZSBoYXZlIGFuIGluaXRpYWwgZHJhdyBwb3NpdGlvbiBmcm9tIHN0YXRlIHNhdmluZyAqL1xyXG5cdFx0aWYgKCBpSW5pdERpc3BsYXlTdGFydCAhPT0gdW5kZWZpbmVkICYmIGlJbml0RGlzcGxheVN0YXJ0ICE9PSAtMSApXHJcblx0XHR7XHJcblx0XHRcdG9TZXR0aW5ncy5faURpc3BsYXlTdGFydCA9IGJTZXJ2ZXJTaWRlID9cclxuXHRcdFx0XHRpSW5pdERpc3BsYXlTdGFydCA6XHJcblx0XHRcdFx0aUluaXREaXNwbGF5U3RhcnQgPj0gb1NldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSA/XHJcblx0XHRcdFx0XHQwIDpcclxuXHRcdFx0XHRcdGlJbml0RGlzcGxheVN0YXJ0O1xyXG5cdFxyXG5cdFx0XHRvU2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQgPSAtMTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBpRGlzcGxheVN0YXJ0ID0gb1NldHRpbmdzLl9pRGlzcGxheVN0YXJ0O1xyXG5cdFx0dmFyIGlEaXNwbGF5RW5kID0gb1NldHRpbmdzLmZuRGlzcGxheUVuZCgpO1xyXG5cdFxyXG5cdFx0LyogU2VydmVyLXNpZGUgcHJvY2Vzc2luZyBkcmF3IGludGVyY2VwdCAqL1xyXG5cdFx0aWYgKCBvU2V0dGluZ3MuYkRlZmVyTG9hZGluZyApXHJcblx0XHR7XHJcblx0XHRcdG9TZXR0aW5ncy5iRGVmZXJMb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdG9TZXR0aW5ncy5pRHJhdysrO1xyXG5cdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggb1NldHRpbmdzLCBmYWxzZSApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoICFiU2VydmVyU2lkZSApXHJcblx0XHR7XHJcblx0XHRcdG9TZXR0aW5ncy5pRHJhdysrO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoICFvU2V0dGluZ3MuYkRlc3Ryb3lpbmcgJiYgIV9mbkFqYXhVcGRhdGUoIG9TZXR0aW5ncyApIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYgKCBhaURpc3BsYXkubGVuZ3RoICE9PSAwIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGlTdGFydCA9IGJTZXJ2ZXJTaWRlID8gMCA6IGlEaXNwbGF5U3RhcnQ7XHJcblx0XHRcdHZhciBpRW5kID0gYlNlcnZlclNpZGUgPyBvU2V0dGluZ3MuYW9EYXRhLmxlbmd0aCA6IGlEaXNwbGF5RW5kO1xyXG5cdFxyXG5cdFx0XHRmb3IgKCB2YXIgaj1pU3RhcnQgOyBqPGlFbmQgOyBqKysgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGlEYXRhSW5kZXggPSBhaURpc3BsYXlbal07XHJcblx0XHRcdFx0dmFyIGFvRGF0YSA9IG9TZXR0aW5ncy5hb0RhdGFbIGlEYXRhSW5kZXggXTtcclxuXHRcdFx0XHRpZiAoIGFvRGF0YS5uVHIgPT09IG51bGwgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdF9mbkNyZWF0ZVRyKCBvU2V0dGluZ3MsIGlEYXRhSW5kZXggKTtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0dmFyIG5Sb3cgPSBhb0RhdGEublRyO1xyXG5cdFxyXG5cdFx0XHRcdC8qIFJlbW92ZSB0aGUgb2xkIHN0cmlwaW5nIGNsYXNzZXMgYW5kIHRoZW4gYWRkIHRoZSBuZXcgb25lICovXHJcblx0XHRcdFx0aWYgKCBpU3RyaXBlcyAhPT0gMCApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIHNTdHJpcGUgPSBhc1N0cmlwZUNsYXNzZXNbIGlSb3dDb3VudCAlIGlTdHJpcGVzIF07XHJcblx0XHRcdFx0XHRpZiAoIGFvRGF0YS5fc1Jvd1N0cmlwZSAhPSBzU3RyaXBlIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0JChuUm93KS5yZW1vdmVDbGFzcyggYW9EYXRhLl9zUm93U3RyaXBlICkuYWRkQ2xhc3MoIHNTdHJpcGUgKTtcclxuXHRcdFx0XHRcdFx0YW9EYXRhLl9zUm93U3RyaXBlID0gc1N0cmlwZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Ly8gUm93IGNhbGxiYWNrIGZ1bmN0aW9ucyAtIG1pZ2h0IHdhbnQgdG8gbWFuaXB1bGF0ZSB0aGUgcm93XHJcblx0XHRcdFx0Ly8gaVJvd0NvdW50IGFuZCBqIGFyZSBub3QgY3VycmVudGx5IGRvY3VtZW50ZWQuIEFyZSB0aGV5IGF0IGFsbFxyXG5cdFx0XHRcdC8vIHVzZWZ1bD9cclxuXHRcdFx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgJ2FvUm93Q2FsbGJhY2snLCBudWxsLFxyXG5cdFx0XHRcdFx0W25Sb3csIGFvRGF0YS5fYURhdGEsIGlSb3dDb3VudCwgal0gKTtcclxuXHRcclxuXHRcdFx0XHRhblJvd3MucHVzaCggblJvdyApO1xyXG5cdFx0XHRcdGlSb3dDb3VudCsrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdC8qIFRhYmxlIGlzIGVtcHR5IC0gY3JlYXRlIGEgcm93IHdpdGggYW4gZW1wdHkgbWVzc2FnZSBpbiBpdCAqL1xyXG5cdFx0XHR2YXIgc1plcm8gPSBvTGFuZy5zWmVyb1JlY29yZHM7XHJcblx0XHRcdGlmICggb1NldHRpbmdzLmlEcmF3ID09IDEgJiYgIF9mbkRhdGFTb3VyY2UoIG9TZXR0aW5ncyApID09ICdhamF4JyApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzWmVybyA9IG9MYW5nLnNMb2FkaW5nUmVjb3JkcztcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggb0xhbmcuc0VtcHR5VGFibGUgJiYgb1NldHRpbmdzLmZuUmVjb3Jkc1RvdGFsKCkgPT09IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c1plcm8gPSBvTGFuZy5zRW1wdHlUYWJsZTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRhblJvd3NbIDAgXSA9ICQoICc8dHIvPicsIHsgJ2NsYXNzJzogaVN0cmlwZXMgPyBhc1N0cmlwZUNsYXNzZXNbMF0gOiAnJyB9IClcclxuXHRcdFx0XHQuYXBwZW5kKCAkKCc8dGQgLz4nLCB7XHJcblx0XHRcdFx0XHQndmFsaWduJzogICd0b3AnLFxyXG5cdFx0XHRcdFx0J2NvbFNwYW4nOiBfZm5WaXNibGVDb2x1bW5zKCBvU2V0dGluZ3MgKSxcclxuXHRcdFx0XHRcdCdjbGFzcyc6ICAgb1NldHRpbmdzLm9DbGFzc2VzLnNSb3dFbXB0eVxyXG5cdFx0XHRcdH0gKS5odG1sKCBzWmVybyApIClbMF07XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBIZWFkZXIgYW5kIGZvb3RlciBjYWxsYmFja3MgKi9cclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCAnYW9IZWFkZXJDYWxsYmFjaycsICdoZWFkZXInLCBbICQob1NldHRpbmdzLm5USGVhZCkuY2hpbGRyZW4oJ3RyJylbMF0sXHJcblx0XHRcdF9mbkdldERhdGFNYXN0ZXIoIG9TZXR0aW5ncyApLCBpRGlzcGxheVN0YXJ0LCBpRGlzcGxheUVuZCwgYWlEaXNwbGF5IF0gKTtcclxuXHRcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCAnYW9Gb290ZXJDYWxsYmFjaycsICdmb290ZXInLCBbICQob1NldHRpbmdzLm5URm9vdCkuY2hpbGRyZW4oJ3RyJylbMF0sXHJcblx0XHRcdF9mbkdldERhdGFNYXN0ZXIoIG9TZXR0aW5ncyApLCBpRGlzcGxheVN0YXJ0LCBpRGlzcGxheUVuZCwgYWlEaXNwbGF5IF0gKTtcclxuXHRcclxuXHRcdHZhciBib2R5ID0gJChvU2V0dGluZ3MublRCb2R5KTtcclxuXHRcclxuXHRcdGJvZHkuY2hpbGRyZW4oKS5kZXRhY2goKTtcclxuXHRcdGJvZHkuYXBwZW5kKCAkKGFuUm93cykgKTtcclxuXHRcclxuXHRcdC8qIENhbGwgYWxsIHJlcXVpcmVkIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgdGhlIGVuZCBvZiBhIGRyYXcgKi9cclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggb1NldHRpbmdzLCAnYW9EcmF3Q2FsbGJhY2snLCAnZHJhdycsIFtvU2V0dGluZ3NdICk7XHJcblx0XHJcblx0XHQvKiBEcmF3IGlzIGNvbXBsZXRlLCBzb3J0aW5nIGFuZCBmaWx0ZXJpbmcgbXVzdCBiZSBhcyB3ZWxsICovXHJcblx0XHRvU2V0dGluZ3MuYlNvcnRlZCA9IGZhbHNlO1xyXG5cdFx0b1NldHRpbmdzLmJGaWx0ZXJlZCA9IGZhbHNlO1xyXG5cdFx0b1NldHRpbmdzLmJEcmF3aW5nID0gZmFsc2U7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlZHJhdyB0aGUgdGFibGUgLSB0YWtpbmcgYWNjb3VudCBvZiB0aGUgdmFyaW91cyBmZWF0dXJlcyB3aGljaCBhcmUgZW5hYmxlZFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gW2hvbGRQb3NpdGlvbl0gS2VlcCB0aGUgY3VycmVudCBwYWdpbmcgcG9zaXRpb24uIEJ5IGRlZmF1bHRcclxuXHQgKiAgICB0aGUgcGFnaW5nIGlzIHJlc2V0IHRvIHRoZSBmaXJzdCBwYWdlXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mblJlRHJhdyggc2V0dGluZ3MsIGhvbGRQb3NpdGlvbiApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdGZlYXR1cmVzID0gc2V0dGluZ3Mub0ZlYXR1cmVzLFxyXG5cdFx0XHRzb3J0ICAgICA9IGZlYXR1cmVzLmJTb3J0LFxyXG5cdFx0XHRmaWx0ZXIgICA9IGZlYXR1cmVzLmJGaWx0ZXI7XHJcblx0XHJcblx0XHRpZiAoIHNvcnQgKSB7XHJcblx0XHRcdF9mblNvcnQoIHNldHRpbmdzICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGZpbHRlciApIHtcclxuXHRcdFx0X2ZuRmlsdGVyQ29tcGxldGUoIHNldHRpbmdzLCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2ggKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHQvLyBObyBmaWx0ZXJpbmcsIHNvIHdlIHdhbnQgdG8ganVzdCB1c2UgdGhlIGRpc3BsYXkgbWFzdGVyXHJcblx0XHRcdHNldHRpbmdzLmFpRGlzcGxheSA9IHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYgKCBob2xkUG9zaXRpb24gIT09IHRydWUgKSB7XHJcblx0XHRcdHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gMDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIExldCBhbnkgbW9kdWxlcyBrbm93IGFib3V0IHRoZSBkcmF3IGhvbGQgcG9zaXRpb24gc3RhdGUgKHVzZWQgYnlcclxuXHRcdC8vIHNjcm9sbGluZyBpbnRlcm5hbGx5KVxyXG5cdFx0c2V0dGluZ3MuX2RyYXdIb2xkID0gaG9sZFBvc2l0aW9uO1xyXG5cdFxyXG5cdFx0X2ZuRHJhdyggc2V0dGluZ3MgKTtcclxuXHRcclxuXHRcdHNldHRpbmdzLl9kcmF3SG9sZCA9IGZhbHNlO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGQgdGhlIG9wdGlvbnMgdG8gdGhlIHBhZ2UgSFRNTCBmb3IgdGhlIHRhYmxlXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQWRkT3B0aW9uc0h0bWwgKCBvU2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhciBjbGFzc2VzID0gb1NldHRpbmdzLm9DbGFzc2VzO1xyXG5cdFx0dmFyIHRhYmxlID0gJChvU2V0dGluZ3MublRhYmxlKTtcclxuXHRcdHZhciBob2xkaW5nID0gJCgnPGRpdi8+JykuaW5zZXJ0QmVmb3JlKCB0YWJsZSApOyAvLyBIb2xkaW5nIGVsZW1lbnQgZm9yIHNwZWVkXHJcblx0XHR2YXIgZmVhdHVyZXMgPSBvU2V0dGluZ3Mub0ZlYXR1cmVzO1xyXG5cdFxyXG5cdFx0Ly8gQWxsIERhdGFUYWJsZXMgYXJlIHdyYXBwZWQgaW4gYSBkaXZcclxuXHRcdHZhciBpbnNlcnQgPSAkKCc8ZGl2Lz4nLCB7XHJcblx0XHRcdGlkOiAgICAgIG9TZXR0aW5ncy5zVGFibGVJZCsnX3dyYXBwZXInLFxyXG5cdFx0XHQnY2xhc3MnOiBjbGFzc2VzLnNXcmFwcGVyICsgKG9TZXR0aW5ncy5uVEZvb3QgPyAnJyA6ICcgJytjbGFzc2VzLnNOb0Zvb3RlcilcclxuXHRcdH0gKTtcclxuXHRcclxuXHRcdG9TZXR0aW5ncy5uSG9sZGluZyA9IGhvbGRpbmdbMF07XHJcblx0XHRvU2V0dGluZ3MublRhYmxlV3JhcHBlciA9IGluc2VydFswXTtcclxuXHRcdG9TZXR0aW5ncy5uVGFibGVSZWluc2VydEJlZm9yZSA9IG9TZXR0aW5ncy5uVGFibGUubmV4dFNpYmxpbmc7XHJcblx0XHJcblx0XHQvKiBMb29wIG92ZXIgdGhlIHVzZXIgc2V0IHBvc2l0aW9uaW5nIGFuZCBwbGFjZSB0aGUgZWxlbWVudHMgYXMgbmVlZGVkICovXHJcblx0XHR2YXIgYURvbSA9IG9TZXR0aW5ncy5zRG9tLnNwbGl0KCcnKTtcclxuXHRcdHZhciBmZWF0dXJlTm9kZSwgY09wdGlvbiwgbk5ld05vZGUsIGNOZXh0LCBzQXR0ciwgajtcclxuXHRcdGZvciAoIHZhciBpPTAgOyBpPGFEb20ubGVuZ3RoIDsgaSsrIClcclxuXHRcdHtcclxuXHRcdFx0ZmVhdHVyZU5vZGUgPSBudWxsO1xyXG5cdFx0XHRjT3B0aW9uID0gYURvbVtpXTtcclxuXHRcclxuXHRcdFx0aWYgKCBjT3B0aW9uID09ICc8JyApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvKiBOZXcgY29udGFpbmVyIGRpdiAqL1xyXG5cdFx0XHRcdG5OZXdOb2RlID0gJCgnPGRpdi8+JylbMF07XHJcblx0XHJcblx0XHRcdFx0LyogQ2hlY2sgdG8gc2VlIGlmIHdlIHNob3VsZCBhcHBlbmQgYW4gaWQgYW5kL29yIGEgY2xhc3MgbmFtZSB0byB0aGUgY29udGFpbmVyICovXHJcblx0XHRcdFx0Y05leHQgPSBhRG9tW2krMV07XHJcblx0XHRcdFx0aWYgKCBjTmV4dCA9PSBcIidcIiB8fCBjTmV4dCA9PSAnXCInIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzQXR0ciA9IFwiXCI7XHJcblx0XHRcdFx0XHRqID0gMjtcclxuXHRcdFx0XHRcdHdoaWxlICggYURvbVtpK2pdICE9IGNOZXh0IClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c0F0dHIgKz0gYURvbVtpK2pdO1xyXG5cdFx0XHRcdFx0XHRqKys7XHJcblx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHQvKiBSZXBsYWNlIGpRdWVyeSBVSSBjb25zdGFudHMgQHRvZG8gZGVwcmVjaWF0ZWQgKi9cclxuXHRcdFx0XHRcdGlmICggc0F0dHIgPT0gXCJIXCIgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRzQXR0ciA9IGNsYXNzZXMuc0pVSUhlYWRlcjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYgKCBzQXR0ciA9PSBcIkZcIiApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHNBdHRyID0gY2xhc3Nlcy5zSlVJRm9vdGVyO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0LyogVGhlIGF0dHJpYnV0ZSBjYW4gYmUgaW4gdGhlIGZvcm1hdCBvZiBcIiNpZC5jbGFzc1wiLCBcIiNpZFwiIG9yIFwiY2xhc3NcIiBUaGlzIGxvZ2ljXHJcblx0XHRcdFx0XHQgKiBicmVha3MgdGhlIHN0cmluZyBpbnRvIHBhcnRzIGFuZCBhcHBsaWVzIHRoZW0gYXMgbmVlZGVkXHJcblx0XHRcdFx0XHQgKi9cclxuXHRcdFx0XHRcdGlmICggc0F0dHIuaW5kZXhPZignLicpICE9IC0xIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dmFyIGFTcGxpdCA9IHNBdHRyLnNwbGl0KCcuJyk7XHJcblx0XHRcdFx0XHRcdG5OZXdOb2RlLmlkID0gYVNwbGl0WzBdLnN1YnN0cigxLCBhU3BsaXRbMF0ubGVuZ3RoLTEpO1xyXG5cdFx0XHRcdFx0XHRuTmV3Tm9kZS5jbGFzc05hbWUgPSBhU3BsaXRbMV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIGlmICggc0F0dHIuY2hhckF0KDApID09IFwiI1wiIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0bk5ld05vZGUuaWQgPSBzQXR0ci5zdWJzdHIoMSwgc0F0dHIubGVuZ3RoLTEpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRuTmV3Tm9kZS5jbGFzc05hbWUgPSBzQXR0cjtcclxuXHRcdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRcdGkgKz0gajsgLyogTW92ZSBhbG9uZyB0aGUgcG9zaXRpb24gYXJyYXkgKi9cclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0aW5zZXJ0LmFwcGVuZCggbk5ld05vZGUgKTtcclxuXHRcdFx0XHRpbnNlcnQgPSAkKG5OZXdOb2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAnPicgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0LyogRW5kIGNvbnRhaW5lciBkaXYgKi9cclxuXHRcdFx0XHRpbnNlcnQgPSBpbnNlcnQucGFyZW50KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gQHRvZG8gTW92ZSBvcHRpb25zIGludG8gdGhlaXIgb3duIHBsdWdpbnM/XHJcblx0XHRcdGVsc2UgaWYgKCBjT3B0aW9uID09ICdsJyAmJiBmZWF0dXJlcy5iUGFnaW5hdGUgJiYgZmVhdHVyZXMuYkxlbmd0aENoYW5nZSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvKiBMZW5ndGggKi9cclxuXHRcdFx0XHRmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sTGVuZ3RoKCBvU2V0dGluZ3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAnZicgJiYgZmVhdHVyZXMuYkZpbHRlciApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvKiBGaWx0ZXIgKi9cclxuXHRcdFx0XHRmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sRmlsdGVyKCBvU2V0dGluZ3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAncicgJiYgZmVhdHVyZXMuYlByb2Nlc3NpbmcgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0LyogcFJvY2Vzc2luZyAqL1xyXG5cdFx0XHRcdGZlYXR1cmVOb2RlID0gX2ZuRmVhdHVyZUh0bWxQcm9jZXNzaW5nKCBvU2V0dGluZ3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAndCcgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0LyogVGFibGUgKi9cclxuXHRcdFx0XHRmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sVGFibGUoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKCBjT3B0aW9uID09ICAnaScgJiYgZmVhdHVyZXMuYkluZm8gKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0LyogSW5mbyAqL1xyXG5cdFx0XHRcdGZlYXR1cmVOb2RlID0gX2ZuRmVhdHVyZUh0bWxJbmZvKCBvU2V0dGluZ3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggY09wdGlvbiA9PSAncCcgJiYgZmVhdHVyZXMuYlBhZ2luYXRlIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8qIFBhZ2luYXRpb24gKi9cclxuXHRcdFx0XHRmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKCBEYXRhVGFibGUuZXh0LmZlYXR1cmUubGVuZ3RoICE9PSAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8qIFBsdWctaW4gZmVhdHVyZXMgKi9cclxuXHRcdFx0XHR2YXIgYW9GZWF0dXJlcyA9IERhdGFUYWJsZS5leHQuZmVhdHVyZTtcclxuXHRcdFx0XHRmb3IgKCB2YXIgaz0wLCBrTGVuPWFvRmVhdHVyZXMubGVuZ3RoIDsgazxrTGVuIDsgaysrIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZiAoIGNPcHRpb24gPT0gYW9GZWF0dXJlc1trXS5jRmVhdHVyZSApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGZlYXR1cmVOb2RlID0gYW9GZWF0dXJlc1trXS5mbkluaXQoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0LyogQWRkIHRvIHRoZSAyRCBmZWF0dXJlcyBhcnJheSAqL1xyXG5cdFx0XHRpZiAoIGZlYXR1cmVOb2RlIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBhYW5GZWF0dXJlcyA9IG9TZXR0aW5ncy5hYW5GZWF0dXJlcztcclxuXHRcclxuXHRcdFx0XHRpZiAoICEgYWFuRmVhdHVyZXNbY09wdGlvbl0gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGFhbkZlYXR1cmVzW2NPcHRpb25dID0gW107XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdGFhbkZlYXR1cmVzW2NPcHRpb25dLnB1c2goIGZlYXR1cmVOb2RlICk7XHJcblx0XHRcdFx0aW5zZXJ0LmFwcGVuZCggZmVhdHVyZU5vZGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyogQnVpbHQgb3VyIERPTSBzdHJ1Y3R1cmUgLSByZXBsYWNlIHRoZSBob2xkaW5nIGRpdiB3aXRoIHdoYXQgd2Ugd2FudCAqL1xyXG5cdFx0aG9sZGluZy5yZXBsYWNlV2l0aCggaW5zZXJ0ICk7XHJcblx0XHRvU2V0dGluZ3MubkhvbGRpbmcgPSBudWxsO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBVc2UgdGhlIERPTSBzb3VyY2UgdG8gY3JlYXRlIHVwIGFuIGFycmF5IG9mIGhlYWRlciBjZWxscy4gVGhlIGlkZWEgaGVyZSBpcyB0b1xyXG5cdCAqIGNyZWF0ZSBhIGxheW91dCBncmlkIChhcnJheSkgb2Ygcm93cyB4IGNvbHVtbnMsIHdoaWNoIGNvbnRhaW5zIGEgcmVmZXJlbmNlXHJcblx0ICogdG8gdGhlIGNlbGwgdGhhdCB0aGF0IHBvaW50IGluIHRoZSBncmlkIChyZWdhcmRsZXNzIG9mIGNvbC9yb3dzcGFuKSwgc3VjaCB0aGF0XHJcblx0ICogYW55IGNvbHVtbiAvIHJvdyBjb3VsZCBiZSByZW1vdmVkIGFuZCB0aGUgbmV3IGdyaWQgY29uc3RydWN0ZWRcclxuXHQgKiAgQHBhcmFtIGFycmF5IHtvYmplY3R9IGFMYXlvdXQgQXJyYXkgdG8gc3RvcmUgdGhlIGNhbGN1bGF0ZWQgbGF5b3V0IGluXHJcblx0ICogIEBwYXJhbSB7bm9kZX0gblRoZWFkIFRoZSBoZWFkZXIvZm9vdGVyIGVsZW1lbnQgZm9yIHRoZSB0YWJsZVxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5EZXRlY3RIZWFkZXIgKCBhTGF5b3V0LCBuVGhlYWQgKVxyXG5cdHtcclxuXHRcdHZhciBuVHJzID0gJChuVGhlYWQpLmNoaWxkcmVuKCd0cicpO1xyXG5cdFx0dmFyIG5UciwgbkNlbGw7XHJcblx0XHR2YXIgaSwgaywgbCwgaUxlbiwgakxlbiwgaUNvbFNoaWZ0ZWQsIGlDb2x1bW4sIGlDb2xzcGFuLCBpUm93c3BhbjtcclxuXHRcdHZhciBiVW5pcXVlO1xyXG5cdFx0dmFyIGZuU2hpZnRDb2wgPSBmdW5jdGlvbiAoIGEsIGksIGogKSB7XHJcblx0XHRcdHZhciBrID0gYVtpXTtcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUgKCBrW2pdICkge1xyXG5cdFx0XHRcdGorKztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gajtcclxuXHRcdH07XHJcblx0XHJcblx0XHRhTGF5b3V0LnNwbGljZSggMCwgYUxheW91dC5sZW5ndGggKTtcclxuXHRcclxuXHRcdC8qIFdlIGtub3cgaG93IG1hbnkgcm93cyB0aGVyZSBhcmUgaW4gdGhlIGxheW91dCAtIHNvIHByZXAgaXQgKi9cclxuXHRcdGZvciAoIGk9MCwgaUxlbj1uVHJzLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHR7XHJcblx0XHRcdGFMYXlvdXQucHVzaCggW10gKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIENhbGN1bGF0ZSBhIGxheW91dCBhcnJheSAqL1xyXG5cdFx0Zm9yICggaT0wLCBpTGVuPW5UcnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrIClcclxuXHRcdHtcclxuXHRcdFx0blRyID0gblRyc1tpXTtcclxuXHRcdFx0aUNvbHVtbiA9IDA7XHJcblx0XHJcblx0XHRcdC8qIEZvciBldmVyeSBjZWxsIGluIHRoZSByb3cuLi4gKi9cclxuXHRcdFx0bkNlbGwgPSBuVHIuZmlyc3RDaGlsZDtcclxuXHRcdFx0d2hpbGUgKCBuQ2VsbCApIHtcclxuXHRcdFx0XHRpZiAoIG5DZWxsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT0gXCJURFwiIHx8XHJcblx0XHRcdFx0ICAgICBuQ2VsbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09IFwiVEhcIiApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0LyogR2V0IHRoZSBjb2wgYW5kIHJvd3NwYW4gYXR0cmlidXRlcyBmcm9tIHRoZSBET00gYW5kIHNhbml0aXNlIHRoZW0gKi9cclxuXHRcdFx0XHRcdGlDb2xzcGFuID0gbkNlbGwuZ2V0QXR0cmlidXRlKCdjb2xzcGFuJykgKiAxO1xyXG5cdFx0XHRcdFx0aVJvd3NwYW4gPSBuQ2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nKSAqIDE7XHJcblx0XHRcdFx0XHRpQ29sc3BhbiA9ICghaUNvbHNwYW4gfHwgaUNvbHNwYW49PT0wIHx8IGlDb2xzcGFuPT09MSkgPyAxIDogaUNvbHNwYW47XHJcblx0XHRcdFx0XHRpUm93c3BhbiA9ICghaVJvd3NwYW4gfHwgaVJvd3NwYW49PT0wIHx8IGlSb3dzcGFuPT09MSkgPyAxIDogaVJvd3NwYW47XHJcblx0XHJcblx0XHRcdFx0XHQvKiBUaGVyZSBtaWdodCBiZSBjb2xzcGFuIGNlbGxzIGFscmVhZHkgaW4gdGhpcyByb3csIHNvIHNoaWZ0IG91ciB0YXJnZXRcclxuXHRcdFx0XHRcdCAqIGFjY29yZGluZ2x5XHJcblx0XHRcdFx0XHQgKi9cclxuXHRcdFx0XHRcdGlDb2xTaGlmdGVkID0gZm5TaGlmdENvbCggYUxheW91dCwgaSwgaUNvbHVtbiApO1xyXG5cdFxyXG5cdFx0XHRcdFx0LyogQ2FjaGUgY2FsY3VsYXRpb24gZm9yIHVuaXF1ZSBjb2x1bW5zICovXHJcblx0XHRcdFx0XHRiVW5pcXVlID0gaUNvbHNwYW4gPT09IDEgPyB0cnVlIDogZmFsc2U7XHJcblx0XHJcblx0XHRcdFx0XHQvKiBJZiB0aGVyZSBpcyBjb2wgLyByb3dzcGFuLCBjb3B5IHRoZSBpbmZvcm1hdGlvbiBpbnRvIHRoZSBsYXlvdXQgZ3JpZCAqL1xyXG5cdFx0XHRcdFx0Zm9yICggbD0wIDsgbDxpQ29sc3BhbiA7IGwrKyApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGZvciAoIGs9MCA7IGs8aVJvd3NwYW4gOyBrKysgKVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0YUxheW91dFtpK2tdW2lDb2xTaGlmdGVkK2xdID0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XCJjZWxsXCI6IG5DZWxsLFxyXG5cdFx0XHRcdFx0XHRcdFx0XCJ1bmlxdWVcIjogYlVuaXF1ZVxyXG5cdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdFx0YUxheW91dFtpK2tdLm5UciA9IG5UcjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRuQ2VsbCA9IG5DZWxsLm5leHRTaWJsaW5nO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEdldCBhbiBhcnJheSBvZiB1bmlxdWUgdGggZWxlbWVudHMsIG9uZSBmb3IgZWFjaCBjb2x1bW5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge25vZGV9IG5IZWFkZXIgYXV0b21hdGljYWxseSBkZXRlY3QgdGhlIGxheW91dCBmcm9tIHRoaXMgbm9kZSAtIG9wdGlvbmFsXHJcblx0ICogIEBwYXJhbSB7YXJyYXl9IGFMYXlvdXQgdGhlYWQvdGZvb3QgbGF5b3V0IGZyb20gX2ZuRGV0ZWN0SGVhZGVyIC0gb3B0aW9uYWxcclxuXHQgKiAgQHJldHVybnMgYXJyYXkge25vZGV9IGFSZXR1cm4gbGlzdCBvZiB1bmlxdWUgdGgnc1xyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5HZXRVbmlxdWVUaHMgKCBvU2V0dGluZ3MsIG5IZWFkZXIsIGFMYXlvdXQgKVxyXG5cdHtcclxuXHRcdHZhciBhUmV0dXJuID0gW107XHJcblx0XHRpZiAoICFhTGF5b3V0IClcclxuXHRcdHtcclxuXHRcdFx0YUxheW91dCA9IG9TZXR0aW5ncy5hb0hlYWRlcjtcclxuXHRcdFx0aWYgKCBuSGVhZGVyIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGFMYXlvdXQgPSBbXTtcclxuXHRcdFx0XHRfZm5EZXRlY3RIZWFkZXIoIGFMYXlvdXQsIG5IZWFkZXIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Zm9yICggdmFyIGk9MCwgaUxlbj1hTGF5b3V0Lmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHR7XHJcblx0XHRcdGZvciAoIHZhciBqPTAsIGpMZW49YUxheW91dFtpXS5sZW5ndGggOyBqPGpMZW4gOyBqKysgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYgKCBhTGF5b3V0W2ldW2pdLnVuaXF1ZSAmJlxyXG5cdFx0XHRcdFx0ICghYVJldHVybltqXSB8fCAhb1NldHRpbmdzLmJTb3J0Q2VsbHNUb3ApIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRhUmV0dXJuW2pdID0gYUxheW91dFtpXVtqXS5jZWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIGFSZXR1cm47XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBhbiBBamF4IGNhbGwgYmFzZWQgb24gdGhlIHRhYmxlJ3Mgc2V0dGluZ3MsIHRha2luZyBpbnRvIGFjY291bnQgdGhhdFxyXG5cdCAqIHBhcmFtZXRlcnMgY2FuIGhhdmUgbXVsdGlwbGUgZm9ybXMsIGFuZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiBAcGFyYW0ge2FycmF5fSBkYXRhIERhdGEgdG8gc2VuZCB0byB0aGUgc2VydmVyLCByZXF1aXJlZCBieVxyXG5cdCAqICAgICBEYXRhVGFibGVzIC0gbWF5IGJlIGF1Z21lbnRlZCBieSBkZXZlbG9wZXIgY2FsbGJhY2tzXHJcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuIHdoZW4gZGF0YSBpcyBvYnRhaW5lZFxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkJ1aWxkQWpheCggb1NldHRpbmdzLCBkYXRhLCBmbiApXHJcblx0e1xyXG5cdFx0Ly8gQ29tcGF0aWJpbGl0eSB3aXRoIDEuOS0sIGFsbG93IGZuU2VydmVyRGF0YSBhbmQgZXZlbnQgdG8gbWFuaXB1bGF0ZVxyXG5cdFx0X2ZuQ2FsbGJhY2tGaXJlKCBvU2V0dGluZ3MsICdhb1NlcnZlclBhcmFtcycsICdzZXJ2ZXJQYXJhbXMnLCBbZGF0YV0gKTtcclxuXHRcclxuXHRcdC8vIENvbnZlcnQgdG8gb2JqZWN0IGJhc2VkIGZvciAxLjEwKyBpZiB1c2luZyB0aGUgb2xkIGFycmF5IHNjaGVtZSB3aGljaCBjYW5cclxuXHRcdC8vIGNvbWUgZnJvbSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIG9yIHNlcnZlclBhcmFtc1xyXG5cdFx0aWYgKCBkYXRhICYmICQuaXNBcnJheShkYXRhKSApIHtcclxuXHRcdFx0dmFyIHRtcCA9IHt9O1xyXG5cdFx0XHR2YXIgcmJyYWNrZXQgPSAvKC4qPylcXFtcXF0kLztcclxuXHRcclxuXHRcdFx0JC5lYWNoKCBkYXRhLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcclxuXHRcdFx0XHR2YXIgbWF0Y2ggPSB2YWwubmFtZS5tYXRjaChyYnJhY2tldCk7XHJcblx0XHJcblx0XHRcdFx0aWYgKCBtYXRjaCApIHtcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQgZm9yIGFycmF5c1xyXG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBtYXRjaFswXTtcclxuXHRcclxuXHRcdFx0XHRcdGlmICggISB0bXBbIG5hbWUgXSApIHtcclxuXHRcdFx0XHRcdFx0dG1wWyBuYW1lIF0gPSBbXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRtcFsgbmFtZSBdLnB1c2goIHZhbC52YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHRtcFt2YWwubmFtZV0gPSB2YWwudmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHRcdGRhdGEgPSB0bXA7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgYWpheERhdGE7XHJcblx0XHR2YXIgYWpheCA9IG9TZXR0aW5ncy5hamF4O1xyXG5cdFx0dmFyIGluc3RhbmNlID0gb1NldHRpbmdzLm9JbnN0YW5jZTtcclxuXHRcdHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgganNvbiApIHtcclxuXHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBvU2V0dGluZ3MsIG51bGwsICd4aHInLCBbb1NldHRpbmdzLCBqc29uLCBvU2V0dGluZ3MuanFYSFJdICk7XHJcblx0XHRcdGZuKCBqc29uICk7XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIGFqYXggKSAmJiBhamF4LmRhdGEgKVxyXG5cdFx0e1xyXG5cdFx0XHRhamF4RGF0YSA9IGFqYXguZGF0YTtcclxuXHRcclxuXHRcdFx0dmFyIG5ld0RhdGEgPSAkLmlzRnVuY3Rpb24oIGFqYXhEYXRhICkgP1xyXG5cdFx0XHRcdGFqYXhEYXRhKCBkYXRhLCBvU2V0dGluZ3MgKSA6ICAvLyBmbiBjYW4gbWFuaXB1bGF0ZSBkYXRhIG9yIHJldHVyblxyXG5cdFx0XHRcdGFqYXhEYXRhOyAgICAgICAgICAgICAgICAgICAgICAvLyBhbiBvYmplY3Qgb2JqZWN0IG9yIGFycmF5IHRvIG1lcmdlXHJcblx0XHJcblx0XHRcdC8vIElmIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBzb21ldGhpbmcsIHVzZSB0aGF0IGFsb25lXHJcblx0XHRcdGRhdGEgPSAkLmlzRnVuY3Rpb24oIGFqYXhEYXRhICkgJiYgbmV3RGF0YSA/XHJcblx0XHRcdFx0bmV3RGF0YSA6XHJcblx0XHRcdFx0JC5leHRlbmQoIHRydWUsIGRhdGEsIG5ld0RhdGEgKTtcclxuXHRcclxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBkYXRhIHByb3BlcnR5IGFzIHdlJ3ZlIHJlc29sdmVkIGl0IGFscmVhZHkgYW5kIGRvbid0IHdhbnRcclxuXHRcdFx0Ly8galF1ZXJ5IHRvIGRvIGl0IGFnYWluIChpdCBpcyByZXN0b3JlZCBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbilcclxuXHRcdFx0ZGVsZXRlIGFqYXguZGF0YTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBiYXNlQWpheCA9IHtcclxuXHRcdFx0XCJkYXRhXCI6IGRhdGEsXHJcblx0XHRcdFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAoanNvbikge1xyXG5cdFx0XHRcdHZhciBlcnJvciA9IGpzb24uZXJyb3IgfHwganNvbi5zRXJyb3I7XHJcblx0XHRcdFx0aWYgKCBlcnJvciApIHtcclxuXHRcdFx0XHRcdF9mbkxvZyggb1NldHRpbmdzLCAwLCBlcnJvciApO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRvU2V0dGluZ3MuanNvbiA9IGpzb247XHJcblx0XHRcdFx0Y2FsbGJhY2soIGpzb24gKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0XCJkYXRhVHlwZVwiOiBcImpzb25cIixcclxuXHRcdFx0XCJjYWNoZVwiOiBmYWxzZSxcclxuXHRcdFx0XCJ0eXBlXCI6IG9TZXR0aW5ncy5zU2VydmVyTWV0aG9kLFxyXG5cdFx0XHRcImVycm9yXCI6IGZ1bmN0aW9uICh4aHIsIGVycm9yLCB0aHJvd24pIHtcclxuXHRcdFx0XHR2YXIgcmV0ID0gX2ZuQ2FsbGJhY2tGaXJlKCBvU2V0dGluZ3MsIG51bGwsICd4aHInLCBbb1NldHRpbmdzLCBudWxsLCBvU2V0dGluZ3MuanFYSFJdICk7XHJcblx0XHJcblx0XHRcdFx0aWYgKCAkLmluQXJyYXkoIHRydWUsIHJldCApID09PSAtMSApIHtcclxuXHRcdFx0XHRcdGlmICggZXJyb3IgPT0gXCJwYXJzZXJlcnJvclwiICkge1xyXG5cdFx0XHRcdFx0XHRfZm5Mb2coIG9TZXR0aW5ncywgMCwgJ0ludmFsaWQgSlNPTiByZXNwb25zZScsIDEgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcclxuXHRcdFx0XHRcdFx0X2ZuTG9nKCBvU2V0dGluZ3MsIDAsICdBamF4IGVycm9yJywgNyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggb1NldHRpbmdzLCBmYWxzZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0Ly8gU3RvcmUgdGhlIGRhdGEgc3VibWl0dGVkIGZvciB0aGUgQVBJXHJcblx0XHRvU2V0dGluZ3Mub0FqYXhEYXRhID0gZGF0YTtcclxuXHRcclxuXHRcdC8vIEFsbG93IHBsdWctaW5zIGFuZCBleHRlcm5hbCBwcm9jZXNzZXMgdG8gbW9kaWZ5IHRoZSBkYXRhXHJcblx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgbnVsbCwgJ3ByZVhocicsIFtvU2V0dGluZ3MsIGRhdGFdICk7XHJcblx0XHJcblx0XHRpZiAoIG9TZXR0aW5ncy5mblNlcnZlckRhdGEgKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBEYXRhVGFibGVzIDEuOS0gY29tcGF0aWJpbGl0eVxyXG5cdFx0XHRvU2V0dGluZ3MuZm5TZXJ2ZXJEYXRhLmNhbGwoIGluc3RhbmNlLFxyXG5cdFx0XHRcdG9TZXR0aW5ncy5zQWpheFNvdXJjZSxcclxuXHRcdFx0XHQkLm1hcCggZGF0YSwgZnVuY3Rpb24gKHZhbCwga2V5KSB7IC8vIE5lZWQgdG8gY29udmVydCBiYWNrIHRvIDEuOSB0cmFkIGZvcm1hdFxyXG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZToga2V5LCB2YWx1ZTogdmFsIH07XHJcblx0XHRcdFx0fSApLFxyXG5cdFx0XHRcdGNhbGxiYWNrLFxyXG5cdFx0XHRcdG9TZXR0aW5nc1xyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIG9TZXR0aW5ncy5zQWpheFNvdXJjZSB8fCB0eXBlb2YgYWpheCA9PT0gJ3N0cmluZycgKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBEYXRhVGFibGVzIDEuOS0gY29tcGF0aWJpbGl0eVxyXG5cdFx0XHRvU2V0dGluZ3MuanFYSFIgPSAkLmFqYXgoICQuZXh0ZW5kKCBiYXNlQWpheCwge1xyXG5cdFx0XHRcdHVybDogYWpheCB8fCBvU2V0dGluZ3Muc0FqYXhTb3VyY2VcclxuXHRcdFx0fSApICk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggJC5pc0Z1bmN0aW9uKCBhamF4ICkgKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBJcyBhIGZ1bmN0aW9uIC0gbGV0IHRoZSBjYWxsZXIgZGVmaW5lIHdoYXQgbmVlZHMgdG8gYmUgZG9uZVxyXG5cdFx0XHRvU2V0dGluZ3MuanFYSFIgPSBhamF4LmNhbGwoIGluc3RhbmNlLCBkYXRhLCBjYWxsYmFjaywgb1NldHRpbmdzICk7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdC8vIE9iamVjdCB0byBleHRlbmQgdGhlIGJhc2Ugc2V0dGluZ3NcclxuXHRcdFx0b1NldHRpbmdzLmpxWEhSID0gJC5hamF4KCAkLmV4dGVuZCggYmFzZUFqYXgsIGFqYXggKSApO1xyXG5cdFxyXG5cdFx0XHQvLyBSZXN0b3JlIGZvciBuZXh0IHRpbWUgYXJvdW5kXHJcblx0XHRcdGFqYXguZGF0YSA9IGFqYXhEYXRhO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBVcGRhdGUgdGhlIHRhYmxlIHVzaW5nIGFuIEFqYXggY2FsbFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHJldHVybnMge2Jvb2xlYW59IEJsb2NrIHRoZSB0YWJsZSBkcmF3aW5nIG9yIG5vdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5BamF4VXBkYXRlKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0aWYgKCBzZXR0aW5ncy5iQWpheERhdGFHZXQgKSB7XHJcblx0XHRcdHNldHRpbmdzLmlEcmF3Kys7XHJcblx0XHRcdF9mblByb2Nlc3NpbmdEaXNwbGF5KCBzZXR0aW5ncywgdHJ1ZSApO1xyXG5cdFxyXG5cdFx0XHRfZm5CdWlsZEFqYXgoXHJcblx0XHRcdFx0c2V0dGluZ3MsXHJcblx0XHRcdFx0X2ZuQWpheFBhcmFtZXRlcnMoIHNldHRpbmdzICksXHJcblx0XHRcdFx0ZnVuY3Rpb24oanNvbikge1xyXG5cdFx0XHRcdFx0X2ZuQWpheFVwZGF0ZURyYXcoIHNldHRpbmdzLCBqc29uICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQnVpbGQgdXAgdGhlIHBhcmFtZXRlcnMgaW4gYW4gb2JqZWN0IG5lZWRlZCBmb3IgYSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXHJcblx0ICogcmVxdWVzdC4gTm90ZSB0aGF0IHRoaXMgaXMgYmFzaWNhbGx5IGRvbmUgdHdpY2UsIGlzIGRpZmZlcmVudCB3YXlzIC0gYSBtb2Rlcm5cclxuXHQgKiBtZXRob2Qgd2hpY2ggaXMgdXNlZCBieSBkZWZhdWx0IGluIERhdGFUYWJsZXMgMS4xMCB3aGljaCB1c2VzIG9iamVjdHMgYW5kXHJcblx0ICogYXJyYXlzLCBvciB0aGUgMS45LSBtZXRob2Qgd2l0aCBpcyBuYW1lIC8gdmFsdWUgcGFpcnMuIDEuOSBtZXRob2QgaXMgdXNlZCBpZlxyXG5cdCAqIHRoZSBzQWpheFNvdXJjZSBvcHRpb24gaXMgdXNlZCBpbiB0aGUgaW5pdGlhbGlzYXRpb24sIG9yIHRoZSBsZWdhY3lBamF4XHJcblx0ICogb3B0aW9uIGlzIHNldC5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcmV0dXJucyB7Ym9vbH0gYmxvY2sgdGhlIHRhYmxlIGRyYXdpbmcgb3Igbm90XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkFqYXhQYXJhbWV0ZXJzKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnMsXHJcblx0XHRcdGNvbHVtbkNvdW50ID0gY29sdW1ucy5sZW5ndGgsXHJcblx0XHRcdGZlYXR1cmVzID0gc2V0dGluZ3Mub0ZlYXR1cmVzLFxyXG5cdFx0XHRwcmVTZWFyY2ggPSBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsXHJcblx0XHRcdHByZUNvbFNlYXJjaCA9IHNldHRpbmdzLmFvUHJlU2VhcmNoQ29scyxcclxuXHRcdFx0aSwgZGF0YSA9IFtdLCBkYXRhUHJvcCwgY29sdW1uLCBjb2x1bW5TZWFyY2gsXHJcblx0XHRcdHNvcnQgPSBfZm5Tb3J0RmxhdHRlbiggc2V0dGluZ3MgKSxcclxuXHRcdFx0ZGlzcGxheVN0YXJ0ID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQsXHJcblx0XHRcdGRpc3BsYXlMZW5ndGggPSBmZWF0dXJlcy5iUGFnaW5hdGUgIT09IGZhbHNlID9cclxuXHRcdFx0XHRzZXR0aW5ncy5faURpc3BsYXlMZW5ndGggOlxyXG5cdFx0XHRcdC0xO1xyXG5cdFxyXG5cdFx0dmFyIHBhcmFtID0gZnVuY3Rpb24gKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0ZGF0YS5wdXNoKCB7ICduYW1lJzogbmFtZSwgJ3ZhbHVlJzogdmFsdWUgfSApO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIERhdGFUYWJsZXMgMS45LSBjb21wYXRpYmxlIG1ldGhvZFxyXG5cdFx0cGFyYW0oICdzRWNobycsICAgICAgICAgIHNldHRpbmdzLmlEcmF3ICk7XHJcblx0XHRwYXJhbSggJ2lDb2x1bW5zJywgICAgICAgY29sdW1uQ291bnQgKTtcclxuXHRcdHBhcmFtKCAnc0NvbHVtbnMnLCAgICAgICBfcGx1Y2soIGNvbHVtbnMsICdzTmFtZScgKS5qb2luKCcsJykgKTtcclxuXHRcdHBhcmFtKCAnaURpc3BsYXlTdGFydCcsICBkaXNwbGF5U3RhcnQgKTtcclxuXHRcdHBhcmFtKCAnaURpc3BsYXlMZW5ndGgnLCBkaXNwbGF5TGVuZ3RoICk7XHJcblx0XHJcblx0XHQvLyBEYXRhVGFibGVzIDEuMTArIG1ldGhvZFxyXG5cdFx0dmFyIGQgPSB7XHJcblx0XHRcdGRyYXc6ICAgIHNldHRpbmdzLmlEcmF3LFxyXG5cdFx0XHRjb2x1bW5zOiBbXSxcclxuXHRcdFx0b3JkZXI6ICAgW10sXHJcblx0XHRcdHN0YXJ0OiAgIGRpc3BsYXlTdGFydCxcclxuXHRcdFx0bGVuZ3RoOiAgZGlzcGxheUxlbmd0aCxcclxuXHRcdFx0c2VhcmNoOiAge1xyXG5cdFx0XHRcdHZhbHVlOiBwcmVTZWFyY2guc1NlYXJjaCxcclxuXHRcdFx0XHRyZWdleDogcHJlU2VhcmNoLmJSZWdleFxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0Zm9yICggaT0wIDsgaTxjb2x1bW5Db3VudCA7IGkrKyApIHtcclxuXHRcdFx0Y29sdW1uID0gY29sdW1uc1tpXTtcclxuXHRcdFx0Y29sdW1uU2VhcmNoID0gcHJlQ29sU2VhcmNoW2ldO1xyXG5cdFx0XHRkYXRhUHJvcCA9IHR5cGVvZiBjb2x1bW4ubURhdGE9PVwiZnVuY3Rpb25cIiA/ICdmdW5jdGlvbicgOiBjb2x1bW4ubURhdGEgO1xyXG5cdFxyXG5cdFx0XHRkLmNvbHVtbnMucHVzaCgge1xyXG5cdFx0XHRcdGRhdGE6ICAgICAgIGRhdGFQcm9wLFxyXG5cdFx0XHRcdG5hbWU6ICAgICAgIGNvbHVtbi5zTmFtZSxcclxuXHRcdFx0XHRzZWFyY2hhYmxlOiBjb2x1bW4uYlNlYXJjaGFibGUsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiAgY29sdW1uLmJTb3J0YWJsZSxcclxuXHRcdFx0XHRzZWFyY2g6ICAgICB7XHJcblx0XHRcdFx0XHR2YWx1ZTogY29sdW1uU2VhcmNoLnNTZWFyY2gsXHJcblx0XHRcdFx0XHRyZWdleDogY29sdW1uU2VhcmNoLmJSZWdleFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFxyXG5cdFx0XHRwYXJhbSggXCJtRGF0YVByb3BfXCIraSwgZGF0YVByb3AgKTtcclxuXHRcclxuXHRcdFx0aWYgKCBmZWF0dXJlcy5iRmlsdGVyICkge1xyXG5cdFx0XHRcdHBhcmFtKCAnc1NlYXJjaF8nK2ksICAgICBjb2x1bW5TZWFyY2guc1NlYXJjaCApO1xyXG5cdFx0XHRcdHBhcmFtKCAnYlJlZ2V4XycraSwgICAgICBjb2x1bW5TZWFyY2guYlJlZ2V4ICk7XHJcblx0XHRcdFx0cGFyYW0oICdiU2VhcmNoYWJsZV8nK2ksIGNvbHVtbi5iU2VhcmNoYWJsZSApO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdGlmICggZmVhdHVyZXMuYlNvcnQgKSB7XHJcblx0XHRcdFx0cGFyYW0oICdiU29ydGFibGVfJytpLCBjb2x1bW4uYlNvcnRhYmxlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggZmVhdHVyZXMuYkZpbHRlciApIHtcclxuXHRcdFx0cGFyYW0oICdzU2VhcmNoJywgcHJlU2VhcmNoLnNTZWFyY2ggKTtcclxuXHRcdFx0cGFyYW0oICdiUmVnZXgnLCBwcmVTZWFyY2guYlJlZ2V4ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGZlYXR1cmVzLmJTb3J0ICkge1xyXG5cdFx0XHQkLmVhY2goIHNvcnQsIGZ1bmN0aW9uICggaSwgdmFsICkge1xyXG5cdFx0XHRcdGQub3JkZXIucHVzaCggeyBjb2x1bW46IHZhbC5jb2wsIGRpcjogdmFsLmRpciB9ICk7XHJcblx0XHJcblx0XHRcdFx0cGFyYW0oICdpU29ydENvbF8nK2ksIHZhbC5jb2wgKTtcclxuXHRcdFx0XHRwYXJhbSggJ3NTb3J0RGlyXycraSwgdmFsLmRpciApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHJcblx0XHRcdHBhcmFtKCAnaVNvcnRpbmdDb2xzJywgc29ydC5sZW5ndGggKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIElmIHRoZSBsZWdhY3kuYWpheCBwYXJhbWV0ZXIgaXMgbnVsbCwgdGhlbiB3ZSBhdXRvbWF0aWNhbGx5IGRlY2lkZSB3aGljaFxyXG5cdFx0Ly8gZm9ybSB0byB1c2UsIGJhc2VkIG9uIHNBamF4U291cmNlXHJcblx0XHR2YXIgbGVnYWN5ID0gRGF0YVRhYmxlLmV4dC5sZWdhY3kuYWpheDtcclxuXHRcdGlmICggbGVnYWN5ID09PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3Muc0FqYXhTb3VyY2UgPyBkYXRhIDogZDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIE90aGVyd2lzZSwgaWYgbGVnYWN5IGhhcyBiZWVuIHNwZWNpZmllZCB0aGVuIHdlIHVzZSB0aGF0IHRvIGRlY2lkZSBvbiB0aGVcclxuXHRcdC8vIGZvcm1cclxuXHRcdHJldHVybiBsZWdhY3kgPyBkYXRhIDogZDtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRGF0YSB0aGUgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgKG51a2luZyB0aGUgb2xkKSBhbmQgcmVkcmF3IHRoZSB0YWJsZVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBqc29uIGpzb24gZGF0YSByZXR1cm4gZnJvbSB0aGUgc2VydmVyLlxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30ganNvbi5zRWNobyBUcmFja2luZyBmbGFnIGZvciBEYXRhVGFibGVzIHRvIG1hdGNoIHJlcXVlc3RzXHJcblx0ICogIEBwYXJhbSB7aW50fSBqc29uLmlUb3RhbFJlY29yZHMgTnVtYmVyIG9mIHJlY29yZHMgaW4gdGhlIGRhdGEgc2V0LCBub3QgYWNjb3VudGluZyBmb3IgZmlsdGVyaW5nXHJcblx0ICogIEBwYXJhbSB7aW50fSBqc29uLmlUb3RhbERpc3BsYXlSZWNvcmRzIE51bWJlciBvZiByZWNvcmRzIGluIHRoZSBkYXRhIHNldCwgYWNjb3VudGluZyBmb3IgZmlsdGVyaW5nXHJcblx0ICogIEBwYXJhbSB7YXJyYXl9IGpzb24uYWFEYXRhIFRoZSBkYXRhIHRvIGRpc3BsYXkgb24gdGhpcyBwYWdlXHJcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBbanNvbi5zQ29sdW1uc10gQ29sdW1uIG9yZGVyaW5nIChzTmFtZSwgY29tbWEgc2VwYXJhdGVkKVxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5BamF4VXBkYXRlRHJhdyAoIHNldHRpbmdzLCBqc29uIClcclxuXHR7XHJcblx0XHQvLyB2MS4xMCB1c2VzIGNhbWVsQ2FzZSB2YXJpYWJsZXMsIHdoaWxlIDEuOSB1c2VzIEh1bmdhcmlhbiBub3RhdGlvbi5cclxuXHRcdC8vIFN1cHBvcnQgYm90aFxyXG5cdFx0dmFyIGNvbXBhdCA9IGZ1bmN0aW9uICggb2xkLCBtb2Rlcm4gKSB7XHJcblx0XHRcdHJldHVybiBqc29uW29sZF0gIT09IHVuZGVmaW5lZCA/IGpzb25bb2xkXSA6IGpzb25bbW9kZXJuXTtcclxuXHRcdH07XHJcblx0XHJcblx0XHR2YXIgZGF0YSA9IF9mbkFqYXhEYXRhU3JjKCBzZXR0aW5ncywganNvbiApO1xyXG5cdFx0dmFyIGRyYXcgICAgICAgICAgICA9IGNvbXBhdCggJ3NFY2hvJywgICAgICAgICAgICAgICAgJ2RyYXcnICk7XHJcblx0XHR2YXIgcmVjb3Jkc1RvdGFsICAgID0gY29tcGF0KCAnaVRvdGFsUmVjb3JkcycsICAgICAgICAncmVjb3Jkc1RvdGFsJyApO1xyXG5cdFx0dmFyIHJlY29yZHNGaWx0ZXJlZCA9IGNvbXBhdCggJ2lUb3RhbERpc3BsYXlSZWNvcmRzJywgJ3JlY29yZHNGaWx0ZXJlZCcgKTtcclxuXHRcclxuXHRcdGlmICggZHJhdyApIHtcclxuXHRcdFx0Ly8gUHJvdGVjdCBhZ2FpbnN0IG91dCBvZiBzZXF1ZW5jZSByZXR1cm5zXHJcblx0XHRcdGlmICggZHJhdyoxIDwgc2V0dGluZ3MuaURyYXcgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNldHRpbmdzLmlEcmF3ID0gZHJhdyAqIDE7XHJcblx0XHR9XHJcblx0XHJcblx0XHRfZm5DbGVhclRhYmxlKCBzZXR0aW5ncyApO1xyXG5cdFx0c2V0dGluZ3MuX2lSZWNvcmRzVG90YWwgICA9IHBhcnNlSW50KHJlY29yZHNUb3RhbCwgMTApO1xyXG5cdFx0c2V0dGluZ3MuX2lSZWNvcmRzRGlzcGxheSA9IHBhcnNlSW50KHJlY29yZHNGaWx0ZXJlZCwgMTApO1xyXG5cdFxyXG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPWRhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdF9mbkFkZERhdGEoIHNldHRpbmdzLCBkYXRhW2ldICk7XHJcblx0XHR9XHJcblx0XHRzZXR0aW5ncy5haURpc3BsYXkgPSBzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXIuc2xpY2UoKTtcclxuXHRcclxuXHRcdHNldHRpbmdzLmJBamF4RGF0YUdldCA9IGZhbHNlO1xyXG5cdFx0X2ZuRHJhdyggc2V0dGluZ3MgKTtcclxuXHRcclxuXHRcdGlmICggISBzZXR0aW5ncy5fYkluaXRDb21wbGV0ZSApIHtcclxuXHRcdFx0X2ZuSW5pdENvbXBsZXRlKCBzZXR0aW5ncywganNvbiApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0c2V0dGluZ3MuYkFqYXhEYXRhR2V0ID0gdHJ1ZTtcclxuXHRcdF9mblByb2Nlc3NpbmdEaXNwbGF5KCBzZXR0aW5ncywgZmFsc2UgKTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IHRoZSBkYXRhIGZyb20gdGhlIEpTT04gZGF0YSBzb3VyY2UgdG8gdXNlIGZvciBkcmF3aW5nIGEgdGFibGUuIFVzaW5nXHJcblx0ICogYF9mbkdldE9iamVjdERhdGFGbmAgYWxsb3dzIHRoZSBkYXRhIHRvIGJlIHNvdXJjZWQgZnJvbSBhIHByb3BlcnR5IG9mIHRoZVxyXG5cdCAqIHNvdXJjZSBvYmplY3QsIG9yIGZyb20gYSBwcm9jZXNzaW5nIGZ1bmN0aW9uLlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSAge29iamVjdH0ganNvbiBEYXRhIHNvdXJjZSBvYmplY3QgLyBhcnJheSBmcm9tIHRoZSBzZXJ2ZXJcclxuXHQgKiAgQHJldHVybiB7YXJyYXl9IEFycmF5IG9mIGRhdGEgdG8gdXNlXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQWpheERhdGFTcmMgKCBvU2V0dGluZ3MsIGpzb24gKVxyXG5cdHtcclxuXHRcdHZhciBkYXRhU3JjID0gJC5pc1BsYWluT2JqZWN0KCBvU2V0dGluZ3MuYWpheCApICYmIG9TZXR0aW5ncy5hamF4LmRhdGFTcmMgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdG9TZXR0aW5ncy5hamF4LmRhdGFTcmMgOlxyXG5cdFx0XHRvU2V0dGluZ3Muc0FqYXhEYXRhUHJvcDsgLy8gQ29tcGF0aWJpbGl0eSB3aXRoIDEuOS0uXHJcblx0XHJcblx0XHQvLyBDb21wYXRpYmlsaXR5IHdpdGggMS45LS4gSW4gb3JkZXIgdG8gcmVhZCBmcm9tIGFhRGF0YSwgY2hlY2sgaWYgdGhlXHJcblx0XHQvLyBkZWZhdWx0IGhhcyBiZWVuIGNoYW5nZWQsIGlmIG5vdCwgY2hlY2sgZm9yIGFhRGF0YVxyXG5cdFx0aWYgKCBkYXRhU3JjID09PSAnZGF0YScgKSB7XHJcblx0XHRcdHJldHVybiBqc29uLmFhRGF0YSB8fCBqc29uW2RhdGFTcmNdO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIGRhdGFTcmMgIT09IFwiXCIgP1xyXG5cdFx0XHRfZm5HZXRPYmplY3REYXRhRm4oIGRhdGFTcmMgKSgganNvbiApIDpcclxuXHRcdFx0anNvbjtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2VuZXJhdGUgdGhlIG5vZGUgcmVxdWlyZWQgZm9yIGZpbHRlcmluZyB0ZXh0XHJcblx0ICogIEByZXR1cm5zIHtub2RlfSBGaWx0ZXIgY29udHJvbCBlbGVtZW50XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuRmVhdHVyZUh0bWxGaWx0ZXIgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyIGNsYXNzZXMgPSBzZXR0aW5ncy5vQ2xhc3NlcztcclxuXHRcdHZhciB0YWJsZUlkID0gc2V0dGluZ3Muc1RhYmxlSWQ7XHJcblx0XHR2YXIgbGFuZ3VhZ2UgPSBzZXR0aW5ncy5vTGFuZ3VhZ2U7XHJcblx0XHR2YXIgcHJldmlvdXNTZWFyY2ggPSBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2g7XHJcblx0XHR2YXIgZmVhdHVyZXMgPSBzZXR0aW5ncy5hYW5GZWF0dXJlcztcclxuXHRcdHZhciBpbnB1dCA9ICc8aW5wdXQgdHlwZT1cInNlYXJjaFwiIGNsYXNzPVwiJytjbGFzc2VzLnNGaWx0ZXJJbnB1dCsnXCIvPic7XHJcblx0XHJcblx0XHR2YXIgc3RyID0gbGFuZ3VhZ2Uuc1NlYXJjaDtcclxuXHRcdHN0ciA9IHN0ci5tYXRjaCgvX0lOUFVUXy8pID9cclxuXHRcdFx0c3RyLnJlcGxhY2UoJ19JTlBVVF8nLCBpbnB1dCkgOlxyXG5cdFx0XHRzdHIraW5wdXQ7XHJcblx0XHJcblx0XHR2YXIgZmlsdGVyID0gJCgnPGRpdi8+Jywge1xyXG5cdFx0XHRcdCdpZCc6ICEgZmVhdHVyZXMuZiA/IHRhYmxlSWQrJ19maWx0ZXInIDogbnVsbCxcclxuXHRcdFx0XHQnY2xhc3MnOiBjbGFzc2VzLnNGaWx0ZXJcclxuXHRcdFx0fSApXHJcblx0XHRcdC5hcHBlbmQoICQoJzxsYWJlbC8+JyApLmFwcGVuZCggc3RyICkgKTtcclxuXHRcclxuXHRcdHZhciBzZWFyY2hGbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvKiBVcGRhdGUgYWxsIG90aGVyIGZpbHRlciBpbnB1dCBlbGVtZW50cyBmb3IgdGhlIG5ldyBkaXNwbGF5ICovXHJcblx0XHRcdHZhciBuID0gZmVhdHVyZXMuZjtcclxuXHRcdFx0dmFyIHZhbCA9ICF0aGlzLnZhbHVlID8gXCJcIiA6IHRoaXMudmFsdWU7IC8vIG1lbnRhbCBJRTggZml4IDotKFxyXG5cdFxyXG5cdFx0XHQvKiBOb3cgZG8gdGhlIGZpbHRlciAqL1xyXG5cdFx0XHRpZiAoIHZhbCAhPSBwcmV2aW91c1NlYXJjaC5zU2VhcmNoICkge1xyXG5cdFx0XHRcdF9mbkZpbHRlckNvbXBsZXRlKCBzZXR0aW5ncywge1xyXG5cdFx0XHRcdFx0XCJzU2VhcmNoXCI6IHZhbCxcclxuXHRcdFx0XHRcdFwiYlJlZ2V4XCI6IHByZXZpb3VzU2VhcmNoLmJSZWdleCxcclxuXHRcdFx0XHRcdFwiYlNtYXJ0XCI6IHByZXZpb3VzU2VhcmNoLmJTbWFydCAsXHJcblx0XHRcdFx0XHRcImJDYXNlSW5zZW5zaXRpdmVcIjogcHJldmlvdXNTZWFyY2guYkNhc2VJbnNlbnNpdGl2ZVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcclxuXHRcdFx0XHQvLyBOZWVkIHRvIHJlZHJhdywgd2l0aG91dCByZXNvcnRpbmdcclxuXHRcdFx0XHRzZXR0aW5ncy5faURpc3BsYXlTdGFydCA9IDA7XHJcblx0XHRcdFx0X2ZuRHJhdyggc2V0dGluZ3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcclxuXHRcdHZhciBzZWFyY2hEZWxheSA9IHNldHRpbmdzLnNlYXJjaERlbGF5ICE9PSBudWxsID9cclxuXHRcdFx0c2V0dGluZ3Muc2VhcmNoRGVsYXkgOlxyXG5cdFx0XHRfZm5EYXRhU291cmNlKCBzZXR0aW5ncyApID09PSAnc3NwJyA/XHJcblx0XHRcdFx0NDAwIDpcclxuXHRcdFx0XHQwO1xyXG5cdFxyXG5cdFx0dmFyIGpxRmlsdGVyID0gJCgnaW5wdXQnLCBmaWx0ZXIpXHJcblx0XHRcdC52YWwoIHByZXZpb3VzU2VhcmNoLnNTZWFyY2ggKVxyXG5cdFx0XHQuYXR0ciggJ3BsYWNlaG9sZGVyJywgbGFuZ3VhZ2Uuc1NlYXJjaFBsYWNlaG9sZGVyIClcclxuXHRcdFx0LmJpbmQoXHJcblx0XHRcdFx0J2tleXVwLkRUIHNlYXJjaC5EVCBpbnB1dC5EVCBwYXN0ZS5EVCBjdXQuRFQnLFxyXG5cdFx0XHRcdHNlYXJjaERlbGF5ID9cclxuXHRcdFx0XHRcdF9mblRocm90dGxlKCBzZWFyY2hGbiwgc2VhcmNoRGVsYXkgKSA6XHJcblx0XHRcdFx0XHRzZWFyY2hGblxyXG5cdFx0XHQpXHJcblx0XHRcdC5iaW5kKCAna2V5cHJlc3MuRFQnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0LyogUHJldmVudCBmb3JtIHN1Ym1pc3Npb24gKi9cclxuXHRcdFx0XHRpZiAoIGUua2V5Q29kZSA9PSAxMyApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKVxyXG5cdFx0XHQuYXR0cignYXJpYS1jb250cm9scycsIHRhYmxlSWQpO1xyXG5cdFxyXG5cdFx0Ly8gVXBkYXRlIHRoZSBpbnB1dCBlbGVtZW50cyB3aGVuZXZlciB0aGUgdGFibGUgaXMgZmlsdGVyZWRcclxuXHRcdCQoc2V0dGluZ3MublRhYmxlKS5vbiggJ3NlYXJjaC5kdC5EVCcsIGZ1bmN0aW9uICggZXYsIHMgKSB7XHJcblx0XHRcdGlmICggc2V0dGluZ3MgPT09IHMgKSB7XHJcblx0XHRcdFx0Ly8gSUU5IHRocm93cyBhbiAndW5rbm93biBlcnJvcicgaWYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpcyB1c2VkXHJcblx0XHRcdFx0Ly8gaW5zaWRlIGFuIGlmcmFtZSBvciBmcmFtZS4uLlxyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRpZiAoIGpxRmlsdGVyWzBdICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICkge1xyXG5cdFx0XHRcdFx0XHRqcUZpbHRlci52YWwoIHByZXZpb3VzU2VhcmNoLnNTZWFyY2ggKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y2F0Y2ggKCBlICkge31cclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZpbHRlclswXTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmlsdGVyIHRoZSB0YWJsZSB1c2luZyBib3RoIHRoZSBnbG9iYWwgZmlsdGVyIGFuZCBjb2x1bW4gYmFzZWQgZmlsdGVyaW5nXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZWFyY2ggc2VhcmNoIGluZm9ybWF0aW9uXHJcblx0ICogIEBwYXJhbSB7aW50fSBbaUZvcmNlXSBmb3JjZSBhIHJlc2VhcmNoIG9mIHRoZSBtYXN0ZXIgYXJyYXkgKDEpIG9yIG5vdCAodW5kZWZpbmVkIG9yIDApXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkZpbHRlckNvbXBsZXRlICggb1NldHRpbmdzLCBvSW5wdXQsIGlGb3JjZSApXHJcblx0e1xyXG5cdFx0dmFyIG9QcmV2U2VhcmNoID0gb1NldHRpbmdzLm9QcmV2aW91c1NlYXJjaDtcclxuXHRcdHZhciBhb1ByZXZTZWFyY2ggPSBvU2V0dGluZ3MuYW9QcmVTZWFyY2hDb2xzO1xyXG5cdFx0dmFyIGZuU2F2ZUZpbHRlciA9IGZ1bmN0aW9uICggb0ZpbHRlciApIHtcclxuXHRcdFx0LyogU2F2ZSB0aGUgZmlsdGVyaW5nIHZhbHVlcyAqL1xyXG5cdFx0XHRvUHJldlNlYXJjaC5zU2VhcmNoID0gb0ZpbHRlci5zU2VhcmNoO1xyXG5cdFx0XHRvUHJldlNlYXJjaC5iUmVnZXggPSBvRmlsdGVyLmJSZWdleDtcclxuXHRcdFx0b1ByZXZTZWFyY2guYlNtYXJ0ID0gb0ZpbHRlci5iU21hcnQ7XHJcblx0XHRcdG9QcmV2U2VhcmNoLmJDYXNlSW5zZW5zaXRpdmUgPSBvRmlsdGVyLmJDYXNlSW5zZW5zaXRpdmU7XHJcblx0XHR9O1xyXG5cdFx0dmFyIGZuUmVnZXggPSBmdW5jdGlvbiAoIG8gKSB7XHJcblx0XHRcdC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGJFc2NhcGVSZWdleCBvcHRpb25cclxuXHRcdFx0cmV0dXJuIG8uYkVzY2FwZVJlZ2V4ICE9PSB1bmRlZmluZWQgPyAhby5iRXNjYXBlUmVnZXggOiBvLmJSZWdleDtcclxuXHRcdH07XHJcblx0XHJcblx0XHQvLyBSZXNvbHZlIGFueSBjb2x1bW4gdHlwZXMgdGhhdCBhcmUgdW5rbm93biBkdWUgdG8gYWRkaXRpb24gb3IgaW52YWxpZGF0aW9uXHJcblx0XHQvLyBAdG9kbyBBcyBwZXIgc29ydCAtIGNhbiB0aGlzIGJlIG1vdmVkIGludG8gYW4gZXZlbnQgaGFuZGxlcj9cclxuXHRcdF9mbkNvbHVtblR5cGVzKCBvU2V0dGluZ3MgKTtcclxuXHRcclxuXHRcdC8qIEluIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcgYWxsIGZpbHRlcmluZyBpcyBkb25lIGJ5IHRoZSBzZXJ2ZXIsIHNvIG5vIHBvaW50IGhhbmdpbmcgYXJvdW5kIGhlcmUgKi9cclxuXHRcdGlmICggX2ZuRGF0YVNvdXJjZSggb1NldHRpbmdzICkgIT0gJ3NzcCcgKVxyXG5cdFx0e1xyXG5cdFx0XHQvKiBHbG9iYWwgZmlsdGVyICovXHJcblx0XHRcdF9mbkZpbHRlciggb1NldHRpbmdzLCBvSW5wdXQuc1NlYXJjaCwgaUZvcmNlLCBmblJlZ2V4KG9JbnB1dCksIG9JbnB1dC5iU21hcnQsIG9JbnB1dC5iQ2FzZUluc2Vuc2l0aXZlICk7XHJcblx0XHRcdGZuU2F2ZUZpbHRlciggb0lucHV0ICk7XHJcblx0XHJcblx0XHRcdC8qIE5vdyBkbyB0aGUgaW5kaXZpZHVhbCBjb2x1bW4gZmlsdGVyICovXHJcblx0XHRcdGZvciAoIHZhciBpPTAgOyBpPGFvUHJldlNlYXJjaC5sZW5ndGggOyBpKysgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0X2ZuRmlsdGVyQ29sdW1uKCBvU2V0dGluZ3MsIGFvUHJldlNlYXJjaFtpXS5zU2VhcmNoLCBpLCBmblJlZ2V4KGFvUHJldlNlYXJjaFtpXSksXHJcblx0XHRcdFx0XHRhb1ByZXZTZWFyY2hbaV0uYlNtYXJ0LCBhb1ByZXZTZWFyY2hbaV0uYkNhc2VJbnNlbnNpdGl2ZSApO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8qIEN1c3RvbSBmaWx0ZXJpbmcgKi9cclxuXHRcdFx0X2ZuRmlsdGVyQ3VzdG9tKCBvU2V0dGluZ3MgKTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0Zm5TYXZlRmlsdGVyKCBvSW5wdXQgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIFRlbGwgdGhlIGRyYXcgZnVuY3Rpb24gd2UgaGF2ZSBiZWVuIGZpbHRlcmluZyAqL1xyXG5cdFx0b1NldHRpbmdzLmJGaWx0ZXJlZCA9IHRydWU7XHJcblx0XHRfZm5DYWxsYmFja0ZpcmUoIG9TZXR0aW5ncywgbnVsbCwgJ3NlYXJjaCcsIFtvU2V0dGluZ3NdICk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFwcGx5IGN1c3RvbSBmaWx0ZXJpbmcgZnVuY3Rpb25zXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuRmlsdGVyQ3VzdG9tKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyIGZpbHRlcnMgPSBEYXRhVGFibGUuZXh0LnNlYXJjaDtcclxuXHRcdHZhciBkaXNwbGF5Um93cyA9IHNldHRpbmdzLmFpRGlzcGxheTtcclxuXHRcdHZhciByb3csIHJvd0lkeDtcclxuXHRcclxuXHRcdGZvciAoIHZhciBpPTAsIGllbj1maWx0ZXJzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHR2YXIgcm93cyA9IFtdO1xyXG5cdFxyXG5cdFx0XHQvLyBMb29wIG92ZXIgZWFjaCByb3cgYW5kIHNlZSBpZiBpdCBzaG91bGQgYmUgaW5jbHVkZWRcclxuXHRcdFx0Zm9yICggdmFyIGo9MCwgamVuPWRpc3BsYXlSb3dzLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xyXG5cdFx0XHRcdHJvd0lkeCA9IGRpc3BsYXlSb3dzWyBqIF07XHJcblx0XHRcdFx0cm93ID0gc2V0dGluZ3MuYW9EYXRhWyByb3dJZHggXTtcclxuXHRcclxuXHRcdFx0XHRpZiAoIGZpbHRlcnNbaV0oIHNldHRpbmdzLCByb3cuX2FGaWx0ZXJEYXRhLCByb3dJZHgsIHJvdy5fYURhdGEsIGogKSApIHtcclxuXHRcdFx0XHRcdHJvd3MucHVzaCggcm93SWR4ICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIFNvIHRoZSBhcnJheSByZWZlcmVuY2UgZG9lc24ndCBicmVhayBzZXQgdGhlIHJlc3VsdHMgaW50byB0aGVcclxuXHRcdFx0Ly8gZXhpc3RpbmcgYXJyYXlcclxuXHRcdFx0ZGlzcGxheVJvd3MubGVuZ3RoID0gMDtcclxuXHRcdFx0JC5tZXJnZSggZGlzcGxheVJvd3MsIHJvd3MgKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmlsdGVyIHRoZSB0YWJsZSBvbiBhIHBlci1jb2x1bW4gYmFzaXNcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gc0lucHV0IHN0cmluZyB0byBmaWx0ZXIgb25cclxuXHQgKiAgQHBhcmFtIHtpbnR9IGlDb2x1bW4gY29sdW1uIHRvIGZpbHRlclxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IGJSZWdleCB0cmVhdCBzZWFyY2ggc3RyaW5nIGFzIGEgcmVndWxhciBleHByZXNzaW9uIG9yIG5vdFxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IGJTbWFydCB1c2Ugc21hcnQgZmlsdGVyaW5nIG9yIG5vdFxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IGJDYXNlSW5zZW5zaXRpdmUgRG8gY2FzZSBpbnNlbnN0aXZlIG1hdGNoaW5nIG9yIG5vdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5GaWx0ZXJDb2x1bW4gKCBzZXR0aW5ncywgc2VhcmNoU3RyLCBjb2xJZHgsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2Vuc2l0aXZlIClcclxuXHR7XHJcblx0XHRpZiAoIHNlYXJjaFN0ciA9PT0gJycgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBkYXRhO1xyXG5cdFx0dmFyIGRpc3BsYXkgPSBzZXR0aW5ncy5haURpc3BsYXk7XHJcblx0XHR2YXIgcnBTZWFyY2ggPSBfZm5GaWx0ZXJDcmVhdGVTZWFyY2goIHNlYXJjaFN0ciwgcmVnZXgsIHNtYXJ0LCBjYXNlSW5zZW5zaXRpdmUgKTtcclxuXHRcclxuXHRcdGZvciAoIHZhciBpPWRpc3BsYXkubGVuZ3RoLTEgOyBpPj0wIDsgaS0tICkge1xyXG5cdFx0XHRkYXRhID0gc2V0dGluZ3MuYW9EYXRhWyBkaXNwbGF5W2ldIF0uX2FGaWx0ZXJEYXRhWyBjb2xJZHggXTtcclxuXHRcclxuXHRcdFx0aWYgKCAhIHJwU2VhcmNoLnRlc3QoIGRhdGEgKSApIHtcclxuXHRcdFx0XHRkaXNwbGF5LnNwbGljZSggaSwgMSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpbHRlciB0aGUgZGF0YSB0YWJsZSBiYXNlZCBvbiB1c2VyIGlucHV0IGFuZCBkcmF3IHRoZSB0YWJsZVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IGlucHV0IHN0cmluZyB0byBmaWx0ZXIgb25cclxuXHQgKiAgQHBhcmFtIHtpbnR9IGZvcmNlIG9wdGlvbmFsIC0gZm9yY2UgYSByZXNlYXJjaCBvZiB0aGUgbWFzdGVyIGFycmF5ICgxKSBvciBub3QgKHVuZGVmaW5lZCBvciAwKVxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IHJlZ2V4IHRyZWF0IGFzIGEgcmVndWxhciBleHByZXNzaW9uIG9yIG5vdFxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IHNtYXJ0IHBlcmZvcm0gc21hcnQgZmlsdGVyaW5nIG9yIG5vdFxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IGNhc2VJbnNlbnNpdGl2ZSBEbyBjYXNlIGluc2Vuc3RpdmUgbWF0Y2hpbmcgb3Igbm90XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkZpbHRlciggc2V0dGluZ3MsIGlucHV0LCBmb3JjZSwgcmVnZXgsIHNtYXJ0LCBjYXNlSW5zZW5zaXRpdmUgKVxyXG5cdHtcclxuXHRcdHZhciBycFNlYXJjaCA9IF9mbkZpbHRlckNyZWF0ZVNlYXJjaCggaW5wdXQsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2Vuc2l0aXZlICk7XHJcblx0XHR2YXIgcHJldlNlYXJjaCA9IHNldHRpbmdzLm9QcmV2aW91c1NlYXJjaC5zU2VhcmNoO1xyXG5cdFx0dmFyIGRpc3BsYXlNYXN0ZXIgPSBzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXI7XHJcblx0XHR2YXIgZGlzcGxheSwgaW52YWxpZGF0ZWQsIGk7XHJcblx0XHJcblx0XHQvLyBOZWVkIHRvIHRha2UgYWNjb3VudCBvZiBjdXN0b20gZmlsdGVyaW5nIGZ1bmN0aW9ucyAtIGFsd2F5cyBmaWx0ZXJcclxuXHRcdGlmICggRGF0YVRhYmxlLmV4dC5zZWFyY2gubGVuZ3RoICE9PSAwICkge1xyXG5cdFx0XHRmb3JjZSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBDaGVjayBpZiBhbnkgb2YgdGhlIHJvd3Mgd2VyZSBpbnZhbGlkYXRlZFxyXG5cdFx0aW52YWxpZGF0ZWQgPSBfZm5GaWx0ZXJEYXRhKCBzZXR0aW5ncyApO1xyXG5cdFxyXG5cdFx0Ly8gSWYgdGhlIGlucHV0IGlzIGJsYW5rIC0gd2UganVzdCB3YW50IHRoZSBmdWxsIGRhdGEgc2V0XHJcblx0XHRpZiAoIGlucHV0Lmxlbmd0aCA8PSAwICkge1xyXG5cdFx0XHRzZXR0aW5ncy5haURpc3BsYXkgPSBkaXNwbGF5TWFzdGVyLnNsaWNlKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0Ly8gTmV3IHNlYXJjaCAtIHN0YXJ0IGZyb20gdGhlIG1hc3RlciBhcnJheVxyXG5cdFx0XHRpZiAoIGludmFsaWRhdGVkIHx8XHJcblx0XHRcdFx0IGZvcmNlIHx8XHJcblx0XHRcdFx0IHByZXZTZWFyY2gubGVuZ3RoID4gaW5wdXQubGVuZ3RoIHx8XHJcblx0XHRcdFx0IGlucHV0LmluZGV4T2YocHJldlNlYXJjaCkgIT09IDAgfHxcclxuXHRcdFx0XHQgc2V0dGluZ3MuYlNvcnRlZCAvLyBPbiByZXNvcnQsIHRoZSBkaXNwbGF5IG1hc3RlciBuZWVkcyB0byBiZVxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgIC8vIHJlLWZpbHRlcmVkIHNpbmNlIGluZGV4ZXMgd2lsbCBoYXZlIGNoYW5nZWRcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0c2V0dGluZ3MuYWlEaXNwbGF5ID0gZGlzcGxheU1hc3Rlci5zbGljZSgpO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIFNlYXJjaCB0aGUgZGlzcGxheSBhcnJheVxyXG5cdFx0XHRkaXNwbGF5ID0gc2V0dGluZ3MuYWlEaXNwbGF5O1xyXG5cdFxyXG5cdFx0XHRmb3IgKCBpPWRpc3BsYXkubGVuZ3RoLTEgOyBpPj0wIDsgaS0tICkge1xyXG5cdFx0XHRcdGlmICggISBycFNlYXJjaC50ZXN0KCBzZXR0aW5ncy5hb0RhdGFbIGRpc3BsYXlbaV0gXS5fc0ZpbHRlclJvdyApICkge1xyXG5cdFx0XHRcdFx0ZGlzcGxheS5zcGxpY2UoIGksIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQnVpbGQgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0IHN1aXRhYmxlIGZvciBzZWFyY2hpbmcgYSB0YWJsZVxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gc1NlYXJjaCBzdHJpbmcgdG8gc2VhcmNoIGZvclxyXG5cdCAqICBAcGFyYW0ge2Jvb2x9IGJSZWdleCB0cmVhdCBhcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvciBub3RcclxuXHQgKiAgQHBhcmFtIHtib29sfSBiU21hcnQgcGVyZm9ybSBzbWFydCBmaWx0ZXJpbmcgb3Igbm90XHJcblx0ICogIEBwYXJhbSB7Ym9vbH0gYkNhc2VJbnNlbnNpdGl2ZSBEbyBjYXNlIGluc2Vuc2l0aXZlIG1hdGNoaW5nIG9yIG5vdFxyXG5cdCAqICBAcmV0dXJucyB7UmVnRXhwfSBjb25zdHJ1Y3RlZCBvYmplY3RcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuRmlsdGVyQ3JlYXRlU2VhcmNoKCBzZWFyY2gsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2Vuc2l0aXZlIClcclxuXHR7XHJcblx0XHRzZWFyY2ggPSByZWdleCA/XHJcblx0XHRcdHNlYXJjaCA6XHJcblx0XHRcdF9mbkVzY2FwZVJlZ2V4KCBzZWFyY2ggKTtcclxuXHRcdFxyXG5cdFx0aWYgKCBzbWFydCApIHtcclxuXHRcdFx0LyogRm9yIHNtYXJ0IGZpbHRlcmluZyB3ZSB3YW50IHRvIGFsbG93IHRoZSBzZWFyY2ggdG8gd29yayByZWdhcmRsZXNzIG9mXHJcblx0XHRcdCAqIHdvcmQgb3JkZXIuIFdlIGFsc28gd2FudCBkb3VibGUgcXVvdGVkIHRleHQgdG8gYmUgcHJlc2VydmVkLCBzbyB3b3JkXHJcblx0XHRcdCAqIG9yZGVyIGlzIGltcG9ydGFudCAtIGEgbGEgZ29vZ2xlLiBTbyB0aGlzIGlzIHdoYXQgd2Ugd2FudCB0b1xyXG5cdFx0XHQgKiBnZW5lcmF0ZTpcclxuXHRcdFx0ICogXHJcblx0XHRcdCAqIF4oPz0uKj9cXGJvbmVcXGIpKD89Lio/XFxidHdvIHRocmVlXFxiKSg/PS4qP1xcYmZvdXJcXGIpLiokXHJcblx0XHRcdCAqL1xyXG5cdFx0XHR2YXIgYSA9ICQubWFwKCBzZWFyY2gubWF0Y2goIC9cIlteXCJdK1wifFteIF0rL2cgKSB8fCBbJyddLCBmdW5jdGlvbiAoIHdvcmQgKSB7XHJcblx0XHRcdFx0aWYgKCB3b3JkLmNoYXJBdCgwKSA9PT0gJ1wiJyApIHtcclxuXHRcdFx0XHRcdHZhciBtID0gd29yZC5tYXRjaCggL15cIiguKilcIiQvICk7XHJcblx0XHRcdFx0XHR3b3JkID0gbSA/IG1bMV0gOiB3b3JkO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRyZXR1cm4gd29yZC5yZXBsYWNlKCdcIicsICcnKTtcclxuXHRcdFx0fSApO1xyXG5cdFxyXG5cdFx0XHRzZWFyY2ggPSAnXig/PS4qPycrYS5qb2luKCAnKSg/PS4qPycgKSsnKS4qJCc7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gbmV3IFJlZ0V4cCggc2VhcmNoLCBjYXNlSW5zZW5zaXRpdmUgPyAnaScgOiAnJyApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBFc2NhcGUgYSBzdHJpbmcgc3VjaCB0aGF0IGl0IGNhbiBiZSB1c2VkIGluIGEgcmVndWxhciBleHByZXNzaW9uXHJcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBzVmFsIHN0cmluZyB0byBlc2NhcGVcclxuXHQgKiAgQHJldHVybnMge3N0cmluZ30gZXNjYXBlZCBzdHJpbmdcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0dmFyIF9mbkVzY2FwZVJlZ2V4ID0gRGF0YVRhYmxlLnV0aWwuZXNjYXBlUmVnZXg7XHJcblx0XHJcblx0dmFyIF9fZmlsdGVyX2RpdiA9ICQoJzxkaXY+JylbMF07XHJcblx0dmFyIF9fZmlsdGVyX2Rpdl90ZXh0Q29udGVudCA9IF9fZmlsdGVyX2Rpdi50ZXh0Q29udGVudCAhPT0gdW5kZWZpbmVkO1xyXG5cdFxyXG5cdC8vIFVwZGF0ZSB0aGUgZmlsdGVyaW5nIGRhdGEgZm9yIGVhY2ggcm93IGlmIG5lZWRlZCAoYnkgaW52YWxpZGF0aW9uIG9yIGZpcnN0IHJ1bilcclxuXHRmdW5jdGlvbiBfZm5GaWx0ZXJEYXRhICggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xyXG5cdFx0dmFyIGNvbHVtbjtcclxuXHRcdHZhciBpLCBqLCBpZW4sIGplbiwgZmlsdGVyRGF0YSwgY2VsbERhdGEsIHJvdztcclxuXHRcdHZhciBmb21hdHRlcnMgPSBEYXRhVGFibGUuZXh0LnR5cGUuc2VhcmNoO1xyXG5cdFx0dmFyIHdhc0ludmFsaWRhdGVkID0gZmFsc2U7XHJcblx0XHJcblx0XHRmb3IgKCBpPTAsIGllbj1zZXR0aW5ncy5hb0RhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdHJvdyA9IHNldHRpbmdzLmFvRGF0YVtpXTtcclxuXHRcclxuXHRcdFx0aWYgKCAhIHJvdy5fYUZpbHRlckRhdGEgKSB7XHJcblx0XHRcdFx0ZmlsdGVyRGF0YSA9IFtdO1xyXG5cdFxyXG5cdFx0XHRcdGZvciAoIGo9MCwgamVuPWNvbHVtbnMubGVuZ3RoIDsgajxqZW4gOyBqKysgKSB7XHJcblx0XHRcdFx0XHRjb2x1bW4gPSBjb2x1bW5zW2pdO1xyXG5cdFxyXG5cdFx0XHRcdFx0aWYgKCBjb2x1bW4uYlNlYXJjaGFibGUgKSB7XHJcblx0XHRcdFx0XHRcdGNlbGxEYXRhID0gX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCBpLCBqLCAnZmlsdGVyJyApO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRpZiAoIGZvbWF0dGVyc1sgY29sdW1uLnNUeXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2VsbERhdGEgPSBmb21hdHRlcnNbIGNvbHVtbi5zVHlwZSBdKCBjZWxsRGF0YSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRcdC8vIFNlYXJjaCBpbiBEYXRhVGFibGVzIDEuMTAgaXMgc3RyaW5nIGJhc2VkLiBJbiAxLjExIHRoaXNcclxuXHRcdFx0XHRcdFx0Ly8gc2hvdWxkIGJlIGFsdGVyZWQgdG8gYWxzbyBhbGxvdyBzdHJpY3QgdHlwZSBjaGVja2luZy5cclxuXHRcdFx0XHRcdFx0aWYgKCBjZWxsRGF0YSA9PT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdFx0XHRjZWxsRGF0YSA9ICcnO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRcdGlmICggdHlwZW9mIGNlbGxEYXRhICE9PSAnc3RyaW5nJyAmJiBjZWxsRGF0YS50b1N0cmluZyApIHtcclxuXHRcdFx0XHRcdFx0XHRjZWxsRGF0YSA9IGNlbGxEYXRhLnRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjZWxsRGF0YSA9ICcnO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0Ly8gSWYgaXQgbG9va3MgbGlrZSB0aGVyZSBpcyBhbiBIVE1MIGVudGl0eSBpbiB0aGUgc3RyaW5nLFxyXG5cdFx0XHRcdFx0Ly8gYXR0ZW1wdCB0byBkZWNvZGUgaXQgc28gc29ydGluZyB3b3JrcyBhcyBleHBlY3RlZC4gTm90ZSB0aGF0XHJcblx0XHRcdFx0XHQvLyB3ZSBjb3VsZCB1c2UgYSBzaW5nbGUgbGluZSBvZiBqUXVlcnkgdG8gZG8gdGhpcywgYnV0IHRoZSBET01cclxuXHRcdFx0XHRcdC8vIG1ldGhvZCB1c2VkIGhlcmUgaXMgbXVjaCBmYXN0ZXIgaHR0cDovL2pzcGVyZi5jb20vaHRtbC1kZWNvZGVcclxuXHRcdFx0XHRcdGlmICggY2VsbERhdGEuaW5kZXhPZiAmJiBjZWxsRGF0YS5pbmRleE9mKCcmJykgIT09IC0xICkge1xyXG5cdFx0XHRcdFx0XHRfX2ZpbHRlcl9kaXYuaW5uZXJIVE1MID0gY2VsbERhdGE7XHJcblx0XHRcdFx0XHRcdGNlbGxEYXRhID0gX19maWx0ZXJfZGl2X3RleHRDb250ZW50ID9cclxuXHRcdFx0XHRcdFx0XHRfX2ZpbHRlcl9kaXYudGV4dENvbnRlbnQgOlxyXG5cdFx0XHRcdFx0XHRcdF9fZmlsdGVyX2Rpdi5pbm5lclRleHQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRpZiAoIGNlbGxEYXRhLnJlcGxhY2UgKSB7XHJcblx0XHRcdFx0XHRcdGNlbGxEYXRhID0gY2VsbERhdGEucmVwbGFjZSgvW1xcclxcbl0vZywgJycpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0ZmlsdGVyRGF0YS5wdXNoKCBjZWxsRGF0YSApO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRyb3cuX2FGaWx0ZXJEYXRhID0gZmlsdGVyRGF0YTtcclxuXHRcdFx0XHRyb3cuX3NGaWx0ZXJSb3cgPSBmaWx0ZXJEYXRhLmpvaW4oJyAgJyk7XHJcblx0XHRcdFx0d2FzSW52YWxpZGF0ZWQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gd2FzSW52YWxpZGF0ZWQ7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENvbnZlcnQgZnJvbSB0aGUgaW50ZXJuYWwgSHVuZ2FyaWFuIG5vdGF0aW9uIHRvIGNhbWVsQ2FzZSBmb3IgZXh0ZXJuYWxcclxuXHQgKiBpbnRlcmFjdGlvblxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb2JqIE9iamVjdCB0byBjb252ZXJ0XHJcblx0ICogIEByZXR1cm5zIHtvYmplY3R9IEludmVydGVkIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5TZWFyY2hUb0NhbWVsICggb2JqIClcclxuXHR7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZWFyY2g6ICAgICAgICAgIG9iai5zU2VhcmNoLFxyXG5cdFx0XHRzbWFydDogICAgICAgICAgIG9iai5iU21hcnQsXHJcblx0XHRcdHJlZ2V4OiAgICAgICAgICAgb2JqLmJSZWdleCxcclxuXHRcdFx0Y2FzZUluc2Vuc2l0aXZlOiBvYmouYkNhc2VJbnNlbnNpdGl2ZVxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ29udmVydCBmcm9tIGNhbWVsQ2FzZSBub3RhdGlvbiB0byB0aGUgaW50ZXJuYWwgSHVuZ2FyaWFuLiBXZSBjb3VsZCB1c2UgdGhlXHJcblx0ICogSHVuZ2FyaWFuIGNvbnZlcnQgZnVuY3Rpb24gaGVyZSwgYnV0IHRoaXMgaXMgY2xlYW5lclxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb2JqIE9iamVjdCB0byBjb252ZXJ0XHJcblx0ICogIEByZXR1cm5zIHtvYmplY3R9IEludmVydGVkIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5TZWFyY2hUb0h1bmcgKCBvYmogKVxyXG5cdHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNTZWFyY2g6ICAgICAgICAgIG9iai5zZWFyY2gsXHJcblx0XHRcdGJTbWFydDogICAgICAgICAgIG9iai5zbWFydCxcclxuXHRcdFx0YlJlZ2V4OiAgICAgICAgICAgb2JqLnJlZ2V4LFxyXG5cdFx0XHRiQ2FzZUluc2Vuc2l0aXZlOiBvYmouY2FzZUluc2Vuc2l0aXZlXHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBHZW5lcmF0ZSB0aGUgbm9kZSByZXF1aXJlZCBmb3IgdGhlIGluZm8gZGlzcGxheVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEByZXR1cm5zIHtub2RlfSBJbmZvcm1hdGlvbiBlbGVtZW50XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkZlYXR1cmVIdG1sSW5mbyAoIHNldHRpbmdzIClcclxuXHR7XHJcblx0XHR2YXJcclxuXHRcdFx0dGlkID0gc2V0dGluZ3Muc1RhYmxlSWQsXHJcblx0XHRcdG5vZGVzID0gc2V0dGluZ3MuYWFuRmVhdHVyZXMuaSxcclxuXHRcdFx0biA9ICQoJzxkaXYvPicsIHtcclxuXHRcdFx0XHQnY2xhc3MnOiBzZXR0aW5ncy5vQ2xhc3Nlcy5zSW5mbyxcclxuXHRcdFx0XHQnaWQnOiAhIG5vZGVzID8gdGlkKydfaW5mbycgOiBudWxsXHJcblx0XHRcdH0gKTtcclxuXHRcclxuXHRcdGlmICggISBub2RlcyApIHtcclxuXHRcdFx0Ly8gVXBkYXRlIGRpc3BsYXkgb24gZWFjaCBkcmF3XHJcblx0XHRcdHNldHRpbmdzLmFvRHJhd0NhbGxiYWNrLnB1c2goIHtcclxuXHRcdFx0XHRcImZuXCI6IF9mblVwZGF0ZUluZm8sXHJcblx0XHRcdFx0XCJzTmFtZVwiOiBcImluZm9ybWF0aW9uXCJcclxuXHRcdFx0fSApO1xyXG5cdFxyXG5cdFx0XHRuXHJcblx0XHRcdFx0LmF0dHIoICdyb2xlJywgJ3N0YXR1cycgKVxyXG5cdFx0XHRcdC5hdHRyKCAnYXJpYS1saXZlJywgJ3BvbGl0ZScgKTtcclxuXHRcclxuXHRcdFx0Ly8gVGFibGUgaXMgZGVzY3JpYmVkIGJ5IG91ciBpbmZvIGRpdlxyXG5cdFx0XHQkKHNldHRpbmdzLm5UYWJsZSkuYXR0ciggJ2FyaWEtZGVzY3JpYmVkYnknLCB0aWQrJ19pbmZvJyApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIG5bMF07XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZSB0aGUgaW5mb3JtYXRpb24gZWxlbWVudHMgaW4gdGhlIGRpc3BsYXlcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mblVwZGF0ZUluZm8gKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0LyogU2hvdyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGFibGUgKi9cclxuXHRcdHZhciBub2RlcyA9IHNldHRpbmdzLmFhbkZlYXR1cmVzLmk7XHJcblx0XHRpZiAoIG5vZGVzLmxlbmd0aCA9PT0gMCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dmFyXHJcblx0XHRcdGxhbmcgID0gc2V0dGluZ3Mub0xhbmd1YWdlLFxyXG5cdFx0XHRzdGFydCA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0KzEsXHJcblx0XHRcdGVuZCAgID0gc2V0dGluZ3MuZm5EaXNwbGF5RW5kKCksXHJcblx0XHRcdG1heCAgID0gc2V0dGluZ3MuZm5SZWNvcmRzVG90YWwoKSxcclxuXHRcdFx0dG90YWwgPSBzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCksXHJcblx0XHRcdG91dCAgID0gdG90YWwgP1xyXG5cdFx0XHRcdGxhbmcuc0luZm8gOlxyXG5cdFx0XHRcdGxhbmcuc0luZm9FbXB0eTtcclxuXHRcclxuXHRcdGlmICggdG90YWwgIT09IG1heCApIHtcclxuXHRcdFx0LyogUmVjb3JkIHNldCBhZnRlciBmaWx0ZXJpbmcgKi9cclxuXHRcdFx0b3V0ICs9ICcgJyArIGxhbmcuc0luZm9GaWx0ZXJlZDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIENvbnZlcnQgdGhlIG1hY3Jvc1xyXG5cdFx0b3V0ICs9IGxhbmcuc0luZm9Qb3N0Rml4O1xyXG5cdFx0b3V0ID0gX2ZuSW5mb01hY3Jvcyggc2V0dGluZ3MsIG91dCApO1xyXG5cdFxyXG5cdFx0dmFyIGNhbGxiYWNrID0gbGFuZy5mbkluZm9DYWxsYmFjaztcclxuXHRcdGlmICggY2FsbGJhY2sgIT09IG51bGwgKSB7XHJcblx0XHRcdG91dCA9IGNhbGxiYWNrLmNhbGwoIHNldHRpbmdzLm9JbnN0YW5jZSxcclxuXHRcdFx0XHRzZXR0aW5ncywgc3RhcnQsIGVuZCwgbWF4LCB0b3RhbCwgb3V0XHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQkKG5vZGVzKS5odG1sKCBvdXQgKTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0ZnVuY3Rpb24gX2ZuSW5mb01hY3JvcyAoIHNldHRpbmdzLCBzdHIgKVxyXG5cdHtcclxuXHRcdC8vIFdoZW4gaW5maW5pdGUgc2Nyb2xsaW5nLCB3ZSBhcmUgYWx3YXlzIHN0YXJ0aW5nIGF0IDEuIF9pRGlzcGxheVN0YXJ0IGlzIHVzZWQgb25seVxyXG5cdFx0Ly8gaW50ZXJuYWxseVxyXG5cdFx0dmFyXHJcblx0XHRcdGZvcm1hdHRlciAgPSBzZXR0aW5ncy5mbkZvcm1hdE51bWJlcixcclxuXHRcdFx0c3RhcnQgICAgICA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0KzEsXHJcblx0XHRcdGxlbiAgICAgICAgPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXHJcblx0XHRcdHZpcyAgICAgICAgPSBzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCksXHJcblx0XHRcdGFsbCAgICAgICAgPSBsZW4gPT09IC0xO1xyXG5cdFxyXG5cdFx0cmV0dXJuIHN0ci5cclxuXHRcdFx0cmVwbGFjZSgvX1NUQVJUXy9nLCBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIHN0YXJ0ICkgKS5cclxuXHRcdFx0cmVwbGFjZSgvX0VORF8vZywgICBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIHNldHRpbmdzLmZuRGlzcGxheUVuZCgpICkgKS5cclxuXHRcdFx0cmVwbGFjZSgvX01BWF8vZywgICBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIHNldHRpbmdzLmZuUmVjb3Jkc1RvdGFsKCkgKSApLlxyXG5cdFx0XHRyZXBsYWNlKC9fVE9UQUxfL2csIGZvcm1hdHRlci5jYWxsKCBzZXR0aW5ncywgdmlzICkgKS5cclxuXHRcdFx0cmVwbGFjZSgvX1BBR0VfL2csICBmb3JtYXR0ZXIuY2FsbCggc2V0dGluZ3MsIGFsbCA/IDEgOiBNYXRoLmNlaWwoIHN0YXJ0IC8gbGVuICkgKSApLlxyXG5cdFx0XHRyZXBsYWNlKC9fUEFHRVNfL2csIGZvcm1hdHRlci5jYWxsKCBzZXR0aW5ncywgYWxsID8gMSA6IE1hdGguY2VpbCggdmlzIC8gbGVuICkgKSApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBEcmF3IHRoZSB0YWJsZSBmb3IgdGhlIGZpcnN0IHRpbWUsIGFkZGluZyBhbGwgcmVxdWlyZWQgZmVhdHVyZXNcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkluaXRpYWxpc2UgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyIGksIGlMZW4sIGlBamF4U3RhcnQ9c2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQ7XHJcblx0XHR2YXIgY29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucywgY29sdW1uO1xyXG5cdFx0dmFyIGZlYXR1cmVzID0gc2V0dGluZ3Mub0ZlYXR1cmVzO1xyXG5cdFx0dmFyIGRlZmVyTG9hZGluZyA9IHNldHRpbmdzLmJEZWZlckxvYWRpbmc7IC8vIHZhbHVlIG1vZGlmaWVkIGJ5IHRoZSBkcmF3XHJcblx0XHJcblx0XHQvKiBFbnN1cmUgdGhhdCB0aGUgdGFibGUgZGF0YSBpcyBmdWxseSBpbml0aWFsaXNlZCAqL1xyXG5cdFx0aWYgKCAhIHNldHRpbmdzLmJJbml0aWFsaXNlZCApIHtcclxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKXsgX2ZuSW5pdGlhbGlzZSggc2V0dGluZ3MgKTsgfSwgMjAwICk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIFNob3cgdGhlIGRpc3BsYXkgSFRNTCBvcHRpb25zICovXHJcblx0XHRfZm5BZGRPcHRpb25zSHRtbCggc2V0dGluZ3MgKTtcclxuXHRcclxuXHRcdC8qIEJ1aWxkIGFuZCBkcmF3IHRoZSBoZWFkZXIgLyBmb290ZXIgZm9yIHRoZSB0YWJsZSAqL1xyXG5cdFx0X2ZuQnVpbGRIZWFkKCBzZXR0aW5ncyApO1xyXG5cdFx0X2ZuRHJhd0hlYWQoIHNldHRpbmdzLCBzZXR0aW5ncy5hb0hlYWRlciApO1xyXG5cdFx0X2ZuRHJhd0hlYWQoIHNldHRpbmdzLCBzZXR0aW5ncy5hb0Zvb3RlciApO1xyXG5cdFxyXG5cdFx0LyogT2theSB0byBzaG93IHRoYXQgc29tZXRoaW5nIGlzIGdvaW5nIG9uIG5vdyAqL1xyXG5cdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCB0cnVlICk7XHJcblx0XHJcblx0XHQvKiBDYWxjdWxhdGUgc2l6ZXMgZm9yIGNvbHVtbnMgKi9cclxuXHRcdGlmICggZmVhdHVyZXMuYkF1dG9XaWR0aCApIHtcclxuXHRcdFx0X2ZuQ2FsY3VsYXRlQ29sdW1uV2lkdGhzKCBzZXR0aW5ncyApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Zm9yICggaT0wLCBpTGVuPWNvbHVtbnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkge1xyXG5cdFx0XHRjb2x1bW4gPSBjb2x1bW5zW2ldO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGNvbHVtbi5zV2lkdGggKSB7XHJcblx0XHRcdFx0Y29sdW1uLm5UaC5zdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKCBjb2x1bW4uc1dpZHRoICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdwcmVJbml0JywgW3NldHRpbmdzXSApO1xyXG5cdFxyXG5cdFx0Ly8gSWYgdGhlcmUgaXMgZGVmYXVsdCBzb3J0aW5nIHJlcXVpcmVkIC0gbGV0J3MgZG8gaXQuIFRoZSBzb3J0IGZ1bmN0aW9uXHJcblx0XHQvLyB3aWxsIGRvIHRoZSBkcmF3aW5nIGZvciB1cy4gT3RoZXJ3aXNlIHdlIGRyYXcgdGhlIHRhYmxlIHJlZ2FyZGxlc3Mgb2YgdGhlXHJcblx0XHQvLyBBamF4IHNvdXJjZSAtIHRoaXMgYWxsb3dzIHRoZSB0YWJsZSB0byBsb29rIGluaXRpYWxpc2VkIGZvciBBamF4IHNvdXJjaW5nXHJcblx0XHQvLyBkYXRhIChzaG93ICdsb2FkaW5nJyBtZXNzYWdlIHBvc3NpYmx5KVxyXG5cdFx0X2ZuUmVEcmF3KCBzZXR0aW5ncyApO1xyXG5cdFxyXG5cdFx0Ly8gU2VydmVyLXNpZGUgcHJvY2Vzc2luZyBpbml0IGNvbXBsZXRlIGlzIGRvbmUgYnkgX2ZuQWpheFVwZGF0ZURyYXdcclxuXHRcdHZhciBkYXRhU3JjID0gX2ZuRGF0YVNvdXJjZSggc2V0dGluZ3MgKTtcclxuXHRcdGlmICggZGF0YVNyYyAhPSAnc3NwJyB8fCBkZWZlckxvYWRpbmcgKSB7XHJcblx0XHRcdC8vIGlmIHRoZXJlIGlzIGFuIGFqYXggc291cmNlIGxvYWQgdGhlIGRhdGFcclxuXHRcdFx0aWYgKCBkYXRhU3JjID09ICdhamF4JyApIHtcclxuXHRcdFx0XHRfZm5CdWlsZEFqYXgoIHNldHRpbmdzLCBbXSwgZnVuY3Rpb24oanNvbikge1xyXG5cdFx0XHRcdFx0dmFyIGFEYXRhID0gX2ZuQWpheERhdGFTcmMoIHNldHRpbmdzLCBqc29uICk7XHJcblx0XHJcblx0XHRcdFx0XHQvLyBHb3QgdGhlIGRhdGEgLSBhZGQgaXQgdG8gdGhlIHRhYmxlXHJcblx0XHRcdFx0XHRmb3IgKCBpPTAgOyBpPGFEYXRhLmxlbmd0aCA7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0X2ZuQWRkRGF0YSggc2V0dGluZ3MsIGFEYXRhW2ldICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHQvLyBSZXNldCB0aGUgaW5pdCBkaXNwbGF5IGZvciBjb29raWUgc2F2aW5nLiBXZSd2ZSBhbHJlYWR5IGRvbmVcclxuXHRcdFx0XHRcdC8vIGEgZmlsdGVyLCBhbmQgdGhlcmVmb3JlIGNsZWFyZWQgaXQgYmVmb3JlLiBTbyB3ZSBuZWVkIHRvIG1ha2VcclxuXHRcdFx0XHRcdC8vIGl0IGFwcGVhciAnZnJlc2gnXHJcblx0XHRcdFx0XHRzZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydCA9IGlBamF4U3RhcnQ7XHJcblx0XHJcblx0XHRcdFx0XHRfZm5SZURyYXcoIHNldHRpbmdzICk7XHJcblx0XHJcblx0XHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIGZhbHNlICk7XHJcblx0XHRcdFx0XHRfZm5Jbml0Q29tcGxldGUoIHNldHRpbmdzLCBqc29uICk7XHJcblx0XHRcdFx0fSwgc2V0dGluZ3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIGZhbHNlICk7XHJcblx0XHRcdFx0X2ZuSW5pdENvbXBsZXRlKCBzZXR0aW5ncyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIERyYXcgdGhlIHRhYmxlIGZvciB0aGUgZmlyc3QgdGltZSwgYWRkaW5nIGFsbCByZXF1aXJlZCBmZWF0dXJlc1xyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBbanNvbl0gSlNPTiBmcm9tIHRoZSBzZXJ2ZXIgdGhhdCBjb21wbGV0ZWQgdGhlIHRhYmxlLCBpZiB1c2luZyBBamF4IHNvdXJjZVxyXG5cdCAqICAgIHdpdGggY2xpZW50LXNpZGUgcHJvY2Vzc2luZyAob3B0aW9uYWwpXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkluaXRDb21wbGV0ZSAoIHNldHRpbmdzLCBqc29uIClcclxuXHR7XHJcblx0XHRzZXR0aW5ncy5fYkluaXRDb21wbGV0ZSA9IHRydWU7XHJcblx0XHJcblx0XHQvLyBXaGVuIGRhdGEgd2FzIGFkZGVkIGFmdGVyIHRoZSBpbml0aWFsaXNhdGlvbiAoZGF0YSBvciBBamF4KSB3ZSBuZWVkIHRvXHJcblx0XHQvLyBjYWxjdWxhdGUgdGhlIGNvbHVtbiBzaXppbmdcclxuXHRcdGlmICgganNvbiB8fCBzZXR0aW5ncy5vSW5pdC5hYURhdGEgKSB7XHJcblx0XHRcdF9mbkFkanVzdENvbHVtblNpemluZyggc2V0dGluZ3MgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdwbHVnaW4taW5pdCcsIFtzZXR0aW5ncywganNvbl0gKTtcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsICdhb0luaXRDb21wbGV0ZScsICdpbml0JywgW3NldHRpbmdzLCBqc29uXSApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRmdW5jdGlvbiBfZm5MZW5ndGhDaGFuZ2UgKCBzZXR0aW5ncywgdmFsIClcclxuXHR7XHJcblx0XHR2YXIgbGVuID0gcGFyc2VJbnQoIHZhbCwgMTAgKTtcclxuXHRcdHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCA9IGxlbjtcclxuXHRcclxuXHRcdF9mbkxlbmd0aE92ZXJmbG93KCBzZXR0aW5ncyApO1xyXG5cdFxyXG5cdFx0Ly8gRmlyZSBsZW5ndGggY2hhbmdlIGV2ZW50XHJcblx0XHRfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCBudWxsLCAnbGVuZ3RoJywgW3NldHRpbmdzLCBsZW5dICk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEdlbmVyYXRlIHRoZSBub2RlIHJlcXVpcmVkIGZvciB1c2VyIGRpc3BsYXkgbGVuZ3RoIGNoYW5naW5nXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcmV0dXJucyB7bm9kZX0gRGlzcGxheSBsZW5ndGggZmVhdHVyZSBub2RlXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkZlYXR1cmVIdG1sTGVuZ3RoICggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhclxyXG5cdFx0XHRjbGFzc2VzICA9IHNldHRpbmdzLm9DbGFzc2VzLFxyXG5cdFx0XHR0YWJsZUlkICA9IHNldHRpbmdzLnNUYWJsZUlkLFxyXG5cdFx0XHRtZW51ICAgICA9IHNldHRpbmdzLmFMZW5ndGhNZW51LFxyXG5cdFx0XHRkMiAgICAgICA9ICQuaXNBcnJheSggbWVudVswXSApLFxyXG5cdFx0XHRsZW5ndGhzICA9IGQyID8gbWVudVswXSA6IG1lbnUsXHJcblx0XHRcdGxhbmd1YWdlID0gZDIgPyBtZW51WzFdIDogbWVudTtcclxuXHRcclxuXHRcdHZhciBzZWxlY3QgPSAkKCc8c2VsZWN0Lz4nLCB7XHJcblx0XHRcdCduYW1lJzogICAgICAgICAgdGFibGVJZCsnX2xlbmd0aCcsXHJcblx0XHRcdCdhcmlhLWNvbnRyb2xzJzogdGFibGVJZCxcclxuXHRcdFx0J2NsYXNzJzogICAgICAgICBjbGFzc2VzLnNMZW5ndGhTZWxlY3RcclxuXHRcdH0gKTtcclxuXHRcclxuXHRcdGZvciAoIHZhciBpPTAsIGllbj1sZW5ndGhzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRzZWxlY3RbMF1bIGkgXSA9IG5ldyBPcHRpb24oIGxhbmd1YWdlW2ldLCBsZW5ndGhzW2ldICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgZGl2ID0gJCgnPGRpdj48bGFiZWwvPjwvZGl2PicpLmFkZENsYXNzKCBjbGFzc2VzLnNMZW5ndGggKTtcclxuXHRcdGlmICggISBzZXR0aW5ncy5hYW5GZWF0dXJlcy5sICkge1xyXG5cdFx0XHRkaXZbMF0uaWQgPSB0YWJsZUlkKydfbGVuZ3RoJztcclxuXHRcdH1cclxuXHRcclxuXHRcdGRpdi5jaGlsZHJlbigpLmFwcGVuZChcclxuXHRcdFx0c2V0dGluZ3Mub0xhbmd1YWdlLnNMZW5ndGhNZW51LnJlcGxhY2UoICdfTUVOVV8nLCBzZWxlY3RbMF0ub3V0ZXJIVE1MIClcclxuXHRcdCk7XHJcblx0XHJcblx0XHQvLyBDYW4ndCB1c2UgYHNlbGVjdGAgdmFyaWFibGUgYXMgdXNlciBtaWdodCBwcm92aWRlIHRoZWlyIG93biBhbmQgdGhlXHJcblx0XHQvLyByZWZlcmVuY2UgaXMgYnJva2VuIGJ5IHRoZSB1c2Ugb2Ygb3V0ZXJIVE1MXHJcblx0XHQkKCdzZWxlY3QnLCBkaXYpXHJcblx0XHRcdC52YWwoIHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCApXHJcblx0XHRcdC5iaW5kKCAnY2hhbmdlLkRUJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdF9mbkxlbmd0aENoYW5nZSggc2V0dGluZ3MsICQodGhpcykudmFsKCkgKTtcclxuXHRcdFx0XHRfZm5EcmF3KCBzZXR0aW5ncyApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHJcblx0XHQvLyBVcGRhdGUgbm9kZSB2YWx1ZSB3aGVuZXZlciBhbnl0aGluZyBjaGFuZ2VzIHRoZSB0YWJsZSdzIGxlbmd0aFxyXG5cdFx0JChzZXR0aW5ncy5uVGFibGUpLmJpbmQoICdsZW5ndGguZHQuRFQnLCBmdW5jdGlvbiAoZSwgcywgbGVuKSB7XHJcblx0XHRcdGlmICggc2V0dGluZ3MgPT09IHMgKSB7XHJcblx0XHRcdFx0JCgnc2VsZWN0JywgZGl2KS52YWwoIGxlbiApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHRyZXR1cm4gZGl2WzBdO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRcclxuXHQvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxyXG5cdCAqIE5vdGUgdGhhdCBtb3N0IG9mIHRoZSBwYWdpbmcgbG9naWMgaXMgZG9uZSBpblxyXG5cdCAqIERhdGFUYWJsZS5leHQucGFnZXJcclxuXHQgKi9cclxuXHRcclxuXHQvKipcclxuXHQgKiBHZW5lcmF0ZSB0aGUgbm9kZSByZXF1aXJlZCBmb3IgZGVmYXVsdCBwYWdpbmF0aW9uXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHJldHVybnMge25vZGV9IFBhZ2luYXRpb24gZmVhdHVyZSBub2RlXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkZlYXR1cmVIdG1sUGFnaW5hdGUgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdHR5cGUgICA9IHNldHRpbmdzLnNQYWdpbmF0aW9uVHlwZSxcclxuXHRcdFx0cGx1Z2luID0gRGF0YVRhYmxlLmV4dC5wYWdlclsgdHlwZSBdLFxyXG5cdFx0XHRtb2Rlcm4gPSB0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nLFxyXG5cdFx0XHRyZWRyYXcgPSBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XHJcblx0XHRcdFx0X2ZuRHJhdyggc2V0dGluZ3MgKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0bm9kZSA9ICQoJzxkaXYvPicpLmFkZENsYXNzKCBzZXR0aW5ncy5vQ2xhc3Nlcy5zUGFnaW5nICsgdHlwZSApWzBdLFxyXG5cdFx0XHRmZWF0dXJlcyA9IHNldHRpbmdzLmFhbkZlYXR1cmVzO1xyXG5cdFxyXG5cdFx0aWYgKCAhIG1vZGVybiApIHtcclxuXHRcdFx0cGx1Z2luLmZuSW5pdCggc2V0dGluZ3MsIG5vZGUsIHJlZHJhdyApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyogQWRkIGEgZHJhdyBjYWxsYmFjayBmb3IgdGhlIHBhZ2luYXRpb24gb24gZmlyc3QgaW5zdGFuY2UsIHRvIHVwZGF0ZSB0aGUgcGFnaW5nIGRpc3BsYXkgKi9cclxuXHRcdGlmICggISBmZWF0dXJlcy5wIClcclxuXHRcdHtcclxuXHRcdFx0bm9kZS5pZCA9IHNldHRpbmdzLnNUYWJsZUlkKydfcGFnaW5hdGUnO1xyXG5cdFxyXG5cdFx0XHRzZXR0aW5ncy5hb0RyYXdDYWxsYmFjay5wdXNoKCB7XHJcblx0XHRcdFx0XCJmblwiOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGVybiApIHtcclxuXHRcdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdFx0c3RhcnQgICAgICA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRcdGxlbiAgICAgICAgPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXHJcblx0XHRcdFx0XHRcdFx0dmlzUmVjb3JkcyA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSxcclxuXHRcdFx0XHRcdFx0XHRhbGwgICAgICAgID0gbGVuID09PSAtMSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlID0gYWxsID8gMCA6IE1hdGguY2VpbCggc3RhcnQgLyBsZW4gKSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlcyA9IGFsbCA/IDEgOiBNYXRoLmNlaWwoIHZpc1JlY29yZHMgLyBsZW4gKSxcclxuXHRcdFx0XHRcdFx0XHRidXR0b25zID0gcGx1Z2luKHBhZ2UsIHBhZ2VzKSxcclxuXHRcdFx0XHRcdFx0XHRpLCBpZW47XHJcblx0XHJcblx0XHRcdFx0XHRcdGZvciAoIGk9MCwgaWVuPWZlYXR1cmVzLnAubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdFx0X2ZuUmVuZGVyZXIoIHNldHRpbmdzLCAncGFnZUJ1dHRvbicgKShcclxuXHRcdFx0XHRcdFx0XHRcdHNldHRpbmdzLCBmZWF0dXJlcy5wW2ldLCBpLCBidXR0b25zLCBwYWdlLCBwYWdlc1xyXG5cdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uZm5VcGRhdGUoIHNldHRpbmdzLCByZWRyYXcgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFwic05hbWVcIjogXCJwYWdpbmF0aW9uXCJcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIG5vZGU7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFsdGVyIHRoZSBkaXNwbGF5IHNldHRpbmdzIHRvIGNoYW5nZSB0aGUgcGFnZVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd8aW50fSBhY3Rpb24gUGFnaW5nIGFjdGlvbiB0byB0YWtlOiBcImZpcnN0XCIsIFwicHJldmlvdXNcIixcclxuXHQgKiAgICBcIm5leHRcIiBvciBcImxhc3RcIiBvciBwYWdlIG51bWJlciB0byBqdW1wIHRvIChpbnRlZ2VyKVxyXG5cdCAqICBAcGFyYW0gW2Jvb2xdIHJlZHJhdyBBdXRvbWF0aWNhbGx5IGRyYXcgdGhlIHVwZGF0ZSBvciBub3RcclxuXHQgKiAgQHJldHVybnMge2Jvb2x9IHRydWUgcGFnZSBoYXMgY2hhbmdlZCwgZmFsc2UgLSBubyBjaGFuZ2VcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuUGFnZUNoYW5nZSAoIHNldHRpbmdzLCBhY3Rpb24sIHJlZHJhdyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdHN0YXJ0ICAgICA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LFxyXG5cdFx0XHRsZW4gICAgICAgPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXHJcblx0XHRcdHJlY29yZHMgICA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKTtcclxuXHRcclxuXHRcdGlmICggcmVjb3JkcyA9PT0gMCB8fCBsZW4gPT09IC0xIClcclxuXHRcdHtcclxuXHRcdFx0c3RhcnQgPSAwO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIHR5cGVvZiBhY3Rpb24gPT09IFwibnVtYmVyXCIgKVxyXG5cdFx0e1xyXG5cdFx0XHRzdGFydCA9IGFjdGlvbiAqIGxlbjtcclxuXHRcclxuXHRcdFx0aWYgKCBzdGFydCA+IHJlY29yZHMgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3RhcnQgPSAwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggYWN0aW9uID09IFwiZmlyc3RcIiApXHJcblx0XHR7XHJcblx0XHRcdHN0YXJ0ID0gMDtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBhY3Rpb24gPT0gXCJwcmV2aW91c1wiIClcclxuXHRcdHtcclxuXHRcdFx0c3RhcnQgPSBsZW4gPj0gMCA/XHJcblx0XHRcdFx0c3RhcnQgLSBsZW4gOlxyXG5cdFx0XHRcdDA7XHJcblx0XHJcblx0XHRcdGlmICggc3RhcnQgPCAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHQgIHN0YXJ0ID0gMDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIGFjdGlvbiA9PSBcIm5leHRcIiApXHJcblx0XHR7XHJcblx0XHRcdGlmICggc3RhcnQgKyBsZW4gPCByZWNvcmRzIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0YXJ0ICs9IGxlbjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIGFjdGlvbiA9PSBcImxhc3RcIiApXHJcblx0XHR7XHJcblx0XHRcdHN0YXJ0ID0gTWF0aC5mbG9vciggKHJlY29yZHMtMSkgLyBsZW4pICogbGVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRfZm5Mb2coIHNldHRpbmdzLCAwLCBcIlVua25vd24gcGFnaW5nIGFjdGlvbjogXCIrYWN0aW9uLCA1ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgY2hhbmdlZCA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ICE9PSBzdGFydDtcclxuXHRcdHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gc3RhcnQ7XHJcblx0XHJcblx0XHRpZiAoIGNoYW5nZWQgKSB7XHJcblx0XHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdwYWdlJywgW3NldHRpbmdzXSApO1xyXG5cdFxyXG5cdFx0XHRpZiAoIHJlZHJhdyApIHtcclxuXHRcdFx0XHRfZm5EcmF3KCBzZXR0aW5ncyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gY2hhbmdlZDtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2VuZXJhdGUgdGhlIG5vZGUgcmVxdWlyZWQgZm9yIHRoZSBwcm9jZXNzaW5nIG5vZGVcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEByZXR1cm5zIHtub2RlfSBQcm9jZXNzaW5nIGVsZW1lbnRcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuRmVhdHVyZUh0bWxQcm9jZXNzaW5nICggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHJldHVybiAkKCc8ZGl2Lz4nLCB7XHJcblx0XHRcdFx0J2lkJzogISBzZXR0aW5ncy5hYW5GZWF0dXJlcy5yID8gc2V0dGluZ3Muc1RhYmxlSWQrJ19wcm9jZXNzaW5nJyA6IG51bGwsXHJcblx0XHRcdFx0J2NsYXNzJzogc2V0dGluZ3Mub0NsYXNzZXMuc1Byb2Nlc3NpbmdcclxuXHRcdFx0fSApXHJcblx0XHRcdC5odG1sKCBzZXR0aW5ncy5vTGFuZ3VhZ2Uuc1Byb2Nlc3NpbmcgKVxyXG5cdFx0XHQuaW5zZXJ0QmVmb3JlKCBzZXR0aW5ncy5uVGFibGUgKVswXTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRGlzcGxheSBvciBoaWRlIHRoZSBwcm9jZXNzaW5nIGluZGljYXRvclxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtib29sfSBzaG93IFNob3cgdGhlIHByb2Nlc3NpbmcgaW5kaWNhdG9yICh0cnVlKSBvciBub3QgKGZhbHNlKVxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Qcm9jZXNzaW5nRGlzcGxheSAoIHNldHRpbmdzLCBzaG93IClcclxuXHR7XHJcblx0XHRpZiAoIHNldHRpbmdzLm9GZWF0dXJlcy5iUHJvY2Vzc2luZyApIHtcclxuXHRcdFx0JChzZXR0aW5ncy5hYW5GZWF0dXJlcy5yKS5jc3MoICdkaXNwbGF5Jywgc2hvdyA/ICdibG9jaycgOiAnbm9uZScgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIG51bGwsICdwcm9jZXNzaW5nJywgW3NldHRpbmdzLCBzaG93XSApO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGQgYW55IGNvbnRyb2wgZWxlbWVudHMgZm9yIHRoZSB0YWJsZSAtIHNwZWNpZmljYWxseSBzY3JvbGxpbmdcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEByZXR1cm5zIHtub2RlfSBOb2RlIHRvIGFkZCB0byB0aGUgRE9NXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkZlYXR1cmVIdG1sVGFibGUgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyIHRhYmxlID0gJChzZXR0aW5ncy5uVGFibGUpO1xyXG5cdFxyXG5cdFx0Ly8gQWRkIHRoZSBBUklBIGdyaWQgcm9sZSB0byB0aGUgdGFibGVcclxuXHRcdHRhYmxlLmF0dHIoICdyb2xlJywgJ2dyaWQnICk7XHJcblx0XHJcblx0XHQvLyBTY3JvbGxpbmcgZnJvbSBoZXJlIG9uIGluXHJcblx0XHR2YXIgc2Nyb2xsID0gc2V0dGluZ3Mub1Njcm9sbDtcclxuXHRcclxuXHRcdGlmICggc2Nyb2xsLnNYID09PSAnJyAmJiBzY3JvbGwuc1kgPT09ICcnICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MublRhYmxlO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dmFyIHNjcm9sbFggPSBzY3JvbGwuc1g7XHJcblx0XHR2YXIgc2Nyb2xsWSA9IHNjcm9sbC5zWTtcclxuXHRcdHZhciBjbGFzc2VzID0gc2V0dGluZ3Mub0NsYXNzZXM7XHJcblx0XHR2YXIgY2FwdGlvbiA9IHRhYmxlLmNoaWxkcmVuKCdjYXB0aW9uJyk7XHJcblx0XHR2YXIgY2FwdGlvblNpZGUgPSBjYXB0aW9uLmxlbmd0aCA/IGNhcHRpb25bMF0uX2NhcHRpb25TaWRlIDogbnVsbDtcclxuXHRcdHZhciBoZWFkZXJDbG9uZSA9ICQoIHRhYmxlWzBdLmNsb25lTm9kZShmYWxzZSkgKTtcclxuXHRcdHZhciBmb290ZXJDbG9uZSA9ICQoIHRhYmxlWzBdLmNsb25lTm9kZShmYWxzZSkgKTtcclxuXHRcdHZhciBmb290ZXIgPSB0YWJsZS5jaGlsZHJlbigndGZvb3QnKTtcclxuXHRcdHZhciBfZGl2ID0gJzxkaXYvPic7XHJcblx0XHR2YXIgc2l6ZSA9IGZ1bmN0aW9uICggcyApIHtcclxuXHRcdFx0cmV0dXJuICFzID8gbnVsbCA6IF9mblN0cmluZ1RvQ3NzKCBzICk7XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0aWYgKCAhIGZvb3Rlci5sZW5ndGggKSB7XHJcblx0XHRcdGZvb3RlciA9IG51bGw7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKlxyXG5cdFx0ICogVGhlIEhUTUwgc3RydWN0dXJlIHRoYXQgd2Ugd2FudCB0byBnZW5lcmF0ZSBpbiB0aGlzIGZ1bmN0aW9uIGlzOlxyXG5cdFx0ICogIGRpdiAtIHNjcm9sbGVyXHJcblx0XHQgKiAgICBkaXYgLSBzY3JvbGwgaGVhZFxyXG5cdFx0ICogICAgICBkaXYgLSBzY3JvbGwgaGVhZCBpbm5lclxyXG5cdFx0ICogICAgICAgIHRhYmxlIC0gc2Nyb2xsIGhlYWQgdGFibGVcclxuXHRcdCAqICAgICAgICAgIHRoZWFkIC0gdGhlYWRcclxuXHRcdCAqICAgIGRpdiAtIHNjcm9sbCBib2R5XHJcblx0XHQgKiAgICAgIHRhYmxlIC0gdGFibGUgKG1hc3RlciB0YWJsZSlcclxuXHRcdCAqICAgICAgICB0aGVhZCAtIHRoZWFkIGNsb25lIGZvciBzaXppbmdcclxuXHRcdCAqICAgICAgICB0Ym9keSAtIHRib2R5XHJcblx0XHQgKiAgICBkaXYgLSBzY3JvbGwgZm9vdFxyXG5cdFx0ICogICAgICBkaXYgLSBzY3JvbGwgZm9vdCBpbm5lclxyXG5cdFx0ICogICAgICAgIHRhYmxlIC0gc2Nyb2xsIGZvb3QgdGFibGVcclxuXHRcdCAqICAgICAgICAgIHRmb290IC0gdGZvb3RcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHNjcm9sbGVyID0gJCggX2RpdiwgeyAnY2xhc3MnOiBjbGFzc2VzLnNTY3JvbGxXcmFwcGVyIH0gKVxyXG5cdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdCQoX2RpdiwgeyAnY2xhc3MnOiBjbGFzc2VzLnNTY3JvbGxIZWFkIH0gKVxyXG5cdFx0XHRcdFx0LmNzcygge1xyXG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdFx0XHRcdFx0XHRib3JkZXI6IDAsXHJcblx0XHRcdFx0XHRcdHdpZHRoOiBzY3JvbGxYID8gc2l6ZShzY3JvbGxYKSA6ICcxMDAlJ1xyXG5cdFx0XHRcdFx0fSApXHJcblx0XHRcdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdFx0XHQkKF9kaXYsIHsgJ2NsYXNzJzogY2xhc3Nlcy5zU2Nyb2xsSGVhZElubmVyIH0gKVxyXG5cdFx0XHRcdFx0XHRcdC5jc3MoIHtcclxuXHRcdFx0XHRcdFx0XHRcdCdib3gtc2l6aW5nJzogJ2NvbnRlbnQtYm94JyxcclxuXHRcdFx0XHRcdFx0XHRcdHdpZHRoOiBzY3JvbGwuc1hJbm5lciB8fCAnMTAwJSdcclxuXHRcdFx0XHRcdFx0XHR9IClcclxuXHRcdFx0XHRcdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdFx0XHRcdFx0aGVhZGVyQ2xvbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlbW92ZUF0dHIoJ2lkJylcclxuXHRcdFx0XHRcdFx0XHRcdFx0LmNzcyggJ21hcmdpbi1sZWZ0JywgMCApXHJcblx0XHRcdFx0XHRcdFx0XHRcdC5hcHBlbmQoIGNhcHRpb25TaWRlID09PSAndG9wJyA/IGNhcHRpb24gOiBudWxsIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0YWJsZS5jaGlsZHJlbigndGhlYWQnKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQpXHJcblx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHQpXHJcblx0XHRcdC5hcHBlbmQoXHJcblx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEJvZHkgfSApXHJcblx0XHRcdFx0XHQuY3NzKCB7XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogJ2F1dG8nLFxyXG5cdFx0XHRcdFx0XHR3aWR0aDogc2l6ZSggc2Nyb2xsWCApXHJcblx0XHRcdFx0XHR9IClcclxuXHRcdFx0XHRcdC5hcHBlbmQoIHRhYmxlIClcclxuXHRcdFx0KTtcclxuXHRcclxuXHRcdGlmICggZm9vdGVyICkge1xyXG5cdFx0XHRzY3JvbGxlci5hcHBlbmQoXHJcblx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEZvb3QgfSApXHJcblx0XHRcdFx0XHQuY3NzKCB7XHJcblx0XHRcdFx0XHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdFx0XHRcdFx0Ym9yZGVyOiAwLFxyXG5cdFx0XHRcdFx0XHR3aWR0aDogc2Nyb2xsWCA/IHNpemUoc2Nyb2xsWCkgOiAnMTAwJSdcclxuXHRcdFx0XHRcdH0gKVxyXG5cdFx0XHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHRcdFx0JChfZGl2LCB7ICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEZvb3RJbm5lciB9IClcclxuXHRcdFx0XHRcdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdFx0XHRcdFx0Zm9vdGVyQ2xvbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlbW92ZUF0dHIoJ2lkJylcclxuXHRcdFx0XHRcdFx0XHRcdFx0LmNzcyggJ21hcmdpbi1sZWZ0JywgMCApXHJcblx0XHRcdFx0XHRcdFx0XHRcdC5hcHBlbmQoIGNhcHRpb25TaWRlID09PSAnYm90dG9tJyA/IGNhcHRpb24gOiBudWxsIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0YWJsZS5jaGlsZHJlbigndGZvb3QnKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQpXHJcblx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dmFyIGNoaWxkcmVuID0gc2Nyb2xsZXIuY2hpbGRyZW4oKTtcclxuXHRcdHZhciBzY3JvbGxIZWFkID0gY2hpbGRyZW5bMF07XHJcblx0XHR2YXIgc2Nyb2xsQm9keSA9IGNoaWxkcmVuWzFdO1xyXG5cdFx0dmFyIHNjcm9sbEZvb3QgPSBmb290ZXIgPyBjaGlsZHJlblsyXSA6IG51bGw7XHJcblx0XHJcblx0XHQvLyBXaGVuIHRoZSBib2R5IGlzIHNjcm9sbGVkLCB0aGVuIHdlIGFsc28gd2FudCB0byBzY3JvbGwgdGhlIGhlYWRlcnNcclxuXHRcdGlmICggc2Nyb2xsWCApIHtcclxuXHRcdFx0JChzY3JvbGxCb2R5KS5vbiggJ3Njcm9sbC5EVCcsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dmFyIHNjcm9sbExlZnQgPSB0aGlzLnNjcm9sbExlZnQ7XHJcblx0XHJcblx0XHRcdFx0c2Nyb2xsSGVhZC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcclxuXHRcclxuXHRcdFx0XHRpZiAoIGZvb3RlciApIHtcclxuXHRcdFx0XHRcdHNjcm9sbEZvb3Quc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQkKHNjcm9sbEJvZHkpLmNzcyhcclxuXHRcdFx0c2Nyb2xsWSAmJiBzY3JvbGwuYkNvbGxhcHNlID8gJ21heC1oZWlnaHQnIDogJ2hlaWdodCcsIFxyXG5cdFx0XHRzY3JvbGxZXHJcblx0XHQpO1xyXG5cdFxyXG5cdFx0c2V0dGluZ3MublNjcm9sbEhlYWQgPSBzY3JvbGxIZWFkO1xyXG5cdFx0c2V0dGluZ3MublNjcm9sbEJvZHkgPSBzY3JvbGxCb2R5O1xyXG5cdFx0c2V0dGluZ3MublNjcm9sbEZvb3QgPSBzY3JvbGxGb290O1xyXG5cdFxyXG5cdFx0Ly8gT24gcmVkcmF3IC0gYWxpZ24gY29sdW1uc1xyXG5cdFx0c2V0dGluZ3MuYW9EcmF3Q2FsbGJhY2sucHVzaCgge1xyXG5cdFx0XHRcImZuXCI6IF9mblNjcm9sbERyYXcsXHJcblx0XHRcdFwic05hbWVcIjogXCJzY3JvbGxpbmdcIlxyXG5cdFx0fSApO1xyXG5cdFxyXG5cdFx0cmV0dXJuIHNjcm9sbGVyWzBdO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBVcGRhdGUgdGhlIGhlYWRlciwgZm9vdGVyIGFuZCBib2R5IHRhYmxlcyBmb3IgcmVzaXppbmcgLSBpLmUuIGNvbHVtblxyXG5cdCAqIGFsaWdubWVudC5cclxuXHQgKlxyXG5cdCAqIFdlbGNvbWUgdG8gdGhlIG1vc3QgaG9ycmlibGUgZnVuY3Rpb24gRGF0YVRhYmxlcy4gVGhlIHByb2Nlc3MgdGhhdCB0aGlzXHJcblx0ICogZnVuY3Rpb24gZm9sbG93cyBpcyBiYXNpY2FsbHk6XHJcblx0ICogICAxLiBSZS1jcmVhdGUgdGhlIHRhYmxlIGluc2lkZSB0aGUgc2Nyb2xsaW5nIGRpdlxyXG5cdCAqICAgMi4gVGFrZSBsaXZlIG1lYXN1cmVtZW50cyBmcm9tIHRoZSBET01cclxuXHQgKiAgIDMuIEFwcGx5IHRoZSBtZWFzdXJlbWVudHMgdG8gYWxpZ24gdGhlIGNvbHVtbnNcclxuXHQgKiAgIDQuIENsZWFuIHVwXHJcblx0ICpcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mblNjcm9sbERyYXcgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0Ly8gR2l2ZW4gdGhhdCB0aGlzIGlzIHN1Y2ggYSBtb25zdGVyIGZ1bmN0aW9uLCBhIGxvdCBvZiB2YXJpYWJsZXMgYXJlIHVzZVxyXG5cdFx0Ly8gdG8gdHJ5IGFuZCBrZWVwIHRoZSBtaW5pbWlzZWQgc2l6ZSBhcyBzbWFsbCBhcyBwb3NzaWJsZVxyXG5cdFx0dmFyXHJcblx0XHRcdHNjcm9sbCAgICAgICAgID0gc2V0dGluZ3Mub1Njcm9sbCxcclxuXHRcdFx0c2Nyb2xsWCAgICAgICAgPSBzY3JvbGwuc1gsXHJcblx0XHRcdHNjcm9sbFhJbm5lciAgID0gc2Nyb2xsLnNYSW5uZXIsXHJcblx0XHRcdHNjcm9sbFkgICAgICAgID0gc2Nyb2xsLnNZLFxyXG5cdFx0XHRiYXJXaWR0aCAgICAgICA9IHNjcm9sbC5pQmFyV2lkdGgsXHJcblx0XHRcdGRpdkhlYWRlciAgICAgID0gJChzZXR0aW5ncy5uU2Nyb2xsSGVhZCksXHJcblx0XHRcdGRpdkhlYWRlclN0eWxlID0gZGl2SGVhZGVyWzBdLnN0eWxlLFxyXG5cdFx0XHRkaXZIZWFkZXJJbm5lciA9IGRpdkhlYWRlci5jaGlsZHJlbignZGl2JyksXHJcblx0XHRcdGRpdkhlYWRlcklubmVyU3R5bGUgPSBkaXZIZWFkZXJJbm5lclswXS5zdHlsZSxcclxuXHRcdFx0ZGl2SGVhZGVyVGFibGUgPSBkaXZIZWFkZXJJbm5lci5jaGlsZHJlbigndGFibGUnKSxcclxuXHRcdFx0ZGl2Qm9keUVsICAgICAgPSBzZXR0aW5ncy5uU2Nyb2xsQm9keSxcclxuXHRcdFx0ZGl2Qm9keSAgICAgICAgPSAkKGRpdkJvZHlFbCksXHJcblx0XHRcdGRpdkJvZHlTdHlsZSAgID0gZGl2Qm9keUVsLnN0eWxlLFxyXG5cdFx0XHRkaXZGb290ZXIgICAgICA9ICQoc2V0dGluZ3MublNjcm9sbEZvb3QpLFxyXG5cdFx0XHRkaXZGb290ZXJJbm5lciA9IGRpdkZvb3Rlci5jaGlsZHJlbignZGl2JyksXHJcblx0XHRcdGRpdkZvb3RlclRhYmxlID0gZGl2Rm9vdGVySW5uZXIuY2hpbGRyZW4oJ3RhYmxlJyksXHJcblx0XHRcdGhlYWRlciAgICAgICAgID0gJChzZXR0aW5ncy5uVEhlYWQpLFxyXG5cdFx0XHR0YWJsZSAgICAgICAgICA9ICQoc2V0dGluZ3MublRhYmxlKSxcclxuXHRcdFx0dGFibGVFbCAgICAgICAgPSB0YWJsZVswXSxcclxuXHRcdFx0dGFibGVTdHlsZSAgICAgPSB0YWJsZUVsLnN0eWxlLFxyXG5cdFx0XHRmb290ZXIgICAgICAgICA9IHNldHRpbmdzLm5URm9vdCA/ICQoc2V0dGluZ3MublRGb290KSA6IG51bGwsXHJcblx0XHRcdGJyb3dzZXIgICAgICAgID0gc2V0dGluZ3Mub0Jyb3dzZXIsXHJcblx0XHRcdGllNjcgICAgICAgICAgID0gYnJvd3Nlci5iU2Nyb2xsT3ZlcnNpemUsXHJcblx0XHRcdGR0SGVhZGVyQ2VsbHMgID0gX3BsdWNrKCBzZXR0aW5ncy5hb0NvbHVtbnMsICduVGgnICksXHJcblx0XHRcdGhlYWRlclRyZ0VscywgZm9vdGVyVHJnRWxzLFxyXG5cdFx0XHRoZWFkZXJTcmNFbHMsIGZvb3RlclNyY0VscyxcclxuXHRcdFx0aGVhZGVyQ29weSwgZm9vdGVyQ29weSxcclxuXHRcdFx0aGVhZGVyV2lkdGhzPVtdLCBmb290ZXJXaWR0aHM9W10sXHJcblx0XHRcdGhlYWRlckNvbnRlbnQ9W10sIGZvb3RlckNvbnRlbnQ9W10sXHJcblx0XHRcdGlkeCwgY29ycmVjdGlvbiwgc2FuaXR5V2lkdGgsXHJcblx0XHRcdHplcm9PdXQgPSBmdW5jdGlvbihuU2l6ZXIpIHtcclxuXHRcdFx0XHR2YXIgc3R5bGUgPSBuU2l6ZXIuc3R5bGU7XHJcblx0XHRcdFx0c3R5bGUucGFkZGluZ1RvcCA9IFwiMFwiO1xyXG5cdFx0XHRcdHN0eWxlLnBhZGRpbmdCb3R0b20gPSBcIjBcIjtcclxuXHRcdFx0XHRzdHlsZS5ib3JkZXJUb3BXaWR0aCA9IFwiMFwiO1xyXG5cdFx0XHRcdHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gXCIwXCI7XHJcblx0XHRcdFx0c3R5bGUuaGVpZ2h0ID0gMDtcclxuXHRcdFx0fTtcclxuXHRcclxuXHRcdC8vIElmIHRoZSBzY3JvbGxiYXIgdmlzaWJpbGl0eSBoYXMgY2hhbmdlZCBmcm9tIHRoZSBsYXN0IGRyYXcsIHdlIG5lZWQgdG9cclxuXHRcdC8vIGFkanVzdCB0aGUgY29sdW1uIHNpemVzIGFzIHRoZSB0YWJsZSB3aWR0aCB3aWxsIGhhdmUgY2hhbmdlZCB0byBhY2NvdW50XHJcblx0XHQvLyBmb3IgdGhlIHNjcm9sbGJhclxyXG5cdFx0dmFyIHNjcm9sbEJhclZpcyA9IGRpdkJvZHlFbC5zY3JvbGxIZWlnaHQgPiBkaXZCb2R5RWwuY2xpZW50SGVpZ2h0O1xyXG5cdFx0XHJcblx0XHRpZiAoIHNldHRpbmdzLnNjcm9sbEJhclZpcyAhPT0gc2Nyb2xsQmFyVmlzICYmIHNldHRpbmdzLnNjcm9sbEJhclZpcyAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRzZXR0aW5ncy5zY3JvbGxCYXJWaXMgPSBzY3JvbGxCYXJWaXM7XHJcblx0XHRcdF9mbkFkanVzdENvbHVtblNpemluZyggc2V0dGluZ3MgKTtcclxuXHRcdFx0cmV0dXJuOyAvLyBhZGp1c3QgY29sdW1uIHNpemluZyB3aWxsIGNhbGwgdGhpcyBmdW5jdGlvbiBhZ2FpblxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHNldHRpbmdzLnNjcm9sbEJhclZpcyA9IHNjcm9sbEJhclZpcztcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qXHJcblx0XHQgKiAxLiBSZS1jcmVhdGUgdGhlIHRhYmxlIGluc2lkZSB0aGUgc2Nyb2xsaW5nIGRpdlxyXG5cdFx0ICovXHJcblx0XHJcblx0XHQvLyBSZW1vdmUgdGhlIG9sZCBtaW5pbWlzZWQgdGhlYWQgYW5kIHRmb290IGVsZW1lbnRzIGluIHRoZSBpbm5lciB0YWJsZVxyXG5cdFx0dGFibGUuY2hpbGRyZW4oJ3RoZWFkLCB0Zm9vdCcpLnJlbW92ZSgpO1xyXG5cdFxyXG5cdFx0aWYgKCBmb290ZXIgKSB7XHJcblx0XHRcdGZvb3RlckNvcHkgPSBmb290ZXIuY2xvbmUoKS5wcmVwZW5kVG8oIHRhYmxlICk7XHJcblx0XHRcdGZvb3RlclRyZ0VscyA9IGZvb3Rlci5maW5kKCd0cicpOyAvLyB0aGUgb3JpZ2luYWwgdGZvb3QgaXMgaW4gaXRzIG93biB0YWJsZSBhbmQgbXVzdCBiZSBzaXplZFxyXG5cdFx0XHRmb290ZXJTcmNFbHMgPSBmb290ZXJDb3B5LmZpbmQoJ3RyJyk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBDbG9uZSB0aGUgY3VycmVudCBoZWFkZXIgYW5kIGZvb3RlciBlbGVtZW50cyBhbmQgdGhlbiBwbGFjZSBpdCBpbnRvIHRoZSBpbm5lciB0YWJsZVxyXG5cdFx0aGVhZGVyQ29weSA9IGhlYWRlci5jbG9uZSgpLnByZXBlbmRUbyggdGFibGUgKTtcclxuXHRcdGhlYWRlclRyZ0VscyA9IGhlYWRlci5maW5kKCd0cicpOyAvLyBvcmlnaW5hbCBoZWFkZXIgaXMgaW4gaXRzIG93biB0YWJsZVxyXG5cdFx0aGVhZGVyU3JjRWxzID0gaGVhZGVyQ29weS5maW5kKCd0cicpO1xyXG5cdFx0aGVhZGVyQ29weS5maW5kKCd0aCwgdGQnKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xyXG5cdFxyXG5cdFxyXG5cdFx0LypcclxuXHRcdCAqIDIuIFRha2UgbGl2ZSBtZWFzdXJlbWVudHMgZnJvbSB0aGUgRE9NIC0gZG8gbm90IGFsdGVyIHRoZSBET00gaXRzZWxmIVxyXG5cdFx0ICovXHJcblx0XHJcblx0XHQvLyBSZW1vdmUgb2xkIHNpemluZyBhbmQgYXBwbHkgdGhlIGNhbGN1bGF0ZWQgY29sdW1uIHdpZHRoc1xyXG5cdFx0Ly8gR2V0IHRoZSB1bmlxdWUgY29sdW1uIGhlYWRlcnMgaW4gdGhlIG5ld2x5IGNyZWF0ZWQgKGNsb25lZCkgaGVhZGVyLiBXZSB3YW50IHRvIGFwcGx5IHRoZVxyXG5cdFx0Ly8gY2FsY3VsYXRlZCBzaXplcyB0byB0aGlzIGhlYWRlclxyXG5cdFx0aWYgKCAhIHNjcm9sbFggKVxyXG5cdFx0e1xyXG5cdFx0XHRkaXZCb2R5U3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblx0XHRcdGRpdkhlYWRlclswXS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuXHRcdH1cclxuXHRcclxuXHRcdCQuZWFjaCggX2ZuR2V0VW5pcXVlVGhzKCBzZXR0aW5ncywgaGVhZGVyQ29weSApLCBmdW5jdGlvbiAoIGksIGVsICkge1xyXG5cdFx0XHRpZHggPSBfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCggc2V0dGluZ3MsIGkgKTtcclxuXHRcdFx0ZWwuc3R5bGUud2lkdGggPSBzZXR0aW5ncy5hb0NvbHVtbnNbaWR4XS5zV2lkdGg7XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHRpZiAoIGZvb3RlciApIHtcclxuXHRcdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuKSB7XHJcblx0XHRcdFx0bi5zdHlsZS53aWR0aCA9IFwiXCI7XHJcblx0XHRcdH0sIGZvb3RlclNyY0VscyApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gU2l6ZSB0aGUgdGFibGUgYXMgYSB3aG9sZVxyXG5cdFx0c2FuaXR5V2lkdGggPSB0YWJsZS5vdXRlcldpZHRoKCk7XHJcblx0XHRpZiAoIHNjcm9sbFggPT09IFwiXCIgKSB7XHJcblx0XHRcdC8vIE5vIHggc2Nyb2xsaW5nXHJcblx0XHRcdHRhYmxlU3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuXHRcclxuXHRcdFx0Ly8gSUU3IHdpbGwgbWFrZSB0aGUgd2lkdGggb2YgdGhlIHRhYmxlIHdoZW4gMTAwJSBpbmNsdWRlIHRoZSBzY3JvbGxiYXJcclxuXHRcdFx0Ly8gLSB3aGljaCBpcyBzaG91bGRuJ3QuIFdoZW4gdGhlcmUgaXMgYSBzY3JvbGxiYXIgd2UgbmVlZCB0byB0YWtlIHRoaXNcclxuXHRcdFx0Ly8gaW50byBhY2NvdW50LlxyXG5cdFx0XHRpZiAoIGllNjcgJiYgKHRhYmxlLmZpbmQoJ3Rib2R5JykuaGVpZ2h0KCkgPiBkaXZCb2R5RWwub2Zmc2V0SGVpZ2h0IHx8XHJcblx0XHRcdFx0ZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiKVxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHR0YWJsZVN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIHRhYmxlLm91dGVyV2lkdGgoKSAtIGJhcldpZHRoKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBSZWNhbGN1bGF0ZSB0aGUgc2FuaXR5IHdpZHRoXHJcblx0XHRcdHNhbml0eVdpZHRoID0gdGFibGUub3V0ZXJXaWR0aCgpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIHNjcm9sbFhJbm5lciAhPT0gXCJcIiApIHtcclxuXHRcdFx0Ly8gbGVnYWN5IHggc2Nyb2xsIGlubmVyIGhhcyBiZWVuIGdpdmVuIC0gdXNlIGl0XHJcblx0XHRcdHRhYmxlU3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyhzY3JvbGxYSW5uZXIpO1xyXG5cdFxyXG5cdFx0XHQvLyBSZWNhbGN1bGF0ZSB0aGUgc2FuaXR5IHdpZHRoXHJcblx0XHRcdHNhbml0eVdpZHRoID0gdGFibGUub3V0ZXJXaWR0aCgpO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gSGlkZGVuIGhlYWRlciBzaG91bGQgaGF2ZSB6ZXJvIGhlaWdodCwgc28gcmVtb3ZlIHBhZGRpbmcgYW5kIGJvcmRlcnMuIFRoZW5cclxuXHRcdC8vIHNldCB0aGUgd2lkdGggYmFzZWQgb24gdGhlIHJlYWwgaGVhZGVyc1xyXG5cdFxyXG5cdFx0Ly8gQXBwbHkgYWxsIHN0eWxlcyBpbiBvbmUgcGFzc1xyXG5cdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCB6ZXJvT3V0LCBoZWFkZXJTcmNFbHMgKTtcclxuXHRcclxuXHRcdC8vIFJlYWQgYWxsIHdpZHRocyBpbiBuZXh0IHBhc3NcclxuXHRcdF9mbkFwcGx5VG9DaGlsZHJlbiggZnVuY3Rpb24oblNpemVyKSB7XHJcblx0XHRcdGhlYWRlckNvbnRlbnQucHVzaCggblNpemVyLmlubmVySFRNTCApO1xyXG5cdFx0XHRoZWFkZXJXaWR0aHMucHVzaCggX2ZuU3RyaW5nVG9Dc3MoICQoblNpemVyKS5jc3MoJ3dpZHRoJykgKSApO1xyXG5cdFx0fSwgaGVhZGVyU3JjRWxzICk7XHJcblx0XHJcblx0XHQvLyBBcHBseSBhbGwgd2lkdGhzIGluIGZpbmFsIHBhc3NcclxuXHRcdF9mbkFwcGx5VG9DaGlsZHJlbiggZnVuY3Rpb24oblRvU2l6ZSwgaSkge1xyXG5cdFx0XHQvLyBPbmx5IGFwcGx5IHdpZHRocyB0byB0aGUgRGF0YVRhYmxlcyBkZXRlY3RlZCBoZWFkZXIgY2VsbHMgLSB0aGlzXHJcblx0XHRcdC8vIHByZXZlbnRzIGNvbXBsZXggaGVhZGVycyBmcm9tIGhhdmluZyBjb250cmFkaWN0b3J5IHNpemVzIGFwcGxpZWRcclxuXHRcdFx0aWYgKCAkLmluQXJyYXkoIG5Ub1NpemUsIGR0SGVhZGVyQ2VsbHMgKSAhPT0gLTEgKSB7XHJcblx0XHRcdFx0blRvU2l6ZS5zdHlsZS53aWR0aCA9IGhlYWRlcldpZHRoc1tpXTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgaGVhZGVyVHJnRWxzICk7XHJcblx0XHJcblx0XHQkKGhlYWRlclNyY0VscykuaGVpZ2h0KDApO1xyXG5cdFxyXG5cdFx0LyogU2FtZSBhZ2FpbiB3aXRoIHRoZSBmb290ZXIgaWYgd2UgaGF2ZSBvbmUgKi9cclxuXHRcdGlmICggZm9vdGVyIClcclxuXHRcdHtcclxuXHRcdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCB6ZXJvT3V0LCBmb290ZXJTcmNFbHMgKTtcclxuXHRcclxuXHRcdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuU2l6ZXIpIHtcclxuXHRcdFx0XHRmb290ZXJDb250ZW50LnB1c2goIG5TaXplci5pbm5lckhUTUwgKTtcclxuXHRcdFx0XHRmb290ZXJXaWR0aHMucHVzaCggX2ZuU3RyaW5nVG9Dc3MoICQoblNpemVyKS5jc3MoJ3dpZHRoJykgKSApO1xyXG5cdFx0XHR9LCBmb290ZXJTcmNFbHMgKTtcclxuXHRcclxuXHRcdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuVG9TaXplLCBpKSB7XHJcblx0XHRcdFx0blRvU2l6ZS5zdHlsZS53aWR0aCA9IGZvb3RlcldpZHRoc1tpXTtcclxuXHRcdFx0fSwgZm9vdGVyVHJnRWxzICk7XHJcblx0XHJcblx0XHRcdCQoZm9vdGVyU3JjRWxzKS5oZWlnaHQoMCk7XHJcblx0XHR9XHJcblx0XHJcblx0XHJcblx0XHQvKlxyXG5cdFx0ICogMy4gQXBwbHkgdGhlIG1lYXN1cmVtZW50c1xyXG5cdFx0ICovXHJcblx0XHJcblx0XHQvLyBcIkhpZGVcIiB0aGUgaGVhZGVyIGFuZCBmb290ZXIgdGhhdCB3ZSB1c2VkIGZvciB0aGUgc2l6aW5nLiBXZSBuZWVkIHRvIGtlZXBcclxuXHRcdC8vIHRoZSBjb250ZW50IG9mIHRoZSBjZWxsIHNvIHRoYXQgdGhlIHdpZHRoIGFwcGxpZWQgdG8gdGhlIGhlYWRlciBhbmQgYm9keVxyXG5cdFx0Ly8gYm90aCBtYXRjaCwgYnV0IHdlIHdhbnQgdG8gaGlkZSBpdCBjb21wbGV0ZWx5LiBXZSB3YW50IHRvIGFsc28gZml4IHRoZWlyXHJcblx0XHQvLyB3aWR0aCB0byB3aGF0IHRoZXkgY3VycmVudGx5IGFyZVxyXG5cdFx0X2ZuQXBwbHlUb0NoaWxkcmVuKCBmdW5jdGlvbihuU2l6ZXIsIGkpIHtcclxuXHRcdFx0blNpemVyLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwiZGF0YVRhYmxlc19zaXppbmdcIiBzdHlsZT1cImhlaWdodDowO292ZXJmbG93OmhpZGRlbjtcIj4nK2hlYWRlckNvbnRlbnRbaV0rJzwvZGl2Pic7XHJcblx0XHRcdG5TaXplci5zdHlsZS53aWR0aCA9IGhlYWRlcldpZHRoc1tpXTtcclxuXHRcdH0sIGhlYWRlclNyY0VscyApO1xyXG5cdFxyXG5cdFx0aWYgKCBmb290ZXIgKVxyXG5cdFx0e1xyXG5cdFx0XHRfZm5BcHBseVRvQ2hpbGRyZW4oIGZ1bmN0aW9uKG5TaXplciwgaSkge1xyXG5cdFx0XHRcdG5TaXplci5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfc2l6aW5nXCIgc3R5bGU9XCJoZWlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47XCI+Jytmb290ZXJDb250ZW50W2ldKyc8L2Rpdj4nO1xyXG5cdFx0XHRcdG5TaXplci5zdHlsZS53aWR0aCA9IGZvb3RlcldpZHRoc1tpXTtcclxuXHRcdFx0fSwgZm9vdGVyU3JjRWxzICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBTYW5pdHkgY2hlY2sgdGhhdCB0aGUgdGFibGUgaXMgb2YgYSBzZW5zaWJsZSB3aWR0aC4gSWYgbm90IHRoZW4gd2UgYXJlIGdvaW5nIHRvIGdldFxyXG5cdFx0Ly8gbWlzYWxpZ25tZW50IC0gdHJ5IHRvIHByZXZlbnQgdGhpcyBieSBub3QgYWxsb3dpbmcgdGhlIHRhYmxlIHRvIHNocmluayBiZWxvdyBpdHMgbWluIHdpZHRoXHJcblx0XHRpZiAoIHRhYmxlLm91dGVyV2lkdGgoKSA8IHNhbml0eVdpZHRoIClcclxuXHRcdHtcclxuXHRcdFx0Ly8gVGhlIG1pbiB3aWR0aCBkZXBlbmRzIHVwb24gaWYgd2UgaGF2ZSBhIHZlcnRpY2FsIHNjcm9sbGJhciB2aXNpYmxlIG9yIG5vdCAqL1xyXG5cdFx0XHRjb3JyZWN0aW9uID0gKChkaXZCb2R5RWwuc2Nyb2xsSGVpZ2h0ID4gZGl2Qm9keUVsLm9mZnNldEhlaWdodCB8fFxyXG5cdFx0XHRcdGRpdkJvZHkuY3NzKCdvdmVyZmxvdy15JykgPT0gXCJzY3JvbGxcIikpID9cclxuXHRcdFx0XHRcdHNhbml0eVdpZHRoK2JhcldpZHRoIDpcclxuXHRcdFx0XHRcdHNhbml0eVdpZHRoO1xyXG5cdFxyXG5cdFx0XHQvLyBJRTYvNyBhcmUgYSBsYXcgdW50byB0aGVtc2VsdmVzLi4uXHJcblx0XHRcdGlmICggaWU2NyAmJiAoZGl2Qm9keUVsLnNjcm9sbEhlaWdodCA+XHJcblx0XHRcdFx0ZGl2Qm9keUVsLm9mZnNldEhlaWdodCB8fCBkaXZCb2R5LmNzcygnb3ZlcmZsb3cteScpID09IFwic2Nyb2xsXCIpXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHRhYmxlU3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggY29ycmVjdGlvbi1iYXJXaWR0aCApO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIEFuZCBnaXZlIHRoZSB1c2VyIGEgd2FybmluZyB0aGF0IHdlJ3ZlIHN0b3BwZWQgdGhlIHRhYmxlIGdldHRpbmcgdG9vIHNtYWxsXHJcblx0XHRcdGlmICggc2Nyb2xsWCA9PT0gXCJcIiB8fCBzY3JvbGxYSW5uZXIgIT09IFwiXCIgKSB7XHJcblx0XHRcdFx0X2ZuTG9nKCBzZXR0aW5ncywgMSwgJ1Bvc3NpYmxlIGNvbHVtbiBtaXNhbGlnbm1lbnQnLCA2ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0Y29ycmVjdGlvbiA9ICcxMDAlJztcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIEFwcGx5IHRvIHRoZSBjb250YWluZXIgZWxlbWVudHNcclxuXHRcdGRpdkJvZHlTdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKCBjb3JyZWN0aW9uICk7XHJcblx0XHRkaXZIZWFkZXJTdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKCBjb3JyZWN0aW9uICk7XHJcblx0XHJcblx0XHRpZiAoIGZvb3RlciApIHtcclxuXHRcdFx0c2V0dGluZ3MublNjcm9sbEZvb3Quc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggY29ycmVjdGlvbiApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFxyXG5cdFx0LypcclxuXHRcdCAqIDQuIENsZWFuIHVwXHJcblx0XHQgKi9cclxuXHRcdGlmICggISBzY3JvbGxZICkge1xyXG5cdFx0XHQvKiBJRTc8IHB1dHMgYSB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gcGxhY2UgKHdoZW4gaXQgc2hvdWxkbid0IGJlKSBkdWUgdG8gc3VidHJhY3RpbmdcclxuXHRcdFx0ICogdGhlIHNjcm9sbGJhciBoZWlnaHQgZnJvbSB0aGUgdmlzaWJsZSBkaXNwbGF5LCByYXRoZXIgdGhhbiBhZGRpbmcgaXQgb24uIFdlIG5lZWQgdG9cclxuXHRcdFx0ICogc2V0IHRoZSBoZWlnaHQgaW4gb3JkZXIgdG8gc29ydCB0aGlzLiBEb24ndCB3YW50IHRvIGRvIGl0IGluIGFueSBvdGhlciBicm93c2Vycy5cclxuXHRcdFx0ICovXHJcblx0XHRcdGlmICggaWU2NyApIHtcclxuXHRcdFx0XHRkaXZCb2R5U3R5bGUuaGVpZ2h0ID0gX2ZuU3RyaW5nVG9Dc3MoIHRhYmxlRWwub2Zmc2V0SGVpZ2h0K2JhcldpZHRoICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIEZpbmFsbHkgc2V0IHRoZSB3aWR0aCdzIG9mIHRoZSBoZWFkZXIgYW5kIGZvb3RlciB0YWJsZXMgKi9cclxuXHRcdHZhciBpT3V0ZXJXaWR0aCA9IHRhYmxlLm91dGVyV2lkdGgoKTtcclxuXHRcdGRpdkhlYWRlclRhYmxlWzBdLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGlPdXRlcldpZHRoICk7XHJcblx0XHRkaXZIZWFkZXJJbm5lclN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGlPdXRlcldpZHRoICk7XHJcblx0XHJcblx0XHQvLyBGaWd1cmUgb3V0IGlmIHRoZXJlIGFyZSBzY3JvbGxiYXIgcHJlc2VudCAtIGlmIHNvIHRoZW4gd2UgbmVlZCBhIHRoZSBoZWFkZXIgYW5kIGZvb3RlciB0b1xyXG5cdFx0Ly8gcHJvdmlkZSBhIGJpdCBtb3JlIHNwYWNlIHRvIGFsbG93IFwib3ZlcmZsb3dcIiBzY3JvbGxpbmcgKGkuZS4gcGFzdCB0aGUgc2Nyb2xsYmFyKVxyXG5cdFx0dmFyIGJTY3JvbGxpbmcgPSB0YWJsZS5oZWlnaHQoKSA+IGRpdkJvZHlFbC5jbGllbnRIZWlnaHQgfHwgZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiO1xyXG5cdFx0dmFyIHBhZGRpbmcgPSAncGFkZGluZycgKyAoYnJvd3Nlci5iU2Nyb2xsYmFyTGVmdCA/ICdMZWZ0JyA6ICdSaWdodCcgKTtcclxuXHRcdGRpdkhlYWRlcklubmVyU3R5bGVbIHBhZGRpbmcgXSA9IGJTY3JvbGxpbmcgPyBiYXJXaWR0aCtcInB4XCIgOiBcIjBweFwiO1xyXG5cdFxyXG5cdFx0aWYgKCBmb290ZXIgKSB7XHJcblx0XHRcdGRpdkZvb3RlclRhYmxlWzBdLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGlPdXRlcldpZHRoICk7XHJcblx0XHRcdGRpdkZvb3RlcklubmVyWzBdLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGlPdXRlcldpZHRoICk7XHJcblx0XHRcdGRpdkZvb3RlcklubmVyWzBdLnN0eWxlW3BhZGRpbmddID0gYlNjcm9sbGluZyA/IGJhcldpZHRoK1wicHhcIiA6IFwiMHB4XCI7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBDb3JyZWN0IERPTSBvcmRlcmluZyBmb3IgY29sZ3JvdXAgLSBjb21lcyBiZWZvcmUgdGhlIHRoZWFkXHJcblx0XHR0YWJsZS5jaGlsZHJlbignY29sZ3JvdXAnKS5pbnNlcnRCZWZvcmUoIHRhYmxlLmNoaWxkcmVuKCd0aGVhZCcpICk7XHJcblx0XHJcblx0XHQvKiBBZGp1c3QgdGhlIHBvc2l0aW9uIG9mIHRoZSBoZWFkZXIgaW4gY2FzZSB3ZSBsb29zZSB0aGUgeS1zY3JvbGxiYXIgKi9cclxuXHRcdGRpdkJvZHkuc2Nyb2xsKCk7XHJcblx0XHJcblx0XHQvLyBJZiBzb3J0aW5nIG9yIGZpbHRlcmluZyBoYXMgb2NjdXJyZWQsIGp1bXAgdGhlIHNjcm9sbGluZyBiYWNrIHRvIHRoZSB0b3BcclxuXHRcdC8vIG9ubHkgaWYgd2UgYXJlbid0IGhvbGRpbmcgdGhlIHBvc2l0aW9uXHJcblx0XHRpZiAoIChzZXR0aW5ncy5iU29ydGVkIHx8IHNldHRpbmdzLmJGaWx0ZXJlZCkgJiYgISBzZXR0aW5ncy5fZHJhd0hvbGQgKSB7XHJcblx0XHRcdGRpdkJvZHlFbC5zY3JvbGxUb3AgPSAwO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBBcHBseSBhIGdpdmVuIGZ1bmN0aW9uIHRvIHRoZSBkaXNwbGF5IGNoaWxkIG5vZGVzIG9mIGFuIGVsZW1lbnQgYXJyYXkgKHR5cGljYWxseVxyXG5cdCAqIFREIGNoaWxkcmVuIG9mIFRSIHJvd3NcclxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gZm4gTWV0aG9kIHRvIGFwcGx5IHRvIHRoZSBvYmplY3RzXHJcblx0ICogIEBwYXJhbSBhcnJheSB7bm9kZXN9IGFuMSBMaXN0IG9mIGVsZW1lbnRzIHRvIGxvb2sgdGhyb3VnaCBmb3IgZGlzcGxheSBjaGlsZHJlblxyXG5cdCAqICBAcGFyYW0gYXJyYXkge25vZGVzfSBhbjIgQW5vdGhlciBsaXN0IChpZGVudGljYWwgc3RydWN0dXJlIHRvIHRoZSBmaXJzdCkgLSBvcHRpb25hbFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5BcHBseVRvQ2hpbGRyZW4oIGZuLCBhbjEsIGFuMiApXHJcblx0e1xyXG5cdFx0dmFyIGluZGV4PTAsIGk9MCwgaUxlbj1hbjEubGVuZ3RoO1xyXG5cdFx0dmFyIG5Ob2RlMSwgbk5vZGUyO1xyXG5cdFxyXG5cdFx0d2hpbGUgKCBpIDwgaUxlbiApIHtcclxuXHRcdFx0bk5vZGUxID0gYW4xW2ldLmZpcnN0Q2hpbGQ7XHJcblx0XHRcdG5Ob2RlMiA9IGFuMiA/IGFuMltpXS5maXJzdENoaWxkIDogbnVsbDtcclxuXHRcclxuXHRcdFx0d2hpbGUgKCBuTm9kZTEgKSB7XHJcblx0XHRcdFx0aWYgKCBuTm9kZTEubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGFuMiApIHtcclxuXHRcdFx0XHRcdFx0Zm4oIG5Ob2RlMSwgbk5vZGUyLCBpbmRleCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdGZuKCBuTm9kZTEsIGluZGV4ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRpbmRleCsrO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRuTm9kZTEgPSBuTm9kZTEubmV4dFNpYmxpbmc7XHJcblx0XHRcdFx0bk5vZGUyID0gYW4yID8gbk5vZGUyLm5leHRTaWJsaW5nIDogbnVsbDtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRpKys7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdHZhciBfX3JlX2h0bWxfcmVtb3ZlID0gLzwuKj8+L2c7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ2FsY3VsYXRlIHRoZSB3aWR0aCBvZiBjb2x1bW5zIGZvciB0aGUgdGFibGVcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMgKCBvU2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhclxyXG5cdFx0XHR0YWJsZSA9IG9TZXR0aW5ncy5uVGFibGUsXHJcblx0XHRcdGNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zLFxyXG5cdFx0XHRzY3JvbGwgPSBvU2V0dGluZ3Mub1Njcm9sbCxcclxuXHRcdFx0c2Nyb2xsWSA9IHNjcm9sbC5zWSxcclxuXHRcdFx0c2Nyb2xsWCA9IHNjcm9sbC5zWCxcclxuXHRcdFx0c2Nyb2xsWElubmVyID0gc2Nyb2xsLnNYSW5uZXIsXHJcblx0XHRcdGNvbHVtbkNvdW50ID0gY29sdW1ucy5sZW5ndGgsXHJcblx0XHRcdHZpc2libGVDb2x1bW5zID0gX2ZuR2V0Q29sdW1ucyggb1NldHRpbmdzLCAnYlZpc2libGUnICksXHJcblx0XHRcdGhlYWRlckNlbGxzID0gJCgndGgnLCBvU2V0dGluZ3MublRIZWFkKSxcclxuXHRcdFx0dGFibGVXaWR0aEF0dHIgPSB0YWJsZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyksIC8vIGZyb20gRE9NIGVsZW1lbnRcclxuXHRcdFx0dGFibGVDb250YWluZXIgPSB0YWJsZS5wYXJlbnROb2RlLFxyXG5cdFx0XHR1c2VySW5wdXRzID0gZmFsc2UsXHJcblx0XHRcdGksIGNvbHVtbiwgY29sdW1uSWR4LCB3aWR0aCwgb3V0ZXJXaWR0aCxcclxuXHRcdFx0YnJvd3NlciA9IG9TZXR0aW5ncy5vQnJvd3NlcixcclxuXHRcdFx0aWU2NyA9IGJyb3dzZXIuYlNjcm9sbE92ZXJzaXplO1xyXG5cdFxyXG5cdFx0dmFyIHN0eWxlV2lkdGggPSB0YWJsZS5zdHlsZS53aWR0aDtcclxuXHRcdGlmICggc3R5bGVXaWR0aCAmJiBzdHlsZVdpZHRoLmluZGV4T2YoJyUnKSAhPT0gLTEgKSB7XHJcblx0XHRcdHRhYmxlV2lkdGhBdHRyID0gc3R5bGVXaWR0aDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIENvbnZlcnQgYW55IHVzZXIgaW5wdXQgc2l6ZXMgaW50byBwaXhlbCBzaXplcyAqL1xyXG5cdFx0Zm9yICggaT0wIDsgaTx2aXNpYmxlQ29sdW1ucy5sZW5ndGggOyBpKysgKSB7XHJcblx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbIHZpc2libGVDb2x1bW5zW2ldIF07XHJcblx0XHJcblx0XHRcdGlmICggY29sdW1uLnNXaWR0aCAhPT0gbnVsbCApIHtcclxuXHRcdFx0XHRjb2x1bW4uc1dpZHRoID0gX2ZuQ29udmVydFRvV2lkdGgoIGNvbHVtbi5zV2lkdGhPcmlnLCB0YWJsZUNvbnRhaW5lciApO1xyXG5cdFxyXG5cdFx0XHRcdHVzZXJJbnB1dHMgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBJZiB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIERPTSBlcXVhbHMgdGhlIG51bWJlciB0aGF0IHdlIGhhdmUgdG9cclxuXHRcdCAqIHByb2Nlc3MgaW4gRGF0YVRhYmxlcywgdGhlbiB3ZSBjYW4gdXNlIHRoZSBvZmZzZXRzIHRoYXQgYXJlIGNyZWF0ZWQgYnlcclxuXHRcdCAqIHRoZSB3ZWItIGJyb3dzZXIuIE5vIGN1c3RvbSBzaXplcyBjYW4gYmUgc2V0IGluIG9yZGVyIGZvciB0aGlzIHRvIGhhcHBlbixcclxuXHRcdCAqIG5vciBzY3JvbGxpbmcgdXNlZFxyXG5cdFx0ICovXHJcblx0XHRpZiAoIGllNjcgfHwgISB1c2VySW5wdXRzICYmICEgc2Nyb2xsWCAmJiAhIHNjcm9sbFkgJiZcclxuXHRcdCAgICAgY29sdW1uQ291bnQgPT0gX2ZuVmlzYmxlQ29sdW1ucyggb1NldHRpbmdzICkgJiZcclxuXHRcdCAgICAgY29sdW1uQ291bnQgPT0gaGVhZGVyQ2VsbHMubGVuZ3RoXHJcblx0XHQpIHtcclxuXHRcdFx0Zm9yICggaT0wIDsgaTxjb2x1bW5Db3VudCA7IGkrKyApIHtcclxuXHRcdFx0XHR2YXIgY29sSWR4ID0gX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgoIG9TZXR0aW5ncywgaSApO1xyXG5cdFxyXG5cdFx0XHRcdGlmICggY29sSWR4ICE9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0Y29sdW1uc1sgY29sSWR4IF0uc1dpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGhlYWRlckNlbGxzLmVxKGkpLndpZHRoKCkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGNvbnN0cnVjdCBhIHNpbmdsZSByb3csIHdvcnN0IGNhc2UsIHRhYmxlIHdpdGggdGhlIHdpZGVzdFxyXG5cdFx0XHQvLyBub2RlIGluIHRoZSBkYXRhLCBhc3NpZ24gYW55IHVzZXIgZGVmaW5lZCB3aWR0aHMsIHRoZW4gaW5zZXJ0IGl0IGludG9cclxuXHRcdFx0Ly8gdGhlIERPTSBhbmQgYWxsb3cgdGhlIGJyb3dzZXIgdG8gZG8gYWxsIHRoZSBoYXJkIHdvcmsgb2YgY2FsY3VsYXRpbmdcclxuXHRcdFx0Ly8gdGFibGUgd2lkdGhzXHJcblx0XHRcdHZhciB0bXBUYWJsZSA9ICQodGFibGUpLmNsb25lKCkgLy8gZG9uJ3QgdXNlIGNsb25lTm9kZSAtIElFOCB3aWxsIHJlbW92ZSBldmVudHMgb24gdGhlIG1haW4gdGFibGVcclxuXHRcdFx0XHQuY3NzKCAndmlzaWJpbGl0eScsICdoaWRkZW4nIClcclxuXHRcdFx0XHQucmVtb3ZlQXR0ciggJ2lkJyApO1xyXG5cdFxyXG5cdFx0XHQvLyBDbGVhbiB1cCB0aGUgdGFibGUgYm9keVxyXG5cdFx0XHR0bXBUYWJsZS5maW5kKCd0Ym9keSB0cicpLnJlbW92ZSgpO1xyXG5cdFx0XHR2YXIgdHIgPSAkKCc8dHIvPicpLmFwcGVuZFRvKCB0bXBUYWJsZS5maW5kKCd0Ym9keScpICk7XHJcblx0XHJcblx0XHRcdC8vIENsb25lIHRoZSB0YWJsZSBoZWFkZXIgYW5kIGZvb3RlciAtIHdlIGNhbid0IHVzZSB0aGUgaGVhZGVyIC8gZm9vdGVyXHJcblx0XHRcdC8vIGZyb20gdGhlIGNsb25lZCB0YWJsZSwgc2luY2UgaWYgc2Nyb2xsaW5nIGlzIGFjdGl2ZSwgdGhlIHRhYmxlJ3NcclxuXHRcdFx0Ly8gcmVhbCBoZWFkZXIgYW5kIGZvb3RlciBhcmUgY29udGFpbmVkIGluIGRpZmZlcmVudCB0YWJsZSB0YWdzXHJcblx0XHRcdHRtcFRhYmxlLmZpbmQoJ3RoZWFkLCB0Zm9vdCcpLnJlbW92ZSgpO1xyXG5cdFx0XHR0bXBUYWJsZVxyXG5cdFx0XHRcdC5hcHBlbmQoICQob1NldHRpbmdzLm5USGVhZCkuY2xvbmUoKSApXHJcblx0XHRcdFx0LmFwcGVuZCggJChvU2V0dGluZ3MublRGb290KS5jbG9uZSgpICk7XHJcblx0XHJcblx0XHRcdC8vIFJlbW92ZSBhbnkgYXNzaWduZWQgd2lkdGhzIGZyb20gdGhlIGZvb3RlciAoZnJvbSBzY3JvbGxpbmcpXHJcblx0XHRcdHRtcFRhYmxlLmZpbmQoJ3Rmb290IHRoLCB0Zm9vdCB0ZCcpLmNzcygnd2lkdGgnLCAnJyk7XHJcblx0XHJcblx0XHRcdC8vIEFwcGx5IGN1c3RvbSBzaXppbmcgdG8gdGhlIGNsb25lZCBoZWFkZXJcclxuXHRcdFx0aGVhZGVyQ2VsbHMgPSBfZm5HZXRVbmlxdWVUaHMoIG9TZXR0aW5ncywgdG1wVGFibGUuZmluZCgndGhlYWQnKVswXSApO1xyXG5cdFxyXG5cdFx0XHRmb3IgKCBpPTAgOyBpPHZpc2libGVDb2x1bW5zLmxlbmd0aCA7IGkrKyApIHtcclxuXHRcdFx0XHRjb2x1bW4gPSBjb2x1bW5zWyB2aXNpYmxlQ29sdW1uc1tpXSBdO1xyXG5cdFxyXG5cdFx0XHRcdGhlYWRlckNlbGxzW2ldLnN0eWxlLndpZHRoID0gY29sdW1uLnNXaWR0aE9yaWcgIT09IG51bGwgJiYgY29sdW1uLnNXaWR0aE9yaWcgIT09ICcnID9cclxuXHRcdFx0XHRcdF9mblN0cmluZ1RvQ3NzKCBjb2x1bW4uc1dpZHRoT3JpZyApIDpcclxuXHRcdFx0XHRcdCcnO1xyXG5cdFxyXG5cdFx0XHRcdC8vIEZvciBzY3JvbGxYIHdlIG5lZWQgdG8gZm9yY2UgdGhlIGNvbHVtbiB3aWR0aCBvdGhlcndpc2UgdGhlXHJcblx0XHRcdFx0Ly8gYnJvd3NlciB3aWxsIGNvbGxhcHNlIGl0LiBJZiB0aGlzIHdpZHRoIGlzIHNtYWxsZXIgdGhhbiB0aGVcclxuXHRcdFx0XHQvLyB3aWR0aCB0aGUgY29sdW1uIHJlcXVpcmVzLCB0aGVuIGl0IHdpbGwgaGF2ZSBubyBlZmZlY3RcclxuXHRcdFx0XHRpZiAoIGNvbHVtbi5zV2lkdGhPcmlnICYmIHNjcm9sbFggKSB7XHJcblx0XHRcdFx0XHQkKCBoZWFkZXJDZWxsc1tpXSApLmFwcGVuZCggJCgnPGRpdi8+JykuY3NzKCB7XHJcblx0XHRcdFx0XHRcdHdpZHRoOiBjb2x1bW4uc1dpZHRoT3JpZyxcclxuXHRcdFx0XHRcdFx0bWFyZ2luOiAwLFxyXG5cdFx0XHRcdFx0XHRwYWRkaW5nOiAwLFxyXG5cdFx0XHRcdFx0XHRib3JkZXI6IDAsXHJcblx0XHRcdFx0XHRcdGhlaWdodDogMVxyXG5cdFx0XHRcdFx0fSApICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIEZpbmQgdGhlIHdpZGVzdCBjZWxsIGZvciBlYWNoIGNvbHVtbiBhbmQgcHV0IGl0IGludG8gdGhlIHRhYmxlXHJcblx0XHRcdGlmICggb1NldHRpbmdzLmFvRGF0YS5sZW5ndGggKSB7XHJcblx0XHRcdFx0Zm9yICggaT0wIDsgaTx2aXNpYmxlQ29sdW1ucy5sZW5ndGggOyBpKysgKSB7XHJcblx0XHRcdFx0XHRjb2x1bW5JZHggPSB2aXNpYmxlQ29sdW1uc1tpXTtcclxuXHRcdFx0XHRcdGNvbHVtbiA9IGNvbHVtbnNbIGNvbHVtbklkeCBdO1xyXG5cdFxyXG5cdFx0XHRcdFx0JCggX2ZuR2V0V2lkZXN0Tm9kZSggb1NldHRpbmdzLCBjb2x1bW5JZHggKSApXHJcblx0XHRcdFx0XHRcdC5jbG9uZSggZmFsc2UgKVxyXG5cdFx0XHRcdFx0XHQuYXBwZW5kKCBjb2x1bW4uc0NvbnRlbnRQYWRkaW5nIClcclxuXHRcdFx0XHRcdFx0LmFwcGVuZFRvKCB0ciApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBUaWR5IHRoZSB0ZW1wb3JhcnkgdGFibGUgLSByZW1vdmUgbmFtZSBhdHRyaWJ1dGVzIHNvIHRoZXJlIGFyZW4ndFxyXG5cdFx0XHQvLyBkdXBsaWNhdGVkIGluIHRoZSBkb20gKHJhZGlvIGVsZW1lbnRzIGZvciBleGFtcGxlKVxyXG5cdFx0XHQkKCdbbmFtZV0nLCB0bXBUYWJsZSkucmVtb3ZlQXR0cignbmFtZScpO1xyXG5cdFxyXG5cdFx0XHQvLyBUYWJsZSBoYXMgYmVlbiBidWlsdCwgYXR0YWNoIHRvIHRoZSBkb2N1bWVudCBzbyB3ZSBjYW4gd29yayB3aXRoIGl0LlxyXG5cdFx0XHQvLyBBIGhvbGRpbmcgZWxlbWVudCBpcyB1c2VkLCBwb3NpdGlvbmVkIGF0IHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lclxyXG5cdFx0XHQvLyB3aXRoIG1pbmltYWwgaGVpZ2h0LCBzbyBpdCBoYXMgbm8gZWZmZWN0IG9uIGlmIHRoZSBjb250YWluZXIgc2Nyb2xsc1xyXG5cdFx0XHQvLyBvciBub3QuIE90aGVyd2lzZSBpdCBtaWdodCB0cmlnZ2VyIHNjcm9sbGluZyB3aGVuIGl0IGFjdHVhbGx5IGlzbid0XHJcblx0XHRcdC8vIG5lZWRlZFxyXG5cdFx0XHR2YXIgaG9sZGVyID0gJCgnPGRpdi8+JykuY3NzKCBzY3JvbGxYIHx8IHNjcm9sbFkgP1xyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHRcdFx0XHRcdFx0dG9wOiAwLFxyXG5cdFx0XHRcdFx0XHRsZWZ0OiAwLFxyXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDEsXHJcblx0XHRcdFx0XHRcdHJpZ2h0OiAwLFxyXG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogJ2hpZGRlbidcclxuXHRcdFx0XHRcdH0gOlxyXG5cdFx0XHRcdFx0e31cclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0LmFwcGVuZCggdG1wVGFibGUgKVxyXG5cdFx0XHRcdC5hcHBlbmRUbyggdGFibGVDb250YWluZXIgKTtcclxuXHRcclxuXHRcdFx0Ly8gV2hlbiBzY3JvbGxpbmcgKFggb3IgWSkgd2Ugd2FudCB0byBzZXQgdGhlIHdpZHRoIG9mIHRoZSB0YWJsZSBhcyBcclxuXHRcdFx0Ly8gYXBwcm9wcmlhdGUuIEhvd2V2ZXIsIHdoZW4gbm90IHNjcm9sbGluZyBsZWF2ZSB0aGUgdGFibGUgd2lkdGggYXMgaXRcclxuXHRcdFx0Ly8gaXMuIFRoaXMgcmVzdWx0cyBpbiBzbGlnaHRseSBkaWZmZXJlbnQsIGJ1dCBJIHRoaW5rIGNvcnJlY3QgYmVoYXZpb3VyXHJcblx0XHRcdGlmICggc2Nyb2xsWCAmJiBzY3JvbGxYSW5uZXIgKSB7XHJcblx0XHRcdFx0dG1wVGFibGUud2lkdGgoIHNjcm9sbFhJbm5lciApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKCBzY3JvbGxYICkge1xyXG5cdFx0XHRcdHRtcFRhYmxlLmNzcyggJ3dpZHRoJywgJ2F1dG8nICk7XHJcblx0XHRcdFx0dG1wVGFibGUucmVtb3ZlQXR0cignd2lkdGgnKTtcclxuXHRcclxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBubyB3aWR0aCBhdHRyaWJ1dGUgb3Igc3R5bGUsIHRoZW4gYWxsb3cgdGhlIHRhYmxlIHRvXHJcblx0XHRcdFx0Ly8gY29sbGFwc2VcclxuXHRcdFx0XHRpZiAoIHRtcFRhYmxlLndpZHRoKCkgPCB0YWJsZUNvbnRhaW5lci5jbGllbnRXaWR0aCAmJiB0YWJsZVdpZHRoQXR0ciApIHtcclxuXHRcdFx0XHRcdHRtcFRhYmxlLndpZHRoKCB0YWJsZUNvbnRhaW5lci5jbGllbnRXaWR0aCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggc2Nyb2xsWSApIHtcclxuXHRcdFx0XHR0bXBUYWJsZS53aWR0aCggdGFibGVDb250YWluZXIuY2xpZW50V2lkdGggKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICggdGFibGVXaWR0aEF0dHIgKSB7XHJcblx0XHRcdFx0dG1wVGFibGUud2lkdGgoIHRhYmxlV2lkdGhBdHRyICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gR2V0IHRoZSB3aWR0aCBvZiBlYWNoIGNvbHVtbiBpbiB0aGUgY29uc3RydWN0ZWQgdGFibGUgLSB3ZSBuZWVkIHRvXHJcblx0XHRcdC8vIGtub3cgdGhlIGlubmVyIHdpZHRoIChzbyBpdCBjYW4gYmUgYXNzaWduZWQgdG8gdGhlIG90aGVyIHRhYmxlJ3NcclxuXHRcdFx0Ly8gY2VsbHMpIGFuZCB0aGUgb3V0ZXIgd2lkdGggc28gd2UgY2FuIGNhbGN1bGF0ZSB0aGUgZnVsbCB3aWR0aCBvZiB0aGVcclxuXHRcdFx0Ly8gdGFibGUuIFRoaXMgaXMgc2FmZSBzaW5jZSBEYXRhVGFibGVzIHJlcXVpcmVzIGEgdW5pcXVlIGNlbGwgZm9yIGVhY2hcclxuXHRcdFx0Ly8gY29sdW1uLCBidXQgaWYgZXZlciBhIGhlYWRlciBjYW4gc3BhbiBtdWx0aXBsZSBjb2x1bW5zLCB0aGlzIHdpbGxcclxuXHRcdFx0Ly8gbmVlZCB0byBiZSBtb2RpZmllZC5cclxuXHRcdFx0dmFyIHRvdGFsID0gMDtcclxuXHRcdFx0Zm9yICggaT0wIDsgaTx2aXNpYmxlQ29sdW1ucy5sZW5ndGggOyBpKysgKSB7XHJcblx0XHRcdFx0dmFyIGNlbGwgPSAkKGhlYWRlckNlbGxzW2ldKTtcclxuXHRcdFx0XHR2YXIgYm9yZGVyID0gY2VsbC5vdXRlcldpZHRoKCkgLSBjZWxsLndpZHRoKCk7XHJcblx0XHJcblx0XHRcdFx0Ly8gVXNlIGdldEJvdW5kaW5nLi4uIHdoZXJlIHBvc3NpYmxlIChub3QgSUU4LSkgYmVjYXVzZSBpdCBjYW4gZ2l2ZVxyXG5cdFx0XHRcdC8vIHN1Yi1waXhlbCBhY2N1cmFjeSwgd2hpY2ggd2UgdGhlbiB3YW50IHRvIHJvdW5kIHVwIVxyXG5cdFx0XHRcdHZhciBib3VuZGluZyA9IGJyb3dzZXIuYkJvdW5kaW5nID9cclxuXHRcdFx0XHRcdE1hdGguY2VpbCggaGVhZGVyQ2VsbHNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA6XHJcblx0XHRcdFx0XHRjZWxsLm91dGVyV2lkdGgoKTtcclxuXHRcclxuXHRcdFx0XHQvLyBUb3RhbCBpcyB0cmFja2VkIHRvIHJlbW92ZSBhbnkgc3ViLXBpeGVsIGVycm9ycyBhcyB0aGUgb3V0ZXJXaWR0aFxyXG5cdFx0XHRcdC8vIG9mIHRoZSB0YWJsZSBtaWdodCBub3QgZXF1YWwgdGhlIHRvdGFsIGdpdmVuIGhlcmUgKElFISkuXHJcblx0XHRcdFx0dG90YWwgKz0gYm91bmRpbmc7XHJcblx0XHJcblx0XHRcdFx0Ly8gV2lkdGggZm9yIGVhY2ggY29sdW1uIHRvIHVzZVxyXG5cdFx0XHRcdGNvbHVtbnNbIHZpc2libGVDb2x1bW5zW2ldIF0uc1dpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIGJvdW5kaW5nIC0gYm9yZGVyICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0dGFibGUuc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyggdG90YWwgKTtcclxuXHRcclxuXHRcdFx0Ly8gRmluaXNoZWQgd2l0aCB0aGUgdGFibGUgLSBkaXRjaCBpdFxyXG5cdFx0XHRob2xkZXIucmVtb3ZlKCk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBJZiB0aGVyZSBpcyBhIHdpZHRoIGF0dHIsIHdlIHdhbnQgdG8gYXR0YWNoIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoXHJcblx0XHQvLyBhbGxvd3MgdGhlIHRhYmxlIHNpemluZyB0byBhdXRvbWF0aWNhbGx5IGFkanVzdCB3aGVuIHRoZSB3aW5kb3cgaXNcclxuXHRcdC8vIHJlc2l6ZWQuIFVzZSB0aGUgd2lkdGggYXR0ciByYXRoZXIgdGhhbiBDU1MsIHNpbmNlIHdlIGNhbid0IGtub3cgaWYgdGhlXHJcblx0XHQvLyBDU1MgaXMgYSByZWxhdGl2ZSB2YWx1ZSBvciBhYnNvbHV0ZSAtIERPTSByZWFkIGlzIGFsd2F5cyBweC5cclxuXHRcdGlmICggdGFibGVXaWR0aEF0dHIgKSB7XHJcblx0XHRcdHRhYmxlLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoIHRhYmxlV2lkdGhBdHRyICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoICh0YWJsZVdpZHRoQXR0ciB8fCBzY3JvbGxYKSAmJiAhIG9TZXR0aW5ncy5fcmVzekV2dCApIHtcclxuXHRcdFx0dmFyIGJpbmRSZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0JCh3aW5kb3cpLmJpbmQoJ3Jlc2l6ZS5EVC0nK29TZXR0aW5ncy5zSW5zdGFuY2UsIF9mblRocm90dGxlKCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRfZm5BZGp1c3RDb2x1bW5TaXppbmcoIG9TZXR0aW5ncyApO1xyXG5cdFx0XHRcdH0gKSApO1xyXG5cdFx0XHR9O1xyXG5cdFxyXG5cdFx0XHQvLyBJRTYvNyB3aWxsIGNyYXNoIGlmIHdlIGJpbmQgYSByZXNpemUgZXZlbnQgaGFuZGxlciBvbiBwYWdlIGxvYWQuXHJcblx0XHRcdC8vIFRvIGJlIHJlbW92ZWQgaW4gMS4xMSB3aGljaCBkcm9wcyBJRTYvNyBzdXBwb3J0XHJcblx0XHRcdGlmICggaWU2NyApIHtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCBiaW5kUmVzaXplLCAxMDAwICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0YmluZFJlc2l6ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdG9TZXR0aW5ncy5fcmVzekV2dCA9IHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRocm90dGxlIHRoZSBjYWxscyB0byBhIGZ1bmN0aW9uLiBBcmd1bWVudHMgYW5kIGNvbnRleHQgYXJlIG1haW50YWluZWQgZm9yXHJcblx0ICogdGhlIHRocm90dGxlZCBmdW5jdGlvblxyXG5cdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBiZSBjYWxsZWRcclxuXHQgKiAgQHBhcmFtIHtpbnR9IFtmcmVxPTIwMF0gY2FsbCBmcmVxdWVuY3kgaW4gbVNcclxuXHQgKiAgQHJldHVybnMge2Z1bmN0aW9ufSB3cmFwcGVkIGZ1bmN0aW9uXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdHZhciBfZm5UaHJvdHRsZSA9IERhdGFUYWJsZS51dGlsLnRocm90dGxlO1xyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENvbnZlcnQgYSBDU1MgdW5pdCB3aWR0aCB0byBwaXhlbHMgKGUuZy4gMmVtKVxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gd2lkdGggd2lkdGggdG8gYmUgY29udmVydGVkXHJcblx0ICogIEBwYXJhbSB7bm9kZX0gcGFyZW50IHBhcmVudCB0byBnZXQgdGhlIHdpdGggZm9yIChyZXF1aXJlZCBmb3IgcmVsYXRpdmUgd2lkdGhzKSAtIG9wdGlvbmFsXHJcblx0ICogIEByZXR1cm5zIHtpbnR9IHdpZHRoIGluIHBpeGVsc1xyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Db252ZXJ0VG9XaWR0aCAoIHdpZHRoLCBwYXJlbnQgKVxyXG5cdHtcclxuXHRcdGlmICggISB3aWR0aCApIHtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgbiA9ICQoJzxkaXYvPicpXHJcblx0XHRcdC5jc3MoICd3aWR0aCcsIF9mblN0cmluZ1RvQ3NzKCB3aWR0aCApIClcclxuXHRcdFx0LmFwcGVuZFRvKCBwYXJlbnQgfHwgZG9jdW1lbnQuYm9keSApO1xyXG5cdFxyXG5cdFx0dmFyIHZhbCA9IG5bMF0ub2Zmc2V0V2lkdGg7XHJcblx0XHRuLnJlbW92ZSgpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IHRoZSB3aWRlc3Qgbm9kZVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtpbnR9IGNvbElkeCBjb2x1bW4gb2YgaW50ZXJlc3RcclxuXHQgKiAgQHJldHVybnMge25vZGV9IHdpZGVzdCB0YWJsZSBub2RlXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkdldFdpZGVzdE5vZGUoIHNldHRpbmdzLCBjb2xJZHggKVxyXG5cdHtcclxuXHRcdHZhciBpZHggPSBfZm5HZXRNYXhMZW5TdHJpbmcoIHNldHRpbmdzLCBjb2xJZHggKTtcclxuXHRcdGlmICggaWR4IDwgMCApIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgZGF0YSA9IHNldHRpbmdzLmFvRGF0YVsgaWR4IF07XHJcblx0XHRyZXR1cm4gISBkYXRhLm5UciA/IC8vIE1pZ2h0IG5vdCBoYXZlIGJlZW4gY3JlYXRlZCB3aGVuIGRlZmVycmVkIHJlbmRlcmluZ1xyXG5cdFx0XHQkKCc8dGQvPicpLmh0bWwoIF9mbkdldENlbGxEYXRhKCBzZXR0aW5ncywgaWR4LCBjb2xJZHgsICdkaXNwbGF5JyApIClbMF0gOlxyXG5cdFx0XHRkYXRhLmFuQ2VsbHNbIGNvbElkeCBdO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIG1heGltdW0gc3RybGVuIGZvciBlYWNoIGRhdGEgY29sdW1uXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge2ludH0gY29sSWR4IGNvbHVtbiBvZiBpbnRlcmVzdFxyXG5cdCAqICBAcmV0dXJucyB7c3RyaW5nfSBtYXggc3RyaW5nIGxlbmd0aCBmb3IgZWFjaCBjb2x1bW5cclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuR2V0TWF4TGVuU3RyaW5nKCBzZXR0aW5ncywgY29sSWR4IClcclxuXHR7XHJcblx0XHR2YXIgcywgbWF4PS0xLCBtYXhJZHggPSAtMTtcclxuXHRcclxuXHRcdGZvciAoIHZhciBpPTAsIGllbj1zZXR0aW5ncy5hb0RhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdHMgPSBfZm5HZXRDZWxsRGF0YSggc2V0dGluZ3MsIGksIGNvbElkeCwgJ2Rpc3BsYXknICkrJyc7XHJcblx0XHRcdHMgPSBzLnJlcGxhY2UoIF9fcmVfaHRtbF9yZW1vdmUsICcnICk7XHJcblx0XHRcdHMgPSBzLnJlcGxhY2UoIC8mbmJzcDsvZywgJyAnICk7XHJcblx0XHJcblx0XHRcdGlmICggcy5sZW5ndGggPiBtYXggKSB7XHJcblx0XHRcdFx0bWF4ID0gcy5sZW5ndGg7XHJcblx0XHRcdFx0bWF4SWR4ID0gaTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIG1heElkeDtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXBwZW5kIGEgQ1NTIHVuaXQgKG9ubHkgaWYgcmVxdWlyZWQpIHRvIGEgc3RyaW5nXHJcblx0ICogIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSB0byBjc3MtaWZ5XHJcblx0ICogIEByZXR1cm5zIHtzdHJpbmd9IHZhbHVlIHdpdGggY3NzIHVuaXRcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuU3RyaW5nVG9Dc3MoIHMgKVxyXG5cdHtcclxuXHRcdGlmICggcyA9PT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuICcwcHgnO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYgKCB0eXBlb2YgcyA9PSAnbnVtYmVyJyApIHtcclxuXHRcdFx0cmV0dXJuIHMgPCAwID9cclxuXHRcdFx0XHQnMHB4JyA6XHJcblx0XHRcdFx0cysncHgnO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gQ2hlY2sgaXQgaGFzIGEgdW5pdCBjaGFyYWN0ZXIgYWxyZWFkeVxyXG5cdFx0cmV0dXJuIHMubWF0Y2goL1xcZCQvKSA/XHJcblx0XHRcdHMrJ3B4JyA6XHJcblx0XHRcdHM7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdGZ1bmN0aW9uIF9mblNvcnRGbGF0dGVuICggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhclxyXG5cdFx0XHRpLCBpTGVuLCBrLCBrTGVuLFxyXG5cdFx0XHRhU29ydCA9IFtdLFxyXG5cdFx0XHRhaU9yaWcgPSBbXSxcclxuXHRcdFx0YW9Db2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLFxyXG5cdFx0XHRhRGF0YVNvcnQsIGlDb2wsIHNUeXBlLCBzcmNDb2wsXHJcblx0XHRcdGZpeGVkID0gc2V0dGluZ3MuYWFTb3J0aW5nRml4ZWQsXHJcblx0XHRcdGZpeGVkT2JqID0gJC5pc1BsYWluT2JqZWN0KCBmaXhlZCApLFxyXG5cdFx0XHRuZXN0ZWRTb3J0ID0gW10sXHJcblx0XHRcdGFkZCA9IGZ1bmN0aW9uICggYSApIHtcclxuXHRcdFx0XHRpZiAoIGEubGVuZ3RoICYmICEgJC5pc0FycmF5KCBhWzBdICkgKSB7XHJcblx0XHRcdFx0XHQvLyAxRCBhcnJheVxyXG5cdFx0XHRcdFx0bmVzdGVkU29ydC5wdXNoKCBhICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gMkQgYXJyYXlcclxuXHRcdFx0XHRcdCQubWVyZ2UoIG5lc3RlZFNvcnQsIGEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHJcblx0XHQvLyBCdWlsZCB0aGUgc29ydCBhcnJheSwgd2l0aCBwcmUtZml4IGFuZCBwb3N0LWZpeCBvcHRpb25zIGlmIHRoZXkgaGF2ZSBiZWVuXHJcblx0XHQvLyBzcGVjaWZpZWRcclxuXHRcdGlmICggJC5pc0FycmF5KCBmaXhlZCApICkge1xyXG5cdFx0XHRhZGQoIGZpeGVkICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGZpeGVkT2JqICYmIGZpeGVkLnByZSApIHtcclxuXHRcdFx0YWRkKCBmaXhlZC5wcmUgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdGFkZCggc2V0dGluZ3MuYWFTb3J0aW5nICk7XHJcblx0XHJcblx0XHRpZiAoZml4ZWRPYmogJiYgZml4ZWQucG9zdCApIHtcclxuXHRcdFx0YWRkKCBmaXhlZC5wb3N0ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRmb3IgKCBpPTAgOyBpPG5lc3RlZFNvcnQubGVuZ3RoIDsgaSsrIClcclxuXHRcdHtcclxuXHRcdFx0c3JjQ29sID0gbmVzdGVkU29ydFtpXVswXTtcclxuXHRcdFx0YURhdGFTb3J0ID0gYW9Db2x1bW5zWyBzcmNDb2wgXS5hRGF0YVNvcnQ7XHJcblx0XHJcblx0XHRcdGZvciAoIGs9MCwga0xlbj1hRGF0YVNvcnQubGVuZ3RoIDsgazxrTGVuIDsgaysrIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlDb2wgPSBhRGF0YVNvcnRba107XHJcblx0XHRcdFx0c1R5cGUgPSBhb0NvbHVtbnNbIGlDb2wgXS5zVHlwZSB8fCAnc3RyaW5nJztcclxuXHRcclxuXHRcdFx0XHRpZiAoIG5lc3RlZFNvcnRbaV0uX2lkeCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0bmVzdGVkU29ydFtpXS5faWR4ID0gJC5pbkFycmF5KCBuZXN0ZWRTb3J0W2ldWzFdLCBhb0NvbHVtbnNbaUNvbF0uYXNTb3J0aW5nICk7XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdGFTb3J0LnB1c2goIHtcclxuXHRcdFx0XHRcdHNyYzogICAgICAgc3JjQ29sLFxyXG5cdFx0XHRcdFx0Y29sOiAgICAgICBpQ29sLFxyXG5cdFx0XHRcdFx0ZGlyOiAgICAgICBuZXN0ZWRTb3J0W2ldWzFdLFxyXG5cdFx0XHRcdFx0aW5kZXg6ICAgICBuZXN0ZWRTb3J0W2ldLl9pZHgsXHJcblx0XHRcdFx0XHR0eXBlOiAgICAgIHNUeXBlLFxyXG5cdFx0XHRcdFx0Zm9ybWF0dGVyOiBEYXRhVGFibGUuZXh0LnR5cGUub3JkZXJbIHNUeXBlK1wiLXByZVwiIF1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiBhU29ydDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ2hhbmdlIHRoZSBvcmRlciBvZiB0aGUgdGFibGVcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKiAgQHRvZG8gVGhpcyByZWFsbHkgbmVlZHMgc3BsaXQgdXAhXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuU29ydCAoIG9TZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdGksIGllbiwgaUxlbiwgaiwgakxlbiwgaywga0xlbixcclxuXHRcdFx0c0RhdGFUeXBlLCBuVGgsXHJcblx0XHRcdGFpT3JpZyA9IFtdLFxyXG5cdFx0XHRvRXh0U29ydCA9IERhdGFUYWJsZS5leHQudHlwZS5vcmRlcixcclxuXHRcdFx0YW9EYXRhID0gb1NldHRpbmdzLmFvRGF0YSxcclxuXHRcdFx0YW9Db2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucyxcclxuXHRcdFx0YURhdGFTb3J0LCBkYXRhLCBpQ29sLCBzVHlwZSwgb1NvcnQsXHJcblx0XHRcdGZvcm1hdHRlcnMgPSAwLFxyXG5cdFx0XHRzb3J0Q29sLFxyXG5cdFx0XHRkaXNwbGF5TWFzdGVyID0gb1NldHRpbmdzLmFpRGlzcGxheU1hc3RlcixcclxuXHRcdFx0YVNvcnQ7XHJcblx0XHJcblx0XHQvLyBSZXNvbHZlIGFueSBjb2x1bW4gdHlwZXMgdGhhdCBhcmUgdW5rbm93biBkdWUgdG8gYWRkaXRpb24gb3IgaW52YWxpZGF0aW9uXHJcblx0XHQvLyBAdG9kbyBDYW4gdGhpcyBiZSBtb3ZlZCBpbnRvIGEgJ2RhdGEtcmVhZHknIGhhbmRsZXIgd2hpY2ggaXMgY2FsbGVkIHdoZW5cclxuXHRcdC8vICAgZGF0YSBpcyBnb2luZyB0byBiZSB1c2VkIGluIHRoZSB0YWJsZT9cclxuXHRcdF9mbkNvbHVtblR5cGVzKCBvU2V0dGluZ3MgKTtcclxuXHRcclxuXHRcdGFTb3J0ID0gX2ZuU29ydEZsYXR0ZW4oIG9TZXR0aW5ncyApO1xyXG5cdFxyXG5cdFx0Zm9yICggaT0wLCBpZW49YVNvcnQubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdHNvcnRDb2wgPSBhU29ydFtpXTtcclxuXHRcclxuXHRcdFx0Ly8gVHJhY2sgaWYgd2UgY2FuIHVzZSB0aGUgZmFzdCBzb3J0IGFsZ29yaXRobVxyXG5cdFx0XHRpZiAoIHNvcnRDb2wuZm9ybWF0dGVyICkge1xyXG5cdFx0XHRcdGZvcm1hdHRlcnMrKztcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBMb2FkIHRoZSBkYXRhIG5lZWRlZCBmb3IgdGhlIHNvcnQsIGZvciBlYWNoIGNlbGxcclxuXHRcdFx0X2ZuU29ydERhdGEoIG9TZXR0aW5ncywgc29ydENvbC5jb2wgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIE5vIHNvcnRpbmcgcmVxdWlyZWQgaWYgc2VydmVyLXNpZGUgb3Igbm8gc29ydGluZyBhcnJheSAqL1xyXG5cdFx0aWYgKCBfZm5EYXRhU291cmNlKCBvU2V0dGluZ3MgKSAhPSAnc3NwJyAmJiBhU29ydC5sZW5ndGggIT09IDAgKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBDcmVhdGUgYSB2YWx1ZSAtIGtleSBhcnJheSBvZiB0aGUgY3VycmVudCByb3cgcG9zaXRpb25zIHN1Y2ggdGhhdCB3ZSBjYW4gdXNlIHRoZWlyXHJcblx0XHRcdC8vIGN1cnJlbnQgcG9zaXRpb24gZHVyaW5nIHRoZSBzb3J0LCBpZiB2YWx1ZXMgbWF0Y2gsIGluIG9yZGVyIHRvIHBlcmZvcm0gc3RhYmxlIHNvcnRpbmdcclxuXHRcdFx0Zm9yICggaT0wLCBpTGVuPWRpc3BsYXlNYXN0ZXIubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGFpT3JpZ1sgZGlzcGxheU1hc3RlcltpXSBdID0gaTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvKiBEbyB0aGUgc29ydCAtIGhlcmUgd2Ugd2FudCBtdWx0aS1jb2x1bW4gc29ydGluZyBiYXNlZCBvbiBhIGdpdmVuIGRhdGEgc291cmNlIChjb2x1bW4pXHJcblx0XHRcdCAqIGFuZCBzb3J0aW5nIGZ1bmN0aW9uIChmcm9tIG9Tb3J0KSBpbiBhIGNlcnRhaW4gZGlyZWN0aW9uLiBJdCdzIHJlYXNvbmFibHkgY29tcGxleCB0b1xyXG5cdFx0XHQgKiBmb2xsb3cgb24gaXQncyBvd24sIGJ1dCB0aGlzIGlzIHdoYXQgd2Ugd2FudCAoZXhhbXBsZSB0d28gY29sdW1uIHNvcnRpbmcpOlxyXG5cdFx0XHQgKiAgZm5Mb2NhbFNvcnRpbmcgPSBmdW5jdGlvbihhLGIpe1xyXG5cdFx0XHQgKiAgICB2YXIgaVRlc3Q7XHJcblx0XHRcdCAqICAgIGlUZXN0ID0gb1NvcnRbJ3N0cmluZy1hc2MnXSgnZGF0YTExJywgJ2RhdGExMicpO1xyXG5cdFx0XHQgKiAgICAgIGlmIChpVGVzdCAhPT0gMClcclxuXHRcdFx0ICogICAgICAgIHJldHVybiBpVGVzdDtcclxuXHRcdFx0ICogICAgaVRlc3QgPSBvU29ydFsnbnVtZXJpYy1kZXNjJ10oJ2RhdGEyMScsICdkYXRhMjInKTtcclxuXHRcdFx0ICogICAgaWYgKGlUZXN0ICE9PSAwKVxyXG5cdFx0XHQgKiAgICAgIHJldHVybiBpVGVzdDtcclxuXHRcdFx0ICogICAgcmV0dXJuIG9Tb3J0WydudW1lcmljLWFzYyddKCBhaU9yaWdbYV0sIGFpT3JpZ1tiXSApO1xyXG5cdFx0XHQgKiAgfVxyXG5cdFx0XHQgKiBCYXNpY2FsbHkgd2UgaGF2ZSBhIHRlc3QgZm9yIGVhY2ggc29ydGluZyBjb2x1bW4sIGlmIHRoZSBkYXRhIGluIHRoYXQgY29sdW1uIGlzIGVxdWFsLFxyXG5cdFx0XHQgKiB0ZXN0IHRoZSBuZXh0IGNvbHVtbi4gSWYgYWxsIGNvbHVtbnMgbWF0Y2gsIHRoZW4gd2UgdXNlIGEgbnVtZXJpYyBzb3J0IG9uIHRoZSByb3dcclxuXHRcdFx0ICogcG9zaXRpb25zIGluIHRoZSBvcmlnaW5hbCBkYXRhIGFycmF5IHRvIHByb3ZpZGUgYSBzdGFibGUgc29ydC5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogTm90ZSAtIEkga25vdyBpdCBzZWVtcyBleGNlc3NpdmUgdG8gaGF2ZSB0d28gc29ydGluZyBtZXRob2RzLCBidXQgdGhlIGZpcnN0IGlzIGFyb3VuZFxyXG5cdFx0XHQgKiAxNSUgZmFzdGVyLCBzbyB0aGUgc2Vjb25kIGlzIG9ubHkgbWFpbnRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBzb3J0aW5nXHJcblx0XHRcdCAqIG1ldGhvZHMgd2hpY2ggZG8gbm90IGhhdmUgYSBwcmUtc29ydCBmb3JtYXR0aW5nIGZ1bmN0aW9uLlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0aWYgKCBmb3JtYXR0ZXJzID09PSBhU29ydC5sZW5ndGggKSB7XHJcblx0XHRcdFx0Ly8gQWxsIHNvcnQgdHlwZXMgaGF2ZSBmb3JtYXR0aW5nIGZ1bmN0aW9uc1xyXG5cdFx0XHRcdGRpc3BsYXlNYXN0ZXIuc29ydCggZnVuY3Rpb24gKCBhLCBiICkge1xyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdHgsIHksIGssIHRlc3QsIHNvcnQsXHJcblx0XHRcdFx0XHRcdGxlbj1hU29ydC5sZW5ndGgsXHJcblx0XHRcdFx0XHRcdGRhdGFBID0gYW9EYXRhW2FdLl9hU29ydERhdGEsXHJcblx0XHRcdFx0XHRcdGRhdGFCID0gYW9EYXRhW2JdLl9hU29ydERhdGE7XHJcblx0XHJcblx0XHRcdFx0XHRmb3IgKCBrPTAgOyBrPGxlbiA7IGsrKyApIHtcclxuXHRcdFx0XHRcdFx0c29ydCA9IGFTb3J0W2tdO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHR4ID0gZGF0YUFbIHNvcnQuY29sIF07XHJcblx0XHRcdFx0XHRcdHkgPSBkYXRhQlsgc29ydC5jb2wgXTtcclxuXHRcclxuXHRcdFx0XHRcdFx0dGVzdCA9IHg8eSA/IC0xIDogeD55ID8gMSA6IDA7XHJcblx0XHRcdFx0XHRcdGlmICggdGVzdCAhPT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc29ydC5kaXIgPT09ICdhc2MnID8gdGVzdCA6IC10ZXN0O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHR4ID0gYWlPcmlnW2FdO1xyXG5cdFx0XHRcdFx0eSA9IGFpT3JpZ1tiXTtcclxuXHRcdFx0XHRcdHJldHVybiB4PHkgPyAtMSA6IHg+eSA/IDEgOiAwO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQvLyBEZXByZWNpYXRlZCAtIHJlbW92ZSBpbiAxLjExIChwcm92aWRpbmcgYSBwbHVnLWluIG9wdGlvbilcclxuXHRcdFx0XHQvLyBOb3QgYWxsIHNvcnQgdHlwZXMgaGF2ZSBmb3JtYXR0aW5nIG1ldGhvZHMsIHNvIHdlIGhhdmUgdG8gY2FsbCB0aGVpciBzb3J0aW5nXHJcblx0XHRcdFx0Ly8gbWV0aG9kcy5cclxuXHRcdFx0XHRkaXNwbGF5TWFzdGVyLnNvcnQoIGZ1bmN0aW9uICggYSwgYiApIHtcclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHR4LCB5LCBrLCBsLCB0ZXN0LCBzb3J0LCBmbixcclxuXHRcdFx0XHRcdFx0bGVuPWFTb3J0Lmxlbmd0aCxcclxuXHRcdFx0XHRcdFx0ZGF0YUEgPSBhb0RhdGFbYV0uX2FTb3J0RGF0YSxcclxuXHRcdFx0XHRcdFx0ZGF0YUIgPSBhb0RhdGFbYl0uX2FTb3J0RGF0YTtcclxuXHRcclxuXHRcdFx0XHRcdGZvciAoIGs9MCA7IGs8bGVuIDsgaysrICkge1xyXG5cdFx0XHRcdFx0XHRzb3J0ID0gYVNvcnRba107XHJcblx0XHJcblx0XHRcdFx0XHRcdHggPSBkYXRhQVsgc29ydC5jb2wgXTtcclxuXHRcdFx0XHRcdFx0eSA9IGRhdGFCWyBzb3J0LmNvbCBdO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRmbiA9IG9FeHRTb3J0WyBzb3J0LnR5cGUrXCItXCIrc29ydC5kaXIgXSB8fCBvRXh0U29ydFsgXCJzdHJpbmctXCIrc29ydC5kaXIgXTtcclxuXHRcdFx0XHRcdFx0dGVzdCA9IGZuKCB4LCB5ICk7XHJcblx0XHRcdFx0XHRcdGlmICggdGVzdCAhPT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGVzdDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0eCA9IGFpT3JpZ1thXTtcclxuXHRcdFx0XHRcdHkgPSBhaU9yaWdbYl07XHJcblx0XHRcdFx0XHRyZXR1cm4geDx5ID8gLTEgOiB4PnkgPyAxIDogMDtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIFRlbGwgdGhlIGRyYXcgZnVuY3Rpb24gdGhhdCB3ZSBoYXZlIHNvcnRlZCB0aGUgZGF0YSAqL1xyXG5cdFx0b1NldHRpbmdzLmJTb3J0ZWQgPSB0cnVlO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRmdW5jdGlvbiBfZm5Tb3J0QXJpYSAoIHNldHRpbmdzIClcclxuXHR7XHJcblx0XHR2YXIgbGFiZWw7XHJcblx0XHR2YXIgbmV4dFNvcnQ7XHJcblx0XHR2YXIgY29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucztcclxuXHRcdHZhciBhU29ydCA9IF9mblNvcnRGbGF0dGVuKCBzZXR0aW5ncyApO1xyXG5cdFx0dmFyIG9BcmlhID0gc2V0dGluZ3Mub0xhbmd1YWdlLm9BcmlhO1xyXG5cdFxyXG5cdFx0Ly8gQVJJQSBhdHRyaWJ1dGVzIC0gbmVlZCB0byBsb29wIGFsbCBjb2x1bW5zLCB0byB1cGRhdGUgYWxsIChyZW1vdmluZyBvbGRcclxuXHRcdC8vIGF0dHJpYnV0ZXMgYXMgbmVlZGVkKVxyXG5cdFx0Zm9yICggdmFyIGk9MCwgaUxlbj1jb2x1bW5zLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApXHJcblx0XHR7XHJcblx0XHRcdHZhciBjb2wgPSBjb2x1bW5zW2ldO1xyXG5cdFx0XHR2YXIgYXNTb3J0aW5nID0gY29sLmFzU29ydGluZztcclxuXHRcdFx0dmFyIHNUaXRsZSA9IGNvbC5zVGl0bGUucmVwbGFjZSggLzwuKj8+L2csIFwiXCIgKTtcclxuXHRcdFx0dmFyIHRoID0gY29sLm5UaDtcclxuXHRcclxuXHRcdFx0Ly8gSUU3IGlzIHRocm93aW5nIGFuIGVycm9yIHdoZW4gc2V0dGluZyB0aGVzZSBwcm9wZXJ0aWVzIHdpdGggalF1ZXJ5J3NcclxuXHRcdFx0Ly8gYXR0cigpIGFuZCByZW1vdmVBdHRyKCkgbWV0aG9kcy4uLlxyXG5cdFx0XHR0aC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtc29ydCcpO1xyXG5cdFxyXG5cdFx0XHQvKiBJbiBBUklBIG9ubHkgdGhlIGZpcnN0IHNvcnRpbmcgY29sdW1uIGNhbiBiZSBtYXJrZWQgYXMgc29ydGluZyAtIG5vIG11bHRpLXNvcnQgb3B0aW9uICovXHJcblx0XHRcdGlmICggY29sLmJTb3J0YWJsZSApIHtcclxuXHRcdFx0XHRpZiAoIGFTb3J0Lmxlbmd0aCA+IDAgJiYgYVNvcnRbMF0uY29sID09IGkgKSB7XHJcblx0XHRcdFx0XHR0aC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc29ydCcsIGFTb3J0WzBdLmRpcj09XCJhc2NcIiA/IFwiYXNjZW5kaW5nXCIgOiBcImRlc2NlbmRpbmdcIiApO1xyXG5cdFx0XHRcdFx0bmV4dFNvcnQgPSBhc1NvcnRpbmdbIGFTb3J0WzBdLmluZGV4KzEgXSB8fCBhc1NvcnRpbmdbMF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0bmV4dFNvcnQgPSBhc1NvcnRpbmdbMF07XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdGxhYmVsID0gc1RpdGxlICsgKCBuZXh0U29ydCA9PT0gXCJhc2NcIiA/XHJcblx0XHRcdFx0XHRvQXJpYS5zU29ydEFzY2VuZGluZyA6XHJcblx0XHRcdFx0XHRvQXJpYS5zU29ydERlc2NlbmRpbmdcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGxhYmVsID0gc1RpdGxlO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdHRoLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGxhYmVsKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRnVuY3Rpb24gdG8gcnVuIG9uIHVzZXIgc29ydCByZXF1ZXN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge25vZGV9IGF0dGFjaFRvIG5vZGUgdG8gYXR0YWNoIHRoZSBoYW5kbGVyIHRvXHJcblx0ICogIEBwYXJhbSB7aW50fSBjb2xJZHggY29sdW1uIHNvcnRpbmcgaW5kZXhcclxuXHQgKiAgQHBhcmFtIHtib29sZWFufSBbYXBwZW5kPWZhbHNlXSBBcHBlbmQgdGhlIHJlcXVlc3RlZCBzb3J0IHRvIHRoZSBleGlzdGluZ1xyXG5cdCAqICAgIHNvcnQgaWYgdHJ1ZSAoaS5lLiBtdWx0aS1jb2x1bW4gc29ydClcclxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBjYWxsYmFjayBmdW5jdGlvblxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Tb3J0TGlzdGVuZXIgKCBzZXR0aW5ncywgY29sSWR4LCBhcHBlbmQsIGNhbGxiYWNrIClcclxuXHR7XHJcblx0XHR2YXIgY29sID0gc2V0dGluZ3MuYW9Db2x1bW5zWyBjb2xJZHggXTtcclxuXHRcdHZhciBzb3J0aW5nID0gc2V0dGluZ3MuYWFTb3J0aW5nO1xyXG5cdFx0dmFyIGFzU29ydGluZyA9IGNvbC5hc1NvcnRpbmc7XHJcblx0XHR2YXIgbmV4dFNvcnRJZHg7XHJcblx0XHR2YXIgbmV4dCA9IGZ1bmN0aW9uICggYSwgb3ZlcmZsb3cgKSB7XHJcblx0XHRcdHZhciBpZHggPSBhLl9pZHg7XHJcblx0XHRcdGlmICggaWR4ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0aWR4ID0gJC5pbkFycmF5KCBhWzFdLCBhc1NvcnRpbmcgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRyZXR1cm4gaWR4KzEgPCBhc1NvcnRpbmcubGVuZ3RoID9cclxuXHRcdFx0XHRpZHgrMSA6XHJcblx0XHRcdFx0b3ZlcmZsb3cgP1xyXG5cdFx0XHRcdFx0bnVsbCA6XHJcblx0XHRcdFx0XHQwO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIENvbnZlcnQgdG8gMkQgYXJyYXkgaWYgbmVlZGVkXHJcblx0XHRpZiAoIHR5cGVvZiBzb3J0aW5nWzBdID09PSAnbnVtYmVyJyApIHtcclxuXHRcdFx0c29ydGluZyA9IHNldHRpbmdzLmFhU29ydGluZyA9IFsgc29ydGluZyBdO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gSWYgYXBwZW5kaW5nIHRoZSBzb3J0IHRoZW4gd2UgYXJlIG11bHRpLWNvbHVtbiBzb3J0aW5nXHJcblx0XHRpZiAoIGFwcGVuZCAmJiBzZXR0aW5ncy5vRmVhdHVyZXMuYlNvcnRNdWx0aSApIHtcclxuXHRcdFx0Ly8gQXJlIHdlIGFscmVhZHkgZG9pbmcgc29tZSBraW5kIG9mIHNvcnQgb24gdGhpcyBjb2x1bW4/XHJcblx0XHRcdHZhciBzb3J0SWR4ID0gJC5pbkFycmF5KCBjb2xJZHgsIF9wbHVjayhzb3J0aW5nLCAnMCcpICk7XHJcblx0XHJcblx0XHRcdGlmICggc29ydElkeCAhPT0gLTEgKSB7XHJcblx0XHRcdFx0Ly8gWWVzLCBtb2RpZnkgdGhlIHNvcnRcclxuXHRcdFx0XHRuZXh0U29ydElkeCA9IG5leHQoIHNvcnRpbmdbc29ydElkeF0sIHRydWUgKTtcclxuXHRcclxuXHRcdFx0XHRpZiAoIG5leHRTb3J0SWR4ID09PSBudWxsICYmIHNvcnRpbmcubGVuZ3RoID09PSAxICkge1xyXG5cdFx0XHRcdFx0bmV4dFNvcnRJZHggPSAwOyAvLyBjYW4ndCByZW1vdmUgc29ydGluZyBjb21wbGV0ZWx5XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdGlmICggbmV4dFNvcnRJZHggPT09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRzb3J0aW5nLnNwbGljZSggc29ydElkeCwgMSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHNvcnRpbmdbc29ydElkeF1bMV0gPSBhc1NvcnRpbmdbIG5leHRTb3J0SWR4IF07XHJcblx0XHRcdFx0XHRzb3J0aW5nW3NvcnRJZHhdLl9pZHggPSBuZXh0U29ydElkeDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0Ly8gTm8gc29ydCBvbiB0aGlzIGNvbHVtbiB5ZXRcclxuXHRcdFx0XHRzb3J0aW5nLnB1c2goIFsgY29sSWR4LCBhc1NvcnRpbmdbMF0sIDAgXSApO1xyXG5cdFx0XHRcdHNvcnRpbmdbc29ydGluZy5sZW5ndGgtMV0uX2lkeCA9IDA7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBzb3J0aW5nLmxlbmd0aCAmJiBzb3J0aW5nWzBdWzBdID09IGNvbElkeCApIHtcclxuXHRcdFx0Ly8gU2luZ2xlIGNvbHVtbiAtIGFscmVhZHkgc29ydGluZyBvbiB0aGlzIGNvbHVtbiwgbW9kaWZ5IHRoZSBzb3J0XHJcblx0XHRcdG5leHRTb3J0SWR4ID0gbmV4dCggc29ydGluZ1swXSApO1xyXG5cdFxyXG5cdFx0XHRzb3J0aW5nLmxlbmd0aCA9IDE7XHJcblx0XHRcdHNvcnRpbmdbMF1bMV0gPSBhc1NvcnRpbmdbIG5leHRTb3J0SWR4IF07XHJcblx0XHRcdHNvcnRpbmdbMF0uX2lkeCA9IG5leHRTb3J0SWR4O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdC8vIFNpbmdsZSBjb2x1bW4gLSBzb3J0IG9ubHkgb24gdGhpcyBjb2x1bW5cclxuXHRcdFx0c29ydGluZy5sZW5ndGggPSAwO1xyXG5cdFx0XHRzb3J0aW5nLnB1c2goIFsgY29sSWR4LCBhc1NvcnRpbmdbMF0gXSApO1xyXG5cdFx0XHRzb3J0aW5nWzBdLl9pZHggPSAwO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gUnVuIHRoZSBzb3J0IGJ5IGNhbGxpbmcgYSBmdWxsIHJlZHJhd1xyXG5cdFx0X2ZuUmVEcmF3KCBzZXR0aW5ncyApO1xyXG5cdFxyXG5cdFx0Ly8gY2FsbGJhY2sgdXNlZCBmb3IgYXN5bmMgdXNlciBpbnRlcmFjdGlvblxyXG5cdFx0aWYgKCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyApIHtcclxuXHRcdFx0Y2FsbGJhY2soIHNldHRpbmdzICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEF0dGFjaCBhIHNvcnQgaGFuZGxlciAoY2xpY2spIHRvIGEgbm9kZVxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgZGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtub2RlfSBhdHRhY2hUbyBub2RlIHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0b1xyXG5cdCAqICBAcGFyYW0ge2ludH0gY29sSWR4IGNvbHVtbiBzb3J0aW5nIGluZGV4XHJcblx0ICogIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gY2FsbGJhY2sgZnVuY3Rpb25cclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuU29ydEF0dGFjaExpc3RlbmVyICggc2V0dGluZ3MsIGF0dGFjaFRvLCBjb2xJZHgsIGNhbGxiYWNrIClcclxuXHR7XHJcblx0XHR2YXIgY29sID0gc2V0dGluZ3MuYW9Db2x1bW5zWyBjb2xJZHggXTtcclxuXHRcclxuXHRcdF9mbkJpbmRBY3Rpb24oIGF0dGFjaFRvLCB7fSwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0LyogSWYgdGhlIGNvbHVtbiBpcyBub3Qgc29ydGFibGUgLSBkb24ndCB0byBhbnl0aGluZyAqL1xyXG5cdFx0XHRpZiAoIGNvbC5iU29ydGFibGUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBJZiBwcm9jZXNzaW5nIGlzIGVuYWJsZWQgdXNlIGEgdGltZW91dCB0byBhbGxvdyB0aGUgcHJvY2Vzc2luZ1xyXG5cdFx0XHQvLyBkaXNwbGF5IHRvIGJlIHNob3duIC0gb3RoZXJ3aXNlIHRvIGl0IHN5bmNocm9ub3VzbHlcclxuXHRcdFx0aWYgKCBzZXR0aW5ncy5vRmVhdHVyZXMuYlByb2Nlc3NpbmcgKSB7XHJcblx0XHRcdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCB0cnVlICk7XHJcblx0XHJcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRfZm5Tb3J0TGlzdGVuZXIoIHNldHRpbmdzLCBjb2xJZHgsIGUuc2hpZnRLZXksIGNhbGxiYWNrICk7XHJcblx0XHJcblx0XHRcdFx0XHQvLyBJbiBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nLCB0aGUgZHJhdyBjYWxsYmFjayB3aWxsIHJlbW92ZSB0aGVcclxuXHRcdFx0XHRcdC8vIHByb2Nlc3NpbmcgZGlzcGxheVxyXG5cdFx0XHRcdFx0aWYgKCBfZm5EYXRhU291cmNlKCBzZXR0aW5ncyApICE9PSAnc3NwJyApIHtcclxuXHRcdFx0XHRcdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCBmYWxzZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sIDAgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRfZm5Tb3J0TGlzdGVuZXIoIHNldHRpbmdzLCBjb2xJZHgsIGUuc2hpZnRLZXksIGNhbGxiYWNrICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogU2V0IHRoZSBzb3J0aW5nIGNsYXNzZXMgb24gdGFibGUncyBib2R5LCBOb3RlOiBpdCBpcyBzYWZlIHRvIGNhbGwgdGhpcyBmdW5jdGlvblxyXG5cdCAqIHdoZW4gYlNvcnQgYW5kIGJTb3J0Q2xhc3NlcyBhcmUgZmFsc2VcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5Tb3J0aW5nQ2xhc3Nlcyggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdHZhciBvbGRTb3J0ID0gc2V0dGluZ3MuYUxhc3RTb3J0O1xyXG5cdFx0dmFyIHNvcnRDbGFzcyA9IHNldHRpbmdzLm9DbGFzc2VzLnNTb3J0Q29sdW1uO1xyXG5cdFx0dmFyIHNvcnQgPSBfZm5Tb3J0RmxhdHRlbiggc2V0dGluZ3MgKTtcclxuXHRcdHZhciBmZWF0dXJlcyA9IHNldHRpbmdzLm9GZWF0dXJlcztcclxuXHRcdHZhciBpLCBpZW4sIGNvbElkeDtcclxuXHRcclxuXHRcdGlmICggZmVhdHVyZXMuYlNvcnQgJiYgZmVhdHVyZXMuYlNvcnRDbGFzc2VzICkge1xyXG5cdFx0XHQvLyBSZW1vdmUgb2xkIHNvcnRpbmcgY2xhc3Nlc1xyXG5cdFx0XHRmb3IgKCBpPTAsIGllbj1vbGRTb3J0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGNvbElkeCA9IG9sZFNvcnRbaV0uc3JjO1xyXG5cdFxyXG5cdFx0XHRcdC8vIFJlbW92ZSBjb2x1bW4gc29ydGluZ1xyXG5cdFx0XHRcdCQoIF9wbHVjayggc2V0dGluZ3MuYW9EYXRhLCAnYW5DZWxscycsIGNvbElkeCApIClcclxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggc29ydENsYXNzICsgKGk8MiA/IGkrMSA6IDMpICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gQWRkIG5ldyBjb2x1bW4gc29ydGluZ1xyXG5cdFx0XHRmb3IgKCBpPTAsIGllbj1zb3J0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGNvbElkeCA9IHNvcnRbaV0uc3JjO1xyXG5cdFxyXG5cdFx0XHRcdCQoIF9wbHVjayggc2V0dGluZ3MuYW9EYXRhLCAnYW5DZWxscycsIGNvbElkeCApIClcclxuXHRcdFx0XHRcdC5hZGRDbGFzcyggc29ydENsYXNzICsgKGk8MiA/IGkrMSA6IDMpICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHNldHRpbmdzLmFMYXN0U29ydCA9IHNvcnQ7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8vIEdldCB0aGUgZGF0YSB0byBzb3J0IGEgY29sdW1uLCBiZSBpdCBmcm9tIGNhY2hlLCBmcmVzaCAocG9wdWxhdGluZyB0aGVcclxuXHQvLyBjYWNoZSksIG9yIGZyb20gYSBzb3J0IGZvcm1hdHRlclxyXG5cdGZ1bmN0aW9uIF9mblNvcnREYXRhKCBzZXR0aW5ncywgaWR4IClcclxuXHR7XHJcblx0XHQvLyBDdXN0b20gc29ydGluZyBmdW5jdGlvbiAtIHByb3ZpZGVkIGJ5IHRoZSBzb3J0IGRhdGEgdHlwZVxyXG5cdFx0dmFyIGNvbHVtbiA9IHNldHRpbmdzLmFvQ29sdW1uc1sgaWR4IF07XHJcblx0XHR2YXIgY3VzdG9tU29ydCA9IERhdGFUYWJsZS5leHQub3JkZXJbIGNvbHVtbi5zU29ydERhdGFUeXBlIF07XHJcblx0XHR2YXIgY3VzdG9tRGF0YTtcclxuXHRcclxuXHRcdGlmICggY3VzdG9tU29ydCApIHtcclxuXHRcdFx0Y3VzdG9tRGF0YSA9IGN1c3RvbVNvcnQuY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywgaWR4LFxyXG5cdFx0XHRcdF9mbkNvbHVtbkluZGV4VG9WaXNpYmxlKCBzZXR0aW5ncywgaWR4IClcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFVzZSAvIHBvcHVsYXRlIGNhY2hlXHJcblx0XHR2YXIgcm93LCBjZWxsRGF0YTtcclxuXHRcdHZhciBmb3JtYXR0ZXIgPSBEYXRhVGFibGUuZXh0LnR5cGUub3JkZXJbIGNvbHVtbi5zVHlwZStcIi1wcmVcIiBdO1xyXG5cdFxyXG5cdFx0Zm9yICggdmFyIGk9MCwgaWVuPXNldHRpbmdzLmFvRGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0cm93ID0gc2V0dGluZ3MuYW9EYXRhW2ldO1xyXG5cdFxyXG5cdFx0XHRpZiAoICEgcm93Ll9hU29ydERhdGEgKSB7XHJcblx0XHRcdFx0cm93Ll9hU29ydERhdGEgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRpZiAoICEgcm93Ll9hU29ydERhdGFbaWR4XSB8fCBjdXN0b21Tb3J0ICkge1xyXG5cdFx0XHRcdGNlbGxEYXRhID0gY3VzdG9tU29ydCA/XHJcblx0XHRcdFx0XHRjdXN0b21EYXRhW2ldIDogLy8gSWYgdGhlcmUgd2FzIGEgY3VzdG9tIHNvcnQgZnVuY3Rpb24sIHVzZSBkYXRhIGZyb20gdGhlcmVcclxuXHRcdFx0XHRcdF9mbkdldENlbGxEYXRhKCBzZXR0aW5ncywgaSwgaWR4LCAnc29ydCcgKTtcclxuXHRcclxuXHRcdFx0XHRyb3cuX2FTb3J0RGF0YVsgaWR4IF0gPSBmb3JtYXR0ZXIgP1xyXG5cdFx0XHRcdFx0Zm9ybWF0dGVyKCBjZWxsRGF0YSApIDpcclxuXHRcdFx0XHRcdGNlbGxEYXRhO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNhdmUgdGhlIHN0YXRlIG9mIGEgdGFibGVcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5TYXZlU3RhdGUgKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0aWYgKCAhc2V0dGluZ3Mub0ZlYXR1cmVzLmJTdGF0ZVNhdmUgfHwgc2V0dGluZ3MuYkRlc3Ryb3lpbmcgKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKiBTdG9yZSB0aGUgaW50ZXJlc3RpbmcgdmFyaWFibGVzICovXHJcblx0XHR2YXIgc3RhdGUgPSB7XHJcblx0XHRcdHRpbWU6ICAgICtuZXcgRGF0ZSgpLFxyXG5cdFx0XHRzdGFydDogICBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcclxuXHRcdFx0bGVuZ3RoOiAgc2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoLFxyXG5cdFx0XHRvcmRlcjogICAkLmV4dGVuZCggdHJ1ZSwgW10sIHNldHRpbmdzLmFhU29ydGluZyApLFxyXG5cdFx0XHRzZWFyY2g6ICBfZm5TZWFyY2hUb0NhbWVsKCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2ggKSxcclxuXHRcdFx0Y29sdW1uczogJC5tYXAoIHNldHRpbmdzLmFvQ29sdW1ucywgZnVuY3Rpb24gKCBjb2wsIGkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdHZpc2libGU6IGNvbC5iVmlzaWJsZSxcclxuXHRcdFx0XHRcdHNlYXJjaDogX2ZuU2VhcmNoVG9DYW1lbCggc2V0dGluZ3MuYW9QcmVTZWFyY2hDb2xzW2ldIClcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9IClcclxuXHRcdH07XHJcblx0XHJcblx0XHRfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCBcImFvU3RhdGVTYXZlUGFyYW1zXCIsICdzdGF0ZVNhdmVQYXJhbXMnLCBbc2V0dGluZ3MsIHN0YXRlXSApO1xyXG5cdFxyXG5cdFx0c2V0dGluZ3Mub1NhdmVkU3RhdGUgPSBzdGF0ZTtcclxuXHRcdHNldHRpbmdzLmZuU3RhdGVTYXZlQ2FsbGJhY2suY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywgc3RhdGUgKTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXR0ZW1wdCB0byBsb2FkIGEgc2F2ZWQgdGFibGUgc3RhdGVcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb0luaXQgRGF0YVRhYmxlcyBpbml0IG9iamVjdCBzbyB3ZSBjYW4gb3ZlcnJpZGUgc2V0dGluZ3NcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuTG9hZFN0YXRlICggc2V0dGluZ3MsIG9Jbml0IClcclxuXHR7XHJcblx0XHR2YXIgaSwgaWVuO1xyXG5cdFx0dmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnM7XHJcblx0XHJcblx0XHRpZiAoICEgc2V0dGluZ3Mub0ZlYXR1cmVzLmJTdGF0ZVNhdmUgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBzdGF0ZSA9IHNldHRpbmdzLmZuU3RhdGVMb2FkQ2FsbGJhY2suY2FsbCggc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncyApO1xyXG5cdFx0aWYgKCAhIHN0YXRlIHx8ICEgc3RhdGUudGltZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyogQWxsb3cgY3VzdG9tIGFuZCBwbHVnLWluIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgdG8gYWx0ZXIgdGhlIHNhdmVkIGRhdGEgc2V0IGFuZFxyXG5cdFx0ICogY2FuY2VsbGluZyBvZiBsb2FkaW5nIGJ5IHJldHVybmluZyBmYWxzZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgYWJTdGF0ZUxvYWQgPSBfZm5DYWxsYmFja0ZpcmUoIHNldHRpbmdzLCAnYW9TdGF0ZUxvYWRQYXJhbXMnLCAnc3RhdGVMb2FkUGFyYW1zJywgW3NldHRpbmdzLCBzdGF0ZV0gKTtcclxuXHRcdGlmICggJC5pbkFycmF5KCBmYWxzZSwgYWJTdGF0ZUxvYWQgKSAhPT0gLTEgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qIFJlamVjdCBvbGQgZGF0YSAqL1xyXG5cdFx0dmFyIGR1cmF0aW9uID0gc2V0dGluZ3MuaVN0YXRlRHVyYXRpb247XHJcblx0XHRpZiAoIGR1cmF0aW9uID4gMCAmJiBzdGF0ZS50aW1lIDwgK25ldyBEYXRlKCkgLSAoZHVyYXRpb24qMTAwMCkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIE51bWJlciBvZiBjb2x1bW5zIGhhdmUgY2hhbmdlZCAtIGFsbCBiZXRzIGFyZSBvZmYsIG5vIHJlc3RvcmUgb2Ygc2V0dGluZ3NcclxuXHRcdGlmICggY29sdW1ucy5sZW5ndGggIT09IHN0YXRlLmNvbHVtbnMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBTdG9yZSB0aGUgc2F2ZWQgc3RhdGUgc28gaXQgbWlnaHQgYmUgYWNjZXNzZWQgYXQgYW55IHRpbWVcclxuXHRcdHNldHRpbmdzLm9Mb2FkZWRTdGF0ZSA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgc3RhdGUgKTtcclxuXHRcclxuXHRcdC8vIFJlc3RvcmUga2V5IGZlYXR1cmVzIC0gdG9kbyAtIGZvciAxLjExIHRoaXMgbmVlZHMgdG8gYmUgZG9uZSBieVxyXG5cdFx0Ly8gc3Vic2NyaWJlZCBldmVudHNcclxuXHRcdGlmICggc3RhdGUuc3RhcnQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0c2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgICAgPSBzdGF0ZS5zdGFydDtcclxuXHRcdFx0c2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQgPSBzdGF0ZS5zdGFydDtcclxuXHRcdH1cclxuXHRcdGlmICggc3RhdGUubGVuZ3RoICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCAgID0gc3RhdGUubGVuZ3RoO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gT3JkZXJcclxuXHRcdGlmICggc3RhdGUub3JkZXIgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0c2V0dGluZ3MuYWFTb3J0aW5nID0gW107XHJcblx0XHRcdCQuZWFjaCggc3RhdGUub3JkZXIsIGZ1bmN0aW9uICggaSwgY29sICkge1xyXG5cdFx0XHRcdHNldHRpbmdzLmFhU29ydGluZy5wdXNoKCBjb2xbMF0gPj0gY29sdW1ucy5sZW5ndGggP1xyXG5cdFx0XHRcdFx0WyAwLCBjb2xbMV0gXSA6XHJcblx0XHRcdFx0XHRjb2xcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBTZWFyY2hcclxuXHRcdGlmICggc3RhdGUuc2VhcmNoICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdCQuZXh0ZW5kKCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsIF9mblNlYXJjaFRvSHVuZyggc3RhdGUuc2VhcmNoICkgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIENvbHVtbnNcclxuXHRcdGZvciAoIGk9MCwgaWVuPXN0YXRlLmNvbHVtbnMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdHZhciBjb2wgPSBzdGF0ZS5jb2x1bW5zW2ldO1xyXG5cdFxyXG5cdFx0XHQvLyBWaXNpYmlsaXR5XHJcblx0XHRcdGlmICggY29sLnZpc2libGUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRjb2x1bW5zW2ldLmJWaXNpYmxlID0gY29sLnZpc2libGU7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gU2VhcmNoXHJcblx0XHRcdGlmICggY29sLnNlYXJjaCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdCQuZXh0ZW5kKCBzZXR0aW5ncy5hb1ByZVNlYXJjaENvbHNbaV0sIF9mblNlYXJjaFRvSHVuZyggY29sLnNlYXJjaCApICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsICdhb1N0YXRlTG9hZGVkJywgJ3N0YXRlTG9hZGVkJywgW3NldHRpbmdzLCBzdGF0ZV0gKTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJuIHRoZSBzZXR0aW5ncyBvYmplY3QgZm9yIGEgcGFydGljdWxhciB0YWJsZVxyXG5cdCAqICBAcGFyYW0ge25vZGV9IHRhYmxlIHRhYmxlIHdlIGFyZSB1c2luZyBhcyBhIGRhdGFUYWJsZVxyXG5cdCAqICBAcmV0dXJucyB7b2JqZWN0fSBTZXR0aW5ncyBvYmplY3QgLSBvciBudWxsIGlmIG5vdCBmb3VuZFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5TZXR0aW5nc0Zyb21Ob2RlICggdGFibGUgKVxyXG5cdHtcclxuXHRcdHZhciBzZXR0aW5ncyA9IERhdGFUYWJsZS5zZXR0aW5ncztcclxuXHRcdHZhciBpZHggPSAkLmluQXJyYXkoIHRhYmxlLCBfcGx1Y2soIHNldHRpbmdzLCAnblRhYmxlJyApICk7XHJcblx0XHJcblx0XHRyZXR1cm4gaWR4ICE9PSAtMSA/XHJcblx0XHRcdHNldHRpbmdzWyBpZHggXSA6XHJcblx0XHRcdG51bGw7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIExvZyBhbiBlcnJvciBtZXNzYWdlXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge2ludH0gbGV2ZWwgbG9nIGVycm9yIG1lc3NhZ2VzLCBvciBkaXNwbGF5IHRoZW0gdG8gdGhlIHVzZXJcclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IG1zZyBlcnJvciBtZXNzYWdlXHJcblx0ICogIEBwYXJhbSB7aW50fSB0biBUZWNobmljYWwgbm90ZSBpZCB0byBnZXQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXJyb3IuXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbkxvZyggc2V0dGluZ3MsIGxldmVsLCBtc2csIHRuIClcclxuXHR7XHJcblx0XHRtc2cgPSAnRGF0YVRhYmxlcyB3YXJuaW5nOiAnK1xyXG5cdFx0XHQoc2V0dGluZ3MgPyAndGFibGUgaWQ9JytzZXR0aW5ncy5zVGFibGVJZCsnIC0gJyA6ICcnKSttc2c7XHJcblx0XHJcblx0XHRpZiAoIHRuICkge1xyXG5cdFx0XHRtc2cgKz0gJy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBlcnJvciwgcGxlYXNlIHNlZSAnK1xyXG5cdFx0XHQnaHR0cDovL2RhdGF0YWJsZXMubmV0L3RuLycrdG47XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoICEgbGV2ZWwgICkge1xyXG5cdFx0XHQvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBwcmUgMS4xMFxyXG5cdFx0XHR2YXIgZXh0ID0gRGF0YVRhYmxlLmV4dDtcclxuXHRcdFx0dmFyIHR5cGUgPSBleHQuc0Vyck1vZGUgfHwgZXh0LmVyck1vZGU7XHJcblx0XHJcblx0XHRcdGlmICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgbnVsbCwgJ2Vycm9yJywgWyBzZXR0aW5ncywgdG4sIG1zZyBdICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0aWYgKCB0eXBlID09ICdhbGVydCcgKSB7XHJcblx0XHRcdFx0YWxlcnQoIG1zZyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKCB0eXBlID09ICd0aHJvdycgKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKG1zZyk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoIHR5cGVvZiB0eXBlID09ICdmdW5jdGlvbicgKSB7XHJcblx0XHRcdFx0dHlwZSggc2V0dGluZ3MsIHRuLCBtc2cgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUubG9nICkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyggbXNnICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNlZSBpZiBhIHByb3BlcnR5IGlzIGRlZmluZWQgb24gb25lIG9iamVjdCwgaWYgc28gYXNzaWduIGl0IHRvIHRoZSBvdGhlciBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHJldCB0YXJnZXQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzcmMgc291cmNlIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gbmFtZSBwcm9wZXJ0eVxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gW21hcHBlZE5hbWVdIG5hbWUgdG8gbWFwIHRvbyAtIG9wdGlvbmFsLCBuYW1lIHVzZWQgaWYgbm90IGdpdmVuXHJcblx0ICogIEBtZW1iZXJvZiBEYXRhVGFibGUjb0FwaVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9mbk1hcCggcmV0LCBzcmMsIG5hbWUsIG1hcHBlZE5hbWUgKVxyXG5cdHtcclxuXHRcdGlmICggJC5pc0FycmF5KCBuYW1lICkgKSB7XHJcblx0XHRcdCQuZWFjaCggbmFtZSwgZnVuY3Rpb24gKGksIHZhbCkge1xyXG5cdFx0XHRcdGlmICggJC5pc0FycmF5KCB2YWwgKSApIHtcclxuXHRcdFx0XHRcdF9mbk1hcCggcmV0LCBzcmMsIHZhbFswXSwgdmFsWzFdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0X2ZuTWFwKCByZXQsIHNyYywgdmFsICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggbWFwcGVkTmFtZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRtYXBwZWROYW1lID0gbmFtZTtcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggc3JjW25hbWVdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHJldFttYXBwZWROYW1lXSA9IHNyY1tuYW1lXTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRXh0ZW5kIG9iamVjdHMgLSB2ZXJ5IHNpbWlsYXIgdG8galF1ZXJ5LmV4dGVuZCwgYnV0IGRlZXAgY29weSBvYmplY3RzLCBhbmRcclxuXHQgKiBzaGFsbG93IGNvcHkgYXJyYXlzLiBUaGUgcmVhc29uIHdlIG5lZWQgdG8gZG8gdGhpcywgaXMgdGhhdCB3ZSBkb24ndCB3YW50IHRvXHJcblx0ICogZGVlcCBjb3B5IGFycmF5IGluaXQgdmFsdWVzIChzdWNoIGFzIGFhU29ydGluZykgc2luY2UgdGhlIGRldiB3b3VsZG4ndCBiZVxyXG5cdCAqIGFibGUgdG8gb3ZlcnJpZGUgdGhlbSwgYnV0IHdlIGRvIHdhbnQgdG8gZGVlcCBjb3B5IGFycmF5cy5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG91dCBPYmplY3QgdG8gZXh0ZW5kXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBleHRlbmRlciBPYmplY3QgZnJvbSB3aGljaCB0aGUgcHJvcGVydGllcyB3aWxsIGJlIGFwcGxpZWQgdG9cclxuXHQgKiAgICAgIG91dFxyXG5cdCAqICBAcGFyYW0ge2Jvb2xlYW59IGJyZWFrUmVmcyBJZiB0cnVlLCB0aGVuIGFycmF5cyB3aWxsIGJlIHNsaWNlZCB0byB0YWtlIGFuXHJcblx0ICogICAgICBpbmRlcGVuZGVudCBjb3B5IHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgYGRhdGFgIG9yIGBhYURhdGFgIHBhcmFtZXRlcnNcclxuXHQgKiAgICAgIGlmIHRoZXkgYXJlIHByZXNlbnQuIFRoaXMgaXMgc28geW91IGNhbiBwYXNzIGluIGEgY29sbGVjdGlvbiB0b1xyXG5cdCAqICAgICAgRGF0YVRhYmxlcyBhbmQgaGF2ZSB0aGF0IHVzZWQgYXMgeW91ciBkYXRhIHNvdXJjZSB3aXRob3V0IGJyZWFraW5nIHRoZVxyXG5cdCAqICAgICAgcmVmZXJlbmNlc1xyXG5cdCAqICBAcmV0dXJucyB7b2JqZWN0fSBvdXQgUmVmZXJlbmNlLCBqdXN0IGZvciBjb252ZW5pZW5jZSAtIG91dCA9PT0gdGhlIHJldHVybi5cclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICogIEB0b2RvIFRoaXMgZG9lc24ndCB0YWtlIGFjY291bnQgb2YgYXJyYXlzIGluc2lkZSB0aGUgZGVlcCBjb3BpZWQgb2JqZWN0cy5cclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5FeHRlbmQoIG91dCwgZXh0ZW5kZXIsIGJyZWFrUmVmcyApXHJcblx0e1xyXG5cdFx0dmFyIHZhbDtcclxuXHRcclxuXHRcdGZvciAoIHZhciBwcm9wIGluIGV4dGVuZGVyICkge1xyXG5cdFx0XHRpZiAoIGV4dGVuZGVyLmhhc093blByb3BlcnR5KHByb3ApICkge1xyXG5cdFx0XHRcdHZhbCA9IGV4dGVuZGVyW3Byb3BdO1xyXG5cdFxyXG5cdFx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCB2YWwgKSApIHtcclxuXHRcdFx0XHRcdGlmICggISAkLmlzUGxhaW5PYmplY3QoIG91dFtwcm9wXSApICkge1xyXG5cdFx0XHRcdFx0XHRvdXRbcHJvcF0gPSB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdCQuZXh0ZW5kKCB0cnVlLCBvdXRbcHJvcF0sIHZhbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmICggYnJlYWtSZWZzICYmIHByb3AgIT09ICdkYXRhJyAmJiBwcm9wICE9PSAnYWFEYXRhJyAmJiAkLmlzQXJyYXkodmFsKSApIHtcclxuXHRcdFx0XHRcdG91dFtwcm9wXSA9IHZhbC5zbGljZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdG91dFtwcm9wXSA9IHZhbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiBvdXQ7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEJpbmQgYW4gZXZlbnQgaGFuZGVycyB0byBhbGxvdyBhIGNsaWNrIG9yIHJldHVybiBrZXkgdG8gYWN0aXZhdGUgdGhlIGNhbGxiYWNrLlxyXG5cdCAqIFRoaXMgaXMgZ29vZCBmb3IgYWNjZXNzaWJpbGl0eSBzaW5jZSBhIHJldHVybiBvbiB0aGUga2V5Ym9hcmQgd2lsbCBoYXZlIHRoZVxyXG5cdCAqIHNhbWUgZWZmZWN0IGFzIGEgY2xpY2ssIGlmIHRoZSBlbGVtZW50IGhhcyBmb2N1cy5cclxuXHQgKiAgQHBhcmFtIHtlbGVtZW50fSBuIEVsZW1lbnQgdG8gYmluZCB0aGUgYWN0aW9uIHRvXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvRGF0YSBEYXRhIG9iamVjdCB0byBwYXNzIHRvIHRoZSB0cmlnZ2VyZWQgZnVuY3Rpb25cclxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZFxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5CaW5kQWN0aW9uKCBuLCBvRGF0YSwgZm4gKVxyXG5cdHtcclxuXHRcdCQobilcclxuXHRcdFx0LmJpbmQoICdjbGljay5EVCcsIG9EYXRhLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0bi5ibHVyKCk7IC8vIFJlbW92ZSBmb2N1cyBvdXRsaW5lIGZvciBtb3VzZSB1c2Vyc1xyXG5cdFx0XHRcdFx0Zm4oZSk7XHJcblx0XHRcdFx0fSApXHJcblx0XHRcdC5iaW5kKCAna2V5cHJlc3MuRFQnLCBvRGF0YSwgZnVuY3Rpb24gKGUpe1xyXG5cdFx0XHRcdFx0aWYgKCBlLndoaWNoID09PSAxMyApIHtcclxuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRmbihlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IClcclxuXHRcdFx0LmJpbmQoICdzZWxlY3RzdGFydC5EVCcsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdC8qIFRha2UgdGhlIGJydXRhbCBhcHByb2FjaCB0byBjYW5jZWxsaW5nIHRleHQgc2VsZWN0aW9uICovXHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fSApO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uLiBFYXNpbHkgYWxsb3dzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgYWRkZWQgdG9cclxuXHQgKiBhbiBhcnJheSBzdG9yZSBvZiBjYWxsYmFjayBmdW5jdGlvbnMgdGhhdCBjYW4gdGhlbiBhbGwgYmUgY2FsbGVkIHRvZ2V0aGVyLlxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIGRhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBzU3RvcmUgTmFtZSBvZiB0aGUgYXJyYXkgc3RvcmFnZSBmb3IgdGhlIGNhbGxiYWNrcyBpbiBvU2V0dGluZ3NcclxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gYmUgY2FsbGVkIGJhY2tcclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNOYW1lIElkZW50aWZ5aW5nIG5hbWUgZm9yIHRoZSBjYWxsYmFjayAoaS5lLiBhIGxhYmVsKVxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5DYWxsYmFja1JlZyggb1NldHRpbmdzLCBzU3RvcmUsIGZuLCBzTmFtZSApXHJcblx0e1xyXG5cdFx0aWYgKCBmbiApXHJcblx0XHR7XHJcblx0XHRcdG9TZXR0aW5nc1tzU3RvcmVdLnB1c2goIHtcclxuXHRcdFx0XHRcImZuXCI6IGZuLFxyXG5cdFx0XHRcdFwic05hbWVcIjogc05hbWVcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlIGNhbGxiYWNrIGZ1bmN0aW9ucyBhbmQgdHJpZ2dlciBldmVudHMuIE5vdGUgdGhhdCB0aGUgbG9vcCBvdmVyIHRoZVxyXG5cdCAqIGNhbGxiYWNrIGFycmF5IHN0b3JlIGlzIGRvbmUgYmFja3dhcmRzISBGdXJ0aGVyIG5vdGUgdGhhdCB5b3UgZG8gbm90IHdhbnQgdG9cclxuXHQgKiBmaXJlIG9mZiB0cmlnZ2VycyBpbiB0aW1lIHNlbnNpdGl2ZSBhcHBsaWNhdGlvbnMgKGZvciBleGFtcGxlIGNlbGwgY3JlYXRpb24pXHJcblx0ICogYXMgaXRzIHNsb3cuXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2tBcnIgTmFtZSBvZiB0aGUgYXJyYXkgc3RvcmFnZSBmb3IgdGhlIGNhbGxiYWNrcyBpblxyXG5cdCAqICAgICAgb1NldHRpbmdzXHJcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiB0aGUgalF1ZXJ5IGN1c3RvbSBldmVudCB0byB0cmlnZ2VyLiBJZlxyXG5cdCAqICAgICAgbnVsbCBubyB0cmlnZ2VyIGlzIGZpcmVkXHJcblx0ICogIEBwYXJhbSB7YXJyYXl9IGFyZ3MgQXJyYXkgb2YgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIC9cclxuXHQgKiAgICAgIHRyaWdnZXJcclxuXHQgKiAgQG1lbWJlcm9mIERhdGFUYWJsZSNvQXBpXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgY2FsbGJhY2tBcnIsIGV2ZW50TmFtZSwgYXJncyApXHJcblx0e1xyXG5cdFx0dmFyIHJldCA9IFtdO1xyXG5cdFxyXG5cdFx0aWYgKCBjYWxsYmFja0FyciApIHtcclxuXHRcdFx0cmV0ID0gJC5tYXAoIHNldHRpbmdzW2NhbGxiYWNrQXJyXS5zbGljZSgpLnJldmVyc2UoKSwgZnVuY3Rpb24gKHZhbCwgaSkge1xyXG5cdFx0XHRcdHJldHVybiB2YWwuZm4uYXBwbHkoIHNldHRpbmdzLm9JbnN0YW5jZSwgYXJncyApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGV2ZW50TmFtZSAhPT0gbnVsbCApIHtcclxuXHRcdFx0dmFyIGUgPSAkLkV2ZW50KCBldmVudE5hbWUrJy5kdCcgKTtcclxuXHRcclxuXHRcdFx0JChzZXR0aW5ncy5uVGFibGUpLnRyaWdnZXIoIGUsIGFyZ3MgKTtcclxuXHRcclxuXHRcdFx0cmV0LnB1c2goIGUucmVzdWx0ICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRmdW5jdGlvbiBfZm5MZW5ndGhPdmVyZmxvdyAoIHNldHRpbmdzIClcclxuXHR7XHJcblx0XHR2YXJcclxuXHRcdFx0c3RhcnQgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcclxuXHRcdFx0ZW5kID0gc2V0dGluZ3MuZm5EaXNwbGF5RW5kKCksXHJcblx0XHRcdGxlbiA9IHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aDtcclxuXHRcclxuXHRcdC8qIElmIHdlIGhhdmUgc3BhY2UgdG8gc2hvdyBleHRyYSByb3dzIChiYWNraW5nIHVwIGZyb20gdGhlIGVuZCBwb2ludCAtIHRoZW4gZG8gc28gKi9cclxuXHRcdGlmICggc3RhcnQgPj0gZW5kIClcclxuXHRcdHtcclxuXHRcdFx0c3RhcnQgPSBlbmQgLSBsZW47XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBLZWVwIHRoZSBzdGFydCByZWNvcmQgb24gdGhlIGN1cnJlbnQgcGFnZVxyXG5cdFx0c3RhcnQgLT0gKHN0YXJ0ICUgbGVuKTtcclxuXHRcclxuXHRcdGlmICggbGVuID09PSAtMSB8fCBzdGFydCA8IDAgKVxyXG5cdFx0e1xyXG5cdFx0XHRzdGFydCA9IDA7XHJcblx0XHR9XHJcblx0XHJcblx0XHRzZXR0aW5ncy5faURpc3BsYXlTdGFydCA9IHN0YXJ0O1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRmdW5jdGlvbiBfZm5SZW5kZXJlciggc2V0dGluZ3MsIHR5cGUgKVxyXG5cdHtcclxuXHRcdHZhciByZW5kZXJlciA9IHNldHRpbmdzLnJlbmRlcmVyO1xyXG5cdFx0dmFyIGhvc3QgPSBEYXRhVGFibGUuZXh0LnJlbmRlcmVyW3R5cGVdO1xyXG5cdFxyXG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIHJlbmRlcmVyICkgJiYgcmVuZGVyZXJbdHlwZV0gKSB7XHJcblx0XHRcdC8vIFNwZWNpZmljIHJlbmRlcmVyIGZvciB0aGlzIHR5cGUuIElmIGF2YWlsYWJsZSB1c2UgaXQsIG90aGVyd2lzZSB1c2VcclxuXHRcdFx0Ly8gdGhlIGRlZmF1bHQuXHJcblx0XHRcdHJldHVybiBob3N0W3JlbmRlcmVyW3R5cGVdXSB8fCBob3N0Ll87XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggdHlwZW9mIHJlbmRlcmVyID09PSAnc3RyaW5nJyApIHtcclxuXHRcdFx0Ly8gQ29tbW9uIHJlbmRlcmVyIC0gaWYgdGhlcmUgaXMgb25lIGF2YWlsYWJsZSBmb3IgdGhpcyB0eXBlIHVzZSBpdCxcclxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHVzZSB0aGUgZGVmYXVsdFxyXG5cdFx0XHRyZXR1cm4gaG9zdFtyZW5kZXJlcl0gfHwgaG9zdC5fO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gVXNlIHRoZSBkZWZhdWx0XHJcblx0XHRyZXR1cm4gaG9zdC5fO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBEZXRlY3QgdGhlIGRhdGEgc291cmNlIGJlaW5nIHVzZWQgZm9yIHRoZSB0YWJsZS4gVXNlZCB0byBzaW1wbGlmeSB0aGUgY29kZVxyXG5cdCAqIGEgbGl0dGxlIChhamF4KSBhbmQgdG8gbWFrZSBpdCBjb21wcmVzcyBhIGxpdHRsZSBzbWFsbGVyLlxyXG5cdCAqXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBkYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcmV0dXJucyB7c3RyaW5nfSBEYXRhIHNvdXJjZVxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI29BcGlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBfZm5EYXRhU291cmNlICggc2V0dGluZ3MgKVxyXG5cdHtcclxuXHRcdGlmICggc2V0dGluZ3Mub0ZlYXR1cmVzLmJTZXJ2ZXJTaWRlICkge1xyXG5cdFx0XHRyZXR1cm4gJ3NzcCc7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggc2V0dGluZ3MuYWpheCB8fCBzZXR0aW5ncy5zQWpheFNvdXJjZSApIHtcclxuXHRcdFx0cmV0dXJuICdhamF4JztcclxuXHRcdH1cclxuXHRcdHJldHVybiAnZG9tJztcclxuXHR9XHJcblx0XHJcblxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENvbXB1dGVkIHN0cnVjdHVyZSBvZiB0aGUgRGF0YVRhYmxlcyBBUEksIGRlZmluZWQgYnkgdGhlIG9wdGlvbnMgcGFzc2VkIHRvXHJcblx0ICogYERhdGFUYWJsZS5BcGkucmVnaXN0ZXIoKWAgd2hlbiBidWlsZGluZyB0aGUgQVBJLlxyXG5cdCAqXHJcblx0ICogVGhlIHN0cnVjdHVyZSBpcyBidWlsdCBpbiBvcmRlciB0byBzcGVlZCBjcmVhdGlvbiBhbmQgZXh0ZW5zaW9uIG9mIHRoZSBBcGlcclxuXHQgKiBvYmplY3RzIHNpbmNlIHRoZSBleHRlbnNpb25zIGFyZSBlZmZlY3RpdmVseSBwcmUtcGFyc2VkLlxyXG5cdCAqXHJcblx0ICogVGhlIGFycmF5IGlzIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZSwgd2hlcmUgdGhpc1xyXG5cdCAqIGJhc2UgYXJyYXkgcmVwcmVzZW50cyB0aGUgQXBpIHByb3RvdHlwZSBiYXNlOlxyXG5cdCAqXHJcblx0ICogICAgIFtcclxuXHQgKiAgICAgICB7XHJcblx0ICogICAgICAgICBuYW1lOiAgICAgICdkYXRhJyAgICAgICAgICAgICAgICAtLSBzdHJpbmcgICAtIFByb3BlcnR5IG5hbWVcclxuXHQgKiAgICAgICAgIHZhbDogICAgICAgZnVuY3Rpb24gKCkge30sICAgICAgIC0tIGZ1bmN0aW9uIC0gQXBpIG1ldGhvZCAob3IgdW5kZWZpbmVkIGlmIGp1c3QgYW4gb2JqZWN0XHJcblx0ICogICAgICAgICBtZXRob2RFeHQ6IFsgLi4uIF0sICAgICAgICAgICAgICAtLSBhcnJheSAgICAtIEFycmF5IG9mIEFwaSBvYmplY3QgZGVmaW5pdGlvbnMgdG8gZXh0ZW5kIHRoZSBtZXRob2QgcmVzdWx0XHJcblx0ICogICAgICAgICBwcm9wRXh0OiAgIFsgLi4uIF0gICAgICAgICAgICAgICAtLSBhcnJheSAgICAtIEFycmF5IG9mIEFwaSBvYmplY3QgZGVmaW5pdGlvbnMgdG8gZXh0ZW5kIHRoZSBwcm9wZXJ0eVxyXG5cdCAqICAgICAgIH0sXHJcblx0ICogICAgICAge1xyXG5cdCAqICAgICAgICAgbmFtZTogICAgICdyb3cnXHJcblx0ICogICAgICAgICB2YWw6ICAgICAgIHt9LFxyXG5cdCAqICAgICAgICAgbWV0aG9kRXh0OiBbIC4uLiBdLFxyXG5cdCAqICAgICAgICAgcHJvcEV4dDogICBbXHJcblx0ICogICAgICAgICAgIHtcclxuXHQgKiAgICAgICAgICAgICBuYW1lOiAgICAgICdkYXRhJ1xyXG5cdCAqICAgICAgICAgICAgIHZhbDogICAgICAgZnVuY3Rpb24gKCkge30sXHJcblx0ICogICAgICAgICAgICAgbWV0aG9kRXh0OiBbIC4uLiBdLFxyXG5cdCAqICAgICAgICAgICAgIHByb3BFeHQ6ICAgWyAuLi4gXVxyXG5cdCAqICAgICAgICAgICB9LFxyXG5cdCAqICAgICAgICAgICAuLi5cclxuXHQgKiAgICAgICAgIF1cclxuXHQgKiAgICAgICB9XHJcblx0ICogICAgIF1cclxuXHQgKlxyXG5cdCAqIEB0eXBlIHtBcnJheX1cclxuXHQgKiBAaWdub3JlXHJcblx0ICovXHJcblx0dmFyIF9fYXBpU3RydWN0ID0gW107XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogYEFycmF5LnByb3RvdHlwZWAgcmVmZXJlbmNlLlxyXG5cdCAqXHJcblx0ICogQHR5cGUgb2JqZWN0XHJcblx0ICogQGlnbm9yZVxyXG5cdCAqL1xyXG5cdHZhciBfX2FycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWJzdHJhY3Rpb24gZm9yIGBjb250ZXh0YCBwYXJhbWV0ZXIgb2YgdGhlIGBBcGlgIGNvbnN0cnVjdG9yIHRvIGFsbG93IGl0IHRvXHJcblx0ICogdGFrZSBzZXZlcmFsIGRpZmZlcmVudCBmb3JtcyBmb3IgZWFzZSBvZiB1c2UuXHJcblx0ICpcclxuXHQgKiBFYWNoIG9mIHRoZSBpbnB1dCBwYXJhbWV0ZXIgdHlwZXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBEYXRhVGFibGVzIHNldHRpbmdzXHJcblx0ICogb2JqZWN0IHdoZXJlIHBvc3NpYmxlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtICB7c3RyaW5nfG5vZGV8alF1ZXJ5fG9iamVjdH0gbWl4ZWQgRGF0YVRhYmxlIGlkZW50aWZpZXIuIENhbiBiZSBvbmVcclxuXHQgKiAgIG9mOlxyXG5cdCAqXHJcblx0ICogICAqIGBzdHJpbmdgIC0galF1ZXJ5IHNlbGVjdG9yLiBBbnkgRGF0YVRhYmxlcycgbWF0Y2hpbmcgdGhlIGdpdmVuIHNlbGVjdG9yXHJcblx0ICogICAgIHdpdGggYmUgZm91bmQgYW5kIHVzZWQuXHJcblx0ICogICAqIGBub2RlYCAtIGBUQUJMRWAgbm9kZSB3aGljaCBoYXMgYWxyZWFkeSBiZWVuIGZvcm1lZCBpbnRvIGEgRGF0YVRhYmxlLlxyXG5cdCAqICAgKiBgalF1ZXJ5YCAtIEEgalF1ZXJ5IG9iamVjdCBvZiBgVEFCTEVgIG5vZGVzLlxyXG5cdCAqICAgKiBgb2JqZWN0YCAtIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogICAqIGBEYXRhVGFibGVzLkFwaWAgLSBBUEkgaW5zdGFuY2VcclxuXHQgKiBAcmV0dXJuIHthcnJheXxudWxsfSBNYXRjaGluZyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdHMuIGBudWxsYCBvclxyXG5cdCAqICAgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQgaWYgbm8gbWF0Y2hpbmcgRGF0YVRhYmxlIGlzIGZvdW5kLlxyXG5cdCAqIEBpZ25vcmVcclxuXHQgKi9cclxuXHR2YXIgX3RvU2V0dGluZ3MgPSBmdW5jdGlvbiAoIG1peGVkIClcclxuXHR7XHJcblx0XHR2YXIgaWR4LCBqcTtcclxuXHRcdHZhciBzZXR0aW5ncyA9IERhdGFUYWJsZS5zZXR0aW5ncztcclxuXHRcdHZhciB0YWJsZXMgPSAkLm1hcCggc2V0dGluZ3MsIGZ1bmN0aW9uIChlbCwgaSkge1xyXG5cdFx0XHRyZXR1cm4gZWwublRhYmxlO1xyXG5cdFx0fSApO1xyXG5cdFxyXG5cdFx0aWYgKCAhIG1peGVkICkge1xyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggbWl4ZWQublRhYmxlICYmIG1peGVkLm9BcGkgKSB7XHJcblx0XHRcdC8vIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHRcdHJldHVybiBbIG1peGVkIF07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggbWl4ZWQubm9kZU5hbWUgJiYgbWl4ZWQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RhYmxlJyApIHtcclxuXHRcdFx0Ly8gVGFibGUgbm9kZVxyXG5cdFx0XHRpZHggPSAkLmluQXJyYXkoIG1peGVkLCB0YWJsZXMgKTtcclxuXHRcdFx0cmV0dXJuIGlkeCAhPT0gLTEgPyBbIHNldHRpbmdzW2lkeF0gXSA6IG51bGw7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggbWl4ZWQgJiYgdHlwZW9mIG1peGVkLnNldHRpbmdzID09PSAnZnVuY3Rpb24nICkge1xyXG5cdFx0XHRyZXR1cm4gbWl4ZWQuc2V0dGluZ3MoKS50b0FycmF5KCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggdHlwZW9mIG1peGVkID09PSAnc3RyaW5nJyApIHtcclxuXHRcdFx0Ly8galF1ZXJ5IHNlbGVjdG9yXHJcblx0XHRcdGpxID0gJChtaXhlZCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggbWl4ZWQgaW5zdGFuY2VvZiAkICkge1xyXG5cdFx0XHQvLyBqUXVlcnkgb2JqZWN0IChhbHNvIERhdGFUYWJsZXMgaW5zdGFuY2UpXHJcblx0XHRcdGpxID0gbWl4ZWQ7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGpxICkge1xyXG5cdFx0XHRyZXR1cm4ganEubWFwKCBmdW5jdGlvbihpKSB7XHJcblx0XHRcdFx0aWR4ID0gJC5pbkFycmF5KCB0aGlzLCB0YWJsZXMgKTtcclxuXHRcdFx0XHRyZXR1cm4gaWR4ICE9PSAtMSA/IHNldHRpbmdzW2lkeF0gOiBudWxsO1xyXG5cdFx0XHR9ICkudG9BcnJheSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogRGF0YVRhYmxlcyBBUEkgY2xhc3MgLSB1c2VkIHRvIGNvbnRyb2wgYW5kIGludGVyZmFjZSB3aXRoICBvbmUgb3IgbW9yZVxyXG5cdCAqIERhdGFUYWJsZXMgZW5oYW5jZWQgdGFibGVzLlxyXG5cdCAqXHJcblx0ICogVGhlIEFQSSBjbGFzcyBpcyBoZWF2aWx5IGJhc2VkIG9uIGpRdWVyeSwgcHJlc2VudGluZyBhIGNoYWluYWJsZSBpbnRlcmZhY2VcclxuXHQgKiB0aGF0IHlvdSBjYW4gdXNlIHRvIGludGVyYWN0IHdpdGggdGFibGVzLiBFYWNoIGluc3RhbmNlIG9mIHRoZSBBUEkgY2xhc3MgaGFzXHJcblx0ICogYSBcImNvbnRleHRcIiAtIGkuZS4gdGhlIHRhYmxlcyB0aGF0IGl0IHdpbGwgb3BlcmF0ZSBvbi4gVGhpcyBjb3VsZCBiZSBhIHNpbmdsZVxyXG5cdCAqIHRhYmxlLCBhbGwgdGFibGVzIG9uIGEgcGFnZSBvciBhIHN1Yi1zZXQgdGhlcmVvZi5cclxuXHQgKlxyXG5cdCAqIEFkZGl0aW9uYWxseSB0aGUgQVBJIGlzIGRlc2lnbmVkIHRvIGFsbG93IHlvdSB0byBlYXNpbHkgd29yayB3aXRoIHRoZSBkYXRhIGluXHJcblx0ICogdGhlIHRhYmxlcywgcmV0cmlldmluZyBhbmQgbWFuaXB1bGF0aW5nIGl0IGFzIHJlcXVpcmVkLiBUaGlzIGlzIGRvbmUgYnlcclxuXHQgKiBwcmVzZW50aW5nIHRoZSBBUEkgY2xhc3MgYXMgYW4gYXJyYXkgbGlrZSBpbnRlcmZhY2UuIFRoZSBjb250ZW50cyBvZiB0aGVcclxuXHQgKiBhcnJheSBkZXBlbmQgdXBvbiB0aGUgYWN0aW9ucyByZXF1ZXN0ZWQgYnkgZWFjaCBtZXRob2QgKGZvciBleGFtcGxlXHJcblx0ICogYHJvd3MoKS5ub2RlcygpYCB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBub2Rlcywgd2hpbGUgYHJvd3MoKS5kYXRhKClgIHdpbGxcclxuXHQgKiByZXR1cm4gYW4gYXJyYXkgb2Ygb2JqZWN0cyBvciBhcnJheXMgZGVwZW5kaW5nIHVwb24geW91ciB0YWJsZSdzXHJcblx0ICogY29uZmlndXJhdGlvbikuIFRoZSBBUEkgb2JqZWN0IGhhcyBhIG51bWJlciBvZiBhcnJheSBsaWtlIG1ldGhvZHMgKGBwdXNoYCxcclxuXHQgKiBgcG9wYCwgYHJldmVyc2VgIGV0YykgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIChgZWFjaGAsIGBwbHVja2AsXHJcblx0ICogYHVuaXF1ZWAgZXRjKSB0byBhc3Npc3QgeW91ciB3b3JraW5nIHdpdGggdGhlIGRhdGEgaGVsZCBpbiBhIHRhYmxlLlxyXG5cdCAqXHJcblx0ICogTW9zdCBtZXRob2RzICh0aG9zZSB3aGljaCByZXR1cm4gYW4gQXBpIGluc3RhbmNlKSBhcmUgY2hhaW5hYmxlLCB3aGljaCBtZWFuc1xyXG5cdCAqIHRoZSByZXR1cm4gZnJvbSBhIG1ldGhvZCBjYWxsIGFsc28gaGFzIGFsbCBvZiB0aGUgbWV0aG9kcyBhdmFpbGFibGUgdGhhdCB0aGVcclxuXHQgKiB0b3AgbGV2ZWwgb2JqZWN0IGhhZC4gRm9yIGV4YW1wbGUsIHRoZXNlIHR3byBjYWxscyBhcmUgZXF1aXZhbGVudDpcclxuXHQgKlxyXG5cdCAqICAgICAvLyBOb3QgY2hhaW5lZFxyXG5cdCAqICAgICBhcGkucm93LmFkZCggey4uLn0gKTtcclxuXHQgKiAgICAgYXBpLmRyYXcoKTtcclxuXHQgKlxyXG5cdCAqICAgICAvLyBDaGFpbmVkXHJcblx0ICogICAgIGFwaS5yb3cuYWRkKCB7Li4ufSApLmRyYXcoKTtcclxuXHQgKlxyXG5cdCAqIEBjbGFzcyBEYXRhVGFibGUuQXBpXHJcblx0ICogQHBhcmFtIHthcnJheXxvYmplY3R8c3RyaW5nfGpRdWVyeX0gY29udGV4dCBEYXRhVGFibGUgaWRlbnRpZmllci4gVGhpcyBpc1xyXG5cdCAqICAgdXNlZCB0byBkZWZpbmUgd2hpY2ggRGF0YVRhYmxlcyBlbmhhbmNlZCB0YWJsZXMgdGhpcyBBUEkgd2lsbCBvcGVyYXRlIG9uLlxyXG5cdCAqICAgQ2FuIGJlIG9uZSBvZjpcclxuXHQgKlxyXG5cdCAqICAgKiBgc3RyaW5nYCAtIGpRdWVyeSBzZWxlY3Rvci4gQW55IERhdGFUYWJsZXMnIG1hdGNoaW5nIHRoZSBnaXZlbiBzZWxlY3RvclxyXG5cdCAqICAgICB3aXRoIGJlIGZvdW5kIGFuZCB1c2VkLlxyXG5cdCAqICAgKiBgbm9kZWAgLSBgVEFCTEVgIG5vZGUgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBmb3JtZWQgaW50byBhIERhdGFUYWJsZS5cclxuXHQgKiAgICogYGpRdWVyeWAgLSBBIGpRdWVyeSBvYmplY3Qgb2YgYFRBQkxFYCBub2Rlcy5cclxuXHQgKiAgICogYG9iamVjdGAgLSBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqIEBwYXJhbSB7YXJyYXl9IFtkYXRhXSBEYXRhIHRvIGluaXRpYWxpc2UgdGhlIEFwaSBpbnN0YW5jZSB3aXRoLlxyXG5cdCAqXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiAgIC8vIERpcmVjdCBpbml0aWFsaXNhdGlvbiBkdXJpbmcgRGF0YVRhYmxlcyBjb25zdHJ1Y3Rpb25cclxuXHQgKiAgIHZhciBhcGkgPSAkKCcjZXhhbXBsZScpLkRhdGFUYWJsZSgpO1xyXG5cdCAqXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiAgIC8vIEluaXRpYWxpc2F0aW9uIHVzaW5nIGEgRGF0YVRhYmxlcyBqUXVlcnkgb2JqZWN0XHJcblx0ICogICB2YXIgYXBpID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoKS5hcGkoKTtcclxuXHQgKlxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogICAvLyBJbml0aWFsaXNhdGlvbiBhcyBhIGNvbnN0cnVjdG9yXHJcblx0ICogICB2YXIgYXBpID0gbmV3ICQuZm4uRGF0YVRhYmxlLkFwaSggJ3RhYmxlLmRhdGFUYWJsZScgKTtcclxuXHQgKi9cclxuXHRfQXBpID0gZnVuY3Rpb24gKCBjb250ZXh0LCBkYXRhIClcclxuXHR7XHJcblx0XHRpZiAoICEgKHRoaXMgaW5zdGFuY2VvZiBfQXBpKSApIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBfQXBpKCBjb250ZXh0LCBkYXRhICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgc2V0dGluZ3MgPSBbXTtcclxuXHRcdHZhciBjdHhTZXR0aW5ncyA9IGZ1bmN0aW9uICggbyApIHtcclxuXHRcdFx0dmFyIGEgPSBfdG9TZXR0aW5ncyggbyApO1xyXG5cdFx0XHRpZiAoIGEgKSB7XHJcblx0XHRcdFx0c2V0dGluZ3MgPSBzZXR0aW5ncy5jb25jYXQoIGEgKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcclxuXHRcdGlmICggJC5pc0FycmF5KCBjb250ZXh0ICkgKSB7XHJcblx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1jb250ZXh0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGN0eFNldHRpbmdzKCBjb250ZXh0W2ldICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjdHhTZXR0aW5ncyggY29udGV4dCApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuXHRcdHRoaXMuY29udGV4dCA9IF91bmlxdWUoIHNldHRpbmdzICk7XHJcblx0XHJcblx0XHQvLyBJbml0aWFsIGRhdGFcclxuXHRcdGlmICggZGF0YSApIHtcclxuXHRcdFx0JC5tZXJnZSggdGhpcywgZGF0YSApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gc2VsZWN0b3JcclxuXHRcdHRoaXMuc2VsZWN0b3IgPSB7XHJcblx0XHRcdHJvd3M6IG51bGwsXHJcblx0XHRcdGNvbHM6IG51bGwsXHJcblx0XHRcdG9wdHM6IG51bGxcclxuXHRcdH07XHJcblx0XHJcblx0XHRfQXBpLmV4dGVuZCggdGhpcywgdGhpcywgX19hcGlTdHJ1Y3QgKTtcclxuXHR9O1xyXG5cdFxyXG5cdERhdGFUYWJsZS5BcGkgPSBfQXBpO1xyXG5cdFxyXG5cdC8vIERvbid0IGRlc3Ryb3kgdGhlIGV4aXN0aW5nIHByb3RvdHlwZSwganVzdCBleHRlbmQgaXQuIFJlcXVpcmVkIGZvciBqUXVlcnkgMidzXHJcblx0Ly8gaXNQbGFpbk9iamVjdC5cclxuXHQkLmV4dGVuZCggX0FwaS5wcm90b3R5cGUsIHtcclxuXHRcdGFueTogZnVuY3Rpb24gKClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY291bnQoKSAhPT0gMDtcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHRjb25jYXQ6ICBfX2FycmF5UHJvdG8uY29uY2F0LFxyXG5cdFxyXG5cdFxyXG5cdFx0Y29udGV4dDogW10sIC8vIGFycmF5IG9mIHRhYmxlIHNldHRpbmdzIG9iamVjdHNcclxuXHRcclxuXHRcclxuXHRcdGNvdW50OiBmdW5jdGlvbiAoKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5mbGF0dGVuKCkubGVuZ3RoO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdGVhY2g6IGZ1bmN0aW9uICggZm4gKVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49dGhpcy5sZW5ndGggOyBpPGllbjsgaSsrICkge1xyXG5cdFx0XHRcdGZuLmNhbGwoIHRoaXMsIHRoaXNbaV0sIGksIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHRlcTogZnVuY3Rpb24gKCBpZHggKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xyXG5cdFxyXG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCA+IGlkeCA/XHJcblx0XHRcdFx0bmV3IF9BcGkoIGN0eFtpZHhdLCB0aGlzW2lkeF0gKSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uICggZm4gKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgYSA9IFtdO1xyXG5cdFxyXG5cdFx0XHRpZiAoIF9fYXJyYXlQcm90by5maWx0ZXIgKSB7XHJcblx0XHRcdFx0YSA9IF9fYXJyYXlQcm90by5maWx0ZXIuY2FsbCggdGhpcywgZm4sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQvLyBDb21wYXRpYmlsaXR5IGZvciBicm93c2VycyB3aXRob3V0IEVNQ0EtMjUyLTUgKEpTIDEuNilcclxuXHRcdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49dGhpcy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRcdGlmICggZm4uY2FsbCggdGhpcywgdGhpc1tpXSwgaSwgdGhpcyApICkge1xyXG5cdFx0XHRcdFx0XHRhLnB1c2goIHRoaXNbaV0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0cmV0dXJuIG5ldyBfQXBpKCB0aGlzLmNvbnRleHQsIGEgKTtcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHRmbGF0dGVuOiBmdW5jdGlvbiAoKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgYSA9IFtdO1xyXG5cdFx0XHRyZXR1cm4gbmV3IF9BcGkoIHRoaXMuY29udGV4dCwgYS5jb25jYXQuYXBwbHkoIGEsIHRoaXMudG9BcnJheSgpICkgKTtcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHRqb2luOiAgICBfX2FycmF5UHJvdG8uam9pbixcclxuXHRcclxuXHRcclxuXHRcdGluZGV4T2Y6IF9fYXJyYXlQcm90by5pbmRleE9mIHx8IGZ1bmN0aW9uIChvYmosIHN0YXJ0KVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IgKCB2YXIgaT0oc3RhcnQgfHwgMCksIGllbj10aGlzLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggdGhpc1tpXSA9PT0gb2JqICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiAtMTtcclxuXHRcdH0sXHJcblx0XHJcblx0XHRpdGVyYXRvcjogZnVuY3Rpb24gKCBmbGF0dGVuLCB0eXBlLCBmbiwgYWx3YXlzTmV3ICkge1xyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRhID0gW10sIHJldCxcclxuXHRcdFx0XHRpLCBpZW4sIGosIGplbixcclxuXHRcdFx0XHRjb250ZXh0ID0gdGhpcy5jb250ZXh0LFxyXG5cdFx0XHRcdHJvd3MsIGl0ZW1zLCBpdGVtLFxyXG5cdFx0XHRcdHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcclxuXHRcclxuXHRcdFx0Ly8gQXJndW1lbnQgc2hpZnRpbmdcclxuXHRcdFx0aWYgKCB0eXBlb2YgZmxhdHRlbiA9PT0gJ3N0cmluZycgKSB7XHJcblx0XHRcdFx0YWx3YXlzTmV3ID0gZm47XHJcblx0XHRcdFx0Zm4gPSB0eXBlO1xyXG5cdFx0XHRcdHR5cGUgPSBmbGF0dGVuO1xyXG5cdFx0XHRcdGZsYXR0ZW4gPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRmb3IgKCBpPTAsIGllbj1jb250ZXh0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdHZhciBhcGlJbnN0ID0gbmV3IF9BcGkoIGNvbnRleHRbaV0gKTtcclxuXHRcclxuXHRcdFx0XHRpZiAoIHR5cGUgPT09ICd0YWJsZScgKSB7XHJcblx0XHRcdFx0XHRyZXQgPSBmbi5jYWxsKCBhcGlJbnN0LCBjb250ZXh0W2ldLCBpICk7XHJcblx0XHJcblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRhLnB1c2goIHJldCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmICggdHlwZSA9PT0gJ2NvbHVtbnMnIHx8IHR5cGUgPT09ICdyb3dzJyApIHtcclxuXHRcdFx0XHRcdC8vIHRoaXMgaGFzIHNhbWUgbGVuZ3RoIGFzIGNvbnRleHQgLSBvbmUgZW50cnkgZm9yIGVhY2ggdGFibGVcclxuXHRcdFx0XHRcdHJldCA9IGZuLmNhbGwoIGFwaUluc3QsIGNvbnRleHRbaV0sIHRoaXNbaV0sIGkgKTtcclxuXHRcclxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdGEucHVzaCggcmV0ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKCB0eXBlID09PSAnY29sdW1uJyB8fCB0eXBlID09PSAnY29sdW1uLXJvd3MnIHx8IHR5cGUgPT09ICdyb3cnIHx8IHR5cGUgPT09ICdjZWxsJyApIHtcclxuXHRcdFx0XHRcdC8vIGNvbHVtbnMgYW5kIHJvd3Mgc2hhcmUgdGhlIHNhbWUgc3RydWN0dXJlLlxyXG5cdFx0XHRcdFx0Ly8gJ3RoaXMnIGlzIGFuIGFycmF5IG9mIGNvbHVtbiBpbmRleGVzIGZvciBlYWNoIGNvbnRleHRcclxuXHRcdFx0XHRcdGl0ZW1zID0gdGhpc1tpXTtcclxuXHRcclxuXHRcdFx0XHRcdGlmICggdHlwZSA9PT0gJ2NvbHVtbi1yb3dzJyApIHtcclxuXHRcdFx0XHRcdFx0cm93cyA9IF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyggY29udGV4dFtpXSwgc2VsZWN0b3Iub3B0cyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0Zm9yICggaj0wLCBqZW49aXRlbXMubGVuZ3RoIDsgajxqZW4gOyBqKysgKSB7XHJcblx0XHRcdFx0XHRcdGl0ZW0gPSBpdGVtc1tqXTtcclxuXHRcclxuXHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSAnY2VsbCcgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0ID0gZm4uY2FsbCggYXBpSW5zdCwgY29udGV4dFtpXSwgaXRlbS5yb3csIGl0ZW0uY29sdW1uLCBpLCBqICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0ID0gZm4uY2FsbCggYXBpSW5zdCwgY29udGV4dFtpXSwgaXRlbSwgaSwgaiwgcm93cyApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0YS5wdXNoKCByZXQgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRpZiAoIGEubGVuZ3RoIHx8IGFsd2F5c05ldyApIHtcclxuXHRcdFx0XHR2YXIgYXBpID0gbmV3IF9BcGkoIGNvbnRleHQsIGZsYXR0ZW4gPyBhLmNvbmNhdC5hcHBseSggW10sIGEgKSA6IGEgKTtcclxuXHRcdFx0XHR2YXIgYXBpU2VsZWN0b3IgPSBhcGkuc2VsZWN0b3I7XHJcblx0XHRcdFx0YXBpU2VsZWN0b3Iucm93cyA9IHNlbGVjdG9yLnJvd3M7XHJcblx0XHRcdFx0YXBpU2VsZWN0b3IuY29scyA9IHNlbGVjdG9yLmNvbHM7XHJcblx0XHRcdFx0YXBpU2VsZWN0b3Iub3B0cyA9IHNlbGVjdG9yLm9wdHM7XHJcblx0XHRcdFx0cmV0dXJuIGFwaTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHRsYXN0SW5kZXhPZjogX19hcnJheVByb3RvLmxhc3RJbmRleE9mIHx8IGZ1bmN0aW9uIChvYmosIHN0YXJ0KVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBCaXQgY2hlZWt5Li4uXHJcblx0XHRcdHJldHVybiB0aGlzLmluZGV4T2YuYXBwbHkoIHRoaXMudG9BcnJheS5yZXZlcnNlKCksIGFyZ3VtZW50cyApO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdGxlbmd0aDogIDAsXHJcblx0XHJcblx0XHJcblx0XHRtYXA6IGZ1bmN0aW9uICggZm4gKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgYSA9IFtdO1xyXG5cdFxyXG5cdFx0XHRpZiAoIF9fYXJyYXlQcm90by5tYXAgKSB7XHJcblx0XHRcdFx0YSA9IF9fYXJyYXlQcm90by5tYXAuY2FsbCggdGhpcywgZm4sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQvLyBDb21wYXRpYmlsaXR5IGZvciBicm93c2VycyB3aXRob3V0IEVNQ0EtMjUyLTUgKEpTIDEuNilcclxuXHRcdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49dGhpcy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRcdGEucHVzaCggZm4uY2FsbCggdGhpcywgdGhpc1tpXSwgaSApICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdHJldHVybiBuZXcgX0FwaSggdGhpcy5jb250ZXh0LCBhICk7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0cGx1Y2s6IGZ1bmN0aW9uICggcHJvcCApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24gKCBlbCApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxbIHByb3AgXTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdHBvcDogICAgIF9fYXJyYXlQcm90by5wb3AsXHJcblx0XHJcblx0XHJcblx0XHRwdXNoOiAgICBfX2FycmF5UHJvdG8ucHVzaCxcclxuXHRcclxuXHRcclxuXHRcdC8vIERvZXMgbm90IHJldHVybiBhbiBBUEkgaW5zdGFuY2VcclxuXHRcdHJlZHVjZTogX19hcnJheVByb3RvLnJlZHVjZSB8fCBmdW5jdGlvbiAoIGZuLCBpbml0IClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIF9mblJlZHVjZSggdGhpcywgZm4sIGluaXQsIDAsIHRoaXMubGVuZ3RoLCAxICk7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0cmVkdWNlUmlnaHQ6IF9fYXJyYXlQcm90by5yZWR1Y2VSaWdodCB8fCBmdW5jdGlvbiAoIGZuLCBpbml0IClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIF9mblJlZHVjZSggdGhpcywgZm4sIGluaXQsIHRoaXMubGVuZ3RoLTEsIC0xLCAtMSApO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdHJldmVyc2U6IF9fYXJyYXlQcm90by5yZXZlcnNlLFxyXG5cdFxyXG5cdFxyXG5cdFx0Ly8gT2JqZWN0IHdpdGggcm93cywgY29sdW1ucyBhbmQgb3B0c1xyXG5cdFx0c2VsZWN0b3I6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHRzaGlmdDogICBfX2FycmF5UHJvdG8uc2hpZnQsXHJcblx0XHJcblx0XHJcblx0XHRzb3J0OiAgICBfX2FycmF5UHJvdG8uc29ydCwgLy8gPyBuYW1lIC0gb3JkZXI/XHJcblx0XHJcblx0XHJcblx0XHRzcGxpY2U6ICBfX2FycmF5UHJvdG8uc3BsaWNlLFxyXG5cdFxyXG5cdFxyXG5cdFx0dG9BcnJheTogZnVuY3Rpb24gKClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIF9fYXJyYXlQcm90by5zbGljZS5jYWxsKCB0aGlzICk7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0dG8kOiBmdW5jdGlvbiAoKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gJCggdGhpcyApO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdHRvSlF1ZXJ5OiBmdW5jdGlvbiAoKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gJCggdGhpcyApO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdHVuaXF1ZTogZnVuY3Rpb24gKClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIG5ldyBfQXBpKCB0aGlzLmNvbnRleHQsIF91bmlxdWUodGhpcykgKTtcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHR1bnNoaWZ0OiBfX2FycmF5UHJvdG8udW5zaGlmdFxyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfQXBpLmV4dGVuZCA9IGZ1bmN0aW9uICggc2NvcGUsIG9iaiwgZXh0IClcclxuXHR7XHJcblx0XHQvLyBPbmx5IGV4dGVuZCBBUEkgaW5zdGFuY2VzIGFuZCBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgQVBJXHJcblx0XHRpZiAoICEgZXh0Lmxlbmd0aCB8fCAhIG9iaiB8fCAoICEgKG9iaiBpbnN0YW5jZW9mIF9BcGkpICYmICEgb2JqLl9fZHRfd3JhcHBlciApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXJcclxuXHRcdFx0aSwgaWVuLFxyXG5cdFx0XHRqLCBqZW4sXHJcblx0XHRcdHN0cnVjdCwgaW5uZXIsXHJcblx0XHRcdG1ldGhvZFNjb3BpbmcgPSBmdW5jdGlvbiAoIHNjb3BlLCBmbiwgc3RydWMgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHZhciByZXQgPSBmbi5hcHBseSggc2NvcGUsIGFyZ3VtZW50cyApO1xyXG5cdFxyXG5cdFx0XHRcdFx0Ly8gTWV0aG9kIGV4dGVuc2lvblxyXG5cdFx0XHRcdFx0X0FwaS5leHRlbmQoIHJldCwgcmV0LCBzdHJ1Yy5tZXRob2RFeHQgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fTtcclxuXHRcclxuXHRcdGZvciAoIGk9MCwgaWVuPWV4dC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0c3RydWN0ID0gZXh0W2ldO1xyXG5cdFxyXG5cdFx0XHQvLyBWYWx1ZVxyXG5cdFx0XHRvYmpbIHN0cnVjdC5uYW1lIF0gPSB0eXBlb2Ygc3RydWN0LnZhbCA9PT0gJ2Z1bmN0aW9uJyA/XHJcblx0XHRcdFx0bWV0aG9kU2NvcGluZyggc2NvcGUsIHN0cnVjdC52YWwsIHN0cnVjdCApIDpcclxuXHRcdFx0XHQkLmlzUGxhaW5PYmplY3QoIHN0cnVjdC52YWwgKSA/XHJcblx0XHRcdFx0XHR7fSA6XHJcblx0XHRcdFx0XHRzdHJ1Y3QudmFsO1xyXG5cdFxyXG5cdFx0XHRvYmpbIHN0cnVjdC5uYW1lIF0uX19kdF93cmFwcGVyID0gdHJ1ZTtcclxuXHRcclxuXHRcdFx0Ly8gUHJvcGVydHkgZXh0ZW5zaW9uXHJcblx0XHRcdF9BcGkuZXh0ZW5kKCBzY29wZSwgb2JqWyBzdHJ1Y3QubmFtZSBdLCBzdHJ1Y3QucHJvcEV4dCApO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0XHJcblx0Ly8gQHRvZG8gLSBJcyB0aGVyZSBuZWVkIGZvciBhbiBhdWdtZW50IGZ1bmN0aW9uP1xyXG5cdC8vIF9BcGkuYXVnbWVudCA9IGZ1bmN0aW9uICggaW5zdCwgbmFtZSApXHJcblx0Ly8ge1xyXG5cdC8vIFx0Ly8gRmluZCBzcmMgb2JqZWN0IGluIHRoZSBzdHJ1Y3R1cmUgZnJvbSB0aGUgbmFtZVxyXG5cdC8vIFx0dmFyIHBhcnRzID0gbmFtZS5zcGxpdCgnLicpO1xyXG5cdFxyXG5cdC8vIFx0X0FwaS5leHRlbmQoIGluc3QsIG9iaiApO1xyXG5cdC8vIH07XHJcblx0XHJcblx0XHJcblx0Ly8gICAgIFtcclxuXHQvLyAgICAgICB7XHJcblx0Ly8gICAgICAgICBuYW1lOiAgICAgICdkYXRhJyAgICAgICAgICAgICAgICAtLSBzdHJpbmcgICAtIFByb3BlcnR5IG5hbWVcclxuXHQvLyAgICAgICAgIHZhbDogICAgICAgZnVuY3Rpb24gKCkge30sICAgICAgIC0tIGZ1bmN0aW9uIC0gQXBpIG1ldGhvZCAob3IgdW5kZWZpbmVkIGlmIGp1c3QgYW4gb2JqZWN0XHJcblx0Ly8gICAgICAgICBtZXRob2RFeHQ6IFsgLi4uIF0sICAgICAgICAgICAgICAtLSBhcnJheSAgICAtIEFycmF5IG9mIEFwaSBvYmplY3QgZGVmaW5pdGlvbnMgdG8gZXh0ZW5kIHRoZSBtZXRob2QgcmVzdWx0XHJcblx0Ly8gICAgICAgICBwcm9wRXh0OiAgIFsgLi4uIF0gICAgICAgICAgICAgICAtLSBhcnJheSAgICAtIEFycmF5IG9mIEFwaSBvYmplY3QgZGVmaW5pdGlvbnMgdG8gZXh0ZW5kIHRoZSBwcm9wZXJ0eVxyXG5cdC8vICAgICAgIH0sXHJcblx0Ly8gICAgICAge1xyXG5cdC8vICAgICAgICAgbmFtZTogICAgICdyb3cnXHJcblx0Ly8gICAgICAgICB2YWw6ICAgICAgIHt9LFxyXG5cdC8vICAgICAgICAgbWV0aG9kRXh0OiBbIC4uLiBdLFxyXG5cdC8vICAgICAgICAgcHJvcEV4dDogICBbXHJcblx0Ly8gICAgICAgICAgIHtcclxuXHQvLyAgICAgICAgICAgICBuYW1lOiAgICAgICdkYXRhJ1xyXG5cdC8vICAgICAgICAgICAgIHZhbDogICAgICAgZnVuY3Rpb24gKCkge30sXHJcblx0Ly8gICAgICAgICAgICAgbWV0aG9kRXh0OiBbIC4uLiBdLFxyXG5cdC8vICAgICAgICAgICAgIHByb3BFeHQ6ICAgWyAuLi4gXVxyXG5cdC8vICAgICAgICAgICB9LFxyXG5cdC8vICAgICAgICAgICAuLi5cclxuXHQvLyAgICAgICAgIF1cclxuXHQvLyAgICAgICB9XHJcblx0Ly8gICAgIF1cclxuXHRcclxuXHRfQXBpLnJlZ2lzdGVyID0gX2FwaV9yZWdpc3RlciA9IGZ1bmN0aW9uICggbmFtZSwgdmFsIClcclxuXHR7XHJcblx0XHRpZiAoICQuaXNBcnJheSggbmFtZSApICkge1xyXG5cdFx0XHRmb3IgKCB2YXIgaj0wLCBqZW49bmFtZS5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcclxuXHRcdFx0XHRfQXBpLnJlZ2lzdGVyKCBuYW1lW2pdLCB2YWwgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXJcclxuXHRcdFx0aSwgaWVuLFxyXG5cdFx0XHRoZWlyID0gbmFtZS5zcGxpdCgnLicpLFxyXG5cdFx0XHRzdHJ1Y3QgPSBfX2FwaVN0cnVjdCxcclxuXHRcdFx0a2V5LCBtZXRob2Q7XHJcblx0XHJcblx0XHR2YXIgZmluZCA9IGZ1bmN0aW9uICggc3JjLCBuYW1lICkge1xyXG5cdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49c3JjLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggc3JjW2ldLm5hbWUgPT09IG5hbWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3JjW2ldO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH07XHJcblx0XHJcblx0XHRmb3IgKCBpPTAsIGllbj1oZWlyLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRtZXRob2QgPSBoZWlyW2ldLmluZGV4T2YoJygpJykgIT09IC0xO1xyXG5cdFx0XHRrZXkgPSBtZXRob2QgP1xyXG5cdFx0XHRcdGhlaXJbaV0ucmVwbGFjZSgnKCknLCAnJykgOlxyXG5cdFx0XHRcdGhlaXJbaV07XHJcblx0XHJcblx0XHRcdHZhciBzcmMgPSBmaW5kKCBzdHJ1Y3QsIGtleSApO1xyXG5cdFx0XHRpZiAoICEgc3JjICkge1xyXG5cdFx0XHRcdHNyYyA9IHtcclxuXHRcdFx0XHRcdG5hbWU6ICAgICAga2V5LFxyXG5cdFx0XHRcdFx0dmFsOiAgICAgICB7fSxcclxuXHRcdFx0XHRcdG1ldGhvZEV4dDogW10sXHJcblx0XHRcdFx0XHRwcm9wRXh0OiAgIFtdXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRzdHJ1Y3QucHVzaCggc3JjICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0aWYgKCBpID09PSBpZW4tMSApIHtcclxuXHRcdFx0XHRzcmMudmFsID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdHN0cnVjdCA9IG1ldGhvZCA/XHJcblx0XHRcdFx0XHRzcmMubWV0aG9kRXh0IDpcclxuXHRcdFx0XHRcdHNyYy5wcm9wRXh0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHRfQXBpLnJlZ2lzdGVyUGx1cmFsID0gX2FwaV9yZWdpc3RlclBsdXJhbCA9IGZ1bmN0aW9uICggcGx1cmFsTmFtZSwgc2luZ3VsYXJOYW1lLCB2YWwgKSB7XHJcblx0XHRfQXBpLnJlZ2lzdGVyKCBwbHVyYWxOYW1lLCB2YWwgKTtcclxuXHRcclxuXHRcdF9BcGkucmVnaXN0ZXIoIHNpbmd1bGFyTmFtZSwgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR2YXIgcmV0ID0gdmFsLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcclxuXHRcdFx0aWYgKCByZXQgPT09IHRoaXMgKSB7XHJcblx0XHRcdFx0Ly8gUmV0dXJuZWQgaXRlbSBpcyB0aGUgQVBJIGluc3RhbmNlIHRoYXQgd2FzIHBhc3NlZCBpbiwgcmV0dXJuIGl0XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoIHJldCBpbnN0YW5jZW9mIF9BcGkgKSB7XHJcblx0XHRcdFx0Ly8gTmV3IEFQSSBpbnN0YW5jZSByZXR1cm5lZCwgd2FudCB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgaXRlbVxyXG5cdFx0XHRcdC8vIGluIHRoZSByZXR1cm5lZCBhcnJheSBmb3IgdGhlIHNpbmd1bGFyIHJlc3VsdC5cclxuXHRcdFx0XHRyZXR1cm4gcmV0Lmxlbmd0aCA/XHJcblx0XHRcdFx0XHQkLmlzQXJyYXkoIHJldFswXSApID9cclxuXHRcdFx0XHRcdFx0bmV3IF9BcGkoIHJldC5jb250ZXh0LCByZXRbMF0gKSA6IC8vIEFycmF5IHJlc3VsdHMgYXJlICdlbmhhbmNlZCdcclxuXHRcdFx0XHRcdFx0cmV0WzBdIDpcclxuXHRcdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBOb24tQVBJIHJldHVybiAtIGp1c3QgZmlyZSBpdCBiYWNrXHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9ICk7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBTZWxlY3RvciBmb3IgSFRNTCB0YWJsZXMuIEFwcGx5IHRoZSBnaXZlbiBzZWxlY3RvciB0byB0aGUgZ2l2ZSBhcnJheSBvZlxyXG5cdCAqIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0cy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IFtzZWxlY3Rvcl0galF1ZXJ5IHNlbGVjdG9yIHN0cmluZyBvciBpbnRlZ2VyXHJcblx0ICogQHBhcmFtICB7YXJyYXl9IEFycmF5IG9mIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0cyB0byBiZSBmaWx0ZXJlZFxyXG5cdCAqIEByZXR1cm4ge2FycmF5fVxyXG5cdCAqIEBpZ25vcmVcclxuXHQgKi9cclxuXHR2YXIgX190YWJsZV9zZWxlY3RvciA9IGZ1bmN0aW9uICggc2VsZWN0b3IsIGEgKVxyXG5cdHtcclxuXHRcdC8vIEludGVnZXIgaXMgdXNlZCB0byBwaWNrIG91dCBhIHRhYmxlIGJ5IGluZGV4XHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gJ251bWJlcicgKSB7XHJcblx0XHRcdHJldHVybiBbIGFbIHNlbGVjdG9yIF0gXTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFBlcmZvcm0gYSBqUXVlcnkgc2VsZWN0b3Igb24gdGhlIHRhYmxlIG5vZGVzXHJcblx0XHR2YXIgbm9kZXMgPSAkLm1hcCggYSwgZnVuY3Rpb24gKGVsLCBpKSB7XHJcblx0XHRcdHJldHVybiBlbC5uVGFibGU7XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHRyZXR1cm4gJChub2RlcylcclxuXHRcdFx0LmZpbHRlciggc2VsZWN0b3IgKVxyXG5cdFx0XHQubWFwKCBmdW5jdGlvbiAoaSkge1xyXG5cdFx0XHRcdC8vIE5lZWQgdG8gdHJhbnNsYXRlIGJhY2sgZnJvbSB0aGUgdGFibGUgbm9kZSB0byB0aGUgc2V0dGluZ3NcclxuXHRcdFx0XHR2YXIgaWR4ID0gJC5pbkFycmF5KCB0aGlzLCBub2RlcyApO1xyXG5cdFx0XHRcdHJldHVybiBhWyBpZHggXTtcclxuXHRcdFx0fSApXHJcblx0XHRcdC50b0FycmF5KCk7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBDb250ZXh0IHNlbGVjdG9yIGZvciB0aGUgQVBJJ3MgY29udGV4dCAoaS5lLiB0aGUgdGFibGVzIHRoZSBBUEkgaW5zdGFuY2VcclxuXHQgKiByZWZlcnMgdG8uXHJcblx0ICpcclxuXHQgKiBAbmFtZSAgICBEYXRhVGFibGUuQXBpI3RhYmxlc1xyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IFtzZWxlY3Rvcl0gU2VsZWN0b3IgdG8gcGljayB3aGljaCB0YWJsZXMgdGhlIGl0ZXJhdG9yXHJcblx0ICogICBzaG91bGQgb3BlcmF0ZSBvbi4gSWYgbm90IGdpdmVuLCBhbGwgdGFibGVzIGluIHRoZSBjdXJyZW50IGNvbnRleHQgYXJlXHJcblx0ICogICB1c2VkLiBUaGlzIGNhbiBiZSBnaXZlbiBhcyBhIGpRdWVyeSBzZWxlY3RvciAoZm9yIGV4YW1wbGUgYCc6Z3QoMCknYCkgdG9cclxuXHQgKiAgIHNlbGVjdCBtdWx0aXBsZSB0YWJsZXMgb3IgYXMgYW4gaW50ZWdlciB0byBzZWxlY3QgYSBzaW5nbGUgdGFibGUuXHJcblx0ICogQHJldHVybnMge0RhdGFUYWJsZS5BcGl9IFJldHVybnMgYSBuZXcgQVBJIGluc3RhbmNlIGlmIGEgc2VsZWN0b3IgaXMgZ2l2ZW4uXHJcblx0ICovXHJcblx0X2FwaV9yZWdpc3RlciggJ3RhYmxlcygpJywgZnVuY3Rpb24gKCBzZWxlY3RvciApIHtcclxuXHRcdC8vIEEgbmV3IGluc3RhbmNlIGlzIGNyZWF0ZWQgaWYgdGhlcmUgd2FzIGEgc2VsZWN0b3Igc3BlY2lmaWVkXHJcblx0XHRyZXR1cm4gc2VsZWN0b3IgP1xyXG5cdFx0XHRuZXcgX0FwaSggX190YWJsZV9zZWxlY3Rvciggc2VsZWN0b3IsIHRoaXMuY29udGV4dCApICkgOlxyXG5cdFx0XHR0aGlzO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAndGFibGUoKScsIGZ1bmN0aW9uICggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgdGFibGVzID0gdGhpcy50YWJsZXMoIHNlbGVjdG9yICk7XHJcblx0XHR2YXIgY3R4ID0gdGFibGVzLmNvbnRleHQ7XHJcblx0XHJcblx0XHQvLyBUcnVuY2F0ZSB0byB0aGUgZmlyc3QgbWF0Y2hlZCB0YWJsZVxyXG5cdFx0cmV0dXJuIGN0eC5sZW5ndGggP1xyXG5cdFx0XHRuZXcgX0FwaSggY3R4WzBdICkgOlxyXG5cdFx0XHR0YWJsZXM7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICd0YWJsZXMoKS5ub2RlcygpJywgJ3RhYmxlKCkubm9kZSgpJyAsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIGN0eCApIHtcclxuXHRcdFx0cmV0dXJuIGN0eC5uVGFibGU7XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICd0YWJsZXMoKS5ib2R5KCknLCAndGFibGUoKS5ib2R5KCknICwgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggY3R4ICkge1xyXG5cdFx0XHRyZXR1cm4gY3R4Lm5UQm9keTtcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3RhYmxlcygpLmhlYWRlcigpJywgJ3RhYmxlKCkuaGVhZGVyKCknICwgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggY3R4ICkge1xyXG5cdFx0XHRyZXR1cm4gY3R4Lm5USGVhZDtcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3RhYmxlcygpLmZvb3RlcigpJywgJ3RhYmxlKCkuZm9vdGVyKCknICwgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggY3R4ICkge1xyXG5cdFx0XHRyZXR1cm4gY3R4Lm5URm9vdDtcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3RhYmxlcygpLmNvbnRhaW5lcnMoKScsICd0YWJsZSgpLmNvbnRhaW5lcigpJyAsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIGN0eCApIHtcclxuXHRcdFx0cmV0dXJuIGN0eC5uVGFibGVXcmFwcGVyO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZWRyYXcgdGhlIHRhYmxlcyBpbiB0aGUgY3VycmVudCBjb250ZXh0LlxyXG5cdCAqL1xyXG5cdF9hcGlfcmVnaXN0ZXIoICdkcmF3KCknLCBmdW5jdGlvbiAoIHBhZ2luZyApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xyXG5cdFx0XHRpZiAoIHBhZ2luZyA9PT0gJ3BhZ2UnICkge1xyXG5cdFx0XHRcdF9mbkRyYXcoIHNldHRpbmdzICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0aWYgKCB0eXBlb2YgcGFnaW5nID09PSAnc3RyaW5nJyApIHtcclxuXHRcdFx0XHRcdHBhZ2luZyA9IHBhZ2luZyA9PT0gJ2Z1bGwtaG9sZCcgP1xyXG5cdFx0XHRcdFx0XHRmYWxzZSA6XHJcblx0XHRcdFx0XHRcdHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdF9mblJlRHJhdyggc2V0dGluZ3MsIHBhZ2luZz09PWZhbHNlICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IHRoZSBjdXJyZW50IHBhZ2UgaW5kZXguXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHtpbnRlZ2VyfSBDdXJyZW50IHBhZ2UgaW5kZXggKHplcm8gYmFzZWQpXHJcblx0ICovLyoqXHJcblx0ICogU2V0IHRoZSBjdXJyZW50IHBhZ2UuXHJcblx0ICpcclxuXHQgKiBOb3RlIHRoYXQgaWYgeW91IGF0dGVtcHQgdG8gc2hvdyBhIHBhZ2Ugd2hpY2ggZG9lcyBub3QgZXhpc3QsIERhdGFUYWJsZXMgd2lsbFxyXG5cdCAqIG5vdCB0aHJvdyBhbiBlcnJvciwgYnV0IHJhdGhlciByZXNldCB0aGUgcGFnaW5nLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtpbnRlZ2VyfHN0cmluZ30gYWN0aW9uIFRoZSBwYWdpbmcgYWN0aW9uIHRvIHRha2UuIFRoaXMgY2FuIGJlIG9uZSBvZjpcclxuXHQgKiAgKiBgaW50ZWdlcmAgLSBUaGUgcGFnZSBpbmRleCB0byBqdW1wIHRvXHJcblx0ICogICogYHN0cmluZ2AgLSBBbiBhY3Rpb24gdG8gdGFrZTpcclxuXHQgKiAgICAqIGBmaXJzdGAgLSBKdW1wIHRvIGZpcnN0IHBhZ2UuXHJcblx0ICogICAgKiBgbmV4dGAgLSBKdW1wIHRvIHRoZSBuZXh0IHBhZ2VcclxuXHQgKiAgICAqIGBwcmV2aW91c2AgLSBKdW1wIHRvIHByZXZpb3VzIHBhZ2VcclxuXHQgKiAgICAqIGBsYXN0YCAtIEp1bXAgdG8gdGhlIGxhc3QgcGFnZS5cclxuXHQgKiBAcmV0dXJucyB7RGF0YVRhYmxlcy5BcGl9IHRoaXNcclxuXHQgKi9cclxuXHRfYXBpX3JlZ2lzdGVyKCAncGFnZSgpJywgZnVuY3Rpb24gKCBhY3Rpb24gKSB7XHJcblx0XHRpZiAoIGFjdGlvbiA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wYWdlLmluZm8oKS5wYWdlOyAvLyBub3QgYW4gZXhwZW5zaXZlIGNhbGxcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIGVsc2UsIGhhdmUgYW4gYWN0aW9uIHRvIHRha2Ugb24gYWxsIHRhYmxlc1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdF9mblBhZ2VDaGFuZ2UoIHNldHRpbmdzLCBhY3Rpb24gKTtcclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogUGFnaW5nIGluZm9ybWF0aW9uIGZvciB0aGUgZmlyc3QgdGFibGUgaW4gdGhlIGN1cnJlbnQgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIElmIHlvdSByZXF1aXJlIHBhZ2luZyBpbmZvcm1hdGlvbiBmb3IgYW5vdGhlciB0YWJsZSwgdXNlIHRoZSBgdGFibGUoKWAgbWV0aG9kXHJcblx0ICogd2l0aCBhIHN1aXRhYmxlIHNlbGVjdG9yLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgc2V0OlxyXG5cdCAqICAqIGBwYWdlYCAtIEN1cnJlbnQgcGFnZSBpbmRleCAoemVybyBiYXNlZCAtIGkuZS4gdGhlIGZpcnN0IHBhZ2UgaXMgYDBgKVxyXG5cdCAqICAqIGBwYWdlc2AgLSBUb3RhbCBudW1iZXIgb2YgcGFnZXNcclxuXHQgKiAgKiBgc3RhcnRgIC0gRGlzcGxheSBpbmRleCBmb3IgdGhlIGZpcnN0IHJlY29yZCBzaG93biBvbiB0aGUgY3VycmVudCBwYWdlXHJcblx0ICogICogYGVuZGAgLSBEaXNwbGF5IGluZGV4IGZvciB0aGUgbGFzdCByZWNvcmQgc2hvd24gb24gdGhlIGN1cnJlbnQgcGFnZVxyXG5cdCAqICAqIGBsZW5ndGhgIC0gRGlzcGxheSBsZW5ndGggKG51bWJlciBvZiByZWNvcmRzKS4gTm90ZSB0aGF0IGdlbmVyYWxseSBgc3RhcnRcclxuXHQgKiAgICArIGxlbmd0aCA9IGVuZGAsIGJ1dCB0aGlzIGlzIG5vdCBhbHdheXMgdHJ1ZSwgZm9yIGV4YW1wbGUgaWYgdGhlcmUgYXJlXHJcblx0ICogICAgb25seSAyIHJlY29yZHMgdG8gc2hvdyBvbiB0aGUgZmluYWwgcGFnZSwgd2l0aCBhIGxlbmd0aCBvZiAxMC5cclxuXHQgKiAgKiBgcmVjb3Jkc1RvdGFsYCAtIEZ1bGwgZGF0YSBzZXQgbGVuZ3RoXHJcblx0ICogICogYHJlY29yZHNEaXNwbGF5YCAtIERhdGEgc2V0IGxlbmd0aCBvbmNlIHRoZSBjdXJyZW50IGZpbHRlcmluZyBjcml0ZXJpb25cclxuXHQgKiAgICBhcmUgYXBwbGllZC5cclxuXHQgKi9cclxuXHRfYXBpX3JlZ2lzdGVyKCAncGFnZS5pbmZvKCknLCBmdW5jdGlvbiAoIGFjdGlvbiApIHtcclxuXHRcdGlmICggdGhpcy5jb250ZXh0Lmxlbmd0aCA9PT0gMCApIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhclxyXG5cdFx0XHRzZXR0aW5ncyAgID0gdGhpcy5jb250ZXh0WzBdLFxyXG5cdFx0XHRzdGFydCAgICAgID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQsXHJcblx0XHRcdGxlbiAgICAgICAgPSBzZXR0aW5ncy5vRmVhdHVyZXMuYlBhZ2luYXRlID8gc2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoIDogLTEsXHJcblx0XHRcdHZpc1JlY29yZHMgPSBzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCksXHJcblx0XHRcdGFsbCAgICAgICAgPSBsZW4gPT09IC0xO1xyXG5cdFxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0XCJwYWdlXCI6ICAgICAgICAgICBhbGwgPyAwIDogTWF0aC5mbG9vciggc3RhcnQgLyBsZW4gKSxcclxuXHRcdFx0XCJwYWdlc1wiOiAgICAgICAgICBhbGwgPyAxIDogTWF0aC5jZWlsKCB2aXNSZWNvcmRzIC8gbGVuICksXHJcblx0XHRcdFwic3RhcnRcIjogICAgICAgICAgc3RhcnQsXHJcblx0XHRcdFwiZW5kXCI6ICAgICAgICAgICAgc2V0dGluZ3MuZm5EaXNwbGF5RW5kKCksXHJcblx0XHRcdFwibGVuZ3RoXCI6ICAgICAgICAgbGVuLFxyXG5cdFx0XHRcInJlY29yZHNUb3RhbFwiOiAgIHNldHRpbmdzLmZuUmVjb3Jkc1RvdGFsKCksXHJcblx0XHRcdFwicmVjb3Jkc0Rpc3BsYXlcIjogdmlzUmVjb3JkcyxcclxuXHRcdFx0XCJzZXJ2ZXJTaWRlXCI6ICAgICBfZm5EYXRhU291cmNlKCBzZXR0aW5ncyApID09PSAnc3NwJ1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IHRoZSBjdXJyZW50IHBhZ2UgbGVuZ3RoLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB7aW50ZWdlcn0gQ3VycmVudCBwYWdlIGxlbmd0aC4gTm90ZSBgLTFgIGluZGljYXRlcyB0aGF0IGFsbCByZWNvcmRzXHJcblx0ICogICBhcmUgdG8gYmUgc2hvd24uXHJcblx0ICovLyoqXHJcblx0ICogU2V0IHRoZSBjdXJyZW50IHBhZ2UgbGVuZ3RoLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtpbnRlZ2VyfSBQYWdlIGxlbmd0aCB0byBzZXQuIFVzZSBgLTFgIHRvIHNob3cgYWxsIHJlY29yZHMuXHJcblx0ICogQHJldHVybnMge0RhdGFUYWJsZXMuQXBpfSB0aGlzXHJcblx0ICovXHJcblx0X2FwaV9yZWdpc3RlciggJ3BhZ2UubGVuKCknLCBmdW5jdGlvbiAoIGxlbiApIHtcclxuXHRcdC8vIE5vdGUgdGhhdCB3ZSBjYW4ndCBjYWxsIHRoaXMgZnVuY3Rpb24gJ2xlbmd0aCgpJyBiZWNhdXNlIGBsZW5ndGhgXHJcblx0XHQvLyBpcyBhIEphdmFzY3JpcHQgcHJvcGVydHkgb2YgZnVuY3Rpb25zIHdoaWNoIGRlZmluZXMgaG93IG1hbnkgYXJndW1lbnRzXHJcblx0XHQvLyB0aGUgZnVuY3Rpb24gZXhwZWN0cy5cclxuXHRcdGlmICggbGVuID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHQubGVuZ3RoICE9PSAwID9cclxuXHRcdFx0XHR0aGlzLmNvbnRleHRbMF0uX2lEaXNwbGF5TGVuZ3RoIDpcclxuXHRcdFx0XHR1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBlbHNlLCBzZXQgdGhlIHBhZ2UgbGVuZ3RoXHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcclxuXHRcdFx0X2ZuTGVuZ3RoQ2hhbmdlKCBzZXR0aW5ncywgbGVuICk7XHJcblx0XHR9ICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdHZhciBfX3JlbG9hZCA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIGhvbGRQb3NpdGlvbiwgY2FsbGJhY2sgKSB7XHJcblx0XHQvLyBVc2UgdGhlIGRyYXcgZXZlbnQgdG8gdHJpZ2dlciBhIGNhbGxiYWNrXHJcblx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHR2YXIgYXBpID0gbmV3IF9BcGkoIHNldHRpbmdzICk7XHJcblx0XHJcblx0XHRcdGFwaS5vbmUoICdkcmF3JywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGNhbGxiYWNrKCBhcGkuYWpheC5qc29uKCkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYgKCBfZm5EYXRhU291cmNlKCBzZXR0aW5ncyApID09ICdzc3AnICkge1xyXG5cdFx0XHRfZm5SZURyYXcoIHNldHRpbmdzLCBob2xkUG9zaXRpb24gKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRfZm5Qcm9jZXNzaW5nRGlzcGxheSggc2V0dGluZ3MsIHRydWUgKTtcclxuXHRcclxuXHRcdFx0Ly8gQ2FuY2VsIGFuIGV4aXN0aW5nIHJlcXVlc3RcclxuXHRcdFx0dmFyIHhociA9IHNldHRpbmdzLmpxWEhSO1xyXG5cdFx0XHRpZiAoIHhociAmJiB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHtcclxuXHRcdFx0XHR4aHIuYWJvcnQoKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBUcmlnZ2VyIHhoclxyXG5cdFx0XHRfZm5CdWlsZEFqYXgoIHNldHRpbmdzLCBbXSwgZnVuY3Rpb24oIGpzb24gKSB7XHJcblx0XHRcdFx0X2ZuQ2xlYXJUYWJsZSggc2V0dGluZ3MgKTtcclxuXHRcclxuXHRcdFx0XHR2YXIgZGF0YSA9IF9mbkFqYXhEYXRhU3JjKCBzZXR0aW5ncywganNvbiApO1xyXG5cdFx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1kYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdFx0X2ZuQWRkRGF0YSggc2V0dGluZ3MsIGRhdGFbaV0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0X2ZuUmVEcmF3KCBzZXR0aW5ncywgaG9sZFBvc2l0aW9uICk7XHJcblx0XHRcdFx0X2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoIHNldHRpbmdzLCBmYWxzZSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIEpTT04gcmVzcG9uc2UgZnJvbSB0aGUgbGFzdCBBamF4IHJlcXVlc3QgdGhhdCBEYXRhVGFibGVzIG1hZGUgdG8gdGhlXHJcblx0ICogc2VydmVyLiBOb3RlIHRoYXQgdGhpcyByZXR1cm5zIHRoZSBKU09OIGZyb20gdGhlIGZpcnN0IHRhYmxlIGluIHRoZSBjdXJyZW50XHJcblx0ICogY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4ge29iamVjdH0gSlNPTiByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuXHJcblx0ICovXHJcblx0X2FwaV9yZWdpc3RlciggJ2FqYXguanNvbigpJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcclxuXHRcclxuXHRcdGlmICggY3R4Lmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdHJldHVybiBjdHhbMF0uanNvbjtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIGVsc2UgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IHRoZSBkYXRhIHN1Ym1pdHRlZCBpbiB0aGUgbGFzdCBBamF4IHJlcXVlc3RcclxuXHQgKi9cclxuXHRfYXBpX3JlZ2lzdGVyKCAnYWpheC5wYXJhbXMoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XHJcblx0XHJcblx0XHRpZiAoIGN0eC5sZW5ndGggPiAwICkge1xyXG5cdFx0XHRyZXR1cm4gY3R4WzBdLm9BamF4RGF0YTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIGVsc2UgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmVsb2FkIHRhYmxlcyBmcm9tIHRoZSBBamF4IGRhdGEgc291cmNlLiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsXHJcblx0ICogYXV0b21hdGljYWxseSByZS1kcmF3IHRoZSB0YWJsZSB3aGVuIHRoZSByZW1vdGUgZGF0YSBoYXMgYmVlbiBsb2FkZWQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNldD10cnVlXSBSZXNldCAoZGVmYXVsdCkgb3IgaG9sZCB0aGUgY3VycmVudCBwYWdpbmdcclxuXHQgKiAgIHBvc2l0aW9uLiBBIGZ1bGwgcmUtc29ydCBhbmQgcmUtZmlsdGVyIGlzIHBlcmZvcm1lZCB3aGVuIHRoaXMgbWV0aG9kIGlzXHJcblx0ICogICBjYWxsZWQsIHdoaWNoIGlzIHdoeSB0aGUgcGFnaW5hdGlvbiByZXNldCBpcyB0aGUgZGVmYXVsdCBhY3Rpb24uXHJcblx0ICogQHJldHVybnMge0RhdGFUYWJsZXMuQXBpfSB0aGlzXHJcblx0ICovXHJcblx0X2FwaV9yZWdpc3RlciggJ2FqYXgucmVsb2FkKCknLCBmdW5jdGlvbiAoIGNhbGxiYWNrLCByZXNldFBhZ2luZyApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuXHRcdFx0X19yZWxvYWQoIHNldHRpbmdzLCByZXNldFBhZ2luZz09PWZhbHNlLCBjYWxsYmFjayApO1xyXG5cdFx0fSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgQWpheCBVUkwuIE5vdGUgdGhhdCB0aGlzIHJldHVybnMgdGhlIFVSTCBmcm9tIHRoZSBmaXJzdFxyXG5cdCAqIHRhYmxlIGluIHRoZSBjdXJyZW50IGNvbnRleHQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEN1cnJlbnQgQWpheCBzb3VyY2UgVVJMXHJcblx0ICovLyoqXHJcblx0ICogU2V0IHRoZSBBamF4IFVSTC4gTm90ZSB0aGF0IHRoaXMgd2lsbCBzZXQgdGhlIFVSTCBmb3IgYWxsIHRhYmxlcyBpbiB0aGVcclxuXHQgKiBjdXJyZW50IGNvbnRleHQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byBzZXQuXHJcblx0ICogQHJldHVybnMge0RhdGFUYWJsZXMuQXBpfSB0aGlzXHJcblx0ICovXHJcblx0X2FwaV9yZWdpc3RlciggJ2FqYXgudXJsKCknLCBmdW5jdGlvbiAoIHVybCApIHtcclxuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XHJcblx0XHJcblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHQvLyBnZXRcclxuXHRcdFx0aWYgKCBjdHgubGVuZ3RoID09PSAwICkge1xyXG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Y3R4ID0gY3R4WzBdO1xyXG5cdFxyXG5cdFx0XHRyZXR1cm4gY3R4LmFqYXggP1xyXG5cdFx0XHRcdCQuaXNQbGFpbk9iamVjdCggY3R4LmFqYXggKSA/XHJcblx0XHRcdFx0XHRjdHguYWpheC51cmwgOlxyXG5cdFx0XHRcdFx0Y3R4LmFqYXggOlxyXG5cdFx0XHRcdGN0eC5zQWpheFNvdXJjZTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIHNldFxyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBzZXR0aW5ncy5hamF4ICkgKSB7XHJcblx0XHRcdFx0c2V0dGluZ3MuYWpheC51cmwgPSB1cmw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0c2V0dGluZ3MuYWpheCA9IHVybDtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBObyBuZWVkIHRvIGNvbnNpZGVyIHNBamF4U291cmNlIGhlcmUgc2luY2UgRGF0YVRhYmxlcyBnaXZlcyBwcmlvcml0eVxyXG5cdFx0XHQvLyB0byBgYWpheGAgb3ZlciBgc0FqYXhTb3VyY2VgLiBTbyBzZXR0aW5nIGBhamF4YCBoZXJlLCByZW5kZXJzIGFueVxyXG5cdFx0XHQvLyB2YWx1ZSBvZiBgc0FqYXhTb3VyY2VgIHJlZHVuZGFudC5cclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogTG9hZCBkYXRhIGZyb20gdGhlIG5ld2x5IHNldCBBamF4IFVSTC4gTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIG9ubHlcclxuXHQgKiBhdmFpbGFibGUgd2hlbiBgYWpheC51cmwoKWAgaXMgdXNlZCB0byBzZXQgYSBVUkwuIEFkZGl0aW9uYWxseSwgdGhpcyBtZXRob2RcclxuXHQgKiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGNhbGxpbmcgYGFqYXgucmVsb2FkKClgIGJ1dCBpcyBwcm92aWRlZCBmb3JcclxuXHQgKiBjb252ZW5pZW5jZSB3aGVuIHNldHRpbmcgYSBuZXcgVVJMLiBMaWtlIGBhamF4LnJlbG9hZCgpYCBpdCB3aWxsXHJcblx0ICogYXV0b21hdGljYWxseSByZWRyYXcgdGhlIHRhYmxlIG9uY2UgdGhlIHJlbW90ZSBkYXRhIGhhcyBiZWVuIGxvYWRlZC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xyXG5cdCAqL1xyXG5cdF9hcGlfcmVnaXN0ZXIoICdhamF4LnVybCgpLmxvYWQoKScsIGZ1bmN0aW9uICggY2FsbGJhY2ssIHJlc2V0UGFnaW5nICkge1xyXG5cdFx0Ly8gU2FtZSBhcyBhIHJlbG9hZCwgYnV0IG1ha2VzIHNlbnNlIHRvIHByZXNlbnQgaXQgZm9yIGVhc3kgYWNjZXNzIGFmdGVyIGFcclxuXHRcdC8vIHVybCBjaGFuZ2VcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIGN0eCApIHtcclxuXHRcdFx0X19yZWxvYWQoIGN0eCwgcmVzZXRQYWdpbmc9PT1mYWxzZSwgY2FsbGJhY2sgKTtcclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0XHJcblx0dmFyIF9zZWxlY3Rvcl9ydW4gPSBmdW5jdGlvbiAoIHR5cGUsIHNlbGVjdG9yLCBzZWxlY3RGbiwgc2V0dGluZ3MsIG9wdHMgKVxyXG5cdHtcclxuXHRcdHZhclxyXG5cdFx0XHRvdXQgPSBbXSwgcmVzLFxyXG5cdFx0XHRhLCBpLCBpZW4sIGosIGplbixcclxuXHRcdFx0c2VsZWN0b3JUeXBlID0gdHlwZW9mIHNlbGVjdG9yO1xyXG5cdFxyXG5cdFx0Ly8gQ2FuJ3QganVzdCBjaGVjayBmb3IgaXNBcnJheSBoZXJlLCBhcyBhbiBBUEkgb3IgalF1ZXJ5IGluc3RhbmNlIG1pZ2h0IGJlXHJcblx0XHQvLyBnaXZlbiB3aXRoIHRoZWlyIGFycmF5IGxpa2UgbG9va1xyXG5cdFx0aWYgKCAhIHNlbGVjdG9yIHx8IHNlbGVjdG9yVHlwZSA9PT0gJ3N0cmluZycgfHwgc2VsZWN0b3JUeXBlID09PSAnZnVuY3Rpb24nIHx8IHNlbGVjdG9yLmxlbmd0aCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRzZWxlY3RvciA9IFsgc2VsZWN0b3IgXTtcclxuXHRcdH1cclxuXHRcclxuXHRcdGZvciAoIGk9MCwgaWVuPXNlbGVjdG9yLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRhID0gc2VsZWN0b3JbaV0gJiYgc2VsZWN0b3JbaV0uc3BsaXQgP1xyXG5cdFx0XHRcdHNlbGVjdG9yW2ldLnNwbGl0KCcsJykgOlxyXG5cdFx0XHRcdFsgc2VsZWN0b3JbaV0gXTtcclxuXHRcclxuXHRcdFx0Zm9yICggaj0wLCBqZW49YS5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcclxuXHRcdFx0XHRyZXMgPSBzZWxlY3RGbiggdHlwZW9mIGFbal0gPT09ICdzdHJpbmcnID8gJC50cmltKGFbal0pIDogYVtqXSApO1xyXG5cdFxyXG5cdFx0XHRcdGlmICggcmVzICYmIHJlcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRvdXQgPSBvdXQuY29uY2F0KCByZXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIHNlbGVjdG9yIGV4dGVuc2lvbnNcclxuXHRcdHZhciBleHQgPSBfZXh0LnNlbGVjdG9yWyB0eXBlIF07XHJcblx0XHRpZiAoIGV4dC5sZW5ndGggKSB7XHJcblx0XHRcdGZvciAoIGk9MCwgaWVuPWV4dC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRvdXQgPSBleHRbaV0oIHNldHRpbmdzLCBvcHRzLCBvdXQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIF91bmlxdWUoIG91dCApO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0dmFyIF9zZWxlY3Rvcl9vcHRzID0gZnVuY3Rpb24gKCBvcHRzIClcclxuXHR7XHJcblx0XHRpZiAoICEgb3B0cyApIHtcclxuXHRcdFx0b3B0cyA9IHt9O1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIDEuOS0gd2hpY2ggdXNlZCB0aGUgdGVybWlub2xvZ3kgZmlsdGVyIHJhdGhlclxyXG5cdFx0Ly8gdGhhbiBzZWFyY2hcclxuXHRcdGlmICggb3B0cy5maWx0ZXIgJiYgb3B0cy5zZWFyY2ggPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0b3B0cy5zZWFyY2ggPSBvcHRzLmZpbHRlcjtcclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiAkLmV4dGVuZCgge1xyXG5cdFx0XHRzZWFyY2g6ICdub25lJyxcclxuXHRcdFx0b3JkZXI6ICdjdXJyZW50JyxcclxuXHRcdFx0cGFnZTogJ2FsbCdcclxuXHRcdH0sIG9wdHMgKTtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfc2VsZWN0b3JfZmlyc3QgPSBmdW5jdGlvbiAoIGluc3QgKVxyXG5cdHtcclxuXHRcdC8vIFJlZHVjZSB0aGUgQVBJIGluc3RhbmNlIHRvIHRoZSBmaXJzdCBpdGVtIGZvdW5kXHJcblx0XHRmb3IgKCB2YXIgaT0wLCBpZW49aW5zdC5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBpbnN0W2ldLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdFx0Ly8gQXNzaWduIHRoZSBmaXJzdCBlbGVtZW50IHRvIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBpbnN0YW5jZVxyXG5cdFx0XHRcdC8vIGFuZCB0cnVuY2F0ZSB0aGUgaW5zdGFuY2UgYW5kIGNvbnRleHRcclxuXHRcdFx0XHRpbnN0WzBdID0gaW5zdFtpXTtcclxuXHRcdFx0XHRpbnN0WzBdLmxlbmd0aCA9IDE7XHJcblx0XHRcdFx0aW5zdC5sZW5ndGggPSAxO1xyXG5cdFx0XHRcdGluc3QuY29udGV4dCA9IFsgaW5zdC5jb250ZXh0W2ldIF07XHJcblx0XHJcblx0XHRcdFx0cmV0dXJuIGluc3Q7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIE5vdCBmb3VuZCAtIHJldHVybiBhbiBlbXB0eSBpbnN0YW5jZVxyXG5cdFx0aW5zdC5sZW5ndGggPSAwO1xyXG5cdFx0cmV0dXJuIGluc3Q7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHR2YXIgX3NlbGVjdG9yX3Jvd19pbmRleGVzID0gZnVuY3Rpb24gKCBzZXR0aW5ncywgb3B0cyApXHJcblx0e1xyXG5cdFx0dmFyXHJcblx0XHRcdGksIGllbiwgdG1wLCBhPVtdLFxyXG5cdFx0XHRkaXNwbGF5RmlsdGVyZWQgPSBzZXR0aW5ncy5haURpc3BsYXksXHJcblx0XHRcdGRpc3BsYXlNYXN0ZXIgPSBzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXI7XHJcblx0XHJcblx0XHR2YXJcclxuXHRcdFx0c2VhcmNoID0gb3B0cy5zZWFyY2gsICAvLyBub25lLCBhcHBsaWVkLCByZW1vdmVkXHJcblx0XHRcdG9yZGVyICA9IG9wdHMub3JkZXIsICAgLy8gYXBwbGllZCwgY3VycmVudCwgaW5kZXggKG9yaWdpbmFsIC0gY29tcGF0aWJpbGl0eSB3aXRoIDEuOSlcclxuXHRcdFx0cGFnZSAgID0gb3B0cy5wYWdlOyAgICAvLyBhbGwsIGN1cnJlbnRcclxuXHRcclxuXHRcdGlmICggX2ZuRGF0YVNvdXJjZSggc2V0dGluZ3MgKSA9PSAnc3NwJyApIHtcclxuXHRcdFx0Ly8gSW4gc2VydmVyLXNpZGUgcHJvY2Vzc2luZyBtb2RlLCBtb3N0IG9wdGlvbnMgYXJlIGlycmVsZXZhbnQgc2luY2VcclxuXHRcdFx0Ly8gcm93cyBub3Qgc2hvd24gZG9uJ3QgZXhpc3QgYW5kIHRoZSBpbmRleCBvcmRlciBpcyB0aGUgYXBwbGllZCBvcmRlclxyXG5cdFx0XHQvLyBSZW1vdmVkIGlzIGEgc3BlY2lhbCBjYXNlIC0gZm9yIGNvbnNpc3RlbmN5IGp1c3QgcmV0dXJuIGFuIGVtcHR5XHJcblx0XHRcdC8vIGFycmF5XHJcblx0XHRcdHJldHVybiBzZWFyY2ggPT09ICdyZW1vdmVkJyA/XHJcblx0XHRcdFx0W10gOlxyXG5cdFx0XHRcdF9yYW5nZSggMCwgZGlzcGxheU1hc3Rlci5sZW5ndGggKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBwYWdlID09ICdjdXJyZW50JyApIHtcclxuXHRcdFx0Ly8gQ3VycmVudCBwYWdlIGltcGxpZXMgdGhhdCBvcmRlcj1jdXJyZW50IGFuZCBmaXRsZXI9YXBwbGllZCwgc2luY2UgaXQgaXNcclxuXHRcdFx0Ly8gZmFpcmx5IHNlbnNlbGVzcyBvdGhlcndpc2UsIHJlZ2FyZGxlc3Mgb2Ygd2hhdCBvcmRlciBhbmQgc2VhcmNoIGFjdHVhbGx5XHJcblx0XHRcdC8vIGFyZVxyXG5cdFx0XHRmb3IgKCBpPXNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LCBpZW49c2V0dGluZ3MuZm5EaXNwbGF5RW5kKCkgOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRhLnB1c2goIGRpc3BsYXlGaWx0ZXJlZFtpXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggb3JkZXIgPT0gJ2N1cnJlbnQnIHx8IG9yZGVyID09ICdhcHBsaWVkJyApIHtcclxuXHRcdFx0YSA9IHNlYXJjaCA9PSAnbm9uZScgP1xyXG5cdFx0XHRcdGRpc3BsYXlNYXN0ZXIuc2xpY2UoKSA6ICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHNlYXJjaFxyXG5cdFx0XHRcdHNlYXJjaCA9PSAnYXBwbGllZCcgP1xyXG5cdFx0XHRcdFx0ZGlzcGxheUZpbHRlcmVkLnNsaWNlKCkgOiAgICAgICAgICAgICAgICAvLyBhcHBsaWVkIHNlYXJjaFxyXG5cdFx0XHRcdFx0JC5tYXAoIGRpc3BsYXlNYXN0ZXIsIGZ1bmN0aW9uIChlbCwgaSkgeyAvLyByZW1vdmVkIHNlYXJjaFxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJC5pbkFycmF5KCBlbCwgZGlzcGxheUZpbHRlcmVkICkgPT09IC0xID8gZWwgOiBudWxsO1xyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIG9yZGVyID09ICdpbmRleCcgfHwgb3JkZXIgPT0gJ29yaWdpbmFsJyApIHtcclxuXHRcdFx0Zm9yICggaT0wLCBpZW49c2V0dGluZ3MuYW9EYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggc2VhcmNoID09ICdub25lJyApIHtcclxuXHRcdFx0XHRcdGEucHVzaCggaSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHsgLy8gYXBwbGllZCB8IHJlbW92ZWRcclxuXHRcdFx0XHRcdHRtcCA9ICQuaW5BcnJheSggaSwgZGlzcGxheUZpbHRlcmVkICk7XHJcblx0XHJcblx0XHRcdFx0XHRpZiAoKHRtcCA9PT0gLTEgJiYgc2VhcmNoID09ICdyZW1vdmVkJykgfHxcclxuXHRcdFx0XHRcdFx0KHRtcCA+PSAwICAgJiYgc2VhcmNoID09ICdhcHBsaWVkJykgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRhLnB1c2goIGkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiBhO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0LyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXHJcblx0ICogUm93c1xyXG5cdCAqXHJcblx0ICoge30gICAgICAgICAgLSBubyBzZWxlY3RvciAtIHVzZSBhbGwgYXZhaWxhYmxlIHJvd3NcclxuXHQgKiB7aW50ZWdlcn0gICAtIHJvdyBhb0RhdGEgaW5kZXhcclxuXHQgKiB7bm9kZX0gICAgICAtIFRSIG5vZGVcclxuXHQgKiB7c3RyaW5nfSAgICAtIGpRdWVyeSBzZWxlY3RvciB0byBhcHBseSB0byB0aGUgVFIgZWxlbWVudHNcclxuXHQgKiB7YXJyYXl9ICAgICAtIGpRdWVyeSBhcnJheSBvZiBub2Rlcywgb3Igc2ltcGx5IGFuIGFycmF5IG9mIFRSIG5vZGVzXHJcblx0ICpcclxuXHQgKi9cclxuXHRcclxuXHRcclxuXHR2YXIgX19yb3dfc2VsZWN0b3IgPSBmdW5jdGlvbiAoIHNldHRpbmdzLCBzZWxlY3Rvciwgb3B0cyApXHJcblx0e1xyXG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uICggc2VsICkge1xyXG5cdFx0XHR2YXIgc2VsSW50ID0gX2ludFZhbCggc2VsICk7XHJcblx0XHRcdHZhciBpLCBpZW47XHJcblx0XHJcblx0XHRcdC8vIFNob3J0IGN1dCAtIHNlbGVjdG9yIGlzIGEgbnVtYmVyIGFuZCBubyBvcHRpb25zIHByb3ZpZGVkIChkZWZhdWx0IGlzXHJcblx0XHRcdC8vIGFsbCByZWNvcmRzLCBzbyBubyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBpbmRleCBpcyBpbiB0aGVyZSwgc2luY2UgaXRcclxuXHRcdFx0Ly8gbXVzdCBiZSAtIGRldiBlcnJvciBpZiB0aGUgaW5kZXggZG9lc24ndCBleGlzdCkuXHJcblx0XHRcdGlmICggc2VsSW50ICE9PSBudWxsICYmICEgb3B0cyApIHtcclxuXHRcdFx0XHRyZXR1cm4gWyBzZWxJbnQgXTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHR2YXIgcm93cyA9IF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyggc2V0dGluZ3MsIG9wdHMgKTtcclxuXHRcclxuXHRcdFx0aWYgKCBzZWxJbnQgIT09IG51bGwgJiYgJC5pbkFycmF5KCBzZWxJbnQsIHJvd3MgKSAhPT0gLTEgKSB7XHJcblx0XHRcdFx0Ly8gU2VsZWN0b3IgLSBpbnRlZ2VyXHJcblx0XHRcdFx0cmV0dXJuIFsgc2VsSW50IF07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoICEgc2VsICkge1xyXG5cdFx0XHRcdC8vIFNlbGVjdG9yIC0gbm9uZVxyXG5cdFx0XHRcdHJldHVybiByb3dzO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIFNlbGVjdG9yIC0gZnVuY3Rpb25cclxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsID09PSAnZnVuY3Rpb24nICkge1xyXG5cdFx0XHRcdHJldHVybiAkLm1hcCggcm93cywgZnVuY3Rpb24gKGlkeCkge1xyXG5cdFx0XHRcdFx0dmFyIHJvdyA9IHNldHRpbmdzLmFvRGF0YVsgaWR4IF07XHJcblx0XHRcdFx0XHRyZXR1cm4gc2VsKCBpZHgsIHJvdy5fYURhdGEsIHJvdy5uVHIgKSA/IGlkeCA6IG51bGw7XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIEdldCBub2RlcyBpbiB0aGUgb3JkZXIgZnJvbSB0aGUgYHJvd3NgIGFycmF5IHdpdGggbnVsbCB2YWx1ZXMgcmVtb3ZlZFxyXG5cdFx0XHR2YXIgbm9kZXMgPSBfcmVtb3ZlRW1wdHkoXHJcblx0XHRcdFx0X3BsdWNrX29yZGVyKCBzZXR0aW5ncy5hb0RhdGEsIHJvd3MsICduVHInIClcclxuXHRcdFx0KTtcclxuXHRcclxuXHRcdFx0Ly8gU2VsZWN0b3IgLSBub2RlXHJcblx0XHRcdGlmICggc2VsLm5vZGVOYW1lICkge1xyXG5cdFx0XHRcdGlmICggc2VsLl9EVF9Sb3dJbmRleCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFsgc2VsLl9EVF9Sb3dJbmRleCBdOyAvLyBQcm9wZXJ0eSBhZGRlZCBieSBEVCBmb3IgZmFzdCBsb29rdXBcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoIHNlbC5fRFRfQ2VsbEluZGV4ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFsgc2VsLl9EVF9DZWxsSW5kZXgucm93IF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIGhvc3QgPSAkKHNlbCkuY2xvc2VzdCgnKltkYXRhLWR0LXJvd10nKTtcclxuXHRcdFx0XHRcdHJldHVybiBob3N0Lmxlbmd0aCA/XHJcblx0XHRcdFx0XHRcdFsgaG9zdC5kYXRhKCdkdC1yb3cnKSBdIDpcclxuXHRcdFx0XHRcdFx0W107XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIElEIHNlbGVjdG9yLiBXYW50IHRvIGFsd2F5cyBiZSBhYmxlIHRvIHNlbGVjdCByb3dzIGJ5IGlkLCByZWdhcmRsZXNzXHJcblx0XHRcdC8vIG9mIGlmIHRoZSB0ciBlbGVtZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3Igbm90LCBzbyBjYW4ndCByZWx5IHVwb25cclxuXHRcdFx0Ly8galF1ZXJ5IGhlcmUgLSBoZW5jZSBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi4gVGhpcyBkb2VzIG5vdCBtYXRjaFxyXG5cdFx0XHQvLyBTaXp6bGUncyBmYXN0IHNlbGVjdG9yIG9yIEhUTUw0IC0gaW4gSFRNTDUgdGhlIElEIGNhbiBiZSBhbnl0aGluZyxcclxuXHRcdFx0Ly8gYnV0IHRvIHNlbGVjdCBpdCB1c2luZyBhIENTUyBzZWxlY3RvciBlbmdpbmUgKGxpa2UgU2l6emxlIG9yXHJcblx0XHRcdC8vIHF1ZXJ5U2VsZWN0KSBpdCB3b3VsZCBuZWVkIHRvIG5lZWQgdG8gYmUgZXNjYXBlZCBmb3Igc29tZSBjaGFyYWN0ZXJzLlxyXG5cdFx0XHQvLyBEYXRhVGFibGVzIHNpbXBsaWZpZXMgdGhpcyBmb3Igcm93IHNlbGVjdG9ycyBzaW5jZSB5b3UgY2FuIHNlbGVjdFxyXG5cdFx0XHQvLyBvbmx5IGEgcm93LiBBICMgaW5kaWNhdGVzIGFuIGlkIGFueSBhbnl0aGluZyB0aGF0IGZvbGxvd3MgaXMgdGhlIGlkIC1cclxuXHRcdFx0Ly8gdW5lc2NhcGVkLlxyXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWwgPT09ICdzdHJpbmcnICYmIHNlbC5jaGFyQXQoMCkgPT09ICcjJyApIHtcclxuXHRcdFx0XHQvLyBnZXQgcm93IGluZGV4IGZyb20gaWRcclxuXHRcdFx0XHR2YXIgcm93T2JqID0gc2V0dGluZ3MuYUlkc1sgc2VsLnJlcGxhY2UoIC9eIy8sICcnICkgXTtcclxuXHRcdFx0XHRpZiAoIHJvd09iaiAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFsgcm93T2JqLmlkeCBdO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHQvLyBuZWVkIHRvIGZhbGwgdGhyb3VnaCB0byBqUXVlcnkgaW4gY2FzZSB0aGVyZSBpcyBET00gaWQgdGhhdFxyXG5cdFx0XHRcdC8vIG1hdGNoZXNcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBTZWxlY3RvciAtIGpRdWVyeSBzZWxlY3RvciBzdHJpbmcsIGFycmF5IG9mIG5vZGVzIG9yIGpRdWVyeSBvYmplY3QvXHJcblx0XHRcdC8vIEFzIGpRdWVyeSdzIC5maWx0ZXIoKSBhbGxvd3MgalF1ZXJ5IG9iamVjdHMgdG8gYmUgcGFzc2VkIGluIGZpbHRlcixcclxuXHRcdFx0Ly8gaXQgYWxzbyBhbGxvd3MgYXJyYXlzLCBzbyB0aGlzIHdpbGwgY29wZSB3aXRoIGFsbCB0aHJlZSBvcHRpb25zXHJcblx0XHRcdHJldHVybiAkKG5vZGVzKVxyXG5cdFx0XHRcdC5maWx0ZXIoIHNlbCApXHJcblx0XHRcdFx0Lm1hcCggZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuX0RUX1Jvd0luZGV4O1xyXG5cdFx0XHRcdH0gKVxyXG5cdFx0XHRcdC50b0FycmF5KCk7XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0cmV0dXJuIF9zZWxlY3Rvcl9ydW4oICdyb3cnLCBzZWxlY3RvciwgcnVuLCBzZXR0aW5ncywgb3B0cyApO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ3Jvd3MoKScsIGZ1bmN0aW9uICggc2VsZWN0b3IsIG9wdHMgKSB7XHJcblx0XHQvLyBhcmd1bWVudCBzaGlmdGluZ1xyXG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRzZWxlY3RvciA9ICcnO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoICQuaXNQbGFpbk9iamVjdCggc2VsZWN0b3IgKSApIHtcclxuXHRcdFx0b3B0cyA9IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9ICcnO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0b3B0cyA9IF9zZWxlY3Rvcl9vcHRzKCBvcHRzICk7XHJcblx0XHJcblx0XHR2YXIgaW5zdCA9IHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdHJldHVybiBfX3Jvd19zZWxlY3Rvciggc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzICk7XHJcblx0XHR9LCAxICk7XHJcblx0XHJcblx0XHQvLyBXYW50IGFyZ3VtZW50IHNoaWZ0aW5nIGhlcmUgYW5kIGluIF9fcm93X3NlbGVjdG9yP1xyXG5cdFx0aW5zdC5zZWxlY3Rvci5yb3dzID0gc2VsZWN0b3I7XHJcblx0XHRpbnN0LnNlbGVjdG9yLm9wdHMgPSBvcHRzO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGluc3Q7XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdyb3dzKCkubm9kZXMoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAncm93JywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93ICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MuYW9EYXRhWyByb3cgXS5uVHIgfHwgdW5kZWZpbmVkO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAncm93cygpLmRhdGEoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCB0cnVlLCAncm93cycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvd3MgKSB7XHJcblx0XHRcdHJldHVybiBfcGx1Y2tfb3JkZXIoIHNldHRpbmdzLmFvRGF0YSwgcm93cywgJ19hRGF0YScgKTtcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3Jvd3MoKS5jYWNoZSgpJywgJ3JvdygpLmNhY2hlKCknLCBmdW5jdGlvbiAoIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3JvdycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdyApIHtcclxuXHRcdFx0dmFyIHIgPSBzZXR0aW5ncy5hb0RhdGFbIHJvdyBdO1xyXG5cdFx0XHRyZXR1cm4gdHlwZSA9PT0gJ3NlYXJjaCcgPyByLl9hRmlsdGVyRGF0YSA6IHIuX2FTb3J0RGF0YTtcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3Jvd3MoKS5pbnZhbGlkYXRlKCknLCAncm93KCkuaW52YWxpZGF0ZSgpJywgZnVuY3Rpb24gKCBzcmMgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3JvdycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdyApIHtcclxuXHRcdFx0X2ZuSW52YWxpZGF0ZSggc2V0dGluZ3MsIHJvdywgc3JjICk7XHJcblx0XHR9ICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdyb3dzKCkuaW5kZXhlcygpJywgJ3JvdygpLmluZGV4KCknLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3JvdycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdyApIHtcclxuXHRcdFx0cmV0dXJuIHJvdztcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ3Jvd3MoKS5pZHMoKScsICdyb3coKS5pZCgpJywgZnVuY3Rpb24gKCBoYXNoICkge1xyXG5cdFx0dmFyIGEgPSBbXTtcclxuXHRcdHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cdFxyXG5cdFx0Ly8gYGl0ZXJhdG9yYCB3aWxsIGRyb3AgdW5kZWZpbmVkIHZhbHVlcywgYnV0IGluIHRoaXMgY2FzZSB3ZSB3YW50IHRoZW1cclxuXHRcdGZvciAoIHZhciBpPTAsIGllbj1jb250ZXh0Lmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRmb3IgKCB2YXIgaj0wLCBqZW49dGhpc1tpXS5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcclxuXHRcdFx0XHR2YXIgaWQgPSBjb250ZXh0W2ldLnJvd0lkRm4oIGNvbnRleHRbaV0uYW9EYXRhWyB0aGlzW2ldW2pdIF0uX2FEYXRhICk7XHJcblx0XHRcdFx0YS5wdXNoKCAoaGFzaCA9PT0gdHJ1ZSA/ICcjJyA6ICcnICkrIGlkICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiBuZXcgX0FwaSggY29udGV4dCwgYSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAncm93cygpLnJlbW92ZSgpJywgJ3JvdygpLnJlbW92ZSgpJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cdFxyXG5cdFx0dGhpcy5pdGVyYXRvciggJ3JvdycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdywgdGhhdElkeCApIHtcclxuXHRcdFx0dmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XHJcblx0XHRcdHZhciByb3dEYXRhID0gZGF0YVsgcm93IF07XHJcblx0XHRcdHZhciBpLCBpZW4sIGosIGplbjtcclxuXHRcdFx0dmFyIGxvb3BSb3csIGxvb3BDZWxscztcclxuXHRcclxuXHRcdFx0ZGF0YS5zcGxpY2UoIHJvdywgMSApO1xyXG5cdFxyXG5cdFx0XHQvLyBVcGRhdGUgdGhlIGNhY2hlZCBpbmRleGVzXHJcblx0XHRcdGZvciAoIGk9MCwgaWVuPWRhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0bG9vcFJvdyA9IGRhdGFbaV07XHJcblx0XHRcdFx0bG9vcENlbGxzID0gbG9vcFJvdy5hbkNlbGxzO1xyXG5cdFxyXG5cdFx0XHRcdC8vIFJvd3NcclxuXHRcdFx0XHRpZiAoIGxvb3BSb3cublRyICE9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0bG9vcFJvdy5uVHIuX0RUX1Jvd0luZGV4ID0gaTtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Ly8gQ2VsbHNcclxuXHRcdFx0XHRpZiAoIGxvb3BDZWxscyAhPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdGZvciAoIGo9MCwgamVuPWxvb3BDZWxscy5sZW5ndGggOyBqPGplbiA7IGorKyApIHtcclxuXHRcdFx0XHRcdFx0bG9vcENlbGxzW2pdLl9EVF9DZWxsSW5kZXgucm93ID0gaTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gRGVsZXRlIGZyb20gdGhlIGRpc3BsYXkgYXJyYXlzXHJcblx0XHRcdF9mbkRlbGV0ZUluZGV4KCBzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXIsIHJvdyApO1xyXG5cdFx0XHRfZm5EZWxldGVJbmRleCggc2V0dGluZ3MuYWlEaXNwbGF5LCByb3cgKTtcclxuXHRcdFx0X2ZuRGVsZXRlSW5kZXgoIHRoYXRbIHRoYXRJZHggXSwgcm93LCBmYWxzZSApOyAvLyBtYWludGFpbiBsb2NhbCBpbmRleGVzXHJcblx0XHJcblx0XHRcdC8vIENoZWNrIGZvciBhbiAnb3ZlcmZsb3cnIHRoZXkgY2FzZSBmb3IgZGlzcGxheWluZyB0aGUgdGFibGVcclxuXHRcdFx0X2ZuTGVuZ3RoT3ZlcmZsb3coIHNldHRpbmdzICk7XHJcblx0XHJcblx0XHRcdC8vIFJlbW92ZSB0aGUgcm93J3MgSUQgcmVmZXJlbmNlIGlmIHRoZXJlIGlzIG9uZVxyXG5cdFx0XHR2YXIgaWQgPSBzZXR0aW5ncy5yb3dJZEZuKCByb3dEYXRhLl9hRGF0YSApO1xyXG5cdFx0XHRpZiAoIGlkICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0ZGVsZXRlIHNldHRpbmdzLmFJZHNbIGlkIF07XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcclxuXHRcdHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdGZvciAoIHZhciBpPTAsIGllbj1zZXR0aW5ncy5hb0RhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0c2V0dGluZ3MuYW9EYXRhW2ldLmlkeCA9IGk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAncm93cy5hZGQoKScsIGZ1bmN0aW9uICggcm93cyApIHtcclxuXHRcdHZhciBuZXdSb3dzID0gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcclxuXHRcdFx0XHR2YXIgcm93LCBpLCBpZW47XHJcblx0XHRcdFx0dmFyIG91dCA9IFtdO1xyXG5cdFxyXG5cdFx0XHRcdGZvciAoIGk9MCwgaWVuPXJvd3MubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0XHRyb3cgPSByb3dzW2ldO1xyXG5cdFxyXG5cdFx0XHRcdFx0aWYgKCByb3cubm9kZU5hbWUgJiYgcm93Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdUUicgKSB7XHJcblx0XHRcdFx0XHRcdG91dC5wdXNoKCBfZm5BZGRUciggc2V0dGluZ3MsIHJvdyApWzBdICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0b3V0LnB1c2goIF9mbkFkZERhdGEoIHNldHRpbmdzLCByb3cgKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRyZXR1cm4gb3V0O1xyXG5cdFx0XHR9LCAxICk7XHJcblx0XHJcblx0XHQvLyBSZXR1cm4gYW4gQXBpLnJvd3MoKSBleHRlbmRlZCBpbnN0YW5jZSwgc28gcm93cygpLm5vZGVzKCkgZXRjIGNhbiBiZSB1c2VkXHJcblx0XHR2YXIgbW9kUm93cyA9IHRoaXMucm93cyggLTEgKTtcclxuXHRcdG1vZFJvd3MucG9wKCk7XHJcblx0XHQkLm1lcmdlKCBtb2RSb3dzLCBuZXdSb3dzICk7XHJcblx0XHJcblx0XHRyZXR1cm4gbW9kUm93cztcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRfYXBpX3JlZ2lzdGVyKCAncm93KCknLCBmdW5jdGlvbiAoIHNlbGVjdG9yLCBvcHRzICkge1xyXG5cdFx0cmV0dXJuIF9zZWxlY3Rvcl9maXJzdCggdGhpcy5yb3dzKCBzZWxlY3Rvciwgb3B0cyApICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdyb3coKS5kYXRhKCknLCBmdW5jdGlvbiAoIGRhdGEgKSB7XHJcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xyXG5cdFxyXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdC8vIEdldFxyXG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCA/XHJcblx0XHRcdFx0Y3R4WzBdLmFvRGF0YVsgdGhpc1swXSBdLl9hRGF0YSA6XHJcblx0XHRcdFx0dW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gU2V0XHJcblx0XHRjdHhbMF0uYW9EYXRhWyB0aGlzWzBdIF0uX2FEYXRhID0gZGF0YTtcclxuXHRcclxuXHRcdC8vIEF1dG9tYXRpY2FsbHkgaW52YWxpZGF0ZVxyXG5cdFx0X2ZuSW52YWxpZGF0ZSggY3R4WzBdLCB0aGlzWzBdLCAnZGF0YScgKTtcclxuXHRcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAncm93KCkubm9kZSgpJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcclxuXHRcclxuXHRcdHJldHVybiBjdHgubGVuZ3RoICYmIHRoaXMubGVuZ3RoID9cclxuXHRcdFx0Y3R4WzBdLmFvRGF0YVsgdGhpc1swXSBdLm5UciB8fCBudWxsIDpcclxuXHRcdFx0bnVsbDtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ3Jvdy5hZGQoKScsIGZ1bmN0aW9uICggcm93ICkge1xyXG5cdFx0Ly8gQWxsb3cgYSBqUXVlcnkgb2JqZWN0IHRvIGJlIHBhc3NlZCBpbiAtIG9ubHkgYSBzaW5nbGUgcm93IGlzIGFkZGVkIGZyb21cclxuXHRcdC8vIGl0IHRob3VnaCAtIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXRcclxuXHRcdGlmICggcm93IGluc3RhbmNlb2YgJCAmJiByb3cubGVuZ3RoICkge1xyXG5cdFx0XHRyb3cgPSByb3dbMF07XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgcm93cyA9IHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdGlmICggcm93Lm5vZGVOYW1lICYmIHJvdy5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnVFInICkge1xyXG5cdFx0XHRcdHJldHVybiBfZm5BZGRUciggc2V0dGluZ3MsIHJvdyApWzBdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBfZm5BZGREYXRhKCBzZXR0aW5ncywgcm93ICk7XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHQvLyBSZXR1cm4gYW4gQXBpLnJvd3MoKSBleHRlbmRlZCBpbnN0YW5jZSwgd2l0aCB0aGUgbmV3bHkgYWRkZWQgcm93IHNlbGVjdGVkXHJcblx0XHRyZXR1cm4gdGhpcy5yb3coIHJvd3NbMF0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0dmFyIF9fZGV0YWlsc19hZGQgPSBmdW5jdGlvbiAoIGN0eCwgcm93LCBkYXRhLCBrbGFzcyApXHJcblx0e1xyXG5cdFx0Ly8gQ29udmVydCB0byBhcnJheSBvZiBUUiBlbGVtZW50c1xyXG5cdFx0dmFyIHJvd3MgPSBbXTtcclxuXHRcdHZhciBhZGRSb3cgPSBmdW5jdGlvbiAoIHIsIGsgKSB7XHJcblx0XHRcdC8vIFJlY3Vyc2lvbiB0byBhbGxvdyBmb3IgYXJyYXlzIG9mIGpRdWVyeSBvYmplY3RzXHJcblx0XHRcdGlmICggJC5pc0FycmF5KCByICkgfHwgciBpbnN0YW5jZW9mICQgKSB7XHJcblx0XHRcdFx0Zm9yICggdmFyIGk9MCwgaWVuPXIubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0XHRhZGRSb3coIHJbaV0sIGsgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIElmIHdlIGdldCBhIFRSIGVsZW1lbnQsIHRoZW4ganVzdCBhZGQgaXQgZGlyZWN0bHkgLSB1cCB0byB0aGUgZGV2XHJcblx0XHRcdC8vIHRvIGFkZCB0aGUgY29ycmVjdCBudW1iZXIgb2YgY29sdW1ucyBldGNcclxuXHRcdFx0aWYgKCByLm5vZGVOYW1lICYmIHIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RyJyApIHtcclxuXHRcdFx0XHRyb3dzLnB1c2goIHIgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgY3JlYXRlIGEgcm93IHdpdGggYSB3cmFwcGVyXHJcblx0XHRcdFx0dmFyIGNyZWF0ZWQgPSAkKCc8dHI+PHRkLz48L3RyPicpLmFkZENsYXNzKCBrICk7XHJcblx0XHRcdFx0JCgndGQnLCBjcmVhdGVkKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKCBrIClcclxuXHRcdFx0XHRcdC5odG1sKCByIClcclxuXHRcdFx0XHRcdFswXS5jb2xTcGFuID0gX2ZuVmlzYmxlQ29sdW1ucyggY3R4ICk7XHJcblx0XHJcblx0XHRcdFx0cm93cy5wdXNoKCBjcmVhdGVkWzBdICk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHJcblx0XHRhZGRSb3coIGRhdGEsIGtsYXNzICk7XHJcblx0XHJcblx0XHRpZiAoIHJvdy5fZGV0YWlscyApIHtcclxuXHRcdFx0cm93Ll9kZXRhaWxzLnJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cm93Ll9kZXRhaWxzID0gJChyb3dzKTtcclxuXHRcclxuXHRcdC8vIElmIHRoZSBjaGlsZHJlbiB3ZXJlIGFscmVhZHkgc2hvd24sIHRoYXQgc3RhdGUgc2hvdWxkIGJlIHJldGFpbmVkXHJcblx0XHRpZiAoIHJvdy5fZGV0YWlsc1Nob3cgKSB7XHJcblx0XHRcdHJvdy5fZGV0YWlscy5pbnNlcnRBZnRlciggcm93Lm5UciApO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0XHJcblx0dmFyIF9fZGV0YWlsc19yZW1vdmUgPSBmdW5jdGlvbiAoIGFwaSwgaWR4IClcclxuXHR7XHJcblx0XHR2YXIgY3R4ID0gYXBpLmNvbnRleHQ7XHJcblx0XHJcblx0XHRpZiAoIGN0eC5sZW5ndGggKSB7XHJcblx0XHRcdHZhciByb3cgPSBjdHhbMF0uYW9EYXRhWyBpZHggIT09IHVuZGVmaW5lZCA/IGlkeCA6IGFwaVswXSBdO1xyXG5cdFxyXG5cdFx0XHRpZiAoIHJvdyAmJiByb3cuX2RldGFpbHMgKSB7XHJcblx0XHRcdFx0cm93Ll9kZXRhaWxzLnJlbW92ZSgpO1xyXG5cdFxyXG5cdFx0XHRcdHJvdy5fZGV0YWlsc1Nob3cgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0cm93Ll9kZXRhaWxzID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHR2YXIgX19kZXRhaWxzX2Rpc3BsYXkgPSBmdW5jdGlvbiAoIGFwaSwgc2hvdyApIHtcclxuXHRcdHZhciBjdHggPSBhcGkuY29udGV4dDtcclxuXHRcclxuXHRcdGlmICggY3R4Lmxlbmd0aCAmJiBhcGkubGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgcm93ID0gY3R4WzBdLmFvRGF0YVsgYXBpWzBdIF07XHJcblx0XHJcblx0XHRcdGlmICggcm93Ll9kZXRhaWxzICkge1xyXG5cdFx0XHRcdHJvdy5fZGV0YWlsc1Nob3cgPSBzaG93O1xyXG5cdFxyXG5cdFx0XHRcdGlmICggc2hvdyApIHtcclxuXHRcdFx0XHRcdHJvdy5fZGV0YWlscy5pbnNlcnRBZnRlciggcm93Lm5UciApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHJvdy5fZGV0YWlscy5kZXRhY2goKTtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0X19kZXRhaWxzX2V2ZW50cyggY3R4WzBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfX2RldGFpbHNfZXZlbnRzID0gZnVuY3Rpb24gKCBzZXR0aW5ncyApXHJcblx0e1xyXG5cdFx0dmFyIGFwaSA9IG5ldyBfQXBpKCBzZXR0aW5ncyApO1xyXG5cdFx0dmFyIG5hbWVzcGFjZSA9ICcuZHQuRFRfZGV0YWlscyc7XHJcblx0XHR2YXIgZHJhd0V2ZW50ID0gJ2RyYXcnK25hbWVzcGFjZTtcclxuXHRcdHZhciBjb2x2aXNFdmVudCA9ICdjb2x1bW4tdmlzaWJpbGl0eScrbmFtZXNwYWNlO1xyXG5cdFx0dmFyIGRlc3Ryb3lFdmVudCA9ICdkZXN0cm95JytuYW1lc3BhY2U7XHJcblx0XHR2YXIgZGF0YSA9IHNldHRpbmdzLmFvRGF0YTtcclxuXHRcclxuXHRcdGFwaS5vZmYoIGRyYXdFdmVudCArJyAnKyBjb2x2aXNFdmVudCArJyAnKyBkZXN0cm95RXZlbnQgKTtcclxuXHRcclxuXHRcdGlmICggX3BsdWNrKCBkYXRhLCAnX2RldGFpbHMnICkubGVuZ3RoID4gMCApIHtcclxuXHRcdFx0Ly8gT24gZWFjaCBkcmF3LCBpbnNlcnQgdGhlIHJlcXVpcmVkIGVsZW1lbnRzIGludG8gdGhlIGRvY3VtZW50XHJcblx0XHRcdGFwaS5vbiggZHJhd0V2ZW50LCBmdW5jdGlvbiAoIGUsIGN0eCApIHtcclxuXHRcdFx0XHRpZiAoIHNldHRpbmdzICE9PSBjdHggKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdGFwaS5yb3dzKCB7cGFnZTonY3VycmVudCd9ICkuZXEoMCkuZWFjaCggZnVuY3Rpb24gKGlkeCkge1xyXG5cdFx0XHRcdFx0Ly8gSW50ZXJuYWwgZGF0YSBncmFiXHJcblx0XHRcdFx0XHR2YXIgcm93ID0gZGF0YVsgaWR4IF07XHJcblx0XHJcblx0XHRcdFx0XHRpZiAoIHJvdy5fZGV0YWlsc1Nob3cgKSB7XHJcblx0XHRcdFx0XHRcdHJvdy5fZGV0YWlscy5pbnNlcnRBZnRlciggcm93Lm5UciApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fSApO1xyXG5cdFxyXG5cdFx0XHQvLyBDb2x1bW4gdmlzaWJpbGl0eSBjaGFuZ2UgLSB1cGRhdGUgdGhlIGNvbHNwYW5cclxuXHRcdFx0YXBpLm9uKCBjb2x2aXNFdmVudCwgZnVuY3Rpb24gKCBlLCBjdHgsIGlkeCwgdmlzICkge1xyXG5cdFx0XHRcdGlmICggc2V0dGluZ3MgIT09IGN0eCApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBjb2xzcGFuIGZvciB0aGUgZGV0YWlscyByb3dzIChub3RlLCBvbmx5IGlmIGl0IGFscmVhZHkgaGFzXHJcblx0XHRcdFx0Ly8gYSBjb2xzcGFuKVxyXG5cdFx0XHRcdHZhciByb3csIHZpc2libGUgPSBfZm5WaXNibGVDb2x1bW5zKCBjdHggKTtcclxuXHRcclxuXHRcdFx0XHRmb3IgKCB2YXIgaT0wLCBpZW49ZGF0YS5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRcdHJvdyA9IGRhdGFbaV07XHJcblx0XHJcblx0XHRcdFx0XHRpZiAoIHJvdy5fZGV0YWlscyApIHtcclxuXHRcdFx0XHRcdFx0cm93Ll9kZXRhaWxzLmNoaWxkcmVuKCd0ZFtjb2xzcGFuXScpLmF0dHIoJ2NvbHNwYW4nLCB2aXNpYmxlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHJcblx0XHRcdC8vIFRhYmxlIGRlc3Ryb3llZCAtIG51a2UgYW55IGNoaWxkIHJvd3NcclxuXHRcdFx0YXBpLm9uKCBkZXN0cm95RXZlbnQsIGZ1bmN0aW9uICggZSwgY3R4ICkge1xyXG5cdFx0XHRcdGlmICggc2V0dGluZ3MgIT09IGN0eCApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Zm9yICggdmFyIGk9MCwgaWVuPWRhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGFbaV0uX2RldGFpbHMgKSB7XHJcblx0XHRcdFx0XHRcdF9fZGV0YWlsc19yZW1vdmUoIGFwaSwgaSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0Ly8gU3RyaW5ncyBmb3IgdGhlIG1ldGhvZCBuYW1lcyB0byBoZWxwIG1pbmlmaWNhdGlvblxyXG5cdHZhciBfZW1wID0gJyc7XHJcblx0dmFyIF9jaGlsZF9vYmogPSBfZW1wKydyb3coKS5jaGlsZCc7XHJcblx0dmFyIF9jaGlsZF9tdGggPSBfY2hpbGRfb2JqKycoKSc7XHJcblx0XHJcblx0Ly8gZGF0YSBjYW4gYmU6XHJcblx0Ly8gIHRyXHJcblx0Ly8gIHN0cmluZ1xyXG5cdC8vICBqUXVlcnkgb3IgYXJyYXkgb2YgYW55IG9mIHRoZSBhYm92ZVxyXG5cdF9hcGlfcmVnaXN0ZXIoIF9jaGlsZF9tdGgsIGZ1bmN0aW9uICggZGF0YSwga2xhc3MgKSB7XHJcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xyXG5cdFxyXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdC8vIGdldFxyXG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCA/XHJcblx0XHRcdFx0Y3R4WzBdLmFvRGF0YVsgdGhpc1swXSBdLl9kZXRhaWxzIDpcclxuXHRcdFx0XHR1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggZGF0YSA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0Ly8gc2hvd1xyXG5cdFx0XHR0aGlzLmNoaWxkLnNob3coKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBkYXRhID09PSBmYWxzZSApIHtcclxuXHRcdFx0Ly8gcmVtb3ZlXHJcblx0XHRcdF9fZGV0YWlsc19yZW1vdmUoIHRoaXMgKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBjdHgubGVuZ3RoICYmIHRoaXMubGVuZ3RoICkge1xyXG5cdFx0XHQvLyBzZXRcclxuXHRcdFx0X19kZXRhaWxzX2FkZCggY3R4WzBdLCBjdHhbMF0uYW9EYXRhWyB0aGlzWzBdIF0sIGRhdGEsIGtsYXNzICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggW1xyXG5cdFx0X2NoaWxkX29iaisnLnNob3coKScsXHJcblx0XHRfY2hpbGRfbXRoKycuc2hvdygpJyAvLyBvbmx5IHdoZW4gYGNoaWxkKClgIHdhcyBjYWxsZWQgd2l0aCBwYXJhbWV0ZXJzICh3aXRob3V0XHJcblx0XSwgZnVuY3Rpb24gKCBzaG93ICkgeyAgIC8vIGl0IHJldHVybnMgYW4gb2JqZWN0IGFuZCB0aGlzIG1ldGhvZCBpcyBub3QgZXhlY3V0ZWQpXHJcblx0XHRfX2RldGFpbHNfZGlzcGxheSggdGhpcywgdHJ1ZSApO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoIFtcclxuXHRcdF9jaGlsZF9vYmorJy5oaWRlKCknLFxyXG5cdFx0X2NoaWxkX210aCsnLmhpZGUoKScgLy8gb25seSB3aGVuIGBjaGlsZCgpYCB3YXMgY2FsbGVkIHdpdGggcGFyYW1ldGVycyAod2l0aG91dFxyXG5cdF0sIGZ1bmN0aW9uICgpIHsgICAgICAgICAvLyBpdCByZXR1cm5zIGFuIG9iamVjdCBhbmQgdGhpcyBtZXRob2QgaXMgbm90IGV4ZWN1dGVkKVxyXG5cdFx0X19kZXRhaWxzX2Rpc3BsYXkoIHRoaXMsIGZhbHNlICk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggW1xyXG5cdFx0X2NoaWxkX29iaisnLnJlbW92ZSgpJyxcclxuXHRcdF9jaGlsZF9tdGgrJy5yZW1vdmUoKScgLy8gb25seSB3aGVuIGBjaGlsZCgpYCB3YXMgY2FsbGVkIHdpdGggcGFyYW1ldGVycyAod2l0aG91dFxyXG5cdF0sIGZ1bmN0aW9uICgpIHsgICAgICAgICAgIC8vIGl0IHJldHVybnMgYW4gb2JqZWN0IGFuZCB0aGlzIG1ldGhvZCBpcyBub3QgZXhlY3V0ZWQpXHJcblx0XHRfX2RldGFpbHNfcmVtb3ZlKCB0aGlzICk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggX2NoaWxkX29iaisnLmlzU2hvd24oKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XHJcblx0XHJcblx0XHRpZiAoIGN0eC5sZW5ndGggJiYgdGhpcy5sZW5ndGggKSB7XHJcblx0XHRcdC8vIF9kZXRhaWxzU2hvd24gYXMgZmFsc2Ugb3IgdW5kZWZpbmVkIHdpbGwgZmFsbCB0aHJvdWdoIHRvIHJldHVybiBmYWxzZVxyXG5cdFx0XHRyZXR1cm4gY3R4WzBdLmFvRGF0YVsgdGhpc1swXSBdLl9kZXRhaWxzU2hvdyB8fCBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXHJcblx0ICogQ29sdW1uc1xyXG5cdCAqXHJcblx0ICoge2ludGVnZXJ9ICAgICAgICAgICAtIGNvbHVtbiBpbmRleCAoPj0wIGNvdW50IGZyb20gbGVmdCwgPDAgY291bnQgZnJvbSByaWdodClcclxuXHQgKiBcIntpbnRlZ2VyfTp2aXNJZHhcIiAgLSB2aXNpYmxlIGNvbHVtbiBpbmRleCAoaS5lLiB0cmFuc2xhdGUgdG8gY29sdW1uIGluZGV4KSAgKD49MCBjb3VudCBmcm9tIGxlZnQsIDwwIGNvdW50IGZyb20gcmlnaHQpXHJcblx0ICogXCJ7aW50ZWdlcn06dmlzaWJsZVwiIC0gYWxpYXMgZm9yIHtpbnRlZ2VyfTp2aXNJZHggICg+PTAgY291bnQgZnJvbSBsZWZ0LCA8MCBjb3VudCBmcm9tIHJpZ2h0KVxyXG5cdCAqIFwie3N0cmluZ306bmFtZVwiICAgICAtIGNvbHVtbiBuYW1lXHJcblx0ICogXCJ7c3RyaW5nfVwiICAgICAgICAgIC0galF1ZXJ5IHNlbGVjdG9yIG9uIGNvbHVtbiBoZWFkZXIgbm9kZXNcclxuXHQgKlxyXG5cdCAqL1xyXG5cdFxyXG5cdC8vIGNhbiBiZSBhbiBhcnJheSBvZiB0aGVzZSBpdGVtcywgY29tbWEgc2VwYXJhdGVkIGxpc3QsIG9yIGFuIGFycmF5IG9mIGNvbW1hXHJcblx0Ly8gc2VwYXJhdGVkIGxpc3RzXHJcblx0XHJcblx0dmFyIF9fcmVfY29sdW1uX3NlbGVjdG9yID0gL14oLispOihuYW1lfHZpc0lkeHx2aXNpYmxlKSQvO1xyXG5cdFxyXG5cdFxyXG5cdC8vIHIxIGFuZCByMiBhcmUgcmVkdW5kYW50IC0gYnV0IGl0IG1lYW5zIHRoYXQgdGhlIHBhcmFtZXRlcnMgbWF0Y2ggZm9yIHRoZVxyXG5cdC8vIGl0ZXJhdG9yIGNhbGxiYWNrIGluIGNvbHVtbnMoKS5kYXRhKClcclxuXHR2YXIgX19jb2x1bW5EYXRhID0gZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uLCByMSwgcjIsIHJvd3MgKSB7XHJcblx0XHR2YXIgYSA9IFtdO1xyXG5cdFx0Zm9yICggdmFyIHJvdz0wLCBpZW49cm93cy5sZW5ndGggOyByb3c8aWVuIDsgcm93KysgKSB7XHJcblx0XHRcdGEucHVzaCggX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCByb3dzW3Jvd10sIGNvbHVtbiApICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gYTtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfX2NvbHVtbl9zZWxlY3RvciA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzIClcclxuXHR7XHJcblx0XHR2YXJcclxuXHRcdFx0Y29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucyxcclxuXHRcdFx0bmFtZXMgPSBfcGx1Y2soIGNvbHVtbnMsICdzTmFtZScgKSxcclxuXHRcdFx0bm9kZXMgPSBfcGx1Y2soIGNvbHVtbnMsICduVGgnICk7XHJcblx0XHJcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24gKCBzICkge1xyXG5cdFx0XHR2YXIgc2VsSW50ID0gX2ludFZhbCggcyApO1xyXG5cdFxyXG5cdFx0XHQvLyBTZWxlY3RvciAtIGFsbFxyXG5cdFx0XHRpZiAoIHMgPT09ICcnICkge1xyXG5cdFx0XHRcdHJldHVybiBfcmFuZ2UoIGNvbHVtbnMubGVuZ3RoICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gU2VsZWN0b3IgLSBpbmRleFxyXG5cdFx0XHRpZiAoIHNlbEludCAhPT0gbnVsbCApIHtcclxuXHRcdFx0XHRyZXR1cm4gWyBzZWxJbnQgPj0gMCA/XHJcblx0XHRcdFx0XHRzZWxJbnQgOiAvLyBDb3VudCBmcm9tIGxlZnRcclxuXHRcdFx0XHRcdGNvbHVtbnMubGVuZ3RoICsgc2VsSW50IC8vIENvdW50IGZyb20gcmlnaHQgKCsgYmVjYXVzZSBpdHMgYSBuZWdhdGl2ZSB2YWx1ZSlcclxuXHRcdFx0XHRdO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIFNlbGVjdG9yID0gZnVuY3Rpb25cclxuXHRcdFx0aWYgKCB0eXBlb2YgcyA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuXHRcdFx0XHR2YXIgcm93cyA9IF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyggc2V0dGluZ3MsIG9wdHMgKTtcclxuXHRcclxuXHRcdFx0XHRyZXR1cm4gJC5tYXAoIGNvbHVtbnMsIGZ1bmN0aW9uIChjb2wsIGlkeCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHMoXHJcblx0XHRcdFx0XHRcdFx0aWR4LFxyXG5cdFx0XHRcdFx0XHRcdF9fY29sdW1uRGF0YSggc2V0dGluZ3MsIGlkeCwgMCwgMCwgcm93cyApLFxyXG5cdFx0XHRcdFx0XHRcdG5vZGVzWyBpZHggXVxyXG5cdFx0XHRcdFx0XHQpID8gaWR4IDogbnVsbDtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8galF1ZXJ5IG9yIHN0cmluZyBzZWxlY3RvclxyXG5cdFx0XHR2YXIgbWF0Y2ggPSB0eXBlb2YgcyA9PT0gJ3N0cmluZycgP1xyXG5cdFx0XHRcdHMubWF0Y2goIF9fcmVfY29sdW1uX3NlbGVjdG9yICkgOlxyXG5cdFx0XHRcdCcnO1xyXG5cdFxyXG5cdFx0XHRpZiAoIG1hdGNoICkge1xyXG5cdFx0XHRcdHN3aXRjaCggbWF0Y2hbMl0gKSB7XHJcblx0XHRcdFx0XHRjYXNlICd2aXNJZHgnOlxyXG5cdFx0XHRcdFx0Y2FzZSAndmlzaWJsZSc6XHJcblx0XHRcdFx0XHRcdHZhciBpZHggPSBwYXJzZUludCggbWF0Y2hbMV0sIDEwICk7XHJcblx0XHRcdFx0XHRcdC8vIFZpc2libGUgaW5kZXggZ2l2ZW4sIGNvbnZlcnQgdG8gY29sdW1uIGluZGV4XHJcblx0XHRcdFx0XHRcdGlmICggaWR4IDwgMCApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBDb3VudGluZyBmcm9tIHRoZSByaWdodFxyXG5cdFx0XHRcdFx0XHRcdHZhciB2aXNDb2x1bW5zID0gJC5tYXAoIGNvbHVtbnMsIGZ1bmN0aW9uIChjb2wsaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbC5iVmlzaWJsZSA/IGkgOiBudWxsO1xyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyB2aXNDb2x1bW5zWyB2aXNDb2x1bW5zLmxlbmd0aCArIGlkeCBdIF07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Ly8gQ291bnRpbmcgZnJvbSB0aGUgbGVmdFxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBfZm5WaXNpYmxlVG9Db2x1bW5JbmRleCggc2V0dGluZ3MsIGlkeCApIF07XHJcblx0XHJcblx0XHRcdFx0XHRjYXNlICduYW1lJzpcclxuXHRcdFx0XHRcdFx0Ly8gbWF0Y2ggYnkgbmFtZS4gYG5hbWVzYCBpcyBjb2x1bW4gaW5kZXggY29tcGxldGUgYW5kIGluIG9yZGVyXHJcblx0XHRcdFx0XHRcdHJldHVybiAkLm1hcCggbmFtZXMsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG5hbWUgPT09IG1hdGNoWzFdID8gaSA6IG51bGw7XHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdHJldHVybiBbXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gQ2VsbCBpbiB0aGUgdGFibGUgYm9keVxyXG5cdFx0XHRpZiAoIHMubm9kZU5hbWUgJiYgcy5fRFRfQ2VsbEluZGV4ICkge1xyXG5cdFx0XHRcdHJldHVybiBbIHMuX0RUX0NlbGxJbmRleC5jb2x1bW4gXTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBqUXVlcnkgc2VsZWN0b3Igb24gdGhlIFRIIGVsZW1lbnRzIGZvciB0aGUgY29sdW1uc1xyXG5cdFx0XHR2YXIganFSZXN1bHQgPSAkKCBub2RlcyApXHJcblx0XHRcdFx0LmZpbHRlciggcyApXHJcblx0XHRcdFx0Lm1hcCggZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQuaW5BcnJheSggdGhpcywgbm9kZXMgKTsgLy8gYG5vZGVzYCBpcyBjb2x1bW4gaW5kZXggY29tcGxldGUgYW5kIGluIG9yZGVyXHJcblx0XHRcdFx0fSApXHJcblx0XHRcdFx0LnRvQXJyYXkoKTtcclxuXHRcclxuXHRcdFx0aWYgKCBqcVJlc3VsdC5sZW5ndGggfHwgISBzLm5vZGVOYW1lICkge1xyXG5cdFx0XHRcdHJldHVybiBqcVJlc3VsdDtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBPdGhlcndpc2UgYSBub2RlIHdoaWNoIG1pZ2h0IGhhdmUgYSBgZHQtY29sdW1uYCBkYXRhIGF0dHJpYnV0ZSwgb3IgYmVcclxuXHRcdFx0Ly8gYSBjaGlsZCBvciBzdWNoIGFuIGVsZW1lbnRcclxuXHRcdFx0dmFyIGhvc3QgPSAkKHMpLmNsb3Nlc3QoJypbZGF0YS1kdC1jb2x1bW5dJyk7XHJcblx0XHRcdHJldHVybiBob3N0Lmxlbmd0aCA/XHJcblx0XHRcdFx0WyBob3N0LmRhdGEoJ2R0LWNvbHVtbicpIF0gOlxyXG5cdFx0XHRcdFtdO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdHJldHVybiBfc2VsZWN0b3JfcnVuKCAnY29sdW1uJywgc2VsZWN0b3IsIHJ1biwgc2V0dGluZ3MsIG9wdHMgKTtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdHZhciBfX3NldENvbHVtblZpcyA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIGNvbHVtbiwgdmlzICkge1xyXG5cdFx0dmFyXHJcblx0XHRcdGNvbHMgPSBzZXR0aW5ncy5hb0NvbHVtbnMsXHJcblx0XHRcdGNvbCAgPSBjb2xzWyBjb2x1bW4gXSxcclxuXHRcdFx0ZGF0YSA9IHNldHRpbmdzLmFvRGF0YSxcclxuXHRcdFx0cm93LCBjZWxscywgaSwgaWVuLCB0cjtcclxuXHRcclxuXHRcdC8vIEdldFxyXG5cdFx0aWYgKCB2aXMgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0cmV0dXJuIGNvbC5iVmlzaWJsZTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFNldFxyXG5cdFx0Ly8gTm8gY2hhbmdlXHJcblx0XHRpZiAoIGNvbC5iVmlzaWJsZSA9PT0gdmlzICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIHZpcyApIHtcclxuXHRcdFx0Ly8gSW5zZXJ0IGNvbHVtblxyXG5cdFx0XHQvLyBOZWVkIHRvIGRlY2lkZSBpZiB3ZSBzaG91bGQgdXNlIGFwcGVuZENoaWxkIG9yIGluc2VydEJlZm9yZVxyXG5cdFx0XHR2YXIgaW5zZXJ0QmVmb3JlID0gJC5pbkFycmF5KCB0cnVlLCBfcGx1Y2soY29scywgJ2JWaXNpYmxlJyksIGNvbHVtbisxICk7XHJcblx0XHJcblx0XHRcdGZvciAoIGk9MCwgaWVuPWRhdGEubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0dHIgPSBkYXRhW2ldLm5UcjtcclxuXHRcdFx0XHRjZWxscyA9IGRhdGFbaV0uYW5DZWxscztcclxuXHRcclxuXHRcdFx0XHRpZiAoIHRyICkge1xyXG5cdFx0XHRcdFx0Ly8gaW5zZXJ0QmVmb3JlIGNhbiBhY3QgbGlrZSBhcHBlbmRDaGlsZCBpZiAybmQgYXJnIGlzIG51bGxcclxuXHRcdFx0XHRcdHRyLmluc2VydEJlZm9yZSggY2VsbHNbIGNvbHVtbiBdLCBjZWxsc1sgaW5zZXJ0QmVmb3JlIF0gfHwgbnVsbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdC8vIFJlbW92ZSBjb2x1bW5cclxuXHRcdFx0JCggX3BsdWNrKCBzZXR0aW5ncy5hb0RhdGEsICdhbkNlbGxzJywgY29sdW1uICkgKS5kZXRhY2goKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIENvbW1vbiBhY3Rpb25zXHJcblx0XHRjb2wuYlZpc2libGUgPSB2aXM7XHJcblx0XHRfZm5EcmF3SGVhZCggc2V0dGluZ3MsIHNldHRpbmdzLmFvSGVhZGVyICk7XHJcblx0XHRfZm5EcmF3SGVhZCggc2V0dGluZ3MsIHNldHRpbmdzLmFvRm9vdGVyICk7XHJcblx0XHJcblx0XHRfZm5TYXZlU3RhdGUoIHNldHRpbmdzICk7XHJcblx0fTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAnY29sdW1ucygpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcclxuXHRcdC8vIGFyZ3VtZW50IHNoaWZ0aW5nXHJcblx0XHRpZiAoIHNlbGVjdG9yID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHNlbGVjdG9yID0gJyc7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggJC5pc1BsYWluT2JqZWN0KCBzZWxlY3RvciApICkge1xyXG5cdFx0XHRvcHRzID0gc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gJyc7XHJcblx0XHR9XHJcblx0XHJcblx0XHRvcHRzID0gX3NlbGVjdG9yX29wdHMoIG9wdHMgKTtcclxuXHRcclxuXHRcdHZhciBpbnN0ID0gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcclxuXHRcdFx0cmV0dXJuIF9fY29sdW1uX3NlbGVjdG9yKCBzZXR0aW5ncywgc2VsZWN0b3IsIG9wdHMgKTtcclxuXHRcdH0sIDEgKTtcclxuXHRcclxuXHRcdC8vIFdhbnQgYXJndW1lbnQgc2hpZnRpbmcgaGVyZSBhbmQgaW4gX3Jvd19zZWxlY3Rvcj9cclxuXHRcdGluc3Quc2VsZWN0b3IuY29scyA9IHNlbGVjdG9yO1xyXG5cdFx0aW5zdC5zZWxlY3Rvci5vcHRzID0gb3B0cztcclxuXHRcclxuXHRcdHJldHVybiBpbnN0O1xyXG5cdH0gKTtcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmhlYWRlcigpJywgJ2NvbHVtbigpLmhlYWRlcigpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY29sdW1uJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbHVtbl0ublRoO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmZvb3RlcigpJywgJ2NvbHVtbigpLmZvb3RlcigpJywgZnVuY3Rpb24gKCBzZWxlY3Rvciwgb3B0cyApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY29sdW1uJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbHVtbl0ublRmO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLmRhdGEoKScsICdjb2x1bW4oKS5kYXRhKCknLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NvbHVtbi1yb3dzJywgX19jb2x1bW5EYXRhLCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjb2x1bW5zKCkuZGF0YVNyYygpJywgJ2NvbHVtbigpLmRhdGFTcmMoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY29sdW1uJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbHVtbl0ubURhdGE7XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjb2x1bW5zKCkuY2FjaGUoKScsICdjb2x1bW4oKS5jYWNoZSgpJywgZnVuY3Rpb24gKCB0eXBlICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjb2x1bW4tcm93cycsIGZ1bmN0aW9uICggc2V0dGluZ3MsIGNvbHVtbiwgaSwgaiwgcm93cyApIHtcclxuXHRcdFx0cmV0dXJuIF9wbHVja19vcmRlciggc2V0dGluZ3MuYW9EYXRhLCByb3dzLFxyXG5cdFx0XHRcdHR5cGUgPT09ICdzZWFyY2gnID8gJ19hRmlsdGVyRGF0YScgOiAnX2FTb3J0RGF0YScsIGNvbHVtblxyXG5cdFx0XHQpO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY29sdW1ucygpLm5vZGVzKCknLCAnY29sdW1uKCkubm9kZXMoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY29sdW1uLXJvd3MnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4sIGksIGosIHJvd3MgKSB7XHJcblx0XHRcdHJldHVybiBfcGx1Y2tfb3JkZXIoIHNldHRpbmdzLmFvRGF0YSwgcm93cywgJ2FuQ2VsbHMnLCBjb2x1bW4gKSA7XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjb2x1bW5zKCkudmlzaWJsZSgpJywgJ2NvbHVtbigpLnZpc2libGUoKScsIGZ1bmN0aW9uICggdmlzLCBjYWxjICkge1xyXG5cdFx0dmFyIHJldCA9IHRoaXMuaXRlcmF0b3IoICdjb2x1bW4nLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4gKSB7XHJcblx0XHRcdGlmICggdmlzID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHNldHRpbmdzLmFvQ29sdW1uc1sgY29sdW1uIF0uYlZpc2libGU7XHJcblx0XHRcdH0gLy8gZWxzZVxyXG5cdFx0XHRfX3NldENvbHVtblZpcyggc2V0dGluZ3MsIGNvbHVtbiwgdmlzICk7XHJcblx0XHR9ICk7XHJcblx0XHJcblx0XHQvLyBHcm91cCB0aGUgY29sdW1uIHZpc2liaWxpdHkgY2hhbmdlc1xyXG5cdFx0aWYgKCB2aXMgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Ly8gU2Vjb25kIGxvb3Agb25jZSB0aGUgZmlyc3QgaXMgZG9uZSBmb3IgZXZlbnRzXHJcblx0XHRcdHRoaXMuaXRlcmF0b3IoICdjb2x1bW4nLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBjb2x1bW4gKSB7XHJcblx0XHRcdFx0X2ZuQ2FsbGJhY2tGaXJlKCBzZXR0aW5ncywgbnVsbCwgJ2NvbHVtbi12aXNpYmlsaXR5JywgW3NldHRpbmdzLCBjb2x1bW4sIHZpcywgY2FsY10gKTtcclxuXHRcdFx0fSApO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGNhbGMgPT09IHVuZGVmaW5lZCB8fCBjYWxjICkge1xyXG5cdFx0XHRcdHRoaXMuY29sdW1ucy5hZGp1c3QoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9ICk7XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ2NvbHVtbnMoKS5pbmRleGVzKCknLCAnY29sdW1uKCkuaW5kZXgoKScsIGZ1bmN0aW9uICggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY29sdW1uJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgY29sdW1uICkge1xyXG5cdFx0XHRyZXR1cm4gdHlwZSA9PT0gJ3Zpc2libGUnID9cclxuXHRcdFx0XHRfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSggc2V0dGluZ3MsIGNvbHVtbiApIDpcclxuXHRcdFx0XHRjb2x1bW47XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdjb2x1bW5zLmFkanVzdCgpJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdF9mbkFkanVzdENvbHVtblNpemluZyggc2V0dGluZ3MgKTtcclxuXHRcdH0sIDEgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ2NvbHVtbi5pbmRleCgpJywgZnVuY3Rpb24gKCB0eXBlLCBpZHggKSB7XHJcblx0XHRpZiAoIHRoaXMuY29udGV4dC5sZW5ndGggIT09IDAgKSB7XHJcblx0XHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHRbMF07XHJcblx0XHJcblx0XHRcdGlmICggdHlwZSA9PT0gJ2Zyb21WaXNpYmxlJyB8fCB0eXBlID09PSAndG9EYXRhJyApIHtcclxuXHRcdFx0XHRyZXR1cm4gX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgoIGN0eCwgaWR4ICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoIHR5cGUgPT09ICdmcm9tRGF0YScgfHwgdHlwZSA9PT0gJ3RvVmlzaWJsZScgKSB7XHJcblx0XHRcdFx0cmV0dXJuIF9mbkNvbHVtbkluZGV4VG9WaXNpYmxlKCBjdHgsIGlkeCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSApO1xyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdjb2x1bW4oKScsIGZ1bmN0aW9uICggc2VsZWN0b3IsIG9wdHMgKSB7XHJcblx0XHRyZXR1cm4gX3NlbGVjdG9yX2ZpcnN0KCB0aGlzLmNvbHVtbnMoIHNlbGVjdG9yLCBvcHRzICkgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0dmFyIF9fY2VsbF9zZWxlY3RvciA9IGZ1bmN0aW9uICggc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzIClcclxuXHR7XHJcblx0XHR2YXIgZGF0YSA9IHNldHRpbmdzLmFvRGF0YTtcclxuXHRcdHZhciByb3dzID0gX3NlbGVjdG9yX3Jvd19pbmRleGVzKCBzZXR0aW5ncywgb3B0cyApO1xyXG5cdFx0dmFyIGNlbGxzID0gX3JlbW92ZUVtcHR5KCBfcGx1Y2tfb3JkZXIoIGRhdGEsIHJvd3MsICdhbkNlbGxzJyApICk7XHJcblx0XHR2YXIgYWxsQ2VsbHMgPSAkKCBbXS5jb25jYXQuYXBwbHkoW10sIGNlbGxzKSApO1xyXG5cdFx0dmFyIHJvdztcclxuXHRcdHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLmxlbmd0aDtcclxuXHRcdHZhciBhLCBpLCBpZW4sIGosIG8sIGhvc3Q7XHJcblx0XHJcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24gKCBzICkge1xyXG5cdFx0XHR2YXIgZm5TZWxlY3RvciA9IHR5cGVvZiBzID09PSAnZnVuY3Rpb24nO1xyXG5cdFxyXG5cdFx0XHRpZiAoIHMgPT09IG51bGwgfHwgcyA9PT0gdW5kZWZpbmVkIHx8IGZuU2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0Ly8gQWxsIGNlbGxzIGFuZCBmdW5jdGlvbiBzZWxlY3RvcnNcclxuXHRcdFx0XHRhID0gW107XHJcblx0XHJcblx0XHRcdFx0Zm9yICggaT0wLCBpZW49cm93cy5sZW5ndGggOyBpPGllbiA7IGkrKyApIHtcclxuXHRcdFx0XHRcdHJvdyA9IHJvd3NbaV07XHJcblx0XHJcblx0XHRcdFx0XHRmb3IgKCBqPTAgOyBqPGNvbHVtbnMgOyBqKysgKSB7XHJcblx0XHRcdFx0XHRcdG8gPSB7XHJcblx0XHRcdFx0XHRcdFx0cm93OiByb3csXHJcblx0XHRcdFx0XHRcdFx0Y29sdW1uOiBqXHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHJcblx0XHRcdFx0XHRcdGlmICggZm5TZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBTZWxlY3RvciAtIGZ1bmN0aW9uXHJcblx0XHRcdFx0XHRcdFx0aG9zdCA9IGRhdGFbIHJvdyBdO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRcdGlmICggcyggbywgX2ZuR2V0Q2VsbERhdGEoc2V0dGluZ3MsIHJvdywgaiksIGhvc3QuYW5DZWxscyA/IGhvc3QuYW5DZWxsc1tqXSA6IG51bGwgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGEucHVzaCggbyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBTZWxlY3RvciAtIGFsbFxyXG5cdFx0XHRcdFx0XHRcdGEucHVzaCggbyApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdHJldHVybiBhO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBTZWxlY3RvciAtIGluZGV4XHJcblx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBzICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIFtzXTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBTZWxlY3RvciAtIGpRdWVyeSBmaWx0ZXJlZCBjZWxsc1xyXG5cdFx0XHR2YXIganFSZXN1bHQgPSBhbGxDZWxsc1xyXG5cdFx0XHRcdC5maWx0ZXIoIHMgKVxyXG5cdFx0XHRcdC5tYXAoIGZ1bmN0aW9uIChpLCBlbCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHsgLy8gdXNlIGEgbmV3IG9iamVjdCwgaW4gY2FzZSBzb21lb25lIGNoYW5nZXMgdGhlIHZhbHVlc1xyXG5cdFx0XHRcdFx0XHRyb3c6ICAgIGVsLl9EVF9DZWxsSW5kZXgucm93LFxyXG5cdFx0XHRcdFx0XHRjb2x1bW46IGVsLl9EVF9DZWxsSW5kZXguY29sdW1uXHJcblx0IFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9IClcclxuXHRcdFx0XHQudG9BcnJheSgpO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGpxUmVzdWx0Lmxlbmd0aCB8fCAhIHMubm9kZU5hbWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpxUmVzdWx0O1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8vIE90aGVyd2lzZSB0aGUgc2VsZWN0b3IgaXMgYSBub2RlLCBhbmQgdGhlcmUgaXMgb25lIGxhc3Qgb3B0aW9uIC0gdGhlXHJcblx0XHRcdC8vIGVsZW1lbnQgbWlnaHQgYmUgYSBjaGlsZCBvZiBhbiBlbGVtZW50IHdoaWNoIGhhcyBkdC1yb3cgYW5kIGR0LWNvbHVtblxyXG5cdFx0XHQvLyBkYXRhIGF0dHJpYnV0ZXNcclxuXHRcdFx0aG9zdCA9ICQocykuY2xvc2VzdCgnKltkYXRhLWR0LXJvd10nKTtcclxuXHRcdFx0cmV0dXJuIGhvc3QubGVuZ3RoID9cclxuXHRcdFx0XHRbIHtcclxuXHRcdFx0XHRcdHJvdzogaG9zdC5kYXRhKCdkdC1yb3cnKSxcclxuXHRcdFx0XHRcdGNvbHVtbjogaG9zdC5kYXRhKCdkdC1jb2x1bW4nKVxyXG5cdFx0XHRcdH0gXSA6XHJcblx0XHRcdFx0W107XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0cmV0dXJuIF9zZWxlY3Rvcl9ydW4oICdjZWxsJywgc2VsZWN0b3IsIHJ1biwgc2V0dGluZ3MsIG9wdHMgKTtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdjZWxscygpJywgZnVuY3Rpb24gKCByb3dTZWxlY3RvciwgY29sdW1uU2VsZWN0b3IsIG9wdHMgKSB7XHJcblx0XHQvLyBBcmd1bWVudCBzaGlmdGluZ1xyXG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIHJvd1NlbGVjdG9yICkgKSB7XHJcblx0XHRcdC8vIEluZGV4ZXNcclxuXHRcdFx0aWYgKCByb3dTZWxlY3Rvci5yb3cgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHQvLyBTZWxlY3RvciBvcHRpb25zIGluIGZpcnN0IHBhcmFtZXRlclxyXG5cdFx0XHRcdG9wdHMgPSByb3dTZWxlY3RvcjtcclxuXHRcdFx0XHRyb3dTZWxlY3RvciA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0Ly8gQ2VsbCBpbmRleCBvYmplY3RzIGluIGZpcnN0IHBhcmFtZXRlclxyXG5cdFx0XHRcdG9wdHMgPSBjb2x1bW5TZWxlY3RvcjtcclxuXHRcdFx0XHRjb2x1bW5TZWxlY3RvciA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBjb2x1bW5TZWxlY3RvciApICkge1xyXG5cdFx0XHRvcHRzID0gY29sdW1uU2VsZWN0b3I7XHJcblx0XHRcdGNvbHVtblNlbGVjdG9yID0gbnVsbDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIENlbGwgc2VsZWN0b3JcclxuXHRcdGlmICggY29sdW1uU2VsZWN0b3IgPT09IG51bGwgfHwgY29sdW1uU2VsZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdFx0cmV0dXJuIF9fY2VsbF9zZWxlY3Rvciggc2V0dGluZ3MsIHJvd1NlbGVjdG9yLCBfc2VsZWN0b3Jfb3B0cyggb3B0cyApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFJvdyArIGNvbHVtbiBzZWxlY3RvclxyXG5cdFx0dmFyIGNvbHVtbnMgPSB0aGlzLmNvbHVtbnMoIGNvbHVtblNlbGVjdG9yLCBvcHRzICk7XHJcblx0XHR2YXIgcm93cyA9IHRoaXMucm93cyggcm93U2VsZWN0b3IsIG9wdHMgKTtcclxuXHRcdHZhciBhLCBpLCBpZW4sIGosIGplbjtcclxuXHRcclxuXHRcdHZhciBjZWxscyA9IHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MsIGlkeCApIHtcclxuXHRcdFx0YSA9IFtdO1xyXG5cdFxyXG5cdFx0XHRmb3IgKCBpPTAsIGllbj1yb3dzW2lkeF0ubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHRcdFx0Zm9yICggaj0wLCBqZW49Y29sdW1uc1tpZHhdLmxlbmd0aCA7IGo8amVuIDsgaisrICkge1xyXG5cdFx0XHRcdFx0YS5wdXNoKCB7XHJcblx0XHRcdFx0XHRcdHJvdzogICAgcm93c1tpZHhdW2ldLFxyXG5cdFx0XHRcdFx0XHRjb2x1bW46IGNvbHVtbnNbaWR4XVtqXVxyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRyZXR1cm4gYTtcclxuXHRcdH0sIDEgKTtcclxuXHRcclxuXHRcdCQuZXh0ZW5kKCBjZWxscy5zZWxlY3Rvciwge1xyXG5cdFx0XHRjb2xzOiBjb2x1bW5TZWxlY3RvcixcclxuXHRcdFx0cm93czogcm93U2VsZWN0b3IsXHJcblx0XHRcdG9wdHM6IG9wdHNcclxuXHRcdH0gKTtcclxuXHRcclxuXHRcdHJldHVybiBjZWxscztcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbCggJ2NlbGxzKCkubm9kZXMoKScsICdjZWxsKCkubm9kZSgpJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICdjZWxsJywgZnVuY3Rpb24gKCBzZXR0aW5ncywgcm93LCBjb2x1bW4gKSB7XHJcblx0XHRcdHZhciBkYXRhID0gc2V0dGluZ3MuYW9EYXRhWyByb3cgXTtcclxuXHRcclxuXHRcdFx0cmV0dXJuIGRhdGEgJiYgZGF0YS5hbkNlbGxzID9cclxuXHRcdFx0XHRkYXRhLmFuQ2VsbHNbIGNvbHVtbiBdIDpcclxuXHRcdFx0XHR1bmRlZmluZWQ7XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdjZWxscygpLmRhdGEoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY2VsbCcsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdywgY29sdW1uICkge1xyXG5cdFx0XHRyZXR1cm4gX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCByb3csIGNvbHVtbiApO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY2VsbHMoKS5jYWNoZSgpJywgJ2NlbGwoKS5jYWNoZSgpJywgZnVuY3Rpb24gKCB0eXBlICkge1xyXG5cdFx0dHlwZSA9IHR5cGUgPT09ICdzZWFyY2gnID8gJ19hRmlsdGVyRGF0YScgOiAnX2FTb3J0RGF0YSc7XHJcblx0XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NlbGwnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCByb3csIGNvbHVtbiApIHtcclxuXHRcdFx0cmV0dXJuIHNldHRpbmdzLmFvRGF0YVsgcm93IF1bIHR5cGUgXVsgY29sdW1uIF07XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjZWxscygpLnJlbmRlcigpJywgJ2NlbGwoKS5yZW5kZXIoKScsIGZ1bmN0aW9uICggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAnY2VsbCcsIGZ1bmN0aW9uICggc2V0dGluZ3MsIHJvdywgY29sdW1uICkge1xyXG5cdFx0XHRyZXR1cm4gX2ZuR2V0Q2VsbERhdGEoIHNldHRpbmdzLCByb3csIGNvbHVtbiwgdHlwZSApO1xyXG5cdFx0fSwgMSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyUGx1cmFsKCAnY2VsbHMoKS5pbmRleGVzKCknLCAnY2VsbCgpLmluZGV4KCknLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NlbGwnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCByb3csIGNvbHVtbiApIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRyb3c6IHJvdyxcclxuXHRcdFx0XHRjb2x1bW46IGNvbHVtbixcclxuXHRcdFx0XHRjb2x1bW5WaXNpYmxlOiBfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSggc2V0dGluZ3MsIGNvbHVtbiApXHJcblx0XHRcdH07XHJcblx0XHR9LCAxICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXJQbHVyYWwoICdjZWxscygpLmludmFsaWRhdGUoKScsICdjZWxsKCkuaW52YWxpZGF0ZSgpJywgZnVuY3Rpb24gKCBzcmMgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NlbGwnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCByb3csIGNvbHVtbiApIHtcclxuXHRcdFx0X2ZuSW52YWxpZGF0ZSggc2V0dGluZ3MsIHJvdywgc3JjLCBjb2x1bW4gKTtcclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ2NlbGwoKScsIGZ1bmN0aW9uICggcm93U2VsZWN0b3IsIGNvbHVtblNlbGVjdG9yLCBvcHRzICkge1xyXG5cdFx0cmV0dXJuIF9zZWxlY3Rvcl9maXJzdCggdGhpcy5jZWxscyggcm93U2VsZWN0b3IsIGNvbHVtblNlbGVjdG9yLCBvcHRzICkgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ2NlbGwoKS5kYXRhKCknLCBmdW5jdGlvbiAoIGRhdGEgKSB7XHJcblx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xyXG5cdFx0dmFyIGNlbGwgPSB0aGlzWzBdO1xyXG5cdFxyXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdC8vIEdldFxyXG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCAmJiBjZWxsLmxlbmd0aCA/XHJcblx0XHRcdFx0X2ZuR2V0Q2VsbERhdGEoIGN0eFswXSwgY2VsbFswXS5yb3csIGNlbGxbMF0uY29sdW1uICkgOlxyXG5cdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIFNldFxyXG5cdFx0X2ZuU2V0Q2VsbERhdGEoIGN0eFswXSwgY2VsbFswXS5yb3csIGNlbGxbMF0uY29sdW1uLCBkYXRhICk7XHJcblx0XHRfZm5JbnZhbGlkYXRlKCBjdHhbMF0sIGNlbGxbMF0ucm93LCAnZGF0YScsIGNlbGxbMF0uY29sdW1uICk7XHJcblx0XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IGN1cnJlbnQgb3JkZXJpbmcgKHNvcnRpbmcpIHRoYXQgaGFzIGJlZW4gYXBwbGllZCB0byB0aGUgdGFibGUuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJucyB7YXJyYXl9IDJEIGFycmF5IGNvbnRhaW5pbmcgdGhlIHNvcnRpbmcgaW5mb3JtYXRpb24gZm9yIHRoZSBmaXJzdFxyXG5cdCAqICAgdGFibGUgaW4gdGhlIGN1cnJlbnQgY29udGV4dC4gRWFjaCBlbGVtZW50IGluIHRoZSBwYXJlbnQgYXJyYXkgcmVwcmVzZW50c1xyXG5cdCAqICAgYSBjb2x1bW4gYmVpbmcgc29ydGVkIHVwb24gKGkuZS4gbXVsdGktc29ydGluZyB3aXRoIHR3byBjb2x1bW5zIHdvdWxkIGhhdmVcclxuXHQgKiAgIDIgaW5uZXIgYXJyYXlzKS4gVGhlIGlubmVyIGFycmF5cyBtYXkgaGF2ZSAyIG9yIDMgZWxlbWVudHMuIFRoZSBmaXJzdCBpc1xyXG5cdCAqICAgdGhlIGNvbHVtbiBpbmRleCB0aGF0IHRoZSBzb3J0aW5nIGNvbmRpdGlvbiBhcHBsaWVzIHRvLCB0aGUgc2Vjb25kIGlzIHRoZVxyXG5cdCAqICAgZGlyZWN0aW9uIG9mIHRoZSBzb3J0IChgZGVzY2Agb3IgYGFzY2ApIGFuZCwgb3B0aW9uYWxseSwgdGhlIHRoaXJkIGlzIHRoZVxyXG5cdCAqICAgaW5kZXggb2YgdGhlIHNvcnRpbmcgb3JkZXIgZnJvbSB0aGUgYGNvbHVtbi5zb3J0aW5nYCBpbml0aWFsaXNhdGlvbiBhcnJheS5cclxuXHQgKi8vKipcclxuXHQgKiBTZXQgdGhlIG9yZGVyaW5nIGZvciB0aGUgdGFibGUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge2ludGVnZXJ9IG9yZGVyIENvbHVtbiBpbmRleCB0byBzb3J0IHVwb24uXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdGlvbiBEaXJlY3Rpb24gb2YgdGhlIHNvcnQgdG8gYmUgYXBwbGllZCAoYGFzY2Agb3IgYGRlc2NgKVxyXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xyXG5cdCAqLy8qKlxyXG5cdCAqIFNldCB0aGUgb3JkZXJpbmcgZm9yIHRoZSB0YWJsZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7YXJyYXl9IG9yZGVyIDFEIGFycmF5IG9mIHNvcnRpbmcgaW5mb3JtYXRpb24gdG8gYmUgYXBwbGllZC5cclxuXHQgKiBAcGFyYW0ge2FycmF5fSBbLi4uXSBPcHRpb25hbCBhZGRpdGlvbmFsIHNvcnRpbmcgY29uZGl0aW9uc1xyXG5cdCAqIEByZXR1cm5zIHtEYXRhVGFibGVzLkFwaX0gdGhpc1xyXG5cdCAqLy8qKlxyXG5cdCAqIFNldCB0aGUgb3JkZXJpbmcgZm9yIHRoZSB0YWJsZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7YXJyYXl9IG9yZGVyIDJEIGFycmF5IG9mIHNvcnRpbmcgaW5mb3JtYXRpb24gdG8gYmUgYXBwbGllZC5cclxuXHQgKiBAcmV0dXJucyB7RGF0YVRhYmxlcy5BcGl9IHRoaXNcclxuXHQgKi9cclxuXHRfYXBpX3JlZ2lzdGVyKCAnb3JkZXIoKScsIGZ1bmN0aW9uICggb3JkZXIsIGRpciApIHtcclxuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XHJcblx0XHJcblx0XHRpZiAoIG9yZGVyID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdC8vIGdldFxyXG5cdFx0XHRyZXR1cm4gY3R4Lmxlbmd0aCAhPT0gMCA/XHJcblx0XHRcdFx0Y3R4WzBdLmFhU29ydGluZyA6XHJcblx0XHRcdFx0dW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gc2V0XHJcblx0XHRpZiAoIHR5cGVvZiBvcmRlciA9PT0gJ251bWJlcicgKSB7XHJcblx0XHRcdC8vIFNpbXBsZSBjb2x1bW4gLyBkaXJlY3Rpb24gcGFzc2VkIGluXHJcblx0XHRcdG9yZGVyID0gWyBbIG9yZGVyLCBkaXIgXSBdO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIG9yZGVyLmxlbmd0aCAmJiAhICQuaXNBcnJheSggb3JkZXJbMF0gKSApIHtcclxuXHRcdFx0Ly8gQXJndW1lbnRzIHBhc3NlZCBpbiAobGlzdCBvZiAxRCBhcnJheXMpXHJcblx0XHRcdG9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xyXG5cdFx0fVxyXG5cdFx0Ly8gb3RoZXJ3aXNlIGEgMkQgYXJyYXkgd2FzIHBhc3NlZCBpblxyXG5cdFxyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdHNldHRpbmdzLmFhU29ydGluZyA9IG9yZGVyLnNsaWNlKCk7XHJcblx0XHR9ICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEF0dGFjaCBhIHNvcnQgbGlzdGVuZXIgdG8gYW4gZWxlbWVudCBmb3IgYSBnaXZlbiBjb2x1bW5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7bm9kZXxqUXVlcnl8c3RyaW5nfSBub2RlIElkZW50aWZpZXIgZm9yIHRoZSBlbGVtZW50KHMpIHRvIGF0dGFjaCB0aGVcclxuXHQgKiAgIGxpc3RlbmVyIHRvLiBUaGlzIGNhbiB0YWtlIHRoZSBmb3JtIG9mIGEgc2luZ2xlIERPTSBub2RlLCBhIGpRdWVyeVxyXG5cdCAqICAgY29sbGVjdGlvbiBvZiBub2RlcyBvciBhIGpRdWVyeSBzZWxlY3RvciB3aGljaCB3aWxsIGlkZW50aWZ5IHRoZSBub2RlKHMpLlxyXG5cdCAqIEBwYXJhbSB7aW50ZWdlcn0gY29sdW1uIHRoZSBjb2x1bW4gdGhhdCBhIGNsaWNrIG9uIHRoaXMgbm9kZSB3aWxsIHNvcnQgb25cclxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gc29ydCBpcyBydW5cclxuXHQgKiBAcmV0dXJucyB7RGF0YVRhYmxlcy5BcGl9IHRoaXNcclxuXHQgKi9cclxuXHRfYXBpX3JlZ2lzdGVyKCAnb3JkZXIubGlzdGVuZXIoKScsIGZ1bmN0aW9uICggbm9kZSwgY29sdW1uLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xyXG5cdFx0XHRfZm5Tb3J0QXR0YWNoTGlzdGVuZXIoIHNldHRpbmdzLCBub2RlLCBjb2x1bW4sIGNhbGxiYWNrICk7XHJcblx0XHR9ICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdvcmRlci5maXhlZCgpJywgZnVuY3Rpb24gKCBzZXQgKSB7XHJcblx0XHRpZiAoICEgc2V0ICkge1xyXG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xyXG5cdFx0XHR2YXIgZml4ZWQgPSBjdHgubGVuZ3RoID9cclxuXHRcdFx0XHRjdHhbMF0uYWFTb3J0aW5nRml4ZWQgOlxyXG5cdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcclxuXHRcdFx0cmV0dXJuICQuaXNBcnJheSggZml4ZWQgKSA/XHJcblx0XHRcdFx0eyBwcmU6IGZpeGVkIH0gOlxyXG5cdFx0XHRcdGZpeGVkO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdHNldHRpbmdzLmFhU29ydGluZ0ZpeGVkID0gJC5leHRlbmQoIHRydWUsIHt9LCBzZXQgKTtcclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0Ly8gT3JkZXIgYnkgdGhlIHNlbGVjdGVkIGNvbHVtbihzKVxyXG5cdF9hcGlfcmVnaXN0ZXIoIFtcclxuXHRcdCdjb2x1bW5zKCkub3JkZXIoKScsXHJcblx0XHQnY29sdW1uKCkub3JkZXIoKSdcclxuXHRdLCBmdW5jdGlvbiAoIGRpciApIHtcclxuXHRcdHZhciB0aGF0ID0gdGhpcztcclxuXHRcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBpICkge1xyXG5cdFx0XHR2YXIgc29ydCA9IFtdO1xyXG5cdFxyXG5cdFx0XHQkLmVhY2goIHRoYXRbaV0sIGZ1bmN0aW9uIChqLCBjb2wpIHtcclxuXHRcdFx0XHRzb3J0LnB1c2goIFsgY29sLCBkaXIgXSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHJcblx0XHRcdHNldHRpbmdzLmFhU29ydGluZyA9IHNvcnQ7XHJcblx0XHR9ICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdzZWFyY2goKScsIGZ1bmN0aW9uICggaW5wdXQsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2VuICkge1xyXG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dDtcclxuXHRcclxuXHRcdGlmICggaW5wdXQgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Ly8gZ2V0XHJcblx0XHRcdHJldHVybiBjdHgubGVuZ3RoICE9PSAwID9cclxuXHRcdFx0XHRjdHhbMF0ub1ByZXZpb3VzU2VhcmNoLnNTZWFyY2ggOlxyXG5cdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vIHNldFxyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdGlmICggISBzZXR0aW5ncy5vRmVhdHVyZXMuYkZpbHRlciApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0X2ZuRmlsdGVyQ29tcGxldGUoIHNldHRpbmdzLCAkLmV4dGVuZCgge30sIHNldHRpbmdzLm9QcmV2aW91c1NlYXJjaCwge1xyXG5cdFx0XHRcdFwic1NlYXJjaFwiOiBpbnB1dCtcIlwiLFxyXG5cdFx0XHRcdFwiYlJlZ2V4XCI6ICByZWdleCA9PT0gbnVsbCA/IGZhbHNlIDogcmVnZXgsXHJcblx0XHRcdFx0XCJiU21hcnRcIjogIHNtYXJ0ID09PSBudWxsID8gdHJ1ZSAgOiBzbWFydCxcclxuXHRcdFx0XHRcImJDYXNlSW5zZW5zaXRpdmVcIjogY2FzZUluc2VuID09PSBudWxsID8gdHJ1ZSA6IGNhc2VJbnNlblxyXG5cdFx0XHR9ICksIDEgKTtcclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlclBsdXJhbChcclxuXHRcdCdjb2x1bW5zKCkuc2VhcmNoKCknLFxyXG5cdFx0J2NvbHVtbigpLnNlYXJjaCgpJyxcclxuXHRcdGZ1bmN0aW9uICggaW5wdXQsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2VuICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ2NvbHVtbicsIGZ1bmN0aW9uICggc2V0dGluZ3MsIGNvbHVtbiApIHtcclxuXHRcdFx0XHR2YXIgcHJlU2VhcmNoID0gc2V0dGluZ3MuYW9QcmVTZWFyY2hDb2xzO1xyXG5cdFxyXG5cdFx0XHRcdGlmICggaW5wdXQgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdC8vIGdldFxyXG5cdFx0XHRcdFx0cmV0dXJuIHByZVNlYXJjaFsgY29sdW1uIF0uc1NlYXJjaDtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0Ly8gc2V0XHJcblx0XHRcdFx0aWYgKCAhIHNldHRpbmdzLm9GZWF0dXJlcy5iRmlsdGVyICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHQkLmV4dGVuZCggcHJlU2VhcmNoWyBjb2x1bW4gXSwge1xyXG5cdFx0XHRcdFx0XCJzU2VhcmNoXCI6IGlucHV0K1wiXCIsXHJcblx0XHRcdFx0XHRcImJSZWdleFwiOiAgcmVnZXggPT09IG51bGwgPyBmYWxzZSA6IHJlZ2V4LFxyXG5cdFx0XHRcdFx0XCJiU21hcnRcIjogIHNtYXJ0ID09PSBudWxsID8gdHJ1ZSAgOiBzbWFydCxcclxuXHRcdFx0XHRcdFwiYkNhc2VJbnNlbnNpdGl2ZVwiOiBjYXNlSW5zZW4gPT09IG51bGwgPyB0cnVlIDogY2FzZUluc2VuXHJcblx0XHRcdFx0fSApO1xyXG5cdFxyXG5cdFx0XHRcdF9mbkZpbHRlckNvbXBsZXRlKCBzZXR0aW5ncywgc2V0dGluZ3Mub1ByZXZpb3VzU2VhcmNoLCAxICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHQpO1xyXG5cdFxyXG5cdC8qXHJcblx0ICogU3RhdGUgQVBJIG1ldGhvZHNcclxuXHQgKi9cclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAnc3RhdGUoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLmNvbnRleHQubGVuZ3RoID9cclxuXHRcdFx0dGhpcy5jb250ZXh0WzBdLm9TYXZlZFN0YXRlIDpcclxuXHRcdFx0bnVsbDtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ3N0YXRlLmNsZWFyKCknLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcclxuXHRcdFx0Ly8gU2F2ZSBhbiBlbXB0eSBvYmplY3RcclxuXHRcdFx0c2V0dGluZ3MuZm5TdGF0ZVNhdmVDYWxsYmFjay5jYWxsKCBzZXR0aW5ncy5vSW5zdGFuY2UsIHNldHRpbmdzLCB7fSApO1xyXG5cdFx0fSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAnc3RhdGUubG9hZGVkKCknLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0Lmxlbmd0aCA/XHJcblx0XHRcdHRoaXMuY29udGV4dFswXS5vTG9hZGVkU3RhdGUgOlxyXG5cdFx0XHRudWxsO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAnc3RhdGUuc2F2ZSgpJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdF9mblNhdmVTdGF0ZSggc2V0dGluZ3MgKTtcclxuXHRcdH0gKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogUHJvdmlkZSBhIGNvbW1vbiBtZXRob2QgZm9yIHBsdWctaW5zIHRvIGNoZWNrIHRoZSB2ZXJzaW9uIG9mIERhdGFUYWJsZXMgYmVpbmdcclxuXHQgKiB1c2VkLCBpbiBvcmRlciB0byBlbnN1cmUgY29tcGF0aWJpbGl0eS5cclxuXHQgKlxyXG5cdCAqICBAcGFyYW0ge3N0cmluZ30gdmVyc2lvbiBWZXJzaW9uIHN0cmluZyB0byBjaGVjayBmb3IsIGluIHRoZSBmb3JtYXQgXCJYLlkuWlwiLlxyXG5cdCAqICAgIE5vdGUgdGhhdCB0aGUgZm9ybWF0cyBcIlhcIiBhbmQgXCJYLllcIiBhcmUgYWxzbyBhY2NlcHRhYmxlLlxyXG5cdCAqICBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGlzIHZlcnNpb24gb2YgRGF0YVRhYmxlcyBpcyBncmVhdGVyIG9yIGVxdWFsIHRvXHJcblx0ICogICAgdGhlIHJlcXVpcmVkIHZlcnNpb24sIG9yIGZhbHNlIGlmIHRoaXMgdmVyc2lvbiBvZiBEYXRhVGFsZXMgaXMgbm90XHJcblx0ICogICAgc3VpdGFibGVcclxuXHQgKiAgQHN0YXRpY1xyXG5cdCAqICBAZHRvcHQgQVBJLVN0YXRpY1xyXG5cdCAqXHJcblx0ICogIEBleGFtcGxlXHJcblx0ICogICAgYWxlcnQoICQuZm4uZGF0YVRhYmxlLnZlcnNpb25DaGVjayggJzEuOS4wJyApICk7XHJcblx0ICovXHJcblx0RGF0YVRhYmxlLnZlcnNpb25DaGVjayA9IERhdGFUYWJsZS5mblZlcnNpb25DaGVjayA9IGZ1bmN0aW9uKCB2ZXJzaW9uIClcclxuXHR7XHJcblx0XHR2YXIgYVRoaXMgPSBEYXRhVGFibGUudmVyc2lvbi5zcGxpdCgnLicpO1xyXG5cdFx0dmFyIGFUaGF0ID0gdmVyc2lvbi5zcGxpdCgnLicpO1xyXG5cdFx0dmFyIGlUaGlzLCBpVGhhdDtcclxuXHRcclxuXHRcdGZvciAoIHZhciBpPTAsIGlMZW49YVRoYXQubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkge1xyXG5cdFx0XHRpVGhpcyA9IHBhcnNlSW50KCBhVGhpc1tpXSwgMTAgKSB8fCAwO1xyXG5cdFx0XHRpVGhhdCA9IHBhcnNlSW50KCBhVGhhdFtpXSwgMTAgKSB8fCAwO1xyXG5cdFxyXG5cdFx0XHQvLyBQYXJ0cyBhcmUgdGhlIHNhbWUsIGtlZXAgY29tcGFyaW5nXHJcblx0XHRcdGlmIChpVGhpcyA9PT0gaVRoYXQpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHQvLyBQYXJ0cyBhcmUgZGlmZmVyZW50LCByZXR1cm4gaW1tZWRpYXRlbHlcclxuXHRcdFx0cmV0dXJuIGlUaGlzID4gaVRoYXQ7XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENoZWNrIGlmIGEgYDx0YWJsZT5gIG5vZGUgaXMgYSBEYXRhVGFibGUgdGFibGUgYWxyZWFkeSBvciBub3QuXHJcblx0ICpcclxuXHQgKiAgQHBhcmFtIHtub2RlfGpxdWVyeXxzdHJpbmd9IHRhYmxlIFRhYmxlIG5vZGUsIGpRdWVyeSBvYmplY3Qgb3IgalF1ZXJ5XHJcblx0ICogICAgICBzZWxlY3RvciBmb3IgdGhlIHRhYmxlIHRvIHRlc3QuIE5vdGUgdGhhdCBpZiBtb3JlIHRoYW4gbW9yZSB0aGFuIG9uZVxyXG5cdCAqICAgICAgdGFibGUgaXMgcGFzc2VkIG9uLCBvbmx5IHRoZSBmaXJzdCB3aWxsIGJlIGNoZWNrZWRcclxuXHQgKiAgQHJldHVybnMge2Jvb2xlYW59IHRydWUgdGhlIHRhYmxlIGdpdmVuIGlzIGEgRGF0YVRhYmxlLCBvciBmYWxzZSBvdGhlcndpc2VcclxuXHQgKiAgQHN0YXRpY1xyXG5cdCAqICBAZHRvcHQgQVBJLVN0YXRpY1xyXG5cdCAqXHJcblx0ICogIEBleGFtcGxlXHJcblx0ICogICAgaWYgKCAhICQuZm4uRGF0YVRhYmxlLmlzRGF0YVRhYmxlKCAnI2V4YW1wbGUnICkgKSB7XHJcblx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgpO1xyXG5cdCAqICAgIH1cclxuXHQgKi9cclxuXHREYXRhVGFibGUuaXNEYXRhVGFibGUgPSBEYXRhVGFibGUuZm5Jc0RhdGFUYWJsZSA9IGZ1bmN0aW9uICggdGFibGUgKVxyXG5cdHtcclxuXHRcdHZhciB0ID0gJCh0YWJsZSkuZ2V0KDApO1xyXG5cdFx0dmFyIGlzID0gZmFsc2U7XHJcblx0XHJcblx0XHQkLmVhY2goIERhdGFUYWJsZS5zZXR0aW5ncywgZnVuY3Rpb24gKGksIG8pIHtcclxuXHRcdFx0dmFyIGhlYWQgPSBvLm5TY3JvbGxIZWFkID8gJCgndGFibGUnLCBvLm5TY3JvbGxIZWFkKVswXSA6IG51bGw7XHJcblx0XHRcdHZhciBmb290ID0gby5uU2Nyb2xsRm9vdCA/ICQoJ3RhYmxlJywgby5uU2Nyb2xsRm9vdClbMF0gOiBudWxsO1xyXG5cdFxyXG5cdFx0XHRpZiAoIG8ublRhYmxlID09PSB0IHx8IGhlYWQgPT09IHQgfHwgZm9vdCA9PT0gdCApIHtcclxuXHRcdFx0XHRpcyA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcclxuXHRcdHJldHVybiBpcztcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEdldCBhbGwgRGF0YVRhYmxlIHRhYmxlcyB0aGF0IGhhdmUgYmVlbiBpbml0aWFsaXNlZCAtIG9wdGlvbmFsbHkgeW91IGNhblxyXG5cdCAqIHNlbGVjdCB0byBnZXQgb25seSBjdXJyZW50bHkgdmlzaWJsZSB0YWJsZXMuXHJcblx0ICpcclxuXHQgKiAgQHBhcmFtIHtib29sZWFufSBbdmlzaWJsZT1mYWxzZV0gRmxhZyB0byBpbmRpY2F0ZSBpZiB5b3Ugd2FudCBhbGwgKGRlZmF1bHQpXHJcblx0ICogICAgb3IgdmlzaWJsZSB0YWJsZXMgb25seS5cclxuXHQgKiAgQHJldHVybnMge2FycmF5fSBBcnJheSBvZiBgdGFibGVgIG5vZGVzIChub3QgRGF0YVRhYmxlIGluc3RhbmNlcykgd2hpY2ggYXJlXHJcblx0ICogICAgRGF0YVRhYmxlc1xyXG5cdCAqICBAc3RhdGljXHJcblx0ICogIEBkdG9wdCBBUEktU3RhdGljXHJcblx0ICpcclxuXHQgKiAgQGV4YW1wbGVcclxuXHQgKiAgICAkLmVhY2goICQuZm4uZGF0YVRhYmxlLnRhYmxlcyh0cnVlKSwgZnVuY3Rpb24gKCkge1xyXG5cdCAqICAgICAgJCh0YWJsZSkuRGF0YVRhYmxlKCkuY29sdW1ucy5hZGp1c3QoKTtcclxuXHQgKiAgICB9ICk7XHJcblx0ICovXHJcblx0RGF0YVRhYmxlLnRhYmxlcyA9IERhdGFUYWJsZS5mblRhYmxlcyA9IGZ1bmN0aW9uICggdmlzaWJsZSApXHJcblx0e1xyXG5cdFx0dmFyIGFwaSA9IGZhbHNlO1xyXG5cdFxyXG5cdFx0aWYgKCAkLmlzUGxhaW5PYmplY3QoIHZpc2libGUgKSApIHtcclxuXHRcdFx0YXBpID0gdmlzaWJsZS5hcGk7XHJcblx0XHRcdHZpc2libGUgPSB2aXNpYmxlLnZpc2libGU7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgYSA9ICQubWFwKCBEYXRhVGFibGUuc2V0dGluZ3MsIGZ1bmN0aW9uIChvKSB7XHJcblx0XHRcdGlmICggIXZpc2libGUgfHwgKHZpc2libGUgJiYgJChvLm5UYWJsZSkuaXMoJzp2aXNpYmxlJykpICkge1xyXG5cdFx0XHRcdHJldHVybiBvLm5UYWJsZTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGFwaSA/XHJcblx0XHRcdG5ldyBfQXBpKCBhICkgOlxyXG5cdFx0XHRhO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ29udmVydCBmcm9tIGNhbWVsIGNhc2UgcGFyYW1ldGVycyB0byBIdW5nYXJpYW4gbm90YXRpb24uIFRoaXMgaXMgbWFkZSBwdWJsaWNcclxuXHQgKiBmb3IgdGhlIGV4dGVuc2lvbnMgdG8gcHJvdmlkZSB0aGUgc2FtZSBhYmlsaXR5IGFzIERhdGFUYWJsZXMgY29yZSB0byBhY2NlcHRcclxuXHQgKiBlaXRoZXIgdGhlIDEuOSBzdHlsZSBIdW5nYXJpYW4gbm90YXRpb24sIG9yIHRoZSAxLjEwKyBzdHlsZSBjYW1lbENhc2VcclxuXHQgKiBwYXJhbWV0ZXJzLlxyXG5cdCAqXHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBzcmMgVGhlIG1vZGVsIG9iamVjdCB3aGljaCBob2xkcyBhbGwgcGFyYW1ldGVycyB0aGF0IGNhbiBiZVxyXG5cdCAqICAgIG1hcHBlZC5cclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IHVzZXIgVGhlIG9iamVjdCB0byBjb252ZXJ0IGZyb20gY2FtZWwgY2FzZSB0byBIdW5nYXJpYW4uXHJcblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2UgV2hlbiBzZXQgdG8gYHRydWVgLCBwcm9wZXJ0aWVzIHdoaWNoIGFscmVhZHkgaGF2ZSBhXHJcblx0ICogICAgSHVuZ2FyaWFuIHZhbHVlIGluIHRoZSBgdXNlcmAgb2JqZWN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uIE90aGVyd2lzZSB0aGV5XHJcblx0ICogICAgd29uJ3QgYmUuXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLmNhbWVsVG9IdW5nYXJpYW4gPSBfZm5DYW1lbFRvSHVuZ2FyaWFuO1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0X2FwaV9yZWdpc3RlciggJyQoKScsIGZ1bmN0aW9uICggc2VsZWN0b3IsIG9wdHMgKSB7XHJcblx0XHR2YXJcclxuXHRcdFx0cm93cyAgID0gdGhpcy5yb3dzKCBvcHRzICkubm9kZXMoKSwgLy8gR2V0IGFsbCByb3dzXHJcblx0XHRcdGpxUm93cyA9ICQocm93cyk7XHJcblx0XHJcblx0XHRyZXR1cm4gJCggW10uY29uY2F0KFxyXG5cdFx0XHRqcVJvd3MuZmlsdGVyKCBzZWxlY3RvciApLnRvQXJyYXkoKSxcclxuXHRcdFx0anFSb3dzLmZpbmQoIHNlbGVjdG9yICkudG9BcnJheSgpXHJcblx0XHQpICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdC8vIGpRdWVyeSBmdW5jdGlvbnMgdG8gb3BlcmF0ZSBvbiB0aGUgdGFibGVzXHJcblx0JC5lYWNoKCBbICdvbicsICdvbmUnLCAnb2ZmJyBdLCBmdW5jdGlvbiAoaSwga2V5KSB7XHJcblx0XHRfYXBpX3JlZ2lzdGVyKCBrZXkrJygpJywgZnVuY3Rpb24gKCAvKiBldmVudCwgaGFuZGxlciAqLyApIHtcclxuXHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG5cdFxyXG5cdFx0XHQvLyBBZGQgdGhlIGBkdGAgbmFtZXNwYWNlIGF1dG9tYXRpY2FsbHkgaWYgaXQgaXNuJ3QgYWxyZWFkeSBwcmVzZW50XHJcblx0XHRcdGlmICggISBhcmdzWzBdLm1hdGNoKC9cXC5kdFxcYi8pICkge1xyXG5cdFx0XHRcdGFyZ3NbMF0gKz0gJy5kdCc7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0dmFyIGluc3QgPSAkKCB0aGlzLnRhYmxlcygpLm5vZGVzKCkgKTtcclxuXHRcdFx0aW5zdFtrZXldLmFwcGx5KCBpbnN0LCBhcmdzICk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAnY2xlYXIoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCAndGFibGUnLCBmdW5jdGlvbiAoIHNldHRpbmdzICkge1xyXG5cdFx0XHRfZm5DbGVhclRhYmxlKCBzZXR0aW5ncyApO1xyXG5cdFx0fSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHRfYXBpX3JlZ2lzdGVyKCAnc2V0dGluZ3MoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiBuZXcgX0FwaSggdGhpcy5jb250ZXh0LCB0aGlzLmNvbnRleHQgKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ2luaXQoKScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XHJcblx0XHRyZXR1cm4gY3R4Lmxlbmd0aCA/IGN0eFswXS5vSW5pdCA6IG51bGw7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdF9hcGlfcmVnaXN0ZXIoICdkYXRhKCknLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVyYXRvciggJ3RhYmxlJywgZnVuY3Rpb24gKCBzZXR0aW5ncyApIHtcclxuXHRcdFx0cmV0dXJuIF9wbHVjayggc2V0dGluZ3MuYW9EYXRhLCAnX2FEYXRhJyApO1xyXG5cdFx0fSApLmZsYXR0ZW4oKTtcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0X2FwaV9yZWdpc3RlciggJ2Rlc3Ryb3koKScsIGZ1bmN0aW9uICggcmVtb3ZlICkge1xyXG5cdFx0cmVtb3ZlID0gcmVtb3ZlIHx8IGZhbHNlO1xyXG5cdFxyXG5cdFx0cmV0dXJuIHRoaXMuaXRlcmF0b3IoICd0YWJsZScsIGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdHZhciBvcmlnICAgICAgPSBzZXR0aW5ncy5uVGFibGVXcmFwcGVyLnBhcmVudE5vZGU7XHJcblx0XHRcdHZhciBjbGFzc2VzICAgPSBzZXR0aW5ncy5vQ2xhc3NlcztcclxuXHRcdFx0dmFyIHRhYmxlICAgICA9IHNldHRpbmdzLm5UYWJsZTtcclxuXHRcdFx0dmFyIHRib2R5ICAgICA9IHNldHRpbmdzLm5UQm9keTtcclxuXHRcdFx0dmFyIHRoZWFkICAgICA9IHNldHRpbmdzLm5USGVhZDtcclxuXHRcdFx0dmFyIHRmb290ICAgICA9IHNldHRpbmdzLm5URm9vdDtcclxuXHRcdFx0dmFyIGpxVGFibGUgICA9ICQodGFibGUpO1xyXG5cdFx0XHR2YXIganFUYm9keSAgID0gJCh0Ym9keSk7XHJcblx0XHRcdHZhciBqcVdyYXBwZXIgPSAkKHNldHRpbmdzLm5UYWJsZVdyYXBwZXIpO1xyXG5cdFx0XHR2YXIgcm93cyAgICAgID0gJC5tYXAoIHNldHRpbmdzLmFvRGF0YSwgZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIublRyOyB9ICk7XHJcblx0XHRcdHZhciBpLCBpZW47XHJcblx0XHJcblx0XHRcdC8vIEZsYWcgdG8gbm90ZSB0aGF0IHRoZSB0YWJsZSBpcyBjdXJyZW50bHkgYmVpbmcgZGVzdHJveWVkIC0gbm8gYWN0aW9uXHJcblx0XHRcdC8vIHNob3VsZCBiZSB0YWtlblxyXG5cdFx0XHRzZXR0aW5ncy5iRGVzdHJveWluZyA9IHRydWU7XHJcblx0XHJcblx0XHRcdC8vIEZpcmUgb2ZmIHRoZSBkZXN0cm95IGNhbGxiYWNrcyBmb3IgcGx1Zy1pbnMgZXRjXHJcblx0XHRcdF9mbkNhbGxiYWNrRmlyZSggc2V0dGluZ3MsIFwiYW9EZXN0cm95Q2FsbGJhY2tcIiwgXCJkZXN0cm95XCIsIFtzZXR0aW5nc10gKTtcclxuXHRcclxuXHRcdFx0Ly8gSWYgbm90IGJlaW5nIHJlbW92ZWQgZnJvbSB0aGUgZG9jdW1lbnQsIG1ha2UgYWxsIGNvbHVtbnMgdmlzaWJsZVxyXG5cdFx0XHRpZiAoICEgcmVtb3ZlICkge1xyXG5cdFx0XHRcdG5ldyBfQXBpKCBzZXR0aW5ncyApLmNvbHVtbnMoKS52aXNpYmxlKCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gQmxpdHogYWxsIGBEVGAgbmFtZXNwYWNlZCBldmVudHMgKHRoZXNlIGFyZSBpbnRlcm5hbCBldmVudHMsIHRoZVxyXG5cdFx0XHQvLyBsb3dlcmNhc2UsIGBkdGAgZXZlbnRzIGFyZSB1c2VyIHN1YnNjcmliZWQgYW5kIHRoZXkgYXJlIHJlc3BvbnNpYmxlXHJcblx0XHRcdC8vIGZvciByZW1vdmluZyB0aGVtXHJcblx0XHRcdGpxV3JhcHBlci51bmJpbmQoJy5EVCcpLmZpbmQoJzpub3QodGJvZHkgKiknKS51bmJpbmQoJy5EVCcpO1xyXG5cdFx0XHQkKHdpbmRvdykudW5iaW5kKCcuRFQtJytzZXR0aW5ncy5zSW5zdGFuY2UpO1xyXG5cdFxyXG5cdFx0XHQvLyBXaGVuIHNjcm9sbGluZyB3ZSBoYWQgdG8gYnJlYWsgdGhlIHRhYmxlIHVwIC0gcmVzdG9yZSBpdFxyXG5cdFx0XHRpZiAoIHRhYmxlICE9IHRoZWFkLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0anFUYWJsZS5jaGlsZHJlbigndGhlYWQnKS5kZXRhY2goKTtcclxuXHRcdFx0XHRqcVRhYmxlLmFwcGVuZCggdGhlYWQgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRpZiAoIHRmb290ICYmIHRhYmxlICE9IHRmb290LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0anFUYWJsZS5jaGlsZHJlbigndGZvb3QnKS5kZXRhY2goKTtcclxuXHRcdFx0XHRqcVRhYmxlLmFwcGVuZCggdGZvb3QgKTtcclxuXHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRzZXR0aW5ncy5hYVNvcnRpbmcgPSBbXTtcclxuXHRcdFx0c2V0dGluZ3MuYWFTb3J0aW5nRml4ZWQgPSBbXTtcclxuXHRcdFx0X2ZuU29ydGluZ0NsYXNzZXMoIHNldHRpbmdzICk7XHJcblx0XHJcblx0XHRcdCQoIHJvd3MgKS5yZW1vdmVDbGFzcyggc2V0dGluZ3MuYXNTdHJpcGVDbGFzc2VzLmpvaW4oJyAnKSApO1xyXG5cdFxyXG5cdFx0XHQkKCd0aCwgdGQnLCB0aGVhZCkucmVtb3ZlQ2xhc3MoIGNsYXNzZXMuc1NvcnRhYmxlKycgJytcclxuXHRcdFx0XHRjbGFzc2VzLnNTb3J0YWJsZUFzYysnICcrY2xhc3Nlcy5zU29ydGFibGVEZXNjKycgJytjbGFzc2VzLnNTb3J0YWJsZU5vbmVcclxuXHRcdFx0KTtcclxuXHRcclxuXHRcdFx0aWYgKCBzZXR0aW5ncy5iSlVJICkge1xyXG5cdFx0XHRcdCQoJ3RoIHNwYW4uJytjbGFzc2VzLnNTb3J0SWNvbisgJywgdGQgc3Bhbi4nK2NsYXNzZXMuc1NvcnRJY29uLCB0aGVhZCkuZGV0YWNoKCk7XHJcblx0XHRcdFx0JCgndGgsIHRkJywgdGhlYWQpLmVhY2goIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHZhciB3cmFwcGVyID0gJCgnZGl2LicrY2xhc3Nlcy5zU29ydEpVSVdyYXBwZXIsIHRoaXMpO1xyXG5cdFx0XHRcdFx0JCh0aGlzKS5hcHBlbmQoIHdyYXBwZXIuY29udGVudHMoKSApO1xyXG5cdFx0XHRcdFx0d3JhcHBlci5kZXRhY2goKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8gQWRkIHRoZSBUUiBlbGVtZW50cyBiYWNrIGludG8gdGhlIHRhYmxlIGluIHRoZWlyIG9yaWdpbmFsIG9yZGVyXHJcblx0XHRcdGpxVGJvZHkuY2hpbGRyZW4oKS5kZXRhY2goKTtcclxuXHRcdFx0anFUYm9keS5hcHBlbmQoIHJvd3MgKTtcclxuXHRcclxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBEYXRhVGFibGVzIGdlbmVyYXRlZCBub2RlcywgZXZlbnRzIGFuZCBjbGFzc2VzXHJcblx0XHRcdHZhciByZW1vdmVkTWV0aG9kID0gcmVtb3ZlID8gJ3JlbW92ZScgOiAnZGV0YWNoJztcclxuXHRcdFx0anFUYWJsZVsgcmVtb3ZlZE1ldGhvZCBdKCk7XHJcblx0XHRcdGpxV3JhcHBlclsgcmVtb3ZlZE1ldGhvZCBdKCk7XHJcblx0XHJcblx0XHRcdC8vIElmIHdlIG5lZWQgdG8gcmVhdHRhY2ggdGhlIHRhYmxlIHRvIHRoZSBkb2N1bWVudFxyXG5cdFx0XHRpZiAoICEgcmVtb3ZlICYmIG9yaWcgKSB7XHJcblx0XHRcdFx0Ly8gaW5zZXJ0QmVmb3JlIGFjdHMgbGlrZSBhcHBlbmRDaGlsZCBpZiAhYXJnWzFdXHJcblx0XHRcdFx0b3JpZy5pbnNlcnRCZWZvcmUoIHRhYmxlLCBzZXR0aW5ncy5uVGFibGVSZWluc2VydEJlZm9yZSApO1xyXG5cdFxyXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIHdpZHRoIG9mIHRoZSBvcmlnaW5hbCB0YWJsZSAtIHdhcyByZWFkIGZyb20gdGhlIHN0eWxlIHByb3BlcnR5LFxyXG5cdFx0XHRcdC8vIHNvIHdlIGNhbiByZXN0b3JlIGRpcmVjdGx5IHRvIHRoYXRcclxuXHRcdFx0XHRqcVRhYmxlXHJcblx0XHRcdFx0XHQuY3NzKCAnd2lkdGgnLCBzZXR0aW5ncy5zRGVzdHJveVdpZHRoIClcclxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggY2xhc3Nlcy5zVGFibGUgKTtcclxuXHRcclxuXHRcdFx0XHQvLyBJZiB0aGUgd2VyZSBvcmlnaW5hbGx5IHN0cmlwZSBjbGFzc2VzIC0gdGhlbiB3ZSBhZGQgdGhlbSBiYWNrIGhlcmUuXHJcblx0XHRcdFx0Ly8gTm90ZSB0aGlzIGlzIG5vdCBmb29sIHByb29mIChmb3IgZXhhbXBsZSBpZiBub3QgYWxsIHJvd3MgaGFkIHN0cmlwZVxyXG5cdFx0XHRcdC8vIGNsYXNzZXMgLSBidXQgaXQncyBhIGdvb2QgZWZmb3J0IHdpdGhvdXQgZ2V0dGluZyBjYXJyaWVkIGF3YXlcclxuXHRcdFx0XHRpZW4gPSBzZXR0aW5ncy5hc0Rlc3Ryb3lTdHJpcGVzLmxlbmd0aDtcclxuXHRcclxuXHRcdFx0XHRpZiAoIGllbiApIHtcclxuXHRcdFx0XHRcdGpxVGJvZHkuY2hpbGRyZW4oKS5lYWNoKCBmdW5jdGlvbiAoaSkge1xyXG5cdFx0XHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKCBzZXR0aW5ncy5hc0Rlc3Ryb3lTdHJpcGVzW2kgJSBpZW5dICk7XHJcblx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdC8qIFJlbW92ZSB0aGUgc2V0dGluZ3Mgb2JqZWN0IGZyb20gdGhlIHNldHRpbmdzIGFycmF5ICovXHJcblx0XHRcdHZhciBpZHggPSAkLmluQXJyYXkoIHNldHRpbmdzLCBEYXRhVGFibGUuc2V0dGluZ3MgKTtcclxuXHRcdFx0aWYgKCBpZHggIT09IC0xICkge1xyXG5cdFx0XHRcdERhdGFUYWJsZS5zZXR0aW5ncy5zcGxpY2UoIGlkeCwgMSApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdC8vIEFkZCB0aGUgYGV2ZXJ5KClgIG1ldGhvZCBmb3Igcm93cywgY29sdW1ucyBhbmQgY2VsbHMgaW4gYSBjb21wYWN0IGZvcm1cclxuXHQkLmVhY2goIFsgJ2NvbHVtbicsICdyb3cnLCAnY2VsbCcgXSwgZnVuY3Rpb24gKCBpLCB0eXBlICkge1xyXG5cdFx0X2FwaV9yZWdpc3RlciggdHlwZSsncygpLmV2ZXJ5KCknLCBmdW5jdGlvbiAoIGZuICkge1xyXG5cdFx0XHR2YXIgb3B0cyA9IHRoaXMuc2VsZWN0b3Iub3B0cztcclxuXHRcdFx0dmFyIGFwaSA9IHRoaXM7XHJcblx0XHJcblx0XHRcdHJldHVybiB0aGlzLml0ZXJhdG9yKCB0eXBlLCBmdW5jdGlvbiAoIHNldHRpbmdzLCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0ICkge1xyXG5cdFx0XHRcdC8vIFJvd3MgYW5kIGNvbHVtbnM6XHJcblx0XHRcdFx0Ly8gIGFyZzEgLSBpbmRleFxyXG5cdFx0XHRcdC8vICBhcmcyIC0gdGFibGUgY291bnRlclxyXG5cdFx0XHRcdC8vICBhcmczIC0gbG9vcCBjb3VudGVyXHJcblx0XHRcdFx0Ly8gIGFyZzQgLSB1bmRlZmluZWRcclxuXHRcdFx0XHQvLyBDZWxsczpcclxuXHRcdFx0XHQvLyAgYXJnMSAtIHJvdyBpbmRleFxyXG5cdFx0XHRcdC8vICBhcmcyIC0gY29sdW1uIGluZGV4XHJcblx0XHRcdFx0Ly8gIGFyZzMgLSB0YWJsZSBjb3VudGVyXHJcblx0XHRcdFx0Ly8gIGFyZzQgLSBsb29wIGNvdW50ZXJcclxuXHRcdFx0XHRmbi5jYWxsKFxyXG5cdFx0XHRcdFx0YXBpWyB0eXBlIF0oXHJcblx0XHRcdFx0XHRcdGFyZzEsXHJcblx0XHRcdFx0XHRcdHR5cGU9PT0nY2VsbCcgPyBhcmcyIDogb3B0cyxcclxuXHRcdFx0XHRcdFx0dHlwZT09PSdjZWxsJyA/IG9wdHMgOiB1bmRlZmluZWRcclxuXHRcdFx0XHRcdCksXHJcblx0XHRcdFx0XHRhcmcxLCBhcmcyLCBhcmczLCBhcmc0XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSApO1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHQvLyBpMThuIG1ldGhvZCBmb3IgZXh0ZW5zaW9ucyB0byBiZSBhYmxlIHRvIHVzZSB0aGUgbGFuZ3VhZ2Ugb2JqZWN0IGZyb20gdGhlXHJcblx0Ly8gRGF0YVRhYmxlXHJcblx0X2FwaV9yZWdpc3RlciggJ2kxOG4oKScsIGZ1bmN0aW9uICggdG9rZW4sIGRlZiwgcGx1cmFsICkge1xyXG5cdFx0dmFyIGN0eCA9IHRoaXMuY29udGV4dFswXTtcclxuXHRcdHZhciByZXNvbHZlZCA9IF9mbkdldE9iamVjdERhdGFGbiggdG9rZW4gKSggY3R4Lm9MYW5ndWFnZSApO1xyXG5cdFxyXG5cdFx0aWYgKCByZXNvbHZlZCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXNvbHZlZCA9IGRlZjtcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmICggcGx1cmFsICE9PSB1bmRlZmluZWQgJiYgJC5pc1BsYWluT2JqZWN0KCByZXNvbHZlZCApICkge1xyXG5cdFx0XHRyZXNvbHZlZCA9IHJlc29sdmVkWyBwbHVyYWwgXSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRyZXNvbHZlZFsgcGx1cmFsIF0gOlxyXG5cdFx0XHRcdHJlc29sdmVkLl87XHJcblx0XHR9XHJcblx0XHJcblx0XHRyZXR1cm4gcmVzb2x2ZWQucmVwbGFjZSggJyVkJywgcGx1cmFsICk7IC8vIG5iOiBwbHVyYWwgbWlnaHQgYmUgdW5kZWZpbmVkLFxyXG5cdH0gKTtcclxuXHJcblx0LyoqXHJcblx0ICogVmVyc2lvbiBzdHJpbmcgZm9yIHBsdWctaW5zIHRvIGNoZWNrIGNvbXBhdGliaWxpdHkuIEFsbG93ZWQgZm9ybWF0IGlzXHJcblx0ICogYGEuYi5jLWRgIHdoZXJlOiBhOmludCwgYjppbnQsIGM6aW50LCBkOnN0cmluZyhkZXZ8YmV0YXxhbHBoYSkuIGBkYCBpcyB1c2VkXHJcblx0ICogb25seSBmb3Igbm9uLXJlbGVhc2UgYnVpbGRzLiBTZWUgaHR0cDovL3NlbXZlci5vcmcvIGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG5cdCAqICBAbWVtYmVyXHJcblx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdCAqICBAZGVmYXVsdCBWZXJzaW9uIG51bWJlclxyXG5cdCAqL1xyXG5cdERhdGFUYWJsZS52ZXJzaW9uID0gXCIxLjEwLjEyXCI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByaXZhdGUgZGF0YSBzdG9yZSwgY29udGFpbmluZyBhbGwgb2YgdGhlIHNldHRpbmdzIG9iamVjdHMgdGhhdCBhcmVcclxuXHQgKiBjcmVhdGVkIGZvciB0aGUgdGFibGVzIG9uIGEgZ2l2ZW4gcGFnZS5cclxuXHQgKlxyXG5cdCAqIE5vdGUgdGhhdCB0aGUgYERhdGFUYWJsZS5zZXR0aW5nc2Agb2JqZWN0IGlzIGFsaWFzZWQgdG9cclxuXHQgKiBgalF1ZXJ5LmZuLmRhdGFUYWJsZUV4dGAgdGhyb3VnaCB3aGljaCBpdCBtYXkgYmUgYWNjZXNzZWQgYW5kXHJcblx0ICogbWFuaXB1bGF0ZWQsIG9yIGBqUXVlcnkuZm4uZGF0YVRhYmxlLnNldHRpbmdzYC5cclxuXHQgKiAgQG1lbWJlclxyXG5cdCAqICBAdHlwZSBhcnJheVxyXG5cdCAqICBAZGVmYXVsdCBbXVxyXG5cdCAqICBAcHJpdmF0ZVxyXG5cdCAqL1xyXG5cdERhdGFUYWJsZS5zZXR0aW5ncyA9IFtdO1xyXG5cclxuXHQvKipcclxuXHQgKiBPYmplY3QgbW9kZWxzIGNvbnRhaW5lciwgZm9yIHRoZSB2YXJpb3VzIG1vZGVscyB0aGF0IERhdGFUYWJsZXMgaGFzXHJcblx0ICogYXZhaWxhYmxlIHRvIGl0LiBUaGVzZSBtb2RlbHMgZGVmaW5lIHRoZSBvYmplY3RzIHRoYXQgYXJlIHVzZWQgdG8gaG9sZFxyXG5cdCAqIHRoZSBhY3RpdmUgc3RhdGUgYW5kIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHRhYmxlLlxyXG5cdCAqICBAbmFtZXNwYWNlXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLm1vZGVscyA9IHt9O1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRlbXBsYXRlIG9iamVjdCBmb3IgdGhlIHdheSBpbiB3aGljaCBEYXRhVGFibGVzIGhvbGRzIGluZm9ybWF0aW9uIGFib3V0XHJcblx0ICogc2VhcmNoIGluZm9ybWF0aW9uIGZvciB0aGUgZ2xvYmFsIGZpbHRlciBhbmQgaW5kaXZpZHVhbCBjb2x1bW4gZmlsdGVycy5cclxuXHQgKiAgQG5hbWVzcGFjZVxyXG5cdCAqL1xyXG5cdERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaCA9IHtcclxuXHRcdC8qKlxyXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgZmlsdGVyaW5nIHNob3VsZCBiZSBjYXNlIGluc2Vuc2l0aXZlIG9yIG5vdFxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXHJcblx0XHQgKi9cclxuXHRcdFwiYkNhc2VJbnNlbnNpdGl2ZVwiOiB0cnVlLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBcHBsaWVkIHNlYXJjaCB0ZXJtXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgPGk+RW1wdHkgc3RyaW5nPC9pPlxyXG5cdFx0ICovXHJcblx0XHRcInNTZWFyY2hcIjogXCJcIixcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgc2VhcmNoIHRlcm0gc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGFcclxuXHRcdCAqIHJlZ3VsYXIgZXhwcmVzc2lvbiAodHJ1ZSkgb3Igbm90IChmYWxzZSkgYW5kIHRoZXJlZm9yZSBhbmQgc3BlY2lhbFxyXG5cdFx0ICogcmVnZXggY2hhcmFjdGVycyBlc2NhcGVkLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICovXHJcblx0XHRcImJSZWdleFwiOiBmYWxzZSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiBEYXRhVGFibGVzIGlzIHRvIHVzZSBpdHMgc21hcnQgZmlsdGVyaW5nIG9yIG5vdC5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxyXG5cdFx0ICovXHJcblx0XHRcImJTbWFydFwiOiB0cnVlXHJcblx0fTtcclxuXHRcclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBUZW1wbGF0ZSBvYmplY3QgZm9yIHRoZSB3YXkgaW4gd2hpY2ggRGF0YVRhYmxlcyBob2xkcyBpbmZvcm1hdGlvbiBhYm91dFxyXG5cdCAqIGVhY2ggaW5kaXZpZHVhbCByb3cuIFRoaXMgaXMgdGhlIG9iamVjdCBmb3JtYXQgdXNlZCBmb3IgdGhlIHNldHRpbmdzXHJcblx0ICogYW9EYXRhIGFycmF5LlxyXG5cdCAqICBAbmFtZXNwYWNlXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLm1vZGVscy5vUm93ID0ge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBUUiBlbGVtZW50IGZvciB0aGUgcm93XHJcblx0XHQgKiAgQHR5cGUgbm9kZVxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJuVHJcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQXJyYXkgb2YgVEQgZWxlbWVudHMgZm9yIGVhY2ggcm93LiBUaGlzIGlzIG51bGwgdW50aWwgdGhlIHJvdyBoYXMgYmVlblxyXG5cdFx0ICogY3JlYXRlZC5cclxuXHRcdCAqICBAdHlwZSBhcnJheSBub2Rlc1xyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYW5DZWxsc1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEYXRhIG9iamVjdCBmcm9tIHRoZSBvcmlnaW5hbCBkYXRhIHNvdXJjZSBmb3IgdGhlIHJvdy4gVGhpcyBpcyBlaXRoZXJcclxuXHRcdCAqIGFuIGFycmF5IGlmIHVzaW5nIHRoZSB0cmFkaXRpb25hbCBmb3JtIG9mIERhdGFUYWJsZXMsIG9yIGFuIG9iamVjdCBpZlxyXG5cdFx0ICogdXNpbmcgbURhdGEgb3B0aW9ucy4gVGhlIGV4YWN0IHR5cGUgd2lsbCBkZXBlbmQgb24gdGhlIHBhc3NlZCBpblxyXG5cdFx0ICogZGF0YSBmcm9tIHRoZSBkYXRhIHNvdXJjZSwgb3Igd2lsbCBiZSBhbiBhcnJheSBpZiB1c2luZyBET00gYSBkYXRhXHJcblx0XHQgKiBzb3VyY2UuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXl8b2JqZWN0XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJfYURhdGFcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNvcnRpbmcgZGF0YSBjYWNoZSAtIHRoaXMgYXJyYXkgaXMgb3N0ZW5zaWJseSB0aGUgc2FtZSBsZW5ndGggYXMgdGhlXHJcblx0XHQgKiBudW1iZXIgb2YgY29sdW1ucyAoYWx0aG91Z2ggZWFjaCBpbmRleCBpcyBnZW5lcmF0ZWQgb25seSBhcyBpdCBpc1xyXG5cdFx0ICogbmVlZGVkKSwgYW5kIGhvbGRzIHRoZSBkYXRhIHRoYXQgaXMgdXNlZCBmb3Igc29ydGluZyBlYWNoIGNvbHVtbiBpbiB0aGVcclxuXHRcdCAqIHJvdy4gV2UgZG8gdGhpcyBjYWNoZSBnZW5lcmF0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgc29ydCBpbiBvcmRlciB0aGF0XHJcblx0XHQgKiB0aGUgZm9ybWF0dGluZyBvZiB0aGUgc29ydCBkYXRhIG5lZWQgYmUgZG9uZSBvbmx5IG9uY2UgZm9yIGVhY2ggY2VsbFxyXG5cdFx0ICogcGVyIHNvcnQuIFRoaXMgYXJyYXkgc2hvdWxkIG5vdCBiZSByZWFkIGZyb20gb3Igd3JpdHRlbiB0byBieSBhbnl0aGluZ1xyXG5cdFx0ICogb3RoZXIgdGhhbiB0aGUgbWFzdGVyIHNvcnRpbmcgbWV0aG9kcy5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqICBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHRcIl9hU29ydERhdGFcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogUGVyIGNlbGwgZmlsdGVyaW5nIGRhdGEgY2FjaGUuIEFzIHBlciB0aGUgc29ydCBkYXRhIGNhY2hlLCB1c2VkIHRvXHJcblx0XHQgKiBpbmNyZWFzZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGZpbHRlcmluZyBpbiBEYXRhVGFibGVzXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKiAgQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0XCJfYUZpbHRlckRhdGFcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRmlsdGVyaW5nIGRhdGEgY2FjaGUuIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGNlbGwgZmlsdGVyaW5nIGNhY2hlLCBidXRcclxuXHRcdCAqIGluIHRoaXMgY2FzZSBhIHN0cmluZyByYXRoZXIgdGhhbiBhbiBhcnJheS4gVGhpcyBpcyBlYXNpbHkgY29tcHV0ZWQgd2l0aFxyXG5cdFx0ICogYSBqb2luIG9uIGBfYUZpbHRlckRhdGFgLCBidXQgaXMgcHJvdmlkZWQgYXMgYSBjYWNoZSBzbyB0aGUgam9pbiBpc24ndFxyXG5cdFx0ICogbmVlZGVkIG9uIGV2ZXJ5IHNlYXJjaCAobWVtb3J5IHRyYWRlZCBmb3IgcGVyZm9ybWFuY2UpXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKiAgQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0XCJfc0ZpbHRlclJvd1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWNoZSBvZiB0aGUgY2xhc3MgbmFtZSB0aGF0IERhdGFUYWJsZXMgaGFzIGFwcGxpZWQgdG8gdGhlIHJvdywgc28gd2VcclxuXHRcdCAqIGNhbiBxdWlja2x5IGxvb2sgYXQgdGhpcyB2YXJpYWJsZSByYXRoZXIgdGhhbiBuZWVkaW5nIHRvIGRvIGEgRE9NIGNoZWNrXHJcblx0XHQgKiBvbiBjbGFzc05hbWUgZm9yIHRoZSBuVHIgcHJvcGVydHkuXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgPGk+RW1wdHkgc3RyaW5nPC9pPlxyXG5cdFx0ICogIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdFwiX3NSb3dTdHJpcGVcIjogXCJcIixcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGVub3RlIGlmIHRoZSBvcmlnaW5hbCBkYXRhIHNvdXJjZSB3YXMgZnJvbSB0aGUgRE9NLCBvciB0aGUgZGF0YSBzb3VyY2VcclxuXHRcdCAqIG9iamVjdC4gVGhpcyBpcyB1c2VkIGZvciBpbnZhbGlkYXRpbmcgZGF0YSwgc28gRGF0YVRhYmxlcyBjYW5cclxuXHRcdCAqIGF1dG9tYXRpY2FsbHkgcmVhZCBkYXRhIGZyb20gdGhlIG9yaWdpbmFsIHNvdXJjZSwgdW5sZXNzIHVuaW5zdHJ1Y3RlZFxyXG5cdFx0ICogb3RoZXJ3aXNlLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqICBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHRcInNyY1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbmRleCBpbiB0aGUgYW9EYXRhIGFycmF5LiBUaGlzIHNhdmVzIGFuIGluZGV4T2YgbG9va3VwIHdoZW4gd2UgaGF2ZSB0aGVcclxuXHRcdCAqIG9iamVjdCwgYnV0IHdhbnQgdG8ga25vdyB0aGUgaW5kZXhcclxuXHRcdCAqICBAdHlwZSBpbnRlZ2VyXHJcblx0XHQgKiAgQGRlZmF1bHQgLTFcclxuXHRcdCAqICBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHRcImlkeFwiOiAtMVxyXG5cdH07XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogVGVtcGxhdGUgb2JqZWN0IGZvciB0aGUgY29sdW1uIGluZm9ybWF0aW9uIG9iamVjdCBpbiBEYXRhVGFibGVzLiBUaGlzIG9iamVjdFxyXG5cdCAqIGlzIGhlbGQgaW4gdGhlIHNldHRpbmdzIGFvQ29sdW1ucyBhcnJheSBhbmQgY29udGFpbnMgYWxsIHRoZSBpbmZvcm1hdGlvbiB0aGF0XHJcblx0ICogRGF0YVRhYmxlcyBuZWVkcyBhYm91dCBlYWNoIGluZGl2aWR1YWwgY29sdW1uLlxyXG5cdCAqXHJcblx0ICogTm90ZSB0aGF0IHRoaXMgb2JqZWN0IGlzIHJlbGF0ZWQgdG8ge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW59XHJcblx0ICogYnV0IHRoaXMgb25lIGlzIHRoZSBpbnRlcm5hbCBkYXRhIHN0b3JlIGZvciBEYXRhVGFibGVzJ3MgY2FjaGUgb2YgY29sdW1ucy5cclxuXHQgKiBJdCBzaG91bGQgTk9UIGJlIG1hbmlwdWxhdGVkIG91dHNpZGUgb2YgRGF0YVRhYmxlcy4gQW55IGNvbmZpZ3VyYXRpb24gc2hvdWxkXHJcblx0ICogYmUgZG9uZSB0aHJvdWdoIHRoZSBpbml0aWFsaXNhdGlvbiBvcHRpb25zLlxyXG5cdCAqICBAbmFtZXNwYWNlXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLm1vZGVscy5vQ29sdW1uID0ge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBDb2x1bW4gaW5kZXguIFRoaXMgY291bGQgYmUgd29ya2VkIG91dCBvbi10aGUtZmx5IHdpdGggJC5pbkFycmF5LCBidXQgaXRcclxuXHRcdCAqIGlzIGZhc3RlciB0byBqdXN0IGhvbGQgaXQgYXMgYSB2YXJpYWJsZVxyXG5cdFx0ICogIEB0eXBlIGludGVnZXJcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwiaWR4XCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEEgbGlzdCBvZiB0aGUgY29sdW1ucyB0aGF0IHNvcnRpbmcgc2hvdWxkIG9jY3VyIG9uIHdoZW4gdGhpcyBjb2x1bW5cclxuXHRcdCAqIGlzIHNvcnRlZC4gVGhhdCB0aGlzIHByb3BlcnR5IGlzIGFuIGFycmF5IGFsbG93cyBtdWx0aS1jb2x1bW4gc29ydGluZ1xyXG5cdFx0ICogdG8gYmUgZGVmaW5lZCBmb3IgYSBjb2x1bW4gKGZvciBleGFtcGxlIGZpcnN0IG5hbWUgLyBsYXN0IG5hbWUgY29sdW1uc1xyXG5cdFx0ICogd291bGQgYmVuZWZpdCBmcm9tIHRoaXMpLiBUaGUgdmFsdWVzIGFyZSBpbnRlZ2VycyBwb2ludGluZyB0byB0aGVcclxuXHRcdCAqIGNvbHVtbnMgdG8gYmUgc29ydGVkIG9uICh0eXBpY2FsbHkgaXQgd2lsbCBiZSBhIHNpbmdsZSBpbnRlZ2VyIHBvaW50aW5nXHJcblx0XHQgKiBhdCBpdHNlbGYsIGJ1dCB0aGF0IGRvZXNuJ3QgbmVlZCB0byBiZSB0aGUgY2FzZSkuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqL1xyXG5cdFx0XCJhRGF0YVNvcnRcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGVmaW5lIHRoZSBzb3J0aW5nIGRpcmVjdGlvbnMgdGhhdCBhcmUgYXBwbGllZCB0byB0aGUgY29sdW1uLCBpbiBzZXF1ZW5jZVxyXG5cdFx0ICogYXMgdGhlIGNvbHVtbiBpcyByZXBlYXRlZGx5IHNvcnRlZCB1cG9uIC0gaS5lLiB0aGUgZmlyc3QgdmFsdWUgaXMgdXNlZFxyXG5cdFx0ICogYXMgdGhlIHNvcnRpbmcgZGlyZWN0aW9uIHdoZW4gdGhlIGNvbHVtbiBpZiBmaXJzdCBzb3J0ZWQgKGNsaWNrZWQgb24pLlxyXG5cdFx0ICogU29ydCBpdCBhZ2FpbiAoY2xpY2sgYWdhaW4pIGFuZCBpdCB3aWxsIG1vdmUgb24gdG8gdGhlIG5leHQgaW5kZXguXHJcblx0XHQgKiBSZXBlYXQgdW50aWwgbG9vcC5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICovXHJcblx0XHRcImFzU29ydGluZ1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGbGFnIHRvIGluZGljYXRlIGlmIHRoZSBjb2x1bW4gaXMgc2VhcmNoYWJsZSwgYW5kIHRodXMgc2hvdWxkIGJlIGluY2x1ZGVkXHJcblx0XHQgKiBpbiB0aGUgZmlsdGVyaW5nIG9yIG5vdC5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKi9cclxuXHRcdFwiYlNlYXJjaGFibGVcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgY29sdW1uIGlzIHNvcnRhYmxlIG9yIG5vdC5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKi9cclxuXHRcdFwiYlNvcnRhYmxlXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIGNvbHVtbiBpcyBjdXJyZW50bHkgdmlzaWJsZSBpbiB0aGUgdGFibGUgb3Igbm90XHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICovXHJcblx0XHRcImJWaXNpYmxlXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3JlIGZvciBtYW51YWwgdHlwZSBhc3NpZ25tZW50IHVzaW5nIHRoZSBgY29sdW1uLnR5cGVgIG9wdGlvbi4gVGhpc1xyXG5cdFx0ICogaXMgaGVsZCBpbiBzdG9yZSBzbyB3ZSBjYW4gbWFuaXB1bGF0ZSB0aGUgY29sdW1uJ3MgYHNUeXBlYCBwcm9wZXJ0eS5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKiAgQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0XCJfc01hbnVhbFR5cGVcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRmxhZyB0byBpbmRpY2F0ZSBpZiBIVE1MNSBkYXRhIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGRhdGFcclxuXHRcdCAqIHNvdXJjZSBmb3IgZmlsdGVyaW5nIG9yIHNvcnRpbmcuIFRydWUgaXMgZWl0aGVyIGFyZS5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgZmFsc2VcclxuXHRcdCAqICBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHRcIl9iQXR0clNyY1wiOiBmYWxzZSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGV2ZWxvcGVyIGRlZmluYWJsZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBhIGNlbGwgaXMgY3JlYXRlZCAoQWpheCBzb3VyY2UsXHJcblx0XHQgKiBldGMpIG9yIHByb2Nlc3NlZCBmb3IgaW5wdXQgKERPTSBzb3VyY2UpLiBUaGlzIGNhbiBiZSB1c2VkIGFzIGEgY29tcGxpbWVudCB0byBtUmVuZGVyXHJcblx0XHQgKiBhbGxvd2luZyB5b3UgdG8gbW9kaWZ5IHRoZSBET00gZWxlbWVudCAoYWRkIGJhY2tncm91bmQgY29sb3VyIGZvciBleGFtcGxlKSB3aGVuIHRoZVxyXG5cdFx0ICogZWxlbWVudCBpcyBhdmFpbGFibGUuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge2VsZW1lbnR9IG5UZCBUaGUgVEQgbm9kZSB0aGF0IGhhcyBiZWVuIGNyZWF0ZWRcclxuXHRcdCAqICBAcGFyYW0geyp9IHNEYXRhIFRoZSBEYXRhIGZvciB0aGUgY2VsbFxyXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSBvRGF0YSBUaGUgZGF0YSBmb3IgdGhlIHdob2xlIHJvd1xyXG5cdFx0ICogIEBwYXJhbSB7aW50fSBpUm93IFRoZSByb3cgaW5kZXggZm9yIHRoZSBhb0RhdGEgZGF0YSBzdG9yZVxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJmbkNyZWF0ZWRDZWxsXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZ1bmN0aW9uIHRvIGdldCBkYXRhIGZyb20gYSBjZWxsIGluIGEgY29sdW1uLiBZb3Ugc2hvdWxkIDxiPm5ldmVyPC9iPlxyXG5cdFx0ICogYWNjZXNzIGRhdGEgZGlyZWN0bHkgdGhyb3VnaCBfYURhdGEgaW50ZXJuYWxseSBpbiBEYXRhVGFibGVzIC0gYWx3YXlzIHVzZVxyXG5cdFx0ICogdGhlIG1ldGhvZCBhdHRhY2hlZCB0byB0aGlzIHByb3BlcnR5LiBJdCBhbGxvd3MgbURhdGEgdG8gZnVuY3Rpb24gYXNcclxuXHRcdCAqIHJlcXVpcmVkLiBUaGlzIGZ1bmN0aW9uIGlzIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgYnkgdGhlIGNvbHVtblxyXG5cdFx0ICogaW5pdGlhbGlzYXRpb24gbWV0aG9kXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge2FycmF5fG9iamVjdH0gb0RhdGEgVGhlIGRhdGEgYXJyYXkvb2JqZWN0IGZvciB0aGUgYXJyYXlcclxuXHRcdCAqICAgIChpLmUuIGFvRGF0YVtdLl9hRGF0YSlcclxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gc1NwZWNpZmljIFRoZSBzcGVjaWZpYyBkYXRhIHR5cGUgeW91IHdhbnQgdG8gZ2V0IC1cclxuXHRcdCAqICAgICdkaXNwbGF5JywgJ3R5cGUnICdmaWx0ZXInICdzb3J0J1xyXG5cdFx0ICogIEByZXR1cm5zIHsqfSBUaGUgZGF0YSBmb3IgdGhlIGNlbGwgZnJvbSB0aGUgZ2l2ZW4gcm93J3MgZGF0YVxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJmbkdldERhdGFcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRnVuY3Rpb24gdG8gc2V0IGRhdGEgZm9yIGEgY2VsbCBpbiB0aGUgY29sdW1uLiBZb3Ugc2hvdWxkIDxiPm5ldmVyPC9iPlxyXG5cdFx0ICogc2V0IHRoZSBkYXRhIGRpcmVjdGx5IHRvIF9hRGF0YSBpbnRlcm5hbGx5IGluIERhdGFUYWJsZXMgLSBhbHdheXMgdXNlXHJcblx0XHQgKiB0aGlzIG1ldGhvZC4gSXQgYWxsb3dzIG1EYXRhIHRvIGZ1bmN0aW9uIGFzIHJlcXVpcmVkLiBUaGlzIGZ1bmN0aW9uXHJcblx0XHQgKiBpcyBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIGJ5IHRoZSBjb2x1bW4gaW5pdGlhbGlzYXRpb24gbWV0aG9kXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge2FycmF5fG9iamVjdH0gb0RhdGEgVGhlIGRhdGEgYXJyYXkvb2JqZWN0IGZvciB0aGUgYXJyYXlcclxuXHRcdCAqICAgIChpLmUuIGFvRGF0YVtdLl9hRGF0YSlcclxuXHRcdCAqICBAcGFyYW0geyp9IHNWYWx1ZSBWYWx1ZSB0byBzZXRcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwiZm5TZXREYXRhXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFByb3BlcnR5IHRvIHJlYWQgdGhlIHZhbHVlIGZvciB0aGUgY2VsbHMgaW4gdGhlIGNvbHVtbiBmcm9tIHRoZSBkYXRhXHJcblx0XHQgKiBzb3VyY2UgYXJyYXkgLyBvYmplY3QuIElmIG51bGwsIHRoZW4gdGhlIGRlZmF1bHQgY29udGVudCBpcyB1c2VkLCBpZiBhXHJcblx0XHQgKiBmdW5jdGlvbiBpcyBnaXZlbiB0aGVuIHRoZSByZXR1cm4gZnJvbSB0aGUgZnVuY3Rpb24gaXMgdXNlZC5cclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvbnxpbnR8c3RyaW5nfG51bGxcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwibURhdGFcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogUGFydG5lciBwcm9wZXJ0eSB0byBtRGF0YSB3aGljaCBpcyB1c2VkIChvbmx5IHdoZW4gZGVmaW5lZCkgdG8gZ2V0XHJcblx0XHQgKiB0aGUgZGF0YSAtIGkuZS4gaXQgaXMgYmFzaWNhbGx5IHRoZSBzYW1lIGFzIG1EYXRhLCBidXQgd2l0aG91dCB0aGVcclxuXHRcdCAqICdzZXQnIG9wdGlvbiwgYW5kIGFsc28gdGhlIGRhdGEgZmVkIHRvIGl0IGlzIHRoZSByZXN1bHQgZnJvbSBtRGF0YS5cclxuXHRcdCAqIFRoaXMgaXMgdGhlIHJlbmRlcmluZyBtZXRob2QgdG8gbWF0Y2ggdGhlIGRhdGEgbWV0aG9kIG9mIG1EYXRhLlxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9ufGludHxzdHJpbmd8bnVsbFxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJtUmVuZGVyXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFVuaXF1ZSBoZWFkZXIgVEgvVEQgZWxlbWVudCBmb3IgdGhpcyBjb2x1bW4gLSB0aGlzIGlzIHdoYXQgdGhlIHNvcnRpbmdcclxuXHRcdCAqIGxpc3RlbmVyIGlzIGF0dGFjaGVkIHRvIChpZiBzb3J0aW5nIGlzIGVuYWJsZWQuKVxyXG5cdFx0ICogIEB0eXBlIG5vZGVcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwiblRoXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFVuaXF1ZSBmb290ZXIgVEgvVEQgZWxlbWVudCBmb3IgdGhpcyBjb2x1bW4gKGlmIHRoZXJlIGlzIG9uZSkuIE5vdCB1c2VkXHJcblx0XHQgKiBpbiBEYXRhVGFibGVzIGFzIHN1Y2gsIGJ1dCBjYW4gYmUgdXNlZCBmb3IgcGx1Zy1pbnMgdG8gcmVmZXJlbmNlIHRoZVxyXG5cdFx0ICogZm9vdGVyIGZvciBlYWNoIGNvbHVtbi5cclxuXHRcdCAqICBAdHlwZSBub2RlXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcIm5UZlwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgY2xhc3MgdG8gYXBwbHkgdG8gYWxsIFREIGVsZW1lbnRzIGluIHRoZSB0YWJsZSdzIFRCT0RZIGZvciB0aGUgY29sdW1uXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcInNDbGFzc1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBXaGVuIERhdGFUYWJsZXMgY2FsY3VsYXRlcyB0aGUgY29sdW1uIHdpZHRocyB0byBhc3NpZ24gdG8gZWFjaCBjb2x1bW4sXHJcblx0XHQgKiBpdCBmaW5kcyB0aGUgbG9uZ2VzdCBzdHJpbmcgaW4gZWFjaCBjb2x1bW4gYW5kIHRoZW4gY29uc3RydWN0cyBhXHJcblx0XHQgKiB0ZW1wb3JhcnkgdGFibGUgYW5kIHJlYWRzIHRoZSB3aWR0aHMgZnJvbSB0aGF0LiBUaGUgcHJvYmxlbSB3aXRoIHRoaXNcclxuXHRcdCAqIGlzIHRoYXQgXCJtbW1cIiBpcyBtdWNoIHdpZGVyIHRoZW4gXCJpaWlpXCIsIGJ1dCB0aGUgbGF0dGVyIGlzIGEgbG9uZ2VyXHJcblx0XHQgKiBzdHJpbmcgLSB0aHVzIHRoZSBjYWxjdWxhdGlvbiBjYW4gZ28gd3JvbmcgKGRvaW5nIGl0IHByb3Blcmx5IGFuZCBwdXR0aW5nXHJcblx0XHQgKiBpdCBpbnRvIGFuIERPTSBvYmplY3QgYW5kIG1lYXN1cmluZyB0aGF0IGlzIGhvcnJpYmx5KCEpIHNsb3cpLiBUaHVzIGFzXHJcblx0XHQgKiBhIFwid29yayBhcm91bmRcIiB3ZSBwcm92aWRlIHRoaXMgb3B0aW9uLiBJdCB3aWxsIGFwcGVuZCBpdHMgdmFsdWUgdG8gdGhlXHJcblx0XHQgKiB0ZXh0IHRoYXQgaXMgZm91bmQgdG8gYmUgdGhlIGxvbmdlc3Qgc3RyaW5nIGZvciB0aGUgY29sdW1uIC0gaS5lLiBwYWRkaW5nLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICovXHJcblx0XHRcInNDb250ZW50UGFkZGluZ1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGxvd3MgYSBkZWZhdWx0IHZhbHVlIHRvIGJlIGdpdmVuIGZvciBhIGNvbHVtbidzIGRhdGEsIGFuZCB3aWxsIGJlIHVzZWRcclxuXHRcdCAqIHdoZW5ldmVyIGEgbnVsbCBkYXRhIHNvdXJjZSBpcyBlbmNvdW50ZXJlZCAodGhpcyBjYW4gYmUgYmVjYXVzZSBtRGF0YVxyXG5cdFx0ICogaXMgc2V0IHRvIG51bGwsIG9yIGJlY2F1c2UgdGhlIGRhdGEgc291cmNlIGl0c2VsZiBpcyBudWxsKS5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwic0RlZmF1bHRDb250ZW50XCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIE5hbWUgZm9yIHRoZSBjb2x1bW4sIGFsbG93aW5nIHJlZmVyZW5jZSB0byB0aGUgY29sdW1uIGJ5IG5hbWUgYXMgd2VsbCBhc1xyXG5cdFx0ICogYnkgaW5kZXggKG5lZWRzIGEgbG9va3VwIHRvIHdvcmsgYnkgbmFtZSkuXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdFwic05hbWVcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VzdG9tIHNvcnRpbmcgZGF0YSB0eXBlIC0gZGVmaW5lcyB3aGljaCBvZiB0aGUgYXZhaWxhYmxlIHBsdWctaW5zIGluXHJcblx0XHQgKiBhZm5Tb3J0RGF0YSB0aGUgY3VzdG9tIHNvcnRpbmcgd2lsbCB1c2UgLSBpZiBhbnkgaXMgZGVmaW5lZC5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBzdGRcclxuXHRcdCAqL1xyXG5cdFx0XCJzU29ydERhdGFUeXBlXCI6ICdzdGQnLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBoZWFkZXIgZWxlbWVudCB3aGVuIHNvcnRpbmcgb24gdGhpcyBjb2x1bW5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwic1NvcnRpbmdDbGFzc1wiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBoZWFkZXIgZWxlbWVudCB3aGVuIHNvcnRpbmcgb24gdGhpcyBjb2x1bW4gLVxyXG5cdFx0ICogd2hlbiBqUXVlcnkgVUkgdGhlbWluZyBpcyB1c2VkLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJzU29ydGluZ0NsYXNzSlVJXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRpdGxlIG9mIHRoZSBjb2x1bW4gLSB3aGF0IGlzIHNlZW4gaW4gdGhlIFRIIGVsZW1lbnQgKG5UaCkuXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdFwic1RpdGxlXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENvbHVtbiBzb3J0aW5nIGFuZCBmaWx0ZXJpbmcgdHlwZVxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJzVHlwZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBXaWR0aCBvZiB0aGUgY29sdW1uXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcInNXaWR0aFwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBXaWR0aCBvZiB0aGUgY29sdW1uIHdoZW4gaXQgd2FzIGZpcnN0IFwiZW5jb3VudGVyZWRcIlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJzV2lkdGhPcmlnXCI6IG51bGxcclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdC8qXHJcblx0ICogRGV2ZWxvcGVyIG5vdGU6IFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgYmVsb3cgYXJlIGdpdmVuIGluIEh1bmdhcmlhblxyXG5cdCAqIG5vdGF0aW9uLCB0aGF0IHdhcyB1c2VkIGFzIHRoZSBpbnRlcmZhY2UgZm9yIERhdGFUYWJsZXMgcHJpb3IgdG8gdjEuMTAsIGhvd2V2ZXJcclxuXHQgKiBmcm9tIHYxLjEwIG9ud2FyZHMgdGhlIHByaW1hcnkgaW50ZXJmYWNlIGlzIGNhbWVsIGNhc2UuIEluIG9yZGVyIHRvIGF2b2lkXHJcblx0ICogYnJlYWtpbmcgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdXR0ZXJseSB3aXRoIHRoaXMgY2hhbmdlLCB0aGUgSHVuZ2FyaWFuXHJcblx0ICogdmVyc2lvbiBpcyBzdGlsbCwgaW50ZXJuYWxseSB0aGUgcHJpbWFyeSBpbnRlcmZhY2UsIGJ1dCBpcyBpcyBub3QgZG9jdW1lbnRlZFxyXG5cdCAqIC0gaGVuY2UgdGhlIEBuYW1lIHRhZ3MgaW4gZWFjaCBkb2MgY29tbWVudC4gVGhpcyBhbGxvd3MgYSBKYXZhc2NyaXB0IGZ1bmN0aW9uXHJcblx0ICogdG8gY3JlYXRlIGEgbWFwIGZyb20gSHVuZ2FyaWFuIG5vdGF0aW9uIHRvIGNhbWVsIGNhc2UgKGdvaW5nIHRoZSBvdGhlciBkaXJlY3Rpb25cclxuXHQgKiB3b3VsZCByZXF1aXJlIGVhY2ggcHJvcGVydHkgdG8gYmUgbGlzdGVkLCB3aGljaCB3b3VsZCBhdCBhcm91bmQgM0sgdG8gdGhlIHNpemVcclxuXHQgKiBvZiBEYXRhVGFibGVzLCB3aGlsZSB0aGlzIG1ldGhvZCBpcyBhYm91dCBhIDAuNUsgaGl0LlxyXG5cdCAqXHJcblx0ICogVWx0aW1hdGVseSB0aGlzIGRvZXMgcGF2ZSB0aGUgd2F5IGZvciBIdW5nYXJpYW4gbm90YXRpb24gdG8gYmUgZHJvcHBlZFxyXG5cdCAqIGNvbXBsZXRlbHksIGJ1dCB0aGF0IGlzIGEgbWFzc2l2ZSBhbW91bnQgb2Ygd29yayBhbmQgd2lsbCBicmVhayBjdXJyZW50XHJcblx0ICogaW5zdGFsbHMgKHRoZXJlZm9yZSBpcyBvbi1ob2xkIHVudGlsIHYyKS5cclxuXHQgKi9cclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXNhdGlvbiBvcHRpb25zIHRoYXQgY2FuIGJlIGdpdmVuIHRvIERhdGFUYWJsZXMgYXQgaW5pdGlhbGlzYXRpb25cclxuXHQgKiB0aW1lLlxyXG5cdCAqICBAbmFtZXNwYWNlXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLmRlZmF1bHRzID0ge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBBbiBhcnJheSBvZiBkYXRhIHRvIHVzZSBmb3IgdGhlIHRhYmxlLCBwYXNzZWQgaW4gYXQgaW5pdGlhbGlzYXRpb24gd2hpY2hcclxuXHRcdCAqIHdpbGwgYmUgdXNlZCBpbiBwcmVmZXJlbmNlIHRvIGFueSBkYXRhIHdoaWNoIGlzIGFscmVhZHkgaW4gdGhlIERPTS4gVGhpcyBpc1xyXG5cdFx0ICogcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgY29uc3RydWN0aW5nIHRhYmxlcyBwdXJlbHkgaW4gSmF2YXNjcmlwdCwgZm9yXHJcblx0XHQgKiBleGFtcGxlIHdpdGggYSBjdXN0b20gQWpheCBjYWxsLlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmRhdGFcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGEgMkQgYXJyYXkgZGF0YSBzb3VyY2VcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJkYXRhXCI6IFtcclxuXHRcdCAqICAgICAgICAgIFsnVHJpZGVudCcsICdJbnRlcm5ldCBFeHBsb3JlciA0LjAnLCAnV2luIDk1KycsIDQsICdYJ10sXHJcblx0XHQgKiAgICAgICAgICBbJ1RyaWRlbnQnLCAnSW50ZXJuZXQgRXhwbG9yZXIgNS4wJywgJ1dpbiA5NSsnLCA1LCAnQyddLFxyXG5cdFx0ICogICAgICAgIF0sXHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIkVuZ2luZVwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwidGl0bGVcIjogXCJCcm93c2VyXCIgfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIlBsYXRmb3JtXCIgfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIlZlcnNpb25cIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiR3JhZGVcIiB9XHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFzIGEgZGF0YSBzb3VyY2UgKGBkYXRhYClcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJkYXRhXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHtcclxuXHRcdCAqICAgICAgICAgICAgXCJlbmdpbmVcIjogICBcIlRyaWRlbnRcIixcclxuXHRcdCAqICAgICAgICAgICAgXCJicm93c2VyXCI6ICBcIkludGVybmV0IEV4cGxvcmVyIDQuMFwiLFxyXG5cdFx0ICogICAgICAgICAgICBcInBsYXRmb3JtXCI6IFwiV2luIDk1K1wiLFxyXG5cdFx0ICogICAgICAgICAgICBcInZlcnNpb25cIjogIDQsXHJcblx0XHQgKiAgICAgICAgICAgIFwiZ3JhZGVcIjogICAgXCJYXCJcclxuXHRcdCAqICAgICAgICAgIH0sXHJcblx0XHQgKiAgICAgICAgICB7XHJcblx0XHQgKiAgICAgICAgICAgIFwiZW5naW5lXCI6ICAgXCJUcmlkZW50XCIsXHJcblx0XHQgKiAgICAgICAgICAgIFwiYnJvd3NlclwiOiAgXCJJbnRlcm5ldCBFeHBsb3JlciA1LjBcIixcclxuXHRcdCAqICAgICAgICAgICAgXCJwbGF0Zm9ybVwiOiBcIldpbiA5NStcIixcclxuXHRcdCAqICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6ICA1LFxyXG5cdFx0ICogICAgICAgICAgICBcImdyYWRlXCI6ICAgIFwiQ1wiXHJcblx0XHQgKiAgICAgICAgICB9XHJcblx0XHQgKiAgICAgICAgXSxcclxuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiRW5naW5lXCIsICAgXCJkYXRhXCI6IFwiZW5naW5lXCIgfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJ0aXRsZVwiOiBcIkJyb3dzZXJcIiwgIFwiZGF0YVwiOiBcImJyb3dzZXJcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiUGxhdGZvcm1cIiwgXCJkYXRhXCI6IFwicGxhdGZvcm1cIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiVmVyc2lvblwiLCAgXCJkYXRhXCI6IFwidmVyc2lvblwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwidGl0bGVcIjogXCJHcmFkZVwiLCAgICBcImRhdGFcIjogXCJncmFkZVwiIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJhYURhdGFcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogSWYgb3JkZXJpbmcgaXMgZW5hYmxlZCwgdGhlbiBEYXRhVGFibGVzIHdpbGwgcGVyZm9ybSBhIGZpcnN0IHBhc3Mgc29ydCBvblxyXG5cdFx0ICogaW5pdGlhbGlzYXRpb24uIFlvdSBjYW4gZGVmaW5lIHdoaWNoIGNvbHVtbihzKSB0aGUgc29ydCBpcyBwZXJmb3JtZWRcclxuXHRcdCAqIHVwb24sIGFuZCB0aGUgc29ydGluZyBkaXJlY3Rpb24sIHdpdGggdGhpcyB2YXJpYWJsZS4gVGhlIGBzb3J0aW5nYCBhcnJheVxyXG5cdFx0ICogc2hvdWxkIGNvbnRhaW4gYW4gYXJyYXkgZm9yIGVhY2ggY29sdW1uIHRvIGJlIHNvcnRlZCBpbml0aWFsbHkgY29udGFpbmluZ1xyXG5cdFx0ICogdGhlIGNvbHVtbidzIGluZGV4IGFuZCBhIGRpcmVjdGlvbiBzdHJpbmcgKCdhc2MnIG9yICdkZXNjJykuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbWzAsJ2FzYyddXVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBTb3J0IGJ5IDNyZCBjb2x1bW4gZmlyc3QsIGFuZCB0aGVuIDR0aCBjb2x1bW5cclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcIm9yZGVyXCI6IFtbMiwnYXNjJ10sIFszLCdkZXNjJ11dXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAvLyBObyBpbml0aWFsIHNvcnRpbmdcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcIm9yZGVyXCI6IFtdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJhYVNvcnRpbmdcIjogW1swLCdhc2MnXV0sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgcGFyYW1ldGVyIGlzIGJhc2ljYWxseSBpZGVudGljYWwgdG8gdGhlIGBzb3J0aW5nYCBwYXJhbWV0ZXIsIGJ1dFxyXG5cdFx0ICogY2Fubm90IGJlIG92ZXJyaWRkZW4gYnkgdXNlciBpbnRlcmFjdGlvbiB3aXRoIHRoZSB0YWJsZS4gV2hhdCB0aGlzIG1lYW5zXHJcblx0XHQgKiBpcyB0aGF0IHlvdSBjb3VsZCBoYXZlIGEgY29sdW1uICh2aXNpYmxlIG9yIGhpZGRlbikgd2hpY2ggdGhlIHNvcnRpbmdcclxuXHRcdCAqIHdpbGwgYWx3YXlzIGJlIGZvcmNlZCBvbiBmaXJzdCAtIGFueSBzb3J0aW5nIGFmdGVyIHRoYXQgKGZyb20gdGhlIHVzZXIpXHJcblx0XHQgKiB3aWxsIHRoZW4gYmUgcGVyZm9ybWVkIGFzIHJlcXVpcmVkLiBUaGlzIGNhbiBiZSB1c2VmdWwgZm9yIGdyb3VwaW5nIHJvd3NcclxuXHRcdCAqIHRvZ2V0aGVyLlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyRml4ZWRcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcIm9yZGVyRml4ZWRcIjogW1swLCdhc2MnXV1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApXHJcblx0XHQgKi9cclxuXHRcdFwiYWFTb3J0aW5nRml4ZWRcIjogW10sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIERhdGFUYWJsZXMgY2FuIGJlIGluc3RydWN0ZWQgdG8gbG9hZCBkYXRhIHRvIGRpc3BsYXkgaW4gdGhlIHRhYmxlIGZyb20gYVxyXG5cdFx0ICogQWpheCBzb3VyY2UuIFRoaXMgb3B0aW9uIGRlZmluZXMgaG93IHRoYXQgQWpheCBjYWxsIGlzIG1hZGUgYW5kIHdoZXJlIHRvLlxyXG5cdFx0ICpcclxuXHRcdCAqIFRoZSBgYWpheGAgcHJvcGVydHkgaGFzIHRocmVlIGRpZmZlcmVudCBtb2RlcyBvZiBvcGVyYXRpb24sIGRlcGVuZGluZyBvblxyXG5cdFx0ICogaG93IGl0IGlzIGRlZmluZWQuIFRoZXNlIGFyZTpcclxuXHRcdCAqXHJcblx0XHQgKiAqIGBzdHJpbmdgIC0gU2V0IHRoZSBVUkwgZnJvbSB3aGVyZSB0aGUgZGF0YSBzaG91bGQgYmUgbG9hZGVkIGZyb20uXHJcblx0XHQgKiAqIGBvYmplY3RgIC0gRGVmaW5lIHByb3BlcnRpZXMgZm9yIGBqUXVlcnkuYWpheGAuXHJcblx0XHQgKiAqIGBmdW5jdGlvbmAgLSBDdXN0b20gZGF0YSBnZXQgZnVuY3Rpb25cclxuXHRcdCAqXHJcblx0XHQgKiBgc3RyaW5nYFxyXG5cdFx0ICogLS0tLS0tLS1cclxuXHRcdCAqXHJcblx0XHQgKiBBcyBhIHN0cmluZywgdGhlIGBhamF4YCBwcm9wZXJ0eSBzaW1wbHkgZGVmaW5lcyB0aGUgVVJMIGZyb20gd2hpY2hcclxuXHRcdCAqIERhdGFUYWJsZXMgd2lsbCBsb2FkIGRhdGEuXHJcblx0XHQgKlxyXG5cdFx0ICogYG9iamVjdGBcclxuXHRcdCAqIC0tLS0tLS0tXHJcblx0XHQgKlxyXG5cdFx0ICogQXMgYW4gb2JqZWN0LCB0aGUgcGFyYW1ldGVycyBpbiB0aGUgb2JqZWN0IGFyZSBwYXNzZWQgdG9cclxuXHRcdCAqIFtqUXVlcnkuYWpheF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS5hamF4LykgYWxsb3dpbmcgZmluZSBjb250cm9sXHJcblx0XHQgKiBvZiB0aGUgQWpheCByZXF1ZXN0LiBEYXRhVGFibGVzIGhhcyBhIG51bWJlciBvZiBkZWZhdWx0IHBhcmFtZXRlcnMgd2hpY2hcclxuXHRcdCAqIHlvdSBjYW4gb3ZlcnJpZGUgdXNpbmcgdGhpcyBvcHRpb24uIFBsZWFzZSByZWZlciB0byB0aGUgalF1ZXJ5XHJcblx0XHQgKiBkb2N1bWVudGF0aW9uIGZvciBhIGZ1bGwgZGVzY3JpcHRpb24gb2YgdGhlIG9wdGlvbnMgYXZhaWxhYmxlLCBhbHRob3VnaFxyXG5cdFx0ICogdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIHByb3ZpZGUgYWRkaXRpb25hbCBvcHRpb25zIGluIERhdGFUYWJsZXMgb3JcclxuXHRcdCAqIHJlcXVpcmUgc3BlY2lhbCBjb25zaWRlcmF0aW9uOlxyXG5cdFx0ICpcclxuXHRcdCAqICogYGRhdGFgIC0gQXMgd2l0aCBqUXVlcnksIGBkYXRhYCBjYW4gYmUgcHJvdmlkZWQgYXMgYW4gb2JqZWN0LCBidXQgaXRcclxuXHRcdCAqICAgY2FuIGFsc28gYmUgdXNlZCBhcyBhIGZ1bmN0aW9uIHRvIG1hbmlwdWxhdGUgdGhlIGRhdGEgRGF0YVRhYmxlcyBzZW5kc1xyXG5cdFx0ICogICB0byB0aGUgc2VydmVyLiBUaGUgZnVuY3Rpb24gdGFrZXMgYSBzaW5nbGUgcGFyYW1ldGVyLCBhbiBvYmplY3Qgb2ZcclxuXHRcdCAqICAgcGFyYW1ldGVycyB3aXRoIHRoZSB2YWx1ZXMgdGhhdCBEYXRhVGFibGVzIGhhcyByZWFkaWVkIGZvciBzZW5kaW5nLiBBblxyXG5cdFx0ICogICBvYmplY3QgbWF5IGJlIHJldHVybmVkIHdoaWNoIHdpbGwgYmUgbWVyZ2VkIGludG8gdGhlIERhdGFUYWJsZXNcclxuXHRcdCAqICAgZGVmYXVsdHMsIG9yIHlvdSBjYW4gYWRkIHRoZSBpdGVtcyB0byB0aGUgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBpbiBhbmRcclxuXHRcdCAqICAgbm90IHJldHVybiBhbnl0aGluZyBmcm9tIHRoZSBmdW5jdGlvbi4gVGhpcyBzdXBlcnNlZGVzIGBmblNlcnZlclBhcmFtc2BcclxuXHRcdCAqICAgZnJvbSBEYXRhVGFibGVzIDEuOS0uXHJcblx0XHQgKlxyXG5cdFx0ICogKiBgZGF0YVNyY2AgLSBCeSBkZWZhdWx0IERhdGFUYWJsZXMgd2lsbCBsb29rIGZvciB0aGUgcHJvcGVydHkgYGRhdGFgIChvclxyXG5cdFx0ICogICBgYWFEYXRhYCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIERhdGFUYWJsZXMgMS45LSkgd2hlbiBvYnRhaW5pbmcgZGF0YVxyXG5cdFx0ICogICBmcm9tIGFuIEFqYXggc291cmNlIG9yIGZvciBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIC0gdGhpcyBwYXJhbWV0ZXJcclxuXHRcdCAqICAgYWxsb3dzIHRoYXQgcHJvcGVydHkgdG8gYmUgY2hhbmdlZC4gWW91IGNhbiB1c2UgSmF2YXNjcmlwdCBkb3R0ZWRcclxuXHRcdCAqICAgb2JqZWN0IG5vdGF0aW9uIHRvIGdldCBhIGRhdGEgc291cmNlIGZvciBtdWx0aXBsZSBsZXZlbHMgb2YgbmVzdGluZywgb3JcclxuXHRcdCAqICAgaXQgbXkgYmUgdXNlZCBhcyBhIGZ1bmN0aW9uLiBBcyBhIGZ1bmN0aW9uIGl0IHRha2VzIGEgc2luZ2xlIHBhcmFtZXRlcixcclxuXHRcdCAqICAgdGhlIEpTT04gcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyLCB3aGljaCBjYW4gYmUgbWFuaXB1bGF0ZWQgYXNcclxuXHRcdCAqICAgcmVxdWlyZWQsIHdpdGggdGhlIHJldHVybmVkIHZhbHVlIGJlaW5nIHRoYXQgdXNlZCBieSBEYXRhVGFibGVzIGFzIHRoZVxyXG5cdFx0ICogICBkYXRhIHNvdXJjZSBmb3IgdGhlIHRhYmxlLiBUaGlzIHN1cGVyc2VkZXMgYHNBamF4RGF0YVByb3BgIGZyb21cclxuXHRcdCAqICAgRGF0YVRhYmxlcyAxLjktLlxyXG5cdFx0ICpcclxuXHRcdCAqICogYHN1Y2Nlc3NgIC0gU2hvdWxkIG5vdCBiZSBvdmVycmlkZGVuIGl0IGlzIHVzZWQgaW50ZXJuYWxseSBpblxyXG5cdFx0ICogICBEYXRhVGFibGVzLiBUbyBtYW5pcHVsYXRlIC8gdHJhbnNmb3JtIHRoZSBkYXRhIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXJcclxuXHRcdCAqICAgdXNlIGBhamF4LmRhdGFTcmNgLCBvciB1c2UgYGFqYXhgIGFzIGEgZnVuY3Rpb24gKHNlZSBiZWxvdykuXHJcblx0XHQgKlxyXG5cdFx0ICogYGZ1bmN0aW9uYFxyXG5cdFx0ICogLS0tLS0tLS0tLVxyXG5cdFx0ICpcclxuXHRcdCAqIEFzIGEgZnVuY3Rpb24sIG1ha2luZyB0aGUgQWpheCBjYWxsIGlzIGxlZnQgdXAgdG8geW91cnNlbGYgYWxsb3dpbmdcclxuXHRcdCAqIGNvbXBsZXRlIGNvbnRyb2wgb2YgdGhlIEFqYXggcmVxdWVzdC4gSW5kZWVkLCBpZiBkZXNpcmVkLCBhIG1ldGhvZCBvdGhlclxyXG5cdFx0ICogdGhhbiBBamF4IGNvdWxkIGJlIHVzZWQgdG8gb2J0YWluIHRoZSByZXF1aXJlZCBkYXRhLCBzdWNoIGFzIFdlYiBzdG9yYWdlXHJcblx0XHQgKiBvciBhbiBBSVIgZGF0YWJhc2UuXHJcblx0XHQgKlxyXG5cdFx0ICogVGhlIGZ1bmN0aW9uIGlzIGdpdmVuIGZvdXIgcGFyYW1ldGVycyBhbmQgbm8gcmV0dXJuIGlzIHJlcXVpcmVkLiBUaGVcclxuXHRcdCAqIHBhcmFtZXRlcnMgYXJlOlxyXG5cdFx0ICpcclxuXHRcdCAqIDEuIF9vYmplY3RfIC0gRGF0YSB0byBzZW5kIHRvIHRoZSBzZXJ2ZXJcclxuXHRcdCAqIDIuIF9mdW5jdGlvbl8gLSBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IG11c3QgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgcmVxdWlyZWRcclxuXHRcdCAqICAgIGRhdGEgaGFzIGJlZW4gb2J0YWluZWQuIFRoYXQgZGF0YSBzaG91bGQgYmUgcGFzc2VkIGludG8gdGhlIGNhbGxiYWNrXHJcblx0XHQgKiAgICBhcyB0aGUgb25seSBwYXJhbWV0ZXJcclxuXHRcdCAqIDMuIF9vYmplY3RfIC0gRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3QgZm9yIHRoZSB0YWJsZVxyXG5cdFx0ICpcclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHN1cGVyc2VkZXMgYGZuU2VydmVyRGF0YWAgZnJvbSBEYXRhVGFibGVzIDEuOS0uXHJcblx0XHQgKlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ3xvYmplY3R8ZnVuY3Rpb25cclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25cclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuYWpheFxyXG5cdFx0ICogIEBzaW5jZSAxLjEwLjBcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogICAvLyBHZXQgSlNPTiBkYXRhIGZyb20gYSBmaWxlIHZpYSBBamF4LlxyXG5cdFx0ICogICAvLyBOb3RlIERhdGFUYWJsZXMgZXhwZWN0cyBkYXRhIGluIHRoZSBmb3JtIGB7IGRhdGE6IFsgLi4uZGF0YS4uLiBdIH1gIGJ5IGRlZmF1bHQpLlxyXG5cdFx0ICogICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgIFwiYWpheFwiOiBcImRhdGEuanNvblwiXHJcblx0XHQgKiAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogICAvLyBHZXQgSlNPTiBkYXRhIGZyb20gYSBmaWxlIHZpYSBBamF4LCB1c2luZyBgZGF0YVNyY2AgdG8gY2hhbmdlXHJcblx0XHQgKiAgIC8vIGBkYXRhYCB0byBgdGFibGVEYXRhYCAoaS5lLiBgeyB0YWJsZURhdGE6IFsgLi4uZGF0YS4uLiBdIH1gKVxyXG5cdFx0ICogICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgIFwiYWpheFwiOiB7XHJcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxyXG5cdFx0ICogICAgICAgXCJkYXRhU3JjXCI6IFwidGFibGVEYXRhXCJcclxuXHRcdCAqICAgICB9XHJcblx0XHQgKiAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogICAvLyBHZXQgSlNPTiBkYXRhIGZyb20gYSBmaWxlIHZpYSBBamF4LCB1c2luZyBgZGF0YVNyY2AgdG8gcmVhZCBkYXRhXHJcblx0XHQgKiAgIC8vIGZyb20gYSBwbGFpbiBhcnJheSByYXRoZXIgdGhhbiBhbiBhcnJheSBpbiBhbiBvYmplY3RcclxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICBcImFqYXhcIjoge1xyXG5cdFx0ICogICAgICAgXCJ1cmxcIjogXCJkYXRhLmpzb25cIixcclxuXHRcdCAqICAgICAgIFwiZGF0YVNyY1wiOiBcIlwiXHJcblx0XHQgKiAgICAgfVxyXG5cdFx0ICogICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqICAgLy8gTWFuaXB1bGF0ZSB0aGUgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXIgLSBhZGQgYSBsaW5rIHRvIGRhdGFcclxuXHRcdCAqICAgLy8gKG5vdGUgdGhpcyBjYW4sIHNob3VsZCwgYmUgZG9uZSB1c2luZyBgcmVuZGVyYCBmb3IgdGhlIGNvbHVtbiAtIHRoaXNcclxuXHRcdCAqICAgLy8gaXMganVzdCBhIHNpbXBsZSBleGFtcGxlIG9mIGhvdyB0aGUgZGF0YSBjYW4gYmUgbWFuaXB1bGF0ZWQpLlxyXG5cdFx0ICogICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgIFwiYWpheFwiOiB7XHJcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxyXG5cdFx0ICogICAgICAgXCJkYXRhU3JjXCI6IGZ1bmN0aW9uICgganNvbiApIHtcclxuXHRcdCAqICAgICAgICAgZm9yICggdmFyIGk9MCwgaWVuPWpzb24ubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7XHJcblx0XHQgKiAgICAgICAgICAganNvbltpXVswXSA9ICc8YSBocmVmPVwiL21lc3NhZ2UvJytqc29uW2ldWzBdKyc+VmlldyBtZXNzYWdlPC9hPic7XHJcblx0XHQgKiAgICAgICAgIH1cclxuXHRcdCAqICAgICAgICAgcmV0dXJuIGpzb247XHJcblx0XHQgKiAgICAgICB9XHJcblx0XHQgKiAgICAgfVxyXG5cdFx0ICogICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqICAgLy8gQWRkIGRhdGEgdG8gdGhlIHJlcXVlc3RcclxuXHRcdCAqICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICBcImFqYXhcIjoge1xyXG5cdFx0ICogICAgICAgXCJ1cmxcIjogXCJkYXRhLmpzb25cIixcclxuXHRcdCAqICAgICAgIFwiZGF0YVwiOiBmdW5jdGlvbiAoIGQgKSB7XHJcblx0XHQgKiAgICAgICAgIHJldHVybiB7XHJcblx0XHQgKiAgICAgICAgICAgXCJleHRyYV9zZWFyY2hcIjogJCgnI2V4dHJhJykudmFsKClcclxuXHRcdCAqICAgICAgICAgfTtcclxuXHRcdCAqICAgICAgIH1cclxuXHRcdCAqICAgICB9XHJcblx0XHQgKiAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogICAvLyBTZW5kIHJlcXVlc3QgYXMgUE9TVFxyXG5cdFx0ICogICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgIFwiYWpheFwiOiB7XHJcblx0XHQgKiAgICAgICBcInVybFwiOiBcImRhdGEuanNvblwiLFxyXG5cdFx0ICogICAgICAgXCJ0eXBlXCI6IFwiUE9TVFwiXHJcblx0XHQgKiAgICAgfVxyXG5cdFx0ICogICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqICAgLy8gR2V0IHRoZSBkYXRhIGZyb20gbG9jYWxTdG9yYWdlIChjb3VsZCBpbnRlcmZhY2Ugd2l0aCBhIGZvcm0gZm9yXHJcblx0XHQgKiAgIC8vIGFkZGluZywgZWRpdGluZyBhbmQgcmVtb3Zpbmcgcm93cykuXHJcblx0XHQgKiAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgXCJhamF4XCI6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaywgc2V0dGluZ3MpIHtcclxuXHRcdCAqICAgICAgIGNhbGxiYWNrKFxyXG5cdFx0ICogICAgICAgICBKU09OLnBhcnNlKCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGF0YVRhYmxlc0RhdGEnKSApXHJcblx0XHQgKiAgICAgICApO1xyXG5cdFx0ICogICAgIH1cclxuXHRcdCAqICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImFqYXhcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyBwYXJhbWV0ZXIgYWxsb3dzIHlvdSB0byByZWFkaWx5IHNwZWNpZnkgdGhlIGVudHJpZXMgaW4gdGhlIGxlbmd0aCBkcm9wXHJcblx0XHQgKiBkb3duIG1lbnUgdGhhdCBEYXRhVGFibGVzIHNob3dzIHdoZW4gcGFnaW5hdGlvbiBpcyBlbmFibGVkLiBJdCBjYW4gYmVcclxuXHRcdCAqIGVpdGhlciBhIDFEIGFycmF5IG9mIG9wdGlvbnMgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciBib3RoIHRoZSBkaXNwbGF5ZWRcclxuXHRcdCAqIG9wdGlvbiBhbmQgdGhlIHZhbHVlLCBvciBhIDJEIGFycmF5IHdoaWNoIHdpbGwgdXNlIHRoZSBhcnJheSBpbiB0aGUgZmlyc3RcclxuXHRcdCAqIHBvc2l0aW9uIGFzIHRoZSB2YWx1ZSwgYW5kIHRoZSBhcnJheSBpbiB0aGUgc2Vjb25kIHBvc2l0aW9uIGFzIHRoZVxyXG5cdFx0ICogZGlzcGxheWVkIG9wdGlvbnMgKHVzZWZ1bCBmb3IgbGFuZ3VhZ2Ugc3RyaW5ncyBzdWNoIGFzICdBbGwnKS5cclxuXHRcdCAqXHJcblx0XHQgKiBOb3RlIHRoYXQgdGhlIGBwYWdlTGVuZ3RoYCBwcm9wZXJ0eSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0IHRvIHRoZVxyXG5cdFx0ICogZmlyc3QgdmFsdWUgZ2l2ZW4gaW4gdGhpcyBhcnJheSwgdW5sZXNzIGBwYWdlTGVuZ3RoYCBpcyBhbHNvIHByb3ZpZGVkLlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgWyAxMCwgMjUsIDUwLCAxMDAgXVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxlbmd0aE1lbnVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImxlbmd0aE1lbnVcIjogW1sxMCwgMjUsIDUwLCAtMV0sIFsxMCwgMjUsIDUwLCBcIkFsbFwiXV1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImFMZW5ndGhNZW51XCI6IFsgMTAsIDI1LCA1MCwgMTAwIF0sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBgY29sdW1uc2Agb3B0aW9uIGluIHRoZSBpbml0aWFsaXNhdGlvbiBwYXJhbWV0ZXIgYWxsb3dzIHlvdSB0byBkZWZpbmVcclxuXHRcdCAqIGRldGFpbHMgYWJvdXQgdGhlIHdheSBpbmRpdmlkdWFsIGNvbHVtbnMgYmVoYXZlLiBGb3IgYSBmdWxsIGxpc3Qgb2ZcclxuXHRcdCAqIGNvbHVtbiBvcHRpb25zIHRoYXQgY2FuIGJlIHNldCwgcGxlYXNlIHNlZVxyXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW59LiBOb3RlIHRoYXQgaWYgeW91IHVzZSBgY29sdW1uc2AgdG9cclxuXHRcdCAqIGRlZmluZSB5b3VyIGNvbHVtbnMsIHlvdSBtdXN0IGhhdmUgYW4gZW50cnkgaW4gdGhlIGFycmF5IGZvciBldmVyeSBzaW5nbGVcclxuXHRcdCAqIGNvbHVtbiB0aGF0IHlvdSBoYXZlIGluIHlvdXIgdGFibGUgKHRoZXNlIGNhbiBiZSBudWxsIGlmIHlvdSBkb24ndCB3aGljaFxyXG5cdFx0ICogdG8gc3BlY2lmeSBhbnkgb3B0aW9ucykuXHJcblx0XHQgKiAgQG1lbWJlclxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uXHJcblx0XHQgKi9cclxuXHRcdFwiYW9Db2x1bW5zXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFZlcnkgc2ltaWxhciB0byBgY29sdW1uc2AsIGBjb2x1bW5EZWZzYCBhbGxvd3MgeW91IHRvIHRhcmdldCBhIHNwZWNpZmljXHJcblx0XHQgKiBjb2x1bW4sIG11bHRpcGxlIGNvbHVtbnMsIG9yIGFsbCBjb2x1bW5zLCB1c2luZyB0aGUgYHRhcmdldHNgIHByb3BlcnR5IG9mXHJcblx0XHQgKiBlYWNoIG9iamVjdCBpbiB0aGUgYXJyYXkuIFRoaXMgYWxsb3dzIGdyZWF0IGZsZXhpYmlsaXR5IHdoZW4gY3JlYXRpbmdcclxuXHRcdCAqIHRhYmxlcywgYXMgdGhlIGBjb2x1bW5EZWZzYCBhcnJheXMgY2FuIGJlIG9mIGFueSBsZW5ndGgsIHRhcmdldGluZyB0aGVcclxuXHRcdCAqIGNvbHVtbnMgeW91IHNwZWNpZmljYWxseSB3YW50LiBgY29sdW1uRGVmc2AgbWF5IHVzZSBhbnkgb2YgdGhlIGNvbHVtblxyXG5cdFx0ICogb3B0aW9ucyBhdmFpbGFibGU6IHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1ufSwgYnV0IGl0IF9tdXN0X1xyXG5cdFx0ICogaGF2ZSBgdGFyZ2V0c2AgZGVmaW5lZCBpbiBlYWNoIG9iamVjdCBpbiB0aGUgYXJyYXkuIFZhbHVlcyBpbiB0aGUgYHRhcmdldHNgXHJcblx0XHQgKiBhcnJheSBtYXkgYmU6XHJcblx0XHQgKiAgIDx1bD5cclxuXHRcdCAqICAgICA8bGk+YSBzdHJpbmcgLSBjbGFzcyBuYW1lIHdpbGwgYmUgbWF0Y2hlZCBvbiB0aGUgVEggZm9yIHRoZSBjb2x1bW48L2xpPlxyXG5cdFx0ICogICAgIDxsaT4wIG9yIGEgcG9zaXRpdmUgaW50ZWdlciAtIGNvbHVtbiBpbmRleCBjb3VudGluZyBmcm9tIHRoZSBsZWZ0PC9saT5cclxuXHRcdCAqICAgICA8bGk+YSBuZWdhdGl2ZSBpbnRlZ2VyIC0gY29sdW1uIGluZGV4IGNvdW50aW5nIGZyb20gdGhlIHJpZ2h0PC9saT5cclxuXHRcdCAqICAgICA8bGk+dGhlIHN0cmluZyBcIl9hbGxcIiAtIGFsbCBjb2x1bW5zIChpLmUuIGFzc2lnbiBhIGRlZmF1bHQpPC9saT5cclxuXHRcdCAqICAgPC91bD5cclxuXHRcdCAqICBAbWVtYmVyXHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW5EZWZzXHJcblx0XHQgKi9cclxuXHRcdFwiYW9Db2x1bW5EZWZzXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEJhc2ljYWxseSB0aGUgc2FtZSBhcyBgc2VhcmNoYCwgdGhpcyBwYXJhbWV0ZXIgZGVmaW5lcyB0aGUgaW5kaXZpZHVhbCBjb2x1bW5cclxuXHRcdCAqIGZpbHRlcmluZyBzdGF0ZSBhdCBpbml0aWFsaXNhdGlvbiB0aW1lLiBUaGUgYXJyYXkgbXVzdCBiZSBvZiB0aGUgc2FtZSBzaXplXHJcblx0XHQgKiBhcyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMsIGFuZCBlYWNoIGVsZW1lbnQgYmUgYW4gb2JqZWN0IHdpdGggdGhlIHBhcmFtZXRlcnNcclxuXHRcdCAqIGBzZWFyY2hgIGFuZCBgZXNjYXBlUmVnZXhgICh0aGUgbGF0dGVyIGlzIG9wdGlvbmFsKS4gJ251bGwnIGlzIGFsc29cclxuXHRcdCAqIGFjY2VwdGVkIGFuZCB0aGUgZGVmYXVsdCB3aWxsIGJlIHVzZWQuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlYXJjaENvbHNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInNlYXJjaENvbHNcIjogW1xyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIHsgXCJzZWFyY2hcIjogXCJNeSBmaWx0ZXJcIiB9LFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIHsgXCJzZWFyY2hcIjogXCJeWzAtOV1cIiwgXCJlc2NhcGVSZWdleFwiOiBmYWxzZSB9XHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9IClcclxuXHRcdCAqL1xyXG5cdFx0XCJhb1NlYXJjaENvbHNcIjogW10sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFuIGFycmF5IG9mIENTUyBjbGFzc2VzIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgdG8gZGlzcGxheWVkIHJvd3MuIFRoaXNcclxuXHRcdCAqIGFycmF5IG1heSBiZSBvZiBhbnkgbGVuZ3RoLCBhbmQgRGF0YVRhYmxlcyB3aWxsIGFwcGx5IGVhY2ggY2xhc3NcclxuXHRcdCAqIHNlcXVlbnRpYWxseSwgbG9vcGluZyB3aGVuIHJlcXVpcmVkLlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbCA8aT5XaWxsIHRha2UgdGhlIHZhbHVlcyBkZXRlcm1pbmVkIGJ5IHRoZSBgb0NsYXNzZXMuc3RyaXBlKmBcclxuXHRcdCAqICAgIG9wdGlvbnM8L2k+XHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25cclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RyaXBlQ2xhc3Nlc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic3RyaXBlQ2xhc3Nlc1wiOiBbICdzdHJpcDEnLCAnc3RyaXAyJywgJ3N0cmlwMycgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9IClcclxuXHRcdCAqL1xyXG5cdFx0XCJhc1N0cmlwZUNsYXNzZXNcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRW5hYmxlIG9yIGRpc2FibGUgYXV0b21hdGljIGNvbHVtbiB3aWR0aCBjYWxjdWxhdGlvbi4gVGhpcyBjYW4gYmUgZGlzYWJsZWRcclxuXHRcdCAqIGFzIGFuIG9wdGltaXNhdGlvbiAoaXQgdGFrZXMgc29tZSB0aW1lIHRvIGNhbGN1bGF0ZSB0aGUgd2lkdGhzKSBpZiB0aGVcclxuXHRcdCAqIHRhYmxlcyB3aWR0aHMgYXJlIHBhc3NlZCBpbiB1c2luZyBgY29sdW1uc2AuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmF1dG9XaWR0aFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImF1dG9XaWR0aFwiOiBmYWxzZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYkF1dG9XaWR0aFwiOiB0cnVlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZWZlcnJlZCByZW5kZXJpbmcgY2FuIHByb3ZpZGUgRGF0YVRhYmxlcyB3aXRoIGEgaHVnZSBzcGVlZCBib29zdCB3aGVuIHlvdVxyXG5cdFx0ICogYXJlIHVzaW5nIGFuIEFqYXggb3IgSlMgZGF0YSBzb3VyY2UgZm9yIHRoZSB0YWJsZS4gVGhpcyBvcHRpb24sIHdoZW4gc2V0IHRvXHJcblx0XHQgKiB0cnVlLCB3aWxsIGNhdXNlIERhdGFUYWJsZXMgdG8gZGVmZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSB0YWJsZSBlbGVtZW50cyBmb3JcclxuXHRcdCAqIGVhY2ggcm93IHVudGlsIHRoZXkgYXJlIG5lZWRlZCBmb3IgYSBkcmF3IC0gc2F2aW5nIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mXHJcblx0XHQgKiB0aW1lLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuZGVmZXJSZW5kZXJcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImFqYXhcIjogXCJzb3VyY2VzL2FycmF5cy50eHRcIixcclxuXHRcdCAqICAgICAgICBcImRlZmVyUmVuZGVyXCI6IHRydWVcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJEZWZlclJlbmRlclwiOiBmYWxzZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogUmVwbGFjZSBhIERhdGFUYWJsZSB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBzZWxlY3RvciBhbmQgcmVwbGFjZSBpdCB3aXRoXHJcblx0XHQgKiBvbmUgd2hpY2ggaGFzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBuZXcgaW5pdGlhbGlzYXRpb24gb2JqZWN0IHBhc3NlZC4gSWYgbm9cclxuXHRcdCAqIHRhYmxlIG1hdGNoZXMgdGhlIHNlbGVjdG9yLCB0aGVuIHRoZSBuZXcgRGF0YVRhYmxlIHdpbGwgYmUgY29uc3RydWN0ZWQgYXNcclxuXHRcdCAqIHBlciBub3JtYWwuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmRlc3Ryb3lcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInNyb2xsWVwiOiBcIjIwMHB4XCIsXHJcblx0XHQgKiAgICAgICAgXCJwYWdpbmF0ZVwiOiBmYWxzZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgICAvLyBTb21lIHRpbWUgbGF0ZXIuLi4uXHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJmaWx0ZXJcIjogZmFsc2UsXHJcblx0XHQgKiAgICAgICAgXCJkZXN0cm95XCI6IHRydWVcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJEZXN0cm95XCI6IGZhbHNlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBmaWx0ZXJpbmcgb2YgZGF0YS4gRmlsdGVyaW5nIGluIERhdGFUYWJsZXMgaXMgXCJzbWFydFwiIGluXHJcblx0XHQgKiB0aGF0IGl0IGFsbG93cyB0aGUgZW5kIHVzZXIgdG8gaW5wdXQgbXVsdGlwbGUgd29yZHMgKHNwYWNlIHNlcGFyYXRlZCkgYW5kXHJcblx0XHQgKiB3aWxsIG1hdGNoIGEgcm93IGNvbnRhaW5pbmcgdGhvc2Ugd29yZHMsIGV2ZW4gaWYgbm90IGluIHRoZSBvcmRlciB0aGF0IHdhc1xyXG5cdFx0ICogc3BlY2lmaWVkICh0aGlzIGFsbG93IG1hdGNoaW5nIGFjcm9zcyBtdWx0aXBsZSBjb2x1bW5zKS4gTm90ZSB0aGF0IGlmIHlvdVxyXG5cdFx0ICogd2lzaCB0byB1c2UgZmlsdGVyaW5nIGluIERhdGFUYWJsZXMgdGhpcyBtdXN0IHJlbWFpbiAndHJ1ZScgLSB0byByZW1vdmUgdGhlXHJcblx0XHQgKiBkZWZhdWx0IGZpbHRlcmluZyBpbnB1dCBib3ggYW5kIHJldGFpbiBmaWx0ZXJpbmcgYWJpbGl0aWVzLCBwbGVhc2UgdXNlXHJcblx0XHQgKiB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzLmRvbX0uXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlYXJjaGluZ1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInNlYXJjaGluZ1wiOiBmYWxzZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYkZpbHRlclwiOiB0cnVlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgdGFibGUgaW5mb3JtYXRpb24gZGlzcGxheS4gVGhpcyBzaG93cyBpbmZvcm1hdGlvblxyXG5cdFx0ICogYWJvdXQgdGhlIGRhdGEgdGhhdCBpcyBjdXJyZW50bHkgdmlzaWJsZSBvbiB0aGUgcGFnZSwgaW5jbHVkaW5nIGluZm9ybWF0aW9uXHJcblx0XHQgKiBhYm91dCBmaWx0ZXJlZCBkYXRhIGlmIHRoYXQgYWN0aW9uIGlzIGJlaW5nIHBlcmZvcm1lZC5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgdHJ1ZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuaW5mb1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImluZm9cIjogZmFsc2VcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJJbmZvXCI6IHRydWUsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEVuYWJsZSBqUXVlcnkgVUkgVGhlbWVSb2xsZXIgc3VwcG9ydCAocmVxdWlyZWQgYXMgVGhlbWVSb2xsZXIgcmVxdWlyZXMgc29tZVxyXG5cdFx0ICogc2xpZ2h0bHkgZGlmZmVyZW50IGFuZCBhZGRpdGlvbmFsIG1hcmstdXAgZnJvbSB3aGF0IERhdGFUYWJsZXMgaGFzXHJcblx0XHQgKiB0cmFkaXRpb25hbGx5IHVzZWQpLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMualF1ZXJ5VUlcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImpRdWVyeVVJXCI6IHRydWVcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJKUXVlcnlVSVwiOiBmYWxzZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsb3dzIHRoZSBlbmQgdXNlciB0byBzZWxlY3QgdGhlIHNpemUgb2YgYSBmb3JtYXR0ZWQgcGFnZSBmcm9tIGEgc2VsZWN0XHJcblx0XHQgKiBtZW51IChzaXplcyBhcmUgMTAsIDI1LCA1MCBhbmQgMTAwKS4gUmVxdWlyZXMgcGFnaW5hdGlvbiAoYHBhZ2luYXRlYCkuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxlbmd0aENoYW5nZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImxlbmd0aENoYW5nZVwiOiBmYWxzZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYkxlbmd0aENoYW5nZVwiOiB0cnVlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBwYWdpbmF0aW9uLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5wYWdpbmdcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJwYWdpbmdcIjogZmFsc2VcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJQYWdpbmF0ZVwiOiB0cnVlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgZGlzcGxheSBvZiBhICdwcm9jZXNzaW5nJyBpbmRpY2F0b3Igd2hlbiB0aGUgdGFibGUgaXNcclxuXHRcdCAqIGJlaW5nIHByb2Nlc3NlZCAoZS5nLiBhIHNvcnQpLiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHRhYmxlcyB3aXRoXHJcblx0XHQgKiBsYXJnZSBhbW91bnRzIG9mIGRhdGEgd2hlcmUgaXQgY2FuIHRha2UgYSBub3RpY2VhYmxlIGFtb3VudCBvZiB0aW1lIHRvIHNvcnRcclxuXHRcdCAqIHRoZSBlbnRyaWVzLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgRmVhdHVyZXNcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucHJvY2Vzc2luZ1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInByb2Nlc3NpbmdcIjogdHJ1ZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYlByb2Nlc3NpbmdcIjogZmFsc2UsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFJldHJpZXZlIHRoZSBEYXRhVGFibGVzIG9iamVjdCBmb3IgdGhlIGdpdmVuIHNlbGVjdG9yLiBOb3RlIHRoYXQgaWYgdGhlXHJcblx0XHQgKiB0YWJsZSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpc2VkLCB0aGlzIHBhcmFtZXRlciB3aWxsIGNhdXNlIERhdGFUYWJsZXNcclxuXHRcdCAqIHRvIHNpbXBseSByZXR1cm4gdGhlIG9iamVjdCB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gc2V0IHVwIC0gaXQgd2lsbCBub3QgdGFrZVxyXG5cdFx0ICogYWNjb3VudCBvZiBhbnkgY2hhbmdlcyB5b3UgbWlnaHQgaGF2ZSBtYWRlIHRvIHRoZSBpbml0aWFsaXNhdGlvbiBvYmplY3RcclxuXHRcdCAqIHBhc3NlZCB0byBEYXRhVGFibGVzIChzZXR0aW5nIHRoaXMgcGFyYW1ldGVyIHRvIHRydWUgaXMgYW4gYWNrbm93bGVkZ2VtZW50XHJcblx0XHQgKiB0aGF0IHlvdSB1bmRlcnN0YW5kIHRoaXMpLiBgZGVzdHJveWAgY2FuIGJlIHVzZWQgdG8gcmVpbml0aWFsaXNlIGEgdGFibGUgaWZcclxuXHRcdCAqIHlvdSBuZWVkLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5yZXRyaWV2ZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICBpbml0VGFibGUoKTtcclxuXHRcdCAqICAgICAgdGFibGVBY3Rpb25zKCk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogICAgZnVuY3Rpb24gaW5pdFRhYmxlICgpXHJcblx0XHQgKiAgICB7XHJcblx0XHQgKiAgICAgIHJldHVybiAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic2Nyb2xsWVwiOiBcIjIwMHB4XCIsXHJcblx0XHQgKiAgICAgICAgXCJwYWdpbmF0ZVwiOiBmYWxzZSxcclxuXHRcdCAqICAgICAgICBcInJldHJpZXZlXCI6IHRydWVcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfVxyXG5cdFx0ICpcclxuXHRcdCAqICAgIGZ1bmN0aW9uIHRhYmxlQWN0aW9ucyAoKVxyXG5cdFx0ICogICAge1xyXG5cdFx0ICogICAgICB2YXIgdGFibGUgPSBpbml0VGFibGUoKTtcclxuXHRcdCAqICAgICAgLy8gcGVyZm9ybSBBUEkgb3BlcmF0aW9ucyB3aXRoIG9UYWJsZVxyXG5cdFx0ICogICAgfVxyXG5cdFx0ICovXHJcblx0XHRcImJSZXRyaWV2ZVwiOiBmYWxzZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogV2hlbiB2ZXJ0aWNhbCAoeSkgc2Nyb2xsaW5nIGlzIGVuYWJsZWQsIERhdGFUYWJsZXMgd2lsbCBmb3JjZSB0aGUgaGVpZ2h0IG9mXHJcblx0XHQgKiB0aGUgdGFibGUncyB2aWV3cG9ydCB0byB0aGUgZ2l2ZW4gaGVpZ2h0IGF0IGFsbCB0aW1lcyAodXNlZnVsIGZvciBsYXlvdXQpLlxyXG5cdFx0ICogSG93ZXZlciwgdGhpcyBjYW4gbG9vayBvZGQgd2hlbiBmaWx0ZXJpbmcgZGF0YSBkb3duIHRvIGEgc21hbGwgZGF0YSBzZXQsXHJcblx0XHQgKiBhbmQgdGhlIGZvb3RlciBpcyBsZWZ0IFwiZmxvYXRpbmdcIiBmdXJ0aGVyIGRvd24uIFRoaXMgcGFyYW1ldGVyICh3aGVuXHJcblx0XHQgKiBlbmFibGVkKSB3aWxsIGNhdXNlIERhdGFUYWJsZXMgdG8gY29sbGFwc2UgdGhlIHRhYmxlJ3Mgdmlld3BvcnQgZG93biB3aGVuXHJcblx0XHQgKiB0aGUgcmVzdWx0IHNldCB3aWxsIGZpdCB3aXRoaW4gdGhlIGdpdmVuIFkgaGVpZ2h0LlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zY3JvbGxDb2xsYXBzZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic2Nyb2xsWVwiOiBcIjIwMFwiLFxyXG5cdFx0ICogICAgICAgIFwic2Nyb2xsQ29sbGFwc2VcIjogdHJ1ZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYlNjcm9sbENvbGxhcHNlXCI6IGZhbHNlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDb25maWd1cmUgRGF0YVRhYmxlcyB0byB1c2Ugc2VydmVyLXNpZGUgcHJvY2Vzc2luZy4gTm90ZSB0aGF0IHRoZVxyXG5cdFx0ICogYGFqYXhgIHBhcmFtZXRlciBtdXN0IGFsc28gYmUgZ2l2ZW4gaW4gb3JkZXIgdG8gZ2l2ZSBEYXRhVGFibGVzIGFcclxuXHRcdCAqIHNvdXJjZSB0byBvYnRhaW4gdGhlIHJlcXVpcmVkIGRhdGEgZm9yIGVhY2ggZHJhdy5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgZmFsc2VcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQGR0b3B0IFNlcnZlci1zaWRlXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlcnZlclNpZGVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJzZXJ2ZXJTaWRlXCI6IHRydWUsXHJcblx0XHQgKiAgICAgICAgXCJhamF4XCI6IFwieGhyLnBocFwiXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJiU2VydmVyU2lkZVwiOiBmYWxzZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRW5hYmxlIG9yIGRpc2FibGUgc29ydGluZyBvZiBjb2x1bW5zLiBTb3J0aW5nIG9mIGluZGl2aWR1YWwgY29sdW1ucyBjYW4gYmVcclxuXHRcdCAqIGRpc2FibGVkIGJ5IHRoZSBgc29ydGFibGVgIG9wdGlvbiBmb3IgZWFjaCBjb2x1bW4uXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyaW5nXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwib3JkZXJpbmdcIjogZmFsc2VcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJTb3J0XCI6IHRydWUsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEVuYWJsZSBvciBkaXNwbGF5IERhdGFUYWJsZXMnIGFiaWxpdHkgdG8gc29ydCBtdWx0aXBsZSBjb2x1bW5zIGF0IHRoZVxyXG5cdFx0ICogc2FtZSB0aW1lIChhY3RpdmF0ZWQgYnkgc2hpZnQtY2xpY2sgYnkgdGhlIHVzZXIpLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyTXVsdGlcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIERpc2FibGUgbXVsdGlwbGUgY29sdW1uIHNvcnRpbmcgYWJpbGl0eVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcIm9yZGVyTXVsdGlcIjogZmFsc2VcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJTb3J0TXVsdGlcIjogdHJ1ZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsb3dzIGNvbnRyb2wgb3ZlciB3aGV0aGVyIERhdGFUYWJsZXMgc2hvdWxkIHVzZSB0aGUgdG9wICh0cnVlKSB1bmlxdWVcclxuXHRcdCAqIGNlbGwgdGhhdCBpcyBmb3VuZCBmb3IgYSBzaW5nbGUgY29sdW1uLCBvciB0aGUgYm90dG9tIChmYWxzZSAtIGRlZmF1bHQpLlxyXG5cdFx0ICogVGhpcyBpcyB1c2VmdWwgd2hlbiB1c2luZyBjb21wbGV4IGhlYWRlcnMuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyQ2VsbHNUb3BcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcIm9yZGVyQ2VsbHNUb3BcIjogdHJ1ZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYlNvcnRDZWxsc1RvcFwiOiBmYWxzZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRW5hYmxlIG9yIGRpc2FibGUgdGhlIGFkZGl0aW9uIG9mIHRoZSBjbGFzc2VzIGBzb3J0aW5nXFxfMWAsIGBzb3J0aW5nXFxfMmAgYW5kXHJcblx0XHQgKiBgc29ydGluZ1xcXzNgIHRvIHRoZSBjb2x1bW5zIHdoaWNoIGFyZSBjdXJyZW50bHkgYmVpbmcgc29ydGVkIG9uLiBUaGlzIGlzXHJcblx0XHQgKiBwcmVzZW50ZWQgYXMgYSBmZWF0dXJlIHN3aXRjaCBhcyBpdCBjYW4gaW5jcmVhc2UgcHJvY2Vzc2luZyB0aW1lICh3aGlsZVxyXG5cdFx0ICogY2xhc3NlcyBhcmUgcmVtb3ZlZCBhbmQgYWRkZWQpIHNvIGZvciBsYXJnZSBkYXRhIHNldHMgeW91IG1pZ2h0IHdhbnQgdG9cclxuXHRcdCAqIHR1cm4gdGhpcyBvZmYuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLm9yZGVyQ2xhc3Nlc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcIm9yZGVyQ2xhc3Nlc1wiOiBmYWxzZVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYlNvcnRDbGFzc2VzXCI6IHRydWUsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHN0YXRlIHNhdmluZy4gV2hlbiBlbmFibGVkIEhUTUw1IGBsb2NhbFN0b3JhZ2VgIHdpbGwgYmVcclxuXHRcdCAqIHVzZWQgdG8gc2F2ZSB0YWJsZSBkaXNwbGF5IGluZm9ybWF0aW9uIHN1Y2ggYXMgcGFnaW5hdGlvbiBpbmZvcm1hdGlvbixcclxuXHRcdCAqIGRpc3BsYXkgbGVuZ3RoLCBmaWx0ZXJpbmcgYW5kIHNvcnRpbmcuIEFzIHN1Y2ggd2hlbiB0aGUgZW5kIHVzZXIgcmVsb2Fkc1xyXG5cdFx0ICogdGhlIHBhZ2UgdGhlIGRpc3BsYXkgZGlzcGxheSB3aWxsIG1hdGNoIHdoYXQgdGh5IGhhZCBwcmV2aW91c2x5IHNldCB1cC5cclxuXHRcdCAqXHJcblx0XHQgKiBEdWUgdG8gdGhlIHVzZSBvZiBgbG9jYWxTdG9yYWdlYCB0aGUgZGVmYXVsdCBzdGF0ZSBzYXZpbmcgaXMgbm90IHN1cHBvcnRlZFxyXG5cdFx0ICogaW4gSUU2IG9yIDcuIElmIHN0YXRlIHNhdmluZyBpcyByZXF1aXJlZCBpbiB0aG9zZSBicm93c2VycywgdXNlXHJcblx0XHQgKiBgc3RhdGVTYXZlQ2FsbGJhY2tgIHRvIHByb3ZpZGUgYSBzdG9yYWdlIHNvbHV0aW9uIHN1Y2ggYXMgY29va2llcy5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgZmFsc2VcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnN0YXRlU2F2ZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInN0YXRlU2F2ZVwiOiB0cnVlXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJiU3RhdGVTYXZlXCI6IGZhbHNlLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIGEgVFIgZWxlbWVudCBpcyBjcmVhdGVkIChhbmQgYWxsIFREIGNoaWxkXHJcblx0XHQgKiBlbGVtZW50cyBoYXZlIGJlZW4gaW5zZXJ0ZWQpLCBvciByZWdpc3RlcmVkIGlmIHVzaW5nIGEgRE9NIHNvdXJjZSwgYWxsb3dpbmdcclxuXHRcdCAqIG1hbmlwdWxhdGlvbiBvZiB0aGUgVFIgZWxlbWVudCAoYWRkaW5nIGNsYXNzZXMgZXRjKS5cclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxyXG5cdFx0ICogIEBwYXJhbSB7bm9kZX0gcm93IFwiVFJcIiBlbGVtZW50IGZvciB0aGUgY3VycmVudCByb3dcclxuXHRcdCAqICBAcGFyYW0ge2FycmF5fSBkYXRhIFJhdyBkYXRhIGFycmF5IGZvciB0aGlzIHJvd1xyXG5cdFx0ICogIEBwYXJhbSB7aW50fSBkYXRhSW5kZXggVGhlIGluZGV4IG9mIHRoaXMgcm93IGluIHRoZSBpbnRlcm5hbCBhb0RhdGEgYXJyYXlcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jcmVhdGVkUm93XHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjcmVhdGVkUm93XCI6IGZ1bmN0aW9uKCByb3csIGRhdGEsIGRhdGFJbmRleCApIHtcclxuXHRcdCAqICAgICAgICAgIC8vIEJvbGQgdGhlIGdyYWRlIGZvciBhbGwgJ0EnIGdyYWRlIGJyb3dzZXJzXHJcblx0XHQgKiAgICAgICAgICBpZiAoIGRhdGFbNF0gPT0gXCJBXCIgKVxyXG5cdFx0ICogICAgICAgICAge1xyXG5cdFx0ICogICAgICAgICAgICAkKCd0ZDplcSg0KScsIHJvdykuaHRtbCggJzxiPkE8L2I+JyApO1xyXG5cdFx0ICogICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImZuQ3JlYXRlZFJvd1wiOiBudWxsLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBldmVyeSAnZHJhdycgZXZlbnQsIGFuZCBhbGxvd3MgeW91IHRvXHJcblx0XHQgKiBkeW5hbWljYWxseSBtb2RpZnkgYW55IGFzcGVjdCB5b3Ugd2FudCBhYm91dCB0aGUgY3JlYXRlZCBET00uXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5kcmF3Q2FsbGJhY2tcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImRyYXdDYWxsYmFja1wiOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XHJcblx0XHQgKiAgICAgICAgICBhbGVydCggJ0RhdGFUYWJsZXMgaGFzIHJlZHJhd24gdGhlIHRhYmxlJyApO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImZuRHJhd0NhbGxiYWNrXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIElkZW50aWNhbCB0byBmbkhlYWRlckNhbGxiYWNrKCkgYnV0IGZvciB0aGUgdGFibGUgZm9vdGVyIHRoaXMgZnVuY3Rpb25cclxuXHRcdCAqIGFsbG93cyB5b3UgdG8gbW9kaWZ5IHRoZSB0YWJsZSBmb290ZXIgb24gZXZlcnkgJ2RyYXcnIGV2ZW50LlxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKiAgQHBhcmFtIHtub2RlfSBmb290IFwiVFJcIiBlbGVtZW50IGZvciB0aGUgZm9vdGVyXHJcblx0XHQgKiAgQHBhcmFtIHthcnJheX0gZGF0YSBGdWxsIHRhYmxlIGRhdGEgKGFzIGRlcml2ZWQgZnJvbSB0aGUgb3JpZ2luYWwgSFRNTClcclxuXHRcdCAqICBAcGFyYW0ge2ludH0gc3RhcnQgSW5kZXggZm9yIHRoZSBjdXJyZW50IGRpc3BsYXkgc3RhcnRpbmcgcG9pbnQgaW4gdGhlXHJcblx0XHQgKiAgICBkaXNwbGF5IGFycmF5XHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IGVuZCBJbmRleCBmb3IgdGhlIGN1cnJlbnQgZGlzcGxheSBlbmRpbmcgcG9pbnQgaW4gdGhlXHJcblx0XHQgKiAgICBkaXNwbGF5IGFycmF5XHJcblx0XHQgKiAgQHBhcmFtIHthcnJheSBpbnR9IGRpc3BsYXkgSW5kZXggYXJyYXkgdG8gdHJhbnNsYXRlIHRoZSB2aXN1YWwgcG9zaXRpb25cclxuXHRcdCAqICAgIHRvIHRoZSBmdWxsIGRhdGEgYXJyYXlcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5mb290ZXJDYWxsYmFja1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiZm9vdGVyQ2FsbGJhY2tcIjogZnVuY3Rpb24oIHRmb290LCBkYXRhLCBzdGFydCwgZW5kLCBkaXNwbGF5ICkge1xyXG5cdFx0ICogICAgICAgICAgdGZvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RoJylbMF0uaW5uZXJIVE1MID0gXCJTdGFydGluZyBpbmRleCBpcyBcIitzdGFydDtcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKVxyXG5cdFx0ICovXHJcblx0XHRcImZuRm9vdGVyQ2FsbGJhY2tcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogV2hlbiByZW5kZXJpbmcgbGFyZ2UgbnVtYmVycyBpbiB0aGUgaW5mb3JtYXRpb24gZWxlbWVudCBmb3IgdGhlIHRhYmxlXHJcblx0XHQgKiAoaS5lLiBcIlNob3dpbmcgMSB0byAxMCBvZiA1NyBlbnRyaWVzXCIpIERhdGFUYWJsZXMgd2lsbCByZW5kZXIgbGFyZ2UgbnVtYmVyc1xyXG5cdFx0ICogdG8gaGF2ZSBhIGNvbW1hIHNlcGFyYXRvciBmb3IgdGhlICd0aG91c2FuZHMnIHVuaXRzIChlLmcuIDEgbWlsbGlvbiBpc1xyXG5cdFx0ICogcmVuZGVyZWQgYXMgXCIxLDAwMCwwMDBcIikgdG8gaGVscCByZWFkYWJpbGl0eSBmb3IgdGhlIGVuZCB1c2VyLiBUaGlzXHJcblx0XHQgKiBmdW5jdGlvbiB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG1ldGhvZCBEYXRhVGFibGVzIHVzZXMuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAbWVtYmVyXHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IHRvRm9ybWF0IG51bWJlciB0byBiZSBmb3JtYXR0ZWRcclxuXHRcdCAqICBAcmV0dXJucyB7c3RyaW5nfSBmb3JtYXR0ZWQgc3RyaW5nIGZvciBEYXRhVGFibGVzIHRvIHNob3cgdGhlIG51bWJlclxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmZvcm1hdE51bWJlclxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gRm9ybWF0IGEgbnVtYmVyIHVzaW5nIGEgc2luZ2xlIHF1b3RlIGZvciB0aGUgc2VwYXJhdG9yIChub3RlIHRoYXRcclxuXHRcdCAqICAgIC8vIHRoaXMgY2FuIGFsc28gYmUgZG9uZSB3aXRoIHRoZSBsYW5ndWFnZS50aG91c2FuZHMgb3B0aW9uKVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiZm9ybWF0TnVtYmVyXCI6IGZ1bmN0aW9uICggdG9Gb3JtYXQgKSB7XHJcblx0XHQgKiAgICAgICAgICByZXR1cm4gdG9Gb3JtYXQudG9TdHJpbmcoKS5yZXBsYWNlKFxyXG5cdFx0ICogICAgICAgICAgICAvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCInXCJcclxuXHRcdCAqICAgICAgICAgICk7XHJcblx0XHQgKiAgICAgICAgfTtcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImZuRm9ybWF0TnVtYmVyXCI6IGZ1bmN0aW9uICggdG9Gb3JtYXQgKSB7XHJcblx0XHRcdHJldHVybiB0b0Zvcm1hdC50b1N0cmluZygpLnJlcGxhY2UoXHJcblx0XHRcdFx0L1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csXHJcblx0XHRcdFx0dGhpcy5vTGFuZ3VhZ2Uuc1Rob3VzYW5kc1xyXG5cdFx0XHQpO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb24gZXZlcnkgJ2RyYXcnIGV2ZW50LCBhbmQgYWxsb3dzIHlvdSB0b1xyXG5cdFx0ICogZHluYW1pY2FsbHkgbW9kaWZ5IHRoZSBoZWFkZXIgcm93LiBUaGlzIGNhbiBiZSB1c2VkIHRvIGNhbGN1bGF0ZSBhbmRcclxuXHRcdCAqIGRpc3BsYXkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0YWJsZS5cclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxyXG5cdFx0ICogIEBwYXJhbSB7bm9kZX0gaGVhZCBcIlRSXCIgZWxlbWVudCBmb3IgdGhlIGhlYWRlclxyXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl9IGRhdGEgRnVsbCB0YWJsZSBkYXRhIChhcyBkZXJpdmVkIGZyb20gdGhlIG9yaWdpbmFsIEhUTUwpXHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IHN0YXJ0IEluZGV4IGZvciB0aGUgY3VycmVudCBkaXNwbGF5IHN0YXJ0aW5nIHBvaW50IGluIHRoZVxyXG5cdFx0ICogICAgZGlzcGxheSBhcnJheVxyXG5cdFx0ICogIEBwYXJhbSB7aW50fSBlbmQgSW5kZXggZm9yIHRoZSBjdXJyZW50IGRpc3BsYXkgZW5kaW5nIHBvaW50IGluIHRoZVxyXG5cdFx0ICogICAgZGlzcGxheSBhcnJheVxyXG5cdFx0ICogIEBwYXJhbSB7YXJyYXkgaW50fSBkaXNwbGF5IEluZGV4IGFycmF5IHRvIHRyYW5zbGF0ZSB0aGUgdmlzdWFsIHBvc2l0aW9uXHJcblx0XHQgKiAgICB0byB0aGUgZnVsbCBkYXRhIGFycmF5XHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3NcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuaGVhZGVyQ2FsbGJhY2tcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImZoZWFkZXJDYWxsYmFja1wiOiBmdW5jdGlvbiggaGVhZCwgZGF0YSwgc3RhcnQsIGVuZCwgZGlzcGxheSApIHtcclxuXHRcdCAqICAgICAgICAgIGhlYWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RoJylbMF0uaW5uZXJIVE1MID0gXCJEaXNwbGF5aW5nIFwiKyhlbmQtc3RhcnQpK1wiIHJlY29yZHNcIjtcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKVxyXG5cdFx0ICovXHJcblx0XHRcImZuSGVhZGVyQ2FsbGJhY2tcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGluZm9ybWF0aW9uIGVsZW1lbnQgY2FuIGJlIHVzZWQgdG8gY29udmV5IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50XHJcblx0XHQgKiBzdGF0ZSBvZiB0aGUgdGFibGUuIEFsdGhvdWdoIHRoZSBpbnRlcm5hdGlvbmFsaXNhdGlvbiBvcHRpb25zIHByZXNlbnRlZCBieVxyXG5cdFx0ICogRGF0YVRhYmxlcyBhcmUgcXVpdGUgY2FwYWJsZSBvZiBkZWFsaW5nIHdpdGggbW9zdCBjdXN0b21pc2F0aW9ucywgdGhlcmUgbWF5XHJcblx0XHQgKiBiZSB0aW1lcyB3aGVyZSB5b3Ugd2lzaCB0byBjdXN0b21pc2UgdGhlIHN0cmluZyBmdXJ0aGVyLiBUaGlzIGNhbGxiYWNrXHJcblx0XHQgKiBhbGxvd3MgeW91IHRvIGRvIGV4YWN0bHkgdGhhdC5cclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxyXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqICBAcGFyYW0ge2ludH0gc3RhcnQgU3RhcnRpbmcgcG9zaXRpb24gaW4gZGF0YSBmb3IgdGhlIGRyYXdcclxuXHRcdCAqICBAcGFyYW0ge2ludH0gZW5kIEVuZCBwb3NpdGlvbiBpbiBkYXRhIGZvciB0aGUgZHJhd1xyXG5cdFx0ICogIEBwYXJhbSB7aW50fSBtYXggVG90YWwgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHRhYmxlIChyZWdhcmRsZXNzIG9mXHJcblx0XHQgKiAgICBmaWx0ZXJpbmcpXHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IHRvdGFsIFRvdGFsIG51bWJlciBvZiByb3dzIGluIHRoZSBkYXRhIHNldCwgYWZ0ZXIgZmlsdGVyaW5nXHJcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHByZSBUaGUgc3RyaW5nIHRoYXQgRGF0YVRhYmxlcyBoYXMgZm9ybWF0dGVkIHVzaW5nIGl0J3NcclxuXHRcdCAqICAgIG93biBydWxlc1xyXG5cdFx0ICogIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBpbmZvcm1hdGlvbiBlbGVtZW50LlxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmluZm9DYWxsYmFja1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgXCJpbmZvQ2FsbGJhY2tcIjogZnVuY3Rpb24oIHNldHRpbmdzLCBzdGFydCwgZW5kLCBtYXgsIHRvdGFsLCBwcmUgKSB7XHJcblx0XHQgKiAgICAgICAgcmV0dXJuIHN0YXJ0ICtcIiB0byBcIisgZW5kO1xyXG5cdFx0ICogICAgICB9XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiZm5JbmZvQ2FsbGJhY2tcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsbGVkIHdoZW4gdGhlIHRhYmxlIGhhcyBiZWVuIGluaXRpYWxpc2VkLiBOb3JtYWxseSBEYXRhVGFibGVzIHdpbGxcclxuXHRcdCAqIGluaXRpYWxpc2Ugc2VxdWVudGlhbGx5IGFuZCB0aGVyZSB3aWxsIGJlIG5vIG5lZWQgZm9yIHRoaXMgZnVuY3Rpb24sXHJcblx0XHQgKiBob3dldmVyLCB0aGlzIGRvZXMgbm90IGhvbGQgdHJ1ZSB3aGVuIHVzaW5nIGV4dGVybmFsIGxhbmd1YWdlIGluZm9ybWF0aW9uXHJcblx0XHQgKiBzaW5jZSB0aGF0IGlzIG9idGFpbmVkIHVzaW5nIGFuIGFzeW5jIFhIUiBjYWxsLlxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IGpzb24gVGhlIEpTT04gb2JqZWN0IHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyIC0gb25seVxyXG5cdFx0ICogICAgcHJlc2VudCBpZiBjbGllbnQtc2lkZSBBamF4IHNvdXJjZWQgZGF0YSBpcyB1c2VkXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3NcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuaW5pdENvbXBsZXRlXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJpbml0Q29tcGxldGVcIjogZnVuY3Rpb24oc2V0dGluZ3MsIGpzb24pIHtcclxuXHRcdCAqICAgICAgICAgIGFsZXJ0KCAnRGF0YVRhYmxlcyBoYXMgZmluaXNoZWQgaXRzIGluaXRpYWxpc2F0aW9uLicgKTtcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKVxyXG5cdFx0ICovXHJcblx0XHRcImZuSW5pdENvbXBsZXRlXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENhbGxlZCBhdCB0aGUgdmVyeSBzdGFydCBvZiBlYWNoIHRhYmxlIGRyYXcgYW5kIGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGVcclxuXHRcdCAqIGRyYXcgYnkgcmV0dXJuaW5nIGZhbHNlLCBhbnkgb3RoZXIgcmV0dXJuIChpbmNsdWRpbmcgdW5kZWZpbmVkKSByZXN1bHRzIGluXHJcblx0XHQgKiB0aGUgZnVsbCBkcmF3IG9jY3VycmluZykuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqICBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2lsbCBjYW5jZWwgdGhlIGRyYXcsIGFueXRoaW5nIGVsc2UgKGluY2x1ZGluZyBub1xyXG5cdFx0ICogICAgcmV0dXJuKSB3aWxsIGFsbG93IGl0IHRvIGNvbXBsZXRlLlxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnByZURyYXdDYWxsYmFja1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwicHJlRHJhd0NhbGxiYWNrXCI6IGZ1bmN0aW9uKCBzZXR0aW5ncyApIHtcclxuXHRcdCAqICAgICAgICAgIGlmICggJCgnI3Rlc3QnKS52YWwoKSA9PSAxICkge1xyXG5cdFx0ICogICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0XHQgKiAgICAgICAgICB9XHJcblx0XHQgKiAgICAgICAgfVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiZm5QcmVEcmF3Q2FsbGJhY2tcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvICdwb3N0IHByb2Nlc3MnIGVhY2ggcm93IGFmdGVyIGl0IGhhdmUgYmVlblxyXG5cdFx0ICogZ2VuZXJhdGVkIGZvciBlYWNoIHRhYmxlIGRyYXcsIGJ1dCBiZWZvcmUgaXQgaXMgcmVuZGVyZWQgb24gc2NyZWVuLiBUaGlzXHJcblx0XHQgKiBmdW5jdGlvbiBtaWdodCBiZSB1c2VkIGZvciBzZXR0aW5nIHRoZSByb3cgY2xhc3MgbmFtZSBldGMuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge25vZGV9IHJvdyBcIlRSXCIgZWxlbWVudCBmb3IgdGhlIGN1cnJlbnQgcm93XHJcblx0XHQgKiAgQHBhcmFtIHthcnJheX0gZGF0YSBSYXcgZGF0YSBhcnJheSBmb3IgdGhpcyByb3dcclxuXHRcdCAqICBAcGFyYW0ge2ludH0gZGlzcGxheUluZGV4IFRoZSBkaXNwbGF5IGluZGV4IGZvciB0aGUgY3VycmVudCB0YWJsZSBkcmF3XHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IGRpc3BsYXlJbmRleEZ1bGwgVGhlIGluZGV4IG9mIHRoZSBkYXRhIGluIHRoZSBmdWxsIGxpc3Qgb2ZcclxuXHRcdCAqICAgIHJvd3MgKGFmdGVyIGZpbHRlcmluZylcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5yb3dDYWxsYmFja1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwicm93Q2FsbGJhY2tcIjogZnVuY3Rpb24oIHJvdywgZGF0YSwgZGlzcGxheUluZGV4LCBkaXNwbGF5SW5kZXhGdWxsICkge1xyXG5cdFx0ICogICAgICAgICAgLy8gQm9sZCB0aGUgZ3JhZGUgZm9yIGFsbCAnQScgZ3JhZGUgYnJvd3NlcnNcclxuXHRcdCAqICAgICAgICAgIGlmICggZGF0YVs0XSA9PSBcIkFcIiApIHtcclxuXHRcdCAqICAgICAgICAgICAgJCgndGQ6ZXEoNCknLCByb3cpLmh0bWwoICc8Yj5BPC9iPicgKTtcclxuXHRcdCAqICAgICAgICAgIH1cclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJmblJvd0NhbGxiYWNrXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIF9fRGVwcmVjYXRlZF9fIFRoZSBmdW5jdGlvbmFsaXR5IHByb3ZpZGVkIGJ5IHRoaXMgcGFyYW1ldGVyIGhhcyBub3cgYmVlblxyXG5cdFx0ICogc3VwZXJzZWRlZCBieSB0aGF0IHByb3ZpZGVkIHRocm91Z2ggYGFqYXhgLCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxyXG5cdFx0ICpcclxuXHRcdCAqIFRoaXMgcGFyYW1ldGVyIGFsbG93cyB5b3UgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgZnVuY3Rpb24gd2hpY2ggb2J0YWluc1xyXG5cdFx0ICogdGhlIGRhdGEgZnJvbSB0aGUgc2VydmVyIHNvIHNvbWV0aGluZyBtb3JlIHN1aXRhYmxlIGZvciB5b3VyIGFwcGxpY2F0aW9uLlxyXG5cdFx0ICogRm9yIGV4YW1wbGUgeW91IGNvdWxkIHVzZSBQT1NUIGRhdGEsIG9yIHB1bGwgaW5mb3JtYXRpb24gZnJvbSBhIEdlYXJzIG9yXHJcblx0XHQgKiBBSVIgZGF0YWJhc2UuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAbWVtYmVyXHJcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBIVFRQIHNvdXJjZSB0byBvYnRhaW4gdGhlIGRhdGEgZnJvbSAoYGFqYXhgKVxyXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl9IGRhdGEgQSBrZXkvdmFsdWUgcGFpciBvYmplY3QgY29udGFpbmluZyB0aGUgZGF0YSB0byBzZW5kXHJcblx0XHQgKiAgICB0byB0aGUgc2VydmVyXHJcblx0XHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIGNvbXBsZXRpb24gb2YgdGhlIGRhdGEgZ2V0XHJcblx0XHQgKiAgICBwcm9jZXNzIHRoYXQgd2lsbCBkcmF3IHRoZSBkYXRhIG9uIHRoZSBwYWdlLlxyXG5cdFx0ICogIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXHJcblx0XHQgKiAgQGR0b3B0IFNlcnZlci1zaWRlXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlcnZlckRhdGFcclxuXHRcdCAqXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgMS4xMC4gUGxlYXNlIHVzZSBgYWpheGAgZm9yIHRoaXMgZnVuY3Rpb25hbGl0eSBub3cuXHJcblx0XHQgKi9cclxuXHRcdFwiZm5TZXJ2ZXJEYXRhXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIF9fRGVwcmVjYXRlZF9fIFRoZSBmdW5jdGlvbmFsaXR5IHByb3ZpZGVkIGJ5IHRoaXMgcGFyYW1ldGVyIGhhcyBub3cgYmVlblxyXG5cdFx0ICogc3VwZXJzZWRlZCBieSB0aGF0IHByb3ZpZGVkIHRocm91Z2ggYGFqYXhgLCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxyXG5cdFx0ICpcclxuXHRcdCAqICBJdCBpcyBvZnRlbiB1c2VmdWwgdG8gc2VuZCBleHRyYSBkYXRhIHRvIHRoZSBzZXJ2ZXIgd2hlbiBtYWtpbmcgYW4gQWpheFxyXG5cdFx0ICogcmVxdWVzdCAtIGZvciBleGFtcGxlIGN1c3RvbSBmaWx0ZXJpbmcgaW5mb3JtYXRpb24sIGFuZCB0aGlzIGNhbGxiYWNrXHJcblx0XHQgKiBmdW5jdGlvbiBtYWtlcyBpdCB0cml2aWFsIHRvIHNlbmQgZXh0cmEgaW5mb3JtYXRpb24gdG8gdGhlIHNlcnZlci4gVGhlXHJcblx0XHQgKiBwYXNzZWQgaW4gcGFyYW1ldGVyIGlzIHRoZSBkYXRhIHNldCB0aGF0IGhhcyBiZWVuIGNvbnN0cnVjdGVkIGJ5XHJcblx0XHQgKiBEYXRhVGFibGVzLCBhbmQgeW91IGNhbiBhZGQgdG8gdGhpcyBvciBtb2RpZnkgaXQgYXMgeW91IHJlcXVpcmUuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge2FycmF5fSBkYXRhIERhdGEgYXJyYXkgKGFycmF5IG9mIG9iamVjdHMgd2hpY2ggYXJlIG5hbWUvdmFsdWVcclxuXHRcdCAqICAgIHBhaXJzKSB0aGF0IGhhcyBiZWVuIGNvbnN0cnVjdGVkIGJ5IERhdGFUYWJsZXMgYW5kIHdpbGwgYmUgc2VudCB0byB0aGVcclxuXHRcdCAqICAgIHNlcnZlci4gSW4gdGhlIGNhc2Ugb2YgQWpheCBzb3VyY2VkIGRhdGEgd2l0aCBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXHJcblx0XHQgKiAgICB0aGlzIHdpbGwgYmUgYW4gZW1wdHkgYXJyYXksIGZvciBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIHRoZXJlIHdpbGwgYmUgYVxyXG5cdFx0ICogICAgc2lnbmlmaWNhbnQgbnVtYmVyIG9mIHBhcmFtZXRlcnMhXHJcblx0XHQgKiAgQHJldHVybnMge3VuZGVmaW5lZH0gRW5zdXJlIHRoYXQgeW91IG1vZGlmeSB0aGUgZGF0YSBhcnJheSBwYXNzZWQgaW4sXHJcblx0XHQgKiAgICBhcyB0aGlzIGlzIHBhc3NlZCBieSByZWZlcmVuY2UuXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3NcclxuXHRcdCAqICBAZHRvcHQgU2VydmVyLXNpZGVcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc2VydmVyUGFyYW1zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkZXByZWNhdGVkIDEuMTAuIFBsZWFzZSB1c2UgYGFqYXhgIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHkgbm93LlxyXG5cdFx0ICovXHJcblx0XHRcImZuU2VydmVyUGFyYW1zXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIExvYWQgdGhlIHRhYmxlIHN0YXRlLiBXaXRoIHRoaXMgZnVuY3Rpb24geW91IGNhbiBkZWZpbmUgZnJvbSB3aGVyZSwgYW5kIGhvdywgdGhlXHJcblx0XHQgKiBzdGF0ZSBvZiBhIHRhYmxlIGlzIGxvYWRlZC4gQnkgZGVmYXVsdCBEYXRhVGFibGVzIHdpbGwgbG9hZCBmcm9tIGBsb2NhbFN0b3JhZ2VgXHJcblx0XHQgKiBidXQgeW91IG1pZ2h0IHdpc2ggdG8gdXNlIGEgc2VydmVyLXNpZGUgZGF0YWJhc2Ugb3IgY29va2llcy5cclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxyXG5cdFx0ICogIEBtZW1iZXJcclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqICBAcmV0dXJuIHtvYmplY3R9IFRoZSBEYXRhVGFibGVzIHN0YXRlIG9iamVjdCB0byBiZSBsb2FkZWRcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IENhbGxiYWNrc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zdGF0ZUxvYWRDYWxsYmFja1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic3RhdGVTYXZlXCI6IHRydWUsXHJcblx0XHQgKiAgICAgICAgXCJzdGF0ZUxvYWRDYWxsYmFja1wiOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuXHRcdCAqICAgICAgICAgIHZhciBvO1xyXG5cdFx0ICpcclxuXHRcdCAqICAgICAgICAgIC8vIFNlbmQgYW4gQWpheCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdG8gZ2V0IHRoZSBkYXRhLiBOb3RlIHRoYXRcclxuXHRcdCAqICAgICAgICAgIC8vIHRoaXMgaXMgYSBzeW5jaHJvbm91cyByZXF1ZXN0LlxyXG5cdFx0ICogICAgICAgICAgJC5hamF4KCB7XHJcblx0XHQgKiAgICAgICAgICAgIFwidXJsXCI6IFwiL3N0YXRlX2xvYWRcIixcclxuXHRcdCAqICAgICAgICAgICAgXCJhc3luY1wiOiBmYWxzZSxcclxuXHRcdCAqICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiBcImpzb25cIixcclxuXHRcdCAqICAgICAgICAgICAgXCJzdWNjZXNzXCI6IGZ1bmN0aW9uIChqc29uKSB7XHJcblx0XHQgKiAgICAgICAgICAgICAgbyA9IGpzb247XHJcblx0XHQgKiAgICAgICAgICAgIH1cclxuXHRcdCAqICAgICAgICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgICAgICByZXR1cm4gbztcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJmblN0YXRlTG9hZENhbGxiYWNrXCI6IGZ1bmN0aW9uICggc2V0dGluZ3MgKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoXHJcblx0XHRcdFx0XHQoc2V0dGluZ3MuaVN0YXRlRHVyYXRpb24gPT09IC0xID8gc2Vzc2lvblN0b3JhZ2UgOiBsb2NhbFN0b3JhZ2UpLmdldEl0ZW0oXHJcblx0XHRcdFx0XHRcdCdEYXRhVGFibGVzXycrc2V0dGluZ3Muc0luc3RhbmNlKydfJytsb2NhdGlvbi5wYXRobmFtZVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWxsYmFjayB3aGljaCBhbGxvd3MgbW9kaWZpY2F0aW9uIG9mIHRoZSBzYXZlZCBzdGF0ZSBwcmlvciB0byBsb2FkaW5nIHRoYXQgc3RhdGUuXHJcblx0XHQgKiBUaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSB0YWJsZSBpcyBsb2FkaW5nIHN0YXRlIGZyb20gdGhlIHN0b3JlZCBkYXRhLCBidXRcclxuXHRcdCAqIHByaW9yIHRvIHRoZSBzZXR0aW5ncyBvYmplY3QgYmVpbmcgbW9kaWZpZWQgYnkgdGhlIHNhdmVkIHN0YXRlLiBOb3RlIHRoYXQgZm9yXHJcblx0XHQgKiBwbHVnLWluIGF1dGhvcnMsIHlvdSBzaG91bGQgdXNlIHRoZSBgc3RhdGVMb2FkUGFyYW1zYCBldmVudCB0byBsb2FkIHBhcmFtZXRlcnMgZm9yXHJcblx0XHQgKiBhIHBsdWctaW4uXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgc3RhdGUgb2JqZWN0IHRoYXQgaXMgdG8gYmUgbG9hZGVkXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3NcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RhdGVMb2FkUGFyYW1zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBSZW1vdmUgYSBzYXZlZCBmaWx0ZXIsIHNvIGZpbHRlcmluZyBpcyBuZXZlciBsb2FkZWRcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInN0YXRlU2F2ZVwiOiB0cnVlLFxyXG5cdFx0ICogICAgICAgIFwic3RhdGVMb2FkUGFyYW1zXCI6IGZ1bmN0aW9uIChzZXR0aW5ncywgZGF0YSkge1xyXG5cdFx0ICogICAgICAgICAgZGF0YS5vU2VhcmNoLnNTZWFyY2ggPSBcIlwiO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gRGlzYWxsb3cgc3RhdGUgbG9hZGluZyBieSByZXR1cm5pbmcgZmFsc2VcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInN0YXRlU2F2ZVwiOiB0cnVlLFxyXG5cdFx0ICogICAgICAgIFwic3RhdGVMb2FkUGFyYW1zXCI6IGZ1bmN0aW9uIChzZXR0aW5ncywgZGF0YSkge1xyXG5cdFx0ICogICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImZuU3RhdGVMb2FkUGFyYW1zXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHN0YXRlIGhhcyBiZWVuIGxvYWRlZCBmcm9tIHRoZSBzdGF0ZSBzYXZpbmcgbWV0aG9kXHJcblx0XHQgKiBhbmQgdGhlIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IGhhcyBiZWVuIG1vZGlmaWVkIGFzIGEgcmVzdWx0IG9mIHRoZSBsb2FkZWQgc3RhdGUuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGxvYWRlZFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnN0YXRlTG9hZGVkXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBTaG93IGFuIGFsZXJ0IHdpdGggdGhlIGZpbHRlcmluZyB2YWx1ZSB0aGF0IHdhcyBzYXZlZFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic3RhdGVTYXZlXCI6IHRydWUsXHJcblx0XHQgKiAgICAgICAgXCJzdGF0ZUxvYWRlZFwiOiBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcclxuXHRcdCAqICAgICAgICAgIGFsZXJ0KCAnU2F2ZWQgZmlsdGVyIHdhczogJytkYXRhLm9TZWFyY2guc1NlYXJjaCApO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImZuU3RhdGVMb2FkZWRcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU2F2ZSB0aGUgdGFibGUgc3RhdGUuIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBkZWZpbmUgd2hlcmUgYW5kIGhvdyB0aGUgc3RhdGVcclxuXHRcdCAqIGluZm9ybWF0aW9uIGZvciB0aGUgdGFibGUgaXMgc3RvcmVkIEJ5IGRlZmF1bHQgRGF0YVRhYmxlcyB3aWxsIHVzZSBgbG9jYWxTdG9yYWdlYFxyXG5cdFx0ICogYnV0IHlvdSBtaWdodCB3aXNoIHRvIHVzZSBhIHNlcnZlci1zaWRlIGRhdGFiYXNlIG9yIGNvb2tpZXMuXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAbWVtYmVyXHJcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHQgKiAgQHBhcmFtIHtvYmplY3R9IGRhdGEgVGhlIHN0YXRlIG9iamVjdCB0byBiZSBzYXZlZFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgQ2FsbGJhY2tzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnN0YXRlU2F2ZUNhbGxiYWNrXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVcIjogdHJ1ZSxcclxuXHRcdCAqICAgICAgICBcInN0YXRlU2F2ZUNhbGxiYWNrXCI6IGZ1bmN0aW9uIChzZXR0aW5ncywgZGF0YSkge1xyXG5cdFx0ICogICAgICAgICAgLy8gU2VuZCBhbiBBamF4IHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSBzdGF0ZSBvYmplY3RcclxuXHRcdCAqICAgICAgICAgICQuYWpheCgge1xyXG5cdFx0ICogICAgICAgICAgICBcInVybFwiOiBcIi9zdGF0ZV9zYXZlXCIsXHJcblx0XHQgKiAgICAgICAgICAgIFwiZGF0YVwiOiBkYXRhLFxyXG5cdFx0ICogICAgICAgICAgICBcImRhdGFUeXBlXCI6IFwianNvblwiLFxyXG5cdFx0ICogICAgICAgICAgICBcIm1ldGhvZFwiOiBcIlBPU1RcIlxyXG5cdFx0ICogICAgICAgICAgICBcInN1Y2Nlc3NcIjogZnVuY3Rpb24gKCkge31cclxuXHRcdCAqICAgICAgICAgIH0gKTtcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJmblN0YXRlU2F2ZUNhbGxiYWNrXCI6IGZ1bmN0aW9uICggc2V0dGluZ3MsIGRhdGEgKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0KHNldHRpbmdzLmlTdGF0ZUR1cmF0aW9uID09PSAtMSA/IHNlc3Npb25TdG9yYWdlIDogbG9jYWxTdG9yYWdlKS5zZXRJdGVtKFxyXG5cdFx0XHRcdFx0J0RhdGFUYWJsZXNfJytzZXR0aW5ncy5zSW5zdGFuY2UrJ18nK2xvY2F0aW9uLnBhdGhuYW1lLFxyXG5cdFx0XHRcdFx0SlNPTi5zdHJpbmdpZnkoIGRhdGEgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWxsYmFjayB3aGljaCBhbGxvd3MgbW9kaWZpY2F0aW9uIG9mIHRoZSBzdGF0ZSB0byBiZSBzYXZlZC4gQ2FsbGVkIHdoZW4gdGhlIHRhYmxlXHJcblx0XHQgKiBoYXMgY2hhbmdlZCBzdGF0ZSBhIG5ldyBzdGF0ZSBzYXZlIGlzIHJlcXVpcmVkLiBUaGlzIG1ldGhvZCBhbGxvd3MgbW9kaWZpY2F0aW9uIG9mXHJcblx0XHQgKiB0aGUgc3RhdGUgc2F2aW5nIG9iamVjdCBwcmlvciB0byBhY3R1YWxseSBkb2luZyB0aGUgc2F2ZSwgaW5jbHVkaW5nIGFkZGl0aW9uIG9yXHJcblx0XHQgKiBvdGhlciBzdGF0ZSBwcm9wZXJ0aWVzIG9yIG1vZGlmaWNhdGlvbi4gTm90ZSB0aGF0IGZvciBwbHVnLWluIGF1dGhvcnMsIHlvdSBzaG91bGRcclxuXHRcdCAqIHVzZSB0aGUgYHN0YXRlU2F2ZVBhcmFtc2AgZXZlbnQgdG8gc2F2ZSBwYXJhbWV0ZXJzIGZvciBhIHBsdWctaW4uXHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHRcdCAqICBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgc3RhdGUgb2JqZWN0IHRvIGJlIHNhdmVkXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBDYWxsYmFja3NcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuc3RhdGVTYXZlUGFyYW1zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBSZW1vdmUgYSBzYXZlZCBmaWx0ZXIsIHNvIGZpbHRlcmluZyBpcyBuZXZlciBzYXZlZFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic3RhdGVTYXZlXCI6IHRydWUsXHJcblx0XHQgKiAgICAgICAgXCJzdGF0ZVNhdmVQYXJhbXNcIjogZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhKSB7XHJcblx0XHQgKiAgICAgICAgICBkYXRhLm9TZWFyY2guc1NlYXJjaCA9IFwiXCI7XHJcblx0XHQgKiAgICAgICAgfVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiZm5TdGF0ZVNhdmVQYXJhbXNcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRHVyYXRpb24gZm9yIHdoaWNoIHRoZSBzYXZlZCBzdGF0ZSBpbmZvcm1hdGlvbiBpcyBjb25zaWRlcmVkIHZhbGlkLiBBZnRlciB0aGlzIHBlcmlvZFxyXG5cdFx0ICogaGFzIGVsYXBzZWQgdGhlIHN0YXRlIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIGRlZmF1bHQuXHJcblx0XHQgKiBWYWx1ZSBpcyBnaXZlbiBpbiBzZWNvbmRzLlxyXG5cdFx0ICogIEB0eXBlIGludFxyXG5cdFx0ICogIEBkZWZhdWx0IDcyMDAgPGk+KDIgaG91cnMpPC9pPlxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zdGF0ZUR1cmF0aW9uXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJzdGF0ZUR1cmF0aW9uXCI6IDYwKjYwKjI0OyAvLyAxIGRheVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9IClcclxuXHRcdCAqL1xyXG5cdFx0XCJpU3RhdGVEdXJhdGlvblwiOiA3MjAwLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBXaGVuIGVuYWJsZWQgRGF0YVRhYmxlcyB3aWxsIG5vdCBtYWtlIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIGZvciB0aGUgZmlyc3RcclxuXHRcdCAqIHBhZ2UgZHJhdyAtIHJhdGhlciBpdCB3aWxsIHVzZSB0aGUgZGF0YSBhbHJlYWR5IG9uIHRoZSBwYWdlIChubyBzb3J0aW5nIGV0Y1xyXG5cdFx0ICogd2lsbCBiZSBhcHBsaWVkIHRvIGl0KSwgdGh1cyBzYXZpbmcgb24gYW4gWEhSIGF0IGxvYWQgdGltZS4gYGRlZmVyTG9hZGluZ2BcclxuXHRcdCAqIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCBkZWZlcnJlZCBsb2FkaW5nIGlzIHJlcXVpcmVkLCBidXQgaXQgaXMgYWxzbyB1c2VkXHJcblx0XHQgKiB0byB0ZWxsIERhdGFUYWJsZXMgaG93IG1hbnkgcmVjb3JkcyB0aGVyZSBhcmUgaW4gdGhlIGZ1bGwgdGFibGUgKGFsbG93aW5nXHJcblx0XHQgKiB0aGUgaW5mb3JtYXRpb24gZWxlbWVudCBhbmQgcGFnaW5hdGlvbiB0byBiZSBkaXNwbGF5ZWQgY29ycmVjdGx5KS4gSW4gdGhlIGNhc2VcclxuXHRcdCAqIHdoZXJlIGEgZmlsdGVyaW5nIGlzIGFwcGxpZWQgdG8gdGhlIHRhYmxlIG9uIGluaXRpYWwgbG9hZCwgdGhpcyBjYW4gYmVcclxuXHRcdCAqIGluZGljYXRlZCBieSBnaXZpbmcgdGhlIHBhcmFtZXRlciBhcyBhbiBhcnJheSwgd2hlcmUgdGhlIGZpcnN0IGVsZW1lbnQgaXNcclxuXHRcdCAqIHRoZSBudW1iZXIgb2YgcmVjb3JkcyBhdmFpbGFibGUgYWZ0ZXIgZmlsdGVyaW5nIGFuZCB0aGUgc2Vjb25kIGVsZW1lbnQgaXMgdGhlXHJcblx0XHQgKiBudW1iZXIgb2YgcmVjb3JkcyB3aXRob3V0IGZpbHRlcmluZyAoYWxsb3dpbmcgdGhlIHRhYmxlIGluZm9ybWF0aW9uIGVsZW1lbnRcclxuXHRcdCAqIHRvIGJlIHNob3duIGNvcnJlY3RseSkuXHJcblx0XHQgKiAgQHR5cGUgaW50IHwgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmRlZmVyTG9hZGluZ1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gNTcgcmVjb3JkcyBhdmFpbGFibGUgaW4gdGhlIHRhYmxlLCBubyBmaWx0ZXJpbmcgYXBwbGllZFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic2VydmVyU2lkZVwiOiB0cnVlLFxyXG5cdFx0ICogICAgICAgIFwiYWpheFwiOiBcInNjcmlwdHMvc2VydmVyX3Byb2Nlc3NpbmcucGhwXCIsXHJcblx0XHQgKiAgICAgICAgXCJkZWZlckxvYWRpbmdcIjogNTdcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gNTcgcmVjb3JkcyBhZnRlciBmaWx0ZXJpbmcsIDEwMCB3aXRob3V0IGZpbHRlcmluZyAoYW4gaW5pdGlhbCBmaWx0ZXIgYXBwbGllZClcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInNlcnZlclNpZGVcIjogdHJ1ZSxcclxuXHRcdCAqICAgICAgICBcImFqYXhcIjogXCJzY3JpcHRzL3NlcnZlcl9wcm9jZXNzaW5nLnBocFwiLFxyXG5cdFx0ICogICAgICAgIFwiZGVmZXJMb2FkaW5nXCI6IFsgNTcsIDEwMCBdLFxyXG5cdFx0ICogICAgICAgIFwic2VhcmNoXCI6IHtcclxuXHRcdCAqICAgICAgICAgIFwic2VhcmNoXCI6IFwibXlfZmlsdGVyXCJcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJpRGVmZXJMb2FkaW5nXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgb24gYSBzaW5nbGUgcGFnZSB3aGVuIHVzaW5nIHBhZ2luYXRpb24uIElmXHJcblx0XHQgKiBmZWF0dXJlIGVuYWJsZWQgKGBsZW5ndGhDaGFuZ2VgKSB0aGVuIHRoZSBlbmQgdXNlciB3aWxsIGJlIGFibGUgdG8gb3ZlcnJpZGVcclxuXHRcdCAqIHRoaXMgdG8gYSBjdXN0b20gc2V0dGluZyB1c2luZyBhIHBvcC11cCBtZW51LlxyXG5cdFx0ICogIEB0eXBlIGludFxyXG5cdFx0ICogIEBkZWZhdWx0IDEwXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnBhZ2VMZW5ndGhcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInBhZ2VMZW5ndGhcIjogNTBcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApXHJcblx0XHQgKi9cclxuXHRcdFwiaURpc3BsYXlMZW5ndGhcIjogMTAsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIERlZmluZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIGRhdGEgZGlzcGxheSB3aGVuIHVzaW5nIERhdGFUYWJsZXMgd2l0aFxyXG5cdFx0ICogcGFnaW5hdGlvbi4gTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIGlzIHRoZSBudW1iZXIgb2YgcmVjb3JkcywgcmF0aGVyIHRoYW5cclxuXHRcdCAqIHRoZSBwYWdlIG51bWJlciwgc28gaWYgeW91IGhhdmUgMTAgcmVjb3JkcyBwZXIgcGFnZSBhbmQgd2FudCB0byBzdGFydCBvblxyXG5cdFx0ICogdGhlIHRoaXJkIHBhZ2UsIGl0IHNob3VsZCBiZSBcIjIwXCIuXHJcblx0XHQgKiAgQHR5cGUgaW50XHJcblx0XHQgKiAgQGRlZmF1bHQgMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5kaXNwbGF5U3RhcnRcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImRpc3BsYXlTdGFydFwiOiAyMFxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9IClcclxuXHRcdCAqL1xyXG5cdFx0XCJpRGlzcGxheVN0YXJ0XCI6IDAsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEJ5IGRlZmF1bHQgRGF0YVRhYmxlcyBhbGxvd3Mga2V5Ym9hcmQgbmF2aWdhdGlvbiBvZiB0aGUgdGFibGUgKHNvcnRpbmcsIHBhZ2luZyxcclxuXHRcdCAqIGFuZCBmaWx0ZXJpbmcpIGJ5IGFkZGluZyBhIGB0YWJpbmRleGAgYXR0cmlidXRlIHRvIHRoZSByZXF1aXJlZCBlbGVtZW50cy4gVGhpc1xyXG5cdFx0ICogYWxsb3dzIHlvdSB0byB0YWIgdGhyb3VnaCB0aGUgY29udHJvbHMgYW5kIHByZXNzIHRoZSBlbnRlciBrZXkgdG8gYWN0aXZhdGUgdGhlbS5cclxuXHRcdCAqIFRoZSB0YWJpbmRleCBpcyBkZWZhdWx0IDAsIG1lYW5pbmcgdGhhdCB0aGUgdGFiIGZvbGxvd3MgdGhlIGZsb3cgb2YgdGhlIGRvY3VtZW50LlxyXG5cdFx0ICogWW91IGNhbiBvdmVycnVsZSB0aGlzIHVzaW5nIHRoaXMgcGFyYW1ldGVyIGlmIHlvdSB3aXNoLiBVc2UgYSB2YWx1ZSBvZiAtMSB0b1xyXG5cdFx0ICogZGlzYWJsZSBidWlsdC1pbiBrZXlib2FyZCBuYXZpZ2F0aW9uLlxyXG5cdFx0ICogIEB0eXBlIGludFxyXG5cdFx0ICogIEBkZWZhdWx0IDBcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMudGFiSW5kZXhcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInRhYkluZGV4XCI6IDFcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImlUYWJJbmRleFwiOiAwLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDbGFzc2VzIHRoYXQgRGF0YVRhYmxlcyBhc3NpZ25zIHRvIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgYW5kIGZlYXR1cmVzXHJcblx0XHQgKiB0aGF0IGl0IGFkZHMgdG8gdGhlIEhUTUwgdGFibGUuIFRoaXMgYWxsb3dzIGNsYXNzZXMgdG8gYmUgY29uZmlndXJlZFxyXG5cdFx0ICogZHVyaW5nIGluaXRpYWxpc2F0aW9uIGluIGFkZGl0aW9uIHRvIHRocm91Z2ggdGhlIHN0YXRpY1xyXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5leHQub1N0ZENsYXNzZXN9IG9iamVjdCkuXHJcblx0XHQgKiAgQG5hbWVzcGFjZVxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jbGFzc2VzXHJcblx0XHQgKi9cclxuXHRcdFwib0NsYXNzZXNcIjoge30sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBzdHJpbmdzIHRoYXQgRGF0YVRhYmxlcyB1c2VzIGluIHRoZSB1c2VyIGludGVyZmFjZSB0aGF0IGl0IGNyZWF0ZXNcclxuXHRcdCAqIGFyZSBkZWZpbmVkIGluIHRoaXMgb2JqZWN0LCBhbGxvd2luZyB5b3UgdG8gbW9kaWZpZWQgdGhlbSBpbmRpdmlkdWFsbHkgb3JcclxuXHRcdCAqIGNvbXBsZXRlbHkgcmVwbGFjZSB0aGVtIGFsbCBhcyByZXF1aXJlZC5cclxuXHRcdCAqICBAbmFtZXNwYWNlXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlXHJcblx0XHQgKi9cclxuXHRcdFwib0xhbmd1YWdlXCI6IHtcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFN0cmluZ3MgdGhhdCBhcmUgdXNlZCBmb3IgV0FJLUFSSUEgbGFiZWxzIGFuZCBjb250cm9scyBvbmx5ICh0aGVzZSBhcmUgbm90XHJcblx0XHRcdCAqIGFjdHVhbGx5IHZpc2libGUgb24gdGhlIHBhZ2UsIGJ1dCB3aWxsIGJlIHJlYWQgYnkgc2NyZWVucmVhZGVycywgYW5kIHRodXNcclxuXHRcdFx0ICogbXVzdCBiZSBpbnRlcm5hdGlvbmFsaXNlZCBhcyB3ZWxsKS5cclxuXHRcdFx0ICogIEBuYW1lc3BhY2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5hcmlhXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcIm9BcmlhXCI6IHtcclxuXHRcdFx0XHQvKipcclxuXHRcdFx0XHQgKiBBUklBIGxhYmVsIHRoYXQgaXMgYWRkZWQgdG8gdGhlIHRhYmxlIGhlYWRlcnMgd2hlbiB0aGUgY29sdW1uIG1heSBiZVxyXG5cdFx0XHRcdCAqIHNvcnRlZCBhc2NlbmRpbmcgYnkgYWN0aXZpbmcgdGhlIGNvbHVtbiAoY2xpY2sgb3IgcmV0dXJuIHdoZW4gZm9jdXNlZCkuXHJcblx0XHRcdFx0ICogTm90ZSB0aGF0IHRoZSBjb2x1bW4gaGVhZGVyIGlzIHByZWZpeGVkIHRvIHRoaXMgc3RyaW5nLlxyXG5cdFx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0XHQgKiAgQGRlZmF1bHQgOiBhY3RpdmF0ZSB0byBzb3J0IGNvbHVtbiBhc2NlbmRpbmdcclxuXHRcdFx0XHQgKlxyXG5cdFx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmFyaWEuc29ydEFzY2VuZGluZ1xyXG5cdFx0XHRcdCAqXHJcblx0XHRcdFx0ICogIEBleGFtcGxlXHJcblx0XHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XHJcblx0XHRcdFx0ICogICAgICAgICAgXCJhcmlhXCI6IHtcclxuXHRcdFx0XHQgKiAgICAgICAgICAgIFwic29ydEFzY2VuZGluZ1wiOiBcIiAtIGNsaWNrL3JldHVybiB0byBzb3J0IGFzY2VuZGluZ1wiXHJcblx0XHRcdFx0ICogICAgICAgICAgfVxyXG5cdFx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdFwic1NvcnRBc2NlbmRpbmdcIjogXCI6IGFjdGl2YXRlIHRvIHNvcnQgY29sdW1uIGFzY2VuZGluZ1wiLFxyXG5cdFxyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIEFSSUEgbGFiZWwgdGhhdCBpcyBhZGRlZCB0byB0aGUgdGFibGUgaGVhZGVycyB3aGVuIHRoZSBjb2x1bW4gbWF5IGJlXHJcblx0XHRcdFx0ICogc29ydGVkIGRlc2NlbmRpbmcgYnkgYWN0aXZpbmcgdGhlIGNvbHVtbiAoY2xpY2sgb3IgcmV0dXJuIHdoZW4gZm9jdXNlZCkuXHJcblx0XHRcdFx0ICogTm90ZSB0aGF0IHRoZSBjb2x1bW4gaGVhZGVyIGlzIHByZWZpeGVkIHRvIHRoaXMgc3RyaW5nLlxyXG5cdFx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0XHQgKiAgQGRlZmF1bHQgOiBhY3RpdmF0ZSB0byBzb3J0IGNvbHVtbiBhc2NlbmRpbmdcclxuXHRcdFx0XHQgKlxyXG5cdFx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmFyaWEuc29ydERlc2NlbmRpbmdcclxuXHRcdFx0XHQgKlxyXG5cdFx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHRcdCAqICAgICAgICAgIFwiYXJpYVwiOiB7XHJcblx0XHRcdFx0ICogICAgICAgICAgICBcInNvcnREZXNjZW5kaW5nXCI6IFwiIC0gY2xpY2svcmV0dXJuIHRvIHNvcnQgZGVzY2VuZGluZ1wiXHJcblx0XHRcdFx0ICogICAgICAgICAgfVxyXG5cdFx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdFwic1NvcnREZXNjZW5kaW5nXCI6IFwiOiBhY3RpdmF0ZSB0byBzb3J0IGNvbHVtbiBkZXNjZW5kaW5nXCJcclxuXHRcdFx0fSxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFBhZ2luYXRpb24gc3RyaW5nIHVzZWQgYnkgRGF0YVRhYmxlcyBmb3IgdGhlIGJ1aWx0LWluIHBhZ2luYXRpb25cclxuXHRcdFx0ICogY29udHJvbCB0eXBlcy5cclxuXHRcdFx0ICogIEBuYW1lc3BhY2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5wYWdpbmF0ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJvUGFnaW5hdGVcIjoge1xyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIFRleHQgdG8gdXNlIHdoZW4gdXNpbmcgdGhlICdmdWxsX251bWJlcnMnIHR5cGUgb2YgcGFnaW5hdGlvbiBmb3IgdGhlXHJcblx0XHRcdFx0ICogYnV0dG9uIHRvIHRha2UgdGhlIHVzZXIgdG8gdGhlIGZpcnN0IHBhZ2UuXHJcblx0XHRcdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0XHRcdCAqICBAZGVmYXVsdCBGaXJzdFxyXG5cdFx0XHRcdCAqXHJcblx0XHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxyXG5cdFx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UucGFnaW5hdGUuZmlyc3RcclxuXHRcdFx0XHQgKlxyXG5cdFx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHRcdCAqICAgICAgICAgIFwicGFnaW5hdGVcIjoge1xyXG5cdFx0XHRcdCAqICAgICAgICAgICAgXCJmaXJzdFwiOiBcIkZpcnN0IHBhZ2VcIlxyXG5cdFx0XHRcdCAqICAgICAgICAgIH1cclxuXHRcdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHRcdCAqICAgICAgfSApO1xyXG5cdFx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRcInNGaXJzdFwiOiBcIkZpcnN0XCIsXHJcblx0XHJcblx0XHJcblx0XHRcdFx0LyoqXHJcblx0XHRcdFx0ICogVGV4dCB0byB1c2Ugd2hlbiB1c2luZyB0aGUgJ2Z1bGxfbnVtYmVycycgdHlwZSBvZiBwYWdpbmF0aW9uIGZvciB0aGVcclxuXHRcdFx0XHQgKiBidXR0b24gdG8gdGFrZSB0aGUgdXNlciB0byB0aGUgbGFzdCBwYWdlLlxyXG5cdFx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0XHQgKiAgQGRlZmF1bHQgTGFzdFxyXG5cdFx0XHRcdCAqXHJcblx0XHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxyXG5cdFx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UucGFnaW5hdGUubGFzdFxyXG5cdFx0XHRcdCAqXHJcblx0XHRcdFx0ICogIEBleGFtcGxlXHJcblx0XHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XHJcblx0XHRcdFx0ICogICAgICAgICAgXCJwYWdpbmF0ZVwiOiB7XHJcblx0XHRcdFx0ICogICAgICAgICAgICBcImxhc3RcIjogXCJMYXN0IHBhZ2VcIlxyXG5cdFx0XHRcdCAqICAgICAgICAgIH1cclxuXHRcdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHRcdCAqICAgICAgfSApO1xyXG5cdFx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRcInNMYXN0XCI6IFwiTGFzdFwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIFRleHQgdG8gdXNlIGZvciB0aGUgJ25leHQnIHBhZ2luYXRpb24gYnV0dG9uICh0byB0YWtlIHRoZSB1c2VyIHRvIHRoZVxyXG5cdFx0XHRcdCAqIG5leHQgcGFnZSkuXHJcblx0XHRcdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0XHRcdCAqICBAZGVmYXVsdCBOZXh0XHJcblx0XHRcdFx0ICpcclxuXHRcdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXHJcblx0XHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5wYWdpbmF0ZS5uZXh0XHJcblx0XHRcdFx0ICpcclxuXHRcdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0XHQgKiAgICAgICAgICBcInBhZ2luYXRlXCI6IHtcclxuXHRcdFx0XHQgKiAgICAgICAgICAgIFwibmV4dFwiOiBcIk5leHQgcGFnZVwiXHJcblx0XHRcdFx0ICogICAgICAgICAgfVxyXG5cdFx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdFwic05leHRcIjogXCJOZXh0XCIsXHJcblx0XHJcblx0XHJcblx0XHRcdFx0LyoqXHJcblx0XHRcdFx0ICogVGV4dCB0byB1c2UgZm9yIHRoZSAncHJldmlvdXMnIHBhZ2luYXRpb24gYnV0dG9uICh0byB0YWtlIHRoZSB1c2VyIHRvXHJcblx0XHRcdFx0ICogdGhlIHByZXZpb3VzIHBhZ2UpLlxyXG5cdFx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0XHQgKiAgQGRlZmF1bHQgUHJldmlvdXNcclxuXHRcdFx0XHQgKlxyXG5cdFx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnBhZ2luYXRlLnByZXZpb3VzXHJcblx0XHRcdFx0ICpcclxuXHRcdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0XHQgKiAgICAgICAgICBcInBhZ2luYXRlXCI6IHtcclxuXHRcdFx0XHQgKiAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJQcmV2aW91cyBwYWdlXCJcclxuXHRcdFx0XHQgKiAgICAgICAgICB9XHJcblx0XHRcdFx0ICogICAgICAgIH1cclxuXHRcdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0XHQgKiAgICB9ICk7XHJcblx0XHRcdFx0ICovXHJcblx0XHRcdFx0XCJzUHJldmlvdXNcIjogXCJQcmV2aW91c1wiXHJcblx0XHRcdH0sXHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUaGlzIHN0cmluZyBpcyBzaG93biBpbiBwcmVmZXJlbmNlIHRvIGB6ZXJvUmVjb3Jkc2Agd2hlbiB0aGUgdGFibGUgaXNcclxuXHRcdFx0ICogZW1wdHkgb2YgZGF0YSAocmVnYXJkbGVzcyBvZiBmaWx0ZXJpbmcpLiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBvcHRpb25hbFxyXG5cdFx0XHQgKiBwYXJhbWV0ZXIgLSBpZiBpdCBpcyBub3QgZ2l2ZW4sIHRoZSB2YWx1ZSBvZiBgemVyb1JlY29yZHNgIHdpbGwgYmUgdXNlZFxyXG5cdFx0XHQgKiBpbnN0ZWFkIChlaXRoZXIgdGhlIGRlZmF1bHQgb3IgZ2l2ZW4gdmFsdWUpLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCBObyBkYXRhIGF2YWlsYWJsZSBpbiB0YWJsZVxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXHJcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UuZW1wdHlUYWJsZVxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0ICogICAgICAgICAgXCJlbXB0eVRhYmxlXCI6IFwiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGVcIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJzRW1wdHlUYWJsZVwiOiBcIk5vIGRhdGEgYXZhaWxhYmxlIGluIHRhYmxlXCIsXHJcblx0XHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUaGlzIHN0cmluZyBnaXZlcyBpbmZvcm1hdGlvbiB0byB0aGUgZW5kIHVzZXIgYWJvdXQgdGhlIGluZm9ybWF0aW9uXHJcblx0XHRcdCAqIHRoYXQgaXMgY3VycmVudCBvbiBkaXNwbGF5IG9uIHRoZSBwYWdlLiBUaGUgZm9sbG93aW5nIHRva2VucyBjYW4gYmVcclxuXHRcdFx0ICogdXNlZCBpbiB0aGUgc3RyaW5nIGFuZCB3aWxsIGJlIGR5bmFtaWNhbGx5IHJlcGxhY2VkIGFzIHRoZSB0YWJsZVxyXG5cdFx0XHQgKiBkaXNwbGF5IHVwZGF0ZXMuIFRoaXMgdG9rZW5zIGNhbiBiZSBwbGFjZWQgYW55d2hlcmUgaW4gdGhlIHN0cmluZywgb3JcclxuXHRcdFx0ICogcmVtb3ZlZCBhcyBuZWVkZWQgYnkgdGhlIGxhbmd1YWdlIHJlcXVpcmVzOlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAqIGBcXF9TVEFSVFxcX2AgLSBEaXNwbGF5IGluZGV4IG9mIHRoZSBmaXJzdCByZWNvcmQgb24gdGhlIGN1cnJlbnQgcGFnZVxyXG5cdFx0XHQgKiAqIGBcXF9FTkRcXF9gIC0gRGlzcGxheSBpbmRleCBvZiB0aGUgbGFzdCByZWNvcmQgb24gdGhlIGN1cnJlbnQgcGFnZVxyXG5cdFx0XHQgKiAqIGBcXF9UT1RBTFxcX2AgLSBOdW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgdGFibGUgYWZ0ZXIgZmlsdGVyaW5nXHJcblx0XHRcdCAqICogYFxcX01BWFxcX2AgLSBOdW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgdGFibGUgd2l0aG91dCBmaWx0ZXJpbmdcclxuXHRcdFx0ICogKiBgXFxfUEFHRVxcX2AgLSBDdXJyZW50IHBhZ2UgbnVtYmVyXHJcblx0XHRcdCAqICogYFxcX1BBR0VTXFxfYCAtIFRvdGFsIG51bWJlciBvZiBwYWdlcyBvZiBkYXRhIGluIHRoZSB0YWJsZVxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCBTaG93aW5nIF9TVEFSVF8gdG8gX0VORF8gb2YgX1RPVEFMXyBlbnRyaWVzXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5pbmZvXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcImluZm9cIjogXCJTaG93aW5nIHBhZ2UgX1BBR0VfIG9mIF9QQUdFU19cIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJzSW5mb1wiOiBcIlNob3dpbmcgX1NUQVJUXyB0byBfRU5EXyBvZiBfVE9UQUxfIGVudHJpZXNcIixcclxuXHRcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERpc3BsYXkgaW5mb3JtYXRpb24gc3RyaW5nIGZvciB3aGVuIHRoZSB0YWJsZSBpcyBlbXB0eS4gVHlwaWNhbGx5IHRoZVxyXG5cdFx0XHQgKiBmb3JtYXQgb2YgdGhpcyBzdHJpbmcgc2hvdWxkIG1hdGNoIGBpbmZvYC5cclxuXHRcdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0XHQgKiAgQGRlZmF1bHQgU2hvd2luZyAwIHRvIDAgb2YgMCBlbnRyaWVzXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5pbmZvRW1wdHlcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEBleGFtcGxlXHJcblx0XHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0XHQgKiAgICAgICAgXCJsYW5ndWFnZVwiOiB7XHJcblx0XHRcdCAqICAgICAgICAgIFwiaW5mb0VtcHR5XCI6IFwiTm8gZW50cmllcyB0byBzaG93XCJcclxuXHRcdFx0ICogICAgICAgIH1cclxuXHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0ICovXHJcblx0XHRcdFwic0luZm9FbXB0eVwiOiBcIlNob3dpbmcgMCB0byAwIG9mIDAgZW50cmllc1wiLFxyXG5cdFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogV2hlbiBhIHVzZXIgZmlsdGVycyB0aGUgaW5mb3JtYXRpb24gaW4gYSB0YWJsZSwgdGhpcyBzdHJpbmcgaXMgYXBwZW5kZWRcclxuXHRcdFx0ICogdG8gdGhlIGluZm9ybWF0aW9uIChgaW5mb2ApIHRvIGdpdmUgYW4gaWRlYSBvZiBob3cgc3Ryb25nIHRoZSBmaWx0ZXJpbmdcclxuXHRcdFx0ICogaXMuIFRoZSB2YXJpYWJsZSBfTUFYXyBpcyBkeW5hbWljYWxseSB1cGRhdGVkLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCAoZmlsdGVyZWQgZnJvbSBfTUFYXyB0b3RhbCBlbnRyaWVzKVxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXHJcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UuaW5mb0ZpbHRlcmVkXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcImluZm9GaWx0ZXJlZFwiOiBcIiAtIGZpbHRlcmluZyBmcm9tIF9NQVhfIHJlY29yZHNcIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJzSW5mb0ZpbHRlcmVkXCI6IFwiKGZpbHRlcmVkIGZyb20gX01BWF8gdG90YWwgZW50cmllcylcIixcclxuXHRcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIElmIGNhbiBiZSB1c2VmdWwgdG8gYXBwZW5kIGV4dHJhIGluZm9ybWF0aW9uIHRvIHRoZSBpbmZvIHN0cmluZyBhdCB0aW1lcyxcclxuXHRcdFx0ICogYW5kIHRoaXMgdmFyaWFibGUgZG9lcyBleGFjdGx5IHRoYXQuIFRoaXMgaW5mb3JtYXRpb24gd2lsbCBiZSBhcHBlbmRlZCB0b1xyXG5cdFx0XHQgKiB0aGUgYGluZm9gIChgaW5mb0VtcHR5YCBhbmQgYGluZm9GaWx0ZXJlZGAgaW4gd2hhdGV2ZXIgY29tYmluYXRpb24gdGhleSBhcmVcclxuXHRcdFx0ICogYmVpbmcgdXNlZCkgYXQgYWxsIHRpbWVzLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCA8aT5FbXB0eSBzdHJpbmc8L2k+XHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5pbmZvUG9zdEZpeFxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0ICogICAgICAgICAgXCJpbmZvUG9zdEZpeFwiOiBcIkFsbCByZWNvcmRzIHNob3duIGFyZSBkZXJpdmVkIGZyb20gcmVhbCBpbmZvcm1hdGlvbi5cIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJzSW5mb1Bvc3RGaXhcIjogXCJcIixcclxuXHRcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFRoaXMgZGVjaW1hbCBwbGFjZSBvcGVyYXRvciBpcyBhIGxpdHRsZSBkaWZmZXJlbnQgZnJvbSB0aGUgb3RoZXJcclxuXHRcdFx0ICogbGFuZ3VhZ2Ugb3B0aW9ucyBzaW5jZSBEYXRhVGFibGVzIGRvZXNuJ3Qgb3V0cHV0IGZsb2F0aW5nIHBvaW50XHJcblx0XHRcdCAqIG51bWJlcnMsIHNvIGl0IHdvbid0IGV2ZXIgdXNlIHRoaXMgZm9yIGRpc3BsYXkgb2YgYSBudW1iZXIuIFJhdGhlcixcclxuXHRcdFx0ICogd2hhdCB0aGlzIHBhcmFtZXRlciBkb2VzIGlzIG1vZGlmeSB0aGUgc29ydCBtZXRob2RzIG9mIHRoZSB0YWJsZSBzb1xyXG5cdFx0XHQgKiB0aGF0IG51bWJlcnMgd2hpY2ggYXJlIGluIGEgZm9ybWF0IHdoaWNoIGhhcyBhIGNoYXJhY3RlciBvdGhlciB0aGFuXHJcblx0XHRcdCAqIGEgcGVyaW9kIChgLmApIGFzIGEgZGVjaW1hbCBwbGFjZSB3aWxsIGJlIHNvcnRlZCBudW1lcmljYWxseS5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogTm90ZSB0aGF0IG51bWJlcnMgd2l0aCBkaWZmZXJlbnQgZGVjaW1hbCBwbGFjZXMgY2Fubm90IGJlIHNob3duIGluXHJcblx0XHRcdCAqIHRoZSBzYW1lIHRhYmxlIGFuZCBzdGlsbCBiZSBzb3J0YWJsZSwgdGhlIHRhYmxlIG11c3QgYmUgY29uc2lzdGVudC5cclxuXHRcdFx0ICogSG93ZXZlciwgbXVsdGlwbGUgZGlmZmVyZW50IHRhYmxlcyBvbiB0aGUgcGFnZSBjYW4gdXNlIGRpZmZlcmVudFxyXG5cdFx0XHQgKiBkZWNpbWFsIHBsYWNlIGNoYXJhY3RlcnMuXHJcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0ICogIEBkZWZhdWx0IFxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXHJcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UuZGVjaW1hbFxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0ICogICAgICAgICAgXCJkZWNpbWFsXCI6IFwiLFwiXHJcblx0XHRcdCAqICAgICAgICAgIFwidGhvdXNhbmRzXCI6IFwiLlwiXHJcblx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdCAqICAgICAgfSApO1xyXG5cdFx0XHQgKiAgICB9ICk7XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNEZWNpbWFsXCI6IFwiXCIsXHJcblx0XHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEYXRhVGFibGVzIGhhcyBhIGJ1aWxkIGluIG51bWJlciBmb3JtYXR0ZXIgKGBmb3JtYXROdW1iZXJgKSB3aGljaCBpc1xyXG5cdFx0XHQgKiB1c2VkIHRvIGZvcm1hdCBsYXJnZSBudW1iZXJzIHRoYXQgYXJlIHVzZWQgaW4gdGhlIHRhYmxlIGluZm9ybWF0aW9uLlxyXG5cdFx0XHQgKiBCeSBkZWZhdWx0IGEgY29tbWEgaXMgdXNlZCwgYnV0IHRoaXMgY2FuIGJlIHRyaXZpYWxseSBjaGFuZ2VkIHRvIGFueVxyXG5cdFx0XHQgKiBjaGFyYWN0ZXIgeW91IHdpc2ggd2l0aCB0aGlzIHBhcmFtZXRlci5cclxuXHRcdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0XHQgKiAgQGRlZmF1bHQgLFxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXHJcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UudGhvdXNhbmRzXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcInRob3VzYW5kc1wiOiBcIidcIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJzVGhvdXNhbmRzXCI6IFwiLFwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRGV0YWlsIHRoZSBhY3Rpb24gdGhhdCB3aWxsIGJlIHRha2VuIHdoZW4gdGhlIGRyb3AgZG93biBtZW51IGZvciB0aGVcclxuXHRcdFx0ICogcGFnaW5hdGlvbiBsZW5ndGggb3B0aW9uIGlzIGNoYW5nZWQuIFRoZSAnX01FTlVfJyB2YXJpYWJsZSBpcyByZXBsYWNlZFxyXG5cdFx0XHQgKiB3aXRoIGEgZGVmYXVsdCBzZWxlY3QgbGlzdCBvZiAxMCwgMjUsIDUwIGFuZCAxMDAsIGFuZCBjYW4gYmUgcmVwbGFjZWRcclxuXHRcdFx0ICogd2l0aCBhIGN1c3RvbSBzZWxlY3QgYm94IGlmIHJlcXVpcmVkLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCBTaG93IF9NRU5VXyBlbnRyaWVzXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5sZW5ndGhNZW51XHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAvLyBMYW5ndWFnZSBjaGFuZ2Ugb25seVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcImxlbmd0aE1lbnVcIjogXCJEaXNwbGF5IF9NRU5VXyByZWNvcmRzXCJcclxuXHRcdFx0ICogICAgICAgIH1cclxuXHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEBleGFtcGxlXHJcblx0XHRcdCAqICAgIC8vIExhbmd1YWdlIGFuZCBvcHRpb25zIGNoYW5nZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcImxlbmd0aE1lbnVcIjogJ0Rpc3BsYXkgPHNlbGVjdD4nK1xyXG5cdFx0XHQgKiAgICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiMTBcIj4xMDwvb3B0aW9uPicrXHJcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIyMFwiPjIwPC9vcHRpb24+JytcclxuXHRcdFx0ICogICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIjMwXCI+MzA8L29wdGlvbj4nK1xyXG5cdFx0XHQgKiAgICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiNDBcIj40MDwvb3B0aW9uPicrXHJcblx0XHRcdCAqICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCI1MFwiPjUwPC9vcHRpb24+JytcclxuXHRcdFx0ICogICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIi0xXCI+QWxsPC9vcHRpb24+JytcclxuXHRcdFx0ICogICAgICAgICAgICAnPC9zZWxlY3Q+IHJlY29yZHMnXHJcblx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdCAqICAgICAgfSApO1xyXG5cdFx0XHQgKiAgICB9ICk7XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNMZW5ndGhNZW51XCI6IFwiU2hvdyBfTUVOVV8gZW50cmllc1wiLFxyXG5cdFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogV2hlbiB1c2luZyBBamF4IHNvdXJjZWQgZGF0YSBhbmQgZHVyaW5nIHRoZSBmaXJzdCBkcmF3IHdoZW4gRGF0YVRhYmxlcyBpc1xyXG5cdFx0XHQgKiBnYXRoZXJpbmcgdGhlIGRhdGEsIHRoaXMgbWVzc2FnZSBpcyBzaG93biBpbiBhbiBlbXB0eSByb3cgaW4gdGhlIHRhYmxlIHRvXHJcblx0XHRcdCAqIGluZGljYXRlIHRvIHRoZSBlbmQgdXNlciB0aGUgdGhlIGRhdGEgaXMgYmVpbmcgbG9hZGVkLiBOb3RlIHRoYXQgdGhpc1xyXG5cdFx0XHQgKiBwYXJhbWV0ZXIgaXMgbm90IHVzZWQgd2hlbiBsb2FkaW5nIGRhdGEgYnkgc2VydmVyLXNpZGUgcHJvY2Vzc2luZywganVzdFxyXG5cdFx0XHQgKiBBamF4IHNvdXJjZWQgZGF0YSB3aXRoIGNsaWVudC1zaWRlIHByb2Nlc3NpbmcuXHJcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0ICogIEBkZWZhdWx0IExvYWRpbmcuLi5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxyXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLmxvYWRpbmdSZWNvcmRzXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcImxvYWRpbmdSZWNvcmRzXCI6IFwiUGxlYXNlIHdhaXQgLSBsb2FkaW5nLi4uXCJcclxuXHRcdFx0ICogICAgICAgIH1cclxuXHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0ICovXHJcblx0XHRcdFwic0xvYWRpbmdSZWNvcmRzXCI6IFwiTG9hZGluZy4uLlwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVGV4dCB3aGljaCBpcyBkaXNwbGF5ZWQgd2hlbiB0aGUgdGFibGUgaXMgcHJvY2Vzc2luZyBhIHVzZXIgYWN0aW9uXHJcblx0XHRcdCAqICh1c3VhbGx5IGEgc29ydCBjb21tYW5kIG9yIHNpbWlsYXIpLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCBQcm9jZXNzaW5nLi4uXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS5wcm9jZXNzaW5nXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcInByb2Nlc3NpbmdcIjogXCJEYXRhVGFibGVzIGlzIGN1cnJlbnRseSBidXN5XCJcclxuXHRcdFx0ICogICAgICAgIH1cclxuXHRcdFx0ICogICAgICB9ICk7XHJcblx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0ICovXHJcblx0XHRcdFwic1Byb2Nlc3NpbmdcIjogXCJQcm9jZXNzaW5nLi4uXCIsXHJcblx0XHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEZXRhaWxzIHRoZSBhY3Rpb25zIHRoYXQgd2lsbCBiZSB0YWtlbiB3aGVuIHRoZSB1c2VyIHR5cGVzIGludG8gdGhlXHJcblx0XHRcdCAqIGZpbHRlcmluZyBpbnB1dCB0ZXh0IGJveC4gVGhlIHZhcmlhYmxlIFwiX0lOUFVUX1wiLCBpZiB1c2VkIGluIHRoZSBzdHJpbmcsXHJcblx0XHRcdCAqIGlzIHJlcGxhY2VkIHdpdGggdGhlIEhUTUwgdGV4dCBib3ggZm9yIHRoZSBmaWx0ZXJpbmcgaW5wdXQgYWxsb3dpbmdcclxuXHRcdFx0ICogY29udHJvbCBvdmVyIHdoZXJlIGl0IGFwcGVhcnMgaW4gdGhlIHN0cmluZy4gSWYgXCJfSU5QVVRfXCIgaXMgbm90IGdpdmVuXHJcblx0XHRcdCAqIHRoZW4gdGhlIGlucHV0IGJveCBpcyBhcHBlbmRlZCB0byB0aGUgc3RyaW5nIGF1dG9tYXRpY2FsbHkuXHJcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0ICogIEBkZWZhdWx0IFNlYXJjaDpcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxyXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnNlYXJjaFxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgLy8gSW5wdXQgdGV4dCBib3ggd2lsbCBiZSBhcHBlbmRlZCBhdCB0aGUgZW5kIGF1dG9tYXRpY2FsbHlcclxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0ICogICAgICAgICAgXCJzZWFyY2hcIjogXCJGaWx0ZXIgcmVjb3JkczpcIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgLy8gU3BlY2lmeSB3aGVyZSB0aGUgZmlsdGVyIHNob3VsZCBhcHBlYXJcclxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0ICogICAgICAgICAgXCJzZWFyY2hcIjogXCJBcHBseSBmaWx0ZXIgX0lOUFVUXyB0byB0YWJsZVwiXHJcblx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdCAqICAgICAgfSApO1xyXG5cdFx0XHQgKiAgICB9ICk7XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNTZWFyY2hcIjogXCJTZWFyY2g6XCIsXHJcblx0XHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBBc3NpZ24gYSBgcGxhY2Vob2xkZXJgIGF0dHJpYnV0ZSB0byB0aGUgc2VhcmNoIGBpbnB1dGAgZWxlbWVudFxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCBcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEBkdG9wdCBMYW5ndWFnZVxyXG5cdFx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmxhbmd1YWdlLnNlYXJjaFBsYWNlaG9sZGVyXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNTZWFyY2hQbGFjZWhvbGRlclwiOiBcIlwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWxsIG9mIHRoZSBsYW5ndWFnZSBpbmZvcm1hdGlvbiBjYW4gYmUgc3RvcmVkIGluIGEgZmlsZSBvbiB0aGVcclxuXHRcdFx0ICogc2VydmVyLXNpZGUsIHdoaWNoIERhdGFUYWJsZXMgd2lsbCBsb29rIHVwIGlmIHRoaXMgcGFyYW1ldGVyIGlzIHBhc3NlZC5cclxuXHRcdFx0ICogSXQgbXVzdCBzdG9yZSB0aGUgVVJMIG9mIHRoZSBsYW5ndWFnZSBmaWxlLCB3aGljaCBpcyBpbiBhIEpTT04gZm9ybWF0LFxyXG5cdFx0XHQgKiBhbmQgdGhlIG9iamVjdCBoYXMgdGhlIHNhbWUgcHJvcGVydGllcyBhcyB0aGUgb0xhbmd1YWdlIG9iamVjdCBpbiB0aGVcclxuXHRcdFx0ICogaW5pdGlhbGlzZXIgb2JqZWN0IChpLmUuIHRoZSBhYm92ZSBwYXJhbWV0ZXJzKS4gUGxlYXNlIHJlZmVyIHRvIG9uZSBvZlxyXG5cdFx0XHQgKiB0aGUgZXhhbXBsZSBsYW5ndWFnZSBmaWxlcyB0byBzZWUgaG93IHRoaXMgd29ya3MgaW4gYWN0aW9uLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCA8aT5FbXB0eSBzdHJpbmcgLSBpLmUuIGRpc2FibGVkPC9pPlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGR0b3B0IExhbmd1YWdlXHJcblx0XHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMubGFuZ3VhZ2UudXJsXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdFx0ICogICAgICAgIFwibGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQgKiAgICAgICAgICBcInVybFwiOiBcImh0dHA6Ly93d3cuc3ByeW1lZGlhLmNvLnVrL2RhdGFUYWJsZXMvbGFuZy50eHRcIlxyXG5cdFx0XHQgKiAgICAgICAgfVxyXG5cdFx0XHQgKiAgICAgIH0gKTtcclxuXHRcdFx0ICogICAgfSApO1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJzVXJsXCI6IFwiXCIsXHJcblx0XHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUZXh0IHNob3duIGluc2lkZSB0aGUgdGFibGUgcmVjb3JkcyB3aGVuIHRoZSBpcyBubyBpbmZvcm1hdGlvbiB0byBiZVxyXG5cdFx0XHQgKiBkaXNwbGF5ZWQgYWZ0ZXIgZmlsdGVyaW5nLiBgZW1wdHlUYWJsZWAgaXMgc2hvd24gd2hlbiB0aGVyZSBpcyBzaW1wbHkgbm9cclxuXHRcdFx0ICogaW5mb3JtYXRpb24gaW4gdGhlIHRhYmxlIGF0IGFsbCAocmVnYXJkbGVzcyBvZiBmaWx0ZXJpbmcpLlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqICBAZGVmYXVsdCBObyBtYXRjaGluZyByZWNvcmRzIGZvdW5kXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZHRvcHQgTGFuZ3VhZ2VcclxuXHRcdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5sYW5ndWFnZS56ZXJvUmVjb3Jkc1xyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHRcdCAqICAgICAgICBcImxhbmd1YWdlXCI6IHtcclxuXHRcdFx0ICogICAgICAgICAgXCJ6ZXJvUmVjb3Jkc1wiOiBcIk5vIHJlY29yZHMgdG8gZGlzcGxheVwiXHJcblx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdCAqICAgICAgfSApO1xyXG5cdFx0XHQgKiAgICB9ICk7XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNaZXJvUmVjb3Jkc1wiOiBcIk5vIG1hdGNoaW5nIHJlY29yZHMgZm91bmRcIlxyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyBwYXJhbWV0ZXIgYWxsb3dzIHlvdSB0byBoYXZlIGRlZmluZSB0aGUgZ2xvYmFsIGZpbHRlcmluZyBzdGF0ZSBhdFxyXG5cdFx0ICogaW5pdGlhbGlzYXRpb24gdGltZS4gQXMgYW4gb2JqZWN0IHRoZSBgc2VhcmNoYCBwYXJhbWV0ZXIgbXVzdCBiZVxyXG5cdFx0ICogZGVmaW5lZCwgYnV0IGFsbCBvdGhlciBwYXJhbWV0ZXJzIGFyZSBvcHRpb25hbC4gV2hlbiBgcmVnZXhgIGlzIHRydWUsXHJcblx0XHQgKiB0aGUgc2VhcmNoIHN0cmluZyB3aWxsIGJlIHRyZWF0ZWQgYXMgYSByZWd1bGFyIGV4cHJlc3Npb24sIHdoZW4gZmFsc2VcclxuXHRcdCAqIChkZWZhdWx0KSBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBzdHJhaWdodCBzdHJpbmcuIFdoZW4gYHNtYXJ0YFxyXG5cdFx0ICogRGF0YVRhYmxlcyB3aWxsIHVzZSBpdCdzIHNtYXJ0IGZpbHRlcmluZyBtZXRob2RzICh0byB3b3JkIG1hdGNoIGF0XHJcblx0XHQgKiBhbnkgcG9pbnQgaW4gdGhlIGRhdGEpLCB3aGVuIGZhbHNlIHRoaXMgd2lsbCBub3QgYmUgZG9uZS5cclxuXHRcdCAqICBAbmFtZXNwYWNlXHJcblx0XHQgKiAgQGV4dGVuZHMgRGF0YVRhYmxlLm1vZGVscy5vU2VhcmNoXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNlYXJjaFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic2VhcmNoXCI6IHtcInNlYXJjaFwiOiBcIkluaXRpYWwgc2VhcmNoXCJ9XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKVxyXG5cdFx0ICovXHJcblx0XHRcIm9TZWFyY2hcIjogJC5leHRlbmQoIHt9LCBEYXRhVGFibGUubW9kZWxzLm9TZWFyY2ggKSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogX19EZXByZWNhdGVkX18gVGhlIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgYnkgdGhpcyBwYXJhbWV0ZXIgaGFzIG5vdyBiZWVuXHJcblx0XHQgKiBzdXBlcnNlZGVkIGJ5IHRoYXQgcHJvdmlkZWQgdGhyb3VnaCBgYWpheGAsIHdoaWNoIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQnkgZGVmYXVsdCBEYXRhVGFibGVzIHdpbGwgbG9vayBmb3IgdGhlIHByb3BlcnR5IGBkYXRhYCAob3IgYGFhRGF0YWAgZm9yXHJcblx0XHQgKiBjb21wYXRpYmlsaXR5IHdpdGggRGF0YVRhYmxlcyAxLjktKSB3aGVuIG9idGFpbmluZyBkYXRhIGZyb20gYW4gQWpheFxyXG5cdFx0ICogc291cmNlIG9yIGZvciBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIC0gdGhpcyBwYXJhbWV0ZXIgYWxsb3dzIHRoYXRcclxuXHRcdCAqIHByb3BlcnR5IHRvIGJlIGNoYW5nZWQuIFlvdSBjYW4gdXNlIEphdmFzY3JpcHQgZG90dGVkIG9iamVjdCBub3RhdGlvbiB0b1xyXG5cdFx0ICogZ2V0IGEgZGF0YSBzb3VyY2UgZm9yIG11bHRpcGxlIGxldmVscyBvZiBuZXN0aW5nLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IGRhdGFcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcclxuXHRcdCAqICBAZHRvcHQgU2VydmVyLXNpZGVcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuYWpheERhdGFQcm9wXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkZXByZWNhdGVkIDEuMTAuIFBsZWFzZSB1c2UgYGFqYXhgIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHkgbm93LlxyXG5cdFx0ICovXHJcblx0XHRcInNBamF4RGF0YVByb3BcIjogXCJkYXRhXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIF9fRGVwcmVjYXRlZF9fIFRoZSBmdW5jdGlvbmFsaXR5IHByb3ZpZGVkIGJ5IHRoaXMgcGFyYW1ldGVyIGhhcyBub3cgYmVlblxyXG5cdFx0ICogc3VwZXJzZWRlZCBieSB0aGF0IHByb3ZpZGVkIHRocm91Z2ggYGFqYXhgLCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxyXG5cdFx0ICpcclxuXHRcdCAqIFlvdSBjYW4gaW5zdHJ1Y3QgRGF0YVRhYmxlcyB0byBsb2FkIGRhdGEgZnJvbSBhbiBleHRlcm5hbFxyXG5cdFx0ICogc291cmNlIHVzaW5nIHRoaXMgcGFyYW1ldGVyICh1c2UgYURhdGEgaWYgeW91IHdhbnQgdG8gcGFzcyBkYXRhIGluIHlvdVxyXG5cdFx0ICogYWxyZWFkeSBoYXZlKS4gU2ltcGx5IHByb3ZpZGUgYSB1cmwgYSBKU09OIG9iamVjdCBjYW4gYmUgb2J0YWluZWQgZnJvbS5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQGR0b3B0IFNlcnZlci1zaWRlXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmFqYXhTb3VyY2VcclxuXHRcdCAqXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgMS4xMC4gUGxlYXNlIHVzZSBgYWpheGAgZm9yIHRoaXMgZnVuY3Rpb25hbGl0eSBub3cuXHJcblx0XHQgKi9cclxuXHRcdFwic0FqYXhTb3VyY2VcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyBpbml0aWFsaXNhdGlvbiB2YXJpYWJsZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgZXhhY3RseSB3aGVyZSBpbiB0aGVcclxuXHRcdCAqIERPTSB5b3Ugd2FudCBEYXRhVGFibGVzIHRvIGluamVjdCB0aGUgdmFyaW91cyBjb250cm9scyBpdCBhZGRzIHRvIHRoZSBwYWdlXHJcblx0XHQgKiAoZm9yIGV4YW1wbGUgeW91IG1pZ2h0IHdhbnQgdGhlIHBhZ2luYXRpb24gY29udHJvbHMgYXQgdGhlIHRvcCBvZiB0aGVcclxuXHRcdCAqIHRhYmxlKS4gRElWIGVsZW1lbnRzICh3aXRoIG9yIHdpdGhvdXQgYSBjdXN0b20gY2xhc3MpIGNhbiBhbHNvIGJlIGFkZGVkIHRvXHJcblx0XHQgKiBhaWQgc3R5bGluZy4gVGhlIGZvbGxvdyBzeW50YXggaXMgdXNlZDpcclxuXHRcdCAqICAgPHVsPlxyXG5cdFx0ICogICAgIDxsaT5UaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIGFsbG93ZWQ6XHJcblx0XHQgKiAgICAgICA8dWw+XHJcblx0XHQgKiAgICAgICAgIDxsaT4nbCcgLSBMZW5ndGggY2hhbmdpbmc8L2xpPlxyXG5cdFx0ICogICAgICAgICA8bGk+J2YnIC0gRmlsdGVyaW5nIGlucHV0PC9saT5cclxuXHRcdCAqICAgICAgICAgPGxpPid0JyAtIFRoZSB0YWJsZSE8L2xpPlxyXG5cdFx0ICogICAgICAgICA8bGk+J2knIC0gSW5mb3JtYXRpb248L2xpPlxyXG5cdFx0ICogICAgICAgICA8bGk+J3AnIC0gUGFnaW5hdGlvbjwvbGk+XHJcblx0XHQgKiAgICAgICAgIDxsaT4ncicgLSBwUm9jZXNzaW5nPC9saT5cclxuXHRcdCAqICAgICAgIDwvdWw+XHJcblx0XHQgKiAgICAgPC9saT5cclxuXHRcdCAqICAgICA8bGk+VGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIGFsbG93ZWQ6XHJcblx0XHQgKiAgICAgICA8dWw+XHJcblx0XHQgKiAgICAgICAgIDxsaT4nSCcgLSBqUXVlcnlVSSB0aGVtZSBcImhlYWRlclwiIGNsYXNzZXMgKCdmZy10b29sYmFyIHVpLXdpZGdldC1oZWFkZXIgdWktY29ybmVyLXRsIHVpLWNvcm5lci10ciB1aS1oZWxwZXItY2xlYXJmaXgnKTwvbGk+XHJcblx0XHQgKiAgICAgICAgIDxsaT4nRicgLSBqUXVlcnlVSSB0aGVtZSBcImZvb3RlclwiIGNsYXNzZXMgKCdmZy10b29sYmFyIHVpLXdpZGdldC1oZWFkZXIgdWktY29ybmVyLWJsIHVpLWNvcm5lci1iciB1aS1oZWxwZXItY2xlYXJmaXgnKTwvbGk+XHJcblx0XHQgKiAgICAgICA8L3VsPlxyXG5cdFx0ICogICAgIDwvbGk+XHJcblx0XHQgKiAgICAgPGxpPlRoZSBmb2xsb3dpbmcgc3ludGF4IGlzIGV4cGVjdGVkOlxyXG5cdFx0ICogICAgICAgPHVsPlxyXG5cdFx0ICogICAgICAgICA8bGk+JyZsdDsnIGFuZCAnJmd0OycgLSBkaXYgZWxlbWVudHM8L2xpPlxyXG5cdFx0ICogICAgICAgICA8bGk+JyZsdDtcImNsYXNzXCIgYW5kICcmZ3Q7JyAtIGRpdiB3aXRoIGEgY2xhc3M8L2xpPlxyXG5cdFx0ICogICAgICAgICA8bGk+JyZsdDtcIiNpZFwiIGFuZCAnJmd0OycgLSBkaXYgd2l0aCBhbiBJRDwvbGk+XHJcblx0XHQgKiAgICAgICA8L3VsPlxyXG5cdFx0ICogICAgIDwvbGk+XHJcblx0XHQgKiAgICAgPGxpPkV4YW1wbGVzOlxyXG5cdFx0ICogICAgICAgPHVsPlxyXG5cdFx0ICogICAgICAgICA8bGk+JyZsdDtcIndyYXBwZXJcImZsaXB0Jmd0Oyc8L2xpPlxyXG5cdFx0ICogICAgICAgICA8bGk+JyZsdDtsZiZsdDt0Jmd0O2lwJmd0Oyc8L2xpPlxyXG5cdFx0ICogICAgICAgPC91bD5cclxuXHRcdCAqICAgICA8L2xpPlxyXG5cdFx0ICogICA8L3VsPlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IGxmcnRpcCA8aT4od2hlbiBgalF1ZXJ5VUlgIGlzIGZhbHNlKTwvaT4gPGI+b3I8L2I+XHJcblx0XHQgKiAgICA8XCJIXCJsZnI+dDxcIkZcImlwPiA8aT4od2hlbiBgalF1ZXJ5VUlgIGlzIHRydWUpPC9pPlxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5kb21cclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImRvbVwiOiAnJmx0O1widG9wXCJpJmd0O3J0Jmx0O1wiYm90dG9tXCJmbHAmZ3Q7Jmx0O1wiY2xlYXJcIiZndDsnXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJzRG9tXCI6IFwibGZydGlwXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNlYXJjaCBkZWxheSBvcHRpb24uIFRoaXMgd2lsbCB0aHJvdHRsZSBmdWxsIHRhYmxlIHNlYXJjaGVzIHRoYXQgdXNlIHRoZVxyXG5cdFx0ICogRGF0YVRhYmxlcyBwcm92aWRlZCBzZWFyY2ggaW5wdXQgZWxlbWVudCAoaXQgZG9lcyBub3QgZWZmZWN0IGNhbGxzIHRvXHJcblx0XHQgKiBgZHQtYXBpIHNlYXJjaCgpYCwgcHJvdmlkaW5nIGEgZGVsYXkgYmVmb3JlIHRoZSBzZWFyY2ggaXMgbWFkZS5cclxuXHRcdCAqICBAdHlwZSBpbnRlZ2VyXHJcblx0XHQgKiAgQGRlZmF1bHQgMFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zZWFyY2hEZWxheVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic2VhcmNoRGVsYXlcIjogMjAwXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKVxyXG5cdFx0ICovXHJcblx0XHRcInNlYXJjaERlbGF5XCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIERhdGFUYWJsZXMgZmVhdHVyZXMgZm91ciBkaWZmZXJlbnQgYnVpbHQtaW4gb3B0aW9ucyBmb3IgdGhlIGJ1dHRvbnMgdG9cclxuXHRcdCAqIGRpc3BsYXkgZm9yIHBhZ2luYXRpb24gY29udHJvbDpcclxuXHRcdCAqXHJcblx0XHQgKiAqIGBzaW1wbGVgIC0gJ1ByZXZpb3VzJyBhbmQgJ05leHQnIGJ1dHRvbnMgb25seVxyXG5cdFx0ICogKiAnc2ltcGxlX251bWJlcnNgIC0gJ1ByZXZpb3VzJyBhbmQgJ05leHQnIGJ1dHRvbnMsIHBsdXMgcGFnZSBudW1iZXJzXHJcblx0XHQgKiAqIGBmdWxsYCAtICdGaXJzdCcsICdQcmV2aW91cycsICdOZXh0JyBhbmQgJ0xhc3QnIGJ1dHRvbnNcclxuXHRcdCAqICogYGZ1bGxfbnVtYmVyc2AgLSAnRmlyc3QnLCAnUHJldmlvdXMnLCAnTmV4dCcgYW5kICdMYXN0JyBidXR0b25zLCBwbHVzXHJcblx0XHQgKiAgIHBhZ2UgbnVtYmVyc1xyXG5cdFx0ICogIFxyXG5cdFx0ICogRnVydGhlciBtZXRob2RzIGNhbiBiZSBhZGRlZCB1c2luZyB7QGxpbmsgRGF0YVRhYmxlLmV4dC5vUGFnaW5hdGlvbn0uXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgc2ltcGxlX251bWJlcnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IE9wdGlvbnNcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucGFnaW5nVHlwZVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwicGFnaW5nVHlwZVwiOiBcImZ1bGxfbnVtYmVyc1wiXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKVxyXG5cdFx0ICovXHJcblx0XHRcInNQYWdpbmF0aW9uVHlwZVwiOiBcInNpbXBsZV9udW1iZXJzXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEVuYWJsZSBob3Jpem9udGFsIHNjcm9sbGluZy4gV2hlbiBhIHRhYmxlIGlzIHRvbyB3aWRlIHRvIGZpdCBpbnRvIGFcclxuXHRcdCAqIGNlcnRhaW4gbGF5b3V0LCBvciB5b3UgaGF2ZSBhIGxhcmdlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0YWJsZSwgeW91XHJcblx0XHQgKiBjYW4gZW5hYmxlIHgtc2Nyb2xsaW5nIHRvIHNob3cgdGhlIHRhYmxlIGluIGEgdmlld3BvcnQsIHdoaWNoIGNhbiBiZVxyXG5cdFx0ICogc2Nyb2xsZWQuIFRoaXMgcHJvcGVydHkgY2FuIGJlIGB0cnVlYCB3aGljaCB3aWxsIGFsbG93IHRoZSB0YWJsZSB0b1xyXG5cdFx0ICogc2Nyb2xsIGhvcml6b250YWxseSB3aGVuIG5lZWRlZCwgb3IgYW55IENTUyB1bml0LCBvciBhIG51bWJlciAoaW4gd2hpY2hcclxuXHRcdCAqIGNhc2UgaXQgd2lsbCBiZSB0cmVhdGVkIGFzIGEgcGl4ZWwgbWVhc3VyZW1lbnQpLiBTZXR0aW5nIGFzIHNpbXBseSBgdHJ1ZWBcclxuXHRcdCAqIGlzIHJlY29tbWVuZGVkLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW58c3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgPGk+Ymxhbmsgc3RyaW5nIC0gaS5lLiBkaXNhYmxlZDwvaT5cclxuXHRcdCAqXHJcblx0XHQgKiAgQGR0b3B0IEZlYXR1cmVzXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNjcm9sbFhcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcInNjcm9sbFhcIjogdHJ1ZSxcclxuXHRcdCAqICAgICAgICBcInNjcm9sbENvbGxhcHNlXCI6IHRydWVcclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcInNTY3JvbGxYXCI6IFwiXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gZm9yY2UgYSBEYXRhVGFibGUgdG8gdXNlIG1vcmUgd2lkdGggdGhhbiBpdFxyXG5cdFx0ICogbWlnaHQgb3RoZXJ3aXNlIGRvIHdoZW4geC1zY3JvbGxpbmcgaXMgZW5hYmxlZC4gRm9yIGV4YW1wbGUgaWYgeW91IGhhdmUgYVxyXG5cdFx0ICogdGFibGUgd2hpY2ggcmVxdWlyZXMgdG8gYmUgd2VsbCBzcGFjZWQsIHRoaXMgcGFyYW1ldGVyIGlzIHVzZWZ1bCBmb3JcclxuXHRcdCAqIFwib3Zlci1zaXppbmdcIiB0aGUgdGFibGUsIGFuZCB0aHVzIGZvcmNpbmcgc2Nyb2xsaW5nLiBUaGlzIHByb3BlcnR5IGNhbiBieVxyXG5cdFx0ICogYW55IENTUyB1bml0LCBvciBhIG51bWJlciAoaW4gd2hpY2ggY2FzZSBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBwaXhlbFxyXG5cdFx0ICogbWVhc3VyZW1lbnQpLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IDxpPmJsYW5rIHN0cmluZyAtIGkuZS4gZGlzYWJsZWQ8L2k+XHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBPcHRpb25zXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLnNjcm9sbFhJbm5lclxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwic2Nyb2xsWFwiOiBcIjEwMCVcIixcclxuXHRcdCAqICAgICAgICBcInNjcm9sbFhJbm5lclwiOiBcIjExMCVcIlxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwic1Njcm9sbFhJbm5lclwiOiBcIlwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGUgdmVydGljYWwgc2Nyb2xsaW5nLiBWZXJ0aWNhbCBzY3JvbGxpbmcgd2lsbCBjb25zdHJhaW4gdGhlIERhdGFUYWJsZVxyXG5cdFx0ICogdG8gdGhlIGdpdmVuIGhlaWdodCwgYW5kIGVuYWJsZSBzY3JvbGxpbmcgZm9yIGFueSBkYXRhIHdoaWNoIG92ZXJmbG93cyB0aGVcclxuXHRcdCAqIGN1cnJlbnQgdmlld3BvcnQuIFRoaXMgY2FuIGJlIHVzZWQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gcGFnaW5nIHRvIGRpc3BsYXlcclxuXHRcdCAqIGEgbG90IG9mIGRhdGEgaW4gYSBzbWFsbCBhcmVhIChhbHRob3VnaCBwYWdpbmcgYW5kIHNjcm9sbGluZyBjYW4gYm90aCBiZVxyXG5cdFx0ICogZW5hYmxlZCBhdCB0aGUgc2FtZSB0aW1lKS4gVGhpcyBwcm9wZXJ0eSBjYW4gYmUgYW55IENTUyB1bml0LCBvciBhIG51bWJlclxyXG5cdFx0ICogKGluIHdoaWNoIGNhc2UgaXQgd2lsbCBiZSB0cmVhdGVkIGFzIGEgcGl4ZWwgbWVhc3VyZW1lbnQpLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IDxpPmJsYW5rIHN0cmluZyAtIGkuZS4gZGlzYWJsZWQ8L2k+XHJcblx0XHQgKlxyXG5cdFx0ICogIEBkdG9wdCBGZWF0dXJlc1xyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zY3JvbGxZXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJzY3JvbGxZXCI6IFwiMjAwcHhcIixcclxuXHRcdCAqICAgICAgICBcInBhZ2luYXRlXCI6IGZhbHNlXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJzU2Nyb2xsWVwiOiBcIlwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBfX0RlcHJlY2F0ZWRfXyBUaGUgZnVuY3Rpb25hbGl0eSBwcm92aWRlZCBieSB0aGlzIHBhcmFtZXRlciBoYXMgbm93IGJlZW5cclxuXHRcdCAqIHN1cGVyc2VkZWQgYnkgdGhhdCBwcm92aWRlZCB0aHJvdWdoIGBhamF4YCwgd2hpY2ggc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cclxuXHRcdCAqXHJcblx0XHQgKiBTZXQgdGhlIEhUVFAgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBtYWtlIHRoZSBBamF4IGNhbGwgZm9yIHNlcnZlci1zaWRlXHJcblx0XHQgKiBwcm9jZXNzaW5nIG9yIEFqYXggc291cmNlZCBkYXRhLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IEdFVFxyXG5cdFx0ICpcclxuXHRcdCAqICBAZHRvcHQgT3B0aW9uc1xyXG5cdFx0ICogIEBkdG9wdCBTZXJ2ZXItc2lkZVxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5zZXJ2ZXJNZXRob2RcclxuXHRcdCAqXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWQgMS4xMC4gUGxlYXNlIHVzZSBgYWpheGAgZm9yIHRoaXMgZnVuY3Rpb25hbGl0eSBub3cuXHJcblx0XHQgKi9cclxuXHRcdFwic1NlcnZlck1ldGhvZFwiOiBcIkdFVFwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEYXRhVGFibGVzIG1ha2VzIHVzZSBvZiByZW5kZXJlcnMgd2hlbiBkaXNwbGF5aW5nIEhUTUwgZWxlbWVudHMgZm9yXHJcblx0XHQgKiBhIHRhYmxlLiBUaGVzZSByZW5kZXJlcnMgY2FuIGJlIGFkZGVkIG9yIG1vZGlmaWVkIGJ5IHBsdWctaW5zIHRvXHJcblx0XHQgKiBnZW5lcmF0ZSBzdWl0YWJsZSBtYXJrLXVwIGZvciBhIHNpdGUuIEZvciBleGFtcGxlIHRoZSBCb290c3RyYXBcclxuXHRcdCAqIGludGVncmF0aW9uIHBsdWctaW4gZm9yIERhdGFUYWJsZXMgdXNlcyBhIHBhZ2luZyBidXR0b24gcmVuZGVyZXIgdG9cclxuXHRcdCAqIGRpc3BsYXkgcGFnaW5hdGlvbiBidXR0b25zIGluIHRoZSBtYXJrLXVwIHJlcXVpcmVkIGJ5IEJvb3RzdHJhcC5cclxuXHRcdCAqXHJcblx0XHQgKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVuZGVyZXJzIGF2YWlsYWJsZSBzZWVcclxuXHRcdCAqIERhdGFUYWJsZS5leHQucmVuZGVyZXJcclxuXHRcdCAqICBAdHlwZSBzdHJpbmd8b2JqZWN0XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucmVuZGVyZXJcclxuXHRcdCAqXHJcblx0XHQgKi9cclxuXHRcdFwicmVuZGVyZXJcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU2V0IHRoZSBkYXRhIHByb3BlcnR5IG5hbWUgdGhhdCBEYXRhVGFibGVzIHNob3VsZCB1c2UgdG8gZ2V0IGEgcm93J3MgaWRcclxuXHRcdCAqIHRvIHNldCBhcyB0aGUgYGlkYCBwcm9wZXJ0eSBpbiB0aGUgbm9kZS5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBEVF9Sb3dJZFxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMucm93SWRcclxuXHRcdCAqL1xyXG5cdFx0XCJyb3dJZFwiOiBcIkRUX1Jvd0lkXCJcclxuXHR9O1xyXG5cdFxyXG5cdF9mbkh1bmdhcmlhbk1hcCggRGF0YVRhYmxlLmRlZmF1bHRzICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0LypcclxuXHQgKiBEZXZlbG9wZXIgbm90ZSAtIFNlZSBub3RlIGluIG1vZGVsLmRlZmF1bHRzLmpzIGFib3V0IHRoZSB1c2Ugb2YgSHVuZ2FyaWFuXHJcblx0ICogbm90YXRpb24gYW5kIGNhbWVsIGNhc2UuXHJcblx0ICovXHJcblx0XHJcblx0LyoqXHJcblx0ICogQ29sdW1uIG9wdGlvbnMgdGhhdCBjYW4gYmUgZ2l2ZW4gdG8gRGF0YVRhYmxlcyBhdCBpbml0aWFsaXNhdGlvbiB0aW1lLlxyXG5cdCAqICBAbmFtZXNwYWNlXHJcblx0ICovXHJcblx0RGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbiA9IHtcclxuXHRcdC8qKlxyXG5cdFx0ICogRGVmaW5lIHdoaWNoIGNvbHVtbihzKSBhbiBvcmRlciB3aWxsIG9jY3VyIG9uIGZvciB0aGlzIGNvbHVtbi4gVGhpc1xyXG5cdFx0ICogYWxsb3dzIGEgY29sdW1uJ3Mgb3JkZXJpbmcgdG8gdGFrZSBtdWx0aXBsZSBjb2x1bW5zIGludG8gYWNjb3VudCB3aGVuXHJcblx0XHQgKiBkb2luZyBhIHNvcnQgb3IgdXNlIHRoZSBkYXRhIGZyb20gYSBkaWZmZXJlbnQgY29sdW1uLiBGb3IgZXhhbXBsZSBmaXJzdFxyXG5cdFx0ICogbmFtZSAvIGxhc3QgbmFtZSBjb2x1bW5zIG1ha2Ugc2Vuc2UgdG8gZG8gYSBtdWx0aS1jb2x1bW4gc29ydCBvdmVyIHRoZVxyXG5cdFx0ICogdHdvIGNvbHVtbnMuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXl8aW50XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbCA8aT5UYWtlcyB0aGUgdmFsdWUgb2YgdGhlIGNvbHVtbiBpbmRleCBhdXRvbWF0aWNhbGx5PC9pPlxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLm9yZGVyRGF0YVxyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2BcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVwiOiBbIDAsIDEgXSwgXCJ0YXJnZXRzXCI6IFsgMCBdIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhXCI6IFsgMSwgMCBdLCBcInRhcmdldHNcIjogWyAxIF0gfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlckRhdGFcIjogMiwgXCJ0YXJnZXRzXCI6IFsgMiBdIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhXCI6IFsgMCwgMSBdIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhXCI6IFsgMSwgMCBdIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhXCI6IDIgfSxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsXHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYURhdGFTb3J0XCI6IG51bGwsXHJcblx0XHRcImlEYXRhU29ydFwiOiAtMSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogWW91IGNhbiBjb250cm9sIHRoZSBkZWZhdWx0IG9yZGVyaW5nIGRpcmVjdGlvbiwgYW5kIGV2ZW4gYWx0ZXIgdGhlXHJcblx0XHQgKiBiZWhhdmlvdXIgb2YgdGhlIHNvcnQgaGFuZGxlciAoaS5lLiBvbmx5IGFsbG93IGFzY2VuZGluZyBvcmRlcmluZyBldGMpXHJcblx0XHQgKiB1c2luZyB0aGlzIHBhcmFtZXRlci5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFsgJ2FzYycsICdkZXNjJyBdXHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4ub3JkZXJTZXF1ZW5jZVxyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2BcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyU2VxdWVuY2VcIjogWyBcImFzY1wiIF0sIFwidGFyZ2V0c1wiOiBbIDEgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyU2VxdWVuY2VcIjogWyBcImRlc2NcIiwgXCJhc2NcIiwgXCJhc2NcIiBdLCBcInRhcmdldHNcIjogWyAyIF0gfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJkZXNjXCIgXSwgXCJ0YXJnZXRzXCI6IFsgMyBdIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyU2VxdWVuY2VcIjogWyBcImFzY1wiIF0gfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlclNlcXVlbmNlXCI6IFsgXCJkZXNjXCIsIFwiYXNjXCIsIFwiYXNjXCIgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyU2VxdWVuY2VcIjogWyBcImRlc2NcIiBdIH0sXHJcblx0XHQgKiAgICAgICAgICBudWxsXHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwiYXNTb3J0aW5nXCI6IFsgJ2FzYycsICdkZXNjJyBdLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBmaWx0ZXJpbmcgb24gdGhlIGRhdGEgaW4gdGhpcyBjb2x1bW4uXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5zZWFyY2hhYmxlXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwic2VhcmNoYWJsZVwiOiBmYWxzZSwgXCJ0YXJnZXRzXCI6IFsgMCBdIH1cclxuXHRcdCAqICAgICAgICBdIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwic2VhcmNoYWJsZVwiOiBmYWxzZSB9LFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbFxyXG5cdFx0ICogICAgICAgIF0gfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJTZWFyY2hhYmxlXCI6IHRydWUsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIG9yZGVyaW5nIG9uIHRoaXMgY29sdW1uLlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4ub3JkZXJhYmxlXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJhYmxlXCI6IGZhbHNlLCBcInRhcmdldHNcIjogWyAwIF0gfVxyXG5cdFx0ICogICAgICAgIF0gfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlcmFibGVcIjogZmFsc2UgfSxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGxcclxuXHRcdCAqICAgICAgICBdIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJiU29ydGFibGVcIjogdHJ1ZSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRW5hYmxlIG9yIGRpc2FibGUgdGhlIGRpc3BsYXkgb2YgdGhpcyBjb2x1bW4uXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IHRydWVcclxuXHRcdCAqXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi52aXNpYmxlXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwidmlzaWJsZVwiOiBmYWxzZSwgXCJ0YXJnZXRzXCI6IFsgMCBdIH1cclxuXHRcdCAqICAgICAgICBdIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwidmlzaWJsZVwiOiBmYWxzZSB9LFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbFxyXG5cdFx0ICogICAgICAgIF0gfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcImJWaXNpYmxlXCI6IHRydWUsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIERldmVsb3BlciBkZWZpbmFibGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgYSBjZWxsIGlzIGNyZWF0ZWQgKEFqYXggc291cmNlLFxyXG5cdFx0ICogZXRjKSBvciBwcm9jZXNzZWQgZm9yIGlucHV0IChET00gc291cmNlKS4gVGhpcyBjYW4gYmUgdXNlZCBhcyBhIGNvbXBsaW1lbnQgdG8gbVJlbmRlclxyXG5cdFx0ICogYWxsb3dpbmcgeW91IHRvIG1vZGlmeSB0aGUgRE9NIGVsZW1lbnQgKGFkZCBiYWNrZ3JvdW5kIGNvbG91ciBmb3IgZXhhbXBsZSkgd2hlbiB0aGVcclxuXHRcdCAqIGVsZW1lbnQgaXMgYXZhaWxhYmxlLlxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKiAgQHBhcmFtIHtlbGVtZW50fSB0ZCBUaGUgVEQgbm9kZSB0aGF0IGhhcyBiZWVuIGNyZWF0ZWRcclxuXHRcdCAqICBAcGFyYW0geyp9IGNlbGxEYXRhIFRoZSBEYXRhIGZvciB0aGUgY2VsbFxyXG5cdFx0ICogIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSByb3dEYXRhIFRoZSBkYXRhIGZvciB0aGUgd2hvbGUgcm93XHJcblx0XHQgKiAgQHBhcmFtIHtpbnR9IHJvdyBUaGUgcm93IGluZGV4IGZvciB0aGUgYW9EYXRhIGRhdGEgc3RvcmVcclxuXHRcdCAqICBAcGFyYW0ge2ludH0gY29sIFRoZSBjb2x1bW4gaW5kZXggZm9yIGFvQ29sdW1uc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLmNyZWF0ZWRDZWxsXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XHJcblx0XHQgKiAgICAgICAgICBcInRhcmdldHNcIjogWzNdLFxyXG5cdFx0ICogICAgICAgICAgXCJjcmVhdGVkQ2VsbFwiOiBmdW5jdGlvbiAodGQsIGNlbGxEYXRhLCByb3dEYXRhLCByb3csIGNvbCkge1xyXG5cdFx0ICogICAgICAgICAgICBpZiAoIGNlbGxEYXRhID09IFwiMS43XCIgKSB7XHJcblx0XHQgKiAgICAgICAgICAgICAgJCh0ZCkuY3NzKCdjb2xvcicsICdibHVlJylcclxuXHRcdCAqICAgICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgIH0gXVxyXG5cdFx0ICogICAgICB9KTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJmbkNyZWF0ZWRDZWxsXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgcGFyYW1ldGVyIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IGBkYXRhYCBpbiBEYXRhVGFibGVzIHRvIGVuc3VyZSBuYW1pbmdcclxuXHRcdCAqIGNvbnNpc3RlbmN5LiBgZGF0YVByb3BgIGNhbiBzdGlsbCBiZSB1c2VkLCBhcyB0aGVyZSBpcyBiYWNrd2FyZHNcclxuXHRcdCAqIGNvbXBhdGliaWxpdHkgaW4gRGF0YVRhYmxlcyBmb3IgdGhpcyBvcHRpb24sIGJ1dCBpdCBpcyBzdHJvbmdseVxyXG5cdFx0ICogcmVjb21tZW5kZWQgdGhhdCB5b3UgdXNlIGBkYXRhYCBpbiBwcmVmZXJlbmNlIHRvIGBkYXRhUHJvcGAuXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5kYXRhUHJvcFxyXG5cdFx0ICovXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gcmVhZCBkYXRhIGZyb20gYW55IGRhdGEgc291cmNlIHByb3BlcnR5LFxyXG5cdFx0ICogaW5jbHVkaW5nIGRlZXBseSBuZXN0ZWQgb2JqZWN0cyAvIHByb3BlcnRpZXMuIGBkYXRhYCBjYW4gYmUgZ2l2ZW4gaW4gYVxyXG5cdFx0ICogbnVtYmVyIG9mIGRpZmZlcmVudCB3YXlzIHdoaWNoIGVmZmVjdCBpdHMgYmVoYXZpb3VyOlxyXG5cdFx0ICpcclxuXHRcdCAqICogYGludGVnZXJgIC0gdHJlYXRlZCBhcyBhbiBhcnJheSBpbmRleCBmb3IgdGhlIGRhdGEgc291cmNlLiBUaGlzIGlzIHRoZVxyXG5cdFx0ICogICBkZWZhdWx0IHRoYXQgRGF0YVRhYmxlcyB1c2VzIChpbmNyZW1lbnRhbGx5IGluY3JlYXNlZCBmb3IgZWFjaCBjb2x1bW4pLlxyXG5cdFx0ICogKiBgc3RyaW5nYCAtIHJlYWQgYW4gb2JqZWN0IHByb3BlcnR5IGZyb20gdGhlIGRhdGEgc291cmNlLiBUaGVyZSBhcmVcclxuXHRcdCAqICAgdGhyZWUgJ3NwZWNpYWwnIG9wdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgc3RyaW5nIHRvIGFsdGVyIGhvd1xyXG5cdFx0ICogICBEYXRhVGFibGVzIHJlYWRzIHRoZSBkYXRhIGZyb20gdGhlIHNvdXJjZSBvYmplY3Q6XHJcblx0XHQgKiAgICAqIGAuYCAtIERvdHRlZCBKYXZhc2NyaXB0IG5vdGF0aW9uLiBKdXN0IGFzIHlvdSB1c2UgYSBgLmAgaW5cclxuXHRcdCAqICAgICAgSmF2YXNjcmlwdCB0byByZWFkIGZyb20gbmVzdGVkIG9iamVjdHMsIHNvIHRvIGNhbiB0aGUgb3B0aW9uc1xyXG5cdFx0ICogICAgICBzcGVjaWZpZWQgaW4gYGRhdGFgLiBGb3IgZXhhbXBsZTogYGJyb3dzZXIudmVyc2lvbmAgb3JcclxuXHRcdCAqICAgICAgYGJyb3dzZXIubmFtZWAuIElmIHlvdXIgb2JqZWN0IHBhcmFtZXRlciBuYW1lIGNvbnRhaW5zIGEgcGVyaW9kLCB1c2VcclxuXHRcdCAqICAgICAgYFxcXFxgIHRvIGVzY2FwZSBpdCAtIGkuZS4gYGZpcnN0XFxcXC5uYW1lYC5cclxuXHRcdCAqICAgICogYFtdYCAtIEFycmF5IG5vdGF0aW9uLiBEYXRhVGFibGVzIGNhbiBhdXRvbWF0aWNhbGx5IGNvbWJpbmUgZGF0YVxyXG5cdFx0ICogICAgICBmcm9tIGFuZCBhcnJheSBzb3VyY2UsIGpvaW5pbmcgdGhlIGRhdGEgd2l0aCB0aGUgY2hhcmFjdGVycyBwcm92aWRlZFxyXG5cdFx0ICogICAgICBiZXR3ZWVuIHRoZSB0d28gYnJhY2tldHMuIEZvciBleGFtcGxlOiBgbmFtZVssIF1gIHdvdWxkIHByb3ZpZGUgYVxyXG5cdFx0ICogICAgICBjb21tYS1zcGFjZSBzZXBhcmF0ZWQgbGlzdCBmcm9tIHRoZSBzb3VyY2UgYXJyYXkuIElmIG5vIGNoYXJhY3RlcnNcclxuXHRcdCAqICAgICAgYXJlIHByb3ZpZGVkIGJldHdlZW4gdGhlIGJyYWNrZXRzLCB0aGUgb3JpZ2luYWwgYXJyYXkgc291cmNlIGlzXHJcblx0XHQgKiAgICAgIHJldHVybmVkLlxyXG5cdFx0ICogICAgKiBgKClgIC0gRnVuY3Rpb24gbm90YXRpb24uIEFkZGluZyBgKClgIHRvIHRoZSBlbmQgb2YgYSBwYXJhbWV0ZXIgd2lsbFxyXG5cdFx0ICogICAgICBleGVjdXRlIGEgZnVuY3Rpb24gb2YgdGhlIG5hbWUgZ2l2ZW4uIEZvciBleGFtcGxlOiBgYnJvd3NlcigpYCBmb3IgYVxyXG5cdFx0ICogICAgICBzaW1wbGUgZnVuY3Rpb24gb24gdGhlIGRhdGEgc291cmNlLCBgYnJvd3Nlci52ZXJzaW9uKClgIGZvciBhXHJcblx0XHQgKiAgICAgIGZ1bmN0aW9uIGluIGEgbmVzdGVkIHByb3BlcnR5IG9yIGV2ZW4gYGJyb3dzZXIoKS52ZXJzaW9uYCB0byBnZXQgYW5cclxuXHRcdCAqICAgICAgb2JqZWN0IHByb3BlcnR5IGlmIHRoZSBmdW5jdGlvbiBjYWxsZWQgcmV0dXJucyBhbiBvYmplY3QuIE5vdGUgdGhhdFxyXG5cdFx0ICogICAgICBmdW5jdGlvbiBub3RhdGlvbiBpcyByZWNvbW1lbmRlZCBmb3IgdXNlIGluIGByZW5kZXJgIHJhdGhlciB0aGFuXHJcblx0XHQgKiAgICAgIGBkYXRhYCBhcyBpdCBpcyBtdWNoIHNpbXBsZXIgdG8gdXNlIGFzIGEgcmVuZGVyZXIuXHJcblx0XHQgKiAqIGBudWxsYCAtIHVzZSB0aGUgb3JpZ2luYWwgZGF0YSBzb3VyY2UgZm9yIHRoZSByb3cgcmF0aGVyIHRoYW4gcGx1Y2tpbmdcclxuXHRcdCAqICAgZGF0YSBkaXJlY3RseSBmcm9tIGl0LiBUaGlzIGFjdGlvbiBoYXMgZWZmZWN0cyBvbiB0d28gb3RoZXJcclxuXHRcdCAqICAgaW5pdGlhbGlzYXRpb24gb3B0aW9uczpcclxuXHRcdCAqICAgICogYGRlZmF1bHRDb250ZW50YCAtIFdoZW4gbnVsbCBpcyBnaXZlbiBhcyB0aGUgYGRhdGFgIG9wdGlvbiBhbmRcclxuXHRcdCAqICAgICAgYGRlZmF1bHRDb250ZW50YCBpcyBzcGVjaWZpZWQgZm9yIHRoZSBjb2x1bW4sIHRoZSB2YWx1ZSBkZWZpbmVkIGJ5XHJcblx0XHQgKiAgICAgIGBkZWZhdWx0Q29udGVudGAgd2lsbCBiZSB1c2VkIGZvciB0aGUgY2VsbC5cclxuXHRcdCAqICAgICogYHJlbmRlcmAgLSBXaGVuIG51bGwgaXMgdXNlZCBmb3IgdGhlIGBkYXRhYCBvcHRpb24gYW5kIHRoZSBgcmVuZGVyYFxyXG5cdFx0ICogICAgICBvcHRpb24gaXMgc3BlY2lmaWVkIGZvciB0aGUgY29sdW1uLCB0aGUgd2hvbGUgZGF0YSBzb3VyY2UgZm9yIHRoZVxyXG5cdFx0ICogICAgICByb3cgaXMgdXNlZCBmb3IgdGhlIHJlbmRlcmVyLlxyXG5cdFx0ICogKiBgZnVuY3Rpb25gIC0gdGhlIGZ1bmN0aW9uIGdpdmVuIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgRGF0YVRhYmxlc1xyXG5cdFx0ICogICBuZWVkcyB0byBzZXQgb3IgZ2V0IHRoZSBkYXRhIGZvciBhIGNlbGwgaW4gdGhlIGNvbHVtbi4gVGhlIGZ1bmN0aW9uXHJcblx0XHQgKiAgIHRha2VzIHRocmVlIHBhcmFtZXRlcnM6XHJcblx0XHQgKiAgICAqIFBhcmFtZXRlcnM6XHJcblx0XHQgKiAgICAgICogYHthcnJheXxvYmplY3R9YCBUaGUgZGF0YSBzb3VyY2UgZm9yIHRoZSByb3dcclxuXHRcdCAqICAgICAgKiBge3N0cmluZ31gIFRoZSB0eXBlIGNhbGwgZGF0YSByZXF1ZXN0ZWQgLSB0aGlzIHdpbGwgYmUgJ3NldCcgd2hlblxyXG5cdFx0ICogICAgICAgIHNldHRpbmcgZGF0YSBvciAnZmlsdGVyJywgJ2Rpc3BsYXknLCAndHlwZScsICdzb3J0JyBvciB1bmRlZmluZWRcclxuXHRcdCAqICAgICAgICB3aGVuIGdhdGhlcmluZyBkYXRhLiBOb3RlIHRoYXQgd2hlbiBgdW5kZWZpbmVkYCBpcyBnaXZlbiBmb3IgdGhlXHJcblx0XHQgKiAgICAgICAgdHlwZSBEYXRhVGFibGVzIGV4cGVjdHMgdG8gZ2V0IHRoZSByYXcgZGF0YSBmb3IgdGhlIG9iamVjdCBiYWNrPFxyXG5cdFx0ICogICAgICAqIGB7Kn1gIERhdGEgdG8gc2V0IHdoZW4gdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgJ3NldCcuXHJcblx0XHQgKiAgICAqIFJldHVybjpcclxuXHRcdCAqICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uIGlzIG5vdCByZXF1aXJlZCB3aGVuICdzZXQnIGlzXHJcblx0XHQgKiAgICAgICAgdGhlIHR5cGUgb2YgY2FsbCwgYnV0IG90aGVyd2lzZSB0aGUgcmV0dXJuIGlzIHdoYXQgd2lsbCBiZSB1c2VkXHJcblx0XHQgKiAgICAgICAgZm9yIHRoZSBkYXRhIHJlcXVlc3RlZC5cclxuXHRcdCAqXHJcblx0XHQgKiBOb3RlIHRoYXQgYGRhdGFgIGlzIGEgZ2V0dGVyIGFuZCBzZXR0ZXIgb3B0aW9uLiBJZiB5b3UganVzdCByZXF1aXJlXHJcblx0XHQgKiBmb3JtYXR0aW5nIG9mIGRhdGEgZm9yIG91dHB1dCwgeW91IHdpbGwgbGlrZWx5IHdhbnQgdG8gdXNlIGByZW5kZXJgIHdoaWNoXHJcblx0XHQgKiBpcyBzaW1wbHkgYSBnZXR0ZXIgYW5kIHRodXMgc2ltcGxlciB0byB1c2UuXHJcblx0XHQgKlxyXG5cdFx0ICogTm90ZSB0aGF0IHByaW9yIHRvIERhdGFUYWJsZXMgMS45LjIgYGRhdGFgIHdhcyBjYWxsZWQgYG1EYXRhUHJvcGAuIFRoZVxyXG5cdFx0ICogbmFtZSBjaGFuZ2UgcmVmbGVjdHMgdGhlIGZsZXhpYmlsaXR5IG9mIHRoaXMgcHJvcGVydHkgYW5kIGlzIGNvbnNpc3RlbnRcclxuXHRcdCAqIHdpdGggdGhlIG5hbWluZyBvZiBtUmVuZGVyLiBJZiAnbURhdGFQcm9wJyBpcyBnaXZlbiwgdGhlbiBpdCB3aWxsIHN0aWxsXHJcblx0XHQgKiBiZSB1c2VkIGJ5IERhdGFUYWJsZXMsIGFzIGl0IGF1dG9tYXRpY2FsbHkgbWFwcyB0aGUgb2xkIG5hbWUgdG8gdGhlIG5ld1xyXG5cdFx0ICogaWYgcmVxdWlyZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ3xpbnR8ZnVuY3Rpb258bnVsbFxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGwgPGk+VXNlIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBjb2x1bW4gaW5kZXg8L2k+XHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4uZGF0YVxyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBSZWFkIHRhYmxlIGRhdGEgZnJvbSBvYmplY3RzXHJcblx0XHQgKiAgICAvLyBKU09OIHN0cnVjdHVyZSBmb3IgZWFjaCByb3c6XHJcblx0XHQgKiAgICAvLyAgIHtcclxuXHRcdCAqICAgIC8vICAgICAgXCJlbmdpbmVcIjoge3ZhbHVlfSxcclxuXHRcdCAqICAgIC8vICAgICAgXCJicm93c2VyXCI6IHt2YWx1ZX0sXHJcblx0XHQgKiAgICAvLyAgICAgIFwicGxhdGZvcm1cIjoge3ZhbHVlfSxcclxuXHRcdCAqICAgIC8vICAgICAgXCJ2ZXJzaW9uXCI6IHt2YWx1ZX0sXHJcblx0XHQgKiAgICAvLyAgICAgIFwiZ3JhZGVcIjoge3ZhbHVlfVxyXG5cdFx0ICogICAgLy8gICB9XHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJhamF4U291cmNlXCI6IFwic291cmNlcy9vYmplY3RzLnR4dFwiLFxyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwiZGF0YVwiOiBcImVuZ2luZVwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwiZGF0YVwiOiBcImJyb3dzZXJcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJwbGF0Zm9ybVwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwiZGF0YVwiOiBcInZlcnNpb25cIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJncmFkZVwiIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFJlYWQgaW5mb3JtYXRpb24gZnJvbSBkZWVwbHkgbmVzdGVkIG9iamVjdHNcclxuXHRcdCAqICAgIC8vIEpTT04gc3RydWN0dXJlIGZvciBlYWNoIHJvdzpcclxuXHRcdCAqICAgIC8vICAge1xyXG5cdFx0ICogICAgLy8gICAgICBcImVuZ2luZVwiOiB7dmFsdWV9LFxyXG5cdFx0ICogICAgLy8gICAgICBcImJyb3dzZXJcIjoge3ZhbHVlfSxcclxuXHRcdCAqICAgIC8vICAgICAgXCJwbGF0Zm9ybVwiOiB7XHJcblx0XHQgKiAgICAvLyAgICAgICAgIFwiaW5uZXJcIjoge3ZhbHVlfVxyXG5cdFx0ICogICAgLy8gICAgICB9LFxyXG5cdFx0ICogICAgLy8gICAgICBcImRldGFpbHNcIjogW1xyXG5cdFx0ICogICAgLy8gICAgICAgICB7dmFsdWV9LCB7dmFsdWV9XHJcblx0XHQgKiAgICAvLyAgICAgIF1cclxuXHRcdCAqICAgIC8vICAgfVxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiYWpheFNvdXJjZVwiOiBcInNvdXJjZXMvZGVlcC50eHRcIixcclxuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJlbmdpbmVcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJicm93c2VyXCIgfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJkYXRhXCI6IFwicGxhdGZvcm0uaW5uZXJcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJwbGF0Zm9ybS5kZXRhaWxzLjBcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJwbGF0Zm9ybS5kZXRhaWxzLjFcIiB9XHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBgZGF0YWAgYXMgYSBmdW5jdGlvbiB0byBwcm92aWRlIGRpZmZlcmVudCBpbmZvcm1hdGlvbiBmb3JcclxuXHRcdCAqICAgIC8vIHNvcnRpbmcsIGZpbHRlcmluZyBhbmQgZGlzcGxheS4gSW4gdGhpcyBjYXNlLCBjdXJyZW5jeSAocHJpY2UpXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xyXG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxyXG5cdFx0ICogICAgICAgICAgXCJkYXRhXCI6IGZ1bmN0aW9uICggc291cmNlLCB0eXBlLCB2YWwgKSB7XHJcblx0XHQgKiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0Jykge1xyXG5cdFx0ICogICAgICAgICAgICAgIHNvdXJjZS5wcmljZSA9IHZhbDtcclxuXHRcdCAqICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgY29tcHV0ZWQgZGlzbGF5IGFuZCBmaWx0ZXIgdmFsdWVzIGZvciBlZmZpY2llbmN5XHJcblx0XHQgKiAgICAgICAgICAgICAgc291cmNlLnByaWNlX2Rpc3BsYXkgPSB2YWw9PVwiXCIgPyBcIlwiIDogXCIkXCIrbnVtYmVyRm9ybWF0KHZhbCk7XHJcblx0XHQgKiAgICAgICAgICAgICAgc291cmNlLnByaWNlX2ZpbHRlciAgPSB2YWw9PVwiXCIgPyBcIlwiIDogXCIkXCIrbnVtYmVyRm9ybWF0KHZhbCkrXCIgXCIrdmFsO1xyXG5cdFx0ICogICAgICAgICAgICAgIHJldHVybjtcclxuXHRcdCAqICAgICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnZGlzcGxheScpIHtcclxuXHRcdCAqICAgICAgICAgICAgICByZXR1cm4gc291cmNlLnByaWNlX2Rpc3BsYXk7XHJcblx0XHQgKiAgICAgICAgICAgIH1cclxuXHRcdCAqICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ2ZpbHRlcicpIHtcclxuXHRcdCAqICAgICAgICAgICAgICByZXR1cm4gc291cmNlLnByaWNlX2ZpbHRlcjtcclxuXHRcdCAqICAgICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgICAgICAvLyAnc29ydCcsICd0eXBlJyBhbmQgdW5kZWZpbmVkIGFsbCBqdXN0IHVzZSB0aGUgaW50ZWdlclxyXG5cdFx0ICogICAgICAgICAgICByZXR1cm4gc291cmNlLnByaWNlO1xyXG5cdFx0ICogICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgIH0gXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBkZWZhdWx0IGNvbnRlbnRcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XHJcblx0XHQgKiAgICAgICAgICBcInRhcmdldHNcIjogWyAwIF0sXHJcblx0XHQgKiAgICAgICAgICBcImRhdGFcIjogbnVsbCxcclxuXHRcdCAqICAgICAgICAgIFwiZGVmYXVsdENvbnRlbnRcIjogXCJDbGljayB0byBlZGl0XCJcclxuXHRcdCAqICAgICAgICB9IF1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYXJyYXkgbm90YXRpb24gLSBvdXRwdXR0aW5nIGEgbGlzdCBmcm9tIGFuIGFycmF5XHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xyXG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxyXG5cdFx0ICogICAgICAgICAgXCJkYXRhXCI6IFwibmFtZVssIF1cIlxyXG5cdFx0ICogICAgICAgIH0gXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICovXHJcblx0XHRcIm1EYXRhXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgcHJvcGVydHkgaXMgdGhlIHJlbmRlcmluZyBwYXJ0bmVyIHRvIGBkYXRhYCBhbmQgaXQgaXMgc3VnZ2VzdGVkIHRoYXRcclxuXHRcdCAqIHdoZW4geW91IHdhbnQgdG8gbWFuaXB1bGF0ZSBkYXRhIGZvciBkaXNwbGF5IChpbmNsdWRpbmcgZmlsdGVyaW5nLFxyXG5cdFx0ICogc29ydGluZyBldGMpIHdpdGhvdXQgYWx0ZXJpbmcgdGhlIHVuZGVybHlpbmcgZGF0YSBmb3IgdGhlIHRhYmxlLCB1c2UgdGhpc1xyXG5cdFx0ICogcHJvcGVydHkuIGByZW5kZXJgIGNhbiBiZSBjb25zaWRlcmVkIHRvIGJlIHRoZSB0aGUgcmVhZCBvbmx5IGNvbXBhbmlvbiB0b1xyXG5cdFx0ICogYGRhdGFgIHdoaWNoIGlzIHJlYWQgLyB3cml0ZSAodGhlbiBhcyBzdWNoIG1vcmUgY29tcGxleCkuIExpa2UgYGRhdGFgXHJcblx0XHQgKiB0aGlzIG9wdGlvbiBjYW4gYmUgZ2l2ZW4gaW4gYSBudW1iZXIgb2YgZGlmZmVyZW50IHdheXMgdG8gZWZmZWN0IGl0c1xyXG5cdFx0ICogYmVoYXZpb3VyOlxyXG5cdFx0ICpcclxuXHRcdCAqICogYGludGVnZXJgIC0gdHJlYXRlZCBhcyBhbiBhcnJheSBpbmRleCBmb3IgdGhlIGRhdGEgc291cmNlLiBUaGlzIGlzIHRoZVxyXG5cdFx0ICogICBkZWZhdWx0IHRoYXQgRGF0YVRhYmxlcyB1c2VzIChpbmNyZW1lbnRhbGx5IGluY3JlYXNlZCBmb3IgZWFjaCBjb2x1bW4pLlxyXG5cdFx0ICogKiBgc3RyaW5nYCAtIHJlYWQgYW4gb2JqZWN0IHByb3BlcnR5IGZyb20gdGhlIGRhdGEgc291cmNlLiBUaGVyZSBhcmVcclxuXHRcdCAqICAgdGhyZWUgJ3NwZWNpYWwnIG9wdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgc3RyaW5nIHRvIGFsdGVyIGhvd1xyXG5cdFx0ICogICBEYXRhVGFibGVzIHJlYWRzIHRoZSBkYXRhIGZyb20gdGhlIHNvdXJjZSBvYmplY3Q6XHJcblx0XHQgKiAgICAqIGAuYCAtIERvdHRlZCBKYXZhc2NyaXB0IG5vdGF0aW9uLiBKdXN0IGFzIHlvdSB1c2UgYSBgLmAgaW5cclxuXHRcdCAqICAgICAgSmF2YXNjcmlwdCB0byByZWFkIGZyb20gbmVzdGVkIG9iamVjdHMsIHNvIHRvIGNhbiB0aGUgb3B0aW9uc1xyXG5cdFx0ICogICAgICBzcGVjaWZpZWQgaW4gYGRhdGFgLiBGb3IgZXhhbXBsZTogYGJyb3dzZXIudmVyc2lvbmAgb3JcclxuXHRcdCAqICAgICAgYGJyb3dzZXIubmFtZWAuIElmIHlvdXIgb2JqZWN0IHBhcmFtZXRlciBuYW1lIGNvbnRhaW5zIGEgcGVyaW9kLCB1c2VcclxuXHRcdCAqICAgICAgYFxcXFxgIHRvIGVzY2FwZSBpdCAtIGkuZS4gYGZpcnN0XFxcXC5uYW1lYC5cclxuXHRcdCAqICAgICogYFtdYCAtIEFycmF5IG5vdGF0aW9uLiBEYXRhVGFibGVzIGNhbiBhdXRvbWF0aWNhbGx5IGNvbWJpbmUgZGF0YVxyXG5cdFx0ICogICAgICBmcm9tIGFuZCBhcnJheSBzb3VyY2UsIGpvaW5pbmcgdGhlIGRhdGEgd2l0aCB0aGUgY2hhcmFjdGVycyBwcm92aWRlZFxyXG5cdFx0ICogICAgICBiZXR3ZWVuIHRoZSB0d28gYnJhY2tldHMuIEZvciBleGFtcGxlOiBgbmFtZVssIF1gIHdvdWxkIHByb3ZpZGUgYVxyXG5cdFx0ICogICAgICBjb21tYS1zcGFjZSBzZXBhcmF0ZWQgbGlzdCBmcm9tIHRoZSBzb3VyY2UgYXJyYXkuIElmIG5vIGNoYXJhY3RlcnNcclxuXHRcdCAqICAgICAgYXJlIHByb3ZpZGVkIGJldHdlZW4gdGhlIGJyYWNrZXRzLCB0aGUgb3JpZ2luYWwgYXJyYXkgc291cmNlIGlzXHJcblx0XHQgKiAgICAgIHJldHVybmVkLlxyXG5cdFx0ICogICAgKiBgKClgIC0gRnVuY3Rpb24gbm90YXRpb24uIEFkZGluZyBgKClgIHRvIHRoZSBlbmQgb2YgYSBwYXJhbWV0ZXIgd2lsbFxyXG5cdFx0ICogICAgICBleGVjdXRlIGEgZnVuY3Rpb24gb2YgdGhlIG5hbWUgZ2l2ZW4uIEZvciBleGFtcGxlOiBgYnJvd3NlcigpYCBmb3IgYVxyXG5cdFx0ICogICAgICBzaW1wbGUgZnVuY3Rpb24gb24gdGhlIGRhdGEgc291cmNlLCBgYnJvd3Nlci52ZXJzaW9uKClgIGZvciBhXHJcblx0XHQgKiAgICAgIGZ1bmN0aW9uIGluIGEgbmVzdGVkIHByb3BlcnR5IG9yIGV2ZW4gYGJyb3dzZXIoKS52ZXJzaW9uYCB0byBnZXQgYW5cclxuXHRcdCAqICAgICAgb2JqZWN0IHByb3BlcnR5IGlmIHRoZSBmdW5jdGlvbiBjYWxsZWQgcmV0dXJucyBhbiBvYmplY3QuXHJcblx0XHQgKiAqIGBvYmplY3RgIC0gdXNlIGRpZmZlcmVudCBkYXRhIGZvciB0aGUgZGlmZmVyZW50IGRhdGEgdHlwZXMgcmVxdWVzdGVkIGJ5XHJcblx0XHQgKiAgIERhdGFUYWJsZXMgKCdmaWx0ZXInLCAnZGlzcGxheScsICd0eXBlJyBvciAnc29ydCcpLiBUaGUgcHJvcGVydHkgbmFtZXNcclxuXHRcdCAqICAgb2YgdGhlIG9iamVjdCBpcyB0aGUgZGF0YSB0eXBlIHRoZSBwcm9wZXJ0eSByZWZlcnMgdG8gYW5kIHRoZSB2YWx1ZSBjYW5cclxuXHRcdCAqICAgZGVmaW5lZCB1c2luZyBhbiBpbnRlZ2VyLCBzdHJpbmcgb3IgZnVuY3Rpb24gdXNpbmcgdGhlIHNhbWUgcnVsZXMgYXNcclxuXHRcdCAqICAgYHJlbmRlcmAgbm9ybWFsbHkgZG9lcy4gTm90ZSB0aGF0IGFuIGBfYCBvcHRpb24gX211c3RfIGJlIHNwZWNpZmllZC5cclxuXHRcdCAqICAgVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSB0byB1c2UgaWYgeW91IGhhdmVuJ3Qgc3BlY2lmaWVkIGEgdmFsdWUgZm9yXHJcblx0XHQgKiAgIHRoZSBkYXRhIHR5cGUgcmVxdWVzdGVkIGJ5IERhdGFUYWJsZXMuXHJcblx0XHQgKiAqIGBmdW5jdGlvbmAgLSB0aGUgZnVuY3Rpb24gZ2l2ZW4gd2lsbCBiZSBleGVjdXRlZCB3aGVuZXZlciBEYXRhVGFibGVzXHJcblx0XHQgKiAgIG5lZWRzIHRvIHNldCBvciBnZXQgdGhlIGRhdGEgZm9yIGEgY2VsbCBpbiB0aGUgY29sdW1uLiBUaGUgZnVuY3Rpb25cclxuXHRcdCAqICAgdGFrZXMgdGhyZWUgcGFyYW1ldGVyczpcclxuXHRcdCAqICAgICogUGFyYW1ldGVyczpcclxuXHRcdCAqICAgICAgKiB7YXJyYXl8b2JqZWN0fSBUaGUgZGF0YSBzb3VyY2UgZm9yIHRoZSByb3cgKGJhc2VkIG9uIGBkYXRhYClcclxuXHRcdCAqICAgICAgKiB7c3RyaW5nfSBUaGUgdHlwZSBjYWxsIGRhdGEgcmVxdWVzdGVkIC0gdGhpcyB3aWxsIGJlICdmaWx0ZXInLFxyXG5cdFx0ICogICAgICAgICdkaXNwbGF5JywgJ3R5cGUnIG9yICdzb3J0Jy5cclxuXHRcdCAqICAgICAgKiB7YXJyYXl8b2JqZWN0fSBUaGUgZnVsbCBkYXRhIHNvdXJjZSBmb3IgdGhlIHJvdyAobm90IGJhc2VkIG9uXHJcblx0XHQgKiAgICAgICAgYGRhdGFgKVxyXG5cdFx0ICogICAgKiBSZXR1cm46XHJcblx0XHQgKiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBmdW5jdGlvbiBpcyB3aGF0IHdpbGwgYmUgdXNlZCBmb3IgdGhlXHJcblx0XHQgKiAgICAgICAgZGF0YSByZXF1ZXN0ZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ3xpbnR8ZnVuY3Rpb258b2JqZWN0fG51bGxcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsIFVzZSB0aGUgZGF0YSBzb3VyY2UgdmFsdWUuXHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4ucmVuZGVyXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIENyZWF0ZSBhIGNvbW1hIHNlcGFyYXRlZCBsaXN0IGZyb20gYW4gYXJyYXkgb2Ygb2JqZWN0c1xyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiYWpheFNvdXJjZVwiOiBcInNvdXJjZXMvZGVlcC50eHRcIixcclxuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJlbmdpbmVcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcImRhdGFcIjogXCJicm93c2VyXCIgfSxcclxuXHRcdCAqICAgICAgICAgIHtcclxuXHRcdCAqICAgICAgICAgICAgXCJkYXRhXCI6IFwicGxhdGZvcm1cIixcclxuXHRcdCAqICAgICAgICAgICAgXCJyZW5kZXJcIjogXCJbLCBdLm5hbWVcIlxyXG5cdFx0ICogICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgIF1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gRXhlY3V0ZSBhIGZ1bmN0aW9uIHRvIG9idGFpbiBkYXRhXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xyXG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxyXG5cdFx0ICogICAgICAgICAgXCJkYXRhXCI6IG51bGwsIC8vIFVzZSB0aGUgZnVsbCBkYXRhIHNvdXJjZSBvYmplY3QgZm9yIHRoZSByZW5kZXJlcidzIHNvdXJjZVxyXG5cdFx0ICogICAgICAgICAgXCJyZW5kZXJcIjogXCJicm93c2VyTmFtZSgpXCJcclxuXHRcdCAqICAgICAgICB9IF1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gQXMgYW4gb2JqZWN0LCBleHRyYWN0aW5nIGRpZmZlcmVudCBkYXRhIGZvciB0aGUgZGlmZmVyZW50IHR5cGVzXHJcblx0XHQgKiAgICAvLyBUaGlzIHdvdWxkIGJlIHVzZWQgd2l0aCBhIGRhdGEgc291cmNlIHN1Y2ggYXM6XHJcblx0XHQgKiAgICAvLyAgIHsgXCJwaG9uZVwiOiA1NTUyMzY4LCBcInBob25lX2ZpbHRlclwiOiBcIjU1NTIzNjggNTU1LTIzNjhcIiwgXCJwaG9uZV9kaXNwbGF5XCI6IFwiNTU1LTIzNjhcIiB9XHJcblx0XHQgKiAgICAvLyBIZXJlIHRoZSBgcGhvbmVgIGludGVnZXIgaXMgdXNlZCBmb3Igc29ydGluZyBhbmQgdHlwZSBkZXRlY3Rpb24sIHdoaWxlIGBwaG9uZV9maWx0ZXJgXHJcblx0XHQgKiAgICAvLyAod2hpY2ggaGFzIGJvdGggZm9ybXMpIGlzIHVzZWQgZm9yIGZpbHRlcmluZyBmb3IgaWYgYSB1c2VyIGlucHV0cyBlaXRoZXIgZm9ybWF0LCB3aGlsZVxyXG5cdFx0ICogICAgLy8gdGhlIGZvcm1hdHRlZCBwaG9uZSBudW1iZXIgaXMgdGhlIG9uZSB0aGF0IGlzIHNob3duIGluIHRoZSB0YWJsZS5cclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogWyB7XHJcblx0XHQgKiAgICAgICAgICBcInRhcmdldHNcIjogWyAwIF0sXHJcblx0XHQgKiAgICAgICAgICBcImRhdGFcIjogbnVsbCwgLy8gVXNlIHRoZSBmdWxsIGRhdGEgc291cmNlIG9iamVjdCBmb3IgdGhlIHJlbmRlcmVyJ3Mgc291cmNlXHJcblx0XHQgKiAgICAgICAgICBcInJlbmRlclwiOiB7XHJcblx0XHQgKiAgICAgICAgICAgIFwiX1wiOiBcInBob25lXCIsXHJcblx0XHQgKiAgICAgICAgICAgIFwiZmlsdGVyXCI6IFwicGhvbmVfZmlsdGVyXCIsXHJcblx0XHQgKiAgICAgICAgICAgIFwiZGlzcGxheVwiOiBcInBob25lX2Rpc3BsYXlcIlxyXG5cdFx0ICogICAgICAgICAgfVxyXG5cdFx0ICogICAgICAgIH0gXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2UgYXMgYSBmdW5jdGlvbiB0byBjcmVhdGUgYSBsaW5rIGZyb20gdGhlIGRhdGEgc291cmNlXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xyXG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxyXG5cdFx0ICogICAgICAgICAgXCJkYXRhXCI6IFwiZG93bmxvYWRfbGlua1wiLFxyXG5cdFx0ICogICAgICAgICAgXCJyZW5kZXJcIjogZnVuY3Rpb24gKCBkYXRhLCB0eXBlLCBmdWxsICkge1xyXG5cdFx0ICogICAgICAgICAgICByZXR1cm4gJzxhIGhyZWY9XCInK2RhdGErJ1wiPkRvd25sb2FkPC9hPic7XHJcblx0XHQgKiAgICAgICAgICB9XHJcblx0XHQgKiAgICAgICAgfSBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJtUmVuZGVyXCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENoYW5nZSB0aGUgY2VsbCB0eXBlIGNyZWF0ZWQgZm9yIHRoZSBjb2x1bW4gLSBlaXRoZXIgVEQgY2VsbHMgb3IgVEggY2VsbHMuIFRoaXNcclxuXHRcdCAqIGNhbiBiZSB1c2VmdWwgYXMgVEggY2VsbHMgaGF2ZSBzZW1hbnRpYyBtZWFuaW5nIGluIHRoZSB0YWJsZSBib2R5LCBhbGxvd2luZyB0aGVtXHJcblx0XHQgKiB0byBhY3QgYXMgYSBoZWFkZXIgZm9yIGEgcm93ICh5b3UgbWF5IHdpc2ggdG8gYWRkIHNjb3BlPSdyb3cnIHRvIHRoZSBUSCBlbGVtZW50cykuXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgdGRcclxuXHRcdCAqXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5jZWxsVHlwZVxyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBNYWtlIHRoZSBmaXJzdCBjb2x1bW4gdXNlIFRIIGNlbGxzXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFsge1xyXG5cdFx0ICogICAgICAgICAgXCJ0YXJnZXRzXCI6IFsgMCBdLFxyXG5cdFx0ICogICAgICAgICAgXCJjZWxsVHlwZVwiOiBcInRoXCJcclxuXHRcdCAqICAgICAgICB9IF1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcInNDZWxsVHlwZVwiOiBcInRkXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENsYXNzIHRvIGdpdmUgdG8gZWFjaCBjZWxsIGluIHRoaXMgY29sdW1uLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IDxpPkVtcHR5IHN0cmluZzwvaT5cclxuXHRcdCAqXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5jbGFzc1xyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2BcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcImNsYXNzXCI6IFwibXlfY2xhc3NcIiwgXCJ0YXJnZXRzXCI6IFsgMCBdIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwiY2xhc3NcIjogXCJteV9jbGFzc1wiIH0sXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsXHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwic0NsYXNzXCI6IFwiXCIsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFdoZW4gRGF0YVRhYmxlcyBjYWxjdWxhdGVzIHRoZSBjb2x1bW4gd2lkdGhzIHRvIGFzc2lnbiB0byBlYWNoIGNvbHVtbixcclxuXHRcdCAqIGl0IGZpbmRzIHRoZSBsb25nZXN0IHN0cmluZyBpbiBlYWNoIGNvbHVtbiBhbmQgdGhlbiBjb25zdHJ1Y3RzIGFcclxuXHRcdCAqIHRlbXBvcmFyeSB0YWJsZSBhbmQgcmVhZHMgdGhlIHdpZHRocyBmcm9tIHRoYXQuIFRoZSBwcm9ibGVtIHdpdGggdGhpc1xyXG5cdFx0ICogaXMgdGhhdCBcIm1tbVwiIGlzIG11Y2ggd2lkZXIgdGhlbiBcImlpaWlcIiwgYnV0IHRoZSBsYXR0ZXIgaXMgYSBsb25nZXJcclxuXHRcdCAqIHN0cmluZyAtIHRodXMgdGhlIGNhbGN1bGF0aW9uIGNhbiBnbyB3cm9uZyAoZG9pbmcgaXQgcHJvcGVybHkgYW5kIHB1dHRpbmdcclxuXHRcdCAqIGl0IGludG8gYW4gRE9NIG9iamVjdCBhbmQgbWVhc3VyaW5nIHRoYXQgaXMgaG9ycmlibHkoISkgc2xvdykuIFRodXMgYXNcclxuXHRcdCAqIGEgXCJ3b3JrIGFyb3VuZFwiIHdlIHByb3ZpZGUgdGhpcyBvcHRpb24uIEl0IHdpbGwgYXBwZW5kIGl0cyB2YWx1ZSB0byB0aGVcclxuXHRcdCAqIHRleHQgdGhhdCBpcyBmb3VuZCB0byBiZSB0aGUgbG9uZ2VzdCBzdHJpbmcgZm9yIHRoZSBjb2x1bW4gLSBpLmUuIHBhZGRpbmcuXHJcblx0XHQgKiBHZW5lcmFsbHkgeW91IHNob3VsZG4ndCBuZWVkIHRoaXMhXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgPGk+RW1wdHkgc3RyaW5nPGk+XHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4uY29udGVudFBhZGRpbmdcclxuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIHtcclxuXHRcdCAqICAgICAgICAgICAgXCJjb250ZW50UGFkZGluZ1wiOiBcIm1tbVwiXHJcblx0XHQgKiAgICAgICAgICB9XHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwic0NvbnRlbnRQYWRkaW5nXCI6IFwiXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFsbG93cyBhIGRlZmF1bHQgdmFsdWUgdG8gYmUgZ2l2ZW4gZm9yIGEgY29sdW1uJ3MgZGF0YSwgYW5kIHdpbGwgYmUgdXNlZFxyXG5cdFx0ICogd2hlbmV2ZXIgYSBudWxsIGRhdGEgc291cmNlIGlzIGVuY291bnRlcmVkICh0aGlzIGNhbiBiZSBiZWNhdXNlIGBkYXRhYFxyXG5cdFx0ICogaXMgc2V0IHRvIG51bGwsIG9yIGJlY2F1c2UgdGhlIGRhdGEgc291cmNlIGl0c2VsZiBpcyBudWxsKS5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKlxyXG5cdFx0ICogIEBuYW1lIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4uZGVmYXVsdENvbnRlbnRcclxuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbkRlZnNgXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHtcclxuXHRcdCAqICAgICAgICAgICAgXCJkYXRhXCI6IG51bGwsXHJcblx0XHQgKiAgICAgICAgICAgIFwiZGVmYXVsdENvbnRlbnRcIjogXCJFZGl0XCIsXHJcblx0XHQgKiAgICAgICAgICAgIFwidGFyZ2V0c1wiOiBbIC0xIF1cclxuXHRcdCAqICAgICAgICAgIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICB7XHJcblx0XHQgKiAgICAgICAgICAgIFwiZGF0YVwiOiBudWxsLFxyXG5cdFx0ICogICAgICAgICAgICBcImRlZmF1bHRDb250ZW50XCI6IFwiRWRpdFwiXHJcblx0XHQgKiAgICAgICAgICB9XHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwic0RlZmF1bHRDb250ZW50XCI6IG51bGwsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgcGFyYW1ldGVyIGlzIG9ubHkgdXNlZCBpbiBEYXRhVGFibGVzJyBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nLiBJdCBjYW5cclxuXHRcdCAqIGJlIGV4Y2VwdGlvbmFsbHkgdXNlZnVsIHRvIGtub3cgd2hhdCBjb2x1bW5zIGFyZSBiZWluZyBkaXNwbGF5ZWQgb24gdGhlXHJcblx0XHQgKiBjbGllbnQgc2lkZSwgYW5kIHRvIG1hcCB0aGVzZSB0byBkYXRhYmFzZSBmaWVsZHMuIFdoZW4gZGVmaW5lZCwgdGhlIG5hbWVzXHJcblx0XHQgKiBhbHNvIGFsbG93IERhdGFUYWJsZXMgdG8gcmVvcmRlciBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzZXJ2ZXIgaWYgaXQgY29tZXNcclxuXHRcdCAqIGJhY2sgaW4gYW4gdW5leHBlY3RlZCBvcmRlciAoaS5lLiBpZiB5b3Ugc3dpdGNoIHlvdXIgY29sdW1ucyBhcm91bmQgb24gdGhlXHJcblx0XHQgKiBjbGllbnQtc2lkZSwgeW91ciBzZXJ2ZXItc2lkZSBjb2RlIGRvZXMgbm90IGFsc28gbmVlZCB1cGRhdGluZykuXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgPGk+RW1wdHkgc3RyaW5nPC9pPlxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLm5hbWVcclxuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbkRlZnNgXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwiZW5naW5lXCIsIFwidGFyZ2V0c1wiOiBbIDAgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm5hbWVcIjogXCJicm93c2VyXCIsIFwidGFyZ2V0c1wiOiBbIDEgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm5hbWVcIjogXCJwbGF0Zm9ybVwiLCBcInRhcmdldHNcIjogWyAyIF0gfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwidmVyc2lvblwiLCBcInRhcmdldHNcIjogWyAzIF0gfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJuYW1lXCI6IFwiZ3JhZGVcIiwgXCJ0YXJnZXRzXCI6IFsgNCBdIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwibmFtZVwiOiBcImVuZ2luZVwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwibmFtZVwiOiBcImJyb3dzZXJcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm5hbWVcIjogXCJwbGF0Zm9ybVwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwibmFtZVwiOiBcInZlcnNpb25cIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm5hbWVcIjogXCJncmFkZVwiIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJzTmFtZVwiOiBcIlwiLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZWZpbmVzIGEgZGF0YSBzb3VyY2UgdHlwZSBmb3IgdGhlIG9yZGVyaW5nIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlYWRcclxuXHRcdCAqIHJlYWwtdGltZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSB0YWJsZSAodXBkYXRpbmcgdGhlIGludGVybmFsbHkgY2FjaGVkXHJcblx0XHQgKiB2ZXJzaW9uKSBwcmlvciB0byBvcmRlcmluZy4gVGhpcyBhbGxvd3Mgb3JkZXJpbmcgdG8gb2NjdXIgb24gdXNlclxyXG5cdFx0ICogZWRpdGFibGUgZWxlbWVudHMgc3VjaCBhcyBmb3JtIGlucHV0cy5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBzdGRcclxuXHRcdCAqXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi5vcmRlckRhdGFUeXBlXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhVHlwZVwiOiBcImRvbS10ZXh0XCIsIFwidGFyZ2V0c1wiOiBbIDIsIDMgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcInR5cGVcIjogXCJudW1lcmljXCIsIFwidGFyZ2V0c1wiOiBbIDMgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVR5cGVcIjogXCJkb20tc2VsZWN0XCIsIFwidGFyZ2V0c1wiOiBbIDQgXSB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVR5cGVcIjogXCJkb20tY2hlY2tib3hcIiwgXCJ0YXJnZXRzXCI6IFsgNSBdIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlckRhdGFUeXBlXCI6IFwiZG9tLXRleHRcIiB9LFxyXG5cdFx0ICogICAgICAgICAgeyBcIm9yZGVyRGF0YVR5cGVcIjogXCJkb20tdGV4dFwiLCBcInR5cGVcIjogXCJudW1lcmljXCIgfSxcclxuXHRcdCAqICAgICAgICAgIHsgXCJvcmRlckRhdGFUeXBlXCI6IFwiZG9tLXNlbGVjdFwiIH0sXHJcblx0XHQgKiAgICAgICAgICB7IFwib3JkZXJEYXRhVHlwZVwiOiBcImRvbS1jaGVja2JveFwiIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJzU29ydERhdGFUeXBlXCI6IFwic3RkXCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSB0aXRsZSBvZiB0aGlzIGNvbHVtbi5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsIDxpPkRlcml2ZWQgZnJvbSB0aGUgJ1RIJyB2YWx1ZSBmb3IgdGhpcyBjb2x1bW4gaW4gdGhlXHJcblx0XHQgKiAgICBvcmlnaW5hbCBIVE1MIHRhYmxlLjwvaT5cclxuXHRcdCAqXHJcblx0XHQgKiAgQG5hbWUgRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbi50aXRsZVxyXG5cdFx0ICogIEBkdG9wdCBDb2x1bW5zXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uRGVmc2BcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbkRlZnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiTXkgY29sdW1uIHRpdGxlXCIsIFwidGFyZ2V0c1wiOiBbIDAgXSB9XHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBVc2luZyBgY29sdW1uc2BcclxuXHRcdCAqICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHRcdCAqICAgICAgJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHtcclxuXHRcdCAqICAgICAgICBcImNvbHVtbnNcIjogW1xyXG5cdFx0ICogICAgICAgICAgeyBcInRpdGxlXCI6IFwiTXkgY29sdW1uIHRpdGxlXCIgfSxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGxcclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqL1xyXG5cdFx0XCJzVGl0bGVcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIHR5cGUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGhvdyB0aGUgZGF0YSBmb3IgdGhpcyBjb2x1bW4gd2lsbCBiZVxyXG5cdFx0ICogb3JkZXJlZC4gRm91ciB0eXBlcyAoc3RyaW5nLCBudW1lcmljLCBkYXRlIGFuZCBodG1sICh3aGljaCB3aWxsIHN0cmlwXHJcblx0XHQgKiBIVE1MIHRhZ3MgYmVmb3JlIG9yZGVyaW5nKSkgYXJlIGN1cnJlbnRseSBhdmFpbGFibGUuIE5vdGUgdGhhdCBvbmx5IGRhdGVcclxuXHRcdCAqIGZvcm1hdHMgdW5kZXJzdG9vZCBieSBKYXZhc2NyaXB0J3MgRGF0ZSgpIG9iamVjdCB3aWxsIGJlIGFjY2VwdGVkIGFzIHR5cGVcclxuXHRcdCAqIGRhdGUuIEZvciBleGFtcGxlOiBcIk1hciAyNiwgMjAwOCA1OjAzIFBNXCIuIE1heSB0YWtlIHRoZSB2YWx1ZXM6ICdzdHJpbmcnLFxyXG5cdFx0ICogJ251bWVyaWMnLCAnZGF0ZScgb3IgJ2h0bWwnIChieSBkZWZhdWx0KS4gRnVydGhlciB0eXBlcyBjYW4gYmUgYWRkaW5nXHJcblx0XHQgKiB0aHJvdWdoIHBsdWctaW5zLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGwgPGk+QXV0by1kZXRlY3RlZCBmcm9tIHJhdyBkYXRhPC9pPlxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLnR5cGVcclxuXHRcdCAqICBAZHRvcHQgQ29sdW1uc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbkRlZnNgXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5EZWZzXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHsgXCJ0eXBlXCI6IFwiaHRtbFwiLCBcInRhcmdldHNcIjogWyAwIF0gfVxyXG5cdFx0ICogICAgICAgIF1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gVXNpbmcgYGNvbHVtbnNgXHJcblx0XHQgKiAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0XHQgKiAgICAgICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7XHJcblx0XHQgKiAgICAgICAgXCJjb2x1bW5zXCI6IFtcclxuXHRcdCAqICAgICAgICAgIHsgXCJ0eXBlXCI6IFwiaHRtbFwiIH0sXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsXHJcblx0XHQgKiAgICAgICAgXVxyXG5cdFx0ICogICAgICB9ICk7XHJcblx0XHQgKiAgICB9ICk7XHJcblx0XHQgKi9cclxuXHRcdFwic1R5cGVcIjogbnVsbCxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGVmaW5pbmcgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4sIHRoaXMgcGFyYW1ldGVyIG1heSB0YWtlIGFueSBDU1MgdmFsdWVcclxuXHRcdCAqICgzZW0sIDIwcHggZXRjKS4gRGF0YVRhYmxlcyBhcHBsaWVzICdzbWFydCcgd2lkdGhzIHRvIGNvbHVtbnMgd2hpY2ggaGF2ZSBub3RcclxuXHRcdCAqIGJlZW4gZ2l2ZW4gYSBzcGVjaWZpYyB3aWR0aCB0aHJvdWdoIHRoaXMgaW50ZXJmYWNlIGVuc3VyaW5nIHRoYXQgdGhlIHRhYmxlXHJcblx0XHQgKiByZW1haW5zIHJlYWRhYmxlLlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGwgPGk+QXV0b21hdGljPC9pPlxyXG5cdFx0ICpcclxuXHRcdCAqICBAbmFtZSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uLndpZHRoXHJcblx0XHQgKiAgQGR0b3B0IENvbHVtbnNcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5EZWZzYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uRGVmc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwid2lkdGhcIjogXCIyMCVcIiwgXCJ0YXJnZXRzXCI6IFsgMCBdIH1cclxuXHRcdCAqICAgICAgICBdXHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH0gKTtcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFVzaW5nIGBjb2x1bW5zYFxyXG5cdFx0ICogICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICogICAgICAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSgge1xyXG5cdFx0ICogICAgICAgIFwiY29sdW1uc1wiOiBbXHJcblx0XHQgKiAgICAgICAgICB7IFwid2lkdGhcIjogXCIyMCVcIiB9LFxyXG5cdFx0ICogICAgICAgICAgbnVsbCxcclxuXHRcdCAqICAgICAgICAgIG51bGwsXHJcblx0XHQgKiAgICAgICAgICBudWxsLFxyXG5cdFx0ICogICAgICAgICAgbnVsbFxyXG5cdFx0ICogICAgICAgIF1cclxuXHRcdCAqICAgICAgfSApO1xyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRcInNXaWR0aFwiOiBudWxsXHJcblx0fTtcclxuXHRcclxuXHRfZm5IdW5nYXJpYW5NYXAoIERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4gKTtcclxuXHRcclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdCAtIHRoaXMgaG9sZHMgYWxsIHRoZSBpbmZvcm1hdGlvbiBuZWVkZWQgZm9yIGFcclxuXHQgKiBnaXZlbiB0YWJsZSwgaW5jbHVkaW5nIGNvbmZpZ3VyYXRpb24sIGRhdGEgYW5kIGN1cnJlbnQgYXBwbGljYXRpb24gb2YgdGhlXHJcblx0ICogdGFibGUgb3B0aW9ucy4gRGF0YVRhYmxlcyBkb2VzIG5vdCBoYXZlIGEgc2luZ2xlIGluc3RhbmNlIGZvciBlYWNoIERhdGFUYWJsZVxyXG5cdCAqIHdpdGggdGhlIHNldHRpbmdzIGF0dGFjaGVkIHRvIHRoYXQgaW5zdGFuY2UsIGJ1dCByYXRoZXIgaW5zdGFuY2VzIG9mIHRoZVxyXG5cdCAqIERhdGFUYWJsZSBcImNsYXNzXCIgYXJlIGNyZWF0ZWQgb24tdGhlLWZseSBhcyBuZWVkZWQgKHR5cGljYWxseSBieSBhXHJcblx0ICogJCgpLmRhdGFUYWJsZSgpIGNhbGwpIGFuZCB0aGUgc2V0dGluZ3Mgb2JqZWN0IGlzIHRoZW4gYXBwbGllZCB0byB0aGF0XHJcblx0ICogaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBOb3RlIHRoYXQgdGhpcyBvYmplY3QgaXMgcmVsYXRlZCB0byB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfSBidXQgdGhpc1xyXG5cdCAqIG9uZSBpcyB0aGUgaW50ZXJuYWwgZGF0YSBzdG9yZSBmb3IgRGF0YVRhYmxlcydzIGNhY2hlIG9mIGNvbHVtbnMuIEl0IHNob3VsZFxyXG5cdCAqIE5PVCBiZSBtYW5pcHVsYXRlZCBvdXRzaWRlIG9mIERhdGFUYWJsZXMuIEFueSBjb25maWd1cmF0aW9uIHNob3VsZCBiZSBkb25lXHJcblx0ICogdGhyb3VnaCB0aGUgaW5pdGlhbGlzYXRpb24gb3B0aW9ucy5cclxuXHQgKiAgQG5hbWVzcGFjZVxyXG5cdCAqICBAdG9kbyBSZWFsbHkgc2hvdWxkIGF0dGFjaCB0aGUgc2V0dGluZ3Mgb2JqZWN0IHRvIGluZGl2aWR1YWwgaW5zdGFuY2VzIHNvIHdlXHJcblx0ICogICAgZG9uJ3QgbmVlZCB0byBjcmVhdGUgbmV3IGluc3RhbmNlcyBvbiBlYWNoICQoKS5kYXRhVGFibGUoKSBjYWxsIChpZiB0aGVcclxuXHQgKiAgICB0YWJsZSBhbHJlYWR5IGV4aXN0cykuIEl0IHdvdWxkIGFsc28gc2F2ZSBwYXNzaW5nIG9TZXR0aW5ncyBhcm91bmQgYW5kXHJcblx0ICogICAgaW50byBldmVyeSBzaW5nbGUgZnVuY3Rpb24uIEhvd2V2ZXIsIHRoaXMgaXMgYSB2ZXJ5IHNpZ25pZmljYW50XHJcblx0ICogICAgYXJjaGl0ZWN0dXJlIGNoYW5nZSBmb3IgRGF0YVRhYmxlcyBhbmQgd2lsbCBhbG1vc3QgY2VydGFpbmx5IGJyZWFrXHJcblx0ICogICAgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBpbnN0YWxsYXRpb25zLiBUaGlzIGlzIHNvbWV0aGluZyB0aGF0XHJcblx0ICogICAgd2lsbCBiZSBkb25lIGluIDIuMC5cclxuXHQgKi9cclxuXHREYXRhVGFibGUubW9kZWxzLm9TZXR0aW5ncyA9IHtcclxuXHRcdC8qKlxyXG5cdFx0ICogUHJpbWFyeSBmZWF0dXJlcyBvZiBEYXRhVGFibGVzIGFuZCB0aGVpciBlbmFibGVtZW50IHN0YXRlLlxyXG5cdFx0ICogIEBuYW1lc3BhY2VcclxuXHRcdCAqL1xyXG5cdFx0XCJvRmVhdHVyZXNcIjoge1xyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRmxhZyB0byBzYXkgaWYgRGF0YVRhYmxlcyBzaG91bGQgYXV0b21hdGljYWxseSB0cnkgdG8gY2FsY3VsYXRlIHRoZVxyXG5cdFx0XHQgKiBvcHRpbXVtIHRhYmxlIGFuZCBjb2x1bW5zIHdpZHRocyAodHJ1ZSkgb3Igbm90IChmYWxzZSkuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJBdXRvV2lkdGhcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERlbGF5IHRoZSBjcmVhdGlvbiBvZiBUUiBhbmQgVEQgZWxlbWVudHMgdW50aWwgdGhleSBhcmUgYWN0dWFsbHlcclxuXHRcdFx0ICogbmVlZGVkIGJ5IGEgZHJpdmVuIHBhZ2UgZHJhdy4gVGhpcyBjYW4gZ2l2ZSBhIHNpZ25pZmljYW50IHNwZWVkXHJcblx0XHRcdCAqIGluY3JlYXNlIGZvciBBamF4IHNvdXJjZSBhbmQgSmF2YXNjcmlwdCBzb3VyY2UgZGF0YSwgYnV0IG1ha2VzIG5vXHJcblx0XHRcdCAqIGRpZmZlcmVuY2UgYXQgYWxsIGZybyBET00gYW5kIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcgdGFibGVzLlxyXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJiRGVmZXJSZW5kZXJcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEVuYWJsZSBmaWx0ZXJpbmcgb24gdGhlIHRhYmxlIG9yIG5vdC4gTm90ZSB0aGF0IGlmIHRoaXMgaXMgZGlzYWJsZWRcclxuXHRcdFx0ICogdGhlbiB0aGVyZSBpcyBubyBmaWx0ZXJpbmcgYXQgYWxsIG9uIHRoZSB0YWJsZSwgaW5jbHVkaW5nIGZuRmlsdGVyLlxyXG5cdFx0XHQgKiBUbyBqdXN0IHJlbW92ZSB0aGUgZmlsdGVyaW5nIGlucHV0IHVzZSBzRG9tIGFuZCByZW1vdmUgdGhlICdmJyBvcHRpb24uXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJGaWx0ZXJcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFRhYmxlIGluZm9ybWF0aW9uIGVsZW1lbnQgKHRoZSAnU2hvd2luZyB4IG9mIHkgcmVjb3JkcycgZGl2KSBlbmFibGVcclxuXHRcdFx0ICogZmxhZy5cclxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cclxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdFx0ICovXHJcblx0XHRcdFwiYkluZm9cIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFByZXNlbnQgYSB1c2VyIGNvbnRyb2wgYWxsb3dpbmcgdGhlIGVuZCB1c2VyIHRvIGNoYW5nZSB0aGUgcGFnZSBzaXplXHJcblx0XHRcdCAqIHdoZW4gcGFnaW5hdGlvbiBpcyBlbmFibGVkLlxyXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJiTGVuZ3RoQ2hhbmdlXCI6IG51bGwsXHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBQYWdpbmF0aW9uIGVuYWJsZWQgb3Igbm90LiBOb3RlIHRoYXQgaWYgdGhpcyBpcyBkaXNhYmxlZCB0aGVuIGxlbmd0aFxyXG5cdFx0XHQgKiBjaGFuZ2luZyBtdXN0IGFsc28gYmUgZGlzYWJsZWQuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJQYWdpbmF0ZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUHJvY2Vzc2luZyBpbmRpY2F0b3IgZW5hYmxlIGZsYWcgd2hlbmV2ZXIgRGF0YVRhYmxlcyBpcyBlbmFjdGluZyBhXHJcblx0XHRcdCAqIHVzZXIgcmVxdWVzdCAtIHR5cGljYWxseSBhbiBBamF4IHJlcXVlc3QgZm9yIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJQcm9jZXNzaW5nXCI6IG51bGwsXHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIGVuYWJsZWQgZmxhZyAtIHdoZW4gZW5hYmxlZCBEYXRhVGFibGVzIHdpbGxcclxuXHRcdFx0ICogZ2V0IGFsbCBkYXRhIGZyb20gdGhlIHNlcnZlciBmb3IgZXZlcnkgZHJhdyAtIHRoZXJlIGlzIG5vIGZpbHRlcmluZyxcclxuXHRcdFx0ICogc29ydGluZyBvciBwYWdpbmcgZG9uZSBvbiB0aGUgY2xpZW50LXNpZGUuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJTZXJ2ZXJTaWRlXCI6IG51bGwsXHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTb3J0aW5nIGVuYWJsZW1lbnQgZmxhZy5cclxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cclxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdFx0ICovXHJcblx0XHRcdFwiYlNvcnRcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIE11bHRpLWNvbHVtbiBzb3J0aW5nXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJTb3J0TXVsdGlcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEFwcGx5IGEgY2xhc3MgdG8gdGhlIGNvbHVtbnMgd2hpY2ggYXJlIGJlaW5nIHNvcnRlZCB0byBwcm92aWRlIGFcclxuXHRcdFx0ICogdmlzdWFsIGhpZ2hsaWdodCBvciBub3QuIFRoaXMgY2FuIHNsb3cgdGhpbmdzIGRvd24gd2hlbiBlbmFibGVkIHNpbmNlXHJcblx0XHRcdCAqIHRoZXJlIGlzIGEgbG90IG9mIERPTSBpbnRlcmFjdGlvbi5cclxuXHRcdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cclxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdFx0ICovXHJcblx0XHRcdFwiYlNvcnRDbGFzc2VzXCI6IG51bGwsXHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTdGF0ZSBzYXZpbmcgZW5hYmxlbWVudCBmbGFnLlxyXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0XCJiU3RhdGVTYXZlXCI6IG51bGxcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNjcm9sbGluZyBzZXR0aW5ncyBmb3IgYSB0YWJsZS5cclxuXHRcdCAqICBAbmFtZXNwYWNlXHJcblx0XHQgKi9cclxuXHRcdFwib1Njcm9sbFwiOiB7XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBXaGVuIHRoZSB0YWJsZSBpcyBzaG9ydGVyIGluIGhlaWdodCB0aGFuIHNTY3JvbGxZLCBjb2xsYXBzZSB0aGVcclxuXHRcdFx0ICogdGFibGUgY29udGFpbmVyIGRvd24gdG8gdGhlIGhlaWdodCBvZiB0aGUgdGFibGUgKHdoZW4gdHJ1ZSkuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJDb2xsYXBzZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogV2lkdGggb2YgdGhlIHNjcm9sbGJhciBmb3IgdGhlIHdlYi1icm93c2VyJ3MgcGxhdGZvcm0uIENhbGN1bGF0ZWRcclxuXHRcdFx0ICogZHVyaW5nIHRhYmxlIGluaXRpYWxpc2F0aW9uLlxyXG5cdFx0XHQgKiAgQHR5cGUgaW50XHJcblx0XHRcdCAqICBAZGVmYXVsdCAwXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImlCYXJXaWR0aFwiOiAwLFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVmlld3BvcnQgd2lkdGggZm9yIGhvcml6b250YWwgc2Nyb2xsaW5nLiBIb3Jpem9udGFsIHNjcm9sbGluZyBpc1xyXG5cdFx0XHQgKiBkaXNhYmxlZCBpZiBhbiBlbXB0eSBzdHJpbmcuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0ICovXHJcblx0XHRcdFwic1hcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFdpZHRoIHRvIGV4cGFuZCB0aGUgdGFibGUgdG8gd2hlbiB1c2luZyB4LXNjcm9sbGluZy4gVHlwaWNhbGx5IHlvdVxyXG5cdFx0XHQgKiBzaG91bGQgbm90IG5lZWQgdG8gdXNlIHRoaXMuXHJcblx0XHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdFx0ICogIEBkZXByZWNhdGVkXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNYSW5uZXJcIjogbnVsbCxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFZpZXdwb3J0IGhlaWdodCBmb3IgdmVydGljYWwgc2Nyb2xsaW5nLiBWZXJ0aWNhbCBzY3JvbGxpbmcgaXMgZGlzYWJsZWRcclxuXHRcdFx0ICogaWYgYW4gZW1wdHkgc3RyaW5nLlxyXG5cdFx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcInNZXCI6IG51bGxcclxuXHRcdH0sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIExhbmd1YWdlIGluZm9ybWF0aW9uIGZvciB0aGUgdGFibGUuXHJcblx0XHQgKiAgQG5hbWVzcGFjZVxyXG5cdFx0ICogIEBleHRlbmRzIERhdGFUYWJsZS5kZWZhdWx0cy5vTGFuZ3VhZ2VcclxuXHRcdCAqL1xyXG5cdFx0XCJvTGFuZ3VhZ2VcIjoge1xyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5mb3JtYXRpb24gY2FsbGJhY2sgZnVuY3Rpb24uIFNlZVxyXG5cdFx0XHQgKiB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzLmZuSW5mb0NhbGxiYWNrfVxyXG5cdFx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdFx0ICovXHJcblx0XHRcdFwiZm5JbmZvQ2FsbGJhY2tcIjogbnVsbFxyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQnJvd3NlciBzdXBwb3J0IHBhcmFtZXRlcnNcclxuXHRcdCAqICBAbmFtZXNwYWNlXHJcblx0XHQgKi9cclxuXHRcdFwib0Jyb3dzZXJcIjoge1xyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5kaWNhdGUgaWYgdGhlIGJyb3dzZXIgaW5jb3JyZWN0bHkgY2FsY3VsYXRlcyB3aWR0aDoxMDAlIGluc2lkZSBhXHJcblx0XHRcdCAqIHNjcm9sbGluZyBlbGVtZW50IChJRTYvNylcclxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJTY3JvbGxPdmVyc2l6ZVwiOiBmYWxzZSxcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERldGVybWluZSBpZiB0aGUgdmVydGljYWwgc2Nyb2xsYmFyIGlzIG9uIHRoZSByaWdodCBvciBsZWZ0IG9mIHRoZVxyXG5cdFx0XHQgKiBzY3JvbGxpbmcgY29udGFpbmVyIC0gbmVlZGVkIGZvciBydGwgbGFuZ3VhZ2UgbGF5b3V0LCBhbHRob3VnaCBub3RcclxuXHRcdFx0ICogYWxsIGJyb3dzZXJzIG1vdmUgdGhlIHNjcm9sbGJhciAoU2FmYXJpKS5cclxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRcImJTY3JvbGxiYXJMZWZ0XCI6IGZhbHNlLFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRmxhZyBmb3IgaWYgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgaXMgZnVsbHkgc3VwcG9ydGVkIG9yIG5vdFxyXG5cdFx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0XHQgKiAgQGRlZmF1bHQgZmFsc2VcclxuXHRcdFx0ICovXHJcblx0XHRcdFwiYkJvdW5kaW5nXCI6IGZhbHNlLFxyXG5cdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQnJvd3NlciBzY3JvbGxiYXIgd2lkdGhcclxuXHRcdFx0ICogIEB0eXBlIGludGVnZXJcclxuXHRcdFx0ICogIEBkZWZhdWx0IDBcclxuXHRcdFx0ICovXHJcblx0XHRcdFwiYmFyV2lkdGhcIjogMFxyXG5cdFx0fSxcclxuXHRcclxuXHRcclxuXHRcdFwiYWpheFwiOiBudWxsLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBcnJheSByZWZlcmVuY2luZyB0aGUgbm9kZXMgd2hpY2ggYXJlIHVzZWQgZm9yIHRoZSBmZWF0dXJlcy4gVGhlXHJcblx0XHQgKiBwYXJhbWV0ZXJzIG9mIHRoaXMgb2JqZWN0IG1hdGNoIHdoYXQgaXMgYWxsb3dlZCBieSBzRG9tIC0gaS5lLlxyXG5cdFx0ICogICA8dWw+XHJcblx0XHQgKiAgICAgPGxpPidsJyAtIExlbmd0aCBjaGFuZ2luZzwvbGk+XHJcblx0XHQgKiAgICAgPGxpPidmJyAtIEZpbHRlcmluZyBpbnB1dDwvbGk+XHJcblx0XHQgKiAgICAgPGxpPid0JyAtIFRoZSB0YWJsZSE8L2xpPlxyXG5cdFx0ICogICAgIDxsaT4naScgLSBJbmZvcm1hdGlvbjwvbGk+XHJcblx0XHQgKiAgICAgPGxpPidwJyAtIFBhZ2luYXRpb248L2xpPlxyXG5cdFx0ICogICAgIDxsaT4ncicgLSBwUm9jZXNzaW5nPC9saT5cclxuXHRcdCAqICAgPC91bD5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYWFuRmVhdHVyZXNcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3JlIGRhdGEgaW5mb3JtYXRpb24gLSBzZWUge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1Jvd30gZm9yIGRldGFpbGVkXHJcblx0XHQgKiBpbmZvcm1hdGlvbi5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYW9EYXRhXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBcnJheSBvZiBpbmRleGVzIHdoaWNoIGFyZSBpbiB0aGUgY3VycmVudCBkaXNwbGF5IChhZnRlciBmaWx0ZXJpbmcgZXRjKVxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhaURpc3BsYXlcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFycmF5IG9mIGluZGV4ZXMgZm9yIGRpc3BsYXkgLSBubyBmaWx0ZXJpbmdcclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYWlEaXNwbGF5TWFzdGVyXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBNYXAgb2Ygcm93IGlkcyB0byBkYXRhIGluZGV4ZXNcclxuXHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdCAqICBAZGVmYXVsdCB7fVxyXG5cdFx0ICovXHJcblx0XHRcImFJZHNcIjoge30sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3JlIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggY29sdW1uIHRoYXQgaXMgaW4gdXNlXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvQ29sdW1uc1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRhYmxlJ3MgaGVhZGVyXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvSGVhZGVyXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGFibGUncyBmb290ZXJcclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYW9Gb290ZXJcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3JlIHRoZSBhcHBsaWVkIGdsb2JhbCBzZWFyY2ggaW5mb3JtYXRpb24gaW4gY2FzZSB3ZSB3YW50IHRvIGZvcmNlIGFcclxuXHRcdCAqIHJlc2VhcmNoIG9yIGNvbXBhcmUgdGhlIG9sZCBzZWFyY2ggdG8gYSBuZXcgb25lLlxyXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHQgKiAgQG5hbWVzcGFjZVxyXG5cdFx0ICogIEBleHRlbmRzIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaFxyXG5cdFx0ICovXHJcblx0XHRcIm9QcmV2aW91c1NlYXJjaFwiOiB7fSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU3RvcmUgdGhlIGFwcGxpZWQgc2VhcmNoIGZvciBlYWNoIGNvbHVtbiAtIHNlZVxyXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaH0gZm9yIHRoZSBmb3JtYXQgdGhhdCBpcyB1c2VkIGZvciB0aGVcclxuXHRcdCAqIGZpbHRlcmluZyBpbmZvcm1hdGlvbiBmb3IgZWFjaCBjb2x1bW4uXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvUHJlU2VhcmNoQ29sc1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU29ydGluZyB0aGF0IGlzIGFwcGxpZWQgdG8gdGhlIHRhYmxlLiBOb3RlIHRoYXQgdGhlIGlubmVyIGFycmF5cyBhcmVcclxuXHRcdCAqIHVzZWQgaW4gdGhlIGZvbGxvd2luZyBtYW5uZXI6XHJcblx0XHQgKiA8dWw+XHJcblx0XHQgKiAgIDxsaT5JbmRleCAwIC0gY29sdW1uIG51bWJlcjwvbGk+XHJcblx0XHQgKiAgIDxsaT5JbmRleCAxIC0gY3VycmVudCBzb3J0aW5nIGRpcmVjdGlvbjwvbGk+XHJcblx0XHQgKiA8L3VsPlxyXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAdG9kbyBUaGVzZSBpbm5lciBhcnJheXMgc2hvdWxkIHJlYWxseSBiZSBvYmplY3RzXHJcblx0XHQgKi9cclxuXHRcdFwiYWFTb3J0aW5nXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNvcnRpbmcgdGhhdCBpcyBhbHdheXMgYXBwbGllZCB0byB0aGUgdGFibGUgKGkuZS4gcHJlZml4ZWQgaW4gZnJvbnQgb2ZcclxuXHRcdCAqIGFhU29ydGluZykuXHJcblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYWFTb3J0aW5nRml4ZWRcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENsYXNzZXMgdG8gdXNlIGZvciB0aGUgc3RyaXBpbmcgb2YgYSB0YWJsZS5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhc1N0cmlwZUNsYXNzZXNcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogSWYgcmVzdG9yaW5nIGEgdGFibGUgLSB3ZSBzaG91bGQgcmVzdG9yZSBpdHMgc3RyaXBpbmcgY2xhc3NlcyBhcyB3ZWxsXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFzRGVzdHJveVN0cmlwZXNcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIElmIHJlc3RvcmluZyBhIHRhYmxlIC0gd2Ugc2hvdWxkIHJlc3RvcmUgaXRzIHdpZHRoXHJcblx0XHQgKiAgQHR5cGUgaW50XHJcblx0XHQgKiAgQGRlZmF1bHQgMFxyXG5cdFx0ICovXHJcblx0XHRcInNEZXN0cm95V2lkdGhcIjogMCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsbGJhY2sgZnVuY3Rpb25zIGFycmF5IGZvciBldmVyeSB0aW1lIGEgcm93IGlzIGluc2VydGVkIChpLmUuIG9uIGEgZHJhdykuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvUm93Q2FsbGJhY2tcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgdGhlIGhlYWRlciBvbiBlYWNoIGRyYXcuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvSGVhZGVyQ2FsbGJhY2tcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgZm9vdGVyIG9uIGVhY2ggZHJhdy5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYW9Gb290ZXJDYWxsYmFja1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQXJyYXkgb2YgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciBkcmF3IGNhbGxiYWNrIGZ1bmN0aW9uc1xyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhb0RyYXdDYWxsYmFja1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQXJyYXkgb2YgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciByb3cgY3JlYXRlZCBmdW5jdGlvblxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhb1Jvd0NyZWF0ZWRDYWxsYmFja1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsbGJhY2sgZnVuY3Rpb25zIGZvciBqdXN0IGJlZm9yZSB0aGUgdGFibGUgaXMgcmVkcmF3bi4gQSByZXR1cm4gb2ZcclxuXHRcdCAqIGZhbHNlIHdpbGwgYmUgdXNlZCB0byBjYW5jZWwgdGhlIGRyYXcuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvUHJlRHJhd0NhbGxiYWNrXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWxsYmFjayBmdW5jdGlvbnMgZm9yIHdoZW4gdGhlIHRhYmxlIGhhcyBiZWVuIGluaXRpYWxpc2VkLlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhb0luaXRDb21wbGV0ZVwiOiBbXSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsbGJhY2tzIGZvciBtb2RpZnlpbmcgdGhlIHNldHRpbmdzIHRvIGJlIHN0b3JlZCBmb3Igc3RhdGUgc2F2aW5nLCBwcmlvciB0b1xyXG5cdFx0ICogc2F2aW5nIHN0YXRlLlxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhb1N0YXRlU2F2ZVBhcmFtc1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsbGJhY2tzIGZvciBtb2RpZnlpbmcgdGhlIHNldHRpbmdzIHRoYXQgaGF2ZSBiZWVuIHN0b3JlZCBmb3Igc3RhdGUgc2F2aW5nXHJcblx0XHQgKiBwcmlvciB0byB1c2luZyB0aGUgc3RvcmVkIHZhbHVlcyB0byByZXN0b3JlIHRoZSBzdGF0ZS5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYW9TdGF0ZUxvYWRQYXJhbXNcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIENhbGxiYWNrcyBmb3Igb3BlcmF0aW5nIG9uIHRoZSBzZXR0aW5ncyBvYmplY3Qgb25jZSB0aGUgc2F2ZWQgc3RhdGUgaGFzIGJlZW5cclxuXHRcdCAqIGxvYWRlZFxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhb1N0YXRlTG9hZGVkXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWNoZSB0aGUgdGFibGUgSUQgZm9yIHF1aWNrIGFjY2Vzc1xyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IDxpPkVtcHR5IHN0cmluZzwvaT5cclxuXHRcdCAqL1xyXG5cdFx0XCJzVGFibGVJZFwiOiBcIlwiLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgVEFCTEUgbm9kZSBmb3IgdGhlIG1haW4gdGFibGVcclxuXHRcdCAqICBAdHlwZSBub2RlXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcIm5UYWJsZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBQZXJtYW5lbnQgcmVmIHRvIHRoZSB0aGVhZCBlbGVtZW50XHJcblx0XHQgKiAgQHR5cGUgbm9kZVxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJuVEhlYWRcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogUGVybWFuZW50IHJlZiB0byB0aGUgdGZvb3QgZWxlbWVudCAtIGlmIGl0IGV4aXN0c1xyXG5cdFx0ICogIEB0eXBlIG5vZGVcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwiblRGb290XCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFBlcm1hbmVudCByZWYgdG8gdGhlIHRib2R5IGVsZW1lbnRcclxuXHRcdCAqICBAdHlwZSBub2RlXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcIm5UQm9keVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWNoZSB0aGUgd3JhcHBlciBub2RlIChjb250YWlucyBhbGwgRGF0YVRhYmxlcyBjb250cm9sbGVkIGVsZW1lbnRzKVxyXG5cdFx0ICogIEB0eXBlIG5vZGVcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwiblRhYmxlV3JhcHBlclwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbmRpY2F0ZSBpZiB3aGVuIHVzaW5nIHNlcnZlci1zaWRlIHByb2Nlc3NpbmcgdGhlIGxvYWRpbmcgb2YgZGF0YVxyXG5cdFx0ICogc2hvdWxkIGJlIGRlZmVycmVkIHVudGlsIHRoZSBzZWNvbmQgZHJhdy5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCBmYWxzZVxyXG5cdFx0ICovXHJcblx0XHRcImJEZWZlckxvYWRpbmdcIjogZmFsc2UsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEluZGljYXRlIGlmIGFsbCByZXF1aXJlZCBpbmZvcm1hdGlvbiBoYXMgYmVlbiByZWFkIGluXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHQgKi9cclxuXHRcdFwiYkluaXRpYWxpc2VkXCI6IGZhbHNlLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbmZvcm1hdGlvbiBhYm91dCBvcGVuIHJvd3MuIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheSBoYXMgdGhlIHBhcmFtZXRlcnNcclxuXHRcdCAqICduVHInIGFuZCAnblBhcmVudCdcclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYW9PcGVuUm93c1wiOiBbXSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGljdGF0ZSB0aGUgcG9zaXRpb25pbmcgb2YgRGF0YVRhYmxlcycgY29udHJvbCBlbGVtZW50cyAtIHNlZVxyXG5cdFx0ICoge0BsaW5rIERhdGFUYWJsZS5tb2RlbC5vSW5pdC5zRG9tfS5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJzRG9tXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNlYXJjaCBkZWxheSAoaW4gbVMpXHJcblx0XHQgKiAgQHR5cGUgaW50ZWdlclxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJzZWFyY2hEZWxheVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBXaGljaCB0eXBlIG9mIHBhZ2luYXRpb24gc2hvdWxkIGJlIHVzZWQuXHJcblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVmYXVsdCB0d29fYnV0dG9uXHJcblx0XHQgKi9cclxuXHRcdFwic1BhZ2luYXRpb25UeXBlXCI6IFwidHdvX2J1dHRvblwiLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgc3RhdGUgZHVyYXRpb24gKGZvciBgc3RhdGVTYXZlYCkgaW4gc2Vjb25kcy5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIGludFxyXG5cdFx0ICogIEBkZWZhdWx0IDBcclxuXHRcdCAqL1xyXG5cdFx0XCJpU3RhdGVEdXJhdGlvblwiOiAwLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBcnJheSBvZiBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIHN0YXRlIHNhdmluZy4gRWFjaCBhcnJheSBlbGVtZW50IGlzIGFuXHJcblx0XHQgKiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XHJcblx0XHQgKiAgIDx1bD5cclxuXHRcdCAqICAgICA8bGk+ZnVuY3Rpb246Zm4gLSBmdW5jdGlvbiB0byBjYWxsLiBUYWtlcyB0d28gcGFyYW1ldGVycywgb1NldHRpbmdzXHJcblx0XHQgKiAgICAgICBhbmQgdGhlIEpTT04gc3RyaW5nIHRvIHNhdmUgdGhhdCBoYXMgYmVlbiB0aHVzIGZhciBjcmVhdGVkLiBSZXR1cm5zXHJcblx0XHQgKiAgICAgICBhIEpTT04gc3RyaW5nIHRvIGJlIGluc2VydGVkIGludG8gYSBqc29uIG9iamVjdFxyXG5cdFx0ICogICAgICAgKGkuZS4gJ1wicGFyYW1cIjogWyAwLCAxLCAyXScpPC9saT5cclxuXHRcdCAqICAgICA8bGk+c3RyaW5nOnNOYW1lIC0gbmFtZSBvZiBjYWxsYmFjazwvbGk+XHJcblx0XHQgKiAgIDwvdWw+XHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvU3RhdGVTYXZlXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBcnJheSBvZiBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIHN0YXRlIGxvYWRpbmcuIEVhY2ggYXJyYXkgZWxlbWVudCBpcyBhblxyXG5cdFx0ICogb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxyXG5cdFx0ICogICA8dWw+XHJcblx0XHQgKiAgICAgPGxpPmZ1bmN0aW9uOmZuIC0gZnVuY3Rpb24gdG8gY2FsbC4gVGFrZXMgdHdvIHBhcmFtZXRlcnMsIG9TZXR0aW5nc1xyXG5cdFx0ICogICAgICAgYW5kIHRoZSBvYmplY3Qgc3RvcmVkLiBNYXkgcmV0dXJuIGZhbHNlIHRvIGNhbmNlbCBzdGF0ZSBsb2FkaW5nPC9saT5cclxuXHRcdCAqICAgICA8bGk+c3RyaW5nOnNOYW1lIC0gbmFtZSBvZiBjYWxsYmFjazwvbGk+XHJcblx0XHQgKiAgIDwvdWw+XHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvU3RhdGVMb2FkXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTdGF0ZSB0aGF0IHdhcyBzYXZlZC4gVXNlZnVsIGZvciBiYWNrIHJlZmVyZW5jZVxyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJvU2F2ZWRTdGF0ZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTdGF0ZSB0aGF0IHdhcyBsb2FkZWQuIFVzZWZ1bCBmb3IgYmFjayByZWZlcmVuY2VcclxuXHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdCAqICBAZGVmYXVsdCBudWxsXHJcblx0XHQgKi9cclxuXHRcdFwib0xvYWRlZFN0YXRlXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNvdXJjZSB1cmwgZm9yIEFKQVggZGF0YSBmb3IgdGhlIHRhYmxlLlxyXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcInNBamF4U291cmNlXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFByb3BlcnR5IGZyb20gYSBnaXZlbiBvYmplY3QgZnJvbSB3aGljaCB0byByZWFkIHRoZSB0YWJsZSBkYXRhIGZyb20uIFRoaXNcclxuXHRcdCAqIGNhbiBiZSBhbiBlbXB0eSBzdHJpbmcgKHdoZW4gbm90IHNlcnZlci1zaWRlIHByb2Nlc3NpbmcpLCBpbiB3aGljaCBjYXNlXHJcblx0XHQgKiBpdCBpcyAgYXNzdW1lZCBhbiBhbiBhcnJheSBpcyBnaXZlbiBkaXJlY3RseS5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIHN0cmluZ1xyXG5cdFx0ICovXHJcblx0XHRcInNBamF4RGF0YVByb3BcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogTm90ZSBpZiBkcmF3IHNob3VsZCBiZSBibG9ja2VkIHdoaWxlIGdldHRpbmcgZGF0YVxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqICBAZGVmYXVsdCB0cnVlXHJcblx0XHQgKi9cclxuXHRcdFwiYkFqYXhEYXRhR2V0XCI6IHRydWUsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBsYXN0IGpRdWVyeSBYSFIgb2JqZWN0IHRoYXQgd2FzIHVzZWQgZm9yIHNlcnZlci1zaWRlIGRhdGEgZ2F0aGVyaW5nLlxyXG5cdFx0ICogVGhpcyBjYW4gYmUgdXNlZCBmb3Igd29ya2luZyB3aXRoIHRoZSBYSFIgaW5mb3JtYXRpb24gaW4gb25lIG9mIHRoZVxyXG5cdFx0ICogY2FsbGJhY2tzXHJcblx0XHQgKiAgQHR5cGUgb2JqZWN0XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcImpxWEhSXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEpTT04gcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGluIHRoZSBsYXN0IEFqYXggcmVxdWVzdFxyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxyXG5cdFx0ICogIEBkZWZhdWx0IHVuZGVmaW5lZFxyXG5cdFx0ICovXHJcblx0XHRcImpzb25cIjogdW5kZWZpbmVkLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEYXRhIHN1Ym1pdHRlZCBhcyBwYXJ0IG9mIHRoZSBsYXN0IEFqYXggcmVxdWVzdFxyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxyXG5cdFx0ICogIEBkZWZhdWx0IHVuZGVmaW5lZFxyXG5cdFx0ICovXHJcblx0XHRcIm9BamF4RGF0YVwiOiB1bmRlZmluZWQsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZ1bmN0aW9uIHRvIGdldCB0aGUgc2VydmVyLXNpZGUgZGF0YS5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKi9cclxuXHRcdFwiZm5TZXJ2ZXJEYXRhXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZ1bmN0aW9ucyB3aGljaCBhcmUgY2FsbGVkIHByaW9yIHRvIHNlbmRpbmcgYW4gQWpheCByZXF1ZXN0IHNvIGV4dHJhXHJcblx0XHQgKiBwYXJhbWV0ZXJzIGNhbiBlYXNpbHkgYmUgc2VudCB0byB0aGUgc2VydmVyXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvU2VydmVyUGFyYW1zXCI6IFtdLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTZW5kIHRoZSBYSFIgSFRUUCBtZXRob2QgLSBHRVQgb3IgUE9TVCAoY291bGQgYmUgUFVUIG9yIERFTEVURSBpZlxyXG5cdFx0ICogcmVxdWlyZWQpLlxyXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdFwic1NlcnZlck1ldGhvZFwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGb3JtYXQgbnVtYmVycyBmb3IgZGlzcGxheS5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKi9cclxuXHRcdFwiZm5Gb3JtYXROdW1iZXJcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogTGlzdCBvZiBvcHRpb25zIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHRoZSB1c2VyIHNlbGVjdGFibGUgbGVuZ3RoIG1lbnUuXHJcblx0XHQgKiBOb3RlIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBzZXQgYnkgdGhlIGluaXRpYWxpc2F0aW9uIHJvdXRpbmUuIFRvXHJcblx0XHQgKiBzZXQgYSBkZWZhdWx0IHVzZSB7QGxpbmsgRGF0YVRhYmxlLmRlZmF1bHRzfS5cclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKi9cclxuXHRcdFwiYUxlbmd0aE1lbnVcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ291bnRlciBmb3IgdGhlIGRyYXdzIHRoYXQgdGhlIHRhYmxlIGRvZXMuIEFsc28gdXNlZCBhcyBhIHRyYWNrZXIgZm9yXHJcblx0XHQgKiBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nXHJcblx0XHQgKiAgQHR5cGUgaW50XHJcblx0XHQgKiAgQGRlZmF1bHQgMFxyXG5cdFx0ICovXHJcblx0XHRcImlEcmF3XCI6IDAsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEluZGljYXRlIGlmIGEgcmVkcmF3IGlzIGJlaW5nIGRvbmUgLSB1c2VmdWwgZm9yIEFqYXhcclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgZmFsc2VcclxuXHRcdCAqL1xyXG5cdFx0XCJiRHJhd2luZ1wiOiBmYWxzZSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRHJhdyBpbmRleCAoaURyYXcpIG9mIHRoZSBsYXN0IGVycm9yIHdoZW4gcGFyc2luZyB0aGUgcmV0dXJuZWQgZGF0YVxyXG5cdFx0ICogIEB0eXBlIGludFxyXG5cdFx0ICogIEBkZWZhdWx0IC0xXHJcblx0XHQgKi9cclxuXHRcdFwiaURyYXdFcnJvclwiOiAtMSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogUGFnaW5nIGRpc3BsYXkgbGVuZ3RoXHJcblx0XHQgKiAgQHR5cGUgaW50XHJcblx0XHQgKiAgQGRlZmF1bHQgMTBcclxuXHRcdCAqL1xyXG5cdFx0XCJfaURpc3BsYXlMZW5ndGhcIjogMTAsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFBhZ2luZyBzdGFydCBwb2ludCAtIGFpRGlzcGxheSBpbmRleFxyXG5cdFx0ICogIEB0eXBlIGludFxyXG5cdFx0ICogIEBkZWZhdWx0IDBcclxuXHRcdCAqL1xyXG5cdFx0XCJfaURpc3BsYXlTdGFydFwiOiAwLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIC0gbnVtYmVyIG9mIHJlY29yZHMgaW4gdGhlIHJlc3VsdCBzZXRcclxuXHRcdCAqIChpLmUuIGJlZm9yZSBmaWx0ZXJpbmcpLCBVc2UgZm5SZWNvcmRzVG90YWwgcmF0aGVyIHRoYW5cclxuXHRcdCAqIHRoaXMgcHJvcGVydHkgdG8gZ2V0IHRoZSB2YWx1ZSBvZiB0aGUgbnVtYmVyIG9mIHJlY29yZHMsIHJlZ2FyZGxlc3Mgb2ZcclxuXHRcdCAqIHRoZSBzZXJ2ZXItc2lkZSBwcm9jZXNzaW5nIHNldHRpbmcuXHJcblx0XHQgKiAgQHR5cGUgaW50XHJcblx0XHQgKiAgQGRlZmF1bHQgMFxyXG5cdFx0ICogIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdFwiX2lSZWNvcmRzVG90YWxcIjogMCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU2VydmVyLXNpZGUgcHJvY2Vzc2luZyAtIG51bWJlciBvZiByZWNvcmRzIGluIHRoZSBjdXJyZW50IGRpc3BsYXkgc2V0XHJcblx0XHQgKiAoaS5lLiBhZnRlciBmaWx0ZXJpbmcpLiBVc2UgZm5SZWNvcmRzRGlzcGxheSByYXRoZXIgdGhhblxyXG5cdFx0ICogdGhpcyBwcm9wZXJ0eSB0byBnZXQgdGhlIHZhbHVlIG9mIHRoZSBudW1iZXIgb2YgcmVjb3JkcywgcmVnYXJkbGVzcyBvZlxyXG5cdFx0ICogdGhlIHNlcnZlci1zaWRlIHByb2Nlc3Npbmcgc2V0dGluZy5cclxuXHRcdCAqICBAdHlwZSBib29sZWFuXHJcblx0XHQgKiAgQGRlZmF1bHQgMFxyXG5cdFx0ICogIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdFwiX2lSZWNvcmRzRGlzcGxheVwiOiAwLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGbGFnIHRvIGluZGljYXRlIGlmIGpRdWVyeSBVSSBtYXJraW5nIGFuZCBjbGFzc2VzIHNob3VsZCBiZSB1c2VkLlxyXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgc2V0IGJ5IHRoZSBpbml0aWFsaXNhdGlvbiByb3V0aW5lLiBUb1xyXG5cdFx0ICogc2V0IGEgZGVmYXVsdCB1c2Uge0BsaW5rIERhdGFUYWJsZS5kZWZhdWx0c30uXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICovXHJcblx0XHRcImJKVUlcIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGNsYXNzZXMgdG8gdXNlIGZvciB0aGUgdGFibGVcclxuXHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdCAqICBAZGVmYXVsdCB7fVxyXG5cdFx0ICovXHJcblx0XHRcIm9DbGFzc2VzXCI6IHt9LFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGbGFnIGF0dGFjaGVkIHRvIHRoZSBzZXR0aW5ncyBvYmplY3Qgc28geW91IGNhbiBjaGVjayBpbiB0aGUgZHJhd1xyXG5cdFx0ICogY2FsbGJhY2sgaWYgZmlsdGVyaW5nIGhhcyBiZWVuIGRvbmUgaW4gdGhlIGRyYXcuIERlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mXHJcblx0XHQgKiBldmVudHMuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWRcclxuXHRcdCAqL1xyXG5cdFx0XCJiRmlsdGVyZWRcIjogZmFsc2UsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZsYWcgYXR0YWNoZWQgdG8gdGhlIHNldHRpbmdzIG9iamVjdCBzbyB5b3UgY2FuIGNoZWNrIGluIHRoZSBkcmF3XHJcblx0XHQgKiBjYWxsYmFjayBpZiBzb3J0aW5nIGhhcyBiZWVuIGRvbmUgaW4gdGhlIGRyYXcuIERlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mXHJcblx0XHQgKiBldmVudHMuXHJcblx0XHQgKiAgQHR5cGUgYm9vbGVhblxyXG5cdFx0ICogIEBkZWZhdWx0IGZhbHNlXHJcblx0XHQgKiAgQGRlcHJlY2F0ZWRcclxuXHRcdCAqL1xyXG5cdFx0XCJiU29ydGVkXCI6IGZhbHNlLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbmRpY2F0ZSB0aGF0IGlmIG11bHRpcGxlIHJvd3MgYXJlIGluIHRoZSBoZWFkZXIgYW5kIHRoZXJlIGlzIG1vcmUgdGhhblxyXG5cdFx0ICogb25lIHVuaXF1ZSBjZWxsIHBlciBjb2x1bW4sIGlmIHRoZSB0b3Agb25lICh0cnVlKSBvciBib3R0b20gb25lIChmYWxzZSlcclxuXHRcdCAqIHNob3VsZCBiZSB1c2VkIGZvciBzb3J0aW5nIC8gdGl0bGUgYnkgRGF0YVRhYmxlcy5cclxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHNldCBieSB0aGUgaW5pdGlhbGlzYXRpb24gcm91dGluZS4gVG9cclxuXHRcdCAqIHNldCBhIGRlZmF1bHQgdXNlIHtAbGluayBEYXRhVGFibGUuZGVmYXVsdHN9LlxyXG5cdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdCAqL1xyXG5cdFx0XCJiU29ydENlbGxzVG9wXCI6IG51bGwsXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEluaXRpYWxpc2F0aW9uIG9iamVjdCB0aGF0IGlzIHVzZWQgZm9yIHRoZSB0YWJsZVxyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxyXG5cdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdCAqL1xyXG5cdFx0XCJvSW5pdFwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZXN0cm95IGNhbGxiYWNrIGZ1bmN0aW9ucyAtIGZvciBwbHVnLWlucyB0byBhdHRhY2ggdGhlbXNlbHZlcyB0byB0aGVcclxuXHRcdCAqIGRlc3Ryb3kgc28gdGhleSBjYW4gY2xlYW4gdXAgbWFya3VwIGFuZCBldmVudHMuXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqICBAZGVmYXVsdCBbXVxyXG5cdFx0ICovXHJcblx0XHRcImFvRGVzdHJveUNhbGxiYWNrXCI6IFtdLFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgdGhlIG51bWJlciBvZiByZWNvcmRzIGluIHRoZSBjdXJyZW50IHJlY29yZCBzZXQsIGJlZm9yZSBmaWx0ZXJpbmdcclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxyXG5cdFx0ICovXHJcblx0XHRcImZuUmVjb3Jkc1RvdGFsXCI6IGZ1bmN0aW9uICgpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBfZm5EYXRhU291cmNlKCB0aGlzICkgPT0gJ3NzcCcgP1xyXG5cdFx0XHRcdHRoaXMuX2lSZWNvcmRzVG90YWwgKiAxIDpcclxuXHRcdFx0XHR0aGlzLmFpRGlzcGxheU1hc3Rlci5sZW5ndGg7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgdGhlIG51bWJlciBvZiByZWNvcmRzIGluIHRoZSBjdXJyZW50IHJlY29yZCBzZXQsIGFmdGVyIGZpbHRlcmluZ1xyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKi9cclxuXHRcdFwiZm5SZWNvcmRzRGlzcGxheVwiOiBmdW5jdGlvbiAoKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gX2ZuRGF0YVNvdXJjZSggdGhpcyApID09ICdzc3AnID9cclxuXHRcdFx0XHR0aGlzLl9pUmVjb3Jkc0Rpc3BsYXkgKiAxIDpcclxuXHRcdFx0XHR0aGlzLmFpRGlzcGxheS5sZW5ndGg7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgdGhlIGRpc3BsYXkgZW5kIHBvaW50IC0gYWlEaXNwbGF5IGluZGV4XHJcblx0XHQgKiAgQHR5cGUgZnVuY3Rpb25cclxuXHRcdCAqL1xyXG5cdFx0XCJmbkRpc3BsYXlFbmRcIjogZnVuY3Rpb24gKClcclxuXHRcdHtcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0bGVuICAgICAgPSB0aGlzLl9pRGlzcGxheUxlbmd0aCxcclxuXHRcdFx0XHRzdGFydCAgICA9IHRoaXMuX2lEaXNwbGF5U3RhcnQsXHJcblx0XHRcdFx0Y2FsYyAgICAgPSBzdGFydCArIGxlbixcclxuXHRcdFx0XHRyZWNvcmRzICA9IHRoaXMuYWlEaXNwbGF5Lmxlbmd0aCxcclxuXHRcdFx0XHRmZWF0dXJlcyA9IHRoaXMub0ZlYXR1cmVzLFxyXG5cdFx0XHRcdHBhZ2luYXRlID0gZmVhdHVyZXMuYlBhZ2luYXRlO1xyXG5cdFxyXG5cdFx0XHRpZiAoIGZlYXR1cmVzLmJTZXJ2ZXJTaWRlICkge1xyXG5cdFx0XHRcdHJldHVybiBwYWdpbmF0ZSA9PT0gZmFsc2UgfHwgbGVuID09PSAtMSA/XHJcblx0XHRcdFx0XHRzdGFydCArIHJlY29yZHMgOlxyXG5cdFx0XHRcdFx0TWF0aC5taW4oIHN0YXJ0K2xlbiwgdGhpcy5faVJlY29yZHNEaXNwbGF5ICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuICEgcGFnaW5hdGUgfHwgY2FsYz5yZWNvcmRzIHx8IGxlbj09PS0xID9cclxuXHRcdFx0XHRcdHJlY29yZHMgOlxyXG5cdFx0XHRcdFx0Y2FsYztcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIERhdGFUYWJsZXMgb2JqZWN0IGZvciB0aGlzIHRhYmxlXHJcblx0XHQgKiAgQHR5cGUgb2JqZWN0XHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcIm9JbnN0YW5jZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgZWFjaCBpbnN0YW5jZSBvZiB0aGUgRGF0YVRhYmxlcyBvYmplY3QuIElmIHRoZXJlXHJcblx0XHQgKiBpcyBhbiBJRCBvbiB0aGUgdGFibGUgbm9kZSwgdGhlbiBpdCB0YWtlcyB0aGF0IHZhbHVlLCBvdGhlcndpc2UgYW5cclxuXHRcdCAqIGluY3JlbWVudGluZyBpbnRlcm5hbCBjb3VudGVyIGlzIHVzZWQuXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcInNJbnN0YW5jZVwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiB0YWJpbmRleCBhdHRyaWJ1dGUgdmFsdWUgdGhhdCBpcyBhZGRlZCB0byBEYXRhVGFibGVzIGNvbnRyb2wgZWxlbWVudHMsIGFsbG93aW5nXHJcblx0XHQgKiBrZXlib2FyZCBuYXZpZ2F0aW9uIG9mIHRoZSB0YWJsZSBhbmQgaXRzIGNvbnRyb2xzLlxyXG5cdFx0ICovXHJcblx0XHRcImlUYWJJbmRleFwiOiAwLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBESVYgY29udGFpbmVyIGZvciB0aGUgZm9vdGVyIHNjcm9sbGluZyB0YWJsZSBpZiBzY3JvbGxpbmdcclxuXHRcdCAqL1xyXG5cdFx0XCJuU2Nyb2xsSGVhZFwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBESVYgY29udGFpbmVyIGZvciB0aGUgZm9vdGVyIHNjcm9sbGluZyB0YWJsZSBpZiBzY3JvbGxpbmdcclxuXHRcdCAqL1xyXG5cdFx0XCJuU2Nyb2xsRm9vdFwiOiBudWxsLFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBMYXN0IGFwcGxpZWQgc29ydFxyXG5cdFx0ICogIEB0eXBlIGFycmF5XHJcblx0XHQgKiAgQGRlZmF1bHQgW11cclxuXHRcdCAqL1xyXG5cdFx0XCJhTGFzdFNvcnRcIjogW10sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3JlZCBwbHVnLWluIGluc3RhbmNlc1xyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxyXG5cdFx0ICogIEBkZWZhdWx0IHt9XHJcblx0XHQgKi9cclxuXHRcdFwib1BsdWdpbnNcIjoge30sXHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGEgcm93J3MgaWQgZnJvbSB0aGUgcm93J3MgZGF0YVxyXG5cdFx0ICogIEB0eXBlIGZ1bmN0aW9uXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcInJvd0lkRm5cIjogbnVsbCxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGF0YSBsb2NhdGlvbiB3aGVyZSB0byBzdG9yZSBhIHJvdydzIGlkXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKiAgQGRlZmF1bHQgbnVsbFxyXG5cdFx0ICovXHJcblx0XHRcInJvd0lkXCI6IG51bGxcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBFeHRlbnNpb24gb2JqZWN0IGZvciBEYXRhVGFibGVzIHRoYXQgaXMgdXNlZCB0byBwcm92aWRlIGFsbCBleHRlbnNpb25cclxuXHQgKiBvcHRpb25zLlxyXG5cdCAqXHJcblx0ICogTm90ZSB0aGF0IHRoZSBgRGF0YVRhYmxlLmV4dGAgb2JqZWN0IGlzIGF2YWlsYWJsZSB0aHJvdWdoXHJcblx0ICogYGpRdWVyeS5mbi5kYXRhVGFibGUuZXh0YCB3aGVyZSBpdCBtYXkgYmUgYWNjZXNzZWQgYW5kIG1hbmlwdWxhdGVkLiBJdCBpc1xyXG5cdCAqIGFsc28gYWxpYXNlZCB0byBgalF1ZXJ5LmZuLmRhdGFUYWJsZUV4dGAgZm9yIGhpc3RvcmljIHJlYXNvbnMuXHJcblx0ICogIEBuYW1lc3BhY2VcclxuXHQgKiAgQGV4dGVuZHMgRGF0YVRhYmxlLm1vZGVscy5leHRcclxuXHQgKi9cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBEYXRhVGFibGVzIGV4dGVuc2lvbnNcclxuXHQgKiBcclxuXHQgKiBUaGlzIG5hbWVzcGFjZSBhY3RzIGFzIGEgY29sbGVjdGlvbiBhcmVhIGZvciBwbHVnLWlucyB0aGF0IGNhbiBiZSB1c2VkIHRvXHJcblx0ICogZXh0ZW5kIERhdGFUYWJsZXMgY2FwYWJpbGl0aWVzLiBJbmRlZWQgbWFueSBvZiB0aGUgYnVpbGQgaW4gbWV0aG9kc1xyXG5cdCAqIHVzZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIHRoZWlyIG93biBjYXBhYmlsaXRpZXMgKHNvcnRpbmcgbWV0aG9kcyBmb3JcclxuXHQgKiBleGFtcGxlKS5cclxuXHQgKlxyXG5cdCAqIE5vdGUgdGhhdCB0aGlzIG5hbWVzcGFjZSBpcyBhbGlhc2VkIHRvIGBqUXVlcnkuZm4uZGF0YVRhYmxlRXh0YCBmb3IgbGVnYWN5XHJcblx0ICogcmVhc29uc1xyXG5cdCAqXHJcblx0ICogIEBuYW1lc3BhY2VcclxuXHQgKi9cclxuXHREYXRhVGFibGUuZXh0ID0gX2V4dCA9IHtcclxuXHRcdC8qKlxyXG5cdFx0ICogQnV0dG9ucy4gRm9yIHVzZSB3aXRoIHRoZSBCdXR0b25zIGV4dGVuc2lvbiBmb3IgRGF0YVRhYmxlcy4gVGhpcyBpc1xyXG5cdFx0ICogZGVmaW5lZCBoZXJlIHNvIG90aGVyIGV4dGVuc2lvbnMgY2FuIGRlZmluZSBidXR0b25zIHJlZ2FyZGxlc3Mgb2YgbG9hZFxyXG5cdFx0ICogb3JkZXIuIEl0IGlzIF9ub3RfIHVzZWQgYnkgRGF0YVRhYmxlcyBjb3JlLlxyXG5cdFx0ICpcclxuXHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdCAqICBAZGVmYXVsdCB7fVxyXG5cdFx0ICovXHJcblx0XHRidXR0b25zOiB7fSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRWxlbWVudCBjbGFzcyBuYW1lc1xyXG5cdFx0ICpcclxuXHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdCAqICBAZGVmYXVsdCB7fVxyXG5cdFx0ICovXHJcblx0XHRjbGFzc2VzOiB7fSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRGF0YVRhYmxlcyBidWlsZCB0eXBlIChleHBhbmRlZCBieSB0aGUgZG93bmxvYWQgYnVpbGRlcilcclxuXHRcdCAqXHJcblx0XHQgKiAgQHR5cGUgc3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdGJ1aWxkZXI6IFwiLXNvdXJjZS1cIixcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRXJyb3IgcmVwb3J0aW5nLlxyXG5cdFx0ICogXHJcblx0XHQgKiBIb3cgc2hvdWxkIERhdGFUYWJsZXMgcmVwb3J0IGFuIGVycm9yLiBDYW4gdGFrZSB0aGUgdmFsdWUgJ2FsZXJ0JyxcclxuXHRcdCAqICd0aHJvdycsICdub25lJyBvciBhIGZ1bmN0aW9uLlxyXG5cdFx0ICpcclxuXHRcdCAqICBAdHlwZSBzdHJpbmd8ZnVuY3Rpb25cclxuXHRcdCAqICBAZGVmYXVsdCBhbGVydFxyXG5cdFx0ICovXHJcblx0XHRlcnJNb2RlOiBcImFsZXJ0XCIsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEZlYXR1cmUgcGx1Zy1pbnMuXHJcblx0XHQgKiBcclxuXHRcdCAqIFRoaXMgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aGljaCBkZXNjcmliZSB0aGUgZmVhdHVyZSBwbHVnLWlucyB0aGF0IGFyZVxyXG5cdFx0ICogYXZhaWxhYmxlIHRvIERhdGFUYWJsZXMuIFRoZXNlIGZlYXR1cmUgcGx1Zy1pbnMgYXJlIHRoZW4gYXZhaWxhYmxlIGZvclxyXG5cdFx0ICogdXNlIHRocm91Z2ggdGhlIGBkb21gIGluaXRpYWxpc2F0aW9uIG9wdGlvbi5cclxuXHRcdCAqIFxyXG5cdFx0ICogRWFjaCBmZWF0dXJlIHBsdWctaW4gaXMgZGVzY3JpYmVkIGJ5IGFuIG9iamVjdCB3aGljaCBtdXN0IGhhdmUgdGhlXHJcblx0XHQgKiBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuXHRcdCAqIFxyXG5cdFx0ICogKiBgZm5Jbml0YCAtIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBpbml0aWFsaXNlIHRoZSBwbHVnLWluLFxyXG5cdFx0ICogKiBgY0ZlYXR1cmVgIC0gYSBjaGFyYWN0ZXIgc28gdGhlIGZlYXR1cmUgY2FuIGJlIGVuYWJsZWQgYnkgdGhlIGBkb21gXHJcblx0XHQgKiAgIGluc3RpbGxhdGlvbiBvcHRpb24uIFRoaXMgaXMgY2FzZSBzZW5zaXRpdmUuXHJcblx0XHQgKlxyXG5cdFx0ICogVGhlIGBmbkluaXRgIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nIGlucHV0IHBhcmFtZXRlcnM6XHJcblx0XHQgKlxyXG5cdFx0ICogMS4gYHtvYmplY3R9YCBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdDogc2VlXHJcblx0XHQgKiAgICB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XHJcblx0XHQgKlxyXG5cdFx0ICogQW5kIHRoZSBmb2xsb3dpbmcgcmV0dXJuIGlzIGV4cGVjdGVkOlxyXG5cdFx0ICogXHJcblx0XHQgKiAqIHtub2RlfG51bGx9IFRoZSBlbGVtZW50IHdoaWNoIGNvbnRhaW5zIHlvdXIgZmVhdHVyZS4gTm90ZSB0aGF0IHRoZVxyXG5cdFx0ICogICByZXR1cm4gbWF5IGFsc28gYmUgdm9pZCBpZiB5b3VyIHBsdWctaW4gZG9lcyBub3QgcmVxdWlyZSB0byBpbmplY3QgYW55XHJcblx0XHQgKiAgIERPTSBlbGVtZW50cyBpbnRvIERhdGFUYWJsZXMgY29udHJvbCAoYGRvbWApIC0gZm9yIGV4YW1wbGUgdGhpcyBtaWdodFxyXG5cdFx0ICogICBiZSB1c2VmdWwgd2hlbiBkZXZlbG9waW5nIGEgcGx1Zy1pbiB3aGljaCBhbGxvd3MgdGFibGUgY29udHJvbCB2aWFcclxuXHRcdCAqICAga2V5Ym9hcmQgZW50cnlcclxuXHRcdCAqXHJcblx0XHQgKiAgQHR5cGUgYXJyYXlcclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgICQuZm4uZGF0YVRhYmxlLmV4dC5mZWF0dXJlcy5wdXNoKCB7XHJcblx0XHQgKiAgICAgIFwiZm5Jbml0XCI6IGZ1bmN0aW9uKCBvU2V0dGluZ3MgKSB7XHJcblx0XHQgKiAgICAgICAgcmV0dXJuIG5ldyBUYWJsZVRvb2xzKCB7IFwib0RUU2V0dGluZ3NcIjogb1NldHRpbmdzIH0gKTtcclxuXHRcdCAqICAgICAgfSxcclxuXHRcdCAqICAgICAgXCJjRmVhdHVyZVwiOiBcIlRcIlxyXG5cdFx0ICogICAgfSApO1xyXG5cdFx0ICovXHJcblx0XHRmZWF0dXJlOiBbXSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogUm93IHNlYXJjaGluZy5cclxuXHRcdCAqIFxyXG5cdFx0ICogVGhpcyBtZXRob2Qgb2Ygc2VhcmNoaW5nIGlzIGNvbXBsaW1lbnRhcnkgdG8gdGhlIGRlZmF1bHQgdHlwZSBiYXNlZFxyXG5cdFx0ICogc2VhcmNoaW5nLCBhbmQgYSBsb3QgbW9yZSBjb21wcmVoZW5zaXZlIGFzIGl0IGFsbG93cyB5b3UgY29tcGxldGUgY29udHJvbFxyXG5cdFx0ICogb3ZlciB0aGUgc2VhcmNoaW5nIGxvZ2ljLiBFYWNoIGVsZW1lbnQgaW4gdGhpcyBhcnJheSBpcyBhIGZ1bmN0aW9uXHJcblx0XHQgKiAocGFyYW1ldGVycyBkZXNjcmliZWQgYmVsb3cpIHRoYXQgaXMgY2FsbGVkIGZvciBldmVyeSByb3cgaW4gdGhlIHRhYmxlLFxyXG5cdFx0ICogYW5kIHlvdXIgbG9naWMgZGVjaWRlcyBpZiBpdCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIHNlYXJjaGluZyBkYXRhIHNldFxyXG5cdFx0ICogb3Igbm90LlxyXG5cdFx0ICpcclxuXHRcdCAqIFNlYXJjaGluZyBmdW5jdGlvbnMgaGF2ZSB0aGUgZm9sbG93aW5nIGlucHV0IHBhcmFtZXRlcnM6XHJcblx0XHQgKlxyXG5cdFx0ICogMS4gYHtvYmplY3R9YCBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdDogc2VlXHJcblx0XHQgKiAgICB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XHJcblx0XHQgKiAyLiBge2FycmF5fG9iamVjdH1gIERhdGEgZm9yIHRoZSByb3cgdG8gYmUgcHJvY2Vzc2VkIChzYW1lIGFzIHRoZVxyXG5cdFx0ICogICAgb3JpZ2luYWwgZm9ybWF0IHRoYXQgd2FzIHBhc3NlZCBpbiBhcyB0aGUgZGF0YSBzb3VyY2UsIG9yIGFuIGFycmF5XHJcblx0XHQgKiAgICBmcm9tIGEgRE9NIGRhdGEgc291cmNlXHJcblx0XHQgKiAzLiBge2ludH1gIFJvdyBpbmRleCAoe0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzLmFvRGF0YX0pLCB3aGljaFxyXG5cdFx0ICogICAgY2FuIGJlIHVzZWZ1bCB0byByZXRyaWV2ZSB0aGUgYFRSYCBlbGVtZW50IGlmIHlvdSBuZWVkIERPTSBpbnRlcmFjdGlvbi5cclxuXHRcdCAqXHJcblx0XHQgKiBBbmQgdGhlIGZvbGxvd2luZyByZXR1cm4gaXMgZXhwZWN0ZWQ6XHJcblx0XHQgKlxyXG5cdFx0ICogKiB7Ym9vbGVhbn0gSW5jbHVkZSB0aGUgcm93IGluIHRoZSBzZWFyY2hlZCByZXN1bHQgc2V0ICh0cnVlKSBvciBub3RcclxuXHRcdCAqICAgKGZhbHNlKVxyXG5cdFx0ICpcclxuXHRcdCAqIE5vdGUgdGhhdCBhcyB3aXRoIHRoZSBtYWluIHNlYXJjaCBhYmlsaXR5IGluIERhdGFUYWJsZXMsIHRlY2huaWNhbGx5IHRoaXNcclxuXHRcdCAqIGlzIFwiZmlsdGVyaW5nXCIsIHNpbmNlIGl0IGlzIHN1YnRyYWN0aXZlLiBIb3dldmVyLCBmb3IgY29uc2lzdGVuY3kgaW5cclxuXHRcdCAqIG5hbWluZyB3ZSBjYWxsIGl0IHNlYXJjaGluZyBoZXJlLlxyXG5cdFx0ICpcclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICogIEBkZWZhdWx0IFtdXHJcblx0XHQgKlxyXG5cdFx0ICogIEBleGFtcGxlXHJcblx0XHQgKiAgICAvLyBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgY3VzdG9tIHNlYXJjaCBiZWluZyBhcHBsaWVkIHRvIHRoZVxyXG5cdFx0ICogICAgLy8gZm91cnRoIGNvbHVtbiAoaS5lLiB0aGUgZGF0YVszXSBpbmRleCkgYmFzZWQgb24gdHdvIGlucHV0IHZhbHVlc1xyXG5cdFx0ICogICAgLy8gZnJvbSB0aGUgZW5kLXVzZXIsIG1hdGNoaW5nIHRoZSBkYXRhIGluIGEgY2VydGFpbiByYW5nZS5cclxuXHRcdCAqICAgICQuZm4uZGF0YVRhYmxlLmV4dC5zZWFyY2gucHVzaChcclxuXHRcdCAqICAgICAgZnVuY3Rpb24oIHNldHRpbmdzLCBkYXRhLCBkYXRhSW5kZXggKSB7XHJcblx0XHQgKiAgICAgICAgdmFyIG1pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW4nKS52YWx1ZSAqIDE7XHJcblx0XHQgKiAgICAgICAgdmFyIG1heCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXgnKS52YWx1ZSAqIDE7XHJcblx0XHQgKiAgICAgICAgdmFyIHZlcnNpb24gPSBkYXRhWzNdID09IFwiLVwiID8gMCA6IGRhdGFbM10qMTtcclxuXHRcdCAqXHJcblx0XHQgKiAgICAgICAgaWYgKCBtaW4gPT0gXCJcIiAmJiBtYXggPT0gXCJcIiApIHtcclxuXHRcdCAqICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgICBlbHNlIGlmICggbWluID09IFwiXCIgJiYgdmVyc2lvbiA8IG1heCApIHtcclxuXHRcdCAqICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgICBlbHNlIGlmICggbWluIDwgdmVyc2lvbiAmJiBcIlwiID09IG1heCApIHtcclxuXHRcdCAqICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgICBlbHNlIGlmICggbWluIDwgdmVyc2lvbiAmJiB2ZXJzaW9uIDwgbWF4ICkge1xyXG5cdFx0ICogICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0XHQgKiAgICAgICAgfVxyXG5cdFx0ICogICAgICAgIHJldHVybiBmYWxzZTtcclxuXHRcdCAqICAgICAgfVxyXG5cdFx0ICogICAgKTtcclxuXHRcdCAqL1xyXG5cdFx0c2VhcmNoOiBbXSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU2VsZWN0b3IgZXh0ZW5zaW9uc1xyXG5cdFx0ICpcclxuXHRcdCAqIFRoZSBgc2VsZWN0b3JgIG9wdGlvbiBjYW4gYmUgdXNlZCB0byBleHRlbmQgdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGVcclxuXHRcdCAqIHNlbGVjdG9yIG1vZGlmaWVyIG9wdGlvbnMgKGBzZWxlY3Rvci1tb2RpZmllcmAgb2JqZWN0IGRhdGEgdHlwZSkgdGhhdFxyXG5cdFx0ICogZWFjaCBvZiB0aGUgdGhyZWUgYnVpbHQgaW4gc2VsZWN0b3IgdHlwZXMgb2ZmZXIgKHJvdywgY29sdW1uIGFuZCBjZWxsICtcclxuXHRcdCAqIHRoZWlyIHBsdXJhbCBjb3VudGVycGFydHMpLiBGb3IgZXhhbXBsZSB0aGUgU2VsZWN0IGV4dGVuc2lvbiB1c2VzIHRoaXNcclxuXHRcdCAqIG1lY2hhbmlzbSB0byBwcm92aWRlIGFuIG9wdGlvbiB0byBzZWxlY3Qgb25seSByb3dzLCBjb2x1bW5zIGFuZCBjZWxsc1xyXG5cdFx0ICogdGhhdCBoYXZlIGJlZW4gbWFya2VkIGFzIHNlbGVjdGVkIGJ5IHRoZSBlbmQgdXNlciAoYHtzZWxlY3RlZDogdHJ1ZX1gKSxcclxuXHRcdCAqIHdoaWNoIGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGV4aXN0aW5nIGJ1aWx0IGluIHNlbGVjdG9yXHJcblx0XHQgKiBvcHRpb25zLlxyXG5cdFx0ICpcclxuXHRcdCAqIEVhY2ggcHJvcGVydHkgaXMgYW4gYXJyYXkgdG8gd2hpY2ggZnVuY3Rpb25zIGNhbiBiZSBwdXNoZWQuIFRoZSBmdW5jdGlvbnNcclxuXHRcdCAqIHRha2UgdGhyZWUgYXR0cmlidXRlczpcclxuXHRcdCAqXHJcblx0XHQgKiAqIFNldHRpbmdzIG9iamVjdCBmb3IgdGhlIGhvc3QgdGFibGVcclxuXHRcdCAqICogT3B0aW9ucyBvYmplY3QgKGBzZWxlY3Rvci1tb2RpZmllcmAgb2JqZWN0IHR5cGUpXHJcblx0XHQgKiAqIEFycmF5IG9mIHNlbGVjdGVkIGl0ZW0gaW5kZXhlc1xyXG5cdFx0ICpcclxuXHRcdCAqIFRoZSByZXR1cm4gaXMgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdGluZyBpdGVtIGluZGV4ZXMgYWZ0ZXIgdGhlIGN1c3RvbVxyXG5cdFx0ICogc2VsZWN0b3IgaGFzIGJlZW4gYXBwbGllZC5cclxuXHRcdCAqXHJcblx0XHQgKiAgQHR5cGUgb2JqZWN0XHJcblx0XHQgKi9cclxuXHRcdHNlbGVjdG9yOiB7XHJcblx0XHRcdGNlbGw6IFtdLFxyXG5cdFx0XHRjb2x1bW46IFtdLFxyXG5cdFx0XHRyb3c6IFtdXHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbnRlcm5hbCBmdW5jdGlvbnMsIGV4cG9zZWQgZm9yIHVzZWQgaW4gcGx1Zy1pbnMuXHJcblx0XHQgKiBcclxuXHRcdCAqIFBsZWFzZSBub3RlIHRoYXQgeW91IHNob3VsZCBub3QgbmVlZCB0byB1c2UgdGhlIGludGVybmFsIG1ldGhvZHMgZm9yXHJcblx0XHQgKiBhbnl0aGluZyBvdGhlciB0aGFuIGEgcGx1Zy1pbiAoYW5kIGV2ZW4gdGhlbiwgdHJ5IHRvIGF2b2lkIGlmIHBvc3NpYmxlKS5cclxuXHRcdCAqIFRoZSBpbnRlcm5hbCBmdW5jdGlvbiBtYXkgY2hhbmdlIGJldHdlZW4gcmVsZWFzZXMuXHJcblx0XHQgKlxyXG5cdFx0ICogIEB0eXBlIG9iamVjdFxyXG5cdFx0ICogIEBkZWZhdWx0IHt9XHJcblx0XHQgKi9cclxuXHRcdGludGVybmFsOiB7fSxcclxuXHRcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogTGVnYWN5IGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4gRW5hYmxlIGFuZCBkaXNhYmxlIGxlZ2FjeSBvcHRpb25zIHRoYXRcclxuXHRcdCAqIGFyZSBhdmFpbGFibGUgaW4gRGF0YVRhYmxlcy5cclxuXHRcdCAqXHJcblx0XHQgKiAgQHR5cGUgb2JqZWN0XHJcblx0XHQgKi9cclxuXHRcdGxlZ2FjeToge1xyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRW5hYmxlIC8gZGlzYWJsZSBEYXRhVGFibGVzIDEuOSBjb21wYXRpYmxlIHNlcnZlci1zaWRlIHByb2Nlc3NpbmdcclxuXHRcdFx0ICogcmVxdWVzdHNcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEB0eXBlIGJvb2xlYW5cclxuXHRcdFx0ICogIEBkZWZhdWx0IG51bGxcclxuXHRcdFx0ICovXHJcblx0XHRcdGFqYXg6IG51bGxcclxuXHRcdH0sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFBhZ2luYXRpb24gcGx1Zy1pbiBtZXRob2RzLlxyXG5cdFx0ICogXHJcblx0XHQgKiBFYWNoIGVudHJ5IGluIHRoaXMgb2JqZWN0IGlzIGEgZnVuY3Rpb24gYW5kIGRlZmluZXMgd2hpY2ggYnV0dG9ucyBzaG91bGRcclxuXHRcdCAqIGJlIHNob3duIGJ5IHRoZSBwYWdpbmF0aW9uIHJlbmRlcmluZyBtZXRob2QgdGhhdCBpcyB1c2VkIGZvciB0aGUgdGFibGU6XHJcblx0XHQgKiB7QGxpbmsgRGF0YVRhYmxlLmV4dC5yZW5kZXJlci5wYWdlQnV0dG9ufS4gVGhlIHJlbmRlcmVyIGFkZHJlc3NlcyBob3cgdGhlXHJcblx0XHQgKiBidXR0b25zIGFyZSBkaXNwbGF5ZWQgaW4gdGhlIGRvY3VtZW50LCB3aGlsZSB0aGUgZnVuY3Rpb25zIGhlcmUgdGVsbCBpdFxyXG5cdFx0ICogd2hhdCBidXR0b25zIHRvIGRpc3BsYXkuIFRoaXMgaXMgZG9uZSBieSByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYnV0dG9uXHJcblx0XHQgKiBkZXNjcmlwdGlvbnMgKHdoYXQgZWFjaCBidXR0b24gd2lsbCBkbykuXHJcblx0XHQgKlxyXG5cdFx0ICogUGFnaW5hdGlvbiB0eXBlcyAodGhlIGZvdXIgYnVpbHQgaW4gb3B0aW9ucyBhbmQgYW55IGFkZGl0aW9uYWwgcGx1Zy1pblxyXG5cdFx0ICogb3B0aW9ucyBkZWZpbmVkIGhlcmUpIGNhbiBiZSB1c2VkIHRocm91Z2ggdGhlIGBwYWdpbmF0aW9uVHlwZWBcclxuXHRcdCAqIGluaXRpYWxpc2F0aW9uIHBhcmFtZXRlci5cclxuXHRcdCAqXHJcblx0XHQgKiBUaGUgZnVuY3Rpb25zIGRlZmluZWQgdGFrZSB0d28gcGFyYW1ldGVyczpcclxuXHRcdCAqXHJcblx0XHQgKiAxLiBge2ludH0gcGFnZWAgVGhlIGN1cnJlbnQgcGFnZSBpbmRleFxyXG5cdFx0ICogMi4gYHtpbnR9IHBhZ2VzYCBUaGUgbnVtYmVyIG9mIHBhZ2VzIGluIHRoZSB0YWJsZVxyXG5cdFx0ICpcclxuXHRcdCAqIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGFuIGFycmF5IHdoZXJlIGVhY2ggZWxlbWVudCBvZiB0aGVcclxuXHRcdCAqIGFycmF5IGNhbiBiZSBvbmUgb2Y6XHJcblx0XHQgKlxyXG5cdFx0ICogKiBgZmlyc3RgIC0gSnVtcCB0byBmaXJzdCBwYWdlIHdoZW4gYWN0aXZhdGVkXHJcblx0XHQgKiAqIGBsYXN0YCAtIEp1bXAgdG8gbGFzdCBwYWdlIHdoZW4gYWN0aXZhdGVkXHJcblx0XHQgKiAqIGBwcmV2aW91c2AgLSBTaG93IHByZXZpb3VzIHBhZ2Ugd2hlbiBhY3RpdmF0ZWRcclxuXHRcdCAqICogYG5leHRgIC0gU2hvdyBuZXh0IHBhZ2Ugd2hlbiBhY3RpdmF0ZWRcclxuXHRcdCAqICogYHtpbnR9YCAtIFNob3cgcGFnZSBvZiB0aGUgaW5kZXggZ2l2ZW5cclxuXHRcdCAqICogYHthcnJheX1gIC0gQSBuZXN0ZWQgYXJyYXkgY29udGFpbmluZyB0aGUgYWJvdmUgZWxlbWVudHMgdG8gYWRkIGFcclxuXHRcdCAqICAgY29udGFpbmluZyAnRElWJyBlbGVtZW50IChtaWdodCBiZSB1c2VmdWwgZm9yIHN0eWxpbmcpLlxyXG5cdFx0ICpcclxuXHRcdCAqIE5vdGUgdGhhdCBEYXRhVGFibGVzIHYxLjktIHVzZWQgdGhpcyBvYmplY3Qgc2xpZ2h0bHkgZGlmZmVyZW50bHkgd2hlcmVieVxyXG5cdFx0ICogYW4gb2JqZWN0IHdpdGggdHdvIGZ1bmN0aW9ucyB3b3VsZCBiZSBkZWZpbmVkIGZvciBlYWNoIHBsdWctaW4uIFRoYXRcclxuXHRcdCAqIGFiaWxpdHkgaXMgc3RpbGwgc3VwcG9ydGVkIGJ5IERhdGFUYWJsZXMgMS4xMCsgdG8gcHJvdmlkZSBiYWNrd2FyZHNcclxuXHRcdCAqIGNvbXBhdGliaWxpdHksIGJ1dCB0aGlzIG9wdGlvbiBvZiB1c2UgaXMgbm93IGRlY3JlbWVudGVkIGFuZCBubyBsb25nZXJcclxuXHRcdCAqIGRvY3VtZW50ZWQgaW4gRGF0YVRhYmxlcyAxLjEwKy5cclxuXHRcdCAqXHJcblx0XHQgKiAgQHR5cGUgb2JqZWN0XHJcblx0XHQgKiAgQGRlZmF1bHQge31cclxuXHRcdCAqXHJcblx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdCAqICAgIC8vIFNob3cgcHJldmlvdXMsIG5leHQgYW5kIGN1cnJlbnQgcGFnZSBidXR0b25zIG9ubHlcclxuXHRcdCAqICAgICQuZm4uZGF0YVRhYmxlRXh0Lm9QYWdpbmF0aW9uLmN1cnJlbnQgPSBmdW5jdGlvbiAoIHBhZ2UsIHBhZ2VzICkge1xyXG5cdFx0ICogICAgICByZXR1cm4gWyAncHJldmlvdXMnLCBwYWdlLCAnbmV4dCcgXTtcclxuXHRcdCAqICAgIH07XHJcblx0XHQgKi9cclxuXHRcdHBhZ2VyOiB7fSxcclxuXHRcclxuXHRcclxuXHRcdHJlbmRlcmVyOiB7XHJcblx0XHRcdHBhZ2VCdXR0b246IHt9LFxyXG5cdFx0XHRoZWFkZXI6IHt9XHJcblx0XHR9LFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBPcmRlcmluZyBwbHVnLWlucyAtIGN1c3RvbSBkYXRhIHNvdXJjZVxyXG5cdFx0ICogXHJcblx0XHQgKiBUaGUgZXh0ZW5zaW9uIG9wdGlvbnMgZm9yIG9yZGVyaW5nIG9mIGRhdGEgYXZhaWxhYmxlIGhlcmUgaXMgY29tcGxpbWVudGFyeVxyXG5cdFx0ICogdG8gdGhlIGRlZmF1bHQgdHlwZSBiYXNlZCBvcmRlcmluZyB0aGF0IERhdGFUYWJsZXMgdHlwaWNhbGx5IHVzZXMuIEl0XHJcblx0XHQgKiBhbGxvd3MgbXVjaCBncmVhdGVyIGNvbnRyb2wgb3ZlciB0aGUgdGhlIGRhdGEgdGhhdCBpcyBiZWluZyB1c2VkIHRvXHJcblx0XHQgKiBvcmRlciBhIGNvbHVtbiwgYnV0IGlzIG5lY2Vzc2FyaWx5IHRoZXJlZm9yZSBtb3JlIGNvbXBsZXguXHJcblx0XHQgKiBcclxuXHRcdCAqIFRoaXMgdHlwZSBvZiBvcmRlcmluZyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gZG8gb3JkZXJpbmcgYmFzZWQgb24gZGF0YVxyXG5cdFx0ICogbGl2ZSBmcm9tIHRoZSBET00gKGZvciBleGFtcGxlIHRoZSBjb250ZW50cyBvZiBhbiAnaW5wdXQnIGVsZW1lbnQpIHJhdGhlclxyXG5cdFx0ICogdGhhbiBqdXN0IHRoZSBzdGF0aWMgc3RyaW5nIHRoYXQgRGF0YVRhYmxlcyBrbm93cyBvZi5cclxuXHRcdCAqIFxyXG5cdFx0ICogVGhlIHdheSB0aGVzZSBwbHVnLWlucyB3b3JrIGlzIHRoYXQgeW91IGNyZWF0ZSBhbiBhcnJheSBvZiB0aGUgdmFsdWVzIHlvdVxyXG5cdFx0ICogd2lzaCB0byBiZSBvcmRlcmluZyBmb3IgdGhlIGNvbHVtbiBpbiBxdWVzdGlvbiBhbmQgdGhlbiByZXR1cm4gdGhhdFxyXG5cdFx0ICogYXJyYXkuIFRoZSBkYXRhIGluIHRoZSBhcnJheSBtdWNoIGJlIGluIHRoZSBpbmRleCBvcmRlciBvZiB0aGUgcm93cyBpblxyXG5cdFx0ICogdGhlIHRhYmxlIChub3QgdGhlIGN1cnJlbnRseSBvcmRlcmluZyBvcmRlciEpLiBXaGljaCBvcmRlciBkYXRhIGdhdGhlcmluZ1xyXG5cdFx0ICogZnVuY3Rpb24gaXMgcnVuIGhlcmUgZGVwZW5kcyBvbiB0aGUgYGR0LWluaXQgY29sdW1ucy5vcmRlckRhdGFUeXBlYFxyXG5cdFx0ICogcGFyYW1ldGVyIHRoYXQgaXMgdXNlZCBmb3IgdGhlIGNvbHVtbiAoaWYgYW55KS5cclxuXHRcdCAqXHJcblx0XHQgKiBUaGUgZnVuY3Rpb25zIGRlZmluZWQgdGFrZSB0d28gcGFyYW1ldGVyczpcclxuXHRcdCAqXHJcblx0XHQgKiAxLiBge29iamVjdH1gIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0OiBzZWVcclxuXHRcdCAqICAgIHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHRcdCAqIDIuIGB7aW50fWAgVGFyZ2V0IGNvbHVtbiBpbmRleFxyXG5cdFx0ICpcclxuXHRcdCAqIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGFuIGFycmF5OlxyXG5cdFx0ICpcclxuXHRcdCAqICogYHthcnJheX1gIERhdGEgZm9yIHRoZSBjb2x1bW4gdG8gYmUgb3JkZXJpbmcgdXBvblxyXG5cdFx0ICpcclxuXHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0ICpcclxuXHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0ICogICAgLy8gT3JkZXJpbmcgdXNpbmcgYGlucHV0YCBub2RlIHZhbHVlc1xyXG5cdFx0ICogICAgJC5mbi5kYXRhVGFibGUuZXh0Lm9yZGVyWydkb20tdGV4dCddID0gZnVuY3Rpb24gICggc2V0dGluZ3MsIGNvbCApXHJcblx0XHQgKiAgICB7XHJcblx0XHQgKiAgICAgIHJldHVybiB0aGlzLmFwaSgpLmNvbHVtbiggY29sLCB7b3JkZXI6J2luZGV4J30gKS5ub2RlcygpLm1hcCggZnVuY3Rpb24gKCB0ZCwgaSApIHtcclxuXHRcdCAqICAgICAgICByZXR1cm4gJCgnaW5wdXQnLCB0ZCkudmFsKCk7XHJcblx0XHQgKiAgICAgIH0gKTtcclxuXHRcdCAqICAgIH1cclxuXHRcdCAqL1xyXG5cdFx0b3JkZXI6IHt9LFxyXG5cdFxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUeXBlIGJhc2VkIHBsdWctaW5zLlxyXG5cdFx0ICpcclxuXHRcdCAqIEVhY2ggY29sdW1uIGluIERhdGFUYWJsZXMgaGFzIGEgdHlwZSBhc3NpZ25lZCB0byBpdCwgZWl0aGVyIGJ5IGF1dG9tYXRpY1xyXG5cdFx0ICogZGV0ZWN0aW9uIG9yIGJ5IGRpcmVjdCBhc3NpZ25tZW50IHVzaW5nIHRoZSBgdHlwZWAgb3B0aW9uIGZvciB0aGUgY29sdW1uLlxyXG5cdFx0ICogVGhlIHR5cGUgb2YgYSBjb2x1bW4gd2lsbCBlZmZlY3QgaG93IGl0IGlzIG9yZGVyaW5nIGFuZCBzZWFyY2ggKHBsdWctaW5zXHJcblx0XHQgKiBjYW4gYWxzbyBtYWtlIHVzZSBvZiB0aGUgY29sdW1uIHR5cGUgaWYgcmVxdWlyZWQpLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBuYW1lc3BhY2VcclxuXHRcdCAqL1xyXG5cdFx0dHlwZToge1xyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVHlwZSBkZXRlY3Rpb24gZnVuY3Rpb25zLlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiBUaGUgZnVuY3Rpb25zIGRlZmluZWQgaW4gdGhpcyBvYmplY3QgYXJlIHVzZWQgdG8gYXV0b21hdGljYWxseSBkZXRlY3RcclxuXHRcdFx0ICogYSBjb2x1bW4ncyB0eXBlLCBtYWtpbmcgaW5pdGlhbGlzYXRpb24gb2YgRGF0YVRhYmxlcyBzdXBlciBlYXN5LCBldmVuXHJcblx0XHRcdCAqIHdoZW4gY29tcGxleCBkYXRhIGlzIGluIHRoZSB0YWJsZS5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogVGhlIGZ1bmN0aW9ucyBkZWZpbmVkIHRha2UgdHdvIHBhcmFtZXRlcnM6XHJcblx0XHRcdCAqXHJcblx0XHQgICAgICogIDEuIGB7Kn1gIERhdGEgZnJvbSB0aGUgY29sdW1uIGNlbGwgdG8gYmUgYW5hbHlzZWRcclxuXHRcdCAgICAgKiAgMi4gYHtzZXR0aW5nc31gIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VkIHRvXHJcblx0XHQgICAgICogICAgIHBlcmZvcm0gY29udGV4dCBzcGVjaWZpYyB0eXBlIGRldGVjdGlvbiAtIGZvciBleGFtcGxlIGRldGVjdGlvblxyXG5cdFx0ICAgICAqICAgICBiYXNlZCBvbiBsYW5ndWFnZSBzZXR0aW5ncyBzdWNoIGFzIHVzaW5nIGEgY29tbWEgZm9yIGEgZGVjaW1hbFxyXG5cdFx0ICAgICAqICAgICBwbGFjZS4gR2VuZXJhbGx5IHNwZWFraW5nIHRoZSBvcHRpb25zIGZyb20gdGhlIHNldHRpbmdzIHdpbGwgbm90XHJcblx0XHQgICAgICogICAgIGJlIHJlcXVpcmVkXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuOlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAqIGB7c3RyaW5nfG51bGx9YCBEYXRhIHR5cGUgZGV0ZWN0ZWQsIG9yIG51bGwgaWYgdW5rbm93biAoYW5kIHRodXNcclxuXHRcdFx0ICogICBwYXNzIGl0IG9uIHRvIHRoZSBvdGhlciB0eXBlIGRldGVjdGlvbiBmdW5jdGlvbnMuXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAdHlwZSBhcnJheVxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgLy8gQ3VycmVuY3kgdHlwZSBkZXRlY3Rpb24gcGx1Zy1pbjpcclxuXHRcdFx0ICogICAgJC5mbi5kYXRhVGFibGUuZXh0LnR5cGUuZGV0ZWN0LnB1c2goXHJcblx0XHRcdCAqICAgICAgZnVuY3Rpb24gKCBkYXRhLCBzZXR0aW5ncyApIHtcclxuXHRcdFx0ICogICAgICAgIC8vIENoZWNrIHRoZSBudW1lcmljIHBhcnRcclxuXHRcdFx0ICogICAgICAgIGlmICggISAkLmlzTnVtZXJpYyggZGF0YS5zdWJzdHJpbmcoMSkgKSApIHtcclxuXHRcdFx0ICogICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0XHRcdCAqICAgICAgICB9XHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICAgICAgICAvLyBDaGVjayBwcmVmaXhlZCBieSBjdXJyZW5jeVxyXG5cdFx0XHQgKiAgICAgICAgaWYgKCBkYXRhLmNoYXJBdCgwKSA9PSAnJCcgfHwgZGF0YS5jaGFyQXQoMCkgPT0gJyZwb3VuZDsnICkge1xyXG5cdFx0XHQgKiAgICAgICAgICByZXR1cm4gJ2N1cnJlbmN5JztcclxuXHRcdFx0ICogICAgICAgIH1cclxuXHRcdFx0ICogICAgICAgIHJldHVybiBudWxsO1xyXG5cdFx0XHQgKiAgICAgIH1cclxuXHRcdFx0ICogICAgKTtcclxuXHRcdFx0ICovXHJcblx0XHRcdGRldGVjdDogW10sXHJcblx0XHJcblx0XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUeXBlIGJhc2VkIHNlYXJjaCBmb3JtYXR0aW5nLlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiBUaGUgdHlwZSBiYXNlZCBzZWFyY2hpbmcgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIHRvIHByZS1mb3JtYXQgdGhlXHJcblx0XHRcdCAqIGRhdGEgdG8gYmUgc2VhcmNoIG9uLiBGb3IgZXhhbXBsZSwgaXQgY2FuIGJlIHVzZWQgdG8gc3RyaXAgSFRNTFxyXG5cdFx0XHQgKiB0YWdzIG9yIHRvIGRlLWZvcm1hdCB0ZWxlcGhvbmUgbnVtYmVycyBmb3IgbnVtZXJpYyBvbmx5IHNlYXJjaGluZy5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogTm90ZSB0aGF0IGlzIGEgc2VhcmNoIGlzIG5vdCBkZWZpbmVkIGZvciBhIGNvbHVtbiBvZiBhIGdpdmVuIHR5cGUsXHJcblx0XHRcdCAqIG5vIHNlYXJjaCBmb3JtYXR0aW5nIHdpbGwgYmUgcGVyZm9ybWVkLlxyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogUHJlLXByb2Nlc3Npbmcgb2Ygc2VhcmNoaW5nIGRhdGEgcGx1Zy1pbnMgLSBXaGVuIHlvdSBhc3NpZ24gdGhlIHNUeXBlXHJcblx0XHRcdCAqIGZvciBhIGNvbHVtbiAob3IgaGF2ZSBpdCBhdXRvbWF0aWNhbGx5IGRldGVjdGVkIGZvciB5b3UgYnkgRGF0YVRhYmxlc1xyXG5cdFx0XHQgKiBvciBhIHR5cGUgZGV0ZWN0aW9uIHBsdWctaW4pLCB5b3Ugd2lsbCB0eXBpY2FsbHkgYmUgdXNpbmcgdGhpcyBmb3JcclxuXHRcdFx0ICogY3VzdG9tIHNvcnRpbmcsIGJ1dCBpdCBjYW4gYWxzbyBiZSB1c2VkIHRvIHByb3ZpZGUgY3VzdG9tIHNlYXJjaGluZ1xyXG5cdFx0XHQgKiBieSBhbGxvd2luZyB5b3UgdG8gcHJlLXByb2Nlc3NpbmcgdGhlIGRhdGEgYW5kIHJldHVybmluZyB0aGUgZGF0YSBpblxyXG5cdFx0XHQgKiB0aGUgZm9ybWF0IHRoYXQgc2hvdWxkIGJlIHNlYXJjaGVkIHVwb24uIFRoaXMgaXMgZG9uZSBieSBhZGRpbmdcclxuXHRcdFx0ICogZnVuY3Rpb25zIHRoaXMgb2JqZWN0IHdpdGggYSBwYXJhbWV0ZXIgbmFtZSB3aGljaCBtYXRjaGVzIHRoZSBzVHlwZVxyXG5cdFx0XHQgKiBmb3IgdGhhdCB0YXJnZXQgY29sdW1uLiBUaGlzIGlzIHRoZSBjb3JvbGxhcnkgb2YgPGk+YWZuU29ydERhdGE8L2k+XHJcblx0XHRcdCAqIGZvciBzZWFyY2hpbmcgZGF0YS5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogVGhlIGZ1bmN0aW9ucyBkZWZpbmVkIHRha2UgYSBzaW5nbGUgcGFyYW1ldGVyOlxyXG5cdFx0XHQgKlxyXG5cdFx0ICAgICAqICAxLiBgeyp9YCBEYXRhIGZyb20gdGhlIGNvbHVtbiBjZWxsIHRvIGJlIHByZXBhcmVkIGZvciBzZWFyY2hpbmdcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogRWFjaCBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byByZXR1cm46XHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICogYHtzdHJpbmd8bnVsbH1gIEZvcm1hdHRlZCBzdHJpbmcgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIHRoZSBzZWFyY2hpbmcuXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdFx0ICogIEBkZWZhdWx0IHt9XHJcblx0XHRcdCAqXHJcblx0XHRcdCAqICBAZXhhbXBsZVxyXG5cdFx0XHQgKiAgICAkLmZuLmRhdGFUYWJsZS5leHQudHlwZS5zZWFyY2hbJ3RpdGxlLW51bWVyaWMnXSA9IGZ1bmN0aW9uICggZCApIHtcclxuXHRcdFx0ICogICAgICByZXR1cm4gZC5yZXBsYWNlKC9cXG4vZyxcIiBcIikucmVwbGFjZSggLzwuKj8+L2csIFwiXCIgKTtcclxuXHRcdFx0ICogICAgfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2VhcmNoOiB7fSxcclxuXHRcclxuXHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFR5cGUgYmFzZWQgb3JkZXJpbmcuXHJcblx0XHRcdCAqXHJcblx0XHRcdCAqIFRoZSBjb2x1bW4gdHlwZSB0ZWxscyBEYXRhVGFibGVzIHdoYXQgb3JkZXJpbmcgdG8gYXBwbHkgdG8gdGhlIHRhYmxlXHJcblx0XHRcdCAqIHdoZW4gYSBjb2x1bW4gaXMgc29ydGVkIHVwb24uIFRoZSBvcmRlciBmb3IgZWFjaCB0eXBlIHRoYXQgaXMgZGVmaW5lZCxcclxuXHRcdFx0ICogaXMgZGVmaW5lZCBieSB0aGUgZnVuY3Rpb25zIGF2YWlsYWJsZSBpbiB0aGlzIG9iamVjdC5cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogRWFjaCBvcmRlcmluZyBvcHRpb24gY2FuIGJlIGRlc2NyaWJlZCBieSB0aHJlZSBwcm9wZXJ0aWVzIGFkZGVkIHRvXHJcblx0XHRcdCAqIHRoaXMgb2JqZWN0OlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAqIGB7dHlwZX0tcHJlYCAtIFByZS1mb3JtYXR0aW5nIGZ1bmN0aW9uXHJcblx0XHRcdCAqICogYHt0eXBlfS1hc2NgIC0gQXNjZW5kaW5nIG9yZGVyIGZ1bmN0aW9uXHJcblx0XHRcdCAqICogYHt0eXBlfS1kZXNjYCAtIERlc2NlbmRpbmcgb3JkZXIgZnVuY3Rpb25cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogQWxsIHRocmVlIGNhbiBiZSB1c2VkIHRvZ2V0aGVyLCBvbmx5IGB7dHlwZX0tcHJlYCBvciBvbmx5XHJcblx0XHRcdCAqIGB7dHlwZX0tYXNjYCBhbmQgYHt0eXBlfS1kZXNjYCB0b2dldGhlci4gSXQgaXMgZ2VuZXJhbGx5IHJlY29tbWVuZGVkXHJcblx0XHRcdCAqIHRoYXQgb25seSBge3R5cGV9LXByZWAgaXMgdXNlZCwgYXMgdGhpcyBwcm92aWRlcyB0aGUgb3B0aW1hbFxyXG5cdFx0XHQgKiBpbXBsZW1lbnRhdGlvbiBpbiB0ZXJtcyBvZiBzcGVlZCwgYWx0aG91Z2ggdGhlIG90aGVycyBhcmUgcHJvdmlkZWRcclxuXHRcdFx0ICogZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBleGlzdGluZyBKYXZhc2NyaXB0IHNvcnQgZnVuY3Rpb25zLlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiBge3R5cGV9LXByZWA6IEZ1bmN0aW9ucyBkZWZpbmVkIHRha2UgYSBzaW5nbGUgcGFyYW1ldGVyOlxyXG5cdFx0XHQgKlxyXG5cdFx0ICAgICAqICAxLiBgeyp9YCBEYXRhIGZyb20gdGhlIGNvbHVtbiBjZWxsIHRvIGJlIHByZXBhcmVkIGZvciBvcmRlcmluZ1xyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiBBbmQgcmV0dXJuOlxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAqIGB7Kn1gIERhdGEgdG8gYmUgc29ydGVkIHVwb25cclxuXHRcdFx0ICpcclxuXHRcdFx0ICogYHt0eXBlfS1hc2NgIGFuZCBge3R5cGV9LWRlc2NgOiBGdW5jdGlvbnMgYXJlIHR5cGljYWwgSmF2YXNjcmlwdCBzb3J0XHJcblx0XHRcdCAqIGZ1bmN0aW9ucywgdGFraW5nIHR3byBwYXJhbWV0ZXJzOlxyXG5cdFx0XHQgKlxyXG5cdFx0ICAgICAqICAxLiBgeyp9YCBEYXRhIHRvIGNvbXBhcmUgdG8gdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuXHRcdCAgICAgKiAgMi4gYHsqfWAgRGF0YSB0byBjb21wYXJlIHRvIHRoZSBmaXJzdCBwYXJhbWV0ZXJcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogQW5kIHJldHVybmluZzpcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogKiBgeyp9YCBPcmRlcmluZyBtYXRjaDogPDAgaWYgZmlyc3QgcGFyYW1ldGVyIHNob3VsZCBiZSBzb3J0ZWQgbG93ZXJcclxuXHRcdFx0ICogICB0aGFuIHRoZSBzZWNvbmQgcGFyYW1ldGVyLCA9PT0wIGlmIHRoZSB0d28gcGFyYW1ldGVycyBhcmUgZXF1YWwgYW5kXHJcblx0XHRcdCAqICAgPjAgaWYgdGhlIGZpcnN0IHBhcmFtZXRlciBzaG91bGQgYmUgc29ydGVkIGhlaWdodCB0aGFuIHRoZSBzZWNvbmRcclxuXHRcdFx0ICogICBwYXJhbWV0ZXIuXHJcblx0XHRcdCAqIFxyXG5cdFx0XHQgKiAgQHR5cGUgb2JqZWN0XHJcblx0XHRcdCAqICBAZGVmYXVsdCB7fVxyXG5cdFx0XHQgKlxyXG5cdFx0XHQgKiAgQGV4YW1wbGVcclxuXHRcdFx0ICogICAgLy8gTnVtZXJpYyBvcmRlcmluZyBvZiBmb3JtYXR0ZWQgbnVtYmVycyB3aXRoIGEgcHJlLWZvcm1hdHRlclxyXG5cdFx0XHQgKiAgICAkLmV4dGVuZCggJC5mbi5kYXRhVGFibGUuZXh0LnR5cGUub3JkZXIsIHtcclxuXHRcdFx0ICogICAgICBcInN0cmluZy1wcmVcIjogZnVuY3Rpb24oeCkge1xyXG5cdFx0XHQgKiAgICAgICAgYSA9IChhID09PSBcIi1cIiB8fCBhID09PSBcIlwiKSA/IDAgOiBhLnJlcGxhY2UoIC9bXlxcZFxcLVxcLl0vZywgXCJcIiApO1xyXG5cdFx0XHQgKiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoIGEgKTtcclxuXHRcdFx0ICogICAgICB9XHJcblx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0ICpcclxuXHRcdFx0ICogIEBleGFtcGxlXHJcblx0XHRcdCAqICAgIC8vIENhc2Utc2Vuc2l0aXZlIHN0cmluZyBvcmRlcmluZywgd2l0aCBubyBwcmUtZm9ybWF0dGluZyBtZXRob2RcclxuXHRcdFx0ICogICAgJC5leHRlbmQoICQuZm4uZGF0YVRhYmxlLmV4dC5vcmRlciwge1xyXG5cdFx0XHQgKiAgICAgIFwic3RyaW5nLWNhc2UtYXNjXCI6IGZ1bmN0aW9uKHgseSkge1xyXG5cdFx0XHQgKiAgICAgICAgcmV0dXJuICgoeCA8IHkpID8gLTEgOiAoKHggPiB5KSA/IDEgOiAwKSk7XHJcblx0XHRcdCAqICAgICAgfSxcclxuXHRcdFx0ICogICAgICBcInN0cmluZy1jYXNlLWRlc2NcIjogZnVuY3Rpb24oeCx5KSB7XHJcblx0XHRcdCAqICAgICAgICByZXR1cm4gKCh4IDwgeSkgPyAxIDogKCh4ID4geSkgPyAtMSA6IDApKTtcclxuXHRcdFx0ICogICAgICB9XHJcblx0XHRcdCAqICAgIH0gKTtcclxuXHRcdFx0ICovXHJcblx0XHRcdG9yZGVyOiB7fVxyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVW5pcXVlIERhdGFUYWJsZXMgaW5zdGFuY2UgY291bnRlclxyXG5cdFx0ICpcclxuXHRcdCAqIEB0eXBlIGludFxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0X3VuaXF1ZTogMCxcclxuXHRcclxuXHRcclxuXHRcdC8vXHJcblx0XHQvLyBEZXByZWNpYXRlZFxyXG5cdFx0Ly8gVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSByZXRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGlibGl0eSBvbmx5LlxyXG5cdFx0Ly8gVGhlIHNob3VsZCBub3QgYmUgdXNlZCBpbiBuZXcgcHJvamVjdHMgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZVxyXG5cdFx0Ly8gdmVyc2lvblxyXG5cdFx0Ly9cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVmVyc2lvbiBjaGVjayBmdW5jdGlvbi5cclxuXHRcdCAqICBAdHlwZSBmdW5jdGlvblxyXG5cdFx0ICogIEBkZXByZWNpYXRlZCBTaW5jZSAxLjEwXHJcblx0XHQgKi9cclxuXHRcdGZuVmVyc2lvbkNoZWNrOiBEYXRhVGFibGUuZm5WZXJzaW9uQ2hlY2ssXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEluZGV4IGZvciB3aGF0ICd0aGlzJyBpbmRleCBBUEkgZnVuY3Rpb25zIHNob3VsZCB1c2VcclxuXHRcdCAqICBAdHlwZSBpbnRcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICovXHJcblx0XHRpQXBpSW5kZXg6IDAsXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIGpRdWVyeSBVSSBjbGFzcyBjb250YWluZXJcclxuXHRcdCAqICBAdHlwZSBvYmplY3RcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICovXHJcblx0XHRvSlVJQ2xhc3Nlczoge30sXHJcblx0XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNvZnR3YXJlIHZlcnNpb25cclxuXHRcdCAqICBAdHlwZSBzdHJpbmdcclxuXHRcdCAqICBAZGVwcmVjYXRlZCBTaW5jZSB2MS4xMFxyXG5cdFx0ICovXHJcblx0XHRzVmVyc2lvbjogRGF0YVRhYmxlLnZlcnNpb25cclxuXHR9O1xyXG5cdFxyXG5cdFxyXG5cdC8vXHJcblx0Ly8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEFsaWFzIHRvIHByZSAxLjEwIEh1bmdhcmlhbiBub3RhdGlvbiBjb3VudGVyIHBhcnRzXHJcblx0Ly9cclxuXHQkLmV4dGVuZCggX2V4dCwge1xyXG5cdFx0YWZuRmlsdGVyaW5nOiBfZXh0LnNlYXJjaCxcclxuXHRcdGFUeXBlczogICAgICAgX2V4dC50eXBlLmRldGVjdCxcclxuXHRcdG9mblNlYXJjaDogICAgX2V4dC50eXBlLnNlYXJjaCxcclxuXHRcdG9Tb3J0OiAgICAgICAgX2V4dC50eXBlLm9yZGVyLFxyXG5cdFx0YWZuU29ydERhdGE6ICBfZXh0Lm9yZGVyLFxyXG5cdFx0YW9GZWF0dXJlczogICBfZXh0LmZlYXR1cmUsXHJcblx0XHRvQXBpOiAgICAgICAgIF9leHQuaW50ZXJuYWwsXHJcblx0XHRvU3RkQ2xhc3NlczogIF9leHQuY2xhc3NlcyxcclxuXHRcdG9QYWdpbmF0aW9uOiAgX2V4dC5wYWdlclxyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHQkLmV4dGVuZCggRGF0YVRhYmxlLmV4dC5jbGFzc2VzLCB7XHJcblx0XHRcInNUYWJsZVwiOiBcImRhdGFUYWJsZVwiLFxyXG5cdFx0XCJzTm9Gb290ZXJcIjogXCJuby1mb290ZXJcIixcclxuXHRcclxuXHRcdC8qIFBhZ2luZyBidXR0b25zICovXHJcblx0XHRcInNQYWdlQnV0dG9uXCI6IFwicGFnaW5hdGVfYnV0dG9uXCIsXHJcblx0XHRcInNQYWdlQnV0dG9uQWN0aXZlXCI6IFwiY3VycmVudFwiLFxyXG5cdFx0XCJzUGFnZUJ1dHRvbkRpc2FibGVkXCI6IFwiZGlzYWJsZWRcIixcclxuXHRcclxuXHRcdC8qIFN0cmlwaW5nIGNsYXNzZXMgKi9cclxuXHRcdFwic1N0cmlwZU9kZFwiOiBcIm9kZFwiLFxyXG5cdFx0XCJzU3RyaXBlRXZlblwiOiBcImV2ZW5cIixcclxuXHRcclxuXHRcdC8qIEVtcHR5IHJvdyAqL1xyXG5cdFx0XCJzUm93RW1wdHlcIjogXCJkYXRhVGFibGVzX2VtcHR5XCIsXHJcblx0XHJcblx0XHQvKiBGZWF0dXJlcyAqL1xyXG5cdFx0XCJzV3JhcHBlclwiOiBcImRhdGFUYWJsZXNfd3JhcHBlclwiLFxyXG5cdFx0XCJzRmlsdGVyXCI6IFwiZGF0YVRhYmxlc19maWx0ZXJcIixcclxuXHRcdFwic0luZm9cIjogXCJkYXRhVGFibGVzX2luZm9cIixcclxuXHRcdFwic1BhZ2luZ1wiOiBcImRhdGFUYWJsZXNfcGFnaW5hdGUgcGFnaW5nX1wiLCAvKiBOb3RlIHRoYXQgdGhlIHR5cGUgaXMgcG9zdGZpeGVkICovXHJcblx0XHRcInNMZW5ndGhcIjogXCJkYXRhVGFibGVzX2xlbmd0aFwiLFxyXG5cdFx0XCJzUHJvY2Vzc2luZ1wiOiBcImRhdGFUYWJsZXNfcHJvY2Vzc2luZ1wiLFxyXG5cdFxyXG5cdFx0LyogU29ydGluZyAqL1xyXG5cdFx0XCJzU29ydEFzY1wiOiBcInNvcnRpbmdfYXNjXCIsXHJcblx0XHRcInNTb3J0RGVzY1wiOiBcInNvcnRpbmdfZGVzY1wiLFxyXG5cdFx0XCJzU29ydGFibGVcIjogXCJzb3J0aW5nXCIsIC8qIFNvcnRhYmxlIGluIGJvdGggZGlyZWN0aW9ucyAqL1xyXG5cdFx0XCJzU29ydGFibGVBc2NcIjogXCJzb3J0aW5nX2FzY19kaXNhYmxlZFwiLFxyXG5cdFx0XCJzU29ydGFibGVEZXNjXCI6IFwic29ydGluZ19kZXNjX2Rpc2FibGVkXCIsXHJcblx0XHRcInNTb3J0YWJsZU5vbmVcIjogXCJzb3J0aW5nX2Rpc2FibGVkXCIsXHJcblx0XHRcInNTb3J0Q29sdW1uXCI6IFwic29ydGluZ19cIiwgLyogTm90ZSB0aGF0IGFuIGludCBpcyBwb3N0Zml4ZWQgZm9yIHRoZSBzb3J0aW5nIG9yZGVyICovXHJcblx0XHJcblx0XHQvKiBGaWx0ZXJpbmcgKi9cclxuXHRcdFwic0ZpbHRlcklucHV0XCI6IFwiXCIsXHJcblx0XHJcblx0XHQvKiBQYWdlIGxlbmd0aCAqL1xyXG5cdFx0XCJzTGVuZ3RoU2VsZWN0XCI6IFwiXCIsXHJcblx0XHJcblx0XHQvKiBTY3JvbGxpbmcgKi9cclxuXHRcdFwic1Njcm9sbFdyYXBwZXJcIjogXCJkYXRhVGFibGVzX3Njcm9sbFwiLFxyXG5cdFx0XCJzU2Nyb2xsSGVhZFwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsSGVhZFwiLFxyXG5cdFx0XCJzU2Nyb2xsSGVhZElubmVyXCI6IFwiZGF0YVRhYmxlc19zY3JvbGxIZWFkSW5uZXJcIixcclxuXHRcdFwic1Njcm9sbEJvZHlcIjogXCJkYXRhVGFibGVzX3Njcm9sbEJvZHlcIixcclxuXHRcdFwic1Njcm9sbEZvb3RcIjogXCJkYXRhVGFibGVzX3Njcm9sbEZvb3RcIixcclxuXHRcdFwic1Njcm9sbEZvb3RJbm5lclwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsRm9vdElubmVyXCIsXHJcblx0XHJcblx0XHQvKiBNaXNjICovXHJcblx0XHRcInNIZWFkZXJUSFwiOiBcIlwiLFxyXG5cdFx0XCJzRm9vdGVyVEhcIjogXCJcIixcclxuXHRcclxuXHRcdC8vIERlcHJlY2F0ZWRcclxuXHRcdFwic1NvcnRKVUlBc2NcIjogXCJcIixcclxuXHRcdFwic1NvcnRKVUlEZXNjXCI6IFwiXCIsXHJcblx0XHRcInNTb3J0SlVJXCI6IFwiXCIsXHJcblx0XHRcInNTb3J0SlVJQXNjQWxsb3dlZFwiOiBcIlwiLFxyXG5cdFx0XCJzU29ydEpVSURlc2NBbGxvd2VkXCI6IFwiXCIsXHJcblx0XHRcInNTb3J0SlVJV3JhcHBlclwiOiBcIlwiLFxyXG5cdFx0XCJzU29ydEljb25cIjogXCJcIixcclxuXHRcdFwic0pVSUhlYWRlclwiOiBcIlwiLFxyXG5cdFx0XCJzSlVJRm9vdGVyXCI6IFwiXCJcclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0KGZ1bmN0aW9uKCkge1xyXG5cdFxyXG5cdC8vIFJldXNlZCBzdHJpbmdzIGZvciBiZXR0ZXIgY29tcHJlc3Npb24uIENsb3N1cmUgY29tcGlsZXIgYXBwZWFycyB0byBoYXZlIGFcclxuXHQvLyB3ZWlyZCBlZGdlIGNhc2Ugd2hlcmUgaXQgaXMgdHJ5aW5nIHRvIGV4cGFuZCBzdHJpbmdzIHJhdGhlciB0aGFuIHVzZSB0aGVcclxuXHQvLyB2YXJpYWJsZSB2ZXJzaW9uLiBUaGlzIHJlc3VsdHMgaW4gYWJvdXQgMjAwIGJ5dGVzIGJlaW5nIGFkZGVkLCBmb3IgdmVyeVxyXG5cdC8vIGxpdHRsZSBwcmVmZXJlbmNlIGJlbmVmaXQgc2luY2UgaXQgdGhpcyBydW4gb24gc2NyaXB0IGxvYWQgb25seS5cclxuXHR2YXIgX2VtcHR5ID0gJyc7XHJcblx0X2VtcHR5ID0gJyc7XHJcblx0XHJcblx0dmFyIF9zdGF0ZURlZmF1bHQgPSBfZW1wdHkgKyAndWktc3RhdGUtZGVmYXVsdCc7XHJcblx0dmFyIF9zb3J0SWNvbiAgICAgPSBfZW1wdHkgKyAnY3NzX3JpZ2h0IHVpLWljb24gdWktaWNvbi0nO1xyXG5cdHZhciBfaGVhZGVyRm9vdGVyID0gX2VtcHR5ICsgJ2ZnLXRvb2xiYXIgdWktdG9vbGJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeCc7XHJcblx0XHJcblx0JC5leHRlbmQoIERhdGFUYWJsZS5leHQub0pVSUNsYXNzZXMsIERhdGFUYWJsZS5leHQuY2xhc3Nlcywge1xyXG5cdFx0LyogRnVsbCBudW1iZXJzIHBhZ2luZyBidXR0b25zICovXHJcblx0XHRcInNQYWdlQnV0dG9uXCI6ICAgICAgICAgXCJmZy1idXR0b24gdWktYnV0dG9uIFwiK19zdGF0ZURlZmF1bHQsXHJcblx0XHRcInNQYWdlQnV0dG9uQWN0aXZlXCI6ICAgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLFxyXG5cdFx0XCJzUGFnZUJ1dHRvbkRpc2FibGVkXCI6IFwidWktc3RhdGUtZGlzYWJsZWRcIixcclxuXHRcclxuXHRcdC8qIEZlYXR1cmVzICovXHJcblx0XHRcInNQYWdpbmdcIjogXCJkYXRhVGFibGVzX3BhZ2luYXRlIGZnLWJ1dHRvbnNldCB1aS1idXR0b25zZXQgZmctYnV0dG9uc2V0LW11bHRpIFwiK1xyXG5cdFx0XHRcInVpLWJ1dHRvbnNldC1tdWx0aSBwYWdpbmdfXCIsIC8qIE5vdGUgdGhhdCB0aGUgdHlwZSBpcyBwb3N0Zml4ZWQgKi9cclxuXHRcclxuXHRcdC8qIFNvcnRpbmcgKi9cclxuXHRcdFwic1NvcnRBc2NcIjogICAgICAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdfYXNjXCIsXHJcblx0XHRcInNTb3J0RGVzY1wiOiAgICAgICAgICAgX3N0YXRlRGVmYXVsdCtcIiBzb3J0aW5nX2Rlc2NcIixcclxuXHRcdFwic1NvcnRhYmxlXCI6ICAgICAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdcIixcclxuXHRcdFwic1NvcnRhYmxlQXNjXCI6ICAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdfYXNjX2Rpc2FibGVkXCIsXHJcblx0XHRcInNTb3J0YWJsZURlc2NcIjogICAgICAgX3N0YXRlRGVmYXVsdCtcIiBzb3J0aW5nX2Rlc2NfZGlzYWJsZWRcIixcclxuXHRcdFwic1NvcnRhYmxlTm9uZVwiOiAgICAgICBfc3RhdGVEZWZhdWx0K1wiIHNvcnRpbmdfZGlzYWJsZWRcIixcclxuXHRcdFwic1NvcnRKVUlBc2NcIjogICAgICAgICBfc29ydEljb24rXCJ0cmlhbmdsZS0xLW5cIixcclxuXHRcdFwic1NvcnRKVUlEZXNjXCI6ICAgICAgICBfc29ydEljb24rXCJ0cmlhbmdsZS0xLXNcIixcclxuXHRcdFwic1NvcnRKVUlcIjogICAgICAgICAgICBfc29ydEljb24rXCJjYXJhdC0yLW4tc1wiLFxyXG5cdFx0XCJzU29ydEpVSUFzY0FsbG93ZWRcIjogIF9zb3J0SWNvbitcImNhcmF0LTEtblwiLFxyXG5cdFx0XCJzU29ydEpVSURlc2NBbGxvd2VkXCI6IF9zb3J0SWNvbitcImNhcmF0LTEtc1wiLFxyXG5cdFx0XCJzU29ydEpVSVdyYXBwZXJcIjogICAgIFwiRGF0YVRhYmxlc19zb3J0X3dyYXBwZXJcIixcclxuXHRcdFwic1NvcnRJY29uXCI6ICAgICAgICAgICBcIkRhdGFUYWJsZXNfc29ydF9pY29uXCIsXHJcblx0XHJcblx0XHQvKiBTY3JvbGxpbmcgKi9cclxuXHRcdFwic1Njcm9sbEhlYWRcIjogXCJkYXRhVGFibGVzX3Njcm9sbEhlYWQgXCIrX3N0YXRlRGVmYXVsdCxcclxuXHRcdFwic1Njcm9sbEZvb3RcIjogXCJkYXRhVGFibGVzX3Njcm9sbEZvb3QgXCIrX3N0YXRlRGVmYXVsdCxcclxuXHRcclxuXHRcdC8qIE1pc2MgKi9cclxuXHRcdFwic0hlYWRlclRIXCI6ICBfc3RhdGVEZWZhdWx0LFxyXG5cdFx0XCJzRm9vdGVyVEhcIjogIF9zdGF0ZURlZmF1bHQsXHJcblx0XHRcInNKVUlIZWFkZXJcIjogX2hlYWRlckZvb3RlcitcIiB1aS1jb3JuZXItdGwgdWktY29ybmVyLXRyXCIsXHJcblx0XHRcInNKVUlGb290ZXJcIjogX2hlYWRlckZvb3RlcitcIiB1aS1jb3JuZXItYmwgdWktY29ybmVyLWJyXCJcclxuXHR9ICk7XHJcblx0XHJcblx0fSgpKTtcclxuXHRcclxuXHRcclxuXHRcclxuXHR2YXIgZXh0UGFnaW5hdGlvbiA9IERhdGFUYWJsZS5leHQucGFnZXI7XHJcblx0XHJcblx0ZnVuY3Rpb24gX251bWJlcnMgKCBwYWdlLCBwYWdlcyApIHtcclxuXHRcdHZhclxyXG5cdFx0XHRudW1iZXJzID0gW10sXHJcblx0XHRcdGJ1dHRvbnMgPSBleHRQYWdpbmF0aW9uLm51bWJlcnNfbGVuZ3RoLFxyXG5cdFx0XHRoYWxmID0gTWF0aC5mbG9vciggYnV0dG9ucyAvIDIgKSxcclxuXHRcdFx0aSA9IDE7XHJcblx0XHJcblx0XHRpZiAoIHBhZ2VzIDw9IGJ1dHRvbnMgKSB7XHJcblx0XHRcdG51bWJlcnMgPSBfcmFuZ2UoIDAsIHBhZ2VzICk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggcGFnZSA8PSBoYWxmICkge1xyXG5cdFx0XHRudW1iZXJzID0gX3JhbmdlKCAwLCBidXR0b25zLTIgKTtcclxuXHRcdFx0bnVtYmVycy5wdXNoKCAnZWxsaXBzaXMnICk7XHJcblx0XHRcdG51bWJlcnMucHVzaCggcGFnZXMtMSApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIHBhZ2UgPj0gcGFnZXMgLSAxIC0gaGFsZiApIHtcclxuXHRcdFx0bnVtYmVycyA9IF9yYW5nZSggcGFnZXMtKGJ1dHRvbnMtMiksIHBhZ2VzICk7XHJcblx0XHRcdG51bWJlcnMuc3BsaWNlKCAwLCAwLCAnZWxsaXBzaXMnICk7IC8vIG5vIHVuc2hpZnQgaW4gaWU2XHJcblx0XHRcdG51bWJlcnMuc3BsaWNlKCAwLCAwLCAwICk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0bnVtYmVycyA9IF9yYW5nZSggcGFnZS1oYWxmKzIsIHBhZ2UraGFsZi0xICk7XHJcblx0XHRcdG51bWJlcnMucHVzaCggJ2VsbGlwc2lzJyApO1xyXG5cdFx0XHRudW1iZXJzLnB1c2goIHBhZ2VzLTEgKTtcclxuXHRcdFx0bnVtYmVycy5zcGxpY2UoIDAsIDAsICdlbGxpcHNpcycgKTtcclxuXHRcdFx0bnVtYmVycy5zcGxpY2UoIDAsIDAsIDAgKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdG51bWJlcnMuRFRfZWwgPSAnc3Bhbic7XHJcblx0XHRyZXR1cm4gbnVtYmVycztcclxuXHR9XHJcblx0XHJcblx0XHJcblx0JC5leHRlbmQoIGV4dFBhZ2luYXRpb24sIHtcclxuXHRcdHNpbXBsZTogZnVuY3Rpb24gKCBwYWdlLCBwYWdlcyApIHtcclxuXHRcdFx0cmV0dXJuIFsgJ3ByZXZpb3VzJywgJ25leHQnIF07XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0ZnVsbDogZnVuY3Rpb24gKCBwYWdlLCBwYWdlcyApIHtcclxuXHRcdFx0cmV0dXJuIFsgICdmaXJzdCcsICdwcmV2aW91cycsICduZXh0JywgJ2xhc3QnIF07XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0bnVtYmVyczogZnVuY3Rpb24gKCBwYWdlLCBwYWdlcyApIHtcclxuXHRcdFx0cmV0dXJuIFsgX251bWJlcnMocGFnZSwgcGFnZXMpIF07XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0c2ltcGxlX251bWJlcnM6IGZ1bmN0aW9uICggcGFnZSwgcGFnZXMgKSB7XHJcblx0XHRcdHJldHVybiBbICdwcmV2aW91cycsIF9udW1iZXJzKHBhZ2UsIHBhZ2VzKSwgJ25leHQnIF07XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0ZnVsbF9udW1iZXJzOiBmdW5jdGlvbiAoIHBhZ2UsIHBhZ2VzICkge1xyXG5cdFx0XHRyZXR1cm4gWyAnZmlyc3QnLCAncHJldmlvdXMnLCBfbnVtYmVycyhwYWdlLCBwYWdlcyksICduZXh0JywgJ2xhc3QnIF07XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0Ly8gRm9yIHRlc3RpbmcgYW5kIHBsdWctaW5zIHRvIHVzZVxyXG5cdFx0X251bWJlcnM6IF9udW1iZXJzLFxyXG5cdFxyXG5cdFx0Ly8gTnVtYmVyIG9mIG51bWJlciBidXR0b25zIChpbmNsdWRpbmcgZWxsaXBzaXMpIHRvIHNob3cuIF9NdXN0IGJlIG9kZCFfXHJcblx0XHRudW1iZXJzX2xlbmd0aDogN1xyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHQkLmV4dGVuZCggdHJ1ZSwgRGF0YVRhYmxlLmV4dC5yZW5kZXJlciwge1xyXG5cdFx0cGFnZUJ1dHRvbjoge1xyXG5cdFx0XHRfOiBmdW5jdGlvbiAoIHNldHRpbmdzLCBob3N0LCBpZHgsIGJ1dHRvbnMsIHBhZ2UsIHBhZ2VzICkge1xyXG5cdFx0XHRcdHZhciBjbGFzc2VzID0gc2V0dGluZ3Mub0NsYXNzZXM7XHJcblx0XHRcdFx0dmFyIGxhbmcgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uub1BhZ2luYXRlO1xyXG5cdFx0XHRcdHZhciBhcmlhID0gc2V0dGluZ3Mub0xhbmd1YWdlLm9BcmlhLnBhZ2luYXRlIHx8IHt9O1xyXG5cdFx0XHRcdHZhciBidG5EaXNwbGF5LCBidG5DbGFzcywgY291bnRlcj0wO1xyXG5cdFxyXG5cdFx0XHRcdHZhciBhdHRhY2ggPSBmdW5jdGlvbiggY29udGFpbmVyLCBidXR0b25zICkge1xyXG5cdFx0XHRcdFx0dmFyIGksIGllbiwgbm9kZSwgYnV0dG9uO1xyXG5cdFx0XHRcdFx0dmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uICggZSApIHtcclxuXHRcdFx0XHRcdFx0X2ZuUGFnZUNoYW5nZSggc2V0dGluZ3MsIGUuZGF0YS5hY3Rpb24sIHRydWUgKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHJcblx0XHRcdFx0XHRmb3IgKCBpPTAsIGllbj1idXR0b25zLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRidXR0b24gPSBidXR0b25zW2ldO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRpZiAoICQuaXNBcnJheSggYnV0dG9uICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGlubmVyID0gJCggJzwnKyhidXR0b24uRFRfZWwgfHwgJ2RpdicpKycvPicgKVxyXG5cdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKCBjb250YWluZXIgKTtcclxuXHRcdFx0XHRcdFx0XHRhdHRhY2goIGlubmVyLCBidXR0b24gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRidG5EaXNwbGF5ID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0XHRidG5DbGFzcyA9ICcnO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoIGJ1dHRvbiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2VsbGlwc2lzJzpcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29udGFpbmVyLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJlbGxpcHNpc1wiPiYjeDIwMjY7PC9zcGFuPicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2ZpcnN0JzpcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnRuRGlzcGxheSA9IGxhbmcuc0ZpcnN0O1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRidG5DbGFzcyA9IGJ1dHRvbiArIChwYWdlID4gMCA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0JycgOiAnICcrY2xhc3Nlcy5zUGFnZUJ1dHRvbkRpc2FibGVkKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICdwcmV2aW91cyc6XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkRpc3BsYXkgPSBsYW5nLnNQcmV2aW91cztcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnRuQ2xhc3MgPSBidXR0b24gKyAocGFnZSA+IDAgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCcnIDogJyAnK2NsYXNzZXMuc1BhZ2VCdXR0b25EaXNhYmxlZCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnbmV4dCc6XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkRpc3BsYXkgPSBsYW5nLnNOZXh0O1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRidG5DbGFzcyA9IGJ1dHRvbiArIChwYWdlIDwgcGFnZXMtMSA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0JycgOiAnICcrY2xhc3Nlcy5zUGFnZUJ1dHRvbkRpc2FibGVkKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICdsYXN0JzpcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnRuRGlzcGxheSA9IGxhbmcuc0xhc3Q7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkNsYXNzID0gYnV0dG9uICsgKHBhZ2UgPCBwYWdlcy0xID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnJyA6ICcgJytjbGFzc2VzLnNQYWdlQnV0dG9uRGlzYWJsZWQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcclxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJ0bkRpc3BsYXkgPSBidXR0b24gKyAxO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRidG5DbGFzcyA9IHBhZ2UgPT09IGJ1dHRvbiA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zUGFnZUJ1dHRvbkFjdGl2ZSA6ICcnO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBidG5EaXNwbGF5ICE9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9ICQoJzxhPicsIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnY2xhc3MnOiBjbGFzc2VzLnNQYWdlQnV0dG9uKycgJytidG5DbGFzcyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnYXJpYS1jb250cm9scyc6IHNldHRpbmdzLnNUYWJsZUlkLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCdhcmlhLWxhYmVsJzogYXJpYVsgYnV0dG9uIF0sXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0J2RhdGEtZHQtaWR4JzogY291bnRlcixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQndGFiaW5kZXgnOiBzZXR0aW5ncy5pVGFiSW5kZXgsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0J2lkJzogaWR4ID09PSAwICYmIHR5cGVvZiBidXR0b24gPT09ICdzdHJpbmcnID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldHRpbmdzLnNUYWJsZUlkICsnXycrIGJ1dHRvbiA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRudWxsXHJcblx0XHRcdFx0XHRcdFx0XHRcdH0gKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQuaHRtbCggYnRuRGlzcGxheSApXHJcblx0XHRcdFx0XHRcdFx0XHRcdC5hcHBlbmRUbyggY29udGFpbmVyICk7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0XHRfZm5CaW5kQWN0aW9uKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRub2RlLCB7YWN0aW9uOiBidXR0b259LCBjbGlja0hhbmRsZXJcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0XHRjb3VudGVyKys7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcclxuXHRcdFx0XHQvLyBJRTkgdGhyb3dzIGFuICd1bmtub3duIGVycm9yJyBpZiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlzIHVzZWRcclxuXHRcdFx0XHQvLyBpbnNpZGUgYW4gaWZyYW1lIG9yIGZyYW1lLiBUcnkgLyBjYXRjaCB0aGUgZXJyb3IuIE5vdCBnb29kIGZvclxyXG5cdFx0XHRcdC8vIGFjY2Vzc2liaWxpdHksIGJ1dCBuZWl0aGVyIGFyZSBmcmFtZXMuXHJcblx0XHRcdFx0dmFyIGFjdGl2ZUVsO1xyXG5cdFxyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHQvLyBCZWNhdXNlIHRoaXMgYXBwcm9hY2ggaXMgZGVzdHJveWluZyBhbmQgcmVjcmVhdGluZyB0aGUgcGFnaW5nXHJcblx0XHRcdFx0XHQvLyBlbGVtZW50cywgZm9jdXMgaXMgbG9zdCBvbiB0aGUgc2VsZWN0IGJ1dHRvbiB3aGljaCBpcyBiYWQgZm9yXHJcblx0XHRcdFx0XHQvLyBhY2Nlc3NpYmlsaXR5LiBTbyB3ZSB3YW50IHRvIHJlc3RvcmUgZm9jdXMgb25jZSB0aGUgZHJhdyBoYXNcclxuXHRcdFx0XHRcdC8vIGNvbXBsZXRlZFxyXG5cdFx0XHRcdFx0YWN0aXZlRWwgPSAkKGhvc3QpLmZpbmQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuZGF0YSgnZHQtaWR4Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhdGNoIChlKSB7fVxyXG5cdFxyXG5cdFx0XHRcdGF0dGFjaCggJChob3N0KS5lbXB0eSgpLCBidXR0b25zICk7XHJcblx0XHJcblx0XHRcdFx0aWYgKCBhY3RpdmVFbCApIHtcclxuXHRcdFx0XHRcdCQoaG9zdCkuZmluZCggJ1tkYXRhLWR0LWlkeD0nK2FjdGl2ZUVsKyddJyApLmZvY3VzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSApO1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdC8vIEJ1aWx0IGluIHR5cGUgZGV0ZWN0aW9uLiBTZWUgbW9kZWwuZXh0LmFUeXBlcyBmb3IgaW5mb3JtYXRpb24gYWJvdXRcclxuXHQvLyB3aGF0IGlzIHJlcXVpcmVkIGZyb20gdGhpcyBtZXRob2RzLlxyXG5cdCQuZXh0ZW5kKCBEYXRhVGFibGUuZXh0LnR5cGUuZGV0ZWN0LCBbXHJcblx0XHQvLyBQbGFpbiBudW1iZXJzIC0gZmlyc3Qgc2luY2UgVjggZGV0ZWN0cyBzb21lIHBsYWluIG51bWJlcnMgYXMgZGF0ZXNcclxuXHRcdC8vIGUuZy4gRGF0ZS5wYXJzZSgnNTUnKSAoYnV0IG5vdCBhbGwsIGUuZy4gRGF0ZS5wYXJzZSgnMjInKS4uLikuXHJcblx0XHRmdW5jdGlvbiAoIGQsIHNldHRpbmdzIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGRlY2ltYWwgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uuc0RlY2ltYWw7XHJcblx0XHRcdHJldHVybiBfaXNOdW1iZXIoIGQsIGRlY2ltYWwgKSA/ICdudW0nK2RlY2ltYWwgOiBudWxsO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8vIERhdGVzIChvbmx5IHRob3NlIHJlY29nbmlzZWQgYnkgdGhlIGJyb3dzZXIncyBEYXRlLnBhcnNlKVxyXG5cdFx0ZnVuY3Rpb24gKCBkLCBzZXR0aW5ncyApXHJcblx0XHR7XHJcblx0XHRcdC8vIFY4IHdpbGwgcmVtb3ZlIGFueSB1bmtub3duIGNoYXJhY3RlcnMgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlXHJcblx0XHRcdC8vIGV4cHJlc3Npb24sIGxlYWRpbmcgdG8gZmFsc2UgbWF0Y2hlcyBzdWNoIGFzIGAkMjQ1LjEyYCBvciBgMTAlYCBiZWluZ1xyXG5cdFx0XHQvLyBhIHZhbGlkIGRhdGUuIFNlZSBmb3J1bSB0aHJlYWQgMTg5NDEgZm9yIGRldGFpbC5cclxuXHRcdFx0aWYgKCBkICYmICEoZCBpbnN0YW5jZW9mIERhdGUpICYmICggISBfcmVfZGF0ZV9zdGFydC50ZXN0KGQpIHx8ICEgX3JlX2RhdGVfZW5kLnRlc3QoZCkgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgcGFyc2VkID0gRGF0ZS5wYXJzZShkKTtcclxuXHRcdFx0cmV0dXJuIChwYXJzZWQgIT09IG51bGwgJiYgIWlzTmFOKHBhcnNlZCkpIHx8IF9lbXB0eShkKSA/ICdkYXRlJyA6IG51bGw7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0Ly8gRm9ybWF0dGVkIG51bWJlcnNcclxuXHRcdGZ1bmN0aW9uICggZCwgc2V0dGluZ3MgKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgZGVjaW1hbCA9IHNldHRpbmdzLm9MYW5ndWFnZS5zRGVjaW1hbDtcclxuXHRcdFx0cmV0dXJuIF9pc051bWJlciggZCwgZGVjaW1hbCwgdHJ1ZSApID8gJ251bS1mbXQnK2RlY2ltYWwgOiBudWxsO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8vIEhUTUwgbnVtZXJpY1xyXG5cdFx0ZnVuY3Rpb24gKCBkLCBzZXR0aW5ncyApXHJcblx0XHR7XHJcblx0XHRcdHZhciBkZWNpbWFsID0gc2V0dGluZ3Mub0xhbmd1YWdlLnNEZWNpbWFsO1xyXG5cdFx0XHRyZXR1cm4gX2h0bWxOdW1lcmljKCBkLCBkZWNpbWFsICkgPyAnaHRtbC1udW0nK2RlY2ltYWwgOiBudWxsO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8vIEhUTUwgbnVtZXJpYywgZm9ybWF0dGVkXHJcblx0XHRmdW5jdGlvbiAoIGQsIHNldHRpbmdzIClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGRlY2ltYWwgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uuc0RlY2ltYWw7XHJcblx0XHRcdHJldHVybiBfaHRtbE51bWVyaWMoIGQsIGRlY2ltYWwsIHRydWUgKSA/ICdodG1sLW51bS1mbXQnK2RlY2ltYWwgOiBudWxsO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8vIEhUTUwgKHRoaXMgaXMgc3RyaWN0IGNoZWNraW5nIC0gdGhlcmUgbXVzdCBiZSBodG1sKVxyXG5cdFx0ZnVuY3Rpb24gKCBkLCBzZXR0aW5ncyApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBfZW1wdHkoIGQgKSB8fCAodHlwZW9mIGQgPT09ICdzdHJpbmcnICYmIGQuaW5kZXhPZignPCcpICE9PSAtMSkgP1xyXG5cdFx0XHRcdCdodG1sJyA6IG51bGw7XHJcblx0XHR9XHJcblx0XSApO1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdC8vIEZpbHRlciBmb3JtYXR0aW5nIGZ1bmN0aW9ucy4gU2VlIG1vZGVsLmV4dC5vZm5TZWFyY2ggZm9yIGluZm9ybWF0aW9uIGFib3V0XHJcblx0Ly8gd2hhdCBpcyByZXF1aXJlZCBmcm9tIHRoZXNlIG1ldGhvZHMuXHJcblx0Ly8gXHJcblx0Ly8gTm90ZSB0aGF0IGFkZGl0aW9uYWwgc2VhcmNoIG1ldGhvZHMgYXJlIGFkZGVkIGZvciB0aGUgaHRtbCBudW1iZXJzIGFuZFxyXG5cdC8vIGh0bWwgZm9ybWF0dGVkIG51bWJlcnMgYnkgYF9hZGROdW1lcmljU29ydCgpYCB3aGVuIHdlIGtub3cgd2hhdCB0aGUgZGVjaW1hbFxyXG5cdC8vIHBsYWNlIGlzXHJcblx0XHJcblx0XHJcblx0JC5leHRlbmQoIERhdGFUYWJsZS5leHQudHlwZS5zZWFyY2gsIHtcclxuXHRcdGh0bWw6IGZ1bmN0aW9uICggZGF0YSApIHtcclxuXHRcdFx0cmV0dXJuIF9lbXB0eShkYXRhKSA/XHJcblx0XHRcdFx0ZGF0YSA6XHJcblx0XHRcdFx0dHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID9cclxuXHRcdFx0XHRcdGRhdGFcclxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoIF9yZV9uZXdfbGluZXMsIFwiIFwiIClcclxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoIF9yZV9odG1sLCBcIlwiICkgOlxyXG5cdFx0XHRcdFx0Jyc7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0c3RyaW5nOiBmdW5jdGlvbiAoIGRhdGEgKSB7XHJcblx0XHRcdHJldHVybiBfZW1wdHkoZGF0YSkgP1xyXG5cdFx0XHRcdGRhdGEgOlxyXG5cdFx0XHRcdHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/XHJcblx0XHRcdFx0XHRkYXRhLnJlcGxhY2UoIF9yZV9uZXdfbGluZXMsIFwiIFwiICkgOlxyXG5cdFx0XHRcdFx0ZGF0YTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblx0XHJcblx0XHJcblx0XHJcblx0dmFyIF9fbnVtZXJpY1JlcGxhY2UgPSBmdW5jdGlvbiAoIGQsIGRlY2ltYWxQbGFjZSwgcmUxLCByZTIgKSB7XHJcblx0XHRpZiAoIGQgIT09IDAgJiYgKCFkIHx8IGQgPT09ICctJykgKSB7XHJcblx0XHRcdHJldHVybiAtSW5maW5pdHk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyBJZiBhIGRlY2ltYWwgcGxhY2Ugb3RoZXIgdGhhbiBgLmAgaXMgdXNlZCwgaXQgbmVlZHMgdG8gYmUgZ2l2ZW4gdG8gdGhlXHJcblx0XHQvLyBmdW5jdGlvbiBzbyB3ZSBjYW4gZGV0ZWN0IGl0IGFuZCByZXBsYWNlIHdpdGggYSBgLmAgd2hpY2ggaXMgdGhlIG9ubHlcclxuXHRcdC8vIGRlY2ltYWwgcGxhY2UgSmF2YXNjcmlwdCByZWNvZ25pc2VzIC0gaXQgaXMgbm90IGxvY2FsZSBhd2FyZS5cclxuXHRcdGlmICggZGVjaW1hbFBsYWNlICkge1xyXG5cdFx0XHRkID0gX251bVRvRGVjaW1hbCggZCwgZGVjaW1hbFBsYWNlICk7XHJcblx0XHR9XHJcblx0XHJcblx0XHRpZiAoIGQucmVwbGFjZSApIHtcclxuXHRcdFx0aWYgKCByZTEgKSB7XHJcblx0XHRcdFx0ZCA9IGQucmVwbGFjZSggcmUxLCAnJyApO1xyXG5cdFx0XHR9XHJcblx0XHJcblx0XHRcdGlmICggcmUyICkge1xyXG5cdFx0XHRcdGQgPSBkLnJlcGxhY2UoIHJlMiwgJycgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0cmV0dXJuIGQgKiAxO1xyXG5cdH07XHJcblx0XHJcblx0XHJcblx0Ly8gQWRkIHRoZSBudW1lcmljICdkZWZvcm1hdHRpbmcnIGZ1bmN0aW9ucyBmb3Igc29ydGluZyBhbmQgc2VhcmNoLiBUaGlzIGlzIGRvbmVcclxuXHQvLyBpbiBhIGZ1bmN0aW9uIHRvIHByb3ZpZGUgYW4gZWFzeSBhYmlsaXR5IGZvciB0aGUgbGFuZ3VhZ2Ugb3B0aW9ucyB0byBhZGRcclxuXHQvLyBhZGRpdGlvbmFsIG1ldGhvZHMgaWYgYSBub24tcGVyaW9kIGRlY2ltYWwgcGxhY2UgaXMgdXNlZC5cclxuXHRmdW5jdGlvbiBfYWRkTnVtZXJpY1NvcnQgKCBkZWNpbWFsUGxhY2UgKSB7XHJcblx0XHQkLmVhY2goXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyBQbGFpbiBudW1iZXJzXHJcblx0XHRcdFx0XCJudW1cIjogZnVuY3Rpb24gKCBkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIF9fbnVtZXJpY1JlcGxhY2UoIGQsIGRlY2ltYWxQbGFjZSApO1xyXG5cdFx0XHRcdH0sXHJcblx0XHJcblx0XHRcdFx0Ly8gRm9ybWF0dGVkIG51bWJlcnNcclxuXHRcdFx0XHRcIm51bS1mbXRcIjogZnVuY3Rpb24gKCBkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIF9fbnVtZXJpY1JlcGxhY2UoIGQsIGRlY2ltYWxQbGFjZSwgX3JlX2Zvcm1hdHRlZF9udW1lcmljICk7XHJcblx0XHRcdFx0fSxcclxuXHRcclxuXHRcdFx0XHQvLyBIVE1MIG51bWVyaWNcclxuXHRcdFx0XHRcImh0bWwtbnVtXCI6IGZ1bmN0aW9uICggZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBfX251bWVyaWNSZXBsYWNlKCBkLCBkZWNpbWFsUGxhY2UsIF9yZV9odG1sICk7XHJcblx0XHRcdFx0fSxcclxuXHRcclxuXHRcdFx0XHQvLyBIVE1MIG51bWVyaWMsIGZvcm1hdHRlZFxyXG5cdFx0XHRcdFwiaHRtbC1udW0tZm10XCI6IGZ1bmN0aW9uICggZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBfX251bWVyaWNSZXBsYWNlKCBkLCBkZWNpbWFsUGxhY2UsIF9yZV9odG1sLCBfcmVfZm9ybWF0dGVkX251bWVyaWMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGZ1bmN0aW9uICgga2V5LCBmbiApIHtcclxuXHRcdFx0XHQvLyBBZGQgdGhlIG9yZGVyaW5nIG1ldGhvZFxyXG5cdFx0XHRcdF9leHQudHlwZS5vcmRlclsga2V5K2RlY2ltYWxQbGFjZSsnLXByZScgXSA9IGZuO1xyXG5cdFxyXG5cdFx0XHRcdC8vIEZvciBIVE1MIHR5cGVzIGFkZCBhIHNlYXJjaCBmb3JtYXR0ZXIgdGhhdCB3aWxsIHN0cmlwIHRoZSBIVE1MXHJcblx0XHRcdFx0aWYgKCBrZXkubWF0Y2goL15odG1sXFwtLykgKSB7XHJcblx0XHRcdFx0XHRfZXh0LnR5cGUuc2VhcmNoWyBrZXkrZGVjaW1hbFBsYWNlIF0gPSBfZXh0LnR5cGUuc2VhcmNoLmh0bWw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvLyBEZWZhdWx0IHNvcnQgbWV0aG9kc1xyXG5cdCQuZXh0ZW5kKCBfZXh0LnR5cGUub3JkZXIsIHtcclxuXHRcdC8vIERhdGVzXHJcblx0XHRcImRhdGUtcHJlXCI6IGZ1bmN0aW9uICggZCApIHtcclxuXHRcdFx0cmV0dXJuIERhdGUucGFyc2UoIGQgKSB8fCAwO1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdC8vIGh0bWxcclxuXHRcdFwiaHRtbC1wcmVcIjogZnVuY3Rpb24gKCBhICkge1xyXG5cdFx0XHRyZXR1cm4gX2VtcHR5KGEpID9cclxuXHRcdFx0XHQnJyA6XHJcblx0XHRcdFx0YS5yZXBsYWNlID9cclxuXHRcdFx0XHRcdGEucmVwbGFjZSggLzwuKj8+L2csIFwiXCIgKS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRcdGErJyc7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0Ly8gc3RyaW5nXHJcblx0XHRcInN0cmluZy1wcmVcIjogZnVuY3Rpb24gKCBhICkge1xyXG5cdFx0XHQvLyBUaGlzIGlzIGEgbGl0dGxlIGNvbXBsZXgsIGJ1dCBmYXN0ZXIgdGhhbiBhbHdheXMgY2FsbGluZyB0b1N0cmluZyxcclxuXHRcdFx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdG9zdHJpbmctdi1jaGVja1xyXG5cdFx0XHRyZXR1cm4gX2VtcHR5KGEpID9cclxuXHRcdFx0XHQnJyA6XHJcblx0XHRcdFx0dHlwZW9mIGEgPT09ICdzdHJpbmcnID9cclxuXHRcdFx0XHRcdGEudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0XHQhIGEudG9TdHJpbmcgP1xyXG5cdFx0XHRcdFx0XHQnJyA6XHJcblx0XHRcdFx0XHRcdGEudG9TdHJpbmcoKTtcclxuXHRcdH0sXHJcblx0XHJcblx0XHQvLyBzdHJpbmctYXNjIGFuZCAtZGVzYyBhcmUgcmV0YWluZWQgb25seSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBvbGRcclxuXHRcdC8vIHNvcnQgbWV0aG9kc1xyXG5cdFx0XCJzdHJpbmctYXNjXCI6IGZ1bmN0aW9uICggeCwgeSApIHtcclxuXHRcdFx0cmV0dXJuICgoeCA8IHkpID8gLTEgOiAoKHggPiB5KSA/IDEgOiAwKSk7XHJcblx0XHR9LFxyXG5cdFxyXG5cdFx0XCJzdHJpbmctZGVzY1wiOiBmdW5jdGlvbiAoIHgsIHkgKSB7XHJcblx0XHRcdHJldHVybiAoKHggPCB5KSA/IDEgOiAoKHggPiB5KSA/IC0xIDogMCkpO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHRcclxuXHRcclxuXHQvLyBOdW1lcmljIHNvcnRpbmcgdHlwZXMgLSBvcmRlciBkb2Vzbid0IG1hdHRlciBoZXJlXHJcblx0X2FkZE51bWVyaWNTb3J0KCAnJyApO1xyXG5cdFxyXG5cdFxyXG5cdCQuZXh0ZW5kKCB0cnVlLCBEYXRhVGFibGUuZXh0LnJlbmRlcmVyLCB7XHJcblx0XHRoZWFkZXI6IHtcclxuXHRcdFx0XzogZnVuY3Rpb24gKCBzZXR0aW5ncywgY2VsbCwgY29sdW1uLCBjbGFzc2VzICkge1xyXG5cdFx0XHRcdC8vIE5vIGFkZGl0aW9uYWwgbWFyay11cCByZXF1aXJlZFxyXG5cdFx0XHRcdC8vIEF0dGFjaCBhIHNvcnQgbGlzdGVuZXIgdG8gdXBkYXRlIG9uIHNvcnQgLSBub3RlIHRoYXQgdXNpbmcgdGhlXHJcblx0XHRcdFx0Ly8gYERUYCBuYW1lc3BhY2Ugd2lsbCBhbGxvdyB0aGUgZXZlbnQgdG8gYmUgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5XHJcblx0XHRcdFx0Ly8gb24gZGVzdHJveSwgd2hpbGUgdGhlIGBkdGAgbmFtZXNwYWNlZCBldmVudCBpcyB0aGUgb25lIHdlIGFyZVxyXG5cdFx0XHRcdC8vIGxpc3RlbmluZyBmb3JcclxuXHRcdFx0XHQkKHNldHRpbmdzLm5UYWJsZSkub24oICdvcmRlci5kdC5EVCcsIGZ1bmN0aW9uICggZSwgY3R4LCBzb3J0aW5nLCBjb2x1bW5zICkge1xyXG5cdFx0XHRcdFx0aWYgKCBzZXR0aW5ncyAhPT0gY3R4ICkgeyAvLyBuZWVkIHRvIGNoZWNrIHRoaXMgdGhpcyBpcyB0aGUgaG9zdFxyXG5cdFx0XHRcdFx0XHRyZXR1cm47ICAgICAgICAgICAgICAgLy8gdGFibGUsIG5vdCBhIG5lc3RlZCBvbmVcclxuXHRcdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRcdHZhciBjb2xJZHggPSBjb2x1bW4uaWR4O1xyXG5cdFxyXG5cdFx0XHRcdFx0Y2VsbFxyXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoXHJcblx0XHRcdFx0XHRcdFx0Y29sdW1uLnNTb3J0aW5nQ2xhc3MgKycgJytcclxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0QXNjICsnICcrXHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydERlc2NcclxuXHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0XHQuYWRkQ2xhc3MoIGNvbHVtbnNbIGNvbElkeCBdID09ICdhc2MnID9cclxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0QXNjIDogY29sdW1uc1sgY29sSWR4IF0gPT0gJ2Rlc2MnID9cclxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnREZXNjIDpcclxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbi5zU29ydGluZ0NsYXNzXHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9LFxyXG5cdFxyXG5cdFx0XHRqcXVlcnl1aTogZnVuY3Rpb24gKCBzZXR0aW5ncywgY2VsbCwgY29sdW1uLCBjbGFzc2VzICkge1xyXG5cdFx0XHRcdCQoJzxkaXYvPicpXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoIGNsYXNzZXMuc1NvcnRKVUlXcmFwcGVyIClcclxuXHRcdFx0XHRcdC5hcHBlbmQoIGNlbGwuY29udGVudHMoKSApXHJcblx0XHRcdFx0XHQuYXBwZW5kKCAkKCc8c3Bhbi8+JylcclxuXHRcdFx0XHRcdFx0LmFkZENsYXNzKCBjbGFzc2VzLnNTb3J0SWNvbisnICcrY29sdW1uLnNTb3J0aW5nQ2xhc3NKVUkgKVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0LmFwcGVuZFRvKCBjZWxsICk7XHJcblx0XHJcblx0XHRcdFx0Ly8gQXR0YWNoIGEgc29ydCBsaXN0ZW5lciB0byB1cGRhdGUgb24gc29ydFxyXG5cdFx0XHRcdCQoc2V0dGluZ3MublRhYmxlKS5vbiggJ29yZGVyLmR0LkRUJywgZnVuY3Rpb24gKCBlLCBjdHgsIHNvcnRpbmcsIGNvbHVtbnMgKSB7XHJcblx0XHRcdFx0XHRpZiAoIHNldHRpbmdzICE9PSBjdHggKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcclxuXHRcdFx0XHRcdHZhciBjb2xJZHggPSBjb2x1bW4uaWR4O1xyXG5cdFxyXG5cdFx0XHRcdFx0Y2VsbFxyXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIGNsYXNzZXMuc1NvcnRBc2MgK1wiIFwiK2NsYXNzZXMuc1NvcnREZXNjIClcclxuXHRcdFx0XHRcdFx0LmFkZENsYXNzKCBjb2x1bW5zWyBjb2xJZHggXSA9PSAnYXNjJyA/XHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEFzYyA6IGNvbHVtbnNbIGNvbElkeCBdID09ICdkZXNjJyA/XHJcblx0XHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0RGVzYyA6XHJcblx0XHRcdFx0XHRcdFx0XHRjb2x1bW4uc1NvcnRpbmdDbGFzc1xyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFxyXG5cdFx0XHRcdFx0Y2VsbFxyXG5cdFx0XHRcdFx0XHQuZmluZCggJ3NwYW4uJytjbGFzc2VzLnNTb3J0SWNvbiApXHJcblx0XHRcdFx0XHRcdC5yZW1vdmVDbGFzcyhcclxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0SlVJQXNjICtcIiBcIitcclxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnNTb3J0SlVJRGVzYyArXCIgXCIrXHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSSArXCIgXCIrXHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSUFzY0FsbG93ZWQgK1wiIFwiK1xyXG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnRKVUlEZXNjQWxsb3dlZFxyXG5cdFx0XHRcdFx0XHQpXHJcblx0XHRcdFx0XHRcdC5hZGRDbGFzcyggY29sdW1uc1sgY29sSWR4IF0gPT0gJ2FzYycgP1xyXG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMuc1NvcnRKVUlBc2MgOiBjb2x1bW5zWyBjb2xJZHggXSA9PSAnZGVzYycgP1xyXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5zU29ydEpVSURlc2MgOlxyXG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uLnNTb3J0aW5nQ2xhc3NKVUlcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9ICk7XHJcblx0XHJcblx0LypcclxuXHQgKiBQdWJsaWMgaGVscGVyIGZ1bmN0aW9ucy4gVGhlc2UgYXJlbid0IHVzZWQgaW50ZXJuYWxseSBieSBEYXRhVGFibGVzLCBvclxyXG5cdCAqIGNhbGxlZCBieSBhbnkgb2YgdGhlIG9wdGlvbnMgcGFzc2VkIGludG8gRGF0YVRhYmxlcywgYnV0IHRoZXkgY2FuIGJlIHVzZWRcclxuXHQgKiBleHRlcm5hbGx5IGJ5IGRldmVsb3BlcnMgd29ya2luZyB3aXRoIERhdGFUYWJsZXMuIFRoZXkgYXJlIGhlbHBlciBmdW5jdGlvbnNcclxuXHQgKiB0byBtYWtlIHdvcmtpbmcgd2l0aCBEYXRhVGFibGVzIGEgbGl0dGxlIGJpdCBlYXNpZXIuXHJcblx0ICovXHJcblx0XHJcblx0dmFyIF9faHRtbEVzY2FwZUVudGl0aWVzID0gZnVuY3Rpb24gKCBkICkge1xyXG5cdFx0cmV0dXJuIHR5cGVvZiBkID09PSAnc3RyaW5nJyA/XHJcblx0XHRcdGQucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykgOlxyXG5cdFx0XHRkO1xyXG5cdH07XHJcblx0XHJcblx0LyoqXHJcblx0ICogSGVscGVycyBmb3IgYGNvbHVtbnMucmVuZGVyYC5cclxuXHQgKlxyXG5cdCAqIFRoZSBvcHRpb25zIGRlZmluZWQgaGVyZSBjYW4gYmUgdXNlZCB3aXRoIHRoZSBgY29sdW1ucy5yZW5kZXJgIGluaXRpYWxpc2F0aW9uXHJcblx0ICogb3B0aW9uIHRvIHByb3ZpZGUgYSBkaXNwbGF5IHJlbmRlcmVyLiBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBhcmUgZGVmaW5lZDpcclxuXHQgKlxyXG5cdCAqICogYG51bWJlcmAgLSBXaWxsIGZvcm1hdCBudW1lcmljIGRhdGEgKGRlZmluZWQgYnkgYGNvbHVtbnMuZGF0YWApIGZvclxyXG5cdCAqICAgZGlzcGxheSwgcmV0YWluaW5nIHRoZSBvcmlnaW5hbCB1bmZvcm1hdHRlZCBkYXRhIGZvciBzb3J0aW5nIGFuZCBmaWx0ZXJpbmcuXHJcblx0ICogICBJdCB0YWtlcyA1IHBhcmFtZXRlcnM6XHJcblx0ICogICAqIGBzdHJpbmdgIC0gVGhvdXNhbmRzIGdyb3VwaW5nIHNlcGFyYXRvclxyXG5cdCAqICAgKiBgc3RyaW5nYCAtIERlY2ltYWwgcG9pbnQgaW5kaWNhdG9yXHJcblx0ICogICAqIGBpbnRlZ2VyYCAtIE51bWJlciBvZiBkZWNpbWFsIHBvaW50cyB0byBzaG93XHJcblx0ICogICAqIGBzdHJpbmdgIChvcHRpb25hbCkgLSBQcmVmaXguXHJcblx0ICogICAqIGBzdHJpbmdgIChvcHRpb25hbCkgLSBQb3N0Zml4ICgvc3VmZml4KS5cclxuXHQgKiAqIGB0ZXh0YCAtIEVzY2FwZSBIVE1MIHRvIGhlbHAgcHJldmVudCBYU1MgYXR0YWNrcy4gSXQgaGFzIG5vIG9wdGlvbmFsXHJcblx0ICogICBwYXJhbWV0ZXJzLlxyXG5cdCAqXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiAgIC8vIENvbHVtbiBkZWZpbml0aW9uIHVzaW5nIHRoZSBudW1iZXIgcmVuZGVyZXJcclxuXHQgKiAgIHtcclxuXHQgKiAgICAgZGF0YTogXCJzYWxhcnlcIixcclxuXHQgKiAgICAgcmVuZGVyOiAkLmZuLmRhdGFUYWJsZS5yZW5kZXIubnVtYmVyKCAnXFwnJywgJy4nLCAwLCAnJCcgKVxyXG5cdCAqICAgfVxyXG5cdCAqXHJcblx0ICogQG5hbWVzcGFjZVxyXG5cdCAqL1xyXG5cdERhdGFUYWJsZS5yZW5kZXIgPSB7XHJcblx0XHRudW1iZXI6IGZ1bmN0aW9uICggdGhvdXNhbmRzLCBkZWNpbWFsLCBwcmVjaXNpb24sIHByZWZpeCwgcG9zdGZpeCApIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRkaXNwbGF5OiBmdW5jdGlvbiAoIGQgKSB7XHJcblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBkICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgZCAhPT0gJ3N0cmluZycgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0dmFyIG5lZ2F0aXZlID0gZCA8IDAgPyAnLScgOiAnJztcclxuXHRcdFx0XHRcdHZhciBmbG8gPSBwYXJzZUZsb2F0KCBkICk7XHJcblx0XHJcblx0XHRcdFx0XHQvLyBJZiBOYU4gdGhlbiB0aGVyZSBpc24ndCBtdWNoIGZvcm1hdHRpbmcgdGhhdCB3ZSBjYW4gZG8gLSBqdXN0XHJcblx0XHRcdFx0XHQvLyByZXR1cm4gaW1tZWRpYXRlbHksIGVzY2FwaW5nIGFueSBIVE1MICh0aGlzIHdhcyBzdXBwb3NlZCB0b1xyXG5cdFx0XHRcdFx0Ly8gYmUgYSBudW1iZXIgYWZ0ZXIgYWxsKVxyXG5cdFx0XHRcdFx0aWYgKCBpc05hTiggZmxvICkgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBfX2h0bWxFc2NhcGVFbnRpdGllcyggZCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFxyXG5cdFx0XHRcdFx0ZCA9IE1hdGguYWJzKCBmbG8gKTtcclxuXHRcclxuXHRcdFx0XHRcdHZhciBpbnRQYXJ0ID0gcGFyc2VJbnQoIGQsIDEwICk7XHJcblx0XHRcdFx0XHR2YXIgZmxvYXRQYXJ0ID0gcHJlY2lzaW9uID9cclxuXHRcdFx0XHRcdFx0ZGVjaW1hbCsoZCAtIGludFBhcnQpLnRvRml4ZWQoIHByZWNpc2lvbiApLnN1YnN0cmluZyggMiApOlxyXG5cdFx0XHRcdFx0XHQnJztcclxuXHRcclxuXHRcdFx0XHRcdHJldHVybiBuZWdhdGl2ZSArIChwcmVmaXh8fCcnKSArXHJcblx0XHRcdFx0XHRcdGludFBhcnQudG9TdHJpbmcoKS5yZXBsYWNlKFxyXG5cdFx0XHRcdFx0XHRcdC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCB0aG91c2FuZHNcclxuXHRcdFx0XHRcdFx0KSArXHJcblx0XHRcdFx0XHRcdGZsb2F0UGFydCArXHJcblx0XHRcdFx0XHRcdChwb3N0Zml4fHwnJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHRcclxuXHRcdHRleHQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRkaXNwbGF5OiBfX2h0bWxFc2NhcGVFbnRpdGllc1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0XHJcblx0LypcclxuXHQgKiBUaGlzIGlzIHJlYWxseSBhIGdvb2QgYml0IHJ1YmJpc2ggdGhpcyBtZXRob2Qgb2YgZXhwb3NpbmcgdGhlIGludGVybmFsIG1ldGhvZHNcclxuXHQgKiBwdWJsaWNseS4uLiAtIFRvIGJlIGZpeGVkIGluIDIuMCB1c2luZyBtZXRob2RzIG9uIHRoZSBwcm90b3R5cGVcclxuXHQgKi9cclxuXHRcclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGUgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciBleHBvcnRpbmcgYW4gaW50ZXJuYWwgZnVuY3Rpb25zIHRvIGFuIGV4dGVybmFsIEFQSS5cclxuXHQgKiAgQHBhcmFtIHtzdHJpbmd9IGZuIEFQSSBmdW5jdGlvbiBuYW1lXHJcblx0ICogIEByZXR1cm5zIHtmdW5jdGlvbn0gd3JhcHBlZCBmdW5jdGlvblxyXG5cdCAqICBAbWVtYmVyb2YgRGF0YVRhYmxlI2ludGVybmFsXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gX2ZuRXh0ZXJuQXBpRnVuYyAoZm4pXHJcblx0e1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgYXJncyA9IFtfZm5TZXR0aW5nc0Zyb21Ob2RlKCB0aGlzW0RhdGFUYWJsZS5leHQuaUFwaUluZGV4XSApXS5jb25jYXQoXHJcblx0XHRcdFx0QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gRGF0YVRhYmxlLmV4dC5pbnRlcm5hbFtmbl0uYXBwbHkoIHRoaXMsIGFyZ3MgKTtcclxuXHRcdH07XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlZmVyZW5jZSB0byBpbnRlcm5hbCBmdW5jdGlvbnMgZm9yIHVzZSBieSBwbHVnLWluIGRldmVsb3BlcnMuIE5vdGUgdGhhdFxyXG5cdCAqIHRoZXNlIG1ldGhvZHMgYXJlIHJlZmVyZW5jZXMgdG8gaW50ZXJuYWwgZnVuY3Rpb25zIGFuZCBhcmUgY29uc2lkZXJlZCB0byBiZVxyXG5cdCAqIHByaXZhdGUuIElmIHlvdSB1c2UgdGhlc2UgbWV0aG9kcywgYmUgYXdhcmUgdGhhdCB0aGV5IGFyZSBsaWFibGUgdG8gY2hhbmdlXHJcblx0ICogYmV0d2VlbiB2ZXJzaW9ucy5cclxuXHQgKiAgQG5hbWVzcGFjZVxyXG5cdCAqL1xyXG5cdCQuZXh0ZW5kKCBEYXRhVGFibGUuZXh0LmludGVybmFsLCB7XHJcblx0XHRfZm5FeHRlcm5BcGlGdW5jOiBfZm5FeHRlcm5BcGlGdW5jLFxyXG5cdFx0X2ZuQnVpbGRBamF4OiBfZm5CdWlsZEFqYXgsXHJcblx0XHRfZm5BamF4VXBkYXRlOiBfZm5BamF4VXBkYXRlLFxyXG5cdFx0X2ZuQWpheFBhcmFtZXRlcnM6IF9mbkFqYXhQYXJhbWV0ZXJzLFxyXG5cdFx0X2ZuQWpheFVwZGF0ZURyYXc6IF9mbkFqYXhVcGRhdGVEcmF3LFxyXG5cdFx0X2ZuQWpheERhdGFTcmM6IF9mbkFqYXhEYXRhU3JjLFxyXG5cdFx0X2ZuQWRkQ29sdW1uOiBfZm5BZGRDb2x1bW4sXHJcblx0XHRfZm5Db2x1bW5PcHRpb25zOiBfZm5Db2x1bW5PcHRpb25zLFxyXG5cdFx0X2ZuQWRqdXN0Q29sdW1uU2l6aW5nOiBfZm5BZGp1c3RDb2x1bW5TaXppbmcsXHJcblx0XHRfZm5WaXNpYmxlVG9Db2x1bW5JbmRleDogX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgsXHJcblx0XHRfZm5Db2x1bW5JbmRleFRvVmlzaWJsZTogX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUsXHJcblx0XHRfZm5WaXNibGVDb2x1bW5zOiBfZm5WaXNibGVDb2x1bW5zLFxyXG5cdFx0X2ZuR2V0Q29sdW1uczogX2ZuR2V0Q29sdW1ucyxcclxuXHRcdF9mbkNvbHVtblR5cGVzOiBfZm5Db2x1bW5UeXBlcyxcclxuXHRcdF9mbkFwcGx5Q29sdW1uRGVmczogX2ZuQXBwbHlDb2x1bW5EZWZzLFxyXG5cdFx0X2ZuSHVuZ2FyaWFuTWFwOiBfZm5IdW5nYXJpYW5NYXAsXHJcblx0XHRfZm5DYW1lbFRvSHVuZ2FyaWFuOiBfZm5DYW1lbFRvSHVuZ2FyaWFuLFxyXG5cdFx0X2ZuTGFuZ3VhZ2VDb21wYXQ6IF9mbkxhbmd1YWdlQ29tcGF0LFxyXG5cdFx0X2ZuQnJvd3NlckRldGVjdDogX2ZuQnJvd3NlckRldGVjdCxcclxuXHRcdF9mbkFkZERhdGE6IF9mbkFkZERhdGEsXHJcblx0XHRfZm5BZGRUcjogX2ZuQWRkVHIsXHJcblx0XHRfZm5Ob2RlVG9EYXRhSW5kZXg6IF9mbk5vZGVUb0RhdGFJbmRleCxcclxuXHRcdF9mbk5vZGVUb0NvbHVtbkluZGV4OiBfZm5Ob2RlVG9Db2x1bW5JbmRleCxcclxuXHRcdF9mbkdldENlbGxEYXRhOiBfZm5HZXRDZWxsRGF0YSxcclxuXHRcdF9mblNldENlbGxEYXRhOiBfZm5TZXRDZWxsRGF0YSxcclxuXHRcdF9mblNwbGl0T2JqTm90YXRpb246IF9mblNwbGl0T2JqTm90YXRpb24sXHJcblx0XHRfZm5HZXRPYmplY3REYXRhRm46IF9mbkdldE9iamVjdERhdGFGbixcclxuXHRcdF9mblNldE9iamVjdERhdGFGbjogX2ZuU2V0T2JqZWN0RGF0YUZuLFxyXG5cdFx0X2ZuR2V0RGF0YU1hc3RlcjogX2ZuR2V0RGF0YU1hc3RlcixcclxuXHRcdF9mbkNsZWFyVGFibGU6IF9mbkNsZWFyVGFibGUsXHJcblx0XHRfZm5EZWxldGVJbmRleDogX2ZuRGVsZXRlSW5kZXgsXHJcblx0XHRfZm5JbnZhbGlkYXRlOiBfZm5JbnZhbGlkYXRlLFxyXG5cdFx0X2ZuR2V0Um93RWxlbWVudHM6IF9mbkdldFJvd0VsZW1lbnRzLFxyXG5cdFx0X2ZuQ3JlYXRlVHI6IF9mbkNyZWF0ZVRyLFxyXG5cdFx0X2ZuQnVpbGRIZWFkOiBfZm5CdWlsZEhlYWQsXHJcblx0XHRfZm5EcmF3SGVhZDogX2ZuRHJhd0hlYWQsXHJcblx0XHRfZm5EcmF3OiBfZm5EcmF3LFxyXG5cdFx0X2ZuUmVEcmF3OiBfZm5SZURyYXcsXHJcblx0XHRfZm5BZGRPcHRpb25zSHRtbDogX2ZuQWRkT3B0aW9uc0h0bWwsXHJcblx0XHRfZm5EZXRlY3RIZWFkZXI6IF9mbkRldGVjdEhlYWRlcixcclxuXHRcdF9mbkdldFVuaXF1ZVRoczogX2ZuR2V0VW5pcXVlVGhzLFxyXG5cdFx0X2ZuRmVhdHVyZUh0bWxGaWx0ZXI6IF9mbkZlYXR1cmVIdG1sRmlsdGVyLFxyXG5cdFx0X2ZuRmlsdGVyQ29tcGxldGU6IF9mbkZpbHRlckNvbXBsZXRlLFxyXG5cdFx0X2ZuRmlsdGVyQ3VzdG9tOiBfZm5GaWx0ZXJDdXN0b20sXHJcblx0XHRfZm5GaWx0ZXJDb2x1bW46IF9mbkZpbHRlckNvbHVtbixcclxuXHRcdF9mbkZpbHRlcjogX2ZuRmlsdGVyLFxyXG5cdFx0X2ZuRmlsdGVyQ3JlYXRlU2VhcmNoOiBfZm5GaWx0ZXJDcmVhdGVTZWFyY2gsXHJcblx0XHRfZm5Fc2NhcGVSZWdleDogX2ZuRXNjYXBlUmVnZXgsXHJcblx0XHRfZm5GaWx0ZXJEYXRhOiBfZm5GaWx0ZXJEYXRhLFxyXG5cdFx0X2ZuRmVhdHVyZUh0bWxJbmZvOiBfZm5GZWF0dXJlSHRtbEluZm8sXHJcblx0XHRfZm5VcGRhdGVJbmZvOiBfZm5VcGRhdGVJbmZvLFxyXG5cdFx0X2ZuSW5mb01hY3JvczogX2ZuSW5mb01hY3JvcyxcclxuXHRcdF9mbkluaXRpYWxpc2U6IF9mbkluaXRpYWxpc2UsXHJcblx0XHRfZm5Jbml0Q29tcGxldGU6IF9mbkluaXRDb21wbGV0ZSxcclxuXHRcdF9mbkxlbmd0aENoYW5nZTogX2ZuTGVuZ3RoQ2hhbmdlLFxyXG5cdFx0X2ZuRmVhdHVyZUh0bWxMZW5ndGg6IF9mbkZlYXR1cmVIdG1sTGVuZ3RoLFxyXG5cdFx0X2ZuRmVhdHVyZUh0bWxQYWdpbmF0ZTogX2ZuRmVhdHVyZUh0bWxQYWdpbmF0ZSxcclxuXHRcdF9mblBhZ2VDaGFuZ2U6IF9mblBhZ2VDaGFuZ2UsXHJcblx0XHRfZm5GZWF0dXJlSHRtbFByb2Nlc3Npbmc6IF9mbkZlYXR1cmVIdG1sUHJvY2Vzc2luZyxcclxuXHRcdF9mblByb2Nlc3NpbmdEaXNwbGF5OiBfZm5Qcm9jZXNzaW5nRGlzcGxheSxcclxuXHRcdF9mbkZlYXR1cmVIdG1sVGFibGU6IF9mbkZlYXR1cmVIdG1sVGFibGUsXHJcblx0XHRfZm5TY3JvbGxEcmF3OiBfZm5TY3JvbGxEcmF3LFxyXG5cdFx0X2ZuQXBwbHlUb0NoaWxkcmVuOiBfZm5BcHBseVRvQ2hpbGRyZW4sXHJcblx0XHRfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHM6IF9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyxcclxuXHRcdF9mblRocm90dGxlOiBfZm5UaHJvdHRsZSxcclxuXHRcdF9mbkNvbnZlcnRUb1dpZHRoOiBfZm5Db252ZXJ0VG9XaWR0aCxcclxuXHRcdF9mbkdldFdpZGVzdE5vZGU6IF9mbkdldFdpZGVzdE5vZGUsXHJcblx0XHRfZm5HZXRNYXhMZW5TdHJpbmc6IF9mbkdldE1heExlblN0cmluZyxcclxuXHRcdF9mblN0cmluZ1RvQ3NzOiBfZm5TdHJpbmdUb0NzcyxcclxuXHRcdF9mblNvcnRGbGF0dGVuOiBfZm5Tb3J0RmxhdHRlbixcclxuXHRcdF9mblNvcnQ6IF9mblNvcnQsXHJcblx0XHRfZm5Tb3J0QXJpYTogX2ZuU29ydEFyaWEsXHJcblx0XHRfZm5Tb3J0TGlzdGVuZXI6IF9mblNvcnRMaXN0ZW5lcixcclxuXHRcdF9mblNvcnRBdHRhY2hMaXN0ZW5lcjogX2ZuU29ydEF0dGFjaExpc3RlbmVyLFxyXG5cdFx0X2ZuU29ydGluZ0NsYXNzZXM6IF9mblNvcnRpbmdDbGFzc2VzLFxyXG5cdFx0X2ZuU29ydERhdGE6IF9mblNvcnREYXRhLFxyXG5cdFx0X2ZuU2F2ZVN0YXRlOiBfZm5TYXZlU3RhdGUsXHJcblx0XHRfZm5Mb2FkU3RhdGU6IF9mbkxvYWRTdGF0ZSxcclxuXHRcdF9mblNldHRpbmdzRnJvbU5vZGU6IF9mblNldHRpbmdzRnJvbU5vZGUsXHJcblx0XHRfZm5Mb2c6IF9mbkxvZyxcclxuXHRcdF9mbk1hcDogX2ZuTWFwLFxyXG5cdFx0X2ZuQmluZEFjdGlvbjogX2ZuQmluZEFjdGlvbixcclxuXHRcdF9mbkNhbGxiYWNrUmVnOiBfZm5DYWxsYmFja1JlZyxcclxuXHRcdF9mbkNhbGxiYWNrRmlyZTogX2ZuQ2FsbGJhY2tGaXJlLFxyXG5cdFx0X2ZuTGVuZ3RoT3ZlcmZsb3c6IF9mbkxlbmd0aE92ZXJmbG93LFxyXG5cdFx0X2ZuUmVuZGVyZXI6IF9mblJlbmRlcmVyLFxyXG5cdFx0X2ZuRGF0YVNvdXJjZTogX2ZuRGF0YVNvdXJjZSxcclxuXHRcdF9mblJvd0F0dHJpYnV0ZXM6IF9mblJvd0F0dHJpYnV0ZXMsXHJcblx0XHRfZm5DYWxjdWxhdGVFbmQ6IGZ1bmN0aW9uICgpIHt9IC8vIFVzZWQgYnkgYSBsb3Qgb2YgcGx1Zy1pbnMsIGJ1dCByZWR1bmRhbnRcclxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gMS4xMCwgc28gdGhpcyBkZWFkLWVuZCBmdW5jdGlvbiBpc1xyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRlZCB0byBwcmV2ZW50IGVycm9yc1xyXG5cdH0gKTtcclxuXHRcclxuXHJcblx0Ly8galF1ZXJ5IGFjY2Vzc1xyXG5cdCQuZm4uZGF0YVRhYmxlID0gRGF0YVRhYmxlO1xyXG5cclxuXHQvLyBQcm92aWRlIGFjY2VzcyB0byB0aGUgaG9zdCBqUXVlcnkgb2JqZWN0IChjaXJjdWxhciByZWZlcmVuY2UpXHJcblx0RGF0YVRhYmxlLiQgPSAkO1xyXG5cclxuXHQvLyBMZWdhY3kgYWxpYXNlc1xyXG5cdCQuZm4uZGF0YVRhYmxlU2V0dGluZ3MgPSBEYXRhVGFibGUuc2V0dGluZ3M7XHJcblx0JC5mbi5kYXRhVGFibGVFeHQgPSBEYXRhVGFibGUuZXh0O1xyXG5cclxuXHQvLyBXaXRoIGEgY2FwaXRhbCBgRGAgd2UgcmV0dXJuIGEgRGF0YVRhYmxlcyBBUEkgaW5zdGFuY2UgcmF0aGVyIHRoYW4gYVxyXG5cdC8vIGpRdWVyeSBvYmplY3RcclxuXHQkLmZuLkRhdGFUYWJsZSA9IGZ1bmN0aW9uICggb3B0cyApIHtcclxuXHRcdHJldHVybiAkKHRoaXMpLmRhdGFUYWJsZSggb3B0cyApLmFwaSgpO1xyXG5cdH07XHJcblxyXG5cdC8vIEFsbCBwcm9wZXJ0aWVzIHRoYXQgYXJlIGF2YWlsYWJsZSB0byAkLmZuLmRhdGFUYWJsZSBzaG91bGQgYWxzbyBiZVxyXG5cdC8vIGF2YWlsYWJsZSBvbiAkLmZuLkRhdGFUYWJsZVxyXG5cdCQuZWFjaCggRGF0YVRhYmxlLCBmdW5jdGlvbiAoIHByb3AsIHZhbCApIHtcclxuXHRcdCQuZm4uRGF0YVRhYmxlWyBwcm9wIF0gPSB2YWw7XHJcblx0fSApO1xyXG5cclxuXHJcblx0Ly8gSW5mb3JtYXRpb24gYWJvdXQgZXZlbnRzIGZpcmVkIGJ5IERhdGFUYWJsZXMgLSBmb3IgZG9jdW1lbnRhdGlvbi5cclxuXHQvKipcclxuXHQgKiBEcmF3IGV2ZW50LCBmaXJlZCB3aGVuZXZlciB0aGUgdGFibGUgaXMgcmVkcmF3biBvbiB0aGUgcGFnZSwgYXQgdGhlIHNhbWVcclxuXHQgKiBwb2ludCBhcyBmbkRyYXdDYWxsYmFjay4gVGhpcyBtYXkgYmUgdXNlZnVsIGZvciBiaW5kaW5nIGV2ZW50cyBvclxyXG5cdCAqIHBlcmZvcm1pbmcgY2FsY3VsYXRpb25zIHdoZW4gdGhlIHRhYmxlIGlzIGFsdGVyZWQgYXQgYWxsLlxyXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjZHJhdy5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogU2VhcmNoIGV2ZW50LCBmaXJlZCB3aGVuIHRoZSBzZWFyY2hpbmcgYXBwbGllZCB0byB0aGUgdGFibGUgKHVzaW5nIHRoZVxyXG5cdCAqIGJ1aWx0LWluIGdsb2JhbCBzZWFyY2gsIG9yIGNvbHVtbiBmaWx0ZXJzKSBpcyBhbHRlcmVkLlxyXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjc2VhcmNoLmR0XHJcblx0ICogIEBldmVudFxyXG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG8gRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Qge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBQYWdlIGNoYW5nZSBldmVudCwgZmlyZWQgd2hlbiB0aGUgcGFnaW5nIG9mIHRoZSB0YWJsZSBpcyBhbHRlcmVkLlxyXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjcGFnZS5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogT3JkZXIgZXZlbnQsIGZpcmVkIHdoZW4gdGhlIG9yZGVyaW5nIGFwcGxpZWQgdG8gdGhlIHRhYmxlIGlzIGFsdGVyZWQuXHJcblx0ICogIEBuYW1lIERhdGFUYWJsZSNvcmRlci5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogRGF0YVRhYmxlcyBpbml0aWFsaXNhdGlvbiBjb21wbGV0ZSBldmVudCwgZmlyZWQgd2hlbiB0aGUgdGFibGUgaXMgZnVsbHlcclxuXHQgKiBkcmF3biwgaW5jbHVkaW5nIEFqYXggZGF0YSBsb2FkZWQsIGlmIEFqYXggZGF0YSBpcyByZXF1aXJlZC5cclxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI2luaXQuZHRcclxuXHQgKiAgQGV2ZW50XHJcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBqc29uIFRoZSBKU09OIG9iamVjdCByZXF1ZXN0IGZyb20gdGhlIHNlcnZlciAtIG9ubHlcclxuXHQgKiAgICBwcmVzZW50IGlmIGNsaWVudC1zaWRlIEFqYXggc291cmNlZCBkYXRhIGlzIHVzZWQ8L2xpPjwvb2w+XHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0YXRlIHNhdmUgZXZlbnQsIGZpcmVkIHdoZW4gdGhlIHRhYmxlIGhhcyBjaGFuZ2VkIHN0YXRlIGEgbmV3IHN0YXRlIHNhdmVcclxuXHQgKiBpcyByZXF1aXJlZC4gVGhpcyBldmVudCBhbGxvd3MgbW9kaWZpY2F0aW9uIG9mIHRoZSBzdGF0ZSBzYXZpbmcgb2JqZWN0XHJcblx0ICogcHJpb3IgdG8gYWN0dWFsbHkgZG9pbmcgdGhlIHNhdmUsIGluY2x1ZGluZyBhZGRpdGlvbiBvciBvdGhlciBzdGF0ZVxyXG5cdCAqIHByb3BlcnRpZXMgKGZvciBwbHVnLWlucykgb3IgbW9kaWZpY2F0aW9uIG9mIGEgRGF0YVRhYmxlcyBjb3JlIHByb3BlcnR5LlxyXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjc3RhdGVTYXZlUGFyYW1zLmR0XHJcblx0ICogIEBldmVudFxyXG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG9TZXR0aW5ncyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0ganNvbiBUaGUgc3RhdGUgaW5mb3JtYXRpb24gdG8gYmUgc2F2ZWRcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogU3RhdGUgbG9hZCBldmVudCwgZmlyZWQgd2hlbiB0aGUgdGFibGUgaXMgbG9hZGluZyBzdGF0ZSBmcm9tIHRoZSBzdG9yZWRcclxuXHQgKiBkYXRhLCBidXQgcHJpb3IgdG8gdGhlIHNldHRpbmdzIG9iamVjdCBiZWluZyBtb2RpZmllZCBieSB0aGUgc2F2ZWQgc3RhdGVcclxuXHQgKiAtIGFsbG93aW5nIG1vZGlmaWNhdGlvbiBvZiB0aGUgc2F2ZWQgc3RhdGUgaXMgcmVxdWlyZWQgb3IgbG9hZGluZyBvZlxyXG5cdCAqIHN0YXRlIGZvciBhIHBsdWctaW4uXHJcblx0ICogIEBuYW1lIERhdGFUYWJsZSNzdGF0ZUxvYWRQYXJhbXMuZHRcclxuXHQgKiAgQGV2ZW50XHJcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBqc29uIFRoZSBzYXZlZCBzdGF0ZSBpbmZvcm1hdGlvblxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBTdGF0ZSBsb2FkZWQgZXZlbnQsIGZpcmVkIHdoZW4gc3RhdGUgaGFzIGJlZW4gbG9hZGVkIGZyb20gc3RvcmVkIGRhdGEgYW5kXHJcblx0ICogdGhlIHNldHRpbmdzIG9iamVjdCBoYXMgYmVlbiBtb2RpZmllZCBieSB0aGUgbG9hZGVkIGRhdGEuXHJcblx0ICogIEBuYW1lIERhdGFUYWJsZSNzdGF0ZUxvYWRlZC5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvU2V0dGluZ3MgRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IGpzb24gVGhlIHNhdmVkIHN0YXRlIGluZm9ybWF0aW9uXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFByb2Nlc3NpbmcgZXZlbnQsIGZpcmVkIHdoZW4gRGF0YVRhYmxlcyBpcyBkb2luZyBzb21lIGtpbmQgb2YgcHJvY2Vzc2luZ1xyXG5cdCAqIChiZSBpdCwgb3JkZXIsIHNlYXJjZyBvciBhbnl0aGluZyBlbHNlKS4gSXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgdG9cclxuXHQgKiB0aGUgZW5kIHVzZXIgdGhhdCB0aGVyZSBpcyBzb21ldGhpbmcgaGFwcGVuaW5nLCBvciB0aGF0IHNvbWV0aGluZyBoYXNcclxuXHQgKiBmaW5pc2hlZC5cclxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI3Byb2Nlc3NpbmcuZHRcclxuXHQgKiAgQGV2ZW50XHJcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gb1NldHRpbmdzIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7Ym9vbGVhbn0gYlNob3cgRmxhZyBmb3IgaWYgRGF0YVRhYmxlcyBpcyBkb2luZyBwcm9jZXNzaW5nIG9yIG5vdFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBBamF4IChYSFIpIGV2ZW50LCBmaXJlZCB3aGVuZXZlciBhbiBBamF4IHJlcXVlc3QgaXMgY29tcGxldGVkIGZyb20gYVxyXG5cdCAqIHJlcXVlc3QgdG8gbWFkZSB0byB0aGUgc2VydmVyIGZvciBuZXcgZGF0YS4gVGhpcyBldmVudCBpcyBjYWxsZWQgYmVmb3JlXHJcblx0ICogRGF0YVRhYmxlcyBwcm9jZXNzZWQgdGhlIHJldHVybmVkIGRhdGEsIHNvIGl0IGNhbiBhbHNvIGJlIHVzZWQgdG8gcHJlLVxyXG5cdCAqIHByb2Nlc3MgdGhlIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyLCBpZiBuZWVkZWQuXHJcblx0ICpcclxuXHQgKiBOb3RlIHRoYXQgdGhpcyB0cmlnZ2VyIGlzIGNhbGxlZCBpbiBgZm5TZXJ2ZXJEYXRhYCwgaWYgeW91IG92ZXJyaWRlXHJcblx0ICogYGZuU2VydmVyRGF0YWAgYW5kIHdoaWNoIHRvIHVzZSB0aGlzIGV2ZW50LCB5b3UgbmVlZCB0byB0cmlnZ2VyIGl0IGluIHlvdVxyXG5cdCAqIHN1Y2Nlc3MgZnVuY3Rpb24uXHJcblx0ICogIEBuYW1lIERhdGFUYWJsZSN4aHIuZHRcclxuXHQgKiAgQGV2ZW50XHJcblx0ICogIEBwYXJhbSB7ZXZlbnR9IGUgalF1ZXJ5IGV2ZW50IG9iamVjdFxyXG5cdCAqICBAcGFyYW0ge29iamVjdH0gbyBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdCB7QGxpbmsgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3N9XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBqc29uIEpTT04gcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyXHJcblx0ICpcclxuXHQgKiAgQGV4YW1wbGVcclxuXHQgKiAgICAgLy8gVXNlIGEgY3VzdG9tIHByb3BlcnR5IHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBpbiBhbm90aGVyIERPTSBlbGVtZW50XHJcblx0ICogICAgICQoJyN0YWJsZScpLmRhdGFUYWJsZSgpLm9uKCd4aHIuZHQnLCBmdW5jdGlvbiAoZSwgc2V0dGluZ3MsIGpzb24pIHtcclxuXHQgKiAgICAgICAkKCcjc3RhdHVzJykuaHRtbCgganNvbi5zdGF0dXMgKTtcclxuXHQgKiAgICAgfSApO1xyXG5cdCAqXHJcblx0ICogIEBleGFtcGxlXHJcblx0ICogICAgIC8vIFByZS1wcm9jZXNzIHRoZSBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlclxyXG5cdCAqICAgICAkKCcjdGFibGUnKS5kYXRhVGFibGUoKS5vbigneGhyLmR0JywgZnVuY3Rpb24gKGUsIHNldHRpbmdzLCBqc29uKSB7XHJcblx0ICogICAgICAgZm9yICggdmFyIGk9MCwgaWVuPWpzb24uYWFEYXRhLmxlbmd0aCA7IGk8aWVuIDsgaSsrICkge1xyXG5cdCAqICAgICAgICAganNvbi5hYURhdGFbaV0uc3VtID0ganNvbi5hYURhdGFbaV0ub25lICsganNvbi5hYURhdGFbaV0udHdvO1xyXG5cdCAqICAgICAgIH1cclxuXHQgKiAgICAgICAvLyBOb3RlIG5vIHJldHVybiAtIG1hbmlwdWxhdGUgdGhlIGRhdGEgZGlyZWN0bHkgaW4gdGhlIEpTT04gb2JqZWN0LlxyXG5cdCAqICAgICB9ICk7XHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3kgZXZlbnQsIGZpcmVkIHdoZW4gdGhlIERhdGFUYWJsZSBpcyBkZXN0cm95ZWQgYnkgY2FsbGluZyBmbkRlc3Ryb3lcclxuXHQgKiBvciBwYXNzaW5nIHRoZSBiRGVzdHJveTp0cnVlIHBhcmFtZXRlciBpbiB0aGUgaW5pdGlhbGlzYXRpb24gb2JqZWN0LiBUaGlzXHJcblx0ICogY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGJvdW5kIGV2ZW50cywgYWRkZWQgRE9NIG5vZGVzLCBldGMuXHJcblx0ICogIEBuYW1lIERhdGFUYWJsZSNkZXN0cm95LmR0XHJcblx0ICogIEBldmVudFxyXG5cdCAqICBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3RcclxuXHQgKiAgQHBhcmFtIHtvYmplY3R9IG8gRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3Qge0BsaW5rIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzfVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBQYWdlIGxlbmd0aCBjaGFuZ2UgZXZlbnQsIGZpcmVkIHdoZW4gbnVtYmVyIG9mIHJlY29yZHMgdG8gc2hvdyBvbiBlYWNoXHJcblx0ICogcGFnZSAodGhlIGxlbmd0aCkgaXMgY2hhbmdlZC5cclxuXHQgKiAgQG5hbWUgRGF0YVRhYmxlI2xlbmd0aC5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHQgKiAgQHBhcmFtIHtpbnRlZ2VyfSBsZW4gTmV3IGxlbmd0aFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBDb2x1bW4gc2l6aW5nIGhhcyBjaGFuZ2VkLlxyXG5cdCAqICBAbmFtZSBEYXRhVGFibGUjY29sdW1uLXNpemluZy5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogQ29sdW1uIHZpc2liaWxpdHkgaGFzIGNoYW5nZWQuXHJcblx0ICogIEBuYW1lIERhdGFUYWJsZSNjb2x1bW4tdmlzaWJpbGl0eS5kdFxyXG5cdCAqICBAZXZlbnRcclxuXHQgKiAgQHBhcmFtIHtldmVudH0gZSBqUXVlcnkgZXZlbnQgb2JqZWN0XHJcblx0ICogIEBwYXJhbSB7b2JqZWN0fSBvIERhdGFUYWJsZXMgc2V0dGluZ3Mgb2JqZWN0IHtAbGluayBEYXRhVGFibGUubW9kZWxzLm9TZXR0aW5nc31cclxuXHQgKiAgQHBhcmFtIHtpbnR9IGNvbHVtbiBDb2x1bW4gaW5kZXhcclxuXHQgKiAgQHBhcmFtIHtib29sfSB2aXMgYGZhbHNlYCBpZiBjb2x1bW4gbm93IGhpZGRlbiwgb3IgYHRydWVgIGlmIHZpc2libGVcclxuXHQgKi9cclxuXHJcblx0cmV0dXJuICQuZm4uZGF0YVRhYmxlO1xyXG59KSk7XHJcbi8qIVxyXG4gKiBTZWxlY3QyIDQuMC4zXHJcbiAqIGh0dHBzOi8vc2VsZWN0Mi5naXRodWIuaW9cclxuICpcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxlY3QyL3NlbGVjdDIvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxyXG4gKi9cclxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XHJcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxyXG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAvLyBOb2RlL0NvbW1vbkpTXHJcbiAgICBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXHJcbiAgICBmYWN0b3J5KGpRdWVyeSk7XHJcbiAgfVxyXG59KGZ1bmN0aW9uIChqUXVlcnkpIHtcclxuICAvLyBUaGlzIGlzIG5lZWRlZCBzbyB3ZSBjYW4gY2F0Y2ggdGhlIEFNRCBsb2FkZXIgY29uZmlndXJhdGlvbiBhbmQgdXNlIGl0XHJcbiAgLy8gVGhlIGlubmVyIGZpbGUgc2hvdWxkIGJlIHdyYXBwZWQgKGJ5IGBiYW5uZXIuc3RhcnQuanNgKSBpbiBhIGZ1bmN0aW9uIHRoYXRcclxuICAvLyByZXR1cm5zIHRoZSBBTUQgbG9hZGVyIHJlZmVyZW5jZXMuXHJcbiAgdmFyIFMyID1cclxuKGZ1bmN0aW9uICgpIHtcclxuICAvLyBSZXN0b3JlIHRoZSBTZWxlY3QyIEFNRCBsb2FkZXIgc28gaXQgY2FuIGJlIHVzZWRcclxuICAvLyBOZWVkZWQgbW9zdGx5IGluIHRoZSBsYW5ndWFnZSBmaWxlcywgd2hlcmUgdGhlIGxvYWRlciBpcyBub3QgaW5zZXJ0ZWRcclxuICBpZiAoalF1ZXJ5ICYmIGpRdWVyeS5mbiAmJiBqUXVlcnkuZm4uc2VsZWN0MiAmJiBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQpIHtcclxuICAgIHZhciBTMiA9IGpRdWVyeS5mbi5zZWxlY3QyLmFtZDtcclxuICB9XHJcbnZhciBTMjsoZnVuY3Rpb24gKCkgeyBpZiAoIVMyIHx8ICFTMi5yZXF1aXJlanMpIHtcclxuaWYgKCFTMikgeyBTMiA9IHt9OyB9IGVsc2UgeyByZXF1aXJlID0gUzI7IH1cclxuLyoqXHJcbiAqIEBsaWNlbnNlIGFsbW9uZCAwLjMuMSBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNCwgVGhlIERvam8gRm91bmRhdGlvbiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgb3IgbmV3IEJTRCBsaWNlbnNlLlxyXG4gKiBzZWU6IGh0dHA6Ly9naXRodWIuY29tL2pyYnVya2UvYWxtb25kIGZvciBkZXRhaWxzXHJcbiAqL1xyXG4vL0dvaW5nIHNsb3BweSB0byBhdm9pZCAndXNlIHN0cmljdCcgc3RyaW5nIGNvc3QsIGJ1dCBzdHJpY3QgcHJhY3RpY2VzIHNob3VsZFxyXG4vL2JlIGZvbGxvd2VkLlxyXG4vKmpzbGludCBzbG9wcHk6IHRydWUgKi9cclxuLypnbG9iYWwgc2V0VGltZW91dDogZmFsc2UgKi9cclxuXHJcbnZhciByZXF1aXJlanMsIHJlcXVpcmUsIGRlZmluZTtcclxuKGZ1bmN0aW9uICh1bmRlZikge1xyXG4gICAgdmFyIG1haW4sIHJlcSwgbWFrZU1hcCwgaGFuZGxlcnMsXHJcbiAgICAgICAgZGVmaW5lZCA9IHt9LFxyXG4gICAgICAgIHdhaXRpbmcgPSB7fSxcclxuICAgICAgICBjb25maWcgPSB7fSxcclxuICAgICAgICBkZWZpbmluZyA9IHt9LFxyXG4gICAgICAgIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXHJcbiAgICAgICAgYXBzID0gW10uc2xpY2UsXHJcbiAgICAgICAganNTdWZmaXhSZWdFeHAgPSAvXFwuanMkLztcclxuXHJcbiAgICBmdW5jdGlvbiBoYXNQcm9wKG9iaiwgcHJvcCkge1xyXG4gICAgICAgIHJldHVybiBoYXNPd24uY2FsbChvYmosIHByb3ApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYSByZWxhdGl2ZSBtb2R1bGUgbmFtZSwgbGlrZSAuL3NvbWV0aGluZywgbm9ybWFsaXplIGl0IHRvXHJcbiAgICAgKiBhIHJlYWwgbmFtZSB0aGF0IGNhbiBiZSBtYXBwZWQgdG8gYSBwYXRoLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIHJlbGF0aXZlIG5hbWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlTmFtZSBhIHJlYWwgbmFtZSB0aGF0IHRoZSBuYW1lIGFyZyBpcyByZWxhdGl2ZVxyXG4gICAgICogdG8uXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBub3JtYWxpemVkIG5hbWVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKG5hbWUsIGJhc2VOYW1lKSB7XHJcbiAgICAgICAgdmFyIG5hbWVQYXJ0cywgbmFtZVNlZ21lbnQsIG1hcFZhbHVlLCBmb3VuZE1hcCwgbGFzdEluZGV4LFxyXG4gICAgICAgICAgICBmb3VuZEksIGZvdW5kU3Rhck1hcCwgc3RhckksIGksIGosIHBhcnQsXHJcbiAgICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2VOYW1lICYmIGJhc2VOYW1lLnNwbGl0KFwiL1wiKSxcclxuICAgICAgICAgICAgbWFwID0gY29uZmlnLm1hcCxcclxuICAgICAgICAgICAgc3Rhck1hcCA9IChtYXAgJiYgbWFwWycqJ10pIHx8IHt9O1xyXG5cclxuICAgICAgICAvL0FkanVzdCBhbnkgcmVsYXRpdmUgcGF0aHMuXHJcbiAgICAgICAgaWYgKG5hbWUgJiYgbmFtZS5jaGFyQXQoMCkgPT09IFwiLlwiKSB7XHJcbiAgICAgICAgICAgIC8vSWYgaGF2ZSBhIGJhc2UgbmFtZSwgdHJ5IHRvIG5vcm1hbGl6ZSBhZ2FpbnN0IGl0LFxyXG4gICAgICAgICAgICAvL290aGVyd2lzZSwgYXNzdW1lIGl0IGlzIGEgdG9wLWxldmVsIHJlcXVpcmUgdGhhdCB3aWxsXHJcbiAgICAgICAgICAgIC8vYmUgcmVsYXRpdmUgdG8gYmFzZVVybCBpbiB0aGUgZW5kLlxyXG4gICAgICAgICAgICBpZiAoYmFzZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSBuYW1lLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTm9kZSAuanMgYWxsb3dhbmNlOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5ub2RlSWRDb21wYXQgJiYganNTdWZmaXhSZWdFeHAudGVzdChuYW1lW2xhc3RJbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZVtsYXN0SW5kZXhdID0gbmFtZVtsYXN0SW5kZXhdLnJlcGxhY2UoanNTdWZmaXhSZWdFeHAsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL0xvcCBvZmYgdGhlIGxhc3QgcGFydCBvZiBiYXNlUGFydHMsIHNvIHRoYXQgLiBtYXRjaGVzIHRoZVxyXG4gICAgICAgICAgICAgICAgLy9cImRpcmVjdG9yeVwiIGFuZCBub3QgbmFtZSBvZiB0aGUgYmFzZU5hbWUncyBtb2R1bGUuIEZvciBpbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIC8vYmFzZU5hbWUgb2YgXCJvbmUvdHdvL3RocmVlXCIsIG1hcHMgdG8gXCJvbmUvdHdvL3RocmVlLmpzXCIsIGJ1dCB3ZVxyXG4gICAgICAgICAgICAgICAgLy93YW50IHRoZSBkaXJlY3RvcnksIFwib25lL3R3b1wiIGZvciB0aGlzIG5vcm1hbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICBuYW1lID0gYmFzZVBhcnRzLnNsaWNlKDAsIGJhc2VQYXJ0cy5sZW5ndGggLSAxKS5jb25jYXQobmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zdGFydCB0cmltRG90c1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gbmFtZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydCA9PT0gXCIuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPT09IFwiLi5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMSAmJiAobmFtZVsyXSA9PT0gJy4uJyB8fCBuYW1lWzBdID09PSAnLi4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9FbmQgb2YgdGhlIGxpbmUuIEtlZXAgYXQgbGVhc3Qgb25lIG5vbi1kb3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcGF0aCBzZWdtZW50IGF0IHRoZSBmcm9udCBzbyBpdCBjYW4gYmUgbWFwcGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3RseSB0byBkaXNrLiBPdGhlcndpc2UsIHRoZXJlIGlzIGxpa2VseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ubyBwYXRoIG1hcHBpbmcgZm9yIGEgcGF0aCBzdGFydGluZyB3aXRoICcuLicuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RoaXMgY2FuIHN0aWxsIGZhaWwsIGJ1dCBjYXRjaGVzIHRoZSBtb3N0IHJlYXNvbmFibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXNlcyBvZiAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc3BsaWNlKGkgLSAxLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vZW5kIHRyaW1Eb3RzXHJcblxyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuam9pbihcIi9cIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZS5pbmRleE9mKCcuLycpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBObyBiYXNlTmFtZSwgc28gdGhpcyBpcyBJRCBpcyByZXNvbHZlZCByZWxhdGl2ZVxyXG4gICAgICAgICAgICAgICAgLy8gdG8gYmFzZVVybCwgcHVsbCBvZmYgdGhlIGxlYWRpbmcgZG90LlxyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL0FwcGx5IG1hcCBjb25maWcgaWYgYXZhaWxhYmxlLlxyXG4gICAgICAgIGlmICgoYmFzZVBhcnRzIHx8IHN0YXJNYXApICYmIG1hcCkge1xyXG4gICAgICAgICAgICBuYW1lUGFydHMgPSBuYW1lLnNwbGl0KCcvJyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSBuYW1lUGFydHMubGVuZ3RoOyBpID4gMDsgaSAtPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lU2VnbWVudCA9IG5hbWVQYXJ0cy5zbGljZSgwLCBpKS5qb2luKFwiL1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYmFzZVBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9GaW5kIHRoZSBsb25nZXN0IGJhc2VOYW1lIHNlZ21lbnQgbWF0Y2ggaW4gdGhlIGNvbmZpZy5cclxuICAgICAgICAgICAgICAgICAgICAvL1NvLCBkbyBqb2lucyBvbiB0aGUgYmlnZ2VzdCB0byBzbWFsbGVzdCBsZW5ndGhzIG9mIGJhc2VQYXJ0cy5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSBiYXNlUGFydHMubGVuZ3RoOyBqID4gMDsgaiAtPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZhbHVlID0gbWFwW2Jhc2VQYXJ0cy5zbGljZSgwLCBqKS5qb2luKCcvJyldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iYXNlTmFtZSBzZWdtZW50IGhhcyAgY29uZmlnLCBmaW5kIGlmIGl0IGhhcyBvbmUgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBuYW1lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZhbHVlID0gbWFwVmFsdWVbbmFtZVNlZ21lbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9NYXRjaCwgdXBkYXRlIG5hbWUgdG8gdGhlIG5ldyB2YWx1ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZE1hcCA9IG1hcFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kSSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9DaGVjayBmb3IgYSBzdGFyIG1hcCBtYXRjaCwgYnV0IGp1c3QgaG9sZCBvbiB0byBpdCxcclxuICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgYSBzaG9ydGVyIHNlZ21lbnQgbWF0Y2ggbGF0ZXIgaW4gYSBtYXRjaGluZ1xyXG4gICAgICAgICAgICAgICAgLy9jb25maWcsIHRoZW4gZmF2b3Igb3ZlciB0aGlzIHN0YXIgbWFwLlxyXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZFN0YXJNYXAgJiYgc3Rhck1hcCAmJiBzdGFyTWFwW25hbWVTZWdtZW50XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kU3Rhck1hcCA9IHN0YXJNYXBbbmFtZVNlZ21lbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJJID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3VuZE1hcCAmJiBmb3VuZFN0YXJNYXApIHtcclxuICAgICAgICAgICAgICAgIGZvdW5kTWFwID0gZm91bmRTdGFyTWFwO1xyXG4gICAgICAgICAgICAgICAgZm91bmRJID0gc3Rhckk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmb3VuZE1hcCkge1xyXG4gICAgICAgICAgICAgICAgbmFtZVBhcnRzLnNwbGljZSgwLCBmb3VuZEksIGZvdW5kTWFwKTtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lUGFydHMuam9pbignLycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlUmVxdWlyZShyZWxOYW1lLCBmb3JjZVN5bmMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL0EgdmVyc2lvbiBvZiBhIHJlcXVpcmUgZnVuY3Rpb24gdGhhdCBwYXNzZXMgYSBtb2R1bGVOYW1lXHJcbiAgICAgICAgICAgIC8vdmFsdWUgZm9yIGl0ZW1zIHRoYXQgbWF5IG5lZWQgdG9cclxuICAgICAgICAgICAgLy9sb29rIHVwIHBhdGhzIHJlbGF0aXZlIHRvIHRoZSBtb2R1bGVOYW1lXHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXBzLmNhbGwoYXJndW1lbnRzLCAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vSWYgZmlyc3QgYXJnIGlzIG5vdCByZXF1aXJlKCdzdHJpbmcnKSwgYW5kIHRoZXJlIGlzIG9ubHlcclxuICAgICAgICAgICAgLy9vbmUgYXJnLCBpdCBpcyB0aGUgYXJyYXkgZm9ybSB3aXRob3V0IGEgY2FsbGJhY2suIEluc2VydFxyXG4gICAgICAgICAgICAvL2EgbnVsbCBzbyB0aGF0IHRoZSBmb2xsb3dpbmcgY29uY2F0IGlzIGNvcnJlY3QuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycgJiYgYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVxLmFwcGx5KHVuZGVmLCBhcmdzLmNvbmNhdChbcmVsTmFtZSwgZm9yY2VTeW5jXSkpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFrZU5vcm1hbGl6ZShyZWxOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlTG9hZChkZXBOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBkZWZpbmVkW2RlcE5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjYWxsRGVwKG5hbWUpIHtcclxuICAgICAgICBpZiAoaGFzUHJvcCh3YWl0aW5nLCBuYW1lKSkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IHdhaXRpbmdbbmFtZV07XHJcbiAgICAgICAgICAgIGRlbGV0ZSB3YWl0aW5nW25hbWVdO1xyXG4gICAgICAgICAgICBkZWZpbmluZ1tuYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgIG1haW4uYXBwbHkodW5kZWYsIGFyZ3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKGRlZmluaW5nLCBuYW1lKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vICcgKyBuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlZmluZWRbbmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgLy9UdXJucyBhIHBsdWdpbiFyZXNvdXJjZSB0byBbcGx1Z2luLCByZXNvdXJjZV1cclxuICAgIC8vd2l0aCB0aGUgcGx1Z2luIGJlaW5nIHVuZGVmaW5lZCBpZiB0aGUgbmFtZVxyXG4gICAgLy9kaWQgbm90IGhhdmUgYSBwbHVnaW4gcHJlZml4LlxyXG4gICAgZnVuY3Rpb24gc3BsaXRQcmVmaXgobmFtZSkge1xyXG4gICAgICAgIHZhciBwcmVmaXgsXHJcbiAgICAgICAgICAgIGluZGV4ID0gbmFtZSA/IG5hbWUuaW5kZXhPZignIScpIDogLTE7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xyXG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoaW5kZXggKyAxLCBuYW1lLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbcHJlZml4LCBuYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIGEgbmFtZSBtYXAsIG5vcm1hbGl6aW5nIHRoZSBuYW1lLCBhbmQgdXNpbmcgYSBwbHVnaW5cclxuICAgICAqIGZvciBub3JtYWxpemF0aW9uIGlmIG5lY2Vzc2FyeS4gR3JhYnMgYSByZWYgdG8gcGx1Z2luXHJcbiAgICAgKiB0b28sIGFzIGFuIG9wdGltaXphdGlvbi5cclxuICAgICAqL1xyXG4gICAgbWFrZU1hcCA9IGZ1bmN0aW9uIChuYW1lLCByZWxOYW1lKSB7XHJcbiAgICAgICAgdmFyIHBsdWdpbixcclxuICAgICAgICAgICAgcGFydHMgPSBzcGxpdFByZWZpeChuYW1lKSxcclxuICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF07XHJcblxyXG4gICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcclxuXHJcbiAgICAgICAgaWYgKHByZWZpeCkge1xyXG4gICAgICAgICAgICBwcmVmaXggPSBub3JtYWxpemUocHJlZml4LCByZWxOYW1lKTtcclxuICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9Ob3JtYWxpemUgYWNjb3JkaW5nXHJcbiAgICAgICAgaWYgKHByZWZpeCkge1xyXG4gICAgICAgICAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5ub3JtYWxpemUpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBwbHVnaW4ubm9ybWFsaXplKG5hbWUsIG1ha2VOb3JtYWxpemUocmVsTmFtZSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZShuYW1lLCByZWxOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7XHJcbiAgICAgICAgICAgIHBhcnRzID0gc3BsaXRQcmVmaXgobmFtZSk7XHJcbiAgICAgICAgICAgIHByZWZpeCA9IHBhcnRzWzBdO1xyXG4gICAgICAgICAgICBuYW1lID0gcGFydHNbMV07XHJcbiAgICAgICAgICAgIGlmIChwcmVmaXgpIHtcclxuICAgICAgICAgICAgICAgIHBsdWdpbiA9IGNhbGxEZXAocHJlZml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9Vc2luZyByaWRpY3Vsb3VzIHByb3BlcnR5IG5hbWVzIGZvciBzcGFjZSByZWFzb25zXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZjogcHJlZml4ID8gcHJlZml4ICsgJyEnICsgbmFtZSA6IG5hbWUsIC8vZnVsbE5hbWVcclxuICAgICAgICAgICAgbjogbmFtZSxcclxuICAgICAgICAgICAgcHI6IHByZWZpeCxcclxuICAgICAgICAgICAgcDogcGx1Z2luXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gbWFrZUNvbmZpZyhuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChjb25maWcgJiYgY29uZmlnLmNvbmZpZyAmJiBjb25maWcuY29uZmlnW25hbWVdKSB8fCB7fTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZXJzID0ge1xyXG4gICAgICAgIHJlcXVpcmU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYWtlUmVxdWlyZShuYW1lKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4cG9ydHM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gZGVmaW5lZFtuYW1lXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRlZmluZWRbbmFtZV0gPSB7fSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vZHVsZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlkOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgdXJpOiAnJyxcclxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IGRlZmluZWRbbmFtZV0sXHJcbiAgICAgICAgICAgICAgICBjb25maWc6IG1ha2VDb25maWcobmFtZSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIG1haW4gPSBmdW5jdGlvbiAobmFtZSwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpIHtcclxuICAgICAgICB2YXIgY2pzTW9kdWxlLCBkZXBOYW1lLCByZXQsIG1hcCwgaSxcclxuICAgICAgICAgICAgYXJncyA9IFtdLFxyXG4gICAgICAgICAgICBjYWxsYmFja1R5cGUgPSB0eXBlb2YgY2FsbGJhY2ssXHJcbiAgICAgICAgICAgIHVzaW5nRXhwb3J0cztcclxuXHJcbiAgICAgICAgLy9Vc2UgbmFtZSBpZiBubyByZWxOYW1lXHJcbiAgICAgICAgcmVsTmFtZSA9IHJlbE5hbWUgfHwgbmFtZTtcclxuXHJcbiAgICAgICAgLy9DYWxsIHRoZSBjYWxsYmFjayB0byBkZWZpbmUgdGhlIG1vZHVsZSwgaWYgbmVjZXNzYXJ5LlxyXG4gICAgICAgIGlmIChjYWxsYmFja1R5cGUgPT09ICd1bmRlZmluZWQnIHx8IGNhbGxiYWNrVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAvL1B1bGwgb3V0IHRoZSBkZWZpbmVkIGRlcGVuZGVuY2llcyBhbmQgcGFzcyB0aGUgb3JkZXJlZFxyXG4gICAgICAgICAgICAvL3ZhbHVlcyB0byB0aGUgY2FsbGJhY2suXHJcbiAgICAgICAgICAgIC8vRGVmYXVsdCB0byBbcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlXSBpZiBubyBkZXBzXHJcbiAgICAgICAgICAgIGRlcHMgPSAhZGVwcy5sZW5ndGggJiYgY2FsbGJhY2subGVuZ3RoID8gWydyZXF1aXJlJywgJ2V4cG9ydHMnLCAnbW9kdWxlJ10gOiBkZXBzO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgbWFwID0gbWFrZU1hcChkZXBzW2ldLCByZWxOYW1lKTtcclxuICAgICAgICAgICAgICAgIGRlcE5hbWUgPSBtYXAuZjtcclxuXHJcbiAgICAgICAgICAgICAgICAvL0Zhc3QgcGF0aCBDb21tb25KUyBzdGFuZGFyZCBkZXBlbmRlbmNpZXMuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGVwTmFtZSA9PT0gXCJyZXF1aXJlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gaGFuZGxlcnMucmVxdWlyZShuYW1lKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwTmFtZSA9PT0gXCJleHBvcnRzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMVxyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBoYW5kbGVycy5leHBvcnRzKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzaW5nRXhwb3J0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09IFwibW9kdWxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMVxyXG4gICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZSA9IGFyZ3NbaV0gPSBoYW5kbGVycy5tb2R1bGUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc1Byb3AoZGVmaW5lZCwgZGVwTmFtZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUHJvcCh3YWl0aW5nLCBkZXBOYW1lKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNQcm9wKGRlZmluaW5nLCBkZXBOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBjYWxsRGVwKGRlcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXAucCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcC5wLmxvYWQobWFwLm4sIG1ha2VSZXF1aXJlKHJlbE5hbWUsIHRydWUpLCBtYWtlTG9hZChkZXBOYW1lKSwge30pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBkZWZpbmVkW2RlcE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobmFtZSArICcgbWlzc2luZyAnICsgZGVwTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldCA9IGNhbGxiYWNrID8gY2FsbGJhY2suYXBwbHkoZGVmaW5lZFtuYW1lXSwgYXJncykgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICBpZiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgLy9JZiBzZXR0aW5nIGV4cG9ydHMgdmlhIFwibW9kdWxlXCIgaXMgaW4gcGxheSxcclxuICAgICAgICAgICAgICAgIC8vZmF2b3IgdGhhdCBvdmVyIHJldHVybiB2YWx1ZSBhbmQgZXhwb3J0cy4gQWZ0ZXIgdGhhdCxcclxuICAgICAgICAgICAgICAgIC8vZmF2b3IgYSBub24tdW5kZWZpbmVkIHJldHVybiB2YWx1ZSBvdmVyIGV4cG9ydHMgdXNlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGNqc01vZHVsZSAmJiBjanNNb2R1bGUuZXhwb3J0cyAhPT0gdW5kZWYgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2pzTW9kdWxlLmV4cG9ydHMgIT09IGRlZmluZWRbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbmVkW25hbWVdID0gY2pzTW9kdWxlLmV4cG9ydHM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJldCAhPT0gdW5kZWYgfHwgIXVzaW5nRXhwb3J0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVXNlIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgZnVuY3Rpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IHJldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSkge1xyXG4gICAgICAgICAgICAvL01heSBqdXN0IGJlIGFuIG9iamVjdCBkZWZpbml0aW9uIGZvciB0aGUgbW9kdWxlLiBPbmx5XHJcbiAgICAgICAgICAgIC8vd29ycnkgYWJvdXQgZGVmaW5pbmcgaWYgaGF2ZSBhIG1vZHVsZSBuYW1lLlxyXG4gICAgICAgICAgICBkZWZpbmVkW25hbWVdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXF1aXJlanMgPSByZXF1aXJlID0gcmVxID0gZnVuY3Rpb24gKGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lLCBmb3JjZVN5bmMsIGFsdCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGVwcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxlcnNbZGVwc10pIHtcclxuICAgICAgICAgICAgICAgIC8vY2FsbGJhY2sgaW4gdGhpcyBjYXNlIGlzIHJlYWxseSByZWxOYW1lXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlcnNbZGVwc10oY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vSnVzdCByZXR1cm4gdGhlIG1vZHVsZSB3YW50ZWQuIEluIHRoaXMgc2NlbmFyaW8sIHRoZVxyXG4gICAgICAgICAgICAvL2RlcHMgYXJnIGlzIHRoZSBtb2R1bGUgbmFtZSwgYW5kIHNlY29uZCBhcmcgKGlmIHBhc3NlZClcclxuICAgICAgICAgICAgLy9pcyBqdXN0IHRoZSByZWxOYW1lLlxyXG4gICAgICAgICAgICAvL05vcm1hbGl6ZSBtb2R1bGUgbmFtZSwgaWYgaXQgY29udGFpbnMgLiBvciAuLlxyXG4gICAgICAgICAgICByZXR1cm4gY2FsbERlcChtYWtlTWFwKGRlcHMsIGNhbGxiYWNrKS5mKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFkZXBzLnNwbGljZSkge1xyXG4gICAgICAgICAgICAvL2RlcHMgaXMgYSBjb25maWcgb2JqZWN0LCBub3QgYW4gYXJyYXkuXHJcbiAgICAgICAgICAgIGNvbmZpZyA9IGRlcHM7XHJcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVwcykge1xyXG4gICAgICAgICAgICAgICAgcmVxKGNvbmZpZy5kZXBzLCBjb25maWcuY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLnNwbGljZSkge1xyXG4gICAgICAgICAgICAgICAgLy9jYWxsYmFjayBpcyBhbiBhcnJheSwgd2hpY2ggbWVhbnMgaXQgaXMgYSBkZXBlbmRlbmN5IGxpc3QuXHJcbiAgICAgICAgICAgICAgICAvL0FkanVzdCBhcmdzIGlmIHRoZXJlIGFyZSBkZXBlbmRlbmNpZXNcclxuICAgICAgICAgICAgICAgIGRlcHMgPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcmVsTmFtZTtcclxuICAgICAgICAgICAgICAgIHJlbE5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVwcyA9IHVuZGVmO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1N1cHBvcnQgcmVxdWlyZShbJ2EnXSlcclxuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuICAgICAgICAvL0lmIHJlbE5hbWUgaXMgYSBmdW5jdGlvbiwgaXQgaXMgYW4gZXJyYmFjayBoYW5kbGVyLFxyXG4gICAgICAgIC8vc28gcmVtb3ZlIGl0LlxyXG4gICAgICAgIGlmICh0eXBlb2YgcmVsTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZWxOYW1lID0gZm9yY2VTeW5jO1xyXG4gICAgICAgICAgICBmb3JjZVN5bmMgPSBhbHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1NpbXVsYXRlIGFzeW5jIGNhbGxiYWNrO1xyXG4gICAgICAgIGlmIChmb3JjZVN5bmMpIHtcclxuICAgICAgICAgICAgbWFpbih1bmRlZiwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vVXNpbmcgYSBub24temVybyB2YWx1ZSBiZWNhdXNlIG9mIGNvbmNlcm4gZm9yIHdoYXQgb2xkIGJyb3dzZXJzXHJcbiAgICAgICAgICAgIC8vZG8sIGFuZCBsYXRlc3QgYnJvd3NlcnMgXCJ1cGdyYWRlXCIgdG8gNCBpZiBsb3dlciB2YWx1ZSBpcyB1c2VkOlxyXG4gICAgICAgICAgICAvL2h0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RpbWVycy5odG1sI2RvbS13aW5kb3d0aW1lcnMtc2V0dGltZW91dDpcclxuICAgICAgICAgICAgLy9JZiB3YW50IGEgdmFsdWUgaW1tZWRpYXRlbHksIHVzZSByZXF1aXJlKCdpZCcpIGluc3RlYWQgLS0gc29tZXRoaW5nXHJcbiAgICAgICAgICAgIC8vdGhhdCB3b3JrcyBpbiBhbG1vbmQgb24gdGhlIGdsb2JhbCBsZXZlbCwgYnV0IG5vdCBndWFyYW50ZWVkIGFuZFxyXG4gICAgICAgICAgICAvL3VubGlrZWx5IHRvIHdvcmsgaW4gb3RoZXIgQU1EIGltcGxlbWVudGF0aW9ucy5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7XHJcbiAgICAgICAgICAgIH0sIDQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlcTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBKdXN0IGRyb3BzIHRoZSBjb25maWcgb24gdGhlIGZsb29yLCBidXQgcmV0dXJucyByZXEgaW4gY2FzZVxyXG4gICAgICogdGhlIGNvbmZpZyByZXR1cm4gdmFsdWUgaXMgdXNlZC5cclxuICAgICAqL1xyXG4gICAgcmVxLmNvbmZpZyA9IGZ1bmN0aW9uIChjZmcpIHtcclxuICAgICAgICByZXR1cm4gcmVxKGNmZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhwb3NlIG1vZHVsZSByZWdpc3RyeSBmb3IgZGVidWdnaW5nIGFuZCB0b29saW5nXHJcbiAgICAgKi9cclxuICAgIHJlcXVpcmVqcy5fZGVmaW5lZCA9IGRlZmluZWQ7XHJcblxyXG4gICAgZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlZSBhbG1vbmQgUkVBRE1FOiBpbmNvcnJlY3QgbW9kdWxlIGJ1aWxkLCBubyBtb2R1bGUgbmFtZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9UaGlzIG1vZHVsZSBtYXkgbm90IGhhdmUgZGVwZW5kZW5jaWVzXHJcbiAgICAgICAgaWYgKCFkZXBzLnNwbGljZSkge1xyXG4gICAgICAgICAgICAvL2RlcHMgaXMgbm90IGFuIGFycmF5LCBzbyBwcm9iYWJseSBtZWFuc1xyXG4gICAgICAgICAgICAvL2FuIG9iamVjdCBsaXRlcmFsIG9yIGZhY3RvcnkgZnVuY3Rpb24gZm9yXHJcbiAgICAgICAgICAgIC8vdGhlIHZhbHVlLiBBZGp1c3QgYXJncy5cclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBkZXBzO1xyXG4gICAgICAgICAgICBkZXBzID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWhhc1Byb3AoZGVmaW5lZCwgbmFtZSkgJiYgIWhhc1Byb3Aod2FpdGluZywgbmFtZSkpIHtcclxuICAgICAgICAgICAgd2FpdGluZ1tuYW1lXSA9IFtuYW1lLCBkZXBzLCBjYWxsYmFja107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkZWZpbmUuYW1kID0ge1xyXG4gICAgICAgIGpRdWVyeTogdHJ1ZVxyXG4gICAgfTtcclxufSgpKTtcclxuXHJcblMyLnJlcXVpcmVqcyA9IHJlcXVpcmVqcztTMi5yZXF1aXJlID0gcmVxdWlyZTtTMi5kZWZpbmUgPSBkZWZpbmU7XHJcbn1cclxufSgpKTtcclxuUzIuZGVmaW5lKFwiYWxtb25kXCIsIGZ1bmN0aW9uKCl7fSk7XHJcblxyXG4vKiBnbG9iYWwgalF1ZXJ5OmZhbHNlLCAkOmZhbHNlICovXHJcblMyLmRlZmluZSgnanF1ZXJ5JyxbXSxmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIF8kID0galF1ZXJ5IHx8ICQ7XHJcblxyXG4gIGlmIChfJCA9PSBudWxsICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgJ1NlbGVjdDI6IEFuIGluc3RhbmNlIG9mIGpRdWVyeSBvciBhIGpRdWVyeS1jb21wYXRpYmxlIGxpYnJhcnkgd2FzIG5vdCAnICtcclxuICAgICAgJ2ZvdW5kLiBNYWtlIHN1cmUgdGhhdCB5b3UgYXJlIGluY2x1ZGluZyBqUXVlcnkgYmVmb3JlIFNlbGVjdDIgb24geW91ciAnICtcclxuICAgICAgJ3dlYiBwYWdlLidcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gXyQ7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3V0aWxzJyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICB2YXIgVXRpbHMgPSB7fTtcclxuXHJcbiAgVXRpbHMuRXh0ZW5kID0gZnVuY3Rpb24gKENoaWxkQ2xhc3MsIFN1cGVyQ2xhc3MpIHtcclxuICAgIHZhciBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICBmdW5jdGlvbiBCYXNlQ29uc3RydWN0b3IgKCkge1xyXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQ2hpbGRDbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBrZXkgaW4gU3VwZXJDbGFzcykge1xyXG4gICAgICBpZiAoX19oYXNQcm9wLmNhbGwoU3VwZXJDbGFzcywga2V5KSkge1xyXG4gICAgICAgIENoaWxkQ2xhc3Nba2V5XSA9IFN1cGVyQ2xhc3Nba2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEJhc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcclxuICAgIENoaWxkQ2xhc3MucHJvdG90eXBlID0gbmV3IEJhc2VDb25zdHJ1Y3RvcigpO1xyXG4gICAgQ2hpbGRDbGFzcy5fX3N1cGVyX18gPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcclxuXHJcbiAgICByZXR1cm4gQ2hpbGRDbGFzcztcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBnZXRNZXRob2RzICh0aGVDbGFzcykge1xyXG4gICAgdmFyIHByb3RvID0gdGhlQ2xhc3MucHJvdG90eXBlO1xyXG5cclxuICAgIHZhciBtZXRob2RzID0gW107XHJcblxyXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBwcm90bykge1xyXG4gICAgICB2YXIgbSA9IHByb3RvW21ldGhvZE5hbWVdO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBtICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChtZXRob2ROYW1lID09PSAnY29uc3RydWN0b3InKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1ldGhvZHMucHVzaChtZXRob2ROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWV0aG9kcztcclxuICB9XHJcblxyXG4gIFV0aWxzLkRlY29yYXRlID0gZnVuY3Rpb24gKFN1cGVyQ2xhc3MsIERlY29yYXRvckNsYXNzKSB7XHJcbiAgICB2YXIgZGVjb3JhdGVkTWV0aG9kcyA9IGdldE1ldGhvZHMoRGVjb3JhdG9yQ2xhc3MpO1xyXG4gICAgdmFyIHN1cGVyTWV0aG9kcyA9IGdldE1ldGhvZHMoU3VwZXJDbGFzcyk7XHJcblxyXG4gICAgZnVuY3Rpb24gRGVjb3JhdGVkQ2xhc3MgKCkge1xyXG4gICAgICB2YXIgdW5zaGlmdCA9IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0O1xyXG5cclxuICAgICAgdmFyIGFyZ0NvdW50ID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yLmxlbmd0aDtcclxuXHJcbiAgICAgIHZhciBjYWxsZWRDb25zdHJ1Y3RvciA9IFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xyXG5cclxuICAgICAgaWYgKGFyZ0NvdW50ID4gMCkge1xyXG4gICAgICAgIHVuc2hpZnQuY2FsbChhcmd1bWVudHMsIFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yKTtcclxuXHJcbiAgICAgICAgY2FsbGVkQ29uc3RydWN0b3IgPSBEZWNvcmF0b3JDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3I7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGxlZENvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgRGVjb3JhdG9yQ2xhc3MuZGlzcGxheU5hbWUgPSBTdXBlckNsYXNzLmRpc3BsYXlOYW1lO1xyXG5cclxuICAgIGZ1bmN0aW9uIGN0ciAoKSB7XHJcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBEZWNvcmF0ZWRDbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBEZWNvcmF0ZWRDbGFzcy5wcm90b3R5cGUgPSBuZXcgY3RyKCk7XHJcblxyXG4gICAgZm9yICh2YXIgbSA9IDA7IG0gPCBzdXBlck1ldGhvZHMubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICB2YXIgc3VwZXJNZXRob2QgPSBzdXBlck1ldGhvZHNbbV07XHJcblxyXG4gICAgICAgIERlY29yYXRlZENsYXNzLnByb3RvdHlwZVtzdXBlck1ldGhvZF0gPVxyXG4gICAgICAgICAgU3VwZXJDbGFzcy5wcm90b3R5cGVbc3VwZXJNZXRob2RdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjYWxsZWRNZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAvLyBTdHViIG91dCB0aGUgb3JpZ2luYWwgbWV0aG9kIGlmIGl0J3Mgbm90IGRlY29yYXRpbmcgYW4gYWN0dWFsIG1ldGhvZFxyXG4gICAgICB2YXIgb3JpZ2luYWxNZXRob2QgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgICAgIGlmIChtZXRob2ROYW1lIGluIERlY29yYXRlZENsYXNzLnByb3RvdHlwZSkge1xyXG4gICAgICAgIG9yaWdpbmFsTWV0aG9kID0gRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZGVjb3JhdGVkTWV0aG9kID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xyXG5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zaGlmdCA9IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0O1xyXG5cclxuICAgICAgICB1bnNoaWZ0LmNhbGwoYXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvcmF0ZWRNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkZWNvcmF0ZWRNZXRob2RzLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBkZWNvcmF0ZWRNZXRob2QgPSBkZWNvcmF0ZWRNZXRob2RzW2RdO1xyXG5cclxuICAgICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW2RlY29yYXRlZE1ldGhvZF0gPSBjYWxsZWRNZXRob2QoZGVjb3JhdGVkTWV0aG9kKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gRGVjb3JhdGVkQ2xhc3M7XHJcbiAgfTtcclxuXHJcbiAgdmFyIE9ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gIH07XHJcblxyXG4gIE9ic2VydmFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyB8fCB7fTtcclxuXHJcbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gW2NhbGxiYWNrXTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcbiAgICB2YXIgcGFyYW1zID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG5cclxuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XHJcblxyXG4gICAgLy8gUGFyYW1zIHNob3VsZCBhbHdheXMgY29tZSBpbiBhcyBhbiBhcnJheVxyXG4gICAgaWYgKHBhcmFtcyA9PSBudWxsKSB7XHJcbiAgICAgIHBhcmFtcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBhcmd1bWVudHMgdG8gdGhlIGV2ZW50LCB1c2UgYSB0ZW1wb3Jhcnkgb2JqZWN0XHJcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBwYXJhbXMucHVzaCh7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBgX3R5cGVgIG9mIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIGV2ZW50XHJcbiAgICBwYXJhbXNbMF0uX3R5cGUgPSBldmVudDtcclxuXHJcbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5pbnZva2UodGhpcy5saXN0ZW5lcnNbZXZlbnRdLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgnKicgaW4gdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5pbnZva2UodGhpcy5saXN0ZW5lcnNbJyonXSwgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobGlzdGVuZXJzLCBwYXJhbXMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgVXRpbHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XHJcblxyXG4gIFV0aWxzLmdlbmVyYXRlQ2hhcnMgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XHJcbiAgICB2YXIgY2hhcnMgPSAnJztcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciByYW5kb21DaGFyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYpO1xyXG4gICAgICBjaGFycyArPSByYW5kb21DaGFyLnRvU3RyaW5nKDM2KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hhcnM7XHJcbiAgfTtcclxuXHJcbiAgVXRpbHMuYmluZCA9IGZ1bmN0aW9uIChmdW5jLCBjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIFV0aWxzLl9jb252ZXJ0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBmb3IgKHZhciBvcmlnaW5hbEtleSBpbiBkYXRhKSB7XHJcbiAgICAgIHZhciBrZXlzID0gb3JpZ2luYWxLZXkuc3BsaXQoJy0nKTtcclxuXHJcbiAgICAgIHZhciBkYXRhTGV2ZWwgPSBkYXRhO1xyXG5cclxuICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwga2V5cy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xyXG5cclxuICAgICAgICAvLyBMb3dlcmNhc2UgdGhlIGZpcnN0IGxldHRlclxyXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGRhc2gtc2VwYXJhdGVkIGJlY29tZXMgY2FtZWxDYXNlXHJcbiAgICAgICAga2V5ID0ga2V5LnN1YnN0cmluZygwLCAxKS50b0xvd2VyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcclxuXHJcbiAgICAgICAgaWYgKCEoa2V5IGluIGRhdGFMZXZlbCkpIHtcclxuICAgICAgICAgIGRhdGFMZXZlbFtrZXldID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoayA9PSBrZXlzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIGRhdGFMZXZlbFtrZXldID0gZGF0YVtvcmlnaW5hbEtleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRhTGV2ZWwgPSBkYXRhTGV2ZWxba2V5XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVsZXRlIGRhdGFbb3JpZ2luYWxLZXldO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH07XHJcblxyXG4gIFV0aWxzLmhhc1Njcm9sbCA9IGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcclxuICAgIC8vIEFkYXB0ZWQgZnJvbSB0aGUgZnVuY3Rpb24gY3JlYXRlZCBieSBAU2hhZG93U2NyaXB0ZXJcclxuICAgIC8vIGFuZCBhZGFwdGVkIGJ5IEBCaWxsQmFycnkgb24gdGhlIFN0YWNrIEV4Y2hhbmdlIENvZGUgUmV2aWV3IHdlYnNpdGUuXHJcbiAgICAvLyBUaGUgb3JpZ2luYWwgY29kZSBjYW4gYmUgZm91bmQgYXRcclxuICAgIC8vIGh0dHA6Ly9jb2RlcmV2aWV3LnN0YWNrZXhjaGFuZ2UuY29tL3EvMTMzMzhcclxuICAgIC8vIGFuZCB3YXMgZGVzaWduZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBTaXp6bGUgc2VsZWN0b3IgZW5naW5lLlxyXG5cclxuICAgIHZhciAkZWwgPSAkKGVsKTtcclxuICAgIHZhciBvdmVyZmxvd1ggPSBlbC5zdHlsZS5vdmVyZmxvd1g7XHJcbiAgICB2YXIgb3ZlcmZsb3dZID0gZWwuc3R5bGUub3ZlcmZsb3dZO1xyXG5cclxuICAgIC8vQ2hlY2sgYm90aCB4IGFuZCB5IGRlY2xhcmF0aW9uc1xyXG4gICAgaWYgKG92ZXJmbG93WCA9PT0gb3ZlcmZsb3dZICYmXHJcbiAgICAgICAgKG92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgb3ZlcmZsb3dZID09PSAndmlzaWJsZScpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBvdmVyZmxvd1kgPT09ICdzY3JvbGwnKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoJGVsLmlubmVySGVpZ2h0KCkgPCBlbC5zY3JvbGxIZWlnaHQgfHxcclxuICAgICAgJGVsLmlubmVyV2lkdGgoKSA8IGVsLnNjcm9sbFdpZHRoKTtcclxuICB9O1xyXG5cclxuICBVdGlscy5lc2NhcGVNYXJrdXAgPSBmdW5jdGlvbiAobWFya3VwKSB7XHJcbiAgICB2YXIgcmVwbGFjZU1hcCA9IHtcclxuICAgICAgJ1xcXFwnOiAnJiM5MjsnLFxyXG4gICAgICAnJic6ICcmYW1wOycsXHJcbiAgICAgICc8JzogJyZsdDsnLFxyXG4gICAgICAnPic6ICcmZ3Q7JyxcclxuICAgICAgJ1wiJzogJyZxdW90OycsXHJcbiAgICAgICdcXCcnOiAnJiMzOTsnLFxyXG4gICAgICAnLyc6ICcmIzQ3OydcclxuICAgIH07XHJcblxyXG4gICAgLy8gRG8gbm90IHRyeSB0byBlc2NhcGUgdGhlIG1hcmt1cCBpZiBpdCdzIG5vdCBhIHN0cmluZ1xyXG4gICAgaWYgKHR5cGVvZiBtYXJrdXAgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBtYXJrdXA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFN0cmluZyhtYXJrdXApLnJlcGxhY2UoL1smPD5cIidcXC9cXFxcXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcclxuICAgICAgcmV0dXJuIHJlcGxhY2VNYXBbbWF0Y2hdO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gQXBwZW5kIGFuIGFycmF5IG9mIGpRdWVyeSBub2RlcyB0byBhIGdpdmVuIGVsZW1lbnQuXHJcbiAgVXRpbHMuYXBwZW5kTWFueSA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJG5vZGVzKSB7XHJcbiAgICAvLyBqUXVlcnkgMS43LnggZG9lcyBub3Qgc3VwcG9ydCAkLmZuLmFwcGVuZCgpIHdpdGggYW4gYXJyYXlcclxuICAgIC8vIEZhbGwgYmFjayB0byBhIGpRdWVyeSBvYmplY3QgY29sbGVjdGlvbiB1c2luZyAkLmZuLmFkZCgpXHJcbiAgICBpZiAoJC5mbi5qcXVlcnkuc3Vic3RyKDAsIDMpID09PSAnMS43Jykge1xyXG4gICAgICB2YXIgJGpxTm9kZXMgPSAkKCk7XHJcblxyXG4gICAgICAkLm1hcCgkbm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgJGpxTm9kZXMgPSAkanFOb2Rlcy5hZGQobm9kZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJG5vZGVzID0gJGpxTm9kZXM7XHJcbiAgICB9XHJcblxyXG4gICAgJGVsZW1lbnQuYXBwZW5kKCRub2Rlcyk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFV0aWxzO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9yZXN1bHRzJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uICgkLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIFJlc3VsdHMgKCRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcikge1xyXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YUFkYXB0ZXI7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIFJlc3VsdHMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoUmVzdWx0cywgVXRpbHMuT2JzZXJ2YWJsZSk7XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkcmVzdWx0cyA9ICQoXHJcbiAgICAgICc8dWwgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnNcIiByb2xlPVwidHJlZVwiPjwvdWw+J1xyXG4gICAgKTtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnbXVsdGlwbGUnKSkge1xyXG4gICAgICAkcmVzdWx0cy5hdHRyKCdhcmlhLW11bHRpc2VsZWN0YWJsZScsICd0cnVlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kcmVzdWx0cyA9ICRyZXN1bHRzO1xyXG5cclxuICAgIHJldHVybiAkcmVzdWx0cztcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuJHJlc3VsdHMuZW1wdHkoKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5kaXNwbGF5TWVzc2FnZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgIHZhciBlc2NhcGVNYXJrdXAgPSB0aGlzLm9wdGlvbnMuZ2V0KCdlc2NhcGVNYXJrdXAnKTtcclxuXHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICB0aGlzLmhpZGVMb2FkaW5nKCk7XHJcblxyXG4gICAgdmFyICRtZXNzYWdlID0gJChcclxuICAgICAgJzxsaSByb2xlPVwidHJlZWl0ZW1cIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIicgK1xyXG4gICAgICAnIGNsYXNzPVwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb25cIj48L2xpPidcclxuICAgICk7XHJcblxyXG4gICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0cmFuc2xhdGlvbnMnKS5nZXQocGFyYW1zLm1lc3NhZ2UpO1xyXG5cclxuICAgICRtZXNzYWdlLmFwcGVuZChcclxuICAgICAgZXNjYXBlTWFya3VwKFxyXG4gICAgICAgIG1lc3NhZ2UocGFyYW1zLmFyZ3MpXHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgJG1lc3NhZ2VbMF0uY2xhc3NOYW1lICs9ICcgc2VsZWN0Mi1yZXN1bHRzX19tZXNzYWdlJztcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLmFwcGVuZCgkbWVzc2FnZSk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuaGlkZU1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kcmVzdWx0cy5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzX19tZXNzYWdlJykucmVtb3ZlKCk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcclxuXHJcbiAgICB2YXIgJG9wdGlvbnMgPSBbXTtcclxuXHJcbiAgICBpZiAoZGF0YS5yZXN1bHRzID09IG51bGwgfHwgZGF0YS5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBpZiAodGhpcy4kcmVzdWx0cy5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzdWx0czptZXNzYWdlJywge1xyXG4gICAgICAgICAgbWVzc2FnZTogJ25vUmVzdWx0cydcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGRhdGEucmVzdWx0cyA9IHRoaXMuc29ydChkYXRhLnJlc3VsdHMpO1xyXG5cclxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5yZXN1bHRzLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gZGF0YS5yZXN1bHRzW2RdO1xyXG5cclxuICAgICAgdmFyICRvcHRpb24gPSB0aGlzLm9wdGlvbihpdGVtKTtcclxuXHJcbiAgICAgICRvcHRpb25zLnB1c2goJG9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQoJG9wdGlvbnMpO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRyZXN1bHRzLCAkZHJvcGRvd24pIHtcclxuICAgIHZhciAkcmVzdWx0c0NvbnRhaW5lciA9ICRkcm9wZG93bi5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzJyk7XHJcbiAgICAkcmVzdWx0c0NvbnRhaW5lci5hcHBlbmQoJHJlc3VsdHMpO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIHNvcnRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ3NvcnRlcicpO1xyXG5cclxuICAgIHJldHVybiBzb3J0ZXIoZGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuaGlnaGxpZ2h0Rmlyc3RJdGVtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRvcHRpb25zID0gdGhpcy4kcmVzdWx0c1xyXG4gICAgICAuZmluZCgnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyk7XHJcblxyXG4gICAgdmFyICRzZWxlY3RlZCA9ICRvcHRpb25zLmZpbHRlcignW2FyaWEtc2VsZWN0ZWQ9dHJ1ZV0nKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGVyZSBhcmUgYW55IHNlbGVjdGVkIG9wdGlvbnNcclxuICAgIGlmICgkc2VsZWN0ZWQubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgc2VsZWN0ZWQgb3B0aW9ucywgaGlnaGxpZ2h0IHRoZSBmaXJzdFxyXG4gICAgICAkc2VsZWN0ZWQuZmlyc3QoKS50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gc2VsZWN0ZWQgb3B0aW9ucywgaGlnaGxpZ2h0IHRoZSBmaXJzdCBvcHRpb25cclxuICAgICAgLy8gaW4gdGhlIGRyb3Bkb3duXHJcbiAgICAgICRvcHRpb25zLmZpcnN0KCkudHJpZ2dlcignbW91c2VlbnRlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZW5zdXJlSGlnaGxpZ2h0VmlzaWJsZSgpO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnNldENsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5kYXRhLmN1cnJlbnQoZnVuY3Rpb24gKHNlbGVjdGVkKSB7XHJcbiAgICAgIHZhciBzZWxlY3RlZElkcyA9ICQubWFwKHNlbGVjdGVkLCBmdW5jdGlvbiAocykge1xyXG4gICAgICAgIHJldHVybiBzLmlkLnRvU3RyaW5nKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0c1xyXG4gICAgICAgIC5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25bYXJpYS1zZWxlY3RlZF0nKTtcclxuXHJcbiAgICAgICRvcHRpb25zLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIGl0ZW0gPSAkLmRhdGEodGhpcywgJ2RhdGEnKTtcclxuXHJcbiAgICAgICAgLy8gaWQgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGEgc3RyaW5nIHdoZW4gY29tcGFyaW5nXHJcbiAgICAgICAgdmFyIGlkID0gJycgKyBpdGVtLmlkO1xyXG5cclxuICAgICAgICBpZiAoKGl0ZW0uZWxlbWVudCAhPSBudWxsICYmIGl0ZW0uZWxlbWVudC5zZWxlY3RlZCkgfHxcclxuICAgICAgICAgICAgKGl0ZW0uZWxlbWVudCA9PSBudWxsICYmICQuaW5BcnJheShpZCwgc2VsZWN0ZWRJZHMpID4gLTEpKSB7XHJcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnNob3dMb2FkaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgdGhpcy5oaWRlTG9hZGluZygpO1xyXG5cclxuICAgIHZhciBsb2FkaW5nTW9yZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RyYW5zbGF0aW9ucycpLmdldCgnc2VhcmNoaW5nJyk7XHJcblxyXG4gICAgdmFyIGxvYWRpbmcgPSB7XHJcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxyXG4gICAgICBsb2FkaW5nOiB0cnVlLFxyXG4gICAgICB0ZXh0OiBsb2FkaW5nTW9yZShwYXJhbXMpXHJcbiAgICB9O1xyXG4gICAgdmFyICRsb2FkaW5nID0gdGhpcy5vcHRpb24obG9hZGluZyk7XHJcbiAgICAkbG9hZGluZy5jbGFzc05hbWUgKz0gJyBsb2FkaW5nLXJlc3VsdHMnO1xyXG5cclxuICAgIHRoaXMuJHJlc3VsdHMucHJlcGVuZCgkbG9hZGluZyk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuaGlkZUxvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5sb2FkaW5nLXJlc3VsdHMnKS5yZW1vdmUoKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICBvcHRpb24uY2xhc3NOYW1lID0gJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uJztcclxuXHJcbiAgICB2YXIgYXR0cnMgPSB7XHJcbiAgICAgICdyb2xlJzogJ3RyZWVpdGVtJyxcclxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChkYXRhLmRpc2FibGVkKSB7XHJcbiAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1zZWxlY3RlZCddO1xyXG4gICAgICBhdHRyc1snYXJpYS1kaXNhYmxlZCddID0gJ3RydWUnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLmlkID09IG51bGwpIHtcclxuICAgICAgZGVsZXRlIGF0dHJzWydhcmlhLXNlbGVjdGVkJ107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuX3Jlc3VsdElkICE9IG51bGwpIHtcclxuICAgICAgb3B0aW9uLmlkID0gZGF0YS5fcmVzdWx0SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEudGl0bGUpIHtcclxuICAgICAgb3B0aW9uLnRpdGxlID0gZGF0YS50aXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xyXG4gICAgICBhdHRycy5yb2xlID0gJ2dyb3VwJztcclxuICAgICAgYXR0cnNbJ2FyaWEtbGFiZWwnXSA9IGRhdGEudGV4dDtcclxuICAgICAgZGVsZXRlIGF0dHJzWydhcmlhLXNlbGVjdGVkJ107XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgYXR0ciBpbiBhdHRycykge1xyXG4gICAgICB2YXIgdmFsID0gYXR0cnNbYXR0cl07XHJcblxyXG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKGF0dHIsIHZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcclxuICAgICAgdmFyICRvcHRpb24gPSAkKG9wdGlvbik7XHJcblxyXG4gICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcclxuICAgICAgbGFiZWwuY2xhc3NOYW1lID0gJ3NlbGVjdDItcmVzdWx0c19fZ3JvdXAnO1xyXG5cclxuICAgICAgdmFyICRsYWJlbCA9ICQobGFiZWwpO1xyXG4gICAgICB0aGlzLnRlbXBsYXRlKGRhdGEsIGxhYmVsKTtcclxuXHJcbiAgICAgIHZhciAkY2hpbGRyZW4gPSBbXTtcclxuXHJcbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgZGF0YS5jaGlsZHJlbi5sZW5ndGg7IGMrKykge1xyXG4gICAgICAgIHZhciBjaGlsZCA9IGRhdGEuY2hpbGRyZW5bY107XHJcblxyXG4gICAgICAgIHZhciAkY2hpbGQgPSB0aGlzLm9wdGlvbihjaGlsZCk7XHJcblxyXG4gICAgICAgICRjaGlsZHJlbi5wdXNoKCRjaGlsZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciAkY2hpbGRyZW5Db250YWluZXIgPSAkKCc8dWw+PC91bD4nLCB7XHJcbiAgICAgICAgJ2NsYXNzJzogJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9ucyBzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnMtLW5lc3RlZCdcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkY2hpbGRyZW5Db250YWluZXIuYXBwZW5kKCRjaGlsZHJlbik7XHJcblxyXG4gICAgICAkb3B0aW9uLmFwcGVuZChsYWJlbCk7XHJcbiAgICAgICRvcHRpb24uYXBwZW5kKCRjaGlsZHJlbkNvbnRhaW5lcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRlbXBsYXRlKGRhdGEsIG9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgJC5kYXRhKG9wdGlvbiwgJ2RhdGEnLCBkYXRhKTtcclxuXHJcbiAgICByZXR1cm4gb3B0aW9uO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLmF0dHIoJ2lkJywgaWQpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphbGwnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYuY2xlYXIoKTtcclxuICAgICAgc2VsZi5hcHBlbmQocGFyYW1zLmRhdGEpO1xyXG5cclxuICAgICAgaWYgKGNvbnRhaW5lci5pc09wZW4oKSkge1xyXG4gICAgICAgIHNlbGYuc2V0Q2xhc3NlcygpO1xyXG4gICAgICAgIHNlbGYuaGlnaGxpZ2h0Rmlyc3RJdGVtKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphcHBlbmQnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYuYXBwZW5kKHBhcmFtcy5kYXRhKTtcclxuXHJcbiAgICAgIGlmIChjb250YWluZXIuaXNPcGVuKCkpIHtcclxuICAgICAgICBzZWxmLnNldENsYXNzZXMoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdxdWVyeScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgc2VsZi5oaWRlTWVzc2FnZXMoKTtcclxuICAgICAgc2VsZi5zaG93TG9hZGluZyhwYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcclxuICAgICAgc2VsZi5oaWdobGlnaHRGaXJzdEl0ZW0oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcclxuICAgICAgc2VsZi5oaWdobGlnaHRGaXJzdEl0ZW0oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gV2hlbiB0aGUgZHJvcGRvd24gaXMgb3BlbiwgYXJpYS1leHBlbmRlZD1cInRydWVcIlxyXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xyXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcclxuICAgICAgc2VsZi5lbnN1cmVIaWdobGlnaHRWaXNpYmxlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBjbG9zZWQsIGFyaWEtZXhwZW5kZWQ9XCJmYWxzZVwiXHJcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xyXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgc2VsZi4kcmVzdWx0cy5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czp0b2dnbGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgICAgaWYgKCRoaWdobGlnaHRlZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRoaWdobGlnaHRlZC50cmlnZ2VyKCdtb3VzZXVwJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6c2VsZWN0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJGhpZ2hsaWdodGVkID0gc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcclxuXHJcbiAgICAgIGlmICgkaGlnaGxpZ2h0ZWQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZGF0YSA9ICRoaWdobGlnaHRlZC5kYXRhKCdkYXRhJyk7XHJcblxyXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnKSA9PSAndHJ1ZScpIHtcclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ2Nsb3NlJywge30pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xyXG4gICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6cHJldmlvdXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcclxuXHJcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xyXG5cclxuICAgICAgLy8gSWYgd2UgYXJlIGFscmVhZHkgYXQgdGUgdG9wLCBkb24ndCBtb3ZlIGZ1cnRoZXJcclxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XHJcblxyXG4gICAgICAvLyBJZiBub25lIGFyZSBoaWdobGlnaHRlZCwgaGlnaGxpZ2h0IHRoZSBmaXJzdFxyXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIG5leHRJbmRleCA9IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciAkbmV4dCA9ICRvcHRpb25zLmVxKG5leHRJbmRleCk7XHJcblxyXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XHJcblxyXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHNlbGYuJHJlc3VsdHMub2Zmc2V0KCkudG9wO1xyXG4gICAgICB2YXIgbmV4dFRvcCA9ICRuZXh0Lm9mZnNldCgpLnRvcDtcclxuICAgICAgdmFyIG5leHRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpICsgKG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0KTtcclxuXHJcbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcclxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuICAgICAgfSBlbHNlIGlmIChuZXh0VG9wIC0gY3VycmVudE9mZnNldCA8IDApIHtcclxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcChuZXh0T2Zmc2V0KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOm5leHQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcclxuXHJcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xyXG5cclxuICAgICAgdmFyIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XHJcblxyXG4gICAgICAvLyBJZiB3ZSBhcmUgYXQgdGhlIGxhc3Qgb3B0aW9uLCBzdGF5IHRoZXJlXHJcbiAgICAgIGlmIChuZXh0SW5kZXggPj0gJG9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgJG5leHQgPSAkb3B0aW9ucy5lcShuZXh0SW5kZXgpO1xyXG5cclxuICAgICAgJG5leHQudHJpZ2dlcignbW91c2VlbnRlcicpO1xyXG5cclxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLm9mZnNldCgpLnRvcCArXHJcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5vdXRlckhlaWdodChmYWxzZSk7XHJcbiAgICAgIHZhciBuZXh0Qm90dG9tID0gJG5leHQub2Zmc2V0KCkudG9wICsgJG5leHQub3V0ZXJIZWlnaHQoZmFsc2UpO1xyXG4gICAgICB2YXIgbmV4dE9mZnNldCA9IHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgKyBuZXh0Qm90dG9tIC0gY3VycmVudE9mZnNldDtcclxuXHJcbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcclxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuICAgICAgfSBlbHNlIGlmIChuZXh0Qm90dG9tID4gY3VycmVudE9mZnNldCkge1xyXG4gICAgICAgIHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKG5leHRPZmZzZXQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHBhcmFtcy5lbGVtZW50LmFkZENsYXNzKCdzZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0taGlnaGxpZ2h0ZWQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czptZXNzYWdlJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmRpc3BsYXlNZXNzYWdlKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoJC5mbi5tb3VzZXdoZWVsKSB7XHJcbiAgICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNld2hlZWwnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciB0b3AgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgICAgICB2YXIgYm90dG9tID0gc2VsZi4kcmVzdWx0cy5nZXQoMCkuc2Nyb2xsSGVpZ2h0IC0gdG9wICsgZS5kZWx0YVk7XHJcblxyXG4gICAgICAgIHZhciBpc0F0VG9wID0gZS5kZWx0YVkgPiAwICYmIHRvcCAtIGUuZGVsdGFZIDw9IDA7XHJcbiAgICAgICAgdmFyIGlzQXRCb3R0b20gPSBlLmRlbHRhWSA8IDAgJiYgYm90dG9tIDw9IHNlbGYuJHJlc3VsdHMuaGVpZ2h0KCk7XHJcblxyXG4gICAgICAgIGlmIChpc0F0VG9wKSB7XHJcbiAgICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuXHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBdEJvdHRvbSkge1xyXG4gICAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoXHJcbiAgICAgICAgICAgIHNlbGYuJHJlc3VsdHMuZ2V0KDApLnNjcm9sbEhlaWdodCAtIHNlbGYuJHJlc3VsdHMuaGVpZ2h0KClcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNldXAnLCAnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKCdkYXRhJyk7XHJcblxyXG4gICAgICBpZiAoJHRoaXMuYXR0cignYXJpYS1zZWxlY3RlZCcpID09PSAndHJ1ZScpIHtcclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnbXVsdGlwbGUnKSkge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCd1bnNlbGVjdCcsIHtcclxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdjbG9zZScsIHt9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3QnLCB7XHJcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxyXG4gICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLm9uKCdtb3VzZWVudGVyJywgJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvblthcmlhLXNlbGVjdGVkXScsXHJcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoJ2RhdGEnKTtcclxuXHJcbiAgICAgIHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKClcclxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWhpZ2hsaWdodGVkJyk7XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6Zm9jdXMnLCB7XHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBlbGVtZW50OiAkKHRoaXMpXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRoaWdobGlnaHRlZCA9IHRoaXMuJHJlc3VsdHNcclxuICAgIC5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWhpZ2hsaWdodGVkJyk7XHJcblxyXG4gICAgcmV0dXJuICRoaWdobGlnaHRlZDtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kcmVzdWx0cy5yZW1vdmUoKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5lbnN1cmVIaWdobGlnaHRWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRoaWdobGlnaHRlZCA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XHJcblxyXG4gICAgaWYgKCRoaWdobGlnaHRlZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkb3B0aW9ucyA9IHRoaXMuJHJlc3VsdHMuZmluZCgnW2FyaWEtc2VsZWN0ZWRdJyk7XHJcblxyXG4gICAgdmFyIGN1cnJlbnRJbmRleCA9ICRvcHRpb25zLmluZGV4KCRoaWdobGlnaHRlZCk7XHJcblxyXG4gICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLiRyZXN1bHRzLm9mZnNldCgpLnRvcDtcclxuICAgIHZhciBuZXh0VG9wID0gJGhpZ2hsaWdodGVkLm9mZnNldCgpLnRvcDtcclxuICAgIHZhciBuZXh0T2Zmc2V0ID0gdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AoKSArIChuZXh0VG9wIC0gY3VycmVudE9mZnNldCk7XHJcblxyXG4gICAgdmFyIG9mZnNldERlbHRhID0gbmV4dFRvcCAtIGN1cnJlbnRPZmZzZXQ7XHJcbiAgICBuZXh0T2Zmc2V0IC09ICRoaWdobGlnaHRlZC5vdXRlckhlaWdodChmYWxzZSkgKiAyO1xyXG5cclxuICAgIGlmIChjdXJyZW50SW5kZXggPD0gMikge1xyXG4gICAgICB0aGlzLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuICAgIH0gZWxzZSBpZiAob2Zmc2V0RGVsdGEgPiB0aGlzLiRyZXN1bHRzLm91dGVySGVpZ2h0KCkgfHwgb2Zmc2V0RGVsdGEgPCAwKSB7XHJcbiAgICAgIHRoaXMuJHJlc3VsdHMuc2Nyb2xsVG9wKG5leHRPZmZzZXQpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnRlbXBsYXRlID0gZnVuY3Rpb24gKHJlc3VsdCwgY29udGFpbmVyKSB7XHJcbiAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0ZW1wbGF0ZVJlc3VsdCcpO1xyXG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xyXG5cclxuICAgIHZhciBjb250ZW50ID0gdGVtcGxhdGUocmVzdWx0LCBjb250YWluZXIpO1xyXG5cclxuICAgIGlmIChjb250ZW50ID09IG51bGwpIHtcclxuICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gZXNjYXBlTWFya3VwKGNvbnRlbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJChjb250YWluZXIpLmFwcGVuZChjb250ZW50KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4gUmVzdWx0cztcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIva2V5cycsW1xyXG5cclxuXSwgZnVuY3Rpb24gKCkge1xyXG4gIHZhciBLRVlTID0ge1xyXG4gICAgQkFDS1NQQUNFOiA4LFxyXG4gICAgVEFCOiA5LFxyXG4gICAgRU5URVI6IDEzLFxyXG4gICAgU0hJRlQ6IDE2LFxyXG4gICAgQ1RSTDogMTcsXHJcbiAgICBBTFQ6IDE4LFxyXG4gICAgRVNDOiAyNyxcclxuICAgIFNQQUNFOiAzMixcclxuICAgIFBBR0VfVVA6IDMzLFxyXG4gICAgUEFHRV9ET1dOOiAzNCxcclxuICAgIEVORDogMzUsXHJcbiAgICBIT01FOiAzNixcclxuICAgIExFRlQ6IDM3LFxyXG4gICAgVVA6IDM4LFxyXG4gICAgUklHSFQ6IDM5LFxyXG4gICAgRE9XTjogNDAsXHJcbiAgICBERUxFVEU6IDQ2XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEtFWVM7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9iYXNlJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4uL3V0aWxzJyxcclxuICAnLi4va2V5cydcclxuXSwgZnVuY3Rpb24gKCQsIFV0aWxzLCBLRVlTKSB7XHJcbiAgZnVuY3Rpb24gQmFzZVNlbGVjdGlvbiAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgQmFzZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChCYXNlU2VsZWN0aW9uLCBVdGlscy5PYnNlcnZhYmxlKTtcclxuXHJcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRzZWxlY3Rpb24gPSAkKFxyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvblwiIHJvbGU9XCJjb21ib2JveFwiICcgK1xyXG4gICAgICAnIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+JyArXHJcbiAgICAgICc8L3NwYW4+J1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl90YWJpbmRleCA9IDA7XHJcblxyXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZGF0YSgnb2xkLXRhYmluZGV4JykgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl90YWJpbmRleCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnb2xkLXRhYmluZGV4Jyk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX3RhYmluZGV4ID0gdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcpO1xyXG4gICAgfVxyXG5cclxuICAgICRzZWxlY3Rpb24uYXR0cigndGl0bGUnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJykpO1xyXG4gICAgJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsIHRoaXMuX3RhYmluZGV4KTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24gPSAkc2VsZWN0aW9uO1xyXG5cclxuICAgIHJldHVybiAkc2VsZWN0aW9uO1xyXG4gIH07XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1jb250YWluZXInO1xyXG4gICAgdmFyIHJlc3VsdHNJZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0cyc7XHJcblxyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcblxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKCdmb2N1cycsIGV2dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2JsdXInLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuX2hhbmRsZUJsdXIoZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XHJcblxyXG4gICAgICBpZiAoZXZ0LndoaWNoID09PSBLRVlTLlNQQUNFKSB7XHJcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIHBhcmFtcy5kYXRhLl9yZXN1bHRJZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3NlbGVjdGlvbjp1cGRhdGUnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYudXBkYXRlKHBhcmFtcy5kYXRhKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gV2hlbiB0aGUgZHJvcGRvd24gaXMgb3BlbiwgYXJpYS1leHBhbmRlZD1cInRydWVcIlxyXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLW93bnMnLCByZXN1bHRzSWQpO1xyXG5cclxuICAgICAgc2VsZi5fYXR0YWNoQ2xvc2VIYW5kbGVyKGNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBjbG9zZWQsIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLnJlbW92ZUF0dHIoJ2FyaWEtb3ducycpO1xyXG5cclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmZvY3VzKCk7XHJcblxyXG4gICAgICBzZWxmLl9kZXRhY2hDbG9zZUhhbmRsZXIoY29udGFpbmVyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignZW5hYmxlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cigndGFiaW5kZXgnLCBzZWxmLl90YWJpbmRleCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Rpc2FibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsICctMScpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuX2hhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgLy8gVGhpcyBuZWVkcyB0byBiZSBkZWxheWVkIGFzIHRoZSBhY3RpdmUgZWxlbWVudCBpcyB0aGUgYm9keSB3aGVuIHRoZSB0YWJcclxuICAgIC8vIGtleSBpcyBwcmVzc2VkLCBwb3NzaWJseSBhbG9uZyB3aXRoIG90aGVycy5cclxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBgYmx1cmAgaWYgdGhlIGZvY3VzIGlzIHN0aWxsIGluIHRoZSBzZWxlY3Rpb25cclxuICAgICAgaWYgKFxyXG4gICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IHNlbGYuJHNlbGVjdGlvblswXSkgfHxcclxuICAgICAgICAoJC5jb250YWlucyhzZWxmLiRzZWxlY3Rpb25bMF0sIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcignYmx1cicsIGV2dCk7XHJcbiAgICB9LCAxKTtcclxuICB9O1xyXG5cclxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5fYXR0YWNoQ2xvc2VIYW5kbGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICQoZG9jdW1lbnQuYm9keSkub24oJ21vdXNlZG93bi5zZWxlY3QyLicgKyBjb250YWluZXIuaWQsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCk7XHJcblxyXG4gICAgICB2YXIgJHNlbGVjdCA9ICR0YXJnZXQuY2xvc2VzdCgnLnNlbGVjdDInKTtcclxuXHJcbiAgICAgIHZhciAkYWxsID0gJCgnLnNlbGVjdDIuc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcclxuXHJcbiAgICAgICRhbGwuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMgPT0gJHNlbGVjdFswXSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJHRoaXMuZGF0YSgnZWxlbWVudCcpO1xyXG5cclxuICAgICAgICAkZWxlbWVudC5zZWxlY3QyKCdjbG9zZScpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLl9kZXRhY2hDbG9zZUhhbmRsZXIgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAkKGRvY3VtZW50LmJvZHkpLm9mZignbW91c2Vkb3duLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZCk7XHJcbiAgfTtcclxuXHJcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoJHNlbGVjdGlvbiwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyICRzZWxlY3Rpb25Db250YWluZXIgPSAkY29udGFpbmVyLmZpbmQoJy5zZWxlY3Rpb24nKTtcclxuICAgICRzZWxlY3Rpb25Db250YWluZXIuYXBwZW5kKCRzZWxlY3Rpb24pO1xyXG4gIH07XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLl9kZXRhY2hDbG9zZUhhbmRsZXIodGhpcy5jb250YWluZXIpO1xyXG4gIH07XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgdXBkYXRlYCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuJyk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEJhc2VTZWxlY3Rpb247XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9zaW5nbGUnLFtcclxuICAnanF1ZXJ5JyxcclxuICAnLi9iYXNlJyxcclxuICAnLi4vdXRpbHMnLFxyXG4gICcuLi9rZXlzJ1xyXG5dLCBmdW5jdGlvbiAoJCwgQmFzZVNlbGVjdGlvbiwgVXRpbHMsIEtFWVMpIHtcclxuICBmdW5jdGlvbiBTaW5nbGVTZWxlY3Rpb24gKCkge1xyXG4gICAgU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgVXRpbHMuRXh0ZW5kKFNpbmdsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XHJcblxyXG4gIFNpbmdsZVNlbGVjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRzZWxlY3Rpb24gPSBTaW5nbGVTZWxlY3Rpb24uX19zdXBlcl9fLnJlbmRlci5jYWxsKHRoaXMpO1xyXG5cclxuICAgICRzZWxlY3Rpb24uYWRkQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUnKTtcclxuXHJcbiAgICAkc2VsZWN0aW9uLmh0bWwoXHJcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiPjwvc3Bhbj4nICtcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93XCIgcm9sZT1cInByZXNlbnRhdGlvblwiPicgK1xyXG4gICAgICAgICc8YiByb2xlPVwicHJlc2VudGF0aW9uXCI+PC9iPicgK1xyXG4gICAgICAnPC9zcGFuPidcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XHJcbiAgfTtcclxuXHJcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIFNpbmdsZVNlbGVjdGlvbi5fX3N1cGVyX18uYmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctY29udGFpbmVyJztcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLmF0dHIoJ2lkJywgaWQpO1xyXG4gICAgdGhpcy4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtbGFiZWxsZWRieScsIGlkKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgLy8gT25seSByZXNwb25kIHRvIGxlZnQgY2xpY2tzXHJcbiAgICAgIGlmIChldnQud2hpY2ggIT09IDEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcigndG9nZ2xlJywge1xyXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIC8vIFVzZXIgZm9jdXNlcyBvbiB0aGUgY29udGFpbmVyXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2JsdXInLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIC8vIFVzZXIgZXhpdHMgdGhlIGNvbnRhaW5lclxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgaWYgKCFjb250YWluZXIuaXNPcGVuKCkpIHtcclxuICAgICAgICBzZWxmLiRzZWxlY3Rpb24uZm9jdXMoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3Rpb246dXBkYXRlJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLnVwZGF0ZShwYXJhbXMuZGF0YSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5lbXB0eSgpO1xyXG4gIH07XHJcblxyXG4gIFNpbmdsZVNlbGVjdGlvbi5wcm90b3R5cGUuZGlzcGxheSA9IGZ1bmN0aW9uIChkYXRhLCBjb250YWluZXIpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RlbXBsYXRlU2VsZWN0aW9uJyk7XHJcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XHJcblxyXG4gICAgcmV0dXJuIGVzY2FwZU1hcmt1cCh0ZW1wbGF0ZShkYXRhLCBjb250YWluZXIpKTtcclxuICB9O1xyXG5cclxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLnNlbGVjdGlvbkNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkKCc8c3Bhbj48L3NwYW4+Jyk7XHJcbiAgfTtcclxuXHJcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZWxlY3Rpb24gPSBkYXRhWzBdO1xyXG5cclxuICAgIHZhciAkcmVuZGVyZWQgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpO1xyXG4gICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZGlzcGxheShzZWxlY3Rpb24sICRyZW5kZXJlZCk7XHJcblxyXG4gICAgJHJlbmRlcmVkLmVtcHR5KCkuYXBwZW5kKGZvcm1hdHRlZCk7XHJcbiAgICAkcmVuZGVyZWQucHJvcCgndGl0bGUnLCBzZWxlY3Rpb24udGl0bGUgfHwgc2VsZWN0aW9uLnRleHQpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBTaW5nbGVTZWxlY3Rpb247XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9tdWx0aXBsZScsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuL2Jhc2UnLFxyXG4gICcuLi91dGlscydcclxuXSwgZnVuY3Rpb24gKCQsIEJhc2VTZWxlY3Rpb24sIFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gTXVsdGlwbGVTZWxlY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChNdWx0aXBsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XHJcblxyXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJHNlbGVjdGlvbiA9IE11bHRpcGxlU2VsZWN0aW9uLl9fc3VwZXJfXy5yZW5kZXIuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAkc2VsZWN0aW9uLmFkZENsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbi0tbXVsdGlwbGUnKTtcclxuXHJcbiAgICAkc2VsZWN0aW9uLmh0bWwoXHJcbiAgICAgICc8dWwgY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIj48L3VsPidcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XHJcbiAgfTtcclxuXHJcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgTXVsdGlwbGVTZWxlY3Rpb24uX19zdXBlcl9fLmJpbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ3RvZ2dsZScsIHtcclxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oXHJcbiAgICAgICdjbGljaycsXHJcbiAgICAgICcuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQgaXMgZGlzYWJsZWRcclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICRyZW1vdmUgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciAkc2VsZWN0aW9uID0gJHJlbW92ZS5wYXJlbnQoKTtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSAkc2VsZWN0aW9uLmRhdGEoJ2RhdGEnKTtcclxuXHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKCd1bnNlbGVjdCcsIHtcclxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dCxcclxuICAgICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLmVtcHR5KCk7XHJcbiAgfTtcclxuXHJcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLmRpc3BsYXkgPSBmdW5jdGlvbiAoZGF0YSwgY29udGFpbmVyKSB7XHJcbiAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0ZW1wbGF0ZVNlbGVjdGlvbicpO1xyXG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xyXG5cclxuICAgIHJldHVybiBlc2NhcGVNYXJrdXAodGVtcGxhdGUoZGF0YSwgY29udGFpbmVyKSk7XHJcbiAgfTtcclxuXHJcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLnNlbGVjdGlvbkNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkY29udGFpbmVyID0gJChcclxuICAgICAgJzxsaSBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VcIj4nICtcclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlX19yZW1vdmVcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+JyArXHJcbiAgICAgICAgICAnJnRpbWVzOycgK1xyXG4gICAgICAgICc8L3NwYW4+JyArXHJcbiAgICAgICc8L2xpPidcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuICRjb250YWluZXI7XHJcbiAgfTtcclxuXHJcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcblxyXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgJHNlbGVjdGlvbnMgPSBbXTtcclxuXHJcbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEubGVuZ3RoOyBkKyspIHtcclxuICAgICAgdmFyIHNlbGVjdGlvbiA9IGRhdGFbZF07XHJcblxyXG4gICAgICB2YXIgJHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uQ29udGFpbmVyKCk7XHJcbiAgICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLmRpc3BsYXkoc2VsZWN0aW9uLCAkc2VsZWN0aW9uKTtcclxuXHJcbiAgICAgICRzZWxlY3Rpb24uYXBwZW5kKGZvcm1hdHRlZCk7XHJcbiAgICAgICRzZWxlY3Rpb24ucHJvcCgndGl0bGUnLCBzZWxlY3Rpb24udGl0bGUgfHwgc2VsZWN0aW9uLnRleHQpO1xyXG5cclxuICAgICAgJHNlbGVjdGlvbi5kYXRhKCdkYXRhJywgc2VsZWN0aW9uKTtcclxuXHJcbiAgICAgICRzZWxlY3Rpb25zLnB1c2goJHNlbGVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICRyZW5kZXJlZCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJyk7XHJcblxyXG4gICAgVXRpbHMuYXBwZW5kTWFueSgkcmVuZGVyZWQsICRzZWxlY3Rpb25zKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTXVsdGlwbGVTZWxlY3Rpb247XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9wbGFjZWhvbGRlcicsW1xyXG4gICcuLi91dGlscydcclxuXSwgZnVuY3Rpb24gKFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gUGxhY2Vob2xkZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLm5vcm1hbGl6ZVBsYWNlaG9sZGVyKG9wdGlvbnMuZ2V0KCdwbGFjZWhvbGRlcicpKTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBQbGFjZWhvbGRlci5wcm90b3R5cGUubm9ybWFsaXplUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgcGxhY2Vob2xkZXIpIHtcclxuICAgIGlmICh0eXBlb2YgcGxhY2Vob2xkZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHBsYWNlaG9sZGVyID0ge1xyXG4gICAgICAgIGlkOiAnJyxcclxuICAgICAgICB0ZXh0OiBwbGFjZWhvbGRlclxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcclxuICB9O1xyXG5cclxuICBQbGFjZWhvbGRlci5wcm90b3R5cGUuY3JlYXRlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwbGFjZWhvbGRlcikge1xyXG4gICAgdmFyICRwbGFjZWhvbGRlciA9IHRoaXMuc2VsZWN0aW9uQ29udGFpbmVyKCk7XHJcblxyXG4gICAgJHBsYWNlaG9sZGVyLmh0bWwodGhpcy5kaXNwbGF5KHBsYWNlaG9sZGVyKSk7XHJcbiAgICAkcGxhY2Vob2xkZXIuYWRkQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uX19wbGFjZWhvbGRlcicpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uX19jaG9pY2UnKTtcclxuXHJcbiAgICByZXR1cm4gJHBsYWNlaG9sZGVyO1xyXG4gIH07XHJcblxyXG4gIFBsYWNlaG9sZGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XHJcbiAgICB2YXIgc2luZ2xlUGxhY2Vob2xkZXIgPSAoXHJcbiAgICAgIGRhdGEubGVuZ3RoID09IDEgJiYgZGF0YVswXS5pZCAhPSB0aGlzLnBsYWNlaG9sZGVyLmlkXHJcbiAgICApO1xyXG4gICAgdmFyIG11bHRpcGxlU2VsZWN0aW9ucyA9IGRhdGEubGVuZ3RoID4gMTtcclxuXHJcbiAgICBpZiAobXVsdGlwbGVTZWxlY3Rpb25zIHx8IHNpbmdsZVBsYWNlaG9sZGVyKSB7XHJcbiAgICAgIHJldHVybiBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcblxyXG4gICAgdmFyICRwbGFjZWhvbGRlciA9IHRoaXMuY3JlYXRlUGxhY2Vob2xkZXIodGhpcy5wbGFjZWhvbGRlcik7XHJcblxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5hcHBlbmQoJHBsYWNlaG9sZGVyKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gUGxhY2Vob2xkZXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9hbGxvd0NsZWFyJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4uL2tleXMnXHJcbl0sIGZ1bmN0aW9uICgkLCBLRVlTKSB7XHJcbiAgZnVuY3Rpb24gQWxsb3dDbGVhciAoKSB7IH1cclxuXHJcbiAgQWxsb3dDbGVhci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgaWYgKHRoaXMucGxhY2Vob2xkZXIgPT0gbnVsbCkge1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGFsbG93Q2xlYXJgIG9wdGlvbiBzaG91bGQgYmUgdXNlZCBpbiBjb21iaW5hdGlvbiAnICtcclxuICAgICAgICAgICd3aXRoIHRoZSBgcGxhY2Vob2xkZXJgIG9wdGlvbi4nXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignbW91c2Vkb3duJywgJy5zZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXInLFxyXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgc2VsZi5faGFuZGxlQ2xlYXIoZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuX2hhbmRsZUtleWJvYXJkQ2xlYXIoZXZ0LCBjb250YWluZXIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgQWxsb3dDbGVhci5wcm90b3R5cGUuX2hhbmRsZUNsZWFyID0gZnVuY3Rpb24gKF8sIGV2dCkge1xyXG4gICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCBpcyBkaXNhYmxlZFxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2Rpc2FibGVkJykpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkY2xlYXIgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19jbGVhcicpO1xyXG5cclxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgbm90aGluZyBoYXMgYmVlbiBzZWxlY3RlZFxyXG4gICAgaWYgKCRjbGVhci5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICB2YXIgZGF0YSA9ICRjbGVhci5kYXRhKCdkYXRhJyk7XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciB1bnNlbGVjdERhdGEgPSB7XHJcbiAgICAgICAgZGF0YTogZGF0YVtkXVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gVHJpZ2dlciB0aGUgYHVuc2VsZWN0YCBldmVudCwgc28gcGVvcGxlIGNhbiBwcmV2ZW50IGl0IGZyb20gYmVpbmdcclxuICAgICAgLy8gY2xlYXJlZC5cclxuICAgICAgdGhpcy50cmlnZ2VyKCd1bnNlbGVjdCcsIHVuc2VsZWN0RGF0YSk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgZXZlbnQgd2FzIHByZXZlbnRlZCwgZG9uJ3QgY2xlYXIgaXQgb3V0LlxyXG4gICAgICBpZiAodW5zZWxlY3REYXRhLnByZXZlbnRlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQudmFsKHRoaXMucGxhY2Vob2xkZXIuaWQpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG5cclxuICAgIHRoaXMudHJpZ2dlcigndG9nZ2xlJywge30pO1xyXG4gIH07XHJcblxyXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLl9oYW5kbGVLZXlib2FyZENsZWFyID0gZnVuY3Rpb24gKF8sIGV2dCwgY29udGFpbmVyKSB7XHJcbiAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZXZ0LndoaWNoID09IEtFWVMuREVMRVRFIHx8IGV2dC53aGljaCA9PSBLRVlTLkJBQ0tTUEFDRSkge1xyXG4gICAgICB0aGlzLl9oYW5kbGVDbGVhcihldnQpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGRhdGEpO1xyXG5cclxuICAgIGlmICh0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19wbGFjZWhvbGRlcicpLmxlbmd0aCA+IDAgfHxcclxuICAgICAgICBkYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICRyZW1vdmUgPSAkKFxyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXJcIj4nICtcclxuICAgICAgICAnJnRpbWVzOycgK1xyXG4gICAgICAnPC9zcGFuPidcclxuICAgICk7XHJcbiAgICAkcmVtb3ZlLmRhdGEoJ2RhdGEnLCBkYXRhKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLnByZXBlbmQoJHJlbW92ZSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEFsbG93Q2xlYXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9zZWFyY2gnLFtcclxuICAnanF1ZXJ5JyxcclxuICAnLi4vdXRpbHMnLFxyXG4gICcuLi9rZXlzJ1xyXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMsIEtFWVMpIHtcclxuICBmdW5jdGlvbiBTZWFyY2ggKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgdmFyICRzZWFyY2ggPSAkKFxyXG4gICAgICAnPGxpIGNsYXNzPVwic2VsZWN0Mi1zZWFyY2ggc2VsZWN0Mi1zZWFyY2gtLWlubGluZVwiPicgK1xyXG4gICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZWxlY3QyLXNlYXJjaF9fZmllbGRcIiB0eXBlPVwic2VhcmNoXCIgdGFiaW5kZXg9XCItMVwiJyArXHJcbiAgICAgICAgJyBhdXRvY29tcGxldGU9XCJvZmZcIiBhdXRvY29ycmVjdD1cIm9mZlwiIGF1dG9jYXBpdGFsaXplPVwib2ZmXCInICtcclxuICAgICAgICAnIHNwZWxsY2hlY2s9XCJmYWxzZVwiIHJvbGU9XCJ0ZXh0Ym94XCIgYXJpYS1hdXRvY29tcGxldGU9XCJsaXN0XCIgLz4nICtcclxuICAgICAgJzwvbGk+J1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLiRzZWFyY2hDb250YWluZXIgPSAkc2VhcmNoO1xyXG4gICAgdGhpcy4kc2VhcmNoID0gJHNlYXJjaC5maW5kKCdpbnB1dCcpO1xyXG5cclxuICAgIHZhciAkcmVuZGVyZWQgPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLl90cmFuc2ZlclRhYkluZGV4KCk7XHJcblxyXG4gICAgcmV0dXJuICRyZW5kZXJlZDtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRzZWFyY2gudmFsKCcnKTtcclxuICAgICAgc2VsZi4kc2VhcmNoLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xyXG4gICAgICBzZWxmLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignZW5hYmxlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRzZWFyY2gucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICBzZWxmLl90cmFuc2ZlclRhYkluZGV4KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Rpc2FibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJHNlYXJjaC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYuJHNlYXJjaC5hdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBwYXJhbXMuaWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1c2luJywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ2ZvY3VzJywgZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignZm9jdXNvdXQnLCAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuX2hhbmRsZUJsdXIoZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbigna2V5ZG93bicsICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XHJcblxyXG4gICAgICBzZWxmLl9rZXlVcFByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcclxuXHJcbiAgICAgIHZhciBrZXkgPSBldnQud2hpY2g7XHJcblxyXG4gICAgICBpZiAoa2V5ID09PSBLRVlTLkJBQ0tTUEFDRSAmJiBzZWxmLiRzZWFyY2gudmFsKCkgPT09ICcnKSB7XHJcbiAgICAgICAgdmFyICRwcmV2aW91c0Nob2ljZSA9IHNlbGYuJHNlYXJjaENvbnRhaW5lclxyXG4gICAgICAgICAgLnByZXYoJy5zZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlJyk7XHJcblxyXG4gICAgICAgIGlmICgkcHJldmlvdXNDaG9pY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdmFyIGl0ZW0gPSAkcHJldmlvdXNDaG9pY2UuZGF0YSgnZGF0YScpO1xyXG5cclxuICAgICAgICAgIHNlbGYuc2VhcmNoUmVtb3ZlQ2hvaWNlKGl0ZW0pO1xyXG5cclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVHJ5IHRvIGRldGVjdCB0aGUgSUUgdmVyc2lvbiBzaG91bGQgdGhlIGBkb2N1bWVudE1vZGVgIHByb3BlcnR5IHRoYXRcclxuICAgIC8vIGlzIHN0b3JlZCBvbiB0aGUgZG9jdW1lbnQuIFRoaXMgaXMgb25seSBpbXBsZW1lbnRlZCBpbiBJRSBhbmQgaXNcclxuICAgIC8vIHNsaWdodGx5IGNsZWFuZXIgdGhhbiBkb2luZyBhIHVzZXIgYWdlbnQgY2hlY2suXHJcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUgaW4gRWRnZSwgYnV0IEVkZ2UgYWxzbyBkb2Vzbid0IGhhdmVcclxuICAgIC8vIHRoaXMgYnVnLlxyXG4gICAgdmFyIG1zaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XHJcbiAgICB2YXIgZGlzYWJsZUlucHV0RXZlbnRzID0gbXNpZSAmJiBtc2llIDw9IDExO1xyXG5cclxuICAgIC8vIFdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50XHJcbiAgICAvLyBUaGlzIHdpbGwgcHJldmVudCBkb3VibGUtdHJpZ2dlcmluZyBvZiBldmVudHMgZm9yIGJyb3dzZXJzIHdoaWNoIHN1cHBvcnRcclxuICAgIC8vIGJvdGggdGhlIGBrZXl1cGAgYW5kIGBpbnB1dGAgZXZlbnRzLlxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKFxyXG4gICAgICAnaW5wdXQuc2VhcmNoY2hlY2snLFxyXG4gICAgICAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLFxyXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgLy8gSUUgd2lsbCB0cmlnZ2VyIHRoZSBgaW5wdXRgIGV2ZW50IHdoZW4gYSBwbGFjZWhvbGRlciBpcyB1c2VkIG9uIGFcclxuICAgICAgICAvLyBzZWFyY2ggYm94LiBUbyBnZXQgYXJvdW5kIHRoaXMgaXNzdWUsIHdlIGFyZSBmb3JjZWQgdG8gaWdub3JlIGFsbFxyXG4gICAgICAgIC8vIGBpbnB1dGAgZXZlbnRzIGluIElFIGFuZCBrZWVwIHVzaW5nIGBrZXl1cGAuXHJcbiAgICAgICAgaWYgKGRpc2FibGVJbnB1dEV2ZW50cykge1xyXG4gICAgICAgICAgc2VsZi4kc2VsZWN0aW9uLm9mZignaW5wdXQuc2VhcmNoIGlucHV0LnNlYXJjaGNoZWNrJyk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVbmJpbmQgdGhlIGR1cGxpY2F0ZWQgYGtleXVwYCBldmVudFxyXG4gICAgICAgIHNlbGYuJHNlbGVjdGlvbi5vZmYoJ2tleXVwLnNlYXJjaCcpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbihcclxuICAgICAgJ2tleXVwLnNlYXJjaCBpbnB1dC5zZWFyY2gnLFxyXG4gICAgICAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLFxyXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgLy8gSUUgd2lsbCB0cmlnZ2VyIHRoZSBgaW5wdXRgIGV2ZW50IHdoZW4gYSBwbGFjZWhvbGRlciBpcyB1c2VkIG9uIGFcclxuICAgICAgICAvLyBzZWFyY2ggYm94LiBUbyBnZXQgYXJvdW5kIHRoaXMgaXNzdWUsIHdlIGFyZSBmb3JjZWQgdG8gaWdub3JlIGFsbFxyXG4gICAgICAgIC8vIGBpbnB1dGAgZXZlbnRzIGluIElFIGFuZCBrZWVwIHVzaW5nIGBrZXl1cGAuXHJcbiAgICAgICAgaWYgKGRpc2FibGVJbnB1dEV2ZW50cyAmJiBldnQudHlwZSA9PT0gJ2lucHV0Jykge1xyXG4gICAgICAgICAgc2VsZi4kc2VsZWN0aW9uLm9mZignaW5wdXQuc2VhcmNoIGlucHV0LnNlYXJjaGNoZWNrJyk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIga2V5ID0gZXZ0LndoaWNoO1xyXG5cclxuICAgICAgICAvLyBXZSBjYW4gZnJlZWx5IGlnbm9yZSBldmVudHMgZnJvbSBtb2RpZmllciBrZXlzXHJcbiAgICAgICAgaWYgKGtleSA9PSBLRVlTLlNISUZUIHx8IGtleSA9PSBLRVlTLkNUUkwgfHwga2V5ID09IEtFWVMuQUxUKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUYWJiaW5nIHdpbGwgYmUgaGFuZGxlZCBkdXJpbmcgdGhlIGBrZXlkb3duYCBwaGFzZVxyXG4gICAgICAgIGlmIChrZXkgPT0gS0VZUy5UQUIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuaGFuZGxlU2VhcmNoKGV2dCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2Qgd2lsbCB0cmFuc2ZlciB0aGUgdGFiaW5kZXggYXR0cmlidXRlIGZyb20gdGhlIHJlbmRlcmVkXHJcbiAgICogc2VsZWN0aW9uIHRvIHRoZSBzZWFyY2ggYm94LiBUaGlzIGFsbG93cyBmb3IgdGhlIHNlYXJjaCBib3ggdG8gYmUgdXNlZCBhc1xyXG4gICAqIHRoZSBwcmltYXJ5IGZvY3VzIGluc3RlYWQgb2YgdGhlIHNlbGVjdGlvbiBjb250YWluZXIuXHJcbiAgICpcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIFNlYXJjaC5wcm90b3R5cGUuX3RyYW5zZmVyVGFiSW5kZXggPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XHJcbiAgICB0aGlzLiRzZWFyY2guYXR0cigndGFiaW5kZXgnLCB0aGlzLiRzZWxlY3Rpb24uYXR0cigndGFiaW5kZXgnKSk7XHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLmNyZWF0ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGxhY2Vob2xkZXIpIHtcclxuICAgIHRoaXMuJHNlYXJjaC5hdHRyKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyLnRleHQpO1xyXG4gIH07XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xyXG4gICAgdmFyIHNlYXJjaEhhZEZvY3VzID0gdGhpcy4kc2VhcmNoWzBdID09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy4kc2VhcmNoLmF0dHIoJ3BsYWNlaG9sZGVyJywgJycpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGRhdGEpO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJylcclxuICAgICAgICAgICAgICAgICAgIC5hcHBlbmQodGhpcy4kc2VhcmNoQ29udGFpbmVyKTtcclxuXHJcbiAgICB0aGlzLnJlc2l6ZVNlYXJjaCgpO1xyXG4gICAgaWYgKHNlYXJjaEhhZEZvY3VzKSB7XHJcbiAgICAgIHRoaXMuJHNlYXJjaC5mb2N1cygpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUuaGFuZGxlU2VhcmNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5yZXNpemVTZWFyY2goKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuX2tleVVwUHJldmVudGVkKSB7XHJcbiAgICAgIHZhciBpbnB1dCA9IHRoaXMuJHNlYXJjaC52YWwoKTtcclxuXHJcbiAgICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7XHJcbiAgICAgICAgdGVybTogaW5wdXRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fa2V5VXBQcmV2ZW50ZWQgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLnNlYXJjaFJlbW92ZUNob2ljZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGl0ZW0pIHtcclxuICAgIHRoaXMudHJpZ2dlcigndW5zZWxlY3QnLCB7XHJcbiAgICAgIGRhdGE6IGl0ZW1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaC52YWwoaXRlbS50ZXh0KTtcclxuICAgIHRoaXMuaGFuZGxlU2VhcmNoKCk7XHJcbiAgfTtcclxuXHJcbiAgU2VhcmNoLnByb3RvdHlwZS5yZXNpemVTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRzZWFyY2guY3NzKCd3aWR0aCcsICcyNXB4Jyk7XHJcblxyXG4gICAgdmFyIHdpZHRoID0gJyc7XHJcblxyXG4gICAgaWYgKHRoaXMuJHNlYXJjaC5hdHRyKCdwbGFjZWhvbGRlcicpICE9PSAnJykge1xyXG4gICAgICB3aWR0aCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJykuaW5uZXJXaWR0aCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIG1pbmltdW1XaWR0aCA9IHRoaXMuJHNlYXJjaC52YWwoKS5sZW5ndGggKyAxO1xyXG5cclxuICAgICAgd2lkdGggPSAobWluaW11bVdpZHRoICogMC43NSkgKyAnZW0nO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJHNlYXJjaC5jc3MoJ3dpZHRoJywgd2lkdGgpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBTZWFyY2g7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9ldmVudFJlbGF5JyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICBmdW5jdGlvbiBFdmVudFJlbGF5ICgpIHsgfVxyXG5cclxuICBFdmVudFJlbGF5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgcmVsYXlFdmVudHMgPSBbXHJcbiAgICAgICdvcGVuJywgJ29wZW5pbmcnLFxyXG4gICAgICAnY2xvc2UnLCAnY2xvc2luZycsXHJcbiAgICAgICdzZWxlY3QnLCAnc2VsZWN0aW5nJyxcclxuICAgICAgJ3Vuc2VsZWN0JywgJ3Vuc2VsZWN0aW5nJ1xyXG4gICAgXTtcclxuXHJcbiAgICB2YXIgcHJldmVudGFibGVFdmVudHMgPSBbJ29wZW5pbmcnLCAnY2xvc2luZycsICdzZWxlY3RpbmcnLCAndW5zZWxlY3RpbmcnXTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgLy8gSWdub3JlIGV2ZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcmVsYXllZFxyXG4gICAgICBpZiAoJC5pbkFycmF5KG5hbWUsIHJlbGF5RXZlbnRzKSA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRoZSBwYXJhbWV0ZXJzIHNob3VsZCBhbHdheXMgYmUgYW4gb2JqZWN0XHJcbiAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIHRoZSBqUXVlcnkgZXZlbnQgZm9yIHRoZSBTZWxlY3QyIGV2ZW50XHJcbiAgICAgIHZhciBldnQgPSAkLkV2ZW50KCdzZWxlY3QyOicgKyBuYW1lLCB7XHJcbiAgICAgICAgcGFyYW1zOiBwYXJhbXNcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoZXZ0KTtcclxuXHJcbiAgICAgIC8vIE9ubHkgaGFuZGxlIHByZXZlbnRhYmxlIGV2ZW50cyBpZiBpdCB3YXMgb25lXHJcbiAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgcHJldmVudGFibGVFdmVudHMpID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcGFyYW1zLnByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBFdmVudFJlbGF5O1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi90cmFuc2xhdGlvbicsW1xyXG4gICdqcXVlcnknLFxyXG4gICdyZXF1aXJlJ1xyXG5dLCBmdW5jdGlvbiAoJCwgcmVxdWlyZSkge1xyXG4gIGZ1bmN0aW9uIFRyYW5zbGF0aW9uIChkaWN0KSB7XHJcbiAgICB0aGlzLmRpY3QgPSBkaWN0IHx8IHt9O1xyXG4gIH1cclxuXHJcbiAgVHJhbnNsYXRpb24ucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLmRpY3Q7XHJcbiAgfTtcclxuXHJcbiAgVHJhbnNsYXRpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIHJldHVybiB0aGlzLmRpY3Rba2V5XTtcclxuICB9O1xyXG5cclxuICBUcmFuc2xhdGlvbi5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XHJcbiAgICB0aGlzLmRpY3QgPSAkLmV4dGVuZCh7fSwgdHJhbnNsYXRpb24uYWxsKCksIHRoaXMuZGljdCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gU3RhdGljIGZ1bmN0aW9uc1xyXG5cclxuICBUcmFuc2xhdGlvbi5fY2FjaGUgPSB7fTtcclxuXHJcbiAgVHJhbnNsYXRpb24ubG9hZFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgaWYgKCEocGF0aCBpbiBUcmFuc2xhdGlvbi5fY2FjaGUpKSB7XHJcbiAgICAgIHZhciB0cmFuc2xhdGlvbnMgPSByZXF1aXJlKHBhdGgpO1xyXG5cclxuICAgICAgVHJhbnNsYXRpb24uX2NhY2hlW3BhdGhdID0gdHJhbnNsYXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgVHJhbnNsYXRpb24oVHJhbnNsYXRpb24uX2NhY2hlW3BhdGhdKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gVHJhbnNsYXRpb247XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RpYWNyaXRpY3MnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICB2YXIgZGlhY3JpdGljcyA9IHtcclxuICAgICdcXHUyNEI2JzogJ0EnLFxyXG4gICAgJ1xcdUZGMjEnOiAnQScsXHJcbiAgICAnXFx1MDBDMCc6ICdBJyxcclxuICAgICdcXHUwMEMxJzogJ0EnLFxyXG4gICAgJ1xcdTAwQzInOiAnQScsXHJcbiAgICAnXFx1MUVBNic6ICdBJyxcclxuICAgICdcXHUxRUE0JzogJ0EnLFxyXG4gICAgJ1xcdTFFQUEnOiAnQScsXHJcbiAgICAnXFx1MUVBOCc6ICdBJyxcclxuICAgICdcXHUwMEMzJzogJ0EnLFxyXG4gICAgJ1xcdTAxMDAnOiAnQScsXHJcbiAgICAnXFx1MDEwMic6ICdBJyxcclxuICAgICdcXHUxRUIwJzogJ0EnLFxyXG4gICAgJ1xcdTFFQUUnOiAnQScsXHJcbiAgICAnXFx1MUVCNCc6ICdBJyxcclxuICAgICdcXHUxRUIyJzogJ0EnLFxyXG4gICAgJ1xcdTAyMjYnOiAnQScsXHJcbiAgICAnXFx1MDFFMCc6ICdBJyxcclxuICAgICdcXHUwMEM0JzogJ0EnLFxyXG4gICAgJ1xcdTAxREUnOiAnQScsXHJcbiAgICAnXFx1MUVBMic6ICdBJyxcclxuICAgICdcXHUwMEM1JzogJ0EnLFxyXG4gICAgJ1xcdTAxRkEnOiAnQScsXHJcbiAgICAnXFx1MDFDRCc6ICdBJyxcclxuICAgICdcXHUwMjAwJzogJ0EnLFxyXG4gICAgJ1xcdTAyMDInOiAnQScsXHJcbiAgICAnXFx1MUVBMCc6ICdBJyxcclxuICAgICdcXHUxRUFDJzogJ0EnLFxyXG4gICAgJ1xcdTFFQjYnOiAnQScsXHJcbiAgICAnXFx1MUUwMCc6ICdBJyxcclxuICAgICdcXHUwMTA0JzogJ0EnLFxyXG4gICAgJ1xcdTAyM0EnOiAnQScsXHJcbiAgICAnXFx1MkM2Ric6ICdBJyxcclxuICAgICdcXHVBNzMyJzogJ0FBJyxcclxuICAgICdcXHUwMEM2JzogJ0FFJyxcclxuICAgICdcXHUwMUZDJzogJ0FFJyxcclxuICAgICdcXHUwMUUyJzogJ0FFJyxcclxuICAgICdcXHVBNzM0JzogJ0FPJyxcclxuICAgICdcXHVBNzM2JzogJ0FVJyxcclxuICAgICdcXHVBNzM4JzogJ0FWJyxcclxuICAgICdcXHVBNzNBJzogJ0FWJyxcclxuICAgICdcXHVBNzNDJzogJ0FZJyxcclxuICAgICdcXHUyNEI3JzogJ0InLFxyXG4gICAgJ1xcdUZGMjInOiAnQicsXHJcbiAgICAnXFx1MUUwMic6ICdCJyxcclxuICAgICdcXHUxRTA0JzogJ0InLFxyXG4gICAgJ1xcdTFFMDYnOiAnQicsXHJcbiAgICAnXFx1MDI0Myc6ICdCJyxcclxuICAgICdcXHUwMTgyJzogJ0InLFxyXG4gICAgJ1xcdTAxODEnOiAnQicsXHJcbiAgICAnXFx1MjRCOCc6ICdDJyxcclxuICAgICdcXHVGRjIzJzogJ0MnLFxyXG4gICAgJ1xcdTAxMDYnOiAnQycsXHJcbiAgICAnXFx1MDEwOCc6ICdDJyxcclxuICAgICdcXHUwMTBBJzogJ0MnLFxyXG4gICAgJ1xcdTAxMEMnOiAnQycsXHJcbiAgICAnXFx1MDBDNyc6ICdDJyxcclxuICAgICdcXHUxRTA4JzogJ0MnLFxyXG4gICAgJ1xcdTAxODcnOiAnQycsXHJcbiAgICAnXFx1MDIzQic6ICdDJyxcclxuICAgICdcXHVBNzNFJzogJ0MnLFxyXG4gICAgJ1xcdTI0QjknOiAnRCcsXHJcbiAgICAnXFx1RkYyNCc6ICdEJyxcclxuICAgICdcXHUxRTBBJzogJ0QnLFxyXG4gICAgJ1xcdTAxMEUnOiAnRCcsXHJcbiAgICAnXFx1MUUwQyc6ICdEJyxcclxuICAgICdcXHUxRTEwJzogJ0QnLFxyXG4gICAgJ1xcdTFFMTInOiAnRCcsXHJcbiAgICAnXFx1MUUwRSc6ICdEJyxcclxuICAgICdcXHUwMTEwJzogJ0QnLFxyXG4gICAgJ1xcdTAxOEInOiAnRCcsXHJcbiAgICAnXFx1MDE4QSc6ICdEJyxcclxuICAgICdcXHUwMTg5JzogJ0QnLFxyXG4gICAgJ1xcdUE3NzknOiAnRCcsXHJcbiAgICAnXFx1MDFGMSc6ICdEWicsXHJcbiAgICAnXFx1MDFDNCc6ICdEWicsXHJcbiAgICAnXFx1MDFGMic6ICdEeicsXHJcbiAgICAnXFx1MDFDNSc6ICdEeicsXHJcbiAgICAnXFx1MjRCQSc6ICdFJyxcclxuICAgICdcXHVGRjI1JzogJ0UnLFxyXG4gICAgJ1xcdTAwQzgnOiAnRScsXHJcbiAgICAnXFx1MDBDOSc6ICdFJyxcclxuICAgICdcXHUwMENBJzogJ0UnLFxyXG4gICAgJ1xcdTFFQzAnOiAnRScsXHJcbiAgICAnXFx1MUVCRSc6ICdFJyxcclxuICAgICdcXHUxRUM0JzogJ0UnLFxyXG4gICAgJ1xcdTFFQzInOiAnRScsXHJcbiAgICAnXFx1MUVCQyc6ICdFJyxcclxuICAgICdcXHUwMTEyJzogJ0UnLFxyXG4gICAgJ1xcdTFFMTQnOiAnRScsXHJcbiAgICAnXFx1MUUxNic6ICdFJyxcclxuICAgICdcXHUwMTE0JzogJ0UnLFxyXG4gICAgJ1xcdTAxMTYnOiAnRScsXHJcbiAgICAnXFx1MDBDQic6ICdFJyxcclxuICAgICdcXHUxRUJBJzogJ0UnLFxyXG4gICAgJ1xcdTAxMUEnOiAnRScsXHJcbiAgICAnXFx1MDIwNCc6ICdFJyxcclxuICAgICdcXHUwMjA2JzogJ0UnLFxyXG4gICAgJ1xcdTFFQjgnOiAnRScsXHJcbiAgICAnXFx1MUVDNic6ICdFJyxcclxuICAgICdcXHUwMjI4JzogJ0UnLFxyXG4gICAgJ1xcdTFFMUMnOiAnRScsXHJcbiAgICAnXFx1MDExOCc6ICdFJyxcclxuICAgICdcXHUxRTE4JzogJ0UnLFxyXG4gICAgJ1xcdTFFMUEnOiAnRScsXHJcbiAgICAnXFx1MDE5MCc6ICdFJyxcclxuICAgICdcXHUwMThFJzogJ0UnLFxyXG4gICAgJ1xcdTI0QkInOiAnRicsXHJcbiAgICAnXFx1RkYyNic6ICdGJyxcclxuICAgICdcXHUxRTFFJzogJ0YnLFxyXG4gICAgJ1xcdTAxOTEnOiAnRicsXHJcbiAgICAnXFx1QTc3Qic6ICdGJyxcclxuICAgICdcXHUyNEJDJzogJ0cnLFxyXG4gICAgJ1xcdUZGMjcnOiAnRycsXHJcbiAgICAnXFx1MDFGNCc6ICdHJyxcclxuICAgICdcXHUwMTFDJzogJ0cnLFxyXG4gICAgJ1xcdTFFMjAnOiAnRycsXHJcbiAgICAnXFx1MDExRSc6ICdHJyxcclxuICAgICdcXHUwMTIwJzogJ0cnLFxyXG4gICAgJ1xcdTAxRTYnOiAnRycsXHJcbiAgICAnXFx1MDEyMic6ICdHJyxcclxuICAgICdcXHUwMUU0JzogJ0cnLFxyXG4gICAgJ1xcdTAxOTMnOiAnRycsXHJcbiAgICAnXFx1QTdBMCc6ICdHJyxcclxuICAgICdcXHVBNzdEJzogJ0cnLFxyXG4gICAgJ1xcdUE3N0UnOiAnRycsXHJcbiAgICAnXFx1MjRCRCc6ICdIJyxcclxuICAgICdcXHVGRjI4JzogJ0gnLFxyXG4gICAgJ1xcdTAxMjQnOiAnSCcsXHJcbiAgICAnXFx1MUUyMic6ICdIJyxcclxuICAgICdcXHUxRTI2JzogJ0gnLFxyXG4gICAgJ1xcdTAyMUUnOiAnSCcsXHJcbiAgICAnXFx1MUUyNCc6ICdIJyxcclxuICAgICdcXHUxRTI4JzogJ0gnLFxyXG4gICAgJ1xcdTFFMkEnOiAnSCcsXHJcbiAgICAnXFx1MDEyNic6ICdIJyxcclxuICAgICdcXHUyQzY3JzogJ0gnLFxyXG4gICAgJ1xcdTJDNzUnOiAnSCcsXHJcbiAgICAnXFx1QTc4RCc6ICdIJyxcclxuICAgICdcXHUyNEJFJzogJ0knLFxyXG4gICAgJ1xcdUZGMjknOiAnSScsXHJcbiAgICAnXFx1MDBDQyc6ICdJJyxcclxuICAgICdcXHUwMENEJzogJ0knLFxyXG4gICAgJ1xcdTAwQ0UnOiAnSScsXHJcbiAgICAnXFx1MDEyOCc6ICdJJyxcclxuICAgICdcXHUwMTJBJzogJ0knLFxyXG4gICAgJ1xcdTAxMkMnOiAnSScsXHJcbiAgICAnXFx1MDEzMCc6ICdJJyxcclxuICAgICdcXHUwMENGJzogJ0knLFxyXG4gICAgJ1xcdTFFMkUnOiAnSScsXHJcbiAgICAnXFx1MUVDOCc6ICdJJyxcclxuICAgICdcXHUwMUNGJzogJ0knLFxyXG4gICAgJ1xcdTAyMDgnOiAnSScsXHJcbiAgICAnXFx1MDIwQSc6ICdJJyxcclxuICAgICdcXHUxRUNBJzogJ0knLFxyXG4gICAgJ1xcdTAxMkUnOiAnSScsXHJcbiAgICAnXFx1MUUyQyc6ICdJJyxcclxuICAgICdcXHUwMTk3JzogJ0knLFxyXG4gICAgJ1xcdTI0QkYnOiAnSicsXHJcbiAgICAnXFx1RkYyQSc6ICdKJyxcclxuICAgICdcXHUwMTM0JzogJ0onLFxyXG4gICAgJ1xcdTAyNDgnOiAnSicsXHJcbiAgICAnXFx1MjRDMCc6ICdLJyxcclxuICAgICdcXHVGRjJCJzogJ0snLFxyXG4gICAgJ1xcdTFFMzAnOiAnSycsXHJcbiAgICAnXFx1MDFFOCc6ICdLJyxcclxuICAgICdcXHUxRTMyJzogJ0snLFxyXG4gICAgJ1xcdTAxMzYnOiAnSycsXHJcbiAgICAnXFx1MUUzNCc6ICdLJyxcclxuICAgICdcXHUwMTk4JzogJ0snLFxyXG4gICAgJ1xcdTJDNjknOiAnSycsXHJcbiAgICAnXFx1QTc0MCc6ICdLJyxcclxuICAgICdcXHVBNzQyJzogJ0snLFxyXG4gICAgJ1xcdUE3NDQnOiAnSycsXHJcbiAgICAnXFx1QTdBMic6ICdLJyxcclxuICAgICdcXHUyNEMxJzogJ0wnLFxyXG4gICAgJ1xcdUZGMkMnOiAnTCcsXHJcbiAgICAnXFx1MDEzRic6ICdMJyxcclxuICAgICdcXHUwMTM5JzogJ0wnLFxyXG4gICAgJ1xcdTAxM0QnOiAnTCcsXHJcbiAgICAnXFx1MUUzNic6ICdMJyxcclxuICAgICdcXHUxRTM4JzogJ0wnLFxyXG4gICAgJ1xcdTAxM0InOiAnTCcsXHJcbiAgICAnXFx1MUUzQyc6ICdMJyxcclxuICAgICdcXHUxRTNBJzogJ0wnLFxyXG4gICAgJ1xcdTAxNDEnOiAnTCcsXHJcbiAgICAnXFx1MDIzRCc6ICdMJyxcclxuICAgICdcXHUyQzYyJzogJ0wnLFxyXG4gICAgJ1xcdTJDNjAnOiAnTCcsXHJcbiAgICAnXFx1QTc0OCc6ICdMJyxcclxuICAgICdcXHVBNzQ2JzogJ0wnLFxyXG4gICAgJ1xcdUE3ODAnOiAnTCcsXHJcbiAgICAnXFx1MDFDNyc6ICdMSicsXHJcbiAgICAnXFx1MDFDOCc6ICdMaicsXHJcbiAgICAnXFx1MjRDMic6ICdNJyxcclxuICAgICdcXHVGRjJEJzogJ00nLFxyXG4gICAgJ1xcdTFFM0UnOiAnTScsXHJcbiAgICAnXFx1MUU0MCc6ICdNJyxcclxuICAgICdcXHUxRTQyJzogJ00nLFxyXG4gICAgJ1xcdTJDNkUnOiAnTScsXHJcbiAgICAnXFx1MDE5Qyc6ICdNJyxcclxuICAgICdcXHUyNEMzJzogJ04nLFxyXG4gICAgJ1xcdUZGMkUnOiAnTicsXHJcbiAgICAnXFx1MDFGOCc6ICdOJyxcclxuICAgICdcXHUwMTQzJzogJ04nLFxyXG4gICAgJ1xcdTAwRDEnOiAnTicsXHJcbiAgICAnXFx1MUU0NCc6ICdOJyxcclxuICAgICdcXHUwMTQ3JzogJ04nLFxyXG4gICAgJ1xcdTFFNDYnOiAnTicsXHJcbiAgICAnXFx1MDE0NSc6ICdOJyxcclxuICAgICdcXHUxRTRBJzogJ04nLFxyXG4gICAgJ1xcdTFFNDgnOiAnTicsXHJcbiAgICAnXFx1MDIyMCc6ICdOJyxcclxuICAgICdcXHUwMTlEJzogJ04nLFxyXG4gICAgJ1xcdUE3OTAnOiAnTicsXHJcbiAgICAnXFx1QTdBNCc6ICdOJyxcclxuICAgICdcXHUwMUNBJzogJ05KJyxcclxuICAgICdcXHUwMUNCJzogJ05qJyxcclxuICAgICdcXHUyNEM0JzogJ08nLFxyXG4gICAgJ1xcdUZGMkYnOiAnTycsXHJcbiAgICAnXFx1MDBEMic6ICdPJyxcclxuICAgICdcXHUwMEQzJzogJ08nLFxyXG4gICAgJ1xcdTAwRDQnOiAnTycsXHJcbiAgICAnXFx1MUVEMic6ICdPJyxcclxuICAgICdcXHUxRUQwJzogJ08nLFxyXG4gICAgJ1xcdTFFRDYnOiAnTycsXHJcbiAgICAnXFx1MUVENCc6ICdPJyxcclxuICAgICdcXHUwMEQ1JzogJ08nLFxyXG4gICAgJ1xcdTFFNEMnOiAnTycsXHJcbiAgICAnXFx1MDIyQyc6ICdPJyxcclxuICAgICdcXHUxRTRFJzogJ08nLFxyXG4gICAgJ1xcdTAxNEMnOiAnTycsXHJcbiAgICAnXFx1MUU1MCc6ICdPJyxcclxuICAgICdcXHUxRTUyJzogJ08nLFxyXG4gICAgJ1xcdTAxNEUnOiAnTycsXHJcbiAgICAnXFx1MDIyRSc6ICdPJyxcclxuICAgICdcXHUwMjMwJzogJ08nLFxyXG4gICAgJ1xcdTAwRDYnOiAnTycsXHJcbiAgICAnXFx1MDIyQSc6ICdPJyxcclxuICAgICdcXHUxRUNFJzogJ08nLFxyXG4gICAgJ1xcdTAxNTAnOiAnTycsXHJcbiAgICAnXFx1MDFEMSc6ICdPJyxcclxuICAgICdcXHUwMjBDJzogJ08nLFxyXG4gICAgJ1xcdTAyMEUnOiAnTycsXHJcbiAgICAnXFx1MDFBMCc6ICdPJyxcclxuICAgICdcXHUxRURDJzogJ08nLFxyXG4gICAgJ1xcdTFFREEnOiAnTycsXHJcbiAgICAnXFx1MUVFMCc6ICdPJyxcclxuICAgICdcXHUxRURFJzogJ08nLFxyXG4gICAgJ1xcdTFFRTInOiAnTycsXHJcbiAgICAnXFx1MUVDQyc6ICdPJyxcclxuICAgICdcXHUxRUQ4JzogJ08nLFxyXG4gICAgJ1xcdTAxRUEnOiAnTycsXHJcbiAgICAnXFx1MDFFQyc6ICdPJyxcclxuICAgICdcXHUwMEQ4JzogJ08nLFxyXG4gICAgJ1xcdTAxRkUnOiAnTycsXHJcbiAgICAnXFx1MDE4Nic6ICdPJyxcclxuICAgICdcXHUwMTlGJzogJ08nLFxyXG4gICAgJ1xcdUE3NEEnOiAnTycsXHJcbiAgICAnXFx1QTc0Qyc6ICdPJyxcclxuICAgICdcXHUwMUEyJzogJ09JJyxcclxuICAgICdcXHVBNzRFJzogJ09PJyxcclxuICAgICdcXHUwMjIyJzogJ09VJyxcclxuICAgICdcXHUyNEM1JzogJ1AnLFxyXG4gICAgJ1xcdUZGMzAnOiAnUCcsXHJcbiAgICAnXFx1MUU1NCc6ICdQJyxcclxuICAgICdcXHUxRTU2JzogJ1AnLFxyXG4gICAgJ1xcdTAxQTQnOiAnUCcsXHJcbiAgICAnXFx1MkM2Myc6ICdQJyxcclxuICAgICdcXHVBNzUwJzogJ1AnLFxyXG4gICAgJ1xcdUE3NTInOiAnUCcsXHJcbiAgICAnXFx1QTc1NCc6ICdQJyxcclxuICAgICdcXHUyNEM2JzogJ1EnLFxyXG4gICAgJ1xcdUZGMzEnOiAnUScsXHJcbiAgICAnXFx1QTc1Nic6ICdRJyxcclxuICAgICdcXHVBNzU4JzogJ1EnLFxyXG4gICAgJ1xcdTAyNEEnOiAnUScsXHJcbiAgICAnXFx1MjRDNyc6ICdSJyxcclxuICAgICdcXHVGRjMyJzogJ1InLFxyXG4gICAgJ1xcdTAxNTQnOiAnUicsXHJcbiAgICAnXFx1MUU1OCc6ICdSJyxcclxuICAgICdcXHUwMTU4JzogJ1InLFxyXG4gICAgJ1xcdTAyMTAnOiAnUicsXHJcbiAgICAnXFx1MDIxMic6ICdSJyxcclxuICAgICdcXHUxRTVBJzogJ1InLFxyXG4gICAgJ1xcdTFFNUMnOiAnUicsXHJcbiAgICAnXFx1MDE1Nic6ICdSJyxcclxuICAgICdcXHUxRTVFJzogJ1InLFxyXG4gICAgJ1xcdTAyNEMnOiAnUicsXHJcbiAgICAnXFx1MkM2NCc6ICdSJyxcclxuICAgICdcXHVBNzVBJzogJ1InLFxyXG4gICAgJ1xcdUE3QTYnOiAnUicsXHJcbiAgICAnXFx1QTc4Mic6ICdSJyxcclxuICAgICdcXHUyNEM4JzogJ1MnLFxyXG4gICAgJ1xcdUZGMzMnOiAnUycsXHJcbiAgICAnXFx1MUU5RSc6ICdTJyxcclxuICAgICdcXHUwMTVBJzogJ1MnLFxyXG4gICAgJ1xcdTFFNjQnOiAnUycsXHJcbiAgICAnXFx1MDE1Qyc6ICdTJyxcclxuICAgICdcXHUxRTYwJzogJ1MnLFxyXG4gICAgJ1xcdTAxNjAnOiAnUycsXHJcbiAgICAnXFx1MUU2Nic6ICdTJyxcclxuICAgICdcXHUxRTYyJzogJ1MnLFxyXG4gICAgJ1xcdTFFNjgnOiAnUycsXHJcbiAgICAnXFx1MDIxOCc6ICdTJyxcclxuICAgICdcXHUwMTVFJzogJ1MnLFxyXG4gICAgJ1xcdTJDN0UnOiAnUycsXHJcbiAgICAnXFx1QTdBOCc6ICdTJyxcclxuICAgICdcXHVBNzg0JzogJ1MnLFxyXG4gICAgJ1xcdTI0QzknOiAnVCcsXHJcbiAgICAnXFx1RkYzNCc6ICdUJyxcclxuICAgICdcXHUxRTZBJzogJ1QnLFxyXG4gICAgJ1xcdTAxNjQnOiAnVCcsXHJcbiAgICAnXFx1MUU2Qyc6ICdUJyxcclxuICAgICdcXHUwMjFBJzogJ1QnLFxyXG4gICAgJ1xcdTAxNjInOiAnVCcsXHJcbiAgICAnXFx1MUU3MCc6ICdUJyxcclxuICAgICdcXHUxRTZFJzogJ1QnLFxyXG4gICAgJ1xcdTAxNjYnOiAnVCcsXHJcbiAgICAnXFx1MDFBQyc6ICdUJyxcclxuICAgICdcXHUwMUFFJzogJ1QnLFxyXG4gICAgJ1xcdTAyM0UnOiAnVCcsXHJcbiAgICAnXFx1QTc4Nic6ICdUJyxcclxuICAgICdcXHVBNzI4JzogJ1RaJyxcclxuICAgICdcXHUyNENBJzogJ1UnLFxyXG4gICAgJ1xcdUZGMzUnOiAnVScsXHJcbiAgICAnXFx1MDBEOSc6ICdVJyxcclxuICAgICdcXHUwMERBJzogJ1UnLFxyXG4gICAgJ1xcdTAwREInOiAnVScsXHJcbiAgICAnXFx1MDE2OCc6ICdVJyxcclxuICAgICdcXHUxRTc4JzogJ1UnLFxyXG4gICAgJ1xcdTAxNkEnOiAnVScsXHJcbiAgICAnXFx1MUU3QSc6ICdVJyxcclxuICAgICdcXHUwMTZDJzogJ1UnLFxyXG4gICAgJ1xcdTAwREMnOiAnVScsXHJcbiAgICAnXFx1MDFEQic6ICdVJyxcclxuICAgICdcXHUwMUQ3JzogJ1UnLFxyXG4gICAgJ1xcdTAxRDUnOiAnVScsXHJcbiAgICAnXFx1MDFEOSc6ICdVJyxcclxuICAgICdcXHUxRUU2JzogJ1UnLFxyXG4gICAgJ1xcdTAxNkUnOiAnVScsXHJcbiAgICAnXFx1MDE3MCc6ICdVJyxcclxuICAgICdcXHUwMUQzJzogJ1UnLFxyXG4gICAgJ1xcdTAyMTQnOiAnVScsXHJcbiAgICAnXFx1MDIxNic6ICdVJyxcclxuICAgICdcXHUwMUFGJzogJ1UnLFxyXG4gICAgJ1xcdTFFRUEnOiAnVScsXHJcbiAgICAnXFx1MUVFOCc6ICdVJyxcclxuICAgICdcXHUxRUVFJzogJ1UnLFxyXG4gICAgJ1xcdTFFRUMnOiAnVScsXHJcbiAgICAnXFx1MUVGMCc6ICdVJyxcclxuICAgICdcXHUxRUU0JzogJ1UnLFxyXG4gICAgJ1xcdTFFNzInOiAnVScsXHJcbiAgICAnXFx1MDE3Mic6ICdVJyxcclxuICAgICdcXHUxRTc2JzogJ1UnLFxyXG4gICAgJ1xcdTFFNzQnOiAnVScsXHJcbiAgICAnXFx1MDI0NCc6ICdVJyxcclxuICAgICdcXHUyNENCJzogJ1YnLFxyXG4gICAgJ1xcdUZGMzYnOiAnVicsXHJcbiAgICAnXFx1MUU3Qyc6ICdWJyxcclxuICAgICdcXHUxRTdFJzogJ1YnLFxyXG4gICAgJ1xcdTAxQjInOiAnVicsXHJcbiAgICAnXFx1QTc1RSc6ICdWJyxcclxuICAgICdcXHUwMjQ1JzogJ1YnLFxyXG4gICAgJ1xcdUE3NjAnOiAnVlknLFxyXG4gICAgJ1xcdTI0Q0MnOiAnVycsXHJcbiAgICAnXFx1RkYzNyc6ICdXJyxcclxuICAgICdcXHUxRTgwJzogJ1cnLFxyXG4gICAgJ1xcdTFFODInOiAnVycsXHJcbiAgICAnXFx1MDE3NCc6ICdXJyxcclxuICAgICdcXHUxRTg2JzogJ1cnLFxyXG4gICAgJ1xcdTFFODQnOiAnVycsXHJcbiAgICAnXFx1MUU4OCc6ICdXJyxcclxuICAgICdcXHUyQzcyJzogJ1cnLFxyXG4gICAgJ1xcdTI0Q0QnOiAnWCcsXHJcbiAgICAnXFx1RkYzOCc6ICdYJyxcclxuICAgICdcXHUxRThBJzogJ1gnLFxyXG4gICAgJ1xcdTFFOEMnOiAnWCcsXHJcbiAgICAnXFx1MjRDRSc6ICdZJyxcclxuICAgICdcXHVGRjM5JzogJ1knLFxyXG4gICAgJ1xcdTFFRjInOiAnWScsXHJcbiAgICAnXFx1MDBERCc6ICdZJyxcclxuICAgICdcXHUwMTc2JzogJ1knLFxyXG4gICAgJ1xcdTFFRjgnOiAnWScsXHJcbiAgICAnXFx1MDIzMic6ICdZJyxcclxuICAgICdcXHUxRThFJzogJ1knLFxyXG4gICAgJ1xcdTAxNzgnOiAnWScsXHJcbiAgICAnXFx1MUVGNic6ICdZJyxcclxuICAgICdcXHUxRUY0JzogJ1knLFxyXG4gICAgJ1xcdTAxQjMnOiAnWScsXHJcbiAgICAnXFx1MDI0RSc6ICdZJyxcclxuICAgICdcXHUxRUZFJzogJ1knLFxyXG4gICAgJ1xcdTI0Q0YnOiAnWicsXHJcbiAgICAnXFx1RkYzQSc6ICdaJyxcclxuICAgICdcXHUwMTc5JzogJ1onLFxyXG4gICAgJ1xcdTFFOTAnOiAnWicsXHJcbiAgICAnXFx1MDE3Qic6ICdaJyxcclxuICAgICdcXHUwMTdEJzogJ1onLFxyXG4gICAgJ1xcdTFFOTInOiAnWicsXHJcbiAgICAnXFx1MUU5NCc6ICdaJyxcclxuICAgICdcXHUwMUI1JzogJ1onLFxyXG4gICAgJ1xcdTAyMjQnOiAnWicsXHJcbiAgICAnXFx1MkM3Ric6ICdaJyxcclxuICAgICdcXHUyQzZCJzogJ1onLFxyXG4gICAgJ1xcdUE3NjInOiAnWicsXHJcbiAgICAnXFx1MjREMCc6ICdhJyxcclxuICAgICdcXHVGRjQxJzogJ2EnLFxyXG4gICAgJ1xcdTFFOUEnOiAnYScsXHJcbiAgICAnXFx1MDBFMCc6ICdhJyxcclxuICAgICdcXHUwMEUxJzogJ2EnLFxyXG4gICAgJ1xcdTAwRTInOiAnYScsXHJcbiAgICAnXFx1MUVBNyc6ICdhJyxcclxuICAgICdcXHUxRUE1JzogJ2EnLFxyXG4gICAgJ1xcdTFFQUInOiAnYScsXHJcbiAgICAnXFx1MUVBOSc6ICdhJyxcclxuICAgICdcXHUwMEUzJzogJ2EnLFxyXG4gICAgJ1xcdTAxMDEnOiAnYScsXHJcbiAgICAnXFx1MDEwMyc6ICdhJyxcclxuICAgICdcXHUxRUIxJzogJ2EnLFxyXG4gICAgJ1xcdTFFQUYnOiAnYScsXHJcbiAgICAnXFx1MUVCNSc6ICdhJyxcclxuICAgICdcXHUxRUIzJzogJ2EnLFxyXG4gICAgJ1xcdTAyMjcnOiAnYScsXHJcbiAgICAnXFx1MDFFMSc6ICdhJyxcclxuICAgICdcXHUwMEU0JzogJ2EnLFxyXG4gICAgJ1xcdTAxREYnOiAnYScsXHJcbiAgICAnXFx1MUVBMyc6ICdhJyxcclxuICAgICdcXHUwMEU1JzogJ2EnLFxyXG4gICAgJ1xcdTAxRkInOiAnYScsXHJcbiAgICAnXFx1MDFDRSc6ICdhJyxcclxuICAgICdcXHUwMjAxJzogJ2EnLFxyXG4gICAgJ1xcdTAyMDMnOiAnYScsXHJcbiAgICAnXFx1MUVBMSc6ICdhJyxcclxuICAgICdcXHUxRUFEJzogJ2EnLFxyXG4gICAgJ1xcdTFFQjcnOiAnYScsXHJcbiAgICAnXFx1MUUwMSc6ICdhJyxcclxuICAgICdcXHUwMTA1JzogJ2EnLFxyXG4gICAgJ1xcdTJDNjUnOiAnYScsXHJcbiAgICAnXFx1MDI1MCc6ICdhJyxcclxuICAgICdcXHVBNzMzJzogJ2FhJyxcclxuICAgICdcXHUwMEU2JzogJ2FlJyxcclxuICAgICdcXHUwMUZEJzogJ2FlJyxcclxuICAgICdcXHUwMUUzJzogJ2FlJyxcclxuICAgICdcXHVBNzM1JzogJ2FvJyxcclxuICAgICdcXHVBNzM3JzogJ2F1JyxcclxuICAgICdcXHVBNzM5JzogJ2F2JyxcclxuICAgICdcXHVBNzNCJzogJ2F2JyxcclxuICAgICdcXHVBNzNEJzogJ2F5JyxcclxuICAgICdcXHUyNEQxJzogJ2InLFxyXG4gICAgJ1xcdUZGNDInOiAnYicsXHJcbiAgICAnXFx1MUUwMyc6ICdiJyxcclxuICAgICdcXHUxRTA1JzogJ2InLFxyXG4gICAgJ1xcdTFFMDcnOiAnYicsXHJcbiAgICAnXFx1MDE4MCc6ICdiJyxcclxuICAgICdcXHUwMTgzJzogJ2InLFxyXG4gICAgJ1xcdTAyNTMnOiAnYicsXHJcbiAgICAnXFx1MjREMic6ICdjJyxcclxuICAgICdcXHVGRjQzJzogJ2MnLFxyXG4gICAgJ1xcdTAxMDcnOiAnYycsXHJcbiAgICAnXFx1MDEwOSc6ICdjJyxcclxuICAgICdcXHUwMTBCJzogJ2MnLFxyXG4gICAgJ1xcdTAxMEQnOiAnYycsXHJcbiAgICAnXFx1MDBFNyc6ICdjJyxcclxuICAgICdcXHUxRTA5JzogJ2MnLFxyXG4gICAgJ1xcdTAxODgnOiAnYycsXHJcbiAgICAnXFx1MDIzQyc6ICdjJyxcclxuICAgICdcXHVBNzNGJzogJ2MnLFxyXG4gICAgJ1xcdTIxODQnOiAnYycsXHJcbiAgICAnXFx1MjREMyc6ICdkJyxcclxuICAgICdcXHVGRjQ0JzogJ2QnLFxyXG4gICAgJ1xcdTFFMEInOiAnZCcsXHJcbiAgICAnXFx1MDEwRic6ICdkJyxcclxuICAgICdcXHUxRTBEJzogJ2QnLFxyXG4gICAgJ1xcdTFFMTEnOiAnZCcsXHJcbiAgICAnXFx1MUUxMyc6ICdkJyxcclxuICAgICdcXHUxRTBGJzogJ2QnLFxyXG4gICAgJ1xcdTAxMTEnOiAnZCcsXHJcbiAgICAnXFx1MDE4Qyc6ICdkJyxcclxuICAgICdcXHUwMjU2JzogJ2QnLFxyXG4gICAgJ1xcdTAyNTcnOiAnZCcsXHJcbiAgICAnXFx1QTc3QSc6ICdkJyxcclxuICAgICdcXHUwMUYzJzogJ2R6JyxcclxuICAgICdcXHUwMUM2JzogJ2R6JyxcclxuICAgICdcXHUyNEQ0JzogJ2UnLFxyXG4gICAgJ1xcdUZGNDUnOiAnZScsXHJcbiAgICAnXFx1MDBFOCc6ICdlJyxcclxuICAgICdcXHUwMEU5JzogJ2UnLFxyXG4gICAgJ1xcdTAwRUEnOiAnZScsXHJcbiAgICAnXFx1MUVDMSc6ICdlJyxcclxuICAgICdcXHUxRUJGJzogJ2UnLFxyXG4gICAgJ1xcdTFFQzUnOiAnZScsXHJcbiAgICAnXFx1MUVDMyc6ICdlJyxcclxuICAgICdcXHUxRUJEJzogJ2UnLFxyXG4gICAgJ1xcdTAxMTMnOiAnZScsXHJcbiAgICAnXFx1MUUxNSc6ICdlJyxcclxuICAgICdcXHUxRTE3JzogJ2UnLFxyXG4gICAgJ1xcdTAxMTUnOiAnZScsXHJcbiAgICAnXFx1MDExNyc6ICdlJyxcclxuICAgICdcXHUwMEVCJzogJ2UnLFxyXG4gICAgJ1xcdTFFQkInOiAnZScsXHJcbiAgICAnXFx1MDExQic6ICdlJyxcclxuICAgICdcXHUwMjA1JzogJ2UnLFxyXG4gICAgJ1xcdTAyMDcnOiAnZScsXHJcbiAgICAnXFx1MUVCOSc6ICdlJyxcclxuICAgICdcXHUxRUM3JzogJ2UnLFxyXG4gICAgJ1xcdTAyMjknOiAnZScsXHJcbiAgICAnXFx1MUUxRCc6ICdlJyxcclxuICAgICdcXHUwMTE5JzogJ2UnLFxyXG4gICAgJ1xcdTFFMTknOiAnZScsXHJcbiAgICAnXFx1MUUxQic6ICdlJyxcclxuICAgICdcXHUwMjQ3JzogJ2UnLFxyXG4gICAgJ1xcdTAyNUInOiAnZScsXHJcbiAgICAnXFx1MDFERCc6ICdlJyxcclxuICAgICdcXHUyNEQ1JzogJ2YnLFxyXG4gICAgJ1xcdUZGNDYnOiAnZicsXHJcbiAgICAnXFx1MUUxRic6ICdmJyxcclxuICAgICdcXHUwMTkyJzogJ2YnLFxyXG4gICAgJ1xcdUE3N0MnOiAnZicsXHJcbiAgICAnXFx1MjRENic6ICdnJyxcclxuICAgICdcXHVGRjQ3JzogJ2cnLFxyXG4gICAgJ1xcdTAxRjUnOiAnZycsXHJcbiAgICAnXFx1MDExRCc6ICdnJyxcclxuICAgICdcXHUxRTIxJzogJ2cnLFxyXG4gICAgJ1xcdTAxMUYnOiAnZycsXHJcbiAgICAnXFx1MDEyMSc6ICdnJyxcclxuICAgICdcXHUwMUU3JzogJ2cnLFxyXG4gICAgJ1xcdTAxMjMnOiAnZycsXHJcbiAgICAnXFx1MDFFNSc6ICdnJyxcclxuICAgICdcXHUwMjYwJzogJ2cnLFxyXG4gICAgJ1xcdUE3QTEnOiAnZycsXHJcbiAgICAnXFx1MUQ3OSc6ICdnJyxcclxuICAgICdcXHVBNzdGJzogJ2cnLFxyXG4gICAgJ1xcdTI0RDcnOiAnaCcsXHJcbiAgICAnXFx1RkY0OCc6ICdoJyxcclxuICAgICdcXHUwMTI1JzogJ2gnLFxyXG4gICAgJ1xcdTFFMjMnOiAnaCcsXHJcbiAgICAnXFx1MUUyNyc6ICdoJyxcclxuICAgICdcXHUwMjFGJzogJ2gnLFxyXG4gICAgJ1xcdTFFMjUnOiAnaCcsXHJcbiAgICAnXFx1MUUyOSc6ICdoJyxcclxuICAgICdcXHUxRTJCJzogJ2gnLFxyXG4gICAgJ1xcdTFFOTYnOiAnaCcsXHJcbiAgICAnXFx1MDEyNyc6ICdoJyxcclxuICAgICdcXHUyQzY4JzogJ2gnLFxyXG4gICAgJ1xcdTJDNzYnOiAnaCcsXHJcbiAgICAnXFx1MDI2NSc6ICdoJyxcclxuICAgICdcXHUwMTk1JzogJ2h2JyxcclxuICAgICdcXHUyNEQ4JzogJ2knLFxyXG4gICAgJ1xcdUZGNDknOiAnaScsXHJcbiAgICAnXFx1MDBFQyc6ICdpJyxcclxuICAgICdcXHUwMEVEJzogJ2knLFxyXG4gICAgJ1xcdTAwRUUnOiAnaScsXHJcbiAgICAnXFx1MDEyOSc6ICdpJyxcclxuICAgICdcXHUwMTJCJzogJ2knLFxyXG4gICAgJ1xcdTAxMkQnOiAnaScsXHJcbiAgICAnXFx1MDBFRic6ICdpJyxcclxuICAgICdcXHUxRTJGJzogJ2knLFxyXG4gICAgJ1xcdTFFQzknOiAnaScsXHJcbiAgICAnXFx1MDFEMCc6ICdpJyxcclxuICAgICdcXHUwMjA5JzogJ2knLFxyXG4gICAgJ1xcdTAyMEInOiAnaScsXHJcbiAgICAnXFx1MUVDQic6ICdpJyxcclxuICAgICdcXHUwMTJGJzogJ2knLFxyXG4gICAgJ1xcdTFFMkQnOiAnaScsXHJcbiAgICAnXFx1MDI2OCc6ICdpJyxcclxuICAgICdcXHUwMTMxJzogJ2knLFxyXG4gICAgJ1xcdTI0RDknOiAnaicsXHJcbiAgICAnXFx1RkY0QSc6ICdqJyxcclxuICAgICdcXHUwMTM1JzogJ2onLFxyXG4gICAgJ1xcdTAxRjAnOiAnaicsXHJcbiAgICAnXFx1MDI0OSc6ICdqJyxcclxuICAgICdcXHUyNERBJzogJ2snLFxyXG4gICAgJ1xcdUZGNEInOiAnaycsXHJcbiAgICAnXFx1MUUzMSc6ICdrJyxcclxuICAgICdcXHUwMUU5JzogJ2snLFxyXG4gICAgJ1xcdTFFMzMnOiAnaycsXHJcbiAgICAnXFx1MDEzNyc6ICdrJyxcclxuICAgICdcXHUxRTM1JzogJ2snLFxyXG4gICAgJ1xcdTAxOTknOiAnaycsXHJcbiAgICAnXFx1MkM2QSc6ICdrJyxcclxuICAgICdcXHVBNzQxJzogJ2snLFxyXG4gICAgJ1xcdUE3NDMnOiAnaycsXHJcbiAgICAnXFx1QTc0NSc6ICdrJyxcclxuICAgICdcXHVBN0EzJzogJ2snLFxyXG4gICAgJ1xcdTI0REInOiAnbCcsXHJcbiAgICAnXFx1RkY0Qyc6ICdsJyxcclxuICAgICdcXHUwMTQwJzogJ2wnLFxyXG4gICAgJ1xcdTAxM0EnOiAnbCcsXHJcbiAgICAnXFx1MDEzRSc6ICdsJyxcclxuICAgICdcXHUxRTM3JzogJ2wnLFxyXG4gICAgJ1xcdTFFMzknOiAnbCcsXHJcbiAgICAnXFx1MDEzQyc6ICdsJyxcclxuICAgICdcXHUxRTNEJzogJ2wnLFxyXG4gICAgJ1xcdTFFM0InOiAnbCcsXHJcbiAgICAnXFx1MDE3Ric6ICdsJyxcclxuICAgICdcXHUwMTQyJzogJ2wnLFxyXG4gICAgJ1xcdTAxOUEnOiAnbCcsXHJcbiAgICAnXFx1MDI2Qic6ICdsJyxcclxuICAgICdcXHUyQzYxJzogJ2wnLFxyXG4gICAgJ1xcdUE3NDknOiAnbCcsXHJcbiAgICAnXFx1QTc4MSc6ICdsJyxcclxuICAgICdcXHVBNzQ3JzogJ2wnLFxyXG4gICAgJ1xcdTAxQzknOiAnbGonLFxyXG4gICAgJ1xcdTI0REMnOiAnbScsXHJcbiAgICAnXFx1RkY0RCc6ICdtJyxcclxuICAgICdcXHUxRTNGJzogJ20nLFxyXG4gICAgJ1xcdTFFNDEnOiAnbScsXHJcbiAgICAnXFx1MUU0Myc6ICdtJyxcclxuICAgICdcXHUwMjcxJzogJ20nLFxyXG4gICAgJ1xcdTAyNkYnOiAnbScsXHJcbiAgICAnXFx1MjRERCc6ICduJyxcclxuICAgICdcXHVGRjRFJzogJ24nLFxyXG4gICAgJ1xcdTAxRjknOiAnbicsXHJcbiAgICAnXFx1MDE0NCc6ICduJyxcclxuICAgICdcXHUwMEYxJzogJ24nLFxyXG4gICAgJ1xcdTFFNDUnOiAnbicsXHJcbiAgICAnXFx1MDE0OCc6ICduJyxcclxuICAgICdcXHUxRTQ3JzogJ24nLFxyXG4gICAgJ1xcdTAxNDYnOiAnbicsXHJcbiAgICAnXFx1MUU0Qic6ICduJyxcclxuICAgICdcXHUxRTQ5JzogJ24nLFxyXG4gICAgJ1xcdTAxOUUnOiAnbicsXHJcbiAgICAnXFx1MDI3Mic6ICduJyxcclxuICAgICdcXHUwMTQ5JzogJ24nLFxyXG4gICAgJ1xcdUE3OTEnOiAnbicsXHJcbiAgICAnXFx1QTdBNSc6ICduJyxcclxuICAgICdcXHUwMUNDJzogJ25qJyxcclxuICAgICdcXHUyNERFJzogJ28nLFxyXG4gICAgJ1xcdUZGNEYnOiAnbycsXHJcbiAgICAnXFx1MDBGMic6ICdvJyxcclxuICAgICdcXHUwMEYzJzogJ28nLFxyXG4gICAgJ1xcdTAwRjQnOiAnbycsXHJcbiAgICAnXFx1MUVEMyc6ICdvJyxcclxuICAgICdcXHUxRUQxJzogJ28nLFxyXG4gICAgJ1xcdTFFRDcnOiAnbycsXHJcbiAgICAnXFx1MUVENSc6ICdvJyxcclxuICAgICdcXHUwMEY1JzogJ28nLFxyXG4gICAgJ1xcdTFFNEQnOiAnbycsXHJcbiAgICAnXFx1MDIyRCc6ICdvJyxcclxuICAgICdcXHUxRTRGJzogJ28nLFxyXG4gICAgJ1xcdTAxNEQnOiAnbycsXHJcbiAgICAnXFx1MUU1MSc6ICdvJyxcclxuICAgICdcXHUxRTUzJzogJ28nLFxyXG4gICAgJ1xcdTAxNEYnOiAnbycsXHJcbiAgICAnXFx1MDIyRic6ICdvJyxcclxuICAgICdcXHUwMjMxJzogJ28nLFxyXG4gICAgJ1xcdTAwRjYnOiAnbycsXHJcbiAgICAnXFx1MDIyQic6ICdvJyxcclxuICAgICdcXHUxRUNGJzogJ28nLFxyXG4gICAgJ1xcdTAxNTEnOiAnbycsXHJcbiAgICAnXFx1MDFEMic6ICdvJyxcclxuICAgICdcXHUwMjBEJzogJ28nLFxyXG4gICAgJ1xcdTAyMEYnOiAnbycsXHJcbiAgICAnXFx1MDFBMSc6ICdvJyxcclxuICAgICdcXHUxRUREJzogJ28nLFxyXG4gICAgJ1xcdTFFREInOiAnbycsXHJcbiAgICAnXFx1MUVFMSc6ICdvJyxcclxuICAgICdcXHUxRURGJzogJ28nLFxyXG4gICAgJ1xcdTFFRTMnOiAnbycsXHJcbiAgICAnXFx1MUVDRCc6ICdvJyxcclxuICAgICdcXHUxRUQ5JzogJ28nLFxyXG4gICAgJ1xcdTAxRUInOiAnbycsXHJcbiAgICAnXFx1MDFFRCc6ICdvJyxcclxuICAgICdcXHUwMEY4JzogJ28nLFxyXG4gICAgJ1xcdTAxRkYnOiAnbycsXHJcbiAgICAnXFx1MDI1NCc6ICdvJyxcclxuICAgICdcXHVBNzRCJzogJ28nLFxyXG4gICAgJ1xcdUE3NEQnOiAnbycsXHJcbiAgICAnXFx1MDI3NSc6ICdvJyxcclxuICAgICdcXHUwMUEzJzogJ29pJyxcclxuICAgICdcXHUwMjIzJzogJ291JyxcclxuICAgICdcXHVBNzRGJzogJ29vJyxcclxuICAgICdcXHUyNERGJzogJ3AnLFxyXG4gICAgJ1xcdUZGNTAnOiAncCcsXHJcbiAgICAnXFx1MUU1NSc6ICdwJyxcclxuICAgICdcXHUxRTU3JzogJ3AnLFxyXG4gICAgJ1xcdTAxQTUnOiAncCcsXHJcbiAgICAnXFx1MUQ3RCc6ICdwJyxcclxuICAgICdcXHVBNzUxJzogJ3AnLFxyXG4gICAgJ1xcdUE3NTMnOiAncCcsXHJcbiAgICAnXFx1QTc1NSc6ICdwJyxcclxuICAgICdcXHUyNEUwJzogJ3EnLFxyXG4gICAgJ1xcdUZGNTEnOiAncScsXHJcbiAgICAnXFx1MDI0Qic6ICdxJyxcclxuICAgICdcXHVBNzU3JzogJ3EnLFxyXG4gICAgJ1xcdUE3NTknOiAncScsXHJcbiAgICAnXFx1MjRFMSc6ICdyJyxcclxuICAgICdcXHVGRjUyJzogJ3InLFxyXG4gICAgJ1xcdTAxNTUnOiAncicsXHJcbiAgICAnXFx1MUU1OSc6ICdyJyxcclxuICAgICdcXHUwMTU5JzogJ3InLFxyXG4gICAgJ1xcdTAyMTEnOiAncicsXHJcbiAgICAnXFx1MDIxMyc6ICdyJyxcclxuICAgICdcXHUxRTVCJzogJ3InLFxyXG4gICAgJ1xcdTFFNUQnOiAncicsXHJcbiAgICAnXFx1MDE1Nyc6ICdyJyxcclxuICAgICdcXHUxRTVGJzogJ3InLFxyXG4gICAgJ1xcdTAyNEQnOiAncicsXHJcbiAgICAnXFx1MDI3RCc6ICdyJyxcclxuICAgICdcXHVBNzVCJzogJ3InLFxyXG4gICAgJ1xcdUE3QTcnOiAncicsXHJcbiAgICAnXFx1QTc4Myc6ICdyJyxcclxuICAgICdcXHUyNEUyJzogJ3MnLFxyXG4gICAgJ1xcdUZGNTMnOiAncycsXHJcbiAgICAnXFx1MDBERic6ICdzJyxcclxuICAgICdcXHUwMTVCJzogJ3MnLFxyXG4gICAgJ1xcdTFFNjUnOiAncycsXHJcbiAgICAnXFx1MDE1RCc6ICdzJyxcclxuICAgICdcXHUxRTYxJzogJ3MnLFxyXG4gICAgJ1xcdTAxNjEnOiAncycsXHJcbiAgICAnXFx1MUU2Nyc6ICdzJyxcclxuICAgICdcXHUxRTYzJzogJ3MnLFxyXG4gICAgJ1xcdTFFNjknOiAncycsXHJcbiAgICAnXFx1MDIxOSc6ICdzJyxcclxuICAgICdcXHUwMTVGJzogJ3MnLFxyXG4gICAgJ1xcdTAyM0YnOiAncycsXHJcbiAgICAnXFx1QTdBOSc6ICdzJyxcclxuICAgICdcXHVBNzg1JzogJ3MnLFxyXG4gICAgJ1xcdTFFOUInOiAncycsXHJcbiAgICAnXFx1MjRFMyc6ICd0JyxcclxuICAgICdcXHVGRjU0JzogJ3QnLFxyXG4gICAgJ1xcdTFFNkInOiAndCcsXHJcbiAgICAnXFx1MUU5Nyc6ICd0JyxcclxuICAgICdcXHUwMTY1JzogJ3QnLFxyXG4gICAgJ1xcdTFFNkQnOiAndCcsXHJcbiAgICAnXFx1MDIxQic6ICd0JyxcclxuICAgICdcXHUwMTYzJzogJ3QnLFxyXG4gICAgJ1xcdTFFNzEnOiAndCcsXHJcbiAgICAnXFx1MUU2Ric6ICd0JyxcclxuICAgICdcXHUwMTY3JzogJ3QnLFxyXG4gICAgJ1xcdTAxQUQnOiAndCcsXHJcbiAgICAnXFx1MDI4OCc6ICd0JyxcclxuICAgICdcXHUyQzY2JzogJ3QnLFxyXG4gICAgJ1xcdUE3ODcnOiAndCcsXHJcbiAgICAnXFx1QTcyOSc6ICd0eicsXHJcbiAgICAnXFx1MjRFNCc6ICd1JyxcclxuICAgICdcXHVGRjU1JzogJ3UnLFxyXG4gICAgJ1xcdTAwRjknOiAndScsXHJcbiAgICAnXFx1MDBGQSc6ICd1JyxcclxuICAgICdcXHUwMEZCJzogJ3UnLFxyXG4gICAgJ1xcdTAxNjknOiAndScsXHJcbiAgICAnXFx1MUU3OSc6ICd1JyxcclxuICAgICdcXHUwMTZCJzogJ3UnLFxyXG4gICAgJ1xcdTFFN0InOiAndScsXHJcbiAgICAnXFx1MDE2RCc6ICd1JyxcclxuICAgICdcXHUwMEZDJzogJ3UnLFxyXG4gICAgJ1xcdTAxREMnOiAndScsXHJcbiAgICAnXFx1MDFEOCc6ICd1JyxcclxuICAgICdcXHUwMUQ2JzogJ3UnLFxyXG4gICAgJ1xcdTAxREEnOiAndScsXHJcbiAgICAnXFx1MUVFNyc6ICd1JyxcclxuICAgICdcXHUwMTZGJzogJ3UnLFxyXG4gICAgJ1xcdTAxNzEnOiAndScsXHJcbiAgICAnXFx1MDFENCc6ICd1JyxcclxuICAgICdcXHUwMjE1JzogJ3UnLFxyXG4gICAgJ1xcdTAyMTcnOiAndScsXHJcbiAgICAnXFx1MDFCMCc6ICd1JyxcclxuICAgICdcXHUxRUVCJzogJ3UnLFxyXG4gICAgJ1xcdTFFRTknOiAndScsXHJcbiAgICAnXFx1MUVFRic6ICd1JyxcclxuICAgICdcXHUxRUVEJzogJ3UnLFxyXG4gICAgJ1xcdTFFRjEnOiAndScsXHJcbiAgICAnXFx1MUVFNSc6ICd1JyxcclxuICAgICdcXHUxRTczJzogJ3UnLFxyXG4gICAgJ1xcdTAxNzMnOiAndScsXHJcbiAgICAnXFx1MUU3Nyc6ICd1JyxcclxuICAgICdcXHUxRTc1JzogJ3UnLFxyXG4gICAgJ1xcdTAyODknOiAndScsXHJcbiAgICAnXFx1MjRFNSc6ICd2JyxcclxuICAgICdcXHVGRjU2JzogJ3YnLFxyXG4gICAgJ1xcdTFFN0QnOiAndicsXHJcbiAgICAnXFx1MUU3Ric6ICd2JyxcclxuICAgICdcXHUwMjhCJzogJ3YnLFxyXG4gICAgJ1xcdUE3NUYnOiAndicsXHJcbiAgICAnXFx1MDI4Qyc6ICd2JyxcclxuICAgICdcXHVBNzYxJzogJ3Z5JyxcclxuICAgICdcXHUyNEU2JzogJ3cnLFxyXG4gICAgJ1xcdUZGNTcnOiAndycsXHJcbiAgICAnXFx1MUU4MSc6ICd3JyxcclxuICAgICdcXHUxRTgzJzogJ3cnLFxyXG4gICAgJ1xcdTAxNzUnOiAndycsXHJcbiAgICAnXFx1MUU4Nyc6ICd3JyxcclxuICAgICdcXHUxRTg1JzogJ3cnLFxyXG4gICAgJ1xcdTFFOTgnOiAndycsXHJcbiAgICAnXFx1MUU4OSc6ICd3JyxcclxuICAgICdcXHUyQzczJzogJ3cnLFxyXG4gICAgJ1xcdTI0RTcnOiAneCcsXHJcbiAgICAnXFx1RkY1OCc6ICd4JyxcclxuICAgICdcXHUxRThCJzogJ3gnLFxyXG4gICAgJ1xcdTFFOEQnOiAneCcsXHJcbiAgICAnXFx1MjRFOCc6ICd5JyxcclxuICAgICdcXHVGRjU5JzogJ3knLFxyXG4gICAgJ1xcdTFFRjMnOiAneScsXHJcbiAgICAnXFx1MDBGRCc6ICd5JyxcclxuICAgICdcXHUwMTc3JzogJ3knLFxyXG4gICAgJ1xcdTFFRjknOiAneScsXHJcbiAgICAnXFx1MDIzMyc6ICd5JyxcclxuICAgICdcXHUxRThGJzogJ3knLFxyXG4gICAgJ1xcdTAwRkYnOiAneScsXHJcbiAgICAnXFx1MUVGNyc6ICd5JyxcclxuICAgICdcXHUxRTk5JzogJ3knLFxyXG4gICAgJ1xcdTFFRjUnOiAneScsXHJcbiAgICAnXFx1MDFCNCc6ICd5JyxcclxuICAgICdcXHUwMjRGJzogJ3knLFxyXG4gICAgJ1xcdTFFRkYnOiAneScsXHJcbiAgICAnXFx1MjRFOSc6ICd6JyxcclxuICAgICdcXHVGRjVBJzogJ3onLFxyXG4gICAgJ1xcdTAxN0EnOiAneicsXHJcbiAgICAnXFx1MUU5MSc6ICd6JyxcclxuICAgICdcXHUwMTdDJzogJ3onLFxyXG4gICAgJ1xcdTAxN0UnOiAneicsXHJcbiAgICAnXFx1MUU5Myc6ICd6JyxcclxuICAgICdcXHUxRTk1JzogJ3onLFxyXG4gICAgJ1xcdTAxQjYnOiAneicsXHJcbiAgICAnXFx1MDIyNSc6ICd6JyxcclxuICAgICdcXHUwMjQwJzogJ3onLFxyXG4gICAgJ1xcdTJDNkMnOiAneicsXHJcbiAgICAnXFx1QTc2Myc6ICd6JyxcclxuICAgICdcXHUwMzg2JzogJ1xcdTAzOTEnLFxyXG4gICAgJ1xcdTAzODgnOiAnXFx1MDM5NScsXHJcbiAgICAnXFx1MDM4OSc6ICdcXHUwMzk3JyxcclxuICAgICdcXHUwMzhBJzogJ1xcdTAzOTknLFxyXG4gICAgJ1xcdTAzQUEnOiAnXFx1MDM5OScsXHJcbiAgICAnXFx1MDM4Qyc6ICdcXHUwMzlGJyxcclxuICAgICdcXHUwMzhFJzogJ1xcdTAzQTUnLFxyXG4gICAgJ1xcdTAzQUInOiAnXFx1MDNBNScsXHJcbiAgICAnXFx1MDM4Ric6ICdcXHUwM0E5JyxcclxuICAgICdcXHUwM0FDJzogJ1xcdTAzQjEnLFxyXG4gICAgJ1xcdTAzQUQnOiAnXFx1MDNCNScsXHJcbiAgICAnXFx1MDNBRSc6ICdcXHUwM0I3JyxcclxuICAgICdcXHUwM0FGJzogJ1xcdTAzQjknLFxyXG4gICAgJ1xcdTAzQ0EnOiAnXFx1MDNCOScsXHJcbiAgICAnXFx1MDM5MCc6ICdcXHUwM0I5JyxcclxuICAgICdcXHUwM0NDJzogJ1xcdTAzQkYnLFxyXG4gICAgJ1xcdTAzQ0QnOiAnXFx1MDNDNScsXHJcbiAgICAnXFx1MDNDQic6ICdcXHUwM0M1JyxcclxuICAgICdcXHUwM0IwJzogJ1xcdTAzQzUnLFxyXG4gICAgJ1xcdTAzQzknOiAnXFx1MDNDOScsXHJcbiAgICAnXFx1MDNDMic6ICdcXHUwM0MzJ1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBkaWFjcml0aWNzO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL2Jhc2UnLFtcclxuICAnLi4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uIChVdGlscykge1xyXG4gIGZ1bmN0aW9uIEJhc2VBZGFwdGVyICgkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgQmFzZUFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoQmFzZUFkYXB0ZXIsIFV0aWxzLk9ic2VydmFibGUpO1xyXG5cclxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYGN1cnJlbnRgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy4nKTtcclxuICB9O1xyXG5cclxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHF1ZXJ5YCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuJyk7XHJcbiAgfTtcclxuXHJcbiAgQmFzZUFkYXB0ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICAvLyBDYW4gYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3Nlc1xyXG4gIH07XHJcblxyXG4gIEJhc2VBZGFwdGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gQ2FuIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcclxuICB9O1xyXG5cclxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuZ2VuZXJhdGVSZXN1bHRJZCA9IGZ1bmN0aW9uIChjb250YWluZXIsIGRhdGEpIHtcclxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0LSc7XHJcblxyXG4gICAgaWQgKz0gVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcclxuXHJcbiAgICBpZiAoZGF0YS5pZCAhPSBudWxsKSB7XHJcbiAgICAgIGlkICs9ICctJyArIGRhdGEuaWQudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlkICs9ICctJyArIFV0aWxzLmdlbmVyYXRlQ2hhcnMoNCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEJhc2VBZGFwdGVyO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL3NlbGVjdCcsW1xyXG4gICcuL2Jhc2UnLFxyXG4gICcuLi91dGlscycsXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKEJhc2VBZGFwdGVyLCBVdGlscywgJCkge1xyXG4gIGZ1bmN0aW9uIFNlbGVjdEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIFNlbGVjdEFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoU2VsZWN0QWRhcHRlciwgQmFzZUFkYXB0ZXIpO1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnOnNlbGVjdGVkJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcclxuXHJcbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLml0ZW0oJG9wdGlvbik7XHJcblxyXG4gICAgICBkYXRhLnB1c2gob3B0aW9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgZGF0YS5zZWxlY3RlZCA9IHRydWU7XHJcblxyXG4gICAgLy8gSWYgZGF0YS5lbGVtZW50IGlzIGEgRE9NIG5vZGUsIHVzZSBpdCBpbnN0ZWFkXHJcbiAgICBpZiAoJChkYXRhLmVsZW1lbnQpLmlzKCdvcHRpb24nKSkge1xyXG4gICAgICBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy4kZWxlbWVudC5wcm9wKCdtdWx0aXBsZScpKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcclxuICAgICAgICB2YXIgdmFsID0gW107XHJcblxyXG4gICAgICAgIGRhdGEgPSBbZGF0YV07XHJcbiAgICAgICAgZGF0YS5wdXNoLmFwcGx5KGRhdGEsIGN1cnJlbnREYXRhKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICB2YXIgaWQgPSBkYXRhW2RdLmlkO1xyXG5cclxuICAgICAgICAgIGlmICgkLmluQXJyYXkoaWQsIHZhbCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHZhbC5wdXNoKGlkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuJGVsZW1lbnQudmFsKHZhbCk7XHJcbiAgICAgICAgc2VsZi4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgdmFsID0gZGF0YS5pZDtcclxuXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudmFsKHZhbCk7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUudW5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGlmICghdGhpcy4kZWxlbWVudC5wcm9wKCdtdWx0aXBsZScpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLnNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKCQoZGF0YS5lbGVtZW50KS5pcygnb3B0aW9uJykpIHtcclxuICAgICAgZGF0YS5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZScpO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcclxuICAgICAgdmFyIHZhbCA9IFtdO1xyXG5cclxuICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBjdXJyZW50RGF0YS5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgIHZhciBpZCA9IGN1cnJlbnREYXRhW2RdLmlkO1xyXG5cclxuICAgICAgICBpZiAoaWQgIT09IGRhdGEuaWQgJiYgJC5pbkFycmF5KGlkLCB2YWwpID09PSAtMSkge1xyXG4gICAgICAgICAgdmFsLnB1c2goaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi4kZWxlbWVudC52YWwodmFsKTtcclxuXHJcbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLnNlbGVjdChwYXJhbXMuZGF0YSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Vuc2VsZWN0JywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLnVuc2VsZWN0KHBhcmFtcy5kYXRhKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBSZW1vdmUgYW55dGhpbmcgYWRkZWQgdG8gY2hpbGQgZWxlbWVudHNcclxuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnKicpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBSZW1vdmUgYW55IGN1c3RvbSBkYXRhIHNldCBieSBTZWxlY3QyXHJcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnZGF0YScpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIGRhdGEgPSBbXTtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCk7XHJcblxyXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcclxuXHJcbiAgICAgIGlmICghJG9wdGlvbi5pcygnb3B0aW9uJykgJiYgISRvcHRpb24uaXMoJ29wdGdyb3VwJykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLml0ZW0oJG9wdGlvbik7XHJcblxyXG4gICAgICB2YXIgbWF0Y2hlcyA9IHNlbGYubWF0Y2hlcyhwYXJhbXMsIG9wdGlvbik7XHJcblxyXG4gICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xyXG4gICAgICAgIGRhdGEucHVzaChtYXRjaGVzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY2FsbGJhY2soe1xyXG4gICAgICByZXN1bHRzOiBkYXRhXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5hZGRPcHRpb25zID0gZnVuY3Rpb24gKCRvcHRpb25zKSB7XHJcbiAgICBVdGlscy5hcHBlbmRNYW55KHRoaXMuJGVsZW1lbnQsICRvcHRpb25zKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIG9wdGlvbjtcclxuXHJcbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xyXG4gICAgICBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpO1xyXG4gICAgICBvcHRpb24ubGFiZWwgPSBkYXRhLnRleHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb24udGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGRhdGEudGV4dDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gZGF0YS50ZXh0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuaWQpIHtcclxuICAgICAgb3B0aW9uLnZhbHVlID0gZGF0YS5pZDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS5kaXNhYmxlZCkge1xyXG4gICAgICBvcHRpb24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLnNlbGVjdGVkKSB7XHJcbiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEudGl0bGUpIHtcclxuICAgICAgb3B0aW9uLnRpdGxlID0gZGF0YS50aXRsZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgJG9wdGlvbiA9ICQob3B0aW9uKTtcclxuXHJcbiAgICB2YXIgbm9ybWFsaXplZERhdGEgPSB0aGlzLl9ub3JtYWxpemVJdGVtKGRhdGEpO1xyXG4gICAgbm9ybWFsaXplZERhdGEuZWxlbWVudCA9IG9wdGlvbjtcclxuXHJcbiAgICAvLyBPdmVycmlkZSB0aGUgb3B0aW9uJ3MgZGF0YSB3aXRoIHRoZSBjb21iaW5lZCBkYXRhXHJcbiAgICAkLmRhdGEob3B0aW9uLCAnZGF0YScsIG5vcm1hbGl6ZWREYXRhKTtcclxuXHJcbiAgICByZXR1cm4gJG9wdGlvbjtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24gKCRvcHRpb24pIHtcclxuICAgIHZhciBkYXRhID0ge307XHJcblxyXG4gICAgZGF0YSA9ICQuZGF0YSgkb3B0aW9uWzBdLCAnZGF0YScpO1xyXG5cclxuICAgIGlmIChkYXRhICE9IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCRvcHRpb24uaXMoJ29wdGlvbicpKSB7XHJcbiAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgaWQ6ICRvcHRpb24udmFsKCksXHJcbiAgICAgICAgdGV4dDogJG9wdGlvbi50ZXh0KCksXHJcbiAgICAgICAgZGlzYWJsZWQ6ICRvcHRpb24ucHJvcCgnZGlzYWJsZWQnKSxcclxuICAgICAgICBzZWxlY3RlZDogJG9wdGlvbi5wcm9wKCdzZWxlY3RlZCcpLFxyXG4gICAgICAgIHRpdGxlOiAkb3B0aW9uLnByb3AoJ3RpdGxlJylcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSBpZiAoJG9wdGlvbi5pcygnb3B0Z3JvdXAnKSkge1xyXG4gICAgICBkYXRhID0ge1xyXG4gICAgICAgIHRleHQ6ICRvcHRpb24ucHJvcCgnbGFiZWwnKSxcclxuICAgICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgICAgdGl0bGU6ICRvcHRpb24ucHJvcCgndGl0bGUnKVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyICRjaGlsZHJlbiA9ICRvcHRpb24uY2hpbGRyZW4oJ29wdGlvbicpO1xyXG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHJcbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgJGNoaWxkcmVuLmxlbmd0aDsgYysrKSB7XHJcbiAgICAgICAgdmFyICRjaGlsZCA9ICQoJGNoaWxkcmVuW2NdKTtcclxuXHJcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5pdGVtKCRjaGlsZCk7XHJcblxyXG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkYXRhLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0oZGF0YSk7XHJcbiAgICBkYXRhLmVsZW1lbnQgPSAkb3B0aW9uWzBdO1xyXG5cclxuICAgICQuZGF0YSgkb3B0aW9uWzBdLCAnZGF0YScsIGRhdGEpO1xyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLl9ub3JtYWxpemVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIGlmICghJC5pc1BsYWluT2JqZWN0KGl0ZW0pKSB7XHJcbiAgICAgIGl0ZW0gPSB7XHJcbiAgICAgICAgaWQ6IGl0ZW0sXHJcbiAgICAgICAgdGV4dDogaXRlbVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGl0ZW0gPSAkLmV4dGVuZCh7fSwge1xyXG4gICAgICB0ZXh0OiAnJ1xyXG4gICAgfSwgaXRlbSk7XHJcblxyXG4gICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICBzZWxlY3RlZDogZmFsc2UsXHJcbiAgICAgIGRpc2FibGVkOiBmYWxzZVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoaXRlbS5pZCAhPSBudWxsKSB7XHJcbiAgICAgIGl0ZW0uaWQgPSBpdGVtLmlkLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGl0ZW0udGV4dCAhPSBudWxsKSB7XHJcbiAgICAgIGl0ZW0udGV4dCA9IGl0ZW0udGV4dC50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpdGVtLl9yZXN1bHRJZCA9PSBudWxsICYmIGl0ZW0uaWQgJiYgdGhpcy5jb250YWluZXIgIT0gbnVsbCkge1xyXG4gICAgICBpdGVtLl9yZXN1bHRJZCA9IHRoaXMuZ2VuZXJhdGVSZXN1bHRJZCh0aGlzLmNvbnRhaW5lciwgaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgaXRlbSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uIChwYXJhbXMsIGRhdGEpIHtcclxuICAgIHZhciBtYXRjaGVyID0gdGhpcy5vcHRpb25zLmdldCgnbWF0Y2hlcicpO1xyXG5cclxuICAgIHJldHVybiBtYXRjaGVyKHBhcmFtcywgZGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFNlbGVjdEFkYXB0ZXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvYXJyYXknLFtcclxuICAnLi9zZWxlY3QnLFxyXG4gICcuLi91dGlscycsXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKFNlbGVjdEFkYXB0ZXIsIFV0aWxzLCAkKSB7XHJcbiAgZnVuY3Rpb24gQXJyYXlBZGFwdGVyICgkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdmFyIGRhdGEgPSBvcHRpb25zLmdldCgnZGF0YScpIHx8IFtdO1xyXG5cclxuICAgIEFycmF5QWRhcHRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XHJcblxyXG4gICAgdGhpcy5hZGRPcHRpb25zKHRoaXMuY29udmVydFRvT3B0aW9ucyhkYXRhKSk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoQXJyYXlBZGFwdGVyLCBTZWxlY3RBZGFwdGVyKTtcclxuXHJcbiAgQXJyYXlBZGFwdGVyLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyICRvcHRpb24gPSB0aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpLmZpbHRlcihmdW5jdGlvbiAoaSwgZWxtKSB7XHJcbiAgICAgIHJldHVybiBlbG0udmFsdWUgPT0gZGF0YS5pZC50b1N0cmluZygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCRvcHRpb24ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICRvcHRpb24gPSB0aGlzLm9wdGlvbihkYXRhKTtcclxuXHJcbiAgICAgIHRoaXMuYWRkT3B0aW9ucygkb3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBBcnJheUFkYXB0ZXIuX19zdXBlcl9fLnNlbGVjdC5jYWxsKHRoaXMsIGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIEFycmF5QWRhcHRlci5wcm90b3R5cGUuY29udmVydFRvT3B0aW9ucyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyICRleGlzdGluZyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnb3B0aW9uJyk7XHJcbiAgICB2YXIgZXhpc3RpbmdJZHMgPSAkZXhpc3RpbmcubWFwKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHNlbGYuaXRlbSgkKHRoaXMpKS5pZDtcclxuICAgIH0pLmdldCgpO1xyXG5cclxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xyXG5cclxuICAgIC8vIEZpbHRlciBvdXQgYWxsIGl0ZW1zIGV4Y2VwdCBmb3IgdGhlIG9uZSBwYXNzZWQgaW4gdGhlIGFyZ3VtZW50XHJcbiAgICBmdW5jdGlvbiBvbmx5SXRlbSAoaXRlbSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpID09IGl0ZW0uaWQ7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gdGhpcy5fbm9ybWFsaXplSXRlbShkYXRhW2RdKTtcclxuXHJcbiAgICAgIC8vIFNraXAgaXRlbXMgd2hpY2ggd2VyZSBwcmUtbG9hZGVkLCBvbmx5IG1lcmdlIHRoZSBkYXRhXHJcbiAgICAgIGlmICgkLmluQXJyYXkoaXRlbS5pZCwgZXhpc3RpbmdJZHMpID49IDApIHtcclxuICAgICAgICB2YXIgJGV4aXN0aW5nT3B0aW9uID0gJGV4aXN0aW5nLmZpbHRlcihvbmx5SXRlbShpdGVtKSk7XHJcblxyXG4gICAgICAgIHZhciBleGlzdGluZ0RhdGEgPSB0aGlzLml0ZW0oJGV4aXN0aW5nT3B0aW9uKTtcclxuICAgICAgICB2YXIgbmV3RGF0YSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBpdGVtLCBleGlzdGluZ0RhdGEpO1xyXG5cclxuICAgICAgICB2YXIgJG5ld09wdGlvbiA9IHRoaXMub3B0aW9uKG5ld0RhdGEpO1xyXG5cclxuICAgICAgICAkZXhpc3RpbmdPcHRpb24ucmVwbGFjZVdpdGgoJG5ld09wdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xyXG5cclxuICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgJGNoaWxkcmVuID0gdGhpcy5jb252ZXJ0VG9PcHRpb25zKGl0ZW0uY2hpbGRyZW4pO1xyXG5cclxuICAgICAgICBVdGlscy5hcHBlbmRNYW55KCRvcHRpb24sICRjaGlsZHJlbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRvcHRpb25zLnB1c2goJG9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICRvcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBBcnJheUFkYXB0ZXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvYWpheCcsW1xyXG4gICcuL2FycmF5JyxcclxuICAnLi4vdXRpbHMnLFxyXG4gICdqcXVlcnknXHJcbl0sIGZ1bmN0aW9uIChBcnJheUFkYXB0ZXIsIFV0aWxzLCAkKSB7XHJcbiAgZnVuY3Rpb24gQWpheEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLmFqYXhPcHRpb25zID0gdGhpcy5fYXBwbHlEZWZhdWx0cyhvcHRpb25zLmdldCgnYWpheCcpKTtcclxuXHJcbiAgICBpZiAodGhpcy5hamF4T3B0aW9ucy5wcm9jZXNzUmVzdWx0cyAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMucHJvY2Vzc1Jlc3VsdHMgPSB0aGlzLmFqYXhPcHRpb25zLnByb2Nlc3NSZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIEFqYXhBZGFwdGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChBamF4QWRhcHRlciwgQXJyYXlBZGFwdGVyKTtcclxuXHJcbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLl9hcHBseURlZmF1bHRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgZGF0YTogZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgcGFyYW1zLCB7XHJcbiAgICAgICAgICBxOiBwYXJhbXMudGVybVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICB0cmFuc3BvcnQ6IGZ1bmN0aW9uIChwYXJhbXMsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcclxuICAgICAgICB2YXIgJHJlcXVlc3QgPSAkLmFqYXgocGFyYW1zKTtcclxuXHJcbiAgICAgICAgJHJlcXVlc3QudGhlbihzdWNjZXNzKTtcclxuICAgICAgICAkcmVxdWVzdC5mYWlsKGZhaWx1cmUpO1xyXG5cclxuICAgICAgICByZXR1cm4gJHJlcXVlc3Q7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgdHJ1ZSk7XHJcbiAgfTtcclxuXHJcbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLnByb2Nlc3NSZXN1bHRzID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH07XHJcblxyXG4gIEFqYXhBZGFwdGVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGlmICh0aGlzLl9yZXF1ZXN0ICE9IG51bGwpIHtcclxuICAgICAgLy8gSlNPTlAgcmVxdWVzdHMgY2Fubm90IGFsd2F5cyBiZSBhYm9ydGVkXHJcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24odGhpcy5fcmVxdWVzdC5hYm9ydCkpIHtcclxuICAgICAgICB0aGlzLl9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe1xyXG4gICAgICB0eXBlOiAnR0VUJ1xyXG4gICAgfSwgdGhpcy5hamF4T3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsLmNhbGwodGhpcy4kZWxlbWVudCwgcGFyYW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBvcHRpb25zLmRhdGEgPSBvcHRpb25zLmRhdGEuY2FsbCh0aGlzLiRlbGVtZW50LCBwYXJhbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlcXVlc3QgKCkge1xyXG4gICAgICB2YXIgJHJlcXVlc3QgPSBvcHRpb25zLnRyYW5zcG9ydChvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gc2VsZi5wcm9jZXNzUmVzdWx0cyhkYXRhLCBwYXJhbXMpO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcmVzcG9uc2UgaW5jbHVkZWQgYSBgcmVzdWx0c2Aga2V5LlxyXG4gICAgICAgICAgaWYgKCFyZXN1bHRzIHx8ICFyZXN1bHRzLnJlc3VsdHMgfHwgISQuaXNBcnJheShyZXN1bHRzLnJlc3VsdHMpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgJ1NlbGVjdDI6IFRoZSBBSkFYIHJlc3VsdHMgZGlkIG5vdCByZXR1cm4gYW4gYXJyYXkgaW4gdGhlICcgK1xyXG4gICAgICAgICAgICAgICdgcmVzdWx0c2Aga2V5IG9mIHRoZSByZXNwb25zZS4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYWxsYmFjayhyZXN1bHRzKTtcclxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGlmIGEgcmVxdWVzdCB3YXMgYWJvcnRlZFxyXG4gICAgICAgIC8vIE9ubHkgd29ya3MgaWYgdGhlIHRyYW5zcG9ydCBleHBvc2VzIGEgc3RhdHVzIHByb3BlcnR5XHJcbiAgICAgICAgaWYgKCRyZXF1ZXN0LnN0YXR1cyAmJiAkcmVxdWVzdC5zdGF0dXMgPT09ICcwJykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XHJcbiAgICAgICAgICBtZXNzYWdlOiAnZXJyb3JMb2FkaW5nJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYuX3JlcXVlc3QgPSAkcmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5hamF4T3B0aW9ucy5kZWxheSAmJiBwYXJhbXMudGVybSAhPSBudWxsKSB7XHJcbiAgICAgIGlmICh0aGlzLl9xdWVyeVRpbWVvdXQpIHtcclxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3F1ZXJ5VGltZW91dCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3F1ZXJ5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlcXVlc3QsIHRoaXMuYWpheE9wdGlvbnMuZGVsYXkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVxdWVzdCgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiBBamF4QWRhcHRlcjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS90YWdzJyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICBmdW5jdGlvbiBUYWdzIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB2YXIgdGFncyA9IG9wdGlvbnMuZ2V0KCd0YWdzJyk7XHJcblxyXG4gICAgdmFyIGNyZWF0ZVRhZyA9IG9wdGlvbnMuZ2V0KCdjcmVhdGVUYWcnKTtcclxuXHJcbiAgICBpZiAoY3JlYXRlVGFnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5jcmVhdGVUYWcgPSBjcmVhdGVUYWc7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluc2VydFRhZyA9IG9wdGlvbnMuZ2V0KCdpbnNlcnRUYWcnKTtcclxuXHJcbiAgICBpZiAoaW5zZXJ0VGFnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLmluc2VydFRhZyA9IGluc2VydFRhZztcclxuICAgIH1cclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKCQuaXNBcnJheSh0YWdzKSkge1xyXG4gICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRhZ3MubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICB2YXIgdGFnID0gdGFnc1t0XTtcclxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0odGFnKTtcclxuXHJcbiAgICAgICAgdmFyICRvcHRpb24gPSB0aGlzLm9wdGlvbihpdGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmQoJG9wdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIFRhZ3MucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMuX3JlbW92ZU9sZFRhZ3MoKTtcclxuXHJcbiAgICBpZiAocGFyYW1zLnRlcm0gPT0gbnVsbCB8fCBwYXJhbXMucGFnZSAhPSBudWxsKSB7XHJcbiAgICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gd3JhcHBlciAob2JqLCBjaGlsZCkge1xyXG4gICAgICB2YXIgZGF0YSA9IG9iai5yZXN1bHRzO1xyXG5cclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbiA9IGRhdGFbaV07XHJcblxyXG4gICAgICAgIHZhciBjaGVja0NoaWxkcmVuID0gKFxyXG4gICAgICAgICAgb3B0aW9uLmNoaWxkcmVuICE9IG51bGwgJiZcclxuICAgICAgICAgICF3cmFwcGVyKHtcclxuICAgICAgICAgICAgcmVzdWx0czogb3B0aW9uLmNoaWxkcmVuXHJcbiAgICAgICAgICB9LCB0cnVlKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHZhciBjaGVja1RleHQgPSBvcHRpb24udGV4dCA9PT0gcGFyYW1zLnRlcm07XHJcblxyXG4gICAgICAgIGlmIChjaGVja1RleHQgfHwgY2hlY2tDaGlsZHJlbikge1xyXG4gICAgICAgICAgaWYgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBvYmouZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICBjYWxsYmFjayhvYmopO1xyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdGFnID0gc2VsZi5jcmVhdGVUYWcocGFyYW1zKTtcclxuXHJcbiAgICAgIGlmICh0YWcgIT0gbnVsbCkge1xyXG4gICAgICAgIHZhciAkb3B0aW9uID0gc2VsZi5vcHRpb24odGFnKTtcclxuICAgICAgICAkb3B0aW9uLmF0dHIoJ2RhdGEtc2VsZWN0Mi10YWcnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGRPcHRpb25zKFskb3B0aW9uXSk7XHJcblxyXG4gICAgICAgIHNlbGYuaW5zZXJ0VGFnKGRhdGEsIHRhZyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9iai5yZXN1bHRzID0gZGF0YTtcclxuXHJcbiAgICAgIGNhbGxiYWNrKG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCB3cmFwcGVyKTtcclxuICB9O1xyXG5cclxuICBUYWdzLnByb3RvdHlwZS5jcmVhdGVUYWcgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMpIHtcclxuICAgIHZhciB0ZXJtID0gJC50cmltKHBhcmFtcy50ZXJtKTtcclxuXHJcbiAgICBpZiAodGVybSA9PT0gJycpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IHRlcm0sXHJcbiAgICAgIHRleHQ6IHRlcm1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgVGFncy5wcm90b3R5cGUuaW5zZXJ0VGFnID0gZnVuY3Rpb24gKF8sIGRhdGEsIHRhZykge1xyXG4gICAgZGF0YS51bnNoaWZ0KHRhZyk7XHJcbiAgfTtcclxuXHJcbiAgVGFncy5wcm90b3R5cGUuX3JlbW92ZU9sZFRhZ3MgPSBmdW5jdGlvbiAoXykge1xyXG4gICAgdmFyIHRhZyA9IHRoaXMuX2xhc3RUYWc7XHJcblxyXG4gICAgdmFyICRvcHRpb25zID0gdGhpcy4kZWxlbWVudC5maW5kKCdvcHRpb25bZGF0YS1zZWxlY3QyLXRhZ10nKTtcclxuXHJcbiAgICAkb3B0aW9ucy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gVGFncztcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS90b2tlbml6ZXInLFtcclxuICAnanF1ZXJ5J1xyXG5dLCBmdW5jdGlvbiAoJCkge1xyXG4gIGZ1bmN0aW9uIFRva2VuaXplciAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdmFyIHRva2VuaXplciA9IG9wdGlvbnMuZ2V0KCd0b2tlbml6ZXInKTtcclxuXHJcbiAgICBpZiAodG9rZW5pemVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgVG9rZW5pemVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaCA9ICBjb250YWluZXIuZHJvcGRvd24uJHNlYXJjaCB8fCBjb250YWluZXIuc2VsZWN0aW9uLiRzZWFyY2ggfHxcclxuICAgICAgJGNvbnRhaW5lci5maW5kKCcuc2VsZWN0Mi1zZWFyY2hfX2ZpZWxkJyk7XHJcbiAgfTtcclxuXHJcbiAgVG9rZW5pemVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVBbmRTZWxlY3QgKGRhdGEpIHtcclxuICAgICAgLy8gTm9ybWFsaXplIHRoZSBkYXRhIG9iamVjdCBzbyB3ZSBjYW4gdXNlIGl0IGZvciBjaGVja3NcclxuICAgICAgdmFyIGl0ZW0gPSBzZWxmLl9ub3JtYWxpemVJdGVtKGRhdGEpO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGRhdGEgb2JqZWN0IGFscmVhZHkgZXhpc3RzIGFzIGEgdGFnXHJcbiAgICAgIC8vIFNlbGVjdCBpdCBpZiBpdCBkb2Vzbid0XHJcbiAgICAgIHZhciAkZXhpc3RpbmdPcHRpb25zID0gc2VsZi4kZWxlbWVudC5maW5kKCdvcHRpb24nKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpID09PSBpdGVtLmlkO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIElmIGFuIGV4aXN0aW5nIG9wdGlvbiB3YXNuJ3QgZm91bmQgZm9yIGl0LCBjcmVhdGUgdGhlIG9wdGlvblxyXG4gICAgICBpZiAoISRleGlzdGluZ09wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyICRvcHRpb24gPSBzZWxmLm9wdGlvbihpdGVtKTtcclxuICAgICAgICAkb3B0aW9uLmF0dHIoJ2RhdGEtc2VsZWN0Mi10YWcnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgc2VsZi5fcmVtb3ZlT2xkVGFncygpO1xyXG4gICAgICAgIHNlbGYuYWRkT3B0aW9ucyhbJG9wdGlvbl0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTZWxlY3QgdGhlIGl0ZW0sIG5vdyB0aGF0IHdlIGtub3cgdGhlcmUgaXMgYW4gb3B0aW9uIGZvciBpdFxyXG4gICAgICBzZWxlY3QoaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2VsZWN0IChkYXRhKSB7XHJcbiAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xyXG4gICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyYW1zLnRlcm0gPSBwYXJhbXMudGVybSB8fCAnJztcclxuXHJcbiAgICB2YXIgdG9rZW5EYXRhID0gdGhpcy50b2tlbml6ZXIocGFyYW1zLCB0aGlzLm9wdGlvbnMsIGNyZWF0ZUFuZFNlbGVjdCk7XHJcblxyXG4gICAgaWYgKHRva2VuRGF0YS50ZXJtICE9PSBwYXJhbXMudGVybSkge1xyXG4gICAgICAvLyBSZXBsYWNlIHRoZSBzZWFyY2ggdGVybSBpZiB3ZSBoYXZlIHRoZSBzZWFyY2ggYm94XHJcbiAgICAgIGlmICh0aGlzLiRzZWFyY2gubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy4kc2VhcmNoLnZhbCh0b2tlbkRhdGEudGVybSk7XHJcbiAgICAgICAgdGhpcy4kc2VhcmNoLmZvY3VzKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBhcmFtcy50ZXJtID0gdG9rZW5EYXRhLnRlcm07XHJcbiAgICB9XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XHJcbiAgfTtcclxuXHJcbiAgVG9rZW5pemVyLnByb3RvdHlwZS50b2tlbml6ZXIgPSBmdW5jdGlvbiAoXywgcGFyYW1zLCBvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIHNlcGFyYXRvcnMgPSBvcHRpb25zLmdldCgndG9rZW5TZXBhcmF0b3JzJykgfHwgW107XHJcbiAgICB2YXIgdGVybSA9IHBhcmFtcy50ZXJtO1xyXG4gICAgdmFyIGkgPSAwO1xyXG5cclxuICAgIHZhciBjcmVhdGVUYWcgPSB0aGlzLmNyZWF0ZVRhZyB8fCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IHBhcmFtcy50ZXJtLFxyXG4gICAgICAgIHRleHQ6IHBhcmFtcy50ZXJtXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHdoaWxlIChpIDwgdGVybS5sZW5ndGgpIHtcclxuICAgICAgdmFyIHRlcm1DaGFyID0gdGVybVtpXTtcclxuXHJcbiAgICAgIGlmICgkLmluQXJyYXkodGVybUNoYXIsIHNlcGFyYXRvcnMpID09PSAtMSkge1xyXG4gICAgICAgIGkrKztcclxuXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBwYXJ0ID0gdGVybS5zdWJzdHIoMCwgaSk7XHJcbiAgICAgIHZhciBwYXJ0UGFyYW1zID0gJC5leHRlbmQoe30sIHBhcmFtcywge1xyXG4gICAgICAgIHRlcm06IHBhcnRcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgZGF0YSA9IGNyZWF0ZVRhZyhwYXJ0UGFyYW1zKTtcclxuXHJcbiAgICAgIGlmIChkYXRhID09IG51bGwpIHtcclxuICAgICAgICBpKys7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG5cclxuICAgICAgLy8gUmVzZXQgdGhlIHRlcm0gdG8gbm90IGluY2x1ZGUgdGhlIHRva2VuaXplZCBwb3J0aW9uXHJcbiAgICAgIHRlcm0gPSB0ZXJtLnN1YnN0cihpICsgMSkgfHwgJyc7XHJcbiAgICAgIGkgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRlcm06IHRlcm1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFRva2VuaXplcjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9taW5pbXVtSW5wdXRMZW5ndGgnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBNaW5pbXVtSW5wdXRMZW5ndGggKGRlY29yYXRlZCwgJGUsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMubWluaW11bUlucHV0TGVuZ3RoID0gb3B0aW9ucy5nZXQoJ21pbmltdW1JbnB1dExlbmd0aCcpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIE1pbmltdW1JbnB1dExlbmd0aC5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICBwYXJhbXMudGVybSA9IHBhcmFtcy50ZXJtIHx8ICcnO1xyXG5cclxuICAgIGlmIChwYXJhbXMudGVybS5sZW5ndGggPCB0aGlzLm1pbmltdW1JbnB1dExlbmd0aCkge1xyXG4gICAgICB0aGlzLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcclxuICAgICAgICBtZXNzYWdlOiAnaW5wdXRUb29TaG9ydCcsXHJcbiAgICAgICAgYXJnczoge1xyXG4gICAgICAgICAgbWluaW11bTogdGhpcy5taW5pbXVtSW5wdXRMZW5ndGgsXHJcbiAgICAgICAgICBpbnB1dDogcGFyYW1zLnRlcm0sXHJcbiAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1pbmltdW1JbnB1dExlbmd0aDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9tYXhpbXVtSW5wdXRMZW5ndGgnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBNYXhpbXVtSW5wdXRMZW5ndGggKGRlY29yYXRlZCwgJGUsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMubWF4aW11bUlucHV0TGVuZ3RoID0gb3B0aW9ucy5nZXQoJ21heGltdW1JbnB1dExlbmd0aCcpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIE1heGltdW1JbnB1dExlbmd0aC5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICBwYXJhbXMudGVybSA9IHBhcmFtcy50ZXJtIHx8ICcnO1xyXG5cclxuICAgIGlmICh0aGlzLm1heGltdW1JbnB1dExlbmd0aCA+IDAgJiZcclxuICAgICAgICBwYXJhbXMudGVybS5sZW5ndGggPiB0aGlzLm1heGltdW1JbnB1dExlbmd0aCkge1xyXG4gICAgICB0aGlzLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcclxuICAgICAgICBtZXNzYWdlOiAnaW5wdXRUb29Mb25nJyxcclxuICAgICAgICBhcmdzOiB7XHJcbiAgICAgICAgICBtYXhpbXVtOiB0aGlzLm1heGltdW1JbnB1dExlbmd0aCxcclxuICAgICAgICAgIGlucHV0OiBwYXJhbXMudGVybSxcclxuICAgICAgICAgIHBhcmFtczogcGFyYW1zXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMsIGNhbGxiYWNrKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTWF4aW11bUlucHV0TGVuZ3RoO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL21heGltdW1TZWxlY3Rpb25MZW5ndGgnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpe1xyXG4gIGZ1bmN0aW9uIE1heGltdW1TZWxlY3Rpb25MZW5ndGggKGRlY29yYXRlZCwgJGUsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMubWF4aW11bVNlbGVjdGlvbkxlbmd0aCA9IG9wdGlvbnMuZ2V0KCdtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyk7XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGUsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgTWF4aW11bVNlbGVjdGlvbkxlbmd0aC5wcm90b3R5cGUucXVlcnkgPVxyXG4gICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICB0aGlzLmN1cnJlbnQoZnVuY3Rpb24gKGN1cnJlbnREYXRhKSB7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gY3VycmVudERhdGEgIT0gbnVsbCA/IGN1cnJlbnREYXRhLmxlbmd0aCA6IDA7XHJcbiAgICAgICAgaWYgKHNlbGYubWF4aW11bVNlbGVjdGlvbkxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgIGNvdW50ID49IHNlbGYubWF4aW11bVNlbGVjdGlvbkxlbmd0aCkge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdtYXhpbXVtU2VsZWN0ZWQnLFxyXG4gICAgICAgICAgICBhcmdzOiB7XHJcbiAgICAgICAgICAgICAgbWF4aW11bTogc2VsZi5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWNvcmF0ZWQuY2FsbChzZWxmLCBwYXJhbXMsIGNhbGxiYWNrKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1heGltdW1TZWxlY3Rpb25MZW5ndGg7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uICgkLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIERyb3Bkb3duICgkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICBEcm9wZG93bi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChEcm9wZG93biwgVXRpbHMuT2JzZXJ2YWJsZSk7XHJcblxyXG4gIERyb3Bkb3duLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJGRyb3Bkb3duID0gJChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1kcm9wZG93blwiPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItcmVzdWx0c1wiPjwvc3Bhbj4nICtcclxuICAgICAgJzwvc3Bhbj4nXHJcbiAgICApO1xyXG5cclxuICAgICRkcm9wZG93bi5hdHRyKCdkaXInLCB0aGlzLm9wdGlvbnMuZ2V0KCdkaXInKSk7XHJcblxyXG4gICAgdGhpcy4kZHJvcGRvd24gPSAkZHJvcGRvd247XHJcblxyXG4gICAgcmV0dXJuICRkcm9wZG93bjtcclxuICB9O1xyXG5cclxuICBEcm9wZG93bi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc2VzXHJcbiAgfTtcclxuXHJcbiAgRHJvcGRvd24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRkcm9wZG93biwgJGNvbnRhaW5lcikge1xyXG4gICAgLy8gU2hvdWxkIGJlIGltcGxtZW50ZWQgaW4gc3ViY2xhc3Nlc1xyXG4gIH07XHJcblxyXG4gIERyb3Bkb3duLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gUmVtb3ZlIHRoZSBkcm9wZG93biBmcm9tIHRoZSBET01cclxuICAgIHRoaXMuJGRyb3Bkb3duLnJlbW92ZSgpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBEcm9wZG93bjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vc2VhcmNoJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4uL3V0aWxzJ1xyXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMpIHtcclxuICBmdW5jdGlvbiBTZWFyY2ggKCkgeyB9XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgdmFyICRyZW5kZXJlZCA9IGRlY29yYXRlZC5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHZhciAkc2VhcmNoID0gJChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWFyY2ggc2VsZWN0Mi1zZWFyY2gtLWRyb3Bkb3duXCI+JyArXHJcbiAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlbGVjdDItc2VhcmNoX19maWVsZFwiIHR5cGU9XCJzZWFyY2hcIiB0YWJpbmRleD1cIi0xXCInICtcclxuICAgICAgICAnIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGF1dG9jb3JyZWN0PVwib2ZmXCIgYXV0b2NhcGl0YWxpemU9XCJvZmZcIicgK1xyXG4gICAgICAgICcgc3BlbGxjaGVjaz1cImZhbHNlXCIgcm9sZT1cInRleHRib3hcIiAvPicgK1xyXG4gICAgICAnPC9zcGFuPidcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy4kc2VhcmNoQ29udGFpbmVyID0gJHNlYXJjaDtcclxuICAgIHRoaXMuJHNlYXJjaCA9ICRzZWFyY2guZmluZCgnaW5wdXQnKTtcclxuXHJcbiAgICAkcmVuZGVyZWQucHJlcGVuZCgkc2VhcmNoKTtcclxuXHJcbiAgICByZXR1cm4gJHJlbmRlcmVkO1xyXG4gIH07XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdGhpcy4kc2VhcmNoLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ2tleXByZXNzJywgZXZ0KTtcclxuXHJcbiAgICAgIHNlbGYuX2tleVVwUHJldmVudGVkID0gZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgYnJvd3NlcnMgd2hpY2ggZG8gbm90IHN1cHBvcnQgdGhlIGBpbnB1dGAgZXZlbnRcclxuICAgIC8vIFRoaXMgd2lsbCBwcmV2ZW50IGRvdWJsZS10cmlnZ2VyaW5nIG9mIGV2ZW50cyBmb3IgYnJvd3NlcnMgd2hpY2ggc3VwcG9ydFxyXG4gICAgLy8gYm90aCB0aGUgYGtleXVwYCBhbmQgYGlucHV0YCBldmVudHMuXHJcbiAgICB0aGlzLiRzZWFyY2gub24oJ2lucHV0JywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAvLyBVbmJpbmQgdGhlIGR1cGxpY2F0ZWQgYGtleXVwYCBldmVudFxyXG4gICAgICAkKHRoaXMpLm9mZigna2V5dXAnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaC5vbigna2V5dXAgaW5wdXQnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuaGFuZGxlU2VhcmNoKGV2dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJHNlYXJjaC5hdHRyKCd0YWJpbmRleCcsIDApO1xyXG5cclxuICAgICAgc2VsZi4kc2VhcmNoLmZvY3VzKCk7XHJcblxyXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi4kc2VhcmNoLmZvY3VzKCk7XHJcbiAgICAgIH0sIDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgLTEpO1xyXG5cclxuICAgICAgc2VsZi4kc2VhcmNoLnZhbCgnJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2ZvY3VzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgICAgc2VsZi4kc2VhcmNoLmZvY3VzKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphbGwnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIGlmIChwYXJhbXMucXVlcnkudGVybSA9PSBudWxsIHx8IHBhcmFtcy5xdWVyeS50ZXJtID09PSAnJykge1xyXG4gICAgICAgIHZhciBzaG93U2VhcmNoID0gc2VsZi5zaG93U2VhcmNoKHBhcmFtcyk7XHJcblxyXG4gICAgICAgIGlmIChzaG93U2VhcmNoKSB7XHJcbiAgICAgICAgICBzZWxmLiRzZWFyY2hDb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItc2VhcmNoLS1oaWRlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGYuJHNlYXJjaENvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1zZWFyY2gtLWhpZGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUuaGFuZGxlU2VhcmNoID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgaWYgKCF0aGlzLl9rZXlVcFByZXZlbnRlZCkge1xyXG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLiRzZWFyY2gudmFsKCk7XHJcblxyXG4gICAgICB0aGlzLnRyaWdnZXIoJ3F1ZXJ5Jywge1xyXG4gICAgICAgIHRlcm06IGlucHV0XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2tleVVwUHJldmVudGVkID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgU2VhcmNoLnByb3RvdHlwZS5zaG93U2VhcmNoID0gZnVuY3Rpb24gKF8sIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFNlYXJjaDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vaGlkZVBsYWNlaG9sZGVyJyxbXHJcblxyXG5dLCBmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gSGlkZVBsYWNlaG9sZGVyIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcikge1xyXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMubm9ybWFsaXplUGxhY2Vob2xkZXIob3B0aW9ucy5nZXQoJ3BsYWNlaG9sZGVyJykpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XHJcbiAgfVxyXG5cclxuICBIaWRlUGxhY2Vob2xkZXIucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcclxuICAgIGRhdGEucmVzdWx0cyA9IHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoZGF0YS5yZXN1bHRzKTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcclxuICB9O1xyXG5cclxuICBIaWRlUGxhY2Vob2xkZXIucHJvdG90eXBlLm5vcm1hbGl6ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKF8sIHBsYWNlaG9sZGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICBwbGFjZWhvbGRlciA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XHJcbiAgfTtcclxuXHJcbiAgSGlkZVBsYWNlaG9sZGVyLnByb3RvdHlwZS5yZW1vdmVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChfLCBkYXRhKSB7XHJcbiAgICB2YXIgbW9kaWZpZWREYXRhID0gZGF0YS5zbGljZSgwKTtcclxuXHJcbiAgICBmb3IgKHZhciBkID0gZGF0YS5sZW5ndGggLSAxOyBkID49IDA7IGQtLSkge1xyXG4gICAgICB2YXIgaXRlbSA9IGRhdGFbZF07XHJcblxyXG4gICAgICBpZiAodGhpcy5wbGFjZWhvbGRlci5pZCA9PT0gaXRlbS5pZCkge1xyXG4gICAgICAgIG1vZGlmaWVkRGF0YS5zcGxpY2UoZCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbW9kaWZpZWREYXRhO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBIaWRlUGxhY2Vob2xkZXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2luZmluaXRlU2Nyb2xsJyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICBmdW5jdGlvbiBJbmZpbml0ZVNjcm9sbCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcclxuICAgIHRoaXMubGFzdFBhcmFtcyA9IHt9O1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XHJcblxyXG4gICAgdGhpcy4kbG9hZGluZ01vcmUgPSB0aGlzLmNyZWF0ZUxvYWRpbmdNb3JlKCk7XHJcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XHJcbiAgICB0aGlzLiRsb2FkaW5nTW9yZS5yZW1vdmUoKTtcclxuICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGRhdGEpO1xyXG5cclxuICAgIGlmICh0aGlzLnNob3dMb2FkaW5nTW9yZShkYXRhKSkge1xyXG4gICAgICB0aGlzLiRyZXN1bHRzLmFwcGVuZCh0aGlzLiRsb2FkaW5nTW9yZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncXVlcnknLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYubGFzdFBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmxhc3RQYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBpc0xvYWRNb3JlVmlzaWJsZSA9ICQuY29udGFpbnMoXHJcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxyXG4gICAgICAgIHNlbGYuJGxvYWRpbmdNb3JlWzBdXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoc2VsZi5sb2FkaW5nIHx8ICFpc0xvYWRNb3JlVmlzaWJsZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLm9mZnNldCgpLnRvcCArXHJcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5vdXRlckhlaWdodChmYWxzZSk7XHJcbiAgICAgIHZhciBsb2FkaW5nTW9yZU9mZnNldCA9IHNlbGYuJGxvYWRpbmdNb3JlLm9mZnNldCgpLnRvcCArXHJcbiAgICAgICAgc2VsZi4kbG9hZGluZ01vcmUub3V0ZXJIZWlnaHQoZmFsc2UpO1xyXG5cclxuICAgICAgaWYgKGN1cnJlbnRPZmZzZXQgKyA1MCA+PSBsb2FkaW5nTW9yZU9mZnNldCkge1xyXG4gICAgICAgIHNlbGYubG9hZE1vcmUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmxvYWRNb3JlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgcGFyYW1zID0gJC5leHRlbmQoe30sIHtwYWdlOiAxfSwgdGhpcy5sYXN0UGFyYW1zKTtcclxuXHJcbiAgICBwYXJhbXMucGFnZSsrO1xyXG5cclxuICAgIHRoaXMudHJpZ2dlcigncXVlcnk6YXBwZW5kJywgcGFyYW1zKTtcclxuICB9O1xyXG5cclxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUuc2hvd0xvYWRpbmdNb3JlID0gZnVuY3Rpb24gKF8sIGRhdGEpIHtcclxuICAgIHJldHVybiBkYXRhLnBhZ2luYXRpb24gJiYgZGF0YS5wYWdpbmF0aW9uLm1vcmU7XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmNyZWF0ZUxvYWRpbmdNb3JlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRvcHRpb24gPSAkKFxyXG4gICAgICAnPGxpICcgK1xyXG4gICAgICAnY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbiBzZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0tbG9hZC1tb3JlXCInICtcclxuICAgICAgJ3JvbGU9XCJ0cmVlaXRlbVwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCI+PC9saT4nXHJcbiAgICApO1xyXG5cclxuICAgIHZhciBtZXNzYWdlID0gdGhpcy5vcHRpb25zLmdldCgndHJhbnNsYXRpb25zJykuZ2V0KCdsb2FkaW5nTW9yZScpO1xyXG5cclxuICAgICRvcHRpb24uaHRtbChtZXNzYWdlKHRoaXMubGFzdFBhcmFtcykpO1xyXG5cclxuICAgIHJldHVybiAkb3B0aW9uO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBJbmZpbml0ZVNjcm9sbDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vYXR0YWNoQm9keScsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuLi91dGlscydcclxuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gQXR0YWNoQm9keSAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy4kZHJvcGRvd25QYXJlbnQgPSBvcHRpb25zLmdldCgnZHJvcGRvd25QYXJlbnQnKSB8fCAkKGRvY3VtZW50LmJvZHkpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgc2V0dXBSZXN1bHRzRXZlbnRzID0gZmFsc2U7XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuX3Nob3dEcm9wZG93bigpO1xyXG4gICAgICBzZWxmLl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIoY29udGFpbmVyKTtcclxuXHJcbiAgICAgIGlmICghc2V0dXBSZXN1bHRzRXZlbnRzKSB7XHJcbiAgICAgICAgc2V0dXBSZXN1bHRzRXZlbnRzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFsbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcclxuICAgICAgICAgIHNlbGYuX3Jlc2l6ZURyb3Bkb3duKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphcHBlbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XHJcbiAgICAgICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLl9oaWRlRHJvcGRvd24oKTtcclxuICAgICAgc2VsZi5fZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyKGNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcyk7XHJcblxyXG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIucmVtb3ZlKCk7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCAkZHJvcGRvd24sICRjb250YWluZXIpIHtcclxuICAgIC8vIENsb25lIGFsbCBvZiB0aGUgY29udGFpbmVyIGNsYXNzZXNcclxuICAgICRkcm9wZG93bi5hdHRyKCdjbGFzcycsICRjb250YWluZXIuYXR0cignY2xhc3MnKSk7XHJcblxyXG4gICAgJGRyb3Bkb3duLnJlbW92ZUNsYXNzKCdzZWxlY3QyJyk7XHJcbiAgICAkZHJvcGRvd24uYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XHJcblxyXG4gICAgJGRyb3Bkb3duLmNzcyh7XHJcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICB0b3A6IC05OTk5OTlcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgdmFyICRjb250YWluZXIgPSAkKCc8c3Bhbj48L3NwYW4+Jyk7XHJcblxyXG4gICAgdmFyICRkcm9wZG93biA9IGRlY29yYXRlZC5jYWxsKHRoaXMpO1xyXG4gICAgJGNvbnRhaW5lci5hcHBlbmQoJGRyb3Bkb3duKTtcclxuXHJcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lciA9ICRjb250YWluZXI7XHJcblxyXG4gICAgcmV0dXJuICRjb250YWluZXI7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX2hpZGVEcm9wZG93biA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcclxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLmRldGFjaCgpO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIgPVxyXG4gICAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgc2Nyb2xsRXZlbnQgPSAnc2Nyb2xsLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcclxuICAgIHZhciByZXNpemVFdmVudCA9ICdyZXNpemUuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xyXG4gICAgdmFyIG9yaWVudGF0aW9uRXZlbnQgPSAnb3JpZW50YXRpb25jaGFuZ2Uuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xyXG5cclxuICAgIHZhciAkd2F0Y2hlcnMgPSB0aGlzLiRjb250YWluZXIucGFyZW50cygpLmZpbHRlcihVdGlscy5oYXNTY3JvbGwpO1xyXG4gICAgJHdhdGNoZXJzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAkKHRoaXMpLmRhdGEoJ3NlbGVjdDItc2Nyb2xsLXBvc2l0aW9uJywge1xyXG4gICAgICAgIHg6ICQodGhpcykuc2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgIHk6ICQodGhpcykuc2Nyb2xsVG9wKClcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkd2F0Y2hlcnMub24oc2Nyb2xsRXZlbnQsIGZ1bmN0aW9uIChldikge1xyXG4gICAgICB2YXIgcG9zaXRpb24gPSAkKHRoaXMpLmRhdGEoJ3NlbGVjdDItc2Nyb2xsLXBvc2l0aW9uJyk7XHJcbiAgICAgICQodGhpcykuc2Nyb2xsVG9wKHBvc2l0aW9uLnkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCh3aW5kb3cpLm9uKHNjcm9sbEV2ZW50ICsgJyAnICsgcmVzaXplRXZlbnQgKyAnICcgKyBvcmllbnRhdGlvbkV2ZW50LFxyXG4gICAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XHJcbiAgICAgIHNlbGYuX3Jlc2l6ZURyb3Bkb3duKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyID1cclxuICAgICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2Nyb2xsRXZlbnQgPSAnc2Nyb2xsLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcclxuICAgIHZhciByZXNpemVFdmVudCA9ICdyZXNpemUuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xyXG4gICAgdmFyIG9yaWVudGF0aW9uRXZlbnQgPSAnb3JpZW50YXRpb25jaGFuZ2Uuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xyXG5cclxuICAgIHZhciAkd2F0Y2hlcnMgPSB0aGlzLiRjb250YWluZXIucGFyZW50cygpLmZpbHRlcihVdGlscy5oYXNTY3JvbGwpO1xyXG4gICAgJHdhdGNoZXJzLm9mZihzY3JvbGxFdmVudCk7XHJcblxyXG4gICAgJCh3aW5kb3cpLm9mZihzY3JvbGxFdmVudCArICcgJyArIHJlc2l6ZUV2ZW50ICsgJyAnICsgb3JpZW50YXRpb25FdmVudCk7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX3Bvc2l0aW9uRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJHdpbmRvdyA9ICQod2luZG93KTtcclxuXHJcbiAgICB2YXIgaXNDdXJyZW50bHlBYm92ZSA9IHRoaXMuJGRyb3Bkb3duLmhhc0NsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS1hYm92ZScpO1xyXG4gICAgdmFyIGlzQ3VycmVudGx5QmVsb3cgPSB0aGlzLiRkcm9wZG93bi5oYXNDbGFzcygnc2VsZWN0Mi1kcm9wZG93bi0tYmVsb3cnKTtcclxuXHJcbiAgICB2YXIgbmV3RGlyZWN0aW9uID0gbnVsbDtcclxuXHJcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy4kY29udGFpbmVyLm9mZnNldCgpO1xyXG5cclxuICAgIG9mZnNldC5ib3R0b20gPSBvZmZzZXQudG9wICsgdGhpcy4kY29udGFpbmVyLm91dGVySGVpZ2h0KGZhbHNlKTtcclxuXHJcbiAgICB2YXIgY29udGFpbmVyID0ge1xyXG4gICAgICBoZWlnaHQ6IHRoaXMuJGNvbnRhaW5lci5vdXRlckhlaWdodChmYWxzZSlcclxuICAgIH07XHJcblxyXG4gICAgY29udGFpbmVyLnRvcCA9IG9mZnNldC50b3A7XHJcbiAgICBjb250YWluZXIuYm90dG9tID0gb2Zmc2V0LnRvcCArIGNvbnRhaW5lci5oZWlnaHQ7XHJcblxyXG4gICAgdmFyIGRyb3Bkb3duID0ge1xyXG4gICAgICBoZWlnaHQ6IHRoaXMuJGRyb3Bkb3duLm91dGVySGVpZ2h0KGZhbHNlKVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdmlld3BvcnQgPSB7XHJcbiAgICAgIHRvcDogJHdpbmRvdy5zY3JvbGxUb3AoKSxcclxuICAgICAgYm90dG9tOiAkd2luZG93LnNjcm9sbFRvcCgpICsgJHdpbmRvdy5oZWlnaHQoKVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZW5vdWdoUm9vbUFib3ZlID0gdmlld3BvcnQudG9wIDwgKG9mZnNldC50b3AgLSBkcm9wZG93bi5oZWlnaHQpO1xyXG4gICAgdmFyIGVub3VnaFJvb21CZWxvdyA9IHZpZXdwb3J0LmJvdHRvbSA+IChvZmZzZXQuYm90dG9tICsgZHJvcGRvd24uaGVpZ2h0KTtcclxuXHJcbiAgICB2YXIgY3NzID0ge1xyXG4gICAgICBsZWZ0OiBvZmZzZXQubGVmdCxcclxuICAgICAgdG9wOiBjb250YWluZXIuYm90dG9tXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIERldGVybWluZSB3aGF0IHRoZSBwYXJlbnQgZWxlbWVudCBpcyB0byB1c2UgZm9yIGNhbGNpdWxhdGluZyB0aGUgb2Zmc2V0XHJcbiAgICB2YXIgJG9mZnNldFBhcmVudCA9IHRoaXMuJGRyb3Bkb3duUGFyZW50O1xyXG5cclxuICAgIC8vIEZvciBzdGF0aWNhbGx5IHBvc2l0b25lZCBlbGVtZW50cywgd2UgbmVlZCB0byBnZXQgdGhlIGVsZW1lbnRcclxuICAgIC8vIHRoYXQgaXMgZGV0ZXJtaW5pbmcgdGhlIG9mZnNldFxyXG4gICAgaWYgKCRvZmZzZXRQYXJlbnQuY3NzKCdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xyXG4gICAgICAkb2Zmc2V0UGFyZW50ID0gJG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcGFyZW50T2Zmc2V0ID0gJG9mZnNldFBhcmVudC5vZmZzZXQoKTtcclxuXHJcbiAgICBjc3MudG9wIC09IHBhcmVudE9mZnNldC50b3A7XHJcbiAgICBjc3MubGVmdCAtPSBwYXJlbnRPZmZzZXQubGVmdDtcclxuXHJcbiAgICBpZiAoIWlzQ3VycmVudGx5QWJvdmUgJiYgIWlzQ3VycmVudGx5QmVsb3cpIHtcclxuICAgICAgbmV3RGlyZWN0aW9uID0gJ2JlbG93JztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVub3VnaFJvb21CZWxvdyAmJiBlbm91Z2hSb29tQWJvdmUgJiYgIWlzQ3VycmVudGx5QWJvdmUpIHtcclxuICAgICAgbmV3RGlyZWN0aW9uID0gJ2Fib3ZlJztcclxuICAgIH0gZWxzZSBpZiAoIWVub3VnaFJvb21BYm92ZSAmJiBlbm91Z2hSb29tQmVsb3cgJiYgaXNDdXJyZW50bHlBYm92ZSkge1xyXG4gICAgICBuZXdEaXJlY3Rpb24gPSAnYmVsb3cnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT0gJ2Fib3ZlJyB8fFxyXG4gICAgICAoaXNDdXJyZW50bHlBYm92ZSAmJiBuZXdEaXJlY3Rpb24gIT09ICdiZWxvdycpKSB7XHJcbiAgICAgIGNzcy50b3AgPSBjb250YWluZXIudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGRyb3Bkb3duLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV3RGlyZWN0aW9uICE9IG51bGwpIHtcclxuICAgICAgdGhpcy4kZHJvcGRvd25cclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWJlbG93IHNlbGVjdDItZHJvcGRvd24tLWFib3ZlJylcclxuICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLScgKyBuZXdEaXJlY3Rpb24pO1xyXG4gICAgICB0aGlzLiRjb250YWluZXJcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1iZWxvdyBzZWxlY3QyLWNvbnRhaW5lci0tYWJvdmUnKVxyXG4gICAgICAgIC5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLScgKyBuZXdEaXJlY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLmNzcyhjc3MpO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9yZXNpemVEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjc3MgPSB7XHJcbiAgICAgIHdpZHRoOiB0aGlzLiRjb250YWluZXIub3V0ZXJXaWR0aChmYWxzZSkgKyAncHgnXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkcm9wZG93bkF1dG9XaWR0aCcpKSB7XHJcbiAgICAgIGNzcy5taW5XaWR0aCA9IGNzcy53aWR0aDtcclxuICAgICAgY3NzLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgY3NzLndpZHRoID0gJ2F1dG8nO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGRyb3Bkb3duLmNzcyhjc3MpO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9zaG93RHJvcGRvd24gPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XHJcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmRUbyh0aGlzLiRkcm9wZG93blBhcmVudCk7XHJcblxyXG4gICAgdGhpcy5fcG9zaXRpb25Ecm9wZG93bigpO1xyXG4gICAgdGhpcy5fcmVzaXplRHJvcGRvd24oKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gQXR0YWNoQm9keTtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBjb3VudFJlc3VsdHMgKGRhdGEpIHtcclxuICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gZGF0YVtkXTtcclxuXHJcbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgY291bnQgKz0gY291bnRSZXN1bHRzKGl0ZW0uY2hpbGRyZW4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvdW50Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY291bnQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcclxuICAgIHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggPSBvcHRpb25zLmdldCgnbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnKTtcclxuXHJcbiAgICBpZiAodGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA8IDApIHtcclxuICAgICAgdGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA9IEluZmluaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XHJcbiAgfVxyXG5cclxuICBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaC5wcm90b3R5cGUuc2hvd1NlYXJjaCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcykge1xyXG4gICAgaWYgKGNvdW50UmVzdWx0cyhwYXJhbXMuZGF0YS5yZXN1bHRzKSA8IHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2gpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vc2VsZWN0T25DbG9zZScsW1xyXG5cclxuXSwgZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIFNlbGVjdE9uQ2xvc2UgKCkgeyB9XHJcblxyXG4gIFNlbGVjdE9uQ2xvc2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYuX2hhbmRsZVNlbGVjdE9uQ2xvc2UocGFyYW1zKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdE9uQ2xvc2UucHJvdG90eXBlLl9oYW5kbGVTZWxlY3RPbkNsb3NlID0gZnVuY3Rpb24gKF8sIHBhcmFtcykge1xyXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMub3JpZ2luYWxTZWxlY3QyRXZlbnQgIT0gbnVsbCkge1xyXG4gICAgICB2YXIgZXZlbnQgPSBwYXJhbXMub3JpZ2luYWxTZWxlY3QyRXZlbnQ7XHJcblxyXG4gICAgICAvLyBEb24ndCBzZWxlY3QgYW4gaXRlbSBpZiB0aGUgY2xvc2UgZXZlbnQgd2FzIHRyaWdnZXJlZCBmcm9tIGEgc2VsZWN0IG9yXHJcbiAgICAgIC8vIHVuc2VsZWN0IGV2ZW50XHJcbiAgICAgIGlmIChldmVudC5fdHlwZSA9PT0gJ3NlbGVjdCcgfHwgZXZlbnQuX3R5cGUgPT09ICd1bnNlbGVjdCcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgJGhpZ2hsaWdodGVkUmVzdWx0cyA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XHJcblxyXG4gICAgLy8gT25seSBzZWxlY3QgaGlnaGxpZ2h0ZWQgcmVzdWx0c1xyXG4gICAgaWYgKCRoaWdobGlnaHRlZFJlc3VsdHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRhdGEgPSAkaGlnaGxpZ2h0ZWRSZXN1bHRzLmRhdGEoJ2RhdGEnKTtcclxuXHJcbiAgICAvLyBEb24ndCByZS1zZWxlY3QgYWxyZWFkeSBzZWxlY3RlZCByZXN1bHRlXHJcbiAgICBpZiAoXHJcbiAgICAgIChkYXRhLmVsZW1lbnQgIT0gbnVsbCAmJiBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQpIHx8XHJcbiAgICAgIChkYXRhLmVsZW1lbnQgPT0gbnVsbCAmJiBkYXRhLnNlbGVjdGVkKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyaWdnZXIoJ3NlbGVjdCcsIHtcclxuICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gU2VsZWN0T25DbG9zZTtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vY2xvc2VPblNlbGVjdCcsW1xyXG5cclxuXSwgZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIENsb3NlT25TZWxlY3QgKCkgeyB9XHJcblxyXG4gIENsb3NlT25TZWxlY3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLl9zZWxlY3RUcmlnZ2VyZWQoZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuX3NlbGVjdFRyaWdnZXJlZChldnQpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgQ2xvc2VPblNlbGVjdC5wcm90b3R5cGUuX3NlbGVjdFRyaWdnZXJlZCA9IGZ1bmN0aW9uIChfLCBldnQpIHtcclxuICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gZXZ0Lm9yaWdpbmFsRXZlbnQ7XHJcblxyXG4gICAgLy8gRG9uJ3QgY2xvc2UgaWYgdGhlIGNvbnRyb2wga2V5IGlzIGJlaW5nIGhlbGRcclxuICAgIGlmIChvcmlnaW5hbEV2ZW50ICYmIG9yaWdpbmFsRXZlbnQuY3RybEtleSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyKCdjbG9zZScsIHtcclxuICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudCxcclxuICAgICAgb3JpZ2luYWxTZWxlY3QyRXZlbnQ6IGV2dFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIENsb3NlT25TZWxlY3Q7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2kxOG4vZW4nLFtdLGZ1bmN0aW9uICgpIHtcclxuICAvLyBFbmdsaXNoXHJcbiAgcmV0dXJuIHtcclxuICAgIGVycm9yTG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gJ1RoZSByZXN1bHRzIGNvdWxkIG5vdCBiZSBsb2FkZWQuJztcclxuICAgIH0sXHJcbiAgICBpbnB1dFRvb0xvbmc6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgIHZhciBvdmVyQ2hhcnMgPSBhcmdzLmlucHV0Lmxlbmd0aCAtIGFyZ3MubWF4aW11bTtcclxuXHJcbiAgICAgIHZhciBtZXNzYWdlID0gJ1BsZWFzZSBkZWxldGUgJyArIG92ZXJDaGFycyArICcgY2hhcmFjdGVyJztcclxuXHJcbiAgICAgIGlmIChvdmVyQ2hhcnMgIT0gMSkge1xyXG4gICAgICAgIG1lc3NhZ2UgKz0gJ3MnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgIH0sXHJcbiAgICBpbnB1dFRvb1Nob3J0OiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICB2YXIgcmVtYWluaW5nQ2hhcnMgPSBhcmdzLm1pbmltdW0gLSBhcmdzLmlucHV0Lmxlbmd0aDtcclxuXHJcbiAgICAgIHZhciBtZXNzYWdlID0gJ1BsZWFzZSBlbnRlciAnICsgcmVtYWluaW5nQ2hhcnMgKyAnIG9yIG1vcmUgY2hhcmFjdGVycyc7XHJcblxyXG4gICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgIH0sXHJcbiAgICBsb2FkaW5nTW9yZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gJ0xvYWRpbmcgbW9yZSByZXN1bHRz4oCmJztcclxuICAgIH0sXHJcbiAgICBtYXhpbXVtU2VsZWN0ZWQ6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgIHZhciBtZXNzYWdlID0gJ1lvdSBjYW4gb25seSBzZWxlY3QgJyArIGFyZ3MubWF4aW11bSArICcgaXRlbSc7XHJcblxyXG4gICAgICBpZiAoYXJncy5tYXhpbXVtICE9IDEpIHtcclxuICAgICAgICBtZXNzYWdlICs9ICdzJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9LFxyXG4gICAgbm9SZXN1bHRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAnTm8gcmVzdWx0cyBmb3VuZCc7XHJcbiAgICB9LFxyXG4gICAgc2VhcmNoaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAnU2VhcmNoaW5n4oCmJztcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kZWZhdWx0cycsW1xyXG4gICdqcXVlcnknLFxyXG4gICdyZXF1aXJlJyxcclxuXHJcbiAgJy4vcmVzdWx0cycsXHJcblxyXG4gICcuL3NlbGVjdGlvbi9zaW5nbGUnLFxyXG4gICcuL3NlbGVjdGlvbi9tdWx0aXBsZScsXHJcbiAgJy4vc2VsZWN0aW9uL3BsYWNlaG9sZGVyJyxcclxuICAnLi9zZWxlY3Rpb24vYWxsb3dDbGVhcicsXHJcbiAgJy4vc2VsZWN0aW9uL3NlYXJjaCcsXHJcbiAgJy4vc2VsZWN0aW9uL2V2ZW50UmVsYXknLFxyXG5cclxuICAnLi91dGlscycsXHJcbiAgJy4vdHJhbnNsYXRpb24nLFxyXG4gICcuL2RpYWNyaXRpY3MnLFxyXG5cclxuICAnLi9kYXRhL3NlbGVjdCcsXHJcbiAgJy4vZGF0YS9hcnJheScsXHJcbiAgJy4vZGF0YS9hamF4JyxcclxuICAnLi9kYXRhL3RhZ3MnLFxyXG4gICcuL2RhdGEvdG9rZW5pemVyJyxcclxuICAnLi9kYXRhL21pbmltdW1JbnB1dExlbmd0aCcsXHJcbiAgJy4vZGF0YS9tYXhpbXVtSW5wdXRMZW5ndGgnLFxyXG4gICcuL2RhdGEvbWF4aW11bVNlbGVjdGlvbkxlbmd0aCcsXHJcblxyXG4gICcuL2Ryb3Bkb3duJyxcclxuICAnLi9kcm9wZG93bi9zZWFyY2gnLFxyXG4gICcuL2Ryb3Bkb3duL2hpZGVQbGFjZWhvbGRlcicsXHJcbiAgJy4vZHJvcGRvd24vaW5maW5pdGVTY3JvbGwnLFxyXG4gICcuL2Ryb3Bkb3duL2F0dGFjaEJvZHknLFxyXG4gICcuL2Ryb3Bkb3duL21pbmltdW1SZXN1bHRzRm9yU2VhcmNoJyxcclxuICAnLi9kcm9wZG93bi9zZWxlY3RPbkNsb3NlJyxcclxuICAnLi9kcm9wZG93bi9jbG9zZU9uU2VsZWN0JyxcclxuXHJcbiAgJy4vaTE4bi9lbidcclxuXSwgZnVuY3Rpb24gKCQsIHJlcXVpcmUsXHJcblxyXG4gICAgICAgICAgICAgUmVzdWx0c0xpc3QsXHJcblxyXG4gICAgICAgICAgICAgU2luZ2xlU2VsZWN0aW9uLCBNdWx0aXBsZVNlbGVjdGlvbiwgUGxhY2Vob2xkZXIsIEFsbG93Q2xlYXIsXHJcbiAgICAgICAgICAgICBTZWxlY3Rpb25TZWFyY2gsIEV2ZW50UmVsYXksXHJcblxyXG4gICAgICAgICAgICAgVXRpbHMsIFRyYW5zbGF0aW9uLCBESUFDUklUSUNTLFxyXG5cclxuICAgICAgICAgICAgIFNlbGVjdERhdGEsIEFycmF5RGF0YSwgQWpheERhdGEsIFRhZ3MsIFRva2VuaXplcixcclxuICAgICAgICAgICAgIE1pbmltdW1JbnB1dExlbmd0aCwgTWF4aW11bUlucHV0TGVuZ3RoLCBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoLFxyXG5cclxuICAgICAgICAgICAgIERyb3Bkb3duLCBEcm9wZG93blNlYXJjaCwgSGlkZVBsYWNlaG9sZGVyLCBJbmZpbml0ZVNjcm9sbCxcclxuICAgICAgICAgICAgIEF0dGFjaEJvZHksIE1pbmltdW1SZXN1bHRzRm9yU2VhcmNoLCBTZWxlY3RPbkNsb3NlLCBDbG9zZU9uU2VsZWN0LFxyXG5cclxuICAgICAgICAgICAgIEVuZ2xpc2hUcmFuc2xhdGlvbikge1xyXG4gIGZ1bmN0aW9uIERlZmF1bHRzICgpIHtcclxuICAgIHRoaXMucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIERlZmF1bHRzLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgIGlmIChvcHRpb25zLmRhdGFBZGFwdGVyID09IG51bGwpIHtcclxuICAgICAgaWYgKG9wdGlvbnMuYWpheCAhPSBudWxsKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IEFqYXhEYXRhO1xyXG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IEFycmF5RGF0YTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gU2VsZWN0RGF0YTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMubWluaW11bUlucHV0TGVuZ3RoID4gMCkge1xyXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXHJcbiAgICAgICAgICBNaW5pbXVtSW5wdXRMZW5ndGhcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5tYXhpbXVtSW5wdXRMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcclxuICAgICAgICAgIE1heGltdW1JbnB1dExlbmd0aFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLm1heGltdW1TZWxlY3Rpb25MZW5ndGggPiAwKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcclxuICAgICAgICAgIE1heGltdW1TZWxlY3Rpb25MZW5ndGhcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy50YWdzKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKG9wdGlvbnMuZGF0YUFkYXB0ZXIsIFRhZ3MpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy50b2tlblNlcGFyYXRvcnMgIT0gbnVsbCB8fCBvcHRpb25zLnRva2VuaXplciAhPSBudWxsKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcclxuICAgICAgICAgIFRva2VuaXplclxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnF1ZXJ5ICE9IG51bGwpIHtcclxuICAgICAgICB2YXIgUXVlcnkgPSByZXF1aXJlKG9wdGlvbnMuYW1kQmFzZSArICdjb21wYXQvcXVlcnknKTtcclxuXHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcclxuICAgICAgICAgIFF1ZXJ5XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuaW5pdFNlbGVjdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgdmFyIEluaXRTZWxlY3Rpb24gPSByZXF1aXJlKG9wdGlvbnMuYW1kQmFzZSArICdjb21wYXQvaW5pdFNlbGVjdGlvbicpO1xyXG5cclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxyXG4gICAgICAgICAgSW5pdFNlbGVjdGlvblxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9PSBudWxsKSB7XHJcbiAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBSZXN1bHRzTGlzdDtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmFqYXggIT0gbnVsbCkge1xyXG4gICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIsXHJcbiAgICAgICAgICBJbmZpbml0ZVNjcm9sbFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyICE9IG51bGwpIHtcclxuICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyLFxyXG4gICAgICAgICAgSGlkZVBsYWNlaG9sZGVyXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuc2VsZWN0T25DbG9zZSkge1xyXG4gICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIsXHJcbiAgICAgICAgICBTZWxlY3RPbkNsb3NlXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9PSBudWxsKSB7XHJcbiAgICAgIGlmIChvcHRpb25zLm11bHRpcGxlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBEcm9wZG93bjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgU2VhcmNoYWJsZURyb3Bkb3duID0gVXRpbHMuRGVjb3JhdGUoRHJvcGRvd24sIERyb3Bkb3duU2VhcmNoKTtcclxuXHJcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBTZWFyY2hhYmxlRHJvcGRvd247XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoICE9PSAwKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyLFxyXG4gICAgICAgICAgTWluaW11bVJlc3VsdHNGb3JTZWFyY2hcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5jbG9zZU9uU2VsZWN0KSB7XHJcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyLFxyXG4gICAgICAgICAgQ2xvc2VPblNlbGVjdFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQ3NzQ2xhc3MgIT0gbnVsbCB8fFxyXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25Dc3MgIT0gbnVsbCB8fFxyXG4gICAgICAgIG9wdGlvbnMuYWRhcHREcm9wZG93bkNzc0NsYXNzICE9IG51bGxcclxuICAgICAgKSB7XHJcbiAgICAgICAgdmFyIERyb3Bkb3duQ1NTID0gcmVxdWlyZShvcHRpb25zLmFtZEJhc2UgKyAnY29tcGF0L2Ryb3Bkb3duQ3NzJyk7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlcixcclxuICAgICAgICAgIERyb3Bkb3duQ1NTXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlcixcclxuICAgICAgICBBdHRhY2hCb2R5XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9PSBudWxsKSB7XHJcbiAgICAgIGlmIChvcHRpb25zLm11bHRpcGxlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gTXVsdGlwbGVTZWxlY3Rpb247XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gU2luZ2xlU2VsZWN0aW9uO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBZGQgdGhlIHBsYWNlaG9sZGVyIG1peGluIGlmIGEgcGxhY2Vob2xkZXIgd2FzIHNwZWNpZmllZFxyXG4gICAgICBpZiAob3B0aW9ucy5wbGFjZWhvbGRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXHJcbiAgICAgICAgICBQbGFjZWhvbGRlclxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmFsbG93Q2xlYXIpIHtcclxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcclxuICAgICAgICAgIEFsbG93Q2xlYXJcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5tdWx0aXBsZSkge1xyXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxyXG4gICAgICAgICAgU2VsZWN0aW9uU2VhcmNoXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIG9wdGlvbnMuY29udGFpbmVyQ3NzQ2xhc3MgIT0gbnVsbCB8fFxyXG4gICAgICAgIG9wdGlvbnMuY29udGFpbmVyQ3NzICE9IG51bGwgfHxcclxuICAgICAgICBvcHRpb25zLmFkYXB0Q29udGFpbmVyQ3NzQ2xhc3MgIT0gbnVsbFxyXG4gICAgICApIHtcclxuICAgICAgICB2YXIgQ29udGFpbmVyQ1NTID0gcmVxdWlyZShvcHRpb25zLmFtZEJhc2UgKyAnY29tcGF0L2NvbnRhaW5lckNzcycpO1xyXG5cclxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcclxuICAgICAgICAgIENvbnRhaW5lckNTU1xyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcclxuICAgICAgICBFdmVudFJlbGF5XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmxhbmd1YWdlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgbGFuZ3VhZ2UgaXMgc3BlY2lmaWVkIHdpdGggYSByZWdpb25cclxuICAgICAgaWYgKG9wdGlvbnMubGFuZ3VhZ2UuaW5kZXhPZignLScpID4gMCkge1xyXG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIHJlZ2lvbiBpbmZvcm1hdGlvbiBpZiBpdCBpcyBpbmNsdWRlZFxyXG4gICAgICAgIHZhciBsYW5ndWFnZVBhcnRzID0gb3B0aW9ucy5sYW5ndWFnZS5zcGxpdCgnLScpO1xyXG4gICAgICAgIHZhciBiYXNlTGFuZ3VhZ2UgPSBsYW5ndWFnZVBhcnRzWzBdO1xyXG5cclxuICAgICAgICBvcHRpb25zLmxhbmd1YWdlID0gW29wdGlvbnMubGFuZ3VhZ2UsIGJhc2VMYW5ndWFnZV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb3B0aW9ucy5sYW5ndWFnZSA9IFtvcHRpb25zLmxhbmd1YWdlXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICgkLmlzQXJyYXkob3B0aW9ucy5sYW5ndWFnZSkpIHtcclxuICAgICAgdmFyIGxhbmd1YWdlcyA9IG5ldyBUcmFuc2xhdGlvbigpO1xyXG4gICAgICBvcHRpb25zLmxhbmd1YWdlLnB1c2goJ2VuJyk7XHJcblxyXG4gICAgICB2YXIgbGFuZ3VhZ2VOYW1lcyA9IG9wdGlvbnMubGFuZ3VhZ2U7XHJcblxyXG4gICAgICBmb3IgKHZhciBsID0gMDsgbCA8IGxhbmd1YWdlTmFtZXMubGVuZ3RoOyBsKyspIHtcclxuICAgICAgICB2YXIgbmFtZSA9IGxhbmd1YWdlTmFtZXNbbF07XHJcbiAgICAgICAgdmFyIGxhbmd1YWdlID0ge307XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAvLyBUcnkgdG8gbG9hZCBpdCB3aXRoIHRoZSBvcmlnaW5hbCBuYW1lXHJcbiAgICAgICAgICBsYW5ndWFnZSA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKG5hbWUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGNvdWxkbid0IGxvYWQgaXQsIGNoZWNrIGlmIGl0IHdhc24ndCB0aGUgZnVsbCBwYXRoXHJcbiAgICAgICAgICAgIG5hbWUgPSB0aGlzLmRlZmF1bHRzLmFtZExhbmd1YWdlQmFzZSArIG5hbWU7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlID0gVHJhbnNsYXRpb24ubG9hZFBhdGgobmFtZSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAvLyBUaGUgdHJhbnNsYXRpb24gY291bGQgbm90IGJlIGxvYWRlZCBhdCBhbGwuIFNvbWV0aW1lcyB0aGlzIGlzXHJcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgYSBjb25maWd1cmF0aW9uIHByb2JsZW0sIG90aGVyIHRpbWVzIHRoaXMgY2FuIGJlXHJcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgaG93IFNlbGVjdDIgaGVscHMgbG9hZCBhbGwgcG9zc2libGUgdHJhbnNsYXRpb24gZmlsZXMuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgICAgICdTZWxlY3QyOiBUaGUgbGFuZ3VhZ2UgZmlsZSBmb3IgXCInICsgbmFtZSArICdcIiBjb3VsZCBub3QgYmUgJyArXHJcbiAgICAgICAgICAgICAgICAnYXV0b21hdGljYWxseSBsb2FkZWQuIEEgZmFsbGJhY2sgd2lsbCBiZSB1c2VkIGluc3RlYWQuJ1xyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGFuZ3VhZ2VzLmV4dGVuZChsYW5ndWFnZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9wdGlvbnMudHJhbnNsYXRpb25zID0gbGFuZ3VhZ2VzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGJhc2VUcmFuc2xhdGlvbiA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKFxyXG4gICAgICAgIHRoaXMuZGVmYXVsdHMuYW1kTGFuZ3VhZ2VCYXNlICsgJ2VuJ1xyXG4gICAgICApO1xyXG4gICAgICB2YXIgY3VzdG9tVHJhbnNsYXRpb24gPSBuZXcgVHJhbnNsYXRpb24ob3B0aW9ucy5sYW5ndWFnZSk7XHJcblxyXG4gICAgICBjdXN0b21UcmFuc2xhdGlvbi5leHRlbmQoYmFzZVRyYW5zbGF0aW9uKTtcclxuXHJcbiAgICAgIG9wdGlvbnMudHJhbnNsYXRpb25zID0gY3VzdG9tVHJhbnNsYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgfTtcclxuXHJcbiAgRGVmYXVsdHMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gc3RyaXBEaWFjcml0aWNzICh0ZXh0KSB7XHJcbiAgICAgIC8vIFVzZWQgJ3VuaSByYW5nZSArIG5hbWVkIGZ1bmN0aW9uJyBmcm9tIGh0dHA6Ly9qc3BlcmYuY29tL2RpYWNyaXRpY3MvMThcclxuICAgICAgZnVuY3Rpb24gbWF0Y2goYSkge1xyXG4gICAgICAgIHJldHVybiBESUFDUklUSUNTW2FdIHx8IGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1teXFx1MDAwMC1cXHUwMDdFXS9nLCBtYXRjaCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWF0Y2hlciAocGFyYW1zLCBkYXRhKSB7XHJcbiAgICAgIC8vIEFsd2F5cyByZXR1cm4gdGhlIG9iamVjdCBpZiB0aGVyZSBpcyBub3RoaW5nIHRvIGNvbXBhcmVcclxuICAgICAgaWYgKCQudHJpbShwYXJhbXMudGVybSkgPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIERvIGEgcmVjdXJzaXZlIGNoZWNrIGZvciBvcHRpb25zIHdpdGggY2hpbGRyZW5cclxuICAgICAgaWYgKGRhdGEuY2hpbGRyZW4gJiYgZGF0YS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGRhdGEgb2JqZWN0IGlmIHRoZXJlIGFyZSBjaGlsZHJlblxyXG4gICAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgYXMgd2UgbW9kaWZ5IHRoZSBvYmplY3QgdG8gcmVtb3ZlIGFueSBub24tbWF0Y2hlc1xyXG4gICAgICAgIHZhciBtYXRjaCA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkYXRhKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgZWFjaCBjaGlsZCBvZiB0aGUgb3B0aW9uXHJcbiAgICAgICAgZm9yICh2YXIgYyA9IGRhdGEuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgYyA+PSAwOyBjLS0pIHtcclxuICAgICAgICAgIHZhciBjaGlsZCA9IGRhdGEuY2hpbGRyZW5bY107XHJcblxyXG4gICAgICAgICAgdmFyIG1hdGNoZXMgPSBtYXRjaGVyKHBhcmFtcywgY2hpbGQpO1xyXG5cclxuICAgICAgICAgIC8vIElmIHRoZXJlIHdhc24ndCBhIG1hdGNoLCByZW1vdmUgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXlcclxuICAgICAgICAgIGlmIChtYXRjaGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgbWF0Y2guY2hpbGRyZW4uc3BsaWNlKGMsIDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgYW55IGNoaWxkcmVuIG1hdGNoZWQsIHJldHVybiB0aGUgbmV3IG9iamVjdFxyXG4gICAgICAgIGlmIChtYXRjaC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB0aGVyZSB3ZXJlIG5vIG1hdGNoaW5nIGNoaWxkcmVuLCBjaGVjayBqdXN0IHRoZSBwbGFpbiBvYmplY3RcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcihwYXJhbXMsIG1hdGNoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG9yaWdpbmFsID0gc3RyaXBEaWFjcml0aWNzKGRhdGEudGV4dCkudG9VcHBlckNhc2UoKTtcclxuICAgICAgdmFyIHRlcm0gPSBzdHJpcERpYWNyaXRpY3MocGFyYW1zLnRlcm0pLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgdGV4dCBjb250YWlucyB0aGUgdGVybVxyXG4gICAgICBpZiAob3JpZ2luYWwuaW5kZXhPZih0ZXJtKSA+IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIGl0IGRvZXNuJ3QgY29udGFpbiB0aGUgdGVybSwgZG9uJ3QgcmV0dXJuIGFueXRoaW5nXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGVmYXVsdHMgPSB7XHJcbiAgICAgIGFtZEJhc2U6ICcuLycsXHJcbiAgICAgIGFtZExhbmd1YWdlQmFzZTogJy4vaTE4bi8nLFxyXG4gICAgICBjbG9zZU9uU2VsZWN0OiB0cnVlLFxyXG4gICAgICBkZWJ1ZzogZmFsc2UsXHJcbiAgICAgIGRyb3Bkb3duQXV0b1dpZHRoOiBmYWxzZSxcclxuICAgICAgZXNjYXBlTWFya3VwOiBVdGlscy5lc2NhcGVNYXJrdXAsXHJcbiAgICAgIGxhbmd1YWdlOiBFbmdsaXNoVHJhbnNsYXRpb24sXHJcbiAgICAgIG1hdGNoZXI6IG1hdGNoZXIsXHJcbiAgICAgIG1pbmltdW1JbnB1dExlbmd0aDogMCxcclxuICAgICAgbWF4aW11bUlucHV0TGVuZ3RoOiAwLFxyXG4gICAgICBtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoOiAwLFxyXG4gICAgICBtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDogMCxcclxuICAgICAgc2VsZWN0T25DbG9zZTogZmFsc2UsXHJcbiAgICAgIHNvcnRlcjogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgfSxcclxuICAgICAgdGVtcGxhdGVSZXN1bHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnRleHQ7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi50ZXh0O1xyXG4gICAgICB9LFxyXG4gICAgICB0aGVtZTogJ2RlZmF1bHQnLFxyXG4gICAgICB3aWR0aDogJ3Jlc29sdmUnXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIERlZmF1bHRzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGNhbWVsS2V5ID0gJC5jYW1lbENhc2Uoa2V5KTtcclxuXHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgZGF0YVtjYW1lbEtleV0gPSB2YWx1ZTtcclxuXHJcbiAgICB2YXIgY29udmVydGVkRGF0YSA9IFV0aWxzLl9jb252ZXJ0RGF0YShkYXRhKTtcclxuXHJcbiAgICAkLmV4dGVuZCh0aGlzLmRlZmF1bHRzLCBjb252ZXJ0ZWREYXRhKTtcclxuICB9O1xyXG5cclxuICB2YXIgZGVmYXVsdHMgPSBuZXcgRGVmYXVsdHMoKTtcclxuXHJcbiAgcmV0dXJuIGRlZmF1bHRzO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9vcHRpb25zJyxbXHJcbiAgJ3JlcXVpcmUnLFxyXG4gICdqcXVlcnknLFxyXG4gICcuL2RlZmF1bHRzJyxcclxuICAnLi91dGlscydcclxuXSwgZnVuY3Rpb24gKHJlcXVpcmUsICQsIERlZmF1bHRzLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIE9wdGlvbnMgKG9wdGlvbnMsICRlbGVtZW50KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIGlmICgkZWxlbWVudCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuZnJvbUVsZW1lbnQoJGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMub3B0aW9ucyA9IERlZmF1bHRzLmFwcGx5KHRoaXMub3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKCRlbGVtZW50ICYmICRlbGVtZW50LmlzKCdpbnB1dCcpKSB7XHJcbiAgICAgIHZhciBJbnB1dENvbXBhdCA9IHJlcXVpcmUodGhpcy5nZXQoJ2FtZEJhc2UnKSArICdjb21wYXQvaW5wdXREYXRhJyk7XHJcblxyXG4gICAgICB0aGlzLm9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICB0aGlzLm9wdGlvbnMuZGF0YUFkYXB0ZXIsXHJcbiAgICAgICAgSW5wdXRDb21wYXRcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE9wdGlvbnMucHJvdG90eXBlLmZyb21FbGVtZW50ID0gZnVuY3Rpb24gKCRlKSB7XHJcbiAgICB2YXIgZXhjbHVkZWREYXRhID0gWydzZWxlY3QyJ107XHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tdWx0aXBsZSA9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucy5tdWx0aXBsZSA9ICRlLnByb3AoJ211bHRpcGxlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9ICRlLnByb3AoJ2Rpc2FibGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5sYW5ndWFnZSA9PSBudWxsKSB7XHJcbiAgICAgIGlmICgkZS5wcm9wKCdsYW5nJykpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMubGFuZ3VhZ2UgPSAkZS5wcm9wKCdsYW5nJykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgfSBlbHNlIGlmICgkZS5jbG9zZXN0KCdbbGFuZ10nKS5wcm9wKCdsYW5nJykpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMubGFuZ3VhZ2UgPSAkZS5jbG9zZXN0KCdbbGFuZ10nKS5wcm9wKCdsYW5nJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpciA9PSBudWxsKSB7XHJcbiAgICAgIGlmICgkZS5wcm9wKCdkaXInKSkge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5kaXIgPSAkZS5wcm9wKCdkaXInKTtcclxuICAgICAgfSBlbHNlIGlmICgkZS5jbG9zZXN0KCdbZGlyXScpLnByb3AoJ2RpcicpKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICRlLmNsb3Nlc3QoJ1tkaXJdJykucHJvcCgnZGlyJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICdsdHInO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJGUucHJvcCgnZGlzYWJsZWQnLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQpO1xyXG4gICAgJGUucHJvcCgnbXVsdGlwbGUnLCB0aGlzLm9wdGlvbnMubXVsdGlwbGUpO1xyXG5cclxuICAgIGlmICgkZS5kYXRhKCdzZWxlY3QyVGFncycpKSB7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgJ1NlbGVjdDI6IFRoZSBgZGF0YS1zZWxlY3QyLXRhZ3NgIGF0dHJpYnV0ZSBoYXMgYmVlbiBjaGFuZ2VkIHRvICcgK1xyXG4gICAgICAgICAgJ3VzZSB0aGUgYGRhdGEtZGF0YWAgYW5kIGBkYXRhLXRhZ3M9XCJ0cnVlXCJgIGF0dHJpYnV0ZXMgYW5kIHdpbGwgYmUgJyArXHJcbiAgICAgICAgICAncmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgU2VsZWN0Mi4nXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGUuZGF0YSgnZGF0YScsICRlLmRhdGEoJ3NlbGVjdDJUYWdzJykpO1xyXG4gICAgICAkZS5kYXRhKCd0YWdzJywgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCRlLmRhdGEoJ2FqYXhVcmwnKSkge1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGRhdGEtYWpheC11cmxgIGF0dHJpYnV0ZSBoYXMgYmVlbiBjaGFuZ2VkIHRvICcgK1xyXG4gICAgICAgICAgJ2BkYXRhLWFqYXgtLXVybGAgYW5kIHN1cHBvcnQgZm9yIHRoZSBvbGQgYXR0cmlidXRlIHdpbGwgYmUgcmVtb3ZlZCcgK1xyXG4gICAgICAgICAgJyBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgU2VsZWN0Mi4nXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGUuYXR0cignYWpheC0tdXJsJywgJGUuZGF0YSgnYWpheFVybCcpKTtcclxuICAgICAgJGUuZGF0YSgnYWpheC0tdXJsJywgJGUuZGF0YSgnYWpheFVybCcpKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGF0YXNldCA9IHt9O1xyXG5cclxuICAgIC8vIFByZWZlciB0aGUgZWxlbWVudCdzIGBkYXRhc2V0YCBhdHRyaWJ1dGUgaWYgaXQgZXhpc3RzXHJcbiAgICAvLyBqUXVlcnkgMS54IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgZGF0YSBhdHRyaWJ1dGVzIHdpdGggbXVsdGlwbGUgZGFzaGVzXHJcbiAgICBpZiAoJC5mbi5qcXVlcnkgJiYgJC5mbi5qcXVlcnkuc3Vic3RyKDAsIDIpID09ICcxLicgJiYgJGVbMF0uZGF0YXNldCkge1xyXG4gICAgICBkYXRhc2V0ID0gJC5leHRlbmQodHJ1ZSwge30sICRlWzBdLmRhdGFzZXQsICRlLmRhdGEoKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkYXRhc2V0ID0gJGUuZGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGFzZXQpO1xyXG5cclxuICAgIGRhdGEgPSBVdGlscy5fY29udmVydERhdGEoZGF0YSk7XHJcblxyXG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcclxuICAgICAgaWYgKCQuaW5BcnJheShrZXksIGV4Y2x1ZGVkRGF0YSkgPiAtMSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHRoaXMub3B0aW9uc1trZXldKSkge1xyXG4gICAgICAgICQuZXh0ZW5kKHRoaXMub3B0aW9uc1trZXldLCBkYXRhW2tleV0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gZGF0YVtrZXldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgT3B0aW9ucy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc1trZXldO1xyXG4gIH07XHJcblxyXG4gIE9wdGlvbnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbCkge1xyXG4gICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWw7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE9wdGlvbnM7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2NvcmUnLFtcclxuICAnanF1ZXJ5JyxcclxuICAnLi9vcHRpb25zJyxcclxuICAnLi91dGlscycsXHJcbiAgJy4va2V5cydcclxuXSwgZnVuY3Rpb24gKCQsIE9wdGlvbnMsIFV0aWxzLCBLRVlTKSB7XHJcbiAgdmFyIFNlbGVjdDIgPSBmdW5jdGlvbiAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIGlmICgkZWxlbWVudC5kYXRhKCdzZWxlY3QyJykgIT0gbnVsbCkge1xyXG4gICAgICAkZWxlbWVudC5kYXRhKCdzZWxlY3QyJykuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcclxuXHJcbiAgICB0aGlzLmlkID0gdGhpcy5fZ2VuZXJhdGVJZCgkZWxlbWVudCk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0gbmV3IE9wdGlvbnMob3B0aW9ucywgJGVsZW1lbnQpO1xyXG5cclxuICAgIFNlbGVjdDIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcblxyXG4gICAgLy8gU2V0IHVwIHRoZSB0YWJpbmRleFxyXG5cclxuICAgIHZhciB0YWJpbmRleCA9ICRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgfHwgMDtcclxuICAgICRlbGVtZW50LmRhdGEoJ29sZC10YWJpbmRleCcsIHRhYmluZGV4KTtcclxuICAgICRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XHJcblxyXG4gICAgLy8gU2V0IHVwIGNvbnRhaW5lcnMgYW5kIGFkYXB0ZXJzXHJcblxyXG4gICAgdmFyIERhdGFBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnZGF0YUFkYXB0ZXInKTtcclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIgPSBuZXcgRGF0YUFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcblxyXG4gICAgdmFyICRjb250YWluZXIgPSB0aGlzLnJlbmRlcigpO1xyXG5cclxuICAgIHRoaXMuX3BsYWNlQ29udGFpbmVyKCRjb250YWluZXIpO1xyXG5cclxuICAgIHZhciBTZWxlY3Rpb25BZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnc2VsZWN0aW9uQWRhcHRlcicpO1xyXG4gICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uQWRhcHRlcigkZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcclxuICAgIHRoaXMuJHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uLnJlbmRlcigpO1xyXG5cclxuICAgIHRoaXMuc2VsZWN0aW9uLnBvc2l0aW9uKHRoaXMuJHNlbGVjdGlvbiwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdmFyIERyb3Bkb3duQWRhcHRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ2Ryb3Bkb3duQWRhcHRlcicpO1xyXG4gICAgdGhpcy5kcm9wZG93biA9IG5ldyBEcm9wZG93bkFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB0aGlzLiRkcm9wZG93biA9IHRoaXMuZHJvcGRvd24ucmVuZGVyKCk7XHJcblxyXG4gICAgdGhpcy5kcm9wZG93bi5wb3NpdGlvbih0aGlzLiRkcm9wZG93biwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdmFyIFJlc3VsdHNBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgncmVzdWx0c0FkYXB0ZXInKTtcclxuICAgIHRoaXMucmVzdWx0cyA9IG5ldyBSZXN1bHRzQWRhcHRlcigkZWxlbWVudCwgdGhpcy5vcHRpb25zLCB0aGlzLmRhdGFBZGFwdGVyKTtcclxuICAgIHRoaXMuJHJlc3VsdHMgPSB0aGlzLnJlc3VsdHMucmVuZGVyKCk7XHJcblxyXG4gICAgdGhpcy5yZXN1bHRzLnBvc2l0aW9uKHRoaXMuJHJlc3VsdHMsIHRoaXMuJGRyb3Bkb3duKTtcclxuXHJcbiAgICAvLyBCaW5kIGV2ZW50c1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAvLyBCaW5kIHRoZSBjb250YWluZXIgdG8gYWxsIG9mIHRoZSBhZGFwdGVyc1xyXG4gICAgdGhpcy5fYmluZEFkYXB0ZXJzKCk7XHJcblxyXG4gICAgLy8gUmVnaXN0ZXIgYW55IERPTSBldmVudCBoYW5kbGVyc1xyXG4gICAgdGhpcy5fcmVnaXN0ZXJEb21FdmVudHMoKTtcclxuXHJcbiAgICAvLyBSZWdpc3RlciBhbnkgaW50ZXJuYWwgZXZlbnQgaGFuZGxlcnNcclxuICAgIHRoaXMuX3JlZ2lzdGVyRGF0YUV2ZW50cygpO1xyXG4gICAgdGhpcy5fcmVnaXN0ZXJTZWxlY3Rpb25FdmVudHMoKTtcclxuICAgIHRoaXMuX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMoKTtcclxuICAgIHRoaXMuX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cygpO1xyXG4gICAgdGhpcy5fcmVnaXN0ZXJFdmVudHMoKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgc3RhdGVcclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoaW5pdGlhbERhdGEpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3Rpb246dXBkYXRlJywge1xyXG4gICAgICAgIGRhdGE6IGluaXRpYWxEYXRhXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSGlkZSB0aGUgb3JpZ2luYWwgc2VsZWN0XHJcbiAgICAkZWxlbWVudC5hZGRDbGFzcygnc2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZScpO1xyXG4gICAgJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG5cclxuICAgIC8vIFN5bmNocm9uaXplIGFueSBtb25pdG9yZWQgYXR0cmlidXRlc1xyXG4gICAgdGhpcy5fc3luY0F0dHJpYnV0ZXMoKTtcclxuXHJcbiAgICAkZWxlbWVudC5kYXRhKCdzZWxlY3QyJywgdGhpcyk7XHJcbiAgfTtcclxuXHJcbiAgVXRpbHMuRXh0ZW5kKFNlbGVjdDIsIFV0aWxzLk9ic2VydmFibGUpO1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xyXG4gICAgdmFyIGlkID0gJyc7XHJcblxyXG4gICAgaWYgKCRlbGVtZW50LmF0dHIoJ2lkJykgIT0gbnVsbCkge1xyXG4gICAgICBpZCA9ICRlbGVtZW50LmF0dHIoJ2lkJyk7XHJcbiAgICB9IGVsc2UgaWYgKCRlbGVtZW50LmF0dHIoJ25hbWUnKSAhPSBudWxsKSB7XHJcbiAgICAgIGlkID0gJGVsZW1lbnQuYXR0cignbmFtZScpICsgJy0nICsgVXRpbHMuZ2VuZXJhdGVDaGFycygyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlkID0gVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZCA9IGlkLnJlcGxhY2UoLyg6fFxcLnxcXFt8XFxdfCwpL2csICcnKTtcclxuICAgIGlkID0gJ3NlbGVjdDItJyArIGlkO1xyXG5cclxuICAgIHJldHVybiBpZDtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fcGxhY2VDb250YWluZXIgPSBmdW5jdGlvbiAoJGNvbnRhaW5lcikge1xyXG4gICAgJGNvbnRhaW5lci5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KTtcclxuXHJcbiAgICB2YXIgd2lkdGggPSB0aGlzLl9yZXNvbHZlV2lkdGgodGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmdldCgnd2lkdGgnKSk7XHJcblxyXG4gICAgaWYgKHdpZHRoICE9IG51bGwpIHtcclxuICAgICAgJGNvbnRhaW5lci5jc3MoJ3dpZHRoJywgd2lkdGgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZXNvbHZlV2lkdGggPSBmdW5jdGlvbiAoJGVsZW1lbnQsIG1ldGhvZCkge1xyXG4gICAgdmFyIFdJRFRIID0gL153aWR0aDooKFstK10/KFswLTldKlxcLik/WzAtOV0rKShweHxlbXxleHwlfGlufGNtfG1tfHB0fHBjKSkvaTtcclxuXHJcbiAgICBpZiAobWV0aG9kID09ICdyZXNvbHZlJykge1xyXG4gICAgICB2YXIgc3R5bGVXaWR0aCA9IHRoaXMuX3Jlc29sdmVXaWR0aCgkZWxlbWVudCwgJ3N0eWxlJyk7XHJcblxyXG4gICAgICBpZiAoc3R5bGVXaWR0aCAhPSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0eWxlV2lkdGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlV2lkdGgoJGVsZW1lbnQsICdlbGVtZW50Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1ldGhvZCA9PSAnZWxlbWVudCcpIHtcclxuICAgICAgdmFyIGVsZW1lbnRXaWR0aCA9ICRlbGVtZW50Lm91dGVyV2lkdGgoZmFsc2UpO1xyXG5cclxuICAgICAgaWYgKGVsZW1lbnRXaWR0aCA8PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuICdhdXRvJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGVsZW1lbnRXaWR0aCArICdweCc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1ldGhvZCA9PSAnc3R5bGUnKSB7XHJcbiAgICAgIHZhciBzdHlsZSA9ICRlbGVtZW50LmF0dHIoJ3N0eWxlJyk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mKHN0eWxlKSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGF0dHJzID0gc3R5bGUuc3BsaXQoJzsnKTtcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSA9IGkgKyAxKSB7XHJcbiAgICAgICAgdmFyIGF0dHIgPSBhdHRyc1tpXS5yZXBsYWNlKC9cXHMvZywgJycpO1xyXG4gICAgICAgIHZhciBtYXRjaGVzID0gYXR0ci5tYXRjaChXSURUSCk7XHJcblxyXG4gICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsICYmIG1hdGNoZXMubGVuZ3RoID49IDEpIHtcclxuICAgICAgICAgIHJldHVybiBtYXRjaGVzWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1ldGhvZDtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fYmluZEFkYXB0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5kYXRhQWRhcHRlci5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnNlbGVjdGlvbi5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdGhpcy5kcm9wZG93bi5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnJlc3VsdHMuYmluZCh0aGlzLCB0aGlzLiRjb250YWluZXIpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckRvbUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjaGFuZ2Uuc2VsZWN0MicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3Rpb246dXBkYXRlJywge1xyXG4gICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2ZvY3VzLnNlbGVjdDInLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYudHJpZ2dlcignZm9jdXMnLCBldnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fc3luY0EgPSBVdGlscy5iaW5kKHRoaXMuX3N5bmNBdHRyaWJ1dGVzLCB0aGlzKTtcclxuICAgIHRoaXMuX3N5bmNTID0gVXRpbHMuYmluZCh0aGlzLl9zeW5jU3VidHJlZSwgdGhpcyk7XHJcblxyXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0uYXR0YWNoRXZlbnQpIHtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXS5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIHRoaXMuX3N5bmNBKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgb2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fFxyXG4gICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fFxyXG4gICAgICB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlclxyXG4gICAgO1xyXG5cclxuICAgIGlmIChvYnNlcnZlciAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IG9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuICAgICAgICAkLmVhY2gobXV0YXRpb25zLCBzZWxmLl9zeW5jQSk7XHJcbiAgICAgICAgJC5lYWNoKG11dGF0aW9ucywgc2VsZi5fc3luY1MpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLiRlbGVtZW50WzBdLCB7XHJcbiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcclxuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgc3VidHJlZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgJ0RPTUF0dHJNb2RpZmllZCcsXHJcbiAgICAgICAgc2VsZi5fc3luY0EsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICdET01Ob2RlSW5zZXJ0ZWQnLFxyXG4gICAgICAgIHNlbGYuX3N5bmNTLFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAnRE9NTm9kZVJlbW92ZWQnLFxyXG4gICAgICAgIHNlbGYuX3N5bmNTLFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRGF0YUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLmRhdGFBZGFwdGVyLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xyXG4gICAgICBzZWxmLnRyaWdnZXIobmFtZSwgcGFyYW1zKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBub25SZWxheUV2ZW50cyA9IFsndG9nZ2xlJywgJ2ZvY3VzJ107XHJcblxyXG4gICAgdGhpcy5zZWxlY3Rpb24ub24oJ3RvZ2dsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi50b2dnbGVEcm9wZG93bigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zZWxlY3Rpb24ub24oJ2ZvY3VzJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmZvY3VzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnNlbGVjdGlvbi5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgaWYgKCQuaW5BcnJheShuYW1lLCBub25SZWxheUV2ZW50cykgIT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIobmFtZSwgcGFyYW1zKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMuZHJvcGRvd24ub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XHJcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLnJlc3VsdHMub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XHJcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWRpc2FibGVkJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm9uKCdkaXNhYmxlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1kaXNhYmxlZCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vbignYmx1cicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBpZiAoIXNlbGYuaXNPcGVuKCkpIHtcclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ29wZW4nLCB7fSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZGF0YUFkYXB0ZXIucXVlcnkocGFyYW1zLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czphbGwnLCB7XHJcbiAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgcXVlcnk6IHBhcmFtc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMub24oJ3F1ZXJ5OmFwcGVuZCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgdGhpcy5kYXRhQWRhcHRlci5xdWVyeShwYXJhbXMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOmFwcGVuZCcsIHtcclxuICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICBxdWVyeTogcGFyYW1zXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBldnQud2hpY2g7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc09wZW4oKSkge1xyXG4gICAgICAgIGlmIChrZXkgPT09IEtFWVMuRVNDIHx8IGtleSA9PT0gS0VZUy5UQUIgfHxcclxuICAgICAgICAgICAgKGtleSA9PT0gS0VZUy5VUCAmJiBldnQuYWx0S2V5KSkge1xyXG4gICAgICAgICAgc2VsZi5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLRVlTLkVOVEVSKSB7XHJcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6c2VsZWN0Jywge30pO1xyXG5cclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGtleSA9PT0gS0VZUy5TUEFDRSAmJiBldnQuY3RybEtleSkpIHtcclxuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czp0b2dnbGUnLCB7fSk7XHJcblxyXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtFWVMuVVApIHtcclxuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpwcmV2aW91cycsIHt9KTtcclxuXHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS0VZUy5ET1dOKSB7XHJcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6bmV4dCcsIHt9KTtcclxuXHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gS0VZUy5FTlRFUiB8fCBrZXkgPT09IEtFWVMuU1BBQ0UgfHxcclxuICAgICAgICAgICAgKGtleSA9PT0gS0VZUy5ET1dOICYmIGV2dC5hbHRLZXkpKSB7XHJcbiAgICAgICAgICBzZWxmLm9wZW4oKTtcclxuXHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLl9zeW5jQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMub3B0aW9ucy5zZXQoJ2Rpc2FibGVkJywgdGhpcy4kZWxlbWVudC5wcm9wKCdkaXNhYmxlZCcpKTtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGlzYWJsZWQnKSkge1xyXG4gICAgICBpZiAodGhpcy5pc09wZW4oKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50cmlnZ2VyKCdkaXNhYmxlJywge30pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKCdlbmFibGUnLCB7fSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3N5bmNTdWJ0cmVlID0gZnVuY3Rpb24gKGV2dCwgbXV0YXRpb25zKSB7XHJcbiAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIElnbm9yZSBhbnkgbXV0YXRpb24gZXZlbnRzIHJhaXNlZCBmb3IgZWxlbWVudHMgdGhhdCBhcmVuJ3Qgb3B0aW9ucyBvclxyXG4gICAgLy8gb3B0Z3JvdXBzLiBUaGlzIGhhbmRsZXMgdGhlIGNhc2Ugd2hlbiB0aGUgc2VsZWN0IGVsZW1lbnQgaXMgZGVzdHJveWVkXHJcbiAgICBpZiAoXHJcbiAgICAgIGV2dCAmJiBldnQudGFyZ2V0ICYmIChcclxuICAgICAgICBldnQudGFyZ2V0Lm5vZGVOYW1lICE9PSAnT1BUSU9OJyAmJiBldnQudGFyZ2V0Lm5vZGVOYW1lICE9PSAnT1BUR1JPVVAnXHJcbiAgICAgIClcclxuICAgICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFtdXRhdGlvbnMpIHtcclxuICAgICAgLy8gSWYgbXV0YXRpb24gZXZlbnRzIGFyZW4ndCBzdXBwb3J0ZWQsIHRoZW4gd2UgY2FuIG9ubHkgYXNzdW1lIHRoYXQgdGhlXHJcbiAgICAgIC8vIGNoYW5nZSBhZmZlY3RlZCB0aGUgc2VsZWN0aW9uc1xyXG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAobXV0YXRpb25zLmFkZGVkTm9kZXMgJiYgbXV0YXRpb25zLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG11dGF0aW9ucy5hZGRlZE5vZGVzLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBtdXRhdGlvbnMuYWRkZWROb2Rlc1tuXTtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChtdXRhdGlvbnMucmVtb3ZlZE5vZGVzICYmIG11dGF0aW9ucy5yZW1vdmVkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPbmx5IHJlLXB1bGwgdGhlIGRhdGEgaWYgd2UgdGhpbmsgdGhlcmUgaXMgYSBjaGFuZ2VcclxuICAgIGlmIChjaGFuZ2VkKSB7XHJcbiAgICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ3NlbGVjdGlvbjp1cGRhdGUnLCB7XHJcbiAgICAgICAgICBkYXRhOiBjdXJyZW50RGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBPdmVycmlkZSB0aGUgdHJpZ2dlciBtZXRob2QgdG8gYXV0b21hdGljYWxseSB0cmlnZ2VyIHByZS1ldmVudHMgd2hlblxyXG4gICAqIHRoZXJlIGFyZSBldmVudHMgdGhhdCBjYW4gYmUgcHJldmVudGVkLlxyXG4gICAqL1xyXG4gIFNlbGVjdDIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xyXG4gICAgdmFyIGFjdHVhbFRyaWdnZXIgPSBTZWxlY3QyLl9fc3VwZXJfXy50cmlnZ2VyO1xyXG4gICAgdmFyIHByZVRyaWdnZXJNYXAgPSB7XHJcbiAgICAgICdvcGVuJzogJ29wZW5pbmcnLFxyXG4gICAgICAnY2xvc2UnOiAnY2xvc2luZycsXHJcbiAgICAgICdzZWxlY3QnOiAnc2VsZWN0aW5nJyxcclxuICAgICAgJ3Vuc2VsZWN0JzogJ3Vuc2VsZWN0aW5nJ1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoYXJncyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGFyZ3MgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmFtZSBpbiBwcmVUcmlnZ2VyTWFwKSB7XHJcbiAgICAgIHZhciBwcmVUcmlnZ2VyTmFtZSA9IHByZVRyaWdnZXJNYXBbbmFtZV07XHJcbiAgICAgIHZhciBwcmVUcmlnZ2VyQXJncyA9IHtcclxuICAgICAgICBwcmV2ZW50ZWQ6IGZhbHNlLFxyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgYXJnczogYXJnc1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgYWN0dWFsVHJpZ2dlci5jYWxsKHRoaXMsIHByZVRyaWdnZXJOYW1lLCBwcmVUcmlnZ2VyQXJncyk7XHJcblxyXG4gICAgICBpZiAocHJlVHJpZ2dlckFyZ3MucHJldmVudGVkKSB7XHJcbiAgICAgICAgYXJncy5wcmV2ZW50ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhY3R1YWxUcmlnZ2VyLmNhbGwodGhpcywgbmFtZSwgYXJncyk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUudG9nZ2xlRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGlzYWJsZWQnKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNPcGVuKCkpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyaWdnZXIoJ3F1ZXJ5Jywge30pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzT3BlbigpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyaWdnZXIoJ2Nsb3NlJywge30pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLiRjb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuaGFzRm9jdXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kY29udGFpbmVyLmhhc0NsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAvLyBObyBuZWVkIHRvIHJlLXRyaWdnZXIgZm9jdXMgZXZlbnRzIGlmIHdlIGFyZSBhbHJlYWR5IGZvY3VzZWRcclxuICAgIGlmICh0aGlzLmhhc0ZvY3VzKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWZvY3VzJyk7XHJcbiAgICB0aGlzLnRyaWdnZXIoJ2ZvY3VzJywge30pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICdTZWxlY3QyOiBUaGUgYHNlbGVjdDIoXCJlbmFibGVcIilgIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsJyArXHJcbiAgICAgICAgJyBiZSByZW1vdmVkIGluIGxhdGVyIFNlbGVjdDIgdmVyc2lvbnMuIFVzZSAkZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIiknICtcclxuICAgICAgICAnIGluc3RlYWQuJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgYXJncyA9IFt0cnVlXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGlzYWJsZWQgPSAhYXJnc1swXTtcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJlxyXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ1NlbGVjdDI6IERhdGEgY2FuIG5vIGxvbmdlciBiZSBzZXQgdXNpbmcgYHNlbGVjdDIoXCJkYXRhXCIpYC4gWW91ICcgK1xyXG4gICAgICAgICdzaG91bGQgY29uc2lkZXIgc2V0dGluZyB0aGUgdmFsdWUgaW5zdGVhZCB1c2luZyBgJGVsZW1lbnQudmFsKClgLidcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGF0YSA9IFtdO1xyXG5cclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcclxuICAgICAgZGF0YSA9IGN1cnJlbnREYXRhO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUudmFsID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ1NlbGVjdDI6IFRoZSBgc2VsZWN0MihcInZhbFwiKWAgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUnICtcclxuICAgICAgICAnIHJlbW92ZWQgaW4gbGF0ZXIgU2VsZWN0MiB2ZXJzaW9ucy4gVXNlICRlbGVtZW50LnZhbCgpIGluc3RlYWQuJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQudmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG5ld1ZhbCA9IGFyZ3NbMF07XHJcblxyXG4gICAgaWYgKCQuaXNBcnJheShuZXdWYWwpKSB7XHJcbiAgICAgIG5ld1ZhbCA9ICQubWFwKG5ld1ZhbCwgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmoudG9TdHJpbmcoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kZWxlbWVudC52YWwobmV3VmFsKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZSgpO1xyXG5cclxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLmRldGFjaEV2ZW50KSB7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0uZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCB0aGlzLl9zeW5jQSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX29ic2VydmVyICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICB0aGlzLl9vYnNlcnZlciA9IG51bGw7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICB0aGlzLiRlbGVtZW50WzBdXHJcbiAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUF0dHJNb2RpZmllZCcsIHRoaXMuX3N5bmNBLCBmYWxzZSk7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF1cclxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgdGhpcy5fc3luY1MsIGZhbHNlKTtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXVxyXG4gICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Ob2RlUmVtb3ZlZCcsIHRoaXMuX3N5bmNTLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc3luY0EgPSBudWxsO1xyXG4gICAgdGhpcy5fc3luY1MgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuc2VsZWN0MicpO1xyXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIHRoaXMuJGVsZW1lbnQuZGF0YSgnb2xkLXRhYmluZGV4JykpO1xyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItaGlkZGVuLWFjY2Vzc2libGUnKTtcclxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgnc2VsZWN0MicpO1xyXG5cclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5zZWxlY3Rpb24uZGVzdHJveSgpO1xyXG4gICAgdGhpcy5kcm9wZG93bi5kZXN0cm95KCk7XHJcbiAgICB0aGlzLnJlc3VsdHMuZGVzdHJveSgpO1xyXG5cclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIgPSBudWxsO1xyXG4gICAgdGhpcy5zZWxlY3Rpb24gPSBudWxsO1xyXG4gICAgdGhpcy5kcm9wZG93biA9IG51bGw7XHJcbiAgICB0aGlzLnJlc3VsdHMgPSBudWxsO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkY29udGFpbmVyID0gJChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0MiBzZWxlY3QyLWNvbnRhaW5lclwiPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdGlvblwiPjwvc3Bhbj4nICtcclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJkcm9wZG93bi13cmFwcGVyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPicgK1xyXG4gICAgICAnPC9zcGFuPidcclxuICAgICk7XHJcblxyXG4gICAgJGNvbnRhaW5lci5hdHRyKCdkaXInLCB0aGlzLm9wdGlvbnMuZ2V0KCdkaXInKSk7XHJcblxyXG4gICAgdGhpcy4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcclxuXHJcbiAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS0nICsgdGhpcy5vcHRpb25zLmdldCgndGhlbWUnKSk7XHJcblxyXG4gICAgJGNvbnRhaW5lci5kYXRhKCdlbGVtZW50JywgdGhpcy4kZWxlbWVudCk7XHJcblxyXG4gICAgcmV0dXJuICRjb250YWluZXI7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFNlbGVjdDI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdqcXVlcnktbW91c2V3aGVlbCcsW1xyXG4gICdqcXVlcnknXHJcbl0sIGZ1bmN0aW9uICgkKSB7XHJcbiAgLy8gVXNlZCB0byBzaGltIGpRdWVyeS5tb3VzZXdoZWVsIGZvciBub24tZnVsbCBidWlsZHMuXHJcbiAgcmV0dXJuICQ7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdqcXVlcnkuc2VsZWN0MicsW1xyXG4gICdqcXVlcnknLFxyXG4gICdqcXVlcnktbW91c2V3aGVlbCcsXHJcblxyXG4gICcuL3NlbGVjdDIvY29yZScsXHJcbiAgJy4vc2VsZWN0Mi9kZWZhdWx0cydcclxuXSwgZnVuY3Rpb24gKCQsIF8sIFNlbGVjdDIsIERlZmF1bHRzKSB7XHJcbiAgaWYgKCQuZm4uc2VsZWN0MiA9PSBudWxsKSB7XHJcbiAgICAvLyBBbGwgbWV0aG9kcyB0aGF0IHNob3VsZCByZXR1cm4gdGhlIGVsZW1lbnRcclxuICAgIHZhciB0aGlzTWV0aG9kcyA9IFsnb3BlbicsICdjbG9zZScsICdkZXN0cm95J107XHJcblxyXG4gICAgJC5mbi5zZWxlY3QyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciBpbnN0YW5jZU9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFNlbGVjdDIoJCh0aGlzKSwgaW5zdGFuY2VPcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdmFyIHJldDtcclxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoJ3NlbGVjdDInKTtcclxuXHJcbiAgICAgICAgICBpZiAoaW5zdGFuY2UgPT0gbnVsbCAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgJ1RoZSBzZWxlY3QyKFxcJycgKyBvcHRpb25zICsgJ1xcJykgbWV0aG9kIHdhcyBjYWxsZWQgb24gYW4gJyArXHJcbiAgICAgICAgICAgICAgJ2VsZW1lbnQgdGhhdCBpcyBub3QgdXNpbmcgU2VsZWN0Mi4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0ID0gaW5zdGFuY2Vbb3B0aW9uc10uYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBzaG91bGQgYmUgcmV0dXJuaW5nIGB0aGlzYFxyXG4gICAgICAgIGlmICgkLmluQXJyYXkob3B0aW9ucywgdGhpc01ldGhvZHMpID4gLTEpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzIGZvciBTZWxlY3QyOiAnICsgb3B0aW9ucyk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBpZiAoJC5mbi5zZWxlY3QyLmRlZmF1bHRzID09IG51bGwpIHtcclxuICAgICQuZm4uc2VsZWN0Mi5kZWZhdWx0cyA9IERlZmF1bHRzO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFNlbGVjdDI7XHJcbn0pO1xyXG5cclxuICAvLyBSZXR1cm4gdGhlIEFNRCBsb2FkZXIgY29uZmlndXJhdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoaXMgZmlsZVxyXG4gIHJldHVybiB7XHJcbiAgICBkZWZpbmU6IFMyLmRlZmluZSxcclxuICAgIHJlcXVpcmU6IFMyLnJlcXVpcmVcclxuICB9O1xyXG59KCkpO1xyXG5cclxuICAvLyBBdXRvbG9hZCB0aGUgalF1ZXJ5IGJpbmRpbmdzXHJcbiAgLy8gV2Uga25vdyB0aGF0IGFsbCBvZiB0aGUgbW9kdWxlcyBleGlzdCBhYm92ZSB0aGlzLCBzbyB3ZSdyZSBzYWZlXHJcbiAgdmFyIHNlbGVjdDIgPSBTMi5yZXF1aXJlKCdqcXVlcnkuc2VsZWN0MicpO1xyXG5cclxuICAvLyBIb2xkIHRoZSBBTUQgbW9kdWxlIHJlZmVyZW5jZXMgb24gdGhlIGpRdWVyeSBmdW5jdGlvbiB0aGF0IHdhcyBqdXN0IGxvYWRlZFxyXG4gIC8vIFRoaXMgYWxsb3dzIFNlbGVjdDIgdG8gdXNlIHRoZSBpbnRlcm5hbCBsb2FkZXIgb3V0c2lkZSBvZiB0aGlzIGZpbGUsIHN1Y2hcclxuICAvLyBhcyBpbiB0aGUgbGFuZ3VhZ2UgZmlsZXMuXHJcbiAgalF1ZXJ5LmZuLnNlbGVjdDIuYW1kID0gUzI7XHJcblxyXG4gIC8vIFJldHVybiB0aGUgU2VsZWN0MiBpbnN0YW5jZSBmb3IgYW55b25lIHdobyBpcyBpbXBvcnRpbmcgaXQuXHJcbiAgcmV0dXJuIHNlbGVjdDI7XHJcbn0pKTtcclxuLyohIFNlbGVjdDIgNC4wLjMgfCBodHRwczovL2dpdGh1Yi5jb20vc2VsZWN0Mi9zZWxlY3QyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQgKi9cclxuXHJcbihmdW5jdGlvbigpe2lmKGpRdWVyeSYmalF1ZXJ5LmZuJiZqUXVlcnkuZm4uc2VsZWN0MiYmalF1ZXJ5LmZuLnNlbGVjdDIuYW1kKXZhciBlPWpRdWVyeS5mbi5zZWxlY3QyLmFtZDtyZXR1cm4gZS5kZWZpbmUoXCJzZWxlY3QyL2kxOG4vcnVcIixbXSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4scil7cmV0dXJuIGUlMTA8NSYmZSUxMD4wJiZlJTEwMDw1fHxlJTEwMD4yMD9lJTEwPjE/bjp0OnJ9cmV0dXJue2Vycm9yTG9hZGluZzpmdW5jdGlvbigpe3JldHVyblwi0J3QtdCy0L7Qt9C80L7QttC90L4g0LfQsNCz0YDRg9C30LjRgtGMINGA0LXQt9GD0LvRjNGC0LDRgtGLXCJ9LGlucHV0VG9vTG9uZzpmdW5jdGlvbih0KXt2YXIgbj10LmlucHV0Lmxlbmd0aC10Lm1heGltdW0scj1cItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQvdCwIFwiK24rXCIg0YHQuNC80LLQvtC7XCI7cmV0dXJuIHIrPWUobixcIlwiLFwiYVwiLFwi0L7QslwiKSxyKz1cIiDQvNC10L3RjNGI0LVcIixyfSxpbnB1dFRvb1Nob3J0OmZ1bmN0aW9uKHQpe3ZhciBuPXQubWluaW11bS10LmlucHV0Lmxlbmd0aCxyPVwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC10YnQtSDRhdC+0YLRjyDQsdGLIFwiK24rXCIg0YHQuNC80LLQvtC7XCI7cmV0dXJuIHIrPWUobixcIlwiLFwiYVwiLFwi0L7QslwiKSxyfSxsb2FkaW5nTW9yZTpmdW5jdGlvbigpe3JldHVyblwi0JfQsNCz0YDRg9C30LrQsCDQtNCw0L3QvdGL0YXigKZcIn0sbWF4aW11bVNlbGVjdGVkOmZ1bmN0aW9uKHQpe3ZhciBuPVwi0JLRiyDQvNC+0LbQtdGC0LUg0LLRi9Cx0YDQsNGC0Ywg0L3QtSDQsdC+0LvQtdC1IFwiK3QubWF4aW11bStcIiDRjdC70LXQvNC10L3RglwiO3JldHVybiBuKz1lKHQubWF4aW11bSxcIlwiLFwiYVwiLFwi0L7QslwiKSxufSxub1Jlc3VsdHM6ZnVuY3Rpb24oKXtyZXR1cm5cItCh0L7QstC/0LDQtNC10L3QuNC5INC90LUg0L3QsNC50LTQtdC90L5cIn0sc2VhcmNoaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCLQn9C+0LjRgdC64oCmXCJ9fX0pLHtkZWZpbmU6ZS5kZWZpbmUscmVxdWlyZTplLnJlcXVpcmV9fSkoKTtcclxuLyogTmlmdHkuSlMgdjAuMVxyXG4gKlxyXG4gKiBBdXRob3I6IEpvaG4tQWxhbiBTaW1tb25zIFxyXG4gKlxyXG4gKiBBIEpRdWVyeSBtb2RhbCBzeXN0ZW0gYmFzZWQgZnJvbSBodHRwOi8vdHltcGFudXMubmV0L2NvZHJvcHMvMjAxMy8wNi8yNS9uaWZ0eS1tb2RhbC13aW5kb3ctZWZmZWN0cy9cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXHJcbiAqIDIwMTUgQ29uZmVyZW5jZUNsb3VkIEluYy5cclxuICovXHJcbihmdW5jdGlvbiggJCApIHtcclxuXHJcblx0JChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIltkYXRhLXRyaWdnZXI9J21vZGFsJ10sIFtkYXRhLXRyaWdnZXI9J25pZnR5J11cIiwgZnVuY3Rpb24oKSB7XHJcbiAgXHRcdHZhciB0YXJnZXQgPSAkKHRoaXMpLmRhdGEoXCJ0YXJnZXRcIilcclxuXHRcdCQodGFyZ2V0KS5uaWZ0eShcInNob3dcIilcclxuICBcdH0pXHJcblxyXG4gIFx0JChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIi5tZC1vdmVybGF5XCIsIGZ1bmN0aW9uKCkge1xyXG4gIFx0XHQkKFwiLm5pZnR5LW1vZGFsLm1kLXNob3dcIikubmlmdHkoXCJoaWRlXCIpXHJcbiAgXHR9KVxyXG5cclxuICBcdCQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIubmlmdHktbW9kYWwubWQtc2hvdyAubWQtY2xvc2VcIiwgZnVuY3Rpb24oKSB7XHJcbiAgXHRcdCQodGhpcykuY2xvc2VzdChcIi5uaWZ0eS1tb2RhbC5tZC1zaG93XCIpLm5pZnR5KFwiaGlkZVwiKVxyXG4gIFx0fSlcclxuXHJcbiAgIFx0JC5mbi5leHRlbmQoe1xyXG4gICBcdFx0bmlmdHk6IGZ1bmN0aW9uKGNtZCkge1xyXG5cdFx0ICAgXHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHQgICBcdHZhciB0cmFuc2l0aW9uRW5kRXZlbnRzID0gXCJ0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgTVNUcmFuc2l0aW9uRW5kXCJcclxuXHRcdCAgICBcclxuXHRcdCAgICB2YXIgc2hvd0hhbmRsZXIgPSBmdW5jdGlvbihhbmltYXRpb24pIHtcclxuXHQgICAgXHRcdHZhciBoYW5kbGVkVHJhbnNpdGlvbkVuZCA9IGZhbHNlO1xyXG5cdCAgICBcdFx0XHJcblx0ICAgIFx0XHQvLyBDaGVjayB0byBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG8gY29udGludWUgc2hvd2luZyB0aGUgbW9kYWxcclxuXHQgICAgXHRcdGlmICghZmlyZSgkKHNlbGYpLCBcInNob3cubmlmdHkubW9kYWxcIikpXHJcblx0ICAgIFx0XHRcdHJldHVyblxyXG5cclxuXHQgICAgXHRcdCQoc2VsZikub25lKHRyYW5zaXRpb25FbmRFdmVudHMsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0ICAgIFx0XHRcdGlmICghaGFuZGxlZFRyYW5zaXRpb25FbmQpIHtcclxuXHQgICAgXHRcdFx0XHRoYW5kbGVkVHJhbnNpdGlvbkVuZCA9IHRydWU7XHJcblx0ICAgIFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdCAgICBcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdCAgICBcdFx0XHQkKHNlbGYpLnRyaWdnZXIoXCJzaG93bi5uaWZ0eS5tb2RhbFwiKVxyXG5cdCAgICBcdFx0XHR9XHJcblx0ICAgIFx0XHR9KVxyXG5cdCAgICBcdFx0dmFyIHhjZW50ZXIgPSBNYXRoLmZsb29yKCQoc2VsZikud2lkdGgoKS8yKVxyXG5cdCAgICBcdFx0dmFyIHljZW50ZXIgPSBNYXRoLmZsb29yKCQoc2VsZikuaGVpZ2h0KCkvMilcclxuXHQgICAgXHRcdCQoXCIubmlmdHktbW9kYWxcIikuY3NzKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlWCgtXCIgKyB4Y2VudGVyICsgXCJweCkgdHJhbnNsYXRlWSgtXCIgKyB5Y2VudGVyICsgXCJweClcIilcclxuXHQgICAgXHRcdCQoc2VsZikuYWRkQ2xhc3MoXCJtZC1zaG93XCIpXHJcblx0ICAgIFx0fVxyXG5cclxuXHQgICAgXHR2YXIgaGlkZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuXHQgICAgXHRcdHZhciBoYW5kbGVkVHJhbnNpdGlvbkVuZCA9IGZhbHNlO1xyXG5cdCAgICBcdFx0XHJcblx0ICAgIFx0XHQvLyBDaGVjayB0byBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG8gY29udGludWUgc2hvd2luZyB0aGUgbW9kYWxcclxuXHQgICAgXHRcdGlmICghZmlyZSgkKHNlbGYpLCBcImhpZGUubmlmdHkubW9kYWxcIikpXHJcblx0ICAgIFx0XHRcdHJldHVyblxyXG5cclxuXHQgICAgXHRcdCQoc2VsZikub25lKHRyYW5zaXRpb25FbmRFdmVudHMsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0ICAgIFx0XHRcdGlmICghaGFuZGxlZFRyYW5zaXRpb25FbmQpIHtcclxuXHQgICAgXHRcdFx0XHRoYW5kbGVkVHJhbnNpdGlvbkVuZCA9IHRydWU7XHJcblx0ICAgIFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdCAgICBcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdCAgICBcdFx0XHQkKHNlbGYpLnRyaWdnZXIoXCJoaWRkZW4ubmlmdHkubW9kYWxcIilcclxuXHQgICAgXHRcdFx0fVxyXG5cdCAgICBcdFx0fSlcclxuXHQgICAgXHRcdCQoc2VsZikucmVtb3ZlQ2xhc3MoXCJtZC1zaG93XCIpXHJcblx0ICAgIFx0fVxyXG5cclxuXHRcdCAgICBpZiAoY21kID09IFwic2hvd1wiKSB7XHJcblx0XHQgICAgXHRzaG93SGFuZGxlcigpO1xyXG5cdFx0ICAgIH0gZWxzZSBpZiAoY21kID09IFwiaGlkZVwiKSB7XHJcblx0XHQgICAgXHRoaWRlSGFuZGxlcigpO1xyXG5cdFx0ICAgIH1cclxuXHJcblx0ICAgIFx0cmV0dXJuIHRoaXM7XHJcblx0ICAgXHR9XHJcblx0fSlcdFxyXG5cdFxyXG5cdGZ1bmN0aW9uIHNldFZlbmRvcihlbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuXHRcdGVsZW1lbnQuc3R5bGVbXCJ3ZWJraXRcIiArIHByb3BlcnR5XSA9IHZhbHVlO1xyXG5cdFx0ZWxlbWVudC5zdHlsZVtcIm1velwiICsgcHJvcGVydHldID0gdmFsdWU7XHJcblx0XHRlbGVtZW50LnN0eWxlW1wibXNcIiArIHByb3BlcnR5XSA9IHZhbHVlO1xyXG5cdFx0ZWxlbWVudC5zdHlsZVtcIm9cIiArIHByb3BlcnR5XSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZmlyZShvYmosIG5hbWUsIGRhdGEpIHtcclxuICAgICAgdmFyIGV2ZW50ID0gJC5FdmVudChuYW1lKTtcclxuICAgICAgb2JqLnRyaWdnZXIoZXZlbnQsIGRhdGEpO1xyXG4gICAgICByZXR1cm4gZXZlbnQucmVzdWx0ICE9PSBmYWxzZTtcclxuICAgIH1cclxuXHRcclxufSkoIGpRdWVyeSApO1xyXG4vLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXHJcbihmdW5jdGlvbigpIHtcclxuICB2YXIgSW5zdGFmZWVkO1xyXG5cclxuICBJbnN0YWZlZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICBmdW5jdGlvbiBJbnN0YWZlZWQocGFyYW1zLCBjb250ZXh0KSB7XHJcbiAgICAgIHZhciBvcHRpb24sIHZhbHVlO1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgdGFyZ2V0OiAnaW5zdGFmZWVkJyxcclxuICAgICAgICBnZXQ6ICdwb3B1bGFyJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAndGh1bWJuYWlsJyxcclxuICAgICAgICBzb3J0Qnk6ICdub25lJyxcclxuICAgICAgICBsaW5rczogdHJ1ZSxcclxuICAgICAgICBtb2NrOiBmYWxzZSxcclxuICAgICAgICB1c2VIdHRwOiBmYWxzZVxyXG4gICAgICB9O1xyXG4gICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBmb3IgKG9wdGlvbiBpbiBwYXJhbXMpIHtcclxuICAgICAgICAgIHZhbHVlID0gcGFyYW1zW29wdGlvbl07XHJcbiAgICAgICAgICB0aGlzLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0ICE9IG51bGwgPyBjb250ZXh0IDogdGhpcztcclxuICAgICAgdGhpcy51bmlxdWUgPSB0aGlzLl9nZW5LZXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmNvbnRleHQubmV4dFVybCA9PT0gJ3N0cmluZycgJiYgdGhpcy5jb250ZXh0Lm5leHRVcmwubGVuZ3RoID4gMDtcclxuICAgIH07XHJcblxyXG4gICAgSW5zdGFmZWVkLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghdGhpcy5oYXNOZXh0KCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXMucnVuKHRoaXMuY29udGV4dC5uZXh0VXJsKTtcclxuICAgIH07XHJcblxyXG4gICAgSW5zdGFmZWVkLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbih1cmwpIHtcclxuICAgICAgdmFyIGhlYWRlciwgaW5zdGFuY2VOYW1lLCBzY3JpcHQ7XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsaWVudElkICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmFjY2Vzc1Rva2VuICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjbGllbnRJZCBvciBhY2Nlc3NUb2tlbi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmFjY2Vzc1Rva2VuICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsaWVudElkICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjbGllbnRJZCBvciBhY2Nlc3NUb2tlbi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICgodGhpcy5vcHRpb25zLmJlZm9yZSAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5iZWZvcmUuY2FsbCh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgc2NyaXB0LmlkID0gJ2luc3RhZmVlZC1mZXRjaGVyJztcclxuICAgICAgICBzY3JpcHQuc3JjID0gdXJsIHx8IHRoaXMuX2J1aWxkVXJsKCk7XHJcbiAgICAgICAgaGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKTtcclxuICAgICAgICBoZWFkZXJbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgICBpbnN0YW5jZU5hbWUgPSBcImluc3RhZmVlZENhY2hlXCIgKyB0aGlzLnVuaXF1ZTtcclxuICAgICAgICB3aW5kb3dbaW5zdGFuY2VOYW1lXSA9IG5ldyBJbnN0YWZlZWQodGhpcy5vcHRpb25zLCB0aGlzKTtcclxuICAgICAgICB3aW5kb3dbaW5zdGFuY2VOYW1lXS51bmlxdWUgPSB0aGlzLnVuaXF1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgSW5zdGFmZWVkLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIHZhciBhbmNob3IsIGNoaWxkTm9kZUNvdW50LCBjaGlsZE5vZGVJbmRleCwgY2hpbGROb2Rlc0FyciwgZSwgZU1zZywgZnJhZ21lbnQsIGhlYWRlciwgaHRtbFN0cmluZywgaHR0cFByb3RvY29sLCBpLCBpbWFnZSwgaW1hZ2VPYmosIGltYWdlU3RyaW5nLCBpbWFnZVVybCwgaW1hZ2VzLCBpbWcsIGltZ0hlaWdodCwgaW1nT3JpZW50LCBpbWdVcmwsIGltZ1dpZHRoLCBpbnN0YW5jZU5hbWUsIGosIGssIGxlbiwgbGVuMSwgbGVuMiwgbm9kZSwgcGFyc2VkTGltaXQsIHJldmVyc2UsIHNvcnRTZXR0aW5ncywgdGFyZ2V0RWwsIHRtcEVsO1xyXG4gICAgICBpZiAodHlwZW9mIHJlc3BvbnNlICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmICgodGhpcy5vcHRpb25zLmVycm9yICE9IG51bGwpICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIHRoaXMub3B0aW9ucy5lcnJvci5jYWxsKHRoaXMsICdJbnZhbGlkIEpTT04gZGF0YScpO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlNPTiByZXNwb25zZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAocmVzcG9uc2UubWV0YS5jb2RlICE9PSAyMDApIHtcclxuICAgICAgICBpZiAoKHRoaXMub3B0aW9ucy5lcnJvciAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuZXJyb3IuY2FsbCh0aGlzLCByZXNwb25zZS5tZXRhLmVycm9yX21lc3NhZ2UpO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBmcm9tIEluc3RhZ3JhbTogXCIgKyByZXNwb25zZS5tZXRhLmVycm9yX21lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBpZiAoKHRoaXMub3B0aW9ucy5lcnJvciAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuZXJyb3IuY2FsbCh0aGlzLCAnTm8gaW1hZ2VzIHdlcmUgcmV0dXJuZWQgZnJvbSBJbnN0YWdyYW0nKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbWFnZXMgd2VyZSByZXR1cm5lZCBmcm9tIEluc3RhZ3JhbScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoKHRoaXMub3B0aW9ucy5zdWNjZXNzICE9IG51bGwpICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMuc3VjY2VzcyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zdWNjZXNzLmNhbGwodGhpcywgcmVzcG9uc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuY29udGV4dC5uZXh0VXJsID0gJyc7XHJcbiAgICAgIGlmIChyZXNwb25zZS5wYWdpbmF0aW9uICE9IG51bGwpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQubmV4dFVybCA9IHJlc3BvbnNlLnBhZ2luYXRpb24ubmV4dF91cmw7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zb3J0QnkgIT09ICdub25lJykge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc29ydEJ5ID09PSAncmFuZG9tJykge1xyXG4gICAgICAgICAgc29ydFNldHRpbmdzID0gWycnLCAncmFuZG9tJ107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNvcnRTZXR0aW5ncyA9IHRoaXMub3B0aW9ucy5zb3J0Qnkuc3BsaXQoJy0nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV2ZXJzZSA9IHNvcnRTZXR0aW5nc1swXSA9PT0gJ2xlYXN0JyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICBzd2l0Y2ggKHNvcnRTZXR0aW5nc1sxXSkge1xyXG4gICAgICAgICAgY2FzZSAncmFuZG9tJzpcclxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5zb3J0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAwLjUgLSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdyZWNlbnQnOlxyXG4gICAgICAgICAgICByZXNwb25zZS5kYXRhID0gdGhpcy5fc29ydEJ5KHJlc3BvbnNlLmRhdGEsICdjcmVhdGVkX3RpbWUnLCByZXZlcnNlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdsaWtlZCc6XHJcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEgPSB0aGlzLl9zb3J0QnkocmVzcG9uc2UuZGF0YSwgJ2xpa2VzLmNvdW50JywgcmV2ZXJzZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnY29tbWVudGVkJzpcclxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHRoaXMuX3NvcnRCeShyZXNwb25zZS5kYXRhLCAnY29tbWVudHMuY291bnQnLCByZXZlcnNlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9wdGlvbiBmb3Igc29ydEJ5OiAnXCIgKyB0aGlzLm9wdGlvbnMuc29ydEJ5ICsgXCInLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQgIT09IG51bGwpICYmIHRoaXMub3B0aW9ucy5tb2NrID09PSBmYWxzZSkge1xyXG4gICAgICAgIGltYWdlcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgcGFyc2VkTGltaXQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMubGltaXQsIDEwKTtcclxuICAgICAgICBpZiAoKHRoaXMub3B0aW9ucy5saW1pdCAhPSBudWxsKSAmJiBpbWFnZXMubGVuZ3RoID4gcGFyc2VkTGltaXQpIHtcclxuICAgICAgICAgIGltYWdlcyA9IGltYWdlcy5zbGljZSgwLCBwYXJzZWRMaW1pdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgIGlmICgodGhpcy5vcHRpb25zLmZpbHRlciAhPSBudWxsKSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgaW1hZ2VzID0gdGhpcy5fZmlsdGVyKGltYWdlcywgdGhpcy5vcHRpb25zLmZpbHRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgodGhpcy5vcHRpb25zLnRlbXBsYXRlICE9IG51bGwpICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMudGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICBodG1sU3RyaW5nID0gJyc7XHJcbiAgICAgICAgICBpbWFnZVN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgaW1nVXJsID0gJyc7XHJcbiAgICAgICAgICB0bXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gaW1hZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGltYWdlID0gaW1hZ2VzW2ldO1xyXG4gICAgICAgICAgICBpbWFnZU9iaiA9IGltYWdlLmltYWdlc1t0aGlzLm9wdGlvbnMucmVzb2x1dGlvbl07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW1hZ2VPYmogIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgZU1zZyA9IFwiTm8gaW1hZ2UgZm91bmQgZm9yIHJlc29sdXRpb246IFwiICsgdGhpcy5vcHRpb25zLnJlc29sdXRpb24gKyBcIi5cIjtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZU1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW1nV2lkdGggPSBpbWFnZU9iai53aWR0aDtcclxuICAgICAgICAgICAgaW1nSGVpZ2h0ID0gaW1hZ2VPYmouaGVpZ2h0O1xyXG4gICAgICAgICAgICBpbWdPcmllbnQgPSBcInNxdWFyZVwiO1xyXG4gICAgICAgICAgICBpZiAoaW1nV2lkdGggPiBpbWdIZWlnaHQpIHtcclxuICAgICAgICAgICAgICBpbWdPcmllbnQgPSBcImxhbmRzY2FwZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbWdXaWR0aCA8IGltZ0hlaWdodCkge1xyXG4gICAgICAgICAgICAgIGltZ09yaWVudCA9IFwicG9ydHJhaXRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbWFnZVVybCA9IGltYWdlT2JqLnVybDtcclxuICAgICAgICAgICAgaHR0cFByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID49IDA7XHJcbiAgICAgICAgICAgIGlmIChodHRwUHJvdG9jb2wgJiYgIXRoaXMub3B0aW9ucy51c2VIdHRwKSB7XHJcbiAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBpbWFnZVVybC5yZXBsYWNlKC9odHRwcz86XFwvXFwvLywgJy8vJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW1hZ2VTdHJpbmcgPSB0aGlzLl9tYWtlVGVtcGxhdGUodGhpcy5vcHRpb25zLnRlbXBsYXRlLCB7XHJcbiAgICAgICAgICAgICAgbW9kZWw6IGltYWdlLFxyXG4gICAgICAgICAgICAgIGlkOiBpbWFnZS5pZCxcclxuICAgICAgICAgICAgICBsaW5rOiBpbWFnZS5saW5rLFxyXG4gICAgICAgICAgICAgIHR5cGU6IGltYWdlLnR5cGUsXHJcbiAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlVXJsLFxyXG4gICAgICAgICAgICAgIHdpZHRoOiBpbWdXaWR0aCxcclxuICAgICAgICAgICAgICBoZWlnaHQ6IGltZ0hlaWdodCxcclxuICAgICAgICAgICAgICBvcmllbnRhdGlvbjogaW1nT3JpZW50LFxyXG4gICAgICAgICAgICAgIGNhcHRpb246IHRoaXMuX2dldE9iamVjdFByb3BlcnR5KGltYWdlLCAnY2FwdGlvbi50ZXh0JyksXHJcbiAgICAgICAgICAgICAgbGlrZXM6IGltYWdlLmxpa2VzLmNvdW50LFxyXG4gICAgICAgICAgICAgIGNvbW1lbnRzOiBpbWFnZS5jb21tZW50cy5jb3VudCxcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogdGhpcy5fZ2V0T2JqZWN0UHJvcGVydHkoaW1hZ2UsICdsb2NhdGlvbi5uYW1lJylcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGh0bWxTdHJpbmcgKz0gaW1hZ2VTdHJpbmc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0bXBFbC5pbm5lckhUTUwgPSBodG1sU3RyaW5nO1xyXG4gICAgICAgICAgY2hpbGROb2Rlc0FyciA9IFtdO1xyXG4gICAgICAgICAgY2hpbGROb2RlSW5kZXggPSAwO1xyXG4gICAgICAgICAgY2hpbGROb2RlQ291bnQgPSB0bXBFbC5jaGlsZE5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgIHdoaWxlIChjaGlsZE5vZGVJbmRleCA8IGNoaWxkTm9kZUNvdW50KSB7XHJcbiAgICAgICAgICAgIGNoaWxkTm9kZXNBcnIucHVzaCh0bXBFbC5jaGlsZE5vZGVzW2NoaWxkTm9kZUluZGV4XSk7XHJcbiAgICAgICAgICAgIGNoaWxkTm9kZUluZGV4ICs9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gY2hpbGROb2Rlc0Fyci5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcclxuICAgICAgICAgICAgbm9kZSA9IGNoaWxkTm9kZXNBcnJbal07XHJcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4yID0gaW1hZ2VzLmxlbmd0aDsgayA8IGxlbjI7IGsrKykge1xyXG4gICAgICAgICAgICBpbWFnZSA9IGltYWdlc1trXTtcclxuICAgICAgICAgICAgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgICAgIGltYWdlT2JqID0gaW1hZ2UuaW1hZ2VzW3RoaXMub3B0aW9ucy5yZXNvbHV0aW9uXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbWFnZU9iaiAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICBlTXNnID0gXCJObyBpbWFnZSBmb3VuZCBmb3IgcmVzb2x1dGlvbjogXCIgKyB0aGlzLm9wdGlvbnMucmVzb2x1dGlvbiArIFwiLlwiO1xyXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlTXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbWFnZVVybCA9IGltYWdlT2JqLnVybDtcclxuICAgICAgICAgICAgaHR0cFByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID49IDA7XHJcbiAgICAgICAgICAgIGlmIChodHRwUHJvdG9jb2wgJiYgIXRoaXMub3B0aW9ucy51c2VIdHRwKSB7XHJcbiAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBpbWFnZVVybC5yZXBsYWNlKC9odHRwcz86XFwvXFwvLywgJy8vJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW1nLnNyYyA9IGltYWdlVXJsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxpbmtzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICAgIGFuY2hvci5ocmVmID0gaW1hZ2UubGluaztcclxuICAgICAgICAgICAgICBhbmNob3IuYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChhbmNob3IpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGltZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0RWwgPSB0aGlzLm9wdGlvbnMudGFyZ2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0RWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICB0YXJnZXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldEVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRhcmdldEVsID09IG51bGwpIHtcclxuICAgICAgICAgIGVNc2cgPSBcIk5vIGVsZW1lbnQgd2l0aCBpZD1cXFwiXCIgKyB0aGlzLm9wdGlvbnMudGFyZ2V0ICsgXCJcXFwiIG9uIHBhZ2UuXCI7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZU1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldEVsLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcclxuICAgICAgICBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xyXG4gICAgICAgIGhlYWRlci5yZW1vdmVDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5zdGFmZWVkLWZldGNoZXInKSk7XHJcbiAgICAgICAgaW5zdGFuY2VOYW1lID0gXCJpbnN0YWZlZWRDYWNoZVwiICsgdGhpcy51bmlxdWU7XHJcbiAgICAgICAgd2luZG93W2luc3RhbmNlTmFtZV0gPSB2b2lkIDA7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGRlbGV0ZSB3aW5kb3dbaW5zdGFuY2VOYW1lXTtcclxuICAgICAgICB9IGNhdGNoIChfZXJyb3IpIHtcclxuICAgICAgICAgIGUgPSBfZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICgodGhpcy5vcHRpb25zLmFmdGVyICE9IG51bGwpICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMuYWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuYWZ0ZXIuY2FsbCh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgSW5zdGFmZWVkLnByb3RvdHlwZS5fYnVpbGRVcmwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGJhc2UsIGVuZHBvaW50LCBmaW5hbDtcclxuICAgICAgYmFzZSA9IFwiaHR0cHM6Ly9hcGkuaW5zdGFncmFtLmNvbS92MVwiO1xyXG4gICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5nZXQpIHtcclxuICAgICAgICBjYXNlIFwicG9wdWxhclwiOlxyXG4gICAgICAgICAgZW5kcG9pbnQgPSBcIm1lZGlhL3BvcHVsYXJcIjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0YWdnZWRcIjpcclxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGFnIG5hbWUgc3BlY2lmaWVkLiBVc2UgdGhlICd0YWdOYW1lJyBvcHRpb24uXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZW5kcG9pbnQgPSBcInRhZ3MvXCIgKyB0aGlzLm9wdGlvbnMudGFnTmFtZSArIFwiL21lZGlhL3JlY2VudFwiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImxvY2F0aW9uXCI6XHJcbiAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5sb2NhdGlvbklkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGxvY2F0aW9uIHNwZWNpZmllZC4gVXNlIHRoZSAnbG9jYXRpb25JZCcgb3B0aW9uLlwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVuZHBvaW50ID0gXCJsb2NhdGlvbnMvXCIgKyB0aGlzLm9wdGlvbnMubG9jYXRpb25JZCArIFwiL21lZGlhL3JlY2VudFwiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInVzZXJcIjpcclxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnVzZXJJZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB1c2VyIHNwZWNpZmllZC4gVXNlIHRoZSAndXNlcklkJyBvcHRpb24uXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZW5kcG9pbnQgPSBcInVzZXJzL1wiICsgdGhpcy5vcHRpb25zLnVzZXJJZCArIFwiL21lZGlhL3JlY2VudFwiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3B0aW9uIGZvciBnZXQ6ICdcIiArIHRoaXMub3B0aW9ucy5nZXQgKyBcIicuXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGZpbmFsID0gYmFzZSArIFwiL1wiICsgZW5kcG9pbnQ7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW4gIT0gbnVsbCkge1xyXG4gICAgICAgIGZpbmFsICs9IFwiP2FjY2Vzc190b2tlbj1cIiArIHRoaXMub3B0aW9ucy5hY2Nlc3NUb2tlbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmaW5hbCArPSBcIj9jbGllbnRfaWQ9XCIgKyB0aGlzLm9wdGlvbnMuY2xpZW50SWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5saW1pdCAhPSBudWxsKSB7XHJcbiAgICAgICAgZmluYWwgKz0gXCImY291bnQ9XCIgKyB0aGlzLm9wdGlvbnMubGltaXQ7XHJcbiAgICAgIH1cclxuICAgICAgZmluYWwgKz0gXCImY2FsbGJhY2s9aW5zdGFmZWVkQ2FjaGVcIiArIHRoaXMudW5pcXVlICsgXCIucGFyc2VcIjtcclxuICAgICAgcmV0dXJuIGZpbmFsO1xyXG4gICAgfTtcclxuXHJcbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9nZW5LZXkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIFM0O1xyXG4gICAgICBTNCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAoKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBcIlwiICsgKFM0KCkpICsgKFM0KCkpICsgKFM0KCkpICsgKFM0KCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9tYWtlVGVtcGxhdGUgPSBmdW5jdGlvbih0ZW1wbGF0ZSwgZGF0YSkge1xyXG4gICAgICB2YXIgb3V0cHV0LCBwYXR0ZXJuLCByZWYsIHZhck5hbWUsIHZhclZhbHVlO1xyXG4gICAgICBwYXR0ZXJuID0gLyg/Olxce3syfSkoW1xcd1xcW1xcXVxcLl0rKSg/OlxcfXsyfSkvO1xyXG4gICAgICBvdXRwdXQgPSB0ZW1wbGF0ZTtcclxuICAgICAgd2hpbGUgKHBhdHRlcm4udGVzdChvdXRwdXQpKSB7XHJcbiAgICAgICAgdmFyTmFtZSA9IG91dHB1dC5tYXRjaChwYXR0ZXJuKVsxXTtcclxuICAgICAgICB2YXJWYWx1ZSA9IChyZWYgPSB0aGlzLl9nZXRPYmplY3RQcm9wZXJ0eShkYXRhLCB2YXJOYW1lKSkgIT0gbnVsbCA/IHJlZiA6ICcnO1xyXG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKHBhdHRlcm4sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIFwiXCIgKyB2YXJWYWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfTtcclxuXHJcbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9nZXRPYmplY3RQcm9wZXJ0eSA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcclxuICAgICAgdmFyIHBpZWNlLCBwaWVjZXM7XHJcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICcuJDEnKTtcclxuICAgICAgcGllY2VzID0gcHJvcGVydHkuc3BsaXQoJy4nKTtcclxuICAgICAgd2hpbGUgKHBpZWNlcy5sZW5ndGgpIHtcclxuICAgICAgICBwaWVjZSA9IHBpZWNlcy5zaGlmdCgpO1xyXG4gICAgICAgIGlmICgob2JqZWN0ICE9IG51bGwpICYmIHBpZWNlIGluIG9iamVjdCkge1xyXG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3BpZWNlXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICB9O1xyXG5cclxuICAgIEluc3RhZmVlZC5wcm90b3R5cGUuX3NvcnRCeSA9IGZ1bmN0aW9uKGRhdGEsIHByb3BlcnR5LCByZXZlcnNlKSB7XHJcbiAgICAgIHZhciBzb3J0ZXI7XHJcbiAgICAgIHNvcnRlciA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICB2YXIgdmFsdWVBLCB2YWx1ZUI7XHJcbiAgICAgICAgdmFsdWVBID0gdGhpcy5fZ2V0T2JqZWN0UHJvcGVydHkoYSwgcHJvcGVydHkpO1xyXG4gICAgICAgIHZhbHVlQiA9IHRoaXMuX2dldE9iamVjdFByb3BlcnR5KGIsIHByb3BlcnR5KTtcclxuICAgICAgICBpZiAocmV2ZXJzZSkge1xyXG4gICAgICAgICAgaWYgKHZhbHVlQSA+IHZhbHVlQikge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlQSA8IHZhbHVlQikge1xyXG4gICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGRhdGEuc29ydChzb3J0ZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfTtcclxuXHJcbiAgICBJbnN0YWZlZWQucHJvdG90eXBlLl9maWx0ZXIgPSBmdW5jdGlvbihpbWFnZXMsIGZpbHRlcikge1xyXG4gICAgICB2YXIgZmlsdGVyZWRJbWFnZXMsIGZuLCBpLCBpbWFnZSwgbGVuO1xyXG4gICAgICBmaWx0ZXJlZEltYWdlcyA9IFtdO1xyXG4gICAgICBmbiA9IGZ1bmN0aW9uKGltYWdlKSB7XHJcbiAgICAgICAgaWYgKGZpbHRlcihpbWFnZSkpIHtcclxuICAgICAgICAgIHJldHVybiBmaWx0ZXJlZEltYWdlcy5wdXNoKGltYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGltYWdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGltYWdlID0gaW1hZ2VzW2ldO1xyXG4gICAgICAgIGZuKGltYWdlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmlsdGVyZWRJbWFnZXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBJbnN0YWZlZWQ7XHJcblxyXG4gIH0pKCk7XHJcblxyXG4gIChmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgIHJldHVybiBkZWZpbmUoW10sIGZhY3RvcnkpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gcm9vdC5JbnN0YWZlZWQgPSBmYWN0b3J5KCk7XHJcbiAgICB9XHJcbiAgfSkodGhpcywgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gSW5zdGFmZWVkO1xyXG4gIH0pO1xyXG5cclxufSkuY2FsbCh0aGlzKTtcclxuIWZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjshZnVuY3Rpb24gbyhlLHQsbil7ZnVuY3Rpb24gYShzLGwpe2lmKCF0W3NdKXtpZighZVtzXSl7dmFyIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighbCYmaSlyZXR1cm4gaShzLCEwKTtpZihyKXJldHVybiByKHMsITApO3ZhciB1PW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcytcIidcIik7dGhyb3cgdS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLHV9dmFyIGM9dFtzXT17ZXhwb3J0czp7fX07ZVtzXVswXS5jYWxsKGMuZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgbj1lW3NdWzFdW3RdO3JldHVybiBhKG4/bjp0KX0sYyxjLmV4cG9ydHMsbyxlLHQsbil9cmV0dXJuIHRbc10uZXhwb3J0c31mb3IodmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxzPTA7czxuLmxlbmd0aDtzKyspYShuW3NdKTtyZXR1cm4gYX0oezE6W2Z1bmN0aW9uKG8sYSxyKXt2YXIgcz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbCxpLHUsYyxkPW8oXCIuL21vZHVsZXMvaGFuZGxlLWRvbVwiKSxmPW8oXCIuL21vZHVsZXMvdXRpbHNcIikscD1vKFwiLi9tb2R1bGVzL2hhbmRsZS1zd2FsLWRvbVwiKSxtPW8oXCIuL21vZHVsZXMvaGFuZGxlLWNsaWNrXCIpLHY9byhcIi4vbW9kdWxlcy9oYW5kbGUta2V5XCIpLHk9cyh2KSxoPW8oXCIuL21vZHVsZXMvZGVmYXVsdC1wYXJhbXNcIiksYj1zKGgpLGc9byhcIi4vbW9kdWxlcy9zZXQtcGFyYW1zXCIpLHc9cyhnKTtyW1wiZGVmYXVsdFwiXT11PWM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBvKGUpe3ZhciB0PWE7cmV0dXJuIHRbZV09PT1uP2JbXCJkZWZhdWx0XCJdW2VdOnRbZV19dmFyIGE9YXJndW1lbnRzWzBdO2lmKGQuYWRkQ2xhc3ModC5ib2R5LFwic3RvcC1zY3JvbGxpbmdcIikscC5yZXNldElucHV0KCksYT09PW4pcmV0dXJuIGYubG9nU3RyKFwiU3dlZXRBbGVydCBleHBlY3RzIGF0IGxlYXN0IDEgYXR0cmlidXRlIVwiKSwhMTt2YXIgcj1mLmV4dGVuZCh7fSxiW1wiZGVmYXVsdFwiXSk7c3dpdGNoKHR5cGVvZiBhKXtjYXNlXCJzdHJpbmdcIjpyLnRpdGxlPWEsci50ZXh0PWFyZ3VtZW50c1sxXXx8XCJcIixyLnR5cGU9YXJndW1lbnRzWzJdfHxcIlwiO2JyZWFrO2Nhc2VcIm9iamVjdFwiOmlmKGEudGl0bGU9PT1uKXJldHVybiBmLmxvZ1N0cignTWlzc2luZyBcInRpdGxlXCIgYXJndW1lbnQhJyksITE7ci50aXRsZT1hLnRpdGxlO2Zvcih2YXIgcyBpbiBiW1wiZGVmYXVsdFwiXSlyW3NdPW8ocyk7ci5jb25maXJtQnV0dG9uVGV4dD1yLnNob3dDYW5jZWxCdXR0b24/XCJDb25maXJtXCI6YltcImRlZmF1bHRcIl0uY29uZmlybUJ1dHRvblRleHQsci5jb25maXJtQnV0dG9uVGV4dD1vKFwiY29uZmlybUJ1dHRvblRleHRcIiksci5kb25lRnVuY3Rpb249YXJndW1lbnRzWzFdfHxudWxsO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGYubG9nU3RyKCdVbmV4cGVjdGVkIHR5cGUgb2YgYXJndW1lbnQhIEV4cGVjdGVkIFwic3RyaW5nXCIgb3IgXCJvYmplY3RcIiwgZ290ICcrdHlwZW9mIGEpLCExfXdbXCJkZWZhdWx0XCJdKHIpLHAuZml4VmVydGljYWxQb3NpdGlvbigpLHAub3Blbk1vZGFsKGFyZ3VtZW50c1sxXSk7Zm9yKHZhciB1PXAuZ2V0TW9kYWwoKSx2PXUucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKSxoPVtcIm9uY2xpY2tcIixcIm9ubW91c2VvdmVyXCIsXCJvbm1vdXNlb3V0XCIsXCJvbm1vdXNlZG93blwiLFwib25tb3VzZXVwXCIsXCJvbmZvY3VzXCJdLGc9ZnVuY3Rpb24oZSl7cmV0dXJuIG0uaGFuZGxlQnV0dG9uKGUscix1KX0sQz0wO0M8di5sZW5ndGg7QysrKWZvcih2YXIgUz0wO1M8aC5sZW5ndGg7UysrKXt2YXIgeD1oW1NdO3ZbQ11beF09Z31wLmdldE92ZXJsYXkoKS5vbmNsaWNrPWcsbD1lLm9ua2V5ZG93bjt2YXIgaz1mdW5jdGlvbihlKXtyZXR1cm4geVtcImRlZmF1bHRcIl0oZSxyLHUpfTtlLm9ua2V5ZG93bj1rLGUub25mb2N1cz1mdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpIT09biYmKGkuZm9jdXMoKSxpPW4pfSwwKX0sYy5lbmFibGVCdXR0b25zKCl9LHUuc2V0RGVmYXVsdHM9Yy5zZXREZWZhdWx0cz1mdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJ1c2VyUGFyYW1zIGlzIHJlcXVpcmVkXCIpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcInVzZXJQYXJhbXMgaGFzIHRvIGJlIGEgb2JqZWN0XCIpO2YuZXh0ZW5kKGJbXCJkZWZhdWx0XCJdLGUpfSx1LmNsb3NlPWMuY2xvc2U9ZnVuY3Rpb24oKXt2YXIgbz1wLmdldE1vZGFsKCk7ZC5mYWRlT3V0KHAuZ2V0T3ZlcmxheSgpLDUpLGQuZmFkZU91dChvLDUpLGQucmVtb3ZlQ2xhc3MobyxcInNob3dTd2VldEFsZXJ0XCIpLGQuYWRkQ2xhc3MobyxcImhpZGVTd2VldEFsZXJ0XCIpLGQucmVtb3ZlQ2xhc3MobyxcInZpc2libGVcIik7dmFyIGE9by5xdWVyeVNlbGVjdG9yKFwiLnNhLWljb24uc2Etc3VjY2Vzc1wiKTtkLnJlbW92ZUNsYXNzKGEsXCJhbmltYXRlXCIpLGQucmVtb3ZlQ2xhc3MoYS5xdWVyeVNlbGVjdG9yKFwiLnNhLXRpcFwiKSxcImFuaW1hdGVTdWNjZXNzVGlwXCIpLGQucmVtb3ZlQ2xhc3MoYS5xdWVyeVNlbGVjdG9yKFwiLnNhLWxvbmdcIiksXCJhbmltYXRlU3VjY2Vzc0xvbmdcIik7dmFyIHI9by5xdWVyeVNlbGVjdG9yKFwiLnNhLWljb24uc2EtZXJyb3JcIik7ZC5yZW1vdmVDbGFzcyhyLFwiYW5pbWF0ZUVycm9ySWNvblwiKSxkLnJlbW92ZUNsYXNzKHIucXVlcnlTZWxlY3RvcihcIi5zYS14LW1hcmtcIiksXCJhbmltYXRlWE1hcmtcIik7dmFyIHM9by5xdWVyeVNlbGVjdG9yKFwiLnNhLWljb24uc2Etd2FybmluZ1wiKTtyZXR1cm4gZC5yZW1vdmVDbGFzcyhzLFwicHVsc2VXYXJuaW5nXCIpLGQucmVtb3ZlQ2xhc3Mocy5xdWVyeVNlbGVjdG9yKFwiLnNhLWJvZHlcIiksXCJwdWxzZVdhcm5pbmdJbnNcIiksZC5yZW1vdmVDbGFzcyhzLnF1ZXJ5U2VsZWN0b3IoXCIuc2EtZG90XCIpLFwicHVsc2VXYXJuaW5nSW5zXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgZT1vLmdldEF0dHJpYnV0ZShcImRhdGEtY3VzdG9tLWNsYXNzXCIpO2QucmVtb3ZlQ2xhc3MobyxlKX0sMzAwKSxkLnJlbW92ZUNsYXNzKHQuYm9keSxcInN0b3Atc2Nyb2xsaW5nXCIpLGUub25rZXlkb3duPWwsZS5wcmV2aW91c0FjdGl2ZUVsZW1lbnQmJmUucHJldmlvdXNBY3RpdmVFbGVtZW50LmZvY3VzKCksaT1uLGNsZWFyVGltZW91dChvLnRpbWVvdXQpLCEwfSx1LnNob3dJbnB1dEVycm9yPWMuc2hvd0lucHV0RXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9cC5nZXRNb2RhbCgpLG49dC5xdWVyeVNlbGVjdG9yKFwiLnNhLWlucHV0LWVycm9yXCIpO2QuYWRkQ2xhc3MobixcInNob3dcIik7dmFyIG89dC5xdWVyeVNlbGVjdG9yKFwiLnNhLWVycm9yLWNvbnRhaW5lclwiKTtkLmFkZENsYXNzKG8sXCJzaG93XCIpLG8ucXVlcnlTZWxlY3RvcihcInBcIikuaW5uZXJIVE1MPWUsc2V0VGltZW91dChmdW5jdGlvbigpe3UuZW5hYmxlQnV0dG9ucygpfSwxKSx0LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5mb2N1cygpfSx1LnJlc2V0SW5wdXRFcnJvcj1jLnJlc2V0SW5wdXRFcnJvcj1mdW5jdGlvbihlKXtpZihlJiYxMz09PWUua2V5Q29kZSlyZXR1cm4hMTt2YXIgdD1wLmdldE1vZGFsKCksbj10LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtaW5wdXQtZXJyb3JcIik7ZC5yZW1vdmVDbGFzcyhuLFwic2hvd1wiKTt2YXIgbz10LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtZXJyb3ItY29udGFpbmVyXCIpO2QucmVtb3ZlQ2xhc3MobyxcInNob3dcIil9LHUuZGlzYWJsZUJ1dHRvbnM9Yy5kaXNhYmxlQnV0dG9ucz1mdW5jdGlvbigpe3ZhciBlPXAuZ2V0TW9kYWwoKSx0PWUucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jb25maXJtXCIpLG49ZS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNhbmNlbFwiKTt0LmRpc2FibGVkPSEwLG4uZGlzYWJsZWQ9ITB9LHUuZW5hYmxlQnV0dG9ucz1jLmVuYWJsZUJ1dHRvbnM9ZnVuY3Rpb24oKXt2YXIgZT1wLmdldE1vZGFsKCksdD1lLnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uY29uZmlybVwiKSxuPWUucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jYW5jZWxcIik7dC5kaXNhYmxlZD0hMSxuLmRpc2FibGVkPSExfSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZT9lLnN3ZWV0QWxlcnQ9ZS5zd2FsPXU6Zi5sb2dTdHIoXCJTd2VldEFsZXJ0IGlzIGEgZnJvbnRlbmQgbW9kdWxlIVwiKSxhLmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcIi4vbW9kdWxlcy9kZWZhdWx0LXBhcmFtc1wiOjIsXCIuL21vZHVsZXMvaGFuZGxlLWNsaWNrXCI6MyxcIi4vbW9kdWxlcy9oYW5kbGUtZG9tXCI6NCxcIi4vbW9kdWxlcy9oYW5kbGUta2V5XCI6NSxcIi4vbW9kdWxlcy9oYW5kbGUtc3dhbC1kb21cIjo2LFwiLi9tb2R1bGVzL3NldC1wYXJhbXNcIjo4LFwiLi9tb2R1bGVzL3V0aWxzXCI6OX1dLDI6W2Z1bmN0aW9uKGUsdCxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz17dGl0bGU6XCJcIix0ZXh0OlwiXCIsdHlwZTpudWxsLGFsbG93T3V0c2lkZUNsaWNrOiExLHNob3dDb25maXJtQnV0dG9uOiEwLHNob3dDYW5jZWxCdXR0b246ITEsY2xvc2VPbkNvbmZpcm06ITAsY2xvc2VPbkNhbmNlbDohMCxjb25maXJtQnV0dG9uVGV4dDpcIk9LXCIsY29uZmlybUJ1dHRvbkNvbG9yOlwiIzhDRDRGNVwiLGNhbmNlbEJ1dHRvblRleHQ6XCJDYW5jZWxcIixpbWFnZVVybDpudWxsLGltYWdlU2l6ZTpudWxsLHRpbWVyOm51bGwsY3VzdG9tQ2xhc3M6XCJcIixodG1sOiExLGFuaW1hdGlvbjohMCxhbGxvd0VzY2FwZUtleTohMCxpbnB1dFR5cGU6XCJ0ZXh0XCIsaW5wdXRQbGFjZWhvbGRlcjpcIlwiLGlucHV0VmFsdWU6XCJcIixzaG93TG9hZGVyT25Db25maXJtOiExfTtuW1wiZGVmYXVsdFwiXT1vLHQuZXhwb3J0cz1uW1wiZGVmYXVsdFwiXX0se31dLDM6W2Z1bmN0aW9uKHQsbixvKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT10KFwiLi91dGlsc1wiKSxyPSh0KFwiLi9oYW5kbGUtc3dhbC1kb21cIiksdChcIi4vaGFuZGxlLWRvbVwiKSkscz1mdW5jdGlvbih0LG4sbyl7ZnVuY3Rpb24gcyhlKXttJiZuLmNvbmZpcm1CdXR0b25Db2xvciYmKHAuc3R5bGUuYmFja2dyb3VuZENvbG9yPWUpfXZhciB1LGMsZCxmPXR8fGUuZXZlbnQscD1mLnRhcmdldHx8Zi5zcmNFbGVtZW50LG09LTEhPT1wLmNsYXNzTmFtZS5pbmRleE9mKFwiY29uZmlybVwiKSx2PS0xIT09cC5jbGFzc05hbWUuaW5kZXhPZihcInN3ZWV0LW92ZXJsYXlcIikseT1yLmhhc0NsYXNzKG8sXCJ2aXNpYmxlXCIpLGg9bi5kb25lRnVuY3Rpb24mJlwidHJ1ZVwiPT09by5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1kb25lLWZ1bmN0aW9uXCIpO3N3aXRjaChtJiZuLmNvbmZpcm1CdXR0b25Db2xvciYmKHU9bi5jb25maXJtQnV0dG9uQ29sb3IsYz1hLmNvbG9yTHVtaW5hbmNlKHUsLS4wNCksZD1hLmNvbG9yTHVtaW5hbmNlKHUsLS4xNCkpLGYudHlwZSl7Y2FzZVwibW91c2VvdmVyXCI6cyhjKTticmVhaztjYXNlXCJtb3VzZW91dFwiOnModSk7YnJlYWs7Y2FzZVwibW91c2Vkb3duXCI6cyhkKTticmVhaztjYXNlXCJtb3VzZXVwXCI6cyhjKTticmVhaztjYXNlXCJmb2N1c1wiOnZhciBiPW8ucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jb25maXJtXCIpLGc9by5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNhbmNlbFwiKTttP2cuc3R5bGUuYm94U2hhZG93PVwibm9uZVwiOmIuc3R5bGUuYm94U2hhZG93PVwibm9uZVwiO2JyZWFrO2Nhc2VcImNsaWNrXCI6dmFyIHc9bz09PXAsQz1yLmlzRGVzY2VuZGFudChvLHApO2lmKCF3JiYhQyYmeSYmIW4uYWxsb3dPdXRzaWRlQ2xpY2spYnJlYWs7bSYmaCYmeT9sKG8sbik6aCYmeXx8dj9pKG8sbik6ci5pc0Rlc2NlbmRhbnQobyxwKSYmXCJCVVRUT05cIj09PXAudGFnTmFtZSYmc3dlZXRBbGVydC5jbG9zZSgpfX0sbD1mdW5jdGlvbihlLHQpe3ZhciBuPSEwO3IuaGFzQ2xhc3MoZSxcInNob3ctaW5wdXRcIikmJihuPWUucXVlcnlTZWxlY3RvcihcImlucHV0XCIpLnZhbHVlLG58fChuPVwiXCIpKSx0LmRvbmVGdW5jdGlvbihuKSx0LmNsb3NlT25Db25maXJtJiZzd2VldEFsZXJ0LmNsb3NlKCksdC5zaG93TG9hZGVyT25Db25maXJtJiZzd2VldEFsZXJ0LmRpc2FibGVCdXR0b25zKCl9LGk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1TdHJpbmcodC5kb25lRnVuY3Rpb24pLnJlcGxhY2UoL1xccy9nLFwiXCIpLG89XCJmdW5jdGlvbihcIj09PW4uc3Vic3RyaW5nKDAsOSkmJlwiKVwiIT09bi5zdWJzdHJpbmcoOSwxMCk7byYmdC5kb25lRnVuY3Rpb24oITEpLHQuY2xvc2VPbkNhbmNlbCYmc3dlZXRBbGVydC5jbG9zZSgpfTtvW1wiZGVmYXVsdFwiXT17aGFuZGxlQnV0dG9uOnMsaGFuZGxlQ29uZmlybTpsLGhhbmRsZUNhbmNlbDppfSxuLmV4cG9ydHM9b1tcImRlZmF1bHRcIl19LHtcIi4vaGFuZGxlLWRvbVwiOjQsXCIuL2hhbmRsZS1zd2FsLWRvbVwiOjYsXCIuL3V0aWxzXCI6OX1dLDQ6W2Z1bmN0aW9uKG4sbyxhKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUmVnRXhwKFwiIFwiK3QrXCIgXCIpLnRlc3QoXCIgXCIrZS5jbGFzc05hbWUrXCIgXCIpfSxzPWZ1bmN0aW9uKGUsdCl7cihlLHQpfHwoZS5jbGFzc05hbWUrPVwiIFwiK3QpfSxsPWZ1bmN0aW9uKGUsdCl7dmFyIG49XCIgXCIrZS5jbGFzc05hbWUucmVwbGFjZSgvW1xcdFxcclxcbl0vZyxcIiBcIikrXCIgXCI7aWYocihlLHQpKXtmb3IoO24uaW5kZXhPZihcIiBcIit0K1wiIFwiKT49MDspbj1uLnJlcGxhY2UoXCIgXCIrdCtcIiBcIixcIiBcIik7ZS5jbGFzc05hbWU9bi5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpfX0saT1mdW5jdGlvbihlKXt2YXIgbj10LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIG4uYXBwZW5kQ2hpbGQodC5jcmVhdGVUZXh0Tm9kZShlKSksbi5pbm5lckhUTUx9LHU9ZnVuY3Rpb24oZSl7ZS5zdHlsZS5vcGFjaXR5PVwiXCIsZS5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIn0sYz1mdW5jdGlvbihlKXtpZihlJiYhZS5sZW5ndGgpcmV0dXJuIHUoZSk7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDsrK3QpdShlW3RdKX0sZD1mdW5jdGlvbihlKXtlLnN0eWxlLm9wYWNpdHk9XCJcIixlLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9LGY9ZnVuY3Rpb24oZSl7aWYoZSYmIWUubGVuZ3RoKXJldHVybiBkKGUpO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7Kyt0KWQoZVt0XSl9LHA9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5wYXJlbnROb2RlO251bGwhPT1uOyl7aWYobj09PWUpcmV0dXJuITA7bj1uLnBhcmVudE5vZGV9cmV0dXJuITF9LG09ZnVuY3Rpb24oZSl7ZS5zdHlsZS5sZWZ0PVwiLTk5OTlweFwiLGUuc3R5bGUuZGlzcGxheT1cImJsb2NrXCI7dmFyIHQsbj1lLmNsaWVudEhlaWdodDtyZXR1cm4gdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2V0Q29tcHV0ZWRTdHlsZT9wYXJzZUludChnZXRDb21wdXRlZFN0eWxlKGUpLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXRvcFwiKSwxMCk6cGFyc2VJbnQoZS5jdXJyZW50U3R5bGUucGFkZGluZyksZS5zdHlsZS5sZWZ0PVwiXCIsZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLFwiLVwiK3BhcnNlSW50KChuK3QpLzIpK1wicHhcIn0sdj1mdW5jdGlvbihlLHQpe2lmKCtlLnN0eWxlLm9wYWNpdHk8MSl7dD10fHwxNixlLnN0eWxlLm9wYWNpdHk9MCxlLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiO3ZhciBuPStuZXcgRGF0ZSxvPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZS50b1N0cmluZygpfSx0fShmdW5jdGlvbigpe2Uuc3R5bGUub3BhY2l0eT0rZS5zdHlsZS5vcGFjaXR5KyhuZXcgRGF0ZS1uKS8xMDAsbj0rbmV3IERhdGUsK2Uuc3R5bGUub3BhY2l0eTwxJiZzZXRUaW1lb3V0KG8sdCl9KTtvKCl9ZS5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIn0seT1mdW5jdGlvbihlLHQpe3Q9dHx8MTYsZS5zdHlsZS5vcGFjaXR5PTE7dmFyIG49K25ldyBEYXRlLG89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBlLnRvU3RyaW5nKCl9LHR9KGZ1bmN0aW9uKCl7ZS5zdHlsZS5vcGFjaXR5PStlLnN0eWxlLm9wYWNpdHktKG5ldyBEYXRlLW4pLzEwMCxuPStuZXcgRGF0ZSwrZS5zdHlsZS5vcGFjaXR5PjA/c2V0VGltZW91dChvLHQpOmUuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0pO28oKX0saD1mdW5jdGlvbihuKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBNb3VzZUV2ZW50KXt2YXIgbz1uZXcgTW91c2VFdmVudChcImNsaWNrXCIse3ZpZXc6ZSxidWJibGVzOiExLGNhbmNlbGFibGU6ITB9KTtuLmRpc3BhdGNoRXZlbnQobyl9ZWxzZSBpZih0LmNyZWF0ZUV2ZW50KXt2YXIgYT10LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7YS5pbml0RXZlbnQoXCJjbGlja1wiLCExLCExKSxuLmRpc3BhdGNoRXZlbnQoYSl9ZWxzZSB0LmNyZWF0ZUV2ZW50T2JqZWN0P24uZmlyZUV2ZW50KFwib25jbGlja1wiKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLm9uY2xpY2smJm4ub25jbGljaygpfSxiPWZ1bmN0aW9uKHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQuc3RvcFByb3BhZ2F0aW9uPyh0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSk6ZS5ldmVudCYmZS5ldmVudC5oYXNPd25Qcm9wZXJ0eShcImNhbmNlbEJ1YmJsZVwiKSYmKGUuZXZlbnQuY2FuY2VsQnViYmxlPSEwKX07YS5oYXNDbGFzcz1yLGEuYWRkQ2xhc3M9cyxhLnJlbW92ZUNsYXNzPWwsYS5lc2NhcGVIdG1sPWksYS5fc2hvdz11LGEuc2hvdz1jLGEuX2hpZGU9ZCxhLmhpZGU9ZixhLmlzRGVzY2VuZGFudD1wLGEuZ2V0VG9wTWFyZ2luPW0sYS5mYWRlSW49dixhLmZhZGVPdXQ9eSxhLmZpcmVDbGljaz1oLGEuc3RvcEV2ZW50UHJvcGFnYXRpb249Yn0se31dLDU6W2Z1bmN0aW9uKHQsbyxhKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj10KFwiLi9oYW5kbGUtZG9tXCIpLHM9dChcIi4vaGFuZGxlLXN3YWwtZG9tXCIpLGw9ZnVuY3Rpb24odCxvLGEpe3ZhciBsPXR8fGUuZXZlbnQsaT1sLmtleUNvZGV8fGwud2hpY2gsdT1hLnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uY29uZmlybVwiKSxjPWEucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jYW5jZWxcIiksZD1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b25bdGFiaW5kZXhdXCIpO2lmKC0xIT09WzksMTMsMzIsMjddLmluZGV4T2YoaSkpe2Zvcih2YXIgZj1sLnRhcmdldHx8bC5zcmNFbGVtZW50LHA9LTEsbT0wO208ZC5sZW5ndGg7bSsrKWlmKGY9PT1kW21dKXtwPW07YnJlYWt9OT09PWk/KGY9LTE9PT1wP3U6cD09PWQubGVuZ3RoLTE/ZFswXTpkW3ArMV0sci5zdG9wRXZlbnRQcm9wYWdhdGlvbihsKSxmLmZvY3VzKCksby5jb25maXJtQnV0dG9uQ29sb3ImJnMuc2V0Rm9jdXNTdHlsZShmLG8uY29uZmlybUJ1dHRvbkNvbG9yKSk6MTM9PT1pPyhcIklOUFVUXCI9PT1mLnRhZ05hbWUmJihmPXUsdS5mb2N1cygpKSxmPS0xPT09cD91Om4pOjI3PT09aSYmby5hbGxvd0VzY2FwZUtleT09PSEwPyhmPWMsci5maXJlQ2xpY2soZixsKSk6Zj1ufX07YVtcImRlZmF1bHRcIl09bCxvLmV4cG9ydHM9YVtcImRlZmF1bHRcIl19LHtcIi4vaGFuZGxlLWRvbVwiOjQsXCIuL2hhbmRsZS1zd2FsLWRvbVwiOjZ9XSw2OltmdW5jdGlvbihuLG8sYSl7dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9bihcIi4vdXRpbHNcIiksbD1uKFwiLi9oYW5kbGUtZG9tXCIpLGk9bihcIi4vZGVmYXVsdC1wYXJhbXNcIiksdT1yKGkpLGM9bihcIi4vaW5qZWN0ZWQtaHRtbFwiKSxkPXIoYyksZj1cIi5zd2VldC1hbGVydFwiLHA9XCIuc3dlZXQtb3ZlcmxheVwiLG09ZnVuY3Rpb24oKXt2YXIgZT10LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKGUuaW5uZXJIVE1MPWRbXCJkZWZhdWx0XCJdO2UuZmlyc3RDaGlsZDspdC5ib2R5LmFwcGVuZENoaWxkKGUuZmlyc3RDaGlsZCl9LHY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBlLnRvU3RyaW5nKCl9LHR9KGZ1bmN0aW9uKCl7dmFyIGU9dC5xdWVyeVNlbGVjdG9yKGYpO3JldHVybiBlfHwobSgpLGU9digpKSxlfSkseT1mdW5jdGlvbigpe3ZhciBlPXYoKTtyZXR1cm4gZT9lLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTp2b2lkIDB9LGg9ZnVuY3Rpb24oKXtyZXR1cm4gdC5xdWVyeVNlbGVjdG9yKHApfSxiPWZ1bmN0aW9uKGUsdCl7dmFyIG49cy5oZXhUb1JnYih0KTtlLnN0eWxlLmJveFNoYWRvdz1cIjAgMCAycHggcmdiYShcIituK1wiLCAwLjgpLCBpbnNldCAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAwLjA1KVwifSxnPWZ1bmN0aW9uKG4pe3ZhciBvPXYoKTtsLmZhZGVJbihoKCksMTApLGwuc2hvdyhvKSxsLmFkZENsYXNzKG8sXCJzaG93U3dlZXRBbGVydFwiKSxsLnJlbW92ZUNsYXNzKG8sXCJoaWRlU3dlZXRBbGVydFwiKSxlLnByZXZpb3VzQWN0aXZlRWxlbWVudD10LmFjdGl2ZUVsZW1lbnQ7dmFyIGE9by5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNvbmZpcm1cIik7YS5mb2N1cygpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLmFkZENsYXNzKG8sXCJ2aXNpYmxlXCIpfSw1MDApO3ZhciByPW8uZ2V0QXR0cmlidXRlKFwiZGF0YS10aW1lclwiKTtpZihcIm51bGxcIiE9PXImJlwiXCIhPT1yKXt2YXIgcz1uO28udGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGU9KHN8fG51bGwpJiZcInRydWVcIj09PW8uZ2V0QXR0cmlidXRlKFwiZGF0YS1oYXMtZG9uZS1mdW5jdGlvblwiKTtlP3MobnVsbCk6c3dlZXRBbGVydC5jbG9zZSgpfSxyKX19LHc9ZnVuY3Rpb24oKXt2YXIgZT12KCksdD15KCk7bC5yZW1vdmVDbGFzcyhlLFwic2hvdy1pbnB1dFwiKSx0LnZhbHVlPXVbXCJkZWZhdWx0XCJdLmlucHV0VmFsdWUsdC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsdVtcImRlZmF1bHRcIl0uaW5wdXRUeXBlKSx0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsdVtcImRlZmF1bHRcIl0uaW5wdXRQbGFjZWhvbGRlciksQygpfSxDPWZ1bmN0aW9uKGUpe2lmKGUmJjEzPT09ZS5rZXlDb2RlKXJldHVybiExO3ZhciB0PXYoKSxuPXQucXVlcnlTZWxlY3RvcihcIi5zYS1pbnB1dC1lcnJvclwiKTtsLnJlbW92ZUNsYXNzKG4sXCJzaG93XCIpO3ZhciBvPXQucXVlcnlTZWxlY3RvcihcIi5zYS1lcnJvci1jb250YWluZXJcIik7bC5yZW1vdmVDbGFzcyhvLFwic2hvd1wiKX0sUz1mdW5jdGlvbigpe3ZhciBlPXYoKTtlLnN0eWxlLm1hcmdpblRvcD1sLmdldFRvcE1hcmdpbih2KCkpfTthLnN3ZWV0QWxlcnRJbml0aWFsaXplPW0sYS5nZXRNb2RhbD12LGEuZ2V0T3ZlcmxheT1oLGEuZ2V0SW5wdXQ9eSxhLnNldEZvY3VzU3R5bGU9YixhLm9wZW5Nb2RhbD1nLGEucmVzZXRJbnB1dD13LGEucmVzZXRJbnB1dEVycm9yPUMsYS5maXhWZXJ0aWNhbFBvc2l0aW9uPVN9LHtcIi4vZGVmYXVsdC1wYXJhbXNcIjoyLFwiLi9oYW5kbGUtZG9tXCI6NCxcIi4vaW5qZWN0ZWQtaHRtbFwiOjcsXCIuL3V0aWxzXCI6OX1dLDc6W2Z1bmN0aW9uKGUsdCxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz0nPGRpdiBjbGFzcz1cInN3ZWV0LW92ZXJsYXlcIiB0YWJJbmRleD1cIi0xXCI+PC9kaXY+PGRpdiBjbGFzcz1cInN3ZWV0LWFsZXJ0XCI+PGRpdiBjbGFzcz1cInNhLWljb24gc2EtZXJyb3JcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cInNhLXgtbWFya1wiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzYS1saW5lIHNhLWxlZnRcIj48L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cInNhLWxpbmUgc2EtcmlnaHRcIj48L3NwYW4+XFxuICAgICAgPC9zcGFuPlxcbiAgICA8L2Rpdj48ZGl2IGNsYXNzPVwic2EtaWNvbiBzYS13YXJuaW5nXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJzYS1ib2R5XCI+PC9zcGFuPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwic2EtZG90XCI+PC9zcGFuPlxcbiAgICA8L2Rpdj48ZGl2IGNsYXNzPVwic2EtaWNvbiBzYS1pbmZvXCI+PC9kaXY+PGRpdiBjbGFzcz1cInNhLWljb24gc2Etc3VjY2Vzc1wiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwic2EtbGluZSBzYS10aXBcIj48L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJzYS1saW5lIHNhLWxvbmdcIj48L3NwYW4+XFxuXFxuICAgICAgPGRpdiBjbGFzcz1cInNhLXBsYWNlaG9sZGVyXCI+PC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cInNhLWZpeFwiPjwvZGl2PlxcbiAgICA8L2Rpdj48ZGl2IGNsYXNzPVwic2EtaWNvbiBzYS1jdXN0b21cIj48L2Rpdj48aDI+VGl0bGU8L2gyPlxcbiAgICA8cD5UZXh0PC9wPlxcbiAgICA8ZmllbGRzZXQ+XFxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdGFiSW5kZXg9XCIzXCIgLz5cXG4gICAgICA8ZGl2IGNsYXNzPVwic2EtaW5wdXQtZXJyb3JcIj48L2Rpdj5cXG4gICAgPC9maWVsZHNldD48ZGl2IGNsYXNzPVwic2EtZXJyb3ItY29udGFpbmVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImljb25cIj4hPC9kaXY+XFxuICAgICAgPHA+Tm90IHZhbGlkITwvcD5cXG4gICAgPC9kaXY+PGRpdiBjbGFzcz1cInNhLWJ1dHRvbi1jb250YWluZXJcIj5cXG4gICAgICA8YnV0dG9uIGNsYXNzPVwiY2FuY2VsXCIgdGFiSW5kZXg9XCIyXCI+Q2FuY2VsPC9idXR0b24+XFxuICAgICAgPGRpdiBjbGFzcz1cInNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lclwiPlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNvbmZpcm1cIiB0YWJJbmRleD1cIjFcIj5PSzwvYnV0dG9uPjxkaXYgY2xhc3M9XCJsYS1iYWxsLWZhbGxcIj5cXG4gICAgICAgICAgPGRpdj48L2Rpdj5cXG4gICAgICAgICAgPGRpdj48L2Rpdj5cXG4gICAgICAgICAgPGRpdj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj48L2Rpdj4nO25bXCJkZWZhdWx0XCJdPW8sdC5leHBvcnRzPW5bXCJkZWZhdWx0XCJdfSx7fV0sODpbZnVuY3Rpb24oZSx0LG8pe09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWUoXCIuL3V0aWxzXCIpLHI9ZShcIi4vaGFuZGxlLXN3YWwtZG9tXCIpLHM9ZShcIi4vaGFuZGxlLWRvbVwiKSxsPVtcImVycm9yXCIsXCJ3YXJuaW5nXCIsXCJpbmZvXCIsXCJzdWNjZXNzXCIsXCJpbnB1dFwiLFwicHJvbXB0XCJdLGk9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5nZXRNb2RhbCgpLG89dC5xdWVyeVNlbGVjdG9yKFwiaDJcIiksaT10LnF1ZXJ5U2VsZWN0b3IoXCJwXCIpLHU9dC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmNhbmNlbFwiKSxjPXQucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5jb25maXJtXCIpO2lmKG8uaW5uZXJIVE1MPWUuaHRtbD9lLnRpdGxlOnMuZXNjYXBlSHRtbChlLnRpdGxlKS5zcGxpdChcIlxcblwiKS5qb2luKFwiPGJyPlwiKSxpLmlubmVySFRNTD1lLmh0bWw/ZS50ZXh0OnMuZXNjYXBlSHRtbChlLnRleHR8fFwiXCIpLnNwbGl0KFwiXFxuXCIpLmpvaW4oXCI8YnI+XCIpLGUudGV4dCYmcy5zaG93KGkpLGUuY3VzdG9tQ2xhc3Mpcy5hZGRDbGFzcyh0LGUuY3VzdG9tQ2xhc3MpLHQuc2V0QXR0cmlidXRlKFwiZGF0YS1jdXN0b20tY2xhc3NcIixlLmN1c3RvbUNsYXNzKTtlbHNle3ZhciBkPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jdXN0b20tY2xhc3NcIik7cy5yZW1vdmVDbGFzcyh0LGQpLHQuc2V0QXR0cmlidXRlKFwiZGF0YS1jdXN0b20tY2xhc3NcIixcIlwiKX1pZihzLmhpZGUodC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNhLWljb25cIikpLGUudHlwZSYmIWEuaXNJRTgoKSl7dmFyIGY9ZnVuY3Rpb24oKXtmb3IodmFyIG89ITEsYT0wO2E8bC5sZW5ndGg7YSsrKWlmKGUudHlwZT09PWxbYV0pe289ITA7YnJlYWt9aWYoIW8pcmV0dXJuIGxvZ1N0cihcIlVua25vd24gYWxlcnQgdHlwZTogXCIrZS50eXBlKSx7djohMX07dmFyIGk9W1wic3VjY2Vzc1wiLFwiZXJyb3JcIixcIndhcm5pbmdcIixcImluZm9cIl0sdT1uOy0xIT09aS5pbmRleE9mKGUudHlwZSkmJih1PXQucXVlcnlTZWxlY3RvcihcIi5zYS1pY29uLnNhLVwiK2UudHlwZSkscy5zaG93KHUpKTt2YXIgYz1yLmdldElucHV0KCk7c3dpdGNoKGUudHlwZSl7Y2FzZVwic3VjY2Vzc1wiOnMuYWRkQ2xhc3ModSxcImFuaW1hdGVcIikscy5hZGRDbGFzcyh1LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtdGlwXCIpLFwiYW5pbWF0ZVN1Y2Nlc3NUaXBcIikscy5hZGRDbGFzcyh1LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtbG9uZ1wiKSxcImFuaW1hdGVTdWNjZXNzTG9uZ1wiKTticmVhaztjYXNlXCJlcnJvclwiOnMuYWRkQ2xhc3ModSxcImFuaW1hdGVFcnJvckljb25cIikscy5hZGRDbGFzcyh1LnF1ZXJ5U2VsZWN0b3IoXCIuc2EteC1tYXJrXCIpLFwiYW5pbWF0ZVhNYXJrXCIpO2JyZWFrO2Nhc2VcIndhcm5pbmdcIjpzLmFkZENsYXNzKHUsXCJwdWxzZVdhcm5pbmdcIikscy5hZGRDbGFzcyh1LnF1ZXJ5U2VsZWN0b3IoXCIuc2EtYm9keVwiKSxcInB1bHNlV2FybmluZ0luc1wiKSxzLmFkZENsYXNzKHUucXVlcnlTZWxlY3RvcihcIi5zYS1kb3RcIiksXCJwdWxzZVdhcm5pbmdJbnNcIik7YnJlYWs7Y2FzZVwiaW5wdXRcIjpjYXNlXCJwcm9tcHRcIjpjLnNldEF0dHJpYnV0ZShcInR5cGVcIixlLmlucHV0VHlwZSksYy52YWx1ZT1lLmlucHV0VmFsdWUsYy5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLGUuaW5wdXRQbGFjZWhvbGRlcikscy5hZGRDbGFzcyh0LFwic2hvdy1pbnB1dFwiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yy5mb2N1cygpLGMuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsc3dhbC5yZXNldElucHV0RXJyb3IpfSw0MDApfX0oKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZilyZXR1cm4gZi52fWlmKGUuaW1hZ2VVcmwpe3ZhciBwPXQucXVlcnlTZWxlY3RvcihcIi5zYS1pY29uLnNhLWN1c3RvbVwiKTtwLnN0eWxlLmJhY2tncm91bmRJbWFnZT1cInVybChcIitlLmltYWdlVXJsK1wiKVwiLHMuc2hvdyhwKTt2YXIgbT04MCx2PTgwO2lmKGUuaW1hZ2VTaXplKXt2YXIgeT1lLmltYWdlU2l6ZS50b1N0cmluZygpLnNwbGl0KFwieFwiKSxoPXlbMF0sYj15WzFdO2gmJmI/KG09aCx2PWIpOmxvZ1N0cihcIlBhcmFtZXRlciBpbWFnZVNpemUgZXhwZWN0cyB2YWx1ZSB3aXRoIGZvcm1hdCBXSURUSHhIRUlHSFQsIGdvdCBcIitlLmltYWdlU2l6ZSl9cC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLHAuZ2V0QXR0cmlidXRlKFwic3R5bGVcIikrXCJ3aWR0aDpcIittK1wicHg7IGhlaWdodDpcIit2K1wicHhcIil9dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1jYW5jZWwtYnV0dG9uXCIsZS5zaG93Q2FuY2VsQnV0dG9uKSxlLnNob3dDYW5jZWxCdXR0b24/dS5zdHlsZS5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCI6cy5oaWRlKHUpLHQuc2V0QXR0cmlidXRlKFwiZGF0YS1oYXMtY29uZmlybS1idXR0b25cIixlLnNob3dDb25maXJtQnV0dG9uKSxlLnNob3dDb25maXJtQnV0dG9uP2Muc3R5bGUuZGlzcGxheT1cImlubGluZS1ibG9ja1wiOnMuaGlkZShjKSxlLmNhbmNlbEJ1dHRvblRleHQmJih1LmlubmVySFRNTD1zLmVzY2FwZUh0bWwoZS5jYW5jZWxCdXR0b25UZXh0KSksZS5jb25maXJtQnV0dG9uVGV4dCYmKGMuaW5uZXJIVE1MPXMuZXNjYXBlSHRtbChlLmNvbmZpcm1CdXR0b25UZXh0KSksZS5jb25maXJtQnV0dG9uQ29sb3ImJihjLnN0eWxlLmJhY2tncm91bmRDb2xvcj1lLmNvbmZpcm1CdXR0b25Db2xvcixjLnN0eWxlLmJvcmRlckxlZnRDb2xvcj1lLmNvbmZpcm1Mb2FkaW5nQnV0dG9uQ29sb3IsYy5zdHlsZS5ib3JkZXJSaWdodENvbG9yPWUuY29uZmlybUxvYWRpbmdCdXR0b25Db2xvcixyLnNldEZvY3VzU3R5bGUoYyxlLmNvbmZpcm1CdXR0b25Db2xvcikpLHQuc2V0QXR0cmlidXRlKFwiZGF0YS1hbGxvdy1vdXRzaWRlLWNsaWNrXCIsZS5hbGxvd091dHNpZGVDbGljayk7dmFyIGc9ZS5kb25lRnVuY3Rpb24/ITA6ITE7dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1kb25lLWZ1bmN0aW9uXCIsZyksZS5hbmltYXRpb24/XCJzdHJpbmdcIj09dHlwZW9mIGUuYW5pbWF0aW9uP3Quc2V0QXR0cmlidXRlKFwiZGF0YS1hbmltYXRpb25cIixlLmFuaW1hdGlvbik6dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFuaW1hdGlvblwiLFwicG9wXCIpOnQuc2V0QXR0cmlidXRlKFwiZGF0YS1hbmltYXRpb25cIixcIm5vbmVcIiksdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRpbWVyXCIsZS50aW1lcil9O29bXCJkZWZhdWx0XCJdPWksdC5leHBvcnRzPW9bXCJkZWZhdWx0XCJdfSx7XCIuL2hhbmRsZS1kb21cIjo0LFwiLi9oYW5kbGUtc3dhbC1kb21cIjo2LFwiLi91dGlsc1wiOjl9XSw5OltmdW5jdGlvbih0LG4sbyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiYoZVtuXT10W25dKTtyZXR1cm4gZX0scj1mdW5jdGlvbihlKXt2YXIgdD0vXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoZSk7cmV0dXJuIHQ/cGFyc2VJbnQodFsxXSwxNikrXCIsIFwiK3BhcnNlSW50KHRbMl0sMTYpK1wiLCBcIitwYXJzZUludCh0WzNdLDE2KTpudWxsfSxzPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXR0YWNoRXZlbnQmJiFlLmFkZEV2ZW50TGlzdGVuZXJ9LGw9ZnVuY3Rpb24odCl7ZS5jb25zb2xlJiZlLmNvbnNvbGUubG9nKFwiU3dlZXRBbGVydDogXCIrdCl9LGk9ZnVuY3Rpb24oZSx0KXtlPVN0cmluZyhlKS5yZXBsYWNlKC9bXjAtOWEtZl0vZ2ksXCJcIiksZS5sZW5ndGg8NiYmKGU9ZVswXStlWzBdK2VbMV0rZVsxXStlWzJdK2VbMl0pLHQ9dHx8MDt2YXIgbixvLGE9XCIjXCI7Zm9yKG89MDszPm87bysrKW49cGFyc2VJbnQoZS5zdWJzdHIoMipvLDIpLDE2KSxuPU1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgoMCxuK24qdCksMjU1KSkudG9TdHJpbmcoMTYpLGErPShcIjAwXCIrbikuc3Vic3RyKG4ubGVuZ3RoKTtyZXR1cm4gYX07by5leHRlbmQ9YSxvLmhleFRvUmdiPXIsby5pc0lFOD1zLG8ubG9nU3RyPWwsby5jb2xvckx1bWluYW5jZT1pfSx7fV19LHt9LFsxXSksXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShmdW5jdGlvbigpe3JldHVybiBzd2VldEFsZXJ0fSk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1zd2VldEFsZXJ0KX0od2luZG93LGRvY3VtZW50KTtcclxuLypnbG9iYWwgalF1ZXJ5ICovXHJcbi8qIVxyXG4qIEZpdFRleHQuanMgMS4yXHJcbipcclxuKiBDb3B5cmlnaHQgMjAxMSwgRGF2ZSBSdXBlcnQgaHR0cDovL2RhdmVydXBlcnQuY29tXHJcbiogUmVsZWFzZWQgdW5kZXIgdGhlIFdURlBMIGxpY2Vuc2VcclxuKiBodHRwOi8vc2FtLnpveS5vcmcvd3RmcGwvXHJcbipcclxuKiBEYXRlOiBUaHUgTWF5IDA1IDE0OjIzOjAwIDIwMTEgLTA2MDBcclxuKi9cclxuXHJcbihmdW5jdGlvbiggJCApe1xyXG5cclxuICAkLmZuLmZpdFRleHQgPSBmdW5jdGlvbigga29tcHJlc3Nvciwgb3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBTZXR1cCBvcHRpb25zXHJcbiAgICB2YXIgY29tcHJlc3NvciA9IGtvbXByZXNzb3IgfHwgMSxcclxuICAgICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcclxuICAgICAgICAgICdtaW5Gb250U2l6ZScgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXHJcbiAgICAgICAgICAnbWF4Rm9udFNpemUnIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgLy8gU3RvcmUgdGhlIG9iamVjdFxyXG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgLy8gUmVzaXplcigpIHJlc2l6ZXMgaXRlbXMgYmFzZWQgb24gdGhlIG9iamVjdCB3aWR0aCBkaXZpZGVkIGJ5IHRoZSBjb21wcmVzc29yICogMTBcclxuICAgICAgdmFyIHJlc2l6ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHRoaXMuY3NzKCdmb250LXNpemUnLCBNYXRoLm1heChNYXRoLm1pbigkdGhpcy53aWR0aCgpIC8gKGNvbXByZXNzb3IqMTApLCBwYXJzZUZsb2F0KHNldHRpbmdzLm1heEZvbnRTaXplKSksIHBhcnNlRmxvYXQoc2V0dGluZ3MubWluRm9udFNpemUpKSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBDYWxsIG9uY2UgdG8gc2V0LlxyXG4gICAgICByZXNpemVyKCk7XHJcblxyXG4gICAgICAvLyBDYWxsIG9uIHJlc2l6ZS4gT3BlcmEgZGVib3VuY2VzIHRoZWlyIHJlc2l6ZSBieSBkZWZhdWx0LlxyXG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5maXR0ZXh0IG9yaWVudGF0aW9uY2hhbmdlLmZpdHRleHQnLCByZXNpemVyKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfTtcclxuXHJcbn0pKCBqUXVlcnkgKTtcclxuLypcclxuICAgIGpRdWVyeSBNYXNrZWQgSW5wdXQgUGx1Z2luXHJcbiAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDE1IEpvc2ggQnVzaCAoZGlnaXRhbGJ1c2guY29tKVxyXG4gICAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vZGlnaXRhbGJ1c2guY29tL3Byb2plY3RzL21hc2tlZC1pbnB1dC1wbHVnaW4vI2xpY2Vuc2UpXHJcbiAgICBWZXJzaW9uOiAxLjQuMVxyXG4qL1xyXG4hZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbIFwianF1ZXJ5XCIgXSwgZmFjdG9yeSkgOiBmYWN0b3J5KFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyByZXF1aXJlKFwianF1ZXJ5XCIpIDogalF1ZXJ5KTtcclxufShmdW5jdGlvbigkKSB7XHJcbiAgICB2YXIgY2FyZXRUaW1lb3V0SWQsIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCwgaVBob25lID0gL2lwaG9uZS9pLnRlc3QodWEpLCBjaHJvbWUgPSAvY2hyb21lL2kudGVzdCh1YSksIGFuZHJvaWQgPSAvYW5kcm9pZC9pLnRlc3QodWEpO1xyXG4gICAgJC5tYXNrID0ge1xyXG4gICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgIFwiOVwiOiBcIlswLTldXCIsXHJcbiAgICAgICAgICAgIGE6IFwiW0EtWmEtel1cIixcclxuICAgICAgICAgICAgXCIqXCI6IFwiW0EtWmEtejAtOV1cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXV0b2NsZWFyOiAhMCxcclxuICAgICAgICBkYXRhTmFtZTogXCJyYXdNYXNrRm5cIixcclxuICAgICAgICBwbGFjZWhvbGRlcjogXCJfXCJcclxuICAgIH0sICQuZm4uZXh0ZW5kKHtcclxuICAgICAgICBjYXJldDogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgICAgICB2YXIgcmFuZ2U7XHJcbiAgICAgICAgICAgIGlmICgwICE9PSB0aGlzLmxlbmd0aCAmJiAhdGhpcy5pcyhcIjpoaWRkZW5cIikpIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiBiZWdpbiA/IChlbmQgPSBcIm51bWJlclwiID09IHR5cGVvZiBlbmQgPyBlbmQgOiBiZWdpbiwgXHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UgPyB0aGlzLnNldFNlbGVjdGlvblJhbmdlKGJlZ2luLCBlbmQpIDogdGhpcy5jcmVhdGVUZXh0UmFuZ2UgJiYgKHJhbmdlID0gdGhpcy5jcmVhdGVUZXh0UmFuZ2UoKSwgXHJcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSghMCksIHJhbmdlLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIiwgZW5kKSwgcmFuZ2UubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIGJlZ2luKSwgXHJcbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKSk7XHJcbiAgICAgICAgICAgIH0pKSA6ICh0aGlzWzBdLnNldFNlbGVjdGlvblJhbmdlID8gKGJlZ2luID0gdGhpc1swXS5zZWxlY3Rpb25TdGFydCwgZW5kID0gdGhpc1swXS5zZWxlY3Rpb25FbmQpIDogZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSAmJiAocmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKSwgXHJcbiAgICAgICAgICAgIGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAtMWU1KSwgZW5kID0gYmVnaW4gKyByYW5nZS50ZXh0Lmxlbmd0aCksIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXHJcbiAgICAgICAgICAgICAgICBlbmQ6IGVuZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVubWFzazogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJ1bm1hc2tcIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXNrOiBmdW5jdGlvbihtYXNrLCBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQsIGRlZnMsIHRlc3RzLCBwYXJ0aWFsUG9zaXRpb24sIGZpcnN0Tm9uTWFza1BvcywgbGFzdFJlcXVpcmVkTm9uTWFza1BvcywgbGVuLCBvbGRWYWw7XHJcbiAgICAgICAgICAgIGlmICghbWFzayAmJiB0aGlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlucHV0ID0gJCh0aGlzWzBdKTtcclxuICAgICAgICAgICAgICAgIHZhciBmbiA9IGlucHV0LmRhdGEoJC5tYXNrLmRhdGFOYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmbiA/IGZuKCkgOiB2b2lkIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgYXV0b2NsZWFyOiAkLm1hc2suYXV0b2NsZWFyLFxyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICQubWFzay5wbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogbnVsbFxyXG4gICAgICAgICAgICB9LCBzZXR0aW5ncyksIGRlZnMgPSAkLm1hc2suZGVmaW5pdGlvbnMsIHRlc3RzID0gW10sIHBhcnRpYWxQb3NpdGlvbiA9IGxlbiA9IG1hc2subGVuZ3RoLCBcclxuICAgICAgICAgICAgZmlyc3ROb25NYXNrUG9zID0gbnVsbCwgJC5lYWNoKG1hc2suc3BsaXQoXCJcIiksIGZ1bmN0aW9uKGksIGMpIHtcclxuICAgICAgICAgICAgICAgIFwiP1wiID09IGMgPyAobGVuLS0sIHBhcnRpYWxQb3NpdGlvbiA9IGkpIDogZGVmc1tjXSA/ICh0ZXN0cy5wdXNoKG5ldyBSZWdFeHAoZGVmc1tjXSkpLCBcclxuICAgICAgICAgICAgICAgIG51bGwgPT09IGZpcnN0Tm9uTWFza1BvcyAmJiAoZmlyc3ROb25NYXNrUG9zID0gdGVzdHMubGVuZ3RoIC0gMSksIHBhcnRpYWxQb3NpdGlvbiA+IGkgJiYgKGxhc3RSZXF1aXJlZE5vbk1hc2tQb3MgPSB0ZXN0cy5sZW5ndGggLSAxKSkgOiB0ZXN0cy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICB9KSwgdGhpcy50cmlnZ2VyKFwidW5tYXNrXCIpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0cnlGaXJlQ29tcGxldGVkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5jb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0Tm9uTWFza1BvczsgbGFzdFJlcXVpcmVkTm9uTWFza1BvcyA+PSBpOyBpKyspIGlmICh0ZXN0c1tpXSAmJiBidWZmZXJbaV0gPT09IGdldFBsYWNlaG9sZGVyKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmNvbXBsZXRlZC5jYWxsKGlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLnBsYWNlaG9sZGVyLmNoYXJBdChpIDwgc2V0dGluZ3MucGxhY2Vob2xkZXIubGVuZ3RoID8gaSA6IDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2Vla05leHQocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7Kytwb3MgPCBsZW4gJiYgIXRlc3RzW3Bvc107ICkgO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWVrUHJldihwb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDstLXBvcyA+PSAwICYmICF0ZXN0c1twb3NdOyApIDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hpZnRMKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSwgajtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISgwID4gYmVnaW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGJlZ2luLCBqID0gc2Vla05leHQoZW5kKTsgbGVuID4gaTsgaSsrKSBpZiAodGVzdHNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGxlbiA+IGogJiYgdGVzdHNbaV0udGVzdChidWZmZXJbal0pKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBidWZmZXJbal0sIGJ1ZmZlcltqXSA9IGdldFBsYWNlaG9sZGVyKGopLCBqID0gc2Vla05leHQoaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoKSwgaW5wdXQuY2FyZXQoTWF0aC5tYXgoZmlyc3ROb25NYXNrUG9zLCBiZWdpbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNoaWZ0Uihwb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSwgYywgaiwgdDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBwb3MsIGMgPSBnZXRQbGFjZWhvbGRlcihwb3MpOyBsZW4gPiBpOyBpKyspIGlmICh0ZXN0c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9IHNlZWtOZXh0KGkpLCB0ID0gYnVmZmVyW2ldLCBidWZmZXJbaV0gPSBjLCAhKGxlbiA+IGogJiYgdGVzdHNbal0udGVzdCh0KSkpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhbmRyb2lkSW5wdXRFdmVudCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyVmFsID0gaW5wdXQudmFsKCksIHBvcyA9IGlucHV0LmNhcmV0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAmJiBvbGRWYWwubGVuZ3RoICYmIG9sZFZhbC5sZW5ndGggPiBjdXJWYWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY2hlY2tWYWwoITApOyBwb3MuYmVnaW4gPiAwICYmICF0ZXN0c1twb3MuYmVnaW4gLSAxXTsgKSBwb3MuYmVnaW4tLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHBvcy5iZWdpbikgZm9yICg7cG9zLmJlZ2luIDwgZmlyc3ROb25NYXNrUG9zICYmICF0ZXN0c1twb3MuYmVnaW5dOyApIHBvcy5iZWdpbisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jYXJldChwb3MuYmVnaW4sIHBvcy5iZWdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjaGVja1ZhbCghMCk7IHBvcy5iZWdpbiA8IGxlbiAmJiAhdGVzdHNbcG9zLmJlZ2luXTsgKSBwb3MuYmVnaW4rKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2FyZXQocG9zLmJlZ2luLCBwb3MuYmVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0cnlGaXJlQ29tcGxldGVkKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBibHVyRXZlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwoKSwgaW5wdXQudmFsKCkgIT0gZm9jdXNUZXh0ICYmIGlucHV0LmNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24ga2V5ZG93bkV2ZW50KGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LnByb3AoXCJyZWFkb25seVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zLCBiZWdpbiwgZW5kLCBrID0gZS53aGljaCB8fCBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbCA9IGlucHV0LnZhbCgpLCA4ID09PSBrIHx8IDQ2ID09PSBrIHx8IGlQaG9uZSAmJiAxMjcgPT09IGsgPyAocG9zID0gaW5wdXQuY2FyZXQoKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gcG9zLmJlZ2luLCBlbmQgPSBwb3MuZW5kLCBlbmQgLSBiZWdpbiA9PT0gMCAmJiAoYmVnaW4gPSA0NiAhPT0gayA/IHNlZWtQcmV2KGJlZ2luKSA6IGVuZCA9IHNlZWtOZXh0KGJlZ2luIC0gMSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSA0NiA9PT0gayA/IHNlZWtOZXh0KGVuZCkgOiBlbmQpLCBjbGVhckJ1ZmZlcihiZWdpbiwgZW5kKSwgc2hpZnRMKGJlZ2luLCBlbmQgLSAxKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKSkgOiAxMyA9PT0gayA/IGJsdXJFdmVudC5jYWxsKHRoaXMsIGUpIDogMjcgPT09IGsgJiYgKGlucHV0LnZhbChmb2N1c1RleHQpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2FyZXQoMCwgY2hlY2tWYWwoKSksIGUucHJldmVudERlZmF1bHQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24ga2V5cHJlc3NFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5wcm9wKFwicmVhZG9ubHlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAsIGMsIG5leHQsIGsgPSBlLndoaWNoIHx8IGUua2V5Q29kZSwgcG9zID0gaW5wdXQuY2FyZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZS5jdHJsS2V5IHx8IGUuYWx0S2V5IHx8IGUubWV0YUtleSB8fCAzMiA+IGspICYmIGsgJiYgMTMgIT09IGspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuZW5kIC0gcG9zLmJlZ2luICE9PSAwICYmIChjbGVhckJ1ZmZlcihwb3MuYmVnaW4sIHBvcy5lbmQpLCBzaGlmdEwocG9zLmJlZ2luLCBwb3MuZW5kIC0gMSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBzZWVrTmV4dChwb3MuYmVnaW4gLSAxKSwgbGVuID4gcCAmJiAoYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayksIHRlc3RzW3BdLnRlc3QoYykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoaWZ0UihwKSwgYnVmZmVyW3BdID0gYywgd3JpdGVCdWZmZXIoKSwgbmV4dCA9IHNlZWtOZXh0KHApLCBhbmRyb2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eSgkLmZuLmNhcmV0LCBpbnB1dCwgbmV4dCkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChwcm94eSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlucHV0LmNhcmV0KG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA8PSBsYXN0UmVxdWlyZWROb25NYXNrUG9zICYmIHRyeUZpcmVDb21wbGV0ZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0YXJ0LCBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgZW5kID4gaSAmJiBsZW4gPiBpOyBpKyspIHRlc3RzW2ldICYmIChidWZmZXJbaV0gPSBnZXRQbGFjZWhvbGRlcihpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB3cml0ZUJ1ZmZlcigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWwoYnVmZmVyLmpvaW4oXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWwoYWxsb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSwgYywgcG9zLCB0ZXN0ID0gaW5wdXQudmFsKCksIGxhc3RNYXRjaCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIHBvcyA9IDA7IGxlbiA+IGk7IGkrKykgaWYgKHRlc3RzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYnVmZmVyW2ldID0gZ2V0UGxhY2Vob2xkZXIoaSk7IHBvcysrIDwgdGVzdC5sZW5ndGg7ICkgaWYgKGMgPSB0ZXN0LmNoYXJBdChwb3MgLSAxKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RzW2ldLnRlc3QoYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IGMsIGxhc3RNYXRjaCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zID4gdGVzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQnVmZmVyKGkgKyAxLCBsZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYnVmZmVyW2ldID09PSB0ZXN0LmNoYXJBdChwb3MpICYmIHBvcysrLCBwYXJ0aWFsUG9zaXRpb24gPiBpICYmIChsYXN0TWF0Y2ggPSBpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3cgPyB3cml0ZUJ1ZmZlcigpIDogcGFydGlhbFBvc2l0aW9uID4gbGFzdE1hdGNoICsgMSA/IHNldHRpbmdzLmF1dG9jbGVhciB8fCBidWZmZXIuam9pbihcIlwiKSA9PT0gZGVmYXVsdEJ1ZmZlciA/IChpbnB1dC52YWwoKSAmJiBpbnB1dC52YWwoXCJcIiksIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyQnVmZmVyKDAsIGxlbikpIDogd3JpdGVCdWZmZXIoKSA6ICh3cml0ZUJ1ZmZlcigpLCBpbnB1dC52YWwoaW5wdXQudmFsKCkuc3Vic3RyaW5nKDAsIGxhc3RNYXRjaCArIDEpKSksIFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpYWxQb3NpdGlvbiA/IGkgOiBmaXJzdE5vbk1hc2tQb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpLCBidWZmZXIgPSAkLm1hcChtYXNrLnNwbGl0KFwiXCIpLCBmdW5jdGlvbihjLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiICE9IGMgPyBkZWZzW2NdID8gZ2V0UGxhY2Vob2xkZXIoaSkgOiBjIDogdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgfSksIGRlZmF1bHRCdWZmZXIgPSBidWZmZXIuam9pbihcIlwiKSwgZm9jdXNUZXh0ID0gaW5wdXQudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhKCQubWFzay5kYXRhTmFtZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQubWFwKGJ1ZmZlciwgZnVuY3Rpb24oYywgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdHNbaV0gJiYgYyAhPSBnZXRQbGFjZWhvbGRlcihpKSA/IGMgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICB9KSwgaW5wdXQub25lKFwidW5tYXNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0Lm9mZihcIi5tYXNrXCIpLnJlbW92ZURhdGEoJC5tYXNrLmRhdGFOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0pLm9uKFwiZm9jdXMubWFza1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LnByb3AoXCJyZWFkb25seVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FyZXRUaW1lb3V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c1RleHQgPSBpbnB1dC52YWwoKSwgcG9zID0gY2hlY2tWYWwoKSwgY2FyZXRUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZ2V0KDApID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICh3cml0ZUJ1ZmZlcigpLCBwb3MgPT0gbWFzay5yZXBsYWNlKFwiP1wiLCBcIlwiKS5sZW5ndGggPyBpbnB1dC5jYXJldCgwLCBwb3MpIDogaW5wdXQuY2FyZXQocG9zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS5vbihcImJsdXIubWFza1wiLCBibHVyRXZlbnQpLm9uKFwia2V5ZG93bi5tYXNrXCIsIGtleWRvd25FdmVudCkub24oXCJrZXlwcmVzcy5tYXNrXCIsIGtleXByZXNzRXZlbnQpLm9uKFwiaW5wdXQubWFzayBwYXN0ZS5tYXNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnByb3AoXCJyZWFkb25seVwiKSB8fCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gY2hlY2tWYWwoITApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jYXJldChwb3MpLCB0cnlGaXJlQ29tcGxldGVkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgICAgICB9KSwgY2hyb21lICYmIGFuZHJvaWQgJiYgaW5wdXQub2ZmKFwiaW5wdXQubWFza1wiKS5vbihcImlucHV0Lm1hc2tcIiwgYW5kcm9pZElucHV0RXZlbnQpLCBcclxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuLy8hIG1vbWVudC5qc1xyXG4vLyEgdmVyc2lvbiA6IDIuMTQuMVxyXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xyXG4vLyEgbGljZW5zZSA6IE1JVFxyXG4vLyEgbW9tZW50anMuY29tXHJcbiFmdW5jdGlvbihhLGIpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWIoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGIpOmEubW9tZW50PWIoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEoKXtyZXR1cm4gamUuYXBwbHkobnVsbCxhcmd1bWVudHMpfVxyXG4vLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxyXG4vLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cclxuZnVuY3Rpb24gYihhKXtqZT1hfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBBcnJheXx8XCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpfWZ1bmN0aW9uIGQoYSl7cmV0dXJuXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX1mdW5jdGlvbiBlKGEpe3ZhciBiO2ZvcihiIGluIGEpXHJcbi8vIGV2ZW4gaWYgaXRzIG5vdCBvd24gcHJvcGVydHkgSSdkIHN0aWxsIGNhbGwgaXQgbm9uLWVtcHR5XHJcbnJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGYoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBEYXRlfHxcIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX1mdW5jdGlvbiBnKGEsYil7dmFyIGMsZD1bXTtmb3IoYz0wO2M8YS5sZW5ndGg7KytjKWQucHVzaChiKGFbY10sYykpO3JldHVybiBkfWZ1bmN0aW9uIGgoYSxiKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsYil9ZnVuY3Rpb24gaShhLGIpe2Zvcih2YXIgYyBpbiBiKWgoYixjKSYmKGFbY109YltjXSk7cmV0dXJuIGgoYixcInRvU3RyaW5nXCIpJiYoYS50b1N0cmluZz1iLnRvU3RyaW5nKSxoKGIsXCJ2YWx1ZU9mXCIpJiYoYS52YWx1ZU9mPWIudmFsdWVPZiksYX1mdW5jdGlvbiBqKGEsYixjLGQpe3JldHVybiBxYihhLGIsYyxkLCEwKS51dGMoKX1mdW5jdGlvbiBrKCl7XHJcbi8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cclxucmV0dXJue2VtcHR5OiExLHVudXNlZFRva2VuczpbXSx1bnVzZWRJbnB1dDpbXSxvdmVyZmxvdzotMixjaGFyc0xlZnRPdmVyOjAsbnVsbElucHV0OiExLGludmFsaWRNb250aDpudWxsLGludmFsaWRGb3JtYXQ6ITEsdXNlckludmFsaWRhdGVkOiExLGlzbzohMSxwYXJzZWREYXRlUGFydHM6W10sbWVyaWRpZW06bnVsbH19ZnVuY3Rpb24gbChhKXtyZXR1cm4gbnVsbD09YS5fcGYmJihhLl9wZj1rKCkpLGEuX3BmfWZ1bmN0aW9uIG0oYSl7aWYobnVsbD09YS5faXNWYWxpZCl7dmFyIGI9bChhKSxjPWtlLmNhbGwoYi5wYXJzZWREYXRlUGFydHMsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWF9KTthLl9pc1ZhbGlkPSFpc05hTihhLl9kLmdldFRpbWUoKSkmJmIub3ZlcmZsb3c8MCYmIWIuZW1wdHkmJiFiLmludmFsaWRNb250aCYmIWIuaW52YWxpZFdlZWtkYXkmJiFiLm51bGxJbnB1dCYmIWIuaW52YWxpZEZvcm1hdCYmIWIudXNlckludmFsaWRhdGVkJiYoIWIubWVyaWRpZW18fGIubWVyaWRpZW0mJmMpLGEuX3N0cmljdCYmKGEuX2lzVmFsaWQ9YS5faXNWYWxpZCYmMD09PWIuY2hhcnNMZWZ0T3ZlciYmMD09PWIudW51c2VkVG9rZW5zLmxlbmd0aCYmdm9pZCAwPT09Yi5iaWdIb3VyKX1yZXR1cm4gYS5faXNWYWxpZH1mdW5jdGlvbiBuKGEpe3ZhciBiPWooTmFOKTtyZXR1cm4gbnVsbCE9YT9pKGwoYiksYSk6bChiKS51c2VySW52YWxpZGF0ZWQ9ITAsYn1mdW5jdGlvbiBvKGEpe3JldHVybiB2b2lkIDA9PT1hfWZ1bmN0aW9uIHAoYSxiKXt2YXIgYyxkLGU7aWYobyhiLl9pc0FNb21lbnRPYmplY3QpfHwoYS5faXNBTW9tZW50T2JqZWN0PWIuX2lzQU1vbWVudE9iamVjdCksbyhiLl9pKXx8KGEuX2k9Yi5faSksbyhiLl9mKXx8KGEuX2Y9Yi5fZiksbyhiLl9sKXx8KGEuX2w9Yi5fbCksbyhiLl9zdHJpY3QpfHwoYS5fc3RyaWN0PWIuX3N0cmljdCksbyhiLl90em0pfHwoYS5fdHptPWIuX3R6bSksbyhiLl9pc1VUQyl8fChhLl9pc1VUQz1iLl9pc1VUQyksbyhiLl9vZmZzZXQpfHwoYS5fb2Zmc2V0PWIuX29mZnNldCksbyhiLl9wZil8fChhLl9wZj1sKGIpKSxvKGIuX2xvY2FsZSl8fChhLl9sb2NhbGU9Yi5fbG9jYWxlKSxsZS5sZW5ndGg+MClmb3IoYyBpbiBsZSlkPWxlW2NdLGU9YltkXSxvKGUpfHwoYVtkXT1lKTtyZXR1cm4gYX1cclxuLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcclxuZnVuY3Rpb24gcShiKXtwKHRoaXMsYiksdGhpcy5fZD1uZXcgRGF0ZShudWxsIT1iLl9kP2IuX2QuZ2V0VGltZSgpOk5hTiksbWU9PT0hMSYmKG1lPSEwLGEudXBkYXRlT2Zmc2V0KHRoaXMpLG1lPSExKX1mdW5jdGlvbiByKGEpe3JldHVybiBhIGluc3RhbmNlb2YgcXx8bnVsbCE9YSYmbnVsbCE9YS5faXNBTW9tZW50T2JqZWN0fWZ1bmN0aW9uIHMoYSl7cmV0dXJuIDA+YT9NYXRoLmNlaWwoYSl8fDA6TWF0aC5mbG9vcihhKX1mdW5jdGlvbiB0KGEpe3ZhciBiPSthLGM9MDtyZXR1cm4gMCE9PWImJmlzRmluaXRlKGIpJiYoYz1zKGIpKSxjfVxyXG4vLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXHJcbmZ1bmN0aW9uIHUoYSxiLGMpe3ZhciBkLGU9TWF0aC5taW4oYS5sZW5ndGgsYi5sZW5ndGgpLGY9TWF0aC5hYnMoYS5sZW5ndGgtYi5sZW5ndGgpLGc9MDtmb3IoZD0wO2U+ZDtkKyspKGMmJmFbZF0hPT1iW2RdfHwhYyYmdChhW2RdKSE9PXQoYltkXSkpJiZnKys7cmV0dXJuIGcrZn1mdW5jdGlvbiB2KGIpe2Euc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzPT09ITEmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybihcIkRlcHJlY2F0aW9uIHdhcm5pbmc6IFwiK2IpfWZ1bmN0aW9uIHcoYixjKXt2YXIgZD0hMDtyZXR1cm4gaShmdW5jdGlvbigpe3JldHVybiBudWxsIT1hLmRlcHJlY2F0aW9uSGFuZGxlciYmYS5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCxiKSxkJiYodihiK1wiXFxuQXJndW1lbnRzOiBcIitBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oXCIsIFwiKStcIlxcblwiKyhuZXcgRXJyb3IpLnN0YWNrKSxkPSExKSxjLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9ZnVuY3Rpb24geChiLGMpe251bGwhPWEuZGVwcmVjYXRpb25IYW5kbGVyJiZhLmRlcHJlY2F0aW9uSGFuZGxlcihiLGMpLG5lW2JdfHwodihjKSxuZVtiXT0hMCl9ZnVuY3Rpb24geShhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIEZ1bmN0aW9ufHxcIltvYmplY3QgRnVuY3Rpb25dXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9ZnVuY3Rpb24geihhKXt2YXIgYixjO2ZvcihjIGluIGEpYj1hW2NdLHkoYik/dGhpc1tjXT1iOnRoaXNbXCJfXCIrY109Yjt0aGlzLl9jb25maWc9YSxcclxuLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXHJcbi8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX29yZGluYWxQYXJzZUxlbmllbnQuXHJcbnRoaXMuX29yZGluYWxQYXJzZUxlbmllbnQ9bmV3IFJlZ0V4cCh0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlK1wifFwiKy9cXGR7MSwyfS8uc291cmNlKX1mdW5jdGlvbiBBKGEsYil7dmFyIGMsZT1pKHt9LGEpO2ZvcihjIGluIGIpaChiLGMpJiYoZChhW2NdKSYmZChiW2NdKT8oZVtjXT17fSxpKGVbY10sYVtjXSksaShlW2NdLGJbY10pKTpudWxsIT1iW2NdP2VbY109YltjXTpkZWxldGUgZVtjXSk7Zm9yKGMgaW4gYSloKGEsYykmJiFoKGIsYykmJmQoYVtjXSkmJihcclxuLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xyXG5lW2NdPWkoe30sZVtjXSkpO3JldHVybiBlfWZ1bmN0aW9uIEIoYSl7bnVsbCE9YSYmdGhpcy5zZXQoYSl9ZnVuY3Rpb24gQyhhLGIsYyl7dmFyIGQ9dGhpcy5fY2FsZW5kYXJbYV18fHRoaXMuX2NhbGVuZGFyLnNhbWVFbHNlO3JldHVybiB5KGQpP2QuY2FsbChiLGMpOmR9ZnVuY3Rpb24gRChhKXt2YXIgYj10aGlzLl9sb25nRGF0ZUZvcm1hdFthXSxjPXRoaXMuX2xvbmdEYXRlRm9ybWF0W2EudG9VcHBlckNhc2UoKV07cmV0dXJuIGJ8fCFjP2I6KHRoaXMuX2xvbmdEYXRlRm9ybWF0W2FdPWMucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csZnVuY3Rpb24oYSl7cmV0dXJuIGEuc2xpY2UoMSl9KSx0aGlzLl9sb25nRGF0ZUZvcm1hdFthXSl9ZnVuY3Rpb24gRSgpe3JldHVybiB0aGlzLl9pbnZhbGlkRGF0ZX1mdW5jdGlvbiBGKGEpe3JldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoXCIlZFwiLGEpfWZ1bmN0aW9uIEcoYSxiLGMsZCl7dmFyIGU9dGhpcy5fcmVsYXRpdmVUaW1lW2NdO3JldHVybiB5KGUpP2UoYSxiLGMsZCk6ZS5yZXBsYWNlKC8lZC9pLGEpfWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz10aGlzLl9yZWxhdGl2ZVRpbWVbYT4wP1wiZnV0dXJlXCI6XCJwYXN0XCJdO3JldHVybiB5KGMpP2MoYik6Yy5yZXBsYWNlKC8lcy9pLGIpfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnRvTG93ZXJDYXNlKCk7d2VbY109d2VbYytcInNcIl09d2VbYl09YX1mdW5jdGlvbiBKKGEpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhP3dlW2FdfHx3ZVthLnRvTG93ZXJDYXNlKCldOnZvaWQgMH1mdW5jdGlvbiBLKGEpe3ZhciBiLGMsZD17fTtmb3IoYyBpbiBhKWgoYSxjKSYmKGI9SihjKSxiJiYoZFtiXT1hW2NdKSk7cmV0dXJuIGR9ZnVuY3Rpb24gTChhLGIpe3hlW2FdPWJ9ZnVuY3Rpb24gTShhKXt2YXIgYj1bXTtmb3IodmFyIGMgaW4gYSliLnB1c2goe3VuaXQ6Yyxwcmlvcml0eTp4ZVtjXX0pO3JldHVybiBiLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5wcmlvcml0eS1iLnByaW9yaXR5fSksYn1mdW5jdGlvbiBOKGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3JldHVybiBudWxsIT1kPyhQKHRoaXMsYixkKSxhLnVwZGF0ZU9mZnNldCh0aGlzLGMpLHRoaXMpOk8odGhpcyxiKX19ZnVuY3Rpb24gTyhhLGIpe3JldHVybiBhLmlzVmFsaWQoKT9hLl9kW1wiZ2V0XCIrKGEuX2lzVVRDP1wiVVRDXCI6XCJcIikrYl0oKTpOYU59ZnVuY3Rpb24gUChhLGIsYyl7YS5pc1ZhbGlkKCkmJmEuX2RbXCJzZXRcIisoYS5faXNVVEM/XCJVVENcIjpcIlwiKStiXShjKX1cclxuLy8gTU9NRU5UU1xyXG5mdW5jdGlvbiBRKGEpe3JldHVybiBhPUooYSkseSh0aGlzW2FdKT90aGlzW2FdKCk6dGhpc31mdW5jdGlvbiBSKGEsYil7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe2E9SyhhKTtmb3IodmFyIGM9TShhKSxkPTA7ZDxjLmxlbmd0aDtkKyspdGhpc1tjW2RdLnVuaXRdKGFbY1tkXS51bml0XSl9ZWxzZSBpZihhPUooYSkseSh0aGlzW2FdKSlyZXR1cm4gdGhpc1thXShiKTtyZXR1cm4gdGhpc31mdW5jdGlvbiBTKGEsYixjKXt2YXIgZD1cIlwiK01hdGguYWJzKGEpLGU9Yi1kLmxlbmd0aCxmPWE+PTA7cmV0dXJuKGY/Yz9cIitcIjpcIlwiOlwiLVwiKStNYXRoLnBvdygxMCxNYXRoLm1heCgwLGUpKS50b1N0cmluZygpLnN1YnN0cigxKStkfVxyXG4vLyB0b2tlbjogICAgJ00nXHJcbi8vIHBhZGRlZDogICBbJ01NJywgMl1cclxuLy8gb3JkaW5hbDogICdNbydcclxuLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XHJcbmZ1bmN0aW9uIFQoYSxiLGMsZCl7dmFyIGU9ZDtcInN0cmluZ1wiPT10eXBlb2YgZCYmKGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tkXSgpfSksYSYmKEJlW2FdPWUpLGImJihCZVtiWzBdXT1mdW5jdGlvbigpe3JldHVybiBTKGUuYXBwbHkodGhpcyxhcmd1bWVudHMpLGJbMV0sYlsyXSl9KSxjJiYoQmVbY109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxhKX0pfWZ1bmN0aW9uIFUoYSl7cmV0dXJuIGEubWF0Y2goL1xcW1tcXHNcXFNdLyk/YS5yZXBsYWNlKC9eXFxbfFxcXSQvZyxcIlwiKTphLnJlcGxhY2UoL1xcXFwvZyxcIlwiKX1mdW5jdGlvbiBWKGEpe3ZhciBiLGMsZD1hLm1hdGNoKHllKTtmb3IoYj0wLGM9ZC5sZW5ndGg7Yz5iO2IrKylCZVtkW2JdXT9kW2JdPUJlW2RbYl1dOmRbYl09VShkW2JdKTtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGUsZj1cIlwiO2ZvcihlPTA7Yz5lO2UrKylmKz1kW2VdaW5zdGFuY2VvZiBGdW5jdGlvbj9kW2VdLmNhbGwoYixhKTpkW2VdO3JldHVybiBmfX1cclxuLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XHJcbmZ1bmN0aW9uIFcoYSxiKXtyZXR1cm4gYS5pc1ZhbGlkKCk/KGI9WChiLGEubG9jYWxlRGF0YSgpKSxBZVtiXT1BZVtiXXx8VihiKSxBZVtiXShhKSk6YS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKX1mdW5jdGlvbiBYKGEsYil7ZnVuY3Rpb24gYyhhKXtyZXR1cm4gYi5sb25nRGF0ZUZvcm1hdChhKXx8YX12YXIgZD01O2Zvcih6ZS5sYXN0SW5kZXg9MDtkPj0wJiZ6ZS50ZXN0KGEpOylhPWEucmVwbGFjZSh6ZSxjKSx6ZS5sYXN0SW5kZXg9MCxkLT0xO3JldHVybiBhfWZ1bmN0aW9uIFkoYSxiLGMpe1RlW2FdPXkoYik/YjpmdW5jdGlvbihhLGQpe3JldHVybiBhJiZjP2M6Yn19ZnVuY3Rpb24gWihhLGIpe3JldHVybiBoKFRlLGEpP1RlW2FdKGIuX3N0cmljdCxiLl9sb2NhbGUpOm5ldyBSZWdFeHAoJChhKSl9XHJcbi8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcclxuZnVuY3Rpb24gJChhKXtyZXR1cm4gXyhhLnJlcGxhY2UoXCJcXFxcXCIsXCJcIikucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLGZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGJ8fGN8fGR8fGV9KSl9ZnVuY3Rpb24gXyhhKXtyZXR1cm4gYS5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csXCJcXFxcJCZcIil9ZnVuY3Rpb24gYWEoYSxiKXt2YXIgYyxkPWI7Zm9yKFwic3RyaW5nXCI9PXR5cGVvZiBhJiYoYT1bYV0pLFwibnVtYmVyXCI9PXR5cGVvZiBiJiYoZD1mdW5jdGlvbihhLGMpe2NbYl09dChhKX0pLGM9MDtjPGEubGVuZ3RoO2MrKylVZVthW2NdXT1kfWZ1bmN0aW9uIGJhKGEsYil7YWEoYSxmdW5jdGlvbihhLGMsZCxlKXtkLl93PWQuX3d8fHt9LGIoYSxkLl93LGQsZSl9KX1mdW5jdGlvbiBjYShhLGIsYyl7bnVsbCE9YiYmaChVZSxhKSYmVWVbYV0oYixjLl9hLGMsYSl9ZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoYSxiKzEsMCkpLmdldFVUQ0RhdGUoKX1mdW5jdGlvbiBlYShhLGIpe3JldHVybiBjKHRoaXMuX21vbnRocyk/dGhpcy5fbW9udGhzW2EubW9udGgoKV06dGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXR8fGNmKS50ZXN0KGIpP1wiZm9ybWF0XCI6XCJzdGFuZGFsb25lXCJdW2EubW9udGgoKV19ZnVuY3Rpb24gZmEoYSxiKXtyZXR1cm4gYyh0aGlzLl9tb250aHNTaG9ydCk/dGhpcy5fbW9udGhzU2hvcnRbYS5tb250aCgpXTp0aGlzLl9tb250aHNTaG9ydFtjZi50ZXN0KGIpP1wiZm9ybWF0XCI6XCJzdGFuZGFsb25lXCJdW2EubW9udGgoKV19ZnVuY3Rpb24gZ2EoYSxiLGMpe3ZhciBkLGUsZixnPWEudG9Mb2NhbGVMb3dlckNhc2UoKTtpZighdGhpcy5fbW9udGhzUGFyc2UpZm9yKFxyXG4vLyB0aGlzIGlzIG5vdCB1c2VkXHJcbnRoaXMuX21vbnRoc1BhcnNlPVtdLHRoaXMuX2xvbmdNb250aHNQYXJzZT1bXSx0aGlzLl9zaG9ydE1vbnRoc1BhcnNlPVtdLGQ9MDsxMj5kOysrZClmPWooWzJlMyxkXSksdGhpcy5fc2hvcnRNb250aHNQYXJzZVtkXT10aGlzLm1vbnRoc1Nob3J0KGYsXCJcIikudG9Mb2NhbGVMb3dlckNhc2UoKSx0aGlzLl9sb25nTW9udGhzUGFyc2VbZF09dGhpcy5tb250aHMoZixcIlwiKS50b0xvY2FsZUxvd2VyQ2FzZSgpO3JldHVybiBjP1wiTU1NXCI9PT1iPyhlPXBlLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSxnKSwtMSE9PWU/ZTpudWxsKTooZT1wZS5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSxnKSwtMSE9PWU/ZTpudWxsKTpcIk1NTVwiPT09Yj8oZT1wZS5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsZyksLTEhPT1lP2U6KGU9cGUuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsZyksLTEhPT1lP2U6bnVsbCkpOihlPXBlLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLGcpLC0xIT09ZT9lOihlPXBlLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSxnKSwtMSE9PWU/ZTpudWxsKSl9ZnVuY3Rpb24gaGEoYSxiLGMpe3ZhciBkLGUsZjtpZih0aGlzLl9tb250aHNQYXJzZUV4YWN0KXJldHVybiBnYS5jYWxsKHRoaXMsYSxiLGMpO1xyXG4vLyBUT0RPOiBhZGQgc29ydGluZ1xyXG4vLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXHJcbi8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxyXG5mb3IodGhpcy5fbW9udGhzUGFyc2V8fCh0aGlzLl9tb250aHNQYXJzZT1bXSx0aGlzLl9sb25nTW9udGhzUGFyc2U9W10sdGhpcy5fc2hvcnRNb250aHNQYXJzZT1bXSksZD0wOzEyPmQ7ZCsrKXtcclxuLy8gdGVzdCB0aGUgcmVnZXhcclxuaWYoZT1qKFsyZTMsZF0pLGMmJiF0aGlzLl9sb25nTW9udGhzUGFyc2VbZF0mJih0aGlzLl9sb25nTW9udGhzUGFyc2VbZF09bmV3IFJlZ0V4cChcIl5cIit0aGlzLm1vbnRocyhlLFwiXCIpLnJlcGxhY2UoXCIuXCIsXCJcIikrXCIkXCIsXCJpXCIpLHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbZF09bmV3IFJlZ0V4cChcIl5cIit0aGlzLm1vbnRoc1Nob3J0KGUsXCJcIikucmVwbGFjZShcIi5cIixcIlwiKStcIiRcIixcImlcIikpLGN8fHRoaXMuX21vbnRoc1BhcnNlW2RdfHwoZj1cIl5cIit0aGlzLm1vbnRocyhlLFwiXCIpK1wifF5cIit0aGlzLm1vbnRoc1Nob3J0KGUsXCJcIiksdGhpcy5fbW9udGhzUGFyc2VbZF09bmV3IFJlZ0V4cChmLnJlcGxhY2UoXCIuXCIsXCJcIiksXCJpXCIpKSxjJiZcIk1NTU1cIj09PWImJnRoaXMuX2xvbmdNb250aHNQYXJzZVtkXS50ZXN0KGEpKXJldHVybiBkO2lmKGMmJlwiTU1NXCI9PT1iJiZ0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2RdLnRlc3QoYSkpcmV0dXJuIGQ7aWYoIWMmJnRoaXMuX21vbnRoc1BhcnNlW2RdLnRlc3QoYSkpcmV0dXJuIGR9fVxyXG4vLyBNT01FTlRTXHJcbmZ1bmN0aW9uIGlhKGEsYil7dmFyIGM7aWYoIWEuaXNWYWxpZCgpKVxyXG4vLyBObyBvcFxyXG5yZXR1cm4gYTtpZihcInN0cmluZ1wiPT10eXBlb2YgYilpZigvXlxcZCskLy50ZXN0KGIpKWI9dChiKTtlbHNlXHJcbi8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XHJcbmlmKGI9YS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UoYiksXCJudW1iZXJcIiE9dHlwZW9mIGIpcmV0dXJuIGE7cmV0dXJuIGM9TWF0aC5taW4oYS5kYXRlKCksZGEoYS55ZWFyKCksYikpLGEuX2RbXCJzZXRcIisoYS5faXNVVEM/XCJVVENcIjpcIlwiKStcIk1vbnRoXCJdKGIsYyksYX1mdW5jdGlvbiBqYShiKXtyZXR1cm4gbnVsbCE9Yj8oaWEodGhpcyxiKSxhLnVwZGF0ZU9mZnNldCh0aGlzLCEwKSx0aGlzKTpPKHRoaXMsXCJNb250aFwiKX1mdW5jdGlvbiBrYSgpe3JldHVybiBkYSh0aGlzLnllYXIoKSx0aGlzLm1vbnRoKCkpfWZ1bmN0aW9uIGxhKGEpe3JldHVybiB0aGlzLl9tb250aHNQYXJzZUV4YWN0PyhoKHRoaXMsXCJfbW9udGhzUmVnZXhcIil8fG5hLmNhbGwodGhpcyksYT90aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4OnRoaXMuX21vbnRoc1Nob3J0UmVnZXgpOihoKHRoaXMsXCJfbW9udGhzU2hvcnRSZWdleFwiKXx8KHRoaXMuX21vbnRoc1Nob3J0UmVnZXg9ZmYpLHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgmJmE/dGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDp0aGlzLl9tb250aHNTaG9ydFJlZ2V4KX1mdW5jdGlvbiBtYShhKXtyZXR1cm4gdGhpcy5fbW9udGhzUGFyc2VFeGFjdD8oaCh0aGlzLFwiX21vbnRoc1JlZ2V4XCIpfHxuYS5jYWxsKHRoaXMpLGE/dGhpcy5fbW9udGhzU3RyaWN0UmVnZXg6dGhpcy5fbW9udGhzUmVnZXgpOihoKHRoaXMsXCJfbW9udGhzUmVnZXhcIil8fCh0aGlzLl9tb250aHNSZWdleD1nZiksdGhpcy5fbW9udGhzU3RyaWN0UmVnZXgmJmE/dGhpcy5fbW9udGhzU3RyaWN0UmVnZXg6dGhpcy5fbW9udGhzUmVnZXgpfWZ1bmN0aW9uIG5hKCl7ZnVuY3Rpb24gYShhLGIpe3JldHVybiBiLmxlbmd0aC1hLmxlbmd0aH12YXIgYixjLGQ9W10sZT1bXSxmPVtdO2ZvcihiPTA7MTI+YjtiKyspYz1qKFsyZTMsYl0pLGQucHVzaCh0aGlzLm1vbnRoc1Nob3J0KGMsXCJcIikpLGUucHVzaCh0aGlzLm1vbnRocyhjLFwiXCIpKSxmLnB1c2godGhpcy5tb250aHMoYyxcIlwiKSksZi5wdXNoKHRoaXMubW9udGhzU2hvcnQoYyxcIlwiKSk7Zm9yKFxyXG4vLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XHJcbi8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cclxuZC5zb3J0KGEpLGUuc29ydChhKSxmLnNvcnQoYSksYj0wOzEyPmI7YisrKWRbYl09XyhkW2JdKSxlW2JdPV8oZVtiXSk7Zm9yKGI9MDsyND5iO2IrKylmW2JdPV8oZltiXSk7dGhpcy5fbW9udGhzUmVnZXg9bmV3IFJlZ0V4cChcIl4oXCIrZi5qb2luKFwifFwiKStcIilcIixcImlcIiksdGhpcy5fbW9udGhzU2hvcnRSZWdleD10aGlzLl9tb250aHNSZWdleCx0aGlzLl9tb250aHNTdHJpY3RSZWdleD1uZXcgUmVnRXhwKFwiXihcIitlLmpvaW4oXCJ8XCIpK1wiKVwiLFwiaVwiKSx0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4PW5ldyBSZWdFeHAoXCJeKFwiK2Quam9pbihcInxcIikrXCIpXCIsXCJpXCIpfVxyXG4vLyBIRUxQRVJTXHJcbmZ1bmN0aW9uIG9hKGEpe3JldHVybiBwYShhKT8zNjY6MzY1fWZ1bmN0aW9uIHBhKGEpe3JldHVybiBhJTQ9PT0wJiZhJTEwMCE9PTB8fGElNDAwPT09MH1mdW5jdGlvbiBxYSgpe3JldHVybiBwYSh0aGlzLnllYXIoKSl9ZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsZyl7XHJcbi8vY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XHJcbi8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODEzNDgvaW5zdGFudGlhdGluZy1hLWphdmFzY3JpcHQtb2JqZWN0LWJ5LWNhbGxpbmctcHJvdG90eXBlLWNvbnN0cnVjdG9yLWFwcGx5XHJcbnZhciBoPW5ldyBEYXRlKGEsYixjLGQsZSxmLGcpO1xyXG4vL3RoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxyXG5yZXR1cm4gMTAwPmEmJmE+PTAmJmlzRmluaXRlKGguZ2V0RnVsbFllYXIoKSkmJmguc2V0RnVsbFllYXIoYSksaH1mdW5jdGlvbiBzYShhKXt2YXIgYj1uZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLGFyZ3VtZW50cykpO1xyXG4vL3RoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcclxucmV0dXJuIDEwMD5hJiZhPj0wJiZpc0Zpbml0ZShiLmdldFVUQ0Z1bGxZZWFyKCkpJiZiLnNldFVUQ0Z1bGxZZWFyKGEpLGJ9XHJcbi8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXHJcbmZ1bmN0aW9uIHRhKGEsYixjKXt2YXIvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcclxuZD03K2ItYyxcclxuLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxyXG5lPSg3K3NhKGEsMCxkKS5nZXRVVENEYXkoKS1iKSU3O3JldHVybi1lK2QtMX1cclxuLy9odHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XHJcbmZ1bmN0aW9uIHVhKGEsYixjLGQsZSl7dmFyIGYsZyxoPSg3K2MtZCklNyxpPXRhKGEsZCxlKSxqPTErNyooYi0xKStoK2k7cmV0dXJuIDA+PWo/KGY9YS0xLGc9b2EoZikraik6aj5vYShhKT8oZj1hKzEsZz1qLW9hKGEpKTooZj1hLGc9aikse3llYXI6ZixkYXlPZlllYXI6Z319ZnVuY3Rpb24gdmEoYSxiLGMpe3ZhciBkLGUsZj10YShhLnllYXIoKSxiLGMpLGc9TWF0aC5mbG9vcigoYS5kYXlPZlllYXIoKS1mLTEpLzcpKzE7cmV0dXJuIDE+Zz8oZT1hLnllYXIoKS0xLGQ9Zyt3YShlLGIsYykpOmc+d2EoYS55ZWFyKCksYixjKT8oZD1nLXdhKGEueWVhcigpLGIsYyksZT1hLnllYXIoKSsxKTooZT1hLnllYXIoKSxkPWcpLHt3ZWVrOmQseWVhcjplfX1mdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9dGEoYSxiLGMpLGU9dGEoYSsxLGIsYyk7cmV0dXJuKG9hKGEpLWQrZSkvN31cclxuLy8gSEVMUEVSU1xyXG4vLyBMT0NBTEVTXHJcbmZ1bmN0aW9uIHhhKGEpe3JldHVybiB2YShhLHRoaXMuX3dlZWsuZG93LHRoaXMuX3dlZWsuZG95KS53ZWVrfWZ1bmN0aW9uIHlhKCl7cmV0dXJuIHRoaXMuX3dlZWsuZG93fWZ1bmN0aW9uIHphKCl7cmV0dXJuIHRoaXMuX3dlZWsuZG95fVxyXG4vLyBNT01FTlRTXHJcbmZ1bmN0aW9uIEFhKGEpe3ZhciBiPXRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7cmV0dXJuIG51bGw9PWE/Yjp0aGlzLmFkZCg3KihhLWIpLFwiZFwiKX1mdW5jdGlvbiBCYShhKXt2YXIgYj12YSh0aGlzLDEsNCkud2VlaztyZXR1cm4gbnVsbD09YT9iOnRoaXMuYWRkKDcqKGEtYiksXCJkXCIpfVxyXG4vLyBIRUxQRVJTXHJcbmZ1bmN0aW9uIENhKGEsYil7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGE/YTppc05hTihhKT8oYT1iLndlZWtkYXlzUGFyc2UoYSksXCJudW1iZXJcIj09dHlwZW9mIGE/YTpudWxsKTpwYXJzZUludChhLDEwKX1mdW5jdGlvbiBEYShhLGIpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhP2Iud2Vla2RheXNQYXJzZShhKSU3fHw3OmlzTmFOKGEpP251bGw6YX1mdW5jdGlvbiBFYShhLGIpe3JldHVybiBjKHRoaXMuX3dlZWtkYXlzKT90aGlzLl93ZWVrZGF5c1thLmRheSgpXTp0aGlzLl93ZWVrZGF5c1t0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGIpP1wiZm9ybWF0XCI6XCJzdGFuZGFsb25lXCJdW2EuZGF5KCldfWZ1bmN0aW9uIEZhKGEpe3JldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0W2EuZGF5KCldfWZ1bmN0aW9uIEdhKGEpe3JldHVybiB0aGlzLl93ZWVrZGF5c01pblthLmRheSgpXX1mdW5jdGlvbiBIYShhLGIsYyl7dmFyIGQsZSxmLGc9YS50b0xvY2FsZUxvd2VyQ2FzZSgpO2lmKCF0aGlzLl93ZWVrZGF5c1BhcnNlKWZvcih0aGlzLl93ZWVrZGF5c1BhcnNlPVtdLHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZT1bXSx0aGlzLl9taW5XZWVrZGF5c1BhcnNlPVtdLGQ9MDs3PmQ7KytkKWY9aihbMmUzLDFdKS5kYXkoZCksdGhpcy5fbWluV2Vla2RheXNQYXJzZVtkXT10aGlzLndlZWtkYXlzTWluKGYsXCJcIikudG9Mb2NhbGVMb3dlckNhc2UoKSx0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbZF09dGhpcy53ZWVrZGF5c1Nob3J0KGYsXCJcIikudG9Mb2NhbGVMb3dlckNhc2UoKSx0aGlzLl93ZWVrZGF5c1BhcnNlW2RdPXRoaXMud2Vla2RheXMoZixcIlwiKS50b0xvY2FsZUxvd2VyQ2FzZSgpO3JldHVybiBjP1wiZGRkZFwiPT09Yj8oZT1wZS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6bnVsbCk6XCJkZGRcIj09PWI/KGU9cGUuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6bnVsbCk6KGU9cGUuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLGcpLC0xIT09ZT9lOm51bGwpOlwiZGRkZFwiPT09Yj8oZT1wZS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6KGU9cGUuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6KGU9cGUuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLGcpLC0xIT09ZT9lOm51bGwpKSk6XCJkZGRcIj09PWI/KGU9cGUuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6KGU9cGUuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLGcpLC0xIT09ZT9lOihlPXBlLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSxnKSwtMSE9PWU/ZTpudWxsKSkpOihlPXBlLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSxnKSwtMSE9PWU/ZTooZT1wZS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6KGU9cGUuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsZyksLTEhPT1lP2U6bnVsbCkpKX1mdW5jdGlvbiBJYShhLGIsYyl7dmFyIGQsZSxmO2lmKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdClyZXR1cm4gSGEuY2FsbCh0aGlzLGEsYixjKTtmb3IodGhpcy5fd2Vla2RheXNQYXJzZXx8KHRoaXMuX3dlZWtkYXlzUGFyc2U9W10sdGhpcy5fbWluV2Vla2RheXNQYXJzZT1bXSx0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2U9W10sdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2U9W10pLGQ9MDs3PmQ7ZCsrKXtcclxuLy8gdGVzdCB0aGUgcmVnZXhcclxuaWYoZT1qKFsyZTMsMV0pLmRheShkKSxjJiYhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbZF0mJih0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtkXT1uZXcgUmVnRXhwKFwiXlwiK3RoaXMud2Vla2RheXMoZSxcIlwiKS5yZXBsYWNlKFwiLlwiLFwiLj9cIikrXCIkXCIsXCJpXCIpLHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtkXT1uZXcgUmVnRXhwKFwiXlwiK3RoaXMud2Vla2RheXNTaG9ydChlLFwiXCIpLnJlcGxhY2UoXCIuXCIsXCIuP1wiKStcIiRcIixcImlcIiksdGhpcy5fbWluV2Vla2RheXNQYXJzZVtkXT1uZXcgUmVnRXhwKFwiXlwiK3RoaXMud2Vla2RheXNNaW4oZSxcIlwiKS5yZXBsYWNlKFwiLlwiLFwiLj9cIikrXCIkXCIsXCJpXCIpKSx0aGlzLl93ZWVrZGF5c1BhcnNlW2RdfHwoZj1cIl5cIit0aGlzLndlZWtkYXlzKGUsXCJcIikrXCJ8XlwiK3RoaXMud2Vla2RheXNTaG9ydChlLFwiXCIpK1wifF5cIit0aGlzLndlZWtkYXlzTWluKGUsXCJcIiksdGhpcy5fd2Vla2RheXNQYXJzZVtkXT1uZXcgUmVnRXhwKGYucmVwbGFjZShcIi5cIixcIlwiKSxcImlcIikpLGMmJlwiZGRkZFwiPT09YiYmdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbZF0udGVzdChhKSlyZXR1cm4gZDtpZihjJiZcImRkZFwiPT09YiYmdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2RdLnRlc3QoYSkpcmV0dXJuIGQ7aWYoYyYmXCJkZFwiPT09YiYmdGhpcy5fbWluV2Vla2RheXNQYXJzZVtkXS50ZXN0KGEpKXJldHVybiBkO2lmKCFjJiZ0aGlzLl93ZWVrZGF5c1BhcnNlW2RdLnRlc3QoYSkpcmV0dXJuIGR9fVxyXG4vLyBNT01FTlRTXHJcbmZ1bmN0aW9uIEphKGEpe2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbnVsbCE9YT90aGlzOk5hTjt2YXIgYj10aGlzLl9pc1VUQz90aGlzLl9kLmdldFVUQ0RheSgpOnRoaXMuX2QuZ2V0RGF5KCk7cmV0dXJuIG51bGwhPWE/KGE9Q2EoYSx0aGlzLmxvY2FsZURhdGEoKSksdGhpcy5hZGQoYS1iLFwiZFwiKSk6Yn1mdW5jdGlvbiBLYShhKXtpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuIG51bGwhPWE/dGhpczpOYU47dmFyIGI9KHRoaXMuZGF5KCkrNy10aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpJTc7cmV0dXJuIG51bGw9PWE/Yjp0aGlzLmFkZChhLWIsXCJkXCIpfWZ1bmN0aW9uIExhKGEpe2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbnVsbCE9YT90aGlzOk5hTjtcclxuLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxyXG4vLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxyXG4vLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXHJcbmlmKG51bGwhPWEpe3ZhciBiPURhKGEsdGhpcy5sb2NhbGVEYXRhKCkpO3JldHVybiB0aGlzLmRheSh0aGlzLmRheSgpJTc/YjpiLTcpfXJldHVybiB0aGlzLmRheSgpfHw3fWZ1bmN0aW9uIE1hKGEpe3JldHVybiB0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3Q/KGgodGhpcyxcIl93ZWVrZGF5c1JlZ2V4XCIpfHxQYS5jYWxsKHRoaXMpLGE/dGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDp0aGlzLl93ZWVrZGF5c1JlZ2V4KTooaCh0aGlzLFwiX3dlZWtkYXlzUmVnZXhcIil8fCh0aGlzLl93ZWVrZGF5c1JlZ2V4PW5mKSx0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4JiZhP3RoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg6dGhpcy5fd2Vla2RheXNSZWdleCl9ZnVuY3Rpb24gTmEoYSl7cmV0dXJuIHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdD8oaCh0aGlzLFwiX3dlZWtkYXlzUmVnZXhcIil8fFBhLmNhbGwodGhpcyksYT90aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg6dGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4KTooaCh0aGlzLFwiX3dlZWtkYXlzU2hvcnRSZWdleFwiKXx8KHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleD1vZiksdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4JiZhP3RoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDp0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXgpfWZ1bmN0aW9uIE9hKGEpe3JldHVybiB0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3Q/KGgodGhpcyxcIl93ZWVrZGF5c1JlZ2V4XCIpfHxQYS5jYWxsKHRoaXMpLGE/dGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDp0aGlzLl93ZWVrZGF5c01pblJlZ2V4KTooaCh0aGlzLFwiX3dlZWtkYXlzTWluUmVnZXhcIil8fCh0aGlzLl93ZWVrZGF5c01pblJlZ2V4PXBmKSx0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4JiZhP3RoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg6dGhpcy5fd2Vla2RheXNNaW5SZWdleCl9ZnVuY3Rpb24gUGEoKXtmdW5jdGlvbiBhKGEsYil7cmV0dXJuIGIubGVuZ3RoLWEubGVuZ3RofXZhciBiLGMsZCxlLGYsZz1bXSxoPVtdLGk9W10saz1bXTtmb3IoYj0wOzc+YjtiKyspYz1qKFsyZTMsMV0pLmRheShiKSxkPXRoaXMud2Vla2RheXNNaW4oYyxcIlwiKSxlPXRoaXMud2Vla2RheXNTaG9ydChjLFwiXCIpLGY9dGhpcy53ZWVrZGF5cyhjLFwiXCIpLGcucHVzaChkKSxoLnB1c2goZSksaS5wdXNoKGYpLGsucHVzaChkKSxrLnB1c2goZSksay5wdXNoKGYpO2ZvcihcclxuLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XHJcbi8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cclxuZy5zb3J0KGEpLGguc29ydChhKSxpLnNvcnQoYSksay5zb3J0KGEpLGI9MDs3PmI7YisrKWhbYl09XyhoW2JdKSxpW2JdPV8oaVtiXSksa1tiXT1fKGtbYl0pO3RoaXMuX3dlZWtkYXlzUmVnZXg9bmV3IFJlZ0V4cChcIl4oXCIray5qb2luKFwifFwiKStcIilcIixcImlcIiksdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4PXRoaXMuX3dlZWtkYXlzUmVnZXgsdGhpcy5fd2Vla2RheXNNaW5SZWdleD10aGlzLl93ZWVrZGF5c1JlZ2V4LHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg9bmV3IFJlZ0V4cChcIl4oXCIraS5qb2luKFwifFwiKStcIilcIixcImlcIiksdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4PW5ldyBSZWdFeHAoXCJeKFwiK2guam9pbihcInxcIikrXCIpXCIsXCJpXCIpLHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg9bmV3IFJlZ0V4cChcIl4oXCIrZy5qb2luKFwifFwiKStcIilcIixcImlcIil9XHJcbi8vIEZPUk1BVFRJTkdcclxuZnVuY3Rpb24gUWEoKXtyZXR1cm4gdGhpcy5ob3VycygpJTEyfHwxMn1mdW5jdGlvbiBSYSgpe3JldHVybiB0aGlzLmhvdXJzKCl8fDI0fWZ1bmN0aW9uIFNhKGEsYil7VChhLDAsMCxmdW5jdGlvbigpe3JldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksdGhpcy5taW51dGVzKCksYil9KX1cclxuLy8gUEFSU0lOR1xyXG5mdW5jdGlvbiBUYShhLGIpe3JldHVybiBiLl9tZXJpZGllbVBhcnNlfVxyXG4vLyBMT0NBTEVTXHJcbmZ1bmN0aW9uIFVhKGEpe1xyXG4vLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXHJcbi8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxyXG5yZXR1cm5cInBcIj09PShhK1wiXCIpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApfWZ1bmN0aW9uIFZhKGEsYixjKXtyZXR1cm4gYT4xMT9jP1wicG1cIjpcIlBNXCI6Yz9cImFtXCI6XCJBTVwifWZ1bmN0aW9uIFdhKGEpe3JldHVybiBhP2EudG9Mb3dlckNhc2UoKS5yZXBsYWNlKFwiX1wiLFwiLVwiKTphfVxyXG4vLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcclxuLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcclxuLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxyXG5mdW5jdGlvbiBYYShhKXtmb3IodmFyIGIsYyxkLGUsZj0wO2Y8YS5sZW5ndGg7KXtmb3IoZT1XYShhW2ZdKS5zcGxpdChcIi1cIiksYj1lLmxlbmd0aCxjPVdhKGFbZisxXSksYz1jP2Muc3BsaXQoXCItXCIpOm51bGw7Yj4wOyl7aWYoZD1ZYShlLnNsaWNlKDAsYikuam9pbihcIi1cIikpKXJldHVybiBkO2lmKGMmJmMubGVuZ3RoPj1iJiZ1KGUsYywhMCk+PWItMSlcclxuLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxyXG5icmVhaztiLS19ZisrfXJldHVybiBudWxsfWZ1bmN0aW9uIFlhKGEpe3ZhciBiPW51bGw7XHJcbi8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXHJcbmlmKCF1ZlthXSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyl0cnl7Yj1xZi5fYWJicixyZXF1aXJlKFwiLi9sb2NhbGUvXCIrYSksXHJcbi8vIGJlY2F1c2UgZGVmaW5lTG9jYWxlIGN1cnJlbnRseSBhbHNvIHNldHMgdGhlIGdsb2JhbCBsb2NhbGUsIHdlXHJcbi8vIHdhbnQgdG8gdW5kbyB0aGF0IGZvciBsYXp5IGxvYWRlZCBsb2NhbGVzXHJcblphKGIpfWNhdGNoKGMpe31yZXR1cm4gdWZbYV19XHJcbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxyXG4vLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxyXG4vLyBsb2NhbGUga2V5LlxyXG5mdW5jdGlvbiBaYShhLGIpe3ZhciBjO1xyXG4vLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcclxucmV0dXJuIGEmJihjPW8oYik/YWIoYSk6JGEoYSxiKSxjJiYocWY9YykpLHFmLl9hYmJyfWZ1bmN0aW9uICRhKGEsYil7aWYobnVsbCE9PWIpe3ZhciBjPXRmO1xyXG4vLyB0cmVhdCBhcyBpZiB0aGVyZSBpcyBubyBiYXNlIGNvbmZpZ1xyXG4vLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcclxucmV0dXJuIGIuYWJicj1hLG51bGwhPXVmW2FdPyh4KFwiZGVmaW5lTG9jYWxlT3ZlcnJpZGVcIixcInVzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlIGFuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLlwiKSxjPXVmW2FdLl9jb25maWcpOm51bGwhPWIucGFyZW50TG9jYWxlJiYobnVsbCE9dWZbYi5wYXJlbnRMb2NhbGVdP2M9dWZbYi5wYXJlbnRMb2NhbGVdLl9jb25maWc6eChcInBhcmVudExvY2FsZVVuZGVmaW5lZFwiLFwic3BlY2lmaWVkIHBhcmVudExvY2FsZSBpcyBub3QgZGVmaW5lZCB5ZXQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3BhcmVudC1sb2NhbGUvXCIpKSx1ZlthXT1uZXcgQihBKGMsYikpLFphKGEpLHVmW2FdfVxyXG4vLyB1c2VmdWwgZm9yIHRlc3RpbmdcclxucmV0dXJuIGRlbGV0ZSB1ZlthXSxudWxsfWZ1bmN0aW9uIF9hKGEsYil7aWYobnVsbCE9Yil7dmFyIGMsZD10ZjtcclxuLy8gTUVSR0VcclxubnVsbCE9dWZbYV0mJihkPXVmW2FdLl9jb25maWcpLGI9QShkLGIpLGM9bmV3IEIoYiksYy5wYXJlbnRMb2NhbGU9dWZbYV0sdWZbYV09YyxcclxuLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXHJcblphKGEpfWVsc2VcclxuLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcclxubnVsbCE9dWZbYV0mJihudWxsIT11ZlthXS5wYXJlbnRMb2NhbGU/dWZbYV09dWZbYV0ucGFyZW50TG9jYWxlOm51bGwhPXVmW2FdJiZkZWxldGUgdWZbYV0pO3JldHVybiB1ZlthXX1cclxuLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxyXG5mdW5jdGlvbiBhYihhKXt2YXIgYjtpZihhJiZhLl9sb2NhbGUmJmEuX2xvY2FsZS5fYWJiciYmKGE9YS5fbG9jYWxlLl9hYmJyKSwhYSlyZXR1cm4gcWY7aWYoIWMoYSkpe2lmKGI9WWEoYSkpcmV0dXJuIGI7YT1bYV19cmV0dXJuIFhhKGEpfWZ1bmN0aW9uIGJiKCl7cmV0dXJuIG9lKHVmKX1mdW5jdGlvbiBjYihhKXt2YXIgYixjPWEuX2E7cmV0dXJuIGMmJi0yPT09bChhKS5vdmVyZmxvdyYmKGI9Y1tXZV08MHx8Y1tXZV0+MTE/V2U6Y1tYZV08MXx8Y1tYZV0+ZGEoY1tWZV0sY1tXZV0pP1hlOmNbWWVdPDB8fGNbWWVdPjI0fHwyND09PWNbWWVdJiYoMCE9PWNbWmVdfHwwIT09Y1skZV18fDAhPT1jW19lXSk/WWU6Y1taZV08MHx8Y1taZV0+NTk/WmU6Y1skZV08MHx8Y1skZV0+NTk/JGU6Y1tfZV08MHx8Y1tfZV0+OTk5P19lOi0xLGwoYSkuX292ZXJmbG93RGF5T2ZZZWFyJiYoVmU+Ynx8Yj5YZSkmJihiPVhlKSxsKGEpLl9vdmVyZmxvd1dlZWtzJiYtMT09PWImJihiPWFmKSxsKGEpLl9vdmVyZmxvd1dlZWtkYXkmJi0xPT09YiYmKGI9YmYpLGwoYSkub3ZlcmZsb3c9YiksYX1cclxuLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcclxuZnVuY3Rpb24gZGIoYSl7dmFyIGIsYyxkLGUsZixnLGg9YS5faSxpPXZmLmV4ZWMoaCl8fHdmLmV4ZWMoaCk7aWYoaSl7Zm9yKGwoYSkuaXNvPSEwLGI9MCxjPXlmLmxlbmd0aDtjPmI7YisrKWlmKHlmW2JdWzFdLmV4ZWMoaVsxXSkpe2U9eWZbYl1bMF0sZD15ZltiXVsyXSE9PSExO2JyZWFrfWlmKG51bGw9PWUpcmV0dXJuIHZvaWQoYS5faXNWYWxpZD0hMSk7aWYoaVszXSl7Zm9yKGI9MCxjPXpmLmxlbmd0aDtjPmI7YisrKWlmKHpmW2JdWzFdLmV4ZWMoaVszXSkpe1xyXG4vLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXHJcbmY9KGlbMl18fFwiIFwiKSt6ZltiXVswXTticmVha31pZihudWxsPT1mKXJldHVybiB2b2lkKGEuX2lzVmFsaWQ9ITEpfWlmKCFkJiZudWxsIT1mKXJldHVybiB2b2lkKGEuX2lzVmFsaWQ9ITEpO2lmKGlbNF0pe2lmKCF4Zi5leGVjKGlbNF0pKXJldHVybiB2b2lkKGEuX2lzVmFsaWQ9ITEpO2c9XCJaXCJ9YS5fZj1lKyhmfHxcIlwiKSsoZ3x8XCJcIiksamIoYSl9ZWxzZSBhLl9pc1ZhbGlkPSExfVxyXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xyXG5mdW5jdGlvbiBlYihiKXt2YXIgYz1BZi5leGVjKGIuX2kpO3JldHVybiBudWxsIT09Yz92b2lkKGIuX2Q9bmV3IERhdGUoK2NbMV0pKTooZGIoYiksdm9pZChiLl9pc1ZhbGlkPT09ITEmJihkZWxldGUgYi5faXNWYWxpZCxhLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGIpKSkpfVxyXG4vLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXHJcbmZ1bmN0aW9uIGZiKGEsYixjKXtyZXR1cm4gbnVsbCE9YT9hOm51bGwhPWI/YjpjfWZ1bmN0aW9uIGdiKGIpe1xyXG4vLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxyXG52YXIgYz1uZXcgRGF0ZShhLm5vdygpKTtyZXR1cm4gYi5fdXNlVVRDP1tjLmdldFVUQ0Z1bGxZZWFyKCksYy5nZXRVVENNb250aCgpLGMuZ2V0VVRDRGF0ZSgpXTpbYy5nZXRGdWxsWWVhcigpLGMuZ2V0TW9udGgoKSxjLmdldERhdGUoKV19XHJcbi8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxyXG4vLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xyXG4vLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cclxuLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXHJcbmZ1bmN0aW9uIGhiKGEpe3ZhciBiLGMsZCxlLGY9W107aWYoIWEuX2Qpe1xyXG4vLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cclxuLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxyXG4vLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxyXG4vLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxyXG4vLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcclxuZm9yKGQ9Z2IoYSksYS5fdyYmbnVsbD09YS5fYVtYZV0mJm51bGw9PWEuX2FbV2VdJiZpYihhKSxhLl9kYXlPZlllYXImJihlPWZiKGEuX2FbVmVdLGRbVmVdKSxhLl9kYXlPZlllYXI+b2EoZSkmJihsKGEpLl9vdmVyZmxvd0RheU9mWWVhcj0hMCksYz1zYShlLDAsYS5fZGF5T2ZZZWFyKSxhLl9hW1dlXT1jLmdldFVUQ01vbnRoKCksYS5fYVtYZV09Yy5nZXRVVENEYXRlKCkpLGI9MDszPmImJm51bGw9PWEuX2FbYl07KytiKWEuX2FbYl09ZltiXT1kW2JdO1xyXG4vLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcclxuZm9yKDs3PmI7YisrKWEuX2FbYl09ZltiXT1udWxsPT1hLl9hW2JdPzI9PT1iPzE6MDphLl9hW2JdO1xyXG4vLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXHJcbjI0PT09YS5fYVtZZV0mJjA9PT1hLl9hW1plXSYmMD09PWEuX2FbJGVdJiYwPT09YS5fYVtfZV0mJihhLl9uZXh0RGF5PSEwLGEuX2FbWWVdPTApLGEuX2Q9KGEuX3VzZVVUQz9zYTpyYSkuYXBwbHkobnVsbCxmKSxcclxuLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXHJcbi8vIHdpdGggcGFyc2Vab25lLlxyXG5udWxsIT1hLl90em0mJmEuX2Quc2V0VVRDTWludXRlcyhhLl9kLmdldFVUQ01pbnV0ZXMoKS1hLl90em0pLGEuX25leHREYXkmJihhLl9hW1llXT0yNCl9fWZ1bmN0aW9uIGliKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGk7Yj1hLl93LG51bGwhPWIuR0d8fG51bGwhPWIuV3x8bnVsbCE9Yi5FPyhmPTEsZz00LGM9ZmIoYi5HRyxhLl9hW1ZlXSx2YShyYigpLDEsNCkueWVhciksZD1mYihiLlcsMSksZT1mYihiLkUsMSksKDE+ZXx8ZT43KSYmKGk9ITApKTooZj1hLl9sb2NhbGUuX3dlZWsuZG93LGc9YS5fbG9jYWxlLl93ZWVrLmRveSxjPWZiKGIuZ2csYS5fYVtWZV0sdmEocmIoKSxmLGcpLnllYXIpLGQ9ZmIoYi53LDEpLG51bGwhPWIuZD8oZT1iLmQsKDA+ZXx8ZT42KSYmKGk9ITApKTpudWxsIT1iLmU/KGU9Yi5lK2YsKGIuZTwwfHxiLmU+NikmJihpPSEwKSk6ZT1mKSwxPmR8fGQ+d2EoYyxmLGcpP2woYSkuX292ZXJmbG93V2Vla3M9ITA6bnVsbCE9aT9sKGEpLl9vdmVyZmxvd1dlZWtkYXk9ITA6KGg9dWEoYyxkLGUsZixnKSxhLl9hW1ZlXT1oLnllYXIsYS5fZGF5T2ZZZWFyPWguZGF5T2ZZZWFyKX1cclxuLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xyXG5mdW5jdGlvbiBqYihiKXtcclxuLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcclxuaWYoYi5fZj09PWEuSVNPXzg2MDEpcmV0dXJuIHZvaWQgZGIoYik7Yi5fYT1bXSxsKGIpLmVtcHR5PSEwO1xyXG4vLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxyXG52YXIgYyxkLGUsZixnLGg9XCJcIitiLl9pLGk9aC5sZW5ndGgsaj0wO2ZvcihlPVgoYi5fZixiLl9sb2NhbGUpLm1hdGNoKHllKXx8W10sYz0wO2M8ZS5sZW5ndGg7YysrKWY9ZVtjXSxkPShoLm1hdGNoKFooZixiKSl8fFtdKVswXSxkJiYoZz1oLnN1YnN0cigwLGguaW5kZXhPZihkKSksZy5sZW5ndGg+MCYmbChiKS51bnVzZWRJbnB1dC5wdXNoKGcpLGg9aC5zbGljZShoLmluZGV4T2YoZCkrZC5sZW5ndGgpLGorPWQubGVuZ3RoKSxCZVtmXT8oZD9sKGIpLmVtcHR5PSExOmwoYikudW51c2VkVG9rZW5zLnB1c2goZiksY2EoZixkLGIpKTpiLl9zdHJpY3QmJiFkJiZsKGIpLnVudXNlZFRva2Vucy5wdXNoKGYpO1xyXG4vLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXHJcbmwoYikuY2hhcnNMZWZ0T3Zlcj1pLWosaC5sZW5ndGg+MCYmbChiKS51bnVzZWRJbnB1dC5wdXNoKGgpLFxyXG4vLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxyXG5iLl9hW1llXTw9MTImJmwoYikuYmlnSG91cj09PSEwJiZiLl9hW1llXT4wJiYobChiKS5iaWdIb3VyPXZvaWQgMCksbChiKS5wYXJzZWREYXRlUGFydHM9Yi5fYS5zbGljZSgwKSxsKGIpLm1lcmlkaWVtPWIuX21lcmlkaWVtLFxyXG4vLyBoYW5kbGUgbWVyaWRpZW1cclxuYi5fYVtZZV09a2IoYi5fbG9jYWxlLGIuX2FbWWVdLGIuX21lcmlkaWVtKSxoYihiKSxjYihiKX1mdW5jdGlvbiBrYihhLGIsYyl7dmFyIGQ7XHJcbi8vIEZhbGxiYWNrXHJcbnJldHVybiBudWxsPT1jP2I6bnVsbCE9YS5tZXJpZGllbUhvdXI/YS5tZXJpZGllbUhvdXIoYixjKTpudWxsIT1hLmlzUE0/KGQ9YS5pc1BNKGMpLGQmJjEyPmImJihiKz0xMiksZHx8MTIhPT1ifHwoYj0wKSxiKTpifVxyXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xyXG5mdW5jdGlvbiBsYihhKXt2YXIgYixjLGQsZSxmO2lmKDA9PT1hLl9mLmxlbmd0aClyZXR1cm4gbChhKS5pbnZhbGlkRm9ybWF0PSEwLHZvaWQoYS5fZD1uZXcgRGF0ZShOYU4pKTtmb3IoZT0wO2U8YS5fZi5sZW5ndGg7ZSsrKWY9MCxiPXAoe30sYSksbnVsbCE9YS5fdXNlVVRDJiYoYi5fdXNlVVRDPWEuX3VzZVVUQyksYi5fZj1hLl9mW2VdLGpiKGIpLG0oYikmJihmKz1sKGIpLmNoYXJzTGVmdE92ZXIsZis9MTAqbChiKS51bnVzZWRUb2tlbnMubGVuZ3RoLGwoYikuc2NvcmU9ZiwobnVsbD09ZHx8ZD5mKSYmKGQ9ZixjPWIpKTtpKGEsY3x8Yil9ZnVuY3Rpb24gbWIoYSl7aWYoIWEuX2Qpe3ZhciBiPUsoYS5faSk7YS5fYT1nKFtiLnllYXIsYi5tb250aCxiLmRheXx8Yi5kYXRlLGIuaG91cixiLm1pbnV0ZSxiLnNlY29uZCxiLm1pbGxpc2Vjb25kXSxmdW5jdGlvbihhKXtyZXR1cm4gYSYmcGFyc2VJbnQoYSwxMCl9KSxoYihhKX19ZnVuY3Rpb24gbmIoYSl7dmFyIGI9bmV3IHEoY2Iob2IoYSkpKTtcclxuLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXHJcbnJldHVybiBiLl9uZXh0RGF5JiYoYi5hZGQoMSxcImRcIiksYi5fbmV4dERheT12b2lkIDApLGJ9ZnVuY3Rpb24gb2IoYSl7dmFyIGI9YS5faSxkPWEuX2Y7cmV0dXJuIGEuX2xvY2FsZT1hLl9sb2NhbGV8fGFiKGEuX2wpLG51bGw9PT1ifHx2b2lkIDA9PT1kJiZcIlwiPT09Yj9uKHtudWxsSW5wdXQ6ITB9KTooXCJzdHJpbmdcIj09dHlwZW9mIGImJihhLl9pPWI9YS5fbG9jYWxlLnByZXBhcnNlKGIpKSxyKGIpP25ldyBxKGNiKGIpKTooYyhkKT9sYihhKTpmKGIpP2EuX2Q9YjpkP2piKGEpOnBiKGEpLG0oYSl8fChhLl9kPW51bGwpLGEpKX1mdW5jdGlvbiBwYihiKXt2YXIgZD1iLl9pO3ZvaWQgMD09PWQ/Yi5fZD1uZXcgRGF0ZShhLm5vdygpKTpmKGQpP2IuX2Q9bmV3IERhdGUoZC52YWx1ZU9mKCkpOlwic3RyaW5nXCI9PXR5cGVvZiBkP2ViKGIpOmMoZCk/KGIuX2E9ZyhkLnNsaWNlKDApLGZ1bmN0aW9uKGEpe3JldHVybiBwYXJzZUludChhLDEwKX0pLGhiKGIpKTpcIm9iamVjdFwiPT10eXBlb2YgZD9tYihiKTpcIm51bWJlclwiPT10eXBlb2YgZD9cclxuLy8gZnJvbSBtaWxsaXNlY29uZHNcclxuYi5fZD1uZXcgRGF0ZShkKTphLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGIpfWZ1bmN0aW9uIHFiKGEsYixmLGcsaCl7dmFyIGk9e307XHJcbi8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xyXG5yZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGYmJihnPWYsZj12b2lkIDApLChkKGEpJiZlKGEpfHxjKGEpJiYwPT09YS5sZW5ndGgpJiYoYT12b2lkIDApLGkuX2lzQU1vbWVudE9iamVjdD0hMCxpLl91c2VVVEM9aS5faXNVVEM9aCxpLl9sPWYsaS5faT1hLGkuX2Y9YixpLl9zdHJpY3Q9ZyxuYihpKX1mdW5jdGlvbiByYihhLGIsYyxkKXtyZXR1cm4gcWIoYSxiLGMsZCwhMSl9XHJcbi8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXHJcbi8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cclxuLy9cclxuLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxyXG4vLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxyXG5mdW5jdGlvbiBzYihhLGIpe3ZhciBkLGU7aWYoMT09PWIubGVuZ3RoJiZjKGJbMF0pJiYoYj1iWzBdKSwhYi5sZW5ndGgpcmV0dXJuIHJiKCk7Zm9yKGQ9YlswXSxlPTE7ZTxiLmxlbmd0aDsrK2UpYltlXS5pc1ZhbGlkKCkmJiFiW2VdW2FdKGQpfHwoZD1iW2VdKTtyZXR1cm4gZH1cclxuLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cclxuZnVuY3Rpb24gdGIoKXt2YXIgYT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gc2IoXCJpc0JlZm9yZVwiLGEpfWZ1bmN0aW9uIHViKCl7dmFyIGE9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIHNiKFwiaXNBZnRlclwiLGEpfWZ1bmN0aW9uIHZiKGEpe3ZhciBiPUsoYSksYz1iLnllYXJ8fDAsZD1iLnF1YXJ0ZXJ8fDAsZT1iLm1vbnRofHwwLGY9Yi53ZWVrfHwwLGc9Yi5kYXl8fDAsaD1iLmhvdXJ8fDAsaT1iLm1pbnV0ZXx8MCxqPWIuc2Vjb25kfHwwLGs9Yi5taWxsaXNlY29uZHx8MDtcclxuLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcclxudGhpcy5fbWlsbGlzZWNvbmRzPStrKzFlMypqKy8vIDEwMDBcclxuNmU0KmkrLy8gMTAwMCAqIDYwXHJcbjFlMypoKjYwKjYwLC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxyXG4vLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcclxuLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxyXG50aGlzLl9kYXlzPStnKzcqZixcclxuLy8gSXQgaXMgaW1wb3NzaWJsZSB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcclxuLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcclxuLy8gaXQgc2VwYXJhdGVseS5cclxudGhpcy5fbW9udGhzPStlKzMqZCsxMipjLHRoaXMuX2RhdGE9e30sdGhpcy5fbG9jYWxlPWFiKCksdGhpcy5fYnViYmxlKCl9ZnVuY3Rpb24gd2IoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiB2Yn1cclxuLy8gRk9STUFUVElOR1xyXG5mdW5jdGlvbiB4YihhLGIpe1QoYSwwLDAsZnVuY3Rpb24oKXt2YXIgYT10aGlzLnV0Y09mZnNldCgpLGM9XCIrXCI7cmV0dXJuIDA+YSYmKGE9LWEsYz1cIi1cIiksYytTKH5+KGEvNjApLDIpK2IrUyh+fmElNjAsMil9KX1mdW5jdGlvbiB5YihhLGIpe3ZhciBjPShifHxcIlwiKS5tYXRjaChhKXx8W10sZD1jW2MubGVuZ3RoLTFdfHxbXSxlPShkK1wiXCIpLm1hdGNoKEVmKXx8W1wiLVwiLDAsMF0sZj0rKDYwKmVbMV0pK3QoZVsyXSk7cmV0dXJuXCIrXCI9PT1lWzBdP2Y6LWZ9XHJcbi8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXHJcbmZ1bmN0aW9uIHpiKGIsYyl7dmFyIGQsZTtcclxuLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxyXG5yZXR1cm4gYy5faXNVVEM/KGQ9Yy5jbG9uZSgpLGU9KHIoYil8fGYoYik/Yi52YWx1ZU9mKCk6cmIoYikudmFsdWVPZigpKS1kLnZhbHVlT2YoKSxkLl9kLnNldFRpbWUoZC5fZC52YWx1ZU9mKCkrZSksYS51cGRhdGVPZmZzZXQoZCwhMSksZCk6cmIoYikubG9jYWwoKX1mdW5jdGlvbiBBYihhKXtcclxuLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXHJcbnJldHVybiAxNSotTWF0aC5yb3VuZChhLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfVxyXG4vLyBNT01FTlRTXHJcbi8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxyXG4vLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxyXG4vLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XHJcbi8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cclxuLy9cclxuLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXHJcbi8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxyXG4vLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXHJcbi8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxyXG4vLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxyXG5mdW5jdGlvbiBCYihiLGMpe3ZhciBkLGU9dGhpcy5fb2Zmc2V0fHwwO3JldHVybiB0aGlzLmlzVmFsaWQoKT9udWxsIT1iPyhcInN0cmluZ1wiPT10eXBlb2YgYj9iPXliKFFlLGIpOk1hdGguYWJzKGIpPDE2JiYoYj02MCpiKSwhdGhpcy5faXNVVEMmJmMmJihkPUFiKHRoaXMpKSx0aGlzLl9vZmZzZXQ9Yix0aGlzLl9pc1VUQz0hMCxudWxsIT1kJiZ0aGlzLmFkZChkLFwibVwiKSxlIT09YiYmKCFjfHx0aGlzLl9jaGFuZ2VJblByb2dyZXNzP1NiKHRoaXMsTWIoYi1lLFwibVwiKSwxLCExKTp0aGlzLl9jaGFuZ2VJblByb2dyZXNzfHwodGhpcy5fY2hhbmdlSW5Qcm9ncmVzcz0hMCxhLnVwZGF0ZU9mZnNldCh0aGlzLCEwKSx0aGlzLl9jaGFuZ2VJblByb2dyZXNzPW51bGwpKSx0aGlzKTp0aGlzLl9pc1VUQz9lOkFiKHRoaXMpOm51bGwhPWI/dGhpczpOYU59ZnVuY3Rpb24gQ2IoYSxiKXtyZXR1cm4gbnVsbCE9YT8oXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihhPS1hKSx0aGlzLnV0Y09mZnNldChhLGIpLHRoaXMpOi10aGlzLnV0Y09mZnNldCgpfWZ1bmN0aW9uIERiKGEpe3JldHVybiB0aGlzLnV0Y09mZnNldCgwLGEpfWZ1bmN0aW9uIEViKGEpe3JldHVybiB0aGlzLl9pc1VUQyYmKHRoaXMudXRjT2Zmc2V0KDAsYSksdGhpcy5faXNVVEM9ITEsYSYmdGhpcy5zdWJ0cmFjdChBYih0aGlzKSxcIm1cIikpLHRoaXN9ZnVuY3Rpb24gRmIoKXtyZXR1cm4gdGhpcy5fdHptP3RoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSk6XCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuX2kmJnRoaXMudXRjT2Zmc2V0KHliKFBlLHRoaXMuX2kpKSx0aGlzfWZ1bmN0aW9uIEdiKGEpe3JldHVybiB0aGlzLmlzVmFsaWQoKT8oYT1hP3JiKGEpLnV0Y09mZnNldCgpOjAsKHRoaXMudXRjT2Zmc2V0KCktYSklNjA9PT0wKTohMX1mdW5jdGlvbiBIYigpe3JldHVybiB0aGlzLnV0Y09mZnNldCgpPnRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKXx8dGhpcy51dGNPZmZzZXQoKT50aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KCl9ZnVuY3Rpb24gSWIoKXtpZighbyh0aGlzLl9pc0RTVFNoaWZ0ZWQpKXJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7dmFyIGE9e307aWYocChhLHRoaXMpLGE9b2IoYSksYS5fYSl7dmFyIGI9YS5faXNVVEM/aihhLl9hKTpyYihhLl9hKTt0aGlzLl9pc0RTVFNoaWZ0ZWQ9dGhpcy5pc1ZhbGlkKCkmJnUoYS5fYSxiLnRvQXJyYXkoKSk+MH1lbHNlIHRoaXMuX2lzRFNUU2hpZnRlZD0hMTtyZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkfWZ1bmN0aW9uIEpiKCl7cmV0dXJuIHRoaXMuaXNWYWxpZCgpPyF0aGlzLl9pc1VUQzohMX1mdW5jdGlvbiBLYigpe3JldHVybiB0aGlzLmlzVmFsaWQoKT90aGlzLl9pc1VUQzohMX1mdW5jdGlvbiBMYigpe3JldHVybiB0aGlzLmlzVmFsaWQoKT90aGlzLl9pc1VUQyYmMD09PXRoaXMuX29mZnNldDohMX1mdW5jdGlvbiBNYihhLGIpe3ZhciBjLGQsZSxmPWEsXHJcbi8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXHJcbmc9bnVsbDsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXHJcbnJldHVybiB3YihhKT9mPXttczphLl9taWxsaXNlY29uZHMsZDphLl9kYXlzLE06YS5fbW9udGhzfTpcIm51bWJlclwiPT10eXBlb2YgYT8oZj17fSxiP2ZbYl09YTpmLm1pbGxpc2Vjb25kcz1hKTooZz1GZi5leGVjKGEpKT8oYz1cIi1cIj09PWdbMV0/LTE6MSxmPXt5OjAsZDp0KGdbWGVdKSpjLGg6dChnW1llXSkqYyxtOnQoZ1taZV0pKmMsczp0KGdbJGVdKSpjLG1zOnQoZ1tfZV0pKmN9KTooZz1HZi5leGVjKGEpKT8oYz1cIi1cIj09PWdbMV0/LTE6MSxmPXt5Ok5iKGdbMl0sYyksTTpOYihnWzNdLGMpLHc6TmIoZ1s0XSxjKSxkOk5iKGdbNV0sYyksaDpOYihnWzZdLGMpLG06TmIoZ1s3XSxjKSxzOk5iKGdbOF0sYyl9KTpudWxsPT1mP2Y9e306XCJvYmplY3RcIj09dHlwZW9mIGYmJihcImZyb21cImluIGZ8fFwidG9cImluIGYpJiYoZT1QYihyYihmLmZyb20pLHJiKGYudG8pKSxmPXt9LGYubXM9ZS5taWxsaXNlY29uZHMsZi5NPWUubW9udGhzKSxkPW5ldyB2YihmKSx3YihhKSYmaChhLFwiX2xvY2FsZVwiKSYmKGQuX2xvY2FsZT1hLl9sb2NhbGUpLGR9ZnVuY3Rpb24gTmIoYSxiKXtcclxuLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cclxuLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXHJcbi8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cclxudmFyIGM9YSYmcGFyc2VGbG9hdChhLnJlcGxhY2UoXCIsXCIsXCIuXCIpKTtcclxuLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxyXG5yZXR1cm4oaXNOYU4oYyk/MDpjKSpifWZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9e21pbGxpc2Vjb25kczowLG1vbnRoczowfTtyZXR1cm4gYy5tb250aHM9Yi5tb250aCgpLWEubW9udGgoKSsxMiooYi55ZWFyKCktYS55ZWFyKCkpLGEuY2xvbmUoKS5hZGQoYy5tb250aHMsXCJNXCIpLmlzQWZ0ZXIoYikmJi0tYy5tb250aHMsYy5taWxsaXNlY29uZHM9K2ItK2EuY2xvbmUoKS5hZGQoYy5tb250aHMsXCJNXCIpLGN9ZnVuY3Rpb24gUGIoYSxiKXt2YXIgYztyZXR1cm4gYS5pc1ZhbGlkKCkmJmIuaXNWYWxpZCgpPyhiPXpiKGIsYSksYS5pc0JlZm9yZShiKT9jPU9iKGEsYik6KGM9T2IoYixhKSxjLm1pbGxpc2Vjb25kcz0tYy5taWxsaXNlY29uZHMsYy5tb250aHM9LWMubW9udGhzKSxjKTp7bWlsbGlzZWNvbmRzOjAsbW9udGhzOjB9fWZ1bmN0aW9uIFFiKGEpe3JldHVybiAwPmE/LTEqTWF0aC5yb3VuZCgtMSphKTpNYXRoLnJvdW5kKGEpfVxyXG4vLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXHJcbmZ1bmN0aW9uIFJiKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7dmFyIGUsZjtcclxuLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XHJcbnJldHVybiBudWxsPT09ZHx8aXNOYU4oK2QpfHwoeChiLFwibW9tZW50KCkuXCIrYitcIihwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS5cIitiK1wiKG51bWJlciwgcGVyaW9kKS4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLlwiKSxmPWMsYz1kLGQ9ZiksYz1cInN0cmluZ1wiPT10eXBlb2YgYz8rYzpjLGU9TWIoYyxkKSxTYih0aGlzLGUsYSksdGhpc319ZnVuY3Rpb24gU2IoYixjLGQsZSl7dmFyIGY9Yy5fbWlsbGlzZWNvbmRzLGc9UWIoYy5fZGF5cyksaD1RYihjLl9tb250aHMpO2IuaXNWYWxpZCgpJiYoZT1udWxsPT1lPyEwOmUsZiYmYi5fZC5zZXRUaW1lKGIuX2QudmFsdWVPZigpK2YqZCksZyYmUChiLFwiRGF0ZVwiLE8oYixcIkRhdGVcIikrZypkKSxoJiZpYShiLE8oYixcIk1vbnRoXCIpK2gqZCksZSYmYS51cGRhdGVPZmZzZXQoYixnfHxoKSl9ZnVuY3Rpb24gVGIoYSxiKXt2YXIgYz1hLmRpZmYoYixcImRheXNcIiwhMCk7cmV0dXJuLTY+Yz9cInNhbWVFbHNlXCI6LTE+Yz9cImxhc3RXZWVrXCI6MD5jP1wibGFzdERheVwiOjE+Yz9cInNhbWVEYXlcIjoyPmM/XCJuZXh0RGF5XCI6Nz5jP1wibmV4dFdlZWtcIjpcInNhbWVFbHNlXCJ9ZnVuY3Rpb24gVWIoYixjKXtcclxuLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cclxuLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXHJcbnZhciBkPWJ8fHJiKCksZT16YihkLHRoaXMpLnN0YXJ0T2YoXCJkYXlcIiksZj1hLmNhbGVuZGFyRm9ybWF0KHRoaXMsZSl8fFwic2FtZUVsc2VcIixnPWMmJih5KGNbZl0pP2NbZl0uY2FsbCh0aGlzLGQpOmNbZl0pO3JldHVybiB0aGlzLmZvcm1hdChnfHx0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmLHRoaXMscmIoZCkpKX1mdW5jdGlvbiBWYigpe3JldHVybiBuZXcgcSh0aGlzKX1mdW5jdGlvbiBXYihhLGIpe3ZhciBjPXIoYSk/YTpyYihhKTtyZXR1cm4gdGhpcy5pc1ZhbGlkKCkmJmMuaXNWYWxpZCgpPyhiPUoobyhiKT9cIm1pbGxpc2Vjb25kXCI6YiksXCJtaWxsaXNlY29uZFwiPT09Yj90aGlzLnZhbHVlT2YoKT5jLnZhbHVlT2YoKTpjLnZhbHVlT2YoKTx0aGlzLmNsb25lKCkuc3RhcnRPZihiKS52YWx1ZU9mKCkpOiExfWZ1bmN0aW9uIFhiKGEsYil7dmFyIGM9cihhKT9hOnJiKGEpO3JldHVybiB0aGlzLmlzVmFsaWQoKSYmYy5pc1ZhbGlkKCk/KGI9SihvKGIpP1wibWlsbGlzZWNvbmRcIjpiKSxcIm1pbGxpc2Vjb25kXCI9PT1iP3RoaXMudmFsdWVPZigpPGMudmFsdWVPZigpOnRoaXMuY2xvbmUoKS5lbmRPZihiKS52YWx1ZU9mKCk8Yy52YWx1ZU9mKCkpOiExfWZ1bmN0aW9uIFliKGEsYixjLGQpe3JldHVybiBkPWR8fFwiKClcIiwoXCIoXCI9PT1kWzBdP3RoaXMuaXNBZnRlcihhLGMpOiF0aGlzLmlzQmVmb3JlKGEsYykpJiYoXCIpXCI9PT1kWzFdP3RoaXMuaXNCZWZvcmUoYixjKTohdGhpcy5pc0FmdGVyKGIsYykpfWZ1bmN0aW9uIFpiKGEsYil7dmFyIGMsZD1yKGEpP2E6cmIoYSk7cmV0dXJuIHRoaXMuaXNWYWxpZCgpJiZkLmlzVmFsaWQoKT8oYj1KKGJ8fFwibWlsbGlzZWNvbmRcIiksXCJtaWxsaXNlY29uZFwiPT09Yj90aGlzLnZhbHVlT2YoKT09PWQudmFsdWVPZigpOihjPWQudmFsdWVPZigpLHRoaXMuY2xvbmUoKS5zdGFydE9mKGIpLnZhbHVlT2YoKTw9YyYmYzw9dGhpcy5jbG9uZSgpLmVuZE9mKGIpLnZhbHVlT2YoKSkpOiExfWZ1bmN0aW9uICRiKGEsYil7cmV0dXJuIHRoaXMuaXNTYW1lKGEsYil8fHRoaXMuaXNBZnRlcihhLGIpfWZ1bmN0aW9uIF9iKGEsYil7cmV0dXJuIHRoaXMuaXNTYW1lKGEsYil8fHRoaXMuaXNCZWZvcmUoYSxiKX1mdW5jdGlvbiBhYyhhLGIsYyl7dmFyIGQsZSxmLGc7Ly8gMTAwMFxyXG4vLyAxMDAwICogNjBcclxuLy8gMTAwMCAqIDYwICogNjBcclxuLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxyXG4vLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxyXG5yZXR1cm4gdGhpcy5pc1ZhbGlkKCk/KGQ9emIoYSx0aGlzKSxkLmlzVmFsaWQoKT8oZT02ZTQqKGQudXRjT2Zmc2V0KCktdGhpcy51dGNPZmZzZXQoKSksYj1KKGIpLFwieWVhclwiPT09Ynx8XCJtb250aFwiPT09Ynx8XCJxdWFydGVyXCI9PT1iPyhnPWJjKHRoaXMsZCksXCJxdWFydGVyXCI9PT1iP2cvPTM6XCJ5ZWFyXCI9PT1iJiYoZy89MTIpKTooZj10aGlzLWQsZz1cInNlY29uZFwiPT09Yj9mLzFlMzpcIm1pbnV0ZVwiPT09Yj9mLzZlNDpcImhvdXJcIj09PWI/Zi8zNmU1OlwiZGF5XCI9PT1iPyhmLWUpLzg2NGU1Olwid2Vla1wiPT09Yj8oZi1lKS82MDQ4ZTU6ZiksYz9nOnMoZykpOk5hTik6TmFOfWZ1bmN0aW9uIGJjKGEsYil7XHJcbi8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXHJcbnZhciBjLGQsZT0xMiooYi55ZWFyKCktYS55ZWFyKCkpKyhiLm1vbnRoKCktYS5tb250aCgpKSxcclxuLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcclxuZj1hLmNsb25lKCkuYWRkKGUsXCJtb250aHNcIik7XHJcbi8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cclxuLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcclxuLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcclxucmV0dXJuIDA+Yi1mPyhjPWEuY2xvbmUoKS5hZGQoZS0xLFwibW9udGhzXCIpLGQ9KGItZikvKGYtYykpOihjPWEuY2xvbmUoKS5hZGQoZSsxLFwibW9udGhzXCIpLGQ9KGItZikvKGMtZikpLC0oZStkKXx8MH1mdW5jdGlvbiBjYygpe3JldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKFwiZW5cIikuZm9ybWF0KFwiZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlpcIil9ZnVuY3Rpb24gZGMoKXt2YXIgYT10aGlzLmNsb25lKCkudXRjKCk7cmV0dXJuIDA8YS55ZWFyKCkmJmEueWVhcigpPD05OTk5P3koRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpP3RoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTpXKGEsXCJZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdXCIpOlcoYSxcIllZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXVwiKX1mdW5jdGlvbiBlYyhiKXtifHwoYj10aGlzLmlzVXRjKCk/YS5kZWZhdWx0Rm9ybWF0VXRjOmEuZGVmYXVsdEZvcm1hdCk7dmFyIGM9Vyh0aGlzLGIpO3JldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KGMpfWZ1bmN0aW9uIGZjKGEsYil7cmV0dXJuIHRoaXMuaXNWYWxpZCgpJiYocihhKSYmYS5pc1ZhbGlkKCl8fHJiKGEpLmlzVmFsaWQoKSk/TWIoe3RvOnRoaXMsZnJvbTphfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCFiKTp0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpfWZ1bmN0aW9uIGdjKGEpe3JldHVybiB0aGlzLmZyb20ocmIoKSxhKX1mdW5jdGlvbiBoYyhhLGIpe3JldHVybiB0aGlzLmlzVmFsaWQoKSYmKHIoYSkmJmEuaXNWYWxpZCgpfHxyYihhKS5pc1ZhbGlkKCkpP01iKHtmcm9tOnRoaXMsdG86YX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghYik6dGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKX1mdW5jdGlvbiBpYyhhKXtyZXR1cm4gdGhpcy50byhyYigpLGEpfVxyXG4vLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXHJcbi8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cclxuLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxyXG5mdW5jdGlvbiBqYyhhKXt2YXIgYjtyZXR1cm4gdm9pZCAwPT09YT90aGlzLl9sb2NhbGUuX2FiYnI6KGI9YWIoYSksbnVsbCE9YiYmKHRoaXMuX2xvY2FsZT1iKSx0aGlzKX1mdW5jdGlvbiBrYygpe3JldHVybiB0aGlzLl9sb2NhbGV9ZnVuY3Rpb24gbGMoYSl7XHJcbi8vIHRoZSBmb2xsb3dpbmcgc3dpdGNoIGludGVudGlvbmFsbHkgb21pdHMgYnJlYWsga2V5d29yZHNcclxuLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxyXG5zd2l0Y2goYT1KKGEpKXtjYXNlXCJ5ZWFyXCI6dGhpcy5tb250aCgwKTsvKiBmYWxscyB0aHJvdWdoICovXHJcbmNhc2VcInF1YXJ0ZXJcIjpjYXNlXCJtb250aFwiOnRoaXMuZGF0ZSgxKTsvKiBmYWxscyB0aHJvdWdoICovXHJcbmNhc2VcIndlZWtcIjpjYXNlXCJpc29XZWVrXCI6Y2FzZVwiZGF5XCI6Y2FzZVwiZGF0ZVwiOnRoaXMuaG91cnMoMCk7LyogZmFsbHMgdGhyb3VnaCAqL1xyXG5jYXNlXCJob3VyXCI6dGhpcy5taW51dGVzKDApOy8qIGZhbGxzIHRocm91Z2ggKi9cclxuY2FzZVwibWludXRlXCI6dGhpcy5zZWNvbmRzKDApOy8qIGZhbGxzIHRocm91Z2ggKi9cclxuY2FzZVwic2Vjb25kXCI6dGhpcy5taWxsaXNlY29uZHMoMCl9XHJcbi8vIHdlZWtzIGFyZSBhIHNwZWNpYWwgY2FzZVxyXG4vLyBxdWFydGVycyBhcmUgYWxzbyBzcGVjaWFsXHJcbnJldHVyblwid2Vla1wiPT09YSYmdGhpcy53ZWVrZGF5KDApLFwiaXNvV2Vla1wiPT09YSYmdGhpcy5pc29XZWVrZGF5KDEpLFwicXVhcnRlclwiPT09YSYmdGhpcy5tb250aCgzKk1hdGguZmxvb3IodGhpcy5tb250aCgpLzMpKSx0aGlzfWZ1bmN0aW9uIG1jKGEpe1xyXG4vLyAnZGF0ZScgaXMgYW4gYWxpYXMgZm9yICdkYXknLCBzbyBpdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBzdWNoLlxyXG5yZXR1cm4gYT1KKGEpLHZvaWQgMD09PWF8fFwibWlsbGlzZWNvbmRcIj09PWE/dGhpczooXCJkYXRlXCI9PT1hJiYoYT1cImRheVwiKSx0aGlzLnN0YXJ0T2YoYSkuYWRkKDEsXCJpc29XZWVrXCI9PT1hP1wid2Vla1wiOmEpLnN1YnRyYWN0KDEsXCJtc1wiKSl9ZnVuY3Rpb24gbmMoKXtyZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCktNmU0Kih0aGlzLl9vZmZzZXR8fDApfWZ1bmN0aW9uIG9jKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkvMWUzKX1mdW5jdGlvbiBwYygpe3JldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSl9ZnVuY3Rpb24gcWMoKXt2YXIgYT10aGlzO3JldHVyblthLnllYXIoKSxhLm1vbnRoKCksYS5kYXRlKCksYS5ob3VyKCksYS5taW51dGUoKSxhLnNlY29uZCgpLGEubWlsbGlzZWNvbmQoKV19ZnVuY3Rpb24gcmMoKXt2YXIgYT10aGlzO3JldHVybnt5ZWFyczphLnllYXIoKSxtb250aHM6YS5tb250aCgpLGRhdGU6YS5kYXRlKCksaG91cnM6YS5ob3VycygpLG1pbnV0ZXM6YS5taW51dGVzKCksc2Vjb25kczphLnNlY29uZHMoKSxtaWxsaXNlY29uZHM6YS5taWxsaXNlY29uZHMoKX19ZnVuY3Rpb24gc2MoKXtcclxuLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxyXG5yZXR1cm4gdGhpcy5pc1ZhbGlkKCk/dGhpcy50b0lTT1N0cmluZygpOm51bGx9ZnVuY3Rpb24gdGMoKXtyZXR1cm4gbSh0aGlzKX1mdW5jdGlvbiB1Yygpe3JldHVybiBpKHt9LGwodGhpcykpfWZ1bmN0aW9uIHZjKCl7cmV0dXJuIGwodGhpcykub3ZlcmZsb3d9ZnVuY3Rpb24gd2MoKXtyZXR1cm57aW5wdXQ6dGhpcy5faSxmb3JtYXQ6dGhpcy5fZixsb2NhbGU6dGhpcy5fbG9jYWxlLGlzVVRDOnRoaXMuX2lzVVRDLHN0cmljdDp0aGlzLl9zdHJpY3R9fWZ1bmN0aW9uIHhjKGEsYil7VCgwLFthLGEubGVuZ3RoXSwwLGIpfVxyXG4vLyBNT01FTlRTXHJcbmZ1bmN0aW9uIHljKGEpe3JldHVybiBDYy5jYWxsKHRoaXMsYSx0aGlzLndlZWsoKSx0aGlzLndlZWtkYXkoKSx0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KX1mdW5jdGlvbiB6YyhhKXtyZXR1cm4gQ2MuY2FsbCh0aGlzLGEsdGhpcy5pc29XZWVrKCksdGhpcy5pc29XZWVrZGF5KCksMSw0KX1mdW5jdGlvbiBBYygpe3JldHVybiB3YSh0aGlzLnllYXIoKSwxLDQpfWZ1bmN0aW9uIEJjKCl7dmFyIGE9dGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7cmV0dXJuIHdhKHRoaXMueWVhcigpLGEuZG93LGEuZG95KX1mdW5jdGlvbiBDYyhhLGIsYyxkLGUpe3ZhciBmO3JldHVybiBudWxsPT1hP3ZhKHRoaXMsZCxlKS55ZWFyOihmPXdhKGEsZCxlKSxiPmYmJihiPWYpLERjLmNhbGwodGhpcyxhLGIsYyxkLGUpKX1mdW5jdGlvbiBEYyhhLGIsYyxkLGUpe3ZhciBmPXVhKGEsYixjLGQsZSksZz1zYShmLnllYXIsMCxmLmRheU9mWWVhcik7cmV0dXJuIHRoaXMueWVhcihnLmdldFVUQ0Z1bGxZZWFyKCkpLHRoaXMubW9udGgoZy5nZXRVVENNb250aCgpKSx0aGlzLmRhdGUoZy5nZXRVVENEYXRlKCkpLHRoaXN9XHJcbi8vIE1PTUVOVFNcclxuZnVuY3Rpb24gRWMoYSl7cmV0dXJuIG51bGw9PWE/TWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkrMSkvMyk6dGhpcy5tb250aCgzKihhLTEpK3RoaXMubW9udGgoKSUzKX1cclxuLy8gSEVMUEVSU1xyXG4vLyBNT01FTlRTXHJcbmZ1bmN0aW9uIEZjKGEpe3ZhciBiPU1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKFwiZGF5XCIpLXRoaXMuY2xvbmUoKS5zdGFydE9mKFwieWVhclwiKSkvODY0ZTUpKzE7cmV0dXJuIG51bGw9PWE/Yjp0aGlzLmFkZChhLWIsXCJkXCIpfWZ1bmN0aW9uIEdjKGEsYil7YltfZV09dCgxZTMqKFwiMC5cIithKSl9XHJcbi8vIE1PTUVOVFNcclxuZnVuY3Rpb24gSGMoKXtyZXR1cm4gdGhpcy5faXNVVEM/XCJVVENcIjpcIlwifWZ1bmN0aW9uIEljKCl7cmV0dXJuIHRoaXMuX2lzVVRDP1wiQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWVcIjpcIlwifWZ1bmN0aW9uIEpjKGEpe3JldHVybiByYigxZTMqYSl9ZnVuY3Rpb24gS2MoKXtyZXR1cm4gcmIuYXBwbHkobnVsbCxhcmd1bWVudHMpLnBhcnNlWm9uZSgpfWZ1bmN0aW9uIExjKGEpe3JldHVybiBhfWZ1bmN0aW9uIE1jKGEsYixjLGQpe3ZhciBlPWFiKCksZj1qKCkuc2V0KGQsYik7cmV0dXJuIGVbY10oZixhKX1mdW5jdGlvbiBOYyhhLGIsYyl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGE9YXx8XCJcIixudWxsIT1iKXJldHVybiBNYyhhLGIsYyxcIm1vbnRoXCIpO3ZhciBkLGU9W107Zm9yKGQ9MDsxMj5kO2QrKyllW2RdPU1jKGEsZCxjLFwibW9udGhcIik7cmV0dXJuIGV9XHJcbi8vICgpXHJcbi8vICg1KVxyXG4vLyAoZm10LCA1KVxyXG4vLyAoZm10KVxyXG4vLyAodHJ1ZSlcclxuLy8gKHRydWUsIDUpXHJcbi8vICh0cnVlLCBmbXQsIDUpXHJcbi8vICh0cnVlLCBmbXQpXHJcbmZ1bmN0aW9uIE9jKGEsYixjLGQpe1wiYm9vbGVhblwiPT10eXBlb2YgYT8oXCJudW1iZXJcIj09dHlwZW9mIGImJihjPWIsYj12b2lkIDApLGI9Ynx8XCJcIik6KGI9YSxjPWIsYT0hMSxcIm51bWJlclwiPT10eXBlb2YgYiYmKGM9YixiPXZvaWQgMCksYj1ifHxcIlwiKTt2YXIgZT1hYigpLGY9YT9lLl93ZWVrLmRvdzowO2lmKG51bGwhPWMpcmV0dXJuIE1jKGIsKGMrZiklNyxkLFwiZGF5XCIpO3ZhciBnLGg9W107Zm9yKGc9MDs3Pmc7ZysrKWhbZ109TWMoYiwoZytmKSU3LGQsXCJkYXlcIik7cmV0dXJuIGh9ZnVuY3Rpb24gUGMoYSxiKXtyZXR1cm4gTmMoYSxiLFwibW9udGhzXCIpfWZ1bmN0aW9uIFFjKGEsYil7cmV0dXJuIE5jKGEsYixcIm1vbnRoc1Nob3J0XCIpfWZ1bmN0aW9uIFJjKGEsYixjKXtyZXR1cm4gT2MoYSxiLGMsXCJ3ZWVrZGF5c1wiKX1mdW5jdGlvbiBTYyhhLGIsYyl7cmV0dXJuIE9jKGEsYixjLFwid2Vla2RheXNTaG9ydFwiKX1mdW5jdGlvbiBUYyhhLGIsYyl7cmV0dXJuIE9jKGEsYixjLFwid2Vla2RheXNNaW5cIil9ZnVuY3Rpb24gVWMoKXt2YXIgYT10aGlzLl9kYXRhO3JldHVybiB0aGlzLl9taWxsaXNlY29uZHM9U2YodGhpcy5fbWlsbGlzZWNvbmRzKSx0aGlzLl9kYXlzPVNmKHRoaXMuX2RheXMpLHRoaXMuX21vbnRocz1TZih0aGlzLl9tb250aHMpLGEubWlsbGlzZWNvbmRzPVNmKGEubWlsbGlzZWNvbmRzKSxhLnNlY29uZHM9U2YoYS5zZWNvbmRzKSxhLm1pbnV0ZXM9U2YoYS5taW51dGVzKSxhLmhvdXJzPVNmKGEuaG91cnMpLGEubW9udGhzPVNmKGEubW9udGhzKSxhLnllYXJzPVNmKGEueWVhcnMpLHRoaXN9ZnVuY3Rpb24gVmMoYSxiLGMsZCl7dmFyIGU9TWIoYixjKTtyZXR1cm4gYS5fbWlsbGlzZWNvbmRzKz1kKmUuX21pbGxpc2Vjb25kcyxhLl9kYXlzKz1kKmUuX2RheXMsYS5fbW9udGhzKz1kKmUuX21vbnRocyxhLl9idWJibGUoKX1cclxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxyXG5mdW5jdGlvbiBXYyhhLGIpe3JldHVybiBWYyh0aGlzLGEsYiwxKX1cclxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcclxuZnVuY3Rpb24gWGMoYSxiKXtyZXR1cm4gVmModGhpcyxhLGIsLTEpfWZ1bmN0aW9uIFljKGEpe3JldHVybiAwPmE/TWF0aC5mbG9vcihhKTpNYXRoLmNlaWwoYSl9ZnVuY3Rpb24gWmMoKXt2YXIgYSxiLGMsZCxlLGY9dGhpcy5fbWlsbGlzZWNvbmRzLGc9dGhpcy5fZGF5cyxoPXRoaXMuX21vbnRocyxpPXRoaXMuX2RhdGE7XHJcbi8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcclxuLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XHJcbi8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcclxuLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxyXG4vLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXHJcbi8vIDEyIG1vbnRocyAtPiAxIHllYXJcclxucmV0dXJuIGY+PTAmJmc+PTAmJmg+PTB8fDA+PWYmJjA+PWcmJjA+PWh8fChmKz04NjRlNSpZYyhfYyhoKStnKSxnPTAsaD0wKSxpLm1pbGxpc2Vjb25kcz1mJTFlMyxhPXMoZi8xZTMpLGkuc2Vjb25kcz1hJTYwLGI9cyhhLzYwKSxpLm1pbnV0ZXM9YiU2MCxjPXMoYi82MCksaS5ob3Vycz1jJTI0LGcrPXMoYy8yNCksZT1zKCRjKGcpKSxoKz1lLGctPVljKF9jKGUpKSxkPXMoaC8xMiksaCU9MTIsaS5kYXlzPWcsaS5tb250aHM9aCxpLnllYXJzPWQsdGhpc31mdW5jdGlvbiAkYyhhKXtcclxuLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxyXG4vLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcclxucmV0dXJuIDQ4MDAqYS8xNDYwOTd9ZnVuY3Rpb24gX2MoYSl7XHJcbi8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xyXG5yZXR1cm4gMTQ2MDk3KmEvNDgwMH1mdW5jdGlvbiBhZChhKXt2YXIgYixjLGQ9dGhpcy5fbWlsbGlzZWNvbmRzO2lmKGE9SihhKSxcIm1vbnRoXCI9PT1hfHxcInllYXJcIj09PWEpcmV0dXJuIGI9dGhpcy5fZGF5cytkLzg2NGU1LGM9dGhpcy5fbW9udGhzKyRjKGIpLFwibW9udGhcIj09PWE/YzpjLzEyO3N3aXRjaChiPXRoaXMuX2RheXMrTWF0aC5yb3VuZChfYyh0aGlzLl9tb250aHMpKSxhKXtjYXNlXCJ3ZWVrXCI6cmV0dXJuIGIvNytkLzYwNDhlNTtjYXNlXCJkYXlcIjpyZXR1cm4gYitkLzg2NGU1O2Nhc2VcImhvdXJcIjpyZXR1cm4gMjQqYitkLzM2ZTU7Y2FzZVwibWludXRlXCI6cmV0dXJuIDE0NDAqYitkLzZlNDtjYXNlXCJzZWNvbmRcIjpyZXR1cm4gODY0MDAqYitkLzFlMztcclxuLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXHJcbmNhc2VcIm1pbGxpc2Vjb25kXCI6cmV0dXJuIE1hdGguZmxvb3IoODY0ZTUqYikrZDtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIlVua25vd24gdW5pdCBcIithKX19XHJcbi8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xyXG5mdW5jdGlvbiBiZCgpe3JldHVybiB0aGlzLl9taWxsaXNlY29uZHMrODY0ZTUqdGhpcy5fZGF5cyt0aGlzLl9tb250aHMlMTIqMjU5MmU2KzMxNTM2ZTYqdCh0aGlzLl9tb250aHMvMTIpfWZ1bmN0aW9uIGNkKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzLmFzKGEpfX1mdW5jdGlvbiBkZChhKXtyZXR1cm4gYT1KKGEpLHRoaXNbYStcInNcIl0oKX1mdW5jdGlvbiBlZChhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YVthXX19ZnVuY3Rpb24gZmQoKXtyZXR1cm4gcyh0aGlzLmRheXMoKS83KX1cclxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcclxuZnVuY3Rpb24gZ2QoYSxiLGMsZCxlKXtyZXR1cm4gZS5yZWxhdGl2ZVRpbWUoYnx8MSwhIWMsYSxkKX1mdW5jdGlvbiBoZChhLGIsYyl7dmFyIGQ9TWIoYSkuYWJzKCksZT1nZyhkLmFzKFwic1wiKSksZj1nZyhkLmFzKFwibVwiKSksZz1nZyhkLmFzKFwiaFwiKSksaD1nZyhkLmFzKFwiZFwiKSksaT1nZyhkLmFzKFwiTVwiKSksaj1nZyhkLmFzKFwieVwiKSksaz1lPGhnLnMmJltcInNcIixlXXx8MT49ZiYmW1wibVwiXXx8ZjxoZy5tJiZbXCJtbVwiLGZdfHwxPj1nJiZbXCJoXCJdfHxnPGhnLmgmJltcImhoXCIsZ118fDE+PWgmJltcImRcIl18fGg8aGcuZCYmW1wiZGRcIixoXXx8MT49aSYmW1wiTVwiXXx8aTxoZy5NJiZbXCJNTVwiLGldfHwxPj1qJiZbXCJ5XCJdfHxbXCJ5eVwiLGpdO3JldHVybiBrWzJdPWIsa1szXT0rYT4wLGtbNF09YyxnZC5hcHBseShudWxsLGspfVxyXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXHJcbmZ1bmN0aW9uIGlkKGEpe3JldHVybiB2b2lkIDA9PT1hP2dnOlwiZnVuY3Rpb25cIj09dHlwZW9mIGE/KGdnPWEsITApOiExfVxyXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcclxuZnVuY3Rpb24gamQoYSxiKXtyZXR1cm4gdm9pZCAwPT09aGdbYV0/ITE6dm9pZCAwPT09Yj9oZ1thXTooaGdbYV09YiwhMCl9ZnVuY3Rpb24ga2QoYSl7dmFyIGI9dGhpcy5sb2NhbGVEYXRhKCksYz1oZCh0aGlzLCFhLGIpO3JldHVybiBhJiYoYz1iLnBhc3RGdXR1cmUoK3RoaXMsYykpLGIucG9zdGZvcm1hdChjKX1mdW5jdGlvbiBsZCgpe1xyXG4vLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxyXG4vLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXHJcbi8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcclxuLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xyXG4vLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xyXG4vLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcclxuLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcclxudmFyIGEsYixjLGQ9aWcodGhpcy5fbWlsbGlzZWNvbmRzKS8xZTMsZT1pZyh0aGlzLl9kYXlzKSxmPWlnKHRoaXMuX21vbnRocyk7YT1zKGQvNjApLGI9cyhhLzYwKSxkJT02MCxhJT02MCxjPXMoZi8xMiksZiU9MTI7XHJcbi8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXHJcbnZhciBnPWMsaD1mLGk9ZSxqPWIsaz1hLGw9ZCxtPXRoaXMuYXNTZWNvbmRzKCk7cmV0dXJuIG0/KDA+bT9cIi1cIjpcIlwiKStcIlBcIisoZz9nK1wiWVwiOlwiXCIpKyhoP2grXCJNXCI6XCJcIikrKGk/aStcIkRcIjpcIlwiKSsoanx8a3x8bD9cIlRcIjpcIlwiKSsoaj9qK1wiSFwiOlwiXCIpKyhrP2srXCJNXCI6XCJcIikrKGw/bCtcIlNcIjpcIlwiKTpcIlAwRFwifWZ1bmN0aW9uIG1kKGEsYil7dmFyIGM9YS5zcGxpdChcIl9cIik7cmV0dXJuIGIlMTA9PT0xJiZiJTEwMCE9PTExP2NbMF06YiUxMD49MiYmND49YiUxMCYmKDEwPmIlMTAwfHxiJTEwMD49MjApP2NbMV06Y1syXX1mdW5jdGlvbiBuZChhLGIsYyl7dmFyIGQ9e21tOmI/XCLRhdCy0ZbQu9GW0L3QsF/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L1cIjpcItGF0LLRltC70ZbQvdGDX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvVwiLGhoOmI/XCLQs9Cw0LTQt9GW0L3QsF/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L1cIjpcItCz0LDQtNC30ZbQvdGDX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvVwiLGRkOlwi0LTQt9C10L3RjF/QtNC90ZZf0LTQt9GR0L1cIixNTTpcItC80LXRgdGP0YZf0LzQtdGB0Y/RhtGLX9C80LXRgdGP0YbQsNGeXCIseXk6XCLQs9C+0LRf0LPQsNC00Ytf0LPQsNC00L7RnlwifTtyZXR1cm5cIm1cIj09PWM/Yj9cItGF0LLRltC70ZbQvdCwXCI6XCLRhdCy0ZbQu9GW0L3Rg1wiOlwiaFwiPT09Yz9iP1wi0LPQsNC00LfRltC90LBcIjpcItCz0LDQtNC30ZbQvdGDXCI6YStcIiBcIittZChkW2NdLCthKX1mdW5jdGlvbiBvZChhLGIsYyl7dmFyIGQ9e21tOlwibXVudXRlbm5cIixNTTpcIm1pelwiLGRkOlwiZGV2ZXpoXCJ9O3JldHVybiBhK1wiIFwiK3JkKGRbY10sYSl9ZnVuY3Rpb24gcGQoYSl7c3dpdGNoKHFkKGEpKXtjYXNlIDE6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6Y2FzZSA5OnJldHVybiBhK1wiIGJsb2F6XCI7ZGVmYXVsdDpyZXR1cm4gYStcIiB2bG9helwifX1mdW5jdGlvbiBxZChhKXtyZXR1cm4gYT45P3FkKGElMTApOmF9ZnVuY3Rpb24gcmQoYSxiKXtyZXR1cm4gMj09PWI/c2QoYSk6YX1mdW5jdGlvbiBzZChhKXt2YXIgYj17bTpcInZcIixiOlwidlwiLGQ6XCJ6XCJ9O3JldHVybiB2b2lkIDA9PT1iW2EuY2hhckF0KDApXT9hOmJbYS5jaGFyQXQoMCldK2Euc3Vic3RyaW5nKDEpfWZ1bmN0aW9uIHRkKGEsYixjKXt2YXIgZD1hK1wiIFwiO3N3aXRjaChjKXtjYXNlXCJtXCI6cmV0dXJuIGI/XCJqZWRuYSBtaW51dGFcIjpcImplZG5lIG1pbnV0ZVwiO2Nhc2VcIm1tXCI6cmV0dXJuIGQrPTE9PT1hP1wibWludXRhXCI6Mj09PWF8fDM9PT1hfHw0PT09YT9cIm1pbnV0ZVwiOlwibWludXRhXCI7Y2FzZVwiaFwiOnJldHVybiBiP1wiamVkYW4gc2F0XCI6XCJqZWRub2cgc2F0YVwiO2Nhc2VcImhoXCI6cmV0dXJuIGQrPTE9PT1hP1wic2F0XCI6Mj09PWF8fDM9PT1hfHw0PT09YT9cInNhdGFcIjpcInNhdGlcIjtjYXNlXCJkZFwiOnJldHVybiBkKz0xPT09YT9cImRhblwiOlwiZGFuYVwiO2Nhc2VcIk1NXCI6cmV0dXJuIGQrPTE9PT1hP1wibWplc2VjXCI6Mj09PWF8fDM9PT1hfHw0PT09YT9cIm1qZXNlY2FcIjpcIm1qZXNlY2lcIjtjYXNlXCJ5eVwiOnJldHVybiBkKz0xPT09YT9cImdvZGluYVwiOjI9PT1hfHwzPT09YXx8ND09PWE/XCJnb2RpbmVcIjpcImdvZGluYVwifX1mdW5jdGlvbiB1ZChhKXtyZXR1cm4gYT4xJiY1PmEmJjEhPT1+fihhLzEwKX1mdW5jdGlvbiB2ZChhLGIsYyxkKXt2YXIgZT1hK1wiIFwiO3N3aXRjaChjKXtjYXNlXCJzXCI6Ly8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xyXG5yZXR1cm4gYnx8ZD9cInDDoXIgc2VrdW5kXCI6XCJww6FyIHNla3VuZGFtaVwiO2Nhc2VcIm1cIjovLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXHJcbnJldHVybiBiP1wibWludXRhXCI6ZD9cIm1pbnV0dVwiOlwibWludXRvdVwiO2Nhc2VcIm1tXCI6Ly8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xyXG4vLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXHJcbnJldHVybiBifHxkP2UrKHVkKGEpP1wibWludXR5XCI6XCJtaW51dFwiKTplK1wibWludXRhbWlcIjticmVhaztjYXNlXCJoXCI6Ly8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xyXG5yZXR1cm4gYj9cImhvZGluYVwiOmQ/XCJob2RpbnVcIjpcImhvZGlub3VcIjtjYXNlXCJoaFwiOi8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cclxuLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xyXG5yZXR1cm4gYnx8ZD9lKyh1ZChhKT9cImhvZGlueVwiOlwiaG9kaW5cIik6ZStcImhvZGluYW1pXCI7YnJlYWs7Y2FzZVwiZFwiOi8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cclxucmV0dXJuIGJ8fGQ/XCJkZW5cIjpcImRuZW1cIjtjYXNlXCJkZFwiOi8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cclxuLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xyXG5yZXR1cm4gYnx8ZD9lKyh1ZChhKT9cImRueVwiOlwiZG7DrVwiKTplK1wiZG55XCI7YnJlYWs7Y2FzZVwiTVwiOi8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cclxucmV0dXJuIGJ8fGQ/XCJtxJtzw61jXCI6XCJtxJtzw61jZW1cIjtjYXNlXCJNTVwiOi8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cclxuLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xyXG5yZXR1cm4gYnx8ZD9lKyh1ZChhKT9cIm3Em3PDrWNlXCI6XCJtxJtzw61jxa9cIik6ZStcIm3Em3PDrWNpXCI7YnJlYWs7Y2FzZVwieVwiOi8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cclxucmV0dXJuIGJ8fGQ/XCJyb2tcIjpcInJva2VtXCI7Y2FzZVwieXlcIjovLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXHJcbi8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cclxucmV0dXJuIGJ8fGQ/ZSsodWQoYSk/XCJyb2t5XCI6XCJsZXRcIik6ZStcImxldHlcIn19ZnVuY3Rpb24gd2QoYSxiLGMsZCl7dmFyIGU9e206W1wiZWluZSBNaW51dGVcIixcImVpbmVyIE1pbnV0ZVwiXSxoOltcImVpbmUgU3R1bmRlXCIsXCJlaW5lciBTdHVuZGVcIl0sZDpbXCJlaW4gVGFnXCIsXCJlaW5lbSBUYWdcIl0sZGQ6W2ErXCIgVGFnZVwiLGErXCIgVGFnZW5cIl0sTTpbXCJlaW4gTW9uYXRcIixcImVpbmVtIE1vbmF0XCJdLE1NOlthK1wiIE1vbmF0ZVwiLGErXCIgTW9uYXRlblwiXSx5OltcImVpbiBKYWhyXCIsXCJlaW5lbSBKYWhyXCJdLHl5OlthK1wiIEphaHJlXCIsYStcIiBKYWhyZW5cIl19O3JldHVybiBiP2VbY11bMF06ZVtjXVsxXX1mdW5jdGlvbiB4ZChhLGIsYyxkKXt2YXIgZT17bTpbXCJlaW5lIE1pbnV0ZVwiLFwiZWluZXIgTWludXRlXCJdLGg6W1wiZWluZSBTdHVuZGVcIixcImVpbmVyIFN0dW5kZVwiXSxkOltcImVpbiBUYWdcIixcImVpbmVtIFRhZ1wiXSxkZDpbYStcIiBUYWdlXCIsYStcIiBUYWdlblwiXSxNOltcImVpbiBNb25hdFwiLFwiZWluZW0gTW9uYXRcIl0sTU06W2ErXCIgTW9uYXRlXCIsYStcIiBNb25hdGVuXCJdLHk6W1wiZWluIEphaHJcIixcImVpbmVtIEphaHJcIl0seXk6W2ErXCIgSmFocmVcIixhK1wiIEphaHJlblwiXX07cmV0dXJuIGI/ZVtjXVswXTplW2NdWzFdfWZ1bmN0aW9uIHlkKGEsYixjLGQpe3ZhciBlPXtzOltcIm3DtW5lIHNla3VuZGlcIixcIm3DtW5pIHNla3VuZFwiLFwicGFhciBzZWt1bmRpdFwiXSxtOltcIsO8aGUgbWludXRpXCIsXCLDvGtzIG1pbnV0XCJdLG1tOlthK1wiIG1pbnV0aVwiLGErXCIgbWludXRpdFwiXSxoOltcIsO8aGUgdHVubmlcIixcInR1bmQgYWVnYVwiLFwiw7xrcyB0dW5kXCJdLGhoOlthK1wiIHR1bm5pXCIsYStcIiB0dW5kaVwiXSxkOltcIsO8aGUgcMOkZXZhXCIsXCLDvGtzIHDDpGV2XCJdLE06W1wia3V1IGFqYVwiLFwia3V1IGFlZ2FcIixcIsO8a3Mga3V1XCJdLE1NOlthK1wiIGt1dVwiLGErXCIga3V1ZFwiXSx5OltcIsO8aGUgYWFzdGFcIixcImFhc3RhXCIsXCLDvGtzIGFhc3RhXCJdLHl5OlthK1wiIGFhc3RhXCIsYStcIiBhYXN0YXRcIl19O3JldHVybiBiP2VbY11bMl0/ZVtjXVsyXTplW2NdWzFdOmQ/ZVtjXVswXTplW2NdWzFdfWZ1bmN0aW9uIHpkKGEsYixjLGQpe3ZhciBlPVwiXCI7c3dpdGNoKGMpe2Nhc2VcInNcIjpyZXR1cm4gZD9cIm11dXRhbWFuIHNla3VubmluXCI6XCJtdXV0YW1hIHNla3VudGlcIjtjYXNlXCJtXCI6cmV0dXJuIGQ/XCJtaW51dXRpblwiOlwibWludXV0dGlcIjtjYXNlXCJtbVwiOmU9ZD9cIm1pbnV1dGluXCI6XCJtaW51dXR0aWFcIjticmVhaztjYXNlXCJoXCI6cmV0dXJuIGQ/XCJ0dW5uaW5cIjpcInR1bnRpXCI7Y2FzZVwiaGhcIjplPWQ/XCJ0dW5uaW5cIjpcInR1bnRpYVwiO2JyZWFrO2Nhc2VcImRcIjpyZXR1cm4gZD9cInDDpGl2w6RuXCI6XCJww6RpdsOkXCI7Y2FzZVwiZGRcIjplPWQ/XCJww6RpdsOkblwiOlwicMOkaXbDpMOkXCI7YnJlYWs7Y2FzZVwiTVwiOnJldHVybiBkP1wia3V1a2F1ZGVuXCI6XCJrdXVrYXVzaVwiO2Nhc2VcIk1NXCI6ZT1kP1wia3V1a2F1ZGVuXCI6XCJrdXVrYXV0dGFcIjticmVhaztjYXNlXCJ5XCI6cmV0dXJuIGQ/XCJ2dW9kZW5cIjpcInZ1b3NpXCI7Y2FzZVwieXlcIjplPWQ/XCJ2dW9kZW5cIjpcInZ1b3R0YVwifXJldHVybiBlPUFkKGEsZCkrXCIgXCIrZX1mdW5jdGlvbiBBZChhLGIpe3JldHVybiAxMD5hP2I/SmdbYV06SWdbYV06YX1mdW5jdGlvbiBCZChhLGIsYyl7dmFyIGQ9YStcIiBcIjtzd2l0Y2goYyl7Y2FzZVwibVwiOnJldHVybiBiP1wiamVkbmEgbWludXRhXCI6XCJqZWRuZSBtaW51dGVcIjtjYXNlXCJtbVwiOnJldHVybiBkKz0xPT09YT9cIm1pbnV0YVwiOjI9PT1hfHwzPT09YXx8ND09PWE/XCJtaW51dGVcIjpcIm1pbnV0YVwiO2Nhc2VcImhcIjpyZXR1cm4gYj9cImplZGFuIHNhdFwiOlwiamVkbm9nIHNhdGFcIjtjYXNlXCJoaFwiOnJldHVybiBkKz0xPT09YT9cInNhdFwiOjI9PT1hfHwzPT09YXx8ND09PWE/XCJzYXRhXCI6XCJzYXRpXCI7Y2FzZVwiZGRcIjpyZXR1cm4gZCs9MT09PWE/XCJkYW5cIjpcImRhbmFcIjtjYXNlXCJNTVwiOnJldHVybiBkKz0xPT09YT9cIm1qZXNlY1wiOjI9PT1hfHwzPT09YXx8ND09PWE/XCJtamVzZWNhXCI6XCJtamVzZWNpXCI7Y2FzZVwieXlcIjpyZXR1cm4gZCs9MT09PWE/XCJnb2RpbmFcIjoyPT09YXx8Mz09PWF8fDQ9PT1hP1wiZ29kaW5lXCI6XCJnb2RpbmFcIn19ZnVuY3Rpb24gQ2QoYSxiLGMsZCl7dmFyIGU9YTtzd2l0Y2goYyl7Y2FzZVwic1wiOnJldHVybiBkfHxiP1wibsOpaMOhbnkgbcOhc29kcGVyY1wiOlwibsOpaMOhbnkgbcOhc29kcGVyY2VcIjtjYXNlXCJtXCI6cmV0dXJuXCJlZ3lcIisoZHx8Yj9cIiBwZXJjXCI6XCIgcGVyY2VcIik7Y2FzZVwibW1cIjpyZXR1cm4gZSsoZHx8Yj9cIiBwZXJjXCI6XCIgcGVyY2VcIik7Y2FzZVwiaFwiOnJldHVyblwiZWd5XCIrKGR8fGI/XCIgw7NyYVwiOlwiIMOzcsOhamFcIik7Y2FzZVwiaGhcIjpyZXR1cm4gZSsoZHx8Yj9cIiDDs3JhXCI6XCIgw7Nyw6FqYVwiKTtjYXNlXCJkXCI6cmV0dXJuXCJlZ3lcIisoZHx8Yj9cIiBuYXBcIjpcIiBuYXBqYVwiKTtjYXNlXCJkZFwiOnJldHVybiBlKyhkfHxiP1wiIG5hcFwiOlwiIG5hcGphXCIpO2Nhc2VcIk1cIjpyZXR1cm5cImVneVwiKyhkfHxiP1wiIGjDs25hcFwiOlwiIGjDs25hcGphXCIpO2Nhc2VcIk1NXCI6cmV0dXJuIGUrKGR8fGI/XCIgaMOzbmFwXCI6XCIgaMOzbmFwamFcIik7Y2FzZVwieVwiOnJldHVyblwiZWd5XCIrKGR8fGI/XCIgw6l2XCI6XCIgw6l2ZVwiKTtjYXNlXCJ5eVwiOnJldHVybiBlKyhkfHxiP1wiIMOpdlwiOlwiIMOpdmVcIil9cmV0dXJuXCJcIn1mdW5jdGlvbiBEZChhKXtyZXR1cm4oYT9cIlwiOlwiW23Dumx0XSBcIikrXCJbXCIrVGdbdGhpcy5kYXkoKV0rXCJdIExUWy1rb3JdXCJ9ZnVuY3Rpb24gRWQoYSl7cmV0dXJuIGElMTAwPT09MTE/ITA6YSUxMCE9PTF9ZnVuY3Rpb24gRmQoYSxiLGMsZCl7dmFyIGU9YStcIiBcIjtzd2l0Y2goYyl7Y2FzZVwic1wiOnJldHVybiBifHxkP1wibm9ra3JhciBzZWvDum5kdXJcIjpcIm5va2tydW0gc2Vrw7puZHVtXCI7Y2FzZVwibVwiOnJldHVybiBiP1wibcOtbsO6dGFcIjpcIm3DrW7DunR1XCI7Y2FzZVwibW1cIjpyZXR1cm4gRWQoYSk/ZSsoYnx8ZD9cIm3DrW7DunR1clwiOlwibcOtbsO6dHVtXCIpOmI/ZStcIm3DrW7DunRhXCI6ZStcIm3DrW7DunR1XCI7Y2FzZVwiaGhcIjpyZXR1cm4gRWQoYSk/ZSsoYnx8ZD9cImtsdWtrdXN0dW5kaXJcIjpcImtsdWtrdXN0dW5kdW1cIik6ZStcImtsdWtrdXN0dW5kXCI7Y2FzZVwiZFwiOnJldHVybiBiP1wiZGFndXJcIjpkP1wiZGFnXCI6XCJkZWdpXCI7Y2FzZVwiZGRcIjpyZXR1cm4gRWQoYSk/Yj9lK1wiZGFnYXJcIjplKyhkP1wiZGFnYVwiOlwiZMO2Z3VtXCIpOmI/ZStcImRhZ3VyXCI6ZSsoZD9cImRhZ1wiOlwiZGVnaVwiKTtjYXNlXCJNXCI6cmV0dXJuIGI/XCJtw6FudcOwdXJcIjpkP1wibcOhbnXDsFwiOlwibcOhbnXDsGlcIjtjYXNlXCJNTVwiOnJldHVybiBFZChhKT9iP2UrXCJtw6FudcOwaXJcIjplKyhkP1wibcOhbnXDsGlcIjpcIm3DoW51w7B1bVwiKTpiP2UrXCJtw6FudcOwdXJcIjplKyhkP1wibcOhbnXDsFwiOlwibcOhbnXDsGlcIik7Y2FzZVwieVwiOnJldHVybiBifHxkP1wiw6FyXCI6XCLDoXJpXCI7Y2FzZVwieXlcIjpyZXR1cm4gRWQoYSk/ZSsoYnx8ZD9cIsOhclwiOlwiw6FydW1cIik6ZSsoYnx8ZD9cIsOhclwiOlwiw6FyaVwiKX19ZnVuY3Rpb24gR2QoYSxiLGMsZCl7dmFyIGU9e206W1wiZW5nIE1pbnV0dFwiLFwiZW5nZXIgTWludXR0XCJdLGg6W1wiZW5nIFN0b25uXCIsXCJlbmdlciBTdG9ublwiXSxkOltcImVlbiBEYWdcIixcImVuZ2VtIERhZ1wiXSxNOltcImVlIE1vdW50XCIsXCJlbmdlbSBNb3VudFwiXSx5OltcImVlIEpvZXJcIixcImVuZ2VtIEpvZXJcIl19O3JldHVybiBiP2VbY11bMF06ZVtjXVsxXX1mdW5jdGlvbiBIZChhKXt2YXIgYj1hLnN1YnN0cigwLGEuaW5kZXhPZihcIiBcIikpO3JldHVybiBKZChiKT9cImEgXCIrYTpcImFuIFwiK2F9ZnVuY3Rpb24gSWQoYSl7dmFyIGI9YS5zdWJzdHIoMCxhLmluZGV4T2YoXCIgXCIpKTtyZXR1cm4gSmQoYik/XCJ2aXJ1IFwiK2E6XCJ2aXJ1biBcIithfS8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB3b3JkIGJlZm9yZSB0aGUgZ2l2ZW4gbnVtYmVyIGxvc2VzIHRoZSAnLW4nIGVuZGluZy5cclxuICAgICAqIGUuZy4gJ2FuIDEwIERlZWcnIGJ1dCAnYSA1IERlZWcnXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG51bWJlciB7aW50ZWdlcn1cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbmZ1bmN0aW9uIEpkKGEpe2lmKGE9cGFyc2VJbnQoYSwxMCksaXNOYU4oYSkpcmV0dXJuITE7aWYoMD5hKVxyXG4vLyBOZWdhdGl2ZSBOdW1iZXIgLS0+IGFsd2F5cyB0cnVlXHJcbnJldHVybiEwO2lmKDEwPmEpXHJcbi8vIE9ubHkgMSBkaWdpdFxyXG5yZXR1cm4gYT49NCYmNz49YTtpZigxMDA+YSl7XHJcbi8vIDIgZGlnaXRzXHJcbnZhciBiPWElMTAsYz1hLzEwO3JldHVybiBKZCgwPT09Yj9jOmIpfWlmKDFlND5hKXtcclxuLy8gMyBvciA0IGRpZ2l0cyAtLT4gcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3QgZGlnaXRcclxuZm9yKDthPj0xMDspYS89MTA7cmV0dXJuIEpkKGEpfVxyXG4vLyBBbnl0aGluZyBsYXJnZXIgdGhhbiA0IGRpZ2l0czogcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3Qgbi0zIGRpZ2l0c1xyXG5yZXR1cm4gYS89MWUzLEpkKGEpfWZ1bmN0aW9uIEtkKGEsYixjLGQpe3JldHVybiBiP1wia2VsaW9zIHNla3VuZMSXc1wiOmQ/XCJrZWxpxbMgc2VrdW5kxb5pxbNcIjpcImtlbGlhcyBzZWt1bmRlc1wifWZ1bmN0aW9uIExkKGEsYixjLGQpe3JldHVybiBiP05kKGMpWzBdOmQ/TmQoYylbMV06TmQoYylbMl19ZnVuY3Rpb24gTWQoYSl7cmV0dXJuIGElMTA9PT0wfHxhPjEwJiYyMD5hfWZ1bmN0aW9uIE5kKGEpe3JldHVybiBXZ1thXS5zcGxpdChcIl9cIil9ZnVuY3Rpb24gT2QoYSxiLGMsZCl7dmFyIGU9YStcIiBcIjtyZXR1cm4gMT09PWE/ZStMZChhLGIsY1swXSxkKTpiP2UrKE1kKGEpP05kKGMpWzFdOk5kKGMpWzBdKTpkP2UrTmQoYylbMV06ZSsoTWQoYSk/TmQoYylbMV06TmQoYylbMl0pfS8qKlxyXG4gICAgICogQHBhcmFtIHdpdGhvdXRTdWZmaXggYm9vbGVhbiB0cnVlID0gYSBsZW5ndGggb2YgdGltZTsgZmFsc2UgPSBiZWZvcmUvYWZ0ZXIgYSBwZXJpb2Qgb2YgdGltZS5cclxuICAgICAqL1xyXG5mdW5jdGlvbiBQZChhLGIsYyl7cmV0dXJuIGM/YiUxMD09PTEmJmIlMTAwIT09MTE/YVsyXTphWzNdOmIlMTA9PT0xJiZiJTEwMCE9PTExP2FbMF06YVsxXX1mdW5jdGlvbiBRZChhLGIsYyl7cmV0dXJuIGErXCIgXCIrUGQoWGdbY10sYSxiKX1mdW5jdGlvbiBSZChhLGIsYyl7cmV0dXJuIFBkKFhnW2NdLGEsYil9ZnVuY3Rpb24gU2QoYSxiKXtyZXR1cm4gYj9cImRhxb5hcyBzZWt1bmRlc1wiOlwiZGHFvsSBbSBzZWt1bmTEk21cIn1mdW5jdGlvbiBUZChhLGIsYyxkKXt2YXIgZT1cIlwiO2lmKGIpc3dpdGNoKGMpe2Nhc2VcInNcIjplPVwi4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkplwiO2JyZWFrO2Nhc2VcIm1cIjplPVwi4KSP4KSVIOCkruCkv+CkqOCkv+Ckn1wiO2JyZWFrO2Nhc2VcIm1tXCI6ZT1cIiVkIOCkruCkv+CkqOCkv+Ckn+Clh1wiO2JyZWFrO2Nhc2VcImhcIjplPVwi4KSP4KSVIOCkpOCkvuCkuFwiO2JyZWFrO2Nhc2VcImhoXCI6ZT1cIiVkIOCkpOCkvuCkuFwiO2JyZWFrO2Nhc2VcImRcIjplPVwi4KSP4KSVIOCkpuCkv+CkteCkuFwiO2JyZWFrO2Nhc2VcImRkXCI6ZT1cIiVkIOCkpuCkv+CkteCkuFwiO2JyZWFrO2Nhc2VcIk1cIjplPVwi4KSP4KSVIOCkruCkueCkv+CkqOCkvlwiO2JyZWFrO2Nhc2VcIk1NXCI6ZT1cIiVkIOCkruCkueCkv+CkqOClh1wiO2JyZWFrO2Nhc2VcInlcIjplPVwi4KSP4KSVIOCkteCksOCljeCkt1wiO2JyZWFrO2Nhc2VcInl5XCI6ZT1cIiVkIOCkteCksOCljeCkt+Clh1wifWVsc2Ugc3dpdGNoKGMpe2Nhc2VcInNcIjplPVwi4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpuCkvuCkglwiO2JyZWFrO2Nhc2VcIm1cIjplPVwi4KSP4KSV4KS+IOCkruCkv+CkqOCkv+Ckn+CkvlwiO2JyZWFrO2Nhc2VcIm1tXCI6ZT1cIiVkIOCkruCkv+CkqOCkv+Ckn+CkvuCkglwiO2JyZWFrO2Nhc2VcImhcIjplPVwi4KSP4KSV4KS+IOCkpOCkvuCkuOCkvlwiO2JyZWFrO2Nhc2VcImhoXCI6ZT1cIiVkIOCkpOCkvuCkuOCkvuCkglwiO2JyZWFrO2Nhc2VcImRcIjplPVwi4KSP4KSV4KS+IOCkpuCkv+CkteCkuOCkvlwiO2JyZWFrO2Nhc2VcImRkXCI6ZT1cIiVkIOCkpuCkv+CkteCkuOCkvuCkglwiO2JyZWFrO2Nhc2VcIk1cIjplPVwi4KSP4KSV4KS+IOCkruCkueCkv+CkqOCljeCkr+CkvlwiO2JyZWFrO2Nhc2VcIk1NXCI6ZT1cIiVkIOCkruCkueCkv+CkqOCljeCkr+CkvuCkglwiO2JyZWFrO2Nhc2VcInlcIjplPVwi4KSP4KSV4KS+IOCkteCksOCljeCkt+CkvlwiO2JyZWFrO2Nhc2VcInl5XCI6ZT1cIiVkIOCkteCksOCljeCkt+CkvuCkglwifXJldHVybiBlLnJlcGxhY2UoLyVkL2ksYSl9ZnVuY3Rpb24gVWQoYSl7cmV0dXJuIDU+YSUxMCYmYSUxMD4xJiZ+fihhLzEwKSUxMCE9PTF9ZnVuY3Rpb24gVmQoYSxiLGMpe3ZhciBkPWErXCIgXCI7c3dpdGNoKGMpe2Nhc2VcIm1cIjpyZXR1cm4gYj9cIm1pbnV0YVwiOlwibWludXTEmVwiO2Nhc2VcIm1tXCI6cmV0dXJuIGQrKFVkKGEpP1wibWludXR5XCI6XCJtaW51dFwiKTtjYXNlXCJoXCI6cmV0dXJuIGI/XCJnb2R6aW5hXCI6XCJnb2R6aW7EmVwiO2Nhc2VcImhoXCI6cmV0dXJuIGQrKFVkKGEpP1wiZ29kemlueVwiOlwiZ29kemluXCIpO2Nhc2VcIk1NXCI6cmV0dXJuIGQrKFVkKGEpP1wibWllc2nEhWNlXCI6XCJtaWVzacSZY3lcIik7Y2FzZVwieXlcIjpyZXR1cm4gZCsoVWQoYSk/XCJsYXRhXCI6XCJsYXRcIil9fWZ1bmN0aW9uIFdkKGEsYixjKXt2YXIgZD17bW06XCJtaW51dGVcIixoaDpcIm9yZVwiLGRkOlwiemlsZVwiLE1NOlwibHVuaVwiLHl5OlwiYW5pXCJ9LGU9XCIgXCI7cmV0dXJuKGElMTAwPj0yMHx8YT49MTAwJiZhJTEwMD09PTApJiYoZT1cIiBkZSBcIiksYStlK2RbY119ZnVuY3Rpb24gWGQoYSxiKXt2YXIgYz1hLnNwbGl0KFwiX1wiKTtyZXR1cm4gYiUxMD09PTEmJmIlMTAwIT09MTE/Y1swXTpiJTEwPj0yJiY0Pj1iJTEwJiYoMTA+YiUxMDB8fGIlMTAwPj0yMCk/Y1sxXTpjWzJdfWZ1bmN0aW9uIFlkKGEsYixjKXt2YXIgZD17bW06Yj9cItC80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRglwiOlwi0LzQuNC90YPRgtGDX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCXCIsaGg6XCLRh9Cw0YFf0YfQsNGB0LBf0YfQsNGB0L7QslwiLGRkOlwi0LTQtdC90Yxf0LTQvdGPX9C00L3QtdC5XCIsTU06XCLQvNC10YHRj9GGX9C80LXRgdGP0YbQsF/QvNC10YHRj9GG0LXQslwiLHl5Olwi0LPQvtC0X9Cz0L7QtNCwX9C70LXRglwifTtyZXR1cm5cIm1cIj09PWM/Yj9cItC80LjQvdGD0YLQsFwiOlwi0LzQuNC90YPRgtGDXCI6YStcIiBcIitYZChkW2NdLCthKX1mdW5jdGlvbiBaZChhKXtyZXR1cm4gYT4xJiY1PmF9ZnVuY3Rpb24gJGQoYSxiLGMsZCl7dmFyIGU9YStcIiBcIjtzd2l0Y2goYyl7Y2FzZVwic1wiOi8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cclxucmV0dXJuIGJ8fGQ/XCJww6FyIHNla8O6bmRcIjpcInDDoXIgc2VrdW5kYW1pXCI7Y2FzZVwibVwiOi8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cclxucmV0dXJuIGI/XCJtaW7DunRhXCI6ZD9cIm1pbsO6dHVcIjpcIm1pbsO6dG91XCI7Y2FzZVwibW1cIjovLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXHJcbi8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ29cclxucmV0dXJuIGJ8fGQ/ZSsoWmQoYSk/XCJtaW7DunR5XCI6XCJtaW7DunRcIik6ZStcIm1pbsO6dGFtaVwiO2JyZWFrO2Nhc2VcImhcIjovLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXHJcbnJldHVybiBiP1wiaG9kaW5hXCI6ZD9cImhvZGludVwiOlwiaG9kaW5vdVwiO2Nhc2VcImhoXCI6Ly8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xyXG4vLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvXHJcbnJldHVybiBifHxkP2UrKFpkKGEpP1wiaG9kaW55XCI6XCJob2TDrW5cIik6ZStcImhvZGluYW1pXCI7YnJlYWs7Y2FzZVwiZFwiOi8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cclxucmV0dXJuIGJ8fGQ/XCJkZcWIXCI6XCJkxYhvbVwiO2Nhc2VcImRkXCI6Ly8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xyXG4vLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvXHJcbnJldHVybiBifHxkP2UrKFpkKGEpP1wiZG5pXCI6XCJkbsOtXCIpOmUrXCJkxYhhbWlcIjticmVhaztjYXNlXCJNXCI6Ly8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xyXG5yZXR1cm4gYnx8ZD9cIm1lc2lhY1wiOlwibWVzaWFjb21cIjtjYXNlXCJNTVwiOi8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cclxuLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xyXG5yZXR1cm4gYnx8ZD9lKyhaZChhKT9cIm1lc2lhY2VcIjpcIm1lc2lhY292XCIpOmUrXCJtZXNpYWNtaVwiO2JyZWFrO2Nhc2VcInlcIjovLyBhIHllYXIgLyBpbiBhIHllYXIgLyBhIHllYXIgYWdvXHJcbnJldHVybiBifHxkP1wicm9rXCI6XCJyb2tvbVwiO2Nhc2VcInl5XCI6Ly8gOSB5ZWFycyAvIGluIDkgeWVhcnMgLyA5IHllYXJzIGFnb1xyXG4vLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXHJcbnJldHVybiBifHxkP2UrKFpkKGEpP1wicm9reVwiOlwicm9rb3ZcIik6ZStcInJva21pXCJ9fWZ1bmN0aW9uIF9kKGEsYixjLGQpe3ZhciBlPWErXCIgXCI7c3dpdGNoKGMpe2Nhc2VcInNcIjpyZXR1cm4gYnx8ZD9cIm5la2FqIHNla3VuZFwiOlwibmVrYWogc2VrdW5kYW1pXCI7Y2FzZVwibVwiOnJldHVybiBiP1wiZW5hIG1pbnV0YVwiOlwiZW5vIG1pbnV0b1wiO2Nhc2VcIm1tXCI6cmV0dXJuIGUrPTE9PT1hP2I/XCJtaW51dGFcIjpcIm1pbnV0b1wiOjI9PT1hP2J8fGQ/XCJtaW51dGlcIjpcIm1pbnV0YW1hXCI6NT5hP2J8fGQ/XCJtaW51dGVcIjpcIm1pbnV0YW1pXCI6Ynx8ZD9cIm1pbnV0XCI6XCJtaW51dGFtaVwiO2Nhc2VcImhcIjpyZXR1cm4gYj9cImVuYSB1cmFcIjpcImVubyB1cm9cIjtjYXNlXCJoaFwiOnJldHVybiBlKz0xPT09YT9iP1widXJhXCI6XCJ1cm9cIjoyPT09YT9ifHxkP1widXJpXCI6XCJ1cmFtYVwiOjU+YT9ifHxkP1widXJlXCI6XCJ1cmFtaVwiOmJ8fGQ/XCJ1clwiOlwidXJhbWlcIjtjYXNlXCJkXCI6cmV0dXJuIGJ8fGQ/XCJlbiBkYW5cIjpcImVuaW0gZG5lbVwiO2Nhc2VcImRkXCI6cmV0dXJuIGUrPTE9PT1hP2J8fGQ/XCJkYW5cIjpcImRuZW1cIjoyPT09YT9ifHxkP1wiZG5pXCI6XCJkbmV2b21hXCI6Ynx8ZD9cImRuaVwiOlwiZG5ldmlcIjtjYXNlXCJNXCI6cmV0dXJuIGJ8fGQ/XCJlbiBtZXNlY1wiOlwiZW5pbSBtZXNlY2VtXCI7Y2FzZVwiTU1cIjpyZXR1cm4gZSs9MT09PWE/Ynx8ZD9cIm1lc2VjXCI6XCJtZXNlY2VtXCI6Mj09PWE/Ynx8ZD9cIm1lc2VjYVwiOlwibWVzZWNlbWFcIjo1PmE/Ynx8ZD9cIm1lc2VjZVwiOlwibWVzZWNpXCI6Ynx8ZD9cIm1lc2VjZXZcIjpcIm1lc2VjaVwiO2Nhc2VcInlcIjpyZXR1cm4gYnx8ZD9cImVubyBsZXRvXCI6XCJlbmltIGxldG9tXCI7Y2FzZVwieXlcIjpyZXR1cm4gZSs9MT09PWE/Ynx8ZD9cImxldG9cIjpcImxldG9tXCI6Mj09PWE/Ynx8ZD9cImxldGlcIjpcImxldG9tYVwiOjU+YT9ifHxkP1wibGV0YVwiOlwibGV0aVwiOmJ8fGQ/XCJsZXRcIjpcImxldGlcIn19ZnVuY3Rpb24gYWUoYSl7dmFyIGI9YTtyZXR1cm4gYj0tMSE9PWEuaW5kZXhPZihcImphalwiKT9iLnNsaWNlKDAsLTMpK1wibGVTXCI6LTEhPT1hLmluZGV4T2YoXCJqYXJcIik/Yi5zbGljZSgwLC0zKStcIndhUVwiOi0xIT09YS5pbmRleE9mKFwiRElTXCIpP2Iuc2xpY2UoMCwtMykrXCJuZW1cIjpiK1wiIHBJcVwifWZ1bmN0aW9uIGJlKGEpe3ZhciBiPWE7cmV0dXJuIGI9LTEhPT1hLmluZGV4T2YoXCJqYWpcIik/Yi5zbGljZSgwLC0zKStcIkh14oCZXCI6LTEhPT1hLmluZGV4T2YoXCJqYXJcIik/Yi5zbGljZSgwLC0zKStcIndlblwiOi0xIT09YS5pbmRleE9mKFwiRElTXCIpP2Iuc2xpY2UoMCwtMykrXCJiZW5cIjpiK1wiIHJldFwifWZ1bmN0aW9uIGNlKGEsYixjLGQpe3ZhciBlPWRlKGEpO3N3aXRjaChjKXtjYXNlXCJtbVwiOnJldHVybiBlK1wiIHR1cFwiO2Nhc2VcImhoXCI6cmV0dXJuIGUrXCIgcmVwXCI7Y2FzZVwiZGRcIjpyZXR1cm4gZStcIiBqYWpcIjtjYXNlXCJNTVwiOnJldHVybiBlK1wiIGphclwiO2Nhc2VcInl5XCI6cmV0dXJuIGUrXCIgRElTXCJ9fWZ1bmN0aW9uIGRlKGEpe3ZhciBiPU1hdGguZmxvb3IoYSUxZTMvMTAwKSxjPU1hdGguZmxvb3IoYSUxMDAvMTApLGQ9YSUxMCxlPVwiXCI7cmV0dXJuIGI+MCYmKGUrPXFoW2JdK1widmF0bGhcIiksYz4wJiYoZSs9KFwiXCIhPT1lP1wiIFwiOlwiXCIpK3FoW2NdK1wibWFIXCIpLGQ+MCYmKGUrPShcIlwiIT09ZT9cIiBcIjpcIlwiKStxaFtkXSksXCJcIj09PWU/XCJwYWdoXCI6ZX1mdW5jdGlvbiBlZShhLGIsYyxkKXt2YXIgZT17czpbXCJ2aWVuc2FzIHNlY3VuZHNcIixcIidpZW5zYXMgc2VjdW5kc1wiXSxtOltcIiduIG3DrXV0XCIsXCInaWVucyBtw611dFwiXSxtbTpbYStcIiBtw611dHNcIixcIlwiK2ErXCIgbcOtdXRzXCJdLGg6W1wiJ24gw75vcmFcIixcIidpZW5zYSDDvm9yYVwiXSxoaDpbYStcIiDDvm9yYXNcIixcIlwiK2ErXCIgw75vcmFzXCJdLGQ6W1wiJ24geml1YVwiLFwiJ2llbnNhIHppdWFcIl0sZGQ6W2ErXCIgeml1YXNcIixcIlwiK2ErXCIgeml1YXNcIl0sTTpbXCInbiBtZXNcIixcIidpZW5zIG1lc1wiXSxNTTpbYStcIiBtZXNlblwiLFwiXCIrYStcIiBtZXNlblwiXSx5OltcIiduIGFyXCIsXCInaWVucyBhclwiXSx5eTpbYStcIiBhcnNcIixcIlwiK2ErXCIgYXJzXCJdfTtyZXR1cm4gZD9lW2NdWzBdOmI/ZVtjXVswXTplW2NdWzFdfWZ1bmN0aW9uIGZlKGEsYil7dmFyIGM9YS5zcGxpdChcIl9cIik7cmV0dXJuIGIlMTA9PT0xJiZiJTEwMCE9PTExP2NbMF06YiUxMD49MiYmND49YiUxMCYmKDEwPmIlMTAwfHxiJTEwMD49MjApP2NbMV06Y1syXX1mdW5jdGlvbiBnZShhLGIsYyl7dmFyIGQ9e21tOmI/XCLRhdCy0LjQu9C40L3QsF/RhdCy0LjQu9C40L3QuF/RhdCy0LjQu9C40L1cIjpcItGF0LLQuNC70LjQvdGDX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvVwiLGhoOmI/XCLQs9C+0LTQuNC90LBf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L1cIjpcItCz0L7QtNC40L3Rg1/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvVwiLGRkOlwi0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyXCIsTU06XCLQvNGW0YHRj9GG0Yxf0LzRltGB0Y/RhtGWX9C80ZbRgdGP0YbRltCyXCIseXk6XCLRgNGW0Lpf0YDQvtC60Lhf0YDQvtC60ZbQslwifTtyZXR1cm5cIm1cIj09PWM/Yj9cItGF0LLQuNC70LjQvdCwXCI6XCLRhdCy0LjQu9C40L3Rg1wiOlwiaFwiPT09Yz9iP1wi0LPQvtC00LjQvdCwXCI6XCLQs9C+0LTQuNC90YNcIjphK1wiIFwiK2ZlKGRbY10sK2EpfWZ1bmN0aW9uIGhlKGEsYil7dmFyIGM9e25vbWluYXRpdmU6XCLQvdC10LTRltC70Y9f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNCwX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRj1/RgdGD0LHQvtGC0LBcIi5zcGxpdChcIl9cIiksYWNjdXNhdGl2ZTpcItC90LXQtNGW0LvRjl/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00YNf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGOX9GB0YPQsdC+0YLRg1wiLnNwbGl0KFwiX1wiKSxnZW5pdGl2ZTpcItC90LXQtNGW0LvRll/Qv9C+0L3QtdC00ZbQu9C60LBf0LLRltCy0YLQvtGA0LrQsF/RgdC10YDQtdC00Lhf0YfQtdGC0LLQtdGA0LPQsF/Qv+KAmdGP0YLQvdC40YbRll/RgdGD0LHQvtGC0LhcIi5zcGxpdChcIl9cIil9LGQ9LyhcXFtb0JLQstCj0YNdXFxdKSA/ZGRkZC8udGVzdChiKT9cImFjY3VzYXRpdmVcIjovXFxbPyg/OtC80LjQvdGD0LvQvtGXfNC90LDRgdGC0YPQv9C90L7Rlyk/ID9cXF0gP2RkZGQvLnRlc3QoYik/XCJnZW5pdGl2ZVwiOlwibm9taW5hdGl2ZVwiO3JldHVybiBjW2RdW2EuZGF5KCldfWZ1bmN0aW9uIGllKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhK1wi0L5cIisoMTE9PT10aGlzLmhvdXJzKCk/XCLQsVwiOlwiXCIpK1wiXSBMVFwifX12YXIgamUsa2U7a2U9QXJyYXkucHJvdG90eXBlLnNvbWU/QXJyYXkucHJvdG90eXBlLnNvbWU6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPU9iamVjdCh0aGlzKSxjPWIubGVuZ3RoPj4+MCxkPTA7Yz5kO2QrKylpZihkIGluIGImJmEuY2FsbCh0aGlzLGJbZF0sZCxiKSlyZXR1cm4hMDtyZXR1cm4hMX07XHJcbi8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcclxuLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cclxudmFyIGxlPWEubW9tZW50UHJvcGVydGllcz1bXSxtZT0hMSxuZT17fTthLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncz0hMSxhLmRlcHJlY2F0aW9uSGFuZGxlcj1udWxsO3ZhciBvZTtvZT1PYmplY3Qua2V5cz9PYmplY3Qua2V5czpmdW5jdGlvbihhKXt2YXIgYixjPVtdO2ZvcihiIGluIGEpaChhLGIpJiZjLnB1c2goYik7cmV0dXJuIGN9O3ZhciBwZSxxZT17c2FtZURheTpcIltUb2RheSBhdF0gTFRcIixuZXh0RGF5OlwiW1RvbW9ycm93IGF0XSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYXRdIExUXCIsbGFzdERheTpcIltZZXN0ZXJkYXkgYXRdIExUXCIsbGFzdFdlZWs6XCJbTGFzdF0gZGRkZCBbYXRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlPXtMVFM6XCJoOm1tOnNzIEFcIixMVDpcImg6bW0gQVwiLEw6XCJNTS9ERC9ZWVlZXCIsTEw6XCJNTU1NIEQsIFlZWVlcIixMTEw6XCJNTU1NIEQsIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEFcIn0sc2U9XCJJbnZhbGlkIGRhdGVcIix0ZT1cIiVkXCIsdWU9L1xcZHsxLDJ9Lyx2ZT17ZnV0dXJlOlwiaW4gJXNcIixwYXN0OlwiJXMgYWdvXCIsczpcImEgZmV3IHNlY29uZHNcIixtOlwiYSBtaW51dGVcIixtbTpcIiVkIG1pbnV0ZXNcIixoOlwiYW4gaG91clwiLGhoOlwiJWQgaG91cnNcIixkOlwiYSBkYXlcIixkZDpcIiVkIGRheXNcIixNOlwiYSBtb250aFwiLE1NOlwiJWQgbW9udGhzXCIseTpcImEgeWVhclwiLHl5OlwiJWQgeWVhcnNcIn0sd2U9e30seGU9e30seWU9LyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZyx6ZT0vKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nLEFlPXt9LEJlPXt9LENlPS9cXGQvLERlPS9cXGRcXGQvLEVlPS9cXGR7M30vLEZlPS9cXGR7NH0vLEdlPS9bKy1dP1xcZHs2fS8sSGU9L1xcZFxcZD8vLEllPS9cXGRcXGRcXGRcXGQ/LyxKZT0vXFxkXFxkXFxkXFxkXFxkXFxkPy8sS2U9L1xcZHsxLDN9LyxMZT0vXFxkezEsNH0vLE1lPS9bKy1dP1xcZHsxLDZ9LyxOZT0vXFxkKy8sT2U9L1srLV0/XFxkKy8sUGU9L1p8WystXVxcZFxcZDo/XFxkXFxkL2dpLFFlPS9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpLFJlPS9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy8sU2U9L1swLTldKlsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSt8W1xcdTA2MDAtXFx1MDZGRlxcL10rKFxccyo/W1xcdTA2MDAtXFx1MDZGRl0rKXsxLDJ9L2ksVGU9e30sVWU9e30sVmU9MCxXZT0xLFhlPTIsWWU9MyxaZT00LCRlPTUsX2U9NixhZj03LGJmPTg7cGU9QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/QXJyYXkucHJvdG90eXBlLmluZGV4T2Y6ZnVuY3Rpb24oYSl7XHJcbi8vIEkga25vd1xyXG52YXIgYjtmb3IoYj0wO2I8dGhpcy5sZW5ndGg7KytiKWlmKHRoaXNbYl09PT1hKXJldHVybiBiO3JldHVybi0xfSxUKFwiTVwiLFtcIk1NXCIsMl0sXCJNb1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9udGgoKSsxfSksVChcIk1NTVwiLDAsMCxmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcyxhKX0pLFQoXCJNTU1NXCIsMCwwLGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcyxhKX0pLEkoXCJtb250aFwiLFwiTVwiKSxMKFwibW9udGhcIiw4KSxZKFwiTVwiLEhlKSxZKFwiTU1cIixIZSxEZSksWShcIk1NTVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIubW9udGhzU2hvcnRSZWdleChhKX0pLFkoXCJNTU1NXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi5tb250aHNSZWdleChhKX0pLGFhKFtcIk1cIixcIk1NXCJdLGZ1bmN0aW9uKGEsYil7YltXZV09dChhKS0xfSksYWEoW1wiTU1NXCIsXCJNTU1NXCJdLGZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWMuX2xvY2FsZS5tb250aHNQYXJzZShhLGQsYy5fc3RyaWN0KTtudWxsIT1lP2JbV2VdPWU6bChjKS5pbnZhbGlkTW9udGg9YX0pO1xyXG4vLyBMT0NBTEVTXHJcbnZhciBjZj0vRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKykrTU1NTT8vLGRmPVwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxlZj1cIkphbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjXCIuc3BsaXQoXCJfXCIpLGZmPVNlLGdmPVNlO1xyXG4vLyBGT1JNQVRUSU5HXHJcblQoXCJZXCIsMCwwLGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy55ZWFyKCk7cmV0dXJuIDk5OTk+PWE/XCJcIithOlwiK1wiK2F9KSxUKDAsW1wiWVlcIiwyXSwwLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueWVhcigpJTEwMH0pLFQoMCxbXCJZWVlZXCIsNF0sMCxcInllYXJcIiksVCgwLFtcIllZWVlZXCIsNV0sMCxcInllYXJcIiksVCgwLFtcIllZWVlZWVwiLDYsITBdLDAsXCJ5ZWFyXCIpLFxyXG4vLyBBTElBU0VTXHJcbkkoXCJ5ZWFyXCIsXCJ5XCIpLFxyXG4vLyBQUklPUklUSUVTXHJcbkwoXCJ5ZWFyXCIsMSksXHJcbi8vIFBBUlNJTkdcclxuWShcIllcIixPZSksWShcIllZXCIsSGUsRGUpLFkoXCJZWVlZXCIsTGUsRmUpLFkoXCJZWVlZWVwiLE1lLEdlKSxZKFwiWVlZWVlZXCIsTWUsR2UpLGFhKFtcIllZWVlZXCIsXCJZWVlZWVlcIl0sVmUpLGFhKFwiWVlZWVwiLGZ1bmN0aW9uKGIsYyl7Y1tWZV09Mj09PWIubGVuZ3RoP2EucGFyc2VUd29EaWdpdFllYXIoYik6dChiKX0pLGFhKFwiWVlcIixmdW5jdGlvbihiLGMpe2NbVmVdPWEucGFyc2VUd29EaWdpdFllYXIoYil9KSxhYShcIllcIixmdW5jdGlvbihhLGIpe2JbVmVdPXBhcnNlSW50KGEsMTApfSksXHJcbi8vIEhPT0tTXHJcbmEucGFyc2VUd29EaWdpdFllYXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSkrKHQoYSk+Njg/MTkwMDoyZTMpfTtcclxuLy8gTU9NRU5UU1xyXG52YXIgaGY9TihcIkZ1bGxZZWFyXCIsITApO1xyXG4vLyBGT1JNQVRUSU5HXHJcblQoXCJ3XCIsW1wid3dcIiwyXSxcIndvXCIsXCJ3ZWVrXCIpLFQoXCJXXCIsW1wiV1dcIiwyXSxcIldvXCIsXCJpc29XZWVrXCIpLFxyXG4vLyBBTElBU0VTXHJcbkkoXCJ3ZWVrXCIsXCJ3XCIpLEkoXCJpc29XZWVrXCIsXCJXXCIpLFxyXG4vLyBQUklPUklUSUVTXHJcbkwoXCJ3ZWVrXCIsNSksTChcImlzb1dlZWtcIiw1KSxcclxuLy8gUEFSU0lOR1xyXG5ZKFwid1wiLEhlKSxZKFwid3dcIixIZSxEZSksWShcIldcIixIZSksWShcIldXXCIsSGUsRGUpLGJhKFtcIndcIixcInd3XCIsXCJXXCIsXCJXV1wiXSxmdW5jdGlvbihhLGIsYyxkKXtiW2Quc3Vic3RyKDAsMSldPXQoYSl9KTt2YXIgamY9e2RvdzowLC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6Nn07XHJcbi8vIEZPUk1BVFRJTkdcclxuVChcImRcIiwwLFwiZG9cIixcImRheVwiKSxUKFwiZGRcIiwwLDAsZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsYSl9KSxUKFwiZGRkXCIsMCwwLGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsYSl9KSxUKFwiZGRkZFwiLDAsMCxmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcyxhKX0pLFQoXCJlXCIsMCwwLFwid2Vla2RheVwiKSxUKFwiRVwiLDAsMCxcImlzb1dlZWtkYXlcIiksXHJcbi8vIEFMSUFTRVNcclxuSShcImRheVwiLFwiZFwiKSxJKFwid2Vla2RheVwiLFwiZVwiKSxJKFwiaXNvV2Vla2RheVwiLFwiRVwiKSxcclxuLy8gUFJJT1JJVFlcclxuTChcImRheVwiLDExKSxMKFwid2Vla2RheVwiLDExKSxMKFwiaXNvV2Vla2RheVwiLDExKSxcclxuLy8gUEFSU0lOR1xyXG5ZKFwiZFwiLEhlKSxZKFwiZVwiLEhlKSxZKFwiRVwiLEhlKSxZKFwiZGRcIixmdW5jdGlvbihhLGIpe3JldHVybiBiLndlZWtkYXlzTWluUmVnZXgoYSl9KSxZKFwiZGRkXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi53ZWVrZGF5c1Nob3J0UmVnZXgoYSl9KSxZKFwiZGRkZFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIud2Vla2RheXNSZWdleChhKX0pLGJhKFtcImRkXCIsXCJkZGRcIixcImRkZGRcIl0sZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoYSxkLGMuX3N0cmljdCk7XHJcbi8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxyXG5udWxsIT1lP2IuZD1lOmwoYykuaW52YWxpZFdlZWtkYXk9YX0pLGJhKFtcImRcIixcImVcIixcIkVcIl0sZnVuY3Rpb24oYSxiLGMsZCl7YltkXT10KGEpfSk7XHJcbi8vIExPQ0FMRVNcclxudmFyIGtmPVwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksbGY9XCJTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXRcIi5zcGxpdChcIl9cIiksbWY9XCJTdV9Nb19UdV9XZV9UaF9Gcl9TYVwiLnNwbGl0KFwiX1wiKSxuZj1TZSxvZj1TZSxwZj1TZTtUKFwiSFwiLFtcIkhIXCIsMl0sMCxcImhvdXJcIiksVChcImhcIixbXCJoaFwiLDJdLDAsUWEpLFQoXCJrXCIsW1wia2tcIiwyXSwwLFJhKSxUKFwiaG1tXCIsMCwwLGZ1bmN0aW9uKCl7cmV0dXJuXCJcIitRYS5hcHBseSh0aGlzKStTKHRoaXMubWludXRlcygpLDIpfSksVChcImhtbXNzXCIsMCwwLGZ1bmN0aW9uKCl7cmV0dXJuXCJcIitRYS5hcHBseSh0aGlzKStTKHRoaXMubWludXRlcygpLDIpK1ModGhpcy5zZWNvbmRzKCksMil9KSxUKFwiSG1tXCIsMCwwLGZ1bmN0aW9uKCl7cmV0dXJuXCJcIit0aGlzLmhvdXJzKCkrUyh0aGlzLm1pbnV0ZXMoKSwyKX0pLFQoXCJIbW1zc1wiLDAsMCxmdW5jdGlvbigpe3JldHVyblwiXCIrdGhpcy5ob3VycygpK1ModGhpcy5taW51dGVzKCksMikrUyh0aGlzLnNlY29uZHMoKSwyKX0pLFNhKFwiYVwiLCEwKSxTYShcIkFcIiwhMSksXHJcbi8vIEFMSUFTRVNcclxuSShcImhvdXJcIixcImhcIiksXHJcbi8vIFBSSU9SSVRZXHJcbkwoXCJob3VyXCIsMTMpLFkoXCJhXCIsVGEpLFkoXCJBXCIsVGEpLFkoXCJIXCIsSGUpLFkoXCJoXCIsSGUpLFkoXCJISFwiLEhlLERlKSxZKFwiaGhcIixIZSxEZSksWShcImhtbVwiLEllKSxZKFwiaG1tc3NcIixKZSksWShcIkhtbVwiLEllKSxZKFwiSG1tc3NcIixKZSksYWEoW1wiSFwiLFwiSEhcIl0sWWUpLGFhKFtcImFcIixcIkFcIl0sZnVuY3Rpb24oYSxiLGMpe2MuX2lzUG09Yy5fbG9jYWxlLmlzUE0oYSksYy5fbWVyaWRpZW09YX0pLGFhKFtcImhcIixcImhoXCJdLGZ1bmN0aW9uKGEsYixjKXtiW1llXT10KGEpLGwoYykuYmlnSG91cj0hMH0pLGFhKFwiaG1tXCIsZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEubGVuZ3RoLTI7YltZZV09dChhLnN1YnN0cigwLGQpKSxiW1plXT10KGEuc3Vic3RyKGQpKSxsKGMpLmJpZ0hvdXI9ITB9KSxhYShcImhtbXNzXCIsZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEubGVuZ3RoLTQsZT1hLmxlbmd0aC0yO2JbWWVdPXQoYS5zdWJzdHIoMCxkKSksYltaZV09dChhLnN1YnN0cihkLDIpKSxiWyRlXT10KGEuc3Vic3RyKGUpKSxsKGMpLmJpZ0hvdXI9ITB9KSxhYShcIkhtbVwiLGZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLmxlbmd0aC0yO2JbWWVdPXQoYS5zdWJzdHIoMCxkKSksYltaZV09dChhLnN1YnN0cihkKSl9KSxhYShcIkhtbXNzXCIsZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEubGVuZ3RoLTQsZT1hLmxlbmd0aC0yO2JbWWVdPXQoYS5zdWJzdHIoMCxkKSksYltaZV09dChhLnN1YnN0cihkLDIpKSxiWyRlXT10KGEuc3Vic3RyKGUpKX0pO3ZhciBxZixyZj0vW2FwXVxcLj9tP1xcLj8vaSxzZj1OKFwiSG91cnNcIiwhMCksdGY9e2NhbGVuZGFyOnFlLGxvbmdEYXRlRm9ybWF0OnJlLGludmFsaWREYXRlOnNlLG9yZGluYWw6dGUsb3JkaW5hbFBhcnNlOnVlLHJlbGF0aXZlVGltZTp2ZSxtb250aHM6ZGYsbW9udGhzU2hvcnQ6ZWYsd2VlazpqZix3ZWVrZGF5czprZix3ZWVrZGF5c01pbjptZix3ZWVrZGF5c1Nob3J0OmxmLG1lcmlkaWVtUGFyc2U6cmZ9LHVmPXt9LHZmPS9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8vLHdmPS9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/Lyx4Zj0vWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy8seWY9W1tcIllZWVlZWS1NTS1ERFwiLC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxbXCJZWVlZLU1NLUREXCIsL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sW1wiR0dHRy1bV11XVy1FXCIsL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFtcIkdHR0ctW1ddV1dcIiwvXFxkezR9LVdcXGRcXGQvLCExXSxbXCJZWVlZLURERFwiLC9cXGR7NH0tXFxkezN9L10sW1wiWVlZWS1NTVwiLC9cXGR7NH0tXFxkXFxkLywhMV0sW1wiWVlZWVlZTU1ERFwiLC9bKy1dXFxkezEwfS9dLFtcIllZWVlNTUREXCIsL1xcZHs4fS9dLFxyXG4vLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXHJcbltcIkdHR0dbV11XV0VcIiwvXFxkezR9V1xcZHszfS9dLFtcIkdHR0dbV11XV1wiLC9cXGR7NH1XXFxkezJ9LywhMV0sW1wiWVlZWURERFwiLC9cXGR7N30vXV0semY9W1tcIkhIOm1tOnNzLlNTU1NcIiwvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sW1wiSEg6bW06c3MsU1NTU1wiLC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sW1wiSEg6bW06c3NcIiwvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxbXCJISDptbVwiLC9cXGRcXGQ6XFxkXFxkL10sW1wiSEhtbXNzLlNTU1NcIiwvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFtcIkhIbW1zcyxTU1NTXCIsL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sW1wiSEhtbXNzXCIsL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFtcIkhIbW1cIiwvXFxkXFxkXFxkXFxkL10sW1wiSEhcIiwvXFxkXFxkL11dLEFmPS9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7YS5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjaz13KFwibW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUuIFRoaXMgaXMgZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLlwiLGZ1bmN0aW9uKGEpe2EuX2Q9bmV3IERhdGUoYS5faSsoYS5fdXNlVVRDP1wiIFVUQ1wiOlwiXCIpKX0pLFxyXG4vLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXHJcbmEuSVNPXzg2MDE9ZnVuY3Rpb24oKXt9O3ZhciBCZj13KFwibW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC9cIixmdW5jdGlvbigpe3ZhciBhPXJiLmFwcGx5KG51bGwsYXJndW1lbnRzKTtyZXR1cm4gdGhpcy5pc1ZhbGlkKCkmJmEuaXNWYWxpZCgpP3RoaXM+YT90aGlzOmE6bigpfSksQ2Y9dyhcIm1vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvXCIsZnVuY3Rpb24oKXt2YXIgYT1yYi5hcHBseShudWxsLGFyZ3VtZW50cyk7cmV0dXJuIHRoaXMuaXNWYWxpZCgpJiZhLmlzVmFsaWQoKT9hPnRoaXM/dGhpczphOm4oKX0pLERmPWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93P0RhdGUubm93KCk6K25ldyBEYXRlfTt4YihcIlpcIixcIjpcIikseGIoXCJaWlwiLFwiXCIpLFxyXG4vLyBQQVJTSU5HXHJcblkoXCJaXCIsUWUpLFkoXCJaWlwiLFFlKSxhYShbXCJaXCIsXCJaWlwiXSxmdW5jdGlvbihhLGIsYyl7Yy5fdXNlVVRDPSEwLGMuX3R6bT15YihRZSxhKX0pO1xyXG4vLyBIRUxQRVJTXHJcbi8vIHRpbWV6b25lIGNodW5rZXJcclxuLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXHJcbi8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxyXG52YXIgRWY9LyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xyXG4vLyBIT09LU1xyXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXHJcbi8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxyXG5hLnVwZGF0ZU9mZnNldD1mdW5jdGlvbigpe307XHJcbi8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxyXG52YXIgRmY9L14oXFwtKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKylcXC4/KFxcZHszfSk/XFxkKik/JC8sR2Y9L14oLSk/UCg/OigtP1swLTksLl0qKVkpPyg/OigtP1swLTksLl0qKU0pPyg/OigtP1swLTksLl0qKVcpPyg/OigtP1swLTksLl0qKUQpPyg/OlQoPzooLT9bMC05LC5dKilIKT8oPzooLT9bMC05LC5dKilNKT8oPzooLT9bMC05LC5dKilTKT8pPyQvO01iLmZuPXZiLnByb3RvdHlwZTt2YXIgSGY9UmIoMSxcImFkZFwiKSxJZj1SYigtMSxcInN1YnRyYWN0XCIpO2EuZGVmYXVsdEZvcm1hdD1cIllZWVktTU0tRERUSEg6bW06c3NaXCIsYS5kZWZhdWx0Rm9ybWF0VXRjPVwiWVlZWS1NTS1ERFRISDptbTpzc1taXVwiO3ZhciBKZj13KFwibW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy5cIixmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YT90aGlzLmxvY2FsZURhdGEoKTp0aGlzLmxvY2FsZShhKX0pO1xyXG4vLyBGT1JNQVRUSU5HXHJcblQoMCxbXCJnZ1wiLDJdLDAsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53ZWVrWWVhcigpJTEwMH0pLFQoMCxbXCJHR1wiLDJdLDAsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpJTEwMH0pLHhjKFwiZ2dnZ1wiLFwid2Vla1llYXJcIikseGMoXCJnZ2dnZ1wiLFwid2Vla1llYXJcIikseGMoXCJHR0dHXCIsXCJpc29XZWVrWWVhclwiKSx4YyhcIkdHR0dHXCIsXCJpc29XZWVrWWVhclwiKSxcclxuLy8gQUxJQVNFU1xyXG5JKFwid2Vla1llYXJcIixcImdnXCIpLEkoXCJpc29XZWVrWWVhclwiLFwiR0dcIiksXHJcbi8vIFBSSU9SSVRZXHJcbkwoXCJ3ZWVrWWVhclwiLDEpLEwoXCJpc29XZWVrWWVhclwiLDEpLFxyXG4vLyBQQVJTSU5HXHJcblkoXCJHXCIsT2UpLFkoXCJnXCIsT2UpLFkoXCJHR1wiLEhlLERlKSxZKFwiZ2dcIixIZSxEZSksWShcIkdHR0dcIixMZSxGZSksWShcImdnZ2dcIixMZSxGZSksWShcIkdHR0dHXCIsTWUsR2UpLFkoXCJnZ2dnZ1wiLE1lLEdlKSxiYShbXCJnZ2dnXCIsXCJnZ2dnZ1wiLFwiR0dHR1wiLFwiR0dHR0dcIl0sZnVuY3Rpb24oYSxiLGMsZCl7YltkLnN1YnN0cigwLDIpXT10KGEpfSksYmEoW1wiZ2dcIixcIkdHXCJdLGZ1bmN0aW9uKGIsYyxkLGUpe2NbZV09YS5wYXJzZVR3b0RpZ2l0WWVhcihiKX0pLFxyXG4vLyBGT1JNQVRUSU5HXHJcblQoXCJRXCIsMCxcIlFvXCIsXCJxdWFydGVyXCIpLFxyXG4vLyBBTElBU0VTXHJcbkkoXCJxdWFydGVyXCIsXCJRXCIpLFxyXG4vLyBQUklPUklUWVxyXG5MKFwicXVhcnRlclwiLDcpLFxyXG4vLyBQQVJTSU5HXHJcblkoXCJRXCIsQ2UpLGFhKFwiUVwiLGZ1bmN0aW9uKGEsYil7YltXZV09MyoodChhKS0xKX0pLFxyXG4vLyBGT1JNQVRUSU5HXHJcblQoXCJEXCIsW1wiRERcIiwyXSxcIkRvXCIsXCJkYXRlXCIpLFxyXG4vLyBBTElBU0VTXHJcbkkoXCJkYXRlXCIsXCJEXCIpLFxyXG4vLyBQUklPUk9JVFlcclxuTChcImRhdGVcIiw5KSxcclxuLy8gUEFSU0lOR1xyXG5ZKFwiRFwiLEhlKSxZKFwiRERcIixIZSxEZSksWShcIkRvXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT9iLl9vcmRpbmFsUGFyc2U6Yi5fb3JkaW5hbFBhcnNlTGVuaWVudH0pLGFhKFtcIkRcIixcIkREXCJdLFhlKSxhYShcIkRvXCIsZnVuY3Rpb24oYSxiKXtiW1hlXT10KGEubWF0Y2goSGUpWzBdLDEwKX0pO1xyXG4vLyBNT01FTlRTXHJcbnZhciBLZj1OKFwiRGF0ZVwiLCEwKTtcclxuLy8gRk9STUFUVElOR1xyXG5UKFwiREREXCIsW1wiRERERFwiLDNdLFwiREREb1wiLFwiZGF5T2ZZZWFyXCIpLFxyXG4vLyBBTElBU0VTXHJcbkkoXCJkYXlPZlllYXJcIixcIkRERFwiKSxcclxuLy8gUFJJT1JJVFlcclxuTChcImRheU9mWWVhclwiLDQpLFxyXG4vLyBQQVJTSU5HXHJcblkoXCJERERcIixLZSksWShcIkRERERcIixFZSksYWEoW1wiREREXCIsXCJEREREXCJdLGZ1bmN0aW9uKGEsYixjKXtjLl9kYXlPZlllYXI9dChhKX0pLFxyXG4vLyBGT1JNQVRUSU5HXHJcblQoXCJtXCIsW1wibW1cIiwyXSwwLFwibWludXRlXCIpLFxyXG4vLyBBTElBU0VTXHJcbkkoXCJtaW51dGVcIixcIm1cIiksXHJcbi8vIFBSSU9SSVRZXHJcbkwoXCJtaW51dGVcIiwxNCksXHJcbi8vIFBBUlNJTkdcclxuWShcIm1cIixIZSksWShcIm1tXCIsSGUsRGUpLGFhKFtcIm1cIixcIm1tXCJdLFplKTtcclxuLy8gTU9NRU5UU1xyXG52YXIgTGY9TihcIk1pbnV0ZXNcIiwhMSk7XHJcbi8vIEZPUk1BVFRJTkdcclxuVChcInNcIixbXCJzc1wiLDJdLDAsXCJzZWNvbmRcIiksXHJcbi8vIEFMSUFTRVNcclxuSShcInNlY29uZFwiLFwic1wiKSxcclxuLy8gUFJJT1JJVFlcclxuTChcInNlY29uZFwiLDE1KSxcclxuLy8gUEFSU0lOR1xyXG5ZKFwic1wiLEhlKSxZKFwic3NcIixIZSxEZSksYWEoW1wic1wiLFwic3NcIl0sJGUpO1xyXG4vLyBNT01FTlRTXHJcbnZhciBNZj1OKFwiU2Vjb25kc1wiLCExKTtcclxuLy8gRk9STUFUVElOR1xyXG5UKFwiU1wiLDAsMCxmdW5jdGlvbigpe3JldHVybn5+KHRoaXMubWlsbGlzZWNvbmQoKS8xMDApfSksVCgwLFtcIlNTXCIsMl0sMCxmdW5jdGlvbigpe3JldHVybn5+KHRoaXMubWlsbGlzZWNvbmQoKS8xMCl9KSxUKDAsW1wiU1NTXCIsM10sMCxcIm1pbGxpc2Vjb25kXCIpLFQoMCxbXCJTU1NTXCIsNF0sMCxmdW5jdGlvbigpe3JldHVybiAxMCp0aGlzLm1pbGxpc2Vjb25kKCl9KSxUKDAsW1wiU1NTU1NcIiw1XSwwLGZ1bmN0aW9uKCl7cmV0dXJuIDEwMCp0aGlzLm1pbGxpc2Vjb25kKCl9KSxUKDAsW1wiU1NTU1NTXCIsNl0sMCxmdW5jdGlvbigpe3JldHVybiAxZTMqdGhpcy5taWxsaXNlY29uZCgpfSksVCgwLFtcIlNTU1NTU1NcIiw3XSwwLGZ1bmN0aW9uKCl7cmV0dXJuIDFlNCp0aGlzLm1pbGxpc2Vjb25kKCl9KSxUKDAsW1wiU1NTU1NTU1NcIiw4XSwwLGZ1bmN0aW9uKCl7cmV0dXJuIDFlNSp0aGlzLm1pbGxpc2Vjb25kKCl9KSxUKDAsW1wiU1NTU1NTU1NTXCIsOV0sMCxmdW5jdGlvbigpe3JldHVybiAxZTYqdGhpcy5taWxsaXNlY29uZCgpfSksXHJcbi8vIEFMSUFTRVNcclxuSShcIm1pbGxpc2Vjb25kXCIsXCJtc1wiKSxcclxuLy8gUFJJT1JJVFlcclxuTChcIm1pbGxpc2Vjb25kXCIsMTYpLFxyXG4vLyBQQVJTSU5HXHJcblkoXCJTXCIsS2UsQ2UpLFkoXCJTU1wiLEtlLERlKSxZKFwiU1NTXCIsS2UsRWUpO3ZhciBOZjtmb3IoTmY9XCJTU1NTXCI7TmYubGVuZ3RoPD05O05mKz1cIlNcIilZKE5mLE5lKTtmb3IoTmY9XCJTXCI7TmYubGVuZ3RoPD05O05mKz1cIlNcIilhYShOZixHYyk7XHJcbi8vIE1PTUVOVFNcclxudmFyIE9mPU4oXCJNaWxsaXNlY29uZHNcIiwhMSk7XHJcbi8vIEZPUk1BVFRJTkdcclxuVChcInpcIiwwLDAsXCJ6b25lQWJiclwiKSxUKFwienpcIiwwLDAsXCJ6b25lTmFtZVwiKTt2YXIgUGY9cS5wcm90b3R5cGU7UGYuYWRkPUhmLFBmLmNhbGVuZGFyPVViLFBmLmNsb25lPVZiLFBmLmRpZmY9YWMsUGYuZW5kT2Y9bWMsUGYuZm9ybWF0PWVjLFBmLmZyb209ZmMsUGYuZnJvbU5vdz1nYyxQZi50bz1oYyxQZi50b05vdz1pYyxQZi5nZXQ9USxQZi5pbnZhbGlkQXQ9dmMsUGYuaXNBZnRlcj1XYixQZi5pc0JlZm9yZT1YYixQZi5pc0JldHdlZW49WWIsUGYuaXNTYW1lPVpiLFBmLmlzU2FtZU9yQWZ0ZXI9JGIsUGYuaXNTYW1lT3JCZWZvcmU9X2IsUGYuaXNWYWxpZD10YyxQZi5sYW5nPUpmLFBmLmxvY2FsZT1qYyxQZi5sb2NhbGVEYXRhPWtjLFBmLm1heD1DZixQZi5taW49QmYsUGYucGFyc2luZ0ZsYWdzPXVjLFBmLnNldD1SLFBmLnN0YXJ0T2Y9bGMsUGYuc3VidHJhY3Q9SWYsUGYudG9BcnJheT1xYyxQZi50b09iamVjdD1yYyxQZi50b0RhdGU9cGMsUGYudG9JU09TdHJpbmc9ZGMsUGYudG9KU09OPXNjLFBmLnRvU3RyaW5nPWNjLFBmLnVuaXg9b2MsUGYudmFsdWVPZj1uYyxQZi5jcmVhdGlvbkRhdGE9d2MsXHJcbi8vIFllYXJcclxuUGYueWVhcj1oZixQZi5pc0xlYXBZZWFyPXFhLFxyXG4vLyBXZWVrIFllYXJcclxuUGYud2Vla1llYXI9eWMsUGYuaXNvV2Vla1llYXI9emMsXHJcbi8vIFF1YXJ0ZXJcclxuUGYucXVhcnRlcj1QZi5xdWFydGVycz1FYyxcclxuLy8gTW9udGhcclxuUGYubW9udGg9amEsUGYuZGF5c0luTW9udGg9a2EsXHJcbi8vIFdlZWtcclxuUGYud2Vlaz1QZi53ZWVrcz1BYSxQZi5pc29XZWVrPVBmLmlzb1dlZWtzPUJhLFBmLndlZWtzSW5ZZWFyPUJjLFBmLmlzb1dlZWtzSW5ZZWFyPUFjLFxyXG4vLyBEYXlcclxuUGYuZGF0ZT1LZixQZi5kYXk9UGYuZGF5cz1KYSxQZi53ZWVrZGF5PUthLFBmLmlzb1dlZWtkYXk9TGEsUGYuZGF5T2ZZZWFyPUZjLFxyXG4vLyBIb3VyXHJcblBmLmhvdXI9UGYuaG91cnM9c2YsXHJcbi8vIE1pbnV0ZVxyXG5QZi5taW51dGU9UGYubWludXRlcz1MZixcclxuLy8gU2Vjb25kXHJcblBmLnNlY29uZD1QZi5zZWNvbmRzPU1mLFxyXG4vLyBNaWxsaXNlY29uZFxyXG5QZi5taWxsaXNlY29uZD1QZi5taWxsaXNlY29uZHM9T2YsXHJcbi8vIE9mZnNldFxyXG5QZi51dGNPZmZzZXQ9QmIsUGYudXRjPURiLFBmLmxvY2FsPUViLFBmLnBhcnNlWm9uZT1GYixQZi5oYXNBbGlnbmVkSG91ck9mZnNldD1HYixQZi5pc0RTVD1IYixQZi5pc0xvY2FsPUpiLFBmLmlzVXRjT2Zmc2V0PUtiLFBmLmlzVXRjPUxiLFBmLmlzVVRDPUxiLFxyXG4vLyBUaW1lem9uZVxyXG5QZi56b25lQWJicj1IYyxQZi56b25lTmFtZT1JYyxcclxuLy8gRGVwcmVjYXRpb25zXHJcblBmLmRhdGVzPXcoXCJkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLlwiLEtmKSxQZi5tb250aHM9dyhcIm1vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZFwiLGphKSxQZi55ZWFycz13KFwieWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZFwiLGhmKSxQZi56b25lPXcoXCJtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lL1wiLENiKSxQZi5pc0RTVFNoaWZ0ZWQ9dyhcImlzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb25cIixJYik7dmFyIFFmPVBmLFJmPUIucHJvdG90eXBlO1JmLmNhbGVuZGFyPUMsUmYubG9uZ0RhdGVGb3JtYXQ9RCxSZi5pbnZhbGlkRGF0ZT1FLFJmLm9yZGluYWw9RixSZi5wcmVwYXJzZT1MYyxSZi5wb3N0Zm9ybWF0PUxjLFJmLnJlbGF0aXZlVGltZT1HLFJmLnBhc3RGdXR1cmU9SCxSZi5zZXQ9eixcclxuLy8gTW9udGhcclxuUmYubW9udGhzPWVhLFJmLm1vbnRoc1Nob3J0PWZhLFJmLm1vbnRoc1BhcnNlPWhhLFJmLm1vbnRoc1JlZ2V4PW1hLFJmLm1vbnRoc1Nob3J0UmVnZXg9bGEsXHJcbi8vIFdlZWtcclxuUmYud2Vlaz14YSxSZi5maXJzdERheU9mWWVhcj16YSxSZi5maXJzdERheU9mV2Vlaz15YSxcclxuLy8gRGF5IG9mIFdlZWtcclxuUmYud2Vla2RheXM9RWEsUmYud2Vla2RheXNNaW49R2EsUmYud2Vla2RheXNTaG9ydD1GYSxSZi53ZWVrZGF5c1BhcnNlPUlhLFJmLndlZWtkYXlzUmVnZXg9TWEsUmYud2Vla2RheXNTaG9ydFJlZ2V4PU5hLFJmLndlZWtkYXlzTWluUmVnZXg9T2EsXHJcbi8vIEhvdXJzXHJcblJmLmlzUE09VWEsUmYubWVyaWRpZW09VmEsWmEoXCJlblwiLHtvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sb3JkaW5hbDpmdW5jdGlvbihhKXt2YXIgYj1hJTEwLGM9MT09PXQoYSUxMDAvMTApP1widGhcIjoxPT09Yj9cInN0XCI6Mj09PWI/XCJuZFwiOjM9PT1iP1wicmRcIjpcInRoXCI7cmV0dXJuIGErY319KSxcclxuLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xyXG5hLmxhbmc9dyhcIm1vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuXCIsWmEpLGEubGFuZ0RhdGE9dyhcIm1vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC5cIixhYik7dmFyIFNmPU1hdGguYWJzLFRmPWNkKFwibXNcIiksVWY9Y2QoXCJzXCIpLFZmPWNkKFwibVwiKSxXZj1jZChcImhcIiksWGY9Y2QoXCJkXCIpLFlmPWNkKFwid1wiKSxaZj1jZChcIk1cIiksJGY9Y2QoXCJ5XCIpLF9mPWVkKFwibWlsbGlzZWNvbmRzXCIpLGFnPWVkKFwic2Vjb25kc1wiKSxiZz1lZChcIm1pbnV0ZXNcIiksY2c9ZWQoXCJob3Vyc1wiKSxkZz1lZChcImRheXNcIiksZWc9ZWQoXCJtb250aHNcIiksZmc9ZWQoXCJ5ZWFyc1wiKSxnZz1NYXRoLnJvdW5kLGhnPXtzOjQ1LC8vIHNlY29uZHMgdG8gbWludXRlXHJcbm06NDUsLy8gbWludXRlcyB0byBob3VyXHJcbmg6MjIsLy8gaG91cnMgdG8gZGF5XHJcbmQ6MjYsLy8gZGF5cyB0byBtb250aFxyXG5NOjExfSxpZz1NYXRoLmFicyxqZz12Yi5wcm90b3R5cGU7amcuYWJzPVVjLGpnLmFkZD1XYyxqZy5zdWJ0cmFjdD1YYyxqZy5hcz1hZCxqZy5hc01pbGxpc2Vjb25kcz1UZixqZy5hc1NlY29uZHM9VWYsamcuYXNNaW51dGVzPVZmLGpnLmFzSG91cnM9V2YsamcuYXNEYXlzPVhmLGpnLmFzV2Vla3M9WWYsamcuYXNNb250aHM9WmYsamcuYXNZZWFycz0kZixqZy52YWx1ZU9mPWJkLGpnLl9idWJibGU9WmMsamcuZ2V0PWRkLGpnLm1pbGxpc2Vjb25kcz1fZixqZy5zZWNvbmRzPWFnLGpnLm1pbnV0ZXM9YmcsamcuaG91cnM9Y2csamcuZGF5cz1kZyxqZy53ZWVrcz1mZCxqZy5tb250aHM9ZWcsamcueWVhcnM9ZmcsamcuaHVtYW5pemU9a2QsamcudG9JU09TdHJpbmc9bGQsamcudG9TdHJpbmc9bGQsamcudG9KU09OPWxkLGpnLmxvY2FsZT1qYyxqZy5sb2NhbGVEYXRhPWtjLFxyXG4vLyBEZXByZWNhdGlvbnNcclxuamcudG9Jc29TdHJpbmc9dyhcInRvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpXCIsbGQpLGpnLmxhbmc9SmYsXHJcbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcclxuLy8gRk9STUFUVElOR1xyXG5UKFwiWFwiLDAsMCxcInVuaXhcIiksVChcInhcIiwwLDAsXCJ2YWx1ZU9mXCIpLFxyXG4vLyBQQVJTSU5HXHJcblkoXCJ4XCIsT2UpLFkoXCJYXCIsUmUpLGFhKFwiWFwiLGZ1bmN0aW9uKGEsYixjKXtjLl9kPW5ldyBEYXRlKDFlMypwYXJzZUZsb2F0KGEsMTApKX0pLGFhKFwieFwiLGZ1bmN0aW9uKGEsYixjKXtjLl9kPW5ldyBEYXRlKHQoYSkpfSksYS52ZXJzaW9uPVwiMi4xNC4xXCIsYihyYiksYS5mbj1RZixhLm1pbj10YixhLm1heD11YixhLm5vdz1EZixhLnV0Yz1qLGEudW5peD1KYyxhLm1vbnRocz1QYyxhLmlzRGF0ZT1mLGEubG9jYWxlPVphLGEuaW52YWxpZD1uLGEuZHVyYXRpb249TWIsYS5pc01vbWVudD1yLGEud2Vla2RheXM9UmMsYS5wYXJzZVpvbmU9S2MsYS5sb2NhbGVEYXRhPWFiLGEuaXNEdXJhdGlvbj13YixhLm1vbnRoc1Nob3J0PVFjLGEud2Vla2RheXNNaW49VGMsYS5kZWZpbmVMb2NhbGU9JGEsYS51cGRhdGVMb2NhbGU9X2EsYS5sb2NhbGVzPWJiLGEud2Vla2RheXNTaG9ydD1TYyxhLm5vcm1hbGl6ZVVuaXRzPUosYS5yZWxhdGl2ZVRpbWVSb3VuZGluZz1pZCxhLnJlbGF0aXZlVGltZVRocmVzaG9sZD1qZCxhLmNhbGVuZGFyRm9ybWF0PVRiLGEucHJvdG90eXBlPVFmO3ZhciBrZz1hLGxnPShrZy5kZWZpbmVMb2NhbGUoXCJhZlwiLHttb250aHM6XCJKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NcnRfQXByX01laV9KdW5fSnVsX0F1Z19TZXBfT2t0X05vdl9EZXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTb25kYWdfTWFhbmRhZ19EaW5zZGFnX1dvZW5zZGFnX0RvbmRlcmRhZ19WcnlkYWdfU2F0ZXJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlNvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlNvX01hX0RpX1dvX0RvX1ZyX1NhXCIuc3BsaXQoXCJfXCIpLG1lcmlkaWVtUGFyc2U6L3ZtfG5tL2ksaXNQTTpmdW5jdGlvbihhKXtyZXR1cm4vXm5tJC9pLnRlc3QoYSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMTI+YT9jP1widm1cIjpcIlZNXCI6Yz9cIm5tXCI6XCJOTVwifSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbVmFuZGFnIG9tXSBMVFwiLG5leHREYXk6XCJbTcO0cmUgb21dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtvbV0gTFRcIixsYXN0RGF5OlwiW0dpc3RlciBvbV0gTFRcIixsYXN0V2VlazpcIltMYWFzXSBkZGRkIFtvbV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJvb3IgJXNcIixwYXN0OlwiJXMgZ2VsZWRlXCIsczpcIiduIHBhYXIgc2Vrb25kZXNcIixtOlwiJ24gbWludXV0XCIsbW06XCIlZCBtaW51dGVcIixoOlwiJ24gdXVyXCIsaGg6XCIlZCB1cmVcIixkOlwiJ24gZGFnXCIsZGQ6XCIlZCBkYWVcIixNOlwiJ24gbWFhbmRcIixNTTpcIiVkIG1hYW5kZVwiLHk6XCInbiBqYWFyXCIseXk6XCIlZCBqYWFyXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0oc3RlfGRlKS8sb3JkaW5hbDpmdW5jdGlvbihhKXtyZXR1cm4gYSsoMT09PWF8fDg9PT1hfHxhPj0yMD9cInN0ZVwiOlwiZGVcIil9LHdlZWs6e2RvdzoxLC8vIE1hYW5kYWcgaXMgZGllIGVlcnN0ZSBkYWcgdmFuIGRpZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJhci1tYVwiLHttb250aHM6XCLZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItin2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi2KfYrdivX9in2KrZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KpcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLYrV/Zhl/Yq1/YsV/Yrl/YrF/Ys1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVFwiLG5leHREYXk6XCJb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVFwiLGxhc3REYXk6XCJb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcItmB2YogJXNcIixwYXN0Olwi2YXZhtiwICVzXCIsczpcItir2YjYp9mGXCIsbTpcItiv2YLZitmC2KlcIixtbTpcIiVkINiv2YLYp9im2YJcIixoOlwi2LPYp9i52KlcIixoaDpcIiVkINiz2KfYudin2KpcIixkOlwi2YrZiNmFXCIsZGQ6XCIlZCDYo9mK2KfZhVwiLE06XCLYtNmH2LFcIixNTTpcIiVkINij2LTZh9ixXCIseTpcItiz2YbYqVwiLHl5OlwiJWQg2LPZhtmI2KfYqlwifSx3ZWVrOntkb3c6NiwvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6MTJ9fSksezE6XCLZoVwiLDI6XCLZolwiLDM6XCLZo1wiLDQ6XCLZpFwiLDU6XCLZpVwiLDY6XCLZplwiLDc6XCLZp1wiLDg6XCLZqFwiLDk6XCLZqVwiLDA6XCLZoFwifSksbWc9e1wi2aFcIjpcIjFcIixcItmiXCI6XCIyXCIsXCLZo1wiOlwiM1wiLFwi2aRcIjpcIjRcIixcItmlXCI6XCI1XCIsXCLZplwiOlwiNlwiLFwi2adcIjpcIjdcIixcItmoXCI6XCI4XCIsXCLZqVwiOlwiOVwiLFwi2aBcIjpcIjBcIn0sbmc9KGtnLmRlZmluZUxvY2FsZShcImFyLXNhXCIse21vbnRoczpcItmK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mK2Yhf2YrZiNmG2YrZiF/ZitmI2YTZitmIX9ij2LrYs9i32LNf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LFcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KpcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcItij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi2K1f2YZf2Ktf2LFf2K5f2Kxf2LNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L9i1fNmFLyxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwi2YVcIj09PWF9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMTI+YT9cIti1XCI6XCLZhVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUXCIsbmV4dERheTpcIlvYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFRcIixuZXh0V2VlazpcImRkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUXCIsbGFzdERheTpcIlvYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFRcIixsYXN0V2VlazpcImRkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwi2YHZiiAlc1wiLHBhc3Q6XCLZhdmG2LAgJXNcIixzOlwi2KvZiNin2YZcIixtOlwi2K/ZgtmK2YLYqVwiLG1tOlwiJWQg2K/Zgtin2KbZglwiLGg6XCLYs9in2LnYqVwiLGhoOlwiJWQg2LPYp9i52KfYqlwiLGQ6XCLZitmI2YVcIixkZDpcIiVkINij2YrYp9mFXCIsTTpcIti02YfYsVwiLE1NOlwiJWQg2KPYtNmH2LFcIix5Olwi2LPZhtipXCIseXk6XCIlZCDYs9mG2YjYp9iqXCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZyxmdW5jdGlvbihhKXtyZXR1cm4gbWdbYV19KS5yZXBsYWNlKC/YjC9nLFwiLFwiKX0scG9zdGZvcm1hdDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihhKXtyZXR1cm4gbGdbYV19KS5yZXBsYWNlKC8sL2csXCLYjFwiKX0sd2Vlazp7ZG93OjYsLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjEyfX0pLGtnLmRlZmluZUxvY2FsZShcImFyLXRuXCIse21vbnRoczpcItis2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcItis2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItin2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KpcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLYrV/Zhl/Yq1/YsV/Yrl/YrF/Ys1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVFwiLG5leHREYXk6XCJb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVFwiLGxhc3REYXk6XCJb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcItmB2YogJXNcIixwYXN0Olwi2YXZhtiwICVzXCIsczpcItir2YjYp9mGXCIsbTpcItiv2YLZitmC2KlcIixtbTpcIiVkINiv2YLYp9im2YJcIixoOlwi2LPYp9i52KlcIixoaDpcIiVkINiz2KfYudin2KpcIixkOlwi2YrZiNmFXCIsZGQ6XCIlZCDYo9mK2KfZhVwiLE06XCLYtNmH2LFcIixNTTpcIiVkINij2LTZh9ixXCIseTpcItiz2YbYqVwiLHl5OlwiJWQg2LPZhtmI2KfYqlwifSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksezE6XCLZoVwiLDI6XCLZolwiLDM6XCLZo1wiLDQ6XCLZpFwiLDU6XCLZpVwiLDY6XCLZplwiLDc6XCLZp1wiLDg6XCLZqFwiLDk6XCLZqVwiLDA6XCLZoFwifSksb2c9e1wi2aFcIjpcIjFcIixcItmiXCI6XCIyXCIsXCLZo1wiOlwiM1wiLFwi2aRcIjpcIjRcIixcItmlXCI6XCI1XCIsXCLZplwiOlwiNlwiLFwi2adcIjpcIjdcIixcItmoXCI6XCI4XCIsXCLZqVwiOlwiOVwiLFwi2aBcIjpcIjBcIn0scGc9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PT1hPzA6MT09PWE/MToyPT09YT8yOmElMTAwPj0zJiYxMD49YSUxMDA/MzphJTEwMD49MTE/NDo1fSxxZz17czpbXCLYo9mC2YQg2YXZhiDYq9in2YbZitipXCIsXCLYq9in2YbZitipINmI2KfYrdiv2KlcIixbXCLYq9in2YbZitiq2KfZhlwiLFwi2KvYp9mG2YrYqtmK2YZcIl0sXCIlZCDYq9mI2KfZhlwiLFwiJWQg2KvYp9mG2YrYqVwiLFwiJWQg2KvYp9mG2YrYqVwiXSxtOltcItij2YLZhCDZhdmGINiv2YLZitmC2KlcIixcItiv2YLZitmC2Kkg2YjYp9it2K/YqVwiLFtcItiv2YLZitmC2KrYp9mGXCIsXCLYr9mC2YrZgtiq2YrZhlwiXSxcIiVkINiv2YLYp9im2YJcIixcIiVkINiv2YLZitmC2KlcIixcIiVkINiv2YLZitmC2KlcIl0saDpbXCLYo9mC2YQg2YXZhiDYs9in2LnYqVwiLFwi2LPYp9i52Kkg2YjYp9it2K/YqVwiLFtcItiz2KfYudiq2KfZhlwiLFwi2LPYp9i52KrZitmGXCJdLFwiJWQg2LPYp9i52KfYqlwiLFwiJWQg2LPYp9i52KlcIixcIiVkINiz2KfYudipXCJdLGQ6W1wi2KPZgtmEINmF2YYg2YrZiNmFXCIsXCLZitmI2YUg2YjYp9it2K9cIixbXCLZitmI2YXYp9mGXCIsXCLZitmI2YXZitmGXCJdLFwiJWQg2KPZitin2YVcIixcIiVkINmK2YjZhdmL2KdcIixcIiVkINmK2YjZhVwiXSxNOltcItij2YLZhCDZhdmGINi02YfYsVwiLFwi2LTZh9ixINmI2KfYrdivXCIsW1wi2LTZh9ix2KfZhlwiLFwi2LTZh9ix2YrZhlwiXSxcIiVkINij2LTZh9ixXCIsXCIlZCDYtNmH2LHYp1wiLFwiJWQg2LTZh9ixXCJdLHk6W1wi2KPZgtmEINmF2YYg2LnYp9mFXCIsXCLYudin2YUg2YjYp9it2K9cIixbXCLYudin2YXYp9mGXCIsXCLYudin2YXZitmGXCJdLFwiJWQg2KPYudmI2KfZhVwiLFwiJWQg2LnYp9mF2YvYp1wiLFwiJWQg2LnYp9mFXCJdfSxyZz1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixjLGQsZSl7dmFyIGY9cGcoYiksZz1xZ1thXVtwZyhiKV07cmV0dXJuIDI9PT1mJiYoZz1nW2M/MDoxXSksZy5yZXBsYWNlKC8lZC9pLGIpfX0sc2c9W1wi2YPYp9mG2YjZhiDYp9mE2KvYp9mG2Yog2YrZhtin2YrYsVwiLFwi2LTYqNin2Lcg2YHYqNix2KfZitixXCIsXCLYotiw2KfYsSDZhdin2LHYs1wiLFwi2YbZitiz2KfZhiDYo9io2LHZitmEXCIsXCLYo9mK2KfYsSDZhdin2YrZiFwiLFwi2K3YstmK2LHYp9mGINmK2YjZhtmK2YhcIixcItiq2YXZiNiyINmK2YjZhNmK2YhcIixcItii2Kgg2KPYutiz2LfYs1wiLFwi2KPZitmE2YjZhCDYs9io2KrZhdio2LFcIixcItiq2LTYsdmK2YYg2KfZhNij2YjZhCDYo9mD2KrZiNio2LFcIixcItiq2LTYsdmK2YYg2KfZhNir2KfZhtmKINmG2YjZgdmF2KjYsVwiLFwi2YPYp9mG2YjZhiDYp9mE2KPZiNmEINiv2YrYs9mF2KjYsVwiXSx0Zz0oa2cuZGVmaW5lTG9jYWxlKFwiYXJcIix7bW9udGhzOnNnLG1vbnRoc1Nob3J0OnNnLHdlZWtkYXlzOlwi2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcItitX9mGX9irX9ixX9iuX9isX9izXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkQv4oCPTS/igI9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sbWVyaWRpZW1QYXJzZTov2LV82YUvLGlzUE06ZnVuY3Rpb24oYSl7cmV0dXJuXCLZhVwiPT09YX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxMj5hP1wi2LVcIjpcItmFXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFRcIixuZXh0RGF5OlwiW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVFwiLGxhc3REYXk6XCJb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcItio2LnYryAlc1wiLHBhc3Q6XCLZhdmG2LAgJXNcIixzOnJnKFwic1wiKSxtOnJnKFwibVwiKSxtbTpyZyhcIm1cIiksaDpyZyhcImhcIiksaGg6cmcoXCJoXCIpLGQ6cmcoXCJkXCIpLGRkOnJnKFwiZFwiKSxNOnJnKFwiTVwiKSxNTTpyZyhcIk1cIikseTpyZyhcInlcIikseXk6cmcoXCJ5XCIpfSxwcmVwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9cXHUyMDBmL2csXCJcIikucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLGZ1bmN0aW9uKGEpe3JldHVybiBvZ1thXX0pLnJlcGxhY2UoL9iML2csXCIsXCIpfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGEpe3JldHVybiBuZ1thXX0pLnJlcGxhY2UoLywvZyxcItiMXCIpfSx3ZWVrOntkb3c6NiwvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6MTJ9fSksezE6XCItaW5jaVwiLDU6XCItaW5jaVwiLDg6XCItaW5jaVwiLDcwOlwiLWluY2lcIiw4MDpcIi1pbmNpXCIsMjpcIi1uY2lcIiw3OlwiLW5jaVwiLDIwOlwiLW5jaVwiLDUwOlwiLW5jaVwiLDM6XCItw7xuY8O8XCIsNDpcIi3DvG5jw7xcIiwxMDA6XCItw7xuY8O8XCIsNjpcIi1uY8SxXCIsOTpcIi11bmN1XCIsMTA6XCItdW5jdVwiLDMwOlwiLXVuY3VcIiw2MDpcIi3EsW5jxLFcIiw5MDpcIi3EsW5jxLFcIn0pLHVnPShrZy5kZWZpbmVMb2NhbGUoXCJhelwiLHttb250aHM6XCJ5YW52YXJfZmV2cmFsX21hcnRfYXByZWxfbWF5X2l5dW5faXl1bF9hdnF1c3Rfc2VudHlhYnJfb2t0eWFicl9ub3lhYnJfZGVrYWJyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwieWFuX2Zldl9tYXJfYXByX21heV9peW5faXlsX2F2cV9zZW5fb2t0X25veV9kZWtcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJCYXphcl9CYXphciBlcnTJmXNpX8OHyZlyxZ/JmW5iyZkgYXjFn2FtxLFfw4fJmXLFn8mZbmLJmV9Dw7xtyZkgYXjFn2FtxLFfQ8O8bcmZX8WeyZluYsmZXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJCYXpfQnpFX8OHQXhfw4fJmXJfQ0F4X0PDvG1fxZ7JmW5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJCel9CRV/Dh0Ffw4fJmV9DQV9Dw7xfxZ7JmVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2J1Z8O8biBzYWF0XSBMVFwiLG5leHREYXk6XCJbc2FiYWggc2FhdF0gTFRcIixuZXh0V2VlazpcIltnyZlsyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUXCIsbGFzdERheTpcIltkw7xuyZluXSBMVFwiLGxhc3RXZWVrOlwiW2tlw6fJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBzb25yYVwiLHBhc3Q6XCIlcyDJmXZ2yZlsXCIsczpcImJpcm5lw6fJmSBzYW5peXnJmVwiLG06XCJiaXIgZMmZcWlxyZlcIixtbTpcIiVkIGTJmXFpccmZXCIsaDpcImJpciBzYWF0XCIsaGg6XCIlZCBzYWF0XCIsZDpcImJpciBnw7xuXCIsZGQ6XCIlZCBnw7xuXCIsTTpcImJpciBheVwiLE1NOlwiJWQgYXlcIix5OlwiYmlyIGlsXCIseXk6XCIlZCBpbFwifSxtZXJpZGllbVBhcnNlOi9nZWPJmXxzyZloyZlyfGfDvG5kw7x6fGF4xZ9hbS8saXNQTTpmdW5jdGlvbihhKXtyZXR1cm4vXihnw7xuZMO8enxheMWfYW0pJC8udGVzdChhKX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiA0PmE/XCJnZWPJmVwiOjEyPmE/XCJzyZloyZlyXCI6MTc+YT9cImfDvG5kw7x6XCI6XCJheMWfYW1cIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0oxLFuY8SxfGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3UpLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe2lmKDA9PT1hKS8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xyXG5yZXR1cm4gYStcIi3EsW5jxLFcIjt2YXIgYj1hJTEwLGM9YSUxMDAtYixkPWE+PTEwMD8xMDA6bnVsbDtyZXR1cm4gYSsodGdbYl18fHRnW2NdfHx0Z1tkXSl9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJiZVwiLHttb250aHM6e2Zvcm1hdDpcItGB0YLRg9C00LfQtdC90Y9f0LvRjtGC0LDQs9CwX9GB0LDQutCw0LLRltC60LBf0LrRgNCw0YHQsNCy0ZbQutCwX9GC0YDQsNGe0L3Rj1/Rh9GN0YDQstC10L3Rj1/Qu9GW0L/QtdC90Y9f0LbQvdGW0Z7QvdGPX9Cy0LXRgNCw0YHQvdGPX9C60LDRgdGC0YDRi9GH0L3RltC60LBf0LvRltGB0YLQsNC/0LDQtNCwX9GB0L3QtdC20L3Rj1wiLnNwbGl0KFwiX1wiKSxzdGFuZGFsb25lOlwi0YHRgtGD0LTQt9C10L3RjF/Qu9GO0YLRi1/RgdCw0LrQsNCy0ZbQul/QutGA0LDRgdCw0LLRltC6X9GC0YDQsNCy0LXQvdGMX9GH0Y3RgNCy0LXQvdGMX9C70ZbQv9C10L3RjF/QttC90ZbQstC10L3RjF/QstC10YDQsNGB0LXQvdGMX9C60LDRgdGC0YDRi9GH0L3RltC6X9C70ZbRgdGC0LDQv9Cw0LRf0YHQvdC10LbQsNC90YxcIi5zcGxpdChcIl9cIil9LG1vbnRoc1Nob3J0Olwi0YHRgtGD0LRf0LvRjtGCX9GB0LDQul/QutGA0LDRgV/RgtGA0LDQsl/Rh9GN0YDQsl/Qu9GW0L9f0LbQvdGW0LJf0LLQtdGAX9C60LDRgdGCX9C70ZbRgdGCX9GB0L3QtdC2XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOntmb3JtYXQ6XCLQvdGP0LTQt9C10LvRjl/Qv9Cw0L3Rj9C00LfQtdC70LDQul/QsNGe0YLQvtGA0LDQul/RgdC10YDQsNC00YNf0YfQsNGG0LLQtdGAX9C/0Y/RgtC90ZbRhtGDX9GB0YPQsdC+0YLRg1wiLnNwbGl0KFwiX1wiKSxzdGFuZGFsb25lOlwi0L3Rj9C00LfQtdC70Y9f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNCwX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbQsF/RgdGD0LHQvtGC0LBcIi5zcGxpdChcIl9cIiksaXNGb3JtYXQ6L1xcWyA/W9CS0LJdID8oPzrQvNGW0L3Rg9C70YPRjnzQvdCw0YHRgtGD0L/QvdGD0Y4pPyA/XFxdID9kZGRkL30sd2Vla2RheXNTaG9ydDpcItC90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLQvdC0X9C/0L1f0LDRgl/RgdGAX9GH0YZf0L/Rgl/RgdCxXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVkg0LMuXCIsTExMOlwiRCBNTU1NIFlZWVkg0LMuLCBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW9Ch0ZHQvdC90Y8g0Z5dIExUXCIsbmV4dERheTpcIlvQl9Cw0Z7RgtGA0LAg0Z5dIExUXCIsbGFzdERheTpcIlvQo9GH0L7RgNCwINGeXSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuXCJb0KNdIGRkZGQgW9GeXSBMVFwifSxsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6Y2FzZSAzOmNhc2UgNTpjYXNlIDY6cmV0dXJuXCJb0KMg0LzRltC90YPQu9GD0Y5dIGRkZGQgW9GeXSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVyblwiW9CjINC80ZbQvdGD0LvRi10gZGRkZCBb0Z5dIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLQv9GA0LDQtyAlc1wiLHBhc3Q6XCIlcyDRgtCw0LzRg1wiLHM6XCLQvdC10LrQsNC70YzQutGWINGB0LXQutGD0L3QtFwiLG06bmQsbW06bmQsaDpuZCxoaDpuZCxkOlwi0LTQt9C10L3RjFwiLGRkOm5kLE06XCLQvNC10YHRj9GGXCIsTU06bmQseTpcItCz0L7QtFwiLHl5Om5kfSxtZXJpZGllbVBhcnNlOi/QvdC+0YfRi3zRgNCw0L3RltGG0Yt80LTQvdGPfNCy0LXRh9Cw0YDQsC8saXNQTTpmdW5jdGlvbihhKXtyZXR1cm4vXijQtNC90Y980LLQtdGH0LDRgNCwKSQvLnRlc3QoYSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gND5hP1wi0L3QvtGH0YtcIjoxMj5hP1wi0YDQsNC90ZbRhtGLXCI6MTc+YT9cItC00L3Rj1wiOlwi0LLQtdGH0LDRgNCwXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0tKNGWfNGLfNCz0LApLyxvcmRpbmFsOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIpe2Nhc2VcIk1cIjpjYXNlXCJkXCI6Y2FzZVwiREREXCI6Y2FzZVwid1wiOmNhc2VcIldcIjpyZXR1cm4gYSUxMCE9PTImJmElMTAhPT0zfHxhJTEwMD09PTEyfHxhJTEwMD09PTEzP2ErXCIt0YtcIjphK1wiLdGWXCI7Y2FzZVwiRFwiOnJldHVybiBhK1wiLdCz0LBcIjtkZWZhdWx0OnJldHVybiBhfX0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLGtnLmRlZmluZUxvY2FsZShcImJnXCIse21vbnRoczpcItGP0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLRj9C90YBf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCzX9GB0LXQv1/QvtC60YJf0L3QvtC1X9C00LXQulwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItC90LXQtNC10LvRj1/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0Y/QtNCwX9GH0LXRgtCy0YrRgNGC0YrQul/Qv9C10YLRitC6X9GB0YrQsdC+0YLQsFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNGPX9GH0LXRgl/Qv9C10YJf0YHRitCxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW9CU0L3QtdGBINCyXSBMVFwiLG5leHREYXk6XCJb0KPRgtGA0LUg0LJdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvQsl0gTFRcIixsYXN0RGF5OlwiW9CS0YfQtdGA0LAg0LJdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOmNhc2UgMzpjYXNlIDY6cmV0dXJuXCJb0JIg0LjQt9C80LjQvdCw0LvQsNGC0LBdIGRkZGQgW9CyXSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlvQkiDQuNC30LzQuNC90LDQu9C40Y9dIGRkZGQgW9CyXSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwi0YHQu9C10LQgJXNcIixwYXN0Olwi0L/RgNC10LTQuCAlc1wiLHM6XCLQvdGP0LrQvtC70LrQviDRgdC10LrRg9C90LTQuFwiLG06XCLQvNC40L3Rg9GC0LBcIixtbTpcIiVkINC80LjQvdGD0YLQuFwiLGg6XCLRh9Cw0YFcIixoaDpcIiVkINGH0LDRgdCwXCIsZDpcItC00LXQvVwiLGRkOlwiJWQg0LTQvdC4XCIsTTpcItC80LXRgdC10YZcIixNTTpcIiVkINC80LXRgdC10YbQsFwiLHk6XCLQs9C+0LTQuNC90LBcIix5eTpcIiVkINCz0L7QtNC40L3QuFwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLG9yZGluYWw6ZnVuY3Rpb24oYSl7dmFyIGI9YSUxMCxjPWElMTAwO3JldHVybiAwPT09YT9hK1wiLdC10LJcIjowPT09Yz9hK1wiLdC10L1cIjpjPjEwJiYyMD5jP2ErXCIt0YLQuFwiOjE9PT1iP2ErXCIt0LLQuFwiOjI9PT1iP2ErXCIt0YDQuFwiOjc9PT1ifHw4PT09Yj9hK1wiLdC80LhcIjphK1wiLdGC0LhcIn0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLHsxOlwi4KenXCIsMjpcIuCnqFwiLDM6XCLgp6lcIiw0Olwi4KeqXCIsNTpcIuCnq1wiLDY6XCLgp6xcIiw3Olwi4KetXCIsODpcIuCnrlwiLDk6XCLgp69cIiwwOlwi4KemXCJ9KSx2Zz17XCLgp6dcIjpcIjFcIixcIuCnqFwiOlwiMlwiLFwi4KepXCI6XCIzXCIsXCLgp6pcIjpcIjRcIixcIuCnq1wiOlwiNVwiLFwi4KesXCI6XCI2XCIsXCLgp61cIjpcIjdcIixcIuCnrlwiOlwiOFwiLFwi4KevXCI6XCI5XCIsXCLgp6ZcIjpcIjBcIn0sd2c9KGtnLmRlZmluZUxvY2FsZShcImJuXCIse21vbnRoczpcIuCmnOCmvuCmqOCngeCnn+CmvuCmsOCngF/gpqvgp4fgpqzgp4Hgp5/gpr7gprDgp4Bf4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpoXgppfgpr7gprjgp43gpp9f4Ka44KeH4Kaq4KeN4Kaf4KeH4Kau4KeN4Kas4KawX+CmheCmleCnjeCmn+Cni+CmrOCmsF/gpqjgpq3gp4fgpq7gp43gpqzgprBf4Kah4Ka/4Ka44KeH4Kau4KeN4Kas4KawXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi4Kac4Ka+4Kao4KeBX+Cmq+Cnh+CmrF/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KawX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4KayX+CmheCml1/gprjgp4fgpqrgp43gpp9f4KaF4KaV4KeN4Kaf4KeLX+CmqOCmrV/gpqHgpr/gprjgp4fgpq7gp41cIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLgprDgpqzgpr/gpqzgpr7gprBf4Ka44KeL4Kau4Kas4Ka+4KawX+CmruCmmeCnjeCml+CmsuCmrOCmvuCmsF/gpqzgp4Hgpqfgpqzgpr7gprBf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4KeN4Kak4Ka/4Kas4Ka+4KawX+CmtuCngeCmleCnjeCmsOCmrOCmvuCmsF/gprbgpqjgpr/gpqzgpr7gprBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuCmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprngprjgp43gpqrgpqTgp43gpqTgpr9f4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmv1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuCmsOCmrF/gprjgpq5f4Kau4KaZ4KeN4KaXX+CmrOCngV/gpqzgp43gprDgpr/gprlf4Ka24KeBX+CmtuCmqOCmv1wiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0g4Ka44Kau4KefXCIsTFRTOlwiQSBoOm1tOnNzIOCmuOCmruCnn1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW+CmhuCmnF0gTFRcIixuZXh0RGF5OlwiW+CmhuCml+CmvuCmruCngOCmleCmvuCmsl0gTFRcIixuZXh0V2VlazpcImRkZGQsIExUXCIsbGFzdERheTpcIlvgppfgpqTgppXgpr7gprJdIExUXCIsbGFzdFdlZWs6XCJb4KaX4KakXSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIOCmquCmsOCnh1wiLHBhc3Q6XCIlcyDgpobgppfgp4dcIixzOlwi4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoVwiLG06XCLgpo/gppUg4Kau4Ka/4Kao4Ka/4KafXCIsbW06XCIlZCDgpq7gpr/gpqjgpr/gpp9cIixoOlwi4KaP4KaVIOCmmOCmqOCnjeCmn+CmvlwiLGhoOlwiJWQg4KaY4Kao4KeN4Kaf4Ka+XCIsZDpcIuCmj+CmlSDgpqbgpr/gpqhcIixkZDpcIiVkIOCmpuCmv+CmqFwiLE06XCLgpo/gppUg4Kau4Ka+4Ka4XCIsTU06XCIlZCDgpq7gpr7gprhcIix5Olwi4KaP4KaVIOCmrOCmm+CmsFwiLHl5OlwiJWQg4Kas4Kab4KawXCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1vgp6fgp6jgp6ngp6rgp6vgp6zgp63gp67gp6/gp6ZdL2csZnVuY3Rpb24oYSl7cmV0dXJuIHZnW2FdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oYSl7cmV0dXJuIHVnW2FdfSl9LG1lcmlkaWVtUGFyc2U6L+CmsOCmvuCmpHzgprjgppXgpr7gprJ84Kam4KeB4Kaq4KeB4KawfOCmrOCmv+CmleCmvuCmsnzgprDgpr7gpqQvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwi4Kaw4Ka+4KakXCI9PT1iJiZhPj00fHxcIuCmpuCngeCmquCngeCmsFwiPT09YiYmNT5hfHxcIuCmrOCmv+CmleCmvuCmslwiPT09Yj9hKzEyOmF9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gND5hP1wi4Kaw4Ka+4KakXCI6MTA+YT9cIuCmuOCmleCmvuCmslwiOjE3PmE/XCLgpqbgp4Hgpqrgp4HgprBcIjoyMD5hP1wi4Kas4Ka/4KaV4Ka+4KayXCI6XCLgprDgpr7gpqRcIn0sd2Vlazp7ZG93OjAsLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo2fX0pLHsxOlwi4LyhXCIsMjpcIuC8olwiLDM6XCLgvKNcIiw0Olwi4LykXCIsNTpcIuC8pVwiLDY6XCLgvKZcIiw3Olwi4LynXCIsODpcIuC8qFwiLDk6XCLgvKlcIiwwOlwi4LygXCJ9KSx4Zz17XCLgvKFcIjpcIjFcIixcIuC8olwiOlwiMlwiLFwi4LyjXCI6XCIzXCIsXCLgvKRcIjpcIjRcIixcIuC8pVwiOlwiNVwiLFwi4LymXCI6XCI2XCIsXCLgvKdcIjpcIjdcIixcIuC8qFwiOlwiOFwiLFwi4LypXCI6XCI5XCIsXCLgvKBcIjpcIjBcIn0seWc9KGtnLmRlZmluZUxvY2FsZShcImJvXCIse21vbnRoczpcIuC9n+C+s+C8i+C9luC8i+C9keC9hOC8i+C9lOC9vF/gvZ/gvrPgvIvgvZbgvIvgvYLgvYngvbLgvabgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2C4L2m4L204L2Y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9nuC9suC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvaPgvpTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L6y4L204L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9keC9tOC9k+C8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvaLgvpLgvrHgvZHgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L2C4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYXgvbLgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2J4L2y4L2m4LyL4L2UXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZRcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLgvYLgvZ/gvaDgvIvgvYngvbLgvIvgvZjgvItf4L2C4L2f4L2g4LyL4L2f4L6z4LyL4L2W4LyLX+C9guC9n+C9oOC8i+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvYLgvZ/gvaDgvIvgvaPgvrfgvYLgvIvgvZTgvItf4L2C4L2f4L2g4LyL4L2V4L204L2i4LyL4L2W4L20X+C9guC9n+C9oOC8i+C9lOC8i+C9puC9hOC9puC8i1/gvYLgvZ/gvaDgvIvgvabgvqTgvbrgvZPgvIvgvZTgvItcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuC9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8i1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuC9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8i1wiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW1cIixMVFM6XCJBIGg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSwgQSBoOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb4L2R4L2y4LyL4L2i4L2y4L2EXSBMVFwiLG5leHREYXk6XCJb4L2m4L2E4LyL4L2J4L2y4L2TXSBMVFwiLG5leHRXZWVrOlwiW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9ouC+l+C9uuC9puC8i+C9mF0sIExUXCIsbGFzdERheTpcIlvgvYHgvIvgvabgvYRdIExUXCIsbGFzdFdlZWs6XCJb4L2W4L2R4L204L2T4LyL4L2V4L6y4L2C4LyL4L2Y4L2Q4L2g4LyL4L2YXSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIOC9o+C8i1wiLHBhc3Q6XCIlcyDgvabgvpTgvZPgvIvgvaNcIixzOlwi4L2j4L2Y4LyL4L2m4L2EXCIsbTpcIuC9puC+kOC9ouC8i+C9mOC8i+C9guC9heC9suC9glwiLG1tOlwiJWQg4L2m4L6Q4L2i4LyL4L2YXCIsaDpcIuC9huC9tOC8i+C9muC9vOC9keC8i+C9guC9heC9suC9glwiLGhoOlwiJWQg4L2G4L204LyL4L2a4L284L2RXCIsZDpcIuC9ieC9suC9k+C8i+C9guC9heC9suC9glwiLGRkOlwiJWQg4L2J4L2y4L2T4LyLXCIsTTpcIuC9n+C+s+C8i+C9luC8i+C9guC9heC9suC9glwiLE1NOlwiJWQg4L2f4L6z4LyL4L2WXCIseTpcIuC9o+C9vOC8i+C9guC9heC9suC9glwiLHl5OlwiJWQg4L2j4L28XCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1vgvKHgvKLgvKPgvKTgvKXgvKbgvKfgvKjgvKngvKBdL2csZnVuY3Rpb24oYSl7cmV0dXJuIHhnW2FdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oYSl7cmV0dXJuIHdnW2FdfSl9LG1lcmlkaWVtUGFyc2U6L+C9mOC9muC9k+C8i+C9mOC9vHzgvZ7gvbzgvYLgvabgvIvgvYDgvaZ84L2J4L2y4L2T4LyL4L2C4L204L2EfOC9keC9guC9vOC9hOC8i+C9keC9gnzgvZjgvZrgvZPgvIvgvZjgvbwvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwi4L2Y4L2a4L2T4LyL4L2Y4L28XCI9PT1iJiZhPj00fHxcIuC9ieC9suC9k+C8i+C9guC9tOC9hFwiPT09YiYmNT5hfHxcIuC9keC9guC9vOC9hOC8i+C9keC9glwiPT09Yj9hKzEyOmF9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gND5hP1wi4L2Y4L2a4L2T4LyL4L2Y4L28XCI6MTA+YT9cIuC9nuC9vOC9guC9puC8i+C9gOC9plwiOjE3PmE/XCLgvYngvbLgvZPgvIvgvYLgvbTgvYRcIjoyMD5hP1wi4L2R4L2C4L284L2E4LyL4L2R4L2CXCI6XCLgvZjgvZrgvZPgvIvgvZjgvbxcIn0sd2Vlazp7ZG93OjAsLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo2fX0pLGtnLmRlZmluZUxvY2FsZShcImJyXCIse21vbnRoczpcIkdlbnZlcl9DJ2h3ZXZyZXJfTWV1cnpoX0VicmVsX01hZV9NZXpoZXZlbl9Hb3VlcmVfRW9zdF9Hd2VuZ29sb19IZXJlX0R1X0tlcnp1XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiR2VuX0MnaHdlX01ldV9FYnJfTWFlX0V2ZV9Hb3VfRW9zX0d3ZV9IZXJfRHVfS2VyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiU3VsX0x1bl9NZXVyemhfTWVyYydoZXJfWWFvdV9Hd2VuZXJfU2Fkb3JuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdWxfTHVuX01ldV9NZXJfWWFvX0d3ZV9TYWRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9MdV9NZV9NZXJfWWFfR3dfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcImhbZV1tbSBBXCIsTFRTOlwiaFtlXW1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBbYSB2aXpdIE1NTU0gWVlZWVwiLExMTDpcIkQgW2Egdml6XSBNTU1NIFlZWVkgaFtlXW1tIEFcIixMTExMOlwiZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIaXppdiBkYV0gTFRcIixuZXh0RGF5OlwiW1dhcmMnaG9hemggZGFdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtkYV0gTFRcIixsYXN0RGF5OlwiW0RlYydoIGRhXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbcGFzZXQgZGFdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiYS1iZW5uICVzXCIscGFzdDpcIiVzICd6b1wiLHM6XCJ1biBuZWJldWQgc2Vnb25kZW5ub8O5XCIsbTpcInVyIHZ1bnV0ZW5uXCIsbW06b2QsaDpcInVuIGV1clwiLGhoOlwiJWQgZXVyXCIsZDpcInVuIGRldmV6aFwiLGRkOm9kLE06XCJ1ciBtaXpcIixNTTpvZCx5OlwidXIgYmxvYXpcIix5eTpwZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfShhw7F8dmV0KS8sb3JkaW5hbDpmdW5jdGlvbihhKXt2YXIgYj0xPT09YT9cImHDsVwiOlwidmV0XCI7cmV0dXJuIGErYn0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImJzXCIse21vbnRoczpcImphbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwibmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJuZV9wb191dF9zcl/EjWVfcGVfc3VcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELiBNTS4gWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbZGFuYXMgdV0gTFRcIixuZXh0RGF5OlwiW3N1dHJhIHVdIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3VdIFtuZWRqZWxqdV0gW3VdIExUXCI7Y2FzZSAzOnJldHVyblwiW3VdIFtzcmlqZWR1XSBbdV0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbdV0gW3N1Ym90dV0gW3VdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3VdIGRkZGQgW3VdIExUXCJ9fSxsYXN0RGF5OlwiW2p1xI1lciB1XSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpjYXNlIDM6cmV0dXJuXCJbcHJvxaFsdV0gZGRkZCBbdV0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3Byb8WhbGldIGRkZGQgW3VdIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJ6YSAlc1wiLHBhc3Q6XCJwcmlqZSAlc1wiLHM6XCJwYXIgc2VrdW5kaVwiLG06dGQsbW06dGQsaDp0ZCxoaDp0ZCxkOlwiZGFuXCIsZGQ6dGQsTTpcIm1qZXNlY1wiLE1NOnRkLHk6XCJnb2RpbnVcIix5eTp0ZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJjYVwiLHttb250aHM6XCJnZW5lcl9mZWJyZXJfbWFyw6dfYWJyaWxfbWFpZ19qdW55X2p1bGlvbF9hZ29zdF9zZXRlbWJyZV9vY3R1YnJlX25vdmVtYnJlX2Rlc2VtYnJlXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiZ2VuLl9mZWJyLl9tYXIuX2Fici5fbWFpLl9qdW4uX2p1bC5fYWcuX3NldC5fb2N0Ll9ub3YuX2Rlcy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImRpdW1lbmdlX2RpbGx1bnNfZGltYXJ0c19kaW1lY3Jlc19kaWpvdXNfZGl2ZW5kcmVzX2Rpc3NhYnRlXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkZy5fZGwuX2R0Ll9kYy5fZGouX2R2Ll9kcy5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJEZ19EbF9EdF9EY19Eal9Edl9Ec1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpmdW5jdGlvbigpe3JldHVyblwiW2F2dWkgYSBcIisoMSE9PXRoaXMuaG91cnMoKT9cImxlc1wiOlwibGFcIikrXCJdIExUXCJ9LG5leHREYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIltkZW3DoCBhIFwiKygxIT09dGhpcy5ob3VycygpP1wibGVzXCI6XCJsYVwiKStcIl0gTFRcIn0sbmV4dFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cImRkZGQgW2EgXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJsZXNcIjpcImxhXCIpK1wiXSBMVFwifSxsYXN0RGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbYWhpciBhIFwiKygxIT09dGhpcy5ob3VycygpP1wibGVzXCI6XCJsYVwiKStcIl0gTFRcIn0sbGFzdFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cIltlbF0gZGRkZCBbcGFzc2F0IGEgXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJsZXNcIjpcImxhXCIpK1wiXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlbiAlc1wiLHBhc3Q6XCJmYSAlc1wiLHM6XCJ1bnMgc2Vnb25zXCIsbTpcInVuIG1pbnV0XCIsbW06XCIlZCBtaW51dHNcIixoOlwidW5hIGhvcmFcIixoaDpcIiVkIGhvcmVzXCIsZDpcInVuIGRpYVwiLGRkOlwiJWQgZGllc1wiLE06XCJ1biBtZXNcIixNTTpcIiVkIG1lc29zXCIseTpcInVuIGFueVwiLHl5OlwiJWQgYW55c1wifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxvcmRpbmFsOmZ1bmN0aW9uKGEsYil7dmFyIGM9MT09PWE/XCJyXCI6Mj09PWE/XCJuXCI6Mz09PWE/XCJyXCI6ND09PWE/XCJ0XCI6XCLDqFwiO3JldHVyblwid1wiIT09YiYmXCJXXCIhPT1ifHwoYz1cImFcIiksYStjfSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksXCJsZWRlbl/Dum5vcl9ixZllemVuX2R1YmVuX2t2xJt0ZW5fxI1lcnZlbl/EjWVydmVuZWNfc3JwZW5fesOhxZnDrV/FmcOtamVuX2xpc3RvcGFkX3Byb3NpbmVjXCIuc3BsaXQoXCJfXCIpKSx6Zz1cImxlZF/Dum5vX2LFmWVfZHViX2t2xJtfxI12bl/EjXZjX3NycF96w6HFmV/FmcOtal9saXNfcHJvXCIuc3BsaXQoXCJfXCIpLEFnPShrZy5kZWZpbmVMb2NhbGUoXCJjc1wiLHttb250aHM6eWcsbW9udGhzU2hvcnQ6emcsbW9udGhzUGFyc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdO2ZvcihjPTA7MTI+YztjKyspXHJcbi8vIHVzZSBjdXN0b20gcGFyc2VyIHRvIHNvbHZlIHByb2JsZW0gd2l0aCBKdWx5ICjEjWVydmVuZWMpXHJcbmRbY109bmV3IFJlZ0V4cChcIl5cIithW2NdK1wiJHxeXCIrYltjXStcIiRcIixcImlcIik7cmV0dXJuIGR9KHlnLHpnKSxzaG9ydE1vbnRoc1BhcnNlOmZ1bmN0aW9uKGEpe3ZhciBiLGM9W107Zm9yKGI9MDsxMj5iO2IrKyljW2JdPW5ldyBSZWdFeHAoXCJeXCIrYVtiXStcIiRcIixcImlcIik7cmV0dXJuIGN9KHpnKSxsb25nTW9udGhzUGFyc2U6ZnVuY3Rpb24oYSl7dmFyIGIsYz1bXTtmb3IoYj0wOzEyPmI7YisrKWNbYl09bmV3IFJlZ0V4cChcIl5cIithW2JdK1wiJFwiLFwiaVwiKTtyZXR1cm4gY30oeWcpLHdlZWtkYXlzOlwibmVkxJtsZV9wb25kxJtsw61fw7p0ZXLDvV9zdMWZZWRhX8SNdHZydGVrX3DDoXRla19zb2JvdGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIm5lX3BvX8O6dF9zdF/EjXRfcMOhX3NvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwibmVfcG9fw7p0X3N0X8SNdF9ww6Ffc29cIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NIFlZWVkgSDptbVwiLGw6XCJELiBNLiBZWVlZXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2RuZXMgdl0gTFRcIixuZXh0RGF5OlwiW3rDrXRyYSB2XSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlt2IG5lZMSbbGkgdl0gTFRcIjtjYXNlIDE6Y2FzZSAyOnJldHVyblwiW3ZdIGRkZGQgW3ZdIExUXCI7Y2FzZSAzOnJldHVyblwiW3ZlIHN0xZllZHUgdl0gTFRcIjtjYXNlIDQ6cmV0dXJuXCJbdmUgxI10dnJ0ZWsgdl0gTFRcIjtjYXNlIDU6cmV0dXJuXCJbdiBww6F0ZWsgdl0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbdiBzb2JvdHUgdl0gTFRcIn19LGxhc3REYXk6XCJbdsSNZXJhIHZdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW21pbnVsb3UgbmVkxJtsaSB2XSBMVFwiO2Nhc2UgMTpjYXNlIDI6cmV0dXJuXCJbbWludWzDqV0gZGRkZCBbdl0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbbWludWxvdSBzdMWZZWR1IHZdIExUXCI7Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlttaW51bMO9XSBkZGRkIFt2XSBMVFwiO2Nhc2UgNjpyZXR1cm5cIlttaW51bG91IHNvYm90dSB2XSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiemEgJXNcIixwYXN0OlwicMWZZWQgJXNcIixzOnZkLG06dmQsbW06dmQsaDp2ZCxoaDp2ZCxkOnZkLGRkOnZkLE06dmQsTU06dmQseTp2ZCx5eTp2ZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJjdlwiLHttb250aHM6XCLQutOR0YDQu9Cw0Ydf0L3QsNGA05HRgV/Qv9GD0Yhf0LDQutCwX9C80LDQuV/Sq9OX0YDRgtC80LVf0YPRgtORX9Kr0YPRgNC70LBf0LDQstOR0L1f0Y7Qv9CwX9GH07PQul/RgNCw0YjRgtCw0LJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLQutOR0YBf0L3QsNGAX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgF/Rg9GC05Ff0qvRg9GAX9Cw0LLQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItCy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L1cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcItCy0YvRgF/RgtGD0L1f0YvRgtC7X9GO0L1f0LrTl9KrX9GN0YDQvV/RiNOR0LxcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLQstGAX9GC0L1f0YvRgl/RjtC9X9C60qtf0Y3RgF/RiNC8XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQtTU0tWVlZWVwiLExMOlwiWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl11cIixMTEw6XCJZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW1cIixMTExMOlwiZGRkZCwgWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10sIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW9Cf0LDRj9C9XSBMVCBb0YHQtdGF0LXRgtGA0LVdXCIsbmV4dERheTpcIlvQq9GA0LDQvV0gTFQgW9GB0LXRhdC10YLRgNC1XVwiLGxhc3REYXk6XCJb05bQvdC10YBdIExUIFvRgdC10YXQtdGC0YDQtV1cIixuZXh0V2VlazpcIlvSqtC40YLQtdGBXSBkZGRkIExUIFvRgdC10YXQtdGC0YDQtV1cIixsYXN0V2VlazpcIlvQmNGA0YLQvdOXXSBkZGRkIExUIFvRgdC10YXQtdGC0YDQtV1cIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6ZnVuY3Rpb24oYSl7dmFyIGI9L9GB0LXRhdC10YIkL2kuZXhlYyhhKT9cItGA0LXQvVwiOi/Sq9GD0LskL2kuZXhlYyhhKT9cItGC0LDQvVwiOlwi0YDQsNC9XCI7cmV0dXJuIGErYn0scGFzdDpcIiVzINC60LDRj9C70LvQsFwiLHM6XCLQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RglwiLG06XCLQv9OX0YAg0LzQuNC90YPRglwiLG1tOlwiJWQg0LzQuNC90YPRglwiLGg6XCLQv9OX0YAg0YHQtdGF0LXRglwiLGhoOlwiJWQg0YHQtdGF0LXRglwiLGQ6XCLQv9OX0YAg0LrRg9C9XCIsZGQ6XCIlZCDQutGD0L1cIixNOlwi0L/Tl9GAINGD0LnTkdGFXCIsTU06XCIlZCDRg9C505HRhVwiLHk6XCLQv9OX0YAg0qvRg9C7XCIseXk6XCIlZCDSq9GD0LtcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfS3QvNOX0YgvLG9yZGluYWw6XCIlZC3QvNOX0YhcIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksa2cuZGVmaW5lTG9jYWxlKFwiY3lcIix7bW9udGhzOlwiSW9uYXdyX0Nod2Vmcm9yX01hd3J0aF9FYnJpbGxfTWFpX01laGVmaW5fR29yZmZlbm5hZl9Bd3N0X01lZGlfSHlkcmVmX1RhY2h3ZWRkX1JoYWdmeXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZ1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkR5ZGQgU3VsX0R5ZGQgTGx1bl9EeWRkIE1hd3J0aF9EeWRkIE1lcmNoZXJfRHlkZCBJYXVfRHlkZCBHd2VuZXJfRHlkZCBTYWR3cm5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlN1bF9MbHVuX01hd19NZXJfSWF1X0d3ZV9TYWRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9MbF9NYV9NZV9JYV9Hd19TYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsXHJcbi8vIHRpbWUgZm9ybWF0cyBhcmUgdGhlIHNhbWUgYXMgZW4tZ2JcclxubG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hlZGRpdyBhbV0gTFRcIixuZXh0RGF5OlwiW1lmb3J5IGFtXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYW1dIExUXCIsbGFzdERheTpcIltEZG9lIGFtXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbZGl3ZXRoYWYgYW1dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwibWV3biAlc1wiLHBhc3Q6XCIlcyB5biDDtGxcIixzOlwieWNoeWRpZyBlaWxpYWRhdVwiLG06XCJtdW51ZFwiLG1tOlwiJWQgbXVudWRcIixoOlwiYXdyXCIsaGg6XCIlZCBhd3JcIixkOlwiZGl3cm5vZFwiLGRkOlwiJWQgZGl3cm5vZFwiLE06XCJtaXNcIixNTTpcIiVkIG1pc1wiLHk6XCJibHd5ZGR5blwiLHl5OlwiJWQgZmx5bmVkZFwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KGZlZHxhaW58YWZ8aWx8eWRkfGVkfGVnKS8sXHJcbi8vIHRyYWRpdGlvbmFsIG9yZGluYWwgbnVtYmVycyBhYm92ZSAzMSBhcmUgbm90IGNvbW1vbmx5IHVzZWQgaW4gY29sbG9xdWlhbCBXZWxzaFxyXG5vcmRpbmFsOmZ1bmN0aW9uKGEpe3ZhciBiPWEsYz1cIlwiLGQ9W1wiXCIsXCJhZlwiLFwiaWxcIixcInlkZFwiLFwieWRkXCIsXCJlZFwiLFwiZWRcIixcImVkXCIsXCJmZWRcIixcImZlZFwiLFwiZmVkXCIsLy8gMWFmIHRvIDEwZmVkXHJcblwiZWdcIixcImZlZFwiLFwiZWdcIixcImVnXCIsXCJmZWRcIixcImVnXCIsXCJlZ1wiLFwiZmVkXCIsXCJlZ1wiLFwiZmVkXCJdO3JldHVybiBiPjIwP2M9NDA9PT1ifHw1MD09PWJ8fDYwPT09Ynx8ODA9PT1ifHwxMDA9PT1iP1wiZmVkXCI6XCJhaW5cIjpiPjAmJihjPWRbYl0pLGErY30sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImRhXCIse21vbnRoczpcImphbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzw7huZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7hyZGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4clwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInPDuF9tYV90aV9vbl90b19mcl9sw7hcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltJIGRhZyBrbC5dIExUXCIsbmV4dERheTpcIltJIG1vcmdlbiBrbC5dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtrbC5dIExUXCIsbGFzdERheTpcIltJIGfDpXIga2wuXSBMVFwiLGxhc3RXZWVrOlwiW3NpZHN0ZV0gZGRkZCBba2xdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib20gJXNcIixwYXN0OlwiJXMgc2lkZW5cIixzOlwiZsOlIHNla3VuZGVyXCIsbTpcImV0IG1pbnV0XCIsbW06XCIlZCBtaW51dHRlclwiLGg6XCJlbiB0aW1lXCIsaGg6XCIlZCB0aW1lclwiLGQ6XCJlbiBkYWdcIixkZDpcIiVkIGRhZ2VcIixNOlwiZW4gbcOlbmVkXCIsTU06XCIlZCBtw6VuZWRlclwiLHk6XCJldCDDpXJcIix5eTpcIiVkIMOlclwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImRlLWF0XCIse21vbnRoczpcIkrDpG5uZXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkrDpG4uX0ZlYnIuX01yei5fQXByLl9NYWlfSnVuLl9KdWwuX0F1Zy5fU2VwdC5fT2t0Ll9Ob3YuX0Rlei5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlNvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTb19Nb19EaV9NaV9Eb19Gcl9TYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2hldXRlIHVtXSBMVCBbVWhyXVwiLHNhbWVFbHNlOlwiTFwiLG5leHREYXk6XCJbbW9yZ2VuIHVtXSBMVCBbVWhyXVwiLG5leHRXZWVrOlwiZGRkZCBbdW1dIExUIFtVaHJdXCIsbGFzdERheTpcIltnZXN0ZXJuIHVtXSBMVCBbVWhyXVwiLGxhc3RXZWVrOlwiW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXVwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcInZvciAlc1wiLHM6XCJlaW4gcGFhciBTZWt1bmRlblwiLG06d2QsbW06XCIlZCBNaW51dGVuXCIsaDp3ZCxoaDpcIiVkIFN0dW5kZW5cIixkOndkLGRkOndkLE06d2QsTU06d2QseTp3ZCx5eTp3ZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJkZVwiLHttb250aHM6XCJKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbi5fRmVici5fTXJ6Ll9BcHIuX01haV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6LlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlNvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlNvX01vX0RpX01pX0RvX0ZyX1NhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQuIE1NTU0gWVlZWVwiLExMTDpcIkQuIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbaGV1dGUgdW1dIExUIFtVaHJdXCIsc2FtZUVsc2U6XCJMXCIsbmV4dERheTpcIlttb3JnZW4gdW1dIExUIFtVaHJdXCIsbmV4dFdlZWs6XCJkZGRkIFt1bV0gTFQgW1Vocl1cIixsYXN0RGF5OlwiW2dlc3Rlcm4gdW1dIExUIFtVaHJdXCIsbGFzdFdlZWs6XCJbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiaW4gJXNcIixwYXN0Olwidm9yICVzXCIsczpcImVpbiBwYWFyIFNla3VuZGVuXCIsbTp4ZCxtbTpcIiVkIE1pbnV0ZW5cIixoOnhkLGhoOlwiJWQgU3R1bmRlblwiLGQ6eGQsZGQ6eGQsTTp4ZCxNTTp4ZCx5OnhkLHl5OnhkfSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLFtcIt6W3qzegt6q3ofept6D3qlcIixcIt6K3qzehN6w3oPeqt6H3qbeg96pXCIsXCLeid6n3oPeqN6X3qpcIixcIt6H3q3eld6w3oPeqd6N3qpcIixcIt6J3q1cIixcIt6W3qvegt6wXCIsXCLelt6q3o3ept6H3qhcIixcIt6H3q/ejt6m3pDesN6T3qpcIixcIt6Q3qzeld6w3pPerN6J3rDehN6m3oPeqlwiLFwi3ofert6G3rDek96v3oTept6D3qpcIixcIt6C3q7eiN6s3onesN6E3qbeg96qXCIsXCLekd6o3pDerN6J3rDehN6m3oPeqlwiXSksQmc9W1wi3ofep96L3qjeh96w3ozeplwiLFwi3oDer96J3qZcIixcIt6H3qbegt6w3o7ep96D3qZcIixcIt6E3qrei96mXCIsXCLehN6q3oPep96Q3rDeit6m3ozeqFwiLFwi3oDeqt6G3qreg96qXCIsXCLegN6u3oLeqN6A3qjeg96qXCJdLENnPShrZy5kZWZpbmVMb2NhbGUoXCJkdlwiLHttb250aHM6QWcsbW9udGhzU2hvcnQ6QWcsd2Vla2RheXM6Qmcsd2Vla2RheXNTaG9ydDpCZyx3ZWVrZGF5c01pbjpcIt6H3qfei96oX96A3q/eid6mX96H3qbegt6wX96E3qrei96mX96E3qreg96nX96A3qreht6qX96A3q7egt6oXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiRC9NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi/eid6GfN6J3oovLGlzUE06ZnVuY3Rpb24oYSl7cmV0dXJuXCLeid6KXCI9PT1hfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDEyPmE/XCLeid6GXCI6XCLeid6KXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW96J3qjeh96m3oveql0gTFRcIixuZXh0RGF5OlwiW96J3qfei96m3onep10gTFRcIixuZXh0V2VlazpcImRkZGQgTFRcIixsYXN0RGF5OlwiW96H3qjeh96w3pTerF0gTFRcIixsYXN0V2VlazpcIlveit6n3ofeqN6M3qreiN6oXSBkZGRkIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwi3ozerN6D3q3ejt6m3ofeqCAlc1wiLHBhc3Q6XCLeht6q3oPeqN6C3rAgJXNcIixzOlwi3pDeqN6G3qregt6w3ozeqt6G3q7ehd6s3ofesFwiLG06XCLeid6o3oLeqN6T3qzeh96wXCIsbW06XCLeid6o3oLeqN6T3qogJWRcIixoOlwi3o7ept6R3qjeh96o3oPerN6H3rBcIixoaDpcIt6O3qbekd6o3ofeqN6D3qogJWRcIixkOlwi3oveqt6I3qbegN6s3ofesFwiLGRkOlwi3oveqt6I3qbekN6wICVkXCIsTTpcIt6J3qbegN6s3ofesFwiLE1NOlwi3onept6Q3rAgJWRcIix5Olwi3ofept6A3qbeg96s3ofesFwiLHl5Olwi3ofept6A3qbeg96qICVkXCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL9iML2csXCIsXCIpfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoLywvZyxcItiMXCIpfSx3ZWVrOntkb3c6NywvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjEyfX0pLGtnLmRlZmluZUxvY2FsZShcImVsXCIse21vbnRoc05vbWluYXRpdmVFbDpcIs6ZzrHOvc6/z4XOrM+BzrnOv8+CX86mzrXOss+Bzr/Phc6sz4HOuc6/z4JfzpzOrM+Bz4TOuc6/z4JfzpHPgM+Bzq/Ou865zr/Pgl/OnM6szrnOv8+CX86Zzr/Pjc69zrnOv8+CX86Zzr/Pjc67zrnOv8+CX86Rz43Os86/z4XPg8+Ezr/Pgl/Oo861z4DPhM6tzrzOss+BzrnOv8+CX86fzrrPhM+OzrLPgc65zr/Pgl/Onc6/zq3OvM6yz4HOuc6/z4JfzpTOtc66zq3OvM6yz4HOuc6/z4JcIi5zcGxpdChcIl9cIiksbW9udGhzR2VuaXRpdmVFbDpcIs6ZzrHOvc6/z4XOsc+Bzq/Ov8+FX86mzrXOss+Bzr/Phc6xz4HOr86/z4VfzpzOsc+Bz4TOr86/z4VfzpHPgM+BzrnOu86vzr/PhV/OnM6xzpDOv8+FX86Zzr/Phc69zq/Ov8+FX86Zzr/Phc67zq/Ov8+FX86Rz4XOs86/z43Pg8+Ezr/PhV/Oo861z4DPhM61zrzOss+Bzq/Ov8+FX86fzrrPhM+JzrLPgc6vzr/PhV/Onc6/zrXOvM6yz4HOr86/z4VfzpTOtc66zrXOvM6yz4HOr86/z4VcIi5zcGxpdChcIl9cIiksbW9udGhzOmZ1bmN0aW9uKGEsYil7cmV0dXJuL0QvLnRlc3QoYi5zdWJzdHJpbmcoMCxiLmluZGV4T2YoXCJNTU1NXCIpKSk/dGhpcy5fbW9udGhzR2VuaXRpdmVFbFthLm1vbnRoKCldOnRoaXMuX21vbnRoc05vbWluYXRpdmVFbFthLm1vbnRoKCldfSxtb250aHNTaG9ydDpcIs6ZzrHOvV/Ops61zrJfzpzOsc+BX86Rz4DPgV/OnM6xz4pfzpnOv8+Fzr1fzpnOv8+FzrtfzpHPhc6zX86jzrXPgF/On866z4Rfzp3Ov861X86UzrXOulwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIs6az4XPgc65zrHOus6uX86UzrXPhc+Ezq3Pgc6xX86kz4HOr8+EzrdfzqTOtc+EzqzPgc+EzrdfzqDOrc68z4DPhM63X86gzrHPgc6xz4POus61z4XOrl/Oo86szrLOss6xz4TOv1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwizprPhc+BX86UzrXPhV/OpM+BzrlfzqTOtc+EX86gzrXOvF/OoM6xz4FfzqPOsc6yXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwizprPhV/OlM61X86kz4FfzqTOtV/OoM61X86gzrFfzqPOsVwiLnNwbGl0KFwiX1wiKSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGE+MTE/Yz9cIs68zrxcIjpcIs6czpxcIjpjP1wiz4DOvFwiOlwizqDOnFwifSxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwizrxcIj09PShhK1wiXCIpLnRvTG93ZXJDYXNlKClbMF19LG1lcmlkaWVtUGFyc2U6L1vOoM6cXVxcLj/OnD9cXC4/L2ksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhckVsOntzYW1lRGF5OlwiW86jzq7OvM61z4HOsSB7fV0gTFRcIixuZXh0RGF5OlwiW86Rz43Pgc65zr8ge31dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFt7fV0gTFRcIixsYXN0RGF5OlwiW86nzrjOtc+CIHt9XSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgNjpyZXR1cm5cIlvPhM6/IM+Az4HOv863zrPOv8+NzrzOtc69zr9dIGRkZGQgW3t9XSBMVFwiO2RlZmF1bHQ6cmV0dXJuXCJbz4TOt869IM+Az4HOv863zrPOv8+NzrzOtc69zrddIGRkZGQgW3t9XSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LGNhbGVuZGFyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5fY2FsZW5kYXJFbFthXSxkPWImJmIuaG91cnMoKTtyZXR1cm4geShjKSYmKGM9Yy5hcHBseShiKSksYy5yZXBsYWNlKFwie31cIixkJTEyPT09MT9cIs+Dz4TOt1wiOlwiz4PPhM65z4JcIil9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiz4POtSAlc1wiLHBhc3Q6XCIlcyDPgM+BzrnOvVwiLHM6XCLOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrFcIixtOlwizq3Ovc6xIM67zrXPgM+Ez4xcIixtbTpcIiVkIM67zrXPgM+EzqxcIixoOlwizrzOr86xIM+Oz4HOsVwiLGhoOlwiJWQgz47Pgc61z4JcIixkOlwizrzOr86xIM68zq3Pgc6xXCIsZGQ6XCIlZCDOvM6tz4HOtc+CXCIsTTpcIs6tzr3Osc+CIM68zq7Ovc6xz4JcIixNTTpcIiVkIM68zq7Ovc61z4JcIix5Olwizq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CXCIseXk6XCIlZCDPh8+Bz4zOvc65zrFcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfc63LyxvcmRpbmFsOlwiJWTOt1wiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJlbi1hdVwiLHttb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTW9fVHVfV2VfVGhfRnJfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltUb2RheSBhdF0gTFRcIixuZXh0RGF5OlwiW1RvbW9ycm93IGF0XSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYXRdIExUXCIsbGFzdERheTpcIltZZXN0ZXJkYXkgYXRdIExUXCIsbGFzdFdlZWs6XCJbTGFzdF0gZGRkZCBbYXRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiaW4gJXNcIixwYXN0OlwiJXMgYWdvXCIsczpcImEgZmV3IHNlY29uZHNcIixtOlwiYSBtaW51dGVcIixtbTpcIiVkIG1pbnV0ZXNcIixoOlwiYW4gaG91clwiLGhoOlwiJWQgaG91cnNcIixkOlwiYSBkYXlcIixkZDpcIiVkIGRheXNcIixNOlwiYSBtb250aFwiLE1NOlwiJWQgbW9udGhzXCIseTpcImEgeWVhclwiLHl5OlwiJWQgeWVhcnNcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLG9yZGluYWw6ZnVuY3Rpb24oYSl7dmFyIGI9YSUxMCxjPTE9PT1+fihhJTEwMC8xMCk/XCJ0aFwiOjE9PT1iP1wic3RcIjoyPT09Yj9cIm5kXCI6Mz09PWI/XCJyZFwiOlwidGhcIjtyZXR1cm4gYStjfSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwiZW4tY2FcIix7bW9udGhzOlwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlN1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlN1X01vX1R1X1dlX1RoX0ZyX1NhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcImg6bW0gQVwiLExUUzpcImg6bW06c3MgQVwiLEw6XCJZWVlZLU1NLUREXCIsTEw6XCJNTU1NIEQsIFlZWVlcIixMTEw6XCJNTU1NIEQsIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEFcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbVG9kYXkgYXRdIExUXCIsbmV4dERheTpcIltUb21vcnJvdyBhdF0gTFRcIixuZXh0V2VlazpcImRkZGQgW2F0XSBMVFwiLGxhc3REYXk6XCJbWWVzdGVyZGF5IGF0XSBMVFwiLGxhc3RXZWVrOlwiW0xhc3RdIGRkZGQgW2F0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcIiVzIGFnb1wiLHM6XCJhIGZldyBzZWNvbmRzXCIsbTpcImEgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcImFuIGhvdXJcIixoaDpcIiVkIGhvdXJzXCIsZDpcImEgZGF5XCIsZGQ6XCIlZCBkYXlzXCIsTTpcImEgbW9udGhcIixNTTpcIiVkIG1vbnRoc1wiLHk6XCJhIHllYXJcIix5eTpcIiVkIHllYXJzXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe3ZhciBiPWElMTAsYz0xPT09fn4oYSUxMDAvMTApP1widGhcIjoxPT09Yj9cInN0XCI6Mj09PWI/XCJuZFwiOjM9PT1iP1wicmRcIjpcInRoXCI7cmV0dXJuIGErY319KSxrZy5kZWZpbmVMb2NhbGUoXCJlbi1nYlwiLHttb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTW9fVHVfV2VfVGhfRnJfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1RvZGF5IGF0XSBMVFwiLG5leHREYXk6XCJbVG9tb3Jyb3cgYXRdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFthdF0gTFRcIixsYXN0RGF5OlwiW1llc3RlcmRheSBhdF0gTFRcIixsYXN0V2VlazpcIltMYXN0XSBkZGRkIFthdF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJpbiAlc1wiLHBhc3Q6XCIlcyBhZ29cIixzOlwiYSBmZXcgc2Vjb25kc1wiLG06XCJhIG1pbnV0ZVwiLG1tOlwiJWQgbWludXRlc1wiLGg6XCJhbiBob3VyXCIsaGg6XCIlZCBob3Vyc1wiLGQ6XCJhIGRheVwiLGRkOlwiJWQgZGF5c1wiLE06XCJhIG1vbnRoXCIsTU06XCIlZCBtb250aHNcIix5OlwiYSB5ZWFyXCIseXk6XCIlZCB5ZWFyc1wifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sb3JkaW5hbDpmdW5jdGlvbihhKXt2YXIgYj1hJTEwLGM9MT09PX5+KGElMTAwLzEwKT9cInRoXCI6MT09PWI/XCJzdFwiOjI9PT1iP1wibmRcIjozPT09Yj9cInJkXCI6XCJ0aFwiO3JldHVybiBhK2N9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJlbi1pZVwiLHttb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTW9fVHVfV2VfVGhfRnJfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC1NTS1ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbVG9kYXkgYXRdIExUXCIsbmV4dERheTpcIltUb21vcnJvdyBhdF0gTFRcIixuZXh0V2VlazpcImRkZGQgW2F0XSBMVFwiLGxhc3REYXk6XCJbWWVzdGVyZGF5IGF0XSBMVFwiLGxhc3RXZWVrOlwiW0xhc3RdIGRkZGQgW2F0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcIiVzIGFnb1wiLHM6XCJhIGZldyBzZWNvbmRzXCIsbTpcImEgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcImFuIGhvdXJcIixoaDpcIiVkIGhvdXJzXCIsZDpcImEgZGF5XCIsZGQ6XCIlZCBkYXlzXCIsTTpcImEgbW9udGhcIixNTTpcIiVkIG1vbnRoc1wiLHk6XCJhIHllYXJcIix5eTpcIiVkIHllYXJzXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe3ZhciBiPWElMTAsYz0xPT09fn4oYSUxMDAvMTApP1widGhcIjoxPT09Yj9cInN0XCI6Mj09PWI/XCJuZFwiOjM9PT1iP1wicmRcIjpcInRoXCI7cmV0dXJuIGErY30sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImVuLW56XCIse21vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9Nb19UdV9XZV9UaF9Gcl9TYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJoOm1tIEFcIixMVFM6XCJoOm1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1RvZGF5IGF0XSBMVFwiLG5leHREYXk6XCJbVG9tb3Jyb3cgYXRdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFthdF0gTFRcIixsYXN0RGF5OlwiW1llc3RlcmRheSBhdF0gTFRcIixsYXN0V2VlazpcIltMYXN0XSBkZGRkIFthdF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJpbiAlc1wiLHBhc3Q6XCIlcyBhZ29cIixzOlwiYSBmZXcgc2Vjb25kc1wiLG06XCJhIG1pbnV0ZVwiLG1tOlwiJWQgbWludXRlc1wiLGg6XCJhbiBob3VyXCIsaGg6XCIlZCBob3Vyc1wiLGQ6XCJhIGRheVwiLGRkOlwiJWQgZGF5c1wiLE06XCJhIG1vbnRoXCIsTU06XCIlZCBtb250aHNcIix5OlwiYSB5ZWFyXCIseXk6XCIlZCB5ZWFyc1wifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sb3JkaW5hbDpmdW5jdGlvbihhKXt2YXIgYj1hJTEwLGM9MT09PX5+KGElMTAwLzEwKT9cInRoXCI6MT09PWI/XCJzdFwiOjI9PT1iP1wibmRcIjozPT09Yj9cInJkXCI6XCJ0aFwiO3JldHVybiBhK2N9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJlb1wiLHttb250aHM6XCJqYW51YXJvX2ZlYnJ1YXJvX21hcnRvX2Fwcmlsb19tYWpvX2p1bmlvX2p1bGlvX2HFrWd1c3RvX3NlcHRlbWJyb19va3RvYnJvX25vdmVtYnJvX2RlY2VtYnJvXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2HFrWdfc2VwX29rdF9ub3ZfZGVjXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiRGltYW7EiW9fTHVuZG9fTWFyZG9fTWVya3JlZG9fxLRhxa1kb19WZW5kcmVkb19TYWJhdG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkRpbV9MdW5fTWFyZF9NZXJrX8S0YcWtX1Zlbl9TYWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJEaV9MdV9NYV9NZV/EtGFfVmVfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJZWVlZLU1NLUREXCIsTEw6XCJEWy1hbiBkZV0gTU1NTSwgWVlZWVwiLExMTDpcIkRbLWFuIGRlXSBNTU1NLCBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIFtsYV0gRFstYW4gZGVdIE1NTU0sIFlZWVkgSEg6bW1cIn0sbWVyaWRpZW1QYXJzZTovW2FwXVxcLnRcXC5tL2ksaXNQTTpmdW5jdGlvbihhKXtyZXR1cm5cInBcIj09PWEuY2hhckF0KDApLnRvTG93ZXJDYXNlKCl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYT4xMT9jP1wicC50Lm0uXCI6XCJQLlQuTS5cIjpjP1wiYS50Lm0uXCI6XCJBLlQuTS5cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSG9kaWHFrSBqZV0gTFRcIixuZXh0RGF5OlwiW01vcmdhxa0gamVdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtqZV0gTFRcIixsYXN0RGF5OlwiW0hpZXJhxa0gamVdIExUXCIsbGFzdFdlZWs6XCJbcGFzaW50YV0gZGRkZCBbamVdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiamUgJXNcIixwYXN0OlwiYW50YcWtICVzXCIsczpcInNla3VuZG9qXCIsbTpcIm1pbnV0b1wiLG1tOlwiJWQgbWludXRvalwiLGg6XCJob3JvXCIsaGg6XCIlZCBob3JvalwiLGQ6XCJ0YWdvXCIsLy9uZSAnZGl1cm5vJywgxIlhciBlc3RhcyB1eml0YSBwb3IgcHJva3NpbXVtb1xyXG5kZDpcIiVkIHRhZ29qXCIsTTpcIm1vbmF0b1wiLE1NOlwiJWQgbW9uYXRvalwiLHk6XCJqYXJvXCIseXk6XCIlZCBqYXJvalwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9YS8sb3JkaW5hbDpcIiVkYVwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxcImVuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuXCIuc3BsaXQoXCJfXCIpKSxEZz1cImVuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljXCIuc3BsaXQoXCJfXCIpLEVnPShrZy5kZWZpbmVMb2NhbGUoXCJlcy1kb1wiLHttb250aHM6XCJlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OmZ1bmN0aW9uKGEsYil7cmV0dXJuLy1NTU0tLy50ZXN0KGIpP0RnW2EubW9udGgoKV06Q2dbYS5tb250aCgpXX0sbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImRvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiZG9fbHVfbWFfbWlfanVfdmlfc8OhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJoOm1tIEFcIixMVFM6XCJoOm1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBbZGVdIE1NTU0gW2RlXSBZWVlZXCIsTExMOlwiRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQVwiLExMTEw6XCJkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBXCJ9LGNhbGVuZGFyOntzYW1lRGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbaG95IGEgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbmV4dERheTpmdW5jdGlvbigpe3JldHVyblwiW21hw7FhbmEgYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxuZXh0V2VlazpmdW5jdGlvbigpe3JldHVyblwiZGRkZCBbYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxsYXN0RGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbYXllciBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LGxhc3RXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuXCJbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImVuICVzXCIscGFzdDpcImhhY2UgJXNcIixzOlwidW5vcyBzZWd1bmRvc1wiLG06XCJ1biBtaW51dG9cIixtbTpcIiVkIG1pbnV0b3NcIixoOlwidW5hIGhvcmFcIixoaDpcIiVkIGhvcmFzXCIsZDpcInVuIGTDrWFcIixkZDpcIiVkIGTDrWFzXCIsTTpcInVuIG1lc1wiLE1NOlwiJWQgbWVzZXNcIix5OlwidW4gYcOxb1wiLHl5OlwiJWQgYcOxb3NcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfcK6LyxvcmRpbmFsOlwiJWTCulwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxcImVuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuXCIuc3BsaXQoXCJfXCIpKSxGZz1cImVuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljXCIuc3BsaXQoXCJfXCIpLEdnPShrZy5kZWZpbmVMb2NhbGUoXCJlc1wiLHttb250aHM6XCJlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OmZ1bmN0aW9uKGEsYil7cmV0dXJuLy1NTU0tLy50ZXN0KGIpP0ZnW2EubW9udGgoKV06RWdbYS5tb250aCgpXX0sbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImRvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiZG9fbHVfbWFfbWlfanVfdmlfc8OhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIFtkZV0gTU1NTSBbZGVdIFlZWVlcIixMTEw6XCJEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpmdW5jdGlvbigpe3JldHVyblwiW2hveSBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LG5leHREYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIlttYcOxYW5hIGEgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbmV4dFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cImRkZGQgW2EgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbGFzdERheTpmdW5jdGlvbigpe3JldHVyblwiW2F5ZXIgYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxsYXN0V2VlazpmdW5jdGlvbigpe3JldHVyblwiW2VsXSBkZGRkIFtwYXNhZG8gYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlbiAlc1wiLHBhc3Q6XCJoYWNlICVzXCIsczpcInVub3Mgc2VndW5kb3NcIixtOlwidW4gbWludXRvXCIsbW06XCIlZCBtaW51dG9zXCIsaDpcInVuYSBob3JhXCIsaGg6XCIlZCBob3Jhc1wiLGQ6XCJ1biBkw61hXCIsZGQ6XCIlZCBkw61hc1wiLE06XCJ1biBtZXNcIixNTTpcIiVkIG1lc2VzXCIseTpcInVuIGHDsW9cIix5eTpcIiVkIGHDsW9zXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn3Cui8sb3JkaW5hbDpcIiVkwrpcIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwiZXRcIix7bW9udGhzOlwiamFhbnVhcl92ZWVicnVhcl9tw6RydHNfYXByaWxsX21haV9qdXVuaV9qdXVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9vYmVyX25vdmVtYmVyX2RldHNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphYW5fdmVlYnJfbcOkcnRzX2Fwcl9tYWlfanV1bmlfanV1bGlfYXVnX3NlcHRfb2t0X25vdl9kZXRzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwicMO8aGFww6Rldl9lc21hc3DDpGV2X3RlaXNpcMOkZXZfa29sbWFww6Rldl9uZWxqYXDDpGV2X3JlZWRlX2xhdXDDpGV2XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJQX0VfVF9LX05fUl9MXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiUF9FX1RfS19OX1JfTFwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltUw6RuYSxdIExUXCIsbmV4dERheTpcIltIb21tZSxdIExUXCIsbmV4dFdlZWs6XCJbSsOkcmdtaW5lXSBkZGRkIExUXCIsbGFzdERheTpcIltFaWxlLF0gTFRcIixsYXN0V2VlazpcIltFZWxtaW5lXSBkZGRkIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgcMOkcmFzdFwiLHBhc3Q6XCIlcyB0YWdhc2lcIixzOnlkLG06eWQsbW06eWQsaDp5ZCxoaDp5ZCxkOnlkLGRkOlwiJWQgcMOkZXZhXCIsTTp5ZCxNTTp5ZCx5OnlkLHl5OnlkfSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImV1XCIse21vbnRoczpcInVydGFycmlsYV9vdHNhaWxhX21hcnR4b2FfYXBpcmlsYV9tYWlhdHphX2VrYWluYV91enRhaWxhX2FidXp0dWFfaXJhaWxhX3VycmlhX2F6YXJvYV9hYmVuZHVhXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwidXJ0Ll9vdHMuX21hci5fYXBpLl9tYWkuX2VrYS5fdXp0Ll9hYnUuX2lyYS5fdXJyLl9hemEuX2FiZS5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImlnYW5kZWFfYXN0ZWxlaGVuYV9hc3RlYXJ0ZWFfYXN0ZWF6a2VuYV9vc3RlZ3VuYV9vc3RpcmFsYV9sYXJ1bmJhdGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImlnLl9hbC5fYXIuX2F6Ll9vZy5fb2wuX2xyLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImlnX2FsX2FyX2F6X29nX29sX2xyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIllZWVktTU0tRERcIixMTDpcIllZWVlba29dIE1NTU1bcmVuXSBEW2FdXCIsTExMOlwiWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW1cIixMTExMOlwiZGRkZCwgWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW1cIixsOlwiWVlZWS1NLURcIixsbDpcIllZWVlba29dIE1NTSBEW2FdXCIsbGxsOlwiWVlZWVtrb10gTU1NIERbYV0gSEg6bW1cIixsbGxsOlwiZGRkLCBZWVlZW2tvXSBNTU0gRFthXSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltnYXVyXSBMVFtldGFuXVwiLG5leHREYXk6XCJbYmloYXJdIExUW2V0YW5dXCIsbmV4dFdlZWs6XCJkZGRkIExUW2V0YW5dXCIsbGFzdERheTpcIlthdHpvXSBMVFtldGFuXVwiLGxhc3RXZWVrOlwiW2F1cnJla29dIGRkZGQgTFRbZXRhbl1cIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBiYXJydVwiLHBhc3Q6XCJkdWVsYSAlc1wiLHM6XCJzZWd1bmRvIGJhdHp1a1wiLG06XCJtaW51dHUgYmF0XCIsbW06XCIlZCBtaW51dHVcIixoOlwib3JkdSBiYXRcIixoaDpcIiVkIG9yZHVcIixkOlwiZWd1biBiYXRcIixkZDpcIiVkIGVndW5cIixNOlwiaGlsYWJldGUgYmF0XCIsTU06XCIlZCBoaWxhYmV0ZVwiLHk6XCJ1cnRlIGJhdFwiLHl5OlwiJWQgdXJ0ZVwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLHsxOlwi27FcIiwyOlwi27JcIiwzOlwi27NcIiw0Olwi27RcIiw1Olwi27VcIiw2Olwi27ZcIiw3Olwi27dcIiw4Olwi27hcIiw5Olwi27lcIiwwOlwi27BcIn0pLEhnPXtcItuxXCI6XCIxXCIsXCLbslwiOlwiMlwiLFwi27NcIjpcIjNcIixcItu0XCI6XCI0XCIsXCLbtVwiOlwiNVwiLFwi27ZcIjpcIjZcIixcItu3XCI6XCI3XCIsXCLbuFwiOlwiOFwiLFwi27lcIjpcIjlcIixcItuwXCI6XCIwXCJ9LElnPShrZy5kZWZpbmVMb2NhbGUoXCJmYVwiLHttb250aHM6XCLamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItuM2qnigIzYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh+KAjNi02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7Zhtis4oCM2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcItuM2qnigIzYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh+KAjNi02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7Zhtis4oCM2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLbjF/Yr1/Ys1/ahl/Zvl/YrF/YtFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L9mC2KjZhCDYp9iyINi42YfYsXzYqNi52K8g2KfYsiDYuNmH2LEvLGlzUE06ZnVuY3Rpb24oYSl7cmV0dXJuL9io2LnYryDYp9iyINi42YfYsS8udGVzdChhKX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxMj5hP1wi2YLYqNmEINin2LIg2LjZh9ixXCI6XCLYqNi52K8g2KfYsiDYuNmH2LFcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb2KfZhdix2YjYsiDYs9in2LnYql0gTFRcIixuZXh0RGF5OlwiW9mB2LHYr9inINiz2KfYudiqXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBb2LPYp9i52KpdIExUXCIsbGFzdERheTpcIlvYr9uM2LHZiNiyINiz2KfYudiqXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBb2b7bjNi0XSBb2LPYp9i52KpdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwi2K/YsSAlc1wiLHBhc3Q6XCIlcyDZvtuM2LRcIixzOlwi2obZhtiv24zZhiDYq9in2YbbjNmHXCIsbTpcItuM2qkg2K/ZgtuM2YLZh1wiLG1tOlwiJWQg2K/ZgtuM2YLZh1wiLGg6XCLbjNqpINiz2KfYudiqXCIsaGg6XCIlZCDYs9in2LnYqlwiLGQ6XCLbjNqpINix2YjYslwiLGRkOlwiJWQg2LHZiNiyXCIsTTpcItuM2qkg2YXYp9mHXCIsTU06XCIlZCDZhdin2YdcIix5Olwi24zaqSDYs9in2YRcIix5eTpcIiVkINiz2KfZhFwifSxwcmVwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9b27At27ldL2csZnVuY3Rpb24oYSl7cmV0dXJuIEhnW2FdfSkucmVwbGFjZSgv2IwvZyxcIixcIil9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oYSl7cmV0dXJuIEdnW2FdfSkucmVwbGFjZSgvLC9nLFwi2IxcIil9LG9yZGluYWxQYXJzZTovXFxkezEsMn3ZhS8sb3JkaW5hbDpcIiVk2YVcIix3ZWVrOntkb3c6NiwvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6MTJ9fSksXCJub2xsYSB5a3NpIGtha3NpIGtvbG1lIG5lbGrDpCB2aWlzaSBrdXVzaSBzZWl0c2Vtw6RuIGthaGRla3NhbiB5aGRla3PDpG5cIi5zcGxpdChcIiBcIikpLEpnPVtcIm5vbGxhXCIsXCJ5aGRlblwiLFwia2FoZGVuXCIsXCJrb2xtZW5cIixcIm5lbGrDpG5cIixcInZpaWRlblwiLFwia3V1ZGVuXCIsSWdbN10sSWdbOF0sSWdbOV1dLEtnPShrZy5kZWZpbmVMb2NhbGUoXCJmaVwiLHttb250aHM6XCJ0YW1taWt1dV9oZWxtaWt1dV9tYWFsaXNrdXVfaHVodGlrdXVfdG91a29rdXVfa2Vzw6RrdXVfaGVpbsOka3V1X2Vsb2t1dV9zeXlza3V1X2xva2FrdXVfbWFycmFza3V1X2pvdWx1a3V1XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwidGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc8OkX2hlaW7DpF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInN1bm51bnRhaV9tYWFuYW50YWlfdGlpc3RhaV9rZXNraXZpaWtrb190b3JzdGFpX3BlcmphbnRhaV9sYXVhbnRhaVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwic3VfbWFfdGlfa2VfdG9fcGVfbGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzdV9tYV90aV9rZV90b19wZV9sYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISC5tbVwiLExUUzpcIkhILm1tLnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkRvIE1NTU1bdGFdIFlZWVlcIixMTEw6XCJEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbVwiLExMTEw6XCJkZGRkLCBEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbVwiLGw6XCJELk0uWVlZWVwiLGxsOlwiRG8gTU1NIFlZWVlcIixsbGw6XCJEbyBNTU0gWVlZWSwgW2tsb10gSEgubW1cIixsbGxsOlwiZGRkLCBEbyBNTU0gWVlZWSwgW2tsb10gSEgubW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbdMOkbsOkw6RuXSBba2xvXSBMVFwiLG5leHREYXk6XCJbaHVvbWVubmFdIFtrbG9dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtrbG9dIExUXCIsbGFzdERheTpcIltlaWxlbl0gW2tsb10gTFRcIixsYXN0V2VlazpcIlt2aWltZV0gZGRkZFtuYV0gW2tsb10gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBww6TDpHN0w6RcIixwYXN0OlwiJXMgc2l0dGVuXCIsczp6ZCxtOnpkLG1tOnpkLGg6emQsaGg6emQsZDp6ZCxkZDp6ZCxNOnpkLE1NOnpkLHk6emQseXk6emR9LG9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwiZm9cIix7bW9udGhzOlwiamFudWFyX2ZlYnJ1YXJfbWFyc19hcHLDrWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmViX21hcl9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlc1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInN1bm51ZGFndXJfbcOhbmFkYWd1cl90w71zZGFndXJfbWlrdWRhZ3VyX2jDs3NkYWd1cl9mcsOtZ2dqYWRhZ3VyX2xleWdhcmRhZ3VyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJzdW5fbcOhbl90w71zX21pa19ow7NzX2Zyw61fbGV5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwic3VfbcOhX3TDvV9taV9ow7NfZnJfbGVcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRC4gTU1NTSwgWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvDjSBkYWcga2wuXSBMVFwiLG5leHREYXk6XCJbw40gbW9yZ2luIGtsLl0gTFRcIixuZXh0V2VlazpcImRkZGQgW2tsLl0gTFRcIixsYXN0RGF5OlwiW8ONIGdqw6FyIGtsLl0gTFRcIixsYXN0V2VlazpcIltzw63DsHN0dV0gZGRkZCBba2xdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwidW0gJXNcIixwYXN0OlwiJXMgc8Otw7BhbmlcIixzOlwiZsOhIHNla3VuZFwiLG06XCJlaW4gbWludXR0XCIsbW06XCIlZCBtaW51dHRpclwiLGg6XCJlaW4gdMOtbWlcIixoaDpcIiVkIHTDrW1hclwiLGQ6XCJlaW4gZGFndXJcIixkZDpcIiVkIGRhZ2FyXCIsTTpcImVpbiBtw6FuYcOwaVwiLE1NOlwiJWQgbcOhbmHDsGlyXCIseTpcImVpdHQgw6FyXCIseXk6XCIlZCDDoXJcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJmci1jYVwiLHttb250aHM6XCJqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRGlfTHVfTWFfTWVfSmVfVmVfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS1NTS1ERFwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0F1am91cmQnaHVpIMOgXSBMVFwiLG5leHREYXk6XCJbRGVtYWluIMOgXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbw6BdIExUXCIsbGFzdERheTpcIltIaWVyIMOgXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbZGVybmllciDDoF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJkYW5zICVzXCIscGFzdDpcImlsIHkgYSAlc1wiLHM6XCJxdWVscXVlcyBzZWNvbmRlc1wiLG06XCJ1bmUgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcInVuZSBoZXVyZVwiLGhoOlwiJWQgaGV1cmVzXCIsZDpcInVuIGpvdXJcIixkZDpcIiVkIGpvdXJzXCIsTTpcInVuIG1vaXNcIixNTTpcIiVkIG1vaXNcIix5OlwidW4gYW5cIix5eTpcIiVkIGFuc1wifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KGVyfGUpLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe3JldHVybiBhKygxPT09YT9cImVyXCI6XCJlXCIpfX0pLGtnLmRlZmluZUxvY2FsZShcImZyLWNoXCIse21vbnRoczpcImphbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJEaV9MdV9NYV9NZV9KZV9WZV9TYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQXVqb3VyZCdodWkgw6BdIExUXCIsbmV4dERheTpcIltEZW1haW4gw6BdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvDoF0gTFRcIixsYXN0RGF5OlwiW0hpZXIgw6BdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtkZXJuaWVyIMOgXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbnMgJXNcIixwYXN0OlwiaWwgeSBhICVzXCIsczpcInF1ZWxxdWVzIHNlY29uZGVzXCIsbTpcInVuZSBtaW51dGVcIixtbTpcIiVkIG1pbnV0ZXNcIixoOlwidW5lIGhldXJlXCIsaGg6XCIlZCBoZXVyZXNcIixkOlwidW4gam91clwiLGRkOlwiJWQgam91cnNcIixNOlwidW4gbW9pc1wiLE1NOlwiJWQgbW9pc1wiLHk6XCJ1biBhblwiLHl5OlwiJWQgYW5zXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0oZXJ8ZSkvLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGErKDE9PT1hP1wiZXJcIjpcImVcIil9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJmclwiLHttb250aHM6XCJqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRGlfTHVfTWFfTWVfSmVfVmVfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0F1am91cmQnaHVpIMOgXSBMVFwiLG5leHREYXk6XCJbRGVtYWluIMOgXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbw6BdIExUXCIsbGFzdERheTpcIltIaWVyIMOgXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbZGVybmllciDDoF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJkYW5zICVzXCIscGFzdDpcImlsIHkgYSAlc1wiLHM6XCJxdWVscXVlcyBzZWNvbmRlc1wiLG06XCJ1bmUgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcInVuZSBoZXVyZVwiLGhoOlwiJWQgaGV1cmVzXCIsZDpcInVuIGpvdXJcIixkZDpcIiVkIGpvdXJzXCIsTTpcInVuIG1vaXNcIixNTTpcIiVkIG1vaXNcIix5OlwidW4gYW5cIix5eTpcIiVkIGFuc1wifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KGVyfCkvLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGErKDE9PT1hP1wiZXJcIjpcIlwiKX0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLFwiamFuLl9mZWIuX21ydC5fYXByLl9tYWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLlwiLnNwbGl0KFwiX1wiKSksTGc9XCJqYW5fZmViX21ydF9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlc1wiLnNwbGl0KFwiX1wiKSxNZz0oa2cuZGVmaW5lTG9jYWxlKFwiZnlcIix7bW9udGhzOlwiamFubmV3YXJpc19mZWJyZXdhcmlzX21hYXJ0X2FwcmlsX21hYWllX2p1bnlfanVseV9hdWd1c3R1c19zZXB0aW1iZXJfb2t0b2Jlcl9ub3ZpbWJlcl9kZXNpbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpmdW5jdGlvbihhLGIpe3JldHVybi8tTU1NLS8udGVzdChiKT9MZ1thLm1vbnRoKCldOktnW2EubW9udGgoKV19LG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJzbmVpbl9tb2FuZGVpX3RpaXNkZWlfd29hbnNkZWlfdG9uZ2Vyc2RlaV9mcmVlZF9zbmVvblwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwic2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU2lfTW9fVGlfV29fVG9fRnJfU29cIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQtTU0tWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2hqb2VkIG9tXSBMVFwiLG5leHREYXk6XCJbbW9hcm4gb21dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtvbV0gTFRcIixsYXN0RGF5OlwiW2p1c3RlciBvbV0gTFRcIixsYXN0V2VlazpcIlvDtGZyw7tuZV0gZGRkZCBbb21dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib2VyICVzXCIscGFzdDpcIiVzIGx5blwiLHM6XCJpbiBwZWFyIHNla29uZGVuXCIsbTpcImllbiBtaW7DunRcIixtbTpcIiVkIG1pbnV0ZW5cIixoOlwiaWVuIG9lcmVcIixoaDpcIiVkIG9lcmVuXCIsZDpcImllbiBkZWlcIixkZDpcIiVkIGRhZ2VuXCIsTTpcImllbiBtb2FubmVcIixNTTpcIiVkIG1vYW5uZW5cIix5OlwiaWVuIGppZXJcIix5eTpcIiVkIGppZXJyZW5cIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfShzdGV8ZGUpLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe3JldHVybiBhKygxPT09YXx8OD09PWF8fGE+PTIwP1wic3RlXCI6XCJkZVwiKX0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLFtcIkFtIEZhb2lsbGVhY2hcIixcIkFuIEdlYXJyYW5cIixcIkFtIE3DoHJ0XCIsXCJBbiBHaWJsZWFuXCIsXCJBbiBDw6hpdGVhblwiLFwiQW4gdC3DkmdtaGlvc1wiLFwiQW4gdC1JdWNoYXJcIixcIkFuIEzDuW5hc3RhbFwiLFwiQW4gdC1TdWx0YWluXCIsXCJBbiBEw6BtaGFpclwiLFwiQW4gdC1TYW1oYWluXCIsXCJBbiBEw7liaGxhY2hkXCJdKSxOZz1bXCJGYW9pXCIsXCJHZWFyXCIsXCJNw6BydFwiLFwiR2libFwiLFwiQ8OoaXRcIixcIsOSZ21oXCIsXCJJdWNoXCIsXCJMw7luXCIsXCJTdWx0XCIsXCJEw6BtaFwiLFwiU2FtaFwiLFwiRMO5YmhcIl0sT2c9W1wiRGlkw7JtaG5haWNoXCIsXCJEaWx1YWluXCIsXCJEaW3DoGlydFwiLFwiRGljaWFkYWluXCIsXCJEaWFyZGFvaW5cIixcIkRpaGFvaW5lXCIsXCJEaXNhdGhhaXJuZVwiXSxQZz1bXCJEaWRcIixcIkRpbFwiLFwiRGltXCIsXCJEaWNcIixcIkRpYVwiLFwiRGloXCIsXCJEaXNcIl0sUWc9W1wiRMOyXCIsXCJMdVwiLFwiTcOgXCIsXCJDaVwiLFwiQXJcIixcIkhhXCIsXCJTYVwiXSxSZz0oa2cuZGVmaW5lTG9jYWxlKFwiZ2RcIix7bW9udGhzOk1nLG1vbnRoc1Nob3J0Ok5nLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6T2csd2Vla2RheXNTaG9ydDpQZyx3ZWVrZGF5c01pbjpRZyxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQW4tZGl1Z2ggYWlnXSBMVFwiLG5leHREYXk6XCJbQS1tw6BpcmVhY2ggYWlnXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYWlnXSBMVFwiLGxhc3REYXk6XCJbQW4tZMOoIGFpZ10gTFRcIixsYXN0V2VlazpcImRkZGQgW3NlbyBjaGFpZGhdIFthaWddIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiYW5uIGFuICVzXCIscGFzdDpcImJobyBjaGlvbm4gJXNcIixzOlwiYmVhZ2FuIGRpb2dhblwiLG06XCJtaW9uYWlkXCIsbW06XCIlZCBtaW9uYWlkZWFuXCIsaDpcInVhaXJcIixoaDpcIiVkIHVhaXJlYW5cIixkOlwibGF0aGFcIixkZDpcIiVkIGxhdGhhXCIsTTpcIm3DrG9zXCIsTU06XCIlZCBtw6xvc2FuXCIseTpcImJsaWFkaG5hXCIseXk6XCIlZCBibGlhZGhuYVwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KGR8bmF8bWgpLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe3ZhciBiPTE9PT1hP1wiZFwiOmElMTA9PT0yP1wibmFcIjpcIm1oXCI7cmV0dXJuIGErYn0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImdsXCIse21vbnRoczpcIlhhbmVpcm9fRmVicmVpcm9fTWFyem9fQWJyaWxfTWFpb19YdcOxb19YdWxsb19BZ29zdG9fU2V0ZW1icm9fT3V0dWJyb19Ob3ZlbWJyb19EZWNlbWJyb1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlhhbi5fRmViLl9NYXIuX0Fici5fTWFpLl9YdcOxLl9YdWwuX0Fnby5fU2V0Ll9PdXQuX05vdi5fRGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiRG9taW5nb19MdW5zX01hcnRlc19Nw6lyY29yZXNfWG92ZXNfVmVucmVzX1PDoWJhZG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkRvbS5fTHVuLl9NYXIuX03DqXIuX1hvdi5fVmVuLl9Tw6FiLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkRvX0x1X01hX03DqV9Yb19WZV9Tw6FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIltob3hlIFwiKygxIT09dGhpcy5ob3VycygpP1wiw6FzXCI6XCLDoVwiKStcIl0gTFRcIn0sbmV4dERheTpmdW5jdGlvbigpe3JldHVyblwiW21hw7HDoSBcIisoMSE9PXRoaXMuaG91cnMoKT9cIsOhc1wiOlwiw6FcIikrXCJdIExUXCJ9LG5leHRXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuXCJkZGRkIFtcIisoMSE9PXRoaXMuaG91cnMoKT9cIsOhc1wiOlwiYVwiKStcIl0gTFRcIn0sbGFzdERheTpmdW5jdGlvbigpe3JldHVyblwiW29udGUgXCIrKDEhPT10aGlzLmhvdXJzKCk/XCLDoVwiOlwiYVwiKStcIl0gTFRcIn0sbGFzdFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cIltvXSBkZGRkIFtwYXNhZG8gXCIrKDEhPT10aGlzLmhvdXJzKCk/XCLDoXNcIjpcImFcIikrXCJdIExUXCJ9LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpmdW5jdGlvbihhKXtyZXR1cm5cInVucyBzZWd1bmRvc1wiPT09YT9cIm51bnMgc2VndW5kb3NcIjpcImVuIFwiK2F9LHBhc3Q6XCJoYWkgJXNcIixzOlwidW5zIHNlZ3VuZG9zXCIsbTpcInVuIG1pbnV0b1wiLG1tOlwiJWQgbWludXRvc1wiLGg6XCJ1bmhhIGhvcmFcIixoaDpcIiVkIGhvcmFzXCIsZDpcInVuIGTDrWFcIixkZDpcIiVkIGTDrWFzXCIsTTpcInVuIG1lc1wiLE1NOlwiJWQgbWVzZXNcIix5OlwidW4gYW5vXCIseXk6XCIlZCBhbm9zXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn3Cui8sb3JkaW5hbDpcIiVkwrpcIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksa2cuZGVmaW5lTG9jYWxlKFwiaGVcIix7bW9udGhzOlwi15nXoNeV15DXqF/XpNeR16jXldeQ16hf157XqNelX9eQ16TXqNeZ15xf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXkteV16HXmF/Xodek15jXnteR16hf15DXlden15jXldeR16hf16DXldeR157XkdeoX9eT16bXnteR16hcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLXmdeg15XXs1/XpNeR16jXs1/Xnteo16Vf15DXpNeo17Nf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXktezX9eh16TXmNezX9eQ15XXp9ezX9eg15XXkdezX9eT16bXntezXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwi16jXkNep15XXn1/Xqdeg15lf16nXnNeZ16nXmV/XqNeR15nXoteZX9eX157Xmdep15lf16nXmdep15lf16nXkdeqXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLXkNezX9eR17Nf15LXs1/Xk9ezX9eU17Nf15XXs1/XqdezXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi15Bf15Ff15Jf15Nf15Rf15Vf16lcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIFvXkV1NTU1NIFlZWVlcIixMTEw6XCJEIFvXkV1NTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBb15FdTU1NTSBZWVlZIEhIOm1tXCIsbDpcIkQvTS9ZWVlZXCIsbGw6XCJEIE1NTSBZWVlZXCIsbGxsOlwiRCBNTU0gWVlZWSBISDptbVwiLGxsbGw6XCJkZGQsIEQgTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb15TXmdeV150g15HWvl1MVFwiLG5leHREYXk6XCJb157Xl9eoINeR1r5dTFRcIixuZXh0V2VlazpcImRkZGQgW9eR16nXoteUXSBMVFwiLGxhc3REYXk6XCJb15DXqtee15XXnCDXkda+XUxUXCIsbGFzdFdlZWs6XCJb15HXmdeV151dIGRkZGQgW9eU15DXl9eo15XXnyDXkdep16LXlF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLXkdei15XXkyAlc1wiLHBhc3Q6XCLXnNek16DXmSAlc1wiLHM6XCLXnteh16TXqCDXqdeg15nXldeqXCIsbTpcIteT16fXlFwiLG1tOlwiJWQg15PXp9eV16pcIixoOlwi16nXoteUXCIsaGg6ZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hP1wi16nXoteq15nXmdedXCI6YStcIiDXqdei15XXqlwifSxkOlwi15nXldedXCIsZGQ6ZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hP1wi15nXldee15nXmdedXCI6YStcIiDXmdee15nXnVwifSxNOlwi15fXldeT16lcIixNTTpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWE/XCLXl9eV15PXqdeZ15nXnVwiOmErXCIg15fXldeT16nXmdedXCJ9LHk6XCLXqdeg15RcIix5eTpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWE/XCLXqdeg16rXmdeZ151cIjphJTEwPT09MCYmMTAhPT1hP2ErXCIg16nXoNeUXCI6YStcIiDXqdeg15nXnVwifX0sbWVyaWRpZW1QYXJzZTov15DXl9eUXCLXpnzXnNek16DXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815zXpNeg15kg15TXpteU16jXmdeZ151815zXpNeg15XXqiDXkdeV16fXqHzXkdeR15XXp9eofNeR16LXqNeRL2ksaXNQTTpmdW5jdGlvbihhKXtyZXR1cm4vXijXkNeX15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNeR16LXqNeRKSQvLnRlc3QoYSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gNT5hP1wi15zXpNeg15XXqiDXkdeV16fXqFwiOjEwPmE/XCLXkdeR15XXp9eoXCI6MTI+YT9jPyfXnNek16DXlFwi16YnOlwi15zXpNeg15kg15TXpteU16jXmdeZ151cIjoxOD5hP2M/J9eQ15fXlFwi16YnOlwi15Dvv73vv73XqNeZINeU16bXlNeo15nXmdedXCI6XCLXkdei16jXkVwifX0pLHsxOlwi4KWnXCIsMjpcIuClqFwiLDM6XCLgpalcIiw0Olwi4KWqXCIsNTpcIuClq1wiLDY6XCLgpaxcIiw3Olwi4KWtXCIsODpcIuClrlwiLDk6XCLgpa9cIiwwOlwi4KWmXCJ9KSxTZz17XCLgpadcIjpcIjFcIixcIuClqFwiOlwiMlwiLFwi4KWpXCI6XCIzXCIsXCLgpapcIjpcIjRcIixcIuClq1wiOlwiNVwiLFwi4KWsXCI6XCI2XCIsXCLgpa1cIjpcIjdcIixcIuClrlwiOlwiOFwiLFwi4KWvXCI6XCI5XCIsXCLgpaZcIjpcIjBcIn0sVGc9KGtnLmRlZmluZUxvY2FsZShcImhpXCIse21vbnRoczpcIuCknOCkqOCkteCksOClgF/gpKvgpLzgpLDgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliOCksl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLjgpY3gpKRf4KS44KS/4KSk4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+ClguCkrOCksF/gpKjgpLXgpK7gpY3gpKzgpLBf4KSm4KS/4KS44KSu4KWN4KSs4KSwXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi4KSc4KSoLl/gpKvgpLzgpLAuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYguX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpIXgpJcuX+CkuOCkv+CkpC5f4KSF4KSV4KWN4KSf4KWCLl/gpKjgpLUuX+CkpuCkv+CkuC5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIuCksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSy4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLJf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi4KSwX+CkuOCli1/gpK7gpIJf4KSs4KWBX+Ckl+ClgV/gpLbgpYFf4KS2XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkEgaDptbSDgpKzgpJzgpYdcIixMVFM6XCJBIGg6bW06c3Mg4KSs4KSc4KWHXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYdcIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYdcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb4KSG4KScXSBMVFwiLG5leHREYXk6XCJb4KSV4KSyXSBMVFwiLG5leHRXZWVrOlwiZGRkZCwgTFRcIixsYXN0RGF5OlwiW+CkleCksl0gTFRcIixsYXN0V2VlazpcIlvgpKrgpL/gpJvgpLLgpYddIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMg4KSu4KWH4KSCXCIscGFzdDpcIiVzIOCkquCkueCksuClh1wiLHM6XCLgpJXgpYHgpJsg4KS54KWAIOCkleCljeCkt+Cko1wiLG06XCLgpI/gpJUg4KSu4KS/4KSo4KSfXCIsbW06XCIlZCDgpK7gpL/gpKjgpJ9cIixoOlwi4KSP4KSVIOCkmOCkguCkn+CkvlwiLGhoOlwiJWQg4KSY4KSC4KSf4KWHXCIsZDpcIuCkj+CklSDgpKbgpL/gpKhcIixkZDpcIiVkIOCkpuCkv+CkqFwiLE06XCLgpI/gpJUg4KSu4KS54KWA4KSo4KWHXCIsTU06XCIlZCDgpK7gpLngpYDgpKjgpYdcIix5Olwi4KSP4KSVIOCkteCksOCljeCkt1wiLHl5OlwiJWQg4KS14KSw4KWN4KS3XCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csZnVuY3Rpb24oYSl7cmV0dXJuIFNnW2FdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oYSl7cmV0dXJuIFJnW2FdfSl9LFxyXG4vLyBIaW5kaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXHJcbi8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBIaW5kaS5cclxubWVyaWRpZW1QYXJzZTov4KSw4KS+4KSkfOCkuOClgeCkrOCkuXzgpKbgpYvgpKrgpLngpLB84KS24KS+4KSuLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMTI9PT1hJiYoYT0wKSxcIuCksOCkvuCkpFwiPT09Yj80PmE/YTphKzEyOlwi4KS44KWB4KSs4KS5XCI9PT1iP2E6XCLgpKbgpYvgpKrgpLngpLBcIj09PWI/YT49MTA/YTphKzEyOlwi4KS24KS+4KSuXCI9PT1iP2ErMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDQ+YT9cIuCksOCkvuCkpFwiOjEwPmE/XCLgpLjgpYHgpKzgpLlcIjoxNz5hP1wi4KSm4KWL4KSq4KS54KSwXCI6MjA+YT9cIuCktuCkvuCkrlwiOlwi4KSw4KS+4KSkXCJ9LHdlZWs6e2RvdzowLC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6Nn19KSxrZy5kZWZpbmVMb2NhbGUoXCJoclwiLHttb250aHM6e2Zvcm1hdDpcInNpamXEjW5qYV92ZWxqYcSNZV9vxb51amthX3RyYXZuamFfc3ZpYm5qYV9saXBuamFfc3JwbmphX2tvbG92b3phX3J1am5hX2xpc3RvcGFkYV9zdHVkZW5vZ2FfcHJvc2luY2FcIi5zcGxpdChcIl9cIiksc3RhbmRhbG9uZTpcInNpamXEjWFual92ZWxqYcSNYV9vxb51amFrX3RyYXZhbmpfc3ZpYmFual9saXBhbmpfc3JwYW5qX2tvbG92b3pfcnVqYW5fbGlzdG9wYWRfc3R1ZGVuaV9wcm9zaW5hY1wiLnNwbGl0KFwiX1wiKX0sbW9udGhzU2hvcnQ6XCJzaWouX3ZlbGouX2/FvnUuX3RyYS5fc3ZpLl9saXAuX3NycC5fa29sLl9ydWouX2xpcy5fc3R1Ll9wcm8uXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJuZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJuZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIm5lX3BvX3V0X3NyX8SNZV9wZV9zdVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuIE1NLiBZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltkYW5hcyB1XSBMVFwiLG5leHREYXk6XCJbc3V0cmEgdV0gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbdV0gW25lZGplbGp1XSBbdV0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbdV0gW3NyaWplZHVdIFt1XSBMVFwiO2Nhc2UgNjpyZXR1cm5cIlt1XSBbc3Vib3R1XSBbdV0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbdV0gZGRkZCBbdV0gTFRcIn19LGxhc3REYXk6XCJbanXEjWVyIHVdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOmNhc2UgMzpyZXR1cm5cIltwcm/FoWx1XSBkZGRkIFt1XSBMVFwiO2Nhc2UgNjpyZXR1cm5cIltwcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbcHJvxaFsaV0gZGRkZCBbdV0gTFRcIn19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInphICVzXCIscGFzdDpcInByaWplICVzXCIsczpcInBhciBzZWt1bmRpXCIsbTpCZCxtbTpCZCxoOkJkLGhoOkJkLGQ6XCJkYW5cIixkZDpCZCxNOlwibWplc2VjXCIsTU06QmQseTpcImdvZGludVwiLHl5OkJkfSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLFwidmFzw6FybmFwIGjDqXRmxZFuIGtlZGRlbiBzemVyZMOhbiBjc8O8dMO2cnTDtmvDtm4gcMOpbnRla2VuIHN6b21iYXRvblwiLnNwbGl0KFwiIFwiKSksVWc9KGtnLmRlZmluZUxvY2FsZShcImh1XCIse21vbnRoczpcImphbnXDoXJfZmVicnXDoXJfbcOhcmNpdXNfw6FwcmlsaXNfbcOhanVzX2rDum5pdXNfasO6bGl1c19hdWd1c3p0dXNfc3plcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbl9mZWJfbcOhcmNfw6Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc3plcHRfb2t0X25vdl9kZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJ2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJ2YXNfaMOpdF9rZWRkX3N6ZV9jc8O8dF9ww6luX3N6b1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInZfaF9rX3N6ZV9jc19wX3N6b1wiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJZWVlZLk1NLkRELlwiLExMOlwiWVlZWS4gTU1NTSBELlwiLExMTDpcIllZWVkuIE1NTU0gRC4gSDptbVwiLExMTEw6XCJZWVlZLiBNTU1NIEQuLCBkZGRkIEg6bW1cIn0sbWVyaWRpZW1QYXJzZTovZGV8ZHUvaSxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwidVwiPT09YS5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxMj5hP2M9PT0hMD9cImRlXCI6XCJERVwiOmM9PT0hMD9cImR1XCI6XCJEVVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlttYV0gTFRbLWtvcl1cIixuZXh0RGF5OlwiW2hvbG5hcF0gTFRbLWtvcl1cIixuZXh0V2VlazpmdW5jdGlvbigpe3JldHVybiBEZC5jYWxsKHRoaXMsITApfSxsYXN0RGF5OlwiW3RlZ25hcF0gTFRbLWtvcl1cIixsYXN0V2VlazpmdW5jdGlvbigpe3JldHVybiBEZC5jYWxsKHRoaXMsITEpfSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBtw7psdmFcIixwYXN0OlwiJXNcIixzOkNkLG06Q2QsbW06Q2QsaDpDZCxoaDpDZCxkOkNkLGRkOkNkLE06Q2QsTU06Q2QseTpDZCx5eTpDZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJoeS1hbVwiLHttb250aHM6e2Zvcm1hdDpcItWw1bjWgtW21b7VodaA1atf1oPVpdW/1oDVvtWh1oDVq1/VtNWh1oDVv9WrX9Wh1brWgNWr1azVq1/VtNWh1bXVq9W91atf1bDVuNaC1bbVq9W91atf1bDVuNaC1azVq9W91atf1oXVo9W41b3Vv9W41b3Vq1/VvdWl1brVv9Wl1bTVotWl1oDVq1/VsNW41a/Vv9Wl1bTVotWl1oDVq1/VttW41bXVpdW01aLVpdaA1atf1aTVpdWv1b/VpdW01aLVpdaA1atcIi5zcGxpdChcIl9cIiksc3RhbmRhbG9uZTpcItWw1bjWgtW21b7VodaAX9aD1aXVv9aA1b7VodaAX9W01aHWgNW/X9Wh1brWgNWr1axf1bTVodW11avVvV/VsNW41oLVttWr1b1f1bDVuNaC1azVq9W9X9aF1aPVuNW91b/VuNW9X9W91aXVutW/1aXVtNWi1aXWgF/VsNW41a/Vv9Wl1bTVotWl1oBf1bbVuNW11aXVtNWi1aXWgF/VpNWl1a/Vv9Wl1bTVotWl1oBcIi5zcGxpdChcIl9cIil9LG1vbnRoc1Nob3J0Olwi1bDVttW+X9aD1b/WgF/VtNaA1b9f1aHVutaAX9W01bXVvV/VsNW21b1f1bDVrNW9X9aF1aPVvV/VvdW61b9f1bDVr9W/X9W21bTVol/VpNWv1b9cIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLVr9Wr1oDVodWv1atf1aXWgNWv1bjWgtW31aHVotWp1atf1aXWgNWl1oTVt9Wh1aLVqdWrX9W51bjWgNWl1oTVt9Wh1aLVqdWrX9Ww1avVttWj1bfVodWi1anVq1/VuNaC1oDVotWh1alf1bfVodWi1aHVqVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1alcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZINWpLlwiLExMTDpcIkQgTU1NTSBZWVlZINWpLiwgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkg1akuLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvVodW11b3WhdaAXSBMVFwiLG5leHREYXk6XCJb1b7VodWy1ahdIExUXCIsbGFzdERheTpcIlvVpdaA1aXVr10gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3JldHVyblwiZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVFwifSxsYXN0V2VlazpmdW5jdGlvbigpe3JldHVyblwiW9Wh1bbWgdWh1a5dIGRkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFRcIn0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMg1bDVpdW/1bhcIixwYXN0OlwiJXMg1aHVvNWh1btcIixzOlwi1bTVqyDWhNWh1bbVqyDVvtWh1bXWgNWv1bXVodW2XCIsbTpcItaA1bjVutWlXCIsbW06XCIlZCDWgNW41brVpVwiLGg6XCLVqtWh1bRcIixoaDpcIiVkINWq1aHVtFwiLGQ6XCLWhdaAXCIsZGQ6XCIlZCDWhdaAXCIsTTpcItWh1bTVq9W9XCIsTU06XCIlZCDVodW01avVvVwiLHk6XCLVv9Wh1oDVq1wiLHl5OlwiJWQg1b/VodaA1atcIn0sbWVyaWRpZW1QYXJzZTov1aPVq9W31aXWgNW+1aF81aHVvNWh1b7VuNW/1b7VoXzWgdWl1oDVpdWv1b7VoXzVpdaA1aXVr9W41bXVodW2Lyxpc1BNOmZ1bmN0aW9uKGEpe3JldHVybi9eKNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYpJC8udGVzdChhKX0sbWVyaWRpZW06ZnVuY3Rpb24oYSl7cmV0dXJuIDQ+YT9cItWj1avVt9Wl1oDVvtWhXCI6MTI+YT9cItWh1bzVodW+1bjVv9W+1aFcIjoxNz5hP1wi1oHVpdaA1aXVr9W+1aFcIjpcItWl1oDVpdWv1bjVtdWh1bZcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfXxcXGR7MSwyfS0o1avVtnzWgNWkKS8sb3JkaW5hbDpmdW5jdGlvbihhLGIpe3N3aXRjaChiKXtjYXNlXCJERERcIjpjYXNlXCJ3XCI6Y2FzZVwiV1wiOmNhc2VcIkRERG9cIjpyZXR1cm4gMT09PWE/YStcIi3Vq9W2XCI6YStcIi3WgNWkXCI7ZGVmYXVsdDpyZXR1cm4gYX19LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJpZFwiLHttb250aHM6XCJKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3NfU2VwX09rdF9Ob3ZfRGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiTWluZ2d1X1NlbmluX1NlbGFzYV9SYWJ1X0thbWlzX0p1bWF0X1NhYnR1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJNaW5fU2VuX1NlbF9SYWJfS2FtX0p1bV9TYWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJNZ19Tbl9TbF9SYl9LbV9KbV9TYlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISC5tbVwiLExUUzpcIkhILm1tLnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tXCJ9LG1lcmlkaWVtUGFyc2U6L3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEyPT09YSYmKGE9MCksXCJwYWdpXCI9PT1iP2E6XCJzaWFuZ1wiPT09Yj9hPj0xMT9hOmErMTI6XCJzb3JlXCI9PT1ifHxcIm1hbGFtXCI9PT1iP2ErMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDExPmE/XCJwYWdpXCI6MTU+YT9cInNpYW5nXCI6MTk+YT9cInNvcmVcIjpcIm1hbGFtXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hhcmkgaW5pIHB1a3VsXSBMVFwiLG5leHREYXk6XCJbQmVzb2sgcHVrdWxdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtwdWt1bF0gTFRcIixsYXN0RGF5OlwiW0tlbWFyaW4gcHVrdWxdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtsYWx1IHB1a3VsXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbGFtICVzXCIscGFzdDpcIiVzIHlhbmcgbGFsdVwiLHM6XCJiZWJlcmFwYSBkZXRpa1wiLG06XCJzZW1lbml0XCIsbW06XCIlZCBtZW5pdFwiLGg6XCJzZWphbVwiLGhoOlwiJWQgamFtXCIsZDpcInNlaGFyaVwiLGRkOlwiJWQgaGFyaVwiLE06XCJzZWJ1bGFuXCIsTU06XCIlZCBidWxhblwiLHk6XCJzZXRhaHVuXCIseXk6XCIlZCB0YWh1blwifSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksa2cuZGVmaW5lTG9jYWxlKFwiaXNcIix7bW9udGhzOlwiamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21hw61fasO6bl9qw7psX8OhZ8O6X3NlcF9va3RfbsOzdl9kZXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzdW5udWRhZ3VyX23DoW51ZGFndXJfw75yacOwanVkYWd1cl9tacOwdmlrdWRhZ3VyX2ZpbW10dWRhZ3VyX2bDtnN0dWRhZ3VyX2xhdWdhcmRhZ3VyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTcOhX8Oecl9NaV9GaV9Gw7ZfTGFcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbw60gZGFnIGtsLl0gTFRcIixuZXh0RGF5OlwiW8OhIG1vcmd1biBrbC5dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtrbC5dIExUXCIsbGFzdERheTpcIlvDrSBnw6ZyIGtsLl0gTFRcIixsYXN0V2VlazpcIltzw63DsGFzdGFdIGRkZGQgW2tsLl0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlZnRpciAlc1wiLHBhc3Q6XCJmeXJpciAlcyBzw63DsGFuXCIsczpGZCxtOkZkLG1tOkZkLGg6XCJrbHVra3VzdHVuZFwiLGhoOkZkLGQ6RmQsZGQ6RmQsTTpGZCxNTTpGZCx5OkZkLHl5OkZkfSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcIml0XCIse21vbnRoczpcImdlbm5haW9fZmViYnJhaW9fbWFyem9fYXByaWxlX21hZ2dpb19naXVnbm9fbHVnbGlvX2Fnb3N0b19zZXR0ZW1icmVfb3R0b2JyZV9ub3ZlbWJyZV9kaWNlbWJyZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImdlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiRG9tZW5pY2FfTHVuZWTDrF9NYXJ0ZWTDrF9NZXJjb2xlZMOsX0dpb3ZlZMOsX1ZlbmVyZMOsX1NhYmF0b1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiRG9tX0x1bl9NYXJfTWVyX0dpb19WZW5fU2FiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRG9fTHVfTWFfTWVfR2lfVmVfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW09nZ2kgYWxsZV0gTFRcIixuZXh0RGF5OlwiW0RvbWFuaSBhbGxlXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYWxsZV0gTFRcIixsYXN0RGF5OlwiW0llcmkgYWxsZV0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbbGEgc2NvcnNhXSBkZGRkIFthbGxlXSBMVFwiO2RlZmF1bHQ6cmV0dXJuXCJbbG8gc2NvcnNvXSBkZGRkIFthbGxlXSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOmZ1bmN0aW9uKGEpe3JldHVybigvXlswLTldLiskLy50ZXN0KGEpP1widHJhXCI6XCJpblwiKStcIiBcIithfSxwYXN0OlwiJXMgZmFcIixzOlwiYWxjdW5pIHNlY29uZGlcIixtOlwidW4gbWludXRvXCIsbW06XCIlZCBtaW51dGlcIixoOlwidW4nb3JhXCIsaGg6XCIlZCBvcmVcIixkOlwidW4gZ2lvcm5vXCIsZGQ6XCIlZCBnaW9ybmlcIixNOlwidW4gbWVzZVwiLE1NOlwiJWQgbWVzaVwiLHk6XCJ1biBhbm5vXCIseXk6XCIlZCBhbm5pXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn3Cui8sb3JkaW5hbDpcIiVkwrpcIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwiamFcIix7bW9udGhzOlwiMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCIx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIuaXpeabnOaXpV/mnIjmm5zml6Vf54Gr5puc5pelX+awtOabnOaXpV/mnKjmm5zml6Vf6YeR5puc5pelX+Wcn+abnOaXpVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkFo5pmCbeWIhlwiLExUUzpcIkFo5pmCbeWIhnPnp5JcIixMOlwiWVlZWS9NTS9ERFwiLExMOlwiWVlZWeW5tE3mnIhE5pelXCIsTExMOlwiWVlZWeW5tE3mnIhE5pelQWjmmYJt5YiGXCIsTExMTDpcIllZWVnlubRN5pyIROaXpUFo5pmCbeWIhiBkZGRkXCJ9LG1lcmlkaWVtUGFyc2U6L+WNiOWJjXzljYjlvowvaSxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwi5Y2I5b6MXCI9PT1hfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDEyPmE/XCLljYjliY1cIjpcIuWNiOW+jFwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvku4rml6VdIExUXCIsbmV4dERheTpcIlvmmI7ml6VdIExUXCIsbmV4dFdlZWs6XCJb5p2l6YCxXWRkZGQgTFRcIixsYXN0RGF5OlwiW+aYqOaXpV0gTFRcIixsYXN0V2VlazpcIlvliY3pgLFdZGRkZCBMVFwiLHNhbWVFbHNlOlwiTFwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ95pelLyxvcmRpbmFsOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIpe2Nhc2VcImRcIjpjYXNlXCJEXCI6Y2FzZVwiREREXCI6cmV0dXJuIGErXCLml6VcIjtkZWZhdWx0OnJldHVybiBhfX0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlc+W+jFwiLHBhc3Q6XCIlc+WJjVwiLHM6XCLmlbDnp5JcIixtOlwiMeWIhlwiLG1tOlwiJWTliIZcIixoOlwiMeaZgumWk1wiLGhoOlwiJWTmmYLplpNcIixkOlwiMeaXpVwiLGRkOlwiJWTml6VcIixNOlwiMeODtuaciFwiLE1NOlwiJWTjg7bmnIhcIix5OlwiMeW5tFwiLHl5OlwiJWTlubRcIn19KSxrZy5kZWZpbmVMb2NhbGUoXCJqdlwiLHttb250aHM6XCJKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3NfU2VwX09rdF9Ob3BfRGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiTWluZ2d1X1NlbmVuX1NlbG9zb19SZWJ1X0tlbWlzX0plbXV3YWhfU2VwdHVcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIk1pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIk1nX1NuX1NsX1JiX0ttX0ptX1NwXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhILm1tXCIsTFRTOlwiSEgubW0uc3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW1cIn0sbWVyaWRpZW1QYXJzZTovZW5qaW5nfHNpeWFuZ3xzb250ZW58bmRhbHUvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwiZW5qaW5nXCI9PT1iP2E6XCJzaXlhbmdcIj09PWI/YT49MTE/YTphKzEyOlwic29udGVuXCI9PT1ifHxcIm5kYWx1XCI9PT1iP2ErMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDExPmE/XCJlbmppbmdcIjoxNT5hP1wic2l5YW5nXCI6MTk+YT9cInNvbnRlblwiOlwibmRhbHVcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbRGludGVuIHB1bmlrbyBwdWt1bF0gTFRcIixuZXh0RGF5OlwiW01iZW5qYW5nIHB1a3VsXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbcHVrdWxdIExUXCIsbGFzdERheTpcIltLYWxhIHdpbmdpIHB1a3VsXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBba2VwZW5na2VyIHB1a3VsXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIndvbnRlbiBpbmcgJXNcIixwYXN0OlwiJXMgaW5na2FuZyBrZXBlbmdrZXJcIixzOlwic2F3ZXRhd2lzIGRldGlrXCIsbTpcInNldHVuZ2dhbCBtZW5pdFwiLG1tOlwiJWQgbWVuaXRcIixoOlwic2V0dW5nZ2FsIGphbVwiLGhoOlwiJWQgamFtXCIsZDpcInNlZGludGVuXCIsZGQ6XCIlZCBkaW50ZW5cIixNOlwic2V3dWxhblwiLE1NOlwiJWQgd3VsYW5cIix5Olwic2V0YXVuXCIseXk6XCIlZCB0YXVuXCJ9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJrYVwiLHttb250aHM6e3N0YW5kYWxvbmU6XCLhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg5hf4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOYX+GDm+GDkOGDoOGDouGDmF/hg5Dhg57hg6Dhg5jhg5rhg5hf4YOb4YOQ4YOY4YOh4YOYX+GDmOGDleGDnOGDmOGDoeGDmF/hg5jhg5Xhg5rhg5jhg6Hhg5hf4YOQ4YOS4YOV4YOY4YOh4YOi4YOdX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDmF/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg5hf4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOYX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDmFwiLnNwbGl0KFwiX1wiKSxmb3JtYXQ6XCLhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg6Ff4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOhX+GDm+GDkOGDoOGDouGDoV/hg5Dhg57hg6Dhg5jhg5rhg5jhg6Ff4YOb4YOQ4YOY4YOh4YOhX+GDmOGDleGDnOGDmOGDoeGDoV/hg5jhg5Xhg5rhg5jhg6Hhg6Ff4YOQ4YOS4YOV4YOY4YOh4YOi4YOhX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDoV/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg6Ff4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOhX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDoVwiLnNwbGl0KFwiX1wiKX0sbW9udGhzU2hvcnQ6XCLhg5jhg5Dhg5xf4YOX4YOU4YORX+GDm+GDkOGDoF/hg5Dhg57hg6Bf4YOb4YOQ4YOYX+GDmOGDleGDnF/hg5jhg5Xhg5pf4YOQ4YOS4YOVX+GDoeGDlOGDpV/hg53hg6Xhg6Jf4YOc4YOd4YOUX+GDk+GDlOGDmVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czp7c3RhbmRhbG9uZTpcIuGDmeGDleGDmOGDoOGDkF/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDmF/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOYX+GDqOGDkOGDkeGDkOGDl+GDmFwiLnNwbGl0KFwiX1wiKSxmb3JtYXQ6XCLhg5nhg5Xhg5jhg6Dhg5Dhg6Ff4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDoV/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDoV/hg6jhg5Dhg5Hhg5Dhg5fhg6FcIi5zcGxpdChcIl9cIiksaXNGb3JtYXQ6Lyjhg6zhg5jhg5zhg5B84YOo4YOU4YOb4YOT4YOU4YOSKS99LHdlZWtkYXlzU2hvcnQ6XCLhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLhg5nhg5Vf4YOd4YOgX+GDoeGDkF/hg53hg5df4YOu4YOjX+GDnuGDkF/hg6jhg5BcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvhg5Phg6bhg5Thg6FdIExUWy3hg5bhg5RdXCIsbmV4dERheTpcIlvhg67hg5Xhg5Dhg5pdIExUWy3hg5bhg5RdXCIsbGFzdERheTpcIlvhg5Lhg6Phg6jhg5jhg5xdIExUWy3hg5bhg5RdXCIsbmV4dFdlZWs6XCJb4YOo4YOU4YOb4YOT4YOU4YOSXSBkZGRkIExUWy3hg5bhg5RdXCIsbGFzdFdlZWs6XCJb4YOs4YOY4YOc4YOQXSBkZGRkIExULeGDluGDlFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpmdW5jdGlvbihhKXtyZXR1cm4vKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDrOGDlOGDmuGDmCkvLnRlc3QoYSk/YS5yZXBsYWNlKC/hg5gkLyxcIuGDqOGDmFwiKTphK1wi4YOo4YOYXCJ9LHBhc3Q6ZnVuY3Rpb24oYSl7cmV0dXJuLyjhg6zhg5Dhg5vhg5h84YOs4YOj4YOX4YOYfOGDoeGDkOGDkOGDl+GDmHzhg5Phg6bhg5R84YOX4YOV4YOUKS8udGVzdChhKT9hLnJlcGxhY2UoLyjhg5h84YOUKSQvLFwi4YOY4YOhIOGDrOGDmOGDnFwiKTov4YOs4YOU4YOa4YOYLy50ZXN0KGEpP2EucmVwbGFjZSgv4YOs4YOU4YOa4YOYJC8sXCLhg6zhg5rhg5jhg6Eg4YOs4YOY4YOcXCIpOnZvaWQgMH0sczpcIuGDoOGDkOGDm+GDk+GDlOGDnOGDmOGDm+GDlCDhg6zhg5Dhg5vhg5hcIixtOlwi4YOs4YOj4YOX4YOYXCIsbW06XCIlZCDhg6zhg6Phg5fhg5hcIixoOlwi4YOh4YOQ4YOQ4YOX4YOYXCIsaGg6XCIlZCDhg6Hhg5Dhg5Dhg5fhg5hcIixkOlwi4YOT4YOm4YOUXCIsZGQ6XCIlZCDhg5Phg6bhg5RcIixNOlwi4YOX4YOV4YOUXCIsTU06XCIlZCDhg5fhg5Xhg5RcIix5Olwi4YOs4YOU4YOa4YOYXCIseXk6XCIlZCDhg6zhg5Thg5rhg5hcIn0sb3JkaW5hbFBhcnNlOi8wfDEt4YOa4YOYfOGDm+GDlC1cXGR7MSwyfXxcXGR7MSwyfS3hg5QvLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PT1hP2E6MT09PWE/YStcIi3hg5rhg5hcIjoyMD5hfHwxMDA+PWEmJmElMjA9PT0wfHxhJTEwMD09PTA/XCLhg5vhg5QtXCIrYTphK1wiLeGDlFwifSx3ZWVrOntkb3c6MSxkb3k6N319KSx7MDpcIi3RiNGWXCIsMTpcIi3RiNGWXCIsMjpcIi3RiNGWXCIsMzpcIi3RiNGWXCIsNDpcIi3RiNGWXCIsNTpcIi3RiNGWXCIsNjpcIi3RiNGLXCIsNzpcIi3RiNGWXCIsODpcIi3RiNGWXCIsOTpcIi3RiNGLXCIsMTA6XCIt0YjRi1wiLDIwOlwiLdGI0YtcIiwzMDpcIi3RiNGLXCIsNDA6XCIt0YjRi1wiLDUwOlwiLdGI0ZZcIiw2MDpcIi3RiNGLXCIsNzA6XCIt0YjRllwiLDgwOlwiLdGI0ZZcIiw5MDpcIi3RiNGLXCIsMTAwOlwiLdGI0ZZcIn0pLFZnPShrZy5kZWZpbmVMb2NhbGUoXCJra1wiLHttb250aHM6XCLSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L1cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLSm9Cw0qNf0LDSm9C/X9C90LDRg1/RgdOZ0YNf0LzQsNC8X9C80LDRg1/RiNGW0Ltf0YLQsNC8X9Kb0YvRgF/Sm9Cw0Ldf0pvQsNGAX9C20LXQu1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItC20LXQutGB0LXQvdCx0ZZf0LTSr9C50YHQtdC90LHRll/RgdC10LnRgdC10L3QsdGWX9GB05nRgNGB0LXQvdCx0ZZf0LHQtdC50YHQtdC90LHRll/QttKx0LzQsF/RgdC10L3QsdGWXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L1cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLQttC6X9C00Llf0YHQuV/RgdGAX9Cx0Llf0LbQvF/RgdC9XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUXCIsbmV4dERheTpcIlvQldGA0YLQtdKjINGB0LDSk9Cw0YJdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvRgdCw0pPQsNGCXSBMVFwiLGxhc3REYXk6XCJb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFRcIixsYXN0V2VlazpcIlvTqNGC0LrQtdC9INCw0L/RgtCw0L3Ri9KjXSBkZGRkIFvRgdCw0pPQsNGCXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzINGW0YjRltC90LTQtVwiLHBhc3Q6XCIlcyDQsdKx0YDRi9C9XCIsczpcItCx0ZbRgNC90LXRiNC1INGB0LXQutGD0L3QtFwiLG06XCLQsdGW0YAg0LzQuNC90YPRglwiLG1tOlwiJWQg0LzQuNC90YPRglwiLGg6XCLQsdGW0YAg0YHQsNKT0LDRglwiLGhoOlwiJWQg0YHQsNKT0LDRglwiLGQ6XCLQsdGW0YAg0LrSr9C9XCIsZGQ6XCIlZCDQutKv0L1cIixNOlwi0LHRltGAINCw0LlcIixNTTpcIiVkINCw0LlcIix5Olwi0LHRltGAINC20YvQu1wiLHl5OlwiJWQg0LbRi9C7XCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0tKNGI0ZZ80YjRiykvLG9yZGluYWw6ZnVuY3Rpb24oYSl7dmFyIGI9YSUxMCxjPWE+PTEwMD8xMDA6bnVsbDtyZXR1cm4gYSsoVWdbYV18fFVnW2JdfHxVZ1tjXSl9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJrbVwiLHttb250aHM6XCLhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIuGemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwi4Z6i4Z624Z6R4Z634Z6P4Z+S4Z6ZX+GeheGfkOGek+GfkuGekV/hnqLhnoThn5LhnoLhnrbhnppf4Z6W4Z674Z6SX+GeluGfkuGemuGeoOGen+GfkuGelOGej+Get+GfjV/hnp/hnrvhnoDhn5Lhnppf4Z6f4Z+F4Z6a4Z+NXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn41cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn41cIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW+GekOGfkuGehOGfg+Gek+GfgeGfhyDhnpjhn4nhn4ThnoRdIExUXCIsbmV4dERheTpcIlvhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBb4Z6Y4Z+J4Z+E4Z6EXSBMVFwiLGxhc3REYXk6XCJb4Z6Y4Z+S4Z6f4Z634Z6b4Z6Y4Z634Z6JIOGemOGfieGfhOGehF0gTFRcIixsYXN0V2VlazpcImRkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlc+GekeGfgOGej1wiLHBhc3Q6XCIlc+GemOGeu+Gek1wiLHM6XCLhnpThn4nhnrvhnpPhn5LhnpjhnrbhnpPhnpzhnrfhnpPhnrbhnpHhnrhcIixtOlwi4Z6Y4Z694Z6Z4Z6T4Z624Z6R4Z64XCIsbW06XCIlZCDhnpPhnrbhnpHhnrhcIixoOlwi4Z6Y4Z694Z6Z4Z6Y4Z+J4Z+E4Z6EXCIsaGg6XCIlZCDhnpjhn4nhn4ThnoRcIixkOlwi4Z6Y4Z694Z6Z4Z6Q4Z+S4Z6E4Z+DXCIsZGQ6XCIlZCDhnpDhn5LhnoThn4NcIixNOlwi4Z6Y4Z694Z6Z4Z6B4Z+CXCIsTU06XCIlZCDhnoHhn4JcIix5Olwi4Z6Y4Z694Z6Z4Z6G4Z+S4Z6T4Z624Z+GXCIseXk6XCIlZCDhnobhn5LhnpPhnrbhn4ZcIn0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcImtvXCIse21vbnRoczpcIjHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5RcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLsnbzsmpTsnbxf7JuU7JqU7J28X+2ZlOyalOydvF/siJjsmpTsnbxf66qp7JqU7J28X+q4iOyalOydvF/thqDsmpTsnbxcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoFwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGjsi5wgbeu2hFwiLExUUzpcIkEgaOyLnCBt67aEIHPstIhcIixMOlwiWVlZWS5NTS5ERFwiLExMOlwiWVlZWeuFhCBNTU1NIETsnbxcIixMTEw6XCJZWVlZ64WEIE1NTU0gROydvCBBIGjsi5wgbeu2hFwiLExMTEw6XCJZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaOyLnCBt67aEXCJ9LGNhbGVuZGFyOntzYW1lRGF5Olwi7Jik64qYIExUXCIsbmV4dERheTpcIuuCtOydvCBMVFwiLG5leHRXZWVrOlwiZGRkZCBMVFwiLGxhc3REYXk6XCLslrTsoJwgTFRcIixsYXN0V2VlazpcIuyngOuCnOyjvCBkZGRkIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMg7ZuEXCIscGFzdDpcIiVzIOyghFwiLHM6XCLrqocg7LSIXCIsc3M6XCIlZOy0iFwiLG06XCLsnbzrtoRcIixtbTpcIiVk67aEXCIsaDpcIu2VnCDsi5zqsIRcIixoaDpcIiVk7Iuc6rCEXCIsZDpcIu2VmOujqFwiLGRkOlwiJWTsnbxcIixNOlwi7ZWcIOuLrFwiLE1NOlwiJWTri6xcIix5Olwi7J28IOuFhFwiLHl5OlwiJWTrhYRcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfeydvC8sb3JkaW5hbDpcIiVk7J28XCIsbWVyaWRpZW1QYXJzZTov7Jik7KCEfOyYpO2bhC8saXNQTTpmdW5jdGlvbihhKXtyZXR1cm5cIuyYpO2bhFwiPT09YX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxMj5hP1wi7Jik7KCEXCI6XCLsmKTtm4RcIn19KSx7MDpcIi3Rh9KvXCIsMTpcIi3Rh9C4XCIsMjpcIi3Rh9C4XCIsMzpcIi3Rh9KvXCIsNDpcIi3Rh9KvXCIsNTpcIi3Rh9C4XCIsNjpcIi3Rh9GLXCIsNzpcIi3Rh9C4XCIsODpcIi3Rh9C4XCIsOTpcIi3Rh9GDXCIsMTA6XCIt0YfRg1wiLDIwOlwiLdGH0YtcIiwzMDpcIi3Rh9GDXCIsNDA6XCIt0YfRi1wiLDUwOlwiLdGH0q9cIiw2MDpcIi3Rh9GLXCIsNzA6XCIt0YfQuFwiLDgwOlwiLdGH0LhcIiw5MDpcIi3Rh9GDXCIsMTAwOlwiLdGH0q9cIn0pLFdnPShrZy5kZWZpbmVMb2NhbGUoXCJreVwiLHttb250aHM6XCLRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YxcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLRj9C90LJf0YTQtdCyX9C80LDRgNGCX9Cw0L/RgF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQulwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcItCW0LXQutGI0LXQvNCx0Lhf0JTSr9C50YjTqdC80LHSr1/QqNC10LnRiNC10LzQsdC4X9Co0LDRgNGI0LXQvNCx0Lhf0JHQtdC50YjQtdC80LHQuF/QltGD0LzQsF/QmNGI0LXQvNCx0LhcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcItCW0LXQul/QlNKv0Llf0KjQtdC5X9Co0LDRgF/QkdC10Llf0JbRg9C8X9CY0YjQtVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcItCW0Lpf0JTQuV/QqNC5X9Co0YBf0JHQuV/QltC8X9CY0YhcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW9CR0q/Qs9Kv0L0g0YHQsNCw0YJdIExUXCIsbmV4dERheTpcIlvQrdGA0YLQtdKjINGB0LDQsNGCXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBb0YHQsNCw0YJdIExUXCIsbGFzdERheTpcIlvQmtC10YfQtSDRgdCw0LDRgl0gTFRcIixsYXN0V2VlazpcIlvTqNGC0LrQtdC9INCw0L/RgtCw0L3Ri9C9XSBkZGRkIFvQutKv0L3Sr10gW9GB0LDQsNGCXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzINC40YfQuNC90LTQtVwiLHBhc3Q6XCIlcyDQvNGD0YDRg9C9XCIsczpcItCx0LjRgNC90LXRh9C1INGB0LXQutGD0L3QtFwiLG06XCLQsdC40YAg0LzSr9C906nRglwiLG1tOlwiJWQg0LzSr9C906nRglwiLGg6XCLQsdC40YAg0YHQsNCw0YJcIixoaDpcIiVkINGB0LDQsNGCXCIsZDpcItCx0LjRgCDQutKv0L1cIixkZDpcIiVkINC60q/QvVwiLE06XCLQsdC40YAg0LDQuVwiLE1NOlwiJWQg0LDQuVwiLHk6XCLQsdC40YAg0LbRi9C7XCIseXk6XCIlZCDQttGL0LtcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0o0YfQuHzRh9GLfNGH0q980YfRgykvLG9yZGluYWw6ZnVuY3Rpb24oYSl7dmFyIGI9YSUxMCxjPWE+PTEwMD8xMDA6bnVsbDtyZXR1cm4gYSsoVmdbYV18fFZnW2JdfHxWZ1tjXSl9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJsYlwiLHttb250aHM6XCJKYW51YXJfRmVicnVhcl9Nw6RlcnpfQWJyw6tsbF9NZWVfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbi5fRmVici5fTXJ6Ll9BYnIuX01lZV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6LlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiU29ubmRlZ19Nw6lpbmRlZ19Ew6tuc2NoZGVnX03Dq3R0d29jaF9Eb25uZXNjaGRlZ19GcmVpZGVnX1NhbXNjaGRlZ1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU28uX03DqS5fRMOrLl9Nw6suX0RvLl9Gci5fU2EuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU29fTcOpX0TDq19Nw6tfRG9fRnJfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW0gW0F1ZXJdXCIsTFRTOlwiSDptbTpzcyBbQXVlcl1cIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdXCIsTExMTDpcImRkZGQsIEQuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIYXV0IHVtXSBMVFwiLHNhbWVFbHNlOlwiTFwiLG5leHREYXk6XCJbTXVlciB1bV0gTFRcIixuZXh0V2VlazpcImRkZGQgW3VtXSBMVFwiLGxhc3REYXk6XCJbR8Orc2NodGVyIHVtXSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7XHJcbi8vIERpZmZlcmVudCBkYXRlIHN0cmluZyBmb3IgJ0TDq25zY2hkZWcnIChUdWVzZGF5KSBhbmQgJ0Rvbm5lc2NoZGVnJyAoVGh1cnNkYXkpIGR1ZSB0byBwaG9ub2xvZ2ljYWwgcnVsZVxyXG5zd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAyOmNhc2UgNDpyZXR1cm5cIltMZXNjaHRlbl0gZGRkZCBbdW1dIExUXCI7ZGVmYXVsdDpyZXR1cm5cIltMZXNjaHRlXSBkZGRkIFt1bV0gTFRcIn19fSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpIZCxwYXN0OklkLHM6XCJlIHB1ZXIgU2Vrb25uZW5cIixtOkdkLG1tOlwiJWQgTWludXR0ZW5cIixoOkdkLGhoOlwiJWQgU3Rvbm5lblwiLGQ6R2QsZGQ6XCIlZCBEZWVnXCIsTTpHZCxNTTpcIiVkIE3DqWludFwiLHk6R2QseXk6XCIlZCBKb2VyXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwibG9cIix7bW9udGhzOlwi4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLguqHgurHguofguoHguq3guplf4LqB4Lq44Lqh4Lqe4LqyX+C6oeC6teC6meC6sl/gu4DguqHguqrgurJf4Lqe4Lq24LqU4Lqq4Lqw4Lqe4LqyX+C6oeC6tOC6luC6uOC6meC6sl/guoHgu43guqXgurDguoHgurvgupRf4Lqq4Lq04LqH4Lqr4LqyX+C6geC6seC6meC6jeC6sl/gupXgurjguqXgurJf4Lqe4Lqw4LqI4Lq04LqBX+C6l+C6seC6meC6p+C6slwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIuC6reC6suC6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6slwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi4LqXX+C6iF/guq3guoRf4LqeX+C6nuC6q1/guqrguoFf4LqqXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwi4Lqn4Lqx4LqZZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi/gupXguq3gupngu4Dguorgurvgu4ngurJ84LqV4Lqt4LqZ4LuB4Lql4LqHLyxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwi4LqV4Lqt4LqZ4LuB4Lql4LqHXCI9PT1hfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDEyPmE/XCLgupXguq3gupngu4Dguorgurvgu4ngurJcIjpcIuC6leC6reC6meC7geC6peC6h1wifSxjYWxlbmRhcjp7c2FtZURheTpcIlvguqHgurfgu4ngupngurXgu4ngu4DguqfguqXgurJdIExUXCIsbmV4dERheTpcIlvguqHgurfgu4nguq3gurfgu4jgupngu4DguqfguqXgurJdIExUXCIsbmV4dFdlZWs6XCJb4Lqn4Lqx4LqZXWRkZGRb4Luc4LuJ4Lqy4LuA4Lqn4Lql4LqyXSBMVFwiLGxhc3REYXk6XCJb4Lqh4Lq34LuJ4Lqn4Lqy4LqZ4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVFwiLGxhc3RXZWVrOlwiW+C6p+C6seC6mV1kZGRkW+C7geC6peC7ieC6p+C6meC6teC7ieC7gOC6p+C6peC6sl0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLguq3gurXguoEgJXNcIixwYXN0OlwiJXPgupzgu4jgurLgupnguqHgurJcIixzOlwi4Lqa4LuN4LuI4LuA4LqX4Lq74LuI4Lqy4LuD4LqU4Lqn4Lq04LqZ4Lqy4LqX4Lq1XCIsbTpcIjEg4LqZ4Lqy4LqX4Lq1XCIsbW06XCIlZCDgupngurLgupfgurVcIixoOlwiMSDguorgurvgu4jguqfgu4LguqHguodcIixoaDpcIiVkIOC6iuC6u+C7iOC6p+C7guC6oeC6h1wiLGQ6XCIxIOC6oeC6t+C7iVwiLGRkOlwiJWQg4Lqh4Lq34LuJXCIsTTpcIjEg4LuA4LqU4Lq34Lqt4LqZXCIsTU06XCIlZCDgu4DgupTgurfguq3guplcIix5OlwiMSDgupvgurVcIix5eTpcIiVkIOC6m+C6tVwifSxvcmRpbmFsUGFyc2U6LyjgupfgurXgu4gpXFxkezEsMn0vLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuXCLgupfgurXgu4hcIithfX0pLHttOlwibWludXTEl19taW51dMSXc19taW51dMSZXCIsbW06XCJtaW51dMSXc19taW51xI1pxbNfbWludXRlc1wiLGg6XCJ2YWxhbmRhX3ZhbGFuZG9zX3ZhbGFuZMSFXCIsaGg6XCJ2YWxhbmRvc192YWxhbmTFs192YWxhbmRhc1wiLGQ6XCJkaWVuYV9kaWVub3NfZGllbsSFXCIsZGQ6XCJkaWVub3NfZGllbsWzX2RpZW5hc1wiLE06XCJtxJdudW9fbcSXbmVzaW9fbcSXbmVzxK9cIixNTTpcIm3El25lc2lhaV9txJduZXNpxbNfbcSXbmVzaXVzXCIseTpcIm1ldGFpX21ldMWzX21ldHVzXCIseXk6XCJtZXRhaV9tZXTFs19tZXR1c1wifSksWGc9KGtnLmRlZmluZUxvY2FsZShcImx0XCIse21vbnRoczp7Zm9ybWF0Olwic2F1c2lvX3Zhc2FyaW9fa292b19iYWxhbmTFvmlvX2dlZ3XFvsSXc19iaXLFvmVsaW9fbGllcG9zX3J1Z3BqxavEjWlvX3J1Z3PEl2pvX3NwYWxpb19sYXBrcmnEjWlvX2dydW9kxb5pb1wiLnNwbGl0KFwiX1wiKSxzdGFuZGFsb25lOlwic2F1c2lzX3Zhc2FyaXNfa292YXNfYmFsYW5kaXNfZ2VndcW+xJdfYmlyxb5lbGlzX2xpZXBhX3J1Z3Bqxat0aXNfcnVnc8SXamlzX3NwYWxpc19sYXBrcml0aXNfZ3J1b2Rpc1wiLnNwbGl0KFwiX1wiKSxpc0Zvcm1hdDovRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKykrTU1NTT98TU1NTT8oXFxbW15cXFtcXF1dKlxcXXxcXHMrKStEW29EXT8vfSxtb250aHNTaG9ydDpcInNhdV92YXNfa292X2JhbF9nZWdfYmlyX2xpZV9yZ3BfcmdzX3NwYV9sYXBfZ3JkXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOntmb3JtYXQ6XCJzZWttYWRpZW7Er19waXJtYWRpZW7Er19hbnRyYWRpZW7Er190cmXEjWlhZGllbsSvX2tldHZpcnRhZGllbsSvX3Blbmt0YWRpZW7Er1/FoWXFoXRhZGllbsSvXCIuc3BsaXQoXCJfXCIpLHN0YW5kYWxvbmU6XCJzZWttYWRpZW5pc19waXJtYWRpZW5pc19hbnRyYWRpZW5pc190cmXEjWlhZGllbmlzX2tldHZpcnRhZGllbmlzX3Blbmt0YWRpZW5pc1/FoWXFoXRhZGllbmlzXCIuc3BsaXQoXCJfXCIpLGlzRm9ybWF0Oi9kZGRkIEhIOm1tL30sd2Vla2RheXNTaG9ydDpcIlNla19QaXJfQW50X1RyZV9LZXRfUGVuX8WgZcWhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU19QX0FfVF9LX1BuX8WgXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIllZWVktTU0tRERcIixMTDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXVwiLExMTDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dXCIsTExMTDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkZCwgSEg6bW0gW3ZhbC5dXCIsbDpcIllZWVktTU0tRERcIixsbDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXVwiLGxsbDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dXCIsbGxsbDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkLCBISDptbSBbdmFsLl1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbxaBpYW5kaWVuXSBMVFwiLG5leHREYXk6XCJbUnl0b2pdIExUXCIsbmV4dFdlZWs6XCJkZGRkIExUXCIsbGFzdERheTpcIltWYWthcl0gTFRcIixsYXN0V2VlazpcIltQcmHEl2p1c8SvXSBkZGRkIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwicG8gJXNcIixwYXN0OlwicHJpZcWhICVzXCIsczpLZCxtOkxkLG1tOk9kLGg6TGQsaGg6T2QsZDpMZCxkZDpPZCxNOkxkLE1NOk9kLHk6TGQseXk6T2R9LG9yZGluYWxQYXJzZTovXFxkezEsMn0tb2ppLyxvcmRpbmFsOmZ1bmN0aW9uKGEpe3JldHVybiBhK1wiLW9qaVwifSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSkse206XCJtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlc1wiLnNwbGl0KFwiX1wiKSxtbTpcIm1pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzXCIuc3BsaXQoXCJfXCIpLGg6XCJzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzXCIuc3BsaXQoXCJfXCIpLGhoOlwic3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhc1wiLnNwbGl0KFwiX1wiKSxkOlwiZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzXCIuc3BsaXQoXCJfXCIpLGRkOlwiZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzXCIuc3BsaXQoXCJfXCIpLE06XCJtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpXCIuc3BsaXQoXCJfXCIpLE1NOlwibcSTbmXFoWFfbcSTbmXFoWllbV9txJNuZXNpc19txJNuZcWhaVwiLnNwbGl0KFwiX1wiKSx5OlwiZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpXCIuc3BsaXQoXCJfXCIpLHl5OlwiZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpXCIuc3BsaXQoXCJfXCIpfSksWWc9KGtnLmRlZmluZUxvY2FsZShcImx2XCIse21vbnRoczpcImphbnbEgXJpc19mZWJydcSBcmlzX21hcnRzX2FwcsSrbGlzX21haWpzX2rFq25panNfasWrbGlqc19hdWd1c3RzX3NlcHRlbWJyaXNfb2t0b2JyaXNfbm92ZW1icmlzX2RlY2VtYnJpc1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbl9mZWJfbWFyX2Fwcl9tYWlfasWrbl9qxatsX2F1Z19zZXBfb2t0X25vdl9kZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzdsSTdGRpZW5hX3Bpcm1kaWVuYV9vdHJkaWVuYV90cmXFoWRpZW5hX2NldHVydGRpZW5hX3BpZWt0ZGllbmFfc2VzdGRpZW5hXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdl9QX09fVF9DX1BrX1NcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdl9QX09fVF9DX1BrX1NcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWS5cIixMTDpcIllZWVkuIFtnYWRhXSBELiBNTU1NXCIsTExMOlwiWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tXCIsTExMTDpcIllZWVkuIFtnYWRhXSBELiBNTU1NLCBkZGRkLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvFoG9kaWVuIHB1bGtzdGVuXSBMVFwiLG5leHREYXk6XCJbUsSrdCBwdWxrc3Rlbl0gTFRcIixuZXh0V2VlazpcImRkZGQgW3B1bGtzdGVuXSBMVFwiLGxhc3REYXk6XCJbVmFrYXIgcHVsa3N0ZW5dIExUXCIsbGFzdFdlZWs6XCJbUGFnxIFqdcWhxIFdIGRkZGQgW3B1bGtzdGVuXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInDEk2MgJXNcIixwYXN0OlwicGlybXMgJXNcIixzOlNkLG06UmQsbW06UWQsaDpSZCxoaDpRZCxkOlJkLGRkOlFkLE06UmQsTU06UWQseTpSZCx5eTpRZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSx7d29yZHM6ey8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXHJcbm06W1wiamVkYW4gbWludXRcIixcImplZG5vZyBtaW51dGFcIl0sbW06W1wibWludXRcIixcIm1pbnV0YVwiLFwibWludXRhXCJdLGg6W1wiamVkYW4gc2F0XCIsXCJqZWRub2cgc2F0YVwiXSxoaDpbXCJzYXRcIixcInNhdGFcIixcInNhdGlcIl0sZGQ6W1wiZGFuXCIsXCJkYW5hXCIsXCJkYW5hXCJdLE1NOltcIm1qZXNlY1wiLFwibWplc2VjYVwiLFwibWplc2VjaVwiXSx5eTpbXCJnb2RpbmFcIixcImdvZGluZVwiLFwiZ29kaW5hXCJdfSxjb3JyZWN0R3JhbW1hdGljYWxDYXNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDE9PT1hP2JbMF06YT49MiYmND49YT9iWzFdOmJbMl19LHRyYW5zbGF0ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9WWcud29yZHNbY107cmV0dXJuIDE9PT1jLmxlbmd0aD9iP2RbMF06ZFsxXTphK1wiIFwiK1lnLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UoYSxkKX19KSxaZz0oa2cuZGVmaW5lTG9jYWxlKFwibWVcIix7bW9udGhzOlwiamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwibmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJuZV9wb191dF9zcl/EjWVfcGVfc3VcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELiBNTS4gWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbZGFuYXMgdV0gTFRcIixuZXh0RGF5OlwiW3NqdXRyYSB1XSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlt1XSBbbmVkamVsanVdIFt1XSBMVFwiO2Nhc2UgMzpyZXR1cm5cIlt1XSBbc3JpamVkdV0gW3VdIExUXCI7Y2FzZSA2OnJldHVyblwiW3VdIFtzdWJvdHVdIFt1XSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlt1XSBkZGRkIFt1XSBMVFwifX0sbGFzdERheTpcIltqdcSNZSB1XSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7dmFyIGE9W1wiW3Byb8WhbGVdIFtuZWRqZWxqZV0gW3VdIExUXCIsXCJbcHJvxaFsb2ddIFtwb25lZGplbGprYV0gW3VdIExUXCIsXCJbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVFwiLFwiW3Byb8WhbGVdIFtzcmlqZWRlXSBbdV0gTFRcIixcIltwcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUXCIsXCJbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUXCIsXCJbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUXCJdO3JldHVybiBhW3RoaXMuZGF5KCldfSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJ6YSAlc1wiLHBhc3Q6XCJwcmlqZSAlc1wiLHM6XCJuZWtvbGlrbyBzZWt1bmRpXCIsbTpZZy50cmFuc2xhdGUsbW06WWcudHJhbnNsYXRlLGg6WWcudHJhbnNsYXRlLGhoOllnLnRyYW5zbGF0ZSxkOlwiZGFuXCIsZGQ6WWcudHJhbnNsYXRlLE06XCJtamVzZWNcIixNTTpZZy50cmFuc2xhdGUseTpcImdvZGludVwiLHl5OllnLnRyYW5zbGF0ZX0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJta1wiLHttb250aHM6XCLRmNCw0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvdC4X9GY0YPQu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi0ZjQsNC9X9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LpcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLQvdC10LTQtdC70LBf0L/QvtC90LXQtNC10LvQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQvtC6X9C/0LXRgtC+0Lpf0YHQsNCx0L7RgtCwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0LVf0YfQtdGCX9C/0LXRgl/RgdCw0LFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLQvWVf0L9vX9Cy0YJf0YHRgF/Rh9C1X9C/0LVf0YFhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb0JTQtdC90LXRgSDQstC+XSBMVFwiLG5leHREYXk6XCJb0KPRgtGA0LUg0LLQvl0gTFRcIixuZXh0V2VlazpcIlvQktC+XSBkZGRkIFvQstC+XSBMVFwiLGxhc3REYXk6XCJb0JLRh9C10YDQsCDQstC+XSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpjYXNlIDM6Y2FzZSA2OnJldHVyblwiW9CY0LfQvNC40L3QsNGC0LDRgtCwXSBkZGRkIFvQstC+XSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlvQmNC30LzQuNC90LDRgtC40L7Rgl0gZGRkZCBb0LLQvl0gTFRcIn19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcItC/0L7RgdC70LUgJXNcIixwYXN0Olwi0L/RgNC10LQgJXNcIixzOlwi0L3QtdC60L7Qu9C60YMg0YHQtdC60YPQvdC00LhcIixtOlwi0LzQuNC90YPRgtCwXCIsbW06XCIlZCDQvNC40L3Rg9GC0LhcIixoOlwi0YfQsNGBXCIsaGg6XCIlZCDRh9Cw0YHQsFwiLGQ6XCLQtNC10L1cIixkZDpcIiVkINC00LXQvdCwXCIsTTpcItC80LXRgdC10YZcIixNTTpcIiVkINC80LXRgdC10YbQuFwiLHk6XCLQs9C+0LTQuNC90LBcIix5eTpcIiVkINCz0L7QtNC40L3QuFwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLG9yZGluYWw6ZnVuY3Rpb24oYSl7dmFyIGI9YSUxMCxjPWElMTAwO3JldHVybiAwPT09YT9hK1wiLdC10LJcIjowPT09Yz9hK1wiLdC10L1cIjpjPjEwJiYyMD5jP2ErXCIt0YLQuFwiOjE9PT1iP2ErXCIt0LLQuFwiOjI9PT1iP2ErXCIt0YDQuFwiOjc9PT1ifHw4PT09Yj9hK1wiLdC80LhcIjphK1wiLdGC0LhcIn0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLGtnLmRlZmluZUxvY2FsZShcIm1sXCIse21vbnRoczpcIuC0nOC0qOC1geC0teC0sOC0v1/gtKvgtYbgtKzgtY3gtLDgtYHgtLXgtLDgtL9f4LSu4LS+4LW84LSa4LWN4LSa4LWNX+C0j+C0quC1jeC0sOC0v+C1vV/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iF/gtJPgtJfgtLjgtY3gtLHgtY3gtLHgtY1f4LS44LWG4LSq4LWN4LSx4LWN4LSx4LSC4LSs4LW8X+C0kuC0leC1jeC0n+C1i+C0rOC1vF/gtKjgtLXgtILgtKzgtbxf4LSh4LS/4LS44LSC4LSs4LW8XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi4LSc4LSo4LWBLl/gtKvgtYbgtKzgtY3gtLDgtYEuX+C0ruC0vuC1vC5f4LSP4LSq4LWN4LSw4LS/Ll/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iC5f4LST4LSXLl/gtLjgtYbgtKrgtY3gtLHgtY3gtLEuX+C0kuC0leC1jeC0n+C1iy5f4LSo4LS14LSCLl/gtKHgtL/gtLjgtIIuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCLgtJ7gtL7gtK/gtLHgtL7gtLTgtY3gtJpf4LSk4LS/4LSZ4LWN4LSV4LSz4LS+4LS04LWN4LSaX+C0muC1iuC0teC1jeC0teC0vuC0tOC1jeC0ml/gtKzgtYHgtKfgtKjgtL7gtLTgtY3gtJpf4LS14LWN4LSv4LS+4LS04LS+4LS04LWN4LSaX+C0teC1huC0s+C1jeC0s+C0v+C0r+C0vuC0tOC1jeC0ml/gtLbgtKjgtL/gtK/gtL7gtLTgtY3gtJpcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuC0nuC0vuC0r+C1vF/gtKTgtL/gtJngtY3gtJXgtb5f4LSa4LWK4LS14LWN4LS1X+C0rOC1geC0p+C1u1/gtLXgtY3gtK/gtL7gtLTgtIJf4LS14LWG4LSz4LWN4LSz4LS/X+C0tuC0qOC0v1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuC0nuC0vl/gtKTgtL9f4LSa4LWKX+C0rOC1gV/gtLXgtY3gtK/gtL5f4LS14LWGX+C0tlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0gLeC0qOC1gVwiLExUUzpcIkEgaDptbTpzcyAt4LSo4LWBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gLeC0qOC1gVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvgtIfgtKjgtY3gtKjgtY1dIExUXCIsbmV4dERheTpcIlvgtKjgtL7gtLPgtYZdIExUXCIsbmV4dFdlZWs6XCJkZGRkLCBMVFwiLGxhc3REYXk6XCJb4LSH4LSo4LWN4LSo4LSy4LWGXSBMVFwiLGxhc3RXZWVrOlwiW+C0leC0tOC0v+C0nuC1jeC0nl0gZGRkZCwgTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY1cIixwYXN0OlwiJXMg4LSu4LWB4LW74LSq4LWNXCIsczpcIuC0heC1veC0qiDgtKjgtL/gtK7gtL/gtLfgtJngtY3gtJngtb5cIixtOlwi4LSS4LSw4LWBIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jVwiLG1tOlwiJWQg4LSu4LS/4LSo4LS/4LSx4LWN4LSx4LWNXCIsaDpcIuC0kuC0sOC1gSDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbxcIixoaDpcIiVkIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vFwiLGQ6XCLgtJLgtLDgtYEg4LSm4LS/4LS14LS44LSCXCIsZGQ6XCIlZCDgtKbgtL/gtLXgtLjgtIJcIixNOlwi4LSS4LSw4LWBIOC0ruC0vuC0uOC0glwiLE1NOlwiJWQg4LSu4LS+4LS44LSCXCIseTpcIuC0kuC0sOC1gSDgtLXgtbzgtLfgtIJcIix5eTpcIiVkIOC0teC1vOC0t+C0glwifSxtZXJpZGllbVBhcnNlOi/gtLDgtL7gtKTgtY3gtLDgtL984LSw4LS+4LS14LS/4LSy4LWGfOC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY184LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCfOC0sOC0vuC0pOC1jeC0sOC0vy9pLG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwi4LSw4LS+4LSk4LWN4LSw4LS/XCI9PT1iJiZhPj00fHxcIuC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY1cIj09PWJ8fFwi4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCXCI9PT1iP2ErMTI6YX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiA0PmE/XCLgtLDgtL7gtKTgtY3gtLDgtL9cIjoxMj5hP1wi4LSw4LS+4LS14LS/4LSy4LWGXCI6MTc+YT9cIuC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY1cIjoyMD5hP1wi4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCXCI6XCLgtLDgtL7gtKTgtY3gtLDgtL9cIn19KSx7MTpcIuClp1wiLDI6XCLgpahcIiwzOlwi4KWpXCIsNDpcIuClqlwiLDU6XCLgpatcIiw2Olwi4KWsXCIsNzpcIuClrVwiLDg6XCLgpa5cIiw5Olwi4KWvXCIsMDpcIuClplwifSksJGc9e1wi4KWnXCI6XCIxXCIsXCLgpahcIjpcIjJcIixcIuClqVwiOlwiM1wiLFwi4KWqXCI6XCI0XCIsXCLgpatcIjpcIjVcIixcIuClrFwiOlwiNlwiLFwi4KWtXCI6XCI3XCIsXCLgpa5cIjpcIjhcIixcIuClr1wiOlwiOVwiLFwi4KWmXCI6XCIwXCJ9LF9nPShrZy5kZWZpbmVMb2NhbGUoXCJtclwiLHttb250aHM6XCLgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpL/gpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpYhf4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIuCknOCkvuCkqOClhy5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJouX+Ckj+CkquCljeCksOCkvy5f4KSu4KWHLl/gpJzgpYLgpKguX+CknOClgeCksuCliC5f4KSR4KSXLl/gpLjgpKrgpY3gpJ/gpYfgpIIuX+CkkeCkleCljeCkn+Cliy5f4KSo4KWL4KS14KWN4KS54KWH4KSCLl/gpKHgpL/gpLjgpYfgpIIuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCLgpLDgpLXgpL/gpLXgpL7gpLBf4KS44KWL4KSu4KS14KS+4KSwX+CkruCkguCkl+Cks+CkteCkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSX4KWB4KSw4KWC4KS14KS+4KSwX+CktuClgeCkleCljeCksOCkteCkvuCksF/gpLbgpKjgpL/gpLXgpL7gpLBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuCksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSzX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkv1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuCksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+CktlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0g4KS14KS+4KSc4KSk4KS+XCIsTFRTOlwiQSBoOm1tOnNzIOCkteCkvuCknOCkpOCkvlwiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+XCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW+CkhuCknF0gTFRcIixuZXh0RGF5OlwiW+CkieCkpuCljeCkr+Ckvl0gTFRcIixuZXh0V2VlazpcImRkZGQsIExUXCIsbGFzdERheTpcIlvgpJXgpL7gpLJdIExUXCIsbGFzdFdlZWs6XCJb4KSu4KS+4KSX4KWA4KSyXSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVz4KSu4KSn4KWN4KSv4KWHXCIscGFzdDpcIiVz4KSq4KWC4KSw4KWN4KS14KWAXCIsczpUZCxtOlRkLG1tOlRkLGg6VGQsaGg6VGQsZDpUZCxkZDpUZCxNOlRkLE1NOlRkLHk6VGQseXk6VGR9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csZnVuY3Rpb24oYSl7cmV0dXJuICRnW2FdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oYSl7cmV0dXJuIFpnW2FdfSl9LG1lcmlkaWVtUGFyc2U6L+CksOCkvuCkpOCljeCksOClgHzgpLjgpJXgpL7gpLPgpYB84KSm4KWB4KSq4KS+4KSw4KWAfOCkuOCkvuCkr+CkguCkleCkvuCks+ClgC8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEyPT09YSYmKGE9MCksXCLgpLDgpL7gpKTgpY3gpLDgpYBcIj09PWI/ND5hP2E6YSsxMjpcIuCkuOCkleCkvuCks+ClgFwiPT09Yj9hOlwi4KSm4KWB4KSq4KS+4KSw4KWAXCI9PT1iP2E+PTEwP2E6YSsxMjpcIuCkuOCkvuCkr+CkguCkleCkvuCks+ClgFwiPT09Yj9hKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiA0PmE/XCLgpLDgpL7gpKTgpY3gpLDgpYBcIjoxMD5hP1wi4KS44KSV4KS+4KSz4KWAXCI6MTc+YT9cIuCkpuClgeCkquCkvuCksOClgFwiOjIwPmE/XCLgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYBcIjpcIuCksOCkvuCkpOCljeCksOClgFwifSx3ZWVrOntkb3c6MCwvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjZ9fSksa2cuZGVmaW5lTG9jYWxlKFwibXMtbXlcIix7bW9udGhzOlwiSmFudWFyaV9GZWJydWFyaV9NYWNfQXByaWxfTWVpX0p1bl9KdWxhaV9PZ29zX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rpc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHVcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkFoZF9Jc25fU2VsX1JhYl9LaGFfSnVtX1NhYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkFoX0lzX1NsX1JiX0ttX0ptX1NiXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhILm1tXCIsTFRTOlwiSEgubW0uc3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW1cIn0sbWVyaWRpZW1QYXJzZTovcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMTI9PT1hJiYoYT0wKSxcInBhZ2lcIj09PWI/YTpcInRlbmdhaGFyaVwiPT09Yj9hPj0xMT9hOmErMTI6XCJwZXRhbmdcIj09PWJ8fFwibWFsYW1cIj09PWI/YSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMTE+YT9cInBhZ2lcIjoxNT5hP1widGVuZ2FoYXJpXCI6MTk+YT9cInBldGFuZ1wiOlwibWFsYW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSGFyaSBpbmkgcHVrdWxdIExUXCIsbmV4dERheTpcIltFc29rIHB1a3VsXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbcHVrdWxdIExUXCIsbGFzdERheTpcIltLZWxtYXJpbiBwdWt1bF0gTFRcIixsYXN0V2VlazpcImRkZGQgW2xlcGFzIHB1a3VsXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbGFtICVzXCIscGFzdDpcIiVzIHlhbmcgbGVwYXNcIixzOlwiYmViZXJhcGEgc2FhdFwiLG06XCJzZW1pbml0XCIsbW06XCIlZCBtaW5pdFwiLGg6XCJzZWphbVwiLGhoOlwiJWQgamFtXCIsZDpcInNlaGFyaVwiLGRkOlwiJWQgaGFyaVwiLE06XCJzZWJ1bGFuXCIsTU06XCIlZCBidWxhblwiLHk6XCJzZXRhaHVuXCIseXk6XCIlZCB0YWh1blwifSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksa2cuZGVmaW5lTG9jYWxlKFwibXNcIix7bW9udGhzOlwiSmFudWFyaV9GZWJydWFyaV9NYWNfQXByaWxfTWVpX0p1bl9KdWxhaV9PZ29zX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rpc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHVcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkFoZF9Jc25fU2VsX1JhYl9LaGFfSnVtX1NhYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkFoX0lzX1NsX1JiX0ttX0ptX1NiXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhILm1tXCIsTFRTOlwiSEgubW0uc3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW1cIn0sbWVyaWRpZW1QYXJzZTovcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMTI9PT1hJiYoYT0wKSxcInBhZ2lcIj09PWI/YTpcInRlbmdhaGFyaVwiPT09Yj9hPj0xMT9hOmErMTI6XCJwZXRhbmdcIj09PWJ8fFwibWFsYW1cIj09PWI/YSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMTE+YT9cInBhZ2lcIjoxNT5hP1widGVuZ2FoYXJpXCI6MTk+YT9cInBldGFuZ1wiOlwibWFsYW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSGFyaSBpbmkgcHVrdWxdIExUXCIsbmV4dERheTpcIltFc29rIHB1a3VsXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbcHVrdWxdIExUXCIsbGFzdERheTpcIltLZWxtYXJpbiBwdWt1bF0gTFRcIixsYXN0V2VlazpcImRkZGQgW2xlcGFzIHB1a3VsXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbGFtICVzXCIscGFzdDpcIiVzIHlhbmcgbGVwYXNcIixzOlwiYmViZXJhcGEgc2FhdFwiLG06XCJzZW1pbml0XCIsbW06XCIlZCBtaW5pdFwiLGg6XCJzZWphbVwiLGhoOlwiJWQgamFtXCIsZDpcInNlaGFyaVwiLGRkOlwiJWQgaGFyaVwiLE06XCJzZWJ1bGFuXCIsTU06XCIlZCBidWxhblwiLHk6XCJzZXRhaHVuXCIseXk6XCIlZCB0YWh1blwifSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksezE6XCLhgYFcIiwyOlwi4YGCXCIsMzpcIuGBg1wiLDQ6XCLhgYRcIiw1Olwi4YGFXCIsNjpcIuGBhlwiLDc6XCLhgYdcIiw4Olwi4YGIXCIsOTpcIuGBiVwiLDA6XCLhgYBcIn0pLGFoPXtcIuGBgVwiOlwiMVwiLFwi4YGCXCI6XCIyXCIsXCLhgYNcIjpcIjNcIixcIuGBhFwiOlwiNFwiLFwi4YGFXCI6XCI1XCIsXCLhgYZcIjpcIjZcIixcIuGBh1wiOlwiN1wiLFwi4YGIXCI6XCI4XCIsXCLhgYlcIjpcIjlcIixcIuGBgFwiOlwiMFwifSxiaD0oa2cuZGVmaW5lTG9jYWxlKFwibXlcIix7bW9udGhzOlwi4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuX+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArl/hgJnhgJDhgLpf4YCn4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCH4YCw4YCc4YCt4YCv4YCE4YC6X+GAnuGAvOGAguGAr+GAkOGAul/hgIXhgIDhgLrhgJDhgIThgLrhgJjhgKxf4YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsX+GAlOGAreGAr+GAneGAhOGAuuGAmOGArF/hgJLhgK7hgIfhgIThgLrhgJjhgKxcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLhgIfhgJThgLpf4YCW4YCxX+GAmeGAkOGAul/hgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgJzhgK3hgK/hgIThgLpf4YCe4YC8X+GAheGAgOGAul/hgKHhgLHhgKzhgIDhgLpf4YCU4YCt4YCvX+GAkuGArlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIuGAkOGAlOGAhOGAuuGAueGAguGAlOGAveGAsV/hgJDhgJThgIThgLrhgLnhgJzhgKxf4YCh4YCE4YC64YC54YCC4YCrX+GAl+GAr+GAkuGAueGAk+GAn+GAsOGAuF/hgIDhgLzhgKzhgJ7hgJXhgJDhgLHhgLhf4YCe4YCx4YCs4YCA4YC84YCsX+GAheGAlOGAsVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW+GAmuGAlOGAsS5dIExUIFvhgJnhgL7hgKxdXCIsbmV4dERheTpcIlvhgJnhgJThgIDhgLrhgJbhgLzhgJThgLpdIExUIFvhgJnhgL7hgKxdXCIsbmV4dFdlZWs6XCJkZGRkIExUIFvhgJnhgL7hgKxdXCIsbGFzdERheTpcIlvhgJnhgJThgLEu4YCAXSBMVCBb4YCZ4YC+4YCsXVwiLGxhc3RXZWVrOlwiW+GAleGAvOGAruGAuOGAgeGAsuGAt+GAnuGAseGArF0gZGRkZCBMVCBb4YCZ4YC+4YCsXVwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIuGAnOGArOGAmeGAiuGAuuGAtyAlcyDhgJnhgL7hgKxcIixwYXN0Olwi4YCc4YC94YCU4YC64YCB4YCy4YC34YCe4YCx4YCsICVzIOGAgFwiLHM6XCLhgIXhgIDhgLnhgIDhgJThgLou4YCh4YCU4YCK4YC64YC44YCE4YCa4YC6XCIsbTpcIuGAkOGAheGAuuGAmeGAreGAlOGAheGAulwiLG1tOlwiJWQg4YCZ4YCt4YCU4YCF4YC6XCIsaDpcIuGAkOGAheGAuuGAlOGArOGAm+GArlwiLGhoOlwiJWQg4YCU4YCs4YCb4YCuXCIsZDpcIuGAkOGAheGAuuGAm+GAgOGAulwiLGRkOlwiJWQg4YCb4YCA4YC6XCIsTTpcIuGAkOGAheGAuuGAnFwiLE1NOlwiJWQg4YCcXCIseTpcIuGAkOGAheGAuuGAlOGAvuGAheGAulwiLHl5OlwiJWQg4YCU4YC+4YCF4YC6XCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1vhgYHhgYLhgYPhgYThgYXhgYbhgYfhgYjhgYnhgYBdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGFoW2FdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oYSl7cmV0dXJuIF9nW2FdfSl9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJuYlwiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuLl9mZWIuX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcInPDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInPDuC5fbWEuX3RpLl9vbi5fdG8uX2ZyLl9sw7guXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwic8O4X21hX3RpX29uX3RvX2ZyX2zDuFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbaSBkYWcga2wuXSBMVFwiLG5leHREYXk6XCJbaSBtb3JnZW4ga2wuXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBba2wuXSBMVFwiLGxhc3REYXk6XCJbaSBnw6VyIGtsLl0gTFRcIixsYXN0V2VlazpcIltmb3JyaWdlXSBkZGRkIFtrbC5dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib20gJXNcIixwYXN0OlwiJXMgc2lkZW5cIixzOlwibm9lbiBzZWt1bmRlclwiLG06XCJldHQgbWludXR0XCIsbW06XCIlZCBtaW51dHRlclwiLGg6XCJlbiB0aW1lXCIsaGg6XCIlZCB0aW1lclwiLGQ6XCJlbiBkYWdcIixkZDpcIiVkIGRhZ2VyXCIsTTpcImVuIG3DpW5lZFwiLE1NOlwiJWQgbcOlbmVkZXJcIix5OlwiZXR0IMOlclwiLHl5OlwiJWQgw6VyXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksezE6XCLgpadcIiwyOlwi4KWoXCIsMzpcIuClqVwiLDQ6XCLgpapcIiw1Olwi4KWrXCIsNjpcIuClrFwiLDc6XCLgpa1cIiw4Olwi4KWuXCIsOTpcIuClr1wiLDA6XCLgpaZcIn0pLGNoPXtcIuClp1wiOlwiMVwiLFwi4KWoXCI6XCIyXCIsXCLgpalcIjpcIjNcIixcIuClqlwiOlwiNFwiLFwi4KWrXCI6XCI1XCIsXCLgpaxcIjpcIjZcIixcIuClrVwiOlwiN1wiLFwi4KWuXCI6XCI4XCIsXCLgpa9cIjpcIjlcIixcIuClplwiOlwiMFwifSxkaD0oa2cuZGVmaW5lTG9jYWxlKFwibmVcIix7bW9udGhzOlwi4KSc4KSo4KS14KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/4KSyX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSIX+CkheCkl+Ckt+CljeCkn1/gpLjgpYfgpKrgpY3gpJ/gpYfgpK7gpY3gpKzgpLBf4KSF4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkreClh+CkruCljeCkrOCksF/gpKHgpL/gpLjgpYfgpK7gpY3gpKzgpLBcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLgpJzgpKguX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkvy5f4KSu4KSIX+CknOClgeCkqF/gpJzgpYHgpLLgpL7gpIguX+CkheCkly5f4KS44KWH4KSq4KWN4KSfLl/gpIXgpJXgpY3gpJ/gpYsuX+CkqOCli+CkreClhy5f4KSh4KS/4KS44KWHLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwi4KSG4KSH4KSk4KSs4KS+4KSwX+CkuOCli+CkruCkrOCkvuCksF/gpK7gpJngpY3gpJfgpLLgpKzgpL7gpLBf4KSs4KWB4KSn4KSs4KS+4KSwX+CkrOCkv+CkueCkv+CkrOCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpKzgpL7gpLBf4KS24KSo4KS/4KSs4KS+4KSwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLgpIbgpIfgpKQuX+CkuOCli+Ckri5f4KSu4KSZ4KWN4KSX4KSyLl/gpKzgpYHgpKcuX+CkrOCkv+CkueCkvy5f4KS24KWB4KSV4KWN4KSwLl/gpLbgpKjgpL8uXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi4KSGLl/gpLjgpYsuX+CkruCkgi5f4KSs4KWBLl/gpKzgpL8uX+CktuClgS5f4KS2LlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQeCkleCliyBoOm1tIOCkrOCknOClh1wiLExUUzpcIkHgpJXgpYsgaDptbTpzcyDgpKzgpJzgpYdcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClh1wiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClh1wifSxwcmVwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLGZ1bmN0aW9uKGEpe3JldHVybiBjaFthXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGEpe3JldHVybiBiaFthXX0pfSxtZXJpZGllbVBhcnNlOi/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwi4KSw4KS+4KSk4KS/XCI9PT1iPzQ+YT9hOmErMTI6XCLgpKzgpL/gpLngpL7gpKhcIj09PWI/YTpcIuCkpuCkv+CkieCkgeCkuOCli1wiPT09Yj9hPj0xMD9hOmErMTI6XCLgpLjgpL7gpIHgpJ1cIj09PWI/YSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMz5hP1wi4KSw4KS+4KSk4KS/XCI6MTI+YT9cIuCkrOCkv+CkueCkvuCkqFwiOjE2PmE/XCLgpKbgpL/gpIngpIHgpLjgpYtcIjoyMD5hP1wi4KS44KS+4KSB4KSdXCI6XCLgpLDgpL7gpKTgpL9cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb4KSG4KScXSBMVFwiLG5leHREYXk6XCJb4KSt4KWL4KSy4KS/XSBMVFwiLG5leHRXZWVrOlwiW+CkhuCkieCkgeCkpuCli10gZGRkZFssXSBMVFwiLGxhc3REYXk6XCJb4KS54KS/4KSc4KWLXSBMVFwiLGxhc3RXZWVrOlwiW+Ckl+Ckj+CkleCli10gZGRkZFssXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVz4KSu4KS+XCIscGFzdDpcIiVzIOCkheCkl+CkvuCkoeCkv1wiLHM6XCLgpJXgpYfgpLngpYAg4KSV4KWN4KS34KSjXCIsbTpcIuCkj+CklSDgpK7gpL/gpKjgpYfgpJ9cIixtbTpcIiVkIOCkruCkv+CkqOClh+Ckn1wiLGg6XCLgpI/gpJUg4KSY4KSj4KWN4KSf4KS+XCIsaGg6XCIlZCDgpJjgpKPgpY3gpJ/gpL5cIixkOlwi4KSP4KSVIOCkpuCkv+CkqFwiLGRkOlwiJWQg4KSm4KS/4KSoXCIsTTpcIuCkj+CklSDgpK7gpLngpL/gpKjgpL5cIixNTTpcIiVkIOCkruCkueCkv+CkqOCkvlwiLHk6XCLgpI/gpJUg4KSs4KSw4KWN4KS3XCIseXk6XCIlZCDgpKzgpLDgpY3gpLdcIn0sd2Vlazp7ZG93OjAsLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo2fX0pLFwiamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSksZWg9XCJqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKSxmaD0oa2cuZGVmaW5lTG9jYWxlKFwibmxcIix7bW9udGhzOlwiamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OmZ1bmN0aW9uKGEsYil7cmV0dXJuLy1NTU0tLy50ZXN0KGIpP2VoW2EubW9udGgoKV06ZGhbYS5tb250aCgpXX0sbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcInpvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInpvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlpvX01hX0RpX1dvX0RvX1ZyX1phXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELU1NLVlZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlt2YW5kYWFnIG9tXSBMVFwiLG5leHREYXk6XCJbbW9yZ2VuIG9tXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbb21dIExUXCIsbGFzdERheTpcIltnaXN0ZXJlbiBvbV0gTFRcIixsYXN0V2VlazpcIlthZmdlbG9wZW5dIGRkZGQgW29tXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm92ZXIgJXNcIixwYXN0OlwiJXMgZ2VsZWRlblwiLHM6XCJlZW4gcGFhciBzZWNvbmRlblwiLG06XCLDqcOpbiBtaW51dXRcIixtbTpcIiVkIG1pbnV0ZW5cIixoOlwiw6nDqW4gdXVyXCIsaGg6XCIlZCB1dXJcIixkOlwiw6nDqW4gZGFnXCIsZGQ6XCIlZCBkYWdlblwiLE06XCLDqcOpbiBtYWFuZFwiLE1NOlwiJWQgbWFhbmRlblwiLHk6XCLDqcOpbiBqYWFyXCIseXk6XCIlZCBqYWFyXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0oc3RlfGRlKS8sb3JkaW5hbDpmdW5jdGlvbihhKXtyZXR1cm4gYSsoMT09PWF8fDg9PT1hfHxhPj0yMD9cInN0ZVwiOlwiZGVcIil9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJublwiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzdW5kYWdfbcOlbmRhZ190eXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2xhdXJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInN1bl9tw6VuX3R5c19vbnNfdG9yX2ZyZV9sYXVcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzdV9tw6VfdHlfb25fdG9fZnJfbMO4XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSSBkYWcga2xva2thXSBMVFwiLG5leHREYXk6XCJbSSBtb3Jnb24ga2xva2thXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBba2xva2thXSBMVFwiLGxhc3REYXk6XCJbSSBnw6VyIGtsb2trYV0gTFRcIixsYXN0V2VlazpcIltGw7hyZWfDpWFuZGVdIGRkZGQgW2tsb2trYV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJvbSAlc1wiLHBhc3Q6XCIlcyBzaWRhblwiLHM6XCJub2tyZSBzZWt1bmRcIixtOlwiZWl0IG1pbnV0dFwiLG1tOlwiJWQgbWludXR0XCIsaDpcImVpbiB0aW1lXCIsaGg6XCIlZCB0aW1hclwiLGQ6XCJlaW4gZGFnXCIsZGQ6XCIlZCBkYWdhclwiLE06XCJlaW4gbcOlbmFkXCIsTU06XCIlZCBtw6VuYWRlclwiLHk6XCJlaXQgw6VyXCIseXk6XCIlZCDDpXJcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSx7MTpcIuCpp1wiLDI6XCLgqahcIiwzOlwi4KmpXCIsNDpcIuCpqlwiLDU6XCLgqatcIiw2Olwi4KmsXCIsNzpcIuCprVwiLDg6XCLgqa5cIiw5Olwi4KmvXCIsMDpcIuCpplwifSksZ2g9e1wi4KmnXCI6XCIxXCIsXCLgqahcIjpcIjJcIixcIuCpqVwiOlwiM1wiLFwi4KmqXCI6XCI0XCIsXCLgqatcIjpcIjVcIixcIuCprFwiOlwiNlwiLFwi4KmtXCI6XCI3XCIsXCLgqa5cIjpcIjhcIixcIuCpr1wiOlwiOVwiLFwi4KmmXCI6XCIwXCJ9LGhoPShrZy5kZWZpbmVMb2NhbGUoXCJwYS1pblwiLHtcclxuLy8gVGhlcmUgYXJlIG1vbnRocyBuYW1lIGFzIHBlciBOYW5ha3NoYWhpIENhbGVuZGVyIGJ1dCB0aGV5IGFyZSBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxyXG5tb250aHM6XCLgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIuConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwi4KiQ4Kik4Ki14Ki+4KiwX+CouOCpi+CoruCoteCovuCosF/gqK7gqbDgqJfgqLLgqLXgqL7gqLBf4Kis4KmB4Kin4Ki14Ki+4KiwX+CoteCpgOCosOCoteCovuCosF/gqLjgqLzgqYHgqbHgqJXgqLDgqLXgqL7gqLBf4Ki44Ki84Kio4KmA4Kia4Kiw4Ki14Ki+4KiwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYBcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQSBoOm1tIOCoteConOCph1wiLExUUzpcIkEgaDptbTpzcyDgqLXgqJzgqYdcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCph1wiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCph1wifSxjYWxlbmRhcjp7c2FtZURheTpcIlvgqIXgqJxdIExUXCIsbmV4dERheTpcIlvgqJXgqLJdIExUXCIsbmV4dFdlZWs6XCJkZGRkLCBMVFwiLGxhc3REYXk6XCJb4KiV4KiyXSBMVFwiLGxhc3RXZWVrOlwiW+CoquCov+Com+CosuCph10gZGRkZCwgTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyDgqLXgqL/gqbHgqJpcIixwYXN0OlwiJXMg4Kiq4Ki/4Kib4Kiy4KmHXCIsczpcIuColeCpgeConSDgqLjgqJXgqL/gqbDgqJ9cIixtOlwi4KiH4KiVIOCoruCov+CpsOCon1wiLG1tOlwiJWQg4Kiu4Ki/4Kmw4KifXCIsaDpcIuCoh+CpseColSDgqJjgqbDgqJ/gqL5cIixoaDpcIiVkIOComOCpsOCon+Cph1wiLGQ6XCLgqIfgqbHgqJUg4Kim4Ki/4KioXCIsZGQ6XCIlZCDgqKbgqL/gqKhcIixNOlwi4KiH4Kmx4KiVIOCoruCoueCpgOCoqOCovlwiLE1NOlwiJWQg4Kiu4Ki54KmA4Kio4KmHXCIseTpcIuCoh+CpseColSDgqLjgqL7gqLJcIix5eTpcIiVkIOCouOCovuCoslwifSxwcmVwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9b4Kmn4Kmo4Kmp4Kmq4Kmr4Kms4Kmt4Kmu4Kmv4KmmXS9nLGZ1bmN0aW9uKGEpe3JldHVybiBnaFthXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGEpe3JldHVybiBmaFthXX0pfSxcclxuLy8gUHVuamFiaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXHJcbi8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxyXG5tZXJpZGllbVBhcnNlOi/gqLDgqL7gqKR84Ki44Ki14KmH4KiwfOCopuCpgeCoquCoueCov+CosHzgqLjgqLzgqL7gqK4vLG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwi4Kiw4Ki+4KikXCI9PT1iPzQ+YT9hOmErMTI6XCLgqLjgqLXgqYfgqLBcIj09PWI/YTpcIuCopuCpgeCoquCoueCov+CosFwiPT09Yj9hPj0xMD9hOmErMTI6XCLgqLjgqLzgqL7gqK5cIj09PWI/YSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gND5hP1wi4Kiw4Ki+4KikXCI6MTA+YT9cIuCouOCoteCph+CosFwiOjE3PmE/XCLgqKbgqYHgqKrgqLngqL/gqLBcIjoyMD5hP1wi4Ki44Ki84Ki+4KiuXCI6XCLgqLDgqL7gqKRcIn0sd2Vlazp7ZG93OjAsLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo2fX0pLFwic3R5Y3plxYRfbHV0eV9tYXJ6ZWNfa3dpZWNpZcWEX21hal9jemVyd2llY19saXBpZWNfc2llcnBpZcWEX3dyemVzaWXFhF9wYcW6ZHppZXJuaWtfbGlzdG9wYWRfZ3J1ZHppZcWEXCIuc3BsaXQoXCJfXCIpKSxpaD1cInN0eWN6bmlhX2x1dGVnb19tYXJjYV9rd2lldG5pYV9tYWphX2N6ZXJ3Y2FfbGlwY2Ffc2llcnBuaWFfd3J6ZcWbbmlhX3Bhxbpkemllcm5pa2FfbGlzdG9wYWRhX2dydWRuaWFcIi5zcGxpdChcIl9cIiksamg9KGtnLmRlZmluZUxvY2FsZShcInBsXCIse21vbnRoczpmdW5jdGlvbihhLGIpe3JldHVyblwiXCI9PT1iP1wiKFwiK2loW2EubW9udGgoKV0rXCJ8XCIraGhbYS5tb250aCgpXStcIilcIjovRCBNTU1NLy50ZXN0KGIpP2loW2EubW9udGgoKV06aGhbYS5tb250aCgpXX0sbW9udGhzU2hvcnQ6XCJzdHlfbHV0X21hcl9rd2lfbWFqX2N6ZV9saXBfc2llX3dyel9wYcW6X2xpc19ncnVcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJuaWVkemllbGFfcG9uaWVkemlhxYJla193dG9yZWtfxZtyb2RhX2N6d2FydGVrX3BpxIV0ZWtfc29ib3RhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJuaWVfcG9uX3d0X8Wbcl9jendfcHRfc2JcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJOZF9Qbl9XdF/FmnJfQ3pfUHRfU29cIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0R6acWbIG9dIExUXCIsbmV4dERheTpcIltKdXRybyBvXSBMVFwiLG5leHRXZWVrOlwiW1ddIGRkZGQgW29dIExUXCIsbGFzdERheTpcIltXY3pvcmFqIG9dIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW1cgemVzesWCxIUgbmllZHppZWzEmSBvXSBMVFwiO2Nhc2UgMzpyZXR1cm5cIltXIHplc3rFgsSFIMWbcm9kxJkgb10gTFRcIjtjYXNlIDY6cmV0dXJuXCJbVyB6ZXN6xYLEhSBzb2JvdMSZIG9dIExUXCI7ZGVmYXVsdDpyZXR1cm5cIltXIHplc3rFgnldIGRkZGQgW29dIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJ6YSAlc1wiLHBhc3Q6XCIlcyB0ZW11XCIsczpcImtpbGthIHNla3VuZFwiLG06VmQsbW06VmQsaDpWZCxoaDpWZCxkOlwiMSBkemllxYRcIixkZDpcIiVkIGRuaVwiLE06XCJtaWVzacSFY1wiLE1NOlZkLHk6XCJyb2tcIix5eTpWZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJwdC1iclwiLHttb250aHM6XCJKYW5laXJvX0ZldmVyZWlyb19NYXLDp29fQWJyaWxfTWFpb19KdW5ob19KdWxob19BZ29zdG9fU2V0ZW1icm9fT3V0dWJyb19Ob3ZlbWJyb19EZXplbWJyb1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiRG9taW5nb19TZWd1bmRhLWZlaXJhX1RlcsOnYS1mZWlyYV9RdWFydGEtZmVpcmFfUXVpbnRhLWZlaXJhX1NleHRhLWZlaXJhX1PDoWJhZG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkRvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJEb21fMsKqXzPCql80wqpfNcKqXzbCql9Tw6FiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWVwiLExMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbVwiLExMTEw6XCJkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgW8Ogc10gSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSG9qZSDDoHNdIExUXCIsbmV4dERheTpcIltBbWFuaMOjIMOgc10gTFRcIixuZXh0V2VlazpcImRkZGQgW8Ogc10gTFRcIixsYXN0RGF5OlwiW09udGVtIMOgc10gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpey8vIFNhdHVyZGF5ICsgU3VuZGF5XHJcbnJldHVybiAwPT09dGhpcy5kYXkoKXx8Nj09PXRoaXMuZGF5KCk/XCJbw5psdGltb10gZGRkZCBbw6BzXSBMVFwiOlwiW8OabHRpbWFdIGRkZGQgW8Ogc10gTFRcIn0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiZW0gJXNcIixwYXN0OlwiJXMgYXRyw6FzXCIsczpcInBvdWNvcyBzZWd1bmRvc1wiLG06XCJ1bSBtaW51dG9cIixtbTpcIiVkIG1pbnV0b3NcIixoOlwidW1hIGhvcmFcIixoaDpcIiVkIGhvcmFzXCIsZDpcInVtIGRpYVwiLGRkOlwiJWQgZGlhc1wiLE06XCJ1bSBtw6pzXCIsTU06XCIlZCBtZXNlc1wiLHk6XCJ1bSBhbm9cIix5eTpcIiVkIGFub3NcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfcK6LyxvcmRpbmFsOlwiJWTCulwifSksa2cuZGVmaW5lTG9jYWxlKFwicHRcIix7bW9udGhzOlwiSmFuZWlyb19GZXZlcmVpcm9fTWFyw6dvX0FicmlsX01haW9fSnVuaG9fSnVsaG9fQWdvc3RvX1NldGVtYnJvX091dHVicm9fTm92ZW1icm9fRGV6ZW1icm9cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0RlelwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkRvbWluZ29fU2VndW5kYS1GZWlyYV9UZXLDp2EtRmVpcmFfUXVhcnRhLUZlaXJhX1F1aW50YS1GZWlyYV9TZXh0YS1GZWlyYV9Tw6FiYWRvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRG9tXzLCql8zwqpfNMKqXzXCql82wqpfU8OhYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIFtkZV0gTU1NTSBbZGVdIFlZWVlcIixMTEw6XCJEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hvamUgw6BzXSBMVFwiLG5leHREYXk6XCJbQW1hbmjDoyDDoHNdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFvDoHNdIExUXCIsbGFzdERheTpcIltPbnRlbSDDoHNdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXsvLyBTYXR1cmRheSArIFN1bmRheVxyXG5yZXR1cm4gMD09PXRoaXMuZGF5KCl8fDY9PT10aGlzLmRheSgpP1wiW8OabHRpbW9dIGRkZGQgW8Ogc10gTFRcIjpcIlvDmmx0aW1hXSBkZGRkIFvDoHNdIExUXCJ9LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImVtICVzXCIscGFzdDpcImjDoSAlc1wiLHM6XCJzZWd1bmRvc1wiLG06XCJ1bSBtaW51dG9cIixtbTpcIiVkIG1pbnV0b3NcIixoOlwidW1hIGhvcmFcIixoaDpcIiVkIGhvcmFzXCIsZDpcInVtIGRpYVwiLGRkOlwiJWQgZGlhc1wiLE06XCJ1bSBtw6pzXCIsTU06XCIlZCBtZXNlc1wiLHk6XCJ1bSBhbm9cIix5eTpcIiVkIGFub3NcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfcK6LyxvcmRpbmFsOlwiJWTCulwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJyb1wiLHttb250aHM6XCJpYW51YXJpZV9mZWJydWFyaWVfbWFydGllX2FwcmlsaWVfbWFpX2l1bmllX2l1bGllX2F1Z3VzdF9zZXB0ZW1icmllX29jdG9tYnJpZV9ub2llbWJyaWVfZGVjZW1icmllXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiaWFuLl9mZWJyLl9tYXJ0Ll9hcHIuX21haV9pdW4uX2l1bC5fYXVnLl9zZXB0Ll9vY3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiZHVtaW5pY8SDX2x1bmlfbWFyyJtpX21pZXJjdXJpX2pvaV92aW5lcmlfc8OibWLEg3TEg1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiRHVtX0x1bl9NYXJfTWllX0pvaV9WaW5fU8OibVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkR1X0x1X01hX01pX0pvX1ZpX1PDolwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlthemkgbGFdIExUXCIsbmV4dERheTpcIlttw6JpbmUgbGFdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtsYV0gTFRcIixsYXN0RGF5OlwiW2llcmkgbGFdIExUXCIsbGFzdFdlZWs6XCJbZm9zdGFdIGRkZGQgW2xhXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInBlc3RlICVzXCIscGFzdDpcIiVzIMOubiB1cm3Eg1wiLHM6XCJjw6J0ZXZhIHNlY3VuZGVcIixtOlwidW4gbWludXRcIixtbTpXZCxoOlwibyBvcsSDXCIsaGg6V2QsZDpcIm8gemlcIixkZDpXZCxNOlwibyBsdW7Eg1wiLE1NOldkLHk6XCJ1biBhblwiLHl5OldkfSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksWy9e0Y/QvdCyL2ksL17RhNC10LIvaSwvXtC80LDRgC9pLC9e0LDQv9GAL2ksL17QvNCwW9C50Y9dL2ksL17QuNGO0L0vaSwvXtC40Y7Quy9pLC9e0LDQstCzL2ksL17RgdC10L0vaSwvXtC+0LrRgi9pLC9e0L3QvtGPL2ksL17QtNC10LovaV0pLGtoPShrZy5kZWZpbmVMb2NhbGUoXCJydVwiLHttb250aHM6e2Zvcm1hdDpcItGP0L3QstCw0YDRj1/RhNC10LLRgNCw0LvRj1/QvNCw0YDRgtCwX9Cw0L/RgNC10LvRj1/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCz0YPRgdGC0LBf0YHQtdC90YLRj9Cx0YDRj1/QvtC60YLRj9Cx0YDRj1/QvdC+0Y/QsdGA0Y9f0LTQtdC60LDQsdGA0Y9cIi5zcGxpdChcIl9cIiksc3RhbmRhbG9uZTpcItGP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjFwiLnNwbGl0KFwiX1wiKX0sbW9udGhzU2hvcnQ6e1xyXG4vLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YMgP1xyXG5mb3JtYXQ6XCLRj9C90LIuX9GE0LXQstGALl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui5cIi5zcGxpdChcIl9cIiksc3RhbmRhbG9uZTpcItGP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui5cIi5zcGxpdChcIl9cIil9LHdlZWtkYXlzOntzdGFuZGFsb25lOlwi0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LBcIi5zcGxpdChcIl9cIiksZm9ybWF0Olwi0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00YNf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0YNf0YHRg9Cx0LHQvtGC0YNcIi5zcGxpdChcIl9cIiksaXNGb3JtYXQ6L1xcWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP1xcXSA/ZGRkZC99LHdlZWtkYXlzU2hvcnQ6XCLQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsVwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZTpqaCxsb25nTW9udGhzUGFyc2U6amgsc2hvcnRNb250aHNQYXJzZTpqaCxcclxuLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxyXG5tb250aHNSZWdleDovXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcclxuLy8g0LrQvtC/0LjRjyDQv9GA0LXQtNGL0LTRg9GJ0LXQs9C+XHJcbm1vbnRoc1Nob3J0UmVnZXg6L14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXHJcbi8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LhcclxubW9udGhzU3RyaWN0UmVnZXg6L14o0Y/QvdCy0LDRgFvRj9GMXXzRhNC10LLRgNCw0Ltb0Y/RjF180LzQsNGA0YLQsD980LDQv9GA0LXQu1vRj9GMXXzQvNCwW9GP0LldfNC40Y7QvVvRj9GMXXzQuNGO0Ltb0Y/RjF180LDQstCz0YPRgdGC0LA/fNGB0LXQvdGC0Y/QsdGAW9GP0YxdfNC+0LrRgtGP0LHRgFvRj9GMXXzQvdC+0Y/QsdGAW9GP0YxdfNC00LXQutCw0LHRgFvRj9GMXSkvaSxcclxuLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XHJcbm1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6L14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZINCzLlwiLExMTDpcIkQgTU1NTSBZWVlZINCzLiwgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvQodC10LPQvtC00L3RjyDQsl0gTFRcIixuZXh0RGF5OlwiW9CX0LDQstGC0YDQsCDQsl0gTFRcIixsYXN0RGF5OlwiW9CS0YfQtdGA0LAg0LJdIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oYSl7aWYoYS53ZWVrKCk9PT10aGlzLndlZWsoKSlyZXR1cm4gMj09PXRoaXMuZGF5KCk/XCJb0JLQvl0gZGRkZCBb0LJdIExUXCI6XCJb0JJdIGRkZGQgW9CyXSBMVFwiO3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJb0JIg0YHQu9C10LTRg9GO0YnQtdC1XSBkZGRkIFvQsl0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm5cIlvQkiDRgdC70LXQtNGD0Y7RidC40LldIGRkZGQgW9CyXSBMVFwiO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OnJldHVyblwiW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCBb0LJdIExUXCJ9fSxsYXN0V2VlazpmdW5jdGlvbihhKXtpZihhLndlZWsoKT09PXRoaXMud2VlaygpKXJldHVybiAyPT09dGhpcy5kYXkoKT9cIlvQktC+XSBkZGRkIFvQsl0gTFRcIjpcIlvQkl0gZGRkZCBb0LJdIExUXCI7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlvQkiDQv9GA0L7RiNC70L7QtV0gZGRkZCBb0LJdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuXCJb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQgW9CyXSBMVFwiO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OnJldHVyblwiW9CSINC/0YDQvtGI0LvRg9GOXSBkZGRkIFvQsl0gTFRcIn19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcItGH0LXRgNC10LcgJXNcIixwYXN0OlwiJXMg0L3QsNC30LDQtFwiLHM6XCLQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0XCIsbTpZZCxtbTpZZCxoOlwi0YfQsNGBXCIsaGg6WWQsZDpcItC00LXQvdGMXCIsZGQ6WWQsTTpcItC80LXRgdGP0YZcIixNTTpZZCx5Olwi0LPQvtC0XCIseXk6WWR9LG1lcmlkaWVtUGFyc2U6L9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxpc1BNOmZ1bmN0aW9uKGEpe3JldHVybi9eKNC00L3Rj3zQstC10YfQtdGA0LApJC8udGVzdChhKX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiA0PmE/XCLQvdC+0YfQuFwiOjEyPmE/XCLRg9GC0YDQsFwiOjE3PmE/XCLQtNC90Y9cIjpcItCy0LXRh9C10YDQsFwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LSjQuXzQs9C+fNGPKS8sb3JkaW5hbDpmdW5jdGlvbihhLGIpe3N3aXRjaChiKXtjYXNlXCJNXCI6Y2FzZVwiZFwiOmNhc2VcIkRERFwiOnJldHVybiBhK1wiLdC5XCI7Y2FzZVwiRFwiOnJldHVybiBhK1wiLdCz0L5cIjtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBhK1wiLdGPXCI7ZGVmYXVsdDpyZXR1cm4gYX19LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJzZVwiLHttb250aHM6XCJvxJHEkWFqYWdlbcOhbm51X2d1b3Z2YW3DoW5udV9uanVrxI1hbcOhbm51X2N1b8WLb23DoW5udV9taWVzc2Vtw6FubnVfZ2Vhc3NlbcOhbm51X3N1b2lkbmVtw6FubnVfYm9yZ2Vtw6FubnVfxI1ha8SNYW3DoW5udV9nb2xnZ290bcOhbm51X3Nrw6FibWFtw6FubnVfanVvdmxhbcOhbm51XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwib8SRxJFqX2d1b3Zfbmp1a19jdW9fbWllc19nZWFzX3N1b2lfYm9yZ1/EjWFrxI1fZ29sZ19za8OhYl9qdW92XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwic290bmFiZWFpdmlfdnVvc3PDoXJnYV9tYcWLxYtlYsOhcmdhX2dhc2thdmFoa2t1X2R1b3Jhc3RhdF9iZWFyamFkYXRfbMOhdnZhcmRhdFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwic290bl92dW9zX21hxYtfZ2Fza19kdW9yX2JlYXJfbMOhdlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInNfdl9tX2dfZF9iX0xcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJNTU1NIEQuIFtiLl0gWVlZWVwiLExMTDpcIk1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tXCIsTExMTDpcImRkZGQsIE1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW290bmUgdGldIExUXCIsbmV4dERheTpcIltpaHR0aW4gdGldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFt0aV0gTFRcIixsYXN0RGF5OlwiW2lrdGUgdGldIExUXCIsbGFzdFdlZWs6XCJbb3ZkZGl0XSBkZGRkIFt0aV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBnZWHFvmVzXCIscGFzdDpcIm1hxYtpdCAlc1wiLHM6XCJtb2FkZGUgc2VrdW5kZGF0XCIsbTpcIm9rdGEgbWludWh0YVwiLG1tOlwiJWQgbWludWh0YXRcIixoOlwib2t0YSBkaWltbXVcIixoaDpcIiVkIGRpaW1tdXRcIixkOlwib2t0YSBiZWFpdmlcIixkZDpcIiVkIGJlYWl2dml0XCIsTTpcIm9rdGEgbcOhbm51XCIsTU06XCIlZCBtw6FudXRcIix5Olwib2t0YSBqYWhraVwiLHl5OlwiJWQgamFnaXRcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJzaVwiLHttb250aHM6XCLgtqLgtrHgt4Dgt4/gtrvgt5Jf4La04LeZ4La24La74LeA4LeP4La74LeSX+C2uOC3j+C2u+C3iuC2reC3lF/gtoXgtrTgt4rigI3gtrvgt5rgtr3gt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4Led4LeD4LeK4Lat4LeUX+C3g+C3kOC2tOC3iuC2reC3kOC2uOC3iuC2tuC2u+C3il/gtpTgtprgt4rgtq3gt53gtrbgtrvgt4pf4Lax4Lec4LeA4LeQ4La44LeK4La24La74LeKX+C2r+C3meC3g+C3kOC2uOC3iuC2tuC2u+C3ilwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIuC2ouC2sV/gtrTgt5ngtrZf4La44LeP4La74LeKX+C2heC2tOC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt51f4LeD4LeQ4La04LeKX+C2lOC2muC3il/gtrHgt5zgt4Dgt5Bf4Lav4LeZ4LeD4LeQXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwi4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLgtongtrvgt5Jf4LeD4Laz4LeUX+C2heC2n1/gtrbgtq/gt49f4La24LeK4oCN4La74LeEX+C3g+C3kuC2muC3lF/gt4Pgt5ngtrFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCLgtolf4LeDX+C2hV/gtrZf4La24LeK4oCN4La7X+C3g+C3kl/gt4Pgt5lcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcImEgaDptbVwiLExUUzpcImEgaDptbTpzc1wiLEw6XCJZWVlZL01NL0REXCIsTEw6XCJZWVlZIE1NTU0gRFwiLExMTDpcIllZWVkgTU1NTSBELCBhIGg6bW1cIixMTExMOlwiWVlZWSBNTU1NIEQgW+C3gOC3kOC2seC3kl0gZGRkZCwgYSBoOm1tOnNzXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW+C2heC2r10gTFRb4LanXVwiLG5leHREYXk6XCJb4LeE4LeZ4LanXSBMVFvgtqddXCIsbmV4dFdlZWs6XCJkZGRkIExUW+C2p11cIixsYXN0RGF5OlwiW+C2iuC2uuC3ml0gTFRb4LanXVwiLGxhc3RXZWVrOlwiW+C2tOC3g+C3lOC2nOC3kuC2ul0gZGRkZCBMVFvgtqddXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXPgtprgt5LgtrHgt4pcIixwYXN0OlwiJXPgtprgtqcg4La04LeZ4La7XCIsczpcIuC2reC2reC3iuC2tOC2uyDgtprgt5Lgt4Tgt5LgtrTgtrpcIixtOlwi4La44LeS4Lax4LeS4Lat4LeK4Lat4LeU4LeAXCIsbW06XCLgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5QgJWRcIixoOlwi4La04LeQ4La6XCIsaGg6XCLgtrTgt5DgtrogJWRcIixkOlwi4Lav4LeS4Lax4La6XCIsZGQ6XCLgtq/gt5LgtrEgJWRcIixNOlwi4La44LeP4LeD4La6XCIsTU06XCLgtrjgt4/gt4MgJWRcIix5Olwi4LeA4LeD4La7XCIseXk6XCLgt4Dgt4PgtrsgJWRcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGErXCIg4LeA4LeQ4Lax4LeSXCJ9LG1lcmlkaWVtUGFyc2U6L+C2tOC3meC2uyDgt4Dgtrvgt5R84La04LeD4LeKIOC3gOC2u+C3lHzgtrTgt5ku4LeAfOC2tC7gt4AuLyxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwi4La0LuC3gC5cIj09PWF8fFwi4La04LeD4LeKIOC3gOC2u+C3lFwiPT09YX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhPjExP2M/XCLgtrQu4LeALlwiOlwi4La04LeD4LeKIOC3gOC2u+C3lFwiOmM/XCLgtrTgt5ku4LeALlwiOlwi4La04LeZ4La7IOC3gOC2u+C3lFwifX0pLFwiamFudcOhcl9mZWJydcOhcl9tYXJlY19hcHLDrWxfbcOhal9qw7puX2rDumxfYXVndXN0X3NlcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlclwiLnNwbGl0KFwiX1wiKSksbGg9XCJqYW5fZmViX21hcl9hcHJfbcOhal9qw7puX2rDumxfYXVnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKSxtaD0oa2cuZGVmaW5lTG9jYWxlKFwic2tcIix7bW9udGhzOmtoLG1vbnRoc1Nob3J0OmxoLHdlZWtkYXlzOlwibmVkZcS+YV9wb25kZWxva191dG9yb2tfc3RyZWRhX8WhdHZydG9rX3BpYXRva19zb2JvdGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIm5lX3BvX3V0X3N0X8WhdF9waV9zb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIm5lX3BvX3V0X3N0X8WhdF9waV9zb1wiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkIEQuIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2RuZXMgb10gTFRcIixuZXh0RGF5OlwiW3phanRyYSBvXSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlt2IG5lZGXEvnUgb10gTFRcIjtjYXNlIDE6Y2FzZSAyOnJldHVyblwiW3ZdIGRkZGQgW29dIExUXCI7Y2FzZSAzOnJldHVyblwiW3Ygc3RyZWR1IG9dIExUXCI7Y2FzZSA0OnJldHVyblwiW3ZvIMWhdHZydG9rIG9dIExUXCI7Y2FzZSA1OnJldHVyblwiW3YgcGlhdG9rIG9dIExUXCI7Y2FzZSA2OnJldHVyblwiW3Ygc29ib3R1IG9dIExUXCJ9fSxsYXN0RGF5OlwiW3bEjWVyYSBvXSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlttaW51bMO6IG5lZGXEvnUgb10gTFRcIjtjYXNlIDE6Y2FzZSAyOnJldHVyblwiW21pbnVsw71dIGRkZGQgW29dIExUXCI7Y2FzZSAzOnJldHVyblwiW21pbnVsw7ogc3RyZWR1IG9dIExUXCI7Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlttaW51bMO9XSBkZGRkIFtvXSBMVFwiO2Nhc2UgNjpyZXR1cm5cIlttaW51bMO6IHNvYm90dSBvXSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiemEgJXNcIixwYXN0OlwicHJlZCAlc1wiLHM6JGQsbTokZCxtbTokZCxoOiRkLGhoOiRkLGQ6JGQsZGQ6JGQsTTokZCxNTTokZCx5OiRkLHl5OiRkfSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo0fX0pLGtnLmRlZmluZUxvY2FsZShcInNsXCIse21vbnRoczpcImphbnVhcl9mZWJydWFyX21hcmVjX2FwcmlsX21hal9qdW5pal9qdWxpal9hdmd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwibmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmVkLl9wb24uX3Rvci5fc3JlLl/EjWV0Ll9wZXQuX3NvYi5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJuZV9wb190b19zcl/EjWVfcGVfc29cIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELiBNTS4gWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbZGFuZXMgb2JdIExUXCIsbmV4dERheTpcIltqdXRyaSBvYl0gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbdl0gW25lZGVsam9dIFtvYl0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbdl0gW3NyZWRvXSBbb2JdIExUXCI7Y2FzZSA2OnJldHVyblwiW3ZdIFtzb2JvdG9dIFtvYl0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbdl0gZGRkZCBbb2JdIExUXCJ9fSxsYXN0RGF5OlwiW3bEjWVyYWogb2JdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3ByZWrFoW5qb10gW25lZGVsam9dIFtvYl0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbcHJlasWhbmpvXSBbc3JlZG9dIFtvYl0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbcHJlasWhbmpvXSBbc29ib3RvXSBbb2JdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3ByZWrFoW5qaV0gZGRkZCBbb2JdIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLEjWV6ICVzXCIscGFzdDpcInByZWQgJXNcIixzOl9kLG06X2QsbW06X2QsaDpfZCxoaDpfZCxkOl9kLGRkOl9kLE06X2QsTU06X2QseTpfZCx5eTpfZH0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJzcVwiLHttb250aHM6XCJKYW5hcl9TaGt1cnRfTWFyc19QcmlsbF9NYWpfUWVyc2hvcl9Lb3JyaWtfR3VzaHRfU2h0YXRvcl9UZXRvcl9Ow6tudG9yX0RoamV0b3JcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fU2hrX01hcl9QcmlfTWFqX1Flcl9Lb3JfR3VzX1NodF9UZXRfTsOrbl9EaGpcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6tcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkRpZV9Iw6tuX01hcl9Nw6tyX0Vual9QcmVfU2h0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRF9IX01hX03Dq19FX1BfU2hcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLG1lcmlkaWVtUGFyc2U6L1BEfE1ELyxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwiTVwiPT09YS5jaGFyQXQoMCl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMTI+YT9cIlBEXCI6XCJNRFwifSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbU290IG7Dq10gTFRcIixuZXh0RGF5OlwiW05lc8OrciBuw6tdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtuw6tdIExUXCIsbGFzdERheTpcIltEamUgbsOrXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbZSBrYWx1YXIgbsOrXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm7DqyAlc1wiLHBhc3Q6XCIlcyBtw6sgcGFyw6tcIixzOlwiZGlzYSBzZWtvbmRhXCIsbTpcIm5qw6sgbWludXTDq1wiLG1tOlwiJWQgbWludXRhXCIsaDpcIm5qw6sgb3LDq1wiLGhoOlwiJWQgb3LDq1wiLGQ6XCJuasOrIGRpdMOrXCIsZGQ6XCIlZCBkaXTDq1wiLE06XCJuasOrIG11YWpcIixNTTpcIiVkIG11YWpcIix5OlwibmrDqyB2aXRcIix5eTpcIiVkIHZpdGVcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSx7d29yZHM6ey8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXHJcbm06W1wi0ZjQtdC00LDQvSDQvNC40L3Rg9GCXCIsXCLRmNC10LTQvdC1INC80LjQvdGD0YLQtVwiXSxtbTpbXCLQvNC40L3Rg9GCXCIsXCLQvNC40L3Rg9GC0LVcIixcItC80LjQvdGD0YLQsFwiXSxoOltcItGY0LXQtNCw0L0g0YHQsNGCXCIsXCLRmNC10LTQvdC+0LMg0YHQsNGC0LBcIl0saGg6W1wi0YHQsNGCXCIsXCLRgdCw0YLQsFwiLFwi0YHQsNGC0LhcIl0sZGQ6W1wi0LTQsNC9XCIsXCLQtNCw0L3QsFwiLFwi0LTQsNC90LBcIl0sTU06W1wi0LzQtdGB0LXRhlwiLFwi0LzQtdGB0LXRhtCwXCIsXCLQvNC10YHQtdGG0LhcIl0seXk6W1wi0LPQvtC00LjQvdCwXCIsXCLQs9C+0LTQuNC90LVcIixcItCz0L7QtNC40L3QsFwiXX0sY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTpmdW5jdGlvbihhLGIpe3JldHVybiAxPT09YT9iWzBdOmE+PTImJjQ+PWE/YlsxXTpiWzJdfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW1oLndvcmRzW2NdO3JldHVybiAxPT09Yy5sZW5ndGg/Yj9kWzBdOmRbMV06YStcIiBcIittaC5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKGEsZCl9fSksbmg9KGtnLmRlZmluZUxvY2FsZShcInNyLWN5cmxcIix7bW9udGhzOlwi0ZjQsNC90YPQsNGAX9GE0LXQsdGA0YPQsNGAX9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCx0LDRgF/QvtC60YLQvtCx0LDRgF/QvdC+0LLQtdC80LHQsNGAX9C00LXRhtC10LzQsdCw0YBcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLRmNCw0L0uX9GE0LXQsS5f0LzQsNGALl/QsNC/0YAuX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQsy5f0YHQtdC/Ll/QvtC60YIuX9C90L7Qsi5f0LTQtdGGLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwi0L3QtdC00LXRmdCwX9C/0L7QvdC10LTQtdGZ0LDQul/Rg9GC0L7RgNCw0Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQsNC6X9C/0LXRgtCw0Lpf0YHRg9Cx0L7RgtCwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCLQvdC10LQuX9C/0L7QvS5f0YPRgtC+Ll/RgdGA0LUuX9GH0LXRgi5f0L/QtdGCLl/RgdGD0LEuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi0L3QtV/Qv9C+X9GD0YJf0YHRgF/Rh9C1X9C/0LVf0YHRg1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuIE1NLiBZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvQtNCw0L3QsNGBINGDXSBMVFwiLG5leHREYXk6XCJb0YHRg9GC0YDQsCDRg10gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJb0YNdIFvQvdC10LTQtdGZ0YNdIFvRg10gTFRcIjtjYXNlIDM6cmV0dXJuXCJb0YNdIFvRgdGA0LXQtNGDXSBb0YNdIExUXCI7Y2FzZSA2OnJldHVyblwiW9GDXSBb0YHRg9Cx0L7RgtGDXSBb0YNdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW9GDXSBkZGRkIFvRg10gTFRcIn19LGxhc3REYXk6XCJb0ZjRg9GH0LUg0YNdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXt2YXIgYT1bXCJb0L/RgNC+0YjQu9C1XSBb0L3QtdC00LXRmdC1XSBb0YNdIExUXCIsXCJb0L/RgNC+0YjQu9C+0LNdIFvQv9C+0L3QtdC00LXRmdC60LBdIFvRg10gTFRcIixcIlvQv9GA0L7RiNC70L7Qs10gW9GD0YLQvtGA0LrQsF0gW9GDXSBMVFwiLFwiW9C/0YDQvtGI0LvQtV0gW9GB0YDQtdC00LVdIFvRg10gTFRcIixcIlvQv9GA0L7RiNC70L7Qs10gW9GH0LXRgtCy0YDRgtC60LBdIFvRg10gTFRcIixcIlvQv9GA0L7RiNC70L7Qs10gW9C/0LXRgtC60LBdIFvRg10gTFRcIixcIlvQv9GA0L7RiNC70LVdIFvRgdGD0LHQvtGC0LVdIFvRg10gTFRcIl07cmV0dXJuIGFbdGhpcy5kYXkoKV19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcItC30LAgJXNcIixwYXN0Olwi0L/RgNC1ICVzXCIsczpcItC90LXQutC+0LvQuNC60L4g0YHQtdC60YPQvdC00LhcIixtOm1oLnRyYW5zbGF0ZSxtbTptaC50cmFuc2xhdGUsaDptaC50cmFuc2xhdGUsaGg6bWgudHJhbnNsYXRlLGQ6XCLQtNCw0L1cIixkZDptaC50cmFuc2xhdGUsTTpcItC80LXRgdC10YZcIixNTTptaC50cmFuc2xhdGUseTpcItCz0L7QtNC40L3Rg1wiLHl5Om1oLnRyYW5zbGF0ZX0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSx7d29yZHM6ey8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXHJcbm06W1wiamVkYW4gbWludXRcIixcImplZG5lIG1pbnV0ZVwiXSxtbTpbXCJtaW51dFwiLFwibWludXRlXCIsXCJtaW51dGFcIl0saDpbXCJqZWRhbiBzYXRcIixcImplZG5vZyBzYXRhXCJdLGhoOltcInNhdFwiLFwic2F0YVwiLFwic2F0aVwiXSxkZDpbXCJkYW5cIixcImRhbmFcIixcImRhbmFcIl0sTU06W1wibWVzZWNcIixcIm1lc2VjYVwiLFwibWVzZWNpXCJdLHl5OltcImdvZGluYVwiLFwiZ29kaW5lXCIsXCJnb2RpbmFcIl19LGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMT09PWE/YlswXTphPj0yJiY0Pj1hP2JbMV06YlsyXX0sdHJhbnNsYXRlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uaC53b3Jkc1tjXTtyZXR1cm4gMT09PWMubGVuZ3RoP2I/ZFswXTpkWzFdOmErXCIgXCIrbmguY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShhLGQpfX0pLG9oPShrZy5kZWZpbmVMb2NhbGUoXCJzclwiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5fanVsX2F2Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbi5fZmViLl9tYXIuX2Fwci5fbWFqX2p1bl9qdWxfYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJuZWRlbGphX3BvbmVkZWxqYWtfdXRvcmFrX3NyZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIm5lZC5fcG9uLl91dG8uX3NyZS5fxI1ldC5fcGV0Ll9zdWIuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwibmVfcG9fdXRfc3JfxI1lX3BlX3N1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC4gTU0uIFlZWVlcIixMTDpcIkQuIE1NTU0gWVlZWVwiLExMTDpcIkQuIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQuIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2RhbmFzIHVdIExUXCIsbmV4dERheTpcIltzdXRyYSB1XSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlt1XSBbbmVkZWxqdV0gW3VdIExUXCI7Y2FzZSAzOnJldHVyblwiW3VdIFtzcmVkdV0gW3VdIExUXCI7Y2FzZSA2OnJldHVyblwiW3VdIFtzdWJvdHVdIFt1XSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlt1XSBkZGRkIFt1XSBMVFwifX0sbGFzdERheTpcIltqdcSNZSB1XSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7dmFyIGE9W1wiW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFRcIixcIltwcm/FoWxvZ10gW3BvbmVkZWxqa2FdIFt1XSBMVFwiLFwiW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFRcIixcIltwcm/FoWxlXSBbc3JlZGVdIFt1XSBMVFwiLFwiW3Byb8WhbG9nXSBbxI1ldHZydGthXSBbdV0gTFRcIixcIltwcm/FoWxvZ10gW3BldGthXSBbdV0gTFRcIixcIltwcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFRcIl07cmV0dXJuIGFbdGhpcy5kYXkoKV19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInphICVzXCIscGFzdDpcInByZSAlc1wiLHM6XCJuZWtvbGlrbyBzZWt1bmRpXCIsbTpuaC50cmFuc2xhdGUsbW06bmgudHJhbnNsYXRlLGg6bmgudHJhbnNsYXRlLGhoOm5oLnRyYW5zbGF0ZSxkOlwiZGFuXCIsZGQ6bmgudHJhbnNsYXRlLE06XCJtZXNlY1wiLE1NOm5oLnRyYW5zbGF0ZSx5OlwiZ29kaW51XCIseXk6bmgudHJhbnNsYXRlfSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLGtnLmRlZmluZUxvY2FsZShcInNzXCIse21vbnRoczpcIkJoaW1iaWR2d2FuZV9JbmRsb3ZhbmFfSW5kbG92J2xlbmtodWx1X01hYmFzYV9Jbmtod2VraHdldGlfSW5obGFiYV9LaG9sd2FuZV9JbmdjaV9JbnlvbmlfSW1waGFsYV9Md2V0aV9JbmdvbmdvbmlcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJCaGlfSW5hX0ludV9NYWJfSW5rX0luaF9LaG9fSWdjX0lueV9JbXBfTHdlX0lnb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkxpc29udGZvX1Vtc29tYnVsdWtvX0xlc2liaWxpX0xlc2l0c2F0ZnVfTGVzaW5lX0xlc2lobGFudV9VbWdjaWJlbG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkxpc19VbWJfTHNiX0xlc19Mc2lfTHNoX1VtZ1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkxpX1VzX0xiX0x0X0xzX0xoX1VnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJoOm1tIEFcIixMVFM6XCJoOm1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW05hbXVobGEgbmdhXSBMVFwiLG5leHREYXk6XCJbS3VzYXNhIG5nYV0gTFRcIixuZXh0V2VlazpcImRkZGQgW25nYV0gTFRcIixsYXN0RGF5OlwiW0l0b2xvIG5nYV0gTFRcIixsYXN0V2VlazpcImRkZGQgW2xlbGlwaGVsaWxlXSBbbmdhXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm5nYSAlc1wiLHBhc3Q6XCJ3ZW50ZWthIG5nYSAlc1wiLHM6XCJlbWl6dXp3YW5hIGxvbWNhbmVcIixtOlwidW16dXp1XCIsbW06XCIlZCBlbWl6dXp1XCIsaDpcImxpaG9yYVwiLGhoOlwiJWQgZW1haG9yYVwiLGQ6XCJsaWxhbmdhXCIsZGQ6XCIlZCBlbWFsYW5nYVwiLE06XCJpbnlhbmdhXCIsTU06XCIlZCB0aW55YW5nYVwiLHk6XCJ1bW55YWthXCIseXk6XCIlZCBpbWlueWFrYVwifSxtZXJpZGllbVBhcnNlOi9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxMT5hP1wiZWt1c2VuaVwiOjE1PmE/XCJlbWluaVwiOjE5PmE/XCJlbnRzYW1iYW1hXCI6XCJlYnVzdWt1XCJ9LG1lcmlkaWVtSG91cjpmdW5jdGlvbihhLGIpe3JldHVybiAxMj09PWEmJihhPTApLFwiZWt1c2VuaVwiPT09Yj9hOlwiZW1pbmlcIj09PWI/YT49MTE/YTphKzEyOlwiZW50c2FtYmFtYVwiPT09Ynx8XCJlYnVzdWt1XCI9PT1iPzA9PT1hPzA6YSsxMjp2b2lkIDB9LG9yZGluYWxQYXJzZTovXFxkezEsMn0vLG9yZGluYWw6XCIlZFwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJzdlwiLHttb250aHM6XCJqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzw7ZuZGFnX23DpW5kYWdfdGlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7ZyZGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzw7ZfbcOlX3RpX29uX3RvX2ZyX2zDtlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIllZWVktTU0tRERcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBba2wuXSBISDptbVwiLGxsbDpcIkQgTU1NIFlZWVkgSEg6bW1cIixsbGxsOlwiZGRkIEQgTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSWRhZ10gTFRcIixuZXh0RGF5OlwiW0ltb3Jnb25dIExUXCIsbGFzdERheTpcIltJZ8Olcl0gTFRcIixuZXh0V2VlazpcIltQw6VdIGRkZGQgTFRcIixsYXN0V2VlazpcIltJXSBkZGRkW3NdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib20gJXNcIixwYXN0OlwiZsO2ciAlcyBzZWRhblwiLHM6XCJuw6VncmEgc2VrdW5kZXJcIixtOlwiZW4gbWludXRcIixtbTpcIiVkIG1pbnV0ZXJcIixoOlwiZW4gdGltbWVcIixoaDpcIiVkIHRpbW1hclwiLGQ6XCJlbiBkYWdcIixkZDpcIiVkIGRhZ2FyXCIsTTpcImVuIG3DpW5hZFwiLE1NOlwiJWQgbcOlbmFkZXJcIix5OlwiZXR0IMOlclwiLHl5OlwiJWQgw6VyXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0oZXxhKS8sb3JkaW5hbDpmdW5jdGlvbihhKXt2YXIgYj1hJTEwLGM9MT09PX5+KGElMTAwLzEwKT9cImVcIjoxPT09Yj9cImFcIjoyPT09Yj9cImFcIjpcImVcIjtyZXR1cm4gYStjfSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwic3dcIix7bW9udGhzOlwiSmFudWFyaV9GZWJydWFyaV9NYWNoaV9BcHJpbGlfTWVpX0p1bmlfSnVsYWlfQWdvc3RpX1NlcHRlbWJhX09rdG9iYV9Ob3ZlbWJhX0Rlc2VtYmFcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfQWdvX1NlcF9Pa3RfTm92X0Rlc1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkp1bWFwaWxpX0p1bWF0YXR1X0p1bWFubmVfSnVtYXRhbm9fQWxoYW1pc2lfSWp1bWFhX0p1bWFtb3NpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJKcGxfSnRhdF9Kbm5lX0p0YW5fQWxoX0lqbV9KbW9zXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiSjJfSjNfSjRfSjVfQWxfSWpfSjFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltsZW8gc2FhXSBMVFwiLG5leHREYXk6XCJba2VzaG8gc2FhXSBMVFwiLG5leHRXZWVrOlwiW3dpa2kgaWpheW9dIGRkZGQgW3NhYXRdIExUXCIsbGFzdERheTpcIltqYW5hXSBMVFwiLGxhc3RXZWVrOlwiW3dpa2kgaWxpeW9waXRhXSBkZGRkIFtzYWF0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIGJhYWRheWVcIixwYXN0OlwidG9rZWEgJXNcIixzOlwiaGl2aSBwdW5kZVwiLG06XCJkYWtpa2EgbW9qYVwiLG1tOlwiZGFraWthICVkXCIsaDpcInNhYSBsaW1vamFcIixoaDpcIm1hc2FhICVkXCIsZDpcInNpa3UgbW9qYVwiLGRkOlwibWFzaWt1ICVkXCIsTTpcIm13ZXppIG1tb2phXCIsTU06XCJtaWV6aSAlZFwiLHk6XCJtd2FrYSBtbW9qYVwiLHl5OlwibWlha2EgJWRcIn0sd2Vlazp7ZG93OjEsLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveTo3fX0pLHsxOlwi4K+nXCIsMjpcIuCvqFwiLDM6XCLgr6lcIiw0Olwi4K+qXCIsNTpcIuCvq1wiLDY6XCLgr6xcIiw3Olwi4K+tXCIsODpcIuCvrlwiLDk6XCLgr69cIiwwOlwi4K+mXCJ9KSxwaD17XCLgr6dcIjpcIjFcIixcIuCvqFwiOlwiMlwiLFwi4K+pXCI6XCIzXCIsXCLgr6pcIjpcIjRcIixcIuCvq1wiOlwiNVwiLFwi4K+sXCI6XCI2XCIsXCLgr61cIjpcIjdcIixcIuCvrlwiOlwiOFwiLFwi4K+vXCI6XCI5XCIsXCLgr6ZcIjpcIjBcIn0scWg9KGtnLmRlZmluZUxvY2FsZShcInRhXCIse21vbnRoczpcIuCunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi4K6c4K6p4K614K6w4K6/X+CuquCuv+CuquCvjeCusOCuteCusOCuv1/grq7grr7grrDgr43grprgr41f4K6P4K6q4K+N4K6w4K6y4K+NX+CuruCvh1/grpzgr4Lgrqngr41f4K6c4K+C4K6y4K+IX+CuhuCuleCuuOCvjeCun+CvjV/grprgr4bgrqrgr43grp/gr4bgrq7gr43grqrgrrDgr41f4K6F4K6V4K+N4K6f4K+H4K6+4K6q4K6w4K+NX+CuqOCuteCuruCvjeCuquCusOCvjV/grp/grr/grprgrq7gr43grqrgrrDgr41cIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLgrp7grr7grq/grr/grrHgr43grrHgr4HgrpXgr43grpXgrr/grrTgrq7gr4hf4K6k4K6/4K6Z4K+N4K6V4K6f4K+N4K6V4K6/4K604K6u4K+IX+CumuCvhuCuteCvjeCuteCuvuCur+CvjeCuleCuv+CutOCuruCviF/grqrgr4HgrqTgrqngr43grpXgrr/grrTgrq7gr4hf4K614K6/4K6v4K6+4K604K6V4K+N4K6V4K6/4K604K6u4K+IX+CuteCvhuCus+CvjeCus+Cuv+CuleCvjeCuleCuv+CutOCuruCviF/grprgrqngrr/grpXgr43grpXgrr/grrTgrq7gr4hcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuCunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuv1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuCunuCuvl/grqTgrr9f4K6a4K+GX+CuquCvgV/grrXgrr9f4K614K+GX+CumlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvgrofgrqngr43grrHgr4FdIExUXCIsbmV4dERheTpcIlvgrqjgrr7grrPgr4hdIExUXCIsbmV4dFdlZWs6XCJkZGRkLCBMVFwiLGxhc3REYXk6XCJb4K6o4K+H4K6x4K+N4K6x4K+BXSBMVFwiLGxhc3RXZWVrOlwiW+CuleCun+CuqOCvjeCupCDgrrXgrr7grrDgrq7gr41dIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMg4K6H4K6y4K+NXCIscGFzdDpcIiVzIOCuruCvgeCuqeCvjVwiLHM6XCLgrpLgrrDgr4Eg4K6a4K6/4K6yIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjVwiLG06XCLgrpLgrrDgr4Eg4K6o4K6/4K6u4K6/4K6f4K6u4K+NXCIsbW06XCIlZCDgrqjgrr/grq7grr/grp/grpngr43grpXgrrPgr41cIixoOlwi4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr41cIixoaDpcIiVkIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr41cIixkOlwi4K6S4K6w4K+BIOCuqOCuvuCus+CvjVwiLGRkOlwiJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NXCIsTTpcIuCukuCusOCvgSDgrq7grr7grqTgrq7gr41cIixNTTpcIiVkIOCuruCuvuCupOCumeCvjeCuleCus+CvjVwiLHk6XCLgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NXCIseXk6XCIlZCDgrobgrqPgr43grp/gr4HgrpXgrrPgr41cIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfeCuteCupOCvgS8sb3JkaW5hbDpmdW5jdGlvbihhKXtyZXR1cm4gYStcIuCuteCupOCvgVwifSxwcmVwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9b4K+n4K+o4K+p4K+q4K+r4K+s4K+t4K+u4K+v4K+mXS9nLGZ1bmN0aW9uKGEpe3JldHVybiBwaFthXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGEpe3JldHVybiBvaFthXX0pfSxcclxuLy8gcmVmZXIgaHR0cDovL3RhLndpa2lwZWRpYS5vcmcvcy8xZXIxXHJcbm1lcmlkaWVtUGFyc2U6L+Cur+CuvuCuruCuruCvjXzgrrXgr4jgrpXgrrHgr4h84K6V4K6+4K6y4K+IfOCuqOCuo+CvjeCuquCuleCusuCvjXzgro7grrHgr43grqrgrr7grp/gr4F84K6u4K6+4K6y4K+ILyxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDI+YT9cIiDgrq/grr7grq7grq7gr41cIjo2PmE/XCIg4K614K+I4K6V4K6x4K+IXCI6MTA+YT9cIiDgrpXgrr7grrLgr4hcIjoxND5hP1wiIOCuqOCuo+CvjeCuquCuleCusuCvjVwiOjE4PmE/XCIg4K6O4K6x4K+N4K6q4K6+4K6f4K+BXCI6MjI+YT9cIiDgrq7grr7grrLgr4hcIjpcIiDgrq/grr7grq7grq7gr41cIn0sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEyPT09YSYmKGE9MCksXCLgrq/grr7grq7grq7gr41cIj09PWI/Mj5hP2E6YSsxMjpcIuCuteCviOCuleCuseCviFwiPT09Ynx8XCLgrpXgrr7grrLgr4hcIj09PWI/YTpcIuCuqOCuo+CvjeCuquCuleCusuCvjVwiPT09YiYmYT49MTA/YTphKzEyfSx3ZWVrOntkb3c6MCwvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjZ9fSksa2cuZGVmaW5lTG9jYWxlKFwidGVcIix7bW9udGhzOlwi4LCc4LCo4LC14LCw4LC/X+Cwq+Cwv+CwrOCxjeCwsOCwteCwsOCwv1/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/4LCy4LGNX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGC4LCy4LGG4LGWX+CwhuCwl+CwuOCxjeCwn+CxgV/gsLjgsYbgsKrgsY3gsJ/gsYbgsILgsKzgsLDgsY1f4LCF4LCV4LGN4LCf4LGL4LCs4LCw4LGNX+CwqOCwteCwguCwrOCwsOCxjV/gsKHgsL/gsLjgsYbgsILgsKzgsLDgsY1cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCLgsJzgsKguX+Cwq+Cwv+CwrOCxjeCwsC5f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwvy5f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYLgsLLgsYbgsZZf4LCG4LCXLl/gsLjgsYbgsKrgsY0uX+CwheCwleCxjeCwn+Cxiy5f4LCo4LC1Ll/gsKHgsL/gsLjgsYYuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCLgsIbgsKbgsL/gsLXgsL7gsLDgsIJf4LC44LGL4LCu4LC14LC+4LCw4LCCX+CwruCwguCwl+Cws+CwteCwvuCwsOCwgl/gsKzgsYHgsKfgsLXgsL7gsLDgsIJf4LCX4LGB4LCw4LGB4LC14LC+4LCw4LCCX+CwtuCxgeCwleCxjeCwsOCwteCwvuCwsOCwgl/gsLbgsKjgsL/gsLXgsL7gsLDgsIJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuCwhuCwpuCwv1/gsLjgsYvgsK5f4LCu4LCC4LCX4LCzX+CwrOCxgeCwp1/gsJfgsYHgsLDgsYFf4LC24LGB4LCV4LGN4LCwX+CwtuCwqOCwv1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuCwhl/gsLjgsYtf4LCu4LCCX+CwrOCxgV/gsJfgsYFf4LC24LGBX+CwtlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW1cIixMVFM6XCJBIGg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSwgQSBoOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb4LCo4LGH4LCh4LGBXSBMVFwiLG5leHREYXk6XCJb4LCw4LGH4LCq4LGBXSBMVFwiLG5leHRXZWVrOlwiZGRkZCwgTFRcIixsYXN0RGF5OlwiW+CwqOCwv+CwqOCxjeCwqF0gTFRcIixsYXN0V2VlazpcIlvgsJfgsKRdIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMg4LCy4LGLXCIscGFzdDpcIiVzIOCwleCxjeCwsOCwv+CwpOCwglwiLHM6XCLgsJXgsYrgsKjgsY3gsKjgsL8g4LCV4LGN4LC34LCj4LC+4LCy4LGBXCIsbTpcIuCwkuCwlSDgsKjgsL/gsK7gsL/gsLfgsIJcIixtbTpcIiVkIOCwqOCwv+CwruCwv+Cwt+CwvuCwsuCxgVwiLGg6XCLgsJLgsJUg4LCX4LCC4LCfXCIsaGg6XCIlZCDgsJfgsILgsJ/gsLLgsYFcIixkOlwi4LCS4LCVIOCwsOCxi+CwnOCxgVwiLGRkOlwiJWQg4LCw4LGL4LCc4LGB4LCy4LGBXCIsTTpcIuCwkuCwlSDgsKjgsYbgsLJcIixNTTpcIiVkIOCwqOCxhuCwsuCwsuCxgVwiLHk6XCLgsJLgsJUg4LC44LCC4LC14LCk4LGN4LC44LCw4LCCXCIseXk6XCIlZCDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsL7gsLLgsYFcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfeCwtS8sb3JkaW5hbDpcIiVk4LC1XCIsbWVyaWRpZW1QYXJzZTov4LCw4LC+4LCk4LGN4LCw4LC/fOCwieCwpuCwr+CwgnzgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIJ84LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMTI9PT1hJiYoYT0wKSxcIuCwsOCwvuCwpOCxjeCwsOCwv1wiPT09Yj80PmE/YTphKzEyOlwi4LCJ4LCm4LCv4LCCXCI9PT1iP2E6XCLgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIJcIj09PWI/YT49MTA/YTphKzEyOlwi4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCXCI9PT1iP2ErMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDQ+YT9cIuCwsOCwvuCwpOCxjeCwsOCwv1wiOjEwPmE/XCLgsIngsKbgsK/gsIJcIjoxNz5hP1wi4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCXCI6MjA+YT9cIuCwuOCwvuCwr+CwguCwpOCxjeCwsOCwglwiOlwi4LCw4LC+4LCk4LGN4LCw4LC/XCJ9LHdlZWs6e2RvdzowLC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6Nn19KSxrZy5kZWZpbmVMb2NhbGUoXCJ0aFwiLHttb250aHM6XCLguKHguIHguKPguLLguITguKFf4LiB4Li44Lih4Lig4Liy4Lie4Lix4LiZ4LiY4LmMX+C4oeC4teC4meC4suC4hOC4oV/guYDguKHguKnguLLguKLguJlf4Lie4Lik4Lip4Lig4Liy4LiE4LihX+C4oeC4tOC4luC4uOC4meC4suC4ouC4mV/guIHguKPguIHguI7guLLguITguKFf4Liq4Li04LiH4Lir4Liy4LiE4LihX+C4geC4seC4meC4ouC4suC4ouC4mV/guJXguLjguKXguLLguITguKFf4Lie4Lik4Lio4LiI4Li04LiB4Liy4Lii4LiZX+C4mOC4seC4meC4p+C4suC4hOC4oVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIuC4oS7guIQuX+C4gS7guJ4uX+C4oeC4tS7guIQuX+C5gOC4oS7guKIuX+C4ni7guIQuX+C4oeC4tC7guKIuX+C4gS7guIQuX+C4qi7guIQuX+C4gS7guKIuX+C4lS7guIQuX+C4ni7guKIuX+C4mC7guIQuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCLguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4Liq4Lia4LiU4Li1X+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYxcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuC4reC4suC4l+C4tOC4leC4ouC5jF/guIjguLHguJnguJfguKPguYxf4Lit4Lix4LiH4LiE4Liy4LijX+C4nuC4uOC4mF/guJ7guKTguKvguLHguKpf4Lio4Li44LiB4Lij4LmMX+C5gOC4quC4suC4o+C5jFwiLnNwbGl0KFwiX1wiKSwvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxyXG53ZWVrZGF5c01pbjpcIuC4reC4si5f4LiILl/guK0uX+C4ni5f4Lie4LikLl/guKguX+C4qi5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkgg4LiZ4Liy4Lis4Li04LiB4LiyIG0g4LiZ4Liy4LiX4Li1XCIsTFRTOlwiSCDguJnguLLguKzguLTguIHguLIgbSDguJnguLLguJfguLUgcyDguKfguLTguJnguLLguJfguLVcIixMOlwiWVlZWS9NTS9ERFwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSCDguJnguLLguKzguLTguIHguLIgbSDguJnguLLguJfguLVcIixMTExMOlwi4Lin4Lix4LiZZGRkZOC4l+C4teC5iCBEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSCDguJnguLLguKzguLTguIHguLIgbSDguJnguLLguJfguLVcIn0sbWVyaWRpZW1QYXJzZTov4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8saXNQTTpmdW5jdGlvbihhKXtyZXR1cm5cIuC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4h1wiPT09YX0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxMj5hP1wi4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHXCI6XCLguKvguKXguLHguIfguYDguJfguLXguYjguKLguIdcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb4Lin4Lix4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFRcIixuZXh0RGF5OlwiW+C4nuC4o+C4uOC5iOC4h+C4meC4teC5iSDguYDguKfguKXguLJdIExUXCIsbmV4dFdlZWs6XCJkZGRkW+C4q+C4meC5ieC4siDguYDguKfguKXguLJdIExUXCIsbGFzdERheTpcIlvguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVFwiLGxhc3RXZWVrOlwiW+C4p+C4seC4mV1kZGRkW+C4l+C4teC5iOC5geC4peC5ieC4pyDguYDguKfguKXguLJdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwi4Lit4Li14LiBICVzXCIscGFzdDpcIiVz4LiX4Li14LmI4LmB4Lil4LmJ4LinXCIsczpcIuC5hOC4oeC5iOC4geC4teC5iOC4p+C4tOC4meC4suC4l+C4tVwiLG06XCIxIOC4meC4suC4l+C4tVwiLG1tOlwiJWQg4LiZ4Liy4LiX4Li1XCIsaDpcIjEg4LiK4Lix4LmI4Lin4LmC4Lih4LiHXCIsaGg6XCIlZCDguIrguLHguYjguKfguYLguKHguIdcIixkOlwiMSDguKfguLHguJlcIixkZDpcIiVkIOC4p+C4seC4mVwiLE06XCIxIOC5gOC4lOC4t+C4reC4mVwiLE1NOlwiJWQg4LmA4LiU4Li34Lit4LiZXCIseTpcIjEg4Lib4Li1XCIseXk6XCIlZCDguJvguLVcIn19KSxrZy5kZWZpbmVMb2NhbGUoXCJ0bC1waFwiLHttb250aHM6XCJFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJFbmVfUGViX01hcl9BYnJfTWF5X0h1bl9IdWxfQWdvX1NldF9Pa3RfTm9iX0Rpc1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkxpbmdnb19MdW5lc19NYXJ0ZXNfTWl5ZXJrdWxlc19IdXdlYmVzX0JpeWVybmVzX1NhYmFkb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiTGlfTHVfTWFfTWlfSHVfQmlfU2FiXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiTU0vRC9ZWVlZXCIsTEw6XCJNTU1NIEQsIFlZWVlcIixMTEw6XCJNTU1NIEQsIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgTU1NTSBERCwgWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltOZ2F5b24gc2FdIExUXCIsbmV4dERheTpcIltCdWthcyBzYV0gTFRcIixuZXh0V2VlazpcImRkZGQgW3NhXSBMVFwiLGxhc3REYXk6XCJbS2FoYXBvbiBzYV0gTFRcIixsYXN0V2VlazpcImRkZGQgW2h1bGluZyBsaW5nZ29dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwic2EgbG9vYiBuZyAlc1wiLHBhc3Q6XCIlcyBhbmcgbmFrYWxpcGFzXCIsczpcImlsYW5nIHNlZ3VuZG9cIixtOlwiaXNhbmcgbWludXRvXCIsbW06XCIlZCBtaW51dG9cIixoOlwiaXNhbmcgb3Jhc1wiLGhoOlwiJWQgb3Jhc1wiLGQ6XCJpc2FuZyBhcmF3XCIsZGQ6XCIlZCBhcmF3XCIsTTpcImlzYW5nIGJ1d2FuXCIsTU06XCIlZCBidXdhblwiLHk6XCJpc2FuZyB0YW9uXCIseXk6XCIlZCB0YW9uXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0vLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxcInBhZ2hfd2HigJlfY2hh4oCZX3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0XCIuc3BsaXQoXCJfXCIpKSxyaD0oa2cuZGVmaW5lTG9jYWxlKFwidGxoXCIse21vbnRoczpcInRlcmHigJkgamFyIHdh4oCZX3RlcmHigJkgamFyIGNoYeKAmV90ZXJh4oCZIGphciB3ZWpfdGVyYeKAmSBqYXIgbG9TX3RlcmHigJkgamFyIHZhZ2hfdGVyYeKAmSBqYXIgamF2X3RlcmHigJkgamFyIFNvY2hfdGVyYeKAmSBqYXIgY2hvcmdoX3RlcmHigJkgamFyIEh1dF90ZXJh4oCZIGphciB3YeKAmW1hSF90ZXJh4oCZIGphciB3YeKAmW1hSCB3YeKAmV90ZXJh4oCZIGphciB3YeKAmW1hSCBjaGHigJlcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYXIgd2HigJlfamFyIGNoYeKAmV9qYXIgd2VqX2phciBsb1NfamFyIHZhZ2hfamFyIGphdl9qYXIgU29jaF9qYXIgY2hvcmdoX2phciBIdXRfamFyIHdh4oCZbWFIX2phciB3YeKAmW1hSCB3YeKAmV9qYXIgd2HigJltYUggY2hh4oCZXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphalwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWpcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphalwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbRGFIamFqXSBMVFwiLG5leHREYXk6XCJbd2HigJlsZVNdIExUXCIsbmV4dFdlZWs6XCJMTExcIixsYXN0RGF5OlwiW3dh4oCZSHXigJldIExUXCIsbGFzdFdlZWs6XCJMTExcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6YWUscGFzdDpiZSxzOlwicHVTIGx1cFwiLG06XCJ3YeKAmSB0dXBcIixtbTpjZSxoOlwid2HigJkgcmVwXCIsaGg6Y2UsZDpcIndh4oCZIGphalwiLGRkOmNlLE06XCJ3YeKAmSBqYXJcIixNTTpjZSx5Olwid2HigJkgRElTXCIseXk6Y2V9LG9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksezE6XCInaW5jaVwiLDU6XCInaW5jaVwiLDg6XCInaW5jaVwiLDcwOlwiJ2luY2lcIiw4MDpcIidpbmNpXCIsMjpcIiduY2lcIiw3OlwiJ25jaVwiLDIwOlwiJ25jaVwiLDUwOlwiJ25jaVwiLDM6XCInw7xuY8O8XCIsNDpcIifDvG5jw7xcIiwxMDA6XCInw7xuY8O8XCIsNjpcIiduY8SxXCIsOTpcIid1bmN1XCIsMTA6XCIndW5jdVwiLDMwOlwiJ3VuY3VcIiw2MDpcIifEsW5jxLFcIiw5MDpcIifEsW5jxLFcIn0pLHNoPShrZy5kZWZpbmVMb2NhbGUoXCJ0clwiLHttb250aHM6XCJPY2FrX8WedWJhdF9NYXJ0X05pc2FuX01hecSxc19IYXppcmFuX1RlbW11el9BxJ91c3Rvc19FeWzDvGxfRWtpbV9LYXPEsW1fQXJhbMSxa1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIk9jYV/FnnViX01hcl9OaXNfTWF5X0hhel9UZW1fQcSfdV9FeWxfRWtpX0thc19BcmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJQYXphcl9QYXphcnRlc2lfU2FsxLFfw4dhcsWfYW1iYV9QZXLFn2VtYmVfQ3VtYV9DdW1hcnRlc2lcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlBhel9QdHNfU2FsX8OHYXJfUGVyX0N1bV9DdHNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJQel9QdF9TYV/Dh2FfUGVfQ3VfQ3RcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2J1Z8O8biBzYWF0XSBMVFwiLG5leHREYXk6XCJbeWFyxLFuIHNhYXRdIExUXCIsbmV4dFdlZWs6XCJbaGFmdGF5YV0gZGRkZCBbc2FhdF0gTFRcIixsYXN0RGF5OlwiW2TDvG5dIExUXCIsbGFzdFdlZWs6XCJbZ2XDp2VuIGhhZnRhXSBkZGRkIFtzYWF0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIHNvbnJhXCIscGFzdDpcIiVzIMO2bmNlXCIsczpcImJpcmthw6cgc2FuaXllXCIsbTpcImJpciBkYWtpa2FcIixtbTpcIiVkIGRha2lrYVwiLGg6XCJiaXIgc2FhdFwiLGhoOlwiJWQgc2FhdFwiLGQ6XCJiaXIgZ8O8blwiLGRkOlwiJWQgZ8O8blwiLE06XCJiaXIgYXlcIixNTTpcIiVkIGF5XCIseTpcImJpciB5xLFsXCIseXk6XCIlZCB5xLFsXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0nKGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3V8xLFuY8SxKS8sb3JkaW5hbDpmdW5jdGlvbihhKXtpZigwPT09YSkvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cclxucmV0dXJuIGErXCInxLFuY8SxXCI7dmFyIGI9YSUxMCxjPWElMTAwLWIsZD1hPj0xMDA/MTAwOm51bGw7cmV0dXJuIGErKHJoW2JdfHxyaFtjXXx8cmhbZF0pfSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksa2cuZGVmaW5lTG9jYWxlKFwidHpsXCIse21vbnRoczpcIkphbnVhcl9GZXZyYWdsaF9NYXLDp19BdnLDr3VfTWFpX0fDvG5fSnVsaWFfR3VzY2h0X1NldGVtdmFyX0xpc3RvcMOkdHNfTm9lbXZhcl9aZWNlbXZhclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZXZfTWFyX0F2cl9NYWlfR8O8bl9KdWxfR3VzX1NldF9MaXNfTm9lX1plY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlPDumxhZGlfTMO6bmXDp2lfTWFpdHppX03DoXJjdXJpX1how7phZGlfVmnDqW5lcsOnaV9Tw6F0dXJpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTw7psX0zDum5fTWFpX03DoXJfWGjDul9WacOpX1PDoXRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTw7pfTMO6X01hX03DoV9YaF9WaV9Tw6FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEgubW1cIixMVFM6XCJISC5tbS5zc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFtkYWxsYXNdIFlZWVlcIixMTEw6XCJELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW1cIixMTExMOlwiZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW1cIn0sbWVyaWRpZW1QYXJzZTovZFxcJ298ZFxcJ2EvaSxpc1BNOmZ1bmN0aW9uKGEpe3JldHVyblwiZCdvXCI9PT1hLnRvTG93ZXJDYXNlKCl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYT4xMT9jP1wiZCdvXCI6XCJEJ09cIjpjP1wiZCdhXCI6XCJEJ0FcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbb3hoaSDDoF0gTFRcIixuZXh0RGF5OlwiW2RlbcOgIMOgXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbw6BdIExUXCIsbGFzdERheTpcIltpZWlyaSDDoF0gTFRcIixsYXN0V2VlazpcIltzw7xyIGVsXSBkZGRkIFtsYXN0ZXUgw6BdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib3NwcmVpICVzXCIscGFzdDpcImphJXNcIixzOmVlLG06ZWUsbW06ZWUsaDplZSxoaDplZSxkOmVlLGRkOmVlLE06ZWUsTU06ZWUseTplZSx5eTplZX0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJ0em0tbGF0blwiLHttb250aHM6XCJpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpclwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcImFzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImFzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2FzZGtoIGddIExUXCIsbmV4dERheTpcIlthc2thIGddIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtnXSBMVFwiLGxhc3REYXk6XCJbYXNzYW50IGddIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtnXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhZGtoIHMgeWFuICVzXCIscGFzdDpcInlhbiAlc1wiLHM6XCJpbWlrXCIsbTpcIm1pbnXhuI1cIixtbTpcIiVkIG1pbnXhuI1cIixoOlwic2HJm2FcIixoaDpcIiVkIHRhc3NhyZtpblwiLGQ6XCJhc3NcIixkZDpcIiVkIG9zc2FuXCIsTTpcImF5b3dyXCIsTU06XCIlZCBpeXlpcm5cIix5OlwiYXNnYXNcIix5eTpcIiVkIGlzZ2FzblwifSx3ZWVrOntkb3c6NiwvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6MTJ9fSksa2cuZGVmaW5lTG9jYWxlKFwidHptXCIse21vbnRoczpcIuK1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZRcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIuK0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIuK0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvitLDitZnitLfitYUg4rS0XSBMVFwiLG5leHREYXk6XCJb4rSw4rWZ4rS94rSwIOK0tF0gTFRcIixuZXh0V2VlazpcImRkZGQgW+K0tF0gTFRcIixsYXN0RGF5OlwiW+K0sOK1muK0sOK1j+K1nCDitLRdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFvitLRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwi4rS34rSw4rS34rWFIOK1mSDitaLitLDitY8gJXNcIixwYXN0Olwi4rWi4rSw4rWPICVzXCIsczpcIuK1ieK1juK1ieK0vVwiLG06XCLitY7itYnitY/itZPitLpcIixtbTpcIiVkIOK1juK1ieK1j+K1k+K0ulwiLGg6XCLitZnitLDitYTitLBcIixoaDpcIiVkIOK1nOK0sOK1meK1meK0sOK1hOK1ieK1j1wiLGQ6XCLitLDitZnitZlcIixkZDpcIiVkIG/itZnitZnitLDitY9cIixNOlwi4rSw4rWib+K1k+K1lFwiLE1NOlwiJWQg4rWJ4rWi4rWi4rWJ4rWU4rWPXCIseTpcIuK0sOK1meK0s+K0sOK1mVwiLHl5OlwiJWQg4rWJ4rWZ4rSz4rSw4rWZ4rWPXCJ9LHdlZWs6e2Rvdzo2LC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXHJcbmRveToxMn19KSxrZy5kZWZpbmVMb2NhbGUoXCJ1a1wiLHttb250aHM6e2Zvcm1hdDpcItGB0ZbRh9C90Y9f0LvRjtGC0L7Qs9C+X9Cx0LXRgNC10LfQvdGPX9C60LLRltGC0L3Rj1/RgtGA0LDQstC90Y9f0YfQtdGA0LLQvdGPX9C70LjQv9C90Y9f0YHQtdGA0L/QvdGPX9Cy0LXRgNC10YHQvdGPX9C20L7QstGC0L3Rj1/Qu9C40YHRgtC+0L/QsNC00LBf0LPRgNGD0LTQvdGPXCIuc3BsaXQoXCJfXCIpLHN0YW5kYWxvbmU6XCLRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YxcIi5zcGxpdChcIl9cIil9LG1vbnRoc1Nob3J0Olwi0YHRltGHX9C70Y7Rgl/QsdC10YBf0LrQstGW0YJf0YLRgNCw0LJf0YfQtdGA0LJf0LvQuNC/X9GB0LXRgNC/X9Cy0LXRgF/QttC+0LLRgl/Qu9C40YHRgl/Qs9GA0YPQtFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpoZSx3ZWVrZGF5c1Nob3J0Olwi0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcItC90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LFcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWSDRgC5cIixMTEw6XCJEIE1NTU0gWVlZWSDRgC4sIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZINGALiwgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6aWUoXCJb0KHRjNC+0LPQvtC00L3RliBcIiksbmV4dERheTppZShcIlvQl9Cw0LLRgtGA0LAgXCIpLGxhc3REYXk6aWUoXCJb0JLRh9C+0YDQsCBcIiksbmV4dFdlZWs6aWUoXCJb0KNdIGRkZGQgW1wiKSxsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6Y2FzZSAzOmNhc2UgNTpjYXNlIDY6cmV0dXJuIGllKFwiW9Cc0LjQvdGD0LvQvtGXXSBkZGRkIFtcIikuY2FsbCh0aGlzKTtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gaWUoXCJb0JzQuNC90YPQu9C+0LPQvl0gZGRkZCBbXCIpLmNhbGwodGhpcyl9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLQt9CwICVzXCIscGFzdDpcIiVzINGC0L7QvNGDXCIsczpcItC00LXQutGW0LvRjNC60LAg0YHQtdC60YPQvdC0XCIsbTpnZSxtbTpnZSxoOlwi0LPQvtC00LjQvdGDXCIsaGg6Z2UsZDpcItC00LXQvdGMXCIsZGQ6Z2UsTTpcItC80ZbRgdGP0YbRjFwiLE1NOmdlLHk6XCLRgNGW0LpcIix5eTpnZX0sXHJcbi8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXHJcbm1lcmlkaWVtUGFyc2U6L9C90L7Rh9GWfNGA0LDQvdC60YN80LTQvdGPfNCy0LXRh9C+0YDQsC8saXNQTTpmdW5jdGlvbihhKXtyZXR1cm4vXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoYSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gND5hP1wi0L3QvtGH0ZZcIjoxMj5hP1wi0YDQsNC90LrRg1wiOjE3PmE/XCLQtNC90Y9cIjpcItCy0LXRh9C+0YDQsFwifSxvcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LSjQuXzQs9C+KS8sb3JkaW5hbDpmdW5jdGlvbihhLGIpe3N3aXRjaChiKXtjYXNlXCJNXCI6Y2FzZVwiZFwiOmNhc2VcIkRERFwiOmNhc2VcIndcIjpjYXNlXCJXXCI6cmV0dXJuIGErXCIt0LlcIjtjYXNlXCJEXCI6cmV0dXJuIGErXCIt0LPQvlwiO2RlZmF1bHQ6cmV0dXJuIGF9fSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95Ojd9fSksa2cuZGVmaW5lTG9jYWxlKFwidXpcIix7bW9udGhzOlwi0Y/QvdCy0LDRgF/RhNC10LLRgNCw0Ltf0LzQsNGA0YJf0LDQv9GA0LXQu1/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YBf0L7QutGC0Y/QsdGAX9C90L7Rj9Cx0YBf0LTQtdC60LDQsdGAXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0Olwi0Y/QvdCyX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LpcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCLQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi0K/QutGIX9CU0YPRiF/QodC10Yhf0KfQvtGAX9Cf0LDQuV/QltGD0Lxf0KjQsNC9XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi0K/Qul/QlNGDX9Ch0LVf0KfQvl/Qn9CwX9CW0YNf0KjQsFwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiRCBNTU1NIFlZWVksIGRkZGQgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJb0JHRg9Cz0YPQvSDRgdC+0LDRgl0gTFQgW9C00LBdXCIsbmV4dERheTpcIlvQrdGA0YLQsNCz0LBdIExUIFvQtNCwXVwiLG5leHRXZWVrOlwiZGRkZCBb0LrRg9C90Lgg0YHQvtCw0YJdIExUIFvQtNCwXVwiLGxhc3REYXk6XCJb0JrQtdGH0LAg0YHQvtCw0YJdIExUIFvQtNCwXVwiLGxhc3RXZWVrOlwiW9Cj0YLQs9Cw0L1dIGRkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF1cIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLQr9C60LjQvSAlcyDQuNGH0LjQtNCwXCIscGFzdDpcItCR0LjRgCDQvdC10YfQsCAlcyDQvtC70LTQuNC9XCIsczpcItGE0YPRgNGB0LDRglwiLG06XCLQsdC40YAg0LTQsNC60LjQutCwXCIsbW06XCIlZCDQtNCw0LrQuNC60LBcIixoOlwi0LHQuNGAINGB0L7QsNGCXCIsaGg6XCIlZCDRgdC+0LDRglwiLGQ6XCLQsdC40YAg0LrRg9C9XCIsZGQ6XCIlZCDQutGD0L1cIixNOlwi0LHQuNGAINC+0LlcIixNTTpcIiVkINC+0LlcIix5Olwi0LHQuNGAINC50LjQu1wiLHl5OlwiJWQg0LnQuNC7XCJ9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6N319KSxrZy5kZWZpbmVMb2NhbGUoXCJ2aVwiLHttb250aHM6XCJ0aMOhbmcgMV90aMOhbmcgMl90aMOhbmcgM190aMOhbmcgNF90aMOhbmcgNV90aMOhbmcgNl90aMOhbmcgN190aMOhbmcgOF90aMOhbmcgOV90aMOhbmcgMTBfdGjDoW5nIDExX3Row6FuZyAxMlwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlRoMDFfVGgwMl9UaDAzX1RoMDRfVGgwNV9UaDA2X1RoMDdfVGgwOF9UaDA5X1RoMTBfVGgxMV9UaDEyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJjaOG7pyBuaOG6rXRfdGjhu6kgaGFpX3Ro4bupIGJhX3Ro4bupIHTGsF90aOG7qSBuxINtX3Ro4bupIHPDoXVfdGjhu6kgYuG6o3lcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkNOX1QyX1QzX1Q0X1Q1X1Q2X1Q3XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiQ05fVDJfVDNfVDRfVDVfVDZfVDdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLG1lcmlkaWVtUGFyc2U6L3NhfGNoL2ksaXNQTTpmdW5jdGlvbihhKXtyZXR1cm4vXmNoJC9pLnRlc3QoYSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMTI+YT9jP1wic2FcIjpcIlNBXCI6Yz9cImNoXCI6XCJDSFwifSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBbbsSDbV0gWVlZWVwiLExMTDpcIkQgTU1NTSBbbsSDbV0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW1cIixsOlwiREQvTS9ZWVlZXCIsbGw6XCJEIE1NTSBZWVlZXCIsbGxsOlwiRCBNTU0gWVlZWSBISDptbVwiLGxsbGw6XCJkZGQsIEQgTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSMO0bSBuYXkgbMO6Y10gTFRcIixuZXh0RGF5OlwiW05nw6B5IG1haSBsw7pjXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUXCIsbGFzdERheTpcIltIw7RtIHF1YSBsw7pjXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbdHXhuqduIHLhu5NpIGzDumNdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgdOG7m2lcIixwYXN0OlwiJXMgdHLGsOG7m2NcIixzOlwidsOgaSBnacOieVwiLG06XCJt4buZdCBwaMO6dFwiLG1tOlwiJWQgcGjDunRcIixoOlwibeG7mXQgZ2nhu51cIixoaDpcIiVkIGdp4budXCIsZDpcIm3hu5l0IG5nw6B5XCIsZGQ6XCIlZCBuZ8OgeVwiLE06XCJt4buZdCB0aMOhbmdcIixNTTpcIiVkIHRow6FuZ1wiLHk6XCJt4buZdCBuxINtXCIseXk6XCIlZCBuxINtXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0vLG9yZGluYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHdlZWs6e2RvdzoxLC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxyXG5kb3k6NH19KSxrZy5kZWZpbmVMb2NhbGUoXCJ4LXBzZXVkb1wiLHttb250aHM6XCJKfsOhw7HDusOhfnLDvV9GfsOpYnLDun7DoXLDvV9+TcOhcmN+aF/DgXB+csOtbF9+TcOhw71ffkrDusOxw6l+X0rDumx+w71fw4HDun5nw7pzdH5fU8OpcH50w6ltYn7DqXJfw5N+Y3TDs2J+w6lyX8ORfsOzdsOpbX5iw6lyX35Ew6ljw6l+bWLDqXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKfsOhw7FffkbDqWJffk3DoXJffsOBcHJffk3DocO9X35Kw7rDsV9+SsO6bF9+w4HDumdfflPDqXBffsOTY3RffsORw7N2X35Ew6ljXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJTfsO6w7Fkw6F+w71fTcOzfsOxZMOhw71+X1TDusOpfnNkw6HDvX5fV8OpZH7DscOpc2R+w6HDvV9UfmjDunJzfmTDocO9X35GcsOtZH7DocO9X1N+w6F0w7pyfmTDocO9XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTfsO6w7Fffk3Ds8OxX35Uw7rDqV9+V8OpZF9+VGjDul9+RnLDrV9+U8OhdFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlN+w7pfTcOzfl9Uw7pfflfDqV9UfmhfRnJ+X1PDoVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltUfsOzZMOhfsO9IMOhdF0gTFRcIixuZXh0RGF5OlwiW1R+w7Ntw7N+cnLDs353IMOhdF0gTFRcIixuZXh0V2VlazpcImRkZGQgW8OhdF0gTFRcIixsYXN0RGF5OlwiW8OdfsOpc3R+w6lyZMOhfsO9IMOhdF0gTFRcIixsYXN0V2VlazpcIltMfsOhc3RdIGRkZGQgW8OhdF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCLDrX7DsSAlc1wiLHBhc3Q6XCIlcyDDoX5nw7NcIixzOlwiw6EgfmbDqXcgfnPDqWPDs37DsWRzXCIsbTpcIsOhIH5tw63DsX7DunTDqVwiLG1tOlwiJWQgbX7DrcOxw7p+dMOpc1wiLGg6XCLDoX7DsSBow7N+w7pyXCIsaGg6XCIlZCBofsOzw7pyc1wiLGQ6XCLDoSB+ZMOhw71cIixkZDpcIiVkIGR+w6HDvXNcIixNOlwiw6Egfm3Ds8OxfnRoXCIsTU06XCIlZCBtfsOzw7F0fmhzXCIseTpcIsOhIH7DvcOpw6FyXCIseXk6XCIlZCDDvX7DqcOhcnNcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLG9yZGluYWw6ZnVuY3Rpb24oYSl7dmFyIGI9YSUxMCxjPTE9PT1+fihhJTEwMC8xMCk/XCJ0aFwiOjE9PT1iP1wic3RcIjoyPT09Yj9cIm5kXCI6Mz09PWI/XCJyZFwiOlwidGhcIjtyZXR1cm4gYStjfSx3ZWVrOntkb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwiemgtY25cIix7bW9udGhzOlwi5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCIx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIuaYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi5ZGo5pelX+WRqOS4gF/lkajkuoxf5ZGo5LiJX+WRqOWbm1/lkajkupRf5ZGo5YWtXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkFo54K5bW3liIZcIixMVFM6XCJBaOeCuW3liIZz56eSXCIsTDpcIllZWVktTU0tRERcIixMTDpcIllZWVnlubRNTU1E5pelXCIsTExMOlwiWVlZWeW5tE1NTUTml6VBaOeCuW1t5YiGXCIsTExMTDpcIllZWVnlubRNTU1E5pelZGRkZEFo54K5bW3liIZcIixsOlwiWVlZWS1NTS1ERFwiLGxsOlwiWVlZWeW5tE1NTUTml6VcIixsbGw6XCJZWVlZ5bm0TU1NROaXpUFo54K5bW3liIZcIixsbGxsOlwiWVlZWeW5tE1NTUTml6VkZGRkQWjngrltbeWIhlwifSxtZXJpZGllbVBhcnNlOi/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEyPT09YSYmKGE9MCksXCLlh4zmmahcIj09PWJ8fFwi5pep5LiKXCI9PT1ifHxcIuS4iuWNiFwiPT09Yj9hOlwi5LiL5Y2IXCI9PT1ifHxcIuaZmuS4ilwiPT09Yj9hKzEyOmE+PTExP2E6YSsxMn0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTEwMCphK2I7cmV0dXJuIDYwMD5kP1wi5YeM5pmoXCI6OTAwPmQ/XCLml6nkuIpcIjoxMTMwPmQ/XCLkuIrljYhcIjoxMjMwPmQ/XCLkuK3ljYhcIjoxODAwPmQ/XCLkuIvljYhcIjpcIuaZmuS4ilwifSxjYWxlbmRhcjp7c2FtZURheTpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5taW51dGVzKCk/XCJb5LuK5aSpXUFoW+eCueaVtF1cIjpcIlvku4rlpKldTFRcIn0sbmV4dERheTpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5taW51dGVzKCk/XCJb5piO5aSpXUFoW+eCueaVtF1cIjpcIlvmmI7lpKldTFRcIn0sbGFzdERheTpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5taW51dGVzKCk/XCJb5pio5aSpXUFoW+eCueaVtF1cIjpcIlvmmKjlpKldTFRcIn0sbmV4dFdlZWs6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBhPWtnKCkuc3RhcnRPZihcIndlZWtcIiksYj10aGlzLmRpZmYoYSxcImRheXNcIik+PTc/XCJb5LiLXVwiOlwiW+acrF1cIiwwPT09dGhpcy5taW51dGVzKCk/YitcImRkZEFo54K55pW0XCI6YitcImRkZEFo54K5bW1cIn0sbGFzdFdlZWs6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBhPWtnKCkuc3RhcnRPZihcIndlZWtcIiksYj10aGlzLnVuaXgoKTxhLnVuaXgoKT9cIlvkuIpdXCI6XCJb5pysXVwiLDA9PT10aGlzLm1pbnV0ZXMoKT9iK1wiZGRkQWjngrnmlbRcIjpiK1wiZGRkQWjngrltbVwifSxzYW1lRWxzZTpcIkxMXCJ9LG9yZGluYWxQYXJzZTovXFxkezEsMn0o5pelfOaciHzlkagpLyxvcmRpbmFsOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIpe2Nhc2VcImRcIjpjYXNlXCJEXCI6Y2FzZVwiREREXCI6cmV0dXJuIGErXCLml6VcIjtjYXNlXCJNXCI6cmV0dXJuIGErXCLmnIhcIjtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBhK1wi5ZGoXCI7ZGVmYXVsdDpyZXR1cm4gYX19LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXPlhoVcIixwYXN0OlwiJXPliY1cIixzOlwi5Yeg56eSXCIsbTpcIjEg5YiG6ZKfXCIsbW06XCIlZCDliIbpkp9cIixoOlwiMSDlsI/ml7ZcIixoaDpcIiVkIOWwj+aXtlwiLGQ6XCIxIOWkqVwiLGRkOlwiJWQg5aSpXCIsTTpcIjEg5Liq5pyIXCIsTU06XCIlZCDkuKrmnIhcIix5OlwiMSDlubRcIix5eTpcIiVkIOW5tFwifSx3ZWVrOntcclxuLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxyXG5kb3c6MSwvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuZG95OjR9fSksa2cuZGVmaW5lTG9jYWxlKFwiemgtdHdcIix7bW9udGhzOlwi5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCIx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIuaYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwi6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwi5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkFo6buebW3liIZcIixMVFM6XCJBaOm7nm3liIZz56eSXCIsTDpcIllZWVnlubRNTU1E5pelXCIsTEw6XCJZWVlZ5bm0TU1NROaXpVwiLExMTDpcIllZWVnlubRNTU1E5pelQWjpu55tbeWIhlwiLExMTEw6XCJZWVlZ5bm0TU1NROaXpWRkZGRBaOm7nm1t5YiGXCIsbDpcIllZWVnlubRNTU1E5pelXCIsbGw6XCJZWVlZ5bm0TU1NROaXpVwiLGxsbDpcIllZWVnlubRNTU1E5pelQWjpu55tbeWIhlwiLGxsbGw6XCJZWVlZ5bm0TU1NROaXpWRkZGRBaOm7nm1t5YiGXCJ9LG1lcmlkaWVtUGFyc2U6L+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMTI9PT1hJiYoYT0wKSxcIuWHjOaZqFwiPT09Ynx8XCLml6nkuIpcIj09PWJ8fFwi5LiK5Y2IXCI9PT1iP2E6XCLkuK3ljYhcIj09PWI/YT49MTE/YTphKzEyOlwi5LiL5Y2IXCI9PT1ifHxcIuaZmuS4ilwiPT09Yj9hKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTEwMCphK2I7cmV0dXJuIDYwMD5kP1wi5YeM5pmoXCI6OTAwPmQ/XCLml6nkuIpcIjoxMTMwPmQ/XCLkuIrljYhcIjoxMjMwPmQ/XCLkuK3ljYhcIjoxODAwPmQ/XCLkuIvljYhcIjpcIuaZmuS4ilwifSxjYWxlbmRhcjp7c2FtZURheTpcIlvku4rlpKldTFRcIixuZXh0RGF5OlwiW+aYjuWkqV1MVFwiLG5leHRXZWVrOlwiW+S4i11kZGRkTFRcIixsYXN0RGF5OlwiW+aYqOWkqV1MVFwiLGxhc3RXZWVrOlwiW+S4il1kZGRkTFRcIixzYW1lRWxzZTpcIkxcIn0sb3JkaW5hbFBhcnNlOi9cXGR7MSwyfSjml6V85pyIfOmAsSkvLG9yZGluYWw6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYil7Y2FzZVwiZFwiOmNhc2VcIkRcIjpjYXNlXCJERERcIjpyZXR1cm4gYStcIuaXpVwiO2Nhc2VcIk1cIjpyZXR1cm4gYStcIuaciFwiO2Nhc2VcIndcIjpjYXNlXCJXXCI6cmV0dXJuIGErXCLpgLFcIjtkZWZhdWx0OnJldHVybiBhfX0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlc+WFp1wiLHBhc3Q6XCIlc+WJjVwiLHM6XCLlub7np5JcIixtOlwiMSDliIbpkJhcIixtbTpcIiVkIOWIhumQmFwiLGg6XCIxIOWwj+aZglwiLGhoOlwiJWQg5bCP5pmCXCIsZDpcIjEg5aSpXCIsZGQ6XCIlZCDlpKlcIixNOlwiMSDlgIvmnIhcIixNTTpcIiVkIOWAi+aciFwiLHk6XCIxIOW5tFwiLHl5OlwiJWQg5bm0XCJ9fSksa2cpO3JldHVybiBzaC5sb2NhbGUoXCJlblwiKSxzaH0pO1xyXG4vKiEgdmVyc2lvbiA6IDQuMTcuMzdcclxuID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gYm9vdHN0cmFwLWRhdGV0aW1lanNcclxuIGh0dHBzOi8vZ2l0aHViLmNvbS9Fb25hc2Rhbi9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcclxuIENvcHlyaWdodCAoYykgMjAxNSBKb25hdGhhbiBQZXRlcnNvblxyXG4gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqL1xyXG4hZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXCJqcXVlcnlcIixcIm1vbWVudFwiXSxhKTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzKWEocmVxdWlyZShcImpxdWVyeVwiKSxyZXF1aXJlKFwibW9tZW50XCIpKTtlbHNle2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBqUXVlcnkpdGhyb3dcImJvb3RzdHJhcC1kYXRldGltZXBpY2tlciByZXF1aXJlcyBqUXVlcnkgdG8gYmUgbG9hZGVkIGZpcnN0XCI7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIG1vbWVudCl0aHJvd1wiYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyIHJlcXVpcmVzIE1vbWVudC5qcyB0byBiZSBsb2FkZWQgZmlyc3RcIjthKGpRdWVyeSxtb21lbnQpfX0oZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjtpZighYil0aHJvdyBuZXcgRXJyb3IoXCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIgcmVxdWlyZXMgTW9tZW50LmpzIHRvIGJlIGxvYWRlZCBmaXJzdFwiKTt2YXIgYz1mdW5jdGlvbihjLGQpe3ZhciBlLGYsZyxoLGksaixrLGw9e30sbT0hMCxuPSExLG89ITEscD0wLHE9W3tjbHNOYW1lOlwiZGF5c1wiLG5hdkZuYzpcIk1cIixuYXZTdGVwOjF9LHtjbHNOYW1lOlwibW9udGhzXCIsbmF2Rm5jOlwieVwiLG5hdlN0ZXA6MX0se2Nsc05hbWU6XCJ5ZWFyc1wiLG5hdkZuYzpcInlcIixuYXZTdGVwOjEwfSx7Y2xzTmFtZTpcImRlY2FkZXNcIixuYXZGbmM6XCJ5XCIsbmF2U3RlcDoxMDB9XSxyPVtcImRheXNcIixcIm1vbnRoc1wiLFwieWVhcnNcIixcImRlY2FkZXNcIl0scz1bXCJ0b3BcIixcImJvdHRvbVwiLFwiYXV0b1wiXSx0PVtcImxlZnRcIixcInJpZ2h0XCIsXCJhdXRvXCJdLHU9W1wiZGVmYXVsdFwiLFwidG9wXCIsXCJib3R0b21cIl0sdj17dXA6MzgsMzg6XCJ1cFwiLGRvd246NDAsNDA6XCJkb3duXCIsbGVmdDozNywzNzpcImxlZnRcIixyaWdodDozOSwzOTpcInJpZ2h0XCIsdGFiOjksOTpcInRhYlwiLGVzY2FwZToyNywyNzpcImVzY2FwZVwiLGVudGVyOjEzLDEzOlwiZW50ZXJcIixwYWdlVXA6MzMsMzM6XCJwYWdlVXBcIixwYWdlRG93bjozNCwzNDpcInBhZ2VEb3duXCIsc2hpZnQ6MTYsMTY6XCJzaGlmdFwiLGNvbnRyb2w6MTcsMTc6XCJjb250cm9sXCIsc3BhY2U6MzIsMzI6XCJzcGFjZVwiLHQ6ODQsODQ6XCJ0XCIsXCJkZWxldGVcIjo0Niw0NjpcImRlbGV0ZVwifSx3PXt9LHg9ZnVuY3Rpb24oYSl7dmFyIGMsZSxmLGcsaCxpPSExO3JldHVybiB2b2lkIDAhPT1iLnR6JiZ2b2lkIDAhPT1kLnRpbWVab25lJiZudWxsIT09ZC50aW1lWm9uZSYmXCJcIiE9PWQudGltZVpvbmUmJihpPSEwKSx2b2lkIDA9PT1hfHxudWxsPT09YT9jPWk/YigpLnR6KGQudGltZVpvbmUpLnN0YXJ0T2YoXCJkXCIpOmIoKS5zdGFydE9mKFwiZFwiKTppPyhlPWIoKS50eihkLnRpbWVab25lKS51dGNPZmZzZXQoKSxmPWIoYSxqLGQudXNlU3RyaWN0KS51dGNPZmZzZXQoKSxmIT09ZT8oZz1iKCkudHooZC50aW1lWm9uZSkuZm9ybWF0KFwiWlwiKSxoPWIoYSxqLGQudXNlU3RyaWN0KS5mb3JtYXQoXCJZWVlZLU1NLUREW1RdSEg6bW06c3NcIikrZyxjPWIoaCxqLGQudXNlU3RyaWN0KS50eihkLnRpbWVab25lKSk6Yz1iKGEsaixkLnVzZVN0cmljdCkudHooZC50aW1lWm9uZSkpOmM9YihhLGosZC51c2VTdHJpY3QpLGN9LHk9ZnVuY3Rpb24oYSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGF8fGEubGVuZ3RoPjEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImlzRW5hYmxlZCBleHBlY3RzIGEgc2luZ2xlIGNoYXJhY3RlciBzdHJpbmcgcGFyYW1ldGVyXCIpO3N3aXRjaChhKXtjYXNlXCJ5XCI6cmV0dXJuLTEhPT1pLmluZGV4T2YoXCJZXCIpO2Nhc2VcIk1cIjpyZXR1cm4tMSE9PWkuaW5kZXhPZihcIk1cIik7Y2FzZVwiZFwiOnJldHVybi0xIT09aS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJkXCIpO2Nhc2VcImhcIjpjYXNlXCJIXCI6cmV0dXJuLTEhPT1pLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImhcIik7Y2FzZVwibVwiOnJldHVybi0xIT09aS5pbmRleE9mKFwibVwiKTtjYXNlXCJzXCI6cmV0dXJuLTEhPT1pLmluZGV4T2YoXCJzXCIpO2RlZmF1bHQ6cmV0dXJuITF9fSx6PWZ1bmN0aW9uKCl7cmV0dXJuIHkoXCJoXCIpfHx5KFwibVwiKXx8eShcInNcIil9LEE9ZnVuY3Rpb24oKXtyZXR1cm4geShcInlcIil8fHkoXCJNXCIpfHx5KFwiZFwiKX0sQj1mdW5jdGlvbigpe3ZhciBiPWEoXCI8dGhlYWQ+XCIpLmFwcGVuZChhKFwiPHRyPlwiKS5hcHBlbmQoYShcIjx0aD5cIikuYWRkQ2xhc3MoXCJwcmV2XCIpLmF0dHIoXCJkYXRhLWFjdGlvblwiLFwicHJldmlvdXNcIikuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoZC5pY29ucy5wcmV2aW91cykpKS5hcHBlbmQoYShcIjx0aD5cIikuYWRkQ2xhc3MoXCJwaWNrZXItc3dpdGNoXCIpLmF0dHIoXCJkYXRhLWFjdGlvblwiLFwicGlja2VyU3dpdGNoXCIpLmF0dHIoXCJjb2xzcGFuXCIsZC5jYWxlbmRhcldlZWtzP1wiNlwiOlwiNVwiKSkuYXBwZW5kKGEoXCI8dGg+XCIpLmFkZENsYXNzKFwibmV4dFwiKS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcIm5leHRcIikuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoZC5pY29ucy5uZXh0KSkpKSxjPWEoXCI8dGJvZHk+XCIpLmFwcGVuZChhKFwiPHRyPlwiKS5hcHBlbmQoYShcIjx0ZD5cIikuYXR0cihcImNvbHNwYW5cIixkLmNhbGVuZGFyV2Vla3M/XCI4XCI6XCI3XCIpKSk7cmV0dXJuW2EoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImRhdGVwaWNrZXItZGF5c1wiKS5hcHBlbmQoYShcIjx0YWJsZT5cIikuYWRkQ2xhc3MoXCJ0YWJsZS1jb25kZW5zZWRcIikuYXBwZW5kKGIpLmFwcGVuZChhKFwiPHRib2R5PlwiKSkpLGEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImRhdGVwaWNrZXItbW9udGhzXCIpLmFwcGVuZChhKFwiPHRhYmxlPlwiKS5hZGRDbGFzcyhcInRhYmxlLWNvbmRlbnNlZFwiKS5hcHBlbmQoYi5jbG9uZSgpKS5hcHBlbmQoYy5jbG9uZSgpKSksYShcIjxkaXY+XCIpLmFkZENsYXNzKFwiZGF0ZXBpY2tlci15ZWFyc1wiKS5hcHBlbmQoYShcIjx0YWJsZT5cIikuYWRkQ2xhc3MoXCJ0YWJsZS1jb25kZW5zZWRcIikuYXBwZW5kKGIuY2xvbmUoKSkuYXBwZW5kKGMuY2xvbmUoKSkpLGEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImRhdGVwaWNrZXItZGVjYWRlc1wiKS5hcHBlbmQoYShcIjx0YWJsZT5cIikuYWRkQ2xhc3MoXCJ0YWJsZS1jb25kZW5zZWRcIikuYXBwZW5kKGIuY2xvbmUoKSkuYXBwZW5kKGMuY2xvbmUoKSkpXX0sQz1mdW5jdGlvbigpe3ZhciBiPWEoXCI8dHI+XCIpLGM9YShcIjx0cj5cIiksZT1hKFwiPHRyPlwiKTtyZXR1cm4geShcImhcIikmJihiLmFwcGVuZChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxhPlwiKS5hdHRyKHtocmVmOlwiI1wiLHRhYmluZGV4OlwiLTFcIix0aXRsZTpkLnRvb2x0aXBzLmluY3JlbWVudEhvdXJ9KS5hZGRDbGFzcyhcImJ0blwiKS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcImluY3JlbWVudEhvdXJzXCIpLmFwcGVuZChhKFwiPHNwYW4+XCIpLmFkZENsYXNzKGQuaWNvbnMudXApKSkpLGMuYXBwZW5kKGEoXCI8dGQ+XCIpLmFwcGVuZChhKFwiPHNwYW4+XCIpLmFkZENsYXNzKFwidGltZXBpY2tlci1ob3VyXCIpLmF0dHIoe1wiZGF0YS10aW1lLWNvbXBvbmVudFwiOlwiaG91cnNcIix0aXRsZTpkLnRvb2x0aXBzLnBpY2tIb3VyfSkuYXR0cihcImRhdGEtYWN0aW9uXCIsXCJzaG93SG91cnNcIikpKSxlLmFwcGVuZChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxhPlwiKS5hdHRyKHtocmVmOlwiI1wiLHRhYmluZGV4OlwiLTFcIix0aXRsZTpkLnRvb2x0aXBzLmRlY3JlbWVudEhvdXJ9KS5hZGRDbGFzcyhcImJ0blwiKS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcImRlY3JlbWVudEhvdXJzXCIpLmFwcGVuZChhKFwiPHNwYW4+XCIpLmFkZENsYXNzKGQuaWNvbnMuZG93bikpKSkpLHkoXCJtXCIpJiYoeShcImhcIikmJihiLmFwcGVuZChhKFwiPHRkPlwiKS5hZGRDbGFzcyhcInNlcGFyYXRvclwiKSksYy5hcHBlbmQoYShcIjx0ZD5cIikuYWRkQ2xhc3MoXCJzZXBhcmF0b3JcIikuaHRtbChcIjpcIikpLGUuYXBwZW5kKGEoXCI8dGQ+XCIpLmFkZENsYXNzKFwic2VwYXJhdG9yXCIpKSksYi5hcHBlbmQoYShcIjx0ZD5cIikuYXBwZW5kKGEoXCI8YT5cIikuYXR0cih7aHJlZjpcIiNcIix0YWJpbmRleDpcIi0xXCIsdGl0bGU6ZC50b29sdGlwcy5pbmNyZW1lbnRNaW51dGV9KS5hZGRDbGFzcyhcImJ0blwiKS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcImluY3JlbWVudE1pbnV0ZXNcIikuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoZC5pY29ucy51cCkpKSksYy5hcHBlbmQoYShcIjx0ZD5cIikuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoXCJ0aW1lcGlja2VyLW1pbnV0ZVwiKS5hdHRyKHtcImRhdGEtdGltZS1jb21wb25lbnRcIjpcIm1pbnV0ZXNcIix0aXRsZTpkLnRvb2x0aXBzLnBpY2tNaW51dGV9KS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcInNob3dNaW51dGVzXCIpKSksZS5hcHBlbmQoYShcIjx0ZD5cIikuYXBwZW5kKGEoXCI8YT5cIikuYXR0cih7aHJlZjpcIiNcIix0YWJpbmRleDpcIi0xXCIsdGl0bGU6ZC50b29sdGlwcy5kZWNyZW1lbnRNaW51dGV9KS5hZGRDbGFzcyhcImJ0blwiKS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcImRlY3JlbWVudE1pbnV0ZXNcIikuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoZC5pY29ucy5kb3duKSkpKSkseShcInNcIikmJih5KFwibVwiKSYmKGIuYXBwZW5kKGEoXCI8dGQ+XCIpLmFkZENsYXNzKFwic2VwYXJhdG9yXCIpKSxjLmFwcGVuZChhKFwiPHRkPlwiKS5hZGRDbGFzcyhcInNlcGFyYXRvclwiKS5odG1sKFwiOlwiKSksZS5hcHBlbmQoYShcIjx0ZD5cIikuYWRkQ2xhc3MoXCJzZXBhcmF0b3JcIikpKSxiLmFwcGVuZChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxhPlwiKS5hdHRyKHtocmVmOlwiI1wiLHRhYmluZGV4OlwiLTFcIix0aXRsZTpkLnRvb2x0aXBzLmluY3JlbWVudFNlY29uZH0pLmFkZENsYXNzKFwiYnRuXCIpLmF0dHIoXCJkYXRhLWFjdGlvblwiLFwiaW5jcmVtZW50U2Vjb25kc1wiKS5hcHBlbmQoYShcIjxzcGFuPlwiKS5hZGRDbGFzcyhkLmljb25zLnVwKSkpKSxjLmFwcGVuZChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxzcGFuPlwiKS5hZGRDbGFzcyhcInRpbWVwaWNrZXItc2Vjb25kXCIpLmF0dHIoe1wiZGF0YS10aW1lLWNvbXBvbmVudFwiOlwic2Vjb25kc1wiLHRpdGxlOmQudG9vbHRpcHMucGlja1NlY29uZH0pLmF0dHIoXCJkYXRhLWFjdGlvblwiLFwic2hvd1NlY29uZHNcIikpKSxlLmFwcGVuZChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxhPlwiKS5hdHRyKHtocmVmOlwiI1wiLHRhYmluZGV4OlwiLTFcIix0aXRsZTpkLnRvb2x0aXBzLmRlY3JlbWVudFNlY29uZH0pLmFkZENsYXNzKFwiYnRuXCIpLmF0dHIoXCJkYXRhLWFjdGlvblwiLFwiZGVjcmVtZW50U2Vjb25kc1wiKS5hcHBlbmQoYShcIjxzcGFuPlwiKS5hZGRDbGFzcyhkLmljb25zLmRvd24pKSkpKSxofHwoYi5hcHBlbmQoYShcIjx0ZD5cIikuYWRkQ2xhc3MoXCJzZXBhcmF0b3JcIikpLGMuYXBwZW5kKGEoXCI8dGQ+XCIpLmFwcGVuZChhKFwiPGJ1dHRvbj5cIikuYWRkQ2xhc3MoXCJidG4gYnRuLXByaW1hcnlcIikuYXR0cih7XCJkYXRhLWFjdGlvblwiOlwidG9nZ2xlUGVyaW9kXCIsdGFiaW5kZXg6XCItMVwiLHRpdGxlOmQudG9vbHRpcHMudG9nZ2xlUGVyaW9kfSkpKSxlLmFwcGVuZChhKFwiPHRkPlwiKS5hZGRDbGFzcyhcInNlcGFyYXRvclwiKSkpLGEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInRpbWVwaWNrZXItcGlja2VyXCIpLmFwcGVuZChhKFwiPHRhYmxlPlwiKS5hZGRDbGFzcyhcInRhYmxlLWNvbmRlbnNlZFwiKS5hcHBlbmQoW2IsYyxlXSkpfSxEPWZ1bmN0aW9uKCl7dmFyIGI9YShcIjxkaXY+XCIpLmFkZENsYXNzKFwidGltZXBpY2tlci1ob3Vyc1wiKS5hcHBlbmQoYShcIjx0YWJsZT5cIikuYWRkQ2xhc3MoXCJ0YWJsZS1jb25kZW5zZWRcIikpLGM9YShcIjxkaXY+XCIpLmFkZENsYXNzKFwidGltZXBpY2tlci1taW51dGVzXCIpLmFwcGVuZChhKFwiPHRhYmxlPlwiKS5hZGRDbGFzcyhcInRhYmxlLWNvbmRlbnNlZFwiKSksZD1hKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJ0aW1lcGlja2VyLXNlY29uZHNcIikuYXBwZW5kKGEoXCI8dGFibGU+XCIpLmFkZENsYXNzKFwidGFibGUtY29uZGVuc2VkXCIpKSxlPVtDKCldO3JldHVybiB5KFwiaFwiKSYmZS5wdXNoKGIpLHkoXCJtXCIpJiZlLnB1c2goYykseShcInNcIikmJmUucHVzaChkKSxlfSxFPWZ1bmN0aW9uKCl7dmFyIGI9W107cmV0dXJuIGQuc2hvd1RvZGF5QnV0dG9uJiZiLnB1c2goYShcIjx0ZD5cIikuYXBwZW5kKGEoXCI8YT5cIikuYXR0cih7XCJkYXRhLWFjdGlvblwiOlwidG9kYXlcIix0aXRsZTpkLnRvb2x0aXBzLnRvZGF5fSkuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoZC5pY29ucy50b2RheSkpKSksIWQuc2lkZUJ5U2lkZSYmQSgpJiZ6KCkmJmIucHVzaChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxhPlwiKS5hdHRyKHtcImRhdGEtYWN0aW9uXCI6XCJ0b2dnbGVQaWNrZXJcIix0aXRsZTpkLnRvb2x0aXBzLnNlbGVjdFRpbWV9KS5hcHBlbmQoYShcIjxzcGFuPlwiKS5hZGRDbGFzcyhkLmljb25zLnRpbWUpKSkpLGQuc2hvd0NsZWFyJiZiLnB1c2goYShcIjx0ZD5cIikuYXBwZW5kKGEoXCI8YT5cIikuYXR0cih7XCJkYXRhLWFjdGlvblwiOlwiY2xlYXJcIix0aXRsZTpkLnRvb2x0aXBzLmNsZWFyfSkuYXBwZW5kKGEoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoZC5pY29ucy5jbGVhcikpKSksZC5zaG93Q2xvc2UmJmIucHVzaChhKFwiPHRkPlwiKS5hcHBlbmQoYShcIjxhPlwiKS5hdHRyKHtcImRhdGEtYWN0aW9uXCI6XCJjbG9zZVwiLHRpdGxlOmQudG9vbHRpcHMuY2xvc2V9KS5hcHBlbmQoYShcIjxzcGFuPlwiKS5hZGRDbGFzcyhkLmljb25zLmNsb3NlKSkpKSxhKFwiPHRhYmxlPlwiKS5hZGRDbGFzcyhcInRhYmxlLWNvbmRlbnNlZFwiKS5hcHBlbmQoYShcIjx0Ym9keT5cIikuYXBwZW5kKGEoXCI8dHI+XCIpLmFwcGVuZChiKSkpfSxGPWZ1bmN0aW9uKCl7dmFyIGI9YShcIjxkaXY+XCIpLmFkZENsYXNzKFwiYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCBkcm9wZG93bi1tZW51XCIpLGM9YShcIjxkaXY+XCIpLmFkZENsYXNzKFwiZGF0ZXBpY2tlclwiKS5hcHBlbmQoQigpKSxlPWEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInRpbWVwaWNrZXJcIikuYXBwZW5kKEQoKSksZj1hKFwiPHVsPlwiKS5hZGRDbGFzcyhcImxpc3QtdW5zdHlsZWRcIiksZz1hKFwiPGxpPlwiKS5hZGRDbGFzcyhcInBpY2tlci1zd2l0Y2hcIisoZC5jb2xsYXBzZT9cIiBhY2NvcmRpb24tdG9nZ2xlXCI6XCJcIikpLmFwcGVuZChFKCkpO3JldHVybiBkLmlubGluZSYmYi5yZW1vdmVDbGFzcyhcImRyb3Bkb3duLW1lbnVcIiksaCYmYi5hZGRDbGFzcyhcInVzZXR3ZW50eWZvdXJcIikseShcInNcIikmJiFoJiZiLmFkZENsYXNzKFwid2lkZXJcIiksZC5zaWRlQnlTaWRlJiZBKCkmJnooKT8oYi5hZGRDbGFzcyhcInRpbWVwaWNrZXItc2JzXCIpLFwidG9wXCI9PT1kLnRvb2xiYXJQbGFjZW1lbnQmJmIuYXBwZW5kKGcpLGIuYXBwZW5kKGEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInJvd1wiKS5hcHBlbmQoYy5hZGRDbGFzcyhcImNvbC1tZC02XCIpKS5hcHBlbmQoZS5hZGRDbGFzcyhcImNvbC1tZC02XCIpKSksXCJib3R0b21cIj09PWQudG9vbGJhclBsYWNlbWVudCYmYi5hcHBlbmQoZyksYik6KFwidG9wXCI9PT1kLnRvb2xiYXJQbGFjZW1lbnQmJmYuYXBwZW5kKGcpLEEoKSYmZi5hcHBlbmQoYShcIjxsaT5cIikuYWRkQ2xhc3MoZC5jb2xsYXBzZSYmeigpP1wiY29sbGFwc2UgaW5cIjpcIlwiKS5hcHBlbmQoYykpLFwiZGVmYXVsdFwiPT09ZC50b29sYmFyUGxhY2VtZW50JiZmLmFwcGVuZChnKSx6KCkmJmYuYXBwZW5kKGEoXCI8bGk+XCIpLmFkZENsYXNzKGQuY29sbGFwc2UmJkEoKT9cImNvbGxhcHNlXCI6XCJcIikuYXBwZW5kKGUpKSxcImJvdHRvbVwiPT09ZC50b29sYmFyUGxhY2VtZW50JiZmLmFwcGVuZChnKSxiLmFwcGVuZChmKSl9LEc9ZnVuY3Rpb24oKXt2YXIgYixlPXt9O3JldHVybiBiPWMuaXMoXCJpbnB1dFwiKXx8ZC5pbmxpbmU/Yy5kYXRhKCk6Yy5maW5kKFwiaW5wdXRcIikuZGF0YSgpLGIuZGF0ZU9wdGlvbnMmJmIuZGF0ZU9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QmJihlPWEuZXh0ZW5kKCEwLGUsYi5kYXRlT3B0aW9ucykpLGEuZWFjaChkLGZ1bmN0aW9uKGEpe3ZhciBjPVwiZGF0ZVwiK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKTt2b2lkIDAhPT1iW2NdJiYoZVthXT1iW2NdKX0pLGV9LEg9ZnVuY3Rpb24oKXt2YXIgYixlPShufHxjKS5wb3NpdGlvbigpLGY9KG58fGMpLm9mZnNldCgpLGc9ZC53aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCxoPWQud2lkZ2V0UG9zaXRpb25pbmcuaG9yaXpvbnRhbDtpZihkLndpZGdldFBhcmVudCliPWQud2lkZ2V0UGFyZW50LmFwcGVuZChvKTtlbHNlIGlmKGMuaXMoXCJpbnB1dFwiKSliPWMuYWZ0ZXIobykucGFyZW50KCk7ZWxzZXtpZihkLmlubGluZSlyZXR1cm4gdm9pZChiPWMuYXBwZW5kKG8pKTtiPWMsYy5jaGlsZHJlbigpLmZpcnN0KCkuYWZ0ZXIobyl9aWYoXCJhdXRvXCI9PT1nJiYoZz1mLnRvcCsxLjUqby5oZWlnaHQoKT49YSh3aW5kb3cpLmhlaWdodCgpK2Eod2luZG93KS5zY3JvbGxUb3AoKSYmby5oZWlnaHQoKStjLm91dGVySGVpZ2h0KCk8Zi50b3A/XCJ0b3BcIjpcImJvdHRvbVwiKSxcImF1dG9cIj09PWgmJihoPWIud2lkdGgoKTxmLmxlZnQrby5vdXRlcldpZHRoKCkvMiYmZi5sZWZ0K28ub3V0ZXJXaWR0aCgpPmEod2luZG93KS53aWR0aCgpP1wicmlnaHRcIjpcImxlZnRcIiksXCJ0b3BcIj09PWc/by5hZGRDbGFzcyhcInRvcFwiKS5yZW1vdmVDbGFzcyhcImJvdHRvbVwiKTpvLmFkZENsYXNzKFwiYm90dG9tXCIpLnJlbW92ZUNsYXNzKFwidG9wXCIpLFwicmlnaHRcIj09PWg/by5hZGRDbGFzcyhcInB1bGwtcmlnaHRcIik6by5yZW1vdmVDbGFzcyhcInB1bGwtcmlnaHRcIiksXCJyZWxhdGl2ZVwiIT09Yi5jc3MoXCJwb3NpdGlvblwiKSYmKGI9Yi5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuXCJyZWxhdGl2ZVwiPT09YSh0aGlzKS5jc3MoXCJwb3NpdGlvblwiKX0pLmZpcnN0KCkpLDA9PT1iLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJkYXRldGltZXBpY2tlciBjb21wb25lbnQgc2hvdWxkIGJlIHBsYWNlZCB3aXRoaW4gYSByZWxhdGl2ZSBwb3NpdGlvbmVkIGNvbnRhaW5lclwiKTtvLmNzcyh7dG9wOlwidG9wXCI9PT1nP1wiYXV0b1wiOmUudG9wK2Mub3V0ZXJIZWlnaHQoKSxib3R0b206XCJ0b3BcIj09PWc/ZS50b3ArYy5vdXRlckhlaWdodCgpOlwiYXV0b1wiLGxlZnQ6XCJsZWZ0XCI9PT1oP2I9PT1jPzA6ZS5sZWZ0OlwiYXV0b1wiLHJpZ2h0OlwibGVmdFwiPT09aD9cImF1dG9cIjpiLm91dGVyV2lkdGgoKS1jLm91dGVyV2lkdGgoKS0oYj09PWM/MDplLmxlZnQpfSl9LEk9ZnVuY3Rpb24oYSl7XCJkcC5jaGFuZ2VcIj09PWEudHlwZSYmKGEuZGF0ZSYmYS5kYXRlLmlzU2FtZShhLm9sZERhdGUpfHwhYS5kYXRlJiYhYS5vbGREYXRlKXx8Yy50cmlnZ2VyKGEpfSxKPWZ1bmN0aW9uKGEpe1wieVwiPT09YSYmKGE9XCJZWVlZXCIpLEkoe3R5cGU6XCJkcC51cGRhdGVcIixjaGFuZ2U6YSx2aWV3RGF0ZTpmLmNsb25lKCl9KX0sSz1mdW5jdGlvbihhKXtvJiYoYSYmKGs9TWF0aC5tYXgocCxNYXRoLm1pbigzLGsrYSkpKSxvLmZpbmQoXCIuZGF0ZXBpY2tlciA+IGRpdlwiKS5oaWRlKCkuZmlsdGVyKFwiLmRhdGVwaWNrZXItXCIrcVtrXS5jbHNOYW1lKS5zaG93KCkpfSxMPWZ1bmN0aW9uKCl7dmFyIGI9YShcIjx0cj5cIiksYz1mLmNsb25lKCkuc3RhcnRPZihcIndcIikuc3RhcnRPZihcImRcIik7Zm9yKGQuY2FsZW5kYXJXZWVrcz09PSEwJiZiLmFwcGVuZChhKFwiPHRoPlwiKS5hZGRDbGFzcyhcImN3XCIpLnRleHQoXCIjXCIpKTtjLmlzQmVmb3JlKGYuY2xvbmUoKS5lbmRPZihcIndcIikpOyliLmFwcGVuZChhKFwiPHRoPlwiKS5hZGRDbGFzcyhcImRvd1wiKS50ZXh0KGMuZm9ybWF0KFwiZGRcIikpKSxjLmFkZCgxLFwiZFwiKTtvLmZpbmQoXCIuZGF0ZXBpY2tlci1kYXlzIHRoZWFkXCIpLmFwcGVuZChiKX0sTT1mdW5jdGlvbihhKXtyZXR1cm4gZC5kaXNhYmxlZERhdGVzW2EuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKV09PT0hMH0sTj1mdW5jdGlvbihhKXtyZXR1cm4gZC5lbmFibGVkRGF0ZXNbYS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpXT09PSEwfSxPPWZ1bmN0aW9uKGEpe3JldHVybiBkLmRpc2FibGVkSG91cnNbYS5mb3JtYXQoXCJIXCIpXT09PSEwfSxQPWZ1bmN0aW9uKGEpe3JldHVybiBkLmVuYWJsZWRIb3Vyc1thLmZvcm1hdChcIkhcIildPT09ITB9LFE9ZnVuY3Rpb24oYixjKXtpZighYi5pc1ZhbGlkKCkpcmV0dXJuITE7aWYoZC5kaXNhYmxlZERhdGVzJiZcImRcIj09PWMmJk0oYikpcmV0dXJuITE7aWYoZC5lbmFibGVkRGF0ZXMmJlwiZFwiPT09YyYmIU4oYikpcmV0dXJuITE7aWYoZC5taW5EYXRlJiZiLmlzQmVmb3JlKGQubWluRGF0ZSxjKSlyZXR1cm4hMTtpZihkLm1heERhdGUmJmIuaXNBZnRlcihkLm1heERhdGUsYykpcmV0dXJuITE7aWYoZC5kYXlzT2ZXZWVrRGlzYWJsZWQmJlwiZFwiPT09YyYmLTEhPT1kLmRheXNPZldlZWtEaXNhYmxlZC5pbmRleE9mKGIuZGF5KCkpKXJldHVybiExO2lmKGQuZGlzYWJsZWRIb3VycyYmKFwiaFwiPT09Y3x8XCJtXCI9PT1jfHxcInNcIj09PWMpJiZPKGIpKXJldHVybiExO2lmKGQuZW5hYmxlZEhvdXJzJiYoXCJoXCI9PT1jfHxcIm1cIj09PWN8fFwic1wiPT09YykmJiFQKGIpKXJldHVybiExO2lmKGQuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzJiYoXCJoXCI9PT1jfHxcIm1cIj09PWN8fFwic1wiPT09Yykpe3ZhciBlPSExO2lmKGEuZWFjaChkLmRpc2FibGVkVGltZUludGVydmFscyxmdW5jdGlvbigpe3JldHVybiBiLmlzQmV0d2Vlbih0aGlzWzBdLHRoaXNbMV0pPyhlPSEwLCExKTp2b2lkIDB9KSxlKXJldHVybiExfXJldHVybiEwfSxSPWZ1bmN0aW9uKCl7Zm9yKHZhciBiPVtdLGM9Zi5jbG9uZSgpLnN0YXJ0T2YoXCJ5XCIpLnN0YXJ0T2YoXCJkXCIpO2MuaXNTYW1lKGYsXCJ5XCIpOyliLnB1c2goYShcIjxzcGFuPlwiKS5hdHRyKFwiZGF0YS1hY3Rpb25cIixcInNlbGVjdE1vbnRoXCIpLmFkZENsYXNzKFwibW9udGhcIikudGV4dChjLmZvcm1hdChcIk1NTVwiKSkpLGMuYWRkKDEsXCJNXCIpO28uZmluZChcIi5kYXRlcGlja2VyLW1vbnRocyB0ZFwiKS5lbXB0eSgpLmFwcGVuZChiKX0sUz1mdW5jdGlvbigpe3ZhciBiPW8uZmluZChcIi5kYXRlcGlja2VyLW1vbnRoc1wiKSxjPWIuZmluZChcInRoXCIpLGc9Yi5maW5kKFwidGJvZHlcIikuZmluZChcInNwYW5cIik7Yy5lcSgwKS5maW5kKFwic3BhblwiKS5hdHRyKFwidGl0bGVcIixkLnRvb2x0aXBzLnByZXZZZWFyKSxjLmVxKDEpLmF0dHIoXCJ0aXRsZVwiLGQudG9vbHRpcHMuc2VsZWN0WWVhciksYy5lcSgyKS5maW5kKFwic3BhblwiKS5hdHRyKFwidGl0bGVcIixkLnRvb2x0aXBzLm5leHRZZWFyKSxiLmZpbmQoXCIuZGlzYWJsZWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKSxRKGYuY2xvbmUoKS5zdWJ0cmFjdCgxLFwieVwiKSxcInlcIil8fGMuZXEoMCkuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxjLmVxKDEpLnRleHQoZi55ZWFyKCkpLFEoZi5jbG9uZSgpLmFkZCgxLFwieVwiKSxcInlcIil8fGMuZXEoMikuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxnLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLGUuaXNTYW1lKGYsXCJ5XCIpJiYhbSYmZy5lcShlLm1vbnRoKCkpLmFkZENsYXNzKFwiYWN0aXZlXCIpLGcuZWFjaChmdW5jdGlvbihiKXtRKGYuY2xvbmUoKS5tb250aChiKSxcIk1cIil8fGEodGhpcykuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKX0pfSxUPWZ1bmN0aW9uKCl7dmFyIGE9by5maW5kKFwiLmRhdGVwaWNrZXIteWVhcnNcIiksYj1hLmZpbmQoXCJ0aFwiKSxjPWYuY2xvbmUoKS5zdWJ0cmFjdCg1LFwieVwiKSxnPWYuY2xvbmUoKS5hZGQoNixcInlcIiksaD1cIlwiO2ZvcihiLmVxKDApLmZpbmQoXCJzcGFuXCIpLmF0dHIoXCJ0aXRsZVwiLGQudG9vbHRpcHMucHJldkRlY2FkZSksYi5lcSgxKS5hdHRyKFwidGl0bGVcIixkLnRvb2x0aXBzLnNlbGVjdERlY2FkZSksYi5lcSgyKS5maW5kKFwic3BhblwiKS5hdHRyKFwidGl0bGVcIixkLnRvb2x0aXBzLm5leHREZWNhZGUpLGEuZmluZChcIi5kaXNhYmxlZFwiKS5yZW1vdmVDbGFzcyhcImRpc2FibGVkXCIpLGQubWluRGF0ZSYmZC5taW5EYXRlLmlzQWZ0ZXIoYyxcInlcIikmJmIuZXEoMCkuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxiLmVxKDEpLnRleHQoYy55ZWFyKCkrXCItXCIrZy55ZWFyKCkpLGQubWF4RGF0ZSYmZC5tYXhEYXRlLmlzQmVmb3JlKGcsXCJ5XCIpJiZiLmVxKDIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7IWMuaXNBZnRlcihnLFwieVwiKTspaCs9JzxzcGFuIGRhdGEtYWN0aW9uPVwic2VsZWN0WWVhclwiIGNsYXNzPVwieWVhcicrKGMuaXNTYW1lKGUsXCJ5XCIpJiYhbT9cIiBhY3RpdmVcIjpcIlwiKSsoUShjLFwieVwiKT9cIlwiOlwiIGRpc2FibGVkXCIpKydcIj4nK2MueWVhcigpK1wiPC9zcGFuPlwiLGMuYWRkKDEsXCJ5XCIpO2EuZmluZChcInRkXCIpLmh0bWwoaCl9LFU9ZnVuY3Rpb24oKXt2YXIgYT1vLmZpbmQoXCIuZGF0ZXBpY2tlci1kZWNhZGVzXCIpLGM9YS5maW5kKFwidGhcIiksZz1iKHt5OmYueWVhcigpLWYueWVhcigpJTEwMC0xfSksaD1nLmNsb25lKCkuYWRkKDEwMCxcInlcIiksaT1nLmNsb25lKCksaj1cIlwiO2ZvcihjLmVxKDApLmZpbmQoXCJzcGFuXCIpLmF0dHIoXCJ0aXRsZVwiLGQudG9vbHRpcHMucHJldkNlbnR1cnkpLGMuZXEoMikuZmluZChcInNwYW5cIikuYXR0cihcInRpdGxlXCIsZC50b29sdGlwcy5uZXh0Q2VudHVyeSksYS5maW5kKFwiLmRpc2FibGVkXCIpLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIiksKGcuaXNTYW1lKGIoe3k6MTkwMH0pKXx8ZC5taW5EYXRlJiZkLm1pbkRhdGUuaXNBZnRlcihnLFwieVwiKSkmJmMuZXEoMCkuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxjLmVxKDEpLnRleHQoZy55ZWFyKCkrXCItXCIraC55ZWFyKCkpLChnLmlzU2FtZShiKHt5OjJlM30pKXx8ZC5tYXhEYXRlJiZkLm1heERhdGUuaXNCZWZvcmUoaCxcInlcIikpJiZjLmVxKDIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7IWcuaXNBZnRlcihoLFwieVwiKTspais9JzxzcGFuIGRhdGEtYWN0aW9uPVwic2VsZWN0RGVjYWRlXCIgY2xhc3M9XCJkZWNhZGUnKyhnLmlzU2FtZShlLFwieVwiKT9cIiBhY3RpdmVcIjpcIlwiKSsoUShnLFwieVwiKT9cIlwiOlwiIGRpc2FibGVkXCIpKydcIiBkYXRhLXNlbGVjdGlvbj1cIicrKGcueWVhcigpKzYpKydcIj4nKyhnLnllYXIoKSsxKStcIiAtIFwiKyhnLnllYXIoKSsxMikrXCI8L3NwYW4+XCIsZy5hZGQoMTIsXCJ5XCIpO2orPVwiPHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+XCIsYS5maW5kKFwidGRcIikuaHRtbChqKSxjLmVxKDEpLnRleHQoaS55ZWFyKCkrMStcIi1cIitnLnllYXIoKSl9LFY9ZnVuY3Rpb24oKXt2YXIgYixjLGcsaCxpPW8uZmluZChcIi5kYXRlcGlja2VyLWRheXNcIiksaj1pLmZpbmQoXCJ0aFwiKSxrPVtdO2lmKEEoKSl7Zm9yKGouZXEoMCkuZmluZChcInNwYW5cIikuYXR0cihcInRpdGxlXCIsZC50b29sdGlwcy5wcmV2TW9udGgpLGouZXEoMSkuYXR0cihcInRpdGxlXCIsZC50b29sdGlwcy5zZWxlY3RNb250aCksai5lcSgyKS5maW5kKFwic3BhblwiKS5hdHRyKFwidGl0bGVcIixkLnRvb2x0aXBzLm5leHRNb250aCksaS5maW5kKFwiLmRpc2FibGVkXCIpLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIiksai5lcSgxKS50ZXh0KGYuZm9ybWF0KGQuZGF5Vmlld0hlYWRlckZvcm1hdCkpLFEoZi5jbG9uZSgpLnN1YnRyYWN0KDEsXCJNXCIpLFwiTVwiKXx8ai5lcSgwKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLFEoZi5jbG9uZSgpLmFkZCgxLFwiTVwiKSxcIk1cIil8fGouZXEoMikuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxiPWYuY2xvbmUoKS5zdGFydE9mKFwiTVwiKS5zdGFydE9mKFwid1wiKS5zdGFydE9mKFwiZFwiKSxoPTA7NDI+aDtoKyspMD09PWIud2Vla2RheSgpJiYoYz1hKFwiPHRyPlwiKSxkLmNhbGVuZGFyV2Vla3MmJmMuYXBwZW5kKCc8dGQgY2xhc3M9XCJjd1wiPicrYi53ZWVrKCkrXCI8L3RkPlwiKSxrLnB1c2goYykpLGc9XCJcIixiLmlzQmVmb3JlKGYsXCJNXCIpJiYoZys9XCIgb2xkXCIpLGIuaXNBZnRlcihmLFwiTVwiKSYmKGcrPVwiIG5ld1wiKSxiLmlzU2FtZShlLFwiZFwiKSYmIW0mJihnKz1cIiBhY3RpdmVcIiksUShiLFwiZFwiKXx8KGcrPVwiIGRpc2FibGVkXCIpLGIuaXNTYW1lKHgoKSxcImRcIikmJihnKz1cIiB0b2RheVwiKSwoMD09PWIuZGF5KCl8fDY9PT1iLmRheSgpKSYmKGcrPVwiIHdlZWtlbmRcIiksYy5hcHBlbmQoJzx0ZCBkYXRhLWFjdGlvbj1cInNlbGVjdERheVwiIGRhdGEtZGF5PVwiJytiLmZvcm1hdChcIkxcIikrJ1wiIGNsYXNzPVwiZGF5JytnKydcIj4nK2IuZGF0ZSgpK1wiPC90ZD5cIiksYi5hZGQoMSxcImRcIik7aS5maW5kKFwidGJvZHlcIikuZW1wdHkoKS5hcHBlbmQoayksUygpLFQoKSxVKCl9fSxXPWZ1bmN0aW9uKCl7dmFyIGI9by5maW5kKFwiLnRpbWVwaWNrZXItaG91cnMgdGFibGVcIiksYz1mLmNsb25lKCkuc3RhcnRPZihcImRcIiksZD1bXSxlPWEoXCI8dHI+XCIpO2ZvcihmLmhvdXIoKT4xMSYmIWgmJmMuaG91cigxMik7Yy5pc1NhbWUoZixcImRcIikmJihofHxmLmhvdXIoKTwxMiYmYy5ob3VyKCk8MTJ8fGYuaG91cigpPjExKTspYy5ob3VyKCklND09PTAmJihlPWEoXCI8dHI+XCIpLGQucHVzaChlKSksZS5hcHBlbmQoJzx0ZCBkYXRhLWFjdGlvbj1cInNlbGVjdEhvdXJcIiBjbGFzcz1cImhvdXInKyhRKGMsXCJoXCIpP1wiXCI6XCIgZGlzYWJsZWRcIikrJ1wiPicrYy5mb3JtYXQoaD9cIkhIXCI6XCJoaFwiKStcIjwvdGQ+XCIpLGMuYWRkKDEsXCJoXCIpO2IuZW1wdHkoKS5hcHBlbmQoZCl9LFg9ZnVuY3Rpb24oKXtmb3IodmFyIGI9by5maW5kKFwiLnRpbWVwaWNrZXItbWludXRlcyB0YWJsZVwiKSxjPWYuY2xvbmUoKS5zdGFydE9mKFwiaFwiKSxlPVtdLGc9YShcIjx0cj5cIiksaD0xPT09ZC5zdGVwcGluZz81OmQuc3RlcHBpbmc7Zi5pc1NhbWUoYyxcImhcIik7KWMubWludXRlKCklKDQqaCk9PT0wJiYoZz1hKFwiPHRyPlwiKSxlLnB1c2goZykpLGcuYXBwZW5kKCc8dGQgZGF0YS1hY3Rpb249XCJzZWxlY3RNaW51dGVcIiBjbGFzcz1cIm1pbnV0ZScrKFEoYyxcIm1cIik/XCJcIjpcIiBkaXNhYmxlZFwiKSsnXCI+JytjLmZvcm1hdChcIm1tXCIpK1wiPC90ZD5cIiksYy5hZGQoaCxcIm1cIik7Yi5lbXB0eSgpLmFwcGVuZChlKX0sWT1mdW5jdGlvbigpe2Zvcih2YXIgYj1vLmZpbmQoXCIudGltZXBpY2tlci1zZWNvbmRzIHRhYmxlXCIpLGM9Zi5jbG9uZSgpLnN0YXJ0T2YoXCJtXCIpLGQ9W10sZT1hKFwiPHRyPlwiKTtmLmlzU2FtZShjLFwibVwiKTspYy5zZWNvbmQoKSUyMD09PTAmJihlPWEoXCI8dHI+XCIpLGQucHVzaChlKSksZS5hcHBlbmQoJzx0ZCBkYXRhLWFjdGlvbj1cInNlbGVjdFNlY29uZFwiIGNsYXNzPVwic2Vjb25kJysoUShjLFwic1wiKT9cIlwiOlwiIGRpc2FibGVkXCIpKydcIj4nK2MuZm9ybWF0KFwic3NcIikrXCI8L3RkPlwiKSxjLmFkZCg1LFwic1wiKTtiLmVtcHR5KCkuYXBwZW5kKGQpfSxaPWZ1bmN0aW9uKCl7dmFyIGEsYixjPW8uZmluZChcIi50aW1lcGlja2VyIHNwYW5bZGF0YS10aW1lLWNvbXBvbmVudF1cIik7aHx8KGE9by5maW5kKFwiLnRpbWVwaWNrZXIgW2RhdGEtYWN0aW9uPXRvZ2dsZVBlcmlvZF1cIiksYj1lLmNsb25lKCkuYWRkKGUuaG91cnMoKT49MTI/LTEyOjEyLFwiaFwiKSxhLnRleHQoZS5mb3JtYXQoXCJBXCIpKSxRKGIsXCJoXCIpP2EucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTphLmFkZENsYXNzKFwiZGlzYWJsZWRcIikpLGMuZmlsdGVyKFwiW2RhdGEtdGltZS1jb21wb25lbnQ9aG91cnNdXCIpLnRleHQoZS5mb3JtYXQoaD9cIkhIXCI6XCJoaFwiKSksYy5maWx0ZXIoXCJbZGF0YS10aW1lLWNvbXBvbmVudD1taW51dGVzXVwiKS50ZXh0KGUuZm9ybWF0KFwibW1cIikpLGMuZmlsdGVyKFwiW2RhdGEtdGltZS1jb21wb25lbnQ9c2Vjb25kc11cIikudGV4dChlLmZvcm1hdChcInNzXCIpKSxXKCksWCgpLFkoKX0sJD1mdW5jdGlvbigpe28mJihWKCksWigpKX0sXz1mdW5jdGlvbihhKXt2YXIgYj1tP251bGw6ZTtyZXR1cm4gYT8oYT1hLmNsb25lKCkubG9jYWxlKGQubG9jYWxlKSwxIT09ZC5zdGVwcGluZyYmYS5taW51dGVzKE1hdGgucm91bmQoYS5taW51dGVzKCkvZC5zdGVwcGluZykqZC5zdGVwcGluZyU2MCkuc2Vjb25kcygwKSx2b2lkKFEoYSk/KGU9YSxmPWUuY2xvbmUoKSxnLnZhbChlLmZvcm1hdChpKSksYy5kYXRhKFwiZGF0ZVwiLGUuZm9ybWF0KGkpKSxtPSExLCQoKSxJKHt0eXBlOlwiZHAuY2hhbmdlXCIsZGF0ZTplLmNsb25lKCksb2xkRGF0ZTpifSkpOihkLmtlZXBJbnZhbGlkfHxnLnZhbChtP1wiXCI6ZS5mb3JtYXQoaSkpLEkoe3R5cGU6XCJkcC5lcnJvclwiLGRhdGU6YX0pKSkpOihtPSEwLGcudmFsKFwiXCIpLGMuZGF0YShcImRhdGVcIixcIlwiKSxJKHt0eXBlOlwiZHAuY2hhbmdlXCIsZGF0ZTohMSxvbGREYXRlOmJ9KSx2b2lkICQoKSl9LGFhPWZ1bmN0aW9uKCl7dmFyIGI9ITE7cmV0dXJuIG8/KG8uZmluZChcIi5jb2xsYXBzZVwiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGM9YSh0aGlzKS5kYXRhKFwiY29sbGFwc2VcIik7cmV0dXJuIGMmJmMudHJhbnNpdGlvbmluZz8oYj0hMCwhMSk6ITB9KSxiP2w6KG4mJm4uaGFzQ2xhc3MoXCJidG5cIikmJm4udG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIiksby5oaWRlKCksYSh3aW5kb3cpLm9mZihcInJlc2l6ZVwiLEgpLG8ub2ZmKFwiY2xpY2tcIixcIltkYXRhLWFjdGlvbl1cIiksby5vZmYoXCJtb3VzZWRvd25cIiwhMSksby5yZW1vdmUoKSxvPSExLEkoe3R5cGU6XCJkcC5oaWRlXCIsZGF0ZTplLmNsb25lKCl9KSxnLmJsdXIoKSxsKSk6bH0sYmE9ZnVuY3Rpb24oKXtfKG51bGwpfSxjYT17bmV4dDpmdW5jdGlvbigpe3ZhciBhPXFba10ubmF2Rm5jO2YuYWRkKHFba10ubmF2U3RlcCxhKSxWKCksSihhKX0scHJldmlvdXM6ZnVuY3Rpb24oKXt2YXIgYT1xW2tdLm5hdkZuYztmLnN1YnRyYWN0KHFba10ubmF2U3RlcCxhKSxWKCksSihhKX0scGlja2VyU3dpdGNoOmZ1bmN0aW9uKCl7SygxKX0sc2VsZWN0TW9udGg6ZnVuY3Rpb24oYil7dmFyIGM9YShiLnRhcmdldCkuY2xvc2VzdChcInRib2R5XCIpLmZpbmQoXCJzcGFuXCIpLmluZGV4KGEoYi50YXJnZXQpKTtmLm1vbnRoKGMpLGs9PT1wPyhfKGUuY2xvbmUoKS55ZWFyKGYueWVhcigpKS5tb250aChmLm1vbnRoKCkpKSxkLmlubGluZXx8YWEoKSk6KEsoLTEpLFYoKSksSihcIk1cIil9LHNlbGVjdFllYXI6ZnVuY3Rpb24oYil7dmFyIGM9cGFyc2VJbnQoYShiLnRhcmdldCkudGV4dCgpLDEwKXx8MDtmLnllYXIoYyksaz09PXA/KF8oZS5jbG9uZSgpLnllYXIoZi55ZWFyKCkpKSxkLmlubGluZXx8YWEoKSk6KEsoLTEpLFYoKSksSihcIllZWVlcIil9LHNlbGVjdERlY2FkZTpmdW5jdGlvbihiKXt2YXIgYz1wYXJzZUludChhKGIudGFyZ2V0KS5kYXRhKFwic2VsZWN0aW9uXCIpLDEwKXx8MDtmLnllYXIoYyksaz09PXA/KF8oZS5jbG9uZSgpLnllYXIoZi55ZWFyKCkpKSxkLmlubGluZXx8YWEoKSk6KEsoLTEpLFYoKSksSihcIllZWVlcIil9LHNlbGVjdERheTpmdW5jdGlvbihiKXt2YXIgYz1mLmNsb25lKCk7YShiLnRhcmdldCkuaXMoXCIub2xkXCIpJiZjLnN1YnRyYWN0KDEsXCJNXCIpLGEoYi50YXJnZXQpLmlzKFwiLm5ld1wiKSYmYy5hZGQoMSxcIk1cIiksXyhjLmRhdGUocGFyc2VJbnQoYShiLnRhcmdldCkudGV4dCgpLDEwKSkpLHooKXx8ZC5rZWVwT3Blbnx8ZC5pbmxpbmV8fGFhKCl9LGluY3JlbWVudEhvdXJzOmZ1bmN0aW9uKCl7dmFyIGE9ZS5jbG9uZSgpLmFkZCgxLFwiaFwiKTtRKGEsXCJoXCIpJiZfKGEpfSxpbmNyZW1lbnRNaW51dGVzOmZ1bmN0aW9uKCl7dmFyIGE9ZS5jbG9uZSgpLmFkZChkLnN0ZXBwaW5nLFwibVwiKTtRKGEsXCJtXCIpJiZfKGEpfSxpbmNyZW1lbnRTZWNvbmRzOmZ1bmN0aW9uKCl7dmFyIGE9ZS5jbG9uZSgpLmFkZCgxLFwic1wiKTtRKGEsXCJzXCIpJiZfKGEpfSxkZWNyZW1lbnRIb3VyczpmdW5jdGlvbigpe3ZhciBhPWUuY2xvbmUoKS5zdWJ0cmFjdCgxLFwiaFwiKTtRKGEsXCJoXCIpJiZfKGEpfSxkZWNyZW1lbnRNaW51dGVzOmZ1bmN0aW9uKCl7dmFyIGE9ZS5jbG9uZSgpLnN1YnRyYWN0KGQuc3RlcHBpbmcsXCJtXCIpO1EoYSxcIm1cIikmJl8oYSl9LGRlY3JlbWVudFNlY29uZHM6ZnVuY3Rpb24oKXt2YXIgYT1lLmNsb25lKCkuc3VidHJhY3QoMSxcInNcIik7UShhLFwic1wiKSYmXyhhKX0sdG9nZ2xlUGVyaW9kOmZ1bmN0aW9uKCl7XyhlLmNsb25lKCkuYWRkKGUuaG91cnMoKT49MTI/LTEyOjEyLFwiaFwiKSl9LHRvZ2dsZVBpY2tlcjpmdW5jdGlvbihiKXt2YXIgYyxlPWEoYi50YXJnZXQpLGY9ZS5jbG9zZXN0KFwidWxcIiksZz1mLmZpbmQoXCIuaW5cIiksaD1mLmZpbmQoXCIuY29sbGFwc2U6bm90KC5pbilcIik7aWYoZyYmZy5sZW5ndGgpe2lmKGM9Zy5kYXRhKFwiY29sbGFwc2VcIiksYyYmYy50cmFuc2l0aW9uaW5nKXJldHVybjtnLmNvbGxhcHNlPyhnLmNvbGxhcHNlKFwiaGlkZVwiKSxoLmNvbGxhcHNlKFwic2hvd1wiKSk6KGcucmVtb3ZlQ2xhc3MoXCJpblwiKSxoLmFkZENsYXNzKFwiaW5cIikpLGUuaXMoXCJzcGFuXCIpP2UudG9nZ2xlQ2xhc3MoZC5pY29ucy50aW1lK1wiIFwiK2QuaWNvbnMuZGF0ZSk6ZS5maW5kKFwic3BhblwiKS50b2dnbGVDbGFzcyhkLmljb25zLnRpbWUrXCIgXCIrZC5pY29ucy5kYXRlKX19LHNob3dQaWNrZXI6ZnVuY3Rpb24oKXtvLmZpbmQoXCIudGltZXBpY2tlciA+IGRpdjpub3QoLnRpbWVwaWNrZXItcGlja2VyKVwiKS5oaWRlKCksby5maW5kKFwiLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItcGlja2VyXCIpLnNob3coKX0sc2hvd0hvdXJzOmZ1bmN0aW9uKCl7by5maW5kKFwiLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItcGlja2VyXCIpLmhpZGUoKSxvLmZpbmQoXCIudGltZXBpY2tlciAudGltZXBpY2tlci1ob3Vyc1wiKS5zaG93KCl9LHNob3dNaW51dGVzOmZ1bmN0aW9uKCl7by5maW5kKFwiLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItcGlja2VyXCIpLmhpZGUoKSxvLmZpbmQoXCIudGltZXBpY2tlciAudGltZXBpY2tlci1taW51dGVzXCIpLnNob3coKX0sc2hvd1NlY29uZHM6ZnVuY3Rpb24oKXtvLmZpbmQoXCIudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXJcIikuaGlkZSgpLG8uZmluZChcIi50aW1lcGlja2VyIC50aW1lcGlja2VyLXNlY29uZHNcIikuc2hvdygpfSxzZWxlY3RIb3VyOmZ1bmN0aW9uKGIpe3ZhciBjPXBhcnNlSW50KGEoYi50YXJnZXQpLnRleHQoKSwxMCk7aHx8KGUuaG91cnMoKT49MTI/MTIhPT1jJiYoYys9MTIpOjEyPT09YyYmKGM9MCkpLF8oZS5jbG9uZSgpLmhvdXJzKGMpKSxjYS5zaG93UGlja2VyLmNhbGwobCl9LHNlbGVjdE1pbnV0ZTpmdW5jdGlvbihiKXtfKGUuY2xvbmUoKS5taW51dGVzKHBhcnNlSW50KGEoYi50YXJnZXQpLnRleHQoKSwxMCkpKSxjYS5zaG93UGlja2VyLmNhbGwobCl9LHNlbGVjdFNlY29uZDpmdW5jdGlvbihiKXtfKGUuY2xvbmUoKS5zZWNvbmRzKHBhcnNlSW50KGEoYi50YXJnZXQpLnRleHQoKSwxMCkpKSxjYS5zaG93UGlja2VyLmNhbGwobCl9LGNsZWFyOmJhLHRvZGF5OmZ1bmN0aW9uKCl7dmFyIGE9eCgpO1EoYSxcImRcIikmJl8oYSl9LGNsb3NlOmFhfSxkYT1mdW5jdGlvbihiKXtyZXR1cm4gYShiLmN1cnJlbnRUYXJnZXQpLmlzKFwiLmRpc2FibGVkXCIpPyExOihjYVthKGIuY3VycmVudFRhcmdldCkuZGF0YShcImFjdGlvblwiKV0uYXBwbHkobCxhcmd1bWVudHMpLCExKX0sZWE9ZnVuY3Rpb24oKXt2YXIgYixjPXt5ZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBhLm1vbnRoKDApLmRhdGUoMSkuaG91cnMoMCkuc2Vjb25kcygwKS5taW51dGVzKDApfSxtb250aDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kYXRlKDEpLmhvdXJzKDApLnNlY29uZHMoMCkubWludXRlcygwKX0sZGF5OmZ1bmN0aW9uKGEpe3JldHVybiBhLmhvdXJzKDApLnNlY29uZHMoMCkubWludXRlcygwKX0saG91cjpmdW5jdGlvbihhKXtyZXR1cm4gYS5zZWNvbmRzKDApLm1pbnV0ZXMoMCl9LG1pbnV0ZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5zZWNvbmRzKDApfX07cmV0dXJuIGcucHJvcChcImRpc2FibGVkXCIpfHwhZC5pZ25vcmVSZWFkb25seSYmZy5wcm9wKFwicmVhZG9ubHlcIil8fG8/bDoodm9pZCAwIT09Zy52YWwoKSYmMCE9PWcudmFsKCkudHJpbSgpLmxlbmd0aD9fKGdhKGcudmFsKCkudHJpbSgpKSk6ZC51c2VDdXJyZW50JiZtJiYoZy5pcyhcImlucHV0XCIpJiYwPT09Zy52YWwoKS50cmltKCkubGVuZ3RofHxkLmlubGluZSkmJihiPXgoKSxcInN0cmluZ1wiPT10eXBlb2YgZC51c2VDdXJyZW50JiYoYj1jW2QudXNlQ3VycmVudF0oYikpLF8oYikpLG89RigpLEwoKSxSKCksby5maW5kKFwiLnRpbWVwaWNrZXItaG91cnNcIikuaGlkZSgpLG8uZmluZChcIi50aW1lcGlja2VyLW1pbnV0ZXNcIikuaGlkZSgpLG8uZmluZChcIi50aW1lcGlja2VyLXNlY29uZHNcIikuaGlkZSgpLCQoKSxLKCksYSh3aW5kb3cpLm9uKFwicmVzaXplXCIsSCksby5vbihcImNsaWNrXCIsXCJbZGF0YS1hY3Rpb25dXCIsZGEpLG8ub24oXCJtb3VzZWRvd25cIiwhMSksbiYmbi5oYXNDbGFzcyhcImJ0blwiKSYmbi50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKSxvLnNob3coKSxIKCksZC5mb2N1c09uU2hvdyYmIWcuaXMoXCI6Zm9jdXNcIikmJmcuZm9jdXMoKSxJKHt0eXBlOlwiZHAuc2hvd1wifSksbCl9LGZhPWZ1bmN0aW9uKCl7cmV0dXJuIG8/YWEoKTplYSgpfSxnYT1mdW5jdGlvbihhKXtyZXR1cm4gYT12b2lkIDA9PT1kLnBhcnNlSW5wdXREYXRlP2IuaXNNb21lbnQoYSl8fGEgaW5zdGFuY2VvZiBEYXRlP2IoYSk6eChhKTpkLnBhcnNlSW5wdXREYXRlKGEpLGEubG9jYWxlKGQubG9jYWxlKSxhfSxoYT1mdW5jdGlvbihhKXt2YXIgYixjLGUsZixnPW51bGwsaD1bXSxpPXt9LGo9YS53aGljaCxrPVwicFwiO3dbal09aztmb3IoYiBpbiB3KXcuaGFzT3duUHJvcGVydHkoYikmJndbYl09PT1rJiYoaC5wdXNoKGIpLHBhcnNlSW50KGIsMTApIT09aiYmKGlbYl09ITApKTtmb3IoYiBpbiBkLmtleUJpbmRzKWlmKGQua2V5QmluZHMuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGQua2V5QmluZHNbYl0mJihlPWIuc3BsaXQoXCIgXCIpLGUubGVuZ3RoPT09aC5sZW5ndGgmJnZbal09PT1lW2UubGVuZ3RoLTFdKSl7Zm9yKGY9ITAsYz1lLmxlbmd0aC0yO2M+PTA7Yy0tKWlmKCEodltlW2NdXWluIGkpKXtmPSExO2JyZWFrfWlmKGYpe2c9ZC5rZXlCaW5kc1tiXTticmVha319ZyYmKGcuY2FsbChsLG8pLGEuc3RvcFByb3BhZ2F0aW9uKCksYS5wcmV2ZW50RGVmYXVsdCgpKX0saWE9ZnVuY3Rpb24oYSl7d1thLndoaWNoXT1cInJcIixhLnN0b3BQcm9wYWdhdGlvbigpLGEucHJldmVudERlZmF1bHQoKX0samE9ZnVuY3Rpb24oYil7dmFyIGM9YShiLnRhcmdldCkudmFsKCkudHJpbSgpLGQ9Yz9nYShjKTpudWxsO3JldHVybiBfKGQpLGIuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksITF9LGthPWZ1bmN0aW9uKCl7Zy5vbih7Y2hhbmdlOmphLGJsdXI6ZC5kZWJ1Zz9cIlwiOmFhLGtleWRvd246aGEsa2V5dXA6aWEsZm9jdXM6ZC5hbGxvd0lucHV0VG9nZ2xlP2VhOlwiXCJ9KSxjLmlzKFwiaW5wdXRcIik/Zy5vbih7Zm9jdXM6ZWF9KTpuJiYobi5vbihcImNsaWNrXCIsZmEpLG4ub24oXCJtb3VzZWRvd25cIiwhMSkpfSxsYT1mdW5jdGlvbigpe2cub2ZmKHtjaGFuZ2U6amEsYmx1cjpibHVyLGtleWRvd246aGEsa2V5dXA6aWEsZm9jdXM6ZC5hbGxvd0lucHV0VG9nZ2xlP2FhOlwiXCJ9KSxjLmlzKFwiaW5wdXRcIik/Zy5vZmYoe2ZvY3VzOmVhfSk6biYmKG4ub2ZmKFwiY2xpY2tcIixmYSksbi5vZmYoXCJtb3VzZWRvd25cIiwhMSkpfSxtYT1mdW5jdGlvbihiKXt2YXIgYz17fTtyZXR1cm4gYS5lYWNoKGIsZnVuY3Rpb24oKXt2YXIgYT1nYSh0aGlzKTthLmlzVmFsaWQoKSYmKGNbYS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpXT0hMCl9KSxPYmplY3Qua2V5cyhjKS5sZW5ndGg/YzohMX0sbmE9ZnVuY3Rpb24oYil7dmFyIGM9e307cmV0dXJuIGEuZWFjaChiLGZ1bmN0aW9uKCl7Y1t0aGlzXT0hMH0pLE9iamVjdC5rZXlzKGMpLmxlbmd0aD9jOiExfSxvYT1mdW5jdGlvbigpe3ZhciBhPWQuZm9ybWF0fHxcIkwgTFRcIjtpPWEucmVwbGFjZSgvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nLGZ1bmN0aW9uKGEpe3ZhciBiPWUubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KGEpfHxhO3JldHVybiBiLnJlcGxhY2UoLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZyxmdW5jdGlvbihhKXtyZXR1cm4gZS5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoYSl8fGF9KX0pLGo9ZC5leHRyYUZvcm1hdHM/ZC5leHRyYUZvcm1hdHMuc2xpY2UoKTpbXSxqLmluZGV4T2YoYSk8MCYmai5pbmRleE9mKGkpPDAmJmoucHVzaChpKSxoPWkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiYVwiKTwxJiZpLnJlcGxhY2UoL1xcWy4qP1xcXS9nLFwiXCIpLmluZGV4T2YoXCJoXCIpPDEseShcInlcIikmJihwPTIpLHkoXCJNXCIpJiYocD0xKSx5KFwiZFwiKSYmKHA9MCksaz1NYXRoLm1heChwLGspLG18fF8oZSl9O2lmKGwuZGVzdHJveT1mdW5jdGlvbigpe2FhKCksbGEoKSxjLnJlbW92ZURhdGEoXCJEYXRlVGltZVBpY2tlclwiKSxjLnJlbW92ZURhdGEoXCJkYXRlXCIpfSxsLnRvZ2dsZT1mYSxsLnNob3c9ZWEsbC5oaWRlPWFhLGwuZGlzYWJsZT1mdW5jdGlvbigpe3JldHVybiBhYSgpLG4mJm4uaGFzQ2xhc3MoXCJidG5cIikmJm4uYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxnLnByb3AoXCJkaXNhYmxlZFwiLCEwKSxsfSxsLmVuYWJsZT1mdW5jdGlvbigpe3JldHVybiBuJiZuLmhhc0NsYXNzKFwiYnRuXCIpJiZuLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIiksZy5wcm9wKFwiZGlzYWJsZWRcIiwhMSksbH0sbC5pZ25vcmVSZWFkb25seT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5pZ25vcmVSZWFkb25seTtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImlnbm9yZVJlYWRvbmx5ICgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5pZ25vcmVSZWFkb25seT1hLGx9LGwub3B0aW9ucz1mdW5jdGlvbihiKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gYS5leHRlbmQoITAse30sZCk7aWYoIShiIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9ucygpIG9wdGlvbnMgcGFyYW1ldGVyIHNob3VsZCBiZSBhbiBvYmplY3RcIik7cmV0dXJuIGEuZXh0ZW5kKCEwLGQsYiksYS5lYWNoKGQsZnVuY3Rpb24oYSxiKXtpZih2b2lkIDA9PT1sW2FdKXRocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gXCIrYStcIiBpcyBub3QgcmVjb2duaXplZCFcIik7bFthXShiKX0pLGx9LGwuZGF0ZT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbT9udWxsOmUuY2xvbmUoKTtpZighKG51bGw9PT1hfHxcInN0cmluZ1wiPT10eXBlb2YgYXx8Yi5pc01vbWVudChhKXx8YSBpbnN0YW5jZW9mIERhdGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJkYXRlKCkgcGFyYW1ldGVyIG11c3QgYmUgb25lIG9mIFtudWxsLCBzdHJpbmcsIG1vbWVudCBvciBEYXRlXVwiKTtyZXR1cm4gXyhudWxsPT09YT9udWxsOmdhKGEpKSxsfSxsLmZvcm1hdD1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5mb3JtYXQ7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihcImJvb2xlYW5cIiE9dHlwZW9mIGF8fGEhPT0hMSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImZvcm1hdCgpIGV4cGVjdHMgYSBzdGluZyBvciBib29sZWFuOmZhbHNlIHBhcmFtZXRlciBcIithKTtyZXR1cm4gZC5mb3JtYXQ9YSxpJiZvYSgpLGx9LGwudGltZVpvbmU9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoP2QudGltZVpvbmU6KGQudGltZVpvbmU9YSxsKX0sbC5kYXlWaWV3SGVhZGVyRm9ybWF0PWZ1bmN0aW9uKGEpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkLmRheVZpZXdIZWFkZXJGb3JtYXQ7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImRheVZpZXdIZWFkZXJGb3JtYXQoKSBleHBlY3RzIGEgc3RyaW5nIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5kYXlWaWV3SGVhZGVyRm9ybWF0PWEsbH0sbC5leHRyYUZvcm1hdHM9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuZXh0cmFGb3JtYXRzO2lmKGEhPT0hMSYmIShhIGluc3RhbmNlb2YgQXJyYXkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJleHRyYUZvcm1hdHMoKSBleHBlY3RzIGFuIGFycmF5IG9yIGZhbHNlIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5leHRyYUZvcm1hdHM9YSxqJiZvYSgpLGx9LGwuZGlzYWJsZWREYXRlcz1mdW5jdGlvbihiKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5kaXNhYmxlZERhdGVzP2EuZXh0ZW5kKHt9LGQuZGlzYWJsZWREYXRlcyk6ZC5kaXNhYmxlZERhdGVzO2lmKCFiKXJldHVybiBkLmRpc2FibGVkRGF0ZXM9ITEsJCgpLGw7aWYoIShiIGluc3RhbmNlb2YgQXJyYXkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJkaXNhYmxlZERhdGVzKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXJcIik7cmV0dXJuIGQuZGlzYWJsZWREYXRlcz1tYShiKSxkLmVuYWJsZWREYXRlcz0hMSwkKCksbH0sbC5lbmFibGVkRGF0ZXM9ZnVuY3Rpb24oYil7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuZW5hYmxlZERhdGVzP2EuZXh0ZW5kKHt9LGQuZW5hYmxlZERhdGVzKTpkLmVuYWJsZWREYXRlcztpZighYilyZXR1cm4gZC5lbmFibGVkRGF0ZXM9ITEsJCgpLGw7aWYoIShiIGluc3RhbmNlb2YgQXJyYXkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmFibGVkRGF0ZXMoKSBleHBlY3RzIGFuIGFycmF5IHBhcmFtZXRlclwiKTtyZXR1cm4gZC5lbmFibGVkRGF0ZXM9bWEoYiksZC5kaXNhYmxlZERhdGVzPSExLCQoKSxsfSxsLmRheXNPZldlZWtEaXNhYmxlZD1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5kYXlzT2ZXZWVrRGlzYWJsZWQuc3BsaWNlKDApO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgYSYmIWEpcmV0dXJuIGQuZGF5c09mV2Vla0Rpc2FibGVkPSExLCQoKSxsO2lmKCEoYSBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZGF5c09mV2Vla0Rpc2FibGVkKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXJcIik7aWYoZC5kYXlzT2ZXZWVrRGlzYWJsZWQ9YS5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj1wYXJzZUludChiLDEwKSxiPjZ8fDA+Ynx8aXNOYU4oYik/YTooLTE9PT1hLmluZGV4T2YoYikmJmEucHVzaChiKSxhKX0sW10pLnNvcnQoKSxkLnVzZUN1cnJlbnQmJiFkLmtlZXBJbnZhbGlkKXtmb3IodmFyIGI9MDshUShlLFwiZFwiKTspe2lmKGUuYWRkKDEsXCJkXCIpLDc9PT1iKXRocm93XCJUcmllZCA3IHRpbWVzIHRvIGZpbmQgYSB2YWxpZCBkYXRlXCI7YisrfV8oZSl9cmV0dXJuICQoKSxsfSxsLm1heERhdGU9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQubWF4RGF0ZT9kLm1heERhdGUuY2xvbmUoKTpkLm1heERhdGU7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBhJiZhPT09ITEpcmV0dXJuIGQubWF4RGF0ZT0hMSwkKCksbDtcInN0cmluZ1wiPT10eXBlb2YgYSYmKFwibm93XCI9PT1hfHxcIm1vbWVudFwiPT09YSkmJihhPXgoKSk7dmFyIGI9Z2EoYSk7aWYoIWIuaXNWYWxpZCgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJtYXhEYXRlKCkgQ291bGQgbm90IHBhcnNlIGRhdGUgcGFyYW1ldGVyOiBcIithKTtpZihkLm1pbkRhdGUmJmIuaXNCZWZvcmUoZC5taW5EYXRlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwibWF4RGF0ZSgpIGRhdGUgcGFyYW1ldGVyIGlzIGJlZm9yZSBvcHRpb25zLm1pbkRhdGU6IFwiK2IuZm9ybWF0KGkpKTtyZXR1cm4gZC5tYXhEYXRlPWIsZC51c2VDdXJyZW50JiYhZC5rZWVwSW52YWxpZCYmZS5pc0FmdGVyKGEpJiZfKGQubWF4RGF0ZSksZi5pc0FmdGVyKGIpJiYoZj1iLmNsb25lKCkuc3VidHJhY3QoZC5zdGVwcGluZyxcIm1cIikpLCQoKSxsfSxsLm1pbkRhdGU9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQubWluRGF0ZT9kLm1pbkRhdGUuY2xvbmUoKTpkLm1pbkRhdGU7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBhJiZhPT09ITEpcmV0dXJuIGQubWluRGF0ZT0hMSwkKCksbDtcInN0cmluZ1wiPT10eXBlb2YgYSYmKFwibm93XCI9PT1hfHxcIm1vbWVudFwiPT09YSkmJihhPXgoKSk7dmFyIGI9Z2EoYSk7aWYoIWIuaXNWYWxpZCgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJtaW5EYXRlKCkgQ291bGQgbm90IHBhcnNlIGRhdGUgcGFyYW1ldGVyOiBcIithKTtpZihkLm1heERhdGUmJmIuaXNBZnRlcihkLm1heERhdGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJtaW5EYXRlKCkgZGF0ZSBwYXJhbWV0ZXIgaXMgYWZ0ZXIgb3B0aW9ucy5tYXhEYXRlOiBcIitiLmZvcm1hdChpKSk7cmV0dXJuIGQubWluRGF0ZT1iLGQudXNlQ3VycmVudCYmIWQua2VlcEludmFsaWQmJmUuaXNCZWZvcmUoYSkmJl8oZC5taW5EYXRlKSxmLmlzQmVmb3JlKGIpJiYoZj1iLmNsb25lKCkuYWRkKGQuc3RlcHBpbmcsXCJtXCIpKSwkKCksbH0sbC5kZWZhdWx0RGF0ZT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5kZWZhdWx0RGF0ZT9kLmRlZmF1bHREYXRlLmNsb25lKCk6ZC5kZWZhdWx0RGF0ZTtpZighYSlyZXR1cm4gZC5kZWZhdWx0RGF0ZT0hMSxsO1wic3RyaW5nXCI9PXR5cGVvZiBhJiYoXCJub3dcIj09PWF8fFwibW9tZW50XCI9PT1hKSYmKGE9eCgpKTt2YXIgYj1nYShhKTtpZighYi5pc1ZhbGlkKCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImRlZmF1bHREYXRlKCkgQ291bGQgbm90IHBhcnNlIGRhdGUgcGFyYW1ldGVyOiBcIithKTtpZighUShiKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZGVmYXVsdERhdGUoKSBkYXRlIHBhc3NlZCBpcyBpbnZhbGlkIGFjY29yZGluZyB0byBjb21wb25lbnQgc2V0dXAgdmFsaWRhdGlvbnNcIik7cmV0dXJuIGQuZGVmYXVsdERhdGU9YiwoZC5kZWZhdWx0RGF0ZSYmZC5pbmxpbmV8fFwiXCI9PT1nLnZhbCgpLnRyaW0oKSkmJl8oZC5kZWZhdWx0RGF0ZSksbH0sbC5sb2NhbGU9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQubG9jYWxlO2lmKCFiLmxvY2FsZURhdGEoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImxvY2FsZSgpIGxvY2FsZSBcIithK1wiIGlzIG5vdCBsb2FkZWQgZnJvbSBtb21lbnQgbG9jYWxlcyFcIik7cmV0dXJuIGQubG9jYWxlPWEsZS5sb2NhbGUoZC5sb2NhbGUpLGYubG9jYWxlKGQubG9jYWxlKSxpJiZvYSgpLG8mJihhYSgpLGVhKCkpLGx9LGwuc3RlcHBpbmc9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoP2Quc3RlcHBpbmc6KGE9cGFyc2VJbnQoYSwxMCksKGlzTmFOKGEpfHwxPmEpJiYoYT0xKSxkLnN0ZXBwaW5nPWEsbCl9LGwudXNlQ3VycmVudD1mdW5jdGlvbihhKXt2YXIgYj1bXCJ5ZWFyXCIsXCJtb250aFwiLFwiZGF5XCIsXCJob3VyXCIsXCJtaW51dGVcIl07aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQudXNlQ3VycmVudDtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEmJlwic3RyaW5nXCIhPXR5cGVvZiBhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJ1c2VDdXJyZW50KCkgZXhwZWN0cyBhIGJvb2xlYW4gb3Igc3RyaW5nIHBhcmFtZXRlclwiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgYSYmLTE9PT1iLmluZGV4T2YoYS50b0xvd2VyQ2FzZSgpKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwidXNlQ3VycmVudCgpIGV4cGVjdHMgYSBzdHJpbmcgcGFyYW1ldGVyIG9mIFwiK2Iuam9pbihcIiwgXCIpKTtyZXR1cm4gZC51c2VDdXJyZW50PWEsbH0sbC5jb2xsYXBzZT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5jb2xsYXBzZTtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImNvbGxhcHNlKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyXCIpO3JldHVybiBkLmNvbGxhcHNlPT09YT9sOihkLmNvbGxhcHNlPWEsbyYmKGFhKCksZWEoKSksbCl9LGwuaWNvbnM9ZnVuY3Rpb24oYil7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGEuZXh0ZW5kKHt9LGQuaWNvbnMpO2lmKCEoYiBpbnN0YW5jZW9mIE9iamVjdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImljb25zKCkgZXhwZWN0cyBwYXJhbWV0ZXIgdG8gYmUgYW4gT2JqZWN0XCIpO3JldHVybiBhLmV4dGVuZChkLmljb25zLGIpLG8mJihhYSgpLGVhKCkpLGx9LGwudG9vbHRpcHM9ZnVuY3Rpb24oYil7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGEuZXh0ZW5kKHt9LGQudG9vbHRpcHMpO2lmKCEoYiBpbnN0YW5jZW9mIE9iamVjdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcInRvb2x0aXBzKCkgZXhwZWN0cyBwYXJhbWV0ZXIgdG8gYmUgYW4gT2JqZWN0XCIpO3JldHVybiBhLmV4dGVuZChkLnRvb2x0aXBzLGIpLG8mJihhYSgpLGVhKCkpLGx9LGwudXNlU3RyaWN0PWZ1bmN0aW9uKGEpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkLnVzZVN0cmljdDtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcInVzZVN0cmljdCgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlclwiKTtyZXR1cm4gZC51c2VTdHJpY3Q9YSxsfSxsLnNpZGVCeVNpZGU9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuc2lkZUJ5U2lkZTtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcInNpZGVCeVNpZGUoKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXJcIik7cmV0dXJuIGQuc2lkZUJ5U2lkZT1hLG8mJihhYSgpLGVhKCkpLGx9LGwudmlld01vZGU9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQudmlld01vZGU7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcInZpZXdNb2RlKCkgZXhwZWN0cyBhIHN0cmluZyBwYXJhbWV0ZXJcIik7aWYoLTE9PT1yLmluZGV4T2YoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcInZpZXdNb2RlKCkgcGFyYW1ldGVyIG11c3QgYmUgb25lIG9mIChcIityLmpvaW4oXCIsIFwiKStcIikgdmFsdWVcIik7cmV0dXJuIGQudmlld01vZGU9YSxrPU1hdGgubWF4KHIuaW5kZXhPZihhKSxwKSxLKCksbH0sbC50b29sYmFyUGxhY2VtZW50PWZ1bmN0aW9uKGEpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkLnRvb2xiYXJQbGFjZW1lbnQ7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcInRvb2xiYXJQbGFjZW1lbnQoKSBleHBlY3RzIGEgc3RyaW5nIHBhcmFtZXRlclwiKTtpZigtMT09PXUuaW5kZXhPZihhKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwidG9vbGJhclBsYWNlbWVudCgpIHBhcmFtZXRlciBtdXN0IGJlIG9uZSBvZiAoXCIrdS5qb2luKFwiLCBcIikrXCIpIHZhbHVlXCIpO3JldHVybiBkLnRvb2xiYXJQbGFjZW1lbnQ9YSxvJiYoYWEoKSxlYSgpKSxsfSxsLndpZGdldFBvc2l0aW9uaW5nPWZ1bmN0aW9uKGIpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBhLmV4dGVuZCh7fSxkLndpZGdldFBvc2l0aW9uaW5nKTtpZihcIltvYmplY3QgT2JqZWN0XVwiIT09e30udG9TdHJpbmcuY2FsbChiKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwid2lkZ2V0UG9zaXRpb25pbmcoKSBleHBlY3RzIGFuIG9iamVjdCB2YXJpYWJsZVwiKTtpZihiLmhvcml6b250YWwpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBiLmhvcml6b250YWwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIndpZGdldFBvc2l0aW9uaW5nKCkgaG9yaXpvbnRhbCB2YXJpYWJsZSBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKGIuaG9yaXpvbnRhbD1iLmhvcml6b250YWwudG9Mb3dlckNhc2UoKSwtMT09PXQuaW5kZXhPZihiLmhvcml6b250YWwpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJ3aWRnZXRQb3NpdGlvbmluZygpIGV4cGVjdHMgaG9yaXpvbnRhbCBwYXJhbWV0ZXIgdG8gYmUgb25lIG9mIChcIit0LmpvaW4oXCIsIFwiKStcIilcIik7ZC53aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsPWIuaG9yaXpvbnRhbH1pZihiLnZlcnRpY2FsKXtpZihcInN0cmluZ1wiIT10eXBlb2YgYi52ZXJ0aWNhbCl0aHJvdyBuZXcgVHlwZUVycm9yKFwid2lkZ2V0UG9zaXRpb25pbmcoKSB2ZXJ0aWNhbCB2YXJpYWJsZSBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKGIudmVydGljYWw9Yi52ZXJ0aWNhbC50b0xvd2VyQ2FzZSgpLC0xPT09cy5pbmRleE9mKGIudmVydGljYWwpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJ3aWRnZXRQb3NpdGlvbmluZygpIGV4cGVjdHMgdmVydGljYWwgcGFyYW1ldGVyIHRvIGJlIG9uZSBvZiAoXCIrcy5qb2luKFwiLCBcIikrXCIpXCIpO2Qud2lkZ2V0UG9zaXRpb25pbmcudmVydGljYWw9Yi52ZXJ0aWNhbH1yZXR1cm4gJCgpLGx9LGwuY2FsZW5kYXJXZWVrcz1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5jYWxlbmRhcldlZWtzO2lmKFwiYm9vbGVhblwiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsZW5kYXJXZWVrcygpIGV4cGVjdHMgcGFyYW1ldGVyIHRvIGJlIGEgYm9vbGVhbiB2YWx1ZVwiKTtyZXR1cm4gZC5jYWxlbmRhcldlZWtzPWEsJCgpLGx9LGwuc2hvd1RvZGF5QnV0dG9uPWZ1bmN0aW9uKGEpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkLnNob3dUb2RheUJ1dHRvbjtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcInNob3dUb2RheUJ1dHRvbigpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5zaG93VG9kYXlCdXR0b249YSxvJiYoYWEoKSxlYSgpKSxsfSxsLnNob3dDbGVhcj1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5zaG93Q2xlYXI7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJzaG93Q2xlYXIoKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXJcIik7cmV0dXJuIGQuc2hvd0NsZWFyPWEsbyYmKGFhKCksZWEoKSksbH0sbC53aWRnZXRQYXJlbnQ9ZnVuY3Rpb24oYil7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQud2lkZ2V0UGFyZW50O2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiJiYoYj1hKGIpKSxudWxsIT09YiYmXCJzdHJpbmdcIiE9dHlwZW9mIGImJiEoYiBpbnN0YW5jZW9mIGEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJ3aWRnZXRQYXJlbnQoKSBleHBlY3RzIGEgc3RyaW5nIG9yIGEgalF1ZXJ5IG9iamVjdCBwYXJhbWV0ZXJcIik7cmV0dXJuIGQud2lkZ2V0UGFyZW50PWIsbyYmKGFhKCksZWEoKSksbH0sbC5rZWVwT3Blbj1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5rZWVwT3BlbjtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImtlZXBPcGVuKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyXCIpO3JldHVybiBkLmtlZXBPcGVuPWEsbH0sbC5mb2N1c09uU2hvdz1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5mb2N1c09uU2hvdztpZihcImJvb2xlYW5cIiE9dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImZvY3VzT25TaG93KCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyXCIpO3JldHVybiBkLmZvY3VzT25TaG93PWEsbH0sbC5pbmxpbmU9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuaW5saW5lO2lmKFwiYm9vbGVhblwiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW5saW5lKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyXCIpO3JldHVybiBkLmlubGluZT1hLGx9LGwuY2xlYXI9ZnVuY3Rpb24oKXtyZXR1cm4gYmEoKSxsfSxsLmtleUJpbmRzPWZ1bmN0aW9uKGEpe3JldHVybiBkLmtleUJpbmRzPWEsbH0sbC5nZXRNb21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSl9LGwuZGVidWc9ZnVuY3Rpb24oYSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJkZWJ1ZygpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5kZWJ1Zz1hLGx9LGwuYWxsb3dJbnB1dFRvZ2dsZT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5hbGxvd0lucHV0VG9nZ2xlO2lmKFwiYm9vbGVhblwiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYWxsb3dJbnB1dFRvZ2dsZSgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5hbGxvd0lucHV0VG9nZ2xlPWEsbH0sbC5zaG93Q2xvc2U9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuc2hvd0Nsb3NlO2lmKFwiYm9vbGVhblwiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwic2hvd0Nsb3NlKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyXCIpO3JldHVybiBkLnNob3dDbG9zZT1hLGx9LGwua2VlcEludmFsaWQ9ZnVuY3Rpb24oYSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQua2VlcEludmFsaWQ7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJrZWVwSW52YWxpZCgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlclwiKTtyZXR1cm4gZC5rZWVwSW52YWxpZD1hLGx9LGwuZGF0ZXBpY2tlcklucHV0PWZ1bmN0aW9uKGEpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkLmRhdGVwaWNrZXJJbnB1dDtpZihcInN0cmluZ1wiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZGF0ZXBpY2tlcklucHV0KCkgZXhwZWN0cyBhIHN0cmluZyBwYXJhbWV0ZXJcIik7cmV0dXJuIGQuZGF0ZXBpY2tlcklucHV0PWEsbH0sbC5wYXJzZUlucHV0RGF0ZT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5wYXJzZUlucHV0RGF0ZTtcclxuaWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwicGFyc2VJbnB1dERhdGUoKSBzaG9sdWQgYmUgYXMgZnVuY3Rpb25cIik7cmV0dXJuIGQucGFyc2VJbnB1dERhdGU9YSxsfSxsLmRpc2FibGVkVGltZUludGVydmFscz1mdW5jdGlvbihiKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZC5kaXNhYmxlZFRpbWVJbnRlcnZhbHM/YS5leHRlbmQoe30sZC5kaXNhYmxlZFRpbWVJbnRlcnZhbHMpOmQuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzO2lmKCFiKXJldHVybiBkLmRpc2FibGVkVGltZUludGVydmFscz0hMSwkKCksbDtpZighKGIgaW5zdGFuY2VvZiBBcnJheSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImRpc2FibGVkVGltZUludGVydmFscygpIGV4cGVjdHMgYW4gYXJyYXkgcGFyYW1ldGVyXCIpO3JldHVybiBkLmRpc2FibGVkVGltZUludGVydmFscz1iLCQoKSxsfSxsLmRpc2FibGVkSG91cnM9ZnVuY3Rpb24oYil7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuZGlzYWJsZWRIb3Vycz9hLmV4dGVuZCh7fSxkLmRpc2FibGVkSG91cnMpOmQuZGlzYWJsZWRIb3VycztpZighYilyZXR1cm4gZC5kaXNhYmxlZEhvdXJzPSExLCQoKSxsO2lmKCEoYiBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZGlzYWJsZWRIb3VycygpIGV4cGVjdHMgYW4gYXJyYXkgcGFyYW1ldGVyXCIpO2lmKGQuZGlzYWJsZWRIb3Vycz1uYShiKSxkLmVuYWJsZWRIb3Vycz0hMSxkLnVzZUN1cnJlbnQmJiFkLmtlZXBJbnZhbGlkKXtmb3IodmFyIGM9MDshUShlLFwiaFwiKTspe2lmKGUuYWRkKDEsXCJoXCIpLDI0PT09Yyl0aHJvd1wiVHJpZWQgMjQgdGltZXMgdG8gZmluZCBhIHZhbGlkIGRhdGVcIjtjKyt9XyhlKX1yZXR1cm4gJCgpLGx9LGwuZW5hYmxlZEhvdXJzPWZ1bmN0aW9uKGIpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkLmVuYWJsZWRIb3Vycz9hLmV4dGVuZCh7fSxkLmVuYWJsZWRIb3Vycyk6ZC5lbmFibGVkSG91cnM7aWYoIWIpcmV0dXJuIGQuZW5hYmxlZEhvdXJzPSExLCQoKSxsO2lmKCEoYiBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5hYmxlZEhvdXJzKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXJcIik7aWYoZC5lbmFibGVkSG91cnM9bmEoYiksZC5kaXNhYmxlZEhvdXJzPSExLGQudXNlQ3VycmVudCYmIWQua2VlcEludmFsaWQpe2Zvcih2YXIgYz0wOyFRKGUsXCJoXCIpOyl7aWYoZS5hZGQoMSxcImhcIiksMjQ9PT1jKXRocm93XCJUcmllZCAyNCB0aW1lcyB0byBmaW5kIGEgdmFsaWQgZGF0ZVwiO2MrK31fKGUpfXJldHVybiAkKCksbH0sbC52aWV3RGF0ZT1mdW5jdGlvbihhKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZi5jbG9uZSgpO2lmKCFhKXJldHVybiBmPWUuY2xvbmUoKSxsO2lmKCEoXCJzdHJpbmdcIj09dHlwZW9mIGF8fGIuaXNNb21lbnQoYSl8fGEgaW5zdGFuY2VvZiBEYXRlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwidmlld0RhdGUoKSBwYXJhbWV0ZXIgbXVzdCBiZSBvbmUgb2YgW3N0cmluZywgbW9tZW50IG9yIERhdGVdXCIpO3JldHVybiBmPWdhKGEpLEooKSxsfSxjLmlzKFwiaW5wdXRcIikpZz1jO2Vsc2UgaWYoZz1jLmZpbmQoZC5kYXRlcGlja2VySW5wdXQpLDA9PT1nLnNpemUoKSlnPWMuZmluZChcImlucHV0XCIpO2Vsc2UgaWYoIWcuaXMoXCJpbnB1dFwiKSl0aHJvdyBuZXcgRXJyb3IoJ0NTUyBjbGFzcyBcIicrZC5kYXRlcGlja2VySW5wdXQrJ1wiIGNhbm5vdCBiZSBhcHBsaWVkIHRvIG5vbiBpbnB1dCBlbGVtZW50Jyk7aWYoYy5oYXNDbGFzcyhcImlucHV0LWdyb3VwXCIpJiYobj0wPT09Yy5maW5kKFwiLmRhdGVwaWNrZXJidXR0b25cIikuc2l6ZSgpP2MuZmluZChcIi5pbnB1dC1ncm91cC1hZGRvblwiKTpjLmZpbmQoXCIuZGF0ZXBpY2tlcmJ1dHRvblwiKSksIWQuaW5saW5lJiYhZy5pcyhcImlucHV0XCIpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBpbml0aWFsaXplIERhdGVUaW1lUGlja2VyIHdpdGhvdXQgYW4gaW5wdXQgZWxlbWVudFwiKTtyZXR1cm4gZT14KCksZj1lLmNsb25lKCksYS5leHRlbmQoITAsZCxHKCkpLGwub3B0aW9ucyhkKSxvYSgpLGthKCksZy5wcm9wKFwiZGlzYWJsZWRcIikmJmwuZGlzYWJsZSgpLGcuaXMoXCJpbnB1dFwiKSYmMCE9PWcudmFsKCkudHJpbSgpLmxlbmd0aD9fKGdhKGcudmFsKCkudHJpbSgpKSk6ZC5kZWZhdWx0RGF0ZSYmdm9pZCAwPT09Zy5hdHRyKFwicGxhY2Vob2xkZXJcIikmJl8oZC5kZWZhdWx0RGF0ZSksZC5pbmxpbmUmJmVhKCksbH07YS5mbi5kYXRldGltZXBpY2tlcj1mdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKTtkLmRhdGEoXCJEYXRlVGltZVBpY2tlclwiKXx8KGI9YS5leHRlbmQoITAse30sYS5mbi5kYXRldGltZXBpY2tlci5kZWZhdWx0cyxiKSxkLmRhdGEoXCJEYXRlVGltZVBpY2tlclwiLGMoZCxiKSkpfSl9LGEuZm4uZGF0ZXRpbWVwaWNrZXIuZGVmYXVsdHM9e3RpbWVab25lOlwiRXRjL1VUQ1wiLGZvcm1hdDohMSxkYXlWaWV3SGVhZGVyRm9ybWF0OlwiTU1NTSBZWVlZXCIsZXh0cmFGb3JtYXRzOiExLHN0ZXBwaW5nOjEsbWluRGF0ZTohMSxtYXhEYXRlOiExLHVzZUN1cnJlbnQ6ITAsY29sbGFwc2U6ITAsbG9jYWxlOmIubG9jYWxlKCksZGVmYXVsdERhdGU6ITEsZGlzYWJsZWREYXRlczohMSxlbmFibGVkRGF0ZXM6ITEsaWNvbnM6e3RpbWU6XCJnbHlwaGljb24gZ2x5cGhpY29uLXRpbWVcIixkYXRlOlwiZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhclwiLHVwOlwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwXCIsZG93bjpcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duXCIscHJldmlvdXM6XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFwiLG5leHQ6XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIix0b2RheTpcImdseXBoaWNvbiBnbHlwaGljb24tc2NyZWVuc2hvdFwiLGNsZWFyOlwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmFzaFwiLGNsb3NlOlwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIn0sdG9vbHRpcHM6e3RvZGF5OlwiR28gdG8gdG9kYXlcIixjbGVhcjpcIkNsZWFyIHNlbGVjdGlvblwiLGNsb3NlOlwiQ2xvc2UgdGhlIHBpY2tlclwiLHNlbGVjdE1vbnRoOlwiU2VsZWN0IE1vbnRoXCIscHJldk1vbnRoOlwiUHJldmlvdXMgTW9udGhcIixuZXh0TW9udGg6XCJOZXh0IE1vbnRoXCIsc2VsZWN0WWVhcjpcIlNlbGVjdCBZZWFyXCIscHJldlllYXI6XCJQcmV2aW91cyBZZWFyXCIsbmV4dFllYXI6XCJOZXh0IFllYXJcIixzZWxlY3REZWNhZGU6XCJTZWxlY3QgRGVjYWRlXCIscHJldkRlY2FkZTpcIlByZXZpb3VzIERlY2FkZVwiLG5leHREZWNhZGU6XCJOZXh0IERlY2FkZVwiLHByZXZDZW50dXJ5OlwiUHJldmlvdXMgQ2VudHVyeVwiLG5leHRDZW50dXJ5OlwiTmV4dCBDZW50dXJ5XCIscGlja0hvdXI6XCJQaWNrIEhvdXJcIixpbmNyZW1lbnRIb3VyOlwiSW5jcmVtZW50IEhvdXJcIixkZWNyZW1lbnRIb3VyOlwiRGVjcmVtZW50IEhvdXJcIixwaWNrTWludXRlOlwiUGljayBNaW51dGVcIixpbmNyZW1lbnRNaW51dGU6XCJJbmNyZW1lbnQgTWludXRlXCIsZGVjcmVtZW50TWludXRlOlwiRGVjcmVtZW50IE1pbnV0ZVwiLHBpY2tTZWNvbmQ6XCJQaWNrIFNlY29uZFwiLGluY3JlbWVudFNlY29uZDpcIkluY3JlbWVudCBTZWNvbmRcIixkZWNyZW1lbnRTZWNvbmQ6XCJEZWNyZW1lbnQgU2Vjb25kXCIsdG9nZ2xlUGVyaW9kOlwiVG9nZ2xlIFBlcmlvZFwiLHNlbGVjdFRpbWU6XCJTZWxlY3QgVGltZVwifSx1c2VTdHJpY3Q6ITEsc2lkZUJ5U2lkZTohMSxkYXlzT2ZXZWVrRGlzYWJsZWQ6ITEsY2FsZW5kYXJXZWVrczohMSx2aWV3TW9kZTpcImRheXNcIix0b29sYmFyUGxhY2VtZW50OlwiZGVmYXVsdFwiLHNob3dUb2RheUJ1dHRvbjohMSxzaG93Q2xlYXI6ITEsc2hvd0Nsb3NlOiExLHdpZGdldFBvc2l0aW9uaW5nOntob3Jpem9udGFsOlwiYXV0b1wiLHZlcnRpY2FsOlwiYXV0b1wifSx3aWRnZXRQYXJlbnQ6bnVsbCxpZ25vcmVSZWFkb25seTohMSxrZWVwT3BlbjohMSxmb2N1c09uU2hvdzohMCxpbmxpbmU6ITEsa2VlcEludmFsaWQ6ITEsZGF0ZXBpY2tlcklucHV0OlwiLmRhdGVwaWNrZXJpbnB1dFwiLGtleUJpbmRzOnt1cDpmdW5jdGlvbihhKXtpZihhKXt2YXIgYj10aGlzLmRhdGUoKXx8dGhpcy5nZXRNb21lbnQoKTthLmZpbmQoXCIuZGF0ZXBpY2tlclwiKS5pcyhcIjp2aXNpYmxlXCIpP3RoaXMuZGF0ZShiLmNsb25lKCkuc3VidHJhY3QoNyxcImRcIikpOnRoaXMuZGF0ZShiLmNsb25lKCkuYWRkKHRoaXMuc3RlcHBpbmcoKSxcIm1cIikpfX0sZG93bjpmdW5jdGlvbihhKXtpZighYSlyZXR1cm4gdm9pZCB0aGlzLnNob3coKTt2YXIgYj10aGlzLmRhdGUoKXx8dGhpcy5nZXRNb21lbnQoKTthLmZpbmQoXCIuZGF0ZXBpY2tlclwiKS5pcyhcIjp2aXNpYmxlXCIpP3RoaXMuZGF0ZShiLmNsb25lKCkuYWRkKDcsXCJkXCIpKTp0aGlzLmRhdGUoYi5jbG9uZSgpLnN1YnRyYWN0KHRoaXMuc3RlcHBpbmcoKSxcIm1cIikpfSxcImNvbnRyb2wgdXBcIjpmdW5jdGlvbihhKXtpZihhKXt2YXIgYj10aGlzLmRhdGUoKXx8dGhpcy5nZXRNb21lbnQoKTthLmZpbmQoXCIuZGF0ZXBpY2tlclwiKS5pcyhcIjp2aXNpYmxlXCIpP3RoaXMuZGF0ZShiLmNsb25lKCkuc3VidHJhY3QoMSxcInlcIikpOnRoaXMuZGF0ZShiLmNsb25lKCkuYWRkKDEsXCJoXCIpKX19LFwiY29udHJvbCBkb3duXCI6ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9dGhpcy5kYXRlKCl8fHRoaXMuZ2V0TW9tZW50KCk7YS5maW5kKFwiLmRhdGVwaWNrZXJcIikuaXMoXCI6dmlzaWJsZVwiKT90aGlzLmRhdGUoYi5jbG9uZSgpLmFkZCgxLFwieVwiKSk6dGhpcy5kYXRlKGIuY2xvbmUoKS5zdWJ0cmFjdCgxLFwiaFwiKSl9fSxsZWZ0OmZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPXRoaXMuZGF0ZSgpfHx0aGlzLmdldE1vbWVudCgpO2EuZmluZChcIi5kYXRlcGlja2VyXCIpLmlzKFwiOnZpc2libGVcIikmJnRoaXMuZGF0ZShiLmNsb25lKCkuc3VidHJhY3QoMSxcImRcIikpfX0scmlnaHQ6ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9dGhpcy5kYXRlKCl8fHRoaXMuZ2V0TW9tZW50KCk7YS5maW5kKFwiLmRhdGVwaWNrZXJcIikuaXMoXCI6dmlzaWJsZVwiKSYmdGhpcy5kYXRlKGIuY2xvbmUoKS5hZGQoMSxcImRcIikpfX0scGFnZVVwOmZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPXRoaXMuZGF0ZSgpfHx0aGlzLmdldE1vbWVudCgpO2EuZmluZChcIi5kYXRlcGlja2VyXCIpLmlzKFwiOnZpc2libGVcIikmJnRoaXMuZGF0ZShiLmNsb25lKCkuc3VidHJhY3QoMSxcIk1cIikpfX0scGFnZURvd246ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9dGhpcy5kYXRlKCl8fHRoaXMuZ2V0TW9tZW50KCk7YS5maW5kKFwiLmRhdGVwaWNrZXJcIikuaXMoXCI6dmlzaWJsZVwiKSYmdGhpcy5kYXRlKGIuY2xvbmUoKS5hZGQoMSxcIk1cIikpfX0sZW50ZXI6ZnVuY3Rpb24oKXt0aGlzLmhpZGUoKX0sZXNjYXBlOmZ1bmN0aW9uKCl7dGhpcy5oaWRlKCl9LFwiY29udHJvbCBzcGFjZVwiOmZ1bmN0aW9uKGEpe2EuZmluZChcIi50aW1lcGlja2VyXCIpLmlzKFwiOnZpc2libGVcIikmJmEuZmluZCgnLmJ0bltkYXRhLWFjdGlvbj1cInRvZ2dsZVBlcmlvZFwiXScpLmNsaWNrKCl9LHQ6ZnVuY3Rpb24oKXt0aGlzLmRhdGUodGhpcy5nZXRNb21lbnQoKSl9LFwiZGVsZXRlXCI6ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCl9fSxkZWJ1ZzohMSxhbGxvd0lucHV0VG9nZ2xlOiExLGRpc2FibGVkVGltZUludGVydmFsczohMSxkaXNhYmxlZEhvdXJzOiExLGVuYWJsZWRIb3VyczohMSx2aWV3RGF0ZTohMX19KTtcclxuXHJcbi8qZ2xvYmFsICQqL1xyXG4vKmpzaGludCB1bnVzZWQ6ZmFsc2UsZm9yaW46ZmFsc2UqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgaW9zT3ZlcmxheSA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG5cclxuXHJcblx0dmFyIG92ZXJsYXlET007XHJcblx0dmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xyXG5cdHZhciBkZWZhdWx0cyA9IHtcclxuXHRcdG9uYmVmb3Jlc2hvdzogbm9vcCxcclxuXHRcdG9uc2hvdzogbm9vcCxcclxuXHRcdG9uYmVmb3JlaGlkZTogbm9vcCxcclxuXHRcdG9uaGlkZTogbm9vcCxcclxuXHRcdHRleHQ6IFwiXCIsXHJcblx0XHRpY29uOiBudWxsLFxyXG5cdFx0c3Bpbm5lcjogbnVsbCxcclxuXHRcdGR1cmF0aW9uOiBudWxsLFxyXG5cdFx0aWQ6IG51bGwsXHJcblx0XHRwYXJlbnRFbDogbnVsbFxyXG5cdH07XHJcblxyXG5cdC8vIGhlbHBlciAtIG1lcmdlIHR3byBvYmplY3RzIHRvZ2V0aGVyLCB3aXRob3V0IHVzaW5nICQuZXh0ZW5kXHJcblx0dmFyIG1lcmdlID0gZnVuY3Rpb24ob2JqMSwgb2JqMikge1xyXG5cdFx0dmFyIG9iajMgPSB7fTtcclxuXHRcdGZvciAodmFyIGF0dHJPbmUgaW4gb2JqMSkge1xyXG5cdFx0XHRvYmozW2F0dHJPbmVdID0gb2JqMVthdHRyT25lXTtcclxuXHRcdH1cclxuXHRcdGZvciAodmFyIGF0dHJUd28gaW4gb2JqMikge1xyXG5cdFx0XHRvYmozW2F0dHJUd29dID0gb2JqMlthdHRyVHdvXTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBvYmozO1xyXG5cdH07XHJcblxyXG5cdC8vIGhlbHBlciAtIGRvZXMgaXQgc3VwcG9ydCBDU1MzIHRyYW5zaXRpb25zL2FuaW1hdGlvblxyXG5cdHZhciBkb2VzVHJhbnNpdGlvbnMgPSAoZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgYiA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0dmFyIHMgPSBiLnN0eWxlO1xyXG5cdFx0dmFyIHAgPSAndHJhbnNpdGlvbic7XHJcblx0XHRpZiAodHlwZW9mIHNbcF0gPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRlc3RzIGZvciB2ZW5kb3Igc3BlY2lmaWMgcHJvcFxyXG5cdFx0dmFyIHYgPSBbJ01veicsICdXZWJraXQnLCAnS2h0bWwnLCAnTycsICdtcyddO1xyXG5cdFx0cCA9IHAuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwLnN1YnN0cigxKTtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAodHlwZW9mIHNbdltpXSArIHBdID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSgpKTtcclxuXHJcblx0Ly8gc2V0dXAgb3ZlcmxheSBzZXR0aW5nc1xyXG5cdHZhciBzZXR0aW5ncyA9IG1lcmdlKGRlZmF1bHRzLCBwYXJhbXMpO1xyXG5cclxuXHQvL1xyXG5cdHZhciBoYW5kbGVBbmltID0gZnVuY3Rpb24oYW5pbSkge1xyXG5cdFx0aWYgKGFuaW0uYW5pbWF0aW9uTmFtZSA9PT0gXCJpb3Mtb3ZlcmxheS1zaG93XCIpIHtcclxuXHRcdFx0c2V0dGluZ3Mub25zaG93KCk7XHJcblx0XHR9XHJcblx0XHRpZiAoYW5pbS5hbmltYXRpb25OYW1lID09PSBcImlvcy1vdmVybGF5LWhpZGVcIikge1xyXG5cdFx0XHRkZXN0cm95KCk7XHJcblx0XHRcdHNldHRpbmdzLm9uaGlkZSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIElJRkVcclxuXHR2YXIgY3JlYXRlID0gKGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdC8vIGluaXRpYWwgRE9NIGNyZWF0aW9uIGFuZCBldmVudCBiaW5kaW5nXHJcblx0XHRvdmVybGF5RE9NID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHRcdG92ZXJsYXlET00uY2xhc3NOYW1lID0gXCJ1aS1pb3Mtb3ZlcmxheVwiO1xyXG5cdFx0b3ZlcmxheURPTS5pbm5lckhUTUwgKz0gJzxzcGFuIGNsYXNzPVwidGl0bGVcIj4nICsgc2V0dGluZ3MudGV4dCArICc8L3NwYW4nO1xyXG5cdFx0aWYgKHBhcmFtcy5pY29uKSB7XHJcblx0XHRcdG92ZXJsYXlET00uaW5uZXJIVE1MICs9ICc8aW1nIHNyYz1cIicgKyBwYXJhbXMuaWNvbiArICdcIj4nO1xyXG5cdFx0fSBlbHNlIGlmIChwYXJhbXMuc3Bpbm5lcikge1xyXG5cdFx0XHRvdmVybGF5RE9NLmFwcGVuZENoaWxkKHBhcmFtcy5zcGlubmVyLmVsKTtcclxuXHRcdH1cclxuXHRcdGlmIChkb2VzVHJhbnNpdGlvbnMpIHtcclxuXHRcdFx0b3ZlcmxheURPTS5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0QW5pbWF0aW9uRW5kXCIsIGhhbmRsZUFuaW0sIGZhbHNlKTtcclxuXHRcdFx0b3ZlcmxheURPTS5hZGRFdmVudExpc3RlbmVyKFwibXNBbmltYXRpb25FbmRcIiwgaGFuZGxlQW5pbSwgZmFsc2UpO1xyXG5cdFx0XHRvdmVybGF5RE9NLmFkZEV2ZW50TGlzdGVuZXIoXCJvQW5pbWF0aW9uRW5kXCIsIGhhbmRsZUFuaW0sIGZhbHNlKTtcclxuXHRcdFx0b3ZlcmxheURPTS5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIGhhbmRsZUFuaW0sIGZhbHNlKTtcclxuXHRcdH1cclxuXHRcdGlmIChwYXJhbXMucGFyZW50RWwpIHtcclxuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyYW1zLnBhcmVudEVsKS5hcHBlbmRDaGlsZChvdmVybGF5RE9NKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheURPTSk7XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0dGluZ3Mub25iZWZvcmVzaG93KCk7XHJcblx0XHQvLyBiZWdpbiBmYWRlIGluXHJcblx0XHRpZiAoZG9lc1RyYW5zaXRpb25zKSB7XHJcblx0XHRcdG92ZXJsYXlET00uY2xhc3NOYW1lICs9IFwiIGlvcy1vdmVybGF5LXNob3dcIjtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mICQgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0XHQkKG92ZXJsYXlET00pLmZhZGVJbih7XHJcblx0XHRcdFx0ZHVyYXRpb246IDIwMFxyXG5cdFx0XHR9LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzZXR0aW5ncy5vbnNob3coKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHNldHRpbmdzLmR1cmF0aW9uKSB7XHJcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGhpZGUoKTtcclxuXHRcdFx0fSwgc2V0dGluZ3MuZHVyYXRpb24pO1xyXG5cdFx0fVxyXG5cclxuXHR9KCkpO1xyXG5cclxuXHR2YXIgaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gcHJlLWNhbGxiYWNrXHJcblx0XHRzZXR0aW5ncy5vbmJlZm9yZWhpZGUoKTtcclxuXHRcdC8vIGZhZGUgb3V0XHJcblx0XHRpZiAoZG9lc1RyYW5zaXRpb25zKSB7XHJcblx0XHRcdC8vIENTUyBhbmltYXRpb24gYm91bmQgdG8gY2xhc3Nlc1xyXG5cdFx0XHRvdmVybGF5RE9NLmNsYXNzTmFtZSA9IG92ZXJsYXlET00uY2xhc3NOYW1lLnJlcGxhY2UoXCJzaG93XCIsIFwiaGlkZVwiKTtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mICQgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0XHQvLyBwb2x5ZmlsbCByZXF1aXJlcyBqUXVlcnlcclxuXHRcdFx0JChvdmVybGF5RE9NKS5mYWRlT3V0KHtcclxuXHRcdFx0XHRkdXJhdGlvbjogMjAwXHJcblx0XHRcdH0sIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRlc3Ryb3koKTtcclxuXHRcdFx0XHRzZXR0aW5ncy5vbmhpZGUoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dmFyIGRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmIChwYXJhbXMucGFyZW50RWwpIHtcclxuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyYW1zLnBhcmVudEVsKS5yZW1vdmVDaGlsZChvdmVybGF5RE9NKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheURPTSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG5cdFx0aWYgKHBhcmFtcy50ZXh0KSB7XHJcblx0XHRcdG92ZXJsYXlET00uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpWzBdLmlubmVySFRNTCA9IHBhcmFtcy50ZXh0O1xyXG5cdFx0fVxyXG5cdFx0aWYgKHBhcmFtcy5pY29uKSB7XHJcblx0XHRcdGlmIChzZXR0aW5ncy5zcGlubmVyKSB7XHJcblx0XHRcdFx0Ly8gVW5sZXNzIHdlIHNldCBzcGlubmVyIHRvIG51bGwsIHRoaXMgd2lsbCB0aHJvdyBvbiB0aGUgc2Vjb25kIHVwZGF0ZVxyXG5cdFx0XHRcdHNldHRpbmdzLnNwaW5uZXIuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZXR0aW5ncy5zcGlubmVyLmVsKTtcclxuXHRcdFx0XHRzZXR0aW5ncy5zcGlubmVyID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRvdmVybGF5RE9NLmlubmVySFRNTCArPSAnPGltZyBzcmM9XCInICsgcGFyYW1zLmljb24gKyAnXCI+JztcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0aGlkZTogaGlkZSxcclxuXHRcdGRlc3Ryb3k6IGRlc3Ryb3ksXHJcblx0XHR1cGRhdGU6IHVwZGF0ZVxyXG5cdH07XHJcblxyXG59O1xyXG5cclxuLy9BZGRlZCBzdXBwb3J0IGZvciByZXF1aXJlanNcclxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG5cdGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gaW9zT3ZlcmxheTtcclxuXHR9KTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlZCBieSBVc2VyIG9uIDA4LjA3LjIwMTYuXHJcbiAqL1xyXG4vLyBNYWduaWZpYyBQb3B1cCB2MS4xLjAgYnkgRG1pdHJ5IFNlbWVub3ZcclxuLy8gaHR0cDovL2JpdC5seS9tYWduaWZpYy1wb3B1cCNidWlsZD1pbmxpbmUraW1hZ2UrYWpheCtpZnJhbWUrZ2FsbGVyeStyZXRpbmEraW1hZ2V6b29tXHJcbihmdW5jdGlvbihhKXt0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxhKTp0eXBlb2YgZXhwb3J0cz09XCJvYmplY3RcIj9hKHJlcXVpcmUoXCJqcXVlcnlcIikpOmEod2luZG93LmpRdWVyeXx8d2luZG93LlplcHRvKX0pKGZ1bmN0aW9uKGEpe3ZhciBiPVwiQ2xvc2VcIixjPVwiQmVmb3JlQ2xvc2VcIixkPVwiQWZ0ZXJDbG9zZVwiLGU9XCJCZWZvcmVBcHBlbmRcIixmPVwiTWFya3VwUGFyc2VcIixnPVwiT3BlblwiLGg9XCJDaGFuZ2VcIixpPVwibWZwXCIsaj1cIi5cIitpLGs9XCJtZnAtcmVhZHlcIixsPVwibWZwLXJlbW92aW5nXCIsbT1cIm1mcC1wcmV2ZW50LWNsb3NlXCIsbixvPWZ1bmN0aW9uKCl7fSxwPSEhd2luZG93LmpRdWVyeSxxLHI9YSh3aW5kb3cpLHMsdCx1LHYsdz1mdW5jdGlvbihhLGIpe24uZXYub24oaSthK2osYil9LHg9ZnVuY3Rpb24oYixjLGQsZSl7dmFyIGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gZi5jbGFzc05hbWU9XCJtZnAtXCIrYixkJiYoZi5pbm5lckhUTUw9ZCksZT9jJiZjLmFwcGVuZENoaWxkKGYpOihmPWEoZiksYyYmZi5hcHBlbmRUbyhjKSksZn0seT1mdW5jdGlvbihiLGMpe24uZXYudHJpZ2dlckhhbmRsZXIoaStiLGMpLG4uc3QuY2FsbGJhY2tzJiYoYj1iLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpK2Iuc2xpY2UoMSksbi5zdC5jYWxsYmFja3NbYl0mJm4uc3QuY2FsbGJhY2tzW2JdLmFwcGx5KG4sYS5pc0FycmF5KGMpP2M6W2NdKSl9LHo9ZnVuY3Rpb24oYil7aWYoYiE9PXZ8fCFuLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0biluLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bj1hKG4uc3QuY2xvc2VNYXJrdXAucmVwbGFjZShcIiV0aXRsZSVcIixuLnN0LnRDbG9zZSkpLHY9YjtyZXR1cm4gbi5jdXJyVGVtcGxhdGUuY2xvc2VCdG59LEE9ZnVuY3Rpb24oKXthLm1hZ25pZmljUG9wdXAuaW5zdGFuY2V8fChuPW5ldyBvLG4uaW5pdCgpLGEubWFnbmlmaWNQb3B1cC5pbnN0YW5jZT1uKX0sQj1mdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpLnN0eWxlLGI9W1wibXNcIixcIk9cIixcIk1velwiLFwiV2Via2l0XCJdO2lmKGEudHJhbnNpdGlvbiE9PXVuZGVmaW5lZClyZXR1cm4hMDt3aGlsZShiLmxlbmd0aClpZihiLnBvcCgpK1wiVHJhbnNpdGlvblwiaW4gYSlyZXR1cm4hMDtyZXR1cm4hMX07by5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOm8saW5pdDpmdW5jdGlvbigpe3ZhciBiPW5hdmlnYXRvci5hcHBWZXJzaW9uO24uaXNMb3dJRT1uLmlzSUU4PWRvY3VtZW50LmFsbCYmIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIsbi5pc0FuZHJvaWQ9L2FuZHJvaWQvZ2kudGVzdChiKSxuLmlzSU9TPS9pcGhvbmV8aXBhZHxpcG9kL2dpLnRlc3QoYiksbi5zdXBwb3J0c1RyYW5zaXRpb249QigpLG4ucHJvYmFibHlNb2JpbGU9bi5pc0FuZHJvaWR8fG4uaXNJT1N8fC8oT3BlcmEgTWluaSl8S2luZGxlfHdlYk9TfEJsYWNrQmVycnl8KE9wZXJhIE1vYmkpfChXaW5kb3dzIFBob25lKXxJRU1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkscz1hKGRvY3VtZW50KSxuLnBvcHVwc0NhY2hlPXt9fSxvcGVuOmZ1bmN0aW9uKGIpe3ZhciBjO2lmKGIuaXNPYmo9PT0hMSl7bi5pdGVtcz1iLml0ZW1zLnRvQXJyYXkoKSxuLmluZGV4PTA7dmFyIGQ9Yi5pdGVtcyxlO2ZvcihjPTA7YzxkLmxlbmd0aDtjKyspe2U9ZFtjXSxlLnBhcnNlZCYmKGU9ZS5lbFswXSk7aWYoZT09PWIuZWxbMF0pe24uaW5kZXg9YzticmVha319fWVsc2Ugbi5pdGVtcz1hLmlzQXJyYXkoYi5pdGVtcyk/Yi5pdGVtczpbYi5pdGVtc10sbi5pbmRleD1iLmluZGV4fHwwO2lmKG4uaXNPcGVuKXtuLnVwZGF0ZUl0ZW1IVE1MKCk7cmV0dXJufW4udHlwZXM9W10sdT1cIlwiLGIubWFpbkVsJiZiLm1haW5FbC5sZW5ndGg/bi5ldj1iLm1haW5FbC5lcSgwKTpuLmV2PXMsYi5rZXk/KG4ucG9wdXBzQ2FjaGVbYi5rZXldfHwobi5wb3B1cHNDYWNoZVtiLmtleV09e30pLG4uY3VyclRlbXBsYXRlPW4ucG9wdXBzQ2FjaGVbYi5rZXldKTpuLmN1cnJUZW1wbGF0ZT17fSxuLnN0PWEuZXh0ZW5kKCEwLHt9LGEubWFnbmlmaWNQb3B1cC5kZWZhdWx0cyxiKSxuLmZpeGVkQ29udGVudFBvcz1uLnN0LmZpeGVkQ29udGVudFBvcz09PVwiYXV0b1wiPyFuLnByb2JhYmx5TW9iaWxlOm4uc3QuZml4ZWRDb250ZW50UG9zLG4uc3QubW9kYWwmJihuLnN0LmNsb3NlT25Db250ZW50Q2xpY2s9ITEsbi5zdC5jbG9zZU9uQmdDbGljaz0hMSxuLnN0LnNob3dDbG9zZUJ0bj0hMSxuLnN0LmVuYWJsZUVzY2FwZUtleT0hMSksbi5iZ092ZXJsYXl8fChuLmJnT3ZlcmxheT14KFwiYmdcIikub24oXCJjbGlja1wiK2osZnVuY3Rpb24oKXtuLmNsb3NlKCl9KSxuLndyYXA9eChcIndyYXBcIikuYXR0cihcInRhYmluZGV4XCIsLTEpLm9uKFwiY2xpY2tcIitqLGZ1bmN0aW9uKGEpe24uX2NoZWNrSWZDbG9zZShhLnRhcmdldCkmJm4uY2xvc2UoKX0pLG4uY29udGFpbmVyPXgoXCJjb250YWluZXJcIixuLndyYXApKSxuLmNvbnRlbnRDb250YWluZXI9eChcImNvbnRlbnRcIiksbi5zdC5wcmVsb2FkZXImJihuLnByZWxvYWRlcj14KFwicHJlbG9hZGVyXCIsbi5jb250YWluZXIsbi5zdC50TG9hZGluZykpO3ZhciBoPWEubWFnbmlmaWNQb3B1cC5tb2R1bGVzO2ZvcihjPTA7YzxoLmxlbmd0aDtjKyspe3ZhciBpPWhbY107aT1pLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2kuc2xpY2UoMSksbltcImluaXRcIitpXS5jYWxsKG4pfXkoXCJCZWZvcmVPcGVuXCIpLG4uc3Quc2hvd0Nsb3NlQnRuJiYobi5zdC5jbG9zZUJ0bkluc2lkZT8odyhmLGZ1bmN0aW9uKGEsYixjLGQpe2MuY2xvc2VfcmVwbGFjZVdpdGg9eihkLnR5cGUpfSksdSs9XCIgbWZwLWNsb3NlLWJ0bi1pblwiKTpuLndyYXAuYXBwZW5kKHooKSkpLG4uc3QuYWxpZ25Ub3AmJih1Kz1cIiBtZnAtYWxpZ24tdG9wXCIpLG4uZml4ZWRDb250ZW50UG9zP24ud3JhcC5jc3Moe292ZXJmbG93Om4uc3Qub3ZlcmZsb3dZLG92ZXJmbG93WDpcImhpZGRlblwiLG92ZXJmbG93WTpuLnN0Lm92ZXJmbG93WX0pOm4ud3JhcC5jc3Moe3RvcDpyLnNjcm9sbFRvcCgpLHBvc2l0aW9uOlwiYWJzb2x1dGVcIn0pLChuLnN0LmZpeGVkQmdQb3M9PT0hMXx8bi5zdC5maXhlZEJnUG9zPT09XCJhdXRvXCImJiFuLmZpeGVkQ29udGVudFBvcykmJm4uYmdPdmVybGF5LmNzcyh7aGVpZ2h0OnMuaGVpZ2h0KCkscG9zaXRpb246XCJhYnNvbHV0ZVwifSksbi5zdC5lbmFibGVFc2NhcGVLZXkmJnMub24oXCJrZXl1cFwiK2osZnVuY3Rpb24oYSl7YS5rZXlDb2RlPT09MjcmJm4uY2xvc2UoKX0pLHIub24oXCJyZXNpemVcIitqLGZ1bmN0aW9uKCl7bi51cGRhdGVTaXplKCl9KSxuLnN0LmNsb3NlT25Db250ZW50Q2xpY2t8fCh1Kz1cIiBtZnAtYXV0by1jdXJzb3JcIiksdSYmbi53cmFwLmFkZENsYXNzKHUpO3ZhciBsPW4ud0g9ci5oZWlnaHQoKSxtPXt9O2lmKG4uZml4ZWRDb250ZW50UG9zJiZuLl9oYXNTY3JvbGxCYXIobCkpe3ZhciBvPW4uX2dldFNjcm9sbGJhclNpemUoKTtvJiYobS5tYXJnaW5SaWdodD1vKX1uLmZpeGVkQ29udGVudFBvcyYmKG4uaXNJRTc/YShcImJvZHksIGh0bWxcIikuY3NzKFwib3ZlcmZsb3dcIixcImhpZGRlblwiKTptLm92ZXJmbG93PVwiaGlkZGVuXCIpO3ZhciBwPW4uc3QubWFpbkNsYXNzO3JldHVybiBuLmlzSUU3JiYocCs9XCIgbWZwLWllN1wiKSxwJiZuLl9hZGRDbGFzc1RvTUZQKHApLG4udXBkYXRlSXRlbUhUTUwoKSx5KFwiQnVpbGRDb250cm9sc1wiKSxhKFwiaHRtbFwiKS5jc3MobSksbi5iZ092ZXJsYXkuYWRkKG4ud3JhcCkucHJlcGVuZFRvKG4uc3QucHJlcGVuZFRvfHxhKGRvY3VtZW50LmJvZHkpKSxuLl9sYXN0Rm9jdXNlZEVsPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsc2V0VGltZW91dChmdW5jdGlvbigpe24uY29udGVudD8obi5fYWRkQ2xhc3NUb01GUChrKSxuLl9zZXRGb2N1cygpKTpuLmJnT3ZlcmxheS5hZGRDbGFzcyhrKSxzLm9uKFwiZm9jdXNpblwiK2osbi5fb25Gb2N1c0luKX0sMTYpLG4uaXNPcGVuPSEwLG4udXBkYXRlU2l6ZShsKSx5KGcpLGJ9LGNsb3NlOmZ1bmN0aW9uKCl7aWYoIW4uaXNPcGVuKXJldHVybjt5KGMpLG4uaXNPcGVuPSExLG4uc3QucmVtb3ZhbERlbGF5JiYhbi5pc0xvd0lFJiZuLnN1cHBvcnRzVHJhbnNpdGlvbj8obi5fYWRkQ2xhc3NUb01GUChsKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bi5fY2xvc2UoKX0sbi5zdC5yZW1vdmFsRGVsYXkpKTpuLl9jbG9zZSgpfSxfY2xvc2U6ZnVuY3Rpb24oKXt5KGIpO3ZhciBjPWwrXCIgXCIraytcIiBcIjtuLmJnT3ZlcmxheS5kZXRhY2goKSxuLndyYXAuZGV0YWNoKCksbi5jb250YWluZXIuZW1wdHkoKSxuLnN0Lm1haW5DbGFzcyYmKGMrPW4uc3QubWFpbkNsYXNzK1wiIFwiKSxuLl9yZW1vdmVDbGFzc0Zyb21NRlAoYyk7aWYobi5maXhlZENvbnRlbnRQb3Mpe3ZhciBlPXttYXJnaW5SaWdodDpcIlwifTtuLmlzSUU3P2EoXCJib2R5LCBodG1sXCIpLmNzcyhcIm92ZXJmbG93XCIsXCJcIik6ZS5vdmVyZmxvdz1cIlwiLGEoXCJodG1sXCIpLmNzcyhlKX1zLm9mZihcImtleXVwXCIraitcIiBmb2N1c2luXCIraiksbi5ldi5vZmYoaiksbi53cmFwLmF0dHIoXCJjbGFzc1wiLFwibWZwLXdyYXBcIikucmVtb3ZlQXR0cihcInN0eWxlXCIpLG4uYmdPdmVybGF5LmF0dHIoXCJjbGFzc1wiLFwibWZwLWJnXCIpLG4uY29udGFpbmVyLmF0dHIoXCJjbGFzc1wiLFwibWZwLWNvbnRhaW5lclwiKSxuLnN0LnNob3dDbG9zZUJ0biYmKCFuLnN0LmNsb3NlQnRuSW5zaWRlfHxuLmN1cnJUZW1wbGF0ZVtuLmN1cnJJdGVtLnR5cGVdPT09ITApJiZuLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0biYmbi5jdXJyVGVtcGxhdGUuY2xvc2VCdG4uZGV0YWNoKCksbi5zdC5hdXRvRm9jdXNMYXN0JiZuLl9sYXN0Rm9jdXNlZEVsJiZhKG4uX2xhc3RGb2N1c2VkRWwpLmZvY3VzKCksbi5jdXJySXRlbT1udWxsLG4uY29udGVudD1udWxsLG4uY3VyclRlbXBsYXRlPW51bGwsbi5wcmV2SGVpZ2h0PTAseShkKX0sdXBkYXRlU2l6ZTpmdW5jdGlvbihhKXtpZihuLmlzSU9TKXt2YXIgYj1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgvd2luZG93LmlubmVyV2lkdGgsYz13aW5kb3cuaW5uZXJIZWlnaHQqYjtuLndyYXAuY3NzKFwiaGVpZ2h0XCIsYyksbi53SD1jfWVsc2Ugbi53SD1hfHxyLmhlaWdodCgpO24uZml4ZWRDb250ZW50UG9zfHxuLndyYXAuY3NzKFwiaGVpZ2h0XCIsbi53SCkseShcIlJlc2l6ZVwiKX0sdXBkYXRlSXRlbUhUTUw6ZnVuY3Rpb24oKXt2YXIgYj1uLml0ZW1zW24uaW5kZXhdO24uY29udGVudENvbnRhaW5lci5kZXRhY2goKSxuLmNvbnRlbnQmJm4uY29udGVudC5kZXRhY2goKSxiLnBhcnNlZHx8KGI9bi5wYXJzZUVsKG4uaW5kZXgpKTt2YXIgYz1iLnR5cGU7eShcIkJlZm9yZUNoYW5nZVwiLFtuLmN1cnJJdGVtP24uY3Vyckl0ZW0udHlwZTpcIlwiLGNdKSxuLmN1cnJJdGVtPWI7aWYoIW4uY3VyclRlbXBsYXRlW2NdKXt2YXIgZD1uLnN0W2NdP24uc3RbY10ubWFya3VwOiExO3koXCJGaXJzdE1hcmt1cFBhcnNlXCIsZCksZD9uLmN1cnJUZW1wbGF0ZVtjXT1hKGQpOm4uY3VyclRlbXBsYXRlW2NdPSEwfXQmJnQhPT1iLnR5cGUmJm4uY29udGFpbmVyLnJlbW92ZUNsYXNzKFwibWZwLVwiK3QrXCItaG9sZGVyXCIpO3ZhciBlPW5bXCJnZXRcIitjLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Muc2xpY2UoMSldKGIsbi5jdXJyVGVtcGxhdGVbY10pO24uYXBwZW5kQ29udGVudChlLGMpLGIucHJlbG9hZGVkPSEwLHkoaCxiKSx0PWIudHlwZSxuLmNvbnRhaW5lci5wcmVwZW5kKG4uY29udGVudENvbnRhaW5lcikseShcIkFmdGVyQ2hhbmdlXCIpfSxhcHBlbmRDb250ZW50OmZ1bmN0aW9uKGEsYil7bi5jb250ZW50PWEsYT9uLnN0LnNob3dDbG9zZUJ0biYmbi5zdC5jbG9zZUJ0bkluc2lkZSYmbi5jdXJyVGVtcGxhdGVbYl09PT0hMD9uLmNvbnRlbnQuZmluZChcIi5tZnAtY2xvc2VcIikubGVuZ3RofHxuLmNvbnRlbnQuYXBwZW5kKHooKSk6bi5jb250ZW50PWE6bi5jb250ZW50PVwiXCIseShlKSxuLmNvbnRhaW5lci5hZGRDbGFzcyhcIm1mcC1cIitiK1wiLWhvbGRlclwiKSxuLmNvbnRlbnRDb250YWluZXIuYXBwZW5kKG4uY29udGVudCl9LHBhcnNlRWw6ZnVuY3Rpb24oYil7dmFyIGM9bi5pdGVtc1tiXSxkO2MudGFnTmFtZT9jPXtlbDphKGMpfTooZD1jLnR5cGUsYz17ZGF0YTpjLHNyYzpjLnNyY30pO2lmKGMuZWwpe3ZhciBlPW4udHlwZXM7Zm9yKHZhciBmPTA7ZjxlLmxlbmd0aDtmKyspaWYoYy5lbC5oYXNDbGFzcyhcIm1mcC1cIitlW2ZdKSl7ZD1lW2ZdO2JyZWFrfWMuc3JjPWMuZWwuYXR0cihcImRhdGEtbWZwLXNyY1wiKSxjLnNyY3x8KGMuc3JjPWMuZWwuYXR0cihcImhyZWZcIikpfXJldHVybiBjLnR5cGU9ZHx8bi5zdC50eXBlfHxcImlubGluZVwiLGMuaW5kZXg9YixjLnBhcnNlZD0hMCxuLml0ZW1zW2JdPWMseShcIkVsZW1lbnRQYXJzZVwiLGMpLG4uaXRlbXNbYl19LGFkZEdyb3VwOmZ1bmN0aW9uKGEsYil7dmFyIGM9ZnVuY3Rpb24oYyl7Yy5tZnBFbD10aGlzLG4uX29wZW5DbGljayhjLGEsYil9O2J8fChiPXt9KTt2YXIgZD1cImNsaWNrLm1hZ25pZmljUG9wdXBcIjtiLm1haW5FbD1hLGIuaXRlbXM/KGIuaXNPYmo9ITAsYS5vZmYoZCkub24oZCxjKSk6KGIuaXNPYmo9ITEsYi5kZWxlZ2F0ZT9hLm9mZihkKS5vbihkLGIuZGVsZWdhdGUsYyk6KGIuaXRlbXM9YSxhLm9mZihkKS5vbihkLGMpKSl9LF9vcGVuQ2xpY2s6ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWQubWlkQ2xpY2shPT11bmRlZmluZWQ/ZC5taWRDbGljazphLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMubWlkQ2xpY2s7aWYoIWUmJihiLndoaWNoPT09Mnx8Yi5jdHJsS2V5fHxiLm1ldGFLZXl8fGIuYWx0S2V5fHxiLnNoaWZ0S2V5KSlyZXR1cm47dmFyIGY9ZC5kaXNhYmxlT24hPT11bmRlZmluZWQ/ZC5kaXNhYmxlT246YS5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtpZihmKWlmKGEuaXNGdW5jdGlvbihmKSl7aWYoIWYuY2FsbChuKSlyZXR1cm4hMH1lbHNlIGlmKHIud2lkdGgoKTxmKXJldHVybiEwO2IudHlwZSYmKGIucHJldmVudERlZmF1bHQoKSxuLmlzT3BlbiYmYi5zdG9wUHJvcGFnYXRpb24oKSksZC5lbD1hKGIubWZwRWwpLGQuZGVsZWdhdGUmJihkLml0ZW1zPWMuZmluZChkLmRlbGVnYXRlKSksbi5vcGVuKGQpfSx1cGRhdGVTdGF0dXM6ZnVuY3Rpb24oYSxiKXtpZihuLnByZWxvYWRlcil7cSE9PWEmJm4uY29udGFpbmVyLnJlbW92ZUNsYXNzKFwibWZwLXMtXCIrcSksIWImJmE9PT1cImxvYWRpbmdcIiYmKGI9bi5zdC50TG9hZGluZyk7dmFyIGM9e3N0YXR1czphLHRleHQ6Yn07eShcIlVwZGF0ZVN0YXR1c1wiLGMpLGE9Yy5zdGF0dXMsYj1jLnRleHQsbi5wcmVsb2FkZXIuaHRtbChiKSxuLnByZWxvYWRlci5maW5kKFwiYVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX0pLG4uY29udGFpbmVyLmFkZENsYXNzKFwibWZwLXMtXCIrYSkscT1hfX0sX2NoZWNrSWZDbG9zZTpmdW5jdGlvbihiKXtpZihhKGIpLmhhc0NsYXNzKG0pKXJldHVybjt2YXIgYz1uLnN0LmNsb3NlT25Db250ZW50Q2xpY2ssZD1uLnN0LmNsb3NlT25CZ0NsaWNrO2lmKGMmJmQpcmV0dXJuITA7aWYoIW4uY29udGVudHx8YShiKS5oYXNDbGFzcyhcIm1mcC1jbG9zZVwiKXx8bi5wcmVsb2FkZXImJmI9PT1uLnByZWxvYWRlclswXSlyZXR1cm4hMDtpZihiIT09bi5jb250ZW50WzBdJiYhYS5jb250YWlucyhuLmNvbnRlbnRbMF0sYikpe2lmKGQmJmEuY29udGFpbnMoZG9jdW1lbnQsYikpcmV0dXJuITB9ZWxzZSBpZihjKXJldHVybiEwO3JldHVybiExfSxfYWRkQ2xhc3NUb01GUDpmdW5jdGlvbihhKXtuLmJnT3ZlcmxheS5hZGRDbGFzcyhhKSxuLndyYXAuYWRkQ2xhc3MoYSl9LF9yZW1vdmVDbGFzc0Zyb21NRlA6ZnVuY3Rpb24oYSl7dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoYSksbi53cmFwLnJlbW92ZUNsYXNzKGEpfSxfaGFzU2Nyb2xsQmFyOmZ1bmN0aW9uKGEpe3JldHVybihuLmlzSUU3P3MuaGVpZ2h0KCk6ZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpPihhfHxyLmhlaWdodCgpKX0sX3NldEZvY3VzOmZ1bmN0aW9uKCl7KG4uc3QuZm9jdXM/bi5jb250ZW50LmZpbmQobi5zdC5mb2N1cykuZXEoMCk6bi53cmFwKS5mb2N1cygpfSxfb25Gb2N1c0luOmZ1bmN0aW9uKGIpe2lmKGIudGFyZ2V0IT09bi53cmFwWzBdJiYhYS5jb250YWlucyhuLndyYXBbMF0sYi50YXJnZXQpKXJldHVybiBuLl9zZXRGb2N1cygpLCExfSxfcGFyc2VNYXJrdXA6ZnVuY3Rpb24oYixjLGQpe3ZhciBlO2QuZGF0YSYmKGM9YS5leHRlbmQoZC5kYXRhLGMpKSx5KGYsW2IsYyxkXSksYS5lYWNoKGMsZnVuY3Rpb24oYyxkKXtpZihkPT09dW5kZWZpbmVkfHxkPT09ITEpcmV0dXJuITA7ZT1jLnNwbGl0KFwiX1wiKTtpZihlLmxlbmd0aD4xKXt2YXIgZj1iLmZpbmQoaitcIi1cIitlWzBdKTtpZihmLmxlbmd0aD4wKXt2YXIgZz1lWzFdO2c9PT1cInJlcGxhY2VXaXRoXCI/ZlswXSE9PWRbMF0mJmYucmVwbGFjZVdpdGgoZCk6Zz09PVwiaW1nXCI/Zi5pcyhcImltZ1wiKT9mLmF0dHIoXCJzcmNcIixkKTpmLnJlcGxhY2VXaXRoKGEoXCI8aW1nPlwiKS5hdHRyKFwic3JjXCIsZCkuYXR0cihcImNsYXNzXCIsZi5hdHRyKFwiY2xhc3NcIikpKTpmLmF0dHIoZVsxXSxkKX19ZWxzZSBiLmZpbmQoaitcIi1cIitjKS5odG1sKGQpfSl9LF9nZXRTY3JvbGxiYXJTaXplOmZ1bmN0aW9uKCl7aWYobi5zY3JvbGxiYXJTaXplPT09dW5kZWZpbmVkKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4O1wiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSksbi5zY3JvbGxiYXJTaXplPWEub2Zmc2V0V2lkdGgtYS5jbGllbnRXaWR0aCxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpfXJldHVybiBuLnNjcm9sbGJhclNpemV9fSxhLm1hZ25pZmljUG9wdXA9e2luc3RhbmNlOm51bGwscHJvdG86by5wcm90b3R5cGUsbW9kdWxlczpbXSxvcGVuOmZ1bmN0aW9uKGIsYyl7cmV0dXJuIEEoKSxiP2I9YS5leHRlbmQoITAse30sYik6Yj17fSxiLmlzT2JqPSEwLGIuaW5kZXg9Y3x8MCx0aGlzLmluc3RhbmNlLm9wZW4oYil9LGNsb3NlOmZ1bmN0aW9uKCl7cmV0dXJuIGEubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSYmYS5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCl9LHJlZ2lzdGVyTW9kdWxlOmZ1bmN0aW9uKGIsYyl7Yy5vcHRpb25zJiYoYS5tYWduaWZpY1BvcHVwLmRlZmF1bHRzW2JdPWMub3B0aW9ucyksYS5leHRlbmQodGhpcy5wcm90byxjLnByb3RvKSx0aGlzLm1vZHVsZXMucHVzaChiKX0sZGVmYXVsdHM6e2Rpc2FibGVPbjowLGtleTpudWxsLG1pZENsaWNrOiExLG1haW5DbGFzczpcIlwiLHByZWxvYWRlcjohMCxmb2N1czpcIlwiLGNsb3NlT25Db250ZW50Q2xpY2s6ITEsY2xvc2VPbkJnQ2xpY2s6ITAsY2xvc2VCdG5JbnNpZGU6ITAsc2hvd0Nsb3NlQnRuOiEwLGVuYWJsZUVzY2FwZUtleTohMCxtb2RhbDohMSxhbGlnblRvcDohMSxyZW1vdmFsRGVsYXk6MCxwcmVwZW5kVG86bnVsbCxmaXhlZENvbnRlbnRQb3M6XCJhdXRvXCIsZml4ZWRCZ1BvczpcImF1dG9cIixvdmVyZmxvd1k6XCJhdXRvXCIsY2xvc2VNYXJrdXA6JzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+Jyx0Q2xvc2U6XCJDbG9zZSAoRXNjKVwiLHRMb2FkaW5nOlwiTG9hZGluZy4uLlwiLGF1dG9Gb2N1c0xhc3Q6ITB9fSxhLmZuLm1hZ25pZmljUG9wdXA9ZnVuY3Rpb24oYil7QSgpO3ZhciBjPWEodGhpcyk7aWYodHlwZW9mIGI9PVwic3RyaW5nXCIpaWYoYj09PVwib3BlblwiKXt2YXIgZCxlPXA/Yy5kYXRhKFwibWFnbmlmaWNQb3B1cFwiKTpjWzBdLm1hZ25pZmljUG9wdXAsZj1wYXJzZUludChhcmd1bWVudHNbMV0sMTApfHwwO2UuaXRlbXM/ZD1lLml0ZW1zW2ZdOihkPWMsZS5kZWxlZ2F0ZSYmKGQ9ZC5maW5kKGUuZGVsZWdhdGUpKSxkPWQuZXEoZikpLG4uX29wZW5DbGljayh7bWZwRWw6ZH0sYyxlKX1lbHNlIG4uaXNPcGVuJiZuW2JdLmFwcGx5KG4sQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKTtlbHNlIGI9YS5leHRlbmQoITAse30sYikscD9jLmRhdGEoXCJtYWduaWZpY1BvcHVwXCIsYik6Y1swXS5tYWduaWZpY1BvcHVwPWIsbi5hZGRHcm91cChjLGIpO3JldHVybiBjfTt2YXIgQz1cImlubGluZVwiLEQsRSxGLEc9ZnVuY3Rpb24oKXtGJiYoRS5hZnRlcihGLmFkZENsYXNzKEQpKS5kZXRhY2goKSxGPW51bGwpfTthLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQyx7b3B0aW9uczp7aGlkZGVuQ2xhc3M6XCJoaWRlXCIsbWFya3VwOlwiXCIsdE5vdEZvdW5kOlwiQ29udGVudCBub3QgZm91bmRcIn0scHJvdG86e2luaXRJbmxpbmU6ZnVuY3Rpb24oKXtuLnR5cGVzLnB1c2goQyksdyhiK1wiLlwiK0MsZnVuY3Rpb24oKXtHKCl9KX0sZ2V0SW5saW5lOmZ1bmN0aW9uKGIsYyl7RygpO2lmKGIuc3JjKXt2YXIgZD1uLnN0LmlubGluZSxlPWEoYi5zcmMpO2lmKGUubGVuZ3RoKXt2YXIgZj1lWzBdLnBhcmVudE5vZGU7ZiYmZi50YWdOYW1lJiYoRXx8KEQ9ZC5oaWRkZW5DbGFzcyxFPXgoRCksRD1cIm1mcC1cIitEKSxGPWUuYWZ0ZXIoRSkuZGV0YWNoKCkucmVtb3ZlQ2xhc3MoRCkpLG4udXBkYXRlU3RhdHVzKFwicmVhZHlcIil9ZWxzZSBuLnVwZGF0ZVN0YXR1cyhcImVycm9yXCIsZC50Tm90Rm91bmQpLGU9YShcIjxkaXY+XCIpO3JldHVybiBiLmlubGluZUVsZW1lbnQ9ZSxlfXJldHVybiBuLnVwZGF0ZVN0YXR1cyhcInJlYWR5XCIpLG4uX3BhcnNlTWFya3VwKGMse30sYiksY319fSk7dmFyIEg9XCJhamF4XCIsSSxKPWZ1bmN0aW9uKCl7SSYmYShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhJKX0sSz1mdW5jdGlvbigpe0ooKSxuLnJlcSYmbi5yZXEuYWJvcnQoKX07YS5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKEgse29wdGlvbnM6e3NldHRpbmdzOm51bGwsY3Vyc29yOlwibWZwLWFqYXgtY3VyXCIsdEVycm9yOic8YSBocmVmPVwiJXVybCVcIj5UaGUgY29udGVudDwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nfSxwcm90bzp7aW5pdEFqYXg6ZnVuY3Rpb24oKXtuLnR5cGVzLnB1c2goSCksST1uLnN0LmFqYXguY3Vyc29yLHcoYitcIi5cIitILEspLHcoXCJCZWZvcmVDaGFuZ2UuXCIrSCxLKX0sZ2V0QWpheDpmdW5jdGlvbihiKXtJJiZhKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKEkpLG4udXBkYXRlU3RhdHVzKFwibG9hZGluZ1wiKTt2YXIgYz1hLmV4dGVuZCh7dXJsOmIuc3JjLHN1Y2Nlc3M6ZnVuY3Rpb24oYyxkLGUpe3ZhciBmPXtkYXRhOmMseGhyOmV9O3koXCJQYXJzZUFqYXhcIixmKSxuLmFwcGVuZENvbnRlbnQoYShmLmRhdGEpLEgpLGIuZmluaXNoZWQ9ITAsSigpLG4uX3NldEZvY3VzKCksc2V0VGltZW91dChmdW5jdGlvbigpe24ud3JhcC5hZGRDbGFzcyhrKX0sMTYpLG4udXBkYXRlU3RhdHVzKFwicmVhZHlcIikseShcIkFqYXhDb250ZW50QWRkZWRcIil9LGVycm9yOmZ1bmN0aW9uKCl7SigpLGIuZmluaXNoZWQ9Yi5sb2FkRXJyb3I9ITAsbi51cGRhdGVTdGF0dXMoXCJlcnJvclwiLG4uc3QuYWpheC50RXJyb3IucmVwbGFjZShcIiV1cmwlXCIsYi5zcmMpKX19LG4uc3QuYWpheC5zZXR0aW5ncyk7cmV0dXJuIG4ucmVxPWEuYWpheChjKSxcIlwifX19KTt2YXIgTCxNPWZ1bmN0aW9uKGIpe2lmKGIuZGF0YSYmYi5kYXRhLnRpdGxlIT09dW5kZWZpbmVkKXJldHVybiBiLmRhdGEudGl0bGU7dmFyIGM9bi5zdC5pbWFnZS50aXRsZVNyYztpZihjKXtpZihhLmlzRnVuY3Rpb24oYykpcmV0dXJuIGMuY2FsbChuLGIpO2lmKGIuZWwpcmV0dXJuIGIuZWwuYXR0cihjKXx8XCJcIn1yZXR1cm5cIlwifTthLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoXCJpbWFnZVwiLHtvcHRpb25zOnttYXJrdXA6JzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+PGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PjxmaWd1cmU+PGRpdiBjbGFzcz1cIm1mcC1pbWdcIj48L2Rpdj48ZmlnY2FwdGlvbj48ZGl2IGNsYXNzPVwibWZwLWJvdHRvbS1iYXJcIj48ZGl2IGNsYXNzPVwibWZwLXRpdGxlXCI+PC9kaXY+PGRpdiBjbGFzcz1cIm1mcC1jb3VudGVyXCI+PC9kaXY+PC9kaXY+PC9maWdjYXB0aW9uPjwvZmlndXJlPjwvZGl2PicsY3Vyc29yOlwibWZwLXpvb20tb3V0LWN1clwiLHRpdGxlU3JjOlwidGl0bGVcIix2ZXJ0aWNhbEZpdDohMCx0RXJyb3I6JzxhIGhyZWY9XCIldXJsJVwiPlRoZSBpbWFnZTwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nfSxwcm90bzp7aW5pdEltYWdlOmZ1bmN0aW9uKCl7dmFyIGM9bi5zdC5pbWFnZSxkPVwiLmltYWdlXCI7bi50eXBlcy5wdXNoKFwiaW1hZ2VcIiksdyhnK2QsZnVuY3Rpb24oKXtuLmN1cnJJdGVtLnR5cGU9PT1cImltYWdlXCImJmMuY3Vyc29yJiZhKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKGMuY3Vyc29yKX0pLHcoYitkLGZ1bmN0aW9uKCl7Yy5jdXJzb3ImJmEoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoYy5jdXJzb3IpLHIub2ZmKFwicmVzaXplXCIrail9KSx3KFwiUmVzaXplXCIrZCxuLnJlc2l6ZUltYWdlKSxuLmlzTG93SUUmJncoXCJBZnRlckNoYW5nZVwiLG4ucmVzaXplSW1hZ2UpfSxyZXNpemVJbWFnZTpmdW5jdGlvbigpe3ZhciBhPW4uY3Vyckl0ZW07aWYoIWF8fCFhLmltZylyZXR1cm47aWYobi5zdC5pbWFnZS52ZXJ0aWNhbEZpdCl7dmFyIGI9MDtuLmlzTG93SUUmJihiPXBhcnNlSW50KGEuaW1nLmNzcyhcInBhZGRpbmctdG9wXCIpLDEwKStwYXJzZUludChhLmltZy5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiKSwxMCkpLGEuaW1nLmNzcyhcIm1heC1oZWlnaHRcIixuLndILWIpfX0sX29uSW1hZ2VIYXNTaXplOmZ1bmN0aW9uKGEpe2EuaW1nJiYoYS5oYXNTaXplPSEwLEwmJmNsZWFySW50ZXJ2YWwoTCksYS5pc0NoZWNraW5nSW1nU2l6ZT0hMSx5KFwiSW1hZ2VIYXNTaXplXCIsYSksYS5pbWdIaWRkZW4mJihuLmNvbnRlbnQmJm4uY29udGVudC5yZW1vdmVDbGFzcyhcIm1mcC1sb2FkaW5nXCIpLGEuaW1nSGlkZGVuPSExKSl9LGZpbmRJbWFnZVNpemU6ZnVuY3Rpb24oYSl7dmFyIGI9MCxjPWEuaW1nWzBdLGQ9ZnVuY3Rpb24oZSl7TCYmY2xlYXJJbnRlcnZhbChMKSxMPXNldEludGVydmFsKGZ1bmN0aW9uKCl7aWYoYy5uYXR1cmFsV2lkdGg+MCl7bi5fb25JbWFnZUhhc1NpemUoYSk7cmV0dXJufWI+MjAwJiZjbGVhckludGVydmFsKEwpLGIrKyxiPT09Mz9kKDEwKTpiPT09NDA/ZCg1MCk6Yj09PTEwMCYmZCg1MDApfSxlKX07ZCgxKX0sZ2V0SW1hZ2U6ZnVuY3Rpb24oYixjKXt2YXIgZD0wLGU9ZnVuY3Rpb24oKXtiJiYoYi5pbWdbMF0uY29tcGxldGU/KGIuaW1nLm9mZihcIi5tZnBsb2FkZXJcIiksYj09PW4uY3Vyckl0ZW0mJihuLl9vbkltYWdlSGFzU2l6ZShiKSxuLnVwZGF0ZVN0YXR1cyhcInJlYWR5XCIpKSxiLmhhc1NpemU9ITAsYi5sb2FkZWQ9ITAseShcIkltYWdlTG9hZENvbXBsZXRlXCIpKTooZCsrLGQ8MjAwP3NldFRpbWVvdXQoZSwxMDApOmYoKSkpfSxmPWZ1bmN0aW9uKCl7YiYmKGIuaW1nLm9mZihcIi5tZnBsb2FkZXJcIiksYj09PW4uY3Vyckl0ZW0mJihuLl9vbkltYWdlSGFzU2l6ZShiKSxuLnVwZGF0ZVN0YXR1cyhcImVycm9yXCIsZy50RXJyb3IucmVwbGFjZShcIiV1cmwlXCIsYi5zcmMpKSksYi5oYXNTaXplPSEwLGIubG9hZGVkPSEwLGIubG9hZEVycm9yPSEwKX0sZz1uLnN0LmltYWdlLGg9Yy5maW5kKFwiLm1mcC1pbWdcIik7aWYoaC5sZW5ndGgpe3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7aS5jbGFzc05hbWU9XCJtZnAtaW1nXCIsYi5lbCYmYi5lbC5maW5kKFwiaW1nXCIpLmxlbmd0aCYmKGkuYWx0PWIuZWwuZmluZChcImltZ1wiKS5hdHRyKFwiYWx0XCIpKSxiLmltZz1hKGkpLm9uKFwibG9hZC5tZnBsb2FkZXJcIixlKS5vbihcImVycm9yLm1mcGxvYWRlclwiLGYpLGkuc3JjPWIuc3JjLGguaXMoXCJpbWdcIikmJihiLmltZz1iLmltZy5jbG9uZSgpKSxpPWIuaW1nWzBdLGkubmF0dXJhbFdpZHRoPjA/Yi5oYXNTaXplPSEwOmkud2lkdGh8fChiLmhhc1NpemU9ITEpfXJldHVybiBuLl9wYXJzZU1hcmt1cChjLHt0aXRsZTpNKGIpLGltZ19yZXBsYWNlV2l0aDpiLmltZ30sYiksbi5yZXNpemVJbWFnZSgpLGIuaGFzU2l6ZT8oTCYmY2xlYXJJbnRlcnZhbChMKSxiLmxvYWRFcnJvcj8oYy5hZGRDbGFzcyhcIm1mcC1sb2FkaW5nXCIpLG4udXBkYXRlU3RhdHVzKFwiZXJyb3JcIixnLnRFcnJvci5yZXBsYWNlKFwiJXVybCVcIixiLnNyYykpKTooYy5yZW1vdmVDbGFzcyhcIm1mcC1sb2FkaW5nXCIpLG4udXBkYXRlU3RhdHVzKFwicmVhZHlcIikpLGMpOihuLnVwZGF0ZVN0YXR1cyhcImxvYWRpbmdcIiksYi5sb2FkaW5nPSEwLGIuaGFzU2l6ZXx8KGIuaW1nSGlkZGVuPSEwLGMuYWRkQ2xhc3MoXCJtZnAtbG9hZGluZ1wiKSxuLmZpbmRJbWFnZVNpemUoYikpLGMpfX19KTt2YXIgTixPPWZ1bmN0aW9uKCl7cmV0dXJuIE49PT11bmRlZmluZWQmJihOPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpLnN0eWxlLk1velRyYW5zZm9ybSE9PXVuZGVmaW5lZCksTn07YS5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFwiem9vbVwiLHtvcHRpb25zOntlbmFibGVkOiExLGVhc2luZzpcImVhc2UtaW4tb3V0XCIsZHVyYXRpb246MzAwLG9wZW5lcjpmdW5jdGlvbihhKXtyZXR1cm4gYS5pcyhcImltZ1wiKT9hOmEuZmluZChcImltZ1wiKX19LHByb3RvOntpbml0Wm9vbTpmdW5jdGlvbigpe3ZhciBhPW4uc3Quem9vbSxkPVwiLnpvb21cIixlO2lmKCFhLmVuYWJsZWR8fCFuLnN1cHBvcnRzVHJhbnNpdGlvbilyZXR1cm47dmFyIGY9YS5kdXJhdGlvbixnPWZ1bmN0aW9uKGIpe3ZhciBjPWIuY2xvbmUoKS5yZW1vdmVBdHRyKFwic3R5bGVcIikucmVtb3ZlQXR0cihcImNsYXNzXCIpLmFkZENsYXNzKFwibWZwLWFuaW1hdGVkLWltYWdlXCIpLGQ9XCJhbGwgXCIrYS5kdXJhdGlvbi8xZTMrXCJzIFwiK2EuZWFzaW5nLGU9e3Bvc2l0aW9uOlwiZml4ZWRcIix6SW5kZXg6OTk5OSxsZWZ0OjAsdG9wOjAsXCItd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHlcIjpcImhpZGRlblwifSxmPVwidHJhbnNpdGlvblwiO3JldHVybiBlW1wiLXdlYmtpdC1cIitmXT1lW1wiLW1vei1cIitmXT1lW1wiLW8tXCIrZl09ZVtmXT1kLGMuY3NzKGUpLGN9LGg9ZnVuY3Rpb24oKXtuLmNvbnRlbnQuY3NzKFwidmlzaWJpbGl0eVwiLFwidmlzaWJsZVwiKX0saSxqO3coXCJCdWlsZENvbnRyb2xzXCIrZCxmdW5jdGlvbigpe2lmKG4uX2FsbG93Wm9vbSgpKXtjbGVhclRpbWVvdXQoaSksbi5jb250ZW50LmNzcyhcInZpc2liaWxpdHlcIixcImhpZGRlblwiKSxlPW4uX2dldEl0ZW1Ub1pvb20oKTtpZighZSl7aCgpO3JldHVybn1qPWcoZSksai5jc3Mobi5fZ2V0T2Zmc2V0KCkpLG4ud3JhcC5hcHBlbmQoaiksaT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ai5jc3Mobi5fZ2V0T2Zmc2V0KCEwKSksaT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aCgpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtqLnJlbW92ZSgpLGU9aj1udWxsLHkoXCJab29tQW5pbWF0aW9uRW5kZWRcIil9LDE2KX0sZil9LDE2KX19KSx3KGMrZCxmdW5jdGlvbigpe2lmKG4uX2FsbG93Wm9vbSgpKXtjbGVhclRpbWVvdXQoaSksbi5zdC5yZW1vdmFsRGVsYXk9ZjtpZighZSl7ZT1uLl9nZXRJdGVtVG9ab29tKCk7aWYoIWUpcmV0dXJuO2o9ZyhlKX1qLmNzcyhuLl9nZXRPZmZzZXQoITApKSxuLndyYXAuYXBwZW5kKGopLG4uY29udGVudC5jc3MoXCJ2aXNpYmlsaXR5XCIsXCJoaWRkZW5cIiksc2V0VGltZW91dChmdW5jdGlvbigpe2ouY3NzKG4uX2dldE9mZnNldCgpKX0sMTYpfX0pLHcoYitkLGZ1bmN0aW9uKCl7bi5fYWxsb3dab29tKCkmJihoKCksaiYmai5yZW1vdmUoKSxlPW51bGwpfSl9LF9hbGxvd1pvb206ZnVuY3Rpb24oKXtyZXR1cm4gbi5jdXJySXRlbS50eXBlPT09XCJpbWFnZVwifSxfZ2V0SXRlbVRvWm9vbTpmdW5jdGlvbigpe3JldHVybiBuLmN1cnJJdGVtLmhhc1NpemU/bi5jdXJySXRlbS5pbWc6ITF9LF9nZXRPZmZzZXQ6ZnVuY3Rpb24oYil7dmFyIGM7Yj9jPW4uY3Vyckl0ZW0uaW1nOmM9bi5zdC56b29tLm9wZW5lcihuLmN1cnJJdGVtLmVsfHxuLmN1cnJJdGVtKTt2YXIgZD1jLm9mZnNldCgpLGU9cGFyc2VJbnQoYy5jc3MoXCJwYWRkaW5nLXRvcFwiKSwxMCksZj1wYXJzZUludChjLmNzcyhcInBhZGRpbmctYm90dG9tXCIpLDEwKTtkLnRvcC09YSh3aW5kb3cpLnNjcm9sbFRvcCgpLWU7dmFyIGc9e3dpZHRoOmMud2lkdGgoKSxoZWlnaHQ6KHA/Yy5pbm5lckhlaWdodCgpOmNbMF0ub2Zmc2V0SGVpZ2h0KS1mLWV9O3JldHVybiBPKCk/Z1tcIi1tb3otdHJhbnNmb3JtXCJdPWcudHJhbnNmb3JtPVwidHJhbnNsYXRlKFwiK2QubGVmdCtcInB4LFwiK2QudG9wK1wicHgpXCI6KGcubGVmdD1kLmxlZnQsZy50b3A9ZC50b3ApLGd9fX0pO3ZhciBQPVwiaWZyYW1lXCIsUT1cIi8vYWJvdXQ6YmxhbmtcIixSPWZ1bmN0aW9uKGEpe2lmKG4uY3VyclRlbXBsYXRlW1BdKXt2YXIgYj1uLmN1cnJUZW1wbGF0ZVtQXS5maW5kKFwiaWZyYW1lXCIpO2IubGVuZ3RoJiYoYXx8KGJbMF0uc3JjPVEpLG4uaXNJRTgmJmIuY3NzKFwiZGlzcGxheVwiLGE/XCJibG9ja1wiOlwibm9uZVwiKSl9fTthLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoUCx7b3B0aW9uczp7bWFya3VwOic8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj48ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+PGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPjwvZGl2Picsc3JjQWN0aW9uOlwiaWZyYW1lX3NyY1wiLHBhdHRlcm5zOnt5b3V0dWJlOntpbmRleDpcInlvdXR1YmUuY29tXCIsaWQ6XCJ2PVwiLHNyYzpcIi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyVpZCU/YXV0b3BsYXk9MVwifSx2aW1lbzp7aW5kZXg6XCJ2aW1lby5jb20vXCIsaWQ6XCIvXCIsc3JjOlwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyVpZCU/YXV0b3BsYXk9MVwifSxnbWFwczp7aW5kZXg6XCIvL21hcHMuZ29vZ2xlLlwiLHNyYzpcIiVpZCUmb3V0cHV0PWVtYmVkXCJ9fX0scHJvdG86e2luaXRJZnJhbWU6ZnVuY3Rpb24oKXtuLnR5cGVzLnB1c2goUCksdyhcIkJlZm9yZUNoYW5nZVwiLGZ1bmN0aW9uKGEsYixjKXtiIT09YyYmKGI9PT1QP1IoKTpjPT09UCYmUighMCkpfSksdyhiK1wiLlwiK1AsZnVuY3Rpb24oKXtSKCl9KX0sZ2V0SWZyYW1lOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9Yi5zcmMsZT1uLnN0LmlmcmFtZTthLmVhY2goZS5wYXR0ZXJucyxmdW5jdGlvbigpe2lmKGQuaW5kZXhPZih0aGlzLmluZGV4KT4tMSlyZXR1cm4gdGhpcy5pZCYmKHR5cGVvZiB0aGlzLmlkPT1cInN0cmluZ1wiP2Q9ZC5zdWJzdHIoZC5sYXN0SW5kZXhPZih0aGlzLmlkKSt0aGlzLmlkLmxlbmd0aCxkLmxlbmd0aCk6ZD10aGlzLmlkLmNhbGwodGhpcyxkKSksZD10aGlzLnNyYy5yZXBsYWNlKFwiJWlkJVwiLGQpLCExfSk7dmFyIGY9e307cmV0dXJuIGUuc3JjQWN0aW9uJiYoZltlLnNyY0FjdGlvbl09ZCksbi5fcGFyc2VNYXJrdXAoYyxmLGIpLG4udXBkYXRlU3RhdHVzKFwicmVhZHlcIiksY319fSk7dmFyIFM9ZnVuY3Rpb24oYSl7dmFyIGI9bi5pdGVtcy5sZW5ndGg7cmV0dXJuIGE+Yi0xP2EtYjphPDA/YithOmF9LFQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhLnJlcGxhY2UoLyVjdXJyJS9naSxiKzEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksYyl9O2EubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShcImdhbGxlcnlcIix7b3B0aW9uczp7ZW5hYmxlZDohMSxhcnJvd01hcmt1cDonPGJ1dHRvbiB0aXRsZT1cIiV0aXRsZSVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtZnAtYXJyb3cgbWZwLWFycm93LSVkaXIlXCI+PC9idXR0b24+JyxwcmVsb2FkOlswLDJdLG5hdmlnYXRlQnlJbWdDbGljazohMCxhcnJvd3M6ITAsdFByZXY6XCJQcmV2aW91cyAoTGVmdCBhcnJvdyBrZXkpXCIsdE5leHQ6XCJOZXh0IChSaWdodCBhcnJvdyBrZXkpXCIsdENvdW50ZXI6XCIlY3VyciUgb2YgJXRvdGFsJVwifSxwcm90bzp7aW5pdEdhbGxlcnk6ZnVuY3Rpb24oKXt2YXIgYz1uLnN0LmdhbGxlcnksZD1cIi5tZnAtZ2FsbGVyeVwiO24uZGlyZWN0aW9uPSEwO2lmKCFjfHwhYy5lbmFibGVkKXJldHVybiExO3UrPVwiIG1mcC1nYWxsZXJ5XCIsdyhnK2QsZnVuY3Rpb24oKXtjLm5hdmlnYXRlQnlJbWdDbGljayYmbi53cmFwLm9uKFwiY2xpY2tcIitkLFwiLm1mcC1pbWdcIixmdW5jdGlvbigpe2lmKG4uaXRlbXMubGVuZ3RoPjEpcmV0dXJuIG4ubmV4dCgpLCExfSkscy5vbihcImtleWRvd25cIitkLGZ1bmN0aW9uKGEpe2Eua2V5Q29kZT09PTM3P24ucHJldigpOmEua2V5Q29kZT09PTM5JiZuLm5leHQoKX0pfSksdyhcIlVwZGF0ZVN0YXR1c1wiK2QsZnVuY3Rpb24oYSxiKXtiLnRleHQmJihiLnRleHQ9VChiLnRleHQsbi5jdXJySXRlbS5pbmRleCxuLml0ZW1zLmxlbmd0aCkpfSksdyhmK2QsZnVuY3Rpb24oYSxiLGQsZSl7dmFyIGY9bi5pdGVtcy5sZW5ndGg7ZC5jb3VudGVyPWY+MT9UKGMudENvdW50ZXIsZS5pbmRleCxmKTpcIlwifSksdyhcIkJ1aWxkQ29udHJvbHNcIitkLGZ1bmN0aW9uKCl7aWYobi5pdGVtcy5sZW5ndGg+MSYmYy5hcnJvd3MmJiFuLmFycm93TGVmdCl7dmFyIGI9Yy5hcnJvd01hcmt1cCxkPW4uYXJyb3dMZWZ0PWEoYi5yZXBsYWNlKC8ldGl0bGUlL2dpLGMudFByZXYpLnJlcGxhY2UoLyVkaXIlL2dpLFwibGVmdFwiKSkuYWRkQ2xhc3MobSksZT1uLmFycm93UmlnaHQ9YShiLnJlcGxhY2UoLyV0aXRsZSUvZ2ksYy50TmV4dCkucmVwbGFjZSgvJWRpciUvZ2ksXCJyaWdodFwiKSkuYWRkQ2xhc3MobSk7ZC5jbGljayhmdW5jdGlvbigpe24ucHJldigpfSksZS5jbGljayhmdW5jdGlvbigpe24ubmV4dCgpfSksbi5jb250YWluZXIuYXBwZW5kKGQuYWRkKGUpKX19KSx3KGgrZCxmdW5jdGlvbigpe24uX3ByZWxvYWRUaW1lb3V0JiZjbGVhclRpbWVvdXQobi5fcHJlbG9hZFRpbWVvdXQpLG4uX3ByZWxvYWRUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtuLnByZWxvYWROZWFyYnlJbWFnZXMoKSxuLl9wcmVsb2FkVGltZW91dD1udWxsfSwxNil9KSx3KGIrZCxmdW5jdGlvbigpe3Mub2ZmKGQpLG4ud3JhcC5vZmYoXCJjbGlja1wiK2QpLG4uYXJyb3dSaWdodD1uLmFycm93TGVmdD1udWxsfSl9LG5leHQ6ZnVuY3Rpb24oKXtuLmRpcmVjdGlvbj0hMCxuLmluZGV4PVMobi5pbmRleCsxKSxuLnVwZGF0ZUl0ZW1IVE1MKCl9LHByZXY6ZnVuY3Rpb24oKXtuLmRpcmVjdGlvbj0hMSxuLmluZGV4PVMobi5pbmRleC0xKSxuLnVwZGF0ZUl0ZW1IVE1MKCl9LGdvVG86ZnVuY3Rpb24oYSl7bi5kaXJlY3Rpb249YT49bi5pbmRleCxuLmluZGV4PWEsbi51cGRhdGVJdGVtSFRNTCgpfSxwcmVsb2FkTmVhcmJ5SW1hZ2VzOmZ1bmN0aW9uKCl7dmFyIGE9bi5zdC5nYWxsZXJ5LnByZWxvYWQsYj1NYXRoLm1pbihhWzBdLG4uaXRlbXMubGVuZ3RoKSxjPU1hdGgubWluKGFbMV0sbi5pdGVtcy5sZW5ndGgpLGQ7Zm9yKGQ9MTtkPD0obi5kaXJlY3Rpb24/YzpiKTtkKyspbi5fcHJlbG9hZEl0ZW0obi5pbmRleCtkKTtmb3IoZD0xO2Q8PShuLmRpcmVjdGlvbj9iOmMpO2QrKyluLl9wcmVsb2FkSXRlbShuLmluZGV4LWQpfSxfcHJlbG9hZEl0ZW06ZnVuY3Rpb24oYil7Yj1TKGIpO2lmKG4uaXRlbXNbYl0ucHJlbG9hZGVkKXJldHVybjt2YXIgYz1uLml0ZW1zW2JdO2MucGFyc2VkfHwoYz1uLnBhcnNlRWwoYikpLHkoXCJMYXp5TG9hZFwiLGMpLGMudHlwZT09PVwiaW1hZ2VcIiYmKGMuaW1nPWEoJzxpbWcgY2xhc3M9XCJtZnAtaW1nXCIgLz4nKS5vbihcImxvYWQubWZwbG9hZGVyXCIsZnVuY3Rpb24oKXtjLmhhc1NpemU9ITB9KS5vbihcImVycm9yLm1mcGxvYWRlclwiLGZ1bmN0aW9uKCl7Yy5oYXNTaXplPSEwLGMubG9hZEVycm9yPSEwLHkoXCJMYXp5TG9hZEVycm9yXCIsYyl9KS5hdHRyKFwic3JjXCIsYy5zcmMpKSxjLnByZWxvYWRlZD0hMH19fSk7dmFyIFU9XCJyZXRpbmFcIjthLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoVSx7b3B0aW9uczp7cmVwbGFjZVNyYzpmdW5jdGlvbihhKXtyZXR1cm4gYS5zcmMucmVwbGFjZSgvXFwuXFx3KyQvLGZ1bmN0aW9uKGEpe3JldHVyblwiQDJ4XCIrYX0pfSxyYXRpbzoxfSxwcm90bzp7aW5pdFJldGluYTpmdW5jdGlvbigpe2lmKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvPjEpe3ZhciBhPW4uc3QucmV0aW5hLGI9YS5yYXRpbztiPWlzTmFOKGIpP2IoKTpiLGI+MSYmKHcoXCJJbWFnZUhhc1NpemUuXCIrVSxmdW5jdGlvbihhLGMpe2MuaW1nLmNzcyh7XCJtYXgtd2lkdGhcIjpjLmltZ1swXS5uYXR1cmFsV2lkdGgvYix3aWR0aDpcIjEwMCVcIn0pfSksdyhcIkVsZW1lbnRQYXJzZS5cIitVLGZ1bmN0aW9uKGMsZCl7ZC5zcmM9YS5yZXBsYWNlU3JjKGQsYil9KSl9fX19KSxBKCl9KVxyXG4vKiFcclxuICBoZXksIFtiZV1MYXp5LmpzIC0gdjEuNS4yIC0gMjAxNS4xMi4wMVxyXG4gIEEgbGF6eSBsb2FkaW5nIGFuZCBtdWx0aS1zZXJ2aW5nIGltYWdlIHNjcmlwdFxyXG4gIChjKSBCam9lcm4gS2xpbmdnYWFyZCAtIEBia2xpbmdnYWFyZCAtIGh0dHA6Ly9kaW5icm9yLmRrL2JsYXp5XHJcbiovXHJcbjtcclxuKGZ1bmN0aW9uKHJvb3QsIGJsYXp5KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBiTGF6eSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlXHJcbiAgICAgICAgZGVmaW5lKGJsYXp5KTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XHJcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXHJcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gYmxhenkoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzLiBSZWdpc3RlciBiTGF6eSBvbiB3aW5kb3dcclxuICAgICAgICByb290LkJsYXp5ID0gYmxhenkoKTtcclxuICAgIH1cclxufSkodGhpcywgZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy9wcml2YXRlIHZhcnNcclxuICAgIHZhciBzb3VyY2UsIHZpZXdwb3J0LCBpc1JldGluYTtcclxuXHJcbiAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIEJsYXp5KG9wdGlvbnMpIHtcclxuICAgICAgICAvL0lFNy0gZmFsbGJhY2sgZm9yIG1pc3NpbmcgcXVlcnlTZWxlY3RvckFsbCBzdXBwb3J0XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlU3R5bGVTaGVldCgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsID0gZnVuY3Rpb24ociwgYywgaSwgaiwgYSkge1xyXG4gICAgICAgICAgICAgICAgYSA9IGRvY3VtZW50LmFsbCwgYyA9IFtdLCByID0gci5yZXBsYWNlKC9cXFtmb3JcXGIvZ2ksICdbaHRtbEZvcicpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSByLmxlbmd0aDsgaS0tOykge1xyXG4gICAgICAgICAgICAgICAgICAgIHMuYWRkUnVsZShyW2ldLCAnazp2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gYS5sZW5ndGg7IGotLTspIGFbal0uY3VycmVudFN0eWxlLmsgJiYgYy5wdXNoKGFbal0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHMucmVtb3ZlUnVsZSgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9vcHRpb25zIGFuZCBoZWxwZXIgdmFyc1xyXG4gICAgICAgIHZhciBzY29wZSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHV0aWwgPSBzY29wZS5fdXRpbCA9IHt9O1xyXG4gICAgICAgIHV0aWwuZWxlbWVudHMgPSBbXTtcclxuICAgICAgICB1dGlsLmRlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgc2NvcGUub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgc2NvcGUub3B0aW9ucy5lcnJvciA9IHNjb3BlLm9wdGlvbnMuZXJyb3IgfHwgZmFsc2U7XHJcbiAgICAgICAgc2NvcGUub3B0aW9ucy5vZmZzZXQgPSBzY29wZS5vcHRpb25zLm9mZnNldCB8fCAxMDA7XHJcbiAgICAgICAgc2NvcGUub3B0aW9ucy5zdWNjZXNzID0gc2NvcGUub3B0aW9ucy5zdWNjZXNzIHx8IGZhbHNlO1xyXG4gICAgICAgIHNjb3BlLm9wdGlvbnMuc2VsZWN0b3IgPSBzY29wZS5vcHRpb25zLnNlbGVjdG9yIHx8ICcuYi1sYXp5JztcclxuICAgICAgICBzY29wZS5vcHRpb25zLnNlcGFyYXRvciA9IHNjb3BlLm9wdGlvbnMuc2VwYXJhdG9yIHx8ICd8JztcclxuICAgICAgICBzY29wZS5vcHRpb25zLmNvbnRhaW5lciA9IHNjb3BlLm9wdGlvbnMuY29udGFpbmVyID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzY29wZS5vcHRpb25zLmNvbnRhaW5lcikgOiBmYWxzZTtcclxuICAgICAgICBzY29wZS5vcHRpb25zLmVycm9yQ2xhc3MgPSBzY29wZS5vcHRpb25zLmVycm9yQ2xhc3MgfHwgJ2ItZXJyb3InO1xyXG4gICAgICAgIHNjb3BlLm9wdGlvbnMuYnJlYWtwb2ludHMgPSBzY29wZS5vcHRpb25zLmJyZWFrcG9pbnRzIHx8IGZhbHNlO1xyXG4gICAgICAgIHNjb3BlLm9wdGlvbnMubG9hZEludmlzaWJsZSA9IHNjb3BlLm9wdGlvbnMubG9hZEludmlzaWJsZSB8fCBmYWxzZTtcclxuICAgICAgICBzY29wZS5vcHRpb25zLnN1Y2Nlc3NDbGFzcyA9IHNjb3BlLm9wdGlvbnMuc3VjY2Vzc0NsYXNzIHx8ICdiLWxvYWRlZCc7XHJcblx0XHRzY29wZS5vcHRpb25zLnZhbGlkYXRlRGVsYXkgPSBzY29wZS5vcHRpb25zLnZhbGlkYXRlRGVsYXkgfHwgMjU7XHJcblx0XHRzY29wZS5vcHRpb25zLnNhdmVWaWV3cG9ydE9mZnNldERlbGF5ID0gc2NvcGUub3B0aW9ucy5zYXZlVmlld3BvcnRPZmZzZXREZWxheSB8fCA1MDtcclxuICAgICAgICBzY29wZS5vcHRpb25zLnNyYyA9IHNvdXJjZSA9IHNjb3BlLm9wdGlvbnMuc3JjIHx8ICdkYXRhLXNyYyc7XHJcbiAgICAgICAgaXNSZXRpbmEgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDE7XHJcbiAgICAgICAgdmlld3BvcnQgPSB7fTtcclxuICAgICAgICB2aWV3cG9ydC50b3AgPSAwIC0gc2NvcGUub3B0aW9ucy5vZmZzZXQ7XHJcbiAgICAgICAgdmlld3BvcnQubGVmdCA9IDAgLSBzY29wZS5vcHRpb25zLm9mZnNldDtcclxuXHJcblxyXG4gICAgICAgIC8qIHB1YmxpYyBmdW5jdGlvbnNcclxuICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgIHNjb3BlLnJldmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5pdGlhbGl6ZSh0aGlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNjb3BlLmxvYWQgPSBmdW5jdGlvbihlbGVtZW50cywgZm9yY2UpIHtcclxuICAgICAgICAgICAgdmFyIG9wdCA9IHRoaXMub3B0aW9ucztcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsb2FkRWxlbWVudChlbGVtZW50cywgZm9yY2UsIG9wdCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEVsZW1lbnQoZWxlbWVudCwgZm9yY2UsIG9wdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2NvcGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciB1dGlsID0gc2VsZi5fdXRpbDtcclxuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIGVhY2goc2VsZi5vcHRpb25zLmNvbnRhaW5lciwgZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5iaW5kRXZlbnQob2JqZWN0LCAnc2Nyb2xsJywgdXRpbC52YWxpZGF0ZVQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdW5iaW5kRXZlbnQod2luZG93LCAnc2Nyb2xsJywgdXRpbC52YWxpZGF0ZVQpO1xyXG4gICAgICAgICAgICB1bmJpbmRFdmVudCh3aW5kb3csICdyZXNpemUnLCB1dGlsLnZhbGlkYXRlVCk7XHJcbiAgICAgICAgICAgIHVuYmluZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHV0aWwuc2F2ZVZpZXdwb3J0T2Zmc2V0VCk7XHJcbiAgICAgICAgICAgIHV0aWwuY291bnQgPSAwO1xyXG4gICAgICAgICAgICB1dGlsLmVsZW1lbnRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHV0aWwuZGVzdHJveWVkID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3Rocm90dGxlLCBlbnN1cmVzIHRoYXQgd2UgZG9uJ3QgY2FsbCB0aGUgZnVuY3Rpb25zIHRvbyBvZnRlblxyXG4gICAgICAgIHV0aWwudmFsaWRhdGVUID0gdGhyb3R0bGUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlKHNjb3BlKTtcclxuICAgICAgICB9LCBzY29wZS5vcHRpb25zLnZhbGlkYXRlRGVsYXksIHNjb3BlKTtcclxuICAgICAgICB1dGlsLnNhdmVWaWV3cG9ydE9mZnNldFQgPSB0aHJvdHRsZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2F2ZVZpZXdwb3J0T2Zmc2V0KHNjb3BlLm9wdGlvbnMub2Zmc2V0KTtcclxuICAgICAgICB9LCBzY29wZS5vcHRpb25zLnNhdmVWaWV3cG9ydE9mZnNldERlbGF5LCBzY29wZSk7XHJcbiAgICAgICAgc2F2ZVZpZXdwb3J0T2Zmc2V0KHNjb3BlLm9wdGlvbnMub2Zmc2V0KTtcclxuXHJcbiAgICAgICAgLy9oYW5kbGUgbXVsdGktc2VydmVkIGltYWdlIHNyY1xyXG4gICAgICAgIGVhY2goc2NvcGUub3B0aW9ucy5icmVha3BvaW50cywgZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3Qud2lkdGggPj0gd2luZG93LnNjcmVlbi53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgc291cmNlID0gb2JqZWN0LnNyYztcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzdGFydCBsYXp5IGxvYWRcclxuICAgICAgICBpbml0aWFsaXplKHNjb3BlKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qIFByaXZhdGUgaGVscGVyIGZ1bmN0aW9uc1xyXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoc2VsZikge1xyXG4gICAgICAgIHZhciB1dGlsID0gc2VsZi5fdXRpbDtcclxuICAgICAgICAvLyBGaXJzdCB3ZSBjcmVhdGUgYW4gYXJyYXkgb2YgZWxlbWVudHMgdG8gbGF6eSBsb2FkXHJcbiAgICAgICAgdXRpbC5lbGVtZW50cyA9IHRvQXJyYXkoc2VsZi5vcHRpb25zLnNlbGVjdG9yKTtcclxuICAgICAgICB1dGlsLmNvdW50ID0gdXRpbC5lbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgLy8gVGhlbiB3ZSBiaW5kIHJlc2l6ZSBhbmQgc2Nyb2xsIGV2ZW50cyBpZiBub3QgYWxyZWFkeSBiaW5kZWRcclxuICAgICAgICBpZiAodXRpbC5kZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgdXRpbC5kZXN0cm95ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIGVhY2goc2VsZi5vcHRpb25zLmNvbnRhaW5lciwgZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluZEV2ZW50KG9iamVjdCwgJ3Njcm9sbCcsIHV0aWwudmFsaWRhdGVUKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJpbmRFdmVudCh3aW5kb3csICdyZXNpemUnLCB1dGlsLnNhdmVWaWV3cG9ydE9mZnNldFQpO1xyXG4gICAgICAgICAgICBiaW5kRXZlbnQod2luZG93LCAncmVzaXplJywgdXRpbC52YWxpZGF0ZVQpO1xyXG4gICAgICAgICAgICBiaW5kRXZlbnQod2luZG93LCAnc2Nyb2xsJywgdXRpbC52YWxpZGF0ZVQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBbmQgZmluYWxseSwgd2Ugc3RhcnQgdG8gbGF6eSBsb2FkLiBTaG91bGQgYkxhenkgZW5zdXJlIGRvbXJlYWR5P1xyXG4gICAgICAgIHZhbGlkYXRlKHNlbGYpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHNlbGYpIHtcclxuICAgICAgICB2YXIgdXRpbCA9IHNlbGYuX3V0aWw7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGlsLmNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB1dGlsLmVsZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudEluVmlldyhlbGVtZW50KSB8fCBoYXNDbGFzcyhlbGVtZW50LCBzZWxmLm9wdGlvbnMuc3VjY2Vzc0NsYXNzKSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5lbGVtZW50cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmNvdW50LS07XHJcbiAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHV0aWwuY291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgc2VsZi5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVsZW1lbnRJblZpZXcoZWxlKSB7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBlbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgLy8gSW50ZXJzZWN0aW9uXHJcbiAgICAgICAgICAgIHJlY3QucmlnaHQgPj0gdmlld3BvcnQubGVmdCAmJiByZWN0LmJvdHRvbSA+PSB2aWV3cG9ydC50b3AgJiYgcmVjdC5sZWZ0IDw9IHZpZXdwb3J0LnJpZ2h0ICYmIHJlY3QudG9wIDw9IHZpZXdwb3J0LmJvdHRvbVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZEVsZW1lbnQoZWxlLCBmb3JjZSwgb3B0aW9ucykge1xyXG4gICAgICAgIC8vIGlmIGVsZW1lbnQgaXMgdmlzaWJsZSwgbm90IGxvYWRlZCBvciBmb3JjZWRcclxuICAgICAgICBpZiAoIWhhc0NsYXNzKGVsZSwgb3B0aW9ucy5zdWNjZXNzQ2xhc3MpICYmIChmb3JjZSB8fCBvcHRpb25zLmxvYWRJbnZpc2libGUgfHwgKGVsZS5vZmZzZXRXaWR0aCA+IDAgJiYgZWxlLm9mZnNldEhlaWdodCA+IDApKSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YVNyYyA9IGVsZS5nZXRBdHRyaWJ1dGUoc291cmNlKSB8fCBlbGUuZ2V0QXR0cmlidXRlKG9wdGlvbnMuc3JjKTsgLy8gZmFsbGJhY2sgdG8gZGVmYXVsdCAnZGF0YS1zcmMnXHJcbiAgICAgICAgICAgIGlmIChkYXRhU3JjKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVNyY1NwbGl0dGVkID0gZGF0YVNyYy5zcGxpdChvcHRpb25zLnNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3JjID0gZGF0YVNyY1NwbGl0dGVkW2lzUmV0aW5hICYmIGRhdGFTcmNTcGxpdHRlZC5sZW5ndGggPiAxID8gMSA6IDBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzSW1hZ2UgPSBlbGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ltZyc7XHJcbiAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIG1hcmt1cCwgcmVtb3ZlIGRhdGEgc291cmNlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgIGVhY2gob3B0aW9ucy5icmVha3BvaW50cywgZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLnJlbW92ZUF0dHJpYnV0ZShvYmplY3Quc3JjKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZWxlLnJlbW92ZUF0dHJpYnV0ZShvcHRpb25zLnNyYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNJbWFnZSB8fCBlbGUuc3JjID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3IpIG9wdGlvbnMuZXJyb3IoZWxlLCBcImludmFsaWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZSwgb3B0aW9ucy5lcnJvckNsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXMgZWxlbWVudCBhbiBpbWFnZSBvciBzaG91bGQgd2UgYWRkIHRoZSBzcmMgYXMgYSBiYWNrZ3JvdW5kIGltYWdlP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ltYWdlID8gZWxlLnNyYyA9IHNyYyA6IGVsZS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKFwiJyArIHNyYyArICdcIiknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGUsIG9wdGlvbnMuc3VjY2Vzc0NsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3VjY2Vzcykgb3B0aW9ucy5zdWNjZXNzKGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHRcdFx0XHRcdGltZy5zcmMgPSBzcmM7IC8vcHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHRcdGVsZS5zcmMgPSBzcmM7XHJcblx0XHRcdFx0XHRhZGRDbGFzcyhlbGUsIG9wdGlvbnMuc3VjY2Vzc0NsYXNzKTtcclxuXHRcdFx0XHR9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lcnJvcikgb3B0aW9ucy5lcnJvcihlbGUsIFwibWlzc2luZ1wiKTtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzQ2xhc3MoZWxlLCBvcHRpb25zLmVycm9yQ2xhc3MpKSBhZGRDbGFzcyhlbGUsIG9wdGlvbnMuZXJyb3JDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlLCBjbGFzc05hbWUpIHtcclxuICAgICAgICByZXR1cm4gKCcgJyArIGVsZS5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xhc3NOYW1lICsgJyAnKSAhPT0gLTE7XHJcbiAgICB9XHJcblx0XHJcblx0ZnVuY3Rpb24gYWRkQ2xhc3MoZWxlLCBjbGFzc05hbWUpe1xyXG5cdFx0ZWxlLmNsYXNzTmFtZSA9IGVsZS5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7XHJcblx0fVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvQXJyYXkoc2VsZWN0b3IpIHtcclxuXHRcdHZhciBhcnJheSA9IFtdO1xyXG4gXHRcdHZhciBub2RlbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gXHRcdGZvcih2YXIgaSA9IG5vZGVsaXN0Lmxlbmd0aDsgaS0tOyBhcnJheS51bnNoaWZ0KG5vZGVsaXN0W2ldKSl7fVxyXG5cdFx0cmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVWaWV3cG9ydE9mZnNldChvZmZzZXQpIHtcclxuICAgICAgICB2aWV3cG9ydC5ib3R0b20gPSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICsgb2Zmc2V0O1xyXG4gICAgICAgIHZpZXdwb3J0LnJpZ2h0ID0gKHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkgKyBvZmZzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50KGVsZSwgdHlwZSwgZm4pIHtcclxuICAgICAgICBpZiAoZWxlLmF0dGFjaEV2ZW50KSB7XHJcbiAgICAgICAgICAgIGVsZS5hdHRhY2hFdmVudCAmJiBlbGUuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmJpbmRFdmVudChlbGUsIHR5cGUsIGZuKSB7XHJcbiAgICAgICAgaWYgKGVsZS5kZXRhY2hFdmVudCkge1xyXG4gICAgICAgICAgICBlbGUuZGV0YWNoRXZlbnQgJiYgZWxlLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZWFjaChvYmplY3QsIGZuKSB7XHJcbiAgICAgICAgaWYgKG9iamVjdCAmJiBmbikge1xyXG4gICAgICAgICAgICB2YXIgbCA9IG9iamVjdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbCAmJiBmbihvYmplY3RbaV0sIGkpICE9PSBmYWxzZTsgaSsrKSB7fVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmbiwgbWluRGVsYXksIHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIGxhc3RDYWxsID0gMDtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBub3cgPSArbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgaWYgKG5vdyAtIGxhc3RDYWxsIDwgbWluRGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0Q2FsbCA9IG5vdztcclxuICAgICAgICAgICAgZm4uYXBwbHkoc2NvcGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSk7XHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHNlcmRpbW9hIG9uIDAyLjExLjE1LlxyXG4gKi9cclxudmFyIGdsb2JhbF9pblRpbWUgPSAwO1xyXG5pZiAoJCgnLmluZGV4X3BhZ2UnKS5sZW5ndGgpIHtcclxuICAgIHZhciBjYXJ0ID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJ0Jyk7XHJcblxyXG4gICAgdmFyIGNhcnRJdGVtcyA9IGNhcnQucXVlcnlTZWxlY3RvcignLmNhcnRfX2NvdW50Jyk7XHJcbn1cclxuaWYgKHNldHRpbmdzcikge1xyXG4gICAgaWYgKCQuaW5BcnJheSgnZGVsZXRlX2J1eV9idXR0b24nLCBzZXR0aW5nc3IpID4gLTEpIHtcclxuICAgICAgICAkKCcjb3JkZXJOb3cnKS5oaWRlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgIH1cclxufVxyXG5pZiAoJChcIiNpbnN0YWZlZWRcIikubGVuZ3RoKSB7XHJcbiAgICB2YXIgZmVlZCA9IG5ldyBJbnN0YWZlZWQoe1xyXG4gICAgICAgIGdldDogJ3VzZXInLFxyXG4gICAgICAgIGxpbWl0OiA5LFxyXG4gICAgICAgIHVzZXJJZDogJzU2MzE5MDk5OScsXHJcbiAgICAgICAgYWNjZXNzVG9rZW46ICczMjM4MzMxMDEuMTY3N2VkMC5mY2M1NDgyNTA5ZTg0NTE0OGYwNjM2ZTk4MDMyODQwMCdcclxuICAgIH0pO1xyXG4gICAgZmVlZC5ydW4oKTtcclxufVxyXG5cclxudmFyIGRlbGl2ZXJ5ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnZGVsaXZlcnknKTtcclxuXHJcbmlmICgkKFwiI2lucHV0UGhvbmVcIikubGVuZ3RoKSB7XHJcbiAgICAkKFwiI2lucHV0UGhvbmVcIikubWFzayhcIis3OTk5OTk5OTk5OVwiLCB7YXV0b2NsZWFyOiBmYWxzZX0pO1xyXG59XHJcbmlmICgkKFwiI2Zvcm1fYXVjaC1sb2dpblwiKS5sZW5ndGgpIHtcclxuICAgICQoXCIjZm9ybV9hdWNoLWxvZ2luXCIpLm1hc2soXCIrNzk5OTk5OTk5OTlcIiwge2F1dG9jbGVhcjogZmFsc2V9KTtcclxufVxyXG5pZiAoJChcIiNmb3JtLXBob25lXCIpLmxlbmd0aCkge1xyXG4gICAgJChcIiNmb3JtLXBob25lXCIpLm1hc2soXCIrNzk5OTk5OTk5OTlcIiwge2F1dG9jbGVhcjogZmFsc2V9KTtcclxufVxyXG5pZiAoJChcIiNwaG9uZVwiKS5sZW5ndGgpIHtcclxuICAgICQoXCIjcGhvbmVcIikubWFzayhcIis3OTk5OTk5OTk5OVwiLCB7YXV0b2NsZWFyOiBmYWxzZX0pXHJcbn1cclxudmFyIHN1bW07XHJcbnZhciBkYXRhVGFibGUgPSAkKCcjdGFibGVPcmRlcicpLkRhdGFUYWJsZSh7XHJcbiAgICBcImxhbmd1YWdlXCI6IHtcclxuICAgICAgICBcImVtcHR5VGFibGVcIjogXCLQmtC+0YDQt9C40L3QsCDQv9GD0YHRgtCwXCJcclxuICAgIH1cclxufSk7XHJcbnZhciBjYWNoZV9mb3JfZGF0YXRhYmxlO1xyXG52YXIgdGhpc3M7XHJcbmZ1bmN0aW9uIHVuaXFJZCgpIHtcclxuICAgIHJldHVybiBcInVuaXFJZFwiICsgTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSArIChNYXRoLnJhbmRvbSgpICogMTAwMCkpO1xyXG59XHJcbiQoXCIuc291c19zZWxlY3RfYm94IGFcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBkYXRhX25hbWUgPSAkKHRoaXMpLmRhdGEoXCJ0ZXh0XCIpO1xyXG4gICAgc291c19zZWxlY3QoZGF0YV9uYW1lKTtcclxuICAgICQoXCIjc2VsZWN0X3NvdXNcIikubmlmdHkoJ2hpZGUnKTtcclxuXHJcbn0pO1xyXG5mdW5jdGlvbiBzb3VzX3NlbGVjdChuYW1lKSB7XHJcbiAgICB2YXIgZGF0YV9pdGVtcyA9IGNhY2hlX2Zvcl9kYXRhdGFibGU7XHJcbiAgICB2YXIgaWRzID0gdW5pcUlkKCk7XHJcbiAgICBkYXRhVGFibGUucm93LmFkZChbXHJcbiAgICAgICAgXCI8aDM+XCIgKyBkYXRhX2l0ZW1zWydpdGVtX25hbWUnXSArIFwiPC9oMz48c21hbGw+XCIgKyBkYXRhX2l0ZW1zWydpdGVtX2NvbXBvbmVudCddICsgXCI8L3NtYWxsPlwiLFxyXG4gICAgICAgIFwiPHNlbGVjdCBpZD0nXCIgKyBpZHMgKyBcIicgY2xhc3M9J2Jhc2ljJyA+PG9wdGlvbiB2YWx1ZT0nJz7QktGL0LHQtdGA0LjRgtC1INGB0L7Rg9GBPC9vcHRpb24+PG9wdGlvbj7QkNGA0YDQsNCx0LjQsNGC0LA8L29wdGlvbj48b3B0aW9uPtCh0LvQuNCy0L7Rh9C90YvQuTwvb3B0aW9uPjxvcHRpb24+0J/QtdGB0YLQvjwvb3B0aW9uPjxvcHRpb24+0JPRgNC40LHQvdC+0Lk8L29wdGlvbj48b3B0aW9uPtCR0LXRiNCw0LzQtdC70Yw8L29wdGlvbj5cIixcclxuICAgICAgICBcIjxpbnB1dCB0eXBlPSdudW1iZXInICB2YWx1ZT0nMScgZGF0YS1wcmljZT0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX3ByaWNlJ10gKyBcIicgbWluPScxJyBtYXg9Jzk5OScgY2xhc3M9J2Zvcm0tY29udHJvbCcgYXJpYS1sYWJlbD0nVGV4dCBpbnB1dCB3aXRoIG11bHRpcGxlIGJ1dHRvbnMnPlwiLFxyXG4gICAgICAgIFwiPHNwYW4gY2xhc3M9J2NlbmEnPlwiICsgZGF0YV9pdGVtc1snaXRlbV9wcmljZSddICsgXCIgPGkgY2xhc3M9J2ZhIGZhLXJ1Yic+PC9pPjwvc3Bhbj5cIixcclxuICAgICAgICBcIjxhIGhyZWY9JyMwJyBpZD0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX2lkJ10gKyBcIicgY2xhc3M9J2RlbGV0ZSc+PGkgY2xhc3M9J2ZhIGZhLXRpbWVzJz48L2k+PC9hPlwiXHJcbiAgICBdKS5kcmF3KGZhbHNlKTtcclxuXHJcbiAgICAkKCcuYmFzaWMnKS5mYW5jeVNlbGVjdCgpLm9uKCdjaGFuZ2UuZnMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXJ0XCIsIEpTT04uc3RyaW5naWZ5KGRhdGFGcm9tVGFibGUoKSkpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzcyA9ICQodGhpcyk7XHJcbiAgICAkKCcjJyArIGlkcyArICcgOmNvbnRhaW5zKCcgKyBuYW1lICsgJyknKS5wcm9wKFwic2VsZWN0ZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgJChcIi5jaGVja091dCBpbnB1dFt0eXBlPW51bWJlcl1cIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xyXG5cclxuICAgIH0pO1xyXG4gICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcclxuICAgIGlvc092ZXJsYXkoe1xyXG4gICAgICAgIHRleHQ6IFwi0JTQvtCx0LDQstC70LXQvdC+IVwiLFxyXG4gICAgICAgIGR1cmF0aW9uOiAyZTMsXHJcbiAgICAgICAgaWNvbjogXCIvc3RhdGljL2ltZy9jaGVjay5wbmdcIlxyXG4gICAgfSk7XHJcbiAgICAkKCcuYmFzaWMnKS50cmlnZ2VyKCd1cGRhdGUuZnMnKTtcclxuXHJcbn1cclxuZnVuY3Rpb24gZGVsaXZlcnlfZnVuYygpIHtcclxuICAgIGlmIChkZWxpdmVyeSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBkZWxpdmVyeSA9PSBudWxsKSB7XHJcbiAgICAgICAgJChcIiNzZWxlY3RfZGVsaXZlcnlcIikubmlmdHkoXCJzaG93XCIpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChcImlucHV0OnJhZGlvW25hbWU9Z3JvdXAyXVt2YWx1ZT0nXCIgKyBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdkZWxpdmVyeScpICsgXCInXVwiKS5wcm9wKHtcImNoZWNrZWRcIjogdHJ1ZX0pO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmlmICgkKFwiLnNldHRpbmdzLCAuc2FsZSwgLmFib3V0dXNcIikubGVuZ3RoKSB7XHJcbiAgICBkZWxpdmVyeV9mdW5jKCk7XHJcbn1cclxuXHJcbmlmICgkKFwiLnNldHRpbmdzXCIpLmxlbmd0aCkge1xyXG5cclxuXHJcbiAgICB2YXIgaXRlbXMgPSBnZXRGcm9tTG9jYWwoJ21lbW9zJyk7XHJcbiAgICB2YXIgaW5kZXg7XHJcbiAgICBsb2FkTGlzdChpdGVtcyk7XHJcbiAgICAvLyBpZiBpbnB1dCBpcyBlbXB0eSBkaXNhYmxlIGJ1dHRvblxyXG4gICAgJCgnI21haW4tYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICQoJyNtYWluLWlucHV0Jykua2V5dXAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICgkKHRoaXMpLnZhbCgpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAkKCcjbWFpbi1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjbWFpbi1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gYmluZCBpbnB1dCBlbnRlciB3aXRoIGJ1dHRvbiBzdWJtaXRcclxuICAgICQoJyNtYWluLWlucHV0Jykua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcclxuICAgICAgICAgICAgaWYgKCQoJyNtYWluLWlucHV0JykudmFsKCkubGVuZ3RoICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgJCgnI21haW4tYnV0dG9uJykuY2xpY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgICQoJyNtYWluLWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSAkKCcjbWFpbi1pbnB1dCcpLnZhbCgpO1xyXG4gICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coaXRlbXNbMF0pO1xyXG4gICAgICAgICQoJyNtYWluLWlucHV0JykudmFsKCcnKTtcclxuICAgICAgICBsb2FkTGlzdChpdGVtcyk7XHJcbiAgICAgICAgc3RvcmVUb0xvY2FsKCdtZW1vcycsIGl0ZW1zKTtcclxuICAgICAgICAvLyBzZXQgYnV0dG9uIHRvXHJcbiAgICAgICAgJCgnYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgLy8gZGVsZXRlIG9uZSBpdGVtXHJcbiAgICAkKCd1bC5hZGRyTGlzdCcpLmRlbGVnYXRlKFwic3BhblwiLCBcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGluZGV4ID0gJCgnc3BhbicpLmluZGV4KHRoaXMpO1xyXG4gICAgICAgICQoJy5hZGRyTGlzdCBsaScpLmVxKGluZGV4KS5yZW1vdmUoKTtcclxuICAgICAgICBpdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHN0b3JlVG9Mb2NhbCgnbWVtb3MnLCBpdGVtcyk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZWRpdCBwYW5lbFxyXG4gICAgJCgndWwuYWRkckxpc3QnKS5kZWxlZ2F0ZSgnbGknLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW5kZXggPSAkKCcuYWRkckxpc3QgbGknKS5pbmRleCh0aGlzKTtcclxuICAgICAgICB2YXIgY29udGVudCA9IGl0ZW1zW2luZGV4XTtcclxuICAgICAgICAkKCcjZWRpdC1pbnB1dCcpLnZhbChjb250ZW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNlZGl0LWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpdGVtc1tpbmRleF0gPSAkKCcjZWRpdC1pbnB1dCcpLnZhbCgpO1xyXG4gICAgICAgIGxvYWRMaXN0KGl0ZW1zKTtcclxuICAgICAgICBzdG9yZVRvTG9jYWwoXCJtZW1vc1wiLCBpdGVtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBsb2FkTGlzdFxyXG4gICAgZnVuY3Rpb24gbG9hZExpc3QoaXRlbXMpIHtcclxuICAgICAgICAkKCcuYWRkckxpc3QgbGknKS5yZW1vdmUoKTtcclxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAkKCd1bC5hZGRyTGlzdCcpLmFwcGVuZCgnPGxpIGNsYXNzPSBcImxpc3QtZ3JvdXAtaXRlbVwiIGRhdGEtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLXRhcmdldD1cIiNlZGl0TW9kYWxcIj4nICsgaXRlbXNbaV0gKyAnPHNwYW4gY2xhc3M9XCJmYSBmYS1jbG9zZVwiPjwvc3BhbjwvbGk+Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0b3JlVG9Mb2NhbChrZXksIGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIGFsbEFkZHJlc3MgPSBKU09OLnN0cmluZ2lmeShpdGVtcyk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlW2tleV0gPSBhbGxBZGRyZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEZyb21Mb2NhbChrZXkpIHtcclxuXHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZVtrZXldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZVtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gaW5pdElmaGF2ZVNlc3Npb24oKSB7XHJcbiAgICB2YXIgY2FydFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjYXJ0XCIpO1xyXG4gICAgaWYgKGNhcnRWYWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdmFyIGNhcnRPYmogPSBKU09OLnBhcnNlKGNhcnRWYWx1ZSk7XHJcbiAgICAgICAgaWYgKGNhcnRPYmpbMF0ucm93WzBdICE9IFwi0JrQvtGA0LfQuNC90LAg0L/Rg9GB0YLQsFwiKSB7XHJcbiAgICAgICAgICAgIGNhcnRPYmouZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5yb3dbMV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUYWJsZS5yb3cuYWRkKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucm93WzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxpbnB1dCB0eXBlPSdudW1iZXInIGRhdGEtY2F0ZWdvcnk9J1wiICsgZW50cnkucm93WzVdICsgXCInIHZhbHVlPSdcIiArIGVudHJ5LnJvd1syXSArIFwiJyBkYXRhLXByaWNlPSdcIiArIGVudHJ5LnJvd1szXSArIFwiJyBtaW49JzEnIG1heD0nOTk5JyBjbGFzcz0nZm9ybS1jb250cm9sJyBhcmlhLWxhYmVsPSdUZXh0IGlucHV0IHdpdGggbXVsdGlwbGUgYnV0dG9ucyc+XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPHNwYW4gY2xhc3M9J2NlbmEnPlwiICsgZW50cnkucm93WzNdICsgXCIgPGkgY2xhc3M9J2ZhIGZhLXJ1Yic+PC9pPjwvc3Bhbj5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8YSBocmVmPScjMCcgaWQ9J1wiICsgZW50cnkucm93WzRdICsgXCInIGNsYXNzPSdkZWxldGUnPjxpIGNsYXNzPSdmYSBmYS10aW1lcyc+PC9pPjwvYT5cIlxyXG4gICAgICAgICAgICAgICAgICAgIF0pLmRyYXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWRzID0gdW5pcUlkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUYWJsZS5yb3cuYWRkKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucm93WzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxzZWxlY3QgaWQ9J1wiICsgaWRzICsgXCInIGNsYXNzPSdiYXNpYyc+PG9wdGlvbiB2YWx1ZT0nJz7QktGL0LHQtdGA0LjRgtC1INGB0L7Rg9GBPC9vcHRpb24+PG9wdGlvbj7QkNGA0YDQsNCx0LjQsNGC0LA8L29wdGlvbj48b3B0aW9uPtCh0LvQuNCy0L7Rh9C90YvQuTwvb3B0aW9uPjxvcHRpb24+0J/QtdGB0YLQvjwvb3B0aW9uPjxvcHRpb24+0JPRgNC40LHQvdC+0Lk8L29wdGlvbj48b3B0aW9uPtCR0LXRiNCw0LzQtdC70Yw8L29wdGlvbj5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8aW5wdXQgIHR5cGU9J251bWJlcicgZGF0YS1jYXRlZ29yeT0nXCIgKyBlbnRyeS5yb3dbNV0gKyBcIicgdmFsdWU9J1wiICsgZW50cnkucm93WzJdICsgXCInIGRhdGEtcHJpY2U9J1wiICsgZW50cnkucm93WzNdICsgXCInIG1pbj0nMScgbWF4PSc5OTknIGNsYXNzPSdmb3JtLWNvbnRyb2wnIGFyaWEtbGFiZWw9J1RleHQgaW5wdXQgd2l0aCBtdWx0aXBsZSBidXR0b25zJz5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0nY2VuYSc+XCIgKyBlbnRyeS5yb3dbM10gKyBcIiA8aSBjbGFzcz0nZmEgZmEtcnViJz48L2k+PC9zcGFuPlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxhIGhyZWY9JyMwJyBpZD0nXCIgKyBlbnRyeS5yb3dbNF0gKyBcIicgY2xhc3M9J2RlbGV0ZSc+PGkgY2xhc3M9J2ZhIGZhLXRpbWVzJz48L2k+PC9hPlwiXHJcbiAgICAgICAgICAgICAgICAgICAgXSkuZHJhdyhmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5iYXNpYycpLmZhbmN5U2VsZWN0KCkub24oJ2NoYW5nZS5mcycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXJ0XCIsIEpTT04uc3RyaW5naWZ5KGRhdGFGcm9tVGFibGUoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcuZmFuY2lmaWVkJykub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNhcnRcIiwgSlNPTi5zdHJpbmdpZnkoZGF0YUZyb21UYWJsZSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmFzaWMgY2hhbmdlIFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBpZHMgKyAnIDpjb250YWlucygnICsgZW50cnkucm93WzFdICsgJyknKS5wcm9wKFwic2VsZWN0ZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJCgnLmJhc2ljJykudHJpZ2dlcigndXBkYXRlLmZzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9jb25zb2xlLmxvZyhjYXJ0T2JqKTtcclxuICAgIC8vZGF0YVRhYmxlLmFkZC5yb3dcclxufVxyXG5cclxuXHJcbmlmICgkKCcudXNlcklzQXVjaCAuZnVsbF9wcmljZSwgLmJvcmRlckxlZnQgLmZ1bGxfcHJpY2UnKS5sZW5ndGgpIHtcclxuLy8gICAgdmFyIGZ1bGxfcHJpY2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNhcnRfcHJpY2VcIik7XHJcbi8vICAgICQoJy5mdWxsX3ByaWNlJykudGV4dChmdWxsX3ByaWNlKTtcclxuLy8gICAgaW5pdElmaGF2ZVNlc3Npb24oKTtcclxuLy8gICAgZGVsaXZlcnlfZnVuYygpO1xyXG4gICAgJCgnI2RlbGl2ZXJ5X3RpbWUnKS5kYXRldGltZXBpY2tlcih7XHJcbiAgICAgICAgc2lkZUJ5U2lkZTogdHJ1ZSxcclxuICAgICAgICBsb2NhbGU6ICdydScsXHJcbiAgICAgICAgdXNlQ3VycmVudDogZmFsc2UsXHJcbiAgICAgICAgd2lkZ2V0UG9zaXRpb25pbmc6IHt2ZXJ0aWNhbDogJ2JvdHRvbSd9XHJcblxyXG4gICAgfSk7XHJcblxyXG59XHJcbiQoJy51c2VySXNBdWNoIGgyLCAuYm9yZGVyTGVmdCAgaDIgJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLmNoZWNrT3V0JykuYWRkQ2xhc3MoJ2lzVXAnKTtcclxufSk7XHJcblxyXG52YXIgdGFibGVPcmRlciA9ICQoJyN0YWJsZU9yZGVyIHRib2R5Jyk7XHJcblxyXG5mdW5jdGlvbiBkYXRhRnJvbVRhYmxlKCkge1xyXG4gICAgdmFyIFRhYmxlRGF0YSA9IG5ldyBBcnJheSgpO1xyXG4gICAgJCgnI3RhYmxlT3JkZXIgdHInKS5lYWNoKGZ1bmN0aW9uIChyb3csIHRyKSB7XHJcbiAgICAgICAgVGFibGVEYXRhW3Jvd10gPSB7XHJcbiAgICAgICAgICAgIHJvdzogW1xyXG4gICAgICAgICAgICAgICAgJCh0cikuZmluZCgndGQ6ZXEoMCknKS5odG1sKCksXHJcbiAgICAgICAgICAgICAgICAkKHRyKS5maW5kKCd0ZDplcSgxKScpLmZpbmQoJy5mYW5jaWZpZWQgb3B0aW9uOnNlbGVjdGVkJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAkKHRyKS5maW5kKCd0ZDplcSgyKScpLmZpbmQoXCJpbnB1dFwiKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICQodHIpLmZpbmQoJ3RkOmVxKDMpJykudGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgJCh0cikuZmluZCgndGQ6ZXEoNCknKS5maW5kKCdhJykuYXR0cignaWQnKSxcclxuICAgICAgICAgICAgICAgICQodHIpLmZpbmQoJ3RkOmVxKDIpJykuZmluZCgnaW5wdXQnKS5hdHRyKCdkYXRhLWNhdGVnb3J5JylcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgVGFibGVEYXRhLnNoaWZ0KCk7XHJcbiAgICByZXR1cm4gVGFibGVEYXRhO1xyXG59XHJcblxyXG50YWJsZU9yZGVyLm9uKCdtb3VzZWVudGVyJywgJ3RyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ3NlbGVjdGVkJykpIHtcclxuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRhVGFibGUuJCgndHIuc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbiQoXCIuYWN0aW9uLS1saWtlLmhhc2xvZ2luXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgcGFnZSA9ICQodGhpcyk7XHJcbiAgICBjb25zb2xlLmxvZyhwYWdlKTtcclxuICAgICQuZ2V0SlNPTignL2xpa2VfYWRkJywge2xpa2U6ICQodGhpcykudmFsKCl9LFxyXG4gICAgICAgIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdCA9PSBcImFkZmF2b3JpdGVkXCIpIHtcclxuICAgICAgICAgICAgICAgIHBhZ2UuZmluZChcImlcIikuYWRkQ2xhc3MoJ2ZhLWhlYXJ0Jyk7XHJcbiAgICAgICAgICAgICAgICBwYWdlLmZpbmQoXCJpXCIpLnJlbW92ZUNsYXNzKCdmYS1oZWFydC1vJyk7XHJcbiAgICAgICAgICAgICAgICBzd2FsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi0KPRgNCwIVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcItCU0L7QsdCw0LLQu9C10L3QviDQsiDQuNC30LHRgNCw0L3QvdC+0LUhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS5yZXN1bHQgPT0gXCJkZWxldGVcIikge1xyXG4gICAgICAgICAgICAgICAgcGFnZS5maW5kKFwiaVwiKS5hZGRDbGFzcygnZmEtaGVhcnQtbycpO1xyXG4gICAgICAgICAgICAgICAgcGFnZS5maW5kKFwiaVwiKS5yZW1vdmVDbGFzcygnZmEtaGVhcnQnKTtcclxuICAgICAgICAgICAgICAgIHN3YWwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQo9C/0YEhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi0KPQtNCw0LvQtdC90L4g0LjQtyDQuNC30LHRgNCw0L3QvdC+0LPQviFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXI6IDE1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnJlc3VsdCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzd2FsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi0KPQv9GBIVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcItCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0LohXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxufSk7XHJcblxyXG4kKCcjYXVjaC1tZW51LWJ0bicpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgJC5nZXRKU09OKCcvYXVjaCcsIHtcclxuICAgICAgICAgICAgbG9naW46ICQoJyNpbnB1dFBob25lJykudmFsKCksXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiAkKCcjaW5wdXRQYXNzd29yZCcpLnZhbCgpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5yZXN1bHQgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgc3dhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcItCj0YDQsCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLQktGF0L7QtCDQstGL0L/QvtC70L3QtdC9INGD0YHQv9C10YjQvdC+IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN3YWwoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcItCj0L/RgSFcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcItCi0LDQutC+0LPQviDQv9C+0LvRjNC30L7QstCw0LXQu9GPINC90LUg0YHRg9GJ0LXRgdGC0LLRg9C10YIsINC70LjQsdC+INC/0LDRgNC+0LvRjCDQstCy0LXQtNC10L0g0L3QtdC/0YDQsNCy0LjQu9GM0L3QvlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuXHJcbn0pO1xyXG5cclxuXHJcbiQoXCIuc2VsZWN0X2l0XCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQuY29va2llKCdkZWxpdmVyeScsICQoJ2lucHV0OnJhZGlvW25hbWU9ZGVsaXZlcnldOmNoZWNrZWQnKS52YWwoKSk7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdkZWxpdmVyeScsICQoJ2lucHV0OnJhZGlvW25hbWU9ZGVsaXZlcnldOmNoZWNrZWQnKS52YWwoKSk7XHJcbiAgICAkLmNvb2tpZShcImxvY2FsTGlua0NsaWNrZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG59KTtcclxuXHJcbnRhYmxlT3JkZXIub24oJ21vdXNlbGVhdmUnLCAndHInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2VsZWN0ZWQnKSkge1xyXG4gICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGFUYWJsZS4kKCd0ci5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gZm5HZXRTZWxlY3RlZChvVGFibGVMb2NhbCkge1xyXG4gICAgcmV0dXJuIG9UYWJsZUxvY2FsLiQoJ3RyLnNlbGVjdGVkJyk7XHJcbn1cclxuJChcIi5saWtlX25vX2FkbWluXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIHN3YWwoe1xyXG4gICAgICAgIHRpdGxlOiBcItCt0YLQsCDRhNGD0L3QutGG0LjRjyDQtNC+0YHRgtGD0L/QvdCwINGC0L7Qu9GM0LrQviDQtNC70Y8g0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90YvRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuTxicj4gPGgzIGNsYXNzPSdzd2FsJz7Ql9Cw0YDQtdCz0LjRgdGC0YDQuNGA0YPQudGB0Y8g0Lgg0L/QvtC70YPRh9C4INGB0LrQuNC00LrRgyAxMCU8L2gzPlwiLFxyXG4gICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjNENBRjUwXCIsXHJcbiAgICAgICAgdGV4dDogXCJcIixcclxuICAgICAgICB0eXBlOiBcImluZm9cIixcclxuICAgICAgICBodG1sOiB0cnVlLFxyXG4gICAgICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi0KDQtdCz0LjRgdGC0YDQsNGG0LjRjy/QkNCy0YLQvtGA0LjQt9Cw0YbQuNGPXCIsXHJcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCLQn9C+0LfQttC1XCIsXHJcbiAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlXHJcbiAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJC5jb29raWUoJ2xvY2FsTGlua0NsaWNrZWQnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIi9zaXRlX2F1Y2hcIjtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbiQoXCIuYmFja2J0blwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmNvb2tpZSgnbG9jYWxMaW5rQ2xpY2tlZCcsIHRydWUpO1xyXG5cclxuICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxufSk7XHJcblxyXG4kKCcucHctcmVzZXQgYSwgI3Jlc3RvcmVQYXNzJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGxvZ2luID0gJCgnI2lucHV0UGhvbmUnKTtcclxuICAgIGlmIChsb2dpbi52YWwoKSAhPSBcIlwiKSB7XHJcbiAgICAgICAgJC5nZXRKU09OKCcvcHdyZXNldCcsIHtsb2dpbjogbG9naW4udmFsKCl9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5yZXN1bHQgPT0gXCJzZW50XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2FsKFwi0J/QsNGA0L7Qu9GMINCy0L7RgdGC0LDQvdC+0LLQu9C10L0hXCIsIFwi0J3QvtCy0YvQuSDQv9Cw0YDQvtC70Ywg0L7RgtC/0YDQsNCy0LvQtdC9INC90LAg0LLQsNGI0YMg0L/QvtGH0YLRgyFcIiwgXCJzdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS5yZXN1bHQgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YWwoXCLQo9C/0YEhXCIsIFwi0KLQsNC60L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC10YIhXCIsIFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhLnJlc3VsdCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhbCh7dGl0bGU6IFwi0KPQv9GBIVwiLCB0ZXh0OiBcItCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0LohXCIsIHRpbWVyOiAyMDAwLCBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3dhbChcItCj0L/RgSFcIiwgXCLQndC10L7QsdGF0L7QtNC40LzQviDQstCy0LXRgdGC0Lgg0YLQtdC70LXRhNC+0L0hXCIsIFwid2FybmluZ1wiKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVTdW1tKCkge1xyXG4gICAgc3VtbSA9IDA7XHJcbiAgICB2YXIgcGl6emEgPSAwO1xyXG4gICAgdmFyIGNoZWNrcyA9IDA7XHJcbiAgICAkKFwiLmNoZWNrT3V0IGlucHV0W3R5cGU9bnVtYmVyXVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKFwiY2F0ZWdvcnlcIikgPT0gXCLQn9C40YbRhtCwXCIpIHtcclxuICAgICAgICAgICAgcGl6emEgKz0gcGFyc2VJbnQoJCh0aGlzKS52YWwoKSAqICQodGhpcykuYXR0cihcImRhdGEtcHJpY2VcIikpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwaXp6YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3VtbSArPSBwYXJzZUludCgkKHRoaXMpLnZhbCgpICogJCh0aGlzKS5hdHRyKFwiZGF0YS1wcmljZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFrY2l5YSA0LTYtOFxyXG4gICAgJChcIi5jaGVja091dCBpbnB1dFt0eXBlPW51bWJlcl1cIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuZGF0YShcImNhdGVnb3J5XCIpID09IFwi0J/QuNGG0YbQsFwiKSB7XHJcbiAgICAgICAgICAgIGNoZWNrcyArPSBwYXJzZUludCgkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgICBpZiAoY2hlY2tzID09IDQpIHtcclxuICAgICAgICBwaXp6YSA9IHBpenphIC0gcGl6emEgKiA1IC8gMTAwO1xyXG4gICAgICAgICQoJyNiZXJpJykucmVtb3ZlKCk7XHJcbiAgICAgICAgJChcIi5hbGxhYm91dG9yZGVyXCIpLmFwcGVuZChcIjxwIGlkPSdiZXJpJyBzdHlsZT0nY29sb3I6I0ZGNTI1MjsnPtCQ0LrRhtC40Y8u0JHQtdGA0Lgg0YfQtdGC0LrQvjo8c3Ryb25nPi01JTwvc3Ryb25nPjwvcD5cIik7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY2hlY2tzID09IDYpIHtcclxuICAgICAgICBwaXp6YSA9IHBpenphIC0gcGl6emEgKiA3IC8gMTAwO1xyXG4gICAgICAgICQoJyNiZXJpJykucmVtb3ZlKCk7XHJcbiAgICAgICAgJChcIi5hbGxhYm91dG9yZGVyXCIpLmFwcGVuZChcIjxwIGlkPSdiZXJpJyBzdHlsZT0nY29sb3I6I0ZGNTI1MjsnPtCQ0LrRhtC40Y8u0JHQtdGA0Lgg0YfQtdGC0LrQvjo8c3Ryb25nPi03JTwvc3Ryb25nPjwvcD5cIik7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY2hlY2tzID09IDgpIHtcclxuICAgICAgICBwaXp6YSA9IHBpenphIC0gcGl6emEgKiAxMCAvIDEwMDtcclxuICAgICAgICAkKCcjYmVyaScpLnJlbW92ZSgpO1xyXG4gICAgICAgICQoXCIuYWxsYWJvdXRvcmRlclwiKS5hcHBlbmQoXCI8cCBpZD0nYmVyaScgc3R5bGU9J2NvbG9yOiNGRjUyNTI7Jz7QkNC60YbQuNGPLtCR0LXRgNC4INGH0LXRgtC60L46PHN0cm9uZz4tMTAlPC9zdHJvbmc+PC9wPlwiKTtcclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAkKCcjYmVyaScpLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgc3VtbSA9IHN1bW0gKyBwaXp6YTtcclxuICAgIHN1bW0gPSBzdW1tIC0gc3VtbSAqIGdsb2JhbF9zYWxlIC8gMTAwIC0gc3VtbSAqIGdsb2JhbF9pblRpbWUgLyAxMDA7XHJcblxyXG5cclxuICAgIC8vIGVuZCBBa2NpeWFcclxuICAgIGlmICgkKCcudXNlcklzQXVjaCAuZnVsbF9wcmljZScpLmxlbmd0aCkge1xyXG4gICAgICAgICQoJy5mdWxsX3ByaWNlJykudGV4dChzdW1tKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJCgnLmJvcmRlckxlZnQgLmZ1bGxfcHJpY2UnKS5sZW5ndGgpIHtcclxuICAgICAgICAkKCcuZnVsbF9wcmljZScpLnRleHQoc3VtbSk7XHJcbiAgICB9XHJcbiAgICAkLmNvb2tpZShcImNhcnRcIiwgSlNPTi5zdHJpbmdpZnkoZGF0YUZyb21UYWJsZSgpKSk7XHJcbiAgICAkLmNvb2tpZShcImNhcnRfcHJpY2VcIiwgc3VtbSk7XHJcbiAgICAkKFwiI2hpZGRlbl90YWJsZVwiKS52YWwoSlNPTi5zdHJpbmdpZnkoZGF0YUZyb21UYWJsZSgpKSk7XHJcbiAgICAkKFwiI2hpZGRlbl9mdWxsX2Nvc3RcIikudmFsKHN1bW0pO1xyXG4gICAgJChcIiNoaWRkZW5fYWxsYWJvdXRvcmRlclwiKS52YWwoJChcIi5hbGxhYm91dG9yZGVyXCIpLmh0bWwoKSk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNhcnRcIiwgSlNPTi5zdHJpbmdpZnkoZGF0YUZyb21UYWJsZSgpKSk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNhcnRfcHJpY2VcIiwgc3VtbSk7XHJcbiAgICByZXR1cm4gc3VtbTtcclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiB1bmlxdWUoYXJyKSB7XHJcbiAgICB2YXIgb2JqID0ge307XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgc3RyID0gYXJyW2ldO1xyXG4gICAgICAgIG9ialtzdHJdID0gdHJ1ZTsgLy8g0LfQsNC/0L7QvNC90LjRgtGMINGB0YLRgNC+0LrRgyDQsiDQstC40LTQtSDRgdCy0L7QudGB0YLQstCwINC+0LHRitC10LrRgtCwXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7IC8vINC40LvQuCDRgdC+0LHRgNCw0YLRjCDQutC70Y7Rh9C4INC/0LXRgNC10LHQvtGA0L7QvCDQtNC70Y8gSUU4LVxyXG59XHJcbiQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLmtleXByZXNzKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XHJcblxyXG4gICAgaWYgKGV2ZW50LmNoYXJDb2RlICYmIChldmVudC5jaGFyQ29kZSA8IDQ4IHx8IGV2ZW50LmNoYXJDb2RlID4gNTcpKSB7IC8vINC/0YDQvtCy0LXRgNC60LAg0L3QsCBldmVudC5jaGFyQ29kZSAtINGH0YLQvtCx0Ysg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC80L7QsyDQvdCw0LbQsNGC0YwgYmFja3NwYWNlLCBlbnRlciwg0YHRgtGA0LXQu9C+0YfQutGDINC90LDQt9Cw0LQuLi5cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcblxyXG5cclxufSk7XHJcblxyXG5cclxuLy/Qo9C00LDQu9C10L3QuNC1INC40Lcg0LzQsNGB0LjQstCwINC30L3QsNGH0LXQvdC40LVcclxuZnVuY3Rpb24gcmVtb3ZlQShhcnIpIHtcclxuICAgIHZhciB3aGF0LCBhID0gYXJndW1lbnRzLFxyXG4gICAgICAgIEwgPSBhLmxlbmd0aCxcclxuICAgICAgICBheDtcclxuICAgIHdoaWxlIChMID4gMSAmJiBhcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgd2hhdCA9IGFbLS1MXTtcclxuICAgICAgICAkKCcuc2xpZGVyJykuYW55c2xpZGVyKCk7XHJcblxyXG4gICAgICAgIHdoaWxlICgoYXggPSBhcnIuaW5kZXhPZih3aGF0KSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGFyci5zcGxpY2UoYXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcnI7XHJcbn1cclxuXHJcbiQoZG9jdW1lbnQpLmtleXVwKGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7IC8vIGVzY2FwZSBrZXkgbWFwcyB0byBrZXljb2RlIGAyN2BcclxuICAgICAgIGNsb3NlUG9wdXAoKTtcclxuICAgIH1cclxufSk7XHJcblxyXG4kKFwiLmNhbnRidXlcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgc3dhbCh7XHJcbiAgICAgICAgdGl0bGU6IFwi0J7QuSFcIixcclxuICAgICAgICB0ZXh0OiBcItCU0LDQvdC90YvQuSDRgtC+0LLQsNGAINC00L7RgdGC0YPQv9C9INGC0L7Qu9GM0LrQviDQsiDQutCw0YTQtVwiLFxyXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIixcclxuICAgICAgICBodG1sOiB0cnVlLFxyXG4gICAgICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcItCvINC/0L7QvdGP0LtcIlxyXG4gICAgfSlcclxufSk7XHJcblxyXG4kKFwiLm9uZS0tYnV5XCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBkYXRhX2l0ZW1zID0galF1ZXJ5LnBhcnNlSlNPTigkKHRoaXMpLmF0dHIoXCJkYXRhLWl0ZW1zXCIpKTtcclxuICAgIGNvbnNvbGUubG9nKGRhdGFfaXRlbXMpO1xyXG4gICAgaWYgKGRhdGFfaXRlbXNbJ3NvdXMnXSA9PSB0cnVlKSB7IC8vIHRvZG86IHNldCBuYW1lXHJcbiAgICAgICAgY2FjaGVfZm9yX2RhdGF0YWJsZSA9IGRhdGFfaXRlbXM7XHJcblxyXG4gICAgICAgICQoXCIjc2VsZWN0X3NvdXNcIikubmlmdHkoXCJzaG93XCIpXHJcblxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGF0YVRhYmxlLnJvdy5hZGQoW1xyXG4gICAgICAgICAgICBcIjxoMz5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fbmFtZSddICsgXCI8L2gzPjxzbWFsbD5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fY29tcG9uZW50J10gKyBcIjwvc21hbGw+XCIsXHJcbiAgICAgICAgICAgIFwiIFwiLFxyXG4gICAgICAgICAgICBcIjxpbnB1dCBkYXRhLWNhdGVnb3J5PSdcIiArIGRhdGFfaXRlbXNbJ2l0ZW1fY2F0ZWdvcnknXSArIFwiJyB0eXBlPSdudW1iZXInIHZhbHVlPScxJyBkYXRhLXByaWNlPSdcIiArIGRhdGFfaXRlbXNbJ2l0ZW1fcHJpY2UnXSArIFwiJyBtaW49JzEnIG1heD0nOTk5JyBjbGFzcz0nZm9ybS1jb250cm9sJyBhcmlhLWxhYmVsPSdUZXh0IGlucHV0IHdpdGggbXVsdGlwbGUgYnV0dG9ucyc+XCIsXHJcbiAgICAgICAgICAgIFwiPHNwYW4gY2xhc3M9J2NlbmEnPlwiICsgZGF0YV9pdGVtc1snaXRlbV9wcmljZSddICsgXCIgPGkgY2xhc3M9J2ZhIGZhLXJ1Yic+PC9pPjwvc3Bhbj5cIixcclxuICAgICAgICAgICAgXCI8YSBocmVmPScjMCcgaWQ9J1wiICsgZGF0YV9pdGVtc1snaXRlbV9pZCddICsgXCInIGNsYXNzPSdkZWxldGUnPjxpIGNsYXNzPSdmYSBmYS10aW1lcyc+PC9pPjwvYT5cIlxyXG4gICAgICAgIF0pLmRyYXcoZmFsc2UpO1xyXG4gICAgICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcbiAgICAgICAgaW9zT3ZlcmxheSh7XHJcbiAgICAgICAgICAgIHRleHQ6IFwi0JTQvtCx0LDQstC70LXQvdC+IVwiLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMmUzLFxyXG4gICAgICAgICAgICBpY29uOiBcInN0YXRpYy9pbWcvY2hlY2sucG5nXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhcnRJdGVtcy5pbm5lckhUTUwgPSBOdW1iZXIoY2FydEl0ZW1zLmlubmVySFRNTCkgKyAxO1xyXG5cclxufSk7XHJcblxyXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0YWJsZU9yZGVyID0gJCgnI3RhYmxlT3JkZXInKTtcclxuICAgIHRhYmxlT3JkZXIub24oJ2NsaWNrJywgJy5kZWxldGUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGRhdGFUYWJsZS5yb3coJy5zZWxlY3RlZCcpLnJlbW92ZSgpLmRyYXcoZmFsc2UpO1xyXG4gICAgICAgIGlmICgkKCcuaW5kZXhfcGFnZScpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXJ0SXRlbXMuaW5uZXJIVE1MID0gTnVtYmVyKGNhcnRJdGVtcy5pbm5lckhUTUwpIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnLmZ1bGwgc3BhbicpLnRleHQoY2FsY3VsYXRlU3VtbSgpKTtcclxuXHJcbiAgICB9KTtcclxufSk7IC8vcmVhZHlcclxuXHJcbiQoJyNvcmRlck5vdycpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgaWYgKChjYWxjdWxhdGVTdW1tKCkgPCA1MDApICYmICgkLmNvb2tpZShcImRlbGl2ZXJ5XCIpICE9IFwiZGVsaXZlcnlpbmNhZmVcIikpIHtcclxuICAgICAgICBzd2FsKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwi0J7QuSFcIixcclxuICAgICAgICAgICAgdGV4dDogXCLQlNC70Y8g0LTQvtGB0YLQsNCy0LrQuCDQvNC40L3QuNC80LDQu9GM0L3QsNGPINGB0YPQvNC80LAg0LfQsNC60LDQt9CwINGB0L7RgdGC0LDQstC70Y/QtdGCIDUwMCDRgNGD0LHQu9C10LlcIixcclxuICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICBodG1sOiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi0K8g0L/QvtC90Y/Qu1wiXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgICQuY29va2llKFwibG9jYWxMaW5rQ2xpY2tlZFwiLCB0cnVlKTtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL29yZGVyXCI7XHJcblxyXG4gICAgfVxyXG59KTtcclxuLypcclxuICQoJy5zbGlkZXJfX2l0ZW0nKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICQoJ2h0bWwnKS50b2dnbGVDbGFzcygnb3ZlcmZsb3dib2R5Jyk7XHJcbiAkKFwiI29uZV9pbWdcIikucmVtb3ZlQXR0cihcInNyY1wiKTtcclxuICQoXCIucHJlbG9hZGVyXCIpLnNob3coKTtcclxuICQoJy5wb3BVcCcpLmFkZENsYXNzKCdpc1VwJyk7XHJcblxyXG4gJC5hamF4KHtcclxuIHR5cGU6ICdQT1NUJyxcclxuIC8vIFByb3ZpZGUgY29ycmVjdCBDb250ZW50LVR5cGUsIHNvIHRoYXQgRmxhc2sgd2lsbCBrbm93IGhvdyB0byBwcm9jZXNzIGl0LlxyXG4gY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuIC8vIEVuY29kZSB5b3VyIGRhdGEgYXMgSlNPTi5cclxuIC8vIFRoaXMgaXMgdGhlIHR5cGUgb2YgZGF0YSB5b3UncmUgZXhwZWN0aW5nIGJhY2sgZnJvbSB0aGUgc2VydmVyLlxyXG4gZGF0YVR5cGU6ICdqc29uJyxcclxuIHVybDogJy9nZXRfb25lX2l0ZW0vJyArICQodGhpcykuYXR0cihcImRhdGEtaWQtaXRlbVwiKSxcclxuIHN1Y2Nlc3M6IGZ1bmN0aW9uIChlKSB7XHJcbiAkKFwiI29uZV9pbWdcIikuYXR0cih7XHJcbiBcInNyY1wiOiAnc3RhdGljL3VwbG9hZC8nICsgZS5yZXN1bHQuaW1nc1xyXG4gfSk7XHJcbiB2YXIgaXRlbV9yZXN1bHQgPSB7XHJcbiBpdGVtX2lkOiBlLnJlc3VsdC5pdGVtX2lkLFxyXG4gaXRlbV9uYW1lOiBlLnJlc3VsdC5uYW1lLFxyXG4gaXRlbV9wcmljZTogZS5yZXN1bHQucHJpY2UsXHJcbiBpdGVtX2NvbXBvbmVudDogZS5yZXN1bHQuY29tcG9uZW50cyxcclxuIGl0ZW1fd2VpZ2h0OiBlLnJlc3VsdC53ZWlnaHQsXHJcbiBpdGVtX2NhdGVnb3J5OiBlLnJlc3VsdC5jYXRlZ29yeSxcclxuIHNvdXM6IGUucmVzdWx0LnNvdXNcclxuIH07XHJcblxyXG5cclxuICQoXCIuYWJvdXRQcm9kdWN0IC5hY3Rpb24tLWJ1eVwiKS5hdHRyKHtcclxuIFwidmFsdWVcIjogZS5yZXN1bHQuaWQsXHJcbiBcImRhdGEtaXRlbXNcIjogSlNPTi5zdHJpbmdpZnkoaXRlbV9yZXN1bHQpXHJcbiB9KTtcclxuXHJcbiBhcnJheXNfb25lID0gKGUucmVzdWx0LmNvbXBvbmVudHMpLnNwbGl0KFwiLFwiKTtcclxuIGlmIChhcnJheXNfb25lWzBdID09IFwiXCIpIHtcclxuICQoXCIuYWJvdXRQcm9kdWN0IGgzXCIpLmhpZGUoKTtcclxuIH1cclxuIGVsc2Uge1xyXG4gJChcIi5hYm91dFByb2R1Y3QgaDNcIikuc2hvdygpO1xyXG4gfVxyXG4gJChcIiNvbmVfYXJyYXlcIikuZW1wdHkoKTtcclxuICQuZWFjaChhcnJheXNfb25lLCBmdW5jdGlvbiAoaSkge1xyXG4gdmFyIGxpID0gJCgnPGxpLz4nKVxyXG4gLnRleHQoYXJyYXlzX29uZVtpXSlcclxuIC5hcHBlbmRUbygkKFwiI29uZV9hcnJheVwiKSk7XHJcbiB9KTtcclxuICQoXCIjb25lX3ByaWNlXCIpLmh0bWwoZS5yZXN1bHQucHJpY2UgKyAnPGkgY2xhc3M9XCJmYSBmYS1ydWJcIj48L2k+Jyk7XHJcbiAkKFwiI29uZV93ZWlnaHRcIikudGV4dChlLnJlc3VsdC53ZWlnaHQpO1xyXG4gJChcIiNvbmVfbmFtZVwiKS50ZXh0KGUucmVzdWx0Lm5hbWUpO1xyXG4gaWYgKCQuY29va2llKFwiZGVsaXZlcnlcIikgPT0gXCJkZWxpdmVyeWluY2FmZVwiIHx8IGUucmVzdWx0LmNhZmVfb25seSAhPSB0cnVlKSB7XHJcbiAkKFwiLmFib3V0UHJvZHVjdCAuYWN0aW9uLS1idXlcIikuc2hvdygpO1xyXG4gJChcIi5hYm91dFByb2R1Y3QgLmNhbnRidXlcIikuaGlkZSgpO1xyXG4gfSBlbHNlIHtcclxuICQoXCIuYWJvdXRQcm9kdWN0IC5hY3Rpb24tLWJ1eVwiKS5oaWRlKCk7XHJcbiAkKFwiLmFib3V0UHJvZHVjdCAuY2FudGJ1eVwiKS5zaG93KCk7XHJcblxyXG4gfVxyXG4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAkKFwiLnByZWxvYWRlclwiKS5oaWRlKClcclxuIH0sIDUwMCk7XHJcblxyXG4gLy9mb3IgKHZhciBpdGVtX3Jlc3AgaW4gZS5yZXNwb25zZSkge1xyXG4gLy9cclxuIC8vfVxyXG5cclxuIH1cclxuIH0pO1xyXG5cclxuXHJcbiB9KTtcclxuICovXHJcbnZhciBtYWduaWZpY1BvcHVwID0gbnVsbDtcclxuXHJcbiQoJy5zaW1wbGUtYWpheC1wb3B1cCcpLm1hZ25pZmljUG9wdXAoe1xyXG4gICAgdHlwZTogJ2FqYXgnLFxyXG4gICAgcHJlbG9hZGVyOiB0cnVlLFxyXG4gICAgZW5hYmxlRXNjYXBlS2V5OiB0cnVlLFxyXG4gICAgc2hvd0Nsb3NlQnRuOiB0cnVlLFxyXG4gICAgY2xvc2VCdG5JbnNpZGU6IGZhbHNlLFxyXG4gICAgbWlkQ2xpY2s6dHJ1ZSxcclxuICAgIGNhbGxiYWNrczoge1xyXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgSGlzdG9yeS5BZGFwdGVyLmJpbmQod2luZG93LCAnc3RhdGVjaGFuZ2UnLCBjbG9zZVBvcHVwKTtcclxuICAgICAgICAgICAgSGlzdG9yeS5wdXNoU3RhdGUoe3VybDogZG9jdW1lbnQubG9jYXRpb24uaHJlZn0sIGRvY3VtZW50LnRpdGxlLCBcIj9sYXJnZVwiKTtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBjbG9zZVBvcHVwKTtcclxuICAgICAgICAgICAgbWFnbmlmaWNQb3B1cCA9IHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKHdpbmRvdykudW5iaW5kKCdzdGF0ZWNoYW5nZScsIGNsb3NlUG9wdXApXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemUnLCBjbG9zZVBvcHVwKTtcclxuICAgICAgICAgICAgdmFyIFN0YXRlID0gSGlzdG9yeS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICBIaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBkb2N1bWVudC50aXRsZSwgU3RhdGUuZGF0YVtcInVybFwiXSk7XHJcbiAgICAgICAgICAgIG1hZ25pZmljUG9wdXAgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pO1xyXG5mdW5jdGlvbiBjbG9zZVBvcHVwICgpIHtcclxuICAgIGlmIChtYWduaWZpY1BvcHVwICE9IG51bGwpXHJcbiAgICAgICAgbWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xyXG59XHJcblxyXG5cclxuXHJcbiQoJy5jYXJ0LCAuc2hvd0NhcnQsIC51c2VySXNBdWNoIGgyLC5ib3JkZXJMZWZ0IGgyJykuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgaWYgKGNhbGN1bGF0ZVN1bW0oKSA9PSAwKSB7XHJcbiAgICAgICAgaW9zT3ZlcmxheSh7XHJcbiAgICAgICAgICAgIHRleHQ6IFwi0JrQvtGA0LfQuNC90LAg0L/Rg9GB0YLQsFwiLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMmUzLFxyXG4gICAgICAgICAgICBpY29uOiBcIi9zdGF0aWMvaW1nL2Nyb3NzLnBuZ1wiXHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xyXG4gICAgICAgICQoJ2h0bWwnKS50b2dnbGVDbGFzcygnb3ZlcmZsb3dib2R5Jyk7XHJcblxyXG4gICAgICAgICQoJy5jaGVja091dCcpLmFkZENsYXNzKCdpc1VwJyk7XHJcbiAgICB9XHJcbiAgICA7XHJcbn0pO1xyXG5cclxuJCgnLmNsb3NlemFrYXpidG4nKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICQoJy5jaGVja091dCcpLnJlbW92ZUNsYXNzKCdpc1VwJyk7XHJcbiAgICAkKCdodG1sJykudG9nZ2xlQ2xhc3MoJ292ZXJmbG93Ym9keScpO1xyXG5cclxuXHJcbn0pO1xyXG4vKipcclxuIFByb2R1Y3QgUGFnZVxyXG4gKiovXHJcbi8vRnVuY3Rpb24gZm9yIGZpeGluIHNpZGViYXJcclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJCgnLmluZGV4X3BhZ2UnKS5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgdmFyIHNpZGViYXIgPSAkKCcjYmFyJyk7XHJcbiAgICAgICAgdmFyIGJvZHl3aXRoc2lkZWJhciA9ICQoXCIudmlld1wiKTtcclxuICAgICAgICB2YXIgY2FydCA9ICQoXCIuY2FydFwiKTtcclxuICAgICAgICB2YXIgdG9wID0gc2lkZWJhci5vZmZzZXQoKS50b3AgLSBwYXJzZUZsb2F0KHNpZGViYXIuY3NzKCdtYXJnaW4tdG9wJykpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgeSA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICAgIGlmICh5ID49IHRvcCkge1xyXG4gICAgICAgICAgICAgICAgc2lkZWJhci5hZGRDbGFzcygnZml4ZWQnKTtcclxuICAgICAgICAgICAgICAgIGJvZHl3aXRoc2lkZWJhci5hZGRDbGFzcygnY29sLW1kLW9mZnNldC0yJyk7XHJcbiAgICAgICAgICAgICAgICBib2R5d2l0aHNpZGViYXIuYWRkQ2xhc3MoJ2NvbC1zbS1vZmZzZXQtMicpO1xyXG4gICAgICAgICAgICAgICAgY2FydC5hZGRDbGFzcyhcImNhcnRBYnNvbHV0ZSBjYXJ0UGVyY1wiKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2lkZWJhci5yZW1vdmVDbGFzcygnZml4ZWQnKTtcclxuICAgICAgICAgICAgICAgIGJvZHl3aXRoc2lkZWJhci5yZW1vdmVDbGFzcygnY29sLW1kLW9mZnNldC0yJyk7XHJcbiAgICAgICAgICAgICAgICBib2R5d2l0aHNpZGViYXIucmVtb3ZlQ2xhc3MoJ2NvbC1zbS1vZmZzZXQtMicpO1xyXG4gICAgICAgICAgICAgICAgY2FydC5yZW1vdmVDbGFzcygnY2FydEFic29sdXRlIGNhcnRQZXJjJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG5cclxud2luZG93LmxvY2FsTGlua0NsaWNrZWQgPSBmYWxzZTtcclxuXHJcblxyXG5mdW5jdGlvbiB3YXJuaW5nKCkge1xyXG4gICAgaWYgKCQuY29va2llKCdsb2NhbExpbmtDbGlja2VkJykpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIndpbmRvdyBwYWdlXCIpOyAvL3lvdSBjYW4gcHV0IHlvdXIgY29kZSBoZXJlLlxyXG4gICAgICAgICQucmVtb3ZlQ29va2llKFwibG9jYWxMaW5rQ2xpY2tlZFwiKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwid2luZG93IHJlbG9hZFwiKTsgLy95b3UgY2FuIHB1dCB5b3VyIGNvZGUgaGVyZS5cclxuXHJcbiAgICAgICAgJC5yZW1vdmVDb29raWUoXCJsb2NhbExpbmtDbGlja2VkXCIpO1xyXG5cclxuICAgICAgICAkKFwiI3NlbGVjdF9kZWxpdmVyeVwiKS5uaWZ0eShcInNob3dcIik7XHJcbiAgICB9XHJcbn1cclxud2luZG93Lm9ubG9hZCA9IHdhcm5pbmc7XHJcblxyXG4kKFwiYVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoXCJocmVmXCIpO1xyXG5cclxuICAgIC8vIGNoZWNrIGlmIHRoZSBsaW5rIGlzIHJlbGF0aXZlIG9yIHRvIHlvdXIgZG9tYWluXHJcbiAgICBpZiAoIS9eaHR0cD86XFwvXFwvLi8udGVzdCh1cmwpIHx8IC9odHRwPzpcXC9cXC8xMjcuMC4wLjFcXDo1MDAwLy50ZXN0KHVybCkpIHtcclxuICAgICAgICAkLmNvb2tpZShcImxvY2FsTGlua0NsaWNrZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgfVxyXG59KTtcclxuXHJcbiQoXCIubG9nb2FcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAkLnJlbW92ZUNvb2tpZShcImxvY2FsTGlua0NsaWNrZWRcIik7XHJcblxyXG59KTtcclxuKGZ1bmN0aW9uICh3aW5kb3cpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIHN1cHBvcnQgPSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IE1vZGVybml6ci5jc3NhbmltYXRpb25zXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhbmltRW5kRXZlbnROYW1lcyA9IHtcclxuICAgICAgICAgICAgJ1dlYmtpdEFuaW1hdGlvbic6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICAnT0FuaW1hdGlvbic6ICdvQW5pbWF0aW9uRW5kJyxcclxuICAgICAgICAgICAgJ21zQW5pbWF0aW9uJzogJ01TQW5pbWF0aW9uRW5kJyxcclxuICAgICAgICAgICAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb25lbmQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhbmltRW5kRXZlbnROYW1lID0gYW5pbUVuZEV2ZW50TmFtZXNbTW9kZXJuaXpyLnByZWZpeGVkKCdhbmltYXRpb24nKV0sXHJcbiAgICAgICAgb25FbmRBbmltYXRpb24gPSBmdW5jdGlvbiAoZWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBvbkVuZENhbGxiYWNrRm4gPSBmdW5jdGlvbiAoZXYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0LmFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXYudGFyZ2V0ICE9IHRoaXMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoYW5pbUVuZEV2ZW50TmFtZSwgb25FbmRDYWxsYmFja0ZuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChzdXBwb3J0LmFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoYW5pbUVuZEV2ZW50TmFtZSwgb25FbmRDYWxsYmFja0ZuKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9uRW5kQ2FsbGJhY2tGbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAvLyBmcm9tIGh0dHA6Ly93d3cuc2JlcnJ5Lm1lL2FydGljbGVzL2phdmFzY3JpcHQtZXZlbnQtdGhyb3R0bGluZy1kZWJvdW5jaW5nXHJcbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmbiwgZGVsYXkpIHtcclxuICAgICAgICB2YXIgYWxsb3dTYW1wbGUgPSB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGFsbG93U2FtcGxlKSB7XHJcbiAgICAgICAgICAgICAgICBhbGxvd1NhbXBsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dTYW1wbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgZm4oZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNsaWRlcnMgLSBmbGlja2l0eVxyXG4gICAgaWYgKCQoJy5pbmRleF9wYWdlJykubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHNsaWRlcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXInKSksXHJcbiAgICAgICAgLy8gYXJyYXkgd2hlcmUgdGhlIGZsaWNraXR5IGluc3RhbmNlcyBhcmUgZ29pbmcgdG8gYmUgc3RvcmVkXHJcbiAgICAgICAgICAgIGZsa3RpZXMgPSBbXSxcclxuICAgICAgICAvLyBncmlkIGVsZW1lbnRcclxuICAgICAgICAgICAgZ3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncmlkJyksXHJcbiAgICAgICAgLy8gaXNvdG9wZSBpbnN0YW5jZVxyXG4gICAgICAgICAgICBpc28sXHJcbiAgICAgICAgICAgIGJMYXp5LFxyXG4gICAgICAgIC8vIGZpbHRlciBjdHJsc1xyXG4gICAgICAgICAgICBmaWx0ZXJDdHJscyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpbHRlciA+IGJ1dHRvbicpKSxcclxuICAgICAgICAvLyBjYXJ0XHJcbiAgICAgICAgICAgIGNhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FydCcpLFxyXG4gICAgICAgICAgICBjYXJ0SXRlbXMgPSBjYXJ0LnF1ZXJ5U2VsZWN0b3IoJy5jYXJ0X19jb3VudCcpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gb25BcnJhbmdlKCkge1xyXG4gICAgICAgIGJMYXp5LnJldmFsaWRhdGUoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICBpZiAoJC5jb29raWUoXCJkZWxpdmVyeVwiKSA9PSBcImRlbGl2ZXJ5aW5jYWZlXCIpIHtcclxuICAgICAgICAgICAgaW5fZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIHByZWxvYWQgaW1hZ2VzXHJcbiAgICAgICAgalF1ZXJ5KCcjc2Nyb2xsdXAgaW1nJykubW91c2VvdmVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLmFuaW1hdGUoe29wYWNpdHk6IDAuNjV9LCAxMDApO1xyXG4gICAgICAgIH0pLm1vdXNlb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLmFuaW1hdGUoe29wYWNpdHk6IDF9LCAxMDApO1xyXG4gICAgICAgIH0pLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCgnaHRtbCxib2R5JykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiAwfSwgJ3Nsb3cnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBqUXVlcnkod2luZG93KS5zY3JvbGwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoalF1ZXJ5KGRvY3VtZW50KS5zY3JvbGxUb3AoKSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGpRdWVyeSgnI3Njcm9sbHVwJykuZmFkZUluKCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoJyNzY3JvbGx1cCcpLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICgkKCcuaW5kZXhfcGFnZScpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbml0SXNvdG9wZSgpO1xyXG4gICAgICAgICAgICBpbml0RXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHdpbiA9ICQod2luZG93KTtcclxuXHJcblxyXG4gICAgICAgICAgICBiTGF6eSA9IG5ldyBCbGF6eSh7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDIwMCxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc28ubGF5b3V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICBpc28ub24oJ2FycmFuZ2VDb21wbGV0ZScsIG9uQXJyYW5nZSk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gaW5pdEZsaWNraXR5KCk7XHJcblxyXG4gICAgICAgICAgICBkZWxpdmVyeV9mdW5jKCk7XHJcbiAgICAgICAgICAgIGNsYXNzaWUucmVtb3ZlKGdyaWQsICdncmlkLS1sb2FkaW5nJyk7XHJcblxyXG4gICAgICAgICAgICAkKFwiI293bC1kZW1vXCIpLm93bENhcm91c2VsKHtcclxuICAgICAgICAgICAgICAgIGF1dG9QbGF5OiA3MzAwLFxyXG4gICAgICAgICAgICAgICAgc3RvcE9uSG92ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uU3BlZWQ6IDEwMDAsXHJcbiAgICAgICAgICAgICAgICBnb1RvRmlyc3RTcGVlZDogMjAwMCxcclxuICAgICAgICAgICAgICAgIHNpbmdsZUl0ZW06IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhdXRvSGVpZ2h0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblN0eWxlOiBcImZhZGVcIixcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb25UZXh0OiBbJ9Cf0YDQtdC00YvQtNGD0YnQsNGPJywgJ9Ch0LvQtdC00YPRjtGJ0LDRjyddXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgb3dsID0gJChcIiNvd2wtZGVtb1wiKS5kYXRhKCdvd2xDYXJvdXNlbCcpO1xyXG4gICAgICAgICAgICAkKCcub3dsLXBhZ2luYXRpb24nKS5wcmVwZW5kKFwiPGRpdiBjbGFzcz0ncHJldi1zbGlkZSBmYSBmYS1hcnJvdy1sZWZ0Jz48c3Bhbj48L3NwYW4+PC9kaXY+XCIpO1xyXG4gICAgICAgICAgICAkKCcub3dsLXBhZ2luYXRpb24nKS5hcHBlbmQoXCI8ZGl2IGNsYXNzPSduZXh0LXNsaWRlIGZhIGZhLWFycm93LXJpZ2h0Jz48c3Bhbj48L3NwYW4+PC9kaXY+XCIpO1xyXG4gICAgICAgICAgICAkKFwiLnByZXYtc2xpZGVcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgb3dsLnByZXYoKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJChcIi5uZXh0LXNsaWRlXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG93bC5uZXh0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkKFwiLnByZWxvYWRlclwiKS5oaWRlKCk7XHJcblxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdElmaGF2ZVNlc3Npb24oKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0RmxpY2tpdHkoKSB7XHJcbiAgICAgICAgc2xpZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZXIpIHtcclxuICAgICAgICAgICAgdmFyIGZsa3R5ID0gbmV3IEZsaWNraXR5KHNsaWRlciwge1xyXG4gICAgICAgICAgICAgICAgcHJldk5leHRCdXR0b25zOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHdyYXBBcm91bmQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjZWxsQWxpZ246ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgIGNvbnRhaW46IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXNpemU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcGFnZURvdHM6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gc3RvcmUgZmxpY2tpdHkgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgIGZsa3RpZXMucHVzaChmbGt0eSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdElzb3RvcGUoKSB7XHJcbiAgICAgICAgaXNvID0gbmV3IElzb3RvcGUoZ3JpZCwge1xyXG4gICAgICAgICAgICBpc1Jlc2l6ZUJvdW5kOiBmYWxzZSxcclxuICAgICAgICAgICAgaXRlbVNlbGVjdG9yOiAnLmdyaWRfX2l0ZW0nLFxyXG4gICAgICAgICAgICBwZXJjZW50UG9zaXRpb246IHRydWUsXHJcbiAgICAgICAgICAgIG1hc29ucnk6IHtcclxuICAgICAgICAgICAgICAgIC8vIHVzZSBvdXRlciB3aWR0aCBvZiBncmlkLXNpemVyIGZvciBjb2x1bW5XaWR0aFxyXG4gICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6ICcuZ3JpZF9fc2l6ZXInXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogJzAuNXMnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0RXZlbnRzKCkge1xyXG4gICAgICAgIGZpbHRlckN0cmxzLmZvckVhY2goZnVuY3Rpb24gKGZpbHRlckN0cmwpIHtcclxuICAgICAgICAgICAgZmlsdGVyQ3RybC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzaWUucmVtb3ZlKGZpbHRlckN0cmwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyX19pdGVtLS1zZWxlY3RlZCcpLCAnZmlsdGVyX19pdGVtLS1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NpZS5hZGQoZmlsdGVyQ3RybCwgJ2ZpbHRlcl9faXRlbS0tc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgIGlzby5hcnJhbmdlKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGZpbHRlckN0cmwuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbHRlcicpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlY2FsY0ZsaWNraXRpZXMoKTtcclxuICAgICAgICAgICAgICAgIGlzby5sYXlvdXQoKTtcclxuICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoXCIjYWxsQ2F0YWxvZ1wiKS5vZmZzZXQoKS50b3BcclxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgYkxhenkucmV2YWxpZGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gd2luZG93IHJlc2l6ZSAvIHJlY2FsY3VsYXRlIHNpemVzIGZvciBib3RoIGZsaWNraXR5IGFuZCBpc290b3BlL21hc29ucnkgbGF5b3V0c1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZShmdW5jdGlvbiAoZXYpIHtcclxuICAgICAgICAgICAgcmVjYWxjRmxpY2tpdGllcygpO1xyXG4gICAgICAgICAgICBpc28ubGF5b3V0KCk7XHJcbiAgICAgICAgfSwgNTApKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHRvIGNhcnRcclxuICAgICAgICBbXS5zbGljZS5jYWxsKGdyaWQucXVlcnlTZWxlY3RvckFsbCgnLmdyaWRfX2l0ZW0nKSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtcy1idXknKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFkZFRvQ2FydCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9kYXRhVGFibGUuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFRvQ2FydCgpIHtcclxuICAgICAgICB2YXIgZGF0YV9pdGVtcyA9IGpRdWVyeS5wYXJzZUpTT04oJCh0aGlzKS5hdHRyKFwiZGF0YS1pdGVtc1wiKSk7XHJcbiAgICAgICAgaWYgKGRhdGFfaXRlbXNbJ3NvdXMnXSA9PSBcIlRydWVcIikge1xyXG4gICAgICAgICAgICBjYWNoZV9mb3JfZGF0YXRhYmxlID0gZGF0YV9pdGVtcztcclxuXHJcbiAgICAgICAgICAgICQoXCIjc2VsZWN0X3NvdXNcIikubmlmdHkoXCJzaG93XCIpXHJcblxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhVGFibGUucm93LmFkZChbXHJcbiAgICAgICAgICAgICAgICBcIjxoMz5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fbmFtZSddICsgXCI8L2gzPjxzbWFsbD5cIiArIGRhdGFfaXRlbXNbJ2l0ZW1fY29tcG9uZW50J10gKyBcIjwvc21hbGw+XCIsXHJcbiAgICAgICAgICAgICAgICBcIiBcIixcclxuICAgICAgICAgICAgICAgIFwiPGlucHV0IHR5cGU9J251bWJlcicgZGF0YS1jYXRlZ29yeT0nXCIgKyBkYXRhX2l0ZW1zWydpdGVtX2NhdGVnb3J5J10gKyBcIicgdmFsdWU9JzEnIGRhdGEtcHJpY2U9J1wiICsgZGF0YV9pdGVtc1snaXRlbV9wcmljZSddICsgXCInIG1pbj0nMScgbWF4PSc5OTknIGNsYXNzPSdmb3JtLWNvbnRyb2wnIGFyaWEtbGFiZWw9J1RleHQgaW5wdXQgd2l0aCBtdWx0aXBsZSBidXR0b25zJz5cIixcclxuICAgICAgICAgICAgICAgIFwiPHNwYW4gY2xhc3M9J2NlbmEnPlwiICsgZGF0YV9pdGVtc1snaXRlbV9wcmljZSddICsgXCIgPGkgY2xhc3M9J2ZhIGZhLXJ1Yic+PC9pPjwvc3Bhbj5cIixcclxuICAgICAgICAgICAgICAgIFwiPGEgaHJlZj0nIzAnIGlkPSdcIiArIGRhdGFfaXRlbXNbJ2l0ZW1faWQnXSArIFwiJyBjbGFzcz0nZGVsZXRlJz48aSBjbGFzcz0nZmEgZmEtdGltZXMnPjwvaT48L2E+XCJcclxuICAgICAgICAgICAgXSkuZHJhdyhmYWxzZSk7XHJcbiAgICAgICAgICAgICQoXCIuY2hlY2tPdXQgaW5wdXRbdHlwZT1udW1iZXJdXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuZnVsbCBzcGFuJykudGV4dChjYWxjdWxhdGVTdW1tKCkpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJy5mdWxsIHNwYW4nKS50ZXh0KGNhbGN1bGF0ZVN1bW0oKSk7XHJcbiAgICAgICAgICAgIGlvc092ZXJsYXkoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCLQlNC+0LHQsNCy0LvQtdC90L4hXCIsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMmUzLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJzdGF0aWMvaW1nL2NoZWNrLnBuZ1wiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjbGFzc2llLmFkZChjYXJ0LCAnY2FydC0tYW5pbWF0ZScpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNhcnRJdGVtcy5pbm5lckhUTUwgPSBOdW1iZXIoY2FydEl0ZW1zLmlubmVySFRNTCkgKyAxO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICBvbkVuZEFuaW1hdGlvbihjYXJ0SXRlbXMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzaWUucmVtb3ZlKGNhcnQsICdjYXJ0LS1hbmltYXRlJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWNhbGNGbGlja2l0aWVzKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmbGt0aWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgIGZsa3RpZXNbaV0ucmVzaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKTtcclxuXHJcbn0pKHdpbmRvdyk7XHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHNlcmRpbW9hIG9uIDMwLjAxLjE2LlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIGdldFdlZWtEYXkoZGF0ZSkge1xyXG4gICAgdmFyIGRheXMgPSBbJ9Cy0YEnLCAn0L/QvScsICfQstGCJywgJ9GB0YAnLCAn0YfRgicsICfQv9GCJywgJ9GB0LEnXTtcclxuXHJcbiAgICByZXR1cm4gZGF5c1tkYXRlLmdldERheSgpXTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5fZGF0ZSgpIHtcclxuICAgIHZhciBkYXRlX2luID0gbmV3IERhdGUoKTtcclxuICAgIHZhciBtaW5fRGF5ID0gMSxcclxuICAgICAgICBtYXhfRGF5ID0gNSxcclxuICAgICAgICBtaW5Ib3VycyA9IDEyLFxyXG4gICAgICAgIG1heEhvdXJzID0gMTUsXHJcbiAgICAgICAgaW5NaW51dGVzID0gMzA7XHJcbiAgICBpZiAoZGF0ZV9pbi5nZXREYXkoKSA+PSBtaW5fRGF5ICYmIGRhdGVfaW4uZ2V0RGF5KCkgPD0gbWF4X0RheSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdpbl9kYXRlIDEnKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGVfaW4uZ2V0SG91cnMoKSA+PSBtaW5Ib3VycyAmJiBkYXRlX2luLmdldEhvdXJzKCkgPD0gbWF4SG91cnMpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2luX2RhdGUgMicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGVfaW4uZ2V0SG91cnMoKSA9PSBtYXhIb3Vycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVfaW4uZ2V0TWludXRlcygpIDw9IGluTWludXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuYWxsYWJvdXRvcmRlclwiKS5hcHBlbmQoXCI8cCBzdHlsZT0nY29sb3I6I0ZGNTI1MjsnPtCQ0LrRhtC40Y8u0J7QsdC10LQg0LIgVmluY2Vuem86PHN0cm9uZz4tMTUlPC9zdHJvbmc+PC9wPlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxfaW5UaW1lID0gMTU7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoZGF0ZV9pbi5nZXRIb3VycygpPG1heEhvdXJzKXtcclxuICAgICAgICAgICAgICAgICQoXCIuYWxsYWJvdXRvcmRlclwiKS5hcHBlbmQoXCI8cCBzdHlsZT0nY29sb3I6I0ZGNTI1MjsnPtCQ0LrRhtC40Y8u0J7QsdC10LQg0LIgVmluY2Vuem86PHN0cm9uZz4tMTUlPC9zdHJvbmc+PC9wPlwiKTtcclxuICAgICAgICAgICAgICAgIGdsb2JhbF9pblRpbWUgPSAxNTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
